{"sha": "9ad1f699b81ce32d1193301ee2c0c188abf64d28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkMWY2OTliODFjZTMyZDExOTMzMDFlZTJjMGMxODhhYmY2NGQyOA==", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2016-12-02T15:27:03Z"}, "committer": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2016-12-02T15:27:03Z"}, "message": "ARMv8-M Security Extension's cmse_nonsecure_entry: __acle_se label and bxns\nreturn\n\n    gcc/ChangeLog:\n    2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* config/arm/arm.c (use_return_insn): Change to return with  bxns\n\twhen cmse_nonsecure_entry.\n\t(output_return_instruction): Likewise.\n\t(arm_output_function_prologue): Likewise.\n\t(thumb_pop): Likewise.\n\t(thumb_exit): Likewise.\n\t(thumb2_expand_return): Assert that entry functions always have simple\n\treturns.\n\t(arm_expand_epilogue): Handle entry functions.\n\t(arm_function_ok_for_sibcall): Disable sibcall for entry functions.\n\t(arm_asm_declare_function_name): New.\n\t* config/arm/arm-protos.h (arm_asm_declare_function_name): New.\n\t* config/arm/elf.h (ASM_DECLARE_FUNCTION_NAME): Redefine to\n\tuse arm_asm_declare_function_name.\n\n    gcc/testsuite/ChangeLog:\n    2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t\tThomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* gcc.target/arm/cmse/cmse-4.c: New.\n\t* gcc.target/arm/cmse/cmse-9.c: New.\n\t* gcc.target/arm/cmse/cmse-10.c: New.\n\n\nCo-Authored-By: Thomas Preud'homme <thomas.preudhomme@arm.com>\n\nFrom-SVN: r243189", "tree": {"sha": "d98a57abc1d9a55e1b9bc171575481714d4b4619", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d98a57abc1d9a55e1b9bc171575481714d4b4619"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ad1f699b81ce32d1193301ee2c0c188abf64d28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad1f699b81ce32d1193301ee2c0c188abf64d28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad1f699b81ce32d1193301ee2c0c188abf64d28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad1f699b81ce32d1193301ee2c0c188abf64d28/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97b0656d67d2d39a79556bd200d3b6c41b2e5d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f"}], "stats": {"total": 168, "additions": 148, "deletions": 20}, "files": [{"sha": "eeb8c3cd409fe30fe61194215d6d7d8dd8bf3633", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad1f699b81ce32d1193301ee2c0c188abf64d28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad1f699b81ce32d1193301ee2c0c188abf64d28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ad1f699b81ce32d1193301ee2c0c188abf64d28", "patch": "@@ -1,3 +1,21 @@\n+2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/arm.c (use_return_insn): Change to return with  bxns\n+\twhen cmse_nonsecure_entry.\n+\t(output_return_instruction): Likewise.\n+\t(arm_output_function_prologue): Likewise.\n+\t(thumb_pop): Likewise.\n+\t(thumb_exit): Likewise.\n+\t(thumb2_expand_return): Assert that entry functions always have simple\n+\treturns.\n+\t(arm_expand_epilogue): Handle entry functions.\n+\t(arm_function_ok_for_sibcall): Disable sibcall for entry functions.\n+\t(arm_asm_declare_function_name): New.\n+\t* config/arm/arm-protos.h (arm_asm_declare_function_name): New.\n+\t* config/arm/elf.h (ASM_DECLARE_FUNCTION_NAME): Redefine to\n+\tuse arm_asm_declare_function_name.\n+\n 2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n "}, {"sha": "634a5de05472d562972d9ad84b5858691715714c", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad1f699b81ce32d1193301ee2c0c188abf64d28/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad1f699b81ce32d1193301ee2c0c188abf64d28/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=9ad1f699b81ce32d1193301ee2c0c188abf64d28", "patch": "@@ -33,6 +33,7 @@ extern int arm_volatile_func (void);\n extern void arm_expand_prologue (void);\n extern void arm_expand_epilogue (bool);\n extern void arm_declare_function_name (FILE *, const char *, tree);\n+extern void arm_asm_declare_function_name (FILE *, const char *, tree);\n extern void thumb2_expand_return (bool);\n extern const char *arm_strip_name_encoding (const char *);\n extern void arm_asm_output_labelref (FILE *, const char *);"}, {"sha": "db7e0c842fff1b0aee5059e3ea4813059caa8d03", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 73, "deletions": 10, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad1f699b81ce32d1193301ee2c0c188abf64d28/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad1f699b81ce32d1193301ee2c0c188abf64d28/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9ad1f699b81ce32d1193301ee2c0c188abf64d28", "patch": "@@ -3866,6 +3866,11 @@ use_return_insn (int iscond, rtx sibling)\n \treturn 0;\n     }\n \n+  /* ARMv8-M nonsecure entry function need to use bxns to return and thus need\n+     several instructions if anything needs to be popped.  */\n+  if (saved_int_regs && IS_CMSE_ENTRY (func_type))\n+    return 0;\n+\n   /* If there are saved registers but the LR isn't saved, then we need\n      two instructions for the return.  */\n   if (saved_int_regs && !(saved_int_regs & (1 << LR_REGNUM)))\n@@ -6906,6 +6911,11 @@ arm_function_ok_for_sibcall (tree decl, tree exp)\n   if (IS_INTERRUPT (func_type))\n     return false;\n \n+  /* ARMv8-M non-secure entry functions need to return with bxns which is only\n+     generated for entry functions themselves.  */\n+  if (IS_CMSE_ENTRY (arm_current_func_type ()))\n+    return false;\n+\n   if (!VOID_TYPE_P (TREE_TYPE (DECL_RESULT (cfun->decl))))\n     {\n       /* Check that the return value locations are the same.  For\n@@ -18568,6 +18578,7 @@ output_return_instruction (rtx operand, bool really_return, bool reverse,\n \t (e.g. interworking) then we can load the return address\n \t directly into the PC.  Otherwise we must load it into LR.  */\n       if (really_return\n+\t  && !IS_CMSE_ENTRY (func_type)\n \t  && (IS_INTERRUPT (func_type) || !TARGET_INTERWORK))\n \treturn_reg = reg_names[PC_REGNUM];\n       else\n@@ -18708,8 +18719,10 @@ output_return_instruction (rtx operand, bool really_return, bool reverse,\n \t  break;\n \n \tdefault:\n+\t  if (IS_CMSE_ENTRY (func_type))\n+\t    snprintf (instr, sizeof (instr), \"bxns%s\\t%%|lr\", conditional);\n \t  /* Use bx if it's available.  */\n-\t  if (arm_arch5 || arm_arch4t)\n+\t  else if (arm_arch5 || arm_arch4t)\n \t    sprintf (instr, \"bx%s\\t%%|lr\", conditional);\n \t  else\n \t    sprintf (instr, \"mov%s\\t%%|pc, %%|lr\", conditional);\n@@ -18722,6 +18735,44 @@ output_return_instruction (rtx operand, bool really_return, bool reverse,\n   return \"\";\n }\n \n+/* Output in FILE asm statements needed to declare the NAME of the function\n+   defined by its DECL node.  */\n+\n+void\n+arm_asm_declare_function_name (FILE *file, const char *name, tree decl)\n+{\n+  size_t cmse_name_len;\n+  char *cmse_name = 0;\n+  char cmse_prefix[] = \"__acle_se_\";\n+\n+  /* When compiling with ARMv8-M Security Extensions enabled, we should print an\n+     extra function label for each function with the 'cmse_nonsecure_entry'\n+     attribute.  This extra function label should be prepended with\n+     '__acle_se_', telling the linker that it needs to create secure gateway\n+     veneers for this function.  */\n+  if (use_cmse && lookup_attribute (\"cmse_nonsecure_entry\",\n+\t\t\t\t    DECL_ATTRIBUTES (decl)))\n+    {\n+      cmse_name_len = sizeof (cmse_prefix) + strlen (name);\n+      cmse_name = XALLOCAVEC (char, cmse_name_len);\n+      snprintf (cmse_name, cmse_name_len, \"%s%s\", cmse_prefix, name);\n+      targetm.asm_out.globalize_label (file, cmse_name);\n+\n+      ARM_DECLARE_FUNCTION_NAME (file, cmse_name, decl);\n+      ASM_OUTPUT_TYPE_DIRECTIVE (file, cmse_name, \"function\");\n+    }\n+\n+  ARM_DECLARE_FUNCTION_NAME (file, name, decl);\n+  ASM_OUTPUT_TYPE_DIRECTIVE (file, name, \"function\");\n+  ASM_DECLARE_RESULT (file, DECL_RESULT (decl));\n+  ASM_OUTPUT_LABEL (file, name);\n+\n+  if (cmse_name)\n+    ASM_OUTPUT_LABEL (file, cmse_name);\n+\n+  ARM_OUTPUT_FN_UNWIND (file, TRUE);\n+}\n+\n /* Write the function name into the code section, directly preceding\n    the function prologue.\n \n@@ -18771,10 +18822,6 @@ arm_output_function_prologue (FILE *f, HOST_WIDE_INT frame_size)\n {\n   unsigned long func_type;\n \n-  /* ??? Do we want to print some of the below anyway?  */\n-  if (TARGET_THUMB1)\n-    return;\n-\n   /* Sanity check.  */\n   gcc_assert (!arm_ccfsm_state && !arm_target_insn);\n \n@@ -18809,6 +18856,8 @@ arm_output_function_prologue (FILE *f, HOST_WIDE_INT frame_size)\n     asm_fprintf (f, \"\\t%@ Nested: function declared inside another function.\\n\");\n   if (IS_STACKALIGN (func_type))\n     asm_fprintf (f, \"\\t%@ Stack Align: May be called with mis-aligned SP.\\n\");\n+  if (IS_CMSE_ENTRY (func_type))\n+    asm_fprintf (f, \"\\t%@ Non-secure entry function: called from non-secure code.\\n\");\n \n   asm_fprintf (f, \"\\t%@ args = %d, pretend = %d, frame = %wd\\n\",\n \t       crtl->args.size,\n@@ -22915,8 +22964,8 @@ thumb_pop (FILE *f, unsigned long mask)\n   if (mask & (1 << PC_REGNUM))\n     {\n       /* Catch popping the PC.  */\n-      if (TARGET_INTERWORK || TARGET_BACKTRACE\n-\t  || crtl->calls_eh_return)\n+      if (TARGET_INTERWORK || TARGET_BACKTRACE || crtl->calls_eh_return\n+\t  || IS_CMSE_ENTRY (arm_current_func_type ()))\n \t{\n \t  /* The PC is never poped directly, instead\n \t     it is popped into r3 and then BX is used.  */\n@@ -22977,7 +23026,10 @@ thumb_exit (FILE *f, int reg_containing_return_addr)\n       if (crtl->calls_eh_return)\n \tasm_fprintf (f, \"\\tadd\\t%r, %r\\n\", SP_REGNUM, ARM_EH_STACKADJ_REGNUM);\n \n-      asm_fprintf (f, \"\\tbx\\t%r\\n\", reg_containing_return_addr);\n+      if (IS_CMSE_ENTRY (arm_current_func_type ()))\n+\tasm_fprintf (f, \"\\tbxns\\t%r\\n\", reg_containing_return_addr);\n+      else\n+\tasm_fprintf (f, \"\\tbx\\t%r\\n\", reg_containing_return_addr);\n       return;\n     }\n   /* Otherwise if we are not supporting interworking and we have not created\n@@ -22986,7 +23038,8 @@ thumb_exit (FILE *f, int reg_containing_return_addr)\n   else if (!TARGET_INTERWORK\n \t   && !TARGET_BACKTRACE\n \t   && !is_called_in_ARM_mode (current_function_decl)\n-\t   && !crtl->calls_eh_return)\n+\t   && !crtl->calls_eh_return\n+\t   && !IS_CMSE_ENTRY (arm_current_func_type ()))\n     {\n       asm_fprintf (f, \"\\tpop\\t{%r}\\n\", PC_REGNUM);\n       return;\n@@ -23209,7 +23262,10 @@ thumb_exit (FILE *f, int reg_containing_return_addr)\n     asm_fprintf (f, \"\\tadd\\t%r, %r\\n\", SP_REGNUM, ARM_EH_STACKADJ_REGNUM);\n \n   /* Return to caller.  */\n-  asm_fprintf (f, \"\\tbx\\t%r\\n\", reg_containing_return_addr);\n+  if (IS_CMSE_ENTRY (arm_current_func_type ()))\n+    asm_fprintf (f, \"\\tbxns\\t%r\\n\", reg_containing_return_addr);\n+  else\n+    asm_fprintf (f, \"\\tbx\\t%r\\n\", reg_containing_return_addr);\n }\n \f\n /* Scan INSN just before assembler is output for it.\n@@ -24095,6 +24151,12 @@ thumb2_expand_return (bool simple_return)\n \n   if (!simple_return && saved_regs_mask)\n     {\n+      /* TODO: Verify that this path is never taken for cmse_nonsecure_entry\n+\t functions or adapt code to handle according to ACLE.  This path should\n+\t not be reachable for cmse_nonsecure_entry functions though we prefer\n+\t to assert it for now to ensure that future code changes do not silently\n+\t change this behavior.  */\n+      gcc_assert (!IS_CMSE_ENTRY (arm_current_func_type ()));\n       if (num_regs == 1)\n         {\n           rtx par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n@@ -24512,6 +24574,7 @@ arm_expand_epilogue (bool really_return)\n \n       if (ARM_FUNC_TYPE (func_type) != ARM_FT_INTERWORKED\n           && (TARGET_ARM || ARM_FUNC_TYPE (func_type) == ARM_FT_NORMAL)\n+\t  && !IS_CMSE_ENTRY (func_type)\n           && !IS_STACKALIGN (func_type)\n           && really_return\n           && crtl->args.pretend_args_size == 0"}, {"sha": "03931eee7390ab4d09522e7d8bea10449719ddba", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad1f699b81ce32d1193301ee2c0c188abf64d28/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad1f699b81ce32d1193301ee2c0c188abf64d28/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=9ad1f699b81ce32d1193301ee2c0c188abf64d28", "patch": "@@ -75,16 +75,7 @@\n \n /* We might need a ARM specific header to function declarations.  */\n #undef  ASM_DECLARE_FUNCTION_NAME\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      ARM_DECLARE_FUNCTION_NAME (FILE, NAME, DECL);\t\t\\\n-      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\\\n-      ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\\\n-      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\\\n-      ARM_OUTPUT_FN_UNWIND (FILE, TRUE);\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n+#define ASM_DECLARE_FUNCTION_NAME arm_asm_declare_function_name\n \n /* We might need an ARM specific trailer for function declarations.  */\n #undef  ASM_DECLARE_FUNCTION_SIZE"}, {"sha": "e31a1b363ecbaf0cf17aa87570b783975b832584", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad1f699b81ce32d1193301ee2c0c188abf64d28/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad1f699b81ce32d1193301ee2c0c188abf64d28/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ad1f699b81ce32d1193301ee2c0c188abf64d28", "patch": "@@ -1,3 +1,10 @@\n+2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* gcc.target/arm/cmse/cmse-4.c: New.\n+\t* gcc.target/arm/cmse/cmse-9.c: New.\n+\t* gcc.target/arm/cmse/cmse-10.c: New.\n+\n 2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n "}, {"sha": "1a91ac39ee37ef20495e047b402d3f5edc60a613", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-10.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad1f699b81ce32d1193301ee2c0c188abf64d28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad1f699b81ce32d1193301ee2c0c188abf64d28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-10.c?ref=9ad1f699b81ce32d1193301ee2c0c188abf64d28", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse\" }  */\n+\n+void\n+foo (void) {}\n+\n+/* { dg-final { scan-assembler-not \"bxns\" } } */\n+/* { dg-final { scan-assembler \"foo:\" } } */\n+/* { dg-final { scan-assembler-not \"__acle_se_foo:\" } } */"}, {"sha": "6f930ab04a1097c64097a4e003296bbe85733319", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-4.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad1f699b81ce32d1193301ee2c0c188abf64d28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad1f699b81ce32d1193301ee2c0c188abf64d28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-4.c?ref=9ad1f699b81ce32d1193301ee2c0c188abf64d28", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse\" }  */\n+\n+struct span {\n+  int a, b;\n+};\n+\n+extern int qux (void);\n+\n+void __attribute__ ((cmse_nonsecure_entry))\n+foo (void) {}\n+\n+static void __attribute__ ((cmse_nonsecure_entry))\n+bar (void) {} /* { dg-warning \"has no effect on functions with static linkage\" } */\n+\n+int __attribute__ ((cmse_nonsecure_entry))\n+baz (void)\n+{\n+  return qux ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"bxns\" 2 } } */\n+/* { dg-final { scan-assembler \"foo:\" } } */\n+/* { dg-final { scan-assembler \"__acle_se_foo:\" } } */\n+/* { dg-final { scan-assembler-not \"__acle_se_bar:\" } } */\n+/* { dg-final { scan-assembler \"baz:\" } } */\n+/* { dg-final { scan-assembler \"__acle_se_baz:\" } } */"}, {"sha": "1d97f0e1a37209bd129ffe96ce92a86bc2e0d5d1", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-9.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad1f699b81ce32d1193301ee2c0c188abf64d28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad1f699b81ce32d1193301ee2c0c188abf64d28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-9.c?ref=9ad1f699b81ce32d1193301ee2c0c188abf64d28", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"Testing exclusion of -mcmse\" { arm-*-* } { \"-mcmse\" } { \"\" } }  */\n+\n+\n+int __attribute__ ((cmse_nonsecure_entry))\n+foo (int a)\n+{ /* { dg-warning \"attribute ignored without -mcmse option\" } */\n+  return a + 1;\n+}\n+\n+/* { dg-final { scan-assembler \"foo:\" } } */\n+/* { dg-final { scan-assembler-not \"__acle_se_foo:\" } } */"}]}