{"sha": "013a2ee0370f38ddbddbe39d99b0ab752aa13f35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEzYTJlZTAzNzBmMzhkZGJkZGJlMzlkOTliMGFiNzUyYWExM2YzNQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-04-22T08:25:33Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-04-22T08:25:33Z"}, "message": "Makefile.in (LANGUAGES): Remove c++.\n\n        * Makefile.in (LANGUAGES): Remove c++.\n        (SUBDIRS): New variable.\n        (LEX, LEXFLAGS): Ditto.\n        (MAKEOVERRIDES): Ditto.\n        (COMPILERS): Remove cc1plus.\n        (LANG_MAKEFILES, LANG_STAGESTUFF, LANG_DIFF_EXCLUDES, FLAGS_TO_PASS):\n        New variables.\n        (CPLUS_OBJS, CPLUS_TREE_H, C++, c++, g++, g++-cross, cc1plus,\n        cp-*.o, g++.o, gplus.info): Deleted.\n        (STAGESTUFF): Remove g++, g++-cross, cc1plus.  Add $(LANG_STAGESTUFF).\n        (Makefile): Depend on $(LANG_MAKEFILES).\n        (####language hooks, ####language fragments): New spots for sed\n        to insert things.\n        (all.cross, all.build, start.encap, rest.encap, info, dvi,\n        install-normal, install-common, install-info, install-man,\n        uninstall, distdir, mostlyclean, clean, distclean, extraclean,\n        realclean, stage1, stage2, stage3, stage4): Depend on lang.foo.\n        (mostlyclean, clean, distclean, extraclean, realclean): Clean as\n        much of the language subdirectories as we can.\n        (install-common):  Remove g++ installation.\n        (install-man): Remove g++.1 installation.\n        (uninstall): Remove g++ reference.\n        (TAGS): Remove cp-parse.? reference.\n        (distdir): Ditto.\n        (distdir-start, distdir-finish): New targets.\n        (diff): Remove cp-parse.? reference.  Add $(LANG_DIFF_EXCLUDES).\n        (compare, compare3, gnucompare, gnucompare3): Compare language\n        subdirectories too.\n        (stage1-start, stage2-start, stage3-start, stage4-start): New targets.\n        Ensure stage subdirectory exists before processing language\n        dependent part.\n\nFrom-SVN: r7136", "tree": {"sha": "d2028a30b5b352279df4b7d9084e6e018776e2b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2028a30b5b352279df4b7d9084e6e018776e2b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/013a2ee0370f38ddbddbe39d99b0ab752aa13f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/013a2ee0370f38ddbddbe39d99b0ab752aa13f35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/013a2ee0370f38ddbddbe39d99b0ab752aa13f35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/013a2ee0370f38ddbddbe39d99b0ab752aa13f35/comments", "author": null, "committer": null, "parents": [{"sha": "a5943075801dd08067c212ff6a6139fe62fba195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5943075801dd08067c212ff6a6139fe62fba195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5943075801dd08067c212ff6a6139fe62fba195"}], "stats": {"total": 310, "additions": 183, "deletions": 127}, "files": [{"sha": "c2996def7d8bf4d59573326c88ff028a0d6924ae", "filename": "gcc/Makefile.in", "status": "modified", "additions": 183, "deletions": 127, "changes": 310, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013a2ee0370f38ddbddbe39d99b0ab752aa13f35/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013a2ee0370f38ddbddbe39d99b0ab752aa13f35/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=013a2ee0370f38ddbddbe39d99b0ab752aa13f35", "patch": "@@ -28,8 +28,13 @@\n # Variables that exist for you to override.\n # See below for how to change them for certain systems.\n \n+# List of language subdirectories.\n+# This is overridden by configure.\n+SUBDIRS =\n+\n # Selection of languages to be made.\n-LANGUAGES = c c++ objective-c proto\n+# This is overridden by configure.\n+LANGUAGES = c objective-c proto\n \n ALLOCA =\n ALLOCA_FLAGS =\n@@ -53,6 +58,8 @@ T_CPPFLAGS =\n CC = cc\n BISON = bison\n BISONFLAGS =\n+LEX = flex\n+LEXFLAGS =\n AR = ar\n OLDAR_FLAGS = qc\n AR_FLAGS = rc\n@@ -65,6 +72,8 @@ INSTALL_DATA = $(INSTALL)\n SYMLINK = ln -s\n MAKEINFO = makeinfo\n TEXI2DVI = texi2dvi\n+# For GNUmake: let us decide what gets passed to recursive makes.\n+MAKEOVERRIDES =\n \n # Define this as & to perform parallel make on a Sequent.\n # Note that this has some bugs, and it seems currently necessary \n@@ -383,7 +392,6 @@ HOST_PRINT = $(HOST_PREFIX)print-rtl.o\n # so that tm.h and config.h will be found in the compilation\n # subdirectory rather than in the source directory.\n INCLUDES = -I. -I$(srcdir) -I$(srcdir)/config\n-SUBDIR_INCLUDES = -I.. -I../$(srcdir) -I../$(srcdir)/config\n \n # Always use -I$(srcdir)/config when compiling.\n .c.o:\n@@ -393,10 +401,49 @@ SUBDIR_INCLUDES = -I.. -I../$(srcdir) -I../$(srcdir)/config\n # defined in this file into the environment.\n .NOEXPORT:\n \f\n+# Support for additional languages (other than c and objc).\n+# ??? objc can be supported this way too (leave for later).\n+\n+# These next lines are overridden by configure.\n+LANG_MAKEFILES =\n+LANG_STAGESTUFF =\n+LANG_DIFF_EXCLUDES =\n+\n+# Flags to pass to recursive makes.\n+# CC is set by configure.  Hosts without symlinks need special handling\n+# because we need CC=\"stage1/xgcc -Bstage1/\" to work in the language\n+# subdirectories.\n+# ??? The choices here will need some experimenting with.\n+FLAGS_TO_PASS = \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"AR_FOR_TARGET=$(AR_FOR_TARGET)\" \\\n+\t\"BISON=$(BISON)\" \\\n+\t\"BISONFLAGS=$(BISONFLAGS)\" \\\n+\t\"CC=set-by-configure\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"CLIB=$(CLIB)\" \\\n+\t\"GCC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LEX=$(LEX)\" \\\n+\t\"LEXFLAGS=$(LEXFLAGS)\" \\\n+\t\"MAKEINFO=$(MAKEINFO)\" \\\n+\t\"MAKEINFOFLAGS=$(MAKEINFOFLAGS)\" \\\n+\t\"MALLOC=$(MALLOC)\" \\\n+\t\"OBSTACK=$(OBSTACK)\" \\\n+\t\"RANLIB_FOR_TARGET=$(RANLIB_FOR_TARGET)\" \\\n+\t\"RANLIB_TEST_FOR_TARGET=$(RANLIB_TEST_FOR_TARGET)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"tooldir=$(tooldir)\" \\\n+\t\"bindir=$(bindir)\" \\\n+\t\"libsubdir=$(libsubdir)\"\n+\f\n # Lists of files for various purposes.\n \n # A list of all the language-specific executables.\n-COMPILERS = cc1 cc1plus cc1obj\n+# This is overridden by configure.\n+COMPILERS = cc1 cc1obj\n \n # Language-specific object files for C.\n C_OBJS = c-parse.o c-lang.o c-lex.o c-pragma.o \\\n@@ -406,14 +453,6 @@ C_OBJS = c-parse.o c-lang.o c-lex.o c-pragma.o \\\n OBJC_OBJS = objc-parse.o objc-act.o c-lex.o c-pragma.o \\\n    c-decl.o c-typeck.o c-convert.o c-aux-info.o c-common.o c-iterate.o\n \n-# Language-specific object files for C++.\n-CPLUS_OBJS = cp-parse.o cp-decl.o cp-decl2.o \\\n-   cp-typeck.o cp-type2.o cp-tree.o cp-ptree.o \\\n-   cp-cvt.o cp-search.o cp-lex.o cp-gc.o cp-call.o \\\n-   cp-class.o cp-init.o cp-method.o cp-except.o \\\n-   cp-expr.o cp-pt.o cp-edsel.o cp-xref.o \\\n-   $(CPLUS_INPUT) cp-spew.o c-common.o cp-error.o cp-errfn.o\n-\n # Files specific to the C interpreter bytecode compiler(s).\n BC_OBJS = bc-emit.o bc-optab.o\n \n@@ -445,8 +484,9 @@ STAGESTUFF = *.o insn-flags.h insn-config.h insn-codes.h \\\n  bc-arity.h bc-opcode.h bc-opname.h \\\n  stamp-bcarity stamp-bcopcode stamp-bcopname \\\n  bi-arity bi-opcode bi-opname \\\n- $(GCC_PASSES) $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross cccp g++ g++-cross \\\n- cc1plus cc1obj enquire protoize unprotoize specs collect2 $(USE_COLLECT2)\n+ $(GCC_PASSES) $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross cccp \\\n+ cc1obj enquire protoize unprotoize specs collect2 $(USE_COLLECT2) \\\n+ $(LANG_STAGESTUFF)\n \n # Members of libgcc1.a.\n LIB1FUNCS = _mulsi3 _udivsi3 _divsi3 _umodsi3 _modsi3 \\\n@@ -488,37 +528,56 @@ USER_H = $(srcdir)/ginclude/stdarg.h $(srcdir)/ginclude/stddef.h \\\n CONFIG_H =\n RTL_H = rtl.h rtl.def machmode.h machmode.def\n TREE_H = tree.h real.h tree.def machmode.h machmode.def\n-CPLUS_TREE_H = $(TREE_H) cp-tree.h cp-tree.def\n BYTECODE_H = bytecode.h bc-emit.h bc-optab.h\n \f\n+# Language makefile fragments.\n+\n+# The following targets define the interface between us and the languages.\n+#\n+# all.build, all.cross, start.encap, rest.encap,\n+# info, dvi,\n+# install-normal, install-common, install-info, install-man,\n+# uninstall, distdir,\n+# mostlyclean, clean, distclean, extraclean, realclean,\n+# stage1, stage2, stage3, stage4\n+#\n+# Each language is linked in with a series of hooks (since we can't use `::'\n+# targets).  The name of each hooked is \"lang.${target_name}\" (eg: lang.info).\n+# Configure computes and adds these here.\n+\n+####language hooks\n+\n+# sed inserts language fragments after the following line.\n+####language fragments\n+\n+# End of language makefile fragments.\n+\f\n # Avoid a lot of time thinking about remaking Makefile.in and *.def.\n .SUFFIXES: .in .def\n \n Makefile: $(srcdir)/Makefile.in $(srcdir)/configure $(srcdir)/version.c \\\n-   $(srcdir)/config/$(xmake_file) $(srcdir)/config/$(tmake_file)\n+   $(srcdir)/config/$(xmake_file) $(srcdir)/config/$(tmake_file) \\\n+   $(LANG_MAKEFILES)\n \t$(SHELL) config.status\n \n all.internal: start.encap rest.encap\n # This is what to compile if making a cross-compiler.\n-# Note that we can compile enquire using the cross-compiler just build,\n+# Note that we can compile enquire using the cross-compiler just built,\n # although we can't run it on this machine.\n-all.cross: native gcc-cross g++-cross specs stmp-headers $(LIBGCC) $(STMP_FIXPROTO) $(CROSS_TEST) $(ENQUIRE) $(EXTRA_PARTS)\n+all.cross: native gcc-cross specs stmp-headers $(LIBGCC) $(STMP_FIXPROTO) \\\n+\t$(CROSS_TEST) $(ENQUIRE) $(EXTRA_PARTS) lang.all.cross\n # This is what to compile if making gcc with a cross-compiler.\n-all.build: native xgcc g++ $(EXTRA_PARTS)\n+all.build: native xgcc $(EXTRA_PARTS) lang.all.build\n # This is what must be made before installing GCC and converting libraries.\n-start.encap: native xgcc g++ specs $(LIBGCC1) xlimits.h\n+start.encap: native xgcc specs $(LIBGCC1) xlimits.h lang.start.encap\n # These can't be made until after GCC can run.\n-rest.encap: stmp-headers $(LIBGCC) $(STMP_FIXPROTO) $(EXTRA_PARTS)\n+rest.encap: stmp-headers $(LIBGCC) $(STMP_FIXPROTO) $(EXTRA_PARTS) lang.rest.encap\n # This is what is made with the host's compiler\n # whether making a cross compiler or not.\n native: config.status cpp $(LANGUAGES) $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2)\n \n # Define the names for selecting languages in LANGUAGES.\n-# Note that it would be nice to move the dependency on g++\n-# into the C++ rule, but that needs a little bit of work\n-# to do the right thing within all.cross.\n C c: cc1\n-C++ c++: cc1plus\n OBJC objc: cc1obj objc-runtime\n OBJECTIVE-C objective-c: cc1obj objc-runtime\n PROTO: proto\n@@ -559,27 +618,15 @@ xgcc: gcc.o version.o $(LIBDEPS)\n specs: xgcc\n \t$(GCC_FOR_TARGET) -dumpspecs > specs\n \n-# Create the compiler driver for g++.\n-g++: g++.o $(LIBDEPS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o g++ g++.o $(LIBS)\n-\n # We do want to create an executable named `xgcc', so we can use it to\n # compile libgcc2.a.\n # Also create gcc-cross, so that install-common will install properly.\n gcc-cross: xgcc\n \tcp xgcc gcc-cross\n \n-# Create a version of the g++ driver which calls the cross-compiler.\n-g++-cross: $(srcdir)/g++.c\n-\t$(CC) $(ALL_CFLAGS) $(INCLUDES) $(LDFLAGS) -o g++-cross \\\n-\t   -DGCC_NAME=\\\"$(target)-gcc\\\" $(srcdir)/g++.c version.o $(LIBS)\n-\n cc1: $(P) $(C_OBJS) $(OBJS) $(BC_OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cc1 $(C_OBJS) $(OBJS) $(BC_OBJS) $(LIBS)\n \n-cc1plus: $(P) $(CPLUS_OBJS) $(OBJS) $(BC_OBJS) $(LIBDEPS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cc1plus $(CPLUS_OBJS) $(BC_OBJS) $(OBJS) $(LIBS)\n-\n cc1obj: $(P) $(OBJC_OBJS) $(OBJS) $(BC_OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cc1obj $(OBJC_OBJS) $(OBJS) $(BC_OBJS) $(LIBS)\n \n@@ -836,47 +883,6 @@ c-convert.o : c-convert.c $(CONFIG_H) $(TREE_H) flags.h\n c-pragma.o: c-pragma.c $(CONFIG_H) $(TREE_H)\n c-iterate.o: c-iterate.c $(CONFIG_H) $(TREE_H) $(RTL_H) c-tree.h flags.h\n \n-# C++ language specific files.\n-\n-cp-parse.o : $(srcdir)/cp-parse.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h cp-lex.h\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-  `echo $(srcdir)/cp-parse.c | sed 's,^\\./,,'`\n-\n-$(srcdir)/cp-parse.c $(srcdir)/cp-parse.h : $(srcdir)/cp-parse.y\n-\t@echo expect 27 shift/reduce conflicts and 14 reduce/reduce conflicts\n-\tcd $(srcdir); $(BISON) $(BISONFLAGS) -d -o cp-parse.c cp-parse.y\n-\tcd $(srcdir); grep '^#define[ \t]*YYEMPTY' cp-parse.c >>cp-parse.h\n-\n-cp-spew.o : cp-spew.c $(CONFIG_H) $(CPLUS_TREE_H) \\\n-   $(srcdir)/cp-parse.h flags.h cp-lex.h\n-cp-lex.o : cp-lex.c $(CONFIG_H) $(CPLUS_TREE_H) \\\n-   $(srcdir)/cp-parse.h $(srcdir)/cp-input.c flags.h cp-hash.h cp-lex.h\n-cp-decl.o : cp-decl.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h \\\n-  cp-lex.h cp-decl.h stack.h\n-cp-decl2.o : cp-decl2.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h \\\n-  cp-lex.h cp-decl.h\n-cp-type2.o : cp-type2.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n-cp-typeck.o : cp-typeck.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h $(RTL_H)\n-cp-class.o : cp-class.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n-cp-call.o : cp-call.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n-cp-init.o : cp-init.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h $(RTL_H)\n-cp-method.o : cp-method.c $(CONFIG_H) $(CPLUS_TREE_H)\n-cp-cvt.o : cp-cvt.c $(CONFIG_H) $(CPLUS_TREE_H)\n-cp-search.o : cp-search.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h flags.h\n-cp-tree.o : cp-tree.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n-cp-ptree.o : cp-ptree.c $(CONFIG_H) $(CPLUS_TREE_H)\n-cp-gc.o : cp-gc.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n-cp-except.o : cp-except.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h $(RTL_H)\n-cp-expr.o : cp-expr.c $(CONFIG_H) $(CPLUS_TREE_H) $(RTL_H) flags.h \\\n-  expr.h insn-codes.h\n-cp-edsel.o : cp-edsel.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h flags.h\n-cp-xref.o : cp-xref.c $(CONFIG_H) $(CPLUS_TREE_H) input.h\n-cp-pt.o : cp-pt.c $(CONFIG_H) $(CPLUS_TREE_H) cp-decl.h cp-parse.h\n-cp-error.o : cp-error.c $(CONFIG_H) $(CPLUS_TREE_H)\n-cp-errfn.o : cp-errfn.c $(CONFIG_H) $(CPLUS_TREE_H)\n-\n-g++.o : g++.c $(CONFIG_H)\n-\n # To make a configuration always use collect2, set USE_COLLECT2 to ld.\n ld: collect2\n \trm -f ld\n@@ -1620,19 +1626,16 @@ stmp-fixproto: fixhdr.ready fixproto stmp-headers\n # Remake the info files.\n \n doc: info\n-info: $(srcdir)/cpp.info $(srcdir)/gcc.info\n+info: $(srcdir)/cpp.info $(srcdir)/gcc.info lang.info\n \n $(srcdir)/cpp.info: cpp.texi\n \tcd $(srcdir); $(MAKEINFO) cpp.texi\n \n-#$(srcdir)/gplus.info: gplus.texi\n-#\t$(MAKEINFO) `echo $(srcdir)/gplus.texi | sed 's,^\\./,,'`\n-\n $(srcdir)/gcc.info: gcc.texi extend.texi install.texi invoke.texi \\\n \t\tmd.texi rtl.texi tm.texi \n \tcd $(srcdir); $(MAKEINFO) gcc.texi\n \n-dvi: $(srcdir)/gcc.dvi $(srcdir)/cpp.dvi\n+dvi: $(srcdir)/gcc.dvi $(srcdir)/cpp.dvi lang.dvi\n \n # This works with GNU Make's default rule.\n $(srcdir)/gcc.dvi: gcc.texi extend.texi install.texi invoke.texi \\\n@@ -1656,9 +1659,11 @@ $(srcdir)/INSTALL: install1.texi install.texi\n # `clean' deletes everything made by running `make all'.\n # `distclean' also deletes the files made by config.\n # `realclean' also deletes everything that could be regenerated automatically.\n+# We remove as much from the language subdirectories as we can\n+# (less duplicated code).\n \n \n-mostlyclean: bytecode.mostlyclean\n+mostlyclean: bytecode.mostlyclean lang.mostlyclean\n \t-rm -f $(STAGESTUFF)\n # Clean the objc subdir if we created one.\n \tif [ -d objc ]; then \\\n@@ -1678,9 +1683,13 @@ mostlyclean: bytecode.mostlyclean\n \t-rm -f tmp-foo1 tmp-foo2 tmp-proto.* tmp-unproto.1 tmp-SYSCALLS.s\n # Delete the stamp files.\n \t-rm -f stamp-* tmp-*\n+\t-rm -f */stamp-* */tmp-*\n # Delete debugging dump files.\n \t-rm -f *.greg *.lreg *.combine *.flow *.cse *.jump *.rtl *.tree *.loop\n \t-rm -f *.dbr *.jump2 *.sched *.cse2 *.sched2 *.stack\n+\t-rm -f */*.greg */*.lreg */*.combine */*.flow */*.cse */*.jump */*.rtl\n+\t-rm -f */*.tree */*.loop */*.dbr */*.jump2 */*.sched */*.cse2\n+\t-rm -f */*.sched2 */*.stack\n # Delete some files made during installation.\n \t-rm -f specs gfloat.h float.h-* enquire SYSCALLS.c.X SYSCALLS.c\n \t-rm -f collect collect2 mips-tfile mips-tdump alloca.s\n@@ -1689,62 +1698,66 @@ mostlyclean: bytecode.mostlyclean\n \t  gen-protos fixproto.list fixtmp.* fixhdr.ready\n # Delete unwanted output files from TeX.\n \t-rm -f *.toc *.log *.vr *.fn *.cp *.tp *.ky *.pg\n+\t-rm -f */*.toc */*.log */*.vr */*.fn */*.cp */*.tp */*.ky */*.pg\n # Delete sorted indices we don't actually use.\n \t-rm -f gcc.vrs gcc.kys gcc.tps gcc.pgs gcc.fns\n # Delete core dumps.\n-\t-rm -f core config/core\n+\t-rm -f core */core\n \n # Delete all files made by compilation\n # that don't exist in the distribution.\n-clean: mostlyclean bytecode.clean\n+clean: mostlyclean bytecode.clean lang.clean\n # It may not be quite desirable to delete unprotoize.c here,\n # but the spec for `make clean' requires it.\n # Using unprotoize.c is not quite right in the first place, \n # but what better way is there?\n \t-rm -f libgcc.a libgcc1.a libgcc2.a libgcc2.ready libgcc1.null\n \t-rm -f *.dvi\n+\t-rm -f */*.dvi\n \t-if [ -f md.pre-cpp ]; then \\\n \t  rm -f md ; \\\n \tfi\n # Delete the include directory.\n \t-rm -rf stmp-* include objc-headers\n+\t-rm -f */stmp-*\n \n # Delete all files that users would normally create\n # while building and installing GCC.\n-distclean: clean bytecode.distclean\n+distclean: clean bytecode.distclean lang.distclean\n \t-rm -f tm.h aux-output.c config.h config.status tconfig.h hconfig.h\n \t-rm -f md md.pre-cpp\n \t-rm -f Makefile *.oaux\n \t-rm -fr stage1 stage2 stage3 stage4\n-\t-rm -f cp-parse.output\n+\t-rm -f */stage1 */stage2 */stage3 */stage4\n \t-rm -f objc-parse.output\n \t-rm -f c-parse.output\n \n # Delete anything likely to be found in the source directory\n # that shouldn't be in the distribution.\n-extraclean: distclean\n+extraclean: distclean lang.extraclean\n \t-rm -rf =* ./\"#\"* *~* config/=* config/\"#\"* config/*~*\n \t-rm -f patch* *.orig *.rej config/patch* config/*.orig config/*.rej\n \t-rm -f config/*/=* config/*/\"#\"* config/*/*~*\n \t-rm -f config/*/*.orig config/*/*.rej\n-\t-rm -f objc/=* objc/\"#\"* objc/*~*\n-\t-rm -f objc/*.orig objc/*.rej\n \t-rm -f *.dvi *.oaux *.d *.[zZ] *.gz\n \t-rm -f *.tar *.xtar *diff *.diff.* *.tar.* *.xtar.* *diffs\n \t-rm -f *lose config/*lose config/*/*lose\n \t-rm -f *.s *.s[0-9] *.i install1.texi config/ChangeLog\n+\t-rm -f */=* */\"#\"* */*~*\n+\t-rm -f */patch* */*.orig */*.rej\n+\t-rm -f */*.dvi */*.oaux */*.d */*.[zZ] */*.gz\n+\t-rm -f */*.tar */*.xtar */*diff */*.diff.* */*.tar.* */*.xtar.* */*diffs\n+\t-rm -f */*lose */*.s */*.s[0-9] */*.i\n \n # Get rid of every file that's generated from some other file.\n # Most of these files ARE PRESENT in the GCC distribution.\n-realclean: distclean bytecode.realclean\n+realclean: distclean bytecode.realclean lang.realclean\n \t-rm -f c-parse.y c-gperf.h objc-parse.y\n-\t-rm -f cp-parse.c cp-parse.h cp-parse.output\n \t-rm -f objc-parse.c objc-parse.output\n \t-rm -f c-parse.c c-parse.h c-parse.output\n \t-rm -f cexp.c cexp.output TAGS \n \t-rm -f cpp.info* cpp.??s cpp.*aux\n \t-rm -f gcc.info* gcc.??s gcc.*aux\n-\t-rm -f gplus.info* gplus.??s gplus.*aux\n \f\n # Entry points `install' and `uninstall'.\n # Also use `install-collect2' to install collect2 when the config files don't.\n@@ -1756,7 +1769,7 @@ install: $(INSTALL_TARGET) ; @true\n \n # Copy the compiler files into directories where they will be run.\n install-normal: install-common $(INSTALL_HEADERS) $(INSTALL_LIBGCC) \\\n-    install-man install-info\n+    install-man install-info lang.install-normal\n \n # Do nothing while making gcc with a cross-compiler. The person who\n # makes gcc for the target machine has to know how to put a complete\n@@ -1801,7 +1814,7 @@ install-dir:\n \t-if [ -d $(mandir) ] ; then true ; else mkdir $(mandir) ; fi\n \n # Install the compiler executables built during cross compilation.\n-install-common: native install-dir xgcc $(EXTRA_PARTS)\n+install-common: native install-dir xgcc $(EXTRA_PARTS) lang.install-common\n \tfor file in $(COMPILERS); do \\\n \t  if [ -f $$file ] ; then \\\n \t    rm -f $(libsubdir)/$$file; \\\n@@ -1829,26 +1842,12 @@ install-common: native install-dir xgcc $(EXTRA_PARTS)\n \t    rm -f $(tooldir)/bin/gcc; \\\n \t    $(INSTALL_PROGRAM) gcc-cross $(tooldir)/bin/gcc; \\\n \t  else true; fi; \\\n-\t  if [ -f cc1plus ] ; then \\\n-\t    rm -f $(bindir)/$(target)-g++; \\\n-\t    $(INSTALL_PROGRAM) g++-cross $(bindir)/$(target)-g++; \\\n-\t    chmod a+x $(bindir)/$(target)-g++; \\\n-\t    rm -f $(bindir)/$(target)-c++; \\\n-\t    ln $(bindir)/$(target)-g++ $(bindir)/$(target)-c++; \\\n-\t  fi ; \\\n \telse \\\n \t  rm -f $(bindir)/gcc; \\\n \t  $(INSTALL_PROGRAM) xgcc $(bindir)/gcc; \\\n \t  rm -f $(bindir)/$(target)-gcc-1; \\\n \t  ln $(bindir)/gcc $(bindir)/$(target)-gcc-1; \\\n \t  mv $(bindir)/$(target)-gcc-1 $(bindir)/$(target)-gcc; \\\n-\t  if [ -f cc1plus ] ; then \\\n-\t    rm -f $(bindir)/g++; \\\n-\t    $(INSTALL_PROGRAM) g++ $(bindir)/g++; \\\n-\t    chmod a+x $(bindir)/g++; \\\n-\t    rm -f $(bindir)/c++; \\\n-\t    ln $(bindir)/g++ $(bindir)/c++; \\\n-\t  fi ; \\\n \tfi\n # Install protoize if it was compiled.\n \t-if [ -f protoize ]; \\\n@@ -1865,22 +1864,20 @@ install-common: native install-dir xgcc $(EXTRA_PARTS)\n \t$(INSTALL_PROGRAM) cpp $(libsubdir)/cpp\n \n # Install the info files.\n-install-info: doc install-dir\n+install-info: doc install-dir lang.install-info\n \t-rm -f $(infodir)/cpp.info* $(infodir)/gcc.info*\n \tcd $(srcdir); for f in cpp.info* gcc.info*; \\\n \tdo $(INSTALL_DATA) $$f $(infodir)/$$f; done\n \t-chmod a-x $(infodir)/cpp.info* $(infodir)/gcc.info*\n \n # Install the man pages.\n-install-man: install-dir $(srcdir)/gcc.1 $(srcdir)/cccp.1 $(srcdir)/g++.1\n+install-man: install-dir $(srcdir)/gcc.1 $(srcdir)/cccp.1 lang.install-man\n \t-rm -f $(mandir)/gcc$(manext)\n \t-$(INSTALL_DATA) $(srcdir)/gcc.1 $(mandir)/gcc$(manext)\n \t-chmod a-x $(mandir)/gcc$(manext)\n \t-rm -f $(mandir)/cccp$(manext)\n \t-$(INSTALL_DATA) $(srcdir)/cccp.1 $(mandir)/cccp$(manext)\n \t-chmod a-x $(mandir)/cccp$(manext)\n-\t-$(INSTALL_DATA) $(srcdir)/g++.1 $(mandir)/g++$(manext)\n-\t-chmod a-x $(mandir)/g++$(manext)\n \n # Install the library.\n install-libgcc: libgcc.a install-dir\n@@ -1966,13 +1963,12 @@ install-collect2: collect2 install-dir\n \t$(INSTALL_PROGRAM) xgcc $(libsubdir)/gcc\n \n # Cancel installation by deleting the installed files.\n-uninstall:\n+uninstall: lang.uninstall\n \t-rm -rf $(libsubdir)\n \t-rm -rf $(bindir)/gcc\n \t-rm -rf $(bindir)/protoize\n \t-rm -rf $(bindir)/unprotoize\n \t-rm -rf $(mandir)/gcc$(manext)\n-\t-rm -rf $(mandir)/g++$(manext)\n \t-rm -rf $(mandir)/cccp$(manext)\n \t-rm -rf $(mandir)/protoize$(manext)\n \t-rm -rf $(mandir)/unprotoize$(manext)\n@@ -1983,7 +1979,7 @@ uninstall:\n TAGS: force\n \tcd $(srcdir);\t\t\t\t\t\t\t\\\n \tmkdir temp;\t\t\t\t\t\t\t\\\n-\tmv -f c-parse.[ch] cp-parse.[ch] objc-parse.c cexp.c =*.[chy] temp; \\\n+\tmv -f c-parse.[ch] objc-parse.c cexp.c =*.[chy] temp;\t\t\\\n \tetags *.y *.h *.c;\t\t\t\t\t\t\\\n \tmv temp/* .;\t\t\t\t\t\t\t\\\n \trmdir temp\n@@ -2004,8 +2000,10 @@ gcc.xtar: distdir\n # Make the distribution.\n \ttar -chf gcc.xtar gcc-$(version)\n \n-distdir: doc $(srcdir)/INSTALL c-parse.y c-gperf.h objc-parse.y cp-parse.y \\\n-  c-parse.c cp-parse.c objc-parse.c cexp.c\n+# This target exists to do the initial work before the language specific\n+# stuff gets done.\n+distdir-start: doc $(srcdir)/INSTALL c-parse.y c-gperf.h objc-parse.y \\\n+  c-parse.c objc-parse.c cexp.c\n \t@if grep -s \"for version ${mainversion}\" gcc.texi > /dev/null; \\\n \tthen true; \\\n \telse echo \"You must update the version number in \\`gcc.texi'\"; sleep 10;\\\n@@ -2045,19 +2043,25 @@ distdir: doc $(srcdir)/INSTALL c-parse.y c-gperf.h objc-parse.y cp-parse.y \\\n \t  ln $$file ../tmp/objc >/dev/null 2>&1 || cp $$file ../tmp/objc; \\\n \tdone\n \tln .gdbinit tmp\n+\n+# Finish making `distdir', after the languages have done their thing.\n+distdir-finish:\n \tmv tmp gcc-$(version)\n # Get rid of everything we don't want in the distribution.\n \tcd gcc-$(version); make -f Makefile.in extraclean\n \n+distdir: distdir-start lang.distdir distdir-finish\n+\n # make diff oldversion=M.N \n # creates a diff file between an older distribution and this one.\n # The -P option assumes this is GNU diff.\n diff:\n \tdiff -rc2P -x c-parse.y -x c-parse.c -x c-parse.h -x c-gperf.h \\\n-\t  -x objc-parse.y -x cp-parse.c -x cp-parse.h -x cexp.c \\\n-\t  -x bi-parser.c -x objc-parse.c -x TAGS -x \"gcc.??\" -x \"gcc.??s\" \\\n-\t  -x gcc.aux -x \"cpp.??s\" -x \"cpp.??\" -x cpp.aux -x \"cpp.info*\"\n-\t  -x \"gcc.info*\" \\\n+\t  -x cexp.c -x bi-parser.c -x objc-parse.y -x objc-parse.c \\\n+\t  -x TAGS \\\n+\t  -x \"gcc.??\" -x \"gcc.??s\" -x gcc.aux -x \"gcc.info*\" \\\n+\t  -x \"cpp.??\" -x \"cpp.??s\" -x cpp.aux -x \"cpp.info*\" \\\n+\t  $(LANG_DIFF_EXCLUDES) \\\n \t  gcc-$(oldversion) gcc-$(version) > diffs\n \n # do make -f ../gcc/Makefile maketest DIR=../gcc\n@@ -2112,15 +2116,33 @@ compare: force\n \t  tail +16c stage2/$$file > tmp-foo2 2>/dev/null \\\n \t    && (cmp tmp-foo1 tmp-foo2 || echo $$file differs); \\\n \tdone\n+\tfor dir in tmp-foo $(SUBDIRS); do \\\n+\t  if [ `echo $$dir/*.o` != \"$$dir/*.o\" ] ; then \\\n+\t    for file in $$dir/*.o; do \\\n+\t      tail +16c ./$$file > tmp-foo1; \\\n+\t      tail +16c stage2/$$file > tmp-foo2 2>/dev/null \\\n+\t        && (cmp tmp-foo1 tmp-foo2 || echo $$file differs); \\\n+\t    done \\\n+\t  fi \\\n+\tdone\n \t-rm -f tmp-foo*\n \n # Similar, but compare with stage3 directory\n compare3: force\n \tfor file in *.o; do \\\n-\t  tail +16c $$file > tmp-foo1; \\\n+\t  tail +16c ./$$file > tmp-foo1; \\\n \t  tail +16c stage3/$$file > tmp-foo2 2>/dev/null \\\n \t    && (cmp tmp-foo1 tmp-foo2 || echo $$file differs); \\\n \tdone\n+\tfor dir in tmp-foo $(SUBDIRS); do \\\n+\t  if [ `echo $$dir/*.o` != \"$$dir/*.o\" ] ; then \\\n+\t    for file in $$dir/*.o; do \\\n+\t      tail +16c ./$$file > tmp-foo1; \\\n+\t      tail +16c stage3/$$file > tmp-foo2 2>/dev/null \\\n+\t        && (cmp tmp-foo1 tmp-foo2 || echo $$file differs); \\\n+\t    done \\\n+\t  fi \\\n+\tdone\n \t-rm -f tmp-foo*\n \n # Compare the object files in the current directory with those in the\n@@ -2131,41 +2153,75 @@ gnucompare: force\n \tfor file in *.o; do \\\n \t  cmp --ignore-initial=16 $$file stage2/$$file || true ; \\\n \tdone\n+\tfor dir in tmp-foo $(SUBDIRS); do \\\n+\t  if [ `echo $$dir/*.o` != \"$$dir/*.o\" ] ; then \\\n+\t    for file in $$dir/*.o; do \\\n+\t      cmp --ignore-initial=16 $$file stage2/$$file || true ; \\\n+\t    done \\\n+\t  fi \\\n+\tdone\n \n # Similar, but compare with stage3 directory\n gnucompare3: force\n \tfor file in *.o; do \\\n \t  cmp --ignore-initial=16 $$file stage3/$$file || true ; \\\n \tdone\n+\tfor dir in tmp-foo $(SUBDIRS); do \\\n+\t  if [ `echo $$dir/*.o` != \"$$dir/*.o\" ] ; then \\\n+\t    for file in $$dir/*.o; do \\\n+\t      cmp --ignore-initial=16 $$file stage3/$$file || true ; \\\n+\t    done \\\n+\t  fi \\\n+\tdone\n \n # Copy the object files from a particular stage into a subdirectory.\n-stage1: force\n+stage1-start:\n \t-if [ -d stage1 ] ; then true ; else mkdir stage1 ; fi\n+\t-for dir in . $(SUBDIRS) ; \\\n+\t do \\\n+\t   if [ -d stage1/$$dir ] ; then true ; else mkdir stage1/$$dir ; fi \\\n+\t done\n \t-mv $(STAGESTUFF) stage1\n \t-rm -f stage1/libgcc.a\n \t-cp libgcc.a stage1\n \t-if $(RANLIB_TEST) ; then $(RANLIB) stage1/libgcc.a; else true; fi\n+stage1: force stage1-start lang.stage1\n \n-stage2: force\n+stage2-start:\n \t-if [ -d stage2 ] ; then true ; else mkdir stage2 ; fi\n+\t-for dir in . $(SUBDIRS) ; \\\n+\t do \\\n+\t   if [ -d stage2/$$dir ] ; then true ; else mkdir stage2/$$dir ; fi \\\n+\t done\n \t-mv $(STAGESTUFF) stage2\n \t-rm -f stage2/libgcc.a\n \t-cp libgcc.a stage2\n \t-if $(RANLIB_TEST) ; then $(RANLIB) stage2/libgcc.a; else true; fi\n+stage2: force stage2-start lang.stage2\n \n-stage3: force\n+stage3-start:\n \t-if [ -d stage3 ] ; then true ; else mkdir stage3 ; fi\n+\t-for dir in . $(SUBDIRS) ; \\\n+\t do \\\n+\t   if [ -d stage3/$$dir ] ; then true ; else mkdir stage3/$$dir ; fi \\\n+\t done\n \t-mv $(STAGESTUFF) stage3\n \t-rm -f stage3/libgcc.a\n \t-cp libgcc.a stage3\n \t-if $(RANLIB_TEST) ; then $(RANLIB) stage3/libgcc.a; else true; fi\n+stage3: force stage3-start lang.stage3\n \n-stage4: force\n+stage4-start:\n \t-if [ -d stage4 ] ; then true ; else mkdir stage4 ; fi\n+\t-for dir in . $(SUBDIRS) ; \\\n+\t do \\\n+\t   if [ -d stage4/$$dir ] ; then true ; else mkdir stage4/$$dir ; fi \\\n+\t done\n \t-mv $(STAGESTUFF) stage4\n \t-rm -f stage4/libgcc.a\n \t-cp libgcc.a stage4\n \t-if $(RANLIB_TEST) ; then $(RANLIB) stage4/libgcc.a; else true; fi\n+stage4: force stage4-start lang.stage4\n \n # Copy just the executable files from a particular stage into a subdirectory,\n # and delete the object files.  Use this if you're just verifying a version"}]}