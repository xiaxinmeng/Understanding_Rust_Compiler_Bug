{"sha": "5aa411c537289f5695b63de12b973415b2d830d6", "node_id": "C_kwDOANBUbNoAKDVhYTQxMWM1MzcyODlmNTY5NWI2M2RlMTJiOTczNDE1YjJkODMwZDY", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-05-10T18:52:44Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-05-11T16:29:55Z"}, "message": "Allow match on primitive types\n\nThis patch enables compiling match expressions for other primitive\ntypes, like int and char. However, we cannot currently compile matches\non floats; CASE_LABEL_EXPR doesn't support floating-point types.", "tree": {"sha": "66278e6fc22996db0395061b10308d91329c1edf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66278e6fc22996db0395061b10308d91329c1edf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5aa411c537289f5695b63de12b973415b2d830d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aa411c537289f5695b63de12b973415b2d830d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aa411c537289f5695b63de12b973415b2d830d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aa411c537289f5695b63de12b973415b2d830d6/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "502c8a859750064103bb71f4d559cef7b1c1b8af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/502c8a859750064103bb71f4d559cef7b1c1b8af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/502c8a859750064103bb71f4d559cef7b1c1b8af"}], "stats": {"total": 217, "additions": 214, "deletions": 3}, "files": [{"sha": "0fd1e3a134140b2bd4784100e569443381dd1e89", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aa411c537289f5695b63de12b973415b2d830d6/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aa411c537289f5695b63de12b973415b2d830d6/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=5aa411c537289f5695b63de12b973415b2d830d6", "patch": "@@ -212,7 +212,8 @@ CompileExpr::visit (HIR::MatchExpr &expr)\n     }\n \n   TyTy::TypeKind scrutinee_kind = scrutinee_expr_tyty->get_kind ();\n-  rust_assert (scrutinee_kind == TyTy::TypeKind::BOOL\n+  rust_assert ((TyTy::is_primitive_type_kind (scrutinee_kind)\n+\t\t&& scrutinee_kind != TyTy::TypeKind::NEVER)\n \t       || scrutinee_kind == TyTy::TypeKind::ADT);\n \n   if (scrutinee_kind == TyTy::TypeKind::ADT)\n@@ -223,6 +224,13 @@ CompileExpr::visit (HIR::MatchExpr &expr)\n       rust_assert (adt->is_enum ());\n       rust_assert (adt->number_of_variants () > 0);\n     }\n+  else if (scrutinee_kind == TyTy::TypeKind::FLOAT)\n+    {\n+      // FIXME: CASE_LABEL_EXPR does not support floating point types.\n+      // Find another way to compile these.\n+      sorry_at (expr.get_locus ().gcc_location (),\n+\t\t\"match on floating-point types is not yet supported\");\n+    }\n \n   TyTy::BaseType *expr_tyty = nullptr;\n   if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n@@ -253,7 +261,7 @@ CompileExpr::visit (HIR::MatchExpr &expr)\n     = CompileExpr::Compile (expr.get_scrutinee_expr ().get (), ctx);\n \n   tree match_scrutinee_expr_qualifier_expr;\n-  if (scrutinee_kind == TyTy::TypeKind::BOOL)\n+  if (TyTy::is_primitive_type_kind (scrutinee_kind))\n     {\n       match_scrutinee_expr_qualifier_expr = match_scrutinee_expr;\n     }\n@@ -274,7 +282,7 @@ CompileExpr::visit (HIR::MatchExpr &expr)\n   else\n     {\n       // FIXME: match on other types of expressions not yet implemented.\n-      gcc_assert (0);\n+      gcc_unreachable ();\n     }\n \n   // setup the end label so the cases can exit properly"}, {"sha": "9c1a35a5b91c0a211b6ce9111e92f98b9857f6e1", "filename": "gcc/rust/backend/rust-compile-pattern.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aa411c537289f5695b63de12b973415b2d830d6/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aa411c537289f5695b63de12b973415b2d830d6/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc?ref=5aa411c537289f5695b63de12b973415b2d830d6", "patch": "@@ -89,6 +89,17 @@ CompilePatternCaseLabelExpr::visit (HIR::LiteralPattern &pattern)\n \t\t\t    pattern.get_literal (), pattern.get_locus (),\n \t\t\t    std::vector<AST::Attribute> ());\n \n+  // Note: Floating point literals are currently accepted but will likely be\n+  // forbidden in LiteralPatterns in a future version of Rust.\n+  // See: https://github.com/rust-lang/rust/issues/41620\n+  // For now, we cannot compile them anyway as CASE_LABEL_EXPR does not support\n+  // floating point types.\n+  if (pattern.get_literal ().get_lit_type () == HIR::Literal::LitType::FLOAT)\n+    {\n+      sorry_at (pattern.get_locus ().gcc_location (),\n+\t\t\"floating-point literal in pattern\");\n+    }\n+\n   tree lit = CompileExpr::Compile (litexpr, ctx);\n \n   case_label_expr = build_case_label (lit, NULL_TREE, associated_case_label);"}, {"sha": "3d09a33a77ec74e44937f0223c8b125b44ec7223", "filename": "gcc/testsuite/rust/execute/torture/match_byte1.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aa411c537289f5695b63de12b973415b2d830d6/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_byte1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aa411c537289f5695b63de12b973415b2d830d6/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_byte1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_byte1.rs?ref=5aa411c537289f5695b63de12b973415b2d830d6", "patch": "@@ -0,0 +1,49 @@\n+// { dg-output \"a\\nseven\\nquote\\nelse\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn foo (x: u8) {\n+    match x {\n+        b'a' => {\n+            let a = \"a\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+\n+        b'\\x07' => {\n+            let a = \"seven\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+\n+        b'\\'' => {\n+            let a = \"quote\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+\n+        _ => {\n+            let a = \"else\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+    }\n+}\n+\n+fn main () -> i32 {\n+\n+    let x: u8 = 7;\n+\n+    foo (b'a');\n+    foo (x);\n+    foo (b'\\'');\n+    foo (b'\\\\');\n+\n+    0\n+}"}, {"sha": "e9da8ffbddc529094209d403b478f2a0209d477d", "filename": "gcc/testsuite/rust/execute/torture/match_char1.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aa411c537289f5695b63de12b973415b2d830d6/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_char1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aa411c537289f5695b63de12b973415b2d830d6/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_char1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_char1.rs?ref=5aa411c537289f5695b63de12b973415b2d830d6", "patch": "@@ -0,0 +1,49 @@\n+// { dg-output \"amazing\\nwildcard\\ncompiler\\nproductivity\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn foo (x: char) {\n+    match x {\n+        'a' => {\n+            let a = \"amazing\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+\n+        'c' => {\n+            let a = \"compiler\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+\n+        'p' => {\n+            let a = \"productivity\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+\n+        _ => {\n+            let a = \"wildcard\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+    }\n+}\n+\n+fn main () -> i32 {\n+\n+    let p = 'p';\n+\n+    foo ('a');\n+    foo ('b');\n+    foo ('c');\n+    foo (p);\n+\n+    0\n+}"}, {"sha": "b1373bf849824e36b7e2d4f904e56e10efa14b58", "filename": "gcc/testsuite/rust/execute/torture/match_int1.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aa411c537289f5695b63de12b973415b2d830d6/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_int1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aa411c537289f5695b63de12b973415b2d830d6/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_int1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_int1.rs?ref=5aa411c537289f5695b63de12b973415b2d830d6", "patch": "@@ -0,0 +1,94 @@\n+// { dg-output \"other!\\nother!\\nother!\\nfifteen!\\nfifteen!\\nother!\\nother!\\nfifteen!\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn foo_i32 (x: i32) {\n+    match x {\n+        15 => {\n+            let a = \"fifteen!\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+\n+        _ => {\n+            let a = \"other!\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+    }\n+}\n+\n+fn foo_isize (x: isize) {\n+    match x {\n+        15 => {\n+            let a = \"fifteen!\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+\n+        _ => {\n+            let a = \"other!\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+    }\n+}\n+\n+fn foo_u32 (x: u32) {\n+    match x {\n+        15 => {\n+            let a = \"fifteen!\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+\n+        _ => {\n+            let a = \"other!\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+    }\n+}\n+\n+fn foo_usize (x: usize) {\n+    match x {\n+        15 => {\n+            let a = \"fifteen!\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+\n+        _ => {\n+            let a = \"other!\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+    }\n+}\n+\n+\n+fn main () -> i32 {\n+    let x = -2;\n+    foo_i32 (x);\n+    foo_i32 (334);\n+    foo_isize (-4768);\n+    foo_isize (15);\n+\n+    let y = 127;\n+    foo_u32 (15);\n+    foo_u32 (y);\n+    foo_usize (2394);\n+    foo_usize (15);\n+\n+    0\n+}"}]}