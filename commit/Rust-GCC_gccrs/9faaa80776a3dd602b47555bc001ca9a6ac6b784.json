{"sha": "9faaa80776a3dd602b47555bc001ca9a6ac6b784", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZhYWE4MDc3NmEzZGQ2MDJiNDc1NTViYzAwMWNhOWE2YWM2Yjc4NA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-04T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-04T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "b47d660cfd48bb1336bfe318c7454d064d630b16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b47d660cfd48bb1336bfe318c7454d064d630b16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9faaa80776a3dd602b47555bc001ca9a6ac6b784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9faaa80776a3dd602b47555bc001ca9a6ac6b784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9faaa80776a3dd602b47555bc001ca9a6ac6b784", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9faaa80776a3dd602b47555bc001ca9a6ac6b784/comments", "author": null, "committer": null, "parents": [{"sha": "ac16f4327fef5dfc288409371a61649253353ef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac16f4327fef5dfc288409371a61649253353ef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac16f4327fef5dfc288409371a61649253353ef7"}], "stats": {"total": 513, "additions": 512, "deletions": 1}, "files": [{"sha": "68a2711c01f5daf3696d126a14b86a11dbf428e5", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faaa80776a3dd602b47555bc001ca9a6ac6b784/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faaa80776a3dd602b47555bc001ca9a6ac6b784/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=9faaa80776a3dd602b47555bc001ca9a6ac6b784", "patch": "@@ -1,3 +1,8 @@\n+2021-02-03  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* gcc_update (files_and_dependencies): Add dependency for\n+\tgcc/config/rs6000/fusion.md on gcc/config/rs6000/genfusion.md.\n+\n 2021-01-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR lto/85574"}, {"sha": "388681f7ea7ce7add8bac67a128e17eacec62489", "filename": "gcc/ChangeLog", "status": "modified", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faaa80776a3dd602b47555bc001ca9a6ac6b784/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faaa80776a3dd602b47555bc001ca9a6ac6b784/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9faaa80776a3dd602b47555bc001ca9a6ac6b784", "patch": "@@ -1,3 +1,160 @@\n+2021-02-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/98937\n+\t* tree-ssa-strlen.c (strlen_dom_walker::~strlen_dom_walker): Define.\n+\tFlush pointer_query cache.\n+\n+2021-02-03  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* config/rs6000/genfusion.pl (gen_2logical): Add missing\n+\tfixes based on patch review.\n+\t* config/rs6000/fusion.md: Regenerate file.\n+\n+2021-02-03  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* config/rs6000/t-rs6000: Comment out auto generation of\n+\tfusion.md for now.\n+\n+2021-02-03  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-opts.h (enum processor_type): Add PROCESSOR_GFX908.\n+\t* config/gcn/gcn.c (gcn_omp_device_kind_arch_isa): Add gfx908.\n+\t(output_file_start): Add gfx908.\n+\t* config/gcn/gcn.opt (gpu_type): Add gfx908.\n+\t* config/gcn/t-gcn-hsa (MULTILIB_OPTIONS): Add march=gfx908.\n+\t(MULTILIB_DIRNAMES): Add gfx908.\n+\t* config/gcn/mkoffload.c (EF_AMDGPU_MACH_AMDGCN_GFX908): New define.\n+\t(main): Recognize gfx908.\n+\t* config/gcn/t-omp-device: Add gfx908.\n+\n+2021-02-03  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add\n+\t[su]mlsl_hi_lane[q] builtin macro generators.\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_<su>mlsl_hi_lane<mode>_insn): Define.\n+\t(aarch64_<su>mlsl_hi_lane<mode>): Define.\n+\t(aarch64_<su>mlsl_hi_laneq<mode>_insn): Define.\n+\t(aarch64_<su>mlsl_hi_laneq<mode>): Define.\n+\t* config/aarch64/arm_neon.h (vmlsl_high_lane_s16): Use RTL\n+\tbuiltin instead of inline asm.\n+\t(vmlsl_high_lane_s32): Likewise.\n+\t(vmlsl_high_lane_u16): Likewise.\n+\t(vmlsl_high_lane_u32): Likewise.\n+\t(vmlsl_high_laneq_s16): Likewise.\n+\t(vmlsl_high_laneq_s32): Likewise.\n+\t(vmlsl_high_laneq_u16): Likewise.\n+\t(vmlsl_high_laneq_u32): Likewise.\n+\t(vmlal_high_laneq_u32): Likewise.\n+\n+2021-02-03  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add\n+\t[su]mlal_hi_lane[q] builtin generator macros.\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_<su>mlal_hi_lane<mode>_insn): Define.\n+\t(aarch64_<su>mlal_hi_lane<mode>): Define.\n+\t(aarch64_<su>mlal_hi_laneq<mode>_insn): Define.\n+\t(aarch64_<su>mlal_hi_laneq<mode>): Define.\n+\t* config/aarch64/arm_neon.h (vmlal_high_lane_s16): Use RTL\n+\tbuiltin instead of inline asm.\n+\t(vmlal_high_lane_s32): Likewise.\n+\t(vmlal_high_lane_u16): Likewise.\n+\t(vmlal_high_lane_u32): Likewise.\n+\t(vmlal_high_laneq_s16): Likewise.\n+\t(vmlal_high_laneq_s32): Likewise.\n+\t(vmlal_high_laneq_u16): Likewise.\n+\t(vmlal_high_laneq_u32): Likewise.\n+\n+2021-02-03  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add [su]mlsl_hi_n\n+\tbuiltin generator macros.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<su>mlsl_hi_n<mode>_insn):\n+\tDefine.\n+\t(aarch64_<su>mlsl_hi_n<mode>): Define.\n+\t* config/aarch64/arm_neon.h (vmlsl_high_n_s16): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vmlsl_high_n_s32): Likewise.\n+\t(vmlsl_high_n_u16): Likewise.\n+\t(vmlsl_high_n_u32): Likewise.\n+\n+2021-02-03  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add [su]mlal_hi_n\n+\tbuiltin generator macros.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<su>mlal_hi_n<mode>_insn):\n+\tDefine.\n+\t(aarch64_<su>mlal_hi_n<mode>): Define.\n+\t* config/aarch64/arm_neon.h (vmlal_high_n_s16): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vmlal_high_n_s32): Likewise.\n+\t(vmlal_high_n_u16): Likewise.\n+\t(vmlal_high_n_u32): Likewise.\n+\n+2021-02-03  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add RTL builtin\n+\tgenerator macros.\n+\t* config/aarch64/aarch64-simd.md (*aarch64_<su>mlal_hi<mode>):\n+\tRename to...\n+\t(aarch64_<su>mlal_hi<mode>_insn): This.\n+\t(aarch64_<su>mlal_hi<mode>): Define.\n+\t* config/aarch64/arm_neon.h (vmlal_high_s8): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vmlal_high_s16): Likewise.\n+\t(vmlal_high_s32): Likewise.\n+\t(vmlal_high_u8): Likewise.\n+\t(vmlal_high_u16): Likewise.\n+\t(vmlal_high_u32): Likewise.\n+\n+2021-02-03  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* lra-spills.c (remove_pseudos): Call lra_update_insn_recog_data()\n+\tafter calling alter_subreg() on a (mem).\n+\n+2021-02-03  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/98912\n+\t* lto-streamer-out.c (produce_lto_section): Fill up missing\n+\tpadding.\n+\t* lto-streamer.h (struct lto_section): Add _padding field.\n+\n+2021-02-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* lto-streamer.c (lto_get_section_name): Free temporary\n+\tbuffer.\n+\t* tree-loop-distribution.c\n+\t(loop_distribution::merge_dep_scc_partitions): Free edge data.\n+\n+2021-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/97487\n+\t* ifcvt.c (noce_can_force_operand): New function.\n+\t(noce_emit_move_insn): Use it.\n+\t(noce_try_sign_mask): Likewise.  Formatting fix.\n+\n+2021-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/97971\n+\t* lra-constraints.c (process_alt_operands): For inline asm, don't call\n+\tfatal_insn, but instead return false.\n+\n+2021-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/98287\n+\t* config/i386/mmx.md (<insn><mode>3): For shifts don't enable expander\n+\tfor V1DImode.\n+\n+2021-02-03  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/98928\n+\t* tree-vect-loop.c (vect_analyze_loop_2): Change\n+\tSTMT_VINFO_SLP_VECT_ONLY to STMT_VINFO_SLP_VECT_ONLY_PATTERN.\n+\t* tree-vect-slp-patterns.c (complex_pattern::build): Likewise.\n+\t* tree-vectorizer.h (STMT_VINFO_SLP_VECT_ONLY_PATTERN): New.\n+\t(class _stmt_vec_info): Add slp_vect_pattern_only_p.\n+\n 2021-02-02  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-loop-interchange.cc (prepare_data_references):"}, {"sha": "8aed06e4d0cdaf898fa64a486ce171074197730b", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faaa80776a3dd602b47555bc001ca9a6ac6b784/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faaa80776a3dd602b47555bc001ca9a6ac6b784/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9faaa80776a3dd602b47555bc001ca9a6ac6b784", "patch": "@@ -1 +1 @@\n-20210203\n+20210204"}, {"sha": "43973550502fba758ac6ac479b942aeabf6e15d8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faaa80776a3dd602b47555bc001ca9a6ac6b784/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faaa80776a3dd602b47555bc001ca9a6ac6b784/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9faaa80776a3dd602b47555bc001ca9a6ac6b784", "patch": "@@ -1,3 +1,21 @@\n+2021-02-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (components_to_record): If the first component\n+\twith rep clause is the _Parent field with variable size, temporarily\n+\tset it aside when computing the internal layout of the REP part again.\n+\t* gcc-interface/utils.c (finish_record_type): Revert to taking the\n+\tmaximum when merging sizes for all record types with rep clause.\n+\t(merge_sizes): Put SPECIAL parameter last and adjust recursive calls.\n+\n+2021-02-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Make the\n+\ttwo fields of the fat pointer type addressable, and do not make the\n+\ttemplate type read-only.\n+\t<E_Record_Type>: If the type has discriminants mark it as may_alias.\n+\t* gcc-interface/utils.c (make_dummy_type): Likewise.\n+\t(build_dummy_unc_pointer_types): Likewise.\n+\n 2021-01-26  Marius Hillenbrand  <mhillen@linux.ibm.com>\n \n \tPR ada/98228"}, {"sha": "0369b70e7f2175ad3ec2e0380ce7f354672664db", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faaa80776a3dd602b47555bc001ca9a6ac6b784/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faaa80776a3dd602b47555bc001ca9a6ac6b784/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9faaa80776a3dd602b47555bc001ca9a6ac6b784", "patch": "@@ -1,3 +1,8 @@\n+2021-02-03  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Define __cpp_size_t_suffix.\n+\t* c-lex.c (interpret_integer): Set node type for size literal.\n+\n 2021-01-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c.opt (-std=c++2a, -std=c++20, -std=gnu++2a, -std=gnu++20): Remove"}, {"sha": "2804cd14299e5cdda532cab0af4e40cbe8845f31", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faaa80776a3dd602b47555bc001ca9a6ac6b784/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faaa80776a3dd602b47555bc001ca9a6ac6b784/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9faaa80776a3dd602b47555bc001ca9a6ac6b784", "patch": "@@ -1,3 +1,29 @@\n+2021-02-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98951\n+\t* call.c (struct z_candidate): Mark rewritten and reversed as const.\n+\t(struct NonPublicField): Mark operator() as const.\n+\t(struct NonTrivialField): Likewise.\n+\n+2021-02-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98926\n+\tPR c++/98570\n+\t* pt.c (spec_hasher::equal): Set processing_template_decl.\n+\t* Make-lang.in (check-g++-strict-gc): Add --param\n+\thash-table-verification-limit=10000.\n+\n+2021-02-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98899\n+\t* parser.c (cp_parser_class_specifier_1): Use any possible\n+\tDEFPARSE_INSTANTIATIONS to update DEFERRED_NOEXCEPT_PATTERN.\n+\t(cp_parser_save_noexcept): Initialize DEFPARSE_INSTANTIATIONS.\n+\t* pt.c (tsubst_exception_specification): Stash new_specs into\n+\tDEFPARSE_INSTANTIATIONS.\n+\t* tree.c (fixup_deferred_exception_variants): Use\n+\tUNPARSED_NOEXCEPT_SPEC_P.\n+\n 2021-02-02  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/98929"}, {"sha": "9f75bb712aa7f3543d3823f7f1df9cbb9705c8a0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faaa80776a3dd602b47555bc001ca9a6ac6b784/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faaa80776a3dd602b47555bc001ca9a6ac6b784/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9faaa80776a3dd602b47555bc001ca9a6ac6b784", "patch": "@@ -1,3 +1,13 @@\n+2021-02-03  Jeff Law  <law@redhat.com>\n+\n+\t* intrinsic.texi (ANINT): Fix typo.\n+\n+2021-02-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/98913\n+\t* dependency.c (gfc_dep_resolver): Treat local access\n+\tto coarrays like any array access in dependency analysis.\n+\n 2021-01-28  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/86470"}, {"sha": "4163d76c3b1f79fb629fe58709519cc524346552", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faaa80776a3dd602b47555bc001ca9a6ac6b784/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faaa80776a3dd602b47555bc001ca9a6ac6b784/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9faaa80776a3dd602b47555bc001ca9a6ac6b784", "patch": "@@ -1,3 +1,56 @@\n+2021-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/98882\n+\t* gcc.dg/cpp/pr98882.c: New test.\n+\n+2021-02-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/alias-decl-dr1558.C: Pass --param\n+\thash-table-verification-limit=10000.\n+\n+2021-02-03  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* g++.dg/cpp0x/udlit-shadow-neg.C: Test for 'z' and 'zu' shadowing.\n+\t* g++.dg/cpp23/feat-cxx2b.C: New test.\n+\t* g++.dg/cpp23/size_t-literals.C: New test.\n+\t* g++.dg/warn/Wsize_t-literals.C: New test.\n+\n+2021-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97804\n+\t* g++.dg/cpp2a/no_unique_address11.C: New test.\n+\n+2021-02-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98899\n+\t* g++.dg/cpp0x/noexcept65.C: New test.\n+\n+2021-02-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/98913\n+\t* gfortran.dg/coarray/array_temporary.f90: New test.\n+\n+2021-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/97487\n+\t* gcc.dg/pr97487-1.c: New test.\n+\t* gcc.dg/pr97487-2.c: New test.\n+\n+2021-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/97971\n+\t* gcc.target/i386/pr97971.c: New test.\n+\n+2021-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/98287\n+\t* gcc.dg/pr98287.c: New test.\n+\n+2021-02-03  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/98928\n+\t* gcc.target/i386/pr98928.c: New test.\n+\n 2021-02-02  Martin Liska  <mliska@suse.cz>\n \n \tPR target/97510"}, {"sha": "36f9aa23fa83f0746a267b216c6e0840cfb5f34d", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faaa80776a3dd602b47555bc001ca9a6ac6b784/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faaa80776a3dd602b47555bc001ca9a6ac6b784/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=9faaa80776a3dd602b47555bc001ca9a6ac6b784", "patch": "@@ -1,3 +1,21 @@\n+2021-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/98882\n+\t* lex.c (cpp_directive_only_process): Don't assert that rlimit[-1]\n+\tis a newline, instead assert that rlimit[0] is either newline or\n+\tcarriage return.  When seeing '\\\\' followed by '\\r', check limit\n+\tbefore accessing pos[1].\n+\n+2021-02-03  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* expr.c (interpret_int_suffix): Detect 'z' integer suffix.\n+\t(cpp_classify_number): Compat warning for use of 'z' suffix.\n+\t* include/cpplib.h (struct cpp_options): New flag.\n+\t(enum cpp_warning_reason): New flag.\n+\t(CPP_N_USERDEF): Comment C++0x -> C++11.\n+\t(CPP_N_SIZE_T): New flag for cpp_classify_number.\n+\t* init.c (cpp_set_lang): Initialize new flag.\n+\n 2021-01-27  liuhongt  <hongtao.liu@intel.com>\n \n \tPR target/98833"}, {"sha": "ba725b764d790fb7bae8380266c503cd3c1b7f74", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faaa80776a3dd602b47555bc001ca9a6ac6b784/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faaa80776a3dd602b47555bc001ca9a6ac6b784/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=9faaa80776a3dd602b47555bc001ca9a6ac6b784", "patch": "@@ -1,3 +1,11 @@\n+2021-02-03  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* plugin/plugin-gcn.c (EF_AMDGPU_MACH): Add\n+\tEF_AMDGPU_MACH_AMDGCN_GFX908.\n+\t(gcn_gfx908_s): New constant string.\n+\t(isa_hsa_name): Add gfx908.\n+\t(isa_code): Add gfx908.\n+\n 2021-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* libgomp.texi (omp_fulfill_event): New entry."}, {"sha": "b8d1d8d4384689c67f8619a4c768c3c439f8bbab", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faaa80776a3dd602b47555bc001ca9a6ac6b784/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faaa80776a3dd602b47555bc001ca9a6ac6b784/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=9faaa80776a3dd602b47555bc001ca9a6ac6b784", "patch": "@@ -1,3 +1,25 @@\n+2021-02-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/98910\n+\t* libdruntime/MERGE: Merge upstream druntime 9d0c8364.\n+\t* libdruntime/Makefile.am (DRUNTIME_DSOURCES): Add\n+\t  core/internal/attributes.d\n+\t(DRUNTIME_DSOURCES_BIONIC): Add core/sys/bionic/stdlib.d.\n+\t(DRUNTIME_DSOURCES_DARWIN): Add core/sys/darwin/stdlib.d, and\n+\tcore/sys/darwin/sys/sysctl.d.\n+\t(DRUNTIME_DSOURCES_DRAGONFLYBSD): Add\n+\tcore/sys/dragonflybsd/stdlib.d, and\n+\tcore/sys/dragonflybsd/sys/sysctl.d.\n+\t(DRUNTIME_DSOURCES_FREEBSD): Add core/sys/freebsd/stdlib.d, and\n+\tcore/sys/freebsd/sys/sysctl.d.\n+\t(DRUNTIME_DSOURCES_NETBSD): Add core/sys/netbsd/stdlib.d, and\n+\tcore/sys/netbsd/sys/sysctl.d.\n+\t(DRUNTIME_DSOURCES_OPENBSD): Add core/sys/openbsd/stdlib.d, and\n+\tcore/sys/openbsd/sys/sysctl.d.\n+\t(DRUNTIME_DSOURCES_SOLARIS): Add core/sys/solaris/stdlib.d.\n+\t* libdruntime/Makefile.in: Regenerate.\n+\t* src/MERGE: Merge upstream phobos 9d575282e.\n+\n 2021-01-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* Makefile.in: Regenerate."}, {"sha": "85e0a0fa2debb43879fd605d715eb2fcd59c9eb6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 189, "deletions": 0, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faaa80776a3dd602b47555bc001ca9a6ac6b784/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faaa80776a3dd602b47555bc001ca9a6ac6b784/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9faaa80776a3dd602b47555bc001ca9a6ac6b784", "patch": "@@ -1,3 +1,192 @@\n+2021-02-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/19_diagnostics/error_code/operators/not_equal.cc:\n+\tAdd comparison with same category and different values.\n+\t* testsuite/19_diagnostics/error_code/operators/less.cc:\n+\tLikewise. Fix comparison involving different categories.\n+\t* testsuite/19_diagnostics/error_code/operators/three_way.cc:\n+\tLikewise.\n+\t* testsuite/19_diagnostics/error_condition/operators/less.cc:\n+\tAdd comment.\n+\t* testsuite/19_diagnostics/error_condition/operators/three_way.cc:\n+\tLikewise.\n+\n+2021-02-03  yaozhongxiao  <yaozhongxiao@linux.alibaba.com>\n+\n+\t* include/experimental/bits/simd_neon.h: Replace repeated vpadd\n+\tcalls with a single vaddv for aarch64.\n+\n+2021-02-03  Matthias Kretz  <kretz@kde.org>\n+\n+\t* testsuite/Makefile.am: Warn about the workaround. Add\n+\t-fno-tree-vrp to CXXFLAGS passed to the check_simd script.\n+\tImprove initial user feedback from make check-simd.\n+\t* testsuite/Makefile.in: Regenerated.\n+\n+2021-02-03  Matthias Kretz  <kretz@kde.org>\n+\n+\t* include/experimental/bits/simd.h: Add __detail::_Minimum and\n+\t__detail::_Maximum to use them as _BinaryOperation to _S_reduce.\n+\tAdd hmin and hmax overloads for simd and const_where_expression.\n+\t* include/experimental/bits/simd_scalar.h\n+\t(_SimdImplScalar::_S_reduce): Make unused _BinaryOperation\n+\tparameter const-ref to allow calling _S_reduce with an rvalue.\n+\t* testsuite/experimental/simd/tests/reductions.cc: Add tests for\n+\thmin and hmax. Since the compiler statically determined that all\n+\ttests pass, repeat the test after a call to make_value_unknown.\n+\n+2021-02-03  Matthias Kretz  <kretz@kde.org>\n+\n+\t* testsuite/experimental/simd/tests/bits/verify.h (verify): Add\n+\tinstruction pointer data member. Ensure that the `if (m_failed)`\n+\tbranch is always inlined into the calling code. The body of the\n+\tconditional can still be a function call. Move the get_ip call\n+\tinto the verify ctor to simplify the ctor calls.\n+\t(COMPARE): Don't mention the use of all_of for reduction of a\n+\tsimd_mask. It only distracts from the real issue.\n+\n+2021-02-03  Matthias Kretz  <kretz@kde.org>\n+\n+\t* testsuite/experimental/simd/driver.sh: Abstract reading test\n+\toptions into read_src_option function. Read skip, only,\n+\texpensive, and xfail via read_src_option. Add timeout and\n+\ttimeout-factor options and adjust timeout variable accordingly.\n+\t* testsuite/experimental/simd/tests/loadstore.cc: Set\n+\ttimeout-factor 2.\n+\n+2021-02-03  Matthias Kretz  <kretz@kde.org>\n+\n+\t* testsuite/experimental/simd/driver.sh: When handling the pipe\n+\tto log (and on verbose to stdout) count the lines. If it exceeds\n+\t1000 log the issue and exit 125, which is then handled as a\n+\tfailure.\n+\n+2021-02-03  Matthias Kretz  <kretz@kde.org>\n+\n+\t* testsuite/experimental/simd/tests/hypot3_fma.cc: Add skip:\n+\tmarkup for long double on powerpc64*.\n+\n+2021-02-03  Matthias Kretz  <kretz@kde.org>\n+\n+\t* include/experimental/bits/simd.h: Add __have_power10vec\n+\tconditional on _ARCH_PWR10.\n+\t* include/experimental/bits/simd_builtin.h: Forward declare\n+\t_MaskImplPpc and use it as _MaskImpl when __ALTIVEC__ is\n+\tdefined.\n+\t(_MaskImplBuiltin::_S_some_of): Call _S_popcount from the\n+\t_SuperImpl for optimizations and correctness.\n+\t* include/experimental/bits/simd_ppc.h: Add _MaskImplPpc.\n+\t(_MaskImplPpc::_S_popcount): Implement via vec_cntm for POWER10.\n+\tOtherwise, for >=int use -vec_sums divided by a sizeof factor.\n+\tFor <int use -vec_sums(vec_sum4s(...)) to sum all mask entries.\n+\n+2021-02-03  Matthias Kretz  <kretz@kde.org>\n+\n+\t* testsuite/experimental/simd/driver.sh: Remove executable on\n+\tSIGINT. Process compiler and test executable output: In verbose\n+\tmode print messages immediately, limited to 1000 lines and\n+\tbreaking long lines to below $COLUMNS (or 1024 if not set).\n+\tCommunicating the exit status of the compiler / test with the\n+\tnecessary pipe is done via a message through stdout/-in.\n+\n+2021-02-03  Matthias Kretz  <kretz@kde.org>\n+\n+\t* testsuite/Makefile.am: Ensure .simd.summary is empty before\n+\tcollecting a new summary.\n+\t* testsuite/Makefile.in: Regenerate.\n+\n+2021-02-03  Matthias Kretz  <kretz@kde.org>\n+\n+\t* testsuite/experimental/simd/generate_makefile.sh: Use\n+\tdifferent variables internally than documented for user\n+\toverrides. This makes internal append/prepend work as intended.\n+\n+2021-02-03  Matthias Kretz  <kretz@kde.org>\n+\n+\t* testsuite/experimental/simd/driver.sh (verify_test): Print\n+\ttest output on run xfail. Do not repeat lines from the log that\n+\twere already printed on stdout.\n+\t(test_selector): Make the compiler flags pattern usable as a\n+\tsubstring selector.\n+\t(toplevel): Trap on SIGINT and remove the log and sum files.\n+\tCall timout with --foreground to quickly terminate on SIGINT.\n+\t* testsuite/experimental/simd/generate_makefile.sh: Simplify run\n+\ttargets via target patterns. Default DRIVEROPTS to -v for run\n+\ttargets. Remove log and sum files after completion of the run\n+\ttarget (so that it's always recompiled).\n+\tPlace help text into text file for reasonable 'make help'\n+\tperformance.\n+\n+2021-02-03  Matthias Kretz  <kretz@kde.org>\n+\n+\t* include/experimental/bits/simd.h: Remove unnecessary static\n+\tassertion. Allow sizeof(8) integer __intrinsic_type to enable\n+\tthe necessary mask type.\n+\n+2021-02-03  Matthias Kretz  <kretz@kde.org>\n+\n+\t* include/experimental/bits/simd.h: Let __intrinsic_type<long\n+\tdouble, N> be valid if sizeof(long double) == sizeof(double) and\n+\tuse a __vector double as member type.\n+\n+2021-02-03  Matthias Kretz  <kretz@kde.org>\n+\n+\t* include/experimental/bits/simd.h (__is_intrinsic_type): New\n+\tinternal type trait. Alias for __is_vector_type on x86.\n+\t(_VectorTraitsImpl): Enable for __intrinsic_type in addition for\n+\t__vector_type.\n+\t(__intrin_bitcast): Allow casting to & from vector & intrinsic\n+\ttypes.\n+\t(__intrinsic_type): Explicitly specialize for NEON intrinsic\n+\tvector types.\n+\n+2021-02-03  Matthias Kretz  <kretz@kde.org>\n+\n+\t* testsuite/experimental/simd/driver.sh: Implement skip, only,\n+\texpensive, and xfail markers. They can select on type, ABI tag\n+\tsubset number, target-triplet, and compiler flags.\n+\t* testsuite/experimental/simd/generate_makefile.sh: The summary\n+\tnow includes lines for unexpected passes and expected failures.\n+\tIf the skip or only markers are only conditional on the type, do\n+\tnot generate rules for those types.\n+\t* testsuite/experimental/simd/tests/abs.cc: Mark test expensive\n+\tfor ABI tag subsets 1-9.\n+\t* testsuite/experimental/simd/tests/algorithms.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/broadcast.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/casts.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/generator.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/integer_operators.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/loadstore.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/mask_broadcast.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/mask_conversions.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/mask_implicit_cvt.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/mask_loadstore.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/mask_operator_cvt.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/mask_operators.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/mask_reductions.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/operator_cvt.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/operators.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/reductions.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/simd.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/split_concat.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/splits.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/where.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/fpclassify.cc: Ditto. In\n+\taddition replace \"test only floattypes\" marker by unconditional\n+\t\"float|double|ldouble\" only marker.\n+\t* testsuite/experimental/simd/tests/frexp.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/hypot3_fma.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/ldexp_scalbn_scalbln_modf.cc:\n+\tDitto.\n+\t* testsuite/experimental/simd/tests/logarithm.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/math_1arg.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/math_2arg.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/remqo.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/trigonometric.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/trunc_ceil_floor.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/sincos.cc: Ditto. In\n+\taddition, xfail on run because the reference data is missing.\n+\n 2021-02-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2011.xml: Remove stray table cell."}]}