{"sha": "0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY5OGExZDJiZDU2ZmMzYjEyYzFmZTIzNWIyNzAzMGY1ZDhhNTRiZg==", "commit": {"author": {"name": "Toon Moene", "email": "toon@moene.indiv.nluug.nl", "date": "2006-03-21T06:32:57Z"}, "committer": {"name": "Toon Moene", "email": "toon@gcc.gnu.org", "date": "2006-03-21T06:32:57Z"}, "message": "options.c (gfc_init_options): Initialize flag_argument_noalias to 3.\n\n2006-03-21  Toon Moene  <toon@moene.indiv.nluug.nl>\n\n\t* fortran/options.c (gfc_init_options): Initialize\n\tflag_argument_noalias to 3.\n\t* doc/invoke.texi: Document new flag -fargument-noalias-anything.\n\t* tree-ssa-alias.c (may_alias_p): If flag_argument_noalias > 2,\n\targument pointers may not alias any other storage.\n\t* common.opt: Define option -fargument-noalias-anything.\n\t* tree-ssa-structalias.c (intra_create_variable_infos): Fortran\n\talias semantics is specified by flag_argument_noalias > 2.\n\nFrom-SVN: r112243", "tree": {"sha": "b8851b36230f472b3fa762bc25e4577aed644008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8851b36230f472b3fa762bc25e4577aed644008"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf/comments", "author": null, "committer": null, "parents": [{"sha": "e67c25c7381536222d154228d16467320ea1fcf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e67c25c7381536222d154228d16467320ea1fcf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e67c25c7381536222d154228d16467320ea1fcf8"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "d9d4799e83908dc0cf9d24a1d92ccee48402648f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf", "patch": "@@ -1,3 +1,12 @@\n+2006-03-21  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* doc/invoke.texi: Document new flag -fargument-noalias-anything.\n+\t* tree-ssa-alias.c (may_alias_p): If flag_argument_noalias > 2,\n+\targument pointers may not alias any other storage.\n+\t* common.opt: Define option -fargument-noalias-anything.\n+\t* tree-ssa-structalias.c (intra_create_variable_infos): Fortran\n+\talias semantics is specified by flag_argument_noalias > 2.\n+\n 2006-03-20  Jeff Law  <law@redhat.com>\n \n \t* tree-pass.h (pass_phi_only_copy_prop): Delete."}, {"sha": "f6c7fadffc3023c79746b18d9b3820ee15b92f19", "filename": "gcc/common.opt", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf", "patch": "@@ -257,7 +257,9 @@ Common RejectNegative Joined UInteger\n ; 1 if pointer arguments may not alias each other but may alias\n ;   global variables.\n ; 2 if pointer arguments may not alias each other and may not\n-;   alias global variables.  True in Fortran.\n+;   alias global variables.\n+; 3 if pointer arguments may not alias anything.  True in Fortran.\n+;   Set by the front end.\n fargument-alias\n Common Report Var(flag_argument_noalias,0)\n Specify that arguments may alias each other and globals\n@@ -270,6 +272,10 @@ fargument-noalias-global\n Common Report Var(flag_argument_noalias,2) VarExists\n Assume arguments alias neither each other nor globals\n \n+fargument-noalias-anything\n+Common Report Var(flag_argument_noalias,3) VarExists\n+Assume arguments alias no other storage\n+\n fasynchronous-unwind-tables\n Common Report Var(flag_asynchronous_unwind_tables)\n Generate unwind tables that are exact at each instruction boundary"}, {"sha": "a67d6637c497937aad999ae3f3872a84746f3c62", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf", "patch": "@@ -773,8 +773,8 @@ See S/390 and zSeries Options.\n -fverbose-asm  -fpack-struct[=@var{n}]  -fstack-check @gol\n -fstack-limit-register=@var{reg}  -fstack-limit-symbol=@var{sym} @gol\n -fargument-alias  -fargument-noalias @gol\n--fargument-noalias-global  -fleading-underscore @gol\n--ftls-model=@var{model} @gol\n+-fargument-noalias-global  -fargument-noalias-anything\n+-fleading-underscore  -ftls-model=@var{model} @gol\n -ftrapv  -fwrapv  -fbounds-check @gol\n -fvisibility  -fopenmp}\n @end table\n@@ -13332,9 +13332,11 @@ of 128KB@.  Note that this may only work with the GNU linker.\n @item -fargument-alias\n @itemx -fargument-noalias\n @itemx -fargument-noalias-global\n+@itemx -fargument-noalias-anything\n @opindex fargument-alias\n @opindex fargument-noalias\n @opindex fargument-noalias-global\n+@opindex fargument-noalias-anything\n Specify the possible relationships among parameters and between\n parameters and global data.\n \n@@ -13344,6 +13346,8 @@ alias each other and may alias global storage.@*\n each other, but may alias global storage.@*\n @option{-fargument-noalias-global} specifies that arguments do not\n alias each other and do not alias global storage.\n+@option{-fargument-noalias-anything} specifies that arguments do not\n+alias any other storage.\n \n Each language will automatically use whatever option is required by\n the language standard.  You should not need to use these options yourself."}, {"sha": "3cae704abefff21438fa6c9db4fa5d22dd4117f5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf", "patch": "@@ -1,3 +1,8 @@\n+2006-03-21  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* options.c (gfc_init_options): Initialize\n+\tflag_argument_noalias to 3.\n+\n 2006-03-20  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR fortran/20935"}, {"sha": "438bc48ad55777938ebaf6367ab4cef382949bf8", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf", "patch": "@@ -85,7 +85,10 @@ gfc_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n \n   gfc_option.fpe = 0;\n \n-  flag_argument_noalias = 2;\n+  /* Argument pointers cannot point to anything\n+     but their argument.  */\n+  flag_argument_noalias = 3;\n+\n   flag_errno_math = 0;\n \n   gfc_option.allow_std = GFC_STD_F95_OBS | GFC_STD_F95_DEL"}, {"sha": "7b702f00765daf6de879d0b02f17b70fb6edd908", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf", "patch": "@@ -1804,8 +1804,17 @@ may_alias_p (tree ptr, HOST_WIDE_INT mem_alias_set,\n       alias_stats.simple_resolved++;\n       return false;\n     }\n-  \n-  /* If -fargument-noalias-global is >1, pointer arguments may\n+\n+  /* If -fargument-noalias-global is > 2, pointer arguments may\n+     not point to anything else.  */\n+  if (flag_argument_noalias > 2 && TREE_CODE (ptr) == PARM_DECL)\n+    {\n+      alias_stats.alias_noalias++;\n+      alias_stats.simple_resolved++;\n+      return false;\n+    }\n+\n+  /* If -fargument-noalias-global is > 1, pointer arguments may\n      not point to global variables.  */\n   if (flag_argument_noalias > 1 && is_global_var (var)\n       && TREE_CODE (ptr) == PARM_DECL)"}, {"sha": "990398c18030038c61debd92a118ff2a6ff3d462", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=0698a1d2bd56fc3b12c1fe235b27030f5d8a54bf", "patch": "@@ -4041,7 +4041,7 @@ intra_create_variable_infos (void)\n   tree t;\n \n   /* For each incoming argument arg, ARG = &ANYTHING or a dummy variable if\n-     flag_argument_noalias > 1. */\n+     flag_argument_noalias > 2. */\n   for (t = DECL_ARGUMENTS (current_function_decl); t; t = TREE_CHAIN (t))\n     {\n       struct constraint_expr lhs;\n@@ -4051,11 +4051,11 @@ intra_create_variable_infos (void)\n       lhs.type = SCALAR;\n       lhs.var  = create_variable_info_for (t, alias_get_name (t));\n \n-      /* With flag_argument_noalias greater than one means that the incoming\n+      /* With flag_argument_noalias greater than two means that the incoming\n          argument cannot alias anything except for itself so create a HEAP\n          variable.  */\n       if (POINTER_TYPE_P (TREE_TYPE (t))\n-\t  && flag_argument_noalias > 1)\n+\t  && flag_argument_noalias > 2)\n \t{\n \t  varinfo_t vi;\n \t  struct constraint_expr rhs;"}]}