{"sha": "4ca9939b79bee5da542bf534cf4b51132360f496", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNhOTkzOWI3OWJlZTVkYTU0MmJmNTM0Y2Y0YjUxMTMyMzYwZjQ5Ng==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-05-15T16:20:18Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-05-15T16:20:18Z"}, "message": "re PR fortran/18918 (Eventually support Fortran 2008's coarrays [co-arrays])\n\n2011-05-15  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        actual argument is not an array; rank mismatch is diagnosted later.\n        * trans-decl.c (gfc_get_symbol_decl, gfc_trans_deferred_vars):\n        * Handle\n        scalar coarrays.\n        * trans-types.c (gfc_get_array_type_bounds): Ditto.\n\n2011-05-15  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * gfortran.dg/coarray/image_index_2.f90: New.\n\nFrom-SVN: r173772", "tree": {"sha": "21cefbeb280a023f07695694e5881ebc038308be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21cefbeb280a023f07695694e5881ebc038308be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ca9939b79bee5da542bf534cf4b51132360f496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca9939b79bee5da542bf534cf4b51132360f496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ca9939b79bee5da542bf534cf4b51132360f496", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca9939b79bee5da542bf534cf4b51132360f496/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29eabd788fd921611c5800e2d173f097bdabd117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29eabd788fd921611c5800e2d173f097bdabd117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29eabd788fd921611c5800e2d173f097bdabd117"}], "stats": {"total": 107, "additions": 102, "deletions": 5}, "files": [{"sha": "0300b1d4aac6ecf98fa094a2193450766613e075", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca9939b79bee5da542bf534cf4b51132360f496/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca9939b79bee5da542bf534cf4b51132360f496/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4ca9939b79bee5da542bf534cf4b51132360f496", "patch": "@@ -1,3 +1,11 @@\n+2011-05-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\tactual argument is not an array; rank mismatch is diagnosted later.\n+\t* trans-decl.c (gfc_get_symbol_decl, gfc_trans_deferred_vars): Handle\n+\tscalar coarrays.\n+\t* trans-types.c (gfc_get_array_type_bounds): Ditto.\n+\n 2011-05-15  Joern Rennecke  <amylaar@spamcop.net>\n \n \tPR middle-end/46500"}, {"sha": "d77148400f9c0a7fd1c5fb7b596bb658b57e432f", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca9939b79bee5da542bf534cf4b51132360f496/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca9939b79bee5da542bf534cf4b51132360f496/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=4ca9939b79bee5da542bf534cf4b51132360f496", "patch": "@@ -1228,7 +1228,8 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \t}\n \n       /* Use a copy of the descriptor for dummy arrays.  */\n-      if (sym->attr.dimension && !TREE_USED (sym->backend_decl))\n+      if ((sym->attr.dimension || sym->attr.codimension)\n+         && !TREE_USED (sym->backend_decl))\n         {\n \t  decl = gfc_build_dummy_array_decl (sym, sym->backend_decl);\n \t  /* Prevent the dummy from being detected as unused if it is copied.  */\n@@ -1316,7 +1317,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \tDECL_IGNORED_P (decl) = 1;\n     }\n \n-  if (sym->attr.dimension)\n+  if (sym->attr.dimension || sym->attr.codimension)\n     {\n       /* Create variables to hold the non-constant bits of array info.  */\n       gfc_build_qualified_array (decl, sym);\n@@ -3435,7 +3436,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n       if (sym->assoc)\n \tcontinue;\n \n-      if (sym->attr.dimension)\n+      if (sym->attr.dimension || sym->attr.codimension)\n \t{\n \t  switch (sym->as->type)\n \t    {"}, {"sha": "24fdcf3b293576afdd94cd6c27d132e3e6820564", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca9939b79bee5da542bf534cf4b51132360f496/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca9939b79bee5da542bf534cf4b51132360f496/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=4ca9939b79bee5da542bf534cf4b51132360f496", "patch": "@@ -1683,9 +1683,10 @@ gfc_get_array_type_bounds (tree etype, int dimen, int codimen, tree * lbound,\n     stride = gfc_index_one_node;\n   else\n     stride = NULL_TREE;\n-  for (n = 0; n < dimen; n++)\n+  for (n = 0; n < dimen + codimen; n++)\n     {\n-      GFC_TYPE_ARRAY_STRIDE (fat_type, n) = stride;\n+      if (n < dimen)\n+\tGFC_TYPE_ARRAY_STRIDE (fat_type, n) = stride;\n \n       if (lbound)\n \tlower = lbound[n];\n@@ -1700,6 +1701,9 @@ gfc_get_array_type_bounds (tree etype, int dimen, int codimen, tree * lbound,\n \t    lower = NULL_TREE;\n \t}\n \n+      if (codimen && n == dimen + codimen - 1)\n+\tbreak;\n+\n       upper = ubound[n];\n       if (upper != NULL_TREE)\n \t{\n@@ -1709,6 +1713,9 @@ gfc_get_array_type_bounds (tree etype, int dimen, int codimen, tree * lbound,\n \t    upper = NULL_TREE;\n \t}\n \n+      if (n >= dimen)\n+\tcontinue;\n+\n       if (upper != NULL_TREE && lower != NULL_TREE && stride != NULL_TREE)\n \t{\n \t  tmp = fold_build2_loc (input_location, MINUS_EXPR,"}, {"sha": "94fa4742bb55a99725f8d49184e59c34bcd324d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca9939b79bee5da542bf534cf4b51132360f496/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca9939b79bee5da542bf534cf4b51132360f496/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ca9939b79bee5da542bf534cf4b51132360f496", "patch": "@@ -1,3 +1,8 @@\n+2011-05-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* gfortran.dg/coarray/image_index_2.f90: New.\n+\n 2011-05-13  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \t* g++.dg/cpp0x/override1.C: Move from inherit/virtual9.C."}, {"sha": "794781c7add251d37a9abdc9ba327a47f77cca9b", "filename": "gcc/testsuite/gfortran.dg/coarray/image_index_2.f90", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca9939b79bee5da542bf534cf4b51132360f496/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fimage_index_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca9939b79bee5da542bf534cf4b51132360f496/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fimage_index_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fimage_index_2.f90?ref=4ca9939b79bee5da542bf534cf4b51132360f496", "patch": "@@ -0,0 +1,76 @@\n+! { dg-do run }\n+!\n+! Scalar coarray\n+!\n+! Run-time test for IMAGE_INDEX with cobounds only known at\n+! the compile time, suitable for any number of NUM_IMAGES()\n+! For compile-time cobounds, the -fcoarray=lib version still\n+! needs to run-time evalulation if image_index returns > 1\n+! as image_index is 0 if the index would exceed num_images().\n+!\n+! Please set num_images() to >= 13, if possible.\n+!\n+! PR fortran/18918\n+!\n+\n+program test_image_index\n+implicit none\n+integer :: index1, index2, index3\n+logical :: one\n+\n+integer, save :: d[-1:3, *]\n+integer, save :: e[-1:-1, 3:*]\n+\n+one = num_images() == 1\n+\n+index1 = image_index(d, [-1, 1] )\n+index2 = image_index(d, [0, 1] )\n+\n+if (one .and. (index1 /= 1 .or. index2 /= 0)) &\n+  call abort()\n+if (.not. one .and. (index1 /= 1 .or. index2 /= 2)) &\n+  call abort()\n+\n+index1 = image_index(e, [-1, 3] )\n+index2 = image_index(e, [-1, 4] )\n+\n+if (one .and. (index1 /= 1 .or. index2 /= 0)) &\n+  call abort()\n+if (.not. one .and. (index1 /= 1 .or. index2 /= 2)) &\n+  call abort()\n+\n+call test(1, e, d, e)\n+call test(2, e, d, e)\n+\n+contains\n+subroutine test(n, a, b, c)\n+  integer :: n\n+  integer :: a[3*n:3*n, -4*n:-3*n, 88*n:*], b[-1*n:0*n,0*n:*], c[*]\n+\n+  index1 = image_index(a, [3*n, -4*n, 88*n] )\n+  index2 = image_index(b, [-1, 0] )\n+  index3 = image_index(c, [1] )\n+\n+  if (n == 1) then\n+    if (index1 /= 1 .or. index2 /= 1 .or. index3 /= 1) call abort()\n+  else if (num_images() == 1) then\n+    if (index1 /= 1 .or. index2 /= 0 .or. index3 /= 1) call abort()\n+  else\n+    if (index1 /= 1 .or. index2 /= 2 .or. index3 /= 1) call abort()\n+  end if\n+\n+  index1 = image_index(a, [3*n, -3*n, 88*n] )\n+  index2 = image_index(b, [0, 0] )\n+  index3 = image_index(c, [2] )\n+\n+  if (one .and. (index1 /= 0 .or. index2 /= 0 .or. index3 /= 0)) &\n+    call abort()\n+  if (n == 1 .and. num_images() == 2) then\n+    if (index1 /= 2 .or. index2 /= 2 .or. index3 /= 2) &\n+      call abort()\n+  else if (n == 2 .and. num_images() == 2) then \n+    if (index1 /= 0 .or. index2 /= 0 .or. index3 /= 2) &\n+      call abort()\n+  end if\n+end subroutine test\n+end program test_image_index"}]}