{"sha": "1b3abda87deea44c55a7f5ad342f671d87775a8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIzYWJkYTg3ZGVlYTQ0YzU1YTdmNWFkMzQyZjY3MWQ4Nzc3NWE4YQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebpop@gmail.com", "date": "2009-12-23T07:51:19Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-12-23T07:51:19Z"}, "message": "Add missing testcases.\n\n2009-12-23  Sebastian Pop  <sebpop@gmail.com>\n\n\t* g++.dg/graphite/id-1.C: New.\n\t* g++.dg/graphite/pr41305.C: New.\n\t* gcc.dg/graphite/id-16.c: New.\n\t* gcc.dg/graphite/interchange-10.c: New.\n\t* gcc.dg/graphite/interchange-11.c: New.\n\t* gcc.dg/graphite/interchange-mvt.c: New.\n\t* gcc.dg/graphite/pr40281.c: New.\n\t* gcc.dg/graphite/run-id-2.c: New.\n\t* gcc.dg/graphite/scop-dsyr2k.c: New.\n\t* gcc.dg/graphite/scop-dsyrk.c: New.\n\t* gcc.dg/graphite/scop-mvt.c: New.\n\t* gcc.dg/graphite/scop-sor.c: New.\n\t* gfortran.dg/graphite/id-18.f90: New.\n\t* gfortran.dg/graphite/interchange-3.f90: New.\n\t* gfortran.dg/graphite/pr42050.f90: New.\n\n\t* testsuite/libgomp.graphite/pr4118.c: New.\n\nFrom-SVN: r155424", "tree": {"sha": "a42beddafc6bd99cf71c189c67d72ba17d42e823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a42beddafc6bd99cf71c189c67d72ba17d42e823"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b3abda87deea44c55a7f5ad342f671d87775a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3abda87deea44c55a7f5ad342f671d87775a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b3abda87deea44c55a7f5ad342f671d87775a8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3abda87deea44c55a7f5ad342f671d87775a8a/comments", "author": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a84a556d9739787b345228babd3e023b245df79d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a84a556d9739787b345228babd3e023b245df79d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a84a556d9739787b345228babd3e023b245df79d"}], "stats": {"total": 720, "additions": 720, "deletions": 0}, "files": [{"sha": "8d9ce26629713d64f28b2005fae8174646e32a42", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -1,3 +1,21 @@\n+2009-12-23  Sebastian Pop  <sebpop@gmail.com>\n+\n+\t* g++.dg/graphite/id-1.C: New.\n+\t* g++.dg/graphite/pr41305.C: New.\n+\t* gcc.dg/graphite/id-16.c: New.\n+\t* gcc.dg/graphite/interchange-10.c: New.\n+\t* gcc.dg/graphite/interchange-11.c: New.\n+\t* gcc.dg/graphite/interchange-mvt.c: New.\n+\t* gcc.dg/graphite/pr40281.c: New.\n+\t* gcc.dg/graphite/run-id-2.c: New.\n+\t* gcc.dg/graphite/scop-dsyr2k.c: New.\n+\t* gcc.dg/graphite/scop-dsyrk.c: New.\n+\t* gcc.dg/graphite/scop-mvt.c: New.\n+\t* gcc.dg/graphite/scop-sor.c: New.\n+\t* gfortran.dg/graphite/id-18.f90: New.\n+\t* gfortran.dg/graphite/interchange-3.f90: New.\n+\t* gfortran.dg/graphite/pr42050.f90: New.\n+\n 2009-12-23  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/42260"}, {"sha": "5770e905dfbd9f1f03381f1ab56fee42508885e3", "filename": "gcc/testsuite/g++.dg/graphite/id-1.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fid-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fid-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fid-1.C?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -0,0 +1,39 @@\n+#include <vector>\n+\n+template <int rank, int dim> class Tensor;\n+template <int dim>\n+class Tensor<1,dim>\n+{\n+  public:\n+    explicit Tensor (const bool initialize = true);\n+    Tensor (const Tensor<1,dim> &);\n+    double values[(dim!=0) ? (dim) : 1];\n+};\n+template <int dim>\n+Tensor<1,dim>::Tensor (const Tensor<1,dim> &p)\n+{\n+  for (unsigned int i=0; i<dim; ++i)\n+    values[i] = p.values[i];\n+}\n+template <int dim>\n+class KellyErrorEstimator\n+{\n+    struct PerThreadData\n+    {\n+ std::vector<std::vector<std::vector<Tensor<1,dim> > > > psi;\n+ PerThreadData (const unsigned int n_solution_vectors,\n+         const unsigned int n_components,\n+         const unsigned int n_q_points);\n+    };\n+};\n+template <int dim>\n+KellyErrorEstimator<dim>::PerThreadData::\n+PerThreadData (const unsigned int n_solution_vectors,\n+        const unsigned int n_components,\n+        const unsigned int n_q_points)\n+{\n+  for (unsigned int i=0; i<n_solution_vectors; ++i)\n+    for (unsigned int qp=0;qp<n_q_points;++qp)\n+      psi[i][qp].resize(n_components);\n+}\n+template class KellyErrorEstimator<3>;"}, {"sha": "f558e7c3870574edd4177d64d3d31d5c102d2e63", "filename": "gcc/testsuite/g++.dg/graphite/pr41305.C", "status": "added", "additions": 332, "deletions": 0, "changes": 332, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr41305.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr41305.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr41305.C?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -0,0 +1,332 @@\n+// { dg-do compile }\n+// { dg-options \"-O3 -floop-interchange\" }\n+\n+void __throw_bad_alloc ();\n+\n+template <typename _Tp> void\n+swap (_Tp & __a, _Tp __b)\n+{\n+  __a = __b;\n+}\n+\n+template <typename _Category> struct iterator\n+{\n+  typedef _Category iterator_category;\n+};\n+\n+template <typename _Tp> struct allocator\n+{\n+  typedef __SIZE_TYPE__ size_type;\n+  typedef _Tp pointer;\n+  pointer allocate (size_type)\n+  {\n+    __throw_bad_alloc ();\n+    return __null;\n+  }\n+};\n+\n+template <class T, class = allocator <T> >class unbounded_array;\n+template <class T, class = unbounded_array <T> >class vector;\n+template <class = int> class scalar_vector;\n+template <class IC> struct random_access_iterator_base : public iterator <IC>\n+{\n+};\n+\n+template <class X, class> struct promote_traits\n+{\n+  typedef __typeof__ ((X ())) promote_type;\n+};\n+\n+template <class T> struct scalar_traits\n+{\n+  typedef T const_reference;\n+  typedef T reference;\n+};\n+\n+template <class T> struct type_traits : scalar_traits <T>\n+{\n+};\n+\n+struct dense_proxy_tag\n+{\n+};\n+\n+template <class> struct iterator_base_traits;\n+\n+template <> struct iterator_base_traits <dense_proxy_tag>\n+{\n+  template <class, class> struct iterator_base\n+  {\n+    typedef random_access_iterator_base <dense_proxy_tag> type;\n+  };\n+};\n+\n+template <class I1, class> struct iterator_restrict_traits\n+{\n+  typedef I1 iterator_category;\n+};\n+\n+template <class> class storage_array\n+{\n+};\n+\n+template <class T, class ALLOC> struct unbounded_array : public storage_array <unbounded_array <ALLOC> >\n+{\n+  typedef typename ALLOC::size_type size_type;\n+  typedef T & reference;\n+  typedef T *pointer;\n+  unbounded_array (size_type size, ALLOC = ALLOC ()) : alloc_ (), size_ (size)\n+  {\n+    alloc_.allocate (size_);\n+  }\n+  ~unbounded_array ()\n+  {\n+    if (size_)\n+      for (;;);\n+  }\n+  size_type\n+  size () const\n+  {\n+    return size_;\n+  }\n+  reference\n+  operator[] (size_type i)\n+  {\n+    return data_[i];\n+  }\n+  void\n+  swap (unbounded_array & a)\n+  {\n+    ::swap (size_, a.size_);\n+  }\n+  ALLOC alloc_;\n+  size_type size_;\n+  pointer data_;\n+};\n+\n+template <class T1, class T2> struct scalar_binary_functor\n+{\n+  typedef typename promote_traits <T1, T2>::promote_type result_type;\n+};\n+\n+template <class T1, class T2> struct scalar_plus : public scalar_binary_functor <T1, T2>\n+{\n+};\n+\n+template <class T1, class T2> struct scalar_multiplies : public scalar_binary_functor <T1, T2>\n+{\n+};\n+\n+template <class T1, class T2> struct scalar_binary_assign_functor\n+{\n+  typedef typename type_traits <T1>::reference argument1_type;\n+  typedef typename type_traits <T2>::const_reference argument2_type;\n+};\n+\n+template <class T1, class T2> struct scalar_assign : public scalar_binary_assign_functor <T1, T2>\n+{\n+  typedef typename scalar_binary_assign_functor <T1, T2>::argument1_type argument1_type;\n+  typedef typename scalar_binary_assign_functor <T1, T2>::argument2_type argument2_type;\n+  static const bool computed = false;\n+  static void\n+  apply (argument1_type t1, argument2_type t2)\n+  {\n+    t1 = t2;\n+  }\n+};\n+\n+template <class E> struct vector_expression\n+{\n+  typedef E expression_type;\n+  const expression_type &\n+  operator () () const\n+  {\n+    return *static_cast <const expression_type *>(this);\n+  }\n+};\n+\n+template <class C> class vector_container : public vector_expression <C>\n+{\n+};\n+\n+template <class E> struct vector_reference : public vector_expression <vector_reference <E> >\n+{\n+  typedef typename E::size_type size_type;\n+  typename E::const_reference const_reference;\n+  typedef E referred_type;\n+  vector_reference (referred_type & e) : e_ (e)\n+  {\n+  }\n+  size_type\n+  size () const\n+  {\n+    return expression ().size ();\n+  }\n+  referred_type &\n+  expression () const\n+  {\n+    return e_;\n+  }\n+  referred_type &e_;\n+};\n+\n+template <class E1, class E2, class F> struct vector_binary : public vector_expression <vector_binary <E1, E2, F> >\n+{\n+  typedef E1 expression1_type;\n+  typedef E2 expression2_type;\n+  typedef typename E1::const_closure_type expression1_closure_type;\n+  typedef typename E2::const_closure_type expression2_closure_type;\n+  typedef typename promote_traits <typename E1::size_type, typename E2::size_type>::promote_type size_type;\n+  typedef typename F::result_type value_type;\n+\n+  vector_binary (const expression1_type & e1, expression2_type e2) : e1_ (e1), e2_ (e2)\n+  {\n+  }\n+\n+  size_type\n+  size () const\n+  {\n+    return e1_.size ();\n+  }\n+\n+  class const_iterator : public iterator_base_traits <typename iterator_restrict_traits <typename E1::const_iterator::iterator_category, const_iterator>::iterator_category>::template iterator_base <const_iterator, value_type>::type\n+  {\n+  };\n+  expression1_closure_type e1_;\n+  expression2_closure_type e2_;\n+};\n+\n+template <class E1, class E2, class F> struct vector_binary_traits\n+{\n+  typedef vector_binary <E1, E2, F> expression_type;\n+  typedef expression_type result_type;\n+};\n+\n+template <class E1, class E2> typename vector_binary_traits <E1, E2, scalar_plus <typename E1::value_type, typename E2::value_type> >::result_type\n+operator + (vector_expression <E1> &e1, const vector_expression <E2> &e2)\n+{\n+  typedef typename vector_binary_traits <E1, E2, scalar_plus <typename E1::value_type, typename E2::value_type> >::expression_type expression_type;\n+  return expression_type (e1 (), e2 ());\n+}\n+\n+template <class E1, class E2, class F> struct vector_binary_scalar2 : public vector_expression <vector_binary_scalar2 <E1, E2, F> >\n+{\n+  typedef vector_binary_scalar2 <E1, E2, F> self_type;\n+  typedef typename E1::size_type size_type;\n+  typedef typename F::result_type value_type;\n+  typedef self_type const_closure_type;\n+};\n+\n+template <class E1, class E2, class F> struct vector_binary_scalar2_traits\n+{\n+  typedef vector_binary_scalar2 <E1, E2, F> result_type;\n+};\n+\n+template <class E1, class T2>\n+typename vector_binary_scalar2_traits <E1, T2, scalar_multiplies <typename E1::value_type, T2> >::result_type\n+operator * (vector_expression <E1>, T2)\n+{\n+}\n+\n+template <class SC> struct vector_assign_traits\n+{\n+  typedef SC storage_category;\n+};\n+\n+template <template <class, class> class F, class V, class E> void\n+indexing_vector_assign (V & v, vector_expression <E>)\n+{\n+  typedef F <typename V::reference, typename E::value_type> functor_type;\n+  typedef typename V::size_type size_type;\n+  size_type size (v.size ());\n+  for (size_type i; i <size; ++i)\n+    functor_type::apply (v (i), (i));\n+}\n+\n+template <template <class, class> class F, class V, class E> void\n+vector_assign (V & v, const vector_expression <E> &e, dense_proxy_tag)\n+{\n+  indexing_vector_assign <F> (v, e);\n+}\n+\n+template <template <class, class> class F, class V, class E> void\n+vector_assign (V & v, const vector_expression <E> &e)\n+{\n+  typedef typename vector_assign_traits <typename V::storage_category>::storage_category storage_category;\n+  vector_assign <F> (v, e, storage_category ());\n+}\n+\n+template <class T, class A> struct vector : public vector_container <vector <T> >\n+{\n+  typedef vector <T> self_type;\n+  typedef typename A::size_type size_type;\n+  typedef T value_type;\n+  typedef typename type_traits <T>::const_reference const_reference;\n+  typedef T &reference;\n+  typedef A array_type;\n+  typedef vector_reference <const self_type> const_closure_type;\n+  typedef dense_proxy_tag storage_category;\n+  vector (size_type size):vector_container <self_type> (), data_ (size)\n+  {\n+  }\n+  vector (size_type size, value_type):vector_container <self_type> (), data_ (size)\n+  {\n+  }\n+  template <class AE> vector (const vector_expression <AE> &ae) : vector_container <self_type> (), data_ (ae ().size ())\n+  {\n+    vector_assign <scalar_assign> (*this, ae);\n+  }\n+  size_type\n+  size () const\n+  {\n+    return data_.size ();\n+  }\n+  array_type &\n+  data ()\n+  {\n+    return data_;\n+  }\n+  reference\n+  operator () (size_type i)\n+  {\n+    return data ()[i];\n+  }\n+  template <class AE> vector operator += (const vector_expression <AE> &ae)\n+  {\n+    self_type temporary (*this + ae);\n+    data_.swap (temporary.data ());\n+    return *this;\n+  }\n+  class const_iterator : public random_access_iterator_base <dense_proxy_tag>\n+  {\n+  };\n+  array_type data_;\n+};\n+\n+template <class T> struct scalar_vector : public vector_container <scalar_vector <> >\n+{\n+  typedef scalar_vector self_type;\n+  typedef __SIZE_TYPE__ size_type;\n+  typedef T value_type;\n+  typedef T const_reference;\n+  typedef vector_reference <self_type> const_closure_type;\n+};\n+\n+void\n+bar (vector <double>)\n+{\n+}\n+\n+void\n+foo (int n_samp)\n+{\n+  vector <double> xi (n_samp, 0);\n+  for (int n = 0; n <n_samp; ++n)\n+    {\n+      vector <double> cos_w_n (n_samp);\n+      xi += cos_w_n * 6.0;\n+    }\n+  vector <double> cos_wd (n_samp);\n+  xi += cos_wd;\n+  bar (xi + scalar_vector <> ());\n+}"}, {"sha": "faa685f8014b64b992458c3c7cd678466de26648", "filename": "gcc/testsuite/gcc.dg/graphite/id-16.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-16.c?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -0,0 +1,44 @@\n+int transformation[(2*19 - 1) * (2*19 - 1)][8];\n+\n+const int transformation2[8][2][2] = {\n+  {{1, 0}, {0, 1}},\n+  {{0, 1}, {-1, 0}},\n+  {{-1, 0}, {0, -1}},\n+  {{0, -1}, {1, 0}},\n+  {{0, -1}, {-1, 0}},\n+  {{-1, 0}, {0, 1}},\n+  {{0, 1}, {1, 0}},\n+  {{1, 0}, {0, -1}}\n+};\n+\n+void\n+transformation_init (void)\n+{\n+  int k;\n+  int dx;\n+  int dy;\n+\n+  for (k = 0; k < 8; k++)\n+    {\n+      for (dy = -19 + 1; dy <= 19 - 1; dy++)\n+\t{\n+\t  for (dx = -19 + 1; dx <= 19 - 1; dx++)\n+\t    {\n+\t      int tx;\n+\t      int ty;\n+\t      do\n+\t\t{\n+\t\t  *&tx =\n+\t\t    transformation2[k][0][0] * (dx) +\n+\t\t    transformation2[k][0][1] * (dy);\n+\t\t  *&ty =\n+\t\t    transformation2[k][1][0] * (dx) +\n+\t\t    transformation2[k][1][1] * (dy);\n+\t\t}\n+\t      while (0);\n+\t      transformation[((dy + 19 - 1) * (2 * 19 - 1) +\n+\t\t\t      (dx + 19 - 1))][k] = ((tx) * (19 + 1) + (ty));\n+\t    }\n+\t}\n+    }\n+}"}, {"sha": "0cd22a3b4128f19a54b354407dfd102cca0dcbaa", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-10.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-10.c?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -0,0 +1,19 @@\n+double u[1782225];\n+int foo(int N, int *res)\n+{\n+  int i, j;\n+  double sum = 0.0;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      sum = sum + u[i + 1335 * j];\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      sum = sum + u[i + 1335 * j];\n+\n+  *res = sum + N;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 2 \"graphite\" } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "dea8df753696b1bc76e20c883d75e2576234a278", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-11.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-11.c?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -0,0 +1,18 @@\n+double u[1782225];\n+int foo(int N, int *res)\n+{\n+  int i, j;\n+  double sum = 0.0;\n+\n+  for (i = 0; i < 1335; i++)\n+    {\n+      for (j = 0; j < 1335; j++)\n+\tsum = sum + u[i + 1335 * j];\n+\n+      u[1336 * i] *= 2;\n+    }\n+  *res = sum;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "915a7acf33b58104140dd4219a23ae3feab78e0c", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-mvt.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -0,0 +1,24 @@\n+#define NMAX 2000\n+\n+static double x1[NMAX], x2[NMAX], a[NMAX][NMAX], y_1[NMAX], y_2[NMAX];\n+\n+void mvt(long N) {\n+\n+    int i,j;\n+\n+    for (i=0; i<N; i++) {\n+        for (j=0; j<N; j++) {\n+            x1[i] = x1[i] + a[i][j] * y_1[j];\n+        }\n+    }\n+    \n+    for (i=0; i<N; i++) {\n+        for (j=0; j<N; j++) {\n+            x2[i] = x2[i] + a[j][i] * y_2[j];\n+        }\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */ \n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */\n+"}, {"sha": "64b9a4c3b67f6edfe369e9ee848685f8c232198a", "filename": "gcc/testsuite/gcc.dg/graphite/pr40281.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr40281.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr40281.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr40281.c?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fprefetch-loop-arrays\" } */\n+\n+void foo(int);\n+void bar(int n)\n+{\n+ int a[2], i, j = 0;\n+\n+ for (i = 0; i < 2; i += j+1)\n+   for (j = 0; j < (n ? 1 : 2); ++j)\n+     foo(a[i] + a[j]);\n+}"}, {"sha": "acaa14c6d0ec354bd29eb8db3c3ee11348bbfc19", "filename": "gcc/testsuite/gcc.dg/graphite/run-id-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-2.c?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -0,0 +1,28 @@\n+int a[1] = {1};\n+\n+static int __attribute__((noinline)) foo(int n)\n+{\n+  int i, c = 0;\n+  for (i = 0; i < n; i++)\n+    c += a[i];\n+  return c;\n+}\n+\n+int b[2] = {2, 3};\n+\n+static int __attribute__((noinline)) bar(int n)\n+{\n+  int i, c = 0;\n+  for (i = 0; i < n; i++)\n+    c += b[i];\n+  return c;\n+}\n+\n+int main()\n+{\n+  return\n+   foo(0) != 0 || foo(1) != 1 || bar(0) != 0 || bar(1) != 2 || bar(2) != 5;\n+}\n+\n+/* { dg-do run  } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "f5d1df1ea033fc002156aae24947b058a4d807d9", "filename": "gcc/testsuite/gcc.dg/graphite/scop-dsyr2k.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyr2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyr2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyr2k.c?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -0,0 +1,21 @@\n+#define NMAX 3000\n+\n+static double a[NMAX][NMAX], b[NMAX][NMAX], c[NMAX][NMAX];\n+\n+void dsyr2k(long N) {\n+\tint i,j,k;\n+\t\n+#pragma scop\n+\tfor (i=0; i<N; i++) {\n+\t\tfor (j=0; j<N; j++) {\n+\t\t\tfor (k=j; k<N; k++) {\n+\t\t\t\tc[j][k] += a[i][j] * b[i][k] + b[i][j] * a[i][k];\n+\t\t\t}\n+\t\t}\n+\t}\n+#pragma endscop\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\"} } */ \n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */\n+"}, {"sha": "a7bc5c49815ada642dd0167adcd754d9c111c33a", "filename": "gcc/testsuite/gcc.dg/graphite/scop-dsyrk.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyrk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyrk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyrk.c?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -0,0 +1,22 @@\n+#define NMAX 3000\n+#define MEASURE_TIME 1\n+\n+static double a[NMAX][NMAX], c[NMAX][NMAX];\n+\n+void dsyrk(long N) \n+{\n+  int i,j,k;\n+\n+#pragma scop\n+  for (i=0; i<N; i++) {\n+    for (j=0; j<N; j++) {\n+      for (k=j; k<N; k++) {\n+        c[j][k] += a[i][j] * a[i][k];\n+      }\n+    }\n+  }\n+#pragma endscop\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\" } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "1181cdad02ed22cc3d08f8b41c4ee4b72ac9c384", "filename": "gcc/testsuite/gcc.dg/graphite/scop-mvt.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-mvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-mvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-mvt.c?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -0,0 +1,24 @@\n+#define NMAX 2000\n+\n+static double x1[NMAX], x2[NMAX], a[NMAX][NMAX], y_1[NMAX], y_2[NMAX];\n+\n+void mvt(long N) {\n+\n+    int i,j;\n+\n+    for (i=0; i<N; i++) {\n+        for (j=0; j<N; j++) {\n+            x1[i] = x1[i] + a[i][j] * y_1[j];\n+        }\n+    }\n+    \n+    for (i=0; i<N; i++) {\n+        for (j=0; j<N; j++) {\n+            x2[i] = x2[i] + a[j][i] * y_2[j];\n+        }\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 2\" 1 \"graphite\" } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */\n+"}, {"sha": "32c120731635684af669f942773a4e0158139f95", "filename": "gcc/testsuite/gcc.dg/graphite/scop-sor.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-sor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-sor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-sor.c?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -0,0 +1,18 @@\n+#define SIZE 10000\n+\n+static double P[SIZE][SIZE];\n+\n+void sor(int N1, int N2){\n+  int i, j, k;\n+\n+#pragma scop\n+  for(i=1; i<N1-1; i++) {\n+    for(j=1; j<N2-1; j++) {\n+      P[i][j] = (P[i][j] + P[i][j-1] + P[i][j+1] + P[i-1][j] + P[i+1][j]) / 5;\n+    }\n+  }\n+#pragma endscop\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\" } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "273e670fcee82c575ac0ca40f2f9dbb48016c706", "filename": "gcc/testsuite/gfortran.dg/graphite/id-18.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-18.f90?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -0,0 +1,25 @@\n+MODULE spherical_harmonics\n+  INTEGER, PARAMETER :: dp = SELECTED_REAL_KIND ( 14, 200 )\n+CONTAINS\n+  FUNCTION dlegendre (x, l, m) RESULT (dplm)\n+  SELECT CASE ( l )\n+  CASE ( 0 )\n+    dplm = 0.0_dp\n+  CASE ( 1 )\n+    dplm = 1.0_dp\n+  CASE DEFAULT\n+    IF ( mm > 0 ) THEN\n+      dpmm = -m\n+      DO im = 1, mm\n+        dpmm = -dpmm\n+      END DO\n+      IF ( l == mm + 1 ) THEN\n+        DO il = mm + 2, l\n+          dpll = dpmm\n+        END DO\n+        dplm = dpll\n+      END IF\n+    END IF\n+  END SELECT\n+  END FUNCTION dlegendre\n+END MODULE spherical_harmonics"}, {"sha": "04f4a13936121e7a290368d059c78e687eb2c55e", "filename": "gcc/testsuite/gfortran.dg/graphite/interchange-3.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-3.f90?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -0,0 +1,28 @@\n+! Formerly known as ltrans-7.f90\n+\n+Program FOO\n+  IMPLICIT INTEGER\t(I-N)\n+  IMPLICIT REAL*8\t(A-H, O-Z)\n+  PARAMETER (N1=1335, N2=1335)\n+  COMMON U(N1,N2), V(N1,N2), P(N1,N2)\n+\n+  PC = 0.0D0\n+  UC = 0.0D0\n+  VC = 0.0D0\n+\n+  do I = 1, M\n+     do J = 1, M\n+        PC = PC + abs(P(I,J))\n+        UC = UC + abs(U(I,J))\n+        VC = VC + abs(V(I,J))\n+     end do\n+     U(I,I) = U(I,I) * ( mod (I, 100) /100.)\n+  end do\n+\n+  write(6,366) PC, UC, VC\n+366  format(/, ' PC = ',E12.4,/,' UC = ',E12.4,/,' VC = ',E12.4,/)\n+\n+end Program FOO\n+\n+! { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } }\n+! { dg-final { cleanup-tree-dump \"graphite\" } }"}, {"sha": "09cab6f0f1c690e8f3dc89a8203d01f2c1a5bf77", "filename": "gcc/testsuite/gfortran.dg/graphite/pr42050.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr42050.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr42050.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr42050.f90?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -0,0 +1,25 @@\n+! { dg-options \"-O2 -fgraphite-identity \" }\n+\n+MODULE qs_ks_methods\n+  INTEGER, PARAMETER :: sic_list_all=1\n+  TYPE dft_control_type\n+     INTEGER :: sic_list_id\n+  END TYPE\n+CONTAINS\n+  SUBROUTINE sic_explicit_orbitals( )\n+    TYPE(dft_control_type), POINTER          :: dft_control\n+    INTEGER, ALLOCATABLE, DIMENSION(:, :)    :: sic_orbital_list\n+    INTEGER, DIMENSION(:), &\n+      POINTER                                :: mo_derivs\n+    SELECT CASE(dft_control%sic_list_id)\n+    CASE(sic_list_all)\n+      DO i=1,k_alpha\n+         IF (SIZE(mo_derivs,1)==1) THEN\n+         ELSE\n+             sic_orbital_list(3,iorb)=2\n+         ENDIF\n+      ENDDO\n+    END SELECT\n+    CALL test()\n+  END SUBROUTINE sic_explicit_orbitals\n+END MODULE qs_ks_methods"}, {"sha": "e249e3253937e429b07e6f02ef978a17aa9bca3b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -1,3 +1,7 @@\n+2009-12-23  Sebastian Pop  <sebpop@gmail.com>\n+\n+\t* testsuite/libgomp.graphite/pr4118.c: New.\n+\n 2009-12-22  Iain Sandoe  <iain.sandoe@sandoe-acoustics.co.uk>\n \n \t* testsuite/libgomp.fortran/crayptr2.f90: Remove forced static linkage"}, {"sha": "18e95ed8b5be945f0b5dec49acd83f63b4349978", "filename": "libgomp/testsuite/libgomp.graphite/pr4118.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3abda87deea44c55a7f5ad342f671d87775a8a/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fpr4118.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3abda87deea44c55a7f5ad342f671d87775a8a/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fpr4118.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fpr4118.c?ref=1b3abda87deea44c55a7f5ad342f671d87775a8a", "patch": "@@ -0,0 +1,19 @@\n+void foo(int *a, int *b)\n+{\n+  int i;\n+  int *c = b+1;\n+\n+  for (i = 0; i < 100; i++)\n+    a[i] = c[i];\n+}\n+\n+int main(void)\n+{\n+  return 0;\n+}\n+\n+/* Check that parallel code generation part make the right answer.  */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn\" 0 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"parloops\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}