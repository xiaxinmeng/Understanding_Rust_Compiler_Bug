{"sha": "4851c80ce8de18896dc5c4b1b023afa8456736ba", "node_id": "C_kwDOANBUbNoAKDQ4NTFjODBjZThkZTE4ODk2ZGM1YzRiMWIwMjNhZmE4NDU2NzM2YmE", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-11-01T05:14:01Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-11-01T05:14:01Z"}, "message": "Rename duplicate_loop_to_header_edge to duplicate_loop_body_to_header_edge\n\ngcc/ChangeLog:\n\n2021-11-01  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\t* cfghooks.c (cfg_hook_duplicate_loop_to_header_edge): Rename\n\tduplicate_loop_to_header_edge to\n\tduplicate_loop_body_to_header_edge.\n\t(cfg_hook_duplicate_loop_body_to_header_edge): Likewise.\n\t* cfghooks.h (struct cfg_hooks): Likewise.\n\t(cfg_hook_duplicate_loop_body_to_header_edge): Likewise.\n\t* cfgloopmanip.c (duplicate_loop_body_to_header_edge): Likewise.\n\t(clone_loop_to_header_edge): Likewise.\n\t* cfgloopmanip.h (duplicate_loop_body_to_header_edge): Likewise.\n\t* cfgrtl.c (struct cfg_hooks): Likewise.\n\t* doc/loop.texi: Likewise.\n\t* loop-unroll.c (unroll_loop_constant_iterations): Likewise.\n\t(unroll_loop_runtime_iterations): Likewise.\n\t(unroll_loop_stupid): Likewise.\n\t(apply_opt_in_copies): Likewise.\n\t* tree-cfg.c (struct cfg_hooks): Likewise.\n\t* tree-ssa-loop-ivcanon.c (try_unroll_loop_completely): Likewise.\n\t(try_peel_loop): Likewise.\n\t* tree-ssa-loop-manip.c (copy_phi_node_args): Likewise.\n\t(gimple_duplicate_loop_body_to_header_edge): Likewise.\n\t(tree_transform_and_unroll_loop): Likewise.\n\t* tree-ssa-loop-manip.h (gimple_duplicate_loop_body_to_header_edge):\n\tLikewise.", "tree": {"sha": "587ebec764b4bcf0088526697c883dd59232644d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/587ebec764b4bcf0088526697c883dd59232644d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4851c80ce8de18896dc5c4b1b023afa8456736ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4851c80ce8de18896dc5c4b1b023afa8456736ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4851c80ce8de18896dc5c4b1b023afa8456736ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4851c80ce8de18896dc5c4b1b023afa8456736ba/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f35af8df241a9eb9c2edf7da26d3c5f53d6e2511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f35af8df241a9eb9c2edf7da26d3c5f53d6e2511", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f35af8df241a9eb9c2edf7da26d3c5f53d6e2511"}], "stats": {"total": 193, "additions": 84, "deletions": 109}, "files": [{"sha": "fa2dae21a03925c83f5545e9d8c3e924a44b8cdf", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=4851c80ce8de18896dc5c4b1b023afa8456736ba", "patch": "@@ -1239,25 +1239,22 @@ lv_flush_pending_stmts (edge e)\n     cfg_hooks->flush_pending_stmts (e);\n }\n \n-/* Loop versioning uses the duplicate_loop_to_header_edge to create\n+/* Loop versioning uses the duplicate_loop_body_to_header_edge to create\n    a new version of the loop basic-blocks, the parameters here are\n-   exactly the same as in duplicate_loop_to_header_edge or\n-   tree_duplicate_loop_to_header_edge; while in tree-ssa there is\n+   exactly the same as in duplicate_loop_body_to_header_edge or\n+   tree_duplicate_loop_body_to_header_edge; while in tree-ssa there is\n    additional work to maintain ssa information that's why there is\n-   a need to call the tree_duplicate_loop_to_header_edge rather\n-   than duplicate_loop_to_header_edge when we are in tree mode.  */\n+   a need to call the tree_duplicate_loop_body_to_header_edge rather\n+   than duplicate_loop_body_to_header_edge when we are in tree mode.  */\n bool\n-cfg_hook_duplicate_loop_to_header_edge (class loop *loop, edge e,\n-\t\t\t\t\tunsigned int ndupl,\n-\t\t\t\t\tsbitmap wont_exit, edge orig,\n-\t\t\t\t\tvec<edge> *to_remove,\n-\t\t\t\t\tint flags)\n+cfg_hook_duplicate_loop_body_to_header_edge (class loop *loop, edge e,\n+\t\t\t\t\t     unsigned int ndupl,\n+\t\t\t\t\t     sbitmap wont_exit, edge orig,\n+\t\t\t\t\t     vec<edge> *to_remove, int flags)\n {\n-  gcc_assert (cfg_hooks->cfg_hook_duplicate_loop_to_header_edge);\n-  return cfg_hooks->cfg_hook_duplicate_loop_to_header_edge (loop, e,\n-\t\t\t\t\t\t\t    ndupl, wont_exit,\n-\t\t\t\t\t\t\t    orig, to_remove,\n-\t\t\t\t\t\t\t    flags);\n+  gcc_assert (cfg_hooks->cfg_hook_duplicate_loop_body_to_header_edge);\n+  return cfg_hooks->cfg_hook_duplicate_loop_body_to_header_edge (\n+    loop, e, ndupl, wont_exit, orig, to_remove, flags);\n }\n \n /* Conditional jumps are represented differently in trees and RTL,"}, {"sha": "6df651f128e6cfeb894cdf774d92d73010767169", "filename": "gcc/cfghooks.h", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Fcfghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Fcfghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.h?ref=4851c80ce8de18896dc5c4b1b023afa8456736ba", "patch": "@@ -166,10 +166,9 @@ struct cfg_hooks\n \n   /* A hook for duplicating loop in CFG, currently this is used\n      in loop versioning.  */\n-  bool (*cfg_hook_duplicate_loop_to_header_edge) (class loop *, edge,\n-\t\t\t\t\t\t  unsigned, sbitmap,\n-\t\t\t\t\t\t  edge, vec<edge> *,\n-\t\t\t\t\t\t  int);\n+  bool (*cfg_hook_duplicate_loop_body_to_header_edge) (class loop *, edge,\n+\t\t\t\t\t\t       unsigned, sbitmap, edge,\n+\t\t\t\t\t\t       vec<edge> *, int);\n \n   /* Add condition to new basic block and update CFG used in loop\n      versioning.  */\n@@ -250,12 +249,11 @@ extern bool block_ends_with_condjump_p (const_basic_block bb);\n extern int flow_call_edges_add (sbitmap);\n extern void execute_on_growing_pred (edge);\n extern void execute_on_shrinking_pred (edge);\n-extern bool cfg_hook_duplicate_loop_to_header_edge (class loop *loop, edge,\n-\t\t\t\t\t\t    unsigned int ndupl,\n-\t\t\t\t\t\t    sbitmap wont_exit,\n-\t\t\t\t\t\t    edge orig,\n-\t\t\t\t\t\t    vec<edge> *to_remove,\n-\t\t\t\t\t\t    int flags);\n+extern bool\n+cfg_hook_duplicate_loop_body_to_header_edge (class loop *loop, edge,\n+\t\t\t\t\t     unsigned int ndupl,\n+\t\t\t\t\t     sbitmap wont_exit, edge orig,\n+\t\t\t\t\t     vec<edge> *to_remove, int flags);\n \n extern void lv_flush_pending_stmts (edge);\n extern void extract_cond_bb_edges (basic_block, edge *, edge*);"}, {"sha": "aa538a221e1f7efdd092a4d63c6489e72fb3a5d4", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=4851c80ce8de18896dc5c4b1b023afa8456736ba", "patch": "@@ -1059,10 +1059,9 @@ can_duplicate_loop_p (const class loop *loop)\n    impossible.  */\n \n bool\n-duplicate_loop_to_header_edge (class loop *loop, edge e,\n-\t\t\t       unsigned int ndupl, sbitmap wont_exit,\n-\t\t\t       edge orig, vec<edge> *to_remove,\n-\t\t\t       int flags)\n+duplicate_loop_body_to_header_edge (class loop *loop, edge e,\n+\t\t\t\t    unsigned int ndupl, sbitmap wont_exit,\n+\t\t\t\t    edge orig, vec<edge> *to_remove, int flags)\n {\n   class loop *target, *aloop;\n   class loop **orig_loops;\n@@ -1630,8 +1629,8 @@ loop_version (class loop *loop,\n   first_head = entry->dest;\n \n   /* 1) Duplicate loop on the entry edge.  */\n-  if (!cfg_hook_duplicate_loop_to_header_edge (loop, entry, 1,\n-\t\t\t\t\t       NULL, NULL, NULL, 0))\n+  if (!cfg_hook_duplicate_loop_body_to_header_edge (loop, entry, 1, NULL, NULL,\n+\t\t\t\t\t\t    NULL, 0))\n     {\n       entry->flags |= irred_flag;\n       return NULL;"}, {"sha": "8dc5de909e47d4db782f134a83ad1ca3aa734877", "filename": "gcc/cfgloopmanip.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Fcfgloopmanip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Fcfgloopmanip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.h?ref=4851c80ce8de18896dc5c4b1b023afa8456736ba", "patch": "@@ -48,9 +48,9 @@ extern class loop * duplicate_loop (class loop *, class loop *,\n \t\t\t\t     class loop * = NULL);\n extern void duplicate_subloops (class loop *, class loop *);\n extern bool can_duplicate_loop_p (const class loop *loop);\n-extern bool duplicate_loop_to_header_edge (class loop *, edge,\n-\t\t\t\t\t   unsigned, sbitmap, edge,\n- \t\t\t\t\t   vec<edge> *, int);\n+extern bool\n+duplicate_loop_body_to_header_edge (class loop *, edge, unsigned, sbitmap, edge,\n+\t\t\t\t    vec<edge> *, int);\n extern bool mfb_keep_just (edge);\n basic_block create_preheader (class loop *, int);\n extern void create_preheaders (int);"}, {"sha": "e3a724bddb4547f93986a2a81ecc093037fca2af", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=4851c80ce8de18896dc5c4b1b023afa8456736ba", "patch": "@@ -5344,7 +5344,7 @@ struct cfg_hooks cfg_layout_rtl_cfg_hooks = {\n   rtl_flow_call_edges_add,\n   NULL, /* execute_on_growing_pred */\n   NULL, /* execute_on_shrinking_pred */\n-  duplicate_loop_to_header_edge, /* duplicate loop for trees */\n+  duplicate_loop_body_to_header_edge, /* duplicate loop for trees */\n   rtl_lv_add_condition_to_bb, /* lv_add_condition_to_bb */\n   NULL, /* lv_adjust_loop_header_phi*/\n   rtl_extract_cond_bb_edges, /* extract_cond_bb_edges */"}, {"sha": "29a580066d60fa21ee8f3d5ad6b0d9a1b85a628b", "filename": "gcc/doc/loop.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Fdoc%2Floop.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Fdoc%2Floop.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Floop.texi?ref=4851c80ce8de18896dc5c4b1b023afa8456736ba", "patch": "@@ -249,8 +249,8 @@ are only reliable for the innermost loops:\n @item @code{create_iv}: Creates a new induction variable.  Only works on\n GIMPLE@.  @code{standard_iv_increment_position} can be used to find a\n suitable place for the iv increment.\n-@item @code{duplicate_loop_to_header_edge},\n-@code{tree_duplicate_loop_to_header_edge}: These functions (on RTL and\n+@item @code{duplicate_loop_body_to_header_edge},\n+@code{tree_duplicate_loop_body_to_header_edge}: These functions (on RTL and\n on GIMPLE) duplicate the body of the loop prescribed number of times on\n one of the edges entering loop header, thus performing either loop\n unrolling or loop peeling.  @code{can_duplicate_loop_p}"}, {"sha": "a06bdfb9dacbe3530ee76cb3ac74f5ab43b83fbc", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 30, "deletions": 48, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=4851c80ce8de18896dc5c4b1b023afa8456736ba", "patch": "@@ -520,14 +520,11 @@ unroll_loop_constant_iterations (class loop *loop)\n       if (exit_mod)\n \t{\n \t  opt_info_start_duplication (opt_info);\n-          ok = duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n-\t\t\t\t\t      exit_mod,\n-\t\t\t\t\t      wont_exit, desc->out_edge,\n-\t\t\t\t\t      &remove_edges,\n-\t\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ\n-\t\t\t\t\t      | (opt_info && exit_mod > 1\n-\t\t\t\t\t\t ? DLTHE_RECORD_COPY_NUMBER\n-\t\t\t\t\t\t   : 0));\n+\t  ok = duplicate_loop_body_to_header_edge (\n+\t    loop, loop_preheader_edge (loop), exit_mod, wont_exit,\n+\t    desc->out_edge, &remove_edges,\n+\t    DLTHE_FLAG_UPDATE_FREQ\n+\t      | (opt_info && exit_mod > 1 ? DLTHE_RECORD_COPY_NUMBER : 0));\n \t  gcc_assert (ok);\n \n           if (opt_info && exit_mod > 1)\n@@ -569,14 +566,11 @@ unroll_loop_constant_iterations (class loop *loop)\n \t    bitmap_clear_bit (wont_exit, 1);\n \n           opt_info_start_duplication (opt_info);\n-\t  ok = duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n-\t\t\t\t\t      exit_mod + 1,\n-\t\t\t\t\t      wont_exit, desc->out_edge,\n-\t\t\t\t\t      &remove_edges,\n-\t\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ\n-\t\t\t\t\t      | (opt_info && exit_mod > 0\n-\t\t\t\t\t\t ? DLTHE_RECORD_COPY_NUMBER\n-\t\t\t\t\t\t   : 0));\n+\t  ok = duplicate_loop_body_to_header_edge (\n+\t    loop, loop_preheader_edge (loop), exit_mod + 1, wont_exit,\n+\t    desc->out_edge, &remove_edges,\n+\t    DLTHE_FLAG_UPDATE_FREQ\n+\t      | (opt_info && exit_mod > 0 ? DLTHE_RECORD_COPY_NUMBER : 0));\n \t  gcc_assert (ok);\n \n           if (opt_info && exit_mod > 0)\n@@ -606,14 +600,10 @@ unroll_loop_constant_iterations (class loop *loop)\n   /* Now unroll the loop.  */\n \n   opt_info_start_duplication (opt_info);\n-  ok = duplicate_loop_to_header_edge (loop, loop_latch_edge (loop),\n-\t\t\t\t      max_unroll,\n-\t\t\t\t      wont_exit, desc->out_edge,\n-\t\t\t\t      &remove_edges,\n-\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ\n-\t\t\t\t      | (opt_info\n-\t\t\t\t\t ? DLTHE_RECORD_COPY_NUMBER\n-\t\t\t\t\t   : 0));\n+  ok = duplicate_loop_body_to_header_edge (\n+    loop, loop_latch_edge (loop), max_unroll, wont_exit, desc->out_edge,\n+    &remove_edges,\n+    DLTHE_FLAG_UPDATE_FREQ | (opt_info ? DLTHE_RECORD_COPY_NUMBER : 0));\n   gcc_assert (ok);\n \n   if (opt_info)\n@@ -975,10 +965,10 @@ unroll_loop_runtime_iterations (class loop *loop)\n       if (!desc->noloop_assumptions)\n \tbitmap_set_bit (wont_exit, 1);\n       ezc_swtch = loop_preheader_edge (loop)->src;\n-      ok = duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n-\t\t\t\t\t  1, wont_exit, desc->out_edge,\n-\t\t\t\t\t  &remove_edges,\n-\t\t\t\t\t  DLTHE_FLAG_UPDATE_FREQ);\n+      ok = duplicate_loop_body_to_header_edge (loop, loop_preheader_edge (loop),\n+\t\t\t\t\t       1, wont_exit, desc->out_edge,\n+\t\t\t\t\t       &remove_edges,\n+\t\t\t\t\t       DLTHE_FLAG_UPDATE_FREQ);\n       gcc_assert (ok);\n     }\n \n@@ -997,10 +987,10 @@ unroll_loop_runtime_iterations (class loop *loop)\n       bitmap_clear (wont_exit);\n       if (i != n_peel - 1 || !last_may_exit)\n \tbitmap_set_bit (wont_exit, 1);\n-      ok = duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n-\t\t\t\t\t  1, wont_exit, desc->out_edge,\n-\t\t\t\t\t  &remove_edges,\n-\t\t\t\t\t  DLTHE_FLAG_UPDATE_FREQ);\n+      ok = duplicate_loop_body_to_header_edge (loop, loop_preheader_edge (loop),\n+\t\t\t\t\t       1, wont_exit, desc->out_edge,\n+\t\t\t\t\t       &remove_edges,\n+\t\t\t\t\t       DLTHE_FLAG_UPDATE_FREQ);\n       gcc_assert (ok);\n \n       /* Create item for switch.  */\n@@ -1061,14 +1051,10 @@ unroll_loop_runtime_iterations (class loop *loop)\n   bitmap_clear_bit (wont_exit, may_exit_copy);\n   opt_info_start_duplication (opt_info);\n \n-  ok = duplicate_loop_to_header_edge (loop, loop_latch_edge (loop),\n-\t\t\t\t      max_unroll,\n-\t\t\t\t      wont_exit, desc->out_edge,\n-\t\t\t\t      &remove_edges,\n-\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ\n-\t\t\t\t      | (opt_info\n-\t\t\t\t\t ? DLTHE_RECORD_COPY_NUMBER\n-\t\t\t\t\t   : 0));\n+  ok = duplicate_loop_body_to_header_edge (\n+    loop, loop_latch_edge (loop), max_unroll, wont_exit, desc->out_edge,\n+    &remove_edges,\n+    DLTHE_FLAG_UPDATE_FREQ | (opt_info ? DLTHE_RECORD_COPY_NUMBER : 0));\n   gcc_assert (ok);\n \n   if (opt_info)\n@@ -1255,13 +1241,9 @@ unroll_loop_stupid (class loop *loop)\n   bitmap_clear (wont_exit);\n   opt_info_start_duplication (opt_info);\n \n-  ok = duplicate_loop_to_header_edge (loop, loop_latch_edge (loop),\n-\t\t\t\t      nunroll, wont_exit,\n-\t\t\t\t      NULL, NULL,\n-\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ\n-\t\t\t\t      | (opt_info\n-\t\t\t\t\t ? DLTHE_RECORD_COPY_NUMBER\n-\t\t\t\t\t   : 0));\n+  ok = duplicate_loop_body_to_header_edge (\n+    loop, loop_latch_edge (loop), nunroll, wont_exit, NULL, NULL,\n+    DLTHE_FLAG_UPDATE_FREQ | (opt_info ? DLTHE_RECORD_COPY_NUMBER : 0));\n   gcc_assert (ok);\n \n   if (opt_info)\n@@ -2019,7 +2001,7 @@ apply_opt_in_copies (struct opt_info *opt_info,\n       orig_bb = get_bb_original (bb);\n \n       /* bb->aux holds position in copy sequence initialized by\n-\t duplicate_loop_to_header_edge.  */\n+\t duplicate_loop_body_to_header_edge.  */\n       delta = determine_split_iv_delta ((size_t)bb->aux, n_copies,\n \t\t\t\t\tunrolling);\n       bb->aux = 0;"}, {"sha": "8ed8c69b5b1f9626e5a13468ce1ae71a418e5532", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=4851c80ce8de18896dc5c4b1b023afa8456736ba", "patch": "@@ -9126,7 +9126,7 @@ struct cfg_hooks gimple_cfg_hooks = {\n   gimple_flow_call_edges_add,   /* flow_call_edges_add */\n   gimple_execute_on_growing_pred,\t/* execute_on_growing_pred */\n   gimple_execute_on_shrinking_pred, /* execute_on_shrinking_pred */\n-  gimple_duplicate_loop_to_header_edge, /* duplicate loop for trees */\n+  gimple_duplicate_loop_body_to_header_edge, /* duplicate loop for trees */\n   gimple_lv_add_condition_to_bb, /* lv_add_condition_to_bb */\n   gimple_lv_adjust_loop_header_phi, /* lv_adjust_loop_header_phi*/\n   extract_true_false_edges_from_block, /* extract_cond_bb_edges */"}, {"sha": "be533b03a85b9675f7d428b414931d31f5e4a1ef", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=4851c80ce8de18896dc5c4b1b023afa8456736ba", "patch": "@@ -903,11 +903,10 @@ try_unroll_loop_completely (class loop *loop,\n       if (may_be_zero)\n \tbitmap_clear_bit (wont_exit, 1);\n \n-      if (!gimple_duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n-\t\t\t\t\t\t n_unroll, wont_exit,\n-\t\t\t\t\t\t exit, &edges_to_remove,\n-\t\t\t\t\t\t DLTHE_FLAG_UPDATE_FREQ\n-\t\t\t\t\t\t | DLTHE_FLAG_COMPLETTE_PEEL))\n+      if (!gimple_duplicate_loop_body_to_header_edge (\n+\t    loop, loop_preheader_edge (loop), n_unroll, wont_exit, exit,\n+\t    &edges_to_remove,\n+\t    DLTHE_FLAG_UPDATE_FREQ | DLTHE_FLAG_COMPLETTE_PEEL))\n \t{\n           free_original_copy_tables ();\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -1094,10 +1093,9 @@ try_peel_loop (class loop *loop,\n     }\n   if (may_be_zero)\n     bitmap_clear_bit (wont_exit, 1);\n-  if (!gimple_duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n-\t\t\t\t\t     npeel, wont_exit,\n-\t\t\t\t\t     exit, &edges_to_remove,\n-\t\t\t\t\t     DLTHE_FLAG_UPDATE_FREQ))\n+  if (!gimple_duplicate_loop_body_to_header_edge (\n+\tloop, loop_preheader_edge (loop), npeel, wont_exit, exit,\n+\t&edges_to_remove, DLTHE_FLAG_UPDATE_FREQ))\n     {\n       free_original_copy_tables ();\n       return false;"}, {"sha": "1fb2450b41fbf34dffb6c24dd3d7b6c85f967a16", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=4851c80ce8de18896dc5c4b1b023afa8456736ba", "patch": "@@ -911,7 +911,7 @@ copy_phi_node_args (unsigned first_new_block)\n }\n \n \n-/* The same as cfgloopmanip.c:duplicate_loop_to_header_edge, but also\n+/* The same as cfgloopmanip.c:duplicate_loop_body_to_header_edge, but also\n    updates the PHI nodes at start of the copied region.  In order to\n    achieve this, only loops whose exits all lead to the same location\n    are handled.\n@@ -921,10 +921,10 @@ copy_phi_node_args (unsigned first_new_block)\n    after the loop has been duplicated.  */\n \n bool\n-gimple_duplicate_loop_to_header_edge (class loop *loop, edge e,\n-\t\t\t\t    unsigned int ndupl, sbitmap wont_exit,\n-\t\t\t\t    edge orig, vec<edge> *to_remove,\n-\t\t\t\t    int flags)\n+gimple_duplicate_loop_body_to_header_edge (class loop *loop, edge e,\n+\t\t\t\t\t   unsigned int ndupl,\n+\t\t\t\t\t   sbitmap wont_exit, edge orig,\n+\t\t\t\t\t   vec<edge> *to_remove, int flags)\n {\n   unsigned first_new_block;\n \n@@ -934,8 +934,8 @@ gimple_duplicate_loop_to_header_edge (class loop *loop, edge e,\n     return false;\n \n   first_new_block = last_basic_block_for_fn (cfun);\n-  if (!duplicate_loop_to_header_edge (loop, e, ndupl, wont_exit,\n-\t\t\t\t      orig, to_remove, flags))\n+  if (!duplicate_loop_body_to_header_edge (loop, e, ndupl, wont_exit, orig,\n+\t\t\t\t\t   to_remove, flags))\n     return false;\n \n   /* Readd the removed phi args for e.  */\n@@ -1388,9 +1388,11 @@ tree_transform_and_unroll_loop (class loop *loop, unsigned factor,\n   bitmap_clear_bit (wont_exit, factor - 1);\n \n   auto_vec<edge> to_remove;\n-  bool ok = gimple_duplicate_loop_to_header_edge\n-\t  (loop, loop_latch_edge (loop), factor - 1,\n-\t   wont_exit, new_exit, &to_remove, DLTHE_FLAG_UPDATE_FREQ);\n+  bool ok\n+    = gimple_duplicate_loop_body_to_header_edge (loop, loop_latch_edge (loop),\n+\t\t\t\t\t\t factor - 1, wont_exit,\n+\t\t\t\t\t\t new_exit, &to_remove,\n+\t\t\t\t\t\t DLTHE_FLAG_UPDATE_FREQ);\n   gcc_assert (ok);\n \n   for (edge e : to_remove)"}, {"sha": "4f604e1bd24a3ee659082a140e463744a7ff46e7", "filename": "gcc/tree-ssa-loop-manip.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Ftree-ssa-loop-manip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4851c80ce8de18896dc5c4b1b023afa8456736ba/gcc%2Ftree-ssa-loop-manip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.h?ref=4851c80ce8de18896dc5c4b1b023afa8456736ba", "patch": "@@ -42,10 +42,9 @@ extern basic_block ip_end_pos (class loop *);\n extern basic_block ip_normal_pos (class loop *);\n extern void standard_iv_increment_position (class loop *,\n \t\t\t\t\t    gimple_stmt_iterator *, bool *);\n-extern bool gimple_duplicate_loop_to_header_edge (class loop *, edge,\n-\t\t\t\t\t\t  unsigned int, sbitmap,\n-\t\t\t\t\t\t  edge, vec<edge> *,\n-\t\t\t\t\t\t  int);\n+extern bool\n+gimple_duplicate_loop_body_to_header_edge (class loop *, edge, unsigned int,\n+\t\t\t\t\t   sbitmap, edge, vec<edge> *, int);\n extern bool can_unroll_loop_p (class loop *loop, unsigned factor,\n \t\t\t       class tree_niter_desc *niter);\n extern gcov_type niter_for_unrolled_loop (class loop *, unsigned);"}]}