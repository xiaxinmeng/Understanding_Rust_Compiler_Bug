{"sha": "6137ba90739ae1b722ed228296356b2cb49f01ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEzN2JhOTA3MzlhZTFiNzIyZWQyMjgyOTYzNTZiMmNiNDlmMDFlYw==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2005-11-04T15:43:51Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2005-11-04T15:43:51Z"}, "message": "arm.c (arm_load_pic_register): Pass extra reg to gen_pic_add_dot_plus_four and gen_pic_add_dot_plus_eight.\n\ngcc/\n\t* config/arm/arm.c (arm_load_pic_register): Pass extra reg to\n\tgen_pic_add_dot_plus_four and gen_pic_add_dot_plus_eight.\n\t(arm_call_tls_get_addr, legitimize_tls_address): Likewise.\n\t* config/arm/arm.md: Use match_operand in peephole input templates\n\tand match_dup in peephole output templates.\ngcc/testsuite/\n\t* gcc.dg/tls/opt-10.c: New test.\n\nFrom-SVN: r106493", "tree": {"sha": "e403f94386f56e7b352df41155ba6459107cecff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e403f94386f56e7b352df41155ba6459107cecff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6137ba90739ae1b722ed228296356b2cb49f01ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6137ba90739ae1b722ed228296356b2cb49f01ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6137ba90739ae1b722ed228296356b2cb49f01ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6137ba90739ae1b722ed228296356b2cb49f01ec/comments", "author": null, "committer": null, "parents": [{"sha": "e993ba8f57882d7abc34292e8e614e9978db52d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e993ba8f57882d7abc34292e8e614e9978db52d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e993ba8f57882d7abc34292e8e614e9978db52d5"}], "stats": {"total": 66, "additions": 48, "deletions": 18}, "files": [{"sha": "ed7ad25ceda867060ee6b8d909b744ef78fef647", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6137ba90739ae1b722ed228296356b2cb49f01ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6137ba90739ae1b722ed228296356b2cb49f01ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6137ba90739ae1b722ed228296356b2cb49f01ec", "patch": "@@ -1,3 +1,11 @@\n+2005-11-04 Paul Brook  <paul@codesourcery.com>\n+\n+\t* config/arm/arm.c (arm_load_pic_register): Pass extra reg to\n+\tgen_pic_add_dot_plus_four and gen_pic_add_dot_plus_eight.\n+\t(arm_call_tls_get_addr, legitimize_tls_address): Likewise.\n+\t* config/arm/arm.md: Use match_operand in peephole input templates\n+\tand match_dup in peephole output templates.\n+\n 2005-11-04  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* config/arm/arm.c (arm_init_libfuncs): Use __aeabi_idiv and"}, {"sha": "958d8800c218f3892dad774d2741567ce9e16759", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6137ba90739ae1b722ed228296356b2cb49f01ec/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6137ba90739ae1b722ed228296356b2cb49f01ec/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6137ba90739ae1b722ed228296356b2cb49f01ec", "patch": "@@ -3373,7 +3373,8 @@ arm_load_pic_register (unsigned long saved_regs ATTRIBUTE_UNUSED)\n   if (TARGET_ARM)\n     {\n       emit_insn (gen_pic_load_addr_arm (pic_offset_table_rtx, pic_rtx));\n-      emit_insn (gen_pic_add_dot_plus_eight (pic_offset_table_rtx, l1));\n+      emit_insn (gen_pic_add_dot_plus_eight (pic_offset_table_rtx,\n+\t\t\t\t\t     pic_offset_table_rtx, l1));\n     }\n   else\n     {\n@@ -3388,7 +3389,8 @@ arm_load_pic_register (unsigned long saved_regs ATTRIBUTE_UNUSED)\n \t}\n       else\n \temit_insn (gen_pic_load_addr_thumb (pic_offset_table_rtx, pic_rtx));\n-      emit_insn (gen_pic_add_dot_plus_four (pic_offset_table_rtx, l1));\n+      emit_insn (gen_pic_add_dot_plus_four (pic_offset_table_rtx,\n+\t\t\t\t\t    pic_offset_table_rtx, l1));\n     }\n \n   /* Need to emit this whether or not we obey regdecls,\n@@ -3833,9 +3835,9 @@ arm_call_tls_get_addr (rtx x, rtx reg, rtx *valuep, int reloc)\n   reg = load_tls_operand (sum, reg);\n \n   if (TARGET_ARM)\n-    emit_insn (gen_pic_add_dot_plus_eight (reg, label));\n+    emit_insn (gen_pic_add_dot_plus_eight (reg, reg, label));\n   else\n-    emit_insn (gen_pic_add_dot_plus_four (reg, label));\n+    emit_insn (gen_pic_add_dot_plus_four (reg, reg, label));\n \n   *valuep = emit_library_call_value (get_tls_get_addr (), NULL_RTX, LCT_PURE, /* LCT_CONST?  */\n \t\t\t\t     Pmode, 1, reg, Pmode);\n@@ -3889,7 +3891,7 @@ legitimize_tls_address (rtx x, rtx reg)\n \temit_insn (gen_tls_load_dot_plus_eight (reg, reg, label));\n       else\n \t{\n-\t  emit_insn (gen_pic_add_dot_plus_four (reg, label));\n+\t  emit_insn (gen_pic_add_dot_plus_four (reg, reg, label));\n \t  emit_move_insn (reg, gen_const_mem (SImode, reg));\n \t}\n "}, {"sha": "5ad2266de808b682957c1c5b7d5f4567e93ec1f2", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6137ba90739ae1b722ed228296356b2cb49f01ec/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6137ba90739ae1b722ed228296356b2cb49f01ec/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=6137ba90739ae1b722ed228296356b2cb49f01ec", "patch": "@@ -4464,31 +4464,31 @@\n )\n \n (define_insn \"pic_add_dot_plus_four\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"+r\")\n-\t(unspec:SI [(plus:SI (match_dup 0)\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(plus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t\t     (const (plus:SI (pc) (const_int 4))))]\n \t\t   UNSPEC_PIC_BASE))\n-   (use (label_ref (match_operand 1 \"\" \"\")))]\n+   (use (label_ref (match_operand 2 \"\" \"\")))]\n   \"TARGET_THUMB\"\n   \"*\n   (*targetm.asm_out.internal_label) (asm_out_file, \\\"L\\\",\n-\t\t\t     CODE_LABEL_NUMBER (operands[1]));\n+\t\t\t     CODE_LABEL_NUMBER (operands[2]));\n   return \\\"add\\\\t%0, %|pc\\\";\n   \"\n   [(set_attr \"length\" \"2\")]\n )\n \n (define_insn \"pic_add_dot_plus_eight\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"+r\")\n-\t(unspec:SI [(plus:SI (match_dup 0)\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t     (const (plus:SI (pc) (const_int 8))))]\n \t\t   UNSPEC_PIC_BASE))\n-   (use (label_ref (match_operand 1 \"\" \"\")))]\n+   (use (label_ref (match_operand 2 \"\" \"\")))]\n   \"TARGET_ARM\"\n   \"*\n     (*targetm.asm_out.internal_label) (asm_out_file, \\\"L\\\",\n-\t\t\t       CODE_LABEL_NUMBER (operands[1]));\n-    return \\\"add%?\\\\t%0, %|pc, %0\\\";\n+\t\t\t       CODE_LABEL_NUMBER (operands[2]));\n+    return \\\"add%?\\\\t%0, %|pc, %1\\\";\n   \"\n   [(set_attr \"predicable\" \"yes\")]\n )\n@@ -4514,17 +4514,17 @@\n \n (define_peephole2\n   [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t   (unspec:SI [(plus:SI (match_dup 0)\n+\t\t   (unspec:SI [(plus:SI (match_operand:SI 3 \"register_operand\" \"\")\n \t\t\t     \t \t(const (plus:SI (pc) (const_int 8))))]\n \t\t\t      UNSPEC_PIC_BASE))\n    \t      (use (label_ref (match_operand 1 \"\" \"\")))])\n    (set (match_operand:SI 2 \"register_operand\" \"\") (mem:SI (match_dup 0)))]\n   \"TARGET_ARM && peep2_reg_dead_p (2, operands[0])\"\n-  [(parallel [(set (match_operand:SI 2 \"register_operand\" \"+r\")\n-\t\t   (mem:SI (unspec:SI [(plus:SI (match_dup 0)\n+  [(parallel [(set (match_dup 2)\n+\t\t   (mem:SI (unspec:SI [(plus:SI (match_dup 3)\n \t\t\t\t\t\t(const (plus:SI (pc) (const_int 8))))]\n \t\t\t\t      UNSPEC_PIC_BASE)))\n-   \t      (use (label_ref (match_operand 1 \"\" \"\")))])]\n+   \t      (use (label_ref (match_dup 1)))])]\n   \"\"\n )\n "}, {"sha": "06c38e650bb481ba80edc0f4112fc2d5511831f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6137ba90739ae1b722ed228296356b2cb49f01ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6137ba90739ae1b722ed228296356b2cb49f01ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6137ba90739ae1b722ed228296356b2cb49f01ec", "patch": "@@ -1,3 +1,7 @@\n+2005-11-04 Paul Brook  <paul@codesourcery.com>\n+\n+\t* gcc.dg/tls/opt-10.c: New test.\n+\n 2005-11-04  Andreas Jaeger  <aj@suse.de>\n \n \t* gcc.dg/format/unnamed-1.c: Add -msse for x86 compilation to"}, {"sha": "69a7a6838efff95deb37f9dc34629ca1b38300d5", "filename": "gcc/testsuite/gcc.dg/tls/opt-10.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6137ba90739ae1b722ed228296356b2cb49f01ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6137ba90739ae1b722ed228296356b2cb49f01ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-10.c?ref=6137ba90739ae1b722ed228296356b2cb49f01ec", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile */\n+/* { dg-options \"-O3 -fpic\" } */\n+\n+/* The web pass was creating unrecognisable pic_load_dot_plus_four insns\n+   on ARM.  */\n+\n+__thread int a_thread_local;\n+void *\n+spin (int n)\n+{\n+  int i;\n+  for (i = 0; i <= n; i++)\n+    {\n+      a_thread_local += i;\n+    }\n+}"}]}