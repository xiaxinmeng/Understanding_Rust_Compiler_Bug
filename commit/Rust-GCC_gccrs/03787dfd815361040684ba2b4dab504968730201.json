{"sha": "03787dfd815361040684ba2b4dab504968730201", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM3ODdkZmQ4MTUzNjEwNDA2ODRiYTJiNGRhYjUwNDk2ODczMDIwMQ==", "commit": {"author": {"name": "Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2004-01-15T04:02:24Z"}, "committer": {"name": "R. Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2004-01-15T04:02:24Z"}, "message": "re PR bootstrap/12744 (A GCC release tarball can no longer be built without bison/flex)\n\ngcc/\n2004-01-15  Kelley Cook  <kcook@gcc.gnu.org>\n\n\tPR bootstrap/12744\n\t* configure.in: Revamp enable-generated-files-in-srcdir rule to define\n\tGENINSRC and not parsedir.  Define srcextra as a langhook.\n\t* configure: Regenerate.\n\t* Makefile.in: Suppress default .l.c rule.  Don't substitute\n\tparsedir and delete all references throughout.  Conditionally define\n\trule for srcextra dependent on GENINSRC.\n\t(stmp-docobjdir): Delete.\n\t(c-parse.o, gengtype-lex.o, gengtype-yacc.o): Use implicit build rule.\n\t(srcextra): Copy c-parse.y, c-parse.c, gengtype-lex.c, gengtype-yacc.c,\n\tand gengtype-yacc.h back to source directory.\n\t(maintainer-clean): Delete all parse files in source directory.\n\t(distclean): Delete generated files.\n\n\t* objc/Make-lang.in (objc-parse.o): Use implicit build rule.\n\t(objc-parse.c, objc-parse.y): Don't use parsedir.\n\t(objc.srcextra): Copy objc-parse.y and objc-parse.c back to source\n\tdirectory if requested.\n\t(po-generated): Don't use parsedir.\n\t(objc.maintainer-clean): Delete above files from source directory.\n\ngcc/ada/\n2004-01-15  Kelley Cook  <kcook@gcc.gnu.org>\n\n\t* Make-lang.in (ada.srcextra): Dummy entry.\n\ngcc/cp/\n2004-01-15  Kelley Cook  <kcook@gcc.gnu.org>\n\n\t* Make-lang.in (c++.srcextra): Dummy entry.\n\ngcc/f/\n2004-01-15  Kelley Cook  <kcook@gcc.gnu.org>\n\n\t* Make-lang.in (f77.srcextra): Dummy entry.\n\ngcc/java/\n2004-01-15  Kelley Cook  <kcook@gcc.gnu.org>\n\n\t* Make-lang.in (parse.c, parse-scan.c): Always build in doc directory.\n\t(java.srcextra): Copy above back to source directory if requested.\n\t(po-generated): Delete reference to $(parsedir).\n\t(java/parse.o, java/parse-scan.o): Delete reference to $(parsedir).\n\tUse implicit rule.\n\ngcc/treelang/\n2004-01-15  Kelley Cook  <kcook@gcc.gnu.org>\n\n\t* Make-lang.in (TREE_GENERATED): Delete reference to $(parsedir).\n\t(treelang/parse.o, treelang/lex.o): Look for sources in build\n\tdirectory.  Use implicit rule.\n\t(treelang/parse.c, treelang/parse.h treelang/lex.c): Always build in\n\tdoc directory.\n\t(treelang.srcextra): Copy above back to source directory if requested.\n\nFrom-SVN: r75903", "tree": {"sha": "ee011f5091b62b8a6163fe4051e3b30fb83b3941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee011f5091b62b8a6163fe4051e3b30fb83b3941"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03787dfd815361040684ba2b4dab504968730201", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03787dfd815361040684ba2b4dab504968730201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03787dfd815361040684ba2b4dab504968730201", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03787dfd815361040684ba2b4dab504968730201/comments", "author": null, "committer": null, "parents": [{"sha": "04ab46a41dc1618a0bf9cb8d21ef8cb50046e747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ab46a41dc1618a0bf9cb8d21ef8cb50046e747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04ab46a41dc1618a0bf9cb8d21ef8cb50046e747"}], "stats": {"total": 287, "additions": 163, "deletions": 124}, "files": [{"sha": "dc04759aac5ada0924ccc865f218c71896145056", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03787dfd815361040684ba2b4dab504968730201/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03787dfd815361040684ba2b4dab504968730201/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03787dfd815361040684ba2b4dab504968730201", "patch": "@@ -1,3 +1,26 @@\n+2004-01-15  Kelley Cook  <kcook@gcc.gnu.org>\n+\n+\tPR bootstrap/12744\n+\t* configure.in: Revamp enable-generated-files-in-srcdir rule to define\n+\tGENINSRC and not parsedir.  Define srcextra as a langhook.\n+\t* configure: Regenerate.\n+\t* Makefile.in: Suppress default .l.c rule.  Don't substitute\n+\tparsedir and delete all references throughout.  Conditionally define\n+\trule for srcextra dependent on GENINSRC.\n+\t(stmp-docobjdir): Delete.\n+\t(c-parse.o, gengtype-lex.o, gengtype-yacc.o): Use implicit build rule.\n+\t(srcextra): Copy c-parse.y, c-parse.c, gengtype-lex.c, gengtype-yacc.c,\n+\tand gengtype-yacc.h back to source directory.\n+\t(maintainer-clean): Delete all parse files in source directory.\n+\t(distclean): Delete generated files.\n+\n+\t* objc/Make-lang.in (objc-parse.o): Use implicit build rule.\n+\t(objc-parse.c, objc-parse.y): Don't use parsedir.\n+\t(objc.srcextra): Copy objc-parse.y and objc-parse.c back to source\n+\tdirectory if requested.\n+\t(po-generated): Don't use parsedir.\n+\t(objc.maintainer-clean): Delete above files from source directory.\n+\n 2004-01-14  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* doc/tm.texi (FUNCTION_VALUE): Fix a typo."}, {"sha": "d90e441fea194bc0f008ad94df11fbb6635dfae6", "filename": "gcc/Makefile.in", "status": "modified", "additions": 23, "deletions": 45, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03787dfd815361040684ba2b4dab504968730201/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03787dfd815361040684ba2b4dab504968730201/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=03787dfd815361040684ba2b4dab504968730201", "patch": "@@ -41,8 +41,9 @@ force:\n # to recursive makes.\n MAKEOVERRIDES =\n \n-# Suppress smart makes who think they know how to automake Yacc files\n+# Suppress smart makes who think they know how to automake yacc and flex file\n .y.c:\n+.l.c:\n \n # The only suffixes we want for implicit rules are .c and .o, so clear\n # the list and add them.  This speeds up GNU Make, and allows -r to work.\n@@ -70,11 +71,6 @@ program_transform_name = @program_transform_name@\n \n # Directory where sources are, from where we are.\n srcdir = @srcdir@\n-\n-# These directories contain files that are provided as part of a FSF tarball,\n-# but not provided in CVS.  Unless --enable-generated-files-in-srcdir is\n-# specified these files will be put in the object directory.\n-parsedir = @parsedir@\n docobjdir = @docobjdir@\n docdir = $(srcdir)/doc\n \n@@ -1058,7 +1054,7 @@ all.cross: native gcc-cross cpp$(exeext) specs \\\n \t$(LIBGCC) $(EXTRA_PARTS) lang.all.cross doc\n # This is what must be made before installing GCC and converting libraries.\n start.encap: native xgcc$(exeext) cpp$(exeext) specs \\\n-\txlimits.h lang.start.encap\n+\txlimits.h lang.start.encap @GENINSRC@ srcextra lang.srcextra\n # These can't be made until after GCC can run.\n rest.encap: $(STMP_FIXPROTO) $(LIBGCC) $(EXTRA_PARTS) lang.rest.encap\n # This is what is made with the host's compiler\n@@ -1270,28 +1266,21 @@ s-crt0:\t$(CRT0_S) $(MCRT0_S) $(GCC_PASSES) $(CONFIG_H)\n \n c-errors.o: c-errors.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(C_TREE_H) flags.h $(DIAGNOSTIC_H) $(TM_P_H)\n-c-parse.o : $(parsedir)/c-parse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n+c-parse.o : c-parse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(GGC_H) intl.h $(C_TREE_H) input.h flags.h toplev.h output.h $(CPPLIB_H) \\\n     varray.h gt-c-parse.h\n-\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t       -c $(parsedir)/c-parse.c $(OUTPUT_OPTION)\n \n-$(parsedir)/c-parse.c: $(parsedir)/c-parse.y\n-\tcd $(parsedir) && \\\n-\tif $(BISON) $(BISONFLAGS) -o c-p$$$$.c c-parse.y; then \\\n-\t  test -f c-p$$$$.output && mv -f c-p$$$$.output c-parse.output ; \\\n-\t  mv -f c-p$$$$.c c-parse.c ; \\\n-\telse \\\n-\t  rm -f c-p$$$$.* ; \\\n-\t  false ; \\\n-\tfi\n+srcextra: c-parse.y c-parse.c gengtype-lex.c gengtype-yacc.c gengtype-yacc.h\n+\t-cp -p $^ $(srcdir)\n+\n+c-parse.c: c-parse.y\n+\t-$(BISON) $(BISONFLAGS) -o $@ $< \n \n-$(parsedir)/c-parse.y: c-parse.in\n+c-parse.y: c-parse.in\n \techo '/*WARNING: This file is automatically generated!*/' >tmp-c-parse.y\n \tsed -e \"/^@@ifobjc.*/,/^@@end_ifobjc.*/d\" \\\n-\t  -e \"/^@@ifc.*/d\" -e \"/^@@end_ifc.*/d\" \\\n-\t  $(srcdir)/c-parse.in >>tmp-c-parse.y\n-\t$(SHELL) $(srcdir)/move-if-change tmp-c-parse.y $(parsedir)/c-parse.y\n+\t    -e \"/^@@ifc.*/d\" -e \"/^@@end_ifc.*/d\" $< >>tmp-c-parse.y\n+\t$(SHELL) $(srcdir)/move-if-change tmp-c-parse.y $@\n \n c-incpath.o: c-incpath.c c-incpath.h $(CONFIG_H) $(SYSTEM_H) $(CPPLIB_H) \\\n \t\tintl.h prefix.h coretypes.h $(TM_H) cppdefault.h\n@@ -2237,32 +2226,21 @@ gengtype$(build_exeext) : gengtype.o gengtype-lex.o gengtype-yacc.o \\\n gengtype.o : gengtype.c gengtype.h $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n   real.h $(RTL_BASE_H) gtyp-gen.h\n \n-gengtype-lex.o : $(parsedir)/gengtype-lex.c gengtype.h $(parsedir)/gengtype-yacc.c \\\n+gengtype-lex.o : gengtype-lex.c gengtype.h gengtype-yacc.h \\\n   $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H)\n \t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) \\\n-\t  $(parsedir)/gengtype-lex.c $(OUTPUT_OPTION)\n+\t $< $(OUTPUT_OPTION)\n \n-gengtype-yacc.o : $(parsedir)/gengtype-yacc.c gengtype.h $(BCONFIG_H) $(SYSTEM_H) \\\n+gengtype-yacc.o : gengtype-yacc.c gengtype.h $(BCONFIG_H) $(SYSTEM_H) \\\n   coretypes.h $(GTM_H)\n \t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) \\\n-\t  $(parsedir)/gengtype-yacc.c $(OUTPUT_OPTION)\n+\t $< $(OUTPUT_OPTION)\n \n-$(parsedir)/gengtype-lex.c : $(srcdir)/gengtype-lex.l\n-\tif $(FLEX) $(FLEXFLAGS) -og-$$$$ $(srcdir)/gengtype-lex.l; then \\\n-\t  mv -f g-$$$$ $(parsedir)/gengtype-lex.c ; \\\n-\telse \\\n-\t  rm -f g-$$$$ ; \\\n-\t  false ; \\\n-\tfi\n+gengtype-lex.c : gengtype-lex.l\n+\t-$(FLEX) $(FLEXFLAGS) -o$@ $<\n \n-$(parsedir)/gengtype-yacc.c: $(srcdir)/gengtype-yacc.y\n-\tif $(BISON) $(BISONFLAGS) -d -o g-yacc.$$$$.c $(srcdir)/gengtype-yacc.y; then \\\n-\t  mv -f g-yacc.$$$$.h $(parsedir)/gengtype-yacc.h; \\\n-\t  mv -f g-yacc.$$$$.c $(parsedir)/gengtype-yacc.c; \\\n-\telse \\\n-\t  rm -f g-yacc.$$$$.*; \\\n-\t  false; \\\n-\tfi\n+gengtype-yacc.c gengtype-yacc.h: gengtype-yacc.y\n+\t-$(BISON) $(BISONFLAGS) -d -o gengtype-yacc.c $<\n \n genconditions$(build_exeext) : genconditions.o $(BUILD_EARLY_SUPPORT) \\\n   $(BUILD_RTL) $(BUILD_ERRORS) $(BUILD_LIBDEPS)\n@@ -2327,7 +2305,7 @@ intl.o: intl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) intl.h Makefile\n \n # Make-lang.in should add dependencies of po-generated on any generated\n # files which need to be scanned by gettext (usually Yacc-generated parsers).\n-po-generated: $(parsedir)/c-parse.c options.c\n+po-generated: c-parse.c options.c\n \n #\f\n # Remake cpp and protoize.\n@@ -2820,7 +2798,7 @@ distclean: clean lang.distclean\n \t-rm -f Makefile *.oaux\n \t-rm -f gthr-default.h\n \t-rm -f */stage1 */stage2 */stage3 */stage4 */include */stageprofile */stagefeedback\n-\t-rm -f c-parse.output\n+\t-rm -f c-parse.y c-parse.c c-parse.output TAGS */TAGS\n \t-rm -f *.asm\n \t-rm -f site.exp site.bak testsuite/site.exp testsuite/site.bak\n \t-rm -f testsuite/*.log testsuite/*.sum\n@@ -2841,7 +2819,7 @@ maintainer-clean:\n \t@echo 'This command is intended for maintainers to use; it'\n \t@echo 'deletes files that may need special tools to rebuild.'\n \t$(MAKE) lang.maintainer-clean distclean\n-\t-rm -f c-parse.y c-parse.c c-parse.output TAGS\n+\t-rm -f $(srcdir)/c-parse.y $(srcdir)/c-parse.c\n \t-rm -f cpp.??s cpp.*aux\n \t-rm -f gcc.??s gcc.*aux\n \t-rm -f $(docobjdir)/cpp.info* $(docobjdir)/gcc.info* $(docobjdir)/gccint.info*"}, {"sha": "7e7a16a3eef06b43951e2a6010ffc01e31a199d2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03787dfd815361040684ba2b4dab504968730201/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03787dfd815361040684ba2b4dab504968730201/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=03787dfd815361040684ba2b4dab504968730201", "patch": "@@ -1,3 +1,7 @@\n+2004-01-15  Kelley Cook  <kcook@gcc.gnu.org>\n+\n+\t* Make-lang.in (ada.srcextra): Dummy entry.\n+\n 2004-01-14  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* Make-lang.in: Only regenerate texi files if --enable-maintainer-mode."}, {"sha": "626085f7998c8615ebdc394108790604bc1a1ec3", "filename": "gcc/ada/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03787dfd815361040684ba2b4dab504968730201/gcc%2Fada%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03787dfd815361040684ba2b4dab504968730201/gcc%2Fada%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-lang.in?ref=03787dfd815361040684ba2b4dab504968730201", "patch": "@@ -432,6 +432,7 @@ ada.all.cross:\n \n ada.start.encap: \n ada.rest.encap: \n+ada.srcextra:\n \n ada.tags: force\n \tcd $(srcdir)/ada; etags -o TAGS.sub *.c *.h *.ads *.adb; \\"}, {"sha": "34bf28a917f0023c4091b61f3eab0083c8e7edb6", "filename": "gcc/configure", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03787dfd815361040684ba2b4dab504968730201/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03787dfd815361040684ba2b4dab504968730201/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=03787dfd815361040684ba2b4dab504968730201", "patch": "@@ -308,7 +308,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os build_subdir host_subdir target_subdir CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT NO_MINUS_C_MINUS_O OUTPUT_OPTION CPP GNATBIND ac_ct_GNATBIND strict1_warn warn_cflags WERROR nocommon_flag EGREP valgrind_path valgrind_path_defines valgrind_command coverage_flags enable_multilib enable_shared TARGET_SYSTEM_ROOT TARGET_SYSTEM_ROOT_DEFINE CROSS_SYSTEM_HEADER_DIR onestep SET_MAKE AWK LN LN_S RANLIB ac_ct_RANLIB INSTALL INSTALL_PROGRAM INSTALL_DATA make_compare_target have_mktemp_command MAKEINFO BUILD_INFO GENERATED_MANPAGES FLEX BISON stage1_cflags COLLECT2_LIBS GNAT_LIBEXC LDEXP_LIB TARGET_GETGROUPS_T LIBICONV LIBICONV_DEP manext objext extra_modes_file FORBUILD PACKAGE VERSION USE_NLS LIBINTL LIBINTL_DEP INCINTL XGETTEXT GMSGFMT POSUB CATALOGS CROSS ALL SYSTEM_HEADER_DIR inhibit_libc BUILD_PREFIX BUILD_PREFIX_1 CC_FOR_BUILD BUILD_CFLAGS STMP_FIXINC STMP_FIXPROTO libgcc_visibility gthread_flags GGC zlibdir zlibinc MAINT gcc_tooldir dollar slibdir objdir subdirs srcdir docobjdir parsedir all_boot_languages all_compilers all_gtfiles all_gtfiles_files_langs all_gtfiles_files_files all_lang_makefrags all_lang_makefiles all_languages all_stagestuff build_exeext build_install_headers_dir build_xm_file_list build_xm_include_list build_xm_defines check_languages cc_set_by_configure quoted_cc_set_by_configure cpp_install_dir xmake_file tmake_file extra_headers_list extra_objs extra_parts extra_passes extra_programs float_h_file gcc_config_arguments gcc_gxx_include_dir libstdcxx_incdir gcc_version gcc_version_full gcc_version_trigger host_exeext host_extra_gcc_objs host_xm_file_list host_xm_include_list host_xm_defines out_host_hook_obj install lang_opt_files lang_specs_files lang_tree_files local_prefix md_file objc_boehm_gc out_file out_object_file stage_prefix_set_by_configure quoted_stage_prefix_set_by_configure symbolic_link thread_file tm_file_list tm_include_list tm_defines tm_p_file_list tm_p_include_list xm_file_list xm_include_list xm_defines target_noncanonical c_target_objs cxx_target_objs target_cpu_default LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os build_subdir host_subdir target_subdir GENINSRC CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT NO_MINUS_C_MINUS_O OUTPUT_OPTION CPP GNATBIND ac_ct_GNATBIND strict1_warn warn_cflags WERROR nocommon_flag EGREP valgrind_path valgrind_path_defines valgrind_command coverage_flags enable_multilib enable_shared TARGET_SYSTEM_ROOT TARGET_SYSTEM_ROOT_DEFINE CROSS_SYSTEM_HEADER_DIR onestep SET_MAKE AWK LN LN_S RANLIB ac_ct_RANLIB INSTALL INSTALL_PROGRAM INSTALL_DATA make_compare_target have_mktemp_command MAKEINFO BUILD_INFO GENERATED_MANPAGES FLEX BISON stage1_cflags COLLECT2_LIBS GNAT_LIBEXC LDEXP_LIB TARGET_GETGROUPS_T LIBICONV LIBICONV_DEP manext objext extra_modes_file FORBUILD PACKAGE VERSION USE_NLS LIBINTL LIBINTL_DEP INCINTL XGETTEXT GMSGFMT POSUB CATALOGS CROSS ALL SYSTEM_HEADER_DIR inhibit_libc BUILD_PREFIX BUILD_PREFIX_1 CC_FOR_BUILD BUILD_CFLAGS STMP_FIXINC STMP_FIXPROTO libgcc_visibility gthread_flags GGC zlibdir zlibinc MAINT gcc_tooldir dollar slibdir objdir subdirs srcdir docobjdir all_boot_languages all_compilers all_gtfiles all_gtfiles_files_langs all_gtfiles_files_files all_lang_makefrags all_lang_makefiles all_languages all_stagestuff build_exeext build_install_headers_dir build_xm_file_list build_xm_include_list build_xm_defines check_languages cc_set_by_configure quoted_cc_set_by_configure cpp_install_dir xmake_file tmake_file extra_headers_list extra_objs extra_parts extra_passes extra_programs float_h_file gcc_config_arguments gcc_gxx_include_dir libstdcxx_incdir gcc_version gcc_version_full gcc_version_trigger host_exeext host_extra_gcc_objs host_xm_file_list host_xm_include_list host_xm_defines out_host_hook_obj install lang_opt_files lang_specs_files lang_tree_files local_prefix md_file objc_boehm_gc out_file out_object_file stage_prefix_set_by_configure quoted_stage_prefix_set_by_configure symbolic_link thread_file tm_file_list tm_include_list tm_defines tm_p_file_list tm_p_include_list xm_file_list xm_include_list xm_defines target_noncanonical c_target_objs cxx_target_objs target_cpu_default LIBOBJS LTLIBOBJS'\n ac_subst_files='language_hooks'\n \n # Initialize some variables set by options.\n@@ -849,7 +849,10 @@ if test -n \"$ac_init_help\"; then\n Optional Features:\n   --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)\n   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\n-  --enable-generated-files-in-srcdir  Put generated files in source dir\n+  --enable-generated-files-in-srcdir\n+                          put copies of generated files in source dir\n+                          intended for creating source tarballs for users\n+                          without texinfo bison or flex.\n   --enable-werror         enable -Werror in bootstrap stage2 and later\n   --enable-checking=LIST\n \t\t\t  enable expensive run-time checks.  With LIST,\n@@ -1613,17 +1616,28 @@ fi;\n # sources.  Therefore we have --enable-generated-files-in-srcdir to do\n # just that.\n \n-# Check whether --enable-generated-files-in-srcdir or --disable-generated-files-in-srcdir was given.\n+echo \"$as_me:$LINENO: checking whether to place generated files in the source directory\" >&5\n+echo $ECHO_N \"checking whether to place generated files in the source directory... $ECHO_C\" >&6\n+    # Check whether --enable-generated-files-in-srcdir or --disable-generated-files-in-srcdir was given.\n if test \"${enable_generated_files_in_srcdir+set}\" = set; then\n   enableval=\"$enable_generated_files_in_srcdir\"\n-  case ${enableval} in\n-  no)    parsedir='$(objdir)'; docobjdir='$(objdir)/doc';;\n-  *)     parsedir='$(srcdir)'; docobjdir='$(srcdir)/doc';;\n-esac\n+  generated_files_in_srcdir=$enableval\n else\n-  parsedir='$(objdir)'; docobjdir='$(objdir)/doc';\n+  generated_files_in_srcdir=no\n fi;\n \n+echo \"$as_me:$LINENO: result: $generated_files_in_srcdir\" >&5\n+echo \"${ECHO_T}$generated_files_in_srcdir\" >&6\n+\n+if test \"$generated_files_in_srcdir\" = \"yes\"; then\n+  GENINSRC=''\n+  docobjdir='$(srcdir)/doc'\n+else\n+  GENINSRC='#'\n+  docobjdir='$(objdir)/doc'\n+fi\n+\n+\n # -------------------\n # Find default linker\n # -------------------\n@@ -4985,7 +4999,7 @@ if test \"${gcc_cv_prog_makeinfo_modern+set}\" = set; then\n else\n     ac_prog_version=`$MAKEINFO --version 2>&1 |\n                    sed -n 's/^.*GNU texinfo.* \\([0-9][0-9.]*\\).*$/\\1/p'`\n-  echo \"configure:4988: version of makeinfo is $ac_prog_version\" >&5\n+  echo \"configure:5002: version of makeinfo is $ac_prog_version\" >&5\n   case $ac_prog_version in\n     '')     gcc_cv_prog_makeinfo_modern=no;;\n     4.[2-9]*)\n@@ -11435,7 +11449,7 @@ rm -f Make-hooks\n touch Make-hooks\n target_list=\"all.build all.cross start.encap rest.encap tags \\\n \tinstall-normal install-common install-man \\\n-\tuninstall \\\n+\tuninstall srcextra \\\n \tmostlyclean clean distclean maintainer-clean \\\n \tstage1 stage2 stage3 stage4 stageprofile stagefeedback\"\n for t in $target_list\n@@ -11596,7 +11610,6 @@ objdir=`${PWDCMD-pwd}`\n \n \n \n-\n \n \n # Echo link setup.\n@@ -12265,6 +12278,7 @@ s,@target_os@,$target_os,;t t\n s,@build_subdir@,$build_subdir,;t t\n s,@host_subdir@,$host_subdir,;t t\n s,@target_subdir@,$target_subdir,;t t\n+s,@GENINSRC@,$GENINSRC,;t t\n s,@CC@,$CC,;t t\n s,@CFLAGS@,$CFLAGS,;t t\n s,@LDFLAGS@,$LDFLAGS,;t t\n@@ -12352,7 +12366,6 @@ s,@objdir@,$objdir,;t t\n s,@subdirs@,$subdirs,;t t\n s,@srcdir@,$srcdir,;t t\n s,@docobjdir@,$docobjdir,;t t\n-s,@parsedir@,$parsedir,;t t\n s,@all_boot_languages@,$all_boot_languages,;t t\n s,@all_compilers@,$all_compilers,;t t\n s,@all_gtfiles@,$all_gtfiles,;t t"}, {"sha": "cf26ee29f74ce581b93e5327628d05b458c51ab5", "filename": "gcc/configure.ac", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03787dfd815361040684ba2b4dab504968730201/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03787dfd815361040684ba2b4dab504968730201/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=03787dfd815361040684ba2b4dab504968730201", "patch": "@@ -157,13 +157,26 @@ fi])\n # sources.  Therefore we have --enable-generated-files-in-srcdir to do \n # just that.\n \n-AC_ARG_ENABLE(generated-files-in-srcdir, \n-[  --enable-generated-files-in-srcdir  Put generated files in source dir],\n-[case ${enableval} in\n-  no)    parsedir='$(objdir)'; docobjdir='$(objdir)/doc';;\n-  *)     parsedir='$(srcdir)'; docobjdir='$(srcdir)/doc';;\n-esac],\n-[parsedir='$(objdir)'; docobjdir='$(objdir)/doc';])\n+AC_MSG_CHECKING([whether to place generated files in the source directory])\n+  dnl generated-files-in-srcdir is disabled by default\n+  AC_ARG_ENABLE(generated-files-in-srcdir, \n+[  --enable-generated-files-in-srcdir\n+                          put copies of generated files in source dir\n+                          intended for creating source tarballs for users\n+                          without texinfo bison or flex.],\n+      generated_files_in_srcdir=$enableval,\n+      generated_files_in_srcdir=no)\n+\n+AC_MSG_RESULT($generated_files_in_srcdir)\n+\n+if test \"$generated_files_in_srcdir\" = \"yes\"; then\n+  GENINSRC=''\n+  docobjdir='$(srcdir)/doc'\n+else\n+  GENINSRC='#'\n+  docobjdir='$(objdir)/doc'\n+fi\n+AC_SUBST(GENINSRC)\n \n # -------------------\n # Find default linker\n@@ -2845,7 +2858,7 @@ rm -f Make-hooks\n touch Make-hooks\n target_list=\"all.build all.cross start.encap rest.encap tags \\\n \tinstall-normal install-common install-man \\\n-\tuninstall \\\n+\tuninstall srcextra \\\n \tmostlyclean clean distclean maintainer-clean \\\n \tstage1 stage2 stage3 stage4 stageprofile stagefeedback\"\n for t in $target_list\n@@ -2939,7 +2952,6 @@ AC_SUBST(objdir)\n AC_SUBST(subdirs)\n AC_SUBST(srcdir)\n AC_SUBST(docobjdir)\n-AC_SUBST(parsedir)\n AC_SUBST(all_boot_languages)\n AC_SUBST(all_compilers)\n AC_SUBST(all_gtfiles)"}, {"sha": "1a5792e516323d5cae81c24165cdf3b252549fa9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03787dfd815361040684ba2b4dab504968730201/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03787dfd815361040684ba2b4dab504968730201/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=03787dfd815361040684ba2b4dab504968730201", "patch": "@@ -1,3 +1,7 @@\n+2004-01-15  Kelley Cook  <kcook@gcc.gnu.org>\n+\n+\t* Make-lang.in (c++.srcextra): Dummy entry.\n+\n 2004-01-15  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/8856"}, {"sha": "771496b59b2915bbc47a28944f83a815590cc853", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03787dfd815361040684ba2b4dab504968730201/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03787dfd815361040684ba2b4dab504968730201/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=03787dfd815361040684ba2b4dab504968730201", "patch": "@@ -108,6 +108,7 @@ c++.all.build: g++$(exeext)\n c++.all.cross: g++-cross$(exeext)\n c++.start.encap: g++$(exeext)\n c++.rest.encap:\n+c++.srcextra:\n \n c++.tags: force\n \tcd $(srcdir)/cp; etags -o TAGS.sub *.c *.h --language=none \\"}, {"sha": "f36ad626b9bfe17fcf34d1b9fb860c56e296e163", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03787dfd815361040684ba2b4dab504968730201/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03787dfd815361040684ba2b4dab504968730201/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=03787dfd815361040684ba2b4dab504968730201", "patch": "@@ -1,3 +1,7 @@\n+2004-01-15  Kelley Cook  <kcook@gcc.gnu.org>\n+\n+\t* Make-lang.in (f77.srcextra): Dummy entry.\n+\n 2004-01-13  Ian Lance Taylor  <ian@wasabisystems.com>\n \n \tPR fortran/6491"}, {"sha": "8b8de1b08ce5bd96962f8c153975b7c6a5a3d8e8", "filename": "gcc/f/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03787dfd815361040684ba2b4dab504968730201/gcc%2Ff%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03787dfd815361040684ba2b4dab504968730201/gcc%2Ff%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMake-lang.in?ref=03787dfd815361040684ba2b4dab504968730201", "patch": "@@ -141,6 +141,7 @@ f77.all.build: g77$(exeext)\n f77.all.cross: g77-cross$(exeext)\n f77.start.encap: g77$(exeext)\n f77.rest.encap:\n+f77.srcextra: \n \n f77.tags: force\n \tcd $(srcdir)/f; etags -o TAGS.sub *.c *.h; \\"}, {"sha": "213f50e1888fc720a0cebed0bca4c28f2e80dd43", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03787dfd815361040684ba2b4dab504968730201/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03787dfd815361040684ba2b4dab504968730201/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=03787dfd815361040684ba2b4dab504968730201", "patch": "@@ -1,3 +1,11 @@\n+2004-01-15  Kelley Cook  <kcook@gcc.gnu.org>\n+\n+\t* Make-lang.in (parse.c, parse-scan.c): Always build in doc directory.\n+\t(java.srcextra): Copy above back to source directory if requested.\n+\t(po-generated): Delete reference to $(parsedir).\n+\t(java/parse.o, java/parse-scan.o): Delete reference to $(parsedir).\n+\tUse implicit rule.\n+\n 2004-01-14  Jan Hubicka  <jh@suse.cz>\n \n \t* lang.c (java_estimate_num_insns_1): Fix bug in MODIFY_EXPR cost"}, {"sha": "23912e8ad9d9832657f8903ab932404fc6119747", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03787dfd815361040684ba2b4dab504968730201/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03787dfd815361040684ba2b4dab504968730201/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=03787dfd815361040684ba2b4dab504968730201", "patch": "@@ -76,16 +76,16 @@ $(GCJ)-cross$(exeext): $(GCJ)$(exeext)\n \t-rm -f $(GCJ)-cross$(exeext)\n \tcp $(GCJ)$(exeext) $(GCJ)-cross$(exeext)\n \n-po-generated: $(parsedir)/java/parse.c $(parsedir)/java/parse-scan.c\n+po-generated: java/parse.c java/parse-scan.c\n \n-$(parsedir)/java/parse.c: $(srcdir)/java/parse.y\n-\t$(BISON) -t --name-prefix=java_ $(BISONFLAGS) \\\n-\t    -o p$$$$.c $(srcdir)/java/parse.y && \\\n-\tmv -f p$$$$.c $(parsedir)/java/parse.c\n+java.srcextra: java/parse.c java/parse-scan.c\n+\t-cp -p $^ $(srcdir)/java\n \n-$(parsedir)/java/parse-scan.c:  $(srcdir)/java/parse-scan.y\n-\t$(BISON) -t $(BISONFLAGS) -o ps$$$$.c $(srcdir)/java/parse-scan.y && \\\n-\tmv -f ps$$$$.c $(parsedir)/java/parse-scan.c\n+java/parse.c: java/parse.y\n+\t-$(BISON) -t --name-prefix=java_ $(BISONFLAGS) -o $@ $<\n+\n+java/parse-scan.c: java/parse-scan.y\n+\t-$(BISON) -t $(BISONFLAGS) -o $@ $< \n \n $(srcdir)/java/keyword.h: $(srcdir)/java/keyword.gperf\n \t(cd $(srcdir)/java || exit 1; \\\n@@ -228,15 +228,15 @@ install-info:: $(DESTDIR)$(infodir)/gcj.info\n # We just have to delete files specific to us.\n \n java.mostlyclean:\n+\t-rm -f java/parse.c java/parse-scan.c\n \t-rm -f java/*$(objext) $(DEMANGLER_PROG)\n \t-rm -f java/*$(coverageexts)\n \t-rm -f jc1$(exeext) $(GCJ)$(exeext) jvgenmain$(exeext) gcjh$(exeext) jv-scan$(exeext) jcf-dump$(exeext) s-java\n java.clean:\n java.distclean:\n \t-rm -f java/config.status java/Makefile\n-\t-rm -f java/parse.output\n+\t-rm -f java/parse.output java/y.tab.c\n java.maintainer-clean:\n-\t-rm -f $(parsedir)/java/parse.c $(parsedir)/java/parse-scan.c java/parse.output java/y.tab.c\n \t-rm -f $(docobjdir)/gcj.1 $(docobjdir)/gcjh.1\n \t-rm -f $(docobjdir)/jv-scan.1 $(docobjdir)/jcf-dump.1\n \t-rm -f $(docobjdir)/gij.1\n@@ -325,18 +325,11 @@ java/xref.o: java/xref.c java/xref.h $(CONFIG_H) $(JAVA_TREE_H) toplev.h \\\n   $(SYSTEM_H) coretypes.h $(TM_H)\n java/zextract.o: java/zextract.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   java/zipfile.h\n-\n-# parse-scan.o and parse.o compiled from $(parsedir)/java\n-java/parse-scan.o: $(parsedir)/java/parse-scan.c $(CONFIG_H) $(SYSTEM_H) \\\n+java/parse-scan.o: java/parse-scan.c $(CONFIG_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) toplev.h $(JAVA_LEX_C) java/parse.h java/lex.h input.h\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(parsedir)/java/parse-scan.c $(OUTPUT_OPTION)\n-\n-java/parse.o: $(parsedir)/java/parse.c java/jcf-reader.c $(CONFIG_H) $(SYSTEM_H) \\\n+java/parse.o: java/parse.c java/jcf-reader.c $(CONFIG_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) function.h $(JAVA_TREE_H) $(JAVA_LEX_C) java/parse.h \\\n   java/lex.h input.h $(GGC_H) debug.h gt-java-parse.h gtype-java.h\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(parsedir)/java/parse.c $(OUTPUT_OPTION)\n \n # jcf-io.o needs $(ZLIBINC) added to cflags.\n java/jcf-io.o: java/jcf-io.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\"}, {"sha": "70b9e4def22e5dcb9606434f0bbab2670424b11c", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03787dfd815361040684ba2b4dab504968730201/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03787dfd815361040684ba2b4dab504968730201/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=03787dfd815361040684ba2b4dab504968730201", "patch": "@@ -62,35 +62,29 @@ objc/objc-lang.o : objc/objc-lang.c \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) c-tree.h \\\n    c-common.h toplev.h objc/objc-act.h langhooks.h $(LANGHOOKS_DEF_H)\n \n-objc/objc-parse.o : $(parsedir)/objc/objc-parse.c \\\n+objc/objc-parse.o : objc/objc-parse.c \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_TREE_H) \\\n    toplev.h $(GGC_H) c-pragma.h input.h flags.h output.h objc/objc-act.h\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t$(parsedir)/objc/objc-parse.c $(OUTPUT_OPTION)\n \n objc/objc-act.o : objc/objc-act.c \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) $(TM_P_H) \\\n    $(EXPR_H) $(TARGET_H) $(C_TREE_H) diagnostic.h toplev.h flags.h \\\n    objc/objc-act.h input.h function.h output.h debug.h langhooks.h \\\n    $(LANGHOOKS_DEF_H) gt-objc-objc-act.h gtype-objc.h\n \n-po-generated: $(parsedir)/objc/objc-parse.c\n-$(parsedir)/objc/objc-parse.c : $(parsedir)/objc/objc-parse.y\n-\tcd $(parsedir)/objc; \\\n-\tif $(BISON) $(BISONFLAGS) -o op$$$$.c objc-parse.y ; then \\\n-\t  test -f op$$$$.output && mv -f op$$$$.output objc-parse.output ; \\\n-\t  mv -f op$$$$.c objc-parse.c ; \\\n-\telse \\\n-\t  rm -f op$$$$.* ; \\\n-\t  false ; \\\n-\tfi\n-\n-$(parsedir)/objc/objc-parse.y: $(srcdir)/c-parse.in\n+po-generated: objc/objc-parse.c\n+\n+objc.srcextra: objc/objc-parse.c objc/objc-parse.y\n+\t-cp -p $^ $(srcdir)/objc\n+ \n+objc/objc-parse.c : objc/objc-parse.y\n+\t-$(BISON) $(BISONFLAGS) -o $@ $<\n+\n+objc/objc-parse.y: c-parse.in\n \techo '/*WARNING: This file is automatically generated!*/' >tmp-objc-prs.y\n \tsed -e \"/^@@ifc.*/,/^@@end_ifc.*/d\" \\\n-\t  -e \"/^@@ifobjc.*/d\" -e \"/^@@end_ifobjc.*/d\" \\\n-\t  $(srcdir)/c-parse.in >>tmp-objc-prs.y\n-\t$(SHELL) $(srcdir)/move-if-change tmp-objc-prs.y $(parsedir)/objc/objc-parse.y\n+\t    -e \"/^@@ifobjc.*/d\" -e \"/^@@end_ifobjc.*/d\" < $< >>tmp-objc-prs.y\n+\t$(SHELL) $(srcdir)/move-if-change tmp-objc-prs.y $@\n \n gtype-objc.h : s-gtype ; @true\n gt-objc-objc-act.h : s-gtype ; @true\n@@ -127,6 +121,7 @@ objc.uninstall:\n objc.mostlyclean:\n \t-rm -f tmp-objc-prs.y\n \t-rm -f objc/*$(objext) objc/xforward objc/fflags\n+\t-rm -f objc/objc-parse.y objc/objc-parse.c objc/objc-parse.output\n \t-rm -f objc/*$(coverageexts)\n objc.clean: objc.mostlyclean\n \t-rm -rf objc-headers\n@@ -135,8 +130,7 @@ objc.distclean:\n \t-rm -f objc/config.status objc/config.cache\n \t-rm -f objc-parse.output\n objc.maintainer-clean:\n-\t-rm -f $(parsedir)/objc/objc-parse.y\n-\t-rm -f $(parsedir)/objc/objc-parse.c $(parsedir)/objc/objc-parse.output\n+\t-rm -f $(srcdir)/objc/objc-parse.y $(srcdir)/objc/objc-parse.c \n \n #\f\n # Stage hooks:"}, {"sha": "e4281b080a88a476a55c905163a8c890a064e17a", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03787dfd815361040684ba2b4dab504968730201/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03787dfd815361040684ba2b4dab504968730201/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=03787dfd815361040684ba2b4dab504968730201", "patch": "@@ -1,3 +1,12 @@\n+2004-01-15  Kelley Cook  <kcook@gcc.gnu.org>\n+\n+\t* Make-lang.in (TREE_GENERATED): Delete reference to $(parsedir).\n+\t(treelang/parse.o, treelang/lex.o): Look for sources in build \n+\tdirectory.  Use implicit rule.\n+\t(treelang/parse.c, treelang/parse.h treelang/lex.c): Always build in\n+\tdoc directory.\n+\t(treelang.srcextra): Copy above back to source directory if requested.\n+\n 2004-01-07  Zack Weinberg  <zack@codesourcery.com>\n \n \t* parse.y (yyerror): Mark the definition static."}, {"sha": "1cb438ad8eb486e7d583ed4d239a97ac5c366e5c", "filename": "gcc/treelang/Make-lang.in", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03787dfd815361040684ba2b4dab504968730201/gcc%2Ftreelang%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03787dfd815361040684ba2b4dab504968730201/gcc%2Ftreelang%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FMake-lang.in?ref=03787dfd815361040684ba2b4dab504968730201", "patch": "@@ -57,10 +57,7 @@ GCC_EXTRAS = -B./ -B$(build_tooldir)/bin/ -isystem $(build_tooldir)/include\n \n # GCC_FOR_TREELANG = ./xgcc $(GCC_EXTRAS)\n \n-TREE_GENERATED = $(parsedir)/treelang/lex.c $(parsedir)/treelang/parse.c \\\n-  $(parsedir)/treelang/parse.h $(parsedir)/treelang/parse.output \\\n-  $(parsedir)/treelang/TAGS $(parsedir)/treelang/TAGS.sub\n-\n+TREE_GENERATED = lex.c parse.c parse.h parse.output\n TREE_EXES = tree1\n \n #no -Wtraditional warnings, allow long long\n@@ -104,33 +101,30 @@ treelang/tree1.o: treelang/tree1.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n treelang/treetree.o: treelang/treetree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) $(TREE_H) flags.h output.h $(RTL_H) $(GGC_H) toplev.h \\\n   varray.h $(LANGHOOKS_DEF_H) langhooks.h treelang/treelang.h input.h \\\n-  treelang/treetree.h $(parsedir)/treelang/parse.h\n+  treelang/treetree.h treelang/parse.h\n \n treelang/tree-convert.o: treelang/tree-convert.c $(CONFIG_H) $(SYSTEM_H) \\\n   coretypes.h diagnostic.h $(TREE_H) flags.h toplev.h langhooks.h $(TM_H)\n \n-treelang/parse.o: $(parsedir)/treelang/parse.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h $(TM_H) diagnostic.h treelang/treelang.h input.h \\\n-   treelang/treetree.h\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t$(parsedir)/treelang/parse.c $(OUTPUT_OPTION)\n+treelang/parse.o: treelang/parse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+  $(TM_H) diagnostic.h treelang/treelang.h input.h treelang/treetree.h\n \n-treelang/lex.o: $(parsedir)/treelang/lex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+treelang/lex.o: treelang/lex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) diagnostic.h $(TREE_H) treelang/treelang.h input.h \\\n-  $(parsedir)/treelang/parse.h\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t$(parsedir)/treelang/lex.c $(OUTPUT_OPTION)\n+  treelang/parse.h\n \n # generated files the files from lex and yacc are put into the source\n # directory in case someone wants to build but does not have\n # lex/yacc\n \n-$(parsedir)/treelang/lex.c: $(srcdir)/treelang/lex.l\n-\t$(LEX) $(LEXFLAGS) -o$(parsedir)/treelang/lex.c $(srcdir)/treelang/lex.l\n+treelang.srcextra: treelang/parse.c treelang/parse.h treelang/lex.c\n+\t-cp -p $^ $(srcdir)/treelang\n+\n+treelang/lex.c: treelang/lex.l\n+\t-$(FLEX) $(FLEXFLAGS) -o$@ $<\n \n-$(parsedir)/treelang/parse.c $(parsedir)/treelang/parse.h: $(srcdir)/treelang/parse.y\n-\t$(BISON) $(BISONFLAGS) -v --defines \\\n-\t--output=$(parsedir)/treelang/parse.c $(srcdir)/treelang/parse.y\n+treelang/parse.c treelang/parse.h treelang/parse.output: treelang/parse.y\n+\t-$(BISON) $(BISONFLAGS) -v --defines --output=treelang/parse.c $<\n \n # -v\n "}]}