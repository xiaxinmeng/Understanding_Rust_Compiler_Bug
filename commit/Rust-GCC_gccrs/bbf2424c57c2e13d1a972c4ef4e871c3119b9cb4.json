{"sha": "bbf2424c57c2e13d1a972c4ef4e871c3119b9cb4", "node_id": "C_kwDOANBUbNoAKGJiZjI0MjRjNTdjMmUxM2QxYTk3MmM0ZWY0ZTg3MWMzMTE5YjljYjQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-24T18:51:24Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-24T18:51:24Z"}, "message": "c++: outer 'this' leaking into local class [PR106969]\n\nHere when resolving the implicit object for '&wrapped' within the\nlocal class Foo, we expect to obtain a dummy object of type Foo& since\nthere's no 'this' available in this context.  And yet at this point\ncurrent_class_ref still corresponds to the outer class Context (and is\nconst), which confuses maybe_dummy_object into propagating the cv-quals\nof current_class_ref and returning an object of type const Foo&.  Thus\ndecltype(&wrapped) wrongly yields const int* instead of int*.\n\nThe problem ultimately seems to be that the 'this' from the enclosing\nclass appears available for use when parsing the local class, but 'this'\nshouldn't persist across classes like that.  This patch fixes this by\nclearing current_class_ptr/ref before parsing a class definition.\n\nAfter this change, for the test name-clash11.C in C++98 mode we would\nnow complain about an invalid use of 'this' in e.g.\n\n  ASSERT (sizeof (this->A) == 16);\n\ndue to the way the test defines the ASSERT macro via a local class.\nThis patch redefines the macro using a local typedef instead.\n\n\tPR c++/106969\n\ngcc/cp/ChangeLog:\n\n\t* parser.cc (cp_parser_class_specifier): Clear current_class_ptr\n\tand current_class_ref sooner, before parsing a class definition.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/lookup/name-clash11.C: Fix ASSERT macro definition in\n\tC++98 mode.\n\t* g++.dg/lookup/this2.C: New test.", "tree": {"sha": "9814580fb3f609a1ab9359eefa560f76b5badd75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9814580fb3f609a1ab9359eefa560f76b5badd75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbf2424c57c2e13d1a972c4ef4e871c3119b9cb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf2424c57c2e13d1a972c4ef4e871c3119b9cb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbf2424c57c2e13d1a972c4ef4e871c3119b9cb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf2424c57c2e13d1a972c4ef4e871c3119b9cb4/comments", "author": null, "committer": null, "parents": [{"sha": "1f641d6aba284e0c277e6684cd6b2c73591cd14d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f641d6aba284e0c277e6684cd6b2c73591cd14d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f641d6aba284e0c277e6684cd6b2c73591cd14d"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "c54972be85ae60735a7ccf652f20fea8c6235de1", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf2424c57c2e13d1a972c4ef4e871c3119b9cb4/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf2424c57c2e13d1a972c4ef4e871c3119b9cb4/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=bbf2424c57c2e13d1a972c4ef4e871c3119b9cb4", "patch": "@@ -26151,6 +26151,11 @@ cp_parser_class_specifier (cp_parser* parser)\n   saved_in_unbraced_linkage_specification_p\n     = parser->in_unbraced_linkage_specification_p;\n   parser->in_unbraced_linkage_specification_p = false;\n+  /* 'this' from an enclosing non-static member function is unavailable.  */\n+  tree saved_ccp = current_class_ptr;\n+  tree saved_ccr = current_class_ref;\n+  current_class_ptr = NULL_TREE;\n+  current_class_ref = NULL_TREE;\n \n   /* Start the class.  */\n   if (nested_name_specifier_p)\n@@ -26369,8 +26374,6 @@ cp_parser_class_specifier (cp_parser* parser)\n       /* If there are noexcept-specifiers that have not yet been processed,\n \t take care of them now.  Do this before processing NSDMIs as they\n \t may depend on noexcept-specifiers already having been processed.  */\n-      tree save_ccp = current_class_ptr;\n-      tree save_ccr = current_class_ref;\n       FOR_EACH_VEC_SAFE_ELT (unparsed_noexcepts, ix, decl)\n \t{\n \t  tree ctx = DECL_CONTEXT (decl);\n@@ -26496,8 +26499,8 @@ cp_parser_class_specifier (cp_parser* parser)\n \t}\n       vec_safe_truncate (unparsed_contracts, 0);\n \n-      current_class_ptr = save_ccp;\n-      current_class_ref = save_ccr;\n+      current_class_ptr = NULL_TREE;\n+      current_class_ref = NULL_TREE;\n       if (pushed_scope)\n \tpop_scope (pushed_scope);\n \n@@ -26529,6 +26532,8 @@ cp_parser_class_specifier (cp_parser* parser)\n     = saved_num_template_parameter_lists;\n   parser->in_unbraced_linkage_specification_p\n     = saved_in_unbraced_linkage_specification_p;\n+  current_class_ptr = saved_ccp;\n+  current_class_ref = saved_ccr;\n \n   return type;\n }"}, {"sha": "2ae9a65264d9927a771a1cb55ba8b1beb4d51db9", "filename": "gcc/testsuite/g++.dg/lookup/name-clash11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf2424c57c2e13d1a972c4ef4e871c3119b9cb4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf2424c57c2e13d1a972c4ef4e871c3119b9cb4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash11.C?ref=bbf2424c57c2e13d1a972c4ef4e871c3119b9cb4", "patch": "@@ -7,7 +7,7 @@\n #  define ASSERT(e) static_assert (e, #e)\n #else\n #  define ASSERT(e)                                             \\\n-  do { struct S { bool: !!(e); } asrt; (void)&asrt; } while (0)\n+  do { typedef int asrt[bool(e) ? 1 : -1]; } while (0)\n #endif\n \n "}, {"sha": "064c146e93796dc3716d33b2f1239d0bccd33150", "filename": "gcc/testsuite/g++.dg/lookup/this2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf2424c57c2e13d1a972c4ef4e871c3119b9cb4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fthis2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf2424c57c2e13d1a972c4ef4e871c3119b9cb4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fthis2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fthis2.C?ref=bbf2424c57c2e13d1a972c4ef4e871c3119b9cb4", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/106969\n+// { dg-do compile { target c++11 } }\n+\n+struct Context\n+{\n+    void\n+    action() const\n+    {\n+        struct Foo\n+        {\n+            int wrapped;\n+            decltype(&wrapped) get() { return &wrapped; }\n+        } t;\n+\n+        *t.get()= 42; // OK, get() returns int* not const int*\n+\n+        struct Bar\n+        {\n+            using type = decltype(this); // { dg-error \"invalid use of 'this'\" }\n+        };\n+    }\n+};"}]}