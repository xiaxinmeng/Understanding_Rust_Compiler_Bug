{"sha": "a8e8f5c359b655106f4d59afc99315d0bb420040", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThlOGY1YzM1OWI2NTUxMDZmNGQ1OWFmYzk5MzE1ZDBiYjQyMDA0MA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-10-03T14:30:48Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-10-03T14:30:48Z"}, "message": "2002-10-03  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/DatagramPacket.java\n\t(setLength): Fixed typo and be HTML-aware.\n\t* java/net/InetSocketAddress.java\n\t(InetSocketAddress): Correct initialization of hostname, fixed typo.\n\t(equals): Added comment about equality of InetSocketAddress objects.\n\t* java/net/ServerSocket.java\n\t(accept): Added checks.\n\t(isClosed): New stubbed method.\n\t* java/net/SocketOptions.java: Reindention.\n\t* java/net/SocketPermission\n\t(SocketPermission): Documentation fixed.\n\nFrom-SVN: r57776", "tree": {"sha": "083ec10ee6e31b213f92a088bb5e803da3668318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/083ec10ee6e31b213f92a088bb5e803da3668318"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8e8f5c359b655106f4d59afc99315d0bb420040", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8e8f5c359b655106f4d59afc99315d0bb420040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8e8f5c359b655106f4d59afc99315d0bb420040", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8e8f5c359b655106f4d59afc99315d0bb420040/comments", "author": null, "committer": null, "parents": [{"sha": "4c9c9a3da5efd5ae740201250428f7a48a263ac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c9c9a3da5efd5ae740201250428f7a48a263ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c9c9a3da5efd5ae740201250428f7a48a263ac7"}], "stats": {"total": 65, "additions": 46, "deletions": 19}, "files": [{"sha": "61b091524fd958aee87ede56be56e941e4a920d9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e8f5c359b655106f4d59afc99315d0bb420040/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e8f5c359b655106f4d59afc99315d0bb420040/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a8e8f5c359b655106f4d59afc99315d0bb420040", "patch": "@@ -1,4 +1,18 @@\n-2002-09-30  Michael Koch  <konqueror@gmx.de>\n+2002-10-03  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/DatagramPacket.java\n+\t(setLength): Fixed typo and be HTML-aware.\n+\t* java/net/InetSocketAddress.java\n+\t(InetSocketAddress): Correct initialization of hostname, fixed typo.\n+\t(equals): Added comment about equality of InetSocketAddress objects.\n+\t* java/net/ServerSocket.java\n+\t(accept): Added checks.\n+\t(isClosed): New stubbed method.\n+\t* java/net/SocketOptions.java: Reindention.\n+\t* java/net/SocketPermission\n+\t(SocketPermission): Documentation fixed.\n+\t\n+2002-10-03  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/DatagramSocket.java\n \t(receive): Check with SecurityManager AFTER the packet is received,"}, {"sha": "7ca6c51a22bb1eec728955f2f65ac9eaded0bead", "filename": "libjava/java/net/DatagramPacket.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e8f5c359b655106f4d59afc99315d0bb420040/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e8f5c359b655106f4d59afc99315d0bb420040/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramPacket.java?ref=a8e8f5c359b655106f4d59afc99315d0bb420040", "patch": "@@ -402,9 +402,9 @@ public synchronized void setData(byte[] buf, int offset, int length)\n   /**\n    * Sets the length of the data in the buffer. \n    *\n-   * @param length The new length.  (Where len <= buf.length)\n+   * @param length The new length.  (Where len &lt;= buf.length)\n    *\n-   * @exception IllegalArgumentException f the length is negative or\n+   * @exception IllegalArgumentException If the length is negative or\n    * if the length is greater than the packet's data buffer length\n    *\n    * @since 1.1"}, {"sha": "1b740dcc50785c34fc1f8ae7fa7c7a69ea26d384", "filename": "libjava/java/net/InetSocketAddress.java", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e8f5c359b655106f4d59afc99315d0bb420040/libjava%2Fjava%2Fnet%2FInetSocketAddress.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e8f5c359b655106f4d59afc99315d0bb420040/libjava%2Fjava%2Fnet%2FInetSocketAddress.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FInetSocketAddress.java?ref=a8e8f5c359b655106f4d59afc99315d0bb420040", "patch": "@@ -57,7 +57,7 @@ public class InetSocketAddress extends SocketAddress\n    * @param addr Address of the socket\n    * @param port Port if the socket\n    *\n-   * @exception IllegalArgumentException If the port number is illegal\n+   * @exception IllegalArgumentException If the port number is illegel\n    */\n   public InetSocketAddress(InetAddress addr, int port)\n     throws IllegalArgumentException\n@@ -67,15 +67,7 @@ public InetSocketAddress(InetAddress addr, int port)\n   \n     this.addr = addr;\n     this.port = port;\n-\n-    try\n-      {\n-        this.hostname = addr.getHostName ();\n-      }\n-    catch (UnknownHostException e)\n-      {\n-        this.hostname = \"\";\n-      }\n+    this.hostname = addr.getHostName ();\n   }\n \n   /**\n@@ -140,6 +132,9 @@ public InetSocketAddress(String hostname, int port)\n    */\n   public final boolean equals (Object obj)\n   {\n+    // InetSocketAddress objects are equal when addr and port are equal.\n+    // The hostname may differ.\n+\n     if (obj instanceof InetSocketAddress)\n       {\n         InetSocketAddress a = (InetSocketAddress) obj;"}, {"sha": "b7c69913a05b82dd2711d49838848d0705a8ee71", "filename": "libjava/java/net/ServerSocket.java", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e8f5c359b655106f4d59afc99315d0bb420040/libjava%2Fjava%2Fnet%2FServerSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e8f5c359b655106f4d59afc99315d0bb420040/libjava%2Fjava%2Fnet%2FServerSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FServerSocket.java?ref=a8e8f5c359b655106f4d59afc99315d0bb420040", "patch": "@@ -287,6 +287,13 @@ public SocketAddress getLocalSocketAddress()\n    */\n   public Socket accept () throws IOException\n   {\n+    if (impl == null)\n+      throw new IOException (\"Cannot initialize Socket implementation\");\n+\n+    SecurityManager sm = System.getSecurityManager ();\n+    if (sm != null)\n+      sm.checkListen (impl.getLocalPort ());\n+\n     Socket s = new Socket();\n     implAccept (s);\n \n@@ -358,6 +365,17 @@ public boolean isBound()\n     return true;\n   }\n \n+  /**\n+   * Returns true if the socket is closed, otherwise false\n+   * \n+   * @since 1.4\n+   */\n+  public boolean isClosed()\n+  {\n+    // FIXME: implement this\n+    return false;\n+  }\n+\n   /**\n    * Sets the value of SO_TIMEOUT.  A value of 0 implies that SO_TIMEOUT is\n    * disabled (ie, operations never time out).  This is the number of "}, {"sha": "f62afef9aab65f023973568d057cb51e4136c60e", "filename": "libjava/java/net/SocketOptions.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e8f5c359b655106f4d59afc99315d0bb420040/libjava%2Fjava%2Fnet%2FSocketOptions.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e8f5c359b655106f4d59afc99315d0bb420040/libjava%2Fjava%2Fnet%2FSocketOptions.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketOptions.java?ref=a8e8f5c359b655106f4d59afc99315d0bb420040", "patch": "@@ -60,7 +60,7 @@\n    * @since 1.3\n    */\n   static final int SO_KEEPALIVE = 0x8;\n-\t\n+\n   /**\n    * Option id for the SO_LINGER value\n    */\n@@ -106,13 +106,13 @@\n   static final int SO_OOBINLINE = 0x1003; // 4099\n \n   /**\n-    * Option id for the TCP_NODELAY value\n-    */\n+   * Option id for the TCP_NODELAY value\n+   */\n   static final int TCP_NODELAY = 0x01; // 1\n \n   /**\n-    * Options id for the IP_MULTICAST_IF value\n-    */\n+   * Options id for the IP_MULTICAST_IF value\n+   */\n   static final int IP_MULTICAST_IF = 0x10; // 16\n \n   /**"}, {"sha": "0f41395f36ab5846d3c77e82c510bca35b1439d9", "filename": "libjava/java/net/SocketPermission.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e8f5c359b655106f4d59afc99315d0bb420040/libjava%2Fjava%2Fnet%2FSocketPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e8f5c359b655106f4d59afc99315d0bb420040/libjava%2Fjava%2Fnet%2FSocketPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketPermission.java?ref=a8e8f5c359b655106f4d59afc99315d0bb420040", "patch": "@@ -121,7 +121,7 @@ public final class SocketPermission extends Permission\n    * specified host/port combination and actions string.\n    *\n    * @param hostport The hostname/port number combination\n-   * @param perms The actions string\n+   * @param actions The actions string\n    */\n   public SocketPermission(String hostport, String actions)\n   {"}]}