{"sha": "ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQzZjFlZjJiYWZiNmFmNGE0Y2FlYWMwYjIwYzU0ZDQwYTE0YWJkNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-06-08T12:26:40Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-06-08T12:26:40Z"}, "message": "re PR fortran/37336 ([F03] Finish derived-type finalization)\n\n2013-06-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/37336\n        * trans-decl.c (init_intent_out_dt): Call finalizer\n        when approriate.\n\n2013-06-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/37336\n        * gfortran.dg/finalize_10.f90: New.\n        * gfortran.dg/auto_dealloc_2.f90: Update tree-dump.\n        * gfortran.dg/finalize_15.f90: New.\n\nFrom-SVN: r199851", "tree": {"sha": "c3ec4b3ad5d041962706c7e538cac6846564520b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3ec4b3ad5d041962706c7e538cac6846564520b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc6be82ef71280d1df48e57af3a0282d73ab1681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc6be82ef71280d1df48e57af3a0282d73ab1681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc6be82ef71280d1df48e57af3a0282d73ab1681"}], "stats": {"total": 356, "additions": 333, "deletions": 23}, "files": [{"sha": "317d0da72d2e27759bc62ce4f77b632daa48b232", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6", "patch": "@@ -1,3 +1,9 @@\n+2013-06-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/37336\n+\t* trans-decl.c (init_intent_out_dt): Call finalizer\n+\twhen approriate.\n+\n 2013-06-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/57553"}, {"sha": "87652bab8ea2c8bfaa7f788c09d361814e1f1c8a", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 41, "deletions": 22, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6", "patch": "@@ -3501,38 +3501,57 @@ init_intent_out_dt (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t&& !f->sym->attr.pointer\n \t&& f->sym->ts.type == BT_DERIVED)\n       {\n-\tif (f->sym->ts.u.derived->attr.alloc_comp && !f->sym->value)\n+\ttmp = NULL_TREE;\n+\n+\t/* Note: Allocatables are excluded as they are already handled\n+\t   by the caller.  */\n+\tif (!f->sym->attr.allocatable\n+\t    && gfc_is_finalizable (f->sym->ts.u.derived, NULL))\n \t  {\n-\t    tmp = gfc_deallocate_alloc_comp (f->sym->ts.u.derived,\n-\t\t\t\t\t     f->sym->backend_decl,\n-\t\t\t\t\t     f->sym->as ? f->sym->as->rank : 0);\n+\t    stmtblock_t block;\n+\t    gfc_expr *e;\n+\n+\t    gfc_init_block (&block);\n+\t    f->sym->attr.referenced = 1;\n+\t    e = gfc_lval_expr_from_sym (f->sym);\n+\t    gfc_add_finalizer_call (&block, e);\n+\t    gfc_free_expr (e);\n+\t    tmp = gfc_finish_block (&block);\n+\t  }\n \n-\t    if (f->sym->attr.optional\n-\t\t|| f->sym->ns->proc_name->attr.entry_master)\n-\t      {\n-\t\tpresent = gfc_conv_expr_present (f->sym);\n-\t\ttmp = build3_loc (input_location, COND_EXPR, TREE_TYPE (tmp),\n-\t\t\t\t  present, tmp,\n-\t\t\t\t  build_empty_stmt (input_location));\n-\t      }\n+\tif (tmp == NULL_TREE && !f->sym->attr.allocatable\n+\t    && f->sym->ts.u.derived->attr.alloc_comp && !f->sym->value)\n+\t  tmp = gfc_deallocate_alloc_comp (f->sym->ts.u.derived,\n+\t\t\t\t\t   f->sym->backend_decl,\n+\t\t\t\t\t   f->sym->as ? f->sym->as->rank : 0);\n \n-\t    gfc_add_expr_to_block (&init, tmp);\n+\tif (tmp != NULL_TREE && (f->sym->attr.optional\n+\t\t\t\t || f->sym->ns->proc_name->attr.entry_master))\n+\t  {\n+\t    present = gfc_conv_expr_present (f->sym);\n+\t    tmp = build3_loc (input_location, COND_EXPR, TREE_TYPE (tmp),\n+\t\t\t      present, tmp, build_empty_stmt (input_location));\n \t  }\n-       else if (f->sym->value)\n+\n+\tif (tmp != NULL_TREE)\n+\t  gfc_add_expr_to_block (&init, tmp);\n+\telse if (f->sym->value && !f->sym->attr.allocatable)\n \t  gfc_init_default_dt (f->sym, &init, true);\n       }\n     else if (f->sym && f->sym->attr.intent == INTENT_OUT\n \t     && f->sym->ts.type == BT_CLASS\n \t     && !CLASS_DATA (f->sym)->attr.class_pointer\n-\t     && CLASS_DATA (f->sym)->ts.u.derived->attr.alloc_comp)\n+\t     && !CLASS_DATA (f->sym)->attr.allocatable)\n       {\n-\ttmp = gfc_class_data_get (f->sym->backend_decl);\n-\tif (CLASS_DATA (f->sym)->as == NULL)\n-\t  tmp = build_fold_indirect_ref_loc (input_location, tmp);\n-\ttmp = gfc_deallocate_alloc_comp (CLASS_DATA (f->sym)->ts.u.derived,\n-\t\t\t\t\t tmp,\n-\t\t\t\t\t CLASS_DATA (f->sym)->as ?\n-\t\t\t\t\t CLASS_DATA (f->sym)->as->rank : 0);\n+\tstmtblock_t block;\n+\tgfc_expr *e;\n+\n+\tgfc_init_block (&block);\n+\tf->sym->attr.referenced = 1;\n+\te = gfc_lval_expr_from_sym (f->sym);\n+\tgfc_add_finalizer_call (&block, e);\n+\tgfc_free_expr (e);\n+\ttmp = gfc_finish_block (&block);\n \n \tif (f->sym->attr.optional || f->sym->ns->proc_name->attr.entry_master)\n \t  {"}, {"sha": "e4fd6ab508ca17aed34ae0f59e532288f17ed808", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6", "patch": "@@ -1,3 +1,10 @@\n+2013-06-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/37336\n+\t* gfortran.dg/finalize_10.f90: New.\n+\t* gfortran.dg/auto_dealloc_2.f90: Update tree-dump.\n+\t* gfortran.dg/finalize_15.f90: New.\n+\n 2013-06-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/57553"}, {"sha": "04ee7f26997871cb6e9bb0bfeddeea5e8c1b0397", "filename": "gcc/testsuite/gfortran.dg/auto_dealloc_2.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_dealloc_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_dealloc_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_dealloc_2.f90?ref=ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6", "patch": "@@ -26,5 +26,6 @@ subroutine init(x)\n \n end program \n \n-! { dg-final { scan-tree-dump-times \"__builtin_free\" 5 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 4 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"x->_vptr->_final \\\\(\" 1 \"original\" } }\n ! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "f5c0a90c28ea684fce103db3779dcd3f557d2047", "filename": "gcc/testsuite/gfortran.dg/finalize_10.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_10.f90?ref=ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/37336\n+!\n+! Finalize nonallocatable INTENT(OUT)\n+!\n+module m\n+  type t\n+  end type t\n+  type t2\n+  contains\n+    final :: fini\n+  end type t2\n+contains\n+  elemental subroutine fini(var)\n+    type(t2), intent(inout) :: var\n+  end subroutine fini\n+end module m\n+\n+subroutine foo(x,y,aa,bb)\n+  use m\n+  class(t), intent(out) :: x(:),y\n+  type(t2), intent(out) :: aa(:),bb\n+end subroutine foo\n+\n+! Finalize CLASS + set default init\n+! { dg-final { scan-tree-dump-times \"y->_vptr->_final \\\\(&desc.\\[0-9\\]+, y->_vptr->_size, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_memcpy \\\\(\\\\(void .\\\\) y->_data, \\\\(void .\\\\) y->_vptr->_def_init, \\\\(unsigned long\\\\) y->_vptr->_size\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"x->_vptr->_final \\\\(&x->_data, x->_vptr->_size, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"x->_vptr->_copy \\\\(x->_vptr->_def_init, &x->_data\\\\);\" 1 \"original\" } }\n+\n+! FINALIZE TYPE:\n+! { dg-final { scan-tree-dump-times \"parm.\\[0-9\\]+.data = \\\\(void \\\\*\\\\) &\\\\(\\\\*aa.\\[0-9\\]+\\\\)\\\\\\[0\\\\\\];\" 1 \"original\" } }\n+! { dg!final { scan-tree-dump-times \"__final_m_T2 (&parm.\\[0-9\\]+, 0, 0);\" 1 \"original\" } }\n+! { dg!final { scan-tree-dump-times \"desc.\\[0-9\\]+.data = \\\\(void \\\\* restrict\\\\) bb;\" 1 \"original\" } }\n+! { dg!final { scan-tree-dump-times \"__final_m_T2 (&desc.\\[0-9\\]+, 0, 0);\" 1 \"original\" } }\n+\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "3c18b2ae108d850cfd6ba18e607a2eb9d8ba0efd", "filename": "gcc/testsuite/gfortran.dg/finalize_15.f90", "status": "added", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_15.f90?ref=ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6", "patch": "@@ -0,0 +1,238 @@\n+! { dg-do run }\n+!\n+! PR fortran/37336\n+!\n+! Check the scalarizer/array packing with strides\n+! in the finalization wrapper\n+!\n+module m\n+  implicit none\n+\n+  type t1\n+    integer :: i\n+  contains\n+    final :: fini_elem\n+  end type t1\n+\n+  type, extends(t1) :: t1e\n+    integer :: j\n+  contains\n+    final :: fini_elem2\n+  end type t1e\n+\n+  type t2\n+    integer :: i\n+  contains\n+    final :: fini_shape\n+  end type t2\n+\n+  type, extends(t2) :: t2e\n+    integer :: j\n+  contains\n+    final :: fini_shape2\n+  end type t2e\n+\n+  type t3\n+    integer :: i\n+  contains\n+    final :: fini_explicit\n+  end type t3\n+\n+  type, extends(t3) :: t3e\n+    integer :: j\n+  contains\n+    final :: fini_explicit2\n+  end type t3e\n+\n+  integer :: cnt1, cnt1e, cnt2, cnt2e, cnt3, cnt3e\n+\n+contains\n+\n+  impure elemental subroutine fini_elem(x)\n+    type(t1), intent(inout) :: x\n+    integer :: i, j, i2, j2\n+\n+    if (cnt1e /= 5*4) call abort ()\n+    j = mod (cnt1,5)+1\n+    i = cnt1/5 + 1\n+    i2 = (i-1)*3 + 1\n+    j2 = (j-1)*2 + 1\n+    if (x%i /= j2 + 100*i2) call abort ()\n+    x%i = x%i * (-13)\n+    cnt1 = cnt1 + 1\n+  end subroutine fini_elem\n+\n+  impure elemental subroutine fini_elem2(x)\n+    type(t1e), intent(inout) :: x\n+    integer :: i, j, i2, j2\n+\n+    j = mod (cnt1e,5)+1\n+    i = cnt1e/5 + 1\n+    i2 = (i-1)*3 + 1\n+    j2 = (j-1)*2 + 1\n+    if (x%i /= j2 + 100*i2) call abort ()\n+    if (x%j /= (j2 + 100*i2)*100) call abort ()\n+    x%j = x%j * (-13)\n+    cnt1e = cnt1e + 1\n+  end subroutine fini_elem2\n+\n+  subroutine fini_shape(x)\n+    type(t2) :: x(:,:)\n+    if (cnt2e /= 1 .or. cnt2 /= 0) call abort ()\n+    call check_var_sec(x%i, 1)\n+    x%i = x%i * (-13)\n+    cnt2 = cnt2 + 1\n+  end subroutine fini_shape\n+\n+  subroutine fini_shape2(x)\n+    type(t2e) :: x(:,:)\n+    call check_var_sec(x%i, 1)\n+    call check_var_sec(x%j, 100)\n+    x%j = x%j * (-13)\n+    cnt2e = cnt2e + 1\n+  end subroutine fini_shape2\n+\n+  subroutine fini_explicit(x)\n+    type(t3) :: x(5,4)\n+    if (cnt3e /= 1 .or. cnt3 /= 0) call abort ()\n+    call check_var_sec(x%i, 1)\n+    x%i = x%i * (-13)\n+    cnt3 = cnt3 + 1\n+  end subroutine fini_explicit\n+\n+  subroutine fini_explicit2(x)\n+    type(t3e) :: x(5,4)\n+    call check_var_sec(x%i, 1)\n+    call check_var_sec(x%j, 100)\n+    x%j = x%j * (-13)\n+    cnt3e = cnt3e + 1\n+  end subroutine fini_explicit2\n+\n+  subroutine fin_test_1(x)\n+    class(t1), intent(out) :: x(5,4)\n+  end subroutine fin_test_1\n+\n+  subroutine fin_test_2(x)\n+    class(t2), intent(out) :: x(:,:)\n+  end subroutine fin_test_2\n+\n+  subroutine fin_test_3(x)\n+    class(t3), intent(out) :: x(:,:)\n+    if (any (shape(x) /= [5,4])) call abort ()\n+  end subroutine fin_test_3\n+\n+  subroutine check_var_sec(x, factor)\n+    integer :: x(:,:)\n+    integer, value :: factor\n+    integer :: i, j, i2, j2\n+\n+    do i = 1, 4\n+      i2 = (i-1)*3 + 1\n+      do j = 1, 5\n+        j2 = (j-1)*2 + 1\n+        if (x(j,i) /= (j2 + 100*i2)*factor) call abort ()\n+      end do\n+    end do\n+  end subroutine check_var_sec\n+end module m\n+\n+\n+program test\n+  use m\n+  implicit none\n+\n+  class(t1), allocatable :: x(:,:)\n+  class(t2), allocatable :: y(:,:)\n+  class(t3), allocatable :: z(:,:)\n+  integer :: i, j\n+\n+  cnt1 = 0; cnt1e = 0; cnt2 = 0; cnt2e = 0;  cnt3 = 0; cnt3e = 0\n+\n+  allocate (t1e :: x(10,10))\n+  allocate (t2e :: y(10,10))\n+  allocate (t3e :: z(10,10))\n+\n+  select type(x)\n+    type is (t1e)\n+      do i = 1, 10\n+        do j = 1, 10\n+          x(j,i)%i = j + 100*i\n+          x(j,i)%j = (j + 100*i)*100\n+        end do\n+      end do\n+  end select\n+\n+  select type(y)\n+    type is (t2e)\n+      do i = 1, 10\n+        do j = 1, 10\n+          y(j,i)%i = j + 100*i\n+          y(j,i)%j = (j + 100*i)*100\n+        end do\n+      end do\n+  end select\n+\n+  select type(z)\n+    type is (t3e)\n+      do i = 1, 10\n+        do j = 1, 10\n+          z(j,i)%i = j + 100*i\n+          z(j,i)%j = (j + 100*i)*100\n+        end do\n+      end do\n+  end select\n+\n+  if (cnt1 + cnt1e + cnt2 + cnt2e + cnt3 + cnt3e /= 0) call abort()\n+\n+  call fin_test_1(x(::2,::3))\n+  if (cnt1 /= 5*4) call abort ()\n+  if (cnt1e /= 5*4) call abort ()\n+  cnt1 = 0; cnt1e = 0\n+  if (cnt2 + cnt2e + cnt3 + cnt3e /= 0) call abort()\n+\n+  call fin_test_2(y(::2,::3))\n+  if (cnt2 /= 1) call abort ()\n+  if (cnt2e /= 1) call abort ()\n+  cnt2 = 0; cnt2e = 0\n+  if (cnt1 + cnt1e + cnt3 + cnt3e /= 0) call abort()\n+\n+  call fin_test_3(z(::2,::3))\n+  if (cnt3 /= 1) call abort ()\n+  if (cnt3e /= 1) call abort ()\n+  cnt3 = 0; cnt3e = 0\n+  if (cnt1 + cnt1e + cnt2 + cnt2e /= 0) call abort()\n+\n+  select type(x)\n+    type is (t1e)\n+      call check_val(x%i, 1)\n+      call check_val(x%j, 100)\n+  end select\n+\n+  select type(y)\n+    type is (t2e)\n+      call check_val(y%i, 1)\n+      call check_val(y%j, 100)\n+  end select\n+\n+  select type(z)\n+    type is (t3e)\n+      call check_val(z%i, 1)\n+      call check_val(z%j, 100)\n+  end select\n+\n+contains\n+  subroutine check_val(x, factor)\n+    integer :: x(:,:)\n+    integer, value :: factor\n+    integer :: i, j\n+    do i = 1, 10\n+      do j = 1, 10\n+        if (mod (j-1, 2) == 0 .and. mod (i-1, 3) == 0) then\n+          if (x(j,i) /= (j + 100*i)*factor*(-13)) call abort ()\n+        else\n+          if (x(j,i) /= (j + 100*i)*factor) call abort ()\n+        end if\n+      end do\n+    end do\n+  end subroutine check_val\n+end program test"}]}