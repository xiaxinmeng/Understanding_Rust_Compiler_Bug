{"sha": "5002dae3df4efa7a2db1869ae6f8edd329df8486", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAwMmRhZTNkZjRlZmE3YTJkYjE4NjlhZTZmOGVkZDMyOWRmODQ4Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-03-13T11:32:53Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-04-09T16:11:11Z"}, "message": "aarch64: Add a separate \"SVE sizeless type\" attribute\n\nIt's more convenient for a later patch if sizelessness is represented\nseparately from \"SVEness\".  \"SVEness\" is an ABI property that carries\nforward into gimple and beyond, and continues to matter during LTO.\nSizelessness is just a frontend restriction and can be ignored after\nthat.\n\n2020-04-09  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_attribute_table): Add\n\t\"SVE sizeless type\".\n\t* config/aarch64/aarch64-sve-builtins.cc (make_type_sizeless)\n\t(sizeless_type_p): New functions.\n\t(register_builtin_types): Apply make_type_sizeless to the type.\n\t(register_tuple_type): Likewise.\n\t(verify_type_context): Use sizeless_type_p instead of builin_type_p.", "tree": {"sha": "88cdbccf8df8ff193646d93e3aaca775d2ada75b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88cdbccf8df8ff193646d93e3aaca775d2ada75b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5002dae3df4efa7a2db1869ae6f8edd329df8486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5002dae3df4efa7a2db1869ae6f8edd329df8486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5002dae3df4efa7a2db1869ae6f8edd329df8486", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5002dae3df4efa7a2db1869ae6f8edd329df8486/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4d2774c9c1e213cb129c8b81a591297669838c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d2774c9c1e213cb129c8b81a591297669838c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4d2774c9c1e213cb129c8b81a591297669838c8"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "0ee6c7dc574c66b65f35a7b19a4b2a948d3cef7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5002dae3df4efa7a2db1869ae6f8edd329df8486/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5002dae3df4efa7a2db1869ae6f8edd329df8486/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5002dae3df4efa7a2db1869ae6f8edd329df8486", "patch": "@@ -1,3 +1,13 @@\n+2020-04-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_attribute_table): Add\n+\t\"SVE sizeless type\".\n+\t* config/aarch64/aarch64-sve-builtins.cc (make_type_sizeless)\n+\t(sizeless_type_p): New functions.\n+\t(register_builtin_types): Apply make_type_sizeless to the type.\n+\t(register_tuple_type): Likewise.\n+\t(verify_type_context): Use sizeless_type_p instead of builin_type_p.\n+\n 2020-04-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* config/arm/arm_cde.h: Remove `extern \"C\"` when compiling for"}, {"sha": "bcd60e9f838fdc9ad3b8cd11f4fdf65c22bacda3", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5002dae3df4efa7a2db1869ae6f8edd329df8486/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5002dae3df4efa7a2db1869ae6f8edd329df8486/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=5002dae3df4efa7a2db1869ae6f8edd329df8486", "patch": "@@ -585,6 +585,23 @@ lookup_sve_type_attribute (const_tree type)\n   return lookup_attribute (\"SVE type\", TYPE_ATTRIBUTES (type));\n }\n \n+/* Force TYPE to be a sizeless type.  */\n+static void\n+make_type_sizeless (tree type)\n+{\n+  TYPE_ATTRIBUTES (type) = tree_cons (get_identifier (\"SVE sizeless type\"),\n+\t\t\t\t      NULL_TREE, TYPE_ATTRIBUTES (type));\n+}\n+\n+/* Return true if TYPE is a sizeless type.  */\n+static bool\n+sizeless_type_p (const_tree type)\n+{\n+  if (type == error_mark_node)\n+    return NULL_TREE;\n+  return lookup_attribute (\"SVE sizeless type\", TYPE_ATTRIBUTES (type));\n+}\n+\n /* If TYPE is a valid SVE element type, return the corresponding type\n    suffix, otherwise return NUM_TYPE_SUFFIXES.  */\n static type_suffix_index\n@@ -3293,6 +3310,7 @@ register_builtin_types ()\n       TYPE_INDIVISIBLE_P (vectype) = 1;\n       add_sve_type_attribute (vectype, num_zr, num_pr,\n \t\t\t      vector_types[i].mangled_name);\n+      make_type_sizeless (vectype);\n       abi_vector_types[i] = vectype;\n       lang_hooks.types.register_builtin_type (vectype,\n \t\t\t\t\t      vector_types[i].abi_name);\n@@ -3361,6 +3379,7 @@ register_tuple_type (unsigned int num_vectors, vector_type_index type)\n   DECL_FIELD_CONTEXT (field) = tuple_type;\n   TYPE_FIELDS (tuple_type) = field;\n   add_sve_type_attribute (tuple_type, num_vectors, 0, NULL);\n+  make_type_sizeless (tuple_type);\n   layout_type (tuple_type);\n   gcc_assert (VECTOR_MODE_P (TYPE_MODE (tuple_type))\n \t      && TYPE_MODE_RAW (tuple_type) == TYPE_MODE (tuple_type)\n@@ -3578,7 +3597,7 @@ bool\n verify_type_context (location_t loc, type_context_kind context,\n \t\t     const_tree type, bool silent_p)\n {\n-  if (!builtin_type_p (type))\n+  if (!sizeless_type_p (type))\n     return true;\n \n   switch (context)"}, {"sha": "0a467176fd967d7b9a91fef7739f82e994308dd0", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5002dae3df4efa7a2db1869ae6f8edd329df8486/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5002dae3df4efa7a2db1869ae6f8edd329df8486/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=5002dae3df4efa7a2db1869ae6f8edd329df8486", "patch": "@@ -1247,6 +1247,7 @@ static const struct attribute_spec aarch64_attribute_table[] =\n   { \"aarch64_vector_pcs\", 0, 0, false, true,  true,  true,\n \t\t\t  handle_aarch64_vector_pcs_attribute, NULL },\n   { \"SVE type\",\t\t  3, 3, false, true,  false, true,  NULL, NULL },\n+  { \"SVE sizeless type\",  0, 0, false, true,  false, true,  NULL, NULL },\n   { NULL,                 0, 0, false, false, false, false, NULL, NULL }\n };\n "}]}