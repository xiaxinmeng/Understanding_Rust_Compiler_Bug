{"sha": "960b9ae05ac46f51370c30d30575e7a7fe6a3a99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYwYjlhZTA1YWM0NmY1MTM3MGMzMGQzMDU3NWU3YTdmZTZhM2E5OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-07-31T16:40:39Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-07-31T16:40:39Z"}, "message": "Implement \"P0631R4 Math Constants\" for C++20\n\nThe values of the constants are taken from Glibc where the equivalent\nconstant exists, or by rounding the actual constant to the same number\nof digits as the Glibc constants have.\n\n\tP0631R4 Math Constants\n\t* include/Makefile.am: Add new header.\n\t* include/Makefile.in: Regenerate.\n\t* include/precompiled/stdc++.h: Include new header.\n\t* include/std/numbers: New header.\n\t* include/std/version (__cpp_lib_math_constants): Define.\n\t* testsuite/26_numerics/numbers/1.cc: New test.\n\t* testsuite/26_numerics/numbers/2.cc: New test.\n\t* testsuite/26_numerics/numbers/3.cc: New test.\n\t* testsuite/26_numerics/numbers/nonfloat_neg.cc: New test.\n\nFrom-SVN: r273940", "tree": {"sha": "f86baa42ce62743f6c9768e211ae81ec27975b32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f86baa42ce62743f6c9768e211ae81ec27975b32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/960b9ae05ac46f51370c30d30575e7a7fe6a3a99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/960b9ae05ac46f51370c30d30575e7a7fe6a3a99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/960b9ae05ac46f51370c30d30575e7a7fe6a3a99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27e6c1f4069316dcc2d0abc91fe36e36947c099e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e6c1f4069316dcc2d0abc91fe36e36947c099e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27e6c1f4069316dcc2d0abc91fe36e36947c099e"}], "stats": {"total": 346, "additions": 346, "deletions": 0}, "files": [{"sha": "edc551bbee03528608f2496a1fa5ee8b85bc1546", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=960b9ae05ac46f51370c30d30575e7a7fe6a3a99", "patch": "@@ -1,5 +1,16 @@\n 2019-07-31  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tP0631R4 Math Constants\n+\t* include/Makefile.am: Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/precompiled/stdc++.h: Include new header.\n+\t* include/std/numbers: New header.\n+\t* include/std/version (__cpp_lib_math_constants): Define.\n+\t* testsuite/26_numerics/numbers/1.cc: New test.\n+\t* testsuite/26_numerics/numbers/2.cc: New test.\n+\t* testsuite/26_numerics/numbers/3.cc: New test.\n+\t* testsuite/26_numerics/numbers/nonfloat_neg.cc: New test.\n+\n \t* include/std/bit: Add Doxygen comments.\n \n \tPR libstdc++/91308"}, {"sha": "3fe80f32cc4764c7c63b400869e74d63e88d04ec", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=960b9ae05ac46f51370c30d30575e7a7fe6a3a99", "patch": "@@ -57,6 +57,7 @@ std_headers = \\\n \t${std_srcdir}/memory \\\n \t${std_srcdir}/memory_resource \\\n \t${std_srcdir}/mutex \\\n+\t${std_srcdir}/numbers \\\n \t${std_srcdir}/numeric \\\n \t${std_srcdir}/optional \\\n \t${std_srcdir}/ostream \\"}, {"sha": "b675d356cd4988f14f9b6222376273ee4ca7c3be", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=960b9ae05ac46f51370c30d30575e7a7fe6a3a99", "patch": "@@ -401,6 +401,7 @@ std_headers = \\\n \t${std_srcdir}/memory \\\n \t${std_srcdir}/memory_resource \\\n \t${std_srcdir}/mutex \\\n+\t${std_srcdir}/numbers \\\n \t${std_srcdir}/numeric \\\n \t${std_srcdir}/optional \\\n \t${std_srcdir}/ostream \\"}, {"sha": "d62f64b9f6e8f80f5c6675e610c65ff92adc6b46", "filename": "libstdc++-v3/include/precompiled/stdc++.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h?ref=960b9ae05ac46f51370c30d30575e7a7fe6a3a99", "patch": "@@ -136,6 +136,9 @@\n #if __cplusplus > 201703L\n #include <bit>\n // #include <compare>\n+// #include <concepts>\n+#include <numbers>\n+// #include <ranges>\n // #include <span>\n // #include <syncstream>\n #include <version>"}, {"sha": "b8e38dd808049b0bac3c7b3f61f20e13ace0aa18", "filename": "libstdc++-v3/include/std/numbers", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumbers", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumbers", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumbers?ref=960b9ae05ac46f51370c30d30575e7a7fe6a3a99", "patch": "@@ -0,0 +1,142 @@\n+// <numbers> -*- C++ -*-\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file include/numbers\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_NUMBERS\n+#define _GLIBCXX_NUMBERS 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus > 201703L\n+\n+#include <type_traits>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+/** @defgroup math_constants Mathematical constants\n+ *  @ingroup numerics\n+ *  @{\n+ */\n+\n+/// Namespace for mathematical constants\n+namespace numbers\n+{\n+#define __cpp_lib_math_constants 201907L\n+\n+  /// @cond undoc\n+  template<typename _Tp>\n+    using _Enable_if_floating = enable_if_t<is_floating_point_v<_Tp>, _Tp>;\n+  /// @endcond\n+\n+  /// e\n+  template<typename _Tp>\n+    inline constexpr _Tp e_v\n+      = _Enable_if_floating<_Tp>(2.718281828459045235360287471352662498L);\n+\n+  /// log_2 e\n+  template<typename _Tp>\n+    inline constexpr _Tp log2e_v\n+      = _Enable_if_floating<_Tp>(1.442695040888963407359924681001892137L);\n+\n+  /// log_10 e\n+  template<typename _Tp>\n+    inline constexpr _Tp log10e_v\n+      = _Enable_if_floating<_Tp>(0.434294481903251827651128918916605082L);\n+\n+  /// pi\n+  template<typename _Tp>\n+    inline constexpr _Tp pi_v\n+      = _Enable_if_floating<_Tp>(3.141592653589793238462643383279502884L);\n+\n+  /// 1/pi\n+  template<typename _Tp>\n+    inline constexpr _Tp inv_pi_v\n+      = _Enable_if_floating<_Tp>(0.318309886183790671537767526745028724L);\n+\n+  /// 1/sqrt(pi)\n+  template<typename _Tp>\n+    inline constexpr _Tp inv_sqrtpi_v\n+      = _Enable_if_floating<_Tp>(0.564189583547756286948079451560772586L);\n+\n+  /// log_e 2\n+  template<typename _Tp>\n+    inline constexpr _Tp ln2_v\n+      = _Enable_if_floating<_Tp>(0.693147180559945309417232121458176568L);\n+\n+  /// log_e 10\n+  template<typename _Tp>\n+    inline constexpr _Tp ln10_v\n+      = _Enable_if_floating<_Tp>(2.302585092994045684017991454684364208L);\n+\n+  /// sqrt(2)\n+  template<typename _Tp>\n+    inline constexpr _Tp sqrt2_v\n+      = _Enable_if_floating<_Tp>(1.414213562373095048801688724209698079L);\n+\n+  /// sqrt(3)\n+  template<typename _Tp>\n+    inline constexpr _Tp sqrt3_v\n+      = _Enable_if_floating<_Tp>(1.732050807568877293527446341505872367L);\n+\n+  /// 1/sqrt(3)\n+  template<typename _Tp>\n+    inline constexpr _Tp inv_sqrt3_v\n+      = _Enable_if_floating<_Tp>(0.577350269189625764509148780501957456L);\n+\n+  /// The Euler-Mascheroni constant\n+  template<typename _Tp>\n+    inline constexpr _Tp egamma_v\n+      = _Enable_if_floating<_Tp>(0.577215664901532860606512090082402431L);\n+\n+  /// The golden ratio, (1+sqrt(5))/2\n+  template<typename _Tp>\n+    inline constexpr _Tp phi_v\n+      = _Enable_if_floating<_Tp>(1.618033988749894848204586834365638118L);\n+\n+  inline constexpr double e = e_v<double>;\n+  inline constexpr double log2e = log2e_v<double>;\n+  inline constexpr double log10e = log10e_v<double>;\n+  inline constexpr double pi = pi_v<double>;\n+  inline constexpr double inv_pi = inv_pi_v<double>;\n+  inline constexpr double inv_sqrtpi = inv_sqrtpi_v<double>;\n+  inline constexpr double ln2 = ln2_v<double>;\n+  inline constexpr double ln10 = ln10_v<double>;\n+  inline constexpr double sqrt2 = sqrt2_v<double>;\n+  inline constexpr double sqrt3 = sqrt3_v<double>;\n+  inline constexpr double inv_sqrt3 = inv_sqrt3_v<double>;\n+  inline constexpr double egamma = egamma_v<double>;\n+  inline constexpr double phi = phi_v<double>;\n+\n+} // namespace numbers\n+/// @}\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+#endif // C++20\n+#endif // _GLIBCXX_NUMBERS"}, {"sha": "8ebd6ba16823618d107f6bc7c7ac4420c7a34b36", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=960b9ae05ac46f51370c30d30575e7a7fe6a3a99", "patch": "@@ -163,6 +163,7 @@\n # define __cpp_lib_is_constant_evaluated 201811L\n #endif\n #define __cpp_lib_list_remove_return_type 201806L\n+#define __cpp_lib_math_constants 201907L\n #endif // C++2a\n #endif // C++17\n #endif // C++14"}, {"sha": "78d0a5fb26991b1a6173e64d57557fb85d26ce67", "filename": "libstdc++-v3/testsuite/26_numerics/numbers/1.cc", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumbers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumbers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumbers%2F1.cc?ref=960b9ae05ac46f51370c30d30575e7a7fe6a3a99", "patch": "@@ -0,0 +1,99 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <numbers>\n+\n+#ifndef __cpp_lib_math_constants\n+# error \"Feature-test macro for math constants missing in <numbers>\"\n+#elif __cpp_lib_math_constants != 201907L\n+# error \"Feature-test macro for math constants has wrong value in <numbers>\"\n+#endif\n+\n+void\n+test01()\n+{\n+  const double* d1  = &std::numbers::e_v<double>;\n+  const double* d2  = &std::numbers::log2e_v<double>;\n+  const double* d3  = &std::numbers::log10e_v<double>;\n+  const double* d4  = &std::numbers::pi_v<double>;\n+  const double* d5  = &std::numbers::inv_pi_v<double>;\n+  const double* d6  = &std::numbers::inv_sqrtpi_v<double>;\n+  const double* d7  = &std::numbers::ln2_v<double>;\n+  const double* d8  = &std::numbers::ln10_v<double>;\n+  const double* d9  = &std::numbers::sqrt2_v<double>;\n+  const double* d10 = &std::numbers::sqrt3_v<double>;\n+  const double* d11 = &std::numbers::inv_sqrt3_v<double>;\n+  const double* d12 = &std::numbers::egamma_v<double>;\n+  const double* d13 = &std::numbers::phi_v<double>;\n+}\n+\n+void\n+test02()\n+{\n+  const float* d1  = &std::numbers::e_v<float>;\n+  const float* d2  = &std::numbers::log2e_v<float>;\n+  const float* d3  = &std::numbers::log10e_v<float>;\n+  const float* d4  = &std::numbers::pi_v<float>;\n+  const float* d5  = &std::numbers::inv_pi_v<float>;\n+  const float* d6  = &std::numbers::inv_sqrtpi_v<float>;\n+  const float* d7  = &std::numbers::ln2_v<float>;\n+  const float* d8  = &std::numbers::ln10_v<float>;\n+  const float* d9  = &std::numbers::sqrt2_v<float>;\n+  const float* d10 = &std::numbers::sqrt3_v<float>;\n+  const float* d11 = &std::numbers::inv_sqrt3_v<float>;\n+  const float* d12 = &std::numbers::egamma_v<float>;\n+  const float* d13 = &std::numbers::phi_v<float>;\n+}\n+\n+void\n+test03()\n+{\n+  const long double* d1  = &std::numbers::e_v<long double>;\n+  const long double* d2  = &std::numbers::log2e_v<long double>;\n+  const long double* d3  = &std::numbers::log10e_v<long double>;\n+  const long double* d4  = &std::numbers::pi_v<long double>;\n+  const long double* d5  = &std::numbers::inv_pi_v<long double>;\n+  const long double* d6  = &std::numbers::inv_sqrtpi_v<long double>;\n+  const long double* d7  = &std::numbers::ln2_v<long double>;\n+  const long double* d8  = &std::numbers::ln10_v<long double>;\n+  const long double* d9  = &std::numbers::sqrt2_v<long double>;\n+  const long double* d10 = &std::numbers::sqrt3_v<long double>;\n+  const long double* d11 = &std::numbers::inv_sqrt3_v<long double>;\n+  const long double* d12 = &std::numbers::egamma_v<long double>;\n+  const long double* d13 = &std::numbers::phi_v<long double>;\n+}\n+\n+void\n+test04()\n+{\n+  static_assert(std::numbers::e == std::numbers::e_v<double>);\n+  static_assert(std::numbers::log2e == std::numbers::log2e_v<double>);\n+  static_assert(std::numbers::log10e == std::numbers::log10e_v<double>);\n+  static_assert(std::numbers::pi == std::numbers::pi_v<double>);\n+  static_assert(std::numbers::inv_pi == std::numbers::inv_pi_v<double>);\n+  static_assert(std::numbers::inv_sqrtpi == std::numbers::inv_sqrtpi_v<double>);\n+  static_assert(std::numbers::ln2 == std::numbers::ln2_v<double>);\n+  static_assert(std::numbers::ln10 == std::numbers::ln10_v<double>);\n+  static_assert(std::numbers::sqrt2 == std::numbers::sqrt2_v<double>);\n+  static_assert(std::numbers::sqrt3 == std::numbers::sqrt3_v<double>);\n+  static_assert(std::numbers::inv_sqrt3 == std::numbers::inv_sqrt3_v<double>);\n+  static_assert(std::numbers::egamma == std::numbers::egamma_v<double>);\n+  static_assert(std::numbers::phi == std::numbers::phi_v<double>);\n+}"}, {"sha": "a363bce9dab16e2e67f013f6975dfdcb5a9b9534", "filename": "libstdc++-v3/testsuite/26_numerics/numbers/2.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumbers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumbers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumbers%2F2.cc?ref=960b9ae05ac46f51370c30d30575e7a7fe6a3a99", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_math_constants\n+# error \"Feature-test macro for math constants missing in <version>\"\n+#elif __cpp_lib_math_constants != 201907L\n+# error \"Feature-test macro for math constants has wrong value in <version>\"\n+#endif"}, {"sha": "56f4c953a8569582717f8c26f2a1bc3a9049db92", "filename": "libstdc++-v3/testsuite/26_numerics/numbers/3.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumbers%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumbers%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumbers%2F3.cc?ref=960b9ae05ac46f51370c30d30575e7a7fe6a3a99", "patch": "@@ -0,0 +1,25 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <numbers>\n+\n+struct D { double val; };\n+template<> inline constexpr D std::numbers::pi_v<D> = D{std::numbers::pi};\n+static_assert( std::numbers::pi_v<D>.val == std::numbers::pi );"}, {"sha": "a83f55efc89077a410ecc52351d078e24fdea79d", "filename": "libstdc++-v3/testsuite/26_numerics/numbers/nonfloat_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumbers%2Fnonfloat_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960b9ae05ac46f51370c30d30575e7a7fe6a3a99/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumbers%2Fnonfloat_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumbers%2Fnonfloat_neg.cc?ref=960b9ae05ac46f51370c30d30575e7a7fe6a3a99", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <numbers>\n+\n+int\n+test01()\n+{\n+  return std::numbers::pi_v<int>; // { dg-error \"here\" }\n+}\n+\n+void\n+test02()\n+{\n+  struct S { };\n+  auto s = std::numbers::egamma_v<S>; // { dg-error \"here\" }\n+}\n+\n+// { dg-prune-output \"no type named 'type' in\" }"}]}