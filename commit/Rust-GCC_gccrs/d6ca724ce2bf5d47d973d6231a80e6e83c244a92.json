{"sha": "d6ca724ce2bf5d47d973d6231a80e6e83c244a92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZjYTcyNGNlMmJmNWQ0N2Q5NzNkNjIzMWE4MGU2ZTgzYzI0NGE5Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2008-05-26T11:43:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-26T11:43:27Z"}, "message": "* ceinfo.adb, csinfo.adb: Remove warnings. Update headers.\n\nFrom-SVN: r135912", "tree": {"sha": "e358af0508ee263dd69fcb24e4ae06e18df19257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e358af0508ee263dd69fcb24e4ae06e18df19257"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6ca724ce2bf5d47d973d6231a80e6e83c244a92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ca724ce2bf5d47d973d6231a80e6e83c244a92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6ca724ce2bf5d47d973d6231a80e6e83c244a92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ca724ce2bf5d47d973d6231a80e6e83c244a92/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c654b659dd6cc9475bf485794eb2f95234674030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c654b659dd6cc9475bf485794eb2f95234674030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c654b659dd6cc9475bf485794eb2f95234674030"}], "stats": {"total": 143, "additions": 76, "deletions": 67}, "files": [{"sha": "1d114c2d2c3272bc11b8c16ee49c6fd914fdfbf3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ca724ce2bf5d47d973d6231a80e6e83c244a92/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ca724ce2bf5d47d973d6231a80e6e83c244a92/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d6ca724ce2bf5d47d973d6231a80e6e83c244a92", "patch": "@@ -1,3 +1,7 @@\n+2008-05-26  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* ceinfo.adb, csinfo.adb: Remove warnings. Update headers.\n+\n 2008-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gigi.h (gigi): Remove bogus ATTRIBUTE_UNUSED marker."}, {"sha": "c88b642e4448b0eaa81ea8c1c6406322107fb401", "filename": "gcc/ada/ceinfo.adb", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ca724ce2bf5d47d973d6231a80e6e83c244a92/gcc%2Fada%2Fceinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ca724ce2bf5d47d973d6231a80e6e83c244a92/gcc%2Fada%2Fceinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fceinfo.adb?ref=d6ca724ce2bf5d47d973d6231a80e6e83c244a92", "patch": "@@ -6,18 +6,17 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---             Copyright (C) 1998 Free Software Foundation, Inc.            --\n+--          Copyright (C) 1998-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n -- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n -- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n -- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n -- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n--- Boston, MA 02110-1301, USA.                                              --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n --                                                                          --\n -- GNAT was originally developed  by the GNAT team at  New York University. --\n -- Extensive contributions were provided by Ada Core Technologies Inc.      --\n@@ -43,35 +42,34 @@ procedure CEinfo is\n    Infil  : File_Type;\n    Lineno : Natural := 0;\n \n-   Err : exception;\n-   --  Raised on fatal error\n-\n    Fieldnm    : VString;\n    Accessfunc : VString;\n    Line       : VString;\n \n    Fields : GNAT.Spitbol.Table_VString.Table (500);\n    --  Maps field names to underlying field access name\n \n-   UC : Pattern := Any (\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n+   UC : constant Pattern := Any (\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n \n-   Fnam : Pattern := (UC & Break (' ')) * Fieldnm;\n+   Fnam : constant Pattern := (UC & Break (' ')) * Fieldnm;\n \n-   Field_Def : Pattern := \"--    \" & Fnam & \" (\" & Break (')') * Accessfunc;\n+   Field_Def : constant Pattern :=\n+                 \"--    \" & Fnam & \" (\" & Break (')') * Accessfunc;\n \n-   Field_Ref : Pattern := \"   --    \" & Fnam & Break ('(') & Len (1) &\n-                            Break (')') * Accessfunc;\n+   Field_Ref : constant Pattern :=\n+                 \"   --    \" & Fnam & Break ('(') & Len (1) &\n+                   Break (')') * Accessfunc;\n \n-   Field_Com : Pattern := \"   --    \" & Fnam & Span (' ') &\n-                            (Break (' ') or Rest) * Accessfunc;\n+   Field_Com : constant Pattern := \"   --    \" & Fnam & Span (' ') &\n+                                     (Break (' ') or Rest) * Accessfunc;\n \n-   Func_Hedr : Pattern := \"   function \" & Fnam;\n+   Func_Hedr : constant Pattern := \"   function \" & Fnam;\n \n-   Func_Retn : Pattern := \"      return \" & Break (' ') * Accessfunc;\n+   Func_Retn : constant Pattern := \"      return \" & Break (' ') * Accessfunc;\n \n-   Proc_Hedr : Pattern := \"   procedure \" & Fnam;\n+   Proc_Hedr : constant Pattern := \"   procedure \" & Fnam;\n \n-   Proc_Setf : Pattern := \"      Set_\" & Break (' ') * Accessfunc;\n+   Proc_Setf : constant Pattern := \"      Set_\" & Break (' ') * Accessfunc;\n \n    procedure Next_Line;\n    --  Read next line trimmed from Infil into Line and bump Lineno"}, {"sha": "9d8b16b572cbb4a0d5b6535263b6b284259a68ab", "filename": "gcc/ada/csinfo.adb", "status": "modified", "additions": 55, "deletions": 48, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ca724ce2bf5d47d973d6231a80e6e83c244a92/gcc%2Fada%2Fcsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ca724ce2bf5d47d973d6231a80e6e83c244a92/gcc%2Fada%2Fcsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcsinfo.adb?ref=d6ca724ce2bf5d47d973d6231a80e6e83c244a92", "patch": "@@ -6,18 +6,17 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n -- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n -- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n -- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n -- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n--- Boston, MA 02110-1301, USA.                                              --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n --                                                                          --\n -- GNAT was originally developed  by the GNAT team at  New York University. --\n -- Extensive contributions were provided by Ada Core Technologies Inc.      --\n@@ -55,7 +54,7 @@ procedure CSinfo is\n    Done : exception;\n    --  Raised after error is found to terminate run\n \n-   WSP : Pattern := Span (' ' & ASCII.HT);\n+   WSP : constant Pattern := Span (' ' & ASCII.HT);\n \n    Fields   : TV.Table (300);\n    Fields1  : TV.Table (300);\n@@ -87,50 +86,56 @@ procedure CSinfo is\n    Flags : TV.Table (20);\n    --  Maps flag numbers to letters\n \n-   N_Fields : Pattern := BreakX (\"JL\");\n-   E_Fields : Pattern := BreakX (\"5EFGHIJLOP\");\n-   U_Fields : Pattern := BreakX (\"1345EFGHIJKLOPQ\");\n-   B_Fields : Pattern := BreakX (\"12345EFGHIJKLOPQ\");\n+   N_Fields : constant Pattern := BreakX (\"JL\");\n+   E_Fields : constant Pattern := BreakX (\"5EFGHIJLOP\");\n+   U_Fields : constant Pattern := BreakX (\"1345EFGHIJKLOPQ\");\n+   B_Fields : constant Pattern := BreakX (\"12345EFGHIJKLOPQ\");\n \n    Line : VString;\n    Bad  : Boolean;\n \n-   Field       : VString := Nul;\n+   Field       : constant VString := Nul;\n    Fields_Used : VString := Nul;\n-   Name        : VString := Nul;\n-   Next        : VString := Nul;\n+   Name        : constant VString := Nul;\n+   Next        : constant VString := Nul;\n    Node        : VString := Nul;\n    Ref         : VString := Nul;\n-   Synonym     : VString := Nul;\n-   Nxtref      : VString := Nul;\n+   Synonym     : constant VString := Nul;\n+   Nxtref      : constant VString := Nul;\n \n    Which_Field : aliased VString := Nul;\n \n-   Node_Search : Pattern := WSP & \"--  N_\" & Rest * Node;\n-   Break_Punc  : Pattern := Break (\" .,\");\n-   Plus_Binary : Pattern := WSP & \"--  plus fields for binary operator\";\n-   Plus_Unary  : Pattern := WSP & \"--  plus fields for unary operator\";\n-   Plus_Expr   : Pattern := WSP & \"--  plus fields for expression\";\n-   Break_Syn   : Pattern := WSP &  \"--  \" & Break (' ') * Synonym &\n-                              \" (\" & Break (')') * Field;\n-   Break_Field : Pattern := BreakX ('-') * Field;\n-   Get_Field   : Pattern := BreakX (Decimal_Digit_Set) &\n-                              Span (Decimal_Digit_Set) * Which_Field;\n-   Break_WFld  : Pattern := Break (Which_Field'Access);\n-   Get_Funcsyn : Pattern := WSP & \"function \" & Rest * Synonym;\n-   Extr_Field  : Pattern := BreakX ('-') & \"-- \" & Rest * Field;\n-   Get_Procsyn : Pattern := WSP & \"procedure Set_\" & Rest * Synonym;\n-   Get_Inline  : Pattern := WSP & \"pragma Inline (\" & Break (')') * Name;\n-   Set_Name    : Pattern := \"Set_\" & Rest * Name;\n-   Func_Rest   : Pattern := \"   function \" & Rest * Synonym;\n-   Get_Nxtref  : Pattern := Break (',') * Nxtref & ',';\n-   Test_Syn    : Pattern := Break ('=') & \"= N_\" &\n-                              (Break (\" ,)\") or Rest) * Next;\n-   Chop_Comma  : Pattern := BreakX (',') * Next;\n-   Return_Fld  : Pattern := WSP & \"return \" & Break (' ') * Field;\n-   Set_Syn     : Pattern := \"   procedure Set_\" & Rest * Synonym;\n-   Set_Fld     : Pattern := WSP & \"Set_\" & Break (' ') * Field & \" (N, Val)\";\n-   Break_With  : Pattern := Break ('_') ** Field & \"_With_Parent\";\n+   Node_Search : constant Pattern := WSP & \"--  N_\" & Rest * Node;\n+   Break_Punc  : constant Pattern := Break (\" .,\");\n+   Plus_Binary : constant Pattern := WSP\n+                                     & \"--  plus fields for binary operator\";\n+   Plus_Unary  : constant Pattern := WSP\n+                                     & \"--  plus fields for unary operator\";\n+   Plus_Expr   : constant Pattern := WSP\n+                                     & \"--  plus fields for expression\";\n+   Break_Syn   : constant Pattern := WSP &  \"--  \"\n+                                     & Break (' ') * Synonym\n+                                     & \" (\" & Break (')') * Field;\n+   Break_Field : constant Pattern := BreakX ('-') * Field;\n+   Get_Field   : constant Pattern := BreakX (Decimal_Digit_Set)\n+                                     & Span (Decimal_Digit_Set) * Which_Field;\n+   Break_WFld  : constant Pattern := Break (Which_Field'Access);\n+   Get_Funcsyn : constant Pattern := WSP & \"function \" & Rest * Synonym;\n+   Extr_Field  : constant Pattern := BreakX ('-') & \"-- \" & Rest * Field;\n+   Get_Procsyn : constant Pattern := WSP & \"procedure Set_\" & Rest * Synonym;\n+   Get_Inline  : constant Pattern := WSP & \"pragma Inline (\"\n+                                     & Break (')') * Name;\n+   Set_Name    : constant Pattern := \"Set_\" & Rest * Name;\n+   Func_Rest   : constant Pattern := \"   function \" & Rest * Synonym;\n+   Get_Nxtref  : constant Pattern := Break (',') * Nxtref & ',';\n+   Test_Syn    : constant Pattern := Break ('=') & \"= N_\"\n+                                     & (Break (\" ,)\") or Rest) * Next;\n+   Chop_Comma  : constant Pattern := BreakX (',') * Next;\n+   Return_Fld  : constant Pattern := WSP & \"return \" & Break (' ') * Field;\n+   Set_Syn     : constant Pattern := \"   procedure Set_\" & Rest * Synonym;\n+   Set_Fld     : constant Pattern := WSP & \"Set_\" & Break (' ') * Field\n+                                     & \" (N, Val)\";\n+   Break_With  : constant Pattern := Break ('_') ** Field & \"_With_Parent\";\n \n    type VStringA is array (Natural range <>) of VString;\n \n@@ -187,9 +192,9 @@ begin\n    Set (Flags, \"17\", V (\"Q\"));\n    Set (Flags, \"18\", V (\"R\"));\n \n-   --  Special fields table. The following fields are not recorded or checked\n-   --  by Csinfo, since they are specially handled. This means that both the\n-   --  field definitions, and the corresponding subprograms are ignored.\n+   --  Special fields table. The following names are not recorded or checked\n+   --  by Csinfo, since they are specially handled. This means that any field\n+   --  definition or subprogram with a matching name is ignored.\n \n    Set (Special, \"Analyzed\",                  True);\n    Set (Special, \"Assignment_OK\",             True);\n@@ -214,7 +219,9 @@ begin\n    Set (Special, \"Is_Static_Expression\",      True);\n    Set (Special, \"Left_Opnd\",                 True);\n    Set (Special, \"Must_Not_Freeze\",           True);\n+   Set (Special, \"Nkind_In\",                  True);\n    Set (Special, \"Parens\",                    True);\n+   Set (Special, \"Pragma_Name\",               True);\n    Set (Special, \"Raises_Constraint_Error\",   True);\n    Set (Special, \"Right_Opnd\",                True);\n \n@@ -334,7 +341,7 @@ begin\n    Put_Line (\"Check for missing functions\");\n \n    declare\n-      List : TV.Table_Array := Convert_To_Array (Fields1);\n+      List : constant TV.Table_Array := Convert_To_Array (Fields1);\n \n    begin\n       if List'Length > 0 then\n@@ -385,7 +392,7 @@ begin\n    Put_Line (\"Check for missing set procedures\");\n \n    declare\n-      List : TV.Table_Array := Convert_To_Array (Fields1);\n+      List : constant TV.Table_Array := Convert_To_Array (Fields1);\n \n    begin\n       if List'Length > 0 then\n@@ -424,7 +431,7 @@ begin\n    Put_Line (\"Check no pragma Inlines were omitted\");\n \n    declare\n-      List : TV.Table_Array := Convert_To_Array (Fields);\n+      List : constant TV.Table_Array := Convert_To_Array (Fields);\n       Nxt  : VString := Nul;\n \n    begin\n@@ -523,7 +530,7 @@ begin\n    Put_Line (\"Check for missing functions in body\");\n \n    declare\n-      List : TV.Table_Array := Convert_To_Array (Refs);\n+      List : constant TV.Table_Array := Convert_To_Array (Refs);\n \n    begin\n       if List'Length /= 0 then\n@@ -613,7 +620,7 @@ begin\n    Put_Line (\"Check for missing set procedures in body\");\n \n    declare\n-      List : TV.Table_Array := Convert_To_Array (Fields1);\n+      List : constant TV.Table_Array := Convert_To_Array (Fields1);\n \n    begin\n       if List'Length /= 0 then"}]}