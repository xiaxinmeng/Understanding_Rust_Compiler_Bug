{"sha": "bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIxMGI4OTE4MWQ0YWQ0OGU1ZGQ4MmNmOWQ3Yzg0NWM2MjA2YzA4Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T16:47:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T16:47:55Z"}, "message": "[multiple changes]\n\n2010-06-22  Robert Dewar  <dewar@adacore.com>\n\n\t* s-rannum.adb: Minor reformatting.\n\n2010-06-22  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_aux.adb, sem_aux.ads, sem_util.adb, sem_util.ads, sem_elim.adb,\n\texp_cg.adb: Minor code reorganization: Move routine Ultimate_Alias from\n\tpackage Sem_Util to package Sem_Aux.\n\n2010-06-22  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.adb (Make_Secondary_DT, Make_DT): Minor code cleanup:\n\tremove useless restriction on imported routines when building the\n\tdispatch tables.\n\n2010-06-22  Robert Dewar  <dewar@adacore.com>\n\n\t* cstand.adb (Create_Standard): Set Has_Pragma_Pack for standard string\n\ttypes.\n\n2010-06-22  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch4.adb (Collect_Generic_Type_Ops): Protect code that handles\n\tgeneric subprogram declarations to ensure proper context. Add missing\n\tsupport for generic actuals.\n\t(Try_Primitive_Operation): Add missing support for concurrent types that\n\thave no Corresponding_Record_Type. Required to diagnose errors compiling\n\tgenerics or when compiling with no code generation (-gnatc).\n\t* sem_ch9.adb (Analyze_Protected_Type, Analyze_Task_Type): Do not build\n\tthe corresponding record type.\n\t* sem_disp.ads, sem_disp.adb (Check_Dispatching_Operation): Complete\n\tdocumentation. Do minimum decoration when processing a primitive of a\n\tconcurrent tagged type that covers interfaces. Required to diagnose\n\terrors in the Object.Operation notation compiling generics or under\n\t-gnatc.\n\t* exp_ch9.ads, exp_ch9.adb (Build_Corresponding_Record): Add missing\n\tpropagation of attribute Interface_List to the corresponding record.\n\t(Expand_N_Task_Type_Declaration): Code cleanup.\n\t(Expand_N_Protected_Type_Declaration): Code cleanup.\n\nFrom-SVN: r161203", "tree": {"sha": "a0b699e8fbdb91e9fc22ff301c86606763f20f0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0b699e8fbdb91e9fc22ff301c86606763f20f0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/comments", "author": null, "committer": null, "parents": [{"sha": "5bec9717c3c211d060c7f83dab629157755469f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bec9717c3c211d060c7f83dab629157755469f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bec9717c3c211d060c7f83dab629157755469f8"}], "stats": {"total": 323, "additions": 191, "deletions": 132}, "files": [{"sha": "5f3487b1774133e95434dc6fb4aeeacce27bfb22", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "patch": "@@ -1,3 +1,44 @@\n+2010-06-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-rannum.adb: Minor reformatting.\n+\n+2010-06-22  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_aux.adb, sem_aux.ads, sem_util.adb, sem_util.ads, sem_elim.adb,\n+\texp_cg.adb: Minor code reorganization: Move routine Ultimate_Alias from\n+\tpackage Sem_Util to package Sem_Aux.\n+\n+2010-06-22  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Make_Secondary_DT, Make_DT): Minor code cleanup:\n+\tremove useless restriction on imported routines when building the\n+\tdispatch tables.\n+\n+2010-06-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* cstand.adb (Create_Standard): Set Has_Pragma_Pack for standard string\n+\ttypes.\n+\n+2010-06-22  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch4.adb (Collect_Generic_Type_Ops): Protect code that handles\n+\tgeneric subprogram declarations to ensure proper context. Add missing\n+\tsupport for generic actuals.\n+\t(Try_Primitive_Operation): Add missing support for concurrent types that\n+\thave no Corresponding_Record_Type. Required to diagnose errors compiling\n+\tgenerics or when compiling with no code generation (-gnatc).\n+\t* sem_ch9.adb (Analyze_Protected_Type, Analyze_Task_Type): Do not build\n+\tthe corresponding record type.\n+\t* sem_disp.ads, sem_disp.adb (Check_Dispatching_Operation): Complete\n+\tdocumentation. Do minimum decoration when processing a primitive of a\n+\tconcurrent tagged type that covers interfaces. Required to diagnose\n+\terrors in the Object.Operation notation compiling generics or under\n+\t-gnatc.\n+\t* exp_ch9.ads, exp_ch9.adb (Build_Corresponding_Record): Add missing\n+\tpropagation of attribute Interface_List to the corresponding record.\n+\t(Expand_N_Task_Type_Declaration): Code cleanup.\n+\t(Expand_N_Protected_Type_Declaration): Code cleanup.\n+\n 2010-06-22  Matthew Heaney  <heaney@adacore.com>\n \n \t* a-convec.adb, a-coinve.adb: Removed 64-bit types Int and UInt."}, {"sha": "7670181306716c04a247ad361d9ff13f1028ddbc", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -688,12 +688,13 @@ package body CStand is\n       Append (Identifier_For (S_Positive), Subtype_Marks (Tdef_Node));\n       Set_Type_Definition (Parent (Standard_String), Tdef_Node);\n \n-      Set_Ekind          (Standard_String, E_String_Type);\n-      Set_Etype          (Standard_String, Standard_String);\n-      Set_Component_Type (Standard_String, Standard_Character);\n-      Set_Component_Size (Standard_String, Uint_8);\n-      Init_Size_Align    (Standard_String);\n-      Set_Alignment      (Standard_String, Uint_1);\n+      Set_Ekind           (Standard_String, E_String_Type);\n+      Set_Etype           (Standard_String, Standard_String);\n+      Set_Component_Type  (Standard_String, Standard_Character);\n+      Set_Component_Size  (Standard_String, Uint_8);\n+      Init_Size_Align     (Standard_String);\n+      Set_Alignment       (Standard_String, Uint_1);\n+      Set_Has_Pragma_Pack (Standard_String, True);\n \n       --  On targets where a storage unit is larger than a byte (such as AAMP),\n       --  pragma Pack has a real effect on the representation of type String,\n@@ -731,11 +732,12 @@ package body CStand is\n       Append (Identifier_For (S_Positive), Subtype_Marks (Tdef_Node));\n       Set_Type_Definition (Parent (Standard_Wide_String), Tdef_Node);\n \n-      Set_Ekind          (Standard_Wide_String, E_String_Type);\n-      Set_Etype          (Standard_Wide_String, Standard_Wide_String);\n-      Set_Component_Type (Standard_Wide_String, Standard_Wide_Character);\n-      Set_Component_Size (Standard_Wide_String, Uint_16);\n-      Init_Size_Align    (Standard_Wide_String);\n+      Set_Ekind           (Standard_Wide_String, E_String_Type);\n+      Set_Etype           (Standard_Wide_String, Standard_Wide_String);\n+      Set_Component_Type  (Standard_Wide_String, Standard_Wide_Character);\n+      Set_Component_Size  (Standard_Wide_String, Uint_16);\n+      Init_Size_Align     (Standard_Wide_String);\n+      Set_Has_Pragma_Pack (Standard_Wide_String, True);\n \n       --  Set index type of Wide_String\n \n@@ -772,6 +774,7 @@ package body CStand is\n       Set_Component_Size   (Standard_Wide_Wide_String, Uint_32);\n       Init_Size_Align      (Standard_Wide_Wide_String);\n       Set_Is_Ada_2005_Only (Standard_Wide_Wide_String);\n+      Set_Has_Pragma_Pack  (Standard_Wide_Wide_String, True);\n \n       --  Set index type of Wide_Wide_String\n "}, {"sha": "69dff207bf8a2e60da123c008c95a0e78787464f", "filename": "gcc/ada/exp_cg.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fexp_cg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fexp_cg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_cg.adb?ref=bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "patch": "@@ -34,6 +34,7 @@ with Lib;      use Lib;\n with Namet;    use Namet;\n with Opt;      use Opt;\n with Output;   use Output;\n+with Sem_Aux;  use Sem_Aux;\n with Sem_Disp; use Sem_Disp;\n with Sem_Type; use Sem_Type;\n with Sem_Util; use Sem_Util;"}, {"sha": "70d9226648988a77dc5fb549508c1b5e59ba7308", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -128,6 +128,14 @@ package body Exp_Ch9 is\n    --  Build a specification for a function implementing the protected entry\n    --  barrier of the specified entry body.\n \n+   function Build_Corresponding_Record\n+     (N    : Node_Id;\n+      Ctyp : Node_Id;\n+      Loc  : Source_Ptr) return Node_Id;\n+   --  Common to tasks and protected types. Copy discriminant specifications,\n+   --  build record declaration. N is the type declaration, Ctyp is the\n+   --  concurrent entity (task type or protected type).\n+\n    function Build_Entry_Count_Expression\n      (Concurrent_Type : Node_Id;\n       Component_List  : List_Id;\n@@ -1037,8 +1045,9 @@ package body Exp_Ch9 is\n       --  record is \"limited tagged\". It is \"limited\" to reflect the underlying\n       --  limitedness of the task or protected object that it represents, and\n       --  ensuring for example that it is properly passed by reference. It is\n-      --  \"tagged\" to give support to dispatching calls through interfaces (Ada\n-      --  2005: AI-345)\n+      --  \"tagged\" to give support to dispatching calls through interfaces. We\n+      --  propagate here the list of interfaces covered by the concurrent type\n+      --  (Ada 2005: AI-345).\n \n       return\n         Make_Full_Type_Declaration (Loc,\n@@ -1051,6 +1060,7 @@ package body Exp_Ch9 is\n                   Component_Items => Cdecls),\n               Tagged_Present  =>\n                  Ada_Version >= Ada_05 and then Is_Tagged_Type (Ctyp),\n+              Interface_List  => Interface_List (N),\n               Limited_Present => True));\n    end Build_Corresponding_Record;\n \n@@ -7682,11 +7692,6 @@ package body Exp_Ch9 is\n \n       Cdecls := Component_Items (Component_List (Type_Definition (Rec_Decl)));\n \n-      --  Ada 2005 (AI-345): Propagate the attribute that contains the list\n-      --  of implemented interfaces.\n-\n-      Set_Interface_List (Type_Definition (Rec_Decl), Interface_List (N));\n-\n       Qualify_Entity_Names (N);\n \n       --  If the type has discriminants, their occurrences in the declaration\n@@ -9946,11 +9951,6 @@ package body Exp_Ch9 is\n \n       Rec_Decl := Build_Corresponding_Record (N, Tasktyp, Loc);\n \n-      --  Ada 2005 (AI-345): Propagate the attribute that contains the list\n-      --  of implemented interfaces.\n-\n-      Set_Interface_List (Type_Definition (Rec_Decl), Interface_List (N));\n-\n       Rec_Ent  := Defining_Identifier (Rec_Decl);\n       Cdecls   := Component_Items (Component_List\n                                      (Type_Definition (Rec_Decl)));"}, {"sha": "80d870ad8a103c20343b0d042752065934d4dc73", "filename": "gcc/ada/exp_ch9.ads", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fexp_ch9.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fexp_ch9.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.ads?ref=bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -50,14 +50,6 @@ package Exp_Ch9 is\n    --  Task_Id of the associated task as the parameter. The caller is\n    --  responsible for analyzing and resolving the resulting tree.\n \n-   function Build_Corresponding_Record\n-     (N    : Node_Id;\n-      Ctyp : Node_Id;\n-      Loc  : Source_Ptr) return Node_Id;\n-   --  Common to tasks and protected types. Copy discriminant specifications,\n-   --  build record declaration. N is the type declaration, Ctyp is the\n-   --  concurrent entity (task type or protected type).\n-\n    function Build_Entry_Names (Conc_Typ : Entity_Id) return Node_Id;\n    --  Create the statements which populate the entry names array of a task or\n    --  protected type. The statements are wrapped inside a block due to a local"}, {"sha": "d10ae75a635f884d956940443b9681f5221f1d25", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "patch": "@@ -3968,12 +3968,9 @@ package body Exp_Disp is\n                   --  are located in a separate dispatch table; skip also\n                   --  abstract and eliminated primitives.\n \n-                  --  Why do we skip imported primitives???\n-\n                   if not Is_Predefined_Dispatching_Operation (Prim)\n                     and then Present (Interface_Alias (Prim))\n                     and then not Is_Abstract_Subprogram (Alias (Prim))\n-                    and then not Is_Imported (Alias (Prim))\n                     and then not Is_Eliminated (Alias (Prim))\n                     and then Find_Dispatching_Type\n                                (Interface_Alias (Prim)) = Iface\n@@ -5518,13 +5515,10 @@ package body Exp_Disp is\n                   --  to build secondary dispatch tables; skip also abstract\n                   --  and eliminated primitives.\n \n-                  --  Why do we skip imported primitives???\n-\n                   if not Is_Predefined_Dispatching_Operation (Prim)\n                     and then not Is_Predefined_Dispatching_Operation (E)\n                     and then not Present (Interface_Alias (Prim))\n                     and then not Is_Abstract_Subprogram (E)\n-                    and then not Is_Imported (E)\n                     and then not Is_Eliminated (E)\n                   then\n                      pragma Assert"}, {"sha": "227949dc0b0842444c89262e907f86a33f312b30", "filename": "gcc/ada/s-rannum.adb", "status": "modified", "additions": 40, "deletions": 20, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fs-rannum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fs-rannum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rannum.adb?ref=bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "patch": "@@ -86,9 +86,10 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Calendar;              use Ada.Calendar;\n+with Ada.Calendar;             use Ada.Calendar;\n with Ada.Unchecked_Conversion;\n-with Interfaces;                use Interfaces;\n+\n+with Interfaces; use Interfaces;\n \n use Ada;\n \n@@ -122,7 +123,9 @@ package body System.Random_Numbers is\n    Image_Numeral_Length : constant := Max_Image_Width / N;\n    subtype Image_String is String (1 .. Max_Image_Width);\n \n-   --  Utility functions\n+   -----------------------\n+   -- Local Subprograms --\n+   -----------------------\n \n    procedure Init (Gen : out Generator; Initiator : Unsigned_32);\n    --  Perform a default initialization of the state of Gen. The resulting\n@@ -199,6 +202,10 @@ package body System.Random_Numbers is\n    --  assuming that Unsigned is large enough to hold the bits of a mantissa\n    --  for type Real.\n \n+   ---------------------------\n+   -- Random_Float_Template --\n+   ---------------------------\n+\n    function Random_Float_Template (Gen : Generator) return Real is\n \n       pragma Compile_Time_Error\n@@ -232,15 +239,16 @@ package body System.Random_Numbers is\n       if Real'Machine_Radix /= 2 then\n          return Real'Machine\n            (Real (Unsigned'(Random (Gen))) * 2.0**(-Unsigned'Size));\n+\n       else\n          declare\n             type Bit_Count is range 0 .. 4;\n \n             subtype T is Real'Base;\n \n             Trailing_Ones : constant array (Unsigned_32 range 0 .. 15)\n-              of Bit_Count\n-              :=  (2#00000# => 0, 2#00001# => 1, 2#00010# => 0, 2#00011# => 2,\n+              of Bit_Count :=\n+                  (2#00000# => 0, 2#00001# => 1, 2#00010# => 0, 2#00011# => 2,\n                    2#00100# => 0, 2#00101# => 1, 2#00110# => 0, 2#00111# => 3,\n                    2#01000# => 0, 2#01001# => 1, 2#01010# => 0, 2#01011# => 2,\n                    2#01100# => 0, 2#01101# => 1, 2#01110# => 0, 2#01111# => 4);\n@@ -255,21 +263,30 @@ package body System.Random_Numbers is\n                          (Unsigned'Size - T'Machine_Mantissa + 1);\n             --  Random bits left over after selecting mantissa\n \n-            Mantissa   : Unsigned;\n-            X          : Real;            -- Scaled mantissa\n-            R          : Unsigned_32;     -- Supply of random bits\n-            R_Bits     : Natural;         -- Number of bits left in R\n+            Mantissa : Unsigned;\n \n-            K          : Bit_Count;       -- Next decrement to exponent\n-         begin\n+            X : Real;\n+            --  Scaled mantissa\n+\n+            R : Unsigned_32;\n+            --  Supply of random bits\n+\n+            R_Bits : Natural;\n+            --  Number of bits left in R\n+\n+            K : Bit_Count;\n+            --  Next decrement to exponent\n \n+         begin\n             Mantissa := Random (Gen) / 2**Extra_Bits;\n             R := Unsigned_32 (Mantissa mod 2**Extra_Bits);\n             R_Bits := Extra_Bits;\n             X := Real (2**(T'Machine_Mantissa - 1) + Mantissa); -- Exact\n \n-            if Extra_Bits < 4 and then R < 2**Extra_Bits - 1 then\n+            if Extra_Bits < 4 and then R < 2 ** Extra_Bits - 1 then\n+\n                --  We got lucky and got a zero in our few extra bits\n+\n                K := Trailing_Ones (R);\n \n             else\n@@ -305,12 +322,11 @@ package body System.Random_Numbers is\n                end loop Find_Zero;\n             end if;\n \n-            --  K has the count of trailing ones not reflected yet in X.\n-            --  The following multiplication takes care of that, as well\n-            --  as the correction to move the radix point to the left of\n-            --  the mantissa. Doing it at the end avoids repeated rounding\n-            --  errors in the exceedingly unlikely case of ever having\n-            --  a subnormal result.\n+            --  K has the count of trailing ones not reflected yet in X. The\n+            --  following multiplication takes care of that, as well as the\n+            --  correction to move the radix point to the left of the mantissa.\n+            --  Doing it at the end avoids repeated rounding errors in the\n+            --  exceedingly unlikely case of ever having a subnormal result.\n \n             X := X * Pow_Tab (K);\n \n@@ -330,6 +346,10 @@ package body System.Random_Numbers is\n       end if;\n    end Random_Float_Template;\n \n+   ------------\n+   -- Random --\n+   ------------\n+\n    function Random (Gen : Generator) return Float is\n       function F is new Random_Float_Template (Unsigned_32, Float);\n    begin\n@@ -371,7 +391,7 @@ package body System.Random_Numbers is\n             --  Ignore different-size warnings here; since GNAT's handling\n             --  is correct.\n \n-            pragma Warnings (\"Z\");\n+            pragma Warnings (\"Z\");  -- better to use msg string! ???\n             function Conv_To_Unsigned is\n                new Unchecked_Conversion (Result_Subtype'Base, Unsigned_64);\n             function Conv_To_Result is\n@@ -489,7 +509,7 @@ package body System.Random_Numbers is\n       I, J : Integer;\n \n    begin\n-      Init (Gen, 19650218);\n+      Init (Gen, 19650218); -- please give this constant a name ???\n       I := 1;\n       J := 0;\n "}, {"sha": "99bec9b72dacfed98f7eed5e85cd0ad7620b51ee", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "patch": "@@ -799,4 +799,20 @@ package body Sem_Aux is\n       Obsolescent_Warnings.Tree_Write;\n    end Tree_Write;\n \n+   --------------------\n+   -- Ultimate_Alias --\n+   --------------------\n+\n+   function Ultimate_Alias (Prim : Entity_Id) return Entity_Id is\n+      E : Entity_Id := Prim;\n+\n+   begin\n+      while Present (Alias (E)) loop\n+         pragma Assert (Alias (E) /= E);\n+         E := Alias (E);\n+      end loop;\n+\n+      return E;\n+   end Ultimate_Alias;\n+\n end Sem_Aux;"}, {"sha": "8b763e052402720356f5193aaa297f56685f00ad", "filename": "gcc/ada/sem_aux.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_aux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_aux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.ads?ref=bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -193,4 +193,9 @@ package Sem_Aux is\n    function Number_Discriminants (Typ : Entity_Id) return Pos;\n    --  Typ is a type with discriminants, yields number of discriminants in type\n \n+   function Ultimate_Alias (Prim : Entity_Id) return Entity_Id;\n+   pragma Inline (Ultimate_Alias);\n+   --  Return the last entity in the chain of aliased entities of Prim. If Prim\n+   --  has no alias return Prim.\n+\n end Sem_Aux;"}, {"sha": "0b9847603970d85bd31c1f9cd1955cea6c33a429", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "patch": "@@ -6880,23 +6880,26 @@ package body Sem_Ch4 is\n                --  Scan the list of generic formals to find subprograms\n                --  that may have a first controlling formal of the type.\n \n-               declare\n-                  Decl : Node_Id;\n-\n-               begin\n-                  Decl :=\n-                    First (Generic_Formal_Declarations\n-                            (Unit_Declaration_Node (Scope (T))));\n-                  while Present (Decl) loop\n-                     if Nkind (Decl) in N_Formal_Subprogram_Declaration then\n-                        Subp := Defining_Entity (Decl);\n-                        Check_Candidate;\n-                     end if;\n-\n-                     Next (Decl);\n-                  end loop;\n-               end;\n+               if Nkind (Unit_Declaration_Node (Scope (T)))\n+                 = N_Generic_Subprogram_Declaration\n+               then\n+                  declare\n+                     Decl : Node_Id;\n+\n+                  begin\n+                     Decl :=\n+                       First (Generic_Formal_Declarations\n+                               (Unit_Declaration_Node (Scope (T))));\n+                     while Present (Decl) loop\n+                        if Nkind (Decl) in N_Formal_Subprogram_Declaration then\n+                           Subp := Defining_Entity (Decl);\n+                           Check_Candidate;\n+                        end if;\n \n+                        Next (Decl);\n+                     end loop;\n+                  end;\n+               end if;\n                return Candidates;\n \n             else\n@@ -6906,7 +6909,15 @@ package body Sem_Ch4 is\n                --  declaration or body (either the one that declares T, or a\n                --  child unit).\n \n-               Subp := First_Entity (Scope (T));\n+               --  For a subtype representing a generic actual type, go to the\n+               --  base type.\n+\n+               if Is_Generic_Actual_Type (T) then\n+                  Subp := First_Entity (Scope (Base_Type (T)));\n+               else\n+                  Subp := First_Entity (Scope (T));\n+               end if;\n+\n                while Present (Subp) loop\n                   if Is_Overloadable (Subp) then\n                      Check_Candidate;\n@@ -6979,13 +6990,14 @@ package body Sem_Ch4 is\n          --  corresponding record (base) type.\n \n          if Is_Concurrent_Type (Obj_Type) then\n-            if not Present (Corresponding_Record_Type (Obj_Type)) then\n-               return False;\n+            if Present (Corresponding_Record_Type (Obj_Type)) then\n+               Corr_Type := Base_Type (Corresponding_Record_Type (Obj_Type));\n+               Elmt := First_Elmt (Primitive_Operations (Corr_Type));\n+            else\n+               Corr_Type := Obj_Type;\n+               Elmt := First_Elmt (Collect_Generic_Type_Ops (Obj_Type));\n             end if;\n \n-            Corr_Type := Base_Type (Corresponding_Record_Type (Obj_Type));\n-            Elmt := First_Elmt (Primitive_Operations (Corr_Type));\n-\n          elsif not Is_Generic_Type (Obj_Type) then\n             Corr_Type := Obj_Type;\n             Elmt := First_Elmt (Primitive_Operations (Obj_Type));"}, {"sha": "21f80dfd713ff90737f6aeab6428ee28d7f65ea5", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "patch": "@@ -1176,16 +1176,6 @@ package body Sem_Ch9 is\n \n       Set_Is_Constrained (T, not Has_Discriminants (T));\n \n-      --  Perform minimal expansion of protected type while inside a generic.\n-      --  The corresponding record is needed for various semantic checks.\n-\n-      if Ada_Version >= Ada_05\n-        and then Inside_A_Generic\n-      then\n-         Insert_After_And_Analyze (N,\n-           Build_Corresponding_Record (N, T, Sloc (T)));\n-      end if;\n-\n       Analyze (Protected_Definition (N));\n \n       --  Protected types with entries are controlled (because of the\n@@ -1976,15 +1966,6 @@ package body Sem_Ch9 is\n \n       Set_Is_Constrained (T, not Has_Discriminants (T));\n \n-      --  Perform minimal expansion of the task type while inside a generic\n-      --  context. The corresponding record is needed for various semantic\n-      --  checks.\n-\n-      if Inside_A_Generic then\n-         Insert_After_And_Analyze (N,\n-           Build_Corresponding_Record (N, T, Sloc (T)));\n-      end if;\n-\n       if Present (Task_Definition (N)) then\n          Analyze_Task_Definition (Task_Definition (N));\n       end if;"}, {"sha": "77fcb4f6b9acab6077111f5a9ce2446587c9cf69", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "patch": "@@ -677,18 +677,15 @@ package body Sem_Disp is\n       Set_Is_Dispatching_Operation (Subp, False);\n       Tagged_Type := Find_Dispatching_Type (Subp);\n \n-      --  Ada 2005 (AI-345)\n+      --  Ada 2005 (AI-345): Use the corresponding record (if available).\n+      --  Required because primitives of concurrent types are be attached\n+      --  to the corresponding record (not to the concurrent type).\n \n       if Ada_Version >= Ada_05\n         and then Present (Tagged_Type)\n         and then Is_Concurrent_Type (Tagged_Type)\n+        and then Present (Corresponding_Record_Type (Tagged_Type))\n       then\n-         --  Protect the frontend against previously detected errors\n-\n-         if No (Corresponding_Record_Type (Tagged_Type)) then\n-            return;\n-         end if;\n-\n          Tagged_Type := Corresponding_Record_Type (Tagged_Type);\n       end if;\n \n@@ -1068,6 +1065,18 @@ package body Sem_Disp is\n             end if;\n          end if;\n \n+      --  If the tagged type is a concurrent type then we must be compiling\n+      --  with no code generation (we are either compiling a generic unit or\n+      --  compiling under -gnatc mode) because we have previously tested that\n+      --  no serious errors has been reported. In this case we do not add the\n+      --  primitive to the list of primitives of Tagged_Type but we leave the\n+      --  primitive decorated as a dispatching operation to be able to analyze\n+      --  and report errors associated with the Object.Operation notation.\n+\n+      elsif Is_Concurrent_Type (Tagged_Type) then\n+         pragma Assert (not Expander_Active);\n+         null;\n+\n       --  If no old subprogram, then we add this as a dispatching operation,\n       --  but we avoid doing this if an error was posted, to prevent annoying\n       --  cascaded errors."}, {"sha": "3877826ca2931da1118285441a07a0fa6bbc33fe", "filename": "gcc/ada/sem_disp.ads", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.ads?ref=bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -46,7 +46,12 @@ package Sem_Disp is\n    --  if it has a parameter of this type and is defined at a proper place for\n    --  primitive operations (new primitives are only defined in package spec,\n    --  overridden operation can be defined in any scope). If Old_Subp is not\n-   --  Empty we are in the overriding case.\n+   --  Empty we are in the overriding case. If the tagged type associated with\n+   --  Subp is a concurrent type (case that occurs when the type is declared in\n+   --  a generic because the analysis of generics disables generation of the\n+   --  corresponding record) then this routine does does not add \"Subp\" to the\n+   --  list of primitive operations but leaves Subp decorated as dispatching\n+   --  operation to enable checks associated with the Object.Operation notation\n \n    procedure Check_Operation_From_Incomplete_Type\n      (Subp : Entity_Id;"}, {"sha": "c160c8e419aa96e1710a4d60174ec51957a939de", "filename": "gcc/ada/sem_elim.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_elim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_elim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elim.adb?ref=bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "patch": "@@ -31,6 +31,7 @@ with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Opt;      use Opt;\n with Sem;      use Sem;\n+with Sem_Aux;  use Sem_Aux;\n with Sem_Prag; use Sem_Prag;\n with Sem_Util; use Sem_Util;\n with Sinput;   use Sinput;"}, {"sha": "875b89c8e0e014c74952baff356adb4d440de065", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "patch": "@@ -11125,22 +11125,6 @@ package body Sem_Util is\n       return Scope_Depth (Enclosing_Dynamic_Scope (Btyp));\n    end Type_Access_Level;\n \n-   --------------------\n-   -- Ultimate_Alias --\n-   --------------------\n-\n-   function Ultimate_Alias (Prim : Entity_Id) return Entity_Id is\n-      E : Entity_Id := Prim;\n-\n-   begin\n-      while Present (Alias (E)) loop\n-         pragma Assert (Alias (E) /= E);\n-         E := Alias (E);\n-      end loop;\n-\n-      return E;\n-   end Ultimate_Alias;\n-\n    --------------------------\n    -- Unit_Declaration_Node --\n    --------------------------"}, {"sha": "dd655c9beb981f244af01862da782aeb26281c08", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "patch": "@@ -1260,11 +1260,6 @@ package Sem_Util is\n    function Type_Access_Level (Typ : Entity_Id) return Uint;\n    --  Return the accessibility level of Typ\n \n-   function Ultimate_Alias (Prim : Entity_Id) return Entity_Id;\n-   pragma Inline (Ultimate_Alias);\n-   --  Return the last entity in the chain of aliased entities of Prim. If Prim\n-   --  has no alias return Prim.\n-\n    function Unit_Declaration_Node (Unit_Id : Entity_Id) return Node_Id;\n    --  Unit_Id is the simple name of a program unit, this function returns the\n    --  corresponding xxx_Declaration node for the entity. Also applies to the"}]}