{"sha": "168ad5f5e375612ea0c1ade7e719bb7370516e8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY4YWQ1ZjVlMzc1NjEyZWEwYzFhZGU3ZTcxOWJiNzM3MDUxNmU4ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-03-18T18:08:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-03-18T18:08:29Z"}, "message": "re PR c++/65046 (-Wabi-tag doesn't warn about variables or function return types)\n\n\tPR c++/65046\n\t* config/locale/gnu/messages_members.cc (Catalog_info, Catalogs,\n\tget_catalogs): Add abi-tag.\n\t* include/ext/codecvt_specializations.h (encoding_state,\n\tencoding_char_traits): Likewise.\n\t* src/c++11/cxx11-ios_failure.cc (io_error_category): Likewise.\n\t* src/c++11/cxx11-shim_facets.cc (__any_string::operator basic_string,\n\tnumpunct_shim, collate_shim, time_get_shim, moneypunct_shim,\n\tmoney_get_shim, money_put_shim, messages_shim): Likewise.\n\t* src/c++11/future.cc (future_error_category::message): Likewise.\n\t* src/c++11/system_error.cc (generic_error_category::message,\n\tsystem_error_category::message): Likewise.\n\t(__sso_string): Disable -Wabi-tag warnings.\n\nFrom-SVN: r221497", "tree": {"sha": "27f4fe7915f682f73f9c8fbabf4e598d81c38827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27f4fe7915f682f73f9c8fbabf4e598d81c38827"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/168ad5f5e375612ea0c1ade7e719bb7370516e8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/168ad5f5e375612ea0c1ade7e719bb7370516e8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/168ad5f5e375612ea0c1ade7e719bb7370516e8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/168ad5f5e375612ea0c1ade7e719bb7370516e8e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a9611d03b038040da9ed0f38ea25898cefdc98a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a9611d03b038040da9ed0f38ea25898cefdc98a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a9611d03b038040da9ed0f38ea25898cefdc98a"}], "stats": {"total": 57, "additions": 45, "deletions": 12}, "files": [{"sha": "4fe0c6456872fc643af77a1c2709813d8bda6ef3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168ad5f5e375612ea0c1ade7e719bb7370516e8e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168ad5f5e375612ea0c1ade7e719bb7370516e8e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=168ad5f5e375612ea0c1ade7e719bb7370516e8e", "patch": "@@ -1,3 +1,19 @@\n+2015-03-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/65046\n+\t* config/locale/gnu/messages_members.cc (Catalog_info, Catalogs,\n+\tget_catalogs): Add abi-tag.\n+\t* include/ext/codecvt_specializations.h (encoding_state,\n+\tencoding_char_traits): Likewise.\n+\t* src/c++11/cxx11-ios_failure.cc (io_error_category): Likewise.\n+\t* src/c++11/cxx11-shim_facets.cc (__any_string::operator basic_string,\n+\tnumpunct_shim, collate_shim, time_get_shim, moneypunct_shim,\n+\tmoney_get_shim, money_put_shim, messages_shim): Likewise.\n+\t* src/c++11/future.cc (future_error_category::message): Likewise.\n+\t* src/c++11/system_error.cc (generic_error_category::message,\n+\tsystem_error_category::message): Likewise.\n+\t(__sso_string): Disable -Wabi-tag warnings.\n+\n 2015-03-18  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/13631"}, {"sha": "c90499e26a910d7c2884c5a66032af52f98182d4", "filename": "libstdc++-v3/config/locale/gnu/messages_members.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168ad5f5e375612ea0c1ade7e719bb7370516e8e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168ad5f5e375612ea0c1ade7e719bb7370516e8e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc?ref=168ad5f5e375612ea0c1ade7e719bb7370516e8e", "patch": "@@ -46,8 +46,8 @@ namespace\n \n   typedef messages_base::catalog catalog;\n \n-  struct Catalog_info\n-    {\n+  struct _GLIBCXX_DEFAULT_ABI_TAG Catalog_info\n+  {\n     Catalog_info(catalog __id, const string& __domain, locale __loc)\n       : _M_id(__id), _M_domain(__domain), _M_locale(__loc)\n     { }\n@@ -57,7 +57,7 @@ namespace\n     locale _M_locale;\n   };\n \n-  class Catalogs\n+  class _GLIBCXX_DEFAULT_ABI_TAG Catalogs\n   {\n   public:\n     Catalogs() : _M_catalog_counter(0) { }\n@@ -133,6 +133,7 @@ namespace\n     std::vector<Catalog_info*> _M_infos;\n   };\n \n+  _GLIBCXX_DEFAULT_ABI_TAG\n   Catalogs&\n   get_catalogs()\n   {"}, {"sha": "d9f6630ce0f3af1f3d208b8f02909ac329bbb2c2", "filename": "libstdc++-v3/include/ext/codecvt_specializations.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168ad5f5e375612ea0c1ade7e719bb7370516e8e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168ad5f5e375612ea0c1ade7e719bb7370516e8e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h?ref=168ad5f5e375612ea0c1ade7e719bb7370516e8e", "patch": "@@ -47,7 +47,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // This includes conversions and comparisons between various character\n   // sets.  This object encapsulates data that may need to be shared between\n   // char_traits, codecvt and ctype.\n-  class encoding_state\n+  class _GLIBCXX_DEFAULT_ABI_TAG encoding_state\n   {\n   public:\n     // Types: \n@@ -207,7 +207,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // associated fpos<encoding_state> for the position type, all other\n   // bits equivalent to the required char_traits instantiations.\n   template<typename _CharT>\n-    struct encoding_char_traits : public std::char_traits<_CharT>\n+    struct _GLIBCXX_DEFAULT_ABI_TAG encoding_char_traits\n+    : public std::char_traits<_CharT>\n     {\n       typedef encoding_state\t\t\t\tstate_type;\n       typedef typename std::fpos<state_type>\t\tpos_type;"}, {"sha": "b0a7c46ab99763ccb613170d4e0dea2d3b5b7bdf", "filename": "libstdc++-v3/src/c++11/cxx11-ios_failure.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168ad5f5e375612ea0c1ade7e719bb7370516e8e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168ad5f5e375612ea0c1ade7e719bb7370516e8e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc?ref=168ad5f5e375612ea0c1ade7e719bb7370516e8e", "patch": "@@ -41,6 +41,7 @@ namespace\n     name() const noexcept\n     { return \"iostream\"; }\n \n+    _GLIBCXX_DEFAULT_ABI_TAG\n     virtual std::string message(int __ec) const\n     {\n       std::string __msg;"}, {"sha": "a32b9f0b65f5c0cb94ccc5156dafb32e073b0b6a", "filename": "libstdc++-v3/src/c++11/cxx11-shim_facets.cc", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168ad5f5e375612ea0c1ade7e719bb7370516e8e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-shim_facets.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168ad5f5e375612ea0c1ade7e719bb7370516e8e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-shim_facets.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-shim_facets.cc?ref=168ad5f5e375612ea0c1ade7e719bb7370516e8e", "patch": "@@ -147,6 +147,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // The returned object will match the caller's string ABI, even when the\n     // stored string doesn't.\n     template<typename C>\n+      _GLIBCXX_DEFAULT_ABI_TAG\n       operator basic_string<C>() const\n       {\n \tif (!_M_dtor)\n@@ -226,7 +227,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   namespace // unnamed\n   {\n     template<typename _CharT>\n-      struct numpunct_shim : std::numpunct<_CharT>, facet::__shim\n+      struct _GLIBCXX_DEFAULT_ABI_TAG numpunct_shim\n+      : std::numpunct<_CharT>, facet::__shim\n       {\n \ttypedef typename numpunct<_CharT>::__cache_type __cache_type;\n \n@@ -250,7 +252,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n     template<typename _CharT>\n-      struct collate_shim : std::collate<_CharT>, facet::__shim\n+      struct _GLIBCXX_DEFAULT_ABI_TAG collate_shim\n+      : std::collate<_CharT>, facet::__shim\n       {\n \ttypedef basic_string<_CharT>\tstring_type;\n \n@@ -275,7 +278,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n     template<typename _CharT>\n-      struct time_get_shim : std::time_get<_CharT>, facet::__shim\n+      struct _GLIBCXX_DEFAULT_ABI_TAG time_get_shim\n+      : std::time_get<_CharT>, facet::__shim\n       {\n \ttypedef typename std::time_get<_CharT>::iter_type iter_type;\n \ttypedef typename std::time_get<_CharT>::char_type char_type;\n@@ -329,7 +333,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n     template<typename _CharT, bool _Intl>\n-      struct moneypunct_shim : std::moneypunct<_CharT, _Intl>, facet::__shim\n+      struct _GLIBCXX_DEFAULT_ABI_TAG moneypunct_shim\n+      : std::moneypunct<_CharT, _Intl>, facet::__shim\n       {\n \ttypedef typename moneypunct<_CharT, _Intl>::__cache_type __cache_type;\n \n@@ -356,7 +361,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n     template<typename _CharT>\n-      struct money_get_shim : std::money_get<_CharT>, facet::__shim\n+      struct _GLIBCXX_DEFAULT_ABI_TAG money_get_shim\n+      : std::money_get<_CharT>, facet::__shim\n       {\n \ttypedef typename std::money_get<_CharT>::iter_type iter_type;\n \ttypedef typename std::money_get<_CharT>::char_type char_type;\n@@ -397,7 +403,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n     template<typename _CharT>\n-      struct money_put_shim : std::money_put<_CharT>, facet::__shim\n+      struct _GLIBCXX_DEFAULT_ABI_TAG money_put_shim\n+      : std::money_put<_CharT>, facet::__shim\n       {\n \ttypedef typename std::money_put<_CharT>::iter_type iter_type;\n \ttypedef typename std::money_put<_CharT>::char_type char_type;\n@@ -426,7 +433,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n     template<typename _CharT>\n-      struct messages_shim : std::messages<_CharT>, facet::__shim\n+      struct _GLIBCXX_DEFAULT_ABI_TAG messages_shim\n+      : std::messages<_CharT>, facet::__shim\n       {\n \ttypedef messages_base::catalog  catalog;\n \ttypedef basic_string<_CharT>\tstring_type;"}, {"sha": "21dbd8a685da939192d87f14bcd504923d443322", "filename": "libstdc++-v3/src/c++11/future.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168ad5f5e375612ea0c1ade7e719bb7370516e8e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168ad5f5e375612ea0c1ade7e719bb7370516e8e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc?ref=168ad5f5e375612ea0c1ade7e719bb7370516e8e", "patch": "@@ -32,6 +32,7 @@ namespace\n     name() const noexcept\n     { return \"future\"; }\n \n+    _GLIBCXX_DEFAULT_ABI_TAG\n     virtual std::string message(int __ec) const\n     {\n       std::string __msg;"}, {"sha": "b7ac1f869d441fa6bd03876d9524d7bf6b7bca16", "filename": "libstdc++-v3/src/c++11/system_error.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168ad5f5e375612ea0c1ade7e719bb7370516e8e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168ad5f5e375612ea0c1ade7e719bb7370516e8e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc?ref=168ad5f5e375612ea0c1ade7e719bb7370516e8e", "patch": "@@ -41,6 +41,7 @@ namespace\n     name() const noexcept\n     { return \"generic\"; }\n \n+    _GLIBCXX_DEFAULT_ABI_TAG\n     virtual string \n     message(int i) const\n     {\n@@ -56,6 +57,7 @@ namespace\n     name() const noexcept\n     { return \"system\"; }\n \n+    _GLIBCXX_DEFAULT_ABI_TAG\n     virtual string\n     message(int i) const\n     {\n@@ -111,6 +113,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n #if _GLIBCXX_USE_DUAL_ABI\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wabi-tag\"\n   // Redefine __sso_string so that we can define and export its members\n   // in terms of the SSO std::string.\n   struct __sso_string\n@@ -137,6 +141,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __sso_string(__sso_string&&) noexcept;\n     __sso_string& operator=(__sso_string&&) noexcept;\n   };\n+#pragma GCC diagnostic pop\n \n   __sso_string::__sso_string() : _M_str() { }\n "}]}