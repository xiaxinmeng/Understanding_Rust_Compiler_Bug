{"sha": "7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "node_id": "C_kwDOANBUbNoAKDdkOTM1Y2RkMWE2NzcyNjk5ZWMwYWI0ZjkzNzExOTI4Y2E0ZDMwYTE", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2022-09-30T06:58:16Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-10-05T13:58:21Z"}, "message": "RISC-V: Introduce RVV header to enable builtin types\n\ngcc/ChangeLog:\n\n\t* config.gcc: Add riscv_vector.h.\n\t* config/riscv/riscv-builtins.cc: Add RVV builtin types support.\n\t* config/riscv/riscv-c.cc (riscv_pragma_intrinsic): New function.\n\t(riscv_register_pragmas): Ditto.\n\t* config/riscv/riscv-protos.h (riscv_register_pragmas): Ditto.\n\t(init_builtins): Move declaration from riscv-vector-builtins.h to riscv-protos.h.\n\t(mangle_builtin_type): Ditto.\n\t(verify_type_context): Ditto.\n\t(handle_pragma_vector): New function.\n\t* config/riscv/riscv-vector-builtins.cc (GTY): New variable.\n\t(register_vector_type): New function.\n\t(init_builtins): Add RVV builtin types support.\n\t(handle_pragma_vector): New function.\n\t* config/riscv/riscv-vector-builtins.h (GCC_RISCV_V_BUILTINS_H): Change\n\tname according to file name.\n\t(GCC_RISCV_VECTOR_BUILTINS_H): Ditto.\n\t(init_builtins): Remove declaration in riscv-vector-builtins.h.\n\t(mangle_builtin_type): Ditto.\n\t(verify_type_context): Ditto.\n\t* config/riscv/riscv.cc: Adjust for RVV builtin types support.\n\t* config/riscv/riscv.h (REGISTER_TARGET_PRAGMAS): New macro.\n\t* config/riscv/t-riscv: Remove redundant file including.\n\t* config/riscv/riscv_vector.h: New file.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/pragma-1.c: New test.\n\t* gcc.target/riscv/rvv/base/pragma-2.c: New test.\n\t* gcc.target/riscv/rvv/base/pragma-3.c: New test.\n\t* gcc.target/riscv/rvv/base/user-1.c: New test.\n\t* gcc.target/riscv/rvv/base/user-2.c: New test.\n\t* gcc.target/riscv/rvv/base/user-3.c: New test.\n\t* gcc.target/riscv/rvv/base/user-4.c: New test.\n\t* gcc.target/riscv/rvv/base/user-5.c: New test.\n\t* gcc.target/riscv/rvv/base/user-6.c: New test.\n\t* gcc.target/riscv/rvv/base/vread_csr.c: New test.\n\t* gcc.target/riscv/rvv/base/vwrite_csr.c: New test.", "tree": {"sha": "c79a84890479cda34592dda056cbaee8770f3f46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c79a84890479cda34592dda056cbaee8770f3f46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df4c584c567263fdcd57d8376f24f29477a892b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df4c584c567263fdcd57d8376f24f29477a892b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df4c584c567263fdcd57d8376f24f29477a892b2"}], "stats": {"total": 678, "additions": 665, "deletions": 13}, "files": [{"sha": "e73cb848c2d669b0e057157184fa874d19f383ee", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -518,6 +518,7 @@ riscv*)\n \textra_objs=\"riscv-builtins.o riscv-c.o riscv-sr.o riscv-shorten-memrefs.o riscv-selftests.o\"\n \textra_objs=\"${extra_objs} riscv-vector-builtins.o\"\n \td_target_objs=\"riscv-d.o\"\n+\textra_headers=\"riscv_vector.h\"\n \t;;\n rs6000*-*-*)\n \textra_options=\"${extra_options} g.opt fused-madd.opt rs6000/rs6000-tables.opt\""}, {"sha": "14865d709554e00afc4853c2d72b7b1cd7f6e1f1", "filename": "gcc/config/riscv/riscv-builtins.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -37,7 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n #include \"expr.h\"\n #include \"langhooks.h\"\n-#include \"riscv-vector-builtins.h\"\n+#include \"tm_p.h\"\n \n /* Macros to create an enumeration identifier for a function prototype.  */\n #define RISCV_FTYPE_NAME0(A) RISCV_##A##_FTYPE"}, {"sha": "cac0043d68013f3a145c029f2ce8c7364f69cf44", "filename": "gcc/config/riscv/riscv-c.cc", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Friscv-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Friscv-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-c.cc?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -27,6 +27,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"c-family/c-common.h\"\n #include \"cpplib.h\"\n+#include \"c-family/c-pragma.h\"\n+#include \"target.h\"\n+#include \"tm_p.h\"\n #include \"riscv-subset.h\"\n \n #define builtin_define(TXT) cpp_define (pfile, TXT)\n@@ -150,3 +153,41 @@ riscv_cpu_cpp_builtins (cpp_reader *pfile)\n       builtin_define_with_int_value (buf, version_value);\n     }\n }\n+\n+/* Implement \"#pragma riscv intrinsic\".  */\n+\n+static void\n+riscv_pragma_intrinsic (cpp_reader *)\n+{\n+  tree x;\n+\n+  if (pragma_lex (&x) != CPP_STRING)\n+    {\n+      error (\"%<#pragma riscv intrinsic%> requires a string parameter\");\n+      return;\n+    }\n+\n+  const char *name = TREE_STRING_POINTER (x);\n+\n+  if (strcmp (name, \"vector\") == 0)\n+    {\n+      if (!TARGET_VECTOR)\n+\t{\n+\t  error (\"%<#pragma riscv intrinsic%> option %qs needs 'V' extension \"\n+\t\t \"enabled\",\n+\t\t name);\n+\t  return;\n+\t}\n+      riscv_vector::handle_pragma_vector ();\n+    }\n+  else\n+    error (\"unknown %<#pragma riscv intrinsic%> option %qs\", name);\n+}\n+\n+/* Implement REGISTER_TARGET_PRAGMAS.  */\n+\n+void\n+riscv_register_pragmas (void)\n+{\n+  c_register_pragma (\"riscv\", \"intrinsic\", riscv_pragma_intrinsic);\n+}\n\\ No newline at end of file"}, {"sha": "a44b34d1278dc4b71b94bd8a874fdb75920467b6", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -79,6 +79,7 @@ extern bool riscv_v_ext_enabled_vector_mode_p (machine_mode);\n \n /* Routines implemented in riscv-c.cc.  */\n void riscv_cpu_cpp_builtins (cpp_reader *);\n+void riscv_register_pragmas (void);\n \n /* Routines implemented in riscv-builtins.cc.  */\n extern void riscv_atomic_assign_expand_fenv (tree *, tree *, tree *);\n@@ -115,4 +116,14 @@ extern void riscv_run_selftests (void);\n } // namespace selftest\n #endif\n \n+namespace riscv_vector {\n+/* Routines implemented in riscv-vector-builtins.cc.  */\n+extern void init_builtins (void);\n+extern const char *mangle_builtin_type (const_tree);\n+#ifdef GCC_TARGET_H\n+extern bool verify_type_context (location_t, type_context_kind, const_tree, bool);\n+#endif\n+extern void handle_pragma_vector (void);\n+}\n+\n #endif /* ! GCC_RISCV_PROTOS_H */"}, {"sha": "0096e32f5e41718b67426ac1c7f45931612d6a65", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -46,6 +46,8 @@\n #include \"regs.h\"\n #include \"riscv-vector-builtins.h\"\n \n+using namespace riscv_vector;\n+\n namespace riscv_vector {\n \n /* Information about each RVV type.  */\n@@ -64,6 +66,10 @@ static GTY (()) machine_mode vector_modes[NUM_VECTOR_TYPES];\n    yields a null tree.  */\n static GTY(()) tree abi_vector_types[NUM_VECTOR_TYPES + 1];\n \n+/* Same, but with the riscv_vector.h \"v..._t\" name.  */\n+extern GTY(()) tree builtin_vector_types[MAX_TUPLE_SIZE][NUM_VECTOR_TYPES + 1];\n+tree builtin_vector_types[MAX_TUPLE_SIZE][NUM_VECTOR_TYPES + 1];\n+\n rvv_switcher::rvv_switcher ()\n {\n   /* Set have_regs_of_mode before targetm.init_builtins ().  */\n@@ -183,6 +189,32 @@ register_builtin_types ()\n     }\n }\n \n+/* Register vector type TYPE under its risv_vector.h name.  */\n+static void\n+register_vector_type (vector_type_index type)\n+{\n+  tree vectype = abi_vector_types[type];\n+  /* When vectype is NULL, the corresponding builtin type\n+     is disabled according to '-march'.  */\n+  if (!vectype)\n+    return;\n+  tree id = get_identifier (vector_types[type].user_name);\n+  tree decl = build_decl (input_location, TYPE_DECL, id, vectype);\n+  decl = lang_hooks.decls.pushdecl (decl);\n+\n+  /* Record the new RVV type if pushdecl succeeded without error.  Use\n+     the ABI type otherwise, so that the type we record at least has the\n+     right form, even if it doesn't have the right name.  This should give\n+     better error recovery behavior than installing error_mark_node or\n+     installing an incorrect type.  */\n+  if (decl && TREE_CODE (decl) == TYPE_DECL\n+      && TREE_TYPE (decl) != error_mark_node\n+      && TYPE_MAIN_VARIANT (TREE_TYPE (decl)) == vectype)\n+    vectype = TREE_TYPE (decl);\n+\n+  builtin_vector_types[0][type] = vectype;\n+}\n+\n /* Initialize all compiler built-ins related to RVV that should be\n    defined at start-up.  */\n void\n@@ -192,6 +224,8 @@ init_builtins ()\n   if (!TARGET_VECTOR)\n     return;\n   register_builtin_types ();\n+  if (in_lto_p)\n+    handle_pragma_vector ();\n }\n \n /* Implement TARGET_VERIFY_TYPE_CONTEXT for RVV types.  */\n@@ -276,4 +310,15 @@ verify_type_context (location_t loc, type_context_kind context, const_tree type,\n   gcc_unreachable ();\n }\n \n+/* Implement #pragma riscv intrinsic vector.  */\n+void\n+handle_pragma_vector ()\n+{\n+  rvv_switcher rvv;\n+\n+  /* Define the vector and tuple types.  */\n+  for (unsigned int type_i = 0; type_i < NUM_VECTOR_TYPES; ++type_i)\n+    register_vector_type ((enum vector_type_index) type_i);\n+}\n+\n } // end namespace riscv_vector"}, {"sha": "6ca0b073964d454df068bd307cda3c73e3976d48", "filename": "gcc/config/riscv/riscv-vector-builtins.h", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -18,11 +18,14 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n-#ifndef GCC_RISCV_V_BUILTINS_H\n-#define GCC_RISCV_V_BUILTINS_H\n+#ifndef GCC_RISCV_VECTOR_BUILTINS_H\n+#define GCC_RISCV_VECTOR_BUILTINS_H\n \n namespace riscv_vector {\n \n+/* This is for segment instructions.  */\n+const unsigned int MAX_TUPLE_SIZE = 8;\n+\n /* Static information about each vector type.  */\n struct vector_type_info\n {\n@@ -68,12 +71,6 @@ class rvv_switcher\n   bool m_old_have_regs_of_mode[MAX_MACHINE_MODE];\n };\n \n-void init_builtins ();\n-const char *mangle_builtin_type (const_tree);\n-#ifdef GCC_TARGET_H\n-bool verify_type_context (location_t, type_context_kind, const_tree, bool);\n-#endif\n-\n } // end namespace riscv_vector\n \n #endif"}, {"sha": "ad57b995e7bc91e0a1647c8f03f0b1a744ee0571", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"target.h\"\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"regs.h\"\n@@ -45,8 +46,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"emit-rtl.h\"\n #include \"reload.h\"\n #include \"tm_p.h\"\n-#include \"target.h\"\n-#include \"target-def.h\"\n #include \"basic-block.h\"\n #include \"expr.h\"\n #include \"optabs.h\"\n@@ -59,7 +58,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"tm-constrs.h\"\n #include \"rtl-iter.h\"\n-#include \"riscv-vector-builtins.h\"\n+\n+/* This file should be included last.  */\n+#include \"target-def.h\"\n \n /* True if X is an UNSPEC wrapper around a SYMBOL_REF or LABEL_REF.  */\n #define UNSPEC_ADDRESS_P(X)\t\t\t\t\t\\"}, {"sha": "acae68ebb2dba1af718d273c1a592efdf5487dc2", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -1078,4 +1078,6 @@ extern void riscv_remove_unneeded_save_restore_calls (void);\n \n #define TARGET_SUPPORTS_WIDE_INT 1\n \n+#define REGISTER_TARGET_PRAGMAS() riscv_register_pragmas ()\n+\n #endif /* ! GCC_RISCV_H */"}, {"sha": "1efe3f888b5afeb1a94ee67b14acf564c7b82694", "filename": "gcc/config/riscv/riscv_vector.h", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Friscv_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Friscv_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv_vector.h?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -0,0 +1,100 @@\n+/* RISC-V 'V' Extension intrinsics include file.\n+   Copyright (C) 2022-2022 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef __RISCV_VECTOR_H\n+#define __RISCV_VECTOR_H\n+\n+#include <stdint.h>\n+#include <stddef.h>\n+\n+#ifndef __riscv_vector\n+#error \"Vector intrinsics require the vector extension.\"\n+#else\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+enum RVV_CSR {\n+  RVV_VSTART = 0,\n+  RVV_VXSAT,\n+  RVV_VXRM,\n+  RVV_VCSR,\n+};\n+\n+__extension__ extern __inline unsigned long\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vread_csr(enum RVV_CSR csr)\n+{\n+  unsigned long rv = 0;\n+  switch (csr)\n+    {\n+    case RVV_VSTART:\n+      __asm__ __volatile__ (\"csrr\\t%0,vstart\" : \"=r\"(rv) : : \"memory\");\n+      break;\n+    case RVV_VXSAT:\n+      __asm__ __volatile__ (\"csrr\\t%0,vxsat\" : \"=r\"(rv) : : \"memory\");\n+      break;\n+    case RVV_VXRM:\n+      __asm__ __volatile__ (\"csrr\\t%0,vxrm\" : \"=r\"(rv) : : \"memory\");\n+      break;\n+    case RVV_VCSR:\n+      __asm__ __volatile__ (\"csrr\\t%0,vcsr\" : \"=r\"(rv) : : \"memory\");\n+      break;\n+    }\n+  return rv;\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vwrite_csr(enum RVV_CSR csr, unsigned long value)\n+{\n+  switch (csr)\n+    {\n+    case RVV_VSTART:\n+      __asm__ __volatile__ (\"csrw\\tvstart,%z0\" : : \"rJ\"(value) : \"memory\");\n+      break;\n+    case RVV_VXSAT:\n+      __asm__ __volatile__ (\"csrw\\tvxsat,%z0\" : : \"rJ\"(value) : \"memory\");\n+      break;\n+    case RVV_VXRM:\n+      __asm__ __volatile__ (\"csrw\\tvxrm,%z0\" : : \"rJ\"(value) : \"memory\");\n+      break;\n+    case RVV_VCSR:\n+      __asm__ __volatile__ (\"csrw\\tvcsr,%z0\" : : \"rJ\"(value) : \"memory\");\n+      break;\n+    }\n+}\n+\n+/* NOTE: This implementation of riscv_vector.h is intentionally short.  It does\n+   not define the RVV types and intrinsic functions directly in C and C++\n+   code, but instead uses the following pragma to tell GCC to insert the\n+   necessary type and function definitions itself.  The net effect is the\n+   same, and the file is a complete implementation of riscv_vector.h.  */\n+#pragma riscv intrinsic \"vector\"\n+\n+#ifdef __cplusplus\n+}\n+#endif // __cplusplus\n+#endif // __riscv_vector\n+#endif // __RISCV_VECTOR_H"}, {"sha": "2f060437c23a05daecef22fc3348d4e57b8250d9", "filename": "gcc/config/riscv/t-riscv", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Ft-riscv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Fconfig%2Friscv%2Ft-riscv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Ft-riscv?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -9,7 +9,7 @@ riscv-vector-builtins.o: $(srcdir)/config/riscv/riscv-vector-builtins.cc \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) $(TM_P_H) \\\n   memmodel.h insn-codes.h $(OPTABS_H) $(RECOG_H) $(DIAGNOSTIC_H) $(EXPR_H) \\\n   $(FUNCTION_H) fold-const.h gimplify.h explow.h stor-layout.h $(REGS_H) \\\n-  alias.h langhooks.h attribs.h stringpool.h $(REGS_H) \\\n+  alias.h langhooks.h attribs.h stringpool.h \\\n   $(srcdir)/config/riscv/riscv-vector-builtins.h \\\n \t$(srcdir)/config/riscv/riscv-vector-builtins.def\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\"}, {"sha": "79b1159d9e7d2e4b3b51c60af96f34d3f152e327", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pragma-1.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpragma-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpragma-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpragma-1.c?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc -mabi=ilp32d\" } */\n+\n+#pragma riscv intrinsic \"vector\" /* { dg-error {#pragma riscv intrinsic' option 'vector' needs 'V' extension enabled} } */\n\\ No newline at end of file"}, {"sha": "fa790b1f4e62e33b17d2367757b5c6c5c9b86cf7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pragma-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpragma-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpragma-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpragma-2.c?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"test rvv intrinsic\" { *-*-* } { \"*\" } { \"-march=rv*v*\" } } */\n+\n+#pragma riscv intrinsic \"vector\"\n\\ No newline at end of file"}, {"sha": "86da678adfa5e148987fece5ebf649190593f4f8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pragma-3.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpragma-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpragma-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpragma-3.c?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"test rvv intrinsic\" { *-*-* } { \"*\" } { \"-march=rv*v*\" } } */\n+\n+#pragma riscv intrinsic \"report-error\" /* { dg-error {unknown '#pragma riscv intrinsic' option 'report-error'} } */\n\\ No newline at end of file"}, {"sha": "299e3934a570f2836c1c00f61620e84b1019721f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/user-1.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-1.c?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"test rvv intrinsic\" { *-*-* } { \"*\" } { \"-march=rv*v*\" } } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {vbool64_t t;}\n+void foo1 () {vbool32_t t;}\n+void foo2 () {vbool16_t t;}\n+void foo3 () {vbool8_t t;}\n+void foo4 () {vbool4_t t;}\n+void foo5 () {vbool2_t t;}\n+void foo6 () {vbool1_t t;}\n+void foo7 () {vint8mf8_t t;}\n+void foo8 () {vuint8mf8_t t;}\n+void foo9 () {vint8mf4_t t;}\n+void foo10 () {vuint8mf4_t t;}\n+void foo11 () {vint8mf2_t t;}\n+void foo12 () {vuint8mf2_t t;}\n+void foo13 () {vint8m1_t t;}\n+void foo14 () {vuint8m1_t t;}\n+void foo15 () {vint8m2_t t;}\n+void foo16 () {vuint8m2_t t;}\n+void foo17 () {vint8m4_t t;}\n+void foo18 () {vuint8m4_t t;}\n+void foo19 () {vint8m8_t t;}\n+void foo20 () {vuint8m8_t t;}\n+void foo21 () {vint16mf4_t t;}\n+void foo22 () {vuint16mf4_t t;}\n+void foo23 () {vint16mf2_t t;}\n+void foo24 () {vuint16mf2_t t;}\n+void foo25 () {vint16m1_t t;}\n+void foo26 () {vuint16m1_t t;}\n+void foo27 () {vint16m2_t t;}\n+void foo28 () {vuint16m2_t t;}\n+void foo29 () {vint16m4_t t;}\n+void foo30 () {vuint16m4_t t;}\n+void foo31 () {vint16m8_t t;}\n+void foo32 () {vuint16m8_t t;}\n+void foo33 () {vint32mf2_t t;}\n+void foo34 () {vuint32mf2_t t;}\n+void foo35 () {vint32m1_t t;}\n+void foo36 () {vuint32m1_t t;}\n+void foo37 () {vint32m2_t t;}\n+void foo38 () {vuint32m2_t t;}\n+void foo39 () {vint32m4_t t;}\n+void foo40 () {vuint32m4_t t;}\n+void foo41 () {vint32m8_t t;}\n+void foo42 () {vuint32m8_t t;}\n+void foo43 () {vint64m1_t t;}\n+void foo44 () {vuint64m1_t t;}\n+void foo45 () {vint64m2_t t;}\n+void foo46 () {vuint64m2_t t;}\n+void foo47 () {vint64m4_t t;}\n+void foo48 () {vuint64m4_t t;}\n+void foo49 () {vint64m8_t t;}\n+void foo50 () {vuint64m8_t t;}\n+void foo57 () {vfloat32mf2_t t;}\n+void foo58 () {vfloat32m1_t t;}\n+void foo59 () {vfloat32m2_t t;}\n+void foo60 () {vfloat32m4_t t;}\n+void foo61 () {vfloat32m8_t t;}\n+void foo62 () {vfloat64m1_t t;}\n+void foo63 () {vfloat64m2_t t;}\n+void foo64 () {vfloat64m4_t t;}\n+void foo65 () {vfloat64m8_t t;}\n\\ No newline at end of file"}, {"sha": "2a88467d21800efd61e298738faa93a7e7f23a6e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/user-2.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-2.c?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve64x -mabi=ilp32d\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {vbool64_t t;}\n+void foo1 () {vbool32_t t;}\n+void foo2 () {vbool16_t t;}\n+void foo3 () {vbool8_t t;}\n+void foo4 () {vbool4_t t;}\n+void foo5 () {vbool2_t t;}\n+void foo6 () {vbool1_t t;}\n+void foo7 () {vint8mf8_t t;}\n+void foo8 () {vuint8mf8_t t;}\n+void foo9 () {vint8mf4_t t;}\n+void foo10 () {vuint8mf4_t t;}\n+void foo11 () {vint8mf2_t t;}\n+void foo12 () {vuint8mf2_t t;}\n+void foo13 () {vint8m1_t t;}\n+void foo14 () {vuint8m1_t t;}\n+void foo15 () {vint8m2_t t;}\n+void foo16 () {vuint8m2_t t;}\n+void foo17 () {vint8m4_t t;}\n+void foo18 () {vuint8m4_t t;}\n+void foo19 () {vint8m8_t t;}\n+void foo20 () {vuint8m8_t t;}\n+void foo21 () {vint16mf4_t t;}\n+void foo22 () {vuint16mf4_t t;}\n+void foo23 () {vint16mf2_t t;}\n+void foo24 () {vuint16mf2_t t;}\n+void foo25 () {vint16m1_t t;}\n+void foo26 () {vuint16m1_t t;}\n+void foo27 () {vint16m2_t t;}\n+void foo28 () {vuint16m2_t t;}\n+void foo29 () {vint16m4_t t;}\n+void foo30 () {vuint16m4_t t;}\n+void foo31 () {vint16m8_t t;}\n+void foo32 () {vuint16m8_t t;}\n+void foo33 () {vint32mf2_t t;}\n+void foo34 () {vuint32mf2_t t;}\n+void foo35 () {vint32m1_t t;}\n+void foo36 () {vuint32m1_t t;}\n+void foo37 () {vint32m2_t t;}\n+void foo38 () {vuint32m2_t t;}\n+void foo39 () {vint32m4_t t;}\n+void foo40 () {vuint32m4_t t;}\n+void foo41 () {vint32m8_t t;}\n+void foo42 () {vuint32m8_t t;}\n+void foo43 () {vint64m1_t t;}\n+void foo44 () {vuint64m1_t t;}\n+void foo45 () {vint64m2_t t;}\n+void foo46 () {vuint64m2_t t;}\n+void foo47 () {vint64m4_t t;}\n+void foo48 () {vuint64m4_t t;}\n+void foo49 () {vint64m8_t t;}\n+void foo50 () {vuint64m8_t t;}\n+void foo57 () {vfloat32mf2_t t;} /* { dg-error {unknown type name 'vfloat32mf2_t'} } */\n+void foo58 () {vfloat32m1_t t;} /* { dg-error {unknown type name 'vfloat32m1_t'} } */\n+void foo59 () {vfloat32m2_t t;} /* { dg-error {unknown type name 'vfloat32m2_t'} } */\n+void foo60 () {vfloat32m4_t t;} /* { dg-error {unknown type name 'vfloat32m4_t'} } */\n+void foo61 () {vfloat32m8_t t;} /* { dg-error {unknown type name 'vfloat32m8_t'} } */\n+void foo62 () {vfloat64m1_t t;} /* { dg-error {unknown type name 'vfloat64m1_t'} } */\n+void foo63 () {vfloat64m2_t t;} /* { dg-error {unknown type name 'vfloat64m2_t'} } */\n+void foo64 () {vfloat64m4_t t;} /* { dg-error {unknown type name 'vfloat64m4_t'} } */\n+void foo65 () {vfloat64m8_t t;} /* { dg-error {unknown type name 'vfloat64m8_t'} } */\n\\ No newline at end of file"}, {"sha": "85a6d044f19be1757da1cf9f74791deb68a4739e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/user-3.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-3.c?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve64f -mabi=ilp32d\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {vbool64_t t;}\n+void foo1 () {vbool32_t t;}\n+void foo2 () {vbool16_t t;}\n+void foo3 () {vbool8_t t;}\n+void foo4 () {vbool4_t t;}\n+void foo5 () {vbool2_t t;}\n+void foo6 () {vbool1_t t;}\n+void foo7 () {vint8mf8_t t;}\n+void foo8 () {vuint8mf8_t t;}\n+void foo9 () {vint8mf4_t t;}\n+void foo10 () {vuint8mf4_t t;}\n+void foo11 () {vint8mf2_t t;}\n+void foo12 () {vuint8mf2_t t;}\n+void foo13 () {vint8m1_t t;}\n+void foo14 () {vuint8m1_t t;}\n+void foo15 () {vint8m2_t t;}\n+void foo16 () {vuint8m2_t t;}\n+void foo17 () {vint8m4_t t;}\n+void foo18 () {vuint8m4_t t;}\n+void foo19 () {vint8m8_t t;}\n+void foo20 () {vuint8m8_t t;}\n+void foo21 () {vint16mf4_t t;}\n+void foo22 () {vuint16mf4_t t;}\n+void foo23 () {vint16mf2_t t;}\n+void foo24 () {vuint16mf2_t t;}\n+void foo25 () {vint16m1_t t;}\n+void foo26 () {vuint16m1_t t;}\n+void foo27 () {vint16m2_t t;}\n+void foo28 () {vuint16m2_t t;}\n+void foo29 () {vint16m4_t t;}\n+void foo30 () {vuint16m4_t t;}\n+void foo31 () {vint16m8_t t;}\n+void foo32 () {vuint16m8_t t;}\n+void foo33 () {vint32mf2_t t;}\n+void foo34 () {vuint32mf2_t t;}\n+void foo35 () {vint32m1_t t;}\n+void foo36 () {vuint32m1_t t;}\n+void foo37 () {vint32m2_t t;}\n+void foo38 () {vuint32m2_t t;}\n+void foo39 () {vint32m4_t t;}\n+void foo40 () {vuint32m4_t t;}\n+void foo41 () {vint32m8_t t;}\n+void foo42 () {vuint32m8_t t;}\n+void foo43 () {vint64m1_t t;}\n+void foo44 () {vuint64m1_t t;}\n+void foo45 () {vint64m2_t t;}\n+void foo46 () {vuint64m2_t t;}\n+void foo47 () {vint64m4_t t;}\n+void foo48 () {vuint64m4_t t;}\n+void foo49 () {vint64m8_t t;}\n+void foo50 () {vuint64m8_t t;}\n+void foo57 () {vfloat32mf2_t t;}\n+void foo58 () {vfloat32m1_t t;}\n+void foo59 () {vfloat32m2_t t;}\n+void foo60 () {vfloat32m4_t t;}\n+void foo61 () {vfloat32m8_t t;}\n+void foo62 () {vfloat64m1_t t;} /* { dg-error {unknown type name 'vfloat64m1_t'} } */\n+void foo63 () {vfloat64m2_t t;} /* { dg-error {unknown type name 'vfloat64m2_t'} } */\n+void foo64 () {vfloat64m4_t t;} /* { dg-error {unknown type name 'vfloat64m4_t'} } */\n+void foo65 () {vfloat64m8_t t;} /* { dg-error {unknown type name 'vfloat64m8_t'} } */\n\\ No newline at end of file"}, {"sha": "c51c03e45eb08b04ed2e5bfbde084ec08bf46f1e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/user-4.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-4.c?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve64d -mabi=ilp32d\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {vbool64_t t;}\n+void foo1 () {vbool32_t t;}\n+void foo2 () {vbool16_t t;}\n+void foo3 () {vbool8_t t;}\n+void foo4 () {vbool4_t t;}\n+void foo5 () {vbool2_t t;}\n+void foo6 () {vbool1_t t;}\n+void foo7 () {vint8mf8_t t;}\n+void foo8 () {vuint8mf8_t t;}\n+void foo9 () {vint8mf4_t t;}\n+void foo10 () {vuint8mf4_t t;}\n+void foo11 () {vint8mf2_t t;}\n+void foo12 () {vuint8mf2_t t;}\n+void foo13 () {vint8m1_t t;}\n+void foo14 () {vuint8m1_t t;}\n+void foo15 () {vint8m2_t t;}\n+void foo16 () {vuint8m2_t t;}\n+void foo17 () {vint8m4_t t;}\n+void foo18 () {vuint8m4_t t;}\n+void foo19 () {vint8m8_t t;}\n+void foo20 () {vuint8m8_t t;}\n+void foo21 () {vint16mf4_t t;}\n+void foo22 () {vuint16mf4_t t;}\n+void foo23 () {vint16mf2_t t;}\n+void foo24 () {vuint16mf2_t t;}\n+void foo25 () {vint16m1_t t;}\n+void foo26 () {vuint16m1_t t;}\n+void foo27 () {vint16m2_t t;}\n+void foo28 () {vuint16m2_t t;}\n+void foo29 () {vint16m4_t t;}\n+void foo30 () {vuint16m4_t t;}\n+void foo31 () {vint16m8_t t;}\n+void foo32 () {vuint16m8_t t;}\n+void foo33 () {vint32mf2_t t;}\n+void foo34 () {vuint32mf2_t t;}\n+void foo35 () {vint32m1_t t;}\n+void foo36 () {vuint32m1_t t;}\n+void foo37 () {vint32m2_t t;}\n+void foo38 () {vuint32m2_t t;}\n+void foo39 () {vint32m4_t t;}\n+void foo40 () {vuint32m4_t t;}\n+void foo41 () {vint32m8_t t;}\n+void foo42 () {vuint32m8_t t;}\n+void foo43 () {vint64m1_t t;}\n+void foo44 () {vuint64m1_t t;}\n+void foo45 () {vint64m2_t t;}\n+void foo46 () {vuint64m2_t t;}\n+void foo47 () {vint64m4_t t;}\n+void foo48 () {vuint64m4_t t;}\n+void foo49 () {vint64m8_t t;}\n+void foo50 () {vuint64m8_t t;}\n+void foo57 () {vfloat32mf2_t t;}\n+void foo58 () {vfloat32m1_t t;}\n+void foo59 () {vfloat32m2_t t;}\n+void foo60 () {vfloat32m4_t t;}\n+void foo61 () {vfloat32m8_t t;}\n+void foo62 () {vfloat64m1_t t;}\n+void foo63 () {vfloat64m2_t t;}\n+void foo64 () {vfloat64m4_t t;}\n+void foo65 () {vfloat64m8_t t;}\n\\ No newline at end of file"}, {"sha": "fb1c684cd1a31839570d038835224576b848f250", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/user-5.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-5.c?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve32x -mabi=ilp32d\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {vbool64_t t;} /* { dg-error {unknown type name 'vbool64_t'} } */\n+void foo1 () {vbool32_t t;}\n+void foo2 () {vbool16_t t;}\n+void foo3 () {vbool8_t t;}\n+void foo4 () {vbool4_t t;}\n+void foo5 () {vbool2_t t;}\n+void foo6 () {vbool1_t t;}\n+void foo7 () {vint8mf8_t t;} /* { dg-error {unknown type name 'vint8mf8_t'} } */\n+void foo8 () {vuint8mf8_t t;} /* { dg-error {unknown type name 'vuint8mf8_t'} } */\n+void foo9 () {vint8mf4_t t;}\n+void foo10 () {vuint8mf4_t t;}\n+void foo11 () {vint8mf2_t t;}\n+void foo12 () {vuint8mf2_t t;}\n+void foo13 () {vint8m1_t t;}\n+void foo14 () {vuint8m1_t t;}\n+void foo15 () {vint8m2_t t;}\n+void foo16 () {vuint8m2_t t;}\n+void foo17 () {vint8m4_t t;}\n+void foo18 () {vuint8m4_t t;}\n+void foo19 () {vint8m8_t t;}\n+void foo20 () {vuint8m8_t t;}\n+void foo21 () {vint16mf4_t t;} /* { dg-error {unknown type name 'vint16mf4_t'} } */\n+void foo22 () {vuint16mf4_t t;} /* { dg-error {unknown type name 'vuint16mf4_t'} } */\n+void foo23 () {vint16mf2_t t;}\n+void foo24 () {vuint16mf2_t t;}\n+void foo25 () {vint16m1_t t;}\n+void foo26 () {vuint16m1_t t;}\n+void foo27 () {vint16m2_t t;}\n+void foo28 () {vuint16m2_t t;}\n+void foo29 () {vint16m4_t t;}\n+void foo30 () {vuint16m4_t t;}\n+void foo31 () {vint16m8_t t;}\n+void foo32 () {vuint16m8_t t;}\n+void foo33 () {vint32mf2_t t;} /* { dg-error {unknown type name 'vint32mf2_t'} } */\n+void foo34 () {vuint32mf2_t t;} /* { dg-error {unknown type name 'vuint32mf2_t'} } */\n+void foo35 () {vint32m1_t t;}\n+void foo36 () {vuint32m1_t t;}\n+void foo37 () {vint32m2_t t;}\n+void foo38 () {vuint32m2_t t;}\n+void foo39 () {vint32m4_t t;}\n+void foo40 () {vuint32m4_t t;}\n+void foo41 () {vint32m8_t t;}\n+void foo42 () {vuint32m8_t t;}\n+void foo43 () {vint64m1_t t;} /* { dg-error {unknown type name 'vint64m1_t'} } */\n+void foo44 () {vuint64m1_t t;} /* { dg-error {unknown type name 'vuint64m1_t'} } */\n+void foo45 () {vint64m2_t t;} /* { dg-error {unknown type name 'vint64m2_t'} } */\n+void foo46 () {vuint64m2_t t;} /* { dg-error {unknown type name 'vuint64m2_t'} } */\n+void foo47 () {vint64m4_t t;} /* { dg-error {unknown type name 'vint64m4_t'} } */\n+void foo48 () {vuint64m4_t t;} /* { dg-error {unknown type name 'vuint64m4_t'} } */\n+void foo49 () {vint64m8_t t;} /* { dg-error {unknown type name 'vint64m8_t'} } */\n+void foo50 () {vuint64m8_t t;} /* { dg-error {unknown type name 'vuint64m8_t'} } */\n+void foo57 () {vfloat32mf2_t t;} /* { dg-error {unknown type name 'vfloat32mf2_t'} } */\n+void foo58 () {vfloat32m1_t t;} /* { dg-error {unknown type name 'vfloat32m1_t'} } */\n+void foo59 () {vfloat32m2_t t;} /* { dg-error {unknown type name 'vfloat32m2_t'} } */\n+void foo60 () {vfloat32m4_t t;} /* { dg-error {unknown type name 'vfloat32m4_t'} } */\n+void foo61 () {vfloat32m8_t t;} /* { dg-error {unknown type name 'vfloat32m8_t'} } */\n+void foo62 () {vfloat64m1_t t;} /* { dg-error {unknown type name 'vfloat64m1_t'} } */\n+void foo63 () {vfloat64m2_t t;} /* { dg-error {unknown type name 'vfloat64m2_t'} } */\n+void foo64 () {vfloat64m4_t t;} /* { dg-error {unknown type name 'vfloat64m4_t'} } */\n+void foo65 () {vfloat64m8_t t;} /* { dg-error {unknown type name 'vfloat64m8_t'} } */\n\\ No newline at end of file"}, {"sha": "5361fbd379f9a2727ec56409d4956d8eba0dc462", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/user-6.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fuser-6.c?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve32f -mabi=ilp32d\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {vbool64_t t;} /* { dg-error {unknown type name 'vbool64_t'} } */\n+void foo1 () {vbool32_t t;}\n+void foo2 () {vbool16_t t;}\n+void foo3 () {vbool8_t t;}\n+void foo4 () {vbool4_t t;}\n+void foo5 () {vbool2_t t;}\n+void foo6 () {vbool1_t t;}\n+void foo7 () {vint8mf8_t t;} /* { dg-error {unknown type name 'vint8mf8_t'} } */\n+void foo8 () {vuint8mf8_t t;} /* { dg-error {unknown type name 'vuint8mf8_t'} } */\n+void foo9 () {vint8mf4_t t;}\n+void foo10 () {vuint8mf4_t t;}\n+void foo11 () {vint8mf2_t t;}\n+void foo12 () {vuint8mf2_t t;}\n+void foo13 () {vint8m1_t t;}\n+void foo14 () {vuint8m1_t t;}\n+void foo15 () {vint8m2_t t;}\n+void foo16 () {vuint8m2_t t;}\n+void foo17 () {vint8m4_t t;}\n+void foo18 () {vuint8m4_t t;}\n+void foo19 () {vint8m8_t t;}\n+void foo20 () {vuint8m8_t t;}\n+void foo21 () {vint16mf4_t t;} /* { dg-error {unknown type name 'vint16mf4_t'} } */\n+void foo22 () {vuint16mf4_t t;} /* { dg-error {unknown type name 'vuint16mf4_t'} } */\n+void foo23 () {vint16mf2_t t;}\n+void foo24 () {vuint16mf2_t t;}\n+void foo25 () {vint16m1_t t;}\n+void foo26 () {vuint16m1_t t;}\n+void foo27 () {vint16m2_t t;}\n+void foo28 () {vuint16m2_t t;}\n+void foo29 () {vint16m4_t t;}\n+void foo30 () {vuint16m4_t t;}\n+void foo31 () {vint16m8_t t;}\n+void foo32 () {vuint16m8_t t;}\n+void foo33 () {vint32mf2_t t;} /* { dg-error {unknown type name 'vint32mf2_t'} } */\n+void foo34 () {vuint32mf2_t t;} /* { dg-error {unknown type name 'vuint32mf2_t'} } */\n+void foo35 () {vint32m1_t t;}\n+void foo36 () {vuint32m1_t t;}\n+void foo37 () {vint32m2_t t;}\n+void foo38 () {vuint32m2_t t;}\n+void foo39 () {vint32m4_t t;}\n+void foo40 () {vuint32m4_t t;}\n+void foo41 () {vint32m8_t t;}\n+void foo42 () {vuint32m8_t t;}\n+void foo43 () {vint64m1_t t;} /* { dg-error {unknown type name 'vint64m1_t'} } */\n+void foo44 () {vuint64m1_t t;} /* { dg-error {unknown type name 'vuint64m1_t'} } */\n+void foo45 () {vint64m2_t t;} /* { dg-error {unknown type name 'vint64m2_t'} } */\n+void foo46 () {vuint64m2_t t;} /* { dg-error {unknown type name 'vuint64m2_t'} } */\n+void foo47 () {vint64m4_t t;} /* { dg-error {unknown type name 'vint64m4_t'} } */\n+void foo48 () {vuint64m4_t t;} /* { dg-error {unknown type name 'vuint64m4_t'} } */\n+void foo49 () {vint64m8_t t;} /* { dg-error {unknown type name 'vint64m8_t'} } */\n+void foo50 () {vuint64m8_t t;} /* { dg-error {unknown type name 'vuint64m8_t'} } */\n+void foo57 () {vfloat32mf2_t t;} /* { dg-error {unknown type name 'vfloat32mf2_t'} } */\n+void foo58 () {vfloat32m1_t t;}\n+void foo59 () {vfloat32m2_t t;}\n+void foo60 () {vfloat32m4_t t;}\n+void foo61 () {vfloat32m8_t t;}\n+void foo62 () {vfloat64m1_t t;} /* { dg-error {unknown type name 'vfloat64m1_t'} } */\n+void foo63 () {vfloat64m2_t t;} /* { dg-error {unknown type name 'vfloat64m2_t'} } */\n+void foo64 () {vfloat64m4_t t;} /* { dg-error {unknown type name 'vfloat64m4_t'} } */\n+void foo65 () {vfloat64m8_t t;} /* { dg-error {unknown type name 'vfloat64m8_t'} } */\n\\ No newline at end of file"}, {"sha": "9151349f809d36bff247ad71ebf680644a88901c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vread_csr.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvread_csr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvread_csr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvread_csr.c?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3\" } */\n+/* { dg-skip-if \"test intrinsic using rvv\" { *-*-* } { \"*\" } { \"-march=rv*v*zfh*\" } } */\n+\n+#include <riscv_vector.h>\n+\n+unsigned long vread_csr_vstart(void) {\n+  return vread_csr(RVV_VSTART);\n+}\n+\n+unsigned long vread_csr_vxsat(void) {\n+  return vread_csr(RVV_VXSAT);\n+}\n+\n+unsigned long vread_csr_vxrm(void) {\n+  return vread_csr(RVV_VXRM);\n+}\n+\n+unsigned long vread_csr_vcsr(void) {\n+  return vread_csr(RVV_VCSR);\n+}\n+\n+/* { dg-final { scan-assembler-times {csrr\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*vstart} 1 } } */\n+/* { dg-final { scan-assembler-times {csrr\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*vxsat} 1 } } */\n+/* { dg-final { scan-assembler-times {csrr\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*vxrm} 1 } } */\n+/* { dg-final { scan-assembler-times {csrr\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*vcsr} 1 } } */\n\\ No newline at end of file"}, {"sha": "a50eba713fb76bef3ea71a82f7db5b9677e3e128", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwrite_csr.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwrite_csr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d935cdd1a6772699ec0ab4f93711928ca4d30a1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwrite_csr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwrite_csr.c?ref=7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3\" } */\n+/* { dg-skip-if \"test intrinsic using rvv\" { *-*-* } { \"*\" } { \"-march=rv*v*zfh*\" } } */\n+\n+#include <riscv_vector.h>\n+\n+void vwrite_csr_vstart(unsigned long value) {\n+  vwrite_csr(RVV_VSTART, value);\n+}\n+\n+void vwrite_csr_vxsat(unsigned long value) {\n+  vwrite_csr(RVV_VXSAT, value);\n+}\n+\n+void vwrite_csr_vxrm(unsigned long value) {\n+  vwrite_csr(RVV_VXRM, value);\n+}\n+\n+void vwrite_csr_vcsr(unsigned long value) {\n+  vwrite_csr(RVV_VCSR, value);\n+}\n+\n+/* { dg-final { scan-assembler-times {csrw\\s+vstart,\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7])} 1 } } */\n+/* { dg-final { scan-assembler-times {csrw\\s+vxsat,\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7])} 1 } } */\n+/* { dg-final { scan-assembler-times {csrw\\s+vxrm,\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7])} 1 } } */\n+/* { dg-final { scan-assembler-times {csrw\\s+vcsr,\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7])} 1 } } */\n\\ No newline at end of file"}]}