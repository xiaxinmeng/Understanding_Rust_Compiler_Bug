{"sha": "bccf4b88e184e925ee2d7931e4cf09704f1c3932", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNjZjRiODhlMTg0ZTkyNWVlMmQ3OTMxZTRjZjA5NzA0ZjFjMzkzMg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-03T07:58:29Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-03T13:30:56Z"}, "message": "Improve support for IMAGPART_EXPR and REALPART_EXPR in ranger.\n\nCurrently we adjust statements containing an IMAGPART_EXPR if the\ndefining statement was one of a few built-ins known to return boolean\ntypes.  We can also adjust statements for both IMAGPART_EXPR and\nREALPART_EXPR where the defining statement is a constant.\n\nThis patch adds such support, and cleans up the code a bit.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* gimple-range-fold.cc (adjust_imagpart_expr): Move from\n\tgimple_range_adjustment.  Add support for constants.\n\t(adjust_realpart_expr): New.\n\t(gimple_range_adjustment): Move IMAGPART_EXPR code to\n\tadjust_imagpart_expr.\n\t* range-op.cc (integral_table::integral_table): Add entry for\n\tREALPART_CST.", "tree": {"sha": "f6d2a064075687dd01cca20343ecefd175296e47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6d2a064075687dd01cca20343ecefd175296e47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bccf4b88e184e925ee2d7931e4cf09704f1c3932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bccf4b88e184e925ee2d7931e4cf09704f1c3932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bccf4b88e184e925ee2d7931e4cf09704f1c3932", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bccf4b88e184e925ee2d7931e4cf09704f1c3932/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ce90454c2c81246be993d997cab12e21bc0be68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ce90454c2c81246be993d997cab12e21bc0be68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ce90454c2c81246be993d997cab12e21bc0be68"}], "stats": {"total": 111, "additions": 77, "deletions": 34}, "files": [{"sha": "8be6d473f821d8c5f7c914091d85b9b33ae69af9", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 76, "deletions": 34, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bccf4b88e184e925ee2d7931e4cf09704f1c3932/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bccf4b88e184e925ee2d7931e4cf09704f1c3932/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=bccf4b88e184e925ee2d7931e4cf09704f1c3932", "patch": "@@ -369,14 +369,78 @@ adjust_pointer_diff_expr (irange &res, const gimple *diff_stmt)\n     }\n }\n \n+// Adjust the range for an IMAGPART_EXPR.\n+\n+static void\n+adjust_imagpart_expr (irange &res, const gimple *stmt)\n+{\n+  tree name = TREE_OPERAND (gimple_assign_rhs1 (stmt), 0);\n+\n+  if (TREE_CODE (name) != SSA_NAME || !SSA_NAME_DEF_STMT (name))\n+    return;\n+\n+  gimple *def_stmt = SSA_NAME_DEF_STMT (name);\n+  if (is_gimple_call (def_stmt) && gimple_call_internal_p (def_stmt))\n+    {\n+      switch (gimple_call_internal_fn (def_stmt))\n+\t{\n+\tcase IFN_ADD_OVERFLOW:\n+\tcase IFN_SUB_OVERFLOW:\n+\tcase IFN_MUL_OVERFLOW:\n+\tcase IFN_ATOMIC_COMPARE_EXCHANGE:\n+\t  {\n+\t    int_range<2> r;\n+\t    r.set_varying (boolean_type_node);\n+\t    tree type = TREE_TYPE (gimple_assign_lhs (stmt));\n+\t    range_cast (r, type);\n+\t    res.intersect (r);\n+\t  }\n+\tdefault:\n+\t  break;\n+\t}\n+      return;\n+    }\n+  if (is_gimple_assign (def_stmt))\n+    {\n+      tree cst = gimple_assign_rhs1 (def_stmt);\n+      if (TREE_CODE (cst) == COMPLEX_CST)\n+\t{\n+\t  tree imag = TREE_IMAGPART (cst);\n+\t  int_range<2> tmp (imag, imag);\n+\t  res.intersect (tmp);\n+\t}\n+    }\n+}\n+\n+// Adjust the range for a REALPART_EXPR.\n+\n+static void\n+adjust_realpart_expr (irange &res, const gimple *stmt)\n+{\n+  tree name = TREE_OPERAND (gimple_assign_rhs1 (stmt), 0);\n+\n+  if (TREE_CODE (name) != SSA_NAME)\n+    return;\n+\n+  gimple *def_stmt = SSA_NAME_DEF_STMT (name);\n+  if (!SSA_NAME_DEF_STMT (name))\n+    return;\n+\n+  if (is_gimple_assign (def_stmt))\n+    {\n+      tree cst = gimple_assign_rhs1 (def_stmt);\n+      if (TREE_CODE (cst) == COMPLEX_CST)\n+\t{\n+\t  tree imag = TREE_REALPART (cst);\n+\t  int_range<2> tmp (imag, imag);\n+\t  res.intersect (tmp);\n+\t}\n+    }\n+}\n+\n // This function looks for situations when walking the use/def chains\n // may provide additonal contextual range information not exposed on\n-// this statement.  Like knowing the IMAGPART return value from a\n-// builtin function is a boolean result.\n-\n-// We should rework how we're called, as we have an op_unknown entry\n-// for IMAGPART_EXPR and POINTER_DIFF_EXPR in range-ops just so this\n-// function gets called.\n+// this statement.\n \n static void\n gimple_range_adjustment (irange &res, const gimple *stmt)\n@@ -388,34 +452,12 @@ gimple_range_adjustment (irange &res, const gimple *stmt)\n       return;\n \n     case IMAGPART_EXPR:\n-      {\n-\ttree name = TREE_OPERAND (gimple_assign_rhs1 (stmt), 0);\n-\tif (TREE_CODE (name) == SSA_NAME)\n-\t  {\n-\t    gimple *def_stmt = SSA_NAME_DEF_STMT (name);\n-\t    if (def_stmt && is_gimple_call (def_stmt)\n-\t\t&& gimple_call_internal_p (def_stmt))\n-\t      {\n-\t\tswitch (gimple_call_internal_fn (def_stmt))\n-\t\t  {\n-\t\t  case IFN_ADD_OVERFLOW:\n-\t\t  case IFN_SUB_OVERFLOW:\n-\t\t  case IFN_MUL_OVERFLOW:\n-\t\t  case IFN_ATOMIC_COMPARE_EXCHANGE:\n-\t\t    {\n-\t\t      int_range<2> r;\n-\t\t      r.set_varying (boolean_type_node);\n-\t\t      tree type = TREE_TYPE (gimple_assign_lhs (stmt));\n-\t\t      range_cast (r, type);\n-\t\t      res.intersect (r);\n-\t\t    }\n-\t\t  default:\n-\t\t    break;\n-\t\t  }\n-\t      }\n-\t  }\n-\tbreak;\n-      }\n+      adjust_imagpart_expr (res, stmt);\n+      return;\n+\n+    case REALPART_EXPR:\n+      adjust_realpart_expr (res, stmt);\n+      return;\n \n     default:\n       break;"}, {"sha": "fee0e834c233cdda22b9542ce1b7374510a3786d", "filename": "gcc/range-op.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bccf4b88e184e925ee2d7931e4cf09704f1c3932/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bccf4b88e184e925ee2d7931e4cf09704f1c3932/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=bccf4b88e184e925ee2d7931e4cf09704f1c3932", "patch": "@@ -4017,6 +4017,7 @@ integral_table::integral_table ()\n   set (PAREN_EXPR, op_identity);\n   set (OBJ_TYPE_REF, op_identity);\n   set (IMAGPART_EXPR, op_unknown);\n+  set (REALPART_EXPR, op_unknown);\n   set (POINTER_DIFF_EXPR, op_unknown);\n   set (ABS_EXPR, op_abs);\n   set (ABSU_EXPR, op_absu);"}]}