{"sha": "6a4b5f71c97dc3a2794921710ebf96d4515735d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE0YjVmNzFjOTdkYzNhMjc5NDkyMTcxMGViZjk2ZDQ1MTU3MzVkMg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2014-01-28T20:10:22Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2014-01-28T20:10:22Z"}, "message": "re PR fortran/59414 ([OOP] ICE in in gfc_conv_expr_descriptor on ALLOCATE inside SELECT TYPE)\n\n2014-01-28  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/59414\n\t* trans-stmt.c (gfc_trans_allocate): Before the pointer\n\tassignment to transfer the source _vptr to a class allocate\n\texpression, the final class reference should be exposed. The\n\ttail that includes the _data and array references is stored.\n\tThis reduced expression is transferred to 'lhs' and the _vptr\n\tadded. Then the tail is restored to the allocate expression.\n\n2014-01-28  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/59414\n\t* gfortran.dg/allocate_class_3.f90 : New test\n\nFrom-SVN: r207204", "tree": {"sha": "848c6bdadc4dc840eac357f9bf8e7960d97c859a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/848c6bdadc4dc840eac357f9bf8e7960d97c859a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a4b5f71c97dc3a2794921710ebf96d4515735d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4b5f71c97dc3a2794921710ebf96d4515735d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a4b5f71c97dc3a2794921710ebf96d4515735d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4b5f71c97dc3a2794921710ebf96d4515735d2/comments", "author": null, "committer": null, "parents": [{"sha": "e191f502605992cb2344af710b55fa125a91eee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e191f502605992cb2344af710b55fa125a91eee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e191f502605992cb2344af710b55fa125a91eee3"}], "stats": {"total": 163, "additions": 160, "deletions": 3}, "files": [{"sha": "577d7784d2c346385b0b65edfe8cf11ecaac7864", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4b5f71c97dc3a2794921710ebf96d4515735d2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4b5f71c97dc3a2794921710ebf96d4515735d2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6a4b5f71c97dc3a2794921710ebf96d4515735d2", "patch": "@@ -1,3 +1,13 @@\n+2014-01-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/59414\n+\t* trans-stmt.c (gfc_trans_allocate): Before the pointer\n+\tassignment to transfer the source _vptr to a class allocate\n+\texpression, the final class reference should be exposed. The\n+\ttail that includes the _data and array references is stored.\n+\tThis reduced expression is transferred to 'lhs' and the _vptr\n+\tadded. Then the tail is restored to the allocate expression.\n+\n 2014-01-26  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/58007"}, {"sha": "50e9a1a2abf2ccb37b491f382d8d45b41bca0cd9", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4b5f71c97dc3a2794921710ebf96d4515735d2/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4b5f71c97dc3a2794921710ebf96d4515735d2/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=6a4b5f71c97dc3a2794921710ebf96d4515735d2", "patch": "@@ -5102,10 +5102,49 @@ gfc_trans_allocate (gfc_code * code)\n \t{\n \t  gfc_expr *lhs, *rhs;\n \t  gfc_se lse;\n+\t  gfc_ref *ref, *class_ref, *tail;\n+\n+\t  /* Find the last class reference.  */\n+\t  class_ref = NULL;\n+\t  for (ref = e->ref; ref; ref = ref->next)\n+\t    {\n+\t      if (ref->type == REF_COMPONENT\n+\t\t  && ref->u.c.component->ts.type == BT_CLASS)\n+\t\tclass_ref = ref;\n+\n+\t      if (ref->next == NULL)\n+\t\tbreak;\n+\t    }\n+\n+\t  /* Remove and store all subsequent references after the\n+\t     CLASS reference.  */\n+\t  if (class_ref)\n+\t    {\n+\t      tail = class_ref->next;\n+\t      class_ref->next = NULL;\n+\t    }\n+\t  else\n+\t    {\n+\t      tail = e->ref;\n+\t      e->ref = NULL;\n+\t    }\n \n \t  lhs = gfc_expr_to_initialize (e);\n \t  gfc_add_vptr_component (lhs);\n \n+\t  /* Remove the _vptr component and restore the original tail\n+\t     references.  */\n+\t  if (class_ref)\n+\t    {\n+\t      gfc_free_ref_list (class_ref->next);\n+\t      class_ref->next = tail;\n+\t    }\n+\t  else\n+\t    {\n+\t      gfc_free_ref_list (e->ref);\n+\t      e->ref = tail;\n+\t    }\n+\n \t  if (class_expr != NULL_TREE)\n \t    {\n \t      /* Polymorphic SOURCE: VPTR must be determined at run time.  */"}, {"sha": "049da5834474516cd8a22f9025ef9646648a8c73", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4b5f71c97dc3a2794921710ebf96d4515735d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4b5f71c97dc3a2794921710ebf96d4515735d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a4b5f71c97dc3a2794921710ebf96d4515735d2", "patch": "@@ -1,6 +1,7 @@\n-2014-01-28  Kazu Hirata  <kazu@codesourcery.com>\n+2014-01-28  Paul Thomas  <pault@gcc.gnu.org>\n \n-\t* gcc.target/arm/thumb-cbranchqi.c: Accept bls also.\n+\tPR fortran/59414\n+\t* gfortran.dg/allocate_class_3.f90 : New test\n \n 2014-01-28  Dodji Seketeli  <dodji@redhat.com>\n \n@@ -707,7 +708,7 @@\n \n \tPR ipa/58252\n \tPR ipa/59226\n-\t* g++.dg/ipa/devirt-20.C: New testcase.\t\n+\t* g++.dg/ipa/devirt-20.C: New testcase.\n \t* g++.dg/torture/pr58252.C: Likewise.\n \t* g++.dg/torture/pr59226.C: Likewise.\n "}, {"sha": "ddc7e23283f266b4e6f5ccca89abda9bebf570c1", "filename": "gcc/testsuite/gfortran.dg/allocate_class_3.f90", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4b5f71c97dc3a2794921710ebf96d4515735d2/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_class_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4b5f71c97dc3a2794921710ebf96d4515735d2/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_class_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_class_3.f90?ref=6a4b5f71c97dc3a2794921710ebf96d4515735d2", "patch": "@@ -0,0 +1,107 @@\n+! { dg-do run }\n+! Tests the fix for PR59414, comment #3, in which the allocate\n+! expressions were not correctly being stripped to provide the\n+! vpointer as an lhs to the pointer assignment of the vptr from\n+! the SOURCE expression.\n+!\n+! Contributed by Antony Lewis  <antony@cosmologist.info>\n+!\n+module ObjectLists\n+  implicit none\n+\n+  type :: t\n+    integer :: i\n+  end type\n+\n+  type Object_array_pointer\n+    class(t), pointer :: p(:)\n+  end type\n+\n+contains\n+\n+  subroutine AddArray1 (P, Pt)\n+    class(t) :: P(:)\n+    class(Object_array_pointer) :: Pt\n+\n+    select type (Pt)\n+    class is (Object_array_pointer)\n+      if (associated (Pt%P)) deallocate (Pt%P)\n+      allocate(Pt%P(1:SIZE(P)), source=P)\n+    end select\n+  end subroutine\n+\n+  subroutine AddArray2 (P, Pt)\n+    class(t) :: P(:)\n+    class(Object_array_pointer) :: Pt\n+\n+    select type (Pt)\n+    type is (Object_array_pointer)\n+      if (associated (Pt%P)) deallocate (Pt%P)\n+      allocate(Pt%P(1:SIZE(P)), source=P)\n+    end select\n+  end subroutine\n+\n+  subroutine AddArray3 (P, Pt)\n+    class(t) :: P\n+    class(Object_array_pointer) :: Pt\n+\n+    select type (Pt)\n+    class is (Object_array_pointer)\n+      if (associated (Pt%P)) deallocate (Pt%P)\n+      allocate(Pt%P(1:4), source=P)\n+    end select\n+  end subroutine\n+\n+  subroutine AddArray4 (P, Pt)\n+    type(t) :: P(:)\n+    class(Object_array_pointer) :: Pt\n+\n+    select type (Pt)\n+    class is (Object_array_pointer)\n+      if (associated (Pt%P)) deallocate (Pt%P)\n+      allocate(Pt%P(1:SIZE(P)), source=P)\n+    end select\n+  end subroutine\n+end module\n+\n+  use ObjectLists\n+  type(Object_array_pointer), pointer :: Pt\n+  class(t), pointer :: P(:)\n+\n+  allocate (P(2), source = [t(1),t(2)])\n+  allocate (Pt, source = Object_array_pointer(NULL()))\n+  call AddArray1 (P, Pt)\n+  select type (x => Pt%p)\n+    type is (t)\n+      if (any (x%i .ne. [1,2])) call abort\n+  end select\n+  deallocate (P)\n+  deallocate (pt)\n+\n+  allocate (P(3), source = [t(3),t(4),t(5)])\n+  allocate (Pt, source = Object_array_pointer(NULL()))\n+  call AddArray2 (P, Pt)\n+  select type (x => Pt%p)\n+    type is (t)\n+      if (any (x%i .ne. [3,4,5])) call abort\n+  end select\n+  deallocate (P)\n+  deallocate (pt)\n+\n+  allocate (Pt, source = Object_array_pointer(NULL()))\n+  call AddArray3 (t(6), Pt)\n+  select type (x => Pt%p)\n+    type is (t)\n+      if (any (x%i .ne. [6,6,6,6])) call abort\n+  end select\n+  deallocate (pt)\n+\n+  allocate (Pt, source = Object_array_pointer(NULL()))\n+  call AddArray4 ([t(7), t(8)], Pt)\n+  select type (x => Pt%p)\n+    type is (t)\n+      if (any (x%i .ne. [7,8])) call abort\n+  end select\n+  deallocate (pt)\n+ end\n+"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/testsuite/gfortran.dg/elemental_by_value_1.f90", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4b5f71c97dc3a2794921710ebf96d4515735d2/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_by_value_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4b5f71c97dc3a2794921710ebf96d4515735d2/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_by_value_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_by_value_1.f90?ref=6a4b5f71c97dc3a2794921710ebf96d4515735d2"}]}