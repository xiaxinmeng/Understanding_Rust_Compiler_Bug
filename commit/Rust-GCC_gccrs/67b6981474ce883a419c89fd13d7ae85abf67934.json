{"sha": "67b6981474ce883a419c89fd13d7ae85abf67934", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdiNjk4MTQ3NGNlODgzYTQxOWM4OWZkMTNkN2FlODVhYmY2NzkzNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-11-10T08:53:16Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-11-10T08:53:16Z"}, "message": "gimple-low.c (lower_function_body): Clear the location of the first inserted representative return if...\n\n\t* gimple-low.c (lower_function_body): Clear the location of the first\n\tinserted representative return if it also fills in for the fallthru.\n\nFrom-SVN: r217278", "tree": {"sha": "609f00aaaa86d1c51912ba852cdaaf6424edac1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/609f00aaaa86d1c51912ba852cdaaf6424edac1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67b6981474ce883a419c89fd13d7ae85abf67934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b6981474ce883a419c89fd13d7ae85abf67934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67b6981474ce883a419c89fd13d7ae85abf67934", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b6981474ce883a419c89fd13d7ae85abf67934/comments", "author": null, "committer": null, "parents": [{"sha": "bf42631e52845de198d2205eb5773d0f37bfcf15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf42631e52845de198d2205eb5773d0f37bfcf15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf42631e52845de198d2205eb5773d0f37bfcf15"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "97fc20e6dd00e112be94c5cc7522761ae2d7c31e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b6981474ce883a419c89fd13d7ae85abf67934/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b6981474ce883a419c89fd13d7ae85abf67934/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67b6981474ce883a419c89fd13d7ae85abf67934", "patch": "@@ -1,3 +1,8 @@\n+2014-11-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gimple-low.c (lower_function_body): Clear the location of the first\n+\tinserted representative return if it also fills in for the fallthru.\n+\n 2014-11-10  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \t* tree-if-conv.c (add_to_predicate_list): Check unconditionally"}, {"sha": "3507d3cb09d10daa94bdf6ef6a0787dc00f75c9c", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b6981474ce883a419c89fd13d7ae85abf67934/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b6981474ce883a419c89fd13d7ae85abf67934/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=67b6981474ce883a419c89fd13d7ae85abf67934", "patch": "@@ -129,7 +129,8 @@ lower_function_body (void)\n   /* If the function falls off the end, we need a null return statement.\n      If we've already got one in the return_statements vector, we don't\n      need to do anything special.  Otherwise build one by hand.  */\n-  if (gimple_seq_may_fallthru (lowered_body)\n+  bool may_fallthru = gimple_seq_may_fallthru (lowered_body);\n+  if (may_fallthru\n       && (data.return_statements.is_empty ()\n \t  || (gimple_return_retval (data.return_statements.last().stmt)\n \t      != NULL)))\n@@ -138,6 +139,7 @@ lower_function_body (void)\n       gimple_set_location (x, cfun->function_end_locus);\n       gimple_set_block (x, DECL_INITIAL (current_function_decl));\n       gsi_insert_after (&i, x, GSI_CONTINUE_LINKING);\n+      may_fallthru = false;\n     }\n \n   /* If we lowered any return statements, emit the representative\n@@ -148,6 +150,14 @@ lower_function_body (void)\n       x = gimple_build_label (t.label);\n       gsi_insert_after (&i, x, GSI_CONTINUE_LINKING);\n       gsi_insert_after (&i, t.stmt, GSI_CONTINUE_LINKING);\n+      if (may_fallthru)\n+\t{\n+\t  /* Remove the line number from the representative return statement.\n+\t     It now fills in for the fallthru too.  Failure to remove this\n+\t     will result in incorrect results for coverage analysis.  */\n+\t  gimple_set_location (t.stmt, UNKNOWN_LOCATION);\n+\t  may_fallthru = false;\n+\t}\n     }\n \n   /* Once the old body has been lowered, replace it with the new"}, {"sha": "8c9df3d70c4ed387951d6f812c52427b103aca16", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b6981474ce883a419c89fd13d7ae85abf67934/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b6981474ce883a419c89fd13d7ae85abf67934/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67b6981474ce883a419c89fd13d7ae85abf67934", "patch": "@@ -1,3 +1,7 @@\n+2014-11-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.misc-tests/gcov-16.c: New test.\n+\n 2014-11-10  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \t* gcc.dg/tree-ssa/ifc-cd.c: New test."}, {"sha": "738113c92cb801610cac484179aec6906a579463", "filename": "gcc/testsuite/gcc.misc-tests/gcov-16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b6981474ce883a419c89fd13d7ae85abf67934/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b6981474ce883a419c89fd13d7ae85abf67934/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-16.c?ref=67b6981474ce883a419c89fd13d7ae85abf67934", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-options \"-fprofile-arcs -ftest-coverage\" } */\n+/* { dg-do run { target native } } */\n+\n+void\n+bar (void)\n+{}\n+\n+void\n+foo (int i)\n+{\n+  if (i > 1)  /* count(1) */\n+    return;   /* count(#####) */\n+\n+  bar ();      /* count(1) */\n+}\n+\n+int\n+main (void)\n+{\n+  foo (0);\n+  return 0;\n+}\n+\n+/* { dg-final { run-gcov gcov-16.c } } */"}]}