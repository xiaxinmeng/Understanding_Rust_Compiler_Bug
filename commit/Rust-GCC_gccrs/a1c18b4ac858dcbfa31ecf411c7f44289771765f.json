{"sha": "a1c18b4ac858dcbfa31ecf411c7f44289771765f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFjMThiNGFjODU4ZGNiZmEzMWVjZjQxMWM3ZjQ0Mjg5NzcxNzY1Zg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2003-09-19T00:47:53Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2003-09-19T00:47:53Z"}, "message": "c-ppoutput.c (print): Use fileline typedef for field 'line'.\n\n\n\t* c-ppoutput.c (print):  Use fileline typedef for field 'line'.\n\t(print_line, maybe_print_line, cb_define, cb_undef, cb_include,\n\tcb_ident, cb_def_pragma):  Use fileline typedef.\n\t* cpphash.h (struct cpp_reader):  Likewise for field out.first_line.\n\nFrom-SVN: r71554", "tree": {"sha": "a2183791fc216a3c68bff8a23ea55a214359e4d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2183791fc216a3c68bff8a23ea55a214359e4d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1c18b4ac858dcbfa31ecf411c7f44289771765f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1c18b4ac858dcbfa31ecf411c7f44289771765f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1c18b4ac858dcbfa31ecf411c7f44289771765f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1c18b4ac858dcbfa31ecf411c7f44289771765f/comments", "author": null, "committer": null, "parents": [{"sha": "7f7de61bdea8b043e97b035a062fba69e22760a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7de61bdea8b043e97b035a062fba69e22760a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f7de61bdea8b043e97b035a062fba69e22760a2"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "2a27b1262d0b729d44884d6ddc68908aa6f9ed51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c18b4ac858dcbfa31ecf411c7f44289771765f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c18b4ac858dcbfa31ecf411c7f44289771765f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1c18b4ac858dcbfa31ecf411c7f44289771765f", "patch": "@@ -1,3 +1,10 @@\n+2003-09-18  Mike Stump  <mrs@apple.com>\n+\n+\t* c-ppoutput.c (print):  Use fileline typedef for field 'line'.\n+\t(print_line, maybe_print_line, cb_define, cb_undef, cb_include,\n+\tcb_ident, cb_def_pragma):  Use fileline typedef.\n+\t* cpphash.h (struct cpp_reader):  Likewise for field out.first_line.\n+\n 2003-09-18  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* config/i386/winnt.c (gen_stdcall_suffix): Quit summation of"}, {"sha": "669d11ea494f1f20833d6f4f848da01a7b958577", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c18b4ac858dcbfa31ecf411c7f44289771765f/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c18b4ac858dcbfa31ecf411c7f44289771765f/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=a1c18b4ac858dcbfa31ecf411c7f44289771765f", "patch": "@@ -35,7 +35,7 @@ static struct\n   const struct line_map *map;\t/* Logical to physical line mappings.  */\n   const cpp_token *prev;\t/* Previous token.  */\n   const cpp_token *source;\t/* Source token for spacing.  */\n-  unsigned int line;\t\t/* Line currently being written.  */\n+  fileline line;\t\t/* Line currently being written.  */\n   unsigned char printed;\t/* Nonzero if something output at line.  */\n } print;\n \n@@ -45,19 +45,18 @@ static void scan_translation_unit_trad (cpp_reader *);\n static void account_for_newlines (const unsigned char *, size_t);\n static int dump_macro (cpp_reader *, cpp_hashnode *, void *);\n \n-static void print_line (const struct line_map *, unsigned int,\n-\t\t\tconst char *);\n-static void maybe_print_line (const struct line_map *, unsigned int);\n+static void print_line (const struct line_map *, fileline, const char *);\n+static void maybe_print_line (const struct line_map *, fileline);\n \n /* Callback routines for the parser.   Most of these are active only\n    in specific modes.  */\n static void cb_line_change (cpp_reader *, const cpp_token *, int);\n-static void cb_define (cpp_reader *, unsigned int, cpp_hashnode *);\n-static void cb_undef (cpp_reader *, unsigned int, cpp_hashnode *);\n-static void cb_include (cpp_reader *, unsigned int, const unsigned char *,\n+static void cb_define (cpp_reader *, fileline, cpp_hashnode *);\n+static void cb_undef (cpp_reader *, fileline, cpp_hashnode *);\n+static void cb_include (cpp_reader *, fileline, const unsigned char *,\n \t\t\tconst char *, int);\n-static void cb_ident (cpp_reader *, unsigned int, const cpp_string *);\n-static void cb_def_pragma (cpp_reader *, unsigned int);\n+static void cb_ident (cpp_reader *, fileline, const cpp_string *);\n+static void cb_def_pragma (cpp_reader *, fileline);\n \n /* Preprocess and output.  */\n void\n@@ -116,7 +115,7 @@ init_pp_output (FILE *out_stream)\n   /* Initialize the print structure.  Setting print.line to -1 here is\n      a trick to guarantee that the first token of the file will cause\n      a linemarker to be output by maybe_print_line.  */\n-  print.line = (unsigned int) -1;\n+  print.line = (fileline) -1;\n   print.printed = 0;\n   print.prev = 0;\n   print.map = 0;\n@@ -200,7 +199,7 @@ scan_translation_unit_trad (cpp_reader *pfile)\n    different line to the current one, output the required newlines or\n    a line marker, and return 1.  Otherwise return 0.  */\n static void\n-maybe_print_line (const struct line_map *map, unsigned int line)\n+maybe_print_line (const struct line_map *map, fileline line)\n {\n   /* End the previous line of text.  */\n   if (print.printed)\n@@ -225,7 +224,7 @@ maybe_print_line (const struct line_map *map, unsigned int line)\n /* Output a line marker for logical line LINE.  Special flags are \"1\"\n    or \"2\" indicating entering or leaving a file.  */\n static void\n-print_line (const struct line_map *map, unsigned int line, const char *special_flags)\n+print_line (const struct line_map *map, fileline line, const char *special_flags)\n {\n   /* End any previous line of text.  */\n   if (print.printed)\n@@ -289,7 +288,7 @@ cb_line_change (cpp_reader *pfile, const cpp_token *token,\n }\n \n static void\n-cb_ident (cpp_reader *pfile ATTRIBUTE_UNUSED, unsigned int line,\n+cb_ident (cpp_reader *pfile ATTRIBUTE_UNUSED, fileline line,\n \t  const cpp_string *str)\n {\n   maybe_print_line (print.map, line);\n@@ -298,7 +297,7 @@ cb_ident (cpp_reader *pfile ATTRIBUTE_UNUSED, unsigned int line,\n }\n \n static void\n-cb_define (cpp_reader *pfile, unsigned int line, cpp_hashnode *node)\n+cb_define (cpp_reader *pfile, fileline line, cpp_hashnode *node)\n {\n   maybe_print_line (print.map, line);\n   fputs (\"#define \", print.outf);\n@@ -315,7 +314,7 @@ cb_define (cpp_reader *pfile, unsigned int line, cpp_hashnode *node)\n }\n \n static void\n-cb_undef (cpp_reader *pfile ATTRIBUTE_UNUSED, unsigned int line,\n+cb_undef (cpp_reader *pfile ATTRIBUTE_UNUSED, fileline line,\n \t  cpp_hashnode *node)\n {\n   maybe_print_line (print.map, line);\n@@ -324,7 +323,7 @@ cb_undef (cpp_reader *pfile ATTRIBUTE_UNUSED, unsigned int line,\n }\n \n static void\n-cb_include (cpp_reader *pfile ATTRIBUTE_UNUSED, unsigned int line,\n+cb_include (cpp_reader *pfile ATTRIBUTE_UNUSED, fileline line,\n \t    const unsigned char *dir, const char *header, int angle_brackets)\n {\n   maybe_print_line (print.map, line);\n@@ -372,7 +371,7 @@ pp_file_change (const struct line_map *map)\n \n /* Copy a #pragma directive to the preprocessed output.  */\n static void\n-cb_def_pragma (cpp_reader *pfile, unsigned int line)\n+cb_def_pragma (cpp_reader *pfile, fileline line)\n {\n   maybe_print_line (print.map, line);\n   fputs (\"#pragma \", print.outf);"}, {"sha": "d0081557d7012f9c6067338bf033dc32538f2d8b", "filename": "gcc/cpphash.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c18b4ac858dcbfa31ecf411c7f44289771765f/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c18b4ac858dcbfa31ecf411c7f44289771765f/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=a1c18b4ac858dcbfa31ecf411c7f44289771765f", "patch": "@@ -451,7 +451,7 @@ struct cpp_reader\n     uchar *base;\n     uchar *limit;\n     uchar *cur;\n-    unsigned int first_line;\n+    fileline first_line;\n   } out;\n \n   /* Used to save the original line number during traditional"}]}