{"sha": "c4101929ef37bbc91668b2ba5bd22a5361448700", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQxMDE5MjllZjM3YmJjOTE2NjhiMmJhNWJkMjJhNTM2MTQ0ODcwMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-04-01T19:05:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-04-01T19:05:06Z"}, "message": "cxx-pretty-print.h (pp_cxx_cv_qualifiers): New.\n\n\t* cxx-pretty-print.h (pp_cxx_cv_qualifiers): New.\n\t* class.c (same_signature_p): Use type_memfn_quals.\n\t* cp-tree.h (TYPE_RAISES_EXCEPTIONS): Use\n\tFUNCTION_OR_METHOD_TYPE_CHECK.\n\t* error.c (dump_type_suffix): Add padding before cv-qualifiers.\n\t* pt.c (unify): Use static_fn_type.\n\nFrom-SVN: r197316", "tree": {"sha": "11f6d755e965f6edfc93747266815cdcce7d3a9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11f6d755e965f6edfc93747266815cdcce7d3a9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4101929ef37bbc91668b2ba5bd22a5361448700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4101929ef37bbc91668b2ba5bd22a5361448700", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4101929ef37bbc91668b2ba5bd22a5361448700", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4101929ef37bbc91668b2ba5bd22a5361448700/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2eed8e37019cecd79d95b81ecfb6f8605b6361fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eed8e37019cecd79d95b81ecfb6f8605b6361fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eed8e37019cecd79d95b81ecfb6f8605b6361fa"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "53dbc0b43a900065131be6ce69815fba8f5bd5b3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4101929ef37bbc91668b2ba5bd22a5361448700/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4101929ef37bbc91668b2ba5bd22a5361448700/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c4101929ef37bbc91668b2ba5bd22a5361448700", "patch": "@@ -1,3 +1,12 @@\n+2013-04-01  Jason Merrill  <jason@redhat.com>\n+\n+\t* cxx-pretty-print.h (pp_cxx_cv_qualifiers): New.\n+\t* class.c (same_signature_p): Use type_memfn_quals.\n+\t* cp-tree.h (TYPE_RAISES_EXCEPTIONS): Use\n+\tFUNCTION_OR_METHOD_TYPE_CHECK.\n+\t* error.c (dump_type_suffix): Add padding before cv-qualifiers.\n+\t* pt.c (unify): Use static_fn_type.\n+\n 2013-04-01  Bronek Kozicki <b.kozicki@gmail.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "6ac9a361486700ec8c7b4525163b0d3eb2051647", "filename": "gcc/cp/class.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4101929ef37bbc91668b2ba5bd22a5361448700/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4101929ef37bbc91668b2ba5bd22a5361448700/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=c4101929ef37bbc91668b2ba5bd22a5361448700", "patch": "@@ -2066,14 +2066,12 @@ same_signature_p (const_tree fndecl, const_tree base_fndecl)\n \t  && same_type_p (DECL_CONV_FN_TYPE (fndecl),\n \t\t\t  DECL_CONV_FN_TYPE (base_fndecl))))\n     {\n-      tree types, base_types;\n-      types = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n-      base_types = TYPE_ARG_TYPES (TREE_TYPE (base_fndecl));\n-      if ((cp_type_quals (TREE_TYPE (TREE_VALUE (base_types)))\n-\t   == cp_type_quals (TREE_TYPE (TREE_VALUE (types))))\n-\t  && (type_memfn_rqual (TREE_TYPE (fndecl))\n-\t      == type_memfn_rqual (TREE_TYPE (base_fndecl)))\n-\t  && compparms (TREE_CHAIN (base_types), TREE_CHAIN (types)))\n+      tree fntype = TREE_TYPE (fndecl);\n+      tree base_fntype = TREE_TYPE (base_fndecl);\n+      if (type_memfn_quals (fntype) == type_memfn_quals (base_fntype)\n+\t  && type_memfn_rqual (fntype) == type_memfn_rqual (base_fntype)\n+\t  && compparms (FUNCTION_FIRST_USER_PARMTYPE (fndecl),\n+\t\t\tFUNCTION_FIRST_USER_PARMTYPE (base_fndecl)))\n \treturn 1;\n     }\n   return 0;"}, {"sha": "08a646124bf49a5f38eb1f71da8abc0576ceda39", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4101929ef37bbc91668b2ba5bd22a5361448700/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4101929ef37bbc91668b2ba5bd22a5361448700/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c4101929ef37bbc91668b2ba5bd22a5361448700", "patch": "@@ -1888,7 +1888,8 @@ struct GTY((variable_size)) lang_type {\n    a deferred noexcept-specification, TREE_PURPOSE is a DEFERRED_NOEXCEPT\n    (for templates) or an OVERLOAD list of functions (for implicitly\n    declared functions).  */\n-#define TYPE_RAISES_EXCEPTIONS(NODE) TYPE_LANG_SLOT_1 (NODE)\n+#define TYPE_RAISES_EXCEPTIONS(NODE) \\\n+  TYPE_LANG_SLOT_1 (FUNCTION_OR_METHOD_TYPE_CHECK (NODE))\n \n /* For FUNCTION_TYPE or METHOD_TYPE, return 1 iff it is declared `throw()'\n    or noexcept(true).  */"}, {"sha": "0f7dc4a81741502d07caa5f2f26c01bead1e01bb", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4101929ef37bbc91668b2ba5bd22a5361448700/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4101929ef37bbc91668b2ba5bd22a5361448700/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=c4101929ef37bbc91668b2ba5bd22a5361448700", "patch": "@@ -42,6 +42,8 @@ typedef struct\n \n #define pp_cxx_cv_qualifier_seq(PP, T)   \\\n    pp_c_type_qualifier_list (pp_c_base (PP), T)\n+#define pp_cxx_cv_qualifiers(PP, CV)   \\\n+   pp_c_cv_qualifiers (pp_c_base (PP), CV, false)\n \n #define pp_cxx_whitespace(PP)\t\tpp_c_whitespace (pp_c_base (PP))\n #define pp_cxx_left_paren(PP)\t\tpp_c_left_paren (pp_c_base (PP))"}, {"sha": "c599b7dbc466d10add560737386ce9567fc64c7c", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4101929ef37bbc91668b2ba5bd22a5361448700/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4101929ef37bbc91668b2ba5bd22a5361448700/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=c4101929ef37bbc91668b2ba5bd22a5361448700", "patch": "@@ -829,10 +829,8 @@ dump_type_suffix (tree t, int flags)\n \t   anyway; they may in g++, but we'll just pretend otherwise.  */\n \tdump_parameters (arg, flags & ~TFF_FUNCTION_DEFAULT_ARGUMENTS);\n \n-\tif (TREE_CODE (t) == METHOD_TYPE)\n-\t  pp_cxx_cv_qualifier_seq (cxx_pp, class_of_this_parm (t));\n-\telse\n-\t  pp_cxx_cv_qualifier_seq (cxx_pp, t);\n+\tpp_base (cxx_pp)->padding = pp_before;\n+\tpp_cxx_cv_qualifiers (cxx_pp, type_memfn_quals (t));\n \tdump_ref_qualifier (t, flags);\n \tdump_exception_spec (TYPE_RAISES_EXCEPTIONS (t), flags);\n \tdump_type_suffix (TREE_TYPE (t), flags);"}, {"sha": "f1f8fe2dba5c36d8c9d7135cb651f1dbed9f6247", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4101929ef37bbc91668b2ba5bd22a5361448700/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4101929ef37bbc91668b2ba5bd22a5361448700/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c4101929ef37bbc91668b2ba5bd22a5361448700", "patch": "@@ -17085,9 +17085,6 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t deduces the type of the member as a function type. */\n       if (TYPE_PTRMEMFUNC_P (arg))\n \t{\n-\t  tree method_type;\n-\t  tree fntype;\n-\n \t  /* Check top-level cv qualifiers */\n \t  if (!check_cv_quals_for_unify (UNIFY_ALLOW_NONE, arg, parm))\n \t    return unify_cv_qual_mismatch (explain_p, parm, arg);\n@@ -17097,17 +17094,8 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t\t\t\t   UNIFY_ALLOW_NONE, explain_p);\n \n \t  /* Determine the type of the function we are unifying against. */\n-\t  method_type = TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (arg));\n-\t  fntype =\n-\t    build_function_type (TREE_TYPE (method_type),\n-\t\t\t\t TREE_CHAIN (TYPE_ARG_TYPES (method_type)));\n-\n-\t  /* Extract the cv-qualifiers and ref-qualifier of the member\n-\t     function from the implicit object parameter and place them\n-\t     on the function type to be restored later. */\n-\t  fntype = apply_memfn_quals (fntype,\n-\t\t\t\t      type_memfn_quals (method_type),\n-\t\t\t\t      type_memfn_rqual (method_type));\n+\t  tree fntype = static_fn_type (arg);\n+\n \t  return unify (tparms, targs, TREE_TYPE (parm), fntype, strict, explain_p);\n \t}\n "}]}