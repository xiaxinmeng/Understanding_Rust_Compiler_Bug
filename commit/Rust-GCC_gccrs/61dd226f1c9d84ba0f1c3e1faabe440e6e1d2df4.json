{"sha": "61dd226f1c9d84ba0f1c3e1faabe440e6e1d2df4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFkZDIyNmYxYzlkODRiYTBmMWMzZTFmYWFiZTQ0MGU2ZTFkMmRmNA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2008-02-23T01:00:42Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2008-02-23T01:00:42Z"}, "message": "rs6000.c (rs6000_legitimize_address): Check to ensure that we can address an entire entity > 8 bytes.\n\n\t* config/rs6000/rs6000.c (rs6000_legitimize_address): Check to\n\tensure that we can address an entire entity > 8 bytes.  Don't\n\tgenerate reg+reg addressing for such data.\n\nFrom-SVN: r132567", "tree": {"sha": "fc8d0ee8fd48c04b14099c057f2fab16c384236c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc8d0ee8fd48c04b14099c057f2fab16c384236c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61dd226f1c9d84ba0f1c3e1faabe440e6e1d2df4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61dd226f1c9d84ba0f1c3e1faabe440e6e1d2df4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61dd226f1c9d84ba0f1c3e1faabe440e6e1d2df4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61dd226f1c9d84ba0f1c3e1faabe440e6e1d2df4/comments", "author": null, "committer": null, "parents": [{"sha": "2165fd3855ad8437510ebba80c57fdfa8b25984b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2165fd3855ad8437510ebba80c57fdfa8b25984b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2165fd3855ad8437510ebba80c57fdfa8b25984b"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "9788e4d162a37d7c5a2947d964fbd0ecc474d33c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61dd226f1c9d84ba0f1c3e1faabe440e6e1d2df4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61dd226f1c9d84ba0f1c3e1faabe440e6e1d2df4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61dd226f1c9d84ba0f1c3e1faabe440e6e1d2df4", "patch": "@@ -1,3 +1,9 @@\n+2008-02-22  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_legitimize_address): Check to\n+\tensure that we can address an entire entity > 8 bytes.  Don't\n+\tgenerate reg+reg addressing for such data.\n+\n 2008-02-22  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/rs6000/rs6000.h (CONSTANT_ALIGNMENT): Don't overalign"}, {"sha": "fb6aa19659ad8426b4736cd4c48b8fd0c726343b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61dd226f1c9d84ba0f1c3e1faabe440e6e1d2df4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61dd226f1c9d84ba0f1c3e1faabe440e6e1d2df4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=61dd226f1c9d84ba0f1c3e1faabe440e6e1d2df4", "patch": "@@ -3630,19 +3630,29 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n       /* We accept [reg + reg] and [reg + OFFSET].  */\n \n       if (GET_CODE (x) == PLUS)\n-\t{\n-\t  rtx op1 = XEXP (x, 0);\n-\t  rtx op2 = XEXP (x, 1);\n-\n-\t  op1 = force_reg (Pmode, op1);\n-\n-\t  if (GET_CODE (op2) != REG\n-\t      && (GET_CODE (op2) != CONST_INT\n-\t\t  || !SPE_CONST_OFFSET_OK (INTVAL (op2))))\n-\t    op2 = force_reg (Pmode, op2);\n-\n-\t  return gen_rtx_PLUS (Pmode, op1, op2);\n-\t}\n+       {\n+         rtx op1 = XEXP (x, 0);\n+         rtx op2 = XEXP (x, 1);\n+         rtx y;\n+\n+         op1 = force_reg (Pmode, op1);\n+\n+         if (GET_CODE (op2) != REG\n+             && (GET_CODE (op2) != CONST_INT\n+                 || !SPE_CONST_OFFSET_OK (INTVAL (op2))\n+                 || (GET_MODE_SIZE (mode) > 8\n+                     && !SPE_CONST_OFFSET_OK (INTVAL (op2) + 8))))\n+           op2 = force_reg (Pmode, op2);\n+\n+         /* We can't always do [reg + reg] for these, because [reg +\n+            reg + offset] is not a legitimate addressing mode.  */\n+         y = gen_rtx_PLUS (Pmode, op1, op2);\n+\n+         if (GET_MODE_SIZE (mode) > 8 && REG_P (op2))\n+           return force_reg (Pmode, y);\n+         else\n+           return y;\n+       }\n \n       return force_reg (Pmode, x);\n     }"}]}