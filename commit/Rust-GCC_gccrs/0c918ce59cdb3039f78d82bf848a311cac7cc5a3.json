{"sha": "0c918ce59cdb3039f78d82bf848a311cac7cc5a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM5MThjZTU5Y2RiMzAzOWY3OGQ4MmJmODQ4YTMxMWNhYzdjYzVhMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-04-04T04:45:23Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-04-04T04:45:23Z"}, "message": "cp-tree.h (OPERATOR_ASSIGN_FORMAT): Remove.\n\n\t* cp-tree.h (OPERATOR_ASSIGN_FORMAT): Remove.\n\t(OPERATOR_FORMAT): Likewise.\n\t(OPERATOR_TYPENAME_FORMAT): Likewise.\n\t* operators.def: Remove old name-mangling information.\n\t* decl.c (grok_op_properties): Adjust accordingly.\n\t* lex.c (init_operators): Likewise.\n\t* rtti.c (get_tinfo_decl): Issue error messages about types that\n\thave variable size.\n\nFrom-SVN: r41076", "tree": {"sha": "529dd0d4b3f60af20d59f63f73507583bf1e51cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/529dd0d4b3f60af20d59f63f73507583bf1e51cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c918ce59cdb3039f78d82bf848a311cac7cc5a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c918ce59cdb3039f78d82bf848a311cac7cc5a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c918ce59cdb3039f78d82bf848a311cac7cc5a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c918ce59cdb3039f78d82bf848a311cac7cc5a3/comments", "author": null, "committer": null, "parents": [{"sha": "19ec6a367c17e084d0a9165a1d2284eebb0fe311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ec6a367c17e084d0a9165a1d2284eebb0fe311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19ec6a367c17e084d0a9165a1d2284eebb0fe311"}], "stats": {"total": 186, "additions": 108, "deletions": 78}, "files": [{"sha": "7821a081267a700ab098fe4c7287ab0d70d03dd6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c918ce59cdb3039f78d82bf848a311cac7cc5a3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c918ce59cdb3039f78d82bf848a311cac7cc5a3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0c918ce59cdb3039f78d82bf848a311cac7cc5a3", "patch": "@@ -1,3 +1,14 @@\n+2001-04-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (OPERATOR_ASSIGN_FORMAT): Remove.\n+\t(OPERATOR_FORMAT): Likewise.\n+\t(OPERATOR_TYPENAME_FORMAT): Likewise.\n+\t* operators.def: Remove old name-mangling information.\n+\t* decl.c (grok_op_properties): Adjust accordingly.\n+\t* lex.c (init_operators): Likewise.\n+\t* rtti.c (get_tinfo_decl): Issue error messages about types that\n+\thave variable size.\n+\n 2001-04-03  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl2.c (import_export_decl): Don't call import_export_class "}, {"sha": "6a7a9cae1cec39d309ac89f73a29c94d369022a0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c918ce59cdb3039f78d82bf848a311cac7cc5a3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c918ce59cdb3039f78d82bf848a311cac7cc5a3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0c918ce59cdb3039f78d82bf848a311cac7cc5a3", "patch": "@@ -3237,10 +3237,6 @@ extern varray_type local_classes;\n \f\n /* Here's where we control how name mangling takes place.  */\n \n-#define OPERATOR_ASSIGN_FORMAT \"__a%s\"\n-#define OPERATOR_FORMAT \"__%s\"\n-#define OPERATOR_TYPENAME_FORMAT \"__op\"\n-\n /* Cannot use '$' up front, because this confuses gdb\n    (names beginning with '$' are gdb-local identifiers).\n "}, {"sha": "58844cb1aedbed8480fc14fb3ea7cdf0d1a923c4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c918ce59cdb3039f78d82bf848a311cac7cc5a3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c918ce59cdb3039f78d82bf848a311cac7cc5a3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0c918ce59cdb3039f78d82bf848a311cac7cc5a3", "patch": "@@ -12099,17 +12099,17 @@ grok_op_properties (decl, virtualp, friendp)\n   else\n     do\n       {\n-#define DEF_OPERATOR(NAME, CODE, NEW_MANGLING, OLD_MANGING, ARITY, ASSN_P)  \\\n-\tif (ansi_opname (CODE) == name)\t\t\t\t\t    \\\n-\t  {\t\t\t\t\t\t\t\t    \\\n-\t    operator_code = CODE;\t\t\t\t\t    \\\n-\t    break;\t\t\t\t\t\t\t    \\\n-\t  }\t\t\t\t\t\t\t\t    \\\n-\telse if (ansi_assopname (CODE) == name)\t\t\t\t    \\\n-\t  {\t\t\t\t\t\t\t\t    \\\n-\t    operator_code = CODE;\t\t\t\t\t    \\\n-\t    DECL_ASSIGNMENT_OPERATOR_P (decl) = 1;\t\t\t    \\\n-\t    break;\t\t\t\t\t\t\t    \\\n+#define DEF_OPERATOR(NAME, CODE, MANGLING, ARITY, ASSN_P)\t\\\n+\tif (ansi_opname (CODE) == name)\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    operator_code = CODE;\t\t\t\t\\\n+\t    break;\t\t\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+\telse if (ansi_assopname (CODE) == name)\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    operator_code = CODE;\t\t\t\t\\\n+\t    DECL_ASSIGNMENT_OPERATOR_P (decl) = 1;\t\t\\\n+\t    break;\t\t\t\t\t\t\\\n \t  }\n \n #include \"operators.def\""}, {"sha": "ef9314ccefa58e732343f0c05010a3523a8dcbd5", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c918ce59cdb3039f78d82bf848a311cac7cc5a3/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c918ce59cdb3039f78d82bf848a311cac7cc5a3/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=0c918ce59cdb3039f78d82bf848a311cac7cc5a3", "patch": "@@ -313,7 +313,7 @@ operator_name_info_t assignment_operator_name_info[(int) LAST_CPLUS_TREE_CODE];\n \n /* Initialize data structures that keep track of operator names.  */\n \n-#define DEF_OPERATOR(NAME, C, NM, OM, AR, AP) \\\n+#define DEF_OPERATOR(NAME, C, M, AR, AP) \\\n  CONSTRAINT (C, sizeof \"operator \" + sizeof NAME <= 256);\n #include \"operators.def\"\n #undef DEF_OPERATOR\n@@ -325,7 +325,7 @@ init_operators ()\n   char buffer[256];\n   struct operator_name_info_t *oni;\n \n-#define DEF_OPERATOR(NAME, CODE, NEW_MANGLING, OLD_MANGLING, ARITY, ASSN_P) \\\n+#define DEF_OPERATOR(NAME, CODE, MANGLING, ARITY, ASSN_P)\t\t    \\\n   sprintf (buffer, ISALPHA (NAME[0]) ? \"operator %s\" : \"operator%s\", NAME); \\\n   identifier = get_identifier (buffer);\t\t\t\t\t    \\\n   IDENTIFIER_OPNAME_P (identifier) = 1;\t\t\t\t\t    \\\n@@ -335,7 +335,7 @@ init_operators ()\n \t : &operator_name_info[(int) CODE]);\t\t\t\t    \\\n   oni->identifier = identifier;\t\t\t\t\t\t    \\\n   oni->name = NAME;\t\t\t\t\t\t\t    \\\n-  oni->mangled_name = NEW_MANGLING;\n+  oni->mangled_name = MANGLING;\n \n #include \"operators.def\"\n #undef DEF_OPERATOR"}, {"sha": "ddae93a6840bdfe95c31dcc7aab6392e9a802338", "filename": "gcc/cp/operators.def", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c918ce59cdb3039f78d82bf848a311cac7cc5a3/gcc%2Fcp%2Foperators.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c918ce59cdb3039f78d82bf848a311cac7cc5a3/gcc%2Fcp%2Foperators.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foperators.def?ref=0c918ce59cdb3039f78d82bf848a311cac7cc5a3", "patch": "@@ -5,7 +5,7 @@\n    non-overloadable operators (like the `?:' ternary operator).  \n    Writtey by Mark Mitchell <mark@codesourcery.com>\n \n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -71,84 +71,84 @@ Boston, MA 02111-1307, USA.  */\n    arguments are as for DEF_OPERATOR, but there is no need to provide\n    an ASSIGNMENT_P argument; it is always zero.  */\n \n-#define DEF_SIMPLE_OPERATOR(NAME, CODE, NEW_MANGLING, OLD_MANGLING, ARITY) \\\n-  DEF_OPERATOR(NAME, CODE, NEW_MANGLING, OLD_MANGLING, ARITY, 0)\n+#define DEF_SIMPLE_OPERATOR(NAME, CODE, MANGLING, ARITY) \\\n+  DEF_OPERATOR(NAME, CODE, MANGLING, ARITY, 0)\n \n /* Use DEF_ASSN_OPERATOR to define an assignment operator.  Its\n    arguments are as for DEF_OPERATOR, but there is no need to provide\n    an ASSIGNMENT_P argument; it is always one.  */\n \n-#define DEF_ASSN_OPERATOR(NAME, CODE, NEW_MANGLING, OLD_MANGLING, ARITY) \\\n-  DEF_OPERATOR(NAME, CODE, NEW_MANGLING, OLD_MANGLING, ARITY, 1)\n+#define DEF_ASSN_OPERATOR(NAME, CODE, MANGLING, ARITY) \\\n+  DEF_OPERATOR(NAME, CODE, MANGLING, ARITY, 1)\n \n /* Memory allocation operators.  */\n-DEF_SIMPLE_OPERATOR (\"new\", NEW_EXPR, \"nw\", \"__nw\", -1)\n-DEF_SIMPLE_OPERATOR (\"new []\", VEC_NEW_EXPR, \"na\", \"__vn\", -1)\n-DEF_SIMPLE_OPERATOR (\"delete\", DELETE_EXPR, \"dl\", \"__dl\", -1)\n-DEF_SIMPLE_OPERATOR (\"delete []\", VEC_DELETE_EXPR, \"da\", \"__vd\", -1)\n+DEF_SIMPLE_OPERATOR (\"new\", NEW_EXPR, \"nw\", -1)\n+DEF_SIMPLE_OPERATOR (\"new []\", VEC_NEW_EXPR, \"na\", -1)\n+DEF_SIMPLE_OPERATOR (\"delete\", DELETE_EXPR, \"dl\", -1)\n+DEF_SIMPLE_OPERATOR (\"delete []\", VEC_DELETE_EXPR, \"da\", -1)\n \n /* Unary operators.  */\n-DEF_SIMPLE_OPERATOR (\"+\", CONVERT_EXPR, \"ps\", \"__pl\", 1)\n-DEF_SIMPLE_OPERATOR (\"-\", NEGATE_EXPR, \"ng\", \"__mi\", 1)\n-DEF_SIMPLE_OPERATOR (\"&\", ADDR_EXPR, \"ad\", \"__ad\", 1)\n-DEF_SIMPLE_OPERATOR (\"*\", INDIRECT_REF, \"de\", \"__ml\", 1)\n-DEF_SIMPLE_OPERATOR (\"~\", BIT_NOT_EXPR, \"co\", \"__co\", 1)\n-DEF_SIMPLE_OPERATOR (\"!\", TRUTH_NOT_EXPR, \"nt\", \"__nt\", 1)\n-DEF_SIMPLE_OPERATOR (\"++\", PREINCREMENT_EXPR, \"pp\", \"__pp\", 1)\n-DEF_SIMPLE_OPERATOR (\"--\", PREDECREMENT_EXPR, \"mm\", \"__mm\", 1)\n-DEF_SIMPLE_OPERATOR (\"sizeof\", SIZEOF_EXPR, \"sz\", \"__sz\", 1)\n+DEF_SIMPLE_OPERATOR (\"+\", CONVERT_EXPR, \"ps\", 1)\n+DEF_SIMPLE_OPERATOR (\"-\", NEGATE_EXPR, \"ng\", 1)\n+DEF_SIMPLE_OPERATOR (\"&\", ADDR_EXPR, \"ad\", 1)\n+DEF_SIMPLE_OPERATOR (\"*\", INDIRECT_REF, \"de\", 1)\n+DEF_SIMPLE_OPERATOR (\"~\", BIT_NOT_EXPR, \"co\", 1)\n+DEF_SIMPLE_OPERATOR (\"!\", TRUTH_NOT_EXPR, \"nt\", 1)\n+DEF_SIMPLE_OPERATOR (\"++\", PREINCREMENT_EXPR, \"pp\", 1)\n+DEF_SIMPLE_OPERATOR (\"--\", PREDECREMENT_EXPR, \"mm\", 1)\n+DEF_SIMPLE_OPERATOR (\"sizeof\", SIZEOF_EXPR, \"sz\", 1)\n /* This is an extension.  */\n-DEF_SIMPLE_OPERATOR (\"alignof\", ALIGNOF_EXPR, \"v17alignof\", \"__al\", 1)\n+DEF_SIMPLE_OPERATOR (\"alignof\", ALIGNOF_EXPR, \"v17alignof\", 1)\n \n /* The cast operator.  */\n-DEF_SIMPLE_OPERATOR (\"\", TYPE_EXPR, \"cv\", OPERATOR_TYPENAME_FORMAT, 1)\n+DEF_SIMPLE_OPERATOR (\"\", TYPE_EXPR, \"cv\", 1)\n \n /* Binary operators.  */\n-DEF_SIMPLE_OPERATOR (\"+\", PLUS_EXPR, \"pl\", \"__pl\", 2)\n-DEF_SIMPLE_OPERATOR (\"-\", MINUS_EXPR, \"mi\", \"__mi\", 2)\n-DEF_SIMPLE_OPERATOR (\"*\", MULT_EXPR, \"ml\", \"__ml\", 2)\n-DEF_SIMPLE_OPERATOR (\"/\", TRUNC_DIV_EXPR, \"dv\", \"__dv\", 2)\n-DEF_SIMPLE_OPERATOR (\"%\", TRUNC_MOD_EXPR, \"rm\", \"__md\", 2)\n-DEF_SIMPLE_OPERATOR (\"&\", BIT_AND_EXPR, \"an\", \"__ad\", 2)\n-DEF_SIMPLE_OPERATOR (\"|\", BIT_IOR_EXPR, \"or\", \"__or\", 2)\n-DEF_SIMPLE_OPERATOR (\"^\", BIT_XOR_EXPR, \"eo\", \"__er\", 2)\n-DEF_SIMPLE_OPERATOR (\"<<\", LSHIFT_EXPR, \"ls\", \"__ls\", 2)\n-DEF_SIMPLE_OPERATOR (\">>\", RSHIFT_EXPR, \"rs\", \"__rs\", 2)\n-DEF_SIMPLE_OPERATOR (\"==\", EQ_EXPR, \"eq\", \"__eq\", 2)\n-DEF_SIMPLE_OPERATOR (\"!=\", NE_EXPR, \"ne\", \"__ne\", 2)\n-DEF_SIMPLE_OPERATOR (\"<\", LT_EXPR, \"lt\", \"__lt\", 2)\n-DEF_SIMPLE_OPERATOR (\">\", GT_EXPR, \"gt\", \"__gt\", 2)\n-DEF_SIMPLE_OPERATOR (\"<=\", LE_EXPR, \"le\", \"__le\", 2)\n-DEF_SIMPLE_OPERATOR (\">=\", GE_EXPR, \"ge\", \"__ge\", 2)\n-DEF_SIMPLE_OPERATOR (\"&&\", TRUTH_ANDIF_EXPR, \"aa\", \"__aa\", 2)\n-DEF_SIMPLE_OPERATOR (\"||\", TRUTH_ORIF_EXPR, \"oo\", \"__oo\", 2)\n-DEF_SIMPLE_OPERATOR (\",\", COMPOUND_EXPR, \"cm\", \"__cm\", 2)\n-DEF_SIMPLE_OPERATOR (\"->*\", MEMBER_REF, \"pm\", \"__rm\", 2)\n-DEF_SIMPLE_OPERATOR (\"->\", COMPONENT_REF, \"pt\", \"__rf\", 2)\n-DEF_SIMPLE_OPERATOR (\"[]\", ARRAY_REF, \"ix\", \"__vc\", 2)\n-DEF_SIMPLE_OPERATOR (\"++\", POSTINCREMENT_EXPR, \"pp\", \"__pp\", 2)\n-DEF_SIMPLE_OPERATOR (\"--\", POSTDECREMENT_EXPR, \"mm\", \"__mm\", 2)\n+DEF_SIMPLE_OPERATOR (\"+\", PLUS_EXPR, \"pl\", 2)\n+DEF_SIMPLE_OPERATOR (\"-\", MINUS_EXPR, \"mi\", 2)\n+DEF_SIMPLE_OPERATOR (\"*\", MULT_EXPR, \"ml\", 2)\n+DEF_SIMPLE_OPERATOR (\"/\", TRUNC_DIV_EXPR, \"dv\", 2)\n+DEF_SIMPLE_OPERATOR (\"%\", TRUNC_MOD_EXPR, \"rm\", 2)\n+DEF_SIMPLE_OPERATOR (\"&\", BIT_AND_EXPR, \"an\", 2)\n+DEF_SIMPLE_OPERATOR (\"|\", BIT_IOR_EXPR, \"or\", 2)\n+DEF_SIMPLE_OPERATOR (\"^\", BIT_XOR_EXPR, \"eo\", 2)\n+DEF_SIMPLE_OPERATOR (\"<<\", LSHIFT_EXPR, \"ls\", 2)\n+DEF_SIMPLE_OPERATOR (\">>\", RSHIFT_EXPR, \"rs\", 2)\n+DEF_SIMPLE_OPERATOR (\"==\", EQ_EXPR, \"eq\", 2)\n+DEF_SIMPLE_OPERATOR (\"!=\", NE_EXPR, \"ne\", 2)\n+DEF_SIMPLE_OPERATOR (\"<\", LT_EXPR, \"lt\", 2)\n+DEF_SIMPLE_OPERATOR (\">\", GT_EXPR, \"gt\", 2)\n+DEF_SIMPLE_OPERATOR (\"<=\", LE_EXPR, \"le\", 2)\n+DEF_SIMPLE_OPERATOR (\">=\", GE_EXPR, \"ge\", 2)\n+DEF_SIMPLE_OPERATOR (\"&&\", TRUTH_ANDIF_EXPR, \"aa\", 2)\n+DEF_SIMPLE_OPERATOR (\"||\", TRUTH_ORIF_EXPR, \"oo\", 2)\n+DEF_SIMPLE_OPERATOR (\",\", COMPOUND_EXPR, \"cm\", 2)\n+DEF_SIMPLE_OPERATOR (\"->*\", MEMBER_REF, \"pm\", 2)\n+DEF_SIMPLE_OPERATOR (\"->\", COMPONENT_REF, \"pt\", 2)\n+DEF_SIMPLE_OPERATOR (\"[]\", ARRAY_REF, \"ix\", 2)\n+DEF_SIMPLE_OPERATOR (\"++\", POSTINCREMENT_EXPR, \"pp\", 2)\n+DEF_SIMPLE_OPERATOR (\"--\", POSTDECREMENT_EXPR, \"mm\", 2)\n /* These are extensions.  */\n-DEF_SIMPLE_OPERATOR (\"<?\", MIN_EXPR, \"v23min\", \"__mn\", 2)\n-DEF_SIMPLE_OPERATOR (\">?\", MAX_EXPR, \"v23max\", \"__mx\", 2)\n+DEF_SIMPLE_OPERATOR (\"<?\", MIN_EXPR, \"v23min\", 2)\n+DEF_SIMPLE_OPERATOR (\">?\", MAX_EXPR, \"v23max\", 2)\n /* This one is needed for mangling.  */\n-DEF_SIMPLE_OPERATOR (\"::\", SCOPE_REF, \"sr\", NULL, 2);\n+DEF_SIMPLE_OPERATOR (\"::\", SCOPE_REF, \"sr\", 2);\n \n /* Assignment operators.  */\n-DEF_ASSN_OPERATOR (\"=\", NOP_EXPR, \"aS\", \"__as\", 2)\n-DEF_ASSN_OPERATOR (\"+=\", PLUS_EXPR, \"pL\", \"__apl\", 2)\n-DEF_ASSN_OPERATOR (\"-=\", MINUS_EXPR, \"mI\", \"__ami\", 2)\n-DEF_ASSN_OPERATOR (\"*=\", MULT_EXPR, \"mL\", \"__aml\", 2)\n-DEF_ASSN_OPERATOR (\"/=\", TRUNC_DIV_EXPR, \"dV\", \"__adv\", 2)\n-DEF_ASSN_OPERATOR (\"%=\", TRUNC_MOD_EXPR, \"rM\", \"__amd\", 2)\n-DEF_ASSN_OPERATOR (\"&=\", BIT_AND_EXPR, \"aN\", \"__aad\", 2)\n-DEF_ASSN_OPERATOR (\"|=\", BIT_IOR_EXPR, \"oR\", \"__aor\", 2)\n-DEF_ASSN_OPERATOR (\"^=\", BIT_XOR_EXPR, \"eO\", \"__aer\", 2)\n-DEF_ASSN_OPERATOR (\"<<=\", LSHIFT_EXPR, \"lS\", \"__als\", 2)\n-DEF_ASSN_OPERATOR (\">>=\", RSHIFT_EXPR, \"rS\", \"__ars\", 2)\n+DEF_ASSN_OPERATOR (\"=\", NOP_EXPR, \"aS\", 2)\n+DEF_ASSN_OPERATOR (\"+=\", PLUS_EXPR, \"pL\", 2)\n+DEF_ASSN_OPERATOR (\"-=\", MINUS_EXPR, \"mI\", 2)\n+DEF_ASSN_OPERATOR (\"*=\", MULT_EXPR, \"mL\", 2)\n+DEF_ASSN_OPERATOR (\"/=\", TRUNC_DIV_EXPR, \"dV\", 2)\n+DEF_ASSN_OPERATOR (\"%=\", TRUNC_MOD_EXPR, \"rM\", 2)\n+DEF_ASSN_OPERATOR (\"&=\", BIT_AND_EXPR, \"aN\", 2)\n+DEF_ASSN_OPERATOR (\"|=\", BIT_IOR_EXPR, \"oR\", 2)\n+DEF_ASSN_OPERATOR (\"^=\", BIT_XOR_EXPR, \"eO\", 2)\n+DEF_ASSN_OPERATOR (\"<<=\", LSHIFT_EXPR, \"lS\", 2)\n+DEF_ASSN_OPERATOR (\">>=\", RSHIFT_EXPR, \"rS\", 2)\n \n /* Ternary operators.  */\n-DEF_SIMPLE_OPERATOR (\"?:\", COND_EXPR, \"qu\", \"__cn\", 3)\n+DEF_SIMPLE_OPERATOR (\"?:\", COND_EXPR, \"qu\", 3)\n \n /* Miscellaneous.  */\n-DEF_SIMPLE_OPERATOR (\"()\", CALL_EXPR, \"cl\", \"__cl\", -1)\n+DEF_SIMPLE_OPERATOR (\"()\", CALL_EXPR, \"cl\", -1)"}, {"sha": "1550e4209dbac1967bc23c87db7c9569da3c3073", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c918ce59cdb3039f78d82bf848a311cac7cc5a3/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c918ce59cdb3039f78d82bf848a311cac7cc5a3/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=0c918ce59cdb3039f78d82bf848a311cac7cc5a3", "patch": "@@ -325,6 +325,14 @@ get_tinfo_decl (type)\n   tree name;\n   tree d;\n \n+  if (COMPLETE_TYPE_P (type) \n+      && TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n+    {\n+      cp_error (\"cannot create type information for type `%T' because its size is variable\", \n+\t\ttype);\n+      return error_mark_node;\n+    }\n+\n   if (TREE_CODE (type) == OFFSET_TYPE)\n     type = TREE_TYPE (type);\n   if (TREE_CODE (type) == METHOD_TYPE)"}, {"sha": "e50f3c2bf876562045a702f2f8775a2d31dbcef1", "filename": "gcc/testsuite/g++.old-deja/g++.other/typeid1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c918ce59cdb3039f78d82bf848a311cac7cc5a3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypeid1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c918ce59cdb3039f78d82bf848a311cac7cc5a3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypeid1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypeid1.C?ref=0c918ce59cdb3039f78d82bf848a311cac7cc5a3", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link:\n+// Origin: sk@gluit.de\n+// Special g++ Options: \n+\n+#include <typeinfo>\n+\n+int main ()\n+{\n+  typeid(char*);\n+  \n+  int len = 1;\n+  char carr[len];\n+  typeid(typeof(carr)); // ERROR - type has variable size\n+  typeid(carr); // ERROR - type has variable size\n+}"}]}