{"sha": "f7f4628054358a92a55d52645cf107aa26ff6765", "node_id": "C_kwDOANBUbNoAKGY3ZjQ2MjgwNTQzNThhOTJhNTVkNTI2NDVjZjEwN2FhMjZmZjY3NjU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-07T16:01:58Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-07T16:01:58Z"}, "message": "c++ modules: ICE with bitfield in class template\n\nAccording to grokbitfield, DECL_BIT_FIELD_REPRESENTATIVE contains the\nwidth of the bitfield until we layout the class type (after which it'll\ncontain a decl).  Thus for a bitfield in a class template it'll always\nbe the width, and this patch makes us avoid ICEing from mark_class_def\nin this case.\n\ngcc/cp/ChangeLog:\n\n\t* module.cc (trees_out::mark_class_def): Guard against\n\tDECL_BIT_FIELD_REPRESENTATIVE not being a decl.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/modules/bfield-3.H: New test.", "tree": {"sha": "156cf9103fca664022bdde817e6c4a2b7ec39da1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/156cf9103fca664022bdde817e6c4a2b7ec39da1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7f4628054358a92a55d52645cf107aa26ff6765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7f4628054358a92a55d52645cf107aa26ff6765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7f4628054358a92a55d52645cf107aa26ff6765", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7f4628054358a92a55d52645cf107aa26ff6765/comments", "author": null, "committer": null, "parents": [{"sha": "f8ba88b6a811ca9bb4b8411d3f65c329fb480ee1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ba88b6a811ca9bb4b8411d3f65c329fb480ee1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8ba88b6a811ca9bb4b8411d3f65c329fb480ee1"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "94fbee8522525b97b855a9f6ab6e40b5ace4bf3e", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f4628054358a92a55d52645cf107aa26ff6765/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f4628054358a92a55d52645cf107aa26ff6765/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=f7f4628054358a92a55d52645cf107aa26ff6765", "patch": "@@ -11919,7 +11919,11 @@ trees_out::mark_class_def (tree defn)\n \tmark_class_member (member);\n \tif (TREE_CODE (member) == FIELD_DECL)\n \t  if (tree repr = DECL_BIT_FIELD_REPRESENTATIVE (member))\n-\t    mark_declaration (repr, false);\n+\t    /* If we're marking a class template definition, then\n+\t       this'll contain the width (as set by grokbitfield)\n+\t       instead of a decl.  */\n+\t    if (DECL_P (repr))\n+\t      mark_declaration (repr, false);\n       }\n \n   /* Mark the binfo hierarchy.  */"}, {"sha": "4fd4db7116a277e85978f411f8bc78f53d66a305", "filename": "gcc/testsuite/g++.dg/modules/bfield-3.H", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f4628054358a92a55d52645cf107aa26ff6765/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fbfield-3.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f4628054358a92a55d52645cf107aa26ff6765/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fbfield-3.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fbfield-3.H?ref=f7f4628054358a92a55d52645cf107aa26ff6765", "patch": "@@ -0,0 +1,8 @@\n+// { dg-additional-options -fmodule-header }\n+// { dg-module-cmi {} }\n+\n+template<int N>\n+struct A {\n+  int x : 1;\n+  int y : N;\n+};"}]}