{"sha": "c581c5205ae33fdf22ec27cd30047dd45abfb085", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU4MWM1MjA1YWUzM2ZkZjIyZWMyN2NkMzAwNDdkZDQ1YWJmYjA4NQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-12-15T10:21:24Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-12-15T10:21:24Z"}, "message": "exp_unst.adb (Unnest_Subprograms): Nothing to do if the main unit is a generic package body.\n\ngcc/ada/\n\n2017-12-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_unst.adb (Unnest_Subprograms): Nothing to do if the main unit is\n\ta generic package body. Unnesting is only an issue when generating\n\tcode, and if the main unit is generic then nested instance bodies have\n\tnot been created and analyzed, and unnesting will crash in the absence\n\tof those bodies,\n\n2017-12-15  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* inline.adb (Add_Inlined_Body): Do not add a function which is\n\tcompleted by an expression function defined in the same context as the\n\tinitial declaration because the completing body is not in a package\n\tbody.\n\t(Is_Non_Loading_Expression_Function): New routine.\n\n2017-12-15  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* debug.adb: Move the functionality of -gnatdL to -gnatd_i. Restore\n\tthe behavior of -gnatdL from before revision 255412.\n\t* sem_elab.adb: Update the section of compiler switches.\n\t(Build_Call_Marker): Do not create a marker for a call which originates\n\tfrom an expanded spec or body of an instantiated gener, does not invoke\n\ta generic formal subprogram, the target is external to the instance,\n\tand -gnatdL is in effect.\n\t(In_External_Context): New routine.\n\t(Process_Conditional_ABE_Activation_Impl): Update the uses of -gnatdL\n\tand associated flag.\n\t(Process_Conditional_ABE_Call): Update the uses of -gnatdL and\n\tassociated flag.\n\t* switch-c.adb (Scan_Front_End_Switches): Switch -gnatJ now sets switch\n\t-gnatd_i.\n\t* exp_unst.adb: Minor typo fixes and edits.\n\n2017-12-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Possible_Freeze): Do not set Delayed_Freeze on an\n\tsubprogram instantiation, now that the enclosing wrapper package\n\tcarries an explicit freeze node. THis prevents freeze nodes for the\n\tsubprogram for appearing in the wrong scope. This is relevant when the\n\tgeneric subprogram has a private or incomplete formal type and the\n\tinstance appears within a package that declares the actual type for the\n\tinstantiation, and that type has itself a delayed freeze.\n\n2017-12-15  Patrick Bernardi  <bernardi@adacore.com>\n\n\t* doc/gnat_ugn/gnat_and_program_execution.rst: Removed references to\n\tthe environment variable GNAT_STACK_LIMIT from the Stack Overflow\n\tChecking section as it is no longer used by any of our supported\n\ttargets.\n\ngcc/testsuite/\n\n2017-12-15  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* gnat.dg/expr_func_main.adb, gnat.dg/expr_func_pkg.ads,\n\tgnat.dg/expr_func_pkg.adb: New testcase.\n\n2017-12-15  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* gnat.dg/abe_pkg.adb, gnat.dg/abe_pkg.ads: New testcase.\n\n2017-12-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* gnat.dg/subp_inst.adb, gnat.dg/subp_inst_pkg.adb,\n\tgnat.dg/subp_inst_pkg.ads: New testcase.\n\nFrom-SVN: r255683", "tree": {"sha": "431fe8c09d32345713b3912483edaa98cb899423", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/431fe8c09d32345713b3912483edaa98cb899423"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c581c5205ae33fdf22ec27cd30047dd45abfb085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c581c5205ae33fdf22ec27cd30047dd45abfb085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c581c5205ae33fdf22ec27cd30047dd45abfb085", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c581c5205ae33fdf22ec27cd30047dd45abfb085/comments", "author": null, "committer": null, "parents": [{"sha": "56af86884f7795f5b77544744cd2e0ad825fcdde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56af86884f7795f5b77544744cd2e0ad825fcdde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56af86884f7795f5b77544744cd2e0ad825fcdde"}], "stats": {"total": 525, "additions": 387, "deletions": 138}, "files": [{"sha": "9c39e4c834d9e2cedcea546fe0dd61303f619e4d", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -6819,7 +6819,7 @@ package body Checks is\n \n       if Nkind (N) /= N_Attribute_Reference\n         and then (not Is_Entity_Name (N)\n-                    or else Treat_As_Volatile (Entity (N)))\n+                   or else Treat_As_Volatile (Entity (N)))\n       then\n          Force_Evaluation (N, Mode => Strict);\n       end if;"}, {"sha": "05b2c31d54ef91b1a1b169b23c4fe2d5dbe12274", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -153,7 +153,7 @@ package body Debug is\n    --  d_f\n    --  d_g\n    --  d_h\n-   --  d_i\n+   --  d_i  Ignore activations and calls to instances for elaboration\n    --  d_j\n    --  d_k\n    --  d_l\n@@ -479,8 +479,8 @@ package body Debug is\n    --       error messages are target dependent and irrelevant.\n \n    --  dL   The compiler ignores calls in instances and invoke subprograms\n-   --       which are external to the instance for the static elaboration\n-   --       model. This switch is orthogonal to d.G.\n+   --       which are external to the instance for both the static and dynamic\n+   --       elaboration models.\n \n    --  dM   Assume all variables have been modified, and ignore current value\n    --       indications. This debug flag disconnects the tracking of constant\n@@ -734,8 +734,7 @@ package body Debug is\n    --  d.G  Previously the compiler ignored calls via generic formal parameters\n    --       when doing the analysis for the static elaboration model. This is\n    --       now fixed, but we provide this debug flag to revert to the previous\n-   --       situation of ignoring such calls to aid in transition. This switch\n-   --       is orthogonal to dL.\n+   --       situation of ignoring such calls to aid in transition.\n \n    --  d.H  Sets ASIS_GNSA_Mode to True. This signals the front end to suppress\n    --       the call to gigi in ASIS_Mode.\n@@ -832,6 +831,10 @@ package body Debug is\n    --       control, conditional entry calls, timed entry calls, and requeue\n    --       statements in both the static and dynamic elaboration models.\n \n+   --  d_i  The compiler ignores calls and task activations when they target a\n+   --       subprogram or task type defined in an external instance for both\n+   --       the static and dynamic elaboration models.\n+\n    --  d_p  The compiler ignores calls to subprograms which verify the run-time\n    --       semantics of invariants and postconditions in both the static and\n    --       dynamic elaboration models."}, {"sha": "e350cb9d2db600ad8496b124ac7c68f4a363a25b", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -3722,33 +3722,14 @@ that any use of the stack (for procedure calls or for declaring local\n variables in declare blocks) does not exceed the available stack space.\n If the space is exceeded, then a ``Storage_Error`` exception is raised.\n \n-For declared tasks, the stack size is controlled by the size\n-given in an applicable ``Storage_Size`` pragma or by the value specified\n-at bind time with ``-d`` (:ref:`Switches_for_gnatbind`) or is set to\n-the default size as defined in the GNAT runtime otherwise.\n-\n-.. index:: GNAT_STACK_LIMIT\n-\n-For the environment task, the stack size depends on\n-system defaults and is unknown to the compiler. Stack checking\n-may still work correctly if a fixed\n-size stack is allocated, but this cannot be guaranteed.\n-To ensure that a clean exception is signalled for stack\n-overflow, set the environment variable\n-:envvar:`GNAT_STACK_LIMIT` to indicate the maximum\n-stack area that can be used, as in:\n-\n-  ::\n-\n-     $ SET GNAT_STACK_LIMIT 1600\n-\n-The limit is given in kilobytes, so the above declaration would\n-set the stack limit of the environment task to 1.6 megabytes.\n-Note that the only purpose of this usage is to limit the amount\n-of stack used by the environment task. If it is necessary to\n-increase the amount of stack for the environment task, then this\n-is an operating systems issue, and must be addressed with the\n-appropriate operating systems commands.\n+For declared tasks, the default stack size is defined by the GNAT runtime,\n+whose size may be modified at bind time through the ``-d`` bind switch\n+(:ref:`Switches_for_gnatbind`). Task specific stack sizes may be set using the\n+``Storage_Size`` pragma.\n+\n+For the environment task, the stack size is determined by the operating system.\n+Consequently, to modify the size of the environment task please refer to your\n+operating system documentation.\n \n \n .. _Static_Stack_Usage_Analysis:"}, {"sha": "add30b6c28dd8ce88f7b834768a20593f8f1c537", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -5356,7 +5356,7 @@ package body Exp_Ch6 is\n \n                          Else_Statements => New_List (\n                            Make_Raise_Program_Error (Loc,\n-                              Reason => PE_All_Guards_Closed)));\n+                             Reason => PE_All_Guards_Closed)));\n \n                      --  If a separate initialization assignment was created\n                      --  earlier, append that following the assignment of the"}, {"sha": "4dcb38dde0244ad3d5368cb25174ac6dd56726f4", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -4200,13 +4200,11 @@ package body Exp_Ch7 is\n    ----------------------------\n \n    procedure Expand_Cleanup_Actions (N : Node_Id) is\n-      pragma Assert\n-        (Nkind_In (N,\n-                   N_Extended_Return_Statement,\n-                   N_Block_Statement,\n-                   N_Subprogram_Body,\n-                   N_Task_Body,\n-                   N_Entry_Body));\n+      pragma Assert (Nkind_In (N, N_Block_Statement,\n+                                  N_Entry_Body,\n+                                  N_Extended_Return_Statement,\n+                                  N_Subprogram_Body,\n+                                  N_Task_Body));\n \n       Scop : constant Entity_Id := Current_Scope;\n \n@@ -4311,11 +4309,13 @@ package body Exp_Ch7 is\n       end if;\n \n       --  If an extended return statement contains something like\n+      --\n       --     X := F (...);\n+      --\n       --  where F is a build-in-place function call returning a controlled\n-      --  type, then a temporary object will be implicitly declared as part of\n-      --  the statement list, and this will need cleanup. In such cases, we\n-      --  transform:\n+      --  type, then a temporary object will be implicitly declared as part\n+      --  of the statement list, and this will need cleanup. In such cases,\n+      --  we transform:\n       --\n       --    return Result : T := ... do\n       --       <statements> -- possibly with handlers\n@@ -4336,14 +4336,15 @@ package body Exp_Ch7 is\n       if Nkind (N) = N_Extended_Return_Statement then\n          declare\n             Block : constant Node_Id :=\n-              Make_Block_Statement (Sloc (N),\n-               Declarations => Empty_List,\n-               Handled_Statement_Sequence =>\n-                 Handled_Statement_Sequence (N));\n+                      Make_Block_Statement (Sloc (N),\n+                        Declarations               => Empty_List,\n+                        Handled_Statement_Sequence =>\n+                          Handled_Statement_Sequence (N));\n          begin\n-            Set_Handled_Statement_Sequence\n-              (N, Make_Handled_Sequence_Of_Statements (Sloc (N),\n-                    Statements => New_List (Block)));\n+            Set_Handled_Statement_Sequence (N,\n+              Make_Handled_Sequence_Of_Statements (Sloc (N),\n+                Statements => New_List (Block)));\n+\n             Analyze (Block);\n          end;\n "}, {"sha": "c522c232490a686f7f0a48969afb67abed387e22", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -302,6 +302,16 @@ package body Exp_Unst is\n          return;\n       end if;\n \n+      --  If the main unit is a package body then we need to examine the spec\n+      --  to determine whether the main unit is generic (the scope stack is not\n+      --  present when this is called on the main unit).\n+\n+      if Ekind (Cunit_Entity (Main_Unit)) = E_Package_Body\n+        and then Is_Generic_Unit (Spec_Entity (Cunit_Entity (Main_Unit)))\n+      then\n+         return;\n+      end if;\n+\n       --  At least for now, do not unnest anything but main source unit\n \n       if not In_Extended_Main_Source_Unit (Subp_Body) then\n@@ -553,8 +563,8 @@ package body Exp_Unst is\n                Ent := Entity (Name (N));\n \n                --  We are only interested in calls to subprograms nested\n-               --  within Subp. Calls to Subp itself or to subprograms that\n-               --  are outside the nested structure do not affect us.\n+               --  within Subp. Calls to Subp itself or to subprograms\n+               --  that are outside the nested structure do not affect us.\n \n                if Scope_Within (Ent, Subp) then\n \n@@ -1653,7 +1663,6 @@ package body Exp_Unst is\n             if Present (STT.ARECnF)\n               and then Nkind (CTJ.N) /= N_Attribute_Reference\n             then\n-\n                --  CTJ.N is a call to a subprogram which may require a pointer\n                --  to an activation record. The subprogram containing the call\n                --  is CTJ.From and the subprogram being called is CTJ.To, so we"}, {"sha": "959d32bd60373be160dff09f406df3c12554df76", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -10701,8 +10701,8 @@ package body Exp_Util is\n               and then not Is_Empty_List (Then_Statements (N))\n               and then not Are_Wrapped (Then_Statements (N))\n               and then Requires_Cleanup_Actions\n-                         (Then_Statements (N),\n-                          Lib_Level => False,\n+                         (L                 => Then_Statements (N),\n+                          Lib_Level         => False,\n                           Nested_Constructs => False)\n             then\n                Block := Wrap_Statements_In_Block (Then_Statements (N));\n@@ -10720,8 +10720,8 @@ package body Exp_Util is\n               and then not Is_Empty_List (Else_Statements (N))\n               and then not Are_Wrapped (Else_Statements (N))\n               and then Requires_Cleanup_Actions\n-                         (Else_Statements (N),\n-                          Lib_Level => False,\n+                         (L                 => Else_Statements (N),\n+                          Lib_Level         => False,\n                           Nested_Constructs => False)\n             then\n                Block := Wrap_Statements_In_Block (Else_Statements (N));\n@@ -10742,8 +10742,8 @@ package body Exp_Util is\n             if not Is_Empty_List (Statements (N))\n               and then not Are_Wrapped (Statements (N))\n               and then Requires_Cleanup_Actions\n-                         (Statements (N),\n-                          Lib_Level => False,\n+                         (L                 => Statements (N),\n+                          Lib_Level         => False,\n                           Nested_Constructs => False)\n             then\n                if Nkind (N) = N_Loop_Statement\n@@ -11822,35 +11822,43 @@ package body Exp_Util is\n             | N_Task_Body\n          =>\n             return\n-              Requires_Cleanup_Actions\n-                (Declarations (N), At_Lib_Level, Nested_Constructs => True)\n-                or else\n-                  (Present (Handled_Statement_Sequence (N))\n-                    and then\n-                      Requires_Cleanup_Actions\n-                        (Statements (Handled_Statement_Sequence (N)),\n-                         At_Lib_Level, Nested_Constructs => True));\n+                Requires_Cleanup_Actions\n+                  (L                 => Declarations (N),\n+                   Lib_Level         => At_Lib_Level,\n+                   Nested_Constructs => True)\n+              or else\n+                (Present (Handled_Statement_Sequence (N))\n+                  and then\n+                    Requires_Cleanup_Actions\n+                      (L                 =>\n+                         Statements (Handled_Statement_Sequence (N)),\n+                       Lib_Level         => At_Lib_Level,\n+                       Nested_Constructs => True));\n \n          --  Extended return statements are the same as the above, except that\n          --  there is no Declarations field. We do not want to clean up the\n          --  Return_Object_Declarations.\n \n          when N_Extended_Return_Statement =>\n             return\n-               Present (Handled_Statement_Sequence (N))\n-               and then Requires_Cleanup_Actions\n-                          (Statements (Handled_Statement_Sequence (N)),\n-                           At_Lib_Level, Nested_Constructs => True);\n+              Present (Handled_Statement_Sequence (N))\n+                and then Requires_Cleanup_Actions\n+                           (L                 =>\n+                              Statements (Handled_Statement_Sequence (N)),\n+                            Lib_Level         => At_Lib_Level,\n+                            Nested_Constructs => True);\n \n          when N_Package_Specification =>\n             return\n-              Requires_Cleanup_Actions\n-                (Visible_Declarations (N), At_Lib_Level,\n-                 Nested_Constructs => True)\n-                  or else\n-              Requires_Cleanup_Actions\n-                (Private_Declarations (N), At_Lib_Level,\n-                 Nested_Constructs => True);\n+                Requires_Cleanup_Actions\n+                  (L                 => Visible_Declarations (N),\n+                   Lib_Level         => At_Lib_Level,\n+                   Nested_Constructs => True)\n+              or else\n+                Requires_Cleanup_Actions\n+                  (L                 => Private_Declarations (N),\n+                   Lib_Level         => At_Lib_Level,\n+                   Nested_Constructs => True);\n \n          when others =>\n             raise Program_Error;"}, {"sha": "24222dc3cc082225e62f1cefdf0ac7d292502644", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , Dec 05, 2017\n+GNAT User's Guide for Native Platforms , Dec 15, 2017\n \n AdaCore\n \n@@ -23061,38 +23061,14 @@ that any use of the stack (for procedure calls or for declaring local\n variables in declare blocks) does not exceed the available stack space.\n If the space is exceeded, then a @code{Storage_Error} exception is raised.\n \n-For declared tasks, the stack size is controlled by the size\n-given in an applicable @code{Storage_Size} pragma or by the value specified\n-at bind time with @code{-d} (@ref{11f,,Switches for gnatbind}) or is set to\n-the default size as defined in the GNAT runtime otherwise.\n+For declared tasks, the default stack size is defined by the GNAT runtime,\n+whose size may be modified at bind time through the @code{-d} bind switch\n+(@ref{11f,,Switches for gnatbind}). Task specific stack sizes may be set using the\n+@code{Storage_Size} pragma.\n \n-@geindex GNAT_STACK_LIMIT\n-\n-For the environment task, the stack size depends on\n-system defaults and is unknown to the compiler. Stack checking\n-may still work correctly if a fixed\n-size stack is allocated, but this cannot be guaranteed.\n-To ensure that a clean exception is signalled for stack\n-overflow, set the environment variable\n-@geindex GNAT_STACK_LIMIT\n-@geindex environment variable; GNAT_STACK_LIMIT\n-@code{GNAT_STACK_LIMIT} to indicate the maximum\n-stack area that can be used, as in:\n-\n-@quotation\n-\n-@example\n-$ SET GNAT_STACK_LIMIT 1600\n-@end example\n-@end quotation\n-\n-The limit is given in kilobytes, so the above declaration would\n-set the stack limit of the environment task to 1.6 megabytes.\n-Note that the only purpose of this usage is to limit the amount\n-of stack used by the environment task. If it is necessary to\n-increase the amount of stack for the environment task, then this\n-is an operating systems issue, and must be addressed with the\n-appropriate operating systems commands.\n+For the environment task, the stack size is determined by the operating system.\n+Consequently, to modify the size of the environment task please refer to your\n+operating system documentation.\n \n @node Static Stack Usage Analysis,Dynamic Stack Usage Analysis,Stack Overflow Checking,Stack Related Facilities\n @anchor{gnat_ugn/gnat_and_program_execution id64}@anchor{1cb}@anchor{gnat_ugn/gnat_and_program_execution static-stack-usage-analysis}@anchor{f5}"}, {"sha": "072a4e5db77f5394365bf6750cdf6df855ec08db", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 60, "deletions": 3, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -298,10 +298,65 @@ package body Inline is\n       --  Inline_Package means that the call is considered for inlining and\n       --  its package compiled and scanned for more inlining opportunities.\n \n+      function Is_Non_Loading_Expression_Function\n+        (Id : Entity_Id) return Boolean;\n+      --  Determine whether arbitrary entity Id denotes a subprogram which is\n+      --  either\n+      --\n+      --    * An expression function\n+      --\n+      --    * A function completed by an expression function where both the\n+      --      spec and body are in the same context.\n+\n       function Must_Inline return Inline_Level_Type;\n       --  Inlining is only done if the call statement N is in the main unit,\n       --  or within the body of another inlined subprogram.\n \n+      ----------------------------------------\n+      -- Is_Non_Loading_Expression_Function --\n+      ----------------------------------------\n+\n+      function Is_Non_Loading_Expression_Function\n+        (Id : Entity_Id) return Boolean\n+      is\n+         Body_Decl : Node_Id;\n+         Body_Id   : Entity_Id;\n+         Spec_Decl : Node_Id;\n+\n+      begin\n+         --  A stand-alone expression function is transformed into a spec-body\n+         --  pair in-place. Since both the spec and body are in the same list,\n+         --  the inlining of such an expression function does not need to load\n+         --  anything extra.\n+\n+         if Is_Expression_Function (Id) then\n+            return True;\n+\n+         --  A function may be completed by an expression function\n+\n+         elsif Ekind (Id) = E_Function then\n+            Spec_Decl := Unit_Declaration_Node (Id);\n+\n+            if Nkind (Spec_Decl) = N_Subprogram_Declaration then\n+               Body_Id := Corresponding_Body (Spec_Decl);\n+\n+               if Present (Body_Id) then\n+                  Body_Decl := Unit_Declaration_Node (Body_Id);\n+\n+                  --  The inlining of a completing expression function does\n+                  --  not need to load anything extra when both the spec and\n+                  --  body are in the same context.\n+\n+                  return\n+                    Was_Expression_Function (Body_Decl)\n+                      and then Parent (Spec_Decl) = Parent (Body_Decl);\n+               end if;\n+            end if;\n+         end if;\n+\n+         return False;\n+      end Is_Non_Loading_Expression_Function;\n+\n       -----------------\n       -- Must_Inline --\n       -----------------\n@@ -415,10 +470,12 @@ package body Inline is\n          Set_Needs_Debug_Info (E, False);\n       end if;\n \n-      --  If the subprogram is an expression function, then there is no need to\n-      --  load any package body since the body of the function is in the spec.\n+      --  If the subprogram is an expression function, or is completed by one\n+      --  where both the spec and body are in the same context, then there is\n+      --  no need to load any package body since the body of the function is\n+      --  in the spec.\n \n-      if Is_Expression_Function (E) then\n+      if Is_Non_Loading_Expression_Function (E) then\n          Set_Is_Called (E);\n          return;\n       end if;"}, {"sha": "9ec7321e847e72675a80531f4ea23fc055fc0d15", "filename": "gcc/ada/libgnat/s-tsmona.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Flibgnat%2Fs-tsmona.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Flibgnat%2Fs-tsmona.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-tsmona.adb?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -48,9 +48,9 @@ package body Module_Name is\n    -- Get --\n    ---------\n \n-   function Get (Addr : System.Address;\n-                 Load_Addr : access System.Address)\n-      return String\n+   function Get\n+     (Addr      : System.Address;\n+      Load_Addr : access System.Address) return String\n    is\n       pragma Unreferenced (Addr);\n       pragma Unreferenced (Load_Addr);"}, {"sha": "690933704f1e1c90254a4c4c5e8e2677a0479554", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -542,8 +542,8 @@ package Rtsfind is\n \n      RE_Null,\n \n-     RO_CA_Time,                         -- Ada.Calendar\n      RO_CA_Clock_Time,                   -- Ada.Calendar\n+     RO_CA_Time,                         -- Ada.Calendar\n \n      RO_CA_Delay_For,                    -- Ada.Calendar.Delays\n      RO_CA_Delay_Until,                  -- Ada.Calendar.Delays\n@@ -1780,8 +1780,8 @@ package Rtsfind is\n \n      RE_Null                             => RTU_Null,\n \n-     RO_CA_Time                          => Ada_Calendar,\n      RO_CA_Clock_Time                    => Ada_Calendar,\n+     RO_CA_Time                          => Ada_Calendar,\n \n      RO_CA_Delay_For                     => Ada_Calendar_Delays,\n      RO_CA_Delay_Until                   => Ada_Calendar_Delays,"}, {"sha": "9477c283e89f34e59adb2db9895ae156ae81138b", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -5834,8 +5834,21 @@ package body Sem_Ch6 is\n       ---------------------\n \n       procedure Possible_Freeze (T : Entity_Id) is\n+         Scop : constant Entity_Id := Scope (Designator);\n       begin\n-         if Has_Delayed_Freeze (T) and then not Is_Frozen (T) then\n+         --  If the subprogram appears within a package instance (which\n+         --  may be the wrapper package of a subprogram instance) the\n+         --  freeze node for that package will freeze the subprogram at\n+         --  the proper place, so do not emit a freeze node for the\n+         --  subprogram, given that it may appear in the wrong scope.\n+\n+         if Ekind (Scop) = E_Package\n+           and then not Comes_From_Source (Scop)\n+           and then Is_Generic_Instance (Scop)\n+         then\n+            null;\n+\n+         elsif Has_Delayed_Freeze (T) and then not Is_Frozen (T) then\n             Set_Has_Delayed_Freeze (Designator);\n \n          elsif Is_Access_Type (T)"}, {"sha": "152def24b0d1a8a061a118f33b2508e93495d5fd", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 88, "deletions": 6, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -405,12 +405,20 @@ package body Sem_Elab is\n    --           actual subprograms through generic formal subprograms. As a\n    --           result, the calls are not recorded or processed.\n    --\n-   --  -gnatdL  ignore activations and calls to instances for elaboration\n+   --  -gnatd_i ignore activations and calls to instances for elaboration\n    --\n    --           The ABE mechanism ignores calls and task activations when they\n    --           target a subprogram or task type defined an external instance.\n    --           As a result, the calls and task activations are not processed.\n    --\n+   --  -gnatdL  ignore external calls from instances for elaboration\n+   --\n+   --           The ABE mechanism does not generate N_Call_Marker nodes for\n+   --           calls which occur in expanded instances, do not invoke generic\n+   --           actual subprograms through formal subprograms, and the target\n+   --           is external to the instance. As a result, the calls are not\n+   --           recorded or processed.\n+   --\n    --  -gnatd.o conservative elaboration order for indirect calls\n    --\n    --           The ABE mechanism treats '[Unrestricted_]Access of an entry,\n@@ -488,6 +496,7 @@ package body Sem_Elab is\n    --              -gnatd_a\n    --              -gnatd_e\n    --              -gnatd.G\n+   --              -gnatd_i\n    --              -gnatdL\n    --              -gnatd_p\n    --              -gnatd.U\n@@ -1781,6 +1790,13 @@ package body Sem_Elab is\n    -----------------------\n \n    procedure Build_Call_Marker (N : Node_Id) is\n+      function In_External_Context\n+        (Call         : Node_Id;\n+         Target_Attrs : Target_Attributes) return Boolean;\n+      pragma Inline (In_External_Context);\n+      --  Determine whether a target described by attributes Target_Attrs is\n+      --  external to call Call which must reside within an instance.\n+\n       function In_Premature_Context (Call : Node_Id) return Boolean;\n       --  Determine whether call Call appears within a premature context\n \n@@ -1798,6 +1814,55 @@ package body Sem_Elab is\n       --  Determine whether subprogram Subp_Id denotes a generic formal\n       --  subprogram which appears in the \"prologue\" of an instantiation.\n \n+      -------------------------\n+      -- In_External_Context --\n+      -------------------------\n+\n+      function In_External_Context\n+        (Call         : Node_Id;\n+         Target_Attrs : Target_Attributes) return Boolean\n+      is\n+         Inst      : Node_Id;\n+         Inst_Body : Node_Id;\n+         Inst_Decl : Node_Id;\n+\n+      begin\n+         --  Performance note: parent traversal\n+\n+         Inst := Find_Enclosing_Instance (Call);\n+\n+         --  The call appears within an instance\n+\n+         if Present (Inst) then\n+\n+            --  The call comes from the main unit and the target does not\n+\n+            if In_Extended_Main_Code_Unit (Call)\n+              and then not In_Extended_Main_Code_Unit (Target_Attrs.Spec_Decl)\n+            then\n+               return True;\n+\n+            --  Otherwise the target declaration must not appear within the\n+            --  instance spec or body.\n+\n+            else\n+               Extract_Instance_Attributes\n+                 (Exp_Inst  => Inst,\n+                  Inst_Decl => Inst_Decl,\n+                  Inst_Body => Inst_Body);\n+\n+               --  Performance note: parent traversal\n+\n+               return not In_Subtree\n+                            (N     => Target_Attrs.Spec_Decl,\n+                             Root1 => Inst_Decl,\n+                             Root2 => Inst_Body);\n+            end if;\n+         end if;\n+\n+         return False;\n+      end In_External_Context;\n+\n       --------------------------\n       -- In_Premature_Context --\n       --------------------------\n@@ -1987,11 +2052,28 @@ package body Sem_Elab is\n         (Target_Id => Target_Id,\n          Attrs     => Target_Attrs);\n \n+      --  Nothing to do when the call appears within the expanded spec or\n+      --  body of an instantiated generic, the call does not invoke a generic\n+      --  formal subprogram, the target is external to the instance, and switch\n+      --  -gnatdL (ignore external calls from instances for elaboration) is in\n+      --  effect.\n+\n+      if Debug_Flag_LL\n+        and then not Is_Generic_Formal_Subp (Entity (Call_Nam))\n+\n+        --  Performance note: parent traversal\n+\n+        and then In_External_Context\n+                   (Call         => N,\n+                    Target_Attrs => Target_Attrs)\n+      then\n+         return;\n+\n       --  Nothing to do when the call invokes an assertion pragma procedure\n       --  and switch -gnatd_p (ignore assertion pragmas for elaboration) is\n       --  in effect.\n \n-      if Debug_Flag_Underscore_P\n+      elsif Debug_Flag_Underscore_P\n         and then Is_Assertion_Pragma_Target (Target_Id)\n       then\n          return;\n@@ -8611,10 +8693,10 @@ package body Sem_Elab is\n       end if;\n \n       --  Nothing to do when the call activates a task whose type is defined\n-      --  within an instance and switch -gnatdL (ignore activations and calls\n+      --  within an instance and switch -gnatd_i (ignore activations and calls\n       --  to instances for elaboration) is in effect.\n \n-      if Debug_Flag_LL\n+      if Debug_Flag_Underscore_I\n         and then In_External_Instance\n                    (N           => Call,\n                     Target_Decl => Task_Attrs.Task_Decl)\n@@ -8980,10 +9062,10 @@ package body Sem_Elab is\n       end if;\n \n       --  Nothing to do when the call invokes a target defined within an\n-      --  instance and switch -gnatdL (ignore activations and calls to\n+      --  instance and switch -gnatd_i (ignore activations and calls to\n       --  instances for elaboration) is in effect.\n \n-      if Debug_Flag_LL\n+      if Debug_Flag_Underscore_I\n         and then In_External_Instance\n                    (N           => Call,\n                     Target_Decl => Target_Attrs.Spec_Decl)"}, {"sha": "57cddd0259fedc813deab576bab4faa234115e02", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -950,11 +950,11 @@ package body Switch.C is\n \n                --  Common relaxations for both ABE mechanisms\n                --\n-               --  -gnatd.G (ignore calls through generic formal parameters for\n-               --            elaboration)\n-               --  -gnatd.U (ignore indirect calls for static elaboration)\n-               --  -gnatd.y (disable implicit pragma Elaborate_All on task\n-               --            bodies)\n+               --    -gnatd.G (ignore calls through generic formal parameters\n+               --              for elaboration)\n+               --    -gnatd.U (ignore indirect calls for static elaboration)\n+               --    -gnatd.y (disable implicit pragma Elaborate_All on task\n+               --              bodies)\n \n                Debug_Flag_Dot_GG := True;\n                Debug_Flag_Dot_UU := True;\n@@ -967,17 +967,20 @@ package body Switch.C is\n \n                --  Relaxations to the default ABE mechanism\n                --\n-               --  -gnatd_a (stop elaboration checks on accept or select\n-               --            statement)\n-               --  -gnatd_e (ignore entry calls and requeue statements for\n-               --            elaboration)\n-               --  -gnatd_p (ignore assertion pragmas for elaboration)\n-               --  -gnatdL  (ignore activations and calls to instances for\n-               --            elaboration)\n+               --    -gnatd_a (stop elaboration checks on accept or select\n+               --              statement)\n+               --    -gnatd_e (ignore entry calls and requeue statements for\n+               --              elaboration)\n+               --    -gnatd_i (ignore activations and calls to instances for\n+               --              elaboration)\n+               --    -gnatd_p (ignore assertion pragmas for elaboration)\n+               --    -gnatdL  (ignore external calls from instances for\n+               --              elaboration)\n \n                else\n                   Debug_Flag_Underscore_A := True;\n                   Debug_Flag_Underscore_E := True;\n+                  Debug_Flag_Underscore_I := True;\n                   Debug_Flag_Underscore_P := True;\n                   Debug_Flag_LL           := True;\n                end if;"}, {"sha": "8d6825ae43ad4c861a683b8d097440f5dbaa4864", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -1,3 +1,17 @@\n+2017-12-15  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat.dg/expr_func_main.adb, gnat.dg/expr_func_pkg.ads,\n+\tgnat.dg/expr_func_pkg.adb: New testcase.\n+\n+2017-12-15  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat.dg/abe_pkg.adb, gnat.dg/abe_pkg.ads: New testcase.\n+\n+2017-12-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/subp_inst.adb, gnat.dg/subp_inst_pkg.adb,\n+\tgnat.dg/subp_inst_pkg.ads: New testcase.\n+\n 2017-12-15  Julia Koval  <julia.koval@intel.com>\n \n \t* gcc.target/i386/avx512f-aesenclast-2.c: New test."}, {"sha": "7c09b850ddb0858e5b0194f2b5951284af9db567", "filename": "gcc/testsuite/gnat.dg/abe_pkg.adb", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2Fgnat.dg%2Fabe_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2Fgnat.dg%2Fabe_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fabe_pkg.adb?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -0,0 +1,13 @@\n+--  { dg-do compile }\n+--  { dg-options \"-gnatJ\" }\n+package body ABE_Pkg is\n+   package body Gen is\n+      procedure Force_Body is begin null; end Force_Body;\n+   begin\n+      ABE;\n+   end Gen;\n+\n+   package Inst is new Gen;\n+\n+   procedure ABE is begin null; end ABE;\n+end ABE_Pkg;"}, {"sha": "483a8871d0672379985b3bf584ae40b849da6a78", "filename": "gcc/testsuite/gnat.dg/abe_pkg.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2Fgnat.dg%2Fabe_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2Fgnat.dg%2Fabe_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fabe_pkg.ads?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -0,0 +1,8 @@\n+package ABE_Pkg is\n+   procedure ABE;\n+\n+   generic\n+   package Gen is\n+      procedure Force_Body;\n+   end Gen;\n+end ABE_Pkg;"}, {"sha": "2ea5b4aa76d5af6ecd64545061fee0cfbe7f815e", "filename": "gcc/testsuite/gnat.dg/expr_func_main.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func_main.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func_main.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func_main.adb?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -0,0 +1,9 @@\n+--  { dg-do compile }\n+\n+with Expr_Func_Pkg; use Expr_Func_Pkg;\n+\n+procedure Expr_Func_Main is\n+   Val : Boolean := Expr_Func (456);\n+begin\n+   null;\n+end Expr_Func_Main;"}, {"sha": "de519aecc48a2510c9ed66b68056018d530f3c9f", "filename": "gcc/testsuite/gnat.dg/expr_func_pkg.adb", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func_pkg.adb?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -0,0 +1,7 @@\n+package body Expr_Func_Pkg is\n+   function Func (Val : Integer) return Boolean is\n+   begin\n+      Error;  --  { dg-error \"\\\"Error\\\" is undefined\" }\n+      return Val = 123;\n+   end Func;\n+end Expr_Func_Pkg;"}, {"sha": "0640a7d043d6dfe149003d300f99db43e69c5c7c", "filename": "gcc/testsuite/gnat.dg/expr_func_pkg.ads", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func_pkg.ads?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -0,0 +1,6 @@\n+package Expr_Func_Pkg is\n+   function Func (Val : Integer) return Boolean with Inline;\n+\n+   function Expr_Func (Val : Integer) return Boolean;\n+   function Expr_Func (Val : Integer) return Boolean is (True);\n+end Expr_Func_Pkg;"}, {"sha": "6205750293bb6f576be93765dbc58814792661d5", "filename": "gcc/testsuite/gnat.dg/subp_inst.adb", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2Fgnat.dg%2Fsubp_inst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2Fgnat.dg%2Fsubp_inst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fsubp_inst.adb?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -0,0 +1,26 @@\n+--  { dg-do compile }\n+with Subp_Inst_Pkg;\n+procedure Subp_Inst is\n+   procedure Test_Access_Image is\n+      package Nested is\n+         type T is private;\n+\n+         type T_General_Access is access all T;\n+         type T_Access is access T;\n+         function Image1 is new Subp_Inst_Pkg.Image (T, T_Access);\n+         function Image2 is new Subp_Inst_Pkg.Image (T, T_General_Access);\n+         function Image3 is new Subp_Inst_Pkg.T_Image (T);\n+      private\n+         type T is null record;\n+      end Nested;\n+\n+      A : aliased Nested.T;\n+      AG : aliased constant Nested.T_General_Access := A'Access;\n+      AA : aliased constant Nested.T_Access := new Nested.T;\n+   begin\n+      null;\n+   end Test_Access_Image;\n+\n+begin\n+   Test_Access_Image;\n+end Subp_Inst;"}, {"sha": "8fd2663fbde5c9bfba6ec48b376e888c36adef17", "filename": "gcc/testsuite/gnat.dg/subp_inst_pkg.adb", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2Fgnat.dg%2Fsubp_inst_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2Fgnat.dg%2Fsubp_inst_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fsubp_inst_pkg.adb?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -0,0 +1,20 @@\n+with Ada.Unchecked_Conversion;\n+with System.Address_Image;\n+package body Subp_Inst_Pkg is\n+\n+   function Image (Val : T_Access) return String is\n+      function Convert is new Ada.Unchecked_Conversion\n+         (T_Access, System.Address);\n+   begin\n+      return System.Address_Image (Convert (Val));\n+   end Image;\n+\n+   function T_Image (Val : access T) return String is\n+      type T_Access is access all T;\n+      function Convert is new Ada.Unchecked_Conversion\n+         (T_Access, System.Address);\n+   begin\n+      return System.Address_Image (Convert (Val));\n+   end T_Image;\n+\n+end Subp_Inst_Pkg;"}, {"sha": "636b0863f9051af080ec3090320e6fb4eddb2dbe", "filename": "gcc/testsuite/gnat.dg/subp_inst_pkg.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2Fgnat.dg%2Fsubp_inst_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c581c5205ae33fdf22ec27cd30047dd45abfb085/gcc%2Ftestsuite%2Fgnat.dg%2Fsubp_inst_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fsubp_inst_pkg.ads?ref=c581c5205ae33fdf22ec27cd30047dd45abfb085", "patch": "@@ -0,0 +1,13 @@\n+package Subp_Inst_Pkg is\n+   pragma Pure;\n+\n+   generic\n+      type T;\n+      type T_Access is access T;\n+   function Image (Val : T_Access) return String;\n+\n+   generic\n+      type T;\n+   function T_Image (Val : access T) return String;\n+\n+end Subp_Inst_Pkg;"}]}