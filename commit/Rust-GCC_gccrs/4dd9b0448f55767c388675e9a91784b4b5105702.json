{"sha": "4dd9b0448f55767c388675e9a91784b4b5105702", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRkOWIwNDQ4ZjU1NzY3YzM4ODY3NWU5YTkxNzg0YjRiNTEwNTcwMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-11T23:14:21Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-11T23:14:21Z"}, "message": "c-typeck.c (c_size_in_bytes, [...]): Make them static.\n\n\t* c-typeck.c (c_size_in_bytes, record_maybe_used_decl):\n\tMake them static.\n\t* c-tree.h: Remove the corresponding prototypes.\n\nFrom-SVN: r90505", "tree": {"sha": "796db61a51f55e259151a976c94c2d0df8170717", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/796db61a51f55e259151a976c94c2d0df8170717"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dd9b0448f55767c388675e9a91784b4b5105702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dd9b0448f55767c388675e9a91784b4b5105702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dd9b0448f55767c388675e9a91784b4b5105702", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dd9b0448f55767c388675e9a91784b4b5105702/comments", "author": null, "committer": null, "parents": [{"sha": "4e2fb7de2d62d73c3ef7967933af331aa3888f0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e2fb7de2d62d73c3ef7967933af331aa3888f0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e2fb7de2d62d73c3ef7967933af331aa3888f0a"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "6fb10376e813638084053155802a98f2a2dfecce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd9b0448f55767c388675e9a91784b4b5105702/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd9b0448f55767c388675e9a91784b4b5105702/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4dd9b0448f55767c388675e9a91784b4b5105702", "patch": "@@ -18,6 +18,9 @@\n \tMake them static.\n \t* c-tree.h: Remove the corresponding prototypes.\n \n+\t* explow.c (round_push): Make it static.\n+\t* expr.h: Remove the corresponding prototype.\n+\n 2004-11-11  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* function.c (expand_function_end): Remove an \"if\" statement"}, {"sha": "a3e28ff16ec04f07ab8838d04f322cf159f51300", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd9b0448f55767c388675e9a91784b4b5105702/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd9b0448f55767c388675e9a91784b4b5105702/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=4dd9b0448f55767c388675e9a91784b4b5105702", "patch": "@@ -875,7 +875,7 @@ anti_adjust_stack (rtx adjust)\n /* Round the size of a block to be pushed up to the boundary required\n    by this machine.  SIZE is the desired size, which need not be constant.  */\n \n-rtx\n+static rtx\n round_push (rtx size)\n {\n   int align = PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT;"}, {"sha": "21ff1f4140186b6cf31759a727a3136ad631fb3d", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd9b0448f55767c388675e9a91784b4b5105702/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd9b0448f55767c388675e9a91784b4b5105702/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=4dd9b0448f55767c388675e9a91784b4b5105702", "patch": "@@ -707,10 +707,6 @@ extern void probe_stack_range (HOST_WIDE_INT, rtx);\n    in its original home.  This becomes invalid if any more code is emitted.  */\n extern rtx hard_libcall_value (enum machine_mode);\n \n-/* Given an rtx, return an rtx for a value rounded up to a multiple\n-   of STACK_BOUNDARY / BITS_PER_UNIT.  */\n-extern rtx round_push (rtx);\n-\n /* Return the mode desired by operand N of a particular bitfield\n    insert/extract insn, or MAX_MACHINE_MODE if no such insn is\n    available.  */"}]}