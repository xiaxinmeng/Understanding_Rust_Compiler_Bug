{"sha": "af06acfc8de1ddcfd02a4de1200735b5479f086f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYwNmFjZmM4ZGUxZGRjZmQwMmE0ZGUxMjAwNzM1YjU0NzlmMDg2Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-26T18:32:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-26T18:32:30Z"}, "message": "libstdc++: Whitespace changes in <tuple>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/tuple (_Tuple_impl): Whitespaces changes for\n\tconsistent indentation. Also use __enable_if_t alias template.", "tree": {"sha": "8c516d076478d1fde66814c9df01d912ec5358ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c516d076478d1fde66814c9df01d912ec5358ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af06acfc8de1ddcfd02a4de1200735b5479f086f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af06acfc8de1ddcfd02a4de1200735b5479f086f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af06acfc8de1ddcfd02a4de1200735b5479f086f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af06acfc8de1ddcfd02a4de1200735b5479f086f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5494edae83ad33c769bd1ebc98f0c492453a6417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5494edae83ad33c769bd1ebc98f0c492453a6417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5494edae83ad33c769bd1ebc98f0c492453a6417"}], "stats": {"total": 162, "additions": 94, "deletions": 68}, "files": [{"sha": "1c22d4db78841bda519bc057a30b40d0609ad124", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 94, "deletions": 68, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af06acfc8de1ddcfd02a4de1200735b5479f086f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af06acfc8de1ddcfd02a4de1200735b5479f086f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=af06acfc8de1ddcfd02a4de1200735b5479f086f", "patch": "@@ -265,16 +265,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr _Tuple_impl()\n       : _Inherited(), _Base() { }\n \n-      explicit\n-      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)\n-      : _Inherited(__tail...), _Base(__head) { }\n-\n-      template<typename _UHead, typename... _UTail, typename = typename\n-               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type>\n-        explicit\n-        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)\n+      explicit constexpr\n+      _Tuple_impl(const _Head& __head, const _Tail&... __tail)\n+      : _Inherited(__tail...), _Base(__head)\n+      { }\n+\n+      template<typename _UHead, typename... _UTail,\n+\t       typename = __enable_if_t<sizeof...(_Tail) == sizeof...(_UTail)>>\n+\texplicit constexpr\n+\t_Tuple_impl(_UHead&& __head, _UTail&&... __tail)\n \t: _Inherited(std::forward<_UTail>(__tail)...),\n-\t  _Base(std::forward<_UHead>(__head)) { }\n+\t  _Base(std::forward<_UHead>(__head))\n+\t{ }\n \n       constexpr _Tuple_impl(const _Tuple_impl&) = default;\n \n@@ -285,58 +287,67 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr\n       _Tuple_impl(_Tuple_impl&& __in)\n       noexcept(__and_<is_nothrow_move_constructible<_Head>,\n-\t              is_nothrow_move_constructible<_Inherited>>::value)\n+\t\t      is_nothrow_move_constructible<_Inherited>>::value)\n       : _Inherited(std::move(_M_tail(__in))),\n-\t_Base(std::forward<_Head>(_M_head(__in))) { }\n+\t_Base(std::forward<_Head>(_M_head(__in)))\n+      { }\n \n       template<typename... _UElements>\n-        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)\n+\tconstexpr\n+\t_Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)\n \t: _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),\n-\t  _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }\n+\t  _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in))\n+\t{ }\n \n       template<typename _UHead, typename... _UTails>\n-        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\n+\tconstexpr\n+\t_Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\n \t: _Inherited(std::move\n \t\t     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),\n \t  _Base(std::forward<_UHead>\n-\t\t(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }\n+\t\t(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)))\n+\t{ }\n \n       template<typename _Alloc>\n \t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)\n \t: _Inherited(__tag, __a),\n-          _Base(__tag, __use_alloc<_Head>(__a)) { }\n+\t  _Base(__tag, __use_alloc<_Head>(__a))\n+\t{ }\n \n       template<typename _Alloc>\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t\t    const _Head& __head, const _Tail&... __tail)\n \t: _Inherited(__tag, __a, __tail...),\n-          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }\n+\t  _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head)\n+\t{ }\n \n       template<typename _Alloc, typename _UHead, typename... _UTail,\n-               typename = typename enable_if<sizeof...(_Tail)\n-\t\t\t\t\t     == sizeof...(_UTail)>::type>\n+\t       typename = __enable_if_t<sizeof...(_Tail) == sizeof...(_UTail)>>\n \t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n-\t            _UHead&& __head, _UTail&&... __tail)\n+\t\t    _UHead&& __head, _UTail&&... __tail)\n \t: _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),\n-          _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\n-\t        std::forward<_UHead>(__head)) { }\n+\t  _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\n+\t\tstd::forward<_UHead>(__head))\n+\t{ }\n \n       template<typename _Alloc>\n \t_GLIBCXX20_CONSTEXPR\n-        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n-\t            const _Tuple_impl& __in)\n+\t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n+\t\t    const _Tuple_impl& __in)\n \t: _Inherited(__tag, __a, _M_tail(__in)),\n-          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }\n+\t  _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in))\n+\t{ }\n \n       template<typename _Alloc>\n \t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n-\t            _Tuple_impl&& __in)\n+\t\t    _Tuple_impl&& __in)\n \t: _Inherited(__tag, __a, std::move(_M_tail(__in))),\n \t  _Base(__use_alloc<_Head, _Alloc, _Head>(__a),\n-\t        std::forward<_Head>(_M_head(__in))) { }\n+\t\tstd::forward<_Head>(_M_head(__in)))\n+\t{ }\n \n       template<typename _Alloc, typename _UHead, typename... _UTails>\n \t_GLIBCXX20_CONSTEXPR\n@@ -345,33 +356,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _Inherited(__tag, __a,\n \t\t     _Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)),\n \t  _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\n-\t\t_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)) { }\n+\t\t_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))\n+\t{ }\n \n       template<typename _Alloc, typename _UHead, typename... _UTails>\n \t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n-\t            _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\n+\t\t    _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\n \t: _Inherited(__tag, __a, std::move\n \t\t     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),\n \t  _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\n-                std::forward<_UHead>\n-\t\t(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }\n+\t\tstd::forward<_UHead>\n+\t\t(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)))\n+\t{ }\n \n       template<typename... _UElements>\n \t_GLIBCXX20_CONSTEXPR\n-        void\n-        _M_assign(const _Tuple_impl<_Idx, _UElements...>& __in)\n-        {\n+\tvoid\n+\t_M_assign(const _Tuple_impl<_Idx, _UElements...>& __in)\n+\t{\n \t  _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);\n \t  _M_tail(*this)._M_assign(\n \t      _Tuple_impl<_Idx, _UElements...>::_M_tail(__in));\n \t}\n \n       template<typename _UHead, typename... _UTails>\n \t_GLIBCXX20_CONSTEXPR\n-        void\n-        _M_assign(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\n-        {\n+\tvoid\n+\t_M_assign(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\n+\t{\n \t  _M_head(*this) = std::forward<_UHead>\n \t    (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));\n \t  _M_tail(*this)._M_assign(\n@@ -404,17 +417,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr const _Head&\n       _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }\n \n-      constexpr _Tuple_impl()\n+      constexpr\n+      _Tuple_impl()\n       : _Base() { }\n \n-      explicit\n-      constexpr _Tuple_impl(const _Head& __head)\n-      : _Base(__head) { }\n+      explicit constexpr\n+      _Tuple_impl(const _Head& __head)\n+      : _Base(__head)\n+      { }\n \n       template<typename _UHead>\n-        explicit\n-        constexpr _Tuple_impl(_UHead&& __head)\n-\t: _Base(std::forward<_UHead>(__head)) { }\n+\texplicit constexpr\n+\t_Tuple_impl(_UHead&& __head)\n+\t: _Base(std::forward<_UHead>(__head))\n+\t{ }\n \n       constexpr _Tuple_impl(const _Tuple_impl&) = default;\n \n@@ -425,75 +441,85 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr\n       _Tuple_impl(_Tuple_impl&& __in)\n       noexcept(is_nothrow_move_constructible<_Head>::value)\n-      : _Base(std::forward<_Head>(_M_head(__in))) { }\n+      : _Base(std::forward<_Head>(_M_head(__in)))\n+      { }\n \n       template<typename _UHead>\n-        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)\n-\t: _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }\n+\tconstexpr\n+\t_Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)\n+\t: _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in))\n+\t{ }\n \n       template<typename _UHead>\n-        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)\n+\tconstexpr\n+\t_Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)\n \t: _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))\n \t{ }\n \n       template<typename _Alloc>\n \t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)\n-\t: _Base(__tag, __use_alloc<_Head>(__a)) { }\n+\t: _Base(__tag, __use_alloc<_Head>(__a))\n+\t{ }\n \n       template<typename _Alloc>\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t\t    const _Head& __head)\n-\t: _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }\n+\t: _Base(__use_alloc<_Head, _Alloc, const _Head&>(__a), __head)\n+\t{ }\n \n       template<typename _Alloc, typename _UHead>\n \t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n-\t            _UHead&& __head)\n+\t\t    _UHead&& __head)\n \t: _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\n-\t        std::forward<_UHead>(__head)) { }\n+\t\tstd::forward<_UHead>(__head))\n+\t{ }\n \n       template<typename _Alloc>\n \t_GLIBCXX20_CONSTEXPR\n-        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n-\t            const _Tuple_impl& __in)\n-\t: _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }\n+\t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n+\t\t    const _Tuple_impl& __in)\n+\t: _Base(__use_alloc<_Head, _Alloc, const _Head&>(__a), _M_head(__in))\n+\t{ }\n \n       template<typename _Alloc>\n \t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n-\t            _Tuple_impl&& __in)\n+\t\t    _Tuple_impl&& __in)\n \t: _Base(__use_alloc<_Head, _Alloc, _Head>(__a),\n-\t        std::forward<_Head>(_M_head(__in))) { }\n+\t\tstd::forward<_Head>(_M_head(__in)))\n+\t{ }\n \n       template<typename _Alloc, typename _UHead>\n \t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n-\t            const _Tuple_impl<_Idx, _UHead>& __in)\n-\t: _Base(__use_alloc<_Head, _Alloc, _Head>(__a),\n-\t\t_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }\n+\t\t    const _Tuple_impl<_Idx, _UHead>& __in)\n+\t: _Base(__use_alloc<_Head, _Alloc, const _UHead&>(__a),\n+\t\t_Tuple_impl<_Idx, _UHead>::_M_head(__in))\n+\t{ }\n \n       template<typename _Alloc, typename _UHead>\n \t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n-\t            _Tuple_impl<_Idx, _UHead>&& __in)\n+\t\t    _Tuple_impl<_Idx, _UHead>&& __in)\n \t: _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\n-                std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))\n+\t\tstd::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))\n \t{ }\n \n       template<typename _UHead>\n \t_GLIBCXX20_CONSTEXPR\n-        void\n-        _M_assign(const _Tuple_impl<_Idx, _UHead>& __in)\n-        {\n+\tvoid\n+\t_M_assign(const _Tuple_impl<_Idx, _UHead>& __in)\n+\t{\n \t  _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);\n \t}\n \n       template<typename _UHead>\n \t_GLIBCXX20_CONSTEXPR\n-        void\n-        _M_assign(_Tuple_impl<_Idx, _UHead>&& __in)\n-        {\n+\tvoid\n+\t_M_assign(_Tuple_impl<_Idx, _UHead>&& __in)\n+\t{\n \t  _M_head(*this)\n \t    = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));\n \t}"}]}