{"sha": "079c74f3fcc7782a6f8d805be1ced373eeb95474", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc5Yzc0ZjNmY2M3NzgyYTZmOGQ4MDViZTFjZWQzNzNlZWI5NTQ3NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-04-13T10:43:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-04-13T10:43:28Z"}, "message": "safe_iterator.h (_BeforeBeginHelper<>:: _S_Is_Beginnest): Add.\n\n2012-04-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/debug/safe_iterator.h (_BeforeBeginHelper<>::\n\t_S_Is_Beginnest): Add.\n\t* include/debug/forward_list (_BeforeBeginHelper<>::\n\t_S_Is_Beginnest): Likewise.\n\t(_Safe_iterator<>::_M_is_beginnest): Add.\n\t* include/debug/safe_iterator.tcc (_Safe_iterator<>::_M_valid_range):\n\tUse the latter.\n\t* testsuite/23_containers/forward_list/debug/splice_after.cc:\n\tAdd test.\n\nFrom-SVN: r186411", "tree": {"sha": "f90def9d55846304dfd49e7de086f0276d2fe062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f90def9d55846304dfd49e7de086f0276d2fe062"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/079c74f3fcc7782a6f8d805be1ced373eeb95474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079c74f3fcc7782a6f8d805be1ced373eeb95474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/079c74f3fcc7782a6f8d805be1ced373eeb95474", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079c74f3fcc7782a6f8d805be1ced373eeb95474/comments", "author": null, "committer": null, "parents": [{"sha": "d66b8f4bfb7dcc0441c1af2519d560f0b85d201b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66b8f4bfb7dcc0441c1af2519d560f0b85d201b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d66b8f4bfb7dcc0441c1af2519d560f0b85d201b"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "ab12fae5382a73c799ce6b7354c1a0c47d4e8011", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079c74f3fcc7782a6f8d805be1ced373eeb95474/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079c74f3fcc7782a6f8d805be1ced373eeb95474/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=079c74f3fcc7782a6f8d805be1ced373eeb95474", "patch": "@@ -1,3 +1,15 @@\n+2012-04-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/debug/safe_iterator.h (_BeforeBeginHelper<>::\n+\t_S_Is_Beginnest): Add.\n+\t* include/debug/forward_list (_BeforeBeginHelper<>::\n+\t_S_Is_Beginnest): Likewise.\n+\t(_Safe_iterator<>::_M_is_beginnest): Add.\n+\t* include/debug/safe_iterator.tcc (_Safe_iterator<>::_M_valid_range):\n+\tUse the latter.\n+\t* testsuite/23_containers/forward_list/debug/splice_after.cc:\n+\tAdd test.\n+\n 2012-04-12  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/unordered_map.h (__unordered_map): Remove."}, {"sha": "f4a7ee96df0834893a1467ee3b404897c848a45c", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079c74f3fcc7782a6f8d805be1ced373eeb95474/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079c74f3fcc7782a6f8d805be1ced373eeb95474/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=079c74f3fcc7782a6f8d805be1ced373eeb95474", "patch": "@@ -760,8 +760,12 @@ namespace __gnu_debug\n       typedef typename _It::iterator_type _BaseIt;\n \n       static bool\n-      _M_Is(_BaseIt __it, const _Sequence* __seq)\n+      _S_Is(_BaseIt __it, const _Sequence* __seq)\n       { return __it == __seq->_M_base().cbefore_begin(); }\n+\n+      static bool\n+      _S_Is_Beginnest(_BaseIt __it, const _Sequence* __seq)\n+      { return _S_Is(__it, __seq); }\n     };\n }\n "}, {"sha": "3cab2d7d8a2cc24b5eadfa78aabe493796a1d050", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079c74f3fcc7782a6f8d805be1ced373eeb95474/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079c74f3fcc7782a6f8d805be1ced373eeb95474/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=079c74f3fcc7782a6f8d805be1ced373eeb95474", "patch": "@@ -50,8 +50,12 @@ namespace __gnu_debug\n       typedef typename _It::iterator_type _BaseIt;\n \n       static bool\n-      _M_Is(_BaseIt __it, const _Sequence* __seq)\n+      _S_Is(_BaseIt, const _Sequence*)\n       { return false; }\n+\n+      static bool\n+      _S_Is_Beginnest(_BaseIt __it, const _Sequence* __seq)\n+      { return __it == __seq->_M_base().begin(); }\n     };\n \n   /** Iterators that derive from _Safe_iterator_base but that aren't\n@@ -465,7 +469,15 @@ namespace __gnu_debug\n       /// any?\n       bool _M_is_before_begin() const\n       {\n-\treturn _BeforeBeginHelper<_Sequence>::_M_Is(base(), _M_get_sequence());\n+\treturn _BeforeBeginHelper<_Sequence>::_S_Is(base(), _M_get_sequence());\n+      }\n+\n+      /// Is this iterator equal to the sequence's before_begin() iterator if\n+      /// any or begin() otherwise?\n+      bool _M_is_beginnest() const\n+      {\n+\treturn _BeforeBeginHelper<_Sequence>::_S_Is_Beginnest(base(),\n+\t\t\t\t\t\t\t  _M_get_sequence());\n       }\n     };\n "}, {"sha": "f01252bf6c2dfbe63996d54cb15c79aba57a49d0", "filename": "libstdc++-v3/include/debug/safe_iterator.tcc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079c74f3fcc7782a6f8d805be1ced373eeb95474/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079c74f3fcc7782a6f8d805be1ced373eeb95474/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc?ref=079c74f3fcc7782a6f8d805be1ced373eeb95474", "patch": "@@ -1,6 +1,6 @@\n // Debugging iterator implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009, 2010, 2011\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009, 2010, 2011, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -91,10 +91,11 @@ namespace __gnu_debug\n \t/* We can only test for equality, but check if one of the\n \t   iterators is at an extreme. */\n \t/* Optim for classic [begin, it) or [it, end) ranges, limit checks\n-\t * when code is valid. */\n-\tif (_M_is_begin() || __rhs._M_is_end())\n+\t * when code is valid.  Note, for the special case of forward_list,\n+\t * before_begin replaces the role of begin.  */ \n+\tif (_M_is_beginnest() || __rhs._M_is_end())\n \t  return true;\n-\tif (_M_is_end() || __rhs._M_is_begin())\n+\tif (_M_is_end() || __rhs._M_is_beginnest())\n \t  return false;\n \n \t// Assume that this is a valid range; we can't check anything else"}, {"sha": "4cc1cfcf78dcf74a0364a9980ec8ce301ecb0717", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/debug/splice_after.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079c74f3fcc7782a6f8d805be1ced373eeb95474/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fsplice_after.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079c74f3fcc7782a6f8d805be1ced373eeb95474/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fsplice_after.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fsplice_after.cc?ref=079c74f3fcc7782a6f8d805be1ced373eeb95474", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,6 +34,10 @@ test01()\n \n   VERIFY( before == fl1.before_begin() );\n   VERIFY( end == fl1.end() );\n+\n+  // no-op just to check that debug mode does not see any problem with it.\n+  fl1.splice_after(fl1.before_begin(), std::move(fl2),\n+\t\t   fl2.before_begin(), fl2.begin());\n }\n \n int"}]}