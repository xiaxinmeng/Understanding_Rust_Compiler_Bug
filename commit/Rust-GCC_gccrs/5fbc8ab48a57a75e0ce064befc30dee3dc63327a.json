{"sha": "5fbc8ab48a57a75e0ce064befc30dee3dc63327a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZiYzhhYjQ4YTU3YTc1ZTBjZTA2NGJlZmMzMGRlZTNkYzYzMzI3YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-08-13T18:16:29Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-08-13T18:16:29Z"}, "message": "i386.md (ix86_expand_vector_extract): Use vec_extr path for TARGET_MMX_WITH_SSE && TARGET_SSE4_1.\n\n\t* config/i386/i386.md (ix86_expand_vector_extract) <case E_V2SImode>:\n\tUse vec_extr path for TARGET_MMX_WITH_SSE && TARGET_SSE4_1.\n\t<case E_V8QImode>: Ditto.\n\t* config/i386/mmx.md (*mmx_pextrw_zext): Rename from mmx_pextrw.\n\tUse SWI48 mode iterator.  Use %k to output operand 0.\n\t(*mmx_pextrw): New insn pattern.\n\t(*mmx_pextrb): Ditto.\n\t(*mmx_pextrb_zext): Ditto.\n\nFrom-SVN: r274389", "tree": {"sha": "dec517f4b76d44ee733b5ec6373c49f0e260fe17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dec517f4b76d44ee733b5ec6373c49f0e260fe17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fbc8ab48a57a75e0ce064befc30dee3dc63327a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fbc8ab48a57a75e0ce064befc30dee3dc63327a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fbc8ab48a57a75e0ce064befc30dee3dc63327a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fbc8ab48a57a75e0ce064befc30dee3dc63327a/comments", "author": null, "committer": null, "parents": [{"sha": "48668ee0d23119ee55f6c844b214342486cc8f1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48668ee0d23119ee55f6c844b214342486cc8f1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48668ee0d23119ee55f6c844b214342486cc8f1f"}], "stats": {"total": 81, "additions": 75, "deletions": 6}, "files": [{"sha": "e42fcf4698c26b3818139be6e62d35532c16c7eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbc8ab48a57a75e0ce064befc30dee3dc63327a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbc8ab48a57a75e0ce064befc30dee3dc63327a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fbc8ab48a57a75e0ce064befc30dee3dc63327a", "patch": "@@ -1,3 +1,14 @@\n+2019-08-13  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (ix86_expand_vector_extract) <case E_V2SImode>:\n+\tUse vec_extr path for TARGET_MMX_WITH_SSE && TARGET_SSE4_1.\n+\t<case E_V8QImode>: Ditto.\n+\t* config/i386/mmx.md (*mmx_pextrw_zext): Rename from mmx_pextrw.\n+\tUse SWI48 mode iterator.  Use %k to output operand 0.\n+\t(*mmx_pextrw): New insn pattern.\n+\t(*mmx_pextrb): Ditto.\n+\t(*mmx_pextrb_zext): Ditto.\n+\n 2019-08-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* target.def (libc_has_function, libc_has_fast_function): Improve\n@@ -23,7 +34,7 @@\n \t* cfgrtl.c (patch_jump_insn): Use it.\n \t* dwarf2cfi.c (create_trace_edges): Use it.\n \n-2019-08-13  Wilco Dijkstra  <wdijkstr@arm.com>  \n+2019-08-13  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \tPR target/81800\n \t* gcc/config/aarch64/aarch64.md (lrint): Disable lrint pattern if GPF"}, {"sha": "176347cd4e6df429afa9d339347edc90fe49dd17", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbc8ab48a57a75e0ce064befc30dee3dc63327a/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbc8ab48a57a75e0ce064befc30dee3dc63327a/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=5fbc8ab48a57a75e0ce064befc30dee3dc63327a", "patch": "@@ -14617,6 +14617,11 @@ ix86_expand_vector_extract (bool mmx_ok, rtx target, rtx vec, int elt)\n   switch (mode)\n     {\n     case E_V2SImode:\n+      use_vec_extr = TARGET_MMX_WITH_SSE && TARGET_SSE4_1;\n+      if (use_vec_extr)\n+\tbreak;\n+      /* FALLTHRU */\n+\n     case E_V2SFmode:\n       if (!mmx_ok)\n \tbreak;\n@@ -14866,7 +14871,10 @@ ix86_expand_vector_extract (bool mmx_ok, rtx target, rtx vec, int elt)\n       return;\n \n     case E_V8QImode:\n+      use_vec_extr = TARGET_MMX_WITH_SSE && TARGET_SSE4_1;\n       /* ??? Could extract the appropriate HImode element and shift.  */\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "33eb15fae207cd2603ba8cecfde69d24c26e794e", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 55, "deletions": 5, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbc8ab48a57a75e0ce064befc30dee3dc63327a/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbc8ab48a57a75e0ce064befc30dee3dc63327a/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=5fbc8ab48a57a75e0ce064befc30dee3dc63327a", "patch": "@@ -1510,23 +1510,73 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"mmx_pextrw\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-        (zero_extend:SI\n+(define_insn \"*mmx_pextrw\"\n+  [(set (match_operand:HI 0 \"register_sse4nonimm_operand\" \"=r,r,m\")\n+\t(vec_select:HI\n+\t  (match_operand:V4HI 1 \"register_operand\" \"y,Yv,Yv\")\n+\t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n,n,n\")])))]\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n+   && (TARGET_SSE || TARGET_3DNOW_A)\"\n+  \"@\n+   pextrw\\t{%2, %1, %k0|%k0, %1, %2}\n+   %vpextrw\\t{%2, %1, %k0|%k0, %1, %2}\n+   %vpextrw\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"*,sse2,sse4\")\n+   (set_attr \"mmx_isa\" \"native,*,*\")\n+   (set_attr \"type\" \"mmxcvt,sselog1,sselog1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"orig,maybe_vex,maybe_vex\")\n+   (set_attr \"mode\" \"DI,TI,TI\")])\n+\n+(define_insn \"*mmx_pextrw_zext\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:SWI48\n \t  (vec_select:HI\n \t    (match_operand:V4HI 1 \"register_operand\" \"y,Yv\")\n \t    (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n,n\")]))))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n    && (TARGET_SSE || TARGET_3DNOW_A)\"\n   \"@\n-   pextrw\\t{%2, %1, %0|%0, %1, %2}\n-   %vpextrw\\t{%2, %1, %0|%0, %1, %2}\"\n+   pextrw\\t{%2, %1, %k0|%k0, %1, %2}\n+   %vpextrw\\t{%2, %1, %k0|%k0, %1, %2}\"\n   [(set_attr \"isa\" \"*,sse2\")\n    (set_attr \"mmx_isa\" \"native,*\")\n    (set_attr \"type\" \"mmxcvt,sselog1\")\n    (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"orig,maybe_vex\")\n    (set_attr \"mode\" \"DI,TI\")])\n \n+(define_insn \"*mmx_pextrb\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,m\")\n+\t(vec_select:QI\n+\t  (match_operand:V8QI 1 \"register_operand\" \"Yv,Yv\")\n+\t  (parallel [(match_operand:SI 2 \"const_0_to_7_operand\" \"n,n\")])))]\n+  \"TARGET_MMX_WITH_SSE && TARGET_SSE4_1\"\n+  \"@\n+   %vpextrb\\t{%2, %1, %k0|%k0, %1, %2}\n+   %vpextrb\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*mmx_pextrb_zext\"\n+  [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n+\t(zero_extend:SWI248\n+\t  (vec_select:QI\n+\t    (match_operand:V8QI 1 \"register_operand\" \"Yv\")\n+\t    (parallel [(match_operand:SI 2 \"const_0_to_7_operand\" \"n\")]))))]\n+  \"TARGET_MMX_WITH_SSE && TARGET_SSE4_1\"\n+  \"%vpextrb\\t{%2, %1, %k0|%k0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_expand \"mmx_pshufw\"\n   [(match_operand:V4HI 0 \"register_operand\")\n    (match_operand:V4HI 1 \"register_mmxmem_operand\")"}]}