{"sha": "c0d81bd8ecba548698172d64ac85a3ea3bc61ec3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBkODFiZDhlY2JhNTQ4Njk4MTcyZDY0YWM4NWEzZWEzYmM2MWVjMw==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-06-13T20:35:12Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-06-13T20:35:12Z"}, "message": "re PR libfortran/35863 ([F2003] Implement ENCODING=\"UTF-8\")\n\n2008-06-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/35863\n\t* gfortran.dg/widechar_IO_1.f90: New test.\n\t* gfortran.dg/widechar_IO_2.f90: New test.\n\t* gfortran.dg/widechar_IO_3.f90: New test.\n\t* gfortran.dg/widechar_IO_4.f90: New test.\n\nFrom-SVN: r136766", "tree": {"sha": "86fb3737c3f02b69b41302abe70a4de237f72345", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86fb3737c3f02b69b41302abe70a4de237f72345"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0d81bd8ecba548698172d64ac85a3ea3bc61ec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d81bd8ecba548698172d64ac85a3ea3bc61ec3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0d81bd8ecba548698172d64ac85a3ea3bc61ec3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d81bd8ecba548698172d64ac85a3ea3bc61ec3/comments", "author": null, "committer": null, "parents": [{"sha": "8a22191467dbfb77381a1d204ad96515bc3022c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a22191467dbfb77381a1d204ad96515bc3022c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a22191467dbfb77381a1d204ad96515bc3022c2"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "dd044c2b2df861547e20bbecc6936a03b06b7c1a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d81bd8ecba548698172d64ac85a3ea3bc61ec3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d81bd8ecba548698172d64ac85a3ea3bc61ec3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0d81bd8ecba548698172d64ac85a3ea3bc61ec3", "patch": "@@ -1,3 +1,11 @@\n+2008-06-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/35863\n+\t* gfortran.dg/widechar_IO_1.f90: New test.\n+\t* gfortran.dg/widechar_IO_2.f90: New test.\n+\t* gfortran.dg/widechar_IO_3.f90: New test.\n+\t* gfortran.dg/widechar_IO_4.f90: New test.\n+\n 2008-06-13  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/36476"}, {"sha": "0fe479cda64917a66524633cbf9acb60180a9048", "filename": "gcc/testsuite/gfortran.dg/widechar_IO_1.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d81bd8ecba548698172d64ac85a3ea3bc61ec3/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_IO_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d81bd8ecba548698172d64ac85a3ea3bc61ec3/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_IO_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_IO_1.f90?ref=c0d81bd8ecba548698172d64ac85a3ea3bc61ec3", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+! Wide chracter I/O test 1, formatted and mixed kind\n+! Test case developed by Jerry DeLisle <jvdelisle@gcc.gnu.org>\n+program test1\n+  integer, parameter :: k4 = 4\n+  character(len=10,kind=4) :: wide\n+  character(len=10,kind=1) :: thin\n+  character(kind=1,len=25) :: buffer\n+  wide=k4_\"Goodbye!\"\n+  thin=\"Hello!\"\n+  write(buffer, '(a)') wide\n+  if (buffer /= \"Goodbye!\") call abort\n+  open(10, form=\"formatted\", access=\"stream\", status=\"scratch\")\n+  write(10, '(a)') thin\n+  rewind(10)\n+  read(10, '(a)') wide\n+  if (wide /= k4_\"Hello!\") call abort\n+  write(buffer,*) thin, \">\",wide,\"<\"\n+  if (buffer /= \" Hello!    >Hello!    <\") call abort\n+end program test1"}, {"sha": "6b13e4f93f1a21b67e8c1ac269591d553924b2c0", "filename": "gcc/testsuite/gfortran.dg/widechar_IO_2.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d81bd8ecba548698172d64ac85a3ea3bc61ec3/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_IO_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d81bd8ecba548698172d64ac85a3ea3bc61ec3/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_IO_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_IO_2.f90?ref=c0d81bd8ecba548698172d64ac85a3ea3bc61ec3", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do run }\n+! Wide chracter I/O test 2, formatted array write and read\n+! Test case developed by Jerry DeLisle <jvdelisle@gcc.gnu.org>\n+program chkdata\n+    integer, parameter :: k4=4\n+    character(len=7, kind=k4), dimension(3) :: mychar\n+    character(50) :: buffer\n+    mychar(1) = k4_\"abc1234\"\n+    mychar(2) = k4_\"def5678\"\n+    mychar(3) = k4_\"ghi9012\"\n+    buffer = \"\"\n+    write(buffer,'(3(a))') mychar(2:3), mychar(1)\n+    if (buffer /= \"def5678ghi9012abc1234\") call abort\n+    write(buffer,'(3(a))') mychar\n+    if (buffer /= \"abc1234def5678ghi9012\") call abort\n+    mychar = \"\"\n+    read(buffer,'(3(a))') mychar\n+    if (any(mychar.ne.[ k4_\"abc1234\",k4_\"def5678\",k4_\"ghi9012\" ])) call abort\n+end program chkdata"}, {"sha": "6f4a10c857e150dda01e2799585b929a246ab57b", "filename": "gcc/testsuite/gfortran.dg/widechar_IO_3.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d81bd8ecba548698172d64ac85a3ea3bc61ec3/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_IO_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d81bd8ecba548698172d64ac85a3ea3bc61ec3/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_IO_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_IO_3.f90?ref=c0d81bd8ecba548698172d64ac85a3ea3bc61ec3", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do run }\n+! Wide chracter I/O test 3, unformatted arrays\n+! Test case developed by Jerry DeLisle <jvdelisle@gcc.gnu.org>\n+program test1\n+  integer, parameter :: k4 = 4\n+  character(len=10,kind=4) :: wide\n+  character(len=10,kind=4), dimension(5,7) :: widearray\n+  wide = k4_\"abcdefg\"\n+  widearray = k4_\"1234abcd\"\n+  open(10, form=\"unformatted\", status=\"scratch\")\n+  write(10) wide\n+  rewind(10)\n+  wide = \"wrong\"\n+  read(10) wide\n+  if (wide /= k4_\"abcdefg\") call abort\n+  rewind(10)\n+  write(10) widearray(2:4,3:7)\n+  widearray(2:4,3:7)=\"\"\n+  rewind(10)\n+  read(10) widearray(2:4,3:7)\n+  close(10)\n+  if (any(widearray.ne.k4_\"1234abcd\")) call abort\n+end program test1"}, {"sha": "e108b15c4f546baedbc87d653f13cd6b795ebed0", "filename": "gcc/testsuite/gfortran.dg/widechar_IO_4.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d81bd8ecba548698172d64ac85a3ea3bc61ec3/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_IO_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d81bd8ecba548698172d64ac85a3ea3bc61ec3/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_IO_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_IO_4.f90?ref=c0d81bd8ecba548698172d64ac85a3ea3bc61ec3", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do run }\n+! { dg-options -fbackslash }\n+! Wide chracter I/O test 4, formatted ISO-8859-1 characters in string\n+! Test case developed by Jerry DeLisle <jvdelisle@gcc.gnu.org>\n+! Compile with -fbackslash\n+integer, parameter  :: k4 = 4\n+character(kind=1,len=15) :: buffer\n+character(kind=1, len=1) :: c1, c2\n+character(kind=4,len=20) :: str = k4_'X\\xF8\u00f6ABC' ! ISO-8859-1 encoded string\n+buffer = \"\"\n+write(buffer,'(3a)')':',trim(str),':'\n+if (buffer.ne.':X\\xF8\u00f6ABC: ') call abort\n+str = \"\"\n+read(buffer,'(3a)') c1,str(1:6),c2\n+if (c1.ne.':') call abort\n+if (str.ne.k4_'X\\xF8\u00f6AB') call abort\n+if (c2.ne.'C') call abort\n+end"}]}