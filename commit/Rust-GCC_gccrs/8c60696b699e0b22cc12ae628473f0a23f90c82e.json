{"sha": "8c60696b699e0b22cc12ae628473f0a23f90c82e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM2MDY5NmI2OTllMGIyMmNjMTJhZTYyODQ3M2YwYTIzZjkwYzgyZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-09T20:18:06Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-10T13:21:52Z"}, "message": "c++: Module-specific error and tree dumping\n\nWith modules, we need the ability to name 'foos' in different modules.\nThe idiom for that is a trailing '@modulename' suffix.  This adds that\nto the error printing routines.  I also augment the tree dumping\nmachinery to show module-specific metadata.\n\n\tgcc/cp/\n\t* error.c (dump_module_suffix): New.\n\t(dump_aggr_type, dump_simple_decl, dump_function_name): Call it.\n\t* ptree.c (cxx_print_decl): Print module information.\n\t* module.cc (module_name, get_importing_module): Stubs.", "tree": {"sha": "3f67ba38dcace1dc882fc9768a287feab2399847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f67ba38dcace1dc882fc9768a287feab2399847"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c60696b699e0b22cc12ae628473f0a23f90c82e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c60696b699e0b22cc12ae628473f0a23f90c82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c60696b699e0b22cc12ae628473f0a23f90c82e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c60696b699e0b22cc12ae628473f0a23f90c82e/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79c1b9fb44ce9abd0e2f6642b65684b9721233ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79c1b9fb44ce9abd0e2f6642b65684b9721233ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79c1b9fb44ce9abd0e2f6642b65684b9721233ee"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "4572f6e4ae2b93b1e7be6e6f678f4b91e26b1f95", "filename": "gcc/cp/error.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c60696b699e0b22cc12ae628473f0a23f90c82e/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c60696b699e0b22cc12ae628473f0a23f90c82e/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=8c60696b699e0b22cc12ae628473f0a23f90c82e", "patch": "@@ -179,6 +179,38 @@ cxx_initialize_diagnostics (diagnostic_context *context)\n   pp->m_format_postprocessor = new cxx_format_postprocessor ();\n }\n \n+/* Dump an '@module' name suffix for DECL, if any.  */\n+\n+static void\n+dump_module_suffix (cxx_pretty_printer *pp, tree decl)\n+{\n+  if (!modules_p ())\n+    return;\n+\n+  if (!DECL_CONTEXT (decl))\n+    return;\n+\n+  if (TREE_CODE (decl) != CONST_DECL\n+      || !UNSCOPED_ENUM_P (DECL_CONTEXT (decl)))\n+    {\n+      if (!DECL_NAMESPACE_SCOPE_P (decl))\n+\treturn;\n+\n+      if (TREE_CODE (decl) == NAMESPACE_DECL\n+\t  && !DECL_NAMESPACE_ALIAS (decl)\n+\t  && (TREE_PUBLIC (decl) || !TREE_PUBLIC (CP_DECL_CONTEXT (decl))))\n+\treturn;\n+    }\n+\n+  if (unsigned m = get_originating_module (decl))\n+    if (const char *n = module_name (m, false))\n+      {\n+\tpp_character (pp, '@');\n+\tpp->padding = pp_none;\n+\tpp_string (pp, n);\n+      }\n+}\n+\n /* Dump a scope, if deemed necessary.  */\n \n static void\n@@ -771,6 +803,8 @@ dump_aggr_type (cxx_pretty_printer *pp, tree t, int flags)\n   else\n     pp_cxx_tree_identifier (pp, DECL_NAME (decl));\n \n+  dump_module_suffix (pp, decl);\n+\n   if (tmplate)\n     dump_template_parms (pp, TYPE_TEMPLATE_INFO (t),\n \t\t\t !CLASSTYPE_USE_TEMPLATE (t),\n@@ -1077,6 +1111,9 @@ dump_simple_decl (cxx_pretty_printer *pp, tree t, tree type, int flags)\n     pp_string (pp, M_(\"<structured bindings>\"));\n   else\n     pp_string (pp, M_(\"<anonymous>\"));\n+\n+  dump_module_suffix (pp, t);\n+\n   if (flags & TFF_DECL_SPECIFIERS)\n     dump_type_suffix (pp, type, flags);\n }\n@@ -1894,6 +1931,8 @@ dump_function_name (cxx_pretty_printer *pp, tree t, int flags)\n   else\n     dump_decl (pp, name, flags);\n \n+  dump_module_suffix (pp, t);\n+\n   if (DECL_TEMPLATE_INFO (t)\n       && !DECL_FRIEND_PSEUDO_TEMPLATE_INSTANTIATION (t)\n       && (TREE_CODE (DECL_TI_TEMPLATE (t)) != TEMPLATE_DECL"}, {"sha": "176286cdd91a282318b79df0d3a985fcfab39e86", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c60696b699e0b22cc12ae628473f0a23f90c82e/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c60696b699e0b22cc12ae628473f0a23f90c82e/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=8c60696b699e0b22cc12ae628473f0a23f90c82e", "patch": "@@ -74,6 +74,11 @@ get_module (tree, module_state *, bool)\n   return nullptr;\n }\n \n+const char *\n+module_name (unsigned, bool)\n+{\n+  return nullptr;\n+}\n \n void\n mangle_module (int, bool)\n@@ -102,6 +107,12 @@ get_originating_module (tree, bool)\n   return 0;\n }\n \n+unsigned\n+get_importing_module (tree, bool)\n+{\n+  return 0;\n+}\n+\n bool\n module_may_redeclare (tree)\n {"}, {"sha": "1e9fdf82e8681fb9da74909c3dd63e24efaca1ac", "filename": "gcc/cp/ptree.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c60696b699e0b22cc12ae628473f0a23f90c82e/gcc%2Fcp%2Fptree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c60696b699e0b22cc12ae628473f0a23f90c82e/gcc%2Fcp%2Fptree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fptree.c?ref=8c60696b699e0b22cc12ae628473f0a23f90c82e", "patch": "@@ -59,6 +59,42 @@ cxx_print_decl (FILE *file, tree node, int indent)\n \n   bool need_indent = true;\n \n+  if (TREE_CODE (node) == FUNCTION_DECL\n+      || TREE_CODE (node) == VAR_DECL\n+      || TREE_CODE (node) == TYPE_DECL\n+      || TREE_CODE (node) == TEMPLATE_DECL\n+      || TREE_CODE (node) == CONCEPT_DECL\n+      || TREE_CODE (node) == NAMESPACE_DECL)\n+    {\n+      unsigned m = 0;\n+      if (DECL_LANG_SPECIFIC (node) && DECL_MODULE_IMPORT_P (node))\n+\tm = get_importing_module (node, true);\n+\n+      if (const char *name = m == ~0u ? \"\" : module_name (m, true))\n+\t{\n+\t  if (need_indent)\n+\t    indent_to (file, indent + 3);\n+\t  fprintf (file, \" module %d:%s\", m, name);\n+\t  need_indent = false;\n+\t}\n+\n+      if (DECL_LANG_SPECIFIC (node) && DECL_MODULE_PURVIEW_P (node))\n+\t{\n+\t  if (need_indent)\n+\t    indent_to (file, indent + 3);\n+\t  fprintf (file, \" purview\");\n+\t  need_indent = false;\n+\t}\n+    }\n+\n+  if (DECL_MODULE_EXPORT_P (node))\n+    {\n+      if (need_indent)\n+\tindent_to (file, indent + 3);\n+      fprintf (file, \" exported\");\n+      need_indent = false;\n+    }\n+\n   if (DECL_EXTERNAL (node) && DECL_NOT_REALLY_EXTERN (node))\n     {\n       if (need_indent)"}]}