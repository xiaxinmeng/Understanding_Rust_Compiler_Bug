{"sha": "39a13be5cbfe0e9623782de3733cd8265e6230d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlhMTNiZTVjYmZlMGU5NjIzNzgyZGUzNzMzY2Q4MjY1ZTYyMzBkNA==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2008-07-21T19:29:07Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2008-07-21T19:29:07Z"}, "message": "objc-act.c: Fix comment typos.\n\ngcc/objc/\n\n\t* objc-act.c: Fix comment typos.\n\ngcc/cp/\n\n\t* call.c: Fix comment typos.\n\t* class.c: Likewise.\n\t* cp-tree.h: Likewise.\n\t* cxx-pretty-print.c: Likewise.\n\t* decl.c: Likewise.\n\t* init.c: Likewise.\n\t* name-lookup.c: Likewise.\n\t* operators.def: Likewise.\n\t* parser.c: Likewise.\n\t* pt.c: Likewise.\n\t* tree.c: Likewise.\n\t* typeck.c: Likewise.\n\nFrom-SVN: r138042", "tree": {"sha": "6665537e7f885d1d1832af7b0b228f216c10e7d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6665537e7f885d1d1832af7b0b228f216c10e7d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39a13be5cbfe0e9623782de3733cd8265e6230d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a13be5cbfe0e9623782de3733cd8265e6230d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39a13be5cbfe0e9623782de3733cd8265e6230d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a13be5cbfe0e9623782de3733cd8265e6230d4/comments", "author": null, "committer": null, "parents": [{"sha": "5194c5c12990408f73e6a1fc1d1132c887ab4c08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5194c5c12990408f73e6a1fc1d1132c887ab4c08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5194c5c12990408f73e6a1fc1d1132c887ab4c08"}], "stats": {"total": 101, "additions": 60, "deletions": 41}, "files": [{"sha": "da6a3773dcd0ae1a5610d2fd4d4c286bf36abd02", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=39a13be5cbfe0e9623782de3733cd8265e6230d4", "patch": "@@ -1,3 +1,18 @@\n+2008-07-21  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* call.c: Fix comment typos.\n+\t* class.c: Likewise.\n+\t* cp-tree.h: Likewise.\n+\t* cxx-pretty-print.c: Likewise.\n+\t* decl.c: Likewise.\n+\t* init.c: Likewise.\n+\t* name-lookup.c: Likewise.\n+\t* operators.def: Likewise.\n+\t* parser.c: Likewise.\n+\t* pt.c: Likewise.\n+\t* tree.c: Likewise.\n+\t* typeck.c: Likewise.\n+\n 2008-07-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/36871"}, {"sha": "93ce4d8366db6bbe7260fec46fc0b8e1c61e8217", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=39a13be5cbfe0e9623782de3733cd8265e6230d4", "patch": "@@ -3416,7 +3416,7 @@ build_conditional_expr (tree arg1, tree arg2, tree arg3,\n \n   /* [expr.cond]\n \n-     The first expr ession is implicitly converted to bool (clause\n+     The first expression is implicitly converted to bool (clause\n      _conv_).  */\n   arg1 = perform_implicit_conversion (boolean_type_node, arg1, complain);\n "}, {"sha": "0c7a76c697a30903a0b21669904e5bdbbbba6993", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=39a13be5cbfe0e9623782de3733cd8265e6230d4", "patch": "@@ -4197,7 +4197,7 @@ check_bases_and_members (tree t)\n     |= (TYPE_HAS_USER_CONSTRUCTOR (t) || TYPE_CONTAINS_VPTR_P (t));\n   /* [dcl.init.aggr]\n \n-     An aggregate is an arry or a class with no user-declared\n+     An aggregate is an array or a class with no user-declared\n      constructors ... and no virtual functions.  \n \n      Again, other conditions for being an aggregate are checked\n@@ -7386,7 +7386,7 @@ build_vtbl_initializer (tree binfo,\n \n \t We first check this in update_vtable_entry_for_fn, so we handle\n \t restored primary bases properly; we also need to do it here so we\n-\t zero out unused slots in ctor vtables, rather than filling themff\n+\t zero out unused slots in ctor vtables, rather than filling them\n \t with erroneous values (though harmless, apart from relocation\n \t costs).  */\n       for (b = binfo; ; b = get_primary_binfo (b))"}, {"sha": "6bc5d2d2782d55ebda7a5b769cb17d43e49ca65f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=39a13be5cbfe0e9623782de3733cd8265e6230d4", "patch": "@@ -853,7 +853,7 @@ struct language_function GTY(())\n #define cp_function_chain (cfun->language)\n \n /* In a constructor destructor, the point at which all derived class\n-   destroying/construction has been has been done. Ie. just before a\n+   destroying/construction has been done.  I.e., just before a\n    constructor returns, or before any base class destroying will be done\n    in a destructor.  */\n \n@@ -1917,7 +1917,7 @@ struct lang_decl GTY(())\n \n /* Nonzero if the DECL was initialized in the class definition itself,\n    rather than outside the class.  This is used for both static member\n-   VAR_DECLS, and FUNTION_DECLS that are defined in the class.  */\n+   VAR_DECLS, and FUNCTION_DECLS that are defined in the class.  */\n #define DECL_INITIALIZED_IN_CLASS_P(DECL) \\\n  (DECL_LANG_SPECIFIC (DECL)->decl_flags.initialized_in_class)\n \n@@ -3199,7 +3199,7 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n       template <class T> struct S { friend void f(T) {}; };\n    the declaration of `void f(int)' generated when S<int> is\n    instantiated will not be a DECL_TEMPLATE_INSTANTIATION, but will be\n-   a DECL_FRIEND_PSUEDO_TEMPLATE_INSTANTIATION.  */\n+   a DECL_FRIEND_PSEUDO_TEMPLATE_INSTANTIATION.  */\n #define DECL_FRIEND_PSEUDO_TEMPLATE_INSTANTIATION(DECL) \\\n   (DECL_TEMPLATE_INFO (DECL) && !DECL_USE_TEMPLATE (DECL))\n "}, {"sha": "cf9ed482e8468ea7b71eaac364da0287dc8d0348", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=39a13be5cbfe0e9623782de3733cd8265e6230d4", "patch": "@@ -452,7 +452,7 @@ pp_cxx_primary_expression (cxx_pretty_printer *pp, tree t)\n      reinterpret_cast < type-id > ( expression )\n      const_cast < type-id > ( expression )\n      typeid ( expression )\n-     typeif ( type-id )  */\n+     typeid ( type-id )  */\n \n static void\n pp_cxx_postfix_expression (cxx_pretty_printer *pp, tree t)\n@@ -810,7 +810,7 @@ pp_cxx_pm_expression (cxx_pretty_printer *pp, tree t)\n {\n   switch (TREE_CODE (t))\n     {\n-      /* Handle unfortunate OFFESET_REF overloading here.  */\n+      /* Handle unfortunate OFFSET_REF overloading here.  */\n     case OFFSET_REF:\n       if (TYPE_P (TREE_OPERAND (t, 0)))\n \t{\n@@ -2016,7 +2016,7 @@ pp_cxx_template_parameter (cxx_pretty_printer *pp, tree t)\n \tpp_cxx_identifier (pp, \"...\");\n       if (DECL_NAME (parameter))\n \tpp_cxx_tree_identifier (pp, DECL_NAME (parameter));\n-      /* FIXME: Chech if we should print also default argument.  */\n+      /* FIXME: Check if we should print also default argument.  */\n       break;\n \n     case PARM_DECL:"}, {"sha": "e304345525714ad8d18c556eb4e5e6de904274bd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=39a13be5cbfe0e9623782de3733cd8265e6230d4", "patch": "@@ -315,7 +315,7 @@ current_tmpl_spec_kind (int n_class_scopes)\n \n \t template <class T> void S<T>::f(int);\n \n-       The `class T' maches the `S<T>', leaving no template headers\n+       The `class T' matches the `S<T>', leaving no template headers\n        corresponding to the `f'.  */\n     return tsk_none;\n   else if (n_template_parm_scopes > n_class_scopes + 1)\n@@ -4345,7 +4345,7 @@ check_array_designated_initializer (const constructor_elt *ce)\n   if (ce->index)\n     {\n       /* The parser only allows identifiers as designated\n-\t intializers.  */\n+\t initializers.  */\n       gcc_assert (TREE_CODE (ce->index) == IDENTIFIER_NODE);\n       error (\"name %qD used in a GNU-style designated \"\n \t     \"initializer for an array\", ce->index);\n@@ -7050,7 +7050,7 @@ compute_array_index_type (tree name, tree size)\n   \n   if (!abi_version_at_least (2) && processing_template_decl)\n     /* For abi-1, we handled all instances in templates the same way,\n-       even when they were non-dependent. This effects the manglings\n+       even when they were non-dependent. This affects the manglings\n        produced.  So, we do the normal checking for non-dependent\n        sizes, but at the end we'll return the same type that abi-1\n        would have, but with TYPE_CANONICAL set to the \"right\"\n@@ -10839,7 +10839,7 @@ finish_enum (tree enumtype)\n       underlying_type = integer_types[itk_unsigned_long_long];\n     }\n \n-  /* Compute the minium and maximum values for the type.\n+  /* Compute the minimum and maximum values for the type.\n \n      [dcl.enum]\n \n@@ -12195,7 +12195,7 @@ maybe_register_incomplete_var (tree var)\n }\n \n /* Called when a class type (given by TYPE) is defined.  If there are\n-   any existing VAR_DECLs whose type hsa been completed by this\n+   any existing VAR_DECLs whose type has been completed by this\n    declaration, update them now.  */\n \n void\n@@ -12260,7 +12260,7 @@ cxx_maybe_build_cleanup (tree decl)\n \t initial checks on the attribute.  Note that those checks\n \t include ensuring that the function found is not an overloaded\n \t function, or an object with an overloaded call operator,\n-\t etc.; we can rely on the fact that the functionfound is an\n+\t etc.; we can rely on the fact that the function found is an\n \t ordinary FUNCTION_DECL.  */\n       fn = lookup_name (id);\n       arg = build_address (decl);"}, {"sha": "7319568b4b4d085f2887c055def904ee266f1e85", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=39a13be5cbfe0e9623782de3733cd8265e6230d4", "patch": "@@ -1578,7 +1578,7 @@ build_offset_ref (tree type, tree member, bool address_p)\n \t   a class derived from that class (_class.base.init_).  */\n       if (DECL_NONSTATIC_MEMBER_FUNCTION_P (member))\n \t{\n-\t  /* Build a representation of a the qualified name suitable\n+\t  /* Build a representation of the qualified name suitable\n \t     for use as the operand to \"&\" -- even though the \"&\" is\n \t     not actually present.  */\n \t  member = build2 (OFFSET_REF, TREE_TYPE (member), decl, member);"}, {"sha": "477cfb367e8f48a9964436e0d4ec134971f593aa", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=39a13be5cbfe0e9623782de3733cd8265e6230d4", "patch": "@@ -131,7 +131,7 @@ struct binding_table_s GTY(())\n   binding_entry * GTY((length (\"%h.chain_count\"))) chain;\n \n   /* The number of chains in this table.  This is the length of the\n-     the member \"chain\" considered as an array.  */\n+     member \"chain\" considered as an array.  */\n   size_t chain_count;\n \n   /* Number of \"binding_entry\"s in this table.  */\n@@ -782,7 +782,7 @@ pushdecl_maybe_friend (tree x, bool is_friend)\n \t      tree previous = function_binding->value;\n \n \t      /* In case either x or previous is declared to throw an exception,\n-\t         make sure both exception speficications are equal.  */\n+\t         make sure both exception specifications are equal.  */\n \t      if (decls_match (x, previous))\n \t\t{\n \t\t  tree x_exception_spec = NULL_TREE;"}, {"sha": "9c2dd8b2ca1d08f3b888eb2deacc3b9fe76ad6cd", "filename": "gcc/cp/operators.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Foperators.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Foperators.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foperators.def?ref=39a13be5cbfe0e9623782de3733cd8265e6230d4", "patch": "@@ -5,7 +5,7 @@\n    non-overloadable operators (like the `?:' ternary operator).\n    Written by Mark Mitchell <mark@codesourcery.com>\n \n-   Copyright (C) 2000, 2001, 2002, 2003, 2005, 2007\n+   Copyright (C) 2000, 2001, 2002, 2003, 2005, 2007, 2008\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -56,7 +56,7 @@ along with GCC; see the file COPYING3.  If not see\n \n      A boolean value.  If nonzero, this is an assignment operator.\n \n-   Before including this file, you should define DEFOPERATOR\n+   Before including this file, you should define DEF_OPERATOR\n    to take these arguments.\n \n    There is code (such as in grok_op_properties) that depends on the"}, {"sha": "03606084258e76fc5c7090aa9c4b87e3ccd30826", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=39a13be5cbfe0e9623782de3733cd8265e6230d4", "patch": "@@ -1372,7 +1372,7 @@ cp_parser_context_new (cp_parser_context* next)\n \n   /* No errors have occurred yet in this context.  */\n   context->status = CP_PARSER_STATUS_KIND_NO_ERROR;\n-  /* If this is not the bottomost context, copy information that we\n+  /* If this is not the bottommost context, copy information that we\n      need from the previous context.  */\n   if (next)\n     {\n@@ -6319,7 +6319,7 @@ cp_parser_assignment_operator_opt (cp_parser* parser)\n   enum tree_code op;\n   cp_token *token;\n \n-  /* Peek at the next toen.  */\n+  /* Peek at the next token.  */\n   token = cp_lexer_peek_token (parser->lexer);\n \n   switch (token->type)\n@@ -10468,7 +10468,7 @@ cp_parser_template_argument (cp_parser* parser)\n     {\n       cp_parser_parse_tentatively (parser);\n       argument = cp_parser_primary_expression (parser,\n-\t\t\t\t\t       /*adress_p=*/false,\n+\t\t\t\t\t       /*address_p=*/false,\n \t\t\t\t\t       /*cast_p=*/false,\n \t\t\t\t\t       /*template_arg_p=*/true,\n \t\t\t\t\t       &idk);\n@@ -12586,7 +12586,7 @@ cp_parser_init_declarator (cp_parser* parser,\n       cp_parser_perform_template_parameter_access_checks (checks);\n \n       /* Perform the access control checks for the declarator and the\n-\t the decl-specifiers.  */\n+\t decl-specifiers.  */\n       perform_deferred_access_checks ();\n \n       /* Restore the saved value.  */\n@@ -12863,7 +12863,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t       int i (3);\n \n \t     The first is the declaration of a function while the\n-\t     second is a the definition of a variable, including its\n+\t     second is the definition of a variable, including its\n \t     initializer.\n \n \t     Having seen only the parenthesis, we cannot know which of\n@@ -15006,9 +15006,9 @@ cp_parser_class_head (cp_parser* parser,\n \t}\n       /* [dcl.meaning]\n \n-\t A declarator-id shall not be qualified exception of the\n+\t A declarator-id shall not be qualified except for the\n \t definition of a ... nested class outside of its class\n-\t ... [or] a the definition or explicit instantiation of a\n+\t ... [or] the definition or explicit instantiation of a\n \t class member of a namespace outside of its namespace.  */\n       if (scope == nested_name_specifier)\n \t{"}, {"sha": "c609bd0cc3aaba9792f83737f0a80f524e7a9324", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=39a13be5cbfe0e9623782de3733cd8265e6230d4", "patch": "@@ -4241,7 +4241,7 @@ fold_non_dependent_expr (tree expr)\n \n /* EXPR is an expression which is used in a constant-expression context.\n    For instance, it could be a VAR_DECL with a constant initializer.\n-   Extract the innest constant expression.\n+   Extract the innermost constant expression.\n \n    This is basically a more powerful version of\n    integral_constant_value, which can be used also in templates where\n@@ -6401,7 +6401,7 @@ tsubst_friend_function (tree decl, tree args)\n \n       /* Friend functions are looked up in the containing namespace scope.\n \t We must enter that scope, to avoid finding member functions of the\n-\t current cless with same name.  */\n+\t current class with same name.  */\n       push_nested_namespace (ns);\n       fns = tsubst_expr (DECL_TI_TEMPLATE (decl), args,\n \t\t\t tf_warning_or_error, NULL_TREE,\n@@ -7104,7 +7104,7 @@ instantiate_class_template (tree type)\n \t\t{\n \t\t  tree r;\n \n-\t\t  /* The the file and line for this declaration, to\n+\t\t  /* The file and line for this declaration, to\n \t\t     assist in error message reporting.  Since we\n \t\t     called push_tinst_level above, we don't need to\n \t\t     restore these.  */\n@@ -7263,7 +7263,7 @@ instantiate_class_template (tree type)\n \t      /* Build new DECL_FRIENDLIST.  */\n \t      tree r;\n \n-\t      /* The the file and line for this declaration, to\n+\t      /* The file and line for this declaration, to\n \t\t assist in error message reporting.  Since we\n \t\t called push_tinst_level above, we don't need to\n \t\t restore these.  */\n@@ -11173,7 +11173,7 @@ tsubst_copy_and_build (tree t,\n \ttree init = RECUR (TREE_OPERAND (t, 3));\n \n \tif (TREE_OPERAND (t, 3) && !init)\n-\t  /* If there was an initializer in the the original tree, but\n+\t  /* If there was an initializer in the original tree, but\n \t     it instantiated to an empty list, then we should pass on\n \t     VOID_ZERO_NODE to tell build_new that it was an empty\n \t     initializer () rather than no initializer.  This can only\n@@ -13563,7 +13563,7 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n       /* CV qualifications for methods can never be deduced, they must\n \t match exactly.  We need to check them explicitly here,\n \t because type_unification_real treats them as any other\n-\t cvqualified parameter.  */\n+\t cv-qualified parameter.  */\n       if (TREE_CODE (parm) == METHOD_TYPE\n \t  && (!check_cv_quals_for_unify\n \t      (UNIFY_ALLOW_NONE,"}, {"sha": "0522ae2786f17a7e6ee594a9f81a0513ba2252ad", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=39a13be5cbfe0e9623782de3733cd8265e6230d4", "patch": "@@ -683,7 +683,7 @@ c_build_qualified_type (tree type, int type_quals)\n    arrays correctly.  In particular, if TYPE is an array of T's, and\n    TYPE_QUALS is non-empty, returns an array of qualified T's.\n \n-   FLAGS determines how to deal with illformed qualifications. If\n+   FLAGS determines how to deal with ill-formed qualifications. If\n    tf_ignore_bad_quals is set, then bad qualifications are dropped\n    (this is permitted if TYPE was introduced via a typedef or template\n    type parameter). If bad qualifications are dropped and tf_warning\n@@ -795,8 +795,8 @@ cp_build_qualified_type_real (tree type,\n       return make_pack_expansion (t);\n     }\n \n-  /* A reference or method type shall not be cv qualified.\n-     [dcl.ref], [dct.fct]  */\n+  /* A reference or method type shall not be cv-qualified.\n+     [dcl.ref], [dcl.fct]  */\n   if (type_quals & (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE)\n       && (TREE_CODE (type) == REFERENCE_TYPE\n \t  || TREE_CODE (type) == METHOD_TYPE))"}, {"sha": "3468bd41a1237f04fee11e31860334ec54df45ea", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=39a13be5cbfe0e9623782de3733cd8265e6230d4", "patch": "@@ -1645,7 +1645,7 @@ decay_conversion (tree exp)\n   return exp;\n }\n \n-/* Perform prepatory conversions, as part of the \"usual arithmetic\n+/* Perform preparatory conversions, as part of the \"usual arithmetic\n    conversions\".  In particular, as per [expr]:\n \n      Whenever an lvalue expression appears as an operand of an\n@@ -3299,7 +3299,7 @@ cp_build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t\t\t\t\t\t\tTREE_TYPE (type1)))\n \treturn pointer_diff (op0, op1, common_type (type0, type1));\n       /* In all other cases except pointer - int, the usual arithmetic\n-\t rules aply.  */\n+\t rules apply.  */\n       else if (!(code0 == POINTER_TYPE && code1 == INTEGER_TYPE))\n \t{\n \t  common = 1;\n@@ -3821,7 +3821,7 @@ cp_build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t For them, this optimization is safe only if\n \t both args are zero-extended or both are sign-extended.\n \t Otherwise, we might change the result.\n-\t Eg, (short)-1 | (unsigned short)-1 is (int)-1\n+\t E.g., (short)-1 | (unsigned short)-1 is (int)-1\n \t but calculated in (unsigned short) it would be (unsigned short)-1.  */\n \n       if (shorten && none_complex)"}, {"sha": "12291d5604f849e9a637fcb6d76c299f5d18a25e", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=39a13be5cbfe0e9623782de3733cd8265e6230d4", "patch": "@@ -1,3 +1,7 @@\n+2008-07-21  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* objc-act.c: Fix comment typos.\n+\n 2008-07-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* objc-act.c (objc_start_class_interface,"}, {"sha": "44c8648a7819703c6ebfa1a8ad91e5ca8092fc25", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a13be5cbfe0e9623782de3733cd8265e6230d4/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=39a13be5cbfe0e9623782de3733cd8265e6230d4", "patch": "@@ -801,7 +801,7 @@ objc_build_struct (tree klass, tree fields, tree super_name)\n \t     && TREE_CODE (TREE_CHAIN (field)) == FIELD_DECL)\n \tfield = TREE_CHAIN (field);\n \n-      /* For ObjC ABI purposes, the \"packed\" size of a base class is the\n+      /* For ObjC ABI purposes, the \"packed\" size of a base class is\n \t the sum of the offset and the size (in bits) of the last field\n \t in the class.  */\n       DECL_SIZE (base)\n@@ -1525,7 +1525,7 @@ synth_module_prologue (void)\n   const struct gcc_debug_hooks *const save_hooks = debug_hooks;\n \n   /* Suppress outputting debug symbols, because\n-     dbxout_init hasn'r been called yet.  */\n+     dbxout_init hasn't been called yet.  */\n   write_symbols = NO_DEBUG;\n   debug_hooks = &do_nothing_debug_hooks;\n "}]}