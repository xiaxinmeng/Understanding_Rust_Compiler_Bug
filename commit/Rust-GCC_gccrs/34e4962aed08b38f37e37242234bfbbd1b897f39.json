{"sha": "34e4962aed08b38f37e37242234bfbbd1b897f39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRlNDk2MmFlZDA4YjM4ZjM3ZTM3MjQyMjM0YmZiYmQxYjg5N2YzOQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-05-24T16:01:51Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-06-03T23:15:56Z"}, "message": "diagnostics: Add function call parens matching to c_parser.\n\nThe C++ parser already tracks function call parens matching, but the C\nparser doesn't. This adds the same functionality to the C parser and adds\na testcase showing the C++ and C parser matching function call parens\nin an error message.\n\ngcc/c/ChangeLog:\n\n\t* c-parser.c (c_parser_postfix_expression_after_primary): Add\n\tscope with matching_parens after CPP_OPEN_PAREN.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/missing-close-func-paren.c: New test.", "tree": {"sha": "6f9f484668d6f544d2b830ee652f18c5ffe77b72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f9f484668d6f544d2b830ee652f18c5ffe77b72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34e4962aed08b38f37e37242234bfbbd1b897f39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e4962aed08b38f37e37242234bfbbd1b897f39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34e4962aed08b38f37e37242234bfbbd1b897f39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e4962aed08b38f37e37242234bfbbd1b897f39/comments", "author": null, "committer": null, "parents": [{"sha": "29e304fd5f9097335c5d7d1b16f139439eeabe1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e304fd5f9097335c5d7d1b16f139439eeabe1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29e304fd5f9097335c5d7d1b16f139439eeabe1f"}], "stats": {"total": 72, "additions": 57, "deletions": 15}, "files": [{"sha": "23d6fa22b685ca146b55b096a61bbce93c89075c", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e4962aed08b38f37e37242234bfbbd1b897f39/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e4962aed08b38f37e37242234bfbbd1b897f39/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=34e4962aed08b38f37e37242234bfbbd1b897f39", "patch": "@@ -10458,21 +10458,23 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t  break;\n \tcase CPP_OPEN_PAREN:\n \t  /* Function call.  */\n-\t  c_parser_consume_token (parser);\n-\t  for (i = 0; i < 3; i++)\n-\t    {\n-\t      sizeof_arg[i] = NULL_TREE;\n-\t      sizeof_arg_loc[i] = UNKNOWN_LOCATION;\n-\t    }\n-\t  literal_zero_mask = 0;\n-\t  if (c_parser_next_token_is (parser, CPP_CLOSE_PAREN))\n-\t    exprlist = NULL;\n-\t  else\n-\t    exprlist = c_parser_expr_list (parser, true, false, &origtypes,\n-\t\t\t\t\t   sizeof_arg_loc, sizeof_arg,\n-\t\t\t\t\t   &arg_loc, &literal_zero_mask);\n-\t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n-\t\t\t\t     \"expected %<)%>\");\n+\t  {\n+\t    matching_parens parens;\n+\t    parens.consume_open (parser);\n+\t    for (i = 0; i < 3; i++)\n+\t      {\n+\t\tsizeof_arg[i] = NULL_TREE;\n+\t\tsizeof_arg_loc[i] = UNKNOWN_LOCATION;\n+\t      }\n+\t    literal_zero_mask = 0;\n+\t    if (c_parser_next_token_is (parser, CPP_CLOSE_PAREN))\n+\t      exprlist = NULL;\n+\t    else\n+\t      exprlist = c_parser_expr_list (parser, true, false, &origtypes,\n+\t\t\t\t\t     sizeof_arg_loc, sizeof_arg,\n+\t\t\t\t\t     &arg_loc, &literal_zero_mask);\n+\t    parens.skip_until_found_close (parser);\n+\t  }\n \t  orig_expr = expr;\n \t  mark_exp_read (expr.value);\n \t  if (warn_sizeof_pointer_memaccess)"}, {"sha": "3177e250e1c314f8e4dfe79341db104bab32270e", "filename": "gcc/testsuite/c-c++-common/missing-close-func-paren.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e4962aed08b38f37e37242234bfbbd1b897f39/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-close-func-paren.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e4962aed08b38f37e37242234bfbbd1b897f39/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-close-func-paren.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-close-func-paren.c?ref=34e4962aed08b38f37e37242234bfbbd1b897f39", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+\n+/* Verify that the C/C++ frontends show the pertinent opening symbol when\n+   a closing symbol is missing for a function call.  */\n+\n+/* Verify that, when they are on the same line, that the opening symbol is\n+   shown as a secondary range within the main diagnostic.  */\n+\n+extern int __attribute__((const)) foo (int a, int b, int c);\n+\n+void single_func ()\n+{\n+  int single =\n+    foo (1, (1 + 2), (1 + 2 + 3):); /* { dg-error \"expected '\\\\)' before ':' token\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+     foo (1, (1 + 2), (1 + 2 + 3):);\n+         ~                       ^\n+                                 )\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Verify that, when they are on different lines, that the opening symbol is\n+   shown via a secondary diagnostic.  */\n+\n+void multi_func ()\n+{\n+  int multi =\n+    foo (1, /* { dg-message \"to match this '\\\\('\" } */\n+         (1 + 2),\n+         (1 + 2 + 3):); /* { dg-error \"expected '\\\\)' before ':' token\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+          (1 + 2 + 3):);\n+                     ^\n+                     )\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+     foo (1,\n+         ^\n+     { dg-end-multiline-output \"\" } */\n+}"}]}