{"sha": "06e67e167d96b750e484be95a0538a8aea488436", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZlNjdlMTY3ZDk2Yjc1MGU0ODRiZTk1YTA1MzhhOGFlYTQ4ODQzNg==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-09-28T09:54:51Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-09-28T09:54:51Z"}, "message": "In gcc/objc/: 2010-09-28 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/objc/:\n2010-09-28  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc-act.c (encode_type): Do not add 'r' with the next runtime.\n        (encode_aggregate_within): Reorganized code to be more readable.\n        (encode_aggregate_fields): Updated second argument to be 'bool'\n        instead of 'int'.\n\nFrom-SVN: r164680", "tree": {"sha": "c5000560671b3a92abfd539ab07ee2ca154942e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5000560671b3a92abfd539ab07ee2ca154942e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06e67e167d96b750e484be95a0538a8aea488436", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e67e167d96b750e484be95a0538a8aea488436", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06e67e167d96b750e484be95a0538a8aea488436", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e67e167d96b750e484be95a0538a8aea488436/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "06f1db4b1c2e1dbea2e4b6e6f62c4abe5ae7616b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06f1db4b1c2e1dbea2e4b6e6f62c4abe5ae7616b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06f1db4b1c2e1dbea2e4b6e6f62c4abe5ae7616b"}], "stats": {"total": 64, "additions": 33, "deletions": 31}, "files": [{"sha": "e274a861ca8877e12582c4d027f633b85441a964", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e67e167d96b750e484be95a0538a8aea488436/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e67e167d96b750e484be95a0538a8aea488436/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=06e67e167d96b750e484be95a0538a8aea488436", "patch": "@@ -1,3 +1,10 @@\n+2010-09-28  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-act.c (encode_type): Do not add 'r' with the next runtime.\n+\t(encode_aggregate_within): Reorganized code to be more readable.\n+\t(encode_aggregate_fields): Updated second argument to be 'bool'\n+\tinstead of 'int'.\n+\n 2010-09-27  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR objc/45763"}, {"sha": "39f0b5c577f3a2ea729d4669f16d2fb7209c804a", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 26, "deletions": 31, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e67e167d96b750e484be95a0538a8aea488436/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e67e167d96b750e484be95a0538a8aea488436/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=06e67e167d96b750e484be95a0538a8aea488436", "patch": "@@ -8197,7 +8197,7 @@ encode_vector (tree type, int curtype, int format)\n }\n \f\n static void\n-encode_aggregate_fields (tree type, int pointed_to, int curtype, int format)\n+encode_aggregate_fields (tree type, bool pointed_to, int curtype, int format)\n {\n   tree field = TYPE_FIELDS (type);\n \n@@ -8250,14 +8250,14 @@ encode_aggregate_within (tree type, int curtype, int format, int left,\n \n   if (flag_next_runtime)\n     {\n-      pointed_to = (ob_size > 0\n-\t\t    ? *(obstack_next_free (&util_obstack) - 1) == '^'\n-\t\t    : 0);\n-      inline_contents = ((format == OBJC_ENCODE_INLINE_DEFS || generating_instance_variables)\n-\t\t\t && (!pointed_to\n-\t\t\t     || ob_size - curtype == 1\n-\t\t\t     || (ob_size - curtype == 2\n-\t\t\t\t && *(obstack_next_free (&util_obstack) - 2) == 'r')));      \n+      if (ob_size > 0  &&  *(obstack_next_free (&util_obstack) - 1) == '^')\n+\tpointed_to = true;\n+\n+      if ((format == OBJC_ENCODE_INLINE_DEFS || generating_instance_variables)\n+\t  && (!pointed_to || ob_size - curtype == 1\n+\t      || (ob_size - curtype == 2\n+\t\t  && *(obstack_next_free (&util_obstack) - 2) == 'r')))\n+\tinline_contents = true;\n     }\n   else\n     {\n@@ -8279,27 +8279,19 @@ encode_aggregate_within (tree type, int curtype, int format, int left,\n \t    inline_contents = true;\n \t  else\n \t    {\n-\t      /* FIXME: It's hard to understand what the following\n-\t\t code is meant to be doing.  It seems that it will\n-\t\t inline contents even if we are encoding a pointed\n-\t\t structure and the last characters were 'r^' or just\n-\t\t '^'.\n-\n-\t\t So it seems that in the end the only case where we\n-\t\t don't inline contents is '^r', which is a pointer to\n-\t\t a 'const' structure!  If that is the case, the whole\n-\t\t blob of code could be rewritten in a simpler way.\n+\t      /* Note that the check (ob_size - curtype < 2) prevents\n+\t\t infinite recursion when encoding a structure which is\n+\t\t a linked list (eg, struct node { struct node *next;\n+\t\t }).  Each time we follow a pointer, we add one\n+\t\t character to ob_size, and curtype is fixed, so after\n+\t\t at most two pointers we stop inlining contents and\n+\t\t break the loop.\n+\n+\t\t The other case where we don't inline is \"^r\", which\n+\t\t is a pointer to a constant struct.\n \t      */\n-\t      if (c1 == 'r')\n-\t\t{\n-\t\t  if (ob_size - curtype == 2)\n-\t\t    inline_contents = true;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  if (ob_size - curtype == 1)\n-\t\t    inline_contents = true;    \n-\t\t}\n+\t      if ((ob_size - curtype <= 2) && !(c0 == 'r'))\n+\t\tinline_contents = true;\n \t    }\n \t}\n     }\n@@ -8372,8 +8364,11 @@ encode_type (tree type, int curtype, int format)\n   if (type == error_mark_node)\n     return;\n \n-  if (TYPE_READONLY (type))\n-    obstack_1grow (&util_obstack, 'r');\n+  if (!flag_next_runtime)\n+    {\n+      if (TYPE_READONLY (type))\n+\tobstack_1grow (&util_obstack, 'r');\n+    }\n \n   switch (code)\n     {"}]}