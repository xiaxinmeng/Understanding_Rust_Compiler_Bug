{"sha": "d927cb527cb17547b24d2b52ddd29e8fad621a66", "node_id": "C_kwDOANBUbNoAKGQ5MjdjYjUyN2NiMTc1NDdiMjRkMmI1MmRkZDI5ZThmYWQ2MjFhNjY", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-06-22T18:20:06Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-13T10:01:19Z"}, "message": "[Ada] Fix internal error on comparison with access function parameter\n\nIt comes from an overzealous assertion.\n\ngcc/ada/\n\n\t* gcc-interface/utils2.cc (build_binary_op) <EQ_EXPR>: Also accept\n\tpointer-to-function types that are not variant of each other.", "tree": {"sha": "5404883db9c71dac2a3ad88bee9417f1cb43e383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5404883db9c71dac2a3ad88bee9417f1cb43e383"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d927cb527cb17547b24d2b52ddd29e8fad621a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d927cb527cb17547b24d2b52ddd29e8fad621a66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d927cb527cb17547b24d2b52ddd29e8fad621a66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d927cb527cb17547b24d2b52ddd29e8fad621a66/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b8c12348da3eb770968b718a9ace9fb8fba246f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8c12348da3eb770968b718a9ace9fb8fba246f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b8c12348da3eb770968b718a9ace9fb8fba246f"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "4dfe29dc7d9993485803687187b090e7c34d93a4", "filename": "gcc/ada/gcc-interface/utils2.cc", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d927cb527cb17547b24d2b52ddd29e8fad621a66/gcc%2Fada%2Fgcc-interface%2Futils2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d927cb527cb17547b24d2b52ddd29e8fad621a66/gcc%2Fada%2Fgcc-interface%2Futils2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.cc?ref=d927cb527cb17547b24d2b52ddd29e8fad621a66", "patch": "@@ -1134,12 +1134,17 @@ build_binary_op (enum tree_code op_code, tree result_type,\n \t  else if (POINTER_TYPE_P (left_base_type)\n \t\t   && POINTER_TYPE_P (right_base_type))\n \t    {\n+\t      tree left_ref_type = TREE_TYPE (left_base_type);\n+\t      tree right_ref_type = TREE_TYPE (right_base_type);\n+\n \t      /* Anonymous access types in Ada 2005 can point to different\n-\t\t members of a tagged type hierarchy.  */\n-\t      gcc_assert (TYPE_MAIN_VARIANT (TREE_TYPE (left_base_type))\n-\t\t\t  == TYPE_MAIN_VARIANT (TREE_TYPE (right_base_type))\n-\t\t\t  || (TYPE_ALIGN_OK (TREE_TYPE (left_base_type))\n-\t\t\t      && TYPE_ALIGN_OK (TREE_TYPE (right_base_type))));\n+\t\t members of a tagged hierarchy or different function types.  */\n+\t      gcc_assert (TYPE_MAIN_VARIANT (left_ref_type)\n+\t\t\t  == TYPE_MAIN_VARIANT (right_ref_type)\n+\t\t\t  || (TYPE_ALIGN_OK (left_ref_type)\n+\t\t\t      && TYPE_ALIGN_OK (right_ref_type))\n+\t\t\t  || (TREE_CODE (left_ref_type) == FUNCTION_TYPE\n+\t\t\t      && TREE_CODE (right_ref_type) == FUNCTION_TYPE));\n \t      best_type = left_base_type;\n \t    }\n "}]}