{"sha": "6c5fffd127ec00038f379773f751bf803bc548b0", "node_id": "C_kwDOANBUbNoAKDZjNWZmZmQxMjdlYzAwMDM4ZjM3OTc3M2Y3NTFiZjgwM2JjNTQ4YjA", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-11-08T21:09:16Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-11-08T21:12:19Z"}, "message": "Fix couple of issues in large PIC model on x86-64/VxWorks\n\nThe first issue is that the !gotoff_operand path of legitimize_pic_address\nin the large PIC model does not make use of REG when it is available, which\nbreaks for thunks because new pseudo-registers can no longer be created.\nAnd the second issue is that the system compiler (LLVM) generates @GOTOFF\nin large model even for RTP, so we do the same.\n\ngcc/\n\t* config/i386/i386.c (legitimize_pic_address): Adjust comment and\n\tuse the REG argument on the CM_LARGE_PIC code path as well.\n\t* config/i386/predicates.md (gotoff_operand): Do not treat VxWorks\n\tspecially with the large code models.", "tree": {"sha": "3805a4955c152ff98137af8ff09cfc843ecdef60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3805a4955c152ff98137af8ff09cfc843ecdef60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c5fffd127ec00038f379773f751bf803bc548b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c5fffd127ec00038f379773f751bf803bc548b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c5fffd127ec00038f379773f751bf803bc548b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c5fffd127ec00038f379773f751bf803bc548b0/comments", "author": null, "committer": null, "parents": [{"sha": "d44d791012efda1f48ed647d1d3a1538d15d4e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d44d791012efda1f48ed647d1d3a1538d15d4e19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d44d791012efda1f48ed647d1d3a1538d15d4e19"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "e94efdf39fb2c25ffbf2adb14c7013fc688cde0f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c5fffd127ec00038f379773f751bf803bc548b0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c5fffd127ec00038f379773f751bf803bc548b0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6c5fffd127ec00038f379773f751bf803bc548b0", "patch": "@@ -11161,7 +11161,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n \tnew_rtx = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new_rtx);\n     }\n   else if ((GET_CODE (addr) == SYMBOL_REF && SYMBOL_REF_TLS_MODEL (addr) == 0)\n-\t   /* We can't use @GOTOFF for text labels\n+\t   /* We can't always use @GOTOFF for text labels\n \t      on VxWorks, see gotoff_operand.  */\n \t   || (TARGET_VXWORKS_RTP && GET_CODE (addr) == LABEL_REF))\n     {\n@@ -11190,9 +11190,19 @@ legitimize_pic_address (rtx orig, rtx reg)\n \t     from the Global Offset Table (@GOT).  */\n \t  new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOT);\n \t  new_rtx = gen_rtx_CONST (Pmode, new_rtx);\n+\n \t  if (TARGET_64BIT)\n-\t    new_rtx = force_reg (Pmode, new_rtx);\n-\t  new_rtx = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new_rtx);\n+\t    new_rtx = copy_to_suggested_reg (new_rtx, reg, Pmode);\n+\n+\t  if (reg != 0)\n+\t    {\n+\t      gcc_assert (REG_P (reg));\n+\t      new_rtx = expand_simple_binop (Pmode, PLUS, pic_offset_table_rtx,\n+\t\t\t\t\t     new_rtx, reg, 1, OPTAB_DIRECT);\n+\t    }\n+\t  else\n+\t    new_rtx = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new_rtx);\n+\n \t  new_rtx = gen_const_mem (Pmode, new_rtx);\n \t  set_mem_alias_set (new_rtx, ix86_GOT_alias_set ());\n \t}"}, {"sha": "4ccbe11b8423d5f57ce840297e0d9c129cd53881", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c5fffd127ec00038f379773f751bf803bc548b0/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c5fffd127ec00038f379773f751bf803bc548b0/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=6c5fffd127ec00038f379773f751bf803bc548b0", "patch": "@@ -617,9 +617,11 @@\n ;; use @GOTOFF unless we are absolutely sure that the symbol is in the\n ;; same segment as the GOT.  Unfortunately, the flexibility of linker\n ;; scripts means that we can't be sure of that in general, so assume\n-;; that @GOTOFF is never valid on VxWorks.\n+;; @GOTOFF is not valid on VxWorks, except with the large code model.\n (define_predicate \"gotoff_operand\"\n-  (and (not (match_test \"TARGET_VXWORKS_RTP\"))\n+  (and (ior (not (match_test \"TARGET_VXWORKS_RTP\"))\n+            (match_test \"ix86_cmodel == CM_LARGE\")\n+            (match_test \"ix86_cmodel == CM_LARGE_PIC\"))\n        (match_operand 0 \"local_symbolic_operand\")))\n \n ;; Test for various thread-local symbols."}]}