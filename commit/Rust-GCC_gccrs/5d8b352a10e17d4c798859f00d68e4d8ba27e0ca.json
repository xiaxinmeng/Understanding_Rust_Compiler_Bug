{"sha": "5d8b352a10e17d4c798859f00d68e4d8ba27e0ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ4YjM1MmExMGUxN2Q0Yzc5ODg1OWYwMGQ2OGU0ZDhiYTI3ZTBjYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-04-26T14:15:58Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-04-26T14:15:58Z"}, "message": "dumpfile cleanup\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-04/msg01173.html\n\t* dumpfile.c (dump_open): New.\n\t(dump_open_alternate_stream, dump_start, dump_begin): Call it.\n\t(dump_finish): Detect stdio/stderr by value not name.\n\nFrom-SVN: r259681", "tree": {"sha": "b533f59e7265c5e91585aab8646807126d3198dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b533f59e7265c5e91585aab8646807126d3198dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d8b352a10e17d4c798859f00d68e4d8ba27e0ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d8b352a10e17d4c798859f00d68e4d8ba27e0ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d8b352a10e17d4c798859f00d68e4d8ba27e0ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d8b352a10e17d4c798859f00d68e4d8ba27e0ca/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "030b3bddb0f819f92dba703aa9fa8f50eaa730b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/030b3bddb0f819f92dba703aa9fa8f50eaa730b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/030b3bddb0f819f92dba703aa9fa8f50eaa730b8"}], "stats": {"total": 66, "additions": 35, "deletions": 31}, "files": [{"sha": "92aa273980098d689f62976066962dc665d1a50c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d8b352a10e17d4c798859f00d68e4d8ba27e0ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d8b352a10e17d4c798859f00d68e4d8ba27e0ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d8b352a10e17d4c798859f00d68e4d8ba27e0ca", "patch": "@@ -1,3 +1,9 @@\n+2018-04-26  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* dumpfile.c (dump_open): New.\n+\t(dump_open_alternate_stream, dump_start, dump_begin): Call it.\n+\t(dump_finish): Detect stdio/stderr by value not name.\n+\n 2018-04-26  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/invoke.texi (-Wreturn-type): Document default status for C++."}, {"sha": "75e2a7d792f57b9dc5a0ffe34c994a0939643b73", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d8b352a10e17d4c798859f00d68e4d8ba27e0ca/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d8b352a10e17d4c798859f00d68e4d8ba27e0ca/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=5d8b352a10e17d4c798859f00d68e4d8ba27e0ca", "patch": "@@ -312,29 +312,43 @@ get_dump_file_name (struct dump_file_info *dfi) const\n   return concat (dump_base_name, dump_id, dfi->suffix, NULL);\n }\n \n+/* Open a dump file called FILENAME.  Some filenames are special and\n+   refer to the standard streams.  TRUNC indicates whether this is the\n+   first open (so the file should be truncated, rather than appended).\n+   An error message is emitted in the event of failure.  */\n+\n+static FILE *\n+dump_open (const char *filename, bool trunc)\n+{\n+  if (strcmp (\"stderr\", filename) == 0)\n+    return stderr;\n+\n+  if (strcmp (\"stdout\", filename) == 0)\n+    return stdout;\n+\n+  FILE *stream = fopen (filename, trunc ? \"w\" : \"a\");\n+\n+  if (!stream)\n+    error (\"could not open dump file %qs: %m\", filename);\n+  return stream;\n+}\n+\n /* For a given DFI, open an alternate dump filename (which could also\n    be a standard stream such as stdout/stderr). If the alternate dump\n    file cannot be opened, return NULL.  */\n \n static FILE *\n dump_open_alternate_stream (struct dump_file_info *dfi)\n {\n-  FILE *stream ;\n   if (!dfi->alt_filename)\n     return NULL;\n \n   if (dfi->alt_stream)\n     return dfi->alt_stream;\n \n-  stream = strcmp (\"stderr\", dfi->alt_filename) == 0\n-    ? stderr\n-    : strcmp (\"stdout\", dfi->alt_filename) == 0\n-    ? stdout\n-    : fopen (dfi->alt_filename, dfi->alt_state < 0 ? \"w\" : \"a\");\n+  FILE *stream = dump_open (dfi->alt_filename, dfi->alt_state < 0);\n \n-  if (!stream)\n-    error (\"could not open dump file %qs: %m\", dfi->alt_filename);\n-  else\n+  if (stream)\n     dfi->alt_state = 1;\n \n   return stream;\n@@ -515,14 +529,8 @@ dump_start (int phase, dump_flags_t *flag_ptr)\n   name = get_dump_file_name (phase);\n   if (name)\n     {\n-      stream = strcmp (\"stderr\", name) == 0\n-          ? stderr\n-          : strcmp (\"stdout\", name) == 0\n-          ? stdout\n-          : fopen (name, dfi->pstate < 0 ? \"w\" : \"a\");\n-      if (!stream)\n-        error (\"could not open dump file %qs: %m\", name);\n-      else\n+      stream = dump_open (name, dfi->pstate < 0);\n+      if (stream)\n         {\n           dfi->pstate = 1;\n           count++;\n@@ -562,13 +570,10 @@ dump_finish (int phase)\n   if (phase < 0)\n     return;\n   dfi = get_dump_file_info (phase);\n-  if (dfi->pstream && (!dfi->pfilename\n-                       || (strcmp (\"stderr\", dfi->pfilename) != 0\n-                           && strcmp (\"stdout\", dfi->pfilename) != 0)))\n+  if (dfi->pstream && dfi->pstream != stdout && dfi->pstream != stderr)\n     fclose (dfi->pstream);\n \n-  if (dfi->alt_stream && strcmp (\"stderr\", dfi->alt_filename) != 0\n-      && strcmp (\"stdout\", dfi->alt_filename) != 0)\n+  if (dfi->alt_stream && dfi->alt_stream != stdout && dfi->alt_stream != stderr)\n     fclose (dfi->alt_stream);\n \n   dfi->alt_stream = NULL;\n@@ -607,15 +612,8 @@ dump_begin (int phase, dump_flags_t *flag_ptr)\n     return NULL;\n   dfi = get_dump_file_info (phase);\n \n-  stream = strcmp (\"stderr\", name) == 0\n-    ? stderr\n-    : strcmp (\"stdout\", name) == 0\n-    ? stdout\n-    : fopen (name, dfi->pstate < 0 ? \"w\" : \"a\");\n-\n-  if (!stream)\n-    error (\"could not open dump file %qs: %m\", name);\n-  else\n+  stream = dump_open (name, dfi->pstate < 0);\n+  if (stream)\n     dfi->pstate = 1;\n   free (name);\n "}]}