{"sha": "b12db70880b724e80346016579fd6bbddb2b1c2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEyZGI3MDg4MGI3MjRlODAzNDYwMTY1NzlmZDZiYmRkYjJiMWMyYw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-11-10T21:51:58Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-11-10T21:51:58Z"}, "message": "Major maintenance patch of the profile mode.\n\n2014-11-10  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\tMajor maintenance patch of the profile mode.\n\t* include/profile/impl/profiler_container_size.h\n\t(__container_size_info()): Delete.\n\t(__container_size_info(const __container_size_info&)): Delete.\n\t(virtual ~__container_size_info()): Delete.\n\t(__container_size_info(__stack_t, size_t)): Delete.\n\t(__container_size_info(__stack_t)): New.\n\t(__container_size_info::__init(size_t)): New.\n\t(__container_size_info::__merge): Call __object_info_base::__merge.\n\t(__trace_container_size::__construct): Delete declaration.\n\t(__trace_container_size::__insert): Return __container_size_info*,\n\tcall __init.\n\t* include/profile/impl/profiler_hash_func.h\n\t(__hashfunc_into()): Delete.\n\t(__hashfunc_info(const __hashfunc_info&)): Delete.\n\t(virtual ~__hashfunc_info()): Delete.\n\t(__hashfunc_info::__merge): Call __object_info_base::__merge.\n\t(__trace_hash_func::__insert): Delete.\n\t(__trace_hash_func_free): New.\n\t(__trace_hash_func_report): Call __trace_report.\n\t(__trace_hash_func_construct): Return __hashfunc_info*. Add check for\n\treentrancy.\n\t* include/profile/impl/profiler_hashtable_size.h\n\t(__trace_hashtable_size_free): New.\n\t(__trace_hashtable_size_report): Call __trace_report.\n\t(__trace_hashtable_size_construct): Return __container_size_info*. Add\n\tcheck for reentrancy.\n\t* include/profile/impl/profiler_list_to_slist.h\n\t(__list2slist_info()): Delete.\n\t(__list2slist_info(const __list2slist_info&)): Delete.\n\t(virtual ~__list2slist_info()): Delete.\n\t(__trace_list_to_slist::__merge(const __list2slist_info&)): Delete.\n\t(__trace_list_to_slist::__opr_rewind(const void*)): Delete.\n\t(__trace_list_to_slist::__record_operation(const void*)): Delete.\n\t(__trace_list_to_slist::__insert(const __object_t, __stack_t)): Delete.\n\t(__trace_list_to_slist::__destruct): Only call __retire_object.\n\t(__trace_list_to_slist_free()): New.\n\t(__trace_list_to_slist_report): Call __trace_report.\n\t(__trace_list_to_slist_construct): Return __list2slist_info*. Add check\n\tfor reentrancy.\n\t* include/profile/impl/profiler_list_to_vector.h\n\t(__list2vector_info()): Delete.\n\t(__list2vector_info(const __list2vector_info&)): Delete.\n\t(virtual ~__list2vector_info()): Delete.\n\t(_list2vector_info::__is_valid): Delete.\n\t(_list2vector_info::__set_invalid): Delete.\n\t(_list2vector_info::__opr_iterate): Use atomic operation.\n\t(_list2vector_info::_M_valid): Delete.\n\t(__trace_list_to_vector::__insert): Delete.\n\t(__trace_list_to_vector::__find): Delete.\n\t(__trace_list_to_vector::__opr_insert): Delete.\n\t(__trace_list_to_vector::__opr_iterate): Delete.\n\t(__trace_list_to_vector::__invalid_operator): Delete.\n\t(__trace_list_to_vector::__resize): Delete.\n\t(__trace_list_to_vector_free): New.\n\t(__trace_list_to_vector_report): Call __trace_report.\n\t(__trace_list_to_vector_construct): Return __list2vector_info*. Add\n\tcheck for reentrancy.\n\t* include/profile/impl/profiler_map_to_unordered_map.h\n\t(__map2umap_info()): Delete.\n\t(__map2umap_info(const __map2umap_info&)): Delete.\n\t(virtual ~__map2umap_info()): Delete.\n\t(__map2umap_info::__record_iterate): Use atomic operation.\n\t(__map2umap_info::__set_iterate_costs): New.\n\t(__map2umap_info::__record_invalidate): Delete.\n\t(__map2umap_info::_M_valid): Delete.\n\t(__trace_map2umap::__destruct): New.\n\t(__trace_map_to_unordered_map_free): New.\n\t(__trace_map_to_unordered_map_report): Call __trace_report.\n\t(__trace_map_to_unordered_map_construct): Return __map2umap_info*. Add\n\tcheck for reentrancy.\n\t* include/profile/impl/profiler_node.h (__object_t): Delete typedef.\n\t(__get_stack): Return null stack trace in case of (bad_alloc) exception.\n\t(__object_info_base()): Delete.\n\t(__object_info_base(const __object_info_base&)): Delete.\n\t(virtual ~__object_info_base()): Delete.\n\t(__object_info_base::__set_invalid): New.\n\t(__object_info_base::__merge): New.\n\t(virtual void __write(FILE*)): Delete.\n\t(class __stack_info_base): Delete.\n\t* include/profile/impl/profiler_trace.h (__global_lock): Rename into\n\t__global_mutex.\n\t(__trace_vector_size_free): New declaration.\n\t(__trace_hashtable_size_free): Likewise.\n\t(__trace_hash_func_free): Likewise.\n\t(__trace_vector_to_list_free): Likewise.\n\t(__trace_list_to_slist_free): Likewise.\n\t(__trace_list_to_vector_free): Likewise.\n\t(__trace_map_to_unordered_map_free): Likewise.\n\t(__trace_base::~__trace_base()): Not virtual anymore. Delete stored\n\tbacktrace information.\n\t(__trace_base::__add_object): Return __object_info*, take only a stack\n\ttrace.\n\t(__trace_base::__get_object_info): Delete.\n\t(__trace_base::__retire_object): Take __object_info* instead of\n\t__object_t.\n\t(__trace_base::__object_table_lock): Delete.\n\t(__trace_base::__stack_table_lock): Delete.\n\t(__trace_base::__object_table_t): Delete typedef.\n\t(__trace_base::__object_table): Delete.\n\t(__trace_base::__trace_mutex): New.\n\t(__trace_base::__object_byte_size): New.\n\t(__trace_report): New.\n\t(__report): Use __gnu_cxx::__scoped_lock to lock/unlock __global_mutex\n\trather than explicitely calling lock() method, exception safe.\n\t(__report_and_free): New. Call __report and free all profile mode\n\tresources.\n\t(__profcxx_init_unconditional): Use __scoped_lock. Register\n\t__report_and_free with atexit.\n\t* include/profile/impl/profiler_vector_size.h\n\t(__trace_vector_size_free): New.\n\t(__trace_vector_size_report): Call __trace_report.\n\t(__trace_vector_size_construct): Return __container_size_info*. Add\n\tcheck for reentrancy.\n\t* include/profile/impl/profiler_vector_to_list.h\n\t(__vector2list_info()): Delete.\n\t(virtual ~__vector2list_info()): Delete.\n\t(__vector2list_info(const __vector2list_info&)): Delete.\n\t(__vector2list_info::__merge): Call __object_info_base::__merge.\n\t(__vector2list_info::__is_valid): Delete.\n\t(__vector2list_info::__set_valid): Delete.\n\t(__vector2list_info::__opr_find): Delete.\n\t(__vector2list_info::_M_valid): Delete.\n\t(__trace_vector_to_list::__insert): Delete.\n\t(__trace_vector_to_list::__find): Delete.\n\t(__trace_vector_to_list::__opr_insert): Delete.\n\t(__trace_vector_to_list::__opr_iterate): Delete.\n\t(__trace_vector_to_list::__invalid_operator): Delete.\n\t(__trace_vector_to_list::__resize): Delete.\n\t(__trace_vector_to_list::__opr_find): Delete.\n\t(__trace_vector_to_list_free): New.\n\t(__trace_vector_to_list_report): Call __trace_report.\n\t(__trace_vector_to_list_construct): Return __vector2list_info*. Add\n\tcheck for reentrancy.\n\t* include/profile/iterator_tracker.h\n\t(__iterator_tracker<>::operator=): Add missing _M_ds assignment.\n\t(__iterator_tracker<>::_M_find): Delete.\n\t* include/profile/impl/profiler.h\n\t([_GLIBCXX_PROFILE_REENTRANCE_GUARD]): Delete.\n\t(__container_size_info): Add class declaration.\n\t(__hashfunc_info): Likewise.\n\t(__map2umap_info): Likewise.\n\t(__vector2list_info): Likewise.\n\t(__list2slist_info): Likewise.\n\t(__list2vector_info): Likewise.\n\t(__trace_list_to_set_destruct): Delete declaration.\n\t(__trace_list_to_set_construct): Likewise.\n\t(__trace_list_to_set_insert): Likewise.\n\t(__trace_list_to_set_iterate): Likewise.\n\t(__trace_list_to_set_invalid_operator): Likewise.\n\t(__trace_list_to_set_find): Likewise.\n\t([__profcxx_report]): Remove usage of _GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_turn_on]): Likewise.\n\t([__profcxx_turn_off]): Likewise.\n\t([__profcxx_is_invalid]): Likewise.\n\t([__profcxx_is_on]): Likewise.\n\t([__profcxx_is_off]): Likewise.\n\t([__profcxx_hashtable_resize]): Likewise.\n\t([__profcxx_hashtable_destruct]): Likewise.\n\t([__profcxx_hashtable_construct]): Likewise.\n\t([__profcxx_vector_size_construct]): Likewise.\n\t([__profcxx_vector_size_resize]): Likewise.\n\t([__profcxx_vector_size_destruct]): Likewise.\n\t([__profcxx_inefficient_hash_is_on]): Delete.\n\t([__profcxx_hash_func_construct]): Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_hash_func_destruct]): Likewise.\n\t([__profcxx_vector_construct2]): Rename into...\n\t([__profcxx_vector2list_construct]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_vector_insert]): Rename into...\n\t([__profcxx_vector2list_insert]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_vector_iterate]): Rename into...\n\t([__profcxx_vector2list_iterate]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_vector_invalid_operator]): Rename into...\n\t([__profcxx_vector2list_invalid_operator]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_vector_resize2]): Rename into...\n\t([__profcxx_vector2list_resize]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_vector_destruct2]): Rename into...\n\t([__profcxx_vector2list_destruct]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_vector_find]): Delete.\n\t([__profcxx_list_construct2]): Rename into...\n\t([__profcxx_list2vector_construct]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_list_insert]): Rename into...\n\t([__profcxx_list2vector_insert]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_list_iterate]): Rename into...\n\t([__profcxx_list2vector_iterate]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([_profcxx_list_invalid_operator]): Rename into...\n\t([__profcxx_list2vector_invalid_operator]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_list_destruct2]): Rename into...\n\t([__profcxx_list2vector_destruct]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_list_construct]): Rename into...\n\t([__profcxx_list2slist_construct]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_list_rewind]): Rename into...\n\t([__profcxx_list2slist_rewind]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_list_operation]): Rename into...\n\t([__profcxx_list2slist_operation]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_list_destruct]): Rename into...\n\t([__profcxx_list2slist_destruct]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_map_to_unordered_map_construct]): Rename into...\n\t([__profcxx_map2umap_construct]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_map_to_unordered_map_insert]): Rename into...\n\t([__profcxx_map2umap_insert]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_map_to_unordered_map_erase]): Rename into...\n\t([__profcxx_map2umap_erase]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_map_to_unordered_map_iterate]): Rename into...\n\t([__profcxx_map2umap_iterate]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_map_to_unordered_map_invalidate]): Rename into...\n\t([__profcxx_map2umap_invalidate]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_map_to_unordered_map_find]): Rename into...\n\t([__profcxx_map2umap_find]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t([__profcxx_map_to_unordered_map_destruct]): Rename into...\n\t([__profcxx_map2umap_destruct]): ... this. Remove usage of\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\t* include/profile/list\n\t(_List_profile): Adapt.\n\t(_List_profile::_M_profile_construct): New.\n\t(_List_profile()): Call latter.\n\t(_List_profile::_M_profile_destruct): New.\n\t(~_List_profile()): Call latter.\n\t(_List_profile::_M_swap): New.\n\t(_List_profile(_List_profile&&)): Call latter.\n\t(_List_profile::operator=(const _List_profile&)): Reinit profile\n\tstructures.\n\t(_List_profile::operator=(_List_profile&&)): Move profile struct and\n\tre-init profile structures on moved instance.\n\t(std::__profile::list<>): Adapt.\n\t* include/profile/ordered_base.h\n\t(_Ordered_profile::_M_profile_iterate): New.\n\t(_Ordered_profile::_M_profile_construct): New.\n\t(_Ordered_profile()): Call latter.\n\t(_Ordered_profile::_M_swap): New.\n\t(_Ordered_profile(_Ordered_profile&&)): Call latter.\n\t(_Ordered_profile::operator=(const _Ordered_profile&)): Reinit\n\tprofiling.\n\t(_Ordered_profile::operator=(_Ordered_profile&&)): Swap and reinit\n\tprofiling on the moved instance.\n\t(_Ordered_profile::_M_profile_destruct): New.\n\t(~_Ordered_profile()): Call latter.\n\t* include/profile/map.h (std::__profile::map<>): Add profiling on\n\titerators. Adapt.\n\t* include/profile/multimap.h (std::__profile::multimap<>): Likewise.\n\t* include/profile/set.h (std::__profile::set<>): Likewise.\n\t* include/profile/multiset.h (std::__profile::multiset<>): Likewise.\n\t* include/profile/unordered_base.h\n\t(_Unordered_profile::_M_profile_construct): New.\n\t(_Unordered_profile()): Call latter.\n\t(_Unordered_profile::_M_swap): New.\n\t(_Unordered_profile(_Unordered_profile&&)): Call latter.\n\t(_Unordered_profile::operator=(const _Unordered_profile&)): Reinit\n\tprofiling.\n\t(_Unordered_profile::operator=(_Unordered_profile&&)): Swap and reinit\n\tprofiling on the moved instance.\n\t(_Unordered_profile::_M_profile_destruct): New.\n\t(~_Ordered_profile()): Call latter.\n\t* include/profile/unordered_map\n\t(std::__profile::unordered_map<>): Adapt.\n\t(std::__profile::unordered_multimap<>): Adapt.\n\t* include/profile/unordered_set\n\t(std::__profile::unordered_set<>): Adapt.\n\t(std::__profile::unordered_multiset<>): Adapt.\n\t* include/profile/vector\n\t(_Vector_profile_pre::_M_profile_destruct): Move...\n\t(_Vector_profile_post::_M_profile_destruct): ...here.\n\t(_Vector_profile_post::_M_profile_construct): New.\n\t(_Vector_profile_post()): Call latter.\n\t(std::__profile::vector<>): Adapt.\n\t* testsuite/ext/profile/mh.cc: Rename into...\n\t* testsuite/ext/profile/replace_new.cc: ... this and fix test.\n\nFrom-SVN: r217321", "tree": {"sha": "7b2550dda71e42f7891f8d05eb3f2e2927705664", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b2550dda71e42f7891f8d05eb3f2e2927705664"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b12db70880b724e80346016579fd6bbddb2b1c2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12db70880b724e80346016579fd6bbddb2b1c2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b12db70880b724e80346016579fd6bbddb2b1c2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12db70880b724e80346016579fd6bbddb2b1c2c/comments", "author": null, "committer": null, "parents": [{"sha": "6750565c3686d82123ad9e0e2a153cfecdf7a2d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6750565c3686d82123ad9e0e2a153cfecdf7a2d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6750565c3686d82123ad9e0e2a153cfecdf7a2d9"}], "stats": {"total": 3457, "additions": 1917, "deletions": 1540}, "files": [{"sha": "33aa6f03041605cb1a38a5a9d257cbd44806ea06", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -1,3 +1,295 @@\n+2014-11-10  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tMajor maintenance patch of the profile mode.\n+\t* include/profile/impl/profiler_container_size.h\n+\t(__container_size_info()): Delete.\n+\t(__container_size_info(const __container_size_info&)): Delete.\n+\t(virtual ~__container_size_info()): Delete.\n+\t(__container_size_info(__stack_t, size_t)): Delete.\n+\t(__container_size_info(__stack_t)): New.\n+\t(__container_size_info::__init(size_t)): New.\n+\t(__container_size_info::__merge): Call __object_info_base::__merge.\n+\t(__trace_container_size::__construct): Delete declaration.\n+\t(__trace_container_size::__insert): Return __container_size_info*,\n+\tcall __init.\n+\t* include/profile/impl/profiler_hash_func.h\n+\t(__hashfunc_into()): Delete.\n+\t(__hashfunc_info(const __hashfunc_info&)): Delete.\n+\t(virtual ~__hashfunc_info()): Delete.\n+\t(__hashfunc_info::__merge): Call __object_info_base::__merge.\n+\t(__trace_hash_func::__insert): Delete.\n+\t(__trace_hash_func_free): New.\n+\t(__trace_hash_func_report): Call __trace_report.\n+\t(__trace_hash_func_construct): Return __hashfunc_info*. Add check for\n+\treentrancy.\n+\t* include/profile/impl/profiler_hashtable_size.h\n+\t(__trace_hashtable_size_free): New.\n+\t(__trace_hashtable_size_report): Call __trace_report.\n+\t(__trace_hashtable_size_construct): Return __container_size_info*. Add\n+\tcheck for reentrancy.\n+\t* include/profile/impl/profiler_list_to_slist.h\n+\t(__list2slist_info()): Delete.\n+\t(__list2slist_info(const __list2slist_info&)): Delete.\n+\t(virtual ~__list2slist_info()): Delete.\n+\t(__trace_list_to_slist::__merge(const __list2slist_info&)): Delete.\n+\t(__trace_list_to_slist::__opr_rewind(const void*)): Delete.\n+\t(__trace_list_to_slist::__record_operation(const void*)): Delete.\n+\t(__trace_list_to_slist::__insert(const __object_t, __stack_t)): Delete.\n+\t(__trace_list_to_slist::__destruct): Only call __retire_object.\n+\t(__trace_list_to_slist_free()): New.\n+\t(__trace_list_to_slist_report): Call __trace_report.\n+\t(__trace_list_to_slist_construct): Return __list2slist_info*. Add check\n+\tfor reentrancy.\n+\t* include/profile/impl/profiler_list_to_vector.h\n+\t(__list2vector_info()): Delete.\n+\t(__list2vector_info(const __list2vector_info&)): Delete.\n+\t(virtual ~__list2vector_info()): Delete.\n+\t(_list2vector_info::__is_valid): Delete.\n+\t(_list2vector_info::__set_invalid): Delete.\n+\t(_list2vector_info::__opr_iterate): Use atomic operation.\n+\t(_list2vector_info::_M_valid): Delete.\n+\t(__trace_list_to_vector::__insert): Delete.\n+\t(__trace_list_to_vector::__find): Delete.\n+\t(__trace_list_to_vector::__opr_insert): Delete.\n+\t(__trace_list_to_vector::__opr_iterate): Delete.\n+\t(__trace_list_to_vector::__invalid_operator): Delete.\n+\t(__trace_list_to_vector::__resize): Delete.\n+\t(__trace_list_to_vector_free): New.\n+\t(__trace_list_to_vector_report): Call __trace_report.\n+\t(__trace_list_to_vector_construct): Return __list2vector_info*. Add\n+\tcheck for reentrancy.\n+\t* include/profile/impl/profiler_map_to_unordered_map.h\n+\t(__map2umap_info()): Delete.\n+\t(__map2umap_info(const __map2umap_info&)): Delete.\n+\t(virtual ~__map2umap_info()): Delete.\n+\t(__map2umap_info::__record_iterate): Use atomic operation.\n+\t(__map2umap_info::__set_iterate_costs): New.\n+\t(__map2umap_info::__record_invalidate): Delete.\n+\t(__map2umap_info::_M_valid): Delete.\n+\t(__trace_map2umap::__destruct): New.\n+\t(__trace_map_to_unordered_map_free): New.\n+\t(__trace_map_to_unordered_map_report): Call __trace_report.\n+\t(__trace_map_to_unordered_map_construct): Return __map2umap_info*. Add\n+\tcheck for reentrancy.\n+\t* include/profile/impl/profiler_node.h (__object_t): Delete typedef.\n+\t(__get_stack): Return null stack trace in case of (bad_alloc) exception.\n+\t(__object_info_base()): Delete.\n+\t(__object_info_base(const __object_info_base&)): Delete.\n+\t(virtual ~__object_info_base()): Delete.\n+\t(__object_info_base::__set_invalid): New.\n+\t(__object_info_base::__merge): New.\n+\t(virtual void __write(FILE*)): Delete.\n+\t(class __stack_info_base): Delete.\n+\t* include/profile/impl/profiler_trace.h (__global_lock): Rename into\n+\t__global_mutex.\n+\t(__trace_vector_size_free): New declaration.\n+\t(__trace_hashtable_size_free): Likewise.\n+\t(__trace_hash_func_free): Likewise.\n+\t(__trace_vector_to_list_free): Likewise.\n+\t(__trace_list_to_slist_free): Likewise.\n+\t(__trace_list_to_vector_free): Likewise.\n+\t(__trace_map_to_unordered_map_free): Likewise.\n+\t(__trace_base::~__trace_base()): Not virtual anymore. Delete stored\n+\tbacktrace information.\n+\t(__trace_base::__add_object): Return __object_info*, take only a stack\n+\ttrace.\n+\t(__trace_base::__get_object_info): Delete.\n+\t(__trace_base::__retire_object): Take __object_info* instead of\n+\t__object_t.\n+\t(__trace_base::__object_table_lock): Delete.\n+\t(__trace_base::__stack_table_lock): Delete.\n+\t(__trace_base::__object_table_t): Delete typedef.\n+\t(__trace_base::__object_table): Delete.\n+\t(__trace_base::__trace_mutex): New.\n+\t(__trace_base::__object_byte_size): New.\n+\t(__trace_report): New.\n+\t(__report): Use __gnu_cxx::__scoped_lock to lock/unlock __global_mutex\n+\trather than explicitely calling lock() method, exception safe.\n+\t(__report_and_free): New. Call __report and free all profile mode\n+\tresources.\n+\t(__profcxx_init_unconditional): Use __scoped_lock. Register\n+\t__report_and_free with atexit.\n+\t* include/profile/impl/profiler_vector_size.h\n+\t(__trace_vector_size_free): New.\n+\t(__trace_vector_size_report): Call __trace_report.\n+\t(__trace_vector_size_construct): Return __container_size_info*. Add\n+\tcheck for reentrancy.\n+\t* include/profile/impl/profiler_vector_to_list.h\n+\t(__vector2list_info()): Delete.\n+\t(virtual ~__vector2list_info()): Delete.\n+\t(__vector2list_info(const __vector2list_info&)): Delete.\n+\t(__vector2list_info::__merge): Call __object_info_base::__merge.\n+\t(__vector2list_info::__is_valid): Delete.\n+\t(__vector2list_info::__set_valid): Delete.\n+\t(__vector2list_info::__opr_find): Delete.\n+\t(__vector2list_info::_M_valid): Delete.\n+\t(__trace_vector_to_list::__insert): Delete.\n+\t(__trace_vector_to_list::__find): Delete.\n+\t(__trace_vector_to_list::__opr_insert): Delete.\n+\t(__trace_vector_to_list::__opr_iterate): Delete.\n+\t(__trace_vector_to_list::__invalid_operator): Delete.\n+\t(__trace_vector_to_list::__resize): Delete.\n+\t(__trace_vector_to_list::__opr_find): Delete.\n+\t(__trace_vector_to_list_free): New.\n+\t(__trace_vector_to_list_report): Call __trace_report.\n+\t(__trace_vector_to_list_construct): Return __vector2list_info*. Add\n+\tcheck for reentrancy.\n+\t* include/profile/iterator_tracker.h\n+\t(__iterator_tracker<>::operator=): Add missing _M_ds assignment.\n+\t(__iterator_tracker<>::_M_find): Delete.\n+\t* include/profile/impl/profiler.h\n+\t([_GLIBCXX_PROFILE_REENTRANCE_GUARD]): Delete.\n+\t(__container_size_info): Add class declaration.\n+\t(__hashfunc_info): Likewise.\n+\t(__map2umap_info): Likewise.\n+\t(__vector2list_info): Likewise.\n+\t(__list2slist_info): Likewise.\n+\t(__list2vector_info): Likewise.\n+\t(__trace_list_to_set_destruct): Delete declaration.\n+\t(__trace_list_to_set_construct): Likewise.\n+\t(__trace_list_to_set_insert): Likewise.\n+\t(__trace_list_to_set_iterate): Likewise.\n+\t(__trace_list_to_set_invalid_operator): Likewise.\n+\t(__trace_list_to_set_find): Likewise.\n+\t([__profcxx_report]): Remove usage of _GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_turn_on]): Likewise.\n+\t([__profcxx_turn_off]): Likewise.\n+\t([__profcxx_is_invalid]): Likewise.\n+\t([__profcxx_is_on]): Likewise.\n+\t([__profcxx_is_off]): Likewise.\n+\t([__profcxx_hashtable_resize]): Likewise.\n+\t([__profcxx_hashtable_destruct]): Likewise.\n+\t([__profcxx_hashtable_construct]): Likewise.\n+\t([__profcxx_vector_size_construct]): Likewise.\n+\t([__profcxx_vector_size_resize]): Likewise.\n+\t([__profcxx_vector_size_destruct]): Likewise.\n+\t([__profcxx_inefficient_hash_is_on]): Delete.\n+\t([__profcxx_hash_func_construct]): Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_hash_func_destruct]): Likewise.\n+\t([__profcxx_vector_construct2]): Rename into...\n+\t([__profcxx_vector2list_construct]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_vector_insert]): Rename into...\n+\t([__profcxx_vector2list_insert]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_vector_iterate]): Rename into...\n+\t([__profcxx_vector2list_iterate]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_vector_invalid_operator]): Rename into...\n+\t([__profcxx_vector2list_invalid_operator]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_vector_resize2]): Rename into...\n+\t([__profcxx_vector2list_resize]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_vector_destruct2]): Rename into...\n+\t([__profcxx_vector2list_destruct]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_vector_find]): Delete.\n+\t([__profcxx_list_construct2]): Rename into...\n+\t([__profcxx_list2vector_construct]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_list_insert]): Rename into...\n+\t([__profcxx_list2vector_insert]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_list_iterate]): Rename into...\n+\t([__profcxx_list2vector_iterate]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([_profcxx_list_invalid_operator]): Rename into...\n+\t([__profcxx_list2vector_invalid_operator]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_list_destruct2]): Rename into...\n+\t([__profcxx_list2vector_destruct]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_list_construct]): Rename into...\n+\t([__profcxx_list2slist_construct]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_list_rewind]): Rename into...\n+\t([__profcxx_list2slist_rewind]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_list_operation]): Rename into...\n+\t([__profcxx_list2slist_operation]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_list_destruct]): Rename into...\n+\t([__profcxx_list2slist_destruct]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_map_to_unordered_map_construct]): Rename into...\n+\t([__profcxx_map2umap_construct]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_map_to_unordered_map_insert]): Rename into...\n+\t([__profcxx_map2umap_insert]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_map_to_unordered_map_erase]): Rename into...\n+\t([__profcxx_map2umap_erase]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_map_to_unordered_map_iterate]): Rename into...\n+\t([__profcxx_map2umap_iterate]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_map_to_unordered_map_invalidate]): Rename into...\n+\t([__profcxx_map2umap_invalidate]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_map_to_unordered_map_find]): Rename into...\n+\t([__profcxx_map2umap_find]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t([__profcxx_map_to_unordered_map_destruct]): Rename into...\n+\t([__profcxx_map2umap_destruct]): ... this. Remove usage of\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\t* include/profile/list\n+\t(_List_profile): Adapt.\n+\t(_List_profile::_M_profile_construct): New.\n+\t(_List_profile()): Call latter.\n+\t(_List_profile::_M_profile_destruct): New.\n+\t(~_List_profile()): Call latter.\n+\t(_List_profile::_M_swap): New.\n+\t(_List_profile(_List_profile&&)): Call latter.\n+\t(_List_profile::operator=(const _List_profile&)): Reinit profile\n+\tstructures.\n+\t(_List_profile::operator=(_List_profile&&)): Move profile struct and\n+\tre-init profile structures on moved instance.\n+\t(std::__profile::list<>): Adapt.\n+\t* include/profile/ordered_base.h\n+\t(_Ordered_profile::_M_profile_iterate): New.\n+\t(_Ordered_profile::_M_profile_construct): New.\n+\t(_Ordered_profile()): Call latter.\n+\t(_Ordered_profile::_M_swap): New.\n+\t(_Ordered_profile(_Ordered_profile&&)): Call latter.\n+\t(_Ordered_profile::operator=(const _Ordered_profile&)): Reinit\n+\tprofiling.\n+\t(_Ordered_profile::operator=(_Ordered_profile&&)): Swap and reinit\n+\tprofiling on the moved instance.\n+\t(_Ordered_profile::_M_profile_destruct): New.\n+\t(~_Ordered_profile()): Call latter.\n+\t* include/profile/map.h (std::__profile::map<>): Add profiling on\n+\titerators. Adapt.\n+\t* include/profile/multimap.h (std::__profile::multimap<>): Likewise.\n+\t* include/profile/set.h (std::__profile::set<>): Likewise.\n+\t* include/profile/multiset.h (std::__profile::multiset<>): Likewise.\n+\t* include/profile/unordered_base.h\n+\t(_Unordered_profile::_M_profile_construct): New.\n+\t(_Unordered_profile()): Call latter.\n+\t(_Unordered_profile::_M_swap): New.\n+\t(_Unordered_profile(_Unordered_profile&&)): Call latter.\n+\t(_Unordered_profile::operator=(const _Unordered_profile&)): Reinit\n+\tprofiling.\n+\t(_Unordered_profile::operator=(_Unordered_profile&&)): Swap and reinit\n+\tprofiling on the moved instance.\n+\t(_Unordered_profile::_M_profile_destruct): New.\n+\t(~_Ordered_profile()): Call latter.\n+\t* include/profile/unordered_map\n+\t(std::__profile::unordered_map<>): Adapt.\n+\t(std::__profile::unordered_multimap<>): Adapt.\n+\t* include/profile/unordered_set\n+\t(std::__profile::unordered_set<>): Adapt.\n+\t(std::__profile::unordered_multiset<>): Adapt.\n+\t* include/profile/vector\n+\t(_Vector_profile_pre::_M_profile_destruct): Move...\n+\t(_Vector_profile_post::_M_profile_destruct): ...here.\n+\t(_Vector_profile_post::_M_profile_construct): New.\n+\t(_Vector_profile_post()): Call latter.\n+\t(std::__profile::vector<>): Adapt.\n+\t* testsuite/ext/profile/mh.cc: Rename into...\n+\t* testsuite/ext/profile/replace_new.cc: ... this and fix test.\n+\n 2014-11-05  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \t    Jonathan Wakely  <jwakely@redhat.com>\n "}, {"sha": "a964053865edc2a7ae77a4adddc319e7706fda0c", "filename": "libstdc++-v3/include/profile/impl/profiler.h", "status": "modified", "additions": 154, "deletions": 189, "changes": 343, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -80,69 +80,78 @@ namespace __gnu_profile\n     ~__reentrance_guard() { __inside() = false; }\n   };\n \n-#define _GLIBCXX_PROFILE_REENTRANCE_GUARD(__x...)\t      \t\\\n-  {                                                             \\\n-    if (__gnu_profile::__reentrance_guard::__get_in())          \\\n-    {                                                           \\\n-      __gnu_profile::__reentrance_guard __get_out; \t\t\\\n-      __x;                                                      \\\n-    }                                                           \\\n-  }\n-\n   // Forward declarations of implementation functions.\n   // Don't use any __gnu_profile:: in user code.\n   // Instead, use the __profcxx... macros, which offer guarded access.\n+  class __container_size_info;\n+  class __hashfunc_info;\n+  class __map2umap_info;\n+  class __vector2list_info;\n+  class __list2slist_info;\n+  class __list2vector_info;\n+\n   bool __turn_on();\n   bool __turn_off();\n   bool __is_invalid();\n   bool __is_on();\n   bool __is_off();\n-  void __report(void);\n-  void __trace_hashtable_size_resize(const void*, std::size_t, std::size_t);\n-  void __trace_hashtable_size_destruct(const void*, std::size_t, std::size_t);\n-  void __trace_hashtable_size_construct(const void*, std::size_t);\n-  void __trace_vector_size_resize(const void*, std::size_t, std::size_t);\n-  void __trace_vector_size_destruct(const void*, std::size_t, std::size_t);\n-  void __trace_vector_size_construct(const void*, std::size_t);\n-  void __trace_hash_func_destruct(const void*, std::size_t, std::size_t,\n-\t\t\t\t  std::size_t);\n-  void __trace_hash_func_construct(const void*);\n-  void __trace_vector_to_list_destruct(const void*);\n-  void __trace_vector_to_list_construct(const void*);\n-  void __trace_vector_to_list_insert(const void*, std::size_t, std::size_t);\n-  void __trace_vector_to_list_iterate(const void*, std::size_t);\n-  void __trace_vector_to_list_invalid_operator(const void*);\n-  void __trace_vector_to_list_resize(const void*, std::size_t, std::size_t);\n-  void __trace_vector_to_list_find(const void*, std::size_t);\n+  void __report();\n+\n+  __container_size_info*\n+  __trace_hashtable_size_construct(std::size_t);\n+  void __trace_hashtable_size_resize(__container_size_info*,\n+\t\t\t\t     std::size_t, std::size_t);\n+  void __trace_hashtable_size_destruct(__container_size_info*,\n+\t\t\t\t       std::size_t, std::size_t);\n+\n+  __hashfunc_info*\n+  __trace_hash_func_construct();\n+  void __trace_hash_func_destruct(__hashfunc_info*,\n+\t\t\t\t  std::size_t, std::size_t, std::size_t);\n+\n+  __container_size_info*\n+  __trace_vector_size_construct(std::size_t);\n+  void __trace_vector_size_resize(__container_size_info*,\n+\t\t\t\t  std::size_t, std::size_t);\n+  void __trace_vector_size_destruct(__container_size_info*,\n+\t\t\t\t    std::size_t, std::size_t);\n \n-  void __trace_list_to_slist_destruct(const void*);\n-  void __trace_list_to_slist_construct(const void*);\n-  void __trace_list_to_slist_rewind(const void*);\n-  void __trace_list_to_slist_operation(const void*);\n+  __vector2list_info*\n+  __trace_vector_to_list_construct();\n+  void __trace_vector_to_list_insert(__vector2list_info*,\n+\t\t\t\t     std::size_t, std::size_t);\n+  void __trace_vector_to_list_iterate(__vector2list_info*, int);\n+  void __trace_vector_to_list_invalid_operator(__vector2list_info*);\n+  void __trace_vector_to_list_resize(__vector2list_info*,\n+\t\t\t\t     std::size_t, std::size_t);\n+  void __trace_vector_to_list_destruct(__vector2list_info*);\n \n-  void __trace_list_to_vector_destruct(const void*);\n-  void __trace_list_to_vector_construct(const void*);\n-  void __trace_list_to_vector_insert(const void*, std::size_t, std::size_t);\n-  void __trace_list_to_vector_iterate(const void*, std::size_t);\n-  void __trace_list_to_vector_invalid_operator(const void*);\n-  void __trace_list_to_vector_resize(const void*, std::size_t, std::size_t);\n+  __list2slist_info*\n+  __trace_list_to_slist_construct();\n+  void __trace_list_to_slist_rewind(__list2slist_info*);\n+  void __trace_list_to_slist_operation(__list2slist_info*);\n+  void __trace_list_to_slist_destruct(__list2slist_info*);\n \n-  void __trace_list_to_set_destruct(const void*);\n-  void __trace_list_to_set_construct(const void*);\n-  void __trace_list_to_set_insert(const void*, std::size_t, std::size_t); \n-  void __trace_list_to_set_iterate(const void*, std::size_t);\n-  void __trace_list_to_set_invalid_operator(const void*);\n-  void __trace_list_to_set_find(const void*, std::size_t); \n+  __list2vector_info*\n+  __trace_list_to_vector_construct();\n+  void __trace_list_to_vector_insert(__list2vector_info*,\n+\t\t\t\t     std::size_t, std::size_t);\n+  void __trace_list_to_vector_iterate(__list2vector_info*, int);\n+  void __trace_list_to_vector_invalid_operator(__list2vector_info*);\n+  void __trace_list_to_vector_resize(__list2vector_info*,\n+\t\t\t\t     std::size_t, std::size_t);\n+  void __trace_list_to_vector_destruct(__list2vector_info*);\n \n-  void __trace_map_to_unordered_map_construct(const void*);\n-  void __trace_map_to_unordered_map_invalidate(const void*);\n-  void __trace_map_to_unordered_map_insert(const void*, std::size_t,\n+  __map2umap_info*\n+  __trace_map_to_unordered_map_construct();\n+  void __trace_map_to_unordered_map_invalidate(__map2umap_info*);\n+  void __trace_map_to_unordered_map_insert(__map2umap_info*, std::size_t,\n \t\t\t\t\t   std::size_t);\n-  void __trace_map_to_unordered_map_erase(const void*, std::size_t,\n+  void __trace_map_to_unordered_map_erase(__map2umap_info*, std::size_t,\n \t\t\t\t\t  std::size_t);\n-  void __trace_map_to_unordered_map_iterate(const void*, std::size_t);\n-  void __trace_map_to_unordered_map_find(const void*, std::size_t);\n-  void __trace_map_to_unordered_map_destruct(const void*);\n+  void __trace_map_to_unordered_map_iterate(__map2umap_info*, std::size_t);\n+  void __trace_map_to_unordered_map_find(__map2umap_info*, std::size_t);\n+  void __trace_map_to_unordered_map_destruct(__map2umap_info*);\n } // namespace __gnu_profile\n \n // Master switch turns on all diagnostics that are not explicitly turned off.\n@@ -178,18 +187,12 @@ namespace __gnu_profile\n \n // Expose global management routines to user code.\n #ifdef _GLIBCXX_PROFILE\n-#define __profcxx_report() \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD(__gnu_profile::__report())\n-#define __profcxx_turn_on() \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD(__gnu_profile::__turn_on())\n-#define __profcxx_turn_off() \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD(__gnu_profile::__turn_off())\n-#define __profcxx_is_invalid() \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD(__gnu_profile::__is_invalid())\n-#define __profcxx_is_on() \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD(__gnu_profile::__is_on())\n-#define __profcxx_is_off() \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD(__gnu_profile::__is_off())\n+#define __profcxx_report() __gnu_profile::__report()\n+#define __profcxx_turn_on() __gnu_profile::__turn_on()\n+#define __profcxx_turn_off() __gnu_profile::__turn_off()\n+#define __profcxx_is_invalid() __gnu_profile::__is_invalid()\n+#define __profcxx_is_on() __gnu_profile::__is_on()\n+#define __profcxx_is_off() __gnu_profile::__is_off()\n #else\n #define __profcxx_report()\n #define __profcxx_turn_on()\n@@ -202,166 +205,128 @@ namespace __gnu_profile\n // Turn on/off instrumentation for HASHTABLE_TOO_SMALL and HASHTABLE_TOO_LARGE.\n #if (defined(_GLIBCXX_PROFILE_HASHTABLE_TOO_SMALL) \\\n      || defined(_GLIBCXX_PROFILE_HASHTABLE_TOO_LARGE))\n-#define __profcxx_hashtable_resize(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_hashtable_size_resize(__x))\n-#define __profcxx_hashtable_destruct(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_hashtable_size_destruct(__x))\n-#define __profcxx_hashtable_construct(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_hashtable_size_construct(__x))\n+#define __profcxx_hashtable_size_construct(__x...) \\\n+  __gnu_profile::__trace_hashtable_size_construct(__x)\n+#define __profcxx_hashtable_size_resize(__x...) \\\n+  __gnu_profile::__trace_hashtable_size_resize(__x)\n+#define __profcxx_hashtable_size_destruct(__x...) \\\n+  __gnu_profile::__trace_hashtable_size_destruct(__x)\n #else\n-#define __profcxx_hashtable_resize(__x...)  \n-#define __profcxx_hashtable_destruct(__x...) \n-#define __profcxx_hashtable_construct(__x...)  \n+#define __profcxx_hashtable_size_construct(__x...) 0\n+#define __profcxx_hashtable_size_resize(__x...)\n+#define __profcxx_hashtable_size_destruct(__x...)\n #endif\n \n // Turn on/off instrumentation for VECTOR_TOO_SMALL and VECTOR_TOO_LARGE.\n #if (defined(_GLIBCXX_PROFILE_VECTOR_TOO_SMALL) \\\n      || defined(_GLIBCXX_PROFILE_VECTOR_TOO_LARGE))\n-#define __profcxx_vector_resize(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_vector_size_resize(__x))\n-#define __profcxx_vector_destruct(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_vector_size_destruct(__x))\n-#define __profcxx_vector_construct(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_vector_size_construct(__x))\n+#define __profcxx_vector_size_construct(__x...) \\\n+  __gnu_profile::__trace_vector_size_construct(__x)\n+#define __profcxx_vector_size_resize(__x...) \\\n+  __gnu_profile::__trace_vector_size_resize(__x)\n+#define __profcxx_vector_size_destruct(__x...) \\\n+  __gnu_profile::__trace_vector_size_destruct(__x)\n #else\n-#define __profcxx_vector_resize(__x...)  \n-#define __profcxx_vector_destruct(__x...) \n-#define __profcxx_vector_construct(__x...)  \n+#define __profcxx_vector_size_construct(__x...) 0\n+#define __profcxx_vector_size_resize(__x...)  \n+#define __profcxx_vector_size_destruct(__x...) \n #endif \n \n // Turn on/off instrumentation for INEFFICIENT_HASH.\n #if defined(_GLIBCXX_PROFILE_INEFFICIENT_HASH)\n-#define __profcxx_inefficient_hash_is_on() \\\n-  __gnu_profile::__is_on()\n-#define __profcxx_hashtable_construct2(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_hash_func_construct(__x))\n-#define __profcxx_hashtable_destruct2(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_hash_func_destruct(__x))\n+#define __profcxx_hash_func_construct(__x...) \\\n+  __gnu_profile::__trace_hash_func_construct(__x)\n+#define __profcxx_hash_func_destruct(__x...) \\\n+  __gnu_profile::__trace_hash_func_destruct(__x)\n #else\n-#define __profcxx_inefficient_hash_is_on() false\n-#define __profcxx_hashtable_destruct2(__x...)\n-#define __profcxx_hashtable_construct2(__x...)\n+#define __profcxx_hash_func_construct(__x...) 0\n+#define __profcxx_hash_func_destruct(__x...)\n #endif\n \n // Turn on/off instrumentation for VECTOR_TO_LIST.\n #if defined(_GLIBCXX_PROFILE_VECTOR_TO_LIST)\n-#define __profcxx_vector_construct2(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_vector_to_list_construct(__x))\n-#define __profcxx_vector_destruct2(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_vector_to_list_destruct(__x))\n-#define __profcxx_vector_insert(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_vector_to_list_insert(__x))\n-#define __profcxx_vector_iterate(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_vector_to_list_iterate(__x))\n-#define __profcxx_vector_invalid_operator(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_vector_to_list_invalid_operator(__x))\n-#define __profcxx_vector_resize2(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_vector_to_list_resize(__x))\n-#define __profcxx_vector_find(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_vector_to_list_find(__x))\n+#define __profcxx_vector2list_construct(__x...) \\\n+  __gnu_profile::__trace_vector_to_list_construct(__x)\n+#define __profcxx_vector2list_insert(__x...) \\\n+  __gnu_profile::__trace_vector_to_list_insert(__x)\n+#define __profcxx_vector2list_iterate(__x...) \\\n+  __gnu_profile::__trace_vector_to_list_iterate(__x)\n+#define __profcxx_vector2list_invalid_operator(__x...) \\\n+  __gnu_profile::__trace_vector_to_list_invalid_operator(__x)\n+#define __profcxx_vector2list_resize(__x...) \\\n+  __gnu_profile::__trace_vector_to_list_resize(__x)\n+#define __profcxx_vector2list_destruct(__x...) \\\n+  __gnu_profile::__trace_vector_to_list_destruct(__x)\n #else\n-#define __profcxx_vector_destruct2(__x...)\n-#define __profcxx_vector_construct2(__x...)\n-#define __profcxx_vector_insert(__x...)\n-#define __profcxx_vector_iterate(__x...)\n-#define __profcxx_vector_invalid_operator(__x...)\n-#define __profcxx_vector_resize2(__x...)\n-#define __profcxx_vector_find(__x...)\n+#define __profcxx_vector2list_construct(__x...) 0\n+#define __profcxx_vector2list_insert(__x...)\n+#define __profcxx_vector2list_iterate(__x...)\n+#define __profcxx_vector2list_invalid_operator(__x...)\n+#define __profcxx_vector2list_resize(__x...)\n+#define __profcxx_vector2list_destruct(__x...)\n #endif\n \n // Turn on/off instrumentation for LIST_TO_VECTOR. \n #if defined(_GLIBCXX_PROFILE_LIST_TO_VECTOR)\n-#define __profcxx_list_construct2(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_list_to_vector_construct(__x))\n-#define __profcxx_list_destruct2(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_list_to_vector_destruct(__x))\n-#define __profcxx_list_insert(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_list_to_vector_insert(__x))\n-#define __profcxx_list_iterate(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_list_to_vector_iterate(__x))\n-#define __profcxx_list_invalid_operator(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_list_to_vector_invalid_operator(__x))\n+#define __profcxx_list2vector_construct(__x...) \\\n+  __gnu_profile::__trace_list_to_vector_construct(__x)\n+#define __profcxx_list2vector_insert(__x...) \\\n+  __gnu_profile::__trace_list_to_vector_insert(__x)\n+#define __profcxx_list2vector_iterate(__x...) \\\n+  __gnu_profile::__trace_list_to_vector_iterate(__x)\n+#define __profcxx_list2vector_invalid_operator(__x...) \\\n+  __gnu_profile::__trace_list_to_vector_invalid_operator(__x)\n+#define __profcxx_list2vector_destruct(__x...) \\\n+  __gnu_profile::__trace_list_to_vector_destruct(__x)\n #else\n-#define __profcxx_list_destruct2(__x...)\n-#define __profcxx_list_construct2(__x...)\n-#define __profcxx_list_insert(__x...)\n-#define __profcxx_list_iterate(__x...)\n-#define __profcxx_list_invalid_operator(__x...)\n+#define __profcxx_list2vector_construct(__x...) 0\n+#define __profcxx_list2vector_insert(__x...)\n+#define __profcxx_list2vector_iterate(__x...)\n+#define __profcxx_list2vector_invalid_operator(__x...)\n+#define __profcxx_list2vector_destruct(__x...)\n #endif\n \n // Turn on/off instrumentation for LIST_TO_SLIST.  \n #if defined(_GLIBCXX_PROFILE_LIST_TO_SLIST)\n-#define __profcxx_list_rewind(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_list_to_slist_rewind(__x))\n-#define __profcxx_list_operation(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_list_to_slist_operation(__x))\n-#define __profcxx_list_destruct(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_list_to_slist_destruct(__x))\n-#define __profcxx_list_construct(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_list_to_slist_construct(__x))\n+#define __profcxx_list2slist_construct(__x...) \\\n+    __gnu_profile::__trace_list_to_slist_construct(__x)\n+#define __profcxx_list2slist_rewind(__x...) \\\n+  __gnu_profile::__trace_list_to_slist_rewind(__x)\n+#define __profcxx_list2slist_operation(__x...) \\\n+  __gnu_profile::__trace_list_to_slist_operation(__x)\n+#define __profcxx_list2slist_destruct(__x...) \\\n+  __gnu_profile::__trace_list_to_slist_destruct(__x)\n #else\n-#define __profcxx_list_rewind(__x...)  \n-#define __profcxx_list_operation(__x...)\n-#define __profcxx_list_destruct(__x...) \n-#define __profcxx_list_construct(__x...)  \n+#define __profcxx_list2slist_construct(__x...) 0\n+#define __profcxx_list2slist_rewind(__x...)\n+#define __profcxx_list2slist_operation(__x...)\n+#define __profcxx_list2slist_destruct(__x...)\n #endif \n \n // Turn on/off instrumentation for MAP_TO_UNORDERED_MAP.\n #if defined(_GLIBCXX_PROFILE_MAP_TO_UNORDERED_MAP)\n-#define __profcxx_map_to_unordered_map_construct(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_map_to_unordered_map_construct(__x))\n-#define __profcxx_map_to_unordered_map_destruct(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_map_to_unordered_map_destruct(__x))\n-#define __profcxx_map_to_unordered_map_insert(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_map_to_unordered_map_insert(__x))\n-#define __profcxx_map_to_unordered_map_erase(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_map_to_unordered_map_erase(__x))\n-#define __profcxx_map_to_unordered_map_iterate(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_map_to_unordered_map_iterate(__x))\n-#define __profcxx_map_to_unordered_map_invalidate(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_map_to_unordered_map_invalidate(__x))\n-#define __profcxx_map_to_unordered_map_find(__x...) \\\n-  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n-      __gnu_profile::__trace_map_to_unordered_map_find(__x))\n+#define __profcxx_map2umap_construct(__x...) \\\n+  __gnu_profile::__trace_map_to_unordered_map_construct(__x)\n+#define __profcxx_map2umap_insert(__x...) \\\n+  __gnu_profile::__trace_map_to_unordered_map_insert(__x)\n+#define __profcxx_map2umap_erase(__x...) \\\n+  __gnu_profile::__trace_map_to_unordered_map_erase(__x)\n+#define __profcxx_map2umap_iterate(__x...) \\\n+  __gnu_profile::__trace_map_to_unordered_map_iterate(__x)\n+#define __profcxx_map2umap_invalidate(__x...) \\\n+  __gnu_profile::__trace_map_to_unordered_map_invalidate(__x)\n+#define __profcxx_map2umap_find(__x...) \\\n+  __gnu_profile::__trace_map_to_unordered_map_find(__x)\n+#define __profcxx_map2umap_destruct(__x...) \\\n+  __gnu_profile::__trace_map_to_unordered_map_destruct(__x)\n #else\n-#define __profcxx_map_to_unordered_map_construct(__x...) \\\n-  \n-#define __profcxx_map_to_unordered_map_destruct(__x...)\n-#define __profcxx_map_to_unordered_map_insert(__x...)\n-#define __profcxx_map_to_unordered_map_erase(__x...)\n-#define __profcxx_map_to_unordered_map_iterate(__x...)\n-#define __profcxx_map_to_unordered_map_invalidate(__x...)\n-#define __profcxx_map_to_unordered_map_find(__x...)\n+#define __profcxx_map2umap_construct(__x...) 0\n+#define __profcxx_map2umap_insert(__x...)\n+#define __profcxx_map2umap_erase(__x...)\n+#define __profcxx_map2umap_iterate(__x...)\n+#define __profcxx_map2umap_invalidate(__x...)\n+#define __profcxx_map2umap_find(__x...)\n+#define __profcxx_map2umap_destruct(__x...)\n #endif\n \n // Set default values for compile-time customizable variables."}, {"sha": "be4bbf3a35d32fc076b357fdde9e2afa335603c7", "filename": "libstdc++-v3/include/profile/impl/profiler_container_size.h", "status": "modified", "additions": 22, "deletions": 51, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_container_size.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_container_size.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_container_size.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -43,27 +43,12 @@ namespace __gnu_profile\n   : public __object_info_base \n   {\n   public:\n-    __container_size_info()\n-    : _M_init(0), _M_max(0), _M_min(0), _M_total(0), _M_item_min(0),\n-      _M_item_max(0), _M_item_total(0), _M_count(0), _M_resize(0), _M_cost(0) \n-    { }\n-\n-    __container_size_info(const __container_size_info& __o)\n-    : __object_info_base(__o), _M_init(__o._M_init), _M_max(__o._M_max),\n-      _M_min(__o._M_min), _M_total(__o._M_total),\n-      _M_item_min(__o._M_item_min), _M_item_max(__o._M_item_max),\n-      _M_item_total(__o._M_item_total), _M_count(__o._M_count),\n-      _M_resize(__o._M_resize), _M_cost(__o._M_cost)\n-    { }\n-\n-    __container_size_info(__stack_t __stack, std::size_t __num)\n-    : __object_info_base(__stack), _M_init(__num), _M_max(__num),\n+    __container_size_info(__stack_t __stack)\n+    : __object_info_base(__stack), _M_init(0), _M_max(0),\n       _M_min(0), _M_total(0), _M_item_min(0), _M_item_max(0),\n       _M_item_total(0), _M_count(0), _M_resize(0), _M_cost(0)\n     { }\n \n-    virtual ~__container_size_info() { }\n-\n     void\n     __write(FILE* __f) const\n     {\n@@ -86,9 +71,17 @@ namespace __gnu_profile\n       return __message.str();\n     }\n \n+    void\n+    __init(std::size_t __num)\n+    {\n+      _M_init = __num;\n+      _M_max = __num;\n+    }\n+\n     void\n     __merge(const __container_size_info& __o)\n     {\n+      __object_info_base::__merge(__o);\n       _M_init        = std::max(_M_init, __o._M_init);\n       _M_max         = std::max(_M_max, __o._M_max);\n       _M_item_max    = std::max(_M_item_max, __o._M_item_max);\n@@ -117,6 +110,7 @@ namespace __gnu_profile\n \t  _M_min = std::min(_M_min, __num);\n \t  _M_item_min = std::min(_M_item_min, __inum);\n \t}\n+\n       _M_total += __num;\n       _M_item_total += __inum;\n       _M_count += 1;\n@@ -149,7 +143,6 @@ namespace __gnu_profile\n     std::size_t _M_cost;\n   };\n \n-\n   /** @brief A container size instrumentation line in the stack table.  */\n   class __container_size_stack_info\n   : public __container_size_info\n@@ -158,7 +151,6 @@ namespace __gnu_profile\n     __container_size_stack_info(const __container_size_info& __o)\n     : __container_size_info(__o) { }\n   };\n-\n   \n   /** @brief Container size instrumentation trace producer.  */\n   class __trace_container_size\n@@ -171,43 +163,22 @@ namespace __gnu_profile\n     : __trace_base<__container_size_info, __container_size_stack_info>() { };\n \n     // Insert a new node at construct with object, callstack and initial size. \n-    void\n-    __insert(const __object_t __obj, __stack_t __stack, std::size_t __num)\n-    { __add_object(__obj, __container_size_info(__stack, __num)); }\n-\n-    // XXX Undefined?\n-    void\n-    __construct(const void* __obj, std::size_t __inum);\n-  \n-    // Call at destruction/clean to set container final size.\n-    void\n-    __destruct(const void* __obj, std::size_t __num, std::size_t __inum)\n+    __container_size_info*\n+    __insert(__stack_t __stack, std::size_t __num)\n     {\n-      if (!__is_on())\n-\treturn;\n-\n-      __object_t __obj_handle = static_cast<__object_t>(__obj);\n-\n-      __container_size_info* __object_info = __get_object_info(__obj_handle);\n-      if (!__object_info)\n-\treturn;\n-\n-      __object_info->__destruct(__num, __inum);\n-      __retire_object(__obj_handle);\n+      __container_size_info* __ret =  __add_object(__stack);\n+      if (__ret)\n+\t__ret->__init(__num);\n+      return __ret;\n     }\n \n-    // Call at resize to set resize/cost information.\n+    // Call at destruction/clean to set container final size.\n     void\n-    __resize(const void* __obj, int __from, int __to)\n+    __destruct(__container_size_info* __obj_info,\n+\t       std::size_t __num, std::size_t __inum)\n     {\n-      if (!__is_on())\n-\treturn;\n-\n-      __container_size_info* __object_info = __get_object_info(__obj);\n-      if (!__object_info)\n-\treturn;\n-\n-      __object_info->__resize(__from, __to);\n+      __obj_info->__destruct(__num, __inum);\n+      __retire_object(__obj_info);\n     }\n   };\n "}, {"sha": "9e915bb9e5f63edbbcb838d02750994745773e57", "filename": "libstdc++-v3/include/profile/impl/profiler_hash_func.h", "status": "modified", "additions": 23, "deletions": 44, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hash_func.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hash_func.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hash_func.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -41,22 +41,14 @@ namespace __gnu_profile\n   : public __object_info_base\n   {\n   public:\n-    __hashfunc_info()\n-    : _M_longest_chain(0), _M_accesses(0), _M_hops(0) { }\n-\n-    __hashfunc_info(const __hashfunc_info& __o)\n-    : __object_info_base(__o), _M_longest_chain(__o._M_longest_chain),\n-      _M_accesses(__o._M_accesses), _M_hops(__o._M_hops) { }\n-\n     __hashfunc_info(__stack_t __stack)\n     : __object_info_base(__stack), _M_longest_chain(0),\n       _M_accesses(0), _M_hops(0) { }\n \n-    virtual ~__hashfunc_info() { }\n-\n     void\n     __merge(const __hashfunc_info& __o)\n     {\n+      __object_info_base::__merge(__o);\n       _M_longest_chain  = std::max(_M_longest_chain, __o._M_longest_chain);\n       _M_accesses      += __o._M_accesses;\n       _M_hops          += __o._M_hops;\n@@ -90,7 +82,6 @@ namespace __gnu_profile\n     std::size_t _M_hops;\n   };\n \n-\n   /** @brief A hash performance instrumentation line in the stack table.  */\n   class __hashfunc_stack_info \n   : public __hashfunc_info\n@@ -100,7 +91,6 @@ namespace __gnu_profile\n     : __hashfunc_info(__o) { }\n   };\n \n-\n   /** @brief Hash performance instrumentation producer.  */\n   class __trace_hash_func\n   : public __trace_base<__hashfunc_info, __hashfunc_stack_info> \n@@ -112,61 +102,50 @@ namespace __gnu_profile\n \n     ~__trace_hash_func() {}\n     \n-    // Insert a new node at construct with object, callstack and initial size.\n-    void\n-    __insert(__object_t __obj, __stack_t __stack)\n-    { __add_object(__obj, __hashfunc_info(__stack)); }\n-\n     // Call at destruction/clean to set container final size.\n     void\n-    __destruct(const void* __obj, std::size_t __chain,\n-\t       std::size_t __accesses, std::size_t __hops)\n+    __destruct(__hashfunc_info* __obj_info, \n+\t       std::size_t __chain, std::size_t __accesses, std::size_t __hops)\n     {\n-      if (!__is_on())\n-\treturn;\n-\n-      // First find the item from the live objects and update the information.\n-      __hashfunc_info* __objs = __get_object_info(__obj);\n-      if (!__objs)\n+      if (!__obj_info)\n \treturn;\n \n-      __objs->__destruct(__chain, __accesses, __hops);\n-      __retire_object(__obj);\n+      __obj_info->__destruct(__chain, __accesses, __hops);\n+      __retire_object(__obj_info);\n     }\n   };\n \n-\n   inline void\n   __trace_hash_func_init()\n   { _GLIBCXX_PROFILE_DATA(_S_hash_func) = new __trace_hash_func(); }\n \n   inline void\n-  __trace_hash_func_report(FILE* __f, __warning_vector_t& __warnings)\n-  {\n-    if (_GLIBCXX_PROFILE_DATA(_S_hash_func))\n-      {\n-\t_GLIBCXX_PROFILE_DATA(_S_hash_func)->__collect_warnings(__warnings);\n-\t_GLIBCXX_PROFILE_DATA(_S_hash_func)->__write(__f);\n-      }\n-  }\n+  __trace_hash_func_free()\n+  { delete _GLIBCXX_PROFILE_DATA(_S_hash_func); }\n \n   inline void\n-  __trace_hash_func_construct(const void* __obj)\n+  __trace_hash_func_report(FILE* __f, __warning_vector_t& __warnings)\n+  { __trace_report(_GLIBCXX_PROFILE_DATA(_S_hash_func), __f, __warnings); }\n+\n+  inline __hashfunc_info*\n+  __trace_hash_func_construct()\n   {\n     if (!__profcxx_init())\n-      return;\n+      return 0;\n+\n+    if (!__reentrance_guard::__get_in())\n+      return 0;\n \n-    _GLIBCXX_PROFILE_DATA(_S_hash_func)->__insert(__obj, __get_stack());\n+    __reentrance_guard __get_out;\n+    return _GLIBCXX_PROFILE_DATA(_S_hash_func)->__add_object(__get_stack());\n   }\n \n   inline void\n-  __trace_hash_func_destruct(const void* __obj, std::size_t __chain,\n-\t\t\t     std::size_t __accesses, std::size_t __hops)\n+  __trace_hash_func_destruct(__hashfunc_info* __obj_info,\n+\t\t\t     std::size_t __chain, std::size_t __accesses,\n+\t\t\t     std::size_t __hops)\n   {\n-    if (!__profcxx_init())\n-      return;\n-\n-    _GLIBCXX_PROFILE_DATA(_S_hash_func)->__destruct(__obj, __chain,\n+    _GLIBCXX_PROFILE_DATA(_S_hash_func)->__destruct(__obj_info, __chain,\n \t\t\t\t\t\t    __accesses, __hops);\n   }\n "}, {"sha": "0dfaebae8f78ab6d1ff6287e2b484d5b0ee43fa7", "filename": "libstdc++-v3/include/profile/impl/profiler_hashtable_size.h", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hashtable_size.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hashtable_size.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hashtable_size.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -53,44 +53,46 @@ namespace __gnu_profile\n   { _GLIBCXX_PROFILE_DATA(_S_hashtable_size) = new __trace_hashtable_size(); }\n \n   inline void\n-  __trace_hashtable_size_report(FILE* __f, __warning_vector_t& __warnings)\n-  {\n-    if (_GLIBCXX_PROFILE_DATA(_S_hashtable_size))\n-      {\n-\t_GLIBCXX_PROFILE_DATA(_S_hashtable_size)->\n-\t  __collect_warnings(__warnings);\n-\t_GLIBCXX_PROFILE_DATA(_S_hashtable_size)->__write(__f);\n-      }\n-  }\n+  __trace_hashtable_size_free()\n+  { delete _GLIBCXX_PROFILE_DATA(_S_hashtable_size); }\n \n   inline void\n-  __trace_hashtable_size_construct(const void* __obj, std::size_t __num)\n+  __trace_hashtable_size_report(FILE* __f, __warning_vector_t& __warnings)\n+  { __trace_report(_GLIBCXX_PROFILE_DATA(_S_hashtable_size), __f, __warnings); }\n+\n+  inline __container_size_info*\n+  __trace_hashtable_size_construct(std::size_t __num)\n   {\n     if (!__profcxx_init())\n-      return;\n+      return 0;\n   \n-    _GLIBCXX_PROFILE_DATA(_S_hashtable_size)->__insert(__obj, __get_stack(),\n-\t\t\t\t\t\t       __num);\n+    if (!__reentrance_guard::__get_in())\n+      return 0;\n+\n+    __reentrance_guard __get_out;\n+    return _GLIBCXX_PROFILE_DATA(_S_hashtable_size)->\n+      __insert(__get_stack(), __num);\n   }\n \n   inline void\n-  __trace_hashtable_size_destruct(const void* __obj, std::size_t __num, \n-\t\t\t\t  std::size_t __inum)\n+  __trace_hashtable_size_resize(__container_size_info* __obj_info,\n+\t\t\t\tstd::size_t __from, std::size_t __to)\n   {\n-    if (!__profcxx_init())\n+    if (!__obj_info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_hashtable_size)->__destruct(__obj, __num, __inum);\n+    __obj_info->__resize(__from, __to);\n   }\n \n   inline void\n-  __trace_hashtable_size_resize(const void* __obj, std::size_t __from, \n-\t\t\t\tstd::size_t __to)\n+  __trace_hashtable_size_destruct(__container_size_info* __obj_info,\n+\t\t\t\t  std::size_t __num, std::size_t __inum)\n   {\n-    if (!__profcxx_init())\n+    if (!__obj_info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_hashtable_size)->__resize(__obj, __from, __to);\n+    _GLIBCXX_PROFILE_DATA(_S_hashtable_size)->\n+      __destruct(__obj_info, __num, __inum);\n   }\n \n } // namespace __gnu_profile"}, {"sha": "0190d044135a181a96f8f8318d182f7cd71b4038", "filename": "libstdc++-v3/include/profile/impl/profiler_list_to_slist.h", "status": "modified", "additions": 25, "deletions": 65, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_list_to_slist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_list_to_slist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_list_to_slist.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -40,18 +40,9 @@ namespace __gnu_profile\n   : public __object_info_base\n   {\n   public:\n-    __list2slist_info()\n-    : _M_rewind(false), _M_operations(0) { }\n-  \n     __list2slist_info(__stack_t __stack)\n     : __object_info_base(__stack), _M_rewind(false), _M_operations(0) { }\n \n-    virtual ~__list2slist_info() { }\n-\n-    __list2slist_info(const __list2slist_info& __o)\n-    : __object_info_base(__o), _M_rewind(__o._M_rewind),\n-      _M_operations(__o._M_operations) { }\n-  \n     // XXX: the magnitude should be multiplied with a constant factor F,\n     // where F is 1 when the malloc size class of list nodes is different\n     // from the malloc size class of slist nodes.  When they fall into the same\n@@ -69,9 +60,6 @@ namespace __gnu_profile\n \treturn 0;\n     }\n     \n-    void\n-    __merge(const __list2slist_info&) { }\n-\n     void\n     __write(FILE* __f) const\n     { std::fprintf(__f, \"%s\\n\", _M_rewind ? \"invalid\" : \"valid\"); }\n@@ -84,7 +72,7 @@ namespace __gnu_profile\n     __opr_rewind()\n     {\n       _M_rewind = true;\n-      _M_valid = false;\n+      __set_invalid();\n     }\n \n     void\n@@ -119,37 +107,8 @@ namespace __gnu_profile\n     { __id = \"list-to-slist\"; }\n \n     void\n-    __opr_rewind(const void* __obj)\n-    {\n-      __list2slist_info* __res = __get_object_info(__obj);\n-      if (__res)\n-\t__res->__opr_rewind();\n-    }\n-\n-    void\n-    __record_operation(const void* __obj)\n-    {\n-      __list2slist_info* __res = __get_object_info(__obj);\n-      if (__res)\n-\t__res->__record_operation();\n-    }\n-\n-    void\n-    __insert(const __object_t __obj, __stack_t __stack)\n-    { __add_object(__obj, __list2slist_info(__stack)); }\n-  \n-    void\n-    __destruct(const void* __obj)\n-    {\n-      if (!__is_on())\n-\treturn;\n-\n-      __list2slist_info* __res = __get_object_info(__obj);\n-      if (!__res)\n-\treturn;\n-\n-      __retire_object(__obj);\n-    }\n+    __destruct(__list2slist_info* __obj_info)\n+    { __retire_object(__obj_info); }\n   };\n \n \n@@ -158,50 +117,51 @@ namespace __gnu_profile\n   { _GLIBCXX_PROFILE_DATA(_S_list_to_slist) = new __trace_list_to_slist(); }\n \n   inline void\n-  __trace_list_to_slist_report(FILE* __f, __warning_vector_t& __warnings)\n-  {\n-    if (_GLIBCXX_PROFILE_DATA(_S_list_to_slist))\n-      {\n-\t_GLIBCXX_PROFILE_DATA(_S_list_to_slist)->\n-\t  __collect_warnings(__warnings);\n-\t_GLIBCXX_PROFILE_DATA(_S_list_to_slist)->__write(__f);\n-      }\n-  }\n+  __trace_list_to_slist_free()\n+  { delete _GLIBCXX_PROFILE_DATA(_S_list_to_slist); }\n \n   inline void\n-  __trace_list_to_slist_rewind(const void* __obj) \n+  __trace_list_to_slist_report(FILE* __f, __warning_vector_t& __warnings)\n+  { __trace_report(_GLIBCXX_PROFILE_DATA(_S_list_to_slist), __f, __warnings); }\n+\n+  inline __list2slist_info*\n+  __trace_list_to_slist_construct()\n   {\n     if (!__profcxx_init())\n-      return;\n+      return 0;\n+\n+    if (!__reentrance_guard::__get_in())\n+      return 0;\n \n-    _GLIBCXX_PROFILE_DATA(_S_list_to_slist)->__opr_rewind(__obj);\n+    __reentrance_guard __get_out;\n+    return _GLIBCXX_PROFILE_DATA(_S_list_to_slist)->__add_object(__get_stack());\n   }\n \n   inline void\n-  __trace_list_to_slist_operation(const void* __obj) \n+  __trace_list_to_slist_rewind(__list2slist_info* __obj_info) \n   {\n-    if (!__profcxx_init())\n+    if (!__obj_info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_list_to_slist)->__record_operation(__obj);\n+    __obj_info->__opr_rewind();\n   }\n \n   inline void\n-  __trace_list_to_slist_construct(const void* __obj)\n+  __trace_list_to_slist_operation(__list2slist_info* __obj_info) \n   {\n-    if (!__profcxx_init())\n+    if (!__obj_info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_list_to_slist)->__insert(__obj, __get_stack());\n+    __obj_info->__record_operation();\n   }\n \n   inline void\n-  __trace_list_to_slist_destruct(const void* __obj)\n+  __trace_list_to_slist_destruct(__list2slist_info* __obj_info)\n   {\n-    if (!__profcxx_init())\n+    if (!__obj_info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_list_to_slist)->__destruct(__obj);\n+    _GLIBCXX_PROFILE_DATA(_S_list_to_slist)->__destruct(__obj_info);\n   }\n \n } // namespace __gnu_profile"}, {"sha": "cb9c378f9e97499cf2c1f0942bc907e7f3562398", "filename": "libstdc++-v3/include/profile/impl/profiler_list_to_vector.h", "status": "modified", "additions": 46, "deletions": 109, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_list_to_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_list_to_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_list_to_vector.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -43,31 +43,19 @@ namespace __gnu_profile\n   : public __object_info_base\n   {\n   public:\n-    __list2vector_info()\n-    : _M_shift_count(0), _M_iterate(0), _M_resize(0), _M_list_cost(0),\n-      _M_vector_cost(0), _M_valid(true), _M_max_size(0) { }\n-\n     __list2vector_info(__stack_t __stack)\n     : __object_info_base(__stack), _M_shift_count(0), _M_iterate(0),\n-      _M_resize(0), _M_list_cost(0), _M_vector_cost(0), _M_valid(true),\n+      _M_resize(0), _M_list_cost(0), _M_vector_cost(0),\n       _M_max_size(0) { }\n \n-    virtual ~__list2vector_info() { }\n-\n-    __list2vector_info(const __list2vector_info& __o)\n-    : __object_info_base(__o), _M_shift_count(__o._M_shift_count),\n-      _M_iterate(__o._M_iterate), _M_resize(__o._M_resize),\n-      _M_list_cost(__o._M_list_cost), _M_vector_cost(__o._M_vector_cost),\n-      _M_valid(__o._M_valid), _M_max_size(__o._M_max_size) { }\n-\n     void\n     __merge(const __list2vector_info& __o)\n     {\n+      __object_info_base::__merge(__o);\n       _M_shift_count  += __o._M_shift_count;\n       _M_iterate      += __o._M_iterate;\n       _M_vector_cost  += __o._M_vector_cost;\n       _M_list_cost    += __o._M_list_cost;\n-      _M_valid        &= __o._M_valid;\n       _M_resize       += __o._M_resize;\n       _M_max_size     = std::max( _M_max_size, __o._M_max_size);\n     }\n@@ -117,14 +105,6 @@ namespace __gnu_profile\n     __set_vector_cost(float __vc)\n     { _M_vector_cost = __vc; }\n     \n-    bool\n-    __is_valid()\n-    { return _M_valid; }\n-    \n-    void\n-    __set_invalid()\n-    { _M_valid = false; }\n-\n     void\n     __opr_insert(std::size_t __shift, std::size_t __size)\n     {\n@@ -133,20 +113,19 @@ namespace __gnu_profile\n     }\n \n     void\n-    __opr_iterate(std::size_t __num)\n-    { _M_iterate += __num;}\n+    __opr_iterate(int __num)\n+    { __gnu_cxx::__atomic_add(&_M_iterate, __num); }\n \n     void\n     __resize(std::size_t __from, std::size_t)\n     { _M_resize += __from; }\n \n   private:\n     std::size_t _M_shift_count;\n-    std::size_t _M_iterate;\n+    mutable _Atomic_word _M_iterate;\n     std::size_t _M_resize;\n     float _M_list_cost;\n     float _M_vector_cost;\n-    bool  _M_valid;\n     std::size_t _M_max_size;\n   };\n \n@@ -168,65 +147,20 @@ namespace __gnu_profile\n \n     ~__trace_list_to_vector() { }\n \n-    // Insert a new node at construct with object, callstack and initial size.\n-    void\n-    __insert(__object_t __obj, __stack_t __stack)\n-    { __add_object(__obj, __list2vector_info(__stack)); }\n-\n     // Call at destruction/clean to set container final size.\n     void\n-    __destruct(const void* __obj)\n+    __destruct(__list2vector_info* __obj_info)\n     {\n-      if (!__is_on())\n-\treturn;\n-\n-      __list2vector_info* __res = __get_object_info(__obj);\n-      if (!__res)\n-\treturn;\n-\n-      float __vc = __vector_cost(__res->__shift_count(), __res->__iterate());\n-      float __lc = __list_cost(__res->__shift_count(), __res->__iterate());\n-      __res->__set_vector_cost(__vc);\n-      __res->__set_list_cost(__lc);\n-      __retire_object(__obj);\n+      float __vc = __vector_cost(__obj_info->__shift_count(),\n+\t\t\t\t __obj_info->__iterate());\n+      float __lc = __list_cost(__obj_info->__shift_count(),\n+\t\t\t       __obj_info->__iterate());\n+      __obj_info->__set_vector_cost(__vc);\n+      __obj_info->__set_list_cost(__lc);\n+      __retire_object(__obj_info);\n     }\n \n-    // Find the node in the live map.\n-    __list2vector_info* __find(const void* __obj);\n-\n     // Collect cost of operations.\n-    void\n-    __opr_insert(const void* __obj, std::size_t __shift, std::size_t __size)\n-    {\n-      __list2vector_info* __res = __get_object_info(__obj);\n-      if (__res)\n-\t__res->__opr_insert(__shift, __size);\n-    }\n-\n-    void\n-    __opr_iterate(const void* __obj, std::size_t __num)\n-    {\n-      __list2vector_info* __res = __get_object_info(__obj);\n-      if (__res)\n-\t__res->__opr_iterate(__num);\n-    }\n-\n-    void\n-    __invalid_operator(const void* __obj)\n-    {\n-      __list2vector_info* __res = __get_object_info(__obj);\n-      if (__res)\n-\t__res->__set_invalid();\n-    }\n-\n-    void\n-    __resize(const void* __obj, std::size_t __from, std::size_t __to)\n-    {\n-      __list2vector_info* __res = __get_object_info(__obj);\n-      if (__res)\n-\t__res->__resize(__from, __to);\n-    }\n-\n     float\n     __vector_cost(std::size_t __shift, std::size_t __iterate)\n     {\n@@ -253,71 +187,74 @@ namespace __gnu_profile\n   { _GLIBCXX_PROFILE_DATA(_S_list_to_vector) = new __trace_list_to_vector(); }\n \n   inline void\n-  __trace_list_to_vector_report(FILE* __f, __warning_vector_t& __warnings)\n-  {\n-    if (_GLIBCXX_PROFILE_DATA(_S_list_to_vector))\n-      {\n-\t_GLIBCXX_PROFILE_DATA(_S_list_to_vector)->\n-\t  __collect_warnings(__warnings);\n-\t_GLIBCXX_PROFILE_DATA(_S_list_to_vector)->__write(__f);\n-      }\n-  }\n+  __trace_list_to_vector_free()\n+  { delete _GLIBCXX_PROFILE_DATA(_S_list_to_vector); }\n \n   inline void\n-  __trace_list_to_vector_construct(const void* __obj)\n+  __trace_list_to_vector_report(FILE* __f, __warning_vector_t& __warnings)\n+  { __trace_report(_GLIBCXX_PROFILE_DATA(_S_list_to_vector), __f, __warnings); }\n+\n+  inline __list2vector_info*\n+  __trace_list_to_vector_construct()\n   {\n     if (!__profcxx_init())\n-      return;\n+      return 0;\n \n-    _GLIBCXX_PROFILE_DATA(_S_list_to_vector)->__insert(__obj, __get_stack());\n+    if (!__reentrance_guard::__get_in())\n+      return 0;\n+\n+    __reentrance_guard __get_out;\n+    return _GLIBCXX_PROFILE_DATA(_S_list_to_vector)\n+      ->__add_object(__get_stack());\n   }\n \n   inline void\n-  __trace_list_to_vector_destruct(const void* __obj)\n+  __trace_list_to_vector_insert(__list2vector_info* __obj_info,\n+\t\t\t\tstd::size_t __shift, std::size_t __size)\n   {\n-    if (!__profcxx_init())\n+    if (!__obj_info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_list_to_vector)->__destruct(__obj);\n+    __obj_info->__opr_insert(__shift, __size);\n   }\n \n   inline void\n-  __trace_list_to_vector_insert(const void* __obj, \n-\t\t\t\tstd::size_t __shift, std::size_t __size)\n+  __trace_list_to_vector_iterate(__list2vector_info* __obj_info,\n+\t\t\t\t int)\n   {\n-    if (!__profcxx_init())\n+    if (!__obj_info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_list_to_vector)->__opr_insert(__obj, __shift, \n-\t\t\t\t\t\t\t   __size);\n+    // We only collect if an iteration took place no matter in what side.\n+    __obj_info->__opr_iterate(1);\n   }\n \n   inline void\n-  __trace_list_to_vector_iterate(const void* __obj, std::size_t __num = 1)\n+  __trace_list_to_vector_invalid_operator(__list2vector_info* __obj_info)\n   {\n-    if (!__profcxx_init())\n+    if (!__obj_info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_list_to_vector)->__opr_iterate(__obj, __num);\n+    __obj_info->__set_invalid();\n   }\n \n   inline void\n-  __trace_list_to_vector_invalid_operator(const void* __obj)\n+  __trace_list_to_vector_resize(__list2vector_info* __obj_info, \n+\t\t\t\tstd::size_t __from, std::size_t __to)\n   {\n-    if (!__profcxx_init())\n+    if (!__obj_info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_list_to_vector)->__invalid_operator(__obj);\n+    __obj_info->__resize(__from, __to);\n   }\n \n   inline void\n-  __trace_list_to_vector_resize(const void* __obj, \n-\t\t\t\tstd::size_t __from, std::size_t __to)\n+  __trace_list_to_vector_destruct(__list2vector_info* __obj_info)\n   {\n-    if (!__profcxx_init())\n+    if (!__obj_info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_list_to_vector)->__resize(__obj, __from, __to);\n+    _GLIBCXX_PROFILE_DATA(_S_list_to_vector)->__destruct(__obj_info);\n   }\n \n } // namespace __gnu_profile"}, {"sha": "fc6d880996d00665600fbcc735ee2d48c45a5e41", "filename": "libstdc++-v3/include/profile/impl/profiler_map_to_unordered_map.h", "status": "modified", "additions": 65, "deletions": 86, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_map_to_unordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_map_to_unordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_map_to_unordered_map.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -67,39 +67,29 @@ namespace __gnu_profile\n   : public __object_info_base\n   {\n   public:\n-    __map2umap_info()\n-    : _M_insert(0), _M_erase(0), _M_find(0), _M_iterate(0),\n-      _M_umap_cost(0.0), _M_map_cost(0.0), _M_valid(true) { }\n-\n     __map2umap_info(__stack_t __stack)\n     : __object_info_base(__stack), _M_insert(0), _M_erase(0), _M_find(0),\n-      _M_iterate(0), _M_umap_cost(0.0), _M_map_cost(0.0), _M_valid(true) { }\n-\n-    virtual ~__map2umap_info() { }\n-\n-    __map2umap_info(const __map2umap_info& __o)\n-    : __object_info_base(__o), _M_insert(__o._M_insert),\n-      _M_erase(__o._M_erase), _M_find(__o._M_find),\n-      _M_iterate(__o._M_iterate), _M_umap_cost(__o._M_umap_cost),\n-      _M_map_cost(__o._M_map_cost), _M_valid(__o._M_valid) { }\n+      _M_iterate(0), _M_umap_cost(0.0), _M_map_cost(0.0)\n+    { }\n \n     void\n     __merge(const __map2umap_info& __o)\n     {\n-      _M_insert    += __o._M_insert;\n-      _M_erase     += __o._M_erase;\n-      _M_find      += __o._M_find;\n-      _M_umap_cost += __o._M_umap_cost;\n-      _M_map_cost  += __o._M_map_cost;\n-      _M_valid     &= __o._M_valid;\n+      __object_info_base::__merge(__o);\n+      _M_insert\t\t+= __o._M_insert;\n+      _M_erase\t\t+= __o._M_erase;\n+      _M_find\t\t+= __o._M_find;\n+      _M_iterate\t+= __o._M_iterate;\n+      _M_umap_cost\t+= __o._M_umap_cost;\n+      _M_map_cost\t+= __o._M_map_cost;\n     }\n \n     void\n     __write(FILE* __f) const\n     {\n-      std::fprintf(__f, \"%Zu %Zu %Zu %Zu %.0f %.0f %s\\n\",\n+      std::fprintf(__f, \"%Zu %Zu %Zu %Zu %.0f %.0f\\n\",\n \t\t   _M_insert, _M_erase, _M_find, _M_iterate, _M_map_cost,\n-\t\t   _M_umap_cost, _M_valid ? \"valid\" : \"invalid\");\n+\t\t   _M_umap_cost);\n     }\n \n     float\n@@ -145,29 +135,27 @@ namespace __gnu_profile\n     }\n \n     void\n-    __record_iterate(std::size_t __count)\n+    __record_iterate(int __count)\n+    { __gnu_cxx::__atomic_add(&_M_iterate, __count); }\n+\n+    void\n+    __set_iterate_costs()\n     {\n-      _M_iterate += __count;\n-      _M_map_cost\n-\t+= (__count\n-\t    * _GLIBCXX_PROFILE_DATA(__map_iterate_cost_factor).__value);\n       _M_umap_cost\n-\t+= (__count\n+\t+= (_M_iterate\n \t    * _GLIBCXX_PROFILE_DATA(__umap_iterate_cost_factor).__value);\n+      _M_map_cost\n+\t+= (_M_iterate\n+\t    * _GLIBCXX_PROFILE_DATA(__map_iterate_cost_factor).__value);\n     }\n \n-    void\n-    __record_invalidate()\n-    { _M_valid = false; }\n-\n   private:\n     std::size_t _M_insert;\n     std::size_t _M_erase;\n     std::size_t _M_find;\n-    std::size_t _M_iterate;\n+    mutable _Atomic_word _M_iterate;\n     float _M_umap_cost;\n     float _M_map_cost;\n-    bool  _M_valid;\n   };\n \n \n@@ -189,108 +177,99 @@ namespace __gnu_profile\n     __trace_map2umap()\n     : __trace_base<__map2umap_info, __map2umap_stack_info>()\n     { __id = \"ordered-to-unordered\"; }\n+\n+    // Call at destruction/clean to set container final size.\n+    void\n+    __destruct(__map2umap_info* __obj_info)\n+    {\n+      __obj_info->__set_iterate_costs();\n+      __retire_object(__obj_info);\n+    }\n   };\n \n   inline void\n   __trace_map_to_unordered_map_init()\n   { _GLIBCXX_PROFILE_DATA(_S_map2umap) = new __trace_map2umap(); }\n \n+  inline void\n+  __trace_map_to_unordered_map_free()\n+  { delete _GLIBCXX_PROFILE_DATA(_S_map2umap); }\n+\n   inline void\n   __trace_map_to_unordered_map_report(FILE* __f,\n \t\t\t\t      __warning_vector_t& __warnings)\n-  {\n-    if (_GLIBCXX_PROFILE_DATA(_S_map2umap))\n-      {\n-\t_GLIBCXX_PROFILE_DATA(_S_map2umap)->__collect_warnings(__warnings);\n-\t_GLIBCXX_PROFILE_DATA(_S_map2umap)->__write(__f);\n-      }\n-  }\n+  { __trace_report(_GLIBCXX_PROFILE_DATA(_S_map2umap), __f, __warnings); }\n \n-  inline void\n-  __trace_map_to_unordered_map_construct(const void* __obj)\n+  inline __map2umap_info*\n+  __trace_map_to_unordered_map_construct()\n   {\n     if (!__profcxx_init())\n-      return;\n+      return 0;\n+\n+    if (!__reentrance_guard::__get_in())\n+      return 0;\n \n-    _GLIBCXX_PROFILE_DATA(_S_map2umap)->\n-      __add_object(__obj, __map2umap_info(__get_stack()));\n+    __reentrance_guard __get_out;\n+    return _GLIBCXX_PROFILE_DATA(_S_map2umap)->__add_object(__get_stack());\n   }\n \n   inline void\n-  __trace_map_to_unordered_map_destruct(const void* __obj)\n+  __trace_map_to_unordered_map_insert(__map2umap_info* __info,\n+\t\t\t\t      std::size_t __size, std::size_t __count)\n   {\n-    if (!__profcxx_init())\n+    if (!__info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_map2umap)->__retire_object(__obj);\n+    __info->__record_insert(__size, __count);\n   }\n \n   inline void\n-  __trace_map_to_unordered_map_insert(const void* __obj,\n-\t\t\t\t      std::size_t __size, std::size_t __count)\n+  __trace_map_to_unordered_map_erase(__map2umap_info* __info,\n+\t\t\t\t     std::size_t __size, std::size_t __count)\n   {\n-    if (!__profcxx_init())\n+    if (!__info)\n       return;\n \n-    __map2umap_info* __info\n-      = _GLIBCXX_PROFILE_DATA(_S_map2umap)->__get_object_info(__obj);\n-\n-    if (__info)\n-      __info->__record_insert(__size, __count);\n+    __info->__record_erase(__size, __count);\n   }\n \n   inline void\n-  __trace_map_to_unordered_map_erase(const void* __obj,\n-\t\t\t\t     std::size_t __size, std::size_t __count)\n+  __trace_map_to_unordered_map_find(__map2umap_info* __info,\n+\t\t\t\t    std::size_t __size)\n   {\n-    if (!__profcxx_init())\n+    if (!__info)\n       return;\n \n-    __map2umap_info* __info\n-      = _GLIBCXX_PROFILE_DATA(_S_map2umap)->__get_object_info(__obj);\n-\n-    if (__info)\n-      __info->__record_erase(__size, __count);\n+    __info->__record_find(__size);\n   }\n \n   inline void\n-  __trace_map_to_unordered_map_find(const void* __obj, std::size_t __size)\n+  __trace_map_to_unordered_map_iterate(__map2umap_info* __info,\n+\t\t\t\t       int)\n   {\n-    if (!__profcxx_init())\n+    if (!__info)\n       return;\n \n-    __map2umap_info* __info\n-      = _GLIBCXX_PROFILE_DATA(_S_map2umap)->__get_object_info(__obj);\n-\n-    if (__info)\n-      __info->__record_find(__size);\n+    // We only collect if an iteration took place no matter in what side.\n+    __info->__record_iterate(1);\n   }\n \n   inline void\n-  __trace_map_to_unordered_map_iterate(const void* __obj, std::size_t __count)\n+  __trace_map_to_unordered_map_invalidate(__map2umap_info* __info)\n   {\n-    if (!__profcxx_init())\n+    if (!__info)\n       return;\n \n-    __map2umap_info* __info\n-      = _GLIBCXX_PROFILE_DATA(_S_map2umap)->__get_object_info(__obj);\n-\n-    if (__info)\n-      __info->__record_iterate(__count);\n+    __info->__set_invalid();\n   }\n \n   inline void\n-  __trace_map_to_unordered_map_invalidate(const void* __obj)\n+  __trace_map_to_unordered_map_destruct(__map2umap_info* __info)\n   {\n-    if (!__profcxx_init())\n+    if (!__info)\n       return;\n \n-    __map2umap_info* __info\n-      = _GLIBCXX_PROFILE_DATA(_S_map2umap)->__get_object_info(__obj);\n-\n-    if (__info)\n-      __info->__record_invalidate();\n+    _GLIBCXX_PROFILE_DATA(_S_map2umap)->__destruct(__info);\n   }\n-\n } // namespace __gnu_profile\n #endif /* _GLIBCXX_PROFILE_PROFILER_MAP_TO_UNORDERED_MAP_H */"}, {"sha": "710466ec78820d2e85ce650009b6850c0d60e536", "filename": "libstdc++-v3/include/profile/impl/profiler_node.h", "status": "modified", "additions": 22, "deletions": 33, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_node.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -39,7 +39,6 @@\n \n namespace __gnu_profile\n {\n-  typedef const void* __object_t;\n   typedef void* __instruction_address_t;\n   typedef std::_GLIBCXX_STD_C::vector<__instruction_address_t> __stack_npt;\n   typedef __stack_npt* __stack_t;\n@@ -50,15 +49,20 @@ namespace __gnu_profile\n   __get_stack()\n   {\n #if defined _GLIBCXX_HAVE_EXECINFO_H\n-    std::size_t __max_depth = __stack_max_depth();\n-    if (__max_depth == 0)\n-      return 0;\n-    __stack_npt __buffer(__max_depth);\n-    int __depth = backtrace(&__buffer[0], __max_depth);\n-    __stack_t __stack = new __stack_npt(__depth);\n-    __builtin_memcpy(&(*__stack)[0], &__buffer[0],\n-\t\t     __depth * sizeof(__object_t));\n-    return __stack;\n+    __try\n+      {\n+\tstd::size_t __max_depth = __stack_max_depth();\n+\tif (__max_depth == 0)\n+\t  return 0;\n+\t__stack_npt __buffer(__max_depth);\n+\tint __depth = backtrace(&__buffer[0], __max_depth);\n+\treturn new(std::nothrow) __stack_npt(__buffer.begin(),\n+\t\t\t\t\t     __buffer.begin() + __depth);\n+      }\n+    __catch(...)\n+      {\n+\treturn 0;\n+      }\n #else\n     return 0;\n #endif\n@@ -123,44 +127,29 @@ namespace __gnu_profile\n   class __object_info_base\n   {\n   public:\n-    __object_info_base() { }\n-\n     __object_info_base(__stack_t __stack)\n     : _M_stack(__stack), _M_valid(true) { }\n \n-    __object_info_base(const __object_info_base& __o)\n-    : _M_stack(__o._M_stack), _M_valid(__o._M_valid) { }\n-\n-    virtual ~__object_info_base() { }\n-\n     bool\n     __is_valid() const \n     { return _M_valid; }\n     \n+    void\n+    __set_invalid()\n+    { _M_valid = false; }\n+\n+    void\n+    __merge(const __object_info_base& __o)\n+    { _M_valid &= __o._M_valid; }\n+\n     __stack_t\n     __stack() const\n     { return _M_stack; }\n     \n-    virtual void __write(FILE* __f) const = 0;\n-\n   protected:\n     __stack_t _M_stack;\n     bool _M_valid;\n   };\n \n-\n-  /** @brief Base class for a line in the stack table.  */\n-  template<typename __object_info>\n-    class __stack_info_base\n-    {\n-    public:\n-      __stack_info_base() { }\n-      __stack_info_base(const __object_info& __info) = 0;\n-      virtual ~__stack_info_base() {}\n-      void __merge(const __object_info& __info) = 0;\n-      virtual float __magnitude() const = 0;\n-      virtual const char* __get_id() const = 0;\n-    };\n-\n } // namespace __gnu_profile\n #endif /* _GLIBCXX_PROFILE_PROFILER_NODE_H */"}, {"sha": "0a4831d81ff4181ab4b3b4bf5c1e0e5e77d4840c", "filename": "libstdc++-v3/include/profile/impl/profiler_trace.h", "status": "modified", "additions": 134, "deletions": 130, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -35,8 +35,8 @@\n #include <cstdlib> // atof, atoi, strtol, getenv, atexit, abort\n \n #if __cplusplus >= 201103L\n-#define _GLIBCXX_IMPL_UNORDERED_MAP std::_GLIBCXX_STD_C::unordered_map\n #include <unordered_map>\n+#define _GLIBCXX_IMPL_UNORDERED_MAP std::_GLIBCXX_STD_C::unordered_map\n #else\n #include <tr1/unordered_map>\n #define _GLIBCXX_IMPL_UNORDERED_MAP std::tr1::unordered_map\n@@ -56,18 +56,18 @@ namespace __gnu_profile\n {\n   /** @brief Internal environment.  Values can be set one of two ways:\n       1. In config file \"var = value\".  The default config file path is \n-         libstdcxx-profile.conf.\n+\t libstdcxx-profile.conf.\n       2. By setting process environment variables.  For instance, in a Bash\n-         shell you can set the unit cost of iterating through a map like this:\n-         export __map_iterate_cost_factor=5.0.\n+\t shell you can set the unit cost of iterating through a map like this:\n+\t export __map_iterate_cost_factor=5.0.\n \t If a value is set both in the input file and through an environment\n \t variable, the environment value takes precedence.  */\n   typedef _GLIBCXX_IMPL_UNORDERED_MAP<std::string, std::string> __env_t;\n \n   _GLIBCXX_PROFILE_DEFINE_UNINIT_DATA(__env_t, __env);\n \n   /** @brief Master lock.  */\n-  _GLIBCXX_PROFILE_DEFINE_UNINIT_DATA(__gnu_cxx::__mutex, __global_lock);\n+  _GLIBCXX_PROFILE_DEFINE_UNINIT_DATA(__gnu_cxx::__mutex, __global_mutex);\n \n   /** @brief Representation of a warning.  */\n   struct __warning_data\n@@ -114,6 +114,13 @@ namespace __gnu_profile\n   void __trace_list_to_slist_report(FILE*, __warning_vector_t&); \n   void __trace_list_to_vector_report(FILE*, __warning_vector_t&);\n   void __trace_map_to_unordered_map_report(FILE*, __warning_vector_t&);\n+  void __trace_vector_size_free();\n+  void __trace_hashtable_size_free();\n+  void __trace_hash_func_free();\n+  void __trace_vector_to_list_free();\n+  void __trace_list_to_slist_free();  \n+  void __trace_list_to_vector_free();  \n+  void __trace_map_to_unordered_map_free();\n \n   struct __cost_factor\n   {\n@@ -186,26 +193,28 @@ namespace __gnu_profile\n       // Do not pick the initial size too large, as we don't know which\n       // diagnostics are more active.\n       __trace_base()\n-      : __object_table(10000), __stack_table(10000),\n+      : __objects_byte_size(0), __stack_table(10000),\n \t__stack_table_byte_size(0), __id(0) { }\n \n-      virtual ~__trace_base() { }\n+      ~__trace_base()\n+      {\n+\tfor (typename __stack_table_t::iterator __it\n+\t       = __stack_table.begin(); __it != __stack_table.end(); ++__it)\n+\t  delete __it->first;\n+      }\n \n-      void __add_object(__object_t object, __object_info __info);\n-      __object_info* __get_object_info(__object_t __object);\n-      void __retire_object(__object_t __object);\n+      __object_info* __add_object(__stack_t __stack);\n+      void __retire_object(__object_info* __info);\n       void __write(FILE* __f);\n       void __collect_warnings(__warning_vector_t& __warnings);\n+      void __free();\n \n     private:\n-      __gnu_cxx::__mutex __object_table_lock;\n-      __gnu_cxx::__mutex __stack_table_lock;\n-      typedef _GLIBCXX_IMPL_UNORDERED_MAP<__object_t, \n-\t\t\t\t\t  __object_info> __object_table_t;\n+      __gnu_cxx::__mutex __trace_mutex;\n       typedef _GLIBCXX_IMPL_UNORDERED_MAP<__stack_t, __stack_info,\n \t\t\t\t\t  __stack_hash, \n \t\t\t\t\t  __stack_hash> __stack_table_t;\n-      __object_table_t __object_table;\n+      std::size_t __objects_byte_size;\n       __stack_table_t __stack_table;\n       std::size_t __stack_table_byte_size;\n \n@@ -214,96 +223,71 @@ namespace __gnu_profile\n     };\n \n   template<typename __object_info, typename __stack_info>\n-    void\n+    __object_info*\n     __trace_base<__object_info, __stack_info>::\n-    __collect_warnings(__warning_vector_t& __warnings)\n+    __add_object(__stack_t __stack)\n     {\n-      for (typename __stack_table_t::iterator __it\n-\t     = __stack_table.begin(); __it != __stack_table.end(); ++__it)\n-\t__warnings.push_back(__warning_data((*__it).second.__magnitude(),\n-\t\t\t\t\t    (*__it).first, __id,\n-\t\t\t\t\t    (*__it).second.__advice()));\n-    }\n+      // If we have no backtrace information no need to collect data.\n+      if (!__stack)\n+\treturn 0;\n \n-  template<typename __object_info, typename __stack_info>\n-    void\n-    __trace_base<__object_info, __stack_info>::\n-    __add_object(__object_t __object, __object_info __info)\n-    {\n-      if (__max_mem() == 0 \n-\t  || __object_table.size() * sizeof(__object_info) <= __max_mem())\n-\t{\n-\t  this->__object_table_lock.lock();\n-\t  __object_table.insert(typename __object_table_t::\n-\t\t\t\tvalue_type(__object, __info));\n-\t  this->__object_table_lock.unlock();\n-\t}\n-    }\n+      __gnu_cxx::__scoped_lock __lock(this->__trace_mutex);\n \n-  template<typename __object_info, typename __stack_info>\n-    __object_info*\n-    __trace_base<__object_info, __stack_info>::\n-    __get_object_info(__object_t __object)\n-    {\n-      // XXX: Revisit this to see if we can decrease mutex spans.\n-      // Without this mutex, the object table could be rehashed during an\n-      // insertion on another thread, which could result in a segfault.\n-      this->__object_table_lock.lock();\n-      typename __object_table_t::iterator __object_it\n-\t=  __object_table.find(__object);\n-\n-      if (__object_it == __object_table.end())\n+      if (__max_mem() != 0 && __objects_byte_size >= __max_mem())\n \t{\n-\t  this->__object_table_lock.unlock();\n+\t  delete __stack;\n \t  return 0;\n \t}\n-      else\n+\n+      __object_info* __ret = new(std::nothrow) __object_info(__stack);\n+      if (!__ret)\n \t{\n-\t  this->__object_table_lock.unlock();\n-\t  return &__object_it->second;\n+\t  delete __stack;\n+\t  return 0;\n \t}\n+\n+      __objects_byte_size += sizeof(__object_info);\n+      return __ret;\n     }\n \n   template<typename __object_info, typename __stack_info>\n     void\n     __trace_base<__object_info, __stack_info>::\n-    __retire_object(__object_t __object)\n+    __retire_object(__object_info* __obj_info)\n     {\n-      this->__object_table_lock.lock();\n-      this->__stack_table_lock.lock();\n-      typename __object_table_t::iterator __object_it\n-\t= __object_table.find(__object);\n-  \n-      if (__object_it != __object_table.end())\n-\t{\n-\t  const __object_info& __info = __object_it->second;\n-\t  const __stack_t& __stack = __info.__stack();\n-\t  typename __stack_table_t::iterator __stack_it\n-\t    = __stack_table.find(__stack);\n+      if (!__obj_info)\n+\treturn;\n+\n+      __gnu_cxx::__scoped_lock __lock(this->__trace_mutex);\n+\n+      const __object_info& __info = *__obj_info;\n+      __stack_t __stack = __info.__stack();\n+      typename __stack_table_t::iterator __stack_it\n+\t= __stack_table.find(__stack);\n     \n-\t  if (__stack_it == __stack_table.end())\n+      if (__stack_it == __stack_table.end())\n+\t{\n+\t  // First occurrence of this call context.\n+\t  if (__max_mem() == 0 || __stack_table_byte_size < __max_mem()) \n \t    {\n-\t      // First occurrence of this call context.\n-\t      if (__max_mem() == 0 || __stack_table_byte_size < __max_mem()) \n-\t\t{\n-\t\t  __stack_table_byte_size \n-\t\t    += (sizeof(__instruction_address_t) * __size(__stack)\n-\t\t\t+ sizeof(__stack) + sizeof(__stack_info));\n-\t\t  __stack_table.insert(make_pair(__stack,\n-\t\t\t\t\t\t __stack_info(__info)));\n-\t\t}\n+\t      __stack_table_byte_size \n+\t\t+= (sizeof(__instruction_address_t) * __size(__stack)\n+\t\t    + sizeof(__stack) + sizeof(__stack_info));\n+\t      __stack_table.insert(make_pair(__stack,\n+\t\t\t\t\t     __stack_info(__info)));\n \t    }\n \t  else\n-\t    {\n-\t      // Merge object info into info summary for this call context.\n-\t      __stack_it->second.__merge(__info);\n-\t      delete __stack;\n-\t    }\n-\t  __object_table.erase(__object);\n+\t    delete __stack;\n+\t}\n+      else\n+\t{\n+\t  // Merge object info into info summary for this call context.\n+\t  __stack_it->second.__merge(__info);\n+\t  delete __stack;\n \t}\n \n-      this->__object_table_lock.unlock();\n-      this->__stack_table_lock.unlock();\n+      delete __obj_info;\n+      __objects_byte_size -= sizeof(__object_info);\n     }\n \n   template<typename __object_info, typename __stack_info>\n@@ -323,6 +307,30 @@ namespace __gnu_profile\n \t  }\n     }\n \n+  template<typename __object_info, typename __stack_info>\n+    void\n+    __trace_base<__object_info, __stack_info>::\n+    __collect_warnings(__warning_vector_t& __warnings)\n+    {\n+      for (typename __stack_table_t::iterator __it\n+\t     = __stack_table.begin(); __it != __stack_table.end(); ++__it)\n+\t__warnings.push_back(__warning_data(__it->second.__magnitude(),\n+\t\t\t\t\t    __it->first, __id,\n+\t\t\t\t\t    __it->second.__advice()));\n+    }\n+\n+  template<typename __object_info, typename __stack_info>\n+    inline void\n+    __trace_report(__trace_base<__object_info, __stack_info>* __cont,\n+\t\t   FILE* __f, __warning_vector_t& __warnings)\n+    {\n+      if (__cont)\n+\t{\n+\t  __cont->__collect_warnings(__warnings);\n+\t  __cont->__write(__f);\n+\t}\n+    }\n+  \n   inline std::size_t\n   __env_to_size_t(const char* __env_var, std::size_t __default_value)\n   {\n@@ -437,9 +445,9 @@ namespace __gnu_profile\n    * __gnu_profile (under the guarded zone), no output will be produced.\n    */\n   inline void\n-  __report(void)\n+  __report()\n   {\n-    _GLIBCXX_PROFILE_DATA(__global_lock).lock();\n+    __gnu_cxx::__scoped_lock __lock(_GLIBCXX_PROFILE_DATA(__global_mutex));\n \n     __warning_vector_t __warnings, __top_warnings;\n \n@@ -462,8 +470,21 @@ namespace __gnu_profile\n     __for_each(__top_warnings.begin(), __top_warnings.end(),\n \t       __warn(__warn_file));\n     std::fclose(__warn_file);\n+  }\n \n-    _GLIBCXX_PROFILE_DATA(__global_lock).unlock();\n+  inline void\n+  __report_and_free()\n+  {\n+    __report();\n+\n+    __trace_map_to_unordered_map_free();\n+    __trace_list_to_vector_free();\n+    __trace_list_to_slist_free(); \n+    __trace_vector_to_list_free();\n+    __trace_hash_func_free();\n+    __trace_hashtable_size_free();\n+    __trace_vector_size_free();\n+    delete _GLIBCXX_PROFILE_DATA(__cost_factors);\n   }\n \n   inline void\n@@ -554,60 +575,45 @@ namespace __gnu_profile\n       const char* __env_value = std::getenv(__factor->__env_var);\n \n       if (!__env_value)\n-        {\n-          // Look it up in the config file.\n-          __env_t::iterator __it \n+\t{\n+\t  // Look it up in the config file.\n+\t  __env_t::iterator __it\n \t    = _GLIBCXX_PROFILE_DATA(__env).find(__factor->__env_var);\n-          if (__it != _GLIBCXX_PROFILE_DATA(__env).end())\n-            __env_value = (*__it).second.c_str();\n-        }\n+\t  if (__it != _GLIBCXX_PROFILE_DATA(__env).end())\n+\t    __env_value = __it->second.c_str();\n+\t}\n \n       if (__env_value)\n-        __factor->__value = std::atof(__env_value);\n+\t__factor->__value = std::atof(__env_value);\n     }\n   };\n \n   inline void\n   __set_cost_factors()\n   {\n-    _GLIBCXX_PROFILE_DATA(__cost_factors) = new __cost_factor_vector;\n-    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-      push_back(&_GLIBCXX_PROFILE_DATA(__vector_shift_cost_factor));\n-    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-      push_back(&_GLIBCXX_PROFILE_DATA(__vector_iterate_cost_factor));\n-    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-      push_back(&_GLIBCXX_PROFILE_DATA(__vector_resize_cost_factor));\n-    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-      push_back(&_GLIBCXX_PROFILE_DATA(__list_shift_cost_factor));\n-    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-      push_back(&_GLIBCXX_PROFILE_DATA(__list_iterate_cost_factor));\n-    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-      push_back(&_GLIBCXX_PROFILE_DATA(__list_resize_cost_factor));\n-    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-      push_back(&_GLIBCXX_PROFILE_DATA(__map_insert_cost_factor));\n-    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-      push_back(&_GLIBCXX_PROFILE_DATA(__map_erase_cost_factor));\n-    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-      push_back(&_GLIBCXX_PROFILE_DATA(__map_find_cost_factor));\n-    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-      push_back(&_GLIBCXX_PROFILE_DATA(__map_iterate_cost_factor));\n-    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-      push_back(&_GLIBCXX_PROFILE_DATA(__umap_insert_cost_factor));\n-    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-      push_back(&_GLIBCXX_PROFILE_DATA(__umap_erase_cost_factor));\n-    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-      push_back(&_GLIBCXX_PROFILE_DATA(__umap_find_cost_factor));\n-    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-      push_back(&_GLIBCXX_PROFILE_DATA(__umap_iterate_cost_factor));\n-    __for_each(_GLIBCXX_PROFILE_DATA(__cost_factors)->begin(),\n-\t       _GLIBCXX_PROFILE_DATA(__cost_factors)->end(),\n-\t       __cost_factor_setter());\n+    __cost_factor_vector* __factors = new __cost_factor_vector;\n+    _GLIBCXX_PROFILE_DATA(__cost_factors) = __factors;\n+    __factors->push_back(&_GLIBCXX_PROFILE_DATA(__vector_shift_cost_factor));\n+    __factors->push_back(&_GLIBCXX_PROFILE_DATA(__vector_iterate_cost_factor));\n+    __factors->push_back(&_GLIBCXX_PROFILE_DATA(__vector_resize_cost_factor));\n+    __factors->push_back(&_GLIBCXX_PROFILE_DATA(__list_shift_cost_factor));\n+    __factors->push_back(&_GLIBCXX_PROFILE_DATA(__list_iterate_cost_factor));\n+    __factors->push_back(&_GLIBCXX_PROFILE_DATA(__list_resize_cost_factor));\n+    __factors->push_back(&_GLIBCXX_PROFILE_DATA(__map_insert_cost_factor));\n+    __factors->push_back(&_GLIBCXX_PROFILE_DATA(__map_erase_cost_factor));\n+    __factors->push_back(&_GLIBCXX_PROFILE_DATA(__map_find_cost_factor));\n+    __factors->push_back(&_GLIBCXX_PROFILE_DATA(__map_iterate_cost_factor));\n+    __factors->push_back(&_GLIBCXX_PROFILE_DATA(__umap_insert_cost_factor));\n+    __factors->push_back(&_GLIBCXX_PROFILE_DATA(__umap_erase_cost_factor));\n+    __factors->push_back(&_GLIBCXX_PROFILE_DATA(__umap_find_cost_factor));\n+    __factors->push_back(&_GLIBCXX_PROFILE_DATA(__umap_iterate_cost_factor));\n+    __for_each(__factors->begin(), __factors->end(), __cost_factor_setter());\n   }\n \n   inline void\n   __profcxx_init_unconditional()\n   {\n-    _GLIBCXX_PROFILE_DATA(__global_lock).lock();\n+    __gnu_cxx::__scoped_lock __lock(_GLIBCXX_PROFILE_DATA(__global_mutex));\n \n     if (__is_invalid())\n       {\n@@ -632,13 +638,11 @@ namespace __gnu_profile\n \t    __trace_list_to_vector_init();\n \t    __trace_map_to_unordered_map_init();\n \n-\t    std::atexit(__report);\n+\t    std::atexit(__report_and_free);\n \n \t    __turn_on();\n \t  }\n       }\n-\n-    _GLIBCXX_PROFILE_DATA(__global_lock).unlock();\n   }\n \n   /** @brief This function must be called by each instrumentation point."}, {"sha": "ad43779025e3f5728717ead7ac2d14836a216aa4", "filename": "libstdc++-v3/include/profile/impl/profiler_vector_size.h", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_size.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_size.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_size.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -53,43 +53,46 @@ namespace __gnu_profile\n   { _GLIBCXX_PROFILE_DATA(_S_vector_size) = new __trace_vector_size(); }\n \n   inline void\n-  __trace_vector_size_report(FILE* __f, __warning_vector_t& __warnings)\n-  {\n-    if (_GLIBCXX_PROFILE_DATA(_S_vector_size))\n-      {\n-\t_GLIBCXX_PROFILE_DATA(_S_vector_size)->__collect_warnings(__warnings);\n-\t_GLIBCXX_PROFILE_DATA(_S_vector_size)->__write(__f);\n-      }\n-  }\n+  __trace_vector_size_free()\n+  { delete _GLIBCXX_PROFILE_DATA(_S_vector_size); }\n \n   inline void\n-  __trace_vector_size_construct(const void* __obj, std::size_t __num)\n+  __trace_vector_size_report(FILE* __f, __warning_vector_t& __warnings)\n+  { __trace_report(_GLIBCXX_PROFILE_DATA(_S_vector_size), __f, __warnings); }\n+\n+  inline __container_size_info*\n+  __trace_vector_size_construct(std::size_t __num)\n   {\n     if (!__profcxx_init())\n-      return;\n+      return 0;\n+\n+    if (!__reentrance_guard::__get_in())\n+      return 0;\n \n-    _GLIBCXX_PROFILE_DATA(_S_vector_size)->__insert(__obj, __get_stack(),\n-\t\t\t\t\t\t    __num);\n+    __reentrance_guard __get_out;\n+    return _GLIBCXX_PROFILE_DATA(_S_vector_size)->\n+      __insert(__get_stack(), __num);\n   }\n \n   inline void\n-  __trace_vector_size_destruct(const void* __obj, std::size_t __num,\n-\t\t\t       std::size_t __inum)\n+  __trace_vector_size_resize(__container_size_info* __obj_info,\n+\t\t\t     std::size_t __from, std::size_t __to)\n   {\n-    if (!__profcxx_init())\n+    if (!__obj_info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_vector_size)->__destruct(__obj, __num, __inum);\n+    __obj_info->__resize(__from, __to);\n   }\n \n   inline void\n-  __trace_vector_size_resize(const void* __obj, std::size_t __from,\n-\t\t\t     std::size_t __to)\n+  __trace_vector_size_destruct(__container_size_info* __obj_info,\n+\t\t\t       std::size_t __num, std::size_t __inum)\n   {\n-    if (!__profcxx_init())\n+    if (!__obj_info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_vector_size)->__resize(__obj, __from, __to);\n+    _GLIBCXX_PROFILE_DATA(_S_vector_size)->\n+      __destruct(__obj_info, __num, __inum);\n   }\n \n } // namespace __gnu_profile"}, {"sha": "636f8916df2f74cf8e4aaf23fa67db3dc3199e24", "filename": "libstdc++-v3/include/profile/impl/profiler_vector_to_list.h", "status": "modified", "additions": 48, "deletions": 134, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_to_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_to_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_to_list.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -41,30 +41,19 @@ namespace __gnu_profile\n   : public __object_info_base\n   {\n   public:\n-    __vector2list_info()\n-    : _M_shift_count(0), _M_iterate(0), _M_resize(0), _M_list_cost(0),\n-      _M_vector_cost(0), _M_valid(true) { }\n-\n     __vector2list_info(__stack_t __stack)\n     : __object_info_base(__stack), _M_shift_count(0), _M_iterate(0),\n-      _M_resize(0), _M_list_cost(0), _M_vector_cost(0), _M_valid(true) { }\n-\n-    virtual ~__vector2list_info() { }\n-\n-    __vector2list_info(const __vector2list_info& __o)\n-    : __object_info_base(__o), _M_shift_count(__o._M_shift_count),\n-      _M_iterate(__o._M_iterate), _M_resize(__o._M_resize),\n-      _M_list_cost(__o._M_list_cost), _M_vector_cost(__o._M_vector_cost),\n-      _M_valid(__o._M_valid) { }\n+      _M_resize(0), _M_list_cost(0), _M_vector_cost(0)\n+    { }\n \n     void\n     __merge(const __vector2list_info& __o)\n     {\n+      __object_info_base::__merge(__o);\n       _M_shift_count  += __o._M_shift_count;\n       _M_iterate      += __o._M_iterate;\n       _M_vector_cost  += __o._M_vector_cost;\n       _M_list_cost    += __o._M_list_cost;\n-      _M_valid        &= __o._M_valid;\n       _M_resize       += __o._M_resize;\n     }\n \n@@ -107,40 +96,24 @@ namespace __gnu_profile\n     __set_vector_cost(float __vc)\n     { _M_vector_cost = __vc; }\n     \n-    bool\n-    __is_valid()\n-    { return _M_valid; }\n-    \n-    void\n-    __set_invalid()\n-    { _M_valid = false; }\n-\n     void\n     __opr_insert(std::size_t __pos, std::size_t __num)\n     { _M_shift_count += __num - __pos; }\n \n     void\n-    __opr_iterate(std::size_t __num)\n-    { _M_iterate += __num; }\n+    __opr_iterate(int __num)\n+    { __gnu_cxx::__atomic_add(&_M_iterate, __num); }\n \n     void\n     __resize(std::size_t __from, std::size_t)\n     { _M_resize += __from; }\n \n-    void\n-    __opr_find(std::size_t __size)\n-    {\n-      // Use average case complexity.\n-      _M_iterate += 3.0 / 4.0 * __size;\n-    }\n-\n   private:\n     std::size_t _M_shift_count;\n-    std::size_t _M_iterate;\n+    mutable _Atomic_word _M_iterate;\n     std::size_t _M_resize;\n     float _M_list_cost;\n     float _M_vector_cost;\n-    bool  _M_valid;\n   };\n \n \n@@ -165,69 +138,23 @@ namespace __gnu_profile\n \n     ~__trace_vector_to_list() { }\n \n-    // Insert a new node at construct with object, callstack and initial size. \n-    void\n-    __insert(__object_t __obj, __stack_t __stack)\n-    { __add_object(__obj, __vector2list_info(__stack)); }\n-\n     // Call at destruction/clean to set container final size.\n     void\n-    __destruct(const void* __obj)\n+    __destruct(__vector2list_info* __obj_info)\n     {\n-      if (!__is_on())\n-\treturn;\n-\n-      __vector2list_info* __res = __get_object_info(__obj);\n-      if (!__res)\n-\treturn;\n-\n-      float __vc = __vector_cost(__res->__shift_count(), __res->__iterate(),\n-\t\t\t\t __res->__resize());\n-      float __lc = __list_cost(__res->__shift_count(), __res->__iterate(),\n-\t\t\t       __res->__resize());\n-      __res->__set_vector_cost(__vc);\n-      __res->__set_list_cost(__lc);\n-\n-      __retire_object(__obj);\n+      float __vc = __vector_cost(__obj_info->__shift_count(),\n+\t\t\t\t __obj_info->__iterate(),\n+\t\t\t\t __obj_info->__resize());\n+      float __lc = __list_cost(__obj_info->__shift_count(),\n+\t\t\t       __obj_info->__iterate(),\n+\t\t\t       __obj_info->__resize());\n+      __obj_info->__set_vector_cost(__vc);\n+      __obj_info->__set_list_cost(__lc);\n+\n+      __retire_object(__obj_info);\n     }\n \n-    // Find the node in the live map.\n-    // XXX Undefined?!?\n-    __vector2list_info* __find(const void* __obj);\n-\n     // Collect cost of operations.\n-    void\n-    __opr_insert(const void* __obj, std::size_t __pos, std::size_t __num)\n-    {\n-      __vector2list_info* __res = __get_object_info(__obj);\n-      if (__res)\n-\t__res->__opr_insert(__pos, __num);\n-    }\n-\n-    void\n-    __opr_iterate(const void* __obj, std::size_t __num)\n-    {\n-      __vector2list_info* __res = __get_object_info(__obj);\n-      if (__res)\n-\t__res->__opr_iterate(__num);\n-    }\n-\n-    void\n-    __invalid_operator(const void* __obj)\n-    {\n-      __vector2list_info* __res = __get_object_info(__obj);\n-      if (__res)\n-\t__res->__set_invalid();\n-    }\n-\n-    void\n-    __resize(const void* __obj, std::size_t __from, std::size_t __to)\n-    {\n-      __vector2list_info* __res = __get_object_info(__obj);\n-      if (__res)\n-\t__res->__resize(__from, __to);\n-    }\n-\n     float\n     __vector_cost(std::size_t __shift, std::size_t __iterate,\n \t\t  std::size_t __resize)\n@@ -251,14 +178,6 @@ namespace __gnu_profile\n \t      + __resize\n \t      * _GLIBCXX_PROFILE_DATA(__list_resize_cost_factor).__value);\n     }\n-\n-    void\n-    __opr_find(const void* __obj, std::size_t __size)\n-    {\n-      __vector2list_info* __res = __get_object_info(__obj);\n-      if (__res)\n-\t__res->__opr_find(__size);\n-    }\n   };\n \n \n@@ -267,80 +186,75 @@ namespace __gnu_profile\n   { _GLIBCXX_PROFILE_DATA(_S_vector_to_list) = new __trace_vector_to_list(); }\n \n   inline void\n-  __trace_vector_to_list_report(FILE* __f, __warning_vector_t& __warnings)\n-  {\n-    if (_GLIBCXX_PROFILE_DATA(_S_vector_to_list))\n-      {\n-\t_GLIBCXX_PROFILE_DATA(_S_vector_to_list)->\n-\t  __collect_warnings(__warnings);\n-\t_GLIBCXX_PROFILE_DATA(_S_vector_to_list)->__write(__f);\n-      }\n-  }\n+  __trace_vector_to_list_free()\n+  { delete _GLIBCXX_PROFILE_DATA(_S_vector_to_list); }\n \n   inline void\n-  __trace_vector_to_list_construct(const void* __obj)\n-  {\n-    if (!__profcxx_init())\n-      return;\n-\n-    _GLIBCXX_PROFILE_DATA(_S_vector_to_list)->__insert(__obj, __get_stack());\n-  }\n+  __trace_vector_to_list_report(FILE* __f, __warning_vector_t& __warnings)\n+  { __trace_report(_GLIBCXX_PROFILE_DATA(_S_vector_to_list), __f, __warnings); }\n \n-  inline void\n-  __trace_vector_to_list_destruct(const void* __obj)\n+  inline __vector2list_info*\n+  __trace_vector_to_list_construct()\n   {\n     if (!__profcxx_init())\n-      return;\n+      return 0;\n \n-    _GLIBCXX_PROFILE_DATA(_S_vector_to_list)->__destruct(__obj);\n+    if (!__reentrance_guard::__get_in())\n+      return 0;\n+\n+    __reentrance_guard __get_out;\n+    return _GLIBCXX_PROFILE_DATA(_S_vector_to_list)\n+      ->__add_object(__get_stack());\n   }\n \n   inline void\n-  __trace_vector_to_list_insert(const void* __obj, std::size_t __pos,\n+  __trace_vector_to_list_insert(__vector2list_info* __obj_info,\n+\t\t\t\tstd::size_t __pos,\n \t\t\t\tstd::size_t __num)\n   {\n-    if (!__profcxx_init())\n+    if (!__obj_info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_vector_to_list)->__opr_insert(__obj, __pos,\n-\t\t\t\t\t\t\t   __num);\n+    __obj_info->__opr_insert(__pos, __num);\n   }\n \n   inline void\n-  __trace_vector_to_list_iterate(const void* __obj, std::size_t __num = 1)\n+  __trace_vector_to_list_iterate(__vector2list_info* __obj_info, int)\n   {\n-    if (!__profcxx_init())\n+    if (!__obj_info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_vector_to_list)->__opr_iterate(__obj, __num);\n+    // We only collect if an iteration took place no matter in what side.\n+    __obj_info->__opr_iterate(1);\n   }\n \n   inline void\n-  __trace_vector_to_list_invalid_operator(const void* __obj)\n+  __trace_vector_to_list_invalid_operator(__vector2list_info* __obj_info)\n   {\n-    if (!__profcxx_init())\n+    if (!__obj_info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_vector_to_list)->__invalid_operator(__obj);\n+    __obj_info->__set_invalid();\n   }\n \n   inline void\n-  __trace_vector_to_list_resize(const void* __obj, std::size_t __from,\n+  __trace_vector_to_list_resize(__vector2list_info* __obj_info,\n+\t\t\t\tstd::size_t __from,\n \t\t\t\tstd::size_t __to)\n   {\n-    if (!__profcxx_init())\n+    if (!__obj_info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_vector_to_list)->__resize(__obj, __from, __to);\n+    __obj_info->__resize(__from, __to);\n   }\n \n   inline void\n-  __trace_vector_to_list_find(const void* __obj, std::size_t __size)\n+  __trace_vector_to_list_destruct(__vector2list_info* __obj_info)\n   {\n-    if (!__profcxx_init())\n+    if (!__obj_info)\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_vector_to_list)->__opr_find(__obj, __size);\n+    _GLIBCXX_PROFILE_DATA(_S_vector_to_list)->__destruct(__obj_info);\n   }\n \n } // namespace __gnu_profile"}, {"sha": "b1ef9a770a6efcb68075ad43879d02d48fcd82d7", "filename": "libstdc++-v3/include/profile/iterator_tracker.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fiterator_tracker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fiterator_tracker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fiterator_tracker.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -123,6 +123,7 @@ namespace __profile\n       operator=(const __iterator_tracker& __x) _GLIBCXX_NOEXCEPT\n       {\n \t_M_current = __x._M_current;\n+\t_M_ds = __x._M_ds;\n \treturn *this;\n       }\n \n@@ -165,10 +166,6 @@ namespace __profile\n \treturn __tmp;\n       }\n \n-      void\n-      _M_find()\n-      { _M_ds->_M_profile_find(); }\n-\n       const _Sequence*\n       _M_get_sequence() const\n       { return static_cast<const _Sequence*>(_M_ds); }"}, {"sha": "7ba928c7728244e206ccc6430fa338d8b5185580", "filename": "libstdc++-v3/include/profile/list", "status": "modified", "additions": 120, "deletions": 77, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -45,29 +45,60 @@ namespace __profile\n       { return *static_cast<_List*>(this); }\n \n     public:\n+      __gnu_profile::__list2slist_info* _M_list2slist_info;\n+      __gnu_profile::__list2vector_info* _M_list2vector_info;\n+\n       _List_profile() _GLIBCXX_NOEXCEPT\n+      { _M_profile_construct(); }\n+\n+      void\n+      _M_profile_construct() _GLIBCXX_NOEXCEPT\n+      {\n+\t_M_list2slist_info = __profcxx_list2slist_construct();\n+\t_M_list2vector_info = __profcxx_list2vector_construct();\n+      }\n+\n+      void\n+      _M_profile_destruct() _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_list_construct(&_M_conjure()); \t// list2slist\n-\t__profcxx_list_construct2(&_M_conjure()); \t// list2vector\n+\t__profcxx_list2vector_destruct(_M_list2vector_info);\n+\t_M_list2vector_info = 0;\n+\t__profcxx_list2slist_destruct(_M_list2slist_info);\n+\t_M_list2slist_info = 0;\n+      }\n+\n+      void\n+      _M_swap(_List_profile& __other)\n+      {\n+\tstd::swap(_M_list2slist_info, __other._M_list2slist_info);\n+\tstd::swap(_M_list2vector_info, __other._M_list2vector_info);\n       }\n \n #if __cplusplus >= 201103L\n       _List_profile(const _List_profile&) noexcept\n       : _List_profile() { }\n-      _List_profile(_List_profile&&) noexcept\n-      : _List_profile() { }\n+      _List_profile(_List_profile&& __other) noexcept\n+      : _List_profile()\n+      { _M_swap(__other); }\n \n       _List_profile&\n-      operator=(const _List_profile&) = default;\n+      operator=(const _List_profile&) noexcept\n+      {\n+\t_M_profile_destruct();\n+\t_M_profile_construct();\n+      }\n+\n       _List_profile&\n-      operator=(_List_profile&&) = default;\n+      operator=(_List_profile&& __other) noexcept\n+      {\n+\t_M_swap(__other);\n+\t__other._M_profile_destruct();\n+\t__other._M_profile_construct();\n+      }\n #endif\n \n       ~_List_profile()\n-      {\n-\t__profcxx_list_destruct(&_M_conjure());\n-\t__profcxx_list_destruct2(&_M_conjure());\n-      }\n+      { _M_profile_destruct(); }\n     };\n \n   /** @brief List wrapper with performance instrumentation.  */\n@@ -152,7 +183,9 @@ namespace __profile\n       list&\n       operator=(const list& __x)\n       {\n+\tthis->_M_profile_destruct();\n \t_M_base() = __x;\n+\tthis->_M_profile_construct();\n \treturn *this;\n       }\n #else\n@@ -165,7 +198,9 @@ namespace __profile\n       list&\n       operator=(initializer_list<value_type> __l)\n       {\n+\tthis->_M_profile_destruct();\n \t_M_base() = __l;\n+\tthis->_M_profile_construct();\n \treturn *this;\n       }\n #endif\n@@ -182,28 +217,28 @@ namespace __profile\n       iterator\n       end() _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_list_rewind(this);\n+\t__profcxx_list2slist_rewind(this->_M_list2slist_info);\n \treturn iterator(_Base::end(), this);\n       }\n \n       const_iterator\n       end() const _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_list_rewind(this);\n+\t__profcxx_list2slist_rewind(this->_M_list2slist_info);\n \treturn const_iterator(_Base::end(), this);\n       }\n \n       reverse_iterator\n       rbegin() _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_list_rewind(this);\n+\t__profcxx_list2slist_rewind(this->_M_list2slist_info);\n \treturn reverse_iterator(end());\n       }\n \n       const_reverse_iterator\n       rbegin() const _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_list_rewind(this);\n+\t__profcxx_list2slist_rewind(this->_M_list2slist_info);\n \treturn const_reverse_iterator(end());\n       }\n \n@@ -237,38 +272,38 @@ namespace __profile\n       reference\n       back() _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_list_rewind(this);\n+\t__profcxx_list2slist_rewind(this->_M_list2slist_info);\n \treturn _Base::back();\n       }\n \n       const_reference\n       back() const _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_list_rewind(this);\n+\t__profcxx_list2slist_rewind(this->_M_list2slist_info);\n \treturn _Base::back();\n       }\n \n       // 23.2.2.3 modifiers:\n       void\n       push_front(const value_type& __x)\n       {\n-\t__profcxx_list_invalid_operator(this);\n-\t__profcxx_list_operation(this);\n+\t__profcxx_list2vector_invalid_operator(this->_M_list2vector_info);\n+\t__profcxx_list2slist_operation(this->_M_list2slist_info);\n \t_Base::push_front(__x);\n       }\n \n       void\n       pop_front() _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_list_operation(this);\n+\t__profcxx_list2slist_operation(this->_M_list2slist_info);\n \t_Base::pop_front();\n       }\n \n       void\n       pop_back() _GLIBCXX_NOEXCEPT\n       {\n \t_Base::pop_back();\n-\t__profcxx_list_rewind(this);\n+\t__profcxx_list2slist_rewind(this->_M_list2slist_info);\n       }\n \n #if __cplusplus >= 201103L\n@@ -284,149 +319,160 @@ namespace __profile\n \n       iterator\n #if __cplusplus >= 201103L\n-      insert(const_iterator __position, const _Tp& __x)\n+      insert(const_iterator __pos, const _Tp& __x)\n #else\n-      insert(iterator __position, const _Tp& __x)\n+      insert(iterator __pos, const _Tp& __x)\n #endif\n       {\n-\t_M_profile_insert(this, __position, this->size());\n-\treturn iterator(_Base::insert(__position.base(), __x), this);\n+\t_M_profile_insert(__pos, this->size());\n+\treturn iterator(_Base::insert(__pos.base(), __x), this);\n       }\n \n #if __cplusplus >= 201103L\n       iterator\n-      insert(const_iterator __position, _Tp&& __x)\n+      insert(const_iterator __pos, _Tp&& __x)\n       {\n-\t_M_profile_insert(this, __position, this->size());\n-\treturn iterator(_Base::emplace(__position.base(), std::move(__x)),\n+\t_M_profile_insert(__pos, this->size());\n+\treturn iterator(_Base::emplace(__pos.base(), std::move(__x)),\n \t\t\tthis);\n       }\n \n       iterator\n-      insert(const_iterator __position, initializer_list<value_type> __l)\n+      insert(const_iterator __pos, initializer_list<value_type> __l)\n       {\n-\t_M_profile_insert(this, __position, this->size());\n-\treturn iterator(_Base::insert(__position.base(), __l), this);\n+\t_M_profile_insert(__pos, this->size());\n+\treturn iterator(_Base::insert(__pos.base(), __l), this);\n       }\n #endif\n \n #if __cplusplus >= 201103L\n       iterator\n-      insert(const_iterator __position, size_type __n, const _Tp& __x)\n+      insert(const_iterator __pos, size_type __n, const _Tp& __x)\n       {\n-\t_M_profile_insert(this, __position, this->size());\n-\treturn iterator(_Base::insert(__position.base(), __n, __x), this);\n+\t_M_profile_insert(__pos, this->size());\n+\treturn iterator(_Base::insert(__pos.base(), __n, __x), this);\n       }\n #else\n       void\n-      insert(iterator __position, size_type __n, const _Tp& __x)\n+      insert(iterator __pos, size_type __n, const _Tp& __x)\n       {\n-\t_M_profile_insert(this, __position, this->size());\n-\t_Base::insert(__position.base(), __n, __x);\n+\t_M_profile_insert(__pos, this->size());\n+\t_Base::insert(__pos.base(), __n, __x);\n       }\n #endif\n \n #if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n \titerator\n-\tinsert(const_iterator __position, _InputIterator __first,\n+\tinsert(const_iterator __pos, _InputIterator __first,\n \t       _InputIterator __last)\n \t{\n-\t  _M_profile_insert(this, __position, this->size());\n-\t  return iterator(_Base::insert(__position.base(), __first, __last),\n+\t  _M_profile_insert(__pos, this->size());\n+\t  return iterator(_Base::insert(__pos.base(), __first, __last),\n \t\t\t  this);\n \t}\n #else\n       template<class _InputIterator>\n \tvoid\n-\tinsert(iterator __position, _InputIterator __first,\n+\tinsert(iterator __pos, _InputIterator __first,\n \t       _InputIterator __last)\n \t{\n-\t  _M_profile_insert(this, __position, this->size());\n-\t  _Base::insert(__position.base(), __first, __last);\n+\t  _M_profile_insert(__pos, this->size());\n+\t  _Base::insert(__pos.base(), __first, __last);\n \t}\n #endif\n \n       iterator\n #if __cplusplus >= 201103L\n-      erase(const_iterator __position) noexcept\n+      erase(const_iterator __pos) noexcept\n #else\n-      erase(iterator __position)\n+      erase(iterator __pos)\n #endif\n-      {\treturn iterator(_Base::erase(__position.base()), this); }\n+      {\treturn iterator(_Base::erase(__pos.base()), this); }\n \n       iterator\n #if __cplusplus >= 201103L\n-      erase(const_iterator __position, const_iterator __last) noexcept\n+      erase(const_iterator __pos, const_iterator __last) noexcept\n #else\n-      erase(iterator __position, iterator __last)\n+      erase(iterator __pos, iterator __last)\n #endif\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n-\treturn iterator(_Base::erase(__position.base(), __last.base()), this);\n+\treturn iterator(_Base::erase(__pos.base(), __last.base()), this);\n       }\n \n       void\n       swap(list& __x)\n #if __cplusplus >= 201103L\n \tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n #endif\n-      {\t_Base::swap(__x); }\n+      {\n+\t_Base::swap(__x);\n+\tthis->_M_swap(__x);\n+      }\n+\n+      void\n+      clear() _GLIBCXX_NOEXCEPT\n+      {\n+\tthis->_M_profile_destruct();\n+\t_Base::clear();\n+\tthis->_M_profile_construct();\n+      }\n \n       // 23.2.2.4 list operations:\n       void\n #if __cplusplus >= 201103L\n-      splice(const_iterator __position, list&& __x) noexcept\n+      splice(const_iterator __pos, list&& __x) noexcept\n #else\n-      splice(iterator __position, list& __x)\n+      splice(iterator __pos, list& __x)\n #endif\n-      { this->splice(__position, _GLIBCXX_MOVE(__x), __x.begin(), __x.end()); }\n+      { this->splice(__pos, _GLIBCXX_MOVE(__x), __x.begin(), __x.end()); }\n \n #if __cplusplus >= 201103L\n       void\n-      splice(const_iterator __position, list& __x) noexcept\n-      { this->splice(__position, std::move(__x)); }\n+      splice(const_iterator __pos, list& __x) noexcept\n+      { this->splice(__pos, std::move(__x)); }\n \n       void\n-      splice(const_iterator __position, list& __x, const_iterator __i)\n-      { this->splice(__position, std::move(__x), __i); }\n+      splice(const_iterator __pos, list& __x, const_iterator __i)\n+      { this->splice(__pos, std::move(__x), __i); }\n #endif\n \n       void\n #if __cplusplus >= 201103L\n-      splice(const_iterator __position, list&& __x, const_iterator __i) noexcept\n+      splice(const_iterator __pos, list&& __x, const_iterator __i) noexcept\n #else\n-      splice(iterator __position, list& __x, iterator __i)\n+      splice(iterator __pos, list& __x, iterator __i)\n #endif\n       {\n \t// We used to perform the splice_alloc check:  not anymore, redundant\n \t// after implementing the relevant bits of N1599.\n \n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t_Base::splice(__position.base(), _GLIBCXX_MOVE(__x._M_base()),\n+\t_Base::splice(__pos.base(), _GLIBCXX_MOVE(__x._M_base()),\n \t\t      __i.base());\n       }\n \n       void\n #if __cplusplus >= 201103L\n-      splice(const_iterator __position, list&& __x, const_iterator __first,\n+      splice(const_iterator __pos, list&& __x, const_iterator __first,\n \t     const_iterator __last) noexcept\n #else\n-      splice(iterator __position, list& __x, iterator __first,\n+      splice(iterator __pos, list& __x, iterator __first,\n \t     iterator __last)\n #endif\n       {\n-\t_Base::splice(__position.base(), _GLIBCXX_MOVE(__x._M_base()),\n+\t_Base::splice(__pos.base(), _GLIBCXX_MOVE(__x._M_base()),\n \t\t      __first.base(), __last.base());\n       }\n \n #if __cplusplus >= 201103L\n       void\n-      splice(const_iterator __position, list& __x,\n+      splice(const_iterator __pos, list& __x,\n \t     const_iterator __first, const_iterator __last) noexcept\n-      { this->splice(__position, std::move(__x), __first, __last); }\n+      { this->splice(__pos, std::move(__x), __first, __last); }\n #endif\n \n       void\n@@ -447,7 +493,7 @@ namespace __profile\n \t{\n \t  for (iterator __x = begin(); __x != end(); )\n \t    {\n-\t      __profcxx_list_operation(this);\n+\t      __profcxx_list2slist_operation(this->_M_list2slist_info);\n \t      if (__pred(*__x))\n \t\t__x = erase(__x);\n \t      else\n@@ -465,7 +511,7 @@ namespace __profile\n \titerator __next = __first;\n \twhile (++__next != __last)\n \t  {\n-\t    __profcxx_list_operation(this);\n+\t    __profcxx_list2slist_operation(this->_M_list2slist_info);\n \t    if (*__first == *__next)\n \t      erase(__next);\n \t    else\n@@ -485,7 +531,7 @@ namespace __profile\n \t  iterator __next = __first;\n \t  while (++__next != __last)\n \t    {\n-\t      __profcxx_list_operation(this);\n+\t      __profcxx_list2slist_operation(this->_M_list2slist_info);\n \t      if (__binary_pred(*__first, *__next))\n \t\terase(__next);\n \t      else\n@@ -530,28 +576,25 @@ namespace __profile\n       const _Base&\n       _M_base() const _GLIBCXX_NOEXCEPT\t{ return *this; }\n \n-      void _M_profile_find() const\n-      { }\n-\n       void _M_profile_iterate(int __rewind = 0) const\n       {\n-\t__profcxx_list_operation(this);\n-\t__profcxx_list_iterate(this);\n+\t__profcxx_list2slist_operation(this->_M_list2slist_info);\n+\t__profcxx_list2vector_iterate(this->_M_list2vector_info, __rewind);\n \tif (__rewind)\n-\t  __profcxx_list_rewind(this);\n+\t  __profcxx_list2slist_rewind(this->_M_list2slist_info);\n       }\n \n     private:\n       size_type\n-      _M_profile_insert(void* obj, const_iterator __pos, size_type __size)\n+      _M_profile_insert(const_iterator __pos, size_type __size)\n       {\n \tsize_type __shift = 0;\n \ttypename _Base::const_iterator __it = __pos.base();\n \tfor (; __it != _Base::end(); ++__it)\n \t  __shift++;\n-\t__profcxx_list_rewind(this);\n-\t__profcxx_list_operation(this);\n-\t__profcxx_list_insert(this, __shift, __size);\n+\t__profcxx_list2slist_rewind(this->_M_list2slist_info);\n+\t__profcxx_list2slist_operation(this->_M_list2slist_info);\n+\t__profcxx_list2vector_insert(this->_M_list2vector_info, __shift, __size);\n       }\n     };\n "}, {"sha": "cbdc0003fb7b0768eceda2874fab9b6387d3417d", "filename": "libstdc++-v3/include/profile/map.h", "status": "modified", "additions": 160, "deletions": 110, "changes": 270, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -44,6 +44,9 @@ namespace __profile\n     {\n       typedef _GLIBCXX_STD_C::map<_Key, _Tp, _Compare, _Allocator> _Base;\n \n+      typedef typename _Base::iterator\t\t\t_Base_iterator;\n+      typedef typename _Base::const_iterator\t\t_Base_const_iterator;\n+\n     public:\n       // types:\n       typedef _Key\t\t\t\t\tkey_type;\n@@ -53,12 +56,14 @@ namespace __profile\n       typedef typename _Base::reference\t\t\treference;\n       typedef typename _Base::const_reference\t\tconst_reference;\n \n-      typedef typename _Base::iterator\t\t\titerator;\n-      typedef typename _Base::const_iterator\t\tconst_iterator;\n+      typedef __iterator_tracker<_Base_iterator, map>\titerator;\n+      typedef __iterator_tracker<_Base_const_iterator,\n+\t\t\t\t map>\t\t\tconst_iterator;\n+      typedef std::reverse_iterator<iterator>\t\treverse_iterator;\n+      typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;\n+\n       typedef typename _Base::size_type\t\t\tsize_type;\n       typedef typename _Base::difference_type\t\tdifference_type;\n-      typedef typename _Base::reverse_iterator\t\treverse_iterator;\n-      typedef typename _Base::const_reverse_iterator\tconst_reverse_iterator;\n \n       // 23.3.1.1 construct/copy/destroy:\n \n@@ -125,7 +130,9 @@ namespace __profile\n       map&\n       operator=(const map& __x)\n       {\n+\tthis->_M_profile_destruct();\n \t_M_base() = __x;\n+\tthis->_M_profile_construct();\n \treturn *this;\n       }\n #else\n@@ -138,83 +145,112 @@ namespace __profile\n       map&\n       operator=(initializer_list<value_type> __l)\n       {\n+\tthis->_M_profile_destruct();\n \t_M_base() = __l;\n+\tthis->_M_profile_construct();\n \treturn *this;\n       }\n #endif\n \n+      // iterators\n+      iterator\n+      begin() _GLIBCXX_NOEXCEPT\n+      { return iterator(_Base::begin(), this); }\n+\n+      const_iterator\n+      begin() const _GLIBCXX_NOEXCEPT\n+      { return const_iterator(_Base::begin(), this); }\n+\n+      iterator\n+      end() _GLIBCXX_NOEXCEPT\n+      { return iterator(_Base::end(), this); }\n+\n+      const_iterator\n+      end() const _GLIBCXX_NOEXCEPT\n+      { return const_iterator(_Base::end(), this); }\n+\n+#if __cplusplus >= 201103L\n+      const_iterator\n+      cbegin() const noexcept\n+      { return const_iterator(_Base::cbegin(), this); }\n+\n+      const_iterator\n+      cend() const noexcept\n+      { return const_iterator(_Base::cend(), this); }\n+#endif\n+\n       reverse_iterator\n       rbegin() _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::rbegin();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn reverse_iterator(end());\n       }\n \n       const_reverse_iterator\n       rbegin() const _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::rbegin();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_reverse_iterator(end());\n       }\n \n       reverse_iterator\n       rend() _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::rend();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn reverse_iterator(begin());\n       }\n \n       const_reverse_iterator\n       rend() const _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::rend();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_reverse_iterator(begin());\n       }\n \n #if __cplusplus >= 201103L\n       const_reverse_iterator\n       crbegin() const noexcept\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::crbegin();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_reverse_iterator(cend());\n       }\n \n       const_reverse_iterator\n       crend() const noexcept\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::crend();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_reverse_iterator(cbegin());\n       }\n #endif\n \n       // 23.3.1.2 element access:\n       mapped_type&\n       operator[](const key_type& __k)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n \treturn _Base::operator[](__k);\n       }\n \n #if __cplusplus >= 201103L\n       mapped_type&\n       operator[](key_type&& __k)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n \treturn _Base::operator[](std::move(__k));\n       }\n #endif\n \n       mapped_type&\n       at(const key_type& __k)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n \treturn _Base::at(__k);\n       }\n \n       const mapped_type&\n       at(const key_type& __k) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n \treturn _Base::at(__k);\n       }\n \n@@ -226,27 +262,32 @@ namespace __profile\n \t{\n \t  // The cost is the same whether or not the element is inserted so we\n \t  // always report insertion of 1 element.\n-\t  __profcxx_map_to_unordered_map_insert(this, this->size(), 1);\n-\t  return _Base::emplace(std::forward<_Args>(__args)...);\n+\t  __profcxx_map2umap_insert(this->_M_map2umap_info, this->size(), 1);\n+\t  auto __base_ret = _Base::emplace(std::forward<_Args>(__args)...);\n+\t  return std::make_pair(iterator(__base_ret.first, this),\n+\t\t\t\t__base_ret.second);\n \t}\n \n       template<typename... _Args>\n \titerator\n \templace_hint(const_iterator __pos, _Args&&... __args)\n \t{\n \t  auto size_before = this->size();\n-\t  auto __res = _Base::emplace_hint(__pos, std::forward<_Args>(__args)...);\n-\t  __profcxx_map_to_unordered_map_insert(this, size_before,\n-\t\t\t\t\t_M_hint_used(__pos, __res) ? 0 : 1);\n-\t  return __res;\n+\t  auto __res\n+\t    = _Base::emplace_hint(__pos.base(), std::forward<_Args>(__args)...);\n+\t  __profcxx_map2umap_insert(this->_M_map2umap_info,\n+\t\tsize_before, _M_hint_used(__pos.base(), __res) ? 0 : 1);\n+\t  return iterator(__res, this);\n \t}\n #endif\n \n       std::pair<iterator, bool>\n       insert(const value_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_insert(this, this->size(), 1);\n-\treturn _Base::insert(__x);\n+\t__profcxx_map2umap_insert(this->_M_map2umap_info, this->size(), 1);\n+\tstd::pair<_Base_iterator, bool> __base_ret = _Base::insert(__x);\n+\treturn std::make_pair(iterator(__base_ret.first, this),\n+\t\t\t      __base_ret.second);\n       }\n \n #if __cplusplus >= 201103L\n@@ -256,8 +297,10 @@ namespace __profile\n \tstd::pair<iterator, bool>\n \tinsert(_Pair&& __x)\n \t{\n-\t  __profcxx_map_to_unordered_map_insert(this, this->size(), 1);\n-\t  return _Base::insert(std::forward<_Pair>(__x));\n+\t  __profcxx_map2umap_insert(this->_M_map2umap_info, this->size(), 1);\n+\t  auto __base_ret= _Base::insert(std::forward<_Pair>(__x));\n+\t  return std::make_pair(iterator(__base_ret.first, this),\n+\t\t\t\t__base_ret.second);\n \t}\n #endif\n \n@@ -275,11 +318,11 @@ namespace __profile\n #endif\n       {\n \tsize_type size_before = this->size();\n-\titerator __res = _Base::insert(__pos, __x);\n+\t_Base_iterator __res = _Base::insert(__pos.base(), __x);\n \t\n-\t__profcxx_map_to_unordered_map_insert(this, size_before,\n-\t\t\t\t\t_M_hint_used(__pos, __res) ? 0 : 1);\n-\treturn __res;\n+\t__profcxx_map2umap_insert(this->_M_map2umap_info,\n+\t\tsize_before, _M_hint_used(__pos.base(), __res) ? 0 : 1);\n+\treturn iterator(__res, this);\n       }\n \n #if __cplusplus >= 201103L\n@@ -290,20 +333,15 @@ namespace __profile\n \tinsert(const_iterator __pos, _Pair&& __x)\n \t{\n \t  size_type size_before = this->size();\n-\t  auto __res = _Base::insert(__pos, std::forward<_Pair>(__x));\n+\t  auto __res = _Base::insert(__pos.base(), std::forward<_Pair>(__x));\n \t\n-\t  __profcxx_map_to_unordered_map_insert(this, size_before,\n-\t\t\t\t\t_M_hint_used(__pos, __res) ? 0 : 1);\n-\t  return __res;\n+\t  __profcxx_map2umap_insert(this->_M_map2umap_info,\n+\t\tsize_before, _M_hint_used(__pos.base(), __res) ? 0 : 1);\n+\t  return iterator(__res, this);\n       }\n #endif\n \n-#if __cplusplus >= 201103L\n-      template<typename _InputIterator,\n-\t       typename = std::_RequireInputIter<_InputIterator>>\n-#else\n       template<typename _InputIterator>\n-#endif\n \tvoid\n \tinsert(_InputIterator __first, _InputIterator __last)\n \t{\n@@ -313,32 +351,32 @@ namespace __profile\n \n #if __cplusplus >= 201103L\n       iterator\n-      erase(const_iterator __position)\n+      erase(const_iterator __pos)\n       {\n-\t__profcxx_map_to_unordered_map_erase(this, this->size(), 1);\n-\treturn _Base::erase(__position);\n+\t__profcxx_map2umap_erase(this->_M_map2umap_info, this->size(), 1);\n+\treturn iterator(_Base::erase(__pos.base()), this);\n       }\n \n       iterator\n-      erase(iterator __position)\n+      erase(iterator __pos)\n       {\n-\t__profcxx_map_to_unordered_map_erase(this, this->size(), 1);\n-\treturn _Base::erase(__position);\n+\t__profcxx_map2umap_erase(this->_M_map2umap_info, this->size(), 1);\n+\treturn iterator(_Base::erase(__pos.base()), this);\n       }\n #else\n       void\n-      erase(iterator __position)\n+      erase(iterator __pos)\n       {\n-\t__profcxx_map_to_unordered_map_erase(this, this->size(), 1);\n-\t_Base::erase(__position);\n+\t__profcxx_map2umap_erase(this->_M_map2umap_info, this->size(), 1);\n+\t_Base::erase(__pos.base());\n       }\n #endif\n \n       size_type\n       erase(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_erase(this, this->size(), 1);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_erase(this->_M_map2umap_info, this->size(), 1);\n \treturn _Base::erase(__x);\n       }\n \n@@ -354,7 +392,7 @@ namespace __profile\n \t    return __ret;\n \t  }\n \telse\n-\t  return _Base::erase(__first, __last);\n+\t  return iterator(_Base::erase(__first.base(), __last.base()), this);\n       }\n #else\n       void\n@@ -370,74 +408,91 @@ namespace __profile\n #if __cplusplus >= 201103L\n \tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n #endif\n-      { _Base::swap(__x); }\n+      {\n+\t_Base::swap(__x);\n+\tthis->_M_swap(__x);\n+      }\n+\n+      void\n+      clear() _GLIBCXX_NOEXCEPT\n+      {\n+\tthis->_M_profile_destruct();\n+\t_Base::clear();\n+\tthis->_M_profile_construct();\n+      }\n \n       // 23.3.1.3 map operations:\n       iterator\n       find(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::find(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\treturn iterator(_Base::find(__x), this);\n       }\n \n       const_iterator\n       find(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::find(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\treturn const_iterator(_Base::find(__x), this);\n       }\n \n       size_type\n       count(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n \treturn _Base::count(__x);\n       }\n \n       iterator\n       lower_bound(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::lower_bound(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn iterator(_Base::lower_bound(__x), this);\n       }\n \n       const_iterator\n       lower_bound(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::lower_bound(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_iterator(_Base::lower_bound(__x), this);\n       }\n \n       iterator\n       upper_bound(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::upper_bound(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn iterator(_Base::upper_bound(__x), this);\n       }\n \n       const_iterator\n       upper_bound(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::upper_bound(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_iterator(_Base::upper_bound(__x), this);\n       }\n \n       std::pair<iterator,iterator>\n       equal_range(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::equal_range(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\tstd::pair<_Base_iterator, _Base_iterator> __base_ret\n+\t  = _Base::equal_range(__x);\n+\treturn std::make_pair(iterator(__base_ret.first, this),\n+\t\t\t      iterator(__base_ret.second, this));\n       }\n \n       std::pair<const_iterator,const_iterator>\n       equal_range(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::equal_range(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\tstd::pair<_Base_const_iterator, _Base_const_iterator> __base_ret\n+\t  = _Base::equal_range(__x);\n+\treturn std::make_pair(const_iterator(__base_ret.first, this),\n+\t\t\t      const_iterator(__base_ret.second, this));\n       }\n \n       _Base&\n@@ -454,13 +509,24 @@ namespace __profile\n        * implementation dependent.\n        */\n       bool\n-      _M_hint_used(const_iterator __hint, iterator __res)\n+      _M_hint_used(_Base_const_iterator __hint, _Base_iterator __res)\n       {\n \treturn (__hint == __res\n-\t\t|| (__hint == this->end() && ++__res == this->end())\n-\t\t|| (__hint != this->end() && (++__hint == __res\n-\t\t\t\t\t      || ++__res == --__hint)));\n+\t\t|| (__hint == _M_base().end() && ++__res == _M_base().end())\n+\t\t|| (__hint != _M_base().end() && (++__hint == __res\n+\t\t\t\t\t\t  || ++__res == --__hint)));\n       }\n+\n+\n+      template<typename _K1, typename _T1, typename _C1, typename _A1>\n+        friend bool\n+        operator==(const map<_K1, _T1, _C1, _A1>&,\n+\t\t   const map<_K1, _T1, _C1, _A1>&);\n+\n+      template<typename _K1, typename _T1, typename _C1, typename _A1>\n+        friend bool\n+        operator<(const map<_K1, _T1, _C1, _A1>&,\n+\t\t  const map<_K1, _T1, _C1, _A1>&);      \n     };\n \n   template<typename _Key, typename _Tp,\n@@ -469,65 +535,49 @@ namespace __profile\n     operator==(const map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n \t       const map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     {\n-      __profcxx_map_to_unordered_map_invalidate(&__lhs);\n-      __profcxx_map_to_unordered_map_invalidate(&__rhs);\n+      __profcxx_map2umap_invalidate(__lhs._M_map2umap_info);\n+      __profcxx_map2umap_invalidate(__rhs._M_map2umap_info);\n       return __lhs._M_base() == __rhs._M_base();\n     }\n \n   template<typename _Key, typename _Tp,\n \t   typename _Compare, typename _Allocator>\n     inline bool\n-    operator!=(const map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n-\t       const map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n+    operator<(const map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t      const map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     {\n-      __profcxx_map_to_unordered_map_invalidate(&__lhs);\n-      __profcxx_map_to_unordered_map_invalidate(&__rhs);\n-      return __lhs._M_base() != __rhs._M_base();\n+      __profcxx_map2umap_invalidate(__lhs._M_map2umap_info);\n+      __profcxx_map2umap_invalidate(__rhs._M_map2umap_info);\n+      return __lhs._M_base() < __rhs._M_base();\n     }\n \n   template<typename _Key, typename _Tp,\n \t   typename _Compare, typename _Allocator>\n     inline bool\n-    operator<(const map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n-\t      const map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n-    {\n-      __profcxx_map_to_unordered_map_invalidate(&__lhs);\n-      __profcxx_map_to_unordered_map_invalidate(&__rhs);\n-      return __lhs._M_base() < __rhs._M_base();\n-    }\n+    operator!=(const map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t       const map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n+    { return !(__lhs == __rhs); }\n \n   template<typename _Key, typename _Tp,\n \t   typename _Compare, typename _Allocator>\n     inline bool\n     operator<=(const map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n \t       const map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n-    {\n-      __profcxx_map_to_unordered_map_invalidate(&__lhs);\n-      __profcxx_map_to_unordered_map_invalidate(&__rhs);\n-      return __lhs._M_base() <= __rhs._M_base();\n-    }\n+    { return !(__rhs < __lhs); }\n \n   template<typename _Key, typename _Tp,\n \t   typename _Compare, typename _Allocator>\n     inline bool\n     operator>=(const map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n \t       const map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n-    {\n-      __profcxx_map_to_unordered_map_invalidate(&__lhs);\n-      __profcxx_map_to_unordered_map_invalidate(&__rhs);\n-      return __lhs._M_base() >= __rhs._M_base();\n-    }\n+    { return !(__lhs < __rhs); }\n \n   template<typename _Key, typename _Tp,\n \t   typename _Compare, typename _Allocator>\n     inline bool\n     operator>(const map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n \t      const map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n-    {\n-      __profcxx_map_to_unordered_map_invalidate(&__lhs);\n-      __profcxx_map_to_unordered_map_invalidate(&__rhs);\n-      return __lhs._M_base() > __rhs._M_base();\n-    }\n+    { return __rhs < __lhs; }\n \n   template<typename _Key, typename _Tp,\n \t   typename _Compare, typename _Allocator>"}, {"sha": "cec0e7363045a13f1ce2f95ff9cac0effd212b01", "filename": "libstdc++-v3/include/profile/multimap.h", "status": "modified", "additions": 150, "deletions": 86, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -45,6 +45,9 @@ namespace __profile\n     {\n       typedef _GLIBCXX_STD_C::multimap<_Key, _Tp, _Compare, _Allocator> _Base;\n \n+      typedef typename _Base::iterator\t\t\t_Base_iterator;\n+      typedef typename _Base::const_iterator\t\t_Base_const_iterator;\n+\n     public:\n       // types:\n       typedef _Key\t\t\t\t\tkey_type;\n@@ -54,15 +57,15 @@ namespace __profile\n       typedef typename _Base::reference\t\t\treference;\n       typedef typename _Base::const_reference\t\tconst_reference;\n \n-      typedef typename _Base::iterator\t\t\titerator;\n-      typedef typename _Base::const_iterator\t\tconst_iterator;\n-      typedef typename _Base::reverse_iterator\t\treverse_iterator;\n-      typedef typename _Base::const_reverse_iterator\tconst_reverse_iterator;\n+      typedef __iterator_tracker<_Base_iterator,\n+\t\t\t\t multimap>\t\titerator;\n+      typedef __iterator_tracker<_Base_const_iterator,\n+\t\t\t\t multimap>\t\tconst_iterator;\n+      typedef std::reverse_iterator<iterator>\t\treverse_iterator;\n+      typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;\n \n       typedef typename _Base::size_type\t\t\tsize_type;\n       typedef typename _Base::difference_type\t\tdifference_type;\n-      typedef typename _Base::pointer\t\t\tpointer;\n-      typedef typename _Base::const_pointer\t\tconst_pointer;\n \n       // 23.3.1.1 construct/copy/destroy:\n \n@@ -127,7 +130,9 @@ namespace __profile\n       multimap&\n       operator=(const multimap& __x)\n       {\n+\tthis->_M_profile_destruct();\n \t_M_base() = __x;\n+\tthis->_M_profile_construct();\n \treturn *this;\n       }\n #else\n@@ -140,52 +145,81 @@ namespace __profile\n       multimap&\n       operator=(initializer_list<value_type> __l)\n       {\n+\tthis->_M_profile_destruct();\n \t_M_base() = __l;\n+\tthis->_M_profile_construct();\n \treturn *this;\n       }\n #endif\n \n+      // iterators\n+      iterator\n+      begin() _GLIBCXX_NOEXCEPT\n+      { return iterator(_Base::begin(), this); }\n+\n+      const_iterator\n+      begin() const _GLIBCXX_NOEXCEPT\n+      { return const_iterator(_Base::begin(), this); }\n+\n+      iterator\n+      end() _GLIBCXX_NOEXCEPT\n+      { return iterator(_Base::end(), this); }\n+\n+      const_iterator\n+      end() const _GLIBCXX_NOEXCEPT\n+      { return const_iterator(_Base::end(), this); }\n+\n+#if __cplusplus >= 201103L\n+      const_iterator\n+      cbegin() const noexcept\n+      { return const_iterator(_Base::cbegin(), this); }\n+\n+      const_iterator\n+      cend() const noexcept\n+      { return const_iterator(_Base::cend(), this); }\n+#endif\n+\n       reverse_iterator\n       rbegin() _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::rbegin();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn reverse_iterator(end());\n       }\n \n       const_reverse_iterator\n       rbegin() const _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::rbegin();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_reverse_iterator(end());\n       }\n \n       reverse_iterator\n       rend() _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::rend();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn reverse_iterator(begin());\n       }\n \n       const_reverse_iterator\n       rend() const _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::rend();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_reverse_iterator(begin());\n       }\n \n #if __cplusplus >= 201103L\n       const_reverse_iterator\n       crbegin() const noexcept\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::crbegin();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_reverse_iterator(cend());\n       }\n \n       const_reverse_iterator\n       crend() const noexcept\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::crend();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_reverse_iterator(cbegin());\n       }\n #endif\n \n@@ -195,8 +229,8 @@ namespace __profile\n \titerator\n \templace(_Args&&... __args)\n \t{\n-\t  __profcxx_map_to_unordered_map_insert(this, this->size(), 1);\n-\t  return _Base::emplace(std::forward<_Args>(__args)...);\n+\t  __profcxx_map2umap_insert(this->_M_map2umap_info, this->size(), 1);\n+\t  return iterator(_Base::emplace(std::forward<_Args>(__args)...), this);\n \t}\n \n       template<typename... _Args>\n@@ -205,18 +239,18 @@ namespace __profile\n \t{\n \t  auto size_before = this->size();\n \t  auto __res\n-\t    = _Base::emplace_hint(__pos, std::forward<_Args>(__args)...);\n-\t  __profcxx_map_to_unordered_map_insert(this, size_before,\n-\t\t\t\t\t_M_hint_used(__pos, __res) ? 0 : 1);\n-\t  return __res;\n+\t    = _Base::emplace_hint(__pos.base(), std::forward<_Args>(__args)...);\n+\t  __profcxx_map2umap_insert(this->_M_map2umap_info,\n+\t\tsize_before, _M_hint_used(__pos.base(), __res) ? 0 : 1);\n+\t  return iterator(__res, this);\n \t}\n #endif\n \n       iterator\n       insert(const value_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_insert(this, this->size(), 1);\n-\treturn _Base::insert(__x);\n+\t__profcxx_map2umap_insert(this->_M_map2umap_info, this->size(), 1);\n+\treturn iterator(_Base::insert(__x), this);\n       }\n \n #if __cplusplus >= 201103L\n@@ -226,8 +260,8 @@ namespace __profile\n \titerator\n \tinsert(_Pair&& __x)\n \t{\n-\t  __profcxx_map_to_unordered_map_insert(this, this->size(), 1);\n-\t  return _Base::insert(std::forward<_Pair>(__x));\n+\t  __profcxx_map2umap_insert(this->_M_map2umap_info, this->size(), 1);\n+\t  return iterator(_Base::insert(std::forward<_Pair>(__x)), this);\n \t}\n #endif\n \n@@ -245,10 +279,10 @@ namespace __profile\n #endif\n       {\n \tsize_type size_before = this->size();\n-\titerator __res = _Base::insert(__pos, __x);\n-\t__profcxx_map_to_unordered_map_insert(this, size_before,\n-\t\t\t\t\t_M_hint_used(__pos, __res) ? 0 : 1);\n-\treturn __res;\n+\t_Base_iterator __res = _Base::insert(__pos.base(), __x);\n+\t__profcxx_map2umap_insert(this->_M_map2umap_info,\n+\t\tsize_before, _M_hint_used(__pos.base(), __res) ? 0 : 1);\n+\treturn iterator(__res, this);\n       }\n \n #if __cplusplus >= 201103L\n@@ -259,19 +293,14 @@ namespace __profile\n \tinsert(const_iterator __pos, _Pair&& __x)\n \t{\n \t  size_type size_before = this->size();\n-\t  auto __res = _Base::insert(__pos, std::forward<_Pair>(__x));\n-\t  __profcxx_map_to_unordered_map_insert(this, size_before,\n-\t\t\t\t\t_M_hint_used(__pos, __res) ? 0 : 1);\n-\t  return __res;\n+\t  auto __res = _Base::insert(__pos.base(), std::forward<_Pair>(__x));\n+\t  __profcxx_map2umap_insert(this->_M_map2umap_info,\n+\t\tsize_before, _M_hint_used(__pos.base(), __res) ? 0 : 1);\n+\t  return iterator(__res, this);\n \t}\n #endif\n \n-#if __cplusplus >= 201103L\n-      template<typename _InputIterator,\n-\t       typename = std::_RequireInputIter<_InputIterator>>\n-#else\n       template<typename _InputIterator>\n-#endif\n \tvoid\n \tinsert(_InputIterator __first, _InputIterator __last)\n \t{\n@@ -283,30 +312,30 @@ namespace __profile\n       iterator\n       erase(const_iterator __pos)\n       {\n-\t__profcxx_map_to_unordered_map_erase(this, this->size(), 1);\n-\treturn _Base::erase(__pos);\n+\t__profcxx_map2umap_erase(this->_M_map2umap_info, this->size(), 1);\n+\treturn iterator(_Base::erase(__pos.base()), this);\n       }\n \n       iterator\n       erase(iterator __pos)\n       {\n-\t__profcxx_map_to_unordered_map_erase(this, this->size(), 1);\n-\treturn _Base::erase(__pos);\n+\t__profcxx_map2umap_erase(this->_M_map2umap_info, this->size(), 1);\n+\treturn iterator(_Base::erase(__pos.base()), this);\n       }\n #else\n       void\n       erase(iterator __pos)\n       {\n-\t__profcxx_map_to_unordered_map_erase(this, this->size(), 1);\n-\t_Base::erase(__pos);\n+\t__profcxx_map2umap_erase(this->_M_map2umap_info, this->size(), 1);\n+\t_Base::erase(__pos.base());\n       }\n #endif\n \n       size_type\n       erase(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_erase(this, this->size(), 1);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_erase(this->_M_map2umap_info, this->size(), 1);\n \treturn _Base::erase(__x);\n       }\n \n@@ -322,7 +351,7 @@ namespace __profile\n \t    return __ret;\n \t  }\n \telse\n-\t  return _Base::erase(__first, __last);\n+\t  return iterator(_Base::erase(__first.base(), __last.base()), this);\n       }\n #else\n       void\n@@ -338,74 +367,91 @@ namespace __profile\n #if __cplusplus >= 201103L\n \tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n #endif\n-      { _Base::swap(__x); }\n+      {\n+\tstd::swap(this->_M_map2umap_info, __x._M_map2umap_info);\n+\t_Base::swap(__x);\n+      }\n+ \n+      void\n+      clear() _GLIBCXX_NOEXCEPT\n+      {\n+\tthis->_M_profile_destruct();\n+\t_Base::clear();\n+\tthis->_M_profile_construct();\n+      }\n \n       // 23.3.1.3 multimap operations:\n       iterator\n       find(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::find(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\treturn iterator(_Base::find(__x), this);\n       }\n \n       const_iterator\n       find(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::find(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\treturn const_iterator(_Base::find(__x), this);\n       }\n \n       size_type\n       count(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n \treturn _Base::count(__x);\n       }\n \n       iterator\n       lower_bound(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::lower_bound(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn iterator(_Base::lower_bound(__x), this);\n       }\n \n       const_iterator\n       lower_bound(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::lower_bound(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_iterator(_Base::lower_bound(__x), this);\n       }\n \n       iterator\n       upper_bound(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::upper_bound(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn iterator(_Base::upper_bound(__x), this);\n       }\n \n       const_iterator\n       upper_bound(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::upper_bound(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_iterator(_Base::upper_bound(__x), this);\n       }\n \n       std::pair<iterator,iterator>\n       equal_range(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::equal_range(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\tstd::pair<_Base_iterator, _Base_iterator> __base_ret\n+\t  = _Base::equal_range(__x);\n+\treturn std::make_pair(iterator(__base_ret.first, this),\n+\t\t\t      iterator(__base_ret.second, this));\n       }\n \n       std::pair<const_iterator,const_iterator>\n       equal_range(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::equal_range(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\tstd::pair<_Base_const_iterator, _Base_const_iterator> __base_ret\n+\t  = _Base::equal_range(__x);\n+\treturn std::make_pair(const_iterator(__base_ret.first, this),\n+\t\t\t      const_iterator(__base_ret.second, this));\n       }\n \n       _Base&\n@@ -422,56 +468,74 @@ namespace __profile\n        * implementation dependent.\n        */\n       bool\n-      _M_hint_used(const_iterator __hint, iterator __res)\n+      _M_hint_used(_Base_const_iterator __hint, _Base_iterator __res)\n       {\n \treturn (__hint == __res\n-\t\t|| (__hint == this->end() && ++__res == this->end())\n-\t\t|| (__hint != this->end() && (++__hint == __res\n-\t\t\t\t\t      || ++__res == --__hint)));\n+\t\t|| (__hint == _M_base().end() && ++__res == _M_base().end())\n+\t\t|| (__hint != _M_base().end() && (++__hint == __res\n+\t\t\t\t\t\t  || ++__res == --__hint)));\n       }\n+\n+      template<typename _K1, typename _T1, typename _C1, typename _A1>\n+        friend bool\n+        operator==(const multimap<_K1, _T1, _C1, _A1>&,\n+\t\t   const multimap<_K1, _T1, _C1, _A1>&);\n+\n+      template<typename _K1, typename _T1, typename _C1, typename _A1>\n+        friend bool\n+        operator<(const multimap<_K1, _T1, _C1, _A1>&,\n+\t\t  const multimap<_K1, _T1, _C1, _A1>&);\n     };\n \n   template<typename _Key, typename _Tp,\n \t   typename _Compare, typename _Allocator>\n     inline bool\n     operator==(const multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n \t       const multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() == __rhs._M_base(); }\n+    {\n+      __profcxx_map2umap_invalidate(__lhs._M_map2umap_info);\n+      __profcxx_map2umap_invalidate(__rhs._M_map2umap_info);\n+      return __lhs._M_base() == __rhs._M_base();\n+    }\n \n   template<typename _Key, typename _Tp,\n \t   typename _Compare, typename _Allocator>\n     inline bool\n-    operator!=(const multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n-\t       const multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() != __rhs._M_base(); }\n+    operator<(const multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t      const multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n+    {\n+      __profcxx_map2umap_invalidate(__lhs._M_map2umap_info);\n+      __profcxx_map2umap_invalidate(__rhs._M_map2umap_info);\n+      return __lhs._M_base() < __rhs._M_base();\n+    }\n \n   template<typename _Key, typename _Tp,\n \t   typename _Compare, typename _Allocator>\n     inline bool\n-    operator<(const multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n-\t      const multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() < __rhs._M_base(); }\n+    operator!=(const multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t       const multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n+    { return !(__lhs == __rhs); }\n \n   template<typename _Key, typename _Tp,\n \t   typename _Compare, typename _Allocator>\n     inline bool\n     operator<=(const multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n \t       const multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() <= __rhs._M_base(); }\n+    { return !(__rhs < __lhs); }\n \n   template<typename _Key, typename _Tp,\n \t   typename _Compare, typename _Allocator>\n     inline bool\n     operator>=(const multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n \t       const multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() >= __rhs._M_base(); }\n+    { return !(__lhs < __rhs); }\n \n   template<typename _Key, typename _Tp,\n \t   typename _Compare, typename _Allocator>\n     inline bool\n     operator>(const multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n \t      const multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() > __rhs._M_base(); }\n+    { return __rhs < __lhs; }\n \n   template<typename _Key, typename _Tp,\n \t   typename _Compare, typename _Allocator>"}, {"sha": "5b2ee926ec12f21faff399883cc9c31d418e3e9e", "filename": "libstdc++-v3/include/profile/multiset.h", "status": "modified", "additions": 158, "deletions": 89, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -45,6 +45,9 @@ namespace __profile\n     {\n       typedef _GLIBCXX_STD_C::multiset<_Key, _Compare, _Allocator> _Base;\n \n+      typedef typename _Base::iterator\t\t\t_Base_iterator;\n+      typedef typename _Base::const_iterator\t\t_Base_const_iterator;\n+\n     public:\n       // types:\n       typedef _Key\t\t\t\t\tkey_type;\n@@ -55,15 +58,15 @@ namespace __profile\n       typedef typename _Base::reference\t\t\treference;\n       typedef typename _Base::const_reference\t\tconst_reference;\n \n-      typedef typename _Base::iterator\t\t\titerator;\n-      typedef typename _Base::const_iterator\t\tconst_iterator;\n-      typedef typename _Base::reverse_iterator\t\treverse_iterator;\n-      typedef typename _Base::const_reverse_iterator\tconst_reverse_iterator;\n+      typedef __iterator_tracker<_Base_iterator,\n+\t\t\t\t multiset>\t\titerator;\n+      typedef __iterator_tracker<_Base_const_iterator,\n+\t\t\t\t multiset>\t\tconst_iterator;\n+      typedef std::reverse_iterator<iterator>\t\treverse_iterator;\n+      typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;\n \n       typedef typename _Base::size_type\t\t\tsize_type;\n       typedef typename _Base::difference_type\t\tdifference_type;\n-      typedef typename _Base::pointer\t\t\tpointer;\n-      typedef typename _Base::const_pointer\t\tconst_pointer;\n \n       // 23.3.3.1 construct/copy/destroy:\n \n@@ -128,7 +131,9 @@ namespace __profile\n       multiset&\n       operator=(const multiset& __x)\n       {\n+\tthis->_M_profile_destruct();\n \t_M_base() = __x;\n+\tthis->_M_profile_construct();\n \treturn *this;\n       }\n #else\n@@ -141,56 +146,94 @@ namespace __profile\n       multiset&\n       operator=(initializer_list<value_type> __l)\n       {\n+\tthis->_M_profile_destruct();\n \t_M_base() = __l;\n+\tthis->_M_profile_construct();\n \treturn *this;\n       }\n #endif\n \n-      // iterators:\n+      // iterators\n+      iterator\n+      begin() _GLIBCXX_NOEXCEPT\n+      { return iterator(_Base::begin(), this); }\n+\n+      const_iterator\n+      begin() const _GLIBCXX_NOEXCEPT\n+      { return const_iterator(_Base::begin(), this); }\n+\n+      iterator\n+      end() _GLIBCXX_NOEXCEPT\n+      { return iterator(_Base::end(), this); }\n+\n+      const_iterator\n+      end() const _GLIBCXX_NOEXCEPT\n+      { return const_iterator(_Base::end(), this); }\n+\n+#if __cplusplus >= 201103L\n+      const_iterator\n+      cbegin() const noexcept\n+      { return const_iterator(_Base::cbegin(), this); }\n+\n+      const_iterator\n+      cend() const noexcept\n+      { return const_iterator(_Base::cend(), this); }\n+#endif\n+\n       reverse_iterator\n       rbegin() _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::rbegin();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn reverse_iterator(end());\n       }\n \n       const_reverse_iterator\n       rbegin() const _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::rbegin();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_reverse_iterator(end());\n       }\n \n       reverse_iterator\n       rend() _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::rend();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn reverse_iterator(begin());\n       }\n \n       const_reverse_iterator\n       rend() const _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::rend();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_reverse_iterator(begin());\n       }\n \n #if __cplusplus >= 201103L\n       const_reverse_iterator\n       crbegin() const noexcept\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::crbegin();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_reverse_iterator(cend());\n       }\n \n       const_reverse_iterator\n       crend() const noexcept\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::crend();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_reverse_iterator(cbegin());\n       }\n #endif\n \n+      void\n+      swap(multiset& __x)\n+#if __cplusplus >= 201103L\n+\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n+#endif\n+      {\n+\t_Base::swap(__x);\n+\tthis->_M_swap(__x);\n+      }\n+\n       // modifiers:\n #if __cplusplus >= 201103L\n       template<typename... _Args>\n@@ -199,58 +242,59 @@ namespace __profile\n \t{\n \t  // The cost is the same whether or not the element is inserted so we\n \t  // always report insertion of 1 element.\n-\t  __profcxx_map_to_unordered_map_insert(this, this->size(), 1);\n-\t  return _Base::emplace(std::forward<_Args>(__args)...);\n+\t  __profcxx_map2umap_insert(this->_M_map2umap_info, this->size(), 1);\n+\t  return iterator(_Base::emplace(std::forward<_Args>(__args)...), this);\n \t}\n \n       template<typename... _Args>\n \titerator\n \templace_hint(const_iterator __pos, _Args&&... __args)\n \t{\n \t  auto size_before = this->size();\n-\t  auto __res = _Base::emplace_hint(__pos, std::forward<_Args>(__args)...);\n-\t  __profcxx_map_to_unordered_map_insert(this, size_before,\n-\t\t\t\t\t_M_hint_used(__pos, __res) ? 0 : 1);\n-\t  return __res;\n+\t  auto __res\n+\t    = _Base::emplace_hint(__pos.base(), std::forward<_Args>(__args)...);\n+\t  __profcxx_map2umap_insert(this->_M_map2umap_info,\n+\t\tsize_before, _M_hint_used(__pos.base(), __res) ? 0 : 1);\n+\t  return iterator(__res, this);\n \t}\n #endif\n \n       iterator\n       insert(const value_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_insert(this, this->size(), 1);\n-\treturn _Base::insert(__x);\n+\t__profcxx_map2umap_insert(this->_M_map2umap_info, this->size(), 1);\n+\treturn iterator(_Base::insert(__x), this);\n       }\n \n #if __cplusplus >= 201103L\n       iterator\n       insert(value_type&& __x)\n       {\n-\t__profcxx_map_to_unordered_map_insert(this, this->size(), 1);\n-\treturn _Base::insert(std::move(__x));\n+\t__profcxx_map2umap_insert(this->_M_map2umap_info, this->size(), 1);\n+\treturn iterator(_Base::insert(std::move(__x)), this);\n       }\n #endif\n \n       iterator\n       insert(const_iterator __pos, const value_type& __x)\n       {\n \tsize_type size_before = this->size();\n-\titerator __res = _Base::insert(__pos, __x);\n+\t_Base_iterator __res = _Base::insert(__pos.base(), __x);\n \t\n-\t__profcxx_map_to_unordered_map_insert(this, size_before,\n-\t\t\t\t\t_M_hint_used(__pos, __res) ? 0 : 1);\n-\treturn __res;\n+\t__profcxx_map2umap_insert(this->_M_map2umap_info,\n+\t\tsize_before, _M_hint_used(__pos.base(), __res) ? 0 : 1);\n+\treturn iterator(__res, this);\n       }\n \n #if __cplusplus >= 201103L\n       iterator\n       insert(const_iterator __pos, value_type&& __x)\n       {\n \tauto size_before = this->size();\n-\tauto __res = _Base::insert(__pos, std::move(__x));\n-\t__profcxx_map_to_unordered_map_insert(this, size_before,\n-\t\t\t\t\t      _M_hint_used(__pos, __res) ? 0 : 1);\n-\treturn __res;\n+\tauto __res = _Base::insert(__pos.base(), std::move(__x));\n+\t__profcxx_map2umap_insert(this->_M_map2umap_info,\n+\t\tsize_before, _M_hint_used(__pos.base(), __res) ? 0 : 1);\n+\treturn iterator(__res, this);\n       }\n #endif\n \n@@ -277,23 +321,23 @@ namespace __profile\n       iterator\n       erase(const_iterator __pos)\n       {\n-\t__profcxx_map_to_unordered_map_erase(this, this->size(), 1);\n-\treturn _Base::erase(__pos);\n+\t__profcxx_map2umap_erase(this->_M_map2umap_info, this->size(), 1);\n+\treturn iterator(_Base::erase(__pos.base()), this);\n       }\n #else\n       void\n       erase(iterator __pos)\n       {\n-\t__profcxx_map_to_unordered_map_erase(this, this->size(), 1);\n-\t_Base::erase(__pos);\n+\t__profcxx_map2umap_erase(this->_M_map2umap_info, this->size(), 1);\n+\t_Base::erase(__pos.base());\n       }\n #endif\n \n       size_type\n       erase(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_erase(this, this->size(), 1);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_erase(this->_M_map2umap_info, this->size(), 1);\n \treturn _Base::erase(__x);\n       }\n \n@@ -309,7 +353,7 @@ namespace __profile\n \t    return __ret;\n \t  }\n \telse\n-\t  return _Base::erase(__first, __last);\n+\t  return iterator(_Base::erase(__first.base(), __last.base()), this);\n       }\n #else\n       void\n@@ -321,85 +365,92 @@ namespace __profile\n #endif\n \n       void\n-      swap(multiset& __x)\n-#if __cplusplus >= 201103L\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n-#endif\n-      { _Base::swap(__x); }\n+      clear() _GLIBCXX_NOEXCEPT\n+      {\n+\tthis->_M_profile_destruct();\n+\t_Base::clear();\n+\tthis->_M_profile_construct();\n+      }\n+ \n+      size_type\n+      count(const key_type& __x) const\n+      {\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\treturn _Base::count(__x);\n+      }\n \n       // multiset operations:\n       iterator\n       find(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::find(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\treturn iterator(_Base::find(__x), this);\n       }\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 214. set::find() missing const overload\n       const_iterator\n       find(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::find(__x);\n-      }\n-\n-      size_type\n-      count(const key_type& __x) const\n-      {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::count(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\treturn const_iterator(_Base::find(__x), this);\n       }\n \n       iterator\n       lower_bound(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::lower_bound(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\treturn iterator(_Base::lower_bound(__x), this);\n       }\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 214. set::find() missing const overload\n       const_iterator\n       lower_bound(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::lower_bound(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_iterator(_Base::lower_bound(__x), this);\n       }\n \n       iterator\n       upper_bound(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::upper_bound(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn iterator(_Base::upper_bound(__x), this);\n       }\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 214. set::find() missing const overload\n       const_iterator\n       upper_bound(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::upper_bound(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_iterator(_Base::upper_bound(__x), this);\n       }\n \n       std::pair<iterator,iterator>\n       equal_range(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::equal_range(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\tstd::pair<_Base_iterator, _Base_iterator> __base_ret\n+\t  = _Base::equal_range(__x);\n+\treturn std::make_pair(iterator(__base_ret.first, this),\n+\t\t\t      iterator(__base_ret.second, this));\n       }\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 214. set::find() missing const overload\n       std::pair<const_iterator,const_iterator>\n       equal_range(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::equal_range(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\tstd::pair<_Base_const_iterator, _Base_const_iterator> __base_ret\n+\t  = _Base::equal_range(__x);\n+\treturn std::make_pair(const_iterator(__base_ret.first, this),\n+\t\t\t      const_iterator(__base_ret.second, this));\n       }\n \n       _Base&\n@@ -416,50 +467,68 @@ namespace __profile\n        * implementation dependent.\n        */\n       bool\n-      _M_hint_used(const_iterator __hint, iterator __res)\n+      _M_hint_used(_Base_const_iterator __hint, _Base_iterator __res)\n       {\n \treturn (__hint == __res\n-\t\t|| (__hint == this->end() && ++__res == this->end())\n-\t\t|| (__hint != this->end() && (++__hint == __res\n-\t\t\t\t\t      || ++__res == --__hint)));\n+\t\t|| (__hint == _M_base().end() && ++__res == _M_base().end())\n+\t\t|| (__hint != _M_base().end() && (++__hint == __res\n+\t\t\t\t\t\t  || ++__res == --__hint)));\n       }\n+\n+      template<typename _K1, typename _C1, typename _A1>\n+        friend bool\n+        operator==(const multiset<_K1, _C1, _A1>&,\n+\t\t   const multiset<_K1, _C1, _A1>&);\n+\n+      template<typename _K1, typename _C1, typename _A1>\n+        friend bool\n+        operator< (const multiset<_K1, _C1, _A1>&,\n+\t\t   const multiset<_K1, _C1, _A1>&);\n     };\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n     operator==(const multiset<_Key, _Compare, _Allocator>& __lhs,\n \t       const multiset<_Key, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() == __rhs._M_base(); }\n+    {\n+      __profcxx_map2umap_invalidate(__lhs._M_map2umap_info);\n+      __profcxx_map2umap_invalidate(__rhs._M_map2umap_info);\n+      return __lhs._M_base() == __rhs._M_base();\n+    }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n-    operator!=(const multiset<_Key, _Compare, _Allocator>& __lhs,\n-\t       const multiset<_Key, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() != __rhs._M_base(); }\n+    operator<(const multiset<_Key, _Compare, _Allocator>& __lhs,\n+\t      const multiset<_Key, _Compare, _Allocator>& __rhs)\n+    {\n+      __profcxx_map2umap_invalidate(__lhs._M_map2umap_info);\n+      __profcxx_map2umap_invalidate(__rhs._M_map2umap_info);\n+      return __lhs._M_base() < __rhs._M_base();\n+    }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n-    operator<(const multiset<_Key, _Compare, _Allocator>& __lhs,\n-\t      const multiset<_Key, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() < __rhs._M_base(); }\n+    operator!=(const multiset<_Key, _Compare, _Allocator>& __lhs,\n+\t       const multiset<_Key, _Compare, _Allocator>& __rhs)\n+    { return !(__lhs == __rhs); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n     operator<=(const multiset<_Key, _Compare, _Allocator>& __lhs,\n \t       const multiset<_Key, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() <= __rhs._M_base(); }\n+    { return !(__rhs < __lhs); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n     operator>=(const multiset<_Key, _Compare, _Allocator>& __lhs,\n \t       const multiset<_Key, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() >= __rhs._M_base(); }\n+    { return !(__lhs < __rhs); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n     operator>(const multiset<_Key, _Compare, _Allocator>& __lhs,\n \t      const multiset<_Key, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() > __rhs._M_base(); }\n+    { return __rhs < __lhs; }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     void"}, {"sha": "0dbacb4a1bff1b9b3b6525f46eabfa1c02111a57", "filename": "libstdc++-v3/include/profile/ordered_base.h", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fordered_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fordered_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fordered_base.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -35,28 +35,63 @@ namespace __profile\n   template<typename _Cont>\n     class _Ordered_profile\n     {\n-      _Cont&\n-      _M_conjure()\n-      { return *static_cast<_Cont*>(this); }\n-\n     public:\n+      void\n+      _M_profile_iterate(int __rewind = 0) const\n+      { __profcxx_map2umap_iterate(this->_M_map2umap_info, __rewind); }\n+\n+    protected:\n       _Ordered_profile() _GLIBCXX_NOEXCEPT\n-      { __profcxx_map_to_unordered_map_construct(&_M_conjure()); }\n+      { _M_profile_construct(); }\n \n #if __cplusplus >= 201103L\n       _Ordered_profile(const _Ordered_profile&) noexcept\n       : _Ordered_profile() { }\n-      _Ordered_profile(_Ordered_profile&&) noexcept\n-      : _Ordered_profile() { }\n+      _Ordered_profile(_Ordered_profile&& __other) noexcept\n+      : _Ordered_profile()\n+      { _M_swap(__other); }\n \n       _Ordered_profile&\n-      operator=(const _Ordered_profile&) = default;\n+      operator=(const _Ordered_profile&) noexcept\n+      {\n+\t_M_profile_destruct();\n+\t_M_profile_construct();\n+      }\n+\n       _Ordered_profile&\n-      operator=(_Ordered_profile&&) = default;\n+      operator=(_Ordered_profile&& __other) noexcept\n+      {\n+\t_M_swap(__other);\n+\t\n+\t__other._M_profile_destruct();\n+\t__other._M_profile_construct();\n+      }\n #endif\n \n       ~_Ordered_profile()\n-      { __profcxx_map_to_unordered_map_destruct(&_M_conjure()); }\n+      { _M_profile_destruct(); }\n+\n+      void\n+      _M_profile_construct() _GLIBCXX_NOEXCEPT\n+      { _M_map2umap_info = __profcxx_map2umap_construct(); }\n+\n+      void\n+      _M_profile_destruct() _GLIBCXX_NOEXCEPT\n+      {\n+\t__profcxx_map2umap_destruct(_M_map2umap_info);\n+\t_M_map2umap_info = 0;\n+      }\n+\n+      void\n+      _M_swap(_Ordered_profile& __other)\n+      { std::swap(_M_map2umap_info, __other._M_map2umap_info); }\n+\n+      __gnu_profile::__map2umap_info* _M_map2umap_info;\n+\n+    private:\n+      _Cont&\n+      _M_conjure()\n+      { return *static_cast<_Cont*>(this); }\n     };\n \n } // namespace __profile"}, {"sha": "bd78e086c45afa6f0fbd7204ebc6a1c4a06ef95d", "filename": "libstdc++-v3/include/profile/set.h", "status": "modified", "additions": 159, "deletions": 95, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -45,9 +45,8 @@ namespace __profile\n     {\n       typedef _GLIBCXX_STD_C::set<_Key, _Compare, _Allocator> _Base;\n \n-#if __cplusplus >= 201103L\n-      typedef __gnu_cxx::__alloc_traits<_Allocator> _Alloc_traits;\n-#endif\n+      typedef typename _Base::iterator\t\t\t_Base_iterator;\n+      typedef typename _Base::const_iterator\t\t_Base_const_iterator;\n \n     public:\n       // types:\n@@ -58,15 +57,14 @@ namespace __profile\n       typedef typename _Base::reference\t\t\treference;\n       typedef typename _Base::const_reference\t\tconst_reference;\n \n-      typedef typename _Base::iterator\t\t\titerator;\n-      typedef typename _Base::const_iterator\t\tconst_iterator;\n-      typedef typename _Base::reverse_iterator\t\treverse_iterator;\n-      typedef typename _Base::const_reverse_iterator\tconst_reverse_iterator;\n+      typedef __iterator_tracker<_Base_iterator, set>\titerator;\n+      typedef __iterator_tracker<_Base_const_iterator,\n+\t\t\t\t set>\t\t\tconst_iterator;\n+      typedef std::reverse_iterator<iterator>\t\treverse_iterator;\n+      typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;\n \n       typedef typename _Base::size_type\t\t\tsize_type;\n       typedef typename _Base::difference_type\t\tdifference_type;\n-      typedef typename _Base::pointer\t\t\tpointer;\n-      typedef typename _Base::const_pointer\t\tconst_pointer;\n \n       // 23.3.3.1 construct/copy/destroy:\n #if __cplusplus < 201103L\n@@ -130,7 +128,9 @@ namespace __profile\n       set&\n       operator=(const set& __x)\n       {\n+\tthis->_M_profile_destruct();\n \t_M_base() = __x;\n+\tthis->_M_profile_construct();\n \treturn *this;\n       }\n #else\n@@ -143,63 +143,104 @@ namespace __profile\n       set&\n       operator=(initializer_list<value_type> __l)\n       {\n+\tthis->_M_profile_destruct();\n \t_M_base() = __l;\n+\tthis->_M_profile_construct();\n \treturn *this;\n       }\n #endif\n \n+      // iterators\n+      iterator\n+      begin() _GLIBCXX_NOEXCEPT\n+      { return iterator(_Base::begin(), this); }\n+\n+      const_iterator\n+      begin() const _GLIBCXX_NOEXCEPT\n+      { return const_iterator(_Base::begin(), this); }\n+\n+      iterator\n+      end() _GLIBCXX_NOEXCEPT\n+      { return iterator(_Base::end(), this); }\n+\n+      const_iterator\n+      end() const _GLIBCXX_NOEXCEPT\n+      { return const_iterator(_Base::end(), this); }\n+\n+#if __cplusplus >= 201103L\n+      const_iterator\n+      cbegin() const noexcept\n+      { return const_iterator(_Base::cbegin(), this); }\n+\n+      const_iterator\n+      cend() const noexcept\n+      { return const_iterator(_Base::cend(), this); }\n+#endif\n+\n       reverse_iterator\n       rbegin() _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::rbegin();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn reverse_iterator(end());\n       }\n \n       const_reverse_iterator\n       rbegin() const _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::rbegin();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_reverse_iterator(end());\n       }\n \n       reverse_iterator\n       rend() _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::rend();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn reverse_iterator(begin());\n       }\n \n       const_reverse_iterator\n       rend() const _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::rend();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_reverse_iterator(begin());\n       }\n \n #if __cplusplus >= 201103L\n       const_reverse_iterator\n       crbegin() const noexcept\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::crbegin();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_reverse_iterator(cend());\n       }\n \n       const_reverse_iterator\n       crend() const noexcept\n       {\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::crend();\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_reverse_iterator(cbegin());\n       }\n #endif\n \n+      void\n+      swap(set& __x)\n+#if __cplusplus >= 201103L\n+\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n+#endif\n+      {\n+\t_Base::swap(__x);\n+\tthis->_M_swap(__x);\n+      }\n+\n       // modifiers:\n #if __cplusplus >= 201103L\n       template<typename... _Args>\n \tstd::pair<iterator, bool>\n \templace(_Args&&... __args)\n \t{\n-\t  __profcxx_map_to_unordered_map_insert(this, this->size(), 1);\n-\t  return _Base::emplace(std::forward<_Args>(__args)...);\n+\t  __profcxx_map2umap_insert(this->_M_map2umap_info, this->size(), 1);\n+\t  auto __base_ret = _Base::emplace(std::forward<_Args>(__args)...);\n+\t  return std::make_pair(iterator(__base_ret.first, this),\n+\t\t\t\t__base_ret.second);\n \t}\n \n       template<typename... _Args>\n@@ -208,51 +249,51 @@ namespace __profile\n \t{\n \t  auto size_before = this->size();\n \t  auto __res\n-\t    = _Base::emplace_hint(__pos, std::forward<_Args>(__args)...);\n-\t  __profcxx_map_to_unordered_map_insert(this, size_before,\n-\t\t\t\t\t_M_hint_used(__pos, __res) ? 0 : 1);\n-\t  return __res;\n+\t    = _Base::emplace_hint(__pos.base(), std::forward<_Args>(__args)...);\n+\t  __profcxx_map2umap_insert(this->_M_map2umap_info,\n+\t\tsize_before, _M_hint_used(__pos.base(), __res) ? 0 : 1);\n+\t  return iterator(__res, this);\n \t}\n #endif\n \n       std::pair<iterator, bool>\n       insert(const value_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_insert(this, this->size(), 1);\n-\treturn _Base::insert(__x);\n+\t__profcxx_map2umap_insert(this->_M_map2umap_info, this->size(), 1);\n+\tstd::pair<_Base_iterator, bool> __base_ret = _Base::insert(__x);\n+\treturn std::make_pair(iterator(__base_ret.first, this),\n+\t\t\t      __base_ret.second);\n       }\n \n #if __cplusplus >= 201103L\n       std::pair<iterator, bool>\n       insert(value_type&& __x)\n       {\n-\t__profcxx_map_to_unordered_map_insert(this, this->size(), 1);\n-\treturn _Base::insert(std::move(__x));\n+\t__profcxx_map2umap_insert(this->_M_map2umap_info, this->size(), 1);\n+\tstd::pair<_Base_iterator, bool> __base_ret\n+\t  = _Base::insert(std::move(__x));\n+\treturn std::make_pair(iterator(__base_ret.first, this),\n+\t\t\t      __base_ret.second);\n       }\n #endif\n \n       iterator\n       insert(const_iterator __pos, const value_type& __x)\n       {\n \tsize_type size_before = this->size();\n-\titerator __res = _Base::insert(__pos, __x);\n-\t__profcxx_map_to_unordered_map_insert(this, size_before,\n-\t\t\t\t\t_M_hint_used(__pos, __res) ? 0 : 1);\n-\treturn __res;\n+\t_Base_iterator __res = _Base::insert(__pos.base(), __x);\n+\t__profcxx_map2umap_insert(this->_M_map2umap_info,\n+\t\tsize_before, _M_hint_used(__pos.base(), __res) ? 0 : 1);\n+\treturn iterator(__res, this);\n       }\n \n #if __cplusplus >= 201103L\n       iterator\n-      insert(const_iterator __position, value_type&& __x)\n-      { return iterator(_Base::insert(__position, std::move(__x))); }\n+      insert(const_iterator __pos, value_type&& __x)\n+      { return iterator(_Base::insert(__pos.base(), std::move(__x)), this); }\n #endif\n \n-#if __cplusplus >= 201103L\n-      template<typename _InputIterator,\n-\t       typename = std::_RequireInputIter<_InputIterator>>\n-#else\n       template<typename _InputIterator>\n-#endif\n \tvoid\n \tinsert(_InputIterator __first, _InputIterator __last)\n \t{\n@@ -270,23 +311,23 @@ namespace __profile\n       iterator\n       erase(const_iterator __pos)\n       {\n-\t__profcxx_map_to_unordered_map_erase(this, this->size(), 1);\n-\treturn _Base::erase(__pos);\n+\t__profcxx_map2umap_erase(this->_M_map2umap_info, this->size(), 1);\n+\treturn iterator(_Base::erase(__pos.base()), this);\n       }\n #else\n       void\n       erase(iterator __pos)\n       {\n-\t__profcxx_map_to_unordered_map_erase(this, this->size(), 1);\n-\t_Base::erase(__pos);\n+\t__profcxx_map2umap_erase(this->_M_map2umap_info, this->size(), 1);\n+\t_Base::erase(__pos.base());\n       }\n #endif\n \n       size_type\n       erase(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_erase(this, this->size(), 1);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_erase(this->_M_map2umap_info, this->size(), 1);\n \treturn _Base::erase(__x);\n       }\n \n@@ -302,7 +343,7 @@ namespace __profile\n \t    return __ret;\n \t  }\n \n-\treturn _Base::erase(__first, __last);\n+\treturn iterator(_Base::erase(__first.base(), __last.base()), this);\n       }\n #else\n       void\n@@ -314,78 +355,85 @@ namespace __profile\n #endif\n \n       void\n-      swap(set& __x)\n-#if __cplusplus >= 201103L\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n-#endif\n-      { _Base::swap(__x); }\n+      clear() _GLIBCXX_NOEXCEPT\n+      {\n+\tthis->_M_profile_destruct();\n+\t_Base::clear();\n+\tthis->_M_profile_construct();\n+      }\n+\n+      size_type\n+      count(const key_type& __x) const\n+      {\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\treturn _Base::count(__x);\n+      }\n \n       // set operations:\n       iterator\n       find(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::find(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\treturn iterator(_Base::find(__x), this);\n       }\n \n       const_iterator\n       find(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::find(__x);\n-      }\n-\n-      size_type\n-      count(const key_type& __x) const\n-      {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::count(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\treturn const_iterator(_Base::find(__x), this);\n       }\n \n       iterator\n       lower_bound(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::lower_bound(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn iterator(_Base::lower_bound(__x), this);\n       }\n \n       const_iterator\n       lower_bound(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::lower_bound(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_iterator(_Base::lower_bound(__x), this);\n       }\n \n       iterator\n       upper_bound(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::upper_bound(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn iterator(_Base::upper_bound(__x), this);\n       }\n \n       const_iterator\n       upper_bound(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\t__profcxx_map_to_unordered_map_invalidate(this);\n-\treturn _Base::upper_bound(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t__profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\treturn const_iterator(_Base::upper_bound(__x), this);\n       }\n \n       std::pair<iterator, iterator>\n       equal_range(const key_type& __x)\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::equal_range(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\tstd::pair<_Base_iterator, _Base_iterator> __base_ret\n+\t  = _Base::equal_range(__x);\n+\treturn std::make_pair(iterator(__base_ret.first, this),\n+\t\t\t      iterator(__base_ret.second, this));\n       }\n \n       std::pair<const_iterator, const_iterator>\n       equal_range(const key_type& __x) const\n       {\n-\t__profcxx_map_to_unordered_map_find(this, this->size());\n-\treturn _Base::equal_range(__x);\n+\t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\tstd::pair<_Base_const_iterator, _Base_const_iterator> __base_ret\n+\t  = _Base::equal_range(__x);\n+\treturn std::make_pair(const_iterator(__base_ret.first, this),\n+\t\t\t      const_iterator(__base_ret.second, this));\n       }\n \n       _Base&\n@@ -402,50 +450,66 @@ namespace __profile\n        * implementation dependent.\n        */\n       bool\n-      _M_hint_used(const_iterator __hint, iterator __res)\n+      _M_hint_used(_Base_const_iterator __hint, _Base_iterator __res)\n       {\n \treturn (__hint == __res\n-\t\t|| (__hint == this->end() && ++__res == this->end())\n-\t\t|| (__hint != this->end() && (++__hint == __res\n-\t\t\t\t\t      || ++__res == --__hint)));\n+\t\t|| (__hint == _M_base().end() && ++__res == _M_base().end())\n+\t\t|| (__hint != _M_base().end() && (++__hint == __res\n+\t\t\t\t\t\t  || ++__res == --__hint)));\n       }\n+\n+      template<typename _K1, typename _C1, typename _A1>\n+\tfriend bool\n+\toperator==(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);\n+\n+      template<typename _K1, typename _C1, typename _A1>\n+\tfriend bool\n+\toperator<(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);\n     };\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n     operator==(const set<_Key, _Compare, _Allocator>& __lhs,\n \t       const set<_Key, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() == __rhs._M_base(); }\n+    {\n+      __profcxx_map2umap_invalidate(__lhs._M_map2umap_info);\n+      __profcxx_map2umap_invalidate(__rhs._M_map2umap_info);\n+      return __lhs._M_base() == __rhs._M_base();\n+    }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n-    operator!=(const set<_Key, _Compare, _Allocator>& __lhs,\n-\t       const set<_Key, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() != __rhs._M_base(); }\n+    operator<(const set<_Key, _Compare, _Allocator>& __lhs,\n+\t      const set<_Key, _Compare, _Allocator>& __rhs)\n+    {\n+      __profcxx_map2umap_invalidate(__lhs._M_map2umap_info);\n+      __profcxx_map2umap_invalidate(__rhs._M_map2umap_info);\n+      return __lhs._M_base() < __rhs._M_base();\n+    }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n-    operator<(const set<_Key, _Compare, _Allocator>& __lhs,\n-\t      const set<_Key, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() < __rhs._M_base(); }\n+    operator!=(const set<_Key, _Compare, _Allocator>& __lhs,\n+\t       const set<_Key, _Compare, _Allocator>& __rhs)\n+    { return !(__lhs == __rhs); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n     operator<=(const set<_Key, _Compare, _Allocator>& __lhs,\n \t       const set<_Key, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() <= __rhs._M_base(); }\n+    { return !(__rhs < __lhs); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n     operator>=(const set<_Key, _Compare, _Allocator>& __lhs,\n \t       const set<_Key, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() >= __rhs._M_base(); }\n+    { return !(__lhs < __rhs); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n     operator>(const set<_Key, _Compare, _Allocator>& __lhs,\n \t      const set<_Key, _Compare, _Allocator>& __rhs)\n-    { return __lhs._M_base() > __rhs._M_base(); }\n+    { return __rhs < __lhs; }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     void"}, {"sha": "0b0bfa5df3209180022380f8f0fc057ab685c03b", "filename": "libstdc++-v3/include/profile/unordered_base.h", "status": "modified", "additions": 63, "deletions": 19, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_base.h?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -154,39 +154,79 @@ namespace __profile\n       using __unique_keys = std::integral_constant<bool, _Unique_keys>;\n \n     protected:\n-      _Unordered_profile()\n-      {\n-\tauto& __uc = _M_conjure();\n-\t__profcxx_hashtable_construct(&__uc, __uc.bucket_count());\n-\t__profcxx_hashtable_construct2(&__uc);\n-      }\n-      _Unordered_profile(const _Unordered_profile&)\n-\t: _Unordered_profile() { }\n-      _Unordered_profile(_Unordered_profile&&)\n+      _Unordered_profile() noexcept\n+      { _M_profile_construct(); }\n+\n+      _Unordered_profile(const _Unordered_profile&) noexcept\n \t: _Unordered_profile() { }\n \n-      ~_Unordered_profile() noexcept\n+      _Unordered_profile(_Unordered_profile&& __other) noexcept\n+\t: _Unordered_profile()\n+      { _M_swap(__other); }\n+\n+      ~_Unordered_profile()\n+      { _M_profile_destruct(); }\n+\n+      _Unordered_profile&\n+      operator=(const _Unordered_profile&) noexcept\n       {\n-\tauto& __uc = _M_conjure();\n-\t__profcxx_hashtable_destruct(&__uc, __uc.bucket_count(), __uc.size());\n+\t// Assignment just reset profiling.\n \t_M_profile_destruct();\n+\t_M_profile_construct();\n       }\n \n       _Unordered_profile&\n-      operator=(const _Unordered_profile&) = default;\n+      operator=(_Unordered_profile&& __other) noexcept\n+      {\n+\t// Take profiling of the moved instance...\n+\t_M_swap(__other);\n \n-      _Unordered_profile&\n-      operator=(_Unordered_profile&&) = default;\n+\t// ...and then reset other instance profiling.\n+\t__other._M_profile_destruct();\n+\t__other._M_profile_construct();\n+      }\n+\n+      void\n+      _M_profile_construct() noexcept\n+      {\n+\tauto& __uc = _M_conjure();\n+\t_M_size_info = __profcxx_hashtable_size_construct(__uc.bucket_count());\n+\t_M_hashfunc_info = __profcxx_hash_func_construct();\n+      }\n \n       void\n-      _M_profile_destruct()\n+      _M_profile_destruct() noexcept\n       {\n-\tif (!__profcxx_inefficient_hash_is_on())\n+\tauto& __uc = _M_conjure();\n+\t__profcxx_hashtable_size_destruct(_M_size_info,\n+\t\t\t\t\t  __uc.bucket_count(), __uc.size());\n+\t_M_size_info = 0;\n+\n+\tif (!_M_hashfunc_info)\n \t  return;\n \n \t_M_profile_destruct(__unique_keys());\n+\t_M_hashfunc_info = 0;\n+      }\n+\n+      void\n+      _M_swap(_Unordered_profile& __other) noexcept\n+      {\n+\tstd::swap(_M_size_info, __other._M_size_info);\n+\tstd::swap(_M_hashfunc_info, __other._M_hashfunc_info);\n       }\n \n+      void\n+      _M_profile_resize(std::size_t __old_size)\n+      {\n+\tauto __new_size = _M_conjure().bucket_count();\n+\tif (__old_size != __new_size)\n+\t  __profcxx_hashtable_size_resize(_M_size_info, __old_size, __new_size);\n+      }\n+\n+      __gnu_profile::__container_size_info* _M_size_info;\n+      __gnu_profile::__hashfunc_info* _M_hashfunc_info;\n+\n     private:\n       void\n       _M_profile_destruct(std::true_type);\n@@ -219,7 +259,9 @@ namespace __profile\n \t      __chain = 0;\n \t    }\n \t}\n-      __profcxx_hashtable_destruct2(&__uc, __lc, __uc.size(), __hops);\n+\n+      __profcxx_hash_func_destruct(_M_hashfunc_info,\n+\t\t\t\t   __lc, __uc.size(), __hops);\n     }\n \n   template<typename _UnorderedCont, bool _Unique_keys>\n@@ -255,7 +297,9 @@ namespace __profile\n \t      __chain = 0;\n \t    }\n \t}\n-      __profcxx_hashtable_destruct2(&__uc, __lc, __unique_size, __hops);\n+\n+      __profcxx_hash_func_destruct(_M_hashfunc_info,\n+\t\t\t\t   __lc, __unique_size, __hops);\n     }\n \n } // namespace __profile"}, {"sha": "46599366fe7e741b8be5936e2409a32acf2b37a2", "filename": "libstdc++-v3/include/profile/unordered_map", "status": "modified", "additions": 40, "deletions": 46, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -76,8 +76,10 @@ namespace __profile\n       typedef typename _Base::iterator\t\titerator;\n       typedef typename _Base::const_iterator\tconst_iterator;\n \n+      unordered_map() = default;\n+\n       explicit\n-      unordered_map(size_type __n = 10,\n+      unordered_map(size_type __n,\n \t\t    const hasher& __hf = hasher(),\n \t\t    const key_equal& __eql = key_equal(),\n \t\t    const allocator_type& __a = allocator_type())\n@@ -126,17 +128,18 @@ namespace __profile\n       unordered_map&\n       operator=(initializer_list<value_type> __l)\n       {\n+\tthis->_M_profile_destruct();\n \t_M_base() = __l;\n+\tthis->_M_profile_construct();\n \treturn *this;\n       }\n \n       void\n       clear() noexcept\n       {\n-\t__profcxx_hashtable_destruct(this, _Base::bucket_count(),\n-\t\t\t\t     _Base::size());\n \tthis->_M_profile_destruct();\n \t_Base::clear();\n+\tthis->_M_profile_construct();\n       }\n \n       template<typename... _Args>\n@@ -146,7 +149,7 @@ namespace __profile\n \t  size_type __old_size = _Base::bucket_count();\n \t  std::pair<iterator, bool> __res\n \t    = _Base::emplace(std::forward<_Args>(__args)...);\n-\t  _M_profile_resize(__old_size);\n+\t  this->_M_profile_resize(__old_size);\n \t  return __res;\n \t}\n \n@@ -157,7 +160,7 @@ namespace __profile\n \t  size_type __old_size = _Base::bucket_count();\n \t  iterator __res\n \t    = _Base::emplace_hint(__it, std::forward<_Args>(__args)...);\n-\t  _M_profile_resize(__old_size);\n+\t  this->_M_profile_resize(__old_size);\n \t  return __res;\n \t}\n \n@@ -166,15 +169,15 @@ namespace __profile\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \t_Base::insert(__l);\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n       }\n \n       std::pair<iterator, bool>\n       insert(const value_type& __obj)\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \tstd::pair<iterator, bool> __res = _Base::insert(__obj);\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n \treturn __res;\n       }\n \n@@ -183,7 +186,7 @@ namespace __profile\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \titerator __res = _Base::insert(__iter, __v);\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n \treturn __res;\n       }\n \n@@ -196,7 +199,7 @@ namespace __profile\n \t  size_type __old_size = _Base::bucket_count();\n \t  std::pair<iterator, bool> __res\n \t    = _Base::insert(std::forward<_Pair>(__obj));\n-\t  _M_profile_resize(__old_size);\n+\t  this->_M_profile_resize(__old_size);\n \t  return __res;\n \t}\n \n@@ -208,7 +211,7 @@ namespace __profile\n \t{\n \t  size_type __old_size = _Base::bucket_count();\n \t  iterator __res = _Base::insert(__iter, std::forward<_Pair>(__v));\n-\t  _M_profile_resize(__old_size);\n+\t  this->_M_profile_resize(__old_size);\n \t  return __res;\n \t}\n \n@@ -218,7 +221,7 @@ namespace __profile\n \t{\n \t  size_type __old_size = _Base::bucket_count();\n \t  _Base::insert(__first, __last);\n-\t  _M_profile_resize(__old_size);\n+\t  this->_M_profile_resize(__old_size);\n \t}\n \n       // operator[]\n@@ -227,7 +230,7 @@ namespace __profile\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \tmapped_type& __res = _M_base()[__k];\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n \treturn __res;\n       }\n \n@@ -236,29 +239,23 @@ namespace __profile\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \tmapped_type& __res = _M_base()[std::move(__k)];\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n \treturn __res;\n       }\n \n       void\n       swap(unordered_map& __x)\n       noexcept( noexcept(__x._M_base().swap(__x)) )\n-      { _Base::swap(__x._M_base()); }\n+      {\n+\t_Base::swap(__x._M_base());\n+\tthis->_M_swap(__x);\n+      }\n \n       void rehash(size_type __n)\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \t_Base::rehash(__n);\n-\t_M_profile_resize(__old_size);\n-      }\n-\n-    private:\n-      void\n-      _M_profile_resize(size_type __old_size)\n-      {\n-\tsize_type __new_size = _Base::bucket_count();\n-\tif (__old_size != __new_size)\n-\t  __profcxx_hashtable_resize(this, __old_size, __new_size);\n+\tthis->_M_profile_resize(__old_size);\n       }\n   };\n \n@@ -321,8 +318,10 @@ namespace __profile\n       typedef typename _Base::iterator\t\titerator;\n       typedef typename _Base::const_iterator\tconst_iterator;\n \n+      unordered_multimap() = default;\n+\n       explicit\n-      unordered_multimap(size_type __n = 10,\n+      unordered_multimap(size_type __n,\n \t\t\t const hasher& __hf = hasher(),\n \t\t\t const key_equal& __eql = key_equal(),\n \t\t\t const allocator_type& __a = allocator_type())\n@@ -371,17 +370,18 @@ namespace __profile\n       unordered_multimap&\n       operator=(initializer_list<value_type> __l)\n       {\n+\tthis->_M_profile_destruct();\n \t_M_base() = __l;\n+\tthis->_M_profile_construct();\n \treturn *this;\n       }\n \n       void\n       clear() noexcept\n       {\n-\t__profcxx_hashtable_destruct(this, _Base::bucket_count(),\n-\t\t\t\t     _Base::size());\n \tthis->_M_profile_destruct();\n \t_Base::clear();\n+\tthis->_M_profile_construct();\n       }\n \n       template<typename... _Args>\n@@ -391,7 +391,7 @@ namespace __profile\n \t  size_type __old_size = _Base::bucket_count();\n \t  iterator __res\n \t    = _Base::emplace(std::forward<_Args>(__args)...);\n-\t  _M_profile_resize(__old_size);\n+\t  this->_M_profile_resize(__old_size);\n \t  return __res;\n \t}\n \n@@ -402,7 +402,7 @@ namespace __profile\n \t  size_type __old_size = _Base::bucket_count();\n \t  iterator __res\n \t    = _Base::emplace_hint(__it, std::forward<_Args>(__args)...);\n-\t  _M_profile_resize(__old_size);\n+\t  this->_M_profile_resize(__old_size);\n \t  return __res;\n \t}\n \n@@ -411,15 +411,15 @@ namespace __profile\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \t_Base::insert(__l);\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n       }\n \n       iterator\n       insert(const value_type& __obj)\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \titerator __res = _Base::insert(__obj);\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n \treturn __res;\n       }\n \n@@ -428,7 +428,7 @@ namespace __profile\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \titerator __res = _Base::insert(__iter, __v);\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n \treturn __res;\n       }\n \n@@ -440,7 +440,7 @@ namespace __profile\n \t{\n \t  size_type __old_size = _Base::bucket_count();\n \t  iterator __res = _Base::insert(std::forward<_Pair>(__obj));\n-\t  _M_profile_resize(__old_size);\n+\t  this->_M_profile_resize(__old_size);\n \t  return __res;\n \t}\n \n@@ -452,7 +452,7 @@ namespace __profile\n \t{\n \t  size_type __old_size = _Base::bucket_count();\n \t  iterator __res = _Base::insert(__iter, std::forward<_Pair>(__v));\n-\t  _M_profile_resize(__old_size);\n+\t  this->_M_profile_resize(__old_size);\n \t  return __res;\n \t}\n \n@@ -462,29 +462,23 @@ namespace __profile\n \t{\n \t  size_type __old_size = _Base::bucket_count();\n \t  _Base::insert(__first, __last);\n-\t  _M_profile_resize(__old_size);\n+\t  this->_M_profile_resize(__old_size);\n \t}\n \n       void\n       swap(unordered_multimap& __x)\n       noexcept( noexcept(__x._M_base().swap(__x)) )\n-      { _Base::swap(__x._M_base()); }\n+      {\n+\t_Base::swap(__x._M_base());\n+\tthis->_M_swap(__x);\n+      }\n \n       void\n       rehash(size_type __n)\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \t_Base::rehash(__n);\n-\t_M_profile_resize(__old_size);\n-      }\n-\n-    private:\n-      void\n-      _M_profile_resize(size_type __old_size)\n-      {\n-\tsize_type __new_size = _Base::bucket_count();\n-\tif (__old_size != __new_size)\n-\t  __profcxx_hashtable_resize(this, __old_size, __new_size);\n+\tthis->_M_profile_resize(__old_size);\n       }\n   };\n "}, {"sha": "d6e3d478e0e7cb713260689c5ddaee2abb25cfc5", "filename": "libstdc++-v3/include/profile/unordered_set", "status": "modified", "additions": 38, "deletions": 44, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -75,8 +75,10 @@ namespace __profile\n       typedef typename _Base::iterator\t\titerator;\n       typedef typename _Base::const_iterator\tconst_iterator;\n \n+      unordered_set() = default;\n+\n       explicit\n-      unordered_set(size_type __n = 10,\n+      unordered_set(size_type __n,\n \t\t    const hasher& __hf = hasher(),\n \t\t    const key_equal& __eql = key_equal(),\n \t\t    const allocator_type& __a = allocator_type())\n@@ -132,22 +134,26 @@ namespace __profile\n       unordered_set&\n       operator=(initializer_list<value_type> __l)\n       {\n+\tthis->_M_profile_destruct();\n \t_M_base() = __l;\n+\tthis->_M_profile_construct();\n \treturn *this;\n       }\n \n       void\n       swap(unordered_set& __x)\n       noexcept( noexcept(__x._M_base().swap(__x)) )\n-      { _Base::swap(__x); }\n+      {\n+\t_Base::swap(__x);\n+\tthis->_M_swap(__x);\n+      }\n \n       void\n       clear() noexcept\n       {\n-\t__profcxx_hashtable_destruct(this, _Base::bucket_count(),\n-\t\t\t\t     _Base::size());\n \tthis->_M_profile_destruct();\n \t_Base::clear();\n+\tthis->_M_profile_construct();\n       }\n \n       template<typename... _Args>\n@@ -157,7 +163,7 @@ namespace __profile\n \t  size_type __old_size = _Base::bucket_count();\n \t  std::pair<iterator, bool> __res\n \t    = _Base::emplace(std::forward<_Args>(__args)...);\n-\t  _M_profile_resize(__old_size);\n+\t  this->_M_profile_resize(__old_size);\n \t  return __res;\n \t}\n \n@@ -168,7 +174,7 @@ namespace __profile\n \t  size_type __old_size = _Base::bucket_count();\n \t  iterator __res\n \t    = _Base::emplace_hint(__it, std::forward<_Args>(__args)...);\n-\t  _M_profile_resize(__old_size);\n+\t  this->_M_profile_resize(__old_size);\n \t  return __res;\n \t}\n \n@@ -177,15 +183,15 @@ namespace __profile\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \t_Base::insert(__l);\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n       }\n \n       std::pair<iterator, bool>\n       insert(const value_type& __obj)\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \tstd::pair<iterator, bool> __res = _Base::insert(__obj);\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n \treturn __res;\n       }\n \n@@ -194,7 +200,7 @@ namespace __profile\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \titerator __res = _Base::insert(__iter, __v);\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n \treturn __res;\n       }\n \n@@ -203,7 +209,7 @@ namespace __profile\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \tstd::pair<iterator, bool> __res = _Base::insert(std::move(__obj));\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n \treturn __res;\n       }\n \n@@ -212,7 +218,7 @@ namespace __profile\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \titerator __res = _Base::insert(__iter, std::move(__v));\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n \treturn __res;\n       }\n \n@@ -222,24 +228,15 @@ namespace __profile\n \t{\n \t  size_type __old_size = _Base::bucket_count();\n \t  _Base::insert(__first, __last);\n-\t  _M_profile_resize(__old_size);\n+\t  this->_M_profile_resize(__old_size);\n \t}\n \n       void\n       rehash(size_type __n)\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \t_Base::rehash(__n);\n-\t_M_profile_resize(__old_size);\n-      }\n-\n-    private:\n-      void\n-      _M_profile_resize(size_type __old_size)\n-      {\n-\tsize_type __new_size = _Base::bucket_count();\n-\tif (__old_size != __new_size)\n-\t  __profcxx_hashtable_resize(this, __old_size, __new_size);\n+\tthis->_M_profile_resize(__old_size);\n       }\n   };\n \n@@ -299,8 +296,10 @@ namespace __profile\n       typedef typename _Base::iterator iterator;\n       typedef typename _Base::const_iterator const_iterator;\n \n+      unordered_multiset() = default;\n+\n       explicit\n-      unordered_multiset(size_type __n = 10,\n+      unordered_multiset(size_type __n,\n \t\t\t const hasher& __hf = hasher(),\n \t\t\t const key_equal& __eql = key_equal(),\n \t\t\t const allocator_type& __a = allocator_type())\n@@ -356,22 +355,26 @@ namespace __profile\n       unordered_multiset&\n       operator=(initializer_list<value_type> __l)\n       {\n+\tthis->_M_profile_destruct();\n \t_M_base() = __l;\n+\tthis->_M_profile_construct();\n \treturn *this;\n       }\n \n       void\n       swap(unordered_multiset& __x)\n       noexcept( noexcept(__x._M_base().swap(__x)) )\n-      { _Base::swap(__x); }\n+      {\n+\t_Base::swap(__x);\n+\tthis->_M_swap(__x);\n+      }\n \n       void\n       clear() noexcept\n       {\n-\t__profcxx_hashtable_destruct(this, _Base::bucket_count(),\n-\t\t\t\t     _Base::size());\n \tthis->_M_profile_destruct();\n \t_Base::clear();\n+\tthis->_M_profile_construct();\n       }\n \n       template<typename... _Args>\n@@ -380,7 +383,7 @@ namespace __profile\n \t{\n \t  size_type __old_size = _Base::bucket_count();\n \t  iterator __res = _Base::emplace(std::forward<_Args>(__args)...);\n-\t  _M_profile_resize(__old_size);\n+\t  this->_M_profile_resize(__old_size);\n \t  return __res;\n \t}\n \n@@ -391,7 +394,7 @@ namespace __profile\n \t  size_type __old_size = _Base::bucket_count();\n \t  iterator __res\n \t    = _Base::emplace_hint(__it, std::forward<_Args>(__args)...);\n-\t  _M_profile_resize(__old_size);\n+\t  this->_M_profile_resize(__old_size);\n \t  return __res;\n \t}\n \n@@ -400,15 +403,15 @@ namespace __profile\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \t_Base::insert(__l);\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n       }\n \n       iterator\n       insert(const value_type& __obj)\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \titerator __res = _Base::insert(__obj);\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n \treturn __res;\n       }\n \n@@ -417,7 +420,7 @@ namespace __profile\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \titerator __res = _Base::insert(__iter, __v);\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n \treturn __res;\n       }\n \n@@ -426,7 +429,7 @@ namespace __profile\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \titerator __res = _Base::insert(std::move(__obj));\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n \treturn __res;\n       }\n \n@@ -435,7 +438,7 @@ namespace __profile\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \titerator __res = _Base::insert(__iter, std::move(__v));\n-\t_M_profile_resize(__old_size);\n+\tthis->_M_profile_resize(__old_size);\n \treturn __res;\n       }\n \n@@ -445,24 +448,15 @@ namespace __profile\n \t{\n \t  size_type __old_size = _Base::bucket_count();\n \t  _Base::insert(__first, __last);\n-\t  _M_profile_resize(__old_size);\n+\t  this->_M_profile_resize(__old_size);\n \t}\n \n       void\n       rehash(size_type __n)\n       {\n \tsize_type __old_size = _Base::bucket_count();\n \t_Base::rehash(__n);\n-\t_M_profile_resize(__old_size);\n-      }\n-\n-    private:\n-      void\n-      _M_profile_resize(size_type __old_size)\n-      {\n-\tsize_type __new_size = _Base::bucket_count();\n-\tif (__old_size != __new_size)\n-\t  __profcxx_hashtable_resize(this, __old_size, __new_size);\n+\tthis->_M_profile_resize(__old_size);\n       }\n    };\n "}, {"sha": "df7f3b5e9b6753626a0efc00826a947bfaced7b3", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 87, "deletions": 45, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -51,20 +51,13 @@ namespace __profile\n       _Vector_profile_pre(_Vector_profile_pre&&) = default;\n \n       _Vector_profile_pre&\n-      operator=(const _Vector_profile_pre&) = default;\n+      operator=(const _Vector_profile_pre&)\n+      { _M_conjure()._M_profile_destruct(); }\n \n       _Vector_profile_pre&\n       operator=(_Vector_profile_pre&&) noexcept\n-      { _M_profile_destruct(); }\n+      { _M_conjure()._M_profile_destruct(); }\n #endif\n-\n-      void\n-      _M_profile_destruct()\n-      {\n-\t__profcxx_vector_destruct2(&_M_conjure());\n-\t__profcxx_vector_destruct(&_M_conjure(),\n-\t\t\t\t  _M_conjure().capacity(), _M_conjure().size());\n-      }\n     };\n \n   template<typename _Vector>\n@@ -75,26 +68,60 @@ namespace __profile\n       { return *static_cast<_Vector*>(this); }\n \n     protected:\n+      __gnu_profile::__container_size_info* _M_size_info;\n+      __gnu_profile::__vector2list_info* _M_vect2list_info;\n+\n       _Vector_profile_post() _GLIBCXX_NOEXCEPT\n-      {\n-\t__profcxx_vector_construct(&_M_conjure(), _M_conjure().capacity());\n-\t__profcxx_vector_construct2(&_M_conjure());\t\n-      }\n+      { _M_profile_construct(); }\n \n #if __cplusplus >= 201103L\n       _Vector_profile_post(const _Vector_profile_post&) noexcept\n       : _Vector_profile_post() { }\n-      _Vector_profile_post(_Vector_profile_post&&) noexcept\n-      : _Vector_profile_post() { }\n+      _Vector_profile_post(_Vector_profile_post&& __other) noexcept\n+      : _Vector_profile_post()\n+      { _M_swap(__other); }\n \n       _Vector_profile_post&\n-      operator=(const _Vector_profile_post&) = default;\n+      operator=(const _Vector_profile_post&) noexcept\n+      { _M_profile_construct(); }\n+\n       _Vector_profile_post&\n-      operator=(_Vector_profile_post&&) = default;\n+      operator=(_Vector_profile_post&& __other) noexcept\n+      {\n+\t_M_swap(__other);\n+\t__other._M_profile_construct();\n+      }\n #endif\n \n       ~_Vector_profile_post()\n       { _M_conjure()._M_profile_destruct(); }\n+\n+    public:\n+      void\n+      _M_profile_construct() _GLIBCXX_NOEXCEPT\n+      {\n+\t_M_size_info =\n+\t  __profcxx_vector_size_construct(_M_conjure().capacity());\n+\t_M_vect2list_info = __profcxx_vector2list_construct();\t\n+      }\n+\n+      void\n+      _M_profile_destruct() _GLIBCXX_NOEXCEPT\n+      {\n+\t__profcxx_vector2list_destruct(_M_vect2list_info);\n+\t_M_vect2list_info = 0;\n+\t__profcxx_vector_size_destruct(_M_size_info,\n+\t\t\t\t       _M_conjure().capacity(),\n+\t\t\t\t       _M_conjure().size());\n+\t_M_size_info = 0;\n+      }\n+\n+      void\n+      _M_swap(_Vector_profile_post& __other) _GLIBCXX_NOEXCEPT\n+      {\n+\tstd::swap(_M_size_info, __other._M_size_info);\n+\tstd::swap(_M_vect2list_info, __other._M_vect2list_info);\n+      }\n     };\n \n   template<typename _Tp,\n@@ -197,7 +224,9 @@ namespace __profile\n       vector&\n       operator=(const vector& __x)\n       {\n+\tthis->_M_profile_destruct();\n \t_M_base() = __x;\n+\tthis->_M_profile_construct();\n \treturn *this;\n       }\n #else\n@@ -210,7 +239,9 @@ namespace __profile\n       vector&\n       operator=(initializer_list<value_type> __l)\n       {\n+\tthis->_M_profile_destruct();\n \t_M_base() = __l;\n+\tthis->_M_profile_construct();\n \treturn *this;\n       }\n #endif\n@@ -272,23 +303,23 @@ namespace __profile\n       void\n       resize(size_type __sz)\n       {\n-\t__profcxx_vector_invalid_operator(this);\n+\t__profcxx_vector2list_invalid_operator(this->_M_vect2list_info);\n \t_M_profile_resize(this->capacity(), __sz);\n \t_Base::resize(__sz);\n       }\n \n       void\n       resize(size_type __sz, const _Tp& __c)\n       {\n-\t__profcxx_vector_invalid_operator(this);\n+\t__profcxx_vector2list_invalid_operator(this->_M_vect2list_info);\n \t_M_profile_resize(this->capacity(), __sz);\n \t_Base::resize(__sz, __c);\n       }\n #else\n       void\n       resize(size_type __sz, _Tp __c = _Tp())\n       {\n-\t__profcxx_vector_invalid_operator(this);\n+\t__profcxx_vector2list_invalid_operator(this->_M_vect2list_info);\n \t_M_profile_resize(this->capacity(), __sz);\n \t_Base::resize(__sz, __c);\n       }\n@@ -298,13 +329,13 @@ namespace __profile\n       reference\n       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_vector_invalid_operator(this);\n+\t__profcxx_vector2list_invalid_operator(this->_M_vect2list_info);\n \treturn _M_base()[__n];\n       }\n       const_reference\n       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n       {\n-\t__profcxx_vector_invalid_operator(this);\n+\t__profcxx_vector2list_invalid_operator(this->_M_vect2list_info);\n \treturn _M_base()[__n];\n       }\n \n@@ -335,8 +366,9 @@ namespace __profile\n       insert(iterator __pos, const _Tp& __x)\n #endif\n       {\n-\t__profcxx_vector_insert(this, __pos.base() - _Base::begin(),\n-\t\t\t\tthis->size());\n+\t__profcxx_vector2list_insert(this->_M_vect2list_info,\n+\t\t\t\t     __pos.base() - _Base::begin(),\n+\t\t\t\t     this->size());\n \tsize_type __old_size = this->capacity();\n \t_Base_iterator __res = _Base::insert(__pos.base(), __x);\n \t_M_profile_resize(__old_size, this->capacity());\n@@ -347,8 +379,9 @@ namespace __profile\n       iterator\n       insert(const_iterator __pos, _Tp&& __x)\n       {\n-\t__profcxx_vector_insert(this, __pos.base() - _Base::cbegin(),\n-\t\t\t\tthis->size());\n+\t__profcxx_vector2list_insert(this->_M_vect2list_info,\n+\t\t\t\t     __pos.base() - _Base::cbegin(),\n+\t\t\t\t     this->size());\n \tsize_type __old_size = this->capacity();\n \t_Base_iterator __res = _Base::insert(__pos.base(), __x);\n \t_M_profile_resize(__old_size, this->capacity());\n@@ -374,14 +407,18 @@ namespace __profile\n #if __cplusplus >= 201103L\n \tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n #endif\n-      { _Base::swap(__x); }\n+      {\n+\t_Base::swap(__x);\n+\tthis->_M_swap(__x);\n+      }\n \n #if __cplusplus >= 201103L\n       iterator\n       insert(const_iterator __pos, size_type __n, const _Tp& __x)\n       {\n-\t__profcxx_vector_insert(this, __pos.base() - _Base::cbegin(),\n-\t\t\t\tthis->size());\n+\t__profcxx_vector2list_insert(this->_M_vect2list_info,\n+\t\t\t\t     __pos.base() - _Base::cbegin(),\n+\t\t\t\t     this->size());\n \tsize_type __old_size = this->capacity();\n \t_Base_iterator __res = _Base::insert(__pos, __n, __x);\n \t_M_profile_resize(__old_size, this->capacity());\n@@ -391,8 +428,9 @@ namespace __profile\n       void\n       insert(iterator __pos, size_type __n, const _Tp& __x)\n       {\n-\t__profcxx_vector_insert(this, __pos.base() - _Base::begin(),\n-\t\t\t\tthis->size());\n+\t__profcxx_vector2list_insert(this->_M_vect2list_info,\n+\t\t\t\t     __pos.base() - _Base::begin(),\n+\t\t\t\t     this->size());\n \tsize_type __old_size = this->capacity();\n \t_Base::insert(__pos, __n, __x);\n \t_M_profile_resize(__old_size, this->capacity());\n@@ -406,8 +444,9 @@ namespace __profile\n \tinsert(const_iterator __pos,\n \t       _InputIterator __first, _InputIterator __last)\n \t{\n-\t  __profcxx_vector_insert(this, __pos.base() - _Base::cbegin(),\n-\t\t\t\t  this->size());\n+\t  __profcxx_vector2list_insert(this->_M_vect2list_info,\n+\t\t\t\t       __pos.base() - _Base::cbegin(),\n+\t\t\t\t       this->size());\n \t  size_type __old_size = this->capacity();\n \t  _Base_iterator __res = _Base::insert(__pos, __first, __last);\n \t  _M_profile_resize(__old_size, this->capacity());\n@@ -419,8 +458,9 @@ namespace __profile\n \tinsert(iterator __pos,\n \t       _InputIterator __first, _InputIterator __last)\n \t{\n-\t  __profcxx_vector_insert(this, __pos.base() - _Base::begin(),\n-\t\t\t\t  this->size());\n+\t  __profcxx_vector2list_insert(this->_M_vect2list_info,\n+\t\t\t\t       __pos.base() - _Base::begin(),\n+\t\t\t\t       this->size());\n \t  size_type __old_size = this->capacity();\n \t  _Base::insert(__pos, __first, __last);\n \t  _M_profile_resize(__old_size, this->capacity());\n@@ -448,21 +488,22 @@ namespace __profile\n       {\n \tthis->_M_profile_destruct();\n \t_Base::clear();\n+\tthis->_M_profile_construct();\n       }\n \n-      inline void _M_profile_find() const\n-      { __profcxx_vector_find(this, this->size()); }\n-\n-      inline void _M_profile_iterate(int __rewind = 0) const\n-      { __profcxx_vector_iterate(this); }\n+      inline void\n+      _M_profile_iterate(int __rewind = 0) const\n+      { __profcxx_vector2list_iterate(this->_M_vect2list_info, __rewind); }\n \n     private:\n       void _M_profile_resize(size_type __old_size, size_type __new_size)\n       {\n \tif (__old_size < __new_size)\n \t  {\n-\t    __profcxx_vector_resize(this, this->size(), __new_size);\n-\t    __profcxx_vector_resize2(this, this->size(), __new_size);\n+\t    __profcxx_vector_size_resize(this->_M_size_info,\n+\t\t\t\t\t this->size(), __new_size);\n+\t    __profcxx_vector2list_resize(this->_M_vect2list_info,\n+\t\t\t\t\t this->size(), __new_size);\n \t  }\n       }\n     };\n@@ -531,8 +572,9 @@ namespace __profile\n     {\n       size_t\n       operator()(const __profile::vector<bool, _Alloc>& __b) const noexcept\n-      { return std::hash<_GLIBCXX_STD_C::vector<bool, _Alloc>>()\n-\t  (__b._M_base()); }\n+      {\n+\treturn std::hash<_GLIBCXX_STD_C::vector<bool, _Alloc>>()(__b._M_base());\n+      }\n     };\n #endif\n "}, {"sha": "9d26a3c49e00d599901a0f24d6a266b8829b0fd9", "filename": "libstdc++-v3/testsuite/ext/profile/replace_new.cc", "status": "renamed", "additions": 19, "deletions": 33, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Freplace_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12db70880b724e80346016579fd6bbddb2b1c2c/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Freplace_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Freplace_new.cc?ref=b12db70880b724e80346016579fd6bbddb2b1c2c", "patch": "@@ -1,7 +1,3 @@\n-// { dg-do compile { target *-*-linux* *-*-gnu* } }\n-// { dg-xfail-if \"\" { uclibc } { \"*\" } { \"\" } }\n-// { dg-require-profile-mode \"\" }\n-\n // -*- C++ -*-\n \n // Copyright (C) 2006-2014 Free Software Foundation, Inc.\n@@ -21,47 +17,37 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#include <stdio.h>\n-#include <malloc.h>\n+// { dg-require-profile-mode \"\" }\n+\n #include <vector>\n \n using std::vector;\n \n-static void my_init_hook (void);\n-static void *my_malloc_hook (size_t, const void *);\n-typedef void* (*malloc_hook) (size_t, const void *);\n-\n-malloc_hook old_malloc_hook;\n-     \n-void (*__malloc_initialize_hook) (void) = my_init_hook;\n-\n-static void\n-my_init_hook (void)\n+void* operator new(std::size_t size) throw(std::bad_alloc)\n {\n-  old_malloc_hook = __malloc_hook;\n-  __malloc_hook = my_malloc_hook;\n+  void* p = std::malloc(size);\n+  if (!p)\n+    throw std::bad_alloc();\n+  return p;\n }\n \n-static void *\n-my_malloc_hook (size_t size, const void *caller)\n+void* operator new (std::size_t size, const std::nothrow_t&) throw()\n {\n-  void *result;\n-  __malloc_hook = old_malloc_hook;\n-  result = malloc (size);\n-  old_malloc_hook = __malloc_hook;\n-\n   // With _GLIBCXX_PROFILE, the instrumentation of the vector constructor\n-  // will call back into malloc.\n+  // will call back into this new operator.\n   vector<int> v;\n+  return std::malloc(size);\n+}\n \n-  __malloc_hook = my_malloc_hook;\n-  return result;\n+void operator delete(void* p) throw()\n+{\n+  if (p)\n+    std::free(p);\n }\n-     \n \n-int main() \n+int\n+main() \n {\n-  int* test = (int*) malloc(sizeof(int));\n-  *test = 1;\n-  return *test;\n+  vector<int> v;\n+  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/ext/profile/mh.cc"}]}