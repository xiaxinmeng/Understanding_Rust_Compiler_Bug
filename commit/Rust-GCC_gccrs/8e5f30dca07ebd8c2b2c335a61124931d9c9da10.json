{"sha": "8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU1ZjMwZGNhMDdlYmQ4YzJiMmMzMzVhNjExMjQ5MzFkOWM5ZGExMA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-05-10T15:45:52Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-05-10T15:45:52Z"}, "message": "re PR target/80687 (VLA usage in libgfortran; nvptx target: \"sorry, unimplemented: target cannot support alloca\")\n\n2017-05-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n        PR fortran/80687\n        PR fortran/80696\n        * m4/matmul_internal.m4:  'matmul_name`:  Always\n        use malloc/free to allocate t1.\n        * generated/matmul_c10.c: Regenerated.\n        * generated/matmul_c16.c: Regenerated.\n        * generated/matmul_c4.c: Regenerated.\n        * generated/matmul_c8.c: Regenerated.\n        * generated/matmul_i1.c: Regenerated.\n        * generated/matmul_i16.c: Regenerated.\n        * generated/matmul_i2.c: Regenerated.\n        * generated/matmul_i4.c: Regenerated.\n        * generated/matmul_i8.c: Regenerated.\n        * generated/matmul_r10.c: Regenerated.\n        * generated/matmul_r16.c: Regenerated.\n        * generated/matmul_r4.c: Regenerated.\n        * generated/matmul_r8.c: Regenerated.\n\nFrom-SVN: r247839", "tree": {"sha": "c52d4c2267ca1cc79cde1031424c102b1329a417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c52d4c2267ca1cc79cde1031424c102b1329a417"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/comments", "author": null, "committer": null, "parents": [{"sha": "a997fff52886be8c59f886376003539634e4781a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a997fff52886be8c59f886376003539634e4781a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a997fff52886be8c59f886376003539634e4781a"}], "stats": {"total": 482, "additions": 218, "deletions": 264}, "files": [{"sha": "720219f2063b4c3be9234c022166c979bc953725", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "patch": "@@ -1,3 +1,23 @@\n+2017-05-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+        PR fortran/80687\n+        PR fortran/80696\n+        * m4/matmul_internal.m4:  'matmul_name`:  Always\n+        use malloc/free to allocate t1.\n+        * generated/matmul_c10.c: Regenerated.\n+        * generated/matmul_c16.c: Regenerated.\n+        * generated/matmul_c4.c: Regenerated.\n+        * generated/matmul_c8.c: Regenerated.\n+        * generated/matmul_i1.c: Regenerated.\n+        * generated/matmul_i16.c: Regenerated.\n+        * generated/matmul_i2.c: Regenerated.\n+        * generated/matmul_i4.c: Regenerated.\n+        * generated/matmul_i8.c: Regenerated.\n+        * generated/matmul_r10.c: Regenerated.\n+        * generated/matmul_r16.c: Regenerated.\n+        * generated/matmul_r4.c: Regenerated.\n+        * generated/matmul_r8.c: Regenerated.\n+\n 2017-05-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/80602"}, {"sha": "e247e8e6817de038de6063bc446f9713334ae067", "filename": "libgfortran/generated/matmul_c10.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c10.c?ref=8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "patch": "@@ -290,6 +290,7 @@ matmul_c10_avx (gfc_array_c10 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_10 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -316,10 +317,7 @@ matmul_c10_avx (gfc_array_c10 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_10 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_10));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -535,6 +533,7 @@ matmul_c10_avx (gfc_array_c10 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -843,6 +842,7 @@ matmul_c10_avx2 (gfc_array_c10 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_10 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -869,10 +869,7 @@ matmul_c10_avx2 (gfc_array_c10 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_10 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_10));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1088,6 +1085,7 @@ matmul_c10_avx2 (gfc_array_c10 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1396,6 +1394,7 @@ matmul_c10_avx512f (gfc_array_c10 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_10 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1422,10 +1421,7 @@ matmul_c10_avx512f (gfc_array_c10 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_10 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_10));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1641,6 +1637,7 @@ matmul_c10_avx512f (gfc_array_c10 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1945,6 +1942,7 @@ matmul_c10_vanilla (gfc_array_c10 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_10 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1971,10 +1969,7 @@ matmul_c10_vanilla (gfc_array_c10 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_10 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_10));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2190,6 +2185,7 @@ matmul_c10_vanilla (gfc_array_c10 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -2552,6 +2548,7 @@ matmul_c10 (gfc_array_c10 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_10 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -2578,10 +2575,7 @@ matmul_c10 (gfc_array_c10 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_10 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_10));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2797,6 +2791,7 @@ matmul_c10 (gfc_array_c10 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)"}, {"sha": "aa27f61ec95f9f2eba16de041e14e0a7bbcb8c9d", "filename": "libgfortran/generated/matmul_c16.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c16.c?ref=8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "patch": "@@ -290,6 +290,7 @@ matmul_c16_avx (gfc_array_c16 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_16 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -316,10 +317,7 @@ matmul_c16_avx (gfc_array_c16 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_16 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_16));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -535,6 +533,7 @@ matmul_c16_avx (gfc_array_c16 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -843,6 +842,7 @@ matmul_c16_avx2 (gfc_array_c16 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_16 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -869,10 +869,7 @@ matmul_c16_avx2 (gfc_array_c16 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_16 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_16));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1088,6 +1085,7 @@ matmul_c16_avx2 (gfc_array_c16 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1396,6 +1394,7 @@ matmul_c16_avx512f (gfc_array_c16 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_16 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1422,10 +1421,7 @@ matmul_c16_avx512f (gfc_array_c16 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_16 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_16));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1641,6 +1637,7 @@ matmul_c16_avx512f (gfc_array_c16 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1945,6 +1942,7 @@ matmul_c16_vanilla (gfc_array_c16 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_16 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1971,10 +1969,7 @@ matmul_c16_vanilla (gfc_array_c16 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_16 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_16));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2190,6 +2185,7 @@ matmul_c16_vanilla (gfc_array_c16 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -2552,6 +2548,7 @@ matmul_c16 (gfc_array_c16 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_16 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -2578,10 +2575,7 @@ matmul_c16 (gfc_array_c16 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_16 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_16));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2797,6 +2791,7 @@ matmul_c16 (gfc_array_c16 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)"}, {"sha": "3b2cd64ab4cc46e6b1ab8c493519cfe96d2b2313", "filename": "libgfortran/generated/matmul_c4.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c4.c?ref=8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "patch": "@@ -290,6 +290,7 @@ matmul_c4_avx (gfc_array_c4 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_4 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -316,10 +317,7 @@ matmul_c4_avx (gfc_array_c4 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_4 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_4));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -535,6 +533,7 @@ matmul_c4_avx (gfc_array_c4 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -843,6 +842,7 @@ matmul_c4_avx2 (gfc_array_c4 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_4 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -869,10 +869,7 @@ matmul_c4_avx2 (gfc_array_c4 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_4 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_4));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1088,6 +1085,7 @@ matmul_c4_avx2 (gfc_array_c4 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1396,6 +1394,7 @@ matmul_c4_avx512f (gfc_array_c4 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_4 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1422,10 +1421,7 @@ matmul_c4_avx512f (gfc_array_c4 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_4 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_4));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1641,6 +1637,7 @@ matmul_c4_avx512f (gfc_array_c4 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1945,6 +1942,7 @@ matmul_c4_vanilla (gfc_array_c4 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_4 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1971,10 +1969,7 @@ matmul_c4_vanilla (gfc_array_c4 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_4 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_4));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2190,6 +2185,7 @@ matmul_c4_vanilla (gfc_array_c4 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -2552,6 +2548,7 @@ matmul_c4 (gfc_array_c4 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_4 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -2578,10 +2575,7 @@ matmul_c4 (gfc_array_c4 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_4 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_4));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2797,6 +2791,7 @@ matmul_c4 (gfc_array_c4 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)"}, {"sha": "89153b2c9cbde853ccabb1e15a29d22e9b3bb0c0", "filename": "libgfortran/generated/matmul_c8.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c8.c?ref=8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "patch": "@@ -290,6 +290,7 @@ matmul_c8_avx (gfc_array_c8 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_8 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -316,10 +317,7 @@ matmul_c8_avx (gfc_array_c8 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_8 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_8));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -535,6 +533,7 @@ matmul_c8_avx (gfc_array_c8 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -843,6 +842,7 @@ matmul_c8_avx2 (gfc_array_c8 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_8 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -869,10 +869,7 @@ matmul_c8_avx2 (gfc_array_c8 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_8 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_8));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1088,6 +1085,7 @@ matmul_c8_avx2 (gfc_array_c8 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1396,6 +1394,7 @@ matmul_c8_avx512f (gfc_array_c8 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_8 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1422,10 +1421,7 @@ matmul_c8_avx512f (gfc_array_c8 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_8 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_8));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1641,6 +1637,7 @@ matmul_c8_avx512f (gfc_array_c8 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1945,6 +1942,7 @@ matmul_c8_vanilla (gfc_array_c8 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_8 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1971,10 +1969,7 @@ matmul_c8_vanilla (gfc_array_c8 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_8 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_8));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2190,6 +2185,7 @@ matmul_c8_vanilla (gfc_array_c8 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -2552,6 +2548,7 @@ matmul_c8 (gfc_array_c8 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_COMPLEX_8 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -2578,10 +2575,7 @@ matmul_c8 (gfc_array_c8 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_COMPLEX_8 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_8));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2797,6 +2791,7 @@ matmul_c8 (gfc_array_c8 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)"}, {"sha": "7a25d890fdd6bd27375804ab41b38e59f2dbdb22", "filename": "libgfortran/generated/matmul_i1.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i1.c?ref=8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "patch": "@@ -290,6 +290,7 @@ matmul_i1_avx (gfc_array_i1 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_1 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -316,10 +317,7 @@ matmul_i1_avx (gfc_array_i1 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_1 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_1));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -535,6 +533,7 @@ matmul_i1_avx (gfc_array_i1 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -843,6 +842,7 @@ matmul_i1_avx2 (gfc_array_i1 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_1 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -869,10 +869,7 @@ matmul_i1_avx2 (gfc_array_i1 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_1 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_1));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1088,6 +1085,7 @@ matmul_i1_avx2 (gfc_array_i1 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1396,6 +1394,7 @@ matmul_i1_avx512f (gfc_array_i1 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_1 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1422,10 +1421,7 @@ matmul_i1_avx512f (gfc_array_i1 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_1 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_1));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1641,6 +1637,7 @@ matmul_i1_avx512f (gfc_array_i1 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1945,6 +1942,7 @@ matmul_i1_vanilla (gfc_array_i1 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_1 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1971,10 +1969,7 @@ matmul_i1_vanilla (gfc_array_i1 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_1 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_1));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2190,6 +2185,7 @@ matmul_i1_vanilla (gfc_array_i1 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -2552,6 +2548,7 @@ matmul_i1 (gfc_array_i1 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_1 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -2578,10 +2575,7 @@ matmul_i1 (gfc_array_i1 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_1 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_1));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2797,6 +2791,7 @@ matmul_i1 (gfc_array_i1 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)"}, {"sha": "a8640047bdda3f374be315468ba0b24e6885bcaf", "filename": "libgfortran/generated/matmul_i16.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i16.c?ref=8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "patch": "@@ -290,6 +290,7 @@ matmul_i16_avx (gfc_array_i16 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_16 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -316,10 +317,7 @@ matmul_i16_avx (gfc_array_i16 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_16 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_16));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -535,6 +533,7 @@ matmul_i16_avx (gfc_array_i16 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -843,6 +842,7 @@ matmul_i16_avx2 (gfc_array_i16 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_16 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -869,10 +869,7 @@ matmul_i16_avx2 (gfc_array_i16 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_16 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_16));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1088,6 +1085,7 @@ matmul_i16_avx2 (gfc_array_i16 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1396,6 +1394,7 @@ matmul_i16_avx512f (gfc_array_i16 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_16 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1422,10 +1421,7 @@ matmul_i16_avx512f (gfc_array_i16 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_16 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_16));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1641,6 +1637,7 @@ matmul_i16_avx512f (gfc_array_i16 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1945,6 +1942,7 @@ matmul_i16_vanilla (gfc_array_i16 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_16 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1971,10 +1969,7 @@ matmul_i16_vanilla (gfc_array_i16 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_16 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_16));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2190,6 +2185,7 @@ matmul_i16_vanilla (gfc_array_i16 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -2552,6 +2548,7 @@ matmul_i16 (gfc_array_i16 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_16 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -2578,10 +2575,7 @@ matmul_i16 (gfc_array_i16 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_16 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_16));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2797,6 +2791,7 @@ matmul_i16 (gfc_array_i16 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)"}, {"sha": "4b8b9f2b3bbde952c3449406deda08b55a1fd6da", "filename": "libgfortran/generated/matmul_i2.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i2.c?ref=8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "patch": "@@ -290,6 +290,7 @@ matmul_i2_avx (gfc_array_i2 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_2 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -316,10 +317,7 @@ matmul_i2_avx (gfc_array_i2 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_2 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_2));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -535,6 +533,7 @@ matmul_i2_avx (gfc_array_i2 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -843,6 +842,7 @@ matmul_i2_avx2 (gfc_array_i2 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_2 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -869,10 +869,7 @@ matmul_i2_avx2 (gfc_array_i2 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_2 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_2));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1088,6 +1085,7 @@ matmul_i2_avx2 (gfc_array_i2 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1396,6 +1394,7 @@ matmul_i2_avx512f (gfc_array_i2 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_2 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1422,10 +1421,7 @@ matmul_i2_avx512f (gfc_array_i2 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_2 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_2));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1641,6 +1637,7 @@ matmul_i2_avx512f (gfc_array_i2 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1945,6 +1942,7 @@ matmul_i2_vanilla (gfc_array_i2 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_2 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1971,10 +1969,7 @@ matmul_i2_vanilla (gfc_array_i2 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_2 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_2));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2190,6 +2185,7 @@ matmul_i2_vanilla (gfc_array_i2 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -2552,6 +2548,7 @@ matmul_i2 (gfc_array_i2 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_2 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -2578,10 +2575,7 @@ matmul_i2 (gfc_array_i2 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_2 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_2));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2797,6 +2791,7 @@ matmul_i2 (gfc_array_i2 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)"}, {"sha": "19f7ad9e3d02323f1ff7b2f32cc210c99e3196fe", "filename": "libgfortran/generated/matmul_i4.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i4.c?ref=8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "patch": "@@ -290,6 +290,7 @@ matmul_i4_avx (gfc_array_i4 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_4 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -316,10 +317,7 @@ matmul_i4_avx (gfc_array_i4 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_4 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_4));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -535,6 +533,7 @@ matmul_i4_avx (gfc_array_i4 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -843,6 +842,7 @@ matmul_i4_avx2 (gfc_array_i4 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_4 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -869,10 +869,7 @@ matmul_i4_avx2 (gfc_array_i4 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_4 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_4));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1088,6 +1085,7 @@ matmul_i4_avx2 (gfc_array_i4 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1396,6 +1394,7 @@ matmul_i4_avx512f (gfc_array_i4 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_4 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1422,10 +1421,7 @@ matmul_i4_avx512f (gfc_array_i4 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_4 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_4));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1641,6 +1637,7 @@ matmul_i4_avx512f (gfc_array_i4 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1945,6 +1942,7 @@ matmul_i4_vanilla (gfc_array_i4 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_4 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1971,10 +1969,7 @@ matmul_i4_vanilla (gfc_array_i4 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_4 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_4));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2190,6 +2185,7 @@ matmul_i4_vanilla (gfc_array_i4 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -2552,6 +2548,7 @@ matmul_i4 (gfc_array_i4 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_4 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -2578,10 +2575,7 @@ matmul_i4 (gfc_array_i4 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_4 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_4));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2797,6 +2791,7 @@ matmul_i4 (gfc_array_i4 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)"}, {"sha": "cbfad6c6bcf09421d957af629e39d83605003c95", "filename": "libgfortran/generated/matmul_i8.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i8.c?ref=8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "patch": "@@ -290,6 +290,7 @@ matmul_i8_avx (gfc_array_i8 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_8 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -316,10 +317,7 @@ matmul_i8_avx (gfc_array_i8 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_8 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_8));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -535,6 +533,7 @@ matmul_i8_avx (gfc_array_i8 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -843,6 +842,7 @@ matmul_i8_avx2 (gfc_array_i8 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_8 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -869,10 +869,7 @@ matmul_i8_avx2 (gfc_array_i8 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_8 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_8));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1088,6 +1085,7 @@ matmul_i8_avx2 (gfc_array_i8 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1396,6 +1394,7 @@ matmul_i8_avx512f (gfc_array_i8 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_8 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1422,10 +1421,7 @@ matmul_i8_avx512f (gfc_array_i8 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_8 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_8));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1641,6 +1637,7 @@ matmul_i8_avx512f (gfc_array_i8 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1945,6 +1942,7 @@ matmul_i8_vanilla (gfc_array_i8 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_8 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1971,10 +1969,7 @@ matmul_i8_vanilla (gfc_array_i8 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_8 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_8));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2190,6 +2185,7 @@ matmul_i8_vanilla (gfc_array_i8 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -2552,6 +2548,7 @@ matmul_i8 (gfc_array_i8 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_INTEGER_8 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -2578,10 +2575,7 @@ matmul_i8 (gfc_array_i8 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_INTEGER_8 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_INTEGER_8));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2797,6 +2791,7 @@ matmul_i8 (gfc_array_i8 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)"}, {"sha": "46bc7feec6b98228baa79d099af222fa57ee1401", "filename": "libgfortran/generated/matmul_r10.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r10.c?ref=8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "patch": "@@ -290,6 +290,7 @@ matmul_r10_avx (gfc_array_r10 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_10 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -316,10 +317,7 @@ matmul_r10_avx (gfc_array_r10 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_10 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_10));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -535,6 +533,7 @@ matmul_r10_avx (gfc_array_r10 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -843,6 +842,7 @@ matmul_r10_avx2 (gfc_array_r10 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_10 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -869,10 +869,7 @@ matmul_r10_avx2 (gfc_array_r10 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_10 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_10));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1088,6 +1085,7 @@ matmul_r10_avx2 (gfc_array_r10 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1396,6 +1394,7 @@ matmul_r10_avx512f (gfc_array_r10 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_10 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1422,10 +1421,7 @@ matmul_r10_avx512f (gfc_array_r10 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_10 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_10));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1641,6 +1637,7 @@ matmul_r10_avx512f (gfc_array_r10 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1945,6 +1942,7 @@ matmul_r10_vanilla (gfc_array_r10 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_10 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1971,10 +1969,7 @@ matmul_r10_vanilla (gfc_array_r10 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_10 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_10));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2190,6 +2185,7 @@ matmul_r10_vanilla (gfc_array_r10 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -2552,6 +2548,7 @@ matmul_r10 (gfc_array_r10 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_10 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -2578,10 +2575,7 @@ matmul_r10 (gfc_array_r10 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_10 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_10));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2797,6 +2791,7 @@ matmul_r10 (gfc_array_r10 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)"}, {"sha": "fc2b37b48c1ed8ede23dac7ececad62faa71cb34", "filename": "libgfortran/generated/matmul_r16.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r16.c?ref=8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "patch": "@@ -290,6 +290,7 @@ matmul_r16_avx (gfc_array_r16 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_16 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -316,10 +317,7 @@ matmul_r16_avx (gfc_array_r16 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_16 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_16));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -535,6 +533,7 @@ matmul_r16_avx (gfc_array_r16 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -843,6 +842,7 @@ matmul_r16_avx2 (gfc_array_r16 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_16 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -869,10 +869,7 @@ matmul_r16_avx2 (gfc_array_r16 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_16 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_16));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1088,6 +1085,7 @@ matmul_r16_avx2 (gfc_array_r16 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1396,6 +1394,7 @@ matmul_r16_avx512f (gfc_array_r16 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_16 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1422,10 +1421,7 @@ matmul_r16_avx512f (gfc_array_r16 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_16 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_16));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1641,6 +1637,7 @@ matmul_r16_avx512f (gfc_array_r16 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1945,6 +1942,7 @@ matmul_r16_vanilla (gfc_array_r16 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_16 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1971,10 +1969,7 @@ matmul_r16_vanilla (gfc_array_r16 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_16 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_16));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2190,6 +2185,7 @@ matmul_r16_vanilla (gfc_array_r16 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -2552,6 +2548,7 @@ matmul_r16 (gfc_array_r16 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_16 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -2578,10 +2575,7 @@ matmul_r16 (gfc_array_r16 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_16 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_16));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2797,6 +2791,7 @@ matmul_r16 (gfc_array_r16 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)"}, {"sha": "53e57d64f5d50f1ca16abc385228bca1d984f008", "filename": "libgfortran/generated/matmul_r4.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r4.c?ref=8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "patch": "@@ -290,6 +290,7 @@ matmul_r4_avx (gfc_array_r4 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_4 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -316,10 +317,7 @@ matmul_r4_avx (gfc_array_r4 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_4 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_4));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -535,6 +533,7 @@ matmul_r4_avx (gfc_array_r4 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -843,6 +842,7 @@ matmul_r4_avx2 (gfc_array_r4 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_4 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -869,10 +869,7 @@ matmul_r4_avx2 (gfc_array_r4 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_4 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_4));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1088,6 +1085,7 @@ matmul_r4_avx2 (gfc_array_r4 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1396,6 +1394,7 @@ matmul_r4_avx512f (gfc_array_r4 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_4 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1422,10 +1421,7 @@ matmul_r4_avx512f (gfc_array_r4 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_4 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_4));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1641,6 +1637,7 @@ matmul_r4_avx512f (gfc_array_r4 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1945,6 +1942,7 @@ matmul_r4_vanilla (gfc_array_r4 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_4 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1971,10 +1969,7 @@ matmul_r4_vanilla (gfc_array_r4 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_4 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_4));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2190,6 +2185,7 @@ matmul_r4_vanilla (gfc_array_r4 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -2552,6 +2548,7 @@ matmul_r4 (gfc_array_r4 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_4 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -2578,10 +2575,7 @@ matmul_r4 (gfc_array_r4 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_4 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_4));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2797,6 +2791,7 @@ matmul_r4 (gfc_array_r4 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)"}, {"sha": "132e536169dc51e386b0c62443627dbd793b86ff", "filename": "libgfortran/generated/matmul_r8.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fgenerated%2Fmatmul_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r8.c?ref=8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "patch": "@@ -290,6 +290,7 @@ matmul_r8_avx (gfc_array_r8 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_8 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -316,10 +317,7 @@ matmul_r8_avx (gfc_array_r8 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_8 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_8));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -535,6 +533,7 @@ matmul_r8_avx (gfc_array_r8 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -843,6 +842,7 @@ matmul_r8_avx2 (gfc_array_r8 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_8 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -869,10 +869,7 @@ matmul_r8_avx2 (gfc_array_r8 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_8 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_8));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1088,6 +1085,7 @@ matmul_r8_avx2 (gfc_array_r8 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1396,6 +1394,7 @@ matmul_r8_avx512f (gfc_array_r8 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_8 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1422,10 +1421,7 @@ matmul_r8_avx512f (gfc_array_r8 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_8 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_8));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -1641,6 +1637,7 @@ matmul_r8_avx512f (gfc_array_r8 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -1945,6 +1942,7 @@ matmul_r8_vanilla (gfc_array_r8 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_8 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -1971,10 +1969,7 @@ matmul_r8_vanilla (gfc_array_r8 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_8 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_8));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2190,6 +2185,7 @@ matmul_r8_vanilla (gfc_array_r8 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)\n@@ -2552,6 +2548,7 @@ matmul_r8 (gfc_array_r8 * const restrict retarray,\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      GFC_REAL_8 *t1;\n \n       a = abase;\n       b = bbase;\n@@ -2578,10 +2575,7 @@ matmul_r8 (gfc_array_r8 * const restrict retarray,\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      GFC_REAL_8 t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof(GFC_REAL_8));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -2797,6 +2791,7 @@ matmul_r8 (gfc_array_r8 * const restrict retarray,\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)"}, {"sha": "5682b78ffe95d6df9d4e2b4be3cce89d12d512a6", "filename": "libgfortran/m4/matmul_internal.m4", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fm4%2Fmatmul_internal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5f30dca07ebd8c2b2c335a61124931d9c9da10/libgfortran%2Fm4%2Fmatmul_internal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmatmul_internal.m4?ref=8e5f30dca07ebd8c2b2c335a61124931d9c9da10", "patch": "@@ -206,6 +206,7 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n \t\t f13, f14, f23, f24, f33, f34, f43, f44;\n       index_type i, j, l, ii, jj, ll;\n       index_type isec, jsec, lsec, uisec, ujsec, ulsec;\n+      'rtype_name` *t1;\n \n       a = abase;\n       b = bbase;\n@@ -232,10 +233,7 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n       if (t1_dim > 65536)\n \tt1_dim = 65536;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-      'rtype_name` t1[t1_dim]; /* was [256][256] */\n-#pragma GCC diagnostic pop\n+      t1 = malloc (t1_dim * sizeof('rtype_name`));\n \n       /* Empty c first.  */\n       for (j=1; j<=n; j++)\n@@ -451,6 +449,7 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n \t\t}\n \t    }\n \t}\n+      free(t1);\n       return;\n     }\n   else if (rxstride == 1 && aystride == 1 && bxstride == 1)"}]}