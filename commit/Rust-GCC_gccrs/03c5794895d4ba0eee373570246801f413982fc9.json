{"sha": "03c5794895d4ba0eee373570246801f413982fc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNjNTc5NDg5NWQ0YmEwZWVlMzczNTcwMjQ2ODAxZjQxMzk4MmZjOQ==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2009-08-14T17:20:30Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2009-08-14T17:20:30Z"}, "message": "inclhack.def (hpux_imaginary_i): New fix.\n\n2009-08-14  Steve Ellcey  <sje@cup.hp.com>\n\n\t* inclhack.def (hpux_imaginary_i): New fix.\n\t* fixincl.x: Regenerate.\n\t* tests/base/complex.h: New file.\n\nFrom-SVN: r150764", "tree": {"sha": "5d60d928c3841d02d87fe814d49a16e1da5380eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d60d928c3841d02d87fe814d49a16e1da5380eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03c5794895d4ba0eee373570246801f413982fc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03c5794895d4ba0eee373570246801f413982fc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03c5794895d4ba0eee373570246801f413982fc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03c5794895d4ba0eee373570246801f413982fc9/comments", "author": null, "committer": null, "parents": [{"sha": "938cfa0f3d54859fa2ec177417f83a64dd10ca6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938cfa0f3d54859fa2ec177417f83a64dd10ca6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/938cfa0f3d54859fa2ec177417f83a64dd10ca6a"}], "stats": {"total": 90, "additions": 85, "deletions": 5}, "files": [{"sha": "edeb1f768af6ac81309d6a78e781d2b0a022d35b", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c5794895d4ba0eee373570246801f413982fc9/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c5794895d4ba0eee373570246801f413982fc9/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=03c5794895d4ba0eee373570246801f413982fc9", "patch": "@@ -1,3 +1,9 @@\n+2009-08-14  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* inclhack.def (hpux_imaginary_i): New fix.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/complex.h: New file.\n+\n 2009-08-12  David Edelsohn  <edelsohn@gnu.org>\n \n \t* inclhack.def (aix_complex): New fix."}, {"sha": "b3521e5ffde314a94f454deb447605a38f3cd364", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c5794895d4ba0eee373570246801f413982fc9/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c5794895d4ba0eee373570246801f413982fc9/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=03c5794895d4ba0eee373570246801f413982fc9", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Saturday August  8, 2009 at 08:07:05 PM EDT\n+ * It has been AutoGen-ed  Thursday August 13, 2009 at 08:49:14 AM PDT\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Sat Aug  8 20:07:05 EDT 2009\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Thu Aug 13 08:49:14 PDT 2009\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 200 fixup descriptions.\n+ * This file contains 201 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -3967,6 +3967,43 @@ static const char* apzHpux_Inttype_Int8_TPatch[] = {\n     \"typedef signed char int8_t;\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Hpux_Imaginary_I fix\n+ */\n+tSCC zHpux_Imaginary_IName[] =\n+     \"hpux_imaginary_i\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zHpux_Imaginary_IList[] =\n+  \"complex.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzHpux_Imaginary_IMachs[] = {\n+        \"ia64-hp-hpux11.*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zHpux_Imaginary_ISelect0[] =\n+       \"^[ \\t]*#[ \\t]*define[ \\t]*_Complex_I.*\";\n+\n+#define    HPUX_IMAGINARY_I_TEST_CT  1\n+static tTestDesc aHpux_Imaginary_ITests[] = {\n+  { TT_EGREP,    zHpux_Imaginary_ISelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Hpux_Imaginary_I\n+ */\n+static const char* apzHpux_Imaginary_IPatch[] = {\n+    \"format\",\n+    \"#  define _Complex_I (__extension__ 1.0iF)\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Huge_Val_Hex fix\n@@ -8128,9 +8165,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          243\n+#define REGEX_COUNT          244\n #define MACH_LIST_SIZE_LIMIT 181\n-#define FIX_COUNT            200\n+#define FIX_COUNT            201\n \n /*\n  *  Enumerate the fixes\n@@ -8232,6 +8269,7 @@ typedef enum {\n     HPUX_STDINT_FAST_FIXIDX,\n     HPUX_INTTYPE_INT_LEAST8_T_FIXIDX,\n     HPUX_INTTYPE_INT8_T_FIXIDX,\n+    HPUX_IMAGINARY_I_FIXIDX,\n     HUGE_VAL_HEX_FIXIDX,\n     HUGE_VALF_HEX_FIXIDX,\n     HUGE_VALL_HEX_FIXIDX,\n@@ -8819,6 +8857,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      HPUX_INTTYPE_INT8_T_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aHpux_Inttype_Int8_TTests,   apzHpux_Inttype_Int8_TPatch, 0 },\n \n+  {  zHpux_Imaginary_IName,    zHpux_Imaginary_IList,\n+     apzHpux_Imaginary_IMachs,\n+     HPUX_IMAGINARY_I_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aHpux_Imaginary_ITests,   apzHpux_Imaginary_IPatch, 0 },\n+\n   {  zHuge_Val_HexName,    zHuge_Val_HexList,\n      apzHuge_Val_HexMachs,\n      HUGE_VAL_HEX_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "ba3048661eba0342b39e6c5b7df4dc73439c8d31", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c5794895d4ba0eee373570246801f413982fc9/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c5794895d4ba0eee373570246801f413982fc9/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=03c5794895d4ba0eee373570246801f413982fc9", "patch": "@@ -2131,6 +2131,16 @@ fix = {\n     test_text =\"typedef char int8_t;\\n\";\n };\n \n+fix = {\n+    hackname  = hpux_imaginary_i;\n+    mach      = \"ia64-hp-hpux11.*\";\n+    files     = complex.h;\n+    select    = \"^[ \\t]*#[ \\t]*define[ \\t]*_Complex_I.*\";\n+    c_fix     = format;\n+    c_fix_arg = \"#  define _Complex_I (__extension__ 1.0iF)\";\n+    test_text = \"#  define _Complex_I (0.f+_Imaginary_I)\\n\";\n+};\n+\n /*\n  *  Fix glibc definition of HUGE_VAL in terms of hex floating point constant\n  */"}, {"sha": "c1447d4f3cd5e32a24dcb115c1cdab9a0cbc55d4", "filename": "fixincludes/tests/base/complex.h", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c5794895d4ba0eee373570246801f413982fc9/fixincludes%2Ftests%2Fbase%2Fcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c5794895d4ba0eee373570246801f413982fc9/fixincludes%2Ftests%2Fbase%2Fcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fcomplex.h?ref=03c5794895d4ba0eee373570246801f413982fc9", "patch": "@@ -0,0 +1,21 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/complex.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( AIX_COMPLEX_CHECK )\n+#  define _Complex_I (__extension__ 1.0iF)\n+#define I _Complex_I\n+#endif  /* AIX_COMPLEX_CHECK */\n+\n+\n+#if defined( HPUX_IMAGINARY_I_CHECK )\n+#  define _Complex_I (__extension__ 1.0iF)\n+\n+#endif  /* HPUX_IMAGINARY_I_CHECK */"}]}