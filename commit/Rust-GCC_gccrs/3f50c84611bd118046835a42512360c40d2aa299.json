{"sha": "3f50c84611bd118046835a42512360c40d2aa299", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y1MGM4NDYxMWJkMTE4MDQ2ODM1YTQyNTEyMzYwYzQwZDJhYTI5OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-11-18T18:11:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-11-18T18:11:32Z"}, "message": "re PR c++/37962 (ICE with (auto*) casts)\n\n        PR c++/37962\ncp/\n        * parser.c (cp_parser_type_id): Complain about auto.\n        * decl.c (grokdeclarator): Complain about parameters and\n        conversion functions declared with auto.\n        * call.c (standard_conversion): Use CLASS_TYPE_P instead of\n        MAYBE_CLASS_TYPE_P.\n        * cp-tree.h (TYPE_NON_AGGREGATE_CLASS): Likewise.\ntestsuite/\n        * g++.dg/cpp0x/auto[38].C: Adjust expected errors.\n        * g++.dg/cpp0x/auto9.C: New test.\n        * g++.dg/cpp0x/auto10.C: New test.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r141970", "tree": {"sha": "8602d347fb3d3d55d2e49fb14e9f56ed321f7a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8602d347fb3d3d55d2e49fb14e9f56ed321f7a29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f50c84611bd118046835a42512360c40d2aa299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f50c84611bd118046835a42512360c40d2aa299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f50c84611bd118046835a42512360c40d2aa299", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f50c84611bd118046835a42512360c40d2aa299/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43db6c722af049642c4dd9e504f32cfca668c940", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43db6c722af049642c4dd9e504f32cfca668c940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43db6c722af049642c4dd9e504f32cfca668c940"}], "stats": {"total": 208, "additions": 195, "deletions": 13}, "files": [{"sha": "4353263eabad1682c7f2f6933b4b93ddbceb53fb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3f50c84611bd118046835a42512360c40d2aa299", "patch": "@@ -1,3 +1,15 @@\n+2008-11-18  Jason Merrill  <jason@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\t\n+\tPR c++/37962\n+\t* parser.c (cp_parser_type_id): Complain about auto.\n+\t* decl.c (grokdeclarator): Complain about parameters and\n+\tconversion functions declared with auto.\n+\n+\t* call.c (standard_conversion): Use CLASS_TYPE_P instead of\n+\tMAYBE_CLASS_TYPE_P.\n+\t* cp-tree.h (TYPE_NON_AGGREGATE_CLASS): Likewise.\n+\n 2008-11-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/36089"}, {"sha": "af3fd991f61db339532508225fc3d49b7a281d5c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3f50c84611bd118046835a42512360c40d2aa299", "patch": "@@ -814,8 +814,8 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n \t  else if (!same_type_p (fbase, tbase))\n \t    return NULL;\n \t}\n-      else if (MAYBE_CLASS_TYPE_P (TREE_TYPE (from))\n-\t       && MAYBE_CLASS_TYPE_P (TREE_TYPE (to))\n+      else if (CLASS_TYPE_P (TREE_TYPE (from))\n+\t       && CLASS_TYPE_P (TREE_TYPE (to))\n \t       /* [conv.ptr]\n \n \t\t  An rvalue of type \"pointer to cv D,\" where D is a"}, {"sha": "9f10ed17c34d174ac7b3cf0b76b9629304436991", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3f50c84611bd118046835a42512360c40d2aa299", "patch": "@@ -2824,7 +2824,7 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define CLASSTYPE_NON_AGGREGATE(NODE) \\\n   (LANG_TYPE_CLASS_CHECK (NODE)->non_aggregate)\n #define TYPE_NON_AGGREGATE_CLASS(NODE) \\\n-  (MAYBE_CLASS_TYPE_P (NODE) && CLASSTYPE_NON_AGGREGATE (NODE))\n+  (CLASS_TYPE_P (NODE) && CLASSTYPE_NON_AGGREGATE (NODE))\n \n /* Nonzero if there is a user-defined X::op=(x&) for this class.  */\n #define TYPE_HAS_COMPLEX_ASSIGN_REF(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->has_complex_assign_ref)"}, {"sha": "997c580038cedef482c5756ddd5bccdd5e65ad7e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3f50c84611bd118046835a42512360c40d2aa299", "patch": "@@ -8053,6 +8053,12 @@ grokdeclarator (const cp_declarator *declarator,\n \t       || storage_class == sc_extern\n \t       || thread_p)\n \terror (\"storage class specifiers invalid in parameter declarations\");\n+\n+      if (type_uses_auto (type))\n+\t{\n+\t  error (\"parameter declared %<auto%>\");\n+\t  type = error_mark_node;\n+\t}\n     }\n \n   /* Give error if `virtual' is used outside of class declaration.  */\n@@ -8246,23 +8252,29 @@ grokdeclarator (const cp_declarator *declarator,\n \t      {\n \t\tif (type_uses_auto (type))\n \t\t  {\n-\t\t    if (!declarator->u.function.late_return_type)\n+\t\t    if (sfk == sfk_conversion)\n+\t\t      {\n+\t\t\terror (\"invalid use of %<auto%> in conversion operator\");\n+\t\t\treturn error_mark_node;\n+\t\t      }\n+\t\t    else if (!declarator->u.function.late_return_type)\n \t\t      {\n-\t\t\terror (\"%qs function uses auto type specifier without\"\n+\t\t\terror (\"%qs function uses %<auto%> type specifier without\"\n \t\t\t       \" late return type\", name);\n \t\t\treturn error_mark_node;\n \t\t      }\n \t\t    else if (!is_auto (type))\n \t\t      {\n-\t\t\terror (\"%qs function with late return type not using\"\n-\t\t\t       \" auto type specifier as its type\", name);\n+\t\t\terror (\"%qs function with late return type has\"\n+\t\t\t       \" %qT as its type rather than plain %<auto%>\",\n+\t\t\t       name, type);\n \t\t\treturn error_mark_node;\n \t\t      }\n \t\t  }\n \t\telse if (declarator->u.function.late_return_type)\n \t\t  {\n \t\t    error (\"%qs function with late return type not declared\"\n-\t\t\t   \" with auto type specifier\", name);\n+\t\t\t   \" with %<auto%> type specifier\", name);\n \t\t    return error_mark_node;\n \t\t  }\n \t      }"}, {"sha": "5c1f849a60783b5b56b704c26fb4f22f1073beb0", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3f50c84611bd118046835a42512360c40d2aa299", "patch": "@@ -13693,6 +13693,13 @@ cp_parser_type_id (cp_parser* parser)\n   if (!cp_parser_parse_definitely (parser))\n     abstract_declarator = NULL;\n \n+  if (type_specifier_seq.type\n+      && type_uses_auto (type_specifier_seq.type))\n+    {\n+      error (\"invalid use of %<auto%>\");\n+      return error_mark_node;\n+    }\n+  \n   return groktypename (&type_specifier_seq, abstract_declarator);\n }\n "}, {"sha": "8ed4c3b9b752024d5586c104fb8e9d024dd4c413", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f50c84611bd118046835a42512360c40d2aa299", "patch": "@@ -1,3 +1,11 @@\n+2008-11-18  Jason Merrill  <jason@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/37962\n+\t* g++.dg/cpp0x/auto[38].C: Adjust expected errors.\n+\t* g++.dg/cpp0x/auto9.C: New test.\n+\t* g++.dg/cpp0x/auto10.C: New test.\n+\n 2008-11-17  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* gcc.c-torture/execute/20081117-1.c: New test."}, {"sha": "9b89291d6404ac40055cd2af3c081843d4af78c0", "filename": "gcc/testsuite/g++.dg/cpp0x/auto10.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto10.C?ref=3f50c84611bd118046835a42512360c40d2aa299", "patch": "@@ -0,0 +1,22 @@\n+// Positive test for auto\n+// { dg-do run }\n+// { dg-options \"-std=c++0x\" }\n+\n+#include <typeinfo>\n+extern \"C\" void abort();\n+\n+int main()\n+{\n+  if (auto i = 42L)\n+    {\n+      if (typeid (i) != typeid (long int))\n+\tabort ();\n+    }\n+\n+  while (auto i = 1)\n+    {\n+      if (typeid (i) != typeid (int))\n+\tabort ();\n+      break;\n+    }\n+}"}, {"sha": "3cea856e601fe6a3116f3afb918629ecf5f058d9", "filename": "gcc/testsuite/g++.dg/cpp0x/auto3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C?ref=3f50c84611bd118046835a42512360c40d2aa299", "patch": "@@ -17,7 +17,7 @@ struct A { };\n \n A<int> A1;\n // CWG issue 625\n-A<auto> A2 = A1;\t\t// { dg-error \"auto\" }\n+A<auto> A2 = A1;\t\t// { dg-error \"\" }\n \n auto foo() { }\t\t\t// { dg-error \"auto\" }\n "}, {"sha": "e45204fe715f593785a1964e353a627b72c621b3", "filename": "gcc/testsuite/g++.dg/cpp0x/auto8.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto8.C?ref=3f50c84611bd118046835a42512360c40d2aa299", "patch": "@@ -4,13 +4,13 @@\n \n auto f1 () -> int;\n auto f2 ();\t\t// { dg-error \"without late return type\" }\n-int f3 () -> int;\t// { dg-error \"with auto type specifier\" }\n-auto *f4 () -> int;\t// { dg-error \"not using auto\" }\n+int f3 () -> int;\t// { dg-error \"late return type\" }\n+auto *f4 () -> int;\t// { dg-error \"late return type\" }\n \n struct A\n {\n   auto f5 () const -> int;\n   auto f6 ();\t\t// { dg-error \"without late return type\" }\n-  int f7 () -> int;\t// { dg-error \"with auto type specifier\" }\n-  auto *f8 () -> int;\t// { dg-error \"not using auto\" }\n+  int f7 () -> int;\t// { dg-error \"late return type\" }\n+  auto *f8 () -> int;\t// { dg-error \"late return type\" }\n };"}, {"sha": "7dcf4872d3e208ce331e3cb920662f9263c83d8e", "filename": "gcc/testsuite/g++.dg/cpp0x/auto9.C", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f50c84611bd118046835a42512360c40d2aa299/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C?ref=3f50c84611bd118046835a42512360c40d2aa299", "patch": "@@ -0,0 +1,121 @@\n+// PR c++/37962\n+// Negative test for auto\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+#include <typeinfo>\n+#include <stdarg.h>\n+#include <stddef.h>\n+\n+int i = *(auto *) 0;\t\t\t\t// { dg-error \"auto\" }\n+struct A *p = (auto *) 0;\t\t\t// { dg-error \"auto\" }\n+int *q = static_cast <auto *>(0);\t\t// { dg-error \"auto\" }\n+const int *r = const_cast <auto *>(q);\t\t// { dg-error \"auto\" }\n+const std::type_info &t1 = typeid (auto);\t// { dg-error \"auto\" }\n+const std::type_info &t2 = typeid (auto *);\t// { dg-error \"auto\" }\n+\n+struct A\n+{\n+  operator auto ();\t\t\t\t// { dg-error \"auto\" }\n+  operator auto *();\t\t\t\t// { dg-error \"auto\" }\n+};\n+\n+struct A2\n+{\n+  operator auto () -> int;\t\t\t// { dg-error \"invalid use of\" }\n+  operator auto *() -> int;\t\t\t// { dg-error \"auto\" }\n+};\n+\n+template <typename> struct B\n+{\n+  enum { e };\n+};\n+\n+template <typename T> struct C\n+{\n+  C () : i () {}\n+  int i;\n+};\n+\n+bool d = (auto (A::*)()) 0;\t\t\t// { dg-error \"auto\" }\n+\n+void\n+foo ()\n+{\n+  (auto) { 0 };\t\t\t\t\t// { dg-error \"auto\" }\n+  C<int> c;\n+  dynamic_cast<auto> (c);\t\t\t// { dg-error \"auto\" }\n+  reinterpret_cast<auto> (c);\t\t\t// { dg-error \"auto\" }\n+  int i = auto (0);\t\t\t\t// { dg-error \"auto\" }\n+  auto p1 = new (auto);\t\t\t\t// { dg-error \"auto\" }\n+  auto p2 = new (auto) (42);\t\t\t// { dg-error \"invalid use of|deduce\" }\n+  offsetof (auto, fld);\t\t\t\t// { dg-error \"auto\" }\n+  offsetof (auto *, fld);\t\t\t// { dg-error \"auto\" }\n+  sizeof (auto);\t\t\t\t// { dg-error \"auto\" }\n+  sizeof (auto *);\t\t\t\t// { dg-error \"auto\" }\n+}\n+\n+void\n+foo2 (void)\n+{\n+  __alignof__ (auto);\t\t\t\t// { dg-error \"auto\" }\n+  __alignof__ (auto *);\t\t\t\t// { dg-error \"auto\" }\n+  __typeof__ (auto) v1;\t\t\t\t// { dg-error \"auto\" }\n+  __typeof__ (auto *) v2;\t\t\t// { dg-error \"auto\" }\n+  __is_class (auto);\t\t\t\t// { dg-error \"auto|expected\" }\n+  __is_pod (auto *);\t\t\t\t// { dg-error \"auto|expected\" }\n+  __is_base_of (int, auto);\t\t\t// { dg-error \"auto|expected\" }\n+  __is_base_of (auto, int);\t\t\t// { dg-error \"auto|expected\" }\n+  __is_base_of (auto, auto *);\t\t\t// { dg-error \"auto|expected\" }\n+}\n+\n+B<auto> b;\t\t\t\t\t// { dg-error \"auto|invalid\" }\n+C<auto> c;\t\t\t\t\t// { dg-error \"auto|invalid\" }\n+C<auto *> c2;\t\t\t\t\t// { dg-error \"auto|invalid\" }\n+\n+enum : auto { EE = 0 };\t\t\t\t// { dg-error \"must be an integral type\" }\n+enum struct D : auto * { FF = 0 };\t\t// { dg-error \"declar|expected\" }\n+\n+void\n+bar ()\n+{\n+  try { } catch (auto i) { }\t\t\t// { dg-error \"invalid use of\" }\n+  try { } catch (auto) { }\t\t\t// { dg-error \"invalid use of\" }\n+  try { } catch (auto *i) { }\t\t\t// { dg-error \"invalid use of\" }\n+  try { } catch (auto *) { }\t\t\t// { dg-error \"invalid use of\" }\n+}\n+\n+void\n+baz (int i, ...)\n+{\n+  va_list ap;\n+  va_start (ap, i);\n+  va_arg (ap, auto);\t\t\t\t// { dg-error \"invalid use of\" }\n+  va_arg (ap, auto *);\t\t\t\t// { dg-error \"invalid use of|expected\" }\n+  va_arg (ap, auto &);\t\t\t\t// { dg-error \"invalid use of|expected\" }\n+  va_end (ap);\n+}\n+\n+template <typename T = auto> struct E {};\t// { dg-error \"invalid use of\" }\n+template <class T = auto *> struct F {};\t// { dg-error \"invalid use of|expected\" }\n+\n+auto fnlate () -> auto;\t\t\t\t// { dg-error \"invalid use of\" }\n+auto fnlate2 () -> auto *;\t\t\t// { dg-error \"invalid use of|expected\" }\n+\n+void\n+badthrow () throw (auto)\t\t\t// { dg-error \"invalid use of\" }\n+{\n+}\n+\n+void\n+badthrow2 () throw (auto &)\t\t\t// { dg-error \"invalid use of|expected\" }\n+{\n+}\n+\n+template <auto V = 4> struct G {};\t\t// { dg-error \"auto\" }\n+\n+template <typename T> struct H { H (); ~H (); };\n+H<auto> h;\t\t\t\t\t// { dg-error \"invalid\" }\n+\n+void qq (auto);\t\t\t// { dg-error \"auto\" }\n+void qr (auto*);\t\t// { dg-error \"auto\" }"}]}