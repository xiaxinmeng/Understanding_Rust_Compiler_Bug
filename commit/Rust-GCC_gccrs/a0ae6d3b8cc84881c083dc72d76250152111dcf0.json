{"sha": "a0ae6d3b8cc84881c083dc72d76250152111dcf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBhZTZkM2I4Y2M4NDg4MWMwODNkYzcyZDc2MjUwMTUyMTExZGNmMA==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-07-01T12:38:20Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-07-01T12:38:20Z"}, "message": "stmt.c (check_seenlabel): Remove.\n\n\t* stmt.c (check_seenlabel): Remove.\n\t(pushcase, pushcase_range, expand_end_case_type): Don't call it.\n\nFrom-SVN: r83977", "tree": {"sha": "7fe3c33b1e87525123cc38e73b52459836a24082", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fe3c33b1e87525123cc38e73b52459836a24082"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0ae6d3b8cc84881c083dc72d76250152111dcf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0ae6d3b8cc84881c083dc72d76250152111dcf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0ae6d3b8cc84881c083dc72d76250152111dcf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0ae6d3b8cc84881c083dc72d76250152111dcf0/comments", "author": null, "committer": null, "parents": [{"sha": "b79c52841bdf69b9788387c9d835d854de09dcb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b79c52841bdf69b9788387c9d835d854de09dcb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b79c52841bdf69b9788387c9d835d854de09dcb5"}], "stats": {"total": 63, "additions": 5, "deletions": 58}, "files": [{"sha": "c52796b1368de2a6bbd9803302b55b1c93adb5e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ae6d3b8cc84881c083dc72d76250152111dcf0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ae6d3b8cc84881c083dc72d76250152111dcf0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0ae6d3b8cc84881c083dc72d76250152111dcf0", "patch": "@@ -1,3 +1,8 @@\n+2004-07-01  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* stmt.c (check_seenlabel): Remove.\n+\t(pushcase, pushcase_range, expand_end_case_type): Don't call it.\n+\n 2004-07-01  Richard Henderson  <rth@redhat.com>\n \n \t* function.h (struct function): Remove x_function_call_count."}, {"sha": "41f468de01f1ae5a1841eae452950e2a7f258625", "filename": "gcc/stmt.c", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ae6d3b8cc84881c083dc72d76250152111dcf0/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ae6d3b8cc84881c083dc72d76250152111dcf0/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=a0ae6d3b8cc84881c083dc72d76250152111dcf0", "patch": "@@ -383,7 +383,6 @@ static enum br_predictor return_prediction (rtx);\n static rtx shift_return_value (rtx);\n static void expand_value_return (rtx);\n static void expand_cleanups (tree, int, int);\n-static void check_seenlabel (void);\n static void do_jump_if_equal (rtx, rtx, rtx, int);\n static int estimate_case_costs (case_node_ptr);\n static bool same_case_target_p (rtx, rtx);\n@@ -3823,50 +3822,6 @@ expand_start_case (int exit_flag, tree expr, tree type,\n \n   start_cleanup_deferral ();\n }\n-\f\n-static void\n-check_seenlabel (void)\n-{\n-  /* If this is the first label, warn if any insns have been emitted.  */\n-  if (case_stack->data.case_stmt.line_number_status >= 0)\n-    {\n-      rtx insn;\n-\n-      restore_line_number_status\n-\t(case_stack->data.case_stmt.line_number_status);\n-      case_stack->data.case_stmt.line_number_status = -1;\n-\n-      for (insn = case_stack->data.case_stmt.start;\n-\t   insn;\n-\t   insn = NEXT_INSN (insn))\n-\t{\n-\t  if (GET_CODE (insn) == CODE_LABEL)\n-\t    break;\n-\t  if (GET_CODE (insn) != NOTE\n-\t      && (GET_CODE (insn) != INSN || GET_CODE (PATTERN (insn)) != USE))\n-\t    {\n-\t      do\n-\t\tinsn = PREV_INSN (insn);\n-\t      while (insn && (GET_CODE (insn) != NOTE || NOTE_LINE_NUMBER (insn) < 0));\n-\n-\t      /* If insn is zero, then there must have been a syntax error.  */\n-\t      if (insn)\n-                {\n-                  location_t locus;\n-#ifdef USE_MAPPED_LOCATION\n-                  locus = NOTE_SOURCE_LOCATION (insn);\n-#else\n-                  locus.file = NOTE_SOURCE_FILE (insn);\n-                  locus.line = NOTE_LINE_NUMBER (insn);\n-#endif\n-                  warning (\"%Hunreachable code at beginning of %s\", &locus,\n-                           case_stack->data.case_stmt.printname);\n-                }\n-\t      break;\n-\t    }\n-\t}\n-    }\n-}\n \n /* Accumulate one case or default label inside a case or switch statement.\n    VALUE is the value of the case (a null pointer, for a default label).\n@@ -3909,8 +3864,6 @@ pushcase (tree value, tree (*converter) (tree, tree), tree label,\n   if (value != 0)\n     value = (*converter) (nominal_type, value);\n \n-  check_seenlabel ();\n-\n   /* Fail if this value is out of range for the actual type of the index\n      (which may be narrower than NOMINAL_TYPE).  */\n   if (value != 0\n@@ -3952,8 +3905,6 @@ pushcase_range (tree value1, tree value2, tree (*converter) (tree, tree),\n   if (index_type == error_mark_node)\n     return 0;\n \n-  check_seenlabel ();\n-\n   /* Convert VALUEs to type in which the comparisons are nominally done\n      and replace any unspecified value with the corresponding bound.  */\n   if (value1 == 0)\n@@ -4420,15 +4371,6 @@ expand_end_case_type (tree orig_index, tree orig_type)\n \n   do_pending_stack_adjust ();\n \n-  /* This might get a spurious warning in the presence of a syntax error;\n-     it could be fixed by moving the call to check_seenlabel after the\n-     check for error_mark_node, and copying the code of check_seenlabel that\n-     deals with case_stack->data.case_stmt.line_number_status /\n-     restore_line_number_status in front of the call to end_cleanup_deferral;\n-     However, this might miss some useful warnings in the presence of\n-     non-syntax errors.  */\n-  check_seenlabel ();\n-\n   /* An ERROR_MARK occurs for various reasons including invalid data type.  */\n   if (index_type != error_mark_node)\n     {"}]}