{"sha": "e5596aef6266e21ccf6b517ed7bb8f77f1d93e8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU1OTZhZWY2MjY2ZTIxY2NmNmI1MTdlZDdiYjhmNzdmMWQ5M2U4Yw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-01-24T11:31:40Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-01-24T11:31:40Z"}, "message": "missed in\n\nmissed in\n        * call.c (add_builtin_candidate): Quote std properly, from\n        previous change.\ncommit\n\nFrom-SVN: r39235", "tree": {"sha": "bcd4b0a75fe69395587a4f5131c4502387ea79f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcd4b0a75fe69395587a4f5131c4502387ea79f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5596aef6266e21ccf6b517ed7bb8f77f1d93e8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5596aef6266e21ccf6b517ed7bb8f77f1d93e8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5596aef6266e21ccf6b517ed7bb8f77f1d93e8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5596aef6266e21ccf6b517ed7bb8f77f1d93e8c/comments", "author": null, "committer": null, "parents": [{"sha": "4b2811e97e119fb9fa4372df5bb8d1666cef1aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b2811e97e119fb9fa4372df5bb8d1666cef1aa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b2811e97e119fb9fa4372df5bb8d1666cef1aa3"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "bd6c074bb71036000fdada22c0a1c0fedaad7c60", "filename": "gcc/cp/call.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5596aef6266e21ccf6b517ed7bb8f77f1d93e8c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5596aef6266e21ccf6b517ed7bb8f77f1d93e8c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e5596aef6266e21ccf6b517ed7bb8f77f1d93e8c", "patch": "@@ -1716,7 +1716,7 @@ add_builtin_candidate (candidates, code, code2, fnname, type1, type2,\n      candidate operator functions of the form112)\n \t     ptrdiff_t operator-(T, T);\n \n-   16For  every enumeral or pointer type T, there exist candidate operator\n+   16For every pointer or enumeration type T, there exist candidate operator\n      functions of the form\n \t     bool    operator<(T, T);\n \t     bool    operator>(T, T);\n@@ -5211,14 +5211,21 @@ joust (cand1, cand2, warn)\n   if (winner)\n     return winner;\n \n-  /* or, if not that, a non-template function is better than a\n-     template function.  */\n-\n+  /* or, if not that,\n+     F1 is a non-template function and F2 is a template function\n+     specialization.  */\n+         \n   if (! cand1->template && cand2->template)\n     return 1;\n   else if (cand1->template && ! cand2->template)\n     return -1;\n-  else if (cand1->template && cand2->template)\n+  \n+  /* or, if not that,\n+     F1 and F2 are template functions and the function template for F1 is\n+     more specialized than the template for F2 according to the partial\n+     ordering rules.  */\n+  \n+  if (cand1->template && cand2->template)\n     {\n       winner = more_specialized\n         (TI_TEMPLATE (cand1->template), TI_TEMPLATE (cand2->template),\n@@ -5230,8 +5237,15 @@ joust (cand1, cand2, warn)\n         return winner;\n     }\n \n-  /* or, if not that, a non-template user function is better than a\n-     builtin.  */\n+  /* a non-template user function is better than a builtin.  (Pedantically\n+     the builtin which matched the user function should not be added to\n+     the overload set, but we spot it here.\n+     \n+     [over.match.oper]\n+     ... the builtin candidates include ...\n+     - do not have the same parameter type list as any non-template\n+       non-member candidate.  */\n+                            \n   if (TREE_CODE (cand1->fn) != IDENTIFIER_NODE\n       && TREE_CODE (cand2->fn) == IDENTIFIER_NODE)\n     return 1;"}]}