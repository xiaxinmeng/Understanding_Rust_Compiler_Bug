{"sha": "1ca894a0e403de4be67483069f8b59059ad53a31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNhODk0YTBlNDAzZGU0YmU2NzQ4MzA2OWY4YjU5MDU5YWQ1M2EzMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-02-04T08:29:46Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-02-04T08:29:46Z"}, "message": "cppinit.c (BC): New macro.\n\n\t* cppinit.c (BC): New macro.\n\t(builtin_array): Add __GXX_WEAK__.\n\t* cpplib.h (builtin_type): Add BT_WEAK.\n\t* cppmacro.c (builtin_macro): Handle BT_WEAK.\n\t* defaults.h (SUPPORTS_ONE_ONLY): Define.\n\t* varasm.c (SUPPORTS_ONE_ONLY): Do not define.\n\nFrom-SVN: r39436", "tree": {"sha": "815541fa1776fda28adf6a72453ad1d34ecb1aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/815541fa1776fda28adf6a72453ad1d34ecb1aaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ca894a0e403de4be67483069f8b59059ad53a31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca894a0e403de4be67483069f8b59059ad53a31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ca894a0e403de4be67483069f8b59059ad53a31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca894a0e403de4be67483069f8b59059ad53a31/comments", "author": null, "committer": null, "parents": [{"sha": "52b357ea122caec736f311fecec2b3b9a0296da9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52b357ea122caec736f311fecec2b3b9a0296da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52b357ea122caec736f311fecec2b3b9a0296da9"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "4d1fadea6120c51cc212e8f214b2545c5d3038ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca894a0e403de4be67483069f8b59059ad53a31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca894a0e403de4be67483069f8b59059ad53a31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ca894a0e403de4be67483069f8b59059ad53a31", "patch": "@@ -1,3 +1,12 @@\n+2001-02-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cppinit.c (BC): New macro.\n+\t(builtin_array): Add __GXX_WEAK__.\n+\t* cpplib.h (builtin_type): Add BT_WEAK.\n+\t* cppmacro.c (builtin_macro): Handle BT_WEAK.\n+\t* defaults.h (SUPPORTS_ONE_ONLY): Define.\n+\t* varasm.c (SUPPORTS_ONE_ONLY): Do not define.\n+\n 2001-02-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cppinit.c (append_include_chain): Honor NO_IMPLICIT_EXTERN_C.\n@@ -81,7 +90,7 @@ Fri Feb  2 20:03:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(init_spec): Use it.\n \t* testsuite/lib/g++.exp: Include the directory where libgcc\n \tis located to the LD_LIBRARY_PATH list.\n-\t* inovke.texi (-shared-libgcc): Document the cases in which\n+\t* invoke.texi (-shared-libgcc): Document the cases in which\n \tGCC defaults to using the shared libgcc.\n \t\n 2001-02-02  Alexandre Oliva  <aoliva@redhat.com>"}, {"sha": "845d35b7fd1dbf0d299f4140f57966bed4afb93d", "filename": "gcc/cppinit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca894a0e403de4be67483069f8b59059ad53a31/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca894a0e403de4be67483069f8b59059ad53a31/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=1ca894a0e403de4be67483069f8b59059ad53a31", "patch": "@@ -643,6 +643,7 @@ struct builtin\n #define OPERATOR  \t0x10\n \n #define B(n, t)       { U n, 0, t, 0, BUILTIN, sizeof n - 1 }\n+#define BC(n, t)      { U n, 0, t, 0, BUILTIN | CPLUS, sizeof n - 1 }\n #define C(n, v)       { U n, v, 0, 0, 0, sizeof n - 1 }\n #define X(n, f)       { U n, 0, 0, 0, f, sizeof n - 1 }\n #define O(n, c, f)    { U n, 0, 0, c, OPERATOR | f, sizeof n - 1 }\n@@ -655,6 +656,7 @@ static const struct builtin builtin_array[] =\n   B(\"__LINE__\",\t\t BT_SPECLINE),\n   B(\"__INCLUDE_LEVEL__\", BT_INCLUDE_LEVEL),\n   B(\"__STDC__\",\t\t BT_STDC),\n+  BC(\"__GXX_WEAK__\",     BT_WEAK),\n \n   X(\"__VERSION__\",\t\tVERS),\n   X(\"__USER_LABEL_PREFIX__\",\tULP),"}, {"sha": "eec4f1eb4353b49dde2f0ad9cb716954cde10ce4", "filename": "gcc/cpplib.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca894a0e403de4be67483069f8b59059ad53a31/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca894a0e403de4be67483069f8b59059ad53a31/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=1ca894a0e403de4be67483069f8b59059ad53a31", "patch": "@@ -462,7 +462,9 @@ enum builtin_type\n   BT_BASE_FILE,\t\t\t/* `__BASE_FILE__' */\n   BT_INCLUDE_LEVEL,\t\t/* `__INCLUDE_LEVEL__' */\n   BT_TIME,\t\t\t/* `__TIME__' */\n-  BT_STDC\t\t\t/* `__STDC__' */\n+  BT_STDC,\t\t\t/* `__STDC__' */\n+  BT_WEAK                       /* Whether or not G++ supports weak \n+\t\t\t\t   symbols.  */\n };\n \n /* There is a slot in the hashnode for use by front ends when integrated"}, {"sha": "8e051a9c5b07223f8fd5ba9c8cf43286155a0708", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca894a0e403de4be67483069f8b59059ad53a31/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca894a0e403de4be67483069f8b59059ad53a31/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=1ca894a0e403de4be67483069f8b59059ad53a31", "patch": "@@ -216,6 +216,10 @@ builtin_macro (pfile, token)\n       *token = node->value.builtin == BT_DATE ? pfile->date: pfile->time;\n       break;\n \n+    case BT_WEAK:\n+      make_number_token (pfile, token, SUPPORTS_ONE_ONLY);\n+      break;\n+\n     default:\n       cpp_ice (pfile, \"invalid builtin macro \\\"%s\\\"\", node->name);\n       break;"}, {"sha": "c1c938b5c0c0404fb4ade2e7cbe70025d4199def", "filename": "gcc/defaults.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca894a0e403de4be67483069f8b59059ad53a31/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca894a0e403de4be67483069f8b59059ad53a31/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=1ca894a0e403de4be67483069f8b59059ad53a31", "patch": "@@ -149,6 +149,15 @@ do { ASM_OUTPUT_LABEL(FILE,LABEL_ALTERNATE_NAME (INSN)); } while (0)\n #endif\n #endif\n \n+/* This determines whether or not we support link-once semantics.  */\n+#ifndef SUPPORTS_ONE_ONLY\n+#ifdef MAKE_DECL_ONE_ONLY\n+#define SUPPORTS_ONE_ONLY 1\n+#else\n+#define SUPPORTS_ONE_ONLY 0\n+#endif\n+#endif\n+\n /* If the target supports weak symbols, define TARGET_ATTRIBUTE_WEAK to\n    provide a weak attribute.  Else define it to nothing. \n "}, {"sha": "047065777d77eae687c3567dc730f6990b753c76", "filename": "gcc/varasm.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca894a0e403de4be67483069f8b59059ad53a31/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca894a0e403de4be67483069f8b59059ad53a31/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=1ca894a0e403de4be67483069f8b59059ad53a31", "patch": "@@ -4828,15 +4828,6 @@ assemble_alias (decl, target)\n #endif\n }\n \n-/* This determines whether or not we support link-once semantics.  */\n-#ifndef SUPPORTS_ONE_ONLY\n-#ifdef MAKE_DECL_ONE_ONLY\n-#define SUPPORTS_ONE_ONLY 1\n-#else\n-#define SUPPORTS_ONE_ONLY 0\n-#endif\n-#endif\n-\n /* Returns 1 if the target configuration supports defining public symbols\n    so that one of them will be chosen at link time instead of generating a\n    multiply-defined symbol error, whether through the use of weak symbols or"}]}