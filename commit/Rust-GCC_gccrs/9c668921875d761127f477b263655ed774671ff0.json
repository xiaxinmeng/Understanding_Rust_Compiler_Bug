{"sha": "9c668921875d761127f477b263655ed774671ff0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM2Njg5MjE4NzVkNzYxMTI3ZjQ3N2IyNjM2NTVlZDc3NDY3MWZmMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-08-20T19:03:03Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-08-20T19:03:03Z"}, "message": "ia64.c (emit_insn_group_barriers): Stop if ar.lc assigned before a loop.\n\n        * config/ia64/ia64.c (emit_insn_group_barriers): Stop if ar.lc\n        assigned before a loop.\n\n        * config/ia64/ia64.md (ashlsi3): Zero extend the shift count.\n        (ashrsi3, lshrsi3): Likewise.\n\nFrom-SVN: r35823", "tree": {"sha": "f96e69f7cf9fd58c5cd74ec965b6c8f8d57055d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f96e69f7cf9fd58c5cd74ec965b6c8f8d57055d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c668921875d761127f477b263655ed774671ff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c668921875d761127f477b263655ed774671ff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c668921875d761127f477b263655ed774671ff0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c668921875d761127f477b263655ed774671ff0/comments", "author": null, "committer": null, "parents": [{"sha": "48da46cca887bc9ef1364ecaac09df4325a064eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48da46cca887bc9ef1364ecaac09df4325a064eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48da46cca887bc9ef1364ecaac09df4325a064eb"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "d5467b5f7bf272fdf3584347ab8a8d2743297cbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c668921875d761127f477b263655ed774671ff0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c668921875d761127f477b263655ed774671ff0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c668921875d761127f477b263655ed774671ff0", "patch": "@@ -1,3 +1,11 @@\n+2000-08-20  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/ia64/ia64.c (emit_insn_group_barriers): Stop if ar.lc\n+\tassigned before a loop.\n+\n+\t* config/ia64/ia64.md (ashlsi3): Zero extend the shift count.\n+\t(ashrsi3, lshrsi3): Likewise.\n+\n 2000-08-20  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* c-lang.c: #include diagnostic.h"}, {"sha": "f0ad8ba49c527d26a304d4fefb3ea2337bbef54c", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c668921875d761127f477b263655ed774671ff0/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c668921875d761127f477b263655ed774671ff0/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=9c668921875d761127f477b263655ed774671ff0", "patch": "@@ -3934,6 +3934,21 @@ emit_insn_group_barriers (insns)\n       switch (GET_CODE (insn))\n \t{\n \tcase NOTE:\n+\t  /* For very small loops we can wind up with extra stop bits\n+\t     inside the loop because of not putting a stop after the\n+\t     assignment to ar.lc before the loop label.  */\n+\t  /* ??? Ideally we'd do this for any register used in the first\n+\t     insn group that's been written recently.  */\n+          if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_BEG)\n+\t    {\n+\t      need_barrier = rws_access_regno (AR_LC_REGNUM, flags, 0);\n+\t      if (need_barrier)\n+\t\t{\n+\t\t  emit_insn_after (gen_insn_group_barrier (), insn);\n+\t\t  memset (rws_sum, 0, sizeof(rws_sum));\n+\t\t  prev_insn = NULL_RTX;\n+\t\t}\n+\t    }\n \t  break;\n \n \tcase CALL_INSN:"}, {"sha": "3afddeac929172e09b90cdef4304797031c6ccfb", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c668921875d761127f477b263655ed774671ff0/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c668921875d761127f477b263655ed774671ff0/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=9c668921875d761127f477b263655ed774671ff0", "patch": "@@ -2012,10 +2012,27 @@\n ;; ::\n ;; ::::::::::::::::::::\n \n-(define_insn \"ashlsi3\"\n+(define_expand \"ashlsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t   (match_operand:SI 2 \"reg_or_5bit_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  if (GET_CODE (operands[2]) != CONST_INT)\n+    {\n+      /* Why oh why didn't Intel arrange for SHIFT_COUNT_TRUNCATED?  Now\n+\t we've got to get rid of stray bits outside the SImode register.  */\n+      rtx subshift = gen_reg_rtx (DImode);\n+      emit_insn (gen_zero_extendsidi2 (subshift, operands[2]));\n+      operands[2] = subshift;\n+    }\n+}\")\n+\n+(define_insn \"*ashlsi3_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r\")\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"r,r,r\")\n-\t\t   (match_operand:SI 2 \"reg_or_5bit_operand\" \"R,n,r\")))]\n+\t\t   (match_operand:DI 2 \"reg_or_5bit_operand\" \"R,n,r\")))]\n   \"\"\n   \"@\n    shladd %0 = %1, %2, r0\n@@ -2036,9 +2053,10 @@\n \t\t\t GEN_INT (32 - INTVAL (operands[2])), operands[2]));\n   else\n     {\n+      rtx subshift = gen_reg_rtx (DImode);\n       emit_insn (gen_extendsidi2 (subtarget, operands[1]));\n-      emit_insn (gen_ashrdi3 (subtarget, subtarget,\n-\t\t\t      gen_lowpart (DImode, operands[2])));\n+      emit_insn (gen_zero_extendsidi2 (subshift, operands[2]));\n+      emit_insn (gen_ashrdi3 (subtarget, subtarget, subshift));\n     }\n   emit_move_insn (gen_lowpart (DImode, operands[0]), subtarget);\n   DONE;\n@@ -2057,9 +2075,10 @@\n \t\t\t  GEN_INT (32 - INTVAL (operands[2])), operands[2]));\n   else\n     {\n+      rtx subshift = gen_reg_rtx (DImode);\n       emit_insn (gen_zero_extendsidi2 (subtarget, operands[1]));\n-      emit_insn (gen_lshrdi3 (subtarget, subtarget,\n-\t\t\t      gen_lowpart (DImode, operands[2])));\n+      emit_insn (gen_zero_extendsidi2 (subshift, operands[2]));\n+      emit_insn (gen_lshrdi3 (subtarget, subtarget, subshift));\n     }\n   emit_move_insn (gen_lowpart (DImode, operands[0]), subtarget);\n   DONE;"}]}