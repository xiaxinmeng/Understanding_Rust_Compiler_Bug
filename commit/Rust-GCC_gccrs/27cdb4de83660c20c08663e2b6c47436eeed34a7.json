{"sha": "27cdb4de83660c20c08663e2b6c47436eeed34a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdjZGI0ZGU4MzY2MGMyMGMwODY2M2UyYjZjNDc0MzZlZWVkMzRhNw==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2020-09-23T16:59:26Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2020-09-24T00:01:40Z"}, "message": "rs6000: Add 'd' for doubleword variant of vector insert\n\nWhen the \"Vector Insert\" section was added to the documentation,\nthe doubleword ('d') variant was omitted.  Add it.\n\n2020-09-23  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc/\n\t* doc/extend.texi: Add 'd' for doubleword variant of\n\tvector insert instruction.", "tree": {"sha": "821b0a3b5b2ba3afa48ef13fbe90bbacbb9f67a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/821b0a3b5b2ba3afa48ef13fbe90bbacbb9f67a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27cdb4de83660c20c08663e2b6c47436eeed34a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27cdb4de83660c20c08663e2b6c47436eeed34a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27cdb4de83660c20c08663e2b6c47436eeed34a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27cdb4de83660c20c08663e2b6c47436eeed34a7/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67aeddb785ddcc8688ee5736ecab3c81de34a214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67aeddb785ddcc8688ee5736ecab3c81de34a214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67aeddb785ddcc8688ee5736ecab3c81de34a214"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "7f14a28aca0031f546355d791ad5654b7e410253", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27cdb4de83660c20c08663e2b6c47436eeed34a7/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27cdb4de83660c20c08663e2b6c47436eeed34a7/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=27cdb4de83660c20c08663e2b6c47436eeed34a7", "patch": "@@ -20961,9 +20961,9 @@ given by the third argument, using natural element order in the second\n argument.  The rest of the second argument is unchanged.  If the byte\n index is greater than 14 for halfwords, greater than 12 for words, or\n greater than 8 for doublewords the result is undefined.   For little-endian,\n-the generated code will be semantically equivalent to @code{vins[bhw]rx}\n+the generated code will be semantically equivalent to @code{vins[bhwd]rx}\n instructions.  Similarly for big-endian it will be semantically equivalent\n-to @code{vins[bhw]lx}.  Note that some fairly anomalous results can be\n+to @code{vins[bhwd]lx}.  Note that some fairly anomalous results can be\n generated if the byte index is not aligned on an element boundary for the\n type of element being inserted.\n @findex vec_insertl\n@@ -20996,8 +20996,8 @@ for halfwords, 12 for words, or 8 for doublewords, the intrinsic will be\n rejected. Note that the underlying hardware instruction uses the same register\n for the second argument and the result.\n For little-endian, the code generation will be semantically equivalent to\n-@code{vins[bhw]lx}, while for big-endian it will be semantically equivalent to\n-@code{vins[bhw]rx}.\n+@code{vins[bhwd]lx}, while for big-endian it will be semantically equivalent to\n+@code{vins[bhwd]rx}.\n Note that some fairly anomalous results can be generated if the byte index is\n not aligned on an element boundary for the sort of element being inserted.\n @findex vec_inserth"}]}