{"sha": "5636faf2bcd1a82bb2a2b22a4146602c45c5508a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYzNmZhZjJiY2QxYTgyYmIyYTJiMjJhNDE0NjYwMmM0NWM1NTA4YQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2017-01-20T00:19:01Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2017-01-20T00:19:01Z"}, "message": "[AArch64][4/4] libgcc unwinder support for return address signing\n\nlibgcc/\n\t* config/aarch64/aarch64-unwind.h: New file.\n\t(DWARF_REGNUM_AARCH64_RA_STATE): Define.\n\t(MD_POST_EXTRACT_ROOT_ADDR): New target marcro and define it on AArch64.\n\t(MD_POST_EXTRACT_FRAME_ADDR): Likewise.\n\t(MD_POST_FROB_EH_HANDLER_ADDR): Likewise.\n\t(MD_FROB_UPDATE_CONTEXT): Define it on AArch64.\n\t(aarch64_post_extract_frame_addr): New function.\n\t(aarch64_post_frob_eh_handler_addr): New function.\n\t(aarch64_frob_update_context): New function.\n\t* config/aarch64/linux-unwind.h: Include aarch64-unwind.h\n\t* config.host (aarch64*-*-elf, aarch64*-*-rtems*,\n\taarch64*-*-freebsd*):\n\tInitialize md_unwind_header to include aarch64-unwind.h.\n\t* unwind-dw2.c (struct _Unwind_Context): Define \"RA_A_SIGNED_BIT\".\n\t(execute_cfa_program): Multiplex DW_CFA_GNU_window_save for\n\t__aarch64__.\n\t(uw_update_context): Honor MD_POST_EXTRACT_FRAME_ADDR.\n\t(uw_init_context_1): Honor MD_POST_EXTRACT_ROOT_ADDR.\n\t(uw_frob_return_addr): New function.\n\t(uw_install_context): Use uw_frob_return_addr.\n\nFrom-SVN: r244673", "tree": {"sha": "a4200a84af112696952a0471531da8b9d2130bf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4200a84af112696952a0471531da8b9d2130bf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5636faf2bcd1a82bb2a2b22a4146602c45c5508a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5636faf2bcd1a82bb2a2b22a4146602c45c5508a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5636faf2bcd1a82bb2a2b22a4146602c45c5508a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5636faf2bcd1a82bb2a2b22a4146602c45c5508a/comments", "author": null, "committer": null, "parents": [{"sha": "1d9a762962461a40a179022dc962b384d36f9d96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9a762962461a40a179022dc962b384d36f9d96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d9a762962461a40a179022dc962b384d36f9d96"}], "stats": {"total": 70, "additions": 65, "deletions": 5}, "files": [{"sha": "926312eca6574f87b8f8d71c7d38243e273077a8", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5636faf2bcd1a82bb2a2b22a4146602c45c5508a/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5636faf2bcd1a82bb2a2b22a4146602c45c5508a/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=5636faf2bcd1a82bb2a2b22a4146602c45c5508a", "patch": "@@ -1,3 +1,26 @@\n+2017-01-19  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-unwind.h: New file.\n+\t(DWARF_REGNUM_AARCH64_RA_STATE): Define.\n+\t(MD_POST_EXTRACT_ROOT_ADDR): New target marcro and define it on AArch64.\n+\t(MD_POST_EXTRACT_FRAME_ADDR): Likewise.\n+\t(MD_POST_FROB_EH_HANDLER_ADDR): Likewise.\n+\t(MD_FROB_UPDATE_CONTEXT): Define it on AArch64.\n+\t(aarch64_post_extract_frame_addr): New function.\n+\t(aarch64_post_frob_eh_handler_addr): New function.\n+\t(aarch64_frob_update_context): New function.\n+\t* config/aarch64/linux-unwind.h: Include aarch64-unwind.h\n+\t* config.host (aarch64*-*-elf, aarch64*-*-rtems*,\n+\taarch64*-*-freebsd*):\n+\tInitialize md_unwind_header to include aarch64-unwind.h.\n+\t* unwind-dw2.c (struct _Unwind_Context): Define \"RA_A_SIGNED_BIT\".\n+\t(execute_cfa_program): Multiplex DW_CFA_GNU_window_save for\n+\t__aarch64__.\n+\t(uw_update_context): Honor MD_POST_EXTRACT_FRAME_ADDR.\n+\t(uw_init_context_1): Honor MD_POST_EXTRACT_ROOT_ADDR.\n+\t(uw_frob_return_addr): New function.\n+\t(uw_install_context): Use uw_frob_return_addr.\n+\n 2017-01-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/79046"}, {"sha": "540bfa9635802adabb36a2d1b7cf3416462c59f3", "filename": "libgcc/config.host", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5636faf2bcd1a82bb2a2b22a4146602c45c5508a/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5636faf2bcd1a82bb2a2b22a4146602c45c5508a/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=5636faf2bcd1a82bb2a2b22a4146602c45c5508a", "patch": "@@ -331,11 +331,13 @@ aarch64*-*-elf | aarch64*-*-rtems*)\n \textra_parts=\"$extra_parts crtfastmath.o\"\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-aarch64\"\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-softfp t-softfp t-crtfm\"\n+\tmd_unwind_header=aarch64/aarch64-unwind.h\n \t;;\n aarch64*-*-freebsd*)\n \textra_parts=\"$extra_parts crtfastmath.o\"\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-aarch64\"\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-softfp t-softfp t-crtfm\"\n+\tmd_unwind_header=aarch64/aarch64-unwind.h\n \t;;\n aarch64*-*-linux*)\n \textra_parts=\"$extra_parts crtfastmath.o\""}, {"sha": "a8fa1d504529fc1e145f3f145fedf8670c6de526", "filename": "libgcc/config/aarch64/linux-unwind.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5636faf2bcd1a82bb2a2b22a4146602c45c5508a/libgcc%2Fconfig%2Faarch64%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5636faf2bcd1a82bb2a2b22a4146602c45c5508a/libgcc%2Fconfig%2Faarch64%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Flinux-unwind.h?ref=5636faf2bcd1a82bb2a2b22a4146602c45c5508a", "patch": "@@ -24,6 +24,7 @@\n \n #include <signal.h>\n #include <sys/ucontext.h>\n+#include \"config/aarch64/aarch64-unwind.h\"\n \n \n /* Since insns are always stored LE, on a BE system the opcodes will"}, {"sha": "fe74387992ab7f10c141d7b62f72a755878612c5", "filename": "libgcc/unwind-dw2.c", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5636faf2bcd1a82bb2a2b22a4146602c45c5508a/libgcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5636faf2bcd1a82bb2a2b22a4146602c45c5508a/libgcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2.c?ref=5636faf2bcd1a82bb2a2b22a4146602c45c5508a", "patch": "@@ -136,6 +136,8 @@ struct _Unwind_Context\n #define SIGNAL_FRAME_BIT ((~(_Unwind_Word) 0 >> 1) + 1)\n   /* Context which has version/args_size/by_value fields.  */\n #define EXTENDED_CONTEXT_BIT ((~(_Unwind_Word) 0 >> 2) + 1)\n+  /* Bit reserved on AArch64, return address has been signed with A key.  */\n+#define RA_A_SIGNED_BIT ((~(_Unwind_Word) 0 >> 3) + 1)\n   _Unwind_Word flags;\n   /* 0 for now, can be increased when further fields are added to\n      struct _Unwind_Context.  */\n@@ -1185,13 +1187,19 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  break;\n \n \tcase DW_CFA_GNU_window_save:\n+#ifdef __aarch64__\n+\t  /* This CFA is multiplexed with Sparc.  On AArch64 it's used to toggle\n+\t     return address signing status.  */\n+\t  fs->regs.reg[DWARF_REGNUM_AARCH64_RA_STATE].loc.offset ^= 1;\n+#else\n \t  /* ??? Hardcoded for SPARC register window configuration.  */\n \t  if (__LIBGCC_DWARF_FRAME_REGISTERS__ >= 32)\n \t    for (reg = 16; reg < 32; ++reg)\n \t      {\n \t\tfs->regs.reg[reg].how = REG_SAVED_OFFSET;\n \t\tfs->regs.reg[reg].loc.offset = (reg - 16) * sizeof (void *);\n \t      }\n+#endif\n \t  break;\n \n \tcase DW_CFA_GNU_args_size:\n@@ -1513,10 +1521,15 @@ uw_update_context (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n        stack frame.  */\n     context->ra = 0;\n   else\n-    /* Compute the return address now, since the return address column\n-       can change from frame to frame.  */\n-    context->ra = __builtin_extract_return_addr\n-      (_Unwind_GetPtr (context, fs->retaddr_column));\n+    {\n+      /* Compute the return address now, since the return address column\n+\t can change from frame to frame.  */\n+      context->ra = __builtin_extract_return_addr\n+\t(_Unwind_GetPtr (context, fs->retaddr_column));\n+#ifdef MD_POST_EXTRACT_FRAME_ADDR\n+      context->ra = MD_POST_EXTRACT_FRAME_ADDR (context, fs, context->ra);\n+#endif\n+    }\n }\n \n static void\n@@ -1550,6 +1563,9 @@ uw_init_context_1 (struct _Unwind_Context *context,\n \t\t   void *outer_cfa, void *outer_ra)\n {\n   void *ra = __builtin_extract_return_addr (__builtin_return_address (0));\n+#ifdef MD_POST_EXTRACT_ROOT_ADDR\n+  ra = MD_POST_EXTRACT_ROOT_ADDR (ra);\n+#endif\n   _Unwind_FrameState fs;\n   _Unwind_SpTmp sp_slot;\n   _Unwind_Reason_Code code;\n@@ -1586,6 +1602,9 @@ uw_init_context_1 (struct _Unwind_Context *context,\n      initialization context, then we can't see it in the given\n      call frame data.  So have the initialization context tell us.  */\n   context->ra = __builtin_extract_return_addr (outer_ra);\n+#ifdef MD_POST_EXTRACT_ROOT_ADDR\n+  context->ra = MD_POST_EXTRACT_ROOT_ADDR (context->ra);\n+#endif\n }\n \n static void _Unwind_DebugHook (void *, void *)\n@@ -1608,6 +1627,21 @@ _Unwind_DebugHook (void *cfa __attribute__ ((__unused__)),\n #endif\n }\n \n+/* Frob exception handler's address kept in TARGET before installing into\n+   CURRENT context.  */\n+\n+static inline void *\n+uw_frob_return_addr (struct _Unwind_Context *current\n+\t\t     __attribute__ ((__unused__)),\n+\t\t     struct _Unwind_Context *target)\n+{\n+  void *ret_addr = __builtin_frob_return_addr (target->ra);\n+#ifdef MD_POST_FROB_EH_HANDLER_ADDR\n+  ret_addr = MD_POST_FROB_EH_HANDLER_ADDR (current, target, ret_addr);\n+#endif\n+  return ret_addr;\n+}\n+\n /* Install TARGET into CURRENT so that we can return to it.  This is a\n    macro because __builtin_eh_return must be invoked in the context of\n    our caller.  */\n@@ -1616,7 +1650,7 @@ _Unwind_DebugHook (void *cfa __attribute__ ((__unused__)),\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       long offset = uw_install_context_1 ((CURRENT), (TARGET));\t\t\\\n-      void *handler = __builtin_frob_return_addr ((TARGET)->ra);\t\\\n+      void *handler = uw_frob_return_addr ((CURRENT), (TARGET));\t\\\n       _Unwind_DebugHook ((TARGET)->cfa, handler);\t\t\t\\\n       __builtin_eh_return (offset, handler);\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\"}]}