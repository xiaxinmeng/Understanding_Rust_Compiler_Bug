{"sha": "fa8ce18938339c8d5b54d6d7428800efe3229510", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE4Y2UxODkzODMzOWM4ZDViNTRkNmQ3NDI4ODAwZWZlMzIyOTUxMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-06-07T09:48:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-06-07T09:48:31Z"}, "message": "graphite-sese-to-poly.c (extract_affine): Avoid unneded wrapping.\n\n2018-06-07  Richard Biener  <rguenther@suse.de>\n\n\t* graphite-sese-to-poly.c (extract_affine): Avoid unneded\n\twrapping.  Properly wrap the result of a BIT_NOT_EXPR.\n\tProperly wrap signed arithmetic if overflow wraps.\n\nFrom-SVN: r261267", "tree": {"sha": "d51ab974c94e34717c69d09ce3994961a55472d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d51ab974c94e34717c69d09ce3994961a55472d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa8ce18938339c8d5b54d6d7428800efe3229510", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa8ce18938339c8d5b54d6d7428800efe3229510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa8ce18938339c8d5b54d6d7428800efe3229510", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa8ce18938339c8d5b54d6d7428800efe3229510/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c962b2c36f126d17df41cf01aaa67ae1bed341d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c962b2c36f126d17df41cf01aaa67ae1bed341d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c962b2c36f126d17df41cf01aaa67ae1bed341d9"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "6526ca2800dc61df43213ff4a9be313b71b9bad4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa8ce18938339c8d5b54d6d7428800efe3229510/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa8ce18938339c8d5b54d6d7428800efe3229510/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa8ce18938339c8d5b54d6d7428800efe3229510", "patch": "@@ -1,3 +1,9 @@\n+2018-06-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* graphite-sese-to-poly.c (extract_affine): Avoid unneded\n+\twrapping.  Properly wrap the result of a BIT_NOT_EXPR.\n+\tProperly wrap signed arithmetic if overflow wraps.\n+\n 2018-06-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/69615"}, {"sha": "4dcc013f6bb4fd708e455de84821b2edafcdae73", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa8ce18938339c8d5b54d6d7428800efe3229510/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa8ce18938339c8d5b54d6d7428800efe3229510/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=fa8ce18938339c8d5b54d6d7428800efe3229510", "patch": "@@ -272,7 +272,8 @@ extract_affine (scop_p s, tree e, __isl_take isl_space *space)\n       lhs = extract_affine (s, integer_minus_one_node, isl_space_copy (space));\n       rhs = extract_affine (s, TREE_OPERAND (e, 0), space);\n       res = isl_pw_aff_sub (lhs, rhs);\n-      break;\n+      /* We need to always wrap the result of a bitwise operation.  */\n+      return wrap (res, TYPE_PRECISION (type) - (TYPE_UNSIGNED (type) ? 0 : 1));\n \n     case NEGATE_EXPR:\n       lhs = extract_affine (s, TREE_OPERAND (e, 0), isl_space_copy (space));\n@@ -285,8 +286,8 @@ extract_affine (scop_p s, tree e, __isl_take isl_space *space)\n \tgcc_assert (! defined_in_sese_p (e, s->scop_info->region));\n \tint dim = parameter_index_in_region (e, s->scop_info);\n \tgcc_assert (dim != -1);\n-\tres = extract_affine_name (dim, space);\n-\tbreak;\n+\t/* No need to wrap a parameter.  */\n+\treturn extract_affine_name (dim, space);\n       }\n \n     case INTEGER_CST:\n@@ -301,11 +302,15 @@ extract_affine (scop_p s, tree e, __isl_take isl_space *space)\n \t/* Signed values, even if overflow is undefined, get modulo-reduced.\n \t   But only if not all values of the old type fit in the new.  */\n \tif (! TYPE_UNSIGNED (type)\n-\t    && ((TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (e, 0)))\n+\t    && ((TYPE_UNSIGNED (itype)\n \t\t && TYPE_PRECISION (type) <= TYPE_PRECISION (itype))\n \t\t|| TYPE_PRECISION (type) < TYPE_PRECISION (itype)))\n \t  res = wrap (res, TYPE_PRECISION (type) - 1);\n-\tbreak;\n+\telse if (TYPE_UNSIGNED (type)\n+\t\t && (!TYPE_UNSIGNED (itype)\n+\t\t     || TYPE_PRECISION (type) < TYPE_PRECISION (itype)))\n+\t  res = wrap (res, TYPE_PRECISION (type));\n+\treturn res;\n       }\n \n     case NON_LVALUE_EXPR:\n@@ -317,7 +322,8 @@ extract_affine (scop_p s, tree e, __isl_take isl_space *space)\n       break;\n     }\n \n-  if (TYPE_UNSIGNED (type))\n+  /* For all wrapping arithmetic wrap the result.  */\n+  if (TYPE_OVERFLOW_WRAPS (type))\n     res = wrap (res, TYPE_PRECISION (type));\n \n   return res;"}]}