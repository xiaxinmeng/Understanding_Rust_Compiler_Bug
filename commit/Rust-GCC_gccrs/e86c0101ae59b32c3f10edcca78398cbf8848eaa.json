{"sha": "e86c0101ae59b32c3f10edcca78398cbf8848eaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg2YzAxMDFhZTU5YjMyYzNmMTBlZGNjYTc4Mzk4Y2JmODg0OGVhYQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-01-24T10:30:26Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-01-24T10:30:26Z"}, "message": "re PR inline-asm/55934 (LRA inline asm error recovery)\n\ngcc/\n\n\tPR inline-asm/55934\n\t* lra-assigns.c (assign_by_spills): Throw away the pattern of asms\n\tthat have operands with impossible constraints.\n\tAdd a FIXME for a speed-up opportunity.\n\t* lra-constraints.c (process_alt_operands): Verify that a class\n\tselected from constraints on asms is valid for the operand mode.\n\t(curr_insn_transform): Remove incorrect comment.\n\ntestsuite/\n\n\tPR inline-asm/55934\n\t* gcc.target/i386/pr55934.c: New test.\n\nFrom-SVN: r195420", "tree": {"sha": "b1143716a295f25f560b0b981e81d773c0b72fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1143716a295f25f560b0b981e81d773c0b72fc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e86c0101ae59b32c3f10edcca78398cbf8848eaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e86c0101ae59b32c3f10edcca78398cbf8848eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e86c0101ae59b32c3f10edcca78398cbf8848eaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e86c0101ae59b32c3f10edcca78398cbf8848eaa/comments", "author": null, "committer": null, "parents": [{"sha": "0e128cdc670e73b5834f3ce72f6ff66f470dc7a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e128cdc670e73b5834f3ce72f6ff66f470dc7a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e128cdc670e73b5834f3ce72f6ff66f470dc7a3"}], "stats": {"total": 66, "additions": 62, "deletions": 4}, "files": [{"sha": "eedd4d6d8dc97aa5e21de3830eff0ccfa877c093", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86c0101ae59b32c3f10edcca78398cbf8848eaa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86c0101ae59b32c3f10edcca78398cbf8848eaa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e86c0101ae59b32c3f10edcca78398cbf8848eaa", "patch": "@@ -1,3 +1,13 @@\n+2013-01-24  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR inline-asm/55934\n+\t* lra-assigns.c (assign_by_spills): Throw away the pattern of asms\n+\tthat have operands with impossible constraints.\n+\tAdd a FIXME for a speed-up opportunity.\n+\t* lra-constraints.c (process_alt_operands): Verify that a class\n+\tselected from constraints on asms is valid for the operand mode.\n+\t(curr_insn_transform): Remove incorrect comment.\n+\n 2013-01-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*movdf_internal_rex64): Disparage alternatives"}, {"sha": "33666fd07b11c698193c294c1d6dee27b72f5986", "filename": "gcc/lra-assigns.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86c0101ae59b32c3f10edcca78398cbf8848eaa/gcc%2Flra-assigns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86c0101ae59b32c3f10edcca78398cbf8848eaa/gcc%2Flra-assigns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-assigns.c?ref=e86c0101ae59b32c3f10edcca78398cbf8848eaa", "patch": "@@ -1240,6 +1240,23 @@ assign_by_spills (void)\n \t\t  asm_p = true;\n \t\t  error_for_asm (insn,\n \t\t\t\t \"%<asm%> operand has impossible constraints\");\n+\t\t  /* Avoid further trouble with this insn.\n+\t\t     For asm goto, instead of fixing up all the edges\n+\t\t     just clear the template and clear input operands\n+\t\t     (asm goto doesn't have any output operands).  */\n+\t\t  if (JUMP_P (insn))\n+\t\t    {\n+\t\t      rtx asm_op = extract_asm_operands (PATTERN (insn));\n+\t\t      ASM_OPERANDS_TEMPLATE (asm_op) = ggc_strdup (\"\");\n+\t\t      ASM_OPERANDS_INPUT_VEC (asm_op) = rtvec_alloc (0);\n+\t\t      ASM_OPERANDS_INPUT_CONSTRAINT_VEC (asm_op) = rtvec_alloc (0);\n+\t\t      lra_update_insn_regno_info (insn);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      PATTERN (insn) = gen_rtx_USE (VOIDmode, const0_rtx);\n+\t\t      lra_set_insn_deleted (insn);\n+\t\t    }\n \t\t}\n \t    }\n \t  lra_assert (asm_p);\n@@ -1263,6 +1280,9 @@ assign_by_spills (void)\n \t  bitmap_ior_into (&changed_insns,\n \t\t\t   &lra_reg_info[sorted_pseudos[i]].insn_bitmap);\n \t}\n+\n+      /* FIXME: Look up the changed insns in the cached LRA insn data using\n+\t an EXECUTE_IF_SET_IN_BITMAP over changed_insns.  */\n       FOR_EACH_BB (bb)\n \tFOR_BB_INSNS (bb, insn)\n \tif (bitmap_bit_p (&changed_insns, INSN_UID (insn)))"}, {"sha": "03728b78f42a66e752f7887ffd70a5b594f5922f", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86c0101ae59b32c3f10edcca78398cbf8848eaa/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86c0101ae59b32c3f10edcca78398cbf8848eaa/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=e86c0101ae59b32c3f10edcca78398cbf8848eaa", "patch": "@@ -1847,11 +1847,27 @@ process_alt_operands (int only_alternative)\n \t      int const_to_mem = 0;\n \t      bool no_regs_p;\n \n+\t      /* If this alternative asks for a specific reg class, see if there\n+\t\t is at least one allocatable register in that class.  */\n \t      no_regs_p\n \t\t= (this_alternative == NO_REGS\n \t\t   || (hard_reg_set_subset_p\n \t\t       (reg_class_contents[this_alternative],\n \t\t\tlra_no_alloc_regs)));\n+\n+\t      /* For asms, verify that the class for this alternative is possible\n+\t\t for the mode that is specified.  */\n+\t      if (!no_regs_p && REG_P (op) && INSN_CODE (curr_insn) < 0)\n+\t\t{\n+\t\t  int i;\n+\t\t  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+\t\t    if (HARD_REGNO_MODE_OK (i, mode)\n+\t\t\t&& in_hard_reg_set_p (reg_class_contents[this_alternative], mode, i))\n+\t\t      break;\n+\t\t  if (i == FIRST_PSEUDO_REGISTER)\n+\t\t    winreg = false;\n+\t\t}\n+\n \t      /* If this operand accepts a register, and if the\n \t\t register class has at least one allocatable register,\n \t\t then this operand can be reloaded.  */\n@@ -2742,10 +2758,6 @@ curr_insn_transform (void)\n \tswap_operands (commutative);\n     }\n \n-  /* The operands don't meet the constraints.  goal_alt describes the\n-     alternative that we could reach by reloading the fewest operands.\n-     Reload so as to fit it.  */\n-\n   if (! alt_p && ! sec_mem_p)\n     {\n       /* No alternative works with reloads??  */"}, {"sha": "9dda502e093228cfd5bc61031ac025b7112e9e4b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86c0101ae59b32c3f10edcca78398cbf8848eaa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86c0101ae59b32c3f10edcca78398cbf8848eaa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e86c0101ae59b32c3f10edcca78398cbf8848eaa", "patch": "@@ -1,3 +1,8 @@\n+2013-01-24  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR inline-asm/55934\n+\t* gcc.target/i386/pr55934.c: New test.\n+\n 2013-01-23  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/56081"}, {"sha": "ea489559c9328447689e6a3e6abfcee667f6a129", "filename": "gcc/testsuite/gcc.target/i386/pr55934.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86c0101ae59b32c3f10edcca78398cbf8848eaa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55934.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86c0101ae59b32c3f10edcca78398cbf8848eaa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55934.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55934.c?ref=e86c0101ae59b32c3f10edcca78398cbf8848eaa", "patch": "@@ -0,0 +1,11 @@\n+/* PR inline-asm/55934 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target sse } */\n+/* { dg-options \"-std=c99 -msse\" } */\n+_Complex float\n+foo (void)\n+{\n+  _Complex float x;\n+  __asm (\"\" : \"=x\" (x)); /* { dg-error \"inconsistent .* constraint\" } */\n+  return x;\n+}"}]}