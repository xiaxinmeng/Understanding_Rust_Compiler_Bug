{"sha": "663827d3e5b2ae5fdbcc8b2b6591910b886af3b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYzODI3ZDNlNWIyYWU1ZmRiY2M4YjJiNjU5MTkxMGI4ODZhZjNiMg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-06-21T17:30:54Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-06-21T17:30:54Z"}, "message": "re PR target/33049 ([avr] bit extraction non optimal, inversing logic solves problem)\n\n\tPR target/33049\n\t* config/avr/avr.md (extzv): New expander.\n\t(*extzv): New insn.\n\t(*extzv.qihi1, *extzv.qihi2): New insn-and-split.\n\t* config/avr/constraints.md (C04): New constraint.\n\t* doc/md.texi (Machine Constraints): Document it.\n\nFrom-SVN: r175269", "tree": {"sha": "f4cb0e57d5b8a47d649a75d10793b2a90a0bd8c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4cb0e57d5b8a47d649a75d10793b2a90a0bd8c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/663827d3e5b2ae5fdbcc8b2b6591910b886af3b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/663827d3e5b2ae5fdbcc8b2b6591910b886af3b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/663827d3e5b2ae5fdbcc8b2b6591910b886af3b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/663827d3e5b2ae5fdbcc8b2b6591910b886af3b2/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61d2c24233c52c2440cd285a3c3e97025fd6a7b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61d2c24233c52c2440cd285a3c3e97025fd6a7b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61d2c24233c52c2440cd285a3c3e97025fd6a7b9"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "3e0d8acf44c8603735c32b68c4519fd72f7ef2d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663827d3e5b2ae5fdbcc8b2b6591910b886af3b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663827d3e5b2ae5fdbcc8b2b6591910b886af3b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=663827d3e5b2ae5fdbcc8b2b6591910b886af3b2", "patch": "@@ -1,3 +1,12 @@\n+2011-06-21  Georg-Johann Lay  <avr@gjlay.de>\n+\t\n+\tPR target/33049\n+\t* config/avr/avr.md (extzv): New expander.\n+\t(*extzv): New insn.\n+\t(*extzv.qihi1, *extzv.qihi2): New insn-and-split.\n+\t* config/avr/constraints.md (C04): New constraint.\n+\t* doc/md.texi (Machine Constraints): Document it.\n+\n 2011-06-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/49489"}, {"sha": "0e5031ccf06a528b202c463fac44795cbc988fe5", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663827d3e5b2ae5fdbcc8b2b6591910b886af3b2/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663827d3e5b2ae5fdbcc8b2b6591910b886af3b2/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=663827d3e5b2ae5fdbcc8b2b6591910b886af3b2", "patch": "@@ -3539,3 +3539,65 @@\n     int byteno = INTVAL(operands[2]) / BITS_PER_UNIT;\n     operands[4] = simplify_gen_subreg (QImode, operands[0], <MODE>mode, byteno);\n   })\n+\n+(define_expand \"extzv\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"\")\n+        (zero_extract:QI (match_operand:QI 1 \"register_operand\"  \"\")\n+                         (match_operand:QI 2 \"const1_operand\" \"\")\n+                         (match_operand:QI 3 \"const_0_to_7_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*extzv\"\n+  [(set (match_operand:QI 0 \"register_operand\"                   \"=*d,*d,*d,*d,r\")\n+        (zero_extract:QI (match_operand:QI 1 \"register_operand\"     \"0,r,0,0,r\")\n+                         (const_int 1)\n+                         (match_operand:QI 2 \"const_0_to_7_operand\" \"L,L,P,C04,n\")))]\n+  \"\"\n+  \"@\n+\tandi %0,1\n+\tmov %0,%1\\;andi %0,1\n+\tlsr %0\\;andi %0,1\n+        swap %0\\;andi %0,1\n+\tbst %1,%2\\;clr %0\\;bld %0,0\"\n+  [(set_attr \"length\" \"1,2,2,2,3\")\n+   (set_attr \"cc\" \"set_zn,set_zn,set_zn,set_zn,clobber\")])\n+\n+(define_insn_and_split \"*extzv.qihi1\"\n+  [(set (match_operand:HI 0 \"register_operand\"                     \"=r\")\n+        (zero_extract:HI (match_operand:QI 1 \"register_operand\"     \"r\")\n+                         (const_int 1)\n+                         (match_operand:QI 2 \"const_0_to_7_operand\" \"n\")))]\n+  \"\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 3)\n+        (zero_extract:QI (match_dup 1)\n+                         (const_int 1)\n+                         (match_dup 2)))\n+   (set (match_dup 4)\n+        (const_int 0))]\n+  {\n+    operands[3] = simplify_gen_subreg (QImode, operands[0], HImode, 0);\n+    operands[4] = simplify_gen_subreg (QImode, operands[0], HImode, 1);\n+  })\n+\n+(define_insn_and_split \"*extzv.qihi2\"\n+  [(set (match_operand:HI 0 \"register_operand\"                      \"=r\")\n+        (zero_extend:HI \n+         (zero_extract:QI (match_operand:QI 1 \"register_operand\"     \"r\")\n+                          (const_int 1)\n+                          (match_operand:QI 2 \"const_0_to_7_operand\" \"n\"))))]\n+  \"\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 3)\n+        (zero_extract:QI (match_dup 1)\n+                         (const_int 1)\n+                         (match_dup 2)))\n+   (set (match_dup 4)\n+        (const_int 0))]\n+  {\n+    operands[3] = simplify_gen_subreg (QImode, operands[0], HImode, 0);\n+    operands[4] = simplify_gen_subreg (QImode, operands[0], HImode, 1);\n+  })"}, {"sha": "e754c79070bc64f355300a67b2a87834c59a7cdf", "filename": "gcc/config/avr/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663827d3e5b2ae5fdbcc8b2b6591910b886af3b2/gcc%2Fconfig%2Favr%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663827d3e5b2ae5fdbcc8b2b6591910b886af3b2/gcc%2Fconfig%2Favr%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fconstraints.md?ref=663827d3e5b2ae5fdbcc8b2b6591910b886af3b2", "patch": "@@ -107,3 +107,8 @@\n   \"A memory address based on Y or Z pointer with displacement.\"\n   (and (match_code \"mem\")\n        (match_test \"extra_constraint_Q (op)\")))\n+\n+(define_constraint \"C04\"\n+  \"Constant integer 4.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 4\")))"}, {"sha": "abe51f80727b9792f9fc89f59badd329798c8c55", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663827d3e5b2ae5fdbcc8b2b6591910b886af3b2/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663827d3e5b2ae5fdbcc8b2b6591910b886af3b2/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=663827d3e5b2ae5fdbcc8b2b6591910b886af3b2", "patch": "@@ -1773,6 +1773,9 @@ Integer constant in the range @minus{}6 @dots{} 5.\n \n @item Q\n A memory address based on Y or Z pointer with displacement.\n+\n+@item C04\n+Constant integer 4\n @end table\n \n @item Hewlett-Packard PA-RISC---@file{config/pa/pa.h}"}]}