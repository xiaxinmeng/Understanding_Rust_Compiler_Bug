{"sha": "a4a182c6984236c075965191eaedf7ae7ec4c0b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRhMTgyYzY5ODQyMzZjMDc1OTY1MTkxZWFlZGY3YWU3ZWM0YzBiNA==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2014-05-22T02:25:01Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2014-05-22T02:25:01Z"}, "message": "aarch64.c (aarch64_regno_regclass): Change CORE_REGS to GENERAL_REGS.\n\n2014-05-22  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* config/aarch64/aarch64.c (aarch64_regno_regclass) : Change CORE_REGS\n\tto GENERAL_REGS.\n\t(aarch64_secondary_reload) : LikeWise.\n\t(aarch64_class_max_nregs) : Remove CORE_REGS.\n\t* config/aarch64/aarch64.h (enum reg_class) : Remove CORE_REGS.\n\t(REG_CLASS_NAMES) : Likewise.\n\t(REG_CLASS_CONTENTS) : LikeWise.\n\t(INDEX_REG_CLASS) : Change CORE_REGS to GENERAL_REGS.\n\nFrom-SVN: r210735", "tree": {"sha": "0a921bbd50af8d3f4d336a13ea130cd4466e6dc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a921bbd50af8d3f4d336a13ea130cd4466e6dc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4a182c6984236c075965191eaedf7ae7ec4c0b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4a182c6984236c075965191eaedf7ae7ec4c0b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4a182c6984236c075965191eaedf7ae7ec4c0b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4a182c6984236c075965191eaedf7ae7ec4c0b4/comments", "author": null, "committer": null, "parents": [{"sha": "212f0ce105124189ba1083eab1106208d0ddae00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/212f0ce105124189ba1083eab1106208d0ddae00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/212f0ce105124189ba1083eab1106208d0ddae00"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "a1bf3a1653beccdcaa88a0bac453e2bc383be942", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a182c6984236c075965191eaedf7ae7ec4c0b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a182c6984236c075965191eaedf7ae7ec4c0b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4a182c6984236c075965191eaedf7ae7ec4c0b4", "patch": "@@ -1,3 +1,14 @@\n+2014-05-22  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* config/aarch64/aarch64.c (aarch64_regno_regclass) : Change CORE_REGS\n+\tto GENERAL_REGS.\n+\t(aarch64_secondary_reload) : LikeWise.\n+\t(aarch64_class_max_nregs) : Remove CORE_REGS.\n+\t* config/aarch64/aarch64.h (enum reg_class) : Remove CORE_REGS.\n+\t(REG_CLASS_NAMES) : Likewise.\n+\t(REG_CLASS_CONTENTS) : LikeWise.\n+\t(INDEX_REG_CLASS) : Change CORE_REGS to GENERAL_REGS.\n+\n 2014-05-21  Guozhi Wei  <carrot@google.com>\n \n \tPR target/61202"}, {"sha": "78ecc624762f5c3f0c38a7f0d0dc9baa2792d947", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a182c6984236c075965191eaedf7ae7ec4c0b4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a182c6984236c075965191eaedf7ae7ec4c0b4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a4a182c6984236c075965191eaedf7ae7ec4c0b4", "patch": "@@ -4073,7 +4073,7 @@ enum reg_class\n aarch64_regno_regclass (unsigned regno)\n {\n   if (GP_REGNUM_P (regno))\n-    return CORE_REGS;\n+    return GENERAL_REGS;\n \n   if (regno == SP_REGNUM)\n     return STACK_REG;\n@@ -4224,12 +4224,12 @@ aarch64_secondary_reload (bool in_p ATTRIBUTE_UNUSED, rtx x,\n   /* A TFmode or TImode memory access should be handled via an FP_REGS\n      because AArch64 has richer addressing modes for LDR/STR instructions\n      than LDP/STP instructions.  */\n-  if (!TARGET_GENERAL_REGS_ONLY && rclass == CORE_REGS\n+  if (!TARGET_GENERAL_REGS_ONLY && rclass == GENERAL_REGS\n       && GET_MODE_SIZE (mode) == 16 && MEM_P (x))\n     return FP_REGS;\n \n   if (rclass == FP_REGS && (mode == TImode || mode == TFmode) && CONSTANT_P(x))\n-      return CORE_REGS;\n+      return GENERAL_REGS;\n \n   return NO_REGS;\n }\n@@ -4360,7 +4360,6 @@ aarch64_class_max_nregs (reg_class_t regclass, enum machine_mode mode)\n {\n   switch (regclass)\n     {\n-    case CORE_REGS:\n     case POINTER_REGS:\n     case GENERAL_REGS:\n     case ALL_REGS:"}, {"sha": "5c1c4044c7ad36b2353f03b0c505b4495cb4a49b", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a182c6984236c075965191eaedf7ae7ec4c0b4/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a182c6984236c075965191eaedf7ae7ec4c0b4/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=a4a182c6984236c075965191eaedf7ae7ec4c0b4", "patch": "@@ -408,7 +408,6 @@ extern unsigned long aarch64_tune_flags;\n enum reg_class\n {\n   NO_REGS,\n-  CORE_REGS,\n   GENERAL_REGS,\n   STACK_REG,\n   POINTER_REGS,\n@@ -423,7 +422,6 @@ enum reg_class\n #define REG_CLASS_NAMES\t\t\t\t\\\n {\t\t\t\t\t\t\\\n   \"NO_REGS\",\t\t\t\t\t\\\n-  \"CORE_REGS\",\t\t\t\t\t\\\n   \"GENERAL_REGS\",\t\t\t\t\\\n   \"STACK_REG\",\t\t\t\t\t\\\n   \"POINTER_REGS\",\t\t\t\t\\\n@@ -435,7 +433,6 @@ enum reg_class\n #define REG_CLASS_CONTENTS\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00000000 },\t/* NO_REGS */\t\t\\\n-  { 0x7fffffff, 0x00000000, 0x00000003 },\t/* CORE_REGS */\t\t\\\n   { 0x7fffffff, 0x00000000, 0x00000003 },\t/* GENERAL_REGS */\t\\\n   { 0x80000000, 0x00000000, 0x00000000 },\t/* STACK_REG */\t\t\\\n   { 0xffffffff, 0x00000000, 0x00000003 },\t/* POINTER_REGS */\t\\\n@@ -446,7 +443,7 @@ enum reg_class\n \n #define REGNO_REG_CLASS(REGNO)\taarch64_regno_regclass (REGNO)\n \n-#define INDEX_REG_CLASS\tCORE_REGS\n+#define INDEX_REG_CLASS\tGENERAL_REGS\n #define BASE_REG_CLASS  POINTER_REGS\n \n /* Register pairs used to eliminate unneeded registers that point into"}]}