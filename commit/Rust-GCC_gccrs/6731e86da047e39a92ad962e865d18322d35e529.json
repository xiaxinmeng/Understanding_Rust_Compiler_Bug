{"sha": "6731e86da047e39a92ad962e865d18322d35e529", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjczMWU4NmRhMDQ3ZTM5YTkyYWQ5NjJlODY1ZDE4MzIyZDM1ZTUyOQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2005-03-06T18:26:53Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2005-03-06T18:26:53Z"}, "message": "file-format.exp (gcc_target_object_format): Add check for som format and hardcode object formats on hppa*-*-hpux*.\n\n\t* lib/file-format.exp (gcc_target_object_format): Add check for som\n        format and hardcode object formats on hppa*-*-hpux*.\n\t* lib/target-supports.exp (check_weak_available): Add check for som\n\tobject format.  Always return 0 on hppa*-*-hpux10*.\n\t* gcc.dg/titype-1.c, gcc.dg/uninit-C.c: Don't use TImode if __hppa__\n\tis defined.\n\t* objc.dg/stabs-1.m: hppa*64*-*-* doesn't have stabs.\n\nFrom-SVN: r95982", "tree": {"sha": "e8a24ee5419894bc974679d1708bf12c39cc30b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8a24ee5419894bc974679d1708bf12c39cc30b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6731e86da047e39a92ad962e865d18322d35e529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6731e86da047e39a92ad962e865d18322d35e529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6731e86da047e39a92ad962e865d18322d35e529", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6731e86da047e39a92ad962e865d18322d35e529/comments", "author": null, "committer": null, "parents": [{"sha": "b3df8be147fdad9c0fd27ea99deeef499e5fe853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3df8be147fdad9c0fd27ea99deeef499e5fe853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3df8be147fdad9c0fd27ea99deeef499e5fe853"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "e4a3c77aa91633a85159ab2e3ada088ef09eb04b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6731e86da047e39a92ad962e865d18322d35e529/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6731e86da047e39a92ad962e865d18322d35e529/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6731e86da047e39a92ad962e865d18322d35e529", "patch": "@@ -1,3 +1,15 @@\n+2005-03-06  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* lib/file-format.exp (gcc_target_object_format): Add check for som\n+        format and hardcode object formats on hppa*-*-hpux*.\n+\t* lib/target-supports.exp (check_weak_available): Add check for som\n+\tobject format.  Always return 0 on hppa*-*-hpux10*.\n+\n+\t* gcc.dg/titype-1.c, gcc.dg/uninit-C.c: Don't use TImode if __hppa__\n+\tis defined.\n+\n+\t* objc.dg/stabs-1.m: hppa*64*-*-* doesn't have stabs.\n+\n 2005-03-05  Steven G. Kargl  <kargls@comcast.net> \n \n \t* gfortran.dg/pr19936_1.f90: New test."}, {"sha": "1d0c570dafa94d6065ee04078a0bc60e883aeee9", "filename": "gcc/testsuite/gcc.dg/titype-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6731e86da047e39a92ad962e865d18322d35e529/gcc%2Ftestsuite%2Fgcc.dg%2Ftitype-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6731e86da047e39a92ad962e865d18322d35e529/gcc%2Ftestsuite%2Fgcc.dg%2Ftitype-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftitype-1.c?ref=6731e86da047e39a92ad962e865d18322d35e529", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run } */\n \n /* Not all platforms support TImode integers.  */\n-#if defined(__LP64__)\n+#if defined(__LP64__) && !defined(__hppa__)\n typedef int TItype __attribute__ ((mode (TI)));\n #else\n typedef long TItype;"}, {"sha": "741106cb4638b698ffc98bfd797164a7415c0736", "filename": "gcc/testsuite/gcc.dg/uninit-C.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6731e86da047e39a92ad962e865d18322d35e529/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-C.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6731e86da047e39a92ad962e865d18322d35e529/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-C.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-C.c?ref=6731e86da047e39a92ad962e865d18322d35e529", "patch": "@@ -3,7 +3,7 @@\n /* { dg-options \"-O -Wuninitialized\" } */\n \n /* Not all platforms support TImode integers.  */\n-#if defined(__LP64__)\n+#if defined(__LP64__) && !defined(__hppa__)\n typedef int TItype __attribute__ ((mode (TI)));\n #else\n typedef long TItype;"}, {"sha": "a1aa484455c557f922aa7672fec5eff6e0f11371", "filename": "gcc/testsuite/lib/file-format.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6731e86da047e39a92ad962e865d18322d35e529/gcc%2Ftestsuite%2Flib%2Ffile-format.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6731e86da047e39a92ad962e865d18322d35e529/gcc%2Ftestsuite%2Flib%2Ffile-format.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ffile-format.exp?ref=6731e86da047e39a92ad962e865d18322d35e529", "patch": "@@ -32,6 +32,13 @@ proc gcc_target_object_format { } {\n     } elseif { [string match \"*-*-darwin*\" $target_triplet] } {\n \t# Darwin doesn't necessarily have objdump, so hand-code it.\n \tset gcc_target_object_format_saved mach-o\n+    } elseif { [string match \"hppa*-*-hpux*\" $target_triplet] } {\n+\t# HP-UX doesn't necessarily have objdump, so hand-code it.\n+\tif { [string match \"hppa*64*-*-hpux*\" $target_triplet] } {\n+\t  set gcc_target_object_format_saved elf\n+\t} else {\n+\t  set gcc_target_object_format_saved som\n+\t}\n     } else {\n         set objdump_name [find_binutils_prog objdump]\n         set open_file [open objfmtst.c w]\n@@ -66,6 +73,9 @@ proc gcc_target_object_format { } {\n                 pe       {\n                     set gcc_target_object_format_saved pe\n                 }\n+                som          {\n+                    set gcc_target_object_format_saved som\n+                } \n                 default      {\n                     verbose \"Unknown file format: $objformat\" 3\n                     set gcc_target_object_format_saved unknown"}, {"sha": "7f6c499dc6f53bc5717d04f1e0bc90d109362f0c", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6731e86da047e39a92ad962e865d18322d35e529/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6731e86da047e39a92ad962e865d18322d35e529/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=6731e86da047e39a92ad962e865d18322d35e529", "patch": "@@ -87,6 +87,12 @@ proc check_weak_available { } {\n \treturn 1\n     }\n \n+    # HP-UX 10.X doesn't support it\n+\n+    if { [regexp \"hppa.*hpux10\" $target_triplet] } {\n+\treturn 0\n+    }\n+\n     # ELF and ECOFF support it. a.out does with gas/gld but may also with\n     # other linkers, so we should try it\n \n@@ -97,6 +103,7 @@ proc check_weak_available { } {\n         ecoff    { return 1 }\n         a.out    { return 1 }\n \tmach-o\t { return 1 }\n+\tsom\t { return 1 }\n         unknown  { return -1 }\n         default  { return 0 }\n     }"}, {"sha": "6b713c2b9bed2e29ada8f9c4dfdb4025586daa76", "filename": "gcc/testsuite/objc.dg/stabs-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6731e86da047e39a92ad962e865d18322d35e529/gcc%2Ftestsuite%2Fobjc.dg%2Fstabs-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6731e86da047e39a92ad962e865d18322d35e529/gcc%2Ftestsuite%2Fobjc.dg%2Fstabs-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstabs-1.m?ref=6731e86da047e39a92ad962e865d18322d35e529", "patch": "@@ -2,7 +2,7 @@\n /* Contributed by Ziemowit Laski <zlaski@apple.com> */\n \n /* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* alpha*-*-* ia64-*-* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* } { \"*\" } { \"\" } } */\n /* { dg-options \"-gstabs\" } */\n \n @interface MyClass"}]}