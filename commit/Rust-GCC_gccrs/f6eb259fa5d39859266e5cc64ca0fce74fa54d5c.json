{"sha": "f6eb259fa5d39859266e5cc64ca0fce74fa54d5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZlYjI1OWZhNWQzOTg1OTI2NmU1Y2M2NGNhMGZjZTc0ZmE1NGQ1Yw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-19T12:13:41Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-19T12:13:41Z"}, "message": "2003-03-19  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/FileOutputStream.java\n\t(FileOutputStream): New constructor, merged from classpath.\n\t* java/io/FileWriter.java\n\t(FileWriter): New constructor, merged from classpath.\n\nFrom-SVN: r64574", "tree": {"sha": "0dcf614afa94acb02e8af772cc7a0aae73972cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dcf614afa94acb02e8af772cc7a0aae73972cc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6eb259fa5d39859266e5cc64ca0fce74fa54d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6eb259fa5d39859266e5cc64ca0fce74fa54d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6eb259fa5d39859266e5cc64ca0fce74fa54d5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6eb259fa5d39859266e5cc64ca0fce74fa54d5c/comments", "author": null, "committer": null, "parents": [{"sha": "31488c64a711d6d61caecd2718a751535dec7eaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31488c64a711d6d61caecd2718a751535dec7eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31488c64a711d6d61caecd2718a751535dec7eaa"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "5d2d04776717a6070ed0d4593ecc4da87b3aa732", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6eb259fa5d39859266e5cc64ca0fce74fa54d5c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6eb259fa5d39859266e5cc64ca0fce74fa54d5c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f6eb259fa5d39859266e5cc64ca0fce74fa54d5c", "patch": "@@ -1,3 +1,10 @@\n+2003-03-19  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/FileOutputStream.java\n+\t(FileOutputStream): New constructor, merged from classpath.\n+\t* java/io/FileWriter.java\n+\t(FileWriter): New constructor, merged from classpath.\n+\n 2003-03-18  Michael Koch  <konqueror@gmx.de>\n \n \t* java/awt/ScrollPane.java"}, {"sha": "eee3449576ec6cadfc0abfb7378c9347db865347", "filename": "libjava/java/io/FileOutputStream.java", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6eb259fa5d39859266e5cc64ca0fce74fa54d5c/libjava%2Fjava%2Fio%2FFileOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6eb259fa5d39859266e5cc64ca0fce74fa54d5c/libjava%2Fjava%2Fio%2FFileOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileOutputStream.java?ref=f6eb259fa5d39859266e5cc64ca0fce74fa54d5c", "patch": "@@ -47,6 +47,32 @@ public FileOutputStream (File file)\n     this (file.getPath(), false);\n   }\n \n+  /**\n+   * This method initializes a <code>FileOutputStream</code> object to write\n+   * to the specified <code>File</code> object.  The file is created if it \n+   * does not exist, and the bytes written are written starting at the \n+   * beginning of the file if the <code>append</code> parameter is \n+   * <code>false</code>.  Otherwise bytes are written at the end of the\n+   * file.\n+   * <p>\n+   * Before opening a file, a security check is performed by calling the\n+   * <code>checkWrite</code> method of the <code>SecurityManager</code> (if\n+   * one exists) with the name of the file to be opened.  An exception is\n+   * thrown if writing is not allowed. \n+   *\n+   * @param file The <code>File</code> object this stream should write to\n+   * @param append <code>true</code> to append bytes to the end of the file,\n+   * or <code>false</code> to write bytes to the beginning\n+   *\n+   * @exception SecurityException If write access to the file is not allowed\n+   * @exception FileNotFoundException If a non-security error occurs\n+   */\n+  public\n+  FileOutputStream(File file, boolean append) throws FileNotFoundException\n+  {\n+    this(file.getPath(), append);\n+  }\n+\n   public FileOutputStream (FileDescriptor fdObj)\n     throws SecurityException\n   {"}, {"sha": "b7f8579f22f1ea38075f992c6d15045a29b61779", "filename": "libjava/java/io/FileWriter.java", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6eb259fa5d39859266e5cc64ca0fce74fa54d5c/libjava%2Fjava%2Fio%2FFileWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6eb259fa5d39859266e5cc64ca0fce74fa54d5c/libjava%2Fjava%2Fio%2FFileWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileWriter.java?ref=f6eb259fa5d39859266e5cc64ca0fce74fa54d5c", "patch": "@@ -1,5 +1,5 @@\n /* FileWriter.java -- Convenience class for writing to files.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -77,6 +77,25 @@ public FileWriter(File file) throws SecurityException, IOException\n \n   /*************************************************************************/\n \n+  /**\n+    * This method initializes a new <code>FileWriter</code> object to write\n+    * to the specified <code>File</code> object.\n+    *\n+    * @param file The <code>File</code> object to write to.\n+    * @param append <code>true</code> to start adding data at the end of the\n+    *               file, <code>false</code> otherwise.\n+    *\n+    * @param SecurityException If writing to this file is forbidden by the\n+    *                          <code>SecurityManager</code>.\n+    * @param IOException If any other error occurs\n+    */\n+  public FileWriter(File file, boolean append) throws IOException\n+  {\n+    super(new FileOutputStream(file, append));\n+  }\n+\n+  /*************************************************************************/\n+\n   /**\n     * This method initializes a new <code>FileWriter</code> object to write\n     * to the specified <code>FileDescriptor</code> object."}]}