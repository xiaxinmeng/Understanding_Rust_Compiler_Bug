{"sha": "a714d2b000ad7798fd1f7b1f73c0295228ec58bd", "node_id": "C_kwDOANBUbNoAKGE3MTRkMmIwMDBhZDc3OThmZDFmN2IxZjczYzAyOTUyMjhlYzU4YmQ", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-11-30T09:51:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-05T11:32:34Z"}, "message": "[Ada] Fix sharing of formal parameters between wrapper spec and body\n\ngcc/ada/\n\n\t* exp_ch3.adb (Make_Controlling_Function_Wrappers): Create\n\tdistinct copies of parameter lists for spec and body with\n\tCopy_Parameter_List; cleanup.\n\t(Make_Null_Procedure_Specs): Fix style in comments; remove a\n\tpotentially unnecessary initialization of a local variable.", "tree": {"sha": "5ad65e9770254cb4359b4735eaca7ef6f7e58a15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ad65e9770254cb4359b4735eaca7ef6f7e58a15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a714d2b000ad7798fd1f7b1f73c0295228ec58bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a714d2b000ad7798fd1f7b1f73c0295228ec58bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a714d2b000ad7798fd1f7b1f73c0295228ec58bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a714d2b000ad7798fd1f7b1f73c0295228ec58bd/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f93c574cb78938c7e43b8dc8705ca072f436ab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f93c574cb78938c7e43b8dc8705ca072f436ab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f93c574cb78938c7e43b8dc8705ca072f436ab9"}], "stats": {"total": 139, "additions": 64, "deletions": 75}, "files": [{"sha": "946439005a98934109045c453b53f3723b4707dd", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 64, "deletions": 75, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a714d2b000ad7798fd1f7b1f73c0295228ec58bd/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a714d2b000ad7798fd1f7b1f73c0295228ec58bd/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=a714d2b000ad7798fd1f7b1f73c0295228ec58bd", "patch": "@@ -9591,19 +9591,41 @@ package body Exp_Ch3 is\n       Decl_List : out List_Id;\n       Body_List : out List_Id)\n    is\n-      Loc         : constant Source_Ptr := Sloc (Tag_Typ);\n+      Loc : constant Source_Ptr := Sloc (Tag_Typ);\n+\n+      function Make_Wrapper_Specification (Subp : Entity_Id) return Node_Id;\n+      --  Returns a function specification with the same profile as Subp\n+\n+      --------------------------------\n+      -- Make_Wrapper_Specification --\n+      --------------------------------\n+\n+      function Make_Wrapper_Specification (Subp : Entity_Id) return Node_Id is\n+      begin\n+         return\n+           Make_Function_Specification (Loc,\n+             Defining_Unit_Name       =>\n+               Make_Defining_Identifier (Loc,\n+                 Chars => Chars (Subp)),\n+             Parameter_Specifications =>\n+               Copy_Parameter_List (Subp),\n+             Result_Definition        =>\n+               New_Occurrence_Of (Etype (Subp), Loc));\n+      end Make_Wrapper_Specification;\n+\n       Prim_Elmt   : Elmt_Id;\n       Subp        : Entity_Id;\n       Actual_List : List_Id;\n-      Formal_List : List_Id;\n       Formal      : Entity_Id;\n       Par_Formal  : Entity_Id;\n       Formal_Node : Node_Id;\n       Func_Body   : Node_Id;\n       Func_Decl   : Node_Id;\n-      Func_Spec   : Node_Id;\n+      Func_Id     : Entity_Id;\n       Return_Stmt : Node_Id;\n \n+   --  Start of processing for Make_Controlling_Function_Wrappers\n+\n    begin\n       Decl_List := New_List;\n       Body_List := New_List;\n@@ -9674,43 +9696,10 @@ package body Exp_Ch3 is\n                end;\n             end if;\n \n-            Formal_List := No_List;\n-            Formal := First_Formal (Subp);\n-\n-            if Present (Formal) then\n-               Formal_List := New_List;\n-\n-               while Present (Formal) loop\n-                  Append\n-                    (Make_Parameter_Specification\n-                       (Loc,\n-                        Defining_Identifier =>\n-                          Make_Defining_Identifier (Sloc (Formal),\n-                            Chars => Chars (Formal)),\n-                        In_Present  => In_Present (Parent (Formal)),\n-                        Out_Present => Out_Present (Parent (Formal)),\n-                        Null_Exclusion_Present =>\n-                          Null_Exclusion_Present (Parent (Formal)),\n-                        Parameter_Type =>\n-                          New_Occurrence_Of (Etype (Formal), Loc),\n-                        Expression =>\n-                          New_Copy_Tree (Expression (Parent (Formal)))),\n-                     Formal_List);\n-\n-                  Next_Formal (Formal);\n-               end loop;\n-            end if;\n-\n-            Func_Spec :=\n-              Make_Function_Specification (Loc,\n-                Defining_Unit_Name       =>\n-                  Make_Defining_Identifier (Loc,\n-                    Chars => Chars (Subp)),\n-                Parameter_Specifications => Formal_List,\n-                Result_Definition        =>\n-                  New_Occurrence_Of (Etype (Subp), Loc));\n+            Func_Decl :=\n+              Make_Subprogram_Declaration (Loc,\n+                Specification => Make_Wrapper_Specification (Subp));\n \n-            Func_Decl := Make_Subprogram_Declaration (Loc, Func_Spec);\n             Append_To (Decl_List, Func_Decl);\n \n             --  Build a wrapper body that calls the parent function. The body\n@@ -9723,34 +9712,35 @@ package body Exp_Ch3 is\n \n             Formal      := First_Formal (Subp);\n             Par_Formal  := First_Formal (Alias (Subp));\n-            Formal_Node := First (Formal_List);\n+            Formal_Node :=\n+              First (Parameter_Specifications (Specification (Func_Decl)));\n \n             if Present (Formal) then\n                Actual_List := New_List;\n-            else\n-               Actual_List := No_List;\n-            end if;\n \n-            while Present (Formal) loop\n-               if Is_Controlling_Formal (Formal) then\n-                  Append_To (Actual_List,\n-                    Make_Type_Conversion (Loc,\n-                      Subtype_Mark =>\n-                        New_Occurrence_Of (Etype (Par_Formal), Loc),\n-                      Expression   =>\n+               while Present (Formal) loop\n+                  if Is_Controlling_Formal (Formal) then\n+                     Append_To (Actual_List,\n+                       Make_Type_Conversion (Loc,\n+                         Subtype_Mark =>\n+                           New_Occurrence_Of (Etype (Par_Formal), Loc),\n+                         Expression   =>\n+                           New_Occurrence_Of\n+                             (Defining_Identifier (Formal_Node), Loc)));\n+                  else\n+                     Append_To\n+                       (Actual_List,\n                         New_Occurrence_Of\n-                          (Defining_Identifier (Formal_Node), Loc)));\n-               else\n-                  Append_To\n-                    (Actual_List,\n-                     New_Occurrence_Of\n-                       (Defining_Identifier (Formal_Node), Loc));\n-               end if;\n+                          (Defining_Identifier (Formal_Node), Loc));\n+                  end if;\n \n-               Next_Formal (Formal);\n-               Next_Formal (Par_Formal);\n-               Next (Formal_Node);\n-            end loop;\n+                  Next_Formal (Formal);\n+                  Next_Formal (Par_Formal);\n+                  Next (Formal_Node);\n+               end loop;\n+            else\n+               Actual_List := No_List;\n+            end if;\n \n             Return_Stmt :=\n               Make_Simple_Return_Statement (Loc,\n@@ -9765,27 +9755,25 @@ package body Exp_Ch3 is\n \n             Func_Body :=\n               Make_Subprogram_Body (Loc,\n-                Specification              => New_Copy_Tree (Func_Spec),\n+                Specification              =>\n+                  Make_Wrapper_Specification (Subp),\n                 Declarations               => Empty_List,\n                 Handled_Statement_Sequence =>\n                   Make_Handled_Sequence_Of_Statements (Loc,\n                     Statements => New_List (Return_Stmt)));\n \n-            Set_Defining_Unit_Name\n-              (Specification (Func_Body),\n-                Make_Defining_Identifier (Loc, Chars (Subp)));\n-\n             Append_To (Body_List, Func_Body);\n \n             --  Replace the inherited function with the wrapper function in the\n             --  primitive operations list. We add the minimum decoration needed\n             --  to override interface primitives.\n \n-            Mutate_Ekind (Defining_Unit_Name (Func_Spec), E_Function);\n-            Set_Is_Wrapper (Defining_Unit_Name (Func_Spec));\n+            Func_Id := Defining_Unit_Name (Specification (Func_Decl));\n \n-            Override_Dispatching_Operation\n-              (Tag_Typ, Subp, New_Op => Defining_Unit_Name (Func_Spec));\n+            Mutate_Ekind (Func_Id, E_Function);\n+            Set_Is_Wrapper (Func_Id);\n+\n+            Override_Dispatching_Operation (Tag_Typ, Subp, New_Op => Func_Id);\n          end if;\n \n       <<Next_Prim>>\n@@ -10297,7 +10285,6 @@ package body Exp_Ch3 is\n          if Present (Parent_Subp)\n            and then Is_Null_Interface_Primitive (Parent_Subp)\n          then\n-            Formal_List := No_List;\n             Formal := First_Formal (Subp);\n \n             if Present (Formal) then\n@@ -10311,16 +10298,16 @@ package body Exp_Ch3 is\n                     New_Copy_Tree (Parent (Formal), New_Sloc => Loc);\n \n                   --  Generate a new defining identifier for the new formal.\n-                  --  required because New_Copy_Tree does not duplicate\n+                  --  Required because New_Copy_Tree does not duplicate\n                   --  semantic fields (except itypes).\n \n                   Set_Defining_Identifier (New_Param_Spec,\n                     Make_Defining_Identifier (Sloc (Formal),\n                       Chars => Chars (Formal)));\n \n-                  --  For controlling arguments we must change their\n-                  --  parameter type to reference the tagged type (instead\n-                  --  of the interface type)\n+                  --  For controlling arguments we must change their parameter\n+                  --  type to reference the tagged type (instead of the\n+                  --  interface type).\n \n                   if Is_Controlling_Formal (Formal) then\n                      if Nkind (Parameter_Type (Parent (Formal))) = N_Identifier\n@@ -10340,6 +10327,8 @@ package body Exp_Ch3 is\n \n                   Next_Formal (Formal);\n                end loop;\n+            else\n+               Formal_List := No_List;\n             end if;\n \n             Append_To (Decl_List,"}]}