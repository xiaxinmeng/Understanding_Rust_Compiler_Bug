{"sha": "2bfe0527cd744a6f526fe11dd6c11ab39ad0a653", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJmZTA1MjdjZDc0NGE2ZjUyNmZlMTFkZDZjMTFhYjM5YWQwYTY1Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-11-02T01:31:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-11-02T01:31:40Z"}, "message": "semantics.c (call_stack, [...]): New.\n\n\t* semantics.c (call_stack, call_stack_tick, cx_error_context): New.\n\t(last_cx_error_tick, push_cx_call_context, pop_cx_call_context): New.\n\t(cxx_eval_call_expression): Call push/pop_cx_call_context instead\n\tof giving follow-on errors.\n\t* error.c (maybe_print_constexpr_context): New.\n\t(cp_diagnostic_starter): Call it.\n\t* cp-tree.h: Declare cx_error_context.\n\nFrom-SVN: r166169", "tree": {"sha": "5361d6c7e3709d19625d07d0d987fa9edd7ff5db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5361d6c7e3709d19625d07d0d987fa9edd7ff5db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bfe0527cd744a6f526fe11dd6c11ab39ad0a653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bfe0527cd744a6f526fe11dd6c11ab39ad0a653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bfe0527cd744a6f526fe11dd6c11ab39ad0a653", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bfe0527cd744a6f526fe11dd6c11ab39ad0a653/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f"}], "stats": {"total": 88, "additions": 76, "deletions": 12}, "files": [{"sha": "df32c8a27024c39ed34d766a4f517d96a35f643c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfe0527cd744a6f526fe11dd6c11ab39ad0a653/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfe0527cd744a6f526fe11dd6c11ab39ad0a653/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2bfe0527cd744a6f526fe11dd6c11ab39ad0a653", "patch": "@@ -1,5 +1,13 @@\n 2010-11-01  Jason Merrill  <jason@redhat.com>\n \n+\t* semantics.c (call_stack, call_stack_tick, cx_error_context): New.\n+\t(last_cx_error_tick, push_cx_call_context, pop_cx_call_context): New.\n+\t(cxx_eval_call_expression): Call push/pop_cx_call_context instead\n+\tof giving follow-on errors.\n+\t* error.c (maybe_print_constexpr_context): New.\n+\t(cp_diagnostic_starter): Call it.\n+\t* cp-tree.h: Declare cx_error_context.\n+\n \t* semantics.c (cxx_eval_constant_expression): Explain\n \tunacceptable use of variable better.\n "}, {"sha": "f57efb91acf89574236c09972cee9edb740aec76", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfe0527cd744a6f526fe11dd6c11ab39ad0a653/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfe0527cd744a6f526fe11dd6c11ab39ad0a653/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2bfe0527cd744a6f526fe11dd6c11ab39ad0a653", "patch": "@@ -5246,6 +5246,7 @@ extern tree maybe_constant_value (tree);\n extern tree maybe_constant_init (tree);\n extern bool is_sub_constant_expr (tree);\n extern bool reduced_constant_expression_p (tree);\n+extern VEC(tree,heap)* cx_error_context (void);\n \n enum {\n   BCS_NO_SCOPE = 1,"}, {"sha": "6f60c06887ce3ef460ce8d92b958dca24b541f12", "filename": "gcc/cp/error.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfe0527cd744a6f526fe11dd6c11ab39ad0a653/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfe0527cd744a6f526fe11dd6c11ab39ad0a653/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=2bfe0527cd744a6f526fe11dd6c11ab39ad0a653", "patch": "@@ -86,6 +86,7 @@ static void dump_scope (tree, int);\n static void dump_template_parms (tree, int, int);\n static int get_non_default_template_args_count (tree, int);\n static const char *function_category (tree);\n+static void maybe_print_constexpr_context (diagnostic_context *);\n static void maybe_print_instantiation_context (diagnostic_context *);\n static void print_instantiation_full_context (diagnostic_context *);\n static void print_instantiation_partial_context (diagnostic_context *,\n@@ -2635,6 +2636,7 @@ cp_diagnostic_starter (diagnostic_context *context,\n   diagnostic_report_current_module (context);\n   cp_print_error_function (context, diagnostic);\n   maybe_print_instantiation_context (context);\n+  maybe_print_constexpr_context (context);\n   pp_base_set_prefix (context->printer, diagnostic_build_prefix (context,\n \t\t\t\t\t\t\t\t diagnostic));\n }\n@@ -2955,6 +2957,31 @@ print_instantiation_context (void)\n   diagnostic_flush_buffer (global_dc);\n }\n \f\n+/* Report what constexpr call(s) we're trying to expand, if any.  */\n+\n+void\n+maybe_print_constexpr_context (diagnostic_context *context)\n+{\n+  VEC(tree,heap) *call_stack = cx_error_context ();\n+  unsigned ix;\n+  tree t;\n+\n+  FOR_EACH_VEC_ELT (tree, call_stack, ix, t)\n+    {\n+      expanded_location xloc = expand_location (EXPR_LOCATION (t));\n+      const char *s = expr_as_string (t, 0);\n+      if (context->show_column)\n+\tpp_verbatim (context->printer,\n+\t\t     _(\"%s:%d:%d:   in constexpr expansion of %qs\"),\n+\t\t     xloc.file, xloc.line, xloc.column, s);\n+      else\n+\tpp_verbatim (context->printer,\n+\t\t     _(\"%s:%d:   in constexpr expansion of %qs\"),\n+\t\t     xloc.file, xloc.line, s);\n+      pp_base_newline (context->printer);\n+    }\n+}\n+\f\n /* Called from output_format -- during diagnostic message processing --\n    to handle C++ specific format specifier with the following meanings:\n    %A   function argument-list."}, {"sha": "32154108107538aadea97c054a7428e05ee1e3cb", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfe0527cd744a6f526fe11dd6c11ab39ad0a653/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfe0527cd744a6f526fe11dd6c11ab39ad0a653/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2bfe0527cd744a6f526fe11dd6c11ab39ad0a653", "patch": "@@ -5805,6 +5805,40 @@ cxx_bind_parameters_in_call (const constexpr_call *old_call, tree t,\n     }\n }\n \n+/* Variables and functions to manage constexpr call expansion context.\n+   These do not need to be marked for PCH or GC.  */\n+\n+static VEC(tree,heap) *call_stack = NULL;\n+static int call_stack_tick;\n+static int last_cx_error_tick;\n+\n+static void\n+push_cx_call_context (tree call)\n+{\n+  ++call_stack_tick;\n+  if (!EXPR_HAS_LOCATION (call))\n+    SET_EXPR_LOCATION (call, input_location);\n+  VEC_safe_push (tree, heap, call_stack, call);\n+}\n+\n+static void\n+pop_cx_call_context (void)\n+{\n+  ++call_stack_tick;\n+  VEC_pop (tree, call_stack);\n+}\n+\n+VEC(tree,heap) *\n+cx_error_context (void)\n+{\n+  VEC(tree,heap) *r = NULL;\n+  if (call_stack_tick != last_cx_error_tick\n+      && !VEC_empty (tree, call_stack))\n+    r = call_stack;\n+  last_cx_error_tick = call_stack_tick;\n+  return r;\n+}\n+\n /* Subroutine of cxx_eval_constant_expression.\n    Evaluate the call expression tree T in the context of OLD_CALL expression\n    evaluation.  */\n@@ -5814,13 +5848,11 @@ cxx_eval_call_expression (const constexpr_call *old_call, tree t,\n \t\t\t  bool allow_non_constant, bool addr,\n \t\t\t  bool *non_constant_p)\n {\n-  location_t loc = EXPR_LOCATION (t);\n+  location_t loc = EXPR_LOC_OR_HERE (t);\n   tree fun = get_function_named_in_call (t);\n   tree result;\n   constexpr_call new_call = { NULL, NULL, NULL, 0 };\n   constexpr_call **slot;\n-  if (loc == UNKNOWN_LOCATION)\n-    loc = input_location;\n   if (TREE_CODE (fun) != FUNCTION_DECL)\n     {\n       /* Might be a constexpr function pointer.  */\n@@ -5875,6 +5907,8 @@ cxx_eval_call_expression (const constexpr_call *old_call, tree t,\n   if (*non_constant_p)\n     return t;\n \n+  push_cx_call_context (t);\n+\n   new_call.hash\n     = iterative_hash_template_arg (new_call.bindings,\n \t\t\t\t   constexpr_fundef_hash (new_call.fundef));\n@@ -5933,13 +5967,7 @@ cxx_eval_call_expression (const constexpr_call *old_call, tree t,\n \t}\n     }\n \n-  if (result == error_mark_node)\n-    {\n-      if (!allow_non_constant)\n-\terror_at (loc, \"in expansion of %qE\", t);\n-      *non_constant_p = true;\n-      result = t;\n-    }\n+  pop_cx_call_context ();\n   return result;\n }\n "}, {"sha": "8294afa98373f1142600a9f4f9d0ee7e1c7c7484", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-neg1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfe0527cd744a6f526fe11dd6c11ab39ad0a653/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfe0527cd744a6f526fe11dd6c11ab39ad0a653/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg1.C?ref=2bfe0527cd744a6f526fe11dd6c11ab39ad0a653", "patch": "@@ -18,7 +18,7 @@ constexpr pixel::pixel(int a)\n \n // error: square not defined, so small(2) not constant (5.19), so constexpr\n // not satisfied\n-constexpr pixel small(2);\t// { dg-error \"\" }\n+constexpr pixel small(2);\t// { dg-message \"in constexpr expansion\" }\n \n // error: not for parameters\n int next(constexpr int x) {\t// { dg-error \"parameter\" }"}, {"sha": "f1ef9dc7d0dc257311b01f35f03c122b70a92861", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-throw.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfe0527cd744a6f526fe11dd6c11ab39ad0a653/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-throw.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfe0527cd744a6f526fe11dd6c11ab39ad0a653/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-throw.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-throw.C?ref=2bfe0527cd744a6f526fe11dd6c11ab39ad0a653", "patch": "@@ -4,5 +4,5 @@ constexpr int may_throw(bool decide) {\n \treturn decide ? 42 : throw -1; // { dg-error \"throw\" }\n }\n \n-constexpr int x = may_throw(false); // { dg-error \"may_throw\" }\n+constexpr int x = may_throw(false); // { dg-message \"may_throw\" }\n constexpr int y = may_throw(true);"}]}