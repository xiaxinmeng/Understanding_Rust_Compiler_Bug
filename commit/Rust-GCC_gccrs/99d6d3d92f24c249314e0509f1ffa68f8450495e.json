{"sha": "99d6d3d92f24c249314e0509f1ffa68f8450495e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlkNmQzZDkyZjI0YzI0OTMxNGUwNTA5ZjFmZmE2OGY4NDUwNDk1ZQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-26T16:40:35Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-30T10:51:35Z"}, "message": "d: Factor aggregate_initializer_decl to set the sinit for aggregate declarations.\n\nThe self-hosted implementation of the D front-end changes the type of\n`sinit' to a void pointer, which requires an explicit cast to `tree'.\n\ngcc/d/ChangeLog:\n\n\t* decl.cc (DeclVisitor::visit (StructDeclaration *)): Don't use sinit\n\tfor declaration directly.\n\t(DeclVisitor::visit (ClassDeclaration *)): Likewise.\n\t(aggregate_initializer_decl): Likewise.  Set sinit after creating.", "tree": {"sha": "01720a8940e9dc5ae82dd9452e6b111a8bf79f9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01720a8940e9dc5ae82dd9452e6b111a8bf79f9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99d6d3d92f24c249314e0509f1ffa68f8450495e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99d6d3d92f24c249314e0509f1ffa68f8450495e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99d6d3d92f24c249314e0509f1ffa68f8450495e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99d6d3d92f24c249314e0509f1ffa68f8450495e/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b52a1086c1358a7694ebe0c7610058c48e93b22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b52a1086c1358a7694ebe0c7610058c48e93b22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b52a1086c1358a7694ebe0c7610058c48e93b22"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "59991c3c2557fb4757acd03ad68e7e38fa2adc89", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d6d3d92f24c249314e0509f1ffa68f8450495e/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d6d3d92f24c249314e0509f1ffa68f8450495e/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=99d6d3d92f24c249314e0509f1ffa68f8450495e", "patch": "@@ -386,9 +386,9 @@ class DeclVisitor : public Visitor\n       create_typeinfo (d->type, NULL);\n \n     /* Generate static initializer.  */\n-    d->sinit = aggregate_initializer_decl (d);\n-    DECL_INITIAL (d->sinit) = layout_struct_initializer (d);\n-    d_finish_decl (d->sinit);\n+    tree sinit = aggregate_initializer_decl (d);\n+    DECL_INITIAL (sinit) = layout_struct_initializer (d);\n+    d_finish_decl (sinit);\n \n     /* Put out the members.  There might be static constructors in the members\n        list, and they cannot be put in separate object files.  */\n@@ -496,11 +496,11 @@ class DeclVisitor : public Visitor\n     /* Generate C symbols.  */\n     d->csym = get_classinfo_decl (d);\n     d->vtblsym = get_vtable_decl (d);\n-    d->sinit = aggregate_initializer_decl (d);\n+    tree sinit = aggregate_initializer_decl (d);\n \n     /* Generate static initializer.  */\n-    DECL_INITIAL (d->sinit) = layout_class_initializer (d);\n-    d_finish_decl (d->sinit);\n+    DECL_INITIAL (sinit) = layout_class_initializer (d);\n+    d_finish_decl (sinit);\n \n     /* Put out the TypeInfo.  */\n     if (have_typeinfo_p (Type::dtypeinfo))\n@@ -2151,7 +2151,7 @@ tree\n aggregate_initializer_decl (AggregateDeclaration *decl)\n {\n   if (decl->sinit)\n-    return decl->sinit;\n+    return (tree) decl->sinit;\n \n   /* Class is a reference, want the record type.  */\n   tree type = build_ctype (decl->type);\n@@ -2161,20 +2161,21 @@ aggregate_initializer_decl (AggregateDeclaration *decl)\n \n   tree ident = mangle_internal_decl (decl, \"__init\", \"Z\");\n \n-  decl->sinit = declare_extern_var (ident, type);\n-  DECL_LANG_SPECIFIC (decl->sinit) = build_lang_decl (NULL);\n+  tree sinit = declare_extern_var (ident, type);\n+  DECL_LANG_SPECIFIC (sinit) = build_lang_decl (NULL);\n \n-  DECL_CONTEXT (decl->sinit) = type;\n-  TREE_READONLY (decl->sinit) = 1;\n+  DECL_CONTEXT (sinit) = type;\n+  TREE_READONLY (sinit) = 1;\n \n   /* Honor struct alignment set by user.  */\n   if (sd && sd->alignment != STRUCTALIGN_DEFAULT)\n     {\n-      SET_DECL_ALIGN (decl->sinit, sd->alignment * BITS_PER_UNIT);\n-      DECL_USER_ALIGN (decl->sinit) = true;\n+      SET_DECL_ALIGN (sinit, sd->alignment * BITS_PER_UNIT);\n+      DECL_USER_ALIGN (sinit) = true;\n     }\n \n-  return decl->sinit;\n+  decl->sinit = sinit;\n+  return sinit;\n }\n \n /* Generate the data for the static initializer.  */"}]}