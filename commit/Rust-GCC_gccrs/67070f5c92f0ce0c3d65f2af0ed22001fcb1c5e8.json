{"sha": "67070f5c92f0ce0c3d65f2af0ed22001fcb1c5e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcwNzBmNWM5MmYwY2UwYzNkNjVmMmFmMGVkMjIwMDFmY2IxYzVlOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-04-07T03:18:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-04-07T03:18:52Z"}, "message": "alpha.c (reg_no_subreg_operand): New function.\n\n        * alpha.c (reg_no_subreg_operand): New function.\n        * alpha.h (PREDICATE_CODES): Add it.\n        * alpha.md (floatdi?f patterns): Use it for op1.\n\nFrom-SVN: r26232", "tree": {"sha": "a1c3f443e9bc052b4eef4266dbb104e6ec579532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1c3f443e9bc052b4eef4266dbb104e6ec579532"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67070f5c92f0ce0c3d65f2af0ed22001fcb1c5e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67070f5c92f0ce0c3d65f2af0ed22001fcb1c5e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67070f5c92f0ce0c3d65f2af0ed22001fcb1c5e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67070f5c92f0ce0c3d65f2af0ed22001fcb1c5e8/comments", "author": null, "committer": null, "parents": [{"sha": "d22cba0ade5f4674235583b48ba750f7488738b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d22cba0ade5f4674235583b48ba750f7488738b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d22cba0ade5f4674235583b48ba750f7488738b4"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "39e11f7292c627c795f0cb66ffa20bcb579ff85e", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67070f5c92f0ce0c3d65f2af0ed22001fcb1c5e8/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67070f5c92f0ce0c3d65f2af0ed22001fcb1c5e8/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=67070f5c92f0ce0c3d65f2af0ed22001fcb1c5e8", "patch": "@@ -849,7 +849,7 @@ reg_not_elim_operand (op, mode)\n   return register_operand (op, mode);\n }\n \n-/* Return 1 is OP is a memory location that is not an reference (using\n+/* Return 1 is OP is a memory location that is not a reference (using\n    an AND) to an unaligned location.  Take into account what reload\n    will do.  */\n \n@@ -871,6 +871,20 @@ normal_memory_operand (op, mode)\n \n   return GET_CODE (op) == MEM && GET_CODE (XEXP (op, 0)) != AND;\n }\n+\n+/* Accept a register, but not a subreg of any kind.  This allows us to\n+   avoid pathological cases in reload wrt data movement common in \n+   int->fp conversion.  */\n+\n+int\n+reg_no_subreg_operand (op, mode)\n+     register rtx op;\n+     enum machine_mode mode;\n+{\n+  if (GET_CODE (op) == SUBREG)\n+    return 0;\n+  return register_operand (op, mode);\n+}\n \f\n /* Return 1 if this function can directly return via $26.  */\n "}, {"sha": "c2eecefe9b460793f8499990d85c8fc46fa01889", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67070f5c92f0ce0c3d65f2af0ed22001fcb1c5e8/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67070f5c92f0ce0c3d65f2af0ed22001fcb1c5e8/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=67070f5c92f0ce0c3d65f2af0ed22001fcb1c5e8", "patch": "@@ -2321,7 +2321,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n   {\"reg_or_unaligned_mem_operand\", {SUBREG, REG, MEM}},\t\t\t\\\n   {\"any_memory_operand\", {MEM}},\t\t\t\t\t\\\n   {\"hard_fp_register_operand\", {SUBREG, REG}},\t\t\t\t\\\n-  {\"reg_not_elim_operand\", {SUBREG, REG}},\n+  {\"reg_not_elim_operand\", {SUBREG, REG}},\t\t\t\t\\\n+  {\"reg_no_subreg_operand\", {REG}},\n \f\n /* Tell collect that the object format is ECOFF.  */\n #define OBJECT_FORMAT_COFF"}, {"sha": "838cff0a998c2dc10ac0d35f97ad623af0c42805", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67070f5c92f0ce0c3d65f2af0ed22001fcb1c5e8/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67070f5c92f0ce0c3d65f2af0ed22001fcb1c5e8/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=67070f5c92f0ce0c3d65f2af0ed22001fcb1c5e8", "patch": "@@ -1988,31 +1988,31 @@\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n-\t(float:SF (match_operand:DI 1 \"register_operand\" \"f\")))]\n+\t(float:SF (match_operand:DI 1 \"reg_no_subreg_operand\" \"f\")))]\n   \"TARGET_FP && alpha_tp == ALPHA_TP_INSN\"\n   \"cvtq%,%+%& %1,%0\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n (define_insn \"floatdisf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(float:SF (match_operand:DI 1 \"register_operand\" \"f\")))]\n+\t(float:SF (match_operand:DI 1 \"reg_no_subreg_operand\" \"f\")))]\n   \"TARGET_FP\"\n   \"cvtq%,%+%& %1,%0\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n-\t(float:DF (match_operand:DI 1 \"register_operand\" \"f\")))]\n+\t(float:DF (match_operand:DI 1 \"reg_no_subreg_operand\" \"f\")))]\n   \"TARGET_FP && alpha_tp == ALPHA_TP_INSN\"\n   \"cvtq%-%+%& %1,%0\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n (define_insn \"floatdidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(float:DF (match_operand:DI 1 \"register_operand\" \"f\")))]\n+\t(float:DF (match_operand:DI 1 \"reg_no_subreg_operand\" \"f\")))]\n   \"TARGET_FP\"\n   \"cvtq%-%+%& %1,%0\"\n   [(set_attr \"type\" \"fadd\")"}]}