{"sha": "292f30c5d777603851ec3dd576a7038c8b64c632", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkyZjMwYzVkNzc3NjAzODUxZWMzZGQ1NzZhNzAzOGM4YjY0YzYzMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2006-01-16T14:26:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-01-16T14:26:32Z"}, "message": "fold-const.c (fold_minmax): New static function.\n\n\t* fold-const.c (fold_minmax): New static function.\n\t(fold_binary) <MIN_EXPR>: Call it.\n\t<MAX_EXPR>: Likewise.\n\t* stor-layout.c (place_field): Use DECL_SIZE consistently\n\tin the computation of the new record size.\n\n\nCo-Authored-By: Andrew Pinski <pinskia@physics.uc.edu>\nCo-Authored-By: Roger Sayle <roger@eyesopen.com>\n\nFrom-SVN: r109747", "tree": {"sha": "10316cdc614740e5e71d0548c7f3e20c0d1c8902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10316cdc614740e5e71d0548c7f3e20c0d1c8902"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/292f30c5d777603851ec3dd576a7038c8b64c632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292f30c5d777603851ec3dd576a7038c8b64c632", "html_url": "https://github.com/Rust-GCC/gccrs/commit/292f30c5d777603851ec3dd576a7038c8b64c632", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292f30c5d777603851ec3dd576a7038c8b64c632/comments", "author": null, "committer": null, "parents": [{"sha": "8c215327bb78691d73752d47ead5057aa6042ef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c215327bb78691d73752d47ead5057aa6042ef4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c215327bb78691d73752d47ead5057aa6042ef4"}], "stats": {"total": 150, "additions": 148, "deletions": 2}, "files": [{"sha": "ef9198510aa962e89592b2b156495d9a9fb389fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292f30c5d777603851ec3dd576a7038c8b64c632/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292f30c5d777603851ec3dd576a7038c8b64c632/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=292f30c5d777603851ec3dd576a7038c8b64c632", "patch": "@@ -1,3 +1,12 @@\n+2006-01-16  Eric Botcazou  <ebotcazou@adacore.com>\n+            Roger Sayle  <roger@eyesopen.com> \n+\n+\t* fold-const.c (fold_minmax): New static function.\n+\t(fold_binary) <MIN_EXPR>: Call it.\n+\t<MAX_EXPR>: Likewise.\n+\t* stor-layout.c (place_field): Use DECL_SIZE consistently\n+\tin the computation of the new record size.\n+\n 2006-01-16  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* cse.c (cse_condition_code_reg): Make it static."}, {"sha": "d568d8d3528c97e041620d172d5b7d99ac28b98f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292f30c5d777603851ec3dd576a7038c8b64c632/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292f30c5d777603851ec3dd576a7038c8b64c632/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=292f30c5d777603851ec3dd576a7038c8b64c632", "patch": "@@ -7183,6 +7183,49 @@ fold_unary (enum tree_code code, tree type, tree op0)\n     } /* switch (code) */\n }\n \n+/* Fold a binary expression of code CODE and type TYPE with operands\n+   OP0 and OP1, containing either a MIN-MAX or a MAX-MIN combination.\n+   Return the folded expression if folding is successful.  Otherwise,\n+   return NULL_TREE.  */\n+\n+static tree\n+fold_minmax (enum tree_code code, tree type, tree op0, tree op1)\n+{\n+  enum tree_code compl_code;\n+\n+  if (code == MIN_EXPR)\n+    compl_code = MAX_EXPR;\n+  else if (code == MAX_EXPR)\n+    compl_code = MIN_EXPR;\n+  else\n+    gcc_assert (FALSE);\n+\n+  /* MIN (MAX (a, b), b) == b. \ufffd*/\n+  if (TREE_CODE (op0) == compl_code\n+      && operand_equal_p (TREE_OPERAND (op0, 1), op1, 0))\n+    return omit_one_operand (type, op1, TREE_OPERAND (op0, 0));\n+\n+  /* MIN (MAX (b, a), b) == b. \ufffd*/\n+  if (TREE_CODE (op0) == compl_code\n+      && operand_equal_p (TREE_OPERAND (op0, 0), op1, 0)\n+      && reorder_operands_p (TREE_OPERAND (op0, 1), op1))\n+    return omit_one_operand (type, op1, TREE_OPERAND (op0, 1));\n+\n+  /* MIN (a, MAX (a, b)) == a. \ufffd*/\n+  if (TREE_CODE (op1) == compl_code\n+      && operand_equal_p (op0, TREE_OPERAND (op1, 0), 0)\n+      && reorder_operands_p (op0, TREE_OPERAND (op1, 1)))\n+    return omit_one_operand (type, op0, TREE_OPERAND (op1, 1));\n+\n+  /* MIN (a, MAX (b, a)) == a. \ufffd*/\n+  if (TREE_CODE (op1) == compl_code\n+      && operand_equal_p (op0, TREE_OPERAND (op1, 1), 0)\n+      && reorder_operands_p (op0, TREE_OPERAND (op1, 0)))\n+    return omit_one_operand (type, op0, TREE_OPERAND (op1, 0));\n+\n+  return NULL_TREE;\n+}\n+\n /* Fold a binary expression of code CODE and type TYPE with operands\n    OP0 and OP1.  Return the folded expression if folding is\n    successful.  Otherwise, return NULL_TREE.  */\n@@ -8721,6 +8764,9 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n       if (INTEGRAL_TYPE_P (type)\n \t  && operand_equal_p (arg1, TYPE_MIN_VALUE (type), OEP_ONLY_CONST))\n \treturn omit_one_operand (type, arg1, arg0);\n+      tem = fold_minmax (MIN_EXPR, type, arg0, arg1);\n+      if (tem)\n+\treturn tem;\n       goto associate;\n \n     case MAX_EXPR:\n@@ -8730,6 +8776,9 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t  && TYPE_MAX_VALUE (type)\n \t  && operand_equal_p (arg1, TYPE_MAX_VALUE (type), OEP_ONLY_CONST))\n \treturn omit_one_operand (type, arg1, arg0);\n+      tem = fold_minmax (MAX_EXPR, type, arg0, arg1);\n+      if (tem)\n+\treturn tem;\n       goto associate;\n \n     case TRUTH_ANDIF_EXPR:"}, {"sha": "cb57cb378b89b7ed90712106cc86b94b59703c58", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292f30c5d777603851ec3dd576a7038c8b64c632/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292f30c5d777603851ec3dd576a7038c8b64c632/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=292f30c5d777603851ec3dd576a7038c8b64c632", "patch": "@@ -1222,8 +1222,8 @@ place_field (record_layout_info rli, tree field)\n      is printed in finish_struct.  */\n   if (DECL_SIZE (field) == 0)\n     /* Do nothing.  */;\n-  else if (TREE_CODE (DECL_SIZE_UNIT (field)) != INTEGER_CST\n-\t   || TREE_CONSTANT_OVERFLOW (DECL_SIZE_UNIT (field)))\n+  else if (TREE_CODE (DECL_SIZE (field)) != INTEGER_CST\n+\t   || TREE_CONSTANT_OVERFLOW (DECL_SIZE (field)))\n     {\n       rli->offset\n \t= size_binop (PLUS_EXPR, rli->offset,"}, {"sha": "94d4a20fc563a4ab61391d9c3cc8768597c6ca88", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292f30c5d777603851ec3dd576a7038c8b64c632/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292f30c5d777603851ec3dd576a7038c8b64c632/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=292f30c5d777603851ec3dd576a7038c8b64c632", "patch": "@@ -1,3 +1,8 @@\n+2006-01-16  Eric Botcazou  <ebotcazou@adacore.com>\n+            Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* gcc.dg/minmax-1.c: New test.\n+\n 2006-01-16  Ben Elliston  <bje@au.ibm.com>\n \n \t* gcc.dg/dfp/dfp.exp: Correct FSF address. "}, {"sha": "e279c0e20fe3d8d7b99be181c4e12057085be056", "filename": "gcc/testsuite/gcc.dg/minmax-1.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292f30c5d777603851ec3dd576a7038c8b64c632/gcc%2Ftestsuite%2Fgcc.dg%2Fminmax-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292f30c5d777603851ec3dd576a7038c8b64c632/gcc%2Ftestsuite%2Fgcc.dg%2Fminmax-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fminmax-1.c?ref=292f30c5d777603851ec3dd576a7038c8b64c632", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fdump-tree-original\" } */\n+\n+/* Check that MIN-MAX and MAX-MIN combinations are folded.  */\n+\n+extern void abort (void);\n+\n+#define MIN(a,b) ((a) < (b) ? (a) : (b))\n+#define MAX(a,b) ((a) > (b) ? (a) : (b))\n+\n+int f1(int a, int b)\n+{\n+   return MIN (MAX (a, b), b); /* == b */\n+}\n+\n+int f2(int a, int b)\n+{\n+   return MAX (MIN (a, b), b); /* == b */\n+}\n+\n+int f3(int a, int b)\n+{\n+   return MIN (MAX (b, a), b); /* == b */\n+}\n+\n+int f4(int a, int b)\n+{\n+   return MAX (MIN (b, a), b); /* == b */\n+}\n+\n+\n+int g1(int a, int b)\n+{\n+   return MIN (a, MAX (a, b)); /* == a */\n+}\n+\n+int g2(int a, int b)\n+{\n+   return MAX (a, MIN (a, b)); /* == a */\n+}\n+\n+int g3(int a, int b)\n+{\n+   return MIN (a, MAX (b, a)); /* == a */\n+}\n+\n+int g4(int a, int b)\n+{\n+   return MAX (a, MIN (b, a)); /* == a */\n+}\n+\n+int main(void)\n+{\n+  if (f1 (1, 2) != 2)\n+    abort ();\n+\n+  if (f2 (1, 2) != 2)\n+    abort ();\n+\n+  if (f3 (1, 2) != 2)\n+    abort ();\n+\n+  if (f4 (1, 2) != 2)\n+    abort ();\n+\n+  if (g1 (1, 2) != 1)\n+    abort ();\n+\n+  if (g2 (1, 2) != 1)\n+    abort ();\n+\n+  if (g3 (1, 2) != 1)\n+    abort ();\n+\n+  if (g4 (1, 2) != 1)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"MIN_EXPR\" 0 \"original\"} } */\n+/* { dg-final { scan-tree-dump-times \"MAX_EXPR\" 0 \"original\"} } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}]}