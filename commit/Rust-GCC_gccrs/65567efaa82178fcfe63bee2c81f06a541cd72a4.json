{"sha": "65567efaa82178fcfe63bee2c81f06a541cd72a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU1NjdlZmFhODIxNzhmY2ZlNjNiZWUyYzgxZjA2YTU0MWNkNzJhNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2007-10-04T08:48:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2007-10-04T08:48:23Z"}, "message": "re PR c++/32470 (fvisibility=hidden without effect in some cases)\n\n        PR c++/32470\n        * name-lookup.c (push_namespace_with_attrs): Fold back into...\n        (push_namespace): Here.\n        (handle_namespace_attrs): New fn for the attr code.\n        (leave_scope): Don't pop_visibility.\n        * name-lookup.h (struct cp_binding_level): Remove has_visibility.\n        * parser.c (cp_parser_namespace_definition): Call\n        handle_namespace_attrs and pop_visibility as appropriate.\n\nFrom-SVN: r129003", "tree": {"sha": "bae096b4fe2cf8e3db8b3a02fa456bfff47ef358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bae096b4fe2cf8e3db8b3a02fa456bfff47ef358"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65567efaa82178fcfe63bee2c81f06a541cd72a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65567efaa82178fcfe63bee2c81f06a541cd72a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65567efaa82178fcfe63bee2c81f06a541cd72a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65567efaa82178fcfe63bee2c81f06a541cd72a4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dcdc83a1857653c02c8997e5787c6a41244bdb95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcdc83a1857653c02c8997e5787c6a41244bdb95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcdc83a1857653c02c8997e5787c6a41244bdb95"}], "stats": {"total": 143, "additions": 90, "deletions": 53}, "files": [{"sha": "0cec0879fe799230ead2a55d24286543c4a28d9b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65567efaa82178fcfe63bee2c81f06a541cd72a4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65567efaa82178fcfe63bee2c81f06a541cd72a4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=65567efaa82178fcfe63bee2c81f06a541cd72a4", "patch": "@@ -1,5 +1,14 @@\n 2007-10-03  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/32470\n+\t* name-lookup.c (push_namespace_with_attrs): Fold back into...\n+\t(push_namespace): Here.\n+\t(handle_namespace_attrs): New fn for the attr code.\n+\t(leave_scope): Don't pop_visibility.\n+\t* name-lookup.h (struct cp_binding_level): Remove has_visibility.\n+\t* parser.c (cp_parser_namespace_definition): Call\n+\thandle_namespace_attrs and pop_visibility as appropriate. \n+\n \tPR c++/11756\n \t* mangle.c (write_type) [TYPEOF_TYPE]: Just sorry.\n "}, {"sha": "a7bb710dace4b5101c3f5af999226b83cc2ddbd7", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 48, "deletions": 46, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65567efaa82178fcfe63bee2c81f06a541cd72a4/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65567efaa82178fcfe63bee2c81f06a541cd72a4/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=65567efaa82178fcfe63bee2c81f06a541cd72a4", "patch": "@@ -1364,11 +1364,6 @@ leave_scope (void)\n       is_class_level = 0;\n     }\n \n-#ifdef HANDLE_PRAGMA_VISIBILITY\n-  if (scope->has_visibility)\n-    pop_visibility ();\n-#endif\n-\n   /* Move one nesting level up.  */\n   current_binding_level = scope->level_chain;\n \n@@ -3027,20 +3022,59 @@ current_decl_namespace (void)\n   return result;\n }\n \n-/* Push into the scope of the NAME namespace.  If NAME is NULL_TREE, then we\n-   select a name that is unique to this compilation unit.  */\n+/* Process any ATTRIBUTES on a namespace definition.  Currently only\n+   attribute visibility is meaningful, which is a property of the syntactic\n+   block rather than the namespace as a whole, so we don't touch the\n+   NAMESPACE_DECL at all.  Returns true if attribute visibility is seen.  */\n \n-void\n-push_namespace (tree name)\n+bool\n+handle_namespace_attrs (tree ns, tree attributes)\n {\n-  push_namespace_with_attribs (name, NULL_TREE);\n-}\n+  tree d;\n+  bool saw_vis = false;\n+\n+  for (d = attributes; d; d = TREE_CHAIN (d))\n+    {\n+      tree name = TREE_PURPOSE (d);\n+      tree args = TREE_VALUE (d);\n+\n+#ifdef HANDLE_PRAGMA_VISIBILITY\n+      if (is_attribute_p (\"visibility\", name))\n+\t{\n+\t  tree x = args ? TREE_VALUE (args) : NULL_TREE;\n+\t  if (x == NULL_TREE || TREE_CODE (x) != STRING_CST || TREE_CHAIN (args))\n+\t    {\n+\t      warning (OPT_Wattributes,\n+\t\t       \"%qD attribute requires a single NTBS argument\",\n+\t\t       name);\n+\t      continue;\n+\t    }\n+\n+\t  if (!TREE_PUBLIC (ns))\n+\t    warning (OPT_Wattributes,\n+\t\t     \"%qD attribute is meaningless since members of the \"\n+\t\t     \"anonymous namespace get local symbols\", name);\n+\n+\t  push_visibility (TREE_STRING_POINTER (x));\n+\t  saw_vis = true;\n+\t}\n+      else\n+#endif\n+\t{\n+\t  warning (OPT_Wattributes, \"%qD attribute directive ignored\",\n+\t\t   name);\n+\t  continue;\n+\t}\n+    }\n \n-/* Same, but specify attributes to apply to the namespace.  The attributes\n-   only apply to the current namespace-body, not to any later extensions. */\n+  return saw_vis;\n+}\n+  \n+/* Push into the scope of the NAME namespace.  If NAME is NULL_TREE, then we\n+   select a name that is unique to this compilation unit.  */\n \n void\n-push_namespace_with_attribs (tree name, tree attributes)\n+push_namespace (tree name)\n {\n   tree d = NULL_TREE;\n   int need_new = 1;\n@@ -3107,38 +3141,6 @@ push_namespace_with_attribs (tree name, tree attributes)\n   /* Enter the name space.  */\n   current_namespace = d;\n \n-#ifdef HANDLE_PRAGMA_VISIBILITY\n-  /* Clear has_visibility in case a previous namespace-definition had a\n-     visibility attribute and this one doesn't.  */\n-  current_binding_level->has_visibility = 0;\n-  for (d = attributes; d; d = TREE_CHAIN (d))\n-    {\n-      tree name = TREE_PURPOSE (d);\n-      tree args = TREE_VALUE (d);\n-      tree x;\n-\n-      if (! is_attribute_p (\"visibility\", name))\n-\t{\n-\t  warning (OPT_Wattributes, \"%qs attribute directive ignored\",\n-\t\t   IDENTIFIER_POINTER (name));\n-\t  continue;\n-\t}\n-\n-      x = args ? TREE_VALUE (args) : NULL_TREE;\n-      if (x == NULL_TREE || TREE_CODE (x) != STRING_CST || TREE_CHAIN (args))\n-\t{\n-\t  warning (OPT_Wattributes, \"%qs attribute requires a single NTBS argument\",\n-\t\t   IDENTIFIER_POINTER (name));\n-\t  continue;\n-\t}\n-\n-      current_binding_level->has_visibility = 1;\n-      push_visibility (TREE_STRING_POINTER (x));\n-      goto found;\n-    }\n- found:\n-#endif\n-\n   timevar_pop (TV_NAME_LOOKUP);\n }\n "}, {"sha": "7da57be9f1f9da88c53b549344b2ad9be5e1add2", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65567efaa82178fcfe63bee2c81f06a541cd72a4/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65567efaa82178fcfe63bee2c81f06a541cd72a4/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=65567efaa82178fcfe63bee2c81f06a541cd72a4", "patch": "@@ -255,11 +255,7 @@ struct cp_binding_level GTY(())\n     unsigned more_cleanups_ok : 1;\n     unsigned have_cleanups : 1;\n \n-    /* Nonzero if this level has associated visibility which we should pop\n-       when leaving the scope. */\n-    unsigned has_visibility : 1;\n-\n-    /* 23 bits left to fill a 32-bit word.  */\n+    /* 24 bits left to fill a 32-bit word.  */\n   };\n \n /* The binding level currently in effect.  */\n@@ -307,10 +303,10 @@ extern void pop_inner_scope (tree, tree);\n extern void push_binding_level (struct cp_binding_level *);\n \f\n extern void push_namespace (tree);\n-extern void push_namespace_with_attribs (tree, tree);\n extern void pop_namespace (void);\n extern void push_nested_namespace (tree);\n extern void pop_nested_namespace (tree);\n+extern bool handle_namespace_attrs (tree, tree);\n extern void pushlevel_class (void);\n extern void poplevel_class (void);\n extern tree pushdecl_with_scope (tree, cxx_scope *, bool);"}, {"sha": "3720b5567a5c708c1677ac45bcf21dc6b2852e0f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65567efaa82178fcfe63bee2c81f06a541cd72a4/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65567efaa82178fcfe63bee2c81f06a541cd72a4/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=65567efaa82178fcfe63bee2c81f06a541cd72a4", "patch": "@@ -11475,6 +11475,7 @@ static void\n cp_parser_namespace_definition (cp_parser* parser)\n {\n   tree identifier, attribs;\n+  bool has_visibility;\n \n   /* Look for the `namespace' keyword.  */\n   cp_parser_require_keyword (parser, RID_NAMESPACE, \"`namespace'\");\n@@ -11494,9 +11495,18 @@ cp_parser_namespace_definition (cp_parser* parser)\n   /* Look for the `{' to start the namespace.  */\n   cp_parser_require (parser, CPP_OPEN_BRACE, \"`{'\");\n   /* Start the namespace.  */\n-  push_namespace_with_attribs (identifier, attribs);\n+  push_namespace (identifier);\n+\n+  has_visibility = handle_namespace_attrs (current_namespace, attribs);\n+\n   /* Parse the body of the namespace.  */\n   cp_parser_namespace_body (parser);\n+\n+#ifdef HANDLE_PRAGMA_VISIBILITY\n+  if (has_visibility)\n+    pop_visibility ();\n+#endif\n+\n   /* Finish the namespace.  */\n   pop_namespace ();\n   /* Look for the final `}'.  */"}, {"sha": "5e6e71f8f1fa917f1465ea81a276675b1c00252a", "filename": "gcc/testsuite/g++.dg/ext/visibility/namespace2.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65567efaa82178fcfe63bee2c81f06a541cd72a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fnamespace2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65567efaa82178fcfe63bee2c81f06a541cd72a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fnamespace2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fnamespace2.C?ref=65567efaa82178fcfe63bee2c81f06a541cd72a4", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/32470\n+\n+// { dg-require-visibility }\n+// { dg-options \"-fvisibility=hidden\" }\n+// { dg-final { scan-hidden \"_ZN4Test4testEv\" } }\n+\n+namespace std __attribute__((__visibility__(\"default\"))) {\n+  template<typename _CharT>\n+  class basic_streambuf\n+  {\n+    friend void getline();\n+  };\n+  extern template class basic_streambuf<char>;\n+}\n+\n+class Test\n+{\n+  void test();\n+};\n+void Test::test() { }"}]}