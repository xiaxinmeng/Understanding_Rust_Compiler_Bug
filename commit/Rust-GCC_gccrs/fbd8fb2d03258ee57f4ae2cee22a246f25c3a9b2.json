{"sha": "fbd8fb2d03258ee57f4ae2cee22a246f25c3a9b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJkOGZiMmQwMzI1OGVlNTdmNGFlMmNlZTIyYTI0NmYyNWMzYTliMg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2004-11-25T11:54:53Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2004-11-25T11:54:53Z"}, "message": "Add missing file from gcj-abi-2-dev-branch merge\n\nFrom-SVN: r91285", "tree": {"sha": "b310d9ec66ad1c2002a10959c05a0b2d480be8ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b310d9ec66ad1c2002a10959c05a0b2d480be8ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbd8fb2d03258ee57f4ae2cee22a246f25c3a9b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd8fb2d03258ee57f4ae2cee22a246f25c3a9b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbd8fb2d03258ee57f4ae2cee22a246f25c3a9b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd8fb2d03258ee57f4ae2cee22a246f25c3a9b2/comments", "author": null, "committer": null, "parents": [{"sha": "e0966a17a3b06d6f6b2810f6aef41d9ae41538fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0966a17a3b06d6f6b2810f6aef41d9ae41538fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0966a17a3b06d6f6b2810f6aef41d9ae41538fc"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "0fa98d63762b0664d820cedbbbf8a88c467ba80d", "filename": "libjava/gnu/gcj/util/natDebug.cc", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd8fb2d03258ee57f4ae2cee22a246f25c3a9b2/libjava%2Fgnu%2Fgcj%2Futil%2FnatDebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd8fb2d03258ee57f4ae2cee22a246f25c3a9b2/libjava%2Fgnu%2Fgcj%2Futil%2FnatDebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Futil%2FnatDebug.cc?ref=fbd8fb2d03258ee57f4ae2cee22a246f25c3a9b2", "patch": "@@ -0,0 +1,118 @@\n+// natDebug -- C++ side of Debug\n+\n+/* Copyright (C) 2004  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+#include <stddef.h>\n+#include <gcj/cni.h>\n+#include <gcj/field.h>\n+#include <gcj/javaprims.h>\n+#include <java/lang/reflect/Field.h>\n+#include <java/lang/Class.h>\n+#include <java/lang/Byte.h>\n+#include <java/lang/Short.h>\n+#include <java/lang/Integer.h>\n+#include <java/lang/Long.h>\n+#include <java/lang/Float.h>\n+#include <java/lang/Double.h>\n+#include <java/lang/Boolean.h>\n+#include <java/lang/Character.h>\n+#include <java/lang/IllegalArgumentException.h>\n+\n+#include <gnu/gcj/util/Debug.h>\n+\n+jlong \n+gnu::gcj::util::Debug::getAddr (::java::lang::Object *o)\n+{\n+  return (jlong)(size_t)o;\n+}\n+\n+JArray< ::java::lang::reflect::Field *> *\n+gnu::gcj::util::Debug::getDeclaredFields (::java::lang::Class *c)\n+{\n+  return c->getDeclaredFields (false);\n+}\n+\n+static void *\n+::getField (::java::lang::Object *obj, \n+\t    ::java::lang::reflect::Field *field)\n+{\n+  using namespace java::lang::reflect;\n+  \n+  jfieldID fld = _Jv_FromReflectedField (field);\n+  _Jv_ushort flags = fld->getModifiers();\n+\n+  if (flags & Modifier::STATIC)\n+    {\n+      jclass fldClass = field->getDeclaringClass ();\n+      JvInitClass(fldClass);\n+      return (void*) fld->u.addr;\n+    }\n+  else\n+    {\n+      return (void*) ((char*) obj + fld->getOffset ());\n+    }\n+}\n+\n+::java::lang::Object *\n+gnu::gcj::util::Debug::getField (::java::lang::Object *o, \n+\t\t\t\t   ::java::lang::reflect::Field *field)\n+{\n+  void *addr = ::getField (o, field);\n+\n+  jclass type = field->getType();\n+  if (! type->isPrimitive ())\n+    return * (jobject*) addr;\n+  if (type == JvPrimClass (double))\n+    return new java::lang::Double (* (jdouble*) addr);\n+  if (type == JvPrimClass (float))\n+    return new java::lang::Float (* (jfloat*) addr);\n+  if (type == JvPrimClass (long))\n+    return new java::lang::Long (* (jlong*) addr);\n+  if (type == JvPrimClass (int))\n+    return new java::lang::Integer (* (jint*) addr);\n+  if (type == JvPrimClass (short))\n+    return new java::lang::Short (* (jshort*) addr);\n+  if (type == JvPrimClass (byte))\n+    return new java::lang::Byte (* (jbyte*) addr);\n+  if (type == JvPrimClass (char))\n+    return new java::lang::Character (* (jchar*) addr);\n+  if (type == JvPrimClass (boolean))\n+    {\n+      _Jv_InitClass (&java::lang::Boolean::class$);\n+      if (* (jboolean*) addr)\n+\treturn java::lang::Boolean::TRUE;\n+      else\n+\treturn java::lang::Boolean::FALSE;\n+    }\n+  throw new java::lang::IllegalArgumentException;\n+}\n+\n+/* A simple method of printing an object that can be called from a\n+   debugger.  */\n+extern \"C\"\n+void\n+_Jv_Debug (void *p)\n+{\n+  (new ::gnu::gcj::util::Debug ())->write ((jobject)p);\n+}\n+\n+extern \"C\"\n+void\n+_Jv_DeepDebug (void *p, int depth)\n+{\n+  (new ::gnu::gcj::util::Debug (depth))->write ((jobject)p);\n+}\n+\n+extern \"C\"\n+void\n+_Jv_StaticDeepDebug (void *p, int depth)\n+{\n+  (new ::gnu::gcj::util::Debug (depth, true))->write ((jobject)p);\n+}"}]}