{"sha": "b1aef01e16b01f3b07a14c5c7cac92d98553517f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFhZWYwMWUxNmIwMWYzYjA3YTE0YzVjN2NhYzkyZDk4NTUzNTE3Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-08-28T13:13:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-08-28T13:13:45Z"}, "message": "re PR fortran/62283 (basic-block vectorization fails)\n\n2014-08-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/62283\n\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment):\n\tDo not peel loops for alignment where the vector loop likely\n\tdoesn't run at least VF times.\n\n\t* gfortran.dg/vect/pr62283.f: New testcase.\n\t* gcc.dg/tree-ssa/cunroll-5.c: Adjust.\n\t* gcc.dg/vect/costmodel/i386/costmodel-vect-31.c: Likewise.\n\t* gcc.dg/vect/costmodel/i386/costmodel-vect-33.c: Likewise.\n\t* gcc.dg/vect/costmodel/x86_64/costmodel-vect-31.c: Likewise.\n\t* gcc.dg/vect/costmodel/x86_64/costmodel-vect-33.c: Likewise.\n\t* gcc.dg/vect/vect-33.c: Likewise.\n\nFrom-SVN: r214678", "tree": {"sha": "b4e458d2703a45df4467d10ef7a50acef78d5b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4e458d2703a45df4467d10ef7a50acef78d5b09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1aef01e16b01f3b07a14c5c7cac92d98553517f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1aef01e16b01f3b07a14c5c7cac92d98553517f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1aef01e16b01f3b07a14c5c7cac92d98553517f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1aef01e16b01f3b07a14c5c7cac92d98553517f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f22ae1ecbd724ed01423a2132b5631a5d7c0ee10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22ae1ecbd724ed01423a2132b5631a5d7c0ee10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f22ae1ecbd724ed01423a2132b5631a5d7c0ee10"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "347075d40f44c308feba12d46f78c03c852ac15b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1aef01e16b01f3b07a14c5c7cac92d98553517f", "patch": "@@ -1,3 +1,10 @@\n+2014-08-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/62283\n+\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment):\n+\tDo not peel loops for alignment where the vector loop likely\n+\tdoesn't run at least VF times.\n+\n 2014-08-28  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-ssa-loop-ivopts.c (iv_ca_add_use): Delete parameter"}, {"sha": "91a98e8ab0d24b3de10ab035a8345c2aabc594b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1aef01e16b01f3b07a14c5c7cac92d98553517f", "patch": "@@ -1,3 +1,14 @@\n+2014-08-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/62283\n+\t* gfortran.dg/vect/pr62283.f: New testcase.\n+\t* gcc.dg/tree-ssa/cunroll-5.c: Adjust.\n+\t* gcc.dg/vect/costmodel/i386/costmodel-vect-31.c: Likewise.\n+\t* gcc.dg/vect/costmodel/i386/costmodel-vect-33.c: Likewise.\n+\t* gcc.dg/vect/costmodel/x86_64/costmodel-vect-31.c: Likewise.\n+\t* gcc.dg/vect/costmodel/x86_64/costmodel-vect-33.c: Likewise.\n+\t* gcc.dg/vect/vect-33.c: Likewise.\n+\n 2014-08-28  Yury Gribov  <y.gribov@samsung.com>\n \n \t* c-c++-common/asan/pr62089.c: Fix test on 32-bit platforms."}, {"sha": "2739c290af69d0b5283b11a7f94eacc17d7f40d0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/cunroll-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-5.c?ref=b1aef01e16b01f3b07a14c5c7cac92d98553517f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fdump-tree-cunroll-details\" } */\n+/* { dg-options \"-O3 -fdump-tree-cunroll-details -fno-tree-vectorize\" } */\n int *a;\n test(int c)\n { "}, {"sha": "3c9bfdaa044fb32612170cd5fee3731fc2bf1fb5", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/i386/costmodel-vect-31.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-vect-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-vect-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-vect-31.c?ref=b1aef01e16b01f3b07a14c5c7cac92d98553517f", "patch": "@@ -86,6 +86,5 @@ int main (void)\n   return main1 ();\n } \n \n-/* { dg-final { scan-tree-dump-times \"vectorization not profitable\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "86bfb58b0a93f05bdad137d3cdad8da0f619e1ea", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/i386/costmodel-vect-33.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-vect-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-vect-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-vect-33.c?ref=b1aef01e16b01f3b07a14c5c7cac92d98553517f", "patch": "@@ -36,5 +36,5 @@ int main (void)\n   return main1 ();\n } \n \n-/* { dg-final { scan-tree-dump-times \"vectorization not profitable\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "3c9bfdaa044fb32612170cd5fee3731fc2bf1fb5", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/x86_64/costmodel-vect-31.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-31.c?ref=b1aef01e16b01f3b07a14c5c7cac92d98553517f", "patch": "@@ -86,6 +86,5 @@ int main (void)\n   return main1 ();\n } \n \n-/* { dg-final { scan-tree-dump-times \"vectorization not profitable\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "86bfb58b0a93f05bdad137d3cdad8da0f619e1ea", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/x86_64/costmodel-vect-33.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-33.c?ref=b1aef01e16b01f3b07a14c5c7cac92d98553517f", "patch": "@@ -36,5 +36,5 @@ int main (void)\n   return main1 ();\n } \n \n-/* { dg-final { scan-tree-dump-times \"vectorization not profitable\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "85429046dbf21f2de9be1616128efef3d0052f4b", "filename": "gcc/testsuite/gcc.dg/vect/vect-33.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c?ref=b1aef01e16b01f3b07a14c5c7cac92d98553517f", "patch": "@@ -38,7 +38,7 @@ int main (void)\n \n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump \"Alignment of access forced using peeling\" \"vect\" { target vector_alignment_reachable } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } } */\n+/* { dg-final { scan-tree-dump \"Vectorizing an unaligned access\" \"vect\" { target { vect_hw_misalign && { ! vect64 } } } } } */\n+/* { dg-final { scan-tree-dump \"Alignment of access forced using peeling\" \"vect\" { target { vector_alignment_reachable && vect64 } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { { {! vector_alignment_reachable} || {! vect64} } && {! vect_hw_misalign} } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "038a998769dc6e8c3a62a1000bb63510b80127f6", "filename": "gcc/testsuite/gfortran.dg/vect/pr62283.f", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr62283.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr62283.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr62283.f?ref=b1aef01e16b01f3b07a14c5c7cac92d98553517f", "patch": "@@ -0,0 +1,17 @@\n+C { dg-do compile }\n+C { dg-additional-options \"-fvect-cost-model=dynamic\" }\n+      subroutine test2(x,y)\n+      real x(4),y(4)\n+      beta=3.141593\n+      do i=1,4\n+        y(i)=y(i)+beta*x(i)\n+      end do\n+      end\n+\n+      subroutine test3(x,y)\n+      real x(4),y(4)\n+      beta=3.141593\n+      y=y+beta*x\n+      end\n+C { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { target { vect_hw_misalign } } } }\n+C { dg-final { cleanup-tree-dump \"vect\" } }"}, {"sha": "8785d10395d366126ef4b3049f60053fb34d758e", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1aef01e16b01f3b07a14c5c7cac92d98553517f/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=b1aef01e16b01f3b07a14c5c7cac92d98553517f", "patch": "@@ -1515,10 +1515,20 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n       || !slpeel_can_duplicate_loop_p (loop, single_exit (loop)))\n     do_peeling = false;\n \n-  if (do_peeling && all_misalignments_unknown\n+  /* If we don't know how many times the peeling loop will run\n+     assume it will run VF-1 times and disable peeling if the remaining\n+     iters are less than the vectorization factor.  */\n+  if (do_peeling\n+      && all_misalignments_unknown\n+      && LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo)\n+      && (LOOP_VINFO_INT_NITERS (loop_vinfo)\n+\t  < 2 * (unsigned) LOOP_VINFO_VECT_FACTOR (loop_vinfo) - 1))\n+    do_peeling = false;\n+\n+  if (do_peeling\n+      && all_misalignments_unknown\n       && vect_supportable_dr_alignment (dr0, false))\n     {\n-\n       /* Check if the target requires to prefer stores over loads, i.e., if\n          misaligned stores are more expensive than misaligned loads (taking\n          drs with same alignment into account).  */\n@@ -1605,6 +1615,14 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n \t\t\t\t\t\t   &body_cost_vec);\n       if (!dr0 || !npeel)\n         do_peeling = false;\n+\n+      /* If peeling by npeel will result in a remaining loop not iterating\n+         enough to be vectorized then do not peel.  */\n+      if (do_peeling\n+\t  && LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo)\n+\t  && (LOOP_VINFO_INT_NITERS (loop_vinfo)\n+\t      < LOOP_VINFO_VECT_FACTOR (loop_vinfo) + npeel))\n+\tdo_peeling = false;\n     }\n \n   if (do_peeling)"}]}