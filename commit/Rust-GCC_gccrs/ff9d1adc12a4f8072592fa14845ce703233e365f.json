{"sha": "ff9d1adc12a4f8072592fa14845ce703233e365f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY5ZDFhZGMxMmE0ZjgwNzI1OTJmYTE0ODQ1Y2U3MDMyMzNlMzY1Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-27T23:22:28Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-27T23:22:28Z"}, "message": "tree-ssa-ccp.c (optimize_stack_restore): Relax the conditions under which we remove __builtin_stack_restore.\n\n* tree-ssa-ccp.c (optimize_stack_restore): Relax the conditions under\n        which we remove __builtin_stack_restore.\n\nFrom-SVN: r152227", "tree": {"sha": "50f0b2694494a02c9c1094301ab9d7159c26b03d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50f0b2694494a02c9c1094301ab9d7159c26b03d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff9d1adc12a4f8072592fa14845ce703233e365f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff9d1adc12a4f8072592fa14845ce703233e365f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff9d1adc12a4f8072592fa14845ce703233e365f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff9d1adc12a4f8072592fa14845ce703233e365f/comments", "author": null, "committer": null, "parents": [{"sha": "cdf1bf8bb3311493aa9822bc9c8f6d94571fe82e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdf1bf8bb3311493aa9822bc9c8f6d94571fe82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdf1bf8bb3311493aa9822bc9c8f6d94571fe82e"}], "stats": {"total": 90, "additions": 67, "deletions": 23}, "files": [{"sha": "d1e87371b8188c60399730b8587c4fae31ae5be1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9d1adc12a4f8072592fa14845ce703233e365f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9d1adc12a4f8072592fa14845ce703233e365f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff9d1adc12a4f8072592fa14845ce703233e365f", "patch": "@@ -1,3 +1,8 @@\n+2009-09-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree-ssa-ccp.c (optimize_stack_restore): Relax the conditions under\n+\twhich we remove __builtin_stack_restore.\n+\n 2009-09-27  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* loop-iv.c (iv_analyze_op): Use function_invariant_p, not CONSTANT_P,"}, {"sha": "e7550e7d7fd2b038b48689ecf655f86fdaa8a5b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9d1adc12a4f8072592fa14845ce703233e365f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9d1adc12a4f8072592fa14845ce703233e365f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff9d1adc12a4f8072592fa14845ce703233e365f", "patch": "@@ -1,3 +1,8 @@\n+2009-09-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.c-torture/compile/pr41469.c: Add -fexceptions.\n+\t* testsuite/gcc.dg/tree-ssa/pr41469-1.c: New.\n+\n 2009-09-26  Andreas Schwab  <schwab@linux-m68k.org>\n \n \tPR c/41476"}, {"sha": "b89ee6391bb7f9563209fa712a932cff6dbbd8f2", "filename": "gcc/testsuite/gcc.c-torture/compile/pr41469.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9d1adc12a4f8072592fa14845ce703233e365f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41469.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9d1adc12a4f8072592fa14845ce703233e365f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41469.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41469.c?ref=ff9d1adc12a4f8072592fa14845ce703233e365f", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-options \"-fexceptions\" } */\n+\n void\n af (void *a)\n {"}, {"sha": "cee2c08228f06422d6396aeb1f59e5830a1ea9f2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr41469-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9d1adc12a4f8072592fa14845ce703233e365f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr41469-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9d1adc12a4f8072592fa14845ce703233e365f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr41469-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr41469-1.c?ref=ff9d1adc12a4f8072592fa14845ce703233e365f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fexceptions -fdump-tree-optimized\" } */\n+\n+void af (void *a);\n+\n+void\n+bf (void)\n+{\n+  int i = 1;\n+  char v[i];\n+  af (v);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"__builtin_stack_save\" \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_stack_restore\" \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "85159b2bacf896ed5fb307767f359b8191e20f76", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 39, "deletions": 23, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9d1adc12a4f8072592fa14845ce703233e365f/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9d1adc12a4f8072592fa14845ce703233e365f/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=ff9d1adc12a4f8072592fa14845ce703233e365f", "patch": "@@ -3089,9 +3089,8 @@ fold_stmt_inplace (gimple stmt)\n static tree\n optimize_stack_restore (gimple_stmt_iterator i)\n {\n-  tree callee, rhs;\n-  gimple stmt, stack_save;\n-  gimple_stmt_iterator stack_save_gsi;\n+  tree callee;\n+  gimple stmt;\n \n   basic_block bb = gsi_bb (i);\n   gimple call = gsi_stmt (i);\n@@ -3115,32 +3114,49 @@ optimize_stack_restore (gimple_stmt_iterator i)\n \treturn NULL_TREE;\n \n       if (DECL_FUNCTION_CODE (callee) == BUILT_IN_STACK_RESTORE)\n-\tbreak;\n+\tgoto second_stack_restore;\n     }\n \n-  if (gsi_end_p (i)\n-      && (! single_succ_p (bb)\n-\t  || single_succ_edge (bb)->dest != EXIT_BLOCK_PTR))\n+  if (!gsi_end_p (i))\n     return NULL_TREE;\n \n-  stack_save = SSA_NAME_DEF_STMT (gimple_call_arg (call, 0));\n-  if (gimple_code (stack_save) != GIMPLE_CALL\n-      || gimple_call_lhs (stack_save) != gimple_call_arg (call, 0)\n-      || stmt_could_throw_p (stack_save)\n-      || !has_single_use (gimple_call_arg (call, 0)))\n-    return NULL_TREE;\n+  /* Allow one successor of the exit block, or zero successors.  */\n+  switch (EDGE_COUNT (bb->succs))\n+    {\n+    case 0:\n+      break;\n+    case 1:\n+      if (single_succ_edge (bb)->dest != EXIT_BLOCK_PTR)\n+\treturn NULL_TREE;\n+      break;\n+    default:\n+      return NULL_TREE;\n+    }\n+ second_stack_restore:\n \n-  callee = gimple_call_fndecl (stack_save);\n-  if (!callee\n-      || DECL_BUILT_IN_CLASS (callee) != BUILT_IN_NORMAL\n-      || DECL_FUNCTION_CODE (callee) != BUILT_IN_STACK_SAVE\n-      || gimple_call_num_args (stack_save) != 0)\n-    return NULL_TREE;\n+  /* If there's exactly one use, then zap the call to __builtin_stack_save.\n+     If there are multiple uses, then the last one should remove the call.\n+     In any case, whether the call to __builtin_stack_save can be removed\n+     or not is irrelevant to removing the call to __builtin_stack_restore.  */\n+  if (has_single_use (gimple_call_arg (call, 0)))\n+    {\n+      gimple stack_save = SSA_NAME_DEF_STMT (gimple_call_arg (call, 0));\n+      if (is_gimple_call (stack_save))\n+\t{\n+\t  callee = gimple_call_fndecl (stack_save);\n+\t  if (callee\n+\t      && DECL_BUILT_IN_CLASS (callee) == BUILT_IN_NORMAL\n+\t      && DECL_FUNCTION_CODE (callee) == BUILT_IN_STACK_SAVE)\n+\t    {\n+\t      gimple_stmt_iterator stack_save_gsi;\n+\t      tree rhs;\n \n-  stack_save_gsi = gsi_for_stmt (stack_save);\n-  rhs = build_int_cst (TREE_TYPE (gimple_call_arg (call, 0)), 0);\n-  if (!update_call_from_tree (&stack_save_gsi, rhs))\n-    return NULL_TREE;\n+\t      stack_save_gsi = gsi_for_stmt (stack_save);\n+\t      rhs = build_int_cst (TREE_TYPE (gimple_call_arg (call, 0)), 0);\n+\t      update_call_from_tree (&stack_save_gsi, rhs);\n+\t    }\n+\t}\n+    }\n \n   /* No effect, so the statement will be deleted.  */\n   return integer_zero_node;"}]}