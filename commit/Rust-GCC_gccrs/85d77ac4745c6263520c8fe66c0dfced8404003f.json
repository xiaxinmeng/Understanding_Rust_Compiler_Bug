{"sha": "85d77ac4745c6263520c8fe66c0dfced8404003f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVkNzdhYzQ3NDVjNjI2MzUyMGM4ZmU2NmMwZGZjZWQ4NDA0MDAzZg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-26T00:17:03Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-26T00:17:03Z"}, "message": "Daily bump.", "tree": {"sha": "99b0e6d6c4bc443df3eb2aa9f30ade1873f524f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99b0e6d6c4bc443df3eb2aa9f30ade1873f524f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85d77ac4745c6263520c8fe66c0dfced8404003f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d77ac4745c6263520c8fe66c0dfced8404003f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d77ac4745c6263520c8fe66c0dfced8404003f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d77ac4745c6263520c8fe66c0dfced8404003f/comments", "author": null, "committer": null, "parents": [{"sha": "4de346d8a2048b2a97547443893695a82ed16a58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de346d8a2048b2a97547443893695a82ed16a58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4de346d8a2048b2a97547443893695a82ed16a58"}], "stats": {"total": 306, "additions": 305, "deletions": 1}, "files": [{"sha": "fe8242b0594424fd845d07c0c8db5f3a5a45f5b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d77ac4745c6263520c8fe66c0dfced8404003f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d77ac4745c6263520c8fe66c0dfced8404003f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85d77ac4745c6263520c8fe66c0dfced8404003f", "patch": "@@ -1,3 +1,124 @@\n+2021-08-25  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gimple-range-cache.cc (ssa_global_cache::dump): Avoid printing\n+\trange table header alone.\n+\t* gimple-range.cc (gimple_ranger::export_global_ranges): Same.\n+\n+2021-08-25  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* doc/invoke.texi: Document --param modref-max-adjustments.\n+\t* ipa-modref-tree.c (test_insert_search_collapse): Update.\n+\t(test_merge): Update.\n+\t* ipa-modref-tree.h (struct modref_access_node): Add adjustments;\n+\t(modref_access_node::operator==): Fix handling of access ranges.\n+\t(modref_access_node::contains): Constify parameter; handle also\n+\tmismatched parm offsets.\n+\t(modref_access_node::update): New function.\n+\t(modref_access_node::merge): New function.\n+\t(unspecified_modref_access_node): Update constructor.\n+\t(modref_ref_node::insert_access): Add record_adjustments parameter;\n+\thandle merging.\n+\t(modref_ref_node::try_merge_with): New private function.\n+\t(modref_tree::insert): New record_adjustments parameter.\n+\t(modref_tree::merge): New record_adjustments parameter.\n+\t(modref_tree::copy_from): Update.\n+\t* ipa-modref.c (dump_access): Dump adjustments field.\n+\t(get_access): Update constructor.\n+\t(record_access): Update call of insert.\n+\t(record_access_lto): Update call of insert.\n+\t(merge_call_side_effects): Add record_adjustments parameter.\n+\t(get_access_for_fnspec): Update.\n+\t(process_fnspec): Update.\n+\t(analyze_call): Update.\n+\t(analyze_function): Update.\n+\t(read_modref_records): Update.\n+\t(ipa_merge_modref_summary_after_inlining): Update.\n+\t(propagate_unknown_call): Update.\n+\t(modref_propagate_in_scc): Update.\n+\t* params.opt (param-max-modref-adjustments=): New.\n+\n+2021-08-25  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/vsx.md (UNSPEC_XXSPLTIDP): Rename from\n+\tUNSPEC_XXSPLTID.\n+\t(xxspltiw_v4si): Use vecperm type attribute.\n+\t(xxspltiw_v4si_inst): Use vecperm type attribute.\n+\t(xxspltiw_v4sf_inst): Likewise.\n+\t(xxspltidp_v2df): Use vecperm type attribute.  Use\n+\tUNSPEC_XXSPLTIDP instead of UNSPEC_XXSPLTID.\n+\t(xxspltidp_v2df_inst): Likewise.\n+\t(xxsplti32dx_v4si): Use vecperm type attribute.\n+\t(xxsplti32dx_v4si_inst): Likewise.\n+\t(xxsplti32dx_v4sf_inst): Likewise.\n+\t(xxblend_<mode>): Likewise.\n+\t(xxpermx): Likewise.\n+\t(xxpermx_inst): Likewise.\n+\t(xxeval): Likewise.\n+\n+2021-08-25  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR other/93067\n+\t* coretypes.h (typedef diagnostic_input_charset_callback): Declare.\n+\t* diagnostic.c (diagnostic_initialize_input_context): New function.\n+\t* diagnostic.h (diagnostic_initialize_input_context): Declare.\n+\t* input.c (default_charset_callback): New function.\n+\t(file_cache::initialize_input_context): New function.\n+\t(file_cache_slot::create): Added ability to convert the input\n+\taccording to the input context.\n+\t(file_cache::file_cache): Initialize the new input context.\n+\t(class file_cache_slot): Added new m_alloc_offset member.\n+\t(file_cache_slot::file_cache_slot): Initialize the new member.\n+\t(file_cache_slot::~file_cache_slot): Handle potentially offset buffer.\n+\t(file_cache_slot::maybe_grow): Likewise.\n+\t(file_cache_slot::needs_read_p): Handle NULL fp, which is now possible.\n+\t(file_cache_slot::get_next_line): Likewise.\n+\t* input.h (class file_cache): Added input context member.\n+\n+2021-08-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102046\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): Conservatively\n+\tupdate ->any_pattern when swapping operands.\n+\n+2021-08-25  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\tPR target/101716\n+\t* config/i386/i386.c (ix86_live_on_entry): Adjust comment.\n+\t(ix86_decompose_address): Remove retval check for ASHIFT,\n+\tallow non-canonical zero extend if AND mask covers ASHIFT\n+\tcount.\n+\t(ix86_legitimate_address_p): Adjust condition for decompose.\n+\t(ix86_rtx_costs): Adjust cost for lea with non-canonical\n+\tzero-extend.\n+\tCo-Authored by: Uros Bizjak <ubizjak@gmail.com>\n+\n+2021-08-25  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR tree-optimization/101145\n+\t* tree-ssa-loop-niter.c (number_of_iterations_until_wrap):\n+\tNew function.\n+\t(number_of_iterations_lt): Invoke above function.\n+\t(adjust_cond_for_loop_until_wrap):\n+\tMerge to number_of_iterations_until_wrap.\n+\t(number_of_iterations_cond): Update invokes for\n+\tadjust_cond_for_loop_until_wrap and number_of_iterations_lt.\n+\n+2021-08-25  konglin1  <lingling.kong@intel.com>\n+\n+\tPR target/101471\n+\t* config/i386/avx512dqintrin.h (_mm512_fpclass_ps_mask): Fix\n+\tmacro define in O0.\n+\t(_mm512_mask_fpclass_ps_mask): Ditto.\n+\n+2021-08-25  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/altivec.md (vec_unpacku_hi_v16qi): Remove.\n+\t(vec_unpacku_hi_v8hi): Likewise.\n+\t(vec_unpacku_lo_v16qi): Likewise.\n+\t(vec_unpacku_lo_v8hi): Likewise.\n+\t(vec_unpacku_hi_<VP_small_lc>): New define_expand.\n+\t(vec_unpacku_lo_<VP_small_lc>): Likewise.\n+\n 2021-08-24  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/aix.h (SYSTEM_IMPLICIT_EXTERN_C): Delete."}, {"sha": "98be00843bfaaf7cc0b0080d0b0c99355685327f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d77ac4745c6263520c8fe66c0dfced8404003f/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d77ac4745c6263520c8fe66c0dfced8404003f/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=85d77ac4745c6263520c8fe66c0dfced8404003f", "patch": "@@ -1 +1 @@\n-20210825\n+20210826"}, {"sha": "c7e8ba923d31954ac5bdf45c4798fa34d132f95c", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d77ac4745c6263520c8fe66c0dfced8404003f/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d77ac4745c6263520c8fe66c0dfced8404003f/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=85d77ac4745c6263520c8fe66c0dfced8404003f", "patch": "@@ -1,3 +1,9 @@\n+2021-08-25  Ankur Saini  <arsenic@sourceware.org>\n+\n+\tPR analyzer/101980\n+\t* engine.cc (exploded_graph::maybe_create_dynamic_call): Don't create\n+\tcalls if max recursion limit is reached.\n+\n 2021-08-23  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analyzer.h (struct rejected_constraint): Convert to..."}, {"sha": "5e3ac92ad8ba073645ed8699d28c2b720e324859", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d77ac4745c6263520c8fe66c0dfced8404003f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d77ac4745c6263520c8fe66c0dfced8404003f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=85d77ac4745c6263520c8fe66c0dfced8404003f", "patch": "@@ -1,3 +1,10 @@\n+2021-08-25  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR other/93067\n+\t* c-opts.c (c_common_input_charset_cb): New function.\n+\t(c_common_post_options): Call new function\n+\tdiagnostic_initialize_input_context().\n+\n 2021-08-20  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* c-format.c (gcc_gfc_length_specs): Add 'll' and 'w'."}, {"sha": "0b92ee4c2fd030a8bce85b535d3d5e48a0e07794", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d77ac4745c6263520c8fe66c0dfced8404003f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d77ac4745c6263520c8fe66c0dfced8404003f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=85d77ac4745c6263520c8fe66c0dfced8404003f", "patch": "@@ -1,3 +1,15 @@\n+2021-08-25  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR c++/66590\n+\t* cp-objcp-common.c (cxx_block_may_fallthru): Handle\n+\tCLEANUP_STMT for the case which will be try/finally.\n+\n+2021-08-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102019\n+\t* init.c (build_value_init_noctor): Ignore unnamed zero-width\n+\tbitfields.\n+\n 2021-08-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.c (cp_parser_omp_clause_num_tasks,"}, {"sha": "db85ffc7442dc8d29abe56670d2239aff70b22a7", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d77ac4745c6263520c8fe66c0dfced8404003f/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d77ac4745c6263520c8fe66c0dfced8404003f/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=85d77ac4745c6263520c8fe66c0dfced8404003f", "patch": "@@ -1,3 +1,10 @@\n+2021-08-25  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR other/93067\n+\t* d-lang.cc (d_input_charset_callback): New function.\n+\t(d_init): Call new function\n+\tdiagnostic_initialize_input_context().\n+\n 2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* expr.cc (binary_op): Remove dead code."}, {"sha": "9679f3504847db869977c21f8b55d6dea597ba34", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d77ac4745c6263520c8fe66c0dfced8404003f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d77ac4745c6263520c8fe66c0dfced8404003f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=85d77ac4745c6263520c8fe66c0dfced8404003f", "patch": "@@ -1,3 +1,9 @@\n+2021-08-25  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR other/93067\n+\t* cpp.c (gfc_cpp_post_options): Call new function\n+\tdiagnostic_initialize_input_context().\n+\n 2021-08-24  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/98411"}, {"sha": "251af302f631e303ded8f04b032224cc66b8ac7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d77ac4745c6263520c8fe66c0dfced8404003f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d77ac4745c6263520c8fe66c0dfced8404003f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85d77ac4745c6263520c8fe66c0dfced8404003f", "patch": "@@ -1,3 +1,90 @@\n+2021-08-25  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/evrp1.c: Add -details to dump option.\n+\t* gcc.dg/tree-ssa/evrp2.c: Same.\n+\t* gcc.dg/tree-ssa/evrp3.c: Same.\n+\t* gcc.dg/tree-ssa/evrp4.c: Same.\n+\t* gcc.dg/tree-ssa/evrp6.c: Same.\n+\t* gcc.dg/tree-ssa/pr64130.c: Same.\n+\n+2021-08-25  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR target/94630\n+\t* gcc.target/powerpc/pr70117.c: Specify that we need the long double\n+\ttype to be IBM 128-bit.  Remove the code to use __ibm128.\n+\t* c-c++-common/dfp/convert-bfp-11.c: Specify that we need the long\n+\tdouble type to be IBM 128-bit.  Run the test at -O2 optimization.\n+\t* lib/target-supports.exp (add_options_for_long_double_ibm128): New\n+\tfunction.\n+\t(check_effective_target_long_double_ibm128): New function.\n+\t(add_options_for_long_double_ieee128): New function.\n+\t(check_effective_target_long_double_ieee128): New function.\n+\t(add_options_for_long_double_64bit): New function.\n+\t(check_effective_target_long_double_64bit): New function.\n+\n+2021-08-25  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR c++/66590\n+\t* g++.dg/warn/Wreturn-5.C: New test.\n+\n+2021-08-25  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/ipa/modref-1.c: Update testcase.\n+\t* gcc.dg/tree-ssa/modref-4.c: Update testcase.\n+\t* gcc.dg/tree-ssa/modref-8.c: New test.\n+\n+2021-08-25  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR other/93067\n+\t* gcc.dg/diagnostic-input-charset-1.c: New test.\n+\t* gcc.dg/diagnostic-input-utf8-bom.c: New test.\n+\n+2021-08-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102046\n+\t* gcc.dg/vect/pr102046.c: New testcase.\n+\n+2021-08-25  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\tPR target/101716\n+\t* gcc.target/i386/pr101716.c: New test.\n+\n+2021-08-25  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR tree-optimization/101145\n+\t* gcc.dg/vect/pr101145.c: New test.\n+\t* gcc.dg/vect/pr101145.inc: New test.\n+\t* gcc.dg/vect/pr101145_1.c: New test.\n+\t* gcc.dg/vect/pr101145_2.c: New test.\n+\t* gcc.dg/vect/pr101145_3.c: New test.\n+\t* gcc.dg/vect/pr101145inf.c: New test.\n+\t* gcc.dg/vect/pr101145inf.inc: New test.\n+\t* gcc.dg/vect/pr101145inf_1.c: New test.\n+\n+2021-08-25  konglin1  <lingling.kong@intel.com>\n+\n+\tPR target/101471\n+\t* gcc.target/i386/avx512f-pr101471.c: New test.\n+\n+2021-08-25  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/unpack-vectorize-1.c: New test.\n+\t* gcc.target/powerpc/unpack-vectorize-1.h: New test.\n+\t* gcc.target/powerpc/unpack-vectorize-2.c: New test.\n+\t* gcc.target/powerpc/unpack-vectorize-2.h: New test.\n+\t* gcc.target/powerpc/unpack-vectorize-3.c: New test.\n+\t* gcc.target/powerpc/unpack-vectorize-3.h: New test.\n+\t* gcc.target/powerpc/unpack-vectorize-run-1.c: New test.\n+\t* gcc.target/powerpc/unpack-vectorize-run-2.c: New test.\n+\t* gcc.target/powerpc/unpack-vectorize-run-3.c: New test.\n+\t* gcc.target/powerpc/unpack-vectorize.h: New test.\n+\n+2021-08-25  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/101989\n+\t* gcc.target/i386/avx2-shiftqihi-constant-1.c: Add -mno-avx512f.\n+\t* gcc.target/i386/sse2-shiftqihi-constant-1.c: Add -mno-avx\n+\n 2021-08-24  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/98411"}, {"sha": "c32ff4a1a4042b184aa9c2c9f16fa55a9a736e3b", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d77ac4745c6263520c8fe66c0dfced8404003f/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d77ac4745c6263520c8fe66c0dfced8404003f/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=85d77ac4745c6263520c8fe66c0dfced8404003f", "patch": "@@ -1,3 +1,20 @@\n+2021-08-25  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR other/93067\n+\t* charset.c (init_iconv_desc): Adapt to permit PFILE argument to\n+\tbe NULL.\n+\t(_cpp_convert_input): Likewise. Also move UTF-8 BOM logic to...\n+\t(cpp_check_utf8_bom): ...here.  New function.\n+\t(cpp_input_conversion_is_trivial): New function.\n+\t* files.c (read_file_guts): Allow PFILE argument to be NULL.  Add\n+\tINPUT_CHARSET argument as an alternate source of this information.\n+\t(read_file): Pass the new argument to read_file_guts.\n+\t(cpp_get_converted_source): New function.\n+\t* include/cpplib.h (struct cpp_converted_source): Declare.\n+\t(cpp_get_converted_source): Declare.\n+\t(cpp_input_conversion_is_trivial): Declare.\n+\t(cpp_check_utf8_bom): Declare.\n+\n 2021-08-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* macro.c (vaopt_state): Add m_stringify member."}, {"sha": "70f97a5823d699106ee29530a48cc1ba51242969", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d77ac4745c6263520c8fe66c0dfced8404003f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d77ac4745c6263520c8fe66c0dfced8404003f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=85d77ac4745c6263520c8fe66c0dfced8404003f", "patch": "@@ -1,3 +1,44 @@\n+2021-08-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/17_intro/names.cc: Check 'sz'.\n+\n+2021-08-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/17_intro/names.cc: Adjust for Windows.\n+\n+2021-08-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/valarray: Uglify 'func' parameters.\n+\t* testsuite/17_intro/names.cc: Add 'func' to checks.\n+\n+2021-08-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/102064\n+\t* include/bits/stl_uninitialized.h (_GLIBCXX_USE_ASSIGN_FOR_INIT):\n+\tDefine macro to check conditions for optimizing trivial cases.\n+\t(__check_constructible): New function to do static assert.\n+\t(uninitialized_copy, uninitialized_fill, uninitialized_fill_n):\n+\tUse new macro.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/1.cc:\n+\tAdjust dg-error pattern.\n+\t* testsuite/23_containers/vector/cons/89164.cc: Likewise. Add\n+\tC++17-specific checks from 89164_c++17.cc.\n+\t* testsuite/23_containers/vector/cons/89164_c++17.cc: Removed.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/102064.cc:\n+\tNew test.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy_n/102064.cc:\n+\tNew test.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_fill/102064.cc:\n+\tNew test.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_fill_n/102064.cc:\n+\tNew test.\n+\n+2021-08-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/102048\n+\t* include/ext/rope (rope::erase(size_type)): Remove broken\n+\tfunction.\n+\n 2021-08-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2020.xml: Update table."}]}