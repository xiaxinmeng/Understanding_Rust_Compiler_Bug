{"sha": "1b34e6e25062154c9a978785902db3a3326234eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIzNGU2ZTI1MDYyMTU0YzlhOTc4Nzg1OTAyZGIzYTMzMjYyMzRlYg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2015-01-09T21:38:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-01-09T21:38:00Z"}, "message": "re PR middle-end/64412 (ICE in offload compiler: in extract_insn, at recog.c:2327)\n\n\tPR middle-end/64412\n\t* lto-streamer.h (lto_stream_offload_p): New declaration.\n\t* lto-streamer.c (lto_stream_offload_p): New variable.\n\t* cgraphunit.c (ipa_passes): Set lto_stream_offload_p\n\tat the same time as section_name_prefix.\n\t* lto-streamer-out.c (hash_tree): Don't hash TREE_TARGET_OPTION\n\tif lto_stream_offload_p.\n\t* tree-streamer-out.c (streamer_pack_tree_bitfields): Don't\n\tstream TREE_TARGET_OPTION if lto_stream_offload_p.\n\t(write_ts_function_decl_tree_pointers): Don't\n\tstream DECL_FUNCTION_SPECIFIC_TARGET if lto_stream_offload_p.\n\t* tree-streamer-in.c (unpack_value_fields): Don't stream\n\tTREE_TARGET_OPTION in if ACCEL_COMPILER.\n\t(lto_input_ts_function_decl_tree_pointers): Don't stream\n\tDECL_FUNCTION_SPECIFIC_TARGET in if ACCEL_COMPILER.\n\t* lto-opts.c (lto_write_options): Use lto_stream_offload_p\n\tinstead of section_name_prefix string comparisons.\nlto/\n\t* lto.c (read_cgraph_and_symbols): Set lto_stream_offload_p\n\tif ACCEL_COMPILER.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r219410", "tree": {"sha": "0fa5fbb2a370d97a2ae01365d2990eccfaad9616", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fa5fbb2a370d97a2ae01365d2990eccfaad9616"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b34e6e25062154c9a978785902db3a3326234eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b34e6e25062154c9a978785902db3a3326234eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b34e6e25062154c9a978785902db3a3326234eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b34e6e25062154c9a978785902db3a3326234eb/comments", "author": null, "committer": null, "parents": [{"sha": "000c70a76c61dc95075e937f2bfa457226036b3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000c70a76c61dc95075e937f2bfa457226036b3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/000c70a76c61dc95075e937f2bfa457226036b3f"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "8ad86033fdc12b9166a7b140e6529821fb49f697", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b34e6e25062154c9a978785902db3a3326234eb", "patch": "@@ -1,3 +1,24 @@\n+2015-01-09  Bernd Schmidt  <bernds@codesourcery.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/64412\n+\t* lto-streamer.h (lto_stream_offload_p): New declaration.\n+\t* lto-streamer.c (lto_stream_offload_p): New variable.\n+\t* cgraphunit.c (ipa_passes): Set lto_stream_offload_p\n+\tat the same time as section_name_prefix.\n+\t* lto-streamer-out.c (hash_tree): Don't hash TREE_TARGET_OPTION\n+\tif lto_stream_offload_p.\n+\t* tree-streamer-out.c (streamer_pack_tree_bitfields): Don't\n+\tstream TREE_TARGET_OPTION if lto_stream_offload_p.\n+\t(write_ts_function_decl_tree_pointers): Don't\n+\tstream DECL_FUNCTION_SPECIFIC_TARGET if lto_stream_offload_p.\n+\t* tree-streamer-in.c (unpack_value_fields): Don't stream\n+\tTREE_TARGET_OPTION in if ACCEL_COMPILER.\n+\t(lto_input_ts_function_decl_tree_pointers): Don't stream\n+\tDECL_FUNCTION_SPECIFIC_TARGET in if ACCEL_COMPILER.\n+\t* lto-opts.c (lto_write_options): Use lto_stream_offload_p\n+\tinstead of section_name_prefix string comparisons.\n+\n 2015-01-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/64536"}, {"sha": "149f4474e3d51434c6b6bcf7ffe19ac00f1f7df7", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=1b34e6e25062154c9a978785902db3a3326234eb", "patch": "@@ -2114,11 +2114,14 @@ ipa_passes (void)\n       if (g->have_offload)\n \t{\n \t  section_name_prefix = OFFLOAD_SECTION_NAME_PREFIX;\n+\t  lto_stream_offload_p = true;\n \t  ipa_write_summaries (true);\n+\t  lto_stream_offload_p = false;\n \t}\n       if (flag_lto)\n \t{\n \t  section_name_prefix = LTO_SECTION_NAME_PREFIX;\n+\t  lto_stream_offload_p = false;\n \t  ipa_write_summaries (false);\n \t}\n     }"}, {"sha": "026b323b46f66558028c68c65f64a724253c6ca5", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=1b34e6e25062154c9a978785902db3a3326234eb", "patch": "@@ -167,7 +167,7 @@ lto_write_options (void)\n \t\t\t       \"-fno-strict-overflow\");\n \n   /* Append options from target hook and store them to offload_lto section.  */\n-  if (strcmp (section_name_prefix, OFFLOAD_SECTION_NAME_PREFIX) == 0)\n+  if (lto_stream_offload_p)\n     {\n       char *offload_opts = targetm.offload_options ();\n       char *offload_ptr = offload_opts;\n@@ -208,7 +208,7 @@ lto_write_options (void)\n \n       /* Do not store target-specific options in offload_lto section.  */\n       if ((cl_options[option->opt_index].flags & CL_TARGET)\n-\t && strcmp (section_name_prefix, OFFLOAD_SECTION_NAME_PREFIX) == 0)\n+\t  && lto_stream_offload_p)\n        continue;\n \n       /* Drop options created from the gcc driver that will be rejected\n@@ -221,8 +221,7 @@ lto_write_options (void)\n \t We do not need those.  The only exception is -foffload option, if we\n \t write it in offload_lto section.  Also drop all diagnostic options.  */\n       if ((cl_options[option->opt_index].flags & (CL_DRIVER|CL_WARNING))\n-\t  && (strcmp (section_name_prefix, OFFLOAD_SECTION_NAME_PREFIX) != 0\n-\t      || option->opt_index != OPT_foffload_))\n+\t  && (!lto_stream_offload_p || option->opt_index != OPT_foffload_))\n \tcontinue;\n \n       for (j = 0; j < option->canonical_option_num_elements; ++j)"}, {"sha": "21a78bb77aa92a29e361ea84d3cf771f521e7c98", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=1b34e6e25062154c9a978785902db3a3326234eb", "patch": "@@ -949,7 +949,9 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n     hstate.add (TRANSLATION_UNIT_LANGUAGE (t),\n \t\t\tstrlen (TRANSLATION_UNIT_LANGUAGE (t)));\n \n-  if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n+  if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION)\n+      /* We don't stream these when passing things to a different target.  */\n+      && !lto_stream_offload_p)\n     hstate.add_wide_int (cl_target_option_hash (TREE_TARGET_OPTION (t)));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))"}, {"sha": "6b4e0f279ae6be925531d6f38fef4c751dcd5847", "filename": "gcc/lto-streamer.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Flto-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Flto-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.c?ref=1b34e6e25062154c9a978785902db3a3326234eb", "patch": "@@ -67,6 +67,8 @@ static bitmap_obstack lto_obstack;\n static bool lto_obstack_initialized;\n \n const char *section_name_prefix = LTO_SECTION_NAME_PREFIX;\n+/* Set when streaming LTO for offloading compiler.  */\n+bool lto_stream_offload_p;\n \n /* Return a string representing LTO tag TAG.  */\n "}, {"sha": "853630f1931a3e74e3e049145540c7dc603e45de", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=1b34e6e25062154c9a978785902db3a3326234eb", "patch": "@@ -744,6 +744,10 @@ extern void lto_append_block (struct lto_output_stream *);\n \n \n /* In lto-streamer.c.  */\n+\n+/* Set when streaming LTO for offloading compiler.  */\n+extern bool lto_stream_offload_p;\n+\n extern const char *lto_tag_name (enum LTO_tags);\n extern bitmap lto_bitmap_alloc (void);\n extern void lto_bitmap_free (bitmap);"}, {"sha": "7bcb7dd1c5d2d646a71533fa79a75410a6f3260b", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=1b34e6e25062154c9a978785902db3a3326234eb", "patch": "@@ -1,3 +1,10 @@\n+2015-01-09  Bernd Schmidt  <bernds@codesourcery.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/64412\n+\t* lto.c (read_cgraph_and_symbols): Set lto_stream_offload_p\n+\tif ACCEL_COMPILER.\n+\n 2015-01-09  Michael Collison  <michael.collison@linaro.org>\n \n \t* lto.c: Include hash-set.h, machmode.h, vec.h, double-int.h,"}, {"sha": "96e5fd18ac134fb67c05c51818f2a24991bf82a5", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=1b34e6e25062154c9a978785902db3a3326234eb", "patch": "@@ -2909,7 +2909,8 @@ read_cgraph_and_symbols (unsigned nfiles, const char **fnames)\n   timevar_push (TV_IPA_LTO_DECL_IN);\n \n #ifdef ACCEL_COMPILER\n-    section_name_prefix = OFFLOAD_SECTION_NAME_PREFIX;\n+  section_name_prefix = OFFLOAD_SECTION_NAME_PREFIX;\n+  lto_stream_offload_p = true;\n #endif\n \n   real_file_decl_data"}, {"sha": "c43685259decadd00b922cea643466d9ba30e773", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=1b34e6e25062154c9a978785902db3a3326234eb", "patch": "@@ -529,8 +529,10 @@ unpack_value_fields (struct data_in *data_in, struct bitpack_d *bp, tree expr)\n \tvec_safe_grow (CONSTRUCTOR_ELTS (expr), length);\n     }\n \n+#ifndef ACCEL_COMPILER\n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n     cl_target_option_stream_in (data_in, bp, TREE_TARGET_OPTION (expr));\n+#endif\n \n   if (code == OMP_CLAUSE)\n     unpack_ts_omp_clause_value_fields (data_in, bp, expr);\n@@ -794,7 +796,9 @@ lto_input_ts_function_decl_tree_pointers (struct lto_input_block *ib,\n   DECL_VINDEX (expr) = stream_read_tree (ib, data_in);\n   /* DECL_STRUCT_FUNCTION is loaded on demand by cgraph_get_body.  */\n   DECL_FUNCTION_PERSONALITY (expr) = stream_read_tree (ib, data_in);\n+#ifndef ACCEL_COMPILER\n   DECL_FUNCTION_SPECIFIC_TARGET (expr) = stream_read_tree (ib, data_in);\n+#endif\n   DECL_FUNCTION_SPECIFIC_OPTIMIZATION (expr) = stream_read_tree (ib, data_in);\n \n   /* If the file contains a function with an EH personality set,"}, {"sha": "480fb1e272cbf12a2be097a94955b90784d46cf7", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b34e6e25062154c9a978785902db3a3326234eb/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=1b34e6e25062154c9a978785902db3a3326234eb", "patch": "@@ -480,7 +480,9 @@ streamer_pack_tree_bitfields (struct output_block *ob,\n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n     bp_pack_var_len_unsigned (bp, CONSTRUCTOR_NELTS (expr));\n \n-  if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n+  if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION)\n+      /* Don't stream these when passing things to a different target.  */\n+      && !lto_stream_offload_p)\n     cl_target_option_stream_out (ob, bp, TREE_TARGET_OPTION (expr));\n \n   if (code == OMP_CLAUSE)\n@@ -695,7 +697,9 @@ write_ts_function_decl_tree_pointers (struct output_block *ob, tree expr,\n   stream_write_tree (ob, DECL_VINDEX (expr), ref_p);\n   /* DECL_STRUCT_FUNCTION is handled by lto_output_function.  */\n   stream_write_tree (ob, DECL_FUNCTION_PERSONALITY (expr), ref_p);\n-  stream_write_tree (ob, DECL_FUNCTION_SPECIFIC_TARGET (expr), ref_p);\n+  /* Don't stream these when passing things to a different target.  */\n+  if (!lto_stream_offload_p)\n+    stream_write_tree (ob, DECL_FUNCTION_SPECIFIC_TARGET (expr), ref_p);\n   stream_write_tree (ob, DECL_FUNCTION_SPECIFIC_OPTIMIZATION (expr), ref_p);\n }\n "}]}