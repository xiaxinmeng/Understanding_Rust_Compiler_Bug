{"sha": "807b7d6209c7bd54b4dfc9abdc17f451e71aa648", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA3YjdkNjIwOWM3YmQ1NGI0ZGZjOWFiZGMxN2Y0NTFlNzFhYTY0OA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2014-06-27T09:24:45Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2014-06-27T09:24:45Z"}, "message": "Fix for devirtualization dump functions\n\n        * gimple.h (gimple_location_safe): New function introduced.\n\t* cgraphunit.c (walk_polymorphic_call_targets): Usage\n\tof gimple_location_safe replaces gimple_location.\n\t(gimple_fold_call): Likewise.\n\t* ipa-devirt.c (ipa_devirt): Likewise.\n\t* ipa-prop.c (ipa_make_edge_direct_to_target): Likewise.\n\t* ipa.c (walk_polymorphic_call_targets): Likewise.\n\t* tree-ssa-pre.c (eliminate_dom_walker::before_dom_children): Likewise.\n\nFrom-SVN: r212067", "tree": {"sha": "f1d34832a1df36dc5fc05332f91ff4a37dce3c77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1d34832a1df36dc5fc05332f91ff4a37dce3c77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/807b7d6209c7bd54b4dfc9abdc17f451e71aa648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807b7d6209c7bd54b4dfc9abdc17f451e71aa648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/807b7d6209c7bd54b4dfc9abdc17f451e71aa648", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807b7d6209c7bd54b4dfc9abdc17f451e71aa648/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fcbbf14a65cb7cb5814087870a0ecb47c227592c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcbbf14a65cb7cb5814087870a0ecb47c227592c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcbbf14a65cb7cb5814087870a0ecb47c227592c"}], "stats": {"total": 63, "additions": 35, "deletions": 28}, "files": [{"sha": "9d96c2baf24085a0272f1c96fb6c61937ba94686", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807b7d6209c7bd54b4dfc9abdc17f451e71aa648/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807b7d6209c7bd54b4dfc9abdc17f451e71aa648/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=807b7d6209c7bd54b4dfc9abdc17f451e71aa648", "patch": "@@ -1,3 +1,14 @@\n+2014-06-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* gimple.h (gimple_location_safe): New function introduced.\n+\t* cgraphunit.c (walk_polymorphic_call_targets): Usage\n+\tof gimple_location_safe replaces gimple_location.\n+\t(gimple_fold_call): Likewise.\n+\t* ipa-devirt.c (ipa_devirt): Likewise.\n+\t* ipa-prop.c (ipa_make_edge_direct_to_target): Likewise.\n+\t* ipa.c (walk_polymorphic_call_targets): Likewise.\n+\t* tree-ssa-pre.c (eliminate_dom_walker::before_dom_children): Likewise.\n+\n 2014-06-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/57233"}, {"sha": "d7e8038ec64e634036c78bb34325348c721a71df", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807b7d6209c7bd54b4dfc9abdc17f451e71aa648/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807b7d6209c7bd54b4dfc9abdc17f451e71aa648/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=807b7d6209c7bd54b4dfc9abdc17f451e71aa648", "patch": "@@ -906,7 +906,7 @@ walk_polymorphic_call_targets (pointer_set_t *reachable_call_targets,\n \t    }\n           if (dump_enabled_p ())\n             {\n-\t      location_t locus = gimple_location (edge->call_stmt);\n+\t      location_t locus = gimple_location_safe (edge->call_stmt);\n \t      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, locus,\n \t\t\t       \"devirtualizing call in %s to %s\\n\",\n \t\t\t       edge->caller->name (), target->name ());"}, {"sha": "3dcb57602c6edc5b64b9ef4c2f246ca31aff632b", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807b7d6209c7bd54b4dfc9abdc17f451e71aa648/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807b7d6209c7bd54b4dfc9abdc17f451e71aa648/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=807b7d6209c7bd54b4dfc9abdc17f451e71aa648", "patch": "@@ -387,7 +387,7 @@ fold_gimple_assign (gimple_stmt_iterator *si)\n \t\t      fndecl = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n \t\t    if (dump_enabled_p ())\n \t\t      {\n-\t\t\tlocation_t loc = gimple_location (stmt);\n+\t\t\tlocation_t loc = gimple_location_safe (stmt);\n \t\t\tdump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n \t\t\t\t\t \"resolving virtual function address \"\n \t\t\t\t\t \"reference to function %s\\n\",\n@@ -1131,7 +1131,7 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n \t      tree lhs = gimple_call_lhs (stmt);\n \t      if (dump_enabled_p ())\n \t\t{\n-\t\t  location_t loc = gimple_location (stmt);\n+\t\t  location_t loc = gimple_location_safe (stmt);\n \t\t  dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n \t\t\t\t   \"folding virtual function call to %s\\n\",\n \t\t \t\t   targets.length () == 1"}, {"sha": "3dfafc6d7c17d206425f116424dc9a0677fb0af0", "filename": "gcc/gimple.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807b7d6209c7bd54b4dfc9abdc17f451e71aa648/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807b7d6209c7bd54b4dfc9abdc17f451e71aa648/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=807b7d6209c7bd54b4dfc9abdc17f451e71aa648", "patch": "@@ -1501,6 +1501,15 @@ gimple_location (const_gimple g)\n   return g->location;\n }\n \n+/* Return location information for statement G if g is not NULL.\n+   Otherwise, UNKNOWN_LOCATION is returned.  */\n+\n+static inline location_t\n+gimple_location_safe (const_gimple g)\n+{\n+  return g ? gimple_location (g) : UNKNOWN_LOCATION;\n+}\n+\n /* Return pointer to location information for statement G.  */\n \n static inline const location_t *"}, {"sha": "d6b85bf3415b8f75910958cdb3bf97934b4c9f58", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807b7d6209c7bd54b4dfc9abdc17f451e71aa648/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807b7d6209c7bd54b4dfc9abdc17f451e71aa648/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=807b7d6209c7bd54b4dfc9abdc17f451e71aa648", "patch": "@@ -2080,7 +2080,7 @@ ipa_devirt (void)\n \t      {\n \t\tif (dump_enabled_p ())\n                   {\n-                    location_t locus = gimple_location (e->call_stmt);\n+                    location_t locus = gimple_location_safe (e->call_stmt);\n                     dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, locus,\n                                      \"speculatively devirtualizing call in %s/%i to %s/%i\\n\",\n                                      n->name (), n->order,"}, {"sha": "68efc77851c9dff40825191382c5faaf0bcb1e6f", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807b7d6209c7bd54b4dfc9abdc17f451e71aa648/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807b7d6209c7bd54b4dfc9abdc17f451e71aa648/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=807b7d6209c7bd54b4dfc9abdc17f451e71aa648", "patch": "@@ -2673,17 +2673,11 @@ ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target)\n \n           if (dump_enabled_p ())\n \t    {\n-\t      const char *fmt = \"discovered direct call to non-function in %s/%i, \"\n-\t\t\t\t\"making it __builtin_unreachable\\n\";\n-\n-\t      if (ie->call_stmt)\n-\t\t{\n-\t\t  location_t loc = gimple_location (ie->call_stmt);\n-\t\t  dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc, fmt,\n-\t\t\t\t   ie->caller->name (), ie->caller->order);\n-\t\t}\n-\t      else if (dump_file)\n-\t\tfprintf (dump_file, fmt, ie->caller->name (), ie->caller->order);\n+\t      location_t loc = gimple_location_safe (ie->call_stmt);\n+\t      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n+\t\t\t       \"discovered direct call to non-function in %s/%i, \"\n+\t\t\t       \"making it __builtin_unreachable\\n\",\n+\t\t\t       ie->caller->name (), ie->caller->order);\n \t    }\n \n \t  target = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n@@ -2745,18 +2739,11 @@ ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target)\n      }\n   if (dump_enabled_p ())\n     {\n-      const char *fmt = \"converting indirect call in %s to direct call to %s\\n\";\n-\n-      if (ie->call_stmt)\n-\t{\n-\t  location_t loc = gimple_location (ie->call_stmt);\n+      location_t loc = gimple_location_safe (ie->call_stmt);\n \n-\t  dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc, fmt,\n-\t\t\t   ie->caller->name (), callee->name ());\n-\n-\t}\n-      else if (dump_file)\n-\tfprintf (dump_file, fmt, ie->caller->name (), callee->name ());\n+      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n+\t\t       \"converting indirect call in %s to direct call to %s\\n\",\n+\t\t       ie->caller->name (), callee->name ());\n     }\n   ie = cgraph_make_edge_direct (ie, callee);\n   es = inline_edge_summary (ie);"}, {"sha": "76815648d898ce0902df2a5398d25e8a5079858f", "filename": "gcc/ipa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807b7d6209c7bd54b4dfc9abdc17f451e71aa648/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807b7d6209c7bd54b4dfc9abdc17f451e71aa648/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=807b7d6209c7bd54b4dfc9abdc17f451e71aa648", "patch": "@@ -198,7 +198,7 @@ walk_polymorphic_call_targets (pointer_set_t *reachable_call_targets,\n \n \t  if (dump_enabled_p ())\n             {\n-              location_t locus = gimple_location (edge->call_stmt);\n+              location_t locus = gimple_location_safe (edge->call_stmt);\n               dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, locus,\n                                \"devirtualizing call in %s/%i to %s/%i\\n\",\n                                edge->caller->name (), edge->caller->order,"}, {"sha": "d05a40be1ee4a88600c382a409c58453ca402f6b", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807b7d6209c7bd54b4dfc9abdc17f451e71aa648/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807b7d6209c7bd54b4dfc9abdc17f451e71aa648/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=807b7d6209c7bd54b4dfc9abdc17f451e71aa648", "patch": "@@ -4367,7 +4367,7 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n \t\t{\n \t\t  if (dump_enabled_p ())\n \t\t    {\n-\t\t      location_t loc = gimple_location (stmt);\n+\t\t      location_t loc = gimple_location_safe (stmt);\n \t\t      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n \t\t\t\t       \"converting indirect call to \"\n \t\t\t\t       \"function %s\\n\","}]}