{"sha": "2bd0a2d6b1b823008e36e1a5833cf520c3807ecc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJkMGEyZDZiMWI4MjMwMDhlMzZlMWE1ODMzY2Y1MjBjMzgwN2VjYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-02-15T21:14:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-02-15T21:14:05Z"}, "message": "re PR c++/69753 (bogus: expected primary-expression before \u2018>\u2019 token)\n\n\tPR c++/69753\n\n\t* search.c (any_dependent_bases_p): Split out...\n\t* name-lookup.c (do_class_using_decl): ...from here.\n\t* call.c (build_new_method_call_1): Don't complain about missing object\n\tif there are dependent bases.  Tweak error.\n\t* tree.c (non_static_member_function_p): Remove.\n\t* pt.c (type_dependent_expression_p): A member template of a\n\tdependent type is dependent.\n\t* cp-tree.h: Adjust.\n\nFrom-SVN: r233431", "tree": {"sha": "2e45a14353f0c3873d716c8fe004c3189dbf32fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e45a14353f0c3873d716c8fe004c3189dbf32fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe69277d6650978749d17d11f488230cee1b2ad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe69277d6650978749d17d11f488230cee1b2ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe69277d6650978749d17d11f488230cee1b2ad9"}], "stats": {"total": 120, "additions": 64, "deletions": 56}, "files": [{"sha": "04d55bc60b919d8bbc7a23c820e3f6a364e29419", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2bd0a2d6b1b823008e36e1a5833cf520c3807ecc", "patch": "@@ -1,5 +1,17 @@\n 2016-02-15  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/69753\n+\t* semantics.c (finish_call_expr): Implicit 'this' does not make\n+\tthe call dependent.\n+\t* search.c (any_dependent_bases_p): Split out...\n+\t* name-lookup.c (do_class_using_decl): ...from here.\n+\t* call.c (build_new_method_call_1): Don't complain about missing object\n+\tif there are dependent bases.  Tweak error.\n+\t* tree.c (non_static_member_function_p): Remove.\n+\t* pt.c (type_dependent_expression_p): A member template of a\n+\tdependent type is dependent.\n+\t* cp-tree.h: Adjust.\n+\n \tPR c++/68890\n \t* constexpr.c (verify_ctor_sanity): Remove CONSTRUCTOR_NELTS check.\n "}, {"sha": "db406543522f502113bff53eee3d61f398e5fbb0", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=2bd0a2d6b1b823008e36e1a5833cf520c3807ecc", "patch": "@@ -8160,7 +8160,7 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \n       if (permerror (input_location,\n \t\t     \"cannot call constructor %<%T::%D%> directly\",\n-\t\t     basetype, name))\n+\t\t     BINFO_TYPE (access_binfo), name))\n \tinform (input_location, \"for a function-style cast, remove the \"\n \t\t\"redundant %<::%D%>\", name);\n       call = build_functional_cast (basetype, build_tree_list_vec (user_args),\n@@ -8377,6 +8377,9 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \t\t     we know we really need it.  */\n \t\t  cand->first_arg = instance;\n \t\t}\n+\t      else if (any_dependent_bases_p ())\n+\t\t/* We can't tell until instantiation time whether we can use\n+\t\t   *this as the implicit object argument.  */;\n \t      else\n \t\t{\n \t\t  if (complain & tf_error)"}, {"sha": "b7d7bc685028df4976e38f9b24d13b0a584522b2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2bd0a2d6b1b823008e36e1a5833cf520c3807ecc", "patch": "@@ -6252,6 +6252,7 @@ extern tree adjust_result_of_qualified_name_lookup\n extern tree copied_binfo\t\t\t(tree, tree);\n extern tree original_binfo\t\t\t(tree, tree);\n extern int shared_member_p\t\t\t(tree);\n+extern bool any_dependent_bases_p (tree = current_nonlambda_class_type ());\n \n /* The representation of a deferred access check.  */\n \n@@ -6542,7 +6543,6 @@ extern tree get_first_fn\t\t\t(tree);\n extern tree ovl_cons\t\t\t\t(tree, tree);\n extern tree build_overload\t\t\t(tree, tree);\n extern tree ovl_scope\t\t\t\t(tree);\n-extern bool non_static_member_function_p        (tree);\n extern const char *cxx_printable_name\t\t(tree, int);\n extern const char *cxx_printable_name_translate\t(tree, int);\n extern tree build_exception_variant\t\t(tree, tree);"}, {"sha": "b5961e573f3ebb31671d826ab2c3cf17804ac068", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=2bd0a2d6b1b823008e36e1a5833cf520c3807ecc", "patch": "@@ -3333,8 +3333,6 @@ do_class_using_decl (tree scope, tree name)\n   /* True if any of the bases of CURRENT_CLASS_TYPE are dependent.  */\n   bool bases_dependent_p;\n   tree binfo;\n-  tree base_binfo;\n-  int i;\n \n   if (name == error_mark_node)\n     return NULL_TREE;\n@@ -3371,16 +3369,7 @@ do_class_using_decl (tree scope, tree name)\n \t\t      || (IDENTIFIER_TYPENAME_P (name)\n \t\t\t  && dependent_type_p (TREE_TYPE (name))));\n \n-  bases_dependent_p = false;\n-  if (processing_template_decl)\n-    for (binfo = TYPE_BINFO (current_class_type), i = 0;\n-\t BINFO_BASE_ITERATE (binfo, i, base_binfo);\n-\t i++)\n-      if (dependent_type_p (TREE_TYPE (base_binfo)))\n-\t{\n-\t  bases_dependent_p = true;\n-\t  break;\n-\t}\n+  bases_dependent_p = any_dependent_bases_p (current_class_type);\n \n   decl = NULL_TREE;\n "}, {"sha": "52e60b948b4fac08fd9c43bd2d0e42b207d6fe27", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2bd0a2d6b1b823008e36e1a5833cf520c3807ecc", "patch": "@@ -22904,9 +22904,16 @@ type_dependent_expression_p (tree expression)\n       && DECL_TEMPLATE_INFO (expression))\n     return any_dependent_template_arguments_p (DECL_TI_ARGS (expression));\n \n-  if (TREE_CODE (expression) == TEMPLATE_DECL\n-      && !DECL_TEMPLATE_TEMPLATE_PARM_P (expression))\n-    return false;\n+  if (TREE_CODE (expression) == TEMPLATE_DECL)\n+    {\n+      if (DECL_CLASS_SCOPE_P (expression)\n+\t  && dependent_type_p (DECL_CONTEXT (expression)))\n+\t/* A template's own parameters don't make it dependent, since those can\n+\t   be deduced, but the enclosing class does.  */\n+\treturn true;\n+      if (!DECL_TEMPLATE_TEMPLATE_PARM_P (expression))\n+\treturn false;\n+    }\n \n   if (TREE_CODE (expression) == STMT_EXPR)\n     expression = stmt_expr_value_expr (expression);"}, {"sha": "49f3bc5ed8085837441ad2741f959f09dfa4f0ae", "filename": "gcc/cp/search.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=2bd0a2d6b1b823008e36e1a5833cf520c3807ecc", "patch": "@@ -2842,3 +2842,21 @@ original_binfo (tree binfo, tree here)\n   return result;\n }\n \n+/* True iff TYPE has any dependent bases (and therefore we can't say\n+   definitively that another class is not a base of an instantiation of\n+   TYPE).  */\n+\n+bool\n+any_dependent_bases_p (tree type)\n+{\n+  if (!type || !CLASS_TYPE_P (type) || !processing_template_decl)\n+    return false;\n+\n+  unsigned i;\n+  tree base_binfo;\n+  FOR_EACH_VEC_SAFE_ELT (BINFO_BASE_BINFOS (TYPE_BINFO (type)), i, base_binfo)\n+    if (BINFO_DEPENDENT_BASE_P (base_binfo))\n+      return true;\n+\n+  return false;\n+}"}, {"sha": "0f6a6b5c539f752fff38a1a3c3b457877d08f889", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2bd0a2d6b1b823008e36e1a5833cf520c3807ecc", "patch": "@@ -2264,17 +2264,7 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n \t with no type; type_dependent_expression_p recognizes\n \t expressions with no type as being dependent.  */\n       if (type_dependent_expression_p (fn)\n-\t  || any_type_dependent_arguments_p (*args)\n-\t  /* For a non-static member function that doesn't have an\n-\t     explicit object argument, we need to specifically\n-\t     test the type dependency of the \"this\" pointer because it\n-\t     is not included in *ARGS even though it is considered to\n-\t     be part of the list of arguments.  Note that this is\n-\t     related to CWG issues 515 and 1005.  */\n-\t  || (TREE_CODE (fn) != COMPONENT_REF\n-\t      && non_static_member_function_p (fn)\n-\t      && current_class_ref\n-\t      && type_dependent_expression_p (current_class_ref)))\n+\t  || any_type_dependent_arguments_p (*args))\n \t{\n \t  result = build_nt_call_vec (fn, *args);\n \t  SET_EXPR_LOCATION (result, EXPR_LOC_OR_LOC (fn, input_location));\n@@ -2354,17 +2344,6 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n       object = maybe_dummy_object (BINFO_TYPE (BASELINK_ACCESS_BINFO (fn)),\n \t\t\t\t   NULL);\n \n-      if (processing_template_decl)\n-\t{\n-\t  if (type_dependent_expression_p (object))\n-\t    {\n-\t      tree ret = build_nt_call_vec (orig_fn, orig_args);\n-\t      release_tree_vector (orig_args);\n-\t      return ret;\n-\t    }\n-\t  object = build_non_dependent_expr (object);\n-\t}\n-\n       result = build_new_method_call (object, fn, args, NULL_TREE,\n \t\t\t\t      (disallow_virtual\n \t\t\t\t       ? LOOKUP_NORMAL|LOOKUP_NONVIRTUAL"}, {"sha": "041facda96a38580a414558299b9a6e97e91b339", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=2bd0a2d6b1b823008e36e1a5833cf520c3807ecc", "patch": "@@ -2071,23 +2071,6 @@ ovl_scope (tree ovl)\n     ovl = OVL_CHAIN (ovl);\n   return CP_DECL_CONTEXT (OVL_CURRENT (ovl));\n }\n-\n-/* Return TRUE if FN is a non-static member function, FALSE otherwise.\n-   This function looks into BASELINK and OVERLOAD nodes.  */\n-\n-bool\n-non_static_member_function_p (tree fn)\n-{\n-  if (fn == NULL_TREE)\n-    return false;\n-\n-  if (is_overloaded_fn (fn))\n-    fn = get_first_fn (fn);\n-\n-  return (DECL_P (fn)\n-\t  && DECL_NONSTATIC_MEMBER_FUNCTION_P (fn));\n-}\n-\n \f\n #define PRINT_RING_SIZE 4\n "}, {"sha": "f4e097e47197ed4f562b46c27e55fcfeaaa4490b", "filename": "gcc/testsuite/g++.dg/lookup/member3.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmember3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd0a2d6b1b823008e36e1a5833cf520c3807ecc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmember3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmember3.C?ref=2bd0a2d6b1b823008e36e1a5833cf520c3807ecc", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/69753\n+// { dg-do compile { target c++11 } }\n+\n+class A {\n+public:\n+  template <typename> void As();\n+  static A *FromWebContents();\n+  A *FromWebContents2();\n+};\n+template <typename T> class B : A {\n+  void FromWebContents() {\n+    auto guest = A::FromWebContents();\n+    guest ? guest->As<T>() : nullptr;\n+    auto guest2 = A::FromWebContents2();\n+    guest2 ? guest2->As<T>() : nullptr;\n+  }\n+};"}]}