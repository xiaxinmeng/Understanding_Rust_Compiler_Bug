{"sha": "378b66d4767b14322d56b08119205d756841552e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc4YjY2ZDQ3NjdiMTQzMjJkNTZiMDgxMTkyMDVkNzU2ODQxNTUyZQ==", "commit": {"author": {"name": "Marc Espie", "email": "espie@openbsd.org", "date": "2005-01-15T10:56:48Z"}, "committer": {"name": "Marc Espie", "email": "espie@gcc.gnu.org", "date": "2005-01-15T10:56:48Z"}, "message": "config.gcc (*-*-openbsd*): Set HAS_LIBC_R for OpenBSD <= 3.2.\n\n2005-01-11  Marc Espie  <espie@openbsd.org>\n\n\t* config.gcc (*-*-openbsd*): Set HAS_LIBC_R for OpenBSD <= 3.2.\n\t(i[34567]86-*-openbsd*): Switch to ELF for OpenBSD >= 3.4.\n\t* config/openbsd.h:  Fix C++ includes for native configurations.\n\tAdd proper OS_CPP_BUILTINS.  Fix libspec for recent OpenBSD.\n\tAdd trampoline support.\n\t* config/i386/openbsdelf.h: New.\n\nokay Richard Earnshaw, Zack Weinberg, further changes in a separate patch.\n\nFrom-SVN: r93694", "tree": {"sha": "771c9e0201505de7675a4751702fbadb35ce5726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/771c9e0201505de7675a4751702fbadb35ce5726"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/378b66d4767b14322d56b08119205d756841552e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378b66d4767b14322d56b08119205d756841552e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/378b66d4767b14322d56b08119205d756841552e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378b66d4767b14322d56b08119205d756841552e/comments", "author": {"login": "marcespie", "id": 10077755, "node_id": "MDQ6VXNlcjEwMDc3NzU1", "avatar_url": "https://avatars.githubusercontent.com/u/10077755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcespie", "html_url": "https://github.com/marcespie", "followers_url": "https://api.github.com/users/marcespie/followers", "following_url": "https://api.github.com/users/marcespie/following{/other_user}", "gists_url": "https://api.github.com/users/marcespie/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcespie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcespie/subscriptions", "organizations_url": "https://api.github.com/users/marcespie/orgs", "repos_url": "https://api.github.com/users/marcespie/repos", "events_url": "https://api.github.com/users/marcespie/events{/privacy}", "received_events_url": "https://api.github.com/users/marcespie/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60828cbd4f6535726eb2799e2224bb9bb077a980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60828cbd4f6535726eb2799e2224bb9bb077a980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60828cbd4f6535726eb2799e2224bb9bb077a980"}], "stats": {"total": 208, "additions": 196, "deletions": 12}, "files": [{"sha": "5db11a576db7d492508a517e9d451204a01f424e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378b66d4767b14322d56b08119205d756841552e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378b66d4767b14322d56b08119205d756841552e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=378b66d4767b14322d56b08119205d756841552e", "patch": "@@ -1,3 +1,12 @@\n+2005-01-15  Marc Espie  <espie@openbsd.org>\n+\n+\t* config.gcc (*-*-openbsd*): Set HAS_LIBC_R for OpenBSD <= 3.2.\n+\t(i[34567]86-*-openbsd*): Switch to ELF for OpenBSD >= 3.4.\n+\t* config/openbsd.h:  Fix C++ includes for native configurations.\n+\tAdd proper OS_CPP_BUILTINS.  Fix libspec for recent OpenBSD.\n+\tAdd trampoline support.\n+\t* config/i386/openbsdelf.h: New.\n+\n 2005-01-15  Marc Espie  <espie@openbsd.org>\n \n \t* collect2.c (main): Explicitly parse -dynamic-linker option."}, {"sha": "a295059127a9f57bd8be7b0b1afe78b8784e47a1", "filename": "gcc/config.gcc", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378b66d4767b14322d56b08119205d756841552e/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378b66d4767b14322d56b08119205d756841552e/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=378b66d4767b14322d56b08119205d756841552e", "patch": "@@ -493,6 +493,10 @@ case ${target} in\n       tmake_file=\"${tmake_file} t-openbsd-thread\"\n       ;;\n   esac\n+  case ${target} in\n+    *-*-openbsd2.*|*-*-openbsd3.[012])\n+      tm_defines=\"${tm_defines} HAS_LIBC_R=1\" ;;\n+  esac\n   ;;\n *-*-rtems*)\n   case ${enable_threads} in\n@@ -930,13 +934,20 @@ i[34567]86-*-netbsd*)\n x86_64-*-netbsd*)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h netbsd.h netbsd-elf.h i386/x86-64.h i386/netbsd64.h\"\n \t;;\n-i[34567]86-*-openbsd*)\n+i[34567]86-*-openbsd2.*|i[34567]86-*openbsd3.[0123])\n \ttm_file=\"i386/i386.h i386/unix.h i386/bsd.h i386/gas.h i386/gstabs.h openbsd-oldgas.h openbsd.h i386/openbsd.h\"\n \t# needed to unconfuse gdb\n \ttmake_file=\"t-libc-ok t-openbsd i386/t-openbsd\"\n \t# we need collect2 until our bug is fixed...\n \tuse_collect2=yes\n \t;;\n+i[34567]86-*-openbsd*)\n+\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/i386elf.h\"\n+\ttm_file=\"${tm_file} openbsd.h i386/openbsdelf.h\"\n+\tgas=yes\n+\tgnu_ld=yes\n+\tstabs=yes\n+\t;;\n i[34567]86-*-coff*)\n \ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h dbxcoff.h i386/i386-coff.h\"\n \tuse_fixproto=yes"}, {"sha": "3088e849a3509ebd261f531ed9e4967a6b8e25b2", "filename": "gcc/config/i386/openbsdelf.h", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378b66d4767b14322d56b08119205d756841552e/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378b66d4767b14322d56b08119205d756841552e/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h?ref=378b66d4767b14322d56b08119205d756841552e", "patch": "@@ -0,0 +1,130 @@\n+/* Configuration for an OpenBSD i386 target.\n+   \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* This gets defined in tm.h->linux.h->svr4.h, and keeps us from using\n+   libraries compiled with the native cc, so undef it. */\n+#undef NO_DOLLAR_IN_LABEL\n+\n+/* Override the default comment-starter of \"/\".  */\n+#undef ASM_COMMENT_START\n+#define ASM_COMMENT_START \"#\"\n+\n+\n+/* This goes away when the math-emulator is fixed */\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT \\\n+  (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_NO_FANCY_MATH_387)\n+\n+/* Run-time target specifications */\n+\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+    \tOPENBSD_OS_CPP_BUILTINS_ELF();\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* As an elf system, we need crtbegin/crtend stuff.  */\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"\\\n+\t%{!shared: %{pg:gcrt0%O%s} %{!pg:%{p:gcrt0%O%s} %{!p:crt0%O%s}} \\\n+\tcrtbegin%O%s} %{shared:crtbeginS%O%s}\"\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \"%{!shared:crtend%O%s} %{shared:crtendS%O%s}\"\n+\n+/* Layout of source language data types.  */\n+\n+/* This must agree with <machine/ansi.h> */\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"int\"\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE BITS_PER_WORD\n+\n+/* Assembler format: overall framework.  */\n+\n+#undef ASM_APP_ON\n+#define ASM_APP_ON \"#APP\\n\"\n+\n+#undef ASM_APP_OFF\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+\n+#undef SET_ASM_OP\n+#define SET_ASM_OP\t\"\\t.set\\t\"\n+\n+/* The following macros were originally stolen from i386v4.h.\n+   These have to be defined to get PIC code correct.  */\n+\n+/* Assembler format: dispatch tables.  */\n+\n+/* Assembler format: sections.  */\n+\n+/* Stack & calling: aggregate returns.  */\n+\n+/* Don't default to pcc-struct-return, because gcc is the only compiler, and\n+   we want to retain compatibility with older gcc versions.  */\n+#define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+/* Assembler format: alignment output.  */\n+\n+#ifdef HAVE_GAS_MAX_SKIP_P2ALIGN\n+#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE,LOG,MAX_SKIP) \\\n+  if ((LOG) != 0) {\\\n+    if ((MAX_SKIP) == 0) fprintf ((FILE), \"\\t.p2align %d\\n\", (LOG)); \\\n+    else fprintf ((FILE), \"\\t.p2align %d,,%d\\n\", (LOG), (MAX_SKIP)); \\\n+  }\n+#endif\n+\n+/* Stack & calling: profiling.  */\n+\n+/* OpenBSD's profiler recovers all information from the stack pointer.\n+   The icky part is not here, but in machine/profile.h.  */\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n+  fputs (flag_pic ? \"\\tcall __mcount@PLT\\n\": \"\\tcall __mcount\\n\", FILE);\n+\n+/* Assembler format: exception region output.  */\n+\n+/* our configuration still doesn't handle dwarf2 correctly */\n+#define DWARF2_UNWIND_INFO 0\n+\n+/* Assembler format: alignment output.  */\n+\n+/* Note that we pick up ASM_OUTPUT_MAX_SKIP_ALIGN from i386/gas.h */\n+\n+/* Note that we pick up ASM_OUTPUT_MI_THUNK from unix.h.  */\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \\\n+  \"%{!shared:%{!nostdlib:%{!r*:%{!e*:-e __start}}}} \\\n+   %{shared:-shared} %{R*} \\\n+   %{static:-Bstatic} \\\n+   %{!static:-Bdynamic} \\\n+   %{assert*} \\\n+   %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.so}\"\n+\n+#define OBSD_HAS_CORRECT_SPECS"}, {"sha": "f836cf9b4afab1c69cd0d4a9c626424e54896839", "filename": "gcc/config/openbsd.h", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378b66d4767b14322d56b08119205d756841552e/gcc%2Fconfig%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378b66d4767b14322d56b08119205d756841552e/gcc%2Fconfig%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd.h?ref=378b66d4767b14322d56b08119205d756841552e", "patch": "@@ -1,5 +1,5 @@\n /* Base configuration file for all OpenBSD targets.\n-   Copyright (C) 1999, 2000, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -52,29 +52,41 @@ Boston, MA 02111-1307, USA.  */\n \n #ifdef OPENBSD_NATIVE\n \n-#undef GCC_INCLUDE_DIR\n-#define GCC_INCLUDE_DIR \"/usr/include\"\n-\n /* The compiler is configured with ONLY the gcc/g++ standard headers.  */\n #undef INCLUDE_DEFAULTS\n #define INCLUDE_DEFAULTS\t\t\t\\\n   {\t\t\t\t\t\t\\\n     { GPLUSPLUS_INCLUDE_DIR, \"G++\", 1, 1 },\t\\\n-    { GCC_INCLUDE_DIR, \"GCC\", 0, 0 },\t\t\\\n+    { GPLUSPLUS_TOOL_INCLUDE_DIR, \"G++\", 1, 1 }, \\\n+    { GPLUSPLUS_BACKWARD_INCLUDE_DIR, \"G++\", 1, 1 }, \\\n+    { STANDARD_INCLUDE_DIR, STANDARD_INCLUDE_COMPONENT, 0, 0 }, \\\n     { 0, 0, 0, 0 }\t\t\t\t\\\n   }\n \n /* Under OpenBSD, the normal location of the various *crt*.o files is the\n    /usr/lib directory.  */\n-#define STANDARD_STARTFILE_PREFIX\t\"/usr/lib/\"\n+#undef STANDARD_STARTFILE_PREFIX\n+#define STANDARD_STARTFILE_PREFIX\t\"/usr/local/lib/\"\n \n #endif\n \n \f\n /* Controlling the compilation driver.  */\n+/* TARGET_OS_CPP_BUILTINS() common to all OpenBSD targets.  */\n+#define OPENBSD_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      builtin_define (\"__OpenBSD__\");\t\t\\\n+      builtin_define (\"__unix__\");\t\t\\\n+      builtin_define (\"__ANSI_COMPAT\");\t\t\\\n+      builtin_assert (\"system=unix\");\t\t\\\n+      builtin_assert (\"system=bsd\");\t\t\\\n+      builtin_assert (\"system=OpenBSD\");\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n \n /* CPP_SPEC appropriate for OpenBSD. We deal with -posix and -pthread.\n-   XXX the way threads are handling currently is not very satisfying,\n+   XXX the way threads are handled currently is not very satisfying,\n    since all code must be compiled with -pthread to work. \n    This two-stage defines makes it easy to pick that for targets that\n    have subspecs.  */\n@@ -84,10 +96,15 @@ Boston, MA 02111-1307, USA.  */\n #define OBSD_CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_POSIX_THREADS}\"\n #endif\n \n-/* LIB_SPEC appropriate for OpenBSD.  Select the appropriate libc, \n-   depending on profiling and threads.  Basically, \n-   -lc(_r)?(_p)?, select _r for threads, and _p for p or pg.  */\n-#define OBSD_LIB_SPEC \"%{!shared:-lc%{pthread:_r}%{p:_p}%{!p:%{pg:_p}}}\"\n+/* LIB_SPEC appropriate for OpenBSD.  */\n+#ifdef HAS_LIBC_R\n+/*   -lc(_r)?(_p)?, select _r for threads, and _p for p or pg.  */\n+# define OBSD_LIB_SPEC \"%{!shared:-lc%{pthread:_r}%{p:_p}%{!p:%{pg:_p}}}\"\n+#else\n+/* Include -lpthread if -pthread is specified on the command line. */\n+# define OBSD_LIB_SPEC \"%{!shared:%{pthread:-lpthread%{p:_p}%{!p:%{pg:_p}}}} %{!shared:-lc%{p:_p}%{!p:%{pg:_p}}}\"\n+#endif\n+\n \n #ifndef OBSD_HAS_CORRECT_SPECS\n \n@@ -275,3 +292,20 @@ do {\t\t\t\t\t\t\t\t\t \\\n    as this depends on a few other details as well...  */\n #define HANDLE_SYSV_PRAGMA 1\n \n+/* Stack is explicitly denied execution rights on OpenBSD platforms.  */\n+#define ENABLE_EXECUTE_STACK\t\t\t\t\t\t\\\n+extern void __enable_execute_stack (void *);\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+__enable_execute_stack (void *addr)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  long size = getpagesize ();\t\t\t\t\t\t\\\n+  long mask = ~(size-1);\t\t\t\t\t\t\\\n+  char *page = (char *) (((long) addr) & mask); \t\t\t\\\n+  char *end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \\\n+\t\t\t\t\t\t\t\t      \\\n+  if (mprotect (page, end - page, PROT_READ | PROT_WRITE | PROT_EXEC) < 0) \\\n+    perror (\"mprotect of trampoline code\");\t\t\t\t\\\n+}\n+\n+#include <sys/types.h>\n+#include <sys/mman.h>"}]}