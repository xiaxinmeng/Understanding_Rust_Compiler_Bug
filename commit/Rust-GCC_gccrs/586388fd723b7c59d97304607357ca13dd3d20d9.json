{"sha": "586388fd723b7c59d97304607357ca13dd3d20d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg2Mzg4ZmQ3MjNiN2M1OWQ5NzMwNDYwNzM1N2NhMTNkZDNkMjBkOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-04-16T10:16:52Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-16T10:16:52Z"}, "message": "uintp.adb (UI_From_Dint): Remove useless code.\n\n\t* uintp.adb (UI_From_Dint): Remove useless code.\n\t(UI_From_Int): Likewise.\n\t* uintp.h: Reorder declarations.\n\t(UI_From_gnu): Declare.\n\t(UI_Base): Likewise.\n\t(Vector_Template): Likewise.\n\t(Vector_To_Uint): Likewise.\n\t(Uint_0): Remove.\n\t(Uint_1): Likewise.\n\t* gcc-interface/gigi.h: Tweak comments.\n\t* gcc-interface/cuintp.c (UI_From_gnu): New global function.\n\t* gcc-interface/decl.c (maybe_pad_type): Do not warn if either size\n\toverflows.\n\t(annotate_value) <INTEGER_CST>: Call UI_From_gnu.\n\t* gcc-interface/trans.c (post_error_ne_num): Call post_error_ne.\n\t(post_error_ne_tree): Call UI_From_gnu and post_error_ne.\n\t* gcc-interface/utils.c (max_size) <tcc_binary>: Do not special-case\n\tTYPE_MAX_VALUE.\n\nFrom-SVN: r158408", "tree": {"sha": "d130186b36c958b0c3d54ab01e172031d9308604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d130186b36c958b0c3d54ab01e172031d9308604"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/586388fd723b7c59d97304607357ca13dd3d20d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/586388fd723b7c59d97304607357ca13dd3d20d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/586388fd723b7c59d97304607357ca13dd3d20d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/586388fd723b7c59d97304607357ca13dd3d20d9/comments", "author": null, "committer": null, "parents": [{"sha": "f0c6475aeaa426c110cdc4df6c63c0ee63e5776e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c6475aeaa426c110cdc4df6c63c0ee63e5776e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0c6475aeaa426c110cdc4df6c63c0ee63e5776e"}], "stats": {"total": 238, "additions": 141, "deletions": 97}, "files": [{"sha": "802b4d42dc64c30b7146b2a2eac15c51b51dd136", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586388fd723b7c59d97304607357ca13dd3d20d9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586388fd723b7c59d97304607357ca13dd3d20d9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=586388fd723b7c59d97304607357ca13dd3d20d9", "patch": "@@ -1,3 +1,24 @@\n+2010-04-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* uintp.adb (UI_From_Dint): Remove useless code.\n+\t(UI_From_Int): Likewise.\n+\t* uintp.h: Reorder declarations.\n+\t(UI_From_gnu): Declare.\n+\t(UI_Base): Likewise.\n+\t(Vector_Template): Likewise.\n+\t(Vector_To_Uint): Likewise.\n+\t(Uint_0): Remove.\n+\t(Uint_1): Likewise.\n+\t* gcc-interface/gigi.h: Tweak comments.\n+\t* gcc-interface/cuintp.c (UI_From_gnu): New global function.\n+\t* gcc-interface/decl.c (maybe_pad_type): Do not warn if either size\n+\toverflows.\n+\t(annotate_value) <INTEGER_CST>: Call UI_From_gnu.\n+\t* gcc-interface/trans.c (post_error_ne_num): Call post_error_ne.\n+\t(post_error_ne_tree): Call UI_From_gnu and post_error_ne.\n+\t* gcc-interface/utils.c (max_size) <tcc_binary>: Do not special-case\n+\tTYPE_MAX_VALUE.\n+\n 2010-04-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (make_type_from_size) <INTEGER_TYPE>: Just copy"}, {"sha": "31ed801e63c4dbb36518cd1570c5a12e61666e6a", "filename": "gcc/ada/gcc-interface/cuintp.c", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586388fd723b7c59d97304607357ca13dd3d20d9/gcc%2Fada%2Fgcc-interface%2Fcuintp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586388fd723b7c59d97304607357ca13dd3d20d9/gcc%2Fada%2Fgcc-interface%2Fcuintp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fcuintp.c?ref=586388fd723b7c59d97304607357ca13dd3d20d9", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2009, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2010, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -142,3 +142,61 @@ UI_To_gnu (Uint Input, tree type)\n \n   return gnu_ret;\n }\n+\n+/* Similar to UI_From_Int, but take a GCC INTEGER_CST.  We use UI_From_Int\n+   when possible, i.e. for a 32-bit signed value, to take advantage of its\n+   built-in caching mechanism.  For values of larger magnitude, we compute\n+   digits into a vector and call Vector_To_Uint.  */\n+\n+Uint\n+UI_From_gnu (tree Input)\n+{\n+  tree gnu_type = TREE_TYPE (Input), gnu_base, gnu_temp;\n+  /* UI_Base is defined so that 5 Uint digits is sufficient to hold the\n+     largest possible signed 64-bit value.  */\n+  const int Max_For_Dint = 5;\n+  int v[Max_For_Dint], i;\n+  Vector_Template temp;\n+  Int_Vector vec;\n+\n+#if HOST_BITS_PER_WIDE_INT == 64\n+  /* On 64-bit hosts, host_integerp tells whether the input fits in a\n+     signed 64-bit integer.  Then a truncation tells whether it fits\n+     in a signed 32-bit integer.  */\n+  if (host_integerp (Input, 0))\n+    {\n+      HOST_WIDE_INT hw_input = TREE_INT_CST_LOW (Input);\n+      if (hw_input == (int) hw_input)\n+\treturn UI_From_Int (hw_input);\n+    }\n+  else\n+    return No_Uint;\n+#else\n+  /* On 32-bit hosts, host_integerp tells whether the input fits in a\n+     signed 32-bit integer.  Then a sign test tells whether it fits\n+     in a signed 64-bit integer.  */\n+  if (host_integerp (Input, 0))\n+    return UI_From_Int (TREE_INT_CST_LOW (Input));\n+  else if (TREE_INT_CST_HIGH (Input) < 0\n+\t   && TYPE_UNSIGNED (gnu_type)\n+\t   && !(TREE_CODE (gnu_type) == INTEGER_TYPE\n+\t\t&& TYPE_IS_SIZETYPE (gnu_type)))\n+    return No_Uint;\n+#endif\n+\n+  gnu_base = build_int_cst (gnu_type, UI_Base);\n+  gnu_temp = Input;\n+\n+  for (i = Max_For_Dint - 1; i >= 0; i--)\n+    {\n+      v[i] = tree_low_cst (fold_build1 (ABS_EXPR, gnu_type,\n+\t\t\t\t\tfold_build2 (TRUNC_MOD_EXPR, gnu_type,\n+\t\t\t\t\t\t     gnu_temp, gnu_base)),\n+\t\t\t   0);\n+      gnu_temp = fold_build2 (TRUNC_DIV_EXPR, gnu_type, gnu_temp, gnu_base);\n+    }\n+\n+  temp.Low_Bound = 1, temp.High_Bound = Max_For_Dint;\n+  vec.Array = v, vec.Bounds = &temp;\n+  return Vector_To_Uint (vec, tree_int_cst_sgn (Input) < 0);\n+}"}, {"sha": "1a42ff7f8f854e9691b7fde23967fd83c42f3d72", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586388fd723b7c59d97304607357ca13dd3d20d9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586388fd723b7c59d97304607357ca13dd3d20d9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=586388fd723b7c59d97304607357ca13dd3d20d9", "patch": "@@ -6281,7 +6281,9 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n       && !operand_equal_p (size, orig_size, 0)\n       && !(TREE_CODE (size) == INTEGER_CST\n \t   && TREE_CODE (orig_size) == INTEGER_CST\n-\t   && tree_int_cst_lt (size, orig_size)))\n+\t   && (TREE_OVERFLOW (size)\n+\t       || TREE_OVERFLOW (orig_size)\n+\t       || tree_int_cst_lt (size, orig_size))))\n     {\n       Node_Id gnat_error_node = Empty;\n \n@@ -7087,7 +7089,7 @@ annotate_value (tree gnu_size)\n   TCode tcode;\n   Node_Ref_Or_Val ops[3], ret;\n   struct tree_int_map **h = NULL;\n-  int size, i;\n+  int i;\n \n   /* See if we've already saved the value for this node.  */\n   if (EXPR_P (gnu_size))\n@@ -7143,17 +7145,7 @@ annotate_value (tree gnu_size)\n \t  return annotate_value (temp);\n \t}\n \n-      if (!host_integerp (gnu_size, 1))\n-\treturn No_Uint;\n-\n-      size = tree_low_cst (gnu_size, 1);\n-\n-      /* This peculiar test is to make sure that the size fits in an int\n-\t on machines where HOST_WIDE_INT is not \"int\".  */\n-      if (tree_low_cst (gnu_size, 1) == size)\n-\treturn UI_From_Int (size);\n-      else\n-\treturn No_Uint;\n+      return UI_From_gnu (gnu_size);\n \n     case COMPONENT_REF:\n       /* The only case we handle here is a simple discriminant reference.  */"}, {"sha": "d6101be4da54c7e04c665d2ca962d5f22c2551f1", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586388fd723b7c59d97304607357ca13dd3d20d9/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586388fd723b7c59d97304607357ca13dd3d20d9/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=586388fd723b7c59d97304607357ca13dd3d20d9", "patch": "@@ -232,28 +232,25 @@ extern bool Sloc_to_locus (Source_Ptr Sloc, location_t *locus);\n \n /* Post an error message.  MSG is the error message, properly annotated.\n    NODE is the node at which to post the error and the node to use for the\n-   \"&\" substitution.  */\n+   '&' substitution.  */\n extern void post_error (const char *msg, Node_Id node);\n \n-/* Similar, but NODE is the node at which to post the error and ENT\n-   is the node to use for the \"&\" substitution.  */\n+/* Similar to post_error, but NODE is the node at which to post the error and\n+   ENT is the node to use for the '&' substitution.  */\n extern void post_error_ne (const char *msg, Node_Id node, Entity_Id ent);\n \n-/* Similar, but NODE is the node at which to post the error, ENT is the node\n-   to use for the \"&\" substitution, and NUM is the number to use for ^.  */\n+/* Similar to post_error_ne, but NUM is the number to use for the '^'.  */\n extern void post_error_ne_num (const char *msg, Node_Id node, Entity_Id ent,\n                                int num);\n \n-/* Similar to post_error_ne_num, but T is a GCC tree representing the number\n-   to write.  If the tree represents a constant that fits within a\n-   host integer, the text inside curly brackets in MSG will be output\n-   (presumably including a '^').  Otherwise that text will not be output\n-   and the text inside square brackets will be output instead.  */\n+/* Similar to post_error_ne, but T is a GCC tree representing the number to\n+   write.  If T represents a constant, the text inside curly brackets in\n+   MSG will be output (presumably including a '^').  Otherwise it will not\n+   be output and the text inside square brackets will be output instead.  */\n extern void post_error_ne_tree (const char *msg, Node_Id node, Entity_Id ent,\n                                 tree t);\n \n-/* Similar to post_error_ne_tree, except that NUM is a second integer to write\n-   in the message.  */\n+/* Similar to post_error_ne_tree, but NUM is a second integer to write.  */\n extern void post_error_ne_tree_2 (const char *msg, Node_Id node, Entity_Id ent,\n                                   tree t, int num);\n "}, {"sha": "7cf15dafb11bc870623fc50cc254632cd40d2d1e", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 15, "deletions": 37, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586388fd723b7c59d97304607357ca13dd3d20d9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586388fd723b7c59d97304607357ca13dd3d20d9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=586388fd723b7c59d97304607357ca13dd3d20d9", "patch": "@@ -7404,7 +7404,7 @@ decode_name (const char *name)\n \f\n /* Post an error message.  MSG is the error message, properly annotated.\n    NODE is the node at which to post the error and the node to use for the\n-   \"&\" substitution.  */\n+   '&' substitution.  */\n \n void\n post_error (const char *msg, Node_Id node)\n@@ -7418,8 +7418,8 @@ post_error (const char *msg, Node_Id node)\n     Error_Msg_N (fp, node);\n }\n \n-/* Similar, but NODE is the node at which to post the error and ENT\n-   is the node to use for the \"&\" substitution.  */\n+/* Similar to post_error, but NODE is the node at which to post the error and\n+   ENT is the node to use for the '&' substitution.  */\n \n void\n post_error_ne (const char *msg, Node_Id node, Entity_Id ent)\n@@ -7433,56 +7433,37 @@ post_error_ne (const char *msg, Node_Id node, Entity_Id ent)\n     Error_Msg_NE (fp, node, ent);\n }\n \n-/* Similar, but NODE is the node at which to post the error, ENT is the node\n-   to use for the \"&\" substitution, and NUM is the number to use for ^.  */\n+/* Similar to post_error_ne, but NUM is the number to use for the '^'.  */\n \n void\n post_error_ne_num (const char *msg, Node_Id node, Entity_Id ent, int num)\n {\n-  String_Template temp;\n-  Fat_Pointer fp;\n-\n-  temp.Low_Bound = 1, temp.High_Bound = strlen (msg);\n-  fp.Array = msg, fp.Bounds = &temp;\n   Error_Msg_Uint_1 = UI_From_Int (num);\n-\n-  if (Present (node))\n-    Error_Msg_NE (fp, node, ent);\n+  post_error_ne (msg, node, ent);\n }\n \f\n-/* Similar to post_error_ne_num, but T is a GCC tree representing the\n-   number to write.  If the tree represents a constant that fits within\n-   a host integer, the text inside curly brackets in MSG will be output\n-   (presumably including a '^').  Otherwise that text will not be output\n-   and the text inside square brackets will be output instead.  */\n+/* Similar to post_error_ne, but T is a GCC tree representing the number to\n+   write.  If T represents a constant, the text inside curly brackets in\n+   MSG will be output (presumably including a '^').  Otherwise it will not\n+   be output and the text inside square brackets will be output instead.  */\n \n void\n post_error_ne_tree (const char *msg, Node_Id node, Entity_Id ent, tree t)\n {\n-  char *newmsg = XALLOCAVEC (char, strlen (msg) + 1);\n-  String_Template temp = {1, 0};\n-  Fat_Pointer fp;\n+  char *new_msg = XALLOCAVEC (char, strlen (msg) + 1);\n   char start_yes, end_yes, start_no, end_no;\n   const char *p;\n   char *q;\n \n-  fp.Array = newmsg, fp.Bounds = &temp;\n-\n-  if (host_integerp (t, 1)\n-#if HOST_BITS_PER_WIDE_INT > HOST_BITS_PER_INT\n-      &&\n-      compare_tree_int\n-      (t, (((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_INT - 1)) - 1)) < 0\n-#endif\n-      )\n+  if (TREE_CODE (t) == INTEGER_CST)\n     {\n-      Error_Msg_Uint_1 = UI_From_Int (tree_low_cst (t, 1));\n+      Error_Msg_Uint_1 = UI_From_gnu (t);\n       start_yes = '{', end_yes = '}', start_no = '[', end_no = ']';\n     }\n   else\n     start_yes = '[', end_yes = ']', start_no = '{', end_no = '}';\n \n-  for (p = msg, q = newmsg; *p; p++)\n+  for (p = msg, q = new_msg; *p; p++)\n     {\n       if (*p == start_yes)\n \tfor (p++; *p != end_yes; p++)\n@@ -7496,13 +7477,10 @@ post_error_ne_tree (const char *msg, Node_Id node, Entity_Id ent, tree t)\n \n   *q = 0;\n \n-  temp.High_Bound = strlen (newmsg);\n-  if (Present (node))\n-    Error_Msg_NE (fp, node, ent);\n+  post_error_ne (new_msg, node, ent);\n }\n \n-/* Similar to post_error_ne_tree, except that NUM is a second integer to write\n-   in the message.  */\n+/* Similar to post_error_ne_tree, but NUM is a second integer to write.  */\n \n void\n post_error_ne_tree_2 (const char *msg, Node_Id node, Entity_Id ent, tree t,"}, {"sha": "68a0d0f0391611a23c28bee59ae2bcae20bfadf9", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586388fd723b7c59d97304607357ca13dd3d20d9/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586388fd723b7c59d97304607357ca13dd3d20d9/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=586388fd723b7c59d97304607357ca13dd3d20d9", "patch": "@@ -2228,8 +2228,7 @@ max_size (tree exp, bool max_p)\n \t       In that case, if one side overflows, return the other.\n \t       sizetype is signed, but we know sizes are non-negative.\n \t       Likewise, handle a MINUS_EXPR or PLUS_EXPR with the LHS\n-\t       overflowing or the maximum possible value and the RHS\n-\t       a variable.  */\n+\t       overflowing and the RHS a variable.  */\n \t    if (max_p\n \t\t&& code == MIN_EXPR\n \t\t&& TREE_CODE (rhs) == INTEGER_CST\n@@ -2241,9 +2240,8 @@ max_size (tree exp, bool max_p)\n \t\t     && TREE_OVERFLOW (lhs))\n \t      return rhs;\n \t    else if ((code == MINUS_EXPR || code == PLUS_EXPR)\n-\t\t     && ((TREE_CODE (lhs) == INTEGER_CST\n-\t\t\t  && TREE_OVERFLOW (lhs))\n-\t\t\t || operand_equal_p (lhs, TYPE_MAX_VALUE (type), 0))\n+\t\t     && TREE_CODE (lhs) == INTEGER_CST\n+\t\t     && TREE_OVERFLOW (lhs)\n \t\t     && !TREE_CONSTANT (rhs))\n \t      return lhs;\n \t    else"}, {"sha": "3b72d154c10ed15e43eed5df8ebd5265943fa3ba", "filename": "gcc/ada/uintp.adb", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586388fd723b7c59d97304607357ca13dd3d20d9/gcc%2Fada%2Fuintp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586388fd723b7c59d97304607357ca13dd3d20d9/gcc%2Fada%2Fuintp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.adb?ref=586388fd723b7c59d97304607357ca13dd3d20d9", "patch": "@@ -1703,15 +1703,9 @@ package body Uintp is\n \n             V : UI_Vector (1 .. Max_For_Dint);\n \n-            Temp_Integer : Dint;\n+            Temp_Integer : Dint := Input;\n \n          begin\n-            for J in V'Range loop\n-               V (J) := 0;\n-            end loop;\n-\n-            Temp_Integer := Input;\n-\n             for J in reverse V'Range loop\n                V (J) := Int (abs (Temp_Integer rem Dint (Base)));\n                Temp_Integer := Temp_Integer / Dint (Base);\n@@ -1752,15 +1746,9 @@ package body Uintp is\n \n          V : UI_Vector (1 .. Max_For_Int);\n \n-         Temp_Integer : Int;\n+         Temp_Integer : Int := Input;\n \n       begin\n-         for J in V'Range loop\n-            V (J) := 0;\n-         end loop;\n-\n-         Temp_Integer := Input;\n-\n          for J in reverse V'Range loop\n             V (J) := abs (Temp_Integer rem Base);\n             Temp_Integer := Temp_Integer / Base;"}, {"sha": "de70e115f43edb365cfd59d6be9892a3de2a94ac", "filename": "gcc/ada/uintp.h", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586388fd723b7c59d97304607357ca13dd3d20d9/gcc%2Fada%2Fuintp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586388fd723b7c59d97304607357ca13dd3d20d9/gcc%2Fada%2Fuintp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.h?ref=586388fd723b7c59d97304607357ca13dd3d20d9", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *            Copyright (C) 1992-2007, Free Software Foundation, Inc.       *\n+ *            Copyright (C) 1992-2010, Free Software Foundation, Inc.       *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -38,27 +38,42 @@ struct Uint_Entry\n #define UI_Is_In_Int_Range  uintp__ui_is_in_int_range\n extern Boolean UI_Is_In_Int_Range\t(Uint);\n \n-/* Obtain Char_Code value from Uint input. Value must be in range.  */\n+/* Obtain Char_Code value from Uint input.  Value must be in range.  */\n #define UI_To_CC uintp__ui_to_cc\n-extern Char_Code UI_To_CC               (Uint);\n+extern Char_Code UI_To_CC\t\t(Uint);\n \n-/* Obtain Int value from Uint input. This will abort if the result is\n-   out of range.  */\n+/* Convert a Char_Code into a Uint.  */\n+#define UI_From_CC uintp__ui_from_cc\n+extern Uint UI_From_CC\t\t\t(Char_Code);\n+\n+/* Obtain Int value from Uint input.  Abort if the result is out of range.  */\n #define UI_To_Int uintp__ui_to_int\n extern Int UI_To_Int\t\t\t(Uint);\n \n+/* Similarly, but return a GCC INTEGER_CST.  */\n+extern tree UI_To_gnu\t\t\t(Uint, tree);\n+\n /* Convert an Int into a Uint.  */\n #define UI_From_Int uintp__ui_from_int\n extern Uint UI_From_Int\t\t\t(int);\n \n-/* Convert a Char_Code into a Uint.  */\n-#define UI_From_CC uintp__ui_from_cc\n-extern Uint UI_From_CC                  (Char_Code);\n+/* Similarly, but take a GCC INTEGER_CST.  */\n+extern Uint UI_From_gnu\t\t\t(tree);\n \n-/* Similarly, but return a GCC INTEGER_CST.  Overflow is tested by the\n-   constant-folding used to build the node.  TYPE is the GCC type of the\n-   resulting node.  */\n-extern tree UI_To_gnu\t\t\t(Uint, tree);\n+/* Uint values are represented as multiple precision integers stored in a\n+   multi-digit format using UI_Base as the base.  This value is chosen so\n+   that the product UI_Base*UI_Base is within the range of Int values.  */\n+#define UI_Base uintp__base\n+extern const int UI_Base;\n+\n+/* Types for the fat pointer of Int vectors and the template it points to.  */\n+typedef struct {int Low_Bound, High_Bound; } Vector_Template;\n+typedef struct {const int *Array; Vector_Template *Bounds; }\n+\t__attribute ((aligned (sizeof (char *) * 2))) Int_Vector;\n+\n+/* Create and return the Uint value from the Int vector.  */\n+#define Vector_To_Uint uintp__vector_to_uint\n+extern Uint Vector_To_Uint\t\t(Int_Vector, Boolean);\n \n /* Universal integers are represented by the Uint type which is an index into\n    the Uints_Ptr table containing Uint_Entry values.  A Uint_Entry contains an\n@@ -75,6 +90,3 @@ extern struct Uint_Entry *uintp__uints__table;\n \n #define Udigits_Ptr uintp__udigits__table\n extern int *uintp__udigits__table;\n-\n-#define Uint_0 (Uint_Direct_Bias + 0)\n-#define Uint_1 (Uint_Direct_Bias + 1)"}]}