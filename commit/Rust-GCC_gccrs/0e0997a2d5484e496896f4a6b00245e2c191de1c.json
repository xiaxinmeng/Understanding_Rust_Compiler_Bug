{"sha": "0e0997a2d5484e496896f4a6b00245e2c191de1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUwOTk3YTJkNTQ4NGU0OTY4OTZmNGE2YjAwMjQ1ZTJjMTkxZGUxYw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-12-09T14:58:22Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-12-09T14:58:22Z"}, "message": "re PR tree-optimization/66949 (ICE at -O2 and -O3 on x86_64-linux-gnu in tree_ssa_phiopt_worker, at tree-ssa-phiopt.c:335)\n\n\tPR tree-optimization/66949\n\t* tree-ssa-phiopt.c (tree_ssa_phiopt_worker): Don't call \n\tsingle_non_singleton_phi_for_edges to get the PHI from\n\tfactor_out_conditional_conversion.  Use NULL_TREE instead of NULL.\n\t(factor_out_conditional_conversion): Adjust declaration.  Make it\n\treturn the newly-created PHI.\n\n\t* gcc.dg/torture/pr66949-1.c: New test.\n\t* gcc.dg/torture/pr66949-2.c: New test.\n\nFrom-SVN: r231457", "tree": {"sha": "5fcd418e8b836089f91ef035054fc6ad482c7638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fcd418e8b836089f91ef035054fc6ad482c7638"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e0997a2d5484e496896f4a6b00245e2c191de1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0997a2d5484e496896f4a6b00245e2c191de1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e0997a2d5484e496896f4a6b00245e2c191de1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0997a2d5484e496896f4a6b00245e2c191de1c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c81f958b3f1b2a41e94d505c34b6d911502bb15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c81f958b3f1b2a41e94d505c34b6d911502bb15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c81f958b3f1b2a41e94d505c34b6d911502bb15"}], "stats": {"total": 102, "additions": 84, "deletions": 18}, "files": [{"sha": "946e805e3a34ce3076a1639766d89edd6a2dd57c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0997a2d5484e496896f4a6b00245e2c191de1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0997a2d5484e496896f4a6b00245e2c191de1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e0997a2d5484e496896f4a6b00245e2c191de1c", "patch": "@@ -1,3 +1,12 @@\n+2015-12-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR tree-optimization/66949\n+\t* tree-ssa-phiopt.c (tree_ssa_phiopt_worker): Don't call \n+\tsingle_non_singleton_phi_for_edges to get the PHI from\n+\tfactor_out_conditional_conversion.  Use NULL_TREE instead of NULL.\n+\t(factor_out_conditional_conversion): Adjust declaration.  Make it\n+\treturn the newly-created PHI.\n+\n 2015-12-09  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-protos.h"}, {"sha": "e9c102079e822156cb29643838182e1761392afd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0997a2d5484e496896f4a6b00245e2c191de1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0997a2d5484e496896f4a6b00245e2c191de1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e0997a2d5484e496896f4a6b00245e2c191de1c", "patch": "@@ -1,3 +1,9 @@\n+2015-12-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR tree-optimization/66949\n+\t* gcc.dg/torture/pr66949-1.c: New test.\n+\t* gcc.dg/torture/pr66949-2.c: New test.\n+\n 2015-12-09  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \tPR rtl-optimization/67609"}, {"sha": "1b765bc282eebfe1f6ab1edf4750bd0cc3eb95ba", "filename": "gcc/testsuite/gcc.dg/torture/pr66949-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0997a2d5484e496896f4a6b00245e2c191de1c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66949-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0997a2d5484e496896f4a6b00245e2c191de1c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66949-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66949-1.c?ref=0e0997a2d5484e496896f4a6b00245e2c191de1c", "patch": "@@ -0,0 +1,28 @@\n+/* PR tree-optimization/66949 */\n+/* { dg-do compile } */\n+\n+int a, *b = &a, c;\n+\n+unsigned short\n+fn1 (unsigned short p1, unsigned int p2)\n+{\n+  return p2 > 1 || p1 >> p2 ? p1 : p1 << p2;\n+}\n+\n+void\n+fn2 ()\n+{\n+  int *d = &a;\n+  for (a = 0; a < -1; a = 1)\n+    ;\n+  if (a < 0)\n+    c = 0;\n+  *b = fn1 (*d || c, *d);\n+}\n+\n+int\n+main ()\n+{\n+  fn2 ();\n+  return 0;\n+}"}, {"sha": "e6250a344711f135569fb09dfa2cf288dd198066", "filename": "gcc/testsuite/gcc.dg/torture/pr66949-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0997a2d5484e496896f4a6b00245e2c191de1c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66949-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0997a2d5484e496896f4a6b00245e2c191de1c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66949-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66949-2.c?ref=0e0997a2d5484e496896f4a6b00245e2c191de1c", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/66949 */\n+/* { dg-do compile } */\n+\n+char a;\n+int b, c, d;\n+extern int fn2 (void);\n+\n+short\n+fn1 (short p1, short p2)\n+{\n+  return p2 == 0 ? p1 : p1 / p2;\n+}\n+\n+int\n+main (void)\n+{\n+  char e = 1;\n+  int f = 7;\n+  c = a >> f;\n+  b = fn1 (c, 0 < d <= e && fn2 ());\n+\n+  return 0;\n+}"}, {"sha": "e5e0a9a6ddb8621335203d4dd1a1dd07d48a7462", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0997a2d5484e496896f4a6b00245e2c191de1c/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0997a2d5484e496896f4a6b00245e2c191de1c/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=0e0997a2d5484e496896f4a6b00245e2c191de1c", "patch": "@@ -49,7 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n static unsigned int tree_ssa_phiopt_worker (bool, bool);\n static bool conditional_replacement (basic_block, basic_block,\n \t\t\t\t     edge, edge, gphi *, tree, tree);\n-static bool factor_out_conditional_conversion (edge, edge, gphi *, tree, tree);\n+static gphi *factor_out_conditional_conversion (edge, edge, gphi *, tree, tree);\n static int value_replacement (basic_block, basic_block,\n \t\t\t      edge, edge, gimple *, tree, tree);\n static bool minmax_replacement (basic_block, basic_block,\n@@ -310,19 +310,19 @@ tree_ssa_phiopt_worker (bool do_store_elim, bool do_hoist_loads)\n \n \t  /* Something is wrong if we cannot find the arguments in the PHI\n \t     node.  */\n-\t  gcc_assert (arg0 != NULL && arg1 != NULL);\n+\t  gcc_assert (arg0 != NULL_TREE && arg1 != NULL_TREE);\n \n-\t  if (factor_out_conditional_conversion (e1, e2, phi, arg0, arg1))\n+\t  gphi *newphi = factor_out_conditional_conversion (e1, e2, phi,\n+\t\t\t\t\t\t\t    arg0, arg1);\n+\t  if (newphi != NULL)\n \t    {\n+\t      phi = newphi;\n \t      /* factor_out_conditional_conversion may create a new PHI in\n \t\t BB2 and eliminate an existing PHI in BB2.  Recompute values\n \t\t that may be affected by that change.  */\n-\t      phis = phi_nodes (bb2);\n-\t      phi = single_non_singleton_phi_for_edges (phis, e1, e2);\n-\t      gcc_assert (phi);\n \t      arg0 = gimple_phi_arg_def (phi, e1->dest_idx);\n \t      arg1 = gimple_phi_arg_def (phi, e2->dest_idx);\n-\t      gcc_assert (arg0 != NULL && arg1 != NULL);\n+\t      gcc_assert (arg0 != NULL_TREE && arg1 != NULL_TREE);\n \t    }\n \n \t  /* Do the replacement of conditional if it can be done.  */\n@@ -402,9 +402,9 @@ replace_phi_edge_with_variable (basic_block cond_block,\n \n /* PR66726: Factor conversion out of COND_EXPR.  If the arguments of the PHI\n    stmt are CONVERT_STMT, factor out the conversion and perform the conversion\n-   to the result of PHI stmt.  */\n+   to the result of PHI stmt.  Return the newly-created PHI, if any.  */\n \n-static bool\n+static gphi *\n factor_out_conditional_conversion (edge e0, edge e1, gphi *phi,\n \t\t\t\t   tree arg0, tree arg1)\n {\n@@ -421,7 +421,7 @@ factor_out_conditional_conversion (edge e0, edge e1, gphi *phi,\n      statement have the same unary operation, we can handle more\n      than two arguments too.  */\n   if (gimple_phi_num_args (phi) != 2)\n-    return false;\n+    return NULL;\n \n   /* First canonicalize to simplify tests.  */\n   if (TREE_CODE (arg0) != SSA_NAME)\n@@ -433,14 +433,14 @@ factor_out_conditional_conversion (edge e0, edge e1, gphi *phi,\n   if (TREE_CODE (arg0) != SSA_NAME\n       || (TREE_CODE (arg1) != SSA_NAME\n \t  && TREE_CODE (arg1) != INTEGER_CST))\n-    return false;\n+    return NULL;\n \n   /* Check if arg0 is an SSA_NAME and the stmt which defines arg0 is\n      a conversion.  */\n   arg0_def_stmt = SSA_NAME_DEF_STMT (arg0);\n   if (!is_gimple_assign (arg0_def_stmt)\n       || !gimple_assign_cast_p (arg0_def_stmt))\n-    return false;\n+    return NULL;\n \n   /* Use the RHS as new_arg0.  */\n   convert_code = gimple_assign_rhs_code (arg0_def_stmt);\n@@ -455,7 +455,7 @@ factor_out_conditional_conversion (edge e0, edge e1, gphi *phi,\n       arg1_def_stmt = SSA_NAME_DEF_STMT (arg1);\n       if (!is_gimple_assign (arg1_def_stmt)\n \t  || gimple_assign_rhs_code (arg1_def_stmt) != convert_code)\n-\treturn false;\n+\treturn NULL;\n \n       /* Use the RHS as new_arg1.  */\n       new_arg1 = gimple_assign_rhs1 (arg1_def_stmt);\n@@ -471,21 +471,21 @@ factor_out_conditional_conversion (edge e0, edge e1, gphi *phi,\n \t  if (gimple_assign_cast_p (arg0_def_stmt))\n \t    new_arg1 = fold_convert (TREE_TYPE (new_arg0), arg1);\n \t  else\n-\t    return false;\n+\t    return NULL;\n \t}\n       else\n-\treturn false;\n+\treturn NULL;\n     }\n \n   /*  If arg0/arg1 have > 1 use, then this transformation actually increases\n       the number of expressions evaluated at runtime.  */\n   if (!has_single_use (arg0)\n       || (arg1_def_stmt && !has_single_use (arg1)))\n-    return false;\n+    return NULL;\n \n   /* If types of new_arg0 and new_arg1 are different bailout.  */\n   if (!types_compatible_p (TREE_TYPE (new_arg0), TREE_TYPE (new_arg1)))\n-    return false;\n+    return NULL;\n \n   /* Create a new PHI stmt.  */\n   result = PHI_RESULT (phi);\n@@ -528,7 +528,7 @@ factor_out_conditional_conversion (edge e0, edge e1, gphi *phi,\n   /* Remove the original PHI stmt.  */\n   gsi = gsi_for_stmt (phi);\n   gsi_remove (&gsi, true);\n-  return true;\n+  return newphi;\n }\n \n /*  The function conditional_replacement does the main work of doing the"}]}