{"sha": "9aff220f248c386bc645db3a40bdeee88baea5ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFmZjIyMGYyNDhjMzg2YmM2NDVkYjNhNDBiZGVlZTg4YmFlYTVmZg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2010-11-26T04:25:32Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2010-11-26T04:25:32Z"}, "message": "re PR fortran/46020 (Improve error string for BIND(C) diagnostic for len>1 character return type)\n\nPR other/46020\n* configure.ac (CXX_FOR_TARGET): Add -funconfigured-libstdc++-v3.\n* Makefile.def (CXX_FOR_TARGET): Removed from flags_to_pass.\n* Makefile.tpl (CXX_FOR_TARGET_FLAG_TO_PASS): New.\n(BASE_FLAGS_TO_PASS): Use it.\n* configure: Rebuilt.\n* Makefile.in: Rebuilt.\n\nFrom-SVN: r167160", "tree": {"sha": "7ae1fd98cdefafcec0ad911e8281931b12b781c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ae1fd98cdefafcec0ad911e8281931b12b781c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aff220f248c386bc645db3a40bdeee88baea5ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aff220f248c386bc645db3a40bdeee88baea5ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aff220f248c386bc645db3a40bdeee88baea5ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aff220f248c386bc645db3a40bdeee88baea5ff/comments", "author": null, "committer": null, "parents": [{"sha": "54e07cf808c3b425cf916f42a2a95fcb7d917a6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e07cf808c3b425cf916f42a2a95fcb7d917a6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e07cf808c3b425cf916f42a2a95fcb7d917a6b"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "f169b7a7512cfc287e4999b46a8965c6287ea49a", "filename": "ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aff220f248c386bc645db3a40bdeee88baea5ff/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aff220f248c386bc645db3a40bdeee88baea5ff/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=9aff220f248c386bc645db3a40bdeee88baea5ff", "patch": "@@ -1,3 +1,13 @@\n+2010-11-26  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR other/46020\n+\t* configure.ac (CXX_FOR_TARGET): Add -funconfigured-libstdc++-v3.\n+\t* Makefile.def (CXX_FOR_TARGET): Removed from flags_to_pass.\n+\t* Makefile.tpl (CXX_FOR_TARGET_FLAG_TO_PASS): New.\n+\t(BASE_FLAGS_TO_PASS): Use it.\n+\t* configure: Rebuilt.\n+\t* Makefile.in: Rebuilt.\n+\n 2010-11-23  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR binutils/12258"}, {"sha": "8eb5b03a3d9a3768304c129b61404f27794d8821", "filename": "Makefile.def", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aff220f248c386bc645db3a40bdeee88baea5ff/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aff220f248c386bc645db3a40bdeee88baea5ff/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=9aff220f248c386bc645db3a40bdeee88baea5ff", "patch": "@@ -282,7 +282,6 @@ flags_to_pass = { flag= AS_FOR_TARGET ; };\n flags_to_pass = { flag= CC_FOR_TARGET ; };\n flags_to_pass = { flag= CFLAGS_FOR_TARGET ; };\n flags_to_pass = { flag= CPPFLAGS_FOR_TARGET ; };\n-flags_to_pass = { flag= CXX_FOR_TARGET ; };\n flags_to_pass = { flag= CXXFLAGS_FOR_TARGET ; };\n flags_to_pass = { flag= DLLTOOL_FOR_TARGET ; };\n flags_to_pass = { flag= FLAGS_FOR_TARGET ; };"}, {"sha": "945fc5ddb8d003ae6e85270e75f3a72dfb5d00a3", "filename": "Makefile.in", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aff220f248c386bc645db3a40bdeee88baea5ff/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aff220f248c386bc645db3a40bdeee88baea5ff/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=9aff220f248c386bc645db3a40bdeee88baea5ff", "patch": "@@ -640,6 +640,26 @@ HOST_LIB_PATH_libelf = \\\n @endif libelf\n \n \n+CXX_FOR_TARGET_FLAG_TO_PASS = \\\n+\t\"CXX_FOR_TARGET=$(CXX_FOR_TARGET)\"\n+@if target-libstdc++-v3\n+# CXX_FOR_TARGET is tricky to get right for target libs that require a\n+# functional C++ compiler.  When we recurse, if we expand\n+# CXX_FOR_TARGET before configuring libstdc++-v3, we won't get\n+# libstdc++ include flags from the script.  Instead, we get an\n+# -funconfigured-* word, so that we'll get errors if this invalid C++\n+# command line is used for anything, but also so that we can use the\n+# word to decide whether or not to pass on this CXX_FOR_TARGET.  If we\n+# don't pass it on, sub-make will use the default definition, that\n+# re-expands it at the time of use, so we'll get it right when we need\n+# it.  One potential exception is the expansion of CXX_FOR_TARGET\n+# passed down as part of CXX within TARGET_FLAGS, but this wouldn't\n+# really work, for C++ host programs can't depend on the current-stage\n+# C++ target library.\n+CXX_FOR_TARGET_FLAG_TO_PASS = \\\n+\t$(shell if echo \"$(CXX_FOR_TARGET)\" | grep \" -funconfigured-\" > /dev/null; then :; else echo '\"CXX_FOR_TARGET=$(CXX_FOR_TARGET)\"'; fi)\n+@endif target-libstdc++-v3\n+\n # Flags to pass down to all sub-makes.\n BASE_FLAGS_TO_PASS = \\\n \t\"DESTDIR=$(DESTDIR)\" \\\n@@ -707,7 +727,6 @@ BASE_FLAGS_TO_PASS = \\\n \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n \t\"CPPFLAGS_FOR_TARGET=$(CPPFLAGS_FOR_TARGET)\" \\\n-\t\"CXX_FOR_TARGET=$(CXX_FOR_TARGET)\" \\\n \t\"CXXFLAGS_FOR_TARGET=$(CXXFLAGS_FOR_TARGET)\" \\\n \t\"DLLTOOL_FOR_TARGET=$(DLLTOOL_FOR_TARGET)\" \\\n \t\"FLAGS_FOR_TARGET=$(FLAGS_FOR_TARGET)\" \\\n@@ -747,6 +766,7 @@ BASE_FLAGS_TO_PASS = \\\n \t\"STAGEfeedback_CFLAGS=$(STAGEfeedback_CFLAGS)\" \\\n \t\"STAGEfeedback_CXXFLAGS=$(STAGEfeedback_CXXFLAGS)\" \\\n \t\"STAGEfeedback_TFLAGS=$(STAGEfeedback_TFLAGS)\" \\\n+\t$(CXX_FOR_TARGET_FLAG_TO_PASS) \\\n \t\"TFLAGS=$(TFLAGS)\" \\\n \t\"CONFIG_SHELL=$(SHELL)\" \\\n \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" "}, {"sha": "f9a2936c33c8089bf5e2b87434a56079b37a5c61", "filename": "Makefile.tpl", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aff220f248c386bc645db3a40bdeee88baea5ff/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aff220f248c386bc645db3a40bdeee88baea5ff/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=9aff220f248c386bc645db3a40bdeee88baea5ff", "patch": "@@ -551,13 +551,34 @@ HOST_LIB_PATH_[+module+] = \\\n @endif [+module+]\n [+ ENDIF lib_path +][+ ENDFOR host_modules +]\n \n+CXX_FOR_TARGET_FLAG_TO_PASS = \\\n+\t\"CXX_FOR_TARGET=$(CXX_FOR_TARGET)\"\n+@if target-libstdc++-v3\n+# CXX_FOR_TARGET is tricky to get right for target libs that require a\n+# functional C++ compiler.  When we recurse, if we expand\n+# CXX_FOR_TARGET before configuring libstdc++-v3, we won't get\n+# libstdc++ include flags from the script.  Instead, we get an\n+# -funconfigured-* word, so that we'll get errors if this invalid C++\n+# command line is used for anything, but also so that we can use the\n+# word to decide whether or not to pass on this CXX_FOR_TARGET.  If we\n+# don't pass it on, sub-make will use the default definition, that\n+# re-expands it at the time of use, so we'll get it right when we need\n+# it.  One potential exception is the expansion of CXX_FOR_TARGET\n+# passed down as part of CXX within TARGET_FLAGS, but this wouldn't\n+# really work, for C++ host programs can't depend on the current-stage\n+# C++ target library.\n+CXX_FOR_TARGET_FLAG_TO_PASS = \\\n+\t$(shell if echo \"$(CXX_FOR_TARGET)\" | grep \" -funconfigured-\" > /dev/null; then :; else echo '\"CXX_FOR_TARGET=$(CXX_FOR_TARGET)\"'; fi)\n+@endif target-libstdc++-v3\n+\n # Flags to pass down to all sub-makes.\n BASE_FLAGS_TO_PASS =[+ FOR flags_to_pass +][+ IF optional +] \\\n \t\"`echo '[+flag+]=$([+flag+])' | sed -e s'/[^=][^=]*=$$/XFOO=/'`\"[+ ELSE optional +] \\\n \t\"[+flag+]=$([+flag+])\"[+ ENDIF optional+][+ ENDFOR flags_to_pass +][+ FOR bootstrap-stage +] \\\n \t\"STAGE[+id+]_CFLAGS=$(STAGE[+id+]_CFLAGS)\" \\\n \t\"STAGE[+id+]_CXXFLAGS=$(STAGE[+id+]_CXXFLAGS)\" \\\n \t\"STAGE[+id+]_TFLAGS=$(STAGE[+id+]_TFLAGS)\"[+ ENDFOR bootstrap-stage +] \\\n+\t$(CXX_FOR_TARGET_FLAG_TO_PASS) \\\n \t\"TFLAGS=$(TFLAGS)\" \\\n \t\"CONFIG_SHELL=$(SHELL)\" \\\n \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" "}, {"sha": "683341345d1d59f7e024d54a6d97e999ca597a93", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aff220f248c386bc645db3a40bdeee88baea5ff/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aff220f248c386bc645db3a40bdeee88baea5ff/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=9aff220f248c386bc645db3a40bdeee88baea5ff", "patch": "@@ -13363,7 +13363,7 @@ else\n   esac\n   if test $ok = yes; then\n     # An in-tree tool is available and we can use it\n-    CXX_FOR_TARGET='$$r/$(HOST_SUBDIR)/gcc/g++ -B$$r/$(HOST_SUBDIR)/gcc/ -nostdinc++ `test ! -f $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags || $(SHELL) $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags --build-includes` -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs'\n+    CXX_FOR_TARGET='$$r/$(HOST_SUBDIR)/gcc/g++ -B$$r/$(HOST_SUBDIR)/gcc/ -nostdinc++ `if test -f $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags; then $(SHELL) $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags --build-includes; else echo -funconfigured-libstdc++-v3 ; fi` -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs'\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: result: just compiled\" >&5\n $as_echo \"just compiled\" >&6; }\n   elif expr \"x$CXX_FOR_TARGET\" : \"x/\" > /dev/null; then"}, {"sha": "7859290a8b81d65794ed116eac869e98adac97a9", "filename": "configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aff220f248c386bc645db3a40bdeee88baea5ff/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aff220f248c386bc645db3a40bdeee88baea5ff/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=9aff220f248c386bc645db3a40bdeee88baea5ff", "patch": "@@ -3236,7 +3236,7 @@ GCC_TARGET_TOOL(ar, AR_FOR_TARGET, AR, [binutils/ar])\n GCC_TARGET_TOOL(as, AS_FOR_TARGET, AS, [gas/as-new])\n GCC_TARGET_TOOL(cc, CC_FOR_TARGET, CC, [gcc/xgcc -B$$r/$(HOST_SUBDIR)/gcc/])\n GCC_TARGET_TOOL(c++, CXX_FOR_TARGET, CXX,\n-\t\t[gcc/g++ -B$$r/$(HOST_SUBDIR)/gcc/ -nostdinc++ `test ! -f $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags || $(SHELL) $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags --build-includes` -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs],\n+\t\t[gcc/g++ -B$$r/$(HOST_SUBDIR)/gcc/ -nostdinc++ `if test -f $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags; then $(SHELL) $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags --build-includes; else echo -funconfigured-libstdc++-v3 ; fi` -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs],dnl see comments for CXX_FOR_TARGET_FLAG_TO_PASS\n \t\tc++)\n GCC_TARGET_TOOL(c++ for libstdc++, RAW_CXX_FOR_TARGET, CXX,\n \t\t[gcc/xgcc -shared-libgcc -B$$r/$(HOST_SUBDIR)/gcc -nostdinc++ -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs],"}]}