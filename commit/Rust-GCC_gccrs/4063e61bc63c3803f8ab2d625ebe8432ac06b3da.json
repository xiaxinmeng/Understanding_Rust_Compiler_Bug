{"sha": "4063e61bc63c3803f8ab2d625ebe8432ac06b3da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA2M2U2MWJjNjNjMzgwM2Y4YWIyZDYyNWViZTg0MzJhYzA2YjNkYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-07-09T03:33:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-07-09T03:33:54Z"}, "message": "re PR c++/45437 (Loses reference during update)\n\n\tPR c++/45437\ngcc/\n\t* gimplify.c (goa_stabilize_expr): Handle RHS preevaluation in\n\tcompound assignment.\ngcc/c-family/\n\t* c-omp.c (check_omp_for_incr_expr): Handle preevaluation.\ngcc/cp/\n\t* typeck.c (cp_build_modify_expr): Preevaluate RHS.\n\nFrom-SVN: r176072", "tree": {"sha": "2933e4a1c40cd6d7cb203f1eec34d632fcacf4b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2933e4a1c40cd6d7cb203f1eec34d632fcacf4b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4063e61bc63c3803f8ab2d625ebe8432ac06b3da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4063e61bc63c3803f8ab2d625ebe8432ac06b3da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4063e61bc63c3803f8ab2d625ebe8432ac06b3da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2fda8e144a7db5ba6025cfe643da0c6111cc2b0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f"}], "stats": {"total": 76, "additions": 75, "deletions": 1}, "files": [{"sha": "9bf29427b60588a08612516d2c0aa7d1cd4a3e8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4063e61bc63c3803f8ab2d625ebe8432ac06b3da", "patch": "@@ -1,5 +1,9 @@\n 2011-07-08  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/45437\n+\t* gimplify.c (goa_stabilize_expr): Handle RHS preevaluation in\n+\tcompound assignment.\n+\n \t* cgraph.c (cgraph_add_to_same_comdat_group): New.\n \t* cgraph.h: Declare it.\n \t* ipa.c (function_and_variable_visibility): Make sure thunks"}, {"sha": "87930c21fcf7b811c6e95105ae210fbd0ed0d4f0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4063e61bc63c3803f8ab2d625ebe8432ac06b3da", "patch": "@@ -1,5 +1,8 @@\n 2011-07-08  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/45437\n+\t* c-omp.c (check_omp_for_incr_expr): Handle preevaluation.\n+\n \tPR c++/49673\n \t* c-common.c (c_apply_type_quals_to_decl): Don't check\n \tTYPE_NEEDS_CONSTRUCTING."}, {"sha": "d2256ffd376b578eb8f4b496522b5c23a47d5331", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=4063e61bc63c3803f8ab2d625ebe8432ac06b3da", "patch": "@@ -213,6 +213,27 @@ check_omp_for_incr_expr (location_t loc, tree exp, tree decl)\n         return fold_build2_loc (loc, PLUS_EXPR,\n \t\t\t    TREE_TYPE (exp), TREE_OPERAND (exp, 0), t);\n       break;\n+    case COMPOUND_EXPR:\n+      {\n+\t/* cp_build_modify_expr forces preevaluation of the RHS to make\n+\t   sure that it is evaluated before the lvalue-rvalue conversion\n+\t   is applied to the LHS.  Reconstruct the original expression.  */\n+\ttree op0 = TREE_OPERAND (exp, 0);\n+\tif (TREE_CODE (op0) == TARGET_EXPR\n+\t    && !VOID_TYPE_P (TREE_TYPE (op0)))\n+\t  {\n+\t    tree op1 = TREE_OPERAND (exp, 1);\n+\t    tree temp = TARGET_EXPR_SLOT (op0);\n+\t    if (TREE_CODE_CLASS (TREE_CODE (op1)) == tcc_binary\n+\t\t&& TREE_OPERAND (op1, 1) == temp)\n+\t      {\n+\t\top1 = copy_node (op1);\n+\t\tTREE_OPERAND (op1, 1) = TARGET_EXPR_INITIAL (op0);\n+\t\treturn check_omp_for_incr_expr (loc, op1, decl);\n+\t      }\n+\t  }\n+\tbreak;\n+      }\n     default:\n       break;\n     }"}, {"sha": "cbdc4d83df2b5a5a7f60db58bb25b66e4e788134", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4063e61bc63c3803f8ab2d625ebe8432ac06b3da", "patch": "@@ -1,5 +1,8 @@\n 2011-07-08  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/45437\n+\t* typeck.c (cp_build_modify_expr): Preevaluate RHS.\n+\n \t* method.c (use_thunk): Use cgraph_add_to_same_comdat_group.\n \t* optimize.c (maybe_clone_body): Likewise.\n \t* semantics.c (maybe_add_lambda_conv_op): Likewise."}, {"sha": "d87c107ab762ac33a1cc73ee4e8a4f74569d5d16", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4063e61bc63c3803f8ab2d625ebe8432ac06b3da", "patch": "@@ -6663,14 +6663,26 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n \t}\n       else\n \t{\n+\t  tree init = NULL_TREE;\n+\n \t  /* A binary op has been requested.  Combine the old LHS\n \t     value with the RHS producing the value we should actually\n \t     store into the LHS.  */\n \t  gcc_assert (!((TREE_CODE (lhstype) == REFERENCE_TYPE\n \t\t\t && MAYBE_CLASS_TYPE_P (TREE_TYPE (lhstype)))\n \t\t\t|| MAYBE_CLASS_TYPE_P (lhstype)));\n \n+\t  /* Preevaluate the RHS to make sure its evaluation is complete\n+\t     before the lvalue-to-rvalue conversion of the LHS:\n+\n+\t     [expr.ass] With respect to an indeterminately-sequenced\n+\t     function call, the operation of a compound assignment is a\n+\t     single evaluation. [ Note: Therefore, a function call shall\n+\t     not intervene between the lvalue-to-rvalue conversion and the\n+\t     side effect associated with any single compound assignment\n+\t     operator. -- end note ]  */\n \t  lhs = stabilize_reference (lhs);\n+\t  rhs = stabilize_expr (rhs, &init);\n \t  newrhs = cp_build_binary_op (input_location,\n \t\t\t\t       modifycode, lhs, rhs,\n \t\t\t\t       complain);\n@@ -6682,6 +6694,9 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n \t      return error_mark_node;\n \t    }\n \n+\t  if (init)\n+\t    newrhs = build2 (COMPOUND_EXPR, TREE_TYPE (newrhs), init, newrhs);\n+\n \t  /* Now it looks like a plain assignment.  */\n \t  modifycode = NOP_EXPR;\n \t  if (c_dialect_objc ())"}, {"sha": "5a928be9434fc6b33ac4e6373112a9bc7ad9311d", "filename": "gcc/gimplify.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=4063e61bc63c3803f8ab2d625ebe8432ac06b3da", "patch": "@@ -6451,6 +6451,13 @@ goa_stabilize_expr (tree *expr_p, gimple_seq *pre_p, tree lhs_addr,\n \t  saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 0), pre_p,\n \t\t\t\t\t lhs_addr, lhs_var);\n \t  break;\n+\tcase COMPOUND_EXPR:\n+\t  /* Break out any preevaluations from cp_build_modify_expr.  */\n+\t  for (; TREE_CODE (expr) == COMPOUND_EXPR;\n+\t       expr = TREE_OPERAND (expr, 1))\n+\t    gimplify_stmt (&TREE_OPERAND (expr, 0), pre_p);\n+\t  *expr_p = expr;\n+\t  return goa_stabilize_expr (expr_p, pre_p, lhs_addr, lhs_var);\n \tdefault:\n \t  break;\n \t}"}, {"sha": "5b8be3309cbd0382e1e1f2cdd65c30d2495f6cae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4063e61bc63c3803f8ab2d625ebe8432ac06b3da", "patch": "@@ -1,3 +1,9 @@\n+2011-07-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/45437\n+\t* g++.dg/expr/compound-asn1.C: New.\n+\t* g++.dg/warn/sequence-pt-1.C: Change one dg-error to dg-bogus.\n+\n 2011-07-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/49621"}, {"sha": "194235c64af518831b8eb6fcd5569a6d486ff9d4", "filename": "gcc/testsuite/g++.dg/expr/compound-asn1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcompound-asn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcompound-asn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcompound-asn1.C?ref=4063e61bc63c3803f8ab2d625ebe8432ac06b3da", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/45437\n+// { dg-options -Wsequence-point }\n+// { dg-do run }\n+\n+bool f(bool& b) {\n+  b = true;\n+  return false;\n+}\n+\n+int main() {\n+  bool b = false;\n+  b |= f(b);\n+  if (!b)\n+    return 1;\n+}"}, {"sha": "6a98fd703cd50d8b9d22ef88ba6118bcad5d7635", "filename": "gcc/testsuite/g++.dg/warn/sequence-pt-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4063e61bc63c3803f8ab2d625ebe8432ac06b3da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-1.C?ref=4063e61bc63c3803f8ab2d625ebe8432ac06b3da", "patch": "@@ -62,7 +62,7 @@ foo (int a, int b, int n, int p, int *ptr, struct s *sptr,\n   (a = a++) && b; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   b, (a = a++); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   (a = a++), b; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n-  a ^= b ^= a ^= b; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a ^= b ^= a ^= b; /* { dg-bogus \"undefined\" \"sequence point warning\" } */\n \n   a = a; /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */\n   a = (a++ && 4); /* { dg-bogus \"undefined\" \"bogus sequence point warning\" } */"}]}