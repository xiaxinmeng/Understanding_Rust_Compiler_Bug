{"sha": "d16ca6a6703335e99c8c295af01bdf43cafefdf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE2Y2E2YTY3MDMzMzVlOTljOGMyOTVhZjAxYmRmNDNjYWZlZmRmMw==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2000-11-30T06:37:34Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-11-30T06:37:34Z"}, "message": "pa.md: Remove hack from all index insns to reverse the operand order of frame and...\n\n        * pa.md: Remove hack from all index insns to reverse the operand\n        order of frame and stack pointer references incorrectly created\n        in the reload pass.\n\nFrom-SVN: r37864", "tree": {"sha": "78d700b7f1b93470105062622859c4332b581418", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78d700b7f1b93470105062622859c4332b581418"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d16ca6a6703335e99c8c295af01bdf43cafefdf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16ca6a6703335e99c8c295af01bdf43cafefdf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d16ca6a6703335e99c8c295af01bdf43cafefdf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16ca6a6703335e99c8c295af01bdf43cafefdf3/comments", "author": null, "committer": null, "parents": [{"sha": "3502dc9cd31f1497d7190c96e67311c6fef33476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3502dc9cd31f1497d7190c96e67311c6fef33476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3502dc9cd31f1497d7190c96e67311c6fef33476"}], "stats": {"total": 244, "additions": 24, "deletions": 220}, "files": [{"sha": "dc4b8ff27840d026882a8ea12347cf480bfdce68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16ca6a6703335e99c8c295af01bdf43cafefdf3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16ca6a6703335e99c8c295af01bdf43cafefdf3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d16ca6a6703335e99c8c295af01bdf43cafefdf3", "patch": "@@ -1,5 +1,9 @@\n 2000-11-29  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n+\t* pa.md: Remove hack from all index insns to reverse the operand\n+\torder of frame and stack pointer references incorrectly created\n+\tin the reload pass.\n+\n \t* function.h (emit_status): Delete member regno_pointer_flag and\n \trename regno_pointer_flag_length to regno_pointer_align_length.\n \tDelete define for REGNO_POINTER_FLAG."}, {"sha": "1d35f3899eb3e25bcc4353c3c808efa2de6bf881", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 20, "deletions": 220, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16ca6a6703335e99c8c295af01bdf43cafefdf3/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16ca6a6703335e99c8c295af01bdf43cafefdf3/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=d16ca6a6703335e99c8c295af01bdf43cafefdf3", "patch": "@@ -2024,17 +2024,7 @@\n \t(mem:SI (plus:SI (match_operand:SI 1 \"basereg_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"! TARGET_DISABLE_INDEXING\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[2] == hard_frame_pointer_rtx\n-      || operands[2] == stack_pointer_rtx)\n-    return \\\"{ldwx|ldw} %1(%2),%0\\\";\n-  else\n-    return \\\"{ldwx|ldw} %2(%1),%0\\\";\n-}\"\n+  \"{ldwx|ldw} %2(%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2043,17 +2033,7 @@\n \t(mem:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"basereg_operand\" \"r\"))))]\n   \"! TARGET_DISABLE_INDEXING\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[1] == hard_frame_pointer_rtx\n-      || operands[1] == stack_pointer_rtx)\n-    return \\\"{ldwx|ldw} %2(%1),%0\\\";\n-  else\n-    return \\\"{ldwx|ldw} %1(%2),%0\\\";\n-}\"\n+  \"{ldwx|ldw} %1(%2),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2474,17 +2454,7 @@\n \t(mem:HI (plus:SI (match_operand:SI 1 \"basereg_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"! TARGET_DISABLE_INDEXING\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[2] == hard_frame_pointer_rtx\n-      || operands[2] == stack_pointer_rtx)\n-    return \\\"{ldhx|ldh} %1(%2),%0\\\";\n-  else\n-    return \\\"{ldhx|ldh} %2(%1),%0\\\";\n-}\"\n+  \"{ldhx|ldh} %2(%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2493,17 +2463,7 @@\n \t(mem:HI (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"basereg_operand\" \"r\"))))]\n   \"! TARGET_DISABLE_INDEXING\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[1] == hard_frame_pointer_rtx\n-      || operands[1] == stack_pointer_rtx)\n-    return \\\"{ldhx|ldh} %2(%1),%0\\\";\n-  else\n-    return \\\"{ldhx|ldh} %1(%2),%0\\\";\n-}\"\n+  \"{ldhx|ldh} %1(%2),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2515,17 +2475,7 @@\n \t\t\t    (match_operand:SI 1 \"basereg_operand\" \"r\")\n \t\t\t    (match_operand:SI 2 \"register_operand\" \"r\")))))]\n   \"! TARGET_DISABLE_INDEXING\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[2] == hard_frame_pointer_rtx\n-      || operands[2] == stack_pointer_rtx)\n-    return \\\"{ldhx|ldh} %1(%2),%0\\\";\n-  else\n-    return \\\"{ldhx|ldh} %2(%1),%0\\\";\n-}\"\n+  \"{ldhx|ldh} %2(%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2536,17 +2486,7 @@\n \t\t\t     (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t     (match_operand:SI 2 \"basereg_operand\" \"r\")))))]\n   \"! TARGET_DISABLE_INDEXING\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[1] == hard_frame_pointer_rtx\n-      || operands[1] == stack_pointer_rtx)\n-    return \\\"{ldhx|ldh} %2(%1),%0\\\";\n-  else\n-    return \\\"{ldhx|ldh} %1(%2),%0\\\";\n-}\"\n+  \"{ldhx|ldh} %1(%2),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2636,17 +2576,7 @@\n \t(mem:QI (plus:SI (match_operand:SI 1 \"basereg_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"! TARGET_DISABLE_INDEXING\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[2] == hard_frame_pointer_rtx\n-      || operands[2] == stack_pointer_rtx)\n-    return \\\"{ldbx|ldb} %1(%2),%0\\\";\n-  else\n-    return \\\"{ldbx|ldb} %2(%1),%0\\\";\n-}\"\n+  \"{ldbx|ldb} %2(%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2655,17 +2585,7 @@\n \t(mem:QI (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"basereg_operand\" \"r\"))))]\n   \"! TARGET_DISABLE_INDEXING\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[1] == hard_frame_pointer_rtx\n-      || operands[1] == stack_pointer_rtx)\n-    return \\\"{ldbx|ldb} %2(%1),%0\\\";\n-  else\n-    return \\\"{ldbx|ldb} %1(%2),%0\\\";\n-}\"\n+  \"{ldbx|ldb} %1(%2),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2677,17 +2597,7 @@\n \t\t\t    (match_operand:SI 1 \"basereg_operand\" \"r\")\n \t\t\t    (match_operand:SI 2 \"register_operand\" \"r\")))))]\n   \"! TARGET_DISABLE_INDEXING\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[2] == hard_frame_pointer_rtx\n-      || operands[2] == stack_pointer_rtx)\n-    return \\\"{ldbx|ldb} %1(%2),%0\\\";\n-  else\n-    return \\\"{ldbx|ldb} %2(%1),%0\\\";\n-}\"\n+  \"{ldbx|ldb} %2(%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2698,17 +2608,7 @@\n \t\t\t    (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t    (match_operand:SI 2 \"basereg_operand\" \"r\")))))]\n   \"! TARGET_DISABLE_INDEXING\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[1] == hard_frame_pointer_rtx\n-      || operands[1] == stack_pointer_rtx)\n-    return \\\"{ldbx|ldb} %2(%1),%0\\\";\n-  else\n-    return \\\"{ldbx|ldb} %1(%2),%0\\\";\n-}\"\n+  \"{ldbx|ldb} %1(%2),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2719,17 +2619,7 @@\n \t\t\t    (match_operand:SI 1 \"basereg_operand\" \"r\")\n \t\t\t    (match_operand:SI 2 \"register_operand\" \"r\")))))]\n   \"! TARGET_DISABLE_INDEXING\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[2] == hard_frame_pointer_rtx\n-      || operands[2] == stack_pointer_rtx)\n-    return \\\"{ldbx|ldb} %1(%2),%0\\\";\n-  else\n-    return \\\"{ldbx|ldb} %2(%1),%0\\\";\n-}\"\n+  \"{ldbx|ldb} %2(%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2740,17 +2630,7 @@\n \t\t\t    (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t    (match_operand:SI 2 \"basereg_operand\" \"r\")))))]\n   \"! TARGET_DISABLE_INDEXING\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[1] == hard_frame_pointer_rtx\n-      || operands[1] == stack_pointer_rtx)\n-    return \\\"{ldbx|ldb} %2(%1),%0\\\";\n-  else\n-    return \\\"{ldbx|ldb} %1(%2),%0\\\";\n-}\"\n+  \"{ldbx|ldb} %1(%2),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -3023,17 +2903,7 @@\n \t(mem:DF (plus:SI (match_operand:SI 1 \"basereg_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"! TARGET_DISABLE_INDEXING && ! TARGET_SOFT_FLOAT\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[2] == hard_frame_pointer_rtx\n-      || operands[2] == stack_pointer_rtx)\n-    return \\\"{flddx|fldd} %1(%2),%0\\\";\n-  else\n-    return \\\"{flddx|fldd} %2(%1),%0\\\";\n-}\"\n+  \"{flddx|fldd} %2(%1),%0\"\n   [(set_attr \"type\" \"fpload\")\n    (set_attr \"length\" \"4\")])\n \n@@ -3042,17 +2912,7 @@\n \t(mem:DF (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"basereg_operand\" \"r\"))))]\n   \"! TARGET_DISABLE_INDEXING && ! TARGET_SOFT_FLOAT\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[1] == hard_frame_pointer_rtx\n-      || operands[1] == stack_pointer_rtx)\n-    return \\\"{flddx|fldd} %2(%1),%0\\\";\n-  else\n-    return \\\"{flddx|fldd} %1(%2),%0\\\";\n-}\"\n+  \"{flddx|fldd} %1(%2),%0\"\n   [(set_attr \"type\" \"fpload\")\n    (set_attr \"length\" \"4\")])\n \n@@ -3061,17 +2921,7 @@\n \t\t\t (match_operand:SI 2 \"register_operand\" \"r\")))\n \t(match_operand:DF 0 \"register_operand\" \"fx\"))]\n   \"! TARGET_DISABLE_INDEXING && ! TARGET_SOFT_FLOAT\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[2] == hard_frame_pointer_rtx\n-      || operands[2] == stack_pointer_rtx)\n-    return \\\"{fstdx|fstd} %0,%1(%2)\\\";\n-  else\n-    return \\\"{fstdx|fstd} %0,%2(%1)\\\";\n-}\"\n+  \"{fstdx|fstd} %0,%2(%1)\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"4\")])\n \n@@ -3080,17 +2930,7 @@\n \t\t\t (match_operand:SI 2 \"basereg_operand\" \"r\")))\n \t(match_operand:DF 0 \"register_operand\" \"fx\"))]\n   \"! TARGET_DISABLE_INDEXING && ! TARGET_SOFT_FLOAT\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[1] == hard_frame_pointer_rtx\n-      || operands[1] == stack_pointer_rtx)\n-    return \\\"{fstdx|fstd} %0,%2(%1)\\\";\n-  else\n-    return \\\"{fstdx|fstd} %0,%1(%2)\\\";\n-}\"\n+  \"{fstdx|fstd} %0,%1(%2)\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"4\")])\n \n@@ -3354,17 +3194,7 @@\n \t(mem:SF (plus:SI (match_operand:SI 1 \"basereg_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"! TARGET_DISABLE_INDEXING && ! TARGET_SOFT_FLOAT\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[2] == hard_frame_pointer_rtx\n-      || operands[2] == stack_pointer_rtx)\n-    return \\\"{fldwx|fldw} %1(%2),%0\\\";\n-  else\n-    return \\\"{fldwx|fldw} %2(%1),%0\\\";\n-}\"\n+  \"{fldwx|fldw} %2(%1),%0\"\n   [(set_attr \"type\" \"fpload\")\n    (set_attr \"length\" \"4\")])\n \n@@ -3373,17 +3203,7 @@\n \t(mem:SF (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"basereg_operand\" \"r\"))))]\n   \"! TARGET_DISABLE_INDEXING && ! TARGET_SOFT_FLOAT\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[1] == hard_frame_pointer_rtx\n-      || operands[1] == stack_pointer_rtx)\n-    return \\\"{fldwx|fldw} %2(%1),%0\\\";\n-  else\n-    return \\\"{fldwx|fldw} %1(%2),%0\\\";\n-}\"\n+  \"{fldwx|fldw} %1(%2),%0\"\n   [(set_attr \"type\" \"fpload\")\n    (set_attr \"length\" \"4\")])\n \n@@ -3392,17 +3212,7 @@\n \t\t\t (match_operand:SI 2 \"register_operand\" \"r\")))\n       (match_operand:SF 0 \"register_operand\" \"fx\"))]\n   \"! TARGET_DISABLE_INDEXING && ! TARGET_SOFT_FLOAT\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[2] == hard_frame_pointer_rtx\n-      || operands[2] == stack_pointer_rtx)\n-    return \\\"{fstwx|fstw} %0,%1(%2)\\\";\n-  else\n-    return \\\"{fstwx|fstw} %0,%2(%1)\\\";\n-}\"\n+  \"{fstwx|fstw} %0,%2(%1)\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"4\")])\n \f\n@@ -3411,17 +3221,7 @@\n \t\t\t (match_operand:SI 2 \"basereg_operand\" \"r\")))\n       (match_operand:SF 0 \"register_operand\" \"fx\"))]\n   \"! TARGET_DISABLE_INDEXING && ! TARGET_SOFT_FLOAT\"\n-  \"*\n-{\n-  /* Reload can create backwards (relative to cse) unscaled index\n-     address modes when eliminating registers and possibly for\n-     pseudos that don't get hard registers.  Deal with it.  */\n-  if (operands[1] == hard_frame_pointer_rtx\n-      || operands[1] == stack_pointer_rtx)\n-    return \\\"{fstwx|fstw} %0,%2(%1)\\\";\n-  else\n-    return \\\"{fstwx|fstw} %0,%1(%2)\\\";\n-}\"\n+  \"{fstwx|fstw} %0,%1(%2)\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"4\")])\n \f"}]}