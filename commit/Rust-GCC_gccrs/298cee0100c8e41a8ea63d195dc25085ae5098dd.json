{"sha": "298cee0100c8e41a8ea63d195dc25085ae5098dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk4Y2VlMDEwMGM4ZTQxYThlYTYzZDE5NWRjMjUwODVhZTUwOThkZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-11-03T01:56:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-11-03T01:56:28Z"}, "message": "cmath (fpclassify, [...]): Remove spurious duplicate definition added in the last commit.\n\n2010-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/c_global/cmath (fpclassify, isfinite, isinf, isnan,\n\tisnormal, signbit, isgreater, isgreaterequal, isless, islessequal,\n\tislessgreater, isunordered): Remove spurious duplicate definition\n\tadded in the last commit.\n\n\t* include/tr1/cmath: Remove tr1_impl leftover macro.\n\nFrom-SVN: r166228", "tree": {"sha": "22c986042d5e240aff62c921c1c046971490f34e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22c986042d5e240aff62c921c1c046971490f34e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/298cee0100c8e41a8ea63d195dc25085ae5098dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298cee0100c8e41a8ea63d195dc25085ae5098dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/298cee0100c8e41a8ea63d195dc25085ae5098dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298cee0100c8e41a8ea63d195dc25085ae5098dd/comments", "author": null, "committer": null, "parents": [{"sha": "e8160c9a604ed01f38060655561a8fdf8ef854c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8160c9a604ed01f38060655561a8fdf8ef854c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8160c9a604ed01f38060655561a8fdf8ef854c8"}], "stats": {"total": 133, "additions": 11, "deletions": 122}, "files": [{"sha": "210515f16bd2fa5f8445e6bbe9044fad73dbaa2c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/298cee0100c8e41a8ea63d195dc25085ae5098dd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/298cee0100c8e41a8ea63d195dc25085ae5098dd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=298cee0100c8e41a8ea63d195dc25085ae5098dd", "patch": "@@ -1,3 +1,12 @@\n+2010-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/c_global/cmath (fpclassify, isfinite, isinf, isnan,\n+\tisnormal, signbit, isgreater, isgreaterequal, isless, islessequal,\n+\tislessgreater, isunordered): Remove spurious duplicate definition\n+\tadded in the last commit.\n+\n+\t* include/tr1/cmath: Remove tr1_impl leftover macro.\n+\n 2010-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/tr1_impl/cinttypes: Remove, move contents to C++0x"}, {"sha": "69d424c2721bd7e0b256e6a41cc429355ae3c4f1", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 1, "deletions": 117, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/298cee0100c8e41a8ea63d195dc25085ae5098dd/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/298cee0100c8e41a8ea63d195dc25085ae5098dd/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=298cee0100c8e41a8ea63d195dc25085ae5098dd", "patch": "@@ -1102,123 +1102,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   using ::truncf;\n   using ::truncl;\n \n-#if _GLIBCXX_USE_C99_MATH\n-#if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC\n-\n-  /// Function template definitions [8.16.3].\n-  template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n-\t\t\t\t\t   int>::__type\n-    fpclassify(_Tp __f)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,\n-\t\t\t\t  FP_SUBNORMAL, FP_ZERO, __type(__f));\n-    }\n-\n-  template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n-\t\t\t\t\t   int>::__type\n-    isfinite(_Tp __f)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return __builtin_isfinite(__type(__f));\n-    }\n-\n-  template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n-\t\t\t\t\t   int>::__type\n-    isinf(_Tp __f)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return __builtin_isinf(__type(__f));\n-    }\n-\n-  template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n-\t\t\t\t\t   int>::__type\n-    isnan(_Tp __f)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return __builtin_isnan(__type(__f));\n-    }\n-\n-  template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n-\t\t\t\t\t   int>::__type\n-    isnormal(_Tp __f)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return __builtin_isnormal(__type(__f));\n-    }\n-\n-  template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n-\t\t\t\t\t   int>::__type\n-    signbit(_Tp __f)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return __builtin_signbit(__type(__f));\n-    }\n-\n-  template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n-\t\t\t\t\t   int>::__type\n-    isgreater(_Tp __f1, _Tp __f2)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return __builtin_isgreater(__type(__f1), __type(__f2));\n-    }\n-\n-  template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n-\t\t\t\t\t   int>::__type\n-    isgreaterequal(_Tp __f1, _Tp __f2)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return __builtin_isgreaterequal(__type(__f1), __type(__f2));\n-    }\n-\n-  template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n-\t\t\t\t\t   int>::__type\n-    isless(_Tp __f1, _Tp __f2)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return __builtin_isless(__type(__f1), __type(__f2));\n-    }\n-\n-  template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n-\t\t\t\t\t   int>::__type\n-    islessequal(_Tp __f1, _Tp __f2)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return __builtin_islessequal(__type(__f1), __type(__f2));\n-    }\n-\n-  template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n-\t\t\t\t\t   int>::__type\n-    islessgreater(_Tp __f1, _Tp __f2)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return __builtin_islessgreater(__type(__f1), __type(__f2));\n-    }\n-\n-  template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n-\t\t\t\t\t   int>::__type\n-    isunordered(_Tp __f1, _Tp __f2)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return __builtin_isunordered(__type(__f1), __type(__f2));\n-    }\n-\n-#endif\n-#endif\n-\n-  /// Additional overloads [8.16.4].\n+  /// Additional overloads.\n   inline float\n   acosh(float __x)\n   { return __builtin_acoshf(__x); }"}, {"sha": "36c9a733a6d7c0095a32a65be12195caad495a1e", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/298cee0100c8e41a8ea63d195dc25085ae5098dd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/298cee0100c8e41a8ea63d195dc25085ae5098dd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=298cee0100c8e41a8ea63d195dc25085ae5098dd", "patch": "@@ -1,6 +1,6 @@\n // TR1 cmath -*- C++ -*-\n \n-// Copyright (C) 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,10 +31,6 @@\n \n #pragma GCC system_header\n \n-#if defined(_GLIBCXX_INCLUDE_AS_CXX0X)\n-#  error TR1 header cannot be included from C++0x header\n-#endif\n-\n #include <cmath>\n \n #ifdef _GLIBCXX_USE_C99_MATH_TR1"}]}