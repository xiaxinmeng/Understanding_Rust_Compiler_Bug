{"sha": "91e66235060bd49c9af50928f325f815889e4eee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFlNjYyMzUwNjBiZDQ5YzlhZjUwOTI4ZjMyNWY4MTU4ODllNGVlZQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-05-02T17:41:19Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-05-02T17:41:19Z"}, "message": "If expensive optimizations, use different pseudos when making store flag insns.\n\nFrom-SVN: r9562", "tree": {"sha": "7379c06ed29b6c928cc6b98414653ef97b5ca480", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7379c06ed29b6c928cc6b98414653ef97b5ca480"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91e66235060bd49c9af50928f325f815889e4eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91e66235060bd49c9af50928f325f815889e4eee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91e66235060bd49c9af50928f325f815889e4eee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91e66235060bd49c9af50928f325f815889e4eee/comments", "author": null, "committer": null, "parents": [{"sha": "473fa8ccce8bb50c9ff8c591520cd8aadc7691d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/473fa8ccce8bb50c9ff8c591520cd8aadc7691d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/473fa8ccce8bb50c9ff8c591520cd8aadc7691d1"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "5fcfe64f0c29e652341952feba30e4feca183de8", "filename": "gcc/expmed.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e66235060bd49c9af50928f325f815889e4eee/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e66235060bd49c9af50928f325f815889e4eee/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=91e66235060bd49c9af50928f325f815889e4eee", "patch": "@@ -4038,7 +4038,11 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n   if (last)\n     delete_insns_since (last);\n \n-  subtarget = target_mode == mode ? target : 0;\n+  /* If expensive optimizations, use different pseudo registers for each\n+     insn, instead of reusing the same pseudo.  This leads to better CSE,\n+     but slows down the compiler, since there are more pseudos */\n+  subtarget = (!flag_expensive_optimizations\n+\t       && (target_mode == mode)) ? target : NULL_RTX;\n \n   /* If we reached here, we can't do this with a scc insn.  However, there\n      are some comparisons that can be done directly.  For example, if\n@@ -4183,15 +4187,22 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n   if (tem && normalizep)\n     tem = expand_shift (RSHIFT_EXPR, mode, tem,\n \t\t\tsize_int (GET_MODE_BITSIZE (mode) - 1),\n-\t\t\ttem, normalizep == 1);\n+\t\t\tsubtarget, normalizep == 1);\n \n-  if (tem && GET_MODE (tem) != target_mode)\n+  if (tem)\n     {\n-      convert_move (target, tem, 0);\n-      tem = target;\n+      if (GET_MODE (tem) != target_mode)\n+\t{\n+\t  convert_move (target, tem, 0);\n+\t  tem = target;\n+\t}\n+      else if (!subtarget)\n+\t{\n+\t  emit_move_insn (target, tem);\n+\t  tem = target;\n+\t}\n     }\n-\n-  if (tem == 0)\n+  else\n     delete_insns_since (last);\n \n   return tem;"}]}