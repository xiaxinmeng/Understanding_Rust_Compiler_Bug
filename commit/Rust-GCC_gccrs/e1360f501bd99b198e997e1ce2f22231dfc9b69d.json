{"sha": "e1360f501bd99b198e997e1ce2f22231dfc9b69d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEzNjBmNTAxYmQ5OWIxOThlOTk3ZTFjZTJmMjIyMzFkZmM5YjY5ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T09:56:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T09:56:12Z"}, "message": "[multiple changes]\n\n2014-07-31  Robert Dewar  <dewar@adacore.com>\n\n\t* prj-nmsc.adb: Minor reformatting.\n\n2014-07-31  Bob Duff  <duff@adacore.com>\n\n\t* s-tasdeb.adb (System.Tasking.Debug): Remove\n\tall usage of the secondary stack from this package.\n\nFrom-SVN: r213334", "tree": {"sha": "61f278a23844e952bd9f0261ed5d7c0fbeb58a34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61f278a23844e952bd9f0261ed5d7c0fbeb58a34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1360f501bd99b198e997e1ce2f22231dfc9b69d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1360f501bd99b198e997e1ce2f22231dfc9b69d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1360f501bd99b198e997e1ce2f22231dfc9b69d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1360f501bd99b198e997e1ce2f22231dfc9b69d/comments", "author": null, "committer": null, "parents": [{"sha": "33ca28671fdf5505026312d4b01e807a768d8178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ca28671fdf5505026312d4b01e807a768d8178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33ca28671fdf5505026312d4b01e807a768d8178"}], "stats": {"total": 144, "additions": 96, "deletions": 48}, "files": [{"sha": "85f4f7c6638c318d6c443f40a6424c8100b98454", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1360f501bd99b198e997e1ce2f22231dfc9b69d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1360f501bd99b198e997e1ce2f22231dfc9b69d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e1360f501bd99b198e997e1ce2f22231dfc9b69d", "patch": "@@ -1,3 +1,12 @@\n+2014-07-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* prj-nmsc.adb: Minor reformatting.\n+\n+2014-07-31  Bob Duff  <duff@adacore.com>\n+\n+\t* s-tasdeb.adb (System.Tasking.Debug): Remove\n+\tall usage of the secondary stack from this package.\n+\n 2014-07-31  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* freeze.adb (Freeze_Expression): Update the loop in charge"}, {"sha": "b9135c24f0dba84726340a994afc982ea693080c", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1360f501bd99b198e997e1ce2f22231dfc9b69d/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1360f501bd99b198e997e1ce2f22231dfc9b69d/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=e1360f501bd99b198e997e1ce2f22231dfc9b69d", "patch": "@@ -3029,9 +3029,9 @@ package body Prj.Nmsc is\n       --  Check if an imported or extended project if also a library project\n \n       procedure Check_Aggregate_Library_Dirs;\n-      --  Check that the library directory and the library ALI directory of\n-      --  an aggregate library project are not the same as the object directory\n-      --  or the library directory of any of its aggregated projects.\n+      --  Check that the library directory and the library ALI directory of an\n+      --  aggregate library project are not the same as the object directory or\n+      --  the library directory of any of its aggregated projects.\n \n       ----------------------------------\n       -- Check_Aggregate_Library_Dirs --"}, {"sha": "d56e0cab20303d4c903ead11f91f86a754f998f8", "filename": "gcc/ada/s-tasdeb.adb", "status": "modified", "additions": 84, "deletions": 45, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1360f501bd99b198e997e1ce2f22231dfc9b69d/gcc%2Fada%2Fs-tasdeb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1360f501bd99b198e997e1ce2f22231dfc9b69d/gcc%2Fada%2Fs-tasdeb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasdeb.adb?ref=e1360f501bd99b198e997e1ce2f22231dfc9b69d", "patch": "@@ -37,8 +37,14 @@\n --  Do not add any dependency to GNARL packages since this package is used\n --  in both normal and restricted (ravenscar) environments.\n \n-with System.Address_Image;\n+pragma Restriction_Warnings (No_Secondary_Stack);\n+--  We wish to avoid secondary stack usage here, because (e.g.) Trace is called\n+--  at delicate times, such as during task termination after the secondary\n+--  stack has been deallocated. It's just a warning, so we don't require\n+--  partition-wide consistency.\n+\n with System.CRTL;\n+with System.Storage_Elements; use System.Storage_Elements;\n with System.Task_Primitives;\n with System.Task_Primitives.Operations;\n \n@@ -66,11 +72,11 @@ package body System.Tasking.Debug is\n    procedure Put_Line (S : String := \"\");\n    --  Display S on standard error with an additional line terminator\n \n-   function Task_Image (T : Task_Id) return String;\n-   --  Return the relevant characters from T.Common.Task_Image\n+   procedure Put_Task_Image (T : Task_Id);\n+   --  Display relevant characters from T.Common.Task_Image on standard error\n \n-   function Task_Id_Image (T : Task_Id) return String;\n-   --  Return the address in hexadecimal form\n+   procedure Put_Task_Id_Image (T : Task_Id);\n+   --  Display address in hexadecimal form on standard error\n \n    ------------------------\n    -- Continue_All_Tasks --\n@@ -109,7 +115,6 @@ package body System.Tasking.Debug is\n       C : Task_Id;\n    begin\n       C := All_Tasks_List;\n-\n       while C /= null loop\n          Print_Task_Info (C);\n          C := C.Common.All_Tasks_Link;\n@@ -139,13 +144,15 @@ package body System.Tasking.Debug is\n          return;\n       end if;\n \n-      Put (Task_Image (T) & \": \" & Task_States'Image (T.Common.State));\n+      Put_Task_Image (T);\n+      Put (\": \" & Task_States'Image (T.Common.State));\n       Parent := T.Common.Parent;\n \n       if Parent = null then\n          Put (\", parent: <none>\");\n       else\n-         Put (\", parent: \" & Task_Image (Parent));\n+         Put (\", parent: \");\n+         Put_Task_Image (Parent);\n       end if;\n \n       Put (\", prio:\" & T.Common.Current_Priority'Img);\n@@ -167,7 +174,7 @@ package body System.Tasking.Debug is\n          Put (\", serving:\");\n \n          while Entry_Call /= null loop\n-            Put (Task_Id_Image (Entry_Call.Self));\n+            Put_Task_Id_Image (Entry_Call.Self);\n             Entry_Call := Entry_Call.Acceptor_Prev_Call;\n          end loop;\n       end if;\n@@ -209,6 +216,66 @@ package body System.Tasking.Debug is\n       Write (Stderr_Fd, S & ASCII.LF, S'Length + 1);\n    end Put_Line;\n \n+   -----------------------\n+   -- Put_Task_Id_Image --\n+   -----------------------\n+\n+   procedure Put_Task_Id_Image (T : Task_Id) is\n+      Address_Image_Length : constant :=\n+        13 + (if Standard'Address_Size = 64 then 10 else 0);\n+      --  Length of string to be printed for address of task\n+\n+      H : constant array (0 .. 15) of Character := \"0123456789ABCDEF\";\n+      --  Table of hex digits\n+\n+      S : String (1 .. Address_Image_Length);\n+      P : Natural;\n+      N : Integer_Address;\n+      U : Natural := 0;\n+\n+   begin\n+      if T = null then\n+         Put (\"Null_Task_Id\");\n+\n+      else\n+         S (S'Last) := '#';\n+         P := Address_Image_Length - 1;\n+         N := To_Integer (T.all'Address);\n+         while P > 3 loop\n+            if U = 4 then\n+               S (P) := '_';\n+               P := P - 1;\n+               U := 1;\n+            else\n+               U := U + 1;\n+            end if;\n+\n+            S (P) := H (Integer (N mod 16));\n+            P := P - 1;\n+            N := N / 16;\n+         end loop;\n+\n+         S (1 .. 3) := \"16#\";\n+         Put (S);\n+      end if;\n+   end Put_Task_Id_Image;\n+\n+   --------------------\n+   -- Put_Task_Image --\n+   --------------------\n+\n+   procedure Put_Task_Image (T : Task_Id) is\n+   begin\n+      --  In case T.Common.Task_Image_Len is uninitialized junk, we check that\n+      --  it is in range, to make this more robust.\n+\n+      if T.Common.Task_Image_Len in T.Common.Task_Image'Range then\n+         Put (T.Common.Task_Image (1 .. T.Common.Task_Image_Len));\n+      else\n+         Put (T.Common.Task_Image);\n+      end if;\n+   end Put_Task_Image;\n+\n    ----------------------\n    -- Resume_All_Tasks --\n    ----------------------\n@@ -219,8 +286,8 @@ package body System.Tasking.Debug is\n \n    begin\n       STPO.Lock_RTS;\n-      C := All_Tasks_List;\n \n+      C := All_Tasks_List;\n       while C /= null loop\n          Dummy := STPO.Resume_Task (C, Thread_Self);\n          C := C.Common.All_Tasks_Link;\n@@ -298,8 +365,8 @@ package body System.Tasking.Debug is\n \n    begin\n       STPO.Lock_RTS;\n-      C := All_Tasks_List;\n \n+      C := All_Tasks_List;\n       while C /= null loop\n          Dummy := STPO.Suspend_Task (C, Thread_Self);\n          C := C.Common.All_Tasks_Link;\n@@ -321,35 +388,6 @@ package body System.Tasking.Debug is\n       null;\n    end Task_Creation_Hook;\n \n-   ----------------\n-   -- Task_Id_Image --\n-   ----------------\n-\n-   function Task_Id_Image (T : Task_Id) return String is\n-   begin\n-      if T = null then\n-         return \"Null_Task_Id\";\n-      else\n-         return Address_Image (T.all'Address);\n-      end if;\n-   end Task_Id_Image;\n-\n-   ----------------\n-   -- Task_Image --\n-   ----------------\n-\n-   function Task_Image (T : Task_Id) return String is\n-   begin\n-      --  In case T.Common.Task_Image_Len is uninitialized junk, we check that\n-      --  it is in range, to make this more robust.\n-\n-      if T.Common.Task_Image_Len in T.Common.Task_Image'Range then\n-         return T.Common.Task_Image (1 .. T.Common.Task_Image_Len);\n-      else\n-         return T.Common.Task_Image;\n-      end if;\n-   end Task_Image;\n-\n    ---------------------------\n    -- Task_Termination_Hook --\n    ---------------------------\n@@ -371,13 +409,14 @@ package body System.Tasking.Debug is\n    is\n    begin\n       if Trace_On (Flag) then\n-         Put (Task_Id_Image (Self_Id) &\n-              ':' & Flag & ':' &\n-              Task_Image (Self_Id) &\n-              ':');\n+         Put_Task_Id_Image (Self_Id);\n+         Put (\":\" & Flag & \":\");\n+         Put_Task_Image (Self_Id);\n+         Put (\":\");\n \n          if Other_Id /= null then\n-            Put (Task_Id_Image (Other_Id) & ':');\n+            Put_Task_Id_Image (Other_Id);\n+            Put (\":\");\n          end if;\n \n          Put_Line (Msg);"}]}