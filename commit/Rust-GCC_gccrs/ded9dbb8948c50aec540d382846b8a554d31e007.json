{"sha": "ded9dbb8948c50aec540d382846b8a554d31e007", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVkOWRiYjg5NDhjNTBhZWM1NDBkMzgyODQ2YjhhNTU0ZDMxZTAwNw==", "commit": {"author": {"name": "Gary Benson", "email": "gbenson@redhat.com", "date": "2006-08-07T14:48:59Z"}, "committer": {"name": "Gary Benson", "email": "gary@gcc.gnu.org", "date": "2006-08-07T14:48:59Z"}, "message": "re PR libgcj/28340 (gij ignores -Djava.security.manager)\n\n2006-08-07  Gary Benson  <gbenson@redhat.com>\n\n\tPR libgcj/28340:\n\t* java/lang/ClassLoader.java (clinit): Install a default\n\tsecurity manager if java.security.manager is defined.\n\t(getParent, getSystemClassLoader): Use the correct stack\n\tframe during security checks.\n\t* java/net/URLClassLoader.java (findClass): Avoid calling\n\tthis.toString() during VM initialization.\n\t(runtimeInitialized): New method.\n\t* java/net/natURLClassLoader.cc: New file.\n\t* Makefile.am (nat_source_files): Added the above.\n\t* Makefile.in: Rebuilt.\n\nFrom-SVN: r115999", "tree": {"sha": "6cf536258c857420080043168abdc63d0bbff7e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cf536258c857420080043168abdc63d0bbff7e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ded9dbb8948c50aec540d382846b8a554d31e007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ded9dbb8948c50aec540d382846b8a554d31e007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ded9dbb8948c50aec540d382846b8a554d31e007", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ded9dbb8948c50aec540d382846b8a554d31e007/comments", "author": null, "committer": null, "parents": [{"sha": "da0f033486c5ba410fac5c4296e562ee22a0a3e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0f033486c5ba410fac5c4296e562ee22a0a3e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da0f033486c5ba410fac5c4296e562ee22a0a3e9"}], "stats": {"total": 98, "additions": 95, "deletions": 3}, "files": [{"sha": "7176d1b2102db56e0a9c21b6d8325c5ce8dac1ad", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ded9dbb8948c50aec540d382846b8a554d31e007/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ded9dbb8948c50aec540d382846b8a554d31e007/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ded9dbb8948c50aec540d382846b8a554d31e007", "patch": "@@ -1,3 +1,17 @@\n+2006-08-07  Gary Benson  <gbenson@redhat.com>\n+\n+\tPR libgcj/28340:\n+\t* java/lang/ClassLoader.java (clinit): Install a default\n+\tsecurity manager if java.security.manager is defined.\n+\t(getParent, getSystemClassLoader): Use the correct stack\n+\tframe during security checks.\n+\t* java/net/URLClassLoader.java (findClass): Avoid calling\n+\tthis.toString() during VM initialization.\n+\t(runtimeInitialized): New method.\n+\t* java/net/natURLClassLoader.cc: New file.\n+\t* Makefile.am (nat_source_files): Added the above.\n+\t* Makefile.in: Rebuilt.\n+\n 2006-08-07  Gary Benson  <gbenson@redhat.com>\n \t    Casey Marshall <csm@gnu.org>\n "}, {"sha": "83ef09485c87b6a8c66423af8fe083ed6c115d64", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ded9dbb8948c50aec540d382846b8a554d31e007/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ded9dbb8948c50aec540d382846b8a554d31e007/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=ded9dbb8948c50aec540d382846b8a554d31e007", "patch": "@@ -825,6 +825,7 @@ java/lang/reflect/natField.cc \\\n java/lang/reflect/natMethod.cc \\\n java/net/natVMNetworkInterface.cc \\\n java/net/natInetAddress.cc \\\n+java/net/natURLClassLoader.cc \\\n java/nio/channels/natVMChannels.cc \\\n java/nio/natDirectByteBufferImpl.cc \\\n java/security/natVMAccessController.cc \\"}, {"sha": "5818459b72c4f30846cd7b9ca46c4dd9f0e20d6f", "filename": "libjava/Makefile.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ded9dbb8948c50aec540d382846b8a554d31e007/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ded9dbb8948c50aec540d382846b8a554d31e007/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=ded9dbb8948c50aec540d382846b8a554d31e007", "patch": "@@ -289,6 +289,7 @@ am__libgcj_la_SOURCES_DIST = prims.cc jni.cc jvmti.cc exception.cc \\\n \tjava/lang/reflect/natConstructor.cc \\\n \tjava/lang/reflect/natField.cc java/lang/reflect/natMethod.cc \\\n \tjava/net/natVMNetworkInterface.cc java/net/natInetAddress.cc \\\n+\tjava/net/natURLClassLoader.cc \\\n \tjava/nio/channels/natVMChannels.cc \\\n \tjava/nio/natDirectByteBufferImpl.cc \\\n \tjava/security/natVMAccessController.cc \\\n@@ -334,6 +335,7 @@ am__objects_2 = gnu/classpath/natSystemProperties.lo \\\n \tjava/lang/reflect/natConstructor.lo \\\n \tjava/lang/reflect/natField.lo java/lang/reflect/natMethod.lo \\\n \tjava/net/natVMNetworkInterface.lo java/net/natInetAddress.lo \\\n+\tjava/net/natURLClassLoader.lo \\\n \tjava/nio/channels/natVMChannels.lo \\\n \tjava/nio/natDirectByteBufferImpl.lo \\\n \tjava/security/natVMAccessController.lo \\\n@@ -624,6 +626,7 @@ bindir = @bindir@\n build = @build@\n build_alias = @build_alias@\n build_cpu = @build_cpu@\n+build_libsubdir = @build_libsubdir@\n build_os = @build_os@\n build_subdir = @build_subdir@\n build_vendor = @build_vendor@\n@@ -7144,6 +7147,7 @@ java/lang/reflect/natField.cc \\\n java/lang/reflect/natMethod.cc \\\n java/net/natVMNetworkInterface.cc \\\n java/net/natInetAddress.cc \\\n+java/net/natURLClassLoader.cc \\\n java/nio/channels/natVMChannels.cc \\\n java/nio/natDirectByteBufferImpl.cc \\\n java/security/natVMAccessController.cc \\\n@@ -7633,6 +7637,8 @@ java/net/natVMNetworkInterface.lo: java/net/$(am__dirstamp) \\\n \tjava/net/$(DEPDIR)/$(am__dirstamp)\n java/net/natInetAddress.lo: java/net/$(am__dirstamp) \\\n \tjava/net/$(DEPDIR)/$(am__dirstamp)\n+java/net/natURLClassLoader.lo: java/net/$(am__dirstamp) \\\n+\tjava/net/$(DEPDIR)/$(am__dirstamp)\n java/nio/channels/$(am__dirstamp):\n \t@$(mkdir_p) java/nio/channels\n \t@: > java/nio/channels/$(am__dirstamp)\n@@ -7958,6 +7964,8 @@ mostlyclean-compile:\n \t-rm -f java/lang/reflect/natMethod.lo\n \t-rm -f java/net/natInetAddress.$(OBJEXT)\n \t-rm -f java/net/natInetAddress.lo\n+\t-rm -f java/net/natURLClassLoader.$(OBJEXT)\n+\t-rm -f java/net/natURLClassLoader.lo\n \t-rm -f java/net/natVMNetworkInterface.$(OBJEXT)\n \t-rm -f java/net/natVMNetworkInterface.lo\n \t-rm -f java/nio/channels/natVMChannels.$(OBJEXT)\n@@ -8082,6 +8090,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@java/lang/reflect/$(DEPDIR)/natField.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/lang/reflect/$(DEPDIR)/natMethod.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/net/$(DEPDIR)/natInetAddress.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@java/net/$(DEPDIR)/natURLClassLoader.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/net/$(DEPDIR)/natVMNetworkInterface.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/nio/$(DEPDIR)/natDirectByteBufferImpl.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/nio/channels/$(DEPDIR)/natVMChannels.Plo@am__quote@"}, {"sha": "bcbfc298bd4dff997d2629f9bc530ae2c262bb9f", "filename": "libjava/java/lang/ClassLoader.java", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ded9dbb8948c50aec540d382846b8a554d31e007/libjava%2Fjava%2Flang%2FClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ded9dbb8948c50aec540d382846b8a554d31e007/libjava%2Fjava%2Flang%2FClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClassLoader.java?ref=ded9dbb8948c50aec540d382846b8a554d31e007", "patch": "@@ -38,6 +38,7 @@\n \n package java.lang;\n \n+import gnu.classpath.SystemProperties;\n import gnu.java.util.DoubleEnumeration;\n import gnu.java.util.EmptyEnumeration;\n \n@@ -156,6 +157,39 @@\n   static final ClassLoader systemClassLoader =\n     VMClassLoader.getSystemClassLoader();\n \n+  static\n+  {\n+    // Find out if we have to install a default security manager. Note\n+    // that this is done here because we potentially need the system\n+    // class loader to load the security manager and note also that we\n+    // don't need the security manager until the system class loader\n+    // is created.  If the runtime chooses to use a class loader that\n+    // doesn't have the system class loader as its parent, it is\n+    // responsible for setting up a security manager before doing so.\n+    String secman = SystemProperties.getProperty(\"java.security.manager\");\n+    if (secman != null && SecurityManager.current == null)\n+    {\n+      if (secman.equals(\"\") || secman.equals(\"default\"))\n+      {\n+\tSecurityManager.current = new SecurityManager();\n+      }\n+      else\n+      {\n+\ttry\n+\t{\n+\t  Class cl = Class.forName(secman, false, systemClassLoader);\n+\t  SecurityManager.current = (SecurityManager) cl.newInstance();\n+\t}\n+\tcatch (Exception x)\n+\t{\n+\t  throw (InternalError)\n+\t    new InternalError(\"Unable to create SecurityManager\")\n+\t        .initCause(x);\n+\t}\n+      }\n+    }\n+  }\n+\n   /**\n    * The default protection domain, used when defining a class with a null\n    * paramter for the domain.\n@@ -496,7 +530,7 @@ public final ClassLoader getParent()\n     SecurityManager sm = System.getSecurityManager();\n     if (sm != null)\n       {\n-        Class c = VMSecurityManager.getClassContext(ClassLoader.class)[1];\n+        Class c = VMSecurityManager.getClassContext(ClassLoader.class)[0];\n         ClassLoader cl = c.getClassLoader();\n \tif (cl != null && ! cl.isAncestorOf(this))\n           sm.checkPermission(new RuntimePermission(\"getClassLoader\"));\n@@ -739,7 +773,7 @@ public static ClassLoader getSystemClassLoader()\n     SecurityManager sm = System.getSecurityManager();\n     if (sm != null)\n       {\n-\tClass c = VMSecurityManager.getClassContext(ClassLoader.class)[1];\n+\tClass c = VMSecurityManager.getClassContext(ClassLoader.class)[0];\n \tClassLoader cl = c.getClassLoader();\n \tif (cl != null && cl != systemClassLoader)\n \t  sm.checkPermission(new RuntimePermission(\"getClassLoader\"));"}, {"sha": "06db7d58217e02554d8a3b95076bf43900cf45d5", "filename": "libjava/java/net/URLClassLoader.java", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ded9dbb8948c50aec540d382846b8a554d31e007/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ded9dbb8948c50aec540d382846b8a554d31e007/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLClassLoader.java?ref=ded9dbb8948c50aec540d382846b8a554d31e007", "patch": "@@ -1078,7 +1078,12 @@ protected Class findClass(final String className)\n \tresource = loader.getResource(resourceName);\n       }\n     if (resource == null)\n-      throw new ClassNotFoundException(className + \" not found in \" + this);\n+      {\n+\tString message = className + \" not found\";\n+\tif (runtimeInitialized())\n+\t  message += \" in \" + this;\n+\tthrow new ClassNotFoundException(message);\n+      }\n \n     // Try to read the class data, create the CodeSource, Package and\n     // construct the class (and watch out for those nasty IOExceptions)\n@@ -1437,4 +1442,11 @@ public Object run()\n         return loader;\n       }\n   }\n+\n+  /**\n+   * Tell whether runtime initialization is complete.\n+   *\n+   * @return whether runtime initialization is complete.\n+   */\n+  private static native boolean runtimeInitialized();  \n }"}, {"sha": "ead0db44aff39b90303be923d149f5aa3cfc5c54", "filename": "libjava/java/net/natURLClassLoader.cc", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ded9dbb8948c50aec540d382846b8a554d31e007/libjava%2Fjava%2Fnet%2FnatURLClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ded9dbb8948c50aec540d382846b8a554d31e007/libjava%2Fjava%2Fnet%2FnatURLClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatURLClassLoader.cc?ref=ded9dbb8948c50aec540d382846b8a554d31e007", "patch": "@@ -0,0 +1,22 @@\n+// natURLClassLoader.cc -- Native part of the URLClassLoader class.\n+\n+/* Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+#include <jvm.h>\n+\n+#include <java/net/URLClassLoader.h>\n+\n+jboolean\n+java::net::URLClassLoader::runtimeInitialized ()\n+{\n+  return gcj::runtimeInitialized;\n+}"}]}