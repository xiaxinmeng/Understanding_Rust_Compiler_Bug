{"sha": "2319a1d1f7308338e91ace8b30719347b91580e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMxOWExZDFmNzMwODMzOGU5MWFjZThiMzA3MTkzNDdiOTE1ODBlNA==", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@novell.com", "date": "2004-07-09T23:04:33Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-09T23:04:33Z"}, "message": "builtin-types.def (BT_UINT): Rename from BT_UNSIGNED.\n\n        * builtin-types.def (BT_UINT): Rename from BT_UNSIGNED.\n        (BT_FN_UINT): Rename from BT_FN_UNSIGNED.\n        (BT_FN_PTR_UINT): Rename from BT_FN_PTR_UNSIGNED.\n        (BT_ULONG, BT_ULONGLONG, BT_UINTMAX, BT_FN_INT_UINT, BT_FN_INT_ULONG,\n        BT_FN_INT_ULONGLONG, BT_FN_INT_INTMAX, BT_FN_INT_UINTMAX): New.\n        * builtins.def (BUILTIN_CLZxxx, BUILTIN_CTXxxx, BUILTIN_PARITYxxx,\n        BUILTIN_POPCOUNTxxx): Arguments are unsigned.\n        (BUILTIN_xxxIMAX): New.\n        * builtins.c (expand_builtin): Handle BUILT_IN_FFSIMAX,\n        BUILT_IN_CLZIMAX, BUILT_IN_CTZIMAX, BUILT_IN_POPCOUNIMAX, and\n        BUILT_IN_PARITYIMAX.\n\nFrom-SVN: r84415", "tree": {"sha": "0848a312643aa3db319dcfacfd3dd9e8b0f76e97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0848a312643aa3db319dcfacfd3dd9e8b0f76e97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2319a1d1f7308338e91ace8b30719347b91580e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2319a1d1f7308338e91ace8b30719347b91580e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2319a1d1f7308338e91ace8b30719347b91580e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2319a1d1f7308338e91ace8b30719347b91580e4/comments", "author": null, "committer": null, "parents": [{"sha": "18df6de934489a4ace9de466d596efb7f6ecf5b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18df6de934489a4ace9de466d596efb7f6ecf5b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18df6de934489a4ace9de466d596efb7f6ecf5b0"}], "stats": {"total": 144, "additions": 122, "deletions": 22}, "files": [{"sha": "0bb7353eeab08efaa8004af6c23e03e1c9fcf197", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2319a1d1f7308338e91ace8b30719347b91580e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2319a1d1f7308338e91ace8b30719347b91580e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2319a1d1f7308338e91ace8b30719347b91580e4", "patch": "@@ -1,3 +1,17 @@\n+2004-07-09 Jan Beulich <jbeulich@novell.com>\n+\n+\t* builtin-types.def (BT_UINT): Rename from BT_UNSIGNED.\n+\t(BT_FN_UINT): Rename from BT_FN_UNSIGNED.\n+\t(BT_FN_PTR_UINT): Rename from BT_FN_PTR_UNSIGNED.\n+\t(BT_ULONG, BT_ULONGLONG, BT_UINTMAX, BT_FN_INT_UINT, BT_FN_INT_ULONG,\n+\tBT_FN_INT_ULONGLONG, BT_FN_INT_INTMAX, BT_FN_INT_UINTMAX): New.\n+\t* builtins.def (BUILTIN_CLZxxx, BUILTIN_CTXxxx, BUILTIN_PARITYxxx,\n+\tBUILTIN_POPCOUNTxxx): Arguments are unsigned.\n+\t(BUILTIN_xxxIMAX): New.\n+\t* builtins.c (expand_builtin): Handle BUILT_IN_FFSIMAX,\n+\tBUILT_IN_CLZIMAX, BUILT_IN_CTZIMAX, BUILT_IN_POPCOUNIMAX, and\n+\tBUILT_IN_PARITYIMAX.\n+\n 2004-07-09  David S. Miller  <davem@nuts.davemloft.net>\n \n \t* config/sparc/sparc.h (processor_costs): Define."}, {"sha": "845863108b09eaf82b0c57a16a4882e93106cd57", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2319a1d1f7308338e91ace8b30719347b91580e4/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2319a1d1f7308338e91ace8b30719347b91580e4/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=2319a1d1f7308338e91ace8b30719347b91580e4", "patch": "@@ -61,12 +61,15 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n DEF_PRIMITIVE_TYPE (BT_VOID, void_type_node)\n DEF_PRIMITIVE_TYPE (BT_INT, integer_type_node)\n-DEF_PRIMITIVE_TYPE (BT_UNSIGNED, unsigned_type_node)\n+DEF_PRIMITIVE_TYPE (BT_UINT, unsigned_type_node)\n DEF_PRIMITIVE_TYPE (BT_LONG, long_integer_type_node)\n+DEF_PRIMITIVE_TYPE (BT_ULONG, long_unsigned_type_node)\n DEF_PRIMITIVE_TYPE (BT_LONGLONG, long_long_integer_type_node)\n+DEF_PRIMITIVE_TYPE (BT_ULONGLONG, long_long_unsigned_type_node)\n+DEF_PRIMITIVE_TYPE (BT_INTMAX, intmax_type_node)\n+DEF_PRIMITIVE_TYPE (BT_UINTMAX, uintmax_type_node)\n DEF_PRIMITIVE_TYPE (BT_WORD, (*lang_hooks.types.type_for_mode) (word_mode, 0))\n DEF_PRIMITIVE_TYPE (BT_FLOAT, float_type_node)\n-DEF_PRIMITIVE_TYPE (BT_INTMAX, intmax_type_node)\n DEF_PRIMITIVE_TYPE (BT_DOUBLE, double_type_node)\n DEF_PRIMITIVE_TYPE (BT_LONGDOUBLE, long_double_type_node)\n DEF_PRIMITIVE_TYPE (BT_COMPLEX_FLOAT, complex_float_type_node)\n@@ -96,7 +99,7 @@ DEF_POINTER_TYPE (BT_PTR_CONST_STRING, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_0 (BT_FN_VOID, BT_VOID)\n DEF_FUNCTION_TYPE_0 (BT_FN_PTR, BT_PTR)\n DEF_FUNCTION_TYPE_0 (BT_FN_PID, BT_PID)\n-DEF_FUNCTION_TYPE_0 (BT_FN_UNSIGNED, BT_UNSIGNED)\n+DEF_FUNCTION_TYPE_0 (BT_FN_UINT, BT_UINT)\n DEF_FUNCTION_TYPE_0 (BT_FN_FLOAT, BT_FLOAT)\n DEF_FUNCTION_TYPE_0 (BT_FN_DOUBLE, BT_DOUBLE)\n /* For \"long double\" we use LONGDOUBLE (not LONG_DOUBLE) to\n@@ -123,11 +126,16 @@ DEF_FUNCTION_TYPE_1 (BT_FN_DOUBLE_COMPLEX_DOUBLE,\n                      BT_DOUBLE, BT_COMPLEX_DOUBLE)\n DEF_FUNCTION_TYPE_1 (BT_FN_LONGDOUBLE_COMPLEX_LONGDOUBLE,\n                      BT_LONGDOUBLE, BT_COMPLEX_LONGDOUBLE)\n-DEF_FUNCTION_TYPE_1 (BT_FN_PTR_UNSIGNED, BT_PTR, BT_UNSIGNED)\n+DEF_FUNCTION_TYPE_1 (BT_FN_PTR_UINT, BT_PTR, BT_UINT)\n DEF_FUNCTION_TYPE_1 (BT_FN_PTR_SIZE, BT_PTR, BT_SIZE)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_INT, BT_INT, BT_INT)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_UINT, BT_INT, BT_UINT)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_LONG, BT_INT, BT_LONG)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_ULONG, BT_INT, BT_ULONG)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_LONGLONG, BT_INT, BT_LONGLONG)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_ULONGLONG, BT_INT, BT_ULONGLONG)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_INTMAX, BT_INT, BT_INTMAX)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_UINTMAX, BT_INT, BT_UINTMAX)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_PTR, BT_INT, BT_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_FLOAT, BT_INT, BT_FLOAT)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_DOUBLE, BT_INT, BT_DOUBLE)"}, {"sha": "a17a337ec01c5dd22b75429327f3382ca25e9c9a", "filename": "gcc/builtins.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2319a1d1f7308338e91ace8b30719347b91580e4/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2319a1d1f7308338e91ace8b30719347b91580e4/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=2319a1d1f7308338e91ace8b30719347b91580e4", "patch": "@@ -5973,6 +5973,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_FFS:\n     case BUILT_IN_FFSL:\n     case BUILT_IN_FFSLL:\n+    case BUILT_IN_FFSIMAX:\n       target = expand_builtin_unop (target_mode, arglist, target,\n \t\t\t\t    subtarget, ffs_optab);\n       if (target)\n@@ -5982,6 +5983,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_CLZ:\n     case BUILT_IN_CLZL:\n     case BUILT_IN_CLZLL:\n+    case BUILT_IN_CLZIMAX:\n       target = expand_builtin_unop (target_mode, arglist, target,\n \t\t\t\t    subtarget, clz_optab);\n       if (target)\n@@ -5991,6 +5993,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_CTZ:\n     case BUILT_IN_CTZL:\n     case BUILT_IN_CTZLL:\n+    case BUILT_IN_CTZIMAX:\n       target = expand_builtin_unop (target_mode, arglist, target,\n \t\t\t\t    subtarget, ctz_optab);\n       if (target)\n@@ -6000,6 +6003,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_POPCOUNT:\n     case BUILT_IN_POPCOUNTL:\n     case BUILT_IN_POPCOUNTLL:\n+    case BUILT_IN_POPCOUNTIMAX:\n       target = expand_builtin_unop (target_mode, arglist, target,\n \t\t\t\t    subtarget, popcount_optab);\n       if (target)\n@@ -6009,6 +6013,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_PARITY:\n     case BUILT_IN_PARITYL:\n     case BUILT_IN_PARITYLL:\n+    case BUILT_IN_PARITYIMAX:\n       target = expand_builtin_unop (target_mode, arglist, target,\n \t\t\t\t    subtarget, parity_optab);\n       if (target)"}, {"sha": "d660f8d590e1fbab1ac927692b73ae56ba295260", "filename": "gcc/builtins.def", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2319a1d1f7308338e91ace8b30719347b91580e4/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2319a1d1f7308338e91ace8b30719347b91580e4/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=2319a1d1f7308338e91ace8b30719347b91580e4", "patch": "@@ -444,9 +444,6 @@ DEF_C99_BUILTIN        (BUILT_IN_CTANL, \"ctanl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLE\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_BCMP, \"bcmp\", BT_FN_INT_CONST_PTR_CONST_PTR_SIZE, ATTR_PURE_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_BCOPY, \"bcopy\", BT_FN_VOID_CONST_PTR_PTR_SIZE, ATTR_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_BZERO, \"bzero\", BT_FN_VOID_PTR_SIZE, ATTR_NOTHROW_LIST)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_FFS, \"ffs\", BT_FN_INT_INT, ATTR_CONST_NOTHROW_LIST)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_FFSL, \"ffsl\", BT_FN_INT_LONG, ATTR_CONST_NOTHROW_LIST)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_FFSLL, \"ffsll\", BT_FN_INT_LONGLONG, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_INDEX, \"index\", BT_FN_STRING_CONST_STRING_INT, ATTR_PURE_NOTHROW_NONNULL_1)\n DEF_LIB_BUILTIN        (BUILT_IN_MEMCMP, \"memcmp\", BT_FN_INT_CONST_PTR_CONST_PTR_SIZE, ATTR_PURE_NOTHROW_NONNULL_1_2)\n DEF_LIB_BUILTIN        (BUILT_IN_MEMCPY, \"memcpy\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_NOTHROW_NONNULL_1_2)\n@@ -542,17 +539,19 @@ DEF_GCC_BUILTIN        (BUILT_IN_APPLY_ARGS, \"apply_args\", BT_FN_PTR_VAR, ATTR_N\n DEF_GCC_BUILTIN        (BUILT_IN_ARGS_INFO, \"args_info\", BT_FN_INT_INT, ATTR_NULL)\n DEF_LIB_BUILTIN        (BUILT_IN_CALLOC, \"calloc\", BT_FN_PTR_SIZE_SIZE, ATTR_MALLOC_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_CLASSIFY_TYPE, \"classify_type\", BT_FN_INT_VAR, ATTR_NULL)\n-DEF_GCC_BUILTIN        (BUILT_IN_CLZ, \"clz\", BT_FN_INT_INT, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_CLZL, \"clzl\", BT_FN_INT_LONG, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_CLZLL, \"clzll\", BT_FN_INT_LONGLONG, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_CLZ, \"clz\", BT_FN_INT_UINT, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_CLZIMAX, \"clzimax\", BT_FN_INT_UINTMAX, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_CLZL, \"clzl\", BT_FN_INT_ULONG, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_CLZLL, \"clzll\", BT_FN_INT_ULONGLONG, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_CONSTANT_P, \"constant_p\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_CTZ, \"ctz\", BT_FN_INT_INT, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_CTZL, \"ctzl\", BT_FN_INT_LONG, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_CTZLL, \"ctzll\", BT_FN_INT_LONGLONG, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_CTZ, \"ctz\", BT_FN_INT_UINT, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_CTZIMAX, \"ctzimax\", BT_FN_INT_UINTMAX, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_CTZL, \"ctzl\", BT_FN_INT_ULONG, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_CTZLL, \"ctzll\", BT_FN_INT_ULONGLONG, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_DCGETTEXT, \"dcgettext\", BT_FN_STRING_CONST_STRING_CONST_STRING_INT, ATTR_FORMAT_ARG_2)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_DGETTEXT, \"dgettext\", BT_FN_STRING_CONST_STRING_CONST_STRING, ATTR_FORMAT_ARG_2)\n DEF_GCC_BUILTIN        (BUILT_IN_DWARF_CFA, \"dwarf_cfa\", BT_FN_PTR, ATTR_NULL)\n-DEF_GCC_BUILTIN        (BUILT_IN_DWARF_SP_COLUMN, \"dwarf_sp_column\", BT_FN_UNSIGNED, ATTR_NULL)\n+DEF_GCC_BUILTIN        (BUILT_IN_DWARF_SP_COLUMN, \"dwarf_sp_column\", BT_FN_UINT, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_EH_RETURN, \"eh_return\", BT_FN_VOID_PTRMODE_PTR, ATTR_NORETURN_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_EH_RETURN_DATA_REGNO, \"eh_return_data_regno\", BT_FN_INT_INT, ATTR_NULL)\n DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECL, \"execl\", BT_FN_INT_CONST_STRING_CONST_STRING_VAR, ATTR_NOTHROW_LIST)\n@@ -565,8 +564,12 @@ DEF_LIB_BUILTIN        (BUILT_IN_EXIT, \"exit\", BT_FN_VOID_INT, ATTR_NORETURN_NOT\n DEF_GCC_BUILTIN        (BUILT_IN_EXPECT, \"expect\", BT_FN_LONG_LONG_LONG, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_EXTEND_POINTER, \"extend_pointer\", BT_FN_WORD_PTR, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_EXTRACT_RETURN_ADDR, \"extract_return_addr\", BT_FN_PTR_PTR, ATTR_NULL)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_FFS, \"ffs\", BT_FN_INT_INT, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_FFSIMAX, \"ffsimax\", BT_FN_INT_INTMAX, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_FFSL, \"ffsl\", BT_FN_INT_LONG, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_FFSLL, \"ffsll\", BT_FN_INT_LONGLONG, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN        (BUILT_IN_FORK, \"fork\", BT_FN_PID, ATTR_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_FRAME_ADDRESS, \"frame_address\", BT_FN_PTR_UNSIGNED, ATTR_NULL)\n+DEF_GCC_BUILTIN        (BUILT_IN_FRAME_ADDRESS, \"frame_address\", BT_FN_PTR_UINT, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_FROB_RETURN_ADDR, \"frob_return_addr\", BT_FN_PTR_PTR, ATTR_NULL)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_GETTEXT, \"gettext\", BT_FN_STRING_CONST_STRING, ATTR_FORMAT_ARG_1)\n DEF_C99_BUILTIN        (BUILT_IN_IMAXABS, \"imaxabs\", BT_FN_INTMAX_INTMAX, ATTR_CONST_NOTHROW_LIST)\n@@ -591,15 +594,17 @@ DEF_C99_BUILTIN        (BUILT_IN_LLABS, \"llabs\", BT_FN_LONGLONG_LONGLONG, ATTR_C\n DEF_GCC_BUILTIN        (BUILT_IN_LONGJMP, \"longjmp\", BT_FN_VOID_PTR_INT, ATTR_NORETURN_NOTHROW_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_MALLOC, \"malloc\", BT_FN_PTR_SIZE, ATTR_MALLOC_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_NEXT_ARG, \"next_arg\", BT_FN_PTR_VAR, ATTR_NULL)\n-DEF_GCC_BUILTIN        (BUILT_IN_PARITY, \"parity\", BT_FN_INT_INT, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_PARITYL, \"parityl\", BT_FN_INT_LONG, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_PARITYLL, \"parityll\", BT_FN_INT_LONGLONG, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_POPCOUNT, \"popcount\", BT_FN_INT_INT, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_POPCOUNTL, \"popcountl\", BT_FN_INT_LONG, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_POPCOUNTLL, \"popcountll\", BT_FN_INT_LONGLONG, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_PARITY, \"parity\", BT_FN_INT_UINT, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_PARITYIMAX, \"parityimax\", BT_FN_INT_UINTMAX, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_PARITYL, \"parityl\", BT_FN_INT_ULONG, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_PARITYLL, \"parityll\", BT_FN_INT_ULONGLONG, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_POPCOUNT, \"popcount\", BT_FN_INT_UINT, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_POPCOUNTIMAX, \"popcountimax\", BT_FN_INT_UINTMAX, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_POPCOUNTL, \"popcountl\", BT_FN_INT_ULONG, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_POPCOUNTLL, \"popcountll\", BT_FN_INT_ULONGLONG, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_PREFETCH, \"prefetch\", BT_FN_VOID_CONST_PTR_VAR, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_RETURN, \"return\", BT_FN_VOID_PTR, ATTR_NORETURN_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_RETURN_ADDRESS, \"return_address\", BT_FN_PTR_UNSIGNED, ATTR_NULL)\n+DEF_GCC_BUILTIN        (BUILT_IN_RETURN_ADDRESS, \"return_address\", BT_FN_PTR_UINT, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_SAVEREGS, \"saveregs\", BT_FN_PTR_VAR, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_SETJMP, \"setjmp\", BT_FN_INT_PTR, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_STACK_ALLOC, \"stack_alloc\", BT_FN_VOID_PTR_SIZE, ATTR_NULL)"}, {"sha": "c3cdc533feda63675e946076784d82f5a910e3d6", "filename": "gcc/testsuite/gcc.dg/builtin-protos-1.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2319a1d1f7308338e91ace8b30719347b91580e4/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-protos-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2319a1d1f7308338e91ace8b30719347b91580e4/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-protos-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-protos-1.c?ref=2319a1d1f7308338e91ace8b30719347b91580e4", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do compile } */\n+/* { dg-options -Wconversion } */\n+\n+int\n+test_s (signed int x)\n+{\n+  return __builtin_abs (x)\t/* { dg-bogus \"as unsigned due to prototype\" } */\n+    + __builtin_clz (x)\t\t/* { dg-warning \"as unsigned due to prototype\" } */\n+    + __builtin_ctz (x)\t\t/* { dg-warning \"as unsigned due to prototype\" } */\n+    + __builtin_ffs (x)\t\t/* { dg-bogus \"as unsigned due to prototype\" } */\n+    + __builtin_parity (x)\t/* { dg-warning \"as unsigned due to prototype\" } */\n+    + __builtin_popcount (x);\t/* { dg-warning \"as unsigned due to prototype\" } */\n+}\n+\n+int\n+test_u (unsigned int x)\n+{\n+  return __builtin_abs (x)\t/* { dg-warning \"as signed due to prototype\" } */\n+    + __builtin_clz (x)\t\t/* { dg-bogus \"as signed due to prototype\" } */\n+    + __builtin_ctz (x)\t\t/* { dg-bogus \"as signed due to prototype\" } */\n+    + __builtin_ffs (x)\t\t/* { dg-warning \"as signed due to prototype\" } */\n+    + __builtin_parity (x)\t/* { dg-bogus \"as signed due to prototype\" } */\n+    + __builtin_popcount (x);\t/* { dg-bogus \"as signed due to prototype\" } */\n+}\n+\n+int\n+test_sl (signed long x)\n+{\n+  return __builtin_labs (x)\t/* { dg-bogus \"as unsigned due to prototype\" } */\n+    + __builtin_clzl (x)\t/* { dg-warning \"as unsigned due to prototype\" } */\n+    + __builtin_ctzl (x)\t/* { dg-warning \"as unsigned due to prototype\" } */\n+    + __builtin_ffsl (x)\t/* { dg-bogus \"as unsigned due to prototype\" } */\n+    + __builtin_parityl (x)\t/* { dg-warning \"as unsigned due to prototype\" } */\n+    + __builtin_popcountl (x);\t/* { dg-warning \"as unsigned due to prototype\" } */\n+}\n+\n+int\n+test_ul (unsigned long x)\n+{\n+  return __builtin_labs (x)\t/* { dg-warning \"as signed due to prototype\" } */\n+    + __builtin_clzl (x)\t/* { dg-bogus \"as signed due to prototype\" } */\n+    + __builtin_ctzl (x)\t/* { dg-bogus \"as signed due to prototype\" } */\n+    + __builtin_ffsl (x)\t/* { dg-warning \"as signed due to prototype\" } */\n+    + __builtin_parityl (x)\t/* { dg-bogus \"as signed due to prototype\" } */\n+    + __builtin_popcountl (x);\t/* { dg-bogus \"as signed due to prototype\" } */\n+}\n+\n+int\n+test_sll (signed long long x)\n+{\n+  return __builtin_llabs (x)\t/* { dg-bogus \"as unsigned due to prototype\" } */\n+    + __builtin_clzll (x)\t/* { dg-warning \"as unsigned due to prototype\" } */\n+    + __builtin_ctzll (x)\t/* { dg-warning \"as unsigned due to prototype\" } */\n+    + __builtin_ffsll (x)\t/* { dg-bogus \"as unsigned due to prototype\" } */\n+    + __builtin_parityll (x)\t/* { dg-warning \"as unsigned due to prototype\" } */\n+    + __builtin_popcountll (x);\t/* { dg-warning \"as unsigned due to prototype\" } */\n+}\n+\n+int\n+test_ull (unsigned long long x)\n+{\n+  return __builtin_llabs (x)\t/* { dg-warning \"as signed due to prototype\" } */\n+    + __builtin_clzll (x)\t/* { dg-bogus \"as signed due to prototype\" } */\n+    + __builtin_ctzll (x)\t/* { dg-bogus \"as signed due to prototype\" } */\n+    + __builtin_ffsll (x)\t/* { dg-warning \"as signed due to prototype\" } */\n+    + __builtin_parityll (x)\t/* { dg-bogus \"as signed due to prototype\" } */\n+    + __builtin_popcountll (x);\t/* { dg-bogus \"as signed due to prototype\" } */\n+}"}]}