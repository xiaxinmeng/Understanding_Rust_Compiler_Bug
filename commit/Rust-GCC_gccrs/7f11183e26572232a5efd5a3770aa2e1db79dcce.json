{"sha": "7f11183e26572232a5efd5a3770aa2e1db79dcce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YxMTE4M2UyNjU3MjIzMmE1ZWZkNWEzNzcwYWEyZTFkYjc5ZGNjZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-09-28T21:25:53Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-09-28T21:25:53Z"}, "message": "(copy_loop_body...\n\n(copy_loop_body, JUMP_INSN case): When invert jump\ninsn, must first construct new insn before trying to invert it,\nso that validate_change will work properly.\n\nFrom-SVN: r2277", "tree": {"sha": "b45f23412d6c43c0da8b2f20e5b15e493409e5f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b45f23412d6c43c0da8b2f20e5b15e493409e5f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f11183e26572232a5efd5a3770aa2e1db79dcce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f11183e26572232a5efd5a3770aa2e1db79dcce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f11183e26572232a5efd5a3770aa2e1db79dcce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f11183e26572232a5efd5a3770aa2e1db79dcce/comments", "author": null, "committer": null, "parents": [{"sha": "4024394c6fbb20caa295e33c372831866c097669", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4024394c6fbb20caa295e33c372831866c097669", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4024394c6fbb20caa295e33c372831866c097669"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "7fa3a54c8316c0cef223f88a7887c5bc986e7980", "filename": "gcc/unroll.c", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f11183e26572232a5efd5a3770aa2e1db79dcce/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f11183e26572232a5efd5a3770aa2e1db79dcce/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=7f11183e26572232a5efd5a3770aa2e1db79dcce", "patch": "@@ -1659,27 +1659,21 @@ copy_loop_body (copy_start, copy_end, map, exit_label, last_iteration,\n \t\t In this case, we want to change the original fall through\n \t\t case to be a branch past the end of the loop, and the\n \t\t original jump label case to fall_through.  */\n-\n-\t      int fall_through;\n-\n \t      /* Never map the label in this case.  */\n-\t      rtx tmp_pattern = copy_rtx (PATTERN (insn));\n-\t      \n-\t      /* Set the fall through case to the exit label.  If we \n-\t\t can't do this in place, abort for now.  Maybe\n-\t\t we can do something more sophisticated eventually.  */\n \n-\t      if (! invert_exp (tmp_pattern, insn)\n-\t\t  || ! redirect_exp (&tmp_pattern, JUMP_LABEL (insn),\n-\t\t\t\t     exit_label, insn))\n-\t\tabort ();\n+\t      pattern = copy_rtx (PATTERN (insn));\n+\t      copy = emit_jump_insn (pattern);\n \n-\t      pattern = tmp_pattern;\n+\t      if (! invert_exp (pattern, copy)\n+\t\t  || ! redirect_exp (&pattern, JUMP_LABEL (insn),\n+\t\t\t\t     exit_label, copy))\n+\t\tabort ();\n \t    }\n \t  else\n-\t    pattern = copy_rtx_and_substitute (PATTERN (insn), map);\n-\t  \n-\t  copy = emit_jump_insn (pattern);\n+\t    {\n+\t      pattern = copy_rtx_and_substitute (PATTERN (insn), map);\n+\t      copy = emit_jump_insn (pattern);\n+\t    }\n \t  \n #ifdef HAVE_cc0\n \t  if (cc0_insn)"}]}