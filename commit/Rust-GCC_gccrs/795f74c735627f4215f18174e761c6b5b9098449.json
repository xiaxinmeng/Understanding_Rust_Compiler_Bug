{"sha": "795f74c735627f4215f18174e761c6b5b9098449", "node_id": "C_kwDOANBUbNoAKDc5NWY3NGM3MzU2MjdmNDIxNWYxODE3NGU3NjFjNmI1YjkwOTg0NDk", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-02-16T17:07:26Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-19T14:05:33Z"}, "message": "[Ada] Fix internal error on semi-circular record types\n\nThe front-end properly computes a linear elaboration order for them, but\nthere was a loophole in the handling of the delayed case.\n\ngcc/ada/\n\n\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Access_Subtype>: And\n\tskip the elaboration of the designated subtype when that of its base\n\ttype has been delayed.", "tree": {"sha": "8614eae31119a6cae71e3fac624f5191a78614b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8614eae31119a6cae71e3fac624f5191a78614b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/795f74c735627f4215f18174e761c6b5b9098449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/795f74c735627f4215f18174e761c6b5b9098449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/795f74c735627f4215f18174e761c6b5b9098449", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/795f74c735627f4215f18174e761c6b5b9098449/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfbdd4b9812b199a74dbb948b4eb54fb7bb30883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfbdd4b9812b199a74dbb948b4eb54fb7bb30883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfbdd4b9812b199a74dbb948b4eb54fb7bb30883"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "aa8736c7a8615bf6e01f0a5c4775ab137d8b06e8", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/795f74c735627f4215f18174e761c6b5b9098449/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/795f74c735627f4215f18174e761c6b5b9098449/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=795f74c735627f4215f18174e761c6b5b9098449", "patch": "@@ -3846,17 +3846,18 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n       maybe_present = true;\n \n       /* The designated subtype must be elaborated as well, if it does\n-\t not have its own freeze node.  But designated subtypes created\n-\t for constrained components of records with discriminants are\n-\t not frozen by the front-end and not elaborated here, because\n-\t their use may appear before the base type is frozen and it is\n-\t not clear that they are needed in gigi.  With the current model,\n-\t there is no correct place where they could be elaborated.  */\n+\t not have its own freeze node.  */\n       if (Is_Itype (Directly_Designated_Type (gnat_entity))\n \t  && !present_gnu_tree (Directly_Designated_Type (gnat_entity))\n \t  && Is_Frozen (Directly_Designated_Type (gnat_entity))\n \t  && No (Freeze_Node (Directly_Designated_Type (gnat_entity))))\n \t{\n+\t  tree gnu_base_type = TREE_TYPE (gnu_decl);\n+\t  tree gnu_desig_base_type\n+\t    = TYPE_IS_FAT_POINTER_P (gnu_base_type)\n+\t      ? TREE_TYPE (TREE_TYPE (TYPE_FIELDS (gnu_base_type)))\n+\t      : TREE_TYPE (gnu_base_type);\n+\n \t  /* If we are to defer elaborating incomplete types, make a dummy\n \t     type node and elaborate it later.  */\n \t  if (defer_incomplete_level != 0)\n@@ -3869,8 +3870,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t      p->next = defer_incomplete_list;\n \t      defer_incomplete_list = p;\n \t    }\n-\t  else if (!Is_Incomplete_Or_Private_Type\n-\t\t      (Base_Type (Directly_Designated_Type (gnat_entity))))\n+\n+\t  /* Otherwise elaborate the designated subtype only if its base type\n+\t     has already been elaborated.  */\n+\t  else if (!TYPE_IS_DUMMY_P (gnu_desig_base_type))\n \t    gnat_to_gnu_entity (Directly_Designated_Type (gnat_entity),\n \t\t\t\tNULL_TREE, false);\n \t}"}]}