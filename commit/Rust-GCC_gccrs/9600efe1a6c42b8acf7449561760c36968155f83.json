{"sha": "9600efe1a6c42b8acf7449561760c36968155f83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYwMGVmZTFhNmM0MmI4YWNmNzQ0OTU2MTc2MGMzNjk2ODE1NWY4Mw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2009-08-19T14:29:52Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2009-08-19T14:29:52Z"}, "message": "omp-low.c (optimize_omp_library_calls): Use types_compatible_p instead of comparing TYPE_MAIN_VARIANT for equality.\n\n        * omp-low.c (optimize_omp_library_calls): Use types_compatible_p\n        instead of comparing TYPE_MAIN_VARIANT for equality.\n        * tree-vect-patterns.c (vect_recog_dot_prod_pattern,\n        vect_recog_widen_mult_pattern, vect_recog_widen_sum_pattern): Ditto.\n        * tree-vect-loop.c (vect_is_simple_reduction): Ditto.\n        * gimplify.c (goa_lhs_expr_p): Ditto and use\n        STRIP_USELESS_TYPE_CONVERSION.\n\nFrom-SVN: r150936", "tree": {"sha": "8489ea3ed78727eeb377ad35611c3a1779e5bb14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8489ea3ed78727eeb377ad35611c3a1779e5bb14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9600efe1a6c42b8acf7449561760c36968155f83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9600efe1a6c42b8acf7449561760c36968155f83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9600efe1a6c42b8acf7449561760c36968155f83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9600efe1a6c42b8acf7449561760c36968155f83/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10174ddf5d0e0e2293e54ebc14f9c49a9983de98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10174ddf5d0e0e2293e54ebc14f9c49a9983de98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10174ddf5d0e0e2293e54ebc14f9c49a9983de98"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "855e4e50926041e070c90107c4cc08d16935e9d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9600efe1a6c42b8acf7449561760c36968155f83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9600efe1a6c42b8acf7449561760c36968155f83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9600efe1a6c42b8acf7449561760c36968155f83", "patch": "@@ -1,3 +1,13 @@\n+2009-08-18  Michael Matz  <matz@suse.de>\n+\n+\t* omp-low.c (optimize_omp_library_calls): Use types_compatible_p\n+\tinstead of comparing TYPE_MAIN_VARIANT for equality.\n+\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern,\n+\tvect_recog_widen_mult_pattern, vect_recog_widen_sum_pattern): Ditto.\n+\t* tree-vect-loop.c (vect_is_simple_reduction): Ditto.\n+\t* gimplify.c (goa_lhs_expr_p): Ditto and use\n+\tSTRIP_USELESS_TYPE_CONVERSION.\n+\n 2009-08-18  Michael Matz  <matz@suse.de>\n \n \t* tree-ssa-structalias.c (create_variable_info_for): Also mark"}, {"sha": "3ba40a88f19b19a3257765dabdaeec1ec81566ed", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9600efe1a6c42b8acf7449561760c36968155f83/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9600efe1a6c42b8acf7449561760c36968155f83/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=9600efe1a6c42b8acf7449561760c36968155f83", "patch": "@@ -6152,12 +6152,7 @@ goa_lhs_expr_p (tree expr, tree addr)\n   /* Also include casts to other type variants.  The C front end is fond\n      of adding these for e.g. volatile variables.  This is like \n      STRIP_TYPE_NOPS but includes the main variant lookup.  */\n-  while ((CONVERT_EXPR_P (expr)\n-          || TREE_CODE (expr) == NON_LVALUE_EXPR)\n-         && TREE_OPERAND (expr, 0) != error_mark_node\n-         && (TYPE_MAIN_VARIANT (TREE_TYPE (expr))\n-             == TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (expr, 0)))))\n-    expr = TREE_OPERAND (expr, 0);\n+  STRIP_USELESS_TYPE_CONVERSION (expr);\n \n   if (TREE_CODE (expr) == INDIRECT_REF)\n     {\n@@ -6166,8 +6161,7 @@ goa_lhs_expr_p (tree expr, tree addr)\n \t     && (CONVERT_EXPR_P (expr)\n \t\t || TREE_CODE (expr) == NON_LVALUE_EXPR)\n \t     && TREE_CODE (expr) == TREE_CODE (addr)\n-\t     && TYPE_MAIN_VARIANT (TREE_TYPE (expr))\n-\t\t== TYPE_MAIN_VARIANT (TREE_TYPE (addr)))\n+\t     && types_compatible_p (TREE_TYPE (expr), TREE_TYPE (addr)))\n \t{\n \t  expr = TREE_OPERAND (expr, 0);\n \t  addr = TREE_OPERAND (addr, 0);"}, {"sha": "a7de367e43285ba7ddb78404df7f261c76c5fee0", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9600efe1a6c42b8acf7449561760c36968155f83/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9600efe1a6c42b8acf7449561760c36968155f83/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=9600efe1a6c42b8acf7449561760c36968155f83", "patch": "@@ -3316,8 +3316,8 @@ optimize_omp_library_calls (gimple entry_stmt)\n \t      continue;\n \n \t    if (TREE_CODE (TREE_TYPE (decl)) != FUNCTION_TYPE\n-\t\t|| TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (decl)))\n-\t\t   != TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (built_in))))\n+\t\t|| !types_compatible_p (TREE_TYPE (TREE_TYPE (decl)),\n+\t\t\t\t\tTREE_TYPE (TREE_TYPE (built_in))))\n \t      continue;\n \n \t    gimple_call_set_fndecl (call, built_in);"}, {"sha": "83833b137fa7d058be8cfd9584c807738adebd36", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9600efe1a6c42b8acf7449561760c36968155f83/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9600efe1a6c42b8acf7449561760c36968155f83/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=9600efe1a6c42b8acf7449561760c36968155f83", "patch": "@@ -1739,13 +1739,13 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple phi,\n \n   type = TREE_TYPE (gimple_assign_lhs (def_stmt));\n   if ((TREE_CODE (op1) == SSA_NAME\n-       && TYPE_MAIN_VARIANT (type) != TYPE_MAIN_VARIANT (TREE_TYPE (op1)))\n+       && !types_compatible_p (type,TREE_TYPE (op1)))\n       || (TREE_CODE (op2) == SSA_NAME\n-          && TYPE_MAIN_VARIANT (type) != TYPE_MAIN_VARIANT (TREE_TYPE (op2)))\n+          && !types_compatible_p (type, TREE_TYPE (op2)))\n       || (op3 && TREE_CODE (op3) == SSA_NAME\n-          && TYPE_MAIN_VARIANT (type) != TYPE_MAIN_VARIANT (TREE_TYPE (op3)))\n+          && !types_compatible_p (type, TREE_TYPE (op3)))\n       || (op4 && TREE_CODE (op4) == SSA_NAME\n-          && TYPE_MAIN_VARIANT (type) != TYPE_MAIN_VARIANT (TREE_TYPE (op4))))\n+          && !types_compatible_p (type, TREE_TYPE (op4))))\n     {\n       if (vect_print_dump_info (REPORT_DETAILS))\n         {"}, {"sha": "3a77e858a57739a75596184323566e8a66de00fc", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9600efe1a6c42b8acf7449561760c36968155f83/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9600efe1a6c42b8acf7449561760c36968155f83/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=9600efe1a6c42b8acf7449561760c36968155f83", "patch": "@@ -233,8 +233,8 @@ vect_recog_dot_prod_pattern (gimple last_stmt, tree *type_in, tree *type_out)\n         return NULL;\n       oprnd0 = gimple_assign_rhs1 (last_stmt);\n       oprnd1 = gimple_assign_rhs2 (last_stmt);\n-      if (TYPE_MAIN_VARIANT (TREE_TYPE (oprnd0)) != TYPE_MAIN_VARIANT (type)\n-          || TYPE_MAIN_VARIANT (TREE_TYPE (oprnd1)) != TYPE_MAIN_VARIANT (type))\n+      if (!types_compatible_p (TREE_TYPE (oprnd0), type)\n+\t  || !types_compatible_p (TREE_TYPE (oprnd1), type))\n         return NULL;\n       stmt = last_stmt;\n \n@@ -285,18 +285,16 @@ vect_recog_dot_prod_pattern (gimple last_stmt, tree *type_in, tree *type_out)\n \n       oprnd0 = gimple_assign_rhs1 (stmt);\n       oprnd1 = gimple_assign_rhs2 (stmt);\n-      if (TYPE_MAIN_VARIANT (TREE_TYPE (oprnd0)) \n-\t\t\t\t!= TYPE_MAIN_VARIANT (prod_type)\n-          || TYPE_MAIN_VARIANT (TREE_TYPE (oprnd1)) \n-\t\t\t\t!= TYPE_MAIN_VARIANT (prod_type))\n+      if (!types_compatible_p (TREE_TYPE (oprnd0), prod_type)\n+          || !types_compatible_p (TREE_TYPE (oprnd1), prod_type))\n         return NULL;\n       if (!widened_name_p (oprnd0, stmt, &half_type0, &def_stmt))\n         return NULL;\n       oprnd00 = gimple_assign_rhs1 (def_stmt);\n       if (!widened_name_p (oprnd1, stmt, &half_type1, &def_stmt))\n         return NULL;\n       oprnd01 = gimple_assign_rhs1 (def_stmt);\n-      if (TYPE_MAIN_VARIANT (half_type0) != TYPE_MAIN_VARIANT (half_type1))\n+      if (!types_compatible_p (half_type0, half_type1))\n         return NULL;\n       if (TYPE_PRECISION (prod_type) != TYPE_PRECISION (half_type0) * 2)\n \treturn NULL;\n@@ -384,8 +382,8 @@ vect_recog_widen_mult_pattern (gimple last_stmt,\n \n   oprnd0 = gimple_assign_rhs1 (last_stmt);\n   oprnd1 = gimple_assign_rhs2 (last_stmt);\n-  if (TYPE_MAIN_VARIANT (TREE_TYPE (oprnd0)) != TYPE_MAIN_VARIANT (type)\n-      || TYPE_MAIN_VARIANT (TREE_TYPE (oprnd1)) != TYPE_MAIN_VARIANT (type))\n+  if (!types_compatible_p (TREE_TYPE (oprnd0), type)\n+      || !types_compatible_p (TREE_TYPE (oprnd1), type))\n     return NULL;\n \n   /* Check argument 0 */\n@@ -398,7 +396,7 @@ vect_recog_widen_mult_pattern (gimple last_stmt,\n     return NULL;\n   oprnd1 = gimple_assign_rhs1 (def_stmt1);\n \n-  if (TYPE_MAIN_VARIANT (half_type0) != TYPE_MAIN_VARIANT (half_type1))\n+  if (!types_compatible_p (half_type0, half_type1))\n     return NULL;\n \n   /* Pattern detected.  */\n@@ -602,8 +600,8 @@ vect_recog_widen_sum_pattern (gimple last_stmt, tree *type_in, tree *type_out)\n \n   oprnd0 = gimple_assign_rhs1 (last_stmt);\n   oprnd1 = gimple_assign_rhs2 (last_stmt);\n-  if (TYPE_MAIN_VARIANT (TREE_TYPE (oprnd0)) != TYPE_MAIN_VARIANT (type)\n-      || TYPE_MAIN_VARIANT (TREE_TYPE (oprnd1)) != TYPE_MAIN_VARIANT (type))\n+  if (!types_compatible_p (TREE_TYPE (oprnd0), type)\n+      || !types_compatible_p (TREE_TYPE (oprnd1), type))\n     return NULL;\n \n   /* So far so good. Since last_stmt was detected as a (summation) reduction,"}]}