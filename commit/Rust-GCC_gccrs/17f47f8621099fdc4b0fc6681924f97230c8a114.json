{"sha": "17f47f8621099fdc4b0fc6681924f97230c8a114", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdmNDdmODYyMTA5OWZkYzRiMGZjNjY4MTkyNGY5NzIzMGM4YTExNA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2017-06-02T14:41:52Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2017-06-02T14:41:52Z"}, "message": "[AArch64] Emit tighter strong atomic compare-exchange loop when comparing against zero\n\n\t* config/aarch64/aarch64.c (aarch64_split_compare_and_swap):\n\tEmit CBNZ inside loop when doing a strong exchange and comparing\n\tagainst zero.  Generate the CC flags after the loop.\n\n\t* gcc.target/aarch64/atomic_cmp_exchange_zero_strong_1.c: New test.\n\nFrom-SVN: r248832", "tree": {"sha": "2df2a714bac3eab1853d01ddacfcd431129dd2a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2df2a714bac3eab1853d01ddacfcd431129dd2a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17f47f8621099fdc4b0fc6681924f97230c8a114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f47f8621099fdc4b0fc6681924f97230c8a114", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17f47f8621099fdc4b0fc6681924f97230c8a114", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f47f8621099fdc4b0fc6681924f97230c8a114/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e3bd1c68738bd4e67ece407d6aa95811b44f77f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3bd1c68738bd4e67ece407d6aa95811b44f77f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3bd1c68738bd4e67ece407d6aa95811b44f77f9"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "a941ffdf75cf7a80770b8f0cc38cf507e2e9a98f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f47f8621099fdc4b0fc6681924f97230c8a114/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f47f8621099fdc4b0fc6681924f97230c8a114/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17f47f8621099fdc4b0fc6681924f97230c8a114", "patch": "@@ -1,3 +1,9 @@\n+2017-06-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_split_compare_and_swap):\n+\tEmit CBNZ inside loop when doing a strong exchange and comparing\n+\tagainst zero.  Generate the CC flags after the loop.\n+\n 2017-06-02  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* dwarf2out.c (DWARF_INITIAL_LENGTH_SIZE_STR): New."}, {"sha": "7064f050a107b3481a1a8ae5315de27584ee5ade", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f47f8621099fdc4b0fc6681924f97230c8a114/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f47f8621099fdc4b0fc6681924f97230c8a114/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=17f47f8621099fdc4b0fc6681924f97230c8a114", "patch": "@@ -12111,6 +12111,17 @@ aarch64_split_compare_and_swap (rtx operands[])\n   mode = GET_MODE (mem);\n   model = memmodel_from_int (INTVAL (model_rtx));\n \n+  /* When OLDVAL is zero and we want the strong version we can emit a tighter\n+    loop:\n+    .label1:\n+\tLD[A]XR\trval, [mem]\n+\tCBNZ\trval, .label2\n+\tST[L]XR\tscratch, newval, [mem]\n+\tCBNZ\tscratch, .label1\n+    .label2:\n+\tCMP\trval, 0.  */\n+  bool strong_zero_p = !is_weak && oldval == const0_rtx;\n+\n   label1 = NULL;\n   if (!is_weak)\n     {\n@@ -12127,11 +12138,21 @@ aarch64_split_compare_and_swap (rtx operands[])\n   else\n     aarch64_emit_load_exclusive (mode, rval, mem, model_rtx);\n \n-  cond = aarch64_gen_compare_reg (NE, rval, oldval);\n-  x = gen_rtx_NE (VOIDmode, cond, const0_rtx);\n-  x = gen_rtx_IF_THEN_ELSE (VOIDmode, x,\n-\t\t\t    gen_rtx_LABEL_REF (Pmode, label2), pc_rtx);\n-  aarch64_emit_unlikely_jump (gen_rtx_SET (pc_rtx, x));\n+  if (strong_zero_p)\n+    {\n+      x = gen_rtx_NE (VOIDmode, rval, const0_rtx);\n+      x = gen_rtx_IF_THEN_ELSE (VOIDmode, x,\n+\t\t\t\tgen_rtx_LABEL_REF (Pmode, label2), pc_rtx);\n+      aarch64_emit_unlikely_jump (gen_rtx_SET (pc_rtx, x));\n+    }\n+  else\n+    {\n+      cond = aarch64_gen_compare_reg (NE, rval, oldval);\n+      x = gen_rtx_NE (VOIDmode, cond, const0_rtx);\n+      x = gen_rtx_IF_THEN_ELSE (VOIDmode, x,\n+\t\t\t\t gen_rtx_LABEL_REF (Pmode, label2), pc_rtx);\n+      aarch64_emit_unlikely_jump (gen_rtx_SET (pc_rtx, x));\n+    }\n \n   aarch64_emit_store_exclusive (mode, scratch, mem, newval, model_rtx);\n \n@@ -12150,7 +12171,15 @@ aarch64_split_compare_and_swap (rtx operands[])\n     }\n \n   emit_label (label2);\n-\n+  /* If we used a CBNZ in the exchange loop emit an explicit compare with RVAL\n+     to set the condition flags.  If this is not used it will be removed by\n+     later passes.  */\n+  if (strong_zero_p)\n+    {\n+      cond = gen_rtx_REG (CCmode, CC_REGNUM);\n+      x = gen_rtx_COMPARE (CCmode, rval, const0_rtx);\n+      emit_insn (gen_rtx_SET (cond, x));\n+    }\n   /* Emit any final barrier needed for a __sync operation.  */\n   if (is_mm_sync (model))\n     aarch64_emit_post_barrier (model);"}, {"sha": "006b992733aa56e49f67c8253988d1ed2a993b08", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f47f8621099fdc4b0fc6681924f97230c8a114/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f47f8621099fdc4b0fc6681924f97230c8a114/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17f47f8621099fdc4b0fc6681924f97230c8a114", "patch": "@@ -1,3 +1,7 @@\n+2017-06-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/atomic_cmp_exchange_zero_strong_1.c: New test.\n+\n 2017-06-02  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-abs-char.c: New."}, {"sha": "b14a7c294376f03cd13077d18d865f83a04bd04e", "filename": "gcc/testsuite/gcc.target/aarch64/atomic_cmp_exchange_zero_strong_1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f47f8621099fdc4b0fc6681924f97230c8a114/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic_cmp_exchange_zero_strong_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f47f8621099fdc4b0fc6681924f97230c8a114/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic_cmp_exchange_zero_strong_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic_cmp_exchange_zero_strong_1.c?ref=17f47f8621099fdc4b0fc6681924f97230c8a114", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (int *a)\n+{\n+  int x = 0;\n+  return __atomic_compare_exchange_n (a, &x, 4, 0,\n+\t\t\t\t      __ATOMIC_ACQUIRE, __ATOMIC_ACQUIRE);\n+}\n+\n+/* { dg-final { scan-assembler-times \"cbnz\\\\tw\\[0-9\\]+\" 2 } } */"}]}