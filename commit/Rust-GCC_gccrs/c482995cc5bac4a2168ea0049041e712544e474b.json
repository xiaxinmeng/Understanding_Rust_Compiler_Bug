{"sha": "c482995cc5bac4a2168ea0049041e712544e474b", "node_id": "C_kwDOANBUbNoAKGM0ODI5OTVjYzViYWM0YTIxNjhlYTAwNDkwNDFlNzEyNTQ0ZTQ3NGI", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2023-04-11T14:44:32Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2023-04-12T09:08:59Z"}, "message": "Fortran: resolve correct generic with TYPE(C_PTR) arguments [PR61615,PR99982]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/61615\n\tPR fortran/99982\n\t* interface.cc (compare_parameter): Enable type and rank checks for\n\targuments of derived type from the intrinsic module ISO_C_BINDING.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/61615\n\tPR fortran/99982\n\t* gfortran.dg/interface_49.f90: New test.", "tree": {"sha": "c741ea5959df64cc3abc134e943aeea410e19fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c741ea5959df64cc3abc134e943aeea410e19fb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c482995cc5bac4a2168ea0049041e712544e474b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c482995cc5bac4a2168ea0049041e712544e474b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c482995cc5bac4a2168ea0049041e712544e474b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c482995cc5bac4a2168ea0049041e712544e474b/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d7ad38707e1fd71193d440198cc0726092b9015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7ad38707e1fd71193d440198cc0726092b9015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7ad38707e1fd71193d440198cc0726092b9015"}], "stats": {"total": 113, "additions": 112, "deletions": 1}, "files": [{"sha": "e9843e9549c9143b0ead0e3d4d2494748e23cb39", "filename": "gcc/fortran/interface.cc", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c482995cc5bac4a2168ea0049041e712544e474b/gcc%2Ffortran%2Finterface.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c482995cc5bac4a2168ea0049041e712544e474b/gcc%2Ffortran%2Finterface.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.cc?ref=c482995cc5bac4a2168ea0049041e712544e474b", "patch": "@@ -2361,7 +2361,23 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n       && formal->ts.u.derived && formal->ts.u.derived->ts.is_iso_c\n       && actual->ts.type == BT_DERIVED\n       && actual->ts.u.derived && actual->ts.u.derived->ts.is_iso_c)\n-    return true;\n+    {\n+      if (formal->ts.u.derived->intmod_sym_id\n+\t  != actual->ts.u.derived->intmod_sym_id)\n+\treturn false;\n+\n+      if (ranks_must_agree\n+\t  && symbol_rank (formal) != actual->rank\n+\t  && symbol_rank (formal) != -1)\n+\t{\n+\t  if (where)\n+\t    argument_rank_mismatch (formal->name, &actual->where,\n+\t\t\t\t    symbol_rank (formal), actual->rank,\n+\t\t\t\t    NULL);\n+\t  return false;\n+\t}\n+      return true;\n+    }\n \n   if (formal->ts.type == BT_CLASS && actual->ts.type == BT_DERIVED)\n     /* Make sure the vtab symbol is present when"}, {"sha": "aef5e0c66097180796e6375b9d7770024ec57423", "filename": "gcc/testsuite/gfortran.dg/interface_49.f90", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c482995cc5bac4a2168ea0049041e712544e474b/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_49.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c482995cc5bac4a2168ea0049041e712544e474b/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_49.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_49.f90?ref=c482995cc5bac4a2168ea0049041e712544e474b", "patch": "@@ -0,0 +1,95 @@\n+! { dg-do run }\n+! PR fortran/61615 - resolve correct generic with TYPE(C_PTR) arguments\n+! PR fortran/99982 - dto. with C_PTR and C_FUNPTR\n+! Contributed by Jacob Abel and Scot Breitenfeld\n+\n+MODULE foo\n+  USE iso_c_binding, only : c_ptr, c_funptr\n+  IMPLICIT NONE\n+  integer      :: rank = -99\n+  character(8) :: ctyp = \"\"\n+  INTERFACE bar\n+    MODULE PROCEDURE bar_s\n+    MODULE PROCEDURE bar_a1d\n+    MODULE PROCEDURE bar_a2d\n+    MODULE PROCEDURE bar_fp\n+    MODULE PROCEDURE bar_fp1\n+    MODULE PROCEDURE bar_fpx\n+  END INTERFACE bar\n+CONTAINS\n+  SUBROUTINE bar_s(a)\n+    TYPE(c_ptr) :: a\n+    WRITE (0, *) 'in bar_s'\n+    rank = 0\n+    ctyp = \"c_ptr\"\n+  END SUBROUTINE bar_s\n+\n+  SUBROUTINE bar_a1d(a)\n+    TYPE(c_ptr) :: a(:)\n+    WRITE (0, *) 'in bar_a1d'\n+    rank = 1\n+    ctyp = \"c_ptr\"\n+  END SUBROUTINE bar_a1d\n+\n+  SUBROUTINE bar_a2d(a)\n+    TYPE(c_ptr) :: a(:,:)\n+    WRITE (0, *) 'in bar_a2d'\n+    rank = 2\n+    ctyp = \"c_ptr\"\n+  END SUBROUTINE bar_a2d\n+\n+  SUBROUTINE bar_fp(a)\n+    TYPE(c_funptr) :: a\n+    WRITE (0, *) 'in bar_fp'\n+    rank = 0\n+    ctyp = \"c_funptr\"\n+  END SUBROUTINE bar_fp\n+\n+  SUBROUTINE bar_fp1(a)\n+    TYPE(c_funptr) :: a(:)\n+    WRITE (0, *) 'in bar_fp1'\n+    rank = 1\n+    ctyp = \"c_funptr\"\n+  END SUBROUTINE bar_fp1\n+\n+  SUBROUTINE bar_fpx(a, b)\n+    TYPE(c_funptr) :: a(..)\n+    TYPE(c_ptr)    :: b\n+    WRITE (0, *) 'in bar_fpx'\n+    rank = -1\n+    ctyp = \"c_funptr\"\n+  END SUBROUTINE bar_fpx\n+END MODULE foo\n+\n+PROGRAM cptr_array_vs_scalar_arg\n+  USE foo\n+  USE iso_c_binding, only : c_ptr, c_loc, c_funptr\n+  IMPLICIT NONE\n+  INTEGER, TARGET :: i\n+  TYPE(c_ptr)     :: a, b(1), c(1,1)\n+  type(c_funptr)  :: fp, fp1(1), fp2(1,1)\n+  a    = C_LOC(i)\n+  b(1) = C_LOC(i)\n+  CALL bar(a)\n+  if (rank /= 0 .or. ctyp /= \"c_ptr\") stop 1\n+  CALL bar(b)\n+  if (rank /= 1 .or. ctyp /= \"c_ptr\") stop 2\n+  CALL bar(c)\n+  if (rank /= 2 .or. ctyp /= \"c_ptr\") stop 3\n+  rank = -99\n+  ctyp = \"\"\n+  CALL bar((a))\n+  if (rank /= 0 .or. ctyp /= \"c_ptr\") stop 4\n+  CALL bar((b))\n+  if (rank /= 1 .or. ctyp /= \"c_ptr\") stop 5\n+  rank = -99\n+  ctyp = \"\"\n+  CALL bar(fp)\n+  if (rank /= 0 .or. ctyp /= \"c_funptr\") stop 6\n+  CALL bar(fp1)\n+  if (rank /= 1 .or. ctyp /= \"c_funptr\") stop 7\n+  rank = -99\n+  ctyp = \"\"\n+  CALL bar(fp2, a)\n+  if (rank /= -1 .or. ctyp /= \"c_funptr\") stop 8\n+END PROGRAM cptr_array_vs_scalar_arg"}]}