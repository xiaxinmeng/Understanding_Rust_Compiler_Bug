{"sha": "41f683efe5ab3b56b38ae6be0320232bf444dd83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFmNjgzZWZlNWFiM2I1NmIzOGFlNmJlMDMyMDIzMmJmNDQ0ZGQ4Mw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-24T19:22:48Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-24T19:22:48Z"}, "message": "tree-outof-ssa.c (eliminate_build): Use g->e->dest_idx instead to find the PHI argument.\n\n\t* tree-outof-ssa.c (eliminate_build): Use g->e->dest_idx\n\tinstead to find the PHI argument.  Do not take I as an\n\targument.\n\t(eliminate_phi): Adjust the call to eliminate_build.  Do not\n\ttake I as an argument.\n\t(rewrite_trees): Adjust the call to eliminate_phi.\n\nFrom-SVN: r91188", "tree": {"sha": "05ea52c09926bb9d9188d58fbde78b6ecf6c34f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05ea52c09926bb9d9188d58fbde78b6ecf6c34f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41f683efe5ab3b56b38ae6be0320232bf444dd83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f683efe5ab3b56b38ae6be0320232bf444dd83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41f683efe5ab3b56b38ae6be0320232bf444dd83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f683efe5ab3b56b38ae6be0320232bf444dd83/comments", "author": null, "committer": null, "parents": [{"sha": "bef5d8b61f6732bec53128324913bfa8a5093a07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef5d8b61f6732bec53128324913bfa8a5093a07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bef5d8b61f6732bec53128324913bfa8a5093a07"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "7013cbaa6b0b8b7a1c2336fb848b2829a9831e37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f683efe5ab3b56b38ae6be0320232bf444dd83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f683efe5ab3b56b38ae6be0320232bf444dd83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41f683efe5ab3b56b38ae6be0320232bf444dd83", "patch": "@@ -1,3 +1,12 @@\n+2004-11-24  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-outof-ssa.c (eliminate_build): Use g->e->dest_idx\n+\tinstead to find the PHI argument.  Do not take I as an\n+\targument.\n+\t(eliminate_phi): Adjust the call to eliminate_build.  Do not\n+\ttake I as an argument.\n+\t(rewrite_trees): Adjust the call to eliminate_phi.\n+\n 2004-11-24  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* optabs.h (force_expand_binop): Declare."}, {"sha": "20409d39e4bc2345b1f23becf673f1466e94f479", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f683efe5ab3b56b38ae6be0320232bf444dd83/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f683efe5ab3b56b38ae6be0320232bf444dd83/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=41f683efe5ab3b56b38ae6be0320232bf444dd83", "patch": "@@ -115,12 +115,12 @@ static inline void elim_graph_add_edge (elim_graph, int, int);\n static inline int elim_graph_remove_succ_edge (elim_graph, int);\n \n static inline void eliminate_name (elim_graph, tree);\n-static void eliminate_build (elim_graph, basic_block, int);\n+static void eliminate_build (elim_graph, basic_block);\n static void elim_forward (elim_graph, int);\n static int elim_unvisited_predecessor (elim_graph, int);\n static void elim_backward (elim_graph, int);\n static void elim_create (elim_graph, int);\n-static void eliminate_phi (edge, int, elim_graph);\n+static void eliminate_phi (edge, elim_graph);\n static tree_live_info_p coalesce_ssa_name (var_map, int);\n static void assign_vars (var_map);\n static bool replace_use_variable (var_map, use_operand_p, tree *);\n@@ -338,10 +338,11 @@ eliminate_name (elim_graph g, tree T)\n }\n \n \n-/* Build elimination graph G for basic block BB on incoming PHI edge I.  */\n+/* Build elimination graph G for basic block BB on incoming PHI edge\n+   G->e.  */\n \n static void\n-eliminate_build (elim_graph g, basic_block B, int i)\n+eliminate_build (elim_graph g, basic_block B)\n {\n   tree phi;\n   tree T0, Ti;\n@@ -357,17 +358,7 @@ eliminate_build (elim_graph g, basic_block B, int i)\n       if (T0 == NULL_TREE)\n \tcontinue;\n \n-      if (PHI_ARG_EDGE (phi, i) == g->e)\n-\tTi = PHI_ARG_DEF (phi, i);\n-      else\n-        {\n-\t  /* On rare occasions, a PHI node may not have the arguments\n-\t     in the same order as all of the other PHI nodes. If they don't \n-\t     match, find the appropriate index here.  */\n-\t  pi = phi_arg_from_edge (phi, g->e);\n-\t  gcc_assert (pi != -1);\n-\t  Ti = PHI_ARG_DEF (phi, pi);\n-\t}\n+      Ti = PHI_ARG_DEF (phi, g->e->dest_idx);\n \n       /* If this argument is a constant, or a SSA_NAME which is being\n \t left in SSA form, just queue a copy to be emitted on this\n@@ -482,17 +473,15 @@ elim_create (elim_graph g, int T)\n   \n }\n \n-/* Eliminate all the phi nodes on edge E in graph G. I is the usual PHI\n-   index that edge E's values are found on.  */\n+/* Eliminate all the phi nodes on edge E in graph G.  */\n \n static void\n-eliminate_phi (edge e, int i, elim_graph g)\n+eliminate_phi (edge e, elim_graph g)\n {\n   int num_nodes = 0;\n   int x;\n   basic_block B = e->dest;\n \n-  gcc_assert (i != -1);\n   gcc_assert (VARRAY_ACTIVE_SIZE (g->const_copies) == 0);\n \n   /* Abnormal edges already have everything coalesced, or the coalescer\n@@ -503,7 +492,7 @@ eliminate_phi (edge e, int i, elim_graph g)\n   num_nodes = num_var_partitions (g->map);\n   g->e = e;\n \n-  eliminate_build (g, B, i);\n+  eliminate_build (g, B);\n \n   if (elim_graph_size (g) != 0)\n     {\n@@ -1929,7 +1918,7 @@ rewrite_trees (var_map map, tree *values)\n         {\n \t  edge_iterator ei;\n \t  FOR_EACH_EDGE (e, ei, bb->preds)\n-\t    eliminate_phi (e, phi_arg_from_edge (phi, e), g);\n+\t    eliminate_phi (e, g);\n \t}\n     }\n "}]}