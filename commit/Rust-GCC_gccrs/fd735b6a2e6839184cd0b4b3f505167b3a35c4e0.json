{"sha": "fd735b6a2e6839184cd0b4b3f505167b3a35c4e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ3MzViNmEyZTY4MzkxODRjZDBiNGIzZjUwNTE2N2IzYTM1YzRlMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-09-17T10:18:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-09-17T10:18:51Z"}, "message": "type_traitsfwd.h (aligned_storage): Remove declaration.\n\n2007-09-17  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1_impl/type_traitsfwd.h (aligned_storage): Remove\n\tdeclaration.\n\t* include/tr1_impl/type_traits (aligned_storage): Remove.\n\t* include/std/type_traits (aligned_storage, __aligned_storage_msa):\n\tAdd.\n\t* include/tr1/type_traits (aligned_storage): Add.\n\t* testsuite/20_util/aligned_storage/value.cc: New.\n\t* testsuite/20_util/aligned_storage/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust\n\tdg-error lines.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\nFrom-SVN: r128542", "tree": {"sha": "bc2c1cec0504e30850d6ab33644c7df82b743612", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc2c1cec0504e30850d6ab33644c7df82b743612"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/comments", "author": null, "committer": null, "parents": [{"sha": "0ab7816b23a53b7558deadf841591ef02e177685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab7816b23a53b7558deadf841591ef02e177685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ab7816b23a53b7558deadf841591ef02e177685"}], "stats": {"total": 180, "additions": 161, "deletions": 19}, "files": [{"sha": "f84883f969dcf21e9a42244142a66065714decfb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fd735b6a2e6839184cd0b4b3f505167b3a35c4e0", "patch": "@@ -1,3 +1,19 @@\n+2007-09-17  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1_impl/type_traitsfwd.h (aligned_storage): Remove\n+\tdeclaration.\n+\t* include/tr1_impl/type_traits (aligned_storage): Remove.\n+\t* include/std/type_traits (aligned_storage, __aligned_storage_msa):\n+\tAdd.\n+\t* include/tr1/type_traits (aligned_storage): Add.\n+\t* testsuite/20_util/aligned_storage/value.cc: New.\n+\t* testsuite/20_util/aligned_storage/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust\n+\tdg-error lines.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\n 2007-09-16  Paolo Carlini  <pcarlini@suse.de>\n \t    Douglas Gregor  <doug.gregor@gmail.com>\n "}, {"sha": "33442ba5a31ec93f53b0f777309f89b2b6e60af5", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=fd735b6a2e6839184cd0b4b3f505167b3a35c4e0", "patch": "@@ -258,6 +258,27 @@ namespace std\n \t\t\t       __is_convertible_helper<_From, _To>::__value>\n     { };\n \n+  template<std::size_t _Len>\n+    struct __aligned_storage_msa\n+    { \n+      union __type\n+      {\n+\tunsigned char __data[_Len];\n+\tstruct __attribute__((__aligned__)) { } __align; \n+      };\n+    };\n+\n+  template<std::size_t _Len, std::size_t _Align =\n+\t   __alignof__(typename __aligned_storage_msa<_Len>::__type)>\n+    struct aligned_storage\n+    { \n+      union type\n+      {\n+\tunsigned char __data[_Len];\n+\tstruct __attribute__((__aligned__((_Align)))) { } __align; \n+      };\n+    };\n+\n \n   // Define a nested type if some predicate holds.\n   template<bool, typename _Tp = void>"}, {"sha": "be73fe77460be78043c187fe21d3ef7745c805f8", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=fd735b6a2e6839184cd0b4b3f505167b3a35c4e0", "patch": "@@ -230,6 +230,17 @@ namespace tr1\n     : public __add_reference_helper<_Tp>\n     { };\n \n+  /// @brief  other transformations [4.8].\n+  template<std::size_t _Len, std::size_t _Align>\n+    struct aligned_storage\n+    { \n+      union type\n+      {\n+\tunsigned char __data[_Len];\n+\tstruct __attribute__((__aligned__((_Align)))) { } __align; \n+      };\n+    };\n+\n #undef _DEFINE_SPEC_0_HELPER\n #undef _DEFINE_SPEC\n #undef _DEFINE_SPEC_BODY"}, {"sha": "3c105d6cf129d4bb6873df766896915cae0b6dd5", "filename": "libstdc++-v3/include/tr1_impl/type_traits", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits?ref=fd735b6a2e6839184cd0b4b3f505167b3a35c4e0", "patch": "@@ -374,17 +374,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     struct add_pointer\n     { typedef typename remove_reference<_Tp>::type*     type; };\n \n-  /// @brief  other transformations [4.8].\n-  template<std::size_t _Len, std::size_t _Align>\n-    struct aligned_storage\n-    { \n-      union type\n-      {\n-\tunsigned char __data[_Len];\n-\tstruct __attribute__((__aligned__((_Align)))) { } __aligner; \n-      };\n-    };\n-\n #undef _DEFINE_SPEC_0_HELPER\n #undef _DEFINE_SPEC_1_HELPER\n #undef _DEFINE_SPEC_2_HELPER"}, {"sha": "63db0cb8f6dc6c45ff5d0ec653b154adf4d4488c", "filename": "libstdc++-v3/include/tr1_impl/type_traitsfwd.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traitsfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traitsfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traitsfwd.h?ref=fd735b6a2e6839184cd0b4b3f505167b3a35c4e0", "patch": "@@ -170,9 +170,5 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n   template<typename _Tp>\n     struct add_pointer;\n \n-  /// @brief  other transformations [4.8].\n-  template<std::size_t _Len, std::size_t _Align>\n-    struct aligned_storage;\n-\n _GLIBCXX_END_NAMESPACE_TR1\n }"}, {"sha": "2b6a9d18fb97d0b2bbd71a51863c49aea12c23ee", "filename": "libstdc++-v3/testsuite/20_util/aligned_storage/requirements/explicit_instantiation.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faligned_storage%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faligned_storage%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faligned_storage%2Frequirements%2Fexplicit_instantiation.cc?ref=fd735b6a2e6839184cd0b4b3f505167b3a35c4e0", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2007-09-17  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct aligned_storage<1, alignment_of<test_type>::value>;\n+  template struct aligned_storage<2>;\n+}"}, {"sha": "2ea6fee4956c8bd5a73a7713011f21bf964e432e", "filename": "libstdc++-v3/testsuite/20_util/aligned_storage/value.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faligned_storage%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faligned_storage%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faligned_storage%2Fvalue.cc?ref=fd735b6a2e6839184cd0b4b3f505167b3a35c4e0", "patch": "@@ -0,0 +1,68 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-09-17  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+struct MSAlignType { } __attribute__((__aligned__));  \n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::aligned_storage;\n+  using std::alignment_of;\n+  using namespace __gnu_test;\n+  \n+  const std::size_t align_c = alignment_of<char>::value;\n+  VERIFY( (sizeof(aligned_storage<4, align_c>::type) >= 4) );\n+  VERIFY( (__alignof__(aligned_storage<4, align_c>::type) == align_c) );\n+\n+  const std::size_t align_s = alignment_of<short>::value;\n+  VERIFY( (sizeof(aligned_storage<1, align_s>::type) >= 1) );\n+  VERIFY( (__alignof__(aligned_storage<1, align_s>::type) == align_s) );\n+\n+  const std::size_t align_i = alignment_of<int>::value;\n+  VERIFY( (sizeof(aligned_storage<7, align_i>::type) >= 7) );\n+  VERIFY( (__alignof__(aligned_storage<7, align_i>::type) == align_i) );\n+\n+  const std::size_t align_d = alignment_of<double>::value;\n+  VERIFY( (sizeof(aligned_storage<2, align_d>::type) >= 2) );\n+  VERIFY( (__alignof__(aligned_storage<2, align_d>::type) == align_d) );\n+\n+  const std::size_t align_ai = alignment_of<int[4]>::value;\n+  VERIFY( (sizeof(aligned_storage<20, align_ai>::type) >= 20) );\n+  VERIFY( (__alignof__(aligned_storage<20, align_ai>::type) == align_ai) );\n+\n+  const std::size_t align_ct = alignment_of<ClassType>::value;\n+  VERIFY( (sizeof(aligned_storage<11, align_ct>::type) >= 11) );\n+  VERIFY( (__alignof__(aligned_storage<11, align_ct>::type) == align_ct) );\n+\n+  const std::size_t align_msa = alignment_of<MSAlignType>::value;\n+  VERIFY( (sizeof(aligned_storage<5>::type) >= 5) );\n+  VERIFY( (__alignof__(aligned_storage<5>::type) == align_msa) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ff912c2cc0a7069ba032db84aec2956230cd8081", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=fd735b6a2e6839184cd0b4b3f505167b3a35c4e0", "patch": "@@ -49,8 +49,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 41 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 43 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 490 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 456 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 511 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 477 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "5b2b3dc9f82e2949962da1a028a6be9e81a4478e", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd735b6a2e6839184cd0b4b3f505167b3a35c4e0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=fd735b6a2e6839184cd0b4b3f505167b3a35c4e0", "patch": "@@ -49,8 +49,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 41 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 43 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 415 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 381 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 436 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 402 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}]}