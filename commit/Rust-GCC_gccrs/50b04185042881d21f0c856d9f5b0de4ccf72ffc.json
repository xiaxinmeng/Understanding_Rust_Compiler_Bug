{"sha": "50b04185042881d21f0c856d9f5b0de4ccf72ffc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBiMDQxODUwNDI4ODFkMjFmMGM4NTZkOWY1YjBkZTRjY2Y3MmZmYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-07-05T14:25:14Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-07-05T14:25:14Z"}, "message": "* tree-cfg.c (verify_expr): Use CHECK_OK in binary case.\n\nFrom-SVN: r84114", "tree": {"sha": "66ffa1c9315023f185000c1604377a7566498392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66ffa1c9315023f185000c1604377a7566498392"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50b04185042881d21f0c856d9f5b0de4ccf72ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b04185042881d21f0c856d9f5b0de4ccf72ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b04185042881d21f0c856d9f5b0de4ccf72ffc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b04185042881d21f0c856d9f5b0de4ccf72ffc/comments", "author": null, "committer": null, "parents": [{"sha": "8963a5172c0a91b190f361ef3b400518ee347a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8963a5172c0a91b190f361ef3b400518ee347a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8963a5172c0a91b190f361ef3b400518ee347a00"}], "stats": {"total": 26, "additions": 7, "deletions": 19}, "files": [{"sha": "5ea730178f11419e066acd56982505dace2560fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b04185042881d21f0c856d9f5b0de4ccf72ffc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b04185042881d21f0c856d9f5b0de4ccf72ffc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50b04185042881d21f0c856d9f5b0de4ccf72ffc", "patch": "@@ -1,5 +1,7 @@\n 2004-07-05  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* tree-cfg.c (verify_expr): Use CHECK_OK in binary case.\n+\n \t* function.c, langhooks-def.h, langhooks.h: Move max_size hook\n \tto type hooks; remove bogus PARAMS.\n "}, {"sha": "4bf00dff375a2f44770bbfb96479ae7975b13665", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b04185042881d21f0c856d9f5b0de4ccf72ffc/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b04185042881d21f0c856d9f5b0de4ccf72ffc/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=50b04185042881d21f0c856d9f5b0de4ccf72ffc", "patch": "@@ -3151,7 +3151,9 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n   if (TYPE_P (t))\n     *walk_subtrees = 0;\n   \n-  /* Check operand N for being valid GIMPLE and give error MSG if not.  */\n+  /* Check operand N for being valid GIMPLE and give error MSG if not. \n+     We check for constants explicitly since they are not considered\n+     gimple invariants if they overflowed.  */\n #define CHECK_OP(N, MSG) \\\n   do { if (TREE_CODE_CLASS (TREE_CODE (TREE_OPERAND (t, N))) != 'c'\t\\\n          && !is_gimple_val (TREE_OPERAND (t, N)))\t\t\t\\\n@@ -3300,24 +3302,8 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n     case BIT_IOR_EXPR:\n     case BIT_XOR_EXPR:\n     case BIT_AND_EXPR:\n-      x = TREE_OPERAND (t, 0);\n-      /* We check for constants explicitly since they are not considered\n-\t gimple invariants if they overflowed.  */\n-      if (TREE_CODE_CLASS (TREE_CODE (x)) != 'c'\n-\t  && !is_gimple_val (x))\n-\t{\n-\t  error (\"Invalid operand to binary operator\");\n-\t  return x;\n-\t}\n-      x = TREE_OPERAND (t, 1);\n-      /* We check for constants explicitly since they are not considered\n-\t gimple invariants if they overflowed.  */\n-      if (TREE_CODE_CLASS (TREE_CODE (x)) != 'c'\n-\t  && !is_gimple_val (x))\n-\t{\n-\t  error (\"Invalid operand to binary operator\");\n-\t  return x;\n-\t}\n+      CHECK_OP (0, \"Invalid operand to binary operator\");\n+      CHECK_OP (1, \"Invalid operand to binary operator\");\n       break;\n \n     default:"}]}