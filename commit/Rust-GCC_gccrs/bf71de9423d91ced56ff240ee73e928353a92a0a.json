{"sha": "bf71de9423d91ced56ff240ee73e928353a92a0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY3MWRlOTQyM2Q5MWNlZDU2ZmYyNDBlZTczZTkyODM1M2E5MmEwYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-25T17:41:44Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-25T17:41:44Z"}, "message": "re PR testsuite/51258 (64-bit gcc.dg/atomic-compare-exchange-5.c link failure on 32-bit Solaris/x86)\n\n\tPR testsuite/51258\n\t* lib/target-supports.exp\n\t(check_effective_target_sync_int_128_runtime): New procedure.\n\t(check_effective_target_sync_long_long_runtime): Ditto.\n\t(check_effective_target_sync_long_long): Add arm*-*-*.\n\t(check_effective_target_sync_longlong): Remove.\n\n\t* gcc.dg/atomic-op-5.c: Require sync_int_128_runtime effective target.\n\t* gcc.dg/atomic-compare-exchange-5.c: Ditto.\n\t* gcc.dg/atomic-exchange-5.c: Ditto.\n\t* gcc.dg/atomic-load-5.c: Ditto.\n\t* gcc.dg/atomic-store-5.c: Ditto.\n\t* gcc.dg/simulate-thread/atomic-load-int128.c: Ditto.\n\t* gcc.dg/simulate-thread/atomic-other-int128.c: Ditto.\n\t* gcc.dg/atomic-op-4.c: Require sync_long_long_runtime\n\teffective target.\n\t* gcc.dg/atomic-compare-exchange-4.c: Ditto.\n\t* gcc.dg/atomic-exchange-4.c: Ditto.\n\t* gcc.dg/atomic-load-4.c: Ditto.\n\t* gcc.dg/atomic-store-4.c: Ditto.\n\t* gcc.dg/di-longlong64-sync-1.c: Ditto.\n\t* gcc.dg/di-sync-multithread.c: Ditto.\n\t* gcc.dg/simulate-thread/atomic-load-longlong.c: Ditto.\n\t* gcc.dg/simulate-thread/atomic-other-longlong.c: Ditto.\n\nFrom-SVN: r181727", "tree": {"sha": "3768787045d1cc3cec9d15966c6c81acee19ef41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3768787045d1cc3cec9d15966c6c81acee19ef41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf71de9423d91ced56ff240ee73e928353a92a0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf71de9423d91ced56ff240ee73e928353a92a0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf71de9423d91ced56ff240ee73e928353a92a0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf71de9423d91ced56ff240ee73e928353a92a0a/comments", "author": null, "committer": null, "parents": [{"sha": "f29bda8308557f8f4af0d600a413842aa0530d1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f29bda8308557f8f4af0d600a413842aa0530d1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f29bda8308557f8f4af0d600a413842aa0530d1a"}], "stats": {"total": 167, "additions": 117, "deletions": 50}, "files": [{"sha": "7dbd9a89c464a795177715c2de2f48e7347fd7a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -82,11 +82,12 @@\n \n 2011-11-24  Razya Ladelsky  <razya@il.ibm.com>\n \n-\t* tree-data-ref.c (initialize_data_dependence_relation): Update \n+\t* tree-data-ref.c (initialize_data_dependence_relation): Update\n \tcomment for the self dependence case.\n \t(compute_self_dependence): Remove.\n-\t* tree-vect-data-refs.c (vect_analyze_data_refs): Remove call to \n-\tcompute_self_dependenc. \n+\t* tree-vect-data-refs.c (vect_analyze_data_refs): Remove call to\n+\tcompute_self_dependenc.\n+\n 2011-11-24  Alan Modra  <amodra@gmail.com>\n \n \t* c-decl.c (warn_if_shadowing): Don't warn if shadowed\n@@ -144,7 +145,7 @@\n \t(sync_compare_and_swap<IMODE>): Remove.\n \t(sync_lock_release<IMODE>): Remove.\n \n-\t* config/ia64/ia64.md: Use define_e_enum for UNSPEC_*\n+\t* config/ia64/ia64.md: Use define_c_enum for UNSPEC_*\n \tand UNSPECV_* constants.\n \n 2011-11-22  Tom de Vries  <tom@codesourcery.com>\n@@ -165,7 +166,8 @@\n 2011-11-21  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* opts.c (finish_options): Do not fail for -fgnu-tm.\n-\t* gimple-streamer-out.c (output_gimple_stmt): Handle GIMPLE_TRANSACTION.\n+\t* gimple-streamer-out.c (output_gimple_stmt): Handle\n+\tGIMPLE_TRANSACTION.\n \t* gimple-streamer-in.c (input_gimple_stmt): Same.\n \t* lto-cgraph.c (input_overwrite_node): Read tm_clone bit.\n \t(lto_output_node): Write tm_clone bit."}, {"sha": "e53a713fe48239c70b99bd250dc428f0ce702b4f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -1,3 +1,30 @@\n+2011-11-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR testsuite/51258\n+\t* lib/target-supports.exp\n+\t(check_effective_target_sync_int_128_runtime): New procedure.\n+\t(check_effective_target_sync_long_long_runtime): Ditto.\n+\t(check_effective_target_sync_long_long): Add arm*-*-*.\n+\t(check_effective_target_sync_longlong): Remove.\n+\n+\t* gcc.dg/atomic-op-5.c: Require sync_int_128_runtime effective target.\n+\t* gcc.dg/atomic-compare-exchange-5.c: Ditto.\n+\t* gcc.dg/atomic-exchange-5.c: Ditto.\n+\t* gcc.dg/atomic-load-5.c: Ditto.\n+\t* gcc.dg/atomic-store-5.c: Ditto.\n+\t* gcc.dg/simulate-thread/atomic-load-int128.c: Ditto.\n+\t* gcc.dg/simulate-thread/atomic-other-int128.c: Ditto.\n+\t* gcc.dg/atomic-op-4.c: Require sync_long_long_runtime\n+\teffective target.\n+\t* gcc.dg/atomic-compare-exchange-4.c: Ditto.\n+\t* gcc.dg/atomic-exchange-4.c: Ditto.\n+\t* gcc.dg/atomic-load-4.c: Ditto.\n+\t* gcc.dg/atomic-store-4.c: Ditto.\n+\t* gcc.dg/di-longlong64-sync-1.c: Ditto.\n+\t* gcc.dg/di-sync-multithread.c: Ditto.\n+\t* gcc.dg/simulate-thread/atomic-load-longlong.c: Ditto.\n+\t* gcc.dg/simulate-thread/atomic-other-longlong.c: Ditto.\n+\n 2011-11-25  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/50408\n@@ -12,7 +39,7 @@\n \n \tPR c/51256\n \t* gcc.dg/atomic-pr51256.c: New.  Test error conditions.\n-\t\n+\n 2011-11-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51227\n@@ -104,8 +131,8 @@\n \n 2011-11-22  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n \n-        * gcc.dg/vshift-1.c (main): Call rand instead of random.\n-        * gcc.dg/vshift-3.c (main): Likewise.\n+\t* gcc.dg/vshift-1.c (main): Call rand instead of random.\n+\t* gcc.dg/vshift-3.c (main): Likewise.\n \n 2011-11-22  Iain Sandoe  <iains@gcc.gnu.org>\n "}, {"sha": "2b34f0a56be18fb483c590eeb899d8ba81e5e6da", "filename": "gcc/testsuite/gcc.dg/atomic-compare-exchange-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-compare-exchange-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-compare-exchange-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-compare-exchange-4.c?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -1,7 +1,7 @@\n /* Test __atomic routines for existence and proper execution on 8 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_long_long } */\n+/* { dg-require-effective-target sync_long_long_runtime } */\n /* { dg-options \"\" } */\n \n /* Test the execution of __atomic_compare_exchange_n builtin for a long_long.  */"}, {"sha": "4cc0209b33f96f3f78023530bc0029ae521d7f18", "filename": "gcc/testsuite/gcc.dg/atomic-compare-exchange-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-compare-exchange-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-compare-exchange-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-compare-exchange-5.c?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -1,7 +1,7 @@\n /* Test __atomic routines for existence and proper execution on 16 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_int_128 } */\n+/* { dg-require-effective-target sync_int_128_runtime } */\n /* { dg-options \"-mcx16\" { target { i?86-*-* x86_64-*-* } } } */\n \n /* Test the execution of __atomic_compare_exchange_n builtin for an int_128.  */"}, {"sha": "0c564fd9ba27d3f4f11785f474ff3484e717690c", "filename": "gcc/testsuite/gcc.dg/atomic-exchange-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-exchange-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-exchange-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-exchange-4.c?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -1,7 +1,7 @@\n /* Test __atomic routines for existence and proper execution on 8 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_long_long } */\n+/* { dg-require-effective-target sync_long_long_runtime } */\n /* { dg-options \"\" } */\n \n /* Test the execution of the __atomic_X builtin for a long_long.  */"}, {"sha": "b0c84b17fd32c2f66080dc346fff1919d3eaa36a", "filename": "gcc/testsuite/gcc.dg/atomic-exchange-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-exchange-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-exchange-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-exchange-5.c?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -1,7 +1,7 @@\n /* Test __atomic routines for existence and proper execution on 16 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_int_128 } */\n+/* { dg-require-effective-target sync_int_128_runtime } */\n /* { dg-options \"-mcx16\" { target { i?86-*-* x86_64-*-* } } } */\n \n /* Test the execution of the __atomic_X builtin for a 16 byte value.  */"}, {"sha": "952342949ca87d4e07635b7fecbe91442cdea824", "filename": "gcc/testsuite/gcc.dg/atomic-load-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-load-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-load-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-load-4.c?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -1,7 +1,7 @@\n /* Test __atomic routines for existence and proper execution on 8 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_long_long } */\n+/* { dg-require-effective-target sync_long_long_runtime } */\n /* { dg-options \"\" } */\n \n extern void abort(void);"}, {"sha": "31d806633e1c670e3763b98d01db8a18c47afa90", "filename": "gcc/testsuite/gcc.dg/atomic-load-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-load-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-load-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-load-5.c?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -1,7 +1,7 @@\n /* Test __atomic routines for existence and proper execution on 16 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_int_128 } */\n+/* { dg-require-effective-target sync_int_128_runtime } */\n /* { dg-options \"-mcx16\" { target { i?86-*-* x86_64-*-* } } } */\n \n extern void abort(void);"}, {"sha": "786b0bb7cf58d4f4b5497ea176500145d8429c9e", "filename": "gcc/testsuite/gcc.dg/atomic-op-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-op-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-op-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-op-4.c?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -1,7 +1,7 @@\n /* Test __atomic routines for existence and proper execution on 8 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_long_long } */\n+/* { dg-require-effective-target sync_long_long_runtime } */\n /* { dg-options \"\" } */\n \n /* Test the execution of the __atomic_*OP builtin routines for long long.  */"}, {"sha": "e78d81509978c57acff5d79109143343fed41a62", "filename": "gcc/testsuite/gcc.dg/atomic-op-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-op-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-op-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-op-5.c?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -1,7 +1,7 @@\n /* Test __atomic routines for existence and proper execution on 16 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_int_128 } */\n+/* { dg-require-effective-target sync_int_128_runtime } */\n /* { dg-options \"-mcx16\" { target { i?86-*-* x86_64-*-* } } } */\n \n /* Test the execution of the __atomic_*OP builtin routines for an int_128.  */"}, {"sha": "c526c5ce185a0334f3627d0f940e215dead73022", "filename": "gcc/testsuite/gcc.dg/atomic-store-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-store-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-store-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-store-4.c?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -1,7 +1,7 @@\n /* Test __atomic routines for existence and proper execution on 8 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_long_long } */\n+/* { dg-require-effective-target sync_long_long_runtime } */\n /* { dg-options \"\" } */\n \n /* Test the execution of the __atomic_store_n builtin for a long long.  */"}, {"sha": "763d29e240cfa36bf0ceb3a47c38ffd45d6fffa5", "filename": "gcc/testsuite/gcc.dg/atomic-store-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-store-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-store-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-store-5.c?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -1,7 +1,7 @@\n /* Test __atomic routines for existence and proper execution on 16 byte \n    values with each valid memory model.  */\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_int_128 } */\n+/* { dg-require-effective-target sync_int_128_runtime } */\n /* { dg-options \"-mcx16\" { target { i?86-*-* x86_64-*-* } } } */\n \n /* Test the execution of the __atomic_store_n builtin for a 16 byte value.  */"}, {"sha": "9bb31ba649cf55372526d1661896576a62979966", "filename": "gcc/testsuite/gcc.dg/di-longlong64-sync-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fdi-longlong64-sync-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fdi-longlong64-sync-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdi-longlong64-sync-1.c?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_longlong } */\n+/* { dg-require-effective-target sync_long_long_runtime } */\n /* { dg-options \"-std=gnu99\" } */\n /* { dg-message \"note: '__sync_fetch_and_nand' changed semantics in GCC 4.4\" \"\" { target *-*-* } 0 } */\n /* { dg-message \"note: '__sync_nand_and_fetch' changed semantics in GCC 4.4\" \"\" { target *-*-* } 0 } */"}, {"sha": "3cd93b0f3f5d8e1f99fcb8b6ca53654a645d9984", "filename": "gcc/testsuite/gcc.dg/di-sync-multithread.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fdi-sync-multithread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fdi-sync-multithread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdi-sync-multithread.c?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-require-effective-target sync_longlong } */\n+/* { dg-require-effective-target sync_long_long_runtime } */\n /* { dg-require-effective-target pthread_h } */\n /* { dg-require-effective-target pthread } */\n /* { dg-options \"-pthread -std=gnu99\" } */"}, {"sha": "c5aa623e685153e37982b8e3d34fec4443fcce19", "filename": "gcc/testsuite/gcc.dg/simulate-thread/atomic-load-int128.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fatomic-load-int128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fatomic-load-int128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fatomic-load-int128.c?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do link } */\n-/* { dg-require-effective-target sync_int_128 } */\n+/* { dg-require-effective-target sync_int_128_runtime } */\n /* { dg-options \"-mcx16\" { target { x86_64-*-* i?86-*-* } } } */\n /* { dg-final { simulate-thread } } */\n "}, {"sha": "c555c4c26d9e971b44ae5d810d6e36dcbbc578cf", "filename": "gcc/testsuite/gcc.dg/simulate-thread/atomic-load-longlong.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fatomic-load-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fatomic-load-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fatomic-load-longlong.c?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do link } */\n-/* { dg-require-effective-target sync_long_long } */\n+/* { dg-require-effective-target sync_long_long_runtime } */\n /* { dg-options \"\" } */\n /* { dg-final { simulate-thread } } */\n "}, {"sha": "6aaaa88ef0494632befed5cc8dc72e0feecd4822", "filename": "gcc/testsuite/gcc.dg/simulate-thread/atomic-other-int128.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fatomic-other-int128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fatomic-other-int128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fatomic-other-int128.c?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do link } */\n-/* { dg-require-effective-target sync_int_128 } */\n+/* { dg-require-effective-target sync_int_128_runtime } */\n /* { dg-options \"-mcx16\" { target { x86_64-*-* i?86-*-* } } } */\n /* { dg-final { simulate-thread } } */\n "}, {"sha": "3cffbb47aae8d1d2a3b0e8b4a0c89b5c3b47c2ca", "filename": "gcc/testsuite/gcc.dg/simulate-thread/atomic-other-longlong.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fatomic-other-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fatomic-other-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fatomic-other-longlong.c?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do link } */\n-/* { dg-require-effective-target sync_long_long } */\n+/* { dg-require-effective-target sync_long_long_runtime } */\n /* { dg-options \"\" } */\n /* { dg-final { simulate-thread } } */\n "}, {"sha": "49f2d32ecf8fc8f72fd22da1fb53866bc5fbe054", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 64, "deletions": 26, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71de9423d91ced56ff240ee73e928353a92a0a/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=bf71de9423d91ced56ff240ee73e928353a92a0a", "patch": "@@ -3620,17 +3620,80 @@ proc check_effective_target_sync_int_128 { } {\n     }\n }\n \n+# Return 1 if the target supports atomic operations on \"int_128\" values\n+# and can execute them.\n+\n+proc check_effective_target_sync_int_128_runtime { } {\n+    if { ([istarget x86_64-*-*] || [istarget i?86-*-*])\n+\t && ![is-effective-target ia32] } {\n+\treturn [check_cached_effective_target sync_int_128_available {\n+\t    check_runtime_nocache sync_int_128_available {\n+\t\t#include \"cpuid.h\"\n+\t\tint main ()\n+\t\t{\n+\t\t  unsigned int eax, ebx, ecx, edx;\n+\t\t  if (__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+\t\t    return !(ecx & bit_CMPXCHG16B);\n+\t\t  return 1;\n+\t\t}\n+\t    } \"\"\n+\t}]\n+    } else {\n+\treturn 0\n+    }\n+}\n+\n # Return 1 if the target supports atomic operations on \"long long\".\n \n proc check_effective_target_sync_long_long { } {\n     if { ([istarget x86_64-*-*] || [istarget i?86-*-*])\n-\t && ![is-effective-target ia32] } {\n+\t && ![is-effective-target ia32]\n+\t || [istarget arm*-*-*] } {\n \treturn 1\n     } else {\n \treturn 0\n     }\n }\n \n+# Return 1 if the target supports atomic operations on \"long long\"\n+# and can execute them.\n+\n+proc check_effective_target_sync_long_long_runtime { } {\n+    if { ([istarget x86_64-*-*] || [istarget i?86-*-*])\n+\t && ![is-effective-target ia32] } {\n+\treturn [check_cached_effective_target sync_long_long_available {\n+\t    check_runtime_nocache sync_long_long_available {\n+\t\t#include \"cpuid.h\"\n+\t\tint main ()\n+\t\t{\n+\t\t  unsigned int eax, ebx, ecx, edx;\n+\t\t  if (__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+\t\t    return !(edx & bit_CMPXCHG8B);\n+\t\t  return 1;\n+\t\t}\n+\t    } \"\"\n+\t}]\n+    } elseif { [istarget arm*-*-linux-gnueabi] } {\n+\treturn [check_runtime sync_longlong_runtime {\n+\t    #include <stdlib.h>\n+\t    int main ()\n+\t    {\n+\t      long long l1;\n+\n+\t      if (sizeof (long long) != 8)\n+\t\texit (1);\n+\n+\t      /* Just check for native; checking for kernel fallback is tricky.  */\n+\t      asm volatile (\"ldrexd r0,r1, [%0]\" : : \"r\" (&l1) : \"r0\", \"r1\");\n+\n+\t      exit (0);\n+\t    }\n+\t} \"\" ]\n+    } else {\n+\treturn 0\n+    }\n+}\n+\n # Return 1 if the target supports atomic operations on \"int\" and \"long\".\n \n proc check_effective_target_sync_int_long { } {\n@@ -3662,31 +3725,6 @@ proc check_effective_target_sync_int_long { } {\n     return $et_sync_int_long_saved\n }\n \n-# Return 1 if the target supports atomic operations on \"long long\" and can\n-# execute them\n-# So far only put checks in for ARM, others may want to add their own\n-proc check_effective_target_sync_longlong { } {\n-    return [check_runtime sync_longlong_runtime {\n-      #include <stdlib.h>\n-      int main ()\n-      {\n-\tlong long l1;\n-\n-\tif (sizeof (long long) != 8)\n-\t  exit (1);\n-\n-      #ifdef __arm__\n-\t/* Just check for native; checking for kernel fallback is tricky.  */\n-\tasm volatile (\"ldrexd r0,r1, [%0]\" : : \"r\" (&l1) : \"r0\", \"r1\");\n-      #else\n-      # error \"Add other suitable archs here\"\n-      #endif\n-\n-\texit (0);\n-      }\n-    } \"\" ]\n-}\n-\n # Return 1 if the target supports atomic operations on \"char\" and \"short\".\n \n proc check_effective_target_sync_char_short { } {"}]}