{"sha": "c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQyYWJhNmJiMzhkZjgyMmM2YjFjZDNjYjZjNTljNWI2ZWVmODhlMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-21T09:39:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-21T09:39:38Z"}, "message": "[multiple changes]\n\n2016-04-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Subtype_Declaration): A subtype\n\tdeclaration with no aspects, whose subtype_mark is a subtype\n\twith predicates, inherits the list of subprograms for the type.\n\n2016-04-21  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_aggr.adb (Has_Per_Object_Constraint): Refine previous\n\tchange.\n\n2016-04-21  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-socket.adb (Raise_Host_Error): Include additional Name parameter.\n\n2016-04-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* lib-writ.adb (Write_ALI): Do not record in ali file units\n\tthat are present in the files table but not analyzed. These\n\tunits are present because they appear in the context of units\n\tnamed in limited_with clauses, and the unit being compiled does\n\tnot depend semantically on them.\n\n2016-04-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Simplify code to\n\tcreate the procedure body for an function returning an array type,\n\twhen generating C code. Reuse the subprogram body rather than\n\tcreating a new one, both as an efficiency measure and because\n\tin an instance the body may contain global references that must\n\tbe preserved.\n\nFrom-SVN: r235324", "tree": {"sha": "7c88202b47a8f36b2eaebf00561b9256dd6e900f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c88202b47a8f36b2eaebf00561b9256dd6e900f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3/comments", "author": null, "committer": null, "parents": [{"sha": "2c2870a1b16c867b9ef0ea6cf0a8eb16af4c1b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c2870a1b16c867b9ef0ea6cf0a8eb16af4c1b2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c2870a1b16c867b9ef0ea6cf0a8eb16af4c1b2d"}], "stats": {"total": 162, "additions": 115, "deletions": 47}, "files": [{"sha": "45175a3cd3cbb0b3c53089ec4eb33af3402cb033", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3", "patch": "@@ -1,3 +1,35 @@\n+2016-04-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Subtype_Declaration): A subtype\n+\tdeclaration with no aspects, whose subtype_mark is a subtype\n+\twith predicates, inherits the list of subprograms for the type.\n+\n+2016-04-21  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_aggr.adb (Has_Per_Object_Constraint): Refine previous\n+\tchange.\n+\n+2016-04-21  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-socket.adb (Raise_Host_Error): Include additional Name parameter.\n+\n+2016-04-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* lib-writ.adb (Write_ALI): Do not record in ali file units\n+\tthat are present in the files table but not analyzed. These\n+\tunits are present because they appear in the context of units\n+\tnamed in limited_with clauses, and the unit being compiled does\n+\tnot depend semantically on them.\n+\n+2016-04-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Simplify code to\n+\tcreate the procedure body for an function returning an array type,\n+\twhen generating C code. Reuse the subprogram body rather than\n+\tcreating a new one, both as an efficiency measure and because\n+\tin an instance the body may contain global references that must\n+\tbe preserved.\n+\n 2016-04-21  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch3.adb, exp_attr.adb, exp_ch6.adb, exp_aggr.adb: Minor"}, {"sha": "c6b6210fd283d92cd8f69ff9d17683dc4d3b82e2", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3", "patch": "@@ -6092,7 +6092,10 @@ package body Exp_Aggr is\n          N : Node_Id := First (L);\n       begin\n          while Present (N) loop\n-            if Has_Per_Object_Constraint (Associated_Node (N)) then\n+            if Is_Entity_Name (N)\n+              and then Present (Entity (N))\n+              and then Has_Per_Object_Constraint (Entity (N))\n+            then\n                return True;\n             end if;\n "}, {"sha": "2baa4f7315ede24c02aaa9f8980e6467bef04f22", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2014, AdaCore                     --\n+--                     Copyright (C) 2001-2016, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -185,9 +185,10 @@ package body GNAT.Sockets is\n    --  Raise Socket_Error with an exception message describing the error code\n    --  from errno.\n \n-   procedure Raise_Host_Error (H_Error : Integer);\n+   procedure Raise_Host_Error (H_Error : Integer; Name : String);\n    --  Raise Host_Error exception with message describing error code (note\n-   --  hstrerror seems to be obsolete) from h_errno.\n+   --  hstrerror seems to be obsolete) from h_errno. Name is the name\n+   --  or address that was being looked up.\n \n    procedure Narrow (Item : in out Socket_Set_Type);\n    --  Update Last as it may be greater than the real last socket\n@@ -973,7 +974,7 @@ package body GNAT.Sockets is\n                              Res'Access, Buf'Address, Buflen, Err'Access) /= 0\n       then\n          Netdb_Unlock;\n-         Raise_Host_Error (Integer (Err));\n+         Raise_Host_Error (Integer (Err), Image (Address));\n       end if;\n \n       begin\n@@ -1015,7 +1016,7 @@ package body GNAT.Sockets is\n            (HN, Res'Access, Buf'Address, Buflen, Err'Access) /= 0\n          then\n             Netdb_Unlock;\n-            Raise_Host_Error (Integer (Err));\n+            Raise_Host_Error (Integer (Err), Name);\n          end if;\n \n          return H : constant Host_Entry_Type :=\n@@ -1700,11 +1701,12 @@ package body GNAT.Sockets is\n    -- Raise_Host_Error --\n    ----------------------\n \n-   procedure Raise_Host_Error (H_Error : Integer) is\n+   procedure Raise_Host_Error (H_Error : Integer; Name : String) is\n    begin\n       raise Host_Error with\n         Err_Code_Image (H_Error)\n-          & Host_Error_Messages.Host_Error_Message (H_Error);\n+          & Host_Error_Messages.Host_Error_Message (H_Error)\n+          & \": \" & Name;\n    end Raise_Host_Error;\n \n    ------------------------"}, {"sha": "34f3628388a849d1975ae0b0fa5260517394aea2", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -155,8 +155,9 @@ package body Lib.Writ is\n         OA_Setting        => 'O',\n         SPARK_Mode_Pragma => Empty);\n \n-      --  Parse system.ads so that the checksum is set right\n-      --  Style checks are not applied.\n+      --  Parse system.ads so that the checksum is set right,\n+      --  Style checks are not applied. The Ekind is set to ensure\n+      --  that this reference is always present in the ali file.\n \n       declare\n          Save_Mindex : constant Nat := Multiple_Unit_Index;\n@@ -166,6 +167,7 @@ package body Lib.Writ is\n          Style_Check := False;\n          Initialize_Scanner (Units.Last, System_Source_File_Index);\n          Discard_List (Par (Configuration_Pragmas => False));\n+         Set_Ekind (Cunit_Entity (Units.Last),  E_Package);\n          Style_Check := Save_Style;\n          Multiple_Unit_Index := Save_Mindex;\n       end;\n@@ -1429,6 +1431,17 @@ package body Lib.Writ is\n             Units.Table (Unum).Dependency_Num := J;\n             Sind := Units.Table (Unum).Source_Index;\n \n+            --  The dependency table also contains units that appear in the\n+            --  context of a unit loaded through a limited_with clause. These\n+            --  units are never analyzed, and thus the main unit does not\n+            --  really have a dependency on them.\n+\n+            if Present (Cunit_Entity (Unum))\n+              and then Ekind (Cunit_Entity (Unum)) = E_Void\n+            then\n+               goto Next_Unit;\n+            end if;\n+\n             Write_Info_Initiate ('D');\n             Write_Info_Char (' ');\n \n@@ -1452,6 +1465,18 @@ package body Lib.Writ is\n                Write_Info_Char (' ');\n                Write_Info_Str (Get_Hex_String (Source_Checksum (Sind)));\n \n+               --  If the dependency comes from a limited_with clause,\n+               --  record limited_checksum.\n+               --  Disable for now, until full checksum changes are checked.\n+\n+               --  if Present (Cunit_Entity (Unum))\n+               --    and then From_Limited_With (Cunit_Entity (Unum))\n+               --  then\n+               --     Write_Info_Char (' ');\n+               --     Write_Info_Char ('Y');\n+               --     Write_Info_Str (Get_Hex_String (Limited_Chk_Sum (Sind)));\n+               --  end if;\n+\n                --  If subunit, add unit name, omitting the %b at the end\n \n                if Present (Cunit (Unum)) then\n@@ -1492,6 +1517,9 @@ package body Lib.Writ is\n             end if;\n \n             Write_Info_EOL;\n+\n+         <<Next_Unit>>\n+            null;\n          end loop;\n       end;\n "}, {"sha": "096ba39bcdd5566a2e57f998b471081b6246039b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3", "patch": "@@ -5066,16 +5066,23 @@ package body Sem_Ch3 is\n       --  If this is a subtype declaration for an actual in an instance,\n       --  inherit static and dynamic predicates if any.\n \n-      if In_Instance\n-        and then not Comes_From_Source (N)\n-        and then Has_Predicates (T)\n+      --  If declaration has no aspect specifications, inherit predicate\n+      --  info as well.  Unclear how to handle the case of both specified\n+      --  and inherited predicates ??? Other inherited aspects, such as\n+      --  invariants, should be OK, but the combination with later pragmas\n+      --  may also require special merging.\n+\n+      if Has_Predicates (T)\n         and then Present (Predicate_Function (T))\n-      then\n-         --  ??? This is dangerous, it may clobber the invariant procedure\n \n+         and then\n+           ((In_Instance and then not Comes_From_Source (N))\n+              or else No (Aspect_Specifications (N)))\n+      then\n          Set_Subprograms_For_Type (Id, Subprograms_For_Type (T));\n \n          if Has_Static_Predicate (T) then\n+            Set_Has_Static_Predicate (Id);\n             Set_Static_Discrete_Predicate (Id, Static_Discrete_Predicate (T));\n          end if;\n       end if;"}, {"sha": "0263a4efc61e9120efd86703203986173fe17a6e", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 27, "deletions": 31, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=c42aba6bb38df822c6b1cd3cb6c59c5b6eef88e3", "patch": "@@ -3064,7 +3064,6 @@ package body Sem_Ch6 is\n       --  Local variables\n \n       Save_Ghost_Mode   : constant Ghost_Mode_Type := Ghost_Mode;\n-      Cloned_Body_For_C : Node_Id := Empty;\n \n    --  Start of processing for Analyze_Subprogram_Body_Helper\n \n@@ -3301,6 +3300,33 @@ package body Sem_Ch6 is\n          Spec_Id := Build_Private_Protected_Declaration (N);\n       end if;\n \n+      --  If we are generating C and this is a function returning a constrained\n+      --  array type for which we must create a procedure with an extra out\n+      --  parameter, build and analyze the body now.  The procedure declaration\n+      --  has already been created. We reuse the source body of the function,\n+      --  because in an instance it may contain global references that cannot\n+      --  be reanalyzed. The source function itself is not used any further,\n+      --  so we mark it as having a completion.\n+\n+      if Expander_Active\n+        and then Modify_Tree_For_C\n+        and then Present (Spec_Id)\n+        and then Ekind (Spec_Id) = E_Function\n+        and then Rewritten_For_C (Spec_Id)\n+      then\n+         Set_Has_Completion (Spec_Id);\n+\n+         Rewrite (N, Build_Procedure_Body_Form (Spec_Id, N));\n+         Analyze (N);\n+\n+         --  The entity for the created procedure must remain invisible,\n+         --  so it does not participate in resolution of subsequent\n+         --  references to the function.\n+\n+         Set_Is_Immediately_Visible (Corresponding_Spec (N), False);\n+         return;\n+      end if;\n+\n       --  If a separate spec is present, then deal with freezing issues\n \n       if Present (Spec_Id) then\n@@ -3677,21 +3703,6 @@ package body Sem_Ch6 is\n          return;\n       end if;\n \n-      --  If we are generating C and this is a function returning a constrained\n-      --  array type for which we must create a procedure with an extra out\n-      --  parameter then clone the body before it is analyzed. Needed to ensure\n-      --  that the body of the built procedure does not have any reference to\n-      --  the body of the function.\n-\n-      if Expander_Active\n-        and then Modify_Tree_For_C\n-        and then Present (Spec_Id)\n-        and then Ekind (Spec_Id) = E_Function\n-        and then Rewritten_For_C (Spec_Id)\n-      then\n-         Cloned_Body_For_C := Copy_Separate_Tree (N);\n-      end if;\n-\n       --  Handle frontend inlining\n \n       --  Note: Normally we don't do any inlining if expansion is off, since\n@@ -4133,21 +4144,6 @@ package body Sem_Ch6 is\n          end if;\n       end;\n \n-      --  When generating C code, transform a function that returns a\n-      --  constrained array type into a procedure with an out parameter\n-      --  that carries the return value.\n-\n-      if Present (Cloned_Body_For_C) then\n-         Rewrite (N, Build_Procedure_Body_Form (Spec_Id, Cloned_Body_For_C));\n-         Analyze (N);\n-\n-         --  The entity for the created procedure must remain invisible, so it\n-         --  does not participate in resolution of subsequent references to the\n-         --  function.\n-\n-         Set_Is_Immediately_Visible (Corresponding_Spec (N), False);\n-      end if;\n-\n       Ghost_Mode := Save_Ghost_Mode;\n    end Analyze_Subprogram_Body_Helper;\n "}]}