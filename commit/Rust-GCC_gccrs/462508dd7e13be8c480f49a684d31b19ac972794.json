{"sha": "462508dd7e13be8c480f49a684d31b19ac972794", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYyNTA4ZGQ3ZTEzYmU4YzQ4MGY0OWE2ODRkMzFiMTlhYzk3Mjc5NA==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2005-06-02T18:26:07Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2005-06-02T18:26:07Z"}, "message": "re PR tree-optimization/21582 ((optimisation) VRP pass could/should use non-null function attribute)\n\n\n\tPR 21582\n\t* tree-vrp.c (nonnull_arg_p): New.\n\t(get_value_range): Call it.\n\ntestsuite/ChangeLog\n\n\tPR 21582\n\t* gcc.dg/tree-ssa/pr21582.c: New test.\n\nFrom-SVN: r100505", "tree": {"sha": "c4ac2e10f438528f084722813917ea4a3f919688", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4ac2e10f438528f084722813917ea4a3f919688"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/462508dd7e13be8c480f49a684d31b19ac972794", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/462508dd7e13be8c480f49a684d31b19ac972794", "html_url": "https://github.com/Rust-GCC/gccrs/commit/462508dd7e13be8c480f49a684d31b19ac972794", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/462508dd7e13be8c480f49a684d31b19ac972794/comments", "author": null, "committer": null, "parents": [{"sha": "423ceeadf1fe2c682f75e11e6d860bcdea1879fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/423ceeadf1fe2c682f75e11e6d860bcdea1879fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/423ceeadf1fe2c682f75e11e6d860bcdea1879fa"}], "stats": {"total": 95, "additions": 94, "deletions": 1}, "files": [{"sha": "5182b3443d1d596b36c2e4123af43c8753c6edbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462508dd7e13be8c480f49a684d31b19ac972794/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462508dd7e13be8c480f49a684d31b19ac972794/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=462508dd7e13be8c480f49a684d31b19ac972794", "patch": "@@ -1,3 +1,9 @@\n+2005-06-02  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR 21582\n+\t* tree-vrp.c (nonnull_arg_p): New.\n+\t(get_value_range): Call it.\n+\n 2005-06-02  Eric Christopher  <echristo@redhat.com>\n \n \t* config/mips/mips.h (processor_type): Remove PROCESSOR_DEFAULT,"}, {"sha": "5d508e544ec1d8057b325318199dff856c39ee86", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462508dd7e13be8c480f49a684d31b19ac972794/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462508dd7e13be8c480f49a684d31b19ac972794/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=462508dd7e13be8c480f49a684d31b19ac972794", "patch": "@@ -1,3 +1,8 @@\n+2005-06-02  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR 21582\n+\t* gcc.dg/tree-ssa/pr21582.c: New test.\n+\n 2005-06-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/21280"}, {"sha": "eee5d94c28d4e5766b12108262759d59cc3cb97e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21582.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462508dd7e13be8c480f49a684d31b19ac972794/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21582.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462508dd7e13be8c480f49a684d31b19ac972794/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21582.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21582.c?ref=462508dd7e13be8c480f49a684d31b19ac972794", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do link }  */\n+/* { dg-options \"-O2 -fdump-tree-vrp\" }  */\n+\n+static inline void do_thing(char *s, int *p, char *q)\n+{\n+  \t/* This should be folded away.  */\n+        if (s == 0 || q == 0)\n+                link_error ();\n+\n+\t/* This should not be folded as 'p' is not marked nonnull.  */\n+\tif (p)\n+\t  \t*p = 3;\n+}\n+\n+void __attribute__((nonnull (1, 3))) do_other_thing(char *s, int *p, char *q)\n+{\n+        do_thing(s, p, q);\n+}\n+\n+int i;\n+\n+main()\n+{\n+  do_other_thing (\"xxx\", &i, \"yyy\");\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Folding predicate p_.*\" 0 \"vrp\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp\" } } */"}, {"sha": "e6087a5967c2df90ae8c0cddff1a2beab4c5b4fa", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462508dd7e13be8c480f49a684d31b19ac972794/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462508dd7e13be8c480f49a684d31b19ac972794/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=462508dd7e13be8c480f49a684d31b19ac972794", "patch": "@@ -165,6 +165,50 @@ expr_computes_nonzero (tree expr)\n }\n \n \n+/* Return true if ARG is marked with the nonnull attribute in the\n+   current function signature.  */\n+\n+static bool\n+nonnull_arg_p (tree arg)\n+{\n+  tree t, attrs, fntype;\n+  unsigned HOST_WIDE_INT arg_num;\n+\n+  gcc_assert (TREE_CODE (arg) == PARM_DECL && POINTER_TYPE_P (TREE_TYPE (arg)));\n+\n+  fntype = TREE_TYPE (current_function_decl);\n+  attrs = lookup_attribute (\"nonnull\", TYPE_ATTRIBUTES (fntype));\n+\n+  /* If \"nonnull\" wasn't specified, we know nothing about the argument.  */\n+  if (attrs == NULL_TREE)\n+    return false;\n+\n+  /* If \"nonnull\" applies to all the arguments, then ARG is non-null.  */\n+  if (TREE_VALUE (attrs) == NULL_TREE)\n+    return true;\n+\n+  /* Get the position number for ARG in the function signature.  */\n+  for (arg_num = 1, t = DECL_ARGUMENTS (current_function_decl);\n+       t;\n+       t = TREE_CHAIN (t), arg_num++)\n+    {\n+      if (t == arg)\n+\tbreak;\n+    }\n+\n+  gcc_assert (t == arg);\n+\n+  /* Now see if ARG_NUM is mentioned in the nonnull list.  */\n+  for (t = TREE_VALUE (attrs); t; t = TREE_CHAIN (t))\n+    {\n+      if (compare_tree_int (TREE_VALUE (t), arg_num) == 0)\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n+\n /* Set value range VR to {T, MIN, MAX, EQUIV}.  */\n \n static void\n@@ -291,7 +335,17 @@ get_value_range (tree var)\n      in VAR's type.  */\n   sym = SSA_NAME_VAR (var);\n   if (var == var_ann (sym)->default_def)\n-    set_value_range_to_varying (vr);\n+    {\n+      /* Try to use the \"nonnull\" attribute to create ~[0, 0]\n+\t anti-ranges for pointers.  Note that this is only valid with\n+\t default definitions of PARM_DECLs.  */\n+      if (TREE_CODE (sym) == PARM_DECL\n+\t  && POINTER_TYPE_P (TREE_TYPE (sym))\n+\t  && nonnull_arg_p (sym))\n+\tset_value_range_to_nonnull (vr, TREE_TYPE (sym));\n+      else\n+\tset_value_range_to_varying (vr);\n+    }\n \n   return vr;\n }"}]}