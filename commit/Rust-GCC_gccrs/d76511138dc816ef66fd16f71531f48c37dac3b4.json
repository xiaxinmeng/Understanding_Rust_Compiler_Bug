{"sha": "d76511138dc816ef66fd16f71531f48c37dac3b4", "node_id": "C_kwDOANBUbNoAKGQ3NjUxMTEzOGRjODE2ZWY2NmZkMTZmNzE1MzFmNDhjMzdkYWMzYjQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-09T08:15:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-09T08:15:28Z"}, "message": "c, c++, c-family: -Wshift-negative-value and -Wshift-overflow* tweaks for -fwrapv and C++20+ [PR104711]\n\nAs mentioned in the PR, different standards have different definition\non what is an UB left shift.  They all agree on out of bounds (including\nnegative) shift count.\nThe rules used by ubsan are:\nC99-C2x ((unsigned) x >> (uprecm1 - y)) != 0 then UB\nC++11-C++17 x < 0 || ((unsigned) x >> (uprecm1 - y)) > 1 then UB\nC++20 and later everything is well defined\nNow, for C++20, I've in the P1236R1 implementation added an early\nexit for -Wshift-overflow* warning so that it never warns, but apparently\n-Wshift-negative-value remained as is.  As it is well defined in C++20,\nthe following patch doesn't enable -Wshift-negative-value from -Wextra\nanymore for C++20 and later, if users want for compatibility with C++17\nand earlier get the warning, they still can by using -Wshift-negative-value\nexplicitly.\nAnother thing is -fwrapv, that is an extension to the standards, so it is up\nto us how exactly we define that case.  Our ubsan code treats\nTYPE_OVERFLOW_WRAPS (type0) and cxx_dialect >= cxx20 the same as only\ndiagnosing out of bounds shift count and nothing else and IMHO it is most\nsensical to treat -fwrapv signed left shifts the same as C++20 treats\nthem, https://eel.is/c++draft/expr.shift#2\n\"The value of E1 << E2 is the unique value congruent to E1\u00d72^E2 modulo 2^N,\nwhere N is the width of the type of the result.\n[Note 1: E1 is left-shifted E2 bit positions; vacated bits are zero-filled.\n\u2014 end note]\"\nwith no UB dependent on the E1 values.  The UB is only\n\"The behavior is undefined if the right operand is negative, or greater\nthan or equal to the width of the promoted left operand.\"\nUnder the hood (except for FEs and ubsan from FEs) GCC middle-end doesn't\nconsider UB in left shifts dependent on the first operand's value, only\nthe out of bounds shifts.\n\nWhile this change isn't a regression, I'd think it is useful for GCC 12,\nit doesn't add new warnings, but just removes warnings that aren't\nappropriate.\n\n2022-03-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/104711\ngcc/\n\t* doc/invoke.texi (-Wextra): Document that -Wshift-negative-value\n\tis enabled by it only for C++11 to C++17 rather than for C++03 or\n\tlater.\n\t(-Wshift-negative-value): Similarly (except here we stated\n\tthat it is enabled for C++11 or later).\ngcc/c-family/\n\t* c-opts.cc (c_common_post_options): Don't enable\n\t-Wshift-negative-value from -Wextra for C++20 or later.\n\t* c-ubsan.cc (ubsan_instrument_shift): Adjust comments.\n\t* c-warn.cc (maybe_warn_shift_overflow): Use TYPE_OVERFLOW_WRAPS\n\tinstead of TYPE_UNSIGNED.\ngcc/c/\n\t* c-fold.cc (c_fully_fold_internal): Don't emit\n\t-Wshift-negative-value warning if TYPE_OVERFLOW_WRAPS.\n\t* c-typeck.cc (build_binary_op): Likewise.\ngcc/cp/\n\t* constexpr.cc (cxx_eval_check_shift_p): Use TYPE_OVERFLOW_WRAPS\n\tinstead of TYPE_UNSIGNED.\n\t* typeck.cc (cp_build_binary_op): Don't emit\n\t-Wshift-negative-value warning if TYPE_OVERFLOW_WRAPS.\ngcc/testsuite/\n\t* c-c++-common/Wshift-negative-value-1.c: Remove\n\tdg-additional-options, instead in target selectors of each diagnostic\n\tcheck for exact C++ versions where it should be diagnosed.\n\t* c-c++-common/Wshift-negative-value-2.c: Likewise.\n\t* c-c++-common/Wshift-negative-value-3.c: Likewise.\n\t* c-c++-common/Wshift-negative-value-4.c: Likewise.\n\t* c-c++-common/Wshift-negative-value-7.c: New test.\n\t* c-c++-common/Wshift-negative-value-8.c: New test.\n\t* c-c++-common/Wshift-negative-value-9.c: New test.\n\t* c-c++-common/Wshift-negative-value-10.c: New test.\n\t* c-c++-common/Wshift-overflow-1.c: Remove\n\tdg-additional-options, instead in target selectors of each diagnostic\n\tcheck for exact C++ versions where it should be diagnosed.\n\t* c-c++-common/Wshift-overflow-2.c: Likewise.\n\t* c-c++-common/Wshift-overflow-5.c: Likewise.\n\t* c-c++-common/Wshift-overflow-6.c: Likewise.\n\t* c-c++-common/Wshift-overflow-7.c: Likewise.\n\t* c-c++-common/Wshift-overflow-8.c: New test.\n\t* c-c++-common/Wshift-overflow-9.c: New test.\n\t* c-c++-common/Wshift-overflow-10.c: New test.\n\t* c-c++-common/Wshift-overflow-11.c: New test.\n\t* c-c++-common/Wshift-overflow-12.c: New test.", "tree": {"sha": "52278f92631188e2f790f3858c83efd8a96998f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52278f92631188e2f790f3858c83efd8a96998f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d76511138dc816ef66fd16f71531f48c37dac3b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d76511138dc816ef66fd16f71531f48c37dac3b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d76511138dc816ef66fd16f71531f48c37dac3b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d76511138dc816ef66fd16f71531f48c37dac3b4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ca24ae5701769fccabf8cca4cad6987cb2187c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ca24ae5701769fccabf8cca4cad6987cb2187c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ca24ae5701769fccabf8cca4cad6987cb2187c6"}], "stats": {"total": 217, "additions": 131, "deletions": 86}, "files": [{"sha": "a341a061758d4ff69abddf2dca4f9f12a53d990b", "filename": "gcc/c-family/c-opts.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Fc-family%2Fc-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Fc-family%2Fc-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.cc?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -934,10 +934,12 @@ c_common_post_options (const char **pfilename)\n   if (warn_shift_overflow == -1)\n     warn_shift_overflow = cxx_dialect >= cxx11 || flag_isoc99;\n \n-  /* -Wshift-negative-value is enabled by -Wextra in C99 and C++11 modes.  */\n+  /* -Wshift-negative-value is enabled by -Wextra in C99 and C++11 to C++17\n+     modes.  */\n   if (warn_shift_negative_value == -1)\n     warn_shift_negative_value = (extra_warnings\n-\t\t\t\t && (cxx_dialect >= cxx11 || flag_isoc99));\n+\t\t\t\t && (cxx_dialect >= cxx11 || flag_isoc99)\n+\t\t\t\t && cxx_dialect < cxx20);\n \n   /* -Wregister is enabled by default in C++17.  */\n   SET_OPTION_IF_UNSET (&global_options, &global_options_set, warn_register,"}, {"sha": "48f948745f8b00c3028f99cdf828f2082d101aca", "filename": "gcc/c-family/c-ubsan.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Fc-family%2Fc-ubsan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Fc-family%2Fc-ubsan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.cc?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -173,7 +173,7 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n       || cxx_dialect >= cxx20)\n     ;\n \n-  /* For signed x << y, in C99/C11, the following:\n+  /* For signed x << y, in C99 and later, the following:\n      (unsigned) x >> (uprecm1 - y)\n      if non-zero, is undefined.  */\n   else if (code == LSHIFT_EXPR && flag_isoc99 && cxx_dialect < cxx11)\n@@ -186,7 +186,7 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n \t\t\tbuild_int_cst (TREE_TYPE (tt), 0));\n     }\n \n-  /* For signed x << y, in C++11 and later, the following:\n+  /* For signed x << y, in C++11 to C++17, the following:\n      x < 0 || ((unsigned) x >> (uprecm1 - y))\n      if > 1, is undefined.  */\n   else if (code == LSHIFT_EXPR && cxx_dialect >= cxx11)"}, {"sha": "9025fc1c20eb6732afb2c7f51d9e58d515bdf96c", "filename": "gcc/c-family/c-warn.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Fc-family%2Fc-warn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Fc-family%2Fc-warn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.cc?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -2605,7 +2605,7 @@ maybe_warn_shift_overflow (location_t loc, tree op0, tree op1)\n   unsigned int prec0 = TYPE_PRECISION (type0);\n \n   /* Left-hand operand must be signed.  */\n-  if (TYPE_UNSIGNED (type0) || cxx_dialect >= cxx20)\n+  if (TYPE_OVERFLOW_WRAPS (type0) || cxx_dialect >= cxx20)\n     return false;\n \n   unsigned int min_prec = (wi::min_precision (wi::to_wide (op0), SIGNED)"}, {"sha": "ac4ceaac2906e2076b7bafa052a5f613f46d54ca", "filename": "gcc/c/c-fold.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Fc%2Fc-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Fc%2Fc-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-fold.cc?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -382,6 +382,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \t  && TREE_CODE (TREE_TYPE (orig_op0)) == INTEGER_TYPE\n \t  && TREE_CODE (op0) == INTEGER_CST\n \t  && c_inhibit_evaluation_warnings == 0\n+\t  && !TYPE_OVERFLOW_WRAPS (TREE_TYPE (orig_op0))\n \t  && tree_int_cst_sgn (op0) < 0)\n \twarning_at (loc, OPT_Wshift_negative_value,\n \t\t    \"left shift of negative value\");"}, {"sha": "b37f3cfcd8be72f9b3df8c9cdf1b0a1613e299cc", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -12213,7 +12213,8 @@ build_binary_op (location_t location, enum tree_code code,\n \t{\n \t  doing_shift = true;\n \t  if (TREE_CODE (op0) == INTEGER_CST\n-\t      && tree_int_cst_sgn (op0) < 0)\n+\t      && tree_int_cst_sgn (op0) < 0\n+\t      && !TYPE_OVERFLOW_WRAPS (type0))\n \t    {\n \t      /* Don't reject a left shift of a negative value in a context\n \t\t where a constant expression is needed in C90.  */"}, {"sha": "388957913bed7220e1b5893faa0be6d239d7d0fa", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -3165,7 +3165,7 @@ cxx_eval_check_shift_p (location_t loc, const constexpr_ctx *ctx,\n      The value of E1 << E2 is the unique value congruent to E1 x 2^E2 modulo\n      2^N, where N is the range exponent of the type of the result.  */\n   if (code == LSHIFT_EXPR\n-      && !TYPE_UNSIGNED (lhstype)\n+      && !TYPE_OVERFLOW_WRAPS (lhstype)\n       && cxx_dialect >= cxx11\n       && cxx_dialect < cxx20)\n     {"}, {"sha": "516fa574ef63525478e2c0a70825c989f70265fa", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -5382,6 +5382,7 @@ cp_build_binary_op (const op_location_t &location,\n \t  doing_shift = true;\n \t  if (TREE_CODE (const_op0) == INTEGER_CST\n \t      && tree_int_cst_sgn (const_op0) < 0\n+\t      && !TYPE_OVERFLOW_WRAPS (type0)\n \t      && (complain & tf_warning)\n \t      && c_inhibit_evaluation_warnings == 0)\n \t    warning_at (location, OPT_Wshift_negative_value,"}, {"sha": "036e1f0c32bc3c92f9b26e302f582eb45cf0ec7f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -5809,7 +5809,7 @@ name is still supported, but the newer name is more descriptive.)\n -Wredundant-move @r{(only for C++)}  @gol\n -Wtype-limits  @gol\n -Wuninitialized  @gol\n--Wshift-negative-value @r{(in C++03 and in C99 and newer)}  @gol\n+-Wshift-negative-value @r{(in C++11 to C++17 and in C99 and newer)}  @gol\n -Wunused-parameter @r{(only with} @option{-Wunused} @r{or} @option{-Wall}@r{)} @gol\n -Wunused-but-set-parameter @r{(only with} @option{-Wunused} @r{or} @option{-Wall}@r{)}}\n \n@@ -6839,7 +6839,7 @@ of the type.  This warning is enabled by default.\n @opindex Wshift-negative-value\n @opindex Wno-shift-negative-value\n Warn if left shifting a negative value.  This warning is enabled by\n-@option{-Wextra} in C99 and C++11 modes (and newer).\n+@option{-Wextra} in C99 (and newer) and C++11 to C++17 modes.\n \n @item -Wno-shift-overflow\n @itemx -Wshift-overflow=@var{n}"}, {"sha": "615020c14b63afa8cead11ebb0085c518e5748cd", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-1.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-1.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -1,13 +1,12 @@\n /* PR c/65179 */\n /* { dg-do compile } */\n /* { dg-options \"-O -Wextra\" } */\n-/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n \n enum E {\n   A = 0 << 1,\n   B = 1 << 1,\n-  C = -1 << 1, /* { dg-warning \"10:left shift of negative value|not an integer constant\" } */\n-  /* { dg-error \"left operand of shift expression\" \"shift\" { target c++ } .-1 } */\n+  C = -1 << 1, /* { dg-warning \"10:left shift of negative value|not an integer constant\" \"\" { target { c || { c++11 && c++17_down } } } } */\n+  /* { dg-error \"left operand of shift expression\" \"shift\" { target { c++11 && c++17_down } } .-1 } */\n   D = 0 >> 1,\n   E = 1 >> 1,\n   F = -1 >> 1\n@@ -23,10 +22,10 @@ left (int x)\n   int r = 0;\n   r += z << x;\n   r += o << x;\n-  r += m << x; /* { dg-warning \"10:left shift of negative value\" } */\n+  r += m << x; /* { dg-warning \"10:left shift of negative value\" \"\" { target { c || { c++11 && c++17_down } } } } */\n   r += 0 << x;\n   r += 1 << x;\n-  r += -1 << x; /* { dg-warning \"11:left shift of negative value\" } */\n+  r += -1 << x; /* { dg-warning \"11:left shift of negative value\" \"\" { target { c || { c++11 && c++17_down } } } } */\n   r += -1U << x;\n   return r;\n }"}, {"sha": "eee414de32b6fc2342d8baf5d95dfda1470ed85d", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-10.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-10.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -0,0 +1,7 @@\n+/* PR c/65179 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wshift-negative-value -fwrapv\" } */\n+/* { dg-additional-options \"-std=c++03\" { target c++ } } */\n+/* { dg-additional-options \"-std=c90\" { target c } } */\n+\n+#include \"Wshift-negative-value-1.c\""}, {"sha": "65e3f30c1372ebe698da98ed5d5fe7dfd7cb8919", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-2.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -1,14 +1,13 @@\n /* PR c/65179 */\n /* { dg-do compile } */\n /* { dg-options \"-O -Wshift-negative-value\" } */\n-/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n \n enum E {\n   A = 0 << 1,\n   B = 1 << 1,\n   C = -1 << 1, /* { dg-warning \"10:left shift of negative value\" } */\n-  /* { dg-error \"not an integer constant\" \"no constant\" { target c++ } .-1 } */\n-  /* { dg-error \"left operand of shift expression\" \"shift\" { target c++ } .-2 } */\n+  /* { dg-error \"not an integer constant\" \"no constant\" { target { c++11 && c++17_down } } .-1 } */\n+  /* { dg-error \"left operand of shift expression\" \"shift\" { target { c++11 && c++17_down } } .-2 } */\n   D = 0 >> 1,\n   E = 1 >> 1,\n   F = -1 >> 1"}, {"sha": "402db9db9c91a6e0ffbe81582db510332400617d", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-3.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-3.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -1,14 +1,13 @@\n /* PR c/65179 */\n /* { dg-do compile } */\n /* { dg-options \"-O -Wextra -Wno-shift-negative-value\" } */\n-/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n \n enum E {\n   A = 0 << 1,\n   B = 1 << 1,\n   C = -1 << 1,\n-  /* { dg-error \"not an integer constant\" \"no constant\" { target c++ } .-1 } */\n-  /* { dg-error \"left operand of shift expression\" \"shift\" { target c++ } .-2 } */\n+  /* { dg-error \"not an integer constant\" \"no constant\" { target { c++11 && c++17_down } } .-1 } */\n+  /* { dg-error \"left operand of shift expression\" \"shift\" { target { c++11 && c++17_down } } .-2 } */\n   D = 0 >> 1,\n   E = 1 >> 1,\n   F = -1 >> 1"}, {"sha": "a47213d81099f0931c5611549f071439906eb48a", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-4.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-4.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -1,14 +1,13 @@\n /* PR c/65179 */\n /* { dg-do compile } */\n /* { dg-options \"-O\" } */\n-/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n \n enum E {\n   A = 0 << 1,\n   B = 1 << 1,\n   C = -1 << 1,\n-  /* { dg-error \"not an integer constant\" \"no constant\" { target c++ } .-1 } */\n-  /* { dg-error \"left operand of shift expression\" \"shift\" { target c++ } .-2 } */\n+  /* { dg-error \"not an integer constant\" \"no constant\" { target { c++11 && c++17_down } } .-1 } */\n+  /* { dg-error \"left operand of shift expression\" \"shift\" { target { c++11 && c++17_down } } .-2 } */\n   D = 0 >> 1,\n   E = 1 >> 1,\n   F = -1 >> 1"}, {"sha": "f58b0f11d0d79263608aeb870543f2df9768f7a5", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-7.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-7.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -0,0 +1,5 @@\n+/* PR c/65179 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wextra -fwrapv\" } */\n+\n+#include \"Wshift-negative-value-1.c\""}, {"sha": "d1e5fe7a2f241006c2a09900c19dc784948acdfe", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-8.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-8.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -0,0 +1,5 @@\n+/* PR c/65179 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wshift-negative-value -fwrapv\" } */\n+\n+#include \"Wshift-negative-value-1.c\""}, {"sha": "3243010be727179d021be321551d6836fad5c99e", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-9.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-9.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -0,0 +1,5 @@\n+/* PR c/65179 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fwrapv\" } */\n+\n+#include \"Wshift-negative-value-1.c\""}, {"sha": "be5535f7c23a0b9066c288ad7c3618a2ffcb31a2", "filename": "gcc/testsuite/c-c++-common/Wshift-overflow-1.c", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-1.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -1,7 +1,6 @@\n /* PR c++/55095 */\n /* { dg-do compile { target int32 } } */\n /* { dg-options \"-O\" } */\n-/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n \n #define INTM1 (sizeof (int) * __CHAR_BIT__ - 1)\n #define INTM2 (sizeof (int) * __CHAR_BIT__ - 2)\n@@ -12,16 +11,16 @@\n #define LONG_LONG_MIN (-__LONG_LONG_MAX__-1)\n \n int i1 = 1 << INTM1;\n-int i2 = 9 << INTM1; /* { dg-warning \"requires 36 bits to represent\" } */\n-int i3 = 10 << INTM2; /* { dg-warning \"requires 35 bits to represent\" } */\n-int i4 = __INT_MAX__ << 2; /* { dg-warning \"requires 34 bits to represent\" } */\n-int i5 = __INT_MAX__ << INTM1; /* { dg-warning \"requires 63 bits to represent\" } */\n+int i2 = 9 << INTM1; /* { dg-warning \"requires 36 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n+int i3 = 10 << INTM2; /* { dg-warning \"requires 35 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n+int i4 = __INT_MAX__ << 2; /* { dg-warning \"requires 34 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n+int i5 = __INT_MAX__ << INTM1; /* { dg-warning \"requires 63 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n int i6 = -1 << INTM1;\n-int i7 = -9 << INTM1; /* { dg-warning \"requires 36 bits to represent\" } */\n-int i8 = -10 << INTM2; /* { dg-warning \"requires 35 bits to represent\" } */\n-int i9 = -__INT_MAX__ << 2; /* { dg-warning \"requires 34 bits to represent\" } */\n-int i10 = -__INT_MAX__ << INTM1; /* { dg-warning \"requires 63 bits to represent\" } */\n-int i11 = INT_MIN << 1; /* { dg-warning \"requires 33 bits to represent\" } */\n+int i7 = -9 << INTM1; /* { dg-warning \"requires 36 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n+int i8 = -10 << INTM2; /* { dg-warning \"requires 35 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n+int i9 = -__INT_MAX__ << 2; /* { dg-warning \"requires 34 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n+int i10 = -__INT_MAX__ << INTM1; /* { dg-warning \"requires 63 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n+int i11 = INT_MIN << 1; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n \n int r1 = 1 >> INTM1;\n int r2 = 9 >> INTM1;\n@@ -35,29 +34,29 @@ int r9 = -__INT_MAX__ >> 2;\n int r10 = -__INT_MAX__ >> INTM1;\n \n unsigned u1 = 1 << INTM1;\n-unsigned u2 = 9 << INTM1; /* { dg-warning \"requires 36 bits to represent\" } */\n+unsigned u2 = 9 << INTM1; /* { dg-warning \"requires 36 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n unsigned u3 = 2U << INTM1;\n unsigned u4 = 9U << INTM1;\n unsigned u5 = 10U << INTM2;\n \n long long int l1 = 1LL << LLONGM1;\n-long long int l2 = 9LL << LLONGM1; /* { dg-warning \"requires 68 bits to represent\" } */\n-long long int l3 = 10LL << LLONGM2; /* { dg-warning \"requires 67 bits to represent\" } */\n-long long int l4 = __LONG_LONG_MAX__ << 2; /* { dg-warning \"requires 66 bits to represent\" } */\n-long long int l5 = __LONG_LONG_MAX__ << LLONGM1; /* { dg-warning \"requires 127 bits to represent\" } */\n+long long int l2 = 9LL << LLONGM1; /* { dg-warning \"requires 68 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n+long long int l3 = 10LL << LLONGM2; /* { dg-warning \"requires 67 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n+long long int l4 = __LONG_LONG_MAX__ << 2; /* { dg-warning \"requires 66 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n+long long int l5 = __LONG_LONG_MAX__ << LLONGM1; /* { dg-warning \"requires 127 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n long long int l6 = -1LL << LLONGM1;\n-long long int l7 = -9LL << LLONGM1; /* { dg-warning \"requires 68 bits to represent\" } */\n-long long int l8 = -10LL << LLONGM2; /* { dg-warning \"requires 67 bits to represent\" } */\n-long long int l9 = -__LONG_LONG_MAX__ << 2; /* { dg-warning \"requires 66 bits to represent\" } */\n-long long int l10 = -__LONG_LONG_MAX__ << LLONGM1; /* { dg-warning \"requires 127 bits to represent\" } */\n-long long int l11 = LONG_LONG_MIN << 1; /* { dg-warning \"requires 65 bits to represent\" } */\n+long long int l7 = -9LL << LLONGM1; /* { dg-warning \"requires 68 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n+long long int l8 = -10LL << LLONGM2; /* { dg-warning \"requires 67 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n+long long int l9 = -__LONG_LONG_MAX__ << 2; /* { dg-warning \"requires 66 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n+long long int l10 = -__LONG_LONG_MAX__ << LLONGM1; /* { dg-warning \"requires 127 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n+long long int l11 = LONG_LONG_MIN << 1; /* { dg-warning \"requires 65 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n \n void\n fn (void)\n {\n   const int a = 10;\n   const __SIZE_TYPE__ b = INTM1;\n-  int k1 = a << b; /* { dg-warning \"requires 36 bits to represent\" } */\n-  int k2 = 10 << b; /* { dg-warning \"requires 36 bits to represent\" } */\n-  int k3 = a << INTM1; /* { dg-warning \"requires 36 bits to represent\" } */\n+  int k1 = a << b; /* { dg-warning \"requires 36 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n+  int k2 = 10 << b; /* { dg-warning \"requires 36 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n+  int k3 = a << INTM1; /* { dg-warning \"requires 36 bits to represent\" \"\" { target { c || { c++11 && c++17_down } } } } */\n }"}, {"sha": "3efd3912d11bf88b7c19952660072cef5066fe58", "filename": "gcc/testsuite/c-c++-common/Wshift-overflow-10.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-10.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -0,0 +1,5 @@\n+/* PR c++/55095 */\n+/* { dg-do compile { target int32 } } */\n+/* { dg-options \"-O -Wshift-overflow=2 -fwrapv\" } */\n+\n+#include \"Wshift-overflow-5.c\""}, {"sha": "9063d80d7e01315d9189a0fc73c2b1529995c36f", "filename": "gcc/testsuite/c-c++-common/Wshift-overflow-11.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-11.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -0,0 +1,5 @@\n+/* PR c++/55095 */\n+/* { dg-do compile { target int32 } } */\n+/* { dg-options \"-Wshift-overflow=1 -fwrapv\" } */\n+\n+#include \"Wshift-overflow-6.c\""}, {"sha": "5c1c42e371201542403d15311b1751963a29c7e5", "filename": "gcc/testsuite/c-c++-common/Wshift-overflow-12.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-12.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -0,0 +1,5 @@\n+/* PR c++/55095 */\n+/* { dg-do compile { target int32 } } */\n+/* { dg-options \"-Wshift-overflow=2 -fwrapv\" } */\n+\n+#include \"Wshift-overflow-7.c\""}, {"sha": "3fc05dc4f805c581c3d439e8313c3dad2369488d", "filename": "gcc/testsuite/c-c++-common/Wshift-overflow-2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-2.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -1,7 +1,6 @@\n /* PR c++/55095 */\n /* { dg-do compile { target int32 } } */\n /* { dg-options \"-O -Wno-shift-overflow\" } */\n-/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n \n #define INTM1 (sizeof (int) * __CHAR_BIT__ - 1)\n #define INTM2 (sizeof (int) * __CHAR_BIT__ - 2)"}, {"sha": "36d617ee254f1d52cffda4248963b9174e1ae89c", "filename": "gcc/testsuite/c-c++-common/Wshift-overflow-5.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-5.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -1,11 +1,10 @@\n /* PR c++/55095 */\n /* { dg-do compile { target int32 } } */\n /* { dg-options \"-O -Wshift-overflow=2\" } */\n-/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n \n #define INTM1 (sizeof (int) * __CHAR_BIT__ - 1)\n #define LLONGM1 (sizeof (long long) * __CHAR_BIT__ - 1)\n \n-int i1 = 1 << INTM1; /* { dg-warning \"requires 33 bits to represent\" } */\n-unsigned u1 = 1 << INTM1; /* { dg-warning \"requires 33 bits to represent\" } */\n-long long int l1 = 1LL << LLONGM1; /* { dg-warning \"requires 65 bits to represent\" } */\n+int i1 = 1 << INTM1; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+unsigned u1 = 1 << INTM1; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+long long int l1 = 1LL << LLONGM1; /* { dg-warning \"requires 65 bits to represent\" \"\" { target { c || c++11_down } } } */"}, {"sha": "c514118573745b816510030e6362396b7de13fef", "filename": "gcc/testsuite/c-c++-common/Wshift-overflow-6.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-6.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -1,7 +1,6 @@\n /* PR c++/55095 */\n /* { dg-do compile { target int32 } } */\n /* { dg-options \"-Wshift-overflow=1\" } */\n-/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n \n int i00 = 0b1 << 31;\n int i01 = 0b10 << 30;\n@@ -34,4 +33,4 @@ int i27 = 0b1000000000000000000000000000 << 4;\n int i28 = 0b10000000000000000000000000000 << 3;\n int i29 = 0b100000000000000000000000000000 << 2;\n int i30 = 0b1000000000000000000000000000000 << 1;\n-int i31 = (int) 0b10000000000000000000000000000000u << 1; /* { dg-warning \"requires 33 bits to represent\" } */\n+int i31 = (int) 0b10000000000000000000000000000000u << 1; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++17_down } } } */"}, {"sha": "2779a15c630aec8bff23f72c4bc53c07e9f619d9", "filename": "gcc/testsuite/c-c++-common/Wshift-overflow-7.c", "status": "modified", "additions": 32, "deletions": 33, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-7.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -1,37 +1,36 @@\n /* PR c++/55095 */\n /* { dg-do compile { target int32 } } */\n /* { dg-options \"-Wshift-overflow=2\" } */\n-/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n \n-int i00 = 0b1 << 31; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i01 = 0b10 << 30; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i02 = 0b100 << 29; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i03 = 0b1000 << 28; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i04 = 0b10000 << 27; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i05 = 0b100000 << 26; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i06 = 0b1000000 << 25; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i07 = 0b10000000 << 24; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i08 = 0b100000000 << 23; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i09 = 0b1000000000 << 22; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i10 = 0b10000000000 << 21; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i11 = 0b100000000000 << 20; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i12 = 0b1000000000000 << 19; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i13 = 0b10000000000000 << 18; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i14 = 0b100000000000000 << 17; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i15 = 0b1000000000000000 << 16; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i16 = 0b10000000000000000 << 15; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i17 = 0b100000000000000000 << 14; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i18 = 0b1000000000000000000 << 13; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i19 = 0b10000000000000000000 << 12; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i20 = 0b100000000000000000000 << 11; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i21 = 0b1000000000000000000000 << 10; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i22 = 0b10000000000000000000000 << 9; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i23 = 0b100000000000000000000000 << 8; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i24 = 0b1000000000000000000000000 << 7; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i25 = 0b10000000000000000000000000 << 6; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i26 = 0b100000000000000000000000000 << 5; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i27 = 0b1000000000000000000000000000 << 4; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i28 = 0b10000000000000000000000000000 << 3; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i29 = 0b100000000000000000000000000000 << 2; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i30 = 0b1000000000000000000000000000000 << 1; /* { dg-warning \"requires 33 bits to represent\" } */\n-int i31 = (int) 0b10000000000000000000000000000000u << 1; /* { dg-warning \"requires 33 bits to represent\" } */\n+int i00 = 0b1 << 31; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i01 = 0b10 << 30; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i02 = 0b100 << 29; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i03 = 0b1000 << 28; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i04 = 0b10000 << 27; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i05 = 0b100000 << 26; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i06 = 0b1000000 << 25; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i07 = 0b10000000 << 24; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i08 = 0b100000000 << 23; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i09 = 0b1000000000 << 22; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i10 = 0b10000000000 << 21; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i11 = 0b100000000000 << 20; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i12 = 0b1000000000000 << 19; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i13 = 0b10000000000000 << 18; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i14 = 0b100000000000000 << 17; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i15 = 0b1000000000000000 << 16; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i16 = 0b10000000000000000 << 15; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i17 = 0b100000000000000000 << 14; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i18 = 0b1000000000000000000 << 13; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i19 = 0b10000000000000000000 << 12; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i20 = 0b100000000000000000000 << 11; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i21 = 0b1000000000000000000000 << 10; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i22 = 0b10000000000000000000000 << 9; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i23 = 0b100000000000000000000000 << 8; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i24 = 0b1000000000000000000000000 << 7; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i25 = 0b10000000000000000000000000 << 6; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i26 = 0b100000000000000000000000000 << 5; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i27 = 0b1000000000000000000000000000 << 4; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i28 = 0b10000000000000000000000000000 << 3; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i29 = 0b100000000000000000000000000000 << 2; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i30 = 0b1000000000000000000000000000000 << 1; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++11_down } } } */\n+int i31 = (int) 0b10000000000000000000000000000000u << 1; /* { dg-warning \"requires 33 bits to represent\" \"\" { target { c || c++17_down } } } */"}, {"sha": "1de228a076330e54967924875a528649e55c4902", "filename": "gcc/testsuite/c-c++-common/Wshift-overflow-8.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-8.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -0,0 +1,5 @@\n+/* PR c++/55095 */\n+/* { dg-do compile { target int32 } } */\n+/* { dg-options \"-O -fwrapv\" } */\n+\n+#include \"Wshift-overflow-1.c\""}, {"sha": "7d84bada3b6d83c07127275836c5c6fd9430077d", "filename": "gcc/testsuite/c-c++-common/Wshift-overflow-9.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76511138dc816ef66fd16f71531f48c37dac3b4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-9.c?ref=d76511138dc816ef66fd16f71531f48c37dac3b4", "patch": "@@ -0,0 +1,7 @@\n+/* PR c++/55095 */\n+/* { dg-do compile { target int32 } } */\n+/* { dg-options \"-O -Wshift-overflow -fwrapv\" } */\n+/* { dg-additional-options \"-std=gnu90\" { target c } } */\n+/* { dg-additional-options \"-std=c++03\" { target c++ } } */\n+\n+#include \"Wshift-overflow-1.c\""}]}