{"sha": "8207e7c604e7473228ea9b846f004b141f008d43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIwN2U3YzYwNGU3NDczMjI4ZWE5Yjg0NmYwMDRiMTQxZjAwOGQ0Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-01-16T14:29:08Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-01-16T14:29:08Z"}, "message": "Minor whitespace changes\n\nFrom-SVN: r39066", "tree": {"sha": "731417bf654a013522422ede429b53f4aeb0cc5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/731417bf654a013522422ede429b53f4aeb0cc5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8207e7c604e7473228ea9b846f004b141f008d43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8207e7c604e7473228ea9b846f004b141f008d43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8207e7c604e7473228ea9b846f004b141f008d43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8207e7c604e7473228ea9b846f004b141f008d43/comments", "author": null, "committer": null, "parents": [{"sha": "0875baa09e1786e1c6d8daaabcb65b8ee6309184", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0875baa09e1786e1c6d8daaabcb65b8ee6309184", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0875baa09e1786e1c6d8daaabcb65b8ee6309184"}], "stats": {"total": 43, "additions": 17, "deletions": 26}, "files": [{"sha": "25d7d3b503f8d28a1177bcdf19361153d8701637", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8207e7c604e7473228ea9b846f004b141f008d43/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8207e7c604e7473228ea9b846f004b141f008d43/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=8207e7c604e7473228ea9b846f004b141f008d43", "patch": "@@ -4695,10 +4695,8 @@ alpha_expand_prologue ()\n \t}\n \n       if (frame_size != 0)\n-\t{\n-\t  FRP (emit_insn (gen_adddi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t      GEN_INT (-frame_size))));\n-\t}\n+\tFRP (emit_insn (gen_adddi3 (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t\t    GEN_INT (-frame_size))));\n     }\n   else\n     {\n@@ -4822,28 +4820,24 @@ alpha_expand_prologue ()\n   if (TARGET_OPEN_VMS)\n     {\n       if (!vms_is_stack_procedure)\n-\t{\n-\t  /* Register frame procedures fave the fp.  */\n-\t  FRP (emit_move_insn (gen_rtx_REG (DImode, vms_save_fp_regno),\n-\t\t\t       hard_frame_pointer_rtx));\n-\t}\n+\t/* Register frame procedures fave the fp.  */\n+\tFRP (emit_move_insn (gen_rtx_REG (DImode, vms_save_fp_regno),\n+\t\t\t     hard_frame_pointer_rtx));\n \n       if (vms_base_regno != REG_PV)\n \tFRP (emit_move_insn (gen_rtx_REG (DImode, vms_base_regno),\n \t\t\t     gen_rtx_REG (DImode, REG_PV)));\n \n       if (vms_unwind_regno == HARD_FRAME_POINTER_REGNUM)\n-\t{\n-\t  FRP (emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx));\n-\t}\n+\tFRP (emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx));\n \n       /* If we have to allocate space for outgoing args, do it now.  */\n       if (current_function_outgoing_args_size != 0)\n-\t{\n-\t  FRP (emit_move_insn (stack_pointer_rtx, \n-\t        plus_constant (hard_frame_pointer_rtx,\n-\t         - ALPHA_ROUND (current_function_outgoing_args_size))));\n-\t}\n+\tFRP (emit_move_insn\n+\t     (stack_pointer_rtx, \n+\t      plus_constant (hard_frame_pointer_rtx,\n+\t\t\t     - (ALPHA_ROUND\n+\t\t\t\t(current_function_outgoing_args_size)))));\n     }\n   else\n     {\n@@ -4853,12 +4847,10 @@ alpha_expand_prologue ()\n \t  if (TARGET_CAN_FAULT_IN_PROLOGUE)\n \t    FRP (emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx));\n \t  else\n-\t    {\n-\t      /* This must always be the last instruction in the\n-\t\t prologue, thus we emit a special move + clobber.  */\n+\t    /* This must always be the last instruction in the\n+\t       prologue, thus we emit a special move + clobber.  */\n \t      FRP (emit_insn (gen_init_fp (hard_frame_pointer_rtx,\n \t\t\t\t           stack_pointer_rtx, sa_reg)));\n-\t    }\n \t}\n     }\n \n@@ -5128,9 +5120,7 @@ alpha_expand_epilogue ()\n       if ((TARGET_OPEN_VMS\n \t   && vms_unwind_regno == HARD_FRAME_POINTER_REGNUM)\n \t  || (!TARGET_OPEN_VMS && frame_pointer_needed))\n-\t{\n-\t  FRP (emit_move_insn (stack_pointer_rtx, hard_frame_pointer_rtx));\n-\t}\n+\tFRP (emit_move_insn (stack_pointer_rtx, hard_frame_pointer_rtx));\n \n       /* Cope with very large offsets to the register save area.  */\n       if (reg_offset + sa_size > 0x8000)\n@@ -5235,7 +5225,7 @@ alpha_expand_epilogue ()\n       if (fp_is_frame_pointer)\n \t{\n \t  emit_insn (gen_blockage ());\n-\t  mem = gen_rtx_MEM (DImode, plus_constant(sa_reg, fp_offset));\n+\t  mem = gen_rtx_MEM (DImode, plus_constant (sa_reg, fp_offset));\n \t  MEM_ALIAS_SET (mem) = alpha_sr_alias_set;\n \t  FRP (emit_move_insn (hard_frame_pointer_rtx, mem));\n \t}"}, {"sha": "3e02f98d5ec684881d07c60eff5c3f4478bc3bf4", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8207e7c604e7473228ea9b846f004b141f008d43/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8207e7c604e7473228ea9b846f004b141f008d43/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=8207e7c604e7473228ea9b846f004b141f008d43", "patch": "@@ -7039,7 +7039,8 @@ keep_stack_depressed (seq)\n \n   /* If the epilogue is just a single instruction, it's OK as is */\n \n-  if (GET_CODE (seq) != SEQUENCE) return;\n+  if (GET_CODE (seq) != SEQUENCE)\n+    return;\n \n   /* Scan all insns in SEQ looking for ones that modified the stack\n      pointer.  Record if it modified the stack pointer by copying it"}]}