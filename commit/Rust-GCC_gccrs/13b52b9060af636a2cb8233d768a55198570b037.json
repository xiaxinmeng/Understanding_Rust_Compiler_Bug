{"sha": "13b52b9060af636a2cb8233d768a55198570b037", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNiNTJiOTA2MGFmNjM2YTJjYjgyMzNkNzY4YTU1MTk4NTcwYjAzNw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-07-29T18:30:27Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-07-29T18:30:27Z"}, "message": "ia64.c (setjmp_operand): Delete, unused.\n\n\t* config/ia64/ia64.c (setjmp_operand): Delete, unused.\n\t(got_symbolic_operand): Remove unreachable code.\n\t* config/ia64/ia64.h (PREDICATE_CODES): Remove entry for\n\tsetjmp_operand; add entry for tls_symbolic_operand.\n\t* config/ia64/ia64-protos.h: Remove all prototypes of\n\tpredicate functions.\n\nFrom-SVN: r85311", "tree": {"sha": "076951f7e32f369ccb99540ea16b945c0cf4c7e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/076951f7e32f369ccb99540ea16b945c0cf4c7e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13b52b9060af636a2cb8233d768a55198570b037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b52b9060af636a2cb8233d768a55198570b037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13b52b9060af636a2cb8233d768a55198570b037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b52b9060af636a2cb8233d768a55198570b037/comments", "author": null, "committer": null, "parents": [{"sha": "f70f3f7e9fbf1c0a770017cf6ba3f05886e62bd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f70f3f7e9fbf1c0a770017cf6ba3f05886e62bd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f70f3f7e9fbf1c0a770017cf6ba3f05886e62bd0"}], "stats": {"total": 119, "additions": 12, "deletions": 107}, "files": [{"sha": "72b7576dbc4a2e24eecb45710fa71cc684d6e369", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b52b9060af636a2cb8233d768a55198570b037/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b52b9060af636a2cb8233d768a55198570b037/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13b52b9060af636a2cb8233d768a55198570b037", "patch": "@@ -1,3 +1,12 @@\n+2004-07-29  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* config/ia64/ia64.c (setjmp_operand): Delete, unused.\n+\t(got_symbolic_operand): Remove unreachable code.\n+\t* config/ia64/ia64.h (PREDICATE_CODES): Remove entry for\n+\tsetjmp_operand; add entry for tls_symbolic_operand.\n+\t* config/ia64/ia64-protos.h: Remove all prototypes of\n+\tpredicate functions.\n+\n 2004-07-29  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-common.h (lang_post_pch_load): New variable.\n@@ -162,7 +171,7 @@\n \t* config/rs6000/darwin.h (BOOL_TYPE_SIZE): Conditionalize on\n \tvalue of darwin_one_byte_bool.\n \t* doc/invoke.texi: Document -mone-byte-bool flag.\n-\t\n+\n 2004-07-28  Eric Christopher  <echristo@redhat.com>\n \n \t* c-common.c (c_common_unsafe_for_reeval): Delete."}, {"sha": "19e1335b17e6277d9e7640ba0cc094e0f2277b51", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b52b9060af636a2cb8233d768a55198570b037/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b52b9060af636a2cb8233d768a55198570b037/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=13b52b9060af636a2cb8233d768a55198570b037", "patch": "@@ -33,47 +33,6 @@ extern int bundling_p;\n extern int ia64_st_address_bypass_p (rtx, rtx);\n extern int ia64_ld_address_bypass_p (rtx, rtx);\n extern int ia64_produce_address_p (rtx);\n-extern int call_operand (rtx, enum machine_mode);\n-extern int sdata_symbolic_operand (rtx, enum machine_mode);\n-extern int got_symbolic_operand (rtx, enum machine_mode);\n-extern int symbolic_operand (rtx, enum machine_mode);\n-extern int tls_symbolic_operand (rtx, enum machine_mode);\n-extern int function_operand (rtx, enum machine_mode);\n-extern int setjmp_operand (rtx, enum machine_mode);\n-extern int move_operand (rtx, enum machine_mode);\n-extern int gr_register_operand (rtx, enum machine_mode);\n-extern int fr_register_operand (rtx, enum machine_mode);\n-extern int grfr_register_operand (rtx, enum machine_mode);\n-extern int gr_nonimmediate_operand (rtx, enum machine_mode);\n-extern int fr_nonimmediate_operand (rtx, enum machine_mode);\n-extern int grfr_nonimmediate_operand (rtx, enum machine_mode);\n-extern int gr_reg_or_0_operand (rtx, enum machine_mode);\n-extern int gr_reg_or_5bit_operand (rtx, enum machine_mode);\n-extern int gr_reg_or_6bit_operand (rtx, enum machine_mode);\n-extern int gr_reg_or_8bit_operand (rtx, enum machine_mode);\n-extern int grfr_reg_or_8bit_operand (rtx, enum machine_mode);\n-extern int gr_reg_or_8bit_adjusted_operand (rtx, enum machine_mode);\n-extern int gr_reg_or_8bit_and_adjusted_operand (rtx, enum machine_mode);\n-extern int gr_reg_or_14bit_operand (rtx, enum machine_mode);\n-extern int gr_reg_or_22bit_operand (rtx, enum machine_mode);\n-extern int shift_count_operand (rtx, enum machine_mode);\n-extern int shift_32bit_count_operand (rtx, enum machine_mode);\n-extern int shladd_operand (rtx, enum machine_mode);\n-extern int fetchadd_operand (rtx, enum machine_mode);\n-extern int fr_reg_or_fp01_operand (rtx, enum machine_mode);\n-extern int normal_comparison_operator (rtx, enum machine_mode);\n-extern int adjusted_comparison_operator (rtx, enum machine_mode);\n-extern int signed_inequality_operator (rtx, enum machine_mode);\n-extern int destination_operand (rtx, enum machine_mode);\n-extern int not_postinc_memory_operand (rtx, enum machine_mode);\n-extern int predicate_operator (rtx, enum machine_mode);\n-extern int ar_lc_reg_operand (rtx, enum machine_mode);\n-extern int ar_ccv_reg_operand (rtx, enum machine_mode);\n-extern int ar_pfs_reg_operand (rtx, enum machine_mode);\n-extern int general_xfmode_operand (rtx, enum machine_mode);\n-extern int destination_xfmode_operand (rtx, enum machine_mode);\n-extern int xfreg_or_fp01_operand (rtx, enum machine_mode);\n-extern int basereg_operand (rtx, enum machine_mode);\n \n extern rtx ia64_expand_move (rtx, rtx);\n extern int ia64_move_ok (rtx, rtx);"}, {"sha": "1053447b49968c1957cfb467bb9edb314ef9ef27", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 64, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b52b9060af636a2cb8233d768a55198570b037/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b52b9060af636a2cb8233d768a55198570b037/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=13b52b9060af636a2cb8233d768a55198570b037", "patch": "@@ -479,22 +479,7 @@ got_symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n       op = XEXP (op, 1);\n       if (GET_CODE (op) != CONST_INT)\n \treturn 0;\n-\n-\treturn 1;\n-\n-      /* Ok if we're not using GOT entries at all.  */\n-      if (TARGET_NO_PIC || TARGET_AUTO_PIC)\n-\treturn 1;\n-\n-      /* \"Ok\" while emitting rtl, since otherwise we won't be provided\n-\t with the entire offset during emission, which makes it very\n-\t hard to split the offset into high and low parts.  */\n-      if (currently_expanding_to_rtl)\n-\treturn 1;\n-\n-      /* Force the low 14 bits of the constant to zero so that we do not\n-\t use up so many GOT entries.  */\n-      return (INTVAL (op) & 0x3fff) == 0;\n+      return 1;\n \n     case SYMBOL_REF:\n       if (SYMBOL_REF_SMALL_ADDR_P (op))\n@@ -548,54 +533,6 @@ function_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n     return 0;\n }\n \n-/* Return 1 if OP is setjmp or a similar function.  */\n-\n-/* ??? This is an unsatisfying solution.  Should rethink.  */\n-\n-int\n-setjmp_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  const char *name;\n-  int retval = 0;\n-\n-  if (GET_CODE (op) != SYMBOL_REF)\n-    return 0;\n-\n-  name = XSTR (op, 0);\n-\n-  /* The following code is borrowed from special_function_p in calls.c.  */\n-\n-  /* Disregard prefix _, __ or __x.  */\n-  if (name[0] == '_')\n-    {\n-      if (name[1] == '_' && name[2] == 'x')\n-\tname += 3;\n-      else if (name[1] == '_')\n-\tname += 2;\n-      else\n-\tname += 1;\n-    }\n-\n-  if (name[0] == 's')\n-    {\n-      retval\n-\t= ((name[1] == 'e'\n-\t    && (! strcmp (name, \"setjmp\")\n-\t\t|| ! strcmp (name, \"setjmp_syscall\")))\n-\t   || (name[1] == 'i'\n-\t       && ! strcmp (name, \"sigsetjmp\"))\n-\t   || (name[1] == 'a'\n-\t       && ! strcmp (name, \"savectx\")));\n-    }\n-  else if ((name[0] == 'q' && name[1] == 's'\n-\t    && ! strcmp (name, \"qsetjmp\"))\n-\t   || (name[0] == 'v' && name[1] == 'f'\n-\t       && ! strcmp (name, \"vfork\")))\n-    retval = 1;\n-\n-  return retval;\n-}\n-\n /* Return 1 if OP is a general operand, excluding tls symbolic operands.  */\n \n int"}, {"sha": "96b559b4d12b73cb7c6f81c2fcf22d482b85ccee", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b52b9060af636a2cb8233d768a55198570b037/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b52b9060af636a2cb8233d768a55198570b037/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=13b52b9060af636a2cb8233d768a55198570b037", "patch": "@@ -2150,8 +2150,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n { \"sdata_symbolic_operand\", {SYMBOL_REF, CONST}},\t\t\t\\\n { \"small_addr_symbolic_operand\", {SYMBOL_REF}},\t\t\t\t\\\n { \"symbolic_operand\", {SYMBOL_REF, CONST, LABEL_REF}},\t\t\t\\\n+{ \"tls_symbolic_operand\", {SYMBOL_REF}},\t\t\t\t\\\n { \"function_operand\", {SYMBOL_REF}},\t\t\t\t\t\\\n-{ \"setjmp_operand\", {SYMBOL_REF}},\t\t\t\t\t\\\n { \"destination_operand\", {SUBREG, REG, MEM}},\t\t\t\t\\\n { \"not_postinc_memory_operand\", {MEM}},\t\t\t\t\t\\\n { \"move_operand\", {SUBREG, REG, MEM, CONST_INT, CONST_DOUBLE,\t\t\\"}]}