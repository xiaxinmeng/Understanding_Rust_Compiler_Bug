{"sha": "fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIxZmRmN2Q2YmJjYjQ3MjhjMTNkMTQ5ODdhY2ZhOTdiMWNkYTAzZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-21T16:22:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-21T16:22:17Z"}, "message": "[multiple changes]\n\n2014-01-21  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_pakd.adb: Update comment, minor reformatting.\n\n2014-01-21  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Variable_Contract): Trigger the volatile\n\tobject check when SPARK_Mode is on.\n\t* sem_ch6.adb (Process_Formals): Trigger the volatile object\n\tcheck when SPARK_Mode is on.\n\t* sem_ch12.adb (Instantiate_Object): Trigger the volatile object\n\tcheck when SPARK_Mode is on.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Insert the\n\tcorresponding pragma of aspect SPARK_Mode in the visible\n\tdeclarations of a package declaration.\n\t* sem_prag.adb (Analyze_Pragma): Trigger the volatile object\n\tcheck when SPARK_Mode is on.\n\t* sem_res.adb (Resolve_Actuals): Trigger the volatile object\n\tcheck when SPARK_Mode is on.\n\t(Resolve_Entity_Name): Trigger\n\tthe volatile object check when SPARK_Mode is on.\n\n2014-01-21  Robert Dewar  <dewar@adacore.com>\n\n\t* a-except-2005.adb: Minor reformatting\n\nFrom-SVN: r206888", "tree": {"sha": "8e1e1ceab8a196ae569b6159a72727a0e4c3b46e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e1e1ceab8a196ae569b6159a72727a0e4c3b46e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/comments", "author": null, "committer": null, "parents": [{"sha": "84f80f5bf11215999e2e5461bcdd8a2adae2c127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f80f5bf11215999e2e5461bcdd8a2adae2c127", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84f80f5bf11215999e2e5461bcdd8a2adae2c127"}], "stats": {"total": 197, "additions": 113, "deletions": 84}, "files": [{"sha": "fccd69222c148addca3dc6c33d6477af51c79fae", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d", "patch": "@@ -1,3 +1,25 @@\n+2014-01-21  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_pakd.adb: Update comment, minor reformatting.\n+\n+2014-01-21  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Variable_Contract): Trigger the volatile\n+\tobject check when SPARK_Mode is on.\n+\t* sem_ch6.adb (Process_Formals): Trigger the volatile object\n+\tcheck when SPARK_Mode is on.\n+\t* sem_ch12.adb (Instantiate_Object): Trigger the volatile object\n+\tcheck when SPARK_Mode is on.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Insert the\n+\tcorresponding pragma of aspect SPARK_Mode in the visible\n+\tdeclarations of a package declaration.\n+\t* sem_prag.adb (Analyze_Pragma): Trigger the volatile object\n+\tcheck when SPARK_Mode is on.\n+\t* sem_res.adb (Resolve_Actuals): Trigger the volatile object\n+\tcheck when SPARK_Mode is on.\n+\t(Resolve_Entity_Name): Trigger\n+\tthe volatile object check when SPARK_Mode is on.\n+\n 2014-01-21  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, sem_prag.adb, sem_prag.ads, sem_ch12.adb, sem_res.adb,"}, {"sha": "9d6354cadf7dcced7250758c6c5f01db2a9a6033", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 35, "deletions": 42, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d", "patch": "@@ -315,12 +315,9 @@ package body Ada.Exceptions is\n    --  occurrence and in addition a column and a string message M may be\n    --  appended to this (if not null/0).\n \n-   procedure Raise_Constraint_Error\n-     (File : System.Address;\n-      Line : Integer);\n+   procedure Raise_Constraint_Error (File : System.Address; Line : Integer);\n    pragma No_Return (Raise_Constraint_Error);\n-   pragma Export\n-     (C, Raise_Constraint_Error, \"__gnat_raise_constraint_error\");\n+   pragma Export (C, Raise_Constraint_Error, \"__gnat_raise_constraint_error\");\n    --  Raise constraint error with file:line information\n \n    procedure Raise_Constraint_Error_Msg\n@@ -333,12 +330,9 @@ package body Ada.Exceptions is\n      (C, Raise_Constraint_Error_Msg, \"__gnat_raise_constraint_error_msg\");\n    --  Raise constraint error with file:line:col + msg information\n \n-   procedure Raise_Program_Error\n-     (File : System.Address;\n-      Line : Integer);\n+   procedure Raise_Program_Error (File : System.Address; Line : Integer);\n    pragma No_Return (Raise_Program_Error);\n-   pragma Export\n-     (C, Raise_Program_Error, \"__gnat_raise_program_error\");\n+   pragma Export (C, Raise_Program_Error, \"__gnat_raise_program_error\");\n    --  Raise program error with file:line information\n \n    procedure Raise_Program_Error_Msg\n@@ -350,12 +344,9 @@ package body Ada.Exceptions is\n      (C, Raise_Program_Error_Msg, \"__gnat_raise_program_error_msg\");\n    --  Raise program error with file:line + msg information\n \n-   procedure Raise_Storage_Error\n-     (File : System.Address;\n-      Line : Integer);\n+   procedure Raise_Storage_Error (File : System.Address; Line : Integer);\n    pragma No_Return (Raise_Storage_Error);\n-   pragma Export\n-     (C, Raise_Storage_Error, \"__gnat_raise_storage_error\");\n+   pragma Export (C, Raise_Storage_Error, \"__gnat_raise_storage_error\");\n    --  Raise storage error with file:line information\n \n    procedure Raise_Storage_Error_Msg\n@@ -372,10 +363,10 @@ package body Ada.Exceptions is\n    --  graph below illustrates the relations between the Raise_ subprograms\n    --  and identifies the points where basic flags such as Exception_Raised\n    --  are initialized.\n-   --\n+\n    --  (i) signs indicate the flags initialization points. R stands for Raise,\n    --  W for With, and E for Exception.\n-   --\n+\n    --                   R_No_Msg    R_E   R_Pe  R_Ce  R_Se\n    --                       |        |     |     |     |\n    --                       +--+  +--+     +---+ | +---+\n@@ -391,10 +382,10 @@ package body Ada.Exceptions is\n    procedure Reraise;\n    pragma No_Return (Reraise);\n    pragma Export (C, Reraise, \"__gnat_reraise\");\n-   --  Reraises the exception referenced by the Current_Excep field of\n-   --  the TSD (all fields of this exception occurrence are set). Abort\n-   --  is deferred before the reraise operation.\n-   --  Called from System.Tasking.RendezVous.Exceptional_Complete_RendezVous\n+   --  Reraises the exception referenced by the Current_Excep field\n+   --  of the TSD (all fields of this exception occurrence are set).\n+   --  Abort is deferred before the reraise operation. Called from\n+   --  System.Tasking.RendezVous.Exceptional_Complete_RendezVous\n \n    procedure Transfer_Occurrence\n      (Target : Exception_Occurrence_Access;\n@@ -774,9 +765,9 @@ package body Ada.Exceptions is\n    begin\n       if X.Id = Null_Id then\n          raise Constraint_Error;\n+      else\n+         return Exception_Data.Exception_Information (X);\n       end if;\n-\n-      return Exception_Data.Exception_Information (X);\n    end Exception_Information;\n \n    -----------------------\n@@ -787,9 +778,9 @@ package body Ada.Exceptions is\n    begin\n       if X.Id = Null_Id then\n          raise Constraint_Error;\n+      else\n+         return X.Msg (1 .. X.Msg_Length);\n       end if;\n-\n-      return X.Msg (1 .. X.Msg_Length);\n    end Exception_Message;\n \n    --------------------\n@@ -800,9 +791,9 @@ package body Ada.Exceptions is\n    begin\n       if Id = null then\n          raise Constraint_Error;\n+      else\n+         return To_Ptr (Id.Full_Name) (1 .. Id.Name_Length - 1);\n       end if;\n-\n-      return To_Ptr (Id.Full_Name) (1 .. Id.Name_Length - 1);\n    end Exception_Name;\n \n    function Exception_Name (X : Exception_Occurrence) return String is\n@@ -839,8 +830,8 @@ package body Ada.Exceptions is\n    --------------------\n \n    package body Exception_Data is separate;\n-   --  This package can be easily dummied out if we do not want the\n-   --  basic support for exception messages (such as in Ada 83).\n+   --  This package can be easily dummied out if we do not want the basic\n+   --  support for exception messages (such as in Ada 83).\n \n    ---------------------------\n    -- Exception_Propagation --\n@@ -856,10 +847,10 @@ package body Ada.Exceptions is\n    ----------------------\n \n    package body Exception_Traces is separate;\n-   --  Depending on the underlying support for IO the implementation\n-   --  will differ. Moreover we would like to dummy out this package\n-   --  in case we do not want any exception tracing support. This is\n-   --  why this package is separated.\n+   --  Depending on the underlying support for IO the implementation will\n+   --  differ. Moreover we would like to dummy out this package in case we\n+   --  do not want any exception tracing support. This is why this package\n+   --  is separated.\n \n    --------------------------------------\n    -- Get_Exception_Machine_Occurrence --\n@@ -1011,6 +1002,7 @@ package body Ada.Exceptions is\n       Message : String := \"\")\n    is\n       X : constant EOA := Exception_Propagation.Allocate_Occurrence;\n+\n    begin\n       Exception_Data.Set_Exception_Msg (X, E, Message);\n \n@@ -1029,10 +1021,11 @@ package body Ada.Exceptions is\n       Prefix             : constant String := \"adjust/finalize raised \";\n       Orig_Msg           : constant String := Exception_Message (X);\n       Orig_Prefix_Length : constant Natural :=\n-        Integer'Min (Prefix'Length, Orig_Msg'Length);\n-      Orig_Prefix        : String renames Orig_Msg\n-        (Orig_Msg'First ..\n-         Orig_Msg'First + Orig_Prefix_Length - 1);\n+                             Integer'Min (Prefix'Length, Orig_Msg'Length);\n+\n+      Orig_Prefix : String renames\n+        Orig_Msg (Orig_Msg'First .. Orig_Msg'First + Orig_Prefix_Length - 1);\n+\n    begin\n       --  Message already has the proper prefix, just re-raise\n \n@@ -1526,6 +1519,7 @@ package body Ada.Exceptions is\n    procedure Reraise is\n       Excep    : constant EOA := Exception_Propagation.Allocate_Occurrence;\n       Saved_MO : constant System.Address := Excep.Machine_Occurrence;\n+\n    begin\n       if not ZCX_By_Default then\n          Abort_Defer.all;\n@@ -1542,9 +1536,11 @@ package body Ada.Exceptions is\n \n    procedure Reraise_Library_Exception_If_Any is\n       LE : Exception_Occurrence;\n+\n    begin\n       if Library_Exception_Set then\n          LE := Library_Exception;\n+\n          if LE.Id = Null_Id then\n             Raise_Exception_No_Defer\n               (E       => Program_Error'Identity,\n@@ -1563,9 +1559,9 @@ package body Ada.Exceptions is\n    begin\n       if X.Id = null then\n          return;\n+      else\n+         Reraise_Occurrence_Always (X);\n       end if;\n-\n-      Reraise_Occurrence_Always (X);\n    end Reraise_Occurrence;\n \n    -------------------------------\n@@ -1646,10 +1642,8 @@ package body Ada.Exceptions is\n \n    procedure To_Stderr (C : Character) is\n       type int is new Integer;\n-\n       procedure put_char_stderr (C : int);\n       pragma Import (C, put_char_stderr, \"put_char_stderr\");\n-\n    begin\n       put_char_stderr (Character'Pos (C));\n    end To_Stderr;\n@@ -1681,7 +1675,6 @@ package body Ada.Exceptions is\n \n    function Triggered_By_Abort return Boolean is\n       Ex : constant Exception_Occurrence_Access := Get_Current_Excep.all;\n-\n    begin\n       return Ex /= null\n         and then Exception_Identity (Ex.all) = Standard'Abort_Signal'Identity;"}, {"sha": "601030c36714907b7db27688adf9835412febd12", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d", "patch": "@@ -1127,7 +1127,7 @@ package body Exp_Pakd is\n \n       --  The name of the packed array subtype is\n \n-      --    ttt___Xsss\n+      --    ttt___XPsss\n \n       --  where sss is the component size in bits and ttt is the name of\n       --  the parent packed type.\n@@ -1565,7 +1565,7 @@ package body Exp_Pakd is\n          declare\n             T : constant Entity_Id := Etype (Obj);\n          begin\n-            New_Lhs := Duplicate_Subexpr (Obj, True);\n+            New_Lhs := Duplicate_Subexpr (Obj, Name_Req => True);\n             New_Rhs := Duplicate_Subexpr_No_Checks (Obj);\n             Set_Etype (Obj, T);\n             Set_Etype (New_Lhs, T);"}, {"sha": "b59c895744ca2d97af0237126301c031588358b9", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d", "patch": "@@ -9840,17 +9840,14 @@ package body Sem_Ch12 is\n            (\"actual must exclude null to match generic formal#\", Actual);\n       end if;\n \n-      --  The following check is only relevant in formal verification mode as\n-      --  it is not a standard Ada legality rule. A volatile object cannot be\n-      --  used as an actual in a generic instantiation.\n+      --  A volatile object cannot be used as an actual in a generic instance.\n+      --  The following check is only relevant when SPARK_Mode is on as it is\n+      --  not a standard Ada legality rule.\n \n-      --  Should mention that this is a rule for SPARK only, perhaps with\n-      --  a SPARK RM reference???\n-\n-      if GNATprove_Mode and then Is_Volatile_Object (Actual) then\n+      if SPARK_Mode = On and then Is_Volatile_Object (Actual) then\n          Error_Msg_N\n-           (\"volatile object cannot act as actual in generic instantiation\",\n-            Actual);\n+           (\"volatile object cannot act as actual in generic instantiation \"\n+            & \"(SPARK RM 7.1.3(4))\", Actual);\n       end if;\n \n       return List;"}, {"sha": "736a8ae44a305e6e55e1b7122832de0023cf37b4", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d", "patch": "@@ -2155,6 +2155,22 @@ package body Sem_Ch13 is\n                         Set_Declarations (N, Decls);\n                      end if;\n \n+                     Prepend_To (Decls, Aitem);\n+                     goto Continue;\n+\n+                  --  When the aspect is associated with package declaration,\n+                  --  insert the generated pragma at the top of the visible\n+                  --  declarations to emulate the behavior of a source pragma.\n+\n+                  elsif Nkind (N) = N_Package_Declaration then\n+                     Decorate_Delayed_Aspect_And_Pragma (Aspect, Aitem);\n+                     Decls := Visible_Declarations (Specification (N));\n+\n+                     if No (Decls) then\n+                        Decls := New_List;\n+                        Set_Visible_Declarations (Specification (N), Decls);\n+                     end if;\n+\n                      Prepend_To (Decls, Aitem);\n                      goto Continue;\n                   end if;"}, {"sha": "5d2771008804a92236cd0ef5c68252a4c513cd49", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d", "patch": "@@ -4801,16 +4801,17 @@ package body Sem_Ch3 is\n       Seen   : Boolean := False;\n \n    begin\n-      --  The following check is only relevant in formal verification mode as\n-      --  it is not standard Ada legality rule. The declaration of a volatile\n-      --  variable must appear at the library level.\n+      --  The declaration of a volatile variable must appear at the library\n+      --  level. The check is only relevant when SPARK_Mode is on as it is not\n+      --  standard Ada legality rule.\n \n-      if GNATprove_Mode\n+      if SPARK_Mode = On\n         and then Is_Volatile_Object (Var_Id)\n         and then not Is_Library_Level_Entity (Var_Id)\n       then\n          Error_Msg_N\n-           (\"volatile variable & must be declared at library level\", Var_Id);\n+           (\"volatile variable & must be declared at library level (SPARK RM \"\n+            & \"7.1.3(3))\", Var_Id);\n       end if;\n \n       --  Examine the contract"}, {"sha": "7cde5136b4cf85da37d3002a1a0680d6fd16d81e", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d", "patch": "@@ -11117,18 +11117,17 @@ package body Sem_Ch6 is\n             Null_Exclusion_Static_Checks (Param_Spec);\n          end if;\n \n-         --  The following check is only relevant in formal verification mode\n-         --  as it is not a standard Ada legality rule. A function cannot have\n-         --  a volatile formal parameter.\n+         --  A function cannot have a volatile formal parameter. The following\n+         --  check is relevant when SPARK_Mode is on as it is not a standard\n+         --  Ada legality rule.\n \n-         --  Need to mention this is a SPARK rule, with SPARK RM reference ???\n-\n-         if GNATprove_Mode\n+         if SPARK_Mode = On\n            and then Is_Volatile_Object (Formal)\n            and then Ekind_In (Scope (Formal), E_Function, E_Generic_Function)\n          then\n             Error_Msg_N\n-              (\"function cannot have a volatile formal parameter\", Formal);\n+              (\"function cannot have a volatile formal parameter (SPARK RM \"\n+               & \"7.1.3(6))\", Formal);\n          end if;\n \n       <<Continue>>"}, {"sha": "e533d26be41b27fad6f1d67e43aeb93076b95be3", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d", "patch": "@@ -1877,14 +1877,17 @@ package body Sem_Prag is\n                Check_Mode_Restriction_In_Enclosing_Context (Item, Item_Id);\n             end if;\n \n-            --  A volatile object cannot appear as a global item of a function\n+            --  A volatile object cannot appear as a global item of a function.\n+            --  This check is only relevant when SPARK_Mode is on as it is not\n+            --  a standard Ada legality rule.\n \n-            if Is_Volatile_Object (Item)\n+            if SPARK_Mode = On\n+              and then Is_Volatile_Object (Item)\n               and then Ekind_In (Spec_Id, E_Function, E_Generic_Function)\n             then\n                Error_Msg_N\n-                 (\"volatile object cannot act as global item of a function\",\n-                  Item);\n+                 (\"volatile object cannot act as global item of a function \"\n+                  & \"(SPARK RM 7.1.3(5))\", Item);\n             end if;\n \n             --  The same entity might be referenced through various way. Check"}, {"sha": "c42a7fa3cbd9fb40bf4c4642bb99e43bf19e79a1", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=fb1fdf7d6bbcb4728c13d14987acfa97b1cda03d", "patch": "@@ -4249,10 +4249,10 @@ package body Sem_Res is\n                Check_Unset_Reference (A);\n             end if;\n \n-            --  The following checks are only relevant in formal verification\n-            --  mode as they are not standard Ada legality rule.\n+            --  The following checks are only relevant when SPARK_Mode is on as\n+            --  they are not standard Ada legality rule.\n \n-            if GNATprove_Mode\n+            if SPARK_Mode = On\n               and then Is_Volatile_Object (A)\n             then\n                --  A volatile object may act as an actual parameter when the\n@@ -4270,11 +4270,9 @@ package body Sem_Res is\n                   null;\n \n                else\n-                  --  Error message should mention SPARK, and perhaps give\n-                  --  a SPARK RM reference ???\n-\n                   Error_Msg_N\n-                    (\"volatile object cannot act as actual in a call\", A);\n+                    (\"volatile object cannot act as actual in a call (SPARK \"\n+                     & \"RM 7.1.3(8))\", A);\n                end if;\n             end if;\n \n@@ -6459,12 +6457,12 @@ package body Sem_Res is\n          Eval_Entity_Name (N);\n       end if;\n \n-      --  The following checks are only relevant in formal verification mode as\n-      --  they are not standard Ada legality rule. A volatile object subject to\n-      --  enabled properties Async_Writers or Effective_Reads must appear in a\n-      --  specific context.\n+      --  A volatile object subject to enabled properties Async_Writers or\n+      --  Effective_Reads must appear in a specific context. The following\n+      --  checks are only relevant when SPARK_Mode is on as they are not\n+      --  standard Ada legality rules.\n \n-      if GNATprove_Mode\n+      if SPARK_Mode = On\n         and then Ekind (E) = E_Variable\n         and then Is_Volatile_Object (E)\n         and then\n@@ -6520,10 +6518,10 @@ package body Sem_Res is\n             Par  := Parent (Par);\n          end loop;\n \n-         --  Message should mention SPARK, and perhaps SPARK RM ref ???\n-\n          if not Usage_OK then\n-            Error_Msg_N (\"volatile object cannot appear in this context\", N);\n+            Error_Msg_N\n+              (\"volatile object cannot appear in this context (SPARK RM \"\n+               & \"7.1.3(9))\", N);\n          end if;\n       end if;\n    end Resolve_Entity_Name;"}]}