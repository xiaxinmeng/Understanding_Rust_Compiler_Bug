{"sha": "812398e4cfcb5ee641dbf8f8702d02c3eb026012", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEyMzk4ZTRjZmNiNWVlNjQxZGJmOGY4NzAyZDAyYzNlYjAyNjAxMg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain.sandoe@sandoe-acoustics.co.uk", "date": "2010-03-25T22:25:05Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2010-03-25T22:25:05Z"}, "message": "re PR objc/35165 (Massive failures of objc on i686-apple-darwin9)\n\n2010-03-25  Iain Sandoe  <iain.sandoe@sandoe-acoustics.co.uk>\n\n\tPR objc/35165\n\tPR testsuite/43512\n\t* objc-obj-c++-shared: New directory.\n\t* objc-obj-c++-shared/Object1-implementation.h: New file.\n\t* objc-obj-c++-shared/Object1.h: New file.\n\t* objc-obj-c++-shared/Protocol1.h: New file.\n\t* objc-obj-c++-shared/next-abi.h: New file.\n\t* objc-obj-c++-shared/next-mapping.h: New file.\n\t* objc/execute/next_mapping.h: Delete.\n\t* objc.dg/special/special.exp: For all targets run the tests with\n\t-fgnu-runtime, for darwin targets also run the tests with \n\t-fnext-runtime.\n\t* objc.dg/dg.exp: Ditto.\n\t* obj-c++.dg/dg.exp: Ditto.\n\t* objc/execute/forward-1.m: Use shared wrapper headers (Object1.h,\n\tProtocol1.h) and next-mapping.h as required.  Amend testcase to\n\tinclude use of updated NeXT interface.\n\t* objc/execute/formal_protocol-5.m: Ditto.\n\t* objc/execute/protocol-isEqual-2.m: Ditto.\n\t* objc/execute/protocol-isEqual-4.m: Ditto.\t\n\t* objc/execute/class-11.m: Use shared wrapper headers (Object1.h,\n\tProtocol1.h) and next-mapping.h as required.\n\t* objc/execute/object_is_class.m: Ditto.\n\t* objc/execute/enumeration-1.m: Ditto.\n\t* objc/execute/class-13.m: Ditto.\n\t* objc/execute/formal_protocol-2.m: Ditto.\n\t* objc/execute/formal_protocol-4.m: Ditto.\n\t* objc/execute/class-1.m: Ditto.\n\t* objc/execute/bycopy-1.m: Ditto.\n\t* objc/execute/formal_protocol-6.m: Ditto.\n\t* objc/execute/bycopy-3.m: Ditto.\n\t* objc/execute/class-3.m: Ditto.\n\t* objc/execute/bf-11.m: Ditto.\n\t* objc/execute/class-5.m: Ditto.\n\t* objc/execute/bf-13.m: Ditto.\n\t* objc/execute/class-7.m: Ditto.\n\t* objc/execute/bf-15.m: Ditto.\n\t* objc/execute/class-9.m: Ditto.\n\t* objc/execute/bf-17.m: Ditto.\n\t* objc/execute/bf-19.m: Ditto.\n\t* objc/execute/IMP.m: Ditto.\n\t* objc/execute/exceptions/catchall-1.m: Ditto.\n\t* objc/execute/exceptions/trivial.m: Ditto.\n\t* objc/execute/exceptions/finally-1.m: Ditto.\n\t* objc/execute/exceptions/local-variables-1.m: Ditto.\n\t* objc/execute/exceptions/foward-1.m: Ditto.\n\t* objc/execute/bf-2.m: Ditto.\n\t* objc/execute/string1.m: Ditto.\n\t* objc/execute/bf-4.m: Ditto.\n\t* objc/execute/informal_protocol.m: Ditto.\n\t* objc/execute/string3.m: Ditto.\n\t* objc/execute/bf-6.m: Ditto.\n\t* objc/execute/bf-8.m: Ditto.\n\t* objc/execute/class-tests-1.h: Ditto.\n\t* objc/execute/protocol-isEqual-1.m: Ditto.\n\t* objc/execute/protocol-isEqual-3.m: Ditto.\n\t* objc/execute/_cmd.m: Ditto.\n\t* objc/execute/function-message-1.m: Ditto.\n\t* objc/execute/bf-20.m: Ditto.\n\t* objc/execute/bf-common.h: Ditto.\n\t* objc/execute/np-2.m: Ditto.\n\t* objc/execute/class-10.m: Ditto.\n\t* objc/execute/class-12.m: Ditto.\n\t* objc/execute/enumeration-2.m: Ditto.\n\t* objc/execute/class-14.m: Ditto.\n\t* objc/execute/encode-1.m: Ditto.\n\t* objc/execute/formal_protocol-1.m: Ditto.\n\t* objc/execute/formal_protocol-3.m: Ditto.\n\t* objc/execute/accessing_ivars.m: Ditto.\n\t* objc/execute/bycopy-2.m: Ditto.\n\t* objc/execute/class-2.m: Ditto.\n\t* objc/execute/bf-10.m: Ditto.\n\t* objc/execute/formal_protocol-7.m: Ditto.\n\t* objc/execute/root_methods.m: Ditto.\n\t* objc/execute/class-4.m: Ditto.\n\t* objc/execute/bf-12.m: Ditto.\n\t* objc/execute/class-6.m: Ditto.\n\t* objc/execute/bf-14.m: Ditto.\n\t* objc/execute/nested-func-1.m: Ditto.\n\t* objc/execute/class-8.m: Ditto.\n\t* objc/execute/private.m: Ditto.\n\t* objc/execute/bf-16.m: Ditto.\n\t* objc/execute/bf-18.m: Ditto.\n\t* objc/execute/load-3.m: Ditto.\n\t* objc/execute/compatibility_alias.m: Ditto.\n\t* objc/execute/bf-1.m: Ditto.\n\t* objc/execute/no_clash.m: Ditto.\n\t* objc/execute/bf-3.m: Ditto.\n\t* objc/execute/string2.m: Ditto.\n\t* objc/execute/bf-5.m: Ditto.\n\t* objc/execute/string4.m: Ditto.\n\t* objc/execute/bf-7.m: Ditto.\n\t* objc/execute/object_is_meta_class.m: Ditto.\n\t* objc/execute/bf-9.m: Ditto.\n\t* objc/execute/bf-21.m: Ditto.\n\t* objc/execute/cascading-1.m: Ditto.\n\t* objc/execute/trivial.m: Ditto.\n\t* objc/execute/np-1.m: Ditto.\n\t* objc/compile/trivial.m: Ditto.\n\t* objc/execute/class_self-2.m: Include <stdlib.h>.\n\t* objc/execute/forward-1.x: Do not XFAIL for 32bit powerpc-darwin.\n\t* objc.dg/desig-init-1.m: Use shared wrapper headers (Object1.h,\n\tProtocol1.h) and next-mapping.h as required. XFAIL run if NeXT \n\tand 64bit. Use new NeXT interface as required.\n\t* objc.dg/special/unclaimed-category-1.m: Ditto.\n\t* objc.dg/special/unclaimed-category-1.h: Ditto.\n\t* objc.dg/special/unclaimed-category-1a.m: Ditto.\n\t* objc.dg/func-ptr-1.m: Ditto.\n\t* objc.dg/stret-1.m: Ditto.\t\n\t* objc.dg/encode-2.m: Ditto.\n\t* objc.dg/category-1.m: Ditto.\n\t* objc.dg/encode-3.m: Ditto.\n\t* objc.dg/call-super-3.m: Ditto.\n\t* objc.dg/method-3.m: Ditto.\n\t* objc.dg/func-ptr-2.m: Ditto.\n\t* objc.dg/lookup-1.m: Ditto.\n\t* objc.dg/encode-4.m: Ditto.\n\t* objc.dg/fix-and-continue-1.m: Ditto.\n\t* objc.dg/proto-lossage-3.m: Ditto.\n\t* objc.dg/method-13.m: Ditto.\n\t* objc.dg/proto-qual-1.m: Ditto.\n\t* objc.dg/zero-link-3.m: Ditto.\n\t* objc.dg/bitfield-1.m: Ditto.\n\t* objc.dg/va-meth-1.m: Ditto.\n\t* objc.dg/super-class-3.m: Ditto.\n\t* objc.dg/call-super-1.m: Ditto.\n\t* objc.dg/type-size-2.m: Ditto.\n\t* objc.dg/method-10.m: Ditto.\n\t* objc.dg/defs.m: Ditto.\t\n\t* objc.dg/const-str-3.m: Ditto.\n\t* objc.dg/try-catch-6.m: Use shared wrapper headers (Object1.h,\n\tProtocol1.h) and next-mapping.h as required. Use new NeXT \n\tinterface as required.\n\t* objc.dg/super-class-4.m: Ditto.\n\t* objc.dg/comp-types-8.m: Ditto.\n\t* objc.dg/call-super-2.m: Ditto.\n\t* objc.dg/objc-fast-4.m: Ditto.\n\t* objc.dg/method-6.m: Ditto.\n\t* objc.dg/const-str-3.m: Ditto.\n\t* objc.dg/const-str-7.m: Ditto.\n\t* objc.dg/method-15.m: Ditto.\n\t* objc.dg/method-19.m: Ditto.\n\t* objc.dg/sync-1.m: Ditto.\n\t* objc.dg/layout-1.m: Ditto.\n\t* objc.dg/bitfield-3.m: Ditto.\n\t* objc.dg/try-catch-3.m: Ditto.\n\t* objc.dg/try-catch-7.m: Ditto.\n\t* objc.dg/comp-types-10.m: Ditto.\n\t* objc.dg/selector-2.: Ditto.\n\t* objc.dg/method-7.m: Ditto.\n\t* objc.dg/typedef-alias-1.m: Ditto.\n\t* objc.dg/proto-lossage-2.m: Ditto.\n\t* objc.dg/comp-types-11.m: Ditto.\n\t* objc.dg/sizeof-1.m: Ditto.\n\t* objc.dg/method-17.m: Ditto.\n\t* objc.dg/bitfield-5.m: Ditto.\n\t* objc.dg/try-catch-1.m: Ditto.\n\t* objc.dg/encode-5.m: Ditto.\n\t* objc.dg/fix-and-continue-2.m: Ditto.\n\t* objc.dg/method-9.m: Ditto.\n\t* objc.dg/isa-field-1.m: Ditto.\n\t* objc.dg/local-decl-2.m: Ditto.\t\n\t* objc.dg/objc-gc-4.m: Ditto.\n\t* objc.dg/type-stream-1.m: Skip for NeXT runtime.\n\t* objc.dg/gnu-runtime-3.m: Ditto.\n\t* objc.dg/encode-7.m: Ditto.\n\t* objc.dg/encode-8.m: Ditto.\n\t* objc.dg/selector-3.m: Ditto.\n\t* objc.dg/gnu-runtime-1.m: Ditto.\n\t* objc.dg/const-str-12.m: Ditto.\n\t* objc.dg/gnu-runtime-2.m: Ditto.\t\n\t* objc.dg/no-extra-load.m: Skip for gnu-runtime.\n\t* objc.dg/selector-1.m: Ditto.\n\t* objc.dg/stubify-2.m: Ditto.\n\t* objc.dg/zero-link-1.m: Ditto.\n\t* objc.dg/stret-2.m: Ditto.\n\t* objc.dg/zero-link-2.m: Ditto.\n\t* objc.dg/next-runtime-1.m: Ditto.\n\t* objc.dg/symtab-1.m: Ditto.\n\t* objc.dg/stubify-1.m: Ditto.\n\t* objc.dg/bitfield-2.m: Ditto.\t\n\t* objc.dg/try-catch-10.m: Apply to both runtimes.\n\t* objc.dg/const-str-1.m: Ditto.\n\t* objc.dg/image-info.m: Ditto.\n\t* objc.dg/encode-9.m: Ditto.\t\n\t* objc.dg/pragma-1.m: Apply test to all targets.\n\t* objc.dg/const-str-4.m: Ditto.\n\t* objc.dg/const-str-8.m: Ditto.\n\t* objc.dg/super-class-2.m: Ditto.\n\t* objc.dg/try-catch-5.m: Ditto.\n\t* objc.dg/const-str-10.m: Use shared wrapper headers (Object1.h,\n\tProtocol1.h) and next-mapping.h as required. Use new NeXT \n\tinterface as required.  Skip for gnu-runtime.  Test for .quad\n\tat m64.\n\t* objc.dg/const-str-11.m: Ditto.\n\t* objc.dg/const-str-9.m: Ditto.\t\n\t* objc.dg/method-4.m: Skip for 64Bit NeXT.\n\t* objc.dg/encode-1.m: Remove redundant -lobjc.\n\t* objc.dg/try-catch-9.m: Tidy space.\n\t* obj-c++.dg/method-19.mm: Use shared wrapper headers (Object1.h,\n\tProtocol1.h) and next-mapping.h as required. XFAIL run if NeXT \n\tand 64bit. Use new NeXT interface as required.\n\t* obj-c++.dg/template-4.mm: Ditto.\n\t* obj-c++.dg/defs.mm: Ditto.\n\t* obj-c++.dg/basic.mm: Ditto.\n\t* obj-c++.dg/encode-4.mm: Ditto.\n\t* obj-c++.dg/method-17.mm: Ditto.\n\t* obj-c++.dg/proto-lossage-3.mm: Ditto.\n\t* obj-c++.dg/cxx-class-1.mm: Ditto.\n\t* obj-c++.dg/method-10.mm: Ditto.\n\t* obj-c++.dg/va-meth-1.mm: Ditto.\n\t* obj-c++.dg/encode-5.mm: Ditto.\n\t* obj-c++.dg/lookup-2.mm: Ditto.\n\t* obj-c++.dg/template-3.mm: Ditto.\n\t* obj-c++.dg/proto-qual-1.mm: Ditto.\n\t* obj-c++.dg/qual-types-1.m: Ditto.\n\t* obj-c++.dg/cxx-scope-1.mm: Ditto.\n\t* obj-c++.dg/template-1.mm: Ditto.\n\t* obj-c++.dg/encode-6.mm: Ditto.\n\t* obj-c++.dg/bitfield-2.mm:  Use shared wrapper headers (Object1.h,\n\tProtocol1.h) and next-mapping.h as required. Use new NeXT \n\tinterface as required.\n\t* obj-c++.dg/except-1.mm: Ditto.\n\t* obj-c++.dg/const-str-7.mm: Ditto.\n\t* obj-c++.dg/ivar-list-semi.mm: Ditto.\n\t* obj-c++.dg/cxx-scope-2.mm: Ditto.\n\t* obj-c++.dg/selector-2.mm: Ditto.\n\t* obj-c++.dg/isa-field-1.mm: Ditto.\n\t* obj-c++.dg/try-catch-1.mm: Ditto.\n\t* obj-c++.dg/local-decl-1.mm: Ditto.\n\t* obj-c++.dg/try-catch-9.mm: Ditto.\n\t* obj-c++.dg/no-extra-load.mm: Ditto.\n\t* obj-c++.dg/selector-5.mm: Ditto.\n\t* obj-c++.dg/method-12.mm: Ditto.\n\t* obj-c++.dg/try-catch-11.mm: Ditto.\n\t* obj-c++.dg/comp-types-11.mm: Ditto.\n\t* obj-c++.dg/bitfield-3.mm: Ditto.\n\t* obj-c++.dg/method-6.mm: Ditto.\n\t* obj-c++.dg/super-class-2.mm: Ditto.\n\t* obj-c++.dg/method-21.mm: Ditto.\n\t* obj-c++.dg/const-str-8.mm: Ditto.\n\t* obj-c++.dg/try-catch-7.mm: Ditto.\n\t* obj-c++.dg/method-15.mm: Ditto.\n\t* obj-c++.dg/layout-1.mm: Ditto.\n\t* obj-c++.dg/cxx-ivars-1.mm: Ditto.\n\t* obj-c++.dg/const-str-3.mm: Ditto.\n\t* obj-c++.dg/try-catch-2.mm: Ditto.\n\t* obj-c++.dg/objc-gc-3.mm: Ditto.\n\t* obj-c++.dg/fix-and-continue-2.mm: Ditto.\n\t* obj-c++.dg/bitfield-1.mm: Ditto.\n\t* obj-c++.dg/selector-6.mm: Ditto.\n\t* obj-c++.dg/method-13.mm: Ditto.\n\t* obj-c++.dg/comp-types-12.mm: Ditto.\n\t* obj-c++.dg/bitfield-4.mm: Ditto.\n\t* obj-c++.dg/try-catch-8.mm: Ditto.\n\t* obj-c++.dg/method-2.mm: Ditto.\n\t* obj-c++.dg/cxx-ivars-2.mm: Ditto.\n\t* obj-c++.dg/typedef-alias-1.mm: Ditto.\n\t* obj-c++.dg/const-str-4.mm: Ditto.\n\t* obj-c++.dg/proto-lossage-2.mm: Ditto.\n\t* obj-c++.dg/try-catch-3.mm: Ditto.\n\t* obj-c++.dg/comp-types-9.mm: Ditto.\n\t* obj-c++.dg/gnu-runtime-2.mm: Skip if NeXT runtime.\n\t* obj-c++.dg/gnu-runtime-3.mm: Ditto.\n\t* obj-c++.dg/gnu-runtime-1.mm: Ditto.\n\t* objc.dg/zero-link-2.m: Skip if gnu runtime. Use shared wrapper \n\theaders (Object1.h, Protocol1.h) and next-mapping.h as required. \n\tUse new NeXT interface as required.\n\t* obj-c++.dg/const-str-10.mm: Ditto.\n\t* obj-c++.dg/const-str-11.mm: Ditto.\n\t* obj-c++.dg/const-str-9.mm: Ditto.\n\t* obj-c++.dg/method-11.mm: Ditto.\n\t* obj-c++.dg/cxx-ivars-3.mm: Skip if gnu runtime. Use shared wrapper \n\theaders (Object1.h, Protocol1.h) and next-mapping.h as required. \n\tUse new NeXT interface as required. XFAIL run if NeXT and 64bit.\n\t* obj-c++.dg/encode-8.mm: Remove redundant -lobjc.\n\t* obj-c++.dg/const-str-1.mm: Run for NeXT as well as gnu.\n\nFrom-SVN: r157731", "tree": {"sha": "f2c57b88352f30e9bd481510ae4e07680330dffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2c57b88352f30e9bd481510ae4e07680330dffd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/812398e4cfcb5ee641dbf8f8702d02c3eb026012", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/812398e4cfcb5ee641dbf8f8702d02c3eb026012", "html_url": "https://github.com/Rust-GCC/gccrs/commit/812398e4cfcb5ee641dbf8f8702d02c3eb026012", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/812398e4cfcb5ee641dbf8f8702d02c3eb026012/comments", "author": null, "committer": null, "parents": [{"sha": "58f5f6b43067ab86fd26efdf13e3c0929dadb8f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4"}], "stats": {"total": 2727, "additions": 2187, "deletions": 540}, "files": [{"sha": "5b7c8925830deb517910fadc3b74c3b571aa3473", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 280, "deletions": 0, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,3 +1,283 @@\n+2010-03-25  Iain Sandoe  <iain.sandoe@sandoe-acoustics.co.uk>\n+\n+\tPR objc/35165\n+\tPR testsuite/43512\n+\t* objc-obj-c++-shared: New directory.\n+\t* objc-obj-c++-shared/Object1-implementation.h: New file.\n+\t* objc-obj-c++-shared/Object1.h: New file.\n+\t* objc-obj-c++-shared/Protocol1.h: New file.\n+\t* objc-obj-c++-shared/next-abi.h: New file.\n+\t* objc-obj-c++-shared/next-mapping.h: New file.\n+\t* objc/execute/next_mapping.h: Delete.\n+\t* objc.dg/special/special.exp: For all targets run the tests with\n+\t-fgnu-runtime, for darwin targets also run the tests with \n+\t-fnext-runtime.\n+\t* objc.dg/dg.exp: Ditto.\n+\t* obj-c++.dg/dg.exp: Ditto.\n+\t* objc/execute/forward-1.m: Use shared wrapper headers (Object1.h,\n+\tProtocol1.h) and next-mapping.h as required.  Amend testcase to\n+\tinclude use of updated NeXT interface.\n+\t* objc/execute/formal_protocol-5.m: Ditto.\n+\t* objc/execute/protocol-isEqual-2.m: Ditto.\n+\t* objc/execute/protocol-isEqual-4.m: Ditto.\t\n+\t* objc/execute/class-11.m: Use shared wrapper headers (Object1.h,\n+\tProtocol1.h) and next-mapping.h as required.\n+\t* objc/execute/object_is_class.m: Ditto.\n+\t* objc/execute/enumeration-1.m: Ditto.\n+\t* objc/execute/class-13.m: Ditto.\n+\t* objc/execute/formal_protocol-2.m: Ditto.\n+\t* objc/execute/formal_protocol-4.m: Ditto.\n+\t* objc/execute/class-1.m: Ditto.\n+\t* objc/execute/bycopy-1.m: Ditto.\n+\t* objc/execute/formal_protocol-6.m: Ditto.\n+\t* objc/execute/bycopy-3.m: Ditto.\n+\t* objc/execute/class-3.m: Ditto.\n+\t* objc/execute/bf-11.m: Ditto.\n+\t* objc/execute/class-5.m: Ditto.\n+\t* objc/execute/bf-13.m: Ditto.\n+\t* objc/execute/class-7.m: Ditto.\n+\t* objc/execute/bf-15.m: Ditto.\n+\t* objc/execute/class-9.m: Ditto.\n+\t* objc/execute/bf-17.m: Ditto.\n+\t* objc/execute/bf-19.m: Ditto.\n+\t* objc/execute/IMP.m: Ditto.\n+\t* objc/execute/exceptions/catchall-1.m: Ditto.\n+\t* objc/execute/exceptions/trivial.m: Ditto.\n+\t* objc/execute/exceptions/finally-1.m: Ditto.\n+\t* objc/execute/exceptions/local-variables-1.m: Ditto.\n+\t* objc/execute/exceptions/foward-1.m: Ditto.\n+\t* objc/execute/bf-2.m: Ditto.\n+\t* objc/execute/string1.m: Ditto.\n+\t* objc/execute/bf-4.m: Ditto.\n+\t* objc/execute/informal_protocol.m: Ditto.\n+\t* objc/execute/string3.m: Ditto.\n+\t* objc/execute/bf-6.m: Ditto.\n+\t* objc/execute/bf-8.m: Ditto.\n+\t* objc/execute/class-tests-1.h: Ditto.\n+\t* objc/execute/protocol-isEqual-1.m: Ditto.\n+\t* objc/execute/protocol-isEqual-3.m: Ditto.\n+\t* objc/execute/_cmd.m: Ditto.\n+\t* objc/execute/function-message-1.m: Ditto.\n+\t* objc/execute/bf-20.m: Ditto.\n+\t* objc/execute/bf-common.h: Ditto.\n+\t* objc/execute/np-2.m: Ditto.\n+\t* objc/execute/class-10.m: Ditto.\n+\t* objc/execute/class-12.m: Ditto.\n+\t* objc/execute/enumeration-2.m: Ditto.\n+\t* objc/execute/class-14.m: Ditto.\n+\t* objc/execute/encode-1.m: Ditto.\n+\t* objc/execute/formal_protocol-1.m: Ditto.\n+\t* objc/execute/formal_protocol-3.m: Ditto.\n+\t* objc/execute/accessing_ivars.m: Ditto.\n+\t* objc/execute/bycopy-2.m: Ditto.\n+\t* objc/execute/class-2.m: Ditto.\n+\t* objc/execute/bf-10.m: Ditto.\n+\t* objc/execute/formal_protocol-7.m: Ditto.\n+\t* objc/execute/root_methods.m: Ditto.\n+\t* objc/execute/class-4.m: Ditto.\n+\t* objc/execute/bf-12.m: Ditto.\n+\t* objc/execute/class-6.m: Ditto.\n+\t* objc/execute/bf-14.m: Ditto.\n+\t* objc/execute/nested-func-1.m: Ditto.\n+\t* objc/execute/class-8.m: Ditto.\n+\t* objc/execute/private.m: Ditto.\n+\t* objc/execute/bf-16.m: Ditto.\n+\t* objc/execute/bf-18.m: Ditto.\n+\t* objc/execute/load-3.m: Ditto.\n+\t* objc/execute/compatibility_alias.m: Ditto.\n+\t* objc/execute/bf-1.m: Ditto.\n+\t* objc/execute/no_clash.m: Ditto.\n+\t* objc/execute/bf-3.m: Ditto.\n+\t* objc/execute/string2.m: Ditto.\n+\t* objc/execute/bf-5.m: Ditto.\n+\t* objc/execute/string4.m: Ditto.\n+\t* objc/execute/bf-7.m: Ditto.\n+\t* objc/execute/object_is_meta_class.m: Ditto.\n+\t* objc/execute/bf-9.m: Ditto.\n+\t* objc/execute/bf-21.m: Ditto.\n+\t* objc/execute/cascading-1.m: Ditto.\n+\t* objc/execute/trivial.m: Ditto.\n+\t* objc/execute/np-1.m: Ditto.\n+\t* objc/compile/trivial.m: Ditto.\n+\t* objc/execute/class_self-2.m: Include <stdlib.h>.\n+\t* objc/execute/forward-1.x: Do not XFAIL for 32bit powerpc-darwin.\n+\t* objc.dg/desig-init-1.m: Use shared wrapper headers (Object1.h,\n+\tProtocol1.h) and next-mapping.h as required. XFAIL run if NeXT \n+\tand 64bit. Use new NeXT interface as required.\n+\t* objc.dg/special/unclaimed-category-1.m: Ditto.\n+\t* objc.dg/special/unclaimed-category-1.h: Ditto.\n+\t* objc.dg/special/unclaimed-category-1a.m: Ditto.\n+\t* objc.dg/func-ptr-1.m: Ditto.\n+\t* objc.dg/stret-1.m: Ditto.\t\n+\t* objc.dg/encode-2.m: Ditto.\n+\t* objc.dg/category-1.m: Ditto.\n+\t* objc.dg/encode-3.m: Ditto.\n+\t* objc.dg/call-super-3.m: Ditto.\n+\t* objc.dg/method-3.m: Ditto.\n+\t* objc.dg/func-ptr-2.m: Ditto.\n+\t* objc.dg/lookup-1.m: Ditto.\n+\t* objc.dg/encode-4.m: Ditto.\n+\t* objc.dg/fix-and-continue-1.m: Ditto.\n+\t* objc.dg/proto-lossage-3.m: Ditto.\n+\t* objc.dg/method-13.m: Ditto.\n+\t* objc.dg/proto-qual-1.m: Ditto.\n+\t* objc.dg/zero-link-3.m: Ditto.\n+\t* objc.dg/bitfield-1.m: Ditto.\n+\t* objc.dg/va-meth-1.m: Ditto.\n+\t* objc.dg/super-class-3.m: Ditto.\n+\t* objc.dg/call-super-1.m: Ditto.\n+\t* objc.dg/type-size-2.m: Ditto.\n+\t* objc.dg/method-10.m: Ditto.\n+\t* objc.dg/defs.m: Ditto.\t\n+\t* objc.dg/const-str-3.m: Ditto.\n+\t* objc.dg/try-catch-6.m: Use shared wrapper headers (Object1.h,\n+\tProtocol1.h) and next-mapping.h as required. Use new NeXT \n+\tinterface as required.\n+\t* objc.dg/super-class-4.m: Ditto.\n+\t* objc.dg/comp-types-8.m: Ditto.\n+\t* objc.dg/call-super-2.m: Ditto.\n+\t* objc.dg/objc-fast-4.m: Ditto.\n+\t* objc.dg/method-6.m: Ditto.\n+\t* objc.dg/const-str-3.m: Ditto.\n+\t* objc.dg/const-str-7.m: Ditto.\n+\t* objc.dg/method-15.m: Ditto.\n+\t* objc.dg/method-19.m: Ditto.\n+\t* objc.dg/sync-1.m: Ditto.\n+\t* objc.dg/layout-1.m: Ditto.\n+\t* objc.dg/bitfield-3.m: Ditto.\n+\t* objc.dg/try-catch-3.m: Ditto.\n+\t* objc.dg/try-catch-7.m: Ditto.\n+\t* objc.dg/comp-types-10.m: Ditto.\n+\t* objc.dg/selector-2.: Ditto.\n+\t* objc.dg/method-7.m: Ditto.\n+\t* objc.dg/typedef-alias-1.m: Ditto.\n+\t* objc.dg/proto-lossage-2.m: Ditto.\n+\t* objc.dg/comp-types-11.m: Ditto.\n+\t* objc.dg/sizeof-1.m: Ditto.\n+\t* objc.dg/method-17.m: Ditto.\n+\t* objc.dg/bitfield-5.m: Ditto.\n+\t* objc.dg/try-catch-1.m: Ditto.\n+\t* objc.dg/encode-5.m: Ditto.\n+\t* objc.dg/fix-and-continue-2.m: Ditto.\n+\t* objc.dg/method-9.m: Ditto.\n+\t* objc.dg/isa-field-1.m: Ditto.\n+\t* objc.dg/local-decl-2.m: Ditto.\t\n+\t* objc.dg/objc-gc-4.m: Ditto.\n+\t* objc.dg/type-stream-1.m: Skip for NeXT runtime.\n+\t* objc.dg/gnu-runtime-3.m: Ditto.\n+\t* objc.dg/encode-7.m: Ditto.\n+\t* objc.dg/encode-8.m: Ditto.\n+\t* objc.dg/selector-3.m: Ditto.\n+\t* objc.dg/gnu-runtime-1.m: Ditto.\n+\t* objc.dg/const-str-12.m: Ditto.\n+\t* objc.dg/gnu-runtime-2.m: Ditto.\t\n+\t* objc.dg/no-extra-load.m: Skip for gnu-runtime.\n+\t* objc.dg/selector-1.m: Ditto.\n+\t* objc.dg/stubify-2.m: Ditto.\n+\t* objc.dg/zero-link-1.m: Ditto.\n+\t* objc.dg/stret-2.m: Ditto.\n+\t* objc.dg/zero-link-2.m: Ditto.\n+\t* objc.dg/next-runtime-1.m: Ditto.\n+\t* objc.dg/symtab-1.m: Ditto.\n+\t* objc.dg/stubify-1.m: Ditto.\n+\t* objc.dg/bitfield-2.m: Ditto.\t\n+\t* objc.dg/try-catch-10.m: Apply to both runtimes.\n+\t* objc.dg/const-str-1.m: Ditto.\n+\t* objc.dg/image-info.m: Ditto.\n+\t* objc.dg/encode-9.m: Ditto.\t\n+\t* objc.dg/pragma-1.m: Apply test to all targets.\n+\t* objc.dg/const-str-4.m: Ditto.\n+\t* objc.dg/const-str-8.m: Ditto.\n+\t* objc.dg/super-class-2.m: Ditto.\n+\t* objc.dg/try-catch-5.m: Ditto.\n+\t* objc.dg/const-str-10.m: Use shared wrapper headers (Object1.h,\n+\tProtocol1.h) and next-mapping.h as required. Use new NeXT \n+\tinterface as required.  Skip for gnu-runtime.  Test for .quad\n+\tat m64.\n+\t* objc.dg/const-str-11.m: Ditto.\n+\t* objc.dg/const-str-9.m: Ditto.\t\n+\t* objc.dg/method-4.m: Skip for 64Bit NeXT.\n+\t* objc.dg/encode-1.m: Remove redundant -lobjc.\n+\t* objc.dg/try-catch-9.m: Tidy space.\n+\t* obj-c++.dg/method-19.mm: Use shared wrapper headers (Object1.h,\n+\tProtocol1.h) and next-mapping.h as required. XFAIL run if NeXT \n+\tand 64bit. Use new NeXT interface as required.\n+\t* obj-c++.dg/template-4.mm: Ditto.\n+\t* obj-c++.dg/defs.mm: Ditto.\n+\t* obj-c++.dg/basic.mm: Ditto.\n+\t* obj-c++.dg/encode-4.mm: Ditto.\n+\t* obj-c++.dg/method-17.mm: Ditto.\n+\t* obj-c++.dg/proto-lossage-3.mm: Ditto.\n+\t* obj-c++.dg/cxx-class-1.mm: Ditto.\n+\t* obj-c++.dg/method-10.mm: Ditto.\n+\t* obj-c++.dg/va-meth-1.mm: Ditto.\n+\t* obj-c++.dg/encode-5.mm: Ditto.\n+\t* obj-c++.dg/lookup-2.mm: Ditto.\n+\t* obj-c++.dg/template-3.mm: Ditto.\n+\t* obj-c++.dg/proto-qual-1.mm: Ditto.\n+\t* obj-c++.dg/qual-types-1.m: Ditto.\n+\t* obj-c++.dg/cxx-scope-1.mm: Ditto.\n+\t* obj-c++.dg/template-1.mm: Ditto.\n+\t* obj-c++.dg/encode-6.mm: Ditto.\n+\t* obj-c++.dg/bitfield-2.mm:  Use shared wrapper headers (Object1.h,\n+\tProtocol1.h) and next-mapping.h as required. Use new NeXT \n+\tinterface as required.\n+\t* obj-c++.dg/except-1.mm: Ditto.\n+\t* obj-c++.dg/const-str-7.mm: Ditto.\n+\t* obj-c++.dg/ivar-list-semi.mm: Ditto.\n+\t* obj-c++.dg/cxx-scope-2.mm: Ditto.\n+\t* obj-c++.dg/selector-2.mm: Ditto.\n+\t* obj-c++.dg/isa-field-1.mm: Ditto.\n+\t* obj-c++.dg/try-catch-1.mm: Ditto.\n+\t* obj-c++.dg/local-decl-1.mm: Ditto.\n+\t* obj-c++.dg/try-catch-9.mm: Ditto.\n+\t* obj-c++.dg/no-extra-load.mm: Ditto.\n+\t* obj-c++.dg/selector-5.mm: Ditto.\n+\t* obj-c++.dg/method-12.mm: Ditto.\n+\t* obj-c++.dg/try-catch-11.mm: Ditto.\n+\t* obj-c++.dg/comp-types-11.mm: Ditto.\n+\t* obj-c++.dg/bitfield-3.mm: Ditto.\n+\t* obj-c++.dg/method-6.mm: Ditto.\n+\t* obj-c++.dg/super-class-2.mm: Ditto.\n+\t* obj-c++.dg/method-21.mm: Ditto.\n+\t* obj-c++.dg/const-str-8.mm: Ditto.\n+\t* obj-c++.dg/try-catch-7.mm: Ditto.\n+\t* obj-c++.dg/method-15.mm: Ditto.\n+\t* obj-c++.dg/layout-1.mm: Ditto.\n+\t* obj-c++.dg/cxx-ivars-1.mm: Ditto.\n+\t* obj-c++.dg/const-str-3.mm: Ditto.\n+\t* obj-c++.dg/try-catch-2.mm: Ditto.\n+\t* obj-c++.dg/objc-gc-3.mm: Ditto.\n+\t* obj-c++.dg/fix-and-continue-2.mm: Ditto.\n+\t* obj-c++.dg/bitfield-1.mm: Ditto.\n+\t* obj-c++.dg/selector-6.mm: Ditto.\n+\t* obj-c++.dg/method-13.mm: Ditto.\n+\t* obj-c++.dg/comp-types-12.mm: Ditto.\n+\t* obj-c++.dg/bitfield-4.mm: Ditto.\n+\t* obj-c++.dg/try-catch-8.mm: Ditto.\n+\t* obj-c++.dg/method-2.mm: Ditto.\n+\t* obj-c++.dg/cxx-ivars-2.mm: Ditto.\n+\t* obj-c++.dg/typedef-alias-1.mm: Ditto.\n+\t* obj-c++.dg/const-str-4.mm: Ditto.\n+\t* obj-c++.dg/proto-lossage-2.mm: Ditto.\n+\t* obj-c++.dg/try-catch-3.mm: Ditto.\n+\t* obj-c++.dg/comp-types-9.mm: Ditto.\n+\t* obj-c++.dg/gnu-runtime-2.mm: Skip if NeXT runtime.\n+\t* obj-c++.dg/gnu-runtime-3.mm: Ditto.\n+\t* obj-c++.dg/gnu-runtime-1.mm: Ditto.\n+\t* objc.dg/zero-link-2.m: Skip if gnu runtime. Use shared wrapper \n+\theaders (Object1.h, Protocol1.h) and next-mapping.h as required. \n+\tUse new NeXT interface as required.\n+\t* obj-c++.dg/const-str-10.mm: Ditto.\n+\t* obj-c++.dg/const-str-11.mm: Ditto.\n+\t* obj-c++.dg/const-str-9.mm: Ditto.\n+\t* obj-c++.dg/method-11.mm: Ditto.\n+\t* obj-c++.dg/cxx-ivars-3.mm: Skip if gnu runtime. Use shared wrapper \n+\theaders (Object1.h, Protocol1.h) and next-mapping.h as required. \n+\tUse new NeXT interface as required. XFAIL run if NeXT and 64bit.\n+\t* obj-c++.dg/encode-8.mm: Remove redundant -lobjc.\n+\t* obj-c++.dg/const-str-1.mm: Run for NeXT as well as gnu.\n+\n 2010-03-25  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/43206"}, {"sha": "8fb0204eb1247aa53f92a38fa3028c1dbfd97afd", "filename": "gcc/testsuite/obj-c++.dg/basic.mm", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbasic.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbasic.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbasic.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n // A basic sanity check for Objective-C++.\n // { dg-do run }\n-\n-#include <objc/Object.h>\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <iostream>\n \n @interface Greeter : Object\n@@ -19,3 +19,4 @@ - (void) greet: (const char *)msg { std::cout << msg; }\n   Greeter *obj = [Greeter new];\n   [obj greet: \"Hello from Objective-C\\n\"];\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "7b8e861ca661d5cb0e1185d442accb1354585080", "filename": "gcc/testsuite/obj-c++.dg/bitfield-1.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-1.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -9,8 +9,8 @@ were defined at once (i.e., any padding introduced for\n \n /* Leave blank lines here to keep warnings on the same lines.  */\n \n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n-#include <objc/Object.h>\n #include <stdlib.h>\n \n #define CHECK_IF(expr) if(!(expr)) abort()"}, {"sha": "1bddf540a67d24d55d8efa99ac57a3a66e885bad", "filename": "gcc/testsuite/obj-c++.dg/bitfield-2.mm", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-2.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,7 +3,7 @@\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdlib.h>\n \n #define CHECK_IF(expr) if(!(expr)) abort();\n@@ -76,3 +76,4 @@ int main(void) {\n \n   return 0;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "32f2d726ddac905953e5a0a1a1ad667e81e6a246", "filename": "gcc/testsuite/obj-c++.dg/bitfield-3.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-3.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n /* Check if bitfield ivars are correctly @encode'd when\n    the NeXT runtime is used.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-fnext-runtime -fsigned-char\" } */\n+/* { dg-options \"-fsigned-char\" } */\n /* { dg-do run { target *-*-darwin* } } */\n \n typedef struct objc_object { struct objc_class *class_pointer; } *id;"}, {"sha": "35c32ee98a4e78caf16c690fa997dcfc2c9b5f5f", "filename": "gcc/testsuite/obj-c++.dg/bitfield-4.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-4.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,9 +2,9 @@\n    layout of bitfields.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run } */\n-/* { dg-options \"-lobjc -Wpadded\" } */\n+/* { dg-options \"-Wpadded\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n #include <stdlib.h>\n #include <string.h>"}, {"sha": "b4da5ddd6430bb0aa075a0d8d453beada06e22e0", "filename": "gcc/testsuite/obj-c++.dg/comp-types-10.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-10.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-10.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-10.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n /* Yet another mysterious gimplifier crasher.  */\n /* { dg-do compile } */\n-/* { dg-xfail-if \"PR23716\" { *-*-* } { \"*\" } { \"\" } } */\n+/* { dg-xfail-if \"PR23716\" { ! *-*-darwin* } { \"*\" } { \"\" } } */\n /* { dg-prune-output \".*internal compiler error.*\" } */\n /* { dg-options \"-O3\" } */\n "}, {"sha": "3d85983991e04cda17cb5bf31a098e4852764af6", "filename": "gcc/testsuite/obj-c++.dg/comp-types-11.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-11.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-11.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-11.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @protocol Foo\n - (id)meth1;"}, {"sha": "37feff0a72302f976a5b92977432cf6d4b0e2928", "filename": "gcc/testsuite/obj-c++.dg/comp-types-12.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-12.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-12.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-12.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Derived: Object\n @end"}, {"sha": "079140ac408506f3626cbf1cfb08d39eb4e0881f", "filename": "gcc/testsuite/obj-c++.dg/comp-types-9.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-9.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-9.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-9.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,7 +2,7 @@\n \n /* Another gimplifier ICE... */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface MyView: Object {\n   int _frame;"}, {"sha": "156a92e1194bbc6b2aa7191d6707f9ce30927dd9", "filename": "gcc/testsuite/obj-c++.dg/const-str-1.mm", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-1.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,5 @@\n /* Test errors for constant strings.  */\n /* { dg-do compile } */\n-/* { dg-options \"-fgnu-runtime\" } */\n \n #ifdef __cplusplus\n extern void baz(...);"}, {"sha": "8605bdb33413ab4b6f7ff06b3e2c756764a030e9", "filename": "gcc/testsuite/obj-c++.dg/const-str-10.mm", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-10.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-10.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-10.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,10 +2,10 @@\n    constant string classes get derived.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n \n-/* { dg-options \"-fnext-runtime\" } */\n /* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface NSString: Object\n @end\n@@ -20,7 +20,11 @@ @interface NSSimpleCString : NSString {\n @interface NSConstantString : NSSimpleCString\n @end\n \n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+Class _NSConstantStringClassReference;\n+#else\n extern struct objc_class _NSConstantStringClassReference;\n+#endif\n \n const NSConstantString *appKey = @\"MyApp\";\n "}, {"sha": "22c1f04cf1f960b3cd62a009b19022e107221a44", "filename": "gcc/testsuite/obj-c++.dg/const-str-11.mm", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-11.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-11.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-11.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,10 +2,11 @@\n    constant string classes get derived.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n \n-/* { dg-options \"-fnext-runtime -fconstant-string-class=XStr\" } */\n /* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-options \"-fconstant-string-class=XStr\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface XString: Object {\n @protected\n@@ -19,7 +20,11 @@ @interface XStr : XString {\n }\n @end\n \n+#ifndef NEXT_OBJC_USE_NEW_INTERFACE\n extern struct objc_class _XStrClassReference;\n+#else\n+extern Class _XStrClassReference;\n+#endif\n \n const XStr *appKey = @\"MyApp\";\n "}, {"sha": "3e7939adeb176f21a7ebfcf05822668fff9efbf7", "filename": "gcc/testsuite/obj-c++.dg/const-str-3.mm", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-3.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,14 +2,18 @@\n    runtime.  */\n /* Developed by Markus Hitter <mah@jump-ing.de>.  */\n \n-/* { dg-options \"-fnext-runtime -fconstant-string-class=Foo -lobjc\" } */\n+/* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-do run { target *-*-darwin* } } */\n \n+#import \"../objc-obj-c++-shared/Object1.h\"\n+#import \"../objc-obj-c++-shared/next-mapping.h\"\n #include <stdio.h>\n #include <stdlib.h>\n #include <memory.h>\n #include <objc/objc.h>\n-#include <objc/Object.h>\n+#ifndef __NEXT_RUNTIME__\n+#include <objc/objc-api.h>\n+#endif\n \n @interface Foo: Object {\n   char *cString;\n@@ -18,7 +22,11 @@ @interface Foo: Object {\n - (char *)customString;\n @end\n \n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+struct fudge_objc_class _FooClassReference;\n+#else\n struct objc_class _FooClassReference;\n+#endif\n \n @implementation Foo : Object\n - (char *)customString {\n@@ -38,11 +46,12 @@ int main () {\n      constant string object. Can't be moved to +initialize since _that_\n      is already a message. */\n \n-  memcpy(&_FooClassReference, objc_getClass(\"Foo\"), sizeof(_FooClassReference));\n+  memcpy(&_FooClassReference, objc_get_class(\"Foo\"), sizeof(_FooClassReference));\n   if (strcmp ([string customString], \"bla\")) {\n     abort ();\n   }\n \n   printf([@\"This is a working constant string object\\n\" customString]);\n   return 0;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "09d24ad4cb74f4879bc60e0908e8a922263a88e1", "filename": "gcc/testsuite/obj-c++.dg/const-str-4.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-4.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n /* Ensure that the preprocessor handles ObjC string constants gracefully. */\n /* Author: Ziemowit Laski <zlaski@apple.com> */\n-/* { dg-options \"-fnext-runtime -fconstant-string-class=MyString -lobjc\" } */ \n-/* { dg-do run { target *-*-darwin* } } */\n+/* { dg-options \"-fconstant-string-class=MyString\" } */ \n+/* { dg-do run  { target *-*-darwin* } } */\n \n #include <stdlib.h>\n "}, {"sha": "fe66b2cc2c82c72464166931731d07b1d62fcf4e", "filename": "gcc/testsuite/obj-c++.dg/const-str-7.mm", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-7.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,17 +2,15 @@\n    scopes.  */\n /* Developed by Andrew Pinski <pinskia@physics.uc.edu> */\n \n+/* { dg-options \"-fconstant-string-class=Foo\" } */\n+/* { dg-do run } */\n \n-/* { dg-options \"-fnext-runtime -fconstant-string-class=Foo -lobjc\" } */\n-/* { dg-do run { target *-*-darwin* } } */\n-\n-\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n #include <stdio.h>\n #include <stdlib.h>\n #include <memory.h>\n #include <objc/objc.h>\n-#include <objc/Object.h>\n-\n \n @interface Foo: Object {\n   char *cString;\n@@ -21,8 +19,11 @@ @interface Foo: Object {\n - (char *)customString;\n @end\n \n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+struct fudge_objc_class _FooClassReference;\n+#else\n struct objc_class _FooClassReference;\n-\n+#endif\n \n @implementation Foo : Object\n - (char *)customString {\n@@ -36,11 +37,10 @@ int main () {\n   {\n     Foo *string2 = @\"bla\";\n \n-\n     if(string != string2)\n       abort();\n     printf(\"Strings are being uniqued properly\\n\");\n    }\n   return 0;\n }\n-\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "67473417f29358f2707f913bb9cd885b587d6b4d", "filename": "gcc/testsuite/obj-c++.dg/const-str-8.mm", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-8.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-8.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-8.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,20 +1,23 @@\n /* Test for assigning compile-time constant-string objects to static variables.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n \n-/* { dg-options \"-fnext-runtime -fconstant-string-class=Foo -lobjc\" } */\n+/* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-do run { target *-*-darwin* } } */\n \n-\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdlib.h>\n-#include <objc/Object.h>\n \n @interface Foo: Object {\n   char *cString;\n   unsigned int len;\n }\n @end\n \n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+Class _FooClassReference;\n+#else\n struct objc_class _FooClassReference;\n+#endif\n \n @implementation Foo : Object\n - (char *)customString {\n@@ -37,3 +40,5 @@ int main () {\n   PrefsSynchronize();\n   return 0;\n }\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "28621334a6145a2b2d6340f0dc7e432cf29600be", "filename": "gcc/testsuite/obj-c++.dg/const-str-9.mm", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-9.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-9.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-9.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,19 +1,22 @@\n /* Test if ObjC constant strings get placed in the correct section.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n \n-/* { dg-options \"-fnext-runtime\" } */\n-/* { dg-do compile { target *-*-darwin* } } */\n-/* { dg-skip-if \"\" { *-*-darwin* } { \"-m64\" } { \"\" } } */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface NSConstantString: Object {\n   char *cString;\n   unsigned int len;\n }\n @end\n \n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+Class _NSConstantStringClassReference;\n+#else\n extern struct objc_class _NSConstantStringClassReference;\n+#endif\n \n const NSConstantString *appKey = @\"MyApp\";\n "}, {"sha": "6cde9beb569b99c215e283e28d3874c9f4e3e507", "filename": "gcc/testsuite/obj-c++.dg/cxx-class-1.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-class-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-class-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-class-1.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n /* Test that Objective-C++ is able to chew through a simple C++ class hierarchy.\n    This was broken in earlier ObjC++ incarnations.  */\n-\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n struct foo\n {\n   foo(void *a) {};"}, {"sha": "d89258aa6b75aef7eda4ccf4f2d5afd1e750fbdb", "filename": "gcc/testsuite/obj-c++.dg/cxx-ivars-1.mm", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-1.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,7 +3,7 @@\n // { dg-do run }\n // { dg-options \"-fno-objc-call-cxx-cdtors\" }\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdlib.h>\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n@@ -40,3 +40,4 @@ int main (void)\n   [obj manipulate_ivars];\n   [obj free];\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "e07437187a4e5f65c01d5ef76b27dcded870a03f", "filename": "gcc/testsuite/obj-c++.dg/cxx-ivars-2.mm", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-2.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -4,7 +4,7 @@\n // { dg-do run { xfail { \"*-*-*\" } } } PR27247/PR23681\n // { dg-options \"-fobjc-call-cxx-cdtors\" }\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdlib.h>\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n@@ -74,3 +74,4 @@ int main (void)\n   [foo free];\n   CHECK_IF(!ctor1_called && !ctor2_called && dtor1_called);\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "898ce6aed903cdcf8703ac428a0c2f164a828aeb", "filename": "gcc/testsuite/obj-c++.dg/cxx-ivars-3.mm", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-3.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,12 @@\n // Check if ObjC classes with non-POD C++ ivars are specially marked in the metadata.\n \n // { dg-do run { target *-*-darwin* } }\n-// { dg-options \"-fobjc-call-cxx-cdtors -fnext-runtime\" }\n+// { dg-options \"-fobjc-call-cxx-cdtors\" }\n+// { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } \n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n \n-#include <objc/objc-runtime.h>\n #include <stdlib.h>\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n@@ -37,10 +40,16 @@ int main (void)\n {\n   Class cls;\n \n-  cls = objc_getClass(\"Foo\");\n+  cls = objc_get_class(\"Foo\");\n+#if NEXT_OBJC_USE_NEW_INTERFACE\n+  CHECK_IF(class_isMetaClass(cls) & CLS_HAS_CXX_STRUCTORS);\n+  cls = objc_getClass(\"Bar\");\n+  CHECK_IF(!(class_isMetaClass(cls) & CLS_HAS_CXX_STRUCTORS));\n+#else\n   CHECK_IF(cls->info & CLS_HAS_CXX_STRUCTORS);\n   cls = objc_getClass(\"Bar\");\n   CHECK_IF(!(cls->info & CLS_HAS_CXX_STRUCTORS));\n-\n+#endif\n   return 0;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "a576bbd4f5801d99a8b28e63fd38aba6ed3ad33f", "filename": "gcc/testsuite/obj-c++.dg/cxx-scope-1.mm", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-1.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,8 +2,8 @@\n /* Author: Ziemowit Laski  <zlaski@apple.com> */\n \n /* { dg-do run } */\n-\n-#include <objc/Object.h>\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdlib.h>\n \n @class Derived;\n@@ -51,3 +51,4 @@ int main(void) {\n \n   return 0;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "21fed5085fc87a27d8a671b036d3b94bb89dd6e3", "filename": "gcc/testsuite/obj-c++.dg/cxx-scope-2.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-2.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,7 +3,7 @@\n \n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <iostream>\n #include <string>\n "}, {"sha": "0e8b26c72a6485a6c4ba1e404284ef4c6ac12faa", "filename": "gcc/testsuite/obj-c++.dg/defs.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdefs.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdefs.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdefs.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,12 +1,11 @@\n /* Check @defs() in Objective-C++ */\n /* Contributed by Devang Patel  <dpatel@apple.com>  */\n-\n-/* { dg-options \"-lobjc\" } */\n+/* { dg-options \"\" } */\n /* { dg-do run } */\n-\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdlib.h>\n #include <objc/objc.h>\n-#include <objc/Object.h>\n \n extern \"C\" void abort(void);\n \n@@ -41,3 +40,4 @@ int main()\n   \n   return 0;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "109746467ec27bdaf0c4b0f691701bfb876e0dad", "filename": "gcc/testsuite/obj-c++.dg/dg.exp", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdg.exp?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -31,7 +31,12 @@ dg-init\n set tests [lsort [find $srcdir/$subdir *.mm]]\n \n # Main loop.\n-dg-runtest $tests \"\" $DEFAULT_OBJCXXFLAGS\n+dg-runtest $tests \"-fgnu-runtime\" $DEFAULT_OBJCXXFLAGS\n+\n+# darwin targets can also run code with the NeXT runtime.\n+if [istarget \"*-*-darwin*\" ] {\n+dg-runtest $tests \"-fnext-runtime\" $DEFAULT_OBJCXXFLAGS\n+}\n \n # All done.\n dg-finish"}, {"sha": "b973abe2dbdcf9adfd2c2fbc2dc0f226dee481c5", "filename": "gcc/testsuite/obj-c++.dg/encode-4.mm", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-4.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -15,20 +15,16 @@ to the actual placement of parameters (relative to 'self')\n \n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run } */\n-\n-\n-#include <objc/objc.h>\n-#include <objc/Object.h>\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n \n #ifdef __NEXT_RUNTIME__\n #define METHOD Method\n-#define OBJC_GETCLASS objc_getClass\n-#define CLASS_GETINSTANCEMETHOD class_getInstanceMethod\n #else\n #include <objc/objc-api.h>\n #define METHOD Method_t\n-#define OBJC_GETCLASS objc_get_class\n-#define CLASS_GETINSTANCEMETHOD class_get_instance_method\n+#define method_get_types(M) (M)->method_types\n #endif\n \n #include <stdio.h>\n@@ -78,27 +74,28 @@ -(void) char:(signed char)c float:(float)f double:(double)d long:(long)l {\n \n int main(void) {\n   Foo *foo = [[Foo alloc] init];\n-  Class fooClass = OBJC_GETCLASS(\"Foo\");\n+  Class fooClass = objc_get_class(\"Foo\");\n   METHOD meth;\n   const char *string;\n \n-  meth = CLASS_GETINSTANCEMETHOD(fooClass, @selector(setRect:withInt:));\n+  meth = class_get_instance_method(fooClass, @selector(setRect:withInt:));\n   offs2 = 9999;\n-  sscanf(meth->method_types, \"@%u@%u:%u{_XXRect={?=ff}{?=ff}}%ui%u\", &offs1, &offs2, &offs3,\n+  sscanf(method_get_types(meth), \"@%u@%u:%u{_XXRect={?=ff}{?=ff}}%ui%u\", &offs1, &offs2, &offs3,\n       &offs4, &offs5);\n   CHECK_IF(!offs2);\n   [foo setRect:my_rect withInt:123];\n \n-  meth = CLASS_GETINSTANCEMETHOD(fooClass, @selector(char:float:double:long:));\n+  meth = class_get_instance_method(fooClass, @selector(char:float:double:long:));\n   offs2 = 9999;\n   if (sizeof (long) == 8)\n     string = \"v%u@%u:%uc%uf%ud%uq%u\";\n   else\n     string = \"v%u@%u:%uc%uf%ud%ul%u\";\n-  sscanf(meth->method_types, string, &offs1, &offs2, &offs3,  \n+  sscanf(method_get_types(meth), string, &offs1, &offs2, &offs3,  \n \t &offs4, &offs5, &offs6, &offs7);\n   CHECK_IF(!offs2);\n   [foo char:'c' float:2.3 double:3.5 long:2345L];\n \n   return 0;\n }  \n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "4959ea394a318c4cff1e70a1ad747a5de7fae117", "filename": "gcc/testsuite/obj-c++.dg/encode-5.mm", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-5.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,16 +1,22 @@\n /* Method encoding tests for stand-alone @protocol declarations.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run } */\n-\n-#include <objc/Protocol.h>\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../objc-obj-c++-shared/Protocol1.h\"\n #ifdef __cplusplus\n #define ProtoBool bool\n #else\n #define ProtoBool _Bool\n #endif\n \n-#ifndef __NEXT_RUNTIME__\n+#ifdef __NEXT_RUNTIME__\n+#define METHOD Method\n+#else\n #include <objc/objc-api.h>\n+#define METHOD Method_t\n+#define method_get_types(M) (M)->method_types\n #endif\n \n #include <stdio.h>\n@@ -37,6 +43,7 @@ + (ProtoBool **)getBool:(ObjCBool **)b;\n \n Protocol *proto = @protocol(Proto);\n struct objc_method_description *meth;\n+\n unsigned totsize, offs0, offs1, offs2, offs3, offs4, offs5, offs6, offs7;\n \n static void scan_initial(const char *pattern) {\n@@ -71,3 +78,4 @@ int main(void) {\n   CHECK_IF(totsize == offs2 + sizeof(ObjCBool **));\n   return 0;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "987d4a8ae2e5234428d73179a92712eb9613191f", "filename": "gcc/testsuite/obj-c++.dg/encode-6.mm", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-6.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,15 +1,12 @@\n /* Encoding tests for ObjC class layouts.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-lobjc\" } */\n+/* { dg-options \"\" } */\n /* { dg-do run } */\n-\n-#include <objc/Object.h>\n-#ifdef __NEXT_RUNTIME__\n-#include <objc/objc-class.h>\n-#define OBJC_GETCLASS objc_getClass\n-#else\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n+#ifndef __NEXT_RUNTIME__\n #include <objc/objc-api.h>\n-#define OBJC_GETCLASS objc_get_class\n #endif\n \n #include <stdlib.h>\n@@ -50,25 +47,43 @@ @implementation Int1\n @implementation Int2\n @end\n \n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+Ivar *ivar;\n+#else\n struct objc_ivar *ivar;\n+#endif\n \n static void check_ivar(const char *name, const char *type) {\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  CHECK_IF(!strcmp(ivar_getName(*ivar), name));\n+  CHECK_IF(!strcmp(ivar_getTypeEncoding(*ivar), type));\n+#else\n   CHECK_IF(!strcmp(ivar->ivar_name, name));\n   CHECK_IF(!strcmp(ivar->ivar_type, type));\n+#endif\n   ivar++;\n }\n \n int main(void) {\n-  ivar = ((Class)OBJC_GETCLASS(\"Int1\"))->ivars->ivar_list;\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  ivar = class_copyIvarList ((Class)objc_get_class(\"Int1\"), NULL);\n+#else\n+  ivar = ((Class)objc_get_class(\"Int1\"))->ivars->ivar_list;\n+#endif\n   check_ivar(\"a\", \"c\");\n   check_ivar(\"b\", \"c\");\n   check_ivar(\"int2\", \"@\\\"Int2\\\"\");\n   check_ivar(\"nested\", \n     \"{Nested=\\\"a\\\"f\\\"b\\\"f\\\"next\\\"@\\\"Int1\\\"\\\"innermost\\\"{Innermost=\\\"a\\\"C\\\"b\\\"C\\\"encl\\\"^{Nested}}}\");\n     \n-  ivar = ((Class)OBJC_GETCLASS(\"Int2\"))->ivars->ivar_list;\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  ivar = class_copyIvarList ((Class)objc_get_class(\"Int2\"), NULL);\n+#else\n+  ivar = ((Class)objc_get_class(\"Int2\"))->ivars->ivar_list;\n+#endif\n   check_ivar(\"innermost\", \"^{Innermost=CC^{Nested}}\");\n   check_ivar(\"base\", \"@\\\"Int1\\\"\");\n   \n   return 0;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "40b1510bef0ae5715afef60373e6a448535e6300", "filename": "gcc/testsuite/obj-c++.dg/encode-7.mm", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-7.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -9,20 +9,18 @@ we need to decay the arrays into pointers (as C does).\n \n /* Contributed by Alexander Malmberg <alexander@malmberg.org>  */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n #include <stdlib.h>\n #include <stdio.h>\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n #ifdef __NEXT_RUNTIME__\n #define METHOD Method\n-#define OBJC_GETCLASS objc_getClass\n-#define CLASS_GETINSTANCEMETHOD class_getInstanceMethod\n #else\n #include <objc/objc-api.h>\n #define METHOD Method_t\n-#define OBJC_GETCLASS objc_get_class\n-#define CLASS_GETINSTANCEMETHOD class_get_instance_method\n+#define method_get_types(M) (M)->method_types\n #endif\n \n @interface Test : Object\n@@ -49,7 +47,7 @@ -(void) test3: (Test [3][4])b {  /* { dg-warning \"conflicting types for .\\\\-\\\\(v\n \n int main(int argc, char **argv)\n {\n-  Class testClass = OBJC_GETCLASS(\"Test\");\n+  Class testClass = objc_get_class(\"Test\");\n   METHOD meth;\n \n   cc[0] = [Test new];\n@@ -60,16 +58,16 @@ int main(int argc, char **argv)\n   [*c test2: bb with: bb + 5];\n   CHECK_IF (bb[3] == 5);\n \n-  meth = CLASS_GETINSTANCEMETHOD(testClass, @selector(test2:with:));\n+  meth = class_get_instance_method(testClass, @selector(test2:with:));\n   offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = -1;\n-  sscanf(meth->method_types, \"v%d@%d:%d[%di]%d^i%d\", &offs1, &offs2, &offs3,\n+  sscanf(method_get_types(meth), \"v%d@%d:%d[%di]%d^i%d\", &offs1, &offs2, &offs3,\n       &offs4, &offs5, &offs6);\n   CHECK_IF (!offs2 && offs4 == 5 && offs3 > 0);\n   CHECK_IF (offs5 == 2 * offs3 && offs6 == 3 * offs3 && offs1 == 4 * offs3);\n   \n-  meth = CLASS_GETINSTANCEMETHOD(testClass, @selector(test3:));\n+  meth = class_get_instance_method(testClass, @selector(test3:));\n   offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = -1;\n-  sscanf(meth->method_types, \"v%d@%d:%d[%d[%d{Test=#f}]]%d\", &offs1, &offs2, &offs3,\n+  sscanf(method_get_types(meth), \"v%d@%d:%d[%d[%d{Test=#f}]]%d\", &offs1, &offs2, &offs3,\n       &offs4, &offs5, &offs6);\n   CHECK_IF (!offs2 && offs4 == 3 && offs5 == 4 && offs3 > 0);\n   CHECK_IF (offs6 == 2 * offs3 && offs1 == 3 * offs3);"}, {"sha": "de800d08d9480db0b743694e3f02bbe97d2050d2", "filename": "gcc/testsuite/obj-c++.dg/encode-8.mm", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-8.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-8.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-8.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,7 +3,6 @@\n    should be encoded as '*').  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run { xfail { \"*-*-*\" } } } PR27249 */\n-/* { dg-options \"-lobjc\" } */\n \n #include <string.h>           \n #include <stdlib.h>"}, {"sha": "ccd5bad5f2b43b0191287c6d2c6208e093b5c533", "filename": "gcc/testsuite/obj-c++.dg/except-1.mm", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexcept-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexcept-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexcept-1.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -8,14 +8,7 @@\n \n #include <stdio.h>\n #include <stdlib.h>\n-\n-\n-@interface Object {\n-  Class isa;  \n-}\n-+ alloc;\n-- init;\n-@end\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n // ObjectiveC class header\n @interface ObjCclass : Object {\n@@ -69,3 +62,5 @@ -(void) method2\n \t/* Shouldn't be here because we threw.  */\n \tabort ();\n }\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "fdfbcbd0c18c4e3a63842ac66f2b40b020a6bae4", "filename": "gcc/testsuite/obj-c++.dg/fix-and-continue-2.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffix-and-continue-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffix-and-continue-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffix-and-continue-2.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -6,7 +6,7 @@\n /* { dg-do assemble { target *-*-darwin* } } */\n /* { dg-options \"-mfix-and-continue\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Foo: Object\n + (Object *)indexableFileTypes;"}, {"sha": "c7e3bcc3a22e209f27a5857c4e8dae081e4446b9", "filename": "gcc/testsuite/obj-c++.dg/gnu-runtime-1.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-runtime-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-runtime-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-runtime-1.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,7 +2,7 @@\n    the system runtime used).  */\n /* Author: Ziemowit Laski <zlaski@apple.com>  */\n /* { dg-do compile } */\n-/* { dg-options \"-fgnu-runtime\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n #include <objc/Object.h>\n "}, {"sha": "dd53338895d4dac9f97a49690bc5712fb7f316e4", "filename": "gcc/testsuite/obj-c++.dg/gnu-runtime-2.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-runtime-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-runtime-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-runtime-2.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,7 +2,7 @@\n    regardless of runtime used on target system.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-fgnu-runtime\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n #include <objc/Object.h>\n #include <string.h>"}, {"sha": "429fce3e80b75752751ed16a32a11c3f818bce35", "filename": "gcc/testsuite/obj-c++.dg/gnu-runtime-3.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-runtime-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-runtime-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-runtime-3.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,7 +2,7 @@\n    the system runtime used).  */\n /* Author: Ziemowit Laski <zlaski@apple.com>  */\n /* { dg-do run } */\n-/* { dg-options \"-fgnu-runtime\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n #include <objc/Object.h>\n #include <stdlib.h>"}, {"sha": "274aa8c9a6d85a981fce4d3bd28ee37f9e052b9a", "filename": "gcc/testsuite/obj-c++.dg/isa-field-1.mm", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fisa-field-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fisa-field-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fisa-field-1.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,7 +2,7 @@\n /* { dg-do compile } */\n /* { dg-xfail-if \"PR23613\" { \"*-*-*\" } { \"*\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Object (Test)\n - (Class) test1: (id)object;\n@@ -42,3 +42,4 @@ Class test3(id object) {\n   Class cls = object->isa;\n   return cls;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "322de2fd470f72489807fb02ead248b79941ec3b", "filename": "gcc/testsuite/obj-c++.dg/ivar-list-semi.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fivar-list-semi.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fivar-list-semi.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fivar-list-semi.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n /* Allow for an optional semicolon following the ivar block.  */\n /* Contributed by: Ziemowit Laski <zlaski@apple.com>.  */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Tink : Object {\n @private"}, {"sha": "3cd4d1567fb114e4c1c7a267142c16b4918937e8", "filename": "gcc/testsuite/obj-c++.dg/layout-1.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flayout-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flayout-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flayout-1.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wpadded -Wpacked -Wabi\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Derived1: Object\n { }"}, {"sha": "6848572873ce961d03795342d9268605df5db505", "filename": "gcc/testsuite/obj-c++.dg/local-decl-1.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flocal-decl-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flocal-decl-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flocal-decl-1.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -5,7 +5,7 @@\n \n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Sprite: Object {\n   int sprite, spree;"}, {"sha": "5dffb017d4d2d872b346a3769b23efa70ca78c7b", "filename": "gcc/testsuite/obj-c++.dg/lookup-2.mm", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flookup-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flookup-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flookup-2.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run } */\n /* { dg-xfail-if \"PR23614\" { \"*-*-*\" } { \"*\" } { \"\" } } */\n-\n-#include <objc/Object.h>\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdlib.h>\n \n class MyWidget {\n@@ -55,3 +55,5 @@ int main(void) {\n \n   return 0;\n }\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "cac5d9791a9551145e72c52a7596d08a108397c3", "filename": "gcc/testsuite/obj-c++.dg/method-10.mm", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-10.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-10.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-10.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,9 @@\n /* Test for sending messages to aliased classes (and instances thereof).  */\n /* Author: Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-lobjc\" } */\n+/* { dg-options \"\" } */\n /* { dg-do run } */\n-\n-#include <objc/Object.h>\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdlib.h>\n \n #define CHECK_IF(expr) if(!(expr)) abort()\n@@ -43,3 +43,4 @@ int main(void) {\n   CHECK_IF([(Int1Alias *)int2typedef instanceMeth] == 1697);\n   return 0;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "6c6b1a038a0ddb2724ea0c8f7acfe3e8e73b214b", "filename": "gcc/testsuite/obj-c++.dg/method-11.mm", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-11.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-11.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-11.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,10 +1,11 @@\n /* Check if class references (generated for the NeXT runtime) are appropriately \n    folded.  This test is safe to run on all targets.  */\n /* Author: Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-fnext-runtime\" } */\n+\n /* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n typedef Object ObjectTypedef1;\n typedef ObjectTypedef1 ObjectTypedef2;"}, {"sha": "e3620708a9df354fce5b0bef0a81226a7a54279f", "filename": "gcc/testsuite/obj-c++.dg/method-12.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,7 +3,7 @@\n /* { dg-options \"-Wstrict-selector-match\" } */\n /* { dg-do compile } */\n \n-#include <objc/Protocol.h>\n+#include \"../objc-obj-c++-shared/Protocol1.h\"\n \n @interface Base\n - (unsigned)port;"}, {"sha": "18fb7cd3ae529fda35ed1606585e74d3bd3233f6", "filename": "gcc/testsuite/obj-c++.dg/method-13.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-13.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-13.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-13.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-Wstrict-selector-match\" } */\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Class1\n - (void)setWindow:(Object *)wdw;"}, {"sha": "055e8ca0c9bb6f93fc93ed6b75b5c6c00495a242", "filename": "gcc/testsuite/obj-c++.dg/method-15.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-15.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-15.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-15.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,7 +3,7 @@\n /* { dg-options \"-Wstrict-selector-match\" } */\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @protocol MyObject\n - (id)initWithData:(Object *)data;"}, {"sha": "cb60473b3456e3ce98a5f54adb160f215f562d6b", "filename": "gcc/testsuite/obj-c++.dg/method-17.mm", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-17.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-17.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-17.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,8 +3,8 @@\n    message sends (so that proper C/C++ argument conversions may\n    take place).  */\n /* { dg-do run } */\n-\n-#include <objc/Object.h>\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdlib.h>\n \n #define CHECK_IF(expr) if(!(expr)) abort()\n@@ -30,3 +30,4 @@ int main(void)\n \t[foo brokenType: (int)d floatingPoint: d];\n \treturn 0;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "5dca80494ceb02ea9aa2ed5231bb7347977e345b", "filename": "gcc/testsuite/obj-c++.dg/method-19.mm", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-19.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-19.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-19.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,15 +3,12 @@\n    root classes must be considered.  */\n /* Author: Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run } */\n-\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n \n-#ifdef __NEXT_RUNTIME__\n-#include <objc/objc-runtime.h>\n-#define OBJC_GETCLASS objc_getClass\n-#else\n+#ifndef __NEXT_RUNTIME__\n #include <objc/objc-api.h>\n-#define OBJC_GETCLASS objc_get_class\n #endif\n \n #include <stdlib.h>\n@@ -59,7 +56,7 @@ + (const char *) method2 { return \"Root::+method2\"; }\n \n int main(void)\n {\n-  Class obj = OBJC_GETCLASS(\"Derived\");\n+  Class obj = objc_get_class(\"Derived\");\n \n   /* None of the following should elicit compiler-time warnings.  */\n \n@@ -78,3 +75,4 @@ int main(void)\n \n   return 0;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "117d420e14ae1a11e5d6e5d6c30a86382420af89", "filename": "gcc/testsuite/obj-c++.dg/method-2.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-2.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -4,7 +4,7 @@\n \n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @class NSString;\n "}, {"sha": "898768d6d1c16d73987d9382c66fb518d66e0a1f", "filename": "gcc/testsuite/obj-c++.dg/method-21.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-21.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-21.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-21.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,7 +2,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wreturn-type -Wextra\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Foo: Object\n - (id) meth1;"}, {"sha": "6c21e799589f1a49a41f6ef48e71d534e467b0d1", "filename": "gcc/testsuite/obj-c++.dg/method-6.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-6.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -4,7 +4,7 @@\n \n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @class NotKnown;\n "}, {"sha": "1663ebc2132ffeb6395487a8e6d7dab951739488", "filename": "gcc/testsuite/obj-c++.dg/no-extra-load.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fno-extra-load.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fno-extra-load.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fno-extra-load.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,7 +2,7 @@\n \n // { dg-do compile }\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <iostream>\n \n @interface Greeter : Object"}, {"sha": "efbde1b4b2a9e0d809d0cbab0f501bee726ee0fb", "filename": "gcc/testsuite/obj-c++.dg/objc-gc-3.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fobjc-gc-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fobjc-gc-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fobjc-gc-3.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -5,7 +5,7 @@\n /* { dg-do compile { target *-*-darwin* } } */\n /* { dg-options \"-fobjc-gc\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @class MyWindow;\n "}, {"sha": "361bb9087e6866f28362a75661e8720990b88b10", "filename": "gcc/testsuite/obj-c++.dg/proto-lossage-2.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-2.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,7 +2,7 @@\n    provide a suitable method.  */\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @protocol Zot\n -(void) zot;"}, {"sha": "7a51d952248d2a953f5438964278117096fee8df", "filename": "gcc/testsuite/obj-c++.dg/proto-lossage-3.mm", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-3.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,9 +2,10 @@\n    a protocol with no instance/class methods respectively.\n    Problem report and original fix by richard@brainstorm.co.uk.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Protocol1.h\"\n #include <objc/objc.h>\n #include <objc/Object.h>\n-#include <objc/Protocol.h>\n \n @protocol NoInstanceMethods\n + testMethod;"}, {"sha": "caf1eab2cc767fc9d0103d7885a50ab0b16ce9de", "filename": "gcc/testsuite/obj-c++.dg/proto-qual-1.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-qual-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-qual-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-qual-1.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,8 +2,8 @@\n /* Author: Ziemowit Laski <zlaski@apple.com>  */\n \n /* { dg-do run } */\n-\n-#include <objc/Protocol.h>\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Protocol1.h\"\n #ifndef __NEXT_RUNTIME__\n #include <objc/objc-api.h>\n #endif"}, {"sha": "2b0a7be591df52743234d2cf686caca4af5bb3d0", "filename": "gcc/testsuite/obj-c++.dg/qual-types-1.mm", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fqual-types-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fqual-types-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fqual-types-1.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,8 +3,8 @@\n /* Author:  Ziemowit Laski <zlaski@apple.com>.  */\n \n /* { dg-do run } */\n-\n-#include <objc/Object.h>\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdlib.h>\n \n #define CHECK_IF(expr) if(!(expr)) abort()\n@@ -66,3 +66,4 @@ int main (void) {\n   CHECK_IF(FooHolder::counter == 0);\n   return 0;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "b3a3579e9273fa7cff5594975565877b063c5742", "filename": "gcc/testsuite/obj-c++.dg/selector-2.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-2.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-Wselector\" } */\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Foo\n @end"}, {"sha": "5a3a4b614b2ca0c9dcf9dab27dc0dbf4f1c97d33", "filename": "gcc/testsuite/obj-c++.dg/selector-5.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-5.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n /* { dg-options \"\" } */\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n int main()\n {"}, {"sha": "4ba8e2b366bcab8199e19478f912c476ed8011b6", "filename": "gcc/testsuite/obj-c++.dg/selector-6.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-6.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n /* { dg-options \"\" } */\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n int main()\n {"}, {"sha": "4ec0c3f471b93f6401bb03fbb47467f089b1fd75", "filename": "gcc/testsuite/obj-c++.dg/super-class-2.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-class-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-class-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-class-2.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -4,7 +4,7 @@\n \n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @class MyWpModule;\n "}, {"sha": "fc8b08b5ed6af846b7c229ad847094e063706574", "filename": "gcc/testsuite/obj-c++.dg/template-1.mm", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-1.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,8 +2,8 @@\n /* Author:  Ziemowit Laski <zlaski@apple.com>.  */\n \n /* { dg-do run } */\n-\n-#include <objc/Object.h>\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdlib.h>\n \n #define CHECK_IF(expr) if(!(expr)) abort()\n@@ -47,3 +47,4 @@ int main (void) {\n   CHECK_IF(count == 0);\n   return 0;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "a3b96b32d7eabdc8fb91feeda9d0211d70112fd8", "filename": "gcc/testsuite/obj-c++.dg/template-3.mm", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-3.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,8 +3,8 @@\n /* Contributed by Ziemowit Laski  <zlaski@apple.com>.  */\n \n /* { dg-do run } */\n-\n-#include <objc/Object.h>\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdlib.h>\n \n #define CHECK_IF(expr) if(!(expr)) abort()\n@@ -78,3 +78,4 @@ int main(void) {\n   \n   return 0;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "fa1132d9072f4235e95433b397f089dc795889e4", "filename": "gcc/testsuite/obj-c++.dg/template-4.mm", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-4.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,17 +1,13 @@\n /* Author:  Ziemowit Laski <zlaski@apple.com>.  */\n \n /* { dg-do run } */\n-/* { dg-skip-if \"\" { *-*-darwin* } { \"-m64\" } { \"\" } } */\n-\n-#include <objc/Object.h>\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n #include <stdarg.h>\n #include <stdlib.h>\n \n-#ifdef __NEXT_RUNTIME__\n-/* The following ain't pretty, but does allow us to have just one copy\n-   of next_mapping.h.  */\n-#include \"../objc/execute/next_mapping.h\"\n-#else\n+#ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n #endif\n \n@@ -80,3 +76,4 @@ int main(void) {\n   CHECK_IF(abc(a1, a2) * t.k == 35);\n   return 0;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "a32bfeed6e532ad1d2db987e425e85ff70830ec0", "filename": "gcc/testsuite/obj-c++.dg/try-catch-1.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-1.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -4,7 +4,7 @@\n /* { dg-options \"-fobjc-exceptions\" } */\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdio.h>\n #include <setjmp.h>\n "}, {"sha": "49e2c0cef15ce191e398f76a5c697ca1bbacf8af", "filename": "gcc/testsuite/obj-c++.dg/try-catch-11.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-11.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-11.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-11.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,10 +1,10 @@\n /* Ensure that @try/@catch blocks do not mess with types of\n    local objects (other than their volatile bits).  */\n \n-/* { dg-options \"-fobjc-exceptions -fnext-runtime\" } */\n+/* { dg-options \"-fobjc-exceptions\" } */\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @protocol Proto1\n - (int)meth1;"}, {"sha": "f39c22c878f785da9da0e27b10460b63e57dc96d", "filename": "gcc/testsuite/obj-c++.dg/try-catch-2.mm", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-2.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -6,7 +6,7 @@\n /* { dg-xfail-if \"PR23616\" { \"*-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-fobjc-exceptions\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdio.h>\n #include <stdlib.h>\n \n@@ -77,3 +77,4 @@ int main (void) {\n   test((Object *)-1);\n   return 0;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "7577c5bfa437eb2e77126e902146c1c5d88ee6da", "filename": "gcc/testsuite/obj-c++.dg/try-catch-3.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-3.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -5,7 +5,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-fobjc-exceptions\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n const char *foo(void)\n {"}, {"sha": "b69c980b2286358b9bc9dc81611163937da6029b", "filename": "gcc/testsuite/obj-c++.dg/try-catch-7.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-7.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-fobjc-exceptions\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n int main (int argc, const char * argv[]) {\n   Object * pool = [Object new];"}, {"sha": "b66662370259ba8dc568e6db75f303f211f82f91", "filename": "gcc/testsuite/obj-c++.dg/try-catch-8.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-8.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-8.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-8.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-fobjc-exceptions\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Derived: Object\n - (id) meth;"}, {"sha": "306c467a30f5ef568def98db884d9dcb44b1ebd2", "filename": "gcc/testsuite/obj-c++.dg/try-catch-9.mm", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-9.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-9.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-9.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -7,7 +7,7 @@\n /* { dg-prune-output \".*internal compiler error.*\" } */\n /* { dg-options \"-fobjc-exceptions -O2\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdlib.h>\n #include <stdio.h>\n \n@@ -65,3 +65,4 @@ int main(void) {\n   foo(15, &gf1);\n   return 0;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "79db8765ead812ec919eacf55826d0ad4468c44b", "filename": "gcc/testsuite/obj-c++.dg/typedef-alias-1.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftypedef-alias-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftypedef-alias-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftypedef-alias-1.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n /* Typedefs of ObjC types should work without any bogus warnings. */\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n typedef Object MyObject;\n "}, {"sha": "c6aea14bcb6dc0f4fce2f5060048bc301544e81c", "filename": "gcc/testsuite/obj-c++.dg/va-meth-1.mm", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fva-meth-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fva-meth-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fva-meth-1.mm?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,8 +1,8 @@\n /* Based on objc/execute/va_method.m, by Nicola Pero */\n \n /* { dg-do run } */\n-\n-#include <objc/Object.h>\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdarg.h>\n #include <stdlib.h>\n \n@@ -72,3 +72,4 @@ int main (void)\n   \n   return 0;\n }\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "4c38383ac4314ee77e8259c6807bee7099f56fe6", "filename": "gcc/testsuite/objc-obj-c++-shared/Object1-implementation.h", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1-implementation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1-implementation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1-implementation.h?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -0,0 +1,62 @@\n+/* This provides a minimal implementation of the Object root class.\n+ * It is split from the definition so that it can be placed\n+ * at the end of source files that require it.  This reduces\n+ * clutter in .s and other internmediate code while debugging.\n+*/\n+#ifndef _OBJC_OBJECT1_IMPLEMENTATION_H_\n+#define _OBJC_OBJECT1_IMPLEMENTATION_H_\n+#ifdef DO_NEXT_M64_OBJECT_IMPLEMENTATION\n+@implementation Object\n+\n++ initialize {\n+     return self;\n+}\n+- init {\n+     return self;\n+}\n+\n++ class {\n+    return object_getClass(self);\n+}\n+\n++ new {\n+     return [[self alloc] init];\n+}\n+\n++ free {\n+     return nil;\n+}\n+\n+- free {\n+     return object_dispose(self);\n+}\n+\n++ alloc {\n+     return class_createInstance(self, 0);\n+}\n+\n+\n+- class {\n+     return isa;\n+}\n+\n+\n+- superclass {\n+     return class_getSuperclass([self class]);\n+}\n+\n+- (const char *) name {\n+     return class_getName([self class]);\n+}\n+\n+-(BOOL)conformsTo:(Protocol *)protocol {\n+     Class cls;\n+     for (cls = [self class]; cls; cls = [cls superclass]) {\n+         if (class_conformsToProtocol(cls, protocol)) return YES;\n+     }\n+     return NO;\n+}\n+\n+@end\n+#endif /* NEEDS_OBJECT_IMPLEMENTATION */\n+#endif /* _OBJC_OBJECT1_IMPLEMENTATION_H_ */\n\\ No newline at end of file"}, {"sha": "3c7dd9aed724b911d8e0b808e977b35c23e40b3c", "filename": "gcc/testsuite/objc-obj-c++-shared/Object1.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.h?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -0,0 +1 @@\n+/* Object definition taken from <objc/Object.h>\r */\r#ifndef _OBJC_OBJECT1_H_\r#define _OBJC_OBJECT1_H_\r\r#undef DO_NEXT_M64_OBJECT_IMPLEMENTATION\r\r#ifndef __NEXT_RUNTIME__\r#  include <objc/Object.h>\r#else\r#  include \"next-abi.h\"\r#  ifndef NEXT_OBJC_USE_NEW_INTERFACE\r/* We are on a next system, or version, that is happy to compile V0 ABI */\r#    include <objc/Object.h>\r#  else\r#    if (NEXT_OBJC_ABI_VERSION==0)\r/* We are on a system that has V0 ABI implementation in libobjc.dylib.\r * However, we need to use the new accessors and pretend that the \r * structures are opaque to avoid 'deprecated' warnings\r */\r#      include <objc/Object.h>\r#    else\r/* We are on a system that includes a V2 ABI Object in libobjc.dylib.\r*/\r#      ifdef __OBJC2__\r/* ... and we have a V2 ABI compiler ..  */\r#        include <objc/Object.h>\r#      else\r/* We can't access the Object definition in libobjc.dylib because\r * we can't yet generate OBJC2 code.\r *\r * So we'll roll our own Object - purely for the sake of compile\r * checks - the code is unlikely to run...\r*/\r#        ifndef _OBJC_OBJECT_H_\r#        define _OBJC_OBJECT_H_\r\r#include <stdarg.h>\r#import <objc/objc-runtime.h>\r\r/* This is a cut-down Object with only the methods currently required\r   by the testsuite declared.\r   \r   For those executables that require an implementation (to link) this\r   can be provided in a given test by placing:\r   #include \"path/to/objc-c++shared/Object1-implementation.h\"\r   at the end of the source for the test.\r*/\r\r@interface Object \r{\r\tClass isa; /* A pointer to the instance's class structure */\r}\r+ initialize;\r- init;\r\r+ new;\r+ free;\r- free;\r+ alloc;\r//- copy;\r//+ allocFromZone:(void *)zone;\r//- copyFromZone:(void *)zone;\r//- (void *)zone;\r\r+ class;\r//+ superclass;\r//+ (const char *) name;\r- class;\r- superclass;\r- (const char *) name;\r\r//- self;\r//- (unsigned int) hash;\r//-(BOOL) isEqual:anObject;\r\r/* Testing inheritance relationships */\r\r//- (BOOL) isKindOf: aClassObject;\r//- (BOOL) isMemberOf: aClassObject;\r//- (BOOL) isKindOfClassNamed: (const char *)aClassName;\r//- (BOOL) isMemberOfClassNamed: (const char *)aClassName;\r\r/* Testing class functionality */\r\r//+ (BOOL) instancesRespondTo:(SEL)aSelector;\r//- (BOOL) respondsTo:(SEL)aSelector;\r\r/* Testing protocol conformance */\r\r- (BOOL) conformsTo: (Protocol *)aProtocolObject;\r//+ (BOOL) conformsTo: (Protocol *)aProtocolObject;\r\r/* Obtaining method descriptors from protocols */\r\r//- (struct objc_method_description *) descriptionForMethod:(SEL)aSel;\r//+ (struct objc_method_description *) descriptionForInstanceMethod:(SEL)aSel;\r\r/* Obtaining method handles */\r\r//- (IMP) methodFor:(SEL)aSelector;\r//+ (IMP) instanceMethodFor:(SEL)aSelector;\r\r/* Sending messages determined at run time */\r\r//- perform:(SEL)aSelector;\r//- perform:(SEL)aSelector with:anObject;\r//- perform:(SEL)aSelector with:object1 with:object2;\r\r/* Posing */\r\r//+ poseAs: aClassObject;\r\r/* Enforcing intentions */\r \r//- subclassResponsibility:(SEL)aSelector;\r//- notImplemented:(SEL)aSelector;\r\r/* Error handling */\r\r//- doesNotRecognize:(SEL)aSelector;\r//- error:(const char *)aString, ...;\r\r/* Debugging */\r\r//- (void) printForDebugger:(void *)stream;\r\r/* Archiving */\r\r//- awake;\r//- write:(void *)stream;\r//- read:(void *)stream;\r//+ (int) version;\r//+ setVersion: (int) aVersion;\r\r/* Forwarding */\r\r//- forward: (SEL)sel : (marg_list)args;\r//- performv: (SEL)sel : (marg_list)args;\r\r@end\r\r#define DO_NEXT_M64_OBJECT_IMPLEMENTATION\r\r#        endif /* _OBJC_OBJECT_H_ */\r#      endif /* __OBJC2__ */\r#      endif /* ABI=0 */\r#    endif /* NEXT_OBJC_USE_NEW_INTERFACE */\r#   endif /* __NEXT_RUNTIME__ */\r#endif /* _OBJC_OBJECT1_H_ */\r\n\\ No newline at end of file"}, {"sha": "d375ac0d530c1ae1aa69e5eaa0974f503c4725db", "filename": "gcc/testsuite/objc-obj-c++-shared/Protocol1.h", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FProtocol1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FProtocol1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FProtocol1.h?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -0,0 +1,52 @@\n+/* \n+ * Temporary work-around to avoid the need for method attributes in\n+ * the NeXT Runtime Protocol header.\n+ */\n+#ifndef _OBJC_PROTOCOL1_H_\n+#define _OBJC_PROTOCOL1_H_\n+\n+#  ifndef __NEXT_RUNTIME__\n+#    include <objc/Protocol.h>\n+#  else\n+#    include \"next-abi.h\"\n+#    ifndef NEXT_OBJC_USE_NEW_INTERFACE\n+/* We are on a NeXT version without method __attributes__ */\n+#      import <objc/Protocol.h>\n+#    else\n+/* We make our own interface without the deprecation messages \n+ * This is essentially <objc/Protocol.h> without the OBJC2\n+ * flags.\n+ * \n+ */\n+#      ifndef _OBJC_PROTOCOL_H_\n+#      define _OBJC_PROTOCOL_H_\n+#      import \"Object1.h\"\n+\n+@interface Protocol : Object\n+{\n+@private\n+    char *protocol_name ;\n+    struct objc_protocol_list *protocol_list ;\n+    struct objc_method_description_list *instance_methods ;\n+    struct objc_method_description_list *class_methods ;\n+}\n+\n+/* Obtaining attributes intrinsic to the protocol */\n+#if (NEXT_OBJC_ABI_VERSION==0)\n+- (const char *)name ; /* Not avail in v2, deprecated in prior */\n+/* Testing protocol conformance */\n+- (BOOL) conformsTo: (Protocol *)aProtocolObject ; /* Not avail in v2 */\n+#endif\n+\n+/* Looking up information specific to a protocol */\n+/* Deprecated, but available */\n+\n+- (struct objc_method_description *) descriptionForInstanceMethod:(SEL)aSel ;\n+- (struct objc_method_description *) descriptionForClassMethod:(SEL)aSel ;\n+\n+@end\n+\n+#      endif /* __NEXT_RUNTIME__ */\n+#    endif /* _OBJC_PROTOCOL_H_ */\n+#  endif /* NEXT_OBJC_ABI_VERSION */\n+#endif /* _OBJC_PROTOCOL1_H_ */"}, {"sha": "21a49d341e11de4643eddf3c4b5b21f0826102cd", "filename": "gcc/testsuite/objc-obj-c++-shared/next-abi.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-abi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-abi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-abi.h?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -0,0 +1,42 @@\n+\n+#ifndef _OBJC_NEXT_ABI_H_\n+#define _OBJC_NEXT_ABI_H_\n+/* Produce a define that allows us to figure out what facilities are\n+   available for this gcc and OS combination.\n+*/\n+\n+/* By default we do nothing - therefore ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+ * is reliable for detecting \n+ *  (a) versions of the compiler that are transitional to the new next ABI\n+ *  (b) versions of the target that require the new ABI.\n+ *\n+ * This applies for versions of OSX >= 10.5 (darwin9).\n+ *\n+ * A compiler capable of producing ObjC V2 ABI should define __OBJC2__\n+*/\n+\n+#undef NEXT_OBJC_ABI_VERSION\n+#undef NEXT_OBJC_USE_NEW_INTERFACE\n+\n+#ifdef __NEXT_RUNTIME__\n+#  if (MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_5 || __OBJC2__)\n+    /* We have to use an updated interface for 32bit NeXT to avoid\n+     * 'deprecated' warnings. \n+     * For 64bit NeXT the ABI is different (and the interfaces 'deprecated'\n+     * for 32bit have been removed).\n+    */\n+#    define NEXT_OBJC_USE_NEW_INTERFACE 1\n+#    if __OBJC2__ || __LP64__\n+       /* We have OBJC v2 ABI compiler, \n+          (or, at least, the available NeXT runtime requires one) */\n+#      define NEXT_OBJC_ABI_VERSION 2\n+#    else\n+       /* We leave it open to define ABI 1 if and when we implement those \n+        * extensions.\n+       */\n+#      define NEXT_OBJC_ABI_VERSION 0\n+#    endif\n+#  endif\n+#endif\n+\n+#endif /* _OBJC_NEXT_ABI_H_ */"}, {"sha": "c59993a9ec40010a5975458b6c4c6662dbad532f", "filename": "gcc/testsuite/objc-obj-c++-shared/next-mapping.h", "status": "added", "additions": 976, "deletions": 0, "changes": 976, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-mapping.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-mapping.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-mapping.h?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -0,0 +1,976 @@\n+/* This file \"renames\" various ObjC GNU runtime entry points\n+   (and fakes the existence of several others)\n+   if the NeXT runtime is being used.  */\n+/* Authors: Ziemowit Laski <zlaski@apple.com>  */\n+/*\t    David Ayers <d.ayers@inode.at>  */\n+/* Darwin 64bit/OBJC2 modifications Iain Sandoe */ \n+\n+#ifdef __NEXT_RUNTIME__\n+/* Includes next-abi.h to set NEXT_OBJC_USE_NEW_INTERFACE etc.*/\n+#ifndef _OBJC_OBJECT1_H_\n+#include \"Object1.h\"\n+#endif\n+#include <objc/objc-class.h>\n+#include <ctype.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#define objc_get_class(C) objc_getClass(C)\n+#define objc_get_meta_class(C) objc_getMetaClass(C)\n+#define class_get_class_method(C, S) class_getClassMethod(C, S)\n+#define class_get_instance_method(C, S) class_getInstanceMethod(C, S)\n+#define sel_get_name(S) sel_getName(S)\n+#define class_create_instance(C) class_createInstance(C, 0)\n+#define\tclass_get_class_name(C) object_getClassName(C)\n+\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+#  define object_class_name(O) (object_getClassName(O)) \n+#  define object_get_class(O) (object_getClass((id)O))\n+#  define object_get_super_class(O) class_get_super_class(object_get_class(O))\n+#  define object_is_class(O) class_is_meta_class(object_get_class(O))\n+#  define object_is_meta_class(O) (object_is_class(O) && class_is_meta_class(O) \\\n+\t\t\t\t\t\t && class_is_meta_class(object_get_class(O)))\n+\n+#  define method_get_imp(M) (method_getImplementation((Method)M))\n+#  define method_get_types(M) (method_getTypeEncoding((Method)M))\n+\n+#  define class_get_super_class(C) (class_getSuperclass((Class)C))\n+#  define class_is_meta_class(C) (class_isMetaClass((Class)C) ? YES: NO)\n+#  define class_is_class(C) (class_is_meta_class(C) == NO)\n+\n+#else\n+#  define object_class_name(O) (O->name) \n+#  define object_get_super_class(O) class_get_super_class(*(struct objc_class **)O)\n+#  define object_get_class(O) (*(struct objc_class **)O)\n+#  define object_is_class(O) class_is_meta_class(*(struct objc_class **)O)\n+#  define object_is_meta_class(O) (class_is_meta_class(O) && class_is_meta_class(*(struct objc_class **)O))\n+\n+#  define method_get_imp(M) (((Method)M)->method_imp)\n+#  define method_get_types(M) (((Method)M)->method_types)\n+\n+#  define class_get_super_class(C) (((struct objc_class *)C)->super_class)\n+#  define class_is_meta_class(C) (CLS_GETINFO((struct objc_class *)C, CLS_META)? YES: NO)\n+#  define class_is_class(C) (CLS_GETINFO((struct objc_class *)C, CLS_CLASS)? YES: NO)\n+#endif\n+\n+#define objc_lookup_class(N) objc_lookUpClass(N)\n+\n+/* You need either an empty +initialize method or an empty -forward:: method. \n+   The NeXT runtime unconditionally sends +initialize to classes when they are \n+   first used, and unconditionally tries to forward methods that the class \n+   doesn't understand (including +initialize). If you have neither +initialize \n+   nor -forward::, the runtime complains.  \n+\n+   The simplest workaround is to add\n+\n+      + initialize { return self; }\n+\n+   to every root class @implementation.  */\n+\n+#ifndef NULL\n+#define NULL 0\n+#endif\n+\n+/* The following is necessary to \"cover\" the bf*.m test cases on NeXT.  */\n+\n+#undef  MAX\n+#undef  MIN\n+#undef  ROUND\n+\n+#ifdef __cplusplus\n+#  define MAX(X, Y) ((X > Y) ? X : Y)\n+#  define MIN(X, Y) ((X < Y) ? X : Y)\n+#  define ROUND(V, A) (A * ((V + A - 1) / A))\n+#else\n+#  define MAX(X, Y)                    \\\n+  ({ typeof (X) __x = (X), __y = (Y); \\\n+     (__x > __y ? __x : __y); })\n+#  define MIN(X, Y)                    \\\n+  ({ typeof (X) __x = (X), __y = (Y); \\\n+     (__x < __y ? __x : __y); })\n+#  define ROUND(V, A) \\\n+  ({ typeof (V) __v = (V); typeof (A) __a = (A); \\\n+     __a * ((__v+__a - 1)/__a); })\n+#endif\n+\n+#define BITS_PER_UNIT __CHAR_BIT__\n+typedef struct{ char a; } __small_struct;\n+#define STRUCTURE_SIZE_BOUNDARY (BITS_PER_UNIT * sizeof (__small_struct))\n+\n+/* Not sure why the following are missing from NeXT objc headers... */\n+\n+#ifndef _C_LNG_LNG\n+#define _C_LNG_LNG  'q'\n+#endif\n+#ifndef _C_ULNG_LNG\n+#define _C_ULNG_LNG 'Q'\n+#endif\n+#ifndef _C_ATOM\n+#define _C_ATOM     '%'\n+#endif\n+#ifndef _C_BOOL\n+#define _C_BOOL     'B'\n+#endif\n+\n+#define _C_CONST        'r'\n+#define _C_IN           'n'\n+#define _C_INOUT        'N'\n+#define _C_OUT          'o'\n+#define _C_BYCOPY       'O'\n+#define _C_BYREF        'R'\n+#define _C_ONEWAY       'V'\n+#define _C_GCINVISIBLE  '!'\n+   \n+#define _F_CONST        0x01\n+#define _F_IN           0x01\n+#define _F_OUT          0x02\n+#define _F_INOUT        0x03\n+#define _F_BYCOPY       0x04  \n+#define _F_BYREF        0x08  \n+#define _F_ONEWAY       0x10\n+#define _F_GCINVISIBLE  0x20\n+\n+struct objc_struct_layout\n+{\n+  const char *original_type;\n+  const char *type;\n+  const char *prev_type;\n+  unsigned int record_size; \n+  unsigned int record_align;\n+};\n+\n+typedef union arglist {\n+  char *arg_ptr;\n+  char arg_regs[sizeof (char*)];\n+} *arglist_t;                   /* argument frame */\n+\n+const char *objc_skip_typespec (const char *type);\n+void objc_layout_structure_get_info (struct objc_struct_layout *layout,\n+    unsigned int *offset, unsigned int *align, const char **type);\n+void objc_layout_structure (const char *type,\n+    struct objc_struct_layout *layout);\n+BOOL objc_layout_structure_next_member (struct objc_struct_layout *layout);\n+void objc_layout_finish_structure (struct objc_struct_layout *layout,\n+    unsigned int *size, unsigned int *align);\n+int objc_aligned_size (const char *type);\n+\n+/*\n+  return the size of an object specified by type\n+*/\n+\n+int\n+objc_sizeof_type (const char *type)\n+{\n+  /* Skip the variable name if any */\n+  if (*type == '\"')\n+    {\n+      for (type++; *type++ != '\"';)\n+\t/* do nothing */;\n+    }\n+\n+  switch (*type) {\n+  case _C_ID:\n+    return sizeof (id);\n+    break;\n+\n+  case _C_CLASS:\n+    return sizeof (Class);\n+    break;\n+\n+  case _C_SEL:\n+    return sizeof (SEL);\n+    break;\n+\n+  case _C_CHR:\n+    return sizeof (char);\n+    break;\n+\n+  case _C_UCHR:\n+    return sizeof (unsigned char);\n+    break;\n+\n+  case _C_SHT:\n+    return sizeof (short);\n+    break;\n+\n+  case _C_USHT:\n+    return sizeof (unsigned short);\n+    break;\n+\n+  case _C_INT:\n+    return sizeof (int);\n+    break;\n+\n+  case _C_UINT:\n+    return sizeof (unsigned int);\n+    break;\n+\n+  case _C_LNG:\n+    return sizeof (long);\n+    break;\n+\n+  case _C_ULNG:\n+    return sizeof (unsigned long);\n+    break;\n+\n+  case _C_LNG_LNG:\n+    return sizeof (long long);\n+    break;\n+\n+  case _C_ULNG_LNG:\n+    return sizeof (unsigned long long);\n+    break;\n+\n+  case _C_FLT:\n+    return sizeof (float);\n+    break;\n+\n+  case _C_DBL:\n+    return sizeof (double);\n+    break;\n+\n+  case _C_PTR:\n+  case _C_ATOM:\n+  case _C_CHARPTR:\n+    return sizeof (char *);\n+    break;\n+\n+  case _C_ARY_B:\n+    {\n+      int len = atoi (type + 1);\n+      while (isdigit ((unsigned char)*++type))\n+\t;\n+      return len * objc_aligned_size (type);\n+    }\n+    break;\n+\n+  case _C_BFLD:\n+    {\n+      /* The NeXT encoding of bitfields is _still_: b 'size' */\n+      int size = atoi (type + 1);\n+      /* Return an upper bound on byte size */\n+      return (size + BITS_PER_UNIT - 1) / BITS_PER_UNIT;\n+    }\n+\n+  case _C_STRUCT_B:\n+    {\n+      struct objc_struct_layout layout;\n+      unsigned int size;\n+\n+      objc_layout_structure (type, &layout);\n+      while (objc_layout_structure_next_member (&layout))\n+        /* do nothing */ ;\n+      objc_layout_finish_structure (&layout, &size, NULL);\n+\n+      return size;\n+    }\n+\n+  case _C_UNION_B:\n+    {\n+      int max_size = 0;\n+      while (*type != _C_UNION_E && *type++ != '=')\n+\t/* do nothing */;\n+      while (*type != _C_UNION_E)\n+\t{\n+\t  /* Skip the variable name if any */\n+\t  if (*type == '\"')\n+\t    {\n+\t      for (type++; *type++ != '\"';)\n+\t\t/* do nothing */;\n+\t    }\n+\t  max_size = MAX (max_size, objc_sizeof_type (type));\n+\t  type = objc_skip_typespec (type);\n+\t}\n+      return max_size;\n+    }\n+  }\n+  return 0; /* error */\n+}\n+\n+\n+/*\n+  Return the alignment of an object specified by type\n+*/\n+\n+int\n+objc_alignof_type (const char *type)\n+{\n+  /* Skip the variable name if any */\n+  if (*type == '\"')\n+    {\n+      for (type++; *type++ != '\"';)\n+\t/* do nothing */;\n+    }\n+  switch (*type) {\n+  case _C_ID:\n+    return __alignof__ (id);\n+    break;\n+\n+  case _C_CLASS:\n+    return __alignof__ (Class);\n+    break;\n+\n+  case _C_SEL:\n+    return __alignof__ (SEL);\n+    break;\n+\n+  case _C_CHR:\n+    return __alignof__ (char);\n+    break;\n+\n+  case _C_UCHR:\n+    return __alignof__ (unsigned char);\n+    break;\n+\n+  case _C_SHT:\n+    return __alignof__ (short);\n+    break;\n+\n+  case _C_USHT:\n+    return __alignof__ (unsigned short);\n+    break;\n+\n+  case _C_INT:\n+  case _C_BFLD: /* This is for the NeXT only */\n+    return __alignof__ (int);\n+    break;\n+\n+  case _C_UINT:\n+    return __alignof__ (unsigned int);\n+    break;\n+\n+  case _C_LNG:\n+    return __alignof__ (long);\n+    break;\n+\n+  case _C_ULNG:\n+    return __alignof__ (unsigned long);\n+    break;\n+\n+  case _C_LNG_LNG:\n+    return __alignof__ (long long);\n+    break;\n+\n+  case _C_ULNG_LNG:\n+    return __alignof__ (unsigned long long);\n+    break;\n+\n+  case _C_FLT:\n+    return __alignof__ (float);\n+    break;\n+\n+  case _C_DBL:\n+    return __alignof__ (double);\n+    break;\n+\n+  case _C_PTR:\n+  case _C_ATOM:\n+  case _C_CHARPTR:\n+    return __alignof__ (char *);\n+    break;\n+\n+  case _C_ARY_B:\n+    while (isdigit ((unsigned char)*++type))\n+      /* do nothing */;\n+    return objc_alignof_type (type);\n+\n+  case _C_STRUCT_B:\n+    {\n+      struct objc_struct_layout layout;\n+      unsigned int align;\n+\n+      objc_layout_structure (type, &layout);\n+      while (objc_layout_structure_next_member (&layout))\n+        /* do nothing */;\n+      objc_layout_finish_structure (&layout, NULL, &align);\n+\n+      return align;\n+    }\n+\n+  case _C_UNION_B:\n+    {\n+      int maxalign = 0;\n+      while (*type != _C_UNION_E && *type++ != '=')\n+\t/* do nothing */;\n+      while (*type != _C_UNION_E)\n+\t{\n+\t  /* Skip the variable name if any */\n+\t  if (*type == '\"')\n+\t    {\n+\t      for (type++; *type++ != '\"';)\n+\t\t/* do nothing */;\n+\t    }\n+\t  maxalign = MAX (maxalign, objc_alignof_type (type));\n+\t  type = objc_skip_typespec (type);\n+\t}\n+      return maxalign;\n+    }\n+  }\n+  return 0; /* error */\n+}\n+\n+/*\n+  The aligned size if the size rounded up to the nearest alignment.\n+*/\n+\n+int\n+objc_aligned_size (const char *type)\n+{\n+  int size, align;\n+\n+  /* Skip the variable name */\n+  if (*type == '\"')\n+    {\n+      for (type++; *type++ != '\"';)\n+\t/* do nothing */;\n+    }\n+\n+  size = objc_sizeof_type (type);\n+  align = objc_alignof_type (type);\n+\n+  return ROUND (size, align);\n+}\n+\n+/*\n+  The size rounded up to the nearest integral of the wordsize, taken\n+  to be the size of a void *.\n+*/\n+\n+int\n+objc_promoted_size (const char *type)\n+{\n+  int size, wordsize;\n+\n+  /* Skip the variable name */\n+  if (*type == '\"')\n+    {\n+      for (type++; *type++ != '\"';)\n+\t/* do nothing */;\n+    }\n+\n+  size = objc_sizeof_type (type);\n+  wordsize = sizeof (void *);\n+\n+  return ROUND (size, wordsize);\n+}\n+\n+/*\n+  Skip type qualifiers.  These may eventually precede typespecs\n+  occurring in method prototype encodings.\n+*/\n+\n+inline const char *\n+objc_skip_type_qualifiers (const char *type)\n+{\n+  while (*type == _C_CONST\n+\t || *type == _C_IN\n+\t || *type == _C_INOUT\n+\t || *type == _C_OUT\n+\t || *type == _C_BYCOPY\n+         || *type == _C_BYREF\n+\t || *type == _C_ONEWAY\n+\t || *type == _C_GCINVISIBLE)\n+    {\n+      type += 1;\n+    }\n+  return type;\n+}\n+\n+\n+/*\n+  Skip one typespec element.  If the typespec is prepended by type\n+  qualifiers, these are skipped as well.\n+*/\n+\n+const char *\n+objc_skip_typespec (const char *type)\n+{\n+  /* Skip the variable name if any */\n+  if (*type == '\"')\n+    {\n+      for (type++; *type++ != '\"';)\n+\t/* do nothing */;\n+    }\n+\n+  type = objc_skip_type_qualifiers (type);\n+\n+  switch (*type) {\n+\n+  case _C_ID:\n+    /* An id may be annotated by the actual type if it is known\n+       with the @\"ClassName\" syntax */\n+\n+    if (*++type != '\"')\n+      return type;\n+    else\n+      {\n+\twhile (*++type != '\"')\n+\t  /* do nothing */;\n+\treturn type + 1;\n+      }\n+\n+    /* The following are one character type codes */\n+  case _C_CLASS:\n+  case _C_SEL:\n+  case _C_CHR:\n+  case _C_UCHR:\n+  case _C_CHARPTR:\n+  case _C_ATOM:\n+  case _C_SHT:\n+  case _C_USHT:\n+  case _C_INT:\n+  case _C_UINT:\n+  case _C_LNG:\n+  case _C_ULNG:\n+  case _C_LNG_LNG:\n+  case _C_ULNG_LNG:\n+  case _C_FLT:\n+  case _C_DBL:\n+  case _C_VOID:\n+  case _C_UNDEF:\n+    return ++type;\n+    break;\n+\n+  case _C_ARY_B:\n+    /* skip digits, typespec and closing ']' */\n+\n+    while (isdigit ((unsigned char)*++type))\n+      ;\n+    type = objc_skip_typespec (type);\n+    if (*type == _C_ARY_E)\n+      return ++type;\n+    else\n+      break; /* error */\n+\n+  case _C_BFLD:\n+      /* The NeXT encoding for bitfields is _still_: b 'size' */\n+    while (isdigit ((unsigned char)*++type))\n+      ;\t/* skip type and size */\n+    return type;\n+\n+  case _C_STRUCT_B:\n+    /* skip name, and elements until closing '}'  */\n+\n+    while (*type != _C_STRUCT_E && *type++ != '=')\n+      ;\n+    while (*type != _C_STRUCT_E)\n+      {\n+\ttype = objc_skip_typespec (type);\n+      }\n+    return ++type;\n+\n+  case _C_UNION_B:\n+    /* skip name, and elements until closing ')'  */\n+\n+    while (*type != _C_UNION_E && *type++ != '=')\n+      ;\n+    while (*type != _C_UNION_E)\n+      {\n+\ttype = objc_skip_typespec (type);\n+      }\n+    return ++type;\n+\n+  case _C_PTR:\n+    /* Just skip the following typespec */\n+\n+    return objc_skip_typespec (++type);\n+  }\n+  return 0; /* error */\n+}\n+\n+/*\n+  Skip an offset as part of a method encoding.  This is prepended by a\n+  '+' if the argument is passed in registers.\n+*/\n+inline const char *\n+objc_skip_offset (const char *type)\n+{\n+  if (*type == '+')\n+    type++;\n+  while (isdigit ((unsigned char) *++type))\n+    ;\n+  return type;\n+}\n+\n+/*\n+  Skip an argument specification of a method encoding.\n+*/\n+const char *\n+objc_skip_argspec (const char *type)\n+{\n+  type = objc_skip_typespec (type);\n+  type = objc_skip_offset (type);\n+  return type;\n+}\n+\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+typedef void *PMETH;\n+#else\n+typedef struct objc_method *PMETH;\n+#endif\n+\n+/*\n+  Return the number of arguments that the method MTH expects.\n+  Note that all methods need two implicit arguments `self' and\n+  `_cmd'.\n+*/\n+int\n+method_get_number_of_arguments (PMETH mth)\n+{\n+  int i = 0;\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  const char *type = method_getTypeEncoding((Method)mth);\n+#else\n+  const char *type = mth->method_types;\n+#endif\n+  while (*type)\n+    {\n+      type = objc_skip_argspec (type);\n+      i += 1;\n+    }\n+  return i - 1;\n+}\n+\n+/*\n+  Return the size of the argument block needed on the stack to invoke\n+  the method MTH.  This may be zero, if all arguments are passed in\n+  registers.\n+*/\n+\n+int\n+method_get_sizeof_arguments (PMETH mth)\n+{\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  const char *type = objc_skip_typespec (method_getTypeEncoding((Method)mth));\n+#else\n+  const char *type = objc_skip_typespec (mth->method_types);\n+#endif\n+  return atoi (type);\n+}\n+\n+/*\n+  Return a pointer to the next argument of ARGFRAME.  type points to\n+  the last argument.  Typical use of this look like:\n+\n+  {\n+    char *datum, *type;\n+    for (datum = method_get_first_argument (method, argframe, &type);\n+         datum; datum = method_get_next_argument (argframe, &type))\n+      {\n+        unsigned flags = objc_get_type_qualifiers (type);\n+        type = objc_skip_type_qualifiers (type);\n+\tif (*type != _C_PTR)\n+          [portal encodeData: datum ofType: type];\n+\telse\n+\t  {\n+\t    if ((flags & _F_IN) == _F_IN)\n+              [portal encodeData: *(char **) datum ofType: ++type];\n+\t  }\n+      }\n+  }\n+*/\n+\n+char *\n+method_get_next_argument (arglist_t argframe, const char **type)\n+{\n+  const char *t = objc_skip_argspec (*type);\n+\n+  if (*t == '\\0')\n+    return 0;\n+\n+  *type = t;\n+  t = objc_skip_typespec (t);\n+\n+  if (*t == '+')\n+    return argframe->arg_regs + atoi (++t);\n+  else\n+    return argframe->arg_ptr + atoi (t);\n+}\n+\n+/*\n+  Return a pointer to the value of the first argument of the method\n+  described in M with the given argumentframe ARGFRAME.  The type\n+  is returned in TYPE.  type must be passed to successive calls of\n+  method_get_next_argument.\n+*/\n+char *\n+method_get_first_argument (PMETH m,\n+\t\t\t   arglist_t argframe,\n+\t\t\t   const char **type)\n+{\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  *type = method_getTypeEncoding((Method)m);\n+#else\n+  *type = m->method_types;\n+#endif\n+\n+  return method_get_next_argument (argframe, type);\n+}\n+\n+/*\n+   Return a pointer to the ARGth argument of the method\n+   M from the frame ARGFRAME.  The type of the argument\n+   is returned in the value-result argument TYPE\n+*/\n+\n+char *\n+method_get_nth_argument (PMETH m,\n+\t\t\t arglist_t argframe, int arg,\n+\t\t\t const char **type)\n+{\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  const char *t = objc_skip_argspec (method_getTypeEncoding((Method)m));\n+#else\n+  const char *t = objc_skip_argspec (m->method_types);\n+#endif\n+\n+  if (arg > method_get_number_of_arguments (m))\n+    return 0;\n+\n+  while (arg--)\n+    t = objc_skip_argspec (t);\n+\n+  *type = t;\n+  t = objc_skip_typespec (t);\n+\n+  if (*t == '+')\n+    return argframe->arg_regs + atoi (++t);\n+  else\n+    return argframe->arg_ptr + atoi (t);\n+}\n+\n+unsigned\n+objc_get_type_qualifiers (const char *type)\n+{\n+  unsigned res = 0;\n+  BOOL flag = YES;\n+\n+  while (flag)\n+    switch (*type++)\n+      {\n+      case _C_CONST:\tres |= _F_CONST; break;\n+      case _C_IN:\tres |= _F_IN; break;\n+      case _C_INOUT:\tres |= _F_INOUT; break;\n+      case _C_OUT:\tres |= _F_OUT; break;\n+      case _C_BYCOPY:\tres |= _F_BYCOPY; break;\n+      case _C_BYREF:  res |= _F_BYREF; break;\n+      case _C_ONEWAY:\tres |= _F_ONEWAY; break;\n+      case _C_GCINVISIBLE: res |= _F_GCINVISIBLE; break;\n+      default: flag = NO;\n+    }\n+\n+  return res;\n+}\n+\n+\n+/* The following three functions can be used to determine how a\n+   structure is laid out by the compiler. For example:\n+\n+  struct objc_struct_layout layout;\n+  int i;\n+\n+  objc_layout_structure (type, &layout);\n+  while (objc_layout_structure_next_member (&layout))\n+    {\n+      int position, align;\n+      const char *type;\n+\n+      objc_layout_structure_get_info (&layout, &position, &align, &type);\n+      printf (\"element %d has offset %d, alignment %d\\n\",\n+              i++, position, align);\n+    }\n+\n+  These functions are used by objc_sizeof_type and objc_alignof_type\n+  functions to compute the size and alignment of structures. The\n+  previous method of computing the size and alignment of a structure\n+  was not working on some architectures, particulary on AIX, and in\n+  the presence of bitfields inside the structure. */\n+void\n+objc_layout_structure (const char *type,\n+                           struct objc_struct_layout *layout)\n+{\n+  const char *ntype;\n+\n+  layout->original_type = ++type;\n+\n+  /* Skip \"<name>=\" if any. Avoid embedded structures and unions. */\n+  ntype = type;\n+  while (*ntype != _C_STRUCT_E && *ntype != _C_STRUCT_B && *ntype != _C_UNION_B\n+         && *ntype++ != '=')\n+    /* do nothing */;\n+\n+  /* If there's a \"<name>=\", ntype - 1 points to '='; skip the the name */\n+  if (*(ntype - 1) == '=')\n+    type = ntype;\n+\n+  layout->type = type;\n+  layout->prev_type = NULL;\n+  layout->record_size = 0;\n+  layout->record_align = MAX (BITS_PER_UNIT, STRUCTURE_SIZE_BOUNDARY);\n+}\n+\n+\n+BOOL\n+objc_layout_structure_next_member (struct objc_struct_layout *layout)\n+{\n+  register int desired_align = 0;\n+\n+  /* The current type without the type qualifiers */\n+  const char *type;\n+\n+  /* Add the size of the previous field to the size of the record.  */\n+  if (layout->prev_type)\n+    {\n+      type = objc_skip_type_qualifiers (layout->prev_type);\n+\n+      if (*type != _C_BFLD)\n+        layout->record_size += objc_sizeof_type (type) * BITS_PER_UNIT;\n+      else\n+\tlayout->record_size += atoi (++type);\n+    }\n+\n+  if (*layout->type == _C_STRUCT_E)\n+    return NO;\n+\n+  /* Skip the variable name if any */\n+  if (*layout->type == '\"')\n+    {\n+      for (layout->type++; *layout->type++ != '\"';)\n+        /* do nothing */;\n+    }\n+\n+  type = objc_skip_type_qualifiers (layout->type);\n+\n+  desired_align = objc_alignof_type (type) * BITS_PER_UNIT;\n+\n+  /* Record must have at least as much alignment as any field.\n+     Otherwise, the alignment of the field within the record\n+     is meaningless.  */\n+  layout->record_align = MAX (layout->record_align, desired_align);\n+\n+  if (*type == _C_BFLD)\n+    {\n+      int bfld_size = atoi (++type);\n+      int int_align = __alignof__ (int) * BITS_PER_UNIT;\n+      /* If this bitfield would traverse a word alignment boundary, push it out \n+\t to that boundary instead.  */\n+      if (layout->record_size % int_align\n+\t  && (layout->record_size / int_align\n+\t      < (layout->record_size + bfld_size - 1) / int_align))\n+\tlayout->record_size = ROUND (layout->record_size, int_align);\n+    }\n+  else if (layout->record_size % desired_align != 0)\n+    {\n+      /* We need to skip space before this field.\n+         Bump the cumulative size to multiple of field alignment.  */\n+      layout->record_size = ROUND (layout->record_size, desired_align);\n+    }\n+\n+  /* Jump to the next field in record. */\n+\n+  layout->prev_type = layout->type;\n+  layout->type = objc_skip_typespec (layout->type);      /* skip component */\n+\n+  return YES;\n+}\n+\n+\n+void objc_layout_finish_structure (struct objc_struct_layout *layout,\n+                                   unsigned int *size,\n+                                   unsigned int *align)\n+{\n+  if (layout->type && *layout->type == _C_STRUCT_E)\n+    {\n+      /* Round the size up to be a multiple of the required alignment */\n+      layout->record_size = ROUND (layout->record_size, layout->record_align);\n+      layout->type = NULL;\n+    }\n+  if (size)\n+    *size = layout->record_size / BITS_PER_UNIT;\n+  if (align)\n+    *align = layout->record_align / BITS_PER_UNIT;\n+}\n+\n+\n+void objc_layout_structure_get_info (struct objc_struct_layout *layout,\n+                                     unsigned int *offset,\n+                                     unsigned int *align,\n+                                     const char **type)\n+{\n+  if (offset)\n+    *offset = layout->record_size / BITS_PER_UNIT;\n+  if (align)\n+    *align = layout->record_align / BITS_PER_UNIT;\n+  if (type)\n+    *type = layout->prev_type;\n+}\n+\n+/* A small, portable NSConstantString implementation for use with the NeXT\n+   runtime.\n+   \n+   On full-fledged Mac OS X systems, NSConstantString is provided\n+   as part of the Foundation framework.  However, on bare Darwin systems,\n+   Foundation is not included, and hence there is no NSConstantString \n+   implementation to link against.\n+\n+   This code is derived from the GNU runtime's NXConstantString implementation.\n+*/\n+\n+/* This definition cut out of <objc/Object.h> with the OBJC2 deprecation\n+   messages removed. \n+*/\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+struct fudge_objc_class {\n+    Class isa;\n+#if NEXT_OBJC_ABI_VERSION < 2\n+    Class super_class ;\n+    const char *name ;\n+    long version  ;\n+    long info ;\n+    long instance_size ;\n+    struct anon *ivars ; /* objc_ivar_list */\n+    struct anon1 **methodLists ; /* objc_method_list */\n+    struct objc_cache *cache  ;\n+    struct objc_protocol_list *protocols ;\n+#endif\n+} _NSConstantStringClassReference ;\n+#else\n+struct objc_class _NSConstantStringClassReference ;\n+#endif\n+\n+@interface NSConstantString : Object\n+{\n+  char *c_string;\n+  unsigned int len;\n+}\n+\n+-(const char *) cString;\n+-(unsigned int) length;\n+\n+@end\n+\n+@implementation NSConstantString\n+\n+-(const char *) cString\n+{\n+  return (c_string);\n+}\n+\n+-(unsigned int) length\n+{\n+  return (len);\n+}\n+\n+@end\n+\n+/* The NSConstantString metaclass will need to be initialized before we can\n+   send messages to strings.  */\n+\n+void objc_constant_string_init (void) __attribute__((constructor));\n+void objc_constant_string_init (void) {\n+  memcpy (&_NSConstantStringClassReference,\n+\t  objc_getClass (\"NSConstantString\"),\n+\t  sizeof (_NSConstantStringClassReference));\n+}\n+\n+#endif  /* #ifdef __NEXT_RUNTIME__ */"}, {"sha": "664a0e8d48fc9b3889ae77ac2043cebc73addea7", "filename": "gcc/testsuite/objc.dg/bitfield-1.m", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,9 +2,10 @@\n    being \"promoted\" to ints).  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n-#include <objc/Object.h>\n \n extern void abort(void);\n \n@@ -78,3 +79,5 @@ int main(void) {\n \n   return 0;\n }\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "7e8147a7008df4f712d95dc819ac3062dc2936a1", "filename": "gcc/testsuite/objc.dg/bitfield-2.m", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,8 +1,9 @@\n /* Check if bitfield ivars are correctly @encode'd when\n    the NeXT runtime is used.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-fnext-runtime -fsigned-char\" } */\n+/* { dg-options \"-fsigned-char\" } */\n /* { dg-do run { target *-*-darwin* } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n \n typedef struct objc_object { struct objc_class *class_pointer; } *id;\n "}, {"sha": "5bea0fca96f4edd37e483ffdac96cd2e806bc75f", "filename": "gcc/testsuite/objc.dg/bitfield-3.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,11 +1,10 @@\n /* Check if the @defs() construct preserves the correct\n    layout of bitfields.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-lobjc -Wpadded\" } */\n+/* { dg-options \"-Wpadded\" } */\n /* { dg-do run } */\n \n-#include <objc/objc.h>\n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n extern void abort(void);\n extern int strcmp(const char *str1, const char *str2);"}, {"sha": "1cc1cad9bf14cd3de288d1c3423dd742c1a0a96f", "filename": "gcc/testsuite/objc.dg/bitfield-5.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-5.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -7,8 +7,8 @@ were defined at once (i.e., any padding introduced for\n /* { dg-options \"-Wpadded\" } */\n /* { dg-do run } */\n \n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n-#include <objc/Object.h>\n #include <stdlib.h>\n \n #define CHECK_IF(expr) if(!(expr)) abort()"}, {"sha": "37b705ea193a073e6abc0fd822aba7caf07ed640", "filename": "gcc/testsuite/objc.dg/call-super-1.m", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,11 +1,11 @@\n /* Check if objc_super stack variables are created correctly (and\n    not clobbered by other values).  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-std=c99 -lobjc\" } */\n+/* { dg-options \"-std=c99\" } */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/objc.h>\n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n extern void abort(void);\n \n@@ -74,3 +74,5 @@ int main(void) {\n   [v free];\n   return 0;\n }\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "190c407f79611c393d3e81466c06f573c8b72d25", "filename": "gcc/testsuite/objc.dg/call-super-2.m", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,17 +1,10 @@\n-/* Check if casting 'self' or 'super' affects message lookup in the\n-   correct way.  */\n+/* Check if casting 'self' or 'super' affects message lookup in the correct way.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do compile } */\n \n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n #include <stddef.h>\n-#include <objc/objc.h>\n-#include <objc/Object.h>\n-\n-#ifdef __NEXT_RUNTIME__\n-#define OBJC_GETCLASS objc_getClass\n-#else\n-#define OBJC_GETCLASS objc_get_class\n-#endif\n \n @protocol Func\n + (int) class_func0;\n@@ -70,11 +63,11 @@ + (int) class_func5\n }\n + (int) class_func6\n {\n-   return (size_t)[OBJC_GETCLASS(\"Object\") class_func1];  /* { dg-warning \".Object. may not respond to .\\\\+class_func1.\" } */\n+   return (size_t)[objc_get_class(\"Object\") class_func1];  /* { dg-warning \".Object. may not respond to .\\\\+class_func1.\" } */\n }\n + (int) class_func7\n {\n-   return [OBJC_GETCLASS(\"Derived\") class_func1];\n+   return [objc_get_class(\"Derived\") class_func1];\n }\n - (int) instance_func1\n {\n@@ -100,11 +93,11 @@ - (int) instance_func5\n }\n - (int) instance_func6\n {\n-   return (size_t)[OBJC_GETCLASS(\"Object\") class_func1]; /* { dg-warning \".Object. may not respond to .\\\\+class_func1.\" } */\n+   return (size_t)[objc_get_class(\"Object\") class_func1]; /* { dg-warning \".Object. may not respond to .\\\\+class_func1.\" } */\n }\n - (int) instance_func7\n {\n-   return [OBJC_GETCLASS(\"Derived\") class_func1];\n+   return [objc_get_class(\"Derived\") class_func1];\n }\n @end\n \n@@ -129,7 +122,7 @@ - (int) categ_instance_func1\n    int i = (size_t)[self instance_func0];    /* { dg-warning \".Derived. may not respond to .\\\\-instance_func0.\" } */\n    i += [(Derived <Func> *)self categ_instance_func2];\n    i += (size_t)[(Object <Func> *)self categ_instance_func2]; /* { dg-warning \".Object. may not respond to .\\\\-categ_instance_func2.\" } */\n-   /* { dg-warning \".\\\\-categ_instance_func2. not found in protocol\" \"\" { target *-*-* } 131 } */\n+   /* { dg-warning \".\\\\-categ_instance_func2. not found in protocol\" \"\" { target *-*-* } 124 } */\n    i += (size_t)[(id <Func>)self categ_instance_func2];  /* { dg-warning \".\\\\-categ_instance_func2. not found in protocol\" } */\n    i += [(id)self categ_instance_func2];\n    return i + (size_t)[super instance_func0];   /* { dg-warning \".Object. may not respond to .\\\\-instance_func0.\" } */"}, {"sha": "0b950294b8f2d5b8610d41ad1fc3d15cf57ea7de", "filename": "gcc/testsuite/objc.dg/call-super-3.m", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,10 +1,11 @@\n /* Check if sending messages to super does not interfere with sending messages\n    to classes. */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"\" } */\n /* { dg-do run } */\n-/* { dg-options \"-lobjc\" } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort()\n@@ -52,3 +53,5 @@ int main(void) {\n   CHECK_IF([derived instance_func1] == 234 + 345);\n   return 0;\n }\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "e195a46bf08081c5a8b6fa3bf6f8488687f71ee3", "filename": "gcc/testsuite/objc.dg/category-1.m", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fcategory-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fcategory-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcategory-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,18 +1,19 @@\n /* Test class methods inside categories.  */\n /* Author: Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-lobjc\" } */\n+\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"need OBJC2 ABI\" { *-*-darwin* && { lp64 &&  { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+extern int strcmp(const char *s1, const char *s2);\n+extern void abort(void);\n \n #ifdef __NEXT_RUNTIME__\n #define SUPERCLASS superclass\n #else\n #define SUPERCLASS superClass\n #endif\n \n-extern int strcmp(const char *s1, const char *s2);\n-extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n @interface MyObject: Object\n@@ -36,8 +37,15 @@ int main (int argc, const char * argv[])\n   Class w1 = [MyObject whatever1];\n   Class w2 = [MyObject whatever2];\n \n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  CHECK_IF(!strcmp( object_getClassName( w1 ), \"Object\"));\n+  CHECK_IF(!strcmp( object_getClassName( w2 ), \"Object\"));\n+#else\n   CHECK_IF(!strcmp(w1->name, \"Object\"));\n   CHECK_IF(!strcmp(w2->name, \"Object\"));\n+#endif\n+\n   return 0;\n }\n \n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "3d85983991e04cda17cb5bf31a098e4852764af6", "filename": "gcc/testsuite/objc.dg/comp-types-10.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-10.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @protocol Foo\n - (id)meth1;"}, {"sha": "959cc049a329436fb552312360fa2ecc3f1d5d76", "filename": "gcc/testsuite/objc.dg/comp-types-11.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-11.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Derived: Object\n @end"}, {"sha": "bb7b136fb6993cd37a13df8b761bacc7b6ae0a14", "filename": "gcc/testsuite/objc.dg/comp-types-8.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-8.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* Another gimplifier ICE... */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface MyView: Object {\n   int _frame;"}, {"sha": "156a92e1194bbc6b2aa7191d6707f9ce30927dd9", "filename": "gcc/testsuite/objc.dg/const-str-1.m", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,5 @@\n /* Test errors for constant strings.  */\n /* { dg-do compile } */\n-/* { dg-options \"-fgnu-runtime\" } */\n \n #ifdef __cplusplus\n extern void baz(...);"}, {"sha": "7f59a63f93bebb8a68705ada805c833dd90777e6", "filename": "gcc/testsuite/objc.dg/const-str-10.m", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-10.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,10 +2,10 @@\n    constant string classes get derived.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n \n-/* { dg-options \"-fnext-runtime\" } */\n-/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-do compile { target { *-*-darwin* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface NSString: Object\n @end\n@@ -20,9 +20,14 @@ @interface NSSimpleCString : NSString {\n @interface NSConstantString : NSSimpleCString\n @end\n \n+#ifndef NEXT_OBJC_USE_NEW_INTERFACE\n extern struct objc_class _NSConstantStringClassReference;\n+#else\n+extern Class _NSConstantStringClassReference;\n+#endif\n \n const NSConstantString *appKey = @\"MyApp\";\n \n /* { dg-final { scan-assembler \".section __OBJC, __cstring_object\" } } */\n-/* { dg-final { scan-assembler \".long\\t__NSConstantStringClassReference\\n\\t.long\\t.*\\n\\t.long\\t5\\n\\t.data\" } } */\n+/* { dg-final { scan-assembler \".long\\t__NSConstantStringClassReference\\n\\t.long\\t.*\\n\\t.long\\t5\\n\\t.data\" { target { *-*-darwin* && { ! lp64 } } } } } */\n+/* { dg-final { scan-assembler \".quad\\t__NSConstantStringClassReference\\n\\t.quad\\t.*\\n\\t.long\\t5\\n\\t.space\" { target { *-*-darwin* && { lp64 } } } } } */"}, {"sha": "ae3c3303f6faa300db81fb7a8ec367e067853796", "filename": "gcc/testsuite/objc.dg/const-str-11.m", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-11.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,10 +2,11 @@\n    constant string classes get derived.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n \n-/* { dg-options \"-fnext-runtime -fconstant-string-class=XStr\" } */\n /* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-options \"-fconstant-string-class=XStr\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface XString: Object {\n @protected\n@@ -19,9 +20,14 @@ @interface XStr : XString {\n }\n @end\n \n+#ifndef NEXT_OBJC_USE_NEW_INTERFACE\n extern struct objc_class _XStrClassReference;\n+#else\n+extern Class _XStrClassReference;\n+#endif\n \n const XStr *appKey = @\"MyApp\";\n \n /* { dg-final { scan-assembler \".section __OBJC, __cstring_object\" } } */\n-/* { dg-final { scan-assembler \".long\\t__XStrClassReference\\n\\t.long\\t.*\\n\\t.long\\t5\\n\\t.data\" } } */\n+/* { dg-final { scan-assembler \".long\\t__XStrClassReference\\n\\t.long\\t.*\\n\\t.long\\t5\\n\\t.data\"  { target { *-*-darwin* && { ! lp64 } } } } } */\n+/* { dg-final { scan-assembler \".quad\\t__XStrClassReference\\n\\t.quad\\t.*\\n\\t.long\\t5\\n\\t.space\" { target { *-*-darwin* && { lp64 } } } } } */"}, {"sha": "93059018647c15c9d17732e4e46b212589086eee", "filename": "gcc/testsuite/objc.dg/const-str-12.m", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-12.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-12.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-12.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,8 @@\n-/* { dg-options \"-Wall -funit-at-a-time -fgnu-runtime\" } */\n+/* { dg-options \"-Wall -funit-at-a-time\" } */\n /* { dg-do compile }  */\n /* PR objc/27438, make sure that the decl produced by the front-end\n    does not cause a warning to be produced. */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n @interface NXConstantString\n {"}, {"sha": "0d719e844073426919e6eb9a61c9332c0ff750ef", "filename": "gcc/testsuite/objc.dg/const-str-3.m", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,15 +1,14 @@\n-/* Test the -fconstant-string-class=Foo option under the NeXT\n-   runtime.  */\n+/* Test the -fconstant-string-class=Foo option under the NeXT runtime.  */\n /* Developed by Markus Hitter <mah@jump-ing.de>.  */\n+/* { dg-do run } */\n+/* { dg-options \"-fconstant-string-class=Foo\" } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-/* { dg-options \"-fnext-runtime -fconstant-string-class=Foo -lobjc\" } */\n-/* { dg-do run { target *-*-darwin* } } */\n-\n+#import \"../objc-obj-c++-shared/Object1.h\"\n+#import \"../objc-obj-c++-shared/next-mapping.h\"\n #include <stdio.h>\n #include <stdlib.h>\n #include <memory.h>\n-#include <objc/objc.h>\n-#include <objc/Object.h>\n \n @interface Foo: Object {\n   char *cString;\n@@ -18,7 +17,11 @@ @interface Foo: Object {\n - (char *)customString;\n @end\n \n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+struct fudge_objc_class _FooClassReference;\n+#else\n struct objc_class _FooClassReference;\n+#endif\n \n @implementation Foo : Object\n - (char *)customString {\n@@ -38,11 +41,13 @@ int main () {\n      constant string object. Can't be moved to +initialize since _that_\n      is already a message. */\n \n-  memcpy(&_FooClassReference, objc_getClass(\"Foo\"), sizeof(_FooClassReference));\n+  memcpy(&_FooClassReference, objc_get_class(\"Foo\"), sizeof(_FooClassReference));\n   if (strcmp ([string customString], \"bla\")) {\n     abort ();\n   }\n \n   printf([@\"This is a working constant string object\\n\" customString]);\n   return 0;\n }\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "9582a32554f71af4be724d9713ea2444be556ca2", "filename": "gcc/testsuite/objc.dg/const-str-4.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-4.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n /* Ensure that the preprocessor handles ObjC string constants gracefully. */\n /* Author: Ziemowit Laski <zlaski@apple.com> */\n-/* { dg-options \"-fnext-runtime -fconstant-string-class=MyString -lobjc\" } */ \n-/* { dg-do run { target *-*-darwin* } } */\n+/* { dg-options \"-fconstant-string-class=MyString \" } */ \n+/* { dg-do run  } */\n \n extern void abort(void);\n "}, {"sha": "223789aed7ddbf98848c2d74d92ba623f88d7326", "filename": "gcc/testsuite/objc.dg/const-str-7.m", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-7.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,18 +1,12 @@\n-/* Test to make sure that the const objc strings are the same across\n-   scopes.  */\n+/* Test to make sure that the const objc strings are the same across scopes. */\n /* Developed by Andrew Pinski <pinskia@physics.uc.edu> */\n+/* { dg-options \"-fconstant-string-class=Foo \" } */\n+/* { dg-do run } */\n \n-\n-/* { dg-options \"-fnext-runtime -fconstant-string-class=Foo -lobjc\" } */\n-/* { dg-do run { target *-*-darwin* } } */\n-\n-\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdio.h>\n #include <stdlib.h>\n #include <memory.h>\n-#include <objc/objc.h>\n-#include <objc/Object.h>\n-\n \n @interface Foo: Object {\n   char *cString;\n@@ -21,26 +15,28 @@ @interface Foo: Object {\n - (char *)customString;\n @end\n \n+#ifndef NEXT_OBJC_USE_NEW_INTERFACE\n struct objc_class _FooClassReference;\n-\n+#else\n+Class _FooClassReference;\n+#endif\n \n @implementation Foo : Object\n - (char *)customString {\n   return cString;\n }\n @end\n \n-\n int main () {\n   Foo *string = @\"bla\";\n   {\n     Foo *string2 = @\"bla\";\n \n-\n     if(string != string2)\n       abort();\n     printf(\"Strings are being uniqued properly\\n\");\n    }\n   return 0;\n }\n \n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "a7da0e102760c2dfd62ad56d380194c24788c1d9", "filename": "gcc/testsuite/objc.dg/const-str-8.m", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-8.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,20 +1,22 @@\n /* Test for assigning compile-time constant-string objects to static variables.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n+/* { dg-options \"-fconstant-string-class=Foo\" } */\n+/* { dg-do run } */\n \n-/* { dg-options \"-fnext-runtime -fconstant-string-class=Foo -lobjc\" } */\n-/* { dg-do run { target *-*-darwin* } } */\n-\n-\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdlib.h>\n-#include <objc/Object.h>\n \n @interface Foo: Object {\n   char *cString;\n   unsigned int len;\n }\n @end\n \n+#ifndef NEXT_OBJC_USE_NEW_INTERFACE\n struct objc_class _FooClassReference;\n+#else\n+Class _FooClassReference;\n+#endif\n \n @implementation Foo : Object\n - (char *)customString {\n@@ -37,3 +39,5 @@ int main () {\n   PrefsSynchronize();\n   return 0;\n }\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "ddf3b02f03c28794e159a5ec349a186995c845c1", "filename": "gcc/testsuite/objc.dg/const-str-9.m", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-9.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,20 +1,25 @@\n /* Test if ObjC constant strings get placed in the correct section.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n \n-/* { dg-options \"-fnext-runtime\" } */\n-/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface NSConstantString: Object {\n   char *cString;\n   unsigned int len;\n }\n @end\n \n+#ifndef NEXT_OBJC_USE_NEW_INTERFACE\n extern struct objc_class _NSConstantStringClassReference;\n+#else\n+Class _NSConstantStringClassReference;\n+#endif\n \n static const NSConstantString *appKey = @\"MyApp\";\n \n /* { dg-final { scan-assembler \".section __OBJC, __cstring_object\" } } */\n-/* { dg-final { scan-assembler \".long\\t__NSConstantStringClassReference\\n\\t.long\\t.*\\n\\t.long\\t5\\n\\t.data\" } } */\n+/* { dg-final { scan-assembler \".long\\t__NSConstantStringClassReference\\n\\t.long\\t.*\\n\\t.long\\t5\\n\\t.data\" { target { *-*-darwin* && { ! lp64 } } } } } */\n+/* { dg-final { scan-assembler \".quad\\t__NSConstantStringClassReference\\n\\t.quad\\t.*\\n\\t.long\\t5\\n\\t.space\" { target { *-*-darwin* && { lp64 } } } } } */"}, {"sha": "2ffde0035db9868aad7a81e098dc6336f17047f9", "filename": "gcc/testsuite/objc.dg/defs.m", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fdefs.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fdefs.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fdefs.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,11 +1,12 @@\n /* Check if the @defs() construct preserves the correct\n    offsets of ivars.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-lobjc\" } */\n+/* { dg-options \"\" } */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/objc.h>\n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+//#include <objc/objc.h>\n \n extern void abort(void);\n \n@@ -65,3 +66,5 @@ int main(void) {\n \n   return 0;\n }\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "a07e72be14a28290814f6c2700cd6281820dfc9e", "filename": "gcc/testsuite/objc.dg/desig-init-1.m", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,13 +1,13 @@\n-/* Test Objective-C capability for handling GNU/C99 designated\n-   initializers, and distinguishing them from message sends.  */\n-/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* Test Objective-C capability for handling GNU/C99 designated initializers, and distinguishing them\n+   from message sends.  Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-options \"-std=gnu99\" } */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n+\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdio.h> \n #include <stdlib.h>\n-#include <objc/objc.h>\n-#include <objc/Object.h>\n \n @interface Cls : Object\n + (int) meth1;\n@@ -47,3 +47,5 @@ int main(void) {\n /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "4c5730e66c07bbfcfc3107245d678d226ad4acee", "filename": "gcc/testsuite/objc.dg/dg.exp", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fdg.exp?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -29,7 +29,13 @@ dg-init\n \n # Main loop.\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[m\\]]] \\\n-\t\"\" $DEFAULT_CFLAGS\n+\t\"-fgnu-runtime\" $DEFAULT_CFLAGS\n+\n+# darwin targets can also run code with the NeXT runtime.\n+if [istarget \"*-*-darwin*\" ] {\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[m\\]]] \\\n+\t\"-fnext-runtime\" $DEFAULT_CFLAGS\n+}\n \n # All done.\n dg-finish"}, {"sha": "50e9919f941b5480dbc7d86c6fb25cc63976b429", "filename": "gcc/testsuite/objc.dg/encode-1.m", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,9 +3,8 @@\n    should be encoded as '*').  This is somewhat tricky wrt the NeXT runtime,\n    where we have 'typedef char BOOL'.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-fnext-runtime -lobjc\" } */\n /* { dg-do run } */\n-\n+/* { dg-options \"-fnext-runtime\" } */\n #include <string.h>           \n #include <stdlib.h>\n #include <objc/objc.h>"}, {"sha": "ea0ff6a7dae0f61569b99666344b378d0d061df6", "filename": "gcc/testsuite/objc.dg/encode-2.m", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -15,19 +15,17 @@ to the actual placement of parameters (relative to 'self')\n \n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/objc.h>\n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n \n #ifdef __NEXT_RUNTIME__\n #define METHOD Method\n-#define OBJC_GETCLASS objc_getClass\n-#define CLASS_GETINSTANCEMETHOD class_getInstanceMethod\n #else\n #include <objc/objc-api.h>\n #define METHOD Method_t\n-#define OBJC_GETCLASS objc_get_class\n-#define CLASS_GETINSTANCEMETHOD class_get_instance_method\n+#define method_get_types(M) (M)->method_types\n #endif\n \n extern int sscanf(const char *str, const char *format, ...);\n@@ -76,27 +74,31 @@ -(void) char:(signed char)c float:(float)f double:(double)d long:(long)l {\n \n int main(void) {\n   Foo *foo = [[Foo alloc] init];\n-  Class fooClass = OBJC_GETCLASS(\"Foo\");\n+  Class fooClass = objc_get_class(\"Foo\");\n   METHOD meth;\n   const char *string;\n \n-  meth = CLASS_GETINSTANCEMETHOD(fooClass, @selector(setRect:withInt:));\n+  meth = class_get_instance_method(fooClass, @selector(setRect:withInt:));\n   offs2 = 9999;\n-  sscanf(meth->method_types, \"@%u@%u:%u{_XXRect={?=ff}{?=ff}}%ui%u\", &offs1, &offs2, &offs3,\n+\n+  sscanf(method_get_types(meth), \"@%u@%u:%u{_XXRect={?=ff}{?=ff}}%ui%u\", &offs1, &offs2, &offs3,\n       &offs4, &offs5);\n+   \n   CHECK_IF(!offs2);\n   [foo setRect:my_rect withInt:123];\n \n-  meth = CLASS_GETINSTANCEMETHOD(fooClass, @selector(char:float:double:long:));\n+  meth = class_get_instance_method(fooClass, @selector(char:float:double:long:));\n   offs2 = 9999;\n   if (sizeof (long) == 8)\n     string = \"v%u@%u:%uc%uf%ud%uq%u\";\n   else\n     string = \"v%u@%u:%uc%uf%ud%ul%u\";\n-  sscanf(meth->method_types, string, &offs1, &offs2, &offs3,  \n+  sscanf(method_get_types(meth), string, &offs1, &offs2, &offs3,  \n \t &offs4, &offs5, &offs6, &offs7);\n   CHECK_IF(!offs2);\n   [foo char:'c' float:2.3 double:3.5 long:2345L];\n \n   return 0;\n }  \n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "63a92e19cd04fc82ae18a917b1d5f7af1b4f30d3", "filename": "gcc/testsuite/objc.dg/encode-3.m", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,7 +2,10 @@\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run } */\n \n-#include <objc/Protocol.h>\n+#include <stdlib.h>\n+#include \"../objc-obj-c++-shared/Protocol1.h\"\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+\n #ifdef __cplusplus\n #define ProtoBool bool\n #else"}, {"sha": "d74c0ba1c7f66900a4958ecd18df0e436dcb47c1", "filename": "gcc/testsuite/objc.dg/encode-4.m", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-4.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,19 +1,20 @@\n /* Encoding tests for ObjC class layouts.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-lobjc\" } */\n+/* { dg-options \"\" } */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n #ifdef __NEXT_RUNTIME__\n #include <objc/objc-class.h>\n-#define OBJC_GETCLASS objc_getClass\n #else\n #include <objc/objc-api.h>\n-#define OBJC_GETCLASS objc_get_class\n #endif\n \n extern void abort(void);\n extern int strcmp(const char *s1, const char *s2);\n+\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n @class Int1, Int2;\n@@ -49,25 +50,44 @@ @implementation Int1\n @implementation Int2\n @end\n \n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+Ivar *ivar;\n+#else\n struct objc_ivar *ivar;\n+#endif\n \n static void check_ivar(const char *name, const char *type) {\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  CHECK_IF(!strcmp(ivar_getName(*ivar), name));\n+  CHECK_IF(!strcmp(ivar_getTypeEncoding(*ivar), type));\n+#else\n   CHECK_IF(!strcmp(ivar->ivar_name, name));\n   CHECK_IF(!strcmp(ivar->ivar_type, type));\n+#endif\n   ivar++;\n }\n \n int main(void) {\n-  ivar = ((Class)OBJC_GETCLASS(\"Int1\"))->ivars->ivar_list;\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  ivar = class_copyIvarList ((Class)objc_get_class(\"Int1\"), NULL);\n+#else\n+  ivar = ((Class)objc_get_class(\"Int1\"))->ivars->ivar_list;\n+#endif\n   check_ivar(\"a\", \"c\");\n   check_ivar(\"b\", \"c\");\n   check_ivar(\"int2\", \"@\\\"Int2\\\"\");\n   check_ivar(\"nested\", \n     \"{Nested=\\\"a\\\"f\\\"b\\\"f\\\"next\\\"@\\\"Int1\\\"\\\"innermost\\\"{Innermost=\\\"a\\\"C\\\"b\\\"C\\\"encl\\\"^{Nested}}}\");\n     \n-  ivar = ((Class)OBJC_GETCLASS(\"Int2\"))->ivars->ivar_list;\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  ivar = class_copyIvarList ((Class)objc_get_class(\"Int2\"), NULL);\n+#else\n+  ivar = ((Class)objc_get_class(\"Int2\"))->ivars->ivar_list;\n+#endif\n   check_ivar(\"innermost\", \"^{Innermost=CC^{Nested}}\");\n   check_ivar(\"base\", \"@\\\"Int1\\\"\");\n   \n   return 0;\n }\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "523c7ce02e8678836c16d6904cbffb9db9cb0454", "filename": "gcc/testsuite/objc.dg/encode-5.m", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-5.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -9,20 +9,18 @@ we need to decay the arrays into pointers (as C does).\n \n /* Contributed by Alexander Malmberg <alexander@malmberg.org>  */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n #include <stdlib.h>\n #include <stdio.h>\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n #ifdef __NEXT_RUNTIME__\n #define METHOD Method\n-#define OBJC_GETCLASS objc_getClass\n-#define CLASS_GETINSTANCEMETHOD class_getInstanceMethod\n #else\n #include <objc/objc-api.h>\n #define METHOD Method_t\n-#define OBJC_GETCLASS objc_get_class\n-#define CLASS_GETINSTANCEMETHOD class_get_instance_method\n+#define method_get_types(M) (M)->method_types\n #endif\n \n @interface Test : Object\n@@ -49,7 +47,7 @@ -(void) test3: (Test [3][4])b {  /* { dg-warning \"conflicting types for .\\\\-\\\\(v\n \n int main(int argc, char **argv)\n {\n-  Class testClass = OBJC_GETCLASS(\"Test\");\n+  Class testClass = objc_get_class(\"Test\");\n   METHOD meth;\n \n   cc[0] = [Test new];\n@@ -60,16 +58,16 @@ int main(int argc, char **argv)\n   [*c test2: bb with: bb + 5];\n   CHECK_IF (bb[3] == 5);\n \n-  meth = CLASS_GETINSTANCEMETHOD(testClass, @selector(test2:with:));\n+  meth = class_get_instance_method(testClass, @selector(test2:with:));\n   offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = -1;\n-  sscanf(meth->method_types, \"v%d@%d:%d[%di]%d^i%d\", &offs1, &offs2, &offs3,\n+  sscanf(method_get_types(meth), \"v%d@%d:%d[%di]%d^i%d\", &offs1, &offs2, &offs3,\n       &offs4, &offs5, &offs6);\n   CHECK_IF (!offs2 && offs4 == 5 && offs3 > 0);\n   CHECK_IF (offs5 == 2 * offs3 && offs6 == 3 * offs3 && offs1 == 4 * offs3);\n   \n-  meth = CLASS_GETINSTANCEMETHOD(testClass, @selector(test3:));\n+  meth = class_get_instance_method(testClass, @selector(test3:));\n   offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = -1;\n-  sscanf(meth->method_types, \"v%d@%d:%d[%d[%d{Test=#f}]]%d\", &offs1, &offs2, &offs3,\n+  sscanf(method_get_types(meth), \"v%d@%d:%d[%d[%d{Test=#f}]]%d\", &offs1, &offs2, &offs3,\n       &offs4, &offs5, &offs6);\n   CHECK_IF (!offs2 && offs4 == 3 && offs5 == 4 && offs3 > 0);\n   CHECK_IF (offs6 == 2 * offs3 && offs1 == 3 * offs3);"}, {"sha": "1fe0b242425942c3b1a508478bf7021bf7c37668", "filename": "gcc/testsuite/objc.dg/encode-7.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-options \"-fgnu-runtime\" } */\n /* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n #include <objc/encoding.h>\n #include <stdlib.h>"}, {"sha": "a992e31505fa96843dc8e4e0980a76cc2b9cc903", "filename": "gcc/testsuite/objc.dg/encode-8.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-8.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-options \"-fgnu-runtime\" } */\n /* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n #include <objc/encoding.h>\n #include <stdlib.h>"}, {"sha": "1ff2a6b0e489421c49cb3fb30f3cd62c62e94f68", "filename": "gcc/testsuite/objc.dg/encode-9.m", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-9.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fgnu-runtime \" } */\n \n /* There was an ICE due to diving by zero in the objc front-end. */\n "}, {"sha": "1560beac463652d23efa8fd2375fa90668cb6eb3", "filename": "gcc/testsuite/objc.dg/fix-and-continue-1.m", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -4,8 +4,9 @@\n    \n /* { dg-do run  { target *-*-darwin* } } */\n /* { dg-options \"-mfix-and-continue\" } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdlib.h>\n \n @class MyTarget, MySet;\n@@ -88,3 +89,5 @@ int main(void) {\n \n   return 0;\n }\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "fdfbcbd0c18c4e3a63842ac66f2b40b020a6bae4", "filename": "gcc/testsuite/objc.dg/fix-and-continue-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -6,7 +6,7 @@\n /* { dg-do assemble { target *-*-darwin* } } */\n /* { dg-options \"-mfix-and-continue\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Foo: Object\n + (Object *)indexableFileTypes;"}, {"sha": "4bdb344a3b62e45064be893abb3d20b5970055f9", "filename": "gcc/testsuite/objc.dg/func-ptr-1.m", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,8 @@\n /* Test for handling of function pointer ivars */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n extern int strcmp(const char *, const char *);\n extern void abort(void);\n@@ -46,3 +47,5 @@ int main ()\n   return(0);\n }\n \n+#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "e68c71b70d4c0df594c9c12d67937983d7a9b473", "filename": "gcc/testsuite/objc.dg/func-ptr-2.m", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,9 +2,11 @@\n    into pointers.  */\n /* Contributed by Ziemowit Laski  <zlaski@apple.com>  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n #include <stdlib.h>\n+/* provide an Object class for NeXT runtimes 10.5 and above */\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Func: Object\n + (int) processNumber:(int)a and:(int)b usingFunction:(int(int,int))func;\n@@ -35,3 +37,5 @@ int main(void) {\n \n   return 0;\n }\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "c7e3bcc3a22e209f27a5857c4e8dae081e4446b9", "filename": "gcc/testsuite/objc.dg/gnu-runtime-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,7 +2,7 @@\n    the system runtime used).  */\n /* Author: Ziemowit Laski <zlaski@apple.com>  */\n /* { dg-do compile } */\n-/* { dg-options \"-fgnu-runtime\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n #include <objc/Object.h>\n "}, {"sha": "9903d29727c72040befdd862472ae280bdf23483", "filename": "gcc/testsuite/objc.dg/gnu-runtime-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,7 +2,7 @@\n    regardless of runtime used on target system.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-fgnu-runtime\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n #include <objc/Object.h>\n #include <string.h>"}, {"sha": "e0c8cc4164df8675f43ea2dade273a06c96a2821", "filename": "gcc/testsuite/objc.dg/gnu-runtime-3.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n /* Sanity check for GNU-runtime regardless of runtime used on target system.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-fgnu-runtime\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n #include <objc/Object.h>\n #include <string.h>"}, {"sha": "0a740fa31f1f75371051e1c1107ae6b1e4b06780", "filename": "gcc/testsuite/objc.dg/image-info.m", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fimage-info.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fimage-info.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fimage-info.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,15 +2,12 @@\n    __OBJC,__image_info section to be emitted.  This is only\n    usable on MacOS X 10.3 and later. */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-freplace-objc-classes\" } */\n-/* { dg-do compile { target *-*-darwin* } } */\n \n-#ifndef __NEXT_RUNTIME__\n-#error Feature not currently supported by the GNU runtime\n-#endif\n+/* { dg-do compile { target { *-*-darwin* } } } */\n+/* { dg-options \"-freplace-objc-classes\" } */\n \n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n-#include <objc/Object.h>\n \n extern void abort(void);\n "}, {"sha": "377280f0d992a8c30533d35b239df64a084821aa", "filename": "gcc/testsuite/objc.dg/isa-field-1.m", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fisa-field-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fisa-field-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fisa-field-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n /* Ensure there are no bizarre difficulties with accessing the 'isa' field of objects.  */\n-/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Object (Test)\n - (Class) test1: (id)object;\n@@ -14,11 +14,19 @@ - (Class) test2: (id)object;\n @implementation Object (Test)\n \n Class test1(id object) {\n+#ifdef __NEXT_RUNTIME__\n     Class cls = object->isa;\n+#else\n+    Class cls = object->class_pointer;\n+#endif\n     return cls;\n }\n - (Class) test1: (id)object {\n+#ifdef __NEXT_RUNTIME__\n     Class cls = object->isa;\n+#else\n+    Class cls = object->class_pointer;\n+#endif\n     return cls;\n }\n \n@@ -27,17 +35,29 @@ - (Class) test1: (id)object {\n @implementation Derived\n \n Class test2(id object) {\n+#ifdef __NEXT_RUNTIME__\n     Class cls = object->isa;\n+#else\n+    Class cls = object->class_pointer;\n+#endif\n     return cls;\n }\n - (Class) test2: (id)object {\n+#ifdef __NEXT_RUNTIME__\n     Class cls = object->isa;\n+#else\n+    Class cls = object->class_pointer;\n+#endif\n     return cls;\n }\n \n @end\n \n Class test3(id object) {\n+#ifdef __NEXT_RUNTIME__\n     Class cls = object->isa;\n+#else\n+    Class cls = object->class_pointer;\n+#endif\n     return cls;\n }"}, {"sha": "f702eb2badcab828755587b810ddae381fd3a377", "filename": "gcc/testsuite/objc.dg/layout-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Flayout-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Flayout-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Flayout-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wpadded -Wpacked\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Derived1: Object\n { }"}, {"sha": "b1af6d27bc250956fb98f399157e06a4f91ed9ea", "filename": "gcc/testsuite/objc.dg/local-decl-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Flocal-decl-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Flocal-decl-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Flocal-decl-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,7 +3,7 @@\n /* Author: Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Sprite: Object {\n   int sprite, spree;"}, {"sha": "ff59b7efba98fa20168d6d5832e402febff46e06", "filename": "gcc/testsuite/objc.dg/lookup-1.m", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Flookup-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Flookup-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Flookup-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,8 @@\n-/* { dg-do run { target *-*-darwin* } } */\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n #include <stdlib.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n typedef struct MyWidget {\n   int a;\n@@ -35,7 +36,7 @@ - (MyWidget *)widget {\n @implementation Container\n + (MyWidget *)elementForView:(Foo *)view\n {\n-  MyWidget *widget = nil;\n+  MyWidget *widget = (MyWidget *) nil;\n   if ([view conformsTo:@protocol(MyProto)]) {\n     widget = [(Foo <MyProto> *)view widget];\n   }\n@@ -52,3 +53,5 @@ int main(void) {\n \n   return 0;\n }\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "442df690a0a387f8d0fe9f739475982d2758c867", "filename": "gcc/testsuite/objc.dg/method-10.m", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-10.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,8 +3,10 @@\n    message sends (so that proper C/C++ argument conversions may\n    take place).  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n-#include <objc/Object.h>\n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n@@ -30,3 +32,4 @@ int main(void)\n \treturn 0;\n }\n \n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "b3e44bd25d0e1ea841ad7551d031a241ff6ff32a", "filename": "gcc/testsuite/objc.dg/method-13.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-13.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-13.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-13.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,6 +3,7 @@\n    root classes must be considered.  */\n /* Author: Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n #include <objc/objc.h>\n "}, {"sha": "6a5aec6ac20579b6e504e3a4cc9aabc047c5f7ae", "filename": "gcc/testsuite/objc.dg/method-15.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-15.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-15.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-15.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -4,7 +4,7 @@\n \n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @class NSString;\n "}, {"sha": "3f6d8d06aad7dfac003227b5f4c94f80dc0367fe", "filename": "gcc/testsuite/objc.dg/method-17.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-17.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-17.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-17.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wreturn-type -Wextra\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Foo: Object\n - (id) meth1;"}, {"sha": "362d55858f91c8d5dd4c5e94f7f2b505cfad4b44", "filename": "gcc/testsuite/objc.dg/method-19.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-19.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-19.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-19.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,7 +3,7 @@\n \n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @class NotKnown;\n "}, {"sha": "abee4e0654beaf3317fd6307dea1b2b5ba293437", "filename": "gcc/testsuite/objc.dg/method-3.m", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,10 @@\n /* Test for sending messages to aliased classes (and instances thereof).  */\n /* Author: Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-lobjc\" } */\n+/* { dg-options \"\" } */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort()\n@@ -43,3 +44,5 @@ int main(void) {\n   CHECK_IF([(Int1Alias *)int2typedef instanceMeth] == 1697);\n   return 0;\n }\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "c5fa1a0861bf2e297ab433cced24a44e818b9d23", "filename": "gcc/testsuite/objc.dg/method-4.m", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-4.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,10 +1,11 @@\n /* Check if class references (generated for the NeXT runtime) are appropriately \n-   folded.  This test is safe to run on all targets.  */\n+   folded. */\n /* Author: Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-fnext-runtime\" } */\n-/* { dg-do compile } */\n+/* The ABI is different for m64 darwin so skip this test for now */\n+/* { dg-do compile { target { *-*-darwin* && { ! lp64 } } } } */\n+/* { dg-skip-if \"\" { *-*-darwin* } { \"-fgnu-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n typedef Object ObjectTypedef1;\n typedef ObjectTypedef1 ObjectTypedef2;"}, {"sha": "c46d9c450e770fddbeab82e48659bd3a9365b8f4", "filename": "gcc/testsuite/objc.dg/method-6.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -4,7 +4,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wstrict-selector-match\" } */\n \n-#include <objc/Protocol.h>\n+#include \"../objc-obj-c++-shared/Protocol1.h\"\n \n @interface Base\n - (unsigned)port;"}, {"sha": "d7a7b97b702885a6148745733592b4a8a01aa751", "filename": "gcc/testsuite/objc.dg/method-7.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-7.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,10 +1,10 @@\n /* Check if finding multiple signatures for a method is handled gracefully.  */\n /* Author:  Ziemowit Laski <zlaski@apple.com>  */\n-\n /* { dg-do compile } */\n /* { dg-options \"-Wstrict-selector-match\" } */\n \n-#include <objc/Object.h>\n+\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Class1\n - (void)setWindow:(Object *)wdw;"}, {"sha": "d755d6ad894dcab4cb1ef44a2ae91ee1760cf5ba", "filename": "gcc/testsuite/objc.dg/method-9.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-9.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,11 +1,11 @@\n /* Check if finding multiple signatures for a method is handled gracefully\n    when method lookup succeeds (see also method-7.m).  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n-\n /* { dg-do compile } */\n /* { dg-options \"-Wstrict-selector-match\" } */\n \n-#include <objc/Object.h>\n+\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @protocol MyObject\n - (id)initWithData:(Object *)data;"}, {"sha": "7d4a7d949c6abc5ca883bcbc248dd536aa8a569a", "filename": "gcc/testsuite/objc.dg/next-runtime-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fnext-runtime-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fnext-runtime-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fnext-runtime-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,9 +3,9 @@\n /* Author: Ziemowit Laski <zlaski@apple.com>  */\n \n /* { dg-do compile { target *-*-darwin* } } */\n-/* { dg-options \"-fnext-runtime\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface FooBar: Object\n - (void)boo;"}, {"sha": "75035357926cb1cf59e02a7d8a84591cf250f02b", "filename": "gcc/testsuite/objc.dg/no-extra-load.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fno-extra-load.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fno-extra-load.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fno-extra-load.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n \n #import <Foundation/Foundation.h>\n main() { [NSObject new]; }"}, {"sha": "b86e395294f19a0879844a1adf6912ca44a0a842", "filename": "gcc/testsuite/objc.dg/objc-fast-4.m", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-fast-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-fast-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-fast-4.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,10 +1,9 @@\n /* The code should call objc_msgSend directly, not through a pointer.  */\n-/* { dg-do compile { target powerpc*-*-darwin* } } */\n-/* { dg-options \"-O0 -fnext-runtime\" } */\n-/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"-m64\" } { \"\" } } */\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-options \"-O0\" } */\n /* Radar 4015820 */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n void foo(void) {\n   Object *o;"}, {"sha": "efbde1b4b2a9e0d809d0cbab0f501bee726ee0fb", "filename": "gcc/testsuite/objc.dg/objc-gc-4.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-gc-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-gc-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-gc-4.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -5,7 +5,7 @@\n /* { dg-do compile { target *-*-darwin* } } */\n /* { dg-options \"-fobjc-gc\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @class MyWindow;\n "}, {"sha": "e9527e39e4eb32fc1abe9a0db2989fcd89b200f1", "filename": "gcc/testsuite/objc.dg/pragma-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fpragma-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fpragma-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpragma-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-do compile } */\n /* ??? Is there a better pragma that is handled for all targets, not\n    handled by the preprocessor, that would be better for testing here?  */\n "}, {"sha": "361bb9087e6866f28362a75661e8720990b88b10", "filename": "gcc/testsuite/objc.dg/proto-lossage-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,7 +2,7 @@\n    provide a suitable method.  */\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @protocol Zot\n -(void) zot;"}, {"sha": "1cb7b1d91b9dbed9bee09c54be3f630a96ce17bc", "filename": "gcc/testsuite/objc.dg/proto-lossage-3.m", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,9 +2,10 @@\n    a protocol with no instance/class methods respectively.\n    Problem report and original fix by richard@brainstorm.co.uk.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Protocol1.h\"\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n-#include <objc/Object.h>\n-#include <objc/Protocol.h>\n \n @protocol NoInstanceMethods\n + testMethod;"}, {"sha": "7c6c62d241b1f503d90061a515f0856d29992dab", "filename": "gcc/testsuite/objc.dg/proto-qual-1.m", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-qual-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-qual-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-qual-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,10 @@\n /* Check that protocol qualifiers are compiled and encoded properly.  */\n /* Author: Ziemowit Laski <zlaski@apple.com>  */\n-/* { dg-options \"-lobjc\" } */\n+/* { dg-options \"\" } */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/Protocol.h>\n+#include \"../objc-obj-c++-shared/Protocol1.h\"\n #ifndef __NEXT_RUNTIME__\n #include <objc/objc-api.h>\n #endif"}, {"sha": "f0781b68c63ff91365a52ec8429dd3bb9692b6d7", "filename": "gcc/testsuite/objc.dg/selector-1.m", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,8 @@\n /* Test warning for non existing selectors.  */\n /* Contributed by Devang Patel <dpatel@apple.com>.  */\n-/* { dg-options \"-Wselector -fnext-runtime\" } */\n+/* { dg-options \"-Wselector\" } */\n /* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n \n typedef struct objc_object { struct objc_class *class_pointer; } *id;\n typedef struct objc_selector    *SEL;"}, {"sha": "ab8eb3e45405ee37e8ec6f197b208720b16fc52d", "filename": "gcc/testsuite/objc.dg/selector-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-Wselector\" } */\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Foo\n @end"}, {"sha": "b3ffccaca3a392a036226df512661f50c33874d5", "filename": "gcc/testsuite/objc.dg/selector-3.m", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,8 @@\n /* Test warning for non-existent selectors.  */\n /* This is the \"-fgnu-runtime\" variant of objc.dg/selector-1.m.  */\n-/* { dg-options \"-Wselector -fgnu-runtime\" } */\n+/* { dg-options \"-Wselector\" } */\n /* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n typedef struct objc_object { struct objc_class *class_pointer; } *id;\n typedef const struct objc_selector    *SEL;"}, {"sha": "ae505c1e898bd7cb92958cb4c5959d4133aaa743", "filename": "gcc/testsuite/objc.dg/sizeof-1.m", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fsizeof-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fsizeof-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsizeof-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,10 +1,10 @@\n /* Check that the sizeof() operator works with ObjC classes and their aliases. */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-lobjc\" } */\n+/* { dg-options \"\" } */\n /* { dg-do run } */\n \n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n-#include <objc/Object.h>\n \n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort();\n@@ -31,3 +31,4 @@ int main(void) {\n   return 0;\n }\n \n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "fdc90ecc6b5bc0c6b390ffdc58af2ffcc49b2830", "filename": "gcc/testsuite/objc.dg/special/special.exp", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Fspecial.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Fspecial.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Fspecial.exp?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -33,14 +33,29 @@ dg-init\n # This test is special because we must compile two different modules,\n # unclaimed-category-1a.m and unclaimed-category-1.m, then link\n # together, then run the resulting executable.\n-set lines [objc_target_compile \"$srcdir/$subdir/unclaimed-category-1a.m\" \"unclaimed-category-1a.o\" object \"additional_flags=-I${srcdir}/../../libobjc\"]\n+# for all systems we point to the libobjc includes and use the -fgnu-runtime\n+set add_flags \"additional_flags=-I${srcdir}/../../libobjc\"\n+lappend add_flags \"additional_flags=-fgnu-runtime\"\n+set lines [objc_target_compile \"$srcdir/$subdir/unclaimed-category-1a.m\" \"unclaimed-category-1a.o\" object $add_flags ]\n if ![string match \"\" $lines] then {\n     fail \"unclaimed-category-1a.o\"\n } else {\n-    dg-runtest \"$srcdir/$subdir/unclaimed-category-1.m\" \"unclaimed-category-1a.o\" \"-I${srcdir}/../../libobjc\"\n+    dg-runtest \"$srcdir/$subdir/unclaimed-category-1.m\" \"unclaimed-category-1a.o\" \"-I${srcdir}/../../libobjc -fgnu-runtime\"\n     file delete unclaimed-category-1a.o\n }\n \n+if [istarget \"*-*-darwin*\" ] {\n+set add_flags \"\"\n+lappend add_flags \"additional_flags=-fnext-runtime\"\n+set lines [objc_target_compile \"$srcdir/$subdir/unclaimed-category-1a.m\" \"unclaimed-category-1a.o\" object $add_flags ]\n+if ![string match \"\" $lines] then {\n+    fail \"unclaimed-category-1a.o\"\n+} else {\n+    dg-runtest \"$srcdir/$subdir/unclaimed-category-1.m\" \"unclaimed-category-1a.o\" \"-fnext-runtime\"\n+    file delete unclaimed-category-1a.o\n+}\n+}\n+\n # All done.\n dg-finish\n "}, {"sha": "0453033f3d2c85e90a395fa2737cce3c044aa867", "filename": "gcc/testsuite/objc.dg/special/unclaimed-category-1.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.h?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,11 +1,4 @@\n /* Contributed by Nicola Pero - Fri Dec 14 08:36:00 GMT 2001 */\n-#include <objc/objc.h>\n-#include <objc/Object.h>\n-\n-#ifdef __NEXT_RUNTIME__\n-#define objc_get_class(C)\t\t\tobjc_getClass(C)\n-#define class_create_instance(C)\t\tclass_createInstance(C, 0)\n-#endif\n \n /* Test loading unclaimed categories - categories of a class defined\n    separately from the class itself.  */"}, {"sha": "472ad8bbf835a093dc5b6dc327e0a839923dd915", "filename": "gcc/testsuite/objc.dg/special/unclaimed-category-1.m", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,8 +1,12 @@\n /* Contributed by Nicola Pero - Fri Dec 14 08:36:00 GMT 2001 */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+\n+#import \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n+#ifndef __NEXT_RUNTIME__\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n+#endif\n \n extern void abort (void);\n \n@@ -69,3 +73,5 @@ int main (void)\n \n   return 0;\n }\n+\n+#import \"../../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "4fb2d4619060d608eb086f05824b059564335669", "filename": "gcc/testsuite/objc.dg/special/unclaimed-category-1a.m", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1a.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1a.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1a.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,4 @@\n /* Contributed by Nicola Pero - Fri Dec 14 08:36:00 GMT 2001 */\n-#include <objc/objc.h>\n-#include <objc/Object.h>\n \n /* Test loading unclaimed categories - categories of a class defined\n    separately from the class itself.  */"}, {"sha": "cae7d6dd6bfe01cca96f5db6302a9d808dc01545", "filename": "gcc/testsuite/objc.dg/stret-1.m", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,8 +1,9 @@\n /* Test for handling of struct-returning methods.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort()\n@@ -60,3 +61,5 @@ int main(void)\n   \n   return 0;\n }\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "ded3ae41997d4a239487df3b84eb72ef39462d6a", "filename": "gcc/testsuite/objc.dg/stret-2.m", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,8 +3,9 @@\n    points).  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n struct astruct {\n   float a, b;"}, {"sha": "72de75beffc77d102b0504221a1035e0e1a32663", "filename": "gcc/testsuite/objc.dg/stubify-1.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,6 +2,7 @@\n    _objc_msgSend<end-of-line>\" without the $stub suffix.  */\n \n /* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-Os -mdynamic-no-pic\" } */\n \n typedef struct objc_object { } *id ;"}, {"sha": "b474d4f8927df65f2dc7eb4172c3af73b34b59eb", "filename": "gcc/testsuite/objc.dg/stubify-2.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,6 +2,7 @@\n /* Testcase extracted from TextEdit:Document.m.  */\n \n /* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-mdynamic-no-pic -fdump-rtl-jump\" } */\n \n typedef struct objc_object { } *id ;"}, {"sha": "144ea81b5e68f3870755b2224ddb6104514634a5", "filename": "gcc/testsuite/objc.dg/super-class-2.m", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,6 @@\n /* Test calling super from within a category class method.  */\n /* Author: Ziemowit Laski <zlaski@apple.com>  */\n /* { dg-do compile } */\n-/* { dg-options \"-fnext-runtime\" } */\n \n typedef struct objc_object { struct objc_class *isa; } *id;\n "}, {"sha": "fc74871db8f0766f188eb9ded851cd5538f621e1", "filename": "gcc/testsuite/objc.dg/super-class-3.m", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,8 +2,10 @@\n    is an ObjC class name.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n-#include <objc/Object.h>\n #include <stdlib.h>\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n@@ -41,3 +43,4 @@ int main(void) {\n   return 0; \n }\n \n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "a5ff9088b1dc0fe9664d35e938105a24f84d7e4e", "filename": "gcc/testsuite/objc.dg/super-class-4.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-4.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,7 +3,7 @@\n    should be traversed to find the @interface.  */\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @class MyWpModule;\n "}, {"sha": "dade208447837b9432ed67aa642e72f28bb1094c", "filename": "gcc/testsuite/objc.dg/symtab-1.m", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fsymtab-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fsymtab-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsymtab-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,10 @@\n /* Check if the objc_symtab descriptor is being laid out correctly.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-fnext-runtime\" } */\n-/* { dg-do compile { target *-*-darwin* } } */\n \n-#include <objc/Object.h>\n+/* { dg-do compile { target { *-*-darwin* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Base: Object \n - (void)setValues;"}, {"sha": "fe1f65c78eb96020089de8ce968052997bf3720e", "filename": "gcc/testsuite/objc.dg/sync-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fsync-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fsync-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsync-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,8 +1,8 @@\n /* Make sure that @synchronized parses.  */\n-/* { dg-options \"-fnext-runtime -fobjc-exceptions\" } */\n+/* { dg-options \"-fobjc-exceptions\" } */\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n void foo(id sem)\n {"}, {"sha": "5b2a209ddb836520a24d1dd149f19f321e531124", "filename": "gcc/testsuite/objc.dg/try-catch-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,7 +3,7 @@\n /* { dg-options \"-fobjc-exceptions\" } */\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <stdio.h>\n #include <setjmp.h>\n "}, {"sha": "49e2c0cef15ce191e398f76a5c697ca1bbacf8af", "filename": "gcc/testsuite/objc.dg/try-catch-10.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-10.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,10 +1,10 @@\n /* Ensure that @try/@catch blocks do not mess with types of\n    local objects (other than their volatile bits).  */\n \n-/* { dg-options \"-fobjc-exceptions -fnext-runtime\" } */\n+/* { dg-options \"-fobjc-exceptions\" } */\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @protocol Proto1\n - (int)meth1;"}, {"sha": "2094d29ce2de77a9b48356e6c1fa7726e2356821", "filename": "gcc/testsuite/objc.dg/try-catch-3.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -5,7 +5,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-fobjc-exceptions\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n const char *foo(void)\n {"}, {"sha": "f943e9c7e1e2d0c8348fba0b727bd25865a8051e", "filename": "gcc/testsuite/objc.dg/try-catch-5.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-5.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -4,7 +4,7 @@\n    generating the warning message.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-Wall -fnext-runtime -fobjc-exceptions\" } */\n+/* { dg-options \"-Wall -fobjc-exceptions\" } */\n \n @interface Exception\n @end"}, {"sha": "548c320b494ea0209df6543ce8096a9d70dd3ab9", "filename": "gcc/testsuite/objc.dg/try-catch-6.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-6.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-fobjc-exceptions\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n int main (int argc, const char * argv[]) {\n   Object * pool = [Object new];"}, {"sha": "b66662370259ba8dc568e6db75f303f211f82f91", "filename": "gcc/testsuite/objc.dg/try-catch-7.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-7.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-fobjc-exceptions\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n @interface Derived: Object\n - (id) meth;"}, {"sha": "454e841b301d0a53e2de056cb977dd95b6133b17", "filename": "gcc/testsuite/objc.dg/try-catch-9.m", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-9.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -5,7 +5,6 @@\n /* { dg-options \"-fobjc-exceptions\" } */\n /* { dg-do compile } */\n \n-\n void foo (int *arg1, int *arg2)\n {\n   *arg1 = *arg2;"}, {"sha": "2f8d517a3a3ecd27e158ca033cb76f176e9f7b56", "filename": "gcc/testsuite/objc.dg/type-size-2.m", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,16 +3,17 @@\n    encoded as pointers.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run } */\n-\n-#include <objc/objc.h>\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n+//#include <objc/objc.h>\n #ifdef __NEXT_RUNTIME__\n #include <objc/objc-runtime.h>\n-#define OBJC_GETCLASS objc_getClass\n-#define CLASS_GETINSTANCEMETHOD class_getInstanceMethod\n+#define METHOD Method\n #else\n #include <objc/objc-api.h>\n-#define OBJC_GETCLASS objc_get_class\n-#define CLASS_GETINSTANCEMETHOD class_get_instance_method\n+#define METHOD Method_t\n+#define method_get_types(M) (M)->method_types\n #endif\n \n extern int sscanf(const char *str, const char *format, ...);\n@@ -32,27 +33,29 @@ - (const char *)str:(signed char [])arg1 with:(unsigned char *)arg2 and:(enum En\n @end\n \n Class cls;\n-struct objc_method *meth;\n+METHOD meth ;\n+\n unsigned totsize, offs0, offs1, offs2, offs3, offs4, offs5, offs6, offs7;\n \n static void scan_initial(const char *pattern) {\n   totsize = offs0 = offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = offs7 = (unsigned)-1;\n-  sscanf(meth->method_types, pattern, &totsize, &offs0, &offs1, &offs2, &offs3,\n+  sscanf(method_get_types(meth), pattern, &totsize, &offs0, &offs1, &offs2, &offs3,\n       &offs4, &offs5, &offs6, &offs7);\n   CHECK_IF(!offs0 && offs1 == sizeof(id) && offs2 == offs1 + sizeof(SEL) && totsize >= offs2);\n }\n \n int main(void) {\n-  cls = OBJC_GETCLASS(\"ArrayTest\");\n+  cls = objc_get_class(\"ArrayTest\");\n \n-  meth = CLASS_GETINSTANCEMETHOD(cls, @selector(str:with:and:));\n+  meth = class_get_instance_method(cls, @selector(str:with:and:));\n   scan_initial(\"r*%u@%u:%u*%u*%u[4i]%u\");\n   CHECK_IF(offs3 == offs2 + sizeof(signed char *) && offs4 == offs3 + sizeof(unsigned char *));\n   CHECK_IF(totsize == offs4 + sizeof(enum Enum *));\n-  meth = CLASS_GETINSTANCEMETHOD(cls, @selector(meth1:with:with:));\n+  meth = class_get_instance_method(cls, @selector(meth1:with:with:));\n   scan_initial(\"i%u@%u:%u^i%u[0i]%u[2i]%u\");\n   CHECK_IF(offs3 == offs2 + sizeof(int *) && offs4 == offs3 + sizeof(int *));\n   CHECK_IF(totsize == offs4 + sizeof(int *));                                           \n   return 0;\n }\n \n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "33a30914f8e80ca8494457aaa5849910ee597eb8", "filename": "gcc/testsuite/objc.dg/type-stream-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-stream-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-stream-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-stream-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-options \"-fgnu-runtime\" } */\n /* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n #include <objc/typedstream.h>\n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "79db8765ead812ec919eacf55826d0ad4468c44b", "filename": "gcc/testsuite/objc.dg/typedef-alias-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftypedef-alias-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Ftypedef-alias-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftypedef-alias-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n /* Typedefs of ObjC types should work without any bogus warnings. */\n /* { dg-do compile } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n typedef Object MyObject;\n "}, {"sha": "15bbe97c9a5d5b9dc5291e74f176b161ab153ded", "filename": "gcc/testsuite/objc.dg/va-meth-1.m", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fva-meth-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fva-meth-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fva-meth-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,9 @@\n /* Based on objc/execute/va_method.m, by Nicola Pero */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+\n+#include \"../objc-obj-c++-shared/Object1.h\"\n \n-#include <objc/Object.h>\n #include <stdarg.h>\n #include <stdlib.h>\n \n@@ -67,3 +69,5 @@ int main (void)\n   \n   return 0;\n }\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "35cabfaf5defd4dd4b0c8d292b3d0f5fd6a904a6", "filename": "gcc/testsuite/objc.dg/zero-link-1.m", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,10 +1,12 @@\n /* Check if the '-fzero-link' flag correctly emits an objc_getClass() call. */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-fnext-runtime -fzero-link\" } */\n-/* { dg-do compile } */\n \n+/* { dg-do compile { target *-*-darwin*  } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-options \"-fzero-link\" } */\n+\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n-#include <objc/Object.h>\n \n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort();"}, {"sha": "443090aaee700748356d2a03a0d58e951b31492a", "filename": "gcc/testsuite/objc.dg/zero-link-2.m", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,10 +1,12 @@\n /* Check if the '-fno-zero-link' flag correctly _omits_ an objc_getClass() call. */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-fnext-runtime -fno-zero-link\" } */\n-/* { dg-do compile } */\n \n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-options \"-fno-zero-link\" } */\n+\n+#include \"../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n-#include <objc/Object.h>\n \n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort();"}, {"sha": "2b95b952b1e0a682c24b88bba785712de873d921", "filename": "gcc/testsuite/objc.dg/zero-link-3.m", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,10 +1,12 @@\n /* Check that the '-fzero-link' flag doesn't prevent messaging from working. */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n-/* { dg-options \"-fnext-runtime -fzero-link -lobjc\" } */\n+\n /* { dg-do run { target *-*-darwin* } } */\n+/* { dg-options \"-fzero-link\" } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#import <objc/objc.h>\n-#import <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+//#import <objc/objc.h>\n \n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort();\n@@ -22,3 +24,5 @@ int main(void) {\n   CHECK_IF(val == 1593);\n   return 0;\n }\n+\n+#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "207cce8b3c37e8a927c4eb707f9c8109a3c14da5", "filename": "gcc/testsuite/objc/compile/trivial.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fcompile%2Ftrivial.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fcompile%2Ftrivial.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fcompile%2Ftrivial.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,4 +1,4 @@\n-#import <objc/Object.h>\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n \n int main(void)\n {"}, {"sha": "f0790975780d4e1a980d5de96267a1681ffacf0c", "filename": "gcc/testsuite/objc/execute/IMP.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2FIMP.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2FIMP.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2FIMP.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,10 @@\n /* Contributed by Nicola Pero - Fri Mar  9 19:39:15 CET 2001 */\n+\n+#include <stdlib.h>\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n-#include \"next_mapping.h\"\n-\n /* Test getting and calling the IMP of a method */\n \n @interface TestClass\n@@ -20,7 +21,6 @@ - (int) next: (int)a\n }\n @end\n \n-\n int main (void)\n {\n   Class class;"}, {"sha": "6c579d771b86db55807eed95a9b1110a22c79e47", "filename": "gcc/testsuite/objc/execute/_cmd.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2F_cmd.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2F_cmd.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2F_cmd.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,8 +1,8 @@\n /* Contributed by Nicola Pero - Fri Mar  9 19:39:15 CET 2001 */\n-#include <objc/objc.h>\n-#include <objc/objc-api.h>\n \n-#include \"next_mapping.h\"\n+#include <stdlib.h>\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n+#include <objc/objc-api.h>\n \n /* Test the hidden argument _cmd to method calls */\n "}, {"sha": "dbde8cd11dd97e2497429bbc69bc98f0c711bc04", "filename": "gcc/testsuite/objc/execute/accessing_ivars.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Faccessing_ivars.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Faccessing_ivars.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Faccessing_ivars.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n /* Contributed by Nicola Pero - Thu Mar  8 16:27:46 CET 2001 */\n-#include <objc/objc.h>\n+#include <stdlib.h>\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n /* Test that by using -> we can access ivars of other objects of the same \n    class */"}, {"sha": "d8b9b29fb551628d9b36a9ddeda460c3a1a0e556", "filename": "gcc/testsuite/objc/execute/bf-1.m", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,5 @@\n-#include <objc/objc.h>\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {"}, {"sha": "9f5c7a51762c30fde96385f9c0ab4625e409e069", "filename": "gcc/testsuite/objc/execute/bf-10.m", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-10.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {\n@@ -19,4 +19,3 @@ @implementation MyObject\n @end\n \n #include \"bf-common.h\"\n-"}, {"sha": "1779d0ff8300d8b5c03ab6ccd13b2e84076a1080", "filename": "gcc/testsuite/objc/execute/bf-11.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-11.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {"}, {"sha": "5a05a0957efa984cf485c5cd0d3a7ff44b070dee", "filename": "gcc/testsuite/objc/execute/bf-12.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-12.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-12.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-12.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {"}, {"sha": "f893bfdf78c5a84bf1e37831c21afdd3b8b42773", "filename": "gcc/testsuite/objc/execute/bf-13.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-13.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-13.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-13.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {"}, {"sha": "8b65a047197c4f17db00de9466187fdcb4d43805", "filename": "gcc/testsuite/objc/execute/bf-14.m", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-14.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-14.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-14.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {\n@@ -22,4 +22,3 @@ @implementation MyObject\n @end\n \n #include \"bf-common.h\"\n-"}, {"sha": "f8d096bd16863f7a6f4a5219d28074d4d6d5011e", "filename": "gcc/testsuite/objc/execute/bf-15.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-15.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-15.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-15.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {"}, {"sha": "dea379c89108195d06de9d7ac14a8b34e86c9bee", "filename": "gcc/testsuite/objc/execute/bf-16.m", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-16.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-16.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-16.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n struct A {\n   int i;\n@@ -23,4 +23,3 @@ @implementation MyObject\n @end\n \n #include \"bf-common.h\"\n-"}, {"sha": "b36d406fe5e1ac5b03021c285404f1c959959e1d", "filename": "gcc/testsuite/objc/execute/bf-17.m", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-17.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-17.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-17.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n struct A {\n   int i;\n@@ -22,4 +22,3 @@ @implementation MyObject\n @end\n \n #include \"bf-common.h\"\n-"}, {"sha": "96a8aeb8b19652616e4466e254e6525a6fdd4c68", "filename": "gcc/testsuite/objc/execute/bf-18.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-18.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-18.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-18.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {"}, {"sha": "8be8ecc4b06fa2701d0b810e7a72cbd802fd82d7", "filename": "gcc/testsuite/objc/execute/bf-19.m", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-19.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-19.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-19.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {\n@@ -14,4 +14,3 @@ @implementation MyObject\n @end\n \n #include \"bf-common.h\"\n-"}, {"sha": "bbb6fe1908e7c7801c7593365ba38c25ff6c9608", "filename": "gcc/testsuite/objc/execute/bf-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {"}, {"sha": "00cf99b61b9e4d654d62648317b5997749cd97e4", "filename": "gcc/testsuite/objc/execute/bf-20.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-20.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-20.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-20.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {"}, {"sha": "423bde0e5f4d22d91088e1ed04944824244d0883", "filename": "gcc/testsuite/objc/execute/bf-21.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-21.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-21.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-21.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n typedef enum \n {"}, {"sha": "a531726f734a07ec17fc3dbadc0e87f3298c8179", "filename": "gcc/testsuite/objc/execute/bf-3.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {"}, {"sha": "8c9aa4e3b6d10c4ad4a9919110179f4bc551cb23", "filename": "gcc/testsuite/objc/execute/bf-4.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-4.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {"}, {"sha": "3a2208fa797384445c9eeaace0f17bfe86010141", "filename": "gcc/testsuite/objc/execute/bf-5.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-5.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {"}, {"sha": "1a3c2d838a724fe799cd3c44191b8041f9c9aba9", "filename": "gcc/testsuite/objc/execute/bf-6.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-6.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {"}, {"sha": "c4e8d6e03038d8a67ce94bb5e4bd8875c325a844", "filename": "gcc/testsuite/objc/execute/bf-7.m", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-7.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {\n@@ -19,4 +19,3 @@ @implementation MyObject\n @end\n \n #include \"bf-common.h\"\n-"}, {"sha": "8dfdccf65a7056121f003f35cd051badcfb33914", "filename": "gcc/testsuite/objc/execute/bf-8.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-8.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {"}, {"sha": "077de6cedd658c28016a5a073143086da883ab5f", "filename": "gcc/testsuite/objc/execute/bf-9.m", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-9.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n @interface MyObject\n {\n@@ -20,4 +20,3 @@ @implementation MyObject\n @end\n \n #include \"bf-common.h\"\n-"}, {"sha": "5d6ef577a9094b8e59d5288f29cbed932fe35445", "filename": "gcc/testsuite/objc/execute/bf-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-common.h?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,8 @@\n+#include <stdlib.h>\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #ifndef __NEXT_RUNTIME__\n #include <objc/encoding.h>\n #endif\n-#include \"next_mapping.h\"\n \n void print_ivars (Class class)\n {"}, {"sha": "c719d27d18beb56a19f19d24b2b23e9672021f72", "filename": "gcc/testsuite/objc/execute/bycopy-1.m", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,8 +3,7 @@\n  * Fri Feb  2 11:48:01 GMT 2001\n  */\n \n-#include <objc/objc.h>\n-#include <objc/Protocol.h>\n+#include \"../../objc-obj-c++-shared/Protocol1.h\"\n \n @protocol MyProtocol\n - (bycopy id) bycopyMethod;"}, {"sha": "8e7f169293f0cfd71b725da44f5148375a9e5865", "filename": "gcc/testsuite/objc/execute/bycopy-2.m", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,9 +3,7 @@\n  * Fri Feb  2 11:48:01 GMT 2001\n  */\n \n-#include <objc/objc.h>\n-#include <objc/Object.h>\n-#include <objc/Protocol.h>\n+#include \"../../objc-obj-c++-shared/Protocol1.h\"\n \n @protocol MyProtocol\n + (bycopy id<MyProtocol>) bycopyMethod;"}, {"sha": "d1944a4b3a130e7fb93e9e606fa567712ebfbfac", "filename": "gcc/testsuite/objc/execute/bycopy-3.m", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -9,14 +9,12 @@\n  * interfere with what we are testing, which is that the `bycopy'\n  * keyword generates the _F_BYCOPY qualifier for the return type.  */\n \n-#include <objc/objc.h>\n-#include <objc/Object.h>\n-#include <objc/Protocol.h>\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../../objc-obj-c++-shared/Protocol1.h\"\n \n #ifndef __NEXT_RUNTIME__\n #include <objc/encoding.h>\n #endif\n-#include \"next_mapping.h\"\n \n @protocol MyProtocol\n + (bycopy id<MyProtocol>) bycopyMethod;"}, {"sha": "b823ea816f0d8365e9395204df378b1c10d69036", "filename": "gcc/testsuite/objc/execute/cascading-1.m", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcascading-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcascading-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcascading-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,4 +1,5 @@\n-#include <objc/Object.h>\n+#include <stdlib.h>\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n \n @interface Foo : Object\n + foo;"}, {"sha": "2ac2c0646c08f1bda528a1e4ad8e25886cf4456e", "filename": "gcc/testsuite/objc/execute/class-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,9 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n-#include \"next_mapping.h\"\n-\n /* Tests creating a RootClass */\n \n @interface RootClass"}, {"sha": "0908609f0f3c419adb24a827469d822c9da42ba8", "filename": "gcc/testsuite/objc/execute/class-10.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-10.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,9 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n-#include \"next_mapping.h\"\n-\n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n    implementation, and using self to call another method of itself */"}, {"sha": "33cd0492da324c6a9d25b76e3b9d233d18f270e8", "filename": "gcc/testsuite/objc/execute/class-11.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-11.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,9 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n-#include \"next_mapping.h\"\n-\n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n    implementation and using self to call another method of itself - in"}, {"sha": "3f4c4fbd5f41d7fac9d21be8aa4306ea0a4ca0b8", "filename": "gcc/testsuite/objc/execute/class-12.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-12.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-12.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-12.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,9 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n-#include \"next_mapping.h\"\n-\n /* Tests creating a root class and a subclass with a class methods */\n \n @interface RootClass"}, {"sha": "790654d107a64d7dbbb8be21a24d75b0a4cbc20a", "filename": "gcc/testsuite/objc/execute/class-13.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-13.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-13.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-13.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,9 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n-#include \"next_mapping.h\"\n-\n /* Tests creating a root class and a subclass with a class accessor\n    methods and a subclass overriding the superclass' implementation\n    but reusing it with super */"}, {"sha": "e04452e527bf5d8e350005530d40f7e17dae342d", "filename": "gcc/testsuite/objc/execute/class-14.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-14.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-14.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-14.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,9 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n-#include \"next_mapping.h\"\n-\n /* Tests creating a root class and a subclass with a class accessor\n    methods and a subclass overriding the superclass' implementation,\n    and using self to call another method of itself */"}, {"sha": "c20f95fd6a6731b1a46e14770a61323a2e72ca2c", "filename": "gcc/testsuite/objc/execute/class-2.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,9 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n-#include \"next_mapping.h\"\n-\n /* Tests creating a root class and a subclass */\n \n @interface RootClass"}, {"sha": "dbdc0b9f2e382d749b9504b94c2bf66fd4a14266", "filename": "gcc/testsuite/objc/execute/class-3.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,9 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n-#include \"next_mapping.h\"\n-\n /* Tests creating a root class and a minimal subclass tree */\n \n @interface RootClass"}, {"sha": "61ce30a6a80dc27ed1ea913cfd688799b4963115", "filename": "gcc/testsuite/objc/execute/class-4.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-4.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,9 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n-#include \"next_mapping.h\"\n-\n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods */\n "}, {"sha": "c10df1be0b3111dd1dba458f65b9f5593ff288d6", "filename": "gcc/testsuite/objc/execute/class-5.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-5.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,9 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n-#include \"next_mapping.h\"\n-\n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n    implementation */"}, {"sha": "064462280e09c44fc56d56b7c355e94a3b0344ee", "filename": "gcc/testsuite/objc/execute/class-6.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-6.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,9 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n-#include \"next_mapping.h\"\n-\n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n    implementation but reusing it with super */"}, {"sha": "06de61fef3242a6377862b86f524e951ffa046ef", "filename": "gcc/testsuite/objc/execute/class-7.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-7.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,9 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n-#include \"next_mapping.h\"\n-\n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods; accessor methods implemented in a separate\n    category */"}, {"sha": "0471994d3595c877e1e58dbea3d9adf43a010f81", "filename": "gcc/testsuite/objc/execute/class-8.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-8.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,9 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n-#include \"next_mapping.h\"\n-\n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n    implementation - in a category */"}, {"sha": "367a4c912ccfac72022e93072231f967672044c2", "filename": "gcc/testsuite/objc/execute/class-9.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-9.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,9 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+\n+#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n-#include \"next_mapping.h\"\n-\n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n    implementation but reusing it with super - in a category */"}, {"sha": "ebc49b66c221d765d3e976961cdef3eb5534e28b", "filename": "gcc/testsuite/objc/execute/class-tests-1.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-1.h?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,8 +1,9 @@\n /* Contributed by Nicola Pero on Tue Mar  6 23:05:53 CET 2001 */\n+\n+#include <stdlib.h>\n+#include \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n-#include <stdlib.h>\n \n /*\n  * Standard Tests For Classes and Objects - abort upon failing; return"}, {"sha": "ad2b76b50e8d175281f997af0f27abde4c731bce", "filename": "gcc/testsuite/objc/execute/class_self-2.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,4 +1,5 @@\n /* Contributed by Nicola Pero - Fri Oct 26 22:39:32 BST 2001 */\n+#include <stdlib.h>\n #include <objc/objc.h>\n \n /* Test calling a class method on self where self has been redefined"}, {"sha": "b134f0c85faf495b6567142fd5878acc4d29e3fe", "filename": "gcc/testsuite/objc/execute/compatibility_alias.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcompatibility_alias.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcompatibility_alias.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcompatibility_alias.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n /* Contributed by Nicola Pero - Thu Mar  8 17:23:59 CET 2001 */\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n-#include <objc/Object.h>\n \n @compatibility_alias MyObject Object;\n "}, {"sha": "3e2412e4647ee5b6bb50d189739f9eabc810d9d5", "filename": "gcc/testsuite/objc/execute/encode-1.m", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fencode-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fencode-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fencode-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,8 @@\n /* Contributed by Nicola Pero - Thu Mar  8 16:27:46 CET 2001 */\n+#include <stdlib.h>\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n \n /* Test very simple @encode */\n "}, {"sha": "1adcfd02e956e022c01eb8054343a33350b22a37", "filename": "gcc/testsuite/objc/execute/enumeration-1.m", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fenumeration-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fenumeration-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fenumeration-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,7 @@\n /* Contributed by Nicola Pero -  Wed Dec  5 17:12:40 GMT 2001 */\n+#include <stdlib.h>\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n-#include <objc/Object.h>\n \n /* Test using a bitfield enumeration ivar.  */\n "}, {"sha": "c47bb8a583d901686cd869517fbd48e89a41e9d8", "filename": "gcc/testsuite/objc/execute/enumeration-2.m", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fenumeration-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fenumeration-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fenumeration-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,7 @@\n /* Contributed by Nicola Pero -  Wed Dec  5 17:12:40 GMT 2001 */\n+#include <stdlib.h>\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n-#include <objc/Object.h>\n \n typedef enum { black, white } color;\n "}, {"sha": "01eff9257a33695c587e29632cef26d1487c5822", "filename": "gcc/testsuite/objc/execute/exceptions/catchall-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fcatchall-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fcatchall-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fcatchall-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,15 +2,15 @@\n    exceptions.  */\n /* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n \n-#include <objc/Object.h>\n #include <stdio.h>\n+#include <stdlib.h>\n+#import \"../../../objc-obj-c++-shared/Object1.h\"\n \n /* The following is not required in actual user code; we include it\n    here to check that the compiler generates an internal definition of\n    _setjmp that is consistent with what <setjmp.h> provides.  */\n #include <setjmp.h>\n \n-extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n @interface Frob: Object"}, {"sha": "5206c77cf3760d148dd0c53bd01b4948a18445e0", "filename": "gcc/testsuite/objc/execute/exceptions/finally-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ffinally-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ffinally-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ffinally-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n-#include <objc/Object.h>\n #include <stdio.h>\n #include <stdlib.h>\n+#import \"../../../objc-obj-c++-shared/Object1.h\"\n \n static int made_try = 0;\n "}, {"sha": "ae5d9273fdfb8561f67795c9c59881bfb0b8167d", "filename": "gcc/testsuite/objc/execute/exceptions/foward-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ffoward-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ffoward-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ffoward-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,9 @@\n /* Check that throwing an exception from a -forward:: works.  */\n /* Developed by Marcin Koziej <creep@desk.pl>.  */\n \n-#import <objc/Object.h>\n-#import <objc/objc-api.h>\n #include <stdlib.h>\n+#import \"../../../objc-obj-c++-shared/Object1.h\"\n+#import <objc/objc-api.h>\n \n static int i;\n "}, {"sha": "fa419f9e1f8d4751f9bfec30245e4835e0f13437", "filename": "gcc/testsuite/objc/execute/exceptions/local-variables-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Flocal-variables-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Flocal-variables-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Flocal-variables-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,9 +2,9 @@\n    block survive until the @catch block is reached.  */\n /* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n \n-#include <objc/Object.h>\n #include <stdlib.h>\n #include <stdio.h>\n+#import \"../../../objc-obj-c++-shared/Object1.h\"\n \n int gi1 = 9, gi2 = 19;\n float gf1 = 9.0, gf2 = 19.0;"}, {"sha": "4e55e9d841b45d8aea7a0bde6e92eda61e7454d1", "filename": "gcc/testsuite/objc/execute/exceptions/trivial.m", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ftrivial.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ftrivial.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ftrivial.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,19 @@\n-#import <objc/Object.h>\n+#include <stdlib.h>\n+#import \"../../../objc-obj-c++-shared/Object1.h\"\n \n+/* do nothing except prove we can compile and link code calling the\n+   ecceptions mechanism */\n+   \n int main(void)\n {\n-  [Object class];\n-  return 0;\n+    @try {\n+\tint a = 1 ;\n+\t@throw [Object new];\n+    }\n+    @catch (Object *obj) {\n+  \treturn 0;\n+    }\n+    abort();\n }\n+\n+#import \"../../../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "a62def3ba6f7aeaaaede3f38067f62265ccde1dc", "filename": "gcc/testsuite/objc/execute/formal_protocol-1.m", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,7 @@\n /* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n-#include <objc/objc.h>\n-#include <objc/Object.h>\n+\n+#include <stdlib.h>\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n \n /* Tests defining a protocol and a class adopting it */\n "}, {"sha": "a0f7eecc81acb00fbb4cf40cc042ca218472417e", "filename": "gcc/testsuite/objc/execute/formal_protocol-2.m", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,7 @@\n /* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n-#include <objc/objc.h>\n-#include <objc/Object.h>\n+\n+#include <stdlib.h>\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n \n /* Test defining a protocol, a class adopting it, and using an object\n    of type `id <protocol>'. */"}, {"sha": "c55773a668ab842d360a1b25d17be57a6ffb67ad", "filename": "gcc/testsuite/objc/execute/formal_protocol-3.m", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,7 @@\n /* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n-#include <objc/objc.h>\n-#include <objc/Object.h>\n+\n+#include <stdlib.h>\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n \n /* Test defining two protocol, a class adopting both of them, \n    and using an object of type `id <Protocol1, Protocol2>' */ "}, {"sha": "92f05211702620a1a4db26df59e2c20bc055e71d", "filename": "gcc/testsuite/objc/execute/formal_protocol-4.m", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-4.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,7 @@\n /* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n-#include <objc/objc.h>\n-#include <objc/Object.h>\n+\n+#include <stdlib.h>\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n \n /* Test defining a protocol, a class adopting it in a category */\n "}, {"sha": "8bb63ecfa662a8d02cea8d1b3b30edf489dc2c92", "filename": "gcc/testsuite/objc/execute/formal_protocol-5.m", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-5.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,7 @@\n /* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n-#include <objc/objc.h>\n-#include <objc/Protocol.h>\n+\n+#include <stdlib.h>\n+#include \"../../objc-obj-c++-shared/Protocol1.h\"\n \n /* Test defining a protocol, and accessing it using @protocol */\n \n@@ -23,7 +24,11 @@ int main (void)\n {\n   Protocol *protocol = @protocol (Evaluating);\n \n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  if (strcmp (protocol_getName(protocol), \"Evaluating\"))\n+#else\n   if (strcmp ([protocol name], \"Evaluating\"))\n+#endif\n     {\n       abort ();\n     }"}, {"sha": "dd42b370192e365d1135997c012f75da6bc17d85", "filename": "gcc/testsuite/objc/execute/formal_protocol-6.m", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-6.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,7 @@\n /* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n-#include <objc/objc.h>\n-#include <objc/Protocol.h>\n+\n+#include <stdlib.h>\n+#include \"../../objc-obj-c++-shared/Protocol1.h\"\n \n /* Test defining a protocol, and accessing it using @protocol */\n \n@@ -15,7 +16,11 @@ int main (void)\n {\n   Protocol *protocol = @protocol (Evaluating);\n \n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  if (strcmp (protocol_getName(protocol), \"Evaluating\"))\n+#else\n   if (strcmp ([protocol name], \"Evaluating\"))\n+#endif\n     {\n       abort ();\n     }"}, {"sha": "c4e18500f50c8ca7c8cd93c84c1224956a7469ab", "filename": "gcc/testsuite/objc/execute/formal_protocol-7.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-7.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n /* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n-#include <objc/objc.h>\n-#include <objc/Object.h>\n-#include <objc/Protocol.h>\n+\n+#include <stdlib.h>\n+#import \"../../objc-obj-c++-shared/Protocol1.h\"\n \n /* Test defining two protocols, one incorporating the other one. */\n "}, {"sha": "c20f8c4934f795d91b22c6924ff6718359bde3f2", "filename": "gcc/testsuite/objc/execute/forward-1.m", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fforward-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fforward-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fforward-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,20 +2,13 @@\n \n #include <stdio.h>\n #include <stdlib.h>\n-#include <objc/Object.h>\n+\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc-api.h>\n \n #define VALUETOUSE 1234567890\n \n-#ifdef __NEXT_RUNTIME__\n-/* Does not run with the next runtime. */\n-int main(void)\n-{\n-  return 0;\n-}\n-\n-#else\n-\n id forwarder, receiver;\n \n @interface Forwarder: Object\n@@ -62,8 +55,13 @@ @implementation Forwarder\n     receiver = theReceiver;\n     return self;\n }\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+- forward: (SEL)theSel: (marg_list)theArgFrame\n+{\n+#else\n -(retval_t) forward: (SEL)theSel: (arglist_t)theArgFrame\n {\n+#endif\n   /* If we have a reciever try to perform on that object */\n     if (receiver)\n         return [receiver performv: theSel: theArgFrame];\n@@ -81,5 +79,3 @@ int main()\n     [forwarder display];\n     exit(0);\n }\n-\n-#endif"}, {"sha": "ac4cf7f2799be17dad83fe69ad22135d7e6bbb43", "filename": "gcc/testsuite/objc/execute/forward-1.x", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fforward-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fforward-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fforward-1.x?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -20,9 +20,8 @@ if { [istarget alpha*-*-linux*]\n      || [istarget alpha*-dec-osf*]\n      || ([istarget i?86-*-solaris2*] && [check_effective_target_lp64] )\n      || [istarget mips-sgi-irix*]\n-     || [istarget powerpc*-*-darwin*]\n      || [istarget sparc*-sun-solaris2*]\n-     || ([istarget x86_64-*-darwin*] && [check_effective_target_lp64] ) } {\n+     || ([istarget *-*-darwin*] && [check_effective_target_lp64] ) } {\n     set torture_eval_before_execute {\n \tglobal compiler_conditional_xfail_data\n \tset compiler_conditional_xfail_data {"}, {"sha": "6f4d879201a8603f882d236fc219b755dc51c11b", "filename": "gcc/testsuite/objc/execute/function-message-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Ffunction-message-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Ffunction-message-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Ffunction-message-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,4 +1,4 @@\n-#include <objc/Object.h>\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n \n @interface Foo : Object\n + bar;"}, {"sha": "3978e6aa2deaa076f0894098ea880ada6110650c", "filename": "gcc/testsuite/objc/execute/informal_protocol.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Finformal_protocol.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Finformal_protocol.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Finformal_protocol.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n /* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n-#include <objc/Object.h>\n \n @interface Object (StopProtocol)\n - (void) stop;"}, {"sha": "15dfc0b485d60c69d3a97cc4e13fb966c2c5e965", "filename": "gcc/testsuite/objc/execute/load-3.m", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fload-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fload-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fload-3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -8,8 +8,9 @@\n     proper order.\n  */\n \n+#include <stdlib.h>\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n-#include <objc/Object.h>\n \n @interface A : Object\n @end"}, {"sha": "a4c9a561968a43cdf9344ab029e75578291c64ba", "filename": "gcc/testsuite/objc/execute/nested-func-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnested-func-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnested-func-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnested-func-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,8 +3,8 @@\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n #include <stdio.h>\n #include <stdlib.h>\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n-#include <objc/Object.h>\n \n int bappy (int (*blargh) (int a, int b, int c))\n {"}, {"sha": "9cb004d2829da8135b50c4c75c66fe8c02541823", "filename": "gcc/testsuite/objc/execute/no_clash.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fno_clash.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fno_clash.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fno_clash.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n /* Contributed by Nicola Pero - Fri Mar  9 19:39:15 CET 2001 */\n-#include <objc/objc.h>\n-#include <objc/Object.h>\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n+#import <objc/objc.h>\n \n /* Test that using the same name for different things makes no \n    problem */"}, {"sha": "1cf83ff7fecae85846f4309cf513288187e9d279", "filename": "gcc/testsuite/objc/execute/np-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnp-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnp-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnp-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -3,8 +3,8 @@\n  * Tue Sep 19 4:29AM\n  */\n \n+#include \"../../objc-obj-c++-shared/Protocol1.h\"\n #include <objc/objc.h>\n-#include <objc/Protocol.h>\n \n @protocol MyProtocol\n - (oneway void) methodA;"}, {"sha": "da276be982b7e2ab6708b5fa50859adb4d5486d5", "filename": "gcc/testsuite/objc/execute/np-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnp-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnp-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnp-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -2,8 +2,8 @@\n  * Contributed by Nicola Pero <n.pero@mi.flashnet.it>\n  * Tue Sep 19 4:34AM\n  */\n+#include \"../../objc-obj-c++-shared/Protocol1.h\"\n #include <objc/objc.h>\n-#include <objc/Protocol.h>\n \n @protocol MyProtocol\n + (oneway void) methodA;"}, {"sha": "199517e43a22cf40e83e2cb75b3f906b8f0e2f77", "filename": "gcc/testsuite/objc/execute/object_is_class.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_class.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_class.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_class.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,8 @@\n /* Contributed by Nicola Pero - Tue Jul  3 10:55:21 BST 2001 */\n+#import \"../../objc-obj-c++-shared/next-mapping.h\"\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n-\n-#include \"next_mapping.h\"\n \n /* This test demonstrate a failure in object_is_class which was fixed */\n "}, {"sha": "d5aedca0899a2b7ccce2a9e42255f0eaab05787e", "filename": "gcc/testsuite/objc/execute/object_is_meta_class.m", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_meta_class.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_meta_class.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_meta_class.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,9 +1,7 @@\n /* Contributed by Nicola Pero - Tue Jul  3 10:55:21 BST 2001 */\n-#include <objc/objc.h>\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc-api.h>\n-#include <objc/Object.h>\n-\n-#include \"next_mapping.h\"\n \n /* This test demonstrate a failure in object_is_meta_class which was fixed */\n "}, {"sha": "5040ccec4a233d27089096f5c1832d037a9fd8df", "filename": "gcc/testsuite/objc/execute/private.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprivate.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprivate.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprivate.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n /* Contributed by Nicola Pero - Fri Mar  9 19:39:15 CET 2001 */\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n-#include <objc/Object.h>\n \n /* Test the @private, @protected, @public keyworks for ivars.  We only\n    check syntax. */"}, {"sha": "29b5c3ded78685151916bcb6c5aaf3354ebbb3be", "filename": "gcc/testsuite/objc/execute/protocol-isEqual-1.m", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,6 @@\n /* Contributed by Nicola Pero - Fri Jun  4 03:16:17 BST 2004 */\n /* Test that a protocol is equal to itself.  */\n-#include <objc/Protocol.h>\n+#include \"../../objc-obj-c++-shared/Protocol1.h\"\n \n @protocol Foo\n - (void)foo;\n@@ -10,7 +10,11 @@ int main (void)\n {\n   Protocol *protocol = @protocol(Foo);\n \n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  if ( !protocol_isEqual (protocol, protocol))\n+#else\n   if (! [protocol isEqual: protocol])\n+#endif\n     {\n       abort ();\n     }"}, {"sha": "70ab8ccdd1eca669214e8791761ac900070d94cf", "filename": "gcc/testsuite/objc/execute/protocol-isEqual-2.m", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,7 @@\n /* Contributed by Nicola Pero - Fri Jun  4 03:16:17 BST 2004 */\n /* Test that protocols with different names are different.  */\n-#include <objc/Protocol.h>\n+\n+#include \"../../objc-obj-c++-shared/Protocol1.h\"\n \n @protocol Foo1\n - (void)foo1;\n@@ -12,7 +13,11 @@ - (void)foo2;\n \n int main (void)\n {\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  if (protocol_isEqual (@protocol(Foo1), @protocol(Foo2)))\n+#else\n   if ([@protocol(Foo1) isEqual: @protocol(Foo2)])\n+#endif\n     {\n       abort ();\n     }"}, {"sha": "23863829440a2765c0c63eac1ca3ef74e8fa70a4", "filename": "gcc/testsuite/objc/execute/protocol-isEqual-3.m", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,14 +1,19 @@\n /* Contributed by Nicola Pero - Fri Jun  4 03:16:17 BST 2004 */\n /* Test that a protocol is not equal to nil.  */\n-#include <objc/Protocol.h>\n+\n+#include \"../../objc-obj-c++-shared/Protocol1.h\"\n \n @protocol Foo\n - (void)foo;\n @end\n \n int main (void)\n {\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  if (protocol_isEqual (@protocol(Foo), nil))\n+#else\n   if ([@protocol(Foo) isEqual: nil])\n+#endif\n     {\n       abort ();\n     }"}, {"sha": "4d5af640e46b9abc5b55f22d4f9969ebfd599597", "filename": "gcc/testsuite/objc/execute/protocol-isEqual-4.m", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-4.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,6 +1,7 @@\n /* Contributed by David Ayers - Fri Jun  4 03:16:17 BST 2004 */\n /* Test that a protocol is not equal to something which is not a protocol.  */\n-#include <objc/Protocol.h>\n+\n+#include \"../../objc-obj-c++-shared/Protocol1.h\"\n \n @protocol Foo\n - (void)foo;\n@@ -9,7 +10,11 @@ - (void)foo;\n int main (void)\n {\n   /* A Protocol object should not be equal to a Class object.  */\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  if (protocol_isEqual (@protocol(Foo), objc_getClass(\"Protocol\")))\n+#else\n   if ([@protocol(Foo) isEqual: [Protocol class]])\n+#endif\n     {\n       abort ();\n     }"}, {"sha": "d9085ae7b0408774dc812dfb87fa3cc628c025a3", "filename": "gcc/testsuite/objc/execute/root_methods.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Froot_methods.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Froot_methods.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Froot_methods.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,7 @@\n /* Contributed by Nicola Pero - Thu Mar  8 16:27:46 CET 2001 */\n-#include <objc/objc.h>\n \n-#include \"next_mapping.h\"\n+#import \"../../objc-obj-c++-shared/next-mapping.h\"\n+#import <objc/objc.h>\n \n /* Test that instance methods of root classes are available as class \n    methods to other classes as well */"}, {"sha": "acc486ab21f7937fed6637b24f72ed2671b87e6c", "filename": "gcc/testsuite/objc/execute/string1.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring1.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,11 +1,10 @@\n /* Based on a test case contributed by Nicola Pero.  */\n \n+#import \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <string.h>\n #include <stdlib.h>\n \n-#ifdef __NEXT_RUNTIME__\n-#include \"next_mapping.h\"\n-#else\n+#ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n #endif\n "}, {"sha": "32e70616916a8e4bd38cf3c48caa7fe44534e790", "filename": "gcc/testsuite/objc/execute/string2.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring2.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,11 +1,10 @@\n /* Based on a test case contributed by Nicola Pero.  */\n \n+#import \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <string.h>\n #include <stdlib.h>\n \n-#ifdef __NEXT_RUNTIME__\n-#include \"next_mapping.h\"\n-#else\n+#ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n #endif\n "}, {"sha": "2595a09c19a198561936e63229a6b061cb6f56b4", "filename": "gcc/testsuite/objc/execute/string3.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring3.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,11 +1,10 @@\n /* Based on a test case contributed by Nicola Pero.  */\n \n+#import \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <string.h>\n #include <stdlib.h>\n \n-#ifdef __NEXT_RUNTIME__\n-#include \"next_mapping.h\"\n-#else\n+#ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n #endif\n "}, {"sha": "a7bcf431d5280fb8c080cbdbce5862d34c1e170d", "filename": "gcc/testsuite/objc/execute/string4.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring4.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,11 +1,10 @@\n /* Based on a test case contributed by Nicola Pero.  */\n \n+#import \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <string.h>\n #include <stdlib.h>\n \n-#ifdef __NEXT_RUNTIME__\n-#include \"next_mapping.h\"\n-#else\n+#ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n #endif\n "}, {"sha": "0fc61dbe564ee54aa7c768c9b81aed5b864c82f6", "filename": "gcc/testsuite/objc/execute/trivial.m", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Ftrivial.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812398e4cfcb5ee641dbf8f8702d02c3eb026012/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Ftrivial.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Ftrivial.m?ref=812398e4cfcb5ee641dbf8f8702d02c3eb026012", "patch": "@@ -1,7 +1,9 @@\n-#import <objc/Object.h>\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n \n int main(void)\n {\n   [Object class];\n   return 0;\n }\n+\n+#import \"../../objc-obj-c++-shared/Object1-implementation.h\""}]}