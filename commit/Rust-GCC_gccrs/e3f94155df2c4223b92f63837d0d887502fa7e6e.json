{"sha": "e3f94155df2c4223b92f63837d0d887502fa7e6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNmOTQxNTVkZjJjNDIyM2I5MmY2MzgzN2QwZDg4NzUwMmZhN2U2ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T11:40:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T11:40:26Z"}, "message": "[multiple changes]\n\n2015-11-12  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* init.c: Do not try to mess with the MSR values in RTP mode:\n\tnot needed and forbidden.\n\n2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_attr.adb (Compile_Stream_Body_In_Scope): Do not install\n\tfull view of a type that has pragma Stream_Convert, because\n\tthis indicates special processing for the stream operations of\n\tthe type.\n\nFrom-SVN: r230240", "tree": {"sha": "e856a7f2f93456d2f37728a98f5d093dbcf9fcd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e856a7f2f93456d2f37728a98f5d093dbcf9fcd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3f94155df2c4223b92f63837d0d887502fa7e6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f94155df2c4223b92f63837d0d887502fa7e6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3f94155df2c4223b92f63837d0d887502fa7e6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f94155df2c4223b92f63837d0d887502fa7e6e/comments", "author": null, "committer": null, "parents": [{"sha": "311014705a3cf42caf7446caa95f4e4a34fce9be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/311014705a3cf42caf7446caa95f4e4a34fce9be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/311014705a3cf42caf7446caa95f4e4a34fce9be"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "13c2be14cb926dfc50f18e2fd3304d9bd6a740f1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f94155df2c4223b92f63837d0d887502fa7e6e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f94155df2c4223b92f63837d0d887502fa7e6e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e3f94155df2c4223b92f63837d0d887502fa7e6e", "patch": "@@ -1,3 +1,15 @@\n+2015-11-12  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* init.c: Do not try to mess with the MSR values in RTP mode:\n+\tnot needed and forbidden.\n+\n+2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_attr.adb (Compile_Stream_Body_In_Scope): Do not install\n+\tfull view of a type that has pragma Stream_Convert, because\n+\tthis indicates special processing for the stream operations of\n+\tthe type.\n+\n 2015-11-12  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_ch5.adb, sem_ch3.adb, exp_util.ads, inline.adb, freeze.adb,"}, {"sha": "d40f49de51ce181ceca6acccd9a8c8687d13d3f6", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f94155df2c4223b92f63837d0d887502fa7e6e/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f94155df2c4223b92f63837d0d887502fa7e6e/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=e3f94155df2c4223b92f63837d0d887502fa7e6e", "patch": "@@ -650,12 +650,19 @@ package body Exp_Attr is\n          --  The component type may be private, in which case we install its\n          --  full view to compile the subprogram.\n \n+         --  The component type may be private, in which case we install its\n+         --  full view to compile the subprogram. We do not do this if the\n+         --  type has a Stream_Convert pragma, which indicates that there are\n+         --  special stream-processing operations for that type (for example\n+         --  Unbounded_String and its wide varieties).\n+\n          Scop := Scope (C_Type);\n \n          if Is_Private_Type (C_Type)\n            and then Present (Full_View (C_Type))\n            and then not In_Open_Scopes (Scop)\n            and then Ekind (Scop) = E_Package\n+           and then No (Get_Stream_Convert_Pragma (C_Type))\n          then\n             Install := True;\n          end if;"}, {"sha": "59fc335b6fe42688cfc49e35886df07a43386156", "filename": "gcc/ada/init.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f94155df2c4223b92f63837d0d887502fa7e6e/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f94155df2c4223b92f63837d0d887502fa7e6e/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=e3f94155df2c4223b92f63837d0d887502fa7e6e", "patch": "@@ -1922,8 +1922,9 @@ __gnat_error_handler (int sig, siginfo_t *si, void *sc)\n   /* VxWorks on e500v2 clears the SPE bit of the MSR when entering CPU\n      exception state. To allow the handler and exception to work properly\n      when they contain SPE instructions, we need to set it back before doing\n-     anything else. */\n-#if (CPU == PPCE500V2) || (CPU == PPC85XX)\n+     anything else.\n+     This mechanism is only need in kernel mode. */\n+#if !(defined (__RTP__) || defined (CERT)) && ((CPU == PPCE500V2) || (CPU == PPC85XX))\n   register unsigned msr;\n   /* Read the MSR value */\n   asm volatile (\"mfmsr %0\" : \"=r\" (msr));"}]}