{"sha": "73ca9fb5dfa98119d9eb02f58f2ac26982ade042", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNjYTlmYjVkZmE5ODExOWQ5ZWIwMmY1OGYyYWMyNjk4MmFkZTA0Mg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-09-27T22:55:23Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-09-27T22:55:23Z"}, "message": "tree.h (tree_to_shwi): Add attribute nonnull and pure.\n\ngcc/ChangeLog:\n\n\t* tree.h (tree_to_shwi): Add attribute nonnull and pure.\n\t(tree_to_poly_int64, tree_to_uhwi, tree_to_poly_uint64): Same.\n\t(int_fits_type_p): Same.\n\ngcc/ada/ChangeLog:\n\n\t* gcc-interface/utils.c (make_packable_type): Introduce a temporary\n\tto avoid -Wnonnull.\n\t(unchecked_convert): Same.\n\nFrom-SVN: r264680", "tree": {"sha": "bb3d5a5e5baeefa65c7dc2dd41ab398dee386ab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb3d5a5e5baeefa65c7dc2dd41ab398dee386ab7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73ca9fb5dfa98119d9eb02f58f2ac26982ade042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73ca9fb5dfa98119d9eb02f58f2ac26982ade042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73ca9fb5dfa98119d9eb02f58f2ac26982ade042", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73ca9fb5dfa98119d9eb02f58f2ac26982ade042/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f20ac63787f7f4801c7190b4b74062d2bd481872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f20ac63787f7f4801c7190b4b74062d2bd481872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f20ac63787f7f4801c7190b4b74062d2bd481872"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "367c4c42737196147a0e06e45099d12411ad21bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73ca9fb5dfa98119d9eb02f58f2ac26982ade042/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73ca9fb5dfa98119d9eb02f58f2ac26982ade042/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73ca9fb5dfa98119d9eb02f58f2ac26982ade042", "patch": "@@ -1,3 +1,9 @@\n+2018-09-27  Martin Sebor  <msebor@redhat.com>\n+\n+\t* tree.h (tree_to_shwi): Add attribute nonnull and pure.\n+\t(tree_to_poly_int64, tree_to_uhwi, tree_to_poly_uint64): Same.\n+\t(int_fits_type_p): Same.\n+\n 2018-09-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (FPCR_REG): Remove."}, {"sha": "ce20db3d0d0dcf35cb2de6e635a8378bc18210a3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73ca9fb5dfa98119d9eb02f58f2ac26982ade042/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73ca9fb5dfa98119d9eb02f58f2ac26982ade042/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=73ca9fb5dfa98119d9eb02f58f2ac26982ade042", "patch": "@@ -1,3 +1,9 @@\n+2018-09-27  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc-interface/utils.c (make_packable_type): Introduce a temporary\n+\tto avoid -Wnonnull.\n+\t(unchecked_convert): Same.\n+\n 2018-09-26  Elisa Barboni  <barboni@adacore.com>\n \n \t* sem_prag.adb (Check_Refined_Global_Item): Improve error"}, {"sha": "9530165a0c1dbab74905558d39edacdc483656e5", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73ca9fb5dfa98119d9eb02f58f2ac26982ade042/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73ca9fb5dfa98119d9eb02f58f2ac26982ade042/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=73ca9fb5dfa98119d9eb02f58f2ac26982ade042", "patch": "@@ -990,15 +990,16 @@ make_packable_type (tree type, bool in_record, unsigned int max_align)\n     }\n   else\n     {\n+      tree type_size = TYPE_ADA_SIZE (type);\n       /* Do not try to shrink the size if the RM size is not constant.  */\n       if (TYPE_CONTAINS_TEMPLATE_P (type)\n-\t  || !tree_fits_uhwi_p (TYPE_ADA_SIZE (type)))\n+\t  || !tree_fits_uhwi_p (type_size))\n \treturn type;\n \n       /* Round the RM size up to a unit boundary to get the minimal size\n \t for a BLKmode record.  Give up if it's already the size and we\n \t don't need to lower the alignment.  */\n-      new_size = tree_to_uhwi (TYPE_ADA_SIZE (type));\n+      new_size = tree_to_uhwi (type_size);\n       new_size = (new_size + BITS_PER_UNIT - 1) & -BITS_PER_UNIT;\n       if (new_size == size && (max_align == 0 || align <= max_align))\n \treturn type;\n@@ -5307,20 +5308,21 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n      to its size, sign- or zero-extend the result.  But we need not do this\n      if the input is also an integral type and both are unsigned or both are\n      signed and have the same precision.  */\n+  tree type_rm_size;\n   if (!notrunc_p\n       && INTEGRAL_TYPE_P (type)\n       && !(code == INTEGER_TYPE && TYPE_BIASED_REPRESENTATION_P (type))\n-      && TYPE_RM_SIZE (type)\n-      && tree_int_cst_compare (TYPE_RM_SIZE (type), TYPE_SIZE (type)) < 0\n+      && (type_rm_size = TYPE_RM_SIZE (type))\n+      && tree_int_cst_compare (type_rm_size, TYPE_SIZE (type)) < 0\n       && !(INTEGRAL_TYPE_P (etype)\n \t   && type_unsigned_for_rm (type) == type_unsigned_for_rm (etype)\n \t   && (type_unsigned_for_rm (type)\n-\t       || tree_int_cst_compare (TYPE_RM_SIZE (type),\n+\t       || tree_int_cst_compare (type_rm_size,\n \t\t\t\t\tTYPE_RM_SIZE (etype)\n \t\t\t\t\t? TYPE_RM_SIZE (etype)\n \t\t\t\t\t: TYPE_SIZE (etype)) == 0)))\n     {\n-      if (integer_zerop (TYPE_RM_SIZE (type)))\n+      if (integer_zerop (type_rm_size))\n \texpr = build_int_cst (type, 0);\n       else\n \t{\n@@ -5330,7 +5332,7 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n \t  tree shift_expr\n \t    = convert (base_type,\n \t\t       size_binop (MINUS_EXPR,\n-\t\t\t\t   TYPE_SIZE (type), TYPE_RM_SIZE (type)));\n+\t\t\t\t   TYPE_SIZE (type), type_rm_size));\n \t  expr\n \t    = convert (type,\n \t\t       build_binary_op (RSHIFT_EXPR, base_type,"}, {"sha": "dcf8253c3bc823afb08c07889e6843213bb541c2", "filename": "gcc/tree.h", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73ca9fb5dfa98119d9eb02f58f2ac26982ade042/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73ca9fb5dfa98119d9eb02f58f2ac26982ade042/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=73ca9fb5dfa98119d9eb02f58f2ac26982ade042", "patch": "@@ -4231,16 +4231,23 @@ extern tree purpose_member (const_tree, tree);\n extern bool vec_member (const_tree, vec<tree, va_gc> *);\n extern tree chain_index (int, tree);\n \n+/* Arguments may be null.  */\n extern int tree_int_cst_equal (const_tree, const_tree);\n \n+/* The following predicates are safe to call with a null argument.  */\n extern bool tree_fits_shwi_p (const_tree) ATTRIBUTE_PURE;\n extern bool tree_fits_poly_int64_p (const_tree) ATTRIBUTE_PURE;\n extern bool tree_fits_uhwi_p (const_tree) ATTRIBUTE_PURE;\n extern bool tree_fits_poly_uint64_p (const_tree) ATTRIBUTE_PURE;\n-extern HOST_WIDE_INT tree_to_shwi (const_tree);\n-extern poly_int64 tree_to_poly_int64 (const_tree);\n-extern unsigned HOST_WIDE_INT tree_to_uhwi (const_tree);\n-extern poly_uint64 tree_to_poly_uint64 (const_tree);\n+\n+extern HOST_WIDE_INT tree_to_shwi (const_tree)\n+  ATTRIBUTE_NONNULL (1) ATTRIBUTE_PURE;\n+extern poly_int64 tree_to_poly_int64 (const_tree)\n+  ATTRIBUTE_NONNULL (1) ATTRIBUTE_PURE;\n+extern unsigned HOST_WIDE_INT tree_to_uhwi (const_tree)\n+  ATTRIBUTE_NONNULL (1) ATTRIBUTE_PURE;\n+extern poly_uint64 tree_to_poly_uint64 (const_tree)\n+  ATTRIBUTE_NONNULL (1) ATTRIBUTE_PURE;\n #if !defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 4003)\n extern inline __attribute__ ((__gnu_inline__)) HOST_WIDE_INT\n tree_to_shwi (const_tree t)\n@@ -4893,7 +4900,8 @@ extern bool really_constant_p (const_tree);\n extern bool ptrdiff_tree_p (const_tree, poly_int64_pod *);\n extern bool decl_address_invariant_p (const_tree);\n extern bool decl_address_ip_invariant_p (const_tree);\n-extern bool int_fits_type_p (const_tree, const_tree);\n+extern bool int_fits_type_p (const_tree, const_tree)\n+  ATTRIBUTE_NONNULL (1) ATTRIBUTE_NONNULL (2) ATTRIBUTE_PURE;\n #ifndef GENERATOR_FILE\n extern void get_type_static_bounds (const_tree, mpz_t, mpz_t);\n #endif"}]}