{"sha": "11e554b3b5528e98f2576a06e8ad4d51fbed0d56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFlNTU0YjNiNTUyOGU5OGYyNTc2YTA2ZThhZDRkNTFmYmVkMGQ1Ng==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-11-24T18:19:29Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-11-24T18:19:29Z"}, "message": "[Patch AArch64 13/17] Enable _Float16 for AArch64\n\ngcc/\n\n\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Update\n\t__FLT_EVAL_METHOD__ and __FLT_EVAL_METHOD_C99__ when we switch\n\tarchitecture levels.\n\t* config/aarch64/aarch64.c (aarch64_promoted_type): Only promote\n\tthe aarch64_fp16_type_node, not all HFmode types.\n\t(aarch64_libgcc_floating_mode_supported_p): Support HFmode.\n\t(aarch64_scalar_mode_supported_p): Likewise.\n\t(aarch64_excess_precision): New.\n\t(TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P): Define.\n\t(TARGET_SCALAR_MODE_SUPPORTED_P): Likewise.\n\t(TARGET_C_EXCESS_PRECISION): Likewise.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/_Float16_1.c: New.\n\t* gcc.target/aarch64/_Float16_2.c: Likewise.\n\t* gcc.target/aarch64/_Float16_3.c: Likewise.\n\nFrom-SVN: r242845", "tree": {"sha": "e2fbac9f7d1ee9d902dbaa4a4d85016d6e28e1b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2fbac9f7d1ee9d902dbaa4a4d85016d6e28e1b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11e554b3b5528e98f2576a06e8ad4d51fbed0d56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11e554b3b5528e98f2576a06e8ad4d51fbed0d56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11e554b3b5528e98f2576a06e8ad4d51fbed0d56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11e554b3b5528e98f2576a06e8ad4d51fbed0d56/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e5f8203d26bec30f790dbde5058e224521b27cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e5f8203d26bec30f790dbde5058e224521b27cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e5f8203d26bec30f790dbde5058e224521b27cb"}], "stats": {"total": 241, "additions": 239, "deletions": 2}, "files": [{"sha": "7fb4826bfd60bf8ddf18daaa8e87b90048215023", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e554b3b5528e98f2576a06e8ad4d51fbed0d56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e554b3b5528e98f2576a06e8ad4d51fbed0d56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11e554b3b5528e98f2576a06e8ad4d51fbed0d56", "patch": "@@ -1,3 +1,17 @@\n+2016-11-24  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Update\n+\t__FLT_EVAL_METHOD__ and __FLT_EVAL_METHOD_C99__ when we switch\n+\tarchitecture levels.\n+\t* config/aarch64/aarch64.c (aarch64_promoted_type): Only promote\n+\tthe aarch64_fp16_type_node, not all HFmode types.\n+\t(aarch64_libgcc_floating_mode_supported_p): Support HFmode.\n+\t(aarch64_scalar_mode_supported_p): Likewise.\n+\t(aarch64_excess_precision): New.\n+\t(TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P): Define.\n+\t(TARGET_SCALAR_MODE_SUPPORTED_P): Likewise.\n+\t(TARGET_C_EXCESS_PRECISION): Likewise.\n+\n 2016-11-24  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-c.c (aarch64_scalar_mode_supported_p): New."}, {"sha": "320b912a4640509b2eeb4be7cecc746a03bfaecd", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e554b3b5528e98f2576a06e8ad4d51fbed0d56/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e554b3b5528e98f2576a06e8ad4d51fbed0d56/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=11e554b3b5528e98f2576a06e8ad4d51fbed0d56", "patch": "@@ -133,6 +133,16 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n \n   aarch64_def_or_undef (TARGET_CRYPTO, \"__ARM_FEATURE_CRYPTO\", pfile);\n   aarch64_def_or_undef (TARGET_SIMD_RDMA, \"__ARM_FEATURE_QRDMX\", pfile);\n+\n+  /* Not for ACLE, but required to keep \"float.h\" correct if we switch\n+     target between implementations that do or do not support ARMv8.2-A\n+     16-bit floating-point extensions.  */\n+  cpp_undef (pfile, \"__FLT_EVAL_METHOD__\");\n+  builtin_define_with_int_value (\"__FLT_EVAL_METHOD__\",\n+\t\t\t\t c_flt_eval_method (true));\n+  cpp_undef (pfile, \"__FLT_EVAL_METHOD_C99__\");\n+  builtin_define_with_int_value (\"__FLT_EVAL_METHOD_C99__\",\n+\t\t\t\t c_flt_eval_method (false));\n }\n \n /* Implement TARGET_CPU_CPP_BUILTINS.  */"}, {"sha": "68a338015ec9d14eecede5c1ce7906e384132187", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 69, "deletions": 2, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e554b3b5528e98f2576a06e8ad4d51fbed0d56/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e554b3b5528e98f2576a06e8ad4d51fbed0d56/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=11e554b3b5528e98f2576a06e8ad4d51fbed0d56", "patch": "@@ -14240,12 +14240,20 @@ aarch64_vec_fpconst_pow_of_2 (rtx x)\n   return firstval;\n }\n \n-/* Implement TARGET_PROMOTED_TYPE to promote __fp16 to float.  */\n+/* Implement TARGET_PROMOTED_TYPE to promote 16-bit floating point types\n+   to float.\n+\n+   __fp16 always promotes through this hook.\n+   _Float16 may promote if TARGET_FLT_EVAL_METHOD is 16, but we do that\n+   through the generic excess precision logic rather than here.  */\n+\n static tree\n aarch64_promoted_type (const_tree t)\n {\n-  if (SCALAR_FLOAT_TYPE_P (t) && TYPE_PRECISION (t) == 16)\n+  if (SCALAR_FLOAT_TYPE_P (t)\n+      && TYPE_MAIN_VARIANT (t) == aarch64_fp16_type_node)\n     return float_type_node;\n+\n   return NULL_TREE;\n }\n \n@@ -14265,6 +14273,17 @@ aarch64_optab_supported_p (int op, machine_mode mode1, machine_mode,\n     }\n }\n \n+/* Implement TARGET_LIBGCC_FLOATING_POINT_MODE_SUPPORTED_P - return TRUE\n+   if MODE is HFmode, and punt to the generic implementation otherwise.  */\n+\n+static bool\n+aarch64_libgcc_floating_mode_supported_p (machine_mode mode)\n+{\n+  return (mode == HFmode\n+\t  ? true\n+\t  : default_libgcc_floating_mode_supported_p (mode));\n+}\n+\n /* Implement TARGET_SCALAR_MODE_SUPPORTED_P - return TRUE\n    if MODE is HFmode, and punt to the generic implementation otherwise.  */\n \n@@ -14276,6 +14295,47 @@ aarch64_scalar_mode_supported_p (machine_mode mode)\n \t  : default_scalar_mode_supported_p (mode));\n }\n \n+/* Set the value of FLT_EVAL_METHOD.\n+   ISO/IEC TS 18661-3 defines two values that we'd like to make use of:\n+\n+    0: evaluate all operations and constants, whose semantic type has at\n+       most the range and precision of type float, to the range and\n+       precision of float; evaluate all other operations and constants to\n+       the range and precision of the semantic type;\n+\n+    N, where _FloatN is a supported interchange floating type\n+       evaluate all operations and constants, whose semantic type has at\n+       most the range and precision of _FloatN type, to the range and\n+       precision of the _FloatN type; evaluate all other operations and\n+       constants to the range and precision of the semantic type;\n+\n+   If we have the ARMv8.2-A extensions then we support _Float16 in native\n+   precision, so we should set this to 16.  Otherwise, we support the type,\n+   but want to evaluate expressions in float precision, so set this to\n+   0.  */\n+\n+static enum flt_eval_method\n+aarch64_excess_precision (enum excess_precision_type type)\n+{\n+  switch (type)\n+    {\n+      case EXCESS_PRECISION_TYPE_FAST:\n+      case EXCESS_PRECISION_TYPE_STANDARD:\n+\t/* We can calculate either in 16-bit range and precision or\n+\t   32-bit range and precision.  Make that decision based on whether\n+\t   we have native support for the ARMv8.2-A 16-bit floating-point\n+\t   instructions or not.  */\n+\treturn (TARGET_FP_F16INST\n+\t\t? FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16\n+\t\t: FLT_EVAL_METHOD_PROMOTE_TO_FLOAT);\n+      case EXCESS_PRECISION_TYPE_IMPLICIT:\n+\treturn FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16;\n+      default:\n+\tgcc_unreachable ();\n+    }\n+  return FLT_EVAL_METHOD_UNPREDICTABLE;\n+}\n+\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST aarch64_address_cost\n \n@@ -14354,6 +14414,9 @@ aarch64_scalar_mode_supported_p (machine_mode mode)\n #undef TARGET_BUILTIN_RECIPROCAL\n #define TARGET_BUILTIN_RECIPROCAL aarch64_builtin_reciprocal\n \n+#undef TARGET_C_EXCESS_PRECISION\n+#define TARGET_C_EXCESS_PRECISION aarch64_excess_precision\n+\n #undef  TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN aarch64_expand_builtin\n \n@@ -14410,6 +14473,10 @@ aarch64_scalar_mode_supported_p (machine_mode mode)\n #undef TARGET_LIBGCC_CMP_RETURN_MODE\n #define TARGET_LIBGCC_CMP_RETURN_MODE aarch64_libgcc_cmp_return_mode\n \n+#undef TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P\n+#define TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P \\\n+aarch64_libgcc_floating_mode_supported_p\n+\n #undef TARGET_MANGLE_TYPE\n #define TARGET_MANGLE_TYPE aarch64_mangle_type\n "}, {"sha": "194e85fd49bb1af7620f1f969870f9b2199b598c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e554b3b5528e98f2576a06e8ad4d51fbed0d56/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e554b3b5528e98f2576a06e8ad4d51fbed0d56/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11e554b3b5528e98f2576a06e8ad4d51fbed0d56", "patch": "@@ -1,3 +1,9 @@\n+2016-11-24  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/_Float16_1.c: New.\n+\t* gcc.target/aarch64/_Float16_2.c: Likewise.\n+\t* gcc.target/aarch64/_Float16_3.c: Likewise.\n+\n 2016-11-24  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.target/aarch64/floatdihf2_1.c: New."}, {"sha": "320f154acf274ab4545b396704573ab67e3222e8", "filename": "gcc/testsuite/gcc.target/aarch64/_Float16_1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e554b3b5528e98f2576a06e8ad4d51fbed0d56/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2F_Float16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e554b3b5528e98f2576a06e8ad4d51fbed0d56/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2F_Float16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2F_Float16_1.c?ref=11e554b3b5528e98f2576a06e8ad4d51fbed0d56", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=armv8.2-a+nofp16\" } */\n+\n+#pragma GCC target (\"arch=armv8.2-a+nofp16\")\n+\n+_Float16\n+foo_v8 (_Float16 x, _Float16 y, unsigned int *eval)\n+{\n+  *eval = __FLT_EVAL_METHOD__;\n+  return x * x + y;\n+}\n+\n+__fp16\n+bar_v8 (__fp16 x, __fp16 y, unsigned int *eval)\n+{\n+  *eval = __FLT_EVAL_METHOD__;\n+  return x * x + y;\n+}\n+\n+#pragma GCC target (\"arch=armv8.2-a+fp16\")\n+\n+_Float16\n+foo_v82 (_Float16 x, _Float16 y, unsigned int *eval)\n+{\n+  *eval = __FLT_EVAL_METHOD__;\n+  return x * x + y;\n+}\n+\n+__fp16\n+bar_v82 (__fp16 x, __fp16 y, unsigned int *eval)\n+{\n+  *eval = __FLT_EVAL_METHOD__;\n+  return x * x + y;\n+}\n+\n+/* Test that we merge to FMA operations.  This indicates that we are not\n+   making extraneous conversions between modes.  */\n+\n+/* Three FMA operations in 32-bit precision, from foo_v8, bar_v8, bar_v82.  */\n+/* { dg-final { scan-assembler-times \"fmadd\\ts\\[0-9\\]\\+\" 3 } } */\n+\n+/* One FMA operation in 16-bit precision, from foo_v82.  */\n+/* { dg-final { scan-assembler-times \"fmadd\\th\\[0-9\\]\\+\" 1 } } */\n+\n+/* Test that we are resetting the __FLT_EVAL_METHOD__.  */\n+/* { dg-final { scan-assembler-times \"mov\\tw\\[0-9\\]\\+, 16\" 2 } } */\n+/* { dg-final { scan-assembler-times \"str\\twzr\" 2 } } */"}, {"sha": "8b2aa1e784cbf7cd11d79f19114fe8566f949867", "filename": "gcc/testsuite/gcc.target/aarch64/_Float16_2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e554b3b5528e98f2576a06e8ad4d51fbed0d56/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2F_Float16_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e554b3b5528e98f2576a06e8ad4d51fbed0d56/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2F_Float16_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2F_Float16_2.c?ref=11e554b3b5528e98f2576a06e8ad4d51fbed0d56", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=armv8.2-a+nofp16 -fpermitted-flt-eval-methods=c11\" } */\n+\n+#pragma GCC target (\"arch=armv8.2-a+nofp16\")\n+\n+_Float16\n+foo_v8 (_Float16 x, _Float16 y, unsigned int *eval)\n+{\n+  *eval = __FLT_EVAL_METHOD__;\n+  return x * x + y;\n+}\n+\n+__fp16\n+bar_v8 (__fp16 x, __fp16 y, unsigned int *eval)\n+{\n+  *eval = __FLT_EVAL_METHOD__;\n+  return x * x + y;\n+}\n+\n+#pragma GCC target (\"arch=armv8.2-a+fp16\")\n+\n+_Float16\n+foo_v82 (_Float16 x, _Float16 y, unsigned int *eval)\n+{\n+  *eval = __FLT_EVAL_METHOD__;\n+  return x * x + y;\n+}\n+\n+__fp16\n+bar_v82 (__fp16 x, __fp16 y, unsigned int *eval)\n+{\n+  *eval = __FLT_EVAL_METHOD__;\n+  return x * x + y;\n+}\n+\n+/* Test that we merge to FMA operations.  This indicates that we are not\n+   making extraneous conversions between modes.  */\n+\n+/* Three FMA operations in 32-bit precision, from foo_v8, bar_v8, bar_v82.  */\n+/* { dg-final { scan-assembler-times \"fmadd\\ts\\[0-9\\]\\+\" 3 } } */\n+\n+/* One FMA operation in 16-bit precision, from foo_v82.  */\n+/* { dg-final { scan-assembler-times \"fmadd\\th\\[0-9\\]\\+\" 1 } } */\n+\n+/* Test that in -fpermitted-flt-eval-methods=c11 we don't set the\n+   __FLT_EVAL_METHOD__ to anything other than 0.  */\n+/* { dg-final { scan-assembler-times \"str\\twzr\" 4 } } */"}, {"sha": "2d20250385088a75fead8fb8823735a35788d32b", "filename": "gcc/testsuite/gcc.target/aarch64/_Float16_3.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e554b3b5528e98f2576a06e8ad4d51fbed0d56/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2F_Float16_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e554b3b5528e98f2576a06e8ad4d51fbed0d56/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2F_Float16_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2F_Float16_3.c?ref=11e554b3b5528e98f2576a06e8ad4d51fbed0d56", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=armv8.2-a+nofp16 -std=c11 -ffp-contract=fast\" } */\n+\n+#pragma GCC target (\"arch=armv8.2-a+nofp16\")\n+\n+_Float16\n+foo_v8 (_Float16 x, _Float16 y, unsigned int *eval)\n+{\n+  *eval = __FLT_EVAL_METHOD__;\n+  return x * x + y;\n+}\n+\n+__fp16\n+bar_v8 (__fp16 x, __fp16 y, unsigned int *eval)\n+{\n+  *eval = __FLT_EVAL_METHOD__;\n+  return x * x + y;\n+}\n+\n+#pragma GCC target (\"arch=armv8.2-a+fp16\")\n+\n+_Float16\n+foo_v82 (_Float16 x, _Float16 y, unsigned int *eval)\n+{\n+  *eval = __FLT_EVAL_METHOD__;\n+  return x * x + y;\n+}\n+\n+__fp16\n+bar_v82 (__fp16 x, __fp16 y, unsigned int *eval)\n+{\n+  *eval = __FLT_EVAL_METHOD__;\n+  return x * x + y;\n+}\n+\n+/* Test that we merge to FMA operations.  This indicates that we are not\n+   making extraneous conversions between modes.  */\n+\n+/* Three FMA operations in 32-bit precision, from foo_v8, bar_v8, bar_v82.  */\n+/* { dg-final { scan-assembler-times \"fmadd\\ts\\[0-9\\]\\+\" 3 } } */\n+\n+/* One FMA operation in 16-bit precision, from foo_v82.  */\n+/* { dg-final { scan-assembler-times \"fmadd\\th\\[0-9\\]\\+\" 1 } } */\n+\n+/* Test that in C11 mode, we don't reset __FLT_EVAL_METHOD__.  */\n+/* { dg-final { scan-assembler-times \"str\\twzr\" 4 } } */"}]}