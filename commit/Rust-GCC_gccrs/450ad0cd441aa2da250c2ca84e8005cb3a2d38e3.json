{"sha": "450ad0cd441aa2da250c2ca84e8005cb3a2d38e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUwYWQwY2Q0NDFhYTJkYTI1MGMyY2E4NGU4MDA1Y2IzYTJkMzhlMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-09-23T16:54:34Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-09-23T16:54:34Z"}, "message": "ipa-cp.c (ipa_get_indirect_edge_target_1): Add sanity check for ipa-devirt.\n\n\t* ipa-cp.c (ipa_get_indirect_edge_target_1): Add sanity check\n\tfor ipa-devirt.\n\t* ipa-utils.h (possible_polymorphic_call_target_p): New function.\n\t* ipa-devirt.c (possible_polymorphic_call_target_p): Be tolerant\n\tof external calls\n\t* gimple-fold.c: Include ipa-utils.h and gimple-pretty-print.h\n\t(gimple_fold_call): Dump inconsistent devirtualizations; add\n\tsanity check for type based devirtualizations.\n\t* ipa-prop.c: Include ipa-utils.h\n\t(ipa_intraprocedural_devirtualization): Add sanity check.\n\t(try_make_edge_direct_virtual_call): Likewise.\n\nFrom-SVN: r202837", "tree": {"sha": "aa313df8c645e4e1d249c3df18ae10900ad40a7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa313df8c645e4e1d249c3df18ae10900ad40a7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3/comments", "author": null, "committer": null, "parents": [{"sha": "dfff7c46929d43dac828cd232c231dcb5bd7653a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfff7c46929d43dac828cd232c231dcb5bd7653a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfff7c46929d43dac828cd232c231dcb5bd7653a"}], "stats": {"total": 81, "additions": 77, "deletions": 4}, "files": [{"sha": "b38c84bc57db6f2c11009795a073e17f4ede26a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=450ad0cd441aa2da250c2ca84e8005cb3a2d38e3", "patch": "@@ -1,3 +1,17 @@\n+2013-09-23  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-cp.c (ipa_get_indirect_edge_target_1): Add sanity check\n+\tfor ipa-devirt.\n+\t* ipa-utils.h (possible_polymorphic_call_target_p): New function.\n+\t* ipa-devirt.c (possible_polymorphic_call_target_p): Be tolerant\n+\tof external calls\n+\t* gimple-fold.c: Include ipa-utils.h and gimple-pretty-print.h\n+\t(gimple_fold_call): Dump inconsistent devirtualizations; add\n+\tsanity check for type based devirtualizations.\n+\t* ipa-prop.c: Include ipa-utils.h\n+\t(ipa_intraprocedural_devirtualization): Add sanity check.\n+\t(try_make_edge_direct_virtual_call): Likewise.\n+\n 2013-09-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-ssa-ccp.c (insert_clobber_before_stack_restore): Recurse on copy"}, {"sha": "c77d00bca01c68632b4c6bdf6dce4687ab30ca48", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=450ad0cd441aa2da250c2ca84e8005cb3a2d38e3", "patch": "@@ -30,6 +30,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-propagate.h\"\n #include \"target.h\"\n #include \"gimple-fold.h\"\n+#include \"ipa-utils.h\"\n+#include \"gimple-pretty-print.h\"\n \n /* Return true when DECL can be referenced from current unit.\n    FROM_DECL (if non-null) specify constructor of variable DECL was taken from.\n@@ -1116,6 +1118,19 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n     {\n       if (gimple_call_addr_fndecl (OBJ_TYPE_REF_EXPR (callee)) != NULL_TREE)\n \t{\n+          if (dump_file && virtual_method_call_p (callee)\n+\t      && !possible_polymorphic_call_target_p\n+\t\t    (callee, cgraph_get_node (gimple_call_addr_fndecl\n+                                                 (OBJ_TYPE_REF_EXPR (callee)))))\n+\t    {\n+\t      fprintf (dump_file,\n+\t\t       \"Type inheritnace inconsistent devirtualization of \");\n+\t      print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n+\t      fprintf (dump_file, \" to \");\n+\t      print_generic_expr (dump_file, callee, TDF_SLIM);\n+\t      fprintf (dump_file, \"\\n\");\n+\t    }\n+\n \t  gimple_call_set_fn (stmt, OBJ_TYPE_REF_EXPR (callee));\n \t  changed = true;\n \t}\n@@ -1131,6 +1146,11 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n \t      tree fndecl = gimple_get_virt_method_for_binfo (token, binfo);\n \t      if (fndecl)\n \t\t{\n+#ifdef ENABLE_CHECKING\n+\t\t  gcc_assert (possible_polymorphic_call_target_p\n+\t\t\t\t (callee, cgraph_get_node (fndecl)));\n+\n+#endif\n \t\t  gimple_call_set_fndecl (stmt, fndecl);\n \t\t  changed = true;\n \t\t}"}, {"sha": "86f5501c388abd67a7e7af2b8745b69c8466f0ce", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=450ad0cd441aa2da250c2ca84e8005cb3a2d38e3", "patch": "@@ -1484,6 +1484,7 @@ ipa_get_indirect_edge_target_1 (struct cgraph_edge *ie,\n   HOST_WIDE_INT token, anc_offset;\n   tree otr_type;\n   tree t;\n+  tree target;\n \n   if (param_index == -1\n       || known_vals.length () <= (unsigned int) param_index)\n@@ -1552,7 +1553,7 @@ ipa_get_indirect_edge_target_1 (struct cgraph_edge *ie,\n       binfo = get_binfo_at_offset (binfo, anc_offset, otr_type);\n       if (!binfo)\n \treturn NULL_TREE;\n-      return gimple_get_virt_method_for_binfo (token, binfo);\n+      target = gimple_get_virt_method_for_binfo (token, binfo);\n     }\n   else\n     {\n@@ -1561,8 +1562,15 @@ ipa_get_indirect_edge_target_1 (struct cgraph_edge *ie,\n       binfo = get_binfo_at_offset (t, anc_offset, otr_type);\n       if (!binfo)\n \treturn NULL_TREE;\n-      return gimple_get_virt_method_for_binfo (token, binfo);\n+      target = gimple_get_virt_method_for_binfo (token, binfo);\n     }\n+#ifdef ENABLE_CHECKING\n+  if (target)\n+    gcc_assert (possible_polymorphic_call_target_p\n+\t\t (ie, cgraph_get_node (target)));\n+#endif\n+\n+  return target;\n }\n \n "}, {"sha": "c610e7bd14dd27fca51d83872e44c6b001a17336", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=450ad0cd441aa2da250c2ca84e8005cb3a2d38e3", "patch": "@@ -905,13 +905,19 @@ possible_polymorphic_call_target_p (tree otr_type,\n {\n   vec <cgraph_node *> targets;\n   unsigned int i;\n+  bool final;\n \n   if (!odr_hash.is_created ())\n     return true;\n-  targets = possible_polymorphic_call_targets (otr_type, otr_token);\n+  targets = possible_polymorphic_call_targets (otr_type, otr_token, &final);\n   for (i = 0; i < targets.length (); i++)\n     if (n == targets[i])\n       return true;\n+\n+  /* At a moment we allow middle end to dig out new external declarations\n+     as a targets of polymorphic calls.  */\n+  if (!final && !n->symbol.definition)\n+    return true;\n   return false;\n }\n "}, {"sha": "2fbc9d41541c87ead65c6026acebec2f3d980402", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=450ad0cd441aa2da250c2ca84e8005cb3a2d38e3", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"data-streamer.h\"\n #include \"tree-streamer.h\"\n #include \"params.h\"\n+#include \"ipa-utils.h\"\n \n /* Intermediate information about a parameter that is only useful during the\n    run of ipa_analyze_node and is not kept afterwards.  */\n@@ -2196,6 +2197,11 @@ ipa_intraprocedural_devirtualization (gimple call)\n   token = OBJ_TYPE_REF_TOKEN (otr);\n   fndecl = gimple_get_virt_method_for_binfo (tree_low_cst (token, 1),\n \t\t\t\t\t     binfo);\n+#ifdef ENABLE_CHECKING\n+  if (fndecl)\n+    gcc_assert (possible_polymorphic_call_target_p\n+\t\t  (otr, cgraph_get_node (fndecl)));\n+#endif\n   return fndecl;\n }\n \n@@ -2651,7 +2657,13 @@ try_make_edge_direct_virtual_call (struct cgraph_edge *ie,\n     return NULL;\n \n   if (target)\n-    return ipa_make_edge_direct_to_target (ie, target);\n+    {\n+#ifdef ENABLE_CHECKING\n+      gcc_assert (possible_polymorphic_call_target_p\n+\t (ie, cgraph_get_node (target)));\n+#endif\n+      return ipa_make_edge_direct_to_target (ie, target);\n+    }\n   else\n     return NULL;\n }"}, {"sha": "27949e192706952198459db072d6a5d67fbded0c", "filename": "gcc/ipa-utils.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3/gcc%2Fipa-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3/gcc%2Fipa-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.h?ref=450ad0cd441aa2da250c2ca84e8005cb3a2d38e3", "patch": "@@ -108,6 +108,19 @@ possible_polymorphic_call_target_p (struct cgraph_edge *e,\n   return possible_polymorphic_call_target_p (e->indirect_info->otr_type,\n \t\t\t\t\t     e->indirect_info->otr_token, n);\n }\n+\n+/* Return true if N can be possibly target of a polymorphic call of\n+   OBJ_TYPE_REF expression CALL.  */\n+\n+inline bool\n+possible_polymorphic_call_target_p (tree call,\n+\t\t\t\t    struct cgraph_node *n)\n+{\n+  return possible_polymorphic_call_target_p (obj_type_ref_class (call),\n+\t\t\t\t\t     tree_low_cst\n+\t\t\t\t\t\t(OBJ_TYPE_REF_TOKEN (call), 1),\n+\t\t\t\t\t     n);\n+}\n #endif  /* GCC_IPA_UTILS_H  */\n \n "}]}