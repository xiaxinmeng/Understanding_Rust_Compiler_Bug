{"sha": "03b0bf783084d010f289eb42defafab82c4f9eb0", "node_id": "C_kwDOANBUbNoAKDAzYjBiZjc4MzA4NGQwMTBmMjg5ZWI0MmRlZmFmYWI4MmM0ZjllYjA", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-19T06:57:05Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-19T08:08:51Z"}, "message": "Come up with git-fix-changelog.py script.\n\ncontrib/ChangeLog:\n\n\t* git-backport.py: Use it.\n\t* git-fix-changelog.py: New file.\n\t* gcc-git-customization.sh: Add new alias git gcc-fix-changelog.", "tree": {"sha": "ce7fde1bbbd06b0cc78ef1b089c6540e29dd1858", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce7fde1bbbd06b0cc78ef1b089c6540e29dd1858"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03b0bf783084d010f289eb42defafab82c4f9eb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b0bf783084d010f289eb42defafab82c4f9eb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03b0bf783084d010f289eb42defafab82c4f9eb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b0bf783084d010f289eb42defafab82c4f9eb0/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5"}], "stats": {"total": 140, "additions": 95, "deletions": 45}, "files": [{"sha": "2eec17937af3972f947db5c83f1bd164a1fb83a0", "filename": "contrib/gcc-git-customization.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b0bf783084d010f289eb42defafab82c4f9eb0/contrib%2Fgcc-git-customization.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b0bf783084d010f289eb42defafab82c4f9eb0/contrib%2Fgcc-git-customization.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-git-customization.sh?ref=03b0bf783084d010f289eb42defafab82c4f9eb0", "patch": "@@ -27,6 +27,7 @@ git config alias.gcc-undescr \\!\"f() { o=\\$(git config --get gcc-config.upstream)\n \n git config alias.gcc-verify '!f() { \"`git rev-parse --show-toplevel`/contrib/gcc-changelog/git_check_commit.py\" $@; } ; f'\n git config alias.gcc-backport '!f() { \"`git rev-parse --show-toplevel`/contrib/git-backport.py\" $@; } ; f'\n+git config alias.gcc-fix-changelog '!f() { \"`git rev-parse --show-toplevel`/contrib/git-fix-changelog.py\" $@; } ; f'\n git config alias.gcc-mklog '!f() { \"`git rev-parse --show-toplevel`/contrib/mklog.py\" $@; } ; f'\n git config alias.gcc-commit-mklog '!f() { \"`git rev-parse --show-toplevel`/contrib/git-commit-mklog.py\" \"$@\"; }; f'\n "}, {"sha": "fc369d977540c61d9c6024441cbb8f2ce45adbb0", "filename": "contrib/git-backport.py", "status": "modified", "additions": 2, "deletions": 45, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b0bf783084d010f289eb42defafab82c4f9eb0/contrib%2Fgit-backport.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b0bf783084d010f289eb42defafab82c4f9eb0/contrib%2Fgit-backport.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgit-backport.py?ref=03b0bf783084d010f289eb42defafab82c4f9eb0", "patch": "@@ -22,57 +22,14 @@\n import argparse\n import os\n import subprocess\n-import tempfile\n \n script_folder = os.path.dirname(os.path.abspath(__file__))\n-verify_script = os.path.join(script_folder,\n-                             'gcc-changelog/git_check_commit.py')\n-\n-\n-def replace_file_in_changelog(lines, filename):\n-    if not filename.endswith('.cc'):\n-        return\n-\n-    # consider all componenets of a path: gcc/ipa-icf.cc\n-    while filename:\n-        for i, line in enumerate(lines):\n-            if filename in line:\n-                line = line.replace(filename, filename[:-1])\n-                lines[i] = line\n-                return\n-        parts = filename.split('/')\n-        if len(parts) == 1:\n-            return\n-        filename = '/'.join(parts[1:])\n-\n+fixup_script = os.path.join(script_folder, 'git-fix-changelog.py')\n \n if __name__ == '__main__':\n     parser = argparse.ArgumentParser(description='Backport a git revision.')\n     parser.add_argument('revision', help='Revision')\n     args = parser.parse_args()\n \n     subprocess.run('git cherry-pick -x %s' % args.revision, shell=True)\n-\n-    # Update commit message if change for a .cc file was taken\n-    r = subprocess.run(f'{verify_script} HEAD', shell=True, encoding='utf8',\n-                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n-    if r.returncode != 0:\n-        lines = r.stdout.splitlines()\n-        cmd = 'git show -s --format=%B'\n-        commit_message = subprocess.check_output(cmd, shell=True,\n-                                                 encoding='utf8').strip()\n-        commit_message = commit_message.splitlines()\n-\n-        todo = [line for line in lines if 'unchanged file mentioned' in line]\n-        for item in todo:\n-            filename = item.split()[-1].strip('\"')\n-            replace_file_in_changelog(commit_message, filename)\n-\n-        with tempfile.NamedTemporaryFile('w', encoding='utf8',\n-                                         delete=False) as w:\n-            w.write('\\n'.join(commit_message))\n-            w.close()\n-            subprocess.check_output(f'git commit --amend -F {w.name}',\n-                                    shell=True, encoding='utf8')\n-            os.unlink(w.name)\n-            print(f'Commit message updated: {len(todo)} .cc file(s) changed.')\n+    subprocess.run(fixup_script, shell=True)"}, {"sha": "c15e45c11fade5bc25db48780593ae23172051cb", "filename": "contrib/git-fix-changelog.py", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b0bf783084d010f289eb42defafab82c4f9eb0/contrib%2Fgit-fix-changelog.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b0bf783084d010f289eb42defafab82c4f9eb0/contrib%2Fgit-fix-changelog.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgit-fix-changelog.py?ref=03b0bf783084d010f289eb42defafab82c4f9eb0", "patch": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+\n+# Copyright (C) 2020 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02110-1301, USA.\n+#\n+# The script tries to fix commit message where ChangeLog entries\n+# can point to .cc renamed files.\n+\n+import argparse\n+import os\n+import subprocess\n+import tempfile\n+\n+DESCRIPTION = 'Fix up ChangeLog of the current commit.'\n+\n+script_folder = os.path.dirname(os.path.abspath(__file__))\n+verify_script = os.path.join(script_folder,\n+                             'gcc-changelog/git_check_commit.py')\n+\n+\n+def replace_file_in_changelog(lines, filename, fixed):\n+    # consider all componenets of a path: gcc/ipa-icf.cc\n+    while filename:\n+        for i, line in enumerate(lines):\n+            if filename in line:\n+                lines[i] = line.replace(filename, fixed)\n+                return\n+\n+        parts = filename.split('/')\n+        if len(parts) == 1:\n+            return\n+        filename = '/'.join(parts[1:])\n+        fixed = '/'.join(fixed.split('/')[1:])\n+\n+\n+if __name__ == '__main__':\n+    parser = argparse.ArgumentParser(description=DESCRIPTION)\n+    args = parser.parse_args()\n+\n+    # Update commit message if change for a .cc file was taken\n+    r = subprocess.run(f'{verify_script} HEAD', shell=True, encoding='utf8',\n+                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+    if r.returncode != 0:\n+        lines = r.stdout.splitlines()\n+        cmd = 'git show -s --format=%B'\n+        commit_message = subprocess.check_output(cmd, shell=True,\n+                                                 encoding='utf8').strip()\n+        commit_message = commit_message.splitlines()\n+\n+        # Parse the following lines:\n+        # ERR: unchanged file mentioned in a ChangeLog \\\n+        # (did you mean \"gcc/ipa-icf.cc\"?): \"gcc/ipa-icf.c\"\n+        replaced = 0\n+        for line in lines:\n+            if ('unchanged file mentioned' in line and\n+                    'did you mean' in line):\n+                filename = line.split()[-1].strip('\"')\n+                fixed = line[line.index('did you mean'):]\n+                fixed = fixed[fixed.index('\"') + 1:]\n+                fixed = fixed[:fixed.index('\"')]\n+\n+                if filename.count('/') == fixed.count('/'):\n+                    replace_file_in_changelog(commit_message, filename, fixed)\n+                    replaced += 1\n+\n+        if replaced:\n+            with tempfile.NamedTemporaryFile('w', encoding='utf8',\n+                                             delete=False) as w:\n+                w.write('\\n'.join(commit_message))\n+                w.close()\n+                subprocess.check_output(f'git commit --amend -F {w.name}',\n+                                        shell=True, encoding='utf8')\n+                os.unlink(w.name)\n+                print(f'Commit message updated: {replaced} file(s) renamed.')\n+        else:\n+            print('Commit message has not been updated.')"}]}