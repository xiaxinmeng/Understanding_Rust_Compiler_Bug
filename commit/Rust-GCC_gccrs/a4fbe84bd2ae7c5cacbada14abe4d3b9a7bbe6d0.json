{"sha": "a4fbe84bd2ae7c5cacbada14abe4d3b9a7bbe6d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRmYmU4NGJkMmFlN2M1Y2FjYmFkYTE0YWJlNGQzYjlhN2JiZTZkMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-06-30T12:23:18Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-06-30T12:23:18Z"}, "message": "revert: dce.c (deletable_insn_p_1): New function, split out from...\n\ngcc/\n\tRevert:\n\n\t2007-06-27  Richard Sandiford  <richard@codesourcery.com>\n\n\t* dce.c (deletable_insn_p_1): New function, split out from...\n\t(deletable_insn_p): ...here.  Only treat bare USEs and CLOBBERs\n\tspecially, not those inside PARALLELs.  Remove BODY argument\n\tand adjust recursive call accordingly.\n\t(prescan_insns_for_dce): Update call to delete_insn_p.\n\nFrom-SVN: r126143", "tree": {"sha": "c8758fc6c93ba74b915a04708fec331c7154a6d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8758fc6c93ba74b915a04708fec331c7154a6d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4fbe84bd2ae7c5cacbada14abe4d3b9a7bbe6d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4fbe84bd2ae7c5cacbada14abe4d3b9a7bbe6d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4fbe84bd2ae7c5cacbada14abe4d3b9a7bbe6d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4fbe84bd2ae7c5cacbada14abe4d3b9a7bbe6d0/comments", "author": null, "committer": null, "parents": [{"sha": "9d35384d74fb0f8b0f8a25b6d44342d5991455ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d35384d74fb0f8b0f8a25b6d44342d5991455ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d35384d74fb0f8b0f8a25b6d44342d5991455ee"}], "stats": {"total": 76, "additions": 36, "deletions": 40}, "files": [{"sha": "7a9af4b229bd26e01a1aa63065cbe3bff1e52d55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4fbe84bd2ae7c5cacbada14abe4d3b9a7bbe6d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4fbe84bd2ae7c5cacbada14abe4d3b9a7bbe6d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4fbe84bd2ae7c5cacbada14abe4d3b9a7bbe6d0", "patch": "@@ -1,3 +1,15 @@\n+2007-06-30  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tRevert:\n+\n+\t2007-06-27  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* dce.c (deletable_insn_p_1): New function, split out from...\n+\t(deletable_insn_p): ...here.  Only treat bare USEs and CLOBBERs\n+\tspecially, not those inside PARALLELs.  Remove BODY argument\n+\tand adjust recursive call accordingly.\n+\t(prescan_insns_for_dce): Update call to delete_insn_p.\n+\n 2007-06-30  Rask Ingemann Lambertsen <rask@sygehus.dk>\n \n \t* combine.c (combine_validate_cost): New parameter NEWOTHERPAT."}, {"sha": "0252d4d5b2423b535c1e25ec9d83f3667bb7a0a6", "filename": "gcc/dce.c", "status": "modified", "additions": 24, "deletions": 40, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4fbe84bd2ae7c5cacbada14abe4d3b9a7bbe6d0/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4fbe84bd2ae7c5cacbada14abe4d3b9a7bbe6d0/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=a4fbe84bd2ae7c5cacbada14abe4d3b9a7bbe6d0", "patch": "@@ -58,15 +58,16 @@ static bitmap_obstack dce_tmp_bitmap_obstack;\n \n static sbitmap marked = NULL;\n \n-/* A subroutine for which BODY is part of the instruction being tested;\n-   either the top-level pattern, or an element of a PARALLEL.  The\n-   instruction is known not to be a bare USE or CLOBBER.  */\n+/* Return true if INSN with BODY is a normal instruction that can be\n+   deleted by the DCE pass.  */\n \n static bool\n-deletable_insn_p_1 (rtx body)\n+deletable_insn_p (rtx insn, rtx body, bool fast)\n {\n+  rtx x;\n   switch (GET_CODE (body))\n     {\n+    case USE:\n     case PREFETCH:\n     case TRAP_IF:\n       /* The UNSPEC case was added here because the ia-64 claims that\n@@ -78,35 +79,6 @@ deletable_insn_p_1 (rtx body)\n     case UNSPEC:\n       return false;\n \n-    default:\n-      if (volatile_insn_p (body))\n-\treturn false;\n-\n-      if (flag_non_call_exceptions && may_trap_p (body))\n-\treturn false;\n-\n-      return true;\n-    }\n-}\n-\n-/* Return true if INSN is a normal instruction that can be deleted by\n-   the DCE pass.  */\n-\n-static bool\n-deletable_insn_p (rtx insn, bool fast)\n-{\n-  rtx body, x;\n-  int i;\n-\n-  if (!NONJUMP_INSN_P (insn))\n-    return false;\n-\n-  body = PATTERN (insn);\n-  switch (GET_CODE (body))\n-    {\n-    case USE:\n-      return false;\n-\n     case CLOBBER:\n       if (fast)\n \t{\n@@ -116,20 +88,32 @@ deletable_insn_p (rtx insn, bool fast)\n \t  x = XEXP (body, 0);\n \t  return REG_P (x) && (!HARD_REGISTER_P (x) || reload_completed);\n \t}\n-      else\n+      else \n \t/* Because of the way that use-def chains are built, it is not\n \t   possible to tell if the clobber is dead because it can\n \t   never be the target of a use-def chain.  */\n \treturn false;\n \n     case PARALLEL:\n-      for (i = XVECLEN (body, 0) - 1; i >= 0; i--)\n-\tif (!deletable_insn_p_1 (XVECEXP (body, 0, i)))\n-\t  return false;\n-      return true;\n+      {\n+\tint i;\n+\tfor (i = XVECLEN (body, 0) - 1; i >= 0; i--)\n+\t  if (!deletable_insn_p (insn, XVECEXP (body, 0, i), fast))\n+\t    return false;\n+\treturn true;\n+      }\n \n     default:\n-      return deletable_insn_p_1 (body);\n+      if (!NONJUMP_INSN_P (insn))\n+\treturn false;\n+\n+      if (volatile_insn_p (body))\n+\treturn false;\n+\n+      if (flag_non_call_exceptions && may_trap_p (body))\n+\treturn false;\n+\n+      return true;\n     }\n }\n \n@@ -385,7 +369,7 @@ prescan_insns_for_dce (bool fast)\n         rtx note = find_reg_note (insn, REG_LIBCALL_ID, NULL_RTX);\n         if (note)\n           mark_libcall (insn, fast);\n-        else if (deletable_insn_p (insn, fast))\n+        else if (deletable_insn_p (insn, PATTERN (insn), fast))\n           mark_nonreg_stores (PATTERN (insn), insn, fast);\n         else\n           mark_insn (insn, fast);"}]}