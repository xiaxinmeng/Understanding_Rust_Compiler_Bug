{"sha": "b927d936e339ddd47779b522b80552306ebb5604", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkyN2Q5MzZlMzM5ZGRkNDc3NzliNTIyYjgwNTUyMzA2ZWJiNTYwNA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2021-05-21T19:51:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-08T13:34:17Z"}, "message": "[Ada] Incorrect iteration over hashed containers after multiple Inserts\n\ngcc/ada/\n\n\t* libgnat/a-cohama.ads: Introduce an equality operator over\n\tcursors.\n\t* libgnat/a-cohase.ads: Ditto.\n\t* libgnat/a-cohama.adb: Add body for \"=\" over cursors.\n\t(Insert): Do not set the Position component of the cursor that\n\tdenotes the inserted element.\n\t* libgnat/a-cohase.adb: Ditto.", "tree": {"sha": "b9cceeeb9ef6537885709f2e0e4c54e742dc0894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9cceeeb9ef6537885709f2e0e4c54e742dc0894"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b927d936e339ddd47779b522b80552306ebb5604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b927d936e339ddd47779b522b80552306ebb5604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b927d936e339ddd47779b522b80552306ebb5604", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b927d936e339ddd47779b522b80552306ebb5604/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5b1e8e9a5808d612ad20fdf2f77c52cfa5907d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5b1e8e9a5808d612ad20fdf2f77c52cfa5907d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5b1e8e9a5808d612ad20fdf2f77c52cfa5907d3"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "e6d6e4d40305a8c9396ba22e0821196ecfb005bc", "filename": "gcc/ada/libgnat/a-cohama.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b927d936e339ddd47779b522b80552306ebb5604/gcc%2Fada%2Flibgnat%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b927d936e339ddd47779b522b80552306ebb5604/gcc%2Fada%2Flibgnat%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohama.adb?ref=b927d936e339ddd47779b522b80552306ebb5604", "patch": "@@ -116,6 +116,13 @@ is\n    -- \"=\" --\n    ---------\n \n+   function \"=\" (Left, Right : Cursor) return Boolean is\n+   begin\n+      return\n+       Left.Container = Right.Container\n+         and then Left.Node = Right.Node;\n+   end \"=\";\n+\n    function \"=\" (Left, Right : Map) return Boolean is\n    begin\n       return Is_Equal (Left.HT, Right.HT);\n@@ -636,7 +643,11 @@ is\n       end if;\n \n       Position.Container := Container'Unrestricted_Access;\n-      Position.Position := HT_Ops.Index (HT, Position.Node);\n+\n+      --  Note that we do not set the Position component of the cursor,\n+      --  because it may become incorrect on subsequent insertions/deletions\n+      --  from the container. This will lose some optimizations but prevents\n+      --  anomalies when the underlying hash-table is expanded or shrunk.\n    end Insert;\n \n    procedure Insert\n@@ -679,7 +690,6 @@ is\n       end if;\n \n       Position.Container := Container'Unrestricted_Access;\n-      Position.Position := HT_Ops.Index (HT, Position.Node);\n    end Insert;\n \n    procedure Insert"}, {"sha": "3f172bd399adf0dfde1cf7ac6735b9ea205e4ba1", "filename": "gcc/ada/libgnat/a-cohama.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b927d936e339ddd47779b522b80552306ebb5604/gcc%2Fada%2Flibgnat%2Fa-cohama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b927d936e339ddd47779b522b80552306ebb5604/gcc%2Fada%2Flibgnat%2Fa-cohama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohama.ads?ref=b927d936e339ddd47779b522b80552306ebb5604", "patch": "@@ -110,6 +110,14 @@ is\n    type Cursor is private;\n    pragma Preelaborable_Initialization (Cursor);\n \n+   function \"=\" (Left, Right : Cursor) return Boolean;\n+   --  The representation of cursors includes a component used to optimize\n+   --  iteration over maps. This component may become unreliable after\n+   --  multiple map insertions, and must be excluded from cursor equality,\n+   --  so we need to provide an explicit definition for it, instead of\n+   --  using predefined equality (as implied by a questionable comment\n+   --  in the RM).\n+\n    Empty_Map : constant Map;\n    --  Map objects declared without an initialization expression are\n    --  initialized to the value Empty_Map."}, {"sha": "2342116043e122e7d5345c9744d3395a2e9aa478", "filename": "gcc/ada/libgnat/a-cohase.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b927d936e339ddd47779b522b80552306ebb5604/gcc%2Fada%2Flibgnat%2Fa-cohase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b927d936e339ddd47779b522b80552306ebb5604/gcc%2Fada%2Flibgnat%2Fa-cohase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohase.adb?ref=b927d936e339ddd47779b522b80552306ebb5604", "patch": "@@ -145,6 +145,13 @@ is\n    -- \"=\" --\n    ---------\n \n+   function \"=\" (Left, Right : Cursor) return Boolean is\n+   begin\n+      return\n+       Left.Container = Right.Container\n+         and then Left.Node = Right.Node;\n+   end \"=\";\n+\n    function \"=\" (Left, Right : Set) return Boolean is\n    begin\n       return Is_Equal (Left.HT, Right.HT);\n@@ -763,11 +770,14 @@ is\n       Position  : out Cursor;\n       Inserted  : out Boolean)\n    is\n-      HT : Hash_Table_Type renames Container'Unrestricted_Access.HT;\n    begin\n       Insert (Container.HT, New_Item, Position.Node, Inserted);\n       Position.Container := Container'Unchecked_Access;\n-      Position.Position := HT_Ops.Index (HT, Position.Node);\n+\n+      --  Note that we do not set the Position component of the cursor,\n+      --  because it may become incorrect on subsequent insertions/deletions\n+      --  from the container. This will lose some optimizations but prevents\n+      --  anomalies when the underlying hash-table is expanded or shrunk.\n    end Insert;\n \n    procedure Insert"}, {"sha": "2356ba7f66abd5400a8c84a90985174d1147891f", "filename": "gcc/ada/libgnat/a-cohase.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b927d936e339ddd47779b522b80552306ebb5604/gcc%2Fada%2Flibgnat%2Fa-cohase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b927d936e339ddd47779b522b80552306ebb5604/gcc%2Fada%2Flibgnat%2Fa-cohase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohase.ads?ref=b927d936e339ddd47779b522b80552306ebb5604", "patch": "@@ -69,6 +69,15 @@ is\n    type Cursor is private;\n    pragma Preelaborable_Initialization (Cursor);\n \n+   function \"=\" (Left, Right : Cursor) return Boolean;\n+   --  The representation of cursors includes a component used to optimize\n+   --  iteration over sets. This component may become unreliable after\n+   --  multiple set insertions, and must be excluded from cursor equality,\n+   --  so we need to provide an explicit definition for it, instead of\n+   --  using predefined equality (as implied by a questionable comment\n+   --  in the RM). This is also the case for hashed maps, and affects the\n+   --  use of Insert primitives in hashed structures.\n+\n    Empty_Set : constant Set;\n    --  Set objects declared without an initialization expression are\n    --  initialized to the value Empty_Set."}]}