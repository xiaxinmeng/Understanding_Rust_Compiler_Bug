{"sha": "3c5fd3616f73fbcd241cc3a5e09275c2b0c49bd4", "node_id": "C_kwDOANBUbNoAKDNjNWZkMzYxNmY3M2ZiY2QyNDFjYzNhNWUwOTI3NWMyYjBjNDliZDQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-28T16:40:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-28T16:40:17Z"}, "message": "loop-invariant: Fix -fcompare-debug failure [PR103837]\n\nIn the following testcase we have a -fcompare-debug failure, because\ncan_move_invariant_reg doesn't ignore DEBUG_INSNs in its decisions.\nIn the testcase we have due to uninitialized variable:\n  loop_header\n    debug_insn using pseudo84\n    pseudo84 = invariant\n    insn using pseudo84\n  end loop\nand with -g decide not to move the pseudo84 = invariant before the\nloop header; in this case not resetting the debug insns might be fine.\nBut, we could have also:\n  pseudo84 = whatever\n  loop_header\n    debug_insn using pseudo84\n    pseudo84 = invariant\n    insn using pseudo84\n  end loop\nand in that case not resetting the debug insns would result in wrong-debug.\nAnd, we don't really have generally a good substitution on what pseudo84\ncontains, it could inherit various values from different paths.\nSo, the following patch ignores DEBUG_INSNs in the decisions, and if there\nare any that previously prevented the optimization, resets them before\nreturn true.\n\n2021-12-28  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/103837\n\t* loop-invariant.c (can_move_invariant_reg): Ignore DEBUG_INSNs in\n\tthe decisions whether to return false or continue and right before\n\treturning true reset those debug insns that previously caused\n\treturning false.\n\n\t* gcc.dg/pr103837.c: New test.", "tree": {"sha": "866d5f0b3c7bae8a20a130111b7a98673e4be884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/866d5f0b3c7bae8a20a130111b7a98673e4be884"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c5fd3616f73fbcd241cc3a5e09275c2b0c49bd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5fd3616f73fbcd241cc3a5e09275c2b0c49bd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5fd3616f73fbcd241cc3a5e09275c2b0c49bd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5fd3616f73fbcd241cc3a5e09275c2b0c49bd4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78ee8381bf0ebd09a92936bdb9e1b5c9fc85ad88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78ee8381bf0ebd09a92936bdb9e1b5c9fc85ad88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78ee8381bf0ebd09a92936bdb9e1b5c9fc85ad88"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "be9515543374bfea11e2d5c7b2015060413e3882", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5fd3616f73fbcd241cc3a5e09275c2b0c49bd4/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5fd3616f73fbcd241cc3a5e09275c2b0c49bd4/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=3c5fd3616f73fbcd241cc3a5e09275c2b0c49bd4", "patch": "@@ -1691,6 +1691,7 @@ can_move_invariant_reg (class loop *loop, struct invariant *inv, rtx reg)\n   unsigned int dest_regno, defs_in_loop_count = 0;\n   rtx_insn *insn = inv->insn;\n   basic_block bb = BLOCK_FOR_INSN (inv->insn);\n+  auto_vec <rtx_insn *, 16> debug_insns_to_reset;\n \n   /* We ignore hard register and memory access for cost and complexity reasons.\n      Hard register are few at this stage and expensive to consider as they\n@@ -1725,10 +1726,13 @@ can_move_invariant_reg (class loop *loop, struct invariant *inv, rtx reg)\n \tcontinue;\n \n       /* Don't move if a use is not dominated by def in insn.  */\n-      if (use_bb == bb && DF_INSN_LUID (insn) >= DF_INSN_LUID (use_insn))\n-\treturn false;\n-      if (!dominated_by_p (CDI_DOMINATORS, use_bb, bb))\n-\treturn false;\n+      if ((use_bb == bb && DF_INSN_LUID (insn) >= DF_INSN_LUID (use_insn))\n+\t  || !dominated_by_p (CDI_DOMINATORS, use_bb, bb))\n+\t{\n+\t  if (!DEBUG_INSN_P (use_insn))\n+\t    return false;\n+\t  debug_insns_to_reset.safe_push (use_insn);\n+\t}\n     }\n \n   /* Check for other defs.  Any other def in the loop might reach a use\n@@ -1751,6 +1755,13 @@ can_move_invariant_reg (class loop *loop, struct invariant *inv, rtx reg)\n \treturn false;\n     }\n \n+  /* Reset debug uses if a use is not dominated by def in insn.  */\n+  for (auto use_insn : debug_insns_to_reset)\n+    {\n+      INSN_VAR_LOCATION_LOC (use_insn) = gen_rtx_UNKNOWN_VAR_LOC ();\n+      df_insn_rescan (use_insn);\n+    }\n+\n   return true;\n }\n "}, {"sha": "43593d52b6c916f0ef7e1e151b5136ef901ef44b", "filename": "gcc/testsuite/gcc.dg/pr103837.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5fd3616f73fbcd241cc3a5e09275c2b0c49bd4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103837.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5fd3616f73fbcd241cc3a5e09275c2b0c49bd4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103837.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103837.c?ref=3c5fd3616f73fbcd241cc3a5e09275c2b0c49bd4", "patch": "@@ -0,0 +1,19 @@\n+/* PR rtl-optimization/103837 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Og -fcompare-debug -fmove-loop-invariants -fnon-call-exceptions -fexceptions -fdelete-dead-exceptions -fno-tree-dce -w\" } */\n+\n+unsigned long int\n+foo (int x)\n+{\n+  double a;\n+  int b;\n+  unsigned long int ret = a;\n+\n+  for (;;)\n+    {\n+      b = !!((int) a);\n+      a = x;\n+    }\n+\n+  return ret;\n+}"}]}