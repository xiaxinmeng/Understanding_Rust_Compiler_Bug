{"sha": "4cfe7a6c3569019e33dc86a54ec03aef87ad5d83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNmZTdhNmMzNTY5MDE5ZTMzZGM4NmE1NGVjMDNhZWY4N2FkNWQ4Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-11-17T18:51:20Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-11-17T18:51:20Z"}, "message": "Short-cut generation of simple built-in functions\n\nThis patch short-circuits the builtins.c expansion code for a particular\ngimple call if:\n\n- the function has an associated internal function\n- the target implements that internal function\n- the call has no side effects\n\nThis allows a later patch to remove the builtins.c code, once calls with\nside effects have been handled.\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* builtins.h (called_as_built_in): Declare.\n\t* builtins.c (called_as_built_in): Make external.\n\t* internal-fn.h (expand_internal_call): Define a variant that\n\tspecifies the internal function explicitly.\n\t* internal-fn.c (expand_load_lanes_optab_fn)\n\t(expand_store_lanes_optab_fn, expand_ANNOTATE, expand_GOMP_SIMD_LANE)\n\t(expand_GOMP_SIMD_VF, expand_GOMP_SIMD_LAST_LANE)\n\t(expand_GOMP_SIMD_ORDERED_START, expand_GOMP_SIMD_ORDERED_END)\n\t(expand_UBSAN_NULL, expand_UBSAN_BOUNDS, expand_UBSAN_VPTR)\n\t(expand_UBSAN_OBJECT_SIZE, expand_ASAN_CHECK, expand_TSAN_FUNC_EXIT)\n\t(expand_UBSAN_CHECK_ADD, expand_UBSAN_CHECK_SUB)\n\t(expand_UBSAN_CHECK_MUL, expand_ADD_OVERFLOW, expand_SUB_OVERFLOW)\n\t(expand_MUL_OVERFLOW, expand_LOOP_VECTORIZED)\n\t(expand_mask_load_optab_fn, expand_mask_store_optab_fn)\n\t(expand_ABNORMAL_DISPATCHER, expand_BUILTIN_EXPECT, expand_VA_ARG)\n\t(expand_UNIQUE, expand_GOACC_DIM_SIZE, expand_GOACC_DIM_POS)\n\t(expand_GOACC_LOOP, expand_GOACC_REDUCTION, expand_direct_optab_fn)\n\t(expand_unary_optab_fn, expand_binary_optab_fn): Add an internal_fn\n\targument.\n\t(internal_fn_expanders): Update prototype.\n\t(expand_internal_call): Define a variant that specifies the\n\tinternal function explicitly. Use it to implement the previous\n\tinterface.\n\t* cfgexpand.c (expand_call_stmt): Try to expand calls to built-in\n\tfunctions as calls to internal functions.\n\nFrom-SVN: r230487", "tree": {"sha": "380228f624ddb3beca125c6b95fe59b5947f3faf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/380228f624ddb3beca125c6b95fe59b5947f3faf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cfe7a6c3569019e33dc86a54ec03aef87ad5d83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cfe7a6c3569019e33dc86a54ec03aef87ad5d83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cfe7a6c3569019e33dc86a54ec03aef87ad5d83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cfe7a6c3569019e33dc86a54ec03aef87ad5d83/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1dc4a20a797ed2718fb2ba3431753ce84db86b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1dc4a20a797ed2718fb2ba3431753ce84db86b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1dc4a20a797ed2718fb2ba3431753ce84db86b2"}], "stats": {"total": 143, "additions": 98, "deletions": 45}, "files": [{"sha": "7b559b506e611ce311c521561a2c734051894c8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cfe7a6c3569019e33dc86a54ec03aef87ad5d83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cfe7a6c3569019e33dc86a54ec03aef87ad5d83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4cfe7a6c3569019e33dc86a54ec03aef87ad5d83", "patch": "@@ -1,3 +1,31 @@\n+2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* builtins.h (called_as_built_in): Declare.\n+\t* builtins.c (called_as_built_in): Make external.\n+\t* internal-fn.h (expand_internal_call): Define a variant that\n+\tspecifies the internal function explicitly.\n+\t* internal-fn.c (expand_load_lanes_optab_fn)\n+\t(expand_store_lanes_optab_fn, expand_ANNOTATE, expand_GOMP_SIMD_LANE)\n+\t(expand_GOMP_SIMD_VF, expand_GOMP_SIMD_LAST_LANE)\n+\t(expand_GOMP_SIMD_ORDERED_START, expand_GOMP_SIMD_ORDERED_END)\n+\t(expand_UBSAN_NULL, expand_UBSAN_BOUNDS, expand_UBSAN_VPTR)\n+\t(expand_UBSAN_OBJECT_SIZE, expand_ASAN_CHECK, expand_TSAN_FUNC_EXIT)\n+\t(expand_UBSAN_CHECK_ADD, expand_UBSAN_CHECK_SUB)\n+\t(expand_UBSAN_CHECK_MUL, expand_ADD_OVERFLOW, expand_SUB_OVERFLOW)\n+\t(expand_MUL_OVERFLOW, expand_LOOP_VECTORIZED)\n+\t(expand_mask_load_optab_fn, expand_mask_store_optab_fn)\n+\t(expand_ABNORMAL_DISPATCHER, expand_BUILTIN_EXPECT, expand_VA_ARG)\n+\t(expand_UNIQUE, expand_GOACC_DIM_SIZE, expand_GOACC_DIM_POS)\n+\t(expand_GOACC_LOOP, expand_GOACC_REDUCTION, expand_direct_optab_fn)\n+\t(expand_unary_optab_fn, expand_binary_optab_fn): Add an internal_fn\n+\targument.\n+\t(internal_fn_expanders): Update prototype.\n+\t(expand_internal_call): Define a variant that specifies the\n+\tinternal function explicitly. Use it to implement the previous\n+\tinterface.\n+\t* cfgexpand.c (expand_call_stmt): Try to expand calls to built-in\n+\tfunctions as calls to internal functions.\n+\n 2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* Makefile.in (MOSTLYCLEANFILES): Add cfn-operators.pd."}, {"sha": "c422d0dc5b834b33cb7c2fc0fcdbbf98eae4c826", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cfe7a6c3569019e33dc86a54ec03aef87ad5d83/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cfe7a6c3569019e33dc86a54ec03aef87ad5d83/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4cfe7a6c3569019e33dc86a54ec03aef87ad5d83", "patch": "@@ -222,7 +222,7 @@ is_builtin_fn (tree decl)\n    of the optimization level.  This means whenever a function is invoked with\n    its \"internal\" name, which normally contains the prefix \"__builtin\".  */\n \n-static bool\n+bool\n called_as_built_in (tree node)\n {\n   /* Note that we must use DECL_NAME, not DECL_ASSEMBLER_NAME_SET_P since"}, {"sha": "1d00068c504c69ba1d525351e439353ca0b9266c", "filename": "gcc/builtins.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cfe7a6c3569019e33dc86a54ec03aef87ad5d83/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cfe7a6c3569019e33dc86a54ec03aef87ad5d83/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=4cfe7a6c3569019e33dc86a54ec03aef87ad5d83", "patch": "@@ -50,6 +50,7 @@ extern struct target_builtins *this_target_builtins;\n extern bool force_folding_builtin_constant_p;\n \n extern bool is_builtin_fn (tree);\n+extern bool called_as_built_in (tree);\n extern bool get_object_alignment_1 (tree, unsigned int *,\n \t\t\t\t    unsigned HOST_WIDE_INT *);\n extern unsigned int get_object_alignment (tree);"}, {"sha": "1990e107db60ad80ac26c824e3f24bf777275037", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cfe7a6c3569019e33dc86a54ec03aef87ad5d83/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cfe7a6c3569019e33dc86a54ec03aef87ad5d83/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=4cfe7a6c3569019e33dc86a54ec03aef87ad5d83", "patch": "@@ -2551,10 +2551,25 @@ expand_call_stmt (gcall *stmt)\n       return;\n     }\n \n+  /* If this is a call to a built-in function and it has no effect other\n+     than setting the lhs, try to implement it using an internal function\n+     instead.  */\n+  decl = gimple_call_fndecl (stmt);\n+  if (gimple_call_lhs (stmt)\n+      && !gimple_has_side_effects (stmt)\n+      && (optimize || (decl && called_as_built_in (decl))))\n+    {\n+      internal_fn ifn = replacement_internal_fn (stmt);\n+      if (ifn != IFN_LAST)\n+\t{\n+\t  expand_internal_call (ifn, stmt);\n+\t  return;\n+\t}\n+    }\n+\n   exp = build_vl_exp (CALL_EXPR, gimple_call_num_args (stmt) + 3);\n \n   CALL_EXPR_FN (exp) = gimple_call_fn (stmt);\n-  decl = gimple_call_fndecl (stmt);\n   builtin_p = decl && DECL_BUILT_IN (decl);\n \n   /* If this is not a builtin function, the function type through which the"}, {"sha": "f23d799c38d598186b035cca3ed67e589b81eab8", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 51, "deletions": 43, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cfe7a6c3569019e33dc86a54ec03aef87ad5d83/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cfe7a6c3569019e33dc86a54ec03aef87ad5d83/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=4cfe7a6c3569019e33dc86a54ec03aef87ad5d83", "patch": "@@ -103,7 +103,7 @@ get_multi_vector_move (tree array_type, convert_optab optab)\n /* Expand LOAD_LANES call STMT using optab OPTAB.  */\n \n static void\n-expand_load_lanes_optab_fn (gcall *stmt, convert_optab optab)\n+expand_load_lanes_optab_fn (internal_fn, gcall *stmt, convert_optab optab)\n {\n   struct expand_operand ops[2];\n   tree type, lhs, rhs;\n@@ -127,7 +127,7 @@ expand_load_lanes_optab_fn (gcall *stmt, convert_optab optab)\n /* Expand STORE_LANES call STMT using optab OPTAB.  */\n \n static void\n-expand_store_lanes_optab_fn (gcall *stmt, convert_optab optab)\n+expand_store_lanes_optab_fn (internal_fn, gcall *stmt, convert_optab optab)\n {\n   struct expand_operand ops[2];\n   tree type, lhs, rhs;\n@@ -149,95 +149,95 @@ expand_store_lanes_optab_fn (gcall *stmt, convert_optab optab)\n }\n \n static void\n-expand_ANNOTATE (gcall *)\n+expand_ANNOTATE (internal_fn, gcall *)\n {\n   gcc_unreachable ();\n }\n \n /* This should get expanded in adjust_simduid_builtins.  */\n \n static void\n-expand_GOMP_SIMD_LANE (gcall *)\n+expand_GOMP_SIMD_LANE (internal_fn, gcall *)\n {\n   gcc_unreachable ();\n }\n \n /* This should get expanded in adjust_simduid_builtins.  */\n \n static void\n-expand_GOMP_SIMD_VF (gcall *)\n+expand_GOMP_SIMD_VF (internal_fn, gcall *)\n {\n   gcc_unreachable ();\n }\n \n /* This should get expanded in adjust_simduid_builtins.  */\n \n static void\n-expand_GOMP_SIMD_LAST_LANE (gcall *)\n+expand_GOMP_SIMD_LAST_LANE (internal_fn, gcall *)\n {\n   gcc_unreachable ();\n }\n \n /* This should get expanded in adjust_simduid_builtins.  */\n \n static void\n-expand_GOMP_SIMD_ORDERED_START (gcall *)\n+expand_GOMP_SIMD_ORDERED_START (internal_fn, gcall *)\n {\n   gcc_unreachable ();\n }\n \n /* This should get expanded in adjust_simduid_builtins.  */\n \n static void\n-expand_GOMP_SIMD_ORDERED_END (gcall *)\n+expand_GOMP_SIMD_ORDERED_END (internal_fn, gcall *)\n {\n   gcc_unreachable ();\n }\n \n /* This should get expanded in the sanopt pass.  */\n \n static void\n-expand_UBSAN_NULL (gcall *)\n+expand_UBSAN_NULL (internal_fn, gcall *)\n {\n   gcc_unreachable ();\n }\n \n /* This should get expanded in the sanopt pass.  */\n \n static void\n-expand_UBSAN_BOUNDS (gcall *)\n+expand_UBSAN_BOUNDS (internal_fn, gcall *)\n {\n   gcc_unreachable ();\n }\n \n /* This should get expanded in the sanopt pass.  */\n \n static void\n-expand_UBSAN_VPTR (gcall *)\n+expand_UBSAN_VPTR (internal_fn, gcall *)\n {\n   gcc_unreachable ();\n }\n \n /* This should get expanded in the sanopt pass.  */\n \n static void\n-expand_UBSAN_OBJECT_SIZE (gcall *)\n+expand_UBSAN_OBJECT_SIZE (internal_fn, gcall *)\n {\n   gcc_unreachable ();\n }\n \n /* This should get expanded in the sanopt pass.  */\n \n static void\n-expand_ASAN_CHECK (gcall *)\n+expand_ASAN_CHECK (internal_fn, gcall *)\n {\n   gcc_unreachable ();\n }\n \n /* This should get expanded in the tsan pass.  */\n \n static void\n-expand_TSAN_FUNC_EXIT (gcall *)\n+expand_TSAN_FUNC_EXIT (internal_fn, gcall *)\n {\n   gcc_unreachable ();\n }\n@@ -1639,7 +1639,7 @@ expand_mul_overflow (location_t loc, tree lhs, tree arg0, tree arg1,\n /* Expand UBSAN_CHECK_ADD call STMT.  */\n \n static void\n-expand_UBSAN_CHECK_ADD (gcall *stmt)\n+expand_UBSAN_CHECK_ADD (internal_fn, gcall *stmt)\n {\n   location_t loc = gimple_location (stmt);\n   tree lhs = gimple_call_lhs (stmt);\n@@ -1652,7 +1652,7 @@ expand_UBSAN_CHECK_ADD (gcall *stmt)\n /* Expand UBSAN_CHECK_SUB call STMT.  */\n \n static void\n-expand_UBSAN_CHECK_SUB (gcall *stmt)\n+expand_UBSAN_CHECK_SUB (internal_fn, gcall *stmt)\n {\n   location_t loc = gimple_location (stmt);\n   tree lhs = gimple_call_lhs (stmt);\n@@ -1668,7 +1668,7 @@ expand_UBSAN_CHECK_SUB (gcall *stmt)\n /* Expand UBSAN_CHECK_MUL call STMT.  */\n \n static void\n-expand_UBSAN_CHECK_MUL (gcall *stmt)\n+expand_UBSAN_CHECK_MUL (internal_fn, gcall *stmt)\n {\n   location_t loc = gimple_location (stmt);\n   tree lhs = gimple_call_lhs (stmt);\n@@ -1853,39 +1853,39 @@ expand_arith_overflow (enum tree_code code, gimple *stmt)\n /* Expand ADD_OVERFLOW STMT.  */\n \n static void\n-expand_ADD_OVERFLOW (gcall *stmt)\n+expand_ADD_OVERFLOW (internal_fn, gcall *stmt)\n {\n   expand_arith_overflow (PLUS_EXPR, stmt);\n }\n \n /* Expand SUB_OVERFLOW STMT.  */\n \n static void\n-expand_SUB_OVERFLOW (gcall *stmt)\n+expand_SUB_OVERFLOW (internal_fn, gcall *stmt)\n {\n   expand_arith_overflow (MINUS_EXPR, stmt);\n }\n \n /* Expand MUL_OVERFLOW STMT.  */\n \n static void\n-expand_MUL_OVERFLOW (gcall *stmt)\n+expand_MUL_OVERFLOW (internal_fn, gcall *stmt)\n {\n   expand_arith_overflow (MULT_EXPR, stmt);\n }\n \n /* This should get folded in tree-vectorizer.c.  */\n \n static void\n-expand_LOOP_VECTORIZED (gcall *)\n+expand_LOOP_VECTORIZED (internal_fn, gcall *)\n {\n   gcc_unreachable ();\n }\n \n /* Expand MASK_LOAD call STMT using optab OPTAB.  */\n \n static void\n-expand_mask_load_optab_fn (gcall *stmt, convert_optab optab)\n+expand_mask_load_optab_fn (internal_fn, gcall *stmt, convert_optab optab)\n {\n   struct expand_operand ops[3];\n   tree type, lhs, rhs, maskt;\n@@ -1914,7 +1914,7 @@ expand_mask_load_optab_fn (gcall *stmt, convert_optab optab)\n /* Expand MASK_STORE call STMT using optab OPTAB.  */\n \n static void\n-expand_mask_store_optab_fn (gcall *stmt, convert_optab optab)\n+expand_mask_store_optab_fn (internal_fn, gcall *stmt, convert_optab optab)\n {\n   struct expand_operand ops[3];\n   tree type, lhs, rhs, maskt;\n@@ -1939,12 +1939,12 @@ expand_mask_store_optab_fn (gcall *stmt, convert_optab optab)\n }\n \n static void\n-expand_ABNORMAL_DISPATCHER (gcall *)\n+expand_ABNORMAL_DISPATCHER (internal_fn, gcall *)\n {\n }\n \n static void\n-expand_BUILTIN_EXPECT (gcall *stmt)\n+expand_BUILTIN_EXPECT (internal_fn, gcall *stmt)\n {\n   /* When guessing was done, the hints should be already stripped away.  */\n   gcc_assert (!flag_guess_branch_prob || optimize == 0 || seen_error ());\n@@ -1964,15 +1964,15 @@ expand_BUILTIN_EXPECT (gcall *stmt)\n    should never be called.  */\n \n static void\n-expand_VA_ARG (gcall *stmt ATTRIBUTE_UNUSED)\n+expand_VA_ARG (internal_fn, gcall *)\n {\n   gcc_unreachable ();\n }\n \n /* Expand the IFN_UNIQUE function according to its first argument.  */\n \n static void\n-expand_UNIQUE (gcall *stmt)\n+expand_UNIQUE (internal_fn, gcall *stmt)\n {\n   rtx pattern = NULL_RTX;\n   enum ifn_unique_kind kind\n@@ -2018,7 +2018,7 @@ expand_UNIQUE (gcall *stmt)\n /* The size of an OpenACC compute dimension.  */\n \n static void\n-expand_GOACC_DIM_SIZE (gcall *stmt)\n+expand_GOACC_DIM_SIZE (internal_fn, gcall *stmt)\n {\n   tree lhs = gimple_call_lhs (stmt);\n \n@@ -2039,7 +2039,7 @@ expand_GOACC_DIM_SIZE (gcall *stmt)\n /* The position of an OpenACC execution engine along one compute axis.  */\n \n static void\n-expand_GOACC_DIM_POS (gcall *stmt)\n+expand_GOACC_DIM_POS (internal_fn, gcall *stmt)\n {\n   tree lhs = gimple_call_lhs (stmt);\n \n@@ -2060,28 +2060,28 @@ expand_GOACC_DIM_POS (gcall *stmt)\n /* This is expanded by oacc_device_lower pass.  */\n \n static void\n-expand_GOACC_LOOP (gcall *stmt ATTRIBUTE_UNUSED)\n+expand_GOACC_LOOP (internal_fn, gcall *)\n {\n   gcc_unreachable ();\n }\n \n /* This is expanded by oacc_device_lower pass.  */\n \n static void\n-expand_GOACC_REDUCTION (gcall *stmt ATTRIBUTE_UNUSED)\n+expand_GOACC_REDUCTION (internal_fn, gcall *)\n {\n   gcc_unreachable ();\n }\n \n-/* Expand call STMT using OPTAB, which has a single output operand and\n-   NARGS input operands.  */\n+/* Expand a call to FN using the operands in STMT.  FN has a single\n+   output operand and NARGS input operands.  */\n \n static void\n-expand_direct_optab_fn (gcall *stmt, direct_optab optab, unsigned int nargs)\n+expand_direct_optab_fn (internal_fn fn, gcall *stmt, direct_optab optab,\n+\t\t\tunsigned int nargs)\n {\n   expand_operand *ops = XALLOCAVEC (expand_operand, nargs + 1);\n \n-  internal_fn fn = gimple_call_internal_fn (stmt);\n   tree_pair types = direct_internal_fn_types (fn, stmt);\n   insn_code icode = direct_optab_handler (optab, TYPE_MODE (types.first));\n \n@@ -2119,11 +2119,11 @@ expand_direct_optab_fn (gcall *stmt, direct_optab optab, unsigned int nargs)\n \n /* Expanders for optabs that can use expand_direct_optab_fn.  */\n \n-#define expand_unary_optab_fn(STMT, OPTAB) \\\n-  expand_direct_optab_fn (STMT, OPTAB, 1)\n+#define expand_unary_optab_fn(FN, STMT, OPTAB) \\\n+  expand_direct_optab_fn (FN, STMT, OPTAB, 1)\n \n-#define expand_binary_optab_fn(STMT, OPTAB) \\\n-  expand_direct_optab_fn (STMT, OPTAB, 2)\n+#define expand_binary_optab_fn(FN, STMT, OPTAB) \\\n+  expand_direct_optab_fn (FN, STMT, OPTAB, 2)\n \n /* RETURN_TYPE and ARGS are a return type and argument list that are\n    in principle compatible with FN (which satisfies direct_internal_fn_p).\n@@ -2219,9 +2219,9 @@ direct_internal_fn_supported_p (internal_fn fn, tree type)\n \n #define DEF_INTERNAL_OPTAB_FN(CODE, FLAGS, OPTAB, TYPE) \\\n   static void\t\t\t\t\t\t\\\n-  expand_##CODE (gcall *stmt)\t\t\t\t\\\n+  expand_##CODE (internal_fn fn, gcall *stmt)\t\t\\\n   {\t\t\t\t\t\t\t\\\n-    expand_##TYPE##_optab_fn (stmt, OPTAB##_optab);\t\\\n+    expand_##TYPE##_optab_fn (fn, stmt, OPTAB##_optab);\t\\\n   }\n #include \"internal-fn.def\"\n \n@@ -2231,16 +2231,24 @@ direct_internal_fn_supported_p (internal_fn fn, tree type)\n        expand_<NAME> (gcall *stmt)\n \n    where STMT is the statement that performs the call. */\n-static void (*const internal_fn_expanders[]) (gcall *) = {\n+static void (*const internal_fn_expanders[]) (internal_fn, gcall *) = {\n #define DEF_INTERNAL_FN(CODE, FLAGS, FNSPEC) expand_##CODE,\n #include \"internal-fn.def\"\n   0\n };\n \n+/* Expand STMT as though it were a call to internal function FN.  */\n+\n+void\n+expand_internal_call (internal_fn fn, gcall *stmt)\n+{\n+  internal_fn_expanders[fn] (fn, stmt);\n+}\n+\n /* Expand STMT, which is a call to internal function FN.  */\n \n void\n expand_internal_call (gcall *stmt)\n {\n-  internal_fn_expanders[(int) gimple_call_internal_fn (stmt)] (stmt);\n+  expand_internal_call (gimple_call_internal_fn (stmt), stmt);\n }"}, {"sha": "5ee43b8e25281a72aa1f180b2ef65cb28b410273", "filename": "gcc/internal-fn.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cfe7a6c3569019e33dc86a54ec03aef87ad5d83/gcc%2Finternal-fn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cfe7a6c3569019e33dc86a54ec03aef87ad5d83/gcc%2Finternal-fn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.h?ref=4cfe7a6c3569019e33dc86a54ec03aef87ad5d83", "patch": "@@ -162,5 +162,6 @@ extern bool direct_internal_fn_supported_p (internal_fn, tree_pair);\n extern bool direct_internal_fn_supported_p (internal_fn, tree);\n \n extern void expand_internal_call (gcall *);\n+extern void expand_internal_call (internal_fn, gcall *);\n \n #endif"}]}