{"sha": "dd75251ff0818c1c5da72afee94b13dce3bc96a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ3NTI1MWZmMDgxOGMxYzVkYTcyYWZlZTk0YjEzZGNlM2JjOTZhNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-07-19T00:57:38Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-07-19T00:57:38Z"}, "message": "acinclude.m4: Tweaks.\n\n\n2000-07-18  Benjamin Kosnik  <bkoz@soma.redhat.com>\n\n\t* acinclude.m4: Tweaks.\n\t* config/c_io_libio.cc: Tweaks.\n\t* bits/sstream.tcc (stringbuf::pbackfail): Simplify.\n\t* libio/_G_config.h: Don't define _G_HAVE_ST_BLKSIZE.\n\t* libio/[iofwide.c, wfiledoalloc.c, wfiteopos.c, wgenops.c]: New files.\n\t* libio/iofclose.c iofopen.c, stdio.c: New files.\n\t* libio/Makefile.am: Add files, add flags, etc.\n\t* src/Makefile.am (sources): Add filebuf.cc.\n\t* acinclude.m4 (GLIBCPP_CHECK_WCHAR_T_SUPPORT):\n\t(GLIBCPP_ENABLE_CSTDIO): Versioning testing, etc etc.\n\nFrom-SVN: r35127", "tree": {"sha": "88659f9c42769497a189b5b02e65a9dc47038c11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88659f9c42769497a189b5b02e65a9dc47038c11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd75251ff0818c1c5da72afee94b13dce3bc96a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd75251ff0818c1c5da72afee94b13dce3bc96a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd75251ff0818c1c5da72afee94b13dce3bc96a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd75251ff0818c1c5da72afee94b13dce3bc96a4/comments", "author": null, "committer": null, "parents": [{"sha": "a0add19302ec821e698ad9b36601a78a5ec2d4da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0add19302ec821e698ad9b36601a78a5ec2d4da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0add19302ec821e698ad9b36601a78a5ec2d4da"}], "stats": {"total": 995, "additions": 681, "deletions": 314}, "files": [{"sha": "83299dab1febb708ba703279cb576e6a202be820", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -1,3 +1,16 @@\n+2000-07-18  Benjamin Kosnik  <bkoz@soma.redhat.com>\n+\n+\t* acinclude.m4: Tweaks.\n+\t* config/c_io_libio.cc: Tweaks.\n+\t* bits/sstream.tcc (stringbuf::pbackfail): Simplify.\n+\t* libio/_G_config.h: Don't define _G_HAVE_ST_BLKSIZE.\n+\t* libio/[iofwide.c, wfiledoalloc.c, wfiteopos.c, wgenops.c]: New files.\n+\t* libio/iofclose.c iofopen.c, stdio.c: New files.\n+\t* libio/Makefile.am: Add files, add flags, etc.\n+\t* src/Makefile.am (sources): Add filebuf.cc.\n+\t* acinclude.m4 (GLIBCPP_CHECK_WCHAR_T_SUPPORT):\n+\t(GLIBCPP_ENABLE_CSTDIO): Versioning testing, etc etc.\n+\n 2000-07-17  Phil Edwards  <pme@sourceware.cygnus.com>\n \n \t* acinclude.m4:  Import CHECK_GNU_MAKE from autoconf macro archive."}, {"sha": "c85f7cca7fd85177112ba2adaa2ed1c80a0aaee4", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -103,6 +103,7 @@ WFMT_FLAGS = @WFMT_FLAGS@\n cpu_include_dir = @cpu_include_dir@\n ctype_include_dir = @ctype_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n+ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus"}, {"sha": "7f761195533c62a4fac8983e110170a60782e096", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 67, "deletions": 45, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -930,6 +930,10 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n \n     dnl At the moment, only enable wchar_t specializations if all the\n     dnl above support is present.\n+    dnl 2000-07-07-bkoz-hack-xxx\n+#    ac_isoC9X_wchar_t=no\n+    dnl 2000-07-07-bkoz-hack-xxx\n+\n     AC_MSG_CHECKING([for enabled wchar_t specializations])\n     if test x\"$ac_isoC9X_wchar_t\" = xyes && test x\"$ac_XPG2_wchar_t\" = xyes; then\n       libinst_wstring_la=\"libinst-wstring.la\"\n@@ -1165,54 +1169,72 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n \n   dnl Check if a valid thread package\n   case x${enable_cstdio_flag} in\n-\txlibio | x | xno | xnone | xyes)\n-\t  # default\n-\t  CSTDIO_H=config/c_io_libio.h\n-\t  CSTDIO_CC=config/c_io_libio.cc\n- \t  AC_MSG_RESULT(libio)\n-\n-\t  # see if we are on a system with libio native (ie, linux)\n-  \t  AC_CHECK_HEADER(libio.h,  has_libio=yes, has_libio=no)\n-\n-\t  # bkoz XXX hack hack need version checks, this is temporary\n-\t  has_libio=no\n-\n-  \t  if test $has_libio = \"yes\"; then\n-   \t    BUILD_LIBIO_INCLUDE=\n-\t    need_libio=no\n-  \t  else\n-   \t  BUILD_LIBIO_INCLUDE='-I../libio'\n-     \t    need_libio=yes\n-  \t  fi\n-  \t  AC_SUBST(BUILD_LIBIO_INCLUDE)\n-\n-\t  # see if the _G_config.h header needs to be built. \n-\t  # NB: This replaces the _G_CONFIG_H machinery in libio-v2\n-\t  AC_CHECK_HEADER(_G_config.h,  has_gconf_h=yes, has_gconf_h=no)\n-  \t  AM_CONDITIONAL(GLIBCPP_NEED_LIBIO_CONFIG_H, test \"$has_gconf_h\" = no)\n-\t  # bkoz XXX hack need to add support for non-glibc systems here\n-\t   has_gconf=no\n-\n-\t  # bkoz XXX need to add checks for this\n-\t  need_wlibio=yes\n-\t  ;;\n-        xwince)\n-    \t  CSTDIO_H=config/c_io_wince.h\n-          CSTDIO_CC=config/c_io_wince.cc\n-          AC_MSG_RESULT(wince)\n-\n-          need_libio=no\n-          BUILD_LIBIO_INCLUDE=\n-          AC_SUBST(BUILD_LIBIO_INCLUDE)\n-          ;;\n-\t*)\n-\t  echo \"$enable_cstdio is an unknown io package\" 1>&2\n-\t  exit 1\n-\t  ;;\n+    xlibio | x | xno | xnone | xyes)\n+      # default\n+      CSTDIO_H=config/c_io_libio.h\n+      CSTDIO_CC=config/c_io_libio.cc\n+      AC_MSG_RESULT(libio)\n+\n+      # see if we are on a system with libio native (ie, linux)\n+      AC_CHECK_HEADER(libio.h,  has_libio=yes, has_libio=no)\n+\n+      # Need to check and see what version of glibc is being used. If\n+      # it's not glibc-2.2 or higher, then we'll need to go ahead and \n+      # compile most of libio for linux systems.\n+      if test x$has_libio = x\"yes\"; then\n+        case \"$target\" in\n+          *-*-linux*)\n+  \t    AC_MSG_CHECKING([for glibc version >= 2.2])\n+  \t    AC_EGREP_CPP([ok], [\n+  \t    #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2) \n+    \t\tok\n+  \t    #endif\n+  \t    ], glibc_satisfactory=yes, glibc_satisfactory=no)\n+  \t    AC_MSG_RESULT($glibc_satisfactory)\n+\t    ;;\n+        esac\n+\n+  \tif test x$glibc_satisfactory = x\"yes\"; then\n+   \t  BUILD_LIBIO_INCLUDE=\n+\t  need_libio=no\n+\t  need_xtra_libio=no\n+      \t  need_wlibio=no\t\n+      \telse\n+\t  BUILD_LIBIO_INCLUDE='-I../libio'\t  \n+\t  need_libio=yes\n+\t  need_xtra_libio=yes\n+          # bkoz XXX need to add checks to enable this\n+          need_wlibio=yes\n+\tfi\n+\n+      # Using libio, but <libio.h> doesn't exist on the target system. . .\n+      else\n+\tBUILD_LIBIO_INCLUDE='-I../libio'\t  \n+\tneed_libio=yes\n+        need_xtra_libio=no\n+        # bkoz XXX need to add checks to enable this\n+        need_wlibio=no\n+      fi\n+      ;;\n+\n+    xwince)\n+      CSTDIO_H=config/c_io_wince.h\n+      CSTDIO_CC=config/c_io_wince.cc\n+      AC_MSG_RESULT(wince)\n+\n+      need_libio=no\n+      BUILD_LIBIO_INCLUDE=\n+      AC_SUBST(BUILD_LIBIO_INCLUDE)\n+      ;;\n+    *)\n+      echo \"$enable_cstdio is an unknown io package\" 1>&2\n+      exit 1\n+      ;;\n   esac\n   AC_LINK_FILES($CSTDIO_H, bits/c++io.h)\n   AC_LINK_FILES($CSTDIO_CC, src/c++io.cc)\n   AM_CONDITIONAL(GLIBCPP_NEED_LIBIO, test \"$need_libio\" = yes)\n+  AM_CONDITIONAL(GLIBCPP_NEED_XTRA_LIBIO, test \"$need_xtra_libio\" = yes)\n   AM_CONDITIONAL(GLIBCPP_NEED_WLIBIO, test \"$need_wlibio\" = yes)\n ])\n \n@@ -1492,7 +1514,7 @@ dnl Then, if any (well almost any) other make is called, and GNU make also\n dnl exists, then the other make wraps the GNU make.\n dnl\n dnl @author John Darrington <j.darrington@elvis.murdoch.edu.au>\n-dnl @version $Id: check_gnu_make.m4,v 1.1 2000/06/15 10:49:36 simons Exp $\n+dnl @version $Id: acinclude.m4,v 1.42 2000/07/17 18:17:33 pme Exp $\n dnl\n dnl #### Changes for libstdc++-v3:  reformatting and linewrapping; prepending\n dnl #### GLIBCPP_ to the macro name; adding the :-make fallback in the"}, {"sha": "8fa8468bd0c1fd44728783a812659d4b7408b377", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 67, "deletions": 45, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -942,6 +942,10 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n \n     dnl At the moment, only enable wchar_t specializations if all the\n     dnl above support is present.\n+    dnl 2000-07-07-bkoz-hack-xxx\n+#    ac_isoC9X_wchar_t=no\n+    dnl 2000-07-07-bkoz-hack-xxx\n+\n     AC_MSG_CHECKING([for enabled wchar_t specializations])\n     if test x\"$ac_isoC9X_wchar_t\" = xyes && test x\"$ac_XPG2_wchar_t\" = xyes; then\n       libinst_wstring_la=\"libinst-wstring.la\"\n@@ -1177,54 +1181,72 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n \n   dnl Check if a valid thread package\n   case x${enable_cstdio_flag} in\n-\txlibio | x | xno | xnone | xyes)\n-\t  # default\n-\t  CSTDIO_H=config/c_io_libio.h\n-\t  CSTDIO_CC=config/c_io_libio.cc\n- \t  AC_MSG_RESULT(libio)\n-\n-\t  # see if we are on a system with libio native (ie, linux)\n-  \t  AC_CHECK_HEADER(libio.h,  has_libio=yes, has_libio=no)\n-\n-\t  # bkoz XXX hack hack need version checks, this is temporary\n-\t  has_libio=no\n-\n-  \t  if test $has_libio = \"yes\"; then\n-   \t    BUILD_LIBIO_INCLUDE=\n-\t    need_libio=no\n-  \t  else\n-   \t  BUILD_LIBIO_INCLUDE='-I../libio'\n-     \t    need_libio=yes\n-  \t  fi\n-  \t  AC_SUBST(BUILD_LIBIO_INCLUDE)\n-\n-\t  # see if the _G_config.h header needs to be built. \n-\t  # NB: This replaces the _G_CONFIG_H machinery in libio-v2\n-\t  AC_CHECK_HEADER(_G_config.h,  has_gconf_h=yes, has_gconf_h=no)\n-  \t  AM_CONDITIONAL(GLIBCPP_NEED_LIBIO_CONFIG_H, test \"$has_gconf_h\" = no)\n-\t  # bkoz XXX hack need to add support for non-glibc systems here\n-\t   has_gconf=no\n-\n-\t  # bkoz XXX need to add checks for this\n-\t  need_wlibio=yes\n-\t  ;;\n-        xwince)\n-    \t  CSTDIO_H=config/c_io_wince.h\n-          CSTDIO_CC=config/c_io_wince.cc\n-          AC_MSG_RESULT(wince)\n-\n-          need_libio=no\n-          BUILD_LIBIO_INCLUDE=\n-          AC_SUBST(BUILD_LIBIO_INCLUDE)\n-          ;;\n-\t*)\n-\t  echo \"$enable_cstdio is an unknown io package\" 1>&2\n-\t  exit 1\n-\t  ;;\n+    xlibio | x | xno | xnone | xyes)\n+      # default\n+      CSTDIO_H=config/c_io_libio.h\n+      CSTDIO_CC=config/c_io_libio.cc\n+      AC_MSG_RESULT(libio)\n+\n+      # see if we are on a system with libio native (ie, linux)\n+      AC_CHECK_HEADER(libio.h,  has_libio=yes, has_libio=no)\n+\n+      # Need to check and see what version of glibc is being used. If\n+      # it's not glibc-2.2 or higher, then we'll need to go ahead and \n+      # compile most of libio for linux systems.\n+      if test x$has_libio = x\"yes\"; then\n+        case \"$target\" in\n+          *-*-linux*)\n+  \t    AC_MSG_CHECKING([for glibc version >= 2.2])\n+  \t    AC_EGREP_CPP([ok], [\n+  \t    #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2) \n+    \t\tok\n+  \t    #endif\n+  \t    ], glibc_satisfactory=yes, glibc_satisfactory=no)\n+  \t    AC_MSG_RESULT($glibc_satisfactory)\n+\t    ;;\n+        esac\n+\n+  \tif test x$glibc_satisfactory = x\"yes\"; then\n+   \t  BUILD_LIBIO_INCLUDE=\n+\t  need_libio=no\n+\t  need_xtra_libio=no\n+      \t  need_wlibio=no\t\n+      \telse\n+\t  BUILD_LIBIO_INCLUDE='-I../libio'\t  \n+\t  need_libio=yes\n+\t  need_xtra_libio=yes\n+          # bkoz XXX need to add checks to enable this\n+          need_wlibio=yes\n+\tfi\n+\n+      # Using libio, but <libio.h> doesn't exist on the target system. . .\n+      else\n+\tBUILD_LIBIO_INCLUDE='-I../libio'\t  \n+\tneed_libio=yes\n+        need_xtra_libio=no\n+        # bkoz XXX need to add checks to enable this\n+        need_wlibio=no\n+      fi\n+      ;;\n+\n+    xwince)\n+      CSTDIO_H=config/c_io_wince.h\n+      CSTDIO_CC=config/c_io_wince.cc\n+      AC_MSG_RESULT(wince)\n+\n+      need_libio=no\n+      BUILD_LIBIO_INCLUDE=\n+      AC_SUBST(BUILD_LIBIO_INCLUDE)\n+      ;;\n+    *)\n+      echo \"$enable_cstdio is an unknown io package\" 1>&2\n+      exit 1\n+      ;;\n   esac\n   AC_LINK_FILES($CSTDIO_H, bits/c++io.h)\n   AC_LINK_FILES($CSTDIO_CC, src/c++io.cc)\n   AM_CONDITIONAL(GLIBCPP_NEED_LIBIO, test \"$need_libio\" = yes)\n+  AM_CONDITIONAL(GLIBCPP_NEED_XTRA_LIBIO, test \"$need_xtra_libio\" = yes)\n   AM_CONDITIONAL(GLIBCPP_NEED_WLIBIO, test \"$need_wlibio\" = yes)\n ])\n \n@@ -1504,7 +1526,7 @@ dnl Then, if any (well almost any) other make is called, and GNU make also\n dnl exists, then the other make wraps the GNU make.\n dnl\n dnl @author John Darrington <j.darrington@elvis.murdoch.edu.au>\n-dnl @version $Id: check_gnu_make.m4,v 1.1 2000/06/15 10:49:36 simons Exp $\n+dnl @version $Id: acinclude.m4,v 1.42 2000/07/17 18:17:33 pme Exp $\n dnl\n dnl #### Changes for libstdc++-v3:  reformatting and linewrapping; prepending\n dnl #### GLIBCPP_ to the macro name; adding the :-make fallback in the"}, {"sha": "949c263672092144fe4429891a9a171d573150d2", "filename": "libstdc++-v3/bits/sstream.tcc", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fsstream.tcc?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -49,22 +49,25 @@ namespace std {\n       \n       // Try to put back __c into input sequence in one of three ways.\n       // Order these tests done in is unspecified by the standard.\n-      if (!__testeof && __testpos \n-\t  && traits_type::eq(traits_type::to_char_type(__c), this->gptr()[-1]))\n+      if (__testpos)\n \t{\n-\t  --_M_in_cur;\n-\t  __retval = __c;\n-\t}\n-      else if (!__testeof && __testpos)\n-\t{\n-\t  --_M_in_cur;\n-\t  *_M_in_cur = traits_type::to_char_type(__c);\n-\t  __retval = __c;\n-\t}\n-      else if (__testeof && __testpos)\n-\t{\n-\t  --_M_in_cur;\n-\t  __retval = traits_type::not_eof(__c);\n+\t  if (traits_type::eq(traits_type::to_char_type(__c), this->gptr()[-1])\n+\t      && !__testeof)\n+\t    {\n+\t      --_M_in_cur;\n+\t      __retval = __c;\n+\t    }\n+\t  else if (!__testeof)\n+\t    {\n+\t      --_M_in_cur;\n+\t      *_M_in_cur = traits_type::to_char_type(__c);\n+\t      __retval = __c;\n+\t    }\n+\t  else if (__testeof)\n+\t    {\n+\t      --_M_in_cur;\n+\t      __retval = traits_type::not_eof(__c);\n+\t    }\n \t}\n       return __retval;\n     }"}, {"sha": "997d37796d68ef91b52d6e32722d25ad7571e2a2", "filename": "libstdc++-v3/bits/std_fstream.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Fbits%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Fbits%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstd_fstream.h?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -48,10 +48,11 @@ namespace std {\n     public:\n       // Types:\n       typedef _CharT                     \t       \t  char_type;\n+      typedef _Traits                    \t\t  traits_type;\n       typedef typename _Traits::int_type \t\t  int_type;\n       typedef typename _Traits::pos_type \t\t  pos_type;\n       typedef typename _Traits::off_type \t\t  off_type;\n-      typedef _Traits                    \t\t  traits_type;\n+\n \n       // Non-standard Types:\n       typedef basic_streambuf<_CharT, _Traits> \t\t  __streambuf_type;\n@@ -69,7 +70,7 @@ namespace std {\n       __state_type\t\t_M_state_cur;// Current state type for codecvt.\n       __state_type \t\t_M_state_beg; \t\n       const __codecvt_type*\t_M_fcvt;       // Cached value from use_facet.\n-      __mutext_type           \t_M_lock;\n+      __c_lock          \t_M_lock;\n       bool\t\t\t_M_last_overflowed;  // XXX Needed?\n  \n     public:"}, {"sha": "6867aa6bad3af866cb51a5c7082169dad3eebbfc", "filename": "libstdc++-v3/config/c_io_libio.cc", "status": "modified", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -39,26 +39,20 @@ namespace std {\n   \n   __basic_file::__basic_file(__c_lock* __lock)\n   {\n+#ifdef _IO_MTSAFE_IO\n     _lock = __lock;\n-    _IO_init(this, 0);     \n-    _IO_file_init((_IO_FILE_plus*) this); \n-    _IO_file_attach(this, -1);\n+#endif\n+    _IO_no_init(this, 0 /* ??? */, -1, 0, 0);\n+    _IO_JUMPS(this) = &_IO_file_jumps;\n+    _IO_file_init((_IO_FILE_plus*)this);\n   }\n \n   int \n   __basic_file::get_fileno(void)\n   { return _fileno; }\n  \n   __basic_file::~__basic_file()\n-  {\n-    if (this->is_open())\n-      {\n-\t_IO_do_flush(this);\n-\tif (!(_flags & _IO_DELETE_DONT_CLOSE))\n-\t  _IO_SYSCLOSE((_IO_FILE*)this);\n-      }\n-    _IO_default_finish(this, 0);\n-  }\n+  { _IO_file_finish(this, 0); }\n       \n   void \n   __basic_file::_M_open_mode(ios_base::openmode __mode, int& __p_mode, \n@@ -116,13 +110,19 @@ namespace std {\n     int __rw_mode = _IO_NO_READS + _IO_NO_WRITES; \n \n     _M_open_mode(__mode, __p_mode, __rw_mode);\n-    if (__fd >= 0)\n+    // _IO_file_attach \n+    //  sets _IO_DELETE_DONT_CLOSE\n+    //  clears _IO_NO_READS + _IO_NO_WRITES\n+    if (_IO_file_attach(this, __fd) != NULL)\n       {\n-\t_fileno = __fd;\n+\t// Set flags appropriately for openmode...\n \tint __mask = _IO_NO_READS + _IO_NO_WRITES + _IO_IS_APPENDING;\n-\t_flags = (_flags & ~__mask) | (__rw_mode & __mask);\n-\t_IO_link_in((_IO_FILE_plus*) this); \n-\t__retval = this;\n+\t_IO_mask_flags(this, __rw_mode, __mask);\n+      }\n+    else\n+      {\n+\t_IO_un_link((_IO_FILE_plus*) this);\n+\t// XXX Extended error checking?? Note that v2 does not even have this.\n       }\n     return __retval;\n   }\n@@ -138,22 +138,11 @@ namespace std {\n     _M_open_mode(__mode, __p_mode, __rw_mode);\n     if (!_IO_file_is_open(this))\n       {\n-#if _G_HAVE_IO_FILE_OPEN\n+\t//#if _G_HAVE_IO_FILE_OPEN\n \t__c_file_type* __f;\n \t__f = _IO_file_open(this, __name, __p_mode, __prot, __rw_mode, 0);\n-\t_flags &= ~_IO_DELETE_DONT_CLOSE;\n+\t//\t_flags &= ~_IO_DELETE_DONT_CLOSE;\n \t__retval = __f ? this: NULL;\n-#else\n-\tint __fd = ::open(__name, __p_mode, __prot);\n-\tif (__fd >= 0)\n-\t  {\n-\t    _fileno = __fd;\t   \n-\t    int __mask = _IO_NO_READS + _IO_NO_WRITES + _IO_IS_APPENDING;\n-\t    _flags = (_flags & ~__mask) | (__rw_mode & __mask);\n-\t    _IO_link_in(this);\n-\t    __retval = this;\n-\t  }\n-#endif      \n       }\n     return __retval;\n   }\n@@ -167,15 +156,18 @@ namespace std {\n \n   // NB: Unused.\n   int \n-  __basic_file::overflow(int __c) { return _IO_file_overflow(this, __c); }\n+  __basic_file::overflow(int __c) \n+  { return _IO_file_overflow(this, __c); }\n \n   // NB: Unused.\n   int \n-  __basic_file::underflow()  { return _IO_file_underflow(this); }\n+  __basic_file::underflow()  \n+  { return _IO_file_underflow(this); }\n \n   // NB: Unused.\n   int \n-  __basic_file::uflow()  { return _IO_default_uflow(this); }\n+  __basic_file::uflow()  \n+  { return _IO_default_uflow(this); }\n   \n   // NB: Unused.\n   int \n@@ -188,7 +180,7 @@ namespace std {\n   \n   streamsize \n   __basic_file::xsgetn(char* __s, streamsize __n)\n-  { return _IO_default_xsgetn(this, __s, __n); }\n+  { return _IO_file_xsgetn(this, __s, __n); }\n \n   streamoff\n   __basic_file::seekoff(streamoff __off, ios_base::seekdir __way, \n@@ -230,11 +222,13 @@ namespace std {\n   \n   // NB: Unused.\n   int \n-  __basic_file::sys_close() { return _IO_file_close(this); }\n+  __basic_file::sys_close() \n+  { return _IO_file_close(this); }\n \n   // NB: Unused.\n   int \n-  __basic_file::sys_stat(void* __v) { return _IO_file_stat(this, __v); }\n+  __basic_file::sys_stat(void* __v) \n+  { return _IO_file_stat(this, __v); }\n \n   // NB: Unused.\n   int "}, {"sha": "8337eecbe9cebbc84a54de2c05d5429d867d988e", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 118, "deletions": 116, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -2206,14 +2206,14 @@ fi\n   enable_cstdio_flag=$enable_cstdio\n \n     case x${enable_cstdio_flag} in\n-\txlibio | x | xno | xnone | xyes)\n-\t  # default\n-\t  CSTDIO_H=config/c_io_libio.h\n-\t  CSTDIO_CC=config/c_io_libio.cc\n- \t  echo \"$ac_t\"\"libio\" 1>&6\n-\n-\t  # see if we are on a system with libio native (ie, linux)\n-  \t  ac_safe=`echo \"libio.h\" | sed 'y%./+-%__p_%'`\n+    xlibio | x | xno | xnone | xyes)\n+      # default\n+      CSTDIO_H=config/c_io_libio.h\n+      CSTDIO_CC=config/c_io_libio.cc\n+      echo \"$ac_t\"\"libio\" 1>&6\n+\n+      # see if we are on a system with libio native (ie, linux)\n+      ac_safe=`echo \"libio.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for libio.h\"\"... $ac_c\" 1>&6\n echo \"configure:2219: checking for libio.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n@@ -2248,82 +2248,73 @@ has_libio=no\n fi\n \n \n-\t  # bkoz XXX hack hack need version checks, this is temporary\n-\t  has_libio=no\n-\n-  \t  if test $has_libio = \"yes\"; then\n-   \t    BUILD_LIBIO_INCLUDE=\n-\t    need_libio=no\n-  \t  else\n-   \t  BUILD_LIBIO_INCLUDE='-I../libio'\n-     \t    need_libio=yes\n-  \t  fi\n-  \t  \n-\n-\t  # see if the _G_config.h header needs to be built. \n-\t  # NB: This replaces the _G_CONFIG_H machinery in libio-v2\n-\t  ac_safe=`echo \"_G_config.h\" | sed 'y%./+-%__p_%'`\n-echo $ac_n \"checking for _G_config.h\"\"... $ac_c\" 1>&6\n-echo \"configure:2268: checking for _G_config.h\" >&5\n-if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n-  echo $ac_n \"(cached) $ac_c\" 1>&6\n-else\n-  cat > conftest.$ac_ext <<EOF\n-#line 2273 \"configure\"\n+      # Need to check and see what version of glibc is being used. If\n+      # it's not glibc-2.2 or higher, then we'll need to go ahead and \n+      # compile most of libio for linux systems.\n+      if test x$has_libio = x\"yes\"; then\n+        case \"$target\" in\n+          *-*-linux*)\n+  \t    echo $ac_n \"checking for glibc version >= 2.2\"\"... $ac_c\" 1>&6\n+echo \"configure:2259: checking for glibc version >= 2.2\" >&5\n+  \t    cat > conftest.$ac_ext <<EOF\n+#line 2261 \"configure\"\n #include \"confdefs.h\"\n-#include <_G_config.h>\n+\n+  \t    #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2) \n+    \t\tok\n+  \t    #endif\n+  \t    \n EOF\n-ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:2278: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n-ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n-if test -z \"$ac_err\"; then\n+if (eval \"$ac_cpp conftest.$ac_ext\") 2>&5 |\n+  egrep \"ok\" >/dev/null 2>&1; then\n   rm -rf conftest*\n-  eval \"ac_cv_header_$ac_safe=yes\"\n+  glibc_satisfactory=yes\n else\n-  echo \"$ac_err\" >&5\n-  echo \"configure: failed program was:\" >&5\n-  cat conftest.$ac_ext >&5\n   rm -rf conftest*\n-  eval \"ac_cv_header_$ac_safe=no\"\n+  glibc_satisfactory=no\n fi\n rm -f conftest*\n-fi\n-if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n-  echo \"$ac_t\"\"yes\" 1>&6\n-  has_gconf_h=yes\n-else\n-  echo \"$ac_t\"\"no\" 1>&6\n-has_gconf_h=no\n-fi\n \n-  \t  \n+  \t    echo \"$ac_t\"\"$glibc_satisfactory\" 1>&6\n+\t    ;;\n+        esac\n \n-if test \"$has_gconf_h\" = no; then\n-  GLIBCPP_NEED_LIBIO_CONFIG_H_TRUE=\n-  GLIBCPP_NEED_LIBIO_CONFIG_H_FALSE='#'\n-else\n-  GLIBCPP_NEED_LIBIO_CONFIG_H_TRUE='#'\n-  GLIBCPP_NEED_LIBIO_CONFIG_H_FALSE=\n-fi\n-\t  # bkoz XXX hack need to add support for non-glibc systems here\n-\t   has_gconf=no\n+  \tif test x$glibc_satisfactory = x\"yes\"; then\n+   \t  BUILD_LIBIO_INCLUDE=\n+\t  need_libio=no\n+\t  need_xtra_libio=no\n+      \t  need_wlibio=no\t\n+      \telse\n+\t  BUILD_LIBIO_INCLUDE='-I../libio'\t  \n+\t  need_libio=yes\n+\t  need_xtra_libio=yes\n+          # bkoz XXX need to add checks to enable this\n+          need_wlibio=yes\n+\tfi\n \n-\t  # bkoz XXX need to add checks for this\n-\t  need_wlibio=yes\n-\t  ;;\n-        xwince)\n-    \t  CSTDIO_H=config/c_io_wince.h\n-          CSTDIO_CC=config/c_io_wince.cc\n-          echo \"$ac_t\"\"wince\" 1>&6\n+      # Using libio, but <libio.h> doesn't exist on the target system. . .\n+      else\n+\tBUILD_LIBIO_INCLUDE='-I../libio'\t  \n+\tneed_libio=yes\n+        need_xtra_libio=no\n+        # bkoz XXX need to add checks to enable this\n+        need_wlibio=no\n+      fi\n+      ;;\n \n-          need_libio=no\n-          BUILD_LIBIO_INCLUDE=\n-          \n-          ;;\n-\t*)\n-\t  echo \"$enable_cstdio is an unknown io package\" 1>&2\n-\t  exit 1\n-\t  ;;\n+    xwince)\n+      CSTDIO_H=config/c_io_wince.h\n+      CSTDIO_CC=config/c_io_wince.cc\n+      echo \"$ac_t\"\"wince\" 1>&6\n+\n+      need_libio=no\n+      BUILD_LIBIO_INCLUDE=\n+      \n+      ;;\n+    *)\n+      echo \"$enable_cstdio is an unknown io package\" 1>&2\n+      exit 1\n+      ;;\n   esac\n   \n   \n@@ -2338,6 +2329,15 @@ else\n fi\n   \n \n+if test \"$need_xtra_libio\" = yes; then\n+  GLIBCPP_NEED_XTRA_LIBIO_TRUE=\n+  GLIBCPP_NEED_XTRA_LIBIO_FALSE='#'\n+else\n+  GLIBCPP_NEED_XTRA_LIBIO_TRUE='#'\n+  GLIBCPP_NEED_XTRA_LIBIO_FALSE=\n+fi\n+  \n+\n if test \"$need_wlibio\" = yes; then\n   GLIBCPP_NEED_WLIBIO_TRUE=\n   GLIBCPP_NEED_WLIBIO_FALSE='#'\n@@ -16131,8 +16131,10 @@ echo \"configure:16127: checking for XPG2 wchar_t support\" >&5\n     fi\n     echo \"$ac_t\"\"$ac_XPG2_wchar_t\" 1>&6\n \n-            echo $ac_n \"checking for enabled wchar_t specializations\"\"... $ac_c\" 1>&6\n-echo \"configure:16136: checking for enabled wchar_t specializations\" >&5\n+            #    ac_isoC9X_wchar_t=no\n+    \n+    echo $ac_n \"checking for enabled wchar_t specializations\"\"... $ac_c\" 1>&6\n+echo \"configure:16138: checking for enabled wchar_t specializations\" >&5\n     if test x\"$ac_isoC9X_wchar_t\" = xyes && test x\"$ac_XPG2_wchar_t\" = xyes; then\n       libinst_wstring_la=\"libinst-wstring.la\"\n       cat >> confdefs.h <<\\EOF\n@@ -16157,17 +16159,17 @@ EOF\n   \n   ac_safe=`echo \"ctype.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for ctype.h\"\"... $ac_c\" 1>&6\n-echo \"configure:16161: checking for ctype.h\" >&5\n+echo \"configure:16163: checking for ctype.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 16166 \"configure\"\n+#line 16168 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:16171: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:16173: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -16188,9 +16190,9 @@ if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n         ctype_default=yes\n \n         echo $ac_n \"checking <ctype> for gnu-linux \"\"... $ac_c\" 1>&6\n-echo \"configure:16192: checking <ctype> for gnu-linux \" >&5\n+echo \"configure:16194: checking <ctype> for gnu-linux \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 16194 \"configure\"\n+#line 16196 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -16201,7 +16203,7 @@ int\n \t+ __ctype_tolower[a] + __ctype_toupper[a] + __ctype_b[a];}\n ; return 0; }\n EOF\n-if { (eval echo configure:16205: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:16207: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_linux=yes\n@@ -16220,9 +16222,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for freebsd 4.0 \"\"... $ac_c\" 1>&6\n-echo \"configure:16224: checking <ctype> for freebsd 4.0 \" >&5\n+echo \"configure:16226: checking <ctype> for freebsd 4.0 \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 16226 \"configure\"\n+#line 16228 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -16232,7 +16234,7 @@ int\n \t+ _CTYPE_D + _CTYPE_P + _CTYPE_X + _CTYPE_G ;}\n ; return 0; }\n EOF\n-if { (eval echo configure:16236: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:16238: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_bsd=yes\n@@ -16252,9 +16254,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for freebsd 3.4 \"\"... $ac_c\" 1>&6\n-echo \"configure:16256: checking <ctype> for freebsd 3.4 \" >&5\n+echo \"configure:16258: checking <ctype> for freebsd 3.4 \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 16258 \"configure\"\n+#line 16260 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -16264,7 +16266,7 @@ int\n       + _D + _P + _X + _G + __istype (a, 0);}\n ; return 0; }\n EOF\n-if { (eval echo configure:16268: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:16270: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_freebsd34=yes\n@@ -16284,9 +16286,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for solaris 2.6,7,8 \"\"... $ac_c\" 1>&6\n-echo \"configure:16288: checking <ctype> for solaris 2.6,7,8 \" >&5\n+echo \"configure:16290: checking <ctype> for solaris 2.6,7,8 \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 16290 \"configure\"\n+#line 16292 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -16297,7 +16299,7 @@ int\n \t+ __trans_lower[a] + __trans_upper[a] + __ctype_mask[a];}\n ; return 0; }\n EOF\n-if { (eval echo configure:16301: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:16303: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_solaris=yes\n@@ -16312,7 +16314,7 @@ rm -f conftest*\n \n     if test $ctype_solaris = \"yes\"; then\n       echo $ac_n \"checking   for version\"\"... $ac_c\" 1>&6\n-echo \"configure:16316: checking   for version\" >&5\n+echo \"configure:16318: checking   for version\" >&5\n       ac_ext=C\n # CXXFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.\n ac_cpp='$CXXCPP $CPPFLAGS'\n@@ -16321,14 +16323,14 @@ ac_link='${CXX-g++} -o conftest${ac_exeext} $CXXFLAGS $CPPFLAGS $LDFLAGS conftes\n cross_compiling=$ac_cv_prog_cxx_cross\n  \n       cat > conftest.$ac_ext <<EOF\n-#line 16325 \"configure\"\n+#line 16327 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n typedef long* __to_type; __to_type const& _M_toupper = __trans_upper;\n ; return 0; }\n EOF\n-if { (eval echo configure:16332: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:16334: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n       ctype_solaris26=yes\n@@ -16360,9 +16362,9 @@ cross_compiling=$ac_cv_prog_cc_cross\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for solaris 2.5.1 \"\"... $ac_c\" 1>&6\n-echo \"configure:16364: checking <ctype> for solaris 2.5.1 \" >&5\n+echo \"configure:16366: checking <ctype> for solaris 2.5.1 \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 16366 \"configure\"\n+#line 16368 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -16372,7 +16374,7 @@ int\n \t+ __ctype[a];}\n ; return 0; }\n EOF\n-if { (eval echo configure:16376: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:16378: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_solaris25=yes\n@@ -16392,9 +16394,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for aix \"\"... $ac_c\" 1>&6\n-echo \"configure:16396: checking <ctype> for aix \" >&5\n+echo \"configure:16398: checking <ctype> for aix \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 16398 \"configure\"\n+#line 16400 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -16405,7 +16407,7 @@ int\n \t+ _VALC('a') + _IS('c', 0);}\n ; return 0; }\n EOF\n-if { (eval echo configure:16409: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:16411: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_aix=yes\n@@ -16425,9 +16427,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for newlib \"\"... $ac_c\" 1>&6\n-echo \"configure:16429: checking <ctype> for newlib \" >&5\n+echo \"configure:16431: checking <ctype> for newlib \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 16431 \"configure\"\n+#line 16433 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -16437,7 +16439,7 @@ int\n \t+ _ctype_[a];}\n ; return 0; }\n EOF\n-if { (eval echo configure:16441: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:16443: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_newlib=yes\n@@ -16471,17 +16473,17 @@ fi\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n-echo \"configure:16475: checking for $ac_hdr\" >&5\n+echo \"configure:16477: checking for $ac_hdr\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 16480 \"configure\"\n+#line 16482 \"configure\"\n #include \"confdefs.h\"\n #include <$ac_hdr>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:16485: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:16487: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -16510,12 +16512,12 @@ done\n for ac_func in getpagesize\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:16514: checking for $ac_func\" >&5\n+echo \"configure:16516: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 16519 \"configure\"\n+#line 16521 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -16538,7 +16540,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:16542: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:16544: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -16563,15 +16565,15 @@ fi\n done\n \n echo $ac_n \"checking for working mmap\"\"... $ac_c\" 1>&6\n-echo \"configure:16567: checking for working mmap\" >&5\n+echo \"configure:16569: checking for working mmap\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_mmap_fixed_mapped'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   if test \"$cross_compiling\" = yes; then\n   ac_cv_func_mmap_fixed_mapped=no\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 16575 \"configure\"\n+#line 16577 \"configure\"\n #include \"confdefs.h\"\n \n /* Thanks to Mike Haertel and Jim Avera for this test.\n@@ -16711,7 +16713,7 @@ main()\n }\n \n EOF\n-if { (eval echo configure:16715: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:16717: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_func_mmap_fixed_mapped=yes\n else\n@@ -16774,19 +16776,19 @@ fi\n \n if test $ac_cv_header_locale_h = yes; then\n     echo $ac_n \"checking for LC_MESSAGES\"\"... $ac_c\" 1>&6\n-echo \"configure:16778: checking for LC_MESSAGES\" >&5\n+echo \"configure:16780: checking for LC_MESSAGES\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_val_LC_MESSAGES'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 16783 \"configure\"\n+#line 16785 \"configure\"\n #include \"confdefs.h\"\n #include <locale.h>\n int main() {\n return LC_MESSAGES\n ; return 0; }\n EOF\n-if { (eval echo configure:16790: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:16792: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   ac_cv_val_LC_MESSAGES=yes\n else\n@@ -17002,10 +17004,10 @@ s%@cpu_include_dir@%$cpu_include_dir%g\n s%@CPU_FLAGS@%$CPU_FLAGS%g\n s%@DEBUG_FLAGS@%$DEBUG_FLAGS%g\n s%@BUILD_LIBIO_INCLUDE@%$BUILD_LIBIO_INCLUDE%g\n-s%@GLIBCPP_NEED_LIBIO_CONFIG_H_TRUE@%$GLIBCPP_NEED_LIBIO_CONFIG_H_TRUE%g\n-s%@GLIBCPP_NEED_LIBIO_CONFIG_H_FALSE@%$GLIBCPP_NEED_LIBIO_CONFIG_H_FALSE%g\n s%@GLIBCPP_NEED_LIBIO_TRUE@%$GLIBCPP_NEED_LIBIO_TRUE%g\n s%@GLIBCPP_NEED_LIBIO_FALSE@%$GLIBCPP_NEED_LIBIO_FALSE%g\n+s%@GLIBCPP_NEED_XTRA_LIBIO_TRUE@%$GLIBCPP_NEED_XTRA_LIBIO_TRUE%g\n+s%@GLIBCPP_NEED_XTRA_LIBIO_FALSE@%$GLIBCPP_NEED_XTRA_LIBIO_FALSE%g\n s%@GLIBCPP_NEED_WLIBIO_TRUE@%$GLIBCPP_NEED_WLIBIO_TRUE%g\n s%@GLIBCPP_NEED_WLIBIO_FALSE@%$GLIBCPP_NEED_WLIBIO_FALSE%g\n s%@CSHADOWFLAGS@%$CSHADOWFLAGS%g"}, {"sha": "5e59e82b8828164de0b87540e8b37a59a82082e6", "filename": "libstdc++-v3/libio/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FChangeLog?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -1,3 +1,7 @@\n+2000-07-12  benjamin kosnik  <bkoz@haight.constant.com>\n+\n+\t* _G_config.h: Smoke less crack, don't define _G_HAVE_ST_BLKSIZE.\n+\n 2000-04-25  Benjamin Kosnik  <bkoz@haight.constant.com>\n \n \t* libio.h: Change decls for seekoff/seekpos."}, {"sha": "dd1c768d44646b9c24bec50a88de01ee24b6341b", "filename": "libstdc++-v3/libio/Makefile.am", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.am?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -35,13 +35,31 @@ CONFIG_INCLUDES = \\\n \t-I$(top_srcdir)/@ctype_include_dir@\n \n INCLUDES = \\\n-\t-D_GNU_SOURCE -nostdinc++ -I$(top_srcdir) \\\n+\t-nostdinc++ -I$(top_srcdir) \\\n \t$(LIBIO_INCLUDES) $(CONFIG_INCLUDES) $(CSHADOW_INCLUDES) \\\n \t$(TOPLEVEL_INCLUDES)\t\n \n noinst_LTLIBRARIES = libio.la\n \n-LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n+# These bits are all figured out from configure. Look in acinclude.m4\n+# or configure.in to see how they are set.\n+# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n+AC_CFLAGS = \\\n+\t$(WERROR) @CPU_FLAGS@ @DEBUG_FLAGS@ \n+\n+# Need to manually set this option because AC_CXXFLAGS has to be at\n+# the end of the compile line so that -O2 can be overridden as the\n+# occasion call for it. (ie, --enable-debug)\n+AM_CFLAGS = \\\n+\t-D_GNU_SOURCE $(AC_CFLAGS) \n+\n+COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(CFLAGS) \\\n+\t$(AM_CFLAGS) \n+\n+LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) \\\n+\t$(AM_CPPFLAGS) \\$(CPPFLAGS)  $(CFLAGS) $(AM_CFLAGS)\n+\n+LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(CFLAGS) $(AM_CFLAGS) $(LDFLAGS) -o $@\n \n #includes = \n \n@@ -62,10 +80,17 @@ else\n LIBIO_WSRCS =\n endif\n \n+if GLIBCPP_NEED_XTRA_LIBIO\n+LIBIO_XTRASRCS = \\\n+\tiofclose.c iofopen.c stdio.c\n+else\n+LIBIO_XTRASRCS =\n+endif\n+\n \n EXTRA_DIST = iostreamP.h\n \n-libio_la_LIBADD = $(LIBIO_SRCS) $(LIBIO_WSRCS) \n+libio_la_LIBADD = $(LIBIO_SRCS) $(LIBIO_WSRCS) $(LIBIO_XTRASRCS)\n libio_la_DEPENDENCIES = $(libio_la_LIBADD)\n-libio_la_SOURCES = $(LIBIO_SRCS) $(LIBIO_WSRCS) \n+libio_la_SOURCES = $(LIBIO_SRCS) $(LIBIO_WSRCS) $(LIBIO_XTRASRCS)\n "}, {"sha": "9f56f6ba88e6ab4fc7d14f125ac93be4a4ba6c75", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 86, "deletions": 27, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -102,6 +102,7 @@ WFMT_FLAGS = @WFMT_FLAGS@\n cpu_include_dir = @cpu_include_dir@\n ctype_include_dir = @ctype_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n+ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus\n@@ -119,14 +120,36 @@ CONFIG_INCLUDES = \\\n \n \n INCLUDES = \\\n-\t-D_GNU_SOURCE -nostdinc++ -I$(top_srcdir) \\\n+\t-nostdinc++ -I$(top_srcdir) \\\n \t$(LIBIO_INCLUDES) $(CONFIG_INCLUDES) $(CSHADOW_INCLUDES) \\\n \t$(TOPLEVEL_INCLUDES)\t\n \n \n noinst_LTLIBRARIES = libio.la\n \n-LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n+# These bits are all figured out from configure. Look in acinclude.m4\n+# or configure.in to see how they are set.\n+# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n+AC_CFLAGS = \\\n+\t$(WERROR) @CPU_FLAGS@ @DEBUG_FLAGS@ \n+\n+\n+# Need to manually set this option because AC_CXXFLAGS has to be at\n+# the end of the compile line so that -O2 can be overridden as the\n+# occasion call for it. (ie, --enable-debug)\n+AM_CFLAGS = \\\n+\t-D_GNU_SOURCE $(AC_CFLAGS) \n+\n+\n+COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(CFLAGS) \\\n+\t$(AM_CFLAGS) \n+\n+\n+LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) \\\n+\t$(AM_CPPFLAGS) \\$(CPPFLAGS)  $(CFLAGS) $(AM_CFLAGS)\n+\n+\n+LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(CFLAGS) $(AM_CFLAGS) $(LDFLAGS) -o $@\n \n #includes = \n \n@@ -139,12 +162,15 @@ libio_headers = \\\n @GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n @GLIBCPP_NEED_WLIBIO_TRUE@\tiofwide.c wfiledoalloc.c wfileops.c wgenops.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n+@GLIBCPP_NEED_XTRA_LIBIO_TRUE@LIBIO_XTRASRCS = @GLIBCPP_NEED_XTRA_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_XTRA_LIBIO_TRUE@\tiofclose.c iofopen.c stdio.c\n+@GLIBCPP_NEED_XTRA_LIBIO_FALSE@LIBIO_XTRASRCS = \n \n EXTRA_DIST = iostreamP.h\n \n-libio_la_LIBADD = $(LIBIO_SRCS) $(LIBIO_WSRCS) \n+libio_la_LIBADD = $(LIBIO_SRCS) $(LIBIO_WSRCS) $(LIBIO_XTRASRCS)\n libio_la_DEPENDENCIES = $(libio_la_LIBADD)\n-libio_la_SOURCES = $(LIBIO_SRCS) $(LIBIO_WSRCS) \n+libio_la_SOURCES = $(LIBIO_SRCS) $(LIBIO_WSRCS) $(LIBIO_XTRASRCS)\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -156,30 +182,63 @@ CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n libio_la_LDFLAGS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@libio_la_OBJECTS =  \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@filedoalloc.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@genops.lo fileops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@stdfiles.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@cleanup.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@iofwide.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@wfiledoalloc.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@wfileops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@wgenops.lo\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@libio_la_OBJECTS =  \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@iofwide.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@wfiledoalloc.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@wfileops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@wgenops.lo\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@libio_la_OBJECTS =  \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@filedoalloc.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@genops.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@fileops.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@stdfiles.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@cleanup.lo\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@libio_la_OBJECTS = \n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@filedoalloc.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@genops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@fileops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdfiles.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@cleanup.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofwide.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wfiledoalloc.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wfileops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wgenops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofclose.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofopen.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdio.lo\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@libio_la_OBJECTS = \n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@iofwide.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wfiledoalloc.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wfileops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wgenops.lo\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@filedoalloc.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@genops.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@fileops.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@stdfiles.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@cleanup.lo\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofclose.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofopen.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdio.lo\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@filedoalloc.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@genops.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@fileops.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdfiles.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@cleanup.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofclose.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofopen.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdio.lo\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofwide.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wfiledoalloc.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wfileops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wgenops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofclose.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofopen.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdio.lo\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@filedoalloc.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@genops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@fileops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@stdfiles.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@cleanup.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@iofwide.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wfiledoalloc.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wfileops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wgenops.lo\n CFLAGS = @CFLAGS@\n-COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n-LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n CCLD = $(CC)\n DIST_COMMON =  ChangeLog Makefile.am Makefile.in\n "}, {"sha": "19ab4fc90a04779544e9a07dfa8b58d0b3e06ad3", "filename": "libstdc++-v3/libio/_G_config.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2F_G_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2F_G_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2F_G_config.h?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -6,6 +6,7 @@\n \n #ifndef _LIBC\n # include <bits/c++config.h>\n+# define _IO_MTSAFE_IO\n #endif\n \n /* Define types for libio in terms of the standard internal type names.  */\n@@ -107,7 +108,7 @@ typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));\n //#define _G_FSTAT64(fd,buf) __fxstat64 (_STAT_VER, fd, buf)\n \n /* This is defined by <bits/stat.h> if `st_blksize' exists.  */\n-#define _G_HAVE_ST_BLKSIZE defined (_STATBUF_ST_BLKSIZE)\n+/*#define _G_HAVE_ST_BLKSIZE defined (_STATBUF_ST_BLKSIZE)*/\n \n #define _G_BUFSIZ 8192\n \n@@ -119,7 +120,8 @@ typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));\n #define _G_VTABLE_LABEL_PREFIX_ID __vt_\n \n #define _G_INTERNAL_CCS\t\"UCS4\"\n-\n+#define _G_HAVE_WEAK_SYMBOL 1\n+#define _G_STDIO_USES_LIBIO 1\n \n #if defined __cplusplus || defined __STDC__\n # define _G_ARGS(ARGLIST) ARGLIST"}, {"sha": "c27f314d44e91e337a590cfba4979da00f2abc44", "filename": "libstdc++-v3/libio/genops.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2Fgenops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2Fgenops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fgenops.c?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -976,11 +976,9 @@ _IO_default_pbackfail (fp, c)\n \t  new_buf = (char *) malloc (new_size);\n \t  if (new_buf == NULL)\n \t    return EOF;\n-\t  memcpy (new_buf + (new_size - old_size), fp->_IO_read_base,\n-\t\t  old_size);\n+\t  memcpy (new_buf + old_size, fp->_IO_read_base, old_size);\n \t  free (fp->_IO_read_base);\n-\t  _IO_setg (fp, new_buf, new_buf + (new_size - old_size),\n-\t\t    new_buf + new_size);\n+\t  _IO_setg (fp, new_buf, new_buf + old_size, new_buf + new_size);\n \t  fp->_IO_backup_base = fp->_IO_read_ptr;\n \t}\n "}, {"sha": "3d5724a4a3fdea3357a7b158fb7364fcc31157c4", "filename": "libstdc++-v3/libio/iofclose.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2Fiofclose.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2Fiofclose.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fiofclose.c?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -0,0 +1,98 @@\n+/* Copyright (C) 1993, 1995, 1997-1999, 2000 Free Software Foundation, Inc.\n+   This file is part of the GNU IO Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU General Public License as\n+   published by the Free Software Foundation; either version 2, or (at\n+   your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this library; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+   MA 02111-1307, USA.\n+\n+   As a special exception, if you link this library with files\n+   compiled with a GNU compiler to produce an executable, this does\n+   not cause the resulting executable to be covered by the GNU General\n+   Public License.  This exception does not however invalidate any\n+   other reasons why the executable file might be covered by the GNU\n+   General Public License.  */\n+\n+#include \"libioP.h\"\n+#ifdef __STDC__\n+#include <stdlib.h>\n+#endif\n+#if _LIBC\n+# include \"../iconv/gconv_int.h\"\n+# include <shlib-compat.h>\n+#else\n+# define SHLIB_COMPAT(a, b, c) 0\n+#endif\n+\n+int\n+_IO_new_fclose (fp)\n+     _IO_FILE *fp;\n+{\n+  int status;\n+\n+  CHECK_FILE(fp, EOF);\n+\n+#if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_1)\n+  /* We desperately try to help programs which are using streams in a\n+     strange way and mix old and new functions.  Detect old streams\n+     here.  */\n+  if (fp->_vtable_offset != 0)\n+    return _IO_old_fclose (fp);\n+#endif\n+\n+  _IO_cleanup_region_start ((void (*) __P ((void *))) _IO_funlockfile, fp);\n+  _IO_flockfile (fp);\n+  if (fp->_IO_file_flags & _IO_IS_FILEBUF)\n+    status = _IO_file_close_it (fp);\n+  else\n+    status = fp->_flags & _IO_ERR_SEEN ? -1 : 0;\n+  _IO_FINISH (fp);\n+  _IO_funlockfile (fp);\n+  if (fp->_mode > 0)\n+    {\n+#if _LIBC\n+      /* This stream has a wide orientation.  This means we have to free\n+\t the conversion functions.  */\n+      struct _IO_codecvt *cc = &fp->_wide_data->_codecvt;\n+\n+      if (cc->__cd_in.__cd.__steps->__shlib_handle != NULL)\n+\t{\n+\t  --cc->__cd_in.__cd.__steps->__counter;\n+\t  __gconv_close_transform (cc->__cd_in.__cd.__steps, 1);\n+\t}\n+      if (cc->__cd_out.__cd.__steps->__shlib_handle != NULL)\n+\t{\n+\t  --cc->__cd_out.__cd.__steps->__counter;\n+\t  __gconv_close_transform (cc->__cd_out.__cd.__steps, 1);\n+\t}\n+#endif\n+    }\n+  _IO_cleanup_region_end (0);\n+  if (_IO_have_backup (fp))\n+    _IO_free_backup_area (fp);\n+  if (fp != _IO_stdin && fp != _IO_stdout && fp != _IO_stderr)\n+    {\n+      fp->_IO_file_flags = 0;\n+      free(fp);\n+    }\n+\n+  return status;\n+}\n+\n+#ifdef _LIBC\n+versioned_symbol (libc, _IO_new_fclose, _IO_fclose, GLIBC_2_1);\n+strong_alias (_IO_new_fclose, __new_fclose)\n+versioned_symbol (libc, __new_fclose, fclose, GLIBC_2_1);\n+#else\n+int fclose (_IO_FILE *) __attribute__ ((alias(\"_IO_new_fclose\")));\n+#endif"}, {"sha": "eb54e6de7fbaf4626118e336a727a77af4cafc02", "filename": "libstdc++-v3/libio/iofopen.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2Fiofopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2Fiofopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fiofopen.c?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -0,0 +1,77 @@\n+/* Copyright (C) 1993, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   This file is part of the GNU IO Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU General Public License as\n+   published by the Free Software Foundation; either version 2, or (at\n+   your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this library; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+   MA 02111-1307, USA.\n+\n+   As a special exception, if you link this library with files\n+   compiled with a GNU compiler to produce an executable, this does\n+   not cause the resulting executable to be covered by the GNU General\n+   Public License.  This exception does not however invalidate any\n+   other reasons why the executable file might be covered by the GNU\n+   General Public License.  */\n+\n+#include \"libioP.h\"\n+#ifdef __STDC__\n+#include <stdlib.h>\n+#endif\n+#ifdef _LIBC\n+# include <shlib-compat.h>\n+#endif\n+\n+_IO_FILE *\n+_IO_new_fopen (filename, mode)\n+     const char *filename;\n+     const char *mode;\n+{\n+  struct locked_FILE\n+  {\n+    struct _IO_FILE_plus fp;\n+#ifdef _IO_MTSAFE_IO\n+    _IO_lock_t lock;\n+#endif\n+    struct _IO_wide_data wd;\n+  } *new_f = (struct locked_FILE *) malloc (sizeof (struct locked_FILE));\n+\n+  if (new_f == NULL)\n+    return NULL;\n+#ifdef _IO_MTSAFE_IO\n+  new_f->fp.file._lock = &new_f->lock;\n+#endif\n+#if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T\n+  _IO_no_init (&new_f->fp.file, 0, 0, &new_f->wd, &_IO_wfile_jumps);\n+#else\n+  _IO_no_init (&new_f->fp.file, 1, 0, NULL, NULL);\n+#endif\n+  _IO_JUMPS (&new_f->fp) = &_IO_file_jumps;\n+  _IO_file_init (&new_f->fp);\n+#if  !_IO_UNIFIED_JUMPTABLES\n+  new_f->fp.vtable = NULL;\n+#endif\n+  if (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, 1) != NULL)\n+    return (_IO_FILE *) &new_f->fp;\n+  _IO_un_link (&new_f->fp);\n+  free (new_f);\n+  return NULL;\n+}\n+\n+#ifdef _LIBC\n+strong_alias (_IO_new_fopen, __new_fopen)\n+versioned_symbol (libc, _IO_new_fopen, _IO_fopen, GLIBC_2_1);\n+versioned_symbol (libc, __new_fopen, fopen, GLIBC_2_1);\n+#else\n+int fopen (const char *,const char *)\n+     __attribute__ ((alias(\"_IO_new_fopen\")));\n+#endif"}, {"sha": "e9fb03e3e5bf463039c6f9ec259a9afac83693e4", "filename": "libstdc++-v3/libio/libio.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2Flibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2Flibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Flibio.h?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -310,6 +310,9 @@ struct _IO_FILE_complete\n   /* Wide character stream stuff.  */\n   struct _IO_codecvt *_codecvt;\n   struct _IO_wide_data *_wide_data;\n+# else\n+  void *__pad1;\n+  void *__pad2;\n # endif\n   int _mode;\n   /* Make sure we don't get into trouble again.  */"}, {"sha": "b81fef8b883009e7f9187a59dd19c1d0fc268ad6", "filename": "libstdc++-v3/libio/stdfiles.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2Fstdfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2Fstdfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fstdfiles.c?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -31,12 +31,9 @@\n    hand, we don't need a C++ compiler to build this file.) */\n \n #include \"libioP.h\"\n-#ifndef _LIBC\n-# include <bits/c++config.h>\n-#endif\n \n-#if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T\n-# ifdef _IO_MTSAFE_IO\n+#ifdef _IO_MTSAFE_IO\n+# if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T\n #  define DEF_STDFILE(NAME, FD, CHAIN, FLAGS) \\\n   static _IO_lock_t _IO_stdfile_##FD##_lock = _IO_lock_initializer; \\\n   static struct _IO_wide_data _IO_wide_data_##FD \\\n@@ -46,18 +43,18 @@\n        &_IO_file_jumps};\n # else\n #  define DEF_STDFILE(NAME, FD, CHAIN, FLAGS) \\\n-  static struct _IO_wide_data _IO_wide_data_##FD \\\n-    = { ._wide_vtable = &_IO_wfile_jumps }; \\\n+  static _IO_lock_t _IO_stdfile_##FD##_lock = _IO_lock_initializer; \\\n   struct _IO_FILE_plus NAME \\\n-    = {FILEBUF_LITERAL(CHAIN, FLAGS, FD, &_IO_wide_data_##FD), \\\n+    = {FILEBUF_LITERAL(CHAIN, FLAGS, FD, NULL), \\\n        &_IO_file_jumps};\n # endif\n #else\n-# ifdef _IO_MTSAFE_IO\n+# if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T\n #  define DEF_STDFILE(NAME, FD, CHAIN, FLAGS) \\\n-  static _IO_lock_t _IO_stdfile_##FD##_lock = _IO_lock_initializer; \\\n+  static struct _IO_wide_data _IO_wide_data_##FD \\\n+    = { ._wide_vtable = &_IO_wfile_jumps }; \\\n   struct _IO_FILE_plus NAME \\\n-    = {FILEBUF_LITERAL(CHAIN, FLAGS, FD, NULL), \\\n+    = {FILEBUF_LITERAL(CHAIN, FLAGS, FD, &_IO_wide_data_##FD), \\\n        &_IO_file_jumps};\n # else\n #  define DEF_STDFILE(NAME, FD, CHAIN, FLAGS) \\"}, {"sha": "95829d6fe28f31f9b89a3e8c29ab3e2920f03d9f", "filename": "libstdc++-v3/libio/stdio.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2Fstdio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Flibio%2Fstdio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fstdio.c?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -0,0 +1,42 @@\n+/* Copyright (C) 1993, 1994, 1996, 1997, 2000 Free Software Foundation, Inc.\n+   This file is part of the GNU IO Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU General Public License as\n+   published by the Free Software Foundation; either version 2, or (at\n+   your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this library; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+   MA 02111-1307, USA.\n+\n+   As a special exception, if you link this library with files\n+   compiled with a GNU compiler to produce an executable, this does\n+   not cause the resulting executable to be covered by the GNU General\n+   Public License.  This exception does not however invalidate any\n+   other reasons why the executable file might be covered by the GNU\n+   General Public License.  */\n+\n+#include \"libioP.h\"\n+\n+#undef stdin\n+#undef stdout\n+#undef stderr\n+_IO_FILE *stdin = (_IO_FILE *) &_IO_2_1_stdin_;\n+_IO_FILE *stdout = (_IO_FILE *) &_IO_2_1_stdout_;\n+_IO_FILE *stderr = (_IO_FILE *) &_IO_2_1_stderr_;\n+\n+#undef _IO_stdin\n+#undef _IO_stdout\n+#undef _IO_stderr\n+#ifdef _LIBC\n+strong_alias (stdin, _IO_stdin);\n+strong_alias (stdout, _IO_stdout);\n+strong_alias (stderr, _IO_stderr);\n+#endif"}, {"sha": "4345d822d6bc1338d41be369cb401c962dc913b6", "filename": "libstdc++-v3/math/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Fmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Fmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2FMakefile.in?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -103,6 +103,7 @@ WFMT_FLAGS = @WFMT_FLAGS@\n cpu_include_dir = @cpu_include_dir@\n ctype_include_dir = @ctype_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n+ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus"}, {"sha": "9b5fcd68136c2831a15346da6d69b436fd8cdd1e", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -189,10 +189,11 @@ cpu_headers = \\\n \n \n sources = \\\n-\tlimitsMEMBERS.cc c++io.cc \\\n+\tlimitsMEMBERS.cc \\\n \tcmath.cc \\\n \tcomplex.cc complexf.cc complexl.cc complex_io.cc \\\n-\tstdexcept.cc ios.cc stdstreams.cc strstream.cc \\\n+\tstdexcept.cc \\\n+\tc++io.cc ios.cc stdstreams.cc strstream.cc \\\n \tlocale.cc localename.cc  \\\n \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n "}, {"sha": "06bfccd0721bd191d4ef7f1fef978e4d721dcb8d", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -101,6 +101,7 @@ WFMT_FLAGS = @WFMT_FLAGS@\n cpu_include_dir = @cpu_include_dir@\n ctype_include_dir = @ctype_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n+ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n@@ -266,10 +267,11 @@ cpu_headers = \\\n \n \n sources = \\\n-\tlimitsMEMBERS.cc c++io.cc \\\n+\tlimitsMEMBERS.cc \\\n \tcmath.cc \\\n \tcomplex.cc complexf.cc complexl.cc complex_io.cc \\\n-\tstdexcept.cc ios.cc stdstreams.cc strstream.cc \\\n+\tstdexcept.cc \\\n+\tc++io.cc ios.cc stdstreams.cc strstream.cc \\\n \tlocale.cc localename.cc  \\\n \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n \n@@ -318,8 +320,8 @@ libinst_string_la_OBJECTS =  libinst-string.la.lo\n libinst_wstring_la_LDFLAGS = \n libinst_wstring_la_LIBADD = \n libinst_wstring_la_OBJECTS =  wstring-inst.lo\n-libstdc___la_OBJECTS =  limitsMEMBERS.lo c++io.lo cmath.lo complex.lo \\\n-complexf.lo complexl.lo complex_io.lo stdexcept.lo ios.lo stdstreams.lo \\\n+libstdc___la_OBJECTS =  limitsMEMBERS.lo cmath.lo complex.lo complexf.lo \\\n+complexl.lo complex_io.lo stdexcept.lo c++io.lo ios.lo stdstreams.lo \\\n strstream.lo locale.lo localename.lo locale-inst.lo stl-inst.lo \\\n misc-inst.lo valarray-inst.lo string-inst.lo\n CXXFLAGS = @CXXFLAGS@"}, {"sha": "6598842043fc74646d96100b995c82c26c9517c7", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75251ff0818c1c5da72afee94b13dce3bc96a4/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=dd75251ff0818c1c5da72afee94b13dce3bc96a4", "patch": "@@ -272,7 +272,7 @@ namespace std {\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n     // 49.  Underspecification of ios_base::sync_with_stdio\n     bool __retval = __ioinit._M_cin->_M_file->get_fileno() == 0;\n-    \n+\n     // Turn off sync with C FILE* for cin, cout, cerr, clog.\n     if (!__sync && __retval)\n       {"}]}