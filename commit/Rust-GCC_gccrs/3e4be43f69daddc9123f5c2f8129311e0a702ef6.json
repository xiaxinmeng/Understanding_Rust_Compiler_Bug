{"sha": "3e4be43f69daddc9123f5c2f8129311e0a702ef6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U0YmU0M2Y2OWRhZGRjOTEyM2Y1YzJmODEyOTMxMWUwYTcwMmVmNg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2016-04-29T09:14:19Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-04-29T09:14:19Z"}, "message": "S/390: Memory constraint cleanup\n\nThis fixes an issue with the long displacement memory address\nconstraints S and T.  These were defined to only accept long\ndisplacement addresses.  This is wrong since a memory constraint must\nnot reject an address with a 0 displacement.  Reload relies on being\nable to turn an invalid memory address into a valid one by reloading\nthe address into a base register.  The S and T constraints would\nreject such an address.\n\nThis isn't really a problem for the backend since we used the\nconstraints with that knowledge there but it is a problem for people\nwriting inline assemblies.\n\ngcc/ChangeLog:\n\n2016-04-29  Ulrich Weigand  <uweigand@de.ibm.com>\n\n\t* config/s390/constraints.md (\"U\", \"W\"): Invoke\n\ts390_mem_constraint with \"ZR\" and \"ZT\".\n\t* config/s390/s390.c (s390_check_qrst_address): Reject invalid\n\taddresses when using LRA.  Accept also short displacements for S\n\tand T constraints.  Do not check for long displacement target for\n\tS and T constraints.\n\t(s390_mem_constraint): Remove handling of U and W constraints.\n\t* config/s390/s390.md (various patterns): Remove the short\n\tdisplacement constraints (Q and R) if a long displacement\n\tconstraint is present.  Add longdisp as required CPU capability.\n\t* config/s390/vector.md: Likewise.\n\t* config/s390/vx-builtins.md: Likewise.\n\nFrom-SVN: r235626", "tree": {"sha": "6dbac4490eda8967bcf33ee9fc17a7f3278c553d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dbac4490eda8967bcf33ee9fc17a7f3278c553d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e4be43f69daddc9123f5c2f8129311e0a702ef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4be43f69daddc9123f5c2f8129311e0a702ef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e4be43f69daddc9123f5c2f8129311e0a702ef6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4be43f69daddc9123f5c2f8129311e0a702ef6/comments", "author": null, "committer": null, "parents": [{"sha": "849b265de120169d2171806568ae1b977ec96193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/849b265de120169d2171806568ae1b977ec96193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/849b265de120169d2171806568ae1b977ec96193"}], "stats": {"total": 504, "additions": 274, "deletions": 230}, "files": [{"sha": "18878cb0c8582d45c3892dcdd375cdebfd62786b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4be43f69daddc9123f5c2f8129311e0a702ef6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4be43f69daddc9123f5c2f8129311e0a702ef6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e4be43f69daddc9123f5c2f8129311e0a702ef6", "patch": "@@ -1,3 +1,18 @@\n+2016-04-29  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/constraints.md (\"U\", \"W\"): Invoke\n+\ts390_mem_constraint with \"ZR\" and \"ZT\".\n+\t* config/s390/s390.c (s390_check_qrst_address): Reject invalid\n+\taddresses when using LRA.  Accept also short displacements for S\n+\tand T constraints.  Do not check for long displacement target for\n+\tS and T constraints.\n+\t(s390_mem_constraint): Remove handling of U and W constraints.\n+\t* config/s390/s390.md (various patterns): Remove the short\n+\tdisplacement constraints (Q and R) if a long displacement\n+\tconstraint is present.  Add longdisp as required CPU capability.\n+\t* config/s390/vector.md: Likewise.\n+\t* config/s390/vx-builtins.md: Likewise.\n+\n 2016-04-29  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \tPR target/60040"}, {"sha": "190cdc903d1095cfe1088d7475536c5dcb13fc00", "filename": "gcc/config/s390/constraints.md", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4be43f69daddc9123f5c2f8129311e0a702ef6/gcc%2Fconfig%2Fs390%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4be43f69daddc9123f5c2f8129311e0a702ef6/gcc%2Fconfig%2Fs390%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fconstraints.md?ref=3e4be43f69daddc9123f5c2f8129311e0a702ef6", "patch": "@@ -77,8 +77,8 @@\n ;;    B -- Multiple letter constraint followed by Q, R, S, or T:\n ;;         Memory reference of the type specified by second letter that\n ;;         does *not* refer to a literal pool entry.\n-;;    U -- Pointer with short displacement. (deprecated - use ZQZR)\n-;;    W -- Pointer with long displacement. (deprecated - use ZSZT)\n+;;    U -- Pointer with short displacement. (deprecated - use ZR)\n+;;    W -- Pointer with long displacement. (deprecated - use ZT)\n ;;    Y -- Address style operand without index.\n ;;    ZQ -- Pointer without index register and with short displacement.\n ;;    ZR -- Pointer with index register and short displacement.\n@@ -455,8 +455,7 @@\n ; the TARGET_MEM_CONSTRAINT macro.\n (define_memory_constraint \"m\"\n   \"Matches the most general memory address for pre-z10 machines.\"\n-  (match_test \"s390_mem_constraint (\\\"R\\\", op)\n-               || s390_mem_constraint (\\\"T\\\", op)\"))\n+  (match_test \"s390_mem_constraint (\\\"T\\\", op)\"))\n \n (define_memory_constraint \"AQ\"\n   \"@internal\n@@ -512,12 +511,12 @@\n \n \n (define_address_constraint \"U\"\n-  \"Pointer with short displacement. (deprecated - use ZQZR)\"\n-  (match_test \"s390_mem_constraint (\\\"U\\\", op)\"))\n+  \"Pointer with short displacement. (deprecated - use ZR)\"\n+  (match_test \"s390_mem_constraint (\\\"ZR\\\", op)\"))\n \n (define_address_constraint \"W\"\n-  \"Pointer with long displacement. (deprecated - use ZSZT)\"\n-  (match_test \"s390_mem_constraint (\\\"W\\\", op)\"))\n+  \"Pointer with long displacement. (deprecated - use ZT)\"\n+  (match_test \"s390_mem_constraint (\\\"ZT\\\", op)\"))\n \n \n (define_address_constraint \"ZQ\""}, {"sha": "155be3c69b0f9c2ab7de2c8501e9c6adfac47e9e", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4be43f69daddc9123f5c2f8129311e0a702ef6/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4be43f69daddc9123f5c2f8129311e0a702ef6/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=3e4be43f69daddc9123f5c2f8129311e0a702ef6", "patch": "@@ -3116,6 +3116,19 @@ s390_check_qrst_address (char c, rtx op, bool lit_pool_ok)\n       decomposed = true;\n     }\n \n+  /* With reload, we sometimes get intermediate address forms that are\n+     actually invalid as-is, but we need to accept them in the most\n+     generic cases below ('R' or 'T'), since reload will in fact fix\n+     them up.  LRA behaves differently here; we never see such forms,\n+     but on the other hand, we need to strictly reject every invalid\n+     address form.  Perform this check right up front.  */\n+  if (lra_in_progress)\n+    {\n+      if (!decomposed && !s390_decompose_address (op, &addr))\n+\treturn 0;\n+      decomposed = true;\n+    }\n+\n   switch (c)\n     {\n     case 'Q': /* no index short displacement */\n@@ -3140,25 +3153,17 @@ s390_check_qrst_address (char c, rtx op, bool lit_pool_ok)\n       break;\n \n     case 'S': /* no index long displacement */\n-      if (!TARGET_LONG_DISPLACEMENT)\n-\treturn 0;\n       if (!decomposed && !s390_decompose_address (op, &addr))\n \treturn 0;\n       if (addr.indx)\n \treturn 0;\n-      if (s390_short_displacement (addr.disp))\n-\treturn 0;\n       break;\n \n     case 'T': /* with index long displacement */\n-      if (!TARGET_LONG_DISPLACEMENT)\n-\treturn 0;\n       /* Any invalid address here will be fixed up by reload,\n \t so accept it for the most generic constraint.  */\n-      if ((decomposed || s390_decompose_address (op, &addr))\n-\t  && s390_short_displacement (addr.disp))\n-\treturn 0;\n       break;\n+\n     default:\n       return 0;\n     }\n@@ -3167,7 +3172,7 @@ s390_check_qrst_address (char c, rtx op, bool lit_pool_ok)\n \n \n /* Evaluates constraint strings described by the regular expression\n-   ([A|B|Z](Q|R|S|T))|U|W|Y and returns 1 if OP is a valid operand for\n+   ([A|B|Z](Q|R|S|T))|Y and returns 1 if OP is a valid operand for\n    the constraint given in STR, or 0 else.  */\n \n int\n@@ -3197,12 +3202,6 @@ s390_mem_constraint (const char *str, rtx op)\n       if (GET_CODE (op) != MEM)\n \treturn 0;\n       return s390_check_qrst_address (c, XEXP (op, 0), true);\n-    case 'U':\n-      return (s390_check_qrst_address ('Q', op, true)\n-\t      || s390_check_qrst_address ('R', op, true));\n-    case 'W':\n-      return (s390_check_qrst_address ('S', op, true)\n-\t      || s390_check_qrst_address ('T', op, true));\n     case 'Y':\n       /* Simply check for the basic form of a shift count.  Reload will\n \t take care of making sure we have a proper base register.  */"}, {"sha": "875747026b4b96bb2a48065b647333424055396d", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 216, "deletions": 185, "changes": 401, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4be43f69daddc9123f5c2f8129311e0a702ef6/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4be43f69daddc9123f5c2f8129311e0a702ef6/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=3e4be43f69daddc9123f5c2f8129311e0a702ef6", "patch": "@@ -797,6 +797,7 @@\n    tm\\t%S0,%b1\n    tmy\\t%S0,%b1\"\n   [(set_attr \"op_type\" \"SI,SIY\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super,z10_super\")])\n \n (define_insn \"*tmdi_reg\"\n@@ -850,7 +851,7 @@\n         (compare\n           (ashiftrt:DI\n             (ashift:DI\n-              (subreg:DI (match_operand:SI 0 \"nonimmediate_operand\" \"d,RT\") 0)\n+              (subreg:DI (match_operand:SI 0 \"nonimmediate_operand\" \"d,T\") 0)\n \t      (const_int 32)) (const_int 32))\n \t  (match_operand:DI 1 \"const0_operand\" \"\")))\n    (set (match_operand:DI 2 \"register_operand\" \"=d,d\")\n@@ -865,7 +866,7 @@\n ; ltr, lt, ltgr, ltg\n (define_insn \"*tst<mode>_extimm\"\n   [(set (reg CC_REGNUM)\n-        (compare (match_operand:GPR 0 \"nonimmediate_operand\" \"d,RT\")\n+        (compare (match_operand:GPR 0 \"nonimmediate_operand\" \"d,T\")\n                  (match_operand:GPR 1 \"const0_operand\" \"\")))\n    (set (match_operand:GPR 2 \"register_operand\" \"=d,d\")\n         (match_dup 0))]\n@@ -879,7 +880,7 @@\n ; ltr, lt, ltgr, ltg\n (define_insn \"*tst<mode>_cconly_extimm\"\n   [(set (reg CC_REGNUM)\n-        (compare (match_operand:GPR 0 \"nonimmediate_operand\" \"d,RT\")\n+        (compare (match_operand:GPR 0 \"nonimmediate_operand\" \"d,T\")\n                  (match_operand:GPR 1 \"const0_operand\" \"\")))\n    (clobber (match_scratch:GPR 2 \"=X,d\"))]\n   \"s390_match_ccmode(insn, CCSmode) && TARGET_EXTIMM\"\n@@ -912,6 +913,7 @@\n    icm\\t%2,15,%S0\n    icmy\\t%2,15,%S0\"\n   [(set_attr \"op_type\" \"RR,RS,RSY\")\n+   (set_attr \"cpu_facility\" \"*,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_fr_E1,z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*tstsi_cconly\"\n@@ -925,6 +927,7 @@\n    icm\\t%2,15,%S0\n    icmy\\t%2,15,%S0\"\n   [(set_attr \"op_type\" \"RR,RS,RSY\")\n+   (set_attr \"cpu_facility\" \"*,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_fr_E1,z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*tstdi_cconly_31\"\n@@ -960,6 +963,7 @@\n    icmy\\t%2,<icm_lo>,%S0\n    tml\\t%0,<max_uint>\"\n   [(set_attr \"op_type\" \"RS,RSY,RI\")\n+   (set_attr \"cpu_facility\" \"*,longdisp,*\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super\")])\n \n (define_insn \"*tsthiCCT_cconly\"\n@@ -973,6 +977,7 @@\n    icmy\\t%2,3,%S0\n    tml\\t%0,65535\"\n   [(set_attr \"op_type\" \"RS,RSY,RI\")\n+   (set_attr \"cpu_facility\" \"*,longdisp,*\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super\")])\n \n (define_insn \"*tstqiCCT_cconly\"\n@@ -985,6 +990,7 @@\n    cliy\\t%S0,0\n    tml\\t%0,255\"\n   [(set_attr \"op_type\" \"SI,SIY,RI\")\n+   (set_attr \"cpu_facility\" \"*,longdisp,*\")\n    (set_attr \"z10prop\" \"z10_super,z10_super,z10_super\")])\n \n (define_insn \"*tst<mode>\"\n@@ -998,6 +1004,7 @@\n    icm\\t%2,<icm_lo>,%S0\n    icmy\\t%2,<icm_lo>,%S0\"\n   [(set_attr \"op_type\" \"RS,RSY\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*tst<mode>_cconly\"\n@@ -1010,6 +1017,7 @@\n    icm\\t%2,<icm_lo>,%S0\n    icmy\\t%2,<icm_lo>,%S0\"\n   [(set_attr \"op_type\" \"RS,RSY\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n \n@@ -1018,7 +1026,7 @@\n (define_insn \"*cmpdi_cct\"\n   [(set (reg CC_REGNUM)\n         (compare (match_operand:DI 0 \"nonimmediate_operand\" \"%d,d,d,d,Q\")\n-                 (match_operand:DI 1 \"general_operand\" \"d,K,Os,RT,BQ\")))]\n+                 (match_operand:DI 1 \"general_operand\" \"d,K,Os,T,BQ\")))]\n   \"s390_match_ccmode (insn, CCTmode) && TARGET_ZARCH\"\n   \"@\n    cgr\\t%0,%1\n@@ -1042,14 +1050,15 @@\n    cy\\t%0,%1\n    #\"\n   [(set_attr \"op_type\" \"RR,RI,RIL,RX,RXY,SS\")\n+   (set_attr \"cpu_facility\" \"*,*,*,*,longdisp,*\")\n    (set_attr \"z10prop\" \"z10_super_c,z10_super,z10_super,z10_super,z10_super,*\")])\n \n ; Compare (signed) instructions\n \n (define_insn \"*cmpdi_ccs_sign\"\n   [(set (reg CC_REGNUM)\n         (compare (sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\"\n-\t\t\t\t\t\t     \"d,RT,b\"))\n+\t\t\t\t\t\t     \"d,T,b\"))\n                  (match_operand:DI 0 \"register_operand\" \"d, d,d\")))]\n   \"s390_match_ccmode(insn, CCSRmode) && TARGET_ZARCH\"\n   \"@\n@@ -1072,7 +1081,7 @@\n    chy\\t%0,%1\n    chrl\\t%0,%1\"\n   [(set_attr \"op_type\"      \"RX,RXY,RIL\")\n-   (set_attr \"cpu_facility\" \"*,*,z10\")\n+   (set_attr \"cpu_facility\" \"*,longdisp,z10\")\n    (set_attr \"type\"         \"*,*,larl\")\n    (set_attr \"z196prop\" \"z196_cracked,z196_cracked,z196_cracked\")])\n \n@@ -1087,7 +1096,7 @@\n \n (define_insn \"*cmpdi_ccs_signhi_rl\"\n   [(set (reg CC_REGNUM)\n-\t(compare (sign_extend:DI (match_operand:HI 1 \"memory_operand\" \"RT,b\"))\n+\t(compare (sign_extend:DI (match_operand:HI 1 \"memory_operand\" \"T,b\"))\n \t\t (match_operand:GPR 0 \"register_operand\"  \"d,d\")))]\n   \"s390_match_ccmode(insn, CCSRmode) && TARGET_Z10\"\n   \"@\n@@ -1113,7 +1122,7 @@\n    c<y>\\t%0,%1\n    c<g>rl\\t%0,%1\"\n   [(set_attr \"op_type\" \"RR<E>,RI,SIL,RIL,RX<Y>,RXY,RIL\")\n-   (set_attr \"cpu_facility\" \"*,*,z10,extimm,*,*,z10\")\n+   (set_attr \"cpu_facility\" \"*,*,z10,extimm,*,longdisp,z10\")\n    (set_attr \"type\" \"*,*,*,*,*,*,larl\")\n    (set_attr \"z10prop\" \"z10_super_c,z10_super,z10_super,z10_super,z10_super,z10_super,z10_super\")])\n \n@@ -1146,8 +1155,8 @@\n (define_insn \"*cmpdi_ccu_zero\"\n   [(set (reg CC_REGNUM)\n         (compare (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\"\n-                                                        \"d,RT,b\"))\n-                 (match_operand:DI 0 \"register_operand\" \"d, d,d\")))]\n+                                                        \"d,T,b\"))\n+                 (match_operand:DI 0 \"register_operand\" \"d,d,d\")))]\n   \"s390_match_ccmode (insn, CCURmode) && TARGET_ZARCH\"\n   \"@\n    clgfr\\t%0,%1\n@@ -1161,9 +1170,9 @@\n (define_insn \"*cmpdi_ccu\"\n   [(set (reg CC_REGNUM)\n         (compare (match_operand:DI 0 \"nonimmediate_operand\"\n-                                     \"d, d,d,Q, d, Q,BQ\")\n+                                     \"d, d,d,Q,d, Q,BQ\")\n                  (match_operand:DI 1 \"general_operand\"\n-                                     \"d,Op,b,D,RT,BQ,Q\")))]\n+                                     \"d,Op,b,D,T,BQ,Q\")))]\n   \"s390_match_ccmode (insn, CCUmode) && TARGET_ZARCH\"\n   \"@\n    clgr\\t%0,%1\n@@ -1193,7 +1202,7 @@\n    #\n    #\"\n   [(set_attr \"op_type\" \"RR,RIL,RIL,SIL,RX,RXY,SS,SS\")\n-   (set_attr \"cpu_facility\" \"*,extimm,z10,z10,*,*,*,*\")\n+   (set_attr \"cpu_facility\" \"*,extimm,z10,z10,*,longdisp,*,*\")\n    (set_attr \"type\"         \"*,*,larl,*,*,*,*,*\")\n    (set_attr \"z10prop\" \"z10_super_c,z10_super,z10_super,z10_super,z10_super,z10_super,*,*\")])\n \n@@ -1210,7 +1219,7 @@\n    #\n    #\"\n   [(set_attr \"op_type\" \"RS,RSY,SIL,SS,SS\")\n-   (set_attr \"cpu_facility\" \"*,*,z10,*,*\")\n+   (set_attr \"cpu_facility\" \"*,longdisp,z10,*,*\")\n    (set_attr \"z10prop\" \"*,*,z10_super,*,*\")])\n \n (define_insn \"*cmpqi_ccu\"\n@@ -1227,6 +1236,7 @@\n    #\n    #\"\n   [(set_attr \"op_type\" \"RS,RSY,SI,SIY,SS,SS\")\n+   (set_attr \"cpu_facility\" \"*,longdisp,*,longdisp,*,*\")\n    (set_attr \"z10prop\" \"*,*,z10_super,z10_super,*,*\")])\n \n \n@@ -1426,8 +1436,8 @@\n ; FIXME: More constants are possible by enabling jxx, jyy constraints\n ; for TImode (use double-int for the calculations)\n (define_insn \"movti\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=d,QS,v,  v,  v,v,d, v,QR,   d,o\")\n-        (match_operand:TI 1 \"general_operand\"      \"QS, d,v,j00,jm1,d,v,QR, v,dPRT,d\"))]\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=d,S,v,  v,  v,v,d,v,R,  d,o\")\n+        (match_operand:TI 1 \"general_operand\"      \" S,d,v,j00,jm1,d,v,R,v,dPT,d\"))]\n   \"TARGET_ZARCH\"\n   \"@\n    lmg\\t%0,%N0,%S1\n@@ -1635,9 +1645,9 @@\n \n (define_insn \"*movdi_64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-         \"=d,    d,    d,    d,    d, d,    d,    d,f,d,d,d,d, d,RT,!*f,!*f,!*f,!R,!T,b,Q,d,t,Q,t,v,v,v,d, v,QR\")\n+         \"=d,    d,    d,    d,    d, d,    d,    d,f,d,d,d,d,d,T,!*f,!*f,!*f,!R,!T,b,Q,d,t,Q,t,v,v,v,d,v,R\")\n         (match_operand:DI 1 \"general_operand\"\n-         \" K,N0HD0,N1HD0,N2HD0,N3HD0,Os,N0SD0,N1SD0,d,f,L,b,d,RT, d, *f,  R,  T,*f,*f,d,K,t,d,t,Q,K,v,d,v,QR, v\"))]\n+         \" K,N0HD0,N1HD0,N2HD0,N3HD0,Os,N0SD0,N1SD0,d,f,L,b,d,T,d, *f,  R,  T,*f,*f,d,K,t,d,t,Q,K,v,d,v,R,v\"))]\n   \"TARGET_ZARCH\"\n   \"@\n    lghi\\t%0,%h1\n@@ -1743,9 +1753,9 @@\n \n (define_insn \"*movdi_31\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-                            \"=d,d,Q,S,d   ,o,!*f,!*f,!*f,!R,!T,d\")\n+                            \"=d,d,Q,S,d  ,o,!*f,!*f,!*f,!R,!T,d\")\n         (match_operand:DI 1 \"general_operand\"\n-                            \" Q,S,d,d,dPRT,d, *f,  R,  T,*f,*f,b\"))]\n+                            \" Q,S,d,d,dPT,d, *f,  R,  T,*f,*f,b\"))]\n   \"!TARGET_ZARCH\"\n   \"@\n    lm\\t%0,%N0,%S1\n@@ -1762,7 +1772,7 @@\n    #\"\n   [(set_attr \"op_type\" \"RS,RSY,RS,RSY,*,*,RR,RX,RXY,RX,RXY,*\")\n    (set_attr \"type\" \"lm,lm,stm,stm,*,*,floaddf,floaddf,floaddf,fstoredf,fstoredf,*\")\n-   (set_attr \"cpu_facility\" \"*,*,*,*,*,*,*,*,*,*,*,z10\")])\n+   (set_attr \"cpu_facility\" \"*,longdisp,*,longdisp,*,*,*,*,longdisp,*,longdisp,z10\")])\n \n ; For a load from a symbol ref we can use one of the target registers\n ; together with larl to load the address.\n@@ -1834,13 +1844,14 @@\n \n (define_insn \"*la_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (match_operand:QI 1 \"address_operand\" \"ZQZR,ZSZT\"))]\n+        (match_operand:QI 1 \"address_operand\" \"ZR,ZT\"))]\n   \"TARGET_64BIT\"\n   \"@\n    la\\t%0,%a1\n    lay\\t%0,%a1\"\n   [(set_attr \"op_type\" \"RX,RXY\")\n    (set_attr \"type\"    \"la\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z10prop\" \"z10_fwd_A1,z10_fwd_A1\")])\n \n (define_peephole2\n@@ -1897,9 +1908,9 @@\n \n (define_insn \"*movsi_zarch\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n-\t \"=d,    d,    d, d,d,d,d,d,d,R,T,!*f,!*f,!*f,!*f,!*f,!R,!T,d,t,Q,b,Q,t,v,v,v,d, v,QR\")\n+\t \"=d,    d,    d, d,d,d,d,d,d,R,T,!*f,!*f,!*f,!*f,!*f,!R,!T,d,t,Q,b,Q,t,v,v,v,d,v,R\")\n         (match_operand:SI 1 \"general_operand\"\n-\t \" K,N0HS0,N1HS0,Os,L,b,d,R,T,d,d, *f, *f,  R,  R,  T,*f,*f,t,d,t,d,K,Q,K,v,d,v,QR, v\"))]\n+\t \" K,N0HS0,N1HS0,Os,L,b,d,R,T,d,d, *f, *f,  R,  R,  T,*f,*f,t,d,t,d,K,Q,K,v,d,v,R,v\"))]\n   \"TARGET_ZARCH\"\n   \"@\n    lhi\\t%0,%h1\n@@ -2023,13 +2034,14 @@\n \n (define_insn \"*la_31\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (match_operand:QI 1 \"address_operand\" \"ZQZR,ZSZT\"))]\n+        (match_operand:QI 1 \"address_operand\" \"ZR,ZT\"))]\n   \"!TARGET_64BIT && legitimate_la_operand_p (operands[1])\"\n   \"@\n    la\\t%0,%a1\n    lay\\t%0,%a1\"\n   [(set_attr \"op_type\"  \"RX,RXY\")\n    (set_attr \"type\"     \"la\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z10prop\" \"z10_fwd_A1,z10_fwd_A1\")])\n \n (define_peephole2\n@@ -2058,14 +2070,15 @@\n \n (define_insn \"*la_31_and\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (and:SI (match_operand:QI 1 \"address_operand\" \"ZQZR,ZSZT\")\n+        (and:SI (match_operand:QI 1 \"address_operand\" \"ZR,ZT\")\n                 (const_int 2147483647)))]\n   \"!TARGET_64BIT\"\n   \"@\n    la\\t%0,%a1\n    lay\\t%0,%a1\"\n   [(set_attr \"op_type\"  \"RX,RXY\")\n    (set_attr \"type\"     \"la\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z10prop\" \"z10_fwd_A1,z10_fwd_A1\")])\n \n (define_insn_and_split \"*la_31_and_cc\"\n@@ -2084,14 +2097,15 @@\n \n (define_insn \"force_la_31\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (match_operand:QI 1 \"address_operand\" \"ZQZR,ZSZT\"))\n+        (match_operand:QI 1 \"address_operand\" \"ZR,ZT\"))\n    (use (const_int 0))]\n   \"!TARGET_64BIT\"\n   \"@\n    la\\t%0,%a1\n    lay\\t%0,%a1\"\n   [(set_attr \"op_type\"  \"RX\")\n    (set_attr \"type\"     \"la\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z10prop\" \"z10_fwd_A1,z10_fwd_A1\")])\n \n ;\n@@ -2117,8 +2131,8 @@\n })\n \n (define_insn \"*movhi\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,R,T,b,Q,v,v,v,d, v,QR\")\n-        (match_operand:HI 1 \"general_operand\"      \" d,n,R,T,b,d,d,d,K,K,v,d,v,QR, v\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,R,T,b,Q,v,v,v,d,v,R\")\n+        (match_operand:HI 1 \"general_operand\"      \" d,n,R,T,b,d,d,d,K,K,v,d,v,R,v\"))]\n   \"\"\n   \"@\n    lr\\t%0,%1\n@@ -2138,7 +2152,7 @@\n    vsteh\\t%v1,%0,0\"\n   [(set_attr \"op_type\"      \"RR,RI,RX,RXY,RIL,RX,RXY,RIL,SIL,VRI,VRR,VRS,VRS,VRX,VRX\")\n    (set_attr \"type\"         \"lr,*,*,*,larl,store,store,store,*,*,*,*,*,*,*\")\n-   (set_attr \"cpu_facility\" \"*,*,*,*,z10,*,*,z10,z10,vec,vec,vec,vec,vec,vec\")\n+   (set_attr \"cpu_facility\" \"*,*,*,longdisp,z10,*,longdisp,z10,z10,vec,vec,vec,vec,vec,vec\")\n    (set_attr \"z10prop\" \"z10_fr_E1,\n                        z10_fwd_A1,\n                        z10_super_E1,\n@@ -2182,8 +2196,8 @@\n })\n \n (define_insn \"*movqi\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,d,d,R,T,Q,S,?Q,v,v,v,d, v,QR\")\n-        (match_operand:QI 1 \"general_operand\"      \" d,n,R,T,d,d,n,n,?Q,K,v,d,v,QR, v\"))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,d,d,R,T,Q,S,?Q,v,v,v,d,v,R\")\n+        (match_operand:QI 1 \"general_operand\"      \" d,n,R,T,d,d,n,n,?Q,K,v,d,v,R,v\"))]\n   \"\"\n   \"@\n    lr\\t%0,%1\n@@ -2203,7 +2217,7 @@\n    vsteb\\t%v1,%0,0\"\n   [(set_attr \"op_type\" \"RR,RI,RX,RXY,RX,RXY,SI,SIY,SS,VRI,VRR,VRS,VRS,VRX,VRX\")\n    (set_attr \"type\" \"lr,*,*,*,store,store,store,store,*,*,*,*,*,*,*\")\n-   (set_attr \"cpu_facility\" \"*,*,*,*,*,*,*,*,*,vec,vec,vec,vec,vec,vec\")\n+   (set_attr \"cpu_facility\" \"*,*,*,longdisp,*,longdisp,*,longdisp,*,vec,vec,vec,vec,vec,vec\")\n    (set_attr \"z10prop\" \"z10_fr_E1,\n                         z10_fwd_A1,\n                         z10_super_E1,\n@@ -2236,6 +2250,7 @@\n    ic\\t%0,%1\n    icy\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RX,RXY\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n ;\n@@ -2251,6 +2266,7 @@\n    icm\\t%0,3,%S1\n    icmy\\t%0,3,%S1\"\n   [(set_attr \"op_type\" \"RS,RSY\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n ;\n@@ -2268,6 +2284,7 @@\n    ear\\t%0,%1\"\n   [(set_attr \"op_type\" \"RR,RX,RXY,RRE\")\n    (set_attr \"type\" \"lr,load,load,*\")\n+   (set_attr \"cpu_facility\" \"*,*,longdisp,*\")\n    (set_attr \"z10prop\" \"z10_fr_E1,z10_fwd_A3,z10_fwd_A3,z10_super_E1\")])\n \n ;\n@@ -2281,8 +2298,8 @@\n   \"\")\n \n (define_insn \"*mov<mode>_64\"\n-  [(set (match_operand:TD_TF 0 \"nonimmediate_operand\" \"=f,f,f,o, d,QS,  d,o\")\n-        (match_operand:TD_TF 1 \"general_operand\"      \" G,f,o,f,QS, d,dRT,d\"))]\n+  [(set (match_operand:TD_TF 0 \"nonimmediate_operand\" \"=f,f,f,o,d,S, d,o\")\n+        (match_operand:TD_TF 1 \"general_operand\"      \" G,f,o,f,S,d,dT,d\"))]\n   \"TARGET_ZARCH\"\n   \"@\n    lzxr\\t%0\n@@ -2400,9 +2417,9 @@\n \n (define_insn \"*mov<mode>_64dfp\"\n   [(set (match_operand:DD_DF 0 \"nonimmediate_operand\"\n-\t\t\t       \"=f,f,f,d,f,f,R,T,d,d,d, d,b,RT,v,v,d,v,QR\")\n+\t\t\t       \"=f,f,f,d,f,f,R,T,d,d,d,d,b,T,v,v,d,v,R\")\n         (match_operand:DD_DF 1 \"general_operand\"\n-\t\t\t       \" G,f,d,f,R,T,f,f,G,d,b,RT,d, d,v,d,v,QR,v\"))]\n+\t\t\t       \" G,f,d,f,R,T,f,f,G,d,b,T,d,d,v,d,v,R,v\"))]\n   \"TARGET_DFP\"\n   \"@\n    lzdr\\t%0\n@@ -2428,11 +2445,11 @@\n    (set_attr \"type\" \"fsimpdf,floaddf,floaddf,floaddf,floaddf,floaddf,\n                      fstoredf,fstoredf,*,lr,load,load,store,store,*,*,*,load,store\")\n    (set_attr \"z10prop\" \"*,*,*,*,*,*,*,*,z10_fwd_A1,z10_fr_E1,z10_fwd_A3,z10_fwd_A3,z10_rec,z10_rec,*,*,*,*,*\")\n-   (set_attr \"cpu_facility\" \"z196,*,*,*,*,*,*,*,*,*,z10,*,z10,*,vec,vec,vec,vec,vec\")])\n+   (set_attr \"cpu_facility\" \"z196,*,*,*,*,longdisp,*,longdisp,*,*,z10,*,z10,*,vec,vec,vec,vec,vec\")])\n \n (define_insn \"*mov<mode>_64\"\n-  [(set (match_operand:DD_DF 0 \"nonimmediate_operand\" \"=f,f,f,f,R,T,d,d,d, d,b,RT,v,v,QR\")\n-        (match_operand:DD_DF 1 \"general_operand\"      \" G,f,R,T,f,f,G,d,b,RT,d, d,v,QR,v\"))]\n+  [(set (match_operand:DD_DF 0 \"nonimmediate_operand\" \"=f,f,f,f,R,T,d,d,d,d,b,T,v,v,R\")\n+        (match_operand:DD_DF 1 \"general_operand\"      \" G,f,R,T,f,f,G,d,b,T,d,d,v,R,v\"))]\n   \"TARGET_ZARCH\"\n   \"@\n    lzdr\\t%0\n@@ -2454,13 +2471,13 @@\n    (set_attr \"type\"    \"fsimpdf,fload<mode>,fload<mode>,fload<mode>,\n                         fstore<mode>,fstore<mode>,*,lr,load,load,store,store,*,load,store\")\n    (set_attr \"z10prop\" \"*,*,*,*,*,*,z10_fwd_A1,z10_fr_E1,z10_fwd_A3,z10_fwd_A3,z10_rec,z10_rec,*,*,*\")\n-   (set_attr \"cpu_facility\" \"z196,*,*,*,*,*,*,*,z10,*,z10,*,vec,vec,vec\")])\n+   (set_attr \"cpu_facility\" \"z196,*,*,longdisp,*,longdisp,*,*,z10,*,z10,*,vec,vec,vec\")])\n \n (define_insn \"*mov<mode>_31\"\n   [(set (match_operand:DD_DF 0 \"nonimmediate_operand\"\n-                               \"=f,f,f,f,R,T,d,d,Q,S,   d,o\")\n+                               \"=f,f,f,f,R,T,d,d,Q,S,  d,o\")\n         (match_operand:DD_DF 1 \"general_operand\"\n-                               \" G,f,R,T,f,f,Q,S,d,d,dPRT,d\"))]\n+                               \" G,f,R,T,f,f,Q,S,d,d,dPT,d\"))]\n   \"!TARGET_ZARCH\"\n   \"@\n    lzdr\\t%0\n@@ -2478,7 +2495,7 @@\n   [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RS,RSY,RS,RSY,*,*\")\n    (set_attr \"type\"    \"fsimpdf,fload<mode>,fload<mode>,fload<mode>,\n                         fstore<mode>,fstore<mode>,lm,lm,stm,stm,*,*\")\n-   (set_attr \"cpu_facility\" \"z196,*,*,*,*,*,*,*,*,*,*,*\")])\n+   (set_attr \"cpu_facility\" \"z196,*,*,longdisp,*,longdisp,*,longdisp,*,longdisp,*,*\")])\n \n (define_split\n   [(set (match_operand:DD_DF 0 \"nonimmediate_operand\" \"\")\n@@ -2527,9 +2544,9 @@\n \n (define_insn \"mov<mode>\"\n   [(set (match_operand:SD_SF 0 \"nonimmediate_operand\"\n-\t\t\t       \"=f,f,f,f,f,f,R,T,d,d,d,d,d,b,R,T,v,v,v,d,v,QR\")\n+\t\t\t       \"=f,f,f,f,f,f,R,T,d,d,d,d,d,b,R,T,v,v,v,d,v,R\")\n         (match_operand:SD_SF 1 \"general_operand\"\n-\t\t\t       \" G,f,f,R,R,T,f,f,G,d,b,R,T,d,d,d,v,G,d,v,QR,v\"))]\n+\t\t\t       \" G,f,f,R,R,T,f,f,G,d,b,R,T,d,d,d,v,G,d,v,R,v\"))]\n   \"\"\n   \"@\n    lzer\\t%0\n@@ -2558,7 +2575,7 @@\n    (set_attr \"type\"    \"fsimpsf,fsimpsf,fload<mode>,fload<mode>,fload<mode>,fload<mode>,\n                         fstore<mode>,fstore<mode>,*,lr,load,load,load,store,store,store,*,*,*,*,load,store\")\n    (set_attr \"z10prop\" \"*,*,*,*,*,*,*,*,z10_fwd_A1,z10_fr_E1,z10_fr_E1,z10_fwd_A3,z10_fwd_A3,z10_rec,z10_rec,z10_rec,*,*,*,*,*,*\")\n-   (set_attr \"cpu_facility\" \"z196,vec,*,vec,*,*,*,*,*,*,z10,*,*,z10,*,*,vec,vec,vec,vec,vec,vec\")])\n+   (set_attr \"cpu_facility\" \"z196,vec,*,vec,*,longdisp,*,longdisp,*,*,z10,*,longdisp,z10,*,longdisp,vec,vec,vec,vec,vec,vec\")])\n \n ;\n ; movcc instruction pattern\n@@ -2578,6 +2595,7 @@\n    sty\\t%1,%0\"\n   [(set_attr \"op_type\" \"RR,RI,RRE,RX,RXY,RX,RXY\")\n    (set_attr \"type\" \"lr,*,*,load,load,store,store\")\n+   (set_attr \"cpu_facility\" \"*,*,*,*,longdisp,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_fr_E1,z10_super,*,z10_fwd_A3,z10_fwd_A3,z10_rec,z10_rec\")\n    (set_attr \"z196prop\" \"*,*,z196_ends,*,*,*,*\")])\n \n@@ -2701,7 +2719,7 @@\n (define_insn \"*load_multiple_di\"\n   [(match_parallel 0 \"load_multiple_operation\"\n \t\t   [(set (match_operand:DI 1 \"register_operand\" \"=r\")\n-\t\t\t (match_operand:DI 2 \"s_operand\" \"QS\"))])]\n+\t\t\t (match_operand:DI 2 \"s_operand\" \"S\"))])]\n   \"reload_completed && TARGET_ZARCH\"\n {\n   int words = XVECLEN (operands[0], 0);\n@@ -2722,6 +2740,7 @@\n   return which_alternative == 0 ? \"lm\\t%1,%0,%S2\" : \"lmy\\t%1,%0,%S2\";\n }\n    [(set_attr \"op_type\" \"RS,RSY\")\n+    (set_attr \"cpu_facility\" \"*,longdisp\")\n     (set_attr \"type\"    \"lm\")])\n \n ;\n@@ -2791,7 +2810,7 @@\n \n (define_insn \"*store_multiple_di\"\n   [(match_parallel 0 \"store_multiple_operation\"\n-\t\t   [(set (match_operand:DI 1 \"s_operand\" \"=QS\")\n+\t\t   [(set (match_operand:DI 1 \"s_operand\" \"=S\")\n \t\t\t (match_operand:DI 2 \"register_operand\" \"r\"))])]\n   \"reload_completed && TARGET_ZARCH\"\n {\n@@ -2814,6 +2833,7 @@\n   return which_alternative == 0 ? \"stm\\t%2,%0,%S1\" : \"stmy\\t%2,%0,%S1\";\n }\n    [(set_attr \"op_type\" \"RS,RSY\")\n+    (set_attr \"cpu_facility\" \"*,longdisp\")\n     (set_attr \"type\"    \"stm\")])\n \n ;;\n@@ -3670,11 +3690,12 @@\n    icm\\t%0,%2,%S1\n    icmy\\t%0,%2,%S1\"\n   [(set_attr \"op_type\" \"RS,RSY\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*sethighpartdi_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(unspec:DI [(match_operand:BLK 1 \"s_operand\" \"QS\")\n+\t(unspec:DI [(match_operand:BLK 1 \"s_operand\" \"S\")\n \t\t    (match_operand 2 \"const_int_operand\" \"n\")] UNSPEC_ICM))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH\"\n@@ -3692,6 +3713,7 @@\n    icm\\t%0,%2,%S1\n    icmy\\t%0,%2,%S1\"\n   [(set_attr \"op_type\" \"RS,RSY\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n ;\n@@ -3747,7 +3769,7 @@\n \n (define_insn_and_split \"*pre_z10_extzv<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(zero_extract:GPR (match_operand:QI 1 \"s_operand\" \"QS\")\n+\t(zero_extract:GPR (match_operand:QI 1 \"s_operand\" \"S\")\n \t\t          (match_operand 2 \"nonzero_shift_count_operand\" \"\")\n \t\t          (const_int 0)))\n    (clobber (reg:CC CC_REGNUM))]\n@@ -3771,7 +3793,7 @@\n \n (define_insn_and_split \"*pre_z10_extv<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(sign_extract:GPR (match_operand:QI 1 \"s_operand\" \"QS\")\n+\t(sign_extract:GPR (match_operand:QI 1 \"s_operand\" \"S\")\n \t\t          (match_operand 2 \"nonzero_shift_count_operand\" \"\")\n \t\t          (const_int 0)))\n    (clobber (reg:CC CC_REGNUM))]\n@@ -4070,10 +4092,11 @@\n \t\t\t\t    : \"stcmy\\t%2,%1,%S0\";\n }\n   [(set_attr \"op_type\" \"RS,RSY\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super,z10_super\")])\n \n (define_insn \"*insvdi_mem_reghigh\"\n-  [(set (zero_extract:DI (match_operand:QI 0 \"memory_operand\" \"+QS\")\n+  [(set (zero_extract:DI (match_operand:QI 0 \"memory_operand\" \"+S\")\n \t\t\t (match_operand 1 \"const_int_operand\" \"n\")\n \t\t\t (const_int 0))\n \t(lshiftrt:DI (match_operand:DI 2 \"register_operand\" \"d\")\n@@ -4156,7 +4179,7 @@\n \n (define_insn \"*extendsidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d\")\n-        (sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"d,RT,b\")))]\n+        (sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"d,T,b\")))]\n   \"TARGET_ZARCH\"\n   \"@\n    lgfr\\t%0,%1\n@@ -4200,7 +4223,7 @@\n \n (define_insn \"*extendhidi2_extimm\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d\")\n-        (sign_extend:DI (match_operand:HI 1 \"general_operand\" \"d,RT,b\")))]\n+        (sign_extend:DI (match_operand:HI 1 \"general_operand\" \"d,T,b\")))]\n   \"TARGET_ZARCH && TARGET_EXTIMM\"\n   \"@\n    lghr\\t%0,%1\n@@ -4213,7 +4236,7 @@\n \n (define_insn \"*extendhidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (sign_extend:DI (match_operand:HI 1 \"memory_operand\" \"RT\")))]\n+        (sign_extend:DI (match_operand:HI 1 \"memory_operand\" \"T\")))]\n   \"TARGET_ZARCH\"\n   \"lgh\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXY\")\n@@ -4245,6 +4268,7 @@\n    lh\\t%0,%1\n    lhy\\t%0,%1\"\n   [(set_attr \"op_type\" \"RX,RXY\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n ;\n@@ -4254,7 +4278,7 @@\n ; lbr, lgbr, lb, lgb\n (define_insn \"*extendqi<mode>2_extimm\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n-        (sign_extend:GPR (match_operand:QI 1 \"nonimmediate_operand\" \"d,RT\")))]\n+        (sign_extend:GPR (match_operand:QI 1 \"nonimmediate_operand\" \"d,T\")))]\n   \"TARGET_EXTIMM\"\n   \"@\n    l<g>br\\t%0,%1\n@@ -4265,7 +4289,7 @@\n ; lb, lgb\n (define_insn \"*extendqi<mode>2\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-        (sign_extend:GPR (match_operand:QI 1 \"memory_operand\" \"RT\")))]\n+        (sign_extend:GPR (match_operand:QI 1 \"memory_operand\" \"T\")))]\n   \"!TARGET_EXTIMM && TARGET_LONG_DISPLACEMENT\"\n   \"l<g>b\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXY\")\n@@ -4310,7 +4334,7 @@\n \n (define_insn \"*zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d\")\n-        (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"d,RT,b\")))]\n+        (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"d,T,b\")))]\n   \"TARGET_ZARCH\"\n   \"@\n    llgfr\\t%0,%1\n@@ -4327,7 +4351,7 @@\n \n (define_insn \"*llgt_sidi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (and:DI (subreg:DI (match_operand:SI 1 \"memory_operand\" \"RT\") 0)\n+        (and:DI (subreg:DI (match_operand:SI 1 \"memory_operand\" \"T\") 0)\n \t\t(const_int 2147483647)))]\n   \"TARGET_ZARCH\"\n   \"llgt\\t%0,%1\"\n@@ -4336,7 +4360,7 @@\n \n (define_insn_and_split \"*llgt_sidi_split\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (and:DI (subreg:DI (match_operand:SI 1 \"memory_operand\" \"RT\") 0)\n+        (and:DI (subreg:DI (match_operand:SI 1 \"memory_operand\" \"T\") 0)\n \t\t(const_int 2147483647)))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH\"\n@@ -4349,7 +4373,7 @@\n \n (define_insn \"*llgt_sisi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"d,RT\")\n+        (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"d,T\")\n \t\t(const_int 2147483647)))]\n   \"TARGET_ZARCH\"\n   \"@\n@@ -4423,7 +4447,7 @@\n ; llhrl, llghrl\n (define_insn \"*zero_extendhi<mode>2_z10\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d,d,d\")\n-        (zero_extend:GPR (match_operand:HI 1 \"nonimmediate_operand\" \"d,RT,b\")))]\n+        (zero_extend:GPR (match_operand:HI 1 \"nonimmediate_operand\" \"d,T,b\")))]\n   \"TARGET_Z10\"\n   \"@\n    ll<g>hr\\t%0,%1\n@@ -4437,7 +4461,7 @@\n ; llhr, llcr, llghr, llgcr, llh, llc, llgh, llgc\n (define_insn \"*zero_extend<HQI:mode><GPR:mode>2_extimm\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n-        (zero_extend:GPR (match_operand:HQI 1 \"nonimmediate_operand\" \"d,RT\")))]\n+        (zero_extend:GPR (match_operand:HQI 1 \"nonimmediate_operand\" \"d,T\")))]\n   \"TARGET_EXTIMM\"\n   \"@\n    ll<g><hc>r\\t%0,%1\n@@ -4448,15 +4472,15 @@\n ; llgh, llgc\n (define_insn \"*zero_extend<HQI:mode><GPR:mode>2\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-        (zero_extend:GPR (match_operand:HQI 1 \"memory_operand\" \"RT\")))]\n+        (zero_extend:GPR (match_operand:HQI 1 \"memory_operand\" \"T\")))]\n   \"TARGET_ZARCH && !TARGET_EXTIMM\"\n   \"llg<hc>\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXY\")\n    (set_attr \"z10prop\" \"z10_fwd_A3\")])\n \n (define_insn_and_split \"*zero_extendhisi2_31\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n-        (zero_extend:SI (match_operand:HI 1 \"s_operand\" \"QS\")))\n+        (zero_extend:SI (match_operand:HI 1 \"s_operand\" \"S\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"!TARGET_ZARCH\"\n   \"#\"\n@@ -4469,7 +4493,7 @@\n \n (define_insn_and_split \"*zero_extendqisi2_31\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n-        (zero_extend:SI (match_operand:QI 1 \"memory_operand\" \"RT\")))]\n+        (zero_extend:SI (match_operand:QI 1 \"memory_operand\" \"T\")))]\n   \"!TARGET_ZARCH\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -4493,15 +4517,15 @@\n \n (define_insn \"*zero_extendqihi2_64\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-        (zero_extend:HI (match_operand:QI 1 \"memory_operand\" \"RT\")))]\n+        (zero_extend:HI (match_operand:QI 1 \"memory_operand\" \"T\")))]\n   \"TARGET_ZARCH && !TARGET_EXTIMM\"\n   \"llgc\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXY\")\n    (set_attr \"z10prop\" \"z10_fwd_A3\")])\n \n (define_insn_and_split \"*zero_extendqihi2_31\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=&d\")\n-        (zero_extend:HI (match_operand:QI 1 \"memory_operand\" \"RT\")))]\n+        (zero_extend:HI (match_operand:QI 1 \"memory_operand\" \"T\")))]\n   \"!TARGET_ZARCH\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -5213,7 +5237,7 @@\n \n (define_insn \"*adddi3_sign\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (plus:DI (sign_extend:DI (match_operand:SI 2 \"general_operand\" \"d,RT\"))\n+        (plus:DI (sign_extend:DI (match_operand:SI 2 \"general_operand\" \"d,T\"))\n                  (match_operand:DI 1 \"register_operand\" \"0,0\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH\"\n@@ -5225,7 +5249,7 @@\n \n (define_insn \"*adddi3_zero_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:DI (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,RT\"))\n+        (compare (plus:DI (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,T\"))\n                           (match_operand:DI 1 \"register_operand\" \"0,0\"))\n                  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n@@ -5239,7 +5263,7 @@\n \n (define_insn \"*adddi3_zero_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:DI (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,RT\"))\n+        (compare (plus:DI (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,T\"))\n                           (match_operand:DI 1 \"register_operand\" \"0,0\"))\n                  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=d,d\"))]\n@@ -5252,7 +5276,7 @@\n \n (define_insn \"*adddi3_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (plus:DI (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,RT\"))\n+        (plus:DI (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,T\"))\n                  (match_operand:DI 1 \"register_operand\" \"0,0\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH\"\n@@ -5342,6 +5366,7 @@\n    ah\\t%0,%2\n    ahy\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RX,RXY\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z196prop\" \"z196_cracked,z196_cracked\")])\n \n ;\n@@ -5350,9 +5375,9 @@\n \n ; ark, agrk, ar, ahi, ahik, aghik, alfi, slfi, a, ay, agr, aghi, algfi, slgfi, ag, asi, agsi\n (define_insn \"*add<mode>3\"\n-  [(set (match_operand:GPR 0 \"nonimmediate_operand\"           \"=d,d,d,d, d, d,d,d,QS\")\n-        (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,d,0,d, 0, 0,0,0, 0\")\n-\t\t  (match_operand:GPR 2 \"general_operand\"      \" d,d,K,K,Op,On,R,T, C\") ) )\n+  [(set (match_operand:GPR 0 \"nonimmediate_operand\"           \"=d,d,d,d, d, d,d,d,S\")\n+        (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,d,0,d, 0, 0,0,0,0\")\n+\t\t  (match_operand:GPR 2 \"general_operand\"      \" d,d,K,K,Op,On,R,T,C\") ) )\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n   \"@\n@@ -5366,7 +5391,7 @@\n    a<y>\\t%0,%2\n    a<g>si\\t%0,%c2\"\n   [(set_attr \"op_type\"  \"RR<E>,RRF,RI,RIE,RIL,RIL,RX<Y>,RXY,SIY\")\n-   (set_attr \"cpu_facility\" \"*,z196,*,z196,extimm,extimm,*,*,z10\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,z196,extimm,extimm,*,longdisp,z10\")\n    (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,*,z10_super_E1,z10_super_E1,\n                         z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n@@ -5389,7 +5414,7 @@\n    al<y>\\t%0,%2\n    al<g>si\\t%0,%c2\"\n   [(set_attr \"op_type\"      \"RR<E>,RRF,RIL,RIL,RIE,RX<Y>,RXY,SIY\")\n-   (set_attr \"cpu_facility\" \"*,z196,extimm,extimm,z196,*,*,z10\")\n+   (set_attr \"cpu_facility\" \"*,z196,extimm,extimm,z196,*,longdisp,z10\")\n    (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,z10_super_E1,*,\n                         z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n@@ -5407,16 +5432,16 @@\n    al<g>\\t%0,%2\n    al<y>\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n-   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,z10_super_E1\")])\n \n ; alr, alfi, slfi, al, aly, algr, algfi, slgfi, alg, alsi, algsi, alrk, algrk, alhsik, alghsik\n (define_insn \"*add<mode>3_carry2_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,d, 0, 0,d,0,0, 0\")\n-\t\t\t   (match_operand:GPR 2 \"general_operand\"      \" d,d,Op,On,K,R,T, C\"))\n+        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,d, 0, 0,d,0,0,0\")\n+\t\t\t   (match_operand:GPR 2 \"general_operand\"      \" d,d,Op,On,K,R,T,C\"))\n                  (match_dup 2)))\n-   (set (match_operand:GPR 0 \"nonimmediate_operand\"                    \"=d,d, d, d,d,d,d,RS\")\n+   (set (match_operand:GPR 0 \"nonimmediate_operand\"                    \"=d,d, d, d,d,d,d,S\")\n         (plus:GPR (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCL1mode)\"\n   \"@\n@@ -5429,7 +5454,7 @@\n    al<y>\\t%0,%2\n    al<g>si\\t%0,%c2\"\n   [(set_attr \"op_type\"  \"RR<E>,RRF,RIL,RIL,RIE,RX<Y>,RXY,SIY\")\n-   (set_attr \"cpu_facility\" \"*,z196,extimm,extimm,z196,*,*,z10\")\n+   (set_attr \"cpu_facility\" \"*,z196,extimm,extimm,z196,*,longdisp,z10\")\n    (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,z10_super_E1,*,\n                         z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n@@ -5447,16 +5472,16 @@\n    al<g>\\t%0,%2\n    al<y>\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n-   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,z10_super_E1\")])\n \n ; alr, alfi, slfi, al, aly, algr, algfi, slgfi, alg, alsi, algsi, alrk, algrk, alhsik, alghsik\n (define_insn \"*add<mode>3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,d, 0, 0,d,0,0, 0\")\n-\t\t\t   (match_operand:GPR 2 \"general_operand\"      \" d,d,Op,On,K,R,T, C\"))\n+        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,d, 0, 0,d,0,0,0\")\n+\t\t\t   (match_operand:GPR 2 \"general_operand\"      \" d,d,Op,On,K,R,T,C\"))\n                  (const_int 0)))\n-   (set (match_operand:GPR 0 \"nonimmediate_operand\"                    \"=d,d, d, d,d,d,d,RS\")\n+   (set (match_operand:GPR 0 \"nonimmediate_operand\"                    \"=d,d, d, d,d,d,d,S\")\n         (plus:GPR (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCLmode)\"\n   \"@\n@@ -5469,7 +5494,7 @@\n    al<y>\\t%0,%2\n    al<g>si\\t%0,%c2\"\n   [(set_attr \"op_type\"  \"RR<E>,RRF,RIL,RIL,RIE,RX<Y>,RXY,SIY\")\n-   (set_attr \"cpu_facility\" \"*,z196,extimm,extimm,z196,*,*,z10\")\n+   (set_attr \"cpu_facility\" \"*,z196,extimm,extimm,z196,*,longdisp,z10\")\n    (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,z10_super_E1,\n                         *,z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n@@ -5487,7 +5512,7 @@\n    al<g>\\t%0,%2\n    al<y>\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n-   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,z10_super_E1\")])\n \n ; alr, al, aly, algr, alg, alrk, algrk\n@@ -5503,16 +5528,16 @@\n    al<g>\\t%0,%2\n    al<y>\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n-   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,z10_super_E1\")])\n \n ; ahi, afi, aghi, agfi, asi, agsi\n (define_insn \"*add<mode>3_imm_cc\"\n   [(set (reg CC_REGNUM)\n         (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \" 0, d,0, 0\")\n-\t\t\t   (match_operand:GPR 2 \"const_int_operand\"    \" K, K,Os, C\"))\n+\t\t\t   (match_operand:GPR 2 \"const_int_operand\"    \" K, K,Os,C\"))\n                  (const_int 0)))\n-   (set (match_operand:GPR 0 \"nonimmediate_operand\"                    \"=d, d,d,QS\")\n+   (set (match_operand:GPR 0 \"nonimmediate_operand\"                    \"=d, d,d, S\")\n         (plus:GPR (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCAmode)\n    && (CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'K', \\\"K\\\")\n@@ -5704,7 +5729,7 @@\n (define_insn \"*subdi3_sign\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (minus:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                  (sign_extend:DI (match_operand:SI 2 \"general_operand\" \"d,RT\"))))\n+                  (sign_extend:DI (match_operand:SI 2 \"general_operand\" \"d,T\"))))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH\"\n   \"@\n@@ -5717,7 +5742,7 @@\n (define_insn \"*subdi3_zero_cc\"\n   [(set (reg CC_REGNUM)\n         (compare (minus:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                           (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,RT\")))\n+                           (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,T\")))\n                  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (minus:DI (match_dup 1) (zero_extend:DI (match_dup 2))))]\n@@ -5731,7 +5756,7 @@\n (define_insn \"*subdi3_zero_cconly\"\n   [(set (reg CC_REGNUM)\n         (compare (minus:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                           (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,RT\")))\n+                           (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,T\")))\n                  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=d,d\"))]\n   \"s390_match_ccmode (insn, CCLmode) && TARGET_ZARCH\"\n@@ -5744,7 +5769,7 @@\n (define_insn \"*subdi3_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (minus:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                  (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,RT\"))))\n+                  (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,T\"))))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH\"\n   \"@\n@@ -5832,6 +5857,7 @@\n    sh\\t%0,%2\n    shy\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RX,RXY\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z196prop\" \"z196_cracked,z196_cracked\")])\n \n ;\n@@ -5851,7 +5877,7 @@\n    s<g>\\t%0,%2\n    s<y>\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n-   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_c_E1,*,z10_super_E1,z10_super_E1\")])\n \n ; slr, sl, sly, slgr, slg, slrk, slgrk\n@@ -5869,7 +5895,7 @@\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n-   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_c_E1,*,z10_super_E1,z10_super_E1\")])\n \n ; slr, sl, sly, slgr, slg, slrk, slgrk\n@@ -5886,7 +5912,7 @@\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n-   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_c_E1,*,z10_super_E1,z10_super_E1\")])\n \n ; slr, sl, sly, slgr, slg, slrk, slgrk\n@@ -5904,7 +5930,7 @@\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n-   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_c_E1,*,z10_super_E1,z10_super_E1\")])\n \n ; slr, sl, sly, slgr, slg, slrk, slgrk\n@@ -5921,7 +5947,7 @@\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n-   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_c_E1,*,z10_super_E1,z10_super_E1\")])\n \n ; slr, sl, sly, slgr, slg, slrk, slgrk\n@@ -5938,7 +5964,7 @@\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n-   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_c_E1,*,z10_super_E1,z10_super_E1\")])\n \n \n@@ -5955,7 +5981,7 @@\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n-   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_c_E1,*,z10_super_E1,z10_super_E1\")])\n \n \n@@ -6033,7 +6059,7 @@\n         (compare\n           (plus:GPR (plus:GPR (match_operand:GPR 3 \"s390_alc_comparison\" \"\")\n                               (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,0\"))\n-                    (match_operand:GPR 2 \"general_operand\" \"d,RT\"))\n+                    (match_operand:GPR 2 \"general_operand\" \"d,T\"))\n           (match_dup 1)))\n    (set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n         (plus:GPR (plus:GPR (match_dup 3) (match_dup 1)) (match_dup 2)))]\n@@ -6050,7 +6076,7 @@\n         (compare\n           (plus:GPR (plus:GPR (match_operand:GPR 3 \"s390_alc_comparison\" \"\")\n                               (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,0\"))\n-                    (match_operand:GPR 2 \"general_operand\" \"d,RT\"))\n+                    (match_operand:GPR 2 \"general_operand\" \"d,T\"))\n           (match_dup 1)))\n    (clobber (match_scratch:GPR 0 \"=d,d\"))]\n   \"s390_match_ccmode (insn, CCL1mode) && TARGET_CPU_ZARCH\"\n@@ -6068,7 +6094,7 @@\n         (compare\n           (plus:GPR (plus:GPR (match_operand:GPR 3 \"s390_alc_comparison\" \"\")\n                               (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,0\"))\n-                    (match_operand:GPR 2 \"general_operand\" \"d,RT\"))\n+                    (match_operand:GPR 2 \"general_operand\" \"d,T\"))\n           (match_dup 2)))\n    (set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n         (plus:GPR (plus:GPR (match_dup 3) (match_dup 1)) (match_dup 2)))]\n@@ -6084,7 +6110,7 @@\n         (compare\n           (plus:GPR (plus:GPR (match_operand:GPR 3 \"s390_alc_comparison\" \"\")\n                               (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,0\"))\n-                    (match_operand:GPR 2 \"general_operand\" \"d,RT\"))\n+                    (match_operand:GPR 2 \"general_operand\" \"d,T\"))\n           (match_dup 2)))\n    (clobber (match_scratch:GPR 0 \"=d,d\"))]\n   \"s390_match_ccmode (insn, CCL1mode) && TARGET_CPU_ZARCH\"\n@@ -6099,7 +6125,7 @@\n         (compare\n           (plus:GPR (plus:GPR (match_operand:GPR 3 \"s390_alc_comparison\" \"\")\n                               (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,0\"))\n-                    (match_operand:GPR 2 \"general_operand\" \"d,RT\"))\n+                    (match_operand:GPR 2 \"general_operand\" \"d,T\"))\n           (const_int 0)))\n    (set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n         (plus:GPR (plus:GPR (match_dup 3) (match_dup 1)) (match_dup 2)))]\n@@ -6114,7 +6140,7 @@\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n         (plus:GPR (plus:GPR (match_operand:GPR 3 \"s390_alc_comparison\" \"\")\n                             (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,0\"))\n-                  (match_operand:GPR 2 \"general_operand\" \"d,RT\")))\n+                  (match_operand:GPR 2 \"general_operand\" \"d,T\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_CPU_ZARCH\"\n   \"@\n@@ -6127,7 +6153,7 @@\n   [(set (reg CC_REGNUM)\n         (compare\n           (minus:GPR (minus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"0,0\")\n-                                (match_operand:GPR 2 \"general_operand\" \"d,RT\"))\n+                                (match_operand:GPR 2 \"general_operand\" \"d,T\"))\n                      (match_operand:GPR 3 \"s390_slb_comparison\" \"\"))\n           (const_int 0)))\n    (set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n@@ -6143,7 +6169,7 @@\n (define_insn \"*sub<mode>3_slb\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n         (minus:GPR (minus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"0,0\")\n-                              (match_operand:GPR 2 \"general_operand\" \"d,RT\"))\n+                              (match_operand:GPR 2 \"general_operand\" \"d,T\"))\n                    (match_operand:GPR 3 \"s390_slb_comparison\" \"\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_CPU_ZARCH\"\n@@ -6255,13 +6281,13 @@\n \n ; locr, loc, stoc, locgr, locg, stocg\n (define_insn_and_split \"*mov<mode>cc\"\n-  [(set (match_operand:GPR 0 \"nonimmediate_operand\"   \"=d,d, d, d,QS,QS,&d\")\n+  [(set (match_operand:GPR 0 \"nonimmediate_operand\"   \"=d,d,d,d,S,S,&d\")\n \t(if_then_else:GPR\n \t  (match_operator 1 \"s390_comparison\"\n-\t    [(match_operand 2 \"cc_reg_operand\"        \" c,c, c, c, c, c, c\")\n+\t    [(match_operand 2 \"cc_reg_operand\"        \" c,c,c,c,c,c,c\")\n \t     (match_operand 5 \"const_int_operand\"     \"\")])\n-\t  (match_operand:GPR 3 \"nonimmediate_operand\" \" d,0,QS, 0, d, 0,QS\")\n-\t  (match_operand:GPR 4 \"nonimmediate_operand\" \" 0,d, 0,QS, 0, d,QS\")))]\n+\t  (match_operand:GPR 3 \"nonimmediate_operand\" \" d,0,S,0,d,0,S\")\n+\t  (match_operand:GPR 4 \"nonimmediate_operand\" \" 0,d,0,S,0,d,S\")))]\n   \"TARGET_Z196\"\n   \"@\n    loc<g>r%C1\\t%0,%3\n@@ -6296,7 +6322,7 @@\n \n (define_insn \"*muldi3_sign\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (mult:DI (sign_extend:DI (match_operand:SI 2 \"general_operand\" \"d,RT\"))\n+        (mult:DI (sign_extend:DI (match_operand:SI 2 \"general_operand\" \"d,T\"))\n                  (match_operand:DI 1 \"register_operand\" \"0,0\")))]\n   \"TARGET_ZARCH\"\n   \"@\n@@ -6308,7 +6334,7 @@\n (define_insn \"muldi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d,d\")\n         (mult:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n-                 (match_operand:DI 2 \"general_operand\" \"d,K,RT,Os\")))]\n+                 (match_operand:DI 2 \"general_operand\" \"d,K,T,Os\")))]\n   \"TARGET_ZARCH\"\n   \"@\n    msgr\\t%0,%2\n@@ -6348,7 +6374,7 @@\n    msfi\\t%0,%2\"\n   [(set_attr \"op_type\"      \"RRE,RI,RX,RXY,RIL\")\n    (set_attr \"type\"         \"imulsi,imulhi,imulsi,imulsi,imulsi\")\n-   (set_attr \"cpu_facility\" \"*,*,*,*,z10\")])\n+   (set_attr \"cpu_facility\" \"*,*,*,longdisp,z10\")])\n \n ;\n ; mulsidi3 instruction pattern(s).\n@@ -6375,11 +6401,11 @@\n \n ; mlr, ml, mlgr, mlg\n (define_insn \"umul<dwh><mode>3\"\n-  [(set (match_operand:DW 0 \"register_operand\"                   \"=d, d\")\n+  [(set (match_operand:DW 0 \"register_operand\"                   \"=d,d\")\n         (mult:DW (zero_extend:DW\n-\t           (match_operand:<DWH> 1 \"register_operand\"     \"%0, 0\"))\n+\t           (match_operand:<DWH> 1 \"register_operand\"     \"%0,0\"))\n                  (zero_extend:DW\n-\t           (match_operand:<DWH> 2 \"nonimmediate_operand\" \" d,RT\"))))]\n+\t           (match_operand:<DWH> 2 \"nonimmediate_operand\" \" d,T\"))))]\n   \"TARGET_CPU_ZARCH\"\n   \"@\n    ml<tg>r\\t%0,%2\n@@ -6479,7 +6505,7 @@\n           (ashift:TI\n             (zero_extend:TI\n               (mod:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                      (match_operand:DI 2 \"general_operand\" \"d,RT\")))\n+                      (match_operand:DI 2 \"general_operand\" \"d,T\")))\n             (const_int 64))\n           (zero_extend:TI (div:DI (match_dup 1) (match_dup 2)))))]\n   \"TARGET_ZARCH\"\n@@ -6496,7 +6522,7 @@\n             (zero_extend:TI\n               (mod:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n                       (sign_extend:DI\n-                        (match_operand:SI 2 \"nonimmediate_operand\" \"d,RT\"))))\n+                        (match_operand:SI 2 \"nonimmediate_operand\" \"d,T\"))))\n             (const_int 64))\n           (zero_extend:TI\n             (div:DI (match_dup 1) (sign_extend:DI (match_dup 2))))))]\n@@ -6555,7 +6581,7 @@\n               (truncate:DI\n                 (umod:TI (match_operand:TI 1 \"register_operand\" \"0,0\")\n                          (zero_extend:TI\n-                           (match_operand:DI 2 \"nonimmediate_operand\" \"d,RT\")))))\n+                           (match_operand:DI 2 \"nonimmediate_operand\" \"d,T\")))))\n             (const_int 64))\n           (zero_extend:TI\n             (truncate:DI\n@@ -6673,7 +6699,7 @@\n               (truncate:SI\n                 (umod:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n                          (zero_extend:DI\n-                           (match_operand:SI 2 \"nonimmediate_operand\" \"d,RT\")))))\n+                           (match_operand:SI 2 \"nonimmediate_operand\" \"d,T\")))))\n             (const_int 32))\n           (zero_extend:DI\n             (truncate:SI\n@@ -6897,10 +6923,10 @@\n (define_insn \"*anddi3_cc\"\n   [(set (reg CC_REGNUM)\n         (compare\n-\t  (and:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,d, 0,    d\")\n-                  (match_operand:DI 2 \"general_operand\"      \" d,d,RT,NxxDq\"))\n+\t  (and:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,d,0,    d\")\n+                  (match_operand:DI 2 \"general_operand\"      \" d,d,T,NxxDq\"))\n           (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\"               \"=d,d, d,    d\")\n+   (set (match_operand:DI 0 \"register_operand\"               \"=d,d,d,    d\")\n         (and:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_ZARCH && s390_match_ccmode(insn, CCTmode)\"\n   \"@\n@@ -6915,10 +6941,10 @@\n (define_insn \"*anddi3_cconly\"\n   [(set (reg CC_REGNUM)\n         (compare\n-\t  (and:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,d, 0,    d\")\n-                  (match_operand:DI 2 \"general_operand\"      \" d,d,RT,NxxDq\"))\n+\t  (and:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,d,0,    d\")\n+                  (match_operand:DI 2 \"general_operand\"      \" d,d,T,NxxDq\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:DI 0                              \"=d,d, d,    d\"))]\n+   (clobber (match_scratch:DI 0                              \"=d,d,d,    d\"))]\n   \"TARGET_ZARCH\n    && s390_match_ccmode(insn, CCTmode)\n    /* Do not steal TM patterns.  */\n@@ -6934,12 +6960,12 @@\n \n (define_insn \"*anddi3\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-            \"=d,d,    d,    d,    d,    d,    d,    d,d,d, d,    d,   AQ,Q\")\n+            \"=d,d,    d,    d,    d,    d,    d,    d,d,d,d,    d,   AQ,Q\")\n         (and:DI\n \t  (match_operand:DI 1 \"nonimmediate_operand\"\n-            \"%d,o,    0,    0,    0,    0,    0,    0,0,d, 0,    d,    0,0\")\n+            \"%d,o,    0,    0,    0,    0,    0,    0,0,d,0,    d,    0,0\")\n           (match_operand:DI 2 \"general_operand\"\n-            \"M, M,N0HDF,N1HDF,N2HDF,N3HDF,N0SDF,N1SDF,d,d,RT,NxxDq,NxQDF,Q\")))\n+            \"M, M,N0HDF,N1HDF,N2HDF,N3HDF,N0SDF,N1SDF,d,d,T,NxxDq,NxQDF,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n@@ -7037,7 +7063,7 @@\n    ny\\t%0,%2\n    risbg\\t%0,%1,%t2,128+%f2,0\"\n   [(set_attr \"op_type\"  \"RIL,RR,RRF,RX,RXY,RIE\")\n-   (set_attr \"cpu_facility\" \"*,*,z196,*,*,z10\")\n+   (set_attr \"cpu_facility\" \"*,*,z196,*,longdisp,z10\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,\n \t\t\tz10_super_E1,z10_super_E1,z10_super_E1\")])\n \n@@ -7060,7 +7086,7 @@\n    ny\\t%0,%2\n    risbg\\t%0,%1,%t2,128+%f2,0\"\n   [(set_attr \"op_type\"  \"RIL,RR,RRF,RX,RXY,RIE\")\n-   (set_attr \"cpu_facility\" \"*,*,z196,*,*,z10\")\n+   (set_attr \"cpu_facility\" \"*,*,z196,*,longdisp,z10\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,\n                         z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n@@ -7087,7 +7113,7 @@\n    #\n    #\"\n   [(set_attr \"op_type\"  \"RRE,RXE,RI,RI,RIL,RR,RRF,RX,RXY,RIE,SI,SS\")\n-   (set_attr \"cpu_facility\" \"*,*,*,*,*,*,z196,*,*,z10,*,*\")\n+   (set_attr \"cpu_facility\" \"*,*,*,*,*,*,z196,*,longdisp,z10,*,*\")\n    (set_attr \"z10prop\" \"*,\n                         *,\n                         z10_super_E1,\n@@ -7189,7 +7215,7 @@\n    niy\\t%S0,%b2\n    #\"\n   [(set_attr \"op_type\"  \"RR,RRF,RI,SI,SIY,SS\")\n-   (set_attr \"cpu_facility\" \"*,z196,*,*,*,*\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,*,longdisp,*\")\n    (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,z10_super,z10_super,*\")])\n \n (define_insn \"*andqi3_esa\"\n@@ -7283,10 +7309,10 @@\n \n (define_insn \"*iordi3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,d, 0\")\n-                         (match_operand:DI 2 \"general_operand\"      \" d,d,RT\"))\n+        (compare (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,d,0\")\n+                         (match_operand:DI 2 \"general_operand\"      \" d,d,T\"))\n                  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\"                      \"=d,d, d\")\n+   (set (match_operand:DI 0 \"register_operand\"                      \"=d,d,d\")\n         (ior:DI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode(insn, CCTmode) && TARGET_ZARCH\"\n   \"@\n@@ -7300,7 +7326,7 @@\n (define_insn \"*iordi3_cconly\"\n   [(set (reg CC_REGNUM)\n         (compare (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,d,0\")\n-                         (match_operand:DI 2 \"general_operand\"      \" d,d,RT\"))\n+                         (match_operand:DI 2 \"general_operand\"      \" d,d,T\"))\n                  (const_int 0)))\n    (clobber (match_scratch:DI 0                                     \"=d,d,d\"))]\n   \"s390_match_ccmode(insn, CCTmode) && TARGET_ZARCH\"\n@@ -7314,11 +7340,11 @@\n \n (define_insn \"*iordi3\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-                               \"=d,    d,    d,    d,    d,    d,d,d, d,   AQ,Q\")\n+                               \"=d,    d,    d,    d,    d,    d,d,d,d,   AQ,Q\")\n         (ior:DI (match_operand:DI 1 \"nonimmediate_operand\"\n-                            \"   %0,    0,    0,    0,    0,    0,0,d, 0,    0,0\")\n+                            \"   %0,    0,    0,    0,    0,    0,0,d,0,    0,0\")\n                 (match_operand:DI 2 \"general_operand\"\n-                            \"N0HD0,N1HD0,N2HD0,N3HD0,N0SD0,N1SD0,d,d,RT,NxQD0,Q\")))\n+                            \"N0HD0,N1HD0,N2HD0,N3HD0,N0SD0,N1SD0,d,d,T,NxQD0,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n@@ -7376,7 +7402,7 @@\n    o\\t%0,%2\n    oy\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RIL,RR,RRF,RX,RXY\")\n-   (set_attr \"cpu_facility\" \"*,*,z196,*,*\")\n+   (set_attr \"cpu_facility\" \"*,*,z196,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*iorsi3_cconly\"\n@@ -7393,7 +7419,7 @@\n    o\\t%0,%2\n    oy\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RIL,RR,RRF,RX,RXY\")\n-   (set_attr \"cpu_facility\" \"*,*,z196,*,*\")\n+   (set_attr \"cpu_facility\" \"*,*,z196,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*iorsi3_zarch\"\n@@ -7413,7 +7439,7 @@\n    #\n    #\"\n   [(set_attr \"op_type\"  \"RI,RI,RIL,RR,RRF,RX,RXY,SI,SS\")\n-   (set_attr \"cpu_facility\" \"*,*,*,*,z196,*,*,*,*\")\n+   (set_attr \"cpu_facility\" \"*,*,*,*,z196,*,longdisp,*,*\")\n    (set_attr \"z10prop\" \"z10_super_E1,\n                         z10_super_E1,\n                         z10_super_E1,\n@@ -7509,7 +7535,7 @@\n    oiy\\t%S0,%b2\n    #\"\n   [(set_attr \"op_type\" \"RR,RRF,RI,SI,SIY,SS\")\n-   (set_attr \"cpu_facility\" \"*,z196,*,*,*,*\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,*,longdisp,*\")\n    (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,\n                         z10_super,z10_super,*\")])\n \n@@ -7619,10 +7645,10 @@\n \n (define_insn \"*xordi3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,d, 0\")\n-                         (match_operand:DI 2 \"general_operand\"      \" d,d,RT\"))\n+        (compare (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,d,0\")\n+                         (match_operand:DI 2 \"general_operand\"      \" d,d,T\"))\n                  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\"                      \"=d,d, d\")\n+   (set (match_operand:DI 0 \"register_operand\"                      \"=d,d,d\")\n         (xor:DI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode(insn, CCTmode) && TARGET_ZARCH\"\n   \"@\n@@ -7635,10 +7661,10 @@\n \n (define_insn \"*xordi3_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,d, 0\")\n-                         (match_operand:DI 2 \"general_operand\"      \" d,d,RT\"))\n+        (compare (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,d,0\")\n+                         (match_operand:DI 2 \"general_operand\"      \" d,d,T\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:DI 0                                     \"=d,d, d\"))]\n+   (clobber (match_scratch:DI 0                                     \"=d,d,d\"))]\n   \"s390_match_ccmode(insn, CCTmode) && TARGET_ZARCH\"\n   \"@\n    xgr\\t%0,%2\n@@ -7649,9 +7675,9 @@\n    (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1\")])\n \n (define_insn \"*xordi3\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\"         \"=d,    d,d,d, d,   AQ,Q\")\n-        (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,    0,0,d, 0,    0,0\")\n-                (match_operand:DI 2 \"general_operand\"   \"N0SD0,N1SD0,d,d,RT,NxQD0,Q\")))\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"         \"=d,    d,d,d,d,   AQ,Q\")\n+        (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,    0,0,d,0,    0,0\")\n+                (match_operand:DI 2 \"general_operand\"   \"N0SD0,N1SD0,d,d,T,NxQD0,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n@@ -7696,7 +7722,7 @@\n    x\\t%0,%2\n    xy\\t%0,%2\"\n   [(set_attr \"op_type\" \"RIL,RR,RRF,RX,RXY\")\n-   (set_attr \"cpu_facility\" \"*,*,z196,*,*\")\n+   (set_attr \"cpu_facility\" \"*,*,z196,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,\n                         z10_super_E1,z10_super_E1\")])\n \n@@ -7714,7 +7740,7 @@\n    x\\t%0,%2\n    xy\\t%0,%2\"\n   [(set_attr \"op_type\" \"RIL,RR,RRF,RX,RXY\")\n-   (set_attr \"cpu_facility\" \"*,*,z196,*,*\")\n+   (set_attr \"cpu_facility\" \"*,*,z196,*,longdisp\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,\n                         z10_super_E1,z10_super_E1\")])\n \n@@ -7733,7 +7759,7 @@\n    #\n    #\"\n   [(set_attr \"op_type\"  \"RIL,RR,RRF,RX,RXY,SI,SS\")\n-   (set_attr \"cpu_facility\" \"*,*,z196,*,*,*,*\")\n+   (set_attr \"cpu_facility\" \"*,*,z196,*,longdisp,*,*\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,\n                         z10_super_E1,z10_super_E1,*,*\")])\n \n@@ -7795,7 +7821,7 @@\n    xiy\\t%S0,%b2\n    #\"\n   [(set_attr \"op_type\"  \"RIL,RR,RRF,SI,SIY,SS\")\n-   (set_attr \"cpu_facility\" \"*,*,z196,*,*,*\")\n+   (set_attr \"cpu_facility\" \"*,*,z196,*,longdisp,*\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,z10_super,z10_super,*\")])\n \n \n@@ -8778,8 +8804,8 @@\n ; clrt, clgrt, clfit, clgit, clt, clgt\n (define_insn \"*cmp_and_trap_unsigned_int<mode>\"\n   [(trap_if (match_operator 0 \"s390_unsigned_integer_comparison\"\n-\t       [(match_operand:GPR 1 \"register_operand\" \"d,d, d\")\n-\t\t(match_operand:GPR 2 \"general_operand\"  \"d,D,RT\")])\n+\t       [(match_operand:GPR 1 \"register_operand\" \"d,d,d\")\n+\t\t(match_operand:GPR 2 \"general_operand\"  \"d,D,T\")])\n \t    (const_int 0))]\n   \"TARGET_Z10\"\n   \"@\n@@ -8793,7 +8819,7 @@\n \n ; lat, lgat\n (define_insn \"*load_and_trap<mode>\"\n-  [(trap_if (eq (match_operand:GPR 0 \"memory_operand\"  \"RT\")\n+  [(trap_if (eq (match_operand:GPR 0 \"memory_operand\"  \"T\")\n \t\t(const_int 0))\n \t    (const_int 0))\n    (set (match_operand:GPR 1 \"register_operand\" \"=d\")\n@@ -9092,7 +9118,7 @@\n         (if_then_else\n           (ne (match_operand:SI 1 \"register_operand\" \"d\")\n               (const_int 1))\n-          (match_operand 0 \"address_operand\" \"ZQZR\")\n+          (match_operand 0 \"address_operand\" \"ZR\")\n           (pc)))\n    (set (match_operand:SI 2 \"register_operand\" \"=1\")\n         (plus:SI (match_dup 1) (const_int -1)))\n@@ -9204,7 +9230,7 @@\n ;\n \n (define_insn \"indirect_jump\"\n- [(set (pc) (match_operand 0 \"address_operand\" \"ZQZR\"))]\n+ [(set (pc) (match_operand 0 \"address_operand\" \"ZR\"))]\n   \"\"\n {\n   if (get_attr_op_type (insn) == OP_TYPE_RR)\n@@ -9223,7 +9249,7 @@\n ;\n \n (define_insn \"casesi_jump\"\n- [(set (pc) (match_operand 0 \"address_operand\" \"ZQZR\"))\n+ [(set (pc) (match_operand 0 \"address_operand\" \"ZR\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"\"\n {\n@@ -9447,7 +9473,7 @@\n    (set_attr \"z196prop\" \"z196_cracked\")])\n \n (define_insn \"*basr\"\n-  [(call (mem:QI (match_operand 0 \"address_operand\" \"ZQZR\"))\n+  [(call (mem:QI (match_operand 0 \"address_operand\" \"ZR\"))\n          (match_operand 1 \"const_int_operand\" \"n\"))\n    (clobber (match_operand 2 \"register_operand\" \"=r\"))]\n   \"!SIBLING_CALL_P (insn) && GET_MODE (operands[2]) == Pmode\"\n@@ -9508,7 +9534,7 @@\n \n (define_insn \"*basr_r\"\n   [(set (match_operand 0 \"\" \"\")\n-        (call (mem:QI (match_operand 1 \"address_operand\" \"ZQZR\"))\n+        (call (mem:QI (match_operand 1 \"address_operand\" \"ZR\"))\n               (match_operand 2 \"const_int_operand\" \"n\")))\n    (clobber (match_operand 3 \"register_operand\" \"=r\"))]\n   \"!SIBLING_CALL_P (insn) && GET_MODE (operands[3]) == Pmode\"\n@@ -9549,7 +9575,7 @@\n \n (define_insn \"*tls_load_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"RT\")\n+        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"T\")\n                     (match_operand:DI 2 \"\" \"\")]\n \t\t   UNSPEC_TLS_LOAD))]\n   \"TARGET_64BIT\"\n@@ -9568,6 +9594,7 @@\n    ly\\t%0,%1%J2\"\n   [(set_attr \"op_type\" \"RX,RXY\")\n    (set_attr \"type\" \"load\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"z10prop\" \"z10_fwd_A3,z10_fwd_A3\")])\n \n (define_insn \"*bras_tls\"\n@@ -9600,7 +9627,7 @@\n \n (define_insn \"*basr_tls\"\n   [(set (match_operand 0 \"\" \"\")\n-        (call (mem:QI (match_operand 1 \"address_operand\" \"ZQZR\"))\n+        (call (mem:QI (match_operand 1 \"address_operand\" \"ZR\"))\n               (match_operand 2 \"const_int_operand\" \"n\")))\n    (clobber (match_operand 3 \"register_operand\" \"=r\"))\n    (use (match_operand 4 \"\" \"\"))]\n@@ -9704,11 +9731,12 @@\n    ld\\t%0,%1\n    ldy\\t%0,%1\"\n   [(set_attr \"op_type\" \"RS,RSY,RS,RSY\")\n+   (set_attr \"cpu_facility\" \"*,longdisp,*,longdisp\")\n    (set_attr \"type\" \"lm,lm,floaddf,floaddf\")])\n \n (define_insn \"atomic_loadti_1\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=r\")\n-\t(unspec:TI [(match_operand:TI 1 \"memory_operand\" \"RT\")]\n+\t(unspec:TI [(match_operand:TI 1 \"memory_operand\" \"T\")]\n \t\t   UNSPEC_MOVA))]\n   \"TARGET_ZARCH\"\n   \"lpq\\t%0,%1\"\n@@ -9750,10 +9778,11 @@\n    std %1,%0\n    stdy %1,%0\"\n   [(set_attr \"op_type\" \"RS,RSY,RS,RSY\")\n+   (set_attr \"cpu_facility\" \"*,longdisp,*,longdisp\")\n    (set_attr \"type\" \"stm,stm,fstoredf,fstoredf\")])\n \n (define_insn \"atomic_storeti_1\"\n-  [(set (match_operand:TI 0 \"memory_operand\" \"=RT\")\n+  [(set (match_operand:TI 0 \"memory_operand\" \"=T\")\n \t(unspec:TI [(match_operand:TI 1 \"register_operand\" \"r\")]\n \t\t   UNSPEC_MOVA))]\n   \"TARGET_ZARCH\"\n@@ -9834,7 +9863,7 @@\n ; cdsg, csg\n (define_insn \"*atomic_compare_and_swap<mode>_1\"\n   [(set (match_operand:TDI 0 \"register_operand\" \"=r\")\n-\t(match_operand:TDI 1 \"memory_operand\" \"+QS\"))\n+\t(match_operand:TDI 1 \"memory_operand\" \"+S\"))\n    (set (match_dup 1)\n \t(unspec_volatile:TDI\n \t  [(match_dup 1)\n@@ -9865,6 +9894,7 @@\n    cds\\t%0,%3,%S1\n    cdsy\\t%0,%3,%S1\"\n   [(set_attr \"op_type\" \"RS,RSY\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"type\" \"sem\")])\n \n ; cs, csy\n@@ -9884,6 +9914,7 @@\n    cs\\t%0,%3,%S1\n    csy\\t%0,%3,%S1\"\n   [(set_attr \"op_type\" \"RS,RSY\")\n+   (set_attr \"cpu_facility\" \"*,longdisp\")\n    (set_attr \"type\"   \"sem\")])\n \n ;\n@@ -9911,7 +9942,7 @@\n ; lan, lang, lao, laog, lax, laxg, laa, laag\n (define_insn \"atomic_fetch_<atomic><mode>_iaf\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+QS\"))\n+\t(match_operand:GPR 1 \"memory_operand\" \"+S\"))\n    (set (match_dup 1)\n \t(unspec_volatile:GPR\n \t [(ATOMIC_Z196:GPR (match_dup 1)\n@@ -10402,9 +10433,9 @@\n ;\n \n (define_insn \"prefetch\"\n-  [(prefetch (match_operand 0    \"address_operand\"   \"ZQZRZSZT,X\")\n-\t     (match_operand:SI 1 \"const_int_operand\" \"       n,n\")\n-\t     (match_operand:SI 2 \"const_int_operand\" \"       n,n\"))]\n+  [(prefetch (match_operand 0    \"address_operand\"   \"ZT,X\")\n+\t     (match_operand:SI 1 \"const_int_operand\" \" n,n\")\n+\t     (match_operand:SI 2 \"const_int_operand\" \" n,n\"))]\n   \"TARGET_Z10\"\n {\n   switch (which_alternative)\n@@ -10435,8 +10466,8 @@\n ; FIXME: There is also mvcin but we cannot use it since src and target\n ; may overlap.\n (define_insn \"bswap<mode>2\"\n-  [(set (match_operand:GPR 0            \"nonimmediate_operand\" \"=d, d,RT\")\n-\t(bswap:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \" d,RT, d\")))]\n+  [(set (match_operand:GPR 0            \"nonimmediate_operand\" \"=d,d,T\")\n+\t(bswap:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \" d,T,d\")))]\n   \"TARGET_CPU_ZARCH\"\n   \"@\n    lrv<g>r\\t%0,%1\n@@ -10447,8 +10478,8 @@\n    (set_attr \"z10prop\" \"z10_super\")])\n \n (define_insn \"bswaphi2\"\n-  [(set (match_operand:HI 0           \"nonimmediate_operand\" \"=d, d,RT\")\n-\t(bswap:HI (match_operand:HI 1 \"nonimmediate_operand\" \" d,RT, d\")))]\n+  [(set (match_operand:HI 0           \"nonimmediate_operand\" \"=d,d,T\")\n+\t(bswap:HI (match_operand:HI 1 \"nonimmediate_operand\" \" d,T,d\")))]\n   \"TARGET_CPU_ZARCH\"\n   \"@\n    #\n@@ -10798,7 +10829,7 @@\n ; Non-transactional store\n \n (define_insn \"ntstg\"\n-  [(set (match_operand:DI 0 \"memory_operand\" \"=RT\")\n+  [(set (match_operand:DI 0 \"memory_operand\" \"=T\")\n \t(unspec_volatile:DI [(match_operand:DI 1 \"register_operand\" \"d\")]\n \t\t\t    UNSPECV_NTSTG))]\n   \"TARGET_HTM\"\n@@ -10844,7 +10875,7 @@\n \n (define_insn \"lcbb\"\n   [(set (match_operand:SI             0 \"register_operand\"  \"=d\")\n-\t(unspec:SI [(match_operand    1 \"address_operand\" \"ZQZR\")\n+\t(unspec:SI [(match_operand    1 \"address_operand\" \"ZR\")\n \t\t    (match_operand:SI 2 \"immediate_operand\"  \"C\")] UNSPEC_LCBB))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_Z13\""}, {"sha": "979cb29b02ae58feb7418ff426eec1550ad80897", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4be43f69daddc9123f5c2f8129311e0a702ef6/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4be43f69daddc9123f5c2f8129311e0a702ef6/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=3e4be43f69daddc9123f5c2f8129311e0a702ef6", "patch": "@@ -137,8 +137,8 @@\n \n ; Full HW vector size moves\n (define_insn \"mov<mode>\"\n-  [(set (match_operand:V_128 0 \"nonimmediate_operand\" \"=v, v,QR,  v,  v,  v,  v,  v,v,d\")\n-\t(match_operand:V_128 1 \"general_operand\"      \" v,QR, v,j00,jm1,jyy,jxx,jKK,d,v\"))]\n+  [(set (match_operand:V_128 0 \"nonimmediate_operand\" \"=v,v,R,  v,  v,  v,  v,  v,v,d\")\n+\t(match_operand:V_128 1 \"general_operand\"      \" v,R,v,j00,jm1,jyy,jxx,jKK,d,v\"))]\n   \"TARGET_VX\"\n   \"@\n    vlr\\t%v0,%v1\n@@ -178,8 +178,8 @@\n ; However, this would probably be slower.\n \n (define_insn \"mov<mode>\"\n-  [(set (match_operand:V_8 0 \"nonimmediate_operand\" \"=v,v,d, v,QR,  v,  v,  v,  v,d,  Q,  S,  Q,  S,  d,  d,d,d,d,R,T\")\n-        (match_operand:V_8 1 \"general_operand\"      \" v,d,v,QR, v,j00,jm1,jyy,jxx,d,j00,j00,jm1,jm1,j00,jm1,R,T,b,d,d\"))]\n+  [(set (match_operand:V_8 0 \"nonimmediate_operand\" \"=v,v,d,v,R,  v,  v,  v,  v,d,  Q,  S,  Q,  S,  d,  d,d,d,d,R,T\")\n+        (match_operand:V_8 1 \"general_operand\"      \" v,d,v,R,v,j00,jm1,jyy,jxx,d,j00,j00,jm1,jm1,j00,jm1,R,T,b,d,d\"))]\n   \"\"\n   \"@\n    vlr\\t%v0,%v1\n@@ -206,8 +206,8 @@\n   [(set_attr \"op_type\"      \"VRR,VRS,VRS,VRX,VRX,VRI,VRI,VRI,VRI,RR,SI,SIY,SI,SIY,RI,RI,RX,RXY,RIL,RX,RXY\")])\n \n (define_insn \"mov<mode>\"\n-  [(set (match_operand:V_16 0 \"nonimmediate_operand\" \"=v,v,d, v,QR,  v,  v,  v,  v,d,  Q,  Q,  d,  d,d,d,d,R,T,b\")\n-        (match_operand:V_16 1 \"general_operand\"      \" v,d,v,QR, v,j00,jm1,jyy,jxx,d,j00,jm1,j00,jm1,R,T,b,d,d,d\"))]\n+  [(set (match_operand:V_16 0 \"nonimmediate_operand\" \"=v,v,d,v,R,  v,  v,  v,  v,d,  Q,  Q,  d,  d,d,d,d,R,T,b\")\n+        (match_operand:V_16 1 \"general_operand\"      \" v,d,v,R,v,j00,jm1,jyy,jxx,d,j00,jm1,j00,jm1,R,T,b,d,d,d\"))]\n   \"\"\n   \"@\n    vlr\\t%v0,%v1\n@@ -233,8 +233,8 @@\n   [(set_attr \"op_type\"      \"VRR,VRS,VRS,VRX,VRX,VRI,VRI,VRI,VRI,RR,SIL,SIL,RI,RI,RX,RXY,RIL,RX,RXY,RIL\")])\n \n (define_insn \"mov<mode>\"\n-  [(set (match_operand:V_32 0 \"nonimmediate_operand\" \"=f,f,f,R,T,v,v,d, v,QR,  f,  v,  v,  v,  v,  Q,  Q,  d,  d,d,d,d,d,R,T,b\")\n-\t(match_operand:V_32 1 \"general_operand\"      \" f,R,T,f,f,v,d,v,QR, v,j00,j00,jm1,jyy,jxx,j00,jm1,j00,jm1,b,d,R,T,d,d,d\"))]\n+  [(set (match_operand:V_32 0 \"nonimmediate_operand\" \"=f,f,f,R,T,v,v,d,v,R,  f,  v,  v,  v,  v,  Q,  Q,  d,  d,d,d,d,d,R,T,b\")\n+\t(match_operand:V_32 1 \"general_operand\"      \" f,R,T,f,f,v,d,v,R,v,j00,j00,jm1,jyy,jxx,j00,jm1,j00,jm1,b,d,R,T,d,d,d\"))]\n   \"TARGET_VX\"\n   \"@\n    lder\\t%v0,%v1\n@@ -268,9 +268,9 @@\n \n (define_insn \"mov<mode>\"\n   [(set (match_operand:V_64 0 \"nonimmediate_operand\"\n-         \"=f,f,f,R,T,v,v,d, v,QR,  f,  v,  v,  v,  v,  Q,  Q,  d,  d,f,d,d,d, d,RT,b\")\n+         \"=f,f,f,R,T,v,v,d,v,R,  f,  v,  v,  v,  v,  Q,  Q,  d,  d,f,d,d,d,d,T,b\")\n         (match_operand:V_64 1 \"general_operand\"\n-         \" f,R,T,f,f,v,d,v,QR, v,j00,j00,jm1,jyy,jxx,j00,jm1,j00,jm1,d,f,b,d,RT, d,d\"))]\n+         \" f,R,T,f,f,v,d,v,R,v,j00,j00,jm1,jyy,jxx,j00,jm1,j00,jm1,d,f,b,d,T,d,d\"))]\n   \"TARGET_ZARCH\"\n   \"@\n    ldr\\t%0,%1\n@@ -322,10 +322,10 @@\n ; up with vl vlvgg vst.  Shouldn't the middle-end be able to handle\n ; that itself?\n (define_insn \"*vec_set<mode>\"\n-  [(set (match_operand:V                    0 \"register_operand\"  \"=v, v,v\")\n-\t(unspec:V [(match_operand:<non_vec> 1 \"general_operand\"    \"d,QR,K\")\n-\t\t   (match_operand:SI        2 \"nonmemory_operand\" \"an, I,I\")\n-\t\t   (match_operand:V         3 \"register_operand\"   \"0, 0,0\")]\n+  [(set (match_operand:V                    0 \"register_operand\"  \"=v,v,v\")\n+\t(unspec:V [(match_operand:<non_vec> 1 \"general_operand\"    \"d,R,K\")\n+\t\t   (match_operand:SI        2 \"nonmemory_operand\" \"an,I,I\")\n+\t\t   (match_operand:V         3 \"register_operand\"   \"0,0,0\")]\n \t\t  UNSPEC_VEC_SET))]\n   \"TARGET_VX\n    && (!CONST_INT_P (operands[2])\n@@ -359,9 +359,9 @@\n   \"TARGET_VX\")\n \n (define_insn \"*vec_extract<mode>\"\n-  [(set (match_operand:<non_vec> 0 \"nonimmediate_operand\"          \"=d,QR\")\n-\t(unspec:<non_vec> [(match_operand:V  1 \"register_operand\"   \"v, v\")\n-\t\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"an, I\")]\n+  [(set (match_operand:<non_vec> 0 \"nonimmediate_operand\"          \"=d,R\")\n+\t(unspec:<non_vec> [(match_operand:V  1 \"register_operand\"   \"v,v\")\n+\t\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"an,I\")]\n \t\t\t  UNSPEC_VEC_EXTRACT))]\n   \"TARGET_VX\n    && (!CONST_INT_P (operands[2])\n@@ -404,7 +404,7 @@\n \n (define_insn \"*vec_splats<mode>\"\n   [(set (match_operand:V_HW                          0 \"register_operand\" \"=v,v,v,v\")\n-\t(vec_duplicate:V_HW (match_operand:<non_vec> 1 \"general_operand\"  \"QR,K,v,d\")))]\n+\t(vec_duplicate:V_HW (match_operand:<non_vec> 1 \"general_operand\"  \" R,K,v,d\")))]\n   \"TARGET_VX\"\n   \"@\n    vlrep<bhfgq>\\t%v0,%1"}, {"sha": "9ab429e1a2830b6becfde455ccca52f23a076840", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4be43f69daddc9123f5c2f8129311e0a702ef6/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4be43f69daddc9123f5c2f8129311e0a702ef6/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=3e4be43f69daddc9123f5c2f8129311e0a702ef6", "patch": "@@ -70,7 +70,7 @@\n   [(set (match_operand:V_HW_32_64                     0 \"register_operand\"  \"=v\")\n \t(unspec:V_HW_32_64 [(match_operand:V_HW_32_64 1 \"register_operand\"   \"0\")\n \t\t\t    (match_operand:<tointvec> 2 \"register_operand\"   \"v\")\n-\t\t\t    (match_operand:BLK        3 \"memory_operand\"    \"QR\")\n+\t\t\t    (match_operand:BLK        3 \"memory_operand\"     \"R\")\n \t\t\t    (match_operand:QI         4 \"const_mask_operand\" \"C\")]\n \t\t\t   UNSPEC_VEC_GATHER))]\n   \"TARGET_VX && UINTVAL (operands[4]) < GET_MODE_NUNITS (<V_HW_32_64:MODE>mode)\"\n@@ -170,15 +170,15 @@\n \n (define_insn \"vec_insert_and_zero<mode>\"\n   [(set (match_operand:V_HW                    0 \"register_operand\" \"=v\")\n-\t(unspec:V_HW [(match_operand:<non_vec> 1 \"memory_operand\"   \"QR\")]\n+\t(unspec:V_HW [(match_operand:<non_vec> 1 \"memory_operand\"    \"R\")]\n \t\t     UNSPEC_VEC_INSERT_AND_ZERO))]\n   \"TARGET_VX\"\n   \"vllez<bhfgq>\\t%v0,%1\"\n   [(set_attr \"op_type\" \"VRX\")])\n \n (define_insn \"vlbb\"\n   [(set (match_operand:V16QI              0 \"register_operand\"   \"=v\")\n-\t(unspec:V16QI [(match_operand:BLK 1 \"memory_operand\"     \"QR\")\n+\t(unspec:V16QI [(match_operand:BLK 1 \"memory_operand\"      \"R\")\n \t\t       (match_operand:QI  2 \"const_mask_operand\"  \"C\")]\n \t\t      UNSPEC_VEC_LOAD_BNDRY))]\n   \"TARGET_VX && UINTVAL (operands[2]) < 7\""}]}