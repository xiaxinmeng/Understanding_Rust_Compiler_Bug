{"sha": "889dc035812dfc72033fb61b7b3433dba072e279", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg5ZGMwMzU4MTJkZmM3MjAzM2ZiNjFiN2IzNDMzZGJhMDcyZTI3OQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-08-27T19:48:46Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-08-27T19:48:46Z"}, "message": "re PR fortran/40869 ([F03] PPC assignment checking)\n\n2009-08-27  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40869\n\t* expr.c (gfc_check_pointer_assign): Enable interface check for\n\tpointer assignments involving procedure pointer components.\n\t* gfortran.h (gfc_compare_interfaces): Modified prototype.\n\t* interface.c (gfc_compare_interfaces): Add argument 'name2', to be\n\tused instead of s2->name. Don't rely on the proc_pointer attribute,\n\tbut instead on the flags handed to this function.\n\t(check_interface1,compare_parameter): Add argument for\n\tgfc_compare_interfaces.\n\t* resolve.c (check_generic_tbp_ambiguity): Ditto.\n\n2009-08-27  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40869\n\t* gfortran.dg/proc_ptr_comp_20.f90: New.\n\nFrom-SVN: r151147", "tree": {"sha": "0b4f4a7e22430637b541964f0f58ea591ed634ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b4f4a7e22430637b541964f0f58ea591ed634ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/889dc035812dfc72033fb61b7b3433dba072e279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/889dc035812dfc72033fb61b7b3433dba072e279", "html_url": "https://github.com/Rust-GCC/gccrs/commit/889dc035812dfc72033fb61b7b3433dba072e279", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/889dc035812dfc72033fb61b7b3433dba072e279/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0930984ef0f7920353aa5465322e42a17706aa3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0930984ef0f7920353aa5465322e42a17706aa3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0930984ef0f7920353aa5465322e42a17706aa3d"}], "stats": {"total": 134, "additions": 110, "deletions": 24}, "files": [{"sha": "223f88c6266c960bf614dcf646c5b46ad61129e1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/889dc035812dfc72033fb61b7b3433dba072e279/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/889dc035812dfc72033fb61b7b3433dba072e279/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=889dc035812dfc72033fb61b7b3433dba072e279", "patch": "@@ -1,3 +1,16 @@\n+2009-08-27  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40869\n+\t* expr.c (gfc_check_pointer_assign): Enable interface check for\n+\tpointer assignments involving procedure pointer components.\n+\t* gfortran.h (gfc_compare_interfaces): Modified prototype.\n+\t* interface.c (gfc_compare_interfaces): Add argument 'name2', to be\n+\tused instead of s2->name. Don't rely on the proc_pointer attribute,\n+\tbut instead on the flags handed to this function.\n+\t(check_interface1,compare_parameter): Add argument for\n+\tgfc_compare_interfaces.\n+\t* resolve.c (check_generic_tbp_ambiguity): Ditto.\n+\n 2009-08-27  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/37425"}, {"sha": "970c25939cf1bf683e655f25765b8e73b56639c0", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/889dc035812dfc72033fb61b7b3433dba072e279/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/889dc035812dfc72033fb61b7b3433dba072e279/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=889dc035812dfc72033fb61b7b3433dba072e279", "patch": "@@ -3149,6 +3149,10 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n   if (proc_pointer)\n     {\n       char err[200];\n+      gfc_symbol *s1,*s2;\n+      gfc_component *comp;\n+      const char *name;\n+\n       attr = gfc_expr_attr (rvalue);\n       if (!((rvalue->expr_type == EXPR_NULL)\n \t    || (rvalue->expr_type == EXPR_FUNCTION && attr.proc_pointer)\n@@ -3208,22 +3212,35 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n \t    }\n \t}\n \n-      /* TODO: Enable interface check for PPCs.  */\n-      if (gfc_is_proc_ptr_comp (rvalue, NULL))\n-\treturn SUCCESS;\n-      if ((rvalue->expr_type == EXPR_VARIABLE\n-\t   && !gfc_compare_interfaces (lvalue->symtree->n.sym,\n-\t\t\t\t       rvalue->symtree->n.sym, 0, 1, err,\n-\t\t\t\t       sizeof(err)))\n-\t  || (rvalue->expr_type == EXPR_FUNCTION\n-\t      && !gfc_compare_interfaces (lvalue->symtree->n.sym,\n-\t\t\t\t\t  rvalue->symtree->n.sym->result, 0, 1,\n-\t\t\t\t\t  err, sizeof(err))))\n+      if (gfc_is_proc_ptr_comp (lvalue, &comp))\n+\ts1 = comp->ts.interface;\n+      else\n+\ts1 = lvalue->symtree->n.sym;\n+\n+      if (gfc_is_proc_ptr_comp (rvalue, &comp))\n+\t{\n+\t  s2 = comp->ts.interface;\n+\t  name = comp->name;\n+\t}\n+      else if (rvalue->expr_type == EXPR_FUNCTION)\n+\t{\n+\t  s2 = rvalue->symtree->n.sym->result;\n+\t  name = rvalue->symtree->n.sym->result->name;\n+\t}\n+      else\n+\t{\n+\t  s2 = rvalue->symtree->n.sym;\n+\t  name = rvalue->symtree->n.sym->name;\n+\t}\n+\n+      if (s1 && s2 && !gfc_compare_interfaces (s1, s2, name, 0, 1,\n+\t\t\t\t\t       err, sizeof(err)))\n \t{\n \t  gfc_error (\"Interface mismatch in procedure pointer assignment \"\n \t\t     \"at %L: %s\", &rvalue->where, err);\n \t  return FAILURE;\n \t}\n+\n       return SUCCESS;\n     }\n "}, {"sha": "514cc808417e9e7f2d02ab5c001564f7e2d582c2", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/889dc035812dfc72033fb61b7b3433dba072e279/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/889dc035812dfc72033fb61b7b3433dba072e279/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=889dc035812dfc72033fb61b7b3433dba072e279", "patch": "@@ -2650,7 +2650,8 @@ gfc_try gfc_ref_dimen_size (gfc_array_ref *, int dimen, mpz_t *);\n void gfc_free_interface (gfc_interface *);\n int gfc_compare_derived_types (gfc_symbol *, gfc_symbol *);\n int gfc_compare_types (gfc_typespec *, gfc_typespec *);\n-int gfc_compare_interfaces (gfc_symbol*, gfc_symbol*, int, int, char *, int);\n+int gfc_compare_interfaces (gfc_symbol*, gfc_symbol*, const char *, int, int,\n+\t\t\t    char *, int);\n void gfc_check_interfaces (gfc_namespace *);\n void gfc_procedure_use (gfc_symbol *, gfc_actual_arglist **, locus *);\n void gfc_ppc_use (gfc_component *, gfc_actual_arglist **, locus *);"}, {"sha": "132f10a47c7da4d138095b70f45ad5fda34e5046", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/889dc035812dfc72033fb61b7b3433dba072e279/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/889dc035812dfc72033fb61b7b3433dba072e279/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=889dc035812dfc72033fb61b7b3433dba072e279", "patch": "@@ -943,39 +943,39 @@ generic_correspondence (gfc_formal_arglist *f1, gfc_formal_arglist *f2)\n    required to match, which is not the case for ambiguity checks.*/\n \n int\n-gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, int generic_flag,\n-\t\t\tint intent_flag, char *errmsg, int err_len)\n+gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, const char *name2,\n+\t\t\tint generic_flag, int intent_flag,\n+\t\t\tchar *errmsg, int err_len)\n {\n   gfc_formal_arglist *f1, *f2;\n \n   if (s1->attr.function && (s2->attr.subroutine\n       || (!s2->attr.function && s2->ts.type == BT_UNKNOWN\n-\t  && gfc_get_default_type (s2->name, s2->ns)->type == BT_UNKNOWN)))\n+\t  && gfc_get_default_type (name2, s2->ns)->type == BT_UNKNOWN)))\n     {\n       if (errmsg != NULL)\n-\tsnprintf (errmsg, err_len, \"'%s' is not a function\", s2->name);\n+\tsnprintf (errmsg, err_len, \"'%s' is not a function\", name2);\n       return 0;\n     }\n \n   if (s1->attr.subroutine && s2->attr.function)\n     {\n       if (errmsg != NULL)\n-\tsnprintf (errmsg, err_len, \"'%s' is not a subroutine\", s2->name);\n+\tsnprintf (errmsg, err_len, \"'%s' is not a subroutine\", name2);\n       return 0;\n     }\n \n   /* If the arguments are functions, check type and kind\n      (only for dummy procedures and procedure pointer assignments).  */\n-  if ((s1->attr.dummy || s1->attr.proc_pointer)\n-      && s1->attr.function && s2->attr.function)\n+  if (!generic_flag && intent_flag && s1->attr.function && s2->attr.function)\n     {\n       if (s1->ts.type == BT_UNKNOWN)\n \treturn 1;\n       if ((s1->ts.type != s2->ts.type) || (s1->ts.kind != s2->ts.kind))\n \t{\n \t  if (errmsg != NULL)\n \t    snprintf (errmsg, err_len, \"Type/kind mismatch in return value \"\n-\t\t      \"of '%s'\", s2->name);\n+\t\t      \"of '%s'\", name2);\n \t  return 0;\n \t}\n     }\n@@ -1012,7 +1012,7 @@ gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, int generic_flag,\n \t  {\n \t    if (errmsg != NULL)\n \t      snprintf (errmsg, err_len, \"'%s' has the wrong number of \"\n-\t\t\t\"arguments\", s2->name);\n+\t\t\t\"arguments\", name2);\n \t    return 0;\n \t  }\n \n@@ -1120,7 +1120,8 @@ check_interface1 (gfc_interface *p, gfc_interface *q0,\n \tif (p->sym->name == q->sym->name && p->sym->module == q->sym->module)\n \t  continue;\n \n-\tif (gfc_compare_interfaces (p->sym, q->sym, generic_flag, 0, NULL, 0))\n+\tif (gfc_compare_interfaces (p->sym, q->sym, NULL, generic_flag, 0,\n+\t\t\t\t    NULL, 0))\n \t  {\n \t    if (referenced)\n \t      {\n@@ -1403,7 +1404,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t  return 0;\n \t}\n \n-      if (!gfc_compare_interfaces (formal, act_sym, 0, 1, err,\n+      if (!gfc_compare_interfaces (formal, act_sym, act_sym->name, 0, 1, err,\n \t\t\t\t   sizeof(err)))\n \t{\n \t  if (where)"}, {"sha": "f10a4123a6b2cb22226c7a2a9c009bd2e51c6d28", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/889dc035812dfc72033fb61b7b3433dba072e279/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/889dc035812dfc72033fb61b7b3433dba072e279/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=889dc035812dfc72033fb61b7b3433dba072e279", "patch": "@@ -8851,7 +8851,7 @@ check_generic_tbp_ambiguity (gfc_tbp_generic* t1, gfc_tbp_generic* t2,\n     }\n \n   /* Compare the interfaces.  */\n-  if (gfc_compare_interfaces (sym1, sym2, 1, 0, NULL, 0))\n+  if (gfc_compare_interfaces (sym1, sym2, NULL, 1, 0, NULL, 0))\n     {\n       gfc_error (\"'%s' and '%s' for GENERIC '%s' at %L are ambiguous\",\n \t\t sym1->name, sym2->name, generic_name, &where);"}, {"sha": "3b29417a5f4aa7b01343a9934c8be14cf4b7353f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/889dc035812dfc72033fb61b7b3433dba072e279/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/889dc035812dfc72033fb61b7b3433dba072e279/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=889dc035812dfc72033fb61b7b3433dba072e279", "patch": "@@ -1,3 +1,8 @@\n+2009-08-27  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40869\n+\t* gfortran.dg/proc_ptr_comp_20.f90: New.\n+\n 2009-08-27  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/39667"}, {"sha": "d4773686090025878898a1b05e6b8fcc31fdf060", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_20.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/889dc035812dfc72033fb61b7b3433dba072e279/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/889dc035812dfc72033fb61b7b3433dba072e279/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_20.f90?ref=889dc035812dfc72033fb61b7b3433dba072e279", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do compile }\n+!\n+! PR 40869: [F03] PPC assignment checking\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+implicit none\n+\n+interface func\n+  procedure f1,f2 ! { dg-error \"Ambiguous interfaces\" }\n+end interface\n+\n+interface operator(.op.)\n+  procedure f1,f2 ! { dg-error \"Ambiguous interfaces\" }\n+end interface\n+\n+type :: t1\n+  procedure(integer), pointer, nopass :: ppc\n+end type\n+\n+type :: t2\n+  procedure(real), pointer, nopass :: ppc\n+end type\n+\n+type(t1) :: o1\n+type(t2) :: o2\n+procedure(logical),pointer :: pp1\n+procedure(complex),pointer :: pp2\n+\n+pp1 => pp2        ! { dg-error \"Type/kind mismatch\" }\n+pp2 => o2%ppc     ! { dg-error \"Type/kind mismatch\" }\n+\n+o1%ppc => pp1     ! { dg-error \"Type/kind mismatch\" }\n+o1%ppc => o2%ppc  ! { dg-error \"Type/kind mismatch\" }\n+\n+contains\n+\n+  real function f1(a,b)\n+    real,intent(in) :: a,b\n+    f1 = a + b\n+  end function\n+\n+  integer function f2(a,b)\n+    real,intent(in) :: a,b\n+    f2 = a - b\n+  end function\n+\n+end\n+"}]}