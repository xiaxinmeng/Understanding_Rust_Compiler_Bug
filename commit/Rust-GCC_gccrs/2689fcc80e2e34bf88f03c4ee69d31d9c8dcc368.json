{"sha": "2689fcc80e2e34bf88f03c4ee69d31d9c8dcc368", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY4OWZjYzgwZTJlMzRiZjg4ZjAzYzRlZTY5ZDMxZDljOGRjYzM2OA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2019-04-16T12:44:57Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2019-04-16T12:44:57Z"}, "message": "[PR89528] reset debug uses of return value when dropping dead RTL call\n\nWhen we remove an RTL call, we wouldn't clean up references to the\nreturn value of the call in debug insns.  Make it so that we do.\n\n\nfor  gcc/ChangeLog\n\n\tPR debug/89528\n\t* valtrack.c (dead_debug_insert_temp): Reset debug references\n\tto the return value of a call being removed.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR debug/89528\n\t* gcc.dg/guality/pr89528.c: New.\n\nFrom-SVN: r270389", "tree": {"sha": "4b097cd4b629ec708d3de2184eadf240d20e8e3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b097cd4b629ec708d3de2184eadf240d20e8e3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2689fcc80e2e34bf88f03c4ee69d31d9c8dcc368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2689fcc80e2e34bf88f03c4ee69d31d9c8dcc368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2689fcc80e2e34bf88f03c4ee69d31d9c8dcc368", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2689fcc80e2e34bf88f03c4ee69d31d9c8dcc368/comments", "author": null, "committer": null, "parents": [{"sha": "1ce6a0f5b05487678082f205d1b14a207adf9970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce6a0f5b05487678082f205d1b14a207adf9970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce6a0f5b05487678082f205d1b14a207adf9970"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "5f007efe75ef820cd2ea70f58218c052ccb29857", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2689fcc80e2e34bf88f03c4ee69d31d9c8dcc368/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2689fcc80e2e34bf88f03c4ee69d31d9c8dcc368/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2689fcc80e2e34bf88f03c4ee69d31d9c8dcc368", "patch": "@@ -1,3 +1,9 @@\n+2019-04-16  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR debug/89528\n+\t* valtrack.c (dead_debug_insert_temp): Reset debug references\n+\tto the return value of a call being removed.\n+\n 2019-04-16  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc-protos.h (arc_register_move_cost): Remove."}, {"sha": "914e5776867b3dcd43463028cff4d35234677a5e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2689fcc80e2e34bf88f03c4ee69d31d9c8dcc368/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2689fcc80e2e34bf88f03c4ee69d31d9c8dcc368/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2689fcc80e2e34bf88f03c4ee69d31d9c8dcc368", "patch": "@@ -1,5 +1,8 @@\n 2019-04-16  Alexandre Oliva <aoliva@redhat.com>\n \n+\tPR debug/89528\n+\t* gcc.dg/guality/pr89528.c: New.\n+\n \tPR rtl-optimization/86438\n \t* gcc.dg/torture/pr86438.c: Split up too-wide shift.\n "}, {"sha": "04a7e84d8755540eb91a747d0cf132f4cf7b988e", "filename": "gcc/testsuite/gcc.dg/guality/pr89528.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2689fcc80e2e34bf88f03c4ee69d31d9c8dcc368/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr89528.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2689fcc80e2e34bf88f03c4ee69d31d9c8dcc368/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr89528.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr89528.c?ref=2689fcc80e2e34bf88f03c4ee69d31d9c8dcc368", "patch": "@@ -0,0 +1,25 @@\n+/* PR debug/89528 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+#include <stdio.h>\n+\n+char b;\n+int d, e;\n+static int i = 1;\n+void a(int l) { printf(\"\", l); }\n+char c(char l) { return l || b && l == 1 ? b : b % l; }\n+short f(int l, int m) { return l * m; }\n+short g(short l, short m) { return m || l == 767 && m == 1; }\n+int h(int l, int m) { return (l ^ m & l ^ (m & 647) - m ^ m) < m; }\n+static int j(int l) { return d == 0 || l == 647 && d == 1 ? l : l % d; }\n+short k(int l) { return l >= 2 >> l; }\n+void optimize_me_not() { asm(\"\"); }\n+static short n(void) {\n+  int l_1127 = ~j(9 || 0) ^ 65535;\n+  optimize_me_not(); /* { dg-final { gdb-test . \"l_1127+1\" \"-65534\" } } */\n+  f(l_1127, i && e ^ 4) && g(0, 0);\n+  e = 0;\n+  return 5;\n+}\n+int main() { n(); }"}, {"sha": "1f67378a867c986086c333d125a5e00fe0ce9f4f", "filename": "gcc/valtrack.c", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2689fcc80e2e34bf88f03c4ee69d31d9c8dcc368/gcc%2Fvaltrack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2689fcc80e2e34bf88f03c4ee69d31d9c8dcc368/gcc%2Fvaltrack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvaltrack.c?ref=2689fcc80e2e34bf88f03c4ee69d31d9c8dcc368", "patch": "@@ -657,22 +657,12 @@ dead_debug_insert_temp (struct dead_debug_local *debug, unsigned int uregno,\n \t{\n \t  dest = SET_DEST (set);\n \t  src = SET_SRC (set);\n-\t  /* Lose if the REG-setting insn is a CALL.  */\n-\t  if (GET_CODE (src) == CALL)\n-\t    {\n-\t      while (uses)\n-\t\t{\n-\t\t  cur = uses->next;\n-\t\t  XDELETE (uses);\n-\t\t  uses = cur;\n-\t\t}\n-\t      return 0;\n-\t    }\n-\t  /* Asm in DEBUG_INSN is never useful, we can't emit debug info for\n-\t     that.  And for volatile_insn_p, it is actually harmful\n-\t     - DEBUG_INSNs shouldn't have any side-effects.  */\n-\t  else if (GET_CODE (src) == ASM_OPERANDS\n-\t\t   || volatile_insn_p (src))\n+\t  /* Reset uses if the REG-setting insn is a CALL.  Asm in\n+\t     DEBUG_INSN is never useful, we can't emit debug info for\n+\t     that.  And for volatile_insn_p, it is actually harmful -\n+\t     DEBUG_INSNs shouldn't have any side-effects.  */\n+\t  if (GET_CODE (src) == CALL || GET_CODE (src) == ASM_OPERANDS\n+\t      || volatile_insn_p (src))\n \t    set = NULL_RTX;\n \t}\n "}]}