{"sha": "4d33b77106cf7f85d7721ad1f14c6f9e728508bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQzM2I3NzEwNmNmN2Y4NWQ3NzIxYWQxZjE0YzZmOWU3Mjg1MDhiYg==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2012-02-23T18:10:53Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2012-02-23T18:10:53Z"}, "message": "pack-test-5.c: Add -mno-ms-bitfields option for mingw-targets.\n\n\t* gcc.dg/pack-test-5.c: Add -mno-ms-bitfields option\n\tfor mingw-targets.\n\t* gcc.dg/Wpadded.c: Likewise.\n\t* gcc.dg/bf-ms-layout-2.c: Adjust offsets to fit ms-bitfield\n\tstructure-layout.\n\t* gcc.dg/di-sync-multithread.c: Replace for mingw-target the use\n\tfor sleep by Sleep and add windows.h include for this function.\n\t* gcc.dg/format/dfp-printf-1.c: Adjust dg-skip-if rule for mingw\n\ttargets.\n\t* gcc.dg/stack-usage-1.c (SIZE): Provide proper SIZE for x64 mingw\n\ttarget.\n\t* gcc.dg/tls/thr-cse-1.c: Provide proper pattern for x64 mingw\n\ttarget.\n\t* gcc.dg/tls/opt-11.c (memset): Use __extension__ to avoid fail\n\ton x64 mingw target.\n\t* gcc.dg/bf-ms-attrib.c: Adjust expected size for ms_struct layout.\n\t* gcc.dg/pr50251.c: Disable test for x64 mingw target.\n\t* gcc.c-torture/execute/930930-1.c (long): Replace by ptr_t to avoid\n\tfailure on LLP64 target.\n\nFrom-SVN: r184519", "tree": {"sha": "81cd879600b4af6c619a58f66dcd3f03c7cc70b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81cd879600b4af6c619a58f66dcd3f03c7cc70b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d33b77106cf7f85d7721ad1f14c6f9e728508bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d33b77106cf7f85d7721ad1f14c6f9e728508bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d33b77106cf7f85d7721ad1f14c6f9e728508bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/comments", "author": null, "committer": null, "parents": [{"sha": "560ad30812da70455b371b0488229beab9ae9d75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/560ad30812da70455b371b0488229beab9ae9d75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/560ad30812da70455b371b0488229beab9ae9d75"}], "stats": {"total": 95, "additions": 68, "deletions": 27}, "files": [{"sha": "b9eee4940bab6351dd4136874e4c3ec846742202", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d33b77106cf7f85d7721ad1f14c6f9e728508bb", "patch": "@@ -1,3 +1,25 @@\n+2012-02-23  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* gcc.dg/pack-test-5.c: Add -mno-ms-bitfields option\n+\tfor mingw-targets.\n+\t* gcc.dg/Wpadded.c: Likewise.\n+\t* gcc.dg/bf-ms-layout-2.c: Adjust offsets to fit ms-bitfield\n+\tstructure-layout.\n+\t* gcc.dg/di-sync-multithread.c: Replace for mingw-target the use\n+\tfor sleep by Sleep and add windows.h include for this function.\n+\t* gcc.dg/format/dfp-printf-1.c: Adjust dg-skip-if rule for mingw\n+\ttargets.\n+\t* gcc.dg/stack-usage-1.c (SIZE): Provide proper SIZE for x64 mingw\n+\ttarget.\n+\t* gcc.dg/tls/thr-cse-1.c: Provide proper pattern for x64 mingw\n+\ttarget.\n+\t* gcc.dg/tls/opt-11.c (memset): Use __extension__ to avoid fail\n+\ton x64 mingw target.\n+\t* gcc.dg/bf-ms-attrib.c: Adjust expected size for ms_struct layout.\n+\t* gcc.dg/pr50251.c: Disable test for x64 mingw target.\n+\t* gcc.c-torture/execute/930930-1.c (long): Replace by ptr_t to avoid\n+\tfailure on LLP64 target.\n+\n 2012-02-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR c/52290"}, {"sha": "101a5f9ef2688e4c2e8289476cf32ac6df6b2be3", "filename": "gcc/testsuite/gcc.c-torture/execute/930930-1.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F930930-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F930930-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F930930-1.c?ref=4d33b77106cf7f85d7721ad1f14c6f9e728508bb", "patch": "@@ -1,23 +1,24 @@\n-long *wm_TR;\n-long *wm_HB;\n-long *wm_SPB;\n+__extension__ typedef __PTRDIFF_TYPE__ ptr_t;\n+ptr_t *wm_TR;\n+ptr_t *wm_HB;\n+ptr_t *wm_SPB;\n \n-long mem[100];\n+ptr_t mem[100];\n \n f (mr_TR, mr_SPB, mr_HB, reg1, reg2)\n-     long *mr_TR;\n-     long *mr_SPB;\n-     long *mr_HB;\n-     long *reg1;\n-     long *reg2;\n+     ptr_t *mr_TR;\n+     ptr_t *mr_SPB;\n+     ptr_t *mr_HB;\n+     ptr_t *reg1;\n+     ptr_t *reg2;\n {\n-  long *x = mr_TR;\n+  ptr_t *x = mr_TR;\n \n   for (;;)\n     {\n       if (reg1 < reg2)\n \tgoto out;\n-      if ((long *) *reg1 < mr_HB && (long *) *reg1 >= mr_SPB)\n+      if ((ptr_t *) *reg1 < mr_HB && (ptr_t *) *reg1 >= mr_SPB)\n \t*--mr_TR = *reg1;\n       reg1--;\n     }\n@@ -29,7 +30,7 @@ f (mr_TR, mr_SPB, mr_HB, reg1, reg2)\n \n main ()\n {\n-  mem[99] = (long) mem;\n+  mem[99] = (ptr_t) mem;\n   f (mem + 100, mem + 6, mem + 8, mem + 99, mem + 99);\n   exit (0);\n }"}, {"sha": "70fcd79a6d43a3a5b9ea724808e546d30606a71b", "filename": "gcc/testsuite/gcc.dg/Wpadded.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2FWpadded.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2FWpadded.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpadded.c?ref=4d33b77106cf7f85d7721ad1f14c6f9e728508bb", "patch": "@@ -6,6 +6,7 @@\n    We won't get a warning anyway if the target has \"packed\" structure\n    layout.  */\n /* { dg-options \"-Wpadded -fpack-struct=8\" } */\n+/* { dg-additional-options \"-mno-ms-bitfields\" { target *-*-mingw* } } */\n \n struct foo {\n   char bar;"}, {"sha": "d62da2ad5253df4c8f34b83501cc0af42e5a1ed3", "filename": "gcc/testsuite/gcc.dg/bf-ms-attrib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-attrib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-attrib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-attrib.c?ref=4d33b77106cf7f85d7721ad1f14c6f9e728508bb", "patch": "@@ -32,7 +32,7 @@ main()\n     /* As long as the sizes are as expected, we know attributes are working.\n        bf-ms-layout.c makes sure the right thing happens when the attribute\n        is on. */\n-    if (sizeof(struct one_ms) != 12)\n+    if (sizeof(struct one_ms) != 8)\n \tabort();\n     if (sizeof(struct one_gcc) != 8)\n \tabort();"}, {"sha": "408ddbeb89efa4fb4c05b884fea285dfc5d56d37", "filename": "gcc/testsuite/gcc.dg/bf-ms-layout-2.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-2.c?ref=4d33b77106cf7f85d7721ad1f14c6f9e728508bb", "patch": "@@ -158,27 +158,27 @@ int main(){\n   struct ten test_ten;\n \n #if defined (_TEST_MS_LAYOUT) || defined (_MSC_VER)\n-  size_t exp_sizeof_one = 12;\n-  size_t exp_sizeof_two = 16;\n+  size_t exp_sizeof_one = 8;\n+  size_t exp_sizeof_two = 12;\n   size_t exp_sizeof_three =6;\n   size_t exp_sizeof_four = 8;\n   size_t exp_sizeof_five = 3;\n   size_t exp_sizeof_six = 8;\n   size_t exp_sizeof_seven = 3;\n-  size_t exp_sizeof_eight = 4;\n+  size_t exp_sizeof_eight = 2;\n   size_t exp_sizeof_nine = 8;\n-  size_t exp_sizeof_ten = 16;\n+  size_t exp_sizeof_ten = 8;\n \n-  unsigned char exp_one_c = 8;\n-  unsigned char exp_two_c  = 12;\n+  unsigned char exp_one_c = 7;\n+  unsigned char exp_two_c  = 9;\n   unsigned char exp_three_c = 4;\n   unsigned char exp_four_c = 4;\n   char exp_five_c = 2;\n   char exp_six_c = 5;\n   char exp_seven_c = 2;\n-  char exp_eight_c = 2;\n+  char exp_eight_c = 1;\n   char exp_nine_c = 0;\n-  char exp_ten_c = 8;\n+  char exp_ten_c = 1;\n \n #else /* testing -mno-ms-bitfields */\n "}, {"sha": "c786ff1df5fc95283e9b7ec43644b40a93075523", "filename": "gcc/testsuite/gcc.dg/di-sync-multithread.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Fdi-sync-multithread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Fdi-sync-multithread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdi-sync-multithread.c?ref=4d33b77106cf7f85d7721ad1f14c6f9e728508bb", "patch": "@@ -10,6 +10,9 @@\n \n #include <pthread.h>\n #include <unistd.h>\n+#ifdef _WIN32\n+#include <windows.h>\n+#endif\n \n /*#define DEBUGIT 1 */\n \n@@ -175,7 +178,11 @@ main ()\n \tt, err);\n   };\n \n+#ifdef _WIN32\n+  Sleep (5000);\n+#else\n   sleep (5);\n+#endif\n \n   /* Stop please.  */\n   __sync_lock_test_and_set (&doquit, 1ll);"}, {"sha": "4453ad192b5b81345fc423ea18a21557b040471d", "filename": "gcc/testsuite/gcc.dg/format/dfp-printf-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdfp-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdfp-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdfp-printf-1.c?ref=4d33b77106cf7f85d7721ad1f14c6f9e728508bb", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target dfp } */\n /* { dg-options \"-Wformat\" } */\n-/* { dg-skip-if \"No scanf/printf dfp support\" { *-*-mingw* } } */\n+/* { dg-skip-if \"No scanf/printf dfp support\" { *-*-mingw* } { \"*\" } { \"\" } } */\n \n extern int printf (const char *restrict, ...);\n "}, {"sha": "3a52a002bd5eb99251ab5c1c69fb06d5ea9a0c2d", "filename": "gcc/testsuite/gcc.dg/pack-test-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-5.c?ref=4d33b77106cf7f85d7721ad1f14c6f9e728508bb", "patch": "@@ -1,6 +1,7 @@\n /* PR c/11446: packed on a struct takes precedence over aligned on the type\n    of a field.  */\n /* { dg-do run } */\n+/* { dg-additional-options \"-mno-ms-bitfields\" { target *-*-mingw* } } */\n \n extern void abort (void);\n "}, {"sha": "52f79dd7f8e3f0d3369147c682d953fe550cb46f", "filename": "gcc/testsuite/gcc.dg/pr49544.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49544.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49544.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49544.c?ref=4d33b77106cf7f85d7721ad1f14c6f9e728508bb", "patch": "@@ -3,6 +3,8 @@\n /* { dg-options \"-g -O2\" } */\n /* { dg-require-effective-target ptr32plus } */\n \n+__extension__ typedef __PTRDIFF_TYPE__ ptr_t;\n+\n int baz (int, int, void *);\n \n static inline __attribute__ ((always_inline)) long\n@@ -16,5 +18,5 @@ foo (int x, int y, void *z)\n long\n bar (long x, long y, long z)\n {\n-  return foo (x, y, (void *) z);\n+  return foo (x, y, (void *) (ptr_t) z);\n }"}, {"sha": "f791aa882789b3899598849d46ead44c1bc8dca4", "filename": "gcc/testsuite/gcc.dg/pr50251.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50251.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50251.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50251.c?ref=4d33b77106cf7f85d7721ad1f14c6f9e728508bb", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile } */\n+/* { dg-do compile { target { ! { x86_64-*-mingw* } } } } */\n /* { dg-options \"-O2\" } */\n /* { dg-additional-options \"-mpreferred-stack-boundary=12\" { target x86_64-*-* } } */\n "}, {"sha": "c852f78f5cdefc1e25f1674660a62577ee180b4f", "filename": "gcc/testsuite/gcc.dg/stack-usage-1.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c?ref=4d33b77106cf7f85d7721ad1f14c6f9e728508bb", "patch": "@@ -10,7 +10,11 @@\n #if defined(__i386__)\n #  define SIZE 248\n #elif defined(__x86_64__)\n-#  define SIZE 356\n+#  ifndef _WIN64\n+#    define SIZE 356\n+#  else\n+#    define SIZE (256 - 24)\n+#  endif\n #elif defined (__sparc__)\n #  if defined (__arch64__)\n #    define SIZE 76"}, {"sha": "edfe16b7e12eaab7d65ce356599e5097286c324e", "filename": "gcc/testsuite/gcc.dg/tls/opt-11.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-11.c?ref=4d33b77106cf7f85d7721ad1f14c6f9e728508bb", "patch": "@@ -2,8 +2,10 @@\n /* { dg-require-effective-target tls_runtime } */\n /* { dg-add-options tls } */\n \n+__extension__ typedef __SIZE_TYPE__ size_t;\n+\n extern void abort (void);\n-extern void *memset (void *, int, __SIZE_TYPE__);\n+extern void *memset (void *, int, size_t);\n \n struct A\n {"}, {"sha": "8e64424b72a4d40163432d1666a1a16b3645ae98", "filename": "gcc/testsuite/gcc.dg/tls/thr-cse-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fthr-cse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d33b77106cf7f85d7721ad1f14c6f9e728508bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fthr-cse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fthr-cse-1.c?ref=4d33b77106cf7f85d7721ad1f14c6f9e728508bb", "patch": "@@ -18,10 +18,11 @@ int foo (int b, int c, int d)\n   return a;\n }\n \n-/* { dg-final { scan-assembler-not \"emutls_get_address.*emutls_get_address.*\" { target { ! { \"*-wrs-vxworks\"  \"*-*-darwin8\"  \"hppa*-*-hpux*\" \"spu-*-*\" \"i?86-*-mingw*\" } } } } } */\n+/* { dg-final { scan-assembler-not \"emutls_get_address.*emutls_get_address.*\" { target { ! { \"*-wrs-vxworks\"  \"*-*-darwin8\"  \"hppa*-*-hpux*\" \"spu-*-*\" \"i?86-*-mingw*\" \"x86_64-*-mingw*\" } } } } } */\n /* { dg-final { scan-assembler-not \"call\\tL___emutls_get_address.stub.*call\\tL___emutls_get_address.stub.*\" { target \"*-*-darwin8\" } } } */\n /* { dg-final { scan-assembler-not \"(b,l|bl) __emutls_get_address.*(b,l|bl) __emutls_get_address.*\" { target \"hppa*-*-hpux*\" } } } */\n /* { dg-final { scan-assembler-not \"(brsl|brasl)\\t__emutls_get_address.*(brsl|brasl)\\t__emutls_get_address.*\" { target spu-*-* } } } */\n /* { dg-final { scan-assembler-not \"tls_lookup.*tls_lookup.*\" { target *-wrs-vxworks } } } */\n /* { dg-final { scan-assembler-not \"call\\t___emutls_get_address.*call\\t___emutls_get_address\" { target \"i?86-*-mingw*\" } } } */\n+/* { dg-final { scan-assembler-not \"call\\t__emutls_get_address.*call\\t__emutls_get_address\" { target \"x86_64-*-mingw*\" } } } */\n "}]}