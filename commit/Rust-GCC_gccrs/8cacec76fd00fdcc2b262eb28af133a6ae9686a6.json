{"sha": "8cacec76fd00fdcc2b262eb28af133a6ae9686a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNhY2VjNzZmZDAwZmRjYzJiMjYyZWIyOGFmMTMzYTZhZTk2ODZhNg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-04-12T19:50:01Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-04-12T19:50:01Z"}, "message": "(library_prefix): Delete variable.\n\n(process_command): Delete uses of library_prefix.\n(do_spec_1, D case): Delete use of library_prefix.\n\nFrom-SVN: r4105", "tree": {"sha": "f82f4f4f4e12d665d3e69e139be02cbefdd2304e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f82f4f4f4e12d665d3e69e139be02cbefdd2304e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cacec76fd00fdcc2b262eb28af133a6ae9686a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cacec76fd00fdcc2b262eb28af133a6ae9686a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cacec76fd00fdcc2b262eb28af133a6ae9686a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cacec76fd00fdcc2b262eb28af133a6ae9686a6/comments", "author": null, "committer": null, "parents": [{"sha": "5460015decdcce33e95c60aba3a66897178bd953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5460015decdcce33e95c60aba3a66897178bd953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5460015decdcce33e95c60aba3a66897178bd953"}], "stats": {"total": 125, "additions": 57, "deletions": 68}, "files": [{"sha": "75e340321c0944e5a0de9b22631126d57bc9a254", "filename": "gcc/gcc.c", "status": "modified", "additions": 57, "deletions": 68, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cacec76fd00fdcc2b262eb28af133a6ae9686a6/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cacec76fd00fdcc2b262eb28af133a6ae9686a6/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=8cacec76fd00fdcc2b262eb28af133a6ae9686a6", "patch": "@@ -245,8 +245,7 @@ or with constant text in a single argument.\n  %A\tprocess ASM_FINAL_SPEC as a spec.  A capital A is actually\n \tused here.  This can be used to run a post-processor after the\n \tassembler has done it's job.\n- %D\tDump out a -L option for each directory in library_prefix,\n-\tfollowed by a -L option for each directory in startfile_prefix.\n+ %D\tDump out a -L option for each directory in startfile_prefix.\n  %l     process LINK_SPEC as a spec.\n  %L     process LIB_SPEC as a spec.\n  %S     process STARTFILE_SPEC as a spec.  A capital S is actually used here.\n@@ -1099,10 +1098,6 @@ static struct path_prefix exec_prefix = { 0, 0, \"exec\" };\n \n static struct path_prefix startfile_prefix = { 0, 0, \"startfile\" };\n \n-/* List of prefixes to try when looking for libraries. */\n-\n-static struct path_prefix library_prefix = { 0, 0, \"libraryfile\" };\n-\n /* Suffix to attach to directories searched for commands.\n    This looks like `MACHINE/VERSION/'.  */\n \n@@ -2120,8 +2115,6 @@ process_command (argc, argv)\n \t      else\n \t\tnstore[endp-startp] = 0;\n \t      add_prefix (&startfile_prefix, nstore, 0, 0, NULL_PTR);\n-\t      /* Make separate list of dirs that came from LIBRARY_PATH.  */\n-\t      add_prefix (&library_prefix, nstore, 0, 0, NULL_PTR);\n \t      if (*endp == 0)\n \t\tbreak;\n \t      endp = startp = endp + 1;\n@@ -2156,8 +2149,6 @@ process_command (argc, argv)\n \t      else\n \t\tnstore[endp-startp] = 0;\n \t      add_prefix (&startfile_prefix, nstore, 0, 0, NULL_PTR);\n-\t      /* Make separate list of dirs that came from LIBRARY_PATH.  */\n-\t      add_prefix (&library_prefix, nstore, 0, 0, NULL_PTR);\n \t      if (*endp == 0)\n \t\tbreak;\n \t      endp = startp = endp + 1;\n@@ -2734,71 +2725,69 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t     followed by the absolute directories\n \t     that we search for startfiles.  */\n \t  case 'D':\n-\t    for (i = 0; i < 2; i++)\n-\t      {\n-\t\tstruct prefix_list *pl\n-\t\t  = (i == 0 ? library_prefix.plist : startfile_prefix.plist);\n-\t\tint bufsize = 100;\n-\t\tchar *buffer = (char *) xmalloc (bufsize);\n-\t\tint idx;\n+\t    {\n+\t      struct prefix_list *pl = startfile_prefix.plist;\n+\t      int bufsize = 100;\n+\t      char *buffer = (char *) xmalloc (bufsize);\n+\t      int idx;\n \n-\t\tfor (; pl; pl = pl->next)\n-\t\t  {\n+\t      for (; pl; pl = pl->next)\n+\t\t{\n #ifdef RELATIVE_PREFIX_NOT_LINKDIR\n-\t\t    /* Used on systems which record the specified -L dirs\n-\t\t       and use them to search for dynamic linking.  */\n-\t\t    /* Relative directories always come from -B,\n-\t\t       and it is better not to use them for searching\n-\t\t       at run time.  In particular, stage1 loses  */\n-\t\t    if (pl->prefix[0] != '/')\n-\t\t      continue;\n+\t\t  /* Used on systems which record the specified -L dirs\n+\t\t     and use them to search for dynamic linking.  */\n+\t\t  /* Relative directories always come from -B,\n+\t\t     and it is better not to use them for searching\n+\t\t     at run time.  In particular, stage1 loses  */\n+\t\t  if (pl->prefix[0] != '/')\n+\t\t    continue;\n #endif\n-\t\t    if (machine_suffix)\n-\t\t      {\n-\t\t\tif (is_linker_dir (pl->prefix, machine_suffix))\n-\t\t\t  {\n-\t\t\t    do_spec_1 (\"-L\", 0, NULL_PTR);\n+\t\t  if (machine_suffix)\n+\t\t    {\n+\t\t      if (is_linker_dir (pl->prefix, machine_suffix))\n+\t\t\t{\n+\t\t\t  do_spec_1 (\"-L\", 0, NULL_PTR);\n #ifdef SPACE_AFTER_L_OPTION\n-\t\t\t    do_spec_1 (\" \", 0, NULL_PTR);\n+\t\t\t  do_spec_1 (\" \", 0, NULL_PTR);\n #endif\n-\t\t\t    do_spec_1 (pl->prefix, 1, NULL_PTR);\n-\t\t\t    /* Remove slash from machine_suffix.  */\n-\t\t\t    if (strlen (machine_suffix) >= bufsize)\n-\t\t\t      bufsize = strlen (machine_suffix) * 2 + 1;\n-\t\t\t    buffer = (char *) xrealloc (buffer, bufsize);\n-\t\t\t    strcpy (buffer, machine_suffix);\n-\t\t\t    idx = strlen (buffer);\n-\t\t\t    if (buffer[idx - 1] == '/')\n-\t\t\t      buffer[idx - 1] = 0;\n-\t\t\t    do_spec_1 (buffer, 1, NULL_PTR);\n-\t\t\t    /* Make this a separate argument.  */\n-\t\t\t    do_spec_1 (\" \", 0, NULL_PTR);\n-\t\t\t  }\n-\t\t      }\n-\t\t    if (!pl->require_machine_suffix)\n-\t\t      {\n-\t\t\tif (is_linker_dir (pl->prefix, \"\"))\n-\t\t\t  {\n-\t\t\t    do_spec_1 (\"-L\", 0, NULL_PTR);\n+\t\t\t  do_spec_1 (pl->prefix, 1, NULL_PTR);\n+\t\t\t  /* Remove slash from machine_suffix.  */\n+\t\t\t  if (strlen (machine_suffix) >= bufsize)\n+\t\t\t    bufsize = strlen (machine_suffix) * 2 + 1;\n+\t\t\t  buffer = (char *) xrealloc (buffer, bufsize);\n+\t\t\t  strcpy (buffer, machine_suffix);\n+\t\t\t  idx = strlen (buffer);\n+\t\t\t  if (buffer[idx - 1] == '/')\n+\t\t\t    buffer[idx - 1] = 0;\n+\t\t\t  do_spec_1 (buffer, 1, NULL_PTR);\n+\t\t\t  /* Make this a separate argument.  */\n+\t\t\t  do_spec_1 (\" \", 0, NULL_PTR);\n+\t\t\t}\n+\t\t    }\n+\t\t  if (!pl->require_machine_suffix)\n+\t\t    {\n+\t\t      if (is_linker_dir (pl->prefix, \"\"))\n+\t\t\t{\n+\t\t\t  do_spec_1 (\"-L\", 0, NULL_PTR);\n #ifdef SPACE_AFTER_L_OPTION\n-\t\t\t    do_spec_1 (\" \", 0, NULL_PTR);\n+\t\t\t  do_spec_1 (\" \", 0, NULL_PTR);\n #endif\n-\t\t\t    /* Remove slash from pl->prefix.  */\n-\t\t\t    if (strlen (pl->prefix) >= bufsize)\n-\t\t\t      bufsize = strlen (pl->prefix) * 2 + 1;\n-\t\t\t    buffer = (char *) xrealloc (buffer, bufsize);\n-\t\t\t    strcpy (buffer, pl->prefix);\n-\t\t\t    idx = strlen (buffer);\n-\t\t\t    if (buffer[idx - 1] == '/')\n-\t\t\t      buffer[idx - 1] = 0;\n-\t\t\t    do_spec_1 (buffer, 1, NULL_PTR);\n-\t\t\t    /* Make this a separate argument.  */\n-\t\t\t    do_spec_1 (\" \", 0, NULL_PTR);\n-\t\t\t  }\n-\t\t      }\n-\t\t  }\n-\t\tfree (buffer);\n-\t      }\n+\t\t\t  /* Remove slash from pl->prefix.  */\n+\t\t\t  if (strlen (pl->prefix) >= bufsize)\n+\t\t\t    bufsize = strlen (pl->prefix) * 2 + 1;\n+\t\t\t  buffer = (char *) xrealloc (buffer, bufsize);\n+\t\t\t  strcpy (buffer, pl->prefix);\n+\t\t\t  idx = strlen (buffer);\n+\t\t\t  if (buffer[idx - 1] == '/')\n+\t\t\t    buffer[idx - 1] = 0;\n+\t\t\t  do_spec_1 (buffer, 1, NULL_PTR);\n+\t\t\t  /* Make this a separate argument.  */\n+\t\t\t  do_spec_1 (\" \", 0, NULL_PTR);\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t      free (buffer);\n+\t    }\n \t    break;\n \n \t  case 'e':"}]}