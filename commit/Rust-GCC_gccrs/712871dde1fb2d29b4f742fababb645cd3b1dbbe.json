{"sha": "712871dde1fb2d29b4f742fababb645cd3b1dbbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEyODcxZGRlMWZiMmQyOWI0Zjc0MmZhYmFiYjY0NWNkM2IxZGJiZQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2016-11-23T14:33:13Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2016-11-23T14:33:13Z"}, "message": "combine: Convert subreg-of-lshiftrt to zero_extract properly (PR78390)\n\nr242414, for PR77881, introduces some bugs (PR78390, PR78438, PR78477).\nIt all has the same root cause: that patch makes combine convert every\nlowpart subreg of a logical shift right to a zero_extract.  This cannot\nwork at all if it is not a constant shift, and it has to be a bit more\ncareful exactly which bits it extracts.\n\n\n\tPR target/77881\n\tPR bootstrap/78390\n\tPR target/78438\n\tPR bootstrap/78477\n\t* combine.c (make_compound_operation_int): Do not convert a subreg of\n\ta non-constant logical shift right to a zero_extract.  Handle the case\n\twhere some zero bits have been shifted into the range covered by that\n\tsubreg.\n\nFrom-SVN: r242757", "tree": {"sha": "35a38cefb14ddb97781f6cba2e1483e9cc17ac3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35a38cefb14ddb97781f6cba2e1483e9cc17ac3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/712871dde1fb2d29b4f742fababb645cd3b1dbbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712871dde1fb2d29b4f742fababb645cd3b1dbbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/712871dde1fb2d29b4f742fababb645cd3b1dbbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712871dde1fb2d29b4f742fababb645cd3b1dbbe/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "33951763a85087927068d553be6709cd03953a09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33951763a85087927068d553be6709cd03953a09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33951763a85087927068d553be6709cd03953a09"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "9f1a5c2e0ba7174622fcd7887e66769bd43059d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712871dde1fb2d29b4f742fababb645cd3b1dbbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712871dde1fb2d29b4f742fababb645cd3b1dbbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=712871dde1fb2d29b4f742fababb645cd3b1dbbe", "patch": "@@ -1,3 +1,14 @@\n+2016-11-23  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/77881\n+\tPR bootstrap/78390\n+\tPR target/78438\n+\tPR bootstrap/78477\n+\t* combine.c (make_compound_operation_int): Do not convert a subreg of\n+\ta non-constant logical shift right to a zero_extract.  Handle the case\n+\twhere some zero bits have been shifted into the range covered by that\n+\tsubreg.\n+\n 2016-11-23  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "ae25ef35ed9b985ae64f916e1e124c82420c3522", "filename": "gcc/combine.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712871dde1fb2d29b4f742fababb645cd3b1dbbe/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712871dde1fb2d29b4f742fababb645cd3b1dbbe/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=712871dde1fb2d29b4f742fababb645cd3b1dbbe", "patch": "@@ -8089,12 +8089,17 @@ make_compound_operation_int (machine_mode mode, rtx *x_ptr,\n \t/* If the SUBREG is masking of a logical right shift,\n \t   make an extraction.  */\n \tif (GET_CODE (inner) == LSHIFTRT\n+\t    && CONST_INT_P (XEXP (inner, 1))\n \t    && GET_MODE_SIZE (mode) < GET_MODE_SIZE (GET_MODE (inner))\n \t    && subreg_lowpart_p (x))\n \t  {\n \t    new_rtx = make_compound_operation (XEXP (inner, 0), next_code);\n+\t    int width = GET_MODE_PRECISION (GET_MODE (inner))\n+\t\t\t- INTVAL (XEXP (inner, 1));\n+\t    if (width > mode_width)\n+\t      width = mode_width;\n \t    new_rtx = make_extraction (mode, new_rtx, 0, XEXP (inner, 1),\n-\t\t\t\t       mode_width, 1, 0, in_code == COMPARE);\n+\t\t\t\t       width, 1, 0, in_code == COMPARE);\n \t    break;\n \t  }\n "}]}