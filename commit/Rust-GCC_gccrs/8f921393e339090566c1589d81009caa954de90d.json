{"sha": "8f921393e339090566c1589d81009caa954de90d", "node_id": "C_kwDOANBUbNoAKDhmOTIxMzkzZTMzOTA5MDU2NmMxNTg5ZDgxMDA5Y2FhOTU0ZGU5MGQ", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-12-24T16:09:36Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-12-24T16:09:36Z"}, "message": "i386: Add V2SFmode DIV insn pattern [PR95046, PR103797]\n\nUse V4SFmode \"DIVPS X,Y\" with [y0, y1, 1.0f, 1.0f] as a divisor\nto avoid division by zero.\n\n2021-12-24  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\tPR target/95046\n\tPR target/103797\n\t* config/i386/mmx.md (divv2sf3): New instruction pattern.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/95046\n\tPR target/103797\n\t* gcc.target/i386/pr95046-1.c (test_div): Add.\n\t(dg-options): Add -mno-recip.", "tree": {"sha": "9e3d67b60b2217fa0ea52e0fc6d2ad9be49d1295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e3d67b60b2217fa0ea52e0fc6d2ad9be49d1295"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f921393e339090566c1589d81009caa954de90d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f921393e339090566c1589d81009caa954de90d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f921393e339090566c1589d81009caa954de90d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f921393e339090566c1589d81009caa954de90d/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43dadcf3e7b0cba5a3ed3a8414b77e3fd75dfcd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43dadcf3e7b0cba5a3ed3a8414b77e3fd75dfcd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43dadcf3e7b0cba5a3ed3a8414b77e3fd75dfcd0"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "5a5755654c2a50d95a0e26567f963dc779e6fa30", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f921393e339090566c1589d81009caa954de90d/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f921393e339090566c1589d81009caa954de90d/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=8f921393e339090566c1589d81009caa954de90d", "patch": "@@ -523,6 +523,26 @@\n    (set_attr \"prefix\" \"*,orig,vex\")\n    (set_attr \"mode\" \"V2SF,V4SF,V4SF\")])\n \n+(define_expand \"divv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(div:V2SF (match_operand:V2SF 1 \"register_operand\")\n+\t\t  (match_operand:V2SF 2 \"register_operand\")))]\n+  \"TARGET_MMX_WITH_SSE\"\n+{\n+  rtx op0 = lowpart_subreg (V4SFmode, operands[0],\n+\t\t\t    GET_MODE (operands[0]));\n+  rtx op1 = lowpart_subreg (V4SFmode, operands[1],\n+\t\t\t    GET_MODE (operands[1]));\n+  rtx op2 = gen_rtx_VEC_CONCAT (V4SFmode, operands[2],\n+\t\t\t\tforce_reg (V2SFmode, CONST1_RTX (V2SFmode)));\n+  rtx tmp = gen_reg_rtx (V4SFmode);\n+\n+  emit_insn (gen_rtx_SET (tmp, op2));\n+\n+  emit_insn (gen_divv4sf3 (op0, op1, tmp));\n+  DONE;\n+})\n+\n (define_expand \"mmx_<code>v2sf3\"\n   [(set (match_operand:V2SF 0 \"register_operand\")\n         (smaxmin:V2SF"}, {"sha": "2a0e6db5fa5af0dc2566a818cee7e928e21bcbbf", "filename": "gcc/testsuite/gcc.target/i386/pr95046-1.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f921393e339090566c1589d81009caa954de90d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95046-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f921393e339090566c1589d81009caa954de90d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95046-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95046-1.c?ref=8f921393e339090566c1589d81009caa954de90d", "patch": "@@ -1,6 +1,6 @@\n /* PR target/95046 */\n /* { dg-do compile { target { ! ia32 } } } */\n-/* { dg-options \"-O3 -ffast-math -msse2\" } */\n+/* { dg-options \"-O3 -ffast-math -msse2 -mno-recip\" } */\n \n \n float r[2], a[2], b[2];\n@@ -32,6 +32,15 @@ test_mult (void)\n \n /* { dg-final { scan-assembler \"\\tv?mulps\" } } */\n \n+void\n+test_div (void)\n+{\n+  for (int i = 0; i < 2; i++)\n+    r[i] = a[i] / b[i];\n+}\n+\n+/* { dg-final { scan-assembler \"\\tv?divps\" } } */\n+\n void\n test_min (void)\n {"}]}