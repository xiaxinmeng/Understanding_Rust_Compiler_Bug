{"sha": "d7c4edd08e0a1e8a519affb51d40bcffbd60ff73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdjNGVkZDA4ZTBhMWU4YTUxOWFmZmI1MWQ0MGJjZmZiZDYwZmY3Mw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-09-06T09:34:00Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-09-06T09:34:00Z"}, "message": "pt.c (type_unification_real): Replace switch with if.\n\n\t* pt.c (type_unification_real): Replace switch with if.\n\t(unify): Tsubst non-type parms before comparing.\n\nFrom-SVN: r36195", "tree": {"sha": "c3755bc86140b1a61e02f7d38962107ce64f2907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3755bc86140b1a61e02f7d38962107ce64f2907"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7c4edd08e0a1e8a519affb51d40bcffbd60ff73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7c4edd08e0a1e8a519affb51d40bcffbd60ff73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7c4edd08e0a1e8a519affb51d40bcffbd60ff73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7c4edd08e0a1e8a519affb51d40bcffbd60ff73/comments", "author": null, "committer": null, "parents": [{"sha": "2ff0c96233b86edf05a09cd8f59ceee0c3a3bf7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ff0c96233b86edf05a09cd8f59ceee0c3a3bf7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ff0c96233b86edf05a09cd8f59ceee0c3a3bf7a"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "7d49a326abd66ed0743cdd24eaeca36209b9c118", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7c4edd08e0a1e8a519affb51d40bcffbd60ff73/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7c4edd08e0a1e8a519affb51d40bcffbd60ff73/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d7c4edd08e0a1e8a519affb51d40bcffbd60ff73", "patch": "@@ -1,3 +1,8 @@\n+2000-09-06  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* pt.c (type_unification_real): Replace switch with if.\n+\t(unify): Tsubst non-type parms before comparing.\n+\n 2000-09-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* error.c (dump_typename): New function, broken out of ..."}, {"sha": "51421fd9a17cb238e0bdae4e4d937b6cffad21da", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7c4edd08e0a1e8a519affb51d40bcffbd60ff73/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7c4edd08e0a1e8a519affb51d40bcffbd60ff73/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d7c4edd08e0a1e8a519affb51d40bcffbd60ff73", "patch": "@@ -7830,13 +7830,8 @@ type_unification_real (tparms, targs, parms, args, subr,\n       if (!subr)\n \tmaybe_adjust_types_for_deduction (strict, &parm, &arg);\n \n-      switch (unify (tparms, targs, parm, arg, sub_strict))\n-\t{\n-\tcase 0:\n-\t  break;\n-\tcase 1:\n-\t  return 1;\n-\t}\n+      if (unify (tparms, targs, parm, arg, sub_strict))\n+        return 1;\n     }\n   /* Fail if we've reached the end of the parm list, and more args\n      are present, and the parm list isn't variadic.  */\n@@ -8450,8 +8445,10 @@ unify (tparms, targs, parm, arg, strict)\n \t parameter-list and, if the corresponding template-argument is\n \t deduced, the template-argument type shall match the type of the\n \t template-parameter exactly, except that a template-argument\n-\t deduced from an array bound may be of any integral type.  */\n-      if (same_type_p (TREE_TYPE (arg), TREE_TYPE (parm)))\n+\t deduced from an array bound may be of any integral type. \n+\t The non-type parameter might use already deduced type parameters.  */\n+      if (same_type_p (TREE_TYPE (arg),\n+                       tsubst (TREE_TYPE (parm), targs, 0, NULL_TREE)))\n \t/* OK */;\n       else if ((strict & UNIFY_ALLOW_INTEGER)\n \t       && (TREE_CODE (TREE_TYPE (parm)) == INTEGER_TYPE"}]}