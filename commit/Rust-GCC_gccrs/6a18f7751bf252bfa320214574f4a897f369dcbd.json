{"sha": "6a18f7751bf252bfa320214574f4a897f369dcbd", "node_id": "C_kwDOANBUbNoAKDZhMThmNzc1MWJmMjUyYmZhMzIwMjE0NTc0ZjRhODk3ZjM2OWRjYmQ", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-12T08:28:02Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-18T13:45:11Z"}, "message": "Fix -Wformat-diag for s390x target.\n\ngcc/ChangeLog:\n\n\t* config/s390/s390-c.cc (s390_expand_overloaded_builtin): Wrap\n\tkeyword in quotes.\n\t(s390_resolve_overloaded_builtin): Remove trailing dot.\n\t* config/s390/s390.cc (s390_const_operand_ok): Use - for range.\n\t(s390_expand_builtin): Remove trailing dot.\n\t(s390_emit_prologue): Likewise, use semicolon.\n\t(s390_option_override_internal): Update keyword.\n\t* varasm.cc (do_assemble_alias): Wrap keyword in quotes.", "tree": {"sha": "4cc037abc10c3012ed34f489c27c79b020f24e71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cc037abc10c3012ed34f489c27c79b020f24e71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a18f7751bf252bfa320214574f4a897f369dcbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a18f7751bf252bfa320214574f4a897f369dcbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a18f7751bf252bfa320214574f4a897f369dcbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a18f7751bf252bfa320214574f4a897f369dcbd/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8355f3188bfb01b7e4f0dc3110cc6aaff7ee791e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8355f3188bfb01b7e4f0dc3110cc6aaff7ee791e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8355f3188bfb01b7e4f0dc3110cc6aaff7ee791e"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "c4ecf775c263f641b1df959539ca21acf0069749", "filename": "gcc/config/s390/s390-c.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a18f7751bf252bfa320214574f4a897f369dcbd/gcc%2Fconfig%2Fs390%2Fs390-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a18f7751bf252bfa320214574f4a897f369dcbd/gcc%2Fconfig%2Fs390%2Fs390-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-c.cc?ref=6a18f7751bf252bfa320214574f4a897f369dcbd", "patch": "@@ -484,7 +484,8 @@ s390_expand_overloaded_builtin (location_t loc,\n     case S390_OVERLOADED_BUILTIN_s390_vec_step:\n       if (TREE_CODE (TREE_TYPE ((*arglist)[0])) != VECTOR_TYPE)\n \t{\n-\t  error_at (loc, \"builtin vec_step can only be used on vector types.\");\n+\t  error_at (loc, \"builtin %qs can only be used on vector types\",\n+\t\t    \"vec_step\");\n \t  return error_mark_node;\n \t}\n       return build_int_cst (NULL_TREE,\n@@ -905,15 +906,15 @@ s390_resolve_overloaded_builtin (location_t loc,\n       if (ob_flags & B_INT)\n \t{\n \t  error_at (loc,\n-\t\t    \"builtin %qF is for GCC internal use only.\",\n+\t\t    \"builtin %qF is for GCC internal use only\",\n \t\t    ob_fndecl);\n \t  return error_mark_node;\n \t}\n       return NULL_TREE;\n     }\n \n   if (ob_flags & B_DEP)\n-    warning_at (loc, 0, \"builtin %qF is deprecated.\", ob_fndecl);\n+    warning_at (loc, 0, \"builtin %qF is deprecated\", ob_fndecl);\n \n   if (!TARGET_VX && (ob_flags & B_VX))\n     {\n@@ -1021,7 +1022,7 @@ s390_resolve_overloaded_builtin (location_t loc,\n     }\n \n   if (bflags_overloaded_builtin_var[last_match_index] & B_DEP)\n-    warning_at (loc, 0, \"%qs matching variant is deprecated.\",\n+    warning_at (loc, 0, \"%qs matching variant is deprecated\",\n \t\tIDENTIFIER_POINTER (DECL_NAME (ob_fndecl)));\n \n   /* Overloaded variants which have MAX set as low level builtin are"}, {"sha": "f01755687d9fdffddf9f8fbd979f19e0cb42067e", "filename": "gcc/config/s390/s390.cc", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a18f7751bf252bfa320214574f4a897f369dcbd/gcc%2Fconfig%2Fs390%2Fs390.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a18f7751bf252bfa320214574f4a897f369dcbd/gcc%2Fconfig%2Fs390%2Fs390.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.cc?ref=6a18f7751bf252bfa320214574f4a897f369dcbd", "patch": "@@ -766,7 +766,7 @@ s390_const_operand_ok (tree arg, int argnum, int op_flags, tree decl)\n \t\t     argnum, decl, values);\n \t    }\n \t  else\n-\t    error (\"constant argument %d for builtin %qF is out of range (0..%wu)\",\n+\t    error (\"constant argument %d for builtin %qF is out of range (0-%wu)\",\n \t\t   argnum, decl, (HOST_WIDE_INT_1U << bitwidth) - 1);\n \n \t  return false;\n@@ -783,7 +783,7 @@ s390_const_operand_ok (tree arg, int argnum, int op_flags, tree decl)\n \t  || tree_to_shwi (arg) > ((HOST_WIDE_INT_1 << (bitwidth - 1)) - 1))\n \t{\n \t  error (\"constant argument %d for builtin %qF is out of range \"\n-\t\t \"(%wd..%wd)\", argnum, decl,\n+\t\t \"(%wd-%wd)\", argnum, decl,\n \t\t -(HOST_WIDE_INT_1 << (bitwidth - 1)),\n \t\t (HOST_WIDE_INT_1 << (bitwidth - 1)) - 1);\n \t  return false;\n@@ -832,25 +832,25 @@ s390_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       if ((bflags & B_HTM) && !TARGET_HTM)\n \t{\n \t  error (\"builtin %qF is not supported without %<-mhtm%> \"\n-\t\t \"(default with %<-march=zEC12%> and higher).\", fndecl);\n+\t\t \"(default with %<-march=zEC12%> and higher)\", fndecl);\n \t  return const0_rtx;\n \t}\n       if (((bflags & B_VX) || (bflags & B_VXE)) && !TARGET_VX)\n \t{\n \t  error (\"builtin %qF requires %<-mvx%> \"\n-\t\t \"(default with %<-march=z13%> and higher).\", fndecl);\n+\t\t \"(default with %<-march=z13%> and higher)\", fndecl);\n \t  return const0_rtx;\n \t}\n \n       if ((bflags & B_VXE) && !TARGET_VXE)\n \t{\n-\t  error (\"Builtin %qF requires z14 or higher.\", fndecl);\n+\t  error (\"Builtin %qF requires z14 or higher\", fndecl);\n \t  return const0_rtx;\n \t}\n \n       if ((bflags & B_VXE2) && !TARGET_VXE2)\n \t{\n-\t  error (\"Builtin %qF requires z15 or higher.\", fndecl);\n+\t  error (\"Builtin %qF requires z15 or higher\", fndecl);\n \t  return const0_rtx;\n \t}\n \n@@ -11464,8 +11464,8 @@ s390_emit_prologue (void)\n \t    {\n \t      warning (0, \"frame size of function %qs is %wd\"\n \t\t       \" bytes exceeding user provided stack limit of \"\n-\t\t       \"%d bytes.  \"\n-\t\t       \"An unconditional trap is added.\",\n+\t\t       \"%d bytes; \"\n+\t\t       \"an unconditional trap is added\",\n \t\t       current_function_name(), cfun_frame_layout.frame_size,\n \t\t       s390_stack_size);\n \t      emit_insn (gen_trap ());\n@@ -11479,9 +11479,9 @@ s390_emit_prologue (void)\n \t      if (stack_guard >= s390_stack_size)\n \t\t{\n \t\t  warning (0, \"frame size of function %qs is %wd\"\n-\t\t\t   \" bytes which is more than half the stack size. \"\n-\t\t\t   \"The dynamic check would not be reliable. \"\n-\t\t\t   \"No check emitted for this function.\",\n+\t\t\t   \" bytes which is more than half the stack size; \"\n+\t\t\t   \"the dynamic check would not be reliable; \"\n+\t\t\t   \"no check emitted for this function\",\n \t\t\t   current_function_name(),\n \t\t\t   cfun_frame_layout.frame_size);\n \t\t}\n@@ -15557,11 +15557,11 @@ s390_option_override_internal (struct gcc_options *opts,\n       if (TARGET_HARD_DFP_P (opts_set->x_target_flags))\n \t{\n \t  if (!TARGET_CPU_DFP_P (opts))\n-\t    error (\"hardware decimal floating point instructions\"\n+\t    error (\"hardware decimal floating-point instructions\"\n \t\t   \" not available on %s\",\n \t\t   processor_table[(int)opts->x_s390_arch].name);\n \t  if (!TARGET_ZARCH_P (opts->x_target_flags))\n-\t    error (\"hardware decimal floating point instructions\"\n+\t    error (\"hardware decimal floating-point instructions\"\n \t\t   \" not available in ESA/390 mode\");\n \t}\n       else\n@@ -15573,7 +15573,7 @@ s390_option_override_internal (struct gcc_options *opts,\n     {\n       if (TARGET_HARD_DFP_P (opts_set->x_target_flags)\n \t  && TARGET_HARD_DFP_P (opts->x_target_flags))\n-\terror (\"%<-mhard-dfp%> can%'t be used in conjunction with \"\n+\terror (\"%<-mhard-dfp%> cannot be used in conjunction with \"\n \t       \"%<-msoft-float%>\");\n \n       opts->x_target_flags &= ~MASK_HARD_DFP;"}, {"sha": "5bc30f0c26eb387e6dff178a8fbe3fdf63e13fa0", "filename": "gcc/varasm.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a18f7751bf252bfa320214574f4a897f369dcbd/gcc%2Fvarasm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a18f7751bf252bfa320214574f4a897f369dcbd/gcc%2Fvarasm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.cc?ref=6a18f7751bf252bfa320214574f4a897f369dcbd", "patch": "@@ -6190,7 +6190,7 @@ do_assemble_alias (tree decl, tree target)\n       if (!TARGET_SUPPORTS_WEAK)\n \t{\n \t  error_at (DECL_SOURCE_LOCATION (decl),\n-\t\t    \"weakref is not supported in this configuration\");\n+\t\t    \"%qs is not supported in this configuration\", \"weakref \");\n \t  return;\n \t}\n #endif"}]}