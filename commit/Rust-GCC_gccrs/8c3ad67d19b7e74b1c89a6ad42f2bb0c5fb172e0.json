{"sha": "8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0", "node_id": "C_kwDOANBUbNoAKDhjM2FkNjdkMTliN2U3NGIxYzg5YTZhZDQyZjJiYjBjNWZiMTcyZTA", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-12-13T21:43:28Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-12-13T22:45:44Z"}, "message": "Get rid of lambdas within AST::StructStruct\n\nThese constructs make working with the IR needlessly complicated for\nstatic analysis. Replace with simple for loops, and delete the old\nStructStruct::iterate () method.\n\nFixes: #714", "tree": {"sha": "d015715eac87015e6bf8dd02a51a1fbc3bbcdb01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d015715eac87015e6bf8dd02a51a1fbc3bbcdb01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "946069f506afba2ac03b00ad8244f1f42e0c03f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/946069f506afba2ac03b00ad8244f1f42e0c03f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/946069f506afba2ac03b00ad8244f1f42e0c03f1"}], "stats": {"total": 89, "additions": 38, "deletions": 51}, "files": [{"sha": "16a9108165c737d6b277766969958e993c0df8be", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0", "patch": "@@ -1975,15 +1975,6 @@ class StructStruct : public Struct\n   std::vector<StructField> &get_fields () { return fields; }\n   const std::vector<StructField> &get_fields () const { return fields; }\n \n-  void iterate (std::function<bool (StructField &)> cb)\n-  {\n-    for (auto &field : fields)\n-      {\n-\tif (!cb (field))\n-\t  return;\n-      }\n-  }\n-\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */"}, {"sha": "2a8c9bbbc7efa82a73fa4f993f12431478ebe975", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0", "patch": "@@ -215,28 +215,28 @@ class ASTLoweringItem : public ASTLoweringBase\n \n     bool is_unit = struct_decl.is_unit_struct ();\n     std::vector<HIR::StructField> fields;\n-    struct_decl.iterate ([&] (AST::StructField &field) mutable -> bool {\n-      HIR::Visibility vis = HIR::Visibility::create_public ();\n-      HIR::Type *type\n-\t= ASTLoweringType::translate (field.get_field_type ().get ());\n+    for (AST::StructField &field : struct_decl.get_fields ())\n+      {\n+\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Type *type\n+\t  = ASTLoweringType::translate (field.get_field_type ().get ());\n \n-      auto crate_num = mappings->get_current_crate ();\n-      Analysis::NodeMapping mapping (crate_num, field.get_node_id (),\n-\t\t\t\t     mappings->get_next_hir_id (crate_num),\n-\t\t\t\t     mappings->get_next_localdef_id (\n-\t\t\t\t       crate_num));\n+\tauto crate_num = mappings->get_current_crate ();\n+\tAnalysis::NodeMapping mapping (crate_num, field.get_node_id (),\n+\t\t\t\t       mappings->get_next_hir_id (crate_num),\n+\t\t\t\t       mappings->get_next_localdef_id (\n+\t\t\t\t\t crate_num));\n \n-      HIR::StructField translated_field (mapping, field.get_field_name (),\n-\t\t\t\t\t std::unique_ptr<HIR::Type> (type), vis,\n-\t\t\t\t\t field.get_locus (),\n-\t\t\t\t\t field.get_outer_attrs ());\n+\tHIR::StructField translated_field (mapping, field.get_field_name (),\n+\t\t\t\t\t   std::unique_ptr<HIR::Type> (type),\n+\t\t\t\t\t   vis, field.get_locus (),\n+\t\t\t\t\t   field.get_outer_attrs ());\n \n-      if (struct_field_name_exists (fields, translated_field))\n-\treturn false;\n+\tif (struct_field_name_exists (fields, translated_field))\n+\t  break;\n \n-      fields.push_back (std::move (translated_field));\n-      return true;\n-    });\n+\tfields.push_back (std::move (translated_field));\n+      }\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, struct_decl.get_node_id (),"}, {"sha": "237c63563807bef5c4c0664000f8c842d91f6624", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0", "patch": "@@ -203,28 +203,28 @@ class ASTLoweringStmt : public ASTLoweringBase\n \n     bool is_unit = struct_decl.is_unit_struct ();\n     std::vector<HIR::StructField> fields;\n-    struct_decl.iterate ([&] (AST::StructField &field) mutable -> bool {\n-      HIR::Visibility vis = HIR::Visibility::create_public ();\n-      HIR::Type *type\n-\t= ASTLoweringType::translate (field.get_field_type ().get ());\n+    for (AST::StructField &field : struct_decl.get_fields ())\n+      {\n+\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Type *type\n+\t  = ASTLoweringType::translate (field.get_field_type ().get ());\n \n-      auto crate_num = mappings->get_current_crate ();\n-      Analysis::NodeMapping mapping (crate_num, field.get_node_id (),\n-\t\t\t\t     mappings->get_next_hir_id (crate_num),\n-\t\t\t\t     mappings->get_next_localdef_id (\n-\t\t\t\t       crate_num));\n+\tauto crate_num = mappings->get_current_crate ();\n+\tAnalysis::NodeMapping mapping (crate_num, field.get_node_id (),\n+\t\t\t\t       mappings->get_next_hir_id (crate_num),\n+\t\t\t\t       mappings->get_next_localdef_id (\n+\t\t\t\t\t crate_num));\n \n-      HIR::StructField translated_field (mapping, field.get_field_name (),\n-\t\t\t\t\t std::unique_ptr<HIR::Type> (type), vis,\n-\t\t\t\t\t field.get_locus (),\n-\t\t\t\t\t field.get_outer_attrs ());\n+\tHIR::StructField translated_field (mapping, field.get_field_name (),\n+\t\t\t\t\t   std::unique_ptr<HIR::Type> (type),\n+\t\t\t\t\t   vis, field.get_locus (),\n+\t\t\t\t\t   field.get_outer_attrs ());\n \n-      if (struct_field_name_exists (fields, translated_field))\n-\treturn false;\n+\tif (struct_field_name_exists (fields, translated_field))\n+\t  break;\n \n-      fields.push_back (std::move (translated_field));\n-      return true;\n-    });\n+\tfields.push_back (std::move (translated_field));\n+      }\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, struct_decl.get_node_id (),"}, {"sha": "e8e6b8d0120bec59ffed97e97ba2f925d29589fd", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0", "patch": "@@ -308,11 +308,9 @@ class ResolveItem : public ResolverBase\n     if (struct_decl.has_where_clause ())\n       ResolveWhereClause::Resolve (struct_decl.get_where_clause ());\n \n-    struct_decl.iterate ([&] (AST::StructField &field) mutable -> bool {\n+    for (AST::StructField &field : struct_decl.get_fields ())\n       ResolveType::go (field.get_field_type ().get (),\n \t\t       struct_decl.get_node_id ());\n-      return true;\n-    });\n \n     resolver->get_type_scope ().pop ();\n   }"}, {"sha": "16f5b9afd072350dd1722d16c4e660038335f019", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0", "patch": "@@ -237,11 +237,9 @@ class ResolveStmt : public ResolverBase\n \t  }\n       }\n \n-    struct_decl.iterate ([&] (AST::StructField &field) mutable -> bool {\n+    for (AST::StructField &field : struct_decl.get_fields ())\n       ResolveType::go (field.get_field_type ().get (),\n \t\t       struct_decl.get_node_id ());\n-      return true;\n-    });\n \n     resolver->get_type_scope ().pop ();\n   }"}]}