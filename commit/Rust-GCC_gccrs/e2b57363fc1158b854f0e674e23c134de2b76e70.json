{"sha": "e2b57363fc1158b854f0e674e23c134de2b76e70", "node_id": "C_kwDOANBUbNoAKGUyYjU3MzYzZmMxMTU4Yjg1NGYwZTY3NGUyM2MxMzRkZTJiNzZlNzA", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-16T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-16T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "b1057161f494f3595bdf65dad4021590d45a11f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1057161f494f3595bdf65dad4021590d45a11f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2b57363fc1158b854f0e674e23c134de2b76e70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2b57363fc1158b854f0e674e23c134de2b76e70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2b57363fc1158b854f0e674e23c134de2b76e70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2b57363fc1158b854f0e674e23c134de2b76e70/comments", "author": null, "committer": null, "parents": [{"sha": "87c2080b056ea2b7f145cba927f36e4f40900205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c2080b056ea2b7f145cba927f36e4f40900205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87c2080b056ea2b7f145cba927f36e4f40900205"}], "stats": {"total": 480, "additions": 479, "deletions": 1}, "files": [{"sha": "52de288664ade89935d3160b4598446725a3d7c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b57363fc1158b854f0e674e23c134de2b76e70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b57363fc1158b854f0e674e23c134de2b76e70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2b57363fc1158b854f0e674e23c134de2b76e70", "patch": "@@ -1,3 +1,164 @@\n+2021-11-15  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* gimple-fold.c (gimple_fold_builtin_strncat): Use ranges to\n+\tdetermine if it is safe to transform to strcat.\n+\t(gimple_fold_builtin_snprintf): Likewise.\n+\n+2021-11-15  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* gimple-fold.c (known_lower): New function.\n+\t(gimple_fold_builtin_strncat_chk,\n+\tgimple_fold_builtin_memory_chk, gimple_fold_builtin_stxcpy_chk,\n+\tgimple_fold_builtin_stxncpy_chk,\n+\tgimple_fold_builtin_snprintf_chk,\n+\tgimple_fold_builtin_sprintf_chk): Use it.\n+\n+2021-11-15  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* gimple-fold.c (dump_transformation): New function.\n+\t(gimple_fold_builtin_stxcpy_chk,\n+\tgimple_fold_builtin_stxncpy_chk): Use it.  Simplify to\n+\tBUILT_IN_STRNCPY if return value is not used.\n+\n+2021-11-15  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/103184\n+\t* tree-ssa-ccp.c (optimize_atomic_bit_test_and): Check optab\n+\tbefore transforming equivalent, but slighly different cases to\n+\ttheir canonical forms.\n+\n+2021-11-15  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR fortran/102992\n+\t* config/darwin.h (TARGET_DTORS_FROM_CXA_ATEXIT): New.\n+\t* doc/tm.texi: Regenerated.\n+\t* doc/tm.texi.in: Add TARGET_DTORS_FROM_CXA_ATEXIT hook.\n+\t* ipa.c (cgraph_build_static_cdtor_1): Return the built\n+\tfunction decl.\n+\t(build_cxa_atexit_decl): New.\n+\t(build_dso_handle_decl): New.\n+\t(build_cxa_dtor_registrations): New.\n+\t(compare_cdtor_tu_order): New.\n+\t(build_cxa_atexit_fns): New.\n+\t(ipa_cdtor_merge): If dtors_from_cxa_atexit is set,\n+\tprocess the DTORs/CTORs accordingly.\n+\t(pass_ipa_cdtor_merge::gate): Also run if\n+\tdtors_from_cxa_atexit is set.\n+\t* target.def (dtors_from_cxa_atexit): New hook.\n+\n+2021-11-15  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Test ld64 for -platform-version support.\n+\n+2021-11-15  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* diagnostic-spec.h (typedef xint_hash_t)\n+\t(typedef xint_hash_map_t): Replace with...\n+\t(typedef nowarn_map_t): ... this.\n+\t(nowarn_map): Adjust.\n+\t* diagnostic-spec.c (nowarn_map, suppress_warning_at): Likewise.\n+\n+2021-11-15  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* profile.c (branch_prob): Use 'location_hash' for\n+\t'seen_locations'.\n+\n+2021-11-15  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/103207\n+\t* value-range.cc (irange::set): Drop overflow.\n+\n+2021-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimplify.c (optimize_target_teams): Only add OMP_CLAUSE_THREAD_LIMIT\n+\tto OMP_TARGET_CLAUSES if it isn't there already.\n+\n+2021-11-15  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc (path_range_query::internal_range_of_expr):\n+\tRemove useless code.\n+\t(path_range_query::ssa_defined_in_bb): New.\n+\t(path_range_query::ssa_range_in_phi): Avoid fold_range call that\n+\tcould trigger additional lookups.\n+\tDo not use the cache for ARGs defined in this block.\n+\t(path_range_query::compute_ranges_in_block): Use ssa_defined_in_bb.\n+\t(path_range_query::maybe_register_phi_relation): Same.\n+\t(path_range_query::range_of_stmt): Adjust comment.\n+\t* gimple-range-path.h (ssa_defined_in_bb): New.\n+\n+2021-11-15  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc (path_range_query::internal_range_of_expr):\n+\tDefault to global range if nothing found.\n+\n+2021-11-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103237\n+\t* tree-vect-loop.c (vect_is_simple_reduction): Fail for\n+\tdouble reductions with multiple inner loop LC PHI nodes.\n+\n+2021-11-15  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\tPR target/103069\n+\t* config/i386/i386-expand.c (ix86_expand_atomic_fetch_op_loop):\n+\tNew expand function.\n+\t* config/i386/i386-options.c (ix86_target_string): Add\n+\t-mrelax-cmpxchg-loop flag.\n+\t(ix86_valid_target_attribute_inner_p): Likewise.\n+\t* config/i386/i386-protos.h (ix86_expand_atomic_fetch_op_loop):\n+\tNew expand function prototype.\n+\t* config/i386/i386.opt: Add -mrelax-cmpxchg-loop.\n+\t* config/i386/sync.md (atomic_fetch_<logic><mode>): New expander\n+\tfor SI,HI,QI modes.\n+\t(atomic_<logic>_fetch<mode>): Likewise.\n+\t(atomic_fetch_nand<mode>): Likewise.\n+\t(atomic_nand_fetch<mode>): Likewise.\n+\t(atomic_fetch_<logic><mode>): New expander for DI,TI modes.\n+\t(atomic_<logic>_fetch<mode>): Likewise.\n+\t(atomic_fetch_nand<mode>): Likewise.\n+\t(atomic_nand_fetch<mode>): Likewise.\n+\t* doc/invoke.texi: Document -mrelax-cmpxchg-loop.\n+\n+2021-11-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103219\n+\t* gimple-loop-jam.c (tree_loop_unroll_and_jam): Use single_exit\n+\tto determine the exit for the VN region.\n+\n+2021-11-15  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* tree-ssa-loop.c (pass_vectorize): Move to tree-vectorizer.c.\n+\t(pass_data_vectorize): Likewise.\n+\t(make_pass_vectorize): Likewise.\n+\t* tree-vectorizer.c (vectorize_loops): Merge with\n+\tpass_vectorize::execute and replace cfun occurences with fun param.\n+\t(adjust_simduid_builtins): Add fun param, replace cfun occurences with\n+\tfun, and adjust callers approrpiately.\n+\t(note_simd_array_uses): Likewise.\n+\t(vect_loop_dist_alias_call): Likewise.\n+\t(set_uid_loop_bbs): Likewise.\n+\t(vect_transform_loops): Likewise.\n+\t(try_vectorize_loop_1): Likewise.\n+\t(try_vectorize_loop): Likewise.\n+\n+2021-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/103205\n+\t* config/i386/sync.md (atomic_bit_test_and_set<mode>,\n+\tatomic_bit_test_and_complement<mode>,\n+\tatomic_bit_test_and_reset<mode>): Use OPTAB_WIDEN instead of\n+\tOPTAB_DIRECT.\n+\n+2021-11-15  Maciej W. Rozycki  <macro@embecosm.com>\n+\n+\t* config/vax/vax.c (vax_lra_p): New prototype and function.\n+\t(TARGET_LRA_P): Wire it.\n+\t* config/vax/vax.opt (mlra): New option.\n+\t* doc/invoke.texi (Option Summary, VAX Options): Document the\n+\tnew option.\n+\n 2021-11-14  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-modref.h (struct modref_summary): Add nondeterministic"}, {"sha": "7090fb4b3b1a19c2bbf7d8783cc397b4eeed81bb", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b57363fc1158b854f0e674e23c134de2b76e70/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b57363fc1158b854f0e674e23c134de2b76e70/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e2b57363fc1158b854f0e674e23c134de2b76e70", "patch": "@@ -1 +1 @@\n-20211115\n+20211116"}, {"sha": "887949b29c65c025ff33300367352d1ba63acc00", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b57363fc1158b854f0e674e23c134de2b76e70/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b57363fc1158b854f0e674e23c134de2b76e70/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e2b57363fc1158b854f0e674e23c134de2b76e70", "patch": "@@ -1,3 +1,8 @@\n+2021-11-15  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* gcc-interface/Makefile.in: Use DSYMUTIL_FOR_TARGET in\n+\tlibgnat/libgnarl recipies.\n+\n 2021-11-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/ada-tree.h (DECL_STUBBED_P): Delete."}, {"sha": "7ed01020ecca0445db6b01d1474eb58ce2f5d859", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b57363fc1158b854f0e674e23c134de2b76e70/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b57363fc1158b854f0e674e23c134de2b76e70/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e2b57363fc1158b854f0e674e23c134de2b76e70", "patch": "@@ -1,3 +1,14 @@\n+2021-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* c.opt: Add -fimplicit-constexpr.\n+\t* c-cppbuiltin.c: Define __cpp_implicit_constexpr.\n+\t* c-opts.c (c_common_post_options): Disable below C++14.\n+\n+2021-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-omp.c (c_omp_split_clauses) <case OMP_CLAUSE_THREAD_LIMIT>:\n+\tDuplicate to both OMP_TARGET and OMP_TEAMS.\n+\n 2021-11-10  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/101940"}, {"sha": "3ce48f1abb82ddd63c954161e01d3d69fb1cdcf1", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b57363fc1158b854f0e674e23c134de2b76e70/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b57363fc1158b854f0e674e23c134de2b76e70/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e2b57363fc1158b854f0e674e23c134de2b76e70", "patch": "@@ -1,3 +1,8 @@\n+2021-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (OMP_TARGET_CLAUSE_MASK): Add\n+\tPRAGMA_OMP_CLAUSE_THREAD_LIMIT.\n+\n 2021-11-11  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_omp_clause_num_teams): Parse optional"}, {"sha": "61ce6295b2d55aa547b1c1ec9350ee05676815da", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b57363fc1158b854f0e674e23c134de2b76e70/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b57363fc1158b854f0e674e23c134de2b76e70/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e2b57363fc1158b854f0e674e23c134de2b76e70", "patch": "@@ -1,3 +1,69 @@\n+2021-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (struct lang_decl_fn): Add implicit_constexpr.\n+\t(decl_implicit_constexpr_p): New.\n+\t* class.c (type_maybe_constexpr_destructor): Use\n+\tTYPE_HAS_TRIVIAL_DESTRUCTOR and maybe_constexpr_fn.\n+\t(finalize_literal_type_property): Simplify.\n+\t* constexpr.c (is_valid_constexpr_fn): Check for dtor.\n+\t(maybe_save_constexpr_fundef): Try to set DECL_DECLARED_CONSTEXPR_P\n+\ton inlines.\n+\t(cxx_eval_call_expression): Use maybe_constexpr_fn.\n+\t(maybe_constexpr_fn): Handle flag_implicit_constexpr.\n+\t(var_in_maybe_constexpr_fn): Use maybe_constexpr_fn.\n+\t(potential_constant_expression_1): Likewise.\n+\t(decl_implicit_constexpr_p): New.\n+\t* decl.c (validate_constexpr_redeclaration): Allow change with\n+\t-fimplicit-constexpr.\n+\t(grok_special_member_properties): Use maybe_constexpr_fn.\n+\t* error.c (dump_function_decl): Don't print 'constexpr'\n+\tif it's implicit.\n+\t* Make-lang.in (check-c++-all): Update.\n+\n+2021-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* typeck2.c (split_nonconstant_init_1): Handle flexarrays better.\n+\n+2021-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (OMP_TARGET_CLAUSE_MASK): Add\n+\tPRAGMA_OMP_CLAUSE_THREAD_LIMIT.\n+\n+2021-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (perform_implicit_conversion_flags): Use the location of\n+\tthe argument.\n+\t* lambda.c (build_lambda_object): Set location on the TARGET_EXPR.\n+\n+2021-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c (maybe_save_constexpr_fundef): Also check whether the\n+\tbody of a constructor is potentially constant.\n+\n+2021-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* semantics.c (is_this_parameter): Check DECL_HAS_VALUE_EXPR_P\n+\tinstead of is_capture_proxy.\n+\n+2021-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/70690\n+\t* init.c (build_vec_init): Check default_init_uninitialized_part in\n+\tC++20.\n+\n+2021-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c (maybe_constant_value): Don't evaluate\n+\tin an unevaluated operand unless manifestly const-evaluated.\n+\t(fold_non_dependent_expr_template): Likewise.\n+\t* decl.c (compute_array_index_type_loc): This context is\n+\tmanifestly constant-evaluated.\n+\n+2021-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c (cxx_eval_thunk_call): Error instead of ICE\n+\ton vbase thunk to constexpr function.\n+\n 2021-11-11  Patrick Palka  <ppalka@redhat.com>\n \n \t* parser.c (cp_parser_template_argument_list): Use auto_vec"}, {"sha": "10dfca4127eebbfa213fdccedbf85783ada3e26d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b57363fc1158b854f0e674e23c134de2b76e70/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b57363fc1158b854f0e674e23c134de2b76e70/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e2b57363fc1158b854f0e674e23c134de2b76e70", "patch": "@@ -1,3 +1,9 @@\n+2021-11-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* openmp.c (OMP_TARGET_CLAUSES): Add thread_limit.\n+\t* trans-openmp.c (gfc_split_omp_clauses): Add thread_limit also to\n+\tteams.\n+\n 2021-11-12  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* parse.c (decode_omp_directive): Fix permitting 'nowait' for some"}, {"sha": "b221cba038dc01f647110363bffb5c3bab4ab756", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b57363fc1158b854f0e674e23c134de2b76e70/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b57363fc1158b854f0e674e23c134de2b76e70/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2b57363fc1158b854f0e674e23c134de2b76e70", "patch": "@@ -1,3 +1,161 @@\n+2021-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* lib/g++-dg.exp: Handle \"impcx\".\n+\t* lib/target-supports.exp\n+\t(check_effective_target_implicit_constexpr): New.\n+\t* g++.dg/abi/abi-tag16.C:\n+\t* g++.dg/abi/abi-tag18a.C:\n+\t* g++.dg/abi/guard4.C:\n+\t* g++.dg/abi/lambda-defarg1.C:\n+\t* g++.dg/abi/mangle26.C:\n+\t* g++.dg/cpp0x/constexpr-diag3.C:\n+\t* g++.dg/cpp0x/constexpr-ex1.C:\n+\t* g++.dg/cpp0x/constexpr-ice5.C:\n+\t* g++.dg/cpp0x/constexpr-incomplete2.C:\n+\t* g++.dg/cpp0x/constexpr-memfn1.C:\n+\t* g++.dg/cpp0x/constexpr-neg3.C:\n+\t* g++.dg/cpp0x/constexpr-specialization.C:\n+\t* g++.dg/cpp0x/inh-ctor19.C:\n+\t* g++.dg/cpp0x/inh-ctor30.C:\n+\t* g++.dg/cpp0x/lambda/lambda-mangle3.C:\n+\t* g++.dg/cpp0x/lambda/lambda-mangle5.C:\n+\t* g++.dg/cpp1y/auto-fn12.C:\n+\t* g++.dg/cpp1y/constexpr-loop5.C:\n+\t* g++.dg/cpp1z/constexpr-lambda7.C:\n+\t* g++.dg/cpp2a/constexpr-dtor3.C:\n+\t* g++.dg/cpp2a/constexpr-new13.C:\n+\t* g++.dg/cpp2a/constinit11.C:\n+\t* g++.dg/cpp2a/constinit12.C:\n+\t* g++.dg/cpp2a/constinit14.C:\n+\t* g++.dg/cpp2a/constinit15.C:\n+\t* g++.dg/cpp2a/spaceship-constexpr1.C:\n+\t* g++.dg/cpp2a/spaceship-eq3.C:\n+\t* g++.dg/cpp2a/udlit-class-nttp-neg2.C:\n+\t* g++.dg/debug/dwarf2/auto1.C:\n+\t* g++.dg/debug/dwarf2/cdtor-1.C:\n+\t* g++.dg/debug/dwarf2/lambda1.C:\n+\t* g++.dg/debug/dwarf2/pr54508.C:\n+\t* g++.dg/debug/dwarf2/pubnames-2.C:\n+\t* g++.dg/debug/dwarf2/pubnames-3.C:\n+\t* g++.dg/ext/is_literal_type3.C:\n+\t* g++.dg/ext/visibility/template7.C:\n+\t* g++.dg/gcov/gcov-12.C:\n+\t* g++.dg/gcov/gcov-2.C:\n+\t* g++.dg/ipa/devirt-35.C:\n+\t* g++.dg/ipa/devirt-36.C:\n+\t* g++.dg/ipa/devirt-37.C:\n+\t* g++.dg/ipa/devirt-44.C:\n+\t* g++.dg/ipa/imm-devirt-1.C:\n+\t* g++.dg/lookup/builtin5.C:\n+\t* g++.dg/lto/inline-crossmodule-1_0.C:\n+\t* g++.dg/modules/enum-1_a.C:\n+\t* g++.dg/modules/fn-inline-1_c.C:\n+\t* g++.dg/modules/pmf-1_b.C:\n+\t* g++.dg/modules/used-1_c.C:\n+\t* g++.dg/tls/thread_local11.C:\n+\t* g++.dg/tls/thread_local11a.C:\n+\t* g++.dg/tm/pr46653.C:\n+\t* g++.dg/ubsan/pr70035.C:\n+\t* g++.old-deja/g++.other/delete6.C:\n+\t* g++.dg/modules/pmf-1_a.H:\n+\tAdjust for implicit constexpr.\n+\n+2021-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/ext/flexary37.C: Remove expected error.\n+\n+2021-11-15  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* gcc.dg/fold-stringops-2.c: Define size_t.\n+\t(safe1): Adjust.\n+\t(safe4): New test.\n+\t* gcc.dg/fold-stringops-3.c: New test.\n+\n+2021-11-15  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* gcc.dg/Wobjsize-1.c: Make warning change line agnostic.\n+\t* gcc.dg/fold-stringops-2.c: New test.\n+\n+2021-11-15  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* gcc.dg/fold-stringops-1.c: New test.\n+\n+2021-11-15  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/103184\n+\t* gcc.dg/pr103184-1.c: New test.\n+\t* gcc.dg/pr103184-2.c: Likewise.\n+\n+2021-11-15  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* gcc.dg/vect/tsvc/tsvc.h: Use malloc for Darwin 9 and\n+\tearlier.\n+\n+2021-11-15  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr103207.c: New test.\n+\n+2021-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/100469\n+\t* g++.dg/opt/pr100469.C: New test.\n+\n+2021-11-15  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/103205\n+\t* gcc.target/i386/pr103205-2.c: New test.\n+\n+2021-11-15  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* g++.dg/tree-ssa/pr31146-2.C: Add -fno-thread-jumps.\n+\n+2021-11-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103237\n+\t* gcc.dg/torture/pr103237.c: New testcase.\n+\n+2021-11-15  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\tPR target/103069\n+\t* gcc.target/i386/pr103069-1.c: New test.\n+\t* gcc.target/i386/pr103069-2.c: Ditto.\n+\n+2021-11-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103219\n+\t* gcc.dg/torture/pr103219.c: New testcase.\n+\n+2021-11-15  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* gcc.target/i386/pr101346.c: Require dfp support.\n+\n+2021-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/103205\n+\t* gcc.target/i386/pr103205.c: New test.\n+\n+2021-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/lambda/lambda-switch.C: Adjust expected location.\n+\n+2021-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp1y/constexpr-89285-2.C: Expect error.\n+\t* g++.dg/cpp1y/constexpr-89285.C: Adjust error.\n+\n+2021-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/70690\n+\t* g++.dg/init/array41a.C: New test.\n+\n+2021-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp2a/constexpr-virtual20.C: New test.\n+\n+2021-11-15  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.dg/uninit-pred-9_b.c: Correct last adjustment, for CRIS.\n+\n 2021-11-15  Andrew Pinski  <apinski@marvell.com>\n \n \t* gcc.dg/tree-ssa/pr100278.c: Move to ..."}, {"sha": "83792b822babaed5eef4e66918e978642de6a87d", "filename": "libffi/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b57363fc1158b854f0e674e23c134de2b76e70/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b57363fc1158b854f0e674e23c134de2b76e70/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=e2b57363fc1158b854f0e674e23c134de2b76e70", "patch": "@@ -1,3 +1,12 @@\n+2021-11-15  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* LOCAL_PATCHES: Add commit a91f844ef44.\n+\n+2021-11-15  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR libffi/102874\n+\t* src/x86/win64.S (epilogue): Use #define instead of .macro.\n+\n 2021-11-04  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* Makefile.am (AM_CFLAGS): Add $(CET_FLAGS)."}, {"sha": "21c92711283602c73e768d2d6a88ac5e03494f57", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b57363fc1158b854f0e674e23c134de2b76e70/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b57363fc1158b854f0e674e23c134de2b76e70/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=e2b57363fc1158b854f0e674e23c134de2b76e70", "patch": "@@ -1,3 +1,39 @@\n+2021-11-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/thread-limit-1.f90: New test.\n+\n+2021-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* task.c (gomp_create_target_task): Copy args array as well.\n+\t* target.c (gomp_target_fallback): Add args argument.\n+\tSet gomp_icv (true)->thread_limit_var if thread_limit is present.\n+\t(GOMP_target): Adjust gomp_target_fallback caller.\n+\t(GOMP_target_ext): Likewise.\n+\t(gomp_target_task_fn): Likewise.\n+\t* config/nvptx/team.c (gomp_nvptx_main): Set\n+\tgomp_global_icv.thread_limit_var.\n+\t* testsuite/libgomp.c-c++-common/thread-limit-1.c: New test.\n+\n+2021-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/nvptx/team.c (__gomp_team_num): Define as\n+\t__attribute__((shared)) var.\n+\t(gomp_nvptx_main): Initialize __gomp_team_num to 0.\n+\t* config/nvptx/target.c (__gomp_team_num): Declare as\n+\textern __attribute__((shared)) var.\n+\t(GOMP_teams4): Use __gomp_team_num as the team number instead of\n+\t%ctaid.x.  If first, initialize it to %ctaid.x.  If num_teams_lower\n+\tis bigger than num_blocks, use num_teams_lower teams and arrange for\n+\tbumping of __gomp_team_num if !first and returning false once we run\n+\tout of teams.\n+\t* config/nvptx/teams.c (__gomp_team_num): Declare as\n+\textern __attribute__((shared)) var.\n+\t(omp_get_team_num): Return __gomp_team_num value instead of %ctaid.x.\n+\n+2021-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c/teams-5.c: New test.\n+\n 2021-11-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/103201"}, {"sha": "cb6a8a3925a0343e0869d3e788073f0c0b19c89c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b57363fc1158b854f0e674e23c134de2b76e70/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b57363fc1158b854f0e674e23c134de2b76e70/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e2b57363fc1158b854f0e674e23c134de2b76e70", "patch": "@@ -1,3 +1,24 @@\n+2021-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* testsuite/20_util/to_address/1_neg.cc: Adjust error.\n+\t* testsuite/26_numerics/random/concept.cc: Adjust asserts.\n+\n+2021-11-15  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/hashtable_policy.h:\n+\t(_Hash_code_base<>::_M_hash_code(const _Hash&, const _Hash_node_value<_Value, true>&)): New.\n+\t(_Hash_code_base<>::_M_hash_code<_H2>(const _H2&, const _Hash_node_value<>&)): New.\n+\t* include/bits/hashtable.h (_Hashtable<>::_M_merge_unique): Use latter.\n+\t(_Hashtable<>::_M_merge_multi): Likewise.\n+\t* testsuite/23_containers/unordered_multiset/modifiers/merge.cc (test05): New test.\n+\t* testsuite/23_containers/unordered_set/modifiers/merge.cc (test04): New test.\n+\n+2021-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* src/c++17/memory_resource.cc: Add missing constexpr.\n+\t* include/experimental/internet: Only mark copy constructor\n+\tas constexpr with __cpp_constexpr_dynamic_alloc.\n+\n 2021-11-14  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/debug/safe_container.h (_Safe_container<>::_M_safe): Remove."}]}