{"sha": "7e76cef873342a66408c126abceaf7dbddd3f477", "node_id": "C_kwDOANBUbNoAKDdlNzZjZWY4NzMzNDJhNjY0MDhjMTI2YWJjZWFmN2RiZGRkM2Y0Nzc", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-15T18:41:14Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-15T18:41:14Z"}, "message": "libstdc++: Avoid double-deref of __first in ranges::minmax [PR104858]\n\n\tPR libstdc++/104858\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_algo.h (__minmax_fn): Avoid dereferencing\n\t__first twice at the start.\n\t* testsuite/25_algorithms/minmax/constrained.cc (test06): New test.", "tree": {"sha": "8a816011c97dd3edf618d648833df78980329f55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a816011c97dd3edf618d648833df78980329f55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e76cef873342a66408c126abceaf7dbddd3f477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e76cef873342a66408c126abceaf7dbddd3f477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e76cef873342a66408c126abceaf7dbddd3f477", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e76cef873342a66408c126abceaf7dbddd3f477/comments", "author": null, "committer": null, "parents": [{"sha": "eb3f2e9348e8057f4219859a96739ff1ba350611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb3f2e9348e8057f4219859a96739ff1ba350611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb3f2e9348e8057f4219859a96739ff1ba350611"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "3d30fb1428cfc72c67d06a1384de1bb0dd9b9b12", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e76cef873342a66408c126abceaf7dbddd3f477/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e76cef873342a66408c126abceaf7dbddd3f477/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=7e76cef873342a66408c126abceaf7dbddd3f477", "patch": "@@ -3084,7 +3084,7 @@ namespace ranges\n \tauto __last = ranges::end(__r);\n \t__glibcxx_assert(__first != __last);\n \tauto __comp_proj = __detail::__make_comp_proj(__comp, __proj);\n-\tminmax_result<range_value_t<_Range>> __result = {*__first, *__first};\n+\tminmax_result<range_value_t<_Range>> __result = {*__first, __result.min};\n \tif (++__first == __last)\n \t  return __result;\n \telse"}, {"sha": "59864043a0af7b6bfd125b0ddf3463e4b0370a48", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax/constrained.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e76cef873342a66408c126abceaf7dbddd3f477/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e76cef873342a66408c126abceaf7dbddd3f477/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Fconstrained.cc?ref=7e76cef873342a66408c126abceaf7dbddd3f477", "patch": "@@ -20,6 +20,7 @@\n \n #include <algorithm>\n #include <string>\n+#include <utility>\n #include <vector>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n@@ -129,6 +130,34 @@ test05()\n   VERIFY( result.min == \"a\"s && result.max == \"c\"s );\n }\n \n+struct A {\n+  A() = delete;\n+  A(int i) : i(i) { }\n+  A(const A&) = default;\n+  A(A&& other) : A(std::as_const(other)) { ++move_count; }\n+  A& operator=(const A&) = default;\n+  A& operator=(A&& other) {\n+    ++move_count;\n+    return *this = std::as_const(other);\n+  };\n+  friend auto operator<=>(const A&, const A&) = default;\n+  static inline int move_count = 0;\n+  int i;\n+};\n+\n+void\n+test06()\n+{\n+  // PR libstdc++/104858\n+  // Verify ranges::minmax doesn't dereference the iterator for the first\n+  // element in the range twice.\n+  A a(42);\n+  ranges::subrange r = {std::move_iterator(&a), std::move_sentinel(&a + 1)};\n+  auto result = ranges::minmax(r);\n+  VERIFY( A::move_count == 1 );\n+  VERIFY( result.min.i == 42 && result.max.i == 42 );\n+}\n+\n int\n main()\n {\n@@ -137,4 +166,5 @@ main()\n   test03();\n   test04();\n   test05();\n+  test06();\n }"}]}