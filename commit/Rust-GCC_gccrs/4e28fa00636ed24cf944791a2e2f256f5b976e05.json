{"sha": "4e28fa00636ed24cf944791a2e2f256f5b976e05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUyOGZhMDA2MzZlZDI0Y2Y5NDQ3OTFhMmUyZjI1NmY1Yjk3NmUwNQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-23T06:06:34Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-23T06:06:34Z"}, "message": "(C_PROMOTING_INTEGER_TYPE_P): New macro.\n\nFrom-SVN: r1667", "tree": {"sha": "643042727dc13cf9e93b1afeed92b9b862a730c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/643042727dc13cf9e93b1afeed92b9b862a730c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e28fa00636ed24cf944791a2e2f256f5b976e05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e28fa00636ed24cf944791a2e2f256f5b976e05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e28fa00636ed24cf944791a2e2f256f5b976e05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e28fa00636ed24cf944791a2e2f256f5b976e05/comments", "author": null, "committer": null, "parents": [{"sha": "24bc4c7f4ea7d81f1e880ab9e4f276096d0334f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24bc4c7f4ea7d81f1e880ab9e4f276096d0334f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24bc4c7f4ea7d81f1e880ab9e4f276096d0334f8"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "353038b11e9783eb04047f615a6ffbca26af278e", "filename": "gcc/c-tree.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e28fa00636ed24cf944791a2e2f256f5b976e05/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e28fa00636ed24cf944791a2e2f256f5b976e05/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=4e28fa00636ed24cf944791a2e2f256f5b976e05", "patch": "@@ -100,6 +100,17 @@ struct lang_type\n    TYPE_ARG_TYPES for functions with prototypes, but created for functions\n    without prototypes.  */\n #define TYPE_ACTUAL_ARG_TYPES(NODE) TYPE_NONCOPIED_PARTS (NODE)\n+\n+/* Nonzero if the type T promotes to itself.\n+   ANSI C states explicitly the list of types that promote;\n+   in particular, short promotes to int even if they have the same width.  */\n+#define C_PROMOTING_INTEGER_TYPE_P(t)\t\t\t\t\\\n+  (TREE_CODE ((t)) == INTEGER_TYPE\t\t\t\t\\\n+   && (TYPE_MAIN_VARIANT (t) == char_type_node\t\t\t\\\n+       || TYPE_MAIN_VARIANT (t) == signed_char_type_node\t\\\n+       || TYPE_MAIN_VARIANT (t) == unsigned_char_type_node\t\\\n+       || TYPE_MAIN_VARIANT (t) == short_integer_type_node\t\\\n+       || TYPE_MAIN_VARIANT (t) == short_unsigned_type_node))\n \f\n /* in c-typecheck.c */\n extern tree build_component_ref (), build_conditional_expr (), build_compound_expr ();"}]}