{"sha": "ff33680165346cb291667f38dd2e9f25a74cc3c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYzMzY4MDE2NTM0NmNiMjkxNjY3ZjM4ZGQyZTlmMjVhNzRjYzNjMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-08T07:32:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-08T07:32:20Z"}, "message": "match.pd: Simplify unsigned A - B - 1 >= A to B >= A [PR94913]\n\nImplemented thusly.  The TYPE_OVERFLOW_WRAPS is there just because the\npattern above it has it too, if you want, I can throw it away from both.\n\n2020-05-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94913\n\t* match.pd (A - B + -1 >= A to B >= A): New simplification.\n\t(A - B > A to A < B): Don't test TYPE_OVERFLOW_WRAPS which is always\n\ttrue for TYPE_UNSIGNED integral types.\n\n\t* gcc.dg/tree-ssa/pr94913.c: New test.", "tree": {"sha": "357d4e2d6b76e6805659de387b7d161523eaceae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/357d4e2d6b76e6805659de387b7d161523eaceae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff33680165346cb291667f38dd2e9f25a74cc3c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff33680165346cb291667f38dd2e9f25a74cc3c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff33680165346cb291667f38dd2e9f25a74cc3c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff33680165346cb291667f38dd2e9f25a74cc3c3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af1634f1b555004753a22d1124dbb8419ee095cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af1634f1b555004753a22d1124dbb8419ee095cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af1634f1b555004753a22d1124dbb8419ee095cb"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "eb4924a3b4ba13e20f8b11481eada9d3fc572547", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff33680165346cb291667f38dd2e9f25a74cc3c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff33680165346cb291667f38dd2e9f25a74cc3c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff33680165346cb291667f38dd2e9f25a74cc3c3", "patch": "@@ -1,5 +1,10 @@\n 2020-05-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/94913\n+\t* match.pd (A - B + -1 >= A to B >= A): New simplification.\n+\t(A - B > A to A < B): Don't test TYPE_OVERFLOW_WRAPS which is always\n+\ttrue for TYPE_UNSIGNED integral types.\n+\n \tPR bootstrap/94961\n \tPR rtl-optimization/94516\n \t* rtl.h (remove_reg_equal_equiv_notes): Add a bool argument defaulted"}, {"sha": "cfe96975d8054196df302feaba041205ecb21b2a", "filename": "gcc/match.pd", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff33680165346cb291667f38dd2e9f25a74cc3c3/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff33680165346cb291667f38dd2e9f25a74cc3c3/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=ff33680165346cb291667f38dd2e9f25a74cc3c3", "patch": "@@ -4787,10 +4787,17 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (cmp:c (minus@2 @0 @1) @0)\n   (if (single_use (@2)\n        && ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n-       && TYPE_UNSIGNED (TREE_TYPE (@0))\n-       && TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0)))\n+       && TYPE_UNSIGNED (TREE_TYPE (@0)))\n    (cmp @1 @0))))\n \n+/* Optimize A - B + -1 >= A into B >= A for unsigned comparisons.  */\n+(for cmp (ge lt)\n+ (simplify\n+  (cmp:c (plus (minus @0 @1) integer_minus_onep) @0)\n+   (if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+\t&& TYPE_UNSIGNED (TREE_TYPE (@0)))\n+    (cmp @1 @0))))\n+\n /* Testing for overflow is unnecessary if we already know the result.  */\n /* A - B > A  */\n (for cmp (gt le)"}, {"sha": "43e226e7e1889dd8ef25269f4d294afa7982e4ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff33680165346cb291667f38dd2e9f25a74cc3c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff33680165346cb291667f38dd2e9f25a74cc3c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff33680165346cb291667f38dd2e9f25a74cc3c3", "patch": "@@ -1,3 +1,8 @@\n+2020-05-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94913\n+\t* gcc.dg/tree-ssa/pr94913.c: New test.\n+\n 2020-05-07  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* gcc.target/powerpc/setnbc.h: New."}, {"sha": "6b71f98b0136e7f7c5e9e039f4f8ff12bf2da8a4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr94913.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff33680165346cb291667f38dd2e9f25a74cc3c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94913.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff33680165346cb291667f38dd2e9f25a74cc3c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94913.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94913.c?ref=ff33680165346cb291667f38dd2e9f25a74cc3c3", "patch": "@@ -0,0 +1,33 @@\n+/* PR tree-optimization/94913 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump \" (?:b_\\[0-9]+\\\\\\(D\\\\\\) >= a|a_\\[0-9]+\\\\\\(D\\\\\\) <= b)_\\[0-9]+\\\\\\(D\\\\\\);\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \" (?:c_\\[0-9]+\\\\\\(D\\\\\\) > d|d_\\[0-9]+\\\\\\(D\\\\\\) < c)_\\[0-9]+\\\\\\(D\\\\\\);\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \" (?:f_\\[0-9]+\\\\\\(D\\\\\\) >= e|e_\\[0-9]+\\\\\\(D\\\\\\) <= f)_\\[0-9]+\\\\\\(D\\\\\\);\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \" (?:g_\\[0-9]+\\\\\\(D\\\\\\) > h|h_\\[0-9]+\\\\\\(D\\\\\\) < g)_\\[0-9]+\\\\\\(D\\\\\\);\" \"optimized\" } } */\n+\n+int\n+foo (unsigned a, unsigned b)\n+{\n+  return (a - b - 1) >= a;\n+}\n+\n+int\n+bar (unsigned c, unsigned d)\n+{\n+  return (c - d - 1) < c;\n+}\n+\n+int\n+baz (unsigned e, unsigned f)\n+{\n+  unsigned t = e - f;\n+  return (t - 1) >= e;\n+}\n+\n+int\n+qux (unsigned g, unsigned h)\n+{\n+  unsigned t = g - h;\n+  return (t - 1) < g;\n+}"}]}