{"sha": "bbbcb2e1c4e122b5e10c3439c271ab0e00adbf08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJiY2IyZTFjNGUxMjJiNWUxMGMzNDM5YzI3MWFiMGUwMGFkYmYwOA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-07-25T18:42:24Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-07-25T18:42:24Z"}, "message": "re PR c/15360 (c99: extern w/initializer; extern w/internal linkage)\n\n\tPR c/15360\n\t* c-decl.c (start_decl): Do not set DECL_EXTERNAL for initialized\n\tdeclarations until after calling pushdecl.\n\t(grokdeclarator): Set DECL_EXTERNAL for variables based on use of\n\t\"extern\" and not on whether the declaration is initialized.\n\ntestsuite:\n\t* gcc.dg/pr15360-1.c: New test.\n\nFrom-SVN: r85156", "tree": {"sha": "d3c7f6481189c072679dc6bb540f8fc40de014c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3c7f6481189c072679dc6bb540f8fc40de014c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbbcb2e1c4e122b5e10c3439c271ab0e00adbf08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbbcb2e1c4e122b5e10c3439c271ab0e00adbf08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbbcb2e1c4e122b5e10c3439c271ab0e00adbf08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbbcb2e1c4e122b5e10c3439c271ab0e00adbf08/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07a434923a44d1a7aecb0859aa22f10e2e26656a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07a434923a44d1a7aecb0859aa22f10e2e26656a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07a434923a44d1a7aecb0859aa22f10e2e26656a"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "cbaf1fe5b382eaacc573fc3aa0bf65fc9ded5a33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbcb2e1c4e122b5e10c3439c271ab0e00adbf08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbcb2e1c4e122b5e10c3439c271ab0e00adbf08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbbcb2e1c4e122b5e10c3439c271ab0e00adbf08", "patch": "@@ -1,3 +1,11 @@\n+2004-07-25  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/15360\n+\t* c-decl.c (start_decl): Do not set DECL_EXTERNAL for initialized\n+\tdeclarations until after calling pushdecl.\n+\t(grokdeclarator): Set DECL_EXTERNAL for variables based on use of\n+\t\"extern\" and not on whether the declaration is initialized.\n+\n 2004-07-25  Daniel Jacobowitz  <dan@debian.org>\n \n \t* config.gcc (i[34567]86-*-solaris2*, sparc64-*-solaris2*)"}, {"sha": "f7075b182ee654c0f424b713618dd913984949c5", "filename": "gcc/c-decl.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbcb2e1c4e122b5e10c3439c271ab0e00adbf08/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbcb2e1c4e122b5e10c3439c271ab0e00adbf08/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=bbbcb2e1c4e122b5e10c3439c271ab0e00adbf08", "patch": "@@ -2766,7 +2766,6 @@ start_decl (tree declarator, tree declspecs, int initialized, tree attributes)\n \n   if (initialized)\n     {\n-      DECL_EXTERNAL (decl) = 0;\n       if (current_scope == file_scope)\n \tTREE_STATIC (decl) = 1;\n \n@@ -2833,6 +2832,9 @@ start_decl (tree declarator, tree declspecs, int initialized, tree attributes)\n      TEM may equal DECL or it may be a previous decl of the same name.  */\n   tem = pushdecl (decl);\n \n+  if (initialized)\n+    DECL_EXTERNAL (tem) = 0;\n+\n   return tem;\n }\n \n@@ -4599,7 +4601,10 @@ grokdeclarator (tree declarator, tree declspecs,\n \tif (inlinep)\n \t  pedwarn (\"%Jvariable '%D' declared `inline'\", decl, decl);\n \n-\tDECL_EXTERNAL (decl) = extern_ref;\n+\t/* At file scope, an initialized extern declaration may follow\n+\t   a static declaration.  In that case, DECL_EXTERNAL will be\n+\t   reset later in start_decl.  */\n+\tDECL_EXTERNAL (decl) = !!(specbits & (1 << (int) RID_EXTERN));\n \n \t/* At file scope, the presence of a `static' or `register' storage\n \t   class specifier, or the absence of all storage class specifiers"}, {"sha": "2d51e4aed098358bf94c00d69e910cb683bac200", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbcb2e1c4e122b5e10c3439c271ab0e00adbf08/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbcb2e1c4e122b5e10c3439c271ab0e00adbf08/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bbbcb2e1c4e122b5e10c3439c271ab0e00adbf08", "patch": "@@ -1,3 +1,8 @@\n+2004-07-25  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/15360\n+\t* gcc.dg/pr15360-1.c: New test.\n+\n 2004-07-25  Daniel Jacobowitz  <dan@debian.org>\n \n \t* gcc.dg/pragma-align-2.c: New test."}, {"sha": "6abb2500671dac4717bab65d113b59b0c2fc9db5", "filename": "gcc/testsuite/gcc.dg/pr15360-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbcb2e1c4e122b5e10c3439c271ab0e00adbf08/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15360-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbcb2e1c4e122b5e10c3439c271ab0e00adbf08/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15360-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15360-1.c?ref=bbbcb2e1c4e122b5e10c3439c271ab0e00adbf08", "patch": "@@ -0,0 +1,24 @@\n+/* Static declarations followed by extern are OK even if the extern\n+   declaration is initialized.  Bug 15360 from hozelda at\n+   yahoo.com.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+static int a;\n+static int a;\n+extern int a;\n+static int a;\n+\n+static int b;\n+extern int b = 1; /* { dg-warning \"initialized and declared\" \"extern init warning\" } */\n+static int b;\n+static int b;\n+\n+static int c; /* { dg-error \"previous declaration\" \"\" } */\n+int c; /* { dg-error \"non-static\" \"correct error\" } */\n+\n+static int d; /* { dg-error \"previous declaration\" \"\" } */\n+int d = 1; /* { dg-error \"non-static\" \"correct error\" } */\n+\n+void foo (void) { extern int e = 1; } /* { dg-error \"has both\" \"extern init in function\" } */"}]}