{"sha": "839a3b8ab591c78acfcbc99842cda631d2a3b829", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM5YTNiOGFiNTkxYzc4YWNmY2JjOTk4NDJjZGE2MzFkMmEzYjgyOQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2009-04-01T17:31:26Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2009-04-01T17:31:26Z"}, "message": "re PR target/39027 (double floating point suffix of 'd' and 'D' not accepted)\n\ngcc/\n\tPR c/29027\n\t* c-lex.c (interpret_float): Default (no suffix) is double.\n\nlibcpp/\n\tPR c/29027\n\t* include/cpplib.h (CPP_N_DEFAULT): Define.\n\t* expr.c (interpret_float_suffix): Recognize d or D for double,\n\treturn new value for default.\n\t(cpp_classify_number): Issue pedwarn for use of d or D in suffix.\n\ngcc/testsuite/\n\tPR c/29027\n\t* gcc.dg/fltconst-1.c: Don't error for use of d or D in suffix.\n\t* gcc.dg/fltconst-2.c: New test.\n\t* gcc.dg/fltconst-double-pedantic-1.c: New test.\n\t* gcc.dg/fltconst-double-pedantic-2.c: New test.\n\nFrom-SVN: r145422", "tree": {"sha": "6d2eb69c07acf9dfdd9f7f3af93d923a035bc1f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d2eb69c07acf9dfdd9f7f3af93d923a035bc1f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/839a3b8ab591c78acfcbc99842cda631d2a3b829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839a3b8ab591c78acfcbc99842cda631d2a3b829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/839a3b8ab591c78acfcbc99842cda631d2a3b829", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839a3b8ab591c78acfcbc99842cda631d2a3b829/comments", "author": null, "committer": null, "parents": [{"sha": "667e8acbceb7f87159d098dc7d1fa8a7ddaebb17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/667e8acbceb7f87159d098dc7d1fa8a7ddaebb17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/667e8acbceb7f87159d098dc7d1fa8a7ddaebb17"}], "stats": {"total": 120, "additions": 111, "deletions": 9}, "files": [{"sha": "9e18af57f866e6790282612ba2034868aefc1ac9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a3b8ab591c78acfcbc99842cda631d2a3b829/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a3b8ab591c78acfcbc99842cda631d2a3b829/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=839a3b8ab591c78acfcbc99842cda631d2a3b829", "patch": "@@ -1,3 +1,8 @@\n+2009-04-01  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR c/29027\n+\t* c-lex.c (interpret_float): Default (no suffix) is double.\n+\n 2009-04-1  Xinliang David Li  <davidxl@google.com>\n \n \t* config/i386/i386.c (legitimate_constant_p): Recognize"}, {"sha": "9fe29df15fbba48ce1dcdb95003e502cc9993f3b", "filename": "gcc/c-lex.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a3b8ab591c78acfcbc99842cda631d2a3b829/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a3b8ab591c78acfcbc99842cda631d2a3b829/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=839a3b8ab591c78acfcbc99842cda631d2a3b829", "patch": "@@ -612,6 +612,13 @@ interpret_float (const cpp_token *token, unsigned int flags)\n   char *copy;\n   size_t copylen;\n \n+  /* Default (no suffix) is double.  */\n+  if (flags & CPP_N_DEFAULT)\n+    {\n+      flags ^= CPP_N_DEFAULT;\n+      flags |= CPP_N_MEDIUM;\n+    }\n+\n   /* Decode _Fract and _Accum.  */\n   if (flags & CPP_N_FRACT || flags & CPP_N_ACCUM)\n     return interpret_fixed (token, flags);"}, {"sha": "708697bf1c27c5e0a135c83a4c84aac7f64f677f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a3b8ab591c78acfcbc99842cda631d2a3b829/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a3b8ab591c78acfcbc99842cda631d2a3b829/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=839a3b8ab591c78acfcbc99842cda631d2a3b829", "patch": "@@ -4,6 +4,12 @@\n \n 2009-04-01  Janis Johnson  <janis187@us.ibm.com>\n \n+\tPR c/39027\n+\t* gcc.dg/fltconst-1.c: Don't error for use of d or D in suffix.\n+\t* gcc.dg/fltconst-2.c: New test.\n+\t* gcc.dg/fltconst-double-pedantic-1.c: New test.\n+\t* gcc.dg/fltconst-double-pedantic-2.c: New test.\n+\n \tPR c/33466\n \t* gcc.dg/cpp/pr33466.c: New test.\n \t* gcc.dg/dfp/pr33466.c: New test."}, {"sha": "e8ecf6750a3274079e59289b02b22a1c09726e27", "filename": "gcc/testsuite/gcc.dg/fltconst-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a3b8ab591c78acfcbc99842cda631d2a3b829/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a3b8ab591c78acfcbc99842cda631d2a3b829/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-1.c?ref=839a3b8ab591c78acfcbc99842cda631d2a3b829", "patch": "@@ -3,10 +3,10 @@\n \n double a = 1.ld;\t/* { dg-error \"12:invalid suffix\" } */\n double b = 1.fd;\t/* { dg-error \"12:invalid suffix\" } */\n-double c = 1.di;\t/* { dg-error \"12:invalid suffix\" } */\n-double d = 1.dj;\t/* { dg-error \"12:invalid suffix\" } */\n-double e = 1.id;\t/* { dg-error \"12:invalid suffix\" } */\n-double f = 1.jd;\t/* { dg-error \"12:invalid suffix\" } */\n+double c = 1.di;\n+double d = 1.dj;\n+double e = 1.id;\n+double f = 1.jd;\n double g = 1.ddd;\t/* { dg-error \"12:invalid suffix\" } */\n double h = 1.ldd;\t/* { dg-error \"12:invalid suffix\" } */\n double i = 1.dld;\t/* { dg-error \"12:invalid suffix\" } */"}, {"sha": "d4d06ac882325cbdaa5fff359d6982bf2fdaffcb", "filename": "gcc/testsuite/gcc.dg/fltconst-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a3b8ab591c78acfcbc99842cda631d2a3b829/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a3b8ab591c78acfcbc99842cda631d2a3b829/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-2.c?ref=839a3b8ab591c78acfcbc99842cda631d2a3b829", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* Check that d or D is recognized as a float constant suffix.  */\n+\n+double d = 0.5d;\n+double D = 0.5D;\n+\n+/* Check that d or D is recognized in a hexadecimal floating constant.  */\n+\n+double hd1 = 0x1.8p1d;\n+double hd2 = 0x1.p+1D;\n+double hd3 = 0x0.8p-1d;\n+\n+/* Check that imaginary constant suffixes are still recognized with\n+   only i, I, j, or J.  */\n+\n+double i = 0.5i;\n+double I = 0.5I;\n+double j = 0.5j;\n+double J = 0.5J;\n+\n+/* Check that imaginary constant suffixes are allowed with d or D.  */\n+\n+double di = 0.5di;\n+double dI = 0.5dI;\n+double Di = 0.5Di;\n+double DI = 0.5DI;\n+double dj = 0.5dj;\n+double dJ = 0.5dJ;\n+double Dj = 0.5Dj;\n+double DJ = 0.5DJ;\n+double id = 0.5id;\n+double iD = 0.5iD;\n+double Id = 0.5Id;\n+double ID = 0.5ID;\n+double jd = 0.5jd;\n+double jD = 0.5jD;\n+double Jd = 0.5Jd;\n+double JD = 0.5JD;"}, {"sha": "07827296db8af42d7e7c7077e48af9b3caf9043d", "filename": "gcc/testsuite/gcc.dg/fltconst-double-pedantic-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a3b8ab591c78acfcbc99842cda631d2a3b829/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-double-pedantic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a3b8ab591c78acfcbc99842cda631d2a3b829/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-double-pedantic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-double-pedantic-1.c?ref=839a3b8ab591c78acfcbc99842cda631d2a3b829", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic\" } */\n+\n+double a = 1.d;\t\t/* { dg-warning \"double constant\" } */\n+double b = 1.D;\t\t/* { dg-warning \"double constant\" } */\n+double c = 1.1e+2d;\t/* { dg-warning \"double constant\" } */\n+\n+double d = 1.di;\t/* { dg-warning \"imaginary constants\" } */\n+double e = 1.dj;\t/* { dg-warning \"imaginary constants\" } */\n+double f = 1.id;\t/* { dg-warning \"imaginary constants\" } */\n+double g = 1.jd;\t/* { dg-warning \"imaginary constants\" } */\n+\n+double h = 0x1.5p1d;\t/* { dg-warning \"double constant\" } */"}, {"sha": "316571f762f14573389a8d51f638664f4c2b88b3", "filename": "gcc/testsuite/gcc.dg/fltconst-double-pedantic-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a3b8ab591c78acfcbc99842cda631d2a3b829/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-double-pedantic-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a3b8ab591c78acfcbc99842cda631d2a3b829/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-double-pedantic-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-double-pedantic-2.c?ref=839a3b8ab591c78acfcbc99842cda631d2a3b829", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+\n+double a = 1.d;\t\t/* { dg-error \"double constant\" } */\n+double b = 1.D;\t\t/* { dg-error \"double constant\" } */\n+double c = 1.1e+2d;\t/* { dg-error \"double constant\" } */\n+\n+double d = 1.di;\t/* { dg-error \"imaginary constants\" } */\n+double e = 1.dj;\t/* { dg-error \"imaginary constants\" } */\n+double f = 1.id;\t/* { dg-error \"imaginary constants\" } */\n+double g = 1.jd;\t/* { dg-error \"imaginary constants\" } */\n+\n+double h = 0x1.5p1d;\t/* { dg-error \"double constant\" } */"}, {"sha": "1ca914db97e7e5c60bcaa86c761f0d09088bd817", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a3b8ab591c78acfcbc99842cda631d2a3b829/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a3b8ab591c78acfcbc99842cda631d2a3b829/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=839a3b8ab591c78acfcbc99842cda631d2a3b829", "patch": "@@ -1,5 +1,11 @@\n 2009-04-01  Janis Johnson  <janis187@us.ibm.com>\n \n+\tPR c/39027\n+\t* include/cpplib.h (CPP_N_DEFAULT): Define.\n+\t* expr.c (interpret_float_suffix): Recognize d or D for double,\n+\treturn new value for default.\n+\t(cpp_classify_number): Issue pedwarn for use of d or D in suffix.\n+\n \tPR c/33466\n \t* expr.c (interpret_float_suffix): Reject invalid suffix that uses\n \tletters from decimal float and fixed-point suffixes."}, {"sha": "688439799f926d66d7b3aa8e377499dde463bcd4", "filename": "libcpp/expr.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a3b8ab591c78acfcbc99842cda631d2a3b829/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a3b8ab591c78acfcbc99842cda631d2a3b829/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=839a3b8ab591c78acfcbc99842cda631d2a3b829", "patch": "@@ -84,10 +84,10 @@ static unsigned int\n interpret_float_suffix (const uchar *s, size_t len)\n {\n   size_t flags;\n-  size_t f, l, w, q, i;\n+  size_t f, d, l, w, q, i;\n \n   flags = 0;\n-  f = l = w = q = i = 0;\n+  f = d = l = w = q = i = 0;\n \n   /* Process decimal float suffixes, which are two letters starting\n      with d or D.  Order and case are significant.  */\n@@ -103,7 +103,9 @@ interpret_float_suffix (const uchar *s, size_t len)\n       case 'l': return (!uppercase ? (CPP_N_DFLOAT | CPP_N_LARGE) : 0); break;\n       case 'L': return (uppercase ? (CPP_N_DFLOAT | CPP_N_LARGE) : 0); break;\n       default:\n-\treturn 0;\n+\t/* Additional two-character suffixes beginning with D are not\n+\t   for decimal float constants.  */\n+\tbreak;\n       }\n     }\n \n@@ -162,6 +164,7 @@ interpret_float_suffix (const uchar *s, size_t len)\n     switch (s[len])\n       {\n       case 'f': case 'F': f++; break;\n+      case 'd': case 'D': d++; break;\n       case 'l': case 'L': l++; break;\n       case 'w': case 'W': w++; break;\n       case 'q': case 'Q': q++; break;\n@@ -171,14 +174,15 @@ interpret_float_suffix (const uchar *s, size_t len)\n \treturn 0;\n       }\n \n-  if (f + l + w + q > 1 || i > 1)\n+  if (f + d + l + w + q > 1 || i > 1)\n     return 0;\n \n   return ((i ? CPP_N_IMAGINARY : 0)\n \t  | (f ? CPP_N_SMALL :\n+\t     d ? CPP_N_MEDIUM :\n \t     l ? CPP_N_LARGE :\n \t     w ? CPP_N_MD_W :\n-\t     q ? CPP_N_MD_Q : CPP_N_MEDIUM));\n+\t     q ? CPP_N_MD_Q : CPP_N_DEFAULT));\n }\n \n /* Subroutine of cpp_classify_number.  S points to an integer suffix\n@@ -365,6 +369,13 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token)\n \t\t   \"traditional C rejects the \\\"%.*s\\\" suffix\",\n \t\t   (int) (limit - str), str);\n \n+      /* A suffix for double is a GCC extension via decimal float support.\n+\t If the suffix also specifies an imaginary value we'll catch that\n+\t later.  */\n+      if ((result == CPP_N_MEDIUM) && CPP_PEDANTIC (pfile))\n+\tcpp_error (pfile, CPP_DL_PEDWARN,\n+\t\t   \"suffix for double constant is a GCC extension\");\n+\n       /* Radix must be 10 for decimal floats.  */\n       if ((result & CPP_N_DFLOAT) && radix != 10)\n         {"}, {"sha": "469aaedff60b8028e5b2db583abd33e747e52766", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a3b8ab591c78acfcbc99842cda631d2a3b829/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a3b8ab591c78acfcbc99842cda631d2a3b829/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=839a3b8ab591c78acfcbc99842cda631d2a3b829", "patch": "@@ -780,6 +780,7 @@ struct cpp_num\n #define CPP_N_UNSIGNED\t0x1000\t/* Properties.  */\n #define CPP_N_IMAGINARY\t0x2000\n #define CPP_N_DFLOAT\t0x4000\n+#define CPP_N_DEFAULT\t0x8000\n \n #define CPP_N_FRACT\t0x100000 /* Fract types.  */\n #define CPP_N_ACCUM\t0x200000 /* Accum types.  */"}]}