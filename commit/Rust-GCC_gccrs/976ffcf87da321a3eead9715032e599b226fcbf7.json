{"sha": "976ffcf87da321a3eead9715032e599b226fcbf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc2ZmZjZjg3ZGEzMjFhM2VlYWQ5NzE1MDMyZTU5OWIyMjZmY2JmNw==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2020-11-25T00:18:05Z"}, "committer": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2021-06-09T16:10:58Z"}, "message": "Add 128-bit int to 128-bit DFP (floattitd2) and 128-bit DFP to 128-bit int (fixtdti2) support\n\n2021-06-08  Carl Love  <cel@us.ibm.com>\n\ngcc/ChangeLog\n\n\t* config/rs6000/dfp.md (floattitd2, fixtdti2): New define_insns.\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.target/powerpc/int_128bit-runnable.c: Add 128-bit DFP\n\tconversion tests.", "tree": {"sha": "0644d7a056dd5de8e1b0e823d52c79aa4747af1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0644d7a056dd5de8e1b0e823d52c79aa4747af1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/976ffcf87da321a3eead9715032e599b226fcbf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976ffcf87da321a3eead9715032e599b226fcbf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/976ffcf87da321a3eead9715032e599b226fcbf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976ffcf87da321a3eead9715032e599b226fcbf7/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f03122f2a7626772fe13ab77f677141377104502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f03122f2a7626772fe13ab77f677141377104502", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f03122f2a7626772fe13ab77f677141377104502"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "b89d5ecc91dc07c763585f838df3a95cf661a518", "filename": "gcc/config/rs6000/dfp.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976ffcf87da321a3eead9715032e599b226fcbf7/gcc%2Fconfig%2Frs6000%2Fdfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976ffcf87da321a3eead9715032e599b226fcbf7/gcc%2Fconfig%2Frs6000%2Fdfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdfp.md?ref=976ffcf87da321a3eead9715032e599b226fcbf7", "patch": "@@ -226,6 +226,13 @@\n   [(set_attr \"type\" \"dfp\")\n    (set_attr \"size\" \"128\")])\n \n+(define_insn \"floattitd2\"\n+  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n+\t(float:TD (match_operand:TI 1 \"gpc_reg_operand\" \"v\")))]\n+  \"TARGET_POWER10\"\n+  \"dcffixqq %0,%1\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n ;; Convert a decimal64/128 to a decimal64/128 whose value is an integer.\n ;; This is the first stage of converting it to an integer type.\n \n@@ -247,6 +254,13 @@\n   \"dctfix<q> %0,%1\"\n   [(set_attr \"type\" \"dfp\")\n    (set_attr \"size\" \"<bits>\")])\n+\n+(define_insn \"fixtdti2\"\n+  [(set (match_operand:TI 0 \"gpc_reg_operand\" \"=v\")\n+\t(fix:TI (match_operand:TD 1 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_POWER10\"\n+  \"dctfixqq %0,%1\"\n+  [(set_attr \"type\" \"dfp\")])\n \f\n ;; Decimal builtin support\n "}, {"sha": "625b3869118707042f0cfa2f13e1e840a420203c", "filename": "gcc/testsuite/gcc.target/powerpc/int_128bit-runnable.c", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976ffcf87da321a3eead9715032e599b226fcbf7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976ffcf87da321a3eead9715032e599b226fcbf7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c?ref=976ffcf87da321a3eead9715032e599b226fcbf7", "patch": "@@ -37,6 +37,7 @@\n #if DEBUG\n #include <stdio.h>\n #include <stdlib.h>\n+#include <math.h>\n \n \n void print_i128(__int128_t val)\n@@ -58,6 +59,13 @@ int main ()\n   __int128_t arg1, result;\n   __uint128_t uarg2;\n \n+  _Decimal128 arg1_dfp128, result_dfp128, expected_result_dfp128;\n+\n+  struct conv_t {\n+    __uint128_t u128;\n+    _Decimal128 d128;\n+  } conv, conv2;\n+\n   vector signed long long int vec_arg1_di, vec_arg2_di;\n   vector signed long long int vec_result_di, vec_expected_result_di;\n   vector unsigned long long int vec_uarg1_di, vec_uarg2_di, vec_uarg3_di;\n@@ -2258,6 +2266,59 @@ int main ()\n     abort();\n #endif\n   }\n+  \n+  /* DFP to __int128 and __int128 to DFP conversions */\n+  /* Print the DFP value as an unsigned int so we can see the bit patterns.  */\n+  conv.u128 = 0x2208000000000000ULL;\n+  conv.u128 = (conv.u128 << 64) | 0x4ULL;   //DFP bit pattern for integer 4\n+  expected_result_dfp128 = conv.d128;\n \n+  arg1 = 4;\n+\n+  conv.d128 = (_Decimal128) arg1;\n+\n+  result_dfp128 = (_Decimal128) arg1;\n+  if (((conv.u128 >>64) != 0x2208000000000000ULL) &&\n+      ((conv.u128 & 0xFFFFFFFFFFFFFFFF) != 0x4ULL)) {\n+#if DEBUG\n+    printf(\"ERROR:  convert int128 value \");\n+    print_i128 (arg1);\n+    conv.d128 = result_dfp128;\n+    printf(\"\\nto DFP value 0x%llx %llx (printed as hex bit string) \",\n+\t   (unsigned long long)((conv.u128) >>64),\n+\t   (unsigned long long)((conv.u128) & 0xFFFFFFFFFFFFFFFF));\n+\n+    conv.d128 = expected_result_dfp128;\n+    printf(\"\\ndoes not match expected_result = 0x%llx %llx\\n\\n\",\n+\t   (unsigned long long) (conv.u128>>64),\n+\t   (unsigned long long) (conv.u128 & 0xFFFFFFFFFFFFFFFF));\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  expected_result = 4;\n+\n+  conv.u128 = 0x2208000000000000ULL;\n+  conv.u128 = (conv.u128 << 64) | 0x4ULL;  // 4 as DFP\n+  arg1_dfp128 = conv.d128;\n+\n+  result = (__int128_t) arg1_dfp128;\n+\n+  if (result != expected_result) {\n+#if DEBUG\n+    printf(\"ERROR:  convert DFP value \");\n+    printf(\"0x%llx %llx (printed as hex bit string) \",\n+\t   (unsigned long long)(conv.u128>>64),\n+\t   (unsigned long long)(conv.u128 & 0xFFFFFFFFFFFFFFFF));\n+    printf(\"to __int128 value = \");\n+    print_i128 (result);\n+    printf(\"\\ndoes not match expected_result = \");\n+    print_i128 (expected_result);\n+    printf(\"\\n\");\n+#else\n+    abort();\n+#endif\n+  }\n   return 0;\n }"}]}