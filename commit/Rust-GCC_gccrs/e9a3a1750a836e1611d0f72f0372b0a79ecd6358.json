{"sha": "e9a3a1750a836e1611d0f72f0372b0a79ecd6358", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlhM2ExNzUwYTgzNmUxNjExZDBmNzJmMDM3MmIwYTc5ZWNkNjM1OA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2015-06-01T11:57:54Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2015-06-01T11:57:54Z"}, "message": "[AArch64 Obvious] \"Fuseable\" is not a word -> s/fuseable/fusible/g\n\ngcc/\n\n\t* config/aarch64/aarch64-protos.h (tune_params): Rename\n\tfuseable_ops to fusible_ops.\n\t* config/aarch64/aarch64.c (generic_tunings): Rename\n\tfuseable_ops to fusible_ops.\n\t(cortexa53_tunings): Likewise.\n\t(cortexa57_tunings): Likewise.\n\t(thunderx_tunings): Likewise.\n\t(xgene1_tunings): Likewise.\n\t(aarch64_macro_fusion_p): Likewise.\n\t(aarch64_macro_fusion_pair_p): Likewise.\n\nFrom-SVN: r223938", "tree": {"sha": "602f94d3d7aa0ef08e41f0177c369243958dc7fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/602f94d3d7aa0ef08e41f0177c369243958dc7fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9a3a1750a836e1611d0f72f0372b0a79ecd6358", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9a3a1750a836e1611d0f72f0372b0a79ecd6358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9a3a1750a836e1611d0f72f0372b0a79ecd6358", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9a3a1750a836e1611d0f72f0372b0a79ecd6358/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77d0ed47e8de23f420106907194671ad85bdc866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77d0ed47e8de23f420106907194671ad85bdc866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77d0ed47e8de23f420106907194671ad85bdc866"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "92b99b869652b785b70a9bc0365a2b04f363fe1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a3a1750a836e1611d0f72f0372b0a79ecd6358/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a3a1750a836e1611d0f72f0372b0a79ecd6358/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9a3a1750a836e1611d0f72f0372b0a79ecd6358", "patch": "@@ -1,3 +1,16 @@\n+2015-06-01  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (tune_params): Rename\n+\tfuseable_ops to fusible_ops.\n+\t* config/aarch64/aarch64.c (generic_tunings): Rename\n+\tfuseable_ops to fusible_ops.\n+\t(cortexa53_tunings): Likewise.\n+\t(cortexa57_tunings): Likewise.\n+\t(thunderx_tunings): Likewise.\n+\t(xgene1_tunings): Likewise.\n+\t(aarch64_macro_fusion_p): Likewise.\n+\t(aarch64_macro_fusion_pair_p): Likewise.\n+\n 2015-06-01  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* config/s390/driver-native.c: New file."}, {"sha": "965a11b7beeaaaa188819796e2b17017a87dca80", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a3a1750a836e1611d0f72f0372b0a79ecd6358/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a3a1750a836e1611d0f72f0372b0a79ecd6358/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=e9a3a1750a836e1611d0f72f0372b0a79ecd6358", "patch": "@@ -178,7 +178,7 @@ struct tune_params\n   const struct cpu_branch_cost *const branch_costs;\n   const int memmov_cost;\n   const int issue_rate;\n-  const unsigned int fuseable_ops;\n+  const unsigned int fusible_ops;\n   const int function_align;\n   const int jump_align;\n   const int loop_align;"}, {"sha": "648a548e0e06d2968fb74e4b588c368db060ad74", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a3a1750a836e1611d0f72f0372b0a79ecd6358/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a3a1750a836e1611d0f72f0372b0a79ecd6358/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=e9a3a1750a836e1611d0f72f0372b0a79ecd6358", "patch": "@@ -356,7 +356,7 @@ static const struct tune_params generic_tunings =\n   &generic_branch_cost,\n   4, /* memmov_cost  */\n   2, /* issue_rate  */\n-  AARCH64_FUSE_NOTHING, /* fuseable_ops  */\n+  AARCH64_FUSE_NOTHING, /* fusible_ops  */\n   8,\t/* function_align.  */\n   8,\t/* jump_align.  */\n   4,\t/* loop_align.  */\n@@ -377,7 +377,7 @@ static const struct tune_params cortexa53_tunings =\n   4, /* memmov_cost  */\n   2, /* issue_rate  */\n   (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n-   | AARCH64_FUSE_MOVK_MOVK | AARCH64_FUSE_ADRP_LDR), /* fuseable_ops  */\n+   | AARCH64_FUSE_MOVK_MOVK | AARCH64_FUSE_ADRP_LDR), /* fusible_ops  */\n   8,\t/* function_align.  */\n   8,\t/* jump_align.  */\n   4,\t/* loop_align.  */\n@@ -398,7 +398,7 @@ static const struct tune_params cortexa57_tunings =\n   4, /* memmov_cost  */\n   3, /* issue_rate  */\n   (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n-   | AARCH64_FUSE_MOVK_MOVK), /* fuseable_ops  */\n+   | AARCH64_FUSE_MOVK_MOVK), /* fusible_ops  */\n   16,\t/* function_align.  */\n   8,\t/* jump_align.  */\n   4,\t/* loop_align.  */\n@@ -418,7 +418,7 @@ static const struct tune_params thunderx_tunings =\n   &generic_branch_cost,\n   6, /* memmov_cost  */\n   2, /* issue_rate  */\n-  AARCH64_FUSE_CMP_BRANCH, /* fuseable_ops  */\n+  AARCH64_FUSE_CMP_BRANCH, /* fusible_ops  */\n   8,\t/* function_align.  */\n   8,\t/* jump_align.  */\n   8,\t/* loop_align.  */\n@@ -438,7 +438,7 @@ static const struct tune_params xgene1_tunings =\n   &generic_branch_cost,\n   6, /* memmov_cost  */\n   4, /* issue_rate  */\n-  AARCH64_FUSE_NOTHING, /* fuseable_ops  */\n+  AARCH64_FUSE_NOTHING, /* fusible_ops  */\n   16,\t/* function_align.  */\n   8,\t/* jump_align.  */\n   16,\t/* loop_align.  */\n@@ -10892,7 +10892,7 @@ aarch64_gen_ccmp_next (rtx *prep_seq, rtx *gen_seq, rtx prev, int cmp_code,\n static bool\n aarch64_macro_fusion_p (void)\n {\n-  return aarch64_tune_params->fuseable_ops != AARCH64_FUSE_NOTHING;\n+  return aarch64_tune_params->fusible_ops != AARCH64_FUSE_NOTHING;\n }\n \n \n@@ -10912,7 +10912,7 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n     return false;\n \n   if (simple_sets_p\n-      && (aarch64_tune_params->fuseable_ops & AARCH64_FUSE_MOV_MOVK))\n+      && (aarch64_tune_params->fusible_ops & AARCH64_FUSE_MOV_MOVK))\n     {\n       /* We are trying to match:\n          prev (mov)  == (set (reg r0) (const_int imm16))\n@@ -10937,7 +10937,7 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n     }\n \n   if (simple_sets_p\n-      && (aarch64_tune_params->fuseable_ops & AARCH64_FUSE_ADRP_ADD))\n+      && (aarch64_tune_params->fusible_ops & AARCH64_FUSE_ADRP_ADD))\n     {\n \n       /*  We're trying to match:\n@@ -10963,7 +10963,7 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n     }\n \n   if (simple_sets_p\n-      && (aarch64_tune_params->fuseable_ops & AARCH64_FUSE_MOVK_MOVK))\n+      && (aarch64_tune_params->fusible_ops & AARCH64_FUSE_MOVK_MOVK))\n     {\n \n       /* We're trying to match:\n@@ -10992,7 +10992,7 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n \n     }\n   if (simple_sets_p\n-      && (aarch64_tune_params->fuseable_ops & AARCH64_FUSE_ADRP_LDR))\n+      && (aarch64_tune_params->fusible_ops & AARCH64_FUSE_ADRP_LDR))\n     {\n       /* We're trying to match:\n           prev (adrp) == (set (reg r0)\n@@ -11023,7 +11023,7 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n         }\n     }\n \n-  if ((aarch64_tune_params->fuseable_ops & AARCH64_FUSE_CMP_BRANCH)\n+  if ((aarch64_tune_params->fusible_ops & AARCH64_FUSE_CMP_BRANCH)\n       && any_condjump_p (curr))\n     {\n       enum attr_type prev_type = get_attr_type (prev);"}]}