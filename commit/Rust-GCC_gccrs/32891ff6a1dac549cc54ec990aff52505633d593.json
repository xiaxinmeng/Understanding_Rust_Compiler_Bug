{"sha": "32891ff6a1dac549cc54ec990aff52505633d593", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI4OTFmZjZhMWRhYzU0OWNjNTRlYzk5MGFmZjUyNTA1NjMzZDU5Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2008-02-07T17:45:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2008-02-07T17:45:24Z"}, "message": "re PR rtl-optimization/33410 (ICE in iv_analyze_expr, at loop-iv.c:934)\n\n        PR rtl-opt/33410\n        * config/alpha/alpha.c (alpha_emit_xfloating_compare): Use an\n        EXPR_LIST for the REG_EQUAL instead of a comparison with a\n        funny mode.\n\nFrom-SVN: r132171", "tree": {"sha": "0203ab6e3a3a5824c6068a31539b18426d43af15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0203ab6e3a3a5824c6068a31539b18426d43af15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32891ff6a1dac549cc54ec990aff52505633d593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32891ff6a1dac549cc54ec990aff52505633d593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32891ff6a1dac549cc54ec990aff52505633d593", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32891ff6a1dac549cc54ec990aff52505633d593/comments", "author": null, "committer": null, "parents": [{"sha": "c4ae80d945388a7350ec8cf799f60b30036f7ba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ae80d945388a7350ec8cf799f60b30036f7ba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ae80d945388a7350ec8cf799f60b30036f7ba9"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "370d11f0812373276acb768b21df6070741393b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32891ff6a1dac549cc54ec990aff52505633d593/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32891ff6a1dac549cc54ec990aff52505633d593/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32891ff6a1dac549cc54ec990aff52505633d593", "patch": "@@ -1,3 +1,10 @@\n+2008-07-07  Richard Henderson  <rth@redhat.com>\n+\n+\tPR rtl-opt/33410\n+\t* config/alpha/alpha.c (alpha_emit_xfloating_compare): Use an\n+\tEXPR_LIST for the REG_EQUAL instead of a comparison with a \n+\tfunny mode.\n+\n 2008-02-07  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR tree-optimization/35085"}, {"sha": "991193f28dc129a7b173fe66c97585c619e3d286", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32891ff6a1dac549cc54ec990aff52505633d593/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32891ff6a1dac549cc54ec990aff52505633d593/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=32891ff6a1dac549cc54ec990aff52505633d593", "patch": "@@ -3047,7 +3047,7 @@ static rtx\n alpha_emit_xfloating_compare (enum rtx_code *pcode, rtx op0, rtx op1)\n {\n   enum rtx_code cmp_code, res_code;\n-  rtx func, out, operands[2];\n+  rtx func, out, operands[2], note;\n \n   /* X_floating library comparison functions return\n \t   -1  unordered\n@@ -3087,10 +3087,13 @@ alpha_emit_xfloating_compare (enum rtx_code *pcode, rtx op0, rtx op1)\n   operands[1] = op1;\n   out = gen_reg_rtx (DImode);\n \n-  /* ??? Strange mode for equiv because what's actually returned\n-     is -1,0,1, not a proper boolean value.  */\n-  alpha_emit_xfloating_libcall (func, out, operands, 2,\n-\t\t\t\tgen_rtx_fmt_ee (cmp_code, CCmode, op0, op1));\n+  /* What's actually returned is -1,0,1, not a proper boolean value,\n+     so use an EXPR_LIST as with a generic libcall instead of a \n+     comparison type expression.  */\n+  note = gen_rtx_EXPR_LIST (VOIDmode, op1, NULL_RTX);\n+  note = gen_rtx_EXPR_LIST (VOIDmode, op0, note);\n+  note = gen_rtx_EXPR_LIST (VOIDmode, func, note);\n+  alpha_emit_xfloating_libcall (func, out, operands, 2, note);\n \n   return out;\n }"}]}