{"sha": "5d6d333901aacf4485d6dc5f3b4a24d358c4edde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ2ZDMzMzkwMWFhY2Y0NDg1ZDZkYzVmM2I0YTI0ZDM1OGM0ZWRkZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jj@sunsite.ms.mff.cuni.cz", "date": "1998-08-25T06:56:57Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1998-08-25T06:56:57Z"}, "message": "sparc.c (arith_4096_operand, [...]): New predicates.\n\n\t* config/sparc/sparc.c (arith_4096_operand, arith_add_operand,\n\tarith_double_4096_operand, arith_double_add_operand): New\n\tpredicates.\n\t* config/sparc/sparc.h (PREDICATE_CODES): Add them, declare them.\n\t* config/sparc/sparc.md (adddi3, addsi3, subdi3, subsi3): Use\n\tthem to transform add/sub 4096 into add/sub -4096.\n\nFrom-SVN: r21961", "tree": {"sha": "ec0d689878f17ab5f72ea35da4bc8c1bcc4d06e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec0d689878f17ab5f72ea35da4bc8c1bcc4d06e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d6d333901aacf4485d6dc5f3b4a24d358c4edde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d6d333901aacf4485d6dc5f3b4a24d358c4edde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d6d333901aacf4485d6dc5f3b4a24d358c4edde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d6d333901aacf4485d6dc5f3b4a24d358c4edde/comments", "author": null, "committer": null, "parents": [{"sha": "00045f52758be5d18a71697c20a00d0d0ae4753e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00045f52758be5d18a71697c20a00d0d0ae4753e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00045f52758be5d18a71697c20a00d0d0ae4753e"}], "stats": {"total": 117, "additions": 113, "deletions": 4}, "files": [{"sha": "d1e50cfc34a8471ac94af8f103d893a28a038d3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d6d333901aacf4485d6dc5f3b4a24d358c4edde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d6d333901aacf4485d6dc5f3b4a24d358c4edde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d6d333901aacf4485d6dc5f3b4a24d358c4edde", "patch": "@@ -1,3 +1,12 @@\n+Tue Aug 25 05:48:18 1998  Jakub Jelinek  <jj@sunsite.ms.mff.cuni.cz>\n+\n+\t* config/sparc/sparc.c (arith_4096_operand, arith_add_operand,\n+\tarith_double_4096_operand, arith_double_add_operand): New\n+\tpredicates.\n+\t* config/sparc/sparc.h (PREDICATE_CODES): Add them, declare them.\n+\t* config/sparc/sparc.md (adddi3, addsi3, subdi3, subsi3): Use\n+\tthem to transform add/sub 4096 into add/sub -4096.\n+\n Mon Aug 24 23:31:03 1998  David S. Miller  <davem@pierdol.cobaltmicro.com>\n \n \t* loop.c (scan_loop): Allocate some slop to handle pseudos"}, {"sha": "1ac5d2fa6aae441b4096fea98bdf883409d5f28f", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d6d333901aacf4485d6dc5f3b4a24d358c4edde/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d6d333901aacf4485d6dc5f3b4a24d358c4edde/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=5d6d333901aacf4485d6dc5f3b4a24d358c4edde", "patch": "@@ -780,6 +780,30 @@ arith_operand (op, mode)\n   return SPARC_SIMM13_P (val);\n }\n \n+/* Return true if OP is a constant 4096  */\n+\n+int\n+arith_4096_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  int val;\n+  if (GET_CODE (op) != CONST_INT)\n+    return 0;\n+  val = INTVAL (op) & 0xffffffff;\n+  return val == 4096;\n+}\n+\n+/* Return true if OP is suitable as second operand for add/sub */\n+\n+int\n+arith_add_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return arith_operand (op, mode) || arith_4096_operand (op, mode);\n+}\n+\n /* Return true if OP is a CONST_INT or a CONST_DOUBLE which can fit in the\n    immediate field of OR and XOR instructions.  Used for 64-bit\n    constant formation patterns.  */\n@@ -879,6 +903,30 @@ arith_double_operand (op, mode)\n \t\t      && (CONST_DOUBLE_LOW (op) & 0x1000) == 0))));\n }\n \n+/* Return true if OP is a constant 4096 for DImode on ARCH64 */\n+\n+int\n+arith_double_4096_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return (TARGET_ARCH64 &&\n+  \t  ((GET_CODE (op) == CONST_INT && INTVAL (op) == 4096) ||\n+  \t   (GET_CODE (op) == CONST_DOUBLE &&\n+  \t    CONST_DOUBLE_LOW (op) == 4096 &&\n+  \t    CONST_DOUBLE_HIGH (op) == 0)));\n+}\n+\n+/* Return true if OP is suitable as second operand for add/sub in DImode */\n+\n+int\n+arith_double_add_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return arith_double_operand (op, mode) || arith_double_4096_operand (op, mode);\n+}\n+\n /* Return true if OP is a register, or is a CONST_INT or CONST_DOUBLE that\n    can fit in an 11 bit immediate field.  This is an acceptable DImode\n    operand for the movcc instructions.  */"}, {"sha": "af0dba84d1e20f1554adb0a3322ced479ed92863", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d6d333901aacf4485d6dc5f3b4a24d358c4edde/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d6d333901aacf4485d6dc5f3b4a24d358c4edde/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=5d6d333901aacf4485d6dc5f3b4a24d358c4edde", "patch": "@@ -3214,9 +3214,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n {\"cc_arithop\", {AND, IOR, XOR}},\t\t\t\t\t\t    \\\n {\"cc_arithopn\", {AND, IOR}},\t\t\t\t\t\t\t    \\\n {\"arith_operand\", {SUBREG, REG, CONSTANT_P_RTX, CONST_INT}},\t\t\t    \\\n+{\"arith_add_operand\", {SUBREG, REG, CONSTANT_P_RTX, CONST_INT}},\t\t    \\\n {\"arith11_operand\", {SUBREG, REG, CONSTANT_P_RTX, CONST_INT}},\t\t\t    \\\n {\"arith10_operand\", {SUBREG, REG, CONSTANT_P_RTX, CONST_INT}},\t\t\t    \\\n {\"arith_double_operand\", {SUBREG, REG, CONSTANT_P_RTX, CONST_INT, CONST_DOUBLE}},   \\\n+{\"arith_double_add_operand\", {SUBREG, REG, CONSTANT_P_RTX, CONST_INT, CONST_DOUBLE}},\\\n {\"arith11_double_operand\", {SUBREG, REG, CONSTANT_P_RTX, CONST_INT, CONST_DOUBLE}}, \\\n {\"arith10_double_operand\", {SUBREG, REG, CONSTANT_P_RTX, CONST_INT, CONST_DOUBLE}}, \\\n {\"small_int\", {CONST_INT, CONSTANT_P_RTX}},\t\t\t\t\t    \\\n@@ -3262,7 +3264,11 @@ extern int arith10_operand ();\n extern int arith11_double_operand ();\n extern int arith11_operand ();\n extern int arith_double_operand ();\n+extern int arith_double_4096_operand ();\n+extern int arith_double_add_operand ();\n extern int arith_operand ();\n+extern int arith_4096_operand ();\n+extern int arith_add_operand ();\n extern int call_operand_address ();\n extern int input_operand ();\n extern int zero_operand ();"}, {"sha": "47cdea6b5eec20117e99a76c24acfdd656a1b653", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d6d333901aacf4485d6dc5f3b4a24d358c4edde/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d6d333901aacf4485d6dc5f3b4a24d358c4edde/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=5d6d333901aacf4485d6dc5f3b4a24d358c4edde", "patch": "@@ -4534,7 +4534,7 @@\n (define_expand \"adddi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n-\t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n+\t\t (match_operand:DI 2 \"arith_double_add_operand\" \"rHI\")))]\n   \"\"\n   \"\n {\n@@ -4548,6 +4548,13 @@\n \t\t\t\t   gen_rtx_REG (CCmode, SPARC_ICC_REG)))));\n       DONE;\n     }\n+  if (arith_double_4096_operand(operands[2], DImode))\n+    {\n+      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t      gen_rtx_MINUS (DImode, operands[1],\n+\t\t\t\t\t     GEN_INT(-4096))));\n+      DONE;\n+    }\n }\")\n \n (define_insn \"adddi3_insn_sp32\"\n@@ -4749,7 +4756,23 @@\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"1\")])\n \n-(define_insn \"addsi3\"\n+(define_expand \"addsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,d\")\n+\t(plus:SI (match_operand:SI 1 \"arith_operand\" \"%r,d\")\n+\t\t (match_operand:SI 2 \"arith_add_operand\" \"rI,d\")))]\n+  \"\"\n+  \"\n+{\n+  if (arith_4096_operand(operands[2], DImode))\n+    {\n+      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t      gen_rtx_MINUS (SImode, operands[1],\n+\t\t\t\t\t     GEN_INT(-4096))));\n+      DONE;\n+    }\n+}\")\n+\n+(define_insn \"*addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,d\")\n \t(plus:SI (match_operand:SI 1 \"arith_operand\" \"%r,d\")\n \t\t (match_operand:SI 2 \"arith_operand\" \"rI,d\")))]\n@@ -4807,7 +4830,7 @@\n (define_expand \"subdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t  (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n+\t\t  (match_operand:DI 2 \"arith_double_add_operand\" \"rHI\")))]\n   \"\"\n   \"\n {\n@@ -4821,6 +4844,13 @@\n \t\t\t\t   gen_rtx_REG (CCmode, SPARC_ICC_REG)))));\n       DONE;\n     }\n+  if (arith_double_4096_operand(operands[2], DImode))\n+    {\n+      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t      gen_rtx_PLUS (DImode, operands[1],\n+\t\t\t\t\t    GEN_INT(-4096))));\n+      DONE;\n+    }\n }\")\n \n (define_insn \"*subdi3_sp32\"\n@@ -4925,7 +4955,23 @@\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"1\")])\n \n-(define_insn \"subsi3\"\n+(define_expand \"subsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,d\")\n+\t(minus:SI (match_operand:SI 1 \"register_operand\" \"r,d\")\n+\t\t  (match_operand:SI 2 \"arith_add_operand\" \"rI,d\")))]\n+  \"\"\n+  \"\n+{\n+  if (arith_4096_operand(operands[2], DImode))\n+    {\n+      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t      gen_rtx_PLUS (SImode, operands[1],\n+\t\t\t\t\t    GEN_INT(-4096))));\n+      DONE;\n+    }\n+}\")\n+\n+(define_insn \"*subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,d\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"r,d\")\n \t\t  (match_operand:SI 2 \"arith_operand\" \"rI,d\")))]"}]}