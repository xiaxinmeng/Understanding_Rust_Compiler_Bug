{"sha": "a2ef3db72b61490b5522f80abd7010ac404641d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJlZjNkYjcyYjYxNDkwYjU1MjJmODBhYmQ3MDEwYWM0MDQ2NDFkMQ==", "commit": {"author": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2003-10-11T03:06:45Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2003-10-11T03:06:45Z"}, "message": "lb1sf68.asm: Add __PIC__ and __ID_SHARED_LIBRARY__ support.\n\n\t* config/m68k/lb1sf68.asm: Add __PIC__ and __ID_SHARED_LIBRARY__\n\tsupport.\n\t* config/m68k/m68k-none.h (ASM_SPEC): Pass --pcrel to assembler on\n\t-fpic, -fPIC, -msep-data and -mid-shared-library.\n\t* config/m68k/m68k.c (m68k_library_id_string): New global variable.\n\t(override_options): Add -msep-data and -mshared-library-id support.\n\t(m68k_output_function_prologue): Generate code to load A5 for\n\tTARGET_ID_SHARED_LIBRARY and TARGET_SEP_DATA.\n\t(m68k_output_mi_thunk): Emit indirect jump on TARGET_ID_SHARED_LIBRARY.\n\t(m68k_output_pic_call): New function.\n\t* gcc/config/m68k/m68k.h (TARGET_SEP_DATA): New target flag.\n\t(TARGET_ID_SHARED_LIBRARY): Ditto.\n\t(TARGET_SWITCHES): Add switches for -mid-shared-library and -msep-data.\n\t* gcc/config/m68k/m68k.md (call): Call m68k_output_pic_call().\n\t(call_value): Likewise.\n\nFrom-SVN: r72324", "tree": {"sha": "16b02d2698d4554f58c2b0ba987554087675890d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16b02d2698d4554f58c2b0ba987554087675890d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2ef3db72b61490b5522f80abd7010ac404641d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ef3db72b61490b5522f80abd7010ac404641d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ef3db72b61490b5522f80abd7010ac404641d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ef3db72b61490b5522f80abd7010ac404641d1/comments", "author": null, "committer": null, "parents": [{"sha": "4f5acf56e39af0f7c25362cfd4206807edf54034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f5acf56e39af0f7c25362cfd4206807edf54034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f5acf56e39af0f7c25362cfd4206807edf54034"}], "stats": {"total": 396, "additions": 276, "deletions": 120}, "files": [{"sha": "d5e54a94b924b071db368ba0d21bae52e7260002", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ef3db72b61490b5522f80abd7010ac404641d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ef3db72b61490b5522f80abd7010ac404641d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2ef3db72b61490b5522f80abd7010ac404641d1", "patch": "@@ -1,4 +1,23 @@\n-2003-09-11  Peter Barada <peter@baradas.org>\n+2003-10-11  Bernardo Innocenti  <bernie@develer.com>\n+\t    Paul Dale  <pauli@snapgear.com>\n+\n+\t* config/m68k/lb1sf68.asm: Add __PIC__ and __ID_SHARED_LIBRARY__\n+\tsupport. \n+\t* config/m68k/m68k-none.h (ASM_SPEC): Pass --pcrel to assembler on\n+\t-fpic, -fPIC, -msep-data and -mid-shared-library.\n+\t* config/m68k/m68k.c (m68k_library_id_string): New global variable.\n+\t(override_options): Add -msep-data and -mshared-library-id support.\n+\t(m68k_output_function_prologue): Generate code to load A5 for\n+\tTARGET_ID_SHARED_LIBRARY and TARGET_SEP_DATA.\n+\t(m68k_output_mi_thunk): Emit indirect jump on TARGET_ID_SHARED_LIBRARY.\n+\t(m68k_output_pic_call): New function.\n+\t* gcc/config/m68k/m68k.h (TARGET_SEP_DATA): New target flag.\n+\t(TARGET_ID_SHARED_LIBRARY): Ditto.\n+\t(TARGET_SWITCHES): Add switches for -mid-shared-library and -msep-data.\n+\t* gcc/config/m68k/m68k.md (call): Call m68k_output_pic_call().\n+\t(call_value): Likewise.\n+\n+2003-10-11  Peter Barada <peter@baradas.org>\n \t    Bernardo Innocenti  <bernie@develer.com>\n \n \t* config/m68k/m68k.c (m68k_frame): Move before protos referencing it."}, {"sha": "8c681ed538591a8c30f323ba7e2907dc76001df6", "filename": "gcc/config/m68k/lb1sf68.asm", "status": "modified", "additions": 126, "deletions": 56, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ef3db72b61490b5522f80abd7010ac404641d1/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ef3db72b61490b5522f80abd7010ac404641d1/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm?ref=a2ef3db72b61490b5522f80abd7010ac404641d1", "patch": "@@ -86,6 +86,76 @@ Boston, MA 02111-1307, USA.  */\n #define a6 REG (a6)\n #define fp REG (fp)\n #define sp REG (sp)\n+#define pc REG (pc)\n+\n+/* Provide a few macros to allow for PIC code support.\n+ * With PIC, data is stored A5 relative so we've got to take a bit of special\n+ * care to ensure that all loads of global data is via A5.  PIC also requires\n+ * jumps and subroutine calls to be PC relative rather than absolute.  We cheat\n+ * a little on this and in the PIC case, we use short offset branches and\n+ * hope that the final object code is within range (which it should be).\n+ */\n+#ifndef __PIC__\n+\n+\t/* Non PIC (absolute/relocatable) versions */\n+\n+\t.macro PICCALL addr\n+\tjbsr\t\\addr\n+\t.endm\n+\n+\t.macro PICJUMP addr\n+\tjmp\t\\addr\n+\t.endm\n+\n+\t.macro PICLEA sym, reg\n+\tlea\t\\sym, \\reg\n+\t.endm\n+\n+\t.macro PICPEA sym, areg\n+\tpea\t\\sym\n+\t.endm\n+\n+#else /* __PIC__ */\n+\n+\t/* Common for -mid-shared-libary and -msep-data */\n+\n+\t.macro PICCALL addr\n+\tbsr\t\\addr\n+\t.endm\n+\n+\t.macro PICJUMP addr\n+\tbra\t\\addr\n+\t.endm\n+\n+# if defined(__ID_SHARED_LIBRARY__)\n+\n+\t/* -mid-shared-library versions  */\n+\n+\t.macro PICLEA sym, reg\n+\tmovel\ta5@(_current_shared_library_a5_offset_), \\reg\n+\tmovel\t\\sym@GOT(\\reg), \\reg\n+\t.endm\n+\n+\t.macro PICPEA sym, areg\n+\tmovel\ta5@(_current_shared_library_a5_offset_), \\areg\n+\tmovel\t\\sym@GOT(\\areg), sp@-\n+\t.endm\n+\n+# else /* !__ID_SHARED_LIBRARY__ */\n+\n+\t/* Versions for -msep-data */\n+\n+\t.macro PICLEA sym, reg\n+\tmovel\t\\sym@GOT(a5), \\reg\n+\t.endm\n+\n+\t.macro PICPEA sym, areg\n+\tmovel\t\\sym@GOT(a5), sp@-\n+\t.endm\n+\n+# endif /* !__ID_SHARED_LIBRARY__ */\n+#endif /* __PIC__ */\n+\n \n #ifdef L_floatex\n \n@@ -213,7 +283,7 @@ TRUNCDFSF    = 7\n \n | void __clear_sticky_bits(void);\n SYM (__clear_sticky_bit):\t\t\n-\tlea\tSYM (_fpCCR),a0\n+\tPICLEA\tSYM (_fpCCR),a0\n #ifndef __mcoldfire__\n \tmovew\tIMM (0),a0@(STICK)\n #else\n@@ -246,7 +316,7 @@ SYM (__clear_sticky_bit):\n FPTRAP = 15\n \n $_exception_handler:\n-\tlea\tSYM (_fpCCR),a0\n+\tPICLEA\tSYM (_fpCCR),a0\n \tmovew\td7,a0@(EBITS)\t| set __exception_bits\n #ifndef __mcoldfire__\n \torw\td7,a0@(STICK)\t| and __sticky_bits\n@@ -282,7 +352,7 @@ $_exception_handler:\n \tandl\td6,d7\n #endif\n \tbeq\t1f\t\t| no, exit\n-\tpea\tSYM (_fpCCR)\t| yes, push address of _fpCCR\n+\tPICPEA\tSYM (_fpCCR),a1\t| yes, push address of _fpCCR\n \ttrap\tIMM (FPTRAP)\t| and trap\n #ifndef __mcoldfire__\n 1:\tmoveml\tsp@+,d2-d7\t| restore data registers\n@@ -421,7 +491,7 @@ L1:\tmovel\tsp@(8), d0\t/* d0 = dividend */\n \n L2:\tmovel\td1, sp@-\n \tmovel\td0, sp@-\n-\tjbsr\tSYM (__udivsi3)\t/* divide abs(dividend) by abs(divisor) */\n+\tPICCALL\tSYM (__udivsi3)\t/* divide abs(dividend) by abs(divisor) */\n \taddql\tIMM (8), sp\n \n \ttstb\td2\n@@ -441,13 +511,13 @@ SYM (__umodsi3):\n \tmovel\tsp@(4), d0\t/* d0 = dividend */\n \tmovel\td1, sp@-\n \tmovel\td0, sp@-\n-\tjbsr\tSYM (__udivsi3)\n+\tPICCALL\tSYM (__udivsi3)\n \taddql\tIMM (8), sp\n \tmovel\tsp@(8), d1\t/* d1 = divisor */\n #ifndef __mcoldfire__\n \tmovel\td1, sp@-\n \tmovel\td0, sp@-\n-\tjbsr\tSYM (__mulsi3)\t/* d0 = (a/b)*b */\n+\tPICCALL\tSYM (__mulsi3)\t/* d0 = (a/b)*b */\n \taddql\tIMM (8), sp\n #else\n \tmulsl\td1,d0\n@@ -467,13 +537,13 @@ SYM (__modsi3):\n \tmovel\tsp@(4), d0\t/* d0 = dividend */\n \tmovel\td1, sp@-\n \tmovel\td0, sp@-\n-\tjbsr\tSYM (__divsi3)\n+\tPICCALL\tSYM (__divsi3)\n \taddql\tIMM (8), sp\n \tmovel\tsp@(8), d1\t/* d1 = divisor */\n #ifndef __mcoldfire__\n \tmovel\td1, sp@-\n \tmovel\td0, sp@-\n-\tjbsr\tSYM (__mulsi3)\t/* d0 = (a/b)*b */\n+\tPICCALL\tSYM (__mulsi3)\t/* d0 = (a/b)*b */\n \taddql\tIMM (8), sp\n #else\n \tmulsl\td1,d0\n@@ -540,7 +610,7 @@ Ld$den:\n \torl\td7,d0\n \tmovew\tIMM (INEXACT_RESULT+UNDERFLOW),d7\n \tmoveq\tIMM (DOUBLE_FLOAT),d6\n-\tjmp\t$_exception_handler\n+\tPICJUMP\t$_exception_handler\n \n Ld$infty:\n Ld$overflow:\n@@ -550,23 +620,23 @@ Ld$overflow:\n \torl\td7,d0\n \tmovew\tIMM (INEXACT_RESULT+OVERFLOW),d7\n \tmoveq\tIMM (DOUBLE_FLOAT),d6\n-\tjmp\t$_exception_handler\n+\tPICJUMP\t$_exception_handler\n \n Ld$underflow:\n | Return 0 and set the exception flags \n \tmovel\tIMM (0),d0\n \tmovel\td0,d1\n \tmovew\tIMM (INEXACT_RESULT+UNDERFLOW),d7\n \tmoveq\tIMM (DOUBLE_FLOAT),d6\n-\tjmp\t$_exception_handler\n+\tPICJUMP\t$_exception_handler\n \n Ld$inop:\n | Return a quiet NaN and set the exception flags\n \tmovel\tIMM (QUIET_NaN),d0\n \tmovel\td0,d1\n \tmovew\tIMM (INEXACT_RESULT+INVALID_OPERATION),d7\n \tmoveq\tIMM (DOUBLE_FLOAT),d6\n-\tjmp\t$_exception_handler\n+\tPICJUMP\t$_exception_handler\n \n Ld$div$0:\n | Return a properly signed INFINITY and set the exception flags\n@@ -575,7 +645,7 @@ Ld$div$0:\n \torl\td7,d0\n \tmovew\tIMM (INEXACT_RESULT+DIVIDE_BY_ZERO),d7\n \tmoveq\tIMM (DOUBLE_FLOAT),d6\n-\tjmp\t$_exception_handler\n+\tPICJUMP\t$_exception_handler\n \n |=============================================================================\n |=============================================================================\n@@ -1015,8 +1085,8 @@ Ladddf$4:\n \taddl\tIMM (1),d4\n #endif\n 1:\n-\tlea\tLadddf$5,a0\t| to return from rounding routine\n-\tlea\tSYM (_fpCCR),a1\t| check the rounding mode\n+\tlea\tpc@(Ladddf$5),a0 | to return from rounding routine\n+\tPICLEA\tSYM (_fpCCR),a1\t| check the rounding mode\n #ifdef __mcoldfire__\n \tclrl\td6\n #endif\n@@ -1123,8 +1193,8 @@ Lsubdf$0:\n \taddl\tIMM (1),d4\n #endif\n 1:\n-\tlea\tLsubdf$1,a0\t| to return from rounding routine\n-\tlea\tSYM (_fpCCR),a1\t| check the rounding mode\n+\tlea\tpc@(Lsubdf$1),a0 | to return from rounding routine\n+\tPICLEA\tSYM (_fpCCR),a1\t| check the rounding mode\n #ifdef __mcoldfire__\n \tclrl\td6\n #endif\n@@ -1168,7 +1238,7 @@ Ladddf$a$small:\n #endif\n \tmovel\ta6@(16),d0\n \tmovel\ta6@(20),d1\n-\tlea\tSYM (_fpCCR),a0\n+\tPICLEA\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n #ifndef __mcoldfire__\n \tmoveml\tsp@+,d2-d7\t| restore data registers\n@@ -1190,7 +1260,7 @@ Ladddf$b$small:\n #endif\n \tmovel\ta6@(8),d0\n \tmovel\ta6@(12),d1\n-\tlea\tSYM (_fpCCR),a0\n+\tPICLEA\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n #ifndef __mcoldfire__\n \tmoveml\tsp@+,d2-d7\t| restore data registers\n@@ -1248,7 +1318,7 @@ Ladddf$ret$1:\n \n Ladddf$ret:\n | Normal exit.\n-\tlea\tSYM (_fpCCR),a0\n+\tPICLEA\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n \torl\td7,d0\t\t| put sign bit back\n #ifndef __mcoldfire__\n@@ -1610,7 +1680,7 @@ Lmuldf$a$0:\n \tbclr\tIMM (31),d2\t| clear sign bit\n 1:\tcmpl\tIMM (0x7ff00000),d2 | check for non-finiteness\n \tbge\tLd$inop\t\t| in case NaN or +/-INFINITY return NaN\n-\tlea\tSYM (_fpCCR),a0\n+\tPICLEA\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n #ifndef __mcoldfire__\n \tmoveml\tsp@+,d2-d7\n@@ -1895,7 +1965,7 @@ Ldivdf$a$0:\n \tbne\tLd$inop\t\t|\n 1:\tmovel\tIMM (0),d0\t| else return zero\n \tmovel\td0,d1\t\t| \n-\tlea\tSYM (_fpCCR),a0\t| clear exception flags\n+\tPICLEA\tSYM (_fpCCR),a0\t| clear exception flags\n \tmovew\tIMM (0),a0@\t|\n #ifndef __mcoldfire__\n \tmoveml\tsp@+,d2-d7\t| \n@@ -2035,8 +2105,8 @@ Lround$exit:\n \torl\td7,d3\t\t| the bits which were flushed right\n \tmovel\ta0,d7\t\t| get back sign bit into d7\n | Now call the rounding routine (which takes care of denormalized numbers):\n-\tlea\tLround$0,a0\t| to return from rounding routine\n-\tlea\tSYM (_fpCCR),a1\t| check the rounding mode\n+\tlea\tpc@(Lround$0),a0 | to return from rounding routine\n+\tPICLEA\tSYM (_fpCCR),a1\t| check the rounding mode\n #ifdef __mcoldfire__\n \tclrl\td6\n #endif\n@@ -2084,7 +2154,7 @@ Lround$0:\n \tswap\td0\t\t|\n \torl\td7,d0\t\t| and sign also\n \n-\tlea\tSYM (_fpCCR),a0\n+\tPICLEA\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n #ifndef __mcoldfire__\n \tmoveml\tsp@+,d2-d7\n@@ -2126,7 +2196,7 @@ SYM (__negdf2):\n \tmovel\td0,d7\t\t| else get sign and return INFINITY\n \tandl\tIMM (0x80000000),d7\n \tbra\tLd$infty\t\t\n-1:\tlea\tSYM (_fpCCR),a0\n+1:\tPICLEA\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n #ifndef __mcoldfire__\n \tmoveml\tsp@+,d2-d7\n@@ -2424,7 +2494,7 @@ Lf$den:\n \torl\td7,d0\n \tmovew\tIMM (INEXACT_RESULT+UNDERFLOW),d7\n \tmoveq\tIMM (SINGLE_FLOAT),d6\n-\tjmp\t$_exception_handler\n+\tPICJUMP\t$_exception_handler\n \n Lf$infty:\n Lf$overflow:\n@@ -2433,29 +2503,29 @@ Lf$overflow:\n \torl\td7,d0\n \tmovew\tIMM (INEXACT_RESULT+OVERFLOW),d7\n \tmoveq\tIMM (SINGLE_FLOAT),d6\n-\tjmp\t$_exception_handler\n+\tPICJUMP\t$_exception_handler\n \n Lf$underflow:\n | Return 0 and set the exception flags \n \tmovel\tIMM (0),d0\n \tmovew\tIMM (INEXACT_RESULT+UNDERFLOW),d7\n \tmoveq\tIMM (SINGLE_FLOAT),d6\n-\tjmp\t$_exception_handler\n+\tPICJUMP\t$_exception_handler\n \n Lf$inop:\n | Return a quiet NaN and set the exception flags\n \tmovel\tIMM (QUIET_NaN),d0\n \tmovew\tIMM (INEXACT_RESULT+INVALID_OPERATION),d7\n \tmoveq\tIMM (SINGLE_FLOAT),d6\n-\tjmp\t$_exception_handler\n+\tPICJUMP\t$_exception_handler\n \n Lf$div$0:\n | Return a properly signed INFINITY and set the exception flags\n \tmovel\tIMM (INFINITY),d0\n \torl\td7,d0\n \tmovew\tIMM (INEXACT_RESULT+DIVIDE_BY_ZERO),d7\n \tmoveq\tIMM (SINGLE_FLOAT),d6\n-\tjmp\t$_exception_handler\n+\tPICJUMP\t$_exception_handler\n \n |=============================================================================\n |=============================================================================\n@@ -2737,8 +2807,8 @@ Laddsf$3:\n #endif\n \taddl\tIMM (1),d2\n 1:\n-\tlea\tLaddsf$4,a0\t| to return from rounding routine\n-\tlea\tSYM (_fpCCR),a1\t| check the rounding mode\n+\tlea\tpc@(Laddsf$4),a0 | to return from rounding routine\n+\tPICLEA\tSYM (_fpCCR),a1\t| check the rounding mode\n #ifdef __mcoldfire__\n \tclrl\td6\n #endif\n@@ -2802,8 +2872,8 @@ Lsubsf$0:\n | Note that we do not have to normalize, since in the subtraction bit\n | #FLT_MANT_DIG+1 is never set, and denormalized numbers are handled by\n | the rounding routines themselves.\n-\tlea\tLsubsf$1,a0\t| to return from rounding routine\n-\tlea\tSYM (_fpCCR),a1\t| check the rounding mode\n+\tlea\tpc@(Lsubsf$1),a0 | to return from rounding routine\n+\tPICLEA\tSYM (_fpCCR),a1\t| check the rounding mode\n #ifdef __mcoldfire__\n \tclrl\td6\n #endif\n@@ -2834,7 +2904,7 @@ Lsubsf$1:\n | check for finiteness or zero).\n Laddsf$a$small:\n \tmovel\ta6@(12),d0\n-\tlea\tSYM (_fpCCR),a0\n+\tPICLEA\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n #ifndef __mcoldfire__\n \tmoveml\tsp@+,d2-d7\t| restore data registers\n@@ -2848,7 +2918,7 @@ Laddsf$a$small:\n \n Laddsf$b$small:\n \tmovel\ta6@(8),d0\n-\tlea\tSYM (_fpCCR),a0\n+\tPICLEA\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n #ifndef __mcoldfire__\n \tmoveml\tsp@+,d2-d7\t| restore data registers\n@@ -2905,7 +2975,7 @@ Laddsf$a:\n Laddsf$ret:\n | Normal exit (a and b nonzero, result is not NaN nor +/-infty).\n | We have to clear the exception flags (just the exception type).\n-\tlea\tSYM (_fpCCR),a0\n+\tPICLEA\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n \torl\td7,d0\t\t| put sign bit\n #ifndef __mcoldfire__\n@@ -3141,7 +3211,7 @@ Lmulsf$a$0:\n 1:\tbclr\tIMM (31),d1\t| clear sign bit \n \tcmpl\tIMM (INFINITY),d1 | and check for a large exponent\n \tbge\tLf$inop\t\t| if b is +/-INFINITY or NaN return NaN\n-\tlea\tSYM (_fpCCR),a0\t| else return zero\n+\tPICLEA\tSYM (_fpCCR),a0\t| else return zero\n \tmovew\tIMM (0),a0@\t| \n #ifndef __mcoldfire__\n \tmoveml\tsp@+,d2-d7\t| \n@@ -3341,7 +3411,7 @@ Ldivsf$a$0:\n \tcmpl\tIMM (INFINITY),d1\t| check for NaN\n \tbhi\tLf$inop\t\t\t| \n \tmovel\tIMM (0),d0\t\t| else return zero\n-\tlea\tSYM (_fpCCR),a0\t\t|\n+\tPICLEA\tSYM (_fpCCR),a0\t\t|\n \tmovew\tIMM (0),a0@\t\t|\n #ifndef __mcoldfire__\n \tmoveml\tsp@+,d2-d7\t\t| \n@@ -3444,8 +3514,8 @@ Lround$exit:\n 2:\torl\td6,d1\t\t| this is a trick so we don't lose  '\n \t\t\t\t| the extra bits which were flushed right\n | Now call the rounding routine (which takes care of denormalized numbers):\n-\tlea\tLround$0,a0\t| to return from rounding routine\n-\tlea\tSYM (_fpCCR),a1\t| check the rounding mode\n+\tlea\tpc@(Lround$0),a0 | to return from rounding routine\n+\tPICLEA\tSYM (_fpCCR),a1\t| check the rounding mode\n #ifdef __mcoldfire__\n \tclrl\td6\n #endif\n@@ -3493,7 +3563,7 @@ Lround$0:\n \tswap\td0\t\t|\n \torl\td7,d0\t\t| and sign also\n \n-\tlea\tSYM (_fpCCR),a0\n+\tPICLEA\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n #ifndef __mcoldfire__\n \tmoveml\tsp@+,d2-d7\n@@ -3534,7 +3604,7 @@ SYM (__negsf2):\n \tmovel\td0,d7\t\t| else get sign and return INFINITY\n \tandl\tIMM (0x80000000),d7\n \tbra\tLf$infty\t\t\n-1:\tlea\tSYM (_fpCCR),a0\n+1:\tPICLEA\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n #ifndef __mcoldfire__\n \tmoveml\tsp@+,d2-d7\n@@ -3742,7 +3812,7 @@ SYM (__eqdf2):\n \tmovl\ta6@(16),sp@-\n \tmovl\ta6@(12),sp@-\n \tmovl\ta6@(8),sp@-\n-\tjbsr\tSYM (__cmpdf2)\n+\tPICCALL\tSYM (__cmpdf2)\n \tunlk\ta6\n \trts\n #endif /* L_eqdf2 */\n@@ -3757,7 +3827,7 @@ SYM (__nedf2):\n \tmovl\ta6@(16),sp@-\n \tmovl\ta6@(12),sp@-\n \tmovl\ta6@(8),sp@-\n-\tjbsr\tSYM (__cmpdf2)\n+\tPICCALL\tSYM (__cmpdf2)\n \tunlk\ta6\n \trts\n #endif /* L_nedf2 */\n@@ -3772,7 +3842,7 @@ SYM (__gtdf2):\n \tmovl\ta6@(16),sp@-\n \tmovl\ta6@(12),sp@-\n \tmovl\ta6@(8),sp@-\n-\tjbsr\tSYM (__cmpdf2)\n+\tPICCALL\tSYM (__cmpdf2)\n \tunlk\ta6\n \trts\n #endif /* L_gtdf2 */\n@@ -3787,7 +3857,7 @@ SYM (__gedf2):\n \tmovl\ta6@(16),sp@-\n \tmovl\ta6@(12),sp@-\n \tmovl\ta6@(8),sp@-\n-\tjbsr\tSYM (__cmpdf2)\n+\tPICCALL\tSYM (__cmpdf2)\n \tunlk\ta6\n \trts\n #endif /* L_gedf2 */\n@@ -3802,7 +3872,7 @@ SYM (__ltdf2):\n \tmovl\ta6@(16),sp@-\n \tmovl\ta6@(12),sp@-\n \tmovl\ta6@(8),sp@-\n-\tjbsr\tSYM (__cmpdf2)\n+\tPICCALL\tSYM (__cmpdf2)\n \tunlk\ta6\n \trts\n #endif /* L_ltdf2 */\n@@ -3817,7 +3887,7 @@ SYM (__ledf2):\n \tmovl\ta6@(16),sp@-\n \tmovl\ta6@(12),sp@-\n \tmovl\ta6@(8),sp@-\n-\tjbsr\tSYM (__cmpdf2)\n+\tPICCALL\tSYM (__cmpdf2)\n \tunlk\ta6\n \trts\n #endif /* L_ledf2 */\n@@ -3833,7 +3903,7 @@ SYM (__eqsf2):\n \tlink\ta6,IMM (0)\n \tmovl\ta6@(12),sp@-\n \tmovl\ta6@(8),sp@-\n-\tjbsr\tSYM (__cmpsf2)\n+\tPICCALL\tSYM (__cmpsf2)\n \tunlk\ta6\n \trts\n #endif /* L_eqsf2 */\n@@ -3846,7 +3916,7 @@ SYM (__nesf2):\n \tlink\ta6,IMM (0)\n \tmovl\ta6@(12),sp@-\n \tmovl\ta6@(8),sp@-\n-\tjbsr\tSYM (__cmpsf2)\n+\tPICCALL\tSYM (__cmpsf2)\n \tunlk\ta6\n \trts\n #endif /* L_nesf2 */\n@@ -3859,7 +3929,7 @@ SYM (__gtsf2):\n \tlink\ta6,IMM (0)\n \tmovl\ta6@(12),sp@-\n \tmovl\ta6@(8),sp@-\n-\tjbsr\tSYM (__cmpsf2)\n+\tPICCALL\tSYM (__cmpsf2)\n \tunlk\ta6\n \trts\n #endif /* L_gtsf2 */\n@@ -3872,7 +3942,7 @@ SYM (__gesf2):\n \tlink\ta6,IMM (0)\n \tmovl\ta6@(12),sp@-\n \tmovl\ta6@(8),sp@-\n-\tjbsr\tSYM (__cmpsf2)\n+\tPICCALL\tSYM (__cmpsf2)\n \tunlk\ta6\n \trts\n #endif /* L_gesf2 */\n@@ -3885,7 +3955,7 @@ SYM (__ltsf2):\n \tlink\ta6,IMM (0)\n \tmovl\ta6@(12),sp@-\n \tmovl\ta6@(8),sp@-\n-\tjbsr\tSYM (__cmpsf2)\n+\tPICCALL\tSYM (__cmpsf2)\n \tunlk\ta6\n \trts\n #endif /* L_ltsf2 */\n@@ -3898,7 +3968,7 @@ SYM (__lesf2):\n \tlink\ta6,IMM (0)\n \tmovl\ta6@(12),sp@-\n \tmovl\ta6@(8),sp@-\n-\tjbsr\tSYM (__cmpsf2)\n+\tPICCALL\tSYM (__cmpsf2)\n \tunlk\ta6\n \trts\n #endif /* L_lesf2 */"}, {"sha": "79463b84abc88ab6b6802199e3d27feee54bf3cb", "filename": "gcc/config/m68k/m68k-none.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ef3db72b61490b5522f80abd7010ac404641d1/gcc%2Fconfig%2Fm68k%2Fm68k-none.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ef3db72b61490b5522f80abd7010ac404641d1/gcc%2Fconfig%2Fm68k%2Fm68k-none.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-none.h?ref=a2ef3db72b61490b5522f80abd7010ac404641d1", "patch": "@@ -82,6 +82,7 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n %{m68851}%{mno-68851}%{m68881}%{mno-68881}%{msoft-float:-mno-68881} %{m68000}%{m68302}%{mc68000}%{m68010}%{m68020}%{mc68020}%{m68030}%{m68040}%{m68020-40:-mc68040} %{m68020-60:-mc68040} %{m68060}%{mcpu32}%{m68332}%{m5200}%{m5206e}%{m528x}%{m5307}%{m5407}%{!mc68000:%{!m68000:%{!m68302:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68020-60:%{!m68060:%{!mcpu32:%{!m68332:%{!m5200:%{!m5206e:%{!m528x:%{!m5307:%{!m5407:%(asm_cpu_default)}}}}}}}}}}}}}}}}}} \\\n+%{fPIC:--pcrel} %{fpic:--pcrel} %{msep-data:--pcrel} %{mid-shared-library:--pcrel} \\\n \"\n \n /* cc1/cc1plus always receives all the -m flags. If the specs strings above "}, {"sha": "16800e83a61c9f562f60f7e70235c9ec82f132bf", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ef3db72b61490b5522f80abd7010ac404641d1/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ef3db72b61490b5522f80abd7010ac404641d1/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=a2ef3db72b61490b5522f80abd7010ac404641d1", "patch": "@@ -38,6 +38,7 @@ extern const char *output_addsi3 (rtx *);\n extern const char *output_andsi3 (rtx *);\n extern const char *output_iorsi3 (rtx *);\n extern const char *output_xorsi3 (rtx *);\n+extern void m68k_output_pic_call (rtx dest);\n extern void output_dbcc_and_branch (rtx *);\n extern int const_uint32_operand (rtx, enum machine_mode);\n extern int const_sint32_operand (rtx, enum machine_mode);"}, {"sha": "be30fa656e09498e58943aeafa014c25e7ce8d27", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 93, "deletions": 10, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ef3db72b61490b5522f80abd7010ac404641d1/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ef3db72b61490b5522f80abd7010ac404641d1/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=a2ef3db72b61490b5522f80abd7010ac404641d1", "patch": "@@ -74,6 +74,8 @@ const char *m68k_align_loops_string;\n const char *m68k_align_jumps_string;\n /* Specify power of two alignment used for functions.  */\n const char *m68k_align_funcs_string;\n+/* Specify the identification number of the library being built */\n+const char *m68k_library_id_string;\n \n /* Specify power of two alignment used for loops.  */\n int m68k_align_loops;\n@@ -167,6 +169,38 @@ override_options (void)\n \tm68k_align_loops = i;\n     }\n \n+  /* Library identification */\n+  if (m68k_library_id_string)\n+    {\n+      int id;\n+\n+      if (! TARGET_ID_SHARED_LIBRARY)\n+\terror (\"-mshared-library-id= specified without -mid-shared-library\");\n+      id = atoi (m68k_library_id_string);\n+      if (id < 0 || id > MAX_LIBRARY_ID)\n+\terror (\"-mshared-library-id=%d is not between 0 and %d\", id, MAX_LIBRARY_ID);\n+\n+      /* From now on, m68k_library_id_string will contain the library offset.  */\n+      asprintf ((char **)&m68k_library_id_string, \"%d\", (id * -4) - 4);\n+    }\n+  else\n+    /* If TARGET_ID_SHARED_LIBRARY is enabled, this will point to the\n+       current library.  */\n+    m68k_library_id_string = \"_current_shared_library_a5_offset_\";\n+\n+  /* Sanity check to ensure that msep-data and mid-sahred-library are not\n+   * both specified together.  Doing so simply doesn't make sense.\n+   */\n+  if (TARGET_SEP_DATA && TARGET_ID_SHARED_LIBRARY)\n+    error (\"cannot specify both -msep-data and -mid-shared-library\");\n+\n+  /* If we're generating code for a separate A5 relative data segment,\n+   * we've got to enable -fPIC as well.  This might be relaxable to\n+   * -fpic but it hasn't been tested properly.\n+   */\n+  if (TARGET_SEP_DATA || TARGET_ID_SHARED_LIBRARY)\n+    flag_pic = 2;\n+\n   /* Validate -malign-jumps= value, or provide default */\n   m68k_align_jumps = def_align;\n   if (m68k_align_jumps_string)\n@@ -192,7 +226,7 @@ override_options (void)\n \n   /* -fPIC uses 32-bit pc-relative displacements, which don't exist\n      until the 68020.  */\n-  if (! TARGET_68020 && flag_pic == 2)\n+  if (!TARGET_68020 && !TARGET_COLDFIRE && (flag_pic == 2))\n     error(\"-fPIC is not currently supported on the 68000 or 68010\\n\");\n \n   /* ??? A historic way of turning on pic, or is this intended to\n@@ -639,18 +673,30 @@ m68k_output_function_prologue (FILE *stream, HOST_WIDE_INT size)\n \t\t\t\t  -cfa_offset + n_regs++ * 4);\n \t}\n     }\n-  if (flag_pic && current_function_uses_pic_offset_table)\n+  if (!TARGET_SEP_DATA && flag_pic &&\n+      (current_function_uses_pic_offset_table ||\n+        (!current_function_is_leaf && TARGET_ID_SHARED_LIBRARY)))\n     {\n+      if (TARGET_ID_SHARED_LIBRARY)\n+\t{\n+\t  asm_fprintf (stream, \"\\tmovel %s@(%s), %s\\n\",\n+\t\t       reg_names[PIC_OFFSET_TABLE_REGNUM],\n+\t\t       m68k_library_id_string,\n+\t\t       reg_names[PIC_OFFSET_TABLE_REGNUM]);\n+\t}\n+      else\n+\t{\n #ifdef MOTOROLA\n-      asm_fprintf (stream, \"\\t%Olea (%Rpc, %U_GLOBAL_OFFSET_TABLE_@GOTPC), %s\\n\",\n-\t\t   reg_names[PIC_OFFSET_TABLE_REGNUM]);\n+\t  asm_fprintf (stream, \"\\t%Olea (%Rpc, %U_GLOBAL_OFFSET_TABLE_@GOTPC), %s\\n\",\n+\t\t       reg_names[PIC_OFFSET_TABLE_REGNUM]);\n #else\n-      asm_fprintf (stream, \"\\tmovel %I%U_GLOBAL_OFFSET_TABLE_, %s\\n\",\n-\t\t   reg_names[PIC_OFFSET_TABLE_REGNUM]);\n-      asm_fprintf (stream, \"\\tlea %Rpc@(0,%s:l),%s\\n\",\n-\t\t   reg_names[PIC_OFFSET_TABLE_REGNUM],\n-\t\t   reg_names[PIC_OFFSET_TABLE_REGNUM]);\n+\t  asm_fprintf (stream, \"\\tmovel %I%U_GLOBAL_OFFSET_TABLE_, %s\\n\",\n+\t\t       reg_names[PIC_OFFSET_TABLE_REGNUM]);\n+\t  asm_fprintf (stream, \"\\tlea %Rpc@(0,%s:l),%s\\n\",\n+\t\t       reg_names[PIC_OFFSET_TABLE_REGNUM],\n+\t\t       reg_names[PIC_OFFSET_TABLE_REGNUM]);\n #endif\n+\t}\n     }\n }\n \f\n@@ -1055,6 +1101,39 @@ flags_in_68881 (void)\n   return cc_status.flags & CC_IN_68881;\n }\n \n+/* Output a BSR instruction suitable for PIC code.  */\n+void\n+m68k_output_pic_call(rtx dest)\n+{\n+  const char *out;\n+\n+  if (!(GET_CODE (dest) == MEM && GET_CODE (XEXP (dest, 0)) == SYMBOL_REF))\n+    out = \"jsr %0\";\n+      /* We output a BSR instruction if we've using -fpic or we're building for\n+       * a target that supports long branches.  If we're building -fPIC on the\n+       * 68000, 68010 or ColdFire we generate one of two sequences:\n+       * a shorter one that uses a GOT entry or a longer one that doesn't.\n+       * We'll use the -Os command-line flag to decide which to generate.\n+       * Both sequences take the same time to execute on the ColdFire.\n+       */\n+  else if (TARGET_PCREL)\n+    out = \"bsr.l %o0\";\n+  else if ((flag_pic == 1) || TARGET_68020)\n+#ifdef HPUX_ASM\n+    out = \"bsr.l %0\";\n+#elif defined(USE_GAS)\n+    out = \"bsr.l %0@PLTPC\";\n+#else\n+    out = \"bsr %0@PLTPC\";\n+#endif\n+  else if (optimize_size || TARGET_ID_SHARED_LIBRARY)\n+    out = \"move.l %0@GOT(%%a5), %%a1\\n\\tjsr (%%a1)\";\n+  else\n+    out = \"lea %0-.-8,%%a1\\n\\tjsr 0(%%pc,%%a1)\";\n+\n+  output_asm_insn(out, &dest);\n+}\n+\n /* Output a dbCC; jCC sequence.  Note we do not handle the \n    floating point version of this sequence (Fdbcc).  We also\n    do not handle alternative conditions when CC_NO_OVERFLOW is\n@@ -3567,7 +3646,7 @@ m68k_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n     {\n       if (TARGET_PCREL)\n \tfmt = \"bra.l %o0\";\n-      else\n+      else if ((flag_pic == 1) || TARGET_68020)\n \t{\n #ifdef MOTOROLA\n #ifdef HPUX_ASM\n@@ -3587,6 +3666,10 @@ m68k_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n #endif\n #endif\n \t}\n+      else if (optimize_size || TARGET_ID_SHARED_LIBRARY)\n+        fmt = \"move.l %0@GOT(%%a5), %%a1\\n\\tjmp (%%a1)\";\n+      else\n+        fmt = \"lea %0-.-8,%%a1\\n\\tjsr 0(%%pc,%%a1)\";\n     }\n   else\n     {"}, {"sha": "cd512f28edd3ebe8d9bb376814080d8deb35952b", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ef3db72b61490b5522f80abd7010ac404641d1/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ef3db72b61490b5522f80abd7010ac404641d1/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=a2ef3db72b61490b5522f80abd7010ac404641d1", "patch": "@@ -83,14 +83,28 @@ Boston, MA 02111-1307, USA.  */\n       if (TARGET_CF_HWDIV)\t\t\t\\\n \tbuiltin_define (\"__mcfhwdiv__\");\t\\\n       if (flag_pic)\t\t\t\t\\\n-\tbuiltin_define (\"__pic__\");\t\t\\\n-      if (flag_pic > 1)\t\t\t\t\\\n-\tbuiltin_define (\"__PIC__\");\t\t\\\n+\t{\t\t\t\t\t\\\n+\t  builtin_define (\"__pic__\");\t\t\\\n+\t  if (flag_pic > 1)\t\t\t\\\n+\t    builtin_define (\"__PIC__\");\t\t\\\n+\t}\t\t\t\t\t\\\n       builtin_assert (\"cpu=m68k\");\t\t\\\n       builtin_assert (\"machine=m68k\");\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+/* Support A5 relative data seperate from text.\n+ * This option implies -fPIC, however it inhibits the generation of the\n+ * A5 save/restore in functions and the loading of a5 with a got pointer.\n+ */\n+#define MASK_SEP_DATA\t0x100000\n+#define TARGET_SEP_DATA (target_flags & MASK_SEP_DATA)\n+\n+/* Compile using library ID based shared libraries.\n+ * Set a specific ID using the -mshared-library-id=xxx option.\n+ */\n+#define MASK_ID_SHARED_LIBRARY\t0x200000\n+#define TARGET_ID_SHARED_LIBRARY\t(target_flags & MASK_ID_SHARED_LIBRARY)\n \n /* Classify the groups of pseudo-ops used to assemble QI, HI and SI\n    quantities.  */\n@@ -305,6 +319,14 @@ extern int target_flags;\n       N_(\"Align variables on a 32-bit boundary\") },\t\t\t\\\n     { \"no-align-int\", -MASK_ALIGN_INT, \t\t\t\t\t\\\n       N_(\"Align variables on a 16-bit boundary\") },\t\t\t\\\n+    { \"sep-data\", MASK_SEP_DATA,\t\t\t\t\t\\\n+      N_(\"Enable separate data segment\") },\t\t\t\t\\\n+    { \"no-sep-data\", -MASK_SEP_DATA,\t\t\t\t\t\\\n+      N_(\"Disable separate data segment\") },\t\t\t\t\\\n+    { \"id-shared-library\", MASK_ID_SHARED_LIBRARY,\t\t\t\\\n+      N_(\"Enable ID based shared library\") },\t\t\t\t\\\n+    { \"no-id-shared-library\", -MASK_ID_SHARED_LIBRARY,\t\t\t\\\n+      N_(\"Disable ID based shared library\") },\t\t\t\t\\\n     { \"pcrel\", MASK_PCREL,\t\t\t\t\t\t\\\n       N_(\"Generate pc-relative code\") },\t\t\t\t\\\n     { \"strict-align\", -MASK_NO_STRICT_ALIGNMENT,\t\t\t\\\n@@ -335,6 +357,8 @@ extern int target_flags;\n     N_(\"Jump targets are aligned to this power of 2\"), 0},\t\t\\\n   { \"align-functions=\",\t&m68k_align_funcs_string,\t\t\t\\\n     N_(\"Function starts are aligned to this power of 2\"), 0},\t\t\\\n+  { \"shared-library-id=\",\t&m68k_library_id_string,\t\t\\\n+    N_(\"ID of shared library to build\"), 0},\t\t\t\t\\\n   SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n }\n \n@@ -411,6 +435,9 @@ extern int target_flags;\n /* Maximum power of 2 that code can be aligned to.  */\n #define MAX_CODE_ALIGN\t2\t\t\t/* 4 byte alignment */\n \n+/* Maximum number of library ids we permit */\n+#define MAX_LIBRARY_ID 255\n+\n /* Align loop starts for optimal branching.  */\n #define LOOP_ALIGN(LABEL) (m68k_align_loops)\n \n@@ -1638,6 +1665,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n extern const char *m68k_align_loops_string;\n extern const char *m68k_align_jumps_string;\n extern const char *m68k_align_funcs_string;\n+extern const char *m68k_library_id_string;\n extern int m68k_align_loops;\n extern int m68k_align_jumps;\n extern int m68k_align_funcs;"}, {"sha": "685d37c0de72c9be76ec67524d1afb87a6fe9b41", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 4, "deletions": 50, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ef3db72b61490b5522f80abd7010ac404641d1/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ef3db72b61490b5522f80abd7010ac404641d1/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=a2ef3db72b61490b5522f80abd7010ac404641d1", "patch": "@@ -6796,31 +6796,8 @@\n \n   \"flag_pic\"\n   \"*\n-  if (GET_CODE (operands[0]) == MEM\n-      && GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF)\n-    {\n-      if (TARGET_PCREL) return \\\"bsr.l %o0\\\";\n-#ifdef MOTOROLA\n-#ifdef HPUX_ASM\n-      return \\\"bsr.l %0\\\";\n-#else\n-#ifdef USE_GAS\n-      return \\\"bsr.l %0@PLTPC\\\";\n-#else\n-      return \\\"bsr %0@PLTPC\\\";\n-#endif\n-#endif\n-#else\n-#ifdef USE_GAS\n-      return \\\"bsr.l %0\\\";\n-#else\n-      /* The ',a1' is a dummy argument telling the Sun assembler we want PIC,\n-\t GAS just plain ignores it.  FIXME: not anymore, gas doesn't!  */\n-      return \\\"jbsr %0,a1\\\";\n-#endif\n-#endif\n-    }\n-  return \\\"jsr %0\\\";\n+  m68k_output_pic_call(operands[0]);\n+  return \\\"\\\";\n \")\n \n ;; Call subroutine, returning value in operand 0\n@@ -6861,31 +6838,8 @@\n   ;; Operand 2 not really used on the m68000.\n   \"flag_pic\"\n   \"*\n-  if (GET_CODE (operands[1]) == MEM\n-      && GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF)\n-    {\n-      if (TARGET_PCREL) return \\\"bsr.l %o1\\\";\n-#ifdef MOTOROLA\n-#ifdef HPUX_ASM\n-      return \\\"bsr.l %1\\\";\n-#else\n-#ifdef USE_GAS\n-      return \\\"bsr.l %1@PLTPC\\\";\n-#else\n-      return \\\"bsr %1@PLTPC\\\";\n-#endif\n-#endif\n-#else\n-#ifdef USE_GAS\n-      return \\\"bsr.l %1\\\";\n-#else\n-      /* The ',a1' is a dummy argument telling the Sun assembler we want PIC\n-         GAS just plain ignores it.  FIXME: Not anymore, gas doesn't!  */\n-      return \\\"jbsr %1,a1\\\";\n-#endif\n-#endif\n-    }\n-  return \\\"jsr %1\\\";\n+  m68k_output_pic_call(operands[1]);\n+  return \\\"\\\";\n \")\n \n ;; Call subroutine returning any type."}]}