{"sha": "7d5997c66ce2a2463f8a911f6217c30759f765ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q1OTk3YzY2Y2UyYTI0NjNmOGE5MTFmNjIxN2MzMDc1OWY3NjVjZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-07-24T13:14:17Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-07-24T13:14:17Z"}, "message": "decl.c (gnat_to_gnu_entity): If the subprogram has copy-in copy-out parameters...\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Subprogram_Type>: If the\n\tsubprogram has copy-in copy-out parameters, try to promote the mode of\n\tthe return type if it is passed in registers.\n\nFrom-SVN: r176714", "tree": {"sha": "2f35d4c94eceb2298ff716cc0effe45080b9e450", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f35d4c94eceb2298ff716cc0effe45080b9e450"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d5997c66ce2a2463f8a911f6217c30759f765ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5997c66ce2a2463f8a911f6217c30759f765ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d5997c66ce2a2463f8a911f6217c30759f765ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5997c66ce2a2463f8a911f6217c30759f765ce/comments", "author": null, "committer": null, "parents": [{"sha": "4b4cfdd5e1104810953caefe50729f87e79239ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b4cfdd5e1104810953caefe50729f87e79239ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b4cfdd5e1104810953caefe50729f87e79239ec"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "d91f54f98ab5a76b1235d67ce492a5ca5c5dc342", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5997c66ce2a2463f8a911f6217c30759f765ce/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5997c66ce2a2463f8a911f6217c30759f765ce/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7d5997c66ce2a2463f8a911f6217c30759f765ce", "patch": "@@ -1,3 +1,9 @@\n+2011-07-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Subprogram_Type>: If the\n+\tsubprogram has copy-in copy-out parameters, try to promote the mode of\n+\tthe return type if it is passed in registers.\n+\n 2011-07-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils2.c (build_binary_op) <ARRAY_REF>: Do not mark the"}, {"sha": "99be625ecd15fc57dbc4a0c7d5cb86c262d017fe", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5997c66ce2a2463f8a911f6217c30759f765ce/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5997c66ce2a2463f8a911f6217c30759f765ce/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=7d5997c66ce2a2463f8a911f6217c30759f765ce", "patch": "@@ -4245,17 +4245,50 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t      }\n \t  }\n \n-\t/* Do not compute record for out parameters if subprogram is\n-\t   stubbed since structures are incomplete for the back-end.  */\n-\tif (gnu_field_list && Convention (gnat_entity) != Convention_Stubbed)\n-\t  finish_record_type (gnu_return_type, nreverse (gnu_field_list),\n-\t\t\t      0, debug_info_p);\n-\n-\t/* If we have a CICO list but it has only one entry, we convert\n-\t   this function into a function that simply returns that one\n-\t   object.  */\n-\tif (list_length (gnu_cico_list) == 1)\n-\t  gnu_return_type = TREE_TYPE (TREE_PURPOSE (gnu_cico_list));\n+\tif (gnu_cico_list)\n+\t  {\n+\t    /* If we have a CICO list but it has only one entry, we convert\n+\t       this function into a function that returns this object.  */\n+\t    if (list_length (gnu_cico_list) == 1)\n+\t      gnu_return_type = TREE_TYPE (TREE_PURPOSE (gnu_cico_list));\n+\n+\t    /* Do not finalize the return type if the subprogram is stubbed\n+\t       since structures are incomplete for the back-end.  */\n+\t    else if (Convention (gnat_entity) != Convention_Stubbed)\n+\t      {\n+\t\tfinish_record_type (gnu_return_type, nreverse (gnu_field_list),\n+\t\t\t\t    0, false);\n+\n+\t        /* Try to promote the mode of the return type if it is passed\n+\t\t   in registers, again to speed up accesses.  */\n+\t\tif (TYPE_MODE (gnu_return_type) == BLKmode\n+\t\t    && !targetm.calls.return_in_memory (gnu_return_type,\n+\t\t\t\t\t\t\tNULL_TREE))\n+\t\t  {\n+\t\t    unsigned int size\n+\t\t      = TREE_INT_CST_LOW (TYPE_SIZE (gnu_return_type));\n+\t\t    unsigned int i = BITS_PER_UNIT;\n+\t\t    enum machine_mode mode;\n+\n+\t\t    while (i < size)\n+\t\t      i <<= 1;\n+\t\t    mode = mode_for_size (i, MODE_INT, 0);\n+\t\t    if (mode != BLKmode)\n+\t\t      {\n+\t\t\tSET_TYPE_MODE (gnu_return_type, mode);\n+\t\t\tTYPE_ALIGN (gnu_return_type)\n+\t\t\t  = GET_MODE_ALIGNMENT (mode);\n+\t\t\tTYPE_SIZE (gnu_return_type)\n+\t\t\t  = bitsize_int (GET_MODE_BITSIZE (mode));\n+\t\t\tTYPE_SIZE_UNIT (gnu_return_type)\n+\t\t\t  = size_int (GET_MODE_SIZE (mode));\n+\t\t      }\n+\t\t  }\n+\n+\t        if (debug_info_p)\n+\t\t  rest_of_record_type_compilation (gnu_return_type);\n+\t      }\n+\t  }\n \n \tif (Has_Stdcall_Convention (gnat_entity))\n \t  prepend_one_attribute_to"}]}