{"sha": "f1a044c7da72e0e0a4895b7d2f53bbb4f62ba9d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFhMDQ0YzdkYTcyZTBlMGE0ODk1YjdkMmY1M2JiYjRmNjJiYTlkMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-08-07T00:52:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-08-07T00:52:24Z"}, "message": "c-common.c (c_expand_expr): If the last expression is a VAR_DECL with RTL that matches the target...\n\n        * c-common.c (c_expand_expr) [STMT_EXPR]: If the last expression is\n        a VAR_DECL with RTL that matches the target, just return that RTL.\n\nFrom-SVN: r56083", "tree": {"sha": "be1a74ada5638107e98d8f06fc6f84da9d73a275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be1a74ada5638107e98d8f06fc6f84da9d73a275"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1a044c7da72e0e0a4895b7d2f53bbb4f62ba9d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a044c7da72e0e0a4895b7d2f53bbb4f62ba9d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1a044c7da72e0e0a4895b7d2f53bbb4f62ba9d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a044c7da72e0e0a4895b7d2f53bbb4f62ba9d0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e14c7f083611e88101a7842faeb89abdea2a2a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e14c7f083611e88101a7842faeb89abdea2a2a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e14c7f083611e88101a7842faeb89abdea2a2a8"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "23f8caa6d8d1595b7269188b2b752feae557d013", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a044c7da72e0e0a4895b7d2f53bbb4f62ba9d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a044c7da72e0e0a4895b7d2f53bbb4f62ba9d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1a044c7da72e0e0a4895b7d2f53bbb4f62ba9d0", "patch": "@@ -1,3 +1,8 @@\n+2002-08-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-common.c (c_expand_expr) [STMT_EXPR]: If the last expression is\n+\ta VAR_DECL with RTL that matches the target, just return that RTL.\n+\n 2002-08-06  Dale Johannesen  <dalej@apple.com>\n \t* c-common.c (fname_decl): Use line number 0 for\n         __func__, to avoid confusing debuggers."}, {"sha": "30c38de04abf48054af95950d2aae7ada186174d", "filename": "gcc/c-common.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a044c7da72e0e0a4895b7d2f53bbb4f62ba9d0/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a044c7da72e0e0a4895b7d2f53bbb4f62ba9d0/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=f1a044c7da72e0e0a4895b7d2f53bbb4f62ba9d0", "patch": "@@ -4185,6 +4185,7 @@ c_expand_expr (exp, target, tmode, modifier)\n \ttree rtl_expr;\n \trtx result;\n \tbool preserve_result = false;\n+\tbool return_target = false;\n \n \t/* Since expand_expr_stmt calls free_temp_slots after every\n \t   expression statement, we must call push_temp_slots here.\n@@ -4212,16 +4213,30 @@ c_expand_expr (exp, target, tmode, modifier)\n \t    if (TREE_CODE (last) == SCOPE_STMT\n \t\t&& TREE_CODE (expr) == EXPR_STMT)\n \t      {\n-\t        TREE_ADDRESSABLE (expr) = 1;\n-\t\tpreserve_result = true;\n+\t\tif (target && TREE_CODE (EXPR_STMT_EXPR (expr)) == VAR_DECL\n+\t\t    && DECL_RTL_IF_SET (EXPR_STMT_EXPR (expr)) == target)\n+\t\t  /* If the last expression is a variable whose RTL is the\n+\t\t     same as our target, just return the target; if it\n+\t\t     isn't valid expanding the decl would produce different\n+\t\t     RTL, and store_expr would try to do a copy.  */\n+\t\t  return_target = true;\n+\t\telse\n+\t\t  {\n+\t\t    /* Otherwise, note that we want the value from the last\n+\t\t       expression.  */\n+\t\t    TREE_ADDRESSABLE (expr) = 1;\n+\t\t    preserve_result = true;\n+\t\t  }\n \t      }\n \t  }\n \n \texpand_stmt (STMT_EXPR_STMT (exp));\n \texpand_end_stmt_expr (rtl_expr);\n \n \tresult = expand_expr (rtl_expr, target, tmode, modifier);\n-\tif (preserve_result && GET_CODE (result) == MEM)\n+\tif (return_target)\n+\t  result = target;\n+\telse if (preserve_result && GET_CODE (result) == MEM)\n \t  {\n \t    if (GET_MODE (result) != BLKmode)\n \t      result = copy_to_reg (result);"}]}