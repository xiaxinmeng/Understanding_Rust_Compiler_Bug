{"sha": "392202b07dd6733e8adf84fecf439fb317dfcc2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkyMjAyYjA3ZGQ2NzMzZThhZGY4NGZlY2Y0MzlmYjMxN2RmY2MyYQ==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1993-04-22T11:48:29Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1993-04-22T11:48:29Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r4192", "tree": {"sha": "7a793af6ab099c84e140627bad2ce5a20f3f7aca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a793af6ab099c84e140627bad2ce5a20f3f7aca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/392202b07dd6733e8adf84fecf439fb317dfcc2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392202b07dd6733e8adf84fecf439fb317dfcc2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/392202b07dd6733e8adf84fecf439fb317dfcc2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392202b07dd6733e8adf84fecf439fb317dfcc2a/comments", "author": null, "committer": null, "parents": [{"sha": "a0825a7f0c1cab7489751528a818ca383a63798d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0825a7f0c1cab7489751528a818ca383a63798d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0825a7f0c1cab7489751528a818ca383a63798d"}], "stats": {"total": 59, "additions": 26, "deletions": 33}, "files": [{"sha": "bf2e56be6f67403b8ad0632641000ebf4b8a71e7", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392202b07dd6733e8adf84fecf439fb317dfcc2a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392202b07dd6733e8adf84fecf439fb317dfcc2a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=392202b07dd6733e8adf84fecf439fb317dfcc2a", "patch": "@@ -461,7 +461,8 @@ comptypes (type1, type2)\n       }\n \n     case RECORD_TYPE:\n-      return maybe_objc_comptypes (t1, t2, 0);\n+      if (maybe_objc_comptypes (t1, t2, 0) == 1)\n+\treturn 1;\n     }\n   return 0;\n }\n@@ -473,29 +474,14 @@ static int\n comp_target_types (ttl, ttr)\n      tree ttl, ttr;\n {\n-  int val = 0;\n-\n-  if (doing_objc_thang)\n-    {\n-      /* Give maybe_objc_comptypes a crack at letting these types through.  */\n-      val = maybe_objc_comptypes (ttl, ttr, 1);\n+  int val;\n \n-      if (val != 1 && !pedantic)\n-\t{\n-\t  /* Ignore pointer qualifiers recursively.  This way char **\n-\t     and const char ** are compatible.  */\n-\t  if (TREE_CODE (ttl) == POINTER_TYPE\n-\t      && TREE_CODE (ttr) == POINTER_TYPE)\n-\t    return comp_target_types (TYPE_MAIN_VARIANT (TREE_TYPE (ttl)),\n-\t\t\t\t      TYPE_MAIN_VARIANT (TREE_TYPE (ttr)));\n-\t  else\n-\t    return comptypes (ttl, ttr);\n-\t}\n-    }\n+  /* Give maybe_objc_comptypes a crack at letting these types through.  */\n+  if (val = maybe_objc_comptypes (ttl, ttr, 1) >= 0)\n+    return val;\n \n-  if (val != 1)\n-    val = comptypes (TYPE_MAIN_VARIANT (TREE_TYPE (ttl)),\n-\t\t     TYPE_MAIN_VARIANT (TREE_TYPE (ttr)));\n+  val = comptypes (TYPE_MAIN_VARIANT (TREE_TYPE (ttl)),\n+\t\t   TYPE_MAIN_VARIANT (TREE_TYPE (ttr)));\n \n   if (val == 2 && pedantic)\n     pedwarn (\"types are not quite compatible\");"}, {"sha": "ec4cf3c92389cf7babcea0377b7610811e9b569d", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392202b07dd6733e8adf84fecf439fb317dfcc2a/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392202b07dd6733e8adf84fecf439fb317dfcc2a/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=392202b07dd6733e8adf84fecf439fb317dfcc2a", "patch": "@@ -577,15 +577,17 @@ define_decl (declarator, declspecs)\n   return decl;\n }\n \n-/* Rules for statically typed objects.  Called from comptypes,\n-   convert_for_assignment, and comp_target_types.\n+/* Return 1 if LHS and RHS are compatible types for assignment or\n+   various other operations.  Return 0 if they are incompatible, and\n+   return -1 if we choose to not decide.  When the operation is\n+   REFLEXIVE, check for compatibility in either direction.\n \n-   An assignment of the form `a' = `b' is permitted if:\n+   For statically typed objects, an assignment of the form `a' = `b'\n+   is permitted if:\n \n-   - `a' is of type \"id\".\n-   - `a' and `b' are the same class type.\n-   - `a' and `b' are of class types A and B such that B is a descendant\n-     of A.  */\n+   `a' is of type \"id\",\n+   `a' and `b' are the same class type, or\n+   `a' and `b' are of class types A and B such that B is a descendant of A.  */\n \n int\n maybe_objc_comptypes (lhs, rhs, reflexive)\n@@ -594,7 +596,7 @@ maybe_objc_comptypes (lhs, rhs, reflexive)\n {\n   if (doing_objc_thang)\n     return objc_comptypes (lhs, rhs, reflexive);\n-  return 0;\n+  return -1;\n }\n \n static tree\n@@ -662,6 +664,11 @@ lookup_protocol_in_reflist (rproto_list, lproto)\n    return 0;\n }\n \n+/* Return 1 if LHS and RHS are compatible types for assignment\n+   or various other operations.  Return 0 if they are incompatible,\n+   and return -1 if we choose to not decide.  When the operation\n+   is REFLEXIVE, check for compatibility in either direction.  */\n+\n int\n objc_comptypes (lhs, rhs, reflexive)\n      tree lhs;\n@@ -752,12 +759,12 @@ objc_comptypes (lhs, rhs, reflexive)\n \t    return 1;\t/* one of the types is a protocol */\n \t}\n       else\n-\treturn 2;\t/* defer to comptypes */\n+\treturn -1;\t/* defer to comptypes */\n     }\n   else if (TREE_CODE (lhs) == RECORD_TYPE && TREE_CODE (rhs) == RECORD_TYPE)\n     ; /* fall thru...this is the case we have been handling all along */\n   else\n-    return 2;\t/* defer to comptypes */\n+    return -1;\t/* defer to comptypes */\n \n   /* End of new protocol support.  */\n \n@@ -803,7 +810,7 @@ objc_comptypes (lhs, rhs, reflexive)\n       return 0;\n     }\n   else\n-    return 0;\n+    return -1;\t/* defer to comptypes */\n }\n \n /* Called from c-decl.c before all calls to rest_of_decl_compilation.  */"}]}