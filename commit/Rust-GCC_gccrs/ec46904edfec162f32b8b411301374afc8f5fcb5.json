{"sha": "ec46904edfec162f32b8b411301374afc8f5fcb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM0NjkwNGVkZmVjMTYyZjMyYjhiNDExMzAxMzc0YWZjOGY1ZmNiNQ==", "commit": {"author": {"name": "Joel Hutton", "email": "joel.hutton@arm.com", "date": "2020-11-19T10:28:38Z"}, "committer": {"name": "Joel Hutton", "email": "joel.hutton@arm.com", "date": "2020-11-19T11:47:43Z"}, "message": "[1/3][aarch64] Add vec_widen patterns to aarch64\n\nAdd widening add and subtract patterns to the aarch64\nbackend. These allow taking vectors of N elements of size S\nand performing and add/subtract on the high or low half\nwidening the resulting elements and storing N/2 elements of size 2*S.\nThese correspond to the addl,addl2,subl,subl2 instructions.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd.md: New patterns\n\tvec_widen_saddl_lo/hi_<mode>.", "tree": {"sha": "cde918f2fcb2d7f08459b35602ca54297f71bbd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cde918f2fcb2d7f08459b35602ca54297f71bbd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec46904edfec162f32b8b411301374afc8f5fcb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec46904edfec162f32b8b411301374afc8f5fcb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec46904edfec162f32b8b411301374afc8f5fcb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec46904edfec162f32b8b411301374afc8f5fcb5/comments", "author": {"login": "JoelHutton", "id": 4455754, "node_id": "MDQ6VXNlcjQ0NTU3NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4455754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoelHutton", "html_url": "https://github.com/JoelHutton", "followers_url": "https://api.github.com/users/JoelHutton/followers", "following_url": "https://api.github.com/users/JoelHutton/following{/other_user}", "gists_url": "https://api.github.com/users/JoelHutton/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoelHutton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoelHutton/subscriptions", "organizations_url": "https://api.github.com/users/JoelHutton/orgs", "repos_url": "https://api.github.com/users/JoelHutton/repos", "events_url": "https://api.github.com/users/JoelHutton/events{/privacy}", "received_events_url": "https://api.github.com/users/JoelHutton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoelHutton", "id": 4455754, "node_id": "MDQ6VXNlcjQ0NTU3NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4455754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoelHutton", "html_url": "https://github.com/JoelHutton", "followers_url": "https://api.github.com/users/JoelHutton/followers", "following_url": "https://api.github.com/users/JoelHutton/following{/other_user}", "gists_url": "https://api.github.com/users/JoelHutton/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoelHutton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoelHutton/subscriptions", "organizations_url": "https://api.github.com/users/JoelHutton/orgs", "repos_url": "https://api.github.com/users/JoelHutton/repos", "events_url": "https://api.github.com/users/JoelHutton/events{/privacy}", "received_events_url": "https://api.github.com/users/JoelHutton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec383f0bdb4077b744d493d02afff5f13f33029e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec383f0bdb4077b744d493d02afff5f13f33029e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec383f0bdb4077b744d493d02afff5f13f33029e"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "e8c951fe55e2698e47f25eb4376790b7e144ed15", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec46904edfec162f32b8b411301374afc8f5fcb5/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec46904edfec162f32b8b411301374afc8f5fcb5/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=ec46904edfec162f32b8b411301374afc8f5fcb5", "patch": "@@ -3382,6 +3382,53 @@\n   [(set_attr \"type\" \"neon_<ADDSUB:optab>_long\")]\n )\n \n+(define_expand \"vec_widen_<su>addl_lo_<mode>\"\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (ANY_EXTEND:<VWIDE> (match_operand:VQW 1 \"register_operand\"))\n+   (ANY_EXTEND:<VWIDE> (match_operand:VQW 2 \"register_operand\"))]\n+  \"TARGET_SIMD\"\n+{\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n+  emit_insn (gen_aarch64_<su>addl<mode>_lo_internal (operands[0], operands[1],\n+\t\t\t\t\t\t     operands[2], p));\n+  DONE;\n+})\n+\n+(define_expand \"vec_widen_<su>addl_hi_<mode>\"\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (ANY_EXTEND:<VWIDE> (match_operand:VQW 1 \"register_operand\"))\n+   (ANY_EXTEND:<VWIDE> (match_operand:VQW 2 \"register_operand\"))]\n+  \"TARGET_SIMD\"\n+{\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n+  emit_insn (gen_aarch64_<su>addl<mode>_hi_internal (operands[0], operands[1],\n+\t\t\t\t\t\t     operands[2], p));\n+  DONE;\n+})\n+\n+(define_expand \"vec_widen_<su>subl_lo_<mode>\"\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (ANY_EXTEND:<VWIDE> (match_operand:VQW 1 \"register_operand\"))\n+   (ANY_EXTEND:<VWIDE> (match_operand:VQW 2 \"register_operand\"))]\n+  \"TARGET_SIMD\"\n+{\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n+  emit_insn (gen_aarch64_<su>subl<mode>_lo_internal (operands[0], operands[1],\n+\t\t\t\t\t\t     operands[2], p));\n+  DONE;\n+})\n+\n+(define_expand \"vec_widen_<su>subl_hi_<mode>\"\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (ANY_EXTEND:<VWIDE> (match_operand:VQW 1 \"register_operand\"))\n+   (ANY_EXTEND:<VWIDE> (match_operand:VQW 2 \"register_operand\"))]\n+  \"TARGET_SIMD\"\n+{\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n+  emit_insn (gen_aarch64_<su>subl<mode>_hi_internal (operands[0], operands[1],\n+\t\t\t\t\t\t     operands[2], p));\n+  DONE;\n+})\n \n (define_expand \"aarch64_saddl2<mode>\"\n   [(match_operand:<VWIDE> 0 \"register_operand\")"}]}