{"sha": "b59e90711fdd29e707a9a071f14efdaee7d70d1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU5ZTkwNzExZmRkMjllNzA3YTlhMDcxZjE0ZWZkYWVlN2Q3MGQxYQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2012-03-28T20:45:16Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2012-03-28T20:45:16Z"}, "message": "re PR fortran/52652 (call to gfc_match_asynchronous for allocatable at parse.c line 164)\n\n2012-03-28  Paul Thomas  <pault@gcc.gnu.org>\n\tTobias Burnus  <burnus@gcc.gnu.org>\n\n\tPR fortran/52652\n\t* match.c (gfc_match_allocate, gfc_match_deallocate): Change\n\t\"not.. or\" to \"neither.. nor\".\n\t* parse.c (decode_specification_statement): Correct error in\n\tchpice of matching function for \"allocatable\". \n\n2012-03-28  Paul Thomas  <pault@gcc.gnu.org>\n\tTobias Burnus  <burnus@gcc.gnu.org>\n\n\tPR fortran/52652\n\t* gfortran.dg/allocate_class_1.f90 : Change error test.\n\t* gfortran.dg/allocate_with_typespec_4.f90 : Change error test.\n\t* gfortran.dg/allocate_alloc_opt_1.f90 : Change error test.\n\t* gfortran.dg/deallocate_alloc_opt_1.f90 : Change error test.\n\n\nCo-Authored-By: Tobias Burnus <burnus@gcc.gnu.org>\n\nFrom-SVN: r185924", "tree": {"sha": "9f2a72800c06dbd5712fa0b41c9af5c638df17a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f2a72800c06dbd5712fa0b41c9af5c638df17a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b59e90711fdd29e707a9a071f14efdaee7d70d1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b59e90711fdd29e707a9a071f14efdaee7d70d1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b59e90711fdd29e707a9a071f14efdaee7d70d1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b59e90711fdd29e707a9a071f14efdaee7d70d1a/comments", "author": null, "committer": null, "parents": [{"sha": "32e8bfc3f649f51969aa3ca63df162df25f5b9c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e8bfc3f649f51969aa3ca63df162df25f5b9c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32e8bfc3f649f51969aa3ca63df162df25f5b9c8"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "4a79df8d1eff22077e91c1fb3ae37c961638e1fe", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59e90711fdd29e707a9a071f14efdaee7d70d1a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59e90711fdd29e707a9a071f14efdaee7d70d1a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b59e90711fdd29e707a9a071f14efdaee7d70d1a", "patch": "@@ -1,3 +1,12 @@\n+2012-03-28  Paul Thomas  <pault@gcc.gnu.org>\n+\tTobias Burnus  <burnus@gcc.gnu.org>\n+\n+\tPR fortran/52652\n+\t* match.c (gfc_match_allocate, gfc_match_deallocate): Change\n+\t\"not.. or\" to \"neither.. nor\".\n+\t* parse.c (decode_specification_statement): Correct error in\n+\tchpice of matching function for \"allocatable\". \n+\n 2012-03-23  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* gfortran.h (GFC_MAX_LINE): Remove unused macro."}, {"sha": "15edfc36db1eff20d4b19f073cf389bcf8c4810f", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59e90711fdd29e707a9a071f14efdaee7d70d1a/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59e90711fdd29e707a9a071f14efdaee7d70d1a/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=b59e90711fdd29e707a9a071f14efdaee7d70d1a", "patch": "@@ -3572,8 +3572,8 @@ gfc_match_allocate (void)\n \t\t|| sym->ns->proc_name->attr.proc_pointer);\n       if (b1 && b2 && !b3)\n \t{\n-\t  gfc_error (\"Allocate-object at %L is not a nonprocedure pointer \"\n-\t\t     \"or an allocatable variable\", &tail->expr->where);\n+\t  gfc_error (\"Allocate-object at %L is neither a nonprocedure pointer \"\n+\t\t     \"nor an allocatable variable\", &tail->expr->where);\n \t  goto cleanup;\n \t}\n \n@@ -3904,7 +3904,7 @@ gfc_match_deallocate (void)\n       if (b1 && b2)\n \t{\n \t  gfc_error (\"Allocate-object at %C is not a nonprocedure pointer \"\n-\t\t     \"or an allocatable variable\");\n+\t\t     \"nor an allocatable variable\");\n \t  goto cleanup;\n \t}\n "}, {"sha": "4e7f691e6309afd390059e2c282f5df401e99b31", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59e90711fdd29e707a9a071f14efdaee7d70d1a/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59e90711fdd29e707a9a071f14efdaee7d70d1a/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=b59e90711fdd29e707a9a071f14efdaee7d70d1a", "patch": "@@ -161,7 +161,7 @@ decode_specification_statement (void)\n     case 'a':\n       match (\"abstract% interface\", gfc_match_abstract_interface,\n \t     ST_INTERFACE);\n-      match (\"allocatable\", gfc_match_asynchronous, ST_ATTR_DECL);\n+      match (\"allocatable\", gfc_match_allocatable, ST_ATTR_DECL);\n       match (\"asynchronous\", gfc_match_asynchronous, ST_ATTR_DECL);\n       break;\n "}, {"sha": "945e50795db40cf8389751ff1d7590b4e7874e05", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59e90711fdd29e707a9a071f14efdaee7d70d1a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59e90711fdd29e707a9a071f14efdaee7d70d1a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b59e90711fdd29e707a9a071f14efdaee7d70d1a", "patch": "@@ -1,3 +1,12 @@\n+2012-03-28  Paul Thomas  <pault@gcc.gnu.org>\n+\tTobias Burnus  <burnus@gcc.gnu.org>\n+\n+\tPR fortran/52652\n+\t* gfortran.dg/allocate_class_1.f90 : Change error test.\n+\t* gfortran.dg/allocate_with_typespec_4.f90 : Change error test.\n+\t* gfortran.dg/allocate_alloc_opt_1.f90 : Change error test.\n+\t* gfortran.dg/deallocate_alloc_opt_1.f90 : Change error test.\n+\n 2012-03-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/52691"}, {"sha": "3a05e8cff02fe9c7a7f3e4229fbce96f51410f18", "filename": "gcc/testsuite/gfortran.dg/allocate_alloc_opt_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59e90711fdd29e707a9a071f14efdaee7d70d1a/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59e90711fdd29e707a9a071f14efdaee7d70d1a/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_1.f90?ref=b59e90711fdd29e707a9a071f14efdaee7d70d1a", "patch": "@@ -24,7 +24,7 @@ program a\n   allocate(i(2), errmsg=err) ! { dg-warning \"useless without a STAT\" }\n   allocate(i(2), stat=j, errmsg=x) ! { dg-error \"must be a scalar CHARACTER\" }\n \n-  allocate(err) ! { dg-error \"nonprocedure pointer or an allocatable\" }\n+  allocate(err) ! { dg-error \"neither a nonprocedure pointer nor an allocatable\" }\n \n   allocate(error(2),stat=j,errmsg=error(1)) ! { dg-error \"shall not be ALLOCATEd within\" }\n   allocate(i(2), stat = i(1))  ! { dg-error \"shall not be ALLOCATEd within\" }"}, {"sha": "9a2a5cb2538c95da41307a841f80a94f84aacebf", "filename": "gcc/testsuite/gfortran.dg/allocate_class_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59e90711fdd29e707a9a071f14efdaee7d70d1a/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_class_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59e90711fdd29e707a9a071f14efdaee7d70d1a/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_class_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_class_1.f90?ref=b59e90711fdd29e707a9a071f14efdaee7d70d1a", "patch": "@@ -7,5 +7,5 @@\n  type :: t0\n  end type\n  class(t0) :: x  ! { dg-error \"must be dummy, allocatable or pointer\" }\n- allocate(x)     ! { dg-error \"is not a nonprocedure pointer or an allocatable variable\" }\n+ allocate(x)     ! { dg-error \"is neither a nonprocedure pointer nor an allocatable variable\" }\n  end"}, {"sha": "54ed109fc24c45309f01a261cf56c0afaf0f259d", "filename": "gcc/testsuite/gfortran.dg/allocate_with_typespec_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59e90711fdd29e707a9a071f14efdaee7d70d1a/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59e90711fdd29e707a9a071f14efdaee7d70d1a/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_4.f90?ref=b59e90711fdd29e707a9a071f14efdaee7d70d1a", "patch": "@@ -21,7 +21,7 @@ subroutine not_an_f03_intrinsic\n    allocate(real*8 :: y(1))       ! { dg-error \"Invalid type-spec at\" }\n    allocate(real*4 :: x8)         ! { dg-error \"Invalid type-spec at\" }\n    allocate(real*4 :: y8(1))      ! { dg-error \"Invalid type-spec at\" }\n-   allocate(double complex :: d1) ! { dg-error \"not a nonprocedure pointer or an allocatable\" }\n+   allocate(double complex :: d1) ! { dg-error \"neither a nonprocedure pointer nor an allocatable\" }\n    allocate(real_type :: b)\n    allocate(real_type :: c(1))\n "}, {"sha": "969ce257efe96e15d27203bb1dbe240750a6520a", "filename": "gcc/testsuite/gfortran.dg/deallocate_alloc_opt_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59e90711fdd29e707a9a071f14efdaee7d70d1a/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeallocate_alloc_opt_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59e90711fdd29e707a9a071f14efdaee7d70d1a/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeallocate_alloc_opt_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeallocate_alloc_opt_1.f90?ref=b59e90711fdd29e707a9a071f14efdaee7d70d1a", "patch": "@@ -24,7 +24,7 @@ program a\n   deallocate(i, errmsg=err) ! { dg-warning \"useless without a STAT\" }\n   deallocate(i, stat=j, errmsg=x) ! { dg-error \"must be a scalar CHARACTER\" }\n \n-  deallocate(err) ! { dg-error \"nonprocedure pointer or an allocatable\" }\n+  deallocate(err) ! { dg-error \"nonprocedure pointer nor an allocatable\" }\n \n   deallocate(error,stat=j,errmsg=error(1)) ! { dg-error \"shall not be DEALLOCATEd within\" }\n   deallocate(i, stat = i(1))  ! { dg-error \"shall not be DEALLOCATEd within\" }"}]}