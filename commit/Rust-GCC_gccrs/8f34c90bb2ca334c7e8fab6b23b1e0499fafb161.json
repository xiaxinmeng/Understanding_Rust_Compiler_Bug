{"sha": "8f34c90bb2ca334c7e8fab6b23b1e0499fafb161", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYzNGM5MGJiMmNhMzM0YzdlOGZhYjZiMjNiMWUwNDk5ZmFmYjE2MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:03:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:03:43Z"}, "message": "[multiple changes]\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Same_Value): String literals are compile-time\n\tvalues, and comparing them must use Expr_Value_S.\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Complete_Object_Interpretation): If an explicit\n\tdereference is introduced for the object, and the object is\n\toverloaded, do not check whether it is aliased, because it may\n\tinclude an implicit dereference.\n\t* sem_type.adb (Disambiguate): If two interpretations are access\n\tattribute types with the same designated type keep either of\n\tthem and do not report an ambiguity.  A true ambiguity will be\n\treported elsewhere.\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* a-numeri.ads: Change the encoding of Greek letter Pi from\n\tbrackets encoding to UTF-8.  Use pragma Wide_Character_Encoding\n\tto indicate the encoding. We considered using a byte order mark\n\t(BOM), but that causes various trouble (misc software eats the\n\tBOM, if you have a patch with a BOM, then it's not at the start\n\tof the patch, so it's not a BOM, the BOM affects with-ing files,\n\tetc.).\n\t* scng.adb, s-wchcnv.adb: Minor.\n\n2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch3.adb, sem_ch8.adb, sem_disp.adb: Minor reformatting.\n\nFrom-SVN: r247197", "tree": {"sha": "8436bb18ba169fa04c104b935b606d39f87419e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8436bb18ba169fa04c104b935b606d39f87419e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/comments", "author": null, "committer": null, "parents": [{"sha": "4f9c5d5c4892e584a42b98f8d8643ce0b7b76490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f9c5d5c4892e584a42b98f8d8643ce0b7b76490", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f9c5d5c4892e584a42b98f8d8643ce0b7b76490"}], "stats": {"total": 102, "additions": 84, "deletions": 18}, "files": [{"sha": "e5f69a10e852e49bead3cd48e136e61c1c01e60c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8f34c90bb2ca334c7e8fab6b23b1e0499fafb161", "patch": "@@ -1,5 +1,35 @@\n 2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n \n+\t* sem_util.adb (Same_Value): String literals are compile-time\n+\tvalues, and comparing them must use Expr_Value_S.\n+\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Complete_Object_Interpretation): If an explicit\n+\tdereference is introduced for the object, and the object is\n+\toverloaded, do not check whether it is aliased, because it may\n+\tinclude an implicit dereference.\n+\t* sem_type.adb (Disambiguate): If two interpretations are access\n+\tattribute types with the same designated type keep either of\n+\tthem and do not report an ambiguity.  A true ambiguity will be\n+\treported elsewhere.\n+\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* a-numeri.ads: Change the encoding of Greek letter Pi from\n+\tbrackets encoding to UTF-8.  Use pragma Wide_Character_Encoding\n+\tto indicate the encoding. We considered using a byte order mark\n+\t(BOM), but that causes various trouble (misc software eats the\n+\tBOM, if you have a patch with a BOM, then it's not at the start\n+\tof the patch, so it's not a BOM, the BOM affects with-ing files,\n+\tetc.).\n+\t* scng.adb, s-wchcnv.adb: Minor.\n+\n+2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch3.adb, sem_ch8.adb, sem_disp.adb: Minor reformatting.\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n \t* sem_ch3.adb (Add_Internal_Interface_Entities): Move\n \tHas_Non_Trivial_Precondition to sem_util. for use elsewhere.\n \tImprove error message on operations that inherit non-conforming"}, {"sha": "c4f4f848b55a1b8121be0d703ff9c60c0041e538", "filename": "gcc/ada/a-numeri.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fa-numeri.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fa-numeri.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numeri.ads?ref=8f34c90bb2ca334c7e8fab6b23b1e0499fafb161", "patch": "@@ -18,14 +18,20 @@ package Ada.Numerics is\n \n    Argument_Error : exception;\n \n+   pragma Wide_Character_Encoding (UTF8);\n+   --  For the Greek letter Pi below. Note that this pragma cannot immediately\n+   --  precede that character, because then the encoding gets set too late.\n+\n    Pi : constant :=\n           3.14159_26535_89793_23846_26433_83279_50288_41971_69399_37511;\n \n-   [\"03C0\"] : constant := Pi;\n+   \u03c0 : constant := Pi;\n    --  This is the Greek letter Pi (for Ada 2005 AI-388). Note that it is\n    --  conforming to have this constant present even in Ada 95 mode, as there\n    --  is no way for a normal mode Ada 95 program to reference this identifier.\n \n+   pragma Wide_Character_Encoding (BRACKETS);\n+\n    e : constant :=\n          2.71828_18284_59045_23536_02874_71352_66249_77572_47093_69996;\n "}, {"sha": "ffbb991b2da23b8a450a726f11620fe73691e3a1", "filename": "gcc/ada/s-wchcnv.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fs-wchcnv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fs-wchcnv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-wchcnv.adb?ref=8f34c90bb2ca334c7e8fab6b23b1e0499fafb161", "patch": "@@ -93,7 +93,7 @@ package body System.WCh_Cnv is\n          W := Shift_Left (W, 6) or (U and 2#00111111#);\n       end Get_UTF_Byte;\n \n-   --  Start of processing for Char_Sequence_To_Wide\n+   --  Start of processing for Char_Sequence_To_UTF_32\n \n    begin\n       case EM is"}, {"sha": "2b35c9a0260f4969207cd862babd089a52ef191c", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=8f34c90bb2ca334c7e8fab6b23b1e0499fafb161", "patch": "@@ -2533,10 +2533,12 @@ package body Scng is\n \n       --  End loop past format effectors. The exit from this loop is by\n       --  executing a return statement following completion of token scan\n-      --  (control never falls out of this loop to the code which follows)\n+      --  (control never falls out of this loop to the code that follows).\n \n       end loop;\n \n+      pragma Assert (False);\n+\n       --  Wide_Character scanning routine. On entry we have encountered the\n       --  initial character of a wide character sequence.\n "}, {"sha": "464900f015e77f67462c9b152b05f59f3cdd0b7b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=8f34c90bb2ca334c7e8fab6b23b1e0499fafb161", "patch": "@@ -1737,19 +1737,21 @@ package body Sem_Ch3 is\n                     and then Has_Non_Trivial_Precondition (Iface_Prim)\n                   then\n                      if Is_Abstract_Subprogram (Prim)\n-                       or else (Ekind (Prim) = E_Procedure\n-                         and then\n-                           Nkind (Parent (Prim)) = N_Procedure_Specification\n-                         and then Null_Present (Parent (Prim)))\n+                       or else\n+                         (Ekind (Prim) = E_Procedure\n+                           and then Nkind (Parent (Prim)) =\n+                                      N_Procedure_Specification\n+                           and then Null_Present (Parent (Prim)))\n                      then\n                         null;\n \n                      --  The inherited operation must be overridden\n \n                      elsif not Comes_From_Source (Prim) then\n-                        Error_Msg_NE (\"&inherits non-conforming preconditions \"\n-                          & \"and must be overridden (RM 6.1.1 (10-16)\",\n-                            Parent (Tagged_Type), Prim);\n+                        Error_Msg_NE\n+                          (\"&inherits non-conforming preconditions and must \"\n+                           & \"be overridden (RM 6.1.1 (10-16)\",\n+                           Parent (Tagged_Type), Prim);\n                      end if;\n                   end if;\n                end;"}, {"sha": "d7aba502cf23a41ee438b61f0d76613267a219d8", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=8f34c90bb2ca334c7e8fab6b23b1e0499fafb161", "patch": "@@ -8448,7 +8448,12 @@ package body Sem_Ch4 is\n                 Attribute_Name => Name_Access,\n                 Prefix => Relocate_Node (Obj)));\n \n-            if not Is_Aliased_View (Obj) then\n+            --  If the object is not overloaded verify that taking access of\n+            --  it is legal. Otherwise check is made during resolution.\n+\n+            if not Is_Overloaded (Obj)\n+              and then not Is_Aliased_View (Obj)\n+            then\n                Error_Msg_NE\n                  (\"object in prefixed call to & must be aliased \"\n                   & \"(RM 4.1.3 (13 1/2))\", Prefix (First_Actual), Subprog);"}, {"sha": "a5c9d4cb921d3a6a076b0de36b9cd9136d491a9e", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=8f34c90bb2ca334c7e8fab6b23b1e0499fafb161", "patch": "@@ -3197,11 +3197,12 @@ package body Sem_Ch8 is\n          begin\n             if Present (Prev)\n               and then\n-                 (Has_Non_Trivial_Precondition (Prev)\n-                    or else Has_Non_Trivial_Precondition (Old_S))\n+                (Has_Non_Trivial_Precondition (Prev)\n+                  or else Has_Non_Trivial_Precondition (Old_S))\n             then\n-               Error_Msg_NE (\"conflicting inherited classwide preconditions \"\n-                 & \"in renaming of& (RM 6.1.1 (17)\", N, Old_S);\n+               Error_Msg_NE\n+                 (\"conflicting inherited classwide preconditions in renaming \"\n+                  & \"of& (RM 6.1.1 (17)\", N, Old_S);\n             end if;\n          end;\n       end if;"}, {"sha": "68e3e1e33562ec9792a63e00b3b4d65eda15a874", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=8f34c90bb2ca334c7e8fab6b23b1e0499fafb161", "patch": "@@ -575,7 +575,7 @@ package body Sem_Disp is\n             --  but will be legal in overridings of the operation.\n \n             elsif (Is_Subprogram (Scop)\n-                  or else Chars (Scop) = Name_Postcondition)\n+                    or else Chars (Scop) = Name_Postcondition)\n               and then\n                 (Is_Abstract_Subprogram (Scop)\n                   or else"}, {"sha": "d14535a768a632335e80e5a56fbb56833bf71c32", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=8f34c90bb2ca334c7e8fab6b23b1e0499fafb161", "patch": "@@ -1933,6 +1933,18 @@ package body Sem_Type is\n             return No_Interp;\n          end if;\n \n+      --  Two access attribute types may have been created for an expression\n+      --  with an implicit dereference, which is automatically overloaded.\n+      --  If both access attribute types designate the same object type,\n+      --  disambiguation if any will take place elsewhere, so keep any one of\n+      --  the interpretations.\n+\n+      elsif Ekind (It1.Typ) = E_Access_Attribute_Type\n+        and then Ekind (It2.Typ) = E_Access_Attribute_Type\n+        and then Designated_Type (It1.Typ) = Designated_Type (It2.Typ)\n+      then\n+         return It1;\n+\n       --  If two user defined-subprograms are visible, it is a true ambiguity,\n       --  unless one of them is an entry and the context is a conditional or\n       --  timed entry call, or unless we are within an instance and this is"}, {"sha": "753098c0c1aa9a7cf52a4965de46b0fc48aae69b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f34c90bb2ca334c7e8fab6b23b1e0499fafb161/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=8f34c90bb2ca334c7e8fab6b23b1e0499fafb161", "patch": "@@ -20102,9 +20102,17 @@ package body Sem_Util is\n    begin\n       if Compile_Time_Known_Value (Node1)\n         and then Compile_Time_Known_Value (Node2)\n-        and then Expr_Value (Node1) = Expr_Value (Node2)\n       then\n-         return True;\n+         --  Handle properly compile-time expressions that are not\n+         --  scalar.\n+\n+         if Is_String_Type (Etype (Node1)) then\n+            return Expr_Value_S (Node1) = Expr_Value_S (Node2);\n+\n+         else\n+            return Expr_Value (Node1) = Expr_Value (Node2);\n+         end if;\n+\n       elsif Same_Object (Node1, Node2) then\n          return True;\n       else"}]}