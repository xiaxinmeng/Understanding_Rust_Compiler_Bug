{"sha": "b6448565bdd687f0a558372c40373f59643d62b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0NDg1NjViZGQ2ODdmMGE1NTgzNzJjNDAzNzNmNTk2NDNkNjJiMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-05T18:43:47Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-05T18:43:47Z"}, "message": "function.c (assign_parm_setup_reg): Properly rename variables in FUNCTION_ARG_CALLEE_COPIES section.\n\n        * function.c (assign_parm_setup_reg): Properly rename variables in\n        FUNCTION_ARG_CALLEE_COPIES section.\n\nFrom-SVN: r84128", "tree": {"sha": "c3acd1cdb9dab61bca0da69e4f310b91701d9016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3acd1cdb9dab61bca0da69e4f310b91701d9016"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6448565bdd687f0a558372c40373f59643d62b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6448565bdd687f0a558372c40373f59643d62b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6448565bdd687f0a558372c40373f59643d62b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6448565bdd687f0a558372c40373f59643d62b3/comments", "author": null, "committer": null, "parents": [{"sha": "cb42deba630aa917d269db57f4aaf6e93d9106da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb42deba630aa917d269db57f4aaf6e93d9106da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb42deba630aa917d269db57f4aaf6e93d9106da"}], "stats": {"total": 62, "additions": 34, "deletions": 28}, "files": [{"sha": "cce5964af42b5ae73ddb71a0aa77d6eb687f02fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6448565bdd687f0a558372c40373f59643d62b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6448565bdd687f0a558372c40373f59643d62b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6448565bdd687f0a558372c40373f59643d62b3", "patch": "@@ -1,3 +1,8 @@\n+2004-07-05  Richard Henderson  <rth@redhat.com>\n+\n+\t* function.c (assign_parm_setup_reg): Properly rename variables in\n+\tFUNCTION_ARG_CALLEE_COPIES section.\n+\n 2004-07-05  Zack Weinberg  <zack@codesourcery.com>\n \n \t* tree-mudflap.c: Include cgraph.h."}, {"sha": "efeb9f6b24ae4cce905b0ad7d9003b82fc2c2f04", "filename": "gcc/function.c", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6448565bdd687f0a558372c40373f59643d62b3/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6448565bdd687f0a558372c40373f59643d62b3/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b6448565bdd687f0a558372c40373f59643d62b3", "patch": "@@ -2860,40 +2860,41 @@ assign_parm_setup_reg (struct assign_parm_data_all *all, tree parm,\n   /* ??? Later add code to handle the case that if the argument isn't\n      modified, don't do the copy.  */\n \n-  else if (data->passed_pointer\n-\t   && FUNCTION_ARG_CALLEE_COPIES (all->args_so_far,\n-\t\t\t\t\t  TYPE_MODE (TREE_TYPE (passed_type)),\n-\t\t\t\t\t  TREE_TYPE (passed_type),\n-\t\t\t\t\t  data->named_arg)\n-\t   && ! TREE_ADDRESSABLE (TREE_TYPE (passed_type)))\n+  else if (data->passed_pointer)\n     {\n-      rtx copy;\n-      tree type = TREE_TYPE (passed_type);\n+      tree type = TREE_TYPE (data->passed_type);\n+    \n+      if (FUNCTION_ARG_CALLEE_COPIES (all->args_so_far, TYPE_MODE (type),\n+\t\t\t\t      type, data->named_arg)\n+\t   && !TREE_ADDRESSABLE (type))\n+\t{\n+\t  rtx copy;\n \n-      /* This sequence may involve a library call perhaps clobbering\n-\t registers that haven't been copied to pseudos yet.  */\n+\t  /* This sequence may involve a library call perhaps clobbering\n+\t     registers that haven't been copied to pseudos yet.  */\n \n-      push_to_sequence (all->conversion_insns);\n+\t  push_to_sequence (all->conversion_insns);\n \n-      if (!COMPLETE_TYPE_P (type)\n-\t  || TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n-\t{\n-\t  /* This is a variable sized object.  */\n-\t  copy = allocate_dynamic_stack_space (expr_size (parm), NULL_RTX,\n-\t\t\t\t\t       TYPE_ALIGN (type));\n-\t  copy = gen_rtx_MEM (BLKmode, copy);\n-\t}\n-      else\n-\tcopy = assign_stack_temp (TYPE_MODE (type),\n-\t\t\t\t  int_size_in_bytes (type), 1);\n-      set_mem_attributes (copy, parm, 1);\n+\t  if (!COMPLETE_TYPE_P (type)\n+\t      || TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n+\t    {\n+\t      /* This is a variable sized object.  */\n+\t      copy = allocate_dynamic_stack_space (expr_size (parm), NULL_RTX,\n+\t\t\t\t\t\t   TYPE_ALIGN (type));\n+\t      copy = gen_rtx_MEM (BLKmode, copy);\n+\t    }\n+\t  else\n+\t    copy = assign_stack_temp (TYPE_MODE (type),\n+\t\t\t\t      int_size_in_bytes (type), 1);\n+\t  set_mem_attributes (copy, parm, 1);\n \n-      store_expr (parm, copy, 0);\n-      emit_move_insn (parmreg, XEXP (copy, 0));\n-      all->conversion_insns = get_insns ();\n-      end_sequence ();\n+\t  store_expr (parm, copy, 0);\n+\t  emit_move_insn (parmreg, XEXP (copy, 0));\n+\t  all->conversion_insns = get_insns ();\n+\t  end_sequence ();\n \n-      did_conversion = true;\n+\t  did_conversion = true;\n+\t}\n     }\n #endif /* FUNCTION_ARG_CALLEE_COPIES */\n "}]}