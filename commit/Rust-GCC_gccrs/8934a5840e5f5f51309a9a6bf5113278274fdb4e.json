{"sha": "8934a5840e5f5f51309a9a6bf5113278274fdb4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkzNGE1ODQwZTVmNWY1MTMwOWE5YTZiZjUxMTMyNzgyNzRmZGI0ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T11:12:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T11:12:58Z"}, "message": "Code clean up.\n\nFrom-SVN: r178206", "tree": {"sha": "a09f36a00b03affdcdc0059ef6b0c845b9eee7c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a09f36a00b03affdcdc0059ef6b0c845b9eee7c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8934a5840e5f5f51309a9a6bf5113278274fdb4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8934a5840e5f5f51309a9a6bf5113278274fdb4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8934a5840e5f5f51309a9a6bf5113278274fdb4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8934a5840e5f5f51309a9a6bf5113278274fdb4e/comments", "author": null, "committer": null, "parents": [{"sha": "ca5af305a13a6f886dc6b6e0a07863c7eeefdbee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca5af305a13a6f886dc6b6e0a07863c7eeefdbee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca5af305a13a6f886dc6b6e0a07863c7eeefdbee"}], "stats": {"total": 147, "additions": 62, "deletions": 85}, "files": [{"sha": "5990e224bc8839dcff2bebe0ca899147197428af", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 35, "deletions": 38, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8934a5840e5f5f51309a9a6bf5113278274fdb4e/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8934a5840e5f5f51309a9a6bf5113278274fdb4e/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=8934a5840e5f5f51309a9a6bf5113278274fdb4e", "patch": "@@ -855,9 +855,11 @@ package body Ada.Exceptions is\n       --  Go ahead and raise appropriate exception\n \n       Exception_Data.Set_Exception_Msg (EF, Message);\n+\n       if not ZCX_By_Default then\n          Abort_Defer.all;\n       end if;\n+\n       Raise_Current_Excep (EF);\n    end Raise_Exception;\n \n@@ -882,57 +884,41 @@ package body Ada.Exceptions is\n    -------------------------------------\n \n    procedure Raise_From_Controlled_Operation\n-     (X          : Ada.Exceptions.Exception_Occurrence;\n-      From_Abort : Boolean)\n+     (X : Ada.Exceptions.Exception_Occurrence)\n    is\n+      Prefix             : constant String := \"adjust/finalize raised \";\n+      Orig_Msg           : constant String := Exception_Message (X);\n+      Orig_Prefix_Length : constant Natural :=\n+                             Integer'Min (Prefix'Length, Orig_Msg'Length);\n+      Orig_Prefix        : String renames Orig_Msg\n+                             (Orig_Msg'First ..\n+                              Orig_Msg'First + Orig_Prefix_Length - 1);\n    begin\n-      --  When finalization was triggered by an abort, keep propagating the\n-      --  abort signal rather than raising Program_Error.\n-\n-      if From_Abort then\n-         raise Standard'Abort_Signal;\n+      --  Message already has the proper prefix, just re-raise\n \n-      --  Otherwise, raise Program_Error\n+      if Orig_Prefix = Prefix then\n+         Raise_Exception_No_Defer\n+           (E       => Program_Error'Identity,\n+            Message => Orig_Msg);\n \n       else\n          declare\n-            Prefix             : constant String := \"adjust/finalize raised \";\n-            Orig_Msg           : constant String := Exception_Message (X);\n-            Orig_Prefix_Length : constant Natural :=\n-                                   Integer'Min\n-                                     (Prefix'Length, Orig_Msg'Length);\n-            Orig_Prefix        : String renames Orig_Msg\n-                                   (Orig_Msg'First ..\n-                                    Orig_Msg'First + Orig_Prefix_Length - 1);\n+            New_Msg  : constant String := Prefix & Exception_Name (X);\n \n          begin\n-            --  Message already has the proper prefix, just re-raise\n+            --  No message present, just provide our own\n \n-            if Orig_Prefix = Prefix then\n+            if Orig_Msg = \"\" then\n                Raise_Exception_No_Defer\n                  (E       => Program_Error'Identity,\n-                  Message => Orig_Msg);\n-\n-            else\n-               declare\n-                  New_Msg  : constant String := Prefix & Exception_Name (X);\n+                  Message => New_Msg);\n \n-               begin\n-                  --  No message present, just provide our own\n+            --  Message present, add informational prefix\n \n-                  if Orig_Msg = \"\" then\n-                     Raise_Exception_No_Defer\n-                       (E       => Program_Error'Identity,\n-                        Message => New_Msg);\n-\n-                  --  Message present, add informational prefix\n-\n-                  else\n-                     Raise_Exception_No_Defer\n-                       (E       => Program_Error'Identity,\n-                        Message => New_Msg & \": \" & Orig_Msg);\n-                  end if;\n-               end;\n+            else\n+               Raise_Exception_No_Defer\n+                 (E       => Program_Error'Identity,\n+                  Message => New_Msg & \": \" & Orig_Msg);\n             end if;\n          end;\n       end if;\n@@ -948,9 +934,11 @@ package body Ada.Exceptions is\n    is\n    begin\n       Exception_Data.Set_Exception_C_Msg (E, M);\n+\n       if not ZCX_By_Default then\n          Abort_Defer.all;\n       end if;\n+\n       Debug_Raise_Exception (E => SSL.Exception_Data_Ptr (E));\n       Exception_Propagation.Propagate_Exception\n         (E => E, From_Signal_Handler => True);\n@@ -1021,9 +1009,11 @@ package body Ada.Exceptions is\n    is\n    begin\n       Exception_Data.Set_Exception_C_Msg (E, F, L, C, M);\n+\n       if not ZCX_By_Default then\n          Abort_Defer.all;\n       end if;\n+\n       Raise_Current_Excep (E);\n    end Raise_With_Location_And_Msg;\n \n@@ -1042,9 +1032,14 @@ package body Ada.Exceptions is\n       Excep.Num_Tracebacks   := 0;\n       Excep.Cleanup_Flag     := False;\n       Excep.Pid              := Local_Partition_ID;\n+\n+      --  The following is a common pattern, should be abstracted\n+      --  into a procedure call ???\n+\n       if not ZCX_By_Default then\n          Abort_Defer.all;\n       end if;\n+\n       Raise_Current_Excep (E);\n    end Raise_With_Msg;\n \n@@ -1303,6 +1298,7 @@ package body Ada.Exceptions is\n          if not ZCX_By_Default then\n             Abort_Defer.all;\n          end if;\n+\n          Exception_Propagation.Setup_Exception\n            (X'Unrestricted_Access, Get_Current_Excep.all, Reraised => True);\n          Save_Occurrence_No_Private (Get_Current_Excep.all.all, X);\n@@ -1319,6 +1315,7 @@ package body Ada.Exceptions is\n       if not ZCX_By_Default then\n          Abort_Defer.all;\n       end if;\n+\n       Exception_Propagation.Setup_Exception\n         (X'Unrestricted_Access, Get_Current_Excep.all, Reraised => True);\n       Save_Occurrence_No_Private (Get_Current_Excep.all.all, X);"}, {"sha": "fe1ca520c8c6354e27911915d600f8791045008a", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 22, "deletions": 38, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8934a5840e5f5f51309a9a6bf5113278274fdb4e/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8934a5840e5f5f51309a9a6bf5113278274fdb4e/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=8934a5840e5f5f51309a9a6bf5113278274fdb4e", "patch": "@@ -850,57 +850,41 @@ package body Ada.Exceptions is\n    -------------------------------------\n \n    procedure Raise_From_Controlled_Operation\n-     (X          : Ada.Exceptions.Exception_Occurrence;\n-      From_Abort : Boolean)\n+     (X : Ada.Exceptions.Exception_Occurrence)\n    is\n+      Prefix             : constant String := \"adjust/finalize raised \";\n+      Orig_Msg           : constant String := Exception_Message (X);\n+      Orig_Prefix_Length : constant Natural :=\n+                             Integer'Min (Prefix'Length, Orig_Msg'Length);\n+      Orig_Prefix        : String renames Orig_Msg\n+                            (Orig_Msg'First ..\n+                             Orig_Msg'First + Orig_Prefix_Length - 1);\n    begin\n-      --  When finalization was triggered by an abort, keep propagating the\n-      --  abort signal rather than raising Program_Error.\n+      --  Message already has proper prefix, just re-reraise\n \n-      if From_Abort then\n-         raise Standard'Abort_Signal;\n-\n-      --  Otherwise, raise Program_Error\n+      if Orig_Prefix = Prefix then\n+         Raise_Exception_No_Defer\n+           (E       => Program_Error'Identity,\n+            Message => Orig_Msg);\n \n       else\n          declare\n-            Prefix             : constant String := \"adjust/finalize raised \";\n-            Orig_Msg           : constant String := Exception_Message (X);\n-            Orig_Prefix_Length : constant Natural :=\n-                                   Integer'Min\n-                                     (Prefix'Length, Orig_Msg'Length);\n-            Orig_Prefix        : String renames Orig_Msg\n-                                   (Orig_Msg'First ..\n-                                    Orig_Msg'First + Orig_Prefix_Length - 1);\n+            New_Msg  : constant String := Prefix & Exception_Name (X);\n \n          begin\n-            --  Message already has proper prefix, just re-reraise\n+            --  No message present, just provide our own\n \n-            if Orig_Prefix = Prefix then\n+            if Orig_Msg = \"\" then\n                Raise_Exception_No_Defer\n                  (E       => Program_Error'Identity,\n-                  Message => Orig_Msg);\n-\n-            else\n-               declare\n-                  New_Msg  : constant String := Prefix & Exception_Name (X);\n-\n-               begin\n-                  --  No message present, just provide our own\n+                  Message => New_Msg);\n \n-                  if Orig_Msg = \"\" then\n-                     Raise_Exception_No_Defer\n-                       (E       => Program_Error'Identity,\n-                        Message => New_Msg);\n+            --  Message present, add informational prefix\n \n-                  --  Message present, add informational prefix\n-\n-                  else\n-                     Raise_Exception_No_Defer\n-                       (E       => Program_Error'Identity,\n-                        Message => New_Msg & \": \" & Orig_Msg);\n-                  end if;\n-               end;\n+            else\n+               Raise_Exception_No_Defer\n+                 (E       => Program_Error'Identity,\n+                  Message => New_Msg & \": \" & Orig_Msg);\n             end if;\n          end;\n       end if;"}, {"sha": "0ff3ee6773dd3f24c1f7074ccba6da92b6d1c62d", "filename": "gcc/ada/a-except.ads", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8934a5840e5f5f51309a9a6bf5113278274fdb4e/gcc%2Fada%2Fa-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8934a5840e5f5f51309a9a6bf5113278274fdb4e/gcc%2Fada%2Fa-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.ads?ref=8934a5840e5f5f51309a9a6bf5113278274fdb4e", "patch": "@@ -199,16 +199,13 @@ private\n    --  system to return here rather than to the original location.\n \n    procedure Raise_From_Controlled_Operation\n-     (X          : Ada.Exceptions.Exception_Occurrence;\n-      From_Abort : Boolean);\n+     (X : Ada.Exceptions.Exception_Occurrence);\n    pragma No_Return (Raise_From_Controlled_Operation);\n    pragma Export\n      (Ada, Raise_From_Controlled_Operation,\n            \"__gnat_raise_from_controlled_operation\");\n    --  Raise Program_Error, providing information about X (an exception raised\n-   --  during a controlled operation) in the exception message. However, if the\n-   --  finalization was triggered by abort, keep aborting instead of raising\n-   --  Program_Error.\n+   --  during a controlled operation) in the exception message.\n \n    procedure Reraise_Occurrence_Always (X : Exception_Occurrence);\n    pragma No_Return (Reraise_Occurrence_Always);"}, {"sha": "2a161fad534d5b68a1363ab14ecfebf03dd5f3ae", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8934a5840e5f5f51309a9a6bf5113278274fdb4e/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8934a5840e5f5f51309a9a6bf5113278274fdb4e/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=8934a5840e5f5f51309a9a6bf5113278274fdb4e", "patch": "@@ -1455,9 +1455,8 @@ package body Bindgen is\n             Write_Statement_Buffer;\n \n             Set_String (\"            procedure Raise_From_Controlled_\");\n-            Set_String (\"Operation \");\n-            Set_String (\"(X : Ada.Exceptions.Exception_Occurrence; \");\n-            Set_String (\" From_Abort : Boolean);\");\n+            Set_String (\"Operation (X : Ada.Exceptions.Exception_\");\n+            Set_String (\"Occurrence);\");\n             Write_Statement_Buffer;\n \n             Set_String (\"            pragma Import (Ada, Raise_From_\");\n@@ -1466,7 +1465,7 @@ package body Bindgen is\n             Write_Statement_Buffer;\n \n             WBI (\"         begin\");\n-            WBI (\"            Raise_From_Controlled_Operation (LE, False);\");\n+            WBI (\"            Raise_From_Controlled_Operation (LE);\");\n             WBI (\"         end;\");\n \n          --  VM-specific code, use regular Ada to produce the desired behavior"}]}