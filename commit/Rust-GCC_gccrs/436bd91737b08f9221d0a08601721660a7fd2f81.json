{"sha": "436bd91737b08f9221d0a08601721660a7fd2f81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM2YmQ5MTczN2IwOGY5MjIxZDBhMDg2MDE3MjE2NjBhN2ZkMmY4MQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2015-01-17T20:58:12Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2015-01-17T20:58:12Z"}, "message": "rs6000.c (rs6000_parallel_return): New function.\n\n\t* config/rs6000/rs6000.c (rs6000_parallel_return): New function.\n\t(rs6000_function_value): Use it.  Handle SCmode and TCmode as well,\n\tfor TARGET_32BIT && TARGET_POWERPC64.  Fix another BITS_PER_WORD\n\tsnafu.\n\t(rs6000_libcall_value): Use the new function.\n\nFrom-SVN: r219804", "tree": {"sha": "bf9cc8b3b7536e1431c8daf2fb9e0b35bbce462a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf9cc8b3b7536e1431c8daf2fb9e0b35bbce462a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/436bd91737b08f9221d0a08601721660a7fd2f81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436bd91737b08f9221d0a08601721660a7fd2f81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/436bd91737b08f9221d0a08601721660a7fd2f81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436bd91737b08f9221d0a08601721660a7fd2f81/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b97ab5aed2090928f6bd9647cb4956845a7d77b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b97ab5aed2090928f6bd9647cb4956845a7d77b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b97ab5aed2090928f6bd9647cb4956845a7d77b"}], "stats": {"total": 113, "additions": 53, "deletions": 60}, "files": [{"sha": "fc5fd061099e3b10d64b46d636592499649f7b70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436bd91737b08f9221d0a08601721660a7fd2f81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436bd91737b08f9221d0a08601721660a7fd2f81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=436bd91737b08f9221d0a08601721660a7fd2f81", "patch": "@@ -1,3 +1,11 @@\n+2015-01-17  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_parallel_return): New function.\n+\t(rs6000_function_value): Use it.  Handle SCmode and TCmode as well,\n+\tfor TARGET_32BIT && TARGET_POWERPC64.  Fix another BITS_PER_WORD\n+\tsnafu.\n+\t(rs6000_libcall_value): Use the new function.\n+\n 2015-01-17  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/invoke.texi ([-ftracer]): Remove duplicate option listing."}, {"sha": "551181ba7a5c19bfc712e6d0304baca98d2473bc", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 45, "deletions": 60, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436bd91737b08f9221d0a08601721660a7fd2f81/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436bd91737b08f9221d0a08601721660a7fd2f81/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=436bd91737b08f9221d0a08601721660a7fd2f81", "patch": "@@ -31583,6 +31583,29 @@ rs6000_complex_function_value (machine_mode mode)\n   return gen_rtx_PARALLEL (mode, gen_rtvec (2, r1, r2));\n }\n \n+/* Return an rtx describing a return value of MODE as a PARALLEL\n+   in N_ELTS registers, each of mode ELT_MODE, starting at REGNO,\n+   stride REG_STRIDE.  */\n+\n+static rtx\n+rs6000_parallel_return (machine_mode mode,\n+\t\t\tint n_elts, machine_mode elt_mode,\n+\t\t\tunsigned int regno, unsigned int reg_stride)\n+{\n+  rtx par = gen_rtx_PARALLEL (mode, rtvec_alloc (n_elts));\n+\n+  int i;\n+  for (i = 0; i < n_elts; i++)\n+    {\n+      rtx r = gen_rtx_REG (elt_mode, regno);\n+      rtx off = GEN_INT (i * GET_MODE_SIZE (elt_mode));\n+      XVECEXP (par, 0, i) = gen_rtx_EXPR_LIST (VOIDmode, r, off);\n+      regno += reg_stride;\n+    }\n+\n+  return par;\n+}\n+\n /* Target hook for TARGET_FUNCTION_VALUE.\n \n    On the SPE, both FPs and vectors are returned in r3.\n@@ -31618,12 +31641,12 @@ rs6000_function_value (const_tree valtype,\n       /* Otherwise fall through to standard ABI rules.  */\n     }\n \n+  mode = TYPE_MODE (valtype);\n+\n   /* The ELFv2 ABI returns homogeneous VFP aggregates in registers.  */\n-  if (rs6000_discover_homogeneous_aggregate (TYPE_MODE (valtype), valtype,\n-\t\t\t\t\t     &elt_mode, &n_elts))\n+  if (rs6000_discover_homogeneous_aggregate (mode, valtype, &elt_mode, &n_elts))\n     {\n-      int first_reg, n_regs, i;\n-      rtx par;\n+      int first_reg, n_regs;\n \n       if (SCALAR_FLOAT_MODE_P (elt_mode))\n \t{\n@@ -31637,53 +31660,25 @@ rs6000_function_value (const_tree valtype,\n \t  n_regs = 1;\n \t}\n \n-      par = gen_rtx_PARALLEL (TYPE_MODE (valtype), rtvec_alloc (n_elts));\n-      for (i = 0; i < n_elts; i++)\n-\t{\n-\t  rtx r = gen_rtx_REG (elt_mode, first_reg + i * n_regs);\n-\t  rtx off = GEN_INT (i * GET_MODE_SIZE (elt_mode));\n-\t  XVECEXP (par, 0, i) = gen_rtx_EXPR_LIST (VOIDmode, r, off);\n-\t}\n-\n-      return par;\n+      return rs6000_parallel_return (mode, n_elts, elt_mode, first_reg, n_regs);\n     }\n \n-  if (TARGET_32BIT && TARGET_POWERPC64 && TYPE_MODE (valtype) == DImode)\n-    {\n-      /* Long long return value need be split in -mpowerpc64, 32bit ABI.  */\n-      return gen_rtx_PARALLEL (DImode,\n-\tgen_rtvec (2,\n-\t\t   gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t      gen_rtx_REG (SImode, GP_ARG_RETURN),\n-\t\t\t\t      const0_rtx),\n-\t\t   gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t      gen_rtx_REG (SImode,\n-\t\t\t\t\t\t   GP_ARG_RETURN + 1),\n-\t\t\t\t      GEN_INT (4))));\n-    }\n-  if (TARGET_32BIT && TARGET_POWERPC64 && TYPE_MODE (valtype) == DCmode)\n-    {\n-      return gen_rtx_PARALLEL (DCmode,\n-\tgen_rtvec (4,\n-\t\t   gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t      gen_rtx_REG (SImode, GP_ARG_RETURN),\n-\t\t\t\t      const0_rtx),\n-\t\t   gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t      gen_rtx_REG (SImode,\n-\t\t\t\t\t\t   GP_ARG_RETURN + 1),\n-\t\t\t\t      GEN_INT (4)),\n-\t\t   gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t      gen_rtx_REG (SImode,\n-\t\t\t\t\t\t   GP_ARG_RETURN + 2),\n-\t\t\t\t      GEN_INT (8)),\n-\t\t   gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t      gen_rtx_REG (SImode,\n-\t\t\t\t\t\t   GP_ARG_RETURN + 3),\n-\t\t\t\t      GEN_INT (12))));\n-    }\n+  /* Some return value types need be split in -mpowerpc64, 32bit ABI.  */\n+  if (TARGET_32BIT && TARGET_POWERPC64)\n+    switch (mode)\n+      {\n+      default:\n+\tbreak;\n+      case DImode:\n+      case SCmode:\n+      case DCmode:\n+      case TCmode:\n+\tint count = GET_MODE_SIZE (mode) / 4;\n+\treturn rs6000_parallel_return (mode, count, SImode, GP_ARG_RETURN, 1);\n+      }\n \n-  mode = TYPE_MODE (valtype);\n-  if ((INTEGRAL_TYPE_P (valtype) && GET_MODE_BITSIZE (mode) < BITS_PER_WORD)\n+  if ((INTEGRAL_TYPE_P (valtype)\n+       && GET_MODE_BITSIZE (mode) < (TARGET_32BIT ? 32 : 64))\n       || POINTER_TYPE_P (valtype))\n     mode = TARGET_32BIT ? SImode : DImode;\n \n@@ -31720,19 +31715,9 @@ rs6000_libcall_value (machine_mode mode)\n {\n   unsigned int regno;\n \n+  /* Long long return value need be split in -mpowerpc64, 32bit ABI.  */\n   if (TARGET_32BIT && TARGET_POWERPC64 && mode == DImode)\n-    {\n-      /* Long long return value need be split in -mpowerpc64, 32bit ABI.  */\n-      return gen_rtx_PARALLEL (DImode,\n-\tgen_rtvec (2,\n-\t\t   gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t      gen_rtx_REG (SImode, GP_ARG_RETURN),\n-\t\t\t\t      const0_rtx),\n-\t\t   gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t      gen_rtx_REG (SImode,\n-\t\t\t\t\t\t   GP_ARG_RETURN + 1),\n-\t\t\t\t      GEN_INT (4))));\n-    }\n+    return rs6000_parallel_return (mode, 2, SImode, GP_ARG_RETURN, 1);\n \n   if (DECIMAL_FLOAT_MODE_P (mode) && TARGET_HARD_FLOAT && TARGET_FPRS)\n     /* _Decimal128 must use an even/odd register pair.  */"}]}