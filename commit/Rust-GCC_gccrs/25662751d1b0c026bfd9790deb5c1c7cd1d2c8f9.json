{"sha": "25662751d1b0c026bfd9790deb5c1c7cd1d2c8f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU2NjI3NTFkMWIwYzAyNmJmZDk3OTBkZWI1YzFjN2NkMWQyYzhmOQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-10-08T17:31:36Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-10-08T17:31:36Z"}, "message": "nvptx.h (struct machine_function): Add comment.\n\n\t* config/nvptx/nvptx.h (struct machine_function): Add comment.\n\t* config/nvptx/nvptx.c (nvptx_declare_function_name): Functions\n\tmay return pointer as well as in memory.\n\t(nvptx_output_return): Likewise.\n\nFrom-SVN: r228618", "tree": {"sha": "ef8e9eefd18dcc6ef65b3540cfc1c2fcfbaa94aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef8e9eefd18dcc6ef65b3540cfc1c2fcfbaa94aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25662751d1b0c026bfd9790deb5c1c7cd1d2c8f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25662751d1b0c026bfd9790deb5c1c7cd1d2c8f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25662751d1b0c026bfd9790deb5c1c7cd1d2c8f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25662751d1b0c026bfd9790deb5c1c7cd1d2c8f9/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4835c97845294868e600ab765385b5c0b95157f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4835c97845294868e600ab765385b5c0b95157f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4835c97845294868e600ab765385b5c0b95157f5"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "b2e4f6a37eef59a5da3290f16d64df943dbac4cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25662751d1b0c026bfd9790deb5c1c7cd1d2c8f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25662751d1b0c026bfd9790deb5c1c7cd1d2c8f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25662751d1b0c026bfd9790deb5c1c7cd1d2c8f9", "patch": "@@ -1,3 +1,10 @@\n+2015-10-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx.h (struct machine_function): Add comment.\n+\t* config/nvptx/nvptx.c (nvptx_declare_function_name): Functions\n+\tmay return pointer as well as in memory.\n+\t(nvptx_output_return): Likewise.\n+\n 2015-10-08  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* builtins.c (fold_builtin_sqrt, fold_builtin_cbrt): Delete."}, {"sha": "57830c33f372bce472d04a3b9020ed2945b650b2", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25662751d1b0c026bfd9790deb5c1c7cd1d2c8f9/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25662751d1b0c026bfd9790deb5c1c7cd1d2c8f9/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=25662751d1b0c026bfd9790deb5c1c7cd1d2c8f9", "patch": "@@ -531,13 +531,8 @@ nvptx_declare_function_name (FILE *file, const char *name, const_tree decl)\n   nvptx_write_function_decl (s, name, decl);\n   fprintf (file, \"%s\", s.str().c_str());\n \n-  bool return_in_mem = false;\n-  if (TYPE_MODE (result_type) != VOIDmode)\n-    {\n-      machine_mode mode = TYPE_MODE (result_type);\n-      if (!RETURN_IN_REG_P (mode))\n-\treturn_in_mem = true;\n-    }\n+  bool return_in_mem = (TYPE_MODE (result_type) != VOIDmode\n+\t\t\t&& !RETURN_IN_REG_P (TYPE_MODE (result_type)));\n \n   fprintf (file, \"\\n{\\n\");\n \n@@ -547,9 +542,13 @@ nvptx_declare_function_name (FILE *file, const char *name, const_tree decl)\n \t\t       false, return_in_mem);\n   if (return_in_mem)\n     fprintf (file, \"\\t.reg.u%d %%ar1;\\n\", GET_MODE_BITSIZE (Pmode));\n-  else if (TYPE_MODE (result_type) != VOIDmode)\n+\n+  /* C++11 ABI causes us to return a reference to the passed in\n+     pointer for return_in_mem.  */\n+  if (cfun->machine->ret_reg_mode != VOIDmode)\n     {\n-      machine_mode mode = arg_promotion (TYPE_MODE (result_type));\n+      machine_mode mode = arg_promotion\n+\t((machine_mode)cfun->machine->ret_reg_mode);\n       fprintf (file, \"\\t.reg%s %%retval;\\n\",\n \t       nvptx_ptx_type_from_mode (mode, false));\n     }\n@@ -635,17 +634,13 @@ nvptx_declare_function_name (FILE *file, const char *name, const_tree decl)\n const char *\n nvptx_output_return (void)\n {\n-  tree fntype = TREE_TYPE (current_function_decl);\n-  tree result_type = TREE_TYPE (fntype);\n-  if (TYPE_MODE (result_type) != VOIDmode)\n+  machine_mode mode = (machine_mode)cfun->machine->ret_reg_mode;\n+\n+  if (mode != VOIDmode)\n     {\n-      machine_mode mode = TYPE_MODE (result_type);\n-      if (RETURN_IN_REG_P (mode))\n-\t{\n-\t  mode = arg_promotion (mode);\n-\t  fprintf (asm_out_file, \"\\tst.param%s\\t[%%out_retval], %%retval;\\n\",\n-\t\t   nvptx_ptx_type_from_mode (mode, false));\n-\t}\n+      mode = arg_promotion (mode);\n+      fprintf (asm_out_file, \"\\tst.param%s\\t[%%out_retval], %%retval;\\n\",\n+\t       nvptx_ptx_type_from_mode (mode, false));\n     }\n \n   return \"ret;\";"}, {"sha": "7ba39148982a760717765cf8b74ae16f688ba8cc", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25662751d1b0c026bfd9790deb5c1c7cd1d2c8f9/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25662751d1b0c026bfd9790deb5c1c7cd1d2c8f9/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=25662751d1b0c026bfd9790deb5c1c7cd1d2c8f9", "patch": "@@ -228,7 +228,7 @@ struct GTY(()) machine_function\n   bool has_call_with_varargs;\n   bool has_call_with_sc;\n   HOST_WIDE_INT outgoing_stdarg_size;\n-  int ret_reg_mode;\n+  int ret_reg_mode; /* machine_mode not defined yet. */\n   int punning_buffer_size;\n };\n #endif"}]}