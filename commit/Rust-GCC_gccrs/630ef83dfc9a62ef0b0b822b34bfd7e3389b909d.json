{"sha": "630ef83dfc9a62ef0b0b822b34bfd7e3389b909d", "node_id": "C_kwDOANBUbNoAKDYzMGVmODNkZmM5YTYyZWYwYjBiODIyYjM0YmZkN2UzMzg5YjkwOWQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-10T13:47:44Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-11T08:52:13Z"}, "message": "Refactor helper from TypeCheckResolveToplevel\n\nThe reason we cannot type-resolve forward declared items is due to the\nfact our type-resolver runs in a toplevel pass trying to type resolve as\nbest it can but when we hit structs for example which contain types that\nare forward declared they need to be resolved in a query based manar. We\nhave all the missing pieces to do this now and this means we need to get\nrid of this toplevel pass as the starting point.\n\nAddresses #1455", "tree": {"sha": "1fc92e4faca93c9b0b543f79314bfe5b0ec30608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fc92e4faca93c9b0b543f79314bfe5b0ec30608"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/630ef83dfc9a62ef0b0b822b34bfd7e3389b909d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630ef83dfc9a62ef0b0b822b34bfd7e3389b909d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630ef83dfc9a62ef0b0b822b34bfd7e3389b909d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630ef83dfc9a62ef0b0b822b34bfd7e3389b909d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eca2ac2c23e0c8b438fd696d4f85e35c9210d8dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca2ac2c23e0c8b438fd696d4f85e35c9210d8dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eca2ac2c23e0c8b438fd696d4f85e35c9210d8dd"}], "stats": {"total": 98, "additions": 50, "deletions": 48}, "files": [{"sha": "e263056a82c1bcd4baf9f63e7f8365fc7c79e901", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.cc", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ef83dfc9a62ef0b0b822b34bfd7e3389b909d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ef83dfc9a62ef0b0b822b34bfd7e3389b909d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc?ref=630ef83dfc9a62ef0b0b822b34bfd7e3389b909d", "patch": "@@ -17,6 +17,8 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-hir-type-check-base.h\"\n+#include \"rust-hir-type-check-type.h\"\n+#include \"rust-hir-type-check-expr.h\"\n #include \"rust-coercion.h\"\n \n namespace Rust {\n@@ -349,5 +351,49 @@ TypeCheckBase::coercion_site (HirId id, TyTy::BaseType *expected,\n   return expected->coerce (expr);\n }\n \n+void\n+TypeCheckBase::resolve_generic_params (\n+  const std::vector<std::unique_ptr<HIR::GenericParam>> &generic_params,\n+  std::vector<TyTy::SubstitutionParamMapping> &substitutions)\n+{\n+  for (auto &generic_param : generic_params)\n+    {\n+      switch (generic_param.get ()->get_kind ())\n+\t{\n+\tcase HIR::GenericParam::GenericKind::LIFETIME:\n+\t  // FIXME: Skipping Lifetime completely until better\n+\t  // handling.\n+\t  break;\n+\t  case HIR::GenericParam::GenericKind::CONST: {\n+\t    auto param\n+\t      = static_cast<HIR::ConstGenericParam *> (generic_param.get ());\n+\t    auto specified_type\n+\t      = TypeCheckType::Resolve (param->get_type ().get ());\n+\n+\t    if (param->has_default_expression ())\n+\t      {\n+\t\tauto expr_type = TypeCheckExpr::Resolve (\n+\t\t  param->get_default_expression ().get ());\n+\t\tspecified_type->coerce (expr_type);\n+\t      }\n+\n+\t    context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t  specified_type);\n+\t  }\n+\t  break;\n+\n+\t  case HIR::GenericParam::GenericKind::TYPE: {\n+\t    auto param_type\n+\t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t    context->insert_type (generic_param->get_mappings (), param_type);\n+\n+\t    substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t      static_cast<HIR::TypeParam &> (*generic_param), param_type));\n+\t  }\n+\t  break;\n+\t}\n+    }\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "b6f4b636789bc36a8b54a28a5d3914d956f4b498", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ef83dfc9a62ef0b0b822b34bfd7e3389b909d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ef83dfc9a62ef0b0b822b34bfd7e3389b909d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=630ef83dfc9a62ef0b0b822b34bfd7e3389b909d", "patch": "@@ -64,6 +64,10 @@ class TypeCheckBase : public HIR::HIRFullVisitorBase\n   TyTy::ADTType::ReprOptions parse_repr_options (const AST::AttrVec &attrs,\n \t\t\t\t\t\t Location locus);\n \n+  void resolve_generic_params (\n+    const std::vector<std::unique_ptr<HIR::GenericParam>> &generic_params,\n+    std::vector<TyTy::SubstitutionParamMapping> &substitutions);\n+\n   Analysis::Mappings *mappings;\n   Resolver *resolver;\n   TypeCheckContext *context;"}, {"sha": "d5270c9acbb975512dd5e75f5e39f6e1fab08105", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.cc", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ef83dfc9a62ef0b0b822b34bfd7e3389b909d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ef83dfc9a62ef0b0b822b34bfd7e3389b909d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.cc?ref=630ef83dfc9a62ef0b0b822b34bfd7e3389b909d", "patch": "@@ -28,50 +28,6 @@ TypeCheckTopLevel::Resolve (HIR::Item *item)\n   item->accept_vis (resolver);\n }\n \n-void\n-TypeCheckTopLevel::resolve_generic_params (\n-  const std::vector<std::unique_ptr<HIR::GenericParam>> &generic_params,\n-  std::vector<TyTy::SubstitutionParamMapping> &substitutions)\n-{\n-  for (auto &generic_param : generic_params)\n-    {\n-      switch (generic_param.get ()->get_kind ())\n-\t{\n-\tcase HIR::GenericParam::GenericKind::LIFETIME:\n-\t  // FIXME: Skipping Lifetime completely until better\n-\t  // handling.\n-\t  break;\n-\t  case HIR::GenericParam::GenericKind::CONST: {\n-\t    auto param\n-\t      = static_cast<HIR::ConstGenericParam *> (generic_param.get ());\n-\t    auto specified_type\n-\t      = TypeCheckType::Resolve (param->get_type ().get ());\n-\n-\t    if (param->has_default_expression ())\n-\t      {\n-\t\tauto expr_type = TypeCheckExpr::Resolve (\n-\t\t  param->get_default_expression ().get ());\n-\t\tspecified_type->coerce (expr_type);\n-\t      }\n-\n-\t    context->insert_type (generic_param->get_mappings (),\n-\t\t\t\t  specified_type);\n-\t  }\n-\t  break;\n-\n-\t  case HIR::GenericParam::GenericKind::TYPE: {\n-\t    auto param_type\n-\t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n-\t    context->insert_type (generic_param->get_mappings (), param_type);\n-\n-\t    substitutions.push_back (TyTy::SubstitutionParamMapping (\n-\t      static_cast<HIR::TypeParam &> (*generic_param), param_type));\n-\t  }\n-\t  break;\n-\t}\n-    }\n-}\n-\n void\n TypeCheckTopLevel::visit (HIR::TypeAlias &alias)\n {"}, {"sha": "d2785b15e5463000d3c93c1e1c4593482dd63a55", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ef83dfc9a62ef0b0b822b34bfd7e3389b909d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ef83dfc9a62ef0b0b822b34bfd7e3389b909d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=630ef83dfc9a62ef0b0b822b34bfd7e3389b909d", "patch": "@@ -51,10 +51,6 @@ class TypeCheckTopLevel : public TypeCheckBase\n \n private:\n   TypeCheckTopLevel () : TypeCheckBase () {}\n-\n-  void resolve_generic_params (\n-    const std::vector<std::unique_ptr<HIR::GenericParam>> &generic_params,\n-    std::vector<TyTy::SubstitutionParamMapping> &substitutions);\n };\n \n } // namespace Resolver"}]}