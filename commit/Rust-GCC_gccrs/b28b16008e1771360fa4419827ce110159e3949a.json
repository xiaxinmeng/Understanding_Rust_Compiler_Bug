{"sha": "b28b16008e1771360fa4419827ce110159e3949a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI4YjE2MDA4ZTE3NzEzNjBmYTQ0MTk4MjdjZTExMDE1OWUzOTQ5YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2004-09-23T21:01:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2004-09-23T21:01:02Z"}, "message": "tree-flow.h (find_new_referenced_vars): Add prototype.\n\n2004-09-23  Diego Novillo  <dnovillo@redhat.com>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\n\t* tree-flow.h (find_new_referenced_vars): Add prototype.\n\t* tree-sra.c (find_new_referenced_vars_1, find_new_referenced_vars):\n\tMove to...\n\t* tree-dfa.c (find_new_referenced_vars_1, find_new_referenced_vars):\n\t... here.\n\t(mark_new_vars_to_rename): Walk through all operands.\n\t* tree-ssa-ccp.c (convert_to_gimple_builtin): New function.\n\t(execute_fold_all_builtins): Use it.\n\t(pass_fold_builtins): Add TODO_rename_vars to todo_flags_finish.\n\n\t* gcc.c-torture/execute/builtins/strcpy-2.c: New test.\n\t* gcc.c-torture/execute/builtins/strcpy-2-lib.c: New.\n\nFrom-SVN: r87983", "tree": {"sha": "934984b43a2628bfed60b4ccba666f1871a90be4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/934984b43a2628bfed60b4ccba666f1871a90be4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b28b16008e1771360fa4419827ce110159e3949a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b28b16008e1771360fa4419827ce110159e3949a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b28b16008e1771360fa4419827ce110159e3949a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b28b16008e1771360fa4419827ce110159e3949a/comments", "author": null, "committer": null, "parents": [{"sha": "512baaea75c050149b35fc3bd1c0cc8ed546f53a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512baaea75c050149b35fc3bd1c0cc8ed546f53a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/512baaea75c050149b35fc3bd1c0cc8ed546f53a"}], "stats": {"total": 164, "additions": 134, "deletions": 30}, "files": [{"sha": "37c7d2c9ccf668c6e5785862d503ebdc8cda71da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b28b16008e1771360fa4419827ce110159e3949a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b28b16008e1771360fa4419827ce110159e3949a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b28b16008e1771360fa4419827ce110159e3949a", "patch": "@@ -1,3 +1,16 @@\n+2004-09-23  Diego Novillo  <dnovillo@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-flow.h (find_new_referenced_vars): Add prototype.\n+\t* tree-sra.c (find_new_referenced_vars_1, find_new_referenced_vars):\n+\tMove to...\n+\t* tree-dfa.c (find_new_referenced_vars_1, find_new_referenced_vars):\n+\t... here.\n+\t(mark_new_vars_to_rename): Walk through all operands.\n+\t* tree-ssa-ccp.c (convert_to_gimple_builtin): New function.\n+\t(execute_fold_all_builtins): Use it.\n+\t(pass_fold_builtins): Add TODO_rename_vars to todo_flags_finish.\n+\n 2004-09-23  P.J. Darcy  <darcypj@us.ibm.com>\n \n \t* gthr-tpf.h: New file."}, {"sha": "dd233c1aff685d27e317837b1e35b5259d58075f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b28b16008e1771360fa4419827ce110159e3949a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b28b16008e1771360fa4419827ce110159e3949a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b28b16008e1771360fa4419827ce110159e3949a", "patch": "@@ -1,3 +1,8 @@\n+2004-09-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/builtins/strcpy-2.c: New test.\n+\t* gcc.c-torture/execute/builtins/strcpy-2-lib.c: New.\n+\n 2004-09-23  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c++/17618"}, {"sha": "b10dfcb0d79008fc9174670d87d9f2d38a18f925", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strcpy-2-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b28b16008e1771360fa4419827ce110159e3949a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcpy-2-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b28b16008e1771360fa4419827ce110159e3949a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcpy-2-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcpy-2-lib.c?ref=b28b16008e1771360fa4419827ce110159e3949a", "patch": "@@ -0,0 +1 @@\n+#include \"lib/strcpy.c\""}, {"sha": "c3cb6d0e52119a59a051de333ee4f57d2ebf2248", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strcpy-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b28b16008e1771360fa4419827ce110159e3949a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcpy-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b28b16008e1771360fa4419827ce110159e3949a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcpy-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcpy-2.c?ref=b28b16008e1771360fa4419827ce110159e3949a", "patch": "@@ -0,0 +1,47 @@\n+/* Copyright (C) 2004  Free Software Foundation.\n+\n+   Ensure builtin strcpy is optimized into memcpy\n+   even when there is more than one possible string literal\n+   passed to it, but all string literals passed to it\n+   have equal length.\n+\n+   Written by Jakub Jelinek, 9/15/2004.  */\n+\n+extern void abort (void);\n+extern char *strcpy (char *, const char *);\n+typedef __SIZE_TYPE__ size_t;\n+extern void *memcpy (void *, const void *, size_t);\n+extern int memcmp (const void *, const void *, size_t);\n+\n+char buf[32], *p;\n+int i;\n+\n+char *\n+__attribute__((noinline))\n+test (void)\n+{\n+  int j;\n+  const char *q = \"abcdefg\";\n+  for (j = 0; j < 3; ++j)\n+    {\n+      if (j == i)\n+        q = \"bcdefgh\";\n+      else if (j == i + 1)\n+        q = \"cdefghi\";\n+      else if (j == i + 2)\n+        q = \"defghij\";\n+    }\n+  p = strcpy (buf, q);\n+  return strcpy (buf + 16, q);\n+}\n+\n+void\n+main_test (void)\n+{\n+#ifndef __OPTIMIZE_SIZE__\n+  /* For -Os, strcpy above is not replaced with\n+     memcpy (buf, q, 8);, as that is larger.  */\n+  if (test () != buf + 16 || p != buf)\n+    abort ();\n+#endif\n+}"}, {"sha": "679ffef06aa9ed53160567687eb6e4fd7a560775", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b28b16008e1771360fa4419827ce110159e3949a/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b28b16008e1771360fa4419827ce110159e3949a/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=b28b16008e1771360fa4419827ce110159e3949a", "patch": "@@ -981,9 +981,7 @@ mark_new_vars_to_rename (tree stmt, bitmap vars_to_rename)\n   v_may_defs_after = NUM_V_MAY_DEFS (STMT_V_MAY_DEF_OPS (stmt));\n   v_must_defs_after = NUM_V_MUST_DEFS (STMT_V_MUST_DEF_OPS (stmt));\n \n-  FOR_EACH_SSA_TREE_OPERAND (val, stmt, iter, \n-\t\t\t     SSA_OP_VMAYDEF | SSA_OP_VUSE | SSA_OP_VMUSTDEF)\n-\n+  FOR_EACH_SSA_TREE_OPERAND (val, stmt, iter, SSA_OP_ALL_OPERANDS)\n     {\n       if (DECL_P (val))\n \t{\n@@ -1004,3 +1002,27 @@ mark_new_vars_to_rename (tree stmt, bitmap vars_to_rename)\n \n   BITMAP_XFREE (vars_in_vops_to_rename);\n }\n+\n+/* Find all variables within the gimplified statement that were not previously\n+   visible to the function and add them to the referenced variables list.  */\n+\n+static tree\n+find_new_referenced_vars_1 (tree *tp, int *walk_subtrees,\n+\t\t\t    void *data ATTRIBUTE_UNUSED)\n+{\n+  tree t = *tp;\n+\n+  if (TREE_CODE (t) == VAR_DECL && !var_ann (t))\n+    add_referenced_tmp_var (t);\n+\n+  if (IS_TYPE_OR_DECL_P (t))\n+    *walk_subtrees = 0;\n+\n+  return NULL;\n+}\n+\n+void\n+find_new_referenced_vars (tree *stmt_p)\n+{\n+  walk_tree (stmt_p, find_new_referenced_vars_1, NULL, NULL);\n+}"}, {"sha": "292879ac4306d6586902ac9107eafdfb259ef2f7", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b28b16008e1771360fa4419827ce110159e3949a/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b28b16008e1771360fa4419827ce110159e3949a/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=b28b16008e1771360fa4419827ce110159e3949a", "patch": "@@ -541,6 +541,8 @@ extern void free_df_for_stmt (tree);\n extern tree get_virtual_var (tree);\n extern void add_referenced_tmp_var (tree var);\n extern void mark_new_vars_to_rename (tree, bitmap);\n+extern void find_new_referenced_vars (tree *);\n+\n extern void redirect_immediate_uses (tree, tree);\n extern tree make_rename_temp (tree, const char *);\n "}, {"sha": "9c1a4976afe1c10009b6a2b9fe34ede7b571d60e", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b28b16008e1771360fa4419827ce110159e3949a/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b28b16008e1771360fa4419827ce110159e3949a/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=b28b16008e1771360fa4419827ce110159e3949a", "patch": "@@ -1541,30 +1541,6 @@ generate_element_zero (struct sra_elt *elt, tree *list_p)\n     }\n }\n \n-/* Find all variables within the gimplified statement that were not previously\n-   visible to the function and add them to the referenced variables list.  */\n-\n-static tree\n-find_new_referenced_vars_1 (tree *tp, int *walk_subtrees,\n-\t\t\t    void *data ATTRIBUTE_UNUSED)\n-{\n-  tree t = *tp;\n-\n-  if (TREE_CODE (t) == VAR_DECL && !var_ann (t))\n-    add_referenced_tmp_var (t);\n-\n-  if (IS_TYPE_OR_DECL_P (t))\n-    *walk_subtrees = 0;\n-\n-  return NULL;\n-}\n-\n-static inline void\n-find_new_referenced_vars (tree *stmt_p)\n-{\n-  walk_tree (stmt_p, find_new_referenced_vars_1, NULL, NULL);\n-}\n-\n /* Generate an assignment VAR = INIT, where INIT may need gimplification.\n    Add the result to *LIST_P.  */\n "}, {"sha": "bb37fcf09670fceacbab13cb732a31d794009107", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b28b16008e1771360fa4419827ce110159e3949a/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b28b16008e1771360fa4419827ce110159e3949a/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=b28b16008e1771360fa4419827ce110159e3949a", "patch": "@@ -2099,6 +2099,37 @@ fold_stmt (tree *stmt_p)\n }\n \n \f\n+/* Convert EXPR into a GIMPLE value suitable for substitution on the\n+   RHS of an assignment.  Insert the necessary statements before\n+   iterator *SI_P.  */\n+\n+static tree\n+convert_to_gimple_builtin (block_stmt_iterator *si_p, tree expr)\n+{\n+  tree_stmt_iterator ti;\n+  tree stmt = bsi_stmt (*si_p);\n+  tree tmp, stmts = NULL;\n+\n+  push_gimplify_context ();\n+  tmp = get_initialized_tmp_var (expr, &stmts, NULL);\n+  pop_gimplify_context (NULL);\n+\n+  /* The replacement can expose previously unreferenced variables.  */\n+  for (ti = tsi_start (stmts); !tsi_end_p (ti); tsi_next (&ti))\n+    {\n+      find_new_referenced_vars (tsi_stmt_ptr (ti));\n+      mark_new_vars_to_rename (tsi_stmt (ti), vars_to_rename);\n+    }\n+\n+  if (EXPR_HAS_LOCATION (stmt))\n+    annotate_all_with_locus (&stmts, EXPR_LOCATION (stmt));\n+\n+  bsi_insert_before (si_p, stmts, BSI_SAME_STMT);\n+\n+  return tmp;\n+}\n+\n+\n /* A simple pass that attempts to fold all builtin functions.  This pass\n    is run after we've propagated as many constants as we can.  */\n \n@@ -2142,8 +2173,13 @@ execute_fold_all_builtins (void)\n \t      print_generic_stmt (dump_file, *stmtp, dump_flags);\n \t    }\n \n-\t  if (set_rhs (stmtp, result))\n-\t    modify_stmt (*stmtp);\n+\t  if (!set_rhs (stmtp, result))\n+\t    {\n+\t      result = convert_to_gimple_builtin (&i, result);\n+\t      if (result && !set_rhs (stmtp, result))\n+\t\tabort ();\n+\t    }\n+\t  modify_stmt (*stmtp);\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n@@ -2169,6 +2205,8 @@ struct tree_opt_pass pass_fold_builtins =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_ssa,\t/* todo_flags_finish */\n+  TODO_dump_func\n+    | TODO_verify_ssa\n+    | TODO_rename_vars,\t\t\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };"}]}