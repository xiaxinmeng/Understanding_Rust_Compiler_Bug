{"sha": "42aea2d8f9282b7bb34fedc7f125840a393ee639", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJhZWEyZDhmOTI4MmI3YmIzNGZlZGM3ZjEyNTg0MGEzOTNlZTYzOQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2014-05-08T02:05:19Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2014-05-08T02:05:19Z"}, "message": "re PR target/60737 (rs6000 expand_block_clear uses word stores on double word pointer)\n\n\tPR target/60737\n\t* config/rs6000/rs6000.c (expand_block_move): Allow 64-bit\n\tloads and stores when -mno-strict-align at any alignment.\n\t(expand_block_clear): Similarly.  Also correct calculation of\n\tinstruction count.\n\nFrom-SVN: r210201", "tree": {"sha": "40a7b0a9c432a98bf6b9d6e62ddc5371a87001e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40a7b0a9c432a98bf6b9d6e62ddc5371a87001e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42aea2d8f9282b7bb34fedc7f125840a393ee639", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42aea2d8f9282b7bb34fedc7f125840a393ee639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42aea2d8f9282b7bb34fedc7f125840a393ee639", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42aea2d8f9282b7bb34fedc7f125840a393ee639/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7500b256b0f314c4dab8a590cffc6c58efa3ab23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7500b256b0f314c4dab8a590cffc6c58efa3ab23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7500b256b0f314c4dab8a590cffc6c58efa3ab23"}], "stats": {"total": 60, "additions": 53, "deletions": 7}, "files": [{"sha": "354cdb9378b41abb0cda73af698279731392fef8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42aea2d8f9282b7bb34fedc7f125840a393ee639/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42aea2d8f9282b7bb34fedc7f125840a393ee639/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42aea2d8f9282b7bb34fedc7f125840a393ee639", "patch": "@@ -1,3 +1,11 @@\n+2014-05-08  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/60737\n+\t* config/rs6000/rs6000.c (expand_block_move): Allow 64-bit\n+\tloads and stores when -mno-strict-align at any alignment.\n+\t(expand_block_clear): Similarly.  Also correct calculation of\n+\tinstruction count.\n+\n 2014-05-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \tPR middle-end/39246"}, {"sha": "7b19b422662eed24f29f55c4c7520147bd18d0af", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42aea2d8f9282b7bb34fedc7f125840a393ee639/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42aea2d8f9282b7bb34fedc7f125840a393ee639/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=42aea2d8f9282b7bb34fedc7f125840a393ee639", "patch": "@@ -15443,7 +15443,7 @@ expand_block_clear (rtx operands[])\n      load zero and three to do clearing.  */\n   if (TARGET_ALTIVEC && align >= 128)\n     clear_step = 16;\n-  else if (TARGET_POWERPC64 && align >= 32)\n+  else if (TARGET_POWERPC64 && (align >= 64 || !STRICT_ALIGNMENT))\n     clear_step = 8;\n   else if (TARGET_SPE && align >= 64)\n     clear_step = 8;\n@@ -15471,12 +15471,27 @@ expand_block_clear (rtx operands[])\n           mode = V2SImode;\n         }\n       else if (bytes >= 8 && TARGET_POWERPC64\n-\t       /* 64-bit loads and stores require word-aligned\n-\t\t  displacements.  */\n-\t       && (align >= 64 || (!STRICT_ALIGNMENT && align >= 32)))\n+\t       && (align >= 64 || !STRICT_ALIGNMENT))\n \t{\n \t  clear_bytes = 8;\n \t  mode = DImode;\n+\t  if (offset == 0 && align < 64)\n+\t    {\n+\t      rtx addr;\n+\n+\t      /* If the address form is reg+offset with offset not a\n+\t\t multiple of four, reload into reg indirect form here\n+\t\t rather than waiting for reload.  This way we get one\n+\t\t reload, not one per store.  */\n+\t      addr = XEXP (orig_dest, 0);\n+\t      if ((GET_CODE (addr) == PLUS || GET_CODE (addr) == LO_SUM)\n+\t\t  && GET_CODE (XEXP (addr, 1)) == CONST_INT\n+\t\t  && (INTVAL (XEXP (addr, 1)) & 3) != 0)\n+\t\t{\n+\t\t  addr = copy_addr_to_reg (addr);\n+\t\t  orig_dest = replace_equiv_address (orig_dest, addr);\n+\t\t}\n+\t    }\n \t}\n       else if (bytes >= 4 && (align >= 32 || !STRICT_ALIGNMENT))\n \t{\t\t\t/* move 4 bytes */\n@@ -15604,13 +15619,36 @@ expand_block_move (rtx operands[])\n \t  gen_func.movmemsi = gen_movmemsi_4reg;\n \t}\n       else if (bytes >= 8 && TARGET_POWERPC64\n-\t       /* 64-bit loads and stores require word-aligned\n-\t\t  displacements.  */\n-\t       && (align >= 64 || (!STRICT_ALIGNMENT && align >= 32)))\n+\t       && (align >= 64 || !STRICT_ALIGNMENT))\n \t{\n \t  move_bytes = 8;\n \t  mode = DImode;\n \t  gen_func.mov = gen_movdi;\n+\t  if (offset == 0 && align < 64)\n+\t    {\n+\t      rtx addr;\n+\n+\t      /* If the address form is reg+offset with offset not a\n+\t\t multiple of four, reload into reg indirect form here\n+\t\t rather than waiting for reload.  This way we get one\n+\t\t reload, not one per load and/or store.  */\n+\t      addr = XEXP (orig_dest, 0);\n+\t      if ((GET_CODE (addr) == PLUS || GET_CODE (addr) == LO_SUM)\n+\t\t  && GET_CODE (XEXP (addr, 1)) == CONST_INT\n+\t\t  && (INTVAL (XEXP (addr, 1)) & 3) != 0)\n+\t\t{\n+\t\t  addr = copy_addr_to_reg (addr);\n+\t\t  orig_dest = replace_equiv_address (orig_dest, addr);\n+\t\t}\n+\t      addr = XEXP (orig_src, 0);\n+\t      if ((GET_CODE (addr) == PLUS || GET_CODE (addr) == LO_SUM)\n+\t\t  && GET_CODE (XEXP (addr, 1)) == CONST_INT\n+\t\t  && (INTVAL (XEXP (addr, 1)) & 3) != 0)\n+\t\t{\n+\t\t  addr = copy_addr_to_reg (addr);\n+\t\t  orig_src = replace_equiv_address (orig_src, addr);\n+\t\t}\n+\t    }\n \t}\n       else if (TARGET_STRING && bytes > 4 && !TARGET_POWERPC64)\n \t{\t\t\t/* move up to 8 bytes at a time */"}]}