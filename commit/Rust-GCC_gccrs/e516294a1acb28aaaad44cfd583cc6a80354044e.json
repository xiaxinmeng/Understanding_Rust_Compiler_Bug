{"sha": "e516294a1acb28aaaad44cfd583cc6a80354044e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUxNjI5NGExYWNiMjhhYWFhZDQ0Y2ZkNTgzY2M2YTgwMzU0MDQ0ZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-03-03T21:36:13Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-03-04T15:51:34Z"}, "message": "analyzer: handle __builtin_expect [PR93993]\n\nThe false warning:\n pr93993.f90:19:0:\n\n   19 |     allocate (tm) ! { dg-warning \"dereference of possibly-NULL\" }\n      |\n Warning: dereference of possibly-NULL \u2018_6\u2019 [CWE-690] [-Wanalyzer-possible-null-dereference]\n\nin the reproducer for PR analyzer/93993 is due to a BUILTIN_EXPECT in\nthe chain of SSA expressions between the malloc and the condition\nguarding the edge: the analyzer didn't \"know\" about the relationship\nbetween initial argument to BUILTIN_EXPECT and the return value.\n\nThis patch implements support for BUILTIN_EXPECT so that the return\nvalue is known to be equal to the initial argument.  This adds\nconstraints when exploring the CFG edges, eliminating the above\nfalse positive.\n\nDoing so also eliminated the leak warning from the reproducer.  The\nissue was that leaked_pvs was empty within\nimpl_region_model_context::on_state_leak, due to the leaking region\nbeing a view, of type struct Pdtet_8 *, of a region of type\nstruct pdtet_8 *, which led region_model::get_representative_path_var to\nreturn a NULL_TREE value.\n\nHence the patch also implements view support for\nregion_model::get_representative_path_var, restoring the leak\ndiagnostic, albeit changing the wording to:\n\n  Warning: leak of \u2018(struct Pdtet_8) qb\u2019 [CWE-401] [-Wanalyzer-malloc-leak]\n\nIt's not clear to me if we should emit leaks at a fortran \"end program\"\n(currently we suppress them for leaks at the end of main).\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93993\n\t* region-model.cc (region_model::on_call_pre): Handle\n\tBUILT_IN_EXPECT and its variants.\n\t(region_model::add_any_constraints_from_ssa_def_stmt): Split out\n\tgassign handling into add_any_constraints_from_gassign; add gcall\n\thandling.\n\t(region_model::add_any_constraints_from_gassign): New function,\n\tbased on the above.  Add handling for NOP_EXPR.\n\t(region_model::add_any_constraints_from_gcall): New function.\n\t(region_model::get_representative_path_var): Handle views.\n\t* region-model.h\n\t(region_model::add_any_constraints_from_ssa_def_stmt): New decl.\n\t(region_model::add_any_constraints_from_gassign): New decl.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93993\n\t* gcc.dg/analyzer/expect-1.c: New test.\n\t* gcc.dg/analyzer/malloc-4.c: New test.\n\t* gfortran.dg/analyzer/pr93993.f90: Remove xfail from dg-bogus.\n\tMove location of leak warning and update message.", "tree": {"sha": "7af2e853701f5a67645df47ec842978b74066c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7af2e853701f5a67645df47ec842978b74066c54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e516294a1acb28aaaad44cfd583cc6a80354044e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e516294a1acb28aaaad44cfd583cc6a80354044e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e516294a1acb28aaaad44cfd583cc6a80354044e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e516294a1acb28aaaad44cfd583cc6a80354044e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d66e153b40ed000af30a9e569a05f34d5d576aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d66e153b40ed000af30a9e569a05f34d5d576aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d66e153b40ed000af30a9e569a05f34d5d576aa"}], "stats": {"total": 161, "additions": 152, "deletions": 9}, "files": [{"sha": "c4724cb090d069ace5ea2ab190ea3c266ecf6d39", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e516294a1acb28aaaad44cfd583cc6a80354044e/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e516294a1acb28aaaad44cfd583cc6a80354044e/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=e516294a1acb28aaaad44cfd583cc6a80354044e", "patch": "@@ -1,3 +1,19 @@\n+2020-03-04  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93993\n+\t* region-model.cc (region_model::on_call_pre): Handle\n+\tBUILT_IN_EXPECT and its variants.\n+\t(region_model::add_any_constraints_from_ssa_def_stmt): Split out\n+\tgassign handling into add_any_constraints_from_gassign; add gcall\n+\thandling.\n+\t(region_model::add_any_constraints_from_gassign): New function,\n+\tbased on the above.  Add handling for NOP_EXPR.\n+\t(region_model::add_any_constraints_from_gcall): New function.\n+\t(region_model::get_representative_path_var): Handle views.\n+\t* region-model.h\n+\t(region_model::add_any_constraints_from_ssa_def_stmt): New decl.\n+\t(region_model::add_any_constraints_from_gassign): New decl.\n+\n 2020-03-04  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93993"}, {"sha": "6813117968f83e312e6b9e50f07388feec50d04d", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 65, "deletions": 6, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e516294a1acb28aaaad44cfd583cc6a80354044e/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e516294a1acb28aaaad44cfd583cc6a80354044e/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=e516294a1acb28aaaad44cfd583cc6a80354044e", "patch": "@@ -4204,6 +4204,19 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt)\n \t    }\n \t  return false;\n \t}\n+      else if (gimple_call_builtin_p (call, BUILT_IN_EXPECT)\n+\t       || gimple_call_builtin_p (call, BUILT_IN_EXPECT_WITH_PROBABILITY)\n+\t       || gimple_call_internal_p (call, IFN_BUILTIN_EXPECT))\n+\t{\n+\t  /* __builtin_expect's return value is its initial argument.  */\n+\t  if (!lhs_rid.null_p ())\n+\t    {\n+\t      tree initial_arg = gimple_call_arg (call, 0);\n+\t      svalue_id sid = get_rvalue (initial_arg, ctxt);\n+\t      set_value (lhs_rid, sid, ctxt);\n+\t    }\n+\t  return false;\n+\t}\n       else if (is_named_call_p (callee_fndecl, \"strlen\", call, 1))\n \t{\n \t  region_id buf_rid = deref_rvalue (gimple_call_arg (call, 0), ctxt);\n@@ -5447,28 +5460,46 @@ region_model::add_any_constraints_from_ssa_def_stmt (tree lhs,\n   if (TREE_CODE (lhs) != SSA_NAME)\n     return;\n \n-  if (rhs != boolean_false_node)\n+  if (!zerop (rhs))\n     return;\n \n   if (op != NE_EXPR && op != EQ_EXPR)\n     return;\n \n+  gimple *def_stmt = SSA_NAME_DEF_STMT (lhs);\n+  if (const gassign *assign = dyn_cast<gassign *> (def_stmt))\n+    add_any_constraints_from_gassign (op, rhs, assign, ctxt);\n+  else if (gcall *call = dyn_cast<gcall *> (def_stmt))\n+    add_any_constraints_from_gcall (op, rhs, call, ctxt);\n+}\n+\n+/* Add any constraints for an SSA_NAME defined by ASSIGN\n+   where the result OP RHS.  */\n+\n+void\n+region_model::add_any_constraints_from_gassign (enum tree_code op,\n+\t\t\t\t\t\ttree rhs,\n+\t\t\t\t\t\tconst gassign *assign,\n+\t\t\t\t\t\tregion_model_context *ctxt)\n+{\n   /* We have either\n      - \"LHS != false\" (i.e. LHS is true), or\n      - \"LHS == false\" (i.e. LHS is false).  */\n   bool is_true = op == NE_EXPR;\n \n-  gimple *def_stmt = SSA_NAME_DEF_STMT (lhs);\n-  gassign *assign = dyn_cast<gassign *> (def_stmt);\n-  if (!assign)\n-    return;\n-\n   enum tree_code rhs_code = gimple_assign_rhs_code (assign);\n \n   switch (rhs_code)\n     {\n     default:\n       break;\n+\n+    case NOP_EXPR:\n+      {\n+\tadd_constraint (gimple_assign_rhs1 (assign), op, rhs, ctxt);\n+      }\n+      break;\n+\n     case BIT_AND_EXPR:\n       {\n \tif (is_true)\n@@ -5514,6 +5545,24 @@ region_model::add_any_constraints_from_ssa_def_stmt (tree lhs,\n     }\n }\n \n+/* Add any constraints for an SSA_NAME defined by CALL\n+   where the result OP RHS.  */\n+\n+void\n+region_model::add_any_constraints_from_gcall (enum tree_code op,\n+\t\t\t\t\t      tree rhs,\n+\t\t\t\t\t      const gcall *call,\n+\t\t\t\t\t      region_model_context *ctxt)\n+{\n+  if (gimple_call_builtin_p (call, BUILT_IN_EXPECT)\n+      || gimple_call_builtin_p (call, BUILT_IN_EXPECT_WITH_PROBABILITY)\n+      || gimple_call_internal_p (call, IFN_BUILTIN_EXPECT))\n+    {\n+      /* __builtin_expect's return value is its initial argument.  */\n+      add_constraint (gimple_call_arg (call, 0), op, rhs, ctxt);\n+    }\n+}\n+\n /* Determine what is known about the condition \"LHS OP RHS\" within\n    this model.\n    Use CTXT for reporting any diagnostics associated with the accesses.  */\n@@ -5608,6 +5657,16 @@ region_model::get_representative_path_var (region_id rid) const\n   region *parent_reg = get_region (parent_rid);\n   if (parent_reg)\n     {\n+      if (reg->is_view_p ())\n+\t{\n+\t  path_var parent_pv = get_representative_path_var (parent_rid);\n+\t  if (parent_pv.m_tree && reg->get_type ())\n+\t    return path_var (build1 (NOP_EXPR,\n+\t\t\t\t     TREE_TYPE (reg->get_type ()),\n+\t\t\t\t     parent_pv.m_tree),\n+\t\t\t     parent_pv.m_stack_depth);\n+\t}\n+\n       if (parent_reg->get_kind () == RK_STRUCT)\n \t{\n \t  map_region *parent_map_region = (map_region *)parent_reg;"}, {"sha": "6d49f00cfe386859d85673449d066a3f52ee7d23", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e516294a1acb28aaaad44cfd583cc6a80354044e/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e516294a1acb28aaaad44cfd583cc6a80354044e/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=e516294a1acb28aaaad44cfd583cc6a80354044e", "patch": "@@ -1850,6 +1850,14 @@ class region_model\n \t\t\t\t\t      enum tree_code op,\n \t\t\t\t\t      tree rhs,\n \t\t\t\t\t      region_model_context *ctxt);\n+  void add_any_constraints_from_gassign (enum tree_code op,\n+\t\t\t\t\t tree rhs,\n+\t\t\t\t\t const gassign *assign,\n+\t\t\t\t\t region_model_context *ctxt);\n+  void add_any_constraints_from_gcall (enum tree_code op,\n+\t\t\t\t       tree rhs,\n+\t\t\t\t       const gcall *call,\n+\t\t\t\t       region_model_context *ctxt);\n \n   void update_for_call_superedge (const call_superedge &call_edge,\n \t\t\t\t  region_model_context *ctxt);"}, {"sha": "af4470d6303ffc814df209483f7bcc421e0c8d82", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e516294a1acb28aaaad44cfd583cc6a80354044e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e516294a1acb28aaaad44cfd583cc6a80354044e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e516294a1acb28aaaad44cfd583cc6a80354044e", "patch": "@@ -1,3 +1,11 @@\n+2020-03-04  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93993\n+\t* gcc.dg/analyzer/expect-1.c: New test.\n+\t* gcc.dg/analyzer/malloc-4.c: New test.\n+\t* gfortran.dg/analyzer/pr93993.f90: Remove xfail from dg-bogus.\n+\tMove location of leak warning and update message.\n+\n 2020-03-04  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93993"}, {"sha": "e538f77741dff860ecbd1e93d2c4d8e4d901a6b5", "filename": "gcc/testsuite/gcc.dg/analyzer/expect-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e516294a1acb28aaaad44cfd583cc6a80354044e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fexpect-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e516294a1acb28aaaad44cfd583cc6a80354044e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fexpect-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fexpect-1.c?ref=e516294a1acb28aaaad44cfd583cc6a80354044e", "patch": "@@ -0,0 +1,32 @@\n+#define NULL ((void*)0)\n+\n+void *test_1 (void)\n+{\n+  int *p = (int *)__builtin_malloc (sizeof (int));\n+  if (__builtin_expect (p != NULL, 1))\n+    {\n+      *p = 42;\n+      return p;\n+    }\n+  return NULL;    \n+}\n+\n+void *test_2 (void)\n+{\n+  int *p = (int *)__builtin_malloc (sizeof (int));\n+  if (__builtin_expect (p == NULL, 1))\n+    return NULL;\n+\n+  *p = 42;\n+  return p;\n+}\n+\n+void *test_3 (void)\n+{\n+  int *p = (int *)__builtin_malloc (sizeof (int));\n+  if (__builtin_expect_with_probability (p == NULL, 1, 0.5f))\n+    return NULL;\n+\n+  *p = 42;\n+  return p;\n+}"}, {"sha": "94d2825a33e485715f90a5a5986a6f56ea22c172", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e516294a1acb28aaaad44cfd583cc6a80354044e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e516294a1acb28aaaad44cfd583cc6a80354044e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-4.c?ref=e516294a1acb28aaaad44cfd583cc6a80354044e", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-additional-options \"-Wno-incompatible-pointer-types\" } */\n+\n+#include <stdlib.h>\n+\n+struct foo;\n+struct bar;\n+void *hv (struct foo **tm)\n+{\n+  void *p = __builtin_malloc (4);\n+  *tm = p;\n+  if (!p)\n+    abort ();\n+  return p; /* { dg-warning \"leak of 'tm'\" } */\n+}\n+\n+void a5 (void)\n+{\n+  struct bar *qb = NULL;\n+  hv (&qb);\n+} /* { dg-warning \"leak of '\\\\(struct foo\\\\)qb'\" } */"}, {"sha": "230b99e4fcde88d05b96d356ecf795132c4dc5ef", "filename": "gcc/testsuite/gfortran.dg/analyzer/pr93993.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e516294a1acb28aaaad44cfd583cc6a80354044e/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fpr93993.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e516294a1acb28aaaad44cfd583cc6a80354044e/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fpr93993.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fpr93993.f90?ref=e516294a1acb28aaaad44cfd583cc6a80354044e", "patch": "@@ -16,9 +16,9 @@ function hv (tm) result(ce)\n     type (et(real_kind=za)), allocatable, target :: tm\n     type (et(real_kind=za)), pointer :: ce\n \n-    allocate (tm) ! { dg-bogus \"dereference of possibly-NULL\" \"\" { xfail *-*-* } }\n+    allocate (tm) ! { dg-bogus \"dereference of possibly-NULL\" }\n     ce => tm\n-  end function hv ! { dg-warning \"leak of 'tm'\" }\n+  end function hv\n \n end module gg\n \n@@ -30,4 +30,4 @@ program a5\n   type (et(real_kind=za)), pointer :: vt\n \n   vt => hv (qb)\n-end program a5\n+end program a5 ! { dg-warning \"leak of '.*qb'\" }"}]}