{"sha": "aaa49b45f6e1fbfc07ae25496b0d9361161a4c80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFhNDliNDVmNmUxZmJmYzA3YWUyNTQ5NmIwZDkzNjExNjFhNGM4MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-11-22T10:02:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-22T10:02:19Z"}, "message": "re PR debug/83084 (-fcompare-debug failure on ppc64le)\n\n\tPR debug/83084\n\t* valtrack.c (propagate_for_debug_subst, propagate_for_debug): Reset\n\tdebug insns if they would contain UNSPEC_VOLATILE or volatile asm.\n\t(dead_debug_insert_temp): Likewise, but also ignore even non-volatile\n\tasm.\n\n\t* g++.dg/opt/pr83084.C: New test.\n\nFrom-SVN: r255051", "tree": {"sha": "0a3100c52e199af135731b092476284d5cd2ecaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a3100c52e199af135731b092476284d5cd2ecaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaa49b45f6e1fbfc07ae25496b0d9361161a4c80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaa49b45f6e1fbfc07ae25496b0d9361161a4c80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaa49b45f6e1fbfc07ae25496b0d9361161a4c80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaa49b45f6e1fbfc07ae25496b0d9361161a4c80/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2998ed1dc4389e2d648ba376f1eca2c165a2717", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2998ed1dc4389e2d648ba376f1eca2c165a2717", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2998ed1dc4389e2d648ba376f1eca2c165a2717"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "edd3621c74198a376c8d1ef5ca8d615ed199ffa1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa49b45f6e1fbfc07ae25496b0d9361161a4c80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa49b45f6e1fbfc07ae25496b0d9361161a4c80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaa49b45f6e1fbfc07ae25496b0d9361161a4c80", "patch": "@@ -1,5 +1,11 @@\n 2017-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/83084\n+\t* valtrack.c (propagate_for_debug_subst, propagate_for_debug): Reset\n+\tdebug insns if they would contain UNSPEC_VOLATILE or volatile asm.\n+\t(dead_debug_insert_temp): Likewise, but also ignore even non-volatile\n+\tasm.\n+\n \tPR middle-end/82875\n \t* optabs.c (expand_doubleword_mult, expand_binop): Before calling\n \texpand_binop with *mul_widen_optab, make sure at least one of the"}, {"sha": "7bfd96b8e0221c26924b2eda5bab71e3af2936bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa49b45f6e1fbfc07ae25496b0d9361161a4c80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa49b45f6e1fbfc07ae25496b0d9361161a4c80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aaa49b45f6e1fbfc07ae25496b0d9361161a4c80", "patch": "@@ -1,11 +1,12 @@\n 2017-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/83084\n+\t* g++.dg/opt/pr83084.C: New test.\n+\n \tPR middle-end/82875\n \t* gcc.dg/pr82875.c: New test.\n \t* gcc.c-torture/compile/pr82875.c: New test.\n \n-2017-11-22  Jakub Jelinek  <jakub@redhat.com>\n-\n \tPR debug/83034\n \t* gcc.dg/pr83034.c: New test.\n "}, {"sha": "d21e30878ec282ecdc8d5004bdd841b1f6a65798", "filename": "gcc/testsuite/g++.dg/opt/pr83084.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa49b45f6e1fbfc07ae25496b0d9361161a4c80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr83084.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa49b45f6e1fbfc07ae25496b0d9361161a4c80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr83084.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr83084.C?ref=aaa49b45f6e1fbfc07ae25496b0d9361161a4c80", "patch": "@@ -0,0 +1,16 @@\n+// PR debug/83084\n+// { dg-do compile }\n+// { dg-options \"-O2 -fcompare-debug -Wno-return-type\" }\n+\n+enum E { F };\n+template <E = F> struct A {\n+  bool foo ();\n+  int b;\n+};\n+template <> bool A<>::foo () {\n+  int a;\n+  do\n+    if (a)\n+      return false;\n+  while (__atomic_compare_exchange_n (&b, &a, 0, 1, 4, 0));\n+}"}, {"sha": "d4bab00c9534cb1ce41d3d131a022c34b4334810", "filename": "gcc/valtrack.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa49b45f6e1fbfc07ae25496b0d9361161a4c80/gcc%2Fvaltrack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa49b45f6e1fbfc07ae25496b0d9361161a4c80/gcc%2Fvaltrack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvaltrack.c?ref=aaa49b45f6e1fbfc07ae25496b0d9361161a4c80", "patch": "@@ -171,10 +171,13 @@ propagate_for_debug_subst (rtx from, const_rtx old_rtx, void *data)\n \tif (REG_P (*iter) && ++cnt > 1)\n \t  {\n \t    rtx dval = make_debug_expr_from_rtl (old_rtx);\n+\t    rtx to = pair->to;\n+\t    if (volatile_insn_p (to))\n+\t      to = gen_rtx_UNKNOWN_VAR_LOC ();\n \t    /* Emit a debug bind insn.  */\n \t    rtx bind\n \t      = gen_rtx_VAR_LOCATION (GET_MODE (old_rtx),\n-\t\t\t\t      DEBUG_EXPR_TREE_DECL (dval), pair->to,\n+\t\t\t\t      DEBUG_EXPR_TREE_DECL (dval), to,\n \t\t\t\t      VAR_INIT_STATUS_INITIALIZED);\n \t    rtx_insn *bind_insn = emit_debug_insn_before (bind, pair->insn);\n \t    df_insn_rescan (bind_insn);\n@@ -217,6 +220,8 @@ propagate_for_debug (rtx_insn *insn, rtx_insn *last, rtx dest, rtx src,\n \t\t\t\t\t dest, propagate_for_debug_subst, &p);\n \t  if (loc == INSN_VAR_LOCATION_LOC (insn))\n \t    continue;\n+\t  if (volatile_insn_p (loc))\n+\t    loc = gen_rtx_UNKNOWN_VAR_LOC ();\n \t  INSN_VAR_LOCATION_LOC (insn) = loc;\n \t  df_insn_rescan (insn);\n \t}\n@@ -660,6 +665,12 @@ dead_debug_insert_temp (struct dead_debug_local *debug, unsigned int uregno,\n \t\t}\n \t      return 0;\n \t    }\n+\t  /* Asm in DEBUG_INSN is never useful, we can't emit debug info for\n+\t     that.  And for volatile_insn_p, it is actually harmful\n+\t     - DEBUG_INSNs shouldn't have any side-effects.  */\n+\t  else if (GET_CODE (src) == ASM_OPERANDS\n+\t\t   || volatile_insn_p (src))\n+\t    set = NULL_RTX;\n \t}\n \n       /* ??? Should we try to extract it from a PARALLEL?  */"}]}