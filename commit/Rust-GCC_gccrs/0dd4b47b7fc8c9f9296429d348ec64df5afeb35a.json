{"sha": "0dd4b47b7fc8c9f9296429d348ec64df5afeb35a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRkNGI0N2I3ZmM4YzlmOTI5NjQyOWQzNDhlYzY0ZGY1YWZlYjM1YQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-12-21T16:48:59Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-12-21T16:48:59Z"}, "message": "tree-data-ref.c (estimate_niter_from_size_of_data): Replace fold_build2 with fold_binary.\n\n\t* tree-data-ref.c (estimate_niter_from_size_of_data): Replace\n\tfold_build2 with fold_binary.\n\t* tree-ssa-ccp.c (visit_assignment, maybe_fold_stmt_addition):\n\tReplace fold_build1 with fold_unary.\n\t* tree-ssa-reassoc.c (optimize_ops_list): Replace fold_build2\n\twith fold_binary.\n\nFrom-SVN: r108913", "tree": {"sha": "0990c6705e08d5b4c38ec5a270b8925019dc291c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0990c6705e08d5b4c38ec5a270b8925019dc291c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dd4b47b7fc8c9f9296429d348ec64df5afeb35a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd4b47b7fc8c9f9296429d348ec64df5afeb35a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dd4b47b7fc8c9f9296429d348ec64df5afeb35a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd4b47b7fc8c9f9296429d348ec64df5afeb35a/comments", "author": null, "committer": null, "parents": [{"sha": "ad44e786b879ce503b59b9e3afd5abb821133f88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad44e786b879ce503b59b9e3afd5abb821133f88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad44e786b879ce503b59b9e3afd5abb821133f88"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "69ca302d6352e5d792ada19ce03f58a79911052e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd4b47b7fc8c9f9296429d348ec64df5afeb35a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd4b47b7fc8c9f9296429d348ec64df5afeb35a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0dd4b47b7fc8c9f9296429d348ec64df5afeb35a", "patch": "@@ -1,3 +1,12 @@\n+2005-12-21  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* tree-data-ref.c (estimate_niter_from_size_of_data): Replace\n+\tfold_build2 with fold_binary.\n+\t* tree-ssa-ccp.c (visit_assignment, maybe_fold_stmt_addition):\n+\tReplace fold_build1 with fold_unary.\n+\t* tree-ssa-reassoc.c (optimize_ops_list): Replace fold_build2\n+\twith fold_binary.\n+\n 2005-12-21  Steven Bosscher  <stevenb@suse.de>\n \n \tPR rtl-optimization/25196"}, {"sha": "d1f2bf58c6858ebcef4995b16b7fba1bf0b5d441", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd4b47b7fc8c9f9296429d348ec64df5afeb35a/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd4b47b7fc8c9f9296429d348ec64df5afeb35a/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=0dd4b47b7fc8c9f9296429d348ec64df5afeb35a", "patch": "@@ -786,7 +786,7 @@ estimate_niter_from_size_of_data (struct loop *loop,\n       && TREE_CODE (step) == INTEGER_CST)\n     {\n       tree i_plus_s = fold_build2 (PLUS_EXPR, integer_type_node, init, step);\n-      tree sign = fold_build2 (GT_EXPR, boolean_type_node, i_plus_s, init);\n+      tree sign = fold_binary (GT_EXPR, boolean_type_node, i_plus_s, init);\n \n       if (sign == boolean_true_node)\n \testimation = fold_build2 (CEIL_DIV_EXPR, integer_type_node,"}, {"sha": "673104556905054712dd1771c5727597ef7be83c", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd4b47b7fc8c9f9296429d348ec64df5afeb35a/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd4b47b7fc8c9f9296429d348ec64df5afeb35a/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=0dd4b47b7fc8c9f9296429d348ec64df5afeb35a", "patch": "@@ -1191,9 +1191,9 @@ visit_assignment (tree stmt, tree *output_p)\n     if (TREE_CODE (orig_lhs) == VIEW_CONVERT_EXPR\n \t&& val.lattice_val == CONSTANT)\n       {\n-\ttree w = fold_build1 (VIEW_CONVERT_EXPR,\n-\t\t\t      TREE_TYPE (TREE_OPERAND (orig_lhs, 0)),\n-\t\t\t      val.value);\n+\ttree w = fold_unary (VIEW_CONVERT_EXPR,\n+\t\t\t     TREE_TYPE (TREE_OPERAND (orig_lhs, 0)),\n+\t\t\t     val.value);\n \n \torig_lhs = TREE_OPERAND (orig_lhs, 0);\n \tif (w && is_gimple_min_invariant (w))\n@@ -1901,9 +1901,9 @@ maybe_fold_stmt_addition (tree expr)\n     {\n       if (TYPE_UNSIGNED (TREE_TYPE (op1)))\n \treturn NULL;\n-      op1 = fold_build1 (NEGATE_EXPR, TREE_TYPE (op1), op1);\n+      op1 = fold_unary (NEGATE_EXPR, TREE_TYPE (op1), op1);\n       /* ??? In theory fold should always produce another integer.  */\n-      if (TREE_CODE (op1) != INTEGER_CST)\n+      if (op1 == NULL || TREE_CODE (op1) != INTEGER_CST)\n \treturn NULL;\n     }\n "}, {"sha": "879e5702e92b32d6c30b6984a0761d6747d4d729", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd4b47b7fc8c9f9296429d348ec64df5afeb35a/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd4b47b7fc8c9f9296429d348ec64df5afeb35a/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=0dd4b47b7fc8c9f9296429d348ec64df5afeb35a", "patch": "@@ -755,10 +755,10 @@ optimize_ops_list (enum tree_code opcode,\n \t  && lang_hooks.types_compatible_p (TREE_TYPE (oelm1->op),\n \t\t\t\t\t    TREE_TYPE (oelast->op)))\n \t{\n-\t  tree folded = fold_build2 (opcode, TREE_TYPE (oelm1->op),\n+\t  tree folded = fold_binary (opcode, TREE_TYPE (oelm1->op),\n \t\t\t\t     oelm1->op, oelast->op);\n \n-\t  if (is_gimple_min_invariant (folded))\n+\t  if (folded && is_gimple_min_invariant (folded))\n \t    {\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\tfprintf (dump_file, \"Merging constants\\n\");"}]}