{"sha": "e729c8e003707934687e0da85e4b151a553a28d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcyOWM4ZTAwMzcwNzkzNDY4N2UwZGE4NWU0YjE1MWE1NTNhMjhkOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-12-14T11:12:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-12-14T11:12:52Z"}, "message": "re PR tree-optimization/83418 (ICE in extract_range_for_var_from_comparison_expr, at vr-values.c:448)\n\n2017-12-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/83418\n\t* vr-values.c (vr_values::extract_range_for_var_from_comparison_expr):\n\tInstead of asserting we don't get unfolded comparisons deal with\n\tthem.\n\n\t* gcc.dg/torture/pr83418.c: New testcase.\n\nFrom-SVN: r255628", "tree": {"sha": "ac22b820254a45fdcb0e1e51f9a7f08bf9f38e90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac22b820254a45fdcb0e1e51f9a7f08bf9f38e90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e729c8e003707934687e0da85e4b151a553a28d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e729c8e003707934687e0da85e4b151a553a28d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e729c8e003707934687e0da85e4b151a553a28d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e729c8e003707934687e0da85e4b151a553a28d9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6dfb83e8d8625c1845a3df51e5519d7904700add", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dfb83e8d8625c1845a3df51e5519d7904700add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dfb83e8d8625c1845a3df51e5519d7904700add"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "d18230841f4cf0e7d582ec0da71f6fd65d06100f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e729c8e003707934687e0da85e4b151a553a28d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e729c8e003707934687e0da85e4b151a553a28d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e729c8e003707934687e0da85e4b151a553a28d9", "patch": "@@ -1,3 +1,10 @@\n+2017-12-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/83418\n+\t* vr-values.c (vr_values::extract_range_for_var_from_comparison_expr):\n+\tInstead of asserting we don't get unfolded comparisons deal with\n+\tthem.\n+\n 2017-12-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/83396"}, {"sha": "811568e7d2a4babd4c65fce1612873870a1a5e0f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e729c8e003707934687e0da85e4b151a553a28d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e729c8e003707934687e0da85e4b151a553a28d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e729c8e003707934687e0da85e4b151a553a28d9", "patch": "@@ -1,3 +1,8 @@\n+2017-12-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/83418\n+\t* gcc.dg/torture/pr83418.c: New testcase.\n+\n 2017-12-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/83396"}, {"sha": "b545a39a80359a5850ec6000a8940f604971a080", "filename": "gcc/testsuite/gcc.dg/torture/pr83418.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e729c8e003707934687e0da85e4b151a553a28d9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr83418.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e729c8e003707934687e0da85e4b151a553a28d9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr83418.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr83418.c?ref=e729c8e003707934687e0da85e4b151a553a28d9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+void\n+yj (int j4)\n+{\n+  int t3;\n+\n+  for (t3 = 0; t3 < 6; ++t3)\n+    {\n+      short int v4 = t3;\n+\n+      if (v4 == j4 || v4 > t3)\n+\tfor (;;)\n+\t  {\n+\t  }\n+    }\n+}"}, {"sha": "794b4635f9ec50306ba82dbfa91393f6a971ed44", "filename": "gcc/vr-values.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e729c8e003707934687e0da85e4b151a553a28d9/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e729c8e003707934687e0da85e4b151a553a28d9/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=e729c8e003707934687e0da85e4b151a553a28d9", "patch": "@@ -445,11 +445,12 @@ vr_values::extract_range_for_var_from_comparison_expr (tree var,\n   tree  min, max, type;\n   value_range *limit_vr;\n   type = TREE_TYPE (var);\n-  gcc_assert (limit != var);\n \n   /* For pointer arithmetic, we only keep track of pointer equality\n-     and inequality.  */\n-  if (POINTER_TYPE_P (type) && cond_code != NE_EXPR && cond_code != EQ_EXPR)\n+     and inequality.  If we arrive here with unfolded conditions like\n+     _1 > _1 do not derive anything.  */\n+  if ((POINTER_TYPE_P (type) && cond_code != NE_EXPR && cond_code != EQ_EXPR)\n+      || limit == var)\n     {\n       set_value_range_to_varying (vr_p);\n       return;"}]}