{"sha": "eb45755f642d26039a0422bfbc457b08c6a3fcde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI0NTc1NWY2NDJkMjYwMzlhMDQyMmJmYmM0NTdiMDhjNmEzZmNkZQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2010-03-18T12:20:50Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2010-03-18T12:20:50Z"}, "message": "re PR tree-optimization/43402 (dom1 miscompiles binary search)\n\n\tPR tree-optimization/43402\n\t* tree-cfgcleanup.c (cleanup_control_expr_graph): Don't follow\n\tPHI chains of ssa names registered for update.\n\ntestsuite/\n\t* gcc.dg/pr43402.c: New testcase.\n\nFrom-SVN: r157538", "tree": {"sha": "a7e63774db500194c99a26efe5321f3fdbbffe5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7e63774db500194c99a26efe5321f3fdbbffe5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb45755f642d26039a0422bfbc457b08c6a3fcde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb45755f642d26039a0422bfbc457b08c6a3fcde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb45755f642d26039a0422bfbc457b08c6a3fcde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb45755f642d26039a0422bfbc457b08c6a3fcde/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8269067b2c125976c2f728ef04d99bdb6ee31267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8269067b2c125976c2f728ef04d99bdb6ee31267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8269067b2c125976c2f728ef04d99bdb6ee31267"}], "stats": {"total": 85, "additions": 81, "deletions": 4}, "files": [{"sha": "0e9101d4fea64f4cd61c06128dfd62609f4b59da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb45755f642d26039a0422bfbc457b08c6a3fcde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb45755f642d26039a0422bfbc457b08c6a3fcde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb45755f642d26039a0422bfbc457b08c6a3fcde", "patch": "@@ -1,3 +1,9 @@\n+2010-03-18  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/43402\n+\t* tree-cfgcleanup.c (cleanup_control_expr_graph): Don't follow\n+\tPHI chains of ssa names registered for update.\n+\n 2010-03-17  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR target/42427"}, {"sha": "bc56c911ec3de351289d2c85f885abf72ef8cde4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb45755f642d26039a0422bfbc457b08c6a3fcde/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb45755f642d26039a0422bfbc457b08c6a3fcde/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb45755f642d26039a0422bfbc457b08c6a3fcde", "patch": "@@ -1,3 +1,8 @@\n+2010-03-18  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/43402\n+\t* gcc.dg/pr43402.c: New testcase.\n+\n 2010-03-17  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR target/42427"}, {"sha": "82234c74a85789689c8969ba21906a35fc20552d", "filename": "gcc/testsuite/gcc.dg/pr43402.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb45755f642d26039a0422bfbc457b08c6a3fcde/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43402.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb45755f642d26039a0422bfbc457b08c6a3fcde/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43402.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43402.c?ref=eb45755f642d26039a0422bfbc457b08c6a3fcde", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -fno-inline\" } */\n+extern void abort (void);\n+\n+static int something;\n+\n+static int * converterData[2]={\n+    &something, &something,\n+};\n+\n+static struct {\n+  const char *name;\n+  int type;\n+} const cnvNameType[] = {\n+  { \"bocu1\", 1 },\n+  { \"utf7\", 1 },\n+  { \"utf8\", 1 }\n+};\n+\n+\n+const int * getAlgorithmicTypeFromName(const char *realName);\n+const int *\n+getAlgorithmicTypeFromName(const char *realName)\n+{\n+    unsigned mid, start, limit;\n+    unsigned lastMid;\n+    int result;\n+    start = 0;\n+    limit = sizeof(cnvNameType)/sizeof(cnvNameType[0]);\n+    mid = limit;\n+    lastMid = 0xffffffff;\n+\n+    for (;;) {\n+        mid = (start + limit) / 2;\n+        if (lastMid == mid) {   /* Have we moved? */\n+            break;  /* We haven't moved, and it wasn't found. */\n+        }\n+        lastMid = mid;\n+        result = __builtin_strcmp(realName, cnvNameType[mid].name);\n+\n+        if (result < 0) {\n+            limit = mid;\n+        } else if (result > 0) {\n+            start = mid;\n+        } else {\n+            return converterData[cnvNameType[mid].type];\n+        }\n+    }\n+\n+    return 0;\n+}\n+\n+int main (void)\n+{\n+  if (!getAlgorithmicTypeFromName (\"utf8\"))\n+    abort ();\n+  return 0;\n+}"}, {"sha": "326bf80ec9af6ccf0383cf07c7f3ba74ebf3ee9a", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb45755f642d26039a0422bfbc457b08c6a3fcde/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb45755f642d26039a0422bfbc457b08c6a3fcde/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=eb45755f642d26039a0422bfbc457b08c6a3fcde", "patch": "@@ -103,20 +103,28 @@ cleanup_control_expr_graph (basic_block bb, gimple_stmt_iterator gsi)\n \t    /* For conditions try harder and lookup single-argument\n \t       PHI nodes.  Only do so from the same basic-block though\n \t       as other basic-blocks may be dead already.  */\n-\t    if (TREE_CODE (lhs) == SSA_NAME)\n+\t    if (TREE_CODE (lhs) == SSA_NAME\n+\t\t&& !name_registered_for_update_p (lhs))\n \t      {\n \t\tgimple def_stmt = SSA_NAME_DEF_STMT (lhs);\n \t\tif (gimple_code (def_stmt) == GIMPLE_PHI\n \t\t    && gimple_phi_num_args (def_stmt) == 1\n-\t\t    && gimple_bb (def_stmt) == gimple_bb (stmt))\n+\t\t    && gimple_bb (def_stmt) == gimple_bb (stmt)\n+\t\t    && (TREE_CODE (PHI_ARG_DEF (def_stmt, 0)) != SSA_NAME\n+\t\t\t|| !name_registered_for_update_p (PHI_ARG_DEF (def_stmt,\n+\t\t\t\t\t\t\t\t       0))))\n \t\t  lhs = PHI_ARG_DEF (def_stmt, 0);\n \t      }\n-\t    if (TREE_CODE (rhs) == SSA_NAME)\n+\t    if (TREE_CODE (rhs) == SSA_NAME\n+\t\t&& !name_registered_for_update_p (rhs))\n \t      {\n \t\tgimple def_stmt = SSA_NAME_DEF_STMT (rhs);\n \t\tif (gimple_code (def_stmt) == GIMPLE_PHI\n \t\t    && gimple_phi_num_args (def_stmt) == 1\n-\t\t    && gimple_bb (def_stmt) == gimple_bb (stmt))\n+\t\t    && gimple_bb (def_stmt) == gimple_bb (stmt)\n+\t\t    && (TREE_CODE (PHI_ARG_DEF (def_stmt, 0)) != SSA_NAME\n+\t\t\t|| !name_registered_for_update_p (PHI_ARG_DEF (def_stmt,\n+\t\t\t\t\t\t\t\t       0))))\n \t\t  rhs = PHI_ARG_DEF (def_stmt, 0);\n \t      }\n \t    val = fold_binary_loc (loc, gimple_cond_code (stmt),"}]}