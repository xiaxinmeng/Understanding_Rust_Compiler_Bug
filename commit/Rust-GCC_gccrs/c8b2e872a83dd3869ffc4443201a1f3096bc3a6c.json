{"sha": "c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhiMmU4NzJhODNkZDM4NjlmZmM0NDQzMjAxYTFmMzA5NmJjM2E2Yw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-05-31T21:24:31Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-05-31T21:24:31Z"}, "message": "re PR c++/15742 ('noreturn' attribute ignored in method of template functions.)\n\n\tPR c++/15742\n\t* call.c (build_over_call): Set\n\tcurrent_function_returns_abnormally even in template functions.\n\n\tPR c++/15696\n\t* cp-tree.h (invalid_nonstatic_memfn_p): New function.\n\t* cvt.c (convert_to_void): Use it.\n\t* typeck.c (invalid_nonstatic_memfn_p): New function.\n\t(decay_conversion): Use it.\n\n\tPR c++/15625\n\t* pt.c (tsubst_decl): Set DECL_FRIEND_CONTEXT for instantiated\n\ttemplates.\n\n\tPR c++/15629\n\t* name-lookup.c (arg_assoc_class): Do not find template\n\tspecializations.\n\n\tPR c++/15209\n\t* tree.c (lvalue_p_1): Only consider the right-hand side of \".\"\n\texpressions when determining whether or not an express is packed.\n\n\tPR c++/15742\n\t* g++.dg/warn/Wreturn-1.C: New test.\n\n\tPR c++/15696\n\t* g++.dg/expr/ptrmem5.C: New test.\n\n\tPR c++/15625\n\t* g++.dg/template/friend27.C: New test.\n\n\tPR c++/15629\n\t* g++.dg/template/friend28.C: New test.\n\t* g++.dg/template/friend.C: Do not depend on <iostream>.  Add\n\terror message.\n\n\tPR c++/15209\n\t* g++.dg/ext/packed3.C: Remove bogus error.\n\t* g++.dg/ext/packed4.C: Remove bogus check.\n\t* g++.dg/ext/packed6.C: New test.\n\nFrom-SVN: r82499", "tree": {"sha": "5e0812c5ac7d5a81ea49d40fed31c165f91fb9df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e0812c5ac7d5a81ea49d40fed31c165f91fb9df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/comments", "author": null, "committer": null, "parents": [{"sha": "7c9fee34e5688d79d96db0e2b2e56d7273cb4335", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9fee34e5688d79d96db0e2b2e56d7273cb4335", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c9fee34e5688d79d96db0e2b2e56d7273cb4335"}], "stats": {"total": 218, "additions": 200, "deletions": 18}, "files": [{"sha": "ecace2dd78ea7dc48edd6df62a6110dc29a939e9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "patch": "@@ -4561,6 +4561,8 @@ build_over_call (struct z_candidate *cand, int flags)\n       tree return_type;\n       return_type = TREE_TYPE (TREE_TYPE (fn));\n       expr = build (CALL_EXPR, return_type, fn, args, NULL_TREE);\n+      if (TREE_THIS_VOLATILE (fn) && cfun)\n+\tcurrent_function_returns_abnormally = 1;\n       if (!VOID_TYPE_P (return_type))\n \trequire_complete_type (return_type);\n       return convert_from_reference (expr);"}, {"sha": "086090c0d22be2f26eacdd84d809cb815cf9fc4e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "patch": "@@ -4244,6 +4244,7 @@ extern tree build_address                       (tree);\n extern tree build_nop                           (tree, tree);\n extern tree non_reference                       (tree);\n extern tree lookup_anon_field                   (tree, tree);\n+extern bool invalid_nonstatic_memfn_p           (tree);\n \n /* in typeck2.c */\n extern void require_complete_eh_spec_types\t(tree, tree);"}, {"sha": "61e179ed1b6dba336155b8b3bd6e31533f17574b", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "patch": "@@ -784,6 +784,8 @@ convert_to_void (tree expr, const char *implicit)\n     return error_mark_node;\n   if (!TREE_TYPE (expr))\n     return expr;\n+  if (invalid_nonstatic_memfn_p (expr))\n+    return error_mark_node;\n   if (VOID_TYPE_P (TREE_TYPE (expr)))\n     return expr;\n   switch (TREE_CODE (expr))"}, {"sha": "238023da87754fe80726356570a9e79bad40e25d", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "patch": "@@ -4306,11 +4306,21 @@ arg_assoc_class (struct arg_lookup *k, tree type)\n     if (k->name == FRIEND_NAME (list))\n       for (friends = FRIEND_DECLS (list); friends; \n \t   friends = TREE_CHAIN (friends))\n-\t/* Only interested in global functions with potentially hidden\n-           (i.e. unqualified) declarations.  */\n-\tif (CP_DECL_CONTEXT (TREE_VALUE (friends)) == context)\n-\t  if (add_function (k, TREE_VALUE (friends)))\n+\t{\n+\t  tree fn = TREE_VALUE (friends);\n+\n+\t  /* Only interested in global functions with potentially hidden\n+\t     (i.e. unqualified) declarations.  */\n+\t  if (CP_DECL_CONTEXT (fn) != context)\n+\t    continue;\n+\t  /* Template specializations are never found by name lookup.\n+\t     (Templates themselves can be found, but not template\n+\t     specializations.)  */\n+\t  if (TREE_CODE (fn) == FUNCTION_DECL && DECL_USE_TEMPLATE (fn))\n+\t    continue;\n+\t  if (add_function (k, fn))\n \t    return true;\n+\t}\n \n   /* Process template arguments.  */\n   if (CLASSTYPE_TEMPLATE_INFO (type) "}, {"sha": "cbe4bd9b0707fd6c4d5987540f887aa65351487f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "patch": "@@ -6273,6 +6273,11 @@ tsubst_decl (tree t, tree args, tree type, tsubst_flags_t complain)\n \telse if (IDENTIFIER_OPNAME_P (DECL_NAME (r)))\n \t  grok_op_properties (r, DECL_FRIEND_P (r),\n \t\t\t      (complain & tf_error) != 0);\n+\n+\tif (DECL_FRIEND_P (t) && DECL_FRIEND_CONTEXT (t))\n+\t  SET_DECL_FRIEND_CONTEXT (r,\n+\t\t\t\t   tsubst (DECL_FRIEND_CONTEXT (t),\n+\t\t\t\t\t    args, complain, in_decl));\n       }\n       break;\n "}, {"sha": "365e07530743fd7ab873413c85353c438ba77505", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "patch": "@@ -90,6 +90,10 @@ lvalue_p_1 (tree ref,\n     case COMPONENT_REF:\n       op1_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 0),\n \t\t\t\t    treat_class_rvalues_as_lvalues);\n+      /* In an expression of the form \"X.Y\", the packed-ness of the\n+\t expression does not depend on \"X\".  */\n+      op1_lvalue_kind &= ~clk_packed;\n+      /* Look at the member designator.  */\n       if (!op1_lvalue_kind \n \t  /* The \"field\" can be a FUNCTION_DECL or an OVERLOAD in some\t\n   \t     situations.  */"}, {"sha": "5e5dcc4a2ae552bce76977902a6c0fb97395581c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "patch": "@@ -1292,6 +1292,33 @@ cxx_sizeof_or_alignof_expr (tree e, enum tree_code op)\n }\n   \n \f\n+/* EXPR is being used in a context that is not a function call.\n+   Enforce:\n+\n+     [expr.ref] \n+\n+     The expression can be used only as the left-hand operand of a\n+     member function call.  \n+\n+     [expr.mptr.operator]\n+\n+     If the result of .* or ->* is a function, then that result can be\n+     used only as the operand for the function call operator ().  \n+\n+   by issuing an error message if appropriate.  Returns true iff EXPR\n+   violates these rules.  */\n+\n+bool\n+invalid_nonstatic_memfn_p (tree expr)\n+{\n+  if (TREE_CODE (TREE_TYPE (expr)) == METHOD_TYPE)\n+    {\n+      error (\"invalid use of non-static member function\");\n+      return true;\n+    }\n+  return false;\n+}\n+\n /* Perform the conversions in [expr] that apply when an lvalue appears\n    in an rvalue context: the lvalue-to-rvalue, array-to-pointer, and\n    function-to-pointer conversions.\n@@ -1344,11 +1371,8 @@ decay_conversion (tree exp)\n       error (\"void value not ignored as it ought to be\");\n       return error_mark_node;\n     }\n-  if (code == METHOD_TYPE)\n-    {\n-      error (\"invalid use of non-static member function\");\n-      return error_mark_node;\n-    }\n+  if (invalid_nonstatic_memfn_p (exp))\n+    return error_mark_node;\n   if (code == FUNCTION_TYPE || is_overloaded_fn (exp))\n     return build_unary_op (ADDR_EXPR, exp, 0);\n   if (code == ARRAY_TYPE)"}, {"sha": "e36983d029d79692d5d6d535e5810560d51cb8d5", "filename": "gcc/testsuite/g++.dg/expr/ptrmem5.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptrmem5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptrmem5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptrmem5.C?ref=c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/15696\n+\n+struct A {};\n+\n+typedef void (A::*ftype)();\n+\n+void foo() { A().*ftype(); } // { dg-error \"\" }"}, {"sha": "1d3ef534ae1b91175eeb8099755537ba79411082", "filename": "gcc/testsuite/g++.dg/ext/packed3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked3.C?ref=c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "patch": "@@ -20,6 +20,6 @@ struct  __attribute__ ((packed)) Packed\n void Foo (Packed &p)\n {\n   Ref (p.i); // { dg-error \"cannot bind packed field\" \"\" }\n-  Ref (p.u.i); // { dg-error \"cannot bind packed field\" \"\" }\n+  Ref (p.u.i);\n   Ref (p.u); // { dg-error \"cannot bind packed field\" \"\" }\n }"}, {"sha": "1ac9048d4e09e475a35d5eafb9ef3dadbdda3556", "filename": "gcc/testsuite/g++.dg/ext/packed4.C", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked4.C?ref=c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "patch": "@@ -59,10 +59,6 @@ int Foo (Packed &p, int i, int ui)\n   \n   if ((r = ConstRef (p.i, &p.i, i)))\n     return r + 6;\n-  if ((r = ConstRef (p.u.i, &p.u.i, ui)))\n-    return r + 8;\n-  if ((r = ConstRef (p.u, &p.u, ui)))\n-    return r + 10;\n \n   return 0;\n }"}, {"sha": "f89aafec16342047868d2ecbeb24514b0555da7d", "filename": "gcc/testsuite/g++.dg/ext/packed6.C", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked6.C?ref=c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "patch": "@@ -0,0 +1,78 @@\n+// PR c++/15209\n+// { dg-options \"-w\" }\n+\n+typedef unsigned int size_t;\n+typedef unsigned char uint8_t;\n+typedef unsigned short int uint16_t;\n+\n+typedef unsigned int uint32_t;\n+__extension__ typedef unsigned long long int uint64_t;\n+\n+typedef uint8_t u8;\n+typedef uint16_t u16;\n+typedef uint32_t u32;\n+typedef uint64_t u64;\n+\n+struct MAGIC {u8 magic[8];} __attribute__ ((packed));\n+struct PACKETTYPE {u8 type[16];} __attribute__ ((packed));\n+\n+\n+typedef u16 leu16;\n+typedef u32 leu32;\n+typedef u64 leu64;\n+\n+class MD5Hash\n+{\n+public:\n+\n+  MD5Hash(void) {};\n+\n+  void *print(void) const;\n+  MD5Hash(const MD5Hash &other);\n+  MD5Hash& operator=(const MD5Hash &other);\n+\n+public:\n+  u8 hash[16];\n+};\n+\n+struct PACKET_HEADER\n+{\n+\n+  MAGIC magic;\n+  leu64 length;\n+  MD5Hash hash;\n+  MD5Hash setid;\n+  PACKETTYPE type;\n+} __attribute__ ((packed));\n+\n+\n+struct MAINPACKET\n+{\n+  PACKET_HEADER header;\n+\n+  leu64 blocksize;\n+  leu32 recoverablefilecount;\n+  MD5Hash fileid[0];\n+\n+\n+} __attribute__ ((packed));\n+\n+struct CriticalPacket\n+{\n+  u8 *packetdata;\n+  size_t packetlength;\n+};\n+\n+class MainPacket : public CriticalPacket\n+{\n+  const MD5Hash& SetId(void) const;\n+\n+  u64 blocksize;\n+  u32 totalfilecount;\n+  u32 recoverablefilecount;\n+};\n+\n+inline const MD5Hash& MainPacket::SetId(void) const\n+{\n+  return ((const MAINPACKET*)packetdata)->header.setid;\n+}"}, {"sha": "5e9abb0b52a051e50e45225b0037d13ed9eaa431", "filename": "gcc/testsuite/g++.dg/template/friend.C", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend.C?ref=c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "patch": "@@ -1,9 +1,8 @@\n // Contribued by Gabriel Dos Reis <gdr@codesourcery.com>\n // Origin: iskey@i100.ryd.student.liu.se\n-// { dg-do link }\n \n-#include <iostream>\n-using namespace std;\n+class ostream;\n+extern ostream& cout;\n \n template <class T> struct s;\n \n@@ -26,5 +25,5 @@ struct s {\n int main()\n {\n   s<int>::t y;\n-  cout << y;\n+  cout << y; // { dg-error \"\" }\n }"}, {"sha": "6317da577d028e5bc3a8624c9f44ca0dd2b40e8d", "filename": "gcc/testsuite/g++.dg/template/friend27.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend27.C?ref=c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/15265\n+\n+enum Relation {equalOp};\n+template<typename B>\n+class A {\n+public:\n+    static\n+    bool    Relop(const A&, const A&, Relation);\n+\n+    friend\n+    bool    operator==(const A& a1, const A& a2) {\n+      return Relop(a1, a2, equalOp);\n+    }\n+  B* b;\n+};\n+\n+int main() {\n+  A<int> a; a == a;\n+  return 0;\n+}\n+\n+"}, {"sha": "a7d160d5fc749a08e6233304a5fb3043a017c699", "filename": "gcc/testsuite/g++.dg/template/friend28.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend28.C?ref=c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/15629\n+// { dg-do link }\n+\n+template<int a, int b> class T; \n+ \n+template<int a, int b> void func(T<a, b> * t);\n+template<int a>        void func(T<a, 3> * t) {}\n+template void func<2>(T<2, 3>*);\n+ \n+template<int a, int b> struct T { \n+  friend void func<a, b>(T<a, b> * t); \n+  friend void func<a>   (T<a, 3> * t); \n+   \n+  void foo(); \n+}; \n+ \n+template<int a, int b> void T<a, b>::foo() { \n+  func((T<2,3>*)0); \n+} \n+ \n+int main() { \n+  T<2,3>().foo(); \n+} "}, {"sha": "f0dba504b9bf750064f6ea540e46ba89f1e4f559", "filename": "gcc/testsuite/g++.dg/warn/Wreturn-1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2e872a83dd3869ffc4443201a1f3096bc3a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-1.C?ref=c8b2e872a83dd3869ffc4443201a1f3096bc3a6c", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-Wreturn-type\" }\n+// PR c++/15742\n+\n+extern void exit(int) __attribute__ ((noreturn));\n+\n+template<typename T>\n+struct A {\n+  int find_cmp(void) { exit(1); }\n+};"}]}