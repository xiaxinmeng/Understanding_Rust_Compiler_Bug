{"sha": "d91f7b5002c707642b871c9548a1f9b2bb47507e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkxZjdiNTAwMmM3MDc2NDJiODcxYzk1NDhhMWY5YjJiYjQ3NTA3ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-02-12T23:43:48Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-02-12T23:43:48Z"}, "message": "(add_1_to_mem): Corrected.\n\nFrom-SVN: r11239", "tree": {"sha": "4f15a69a6198a2664242d373494f17be92dfcfa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f15a69a6198a2664242d373494f17be92dfcfa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d91f7b5002c707642b871c9548a1f9b2bb47507e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d91f7b5002c707642b871c9548a1f9b2bb47507e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d91f7b5002c707642b871c9548a1f9b2bb47507e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d91f7b5002c707642b871c9548a1f9b2bb47507e/comments", "author": null, "committer": null, "parents": [{"sha": "662ad81ddd8be33cbd28420c48eeab5b1c325b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/662ad81ddd8be33cbd28420c48eeab5b1c325b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/662ad81ddd8be33cbd28420c48eeab5b1c325b04"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "90a4fddfc7ebe68aaa985b6f1772d7268399cc53", "filename": "gcc/config/1750a/1750a.c", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91f7b5002c707642b871c9548a1f9b2bb47507e/gcc%2Fconfig%2F1750a%2F1750a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91f7b5002c707642b871c9548a1f9b2bb47507e/gcc%2Fconfig%2F1750a%2F1750a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.c?ref=d91f7b5002c707642b871c9548a1f9b2bb47507e", "patch": "@@ -385,46 +385,63 @@ simple_memory_operand (op, mode)\n   return 0;\n }\n \n+\n /* destructively add one to memory address */\n-add_1_to_mem (opnd)\t/* returns 1 for success, 0 for failure */\n+add_1_to_mem (opnd)\t/* returns 0 for success, -1 for failure */\n      rtx opnd;\t\t/* OPND must be a MEM rtx */\n {\n   rtx inner = XEXP (opnd, 0);\n \n   if (GET_CODE (opnd) != MEM)\n-    return 0;  /* failure */\n-first:\n+    {\n+      fprintf (stderr, \"add_1_to_mem: input is not MEM\\n\");\n+      return -1;  /* failure */\n+    }\n   switch (GET_CODE (inner))\n     {\n     case CONST:\n       inner = XEXP (inner, 0);\n-      goto first;\n+      if (GET_CODE (inner) != PLUS\n+       || GET_CODE (XEXP (inner, 1)) != CONST_INT)\n+\t{\n+\t  fprintf (stderr, \"add_1_to_mem: CONST failure\\n\");\n+\t  return -1;\n+\t}\n+      INTVAL (XEXP (XEXP (XEXP (opnd, 0), 0), 1)) += 1;\n+      break;\n     case REG:\n+      XEXP (opnd, 0) = gen_rtx (PLUS, Pmode, inner, const1_rtx);\n+      break;\n     case SYMBOL_REF:\n     case LABEL_REF:\n-      inner = gen_rtx (PLUS, Pmode, inner, const1_rtx);\n-      return 1;\n+      XEXP (opnd, 0) = gen_rtx (CONST, VOIDmode,\n+\t\t\t gen_rtx (PLUS, Pmode, inner, const1_rtx));\n+      break;\n     case PLUS:\n       inner = XEXP (inner, 1);\n-second:\n       switch (GET_CODE (inner))\n \t{\n \tcase CONST:\n \t  inner = XEXP (inner, 0);\n-\t  goto second;\n+\t  if (GET_CODE (inner) != PLUS\n+\t   || GET_CODE (XEXP (inner, 1)) != CONST_INT)\n+\t    {\n+\t      fprintf (stderr, \"add_1_to_mem: PLUS CONST failure\\n\");\n+\t      return -1;\n+\t    }\n+\t  INTVAL (XEXP (XEXP (XEXP (XEXP (opnd, 0), 1), 0), 1)) += 1;\n+\t  break;\n \tcase CONST_INT:\n-\t  INTVAL (inner) += 1;\n-\t  return 1;\n+\t  INTVAL (XEXP (XEXP (opnd, 0), 1)) += 1;\n+\t  break;\n \tcase SYMBOL_REF:\n \tcase LABEL_REF:\n-\t  inner = gen_rtx (PLUS, Pmode, inner, const1_rtx);\n-\t  return 1;\n-\tcase PLUS:\n-\t  inner = XEXP (inner, 1);\n-\t  if (GET_CODE (inner) != CONST_INT)\n-\t    return 0;\n-\t  INTVAL (inner) += 1;\n-\t  return 1;\n+\t  XEXP (XEXP (opnd, 0), 1) = gen_rtx (CONST, VOIDmode,\n+\t\t\t\t     gen_rtx (PLUS, Pmode, inner, const1_rtx));\n+\t  break;\n+\tdefault:\n+\t  fprintf (stderr, \"add_1_to_mem: PLUS failure\\n\");\n+\t  return -1;\n \t}\n     }\n   return 0;"}]}