{"sha": "810d9815249451f477d4cbc67b8e4a0819c37faa", "node_id": "C_kwDOANBUbNoAKDgxMGQ5ODE1MjQ5NDUxZjQ3N2Q0Y2JjNjdiOGU0YTA4MTljMzdmYWE", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2022-08-23T15:42:24Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2022-09-05T18:01:35Z"}, "message": "i386: avoid zero extension for crc32q\n\nThe crc32q instruction takes 64-bit operands, but ignores high 32 bits\nof the destination operand, and zero-extends the result from 32 bits.\n\nLet's model this in the RTL pattern to avoid zero-extension when the\n_mm_crc32_u64 intrinsic is used with a 32-bit type.\n\n\tPR target/106453\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.md (sse4_2_crc32di): Model that only low 32\n\tbits of operand 0 are consumed, and the result is zero-extended\n\tto 64 bits.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr106453.c: New test.", "tree": {"sha": "bab7793a187d199024f39a50d47ad4ca07e23b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bab7793a187d199024f39a50d47ad4ca07e23b5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/810d9815249451f477d4cbc67b8e4a0819c37faa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/810d9815249451f477d4cbc67b8e4a0819c37faa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/810d9815249451f477d4cbc67b8e4a0819c37faa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/810d9815249451f477d4cbc67b8e4a0819c37faa/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8492f7dd51aff17fd755c9f9dd4dc5874ddd6dec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8492f7dd51aff17fd755c9f9dd4dc5874ddd6dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8492f7dd51aff17fd755c9f9dd4dc5874ddd6dec"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "1be9b669909b33dda6eaf5279c9c4e519f84e769", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/810d9815249451f477d4cbc67b8e4a0819c37faa/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/810d9815249451f477d4cbc67b8e4a0819c37faa/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=810d9815249451f477d4cbc67b8e4a0819c37faa", "patch": "@@ -23823,10 +23823,11 @@\n \n (define_insn \"sse4_2_crc32di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(unspec:DI\n-\t  [(match_operand:DI 1 \"register_operand\" \"0\")\n-\t   (match_operand:DI 2 \"nonimmediate_operand\" \"rm\")]\n-\t  UNSPEC_CRC32))]\n+\t(zero_extend:DI\n+\t  (unspec:SI\n+\t    [(match_operand:SI 1 \"register_operand\" \"0\")\n+\t     (match_operand:DI 2 \"nonimmediate_operand\" \"rm\")]\n+\t  UNSPEC_CRC32)))]\n   \"TARGET_64BIT && TARGET_CRC32\"\n   \"crc32{q}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sselog1\")"}, {"sha": "bd2e7282cf6bbdba1a3f8d2c792fa82d6b9a71ce", "filename": "gcc/testsuite/gcc.target/i386/pr106453.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/810d9815249451f477d4cbc67b8e4a0819c37faa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106453.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/810d9815249451f477d4cbc67b8e4a0819c37faa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106453.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106453.c?ref=810d9815249451f477d4cbc67b8e4a0819c37faa", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mcrc32 -dp\" } */\n+/* { dg-final { scan-assembler-not \"zero_extendsidi\" } } */\n+\n+#include <immintrin.h>\n+#include <stdint.h>\n+\n+uint32_t f(uint32_t c, uint64_t *p, size_t n)\n+{\n+    for (size_t i = 0; i < n; i++)\n+        c = _mm_crc32_u64(c, p[i]);\n+    return c;\n+}"}]}