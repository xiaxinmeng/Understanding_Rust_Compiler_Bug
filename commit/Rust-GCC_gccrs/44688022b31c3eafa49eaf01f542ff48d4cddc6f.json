{"sha": "44688022b31c3eafa49eaf01f542ff48d4cddc6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ2ODgwMjJiMzFjM2VhZmE0OWVhZjAxZjU0MmZmNDhkNGNkZGM2Zg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2004-04-24T06:37:19Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2004-04-24T06:37:19Z"}, "message": "re PR target/14960 ([3.4 only] -maltivec affects vector return with -mabi=no-altivec)\n\n\tPR target/14960\n\t* config/rs6000/rs6000.c (rs6000_stack_info): Rename total_raw_size\n\tto non_fixed_size, and leave out fixed_size from the sum.\n\t(generate_set_vrsave): Correct clobbers.\n\t(rs6000_emit_epilogue): Test TARGET_ALTIVEC with TARGET_ALTIVEC_SAVE.\n\t(rs6000_function_value): Test TARGET_ALTIVEC and TARGET_ALTIVEC_ABI.\n\t(rs6000_libcall_value): Likewise.\n\t* config/rs6000/rs6000.h (FUNCTION_VALUE_REGNO_P): Likewise.\n\t(FUNCTION_ARG_REGNO_P): Likewise.\n\nFrom-SVN: r81129", "tree": {"sha": "7b910332276ecef60daf972903dba6cd505e95a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b910332276ecef60daf972903dba6cd505e95a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44688022b31c3eafa49eaf01f542ff48d4cddc6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44688022b31c3eafa49eaf01f542ff48d4cddc6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44688022b31c3eafa49eaf01f542ff48d4cddc6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44688022b31c3eafa49eaf01f542ff48d4cddc6f/comments", "author": null, "committer": null, "parents": [{"sha": "e9f4e55723db706a9af5a86549bd18381dfa99ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f4e55723db706a9af5a86549bd18381dfa99ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9f4e55723db706a9af5a86549bd18381dfa99ab"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "b81ca8546acc62eaa6cfe7f091ad77ca13879c40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44688022b31c3eafa49eaf01f542ff48d4cddc6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44688022b31c3eafa49eaf01f542ff48d4cddc6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44688022b31c3eafa49eaf01f542ff48d4cddc6f", "patch": "@@ -1,3 +1,15 @@\n+2004-04-24  Alan Modra  <amodra@bigpond.net.au>\n+\n+\tPR target/14960\n+\t* config/rs6000/rs6000.c (rs6000_stack_info): Rename total_raw_size\n+\tto non_fixed_size, and leave out fixed_size from the sum.\n+\t(generate_set_vrsave): Correct clobbers.\n+\t(rs6000_emit_epilogue): Test TARGET_ALTIVEC with TARGET_ALTIVEC_SAVE.\n+\t(rs6000_function_value): Test TARGET_ALTIVEC and TARGET_ALTIVEC_ABI.\n+\t(rs6000_libcall_value): Likewise.\n+\t* config/rs6000/rs6000.h (FUNCTION_VALUE_REGNO_P): Likewise.\n+\t(FUNCTION_ARG_REGNO_P): Likewise.\n+\n 2004-04-24  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* expmed.c (expand_mult_highpart_adjust): Do not assume OP1"}, {"sha": "715324ee25a95a7f56ed4f34a542d648b33ed949", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44688022b31c3eafa49eaf01f542ff48d4cddc6f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44688022b31c3eafa49eaf01f542ff48d4cddc6f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=44688022b31c3eafa49eaf01f542ff48d4cddc6f", "patch": "@@ -10762,7 +10762,7 @@ rs6000_stack_info (void)\n   rs6000_stack_t *info_ptr = &info;\n   int reg_size = TARGET_32BIT ? 4 : 8;\n   int ehrd_size;\n-  HOST_WIDE_INT total_raw_size;\n+  HOST_WIDE_INT non_fixed_size;\n \n   /* Zero all fields portably.  */\n   info = zero_info;\n@@ -10993,14 +10993,13 @@ rs6000_stack_info (void)\n \t\t\t\t\t (TARGET_ALTIVEC_ABI || ABI_DARWIN)\n \t\t\t\t\t ? 16 : 8);\n \n-  total_raw_size\t = (info_ptr->vars_size\n+  non_fixed_size\t = (info_ptr->vars_size\n \t\t\t    + info_ptr->parm_size\n \t\t\t    + info_ptr->save_size\n-\t\t\t    + info_ptr->varargs_size\n-\t\t\t    + info_ptr->fixed_size);\n+\t\t\t    + info_ptr->varargs_size);\n \n-  info_ptr->total_size =\n-    RS6000_ALIGN (total_raw_size, ABI_STACK_BOUNDARY / BITS_PER_UNIT);\n+  info_ptr->total_size = RS6000_ALIGN (non_fixed_size + info_ptr->fixed_size,\n+\t\t\t\t       ABI_STACK_BOUNDARY / BITS_PER_UNIT);\n \n   /* Determine if we need to allocate any stack frame:\n \n@@ -11018,7 +11017,7 @@ rs6000_stack_info (void)\n     info_ptr->push_p = 1;\n \n   else if (DEFAULT_ABI == ABI_V4)\n-    info_ptr->push_p = total_raw_size > info_ptr->fixed_size;\n+    info_ptr->push_p = non_fixed_size != 0;\n \n   else if (frame_pointer_needed)\n     info_ptr->push_p = 1;\n@@ -11027,8 +11026,7 @@ rs6000_stack_info (void)\n     info_ptr->push_p = 1;\n \n   else\n-    info_ptr->push_p\n-      = total_raw_size - info_ptr->fixed_size > (TARGET_32BIT ? 220 : 288);\n+    info_ptr->push_p = non_fixed_size > (TARGET_32BIT ? 220 : 288);\n \n   /* Zero offsets if we're not saving those registers.  */\n   if (info_ptr->fp_size == 0)\n@@ -11864,7 +11862,7 @@ generate_set_vrsave (rtx reg, rs6000_stack_t *info, int epiloguep)\n      need an unspec use/set of the register.  */\n \n   for (i = FIRST_ALTIVEC_REGNO; i <= LAST_ALTIVEC_REGNO; ++i)\n-    if (info->vrsave_mask != 0 && ALTIVEC_REG_BIT (i) != 0)\n+    if (info->vrsave_mask & ALTIVEC_REG_BIT (i))\n       {\n \tif (!epiloguep || call_used_regs [i])\n \t  clobs[nclobs++] = gen_rtx_CLOBBER (VOIDmode,\n@@ -12509,7 +12507,7 @@ rs6000_emit_epilogue (int sibcall)\n     }\n \n   /* Restore VRSAVE if needed.  */\n-  if (TARGET_ALTIVEC_ABI && TARGET_ALTIVEC_VRSAVE \n+  if (TARGET_ALTIVEC && TARGET_ALTIVEC_VRSAVE\n       && info->vrsave_mask != 0)\n     {\n       rtx addr, mem, reg;\n@@ -16218,7 +16216,8 @@ rs6000_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n \t   && TARGET_HARD_FLOAT\n \t   && targetm.calls.split_complex_arg)\n     return rs6000_complex_function_value (mode);\n-  else if (TREE_CODE (valtype) == VECTOR_TYPE && TARGET_ALTIVEC)\n+  else if (TREE_CODE (valtype) == VECTOR_TYPE\n+\t   && TARGET_ALTIVEC && TARGET_ALTIVEC_ABI)\n     regno = ALTIVEC_ARG_RETURN;\n   else\n     regno = GP_ARG_RETURN;\n@@ -16236,7 +16235,8 @@ rs6000_libcall_value (enum machine_mode mode)\n   if (GET_MODE_CLASS (mode) == MODE_FLOAT\n \t   && TARGET_HARD_FLOAT && TARGET_FPRS)\n     regno = FP_ARG_RETURN;\n-  else if (ALTIVEC_VECTOR_MODE (mode))\n+  else if (ALTIVEC_VECTOR_MODE (mode)\n+\t   && TARGET_ALTIVEC && TARGET_ALTIVEC_ABI)\n     regno = ALTIVEC_ARG_RETURN;\n   else if (COMPLEX_MODE_P (mode) && targetm.calls.split_complex_arg)\n     return rs6000_complex_function_value (mode);"}, {"sha": "f3d449377e57d8134ffc9bffe927372ffd35804d", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44688022b31c3eafa49eaf01f542ff48d4cddc6f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44688022b31c3eafa49eaf01f542ff48d4cddc6f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=44688022b31c3eafa49eaf01f542ff48d4cddc6f", "patch": "@@ -1696,15 +1696,15 @@ extern enum rs6000_abi rs6000_current_abi;\t/* available for use by subtarget */\n #define FUNCTION_VALUE_REGNO_P(N)\t\t\t\t\t\\\n   ((N) == GP_ARG_RETURN\t\t\t\t\t\t\t\\\n    || ((N) == FP_ARG_RETURN && TARGET_HARD_FLOAT)\t\t\t\\\n-   || ((N) == ALTIVEC_ARG_RETURN && TARGET_ALTIVEC))\n+   || ((N) == ALTIVEC_ARG_RETURN && TARGET_ALTIVEC && TARGET_ALTIVEC_ABI))\n \n /* 1 if N is a possible register number for function argument passing.\n    On RS/6000, these are r3-r10 and fp1-fp13.\n    On AltiVec, v2 - v13 are used for passing vectors.  */\n #define FUNCTION_ARG_REGNO_P(N)\t\t\t\t\t\t\\\n   ((unsigned) (N) - GP_ARG_MIN_REG < GP_ARG_NUM_REG\t\t\t\\\n    || ((unsigned) (N) - ALTIVEC_ARG_MIN_REG < ALTIVEC_ARG_NUM_REG\t\\\n-       && TARGET_ALTIVEC)\t\t\t\t\t\t\\\n+       && TARGET_ALTIVEC && TARGET_ALTIVEC_ABI)\t\t\t\t\\\n    || ((unsigned) (N) - FP_ARG_MIN_REG < FP_ARG_NUM_REG\t\t\t\\\n        && TARGET_HARD_FLOAT))\n \f"}]}