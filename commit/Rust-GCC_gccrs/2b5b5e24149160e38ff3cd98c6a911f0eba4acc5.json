{"sha": "2b5b5e24149160e38ff3cd98c6a911f0eba4acc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI1YjVlMjQxNDkxNjBlMzhmZjNjZDk4YzZhOTExZjBlYmE0YWNjNQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2019-09-26T10:48:02Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-09-26T10:48:02Z"}, "message": "[arm] Implement DImode SIMD32 intrinsics\n\nThis patch implements some more SIMD32, but these ones have a DImode result+addend.\nApart from that there's nothing too exciting about them.\n\nBootstrapped and tested on arm-none-linux-gnueabihf.\n\n\t* config/arm/arm.md (arm_<simd32_op>): New define_insn.\n\t* config/arm/arm_acle.h (__smlald, __smlaldx, __smlsld, __smlsldx):\n\tDefine.\n\t* config/arm/arm_acle.h: Define builtins for the above.\n\t* config/arm/iterators.md (SIMD32_DIMODE): New int_iterator.\n\t(simd32_op): Handle the above.\n\t* config/arm/unspecs.md: Define unspecs for the above.\n\n\t* gcc.target/arm/acle/simd32.c: Update test.\n\nFrom-SVN: r276147", "tree": {"sha": "13527746af4da5ad284145f3b2d8d9fe463b835b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13527746af4da5ad284145f3b2d8d9fe463b835b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53cd0ac643ed1fcb507ceb01dc531da1868f88d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cd0ac643ed1fcb507ceb01dc531da1868f88d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53cd0ac643ed1fcb507ceb01dc531da1868f88d7"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "ac39c2f411341c0b7d7659fdba7d86a7995c62aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b5b5e24149160e38ff3cd98c6a911f0eba4acc5", "patch": "@@ -1,3 +1,13 @@\n+2019-09-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm.md (arm_<simd32_op>): New define_insn.\n+\t* config/arm/arm_acle.h (__smlald, __smlaldx, __smlsld, __smlsldx):\n+\tDefine.\n+\t* config/arm/arm_acle.h: Define builtins for the above.\n+\t* config/arm/iterators.md (SIMD32_DIMODE): New int_iterator.\n+\t(simd32_op): Handle the above.\n+\t* config/arm/unspecs.md: Define unspecs for the above.\n+\n 2019-09-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.md (arm_<simd32_op>): New define_insn."}, {"sha": "d3ee59a37ade9c2921fb8895543a143b74d7bbdf", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=2b5b5e24149160e38ff3cd98c6a911f0eba4acc5", "patch": "@@ -5088,6 +5088,17 @@\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"type\" \"alu_dsp_reg\")])\n \n+(define_insn \"arm_<simd32_op>\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI\n+\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t   (match_operand:DI 3 \"s_register_operand\" \"0\")] SIMD32_DIMODE))]\n+  \"TARGET_INT_SIMD\"\n+  \"<simd32_op>%?\\\\t%Q0, %R0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"smlald\")])\n+\n (define_expand \"extendsfdf2\"\n   [(set (match_operand:DF                  0 \"s_register_operand\")\n \t(float_extend:DF (match_operand:SF 1 \"s_register_operand\")))]"}, {"sha": "248a355d00239a8724e46b9203c818906a4d4908", "filename": "gcc/config/arm/arm_acle.h", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5/gcc%2Fconfig%2Farm%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5/gcc%2Fconfig%2Farm%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle.h?ref=2b5b5e24149160e38ff3cd98c6a911f0eba4acc5", "patch": "@@ -403,8 +403,37 @@ __usada8 (uint8x4_t __a, uint8x4_t __b, uint32_t __c)\n   return __builtin_arm_usada8 (__a, __b, __c);\n }\n \n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__smlald (int16x2_t __a, int16x2_t __b, int64_t __c)\n+{\n+  return __builtin_arm_smlald (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__smlaldx (int16x2_t __a, int16x2_t __b, int64_t __c)\n+{\n+  return __builtin_arm_smlaldx (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__smlsld (int16x2_t __a, int16x2_t __b, int64_t __c)\n+{\n+  return __builtin_arm_smlsld (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__smlsldx (int16x2_t __a, int16x2_t __b, int64_t __c)\n+{\n+  return __builtin_arm_smlsldx (__a, __b, __c);\n+}\n+\n #endif\n \n+\n #pragma GCC push_options\n #ifdef __ARM_FEATURE_CRC32\n #ifdef __ARM_FP"}, {"sha": "0021c0036ad7e1bddef6553a900c9eaf145037b6", "filename": "gcc/config/arm/arm_acle_builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def?ref=2b5b5e24149160e38ff3cd98c6a911f0eba4acc5", "patch": "@@ -75,3 +75,7 @@ VAR1 (BINOP, smusd, si)\n VAR1 (BINOP, smusdx, si)\n VAR1 (UBINOP, usad8, si)\n VAR1 (UBINOP, usada8, si)\n+VAR1 (TERNOP, smlald, di)\n+VAR1 (TERNOP, smlaldx, di)\n+VAR1 (TERNOP, smlsld, di)\n+VAR1 (TERNOP, smlsldx, di)"}, {"sha": "8c9f7121951ba319fcb6cf4c73e186f3764917c2", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=2b5b5e24149160e38ff3cd98c6a911f0eba4acc5", "patch": "@@ -443,6 +443,9 @@\n \t\t\t\t UNSPEC_UQSUB16 UNSPEC_SMUSD UNSPEC_SMUSDX\n \t\t\t\t UNSPEC_SXTAB16 UNSPEC_UXTAB16 UNSPEC_USAD8])\n \n+(define_int_iterator SIMD32_DIMODE [UNSPEC_SMLALD UNSPEC_SMLALDX\n+\t\t\t\t    UNSPEC_SMLSLD UNSPEC_SMLSLDX])\n+\n (define_int_iterator VQRDMLH_AS [UNSPEC_VQRDMLAH UNSPEC_VQRDMLSH])\n \n (define_int_iterator VFM_LANE_AS [UNSPEC_VFMA_LANE UNSPEC_VFMS_LANE])\n@@ -1051,7 +1054,9 @@\n \t\t\t    (UNSPEC_UQSAX \"uqsax\") (UNSPEC_UQSUB16 \"uqsub16\")\n \t\t\t    (UNSPEC_SMUSD \"smusd\") (UNSPEC_SMUSDX \"smusdx\")\n \t\t\t    (UNSPEC_SXTAB16 \"sxtab16\") (UNSPEC_UXTAB16 \"uxtab16\")\n-\t\t\t    (UNSPEC_USAD8 \"usad8\")])\n+\t\t\t    (UNSPEC_USAD8 \"usad8\") (UNSPEC_SMLALD \"smlald\")\n+\t\t\t    (UNSPEC_SMLALDX \"smlaldx\") (UNSPEC_SMLSLD \"smlsld\")\n+\t\t\t    (UNSPEC_SMLSLDX \"smlsldx\")])\n \n ;; Both kinds of return insn.\n (define_code_iterator RETURNS [return simple_return])"}, {"sha": "78f88d5fa09f424a9ab638053cc4fe068aa19368", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=2b5b5e24149160e38ff3cd98c6a911f0eba4acc5", "patch": "@@ -123,6 +123,10 @@\n   UNSPEC_SMUSDX\t\t; Represent the SMUSDX operation.\n   UNSPEC_USAD8\t\t; Represent the USAD8 operation.\n   UNSPEC_USADA8\t\t; Represent the USADA8 operation.\n+  UNSPEC_SMLALD\t\t; Represent the SMLALD operation.\n+  UNSPEC_SMLALDX\t; Represent the SMLALDX operation.\n+  UNSPEC_SMLSLD\t\t; Represent the SMLSLD operation.\n+  UNSPEC_SMLSLDX\t; Represent the SMLSLDX operation.\n ])\n \n "}, {"sha": "2323593045023b6107e2ed794ea66eabeb7a4c16", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b5b5e24149160e38ff3cd98c6a911f0eba4acc5", "patch": "@@ -1,3 +1,7 @@\n+2019-09-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/arm/acle/simd32.c: Update test.\n+\n 2019-09-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* lib/target-supports.exp"}, {"sha": "e43ea96befdcbc581f61cb3fa798a49f13cd640a", "filename": "gcc/testsuite/gcc.target/arm/acle/simd32.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsimd32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsimd32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsimd32.c?ref=2b5b5e24149160e38ff3cd98c6a911f0eba4acc5", "patch": "@@ -244,3 +244,35 @@ test_usada8 (uint8x4_t a, uint8x4_t b, uint32_t c)\n }\n \n /* { dg-final { scan-assembler-times \"\\tusada8\\t...?, ...?, ...?, ...?\" 1 } } */\n+\n+int64_t\n+test_smlald (int16x2_t a, int16x2_t b, int64_t c)\n+{\n+  return __smlald (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tsmlald\\t...?, ...?, ...?, ...?\" 1 } } */\n+\n+int64_t\n+test_smlaldx (int16x2_t a, int16x2_t b, int64_t c)\n+{\n+  return __smlaldx (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tsmlaldx\\t...?, ...?, ...?, ...?\" 1 } } */\n+\n+int64_t\n+test_smlsld (int16x2_t a, int16x2_t b, int64_t c)\n+{\n+  return __smlsld (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tsmlsld\\t...?, ...?, ...?, ...?\" 1 } } */\n+\n+int64_t\n+test_smlsldx (int16x2_t a, int16x2_t b, int64_t c)\n+{\n+  return __smlsldx (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tsmlsldx\\t...?, ...?, ...?, ...?\" 1 } } */"}]}