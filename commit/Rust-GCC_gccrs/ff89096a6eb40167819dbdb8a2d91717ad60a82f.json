{"sha": "ff89096a6eb40167819dbdb8a2d91717ad60a82f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY4OTA5NmE2ZWI0MDE2NzgxOWRiZGI4YTJkOTE3MTdhZDYwYTgyZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-06-28T19:04:03Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-06-28T19:04:03Z"}, "message": "cpp_type_traits.h: Move the additions to namespace __gnu_internal outside of namespace std...\n\n2004-06-28  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/cpp_type_traits.h: Move the additions to\n\tnamespace __gnu_internal outside of namespace std; trivial\n\tformatting fixes.\n\nFrom-SVN: r83806", "tree": {"sha": "df90ba770e7e5ca94ff23400eae93d76bac6d71d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df90ba770e7e5ca94ff23400eae93d76bac6d71d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff89096a6eb40167819dbdb8a2d91717ad60a82f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff89096a6eb40167819dbdb8a2d91717ad60a82f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff89096a6eb40167819dbdb8a2d91717ad60a82f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff89096a6eb40167819dbdb8a2d91717ad60a82f/comments", "author": null, "committer": null, "parents": [{"sha": "4723805a613630420229b7796965a04538067851", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4723805a613630420229b7796965a04538067851", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4723805a613630420229b7796965a04538067851"}], "stats": {"total": 260, "additions": 132, "deletions": 128}, "files": [{"sha": "1de45fbd4f6d3cff834c58a3a787e612abb5b7be", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff89096a6eb40167819dbdb8a2d91717ad60a82f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff89096a6eb40167819dbdb8a2d91717ad60a82f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ff89096a6eb40167819dbdb8a2d91717ad60a82f", "patch": "@@ -1,3 +1,9 @@\n+2004-06-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/cpp_type_traits.h: Move the additions to\n+\tnamespace __gnu_internal outside of namespace std; trivial\n+\tformatting fixes.\n+\n 2004-06-28  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/debug/safe_base.h (__gnu_debug::_Safe_sequence_base):"}, {"sha": "d4e4ea0410a50945994778f2d96831f1081b36a1", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 126, "deletions": 128, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff89096a6eb40167819dbdb8a2d91717ad60a82f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff89096a6eb40167819dbdb8a2d91717ad60a82f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=ff89096a6eb40167819dbdb8a2d91717ad60a82f", "patch": "@@ -1,6 +1,6 @@\n // The  -*- C++ -*- type traits classes for internal use in libstdc++\n \n-// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -64,25 +64,38 @@\n // -- Gaby (dosreis@cmla.ens-cachan.fr) 2000-03-06.\n //\n \n+// NB: g++ can not compile these if declared within the class\n+// __is_pod itself.\n+namespace __gnu_internal\n+{\n+  typedef char __one;\n+  typedef char __two[2];\n+\n+  template <typename _Tp>\n+  __one __test_type (int _Tp::*);\n+  template <typename _Tp>\n+  __two& __test_type (...);\n+} // namespace __gnu_internal\n+\n namespace std\n {\n   // Compare for equality of types.\n   template<typename, typename>\n     struct __are_same\n     {\n       enum\n-      {\n-        _M_type = 0\n-      };\n+\t{\n+\t  _M_type = 0\n+\t};\n     };\n \n   template<typename _Tp>\n     struct __are_same<_Tp, _Tp>\n     {\n       enum\n-      {\n-        _M_type = 1\n-      };\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n \n   // Define a nested type if some predicate holds.\n@@ -92,7 +105,7 @@ namespace std\n     };\n \n   template<typename _Tp>\n-  struct __enable_if<_Tp, true>\n+    struct __enable_if<_Tp, true>\n     {\n       typedef _Tp _M_type;\n     };\n@@ -102,18 +115,18 @@ namespace std\n     struct __is_void\n     {\n       enum\n-      {\n-        _M_type = 0\n-      };\n+\t{\n+\t  _M_type = 0\n+\t};\n     };\n \n   template<>\n     struct __is_void<void>\n     {\n       enum\n-      {\n-        _M_type = 1\n-      };\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n \n   //\n@@ -123,9 +136,9 @@ namespace std\n     struct __is_integer\n     {\n       enum\n-      {\n-\t_M_type = 0\n-      };\n+\t{\n+\t  _M_type = 0\n+\t};\n     };\n \n   // Thirteen specializations (yes there are eleven standard integer\n@@ -135,213 +148,198 @@ namespace std\n     struct __is_integer<bool>\n     {\n       enum\n-      {\n-\t_M_type = 1\n-      };\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n \n   template<>\n     struct __is_integer<char>\n     {\n       enum\n-      {\n-\t_M_type = 1\n-      };\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n \n   template<>\n     struct __is_integer<signed char>\n     {\n       enum\n-      {\n-\t_M_type = 1\n-      };\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n \n   template<>\n-  struct __is_integer<unsigned char>\n-  {\n-    enum\n+    struct __is_integer<unsigned char>\n     {\n-      _M_type = 1\n+      enum\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n-  };\n \n # ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n-  struct __is_integer<wchar_t>\n-  {\n-    enum\n+    struct __is_integer<wchar_t>\n     {\n-      _M_type = 1\n+      enum\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n-  };\n # endif\n \n   template<>\n-  struct __is_integer<short>\n-  {\n-    enum\n+    struct __is_integer<short>\n     {\n-      _M_type = 1\n+      enum\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n-  };\n \n   template<>\n-  struct __is_integer<unsigned short>\n-  {\n-    enum\n+    struct __is_integer<unsigned short>\n     {\n-      _M_type = 1\n+      enum\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n-  };\n \n   template<>\n-  struct __is_integer<int>\n-  {\n-    enum\n+    struct __is_integer<int>\n     {\n-      _M_type = 1\n+      enum\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n-  };\n \n   template<>\n-  struct __is_integer<unsigned int>\n-  {\n-    enum\n+    struct __is_integer<unsigned int>\n     {\n-      _M_type = 1\n+      enum\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n-  };\n \n   template<>\n-  struct __is_integer<long>\n-  {\n-    enum\n+    struct __is_integer<long>\n     {\n-      _M_type = 1\n+      enum\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n-  };\n \n   template<>\n-  struct __is_integer<unsigned long>\n-  {\n-    enum\n+    struct __is_integer<unsigned long>\n     {\n-      _M_type = 1\n+      enum\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n-  };\n \n   template<>\n-  struct __is_integer<long long>\n-  {\n-    enum\n+    struct __is_integer<long long>\n     {\n-      _M_type = 1\n+      enum\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n-  };\n \n   template<>\n-  struct __is_integer<unsigned long long>\n-  {\n-    enum\n+    struct __is_integer<unsigned long long>\n     {\n-      _M_type = 1\n+      enum\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n-  };\n \n   //\n   // Floating point types\n   //\n   template<typename _Tp>\n-  struct __is_floating\n-  {\n-    enum\n+    struct __is_floating\n     {\n-      _M_type = 0\n+      enum\n+\t{\n+\t  _M_type = 0\n+\t};\n     };\n-  };\n \n   // three specializations (float, double and 'long double')\n   template<>\n-  struct __is_floating<float>\n-  {\n-    enum\n+    struct __is_floating<float>\n     {\n-      _M_type = 1\n+      enum\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n-  };\n \n   template<>\n-  struct __is_floating<double>\n-  {\n-    enum\n+    struct __is_floating<double>\n     {\n-      _M_type = 1\n+      enum\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n-  };\n \n   template<>\n-  struct __is_floating<long double>\n-  {\n-    enum\n+    struct __is_floating<long double>\n     {\n-      _M_type = 1\n+      enum\n+\t{\n+\t  _M_type = 1\n+\t};\n     };\n-  };\n \n   //\n   // An arithmetic type is an integer type or a floating point type\n   //\n   template<typename _Tp>\n-  struct __is_arithmetic\n-  {\n-    enum\n+    struct __is_arithmetic\n     {\n-      _M_type = __is_integer<_Tp>::_M_type || __is_floating<_Tp>::_M_type\n+      enum\n+\t{\n+\t  _M_type = __is_integer<_Tp>::_M_type || __is_floating<_Tp>::_M_type\n+\t};\n     };\n-  };\n-\n+  \n   //\n   // A fundamental type is `void' or and arithmetic type\n   //\n   template<typename _Tp>\n-  struct __is_fundamental\n-  {\n-    enum\n+    struct __is_fundamental\n     {\n-      _M_type = __is_void<_Tp>::_M_type || __is_arithmetic<_Tp>::_M_type\n+      enum\n+\t{\n+\t  _M_type = __is_void<_Tp>::_M_type || __is_arithmetic<_Tp>::_M_type\n+\t};\n     };\n-  };\n \n   //\n   // For the immediate use, the following is a good approximation\n   //\n-\n-  // NB: g++ can not compile these if declared within the class\n-  // __is_pod itself.\n-  namespace __gnu_internal\n-  {\n-    typedef char __one;\n-    typedef char __two[2];\n-\n-    template <typename _Tp>\n-    __one __test_type (int _Tp::*);\n-    template <typename _Tp>\n-    __two& __test_type (...);\n-  }\n-\n-  \n   template<typename _Tp>\n-  struct __is_pod\n-  {\n-    enum\n+    struct __is_pod\n     {\n-      _M_type = (sizeof(__gnu_internal::__test_type<_Tp>(0)) != sizeof(__gnu_internal::__one))\n+      enum\n+\t{\n+\t  _M_type = (sizeof(__gnu_internal::__test_type<_Tp>(0))\n+\t\t     != sizeof(__gnu_internal::__one))\n+\t};\n     };\n-  };\n \n } // namespace std\n \n-\n #endif //_CPP_TYPE_TRAITS_H"}]}