{"sha": "398f05daa1904a479a58c212012faa10b65e8834", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk4ZjA1ZGFhMTkwNGE0NzlhNThjMjEyMDEyZmFhMTBiNjVlODgzNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-10-04T09:46:56Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-10-04T09:46:56Z"}, "message": "lto-streamer.h (lto_input_toplevel_asms): Add order_base parameter.\n\n\t* lto-streamer.h (lto_input_toplevel_asms): Add order_base parameter.\n\t* lto-streamer-in.c (lto_input_toplevel_asms): Stream in order.\n\t* lto-streamer-out.c (lto_output_toplevel_asms): Stream out order.\n\t* lto-cgraph.c (order_base): New static var.\n\t(lto_output_node): Stream in order.\n\t(lto_output_varpool_node): Stream out order.\n\t(input_node): Stream in order.\n\t(input_varpool_node): Stream out order.\n\t(input_cgraph_1): Initialize order base; update call of\n\tlto_input_toplevel_asms.\n\nFrom-SVN: r179496", "tree": {"sha": "57ee07886936e8cdf54731ec7b22e1981530e307", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57ee07886936e8cdf54731ec7b22e1981530e307"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/398f05daa1904a479a58c212012faa10b65e8834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/398f05daa1904a479a58c212012faa10b65e8834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/398f05daa1904a479a58c212012faa10b65e8834", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/398f05daa1904a479a58c212012faa10b65e8834/comments", "author": null, "committer": null, "parents": [{"sha": "36a50ab6e0a6dcf32f1ece84621704cd9b16eabe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36a50ab6e0a6dcf32f1ece84621704cd9b16eabe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36a50ab6e0a6dcf32f1ece84621704cd9b16eabe"}], "stats": {"total": 48, "additions": 43, "deletions": 5}, "files": [{"sha": "8cf366c45dc20b0d66fa9b84e6bca1352f9e1b30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398f05daa1904a479a58c212012faa10b65e8834/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398f05daa1904a479a58c212012faa10b65e8834/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=398f05daa1904a479a58c212012faa10b65e8834", "patch": "@@ -1,3 +1,16 @@\n+2011-10-04  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-streamer.h (lto_input_toplevel_asms): Add order_base parameter.\n+\t* lto-streamer-in.c (lto_input_toplevel_asms): Stream in order.\n+\t* lto-streamer-out.c (lto_output_toplevel_asms): Stream out order.\n+\t* lto-cgraph.c (order_base): New static var.\n+\t(lto_output_node): Stream in order.\n+\t(lto_output_varpool_node): Stream out order.\n+\t(input_node): Stream in order.\n+\t(input_varpool_node): Stream out order.\n+\t(input_cgraph_1): Initialize order base; update call of\n+\tlto_input_toplevel_asms.\n+\n 2011-10-04  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/50566"}, {"sha": "833bf84743b946139f3f6da3be44d5c002dfa431", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398f05daa1904a479a58c212012faa10b65e8834/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398f05daa1904a479a58c212012faa10b65e8834/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=398f05daa1904a479a58c212012faa10b65e8834", "patch": "@@ -54,6 +54,9 @@ static void input_cgraph_opt_summary (VEC (cgraph_node_ptr, heap) * nodes);\n /* Number of LDPR values known to GCC.  */\n #define LDPR_NUM_KNOWN (LDPR_PREVAILING_DEF_IRONLY_EXP + 1)\n \n+/* All node orders are ofsetted by ORDER_BASE.  */\n+static int order_base;\n+\n /* Cgraph streaming is organized as set of record whose type\n    is indicated by a tag.  */\n enum LTO_cgraph_tags\n@@ -425,6 +428,7 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n \n   streamer_write_enum (ob->main_stream, LTO_cgraph_tags, LTO_cgraph_last_tag,\n \t\t       tag);\n+  streamer_write_hwi_stream (ob->main_stream, node->order);\n \n   /* In WPA mode, we only output part of the call-graph.  Also, we\n      fake cgraph node attributes.  There are two cases that we care.\n@@ -548,6 +552,7 @@ lto_output_varpool_node (struct lto_simple_output_block *ob, struct varpool_node\n   struct bitpack_d bp;\n   int ref;\n \n+  streamer_write_hwi_stream (ob->main_stream, node->order);\n   lto_output_var_decl_index (ob->decl_state, ob->main_stream, node->decl);\n   bp = bitpack_create (ob->main_stream);\n   bp_pack_value (&bp, node->externally_visible, 1);\n@@ -960,7 +965,9 @@ input_node (struct lto_file_decl_data *file_data,\n   unsigned decl_index;\n   int ref = LCC_NOT_FOUND, ref2 = LCC_NOT_FOUND;\n   int clone_ref;\n+  int order;\n \n+  order = streamer_read_hwi (ib) + order_base;\n   clone_ref = streamer_read_hwi (ib);\n \n   decl_index = streamer_read_uhwi (ib);\n@@ -974,6 +981,10 @@ input_node (struct lto_file_decl_data *file_data,\n   else\n     node = cgraph_get_create_node (fn_decl);\n \n+  node->order = order;\n+  if (order >= cgraph_order)\n+    cgraph_order = order + 1;\n+\n   node->count = streamer_read_hwi (ib);\n   node->count_materialization_scale = streamer_read_hwi (ib);\n \n@@ -1035,10 +1046,15 @@ input_varpool_node (struct lto_file_decl_data *file_data,\n   struct bitpack_d bp;\n   int ref = LCC_NOT_FOUND;\n   bool non_null_aliasof;\n+  int order;\n \n+  order = streamer_read_hwi (ib) + order_base;\n   decl_index = streamer_read_uhwi (ib);\n   var_decl = lto_file_decl_data_get_var_decl (file_data, decl_index);\n   node = varpool_node (var_decl);\n+  node->order = order;\n+  if (order >= cgraph_order)\n+    cgraph_order = order + 1;\n   node->lto_file_data = file_data;\n \n   bp = streamer_read_bitpack (ib);\n@@ -1178,6 +1194,7 @@ input_cgraph_1 (struct lto_file_decl_data *file_data,\n   unsigned i;\n \n   tag = streamer_read_enum (ib, LTO_cgraph_tags, LTO_cgraph_last_tag);\n+  order_base = cgraph_order;\n   while (tag)\n     {\n       if (tag == LTO_cgraph_edge)\n@@ -1196,7 +1213,7 @@ input_cgraph_1 (struct lto_file_decl_data *file_data,\n       tag = streamer_read_enum (ib, LTO_cgraph_tags, LTO_cgraph_last_tag);\n     }\n \n-  lto_input_toplevel_asms (file_data);\n+  lto_input_toplevel_asms (file_data, order_base);\n \n   /* AUX pointers should be all non-zero for nodes read from the stream.  */\n #ifdef ENABLE_CHECKING"}, {"sha": "d4e80c795735bba58301677f9dcc5ac98050dadc", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398f05daa1904a479a58c212012faa10b65e8834/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398f05daa1904a479a58c212012faa10b65e8834/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=398f05daa1904a479a58c212012faa10b65e8834", "patch": "@@ -1144,7 +1144,7 @@ lto_input_tree (struct lto_input_block *ib, struct data_in *data_in)\n /* Input toplevel asms.  */\n \n void\n-lto_input_toplevel_asms (struct lto_file_decl_data *file_data)\n+lto_input_toplevel_asms (struct lto_file_decl_data *file_data, int order_base)\n {\n   size_t len;\n   const char *data = lto_get_section_data (file_data, LTO_section_asm,\n@@ -1173,7 +1173,12 @@ lto_input_toplevel_asms (struct lto_file_decl_data *file_data)\n \t\t     header->lto_header.minor_version);\n \n   while ((str = streamer_read_string_cst (data_in, &ib)))\n-    cgraph_add_asm_node (str);\n+    {\n+      struct cgraph_asm_node *node = cgraph_add_asm_node (str);\n+      node->order = streamer_read_hwi (&ib) + order_base;\n+      if (node->order >= cgraph_order)\n+\tcgraph_order = node->order + 1;\n+    }\n \n   clear_line_info (data_in);\n   lto_data_in_delete (data_in);"}, {"sha": "c14b3a98df656c9cfcfa9a9021e5246fdb798091", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398f05daa1904a479a58c212012faa10b65e8834/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398f05daa1904a479a58c212012faa10b65e8834/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=398f05daa1904a479a58c212012faa10b65e8834", "patch": "@@ -954,7 +954,10 @@ lto_output_toplevel_asms (void)\n   streamer_write_char_stream (ob->string_stream, 0);\n \n   for (can = cgraph_asm_nodes; can; can = can->next)\n-    streamer_write_string_cst (ob, ob->main_stream, can->asm_str);\n+    {\n+      streamer_write_string_cst (ob, ob->main_stream, can->asm_str);\n+      streamer_write_hwi (ob, can->order);\n+    }\n \n   streamer_write_string_cst (ob, ob->main_stream, NULL_TREE);\n "}, {"sha": "f3c93682633fb97afb627856e3b228dcee45ab36", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398f05daa1904a479a58c212012faa10b65e8834/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398f05daa1904a479a58c212012faa10b65e8834/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=398f05daa1904a479a58c212012faa10b65e8834", "patch": "@@ -807,7 +807,7 @@ extern void lto_input_function_body (struct lto_file_decl_data *, tree,\n \t\t\t\t     const char *);\n extern void lto_input_constructors_and_inits (struct lto_file_decl_data *,\n \t\t\t\t\t      const char *);\n-extern void lto_input_toplevel_asms (struct lto_file_decl_data *);\n+extern void lto_input_toplevel_asms (struct lto_file_decl_data *, int);\n extern struct data_in *lto_data_in_create (struct lto_file_decl_data *,\n \t\t\t\t    const char *, unsigned,\n \t\t\t\t    VEC(ld_plugin_symbol_resolution_t,heap) *);"}]}