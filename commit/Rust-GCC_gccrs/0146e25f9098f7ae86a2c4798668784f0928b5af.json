{"sha": "0146e25f9098f7ae86a2c4798668784f0928b5af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE0NmUyNWY5MDk4ZjdhZTg2YTJjNDc5ODY2ODc4NGYwOTI4YjVhZg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-04-07T16:12:05Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-04-07T16:12:05Z"}, "message": "Avoid needless unsharing during constexpr evaluation (PR c++/70452)\n\ngcc/cp/ChangeLog:\n\n\tPR c++/70452\n\t* constexpr.c (find_constructor): New function.\n\t(unshare_constructor): New function.\n\t(cxx_eval_call_expression): Use unshare_constructor instead of\n\tunshare_expr.\n\t(find_array_ctor_elt): Likewise.\n\t(cxx_eval_vec_init_1): Likewise.\n\t(cxx_eval_store_expression): Likewise.\n\t(cxx_eval_constant_expression): Likewise.\n\nFrom-SVN: r234810", "tree": {"sha": "1b70b58146831b251b514bfafe6d51777e32e783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b70b58146831b251b514bfafe6d51777e32e783"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0146e25f9098f7ae86a2c4798668784f0928b5af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0146e25f9098f7ae86a2c4798668784f0928b5af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0146e25f9098f7ae86a2c4798668784f0928b5af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0146e25f9098f7ae86a2c4798668784f0928b5af/comments", "author": null, "committer": null, "parents": [{"sha": "9817ae350c2d63997551eb8fab3df34ff70ebd32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9817ae350c2d63997551eb8fab3df34ff70ebd32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9817ae350c2d63997551eb8fab3df34ff70ebd32"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "a8cb00ed6e098c4e599d224741061c84c28c0889", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0146e25f9098f7ae86a2c4798668784f0928b5af/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0146e25f9098f7ae86a2c4798668784f0928b5af/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0146e25f9098f7ae86a2c4798668784f0928b5af", "patch": "@@ -1,3 +1,15 @@\n+2016-04-07  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/70452\n+\t* constexpr.c (find_constructor): New function.\n+\t(unshare_constructor): New function.\n+\t(cxx_eval_call_expression): Use unshare_constructor instead of\n+\tunshare_expr.\n+\t(find_array_ctor_elt): Likewise.\n+\t(cxx_eval_vec_init_1): Likewise.\n+\t(cxx_eval_store_expression): Likewise.\n+\t(cxx_eval_constant_expression): Likewise.\n+\n 2016-04-06  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c/70436"}, {"sha": "5bccdec8d155908295a0b8eab6a0e71febe5aac4", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0146e25f9098f7ae86a2c4798668784f0928b5af/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0146e25f9098f7ae86a2c4798668784f0928b5af/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=0146e25f9098f7ae86a2c4798668784f0928b5af", "patch": "@@ -1151,6 +1151,30 @@ adjust_temp_type (tree type, tree temp)\n   return cp_fold_convert (type, temp);\n }\n \n+/* Callback for walk_tree used by unshare_constructor.  */\n+\n+static tree\n+find_constructor (tree *tp, int *walk_subtrees, void *)\n+{\n+  if (TYPE_P (*tp))\n+    *walk_subtrees = 0;\n+  if (TREE_CODE (*tp) == CONSTRUCTOR)\n+    return *tp;\n+  return NULL_TREE;\n+}\n+\n+/* If T is a CONSTRUCTOR or an expression that has a CONSTRUCTOR node as a\n+   subexpression, return an unshared copy of T.  Otherwise return T.  */\n+\n+static tree\n+unshare_constructor (tree t)\n+{\n+  tree ctor = walk_tree (&t, find_constructor, NULL, NULL);\n+  if (ctor != NULL_TREE)\n+    return unshare_expr (t);\n+  return t;\n+}\n+\n /* Subroutine of cxx_eval_call_expression.\n    We are processing a call expression (either CALL_EXPR or\n    AGGR_INIT_EXPR) in the context of CTX.  Evaluate\n@@ -1454,7 +1478,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t      tree arg = TREE_VALUE (bound);\n \t      gcc_assert (DECL_NAME (remapped) == DECL_NAME (oparm));\n \t      /* Don't share a CONSTRUCTOR that might be changed.  */\n-\t      arg = unshare_expr (arg);\n+\t      arg = unshare_constructor (arg);\n \t      ctx->values->put (remapped, arg);\n \t      bound = TREE_CHAIN (bound);\n \t      remapped = DECL_CHAIN (remapped);\n@@ -1534,7 +1558,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n     }\n \n   pop_cx_call_context ();\n-  return unshare_expr (result);\n+  return unshare_constructor (result);\n }\n \n /* FIXME speed this up, it's taking 16% of compile time on sieve testcase.  */\n@@ -1880,7 +1904,7 @@ find_array_ctor_elt (tree ary, tree dindex, bool insert = false)\n \t\t  /* Append the element we want to insert.  */\n \t\t  ++middle;\n \t\t  e.index = dindex;\n-\t\t  e.value = unshare_expr (elt.value);\n+\t\t  e.value = unshare_constructor (elt.value);\n \t\t  vec_safe_insert (CONSTRUCTOR_ELTS (ary), middle, e);\n \t\t}\n \t      else\n@@ -1896,7 +1920,7 @@ find_array_ctor_elt (tree ary, tree dindex, bool insert = false)\n \t\t    e.index = hi;\n \t\t  else\n \t\t    e.index = build2 (RANGE_EXPR, sizetype, new_lo, hi);\n-\t\t  e.value = unshare_expr (elt.value);\n+\t\t  e.value = unshare_constructor (elt.value);\n \t\t  vec_safe_insert (CONSTRUCTOR_ELTS (ary), middle+1, e);\n \t\t}\n \t    }\n@@ -2565,7 +2589,7 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n \t  for (i = 1; i < max; ++i)\n \t    {\n \t      idx = build_int_cst (size_type_node, i);\n-\t      CONSTRUCTOR_APPEND_ELT (*p, idx, unshare_expr (eltinit));\n+\t      CONSTRUCTOR_APPEND_ELT (*p, idx, unshare_constructor (eltinit));\n \t    }\n \t  break;\n \t}\n@@ -3113,7 +3137,7 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n   init = cxx_eval_constant_expression (&new_ctx, init, false,\n \t\t\t\t       non_constant_p, overflow_p);\n   /* Don't share a CONSTRUCTOR that might be changed later.  */\n-  init = unshare_expr (init);\n+  init = unshare_constructor (init);\n   if (target == object)\n     /* The hash table might have moved since the get earlier.  */\n     valp = ctx->values->get (object);\n@@ -3565,7 +3589,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t\t\t false,\n \t\t\t\t\t\t non_constant_p, overflow_p);\n \t    /* Don't share a CONSTRUCTOR that might be changed.  */\n-\t    init = unshare_expr (init);\n+\t    init = unshare_constructor (init);\n \t    ctx->values->put (r, init);\n \t  }\n \telse if (ctx == &new_ctx)\n@@ -3610,7 +3634,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       if (lval)\n \t{\n \t  tree slot = TARGET_EXPR_SLOT (t);\n-\t  r = unshare_expr (r);\n+\t  r = unshare_constructor (r);\n \t  ctx->values->put (slot, r);\n \t  return slot;\n \t}"}]}