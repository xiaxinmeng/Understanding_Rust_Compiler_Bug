{"sha": "1623d9f346086582c49cb747c3dabd062e730c42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYyM2Q5ZjM0NjA4NjU4MmM0OWNiNzQ3YzNkYWJkMDYyZTczMGM0Mg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2018-05-25T11:09:42Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2018-05-25T11:09:42Z"}, "message": "re PR tree-optimization/85720 (bad codegen for looped assignment of primitives at -O2)\n\n\tPR tree-optimization/85720\n\n\t* tree-loop-distribution.c (break_alias_scc_partitions): Don't merge\n\tSCC if all partitions are builtins.\n\t(version_loop_by_alias_check): New parameter.  Generate cancelable\n\truntime alias check if all partitions are builtins.\n\t(distribute_loop): Update call to above function.\n\n\tgcc/testsuite\n\t* gcc.dg/tree-ssa/pr85720.c: New test.\n\t* gcc.target/i386/avx256-unaligned-store-2.c: Disable loop pattern\n\tdistribution.\n\nFrom-SVN: r260753", "tree": {"sha": "5bd4c87d04602bd948a51e66e35ffd26ba123d98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bd4c87d04602bd948a51e66e35ffd26ba123d98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1623d9f346086582c49cb747c3dabd062e730c42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1623d9f346086582c49cb747c3dabd062e730c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1623d9f346086582c49cb747c3dabd062e730c42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1623d9f346086582c49cb747c3dabd062e730c42/comments", "author": null, "committer": null, "parents": [{"sha": "cd3b2b6248a07f0da0685636b71d146403ebf776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3b2b6248a07f0da0685636b71d146403ebf776", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd3b2b6248a07f0da0685636b71d146403ebf776"}], "stats": {"total": 71, "additions": 61, "deletions": 10}, "files": [{"sha": "68a4754ade19e1a20c820d749c6a683dcb53e500", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1623d9f346086582c49cb747c3dabd062e730c42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1623d9f346086582c49cb747c3dabd062e730c42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1623d9f346086582c49cb747c3dabd062e730c42", "patch": "@@ -1,3 +1,12 @@\n+2018-05-25  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/85720\n+\t* tree-loop-distribution.c (break_alias_scc_partitions): Don't merge\n+\tSCC if all partitions are builtins.\n+\t(version_loop_by_alias_check): New parameter.  Generate cancelable\n+\truntime alias check if all partitions are builtins.\n+\t(distribute_loop): Update call to above function.\n+\n 2018-05-25  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-outof-ssa.c (tree-ssa.h, tree-dfa.h): Include header files."}, {"sha": "7d7fc8cb421c441e5c8b486cf653bede6a54d4f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1623d9f346086582c49cb747c3dabd062e730c42/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1623d9f346086582c49cb747c3dabd062e730c42/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1623d9f346086582c49cb747c3dabd062e730c42", "patch": "@@ -1,3 +1,10 @@\n+2018-05-25  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/85720\n+\t* gcc.dg/tree-ssa/pr85720.c: New test.\n+\t* gcc.target/i386/avx256-unaligned-store-2.c: Disable loop pattern\n+\tdistribution.\n+\n 2018-05-25  Martin Liska  <mliska@suse.cz>\n \n \tPR testsuite/85911"}, {"sha": "18d8be92506a093f4bdf0ee2a2e50a9a8738b8e6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr85720.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1623d9f346086582c49cb747c3dabd062e730c42/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr85720.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1623d9f346086582c49cb747c3dabd062e730c42/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr85720.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr85720.c?ref=1623d9f346086582c49cb747c3dabd062e730c42", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target size32plus } } */\n+/* { dg-options \"-O2 -ftree-loop-distribution -ftree-loop-distribute-patterns -fdump-tree-ldist\" } */\n+\n+void fill(char* A, char* B, unsigned n)\n+{\n+    for (unsigned i = 0; i < n; i++)\n+    {\n+        A[i] = 0;\n+        B[i] = A[i] + 1;\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"_builtin_memset\" 2 \"ldist\" } } */"}, {"sha": "1e7969bb47db98a7304010821836063d0ad93fab", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-store-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1623d9f346086582c49cb747c3dabd062e730c42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1623d9f346086582c49cb747c3dabd062e730c42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-2.c?ref=1623d9f346086582c49cb747c3dabd062e730c42", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { ! ia32 } } } */\n-/* { dg-options \"-O3 -mtune-ctrl=sse_typeless_stores -dp -mavx -mavx256-split-unaligned-store -mno-prefer-avx128\" } */\n+/* { dg-options \"-O3 -mtune-ctrl=sse_typeless_stores -dp -mavx -mavx256-split-unaligned-store -mno-prefer-avx128 -fno-tree-loop-distribute-patterns\" } */\n \n #define N 1024\n "}, {"sha": "c6e0a60b01b2200cddb6344fc33eaebfb621f5c4", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1623d9f346086582c49cb747c3dabd062e730c42/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1623d9f346086582c49cb747c3dabd062e730c42/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=1623d9f346086582c49cb747c3dabd062e730c42", "patch": "@@ -2268,21 +2268,26 @@ break_alias_scc_partitions (struct graph *rdg,\n \t  for (j = 0; partitions->iterate (j, &first); ++j)\n \t    if (pg->vertices[j].component == i)\n \t      break;\n+\n+\t  bool same_type = true, all_builtins = partition_builtin_p (first);\n \t  for (++j; partitions->iterate (j, &partition); ++j)\n \t    {\n \t      if (pg->vertices[j].component != i)\n \t\tcontinue;\n \n-\t      /* Note we Merge partitions of parallel type on purpose, though\n-\t\t the result partition is sequential.  The reason is vectorizer\n-\t\t can do more accurate runtime alias check in this case.  Also\n-\t\t it results in more conservative distribution.  */\n \t      if (first->type != partition->type)\n \t\t{\n-\t\t  bitmap_clear_bit (sccs_to_merge, i);\n+\t\t  same_type = false;\n \t\t  break;\n \t\t}\n+\t      all_builtins &= partition_builtin_p (partition);\n \t    }\n+\t  /* Merge SCC if all partitions in SCC have the same type, though the\n+\t     result partition is sequential, because vectorizer can do better\n+\t     runtime alias check.  One expecption is all partitions in SCC are\n+\t     builtins.  */\n+\t  if (!same_type || all_builtins)\n+\t    bitmap_clear_bit (sccs_to_merge, i);\n \t}\n \n       /* Initialize callback data for traversing.  */\n@@ -2458,7 +2463,8 @@ compute_alias_check_pairs (struct loop *loop, vec<ddr_p> *alias_ddrs,\n    checks and version LOOP under condition of these runtime alias checks.  */\n \n static void\n-version_loop_by_alias_check (struct loop *loop, vec<ddr_p> *alias_ddrs)\n+version_loop_by_alias_check (vec<struct partition *> *partitions,\n+\t\t\t     struct loop *loop, vec<ddr_p> *alias_ddrs)\n {\n   profile_probability prob;\n   basic_block cond_bb;\n@@ -2481,9 +2487,25 @@ version_loop_by_alias_check (struct loop *loop, vec<ddr_p> *alias_ddrs)\n \t\t\t\t      is_gimple_val, NULL_TREE);\n \n   /* Depend on vectorizer to fold IFN_LOOP_DIST_ALIAS.  */\n-  if (flag_tree_loop_vectorize)\n+  bool cancelable_p = flag_tree_loop_vectorize;\n+  if (cancelable_p)\n+    {\n+      unsigned i = 0;\n+      struct partition *partition;\n+      for (; partitions->iterate (i, &partition); ++i)\n+\tif (!partition_builtin_p (partition))\n+\t  break;\n+\n+     /* If all partitions are builtins, distributing it would be profitable and\n+\twe don't want to cancel the runtime alias checks.  */\n+      if (i == partitions->length ())\n+\tcancelable_p = false;\n+    }\n+\n+  /* Generate internal function call for loop distribution alias check if the\n+     runtime alias check should be cancelable.  */\n+  if (cancelable_p)\n     {\n-      /* Generate internal function call for loop distribution alias check.  */\n       call_stmt = gimple_build_call_internal (IFN_LOOP_DIST_ALIAS,\n \t\t\t\t\t      2, NULL_TREE, cond_expr);\n       lhs = make_ssa_name (boolean_type_node);\n@@ -2883,7 +2905,7 @@ distribute_loop (struct loop *loop, vec<gimple *> stmts,\n     }\n \n   if (version_for_distribution_p (&partitions, &alias_ddrs))\n-    version_loop_by_alias_check (loop, &alias_ddrs);\n+    version_loop_by_alias_check (&partitions, loop, &alias_ddrs);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {"}]}