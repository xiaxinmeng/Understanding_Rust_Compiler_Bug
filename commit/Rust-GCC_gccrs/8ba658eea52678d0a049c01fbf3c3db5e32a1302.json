{"sha": "8ba658eea52678d0a049c01fbf3c3db5e32a1302", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJhNjU4ZWVhNTI2NzhkMGEwNDljMDFmYmYzYzNkYjVlMzJhMTMwMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-07-09T23:31:28Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-07-09T23:31:28Z"}, "message": "cp-tree.h (constructor_name_p): Declare it.\n\n\t* cp-tree.h (constructor_name_p): Declare it.\n\t(check_template_template_default_arg): Likewise.\n\t* class.c (handle_using_decl): Use constructor_name_p.\n\t* decl.c (grokdeclarator): Likewise.\n\t* decl2.c (constructor_name_p): Define it.\n\t* init.c (build_member_call): Use constructor_name_p.\n\t* parse.y (template_parm): Use check_template_template_default_arg.\n\t* pt.c (check_explicit_specialization): Use constructor_name_p.\n\t* semantics.c (check_template_template_default_arg): New function.\n\nFrom-SVN: r55350", "tree": {"sha": "bc0383f03a6b2e0da9add1f256bd39687fc76c45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc0383f03a6b2e0da9add1f256bd39687fc76c45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ba658eea52678d0a049c01fbf3c3db5e32a1302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba658eea52678d0a049c01fbf3c3db5e32a1302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ba658eea52678d0a049c01fbf3c3db5e32a1302", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba658eea52678d0a049c01fbf3c3db5e32a1302/comments", "author": null, "committer": null, "parents": [{"sha": "2fefbb5dbcc965480e733fa2ca20750eea2f7bc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fefbb5dbcc965480e733fa2ca20750eea2f7bc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fefbb5dbcc965480e733fa2ca20750eea2f7bc2"}], "stats": {"total": 81, "additions": 54, "deletions": 27}, "files": [{"sha": "465716da0692652dc2b3e1e707c2a87b0cf2e0bc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8ba658eea52678d0a049c01fbf3c3db5e32a1302", "patch": "@@ -1,3 +1,15 @@\n+2002-07-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (constructor_name_p): Declare it.\n+\t(check_template_template_default_arg): Likewise.\n+\t* class.c (handle_using_decl): Use constructor_name_p.\n+\t* decl.c (grokdeclarator): Likewise.\n+\t* decl2.c (constructor_name_p): Define it.\n+\t* init.c (build_member_call): Use constructor_name_p.\n+\t* parse.y (template_parm): Use check_template_template_default_arg.\n+\t* pt.c (check_explicit_specialization): Use constructor_name_p.\n+\t* semantics.c (check_template_template_default_arg): New function.\n+\t\n 2002-07-08  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* pt.c (can_complete_type_without_circularity): Add static to"}, {"sha": "f2544bd1f521b08448fc75d5918318359442838a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=8ba658eea52678d0a049c01fbf3c3db5e32a1302", "patch": "@@ -1212,14 +1212,12 @@ handle_using_decl (using_decl, t)\n   if (! binfo)\n     return;\n   \n-  if (name == constructor_name (ctype)\n-      || name == constructor_name_full (ctype))\n+  if (constructor_name_p (name, ctype))\n     {\n       cp_error_at (\"`%D' names constructor\", using_decl);\n       return;\n     }\n-  if (name == constructor_name (t)\n-      || name == constructor_name_full (t))\n+  if (constructor_name_p (name, t))\n     {\n       cp_error_at (\"`%D' invalid in `%T'\", using_decl, t);\n       return;"}, {"sha": "6b7522fbe9d007cb4e6c211d50b0b86dbf8320e2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8ba658eea52678d0a049c01fbf3c3db5e32a1302", "patch": "@@ -3926,6 +3926,7 @@ extern tree grokoptypename\t\t\tPARAMS ((tree, tree));\n extern void cplus_decl_attributes\t\tPARAMS ((tree *, tree, int));\n extern tree constructor_name_full\t\tPARAMS ((tree));\n extern tree constructor_name\t\t\tPARAMS ((tree));\n+extern bool constructor_name_p                  (tree, tree);\n extern void defer_fn            \t\tPARAMS ((tree));\n extern void finish_anon_union\t\t\tPARAMS ((tree));\n extern tree finish_table\t\t\tPARAMS ((tree, tree, tree, int));\n@@ -4318,7 +4319,7 @@ extern void setup_vtbl_ptr\t\t\tPARAMS ((tree, tree));\n extern void clear_out_block                     PARAMS ((void));\n extern tree begin_global_stmt_expr              PARAMS ((void));\n extern tree finish_global_stmt_expr             PARAMS ((tree));\n-\n+extern tree check_template_template_default_arg (tree);\n \n /* in spew.c */\n extern void init_spew\t\t\t\tPARAMS ((void));"}, {"sha": "b5d18b4c67cf3ceb044a4855c07cc9f6592bc44b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8ba658eea52678d0a049c01fbf3c3db5e32a1302", "patch": "@@ -9848,10 +9848,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t    if (ctype\n \t\t&& TREE_OPERAND (decl, 0)\n \t\t&& (TREE_CODE (TREE_OPERAND (decl, 0)) == TYPE_DECL\n-\t\t    && ((DECL_NAME (TREE_OPERAND (decl, 0))\n-\t\t\t == constructor_name_full (ctype))\n-\t\t\t|| (DECL_NAME (TREE_OPERAND (decl, 0))\n-\t\t\t    == constructor_name (ctype)))))\n+\t\t    && constructor_name_p (DECL_NAME (TREE_OPERAND (decl, 0)),\n+\t\t\t\t\t   ctype)))\n \t      TREE_OPERAND (decl, 0) = constructor_name (ctype);\n \t    next = &TREE_OPERAND (decl, 0);\n \t    decl = *next;\n@@ -9958,10 +9956,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t}\n \n \t      if (ctype && TREE_CODE (TREE_OPERAND (decl, 1)) == TYPE_DECL\n-\t\t  && ((DECL_NAME (TREE_OPERAND (decl, 1))\n-\t\t       == constructor_name_full (ctype))\n-\t\t      || (DECL_NAME (TREE_OPERAND (decl, 1))\n-\t\t\t  == constructor_name (ctype))))\n+\t\t  && constructor_name_p (DECL_NAME (TREE_OPERAND (decl, 1)),\n+\t\t\t\t\t ctype))\n \t\tTREE_OPERAND (decl, 1) = constructor_name (ctype);\n \t      next = &TREE_OPERAND (decl, 1);\n \t      decl = *next;\n@@ -9975,8 +9971,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t    }\n \t\t  else if (TREE_CODE (decl) == BIT_NOT_EXPR\n \t\t\t   && TREE_CODE (TREE_OPERAND (decl, 0)) == IDENTIFIER_NODE\n-\t\t\t   && (constructor_name (ctype) == TREE_OPERAND (decl, 0)\n-\t\t\t       || constructor_name_full (ctype) == TREE_OPERAND (decl, 0)))\n+\t\t\t   && constructor_name_p (TREE_OPERAND (decl, 0),\n+\t\t\t\t\t\t  ctype))\n \t\t    {\n \t\t      sfk = sfk_destructor;\n \t\t      ctor_return_type = ctype;"}, {"sha": "4a12914695d2cf4a19c2348c36f1d5630640d86c", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=8ba658eea52678d0a049c01fbf3c3db5e32a1302", "patch": "@@ -1810,6 +1810,16 @@ constructor_name (thing)\n     return thing;\n   return t;\n }\n+\n+/* Returns TRUE if NAME is the name for the constructor for TYPE.  */\n+\n+bool\n+constructor_name_p (tree name, tree type)\n+{\n+  return (name == constructor_name (type)\n+\t  || name == constructor_name_full (type));\n+}\n+\n \f\n /* Defer the compilation of the FN until the end of compilation.  */\n "}, {"sha": "1fa75b2521ec1957846a33c8d059e7aec218efd3", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=8ba658eea52678d0a049c01fbf3c3db5e32a1302", "patch": "@@ -1522,8 +1522,7 @@ build_member_call (type, name, parmlist)\n \treturn error_mark_node;\n     }\n \n-  if (method_name == constructor_name (type)\n-      || method_name == constructor_name_full (type))\n+  if (constructor_name_p (method_name, type))\n     return build_functional_cast (type, parmlist);\n   if (lookup_fnfields (basetype_path, method_name, 0))\n     return build_method_call (decl, "}, {"sha": "e41ffc01001895622ec7fb48af6f702ab57e6b32", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=8ba658eea52678d0a049c01fbf3c3db5e32a1302", "patch": "@@ -710,14 +710,7 @@ template_parm:\n \t\t{ $$ = build_tree_list (NULL_TREE, $1); }\n \t| template_template_parm '=' template_arg\n \t\t{\n-\t\t  if (TREE_CODE ($3) != TEMPLATE_DECL\n-\t\t      && TREE_CODE ($3) != TEMPLATE_TEMPLATE_PARM\n-\t\t      && TREE_CODE ($3) != TYPE_DECL\n-\t\t      && TREE_CODE ($3) != UNBOUND_CLASS_TEMPLATE)\n-\t\t    {\n-\t\t      error (\"invalid default template argument\");\n-\t\t      $3 = error_mark_node;\n-\t\t    }\n+\t\t  $3 = check_template_template_default_arg ($3);\n \t\t  $$ = build_tree_list ($3, $1);\n \t\t}\n \t;"}, {"sha": "c6d41f4ec2604567f6c5ebbfbf08e6c10425e80c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8ba658eea52678d0a049c01fbf3c3db5e32a1302", "patch": "@@ -1529,8 +1529,7 @@ check_explicit_specialization (declarator, decl, template_count, flags)\n \t  tree fns = NULL_TREE;\n \t  int idx;\n \n-\t  if (name == constructor_name (ctype) \n-\t      || name == constructor_name_full (ctype))\n+\t  if (constructor_name_p (name, ctype))\n \t    {\n \t      int is_constructor = DECL_CONSTRUCTOR_P (decl);\n \t      "}, {"sha": "8766d6fa731353ee6a98e5f77eb7fe6e9c2e21cc", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba658eea52678d0a049c01fbf3c3db5e32a1302/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=8ba658eea52678d0a049c01fbf3c3db5e32a1302", "patch": "@@ -1625,6 +1625,25 @@ finish_template_template_parm (aggr, identifier)\n   return finish_template_type_parm (aggr, tmpl);\n }\n \n+/* ARGUMENT is the default-argument value for a template template\n+   parameter.  If ARGUMENT is invalid, issue error messages and return\n+   the ERROR_MARK_NODE.  Otherwise, ARGUMENT itself is returned.  */\n+\n+tree\n+check_template_template_default_arg (tree argument)\n+{\n+  if (TREE_CODE (argument) != TEMPLATE_DECL\n+      && TREE_CODE (argument) != TEMPLATE_TEMPLATE_PARM\n+      && TREE_CODE (argument) != TYPE_DECL\n+      && TREE_CODE (argument) != UNBOUND_CLASS_TEMPLATE)\n+    {\n+      error (\"invalid default template argument\");\n+      return error_mark_node;\n+    }\n+\n+  return argument;\n+}\n+\n /* Finish a parameter list, indicated by PARMS.  If ELLIPSIS is\n    non-zero, the parameter list was terminated by a `...'.  */\n "}]}