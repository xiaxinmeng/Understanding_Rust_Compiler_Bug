{"sha": "e3f6b60da961f30d370f42cb2809d35acff422c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNmNmI2MGRhOTYxZjMwZDM3MGY0MmNiMjgwOWQzNWFjZmY0MjJjMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-07T15:32:08Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-07T15:32:08Z"}, "message": "reflect: Use C style comments in 386 assembly for Solaris assembler.\n\nFrom Rainer Orth.\n\nFrom-SVN: r203249", "tree": {"sha": "5d3e0b08288b4d7f65c8e83bae6f1e7df221335e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d3e0b08288b4d7f65c8e83bae6f1e7df221335e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3f6b60da961f30d370f42cb2809d35acff422c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f6b60da961f30d370f42cb2809d35acff422c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3f6b60da961f30d370f42cb2809d35acff422c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f6b60da961f30d370f42cb2809d35acff422c3/comments", "author": null, "committer": null, "parents": [{"sha": "19e9b2a386e52b3045a94b7d401530e4237f87ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19e9b2a386e52b3045a94b7d401530e4237f87ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19e9b2a386e52b3045a94b7d401530e4237f87ed"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "5878bc44c56317f089f1d93243e40b5802836e61", "filename": "libgo/go/reflect/makefunc_386.S", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f6b60da961f30d370f42cb2809d35acff422c3/libgo%2Fgo%2Freflect%2Fmakefunc_386.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f6b60da961f30d370f42cb2809d35acff422c3/libgo%2Fgo%2Freflect%2Fmakefunc_386.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fmakefunc_386.S?ref=e3f6b60da961f30d370f42cb2809d35acff422c3", "patch": "@@ -1,12 +1,12 @@\n-# Copyright 2013 The Go Authors. All rights reserved.\n-# Use of this source code is governed by a BSD-style\n-# license that can be found in the LICENSE file.\n+/* Copyright 2013 The Go Authors. All rights reserved.\n+   Use of this source code is governed by a BSD-style\n+   license that can be found in the LICENSE file.\n \n-# MakeFunc 386 assembly code.\n+   MakeFunc 386 assembly code.  */\n \n #include \"config.h\"\n \n-\t.global reflect.makeFuncStub\n+\t.globl reflect.makeFuncStub\n \n #ifdef __ELF__\n \t.type reflect.makeFuncStub,@function\n@@ -15,33 +15,34 @@\n reflect.makeFuncStub:\n .LFB1:\n \n-\t# Go does not provide any equivalent to the regparm function\n-\t# attribute, so on Go we do not need to worry about passing\n-\t# parameters in registers.  We just pass a pointer to the\n-\t# arguments on the stack.\n-\t#\n-\t# We do need to pick up the return values, though, so we pass\n-\t# a pointer to a struct that looks like this.\n-\t# struct {\n-\t#   esp uint32\t\t// 0x0\n-\t#   eax uint32\t\t// 0x4\n-\t#   st0 uint64\t\t// 0x8\n-\t# }\n+\t/* Go does not provide any equivalent to the regparm function\n+\t   attribute, so on Go we do not need to worry about passing\n+\t   parameters in registers.  We just pass a pointer to the\n+\t   arguments on the stack.\n+\t\n+\t   We do need to pick up the return values, though, so we pass\n+\t   a pointer to a struct that looks like this.\n+\t   struct {\n+\t     esp uint32\t\t// 0x0\n+\t     eax uint32\t\t// 0x4\n+\t     st0 uint64\t\t// 0x8\n+\t   }\n+\t*/\n \n \tpushl\t%ebp\n .LCFI0:\n \tmovl\t%esp, %ebp\n .LCFI1:\n-\tpushl\t%ebx\t\t# In case this is PIC.\n-\tsubl\t$36, %esp\t# Enough for args and to align stack.\n+\tpushl\t%ebx\t\t/* In case this is PIC.  */\n+\tsubl\t$36, %esp\t/* Enough for args and to align stack.  */\n .LCFI2:\n \n #ifdef __PIC__\n \tcall\t__x86.get_pc_thunk.bx\n \taddl\t$_GLOBAL_OFFSET_TABLE_, %ebx\n #endif\n \n-\tleal\t8(%ebp), %eax\t# Set esp field in struct.\n+\tleal\t8(%ebp), %eax\t/* Set esp field in struct.  */\n \tmovl\t%eax, -24(%ebp)\n \n #ifdef __PIC__\n@@ -61,14 +62,14 @@ reflect.makeFuncStub:\n \tcall\treflect.MakeFuncStubGo\n #endif\n \n-\t# Set return registers.\n+\t/* Set return registers.  */\n \n \tmovl\t-20(%ebp), %eax\n \tfldl\t-16(%ebp)\n \n #ifdef __SSE2__\n-\t# In case we are compiling with -msseregparm.  This won't work\n-\t# correctly if only SSE1 is supported, but that seems unlikely.\n+\t/* In case we are compiling with -msseregparm.  This won't work\n+\t   correctly if only SSE1 is supported, but that seems unlikely.  */\n \tmovsd\t-16(%ebp), %xmm0\n #endif\n "}]}