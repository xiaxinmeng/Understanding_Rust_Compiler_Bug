{"sha": "74ebd1297e9cfa9f7d05bfcac5510d4968cc6ba8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRlYmQxMjk3ZTljZmE5ZjdkMDViZmNhYzU1MTBkNDk2OGNjNmJhOA==", "commit": {"author": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2021-01-28T20:04:03Z"}, "committer": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2021-06-25T15:32:13Z"}, "message": "libstdc++: Make use of __builtin_bit_cast for simd\n\nThe __bit_cast function was a hack to achieve what __builtin_bit_cast\ncan do, therefore use __builtin_bit_cast if possible. However,\n__builtin_bit_cast cannot be used to cast from/to fixed_size_simd, since\nit isn't trivially copyable (in the language sense \u2014 in principle it\nis). Therefore add __proposed::simd_bit_cast to enable the use case\nrequired in the test framework.\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd.h (__bit_cast): Implement via\n\t__builtin_bit_cast #if available.\n\t(__proposed::simd_bit_cast): Add overloads for simd and\n\tsimd_mask, which use __builtin_bit_cast (or __bit_cast #if not\n\tavailable), which return an object of the requested type with\n\tthe same bits as the argument.\n\t* include/experimental/bits/simd_math.h: Use simd_bit_cast\n\tinstead of __bit_cast to allow casts to fixed_size_simd.\n\t(copysign): Remove branch that was only required if __bit_cast\n\tcannot be constexpr.\n\t* testsuite/experimental/simd/tests/bits/test_values.h: Switch\n\tfrom __bit_cast to __proposed::simd_bit_cast since the former\n\twill not cast fixed_size objects anymore.", "tree": {"sha": "9bb7e817fc371c9c9faed3f16d5039828ee1e24f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bb7e817fc371c9c9faed3f16d5039828ee1e24f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74ebd1297e9cfa9f7d05bfcac5510d4968cc6ba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74ebd1297e9cfa9f7d05bfcac5510d4968cc6ba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74ebd1297e9cfa9f7d05bfcac5510d4968cc6ba8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74ebd1297e9cfa9f7d05bfcac5510d4968cc6ba8/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c3474679419707710a899a03151cbe79a91c360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c3474679419707710a899a03151cbe79a91c360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c3474679419707710a899a03151cbe79a91c360"}], "stats": {"total": 102, "additions": 76, "deletions": 26}, "files": [{"sha": "ed2645bebc820e2a16a11ac5745d78ddee3c23ad", "filename": "libstdc++-v3/include/experimental/bits/simd.h", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ebd1297e9cfa9f7d05bfcac5510d4968cc6ba8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ebd1297e9cfa9f7d05bfcac5510d4968cc6ba8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h?ref=74ebd1297e9cfa9f7d05bfcac5510d4968cc6ba8", "patch": "@@ -1602,7 +1602,9 @@ template <typename _To, typename _From>\n   _GLIBCXX_SIMD_INTRINSIC constexpr _To\n   __bit_cast(const _From __x)\n   {\n-    // TODO: implement with / replace by __builtin_bit_cast ASAP\n+#if __has_builtin(__builtin_bit_cast)\n+    return __builtin_bit_cast(_To, __x);\n+#else\n     static_assert(sizeof(_To) == sizeof(_From));\n     constexpr bool __to_is_vectorizable\n       = is_arithmetic_v<_To> || is_enum_v<_To>;\n@@ -1633,6 +1635,7 @@ template <typename _To, typename _From>\n \t\t\t reinterpret_cast<const char*>(&__x), sizeof(_To));\n \treturn __r;\n       }\n+#endif\n   }\n \n // }}}\n@@ -2904,6 +2907,58 @@ template <typename _Tp, typename _Up, typename _Ap,\n     return {__private_init, _RM::abi_type::_MaskImpl::template _S_convert<\n \t\t\t      typename _RM::simd_type::value_type>(__x)};\n   }\n+\n+template <typename _To, typename _Up, typename _Abi>\n+  _GLIBCXX_SIMD_INTRINSIC _GLIBCXX_SIMD_CONSTEXPR\n+  _To\n+  simd_bit_cast(const simd<_Up, _Abi>& __x)\n+  {\n+    using _Tp = typename _To::value_type;\n+    using _ToMember = typename _SimdTraits<_Tp, typename _To::abi_type>::_SimdMember;\n+    using _From = simd<_Up, _Abi>;\n+    using _FromMember = typename _SimdTraits<_Up, _Abi>::_SimdMember;\n+    // with concepts, the following should be constraints\n+    static_assert(sizeof(_To) == sizeof(_From));\n+    static_assert(is_trivially_copyable_v<_Tp> && is_trivially_copyable_v<_Up>);\n+    static_assert(is_trivially_copyable_v<_ToMember> && is_trivially_copyable_v<_FromMember>);\n+#if __has_builtin(__builtin_bit_cast)\n+    return {__private_init, __builtin_bit_cast(_ToMember, __data(__x))};\n+#else\n+    return {__private_init, __bit_cast<_ToMember>(__data(__x))};\n+#endif\n+  }\n+\n+template <typename _To, typename _Up, typename _Abi>\n+  _GLIBCXX_SIMD_INTRINSIC _GLIBCXX_SIMD_CONSTEXPR\n+  _To\n+  simd_bit_cast(const simd_mask<_Up, _Abi>& __x)\n+  {\n+    using _From = simd_mask<_Up, _Abi>;\n+    static_assert(sizeof(_To) == sizeof(_From));\n+    static_assert(is_trivially_copyable_v<_From>);\n+    // _To can be simd<T, A>, specifically simd<T, fixed_size<N>> in which case _To is not trivially\n+    // copyable.\n+    if constexpr (is_simd_v<_To>)\n+      {\n+\tusing _Tp = typename _To::value_type;\n+\tusing _ToMember = typename _SimdTraits<_Tp, typename _To::abi_type>::_SimdMember;\n+\tstatic_assert(is_trivially_copyable_v<_ToMember>);\n+#if __has_builtin(__builtin_bit_cast)\n+\treturn {__private_init, __builtin_bit_cast(_ToMember, __x)};\n+#else\n+\treturn {__private_init, __bit_cast<_ToMember>(__x)};\n+#endif\n+      }\n+    else\n+      {\n+\tstatic_assert(is_trivially_copyable_v<_To>);\n+#if __has_builtin(__builtin_bit_cast)\n+\treturn __builtin_bit_cast(_To, __x);\n+#else\n+\treturn __bit_cast<_To>(__x);\n+#endif\n+      }\n+  }\n } // namespace __proposed\n \n // simd_cast {{{2"}, {"sha": "c81ad7cf08ca669bec893525efc3710a5c464a2a", "filename": "libstdc++-v3/include/experimental/bits/simd_math.h", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ebd1297e9cfa9f7d05bfcac5510d4968cc6ba8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_math.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ebd1297e9cfa9f7d05bfcac5510d4968cc6ba8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_math.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_math.h?ref=74ebd1297e9cfa9f7d05bfcac5510d4968cc6ba8", "patch": "@@ -405,10 +405,11 @@ template <typename _Tp, typename _Abi>\n     using _Vp = simd<_Tp, _Abi>;\n     using _Up = make_unsigned_t<__int_for_sizeof_t<_Tp>>;\n     using namespace std::experimental::__float_bitwise_operators;\n+    using namespace std::experimental::__proposed;\n     const _Vp __exponent_mask\n       = __infinity_v<_Tp>; // 0x7f800000 or 0x7ff0000000000000\n     return static_simd_cast<rebind_simd_t<int, _Vp>>(\n-      __bit_cast<rebind_simd_t<_Up, _Vp>>(__v & __exponent_mask)\n+\t     simd_bit_cast<rebind_simd_t<_Up, _Vp>>(__v & __exponent_mask)\n       >> (__digits_v<_Tp> - 1));\n   }\n \n@@ -697,11 +698,9 @@ template <typename _Tp, typename _Abi>\n \t// (inf and NaN are excluded by -ffinite-math-only)\n \tconst auto __iszero_inf_nan = __x == 0;\n #else\n-\tconst auto __as_int\n-\t  = __bit_cast<rebind_simd_t<__int_for_sizeof_t<_Tp>, _V>>(abs(__x));\n-\tconst auto __inf\n-\t  = __bit_cast<rebind_simd_t<__int_for_sizeof_t<_Tp>, _V>>(\n-\t    _V(__infinity_v<_Tp>));\n+\tusing _Ip = __int_for_sizeof_t<_Tp>;\n+\tconst auto __as_int = simd_bit_cast<rebind_simd_t<_Ip, _V>>(abs(__x));\n+\tconst auto __inf = simd_bit_cast<rebind_simd_t<_Ip, _V>>(_V(__infinity_v<_Tp>));\n \tconst auto __iszero_inf_nan = static_simd_cast<typename _V::mask_type>(\n \t  __as_int == 0 || __as_int >= __inf);\n #endif\n@@ -719,10 +718,10 @@ template <typename _Tp, typename _Abi>\n \twhere(__value_isnormal.__cvt(), __e) = __exponent_bits;\n \tstatic_assert(sizeof(_IV) == sizeof(__value_isnormal));\n \tconst _IV __offset\n-\t  = (__bit_cast<_IV>(__value_isnormal) & _IV(__exp_adjust))\n-\t    | (__bit_cast<_IV>(static_simd_cast<_MaskType>(__exponent_bits == 0)\n-\t\t\t       & static_simd_cast<_MaskType>(__x != 0))\n-\t       & _IV(__exp_adjust + __exp_offset));\n+\t  = (simd_bit_cast<_IV>(__value_isnormal) & _IV(__exp_adjust))\n+\t      | (simd_bit_cast<_IV>(static_simd_cast<_MaskType>(__exponent_bits == 0)\n+\t\t\t\t      & static_simd_cast<_MaskType>(__x != 0))\n+\t\t   & _IV(__exp_adjust + __exp_offset));\n \t*__exp = simd_cast<_Samesize<int, _V>>(__e - __offset);\n \treturn __mant;\n       }\n@@ -786,7 +785,7 @@ template <typename _Tp, typename _Abi>\n \t  using namespace std::experimental::__proposed;\n \t  using _IV = rebind_simd_t<\n \t    conditional_t<sizeof(_Tp) == sizeof(_LLong), _LLong, int>, _V>;\n-\t  return (__bit_cast<_IV>(__v) >> (__digits_v<_Tp> - 1))\n+\t  return (simd_bit_cast<_IV>(__v) >> (__digits_v<_Tp> - 1))\n \t\t - (__max_exponent_v<_Tp> - 1);\n \t};\n \t_V __r = static_simd_cast<_V>(__exponent(abs_x));\n@@ -953,6 +952,7 @@ template <typename _VV>\n \t// Skylake-AVX512 (not even for SSE and AVX vectors, and really bad for\n \t// AVX-512).\n \tusing namespace __float_bitwise_operators;\n+\tusing namespace __proposed;\n \t_V __absx = abs(__x);          // no error\n \t_V __absy = abs(__y);          // no error\n \t_V __hi = max(__absx, __absy); // no error\n@@ -1000,9 +1000,9 @@ template <typename _VV>\n #ifdef __FAST_MATH__\n \t    using _Ip = __int_for_sizeof_t<_Tp>;\n \t    using _IV = rebind_simd_t<_Ip, _V>;\n-\t    const auto __as_int = __bit_cast<_IV>(__hi_exp);\n+\t    const auto __as_int = simd_bit_cast<_IV>(__hi_exp);\n \t    const _V __scale\n-\t      = __bit_cast<_V>(2 * __bit_cast<_Ip>(_Tp(1)) - __as_int);\n+\t      = simd_bit_cast<_V>(2 * simd_bit_cast<_Ip>(_Tp(1)) - __as_int);\n #else\n \t    const _V __scale = (__hi_exp ^ __inf) * _Tp(.5);\n #endif\n@@ -1090,6 +1090,7 @@ _GLIBCXX_SIMD_CVTING2(hypot)\n     else\n       {\n \tusing namespace __float_bitwise_operators;\n+\tusing namespace __proposed;\n \tconst _V __absx = abs(__x);                 // no error\n \tconst _V __absy = abs(__y);                 // no error\n \tconst _V __absz = abs(__z);                 // no error\n@@ -1169,9 +1170,9 @@ _GLIBCXX_SIMD_CVTING2(hypot)\n #ifdef __FAST_MATH__\n \t\tusing _Ip = __int_for_sizeof_t<_Tp>;\n \t\tusing _IV = rebind_simd_t<_Ip, _V>;\n-\t\tconst auto __as_int = __bit_cast<_IV>(__hi_exp);\n+\t\tconst auto __as_int = simd_bit_cast<_IV>(__hi_exp);\n \t\tconst _V __scale\n-\t\t  = __bit_cast<_V>(2 * __bit_cast<_Ip>(_Tp(1)) - __as_int);\n+\t\t  = simd_bit_cast<_V>(2 * simd_bit_cast<_Ip>(_Tp(1)) - __as_int);\n #else\n \t\tconst _V __scale = (__hi_exp ^ __inf) * _Tp(.5);\n #endif\n@@ -1278,12 +1279,6 @@ template <typename _Tp, typename _Abi>\n       return std::copysign(__x[0], __y[0]);\n     else if constexpr (__is_fixed_size_abi_v<_Abi>)\n       return {__private_init, _Abi::_SimdImpl::_S_copysign(__data(__x), __data(__y))};\n-    else if constexpr (is_same_v<_Tp, long double> && sizeof(_Tp) == 12)\n-      // Remove this case once __bit_cast is implemented via __builtin_bit_cast.\n-      // It is necessary, because __signmask below cannot be computed at compile\n-      // time.\n-      return simd<_Tp, _Abi>(\n-\t[&](auto __i) { return std::copysign(__x[__i], __y[__i]); });\n     else\n       {\n \tusing _V = simd<_Tp, _Abi>;"}, {"sha": "67aa870659beed2f45d792140825c0370919ef91", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/bits/test_values.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ebd1297e9cfa9f7d05bfcac5510d4968cc6ba8/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Ftest_values.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ebd1297e9cfa9f7d05bfcac5510d4968cc6ba8/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Ftest_values.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Ftest_values.h?ref=74ebd1297e9cfa9f7d05bfcac5510d4968cc6ba8", "patch": "@@ -221,11 +221,11 @@ template <class V>\n     if constexpr (sizeof(T) <= sizeof(double))\n       {\n \tusing I = rebind_simd_t<__int_for_sizeof_t<T>, V>;\n-\tconst I abs_x = __bit_cast<I>(abs(x));\n-\tconst I min = __bit_cast<I>(V(std::__norm_min_v<T>));\n-\tconst I max = __bit_cast<I>(V(std::__finite_max_v<T>));\n+\tconst I abs_x = simd_bit_cast<I>(abs(x));\n+\tconst I min = simd_bit_cast<I>(V(std::__norm_min_v<T>));\n+\tconst I max = simd_bit_cast<I>(V(std::__finite_max_v<T>));\n \treturn static_simd_cast<typename V::mask_type>(\n-\t\t __bit_cast<I>(x) == 0 || (abs_x >= min && abs_x <= max));\n+\t\t simd_bit_cast<I>(x) == 0 || (abs_x >= min && abs_x <= max));\n       }\n     else\n       {"}]}