{"sha": "f3debef33629f8e8a95b5ed0cb79296e7a0282df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNkZWJlZjMzNjI5ZjhlOGE5NWI1ZWQwY2I3OTI5NmU3YTAyODJkZg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2018-07-31T17:36:36Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2018-07-31T17:36:36Z"}, "message": "targhooks - provide an alternative hook for targets that never execute speculatively\n\nThis hook adds an alternative implementation for the target hook\nTARGET_HAVE_SPECULATION_SAFE_VALUE; it can be used by targets that have no\nCPU implementations that execute code speculatively.  All that is needed for\nsuch targets now is to add:\n\n #undef TARGET_HAVE_SPECULATION_SAFE_VALUE\n #define TARGET_HAVE_SPECULATION_SAFE_VALUE speculation_safe_value_not_needed.\n\nto where you have your other target hooks and you're done.\n\ngcc:\n\t* targhooks.h (speculation_safe_value_not_needed): New prototype.\n\t* targhooks.c (speculation_safe_value_not_needed): New function.\n\t* target.def (have_speculation_safe_value): Update documentation.\n\t* doc/tm.texi: Regenerated.\n\nFrom-SVN: r263175", "tree": {"sha": "f5992c2819cabd23432a44ebf8afd245a075eed1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5992c2819cabd23432a44ebf8afd245a075eed1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3debef33629f8e8a95b5ed0cb79296e7a0282df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3debef33629f8e8a95b5ed0cb79296e7a0282df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3debef33629f8e8a95b5ed0cb79296e7a0282df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3debef33629f8e8a95b5ed0cb79296e7a0282df/comments", "author": null, "committer": null, "parents": [{"sha": "c0111dc43591647ef6d619a1fc222a8e9a06e058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0111dc43591647ef6d619a1fc222a8e9a06e058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0111dc43591647ef6d619a1fc222a8e9a06e058"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "f6328f4d8565425d97c2ee9f838cd13326f4683a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3debef33629f8e8a95b5ed0cb79296e7a0282df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3debef33629f8e8a95b5ed0cb79296e7a0282df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3debef33629f8e8a95b5ed0cb79296e7a0282df", "patch": "@@ -1,3 +1,10 @@\n+2018-07-31  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* targhooks.h (speculation_safe_value_not_needed): New prototype.\n+\t* targhooks.c (speculation_safe_value_not_needed): New function.\n+\t* target.def (have_speculation_safe_value): Update documentation.\n+\t* doc/tm.texi: Regenerated.\n+\n 2018-07-31  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/aarch64/iterators.md (ALLI_TI): New iterator."}, {"sha": "a40f45ade07aa410c5b32e3ce3ee2398e57f1af5", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3debef33629f8e8a95b5ed0cb79296e7a0282df/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3debef33629f8e8a95b5ed0cb79296e7a0282df/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f3debef33629f8e8a95b5ed0cb79296e7a0282df", "patch": "@@ -11935,6 +11935,11 @@ This hook is used to determine the level of target support for\n  a pattern named @code{speculation_barrier}.  Else it returns true\n  for the first case and whether the pattern is enabled for the current\n  compilation for the second case.\n+ \n+ For targets that have no processors that can execute instructions\n+ speculatively an alternative implemenation of this hook is available:\n+ simply redefine this hook to @code{speculation_safe_value_not_needed}\n+ along with your other target hooks.\n @end deftypefn\n \n @deftypefn {Target Hook} rtx TARGET_SPECULATION_SAFE_VALUE (machine_mode @var{mode}, rtx @var{result}, rtx @var{val}, rtx @var{failval})"}, {"sha": "c570f3825a52516d909c2db2b348bb16a8ce6319", "filename": "gcc/target.def", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3debef33629f8e8a95b5ed0cb79296e7a0282df/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3debef33629f8e8a95b5ed0cb79296e7a0282df/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=f3debef33629f8e8a95b5ed0cb79296e7a0282df", "patch": "@@ -4166,7 +4166,12 @@ DEFHOOK\n  The default implementation returns false if the target does not define\\n\\\n  a pattern named @code{speculation_barrier}.  Else it returns true\\n\\\n  for the first case and whether the pattern is enabled for the current\\n\\\n- compilation for the second case.\",\n+ compilation for the second case.\\n\\\n+ \\n\\\n+ For targets that have no processors that can execute instructions\\n\\\n+ speculatively an alternative implemenation of this hook is available:\\n\\\n+ simply redefine this hook to @code{speculation_safe_value_not_needed}\\n\\\n+ along with your other target hooks.\",\n bool, (bool active), default_have_speculation_safe_value)\n \n DEFHOOK"}, {"sha": "62051a98e9843212a924f0298ff21149ce8909f8", "filename": "gcc/targhooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3debef33629f8e8a95b5ed0cb79296e7a0282df/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3debef33629f8e8a95b5ed0cb79296e7a0282df/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=f3debef33629f8e8a95b5ed0cb79296e7a0282df", "patch": "@@ -2324,6 +2324,13 @@ default_have_speculation_safe_value (bool active)\n   return false;\n #endif\n }\n+/* Alternative implementation of TARGET_HAVE_SPECULATION_SAFE_VALUE\n+   that can be used on targets that never have speculative execution.  */\n+bool\n+speculation_safe_value_not_needed (bool active)\n+{\n+  return !active;\n+}\n \n /* Default implementation of the speculation-safe-load builtin.  This\n    implementation simply copies val to result and generates a"}, {"sha": "f92ca5ca997d5f249a7fb13c25ef1d80135ee4e1", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3debef33629f8e8a95b5ed0cb79296e7a0282df/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3debef33629f8e8a95b5ed0cb79296e7a0282df/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=f3debef33629f8e8a95b5ed0cb79296e7a0282df", "patch": "@@ -282,6 +282,7 @@ extern void default_select_early_remat_modes (sbitmap);\n extern tree default_preferred_else_value (unsigned, tree, unsigned, tree *);\n \n extern bool default_have_speculation_safe_value (bool);\n+extern bool speculation_safe_value_not_needed (bool);\n extern rtx default_speculation_safe_value (machine_mode, rtx, rtx, rtx);\n \n #endif /* GCC_TARGHOOKS_H */"}]}