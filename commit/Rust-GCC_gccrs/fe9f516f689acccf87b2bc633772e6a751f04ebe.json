{"sha": "fe9f516f689acccf87b2bc633772e6a751f04ebe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU5ZjUxNmY2ODlhY2NjZjg3YjJiYzYzMzc3MmU2YTc1MWYwNGViZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-10-25T19:42:39Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-10-25T19:42:39Z"}, "message": "i386.c (ix86_eax_live_at_start_p): New.\n\n        * config/i386/i386.c (ix86_eax_live_at_start_p): New.\n        (ix86_expand_prologue): Save and restore eax around stack probe\n        if it's live.\n\nFrom-SVN: r72933", "tree": {"sha": "fc022b078e3cae53f25d1e6ef6fd0ef30febe47f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc022b078e3cae53f25d1e6ef6fd0ef30febe47f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe9f516f689acccf87b2bc633772e6a751f04ebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe9f516f689acccf87b2bc633772e6a751f04ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe9f516f689acccf87b2bc633772e6a751f04ebe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe9f516f689acccf87b2bc633772e6a751f04ebe/comments", "author": null, "committer": null, "parents": [{"sha": "e54918abd45570e271dc3644c71648c03a74d8b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e54918abd45570e271dc3644c71648c03a74d8b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e54918abd45570e271dc3644c71648c03a74d8b9"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "3b4cd09de30ec63f383833fe8565312eb18ee37d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9f516f689acccf87b2bc633772e6a751f04ebe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9f516f689acccf87b2bc633772e6a751f04ebe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe9f516f689acccf87b2bc633772e6a751f04ebe", "patch": "@@ -1,3 +1,9 @@\n+2003-10-25  Richard Henderson  <rth@redhat.com>\n+\n+        * config/i386/i386.c (ix86_eax_live_at_start_p): New.\n+        (ix86_expand_prologue): Save and restore eax around stack probe\n+        if it's live.\n+\n 2003-10-25  Jan Hubicka  <jh@suse.cz>\n \n \t* cppcharset.c (one_utf8_to_utf32): Initialize 's' to silence warning."}, {"sha": "8fdf24dad463a3394100450927d5ea419d8593cb", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9f516f689acccf87b2bc633772e6a751f04ebe/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9f516f689acccf87b2bc633772e6a751f04ebe/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fe9f516f689acccf87b2bc633772e6a751f04ebe", "patch": "@@ -1705,6 +1705,22 @@ ix86_function_regparm (tree type, tree decl)\n   return regparm;\n }\n \n+/* Return true if EAX is live at the start of the function.  Used by \n+   ix86_expand_prologue to determine if we need special help before\n+   calling allocate_stack_worker.  */\n+\n+static bool\n+ix86_eax_live_at_start_p (void)\n+{\n+  /* Cheat.  Don't bother working forward from ix86_function_regparm\n+     to the function type to whether an actual argument is located in\n+     eax.  Instead just look at cfg info, which is still close enough\n+     to correct at this point.  This gives false positives for broken\n+     functions that might use uninitialized data that happens to be\n+     allocated in eax, but who cares?  */\n+  return REGNO_REG_SET_P (ENTRY_BLOCK_PTR->global_live_at_end, 0);\n+}\n+\n /* Value is the number of bytes of arguments automatically\n    popped when returning from a subroutine call.\n    FUNDECL is the declaration node of the function (as a tree),\n@@ -5098,20 +5114,32 @@ ix86_expand_prologue (void)\n     }\n   else\n     {\n-      /* Only valid for Win32 */\n-\n-      const rtx eax = gen_rtx_REG (SImode, 0);\n-      rtx rtx_allocate = GEN_INT(allocate);\n+      /* Only valid for Win32.  */\n+      rtx eax = gen_rtx_REG (SImode, 0);\n+      bool eax_live = ix86_eax_live_at_start_p ();\n \n       if (TARGET_64BIT)\n         abort ();\n \n-      insn = emit_move_insn (eax, rtx_allocate);\n+      if (eax_live)\n+\t{\n+\t  emit_insn (gen_push (eax));\n+\t  allocate -= 4;\n+\t}\n+\n+      insn = emit_move_insn (eax, GEN_INT (allocate));\n       RTX_FRAME_RELATED_P (insn) = 1;\n \n       insn = emit_insn (gen_allocate_stack_worker (eax));\n       RTX_FRAME_RELATED_P (insn) = 1;\n+\n+      if (eax_live)\n+\t{\n+\t  rtx t = plus_constant (stack_pointer_rtx, allocate);\n+\t  emit_move_insn (eax, gen_rtx_MEM (SImode, t));\n+\t}\n     }\n+\n   if (frame.save_regs_using_mov && !TARGET_RED_ZONE)\n     {\n       if (!frame_pointer_needed || !frame.to_allocate)"}]}