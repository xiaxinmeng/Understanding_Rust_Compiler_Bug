{"sha": "70f42967b3b48d63a8e90bd19b4277a64d6ccd21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBmNDI5NjdiM2I0OGQ2M2E4ZTkwYmQxOWI0Mjc3YTY0ZDZjY2QyMQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-06-19T20:44:47Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-06-19T20:44:47Z"}, "message": "tm.texi.in (TARGET_OBJC_DECLARE_UNRESOLVED_CLASS_REFERENCE, [...]): Add @hooks.\n\ngcc/\n\t* doc/tm.texi.in (TARGET_OBJC_DECLARE_UNRESOLVED_CLASS_REFERENCE,\n\tTARGET_OBJC_DECLARE_CLASS_DEFINITION): Add @hooks.\n\t(ASM_DECLARE_CLASS_REFERENCE, ASM_DECLARE_UNRESOLVED_REFERENCE):\n\tRemove.\n\t* doc/tm.texi: Regenerate.\n\t* config/darwin.h (ASM_OUTPUT_LABELREF): Remove special case for\n\t.objc_class_name_*.\n\t* config/darwin-c.c: Include target.h.\n\t(darwin_objc_declare_unresolved_class_reference): New function.\n\t(darwin_objc_declare_class_definition): New function.\n\t(TARGET_OBJC_DECLARE_UNRESOLVED_CLASS_REFERENCE): Define.\n\t(TARGET_OBJC_DECLARE_CLASS_DEFINITION): Define.\n\nc-family/\n\t* c-target.def (objc_declare_unresolved_class_reference,\n\tobjc_declare_class_definition): Add new hooks.\n\nobjc/\n\t* objc-next-runtime-abi-01.c: Do not include tm.h and output.h.\n\tInclude c-family/c-target.h.\n\t(handle_next_class_ref): Rewrite to emit top-level asm statements.\n\t(handle_next_impent): Likewise.\n\t* objc/Make-lang.in: Fix dependencies for objc-next-runtime-abi-01.o.\n\nFrom-SVN: r188793", "tree": {"sha": "43b24c99ade8c59d05ac05d4aecbdd6ff2c2f406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43b24c99ade8c59d05ac05d4aecbdd6ff2c2f406"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70f42967b3b48d63a8e90bd19b4277a64d6ccd21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f42967b3b48d63a8e90bd19b4277a64d6ccd21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70f42967b3b48d63a8e90bd19b4277a64d6ccd21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/comments", "author": null, "committer": null, "parents": [{"sha": "c85fd25b17ae5b2150c71826b04ffb71045d1b28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c85fd25b17ae5b2150c71826b04ffb71045d1b28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c85fd25b17ae5b2150c71826b04ffb71045d1b28"}], "stats": {"total": 240, "additions": 145, "deletions": 95}, "files": [{"sha": "6a9e3c931a85b1be965ef264050707bd880bcb00", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70f42967b3b48d63a8e90bd19b4277a64d6ccd21", "patch": "@@ -1,3 +1,18 @@\n+2012-06-19  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* doc/tm.texi.in (TARGET_OBJC_DECLARE_UNRESOLVED_CLASS_REFERENCE,\n+\tTARGET_OBJC_DECLARE_CLASS_DEFINITION): Add @hooks.\n+\t(ASM_DECLARE_CLASS_REFERENCE, ASM_DECLARE_UNRESOLVED_REFERENCE):\n+\tRemove.\n+\t* doc/tm.texi: Regenerate.\n+\t* config/darwin.h (ASM_OUTPUT_LABELREF): Remove special case for\n+\t.objc_class_name_*.\n+\t* config/darwin-c.c: Include target.h.\n+\t(darwin_objc_declare_unresolved_class_reference): New function.\n+\t(darwin_objc_declare_class_definition): New function.\n+\t(TARGET_OBJC_DECLARE_UNRESOLVED_CLASS_REFERENCE): Define.\n+\t(TARGET_OBJC_DECLARE_CLASS_DEFINITION): Define.\n+\n 2012-06-19  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* target.def (output_ident): New hook."}, {"sha": "14021ebaa2a1b9fd8dc82c33cf3b74c46470f4ce", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=70f42967b3b48d63a8e90bd19b4277a64d6ccd21", "patch": "@@ -1,3 +1,8 @@\n+2012-06-19  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* c-target.def (objc_declare_unresolved_class_reference,\n+\tobjc_declare_class_definition): Add new hooks.\n+\n 2012-06-19  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* c-lex.c: Do not include output.h."}, {"sha": "c5ebdf14ac4445d26b7bca5220ea6415e3c09d10", "filename": "gcc/c-family/c-target.def", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fc-family%2Fc-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fc-family%2Fc-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-target.def?ref=70f42967b3b48d63a8e90bd19b4277a64d6ccd21", "patch": "@@ -59,7 +59,21 @@ DEFHOOK\n  common-format string object when the target provides one.\",\n  tree, (tree string),\n  NULL)\n- \n+\n+DEFHOOK\n+(objc_declare_unresolved_class_reference,\n+ \"Declare that Objective C class @var{classname} is referenced\\\n+  by the current TU.\",\n+ void, (const char *classname),\n+ NULL)\n+\n+DEFHOOK\n+(objc_declare_class_definition,\n+ \"Declare that Objective C class @var{classname} is defined\\\n+  by the current TU.\",\n+ void, (const char *classname),\n+ NULL)\n+\n DEFHOOK\n (string_object_ref_type_p,\n  \"If a target implements string objects then this hook should return\\"}, {"sha": "a642f66c40dc0ec876e4fb9b2d949cdf06e75756", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 52, "deletions": 3, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=70f42967b3b48d63a8e90bd19b4277a64d6ccd21", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"cpplib.h\"\n #include \"tree.h\"\n+#include \"target.h\"\n #include \"incpath.h\"\n #include \"c-family/c-common.h\"\n #include \"c-family/c-pragma.h\"\n@@ -36,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"prefix.h\"\n #include \"c-family/c-target.h\"\n #include \"c-family/c-target-def.h\"\n+#include \"cgraph.h\"\n \n /* Pragmas.  */\n \n@@ -711,13 +713,60 @@ EXPORTED_CONST format_kind_info darwin_additional_format_types[] = {\n   }\n };\n \n-#undef TARGET_HANDLE_C_OPTION\n+\n+/* Support routines to dump the class references for NeXT ABI v1, aka\n+   32-bits ObjC-2.0, as top-level asms.\n+   The following two functions should only be called from\n+   objc/objc-next-runtime-abi-01.c.  */\n+\n+static void\n+darwin_objc_declare_unresolved_class_reference (const char *name)\n+{\n+  const char *lazy_reference = \".lazy_reference\\t\";\n+  const char *hard_reference = \".reference\\t\";\n+  const char *reference = MACHOPIC_INDIRECT ? lazy_reference : hard_reference;\n+  size_t len = strlen (reference) + strlen(name) + 2;\n+  char *buf = (char *) alloca (len);\n+\n+  gcc_checking_assert (!strncmp (name, \".objc_class_name_\", 17));\n+\n+  snprintf (buf, len, \"%s%s\", reference, name);\n+  add_asm_node (build_string (strlen (buf), buf));\n+}\n+\n+static void\n+darwin_objc_declare_class_definition (const char *name)\n+{\n+  const char *xname = targetm.strip_name_encoding (name);\n+  size_t len = strlen (xname) + 7 + 5;\n+  char *buf = (char *) alloca (len);\n+\n+  gcc_checking_assert (!strncmp (name, \".objc_class_name_\", 17)\n+\t\t       || !strncmp (name, \"*.objc_category_name_\", 21));\n+\n+  /* Mimic default_globalize_label.  */\n+  snprintf (buf, len, \".globl\\t%s\", xname);\n+  add_asm_node (build_string (strlen (buf), buf));\n+\n+  snprintf (buf, len, \"%s = 0\", xname);\n+  add_asm_node (build_string (strlen (buf), buf));\n+}\n+\n+#undef  TARGET_HANDLE_C_OPTION\n #define TARGET_HANDLE_C_OPTION handle_c_option\n \n-#undef TARGET_OBJC_CONSTRUCT_STRING_OBJECT\n+#undef  TARGET_OBJC_CONSTRUCT_STRING_OBJECT\n #define TARGET_OBJC_CONSTRUCT_STRING_OBJECT darwin_objc_construct_string\n \n-#undef TARGET_STRING_OBJECT_REF_TYPE_P\n+#undef  TARGET_OBJC_DECLARE_UNRESOLVED_CLASS_REFERENCE\n+#define TARGET_OBJC_DECLARE_UNRESOLVED_CLASS_REFERENCE \\\n+\tdarwin_objc_declare_unresolved_class_reference\n+\n+#undef  TARGET_OBJC_DECLARE_CLASS_DEFINITION\n+#define TARGET_OBJC_DECLARE_CLASS_DEFINITION \\\n+\tdarwin_objc_declare_class_definition\n+\n+#undef  TARGET_STRING_OBJECT_REF_TYPE_P\n #define TARGET_STRING_OBJECT_REF_TYPE_P darwin_cfstring_ref_p\n \n #undef TARGET_CHECK_STRING_OBJECT_FORMAT_ARG"}, {"sha": "6bc7f73f679232ae0acb549c8f088881cdb07588", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=70f42967b3b48d63a8e90bd19b4277a64d6ccd21", "patch": "@@ -616,8 +616,6 @@ int darwin_label_is_anonymous_local_objc_name (const char *name);\n          fprintf (FILE, \"\\\"%s\\\"\", xname);\t\t\t\t     \\\n        else if (darwin_label_is_anonymous_local_objc_name (xname))\t     \\\n          fprintf (FILE, \"L%s\", xname);\t\t\t\t\t     \\\n-       else if (!strncmp (xname, \".objc_class_name_\", 17))\t\t     \\\n-\t fprintf (FILE, \"%s\", xname);\t\t\t\t\t     \\\n        else if (xname[0] != '\"' && name_needs_quotes (xname))\t\t     \\\n \t asm_fprintf (FILE, \"\\\"%U%s\\\"\", xname);\t\t\t\t     \\\n        else\t\t\t\t\t\t\t\t     \\\n@@ -700,29 +698,6 @@ extern GTY(()) section * darwin_sections[NUM_DARWIN_SECTIONS];\n #undef  TARGET_ASM_RELOC_RW_MASK\n #define TARGET_ASM_RELOC_RW_MASK machopic_reloc_rw_mask\n \n-\n-#define ASM_DECLARE_UNRESOLVED_REFERENCE(FILE,NAME)\t\t\t\\\n-    do {\t\t\t\t\t\t\t\t\\\n-\t if (FILE) {\t\t\t\t\t\t\t\\\n-\t   if (MACHOPIC_INDIRECT)\t\t\t\t\t\\\n-\t     fprintf (FILE, \"\\t.lazy_reference \");\t\t\t\\\n-\t   else\t\t\t\t\t\t\t\t\\\n-\t     fprintf (FILE, \"\\t.reference \");\t\t\t\t\\\n-\t   assemble_name (FILE, NAME);\t\t\t\t\t\\\n-\t   fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n-\t }                                                              \\\n-       } while (0)\n-\n-#define ASM_DECLARE_CLASS_REFERENCE(FILE,NAME)\t\t\t\t\\\n-    do {\t\t\t\t\t\t\t\t\\\n-\t if (FILE) {\t\t\t\t\t\t\t\\\n-\t   fprintf (FILE, \"\\t\");\t\t\t\t\t\\\n-\t   assemble_name (FILE, NAME);\t\t\t\t\t\\\n-\t   fprintf (FILE, \"=0\\n\");\t\t\t\t\t\\\n-\t   (*targetm.asm_out.globalize_label) (FILE, NAME);\t\t\\\n-\t }\t\t\t\t\t\t\t\t\\\n-       } while (0)\n-\n /* Globalizing directive for a label.  */\n #define GLOBAL_ASM_OP \"\\t.globl \"\n #define TARGET_ASM_GLOBALIZE_LABEL darwin_globalize_label"}, {"sha": "15c0aee601073b0a2b6f0d9f1de43bc19ee47d9b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=70f42967b3b48d63a8e90bd19b4277a64d6ccd21", "patch": "@@ -694,6 +694,14 @@ should use @code{TARGET_HANDLE_C_OPTION} instead.\n Targets may provide a string object type that can be used within and between C, C++ and their respective Objective-C dialects. A string object might, for example, embed encoding and length information. These objects are considered opaque to the compiler and handled as references. An ideal implementation makes the composition of the string object match that of the Objective-C @code{NSString} (@code{NXString} for GNUStep), allowing efficient interworking between C-only and Objective-C code. If a target implements string objects then this hook should return a reference to such an object constructed from the normal `C' string representation provided in @var{string}. At present, the hook is used by Objective-C only, to obtain a common-format string object when the target provides one.\n @end deftypefn\n \n+@deftypefn {C Target Hook} void TARGET_OBJC_DECLARE_UNRESOLVED_CLASS_REFERENCE (const char *@var{classname})\n+Declare that Objective C class @var{classname} is referenced  by the current TU.\n+@end deftypefn\n+\n+@deftypefn {C Target Hook} void TARGET_OBJC_DECLARE_CLASS_DEFINITION (const char *@var{classname})\n+Declare that Objective C class @var{classname} is defined  by the current TU.\n+@end deftypefn\n+\n @deftypefn {C Target Hook} bool TARGET_STRING_OBJECT_REF_TYPE_P (const_tree @var{stringref})\n If a target implements string objects then this hook should return @code{true} if @var{stringref} is a valid reference to such an object.\n @end deftypefn\n@@ -8256,20 +8264,6 @@ On systems where the assembler can handle quoted names, you can use this\n macro to provide more human-readable names.\n @end defmac\n \n-@defmac ASM_DECLARE_CLASS_REFERENCE (@var{stream}, @var{name})\n-A C statement (sans semicolon) to output to the stdio stream\n-@var{stream} commands to declare that the label @var{name} is an\n-Objective-C class reference.  This is only needed for targets whose\n-linkers have special support for NeXT-style runtimes.\n-@end defmac\n-\n-@defmac ASM_DECLARE_UNRESOLVED_REFERENCE (@var{stream}, @var{name})\n-A C statement (sans semicolon) to output to the stdio stream\n-@var{stream} commands to declare that the label @var{name} is an\n-unresolved Objective-C class reference.  This is only needed for targets\n-whose linkers have special support for NeXT-style runtimes.\n-@end defmac\n-\n @node Initialization\n @subsection How Initialization Functions Are Handled\n @cindex initialization routines"}, {"sha": "3bf211c3117e4e6b09fdc3d3835dae3021f150f4", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=70f42967b3b48d63a8e90bd19b4277a64d6ccd21", "patch": "@@ -690,6 +690,10 @@ should use @code{TARGET_HANDLE_C_OPTION} instead.\n \n @hook TARGET_OBJC_CONSTRUCT_STRING_OBJECT\n \n+@hook TARGET_OBJC_DECLARE_UNRESOLVED_CLASS_REFERENCE\n+\n+@hook TARGET_OBJC_DECLARE_CLASS_DEFINITION\n+\n @hook TARGET_STRING_OBJECT_REF_TYPE_P\n \n @hook TARGET_CHECK_STRING_OBJECT_FORMAT_ARG\n@@ -8159,20 +8163,6 @@ On systems where the assembler can handle quoted names, you can use this\n macro to provide more human-readable names.\n @end defmac\n \n-@defmac ASM_DECLARE_CLASS_REFERENCE (@var{stream}, @var{name})\n-A C statement (sans semicolon) to output to the stdio stream\n-@var{stream} commands to declare that the label @var{name} is an\n-Objective-C class reference.  This is only needed for targets whose\n-linkers have special support for NeXT-style runtimes.\n-@end defmac\n-\n-@defmac ASM_DECLARE_UNRESOLVED_REFERENCE (@var{stream}, @var{name})\n-A C statement (sans semicolon) to output to the stdio stream\n-@var{stream} commands to declare that the label @var{name} is an\n-unresolved Objective-C class reference.  This is only needed for targets\n-whose linkers have special support for NeXT-style runtimes.\n-@end defmac\n-\n @node Initialization\n @subsection How Initialization Functions Are Handled\n @cindex initialization routines"}, {"sha": "5ca44c36dfdaf5306159773cc8b66bfef73a1b21", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=70f42967b3b48d63a8e90bd19b4277a64d6ccd21", "patch": "@@ -1,3 +1,11 @@\n+2012-06-19  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* objc-next-runtime-abi-01.c: Do not include tm.h and output.h.\n+\tInclude c-family/c-target.h.\n+\t(handle_next_class_ref): Rewrite to emit top-level asm statements.\n+\t(handle_next_impent): Likewise.\n+\t* objc/Make-lang.in: Fix dependencies for objc-next-runtime-abi-01.o.\n+\n 2012-05-31  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* objc-act.c: Do not include output.h."}, {"sha": "94a462b00aada85e3094e090c9d900136b651592", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=70f42967b3b48d63a8e90bd19b4277a64d6ccd21", "patch": "@@ -106,7 +106,7 @@ objc/objc-next-runtime-abi-01.o: objc/objc-next-runtime-abi-01.c \\\n    gt-objc-objc-next-runtime-abi-01.h \\\n    $(START_HDRS) \\\n    $(GGC_H) $(DIAGNOSTIC_CORE_H) $(FLAGS_H) input.h \\\n-   $(TARGET_H) output.h \\\n+   $(TARGET_H) \\\n    objc/objc-encoding.h \\\n    objc/objc-next-metadata-tags.h \\\n    objc/objc-runtime-hooks.h \\"}, {"sha": "b60bd468000ca2c0734157d4097c6f350601050e", "filename": "gcc/objc/objc-next-runtime-abi-01.c", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f42967b3b48d63a8e90bd19b4277a64d6ccd21/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c?ref=70f42967b3b48d63a8e90bd19b4277a64d6ccd21", "patch": "@@ -26,7 +26,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"tree.h\"\n \n #ifdef OBJCPLUS\n@@ -49,7 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"ggc.h\"\n #include \"target.h\"\n-#include \"output.h\" /* for asm_out_file */\n+#include \"c-family/c-target.h\"\n #include \"tree-iterator.h\"\n \n #include \"objc-runtime-hooks.h\"\n@@ -2267,47 +2266,50 @@ generate_objc_symtab_decl (void)\n \t\t   init_objc_symtab (TREE_TYPE (UOBJC_SYMBOLS_decl)));\n }\n \n+/* Any target implementing NeXT ObjC m32 ABI has to ensure that objects\n+   refer to, and define, symbols that enforce linkage of classes into the\n+   executable image, preserving unix archive semantics.\n+\n+   At present (4.8), the only targets implementing this are Darwin; these\n+   use top level asms to implement a scheme (see config/darwin-c.c).  The\n+   latter method is a hack, but compatible with LTO see also PR48109 for\n+   further discussion and other possible methods.  */\n \n static void\n-handle_next_class_ref (tree chain)\n+handle_next_class_ref (tree chain ATTRIBUTE_UNUSED)\n {\n-  const char *name = IDENTIFIER_POINTER (TREE_VALUE (chain));\n-  char *string = (char *) alloca (strlen (name) + 30);\n-\n-  sprintf (string, \".objc_class_name_%s\", name);\n-\n-#ifdef ASM_DECLARE_UNRESOLVED_REFERENCE\n-  ASM_DECLARE_UNRESOLVED_REFERENCE (asm_out_file, string);\n-#else\n-  return ; /* NULL build for targets other than Darwin.  */\n-#endif\n+  if (targetcm.objc_declare_unresolved_class_reference)\n+    {\n+      const char *name = IDENTIFIER_POINTER (TREE_VALUE (chain));\n+      char *string = (char *) alloca (strlen (name) + 30);\n+      sprintf (string, \".objc_class_name_%s\", name);\n+      targetcm.objc_declare_unresolved_class_reference (string);\n+    }\n }\n \n static void\n-handle_next_impent (struct imp_entry *impent)\n+handle_next_impent (struct imp_entry *impent ATTRIBUTE_UNUSED)\n {\n-  char buf[BUFSIZE];\n-\n-  switch (TREE_CODE (impent->imp_context))\n+  if (targetcm.objc_declare_class_definition)\n     {\n-    case CLASS_IMPLEMENTATION_TYPE:\n-      snprintf (buf, BUFSIZE, \".objc_class_name_%s\",\n-\t\tIDENTIFIER_POINTER (CLASS_NAME (impent->imp_context)));\n-      break;\n-    case CATEGORY_IMPLEMENTATION_TYPE:\n-      snprintf (buf, BUFSIZE, \"*.objc_category_name_%s_%s\",\n-\t\tIDENTIFIER_POINTER (CLASS_NAME (impent->imp_context)),\n-\t\tIDENTIFIER_POINTER (CLASS_SUPER_NAME (impent->imp_context)));\n-      break;\n-    default:\n-      return;\n-    }\n+      char buf[BUFSIZE];\n \n-#ifdef ASM_DECLARE_CLASS_REFERENCE\n-  ASM_DECLARE_CLASS_REFERENCE (asm_out_file, buf);\n-#else\n-  return ; /* NULL build for targets other than Darwin.  */\n-#endif\n+      switch (TREE_CODE (impent->imp_context))\n+\t{\n+\t  case CLASS_IMPLEMENTATION_TYPE:\n+\t    snprintf (buf, BUFSIZE, \".objc_class_name_%s\",\n+\t\t      IDENTIFIER_POINTER (CLASS_NAME (impent->imp_context)));\n+\t    break;\n+\t  case CATEGORY_IMPLEMENTATION_TYPE:\n+\t    snprintf (buf, BUFSIZE, \"*.objc_category_name_%s_%s\",\n+\t\t      IDENTIFIER_POINTER (CLASS_NAME (impent->imp_context)),\n+\t\t      IDENTIFIER_POINTER (CLASS_SUPER_NAME (impent->imp_context)));\n+\t    break;\n+\t  default:\n+\t    return;\n+\t}\n+      targetcm.objc_declare_class_definition (buf);\n+    }\n }\n \n static void\n@@ -2414,9 +2416,7 @@ objc_generate_v1_next_metadata (void)\n \n   /* Dump the class references.  This forces the appropriate classes\n      to be linked into the executable image, preserving unix archive\n-     semantics.  This can be removed when we move to a more dynamically\n-     linked environment.  */\n-\n+     semantics.  */\n   for (chain = cls_ref_chain; chain; chain = TREE_CHAIN (chain))\n     {\n       handle_next_class_ref (chain);"}]}