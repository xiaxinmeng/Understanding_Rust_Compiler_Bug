{"sha": "d23f3d60929d0df378cc61593933db9d85add5a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIzZjNkNjA5MjlkMGRmMzc4Y2M2MTU5MzkzM2RiOWQ4NWFkZDVhNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-07-19T22:49:20Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-07-19T22:49:20Z"}, "message": "re PR c++/28338 (ICE/rejects-valid with references)\n\n\tPR c++/28338\n\t* decl.c (layout_var_decl): Don't call push_local_name here.\n\t(initialize_artificial_var): Assert artificiality.\n\t(cp_finish_decl): Call push_local_name here.\n\tPR c++/28338\n\t* g++.dg/init/ref13.C: New test.\n\nFrom-SVN: r115600", "tree": {"sha": "8d9d28ecf559ae39bd12c309d61d6dcf79d51d85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d9d28ecf559ae39bd12c309d61d6dcf79d51d85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d23f3d60929d0df378cc61593933db9d85add5a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d23f3d60929d0df378cc61593933db9d85add5a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d23f3d60929d0df378cc61593933db9d85add5a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d23f3d60929d0df378cc61593933db9d85add5a5/comments", "author": null, "committer": null, "parents": [{"sha": "7eb314dc4ba66b79de1a170c127cd0eee10f8fb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb314dc4ba66b79de1a170c127cd0eee10f8fb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eb314dc4ba66b79de1a170c127cd0eee10f8fb5"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "da9ab491c73e39cc12ef92b04c9a1a5f41eab523", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23f3d60929d0df378cc61593933db9d85add5a5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23f3d60929d0df378cc61593933db9d85add5a5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d23f3d60929d0df378cc61593933db9d85add5a5", "patch": "@@ -1,3 +1,10 @@\n+2006-07-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/28338\n+\t* decl.c (layout_var_decl): Don't call push_local_name here.\n+\t(initialize_artificial_var): Assert artificiality.\n+\t(cp_finish_decl): Call push_local_name here.\n+\n 2006-07-18  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28337"}, {"sha": "124e0448c638264c833284f02c62febd0c11792c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23f3d60929d0df378cc61593933db9d85add5a5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23f3d60929d0df378cc61593933db9d85add5a5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d23f3d60929d0df378cc61593933db9d85add5a5", "patch": "@@ -4190,12 +4190,6 @@ layout_var_decl (tree decl)\n {\n   tree type;\n \n-  if (TREE_STATIC (decl)\n-      && !DECL_ARTIFICIAL (decl)\n-      && current_function_decl\n-      && DECL_CONTEXT (decl) == current_function_decl)\n-    push_local_name (decl);\n-\n   type = TREE_TYPE (decl);\n   if (type == error_mark_node)\n     return;\n@@ -5003,6 +4997,7 @@ initialize_local_var (tree decl, tree init)\n void\n initialize_artificial_var (tree decl, tree init)\n {\n+  gcc_assert (DECL_ARTIFICIAL (decl));\n   if (TREE_CODE (init) == TREE_LIST)\n     init = build_constructor_from_list (NULL_TREE, init);\n   gcc_assert (TREE_CODE (init) == CONSTRUCTOR);\n@@ -5144,6 +5139,17 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       if (DECL_THREAD_LOCAL_P (decl) && !pod_type_p (TREE_TYPE (decl)))\n \terror (\"%qD cannot be thread-local because it has non-POD type %qT\",\n \t       decl, TREE_TYPE (decl));\n+      /* If this is a local variable that will need a mangled name,\n+\t register it now.  We must do this before processing the\n+\t initializer for the variable, since the initialization might\n+\t require a guard variable, and since the mangled name of the\n+\t guard variable will depend on the mangled name of this\n+\t variable.  */\n+      if (!processing_template_decl\n+\t  && DECL_FUNCTION_SCOPE_P (decl)\n+\t  && TREE_STATIC (decl)\n+\t  && !DECL_ARTIFICIAL (decl))\n+\tpush_local_name (decl);\n       /* Convert the initializer to the type of DECL, if we have not\n \t already initialized DECL.  */\n       if (!DECL_INITIALIZED_P (decl)"}, {"sha": "f6ca4c799aed73f85b1f5586d6ca6bed3ec8b75d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23f3d60929d0df378cc61593933db9d85add5a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23f3d60929d0df378cc61593933db9d85add5a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d23f3d60929d0df378cc61593933db9d85add5a5", "patch": "@@ -1,3 +1,8 @@\n+2006-07-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/28338\n+\t* g++.dg/init/ref13.C: New test.\n+\n 2006-07-19  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR obj-c++/28434"}, {"sha": "6be57aa2eca8f4a33362d973dc8ea122eb129091", "filename": "gcc/testsuite/g++.dg/init/ref13.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23f3d60929d0df378cc61593933db9d85add5a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23f3d60929d0df378cc61593933db9d85add5a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref13.C?ref=d23f3d60929d0df378cc61593933db9d85add5a5", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/28338\n+\n+void foo()\n+{\n+  { static const int& i = 0; }\n+  { static const int& i = 0; }\n+}"}]}