{"sha": "af222e7486b241fa6e345712eb9abb73f2ed0e27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYyMjJlNzQ4NmIyNDFmYTZlMzQ1NzEyZWI5YWJiNzNmMmVkMGUyNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-05-14T22:16:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-05-14T22:16:35Z"}, "message": "tuple (__add_c_ref, [...]): Remove.\n\n\t* include/std/tuple (__add_c_ref, __add_ref, __add_r_ref): Remove.\n\t(__tuple_element_t): Define.\n\t(tuple_element): Use __tuple_element_t.\n\t(__cv_tuple_size): Define.\n\t(tuple_size<cv _Tp>): Use __cv_tuple_size.\n\t(get, __get_helper, __get_helper2): Remove uses of __add_ref etc.\n\t(get<_Tp>(tuple<_Types...>&&)): Use forward instead of move.\n\t(__tuple_compare): Remove size check, re-order parameters.\n\t(operator==, operator<): Use static_assert to check requirements.\n\t* include/std/functional (__volget): use __tuple_element_t.\n\t* testsuite/20_util/tuple/element_access/get_by_type.cc: Test rvalues.\n\t* testsuite/20_util/uses_allocator/cons_neg.cc: Adjust dg-error.\n\nFrom-SVN: r210447", "tree": {"sha": "758393268d4d70cf65038d5e28bad933fa5b201b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/758393268d4d70cf65038d5e28bad933fa5b201b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af222e7486b241fa6e345712eb9abb73f2ed0e27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af222e7486b241fa6e345712eb9abb73f2ed0e27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af222e7486b241fa6e345712eb9abb73f2ed0e27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af222e7486b241fa6e345712eb9abb73f2ed0e27/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88fe5e91e476d1602f8b19ba0b35820324da8b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88fe5e91e476d1602f8b19ba0b35820324da8b81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88fe5e91e476d1602f8b19ba0b35820324da8b81"}], "stats": {"total": 190, "additions": 87, "deletions": 103}, "files": [{"sha": "d6f2c2354948fef0255e61b91b615360a5c2cce1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af222e7486b241fa6e345712eb9abb73f2ed0e27/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af222e7486b241fa6e345712eb9abb73f2ed0e27/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=af222e7486b241fa6e345712eb9abb73f2ed0e27", "patch": "@@ -1,3 +1,18 @@\n+2014-05-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/tuple (__add_c_ref, __add_ref, __add_r_ref): Remove.\n+\t(__tuple_element_t): Define.\n+\t(tuple_element): Use __tuple_element_t.\n+\t(__cv_tuple_size): Define.\n+\t(tuple_size<cv _Tp>): Use __cv_tuple_size.\n+\t(get, __get_helper, __get_helper2): Remove uses of __add_ref etc.\n+\t(get<_Tp>(tuple<_Types...>&&)): Use forward instead of move.\n+\t(__tuple_compare): Remove size check, re-order parameters.\n+\t(operator==, operator<): Use static_assert to check requirements.\n+\t* include/std/functional (__volget): use __tuple_element_t.\n+\t* testsuite/20_util/tuple/element_access/get_by_type.cc: Test rvalues.\n+\t* testsuite/20_util/uses_allocator/cons_neg.cc: Adjust dg-error.\n+\n 2014-05-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/60497"}, {"sha": "e677c248d27c551f127b6273a04ec49820c0bbf1", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af222e7486b241fa6e345712eb9abb73f2ed0e27/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af222e7486b241fa6e345712eb9abb73f2ed0e27/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=af222e7486b241fa6e345712eb9abb73f2ed0e27", "patch": "@@ -1230,14 +1230,14 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n   template<std::size_t _Ind, typename... _Tp>\n     inline auto\n     __volget(volatile tuple<_Tp...>& __tuple)\n-    -> typename tuple_element<_Ind, tuple<_Tp...>>::type volatile&\n+    -> __tuple_element_t<_Ind, tuple<_Tp...>> volatile&\n     { return std::get<_Ind>(const_cast<tuple<_Tp...>&>(__tuple)); }\n \n   // std::get<I> for const-volatile-qualified tuples\n   template<std::size_t _Ind, typename... _Tp>\n     inline auto\n     __volget(const volatile tuple<_Tp...>& __tuple)\n-    -> typename tuple_element<_Ind, tuple<_Tp...>>::type const volatile&\n+    -> __tuple_element_t<_Ind, tuple<_Tp...>> const volatile&\n     { return std::get<_Ind>(const_cast<const tuple<_Tp...>&>(__tuple)); }\n \n   /// Type of the function object returned from bind()."}, {"sha": "95c197d50655fe1d68541efd8f3e759698e51617", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 65, "deletions": 100, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af222e7486b241fa6e345712eb9abb73f2ed0e27/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af222e7486b241fa6e345712eb9abb73f2ed0e27/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=af222e7486b241fa6e345712eb9abb73f2ed0e27", "patch": "@@ -48,33 +48,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @{\n    */\n \n-  // Adds a const reference to a non-reference type.\n-  template<typename _Tp>\n-    struct __add_c_ref\n-    { typedef const _Tp& type; };\n-\n-  template<typename _Tp>\n-    struct __add_c_ref<_Tp&>\n-    { typedef _Tp& type; };\n-\n-  // Adds a reference to a non-reference type.\n-  template<typename _Tp>\n-    struct __add_ref\n-    { typedef _Tp& type; };\n-\n-  template<typename _Tp>\n-    struct __add_ref<_Tp&>\n-    { typedef _Tp& type; };\n-\n-  // Adds an rvalue reference to a non-reference type.\n-  template<typename _Tp>\n-    struct __add_r_ref\n-    { typedef _Tp&& type; };\n-\n-  template<typename _Tp>\n-    struct __add_r_ref<_Tp&>\n-    { typedef _Tp& type; };\n-\n   template<std::size_t _Idx, typename _Head, bool _IsEmptyNotFinal>\n     struct _Head_base;\n \n@@ -689,25 +662,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Head type;\n     };\n \n+  // Duplicate of C++14's tuple_element_t for internal use in C++11 mode\n+  template<std::size_t __i, typename _Tp>\n+    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;\n+\n   template<std::size_t __i, typename _Tp>\n     struct tuple_element<__i, const _Tp>\n     {\n-      typedef typename\n-      add_const<typename tuple_element<__i, _Tp>::type>::type type;\n+      typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;\n     };\n \n   template<std::size_t __i, typename _Tp>\n     struct tuple_element<__i, volatile _Tp>\n     {\n-      typedef typename\n-      add_volatile<typename tuple_element<__i, _Tp>::type>::type type;\n+      typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;\n     };\n \n   template<std::size_t __i, typename _Tp>\n     struct tuple_element<__i, const volatile _Tp>\n     {\n-      typedef typename\n-      add_cv<typename tuple_element<__i, _Tp>::type>::type type;\n+      typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;\n     };\n \n #if __cplusplus > 201103L\n@@ -719,122 +693,112 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct tuple_size;\n \n+  template<typename _Tp, typename _Ts = tuple_size<_Tp>>\n+    using __cv_tuple_size = integral_constant<\n+             typename remove_cv<decltype(_Ts::value)>::type, _Ts::value>;\n+\n   template<typename _Tp>\n-    struct tuple_size<const _Tp>\n-    : public integral_constant<\n-             typename remove_cv<decltype(tuple_size<_Tp>::value)>::type,\n-             tuple_size<_Tp>::value> { };\n+    struct tuple_size<const _Tp> : __cv_tuple_size<_Tp> { };\n \n   template<typename _Tp>\n-    struct tuple_size<volatile _Tp>\n-    : public integral_constant<\n-             typename remove_cv<decltype(tuple_size<_Tp>::value)>::type,\n-             tuple_size<_Tp>::value> { };\n+    struct tuple_size<volatile _Tp> : __cv_tuple_size<_Tp> { };\n \n   template<typename _Tp>\n-    struct tuple_size<const volatile _Tp>\n-    : public integral_constant<\n-             typename remove_cv<decltype(tuple_size<_Tp>::value)>::type,\n-             tuple_size<_Tp>::value> { };\n+    struct tuple_size<const volatile _Tp> : __cv_tuple_size<_Tp> { };\n \n   /// class tuple_size\n   template<typename... _Elements>\n     struct tuple_size<tuple<_Elements...>>\n     : public integral_constant<std::size_t, sizeof...(_Elements)> { };\n \n   template<std::size_t __i, typename _Head, typename... _Tail>\n-    constexpr typename __add_ref<_Head>::type\n+    constexpr _Head&\n     __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept\n     { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }\n \n   template<std::size_t __i, typename _Head, typename... _Tail>\n-    constexpr typename __add_c_ref<_Head>::type\n+    constexpr const _Head&\n     __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept\n     { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }\n \n-  // Return a reference (const reference, rvalue reference) to the ith element\n-  // of a tuple.  Any const or non-const ref elements are returned with their\n-  // original type.\n+  /// Return a reference to the ith element of a tuple.\n   template<std::size_t __i, typename... _Elements>\n-    constexpr typename __add_ref<\n-                      typename tuple_element<__i, tuple<_Elements...>>::type\n-                    >::type\n+    constexpr __tuple_element_t<__i, tuple<_Elements...>>&\n     get(tuple<_Elements...>& __t) noexcept\n     { return std::__get_helper<__i>(__t); }\n \n+  /// Return a const reference to the ith element of a const tuple.\n   template<std::size_t __i, typename... _Elements>\n-    constexpr typename __add_c_ref<\n-                      typename tuple_element<__i, tuple<_Elements...>>::type\n-                    >::type\n+    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&\n     get(const tuple<_Elements...>& __t) noexcept\n     { return std::__get_helper<__i>(__t); }\n \n+  /// Return an rvalue reference to the ith element of a tuple rvalue.\n   template<std::size_t __i, typename... _Elements>\n-    constexpr typename __add_r_ref<\n-                      typename tuple_element<__i, tuple<_Elements...>>::type\n-                    >::type\n+    constexpr __tuple_element_t<__i, tuple<_Elements...>>&&\n     get(tuple<_Elements...>&& __t) noexcept\n-    { return std::forward<typename tuple_element<__i,\n-\ttuple<_Elements...>>::type&&>(std::get<__i>(__t)); }\n+    {\n+      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;\n+      return std::forward<__element_type&&>(std::get<__i>(__t));\n+    }\n \n #if __cplusplus > 201103L\n   template<typename _Head, size_t __i, typename... _Tail>\n-    constexpr typename __add_ref<_Head>::type\n+    constexpr _Head&\n     __get_helper2(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept\n     { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }\n \n   template<typename _Head, size_t __i, typename... _Tail>\n-    constexpr typename __add_c_ref<_Head>::type\n+    constexpr const _Head&\n     __get_helper2(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept\n     { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }\n \n+  /// Return a reference to the unique element of type _Tp of a tuple.\n   template <typename _Tp, typename... _Types>\n     constexpr _Tp&\n     get(tuple<_Types...>& __t) noexcept\n     { return std::__get_helper2<_Tp>(__t); }\n \n+  /// Return a reference to the unique element of type _Tp of a tuple rvalue.\n   template <typename _Tp, typename... _Types>\n     constexpr _Tp&&\n     get(tuple<_Types...>&& __t) noexcept\n-    { return std::move(std::__get_helper2<_Tp>(__t)); }\n+    { return std::forward<_Tp&&>(std::__get_helper2<_Tp>(__t)); }\n \n+  /// Return a const reference to the unique element of type _Tp of a tuple.\n   template <typename _Tp, typename... _Types>\n     constexpr const _Tp&\n     get(const tuple<_Types...>& __t) noexcept\n     { return std::__get_helper2<_Tp>(__t); }\n #endif\n \n-  // This class helps construct the various comparison operations on tuples\n-  template<std::size_t __check_equal_size, std::size_t __i, std::size_t __j,\n-\t   typename _Tp, typename _Up>\n-    struct __tuple_compare;\n-\n-  template<std::size_t __i, std::size_t __j, typename _Tp, typename _Up>\n-    struct __tuple_compare<0, __i, __j, _Tp, _Up>\n+  // This class performs the comparison operations on tuples\n+  template<typename _Tp, typename _Up, size_t __i, size_t __size>\n+    struct __tuple_compare\n     {\n-      static constexpr bool \n+      static constexpr bool\n       __eq(const _Tp& __t, const _Up& __u)\n       {\n \treturn bool(std::get<__i>(__t) == std::get<__i>(__u))\n-\t  && __tuple_compare<0, __i + 1, __j, _Tp, _Up>::__eq(__t, __u);\n+\t  && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);\n       }\n-     \n-      static constexpr bool \n+   \n+      static constexpr bool\n       __less(const _Tp& __t, const _Up& __u)\n       {\n \treturn bool(std::get<__i>(__t) < std::get<__i>(__u))\n-\t  || !bool(std::get<__i>(__u) < std::get<__i>(__t))\n-\t  && __tuple_compare<0, __i + 1, __j, _Tp, _Up>::__less(__t, __u);\n+\t  || (!bool(std::get<__i>(__u) < std::get<__i>(__t))\n+\t      && __tuple_compare<_Tp, _Up, __i + 1, __size>::__less(__t, __u));\n       }\n     };\n \n-  template<std::size_t __i, typename _Tp, typename _Up>\n-    struct __tuple_compare<0, __i, __i, _Tp, _Up>\n+  template<typename _Tp, typename _Up, size_t __size>\n+    struct __tuple_compare<_Tp, _Up, __size, __size>\n     {\n-      static constexpr bool \n+      static constexpr bool\n       __eq(const _Tp&, const _Up&) { return true; }\n-     \n-      static constexpr bool \n+   \n+      static constexpr bool\n       __less(const _Tp&, const _Up&) { return false; }\n     };\n \n@@ -843,21 +807,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator==(const tuple<_TElements...>& __t,\n \t       const tuple<_UElements...>& __u)\n     {\n-      typedef tuple<_TElements...> _Tp;\n-      typedef tuple<_UElements...> _Up;\n-      return bool(__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,\n-\t      0, tuple_size<_Tp>::value, _Tp, _Up>::__eq(__t, __u));\n+      static_assert(sizeof...(_TElements) == sizeof...(_UElements),\n+\t  \"tuple objects can only be compared if they have equal sizes.\");\n+      using __compare = __tuple_compare<tuple<_TElements...>,\n+\t\t\t\t\ttuple<_UElements...>,\n+\t\t\t\t\t0, sizeof...(_TElements)>;\n+      return __compare::__eq(__t, __u);\n     }\n \n   template<typename... _TElements, typename... _UElements>\n     constexpr bool\n     operator<(const tuple<_TElements...>& __t,\n \t      const tuple<_UElements...>& __u)\n     {\n-      typedef tuple<_TElements...> _Tp;\n-      typedef tuple<_UElements...> _Up;\n-      return bool(__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,\n-\t      0, tuple_size<_Tp>::value, _Tp, _Up>::__less(__t, __u));\n+      static_assert(sizeof...(_TElements) == sizeof...(_UElements),\n+\t  \"tuple objects can only be compared if they have equal sizes.\");\n+      using __compare = __tuple_compare<tuple<_TElements...>,\n+\t\t\t\t\ttuple<_UElements...>,\n+\t\t\t\t\t0, sizeof...(_TElements)>;\n+      return __compare::__less(__t, __u);\n     }\n \n   template<typename... _TElements, typename... _UElements>\n@@ -922,17 +890,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n             <typename std::remove_reference<_Tp>::type>::type>::type\n     { };\n \n-  template<std::size_t, typename, typename, std::size_t>\n+  template<size_t, typename, typename, size_t>\n     struct __make_tuple_impl;\n \n-  template<std::size_t _Idx, typename _Tuple, typename... _Tp,\n-           std::size_t _Nm>\n+  template<size_t _Idx, typename _Tuple, typename... _Tp, size_t _Nm>\n     struct __make_tuple_impl<_Idx, tuple<_Tp...>, _Tuple, _Nm>\n-    {\n-      typedef typename __make_tuple_impl<_Idx + 1, tuple<_Tp...,\n-\ttypename std::tuple_element<_Idx, _Tuple>::type>, _Tuple, _Nm>::__type\n-      __type;\n-    };\n+    : __make_tuple_impl<_Idx + 1,\n+\t\t\ttuple<_Tp..., __tuple_element_t<_Idx, _Tuple>>,\n+\t\t\t_Tuple, _Nm>\n+    { };\n \n   template<std::size_t _Nm, typename _Tuple, typename... _Tp>\n     struct __make_tuple_impl<_Nm, tuple<_Tp...>, _Tuple, _Nm>\n@@ -942,8 +908,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tuple>\n     struct __do_make_tuple\n-    : public __make_tuple_impl<0, tuple<>, _Tuple,\n-                               std::tuple_size<_Tuple>::value>\n+    : __make_tuple_impl<0, tuple<>, _Tuple, std::tuple_size<_Tuple>::value>\n     { };\n \n   // Returns the std::tuple equivalent of a tuple-like type."}, {"sha": "042f2149a0d5dfa0f6127df3c82a499c2fadb6cc", "filename": "libstdc++-v3/testsuite/20_util/tuple/element_access/get_by_type.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af222e7486b241fa6e345712eb9abb73f2ed0e27/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_by_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af222e7486b241fa6e345712eb9abb73f2ed0e27/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_by_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_by_type.cc?ref=af222e7486b241fa6e345712eb9abb73f2ed0e27", "patch": "@@ -41,4 +41,8 @@ main()\n   get<1>(b)=5;\n   VERIFY(get<int>(b)==1 && get<int&>(b)==5 && get<const int&>(b)==2);\n   VERIFY(j==5);\n+  // test rvalue overload:\n+  VERIFY(get<int>(std::move(b))==1);\n+  VERIFY(get<int&>(std::move(b))==5);\n+  VERIFY(get<const int&>(std::move(b))==2);\n }"}, {"sha": "cf5d6a57dd98bdaaba3cf362b632d307aeb564eb", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/cons_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af222e7486b241fa6e345712eb9abb73f2ed0e27/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af222e7486b241fa6e345712eb9abb73f2ed0e27/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc?ref=af222e7486b241fa6e345712eb9abb73f2ed0e27", "patch": "@@ -44,4 +44,4 @@ void test01()\n \n   tuple<Type> t(allocator_arg, a, 1);\n }\n-// { dg-error \"no matching function\" \"\" { target *-*-* } 118 }\n+// { dg-error \"no matching function\" \"\" { target *-*-* } 91 }"}]}