{"sha": "7423731691e898b0581532cf277b1e08a510323a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQyMzczMTY5MWU4OThiMDU4MTUzMmNmMjc3YjFlMDhhNTEwMzIzYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-26T08:20:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-26T08:20:23Z"}, "message": "dwarf2asm: Fix up -gdwarf-64 for 32-bit targets\n\nFor the 32-bit targets the limitations of the object\nfile format (e.g. 32-bit ELF) will not allow > 2GiB debug info anyway,\nand as I've just tested, e.g. on x86_64 with -m32 -gdwarf64 will not work\neven on tiny testcases:\nas: pr64716.o: unsupported relocation type: 0x1\npr64716.s: Assembler messages:\npr64716.s:6013: Error: cannot represent relocation type BFD_RELOC_64\nas: pr64716.o: unsupported relocation type: 0x1\npr64716.s:6015: Error: cannot represent relocation type BFD_RELOC_64\nas: pr64716.o: unsupported relocation type: 0x1\npr64716.s:6017: Error: cannot represent relocation type BFD_RELOC_64\nSo yes, we can either do a sorry, error, or could just avoid 64-bit\nrelocations (depending on endianity instead of emitting\n.quad expression_that_needs_relocation\nemit\n.long expression_that_needs_relocation, 0\nor\n.long 0, expression_that_needs_relocation\n\nThis patch implements that last option, dunno if we need also configure tests\nfor that or not, maybe some 32-bit targets use 64-bit ELF and can handle such\nrelocations.\n\n> 64bit relocs are not required here?  That is, can one with\n> dwarf64 choose 32bit forms for select offsets (like could\n> dwz exploit this?)?\n\nI guess it depends on whether for 32-bit target and -gdwarf64, when\ncalling dw2_assemble_integer with non-CONST_INT argument we only\nneed positive values or might need negative ones too.\nBecause positive ones can be easily emulated through that\n.long expression, 0\nor\n.long 0, expression\ndepending on endianity, but I'm afraid there is no way to emit\n0 or -1 depending on the sign of expression, when it needs relocations.\nLooking through dw2_asm_output_delta calls, at least the vast majority\nof the calls seem to guarantee being positive, not 100% sure about\none case in .debug_line views, but I'd hope it is ok too.\nIn most cases, the deltas are between two labels where the first one\nin the arguments is later in the same section than the other one,\nor where the second argument is the start of a section or another section\nbase.\n\n2021-01-26  Jakub Jelinek  <jakub@redhat.com>\n\n\t* dwarf2asm.c (dw2_assemble_integer): Handle size twice as large\n\tas DWARF2_ADDR_SIZE if x is not a scalar int by emitting it as\n\ttwo halves, one with x and the other with const0_rtx, ordered\n\tdepending on endianity.", "tree": {"sha": "f67a3080076505965bf87b27a3fb100f0c642729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f67a3080076505965bf87b27a3fb100f0c642729"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7423731691e898b0581532cf277b1e08a510323a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7423731691e898b0581532cf277b1e08a510323a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7423731691e898b0581532cf277b1e08a510323a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7423731691e898b0581532cf277b1e08a510323a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "667c8e33270e267c764202021c350ef2d5d861e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/667c8e33270e267c764202021c350ef2d5d861e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/667c8e33270e267c764202021c350ef2d5d861e7"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "8e08d4d24d80c397b23f8bcf9af4c08aee8f254b", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7423731691e898b0581532cf277b1e08a510323a/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7423731691e898b0581532cf277b1e08a510323a/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=7423731691e898b0581532cf277b1e08a510323a", "patch": "@@ -46,6 +46,52 @@ along with GCC; see the file COPYING3.  If not see\n void\n dw2_assemble_integer (int size, rtx x)\n {\n+  if (size == 2 * DWARF2_ADDR_SIZE && !CONST_SCALAR_INT_P (x))\n+    {\n+      /* On 32-bit targets with -gdwarf64, DImode values with\n+\t relocations usually result in assembler errors.  Assume\n+\t all such values are positive and emit the relocation only\n+\t in the least significant half.  */\n+      const char *op = integer_asm_op (DWARF2_ADDR_SIZE, FALSE);\n+      if (BYTES_BIG_ENDIAN)\n+\t{\n+\t  if (op)\n+\t    {\n+\t      fputs (op, asm_out_file);\n+\t      fprint_whex (asm_out_file, 0);\n+\t      fputs (\", \", asm_out_file);\n+\t      output_addr_const (asm_out_file, x);\n+\t    }\n+\t  else\n+\t    {\n+\t      assemble_integer (const0_rtx, DWARF2_ADDR_SIZE,\n+\t\t\t\tBITS_PER_UNIT, 1);\n+\t      putc ('\\n', asm_out_file);\n+\t      assemble_integer (x, DWARF2_ADDR_SIZE,\n+\t\t\t\tBITS_PER_UNIT, 1);\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  if (op)\n+\t    {\n+\t      fputs (op, asm_out_file);\n+\t      output_addr_const (asm_out_file, x);\n+\t      fputs (\", \", asm_out_file);\n+\t      fprint_whex (asm_out_file, 0);\n+\t    }\n+\t  else\n+\t    {\n+\t      assemble_integer (x, DWARF2_ADDR_SIZE,\n+\t\t\t\tBITS_PER_UNIT, 1);\n+\t      putc ('\\n', asm_out_file);\n+\t      assemble_integer (const0_rtx, DWARF2_ADDR_SIZE,\n+\t\t\t\tBITS_PER_UNIT, 1);\n+\t    }\n+\t}\n+      return;\n+    }\n+\n   const char *op = integer_asm_op (size, FALSE);\n \n   if (op)"}]}