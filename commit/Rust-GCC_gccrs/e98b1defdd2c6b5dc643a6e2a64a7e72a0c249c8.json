{"sha": "e98b1defdd2c6b5dc643a6e2a64a7e72a0c249c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk4YjFkZWZkZDJjNmI1ZGM2NDNhNmUyYTY0YTdlNzJhMGMyNDljOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-12-16T23:37:48Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-12-16T23:37:48Z"}, "message": "sparc.md (UNSPEC_FRAME_BLOCKAGE): New constant.\n\n\t* config/sparc/sparc.md (UNSPEC_FRAME_BLOCKAGE): New constant.\n\t(frame_blockage): New expander.\n\t(frame_blockage<P:mode>): New instruction.\n\t* config/sparc/sparc.c (sparc_expand_prologue): When the sequence of\n\tinstructions establishing the frame isn't atomic, emit frame blockage.\n\nFrom-SVN: r182420", "tree": {"sha": "171fe758184ff4979f967e638160977eccfc8c94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/171fe758184ff4979f967e638160977eccfc8c94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e98b1defdd2c6b5dc643a6e2a64a7e72a0c249c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98b1defdd2c6b5dc643a6e2a64a7e72a0c249c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98b1defdd2c6b5dc643a6e2a64a7e72a0c249c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98b1defdd2c6b5dc643a6e2a64a7e72a0c249c8/comments", "author": null, "committer": null, "parents": [{"sha": "8a76ce4e34c38b9825af59a58e260201a2e6518c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a76ce4e34c38b9825af59a58e260201a2e6518c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a76ce4e34c38b9825af59a58e260201a2e6518c"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "1c8b3a20c890567e6210c947dc4bda7bd3eb52cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98b1defdd2c6b5dc643a6e2a64a7e72a0c249c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98b1defdd2c6b5dc643a6e2a64a7e72a0c249c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e98b1defdd2c6b5dc643a6e2a64a7e72a0c249c8", "patch": "@@ -1,3 +1,11 @@\n+2011-12-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.md (UNSPEC_FRAME_BLOCKAGE): New constant.\n+\t(frame_blockage): New expander.\n+\t(frame_blockage<P:mode>): New instruction.\n+\t* config/sparc/sparc.c (sparc_expand_prologue): When the sequence of\n+\tinstructions establishing the frame isn't atomic, emit frame blockage.\n+\n 2011-12-16  Tristan Gingold  <gingold@adacore.com>\n \n \t* config/alpha/vms.h (USE_TM_CLONE_REGISTRY): Define."}, {"sha": "19ab54a1304f6916344ec294d7cd29f0f05ad977", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98b1defdd2c6b5dc643a6e2a64a7e72a0c249c8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98b1defdd2c6b5dc643a6e2a64a7e72a0c249c8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e98b1defdd2c6b5dc643a6e2a64a7e72a0c249c8", "patch": "@@ -4972,8 +4972,9 @@ sparc_expand_prologue (void)\n       else if (size <= 8192)\n \t{\n \t  insn = emit_insn (gen_stack_pointer_inc (GEN_INT (-4096)));\n-\t  /* %sp is still the CFA register.  */\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n+\n+\t  /* %sp is still the CFA register.  */\n \t  insn = emit_insn (gen_stack_pointer_inc (GEN_INT (4096 - size)));\n \t}\n       else\n@@ -4996,8 +4997,18 @@ sparc_expand_prologue (void)\n       else if (size <= 8192)\n \t{\n \t  emit_window_save (GEN_INT (-4096));\n+\n \t  /* %sp is not the CFA register anymore.  */\n \t  emit_insn (gen_stack_pointer_inc (GEN_INT (4096 - size)));\n+\n+\t  /* Make sure no %fp-based store is issued until after the frame is\n+\t     established.  The offset between the frame pointer and the stack\n+\t     pointer is calculated relative to the value of the stack pointer\n+\t     at the end of the function prologue, and moving instructions that\n+\t     access the stack via the frame pointer between the instructions\n+\t     that decrement the stack pointer could result in accessing the\n+\t     register window save area, which is volatile.  */\n+\t  emit_insn (gen_frame_blockage ());\n \t}\n       else\n \t{"}, {"sha": "f67ee83d048aca4334c44760710b30fc80e4f614", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98b1defdd2c6b5dc643a6e2a64a7e72a0c249c8/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98b1defdd2c6b5dc643a6e2a64a7e72a0c249c8/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=e98b1defdd2c6b5dc643a6e2a64a7e72a0c249c8", "patch": "@@ -28,6 +28,7 @@\n   [(UNSPEC_MOVE_PIC\t\t0)\n    (UNSPEC_UPDATE_RETURN\t1)\n    (UNSPEC_LOAD_PCREL_SYM\t2)\n+   (UNSPEC_FRAME_BLOCKAGE      3)\n    (UNSPEC_MOVE_PIC_LABEL\t5)\n    (UNSPEC_SETH44\t\t6)\n    (UNSPEC_SETM44\t\t7)\n@@ -6375,6 +6376,25 @@\n   \"\"\n   [(set_attr \"length\" \"0\")])\n \n+;; Do not schedule instructions accessing memory before this point.\n+\n+(define_expand \"frame_blockage\"\n+  [(set (match_dup 0)\n+\t(unspec:BLK [(match_dup 1)] UNSPEC_FRAME_BLOCKAGE))]\n+  \"\"\n+{\n+  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[0]) = 1;\n+  operands[1] = stack_pointer_rtx;\n+})\n+\n+(define_insn \"*frame_blockage<P:mode>\"\n+  [(set (match_operand:BLK 0 \"\" \"\")\n+\t(unspec:BLK [(match_operand:P 1 \"\" \"\")] UNSPEC_FRAME_BLOCKAGE))]\n+  \"\"\n+  \"\"\n+  [(set_attr \"length\" \"0\")])\n+\n (define_expand \"probe_stack\"\n   [(set (match_operand 0 \"memory_operand\" \"\") (const_int 0))]\n   \"\""}]}