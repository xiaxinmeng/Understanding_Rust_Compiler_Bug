{"sha": "c3bdeea8f3a629555c7de26b2f49079b01b7a6fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNiZGVlYThmM2E2Mjk1NTVjN2RlMjZiMmY0OTA3OWIwMWI3YTZmYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-04-26T04:11:56Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-04-26T04:11:56Z"}, "message": "sched-deps.c (sched_analyze_1): On STACK_REGS targets...\n\n\n\t* sched-deps.c (sched_analyze_1): On STACK_REGS targets, x87, treat\n\tall writes to any stack register as a read/write dependency on\n\tFIRST_STACK_REG.\n\t(sched_analyze_2): Likewise, for reads from any stack register.\n\nFrom-SVN: r98762", "tree": {"sha": "750c0c54709164debb5d4dcac47541a1e6d2b318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/750c0c54709164debb5d4dcac47541a1e6d2b318"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3bdeea8f3a629555c7de26b2f49079b01b7a6fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3bdeea8f3a629555c7de26b2f49079b01b7a6fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3bdeea8f3a629555c7de26b2f49079b01b7a6fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3bdeea8f3a629555c7de26b2f49079b01b7a6fc/comments", "author": null, "committer": null, "parents": [{"sha": "21dad7e6b95a0b777b1b4f7d6c57e8813bd733f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21dad7e6b95a0b777b1b4f7d6c57e8813bd733f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21dad7e6b95a0b777b1b4f7d6c57e8813bd733f0"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "06506ed977ef5d0ba3ac9bb569723fa7b5999d50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bdeea8f3a629555c7de26b2f49079b01b7a6fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bdeea8f3a629555c7de26b2f49079b01b7a6fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3bdeea8f3a629555c7de26b2f49079b01b7a6fc", "patch": "@@ -1,3 +1,10 @@\n+2005-04-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* sched-deps.c (sched_analyze_1): On STACK_REGS targets, x87, treat\n+\tall writes to any stack register as a read/write dependency on\n+\tFIRST_STACK_REG.\n+\t(sched_analyze_2): Likewise, for reads from any stack register.\n+\n 2005-04-25  Richard Henderson  <rth@redhat.com>\n \n \t* final.c (output_addr_const): Revert 2005-04-09 change."}, {"sha": "6b54fc8fd9359c2481b0bc27f8558613db42d9e8", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bdeea8f3a629555c7de26b2f49079b01b7a6fc/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bdeea8f3a629555c7de26b2f49079b01b7a6fc/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=c3bdeea8f3a629555c7de26b2f49079b01b7a6fc", "patch": "@@ -534,6 +534,15 @@ sched_analyze_1 (struct deps *deps, rtx x, rtx insn)\n     {\n       regno = REGNO (dest);\n \n+#ifdef STACK_REGS\n+      /* Treat all writes to a stack register as modifying the TOS.  */\n+      if (regno >= FIRST_STACK_REG && regno <= LAST_STACK_REG)\n+\t{\n+\t  SET_REGNO_REG_SET (reg_pending_uses, FIRST_STACK_REG);\n+\t  regno = FIRST_STACK_REG;\n+\t}\n+#endif\n+\n       /* A hard reg in a wide mode may really be multiple registers.\n          If so, mark all of them just like the first.  */\n       if (regno < FIRST_PSEUDO_REGISTER)\n@@ -684,6 +693,16 @@ sched_analyze_2 (struct deps *deps, rtx x, rtx insn)\n     case REG:\n       {\n \tint regno = REGNO (x);\n+\n+#ifdef STACK_REGS\n+      /* Treat all reads of a stack register as modifying the TOS.  */\n+      if (regno >= FIRST_STACK_REG && regno <= LAST_STACK_REG)\n+\t{\n+\t  SET_REGNO_REG_SET (reg_pending_sets, FIRST_STACK_REG);\n+\t  regno = FIRST_STACK_REG;\n+\t}\n+#endif\n+\n \tif (regno < FIRST_PSEUDO_REGISTER)\n \t  {\n \t    int i = hard_regno_nregs[regno][GET_MODE (x)];"}]}