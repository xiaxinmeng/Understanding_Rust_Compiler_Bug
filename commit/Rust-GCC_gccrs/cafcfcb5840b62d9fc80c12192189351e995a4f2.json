{"sha": "cafcfcb5840b62d9fc80c12192189351e995a4f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FmY2ZjYjU4NDBiNjJkOWZjODBjMTIxOTIxODkzNTFlOTk1YTRmMg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-01-20T14:44:33Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-01-20T14:44:33Z"}, "message": "c++: Fix tsubsting CLASS_PLACEHOLDER_TEMPLATE [PR95434]\n\nHere, during partial instantiation of the generic lambda, we do\ntsubst_copy on the CLASS_PLACEHOLDER_TEMPLATE for U{0} which yields a\n(level-lowered) TEMPLATE_TEMPLATE_PARM rather than the corresponding\nTEMPLATE_DECL.  This later confuses do_class_deduction which expects\nthat a CLASS_PLACEHOLDER_TEMPLATE is always a TEMPLATE_DECL.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95434\n\t* pt.c (tsubst) <case TEMPLATE_TYPE_PARM>: If tsubsting\n\tCLASS_PLACEHOLDER_TEMPLATE yields a TEMPLATE_TEMPLATE_PARM,\n\tadjust to its TEMPLATE_TEMPLATE_PARM_TEMPLATE_DECL.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95434\n\t* g++.dg/cpp2a/lambda-generic9.C: New test.", "tree": {"sha": "74a8e556110a58df2190f0b14ae701e68cfc3fde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74a8e556110a58df2190f0b14ae701e68cfc3fde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cafcfcb5840b62d9fc80c12192189351e995a4f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cafcfcb5840b62d9fc80c12192189351e995a4f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cafcfcb5840b62d9fc80c12192189351e995a4f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cafcfcb5840b62d9fc80c12192189351e995a4f2/comments", "author": null, "committer": null, "parents": [{"sha": "79e1251b642db038df276153c9f2ec6b82e56162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e1251b642db038df276153c9f2ec6b82e56162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79e1251b642db038df276153c9f2ec6b82e56162"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "373f82796047226910eea33d00967eababbfc331", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafcfcb5840b62d9fc80c12192189351e995a4f2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafcfcb5840b62d9fc80c12192189351e995a4f2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cafcfcb5840b62d9fc80c12192189351e995a4f2", "patch": "@@ -15688,6 +15688,8 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t    else if (tree pl = CLASS_PLACEHOLDER_TEMPLATE (t))\n \t\t      {\n \t\t\tpl = tsubst_copy (pl, args, complain, in_decl);\n+\t\t\tif (TREE_CODE (pl) == TEMPLATE_TEMPLATE_PARM)\n+\t\t\t  pl = TEMPLATE_TEMPLATE_PARM_TEMPLATE_DECL (pl);\n \t\t\tCLASS_PLACEHOLDER_TEMPLATE (r) = pl;\n \t\t      }\n \t\t  }"}, {"sha": "20ceb370c382f9c50eecec6e5756fce5a4355978", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-generic9.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafcfcb5840b62d9fc80c12192189351e995a4f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafcfcb5840b62d9fc80c12192189351e995a4f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic9.C?ref=cafcfcb5840b62d9fc80c12192189351e995a4f2", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/95434\n+// { dg-do compile { target c++20 } }\n+\n+template <class>\n+void f() {\n+  [] <template <class> class U> { U{0}; };\n+}\n+\n+template void f<int>();"}]}