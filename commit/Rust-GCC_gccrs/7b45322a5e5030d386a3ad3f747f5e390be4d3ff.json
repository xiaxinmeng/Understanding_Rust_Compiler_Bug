{"sha": "7b45322a5e5030d386a3ad3f747f5e390be4d3ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I0NTMyMmE1ZTUwMzBkMzg2YTNhZDNmNzQ3ZjVlMzkwYmU0ZDNmZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-02-21T18:16:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-02-21T18:16:15Z"}, "message": "PR c++/88690 - C++17 ICE with empty base in aggregate.\n\nBase fields for empty bases appear in initialization order, which may not be\nthe same as layout order.  If they also show up in a CONSTRUCTOR in that\norder, output_constructor_regular_field aborts because it understandably\ndoesn't want to go backwards.  I also considered making o_c_r_f more\ntolerant of the case where the out-of-order field has fieldsize 0, and so no\nactual data needs to be emitted, but we might as well avoid adding an\nelement to the CONSTRUCTOR in the first place.\n\n\t* typeck2.c (process_init_constructor_record): Skip trivial\n\tinitialization of an empty base.\n\nFrom-SVN: r269073", "tree": {"sha": "6fcd5af2f5a869fe25729cfc965e662154b51ad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fcd5af2f5a869fe25729cfc965e662154b51ad0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b45322a5e5030d386a3ad3f747f5e390be4d3ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b45322a5e5030d386a3ad3f747f5e390be4d3ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b45322a5e5030d386a3ad3f747f5e390be4d3ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b45322a5e5030d386a3ad3f747f5e390be4d3ff/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f64629aa9aefbdcf895b120f00caf5b18a17e3e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64629aa9aefbdcf895b120f00caf5b18a17e3e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f64629aa9aefbdcf895b120f00caf5b18a17e3e4"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "89a1bcac80b3d1d36e191c07ce5ae871d142b8db", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b45322a5e5030d386a3ad3f747f5e390be4d3ff/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b45322a5e5030d386a3ad3f747f5e390be4d3ff/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7b45322a5e5030d386a3ad3f747f5e390be4d3ff", "patch": "@@ -1,3 +1,9 @@\n+2019-02-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/88690 - C++17 ICE with empty base in aggregate.\n+\t* typeck2.c (process_init_constructor_record): Skip trivial\n+\tinitialization of an empty base.\n+\n 2019-02-21  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/89392"}, {"sha": "456c4fcb74847bfd43f6bf8fb5a546213b7eb6b9", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b45322a5e5030d386a3ad3f747f5e390be4d3ff/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b45322a5e5030d386a3ad3f747f5e390be4d3ff/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=7b45322a5e5030d386a3ad3f747f5e390be4d3ff", "patch": "@@ -1627,6 +1627,13 @@ process_init_constructor_record (tree type, tree init, int nested, int flags,\n \t    }\n \t}\n \n+      if (DECL_SIZE (field) && integer_zerop (DECL_SIZE (field))\n+\t  && !TREE_SIDE_EFFECTS (next))\n+\t/* Don't add trivial initialization of an empty base/field to the\n+\t   constructor, as they might not be ordered the way the back-end\n+\t   expects.  */\n+\tcontinue;\n+\n       /* If this is a bitfield, now convert to the lowered type.  */\n       if (type != TREE_TYPE (field))\n \tnext = cp_convert_and_check (TREE_TYPE (field), next, complain);"}, {"sha": "bc1793e79ca5ae7c3fdfc97c0b5e4d11bc9f2aac", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base7.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b45322a5e5030d386a3ad3f747f5e390be4d3ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b45322a5e5030d386a3ad3f747f5e390be4d3ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base7.C?ref=7b45322a5e5030d386a3ad3f747f5e390be4d3ff", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/88690\n+// { dg-do compile { target c++11 } }\n+\n+struct A { int a = 1; };\n+struct B { int b = 0; };\n+struct C { C() = default; C (const C&) = delete; };\n+struct D : public B, public C {};\n+struct E : A { D f; } g{};"}]}