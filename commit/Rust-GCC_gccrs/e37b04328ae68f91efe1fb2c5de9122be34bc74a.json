{"sha": "e37b04328ae68f91efe1fb2c5de9122be34bc74a", "node_id": "C_kwDOANBUbNoAKGUzN2IwNDMyOGFlNjhmOTFlZmUxZmIyYzVkZTkxMjJiZTM0YmM3NGE", "commit": {"author": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2023-02-20T16:49:37Z"}, "committer": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2023-02-24T18:34:28Z"}, "message": "libstdc++: Always-inline most of non-cmath fixed_size implementation\n\nFor simd, the inlining behavior should be similar to builtin types. (No\noperator on buitin types is ever translated into a function call.)\nTherefore, always_inline is the right choice (i.e. inline on -O0 as\nwell).\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/108030\n\t* include/experimental/bits/simd_fixed_size.h\n\t(_SimdImplFixedSize::_S_broadcast): Replace inline with\n\t_GLIBCXX_SIMD_INTRINSIC.\n\t(_SimdImplFixedSize::_S_generate): Likewise.\n\t(_SimdImplFixedSize::_S_load): Likewise.\n\t(_SimdImplFixedSize::_S_masked_load): Likewise.\n\t(_SimdImplFixedSize::_S_store): Likewise.\n\t(_SimdImplFixedSize::_S_masked_store): Likewise.\n\t(_SimdImplFixedSize::_S_min): Likewise.\n\t(_SimdImplFixedSize::_S_max): Likewise.\n\t(_SimdImplFixedSize::_S_complement): Likewise.\n\t(_SimdImplFixedSize::_S_unary_minus): Likewise.\n\t(_SimdImplFixedSize::_S_plus): Likewise.\n\t(_SimdImplFixedSize::_S_minus): Likewise.\n\t(_SimdImplFixedSize::_S_multiplies): Likewise.\n\t(_SimdImplFixedSize::_S_divides): Likewise.\n\t(_SimdImplFixedSize::_S_modulus): Likewise.\n\t(_SimdImplFixedSize::_S_bit_and): Likewise.\n\t(_SimdImplFixedSize::_S_bit_or): Likewise.\n\t(_SimdImplFixedSize::_S_bit_xor): Likewise.\n\t(_SimdImplFixedSize::_S_bit_shift_left): Likewise.\n\t(_SimdImplFixedSize::_S_bit_shift_right): Likewise.\n\t(_SimdImplFixedSize::_S_remquo): Add inline keyword (to be\n\texplicit about not always-inline, yet).\n\t(_SimdImplFixedSize::_S_isinf): Likewise.\n\t(_SimdImplFixedSize::_S_isfinite): Likewise.\n\t(_SimdImplFixedSize::_S_isnan): Likewise.\n\t(_SimdImplFixedSize::_S_isnormal): Likewise.\n\t(_SimdImplFixedSize::_S_signbit): Likewise.", "tree": {"sha": "2a18931888db1b76085afd153e24e9f64de367b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a18931888db1b76085afd153e24e9f64de367b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e37b04328ae68f91efe1fb2c5de9122be34bc74a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37b04328ae68f91efe1fb2c5de9122be34bc74a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e37b04328ae68f91efe1fb2c5de9122be34bc74a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37b04328ae68f91efe1fb2c5de9122be34bc74a/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ce55180d494b616e2e3e68ffedfe9007e42ca06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ce55180d494b616e2e3e68ffedfe9007e42ca06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ce55180d494b616e2e3e68ffedfe9007e42ca06"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "88a9b27e359cc4036c468a1133446e0c222558a5", "filename": "libstdc++-v3/include/experimental/bits/simd_fixed_size.h", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37b04328ae68f91efe1fb2c5de9122be34bc74a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_fixed_size.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37b04328ae68f91efe1fb2c5de9122be34bc74a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_fixed_size.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_fixed_size.h?ref=e37b04328ae68f91efe1fb2c5de9122be34bc74a", "patch": "@@ -1284,7 +1284,8 @@ template <int _Np, typename>\n \n     // broadcast {{{2\n     template <typename _Tp>\n-      static constexpr inline _SimdMember<_Tp> _S_broadcast(_Tp __x) noexcept\n+      _GLIBCXX_SIMD_INTRINSIC static constexpr _SimdMember<_Tp>\n+      _S_broadcast(_Tp __x) noexcept\n       {\n \treturn _SimdMember<_Tp>::_S_generate(\n \t\t [&](auto __meta) constexpr _GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA {\n@@ -1294,8 +1295,8 @@ template <int _Np, typename>\n \n     // _S_generator {{{2\n     template <typename _Fp, typename _Tp>\n-      static constexpr inline _SimdMember<_Tp> _S_generator(_Fp&& __gen,\n-\t\t\t\t\t\t\t    _TypeTag<_Tp>)\n+      _GLIBCXX_SIMD_INTRINSIC static constexpr _SimdMember<_Tp>\n+      _S_generator(_Fp&& __gen, _TypeTag<_Tp>)\n       {\n \treturn _SimdMember<_Tp>::_S_generate(\n \t\t [&__gen](auto __meta) constexpr _GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA {\n@@ -1310,8 +1311,8 @@ template <int _Np, typename>\n \n     // _S_load {{{2\n     template <typename _Tp, typename _Up>\n-      static inline _SimdMember<_Tp> _S_load(const _Up* __mem,\n-\t\t\t\t\t     _TypeTag<_Tp>) noexcept\n+      _GLIBCXX_SIMD_INTRINSIC static _SimdMember<_Tp>\n+      _S_load(const _Up* __mem, _TypeTag<_Tp>) noexcept\n       {\n \treturn _SimdMember<_Tp>::_S_generate(\n \t\t [&](auto __meta) _GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA {\n@@ -1321,7 +1322,7 @@ template <int _Np, typename>\n \n     // _S_masked_load {{{2\n     template <typename _Tp, typename... _As, typename _Up>\n-      static inline _SimdTuple<_Tp, _As...>\n+      _GLIBCXX_SIMD_INTRINSIC static _SimdTuple<_Tp, _As...>\n       _S_masked_load(const _SimdTuple<_Tp, _As...>& __old,\n \t\t     const _MaskMember __bits, const _Up* __mem) noexcept\n       {\n@@ -1344,8 +1345,8 @@ template <int _Np, typename>\n \n     // _S_store {{{2\n     template <typename _Tp, typename _Up>\n-      static inline void _S_store(const _SimdMember<_Tp>& __v, _Up* __mem,\n-\t\t\t\t  _TypeTag<_Tp>) noexcept\n+      _GLIBCXX_SIMD_INTRINSIC static void\n+      _S_store(const _SimdMember<_Tp>& __v, _Up* __mem, _TypeTag<_Tp>) noexcept\n       {\n \t__for_each(__v, [&](auto __meta, auto __native) _GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA {\n \t  __meta._S_store(__native, &__mem[__meta._S_offset], _TypeTag<_Tp>());\n@@ -1354,9 +1355,9 @@ template <int _Np, typename>\n \n     // _S_masked_store {{{2\n     template <typename _Tp, typename... _As, typename _Up>\n-      static inline void _S_masked_store(const _SimdTuple<_Tp, _As...>& __v,\n-\t\t\t\t\t _Up* __mem,\n-\t\t\t\t\t const _MaskMember __bits) noexcept\n+      _GLIBCXX_SIMD_INTRINSIC static void\n+      _S_masked_store(const _SimdTuple<_Tp, _As...>& __v, _Up* __mem,\n+\t\t      const _MaskMember __bits) noexcept\n       {\n \t__for_each(__v, [&](auto __meta, auto __native) _GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA {\n \t  if (__meta._S_submask(__bits).any())\n@@ -1464,7 +1465,7 @@ template <int _Np, typename>\n \n     // _S_min, _S_max {{{2\n     template <typename _Tp, typename... _As>\n-      static inline constexpr _SimdTuple<_Tp, _As...>\n+      _GLIBCXX_SIMD_INTRINSIC static constexpr _SimdTuple<_Tp, _As...>\n       _S_min(const _SimdTuple<_Tp, _As...>& __a,\n \t     const _SimdTuple<_Tp, _As...>& __b)\n       {\n@@ -1476,7 +1477,7 @@ template <int _Np, typename>\n       }\n \n     template <typename _Tp, typename... _As>\n-      static inline constexpr _SimdTuple<_Tp, _As...>\n+      _GLIBCXX_SIMD_INTRINSIC static constexpr _SimdTuple<_Tp, _As...>\n       _S_max(const _SimdTuple<_Tp, _As...>& __a,\n \t     const _SimdTuple<_Tp, _As...>& __b)\n       {\n@@ -1489,7 +1490,7 @@ template <int _Np, typename>\n \n     // _S_complement {{{2\n     template <typename _Tp, typename... _As>\n-      static inline constexpr _SimdTuple<_Tp, _As...>\n+      _GLIBCXX_SIMD_INTRINSIC static constexpr _SimdTuple<_Tp, _As...>\n       _S_complement(const _SimdTuple<_Tp, _As...>& __x) noexcept\n       {\n \treturn __x._M_apply_per_chunk(\n@@ -1500,7 +1501,7 @@ template <int _Np, typename>\n \n     // _S_unary_minus {{{2\n     template <typename _Tp, typename... _As>\n-      static inline constexpr _SimdTuple<_Tp, _As...>\n+      _GLIBCXX_SIMD_INTRINSIC static constexpr _SimdTuple<_Tp, _As...>\n       _S_unary_minus(const _SimdTuple<_Tp, _As...>& __x) noexcept\n       {\n \treturn __x._M_apply_per_chunk(\n@@ -1513,7 +1514,7 @@ template <int _Np, typename>\n \n #define _GLIBCXX_SIMD_FIXED_OP(name_, op_)                                                     \\\n     template <typename _Tp, typename... _As>                                                   \\\n-      static inline constexpr _SimdTuple<_Tp, _As...> name_(                                   \\\n+      _GLIBCXX_SIMD_INTRINSIC static constexpr _SimdTuple<_Tp, _As...> name_(                  \\\n \tconst _SimdTuple<_Tp, _As...>& __x, const _SimdTuple<_Tp, _As...>& __y)                \\\n       {                                                                                        \\\n \treturn __x._M_apply_per_chunk(                                                         \\\n@@ -1536,7 +1537,7 @@ template <int _Np, typename>\n #undef _GLIBCXX_SIMD_FIXED_OP\n \n     template <typename _Tp, typename... _As>\n-      static inline constexpr _SimdTuple<_Tp, _As...>\n+      _GLIBCXX_SIMD_INTRINSIC static constexpr _SimdTuple<_Tp, _As...>\n       _S_bit_shift_left(const _SimdTuple<_Tp, _As...>& __x, int __y)\n       {\n \treturn __x._M_apply_per_chunk(\n@@ -1546,7 +1547,7 @@ template <int _Np, typename>\n       }\n \n     template <typename _Tp, typename... _As>\n-      static inline constexpr _SimdTuple<_Tp, _As...>\n+      _GLIBCXX_SIMD_INTRINSIC static constexpr _SimdTuple<_Tp, _As...>\n       _S_bit_shift_right(const _SimdTuple<_Tp, _As...>& __x, int __y)\n       {\n \treturn __x._M_apply_per_chunk(\n@@ -1665,10 +1666,9 @@ template <int _Np, typename>\n #undef _GLIBCXX_SIMD_APPLY_ON_TUPLE\n \n     template <typename _Tp, typename... _Abis>\n-      static _SimdTuple<_Tp, _Abis...> _S_remquo(\n-\tconst _SimdTuple<_Tp, _Abis...>& __x,\n-\tconst _SimdTuple<_Tp, _Abis...>& __y,\n-\t__fixed_size_storage_t<int, _SimdTuple<_Tp, _Abis...>::_S_size()>* __z)\n+      static inline _SimdTuple<_Tp, _Abis...>\n+      _S_remquo(const _SimdTuple<_Tp, _Abis...>& __x, const _SimdTuple<_Tp, _Abis...>& __y,\n+\t\t__fixed_size_storage_t<int, _SimdTuple<_Tp, _Abis...>::_S_size()>* __z)\n       {\n \treturn __x._M_apply_per_chunk(\n \t\t [](auto __impl, const auto __xx, const auto __yy, auto& __zz)\n@@ -1689,14 +1689,14 @@ template <int _Np, typename>\n \t\t }, __exp);\n       }\n \n-#define _GLIBCXX_SIMD_TEST_ON_TUPLE_(name_)                                    \\\n-    template <typename _Tp, typename... _As>                                   \\\n-      static inline _MaskMember                                                \\\n-\t_S_##name_(const _SimdTuple<_Tp, _As...>& __x) noexcept                \\\n-      {                                                                        \\\n-\treturn _M_test([](auto __impl,                                         \\\n-\t\t\t  auto __xx) { return __impl._S_##name_(__xx); },      \\\n-\t\t       __x);                                                   \\\n+#define _GLIBCXX_SIMD_TEST_ON_TUPLE_(name_)                                              \\\n+    template <typename _Tp, typename... _As>                                             \\\n+      static inline _MaskMember                                                          \\\n+\t_S_##name_(const _SimdTuple<_Tp, _As...>& __x) noexcept                          \\\n+      {                                                                                  \\\n+\treturn _M_test([] (auto __impl, auto __xx) _GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA  { \\\n+\t\t return __impl._S_##name_(__xx);                                         \\\n+\t       }, __x);                                                                  \\\n       }\n \n     _GLIBCXX_SIMD_TEST_ON_TUPLE_(isinf)"}]}