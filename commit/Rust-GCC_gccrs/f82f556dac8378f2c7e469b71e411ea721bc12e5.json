{"sha": "f82f556dac8378f2c7e469b71e411ea721bc12e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgyZjU1NmRhYzgzNzhmMmM3ZTQ2OWI3MWU0MTFlYTcyMWJjMTJlNQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2004-10-26T12:28:59Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2004-10-26T12:28:59Z"}, "message": "rs6000.c (rs6000_hard_regno_nregs): Adjust for e500 doubles.\n\n\t* config/rs6000/rs6000.c (rs6000_hard_regno_nregs): Adjust for\n\te500 doubles.\n\t(spe_build_register_parallel): New.\n\t(rs6000_spe_function_arg): Handle e500 doubles.\n\t(function_arg): Same.\n\t(spe_func_has_64bit_regs_p): Same.\n\t(rs6000_function_value): Same.\n\t(rs6000_libcall_value): Same.\n\t(legitimate_lo_sum_address_p): Return false for e500 doubles.\n\n\t* config/rs6000/rs6000.h (LOCAL_ALIGNMENT): Adjust for e500\n\tdoubles.\n\t(DATA_ALIGNMENT): Same.\n\t(CANNOT_CHANGE_MODE_CLASS): Same.\n\nFrom-SVN: r89582", "tree": {"sha": "0eed431f856523aba5fc164abfaa429854dfebfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eed431f856523aba5fc164abfaa429854dfebfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f82f556dac8378f2c7e469b71e411ea721bc12e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82f556dac8378f2c7e469b71e411ea721bc12e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f82f556dac8378f2c7e469b71e411ea721bc12e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82f556dac8378f2c7e469b71e411ea721bc12e5/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8db8c940f180e23567dab2fb34a27e272d27fe4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db8c940f180e23567dab2fb34a27e272d27fe4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db8c940f180e23567dab2fb34a27e272d27fe4c"}], "stats": {"total": 92, "additions": 81, "deletions": 11}, "files": [{"sha": "bc2a4ecc2be100456206889f1e08bd848816c9c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82f556dac8378f2c7e469b71e411ea721bc12e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82f556dac8378f2c7e469b71e411ea721bc12e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f82f556dac8378f2c7e469b71e411ea721bc12e5", "patch": "@@ -1,3 +1,20 @@\n+2004-10-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_hard_regno_nregs): Adjust for\n+\te500 doubles.\n+\t(spe_build_register_parallel): New.\n+\t(rs6000_spe_function_arg): Handle e500 doubles.\n+\t(function_arg): Same.\n+\t(spe_func_has_64bit_regs_p): Same.\n+\t(rs6000_function_value): Same.\n+\t(rs6000_libcall_value): Same.\n+\t(legitimate_lo_sum_address_p): Return false for e500 doubles.\n+\n+\t* config/rs6000/rs6000.h (LOCAL_ALIGNMENT): Adjust for e500\n+\tdoubles.\n+\t(DATA_ALIGNMENT): Same.\n+\t(CANNOT_CHANGE_MODE_CLASS): Same.\n+\n 2004-10-26  Aldy Hernandez  <aldyh@redhat.com>\n \n         * expr.c (emit_group_load): Handle floats."}, {"sha": "6909859af299a53f2d567f3a27b0b2f059c87683", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 58, "deletions": 10, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82f556dac8378f2c7e469b71e411ea721bc12e5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82f556dac8378f2c7e469b71e411ea721bc12e5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f82f556dac8378f2c7e469b71e411ea721bc12e5", "patch": "@@ -3281,6 +3281,8 @@ legitimate_lo_sum_address_p (enum machine_mode mode, rtx x, int strict)\n     return false;\n   if (!INT_REG_OK_FOR_BASE_P (XEXP (x, 0), strict))\n     return false;\n+  if (TARGET_E500_DOUBLE && mode == DFmode)\n+    return false;\n   x = XEXP (x, 1);\n \n   if (TARGET_ELF || TARGET_MACHO)\n@@ -3418,8 +3420,7 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \t   && GET_CODE (x) != CONST_INT\n \t   && GET_CODE (x) != CONST_DOUBLE\n \t   && CONSTANT_P (x)\n-\t   && ((TARGET_HARD_FLOAT && TARGET_FPRS)\n-\t       || (mode != DFmode || TARGET_E500_DOUBLE))\n+\t   && ((TARGET_HARD_FLOAT && TARGET_FPRS) || mode != DFmode)\n \t   && mode != DImode\n \t   && mode != TImode)\n     {\n@@ -4933,15 +4934,50 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     }\n }\n \n-/* Determine where to put a SIMD argument on the SPE.  */\n+static rtx\n+spe_build_register_parallel (enum machine_mode mode, int gregno)\n+{\n+  rtx r1, r2;\n+  enum machine_mode inner;\n+  unsigned int inner_bytes;\n+\n+  if (mode == DFmode)\n+    {\n+      inner = SImode;\n+      inner_bytes = 4;\n+    }\n+  else\n+    abort ();\n+\n+  r1 = gen_rtx_REG (inner, gregno);\n+  r1 = gen_rtx_EXPR_LIST (SImode, r1, const0_rtx);\n+  r2 = gen_rtx_REG (inner, gregno + 1);\n+  r2 = gen_rtx_EXPR_LIST (SImode, r2, GEN_INT (inner_bytes));\n+  return gen_rtx_PARALLEL (mode, gen_rtvec (2, r1, r2));\n+}\n \n+/* Determine where to put a SIMD argument on the SPE.  */\n static rtx\n rs6000_spe_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t\t\t tree type)\n {\n+  int gregno = cum->sysv_gregno;\n+\n+  /* On E500 v2, double arithmetic is done on the full 64-bit GPR, but\n+     are passed and returned in a pair of GPRs for ABI compatability.  */\n+  if (TARGET_E500_DOUBLE && mode == DFmode)\n+    {\n+      /* Doubles go in an odd/even register pair (r5/r6, etc).  */\n+      gregno += (1 - gregno) & 1;\n+\n+      /* We do not split between registers and stack.  */\n+      if (gregno + 1 > GP_ARG_MAX_REG)\n+\treturn NULL_RTX;\n+\n+      return spe_build_register_parallel (mode, gregno);\n+    }\n   if (cum->stdarg)\n     {\n-      int gregno = cum->sysv_gregno;\n       int n_words = rs6000_arg_size (mode, type);\n \n       /* SPE vectors are put in odd registers.  */\n@@ -4964,8 +5000,8 @@ rs6000_spe_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     }\n   else\n     {\n-      if (cum->sysv_gregno <= GP_ARG_MAX_REG)\n-\treturn gen_rtx_REG (mode, cum->sysv_gregno);\n+      if (gregno <= GP_ARG_MAX_REG)\n+\treturn gen_rtx_REG (mode, gregno);\n       else\n \treturn NULL_RTX;\n     }\n@@ -5144,7 +5180,9 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t  return gen_rtx_REG (part_mode, GP_ARG_MIN_REG + align_words);\n \t}\n     }\n-  else if (TARGET_SPE_ABI && TARGET_SPE && SPE_VECTOR_MODE (mode))\n+  else if (TARGET_SPE_ABI && TARGET_SPE\n+\t   && (SPE_VECTOR_MODE (mode)\n+\t       || (TARGET_E500_DOUBLE && mode == DFmode)))\n     return rs6000_spe_function_arg (cum, mode, type);\n   else if (abi == ABI_V4)\n     {\n@@ -12543,9 +12581,15 @@ spe_func_has_64bit_regs_p (void)\n \t  rtx i;\n \n \t  i = PATTERN (insn);\n-\t  if (GET_CODE (i) == SET\n-\t      && SPE_VECTOR_MODE (GET_MODE (SET_SRC (i))))\n-\t    return true;\n+\t  if (GET_CODE (i) == SET)\n+\t    {\n+\t      enum machine_mode mode = GET_MODE (SET_SRC (i));\n+\n+\t      if (SPE_VECTOR_MODE (mode))\n+\t\treturn true;\n+\t      if (TARGET_E500_DOUBLE && mode == DFmode)\n+\t\treturn true;\n+\t    }\n \t}\n     }\n \n@@ -18078,6 +18122,8 @@ rs6000_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n \t   && TARGET_ALTIVEC && TARGET_ALTIVEC_ABI\n \t   && ALTIVEC_VECTOR_MODE(mode))\n     regno = ALTIVEC_ARG_RETURN;\n+  else if (TARGET_E500_DOUBLE && TARGET_HARD_FLOAT && mode == DFmode)\n+    return spe_build_register_parallel (DFmode, GP_ARG_RETURN);\n   else\n     regno = GP_ARG_RETURN;\n \n@@ -18113,6 +18159,8 @@ rs6000_libcall_value (enum machine_mode mode)\n     regno = ALTIVEC_ARG_RETURN;\n   else if (COMPLEX_MODE_P (mode) && targetm.calls.split_complex_arg)\n     return rs6000_complex_function_value (mode);\n+  else if (TARGET_E500_DOUBLE && TARGET_HARD_FLOAT && mode == DFmode)\n+    return spe_build_register_parallel (DFmode, GP_ARG_RETURN);\n   else\n     regno = GP_ARG_RETURN;\n "}, {"sha": "a64d6827538c5ccd60ed0c2f3ec2a11090e5e64b", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82f556dac8378f2c7e469b71e411ea721bc12e5/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82f556dac8378f2c7e469b71e411ea721bc12e5/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=f82f556dac8378f2c7e469b71e411ea721bc12e5", "patch": "@@ -742,6 +742,7 @@ extern const char *rs6000_warn_altivec_long_switch;\n    that the object would ordinarily have.  */\n #define LOCAL_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\\\n   ((TARGET_ALTIVEC && TREE_CODE (TYPE) == VECTOR_TYPE) ? 128 :\t\\\n+    (TARGET_E500_DOUBLE && TYPE_MODE (TYPE) == DFmode) ? 64 : \\\n     (TARGET_SPE && TREE_CODE (TYPE) == VECTOR_TYPE) ? 64 : ALIGN)\n \n /* Alignment of field after `int : 0' in a structure.  */\n@@ -774,9 +775,11 @@ extern const char *rs6000_warn_altivec_long_switch;\n    : (ALIGN))\n \n /* Make arrays of chars word-aligned for the same reasons.\n-   Align vectors to 128 bits.  */\n+   Align vectors to 128 bits.  Align SPE vectors and E500 v2 doubles to\n+   64 bits.  */\n #define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\\\n   (TREE_CODE (TYPE) == VECTOR_TYPE ? (TARGET_SPE_ABI ? 64 : 128)\t\\\n+   : (TARGET_E500_DOUBLE && TYPE_MODE (TYPE) == DFmode) ? 64 \\\n    : TREE_CODE (TYPE) == ARRAY_TYPE\t\t\\\n    && TYPE_MODE (TREE_TYPE (TYPE)) == QImode\t\\\n    && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n@@ -1433,6 +1436,8 @@ enum reg_class\n    ? 0\t\t\t\t\t\t\t\t\t  \\\n    : GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO)\t\t\t\t  \\\n    ? reg_classes_intersect_p (FLOAT_REGS, CLASS)\t\t\t  \\\n+   : (TARGET_E500_DOUBLE && (((TO) == DFmode) + ((FROM) == DFmode)) == 1) \\\n+   ? reg_classes_intersect_p (GENERAL_REGS, CLASS)\t\t\t  \\\n    : (TARGET_SPE && (SPE_VECTOR_MODE (FROM) + SPE_VECTOR_MODE (TO)) == 1) \\\n    ? reg_classes_intersect_p (GENERAL_REGS, CLASS)\t\t\t  \\\n    : 0)"}]}