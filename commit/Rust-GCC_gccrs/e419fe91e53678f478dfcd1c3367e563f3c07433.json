{"sha": "e419fe91e53678f478dfcd1c3367e563f3c07433", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQxOWZlOTFlNTM2NzhmNDc4ZGZjZDFjMzM2N2U1NjNmM2MwNzQzMw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-04-20T02:56:44Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-04-20T02:56:44Z"}, "message": "fold-const.c (fold_convert): Make function extern/public.\n\n\n\t* fold-const.c (fold_convert): Make function extern/public.\n\t* tree.h (fold_convert): Prototype here.\n\t* builtins.c (expand_builtin_strstr, expand_builtin_strchr,\n\texpand_builtin_strrchr, expand_builtin_strpbrk,\n\texpand_builtin_mempcpy, expand_builtin_bcopy,\n\texpand_builtin_bzero, expand_builtin_memcmp,\n\texpand_builtin_strcmp, expand_builtin_strncmp,\n\tstabilize_va_list, expand_builtin_sprintf,\n\tfold_trunc_transparent_mathfn, fold_builtin_logarithm,\n\tfold_builtin_exponent, fold_builtin_mempcpy,\n\tfold_builtin_strcpy, fold_builtin_strcmp, fold_builtin_strncmp,\n\tfold_builtin_signbit, fold_builtin_isdigit, fold_builtin): Prefer\n\tfold_convert to \"convert\" or \"fold (build1 (NOP_EXPR, ...))\".\n\nFrom-SVN: r80878", "tree": {"sha": "d5d577655dfb86748c85dcbeb13bb119334f02d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5d577655dfb86748c85dcbeb13bb119334f02d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e419fe91e53678f478dfcd1c3367e563f3c07433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e419fe91e53678f478dfcd1c3367e563f3c07433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e419fe91e53678f478dfcd1c3367e563f3c07433", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e419fe91e53678f478dfcd1c3367e563f3c07433/comments", "author": null, "committer": null, "parents": [{"sha": "60c90ad15839985578b6731b0bfb36258cd16889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c90ad15839985578b6731b0bfb36258cd16889", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60c90ad15839985578b6731b0bfb36258cd16889"}], "stats": {"total": 103, "additions": 59, "deletions": 44}, "files": [{"sha": "695043ef4afa6d2d5a22dfd721d34ae38e943608", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e419fe91e53678f478dfcd1c3367e563f3c07433/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e419fe91e53678f478dfcd1c3367e563f3c07433/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e419fe91e53678f478dfcd1c3367e563f3c07433", "patch": "@@ -1,3 +1,19 @@\n+2004-04-19  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold_convert): Make function extern/public.\n+\t* tree.h (fold_convert): Prototype here.\n+\t* builtins.c (expand_builtin_strstr, expand_builtin_strchr,\n+\texpand_builtin_strrchr, expand_builtin_strpbrk,\n+\texpand_builtin_mempcpy, expand_builtin_bcopy,\n+\texpand_builtin_bzero, expand_builtin_memcmp,\n+\texpand_builtin_strcmp, expand_builtin_strncmp,\n+\tstabilize_va_list, expand_builtin_sprintf,\n+\tfold_trunc_transparent_mathfn, fold_builtin_logarithm,\n+\tfold_builtin_exponent, fold_builtin_mempcpy,\n+\tfold_builtin_strcpy, fold_builtin_strcmp, fold_builtin_strncmp,\n+\tfold_builtin_signbit, fold_builtin_isdigit, fold_builtin): Prefer\n+\tfold_convert to \"convert\" or \"fold (build1 (NOP_EXPR, ...))\".\n+\n 2004-04-19  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/rs6000.md (UNSPEC_MV_CR_GT): New constant."}, {"sha": "66b4a638db4874022205b30945eab371459c1b49", "filename": "gcc/builtins.c", "status": "modified", "additions": 41, "deletions": 42, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e419fe91e53678f478dfcd1c3367e563f3c07433/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e419fe91e53678f478dfcd1c3367e563f3c07433/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e419fe91e53678f478dfcd1c3367e563f3c07433", "patch": "@@ -2339,9 +2339,9 @@ expand_builtin_strstr (tree arglist, rtx target, enum machine_mode mode)\n \t    return const0_rtx;\n \n \t  /* Return an offset into the constant string argument.  */\n-\t  return expand_expr (fold (build (PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t\t\t   s1, convert (TREE_TYPE (s1),\n-\t\t\t\t\t\t\tssize_int (r - p1)))),\n+\t  return expand_expr (fold (build (PLUS_EXPR, TREE_TYPE (s1), s1,\n+\t\t\t\t\t   fold_convert (TREE_TYPE (s1),\n+\t\t\t\t\t\t\t ssize_int (r - p1)))),\n \t\t\t      target, mode, EXPAND_NORMAL);\n \t}\n \n@@ -2397,9 +2397,9 @@ expand_builtin_strchr (tree arglist, rtx target, enum machine_mode mode)\n \t    return const0_rtx;\n \n \t  /* Return an offset into the constant string argument.  */\n-\t  return expand_expr (fold (build (PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t\t\t   s1, convert (TREE_TYPE (s1),\n-\t\t\t\t\t\t\tssize_int (r - p1)))),\n+\t  return expand_expr (fold (build (PLUS_EXPR, TREE_TYPE (s1), s1,\n+\t\t\t\t\t   fold_convert (TREE_TYPE (s1),\n+\t\t\t\t\t\t\t ssize_int (r - p1)))),\n \t\t\t      target, mode, EXPAND_NORMAL);\n \t}\n \n@@ -2442,9 +2442,9 @@ expand_builtin_strrchr (tree arglist, rtx target, enum machine_mode mode)\n \t    return const0_rtx;\n \n \t  /* Return an offset into the constant string argument.  */\n-\t  return expand_expr (fold (build (PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t\t\t   s1, convert (TREE_TYPE (s1),\n-\t\t\t\t\t\t\tssize_int (r - p1)))),\n+\t  return expand_expr (fold (build (PLUS_EXPR, TREE_TYPE (s1), s1,\n+\t\t\t\t\t   fold_convert (TREE_TYPE (s1),\n+\t\t\t\t\t\t\t ssize_int (r - p1)))),\n \t\t\t      target, mode, EXPAND_NORMAL);\n \t}\n \n@@ -2489,9 +2489,9 @@ expand_builtin_strpbrk (tree arglist, rtx target, enum machine_mode mode)\n \t    return const0_rtx;\n \n \t  /* Return an offset into the constant string argument.  */\n-\t  return expand_expr (fold (build (PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t\t\t   s1, convert (TREE_TYPE (s1),\n-\t\t\t\t\t\t\tssize_int (r - p1)))),\n+\t  return expand_expr (fold (build (PLUS_EXPR, TREE_TYPE (s1), s1,\n+\t\t\t\t\t   fold_convert (TREE_TYPE (s1),\n+\t\t\t\t\t\t\t ssize_int (r - p1)))),\n \t\t\t      target, mode, EXPAND_NORMAL);\n \t}\n \n@@ -2679,7 +2679,7 @@ expand_builtin_mempcpy (tree arglist, rtx target, enum machine_mode mode,\n \t  if (endp == 2)\n \t    len = fold (build (MINUS_EXPR, TREE_TYPE (len), dest,\n \t\t\t       integer_one_node));\n-\t  len = convert (TREE_TYPE (dest), len);\n+\t  len = fold_convert (TREE_TYPE (dest), len);\n \t  expr = fold (build (PLUS_EXPR, TREE_TYPE (dest), dest, len));\n \t  return expand_expr (expr, target, mode, EXPAND_NORMAL);\n \t}\n@@ -2823,7 +2823,7 @@ expand_builtin_bcopy (tree arglist)\n      so that if it isn't expanded inline, we fallback to\n      calling bcopy instead of memmove.  */\n \n-  newarglist = build_tree_list (NULL_TREE, convert (sizetype, size));\n+  newarglist = build_tree_list (NULL_TREE, fold_convert (sizetype, size));\n   newarglist = tree_cons (NULL_TREE, src, newarglist);\n   newarglist = tree_cons (NULL_TREE, dest, newarglist);\n \n@@ -3161,7 +3161,7 @@ expand_builtin_bzero (tree arglist)\n      so that if it isn't expanded inline, we fallback to\n      calling bzero instead of memset.  */\n \n-  newarglist = build_tree_list (NULL_TREE, convert (sizetype, size));\n+  newarglist = build_tree_list (NULL_TREE, fold_convert (sizetype, size));\n   newarglist = tree_cons (NULL_TREE, integer_zero_node, newarglist);\n   newarglist = tree_cons (NULL_TREE, dest, newarglist);\n \n@@ -3229,11 +3229,11 @@ expand_builtin_memcmp (tree exp ATTRIBUTE_UNUSED, tree arglist, rtx target,\n       tree ind1 =\n       fold (build1 (CONVERT_EXPR, integer_type_node,\n \t\t    build1 (INDIRECT_REF, cst_uchar_node,\n-\t\t\t    build1 (NOP_EXPR, cst_uchar_ptr_node, arg1))));\n+\t\t\t    fold_convert (cst_uchar_ptr_node, arg1))));\n       tree ind2 =\n       fold (build1 (CONVERT_EXPR, integer_type_node,\n \t\t    build1 (INDIRECT_REF, cst_uchar_node,\n-\t\t\t    build1 (NOP_EXPR, cst_uchar_ptr_node, arg2))));\n+\t\t\t    fold_convert (cst_uchar_ptr_node, arg2))));\n       tree result = fold (build (MINUS_EXPR, integer_type_node, ind1, ind2));\n       return expand_expr (result, target, mode, EXPAND_NORMAL);\n     }\n@@ -3357,11 +3357,11 @@ expand_builtin_strcmp (tree exp, rtx target, enum machine_mode mode)\n       tree ind1 =\n \tfold (build1 (CONVERT_EXPR, integer_type_node,\n \t\t      build1 (INDIRECT_REF, cst_uchar_node,\n-\t\t\t      build1 (NOP_EXPR, cst_uchar_ptr_node, arg1))));\n+\t\t\t      fold_convert (cst_uchar_ptr_node, arg1))));\n       tree ind2 =\n \tfold (build1 (CONVERT_EXPR, integer_type_node,\n \t\t      build1 (INDIRECT_REF, cst_uchar_node,\n-\t\t\t      build1 (NOP_EXPR, cst_uchar_ptr_node, arg2))));\n+\t\t\t      fold_convert (cst_uchar_ptr_node, arg2))));\n       tree result = fold (build (MINUS_EXPR, integer_type_node, ind1, ind2));\n       return expand_expr (result, target, mode, EXPAND_NORMAL);\n     }\n@@ -3522,11 +3522,11 @@ expand_builtin_strncmp (tree exp, rtx target, enum machine_mode mode)\n       tree ind1 =\n \tfold (build1 (CONVERT_EXPR, integer_type_node,\n \t\t      build1 (INDIRECT_REF, cst_uchar_node,\n-\t\t\t      build1 (NOP_EXPR, cst_uchar_ptr_node, arg1))));\n+\t\t\t      fold_convert (cst_uchar_ptr_node, arg1))));\n       tree ind2 =\n \tfold (build1 (CONVERT_EXPR, integer_type_node,\n \t\t      build1 (INDIRECT_REF, cst_uchar_node,\n-\t\t\t      build1 (NOP_EXPR, cst_uchar_ptr_node, arg2))));\n+\t\t\t      fold_convert (cst_uchar_ptr_node, arg2))));\n       tree result = fold (build (MINUS_EXPR, integer_type_node, ind1, ind2));\n       return expand_expr (result, target, mode, EXPAND_NORMAL);\n     }\n@@ -3967,7 +3967,7 @@ stabilize_va_list (tree valist, int needs_lvalue)\n \t  tree p2 = build_pointer_type (va_list_type_node);\n \n \t  valist = build1 (ADDR_EXPR, p2, valist);\n-\t  valist = fold (build1 (NOP_EXPR, p1, valist));\n+\t  valist = fold_convert (p1, valist);\n \t}\n     }\n   else\n@@ -4942,7 +4942,7 @@ expand_builtin_sprintf (tree arglist, rtx target, enum machine_mode mode)\n       if (target == const0_rtx)\n \treturn const0_rtx;\n       exp = build_int_2 (strlen (fmt_str), 0);\n-      exp = fold (build1 (NOP_EXPR, integer_type_node, exp));\n+      exp = fold_convert (integer_type_node, exp);\n       return expand_expr (exp, target, mode, EXPAND_NORMAL);\n     }\n   /* If the format is \"%s\", use strcpy if the result isn't used.  */\n@@ -5931,9 +5931,9 @@ fold_trunc_transparent_mathfn (tree exp)\n \t  && (decl = mathfn_built_in (newtype, fcode)))\n \t{\n \t  arglist =\n-\t    build_tree_list (NULL_TREE, fold (convert (newtype, arg0)));\n-\t  return convert (ftype,\n-\t\t\t  build_function_call_expr (decl, arglist));\n+\t    build_tree_list (NULL_TREE, fold_convert (newtype, arg0));\n+\t  return fold_convert (ftype,\n+\t\t\t       build_function_call_expr (decl, arglist));\n \t}\n     }\n   return 0;\n@@ -6303,7 +6303,7 @@ fold_builtin_logarithm (tree exp, const REAL_VALUE_TYPE *value)\n \t\t      || fcode == BUILT_IN_EXP2F\n \t\t      || fcode == BUILT_IN_EXP2L))\n \t      || (value == &dconst10 && (BUILTIN_EXP10_P (fcode)))))\n-\treturn convert (type, TREE_VALUE (TREE_OPERAND (arg, 1)));\n+\treturn fold_convert (type, TREE_VALUE (TREE_OPERAND (arg, 1)));\n \n       /* Optimize logN(func()) for various exponential functions.  We\n          want to determine the value \"x\" and the power \"exponent\" in\n@@ -6446,7 +6446,7 @@ fold_builtin_exponent (tree exp, const REAL_VALUE_TYPE *value)\n \t\t  && (fcode == BUILT_IN_LOG10\n \t\t      || fcode == BUILT_IN_LOG10F\n \t\t      || fcode == BUILT_IN_LOG10L)))\n-\t    return convert (type, TREE_VALUE (TREE_OPERAND (arg, 1)));\n+\t    return fold_convert (type, TREE_VALUE (TREE_OPERAND (arg, 1)));\n \t}\n     }\n \n@@ -6505,9 +6505,9 @@ fold_builtin_mempcpy (tree exp)\n   /* If SRC and DEST are the same (and not volatile), return DEST+LEN.  */\n   if (operand_equal_p (src, dest, 0))\n     {\n-      tree temp = convert (TREE_TYPE (dest), len);\n-      temp = fold (build (PLUS_EXPR, TREE_TYPE (dest), dest, len));\n-      return convert (TREE_TYPE (exp), temp);\n+      tree temp = fold_convert (TREE_TYPE (dest), len);\n+      temp = fold (build (PLUS_EXPR, TREE_TYPE (dest), dest, temp));\n+      return fold_convert (TREE_TYPE (exp), temp);\n     }\n \n   return 0;\n@@ -6559,7 +6559,7 @@ fold_builtin_strcpy (tree exp)\n \n   /* If SRC and DEST are the same (and not volatile), return DEST.  */\n   if (operand_equal_p (src, dest, 0))\n-    return convert (TREE_TYPE (exp), dest);\n+    return fold_convert (TREE_TYPE (exp), dest);\n \n   return 0;\n }\n@@ -6638,7 +6638,7 @@ fold_builtin_strcmp (tree exp)\n \n   /* If ARG1 and ARG2 are the same (and not volatile), return zero.  */\n   if (operand_equal_p (arg1, arg2, 0))\n-    return convert (TREE_TYPE (exp), integer_zero_node);\n+    return fold_convert (TREE_TYPE (exp), integer_zero_node);\n \n   p1 = c_getstr (arg1);\n   p2 = c_getstr (arg2);\n@@ -6653,7 +6653,7 @@ fold_builtin_strcmp (tree exp)\n \ttemp = integer_one_node;\n       else\n \ttemp = integer_zero_node;\n-      return convert (TREE_TYPE (exp), temp);\n+      return fold_convert (TREE_TYPE (exp), temp);\n     }\n \n   return 0;\n@@ -6701,7 +6701,7 @@ fold_builtin_strncmp (tree exp)\n \ttemp = integer_one_node;\n       else\n \ttemp = integer_zero_node;\n-      return convert (TREE_TYPE (exp), temp);\n+      return fold_convert (TREE_TYPE (exp), temp);\n     }\n \n   return 0;\n@@ -6729,7 +6729,7 @@ fold_builtin_signbit (tree exp)\n \n       c = TREE_REAL_CST (arg);\n       temp = REAL_VALUE_NEGATIVE (c) ? integer_one_node : integer_zero_node;\n-      return convert (TREE_TYPE (exp), temp);\n+      return fold_convert (TREE_TYPE (exp), temp);\n     }\n \n   /* If ARG is non-negative, the result is always zero.  */\n@@ -6793,13 +6793,12 @@ fold_builtin_isdigit (tree arglist)\n       /* Transform isdigit(c) -> (unsigned)(c) - '0' <= 9.  */\n       /* According to the C standard, isdigit is unaffected by locale.  */\n       tree arg = TREE_VALUE (arglist);\n-      arg = build1 (NOP_EXPR, unsigned_type_node, arg);\n+      arg = fold_convert (unsigned_type_node, arg);\n       arg = build (MINUS_EXPR, unsigned_type_node, arg,\n-\t\t   fold (build1 (NOP_EXPR, unsigned_type_node,\n-\t\t\t\t build_int_2 (TARGET_DIGIT0, 0))));\n+\t\t   fold_convert (unsigned_type_node,\n+\t\t\t\t build_int_2 (TARGET_DIGIT0, 0)));\n       arg = build (LE_EXPR, integer_type_node, arg,\n-\t\t   fold (build1 (NOP_EXPR, unsigned_type_node,\n-\t\t\t\t build_int_2 (9, 0))));\n+\t\t   fold_convert (unsigned_type_node, build_int_2 (9, 0)));\n       return fold (arg);\n     }\n }\n@@ -6833,7 +6832,7 @@ fold_builtin (tree exp)\n \t    {\n \t      /* Convert from the internal \"sizetype\" type to \"size_t\".  */\n \t      if (size_type_node)\n-\t\tlen = convert (size_type_node, len);\n+\t\tlen = fold_convert (size_type_node, len);\n \t      return len;\n \t    }\n \t}"}, {"sha": "86fd91065b0ff03d2f730d933f964642bc056c80", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e419fe91e53678f478dfcd1c3367e563f3c07433/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e419fe91e53678f478dfcd1c3367e563f3c07433/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e419fe91e53678f478dfcd1c3367e563f3c07433", "patch": "@@ -70,7 +70,6 @@ static tree const_binop (enum tree_code, tree, tree, int);\n static hashval_t size_htab_hash (const void *);\n static int size_htab_eq (const void *, const void *);\n static tree fold_convert_const (enum tree_code, tree, tree);\n-static tree fold_convert (tree, tree);\n static enum tree_code invert_tree_comparison (enum tree_code);\n static enum tree_code swap_tree_comparison (enum tree_code);\n static int comparison_to_compcode (enum tree_code);\n@@ -1875,7 +1874,7 @@ fold_convert_const (enum tree_code code, tree type, tree arg1)\n /* Convert expression ARG to type TYPE.  Used by the middle-end for\n    simple conversions in preference to calling the front-end's convert.  */\n \n-static tree\n+tree\n fold_convert (tree type, tree arg)\n {\n   tree orig = TREE_TYPE (arg);"}, {"sha": "52a17f0fc7068ff48841cf0bbc84d21d21bbfd14", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e419fe91e53678f478dfcd1c3367e563f3c07433/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e419fe91e53678f478dfcd1c3367e563f3c07433/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e419fe91e53678f478dfcd1c3367e563f3c07433", "patch": "@@ -2940,6 +2940,7 @@ extern void using_eh_for_cleanups (void);\n \n extern tree fold (tree);\n extern tree fold_initializer (tree);\n+extern tree fold_convert (tree, tree);\n extern tree fold_single_bit_test (enum tree_code, tree, tree, tree);\n \n extern int force_fit_type (tree, int);"}]}