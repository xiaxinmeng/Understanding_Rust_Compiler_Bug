{"sha": "ac075f04b2a30b5ebb818c4eb4c05b6bff065b60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMwNzVmMDRiMmEzMGI1ZWJiODE4YzRlYjRjMDViNmJmZjA2NWI2MA==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-07-01T20:22:01Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-07-01T20:22:01Z"}, "message": "entered into RCS\n\nFrom-SVN: r1377", "tree": {"sha": "4ef39693e544fd347af1d79f90ec4a2711eb3b05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ef39693e544fd347af1d79f90ec4a2711eb3b05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac075f04b2a30b5ebb818c4eb4c05b6bff065b60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac075f04b2a30b5ebb818c4eb4c05b6bff065b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac075f04b2a30b5ebb818c4eb4c05b6bff065b60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac075f04b2a30b5ebb818c4eb4c05b6bff065b60/comments", "author": null, "committer": null, "parents": [{"sha": "6278d55f668d83e77633d93f9f1105634b34016a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6278d55f668d83e77633d93f9f1105634b34016a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6278d55f668d83e77633d93f9f1105634b34016a"}], "stats": {"total": 151, "additions": 119, "deletions": 32}, "files": [{"sha": "f61f588f215d6522fc59f1c9b388c00232ca0f62", "filename": "gcc/config/i386/bsd.h", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac075f04b2a30b5ebb818c4eb4c05b6bff065b60/gcc%2Fconfig%2Fi386%2Fbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac075f04b2a30b5ebb818c4eb4c05b6bff065b60/gcc%2Fconfig%2Fi386%2Fbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbsd.h?ref=ac075f04b2a30b5ebb818c4eb4c05b6bff065b60", "patch": "@@ -0,0 +1,116 @@\n+/* Definitions for BSD assembler syntax for Intel 386\n+   (actually AT&T syntax for insns and operands,\n+   adapted to BSD conventions for symbol names and debugging.)\n+   Copyright (C) 1988 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* Include common aspects of all 386 Unix assemblers.  */\n+#include \"unx386.h\"\n+\n+/* Use the Sequent Symmetry assembler syntax.  */\n+\n+#define TARGET_VERSION fprintf (stderr, \" (80386, BSD syntax)\");\n+\f\n+/* Define the syntax of pseudo-ops, labels and comments.  */\n+\n+/* Prefix for internally generated assembler labels.  */\n+#define LPREFIX \"L\"\n+\n+/* Assembler pseudos to introduce constants of various size.  */\n+\n+#define ASM_BYTE_OP \"\\t.byte\"\n+#define ASM_SHORT \"\\t.word\"\n+#define ASM_LONG \"\\t.long\"\n+#define ASM_DOUBLE \"\\t.double\"\n+\n+/* Output at beginning of assembler file.\n+   ??? I am skeptical of this -- RMS.  */\n+\n+#define ASM_FILE_START(FILE) \\\n+  fprintf (FILE, \"\\t.file\\t\\\"%s\\\"\\n\", dump_base_name);\n+\n+/* This was suggested, but it shouldn't be right for DBX output. -- RMS\n+   #define ASM_OUTPUT_SOURCE_FILENAME(FILE, NAME) */\n+\n+\f\n+/* Define the syntax of labels and symbol definitions/declarations.  */\n+\n+/* This is how to output an assembler line\n+   that says to advance the location counter by SIZE bytes.  */\n+\n+#define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n+  fprintf (FILE, \"\\t.space %u\\n\", (SIZE))\n+\f\n+/* Define the syntax of labels and symbol definitions/declarations.  */\n+\n+/* This says how to output an assembler line\n+   to define a global common symbol.  */\n+\n+#define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n+( fputs (\".comm \", (FILE)),\t\t\t\\\n+  assemble_name ((FILE), (NAME)),\t\t\\\n+  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+\n+/* This says how to output an assembler line\n+   to define a local common symbol.  */\n+\n+#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n+( fputs (\".lcomm \", (FILE)),\t\t\t\\\n+  assemble_name ((FILE), (NAME)),\t\t\\\n+  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+\n+/* This is how to output an assembler line\n+   that says to advance the location counter\n+   to a multiple of 2**LOG bytes.  */\n+\n+#define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n+     if ((LOG)!=0) fprintf ((FILE), \"\\t.align %d\\n\", (LOG))\n+\n+/* This is how to store into the string BUF\n+   the symbol_ref name of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.\n+   This is suitable for output with `assemble_name'.  */\n+\n+#define ASM_GENERATE_INTERNAL_LABEL(BUF,PREFIX,NUMBER)\t\\\n+    sprintf ((BUF), \"*%s%d\", (PREFIX), (NUMBER))\n+\n+/* This is how to output an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.  */\n+\n+#define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n+  fprintf (FILE, \"%s%d:\\n\", PREFIX, NUM)\n+\n+/* This is how to output a reference to a user-level label named NAME.  */\n+\n+#ifdef NO_UNDERSCORES\n+#define ASM_OUTPUT_LABELREF(FILE,NAME) fprintf (FILE, \"%s\", NAME)\n+#else\n+#define ASM_OUTPUT_LABELREF(FILE,NAME) fprintf (FILE, \"_%s\", NAME)\n+#endif /* not NO_UNDERSCORES */\n+\n+/* Sequent has some changes in the format of DBX symbols.  */\n+#define DBX_NO_XREFS 1\n+\n+/* Don't split DBX symbols into continuations.  */\n+#define DBX_CONTIN_LENGTH 0\n+\n+/* This is how to output an assembler line defining a `double' constant.  */\n+\n+#undef ASM_OUTPUT_DOUBLE\n+#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n+  fprintf (FILE, \"\\t.double 0d%.20e\\n\", (VALUE))"}, {"sha": "eeb0483c88d0ef042e17950a99b00757f7fabb6a", "filename": "gcc/config/i386/gas.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac075f04b2a30b5ebb818c4eb4c05b6bff065b60/gcc%2Fconfig%2Fi386%2Fgas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac075f04b2a30b5ebb818c4eb4c05b6bff065b60/gcc%2Fconfig%2Fi386%2Fgas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgas.h?ref=ac075f04b2a30b5ebb818c4eb4c05b6bff065b60", "patch": "@@ -50,6 +50,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n /* Specify predefined symbols in preprocessor.  */\n \n #define CPP_PREDEFINES \"-Dunix -Di386\"\n+#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\"\n \n /* Allow #sccs in preprocessor.  */\n "}, {"sha": "fdd7a8c90858c64f5c2d797f4fe8432d51a80da1", "filename": "gcc/config/i386/isccoff.h", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac075f04b2a30b5ebb818c4eb4c05b6bff065b60/gcc%2Fconfig%2Fi386%2Fisccoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac075f04b2a30b5ebb818c4eb4c05b6bff065b60/gcc%2Fconfig%2Fi386%2Fisccoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fisccoff.h?ref=ac075f04b2a30b5ebb818c4eb4c05b6bff065b60", "patch": "@@ -6,35 +6,5 @@\n \n #include \"i386v.h\"\n \n-/* Use crt1.o, not crt0.o, as a startup file, and crtn.o as a closing file. */\n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \\\n-  \"%{!shlib:%{posix:%{pg:mcrtp1.o%s}%{!pg:%{p:mcrtp1.o%s}%{!p:crtp1.o%s}}}\\\n-   %{!posix:%{pg:mcrt1.o%s}%{!pg:%{p:mcrt1.o%s}%{!p:crt1.o%s}}\\\n-   %{p:-L/lib/libp} %{pg:-L/lib/libp}}}\\\n-   %{shlib:%{posix:crtp1.o%s}%{!posix:crt1.o%s}} crtbegin.o%s\"\n-  \n-#define ENDFILE_SPEC \"crtend.o%s crtn.o%s\"\n-\n-/* Library spec */\n-#undef LIB_SPEC\n-#define LIB_SPEC \"%{posix:-lcposix} %{shlib:-lc_s} -lc -lg\"\n-\n-#if 0\n-/* This is apparently not true: ISC versions up to 3.0,at least, use\n-   the standard calling sequence in which the called function pops the\n-   extra arg.  */\n-/* caller has to pop the extra argument passed to functions that return\n-   structures. */\n-\n-#undef RETURN_POPS_ARGS\n-#define RETURN_POPS_ARGS(FUNTYPE,SIZE)   \\\n-  (TREE_CODE (FUNTYPE) == IDENTIFIER_NODE ? 0\t\t\t\\\n-   : (TARGET_RTD\t\t\t\t\t\t\\\n-      && (TYPE_ARG_TYPES (FUNTYPE) == 0\t\t\t\t\\\n-\t  || (TREE_VALUE (tree_last (TYPE_ARG_TYPES (FUNTYPE)))\t\\\n-\t      == void_type_node))) ? (SIZE)\t\t\t\\\n-   : 0)\n-/* On other 386 systems, the last line looks like this:\n-   : (aggregate_value_p (FUNTYPE)) ? GET_MODE_SIZE (Pmode) : 0)  */\n-#endif\n+/* But with a few changes.  */\n+#include \"isc.h\""}]}