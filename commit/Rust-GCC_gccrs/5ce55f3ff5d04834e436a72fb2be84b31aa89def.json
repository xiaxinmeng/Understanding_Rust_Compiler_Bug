{"sha": "5ce55f3ff5d04834e436a72fb2be84b31aa89def", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNlNTVmM2ZmNWQwNDgzNGU0MzZhNzJmYjJiZTg0YjMxYWE4OWRlZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-24T14:39:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-24T14:39:57Z"}, "message": "Simplify common case of use_future_t that uses std::allocator\n\nThere is no need to store and pass around the allocator object when it's\nan instance of std::allocator. Define a partial specialization of\nstd::use_future_t and the corresponding completion token so that no\nallocator is stored. Overload the completion handler constructor to not\nexpect an allocator to be stored.\n\n\t* include/experimental/executor (__use_future_ct, use_future_t):\n\tDefine partial specializations for std::allocator.\n\t(__use_future_ch): Overload constructor for completion tokens using\n\tstd::allocator.\n\nFrom-SVN: r277404", "tree": {"sha": "7b16d64999ebbe045ddfea954e0e9e1131ec6672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b16d64999ebbe045ddfea954e0e9e1131ec6672"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ce55f3ff5d04834e436a72fb2be84b31aa89def", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce55f3ff5d04834e436a72fb2be84b31aa89def", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce55f3ff5d04834e436a72fb2be84b31aa89def", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce55f3ff5d04834e436a72fb2be84b31aa89def/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abebffc609506176f8ba3f64533e15ece49446c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abebffc609506176f8ba3f64533e15ece49446c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abebffc609506176f8ba3f64533e15ece49446c0"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "13e834bfb3e9e82cd2d15c0f35a029fa912963e2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce55f3ff5d04834e436a72fb2be84b31aa89def/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce55f3ff5d04834e436a72fb2be84b31aa89def/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5ce55f3ff5d04834e436a72fb2be84b31aa89def", "patch": "@@ -1,5 +1,10 @@\n 2019-10-24  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/experimental/executor (__use_future_ct, use_future_t):\n+\tDefine partial specializations for std::allocator.\n+\t(__use_future_ch): Overload constructor for completion tokens using\n+\tstd::allocator.\n+\n \tPR libstdc++/88338 Implement P0898R3, C++20 concepts library\n \t* doc/xml/manual/status_cxx2020.xml: Update status.\n \t* doc/html/*: Regenerate."}, {"sha": "ed18730951c67a60a0673a84e0ef11f28f7d71da", "filename": "libstdc++-v3/include/experimental/executor", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce55f3ff5d04834e436a72fb2be84b31aa89def/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce55f3ff5d04834e436a72fb2be84b31aa89def/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor?ref=5ce55f3ff5d04834e436a72fb2be84b31aa89def", "patch": "@@ -1501,20 +1501,26 @@ inline namespace v1\n       std::tuple<_Func, _Alloc> _M_t;\n     };\n \n+  template<typename _Func, typename _Tp>\n+    struct __use_future_ct<_Func, std::allocator<_Tp>>\n+    {\n+      _Func _M_f;\n+    };\n+\n   template<typename _ProtoAllocator = allocator<void>>\n     class use_future_t\n     {\n     public:\n       // use_future_t types:\n-      typedef _ProtoAllocator allocator_type;\n+      using allocator_type = _ProtoAllocator;\n \n       // use_future_t members:\n       constexpr use_future_t() noexcept : _M_alloc() { }\n \n       explicit\n       use_future_t(const _ProtoAllocator& __a) noexcept : _M_alloc(__a) { }\n \n-      template<class _OtherAllocator>\n+      template<typename _OtherAllocator>\n \tuse_future_t<_OtherAllocator>\n \trebind(const _OtherAllocator& __a) const noexcept\n \t{ return use_future_t<_OtherAllocator>(__a); }\n@@ -1533,6 +1539,35 @@ inline namespace v1\n       _ProtoAllocator _M_alloc;\n     };\n \n+  template<typename _Tp>\n+    class use_future_t<std::allocator<_Tp>>\n+    {\n+    public:\n+      // use_future_t types:\n+      using allocator_type = std::allocator<_Tp>;\n+\n+      // use_future_t members:\n+      constexpr use_future_t() noexcept = default;\n+\n+      explicit\n+      use_future_t(const allocator_type& __a) noexcept { }\n+\n+      template<class _Up>\n+\tuse_future_t<std::allocator<_Up>>\n+\trebind(const std::allocator<_Up>& __a) const noexcept\n+\t{ return use_future_t<std::allocator<_Up>>(__a); }\n+\n+      allocator_type get_allocator() const noexcept { return {}; }\n+\n+      template<typename _Func>\n+\tauto\n+\toperator()(_Func&& __f) const\n+\t{\n+\t  using _Token = __use_future_ct<decay_t<_Func>, allocator_type>;\n+\t  return _Token{std::forward<_Func>(__f)};\n+\t}\n+    };\n+\n   constexpr use_future_t<> use_future = use_future_t<>();\n \n   template<typename _Func, typename _Alloc, typename _Res, typename... _Args>\n@@ -1552,6 +1587,12 @@ inline namespace v1\n \t  _M_promise{ std::get<1>(__token._M_t) }\n \t{ }\n \n+      template<typename _Tp>\n+\texplicit\n+\t__use_future_ch(__use_future_ct<_Func, std::allocator<_Tp>>&& __token)\n+\t: _M_f{ std::move(__token._M_f) }\n+\t{ }\n+\n       void\n       operator()(_Args&&... __args)\n       {"}]}