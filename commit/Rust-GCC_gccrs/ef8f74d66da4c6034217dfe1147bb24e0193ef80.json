{"sha": "ef8f74d66da4c6034217dfe1147bb24e0193ef80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY4Zjc0ZDY2ZGE0YzYwMzQyMTdkZmUxMTQ3YmIyNGUwMTkzZWY4MA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2003-09-07T03:43:15Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2003-09-07T03:43:15Z"}, "message": "re PR c++/11507 (parser fails to recognize namespace)\n\n2003-09-06  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR c++/11507\n        * g++.dg/lookup/scoped7.C: New test.\n\n        PR c++/9574\n        * g++.dg/other/static1.C: New test.\n\n        PR c++/11490\n        * g++.dg/warn/template-1.C: New test.\n\n        PR c++/11432\n        * g++.dg/template/crash10.C: New test.\n\n        PR c++/2478\n        * g++.dg/overload/VLA.C: New test.\n\n        PR c++/10804\n        * g++.dg/template/call1.C: New test.\n\nFrom-SVN: r71156", "tree": {"sha": "2ee0b0469d6f58bbe87a5a3498b2b6c216c907ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ee0b0469d6f58bbe87a5a3498b2b6c216c907ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef8f74d66da4c6034217dfe1147bb24e0193ef80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8f74d66da4c6034217dfe1147bb24e0193ef80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef8f74d66da4c6034217dfe1147bb24e0193ef80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8f74d66da4c6034217dfe1147bb24e0193ef80/comments", "author": null, "committer": null, "parents": [{"sha": "9aec989f02e1af104b6c70da8ad4c494e0e81a46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aec989f02e1af104b6c70da8ad4c494e0e81a46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aec989f02e1af104b6c70da8ad4c494e0e81a46"}], "stats": {"total": 112, "additions": 112, "deletions": 0}, "files": [{"sha": "a9d70d06e3be5e48f07fc7761e81dc3a878ddb92", "filename": "gcc/testsuite/g++.dg/lookup/scoped7.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8f74d66da4c6034217dfe1147bb24e0193ef80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8f74d66da4c6034217dfe1147bb24e0193ef80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped7.C?ref=ef8f74d66da4c6034217dfe1147bb24e0193ef80", "patch": "@@ -0,0 +1,20 @@\n+//PR c++/11507\n+// Origin: kai-gcc-bugs@khms.westfalen.de and bangerth@dealii.org\n+//The new parser used to fail on this.\n+\n+// { dg-do compile }\n+\n+namespace NS\n+{\n+  void foo(bool arg1);\n+}\n+\n+namespace M {\n+  namespace K {\n+    bool Bc(bool x);\n+  }\n+\n+  void bar() {\n+    NS::foo (K::Bc(true)); // GCC could not find K or Bc.\n+  }\n+}"}, {"sha": "09e17d4b5ba7d5fc6a2c4580a2dc3a275a5bad51", "filename": "gcc/testsuite/g++.dg/other/static1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8f74d66da4c6034217dfe1147bb24e0193ef80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fstatic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8f74d66da4c6034217dfe1147bb24e0193ef80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fstatic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fstatic1.C?ref=ef8f74d66da4c6034217dfe1147bb24e0193ef80", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/9574\n+// Origin: fche@redhat.com and bangerth@dealii.org\n+// The new parser ICE on this test and then it could \n+//  not find z in bar::bar().\n+\n+// { dg-do compile }\n+\n+struct X {\n+  void operator[](const int& __k);\n+};\n+struct foo {\n+  static X x;\n+};\n+struct bar {\n+  int z;\n+  bar () { foo::x[z]; };\n+};"}, {"sha": "850e19a0054a7997c8cbe9e9bf5020ad87a1aff0", "filename": "gcc/testsuite/g++.dg/overload/VLA.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8f74d66da4c6034217dfe1147bb24e0193ef80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2FVLA.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8f74d66da4c6034217dfe1147bb24e0193ef80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2FVLA.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2FVLA.C?ref=ef8f74d66da4c6034217dfe1147bb24e0193ef80", "patch": "@@ -0,0 +1,16 @@\n+//Origin: kengole@us.ibm.com\n+\n+//PR c++/2478\n+// G++ was rejecting this as it could not convert `int (*)[]' to `int (*)[0]'.\n+// Using the C99 VLA style arrays in a struct.\n+\n+// { dg-do compile }\n+\n+struct {\n+  int (*p)[];\n+} B;\n+\n+void foo() {\n+  int (*p)[];\n+  B.p=p;  // { dg-bogus \"cannot convert\" }\n+}"}, {"sha": "3b6e367af22fdac7974221aebbd372feee77a174", "filename": "gcc/testsuite/g++.dg/template/call1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8f74d66da4c6034217dfe1147bb24e0193ef80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8f74d66da4c6034217dfe1147bb24e0193ef80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall1.C?ref=ef8f74d66da4c6034217dfe1147bb24e0193ef80", "patch": "@@ -0,0 +1,17 @@\n+//Origin: harinath@cs.umn.edu\n+//PR c++/10804\n+// G++ was not emiting the function foo.\n+\n+// { dg-do run }\n+\n+\n+template<class T>\n+struct A\n+{\n+  A() { const void (*a)() = foo; }\n+  static const void foo() {}\n+};\n+int main(int argc, char *argv[])\n+{\n+  A<int> a;\n+}"}, {"sha": "17011f1d400d8c47c7655b2e4770812b88b638ac", "filename": "gcc/testsuite/g++.dg/template/crash10.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8f74d66da4c6034217dfe1147bb24e0193ef80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8f74d66da4c6034217dfe1147bb24e0193ef80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash10.C?ref=ef8f74d66da4c6034217dfe1147bb24e0193ef80", "patch": "@@ -0,0 +1,27 @@\n+//Origin: benko@sztaki.hu\n+//PR c++/11432\n+// The mainline ICE on this one between 2003-01-16 and 2003-07-29.\n+\n+ // { dg-do run }\n+ \n+ extern \"C\" void abort();\n+ \n+ \n+template <int A>\n+struct a\n+{\n+  static int const value = A - 1;\n+};\n+\n+ \n+template <int B>\n+struct b\n+{\n+  static int foo()\n+  {\n+    return a<L>::value;\n+  }\n+\n+ \n+  static int const L = a<B + 1>::value;\n+};"}, {"sha": "04ea5ae323bc7d28df0330e291cfa59fd84d449e", "filename": "gcc/testsuite/g++.dg/warn/template-1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8f74d66da4c6034217dfe1147bb24e0193ef80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Ftemplate-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8f74d66da4c6034217dfe1147bb24e0193ef80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Ftemplate-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Ftemplate-1.C?ref=ef8f74d66da4c6034217dfe1147bb24e0193ef80", "patch": "@@ -0,0 +1,15 @@\n+//Origin: bangerth@dealii.org\n+//PR c++/11490\n+//Since N is know at instantiation time, there\n+// should be no warning about comparision between\n+// unsinged and signed interegers.\n+\n+// { dg-do compile }\n+// { dg-options \"-W\" }\n+\n+template <int N> bool f() {\n+  unsigned int i=0;\n+  return i!=N;  // { dg-bogus \"signed and unsigned\" }\n+}\n+\n+template bool f<2> ();"}]}