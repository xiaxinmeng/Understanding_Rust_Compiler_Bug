{"sha": "4e1eac56b437f28903bfd95daf11fee1c1ca74aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUxZWFjNTZiNDM3ZjI4OTAzYmZkOTVkYWYxMWZlZTFjMWNhNzRhYQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2016-06-21T10:10:46Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-06-21T10:10:46Z"}, "message": "re PR target/71103 (avr-gcc crashes with unrecognizable insn error)\n\n\tPR target/71103\n\t* config/avr/avr.md (movqi): Only handle loading subreg:qi of\n\tconstant addresses if can_create_pseudo_p.\n\nFrom-SVN: r237635", "tree": {"sha": "50ae1d5cfe91fbd874bc9ea33926d28e9a38d373", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50ae1d5cfe91fbd874bc9ea33926d28e9a38d373"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e1eac56b437f28903bfd95daf11fee1c1ca74aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1eac56b437f28903bfd95daf11fee1c1ca74aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e1eac56b437f28903bfd95daf11fee1c1ca74aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1eac56b437f28903bfd95daf11fee1c1ca74aa/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ad84f34fc91885b187c302c8abf1dd6bae4a671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad84f34fc91885b187c302c8abf1dd6bae4a671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ad84f34fc91885b187c302c8abf1dd6bae4a671"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "7927454fdbaa9de9fe234dbbdf21236d80a278c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1eac56b437f28903bfd95daf11fee1c1ca74aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1eac56b437f28903bfd95daf11fee1c1ca74aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e1eac56b437f28903bfd95daf11fee1c1ca74aa", "patch": "@@ -1,3 +1,9 @@\n+2016-06-21  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/71103\n+\t* config/avr/avr.md (movqi): Only handle loading subreg:qi of\n+\tconstant addresses if can_create_pseudo_p.\n+\n 2016-06-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/71588"}, {"sha": "98951865b1e7d6a5c332ba233b7833a8271e86d8", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1eac56b437f28903bfd95daf11fee1c1ca74aa/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1eac56b437f28903bfd95daf11fee1c1ca74aa/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=4e1eac56b437f28903bfd95daf11fee1c1ca74aa", "patch": "@@ -643,8 +643,9 @@\n \n     if (QImode == <MODE>mode\n         && SUBREG_P (src)\n-        && CONSTANT_ADDRESS_P (SUBREG_REG (src)))\n-    {\n+        && CONSTANT_ADDRESS_P (SUBREG_REG (src))\n+        && can_create_pseudo_p())\n+      {\n         // store_bitfield may want to store a SYMBOL_REF or CONST in a\n         // structure that's represented as PSImode.  As the upper 16 bits\n         // of PSImode cannot be expressed as an HImode subreg, the rhs is"}]}