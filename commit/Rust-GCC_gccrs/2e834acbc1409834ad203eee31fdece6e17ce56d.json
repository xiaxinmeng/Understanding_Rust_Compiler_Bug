{"sha": "2e834acbc1409834ad203eee31fdece6e17ce56d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU4MzRhY2JjMTQwOTgzNGFkMjAzZWVlMzFmZGVjZTZlMTdjZTU2ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-02-19T13:34:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-02-19T13:34:29Z"}, "message": "re PR target/35239 (Build failure when host cc is GCC-2.95.3 or earlier)\n\n\tPR target/35239\n\t* config/i386/cpuid.h (__cpuid, __get_cpuid_max): Use special\n\t32-bit inline asm without asm alternatives for host GCC < 3.0.\n\nFrom-SVN: r132430", "tree": {"sha": "90a7a6dd0d6601e827a549ffa825f2179e64e5d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90a7a6dd0d6601e827a549ffa825f2179e64e5d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e834acbc1409834ad203eee31fdece6e17ce56d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e834acbc1409834ad203eee31fdece6e17ce56d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e834acbc1409834ad203eee31fdece6e17ce56d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e834acbc1409834ad203eee31fdece6e17ce56d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9cadd7f79554bd1029725d368760402bf09d506f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cadd7f79554bd1029725d368760402bf09d506f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cadd7f79554bd1029725d368760402bf09d506f"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "97587c7321ac0cabad24703cfe45fa6920e0d5da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e834acbc1409834ad203eee31fdece6e17ce56d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e834acbc1409834ad203eee31fdece6e17ce56d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e834acbc1409834ad203eee31fdece6e17ce56d", "patch": "@@ -1,3 +1,9 @@\n+2008-02-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/35239\n+\t* config/i386/cpuid.h (__cpuid, __get_cpuid_max): Use special\n+\t32-bit inline asm without asm alternatives for host GCC < 3.0.\n+\n 2008-02-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/34989"}, {"sha": "29abac734dbbc5adb867e58c5bbf0d91cff44e93", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e834acbc1409834ad203eee31fdece6e17ce56d/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e834acbc1409834ad203eee31fdece6e17ce56d/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=2e834acbc1409834ad203eee31fdece6e17ce56d", "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2007 Free Software Foundation, Inc.\n+ * Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n  *\n  * This file is free software; you can redistribute it and/or modify it\n  * under the terms of the GNU General Public License as published by the\n@@ -61,13 +61,24 @@\n \n #if defined(__i386__) && defined(__PIC__)\n /* %ebx may be the PIC register.  */\n+#if __GNUC__ >= 3\n #define __cpuid(level, a, b, c, d)\t\t\t\\\n   __asm__ (\"xchg{l}\\t{%%}ebx, %1\\n\\t\"\t\t\t\\\n \t   \"cpuid\\n\\t\"\t\t\t\t\t\\\n \t   \"xchg{l}\\t{%%}ebx, %1\\n\\t\"\t\t\t\\\n \t   : \"=a\" (a), \"=r\" (b), \"=c\" (c), \"=d\" (d)\t\\\n \t   : \"0\" (level))\n #else\n+/* Host GCCs older than 3.0 weren't supporting Intel asm syntax\n+   nor alternatives in i386 code.  */\n+#define __cpuid(level, a, b, c, d)\t\t\t\\\n+  __asm__ (\"xchgl\\t%%ebx, %1\\n\\t\"\t\t\t\\\n+\t   \"cpuid\\n\\t\"\t\t\t\t\t\\\n+\t   \"xchgl\\t%%ebx, %1\\n\\t\"\t\t\t\\\n+\t   : \"=a\" (a), \"=r\" (b), \"=c\" (c), \"=d\" (d)\t\\\n+\t   : \"0\" (level))\n+#endif\n+#else\n #define __cpuid(level, a, b, c, d)\t\t\t\\\n   __asm__ (\"cpuid\\n\\t\"\t\t\t\t\t\\\n \t   : \"=a\" (a), \"=b\" (b), \"=c\" (c), \"=d\" (d)\t\\\n@@ -87,6 +98,7 @@ __get_cpuid_max (unsigned int __ext, unsigned int *__sig)\n   unsigned int __eax, __ebx, __ecx, __edx;\n \n #ifndef __x86_64__\n+#if __GNUC__ >= 3\n   /* See if we can use cpuid.  On AMD64 we always can.  */\n   __asm__ (\"pushf{l|d}\\n\\t\"\n \t   \"pushf{l|d}\\n\\t\"\n@@ -100,6 +112,22 @@ __get_cpuid_max (unsigned int __ext, unsigned int *__sig)\n \t   \"popf{l|d}\\n\\t\"\n \t   : \"=&r\" (__eax), \"=&r\" (__ebx)\n \t   : \"i\" (0x00200000));\n+#else\n+/* Host GCCs older than 3.0 weren't supporting Intel asm syntax\n+   nor alternatives in i386 code.  */\n+  __asm__ (\"pushfl\\n\\t\"\n+\t   \"pushfl\\n\\t\"\n+\t   \"popl\\t%0\\n\\t\"\n+\t   \"movl\\t%0, %1\\n\\t\"\n+\t   \"xorl\\t%2, %0\\n\\t\"\n+\t   \"pushl\\t%0\\n\\t\"\n+\t   \"popfl\\n\\t\"\n+\t   \"pushfl\\n\\t\"\n+\t   \"popl\\t%0\\n\\t\"\n+\t   \"popfl\\n\\t\"\n+\t   : \"=&r\" (__eax), \"=&r\" (__ebx)\n+\t   : \"i\" (0x00200000));\n+#endif\n \n   if (!((__eax ^ __ebx) & 0x00200000))\n     return 0;"}]}