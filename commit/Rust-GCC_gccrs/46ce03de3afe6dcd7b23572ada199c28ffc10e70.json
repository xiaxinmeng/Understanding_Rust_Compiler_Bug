{"sha": "46ce03de3afe6dcd7b23572ada199c28ffc10e70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZjZTAzZGUzYWZlNmRjZDdiMjM1NzJhZGExOTljMjhmZmMxMGU3MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-11-19T08:27:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-11-19T08:27:12Z"}, "message": "re PR preprocessor/60736 (Crash in preprocessor including stdc-predef.h when it does not exist on glibc-based systems)\n\n\tPR preprocessor/60736\n\t* include/cpplib.h (cpp_errno_filename): New prototype.\n\t* errors.c (cpp_errno): Don't handle msgid \"\" specially, use\n\t_(msgid) instead of msgid as argument to cpp_error.\n\t(cpp_errno_filename): New function.\n\t* files.c (read_file_guts): Use cpp_errno_filename instead of\n\tcpp_errno.\n\t(open_file_failed): Likewise.  Use file->name if file->path is NULL\n\tin diagnostics.\n\nFrom-SVN: r230591", "tree": {"sha": "5835d3decb0a09480820c64a42a01462dccceb96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5835d3decb0a09480820c64a42a01462dccceb96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46ce03de3afe6dcd7b23572ada199c28ffc10e70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ce03de3afe6dcd7b23572ada199c28ffc10e70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ce03de3afe6dcd7b23572ada199c28ffc10e70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ce03de3afe6dcd7b23572ada199c28ffc10e70/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee1326921d7cb8645bed87b2d9b71f1f74eb6605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1326921d7cb8645bed87b2d9b71f1f74eb6605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee1326921d7cb8645bed87b2d9b71f1f74eb6605"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "ce294ae88abd21dae6fe45217bf5c2180bc3038d", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ce03de3afe6dcd7b23572ada199c28ffc10e70/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ce03de3afe6dcd7b23572ada199c28ffc10e70/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=46ce03de3afe6dcd7b23572ada199c28ffc10e70", "patch": "@@ -1,3 +1,15 @@\n+2015-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/60736\n+\t* include/cpplib.h (cpp_errno_filename): New prototype.\n+\t* errors.c (cpp_errno): Don't handle msgid \"\" specially, use\n+\t_(msgid) instead of msgid as argument to cpp_error.\n+\t(cpp_errno_filename): New function.\n+\t* files.c (read_file_guts): Use cpp_errno_filename instead of\n+\tcpp_errno.\n+\t(open_file_failed): Likewise.  Use file->name if file->path is NULL\n+\tin diagnostics.\n+\n 2015-11-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* errors.c (cpp_diagnostic): Pass pfile->line_table to"}, {"sha": "c27a417e8860987b38d417dfea6ae3ff8e8481fb", "filename": "libcpp/errors.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ce03de3afe6dcd7b23572ada199c28ffc10e70/libcpp%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ce03de3afe6dcd7b23572ada199c28ffc10e70/libcpp%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ferrors.c?ref=46ce03de3afe6dcd7b23572ada199c28ffc10e70", "patch": "@@ -230,8 +230,18 @@ cpp_warning_with_line_syshdr (cpp_reader *pfile, int reason,\n bool\n cpp_errno (cpp_reader *pfile, int level, const char *msgid)\n {\n-  if (msgid[0] == '\\0')\n-    msgid = _(\"stdout\");\n+  return cpp_error (pfile, level, \"%s: %s\", _(msgid), xstrerror (errno));\n+}\n+\n+/* Print a warning or error, depending on the value of LEVEL.  Include\n+   information from errno.  Unlike cpp_errno, the argument is a filename\n+   that is not localized, but \"\" is replaced with localized \"stdout\".  */\n+\n+bool\n+cpp_errno_filename (cpp_reader *pfile, int level, const char *filename)\n+{\n+  if (filename[0] == '\\0')\n+    filename = _(\"stdout\");\n \n-  return cpp_error (pfile, level, \"%s: %s\", msgid, xstrerror (errno));\n+  return cpp_error (pfile, level, \"%s: %s\", filename, xstrerror (errno));\n }"}, {"sha": "5f532d35baa23e265e098237ac9cf36af430ded3", "filename": "libcpp/files.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ce03de3afe6dcd7b23572ada199c28ffc10e70/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ce03de3afe6dcd7b23572ada199c28ffc10e70/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=46ce03de3afe6dcd7b23572ada199c28ffc10e70", "patch": "@@ -715,7 +715,7 @@ read_file_guts (cpp_reader *pfile, _cpp_file *file)\n \n   if (count < 0)\n     {\n-      cpp_errno (pfile, CPP_DL_ERROR, file->path);\n+      cpp_errno_filename (pfile, CPP_DL_ERROR, file->path);\n       free (buf);\n       return false;\n     }\n@@ -1053,7 +1053,8 @@ open_file_failed (cpp_reader *pfile, _cpp_file *file, int angle_brackets)\n       /* If the preprocessor output (other than dependency information) is\n          being used, we must also flag an error.  */\n       if (CPP_OPTION (pfile, deps.need_preprocessor_output))\n-\tcpp_errno (pfile, CPP_DL_FATAL, file->path);\n+\tcpp_errno_filename (pfile, CPP_DL_FATAL,\n+\t\t\t    file->path ? file->path : file->name);\n     }\n   else\n     {\n@@ -1067,9 +1068,11 @@ open_file_failed (cpp_reader *pfile, _cpp_file *file, int angle_brackets)\n       if (CPP_OPTION (pfile, deps.style) == DEPS_NONE\n           || print_dep\n           || CPP_OPTION (pfile, deps.need_preprocessor_output))\n-\tcpp_errno (pfile, CPP_DL_FATAL, file->path);\n+\tcpp_errno_filename (pfile, CPP_DL_FATAL,\n+\t\t\t    file->path ? file->path : file->name);\n       else\n-\tcpp_errno (pfile, CPP_DL_WARNING, file->path);\n+\tcpp_errno_filename (pfile, CPP_DL_WARNING,\n+\t\t\t    file->path ? file->path : file->name);\n     }\n }\n "}, {"sha": "3cb8cce3dfad59720e1dbfffcd2d32e8a259fef8", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ce03de3afe6dcd7b23572ada199c28ffc10e70/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ce03de3afe6dcd7b23572ada199c28ffc10e70/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=46ce03de3afe6dcd7b23572ada199c28ffc10e70", "patch": "@@ -986,6 +986,9 @@ extern bool cpp_warning_syshdr (cpp_reader *, int, const char *msgid, ...)\n /* Output a diagnostic with \"MSGID: \" preceding the\n    error string of errno.  No location is printed.  */\n extern bool cpp_errno (cpp_reader *, int, const char *msgid);\n+/* Similarly, but with \"FILENAME: \" instead of \"MSGID: \", where\n+   the filename is not localized.  */\n+extern bool cpp_errno_filename (cpp_reader *, int, const char *filename);\n \n /* Same as cpp_error, except additionally specifies a position as a\n    (translation unit) physical line and physical column.  If the line is"}]}