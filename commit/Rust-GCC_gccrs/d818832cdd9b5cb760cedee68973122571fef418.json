{"sha": "d818832cdd9b5cb760cedee68973122571fef418", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgxODgzMmNkZDliNWNiNzYwY2VkZWU2ODk3MzEyMjU3MWZlZjQxOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-05-04T13:56:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-05-04T13:56:52Z"}, "message": "re PR tree-optimization/14287 ([tree-ssa] does not remove unnecessary extensions)\n\n2006-05-04  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/14287\n\tPR tree-optimization/14844\n\tPR tree-optimization/19792\n\tPR tree-optimization/21608\n\tPR tree-optimization/27090\n\t* tree-ssa-pre.c (try_combine_conversion): New function.\n\t(compute_avail): After constructing the value-handle\n\texpression, use try_combine_conversion to combine NOP_EXPRs\n\twith previous value-handle expressions and use the result if it\n\tis available.\n\n\t* gcc.dg/tree-ssa/ssa-fre-1.c: New testcase.\n\t* gcc.dg/tree-ssa/ssa-fre-2.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-fre-3.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-fre-4.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-fre-5.c: Likewise.\n\nFrom-SVN: r113527", "tree": {"sha": "6d24795e20725440defd44c1ddfb42297faca758", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d24795e20725440defd44c1ddfb42297faca758"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d818832cdd9b5cb760cedee68973122571fef418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d818832cdd9b5cb760cedee68973122571fef418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d818832cdd9b5cb760cedee68973122571fef418", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d818832cdd9b5cb760cedee68973122571fef418/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f72054bca49e903fd3e01ad86f25d0c5ae391e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f72054bca49e903fd3e01ad86f25d0c5ae391e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f72054bca49e903fd3e01ad86f25d0c5ae391e8"}], "stats": {"total": 156, "additions": 153, "deletions": 3}, "files": [{"sha": "cc1c2efe4a0e76bf110b63bcef1a3207a05e8432", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d818832cdd9b5cb760cedee68973122571fef418/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d818832cdd9b5cb760cedee68973122571fef418/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d818832cdd9b5cb760cedee68973122571fef418", "patch": "@@ -1,3 +1,16 @@\n+2006-05-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/14287\n+\tPR tree-optimization/14844\n+\tPR tree-optimization/19792\n+\tPR tree-optimization/21608\n+\tPR tree-optimization/27090\n+\t* tree-ssa-pre.c (try_combine_conversion): New function.\n+\t(compute_avail): After constructing the value-handle\n+\texpression, use try_combine_conversion to combine NOP_EXPRs\n+\twith previous value-handle expressions and use the result if it\n+\tis available.\n+\n 2006-05-04  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* config/mips/linux64.h (DWARF_OFFSET_SIZE): Remove."}, {"sha": "c6077c434c4b33a957b7dea8859f914f67e5c9c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d818832cdd9b5cb760cedee68973122571fef418/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d818832cdd9b5cb760cedee68973122571fef418/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d818832cdd9b5cb760cedee68973122571fef418", "patch": "@@ -1,3 +1,16 @@\n+2006-05-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/14287\n+\tPR tree-optimization/14844\n+\tPR tree-optimization/19792\n+\tPR tree-optimization/21608\n+\tPR tree-optimization/27090\n+\t* gcc.dg/tree-ssa/ssa-fre-1.c: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-fre-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-fre-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-fre-4.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-fre-5.c: Likewise.\n+\n 2006-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/27285"}, {"sha": "0cb63242c0e9a6f5079d0153e737b34a944596c3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d818832cdd9b5cb760cedee68973122571fef418/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d818832cdd9b5cb760cedee68973122571fef418/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-1.c?ref=d818832cdd9b5cb760cedee68973122571fef418", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre-details\" } */\n+\n+/* From PR27090.  */\n+\n+int f(int *a)\n+{\n+  int t = *a;\n+  unsigned *b = (unsigned *)a;\n+  int *c = (int*)b;\n+  return *c + t;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\(int \\\\\\*\\\\\\) b_.*with a_\" \"fre\" } } */\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\*c_.*with t_\" \"fre\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "d1eabf69bae5b5059f629ac385fb2e7049d31910", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d818832cdd9b5cb760cedee68973122571fef418/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d818832cdd9b5cb760cedee68973122571fef418/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-2.c?ref=d818832cdd9b5cb760cedee68973122571fef418", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre-details\" } */\n+\n+/* From PR14287.  */\n+\n+short g, h;\n+\n+void\n+foo (long a)\n+{\n+  short b = a & 3;\n+  long c = b;\n+  g = c;\n+  h = c;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\(short int\\\\\\) c_.*with b_\" \"fre\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "ebc91e775183a3726a2b4d371679c3d2c894b8ad", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d818832cdd9b5cb760cedee68973122571fef418/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d818832cdd9b5cb760cedee68973122571fef418/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c?ref=d818832cdd9b5cb760cedee68973122571fef418", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fwrapv -fdump-tree-fre-details\" } */\n+\n+/* From PR14844.  */\n+\n+int\n+foo (int a, int b)\n+{\n+  long long aa = a;\n+  long long bb = b;\n+  return aa + bb;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\(int\\\\\\) aa_.*with a_\" \"fre\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "0d80f02b330c9124c64e600575f1771e7a23a294", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d818832cdd9b5cb760cedee68973122571fef418/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d818832cdd9b5cb760cedee68973122571fef418/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-4.c?ref=d818832cdd9b5cb760cedee68973122571fef418", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre-details\" } */\n+\n+/* From PR21608.  */\n+\n+#define bool _Bool\n+static inline bool wrap(bool f) { return f; }\n+bool bar(bool f)\n+{\n+        return wrap(f);\n+}\n+\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\(_Bool\\\\\\) D.*with f_\" \"fre\" } } */\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\(int\\\\\\) f_.*with D\" \"fre\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "7ef20c2214d01fa54e029832936fde372d221138", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d818832cdd9b5cb760cedee68973122571fef418/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d818832cdd9b5cb760cedee68973122571fef418/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-5.c?ref=d818832cdd9b5cb760cedee68973122571fef418", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre-details\" } */\n+\n+/* From PR19792.  */\n+\n+int\n+bar (unsigned int t)\n+{\n+  int a = t;\n+  return a == t;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\(unsigned int\\\\\\) a_.*with t_\" \"fre\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "08f0930621cf4d2760884742d9d4b80cb7f2009f", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d818832cdd9b5cb760cedee68973122571fef418/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d818832cdd9b5cb760cedee68973122571fef418/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=d818832cdd9b5cb760cedee68973122571fef418", "patch": "@@ -3309,6 +3309,42 @@ realify_fake_stores (void)\n     }\n }\n \n+/* Tree-combine a value number expression *EXPR_P that does a type\n+   conversion with the value number expression of its operand.\n+   Returns true, if *EXPR_P simplifies to a value number or\n+   gimple min-invariant expression different from EXPR_P and\n+   sets *EXPR_P to the simplified expression value number.\n+   Otherwise returns false and does not change *EXPR_P.  */\n+\n+static bool\n+try_combine_conversion (tree *expr_p)\n+{\n+  tree expr = *expr_p;\n+  tree t;\n+\n+  if (!((TREE_CODE (expr) == NOP_EXPR\n+\t || TREE_CODE (expr) == CONVERT_EXPR)\n+\t&& TREE_CODE (TREE_OPERAND (expr, 0)) == VALUE_HANDLE\n+\t&& !VALUE_HANDLE_VUSES (TREE_OPERAND (expr, 0))))\n+    return false;\n+\n+  t = fold_unary (TREE_CODE (expr), TREE_TYPE (expr),\n+\t\t  VALUE_HANDLE_EXPR_SET (TREE_OPERAND (expr, 0))->head->expr);\n+\n+  /* Disallow value expressions we have no value number for already, as\n+     we would miss a leader for it here.  */\n+  if (t\n+      && !(TREE_CODE (t) == VALUE_HANDLE\n+\t   || is_gimple_min_invariant (t)))\n+    t = vn_lookup (t, NULL);\n+\n+  if (t && t != expr)\n+    {\n+      *expr_p = t;\n+      return true;\n+    }\n+  return false;\n+}\n \n /* Compute the AVAIL set for all basic blocks.\n \n@@ -3433,9 +3469,19 @@ compute_avail (void)\n \t\t  tree newt = create_value_expr_from (rhs, block, stmt);\n \t\t  if (newt)\n \t\t    {\n-\t\t      add_to_sets (lhs, newt, stmt, TMP_GEN (block),\n-\t\t\t\t   AVAIL_OUT (block));\n-\t\t      value_insert_into_set (EXP_GEN (block), newt);\n+\t\t      /* If we can combine a conversion expression\n+\t\t\t with the expression for its operand just\n+\t\t\t record the value number for it.  */\n+\t\t      if (try_combine_conversion (&newt))\n+\t\t\tvn_add (lhs, newt);\n+\t\t      else\n+\t\t\t{\n+\t\t\t  tree val = vn_lookup_or_add (newt, stmt);\n+\t\t\t  vn_add (lhs, val);\n+\t\t\t  value_insert_into_set (EXP_GEN (block), newt);\n+\t\t\t}\n+\t\t      bitmap_insert_into_set (TMP_GEN (block), lhs);\n+\t\t      bitmap_value_insert_into_set (AVAIL_OUT (block), lhs);\n \t\t      continue;\n \t\t    }\n \t\t}"}]}