{"sha": "97919ae7b65c192b0fdb6dfa6abdebd63a3f4ba9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc5MTlhZTdiNjVjMTkyYjBmZGI2ZGZhNmFiZGViZDYzYTNmNGJhOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-08-18T08:33:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-08-18T08:33:21Z"}, "message": "expr.c (get_inner_reference): Sign-extend the constant twos-complement offset before doing arbitrary...\n\n2011-08-18  Richard Guenther  <rguenther@suse.de>\n\n\t* expr.c (get_inner_reference): Sign-extend the constant\n\ttwos-complement offset before doing arbitrary precision\n\tarithmetic on it.\n\t* tree-ssa-structalias.c (get_constraint_for_ptr_offset): Likewise.\n\t(get_constraint_for_1): Pass the offset of a MEM_REF unchanged\n\tto get_constraint_for_ptr_offset.\n\nFrom-SVN: r177847", "tree": {"sha": "72321f7542701e8f11e627c812fb466857e6393f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72321f7542701e8f11e627c812fb466857e6393f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97919ae7b65c192b0fdb6dfa6abdebd63a3f4ba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97919ae7b65c192b0fdb6dfa6abdebd63a3f4ba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97919ae7b65c192b0fdb6dfa6abdebd63a3f4ba9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97919ae7b65c192b0fdb6dfa6abdebd63a3f4ba9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "55715096b51c2cb7e9a9cd03bd562301b7867051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55715096b51c2cb7e9a9cd03bd562301b7867051", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55715096b51c2cb7e9a9cd03bd562301b7867051"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "8e768f8538ab0a3410ed218b4af5671eb5129b75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919ae7b65c192b0fdb6dfa6abdebd63a3f4ba9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919ae7b65c192b0fdb6dfa6abdebd63a3f4ba9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97919ae7b65c192b0fdb6dfa6abdebd63a3f4ba9", "patch": "@@ -1,3 +1,12 @@\n+2011-08-18  Richard Guenther  <rguenther@suse.de>\n+\n+\t* expr.c (get_inner_reference): Sign-extend the constant\n+\ttwos-complement offset before doing arbitrary precision\n+\tarithmetic on it.\n+\t* tree-ssa-structalias.c (get_constraint_for_ptr_offset): Likewise.\n+\t(get_constraint_for_1): Pass the offset of a MEM_REF unchanged\n+\tto get_constraint_for_ptr_offset.\n+\n 2011-08-17  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR target/50068"}, {"sha": "6fb82ae9e2a394ec5b2f98e13f5c3ae62c9a0cf8", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919ae7b65c192b0fdb6dfa6abdebd63a3f4ba9/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919ae7b65c192b0fdb6dfa6abdebd63a3f4ba9/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=97919ae7b65c192b0fdb6dfa6abdebd63a3f4ba9", "patch": "@@ -6502,12 +6502,14 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n   /* If OFFSET is constant, see if we can return the whole thing as a\n      constant bit position.  Make sure to handle overflow during\n      this conversion.  */\n-  if (host_integerp (offset, 0))\n-    {\n-      double_int tem = double_int_lshift (tree_to_double_int (offset),\n-\t\t\t\t\t  BITS_PER_UNIT == 8\n-\t\t\t\t\t  ? 3 : exact_log2 (BITS_PER_UNIT),\n-\t\t\t\t\t  HOST_BITS_PER_DOUBLE_INT, true);\n+  if (TREE_CODE (offset) == INTEGER_CST)\n+    {\n+      double_int tem = tree_to_double_int (offset);\n+      tem = double_int_sext (tem, TYPE_PRECISION (sizetype));\n+      tem = double_int_lshift (tree_to_double_int (offset),\n+\t\t\t       BITS_PER_UNIT == 8\n+\t\t\t       ? 3 : exact_log2 (BITS_PER_UNIT),\n+\t\t\t       HOST_BITS_PER_DOUBLE_INT, true);\n       tem = double_int_add (tem, bit_offset);\n       if (double_int_fits_in_shwi_p (tem))\n \t{"}, {"sha": "d69f14c3fd5093450a5d6f90473d5f03c39aaab4", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919ae7b65c192b0fdb6dfa6abdebd63a3f4ba9/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919ae7b65c192b0fdb6dfa6abdebd63a3f4ba9/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=97919ae7b65c192b0fdb6dfa6abdebd63a3f4ba9", "patch": "@@ -2876,7 +2876,7 @@ get_constraint_for_ptr_offset (tree ptr, tree offset,\n {\n   struct constraint_expr c;\n   unsigned int j, n;\n-  HOST_WIDE_INT rhsunitoffset, rhsoffset;\n+  HOST_WIDE_INT rhsoffset;\n \n   /* If we do not do field-sensitive PTA adding offsets to pointers\n      does not change the points-to solution.  */\n@@ -2891,15 +2891,24 @@ get_constraint_for_ptr_offset (tree ptr, tree offset,\n      solution which includes all sub-fields of all pointed-to\n      variables of ptr.  */\n   if (offset == NULL_TREE\n-      || !host_integerp (offset, 0))\n+      || TREE_CODE (offset) != INTEGER_CST)\n     rhsoffset = UNKNOWN_OFFSET;\n   else\n     {\n-      /* Make sure the bit-offset also fits.  */\n-      rhsunitoffset = TREE_INT_CST_LOW (offset);\n-      rhsoffset = rhsunitoffset * BITS_PER_UNIT;\n-      if (rhsunitoffset != rhsoffset / BITS_PER_UNIT)\n+      /* Sign-extend the offset.  */\n+      double_int soffset\n+\t= double_int_sext (tree_to_double_int (offset),\n+\t\t\t   TYPE_PRECISION (TREE_TYPE (offset)));\n+      if (!double_int_fits_in_shwi_p (soffset))\n \trhsoffset = UNKNOWN_OFFSET;\n+      else\n+\t{\n+\t  /* Make sure the bit-offset also fits.  */\n+\t  HOST_WIDE_INT rhsunitoffset = soffset.low;\n+\t  rhsoffset = rhsunitoffset * BITS_PER_UNIT;\n+\t  if (rhsunitoffset != rhsoffset / BITS_PER_UNIT)\n+\t    rhsoffset = UNKNOWN_OFFSET;\n+\t}\n     }\n \n   get_constraint_for_rhs (ptr, results);\n@@ -3260,8 +3269,8 @@ get_constraint_for_1 (tree t, VEC (ce_s, heap) **results, bool address_p,\n \t    {\n \t      struct constraint_expr cs;\n \t      varinfo_t vi, curr;\n-\t      tree off = convert_to_ptrofftype (TREE_OPERAND (t, 1));\n-\t      get_constraint_for_ptr_offset (TREE_OPERAND (t, 0), off, results);\n+\t      get_constraint_for_ptr_offset (TREE_OPERAND (t, 0),\n+\t\t\t\t\t     TREE_OPERAND (t, 1), results);\n \t      do_deref (results);\n \n \t      /* If we are not taking the address then make sure to process"}]}