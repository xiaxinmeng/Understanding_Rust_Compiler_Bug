{"sha": "d9450aa0e8b70f2362925cbcac8a29733899d37f", "node_id": "C_kwDOANBUbNoAKGQ5NDUwYWEwZThiNzBmMjM2MjkyNWNiY2FjOGEyOTczMzg5OWQzN2Y", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-11T00:16:36Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-11T00:16:36Z"}, "message": "Daily bump.", "tree": {"sha": "305172f8d1320f8f82921a28dc576c700f516606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/305172f8d1320f8f82921a28dc576c700f516606"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9450aa0e8b70f2362925cbcac8a29733899d37f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9450aa0e8b70f2362925cbcac8a29733899d37f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9450aa0e8b70f2362925cbcac8a29733899d37f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9450aa0e8b70f2362925cbcac8a29733899d37f/comments", "author": null, "committer": null, "parents": [{"sha": "04a745556021b7a1c6e81a41d0a12b60a4d9475d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a745556021b7a1c6e81a41d0a12b60a4d9475d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a745556021b7a1c6e81a41d0a12b60a4d9475d"}], "stats": {"total": 404, "additions": 403, "deletions": 1}, "files": [{"sha": "b375cedf373c951b4ca403877d1fc637529a1edd", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9450aa0e8b70f2362925cbcac8a29733899d37f/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9450aa0e8b70f2362925cbcac8a29733899d37f/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=d9450aa0e8b70f2362925cbcac8a29733899d37f", "patch": "@@ -1,3 +1,7 @@\n+2022-01-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* MAINTAINERS: Fix obvious issues with sorting.\n+\n 2022-01-07  liuhongt  <hongtao.liu@intel.com>\n \n \t* build.log: New file."}, {"sha": "21ad9afa6f18e8a15851f0f979f60ea7ce6ecfc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9450aa0e8b70f2362925cbcac8a29733899d37f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9450aa0e8b70f2362925cbcac8a29733899d37f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9450aa0e8b70f2362925cbcac8a29733899d37f", "patch": "@@ -1,3 +1,131 @@\n+2022-01-10  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/103861\n+\t* config/i386/i386-expand.c (ix86_expand_int_sse_cmp):\n+\tHandle V2QImode.\n+\t* config/i386/mmx.md (<sat_plusminus:insn><mode>3):\n+\tUse VI1_16_32 mode iterator.\n+\t(*eq<mode>3): Ditto.\n+\t(*gt<mode>3): Ditto.\n+\t(*xop_maskcmp<mode>3): Ditto.\n+\t(*xop_maskcmp_uns<mode>3): Ditto.\n+\t(vec_cmp<mode><mode>): Ditto.\n+\t(vec_cmpu<mode><mode>): Ditto.\n+\n+2022-01-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103948\n+\t* tree-vect-generic.c (expand_vector_condition): Return true if\n+\tall ones vector is returned for true, all zeros vector for false\n+\tand the target defines corresponding vec_cmp{,u}MN named RTX pattern.\n+\n+2022-01-10  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* config/rs6000/smmintrin.h (_mm_blendv_epi8): Use vec_blendv\n+\twhen _ARCH_PWR10. Use signed types.\n+\t(_mm_blendv_ps): Use vec_blendv when _ARCH_PWR10.\n+\t(_mm_blendv_pd): Likewise.\n+\n+2022-01-10  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* tree-vectorizer.c (better_epilogue_loop_than_p): Round factors up for\n+\tepilogue costing.\n+\t* tree-vect-loop.c (vect_analyze_loop): Re-analyze all modes for\n+\tepilogues, unless we are guaranteed that we can't have partial vectors.\n+\t* genopinit.c: (partial_vectors_supported): Generate new function.\n+\n+2022-01-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/102024\n+\t* config/i386/i386.c (classify_argument): Add zero_width_bitfields\n+\targument, when seeing DECL_FIELD_CXX_ZERO_WIDTH_BIT_FIELD bitfields,\n+\talways ignore them, when seeing other zero sized bitfields, either\n+\tset zero_width_bitfields to 1 and ignore it or if equal to 2 process\n+\tit.  Pass it to recursive calls.  Add wrapper\n+\twith old arguments and diagnose ABI differences for C structures\n+\twith zero width bitfields.  Formatting fixes.\n+\n+2022-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/98782\n+\t* ira-int.h (ira_soft_conflict): Declare.\n+\t* ira-color.c (max_soft_conflict_loop_depth): New constant.\n+\t(ira_soft_conflict): New function.\n+\t(spill_soft_conflicts): Likewise.\n+\t(assign_hard_reg): Use them to handle the case described by\n+\tthe comment above ira_soft_conflict.\n+\t(improve_allocation): Likewise.\n+\t* ira.c (check_allocation): Allow allocnos with \"soft\" conflicts\n+\tto share the same register.\n+\n+2022-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/98782\n+\t* ira-int.h (ira_caller_save_cost): New function.\n+\t(ira_caller_save_loop_spill_p): Likewise.\n+\t* ira-build.c (ira_propagate_hard_reg_costs): Test whether it is\n+\tcheaper to spill a call-clobbered register throughout a loop rather\n+\tthan spill it around each individual call.  If so, treat all\n+\tcall-clobbered registers as conflicts and...\n+\t(propagate_allocno_info): ...do not propagate call information\n+\tfrom the child to the parent.\n+\t* ira-color.c (move_spill_restore): Update accordingly.\n+\t* ira-costs.c (ira_tune_allocno_costs): Use ira_caller_save_cost.\n+\n+2022-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/98782\n+\t* ira-int.h (ira_allocno::might_conflict_with_parent_p): New field.\n+\t(ALLOCNO_MIGHT_CONFLICT_WITH_PARENT_P): New macro.\n+\t(ira_single_region_allocno_p): New function.\n+\t(ira_total_conflict_hard_regs): Likewise.\n+\t* ira-build.c (ira_create_allocno): Initialize\n+\tALLOCNO_MIGHT_CONFLICT_WITH_PARENT_P.\n+\t(ira_propagate_hard_reg_costs): New function.\n+\t(propagate_allocno_info): Use it.  Try to avoid propagating\n+\thard register conflicts to parent allocnos if we can handle\n+\tthe conflicts by spilling instead.  Limit the propagated\n+\tregister costs to the cost of spilling throughout the child loop.\n+\t* ira-color.c (color_pass): Use ira_single_region_allocno_p to\n+\ttest whether a child and parent allocno can share the same\n+\tregister.\n+\t(move_spill_restore): Adjust for the new behavior of\n+\tpropagate_allocno_info.\n+\n+2022-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/98782\n+\t* ira-int.h (ira_subloop_allocnos_can_differ_p): New function,\n+\textracted from...\n+\t* ira-color.c (color_pass): ...here.\n+\n+2022-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/98782\n+\t* ira-color.c (color_pass): Add comments to describe the spill costs.\n+\t(move_spill_restore): Likewise.  Fix reversed calculation.\n+\n+2022-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/98782\n+\t* ira-int.h (ira_loop_border_costs): New class.\n+\t* ira-color.c (ira_loop_border_costs::ira_loop_border_costs):\n+\tNew constructor.\n+\t(calculate_allocno_spill_cost): Use ira_loop_border_costs.\n+\t(color_pass): Likewise.\n+\t(move_spill_restore): Likewise.\n+\n+2022-01-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/103465\n+\t* coretypes.h (unwind_info_type): Swap UI_SEH and UI_TARGET.\n+\n+2022-01-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100359\n+\t* tree-ssa-loop-ivcanon.c (try_unroll_loop_completely):\n+\tAllow non-growing peeling with !allow_peel and UL_ALL.\n+\n 2022-01-08  Roger Sayle  <roger@nextmovesoftware.com>\n \n \t* config/i386/i386-expand.c (ix86_expand_vector_move): Add"}, {"sha": "9de7ada22f139016a57577acc13c9d8bb70be596", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9450aa0e8b70f2362925cbcac8a29733899d37f/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9450aa0e8b70f2362925cbcac8a29733899d37f/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=d9450aa0e8b70f2362925cbcac8a29733899d37f", "patch": "@@ -1 +1 @@\n-20220110\n+20220111"}, {"sha": "60abcb77a0aa14f6c42620c4f560d84587ba0acf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9450aa0e8b70f2362925cbcac8a29733899d37f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9450aa0e8b70f2362925cbcac8a29733899d37f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d9450aa0e8b70f2362925cbcac8a29733899d37f", "patch": "@@ -1,3 +1,76 @@\n+2022-01-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Identifier_to_gnu): Use correct subtype.\n+\t(elaborate_profile): New function.\n+\t(Call_to_gnu): Call it on the formals and the result type before\n+\tretrieving the translated result type from the subprogram type.\n+\n+2022-01-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: Fix\n+\tcomputation of boolean result in the unchecked union case.\n+\t(components_to_record): Rename MAYBE_UNUSED parameter to IN_VARIANT\n+\tand remove local variable of the same name.  Pass NULL recursively\n+\tas P_GNU_REP_LIST for nested variants in the unchecked union case.\n+\n+2022-01-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (lvalue_required_p) <N_Pragma>: New case.\n+\t<N_Pragma_Argument_Association>: Likewise.\n+\t(Pragma_to_gnu) <Pragma_Inspection_Point>: Fetch the corresponding\n+\tvariable of a constant before marking it as addressable.\n+\n+2022-01-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gcc-interface/Make-lang.in (ADA_GENERATED_FILES): Remove\n+\ts-casuti.ad?, s-crtl.ad?, s-os_lib.ad?.  Update list of object\n+\tfiles accordingly.\n+\n+2022-01-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/s-atopri.ads (Atomic_Compare_Exchange): Replaces\n+\tdeprecated Sync_Compare_And_Swap.\n+\t* libgnat/s-atopri.adb (Lock_Free_Try_Write): Switch from __sync\n+\tto __atomic builtins.\n+\n+2022-01-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/s-exponn.adb, libgnat/s-expont.adb,\n+\tlibgnat/s-exponu.adb, libgnat/s-widthi.adb,\n+\tlibgnat/s-widthu.adb: Remove CodePeer annotations for pragma\n+\tLoop_Variant.\n+\n+2022-01-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_prag.adb (Expand_Pragma_Loop_Variant): Disable expansion\n+\tin CodePeer mode.\n+\n+2022-01-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Is_Child_Or_Sibling): Fix typo in comment.\n+\n+2022-01-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_pakd.adb (Install_PAT): If the PAT is a scalar type, apply\n+\tthe canonical adjustment to its alignment.\n+\n+2022-01-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/s-atocou__builtin.adb (Decrement, Increment): Switch\n+\tfrom __sync to __atomic builtins; use 'Address to be consistent\n+\twith System.Atomic_Primitives.\n+\n+2022-01-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_pakd.adb (Install_PAT): Do not reset the alignment here.\n+\t* layout.adb (Layout_Type): Call Adjust_Esize_Alignment after having\n+\tcopied the RM_Size onto the Esize when the latter is too small.\n+\n+2022-01-10  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_warn.adb (Check_References): Handle arrays of tasks\n+\tsimilar to task objects.\n+\n 2022-01-07  Patrick Bernardi  <bernardi@adacore.com>\n \n \t* libgnat/a-direct.adb (Search_Data): Remove type."}, {"sha": "86d5762c65c5b3434d3b84c741d98a59e3cdc303", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9450aa0e8b70f2362925cbcac8a29733899d37f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9450aa0e8b70f2362925cbcac8a29733899d37f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d9450aa0e8b70f2362925cbcac8a29733899d37f", "patch": "@@ -1,3 +1,9 @@\n+2022-01-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/101530\n+\t* c-common.c (c_build_shufflevector): Wrap the BIT_FIELD_REF\n+\tin a TARGET_EXPR to force a temporary.\n+\n 2022-01-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/103758"}, {"sha": "d762ddf7b26a3dc6d55c0b90002aef6b5e29c2bc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9450aa0e8b70f2362925cbcac8a29733899d37f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9450aa0e8b70f2362925cbcac8a29733899d37f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d9450aa0e8b70f2362925cbcac8a29733899d37f", "patch": "@@ -1,3 +1,26 @@\n+2022-01-10  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/103879\n+\t* constexpr.c (cxx_fold_indirect_ref): Split out object/offset\n+\tcanonicalization step into a local lambda.  Strengthen it to\n+\tabsorb more components at position 0.  Use it before both calls\n+\tto cxx_fold_indirect_ref_1.\n+\n+2022-01-10  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/103783\n+\t* call.c (cand_parms_match): Skip over 'this' when given one\n+\tstatic and one non-static member function.\n+\n+2022-01-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/103912\n+\t* semantics.c (expand_or_defer_fn): For immediate functions, set\n+\tnode->body_removed to true and clear analyzed, definition and\n+\tforce_output.\n+\t* decl2.c (c_parse_final_cleanups): Ignore immediate functions for\n+\texpand_or_defer_fn.\n+\n 2022-01-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89074"}, {"sha": "7a7cb7e96fce0076a4b21e52ce0dbb2f833368f0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9450aa0e8b70f2362925cbcac8a29733899d37f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9450aa0e8b70f2362925cbcac8a29733899d37f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d9450aa0e8b70f2362925cbcac8a29733899d37f", "patch": "@@ -1,3 +1,9 @@\n+2022-01-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/103366\n+\t* trans-expr.c (gfc_conv_gfc_desc_to_cfi_desc): Allow unlimited\n+\tpolymorphic actual argument passed to assumed type formal.\n+\n 2022-01-09  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/103777"}, {"sha": "8ce0c255f412e290a880bad35ed3636618e85d0d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9450aa0e8b70f2362925cbcac8a29733899d37f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9450aa0e8b70f2362925cbcac8a29733899d37f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9450aa0e8b70f2362925cbcac8a29733899d37f", "patch": "@@ -1,3 +1,72 @@\n+2022-01-10  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/103861\n+\t* gcc.target/i386/pr103861-2.c: New test.\n+\n+2022-01-10  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/103879\n+\t* g++.dg/cpp1y/constexpr-base2.C: New test.\n+\t* g++.dg/cpp1y/constexpr-base2a.C: New test.\n+\n+2022-01-10  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/103783\n+\t* g++.dg/cpp2a/concepts-memfun2.C: New test.\n+\n+2022-01-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/103912\n+\t* g++.dg/cpp2a/consteval26.C: New test.\n+\n+2022-01-10  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* gcc.target/powerpc/sse4_1-blendvps.c: Copy from gcc.target/i386,\n+\tadjust dg directives to suit.\n+\n+2022-01-10  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/aarch64/masked_epilogue.c: New test.\n+\n+2022-01-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/103366\n+\t* gfortran.dg/pr103366.f90: New test.\n+\n+2022-01-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/102024\n+\t* gcc.target/i386/pr102024.c: New test.\n+\t* g++.target/i386/pr102024.C: New test.\n+\n+2022-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/reg-alloc-4.c: New test.\n+\n+2022-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/reg-alloc-3.c: New test.\n+\n+2022-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/reg-alloc-2.c: New test.\n+\n+2022-01-10  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/82207\n+\t* gfortran.dg/ieee/signaling_1.f90: New test.\n+\t* gfortran.dg/ieee/signaling_1_c.c: New file.\n+\n+2022-01-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/101530\n+\t* c-c++-common/builtin-shufflevector-3.c: New testcase.\n+\n+2022-01-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100359\n+\t* gcc.dg/tree-ssa/pr100359.c: New testcase.\n+\n 2022-01-09  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/103777"}, {"sha": "78085c54fd293b9110da621e8ba60663c77b9576", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9450aa0e8b70f2362925cbcac8a29733899d37f/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9450aa0e8b70f2362925cbcac8a29733899d37f/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=d9450aa0e8b70f2362925cbcac8a29733899d37f", "patch": "@@ -1,3 +1,11 @@\n+2022-01-10  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/82207\n+\t* Makefile.am: Pass -fsignaling-nans for IEEE files.\n+\t* Makefile.in: Regenerate.\n+\t* ieee/ieee_helper.c: Use issignaling macro to recognized\n+\tsignaling NaNs.\n+\n \f\n Copyright (C) 2022 Free Software Foundation, Inc.\n "}, {"sha": "e0458cd618126dd0800228cebd3608ce430f3b89", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9450aa0e8b70f2362925cbcac8a29733899d37f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9450aa0e8b70f2362925cbcac8a29733899d37f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d9450aa0e8b70f2362925cbcac8a29733899d37f", "patch": "@@ -1,3 +1,88 @@\n+2022-01-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/77760\n+\t* include/bits/locale_facets_nonio.h (__time_get_state): New struct.\n+\t(time_get::_M_extract_via_format): Declare new method with\n+\t__time_get_state& as an extra argument.\n+\t* include/bits/locale_facets_nonio.tcc (_M_extract_via_format): Add\n+\t__state argument, set various fields in it while parsing.  Handle %j,\n+\t%U, %w and %W, fix up handling of %y, %Y and %C, don't adjust tm_hour\n+\tfor %p immediately.  Add a wrapper around the method without the\n+\t__state argument for backwards compatibility.\n+\t(_M_extract_num): Remove all __len == 4 special cases.\n+\t(time_get::do_get_time, time_get::do_get_date, time_get::do_get): Zero\n+\tinitialize __state, pass it to _M_extract_via_format and finalize it\n+\tat the end.\n+\t(do_get_year): For 1-2 digit parsed years, map 0-68 to 2000-2068,\n+\t69-99 to 1969-1999.  For 3-4 digit parsed years use that as year.\n+\t(get): If do_get isn't overloaded from the locale_facets_nonio.tcc\n+\tversion, don't call do_get but call _M_extract_via_format instead to\n+\tpass around state.\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.30): Export _M_extract_via_format\n+\twith extra __time_get_state and __time_get_state::_M_finalize_state.\n+\t* src/c++98/locale_facets.cc (is_leap, day_of_the_week,\n+\tday_of_the_year): New functions in anon namespace.\n+\t(mon_yday): New var in anon namespace.\n+\t(__time_get_state::_M_finalize_state): Define.\n+\t* testsuite/22_locale/time_get/get/char/4.cc: New test.\n+\t* testsuite/22_locale/time_get/get/wchar_t/4.cc: New test.\n+\t* testsuite/22_locale/time_get/get_year/char/1.cc (test01): Parse 197\n+\tas year 197AD instead of error.\n+\t* testsuite/22_locale/time_get/get_year/char/5.cc (test01): Parse 1 as\n+\tyear 2001 instead of error.\n+\t* testsuite/22_locale/time_get/get_year/char/6.cc: New test.\n+\t* testsuite/22_locale/time_get/get_year/wchar_t/1.cc (test01): Parse\n+\t197 as year 197AD instead of error.\n+\t* testsuite/22_locale/time_get/get_year/wchar_t/5.cc (test01): Parse\n+\t1 as year 2001 instead of error.\n+\t* testsuite/22_locale/time_get/get_year/wchar_t/6.cc: New test.\n+\n+2022-01-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103866\n+\t* acinclude.m4 (GLIBCXX_COMPUTE_STDIO_INTEGER_CONSTANTS): Do\n+\tnothing for freestanding builds.\n+\t(GLIBCXX_ENABLE_HOSTED): Define FREESTANDING_FLAGS.\n+\t* configure.ac: Do not use AC_LIBTOOL_DLOPEN when configured\n+\twith --without-headers.  Do not use GCC_HEADER_STDINT for\n+\tfreestanding builds.\n+\t* libsupc++/Makefile.am (HOSTED_CXXFLAGS): Use -ffreestanding\n+\tfor freestanding builds.\n+\t* configure: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\t* doc/Makefile.in: Regenerate.\n+\t* include/Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* po/Makefile.in: Regenerate.\n+\t* python/Makefile.in: Regenerate.\n+\t* src/Makefile.in: Regenerate.\n+\t* src/c++11/Makefile.in: Regenerate.\n+\t* src/c++17/Makefile.in: Regenerate.\n+\t* src/c++20/Makefile.in: Regenerate.\n+\t* src/c++98/Makefile.in: Regenerate.\n+\t* src/filesystem/Makefile.in: Regenerate.\n+\t* testsuite/Makefile.in: Regenerate.\n+\n+2022-01-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/28_regex/algorithms/regex_replace/char/103664.cc:\n+\tAdd dg-timeout-factor directive.\n+\t* testsuite/28_regex/basic_regex/84110.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/ctors/char/other.cc: Likewise.\n+\t* testsuite/28_regex/match_results/102667.cc: Likewise.\n+\n+2022-01-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/using.xml: Update documentation around default\n+\t-std option.\n+\t* doc/html/*: Regenerate.\n+\n+2022-01-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100017\n+\t* src/c++17/Makefile.am (AM_CXXFLAGS): Add -nostdinc++.\n+\t* src/c++17/Makefile.in: Regenerate.\n+\n 2022-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* testsuite/18_support/type_info/constexpr.cc: Add explicit"}]}