{"sha": "8c7bcf951d60dfb897089bc182d01d0cf4664e97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM3YmNmOTUxZDYwZGZiODk3MDg5YmMxODJkMDFkMGNmNDY2NGU5Nw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-05-17T15:08:16Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-05-17T15:08:16Z"}, "message": "re PR target/66174 (ICE: in extract_insn, at recog.c:2341 (unrecognizable insns) with -ftree-vectorize -mavx512ifma)\n\n\tPR target/66174\n\t* config/i386/i386.c (expand_vec_perm_blend): Enable HImode and\n\tQImode inner modes for TARGET_AVX512BW.  Force mask operand\n\tto a register for AVX512F modes.\n\ntestsuite/ChangeLog:\n\n\tPR target/66174\n\t* gcc.target/i386/pr66174.c: New test.\n\nFrom-SVN: r223269", "tree": {"sha": "ad652bf28fd4e615b0de29ea86d813d6e36359a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad652bf28fd4e615b0de29ea86d813d6e36359a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c7bcf951d60dfb897089bc182d01d0cf4664e97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7bcf951d60dfb897089bc182d01d0cf4664e97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7bcf951d60dfb897089bc182d01d0cf4664e97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7bcf951d60dfb897089bc182d01d0cf4664e97/comments", "author": null, "committer": null, "parents": [{"sha": "2ea560b2b0da4ee9035ad0b56e971501a9612c0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea560b2b0da4ee9035ad0b56e971501a9612c0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ea560b2b0da4ee9035ad0b56e971501a9612c0c"}], "stats": {"total": 54, "additions": 46, "deletions": 8}, "files": [{"sha": "a19c15863c5258edfbbd0ff9b93c8b025c84959e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7bcf951d60dfb897089bc182d01d0cf4664e97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7bcf951d60dfb897089bc182d01d0cf4664e97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c7bcf951d60dfb897089bc182d01d0cf4664e97", "patch": "@@ -1,9 +1,16 @@\n-2015-05-16  Jan HUbicka  <hubicka@ucw.cz>\n+2015-05-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/66174\n+\t* config/i386/i386.c (expand_vec_perm_blend): Enable HImode and\n+\tQImode inner modes for TARGET_AVX512BW.  Force mask operand\n+\tto a register for AVX512F modes.\n+\n+2015-05-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* toplev.c (emit_debug_global_declarations): Do not output debug info\n \twhen doing slim LTO objects.\n \n-2015-05-16  Jan HUbicka  <hubicka@ucw.cz>\n+2015-05-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-utils.h (warn_types_mismatch, odr_or_derived_type_p,\n \todr_types_equivalent_p): Declare.\n@@ -21,7 +28,7 @@\n \t* tree.h (type_in_anonymous_namespace_p): Remove.\n \t* doc/invoke.texi (-Wlto-type-mismatch): Document\n \n-2015-05-16  Jan HUbicka  <hubicka@ucw.cz>\n+2015-05-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree.c (verify_type_variant): Verify tree_base and type_common flags.\n \t(verify_type): Verify STRING_FLAG."}, {"sha": "8d91861056786c7fa543b68527ef29e90e273519", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7bcf951d60dfb897089bc182d01d0cf4664e97/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7bcf951d60dfb897089bc182d01d0cf4664e97/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8c7bcf951d60dfb897089bc182d01d0cf4664e97", "patch": "@@ -46777,15 +46777,16 @@ expand_vselect_vconcat (rtx target, rtx op0, rtx op1,\n static bool\n expand_vec_perm_blend (struct expand_vec_perm_d *d)\n {\n-  machine_mode vmode = d->vmode;\n+  machine_mode mmode, vmode = d->vmode;\n   unsigned i, mask, nelt = d->nelt;\n-  rtx target, op0, op1, x;\n+  rtx target, op0, op1, maskop, x;\n   rtx rperm[32], vperm;\n \n   if (d->one_operand_p)\n     return false;\n   if (TARGET_AVX512F && GET_MODE_SIZE (vmode) == 64\n-      && GET_MODE_SIZE (GET_MODE_INNER (vmode)) >= 4)\n+      && (TARGET_AVX512BW\n+\t  || GET_MODE_SIZE (GET_MODE_INNER (vmode)) >= 4))\n     ;\n   else if (TARGET_AVX2 && GET_MODE_SIZE (vmode) == 32)\n     ;\n@@ -46959,8 +46960,33 @@ expand_vec_perm_blend (struct expand_vec_perm_d *d)\n       gcc_unreachable ();\n     }\n \n+  switch (vmode)\n+    {\n+    case V8DFmode:\n+    case V8DImode:\n+      mmode = QImode;\n+      break;\n+    case V16SFmode:\n+    case V16SImode:\n+      mmode = HImode;\n+      break;\n+    case V32HImode:\n+      mmode = SImode;\n+      break;\n+    case V64QImode:\n+      mmode = DImode;\n+      break;\n+    default:\n+      mmode = VOIDmode;\n+    }\n+\n+  if (mmode != VOIDmode)\n+    maskop = force_reg (mmode, gen_int_mode (mask, mmode));\n+  else\n+    maskop = GEN_INT (mask);\n+\n   /* This matches five different patterns with the different modes.  */\n-  x = gen_rtx_VEC_MERGE (vmode, op1, op0, GEN_INT (mask));\n+  x = gen_rtx_VEC_MERGE (vmode, op1, op0, maskop);\n   x = gen_rtx_SET (target, x);\n   emit_insn (x);\n   if (target != d->target)"}, {"sha": "552076f9c145f4f58fa8b993480b62e9e52e7bbe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7bcf951d60dfb897089bc182d01d0cf4664e97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7bcf951d60dfb897089bc182d01d0cf4664e97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c7bcf951d60dfb897089bc182d01d0cf4664e97", "patch": "@@ -1,10 +1,15 @@\n+2015-05-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/66174\n+\t* gcc.target/i386/pr66174.c: New test.\n+\n 2015-05-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/37131\n \t* gfortran.dg/matmul_bounds_6.f90:  New test.\n \t* gfortran.dg/matmul_bounds_7.f90:  New test.\n \n-2015-05-16  Jan Hubica  <hubicka@ucw.cz>\n+2015-05-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gfortran.dg/lto/20091028-2_1.c: Fix return value.\n \t* gfortran.dg/lto/pr41576_1.f90: Add interface."}]}