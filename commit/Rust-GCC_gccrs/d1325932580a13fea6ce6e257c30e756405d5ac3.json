{"sha": "d1325932580a13fea6ce6e257c30e756405d5ac3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDEzMjU5MzI1ODBhMTNmZWE2Y2U2ZTI1N2MzMGU3NTY0MDVkNWFjMw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2008-05-16T16:29:36Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2008-05-16T16:29:36Z"}, "message": "intrinsic.texi: Write Fortran 77/90/95 instead of F77/90/95...\n\n2008-05-16  Tobias Burnus  <burnus@net-b.de\n\n        * intrinsic.texi: Write Fortran 77/90/95 instead of F77/90/95;\n        add missing KIND argument to ACHAR and NINT; and state that\n        the KIND argument is a F2003 extension for ACHAR, COUNT, IACHAR,\n        ICHAR, INDEX, LBOUND, LEN, LEN_TRIM, SCAN, SIZE, UBOUND, VERIFY.\n\nFrom-SVN: r135427", "tree": {"sha": "0be9a6126cdb2f9be4b5b0adb9215a02302ff712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0be9a6126cdb2f9be4b5b0adb9215a02302ff712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1325932580a13fea6ce6e257c30e756405d5ac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1325932580a13fea6ce6e257c30e756405d5ac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1325932580a13fea6ce6e257c30e756405d5ac3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1325932580a13fea6ce6e257c30e756405d5ac3/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3924be9712d2b49b59048aff6ba5d288227c40c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3924be9712d2b49b59048aff6ba5d288227c40c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3924be9712d2b49b59048aff6ba5d288227c40c"}], "stats": {"total": 343, "additions": 178, "deletions": 165}, "files": [{"sha": "51a82c9e442ff66efe1d7beef162c7bc3af818ab", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1325932580a13fea6ce6e257c30e756405d5ac3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1325932580a13fea6ce6e257c30e756405d5ac3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d1325932580a13fea6ce6e257c30e756405d5ac3", "patch": "@@ -1,3 +1,10 @@\n+2008-05-16  Tobias Burnus  <burnus@net-b.de\n+\n+\t* intrinsic.texi: Write Fortran 77/90/95 instead of F77/90/95;\n+\tadd missing KIND argument to ACHAR and NINT; and state that\n+\tthe KIND argument is a F2003 extension for ACHAR, COUNT, IACHAR,\n+\tICHAR, INDEX, LBOUND, LEN, LEN_TRIM, SCAN, SIZE, UBOUND, VERIFY.\n+\n 2008-05-16  Daniel Kraft  <d@domob.eu>\n \n \t* primary.c:  New private structure \"gfc_structure_ctor_component\"."}, {"sha": "571f10e893f2a5d404163272aa3a9425d5890b6d", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 171, "deletions": 165, "changes": 336, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1325932580a13fea6ce6e257c30e756405d5ac3/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1325932580a13fea6ce6e257c30e756405d5ac3/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=d1325932580a13fea6ce6e257c30e756405d5ac3", "patch": "@@ -361,7 +361,7 @@ end program test_abort\n @code{ABS(X)} computes the absolute value of @code{X}.\n \n @item @emph{Standard}:\n-F77 and later, has overloads that are GNU extensions\n+Fortran 77 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -395,9 +395,9 @@ end program test_abs\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument            @tab Return type       @tab Standard\n-@item @code{CABS(Z)}  @tab @code{COMPLEX(4) Z} @tab @code{REAL(4)}    @tab F77 and later\n-@item @code{DABS(X)}  @tab @code{REAL(8)    X} @tab @code{REAL(8)}    @tab F77 and later\n-@item @code{IABS(I)}  @tab @code{INTEGER(4) I} @tab @code{INTEGER(4)} @tab F77 and later\n+@item @code{CABS(Z)}  @tab @code{COMPLEX(4) Z} @tab @code{REAL(4)}    @tab Fortran 77 and later\n+@item @code{DABS(X)}  @tab @code{REAL(8)    X} @tab @code{REAL(8)}    @tab Fortran 77 and later\n+@item @code{IABS(I)}  @tab @code{INTEGER(4) I} @tab @code{INTEGER(4)} @tab Fortran 77 and later\n @item @code{ZABS(Z)}  @tab @code{COMPLEX(8) Z} @tab @code{COMPLEX(8)} @tab GNU extension\n @item @code{CDABS(Z)} @tab @code{COMPLEX(8) Z} @tab @code{COMPLEX(8)} @tab GNU extension\n @end multitable\n@@ -475,17 +475,20 @@ end program access_test\n in the @acronym{ASCII} collating sequence.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n-@code{RESULT = ACHAR(I)}\n+@code{RESULT = ACHAR(I [, KIND])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{I} @tab The type shall be @code{INTEGER(*)}.\n+@item @var{I}    @tab The type shall be @code{INTEGER(*)}.\n+@item @var{KIND} @tab (Optional) An @code{INTEGER} initialization\n+                      expression indicating the kind parameter of\n+                      the result.\n @end multitable\n \n @item @emph{Return value}:\n@@ -523,7 +526,7 @@ and formatted string representations.\n @code{ACOS(X)} computes the arccosine of @var{X} (inverse of @code{COS(X)}).\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -553,7 +556,7 @@ end program test_acos\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{DACOS(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab F77 and later\n+@item @code{DACOS(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 77 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -626,7 +629,7 @@ Inverse function: @ref{COSH}\n Spaces are inserted at the end of the string as needed.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -671,7 +674,7 @@ end program test_adjustl\n Spaces are inserted at the start of the string as needed.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -720,7 +723,7 @@ for compatibility with @command{g77}, and their use in new code is\n strongly discouraged.\n \n @item @emph{Standard}:\n-F77 and later, has overloads that are GNU extensions\n+Fortran 77 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -771,7 +774,7 @@ end program test_aimag\n @code{AINT(X [, KIND])} truncates its argument to a whole number.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -811,7 +814,7 @@ end program test_aint\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name           @tab Argument         @tab Return type      @tab Standard\n-@item @code{DINT(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}   @tab F77 and later\n+@item @code{DINT(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}   @tab Fortran 77 and later\n @end multitable\n @end table\n \n@@ -880,7 +883,7 @@ after 3 seconds.\n in the array along dimension @var{DIM}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -945,7 +948,7 @@ end program test_all\n @code{ALLOCATED(X)} checks the status of whether @var{X} is allocated.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -1024,7 +1027,7 @@ END PROGRAM\n @end smallexample\n \n @item @emph{See also}:\n-F95 elemental function: @ref{IAND}\n+Fortran 95 elemental function: @ref{IAND}\n @end table\n \n \n@@ -1041,7 +1044,7 @@ F95 elemental function: @ref{IAND}\n @code{ANINT(X [, KIND])} rounds its argument to the nearest whole number.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -1079,7 +1082,7 @@ end program test_anint\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument         @tab Return type      @tab Standard\n-@item @code{DNINT(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}   @tab F77 and later\n+@item @code{DNINT(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}   @tab Fortran 77 and later\n @end multitable\n @end table\n \n@@ -1097,7 +1100,7 @@ end program test_anint\n @var{MASK} along dimension @var{DIM} are @code{.TRUE.}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -1164,7 +1167,7 @@ end program test_any\n @code{ASIN(X)} computes the arcsine of its @var{X} (inverse of @code{SIN(X)}).\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -1194,7 +1197,7 @@ end program test_asin\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{DASIN(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab F77 and later\n+@item @code{DASIN(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 77 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -1266,7 +1269,7 @@ Inverse function: @ref{SINH}\n or if @var{PTR} is associated with the target @var{TGT}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -1342,7 +1345,7 @@ end program test_associated\n @code{ATAN(X)} computes the arctangent of @var{X}.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -1370,7 +1373,7 @@ end program test_atan\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{DATAN(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab F77 and later\n+@item @code{DATAN(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 77 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -1393,7 +1396,7 @@ Inverse function: @ref{TAN}\n @math{X + i Y}.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -1428,7 +1431,7 @@ end program test_atan2\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type    @tab Standard\n-@item @code{DATAN2(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)} @tab F77 and later\n+@item @code{DATAN2(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)} @tab Fortran 77 and later\n @end multitable\n @end table\n \n@@ -1789,7 +1792,7 @@ end program test_besyn\n represented by the type of @var{I}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -1829,7 +1832,7 @@ end program test_bit_size\n in @var{I} is set.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -2138,7 +2141,7 @@ end subroutine association_test\n @code{CEILING(X)} returns the least integer greater than or equal to @var{X}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -2184,7 +2187,7 @@ end program test_ceiling\n @code{CHAR(I [, KIND])} returns the character represented by the integer @var{I}.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -2357,7 +2360,7 @@ component.  If @var{Y} is not present then the imaginary component is set to\n 0.0.  If @var{X} is complex then @var{Y} must not be present.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -2507,7 +2510,7 @@ end program test_complex\n then the result is @code{(x, -y)}\n \n @item @emph{Standard}:\n-F77 and later, has overloads that are GNU extensions\n+Fortran 77 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -2559,7 +2562,7 @@ end program test_conjg\n @code{COS(X)} computes the cosine of @var{X}.\n \n @item @emph{Standard}:\n-F77 and later, has overloads that are GNU extensions\n+Fortran 77 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -2589,8 +2592,8 @@ end program test_cos\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument            @tab Return type       @tab Standard\n-@item @code{DCOS(X)}  @tab @code{REAL(8) X}    @tab @code{REAL(8)}    @tab F77 and later\n-@item @code{CCOS(X)}  @tab @code{COMPLEX(4) X} @tab @code{COMPLEX(4)} @tab F77 and later\n+@item @code{DCOS(X)}  @tab @code{REAL(8) X}    @tab @code{REAL(8)}    @tab Fortran 77 and later\n+@item @code{CCOS(X)}  @tab @code{COMPLEX(4) X} @tab @code{COMPLEX(4)} @tab Fortran 77 and later\n @item @code{ZCOS(X)}  @tab @code{COMPLEX(8) X} @tab @code{COMPLEX(8)} @tab GNU extension\n @item @code{CDCOS(X)} @tab @code{COMPLEX(8) X} @tab @code{COMPLEX(8)} @tab GNU extension\n @end multitable\n@@ -2615,7 +2618,7 @@ Inverse function: @ref{ACOS}\n @code{COSH(X)} computes the hyperbolic cosine of @var{X}.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -2643,7 +2646,7 @@ end program test_cosh\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{DCOSH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab F77 and later\n+@item @code{DCOSH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 77 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -2670,7 +2673,7 @@ omitted it is taken to be @code{1}.  @var{DIM} is a scaler of type\n is the rank of @var{MASK}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -2742,7 +2745,7 @@ this subroutine, as shown in the example below, should be used.\n \n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Subroutine\n@@ -2794,7 +2797,7 @@ sections of @var{ARRAY} along the given dimension are shifted.  Elements\n shifted out one end of each rank one section are shifted back in the other end.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -2917,7 +2920,7 @@ Unavailable time and date parameters return blanks.\n @end multitable\t    \n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Subroutine\n@@ -2969,7 +2972,7 @@ end program test_time_and_date\n @code{DBLE(X)} Converts @var{X} to double precision real type.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -3104,7 +3107,7 @@ representation of @var{X}.  For example, on a system using a 32-bit\n floating point representation, a default real number would likely return 24.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -3148,7 +3151,7 @@ end program test_digits\n otherwise returns zero.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -3180,8 +3183,8 @@ end program test_dim\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument              @tab Return type       @tab Standard\n-@item @code{IDIM(X,Y)} @tab @code{INTEGER(4) X,Y} @tab @code{INTEGER(4)} @tab F77 and later\n-@item @code{DDIM(X,Y)} @tab @code{REAL(8) X,Y}    @tab @code{REAL(8)}    @tab F77 and later\n+@item @code{IDIM(X,Y)} @tab @code{INTEGER(4) X,Y} @tab @code{INTEGER(4)} @tab Fortran 77 and later\n+@item @code{DDIM(X,Y)} @tab @code{REAL(8) X,Y}    @tab @code{REAL(8)}    @tab Fortran 77 and later\n @end multitable\n @end table\n \n@@ -3204,7 +3207,7 @@ vectors are @code{COMPLEX(*)}, the result is @code{SUM(CONJG(X)*Y)}. If the\n vectors are @code{LOGICAL}, the result is @code{ANY(X.AND.Y)}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -3250,7 +3253,7 @@ end program test_dot_prod\n @code{DPROD(X,Y)} returns the product @code{X*Y}.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -3438,7 +3441,7 @@ following are copied in depending on the type of @var{ARRAY}.\n @end multitable\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -3486,7 +3489,7 @@ end program test_eoshift\n @code{EPSILON(X)} returns a nearly negligible number relative to @code{1}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -3777,7 +3780,7 @@ end program test_exit\n @code{EXP(X)} computes the base @math{e} exponential of @var{X}.\n \n @item @emph{Standard}:\n-F77 and later, has overloads that are GNU extensions\n+Fortran 77 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -3805,8 +3808,8 @@ end program test_exp\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument             @tab Return type         @tab Standard\n-@item @code{DEXP(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}      @tab F77 and later\n-@item @code{CEXP(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}   @tab F77 and later\n+@item @code{DEXP(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}      @tab Fortran 77 and later\n+@item @code{CEXP(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}   @tab Fortran 77 and later\n @item @code{ZEXP(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}   @tab GNU extension\n @item @code{CDEXP(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}   @tab GNU extension\n @end multitable\n@@ -3826,7 +3829,7 @@ end program test_exp\n is zero the value returned is zero. \n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -3923,7 +3926,7 @@ end program test_fdate\n @code{FLOAT(I)} converts the integer @var{I} to a default real value.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -4085,7 +4088,7 @@ END PROGRAM\n @code{FLOOR(X)} returns the greatest integer less than or equal to @var{X}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -4318,7 +4321,7 @@ END PROGRAM\n representation of @code{X}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -5209,7 +5212,7 @@ be obtained, or to a blank string otherwise.\n the model of the type of @code{X}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -5289,7 +5292,7 @@ end program test_hypot\n in the first character position of @code{C}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -5339,7 +5342,7 @@ and formatted string representations.\n Bitwise logical @code{AND}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -5432,7 +5435,7 @@ Fortran 2003 functions and subroutines: @ref{GET_COMMAND},\n @var{POS} set to zero.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -5472,7 +5475,7 @@ zeroed.  The value of @code{POS+LEN} must be less than or equal to the\n value @code{BIT_SIZE(I)}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -5508,7 +5511,7 @@ The return value is of type @code{INTEGER(*)} and of the same kind as\n @var{POS} set to one.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -5546,7 +5549,7 @@ The correspondence between characters and their codes is not necessarily\n the same across different GNU Fortran implementations.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortan 95 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -5661,7 +5664,7 @@ end program test_idate\n @var{J}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -5735,7 +5738,7 @@ the @var{BACK} argument is present and true, the return value is the\n start of the last occurrence rather than the first.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -5778,7 +5781,7 @@ The return value is of type @code{INTEGER} and of kind @var{KIND}. If\n Convert to integer type\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -5823,8 +5826,8 @@ end program\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument            @tab Return type       @tab Standard\n-@item @code{IFIX(A)}   @tab @code{REAL(4) A}    @tab @code{INTEGER}    @tab F77 and later\n-@item @code{IDINT(A)}  @tab @code{REAL(8) A}    @tab @code{INTEGER}    @tab F77 and later\n+@item @code{IFIX(A)}   @tab @code{REAL(4) A}    @tab @code{INTEGER}    @tab Fortran 77 and later\n+@item @code{IDINT(A)}  @tab @code{REAL(8) A}    @tab @code{INTEGER}    @tab Fortran 77 and later\n @end multitable\n \n @end table\n@@ -5846,7 +5849,7 @@ standard @code{INT} intrinsic with an optional argument of\n The @code{SHORT} intrinsic is equivalent to @code{INT2}.\n \n @item @emph{Standard}:\n-GNU extension.\n+GNU extension\n \n @item @emph{Class}:\n Elemental function\n@@ -5881,7 +5884,7 @@ standard @code{INT} intrinsic with an optional argument of\n @code{KIND=8}, and is only included for backwards compatibility.\n \n @item @emph{Standard}:\n-GNU extension.\n+GNU extension\n \n @item @emph{Class}:\n Elemental function\n@@ -5916,7 +5919,7 @@ The return value is a @code{INTEGER(8)} variable.\n @var{J}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -6094,7 +6097,7 @@ END PROGRAM\n Determine whether a unit is connected to a terminal device.\n \n @item @emph{Standard}:\n-GNU extension.\n+GNU extension\n \n @item @emph{Class}:\n Function\n@@ -6142,7 +6145,7 @@ value is undefined.  Bits shifted out from the left end or right end are\n lost; zeros are shifted in from the opposite end.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -6183,7 +6186,7 @@ a right shift.  The absolute value of @var{SHIFT} must be less than\n equivalent to @code{BIT_SIZE(I)}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -6344,7 +6347,7 @@ Subroutine, function\n @code{KIND(X)} returns the kind value of the entity @var{X}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -6387,7 +6390,7 @@ end program test_kind\n Returns the lower bounds of an array, or a single lower bound\n along the @var{DIM} dimension.\n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -6433,7 +6436,7 @@ the length of an element of @var{STRING} is returned.  Note that\n only the length, not the content, of @var{STRING} is needed.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -6470,7 +6473,7 @@ The return value is of type @code{INTEGER} and of kind @var{KIND}. If\n Returns the length of a character string, ignoring any trailing blanks.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -6573,7 +6576,7 @@ ASCII on some targets), whereas the former always use the ASCII\n ordering.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -6619,7 +6622,7 @@ ASCII on some targets), whereas the former always use the ASCII\n ordering.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -6708,7 +6711,7 @@ ASCII on some targets), whereas the former always use the ASCII\n ordering.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -6754,7 +6757,7 @@ ASCII on some targets), whereas the former always use the ASCII\n ordering.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -6870,7 +6873,7 @@ end program test_loc\n @code{LOG(X)} computes the logarithm of @var{X}.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -6924,7 +6927,7 @@ end program test_log\n @code{LOG10(X)} computes the base 10 logarithm of @var{X}.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -6952,8 +6955,8 @@ end program test_log10\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{ALOG10(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab F95 and later\n-@item @code{DLOG10(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab F95 and later\n+@item @code{ALOG10(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 95 and later\n+@item @code{DLOG10(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 95 and later\n @end multitable\n @end table\n \n@@ -6969,7 +6972,7 @@ end program test_log10\n Converts one kind of @code{LOGICAL} variable to another.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -7009,7 +7012,7 @@ intrinsic with an optional argument of @code{KIND=4}, and is only\n included for backwards compatibility.\n \n @item @emph{Standard}:\n-GNU extension.\n+GNU extension\n \n @item @emph{Class}:\n Elemental function\n@@ -7245,7 +7248,7 @@ end program test_malloc\n Performs a matrix multiplication on numeric or logical arguments.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -7294,7 +7297,7 @@ for the @code{*} or @code{.AND.} operators.\n Returns the argument with the largest (most positive) value.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -7319,11 +7322,11 @@ and has the same type and kind as the first argument.\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument            @tab Return type         @tab Standard\n-@item @code{MAX0(I)}   @tab @code{INTEGER(4) I} @tab @code{INTEGER(4)}   @tab F77 and later\n-@item @code{AMAX0(I)}  @tab @code{INTEGER(4) I} @tab @code{REAL(MAX(X))} @tab F77 and later\n-@item @code{MAX1(X)}   @tab @code{REAL(*) X}    @tab @code{INT(MAX(X))}  @tab F77 and later\n-@item @code{AMAX1(X)}  @tab @code{REAL(4)    X} @tab @code{REAL(4)}      @tab F77 and later\n-@item @code{DMAX1(X)}  @tab @code{REAL(8)    X} @tab @code{REAL(8)}      @tab F77 and later\n+@item @code{MAX0(I)}   @tab @code{INTEGER(4) I} @tab @code{INTEGER(4)}   @tab Fortran 77 and later\n+@item @code{AMAX0(I)}  @tab @code{INTEGER(4) I} @tab @code{REAL(MAX(X))} @tab Fortran 77 and later\n+@item @code{MAX1(X)}   @tab @code{REAL(*) X}    @tab @code{INT(MAX(X))}  @tab Fortran 77 and later\n+@item @code{AMAX1(X)}  @tab @code{REAL(4)    X} @tab @code{REAL(4)}      @tab Fortran 77 and later\n+@item @code{DMAX1(X)}  @tab @code{REAL(8)    X} @tab @code{REAL(8)}      @tab Fortran 77 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -7344,7 +7347,7 @@ and has the same type and kind as the first argument.\n type of @code{X}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -7395,7 +7398,7 @@ and all of the elements of @var{MASK} along a given row are zero, the\n result value for that row is zero.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -7452,7 +7455,7 @@ number of the type and kind of @var{ARRAY} if @var{ARRAY} is numeric, or\n a string of nulls if @var{ARRAY} is of character type.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -7579,7 +7582,7 @@ is equal to @var{TSOURCE} if @var{MASK} is @code{.TRUE.}, or equal to\n @var{FSOURCE} if it is @code{.FALSE.}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -7617,7 +7620,7 @@ The result is of the same type and type parameters as @var{TSOURCE}.\n Returns the argument with the smallest (most negative) value.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -7642,11 +7645,11 @@ and has the same type and kind as the first argument.\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument            @tab Return type         @tab Standard\n-@item @code{MIN0(I)}   @tab @code{INTEGER(4) I} @tab @code{INTEGER(4)}   @tab F77 and later\n-@item @code{AMIN0(I)}  @tab @code{INTEGER(4) I} @tab @code{REAL(MIN(X))} @tab F77 and later\n-@item @code{MIN1(X)}   @tab @code{REAL(*) X}    @tab @code{INT(MIN(X))}  @tab F77 and later\n-@item @code{AMIN1(X)}  @tab @code{REAL(4)    X} @tab @code{REAL(4)}      @tab F77 and later\n-@item @code{DMIN1(X)}  @tab @code{REAL(8)    X} @tab @code{REAL(8)}      @tab F77 and later\n+@item @code{MIN0(I)}   @tab @code{INTEGER(4) I} @tab @code{INTEGER(4)}   @tab Fortran 77 and later\n+@item @code{AMIN0(I)}  @tab @code{INTEGER(4) I} @tab @code{REAL(MIN(X))} @tab Fortran 77 and later\n+@item @code{MIN1(X)}   @tab @code{REAL(*) X}    @tab @code{INT(MIN(X))}  @tab Fortran 77 and later\n+@item @code{AMIN1(X)}  @tab @code{REAL(4)    X} @tab @code{REAL(4)}      @tab Fortran 77 and later\n+@item @code{DMIN1(X)}  @tab @code{REAL(8)    X} @tab @code{REAL(8)}      @tab Fortran 77 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -7666,7 +7669,7 @@ and has the same type and kind as the first argument.\n type of @code{X}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -7709,7 +7712,7 @@ and all of the elements of @var{MASK} along a given row are zero, the\n result value for that row is zero.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -7766,7 +7769,7 @@ considered.  If the array has zero size, or all of the elements of\n @var{ARRAY} is of character type.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -7817,7 +7820,7 @@ cases, the result is of the same type and kind as @var{ARRAY}.\n calculated as @code{A - (INT(A/P) * P)}.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -7859,8 +7862,8 @@ end program test_mod\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Arguments      @tab Return type    @tab Standard\n-@item @code{AMOD(A,P)} @tab @code{REAL(4)} @tab @code{REAL(4)} @tab F95 and later\n-@item @code{DMOD(A,P)} @tab @code{REAL(8)} @tab @code{REAL(8)} @tab F95 and later\n+@item @code{AMOD(A,P)} @tab @code{REAL(4)} @tab @code{REAL(4)} @tab Fortran 95 and later\n+@item @code{DMOD(A,P)} @tab @code{REAL(8)} @tab @code{REAL(8)} @tab Fortran 95 and later\n @end multitable\n @end table\n \n@@ -7877,7 +7880,7 @@ end program test_mod\n @code{MODULO(A,P)} computes the @var{A} modulo @var{P}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -7983,7 +7986,7 @@ affected by the movement of bits is unchanged. The values of\n @code{BIT_SIZE(FROM)}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental subroutine\n@@ -8019,7 +8022,7 @@ Elemental subroutine\n to @code{X} in the direction indicated by the sign of @code{S}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -8105,17 +8108,20 @@ end program newline\n @code{NINT(X)} rounds its argument to the nearest whole number.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later, with @var{KIND} argument Fortran 90 and later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n-@code{RESULT = NINT(X)}\n+@code{RESULT = NINT(X [, KIND])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n @item @var{X}    @tab The type of the argument shall be @code{REAL}.\n+@item @var{KIND} @tab (Optional) An @code{INTEGER} initialization\n+                      expression indicating the kind parameter of\n+\t\t      the result.\n @end multitable\n \n @item @emph{Return value}:\n@@ -8137,7 +8143,7 @@ end program test_nint\n @item @emph{Specific names}:\n @multitable @columnfractions .25 .25 .25\n @item Name             @tab Argument         @tab Standard\n-@item @code{IDNINT(X)} @tab @code{REAL(8)}   @tab F95 and later\n+@item @code{IDNINT(X)} @tab @code{REAL(8)}   @tab Fortran 95 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -8159,7 +8165,7 @@ end program test_nint\n @code{NOT} returns the bitwise boolean inverse of @var{I}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -8200,7 +8206,7 @@ In Fortran 95, @var{MOLD} is optional. Please note that Fortran 2003\n includes cases where it is required.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -8277,7 +8283,7 @@ END PROGRAM\n @end smallexample\n \n @item @emph{See also}:\n-F95 elemental function: @ref{IOR}\n+Fortran 95 elemental function: @ref{IOR}\n @end table\n \n \n@@ -8298,7 +8304,7 @@ equals @code{TRUE}. Afterwards, positions are filled with elements taken from\n @var{VECTOR}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -8392,7 +8398,7 @@ Subroutine\n type of @code{X}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -8432,7 +8438,7 @@ end program prec_and_range\n Determines whether an optional dummy argument is present.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -8480,7 +8486,7 @@ Multiplies the elements of @var{ARRAY} along dimension @var{DIM} if\n the corresponding element in @var{MASK} is @code{TRUE}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -8535,7 +8541,7 @@ END PROGRAM\n @code{RADIX(X)} returns the base of the model representing the entity @var{X}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -8669,7 +8675,7 @@ OpenMP-enabled application heavily relies on random numbers, one should\n consider employing a dedicated parallel random number generator instead.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Subroutine\n@@ -8713,7 +8719,7 @@ a default state. The example below shows how to initialize the random\n seed based on the system's time.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Subroutine\n@@ -8771,7 +8777,7 @@ END SUBROUTINE\n type of @code{X}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -8808,7 +8814,7 @@ See @code{PRECISION} for an example.\n and its use is strongly discouraged.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -8914,7 +8920,7 @@ Subroutine, function\n Concatenates @var{NCOPIES} copies of a string.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -8955,7 +8961,7 @@ the new array may be padded with elements from @var{PAD} or permuted\n as defined by @var{ORDER}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -9009,7 +9015,7 @@ END PROGRAM\n model numbers near @var{X}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -9086,7 +9092,7 @@ The return value is of type @code{INTEGER(*)} and of the same kind as\n @code{SCALE(X,I)} returns @code{X * RADIX(X)**I}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -9134,7 +9140,7 @@ is returned. If no character of @var{SET} is found in @var{STRING}, the\n result is zero.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -9319,7 +9325,7 @@ to @math{10^I} (exclusive). If there is no integer kind that accommodates\n this range, @code{SELECTED_INT_KIND} returns @math{-1}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -9364,7 +9370,7 @@ with decimal precision greater of at least @code{P} digits and exponent\n range greater at least @code{R}. \n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -9426,7 +9432,7 @@ end program real_kinds\n is that that of @var{X} and whose exponent part is @var{I}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -9469,7 +9475,7 @@ END PROGRAM\n Determines the shape of an array.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -9517,7 +9523,7 @@ END PROGRAM\n @code{SIGN(A,B)} returns the value of @var{A} with the sign of @var{B}.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -9631,7 +9637,7 @@ end program test_signal\n @code{SIN(X)} computes the sine of @var{X}.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -9684,7 +9690,7 @@ end program test_sin\n @code{SINH(X)} computes the hyperbolic sine of @var{X}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -9711,7 +9717,7 @@ end program test_sinh\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{DSINH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab F95 and later\n+@item @code{DSINH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 95 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -9733,7 +9739,7 @@ Determine the extent of @var{ARRAY} along a specified dimension @var{DIM},\n or the total number of elements in @var{ARRAY} if @var{DIM} is absent.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -9859,7 +9865,7 @@ to a default real value. This is an archaic form of @code{REAL}\n that is specific to one type for @var{A}.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -9893,7 +9899,7 @@ Determines the distance between the argument @var{X} and the nearest\n adjacent number of the same type.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -9939,7 +9945,7 @@ Replicates a @var{SOURCE} array @var{NCOPIES} times along a specified\n dimension @var{DIM}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -9990,7 +9996,7 @@ END PROGRAM\n @code{SQRT(X)} computes the square root of @var{X}.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -10021,8 +10027,8 @@ end program test_sqrt\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument             @tab Return type          @tab Standard\n-@item @code{DSQRT(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}       @tab F95 and later\n-@item @code{CSQRT(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}    @tab F95 and later\n+@item @code{DSQRT(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}       @tab Fortran 95 and later\n+@item @code{CSQRT(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}    @tab Fortran 95 and later\n @item @code{ZSQRT(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab GNU extension\n @item @code{CDSQRT(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab GNU extension\n @end multitable\n@@ -10175,7 +10181,7 @@ Adds the elements of @var{ARRAY} along dimension @var{DIM} if\n the corresponding element in @var{MASK} is @code{TRUE}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -10320,7 +10326,7 @@ If there is no clock, @var{COUNT} is set to @code{-HUGE(COUNT)}, and\n @var{COUNT_RATE} and @var{COUNT_MAX} are set to zero \n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Subroutine\n@@ -10366,7 +10372,7 @@ END PROGRAM\n @code{TAN(X)} computes the tangent of @var{X}.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -10394,7 +10400,7 @@ end program test_tan\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{DTAN(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab F95 and later\n+@item @code{DTAN(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 95 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -10416,7 +10422,7 @@ end program test_tan\n @code{TANH(X)} computes the hyperbolic tangent of @var{X}.\n \n @item @emph{Standard}:\n-F77 and later\n+Fortran 77 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -10444,7 +10450,7 @@ end program test_tanh\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{DTANH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab F95 and later\n+@item @code{DTANH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 95 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -10545,7 +10551,7 @@ The return value is a scalar of type @code{INTEGER(8)}.\n in the model of the type of @code{X}.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -10583,7 +10589,7 @@ This is approximately equivalent to the C concept of @emph{casting} one\n type to another.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -10643,7 +10649,7 @@ Transpose an array of rank two. Element (i, j) of the result has the value\n @code{MATRIX(j, i)}, for all i, j.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -10673,7 +10679,7 @@ The result has the same type as @var{MATRIX}, and has shape\n Removes trailing blank characters of a string.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -10761,7 +10767,7 @@ END PROGRAM\n Returns the upper bounds of an array, or a single upper bound\n along the @var{DIM} dimension.\n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -10877,7 +10883,7 @@ Subroutine, function\n Store the elements of @var{VECTOR} in an array of higher rank.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -10932,7 +10938,7 @@ is returned. If all characters of @var{SET} are found in @var{STRING}, the\n result is zero.\n \n @item @emph{Standard}:\n-F95 and later\n+Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -11020,7 +11026,7 @@ END PROGRAM\n @end smallexample\n \n @item @emph{See also}:\n-F95 elemental function: @ref{IEOR}\n+Fortran 95 elemental function: @ref{IEOR}\n @end table\n \n "}]}