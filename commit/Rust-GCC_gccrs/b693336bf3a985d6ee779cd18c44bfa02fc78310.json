{"sha": "b693336bf3a985d6ee779cd18c44bfa02fc78310", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY5MzMzNmJmM2E5ODVkNmVlNzc5Y2QxOGM0NGJmYTAyZmM3ODMxMA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-11-22T01:21:10Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-11-22T01:21:10Z"}, "message": "re PR target/17836 (ABI breakage for 16-byte vectors (non-Altivec ABI & ISA))\n\n        PR target/17836\n        * config/rs6000/rs6000.c (rs6000_return_in_memory): Return\n        synthetic vectors in memory.\n        (function_arg_boundary): Align large synthetic vectors.\n        (rs6000_pass_by_reference): Pass synthetic vectors in memory.\n\nFrom-SVN: r90995", "tree": {"sha": "a6d16d3d62f6ce5c0e1b2e8553d4ac71683cc106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6d16d3d62f6ce5c0e1b2e8553d4ac71683cc106"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b693336bf3a985d6ee779cd18c44bfa02fc78310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b693336bf3a985d6ee779cd18c44bfa02fc78310", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b693336bf3a985d6ee779cd18c44bfa02fc78310", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b693336bf3a985d6ee779cd18c44bfa02fc78310/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7fb3dd8b751e9dfb6b38aa6c937f6d97a28d7c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb3dd8b751e9dfb6b38aa6c937f6d97a28d7c5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fb3dd8b751e9dfb6b38aa6c937f6d97a28d7c5a"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "e50939b69b6ef7316e3471dadaf7a96f39bf0b25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b693336bf3a985d6ee779cd18c44bfa02fc78310/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b693336bf3a985d6ee779cd18c44bfa02fc78310/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b693336bf3a985d6ee779cd18c44bfa02fc78310", "patch": "@@ -1,3 +1,11 @@\n+2004-11-21  David Edelsohn  <edelsohn@gnu.org>\n+\n+\tPR target/17836\n+\t* config/rs6000/rs6000.c (rs6000_return_in_memory): Return\n+\tsynthetic vectors in memory.\n+\t(function_arg_boundary): Align large synthetic vectors.\n+\t(rs6000_pass_by_reference): Pass synthetic vectors in memory.\n+\n 2004-11-21  Jeff Law  <law@redhat.com>\n \n \t* cfg.c (update_bb_profile_for_threading): Do not rescale the"}, {"sha": "2d4e6186c5c99fb104692c0742f30c950f2ded85", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b693336bf3a985d6ee779cd18c44bfa02fc78310/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b693336bf3a985d6ee779cd18c44bfa02fc78310/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b693336bf3a985d6ee779cd18c44bfa02fc78310", "patch": "@@ -4640,6 +4640,21 @@ rs6000_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n       && (TARGET_AIX_STRUCT_RET\n \t  || (unsigned HOST_WIDE_INT) int_size_in_bytes (type) > 8))\n     return true;\n+\n+  /* Return synthetic vectors in memory.  */\n+  if (TREE_CODE (type) == VECTOR_TYPE\n+      && int_size_in_bytes (type) > (TARGET_ALTIVEC ? 16 : 8))\n+    {\n+      static bool warned_for_return_big_vectors = false;\n+      if (!warned_for_return_big_vectors)\n+\t{\n+\t  warning (\"synthetic vectors returned by reference: \"\n+\t\t   \"non-standard ABI extension with no compatibility guarantee\");\n+\t  warned_for_return_big_vectors = true;\n+\t}\n+      return true;\n+    }\n+\n   if (DEFAULT_ABI == ABI_V4 && TYPE_MODE (type) == TFmode)\n     return true;\n   return false;\n@@ -4783,17 +4798,23 @@ function_arg_padding (enum machine_mode mode, tree type)\n    of an argument with the specified mode and type.  If it is not defined,\n    PARM_BOUNDARY is used for all arguments.\n \n-   V.4 wants long longs to be double word aligned.  */\n+   V.4 wants long longs to be double word aligned.\n+   Doubleword align SPE vectors.\n+   Quadword align Altivec vectors.\n+   Quadword align large synthetic vector types.   */\n \n int\n-function_arg_boundary (enum machine_mode mode, tree type ATTRIBUTE_UNUSED)\n+function_arg_boundary (enum machine_mode mode, tree type)\n {\n   if (DEFAULT_ABI == ABI_V4 && GET_MODE_SIZE (mode) == 8)\n     return 64;\n   else if (SPE_VECTOR_MODE (mode))\n     return 64;\n   else if (ALTIVEC_VECTOR_MODE (mode))\n     return 128;\n+  else if (type && TREE_CODE (type) == VECTOR_TYPE\n+\t   && int_size_in_bytes (type) > 16)\n+    return 128;\n   else\n     return PARM_BOUNDARY;\n }\n@@ -5617,6 +5638,23 @@ rs6000_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n \n       return 1;\n     }\n+\n+  /* Pass synthetic vectors in memory.  */\n+  if (type && TREE_CODE (type) == VECTOR_TYPE\n+      && int_size_in_bytes (type) > (TARGET_ALTIVEC ? 16 : 8))\n+    {\n+      static bool warned_for_pass_big_vectors = false;\n+      if (TARGET_DEBUG_ARG)\n+\tfprintf (stderr, \"function_arg_pass_by_reference: synthetic vector\\n\");\n+      if (!warned_for_pass_big_vectors)\n+\t{\n+\t  warning (\"synthetic vector passed by reference: \"\n+\t\t   \"non-standard ABI extension with no compatibility guarantee\");\n+\t  warned_for_pass_big_vectors = true;\n+\t}\n+      return 1;\n+    }\n+\n   return 0;\n }\n "}]}