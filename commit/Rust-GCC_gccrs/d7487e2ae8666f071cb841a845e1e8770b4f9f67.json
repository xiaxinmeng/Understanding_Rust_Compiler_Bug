{"sha": "d7487e2ae8666f071cb841a845e1e8770b4f9f67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc0ODdlMmFlODY2NmYwNzFjYjg0MWE4NDVlMWU4NzcwYjRmOWY2Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-08-03T12:53:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-08-03T12:53:34Z"}, "message": "Add workaround for non-unique errno values on AIX\n\n\t* src/c++11/system_error.cc\n\t(system_error_category::default_error_condition): Add workaround for\n\tENOTEMPTY and EEXIST having the same value on AIX.\n\t* testsuite/19_diagnostics/error_category/system_category.cc: Add\n\textra testcases for EDOM, EILSEQ, ERANGE, EEXIST and ENOTEMPTY.\n\nFrom-SVN: r263289", "tree": {"sha": "bbd49f77d9f7a7cb2957bf0f4730414eb945cace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbd49f77d9f7a7cb2957bf0f4730414eb945cace"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7487e2ae8666f071cb841a845e1e8770b4f9f67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7487e2ae8666f071cb841a845e1e8770b4f9f67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7487e2ae8666f071cb841a845e1e8770b4f9f67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7487e2ae8666f071cb841a845e1e8770b4f9f67/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9f8fca6d677b01bd622b17a2a7acb2938a69e0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9f8fca6d677b01bd622b17a2a7acb2938a69e0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9f8fca6d677b01bd622b17a2a7acb2938a69e0a"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "94ab41b482f9ab2b709da8ec38467281b3987cc7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7487e2ae8666f071cb841a845e1e8770b4f9f67/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7487e2ae8666f071cb841a845e1e8770b4f9f67/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d7487e2ae8666f071cb841a845e1e8770b4f9f67", "patch": "@@ -1,3 +1,11 @@\n+2018-08-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++11/system_error.cc\n+\t(system_error_category::default_error_condition): Add workaround for\n+\tENOTEMPTY and EEXIST having the same value on AIX.\n+\t* testsuite/19_diagnostics/error_category/system_category.cc: Add\n+\textra testcases for EDOM, EILSEQ, ERANGE, EEXIST and ENOTEMPTY.\n+\n 2018-08-01  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* configure: Regenerate."}, {"sha": "07f44c0af9c9903bb51cac07caf221b73e2eca33", "filename": "libstdc++-v3/src/c++11/system_error.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7487e2ae8666f071cb841a845e1e8770b4f9f67/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7487e2ae8666f071cb841a845e1e8770b4f9f67/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc?ref=d7487e2ae8666f071cb841a845e1e8770b4f9f67", "patch": "@@ -241,7 +241,8 @@ namespace\n #ifdef ENOTDIR\n       case ENOTDIR:\n #endif\n-#ifdef ENOTEMPTY\n+#if defined ENOTEMPTY && (!defined EEXIST || ENOTEMPTY != EEXIST)\n+      // AIX sometimes uses the same value for EEXIST and ENOTEMPTY\n       case ENOTEMPTY:\n #endif\n #ifdef ENOTRECOVERABLE"}, {"sha": "77cd9c5df831ba6144a9f232d0a9537d55b3dd08", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/system_category.cc", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7487e2ae8666f071cb841a845e1e8770b4f9f67/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fsystem_category.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7487e2ae8666f071cb841a845e1e8770b4f9f67/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fsystem_category.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fsystem_category.cc?ref=d7487e2ae8666f071cb841a845e1e8770b4f9f67", "patch": "@@ -34,6 +34,22 @@ test02()\n   const std::error_category& cat = std::system_category();\n   std::error_condition cond;\n \n+  // As of 2011, ISO C only defines EDOM, EILSEQ and ERANGE:\n+  cond = cat.default_error_condition(EDOM);\n+  VERIFY( cond.value() == EDOM );\n+  VERIFY( cond == std::errc::argument_out_of_domain );\n+  VERIFY( cond.category() == std::generic_category() );\n+  cond = cat.default_error_condition(EILSEQ);\n+  VERIFY( cond.value() == EILSEQ );\n+  VERIFY( cond == std::errc::illegal_byte_sequence );\n+  VERIFY( cond.category() == std::generic_category() );\n+  cond = cat.default_error_condition(ERANGE);\n+  VERIFY( cond.value() == ERANGE );\n+  VERIFY( cond == std::errc::result_out_of_range );\n+  VERIFY( cond.category() == std::generic_category() );\n+\n+  // EBADF and EACCES are defined on all targets,\n+  // according to config/os/*/error_constants.h\n   cond = cat.default_error_condition(EBADF);\n   VERIFY( cond.value() == EBADF );\n   VERIFY( cond == std::errc::bad_file_descriptor );\n@@ -52,8 +68,29 @@ test02()\n   VERIFY( cond.category() == cat );\n \n   // PR libstdc++/60555\n+  VERIFY( std::error_code(EDOM, cat) == std::errc::argument_out_of_domain );\n+  VERIFY( std::error_code(EILSEQ, cat) == std::errc::illegal_byte_sequence );\n+  VERIFY( std::error_code(ERANGE, cat) == std::errc::result_out_of_range );\n   VERIFY( std::error_code(EBADF, cat) == std::errc::bad_file_descriptor );\n   VERIFY( std::error_code(EACCES, cat) == std::errc::permission_denied );\n+\n+  // As shown at https://gcc.gnu.org/ml/libstdc++/2018-08/msg00018.html\n+  // these two error codes might have the same value on AIX, but we still\n+  // expect both to be matched by system_category and so use generic_category:\n+#ifdef EEXIST\n+  cond = cat.default_error_condition(EEXIST);\n+  VERIFY( cond.value() == EEXIST );\n+  VERIFY( cond == std::errc::file_exists );\n+  VERIFY( cond.category() == std::generic_category() );\n+  VERIFY( std::error_code(EEXIST, cat) == std::errc::file_exists );\n+#endif\n+#ifdef ENOTEMPTY\n+  cond = cat.default_error_condition(ENOTEMPTY);\n+  VERIFY( cond.value() == ENOTEMPTY );\n+  VERIFY( cond == std::errc::directory_not_empty );\n+  VERIFY( cond.category() == std::generic_category() );\n+  VERIFY( std::error_code(ENOTEMPTY, cat) == std::errc::directory_not_empty );\n+#endif\n }\n \n void"}]}