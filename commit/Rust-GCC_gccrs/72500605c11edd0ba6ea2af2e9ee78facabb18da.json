{"sha": "72500605c11edd0ba6ea2af2e9ee78facabb18da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI1MDA2MDVjMTFlZGQwYmE2ZWEyYWYyZTllZTc4ZmFjYWJiMThkYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-07-24T16:13:04Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-07-24T16:13:04Z"}, "message": "gimplify.c (omp_default_clause): New function.\n\n\t* gimplify.c (omp_default_clause): New function.  Reorganize flow\n\tfor clarity. Broken out of ...\n\t(omp_notice_variable): ... here.\n\nFrom-SVN: r226170", "tree": {"sha": "c06c6e528c10d84f27e6a3cd86f7e65297242c49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c06c6e528c10d84f27e6a3cd86f7e65297242c49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72500605c11edd0ba6ea2af2e9ee78facabb18da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72500605c11edd0ba6ea2af2e9ee78facabb18da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72500605c11edd0ba6ea2af2e9ee78facabb18da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72500605c11edd0ba6ea2af2e9ee78facabb18da/comments", "author": null, "committer": null, "parents": [{"sha": "64447a2d5091ba15fbb1d7ce403533217e97163e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64447a2d5091ba15fbb1d7ce403533217e97163e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64447a2d5091ba15fbb1d7ce403533217e97163e"}], "stats": {"total": 176, "additions": 97, "deletions": 79}, "files": [{"sha": "6fa995921fc8ab661216432079c31dad1709e4e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72500605c11edd0ba6ea2af2e9ee78facabb18da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72500605c11edd0ba6ea2af2e9ee78facabb18da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72500605c11edd0ba6ea2af2e9ee78facabb18da", "patch": "@@ -1,3 +1,9 @@\n+2015-07-24  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* gimplify.c (omp_default_clause): New function.  Reorganize flow\n+\tfor clarity. Broken out of ...\n+\t(omp_notice_variable): ... here.\n+\n 2015-07-24  Gary Funck  <gary@intrepid.com>\n \n \tPR middle-end/66984"}, {"sha": "c8f271884188b9da5c337dc80e6916d1adf67931", "filename": "gcc/gimplify.c", "status": "modified", "additions": 91, "deletions": 79, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72500605c11edd0ba6ea2af2e9ee78facabb18da/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72500605c11edd0ba6ea2af2e9ee78facabb18da/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=72500605c11edd0ba6ea2af2e9ee78facabb18da", "patch": "@@ -5764,6 +5764,96 @@ omp_notice_threadprivate_variable (struct gimplify_omp_ctx *ctx, tree decl,\n   return false;\n }\n \n+/* Determine outer default flags for DECL mentioned in an OMP region\n+   but not declared in an enclosing clause.\n+\n+   ??? Some compiler-generated variables (like SAVE_EXPRs) could be\n+   remapped firstprivate instead of shared.  To some extent this is\n+   addressed in omp_firstprivatize_type_sizes, but not\n+   effectively.  */\n+\n+static unsigned\n+omp_default_clause (struct gimplify_omp_ctx *ctx, tree decl,\n+\t\t    bool in_code, unsigned flags)\n+{\n+  enum omp_clause_default_kind default_kind = ctx->default_kind;\n+  enum omp_clause_default_kind kind;\n+\n+  kind = lang_hooks.decls.omp_predetermined_sharing (decl);\n+  if (kind != OMP_CLAUSE_DEFAULT_UNSPECIFIED)\n+    default_kind = kind;\n+\n+  switch (default_kind)\n+    {\n+    case OMP_CLAUSE_DEFAULT_NONE:\n+      {\n+\tconst char *rtype;\n+\n+\tif (ctx->region_type & ORT_PARALLEL)\n+\t  rtype = \"parallel\";\n+\telse if (ctx->region_type & ORT_TASK)\n+\t  rtype = \"task\";\n+\telse if (ctx->region_type & ORT_TEAMS)\n+\t  rtype = \"teams\";\n+\telse\n+\t  gcc_unreachable ();\n+\t\n+\terror (\"%qE not specified in enclosing %s\",\n+\t       DECL_NAME (lang_hooks.decls.omp_report_decl (decl)), rtype);\n+\terror_at (ctx->location, \"enclosing %s\", rtype);\n+      }\n+      /* FALLTHRU */\n+    case OMP_CLAUSE_DEFAULT_SHARED:\n+      flags |= GOVD_SHARED;\n+      break;\n+    case OMP_CLAUSE_DEFAULT_PRIVATE:\n+      flags |= GOVD_PRIVATE;\n+      break;\n+    case OMP_CLAUSE_DEFAULT_FIRSTPRIVATE:\n+      flags |= GOVD_FIRSTPRIVATE;\n+      break;\n+    case OMP_CLAUSE_DEFAULT_UNSPECIFIED:\n+      /* decl will be either GOVD_FIRSTPRIVATE or GOVD_SHARED.  */\n+      gcc_assert ((ctx->region_type & ORT_TASK) != 0);\n+      if (struct gimplify_omp_ctx *octx = ctx->outer_context)\n+\t{\n+\t  omp_notice_variable (octx, decl, in_code);\n+\t  for (; octx; octx = octx->outer_context)\n+\t    {\n+\t      splay_tree_node n2;\n+\n+\t      if ((octx->region_type & (ORT_TARGET_DATA | ORT_TARGET)) != 0)\n+\t\tcontinue;\n+\t      n2 = splay_tree_lookup (octx->variables, (splay_tree_key) decl);\n+\t      if (n2 && (n2->value & GOVD_DATA_SHARE_CLASS) != GOVD_SHARED)\n+\t\t{\n+\t\t  flags |= GOVD_FIRSTPRIVATE;\n+\t\t  goto found_outer;\n+\t\t}\n+\t      if ((octx->region_type & (ORT_PARALLEL | ORT_TEAMS)) != 0)\n+\t\t{\n+\t\t  flags |= GOVD_SHARED;\n+\t\t  goto found_outer;\n+\t\t}\n+\t    }\n+\t}\n+      \n+      if (TREE_CODE (decl) == PARM_DECL\n+\t  || (!is_global_var (decl)\n+\t      && DECL_CONTEXT (decl) == current_function_decl))\n+\tflags |= GOVD_FIRSTPRIVATE;\n+      else\n+\tflags |= GOVD_SHARED;\n+    found_outer:\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  return flags;\n+}\n+\n /* Record the fact that DECL was used within the OMP context CTX.\n    IN_CODE is true when real code uses DECL, and false when we should\n    merely emit default(none) errors.  Return true if DECL is going to\n@@ -5822,90 +5912,12 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n \n   if (n == NULL)\n     {\n-      enum omp_clause_default_kind default_kind, kind;\n-      struct gimplify_omp_ctx *octx;\n-\n       if (ctx->region_type == ORT_WORKSHARE\n \t  || ctx->region_type == ORT_SIMD\n \t  || ctx->region_type == ORT_TARGET_DATA)\n \tgoto do_outer;\n \n-      /* ??? Some compiler-generated variables (like SAVE_EXPRs) could be\n-\t remapped firstprivate instead of shared.  To some extent this is\n-\t addressed in omp_firstprivatize_type_sizes, but not effectively.  */\n-      default_kind = ctx->default_kind;\n-      kind = lang_hooks.decls.omp_predetermined_sharing (decl);\n-      if (kind != OMP_CLAUSE_DEFAULT_UNSPECIFIED)\n-\tdefault_kind = kind;\n-\n-      switch (default_kind)\n-\t{\n-\tcase OMP_CLAUSE_DEFAULT_NONE:\n-\t  if ((ctx->region_type & ORT_PARALLEL) != 0)\n-\t    {\n-\t      error (\"%qE not specified in enclosing parallel\",\n-\t\t     DECL_NAME (lang_hooks.decls.omp_report_decl (decl)));\n-\t      error_at (ctx->location, \"enclosing parallel\");\n-\t    }\n-\t  else if ((ctx->region_type & ORT_TASK) != 0)\n-\t    {\n-\t      error (\"%qE not specified in enclosing task\",\n-\t\t     DECL_NAME (lang_hooks.decls.omp_report_decl (decl)));\n-\t      error_at (ctx->location, \"enclosing task\");\n-\t    }\n-\t  else if (ctx->region_type & ORT_TEAMS)\n-\t    {\n-\t      error (\"%qE not specified in enclosing teams construct\",\n-\t\t     DECL_NAME (lang_hooks.decls.omp_report_decl (decl)));\n-\t      error_at (ctx->location, \"enclosing teams construct\");\n-\t    }\n-\t  else\n-\t    gcc_unreachable ();\n-\t  /* FALLTHRU */\n-\tcase OMP_CLAUSE_DEFAULT_SHARED:\n-\t  flags |= GOVD_SHARED;\n-\t  break;\n-\tcase OMP_CLAUSE_DEFAULT_PRIVATE:\n-\t  flags |= GOVD_PRIVATE;\n-\t  break;\n-\tcase OMP_CLAUSE_DEFAULT_FIRSTPRIVATE:\n-\t  flags |= GOVD_FIRSTPRIVATE;\n-\t  break;\n-\tcase OMP_CLAUSE_DEFAULT_UNSPECIFIED:\n-\t  /* decl will be either GOVD_FIRSTPRIVATE or GOVD_SHARED.  */\n-\t  gcc_assert ((ctx->region_type & ORT_TASK) != 0);\n-\t  if (ctx->outer_context)\n-\t    omp_notice_variable (ctx->outer_context, decl, in_code);\n-\t  for (octx = ctx->outer_context; octx; octx = octx->outer_context)\n-\t    {\n-\t      splay_tree_node n2;\n-\n-\t      if ((octx->region_type & (ORT_TARGET_DATA | ORT_TARGET)) != 0)\n-\t\tcontinue;\n-\t      n2 = splay_tree_lookup (octx->variables, (splay_tree_key) decl);\n-\t      if (n2 && (n2->value & GOVD_DATA_SHARE_CLASS) != GOVD_SHARED)\n-\t\t{\n-\t\t  flags |= GOVD_FIRSTPRIVATE;\n-\t\t  break;\n-\t\t}\n-\t      if ((octx->region_type & (ORT_PARALLEL | ORT_TEAMS)) != 0)\n-\t\tbreak;\n-\t    }\n-\t  if (flags & GOVD_FIRSTPRIVATE)\n-\t    break;\n-\t  if (octx == NULL\n-\t      && (TREE_CODE (decl) == PARM_DECL\n-\t\t  || (!is_global_var (decl)\n-\t\t      && DECL_CONTEXT (decl) == current_function_decl)))\n-\t    {\n-\t      flags |= GOVD_FIRSTPRIVATE;\n-\t      break;\n-\t    }\n-\t  flags |= GOVD_SHARED;\n-\t  break;\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n+      flags = omp_default_clause (ctx, decl, in_code, flags);\n \n       if ((flags & GOVD_PRIVATE)\n \t  && lang_hooks.decls.omp_private_outer_ref (decl))"}]}