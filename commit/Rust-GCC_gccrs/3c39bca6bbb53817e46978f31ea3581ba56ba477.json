{"sha": "3c39bca6bbb53817e46978f31ea3581ba56ba477", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MzOWJjYTZiYmI1MzgxN2U0Njk3OGYzMWVhMzU4MWJhNTZiYTQ3Nw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2010-09-03T13:14:14Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2010-09-03T13:14:14Z"}, "message": "configure.ac: Use the GCC_AC_ENABLE_DECIMAL_FLOAT macro.\n\ngcc/\n\n2010-09-03  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t    * configure.ac: Use the GCC_AC_ENABLE_DECIMAL_FLOAT macro.\n\t    * Makefile.in: Add aclocal.m4 dependency to dfp.m4.\n\t    * configure: Regenerate.\n\t    * aclocal.m4: Regenerate.\n\nconfig/\n\n2010-09-03  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t    * dfp.m4: New file.\n\nlibdecnumber/\n\n2010-09-03  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t    * configure.ac: Use the GCC_AC_ENABLE_DECIMAL_FLOAT macro.\n\t    * Makefile.in: Add aclocal.m4 dependency to dfp.m4.\n\t    * configure: Regenerate.\n\t    * aclocal.m4: Regenerate.\n\nlibgcc/\n\n2010-09-03  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t    * configure.ac: Use the GCC_AC_ENABLE_DECIMAL_FLOAT macro.\n\t    Include dfp.m4.\n\t    * configure: Regenerate.\n\nFrom-SVN: r163815", "tree": {"sha": "abfd405aaa8d173dd73eb7fa70486cbbba270fca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abfd405aaa8d173dd73eb7fa70486cbbba270fca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c39bca6bbb53817e46978f31ea3581ba56ba477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c39bca6bbb53817e46978f31ea3581ba56ba477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c39bca6bbb53817e46978f31ea3581ba56ba477", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c39bca6bbb53817e46978f31ea3581ba56ba477/comments", "author": null, "committer": null, "parents": [{"sha": "efe13e0f32fc1ffb298492dbca5a32b7e6cfdcc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe13e0f32fc1ffb298492dbca5a32b7e6cfdcc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efe13e0f32fc1ffb298492dbca5a32b7e6cfdcc5"}], "stats": {"total": 199, "additions": 85, "deletions": 114}, "files": [{"sha": "cc20f81233d80a5a49b6a6008d8a4195dca2a3f6", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c39bca6bbb53817e46978f31ea3581ba56ba477/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c39bca6bbb53817e46978f31ea3581ba56ba477/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=3c39bca6bbb53817e46978f31ea3581ba56ba477", "patch": "@@ -1,3 +1,7 @@\n+2010-09-03  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* dfp.m4: New file.\n+\n 2010-09-01  Andi Kleen\t<ak@linux.intel.com>\n \n \t* bootstrap-lto.mk (STAGE2_CFLAGS, STAGE3_CFLAGS): Change"}, {"sha": "4cace763fa4152e45945010cb412294e9e0d5f6a", "filename": "config/dfp.m4", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c39bca6bbb53817e46978f31ea3581ba56ba477/config%2Fdfp.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c39bca6bbb53817e46978f31ea3581ba56ba477/config%2Fdfp.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fdfp.m4?ref=3c39bca6bbb53817e46978f31ea3581ba56ba477", "patch": "@@ -0,0 +1,53 @@\n+dnl @synopsis GCC_AC_ENABLE_DECIMAL_FLOAT([target triplet])\n+dnl\n+dnl Enable C extension for decimal float if target supports it.\n+dnl\n+dnl @author Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+AC_DEFUN([GCC_AC_ENABLE_DECIMAL_FLOAT],\n+[\n+AC_ARG_ENABLE(decimal-float,\n+[  --enable-decimal-float={no,yes,bid,dpd}\n+\t\t\tenable decimal float extension to C.  Selecting 'bid'\n+\t\t\tor 'dpd' choses which decimal floating point format\n+\t\t\tto use],\n+[\n+  case $enable_decimal_float in\n+    yes | no | bid | dpd) ;;\n+    *) AC_MSG_ERROR(['$enable_decimal_float' is an invalid value for --enable-decimal-float.\n+Valid choices are 'yes', 'bid', 'dpd', and 'no'.]) ;;\n+  esac\n+],\n+[\n+  case $1 in\n+    powerpc*-*-linux* | i?86*-*-linux* | x86_64*-*-linux* | s390*-*-linux*)\n+      enable_decimal_float=yes\n+      ;;\n+    *)\n+      AC_MSG_WARN(decimal float is not supported for this target, ignored)\n+      enable_decimal_float=no\n+      ;;\n+  esac\n+])\n+\n+# x86's use BID format instead of DPD\n+case x$enable_decimal_float in\n+  xyes)\n+    case $1 in\n+      i?86*-*-* | x86_64*-*-*)\n+\tenable_decimal_float=bid\n+\t;;\n+      *)\n+\tenable_decimal_float=dpd\n+\t;;\n+    esac\n+    ;;\n+  xno)\n+    # ENABLE_DECIMAL_FLOAT is set to 0. But we have to have proper\n+    # dependency on libdecnumber.\n+    enable_decimal_float=dpd\n+    ;;\n+esac\n+AC_SUBST(enable_decimal_float)\n+\n+])\n\\ No newline at end of file"}, {"sha": "d64260d98c16bb85653b0f38be52045c3028143f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c39bca6bbb53817e46978f31ea3581ba56ba477/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c39bca6bbb53817e46978f31ea3581ba56ba477/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c39bca6bbb53817e46978f31ea3581ba56ba477", "patch": "@@ -1,3 +1,10 @@\n+2010-09-03  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* configure.ac: Use the GCC_AC_ENABLE_DECIMAL_FLOAT macro.\n+\t* Makefile.in: Add aclocal.m4 dependency to dfp.m4.\n+\t* configure: Regenerate.\n+\t* aclocal.m4: Regenerate.\n+\n 2010-09-03  Jan Hubicka  <jh@suse.cz>\n \n \tPR lto/44812"}, {"sha": "3a34064999c75bc65f41b7e6b7d2c19ebadb23f5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c39bca6bbb53817e46978f31ea3581ba56ba477/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c39bca6bbb53817e46978f31ea3581ba56ba477/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3c39bca6bbb53817e46978f31ea3581ba56ba477", "patch": "@@ -1712,6 +1712,7 @@ aclocal_deps = \\\n         $(srcdir)/../config/stdint.m4 \\\n \t$(srcdir)/../config/unwind_ipinfo.m4 \\\n \t$(srcdir)/../config/warnings.m4 \\\n+\t$(srcdir)/../config/dfp.m4 \\\n \t$(srcdir)/acinclude.m4\n \n $(srcdir)/configure: @MAINT@ $(srcdir)/configure.ac $(srcdir)/aclocal.m4"}, {"sha": "bbcbc7fdcf575689b0b3730c650a56a280383ee5", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c39bca6bbb53817e46978f31ea3581ba56ba477/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c39bca6bbb53817e46978f31ea3581ba56ba477/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=3c39bca6bbb53817e46978f31ea3581ba56ba477", "patch": "@@ -606,54 +606,12 @@ AC_ARG_ENABLE(__cxa_atexit,\n [], [])\n \n # Enable C extension for decimal float if target supports it.\n-AC_ARG_ENABLE(decimal-float,\n-[  --enable-decimal-float={no,yes,bid,dpd}\n-\t\t\tenable decimal float extension to C.  Selecting 'bid'\n-\t\t\tor 'dpd' choses which decimal floating point format\n-\t\t\tto use],\n-[\n-  case $enable_decimal_float in\n-    yes | no | bid | dpd) ;;\n-    *) AC_MSG_ERROR(['$enable_decimal_float' is an invalid value for --enable-decimal-float.\n-Valid choices are 'yes', 'bid', 'dpd', and 'no'.]) ;;\n-  esac\n-],\n-[\n-  case $target in\n-    powerpc*-*-linux* | i?86*-*-linux* | x86_64*-*-linux*)\n-      enable_decimal_float=yes\n-      ;;\n-    *)\n-      AC_MSG_WARN(decimal float is not supported for this target, ignored)\n-      enable_decimal_float=no\n-      ;;\n-  esac\n-])\n+GCC_AC_ENABLE_DECIMAL_FLOAT([$target])\n \n dfp=`if test $enable_decimal_float != no; then echo 1; else echo 0; fi`\n AC_DEFINE_UNQUOTED(ENABLE_DECIMAL_FLOAT, $dfp,\n [Define to 1 to enable decimal float extension to C.])\n \n-# x86's use BID format instead of DPD\n-case x$enable_decimal_float in\n-  xyes)\n-    case $target in\n-      i?86*-*-linux* | x86_64*-*-linux*)\n-\tenable_decimal_float=bid\n-\t;;\n-      *)\n-\tenable_decimal_float=dpd\n-\t;;\n-    esac\n-    ;;\n-  xno)\n-    # ENABLE_DECIMAL_FLOAT is set to 0. But we have to have proper\n-    # dependency on libdecnumber.\n-    enable_decimal_float=dpd\n-    ;;\n-esac\n-AC_SUBST(enable_decimal_float)\n-\n bid=`if test $enable_decimal_float = bid; then echo 1; else echo 0; fi`\n AC_DEFINE_UNQUOTED(ENABLE_DECIMAL_BID_FORMAT, $bid,\n [Define to 1 to specify that we are using the BID decimal floating"}, {"sha": "b7952d089684463eeefa804d992dc27bf16d976c", "filename": "libdecnumber/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c39bca6bbb53817e46978f31ea3581ba56ba477/libdecnumber%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c39bca6bbb53817e46978f31ea3581ba56ba477/libdecnumber%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FChangeLog?ref=3c39bca6bbb53817e46978f31ea3581ba56ba477", "patch": "@@ -1,3 +1,10 @@\n+2010-09-03  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* configure.ac: Use the GCC_AC_ENABLE_DECIMAL_FLOAT macro.\n+\t* Makefile.in: Add aclocal.m4 dependency to dfp.m4.\n+\t* configure: Regenerate.\n+\t* aclocal.m4: Regenerate.\n+\n 2010-08-21  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* configure: Regenerate."}, {"sha": "6424c3857deab6fbe29001addd49ddb8d22452da", "filename": "libdecnumber/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c39bca6bbb53817e46978f31ea3581ba56ba477/libdecnumber%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c39bca6bbb53817e46978f31ea3581ba56ba477/libdecnumber%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FMakefile.in?ref=3c39bca6bbb53817e46978f31ea3581ba56ba477", "patch": "@@ -98,6 +98,7 @@ aclocal_deps = \\\n \t$(srcdir)/../config/stdint.m4 \\\n \t$(srcdir)/../config/warnings.m4 \\\n \t$(srcdir)/../config/override.m4 \\\n+\t$(srcdir)/../config/dfp.m4 \\\n \t$(srcdir)/configure.ac\n \n $(srcdir)/aclocal.m4: @MAINT@ $(aclocal_deps)"}, {"sha": "a4cbf55f1a4486ea5d810a9e6c3cb894c62dc32d", "filename": "libdecnumber/configure.ac", "status": "modified", "additions": 2, "deletions": 36, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c39bca6bbb53817e46978f31ea3581ba56ba477/libdecnumber%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c39bca6bbb53817e46978f31ea3581ba56ba477/libdecnumber%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fconfigure.ac?ref=3c39bca6bbb53817e46978f31ea3581ba56ba477", "patch": "@@ -75,42 +75,8 @@ AC_CANONICAL_TARGET\n # Default decimal format\n # If you change the defaults here, be sure to change them in the GCC directory also\n AC_MSG_CHECKING([for decimal floating point])\n-AC_ARG_ENABLE(decimal-float,\n-[  --enable-decimal-float={no,yes,bid,dpd}\n-\t\t\tenable decimal float extension to C.  Selecting 'bid'\n-\t\t\tor 'dpd' choses which decimal floating point format\n-\t\t\tto use],\n-[\n-  case $enable_decimal_float in\n-    yes | no | bid | dpd) ;;\n-    *) AC_MSG_ERROR(['$enable_decimal_float' is an invalid value for --enable-decimal-float.\n-Valid choices are 'yes', 'bid', 'dpd', and 'no'.]) ;;\n-  esac\n-],\n-[\n-  case $target in\n-    powerpc*-*-linux* | i?86*-*-linux* | x86_64*-*-linux*)\n-      enable_decimal_float=yes\n-      ;;\n-    *)\n-      enable_decimal_float=no\n-      ;;\n-  esac\n-])\n-\n-# x86's use BID format instead of DPD\n-# In theory --enable-decimal-float=no should not compile anything\n-# For the sake of simplicity, just use the default format in this directory\n-if test x$enable_decimal_float = xyes -o x$enable_decimal_float = xno; then\n-  case $target in\n-    i?86*-*-linux* | x86_64*-*-linux*)\n-      enable_decimal_float=bid\n-      ;;\n-    *)\n-      enable_decimal_float=dpd\n-      ;;\n-  esac\n-fi\n+\n+GCC_AC_ENABLE_DECIMAL_FLOAT([$target])\n \n # If BID is being used, additional objects should be linked in.\n if test x$enable_decimal_float = xbid; then"}, {"sha": "bb5bc0fd5b35b51ca39d76e79a010d24e8c6cdda", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c39bca6bbb53817e46978f31ea3581ba56ba477/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c39bca6bbb53817e46978f31ea3581ba56ba477/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=3c39bca6bbb53817e46978f31ea3581ba56ba477", "patch": "@@ -1,3 +1,9 @@\n+2010-09-03  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* configure.ac: Use the GCC_AC_ENABLE_DECIMAL_FLOAT macro.\n+\tInclude dfp.m4.\n+\t* configure: Regenerate.\n+\n 2010-09-01  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config.host (i[34567]86-*-freebsd*, x86_64-*-freebsd*): Add"}, {"sha": "044be7a49a170a855572edc3f2d2056e0db623a2", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c39bca6bbb53817e46978f31ea3581ba56ba477/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c39bca6bbb53817e46978f31ea3581ba56ba477/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=3c39bca6bbb53817e46978f31ea3581ba56ba477", "patch": "@@ -147,6 +147,7 @@ configure_deps = \\\n \t$(srcdir)/../config/acx.m4 \\\n \t$(srcdir)/../config/no-executables.m4 \\\n \t$(srcdir)/../config/override.m4 \\\n+\t$(srcdir)/../config/dfp.m4 \\\n \n $(srcdir)/configure: @MAINT@ $(srcdir)/configure.ac $(configure_deps)\n \tcd $(srcdir) && $(AUTOCONF)"}, {"sha": "60766371d3a44fd5d0b989d9e3fe33bcda8f456e", "filename": "libgcc/configure.ac", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c39bca6bbb53817e46978f31ea3581ba56ba477/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c39bca6bbb53817e46978f31ea3581ba56ba477/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=3c39bca6bbb53817e46978f31ea3581ba56ba477", "patch": "@@ -5,6 +5,7 @@ sinclude(../config/tls.m4)\n sinclude(../config/acx.m4)\n sinclude(../config/no-executables.m4)\n sinclude(../config/override.m4)\n+sinclude(../config/dfp.m4)\n \n AC_PREREQ(2.64)\n AC_INIT([GNU C Runtime Library], 1.0,,[libgcc])\n@@ -125,41 +126,7 @@ AC_CACHE_CHECK([whether decimal floating point is supported], [libgcc_cv_dfp],\n decimal_float=$libgcc_cv_dfp\n AC_SUBST(decimal_float)\n \n-AC_ARG_ENABLE(decimal-float,\n-[  --enable-decimal-float={no,yes,bid,dpd}\n-\t\t\tenable decimal float extension to C.  Selecting 'bid'\n-\t\t\tor 'dpd' choses which decimal floating point format\n-\t\t\tto use],\n-[\n-  case $enable_decimal_float in\n-    yes | no | bid | dpd) ;;\n-    *) AC_MSG_ERROR(['$enable_decimal_float' is an invalid value for --enable-decimal-float.\n-Valid choices are 'yes', 'bid', 'dpd', and 'no'.]) ;;\n-  esac\n-],\n-[\n-  case $host in\n-    powerpc*-*-linux* | i?86*-*-linux* | x86_64*-*-linux*)\n-      enable_decimal_float=yes\n-      ;;\n-    *)\n-      enable_decimal_float=no\n-      ;;\n-  esac\n-])\n-\n-# x86's use BID format instead of DPD\n-if test x$enable_decimal_float = xyes; then\n-  case $host in\n-    i?86*-*-linux* | x86_64*-*-linux*)\n-      enable_decimal_float=bid\n-      ;;\n-    *)\n-      enable_decimal_float=dpd\n-      ;;\n-  esac\n-fi\n-AC_SUBST(enable_decimal_float)\n+GCC_AC_ENABLE_DECIMAL_FLOAT([$host])\n \n # Check for fixed-point support.\n AC_CACHE_CHECK([whether fixed-point is supported], [libgcc_cv_fixed_point],"}]}