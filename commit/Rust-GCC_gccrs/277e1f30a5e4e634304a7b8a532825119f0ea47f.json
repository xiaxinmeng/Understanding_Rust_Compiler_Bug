{"sha": "277e1f30a5e4e634304a7b8a532825119f0ea47f", "node_id": "C_kwDOANBUbNoAKDI3N2UxZjMwYTVlNGU2MzQzMDRhN2I4YTUzMjgyNTExOWYwZWE0N2Y", "commit": {"author": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2023-02-06T14:32:21Z"}, "committer": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2023-02-06T14:32:21Z"}, "message": "aarch64: Fix up bfmlal lane pattern [PR104921]\n\nAs the testcase shows, this pattern had an incorrect constraint leading\nto GCC's output getting rejected by the assembler.\n\nThis patch fixes the constraint accordingly.\n\nThe test is split into two: one that can run without bf16 support from\nthe assembler and another that checks that the output actually assembles\nwhen such support is available.\n\nBootstrapped/regtested on aarch64-linux-gnu.\n\nOK for GCC 13? Or better to wait for next stage 1? What about backports?\n\nThanks,\nAlex\n\ngcc/ChangeLog:\n\n\tPR target/104921\n\t* config/aarch64/aarch64-simd.md (aarch64_bfmlal<bt>_lane<q>v4sf):\n\tUse correct constraint for operand 3.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/104921\n\t* gcc.target/aarch64/pr104921-1.c: New test.\n\t* gcc.target/aarch64/pr104921-2.c: New test.\n\t* gcc.target/aarch64/pr104921.x: Include file for new tests.", "tree": {"sha": "734305a13f47ddd0132d4a565f55c9235a262126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/734305a13f47ddd0132d4a565f55c9235a262126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/277e1f30a5e4e634304a7b8a532825119f0ea47f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/277e1f30a5e4e634304a7b8a532825119f0ea47f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/277e1f30a5e4e634304a7b8a532825119f0ea47f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/277e1f30a5e4e634304a7b8a532825119f0ea47f/comments", "author": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0afcb713217628de46a6e912eea286ed612ebcbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0afcb713217628de46a6e912eea286ed612ebcbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0afcb713217628de46a6e912eea286ed612ebcbc"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "dd5eed387f2095950729d4389afb4da9daf71037", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277e1f30a5e4e634304a7b8a532825119f0ea47f/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277e1f30a5e4e634304a7b8a532825119f0ea47f/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=277e1f30a5e4e634304a7b8a532825119f0ea47f", "patch": "@@ -9153,7 +9153,7 @@\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n         (plus: V4SF (match_operand:V4SF 1 \"register_operand\" \"0\")\n                     (unspec:V4SF [(match_operand:V8BF 2 \"register_operand\" \"w\")\n-                                  (match_operand:VBF 3 \"register_operand\" \"w\")\n+                                  (match_operand:VBF 3 \"register_operand\" \"x\")\n                                   (match_operand:SI 4 \"const_int_operand\" \"n\")]\n                      BF_MLA)))]\n   \"TARGET_BF16_SIMD\""}, {"sha": "dcf6fe7d90d19b7dd98b859b44ee010bc37ff8fb", "filename": "gcc/testsuite/gcc.target/aarch64/pr104921-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277e1f30a5e4e634304a7b8a532825119f0ea47f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr104921-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277e1f30a5e4e634304a7b8a532825119f0ea47f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr104921-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr104921-1.c?ref=277e1f30a5e4e634304a7b8a532825119f0ea47f", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O2 -march=armv8.2-a+bf16 -std=gnu99 -save-temps\" }  */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include \"pr104921.x\"\n+\n+/*\n+**foo:\n+**\tmov\tv([0-9]|1[0-5])\\.8b, v16\\.8b\n+**\tbfmlalb\tv0\\.4s, v1\\.8h, v([0-9]|1[0-5])\\.h\\[0\\]\n+**\tret\n+*/"}, {"sha": "211fcd0aca99c3cf395611e2daac0bfe847435b7", "filename": "gcc/testsuite/gcc.target/aarch64/pr104921-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277e1f30a5e4e634304a7b8a532825119f0ea47f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr104921-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277e1f30a5e4e634304a7b8a532825119f0ea47f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr104921-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr104921-2.c?ref=277e1f30a5e4e634304a7b8a532825119f0ea47f", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do assemble } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+/* { dg-additional-options \"-O2 -std=gnu99\" }  */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+\n+#include \"pr104921.x\""}, {"sha": "1e1a6f24e22b674277bfd0ee0c05e085941d6be4", "filename": "gcc/testsuite/gcc.target/aarch64/pr104921.x", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277e1f30a5e4e634304a7b8a532825119f0ea47f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr104921.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277e1f30a5e4e634304a7b8a532825119f0ea47f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr104921.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr104921.x?ref=277e1f30a5e4e634304a7b8a532825119f0ea47f", "patch": "@@ -0,0 +1,9 @@\n+#include <arm_neon.h>\n+\n+float32x4_t\n+foo(float32x4_t x, bfloat16x8_t a)\n+{\n+  register bfloat16x4_t b asm (\"v16\");\n+  asm volatile (\"\" : \"=w\"(b));\n+  return vbfmlalbq_lane_f32 (x, a, b, 0);\n+}"}]}