{"sha": "261401301f185163dbca9103c8d62fe8f3cd84d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYxNDAxMzAxZjE4NTE2M2RiY2E5MTAzYzhkNjJmZThmM2NkODRkNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-02-28T21:34:23Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-02-28T21:34:23Z"}, "message": "re PR debug/39267 (gdb testsuite regressions)\n\n\n\tPR debug/39267\n\t* cgraph.h (varpool_output_debug_info): Remove.\n\t* cgraphunit.c (varpool_output_debug_info): Remove.\n\t* dwarf2out.c (deferred_locations_struct): New struct\n\t(deferred_locations): New type.\n\t(deferred_locations_list): New static var.\n\t(deffer_location): New function.\n\t(gen_variable_die): Use it.\n\t(decls_for_scope): Output info on local static vars.\n\t(dwarf2out_finish): Process deferred locations.\n\t* varpool.c (varpool_output_debug_info): Remove.\n\nFrom-SVN: r144496", "tree": {"sha": "a1b57e26048b1bb2efd2b164a77163315bcc41ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1b57e26048b1bb2efd2b164a77163315bcc41ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/261401301f185163dbca9103c8d62fe8f3cd84d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261401301f185163dbca9103c8d62fe8f3cd84d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/261401301f185163dbca9103c8d62fe8f3cd84d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261401301f185163dbca9103c8d62fe8f3cd84d6/comments", "author": null, "committer": null, "parents": [{"sha": "593b6421cddcc4adb3c4d905248430ffe485330a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/593b6421cddcc4adb3c4d905248430ffe485330a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/593b6421cddcc4adb3c4d905248430ffe485330a"}], "stats": {"total": 108, "additions": 72, "deletions": 36}, "files": [{"sha": "8acc502d8c96e66e147e9ff9f35de7e9a2f57023", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261401301f185163dbca9103c8d62fe8f3cd84d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261401301f185163dbca9103c8d62fe8f3cd84d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=261401301f185163dbca9103c8d62fe8f3cd84d6", "patch": "@@ -1,3 +1,17 @@\n+2009-02-27  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR debug/39267\n+\t* cgraph.h (varpool_output_debug_info): Remove.\n+\t* cgraphunit.c (varpool_output_debug_info): Remove.\n+\t* dwarf2out.c (deferred_locations_struct): New struct\n+\t(deferred_locations): New type.\n+\t(deferred_locations_list): New static var.\n+\t(deffer_location): New function.\n+\t(gen_variable_die): Use it.\n+\t(decls_for_scope): Output info on local static vars.\n+\t(dwarf2out_finish): Process deferred locations.\n+\t* varpool.c (varpool_output_debug_info): Remove.\n+\n 2009-02-27  Jan Hubicka  <jh@suse.cz>\n \n \tPR debug/39267"}, {"sha": "57d4772cdd529e89ae87705e33a90cafd549784c", "filename": "gcc/cgraph.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261401301f185163dbca9103c8d62fe8f3cd84d6/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261401301f185163dbca9103c8d62fe8f3cd84d6/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=261401301f185163dbca9103c8d62fe8f3cd84d6", "patch": "@@ -413,7 +413,6 @@ enum availability cgraph_variable_initializer_availability (struct varpool_node\n bool varpool_assemble_pending_decls (void);\n bool varpool_assemble_decl (struct varpool_node *node);\n bool varpool_analyze_pending_decls (void);\n-void varpool_output_debug_info (void);\n void varpool_remove_unreferenced_decls (void);\n void varpool_empty_needed_queue (void);\n "}, {"sha": "07998d4af8c17369acb34d079eeb64a1cdee71f1", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261401301f185163dbca9103c8d62fe8f3cd84d6/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261401301f185163dbca9103c8d62fe8f3cd84d6/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=261401301f185163dbca9103c8d62fe8f3cd84d6", "patch": "@@ -1313,7 +1313,6 @@ cgraph_optimize (void)\n \n       varpool_assemble_pending_decls ();\n     }\n-  varpool_output_debug_info ();\n   cgraph_process_new_functions ();\n   cgraph_state = CGRAPH_STATE_FINISHED;\n "}, {"sha": "48178b7cbcb6d497334406247c1a5020acdebc92", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261401301f185163dbca9103c8d62fe8f3cd84d6/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261401301f185163dbca9103c8d62fe8f3cd84d6/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=261401301f185163dbca9103c8d62fe8f3cd84d6", "patch": "@@ -3405,6 +3405,17 @@ typedef const struct die_struct *const_dw_die_ref;\n typedef struct dw_loc_descr_struct *dw_loc_descr_ref;\n typedef struct dw_loc_list_struct *dw_loc_list_ref;\n \n+typedef struct deferred_locations_struct GTY(()) \n+{\n+  tree variable;\n+  dw_die_ref die;\n+} deferred_locations;\n+\n+DEF_VEC_O(deferred_locations);\n+DEF_VEC_ALLOC_O(deferred_locations,gc);\n+\n+static GTY(()) VEC(deferred_locations, gc) *deferred_locations_list;\n+\n /* Each DIE may have a series of attribute/value pairs.  Values\n    can take on several forms.  The forms that are used in this\n    implementation are listed below.  */\n@@ -11858,6 +11869,17 @@ add_location_or_const_value_attribute (dw_die_ref die, tree decl,\n   tree_add_const_value_attribute (die, decl);\n }\n \n+/* Add VARIABLE and DIE into deferred locations list.  */\n+\n+static void\n+defer_location (tree variable, dw_die_ref die)\n+{\n+  deferred_locations entry;\n+  entry.variable = variable;\n+  entry.die = die;\n+  VEC_safe_push (deferred_locations, gc, deferred_locations_list, &entry);\n+}\n+\n /* Helper function for tree_add_const_value_attribute.  Natively encode\n    initializer INIT into an array.  Return true if successful.  */\n \n@@ -14054,7 +14076,11 @@ gen_variable_die (tree decl, dw_die_ref context_die)\n \n   if (! declaration && ! DECL_ABSTRACT (decl))\n     {\n-      add_location_or_const_value_attribute (var_die, decl, DW_AT_location);\n+      if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl)\n+          && !TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n+\tdefer_location (decl, var_die);\n+      else\n+        add_location_or_const_value_attribute (var_die, decl, DW_AT_location);\n       add_pubname (decl, var_die);\n     }\n   else\n@@ -14934,16 +14960,6 @@ decls_for_scope (tree stmt, dw_die_ref context_die, int depth)\n \n \t  if (die != NULL && die->die_parent == NULL)\n \t    add_child_die (context_die, die);\n-\t  /* Do not produce debug information for static variables since\n-\t     these might be optimized out.  We are called for these later\n-\t     in varpool_analyze_pending_decls.\n-\n-\t     But *do* produce it for Fortran COMMON variables because,\n-\t     even though they are static, their names can differ depending\n-\t     on the scope, which we need to preserve.  */\n-\t  if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl)\n-\t      && !(is_fortran () && TREE_PUBLIC (decl)))\n-\t    ;\n \t  else if (TREE_CODE (decl) == IMPORTED_DECL)\n \t    dwarf2out_imported_module_or_decl_1 (decl, DECL_NAME (decl),\n \t\t\t\t\t\t stmt, context_die);\n@@ -16443,6 +16459,7 @@ dwarf2out_finish (const char *filename)\n {\n   limbo_die_node *node, *next_node;\n   dw_die_ref die = 0;\n+  unsigned int i;\n \n   /* Add the name for the main input file now.  We delayed this from\n      dwarf2out_init to avoid complications with PCH.  */\n@@ -16457,6 +16474,14 @@ dwarf2out_finish (const char *filename)\n \tadd_comp_dir_attribute (comp_unit_die);\n     }\n \n+  for (i = 0; i < VEC_length (deferred_locations, deferred_locations_list); i++)\n+    {\n+      add_location_or_const_value_attribute (\n+        VEC_index (deferred_locations, deferred_locations_list, i)->die,\n+        VEC_index (deferred_locations, deferred_locations_list, i)->variable,\n+\tDW_AT_location);\n+    }\n+\n   /* Traverse the limbo die list, and add parent/child links.  The only\n      dies without parents that should be here are concrete instances of\n      inline functions, and the comp_unit_die.  We can ignore the comp_unit_die."}, {"sha": "1793202de412a416e1bfeab1369346a6f7fc7bcc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261401301f185163dbca9103c8d62fe8f3cd84d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261401301f185163dbca9103c8d62fe8f3cd84d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=261401301f185163dbca9103c8d62fe8f3cd84d6", "patch": "@@ -1,3 +1,17 @@\n+2009-02-26  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR debug/39267\n+\t* cgraph.h (varpool_output_debug_info): Remove.\n+\t* cgraphunit.c (varpool_output_debug_info): Remove.\n+\t* dwarf2out.c (deferred_locations_struct): New struct\n+\t(deferred_locations): New type.\n+\t(deferred_locations_list): New static var.\n+\t(deffer_location): New function.\n+\t(gen_variable_die): Use it.\n+\t(decls_for_scope): Output info on local static vars.\n+\t(dwarf2out_finish): Process deferred locations.\n+\t* varpool.c (varpool_output_debug_info): Remove.\n+\n 2009-02-26  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c++/37789"}, {"sha": "b9b5d0b37438c2fa2f070089506815f879583339", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/static1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261401301f185163dbca9103c8d62fe8f3cd84d6/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fstatic1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261401301f185163dbca9103c8d62fe8f3cd84d6/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fstatic1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fstatic1.c?ref=261401301f185163dbca9103c8d62fe8f3cd84d6", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -gdwarf-2\" } */\n+void\n+main(void)\n+{\n+ static int unused_local_var;\n+}\n+/* { dg-final { scan-assembler \"unused_local_var\" } } */"}, {"sha": "8c1259b14eccca07c364c9731f4134050024915f", "filename": "gcc/varpool.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261401301f185163dbca9103c8d62fe8f3cd84d6/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261401301f185163dbca9103c8d62fe8f3cd84d6/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=261401301f185163dbca9103c8d62fe8f3cd84d6", "patch": "@@ -456,29 +456,6 @@ varpool_empty_needed_queue (void)\n   varpool_last_needed_node = NULL;\n }\n \n-/* Output all variables enqueued to be assembled.  */\n-void\n-varpool_output_debug_info (void)\n-{\n-  timevar_push (TV_SYMOUT);\n-  if (errorcount == 0 && sorrycount == 0)\n-    while (varpool_assembled_nodes_queue)\n-      {\n-\tstruct varpool_node *node = varpool_assembled_nodes_queue;\n-\n-\t/* Local static variables are never seen by check_global_declarations\n-\t   so we need to output debug info by hand.  */\n-\tif (DECL_CONTEXT (node->decl)\n-\t    && (TREE_CODE (DECL_CONTEXT (node->decl)) == BLOCK\n-\t\t|| TREE_CODE (DECL_CONTEXT (node->decl)) == FUNCTION_DECL)\n-\t    && errorcount == 0 && sorrycount == 0)\n-\t     (*debug_hooks->global_decl) (node->decl);\n-\tvarpool_assembled_nodes_queue = node->next_needed;\n-\tnode->next_needed = 0;\n-      }\n-  timevar_pop (TV_SYMOUT);\n-}\n-\n /* Create a new global variable of type TYPE.  */\n tree\n add_new_static_var (tree type)"}]}