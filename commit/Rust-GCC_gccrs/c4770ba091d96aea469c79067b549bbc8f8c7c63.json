{"sha": "c4770ba091d96aea469c79067b549bbc8f8c7c63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ3NzBiYTA5MWQ5NmFlYTQ2OWM3OTA2N2I1NDliYmM4ZjhjN2M2Mw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-09-29T16:19:58Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-09-29T16:19:58Z"}, "message": "re PR fortran/91714 (Accepts type statement without delimiter in free form)\n\n2019-09-29  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/91714\n\t* decl.c (gfc_match_decl_type_spec):  Issue errors for a few\n\tmangled types.\n\n2019-09-29  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/91714\n\t* gfortran.dg/dec_type_print_3.f90: Update dg-error regex.\n\t* gfortran.dg/pr91714.f90: New test.\n\nFrom-SVN: r276270", "tree": {"sha": "d5bc26b758645c10a29c87d7551a7ae84021ebf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5bc26b758645c10a29c87d7551a7ae84021ebf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4770ba091d96aea469c79067b549bbc8f8c7c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4770ba091d96aea469c79067b549bbc8f8c7c63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4770ba091d96aea469c79067b549bbc8f8c7c63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4770ba091d96aea469c79067b549bbc8f8c7c63/comments", "author": null, "committer": null, "parents": [{"sha": "56b070e3bbc4364f86357d6651fe1391464db6d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b070e3bbc4364f86357d6651fe1391464db6d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b070e3bbc4364f86357d6651fe1391464db6d6"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "d4f39cc6dfaf1872b5d7fe6e6af56b17438d820d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4770ba091d96aea469c79067b549bbc8f8c7c63/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4770ba091d96aea469c79067b549bbc8f8c7c63/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c4770ba091d96aea469c79067b549bbc8f8c7c63", "patch": "@@ -1,3 +1,9 @@\n+2019-09-29  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/91714\n+\t* decl.c (gfc_match_decl_type_spec):  Issue errors for a few\n+\tmangled types.\n+\n 2019-09-29  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/91726"}, {"sha": "3ba61a08381fae5316446068a0efc9428b3ad421", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4770ba091d96aea469c79067b549bbc8f8c7c63/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4770ba091d96aea469c79067b549bbc8f8c7c63/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=c4770ba091d96aea469c79067b549bbc8f8c7c63", "patch": "@@ -4444,6 +4444,7 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)\n \t      gfc_next_ascii_char ();\n \t      return MATCH_YES;\n \t    }\n+\t  gfc_error (\"Malformed type-spec at %C\");\n \t  return MATCH_NO;\n \t}\n     }\n@@ -4457,7 +4458,10 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)\n     }\n \n   if (matched_type && gfc_match_char (')') != MATCH_YES)\n-    return MATCH_ERROR;\n+    {\n+      gfc_error (\"Malformed type-spec at %C\");\n+      return MATCH_ERROR;\n+    }\n \n   /* Defer association of the KIND expression of function results\n      until after USE and IMPORT statements.  */\n@@ -10240,14 +10244,28 @@ gfc_match_derived_decl (void)\n       return MATCH_ERROR;\n     }\n \n+  /*  In free source form, need to check for TYPE XXX as oppose to TYPEXXX.\n+      But, we need to simply return for TYPE(.  */ \n+  if (m == MATCH_NO && gfc_current_form == FORM_FREE)\n+    {\n+      char c = gfc_peek_ascii_char ();\n+      if (c == '(')\n+\treturn m;\n+      if (!gfc_is_whitespace (c))\n+\t{\n+\t  gfc_error (\"Mangled derived type definition at %C\");\n+\t  return MATCH_NO;\n+\t}\n+    }\n+\n   m = gfc_match (\" %n \", name);\n   if (m != MATCH_YES)\n     return m;\n \n   /* Make sure that we don't identify TYPE IS (...) as a parameterized\n      derived type named 'is'.\n      TODO Expand the check, when 'name' = \"is\" by matching \" (tname) \"\n-     and checking if this is a(n intrinsic) typename. his picks up\n+     and checking if this is a(n intrinsic) typename.  This picks up\n      misplaced TYPE IS statements such as in select_type_1.f03.  */\n   if (gfc_peek_ascii_char () == '(')\n     {"}, {"sha": "052fd2e1f8ab382fe6f8f4f9d2bb3f20a1630c91", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4770ba091d96aea469c79067b549bbc8f8c7c63/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4770ba091d96aea469c79067b549bbc8f8c7c63/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4770ba091d96aea469c79067b549bbc8f8c7c63", "patch": "@@ -1,3 +1,9 @@\n+2019-09-29  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/91714\n+\t* gfortran.dg/dec_type_print_3.f90: Update dg-error regex.\n+\t* gfortran.dg/pr91714.f90: New test.\n+\n 2019-09-29  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/91726"}, {"sha": "27f117d3f86a34d363581d872c5cd81bed11ea97", "filename": "gcc/testsuite/gfortran.dg/dec_type_print_3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4770ba091d96aea469c79067b549bbc8f8c7c63/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_type_print_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4770ba091d96aea469c79067b549bbc8f8c7c63/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_type_print_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_type_print_3.f90?ref=c4770ba091d96aea469c79067b549bbc8f8c7c63", "patch": "@@ -8,9 +8,9 @@\n \n include 'dec_type_print.f90'\n \n-! { dg-error \"Invalid character in name\" \"\" { target *-*-* } 52 }\n+! { dg-error \"Mangled derived type definition\" \"\" { target *-*-* } 52 }\n ! { dg-error \"Invalid character in name\" \"\" { target *-*-* } 53 }\n-! { dg-error \"Invalid character in name\" \"\" { target *-*-* } 54 }\n+! { dg-error \"Mangled derived type definition\" \"\" { target *-*-* } 54 }\n ! { dg-error \"Invalid character in name\" \"\" { target *-*-* } 55 }\n ! { dg-error \"Invalid character in name\" \"\" { target *-*-* } 56 }\n ! { dg-error \"Invalid character in name\" \"\" { target *-*-* } 57 }"}, {"sha": "8b855d903183d4356329db245c7c18b4312d8839", "filename": "gcc/testsuite/gfortran.dg/pr91714.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4770ba091d96aea469c79067b549bbc8f8c7c63/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91714.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4770ba091d96aea469c79067b549bbc8f8c7c63/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91714.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91714.f90?ref=c4770ba091d96aea469c79067b549bbc8f8c7c63", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+! Contributed by Gerhard Steinmetz\n+program p\n+   typea          ! { dg-error \"Mangled derived type\" }\n+      integer b\n+   end type       ! { dg-error \"Expecting END PROGRAM\" }\n+   type(a) :: c   ! { dg-error \"is being used before it\" }\n+   c = a(1)\n+   print *, c\n+end"}]}