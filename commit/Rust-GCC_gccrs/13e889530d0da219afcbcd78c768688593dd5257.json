{"sha": "13e889530d0da219afcbcd78c768688593dd5257", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNlODg5NTMwZDBkYTIxOWFmY2JjZDc4Yzc2ODY4ODU5M2RkNTI1Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-07-19T14:16:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-07-19T14:16:54Z"}, "message": "gimple-fold.c (get_base_constructor): Add VIEW_CONVERT case, handle all tcc_constant bases and valueize SSA names.\n\n2016-07-19  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-fold.c (get_base_constructor): Add VIEW_CONVERT case,\n\thandle all tcc_constant bases and valueize SSA names.\n\t* tree-ssa-sccvn.c (fully_constant_vn_reference_p): Handle\n\ttcc_constant bases.\n\n\t* c-c++-common/vector-subscript-6.c: New testcase.\n\t* c-c++-common/vector-subscript-7.c: Likewise.\n\nFrom-SVN: r238475", "tree": {"sha": "30e3412617c2b0809920e06ce7f81591d03f4515", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30e3412617c2b0809920e06ce7f81591d03f4515"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13e889530d0da219afcbcd78c768688593dd5257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e889530d0da219afcbcd78c768688593dd5257", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13e889530d0da219afcbcd78c768688593dd5257", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e889530d0da219afcbcd78c768688593dd5257/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1caf0482104f4b8a3ea0109ae95dd19cf39c52a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1caf0482104f4b8a3ea0109ae95dd19cf39c52a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1caf0482104f4b8a3ea0109ae95dd19cf39c52a2"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "b6d25c3817924e0a69c33d8ddeb4f343d7a3de47", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e889530d0da219afcbcd78c768688593dd5257/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e889530d0da219afcbcd78c768688593dd5257/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13e889530d0da219afcbcd78c768688593dd5257", "patch": "@@ -1,3 +1,10 @@\n+2016-07-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-fold.c (get_base_constructor): Add VIEW_CONVERT case,\n+\thandle all tcc_constant bases and valueize SSA names.\n+\t* tree-ssa-sccvn.c (fully_constant_vn_reference_p): Handle\n+\ttcc_constant bases.\n+\n 2016-07-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* function-tests.c (selftest::verify_three_block_rtl_cfg): Verify"}, {"sha": "3a5008839a50aaedde07a6eb4459085caf34f59b", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e889530d0da219afcbcd78c768688593dd5257/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e889530d0da219afcbcd78c768688593dd5257/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=13e889530d0da219afcbcd78c768688593dd5257", "patch": "@@ -5508,6 +5508,9 @@ get_base_constructor (tree base, HOST_WIDE_INT *bit_offset,\n         return NULL_TREE;\n       base = TREE_OPERAND (base, 0);\n     }\n+  else if (valueize\n+\t   && TREE_CODE (base) == SSA_NAME)\n+    base = valueize (base);\n \n   /* Get a CONSTRUCTOR.  If BASE is a VAR_DECL, get its\n      DECL_INITIAL.  If BASE is a nested reference into another\n@@ -5529,6 +5532,10 @@ get_base_constructor (tree base, HOST_WIDE_INT *bit_offset,\n \treturn init;\n       }\n \n+    case VIEW_CONVERT_EXPR:\n+      return get_base_constructor (TREE_OPERAND (base, 0),\n+\t\t\t\t   bit_offset, valueize);\n+\n     case ARRAY_REF:\n     case COMPONENT_REF:\n       base = get_ref_base_and_extent (base, &bit_offset2, &size, &max_size,\n@@ -5538,11 +5545,13 @@ get_base_constructor (tree base, HOST_WIDE_INT *bit_offset,\n       *bit_offset +=  bit_offset2;\n       return get_base_constructor (base, bit_offset, valueize);\n \n-    case STRING_CST:\n     case CONSTRUCTOR:\n       return base;\n \n     default:\n+      if (CONSTANT_CLASS_P (base))\n+\treturn base;\n+\n       return NULL_TREE;\n     }\n }"}, {"sha": "930a6e8f825305a22a7df4accc66dc238327c460", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e889530d0da219afcbcd78c768688593dd5257/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e889530d0da219afcbcd78c768688593dd5257/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=13e889530d0da219afcbcd78c768688593dd5257", "patch": "@@ -1,3 +1,8 @@\n+2016-07-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* c-c++-common/vector-subscript-6.c: New testcase.\n+\t* c-c++-common/vector-subscript-7.c: Likewise.\n+\n 2016-07-19  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* gcc.dg/params/blocksort-part.c: Conditionally define Int32 "}, {"sha": "b430e9c3926e55601beefe13adda82c4170778d6", "filename": "gcc/testsuite/c-c++-common/vector-subscript-6.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e889530d0da219afcbcd78c768688593dd5257/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e889530d0da219afcbcd78c768688593dd5257/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-6.c?ref=13e889530d0da219afcbcd78c768688593dd5257", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fno-tree-ccp -fdump-tree-fre1\" } */\n+\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+int\n+main (int argc, char** argv)\n+{\n+  int i = 2;\n+  int j = ((v4si){0, 1, 2, 3})[i];\n+  return ((v4si){1, 2, 42, 0})[j];\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 42;\" \"fre1\" } } */"}, {"sha": "e8418f24be9d0fcc0e8f4821f99cd0146e85e576", "filename": "gcc/testsuite/c-c++-common/vector-subscript-7.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e889530d0da219afcbcd78c768688593dd5257/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e889530d0da219afcbcd78c768688593dd5257/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-7.c?ref=13e889530d0da219afcbcd78c768688593dd5257", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-ccp1\" } */\n+\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+int\n+main (int argc, char** argv)\n+{\n+  int i = 2;\n+  int j = ((v4si){0, 1, 2, 3})[i];\n+  return ((v4si){1, 2, 42, 0})[j];\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 42;\" \"ccp1\" } } */"}, {"sha": "e889d6063e6ec99a1a00ee778ecd0816dcf3e3d7", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e889530d0da219afcbcd78c768688593dd5257/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e889530d0da219afcbcd78c768688593dd5257/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=13e889530d0da219afcbcd78c768688593dd5257", "patch": "@@ -1337,6 +1337,11 @@ fully_constant_vn_reference_p (vn_reference_t ref)\n       unsigned i;\n       for (i = 0; i < operands.length (); ++i)\n \t{\n+\t  if (TREE_CODE_CLASS (operands[i].opcode) == tcc_constant)\n+\t    {\n+\t      ++i;\n+\t      break;\n+\t    }\n \t  if (operands[i].off == -1)\n \t    return NULL_TREE;\n \t  off += operands[i].off;"}]}