{"sha": "9b7924dd177330167865a83f5696a9ae34554972", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI3OTI0ZGQxNzczMzAxNjc4NjVhODNmNTY5NmE5YWUzNDU1NDk3Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-21T08:57:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-21T08:57:30Z"}, "message": "[multiple changes]\n\n2016-04-21  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* gnatlink.adb (Gnatlink): Robustify detection of Windows target.\n\t* alloc.ads: Minor comment fixes.\n\t* einfo.ads: Fix typo.\n\n2016-04-21  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_aggr.adb (Component_Not_OK_For_Backend): Redo previous\n\tchanges to handle all cases of components depending on the\n\tdiscriminant, not just string literals.\n\n2016-04-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Subtype_Declaration): If the subtype\n\tdeclaration is the generated declaration for a generic actual,\n\tinherit predicates from the actual if it is a predicated subtype.\n\n2016-04-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Rewrite_Function_Call_For_C): If the function is\n\tinherited and its result is controlling,  introduce a conversion\n\ton the actual for the corresponding procedure call, to avoid\n\tspurious type errors.\n\n2016-04-21  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* krunch.adb (Krunch): Fix krunching of i-vxworks.\n\nFrom-SVN: r235317", "tree": {"sha": "e6df3b6071ce3b9eab7023eaa8fbbbd5ce15c051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6df3b6071ce3b9eab7023eaa8fbbbd5ce15c051"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b7924dd177330167865a83f5696a9ae34554972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b7924dd177330167865a83f5696a9ae34554972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b7924dd177330167865a83f5696a9ae34554972", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b7924dd177330167865a83f5696a9ae34554972/comments", "author": null, "committer": null, "parents": [{"sha": "d74716b313b967b8a9406d86bae41d8843180505", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74716b313b967b8a9406d86bae41d8843180505", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74716b313b967b8a9406d86bae41d8843180505"}], "stats": {"total": 120, "additions": 102, "deletions": 18}, "files": [{"sha": "ced75bf61e0450d124d828f429c14abcb2d9da4c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7924dd177330167865a83f5696a9ae34554972/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7924dd177330167865a83f5696a9ae34554972/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9b7924dd177330167865a83f5696a9ae34554972", "patch": "@@ -1,3 +1,32 @@\n+2016-04-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnatlink.adb (Gnatlink): Robustify detection of Windows target.\n+\t* alloc.ads: Minor comment fixes.\n+\t* einfo.ads: Fix typo.\n+\n+2016-04-21  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_aggr.adb (Component_Not_OK_For_Backend): Redo previous\n+\tchanges to handle all cases of components depending on the\n+\tdiscriminant, not just string literals.\n+\n+2016-04-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Subtype_Declaration): If the subtype\n+\tdeclaration is the generated declaration for a generic actual,\n+\tinherit predicates from the actual if it is a predicated subtype.\n+\n+2016-04-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Rewrite_Function_Call_For_C): If the function is\n+\tinherited and its result is controlling,  introduce a conversion\n+\ton the actual for the corresponding procedure call, to avoid\n+\tspurious type errors.\n+\n+2016-04-21  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* krunch.adb (Krunch): Fix krunching of i-vxworks.\n+\n 2016-04-21  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_aggr.adb: Minor reformatting and code cleanup."}, {"sha": "4cdb1d23d26e02cd8cc44b79a6a5c8b7a90f0a4f", "filename": "gcc/ada/alloc.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7924dd177330167865a83f5696a9ae34554972/gcc%2Fada%2Falloc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7924dd177330167865a83f5696a9ae34554972/gcc%2Fada%2Falloc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Falloc.ads?ref=9b7924dd177330167865a83f5696a9ae34554972", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,14 +30,14 @@\n ------------------------------------------------------------------------------\n \n --  This package contains definitions for initial sizes and growth increments\n---  for the various dynamic arrays used for principle compiler data strcutures.\n+--  for the various dynamic arrays used for the main compiler data structures.\n --  The indicated initial size is allocated for the start of each file, and\n --  the increment factor is a percentage used to increase the table size when\n --  it needs expanding (e.g. a value of 100 = 100% increase = double)\n \n---  Note: the initial values here are multiplied by Table_Factor, as set\n---  by the -gnatTnn switch. This variable is defined in Opt, as is the\n---  default value for the table factor.\n+--  Note: the initial values here are multiplied by Table_Factor as set by the\n+--  -gnatTnn switch. This variable is defined in Opt, as is the default value\n+--  for the table factor.\n \n package Alloc is\n "}, {"sha": "84ce2e2cb242bc6acc7ef92a47e2b5c882237f86", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7924dd177330167865a83f5696a9ae34554972/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7924dd177330167865a83f5696a9ae34554972/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=9b7924dd177330167865a83f5696a9ae34554972", "patch": "@@ -4170,9 +4170,9 @@ package Einfo is\n --       of the predicate function. This is the original expression given as\n --       the predicate except that occurrences of the type are replaced by\n --       occurrences of the formal parameter of the predicate function (note\n---       that the spec of this function including this formal parameter name)\n---       is available from the Subprograms_For_Type field (it can be accessed\n---       as Predicate_Function (typ). Also, in the case where a predicate is\n+--       that the spec of this function including this formal parameter name\n+--       is available from the Subprograms_For_Type field; it can be accessed\n+--       as Predicate_Function (typ)). Also, in the case where a predicate is\n --       inherited, the expression is of the form:\n --\n --         xxxPredicate (typ2 (ent)) AND THEN expression"}, {"sha": "efaee5e67667ad755bb6f97070ca8f463b5034c7", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7924dd177330167865a83f5696a9ae34554972/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7924dd177330167865a83f5696a9ae34554972/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=9b7924dd177330167865a83f5696a9ae34554972", "patch": "@@ -5918,6 +5918,10 @@ package body Exp_Aggr is\n       --  semantics of Ada complicate the analysis and lead to anomalies in\n       --  the gcc back-end if the aggregate is not expanded into assignments.\n \n+      function Has_Per_Object_Constraint (L : List_Id) return Boolean;\n+      --  Return True if any element of L has Has_Per_Object_Constraint set.\n+      --  L should be the Choices component of an N_Component_Association.\n+\n       function Has_Visible_Private_Ancestor (Id : E) return Boolean;\n       --  If any ancestor of the current type is private, the aggregate\n       --  cannot be built in place. We cannot rely on Has_Private_Ancestor,\n@@ -6024,7 +6028,8 @@ package body Exp_Aggr is\n                return True;\n \n             elsif Modify_Tree_For_C\n-              and then Ekind (Etype (Expr_Q)) = E_String_Literal_Subtype\n+              and then Nkind (C) = N_Component_Association\n+              and then Has_Per_Object_Constraint (Choices (C))\n             then\n                Static_Components := False;\n                return True;\n@@ -6051,6 +6056,24 @@ package body Exp_Aggr is\n          return False;\n       end Component_Not_OK_For_Backend;\n \n+      -------------------------------\n+      -- Has_Per_Object_Constraint --\n+      -------------------------------\n+\n+      function Has_Per_Object_Constraint (L : List_Id) return Boolean is\n+         N : Node_Id := First (L);\n+      begin\n+         while Present (N) loop\n+            if Has_Per_Object_Constraint (Associated_Node (N)) then\n+               return True;\n+            end if;\n+\n+            Next (N);\n+         end loop;\n+\n+         return False;\n+      end Has_Per_Object_Constraint;\n+\n       -----------------------------------\n       --  Has_Visible_Private_Ancestor --\n       -----------------------------------"}, {"sha": "599e46235c4c9adb7d3313491bdc6e526f39f29d", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7924dd177330167865a83f5696a9ae34554972/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7924dd177330167865a83f5696a9ae34554972/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=9b7924dd177330167865a83f5696a9ae34554972", "patch": "@@ -8432,11 +8432,13 @@ package body Exp_Ch6 is\n \n       --  Local variables\n \n-      Func_Id     : constant Entity_Id  := Ultimate_Alias (Entity (Name (N)));\n+      Orig_Func   : constant Entity_Id  := Entity (Name (N));\n+      Func_Id     : constant Entity_Id  := Ultimate_Alias (Orig_Func);\n       Par         : constant Node_Id    := Parent (N);\n       Proc_Id     : constant Entity_Id  := Rewritten_For_C_Proc_Id (Func_Id);\n       Loc         : constant Source_Ptr := Sloc (Par);\n       Actuals     : List_Id;\n+      Last_Actual : Node_Id;\n       Last_Formal : Entity_Id;\n \n    --  Start of processing for Rewrite_Function_Call_For_C\n@@ -8467,12 +8469,23 @@ package body Exp_Ch6 is\n \n       --    Proc_Call (..., LHS);\n \n+      --  If function is inherited, a conversion may be necessary.\n+\n       if Nkind (Par) = N_Assignment_Statement then\n+         Last_Actual :=  Name (Par);\n+\n+         if not Comes_From_Source (Orig_Func)\n+           and then Etype (Orig_Func) /= Etype (Func_Id)\n+         then\n+            Last_Actual :=\n+               Unchecked_Convert_To (Etype (Func_Id), Last_Actual);\n+         end if;\n+\n          Append_To (Actuals,\n            Make_Parameter_Association (Loc,\n              Selector_Name             =>\n                Make_Identifier (Loc, Chars (Last_Formal)),\n-             Explicit_Actual_Parameter => Name (Par)));\n+             Explicit_Actual_Parameter => Last_Actual));\n \n          Rewrite (Par,\n            Make_Procedure_Call_Statement (Loc,"}, {"sha": "7417093395050bbe2af6122ae1d21137d627c119", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7924dd177330167865a83f5696a9ae34554972/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7924dd177330167865a83f5696a9ae34554972/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=9b7924dd177330167865a83f5696a9ae34554972", "patch": "@@ -154,6 +154,8 @@ procedure Gnatlink is\n \n    Base_Command_Name    : String_Access;\n \n+   Target_Debuggable_Suffix : String_Access;\n+\n    Tname    : Temp_File_Name;\n    Tname_FD : File_Descriptor := Invalid_FD;\n    --  Temporary file used by linker to pass list of object files on\n@@ -1646,12 +1648,14 @@ begin\n \n    Write_Header;\n \n+   Target_Debuggable_Suffix := Get_Target_Debuggable_Suffix;\n+\n    --  If no output name specified, then use the base name of .ali file name\n \n    if Output_File_Name = null then\n       Output_File_Name :=\n         new String'(Base_Name (Ali_File_Name.all)\n-                      & Get_Target_Debuggable_Suffix.all);\n+                      & Target_Debuggable_Suffix.all);\n    end if;\n \n    Linker_Options.Increment_Last;\n@@ -1711,12 +1715,9 @@ begin\n             FN (J) := Csets.Fold_Lower (FN (J));\n       end loop;\n \n-      --  For now we detect windows by an output executable name ending with\n-      --  the suffix .exe.\n+      --  For now we detect Windows by its executable suffix of .exe\n \n-      if FN'Length > 5\n-        and then FN (FN'Last - 3 .. FN'Last) = \".exe\"\n-      then\n+      if Target_Debuggable_Suffix.all = \".exe\" then\n          Check_File_Name (\"install\");\n          Check_File_Name (\"setup\");\n          Check_File_Name (\"update\");"}, {"sha": "12b8f7137114a7f274143cc7dc78a83ff99473a6", "filename": "gcc/ada/krunch.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7924dd177330167865a83f5696a9ae34554972/gcc%2Fada%2Fkrunch.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7924dd177330167865a83f5696a9ae34554972/gcc%2Fada%2Fkrunch.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fkrunch.adb?ref=9b7924dd177330167865a83f5696a9ae34554972", "patch": "@@ -106,7 +106,7 @@ begin\n         or else (Curlen = 13 and then Buffer (3 .. 13) = \"definitions\")\n         or else (Curlen =  9 and then Buffer (3 ..  9) = \"fortran\")\n         or else (Curlen = 16 and then Buffer (3 .. 16) = \"packed_decimal\")\n-        or else (Curlen >  9 and then Buffer (3 ..  9) = \"vxworks\")\n+        or else (Curlen >  8 and then Buffer (3 ..  9) = \"vxworks\")\n       then\n          Krlen := 8;\n       else"}, {"sha": "19f4844a6bc605340f2e5a52694dd0f54bf7f318", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7924dd177330167865a83f5696a9ae34554972/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7924dd177330167865a83f5696a9ae34554972/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=9b7924dd177330167865a83f5696a9ae34554972", "patch": "@@ -5063,6 +5063,24 @@ package body Sem_Ch3 is\n          Set_Is_Generic_Actual_Type (Id, Is_Generic_Actual_Type (T));\n       end if;\n \n+      --  If this is a subtype declaration for an actual in an instance,\n+      --  inherit static and dynamic predicates if any.\n+\n+      if In_Instance\n+        and then not Comes_From_Source (N)\n+        and then Has_Predicates (T)\n+        and then Present (Predicate_Function (T))\n+      then\n+         Set_Subprograms_For_Type (Id, Subprograms_For_Type (T));\n+\n+         if Has_Static_Predicate (T) then\n+            Set_Static_Discrete_Predicate (Id,\n+              Static_Discrete_Predicate (T));\n+         end if;\n+      end if;\n+\n+      --  Remaining processing depends on characteristics of base type\n+\n       T := Etype (Id);\n \n       Set_Is_Immediately_Visible   (Id, True);"}]}