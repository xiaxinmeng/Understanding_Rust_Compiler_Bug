{"sha": "4f70758f3747997152952ed15ebd75d0b5575972", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY3MDc1OGYzNzQ3OTk3MTUyOTUyZWQxNWViZDc1ZDBiNTU3NTk3Mg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-06-29T17:36:07Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-06-29T17:36:07Z"}, "message": "Warning fixes:\n\n        * Makefile.in (fix-header): Don't needlessly depend on cpperror.o.\n        * alias.c (CHECK_ALIAS_SETS_FOR_CONSISTENCY): Cast expansion to\n        void since it is evaluated in a comma list.\n        * mips.h (ASM_GENERATE_INTERNAL_LABEL): Always sprintf `NUM'\n        argument as a long and cast `NUM' to long to ensure it is of the\n        proper width.  Wrap macro arguments in parens when they appear in\n        the expansion.\n        * sol2.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n        * sparc.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n        (ASM_DECLARE_RESULT): Fix fprintf format specifier to match\n        function argument return type.\n        (REGNO_OK_FOR_INDEX_P, REGNO_OK_FOR_BASE_P, REGNO_OK_FOR_FP_P,\n        REGNO_OK_FOR_CCFP_P): Use `(unsigned)' not `U'.\n        * cpplib.c (cpp_message_from_errno): Remove unneeded argument to\n        cpp_message.\n        * dbxout.c: Fix the comments after an #endif to reflect the actual\n        condition tested in the preceding #if.\n        * except.c (find_all_handler_type_matches): Switch to old-style\n        function definition.\n        * expr.c (expand_builtin): Remove unused variable `type' twice.\n        * gbl-ctors.h (DO_GLOBAL_CTORS_BODY): Cast -1 before comparing it\n        to an unsigned long.\n        * haifa-sched.c (print_insn_chain): Remove unused function.\n        * objc/objc-act.c (build_msg_pool_reference): Hide prototype and\n        definition.\n        * toplev.c: When testing whether to include dbxout.h, also include\n        it when XCOFF_DEBUGGING_INFO is defined.\n        * unroll.c (unroll_loop): Add parentheses around assignment used\n        as truth value.\n\nFrom-SVN: r20801", "tree": {"sha": "07c5fd6d4cde7e41ec1d7a902a997120ed06ebdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07c5fd6d4cde7e41ec1d7a902a997120ed06ebdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f70758f3747997152952ed15ebd75d0b5575972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f70758f3747997152952ed15ebd75d0b5575972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f70758f3747997152952ed15ebd75d0b5575972", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f70758f3747997152952ed15ebd75d0b5575972/comments", "author": null, "committer": null, "parents": [{"sha": "d0902cd14bd55a38e0a049e885df3647ecbe3aee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0902cd14bd55a38e0a049e885df3647ecbe3aee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0902cd14bd55a38e0a049e885df3647ecbe3aee"}], "stats": {"total": 119, "additions": 67, "deletions": 52}, "files": [{"sha": "794fa99187f3fd77616fb85f4847f69924167a28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f70758f3747997152952ed15ebd75d0b5575972", "patch": "@@ -1,3 +1,48 @@\n+Mon Jun 29 20:12:41 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+        * Makefile.in (fix-header): Don't needlessly depend on cpperror.o.\n+\n+\t* alias.c (CHECK_ALIAS_SETS_FOR_CONSISTENCY): Cast expansion to\n+\tvoid since it is evaluated in a comma list.\n+\n+\t* mips.h (ASM_GENERATE_INTERNAL_LABEL): Always sprintf `NUM'\n+ \targument as a long and cast `NUM' to long to ensure it is of the\n+ \tproper width.  Wrap macro arguments in parens when they appear in\n+ \tthe expansion.\n+\n+\t* sol2.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n+\n+\t* sparc.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n+\t(ASM_DECLARE_RESULT): Fix fprintf format specifier to match\n+\tfunction argument return type.\n+\t(REGNO_OK_FOR_INDEX_P, REGNO_OK_FOR_BASE_P, REGNO_OK_FOR_FP_P,\n+\tREGNO_OK_FOR_CCFP_P): Use `(unsigned)' not `U'.\n+\n+\t* cpplib.c (cpp_message_from_errno): Remove unneeded argument to\n+\tcpp_message.\n+\n+        * dbxout.c: Fix the comments after an #endif to reflect the actual\n+\tcondition tested in the preceding #if.\n+\n+\t* except.c (find_all_handler_type_matches): Switch to old-style\n+ \tfunction definition.\n+\n+\t* expr.c (expand_builtin): Remove unused variable `type' twice.\n+\n+        * gbl-ctors.h (DO_GLOBAL_CTORS_BODY): Cast -1 before comparing it\n+ \tto an unsigned long.\n+\n+\t* haifa-sched.c (print_insn_chain): Remove unused function.\n+\n+        * objc/objc-act.c (build_msg_pool_reference): Hide prototype and\n+\tdefinition.\n+\n+        * toplev.c: When testing whether to include dbxout.h, also include\n+\tit when XCOFF_DEBUGGING_INFO is defined.\n+\n+        * unroll.c (unroll_loop): Add parentheses around assignment used\n+\tas truth value.\n+\n Mon Jun 29 12:18:00 1998  Catherine Moore  <clm@cygnus.com>\n \n         * config/lb1spc.asm (.div, .udiv): Replace routines."}, {"sha": "36d9ee16063e63a80386d7a63675f2f0edd70a3b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4f70758f3747997152952ed15ebd75d0b5575972", "patch": "@@ -2047,7 +2047,7 @@ xsys-protos.h: $(GCC_PASSES) $(srcdir)/sys-protos.h deduced.h gen-protos Makefil\n \trm -rf fixtmp.c\n \n fix-header: fix-header.o scan-decls.o scan.o xsys-protos.h $(HOST_LIBDEPS) \\\n-   cpplib.o cpphash.o cppalloc.o cppexp.o cpperror.o prefix.o version.o\n+   cpplib.o cpphash.o cppalloc.o cppexp.o prefix.o version.o\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ fix-header.o \\\n \t   scan-decls.o scan.o cpplib.o cpphash.o cppalloc.o prefix.o \\\n \t   version.o cppexp.o $(HOST_LIBS)"}, {"sha": "de471394d561949fa2daf8192abe64c4e37fa71e", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=4f70758f3747997152952ed15ebd75d0b5575972", "patch": "@@ -54,7 +54,7 @@ static rtx find_base_value\t\tPROTO((rtx));\n    && (MEM_ALIAS_SET (MEM1) || MEM_ALIAS_SET (MEM2))\t\\\n    ? (abort (), 0) : 0)\n #else \n-#define CHECK_ALIAS_SETS_FOR_CONSISTENCY(MEM1, MEM2) 0\n+#define CHECK_ALIAS_SETS_FOR_CONSISTENCY(MEM1, MEM2) ((void)0)\n #endif\n \n /* Returns nonzero if MEM1 and MEM2 do not alias because they are in"}, {"sha": "590895936b56e70cab9c5e5b3312d43e2b43779e", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=4f70758f3747997152952ed15ebd75d0b5575972", "patch": "@@ -4110,7 +4110,7 @@ while (0)\n    This is suitable for output with `assemble_name'.  */\n \n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\t\t\\\n-  sprintf (LABEL, \"*%s%s%d\", LOCAL_LABEL_PREFIX, PREFIX, NUM)\n+  sprintf ((LABEL), \"*%s%s%ld\", (LOCAL_LABEL_PREFIX), (PREFIX), (long)(NUM))\n \n /* This is how to output an assembler line defining a `double' constant.  */\n "}, {"sha": "dfcb3b96970af826f1b9b5129700751408873093", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=4f70758f3747997152952ed15ebd75d0b5575972", "patch": "@@ -107,7 +107,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef  ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n-  sprintf (LABEL, \"*.L%s%d\", PREFIX, NUM)\n+  sprintf ((LABEL), \"*.L%s%ld\", (PREFIX), (long)(NUM))\n \n \f\n /* We don't use the standard svr4 STARTFILE_SPEC because it's wrong for us."}, {"sha": "5d2059c561c410798d0433fdedf1a65034759306", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=4f70758f3747997152952ed15ebd75d0b5575972", "patch": "@@ -1683,7 +1683,7 @@ extern int gen_v9_scc ();\n    the assembler).  */\n \n #define ASM_DECLARE_RESULT(FILE, RESULT) \\\n-  fprintf ((FILE), \"\\t.proc\\t0%o\\n\", sparc_type_code (TREE_TYPE (RESULT)))\n+  fprintf ((FILE), \"\\t.proc\\t0%lo\\n\", sparc_type_code (TREE_TYPE (RESULT)))\n \n /* Output the label for a function definition.  */\n \n@@ -2245,16 +2245,16 @@ extern struct rtx_def *sparc_builtin_saveregs ();\n    has been allocated, which happens in local-alloc.c.  */\n \n #define REGNO_OK_FOR_INDEX_P(REGNO) \\\n-((REGNO) < 32 || (unsigned) reg_renumber[REGNO] < 32U)\n+((REGNO) < 32 || (unsigned) reg_renumber[REGNO] < (unsigned)32)\n #define REGNO_OK_FOR_BASE_P(REGNO) \\\n-((REGNO) < 32 || (unsigned) reg_renumber[REGNO] < 32U)\n+((REGNO) < 32 || (unsigned) reg_renumber[REGNO] < (unsigned)32)\n #define REGNO_OK_FOR_FP_P(REGNO) \\\n-  (((unsigned) (REGNO) - 32 < (TARGET_V9 ? 64U : 32U)) \\\n-   || ((unsigned) reg_renumber[REGNO] - 32 < (TARGET_V9 ? 64U : 32U)))\n+  (((unsigned) (REGNO) - 32 < (TARGET_V9 ? (unsigned)64 : (unsigned)32)) \\\n+   || ((unsigned) reg_renumber[REGNO] - 32 < (TARGET_V9 ? (unsigned)64 : (unsigned)32)))\n #define REGNO_OK_FOR_CCFP_P(REGNO) \\\n  (TARGET_V9 \\\n-  && (((unsigned) (REGNO) - 96 < 4U) \\\n-      || ((unsigned) reg_renumber[REGNO] - 96 < 4U)))\n+  && (((unsigned) (REGNO) - 96 < (unsigned)4) \\\n+      || ((unsigned) reg_renumber[REGNO] - 96 < (unsigned)4)))\n \n /* Now macros that check whether X is a register and also,\n    strictly, whether it is in a specified class.\n@@ -2888,7 +2888,7 @@ extern struct rtx_def *legitimize_pic_address ();\n    This is suitable for output with `assemble_name'.  */\n \n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n-  sprintf (LABEL, \"*%s%d\", PREFIX, NUM)\n+  sprintf ((LABEL), \"*%s%ld\", (PREFIX), (long)(NUM))\n \n /* This is how to output an assembler line defining a `float' constant.\n    We always have to use a .long pseudo-op to do this because the native"}, {"sha": "bad82c304c8c40d1581624fa9732e08673c0d859", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=4f70758f3747997152952ed15ebd75d0b5575972", "patch": "@@ -7656,7 +7656,7 @@ cpp_message_from_errno (pfile, is_error, name)\n   if (ip != NULL)\n     cpp_file_line_for_message (pfile, ip->nominal_fname, ip->lineno, -1);\n \n-  cpp_message (pfile, is_error, \"%s: %s\", name, my_strerror (e), \"\");\n+  cpp_message (pfile, is_error, \"%s: %s\", name, my_strerror (e));\n }\n \n void"}, {"sha": "e9e7072feb1cef5b0447cb9276b529f1e5ff4241", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=4f70758f3747997152952ed15ebd75d0b5575972", "patch": "@@ -2710,4 +2710,4 @@ dbxout_function (decl)\n     dbxout_function_end ();\n #endif\n }\n-#endif /* DBX_DEBUGGING_INFO */\n+#endif /* DBX_DEBUGGING_INFO || XCOFF_DEBUGGING_INFO */"}, {"sha": "3ed0c915eb629b70d877bbab9f47ab1346400adb", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=4f70758f3747997152952ed15ebd75d0b5575972", "patch": "@@ -792,7 +792,8 @@ void remove_handler (removing_label)\n    currently exist in all regions. */\n \n int \n-find_all_handler_type_matches (void ***array)\n+find_all_handler_type_matches (array)\n+  void ***array;\n {\n   struct handler_info *handler, *last;\n   int x,y;"}, {"sha": "c6728457c4fba2c7560ed921eb2d9286cff45582", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4f70758f3747997152952ed15ebd75d0b5575972", "patch": "@@ -8769,7 +8769,6 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  tree dest = TREE_VALUE (arglist);\n \t  tree src = TREE_VALUE (TREE_CHAIN (arglist));\n \t  tree len = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n-\t  tree type;\n \n \t  int src_align\n \t    = get_pointer_alignment (src, BIGGEST_ALIGNMENT) / BITS_PER_UNIT;\n@@ -8830,7 +8829,6 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  tree dest = TREE_VALUE (arglist);\n \t  tree val = TREE_VALUE (TREE_CHAIN (arglist));\n \t  tree len = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n-\t  tree type;\n \n \t  int dest_align\n \t    = get_pointer_alignment (dest, BIGGEST_ALIGNMENT) / BITS_PER_UNIT;"}, {"sha": "86b1c0ebcacfcee809007568cfe6100cc6839e68", "filename": "gcc/gbl-ctors.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fgbl-ctors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fgbl-ctors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgbl-ctors.h?ref=4f70758f3747997152952ed15ebd75d0b5575972", "patch": "@@ -83,7 +83,7 @@ extern void __do_global_dtors (void);\n do {\t\t\t\t\t\t\t\t\t\\\n   unsigned long nptrs = (unsigned long) __CTOR_LIST__[0];\t\t\\\n   unsigned i;\t\t\t\t\t\t\t\t\\\n-  if (nptrs == -1)\t\t\t\t\t\t\t\\\n+  if (nptrs == (unsigned long)-1)\t\t\t\t        \\\n     for (nptrs = 0; __CTOR_LIST__[nptrs + 1] != 0; nptrs++);\t\t\\\n   for (i = nptrs; i >= 1; i--)\t\t\t\t\t\t\\\n     __CTOR_LIST__[i] ();\t\t\t\t\t\t\\"}, {"sha": "5452478eb17041ee583db170dfdf860540dcedea", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=4f70758f3747997152952ed15ebd75d0b5575972", "patch": "@@ -456,7 +456,6 @@ static char *safe_concat PROTO ((char *, char *, char *));\n static int insn_issue_delay PROTO ((rtx));\n static int birthing_insn_p PROTO ((rtx));\n static void adjust_priority PROTO ((rtx));\n-static void print_insn_chain PROTO ((rtx));\n \n /* Mapping of insns to their original block prior to scheduling.  */\n static int *insn_orig_block;\n@@ -6277,36 +6276,6 @@ print_insn (buf, x, verbose)\n     }\n }\t\t\t\t/* print_insn */\n \n-void\n-print_insn_chain (rtx_first)\n-     rtx rtx_first;\n-{\n-  register rtx tmp_rtx;\n-  char str[BUF_LEN];\n-\n-  strcpy (str, \"(nil)\\n\");\n-  if (rtx_first != 0)\n-    switch (GET_CODE (rtx_first))\n-      {\n-      case INSN:\n-      case JUMP_INSN:\n-      case CALL_INSN:\n-      case NOTE:\n-      case CODE_LABEL:\n-      case BARRIER:\n-\tfor (tmp_rtx = rtx_first; tmp_rtx != NULL;\n-\t     tmp_rtx = NEXT_INSN (tmp_rtx))\n-\t  {\n-\t    print_insn (str, tmp_rtx, 0);\n-\t    printf (\"%s\\n\", str);\n-\t  }\n-\tbreak;\n-      default:\n-\tprint_insn (str, rtx_first, 0);\n-\tprintf (\"%s\\n\", str);\n-      }\n-}\t\t\t\t/* print_insn_chain */\n-\n /* Print visualization debugging info */\n \n static void"}, {"sha": "0f4058b2b5c45341dd791d99681e005af01efab5", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=4f70758f3747997152952ed15ebd75d0b5575972", "patch": "@@ -297,7 +297,9 @@ static tree init_objc_symtab\t\t\tPROTO((tree));\n static void forward_declare_categories\t\tPROTO((void));\n static void generate_objc_symtab_decl\t\tPROTO((void));\n static tree build_selector\t\t\tPROTO((tree));\n+#if 0\n static tree build_msg_pool_reference\t\tPROTO((int));\n+#endif\n static tree build_typed_selector_reference     \tPROTO((tree, tree));\n static tree build_selector_reference\t\tPROTO((tree));\n static tree build_class_reference_decl\t\tPROTO((tree));\n@@ -2042,6 +2044,7 @@ build_selector (ident)\n    grok.m: warning: initialization of non-const * pointer from const *\n    grok.m: warning: initialization between incompatible pointer types.  */\n \n+#if 0\n static tree\n build_msg_pool_reference (offset)\n      int offset;\n@@ -2059,7 +2062,6 @@ build_msg_pool_reference (offset)\n   return expr;\n }\n \n-#if 0\n static tree\n init_selector (offset)\n      int offset;"}, {"sha": "38bba1be03a5ddfa833bad124f63996b1ea02eb6", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=4f70758f3747997152952ed15ebd75d0b5575972", "patch": "@@ -65,7 +65,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"dwarf2out.h\"\n #endif\n \n-#ifdef DBX_DEBUGGING_INFO\n+#if defined(DBX_DEBUGGING_INFO) || defined(XCOFF_DEBUGGING_INFO)\n #include \"dbxout.h\"\n #endif\n "}, {"sha": "c6de53b663a2f1cf466c8e16b8b99a74b8e9f484", "filename": "gcc/unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70758f3747997152952ed15ebd75d0b5575972/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=4f70758f3747997152952ed15ebd75d0b5575972", "patch": "@@ -718,7 +718,7 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n \t\t}\n \t    }\n \t}\n-      else if (note = find_reg_note (insn, REG_LABEL, NULL_RTX))\n+      else if ((note = find_reg_note (insn, REG_LABEL, NULL_RTX)))\n \tset_label_in_map (map, CODE_LABEL_NUMBER (XEXP (note, 0)),\n \t\t\t  XEXP (note, 0));\n     }"}]}