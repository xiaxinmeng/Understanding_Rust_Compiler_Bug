{"sha": "7f9f48bede168fd629d389d6113a1bbe11e2ad99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y5ZjQ4YmVkZTE2OGZkNjI5ZDM4OWQ2MTEzYTFiYmUxMWUyYWQ5OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-08-24T17:59:19Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-08-24T17:59:19Z"}, "message": "builtins.c (expand_cmpstrn): Rename to...\n\ngcc/\n\t* builtins.c (expand_cmpstrn): Rename to...\n\t(expand_cmpstrn_or_cmpmem): ...this.\n\t(expand_builtin_strcmp, expand_builtin_strncmp): Update accordingly.\n\t(expand_builtin_memcmp): Use optabs instead of HAVE_cmpmem/gen_cmpmem.\n\tRemove mode argument.\n\t(expand_builtin): Update accordingly.\n\nFrom-SVN: r227141", "tree": {"sha": "436f2c0dbf5e6ad71567b608391e878f5c3dc349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/436f2c0dbf5e6ad71567b608391e878f5c3dc349"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f9f48bede168fd629d389d6113a1bbe11e2ad99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9f48bede168fd629d389d6113a1bbe11e2ad99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f9f48bede168fd629d389d6113a1bbe11e2ad99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9f48bede168fd629d389d6113a1bbe11e2ad99/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a666df609a95f9a569b6d09472933ff898bd805d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a666df609a95f9a569b6d09472933ff898bd805d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a666df609a95f9a569b6d09472933ff898bd805d"}], "stats": {"total": 151, "additions": 72, "deletions": 79}, "files": [{"sha": "2fcad497751bea094174d5c63fe388edbb07da79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9f48bede168fd629d389d6113a1bbe11e2ad99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9f48bede168fd629d389d6113a1bbe11e2ad99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f9f48bede168fd629d389d6113a1bbe11e2ad99", "patch": "@@ -1,3 +1,12 @@\n+2015-08-24  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* builtins.c (expand_cmpstrn): Rename to...\n+\t(expand_cmpstrn_or_cmpmem): ...this.\n+\t(expand_builtin_strcmp, expand_builtin_strncmp): Update accordingly.\n+\t(expand_builtin_memcmp): Use optabs instead of HAVE_cmpmem/gen_cmpmem.\n+\tRemove mode argument.\n+\t(expand_builtin): Update accordingly.\n+\n 2015-08-24  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* builtins.c (expand_cmpstr, expand_cmpstrn): New functions."}, {"sha": "5021dcfa8ce3962e666a121128caefa751a6190b", "filename": "gcc/builtins.c", "status": "modified", "additions": 63, "deletions": 79, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9f48bede168fd629d389d6113a1bbe11e2ad99/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9f48bede168fd629d389d6113a1bbe11e2ad99/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7f9f48bede168fd629d389d6113a1bbe11e2ad99", "patch": "@@ -119,7 +119,6 @@ static rtx expand_builtin_next_arg (void);\n static rtx expand_builtin_va_start (tree);\n static rtx expand_builtin_va_end (tree);\n static rtx expand_builtin_va_copy (tree);\n-static rtx expand_builtin_memcmp (tree, rtx, machine_mode);\n static rtx expand_builtin_strcmp (tree, rtx);\n static rtx expand_builtin_strncmp (tree, rtx, machine_mode);\n static rtx builtin_memcpy_read_str (void *, HOST_WIDE_INT, machine_mode);\n@@ -3939,13 +3938,14 @@ expand_cmpstr (insn_code icode, rtx target, rtx arg1_rtx, rtx arg2_rtx,\n   return NULL_RTX;\n }\n \n-/* Try to expand cmpstrn operation ICODE with the given operands.\n+/* Try to expand cmpstrn or cmpmem operation ICODE with the given operands.\n    ARG3_TYPE is the type of ARG3_RTX.  Return the result rtx on success,\n    otherwise return null.  */\n \n static rtx\n-expand_cmpstrn (insn_code icode, rtx target, rtx arg1_rtx, rtx arg2_rtx,\n-\t\ttree arg3_type, rtx arg3_rtx, HOST_WIDE_INT align)\n+expand_cmpstrn_or_cmpmem (insn_code icode, rtx target, rtx arg1_rtx,\n+\t\t\t  rtx arg2_rtx, tree arg3_type, rtx arg3_rtx,\n+\t\t\t  HOST_WIDE_INT align)\n {\n   machine_mode insn_mode = insn_data[icode].operand[0].mode;\n \n@@ -3966,94 +3966,78 @@ expand_cmpstrn (insn_code icode, rtx target, rtx arg1_rtx, rtx arg2_rtx,\n \n /* Expand expression EXP, which is a call to the memcmp built-in function.\n    Return NULL_RTX if we failed and the caller should emit a normal call,\n-   otherwise try to get the result in TARGET, if convenient (and in mode\n-   MODE, if that's convenient).  */\n+   otherwise try to get the result in TARGET, if convenient.  */\n \n static rtx\n-expand_builtin_memcmp (tree exp, ATTRIBUTE_UNUSED rtx target,\n-\t\t       ATTRIBUTE_UNUSED machine_mode mode)\n+expand_builtin_memcmp (tree exp, rtx target)\n {\n-  location_t loc ATTRIBUTE_UNUSED = EXPR_LOCATION (exp);\n-\n   if (!validate_arglist (exp,\n  \t\t\t POINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n     return NULL_RTX;\n \n   /* Note: The cmpstrnsi pattern, if it exists, is not suitable for\n      implementing memcmp because it will stop if it encounters two\n      zero bytes.  */\n-#if defined HAVE_cmpmemsi\n-  {\n-    rtx arg1_rtx, arg2_rtx, arg3_rtx;\n-    rtx result;\n-    rtx insn;\n-    tree arg1 = CALL_EXPR_ARG (exp, 0);\n-    tree arg2 = CALL_EXPR_ARG (exp, 1);\n-    tree len = CALL_EXPR_ARG (exp, 2);\n+  insn_code icode = direct_optab_handler (cmpmem_optab, SImode);\n+  if (icode == CODE_FOR_nothing)\n+    return NULL_RTX;\n \n-    unsigned int arg1_align = get_pointer_alignment (arg1) / BITS_PER_UNIT;\n-    unsigned int arg2_align = get_pointer_alignment (arg2) / BITS_PER_UNIT;\n-    machine_mode insn_mode;\n+  tree arg1 = CALL_EXPR_ARG (exp, 0);\n+  tree arg2 = CALL_EXPR_ARG (exp, 1);\n+  tree len = CALL_EXPR_ARG (exp, 2);\n \n-    if (HAVE_cmpmemsi)\n-      insn_mode = insn_data[(int) CODE_FOR_cmpmemsi].operand[0].mode;\n-    else\n-      return NULL_RTX;\n+  unsigned int arg1_align = get_pointer_alignment (arg1) / BITS_PER_UNIT;\n+  unsigned int arg2_align = get_pointer_alignment (arg2) / BITS_PER_UNIT;\n \n-    /* If we don't have POINTER_TYPE, call the function.  */\n-    if (arg1_align == 0 || arg2_align == 0)\n-      return NULL_RTX;\n+  /* If we don't have POINTER_TYPE, call the function.  */\n+  if (arg1_align == 0 || arg2_align == 0)\n+    return NULL_RTX;\n \n-    /* Make a place to write the result of the instruction.  */\n-    result = target;\n-    if (! (result != 0\n-\t   && REG_P (result) && GET_MODE (result) == insn_mode\n-\t   && REGNO (result) >= FIRST_PSEUDO_REGISTER))\n-      result = gen_reg_rtx (insn_mode);\n+  machine_mode mode = TYPE_MODE (TREE_TYPE (exp));\n+  location_t loc = EXPR_LOCATION (exp);\n+  rtx arg1_rtx = get_memory_rtx (arg1, len);\n+  rtx arg2_rtx = get_memory_rtx (arg2, len);\n+  rtx arg3_rtx = expand_normal (fold_convert_loc (loc, sizetype, len));\n \n-    arg1_rtx = get_memory_rtx (arg1, len);\n-    arg2_rtx = get_memory_rtx (arg2, len);\n-    arg3_rtx = expand_normal (fold_convert_loc (loc, sizetype, len));\n+  /* Set MEM_SIZE as appropriate.  */\n+  if (CONST_INT_P (arg3_rtx))\n+    {\n+      set_mem_size (arg1_rtx, INTVAL (arg3_rtx));\n+      set_mem_size (arg2_rtx, INTVAL (arg3_rtx));\n+    }\n \n-    /* Set MEM_SIZE as appropriate.  */\n-    if (CONST_INT_P (arg3_rtx))\n-      {\n-\tset_mem_size (arg1_rtx, INTVAL (arg3_rtx));\n-\tset_mem_size (arg2_rtx, INTVAL (arg3_rtx));\n-      }\n+  rtx result = expand_cmpstrn_or_cmpmem (icode, target, arg1_rtx, arg2_rtx,\n+\t\t\t\t\t TREE_TYPE (len), arg3_rtx,\n+\t\t\t\t\t MIN (arg1_align, arg2_align));\n+  if (result)\n+    {\n+      /* Return the value in the proper mode for this function.  */\n+      if (GET_MODE (result) == mode)\n+\treturn result;\n \n-    if (HAVE_cmpmemsi)\n-      insn = gen_cmpmemsi (result, arg1_rtx, arg2_rtx, arg3_rtx,\n-\t\t\t   GEN_INT (MIN (arg1_align, arg2_align)));\n-    else\n-      gcc_unreachable ();\n+      if (target != 0)\n+\t{\n+\t  convert_move (target, result, 0);\n+\t  return target;\n+\t}\n \n-    if (insn)\n-      emit_insn (insn);\n-    else\n-      emit_library_call_value (memcmp_libfunc, result, LCT_PURE,\n-\t\t\t       TYPE_MODE (integer_type_node), 3,\n-\t\t\t       XEXP (arg1_rtx, 0), Pmode,\n-\t\t\t       XEXP (arg2_rtx, 0), Pmode,\n-\t\t\t       convert_to_mode (TYPE_MODE (sizetype), arg3_rtx,\n-\t\t\t\t\t\tTYPE_UNSIGNED (sizetype)),\n-\t\t\t       TYPE_MODE (sizetype));\n-\n-    /* Return the value in the proper mode for this function.  */\n-    mode = TYPE_MODE (TREE_TYPE (exp));\n-    if (GET_MODE (result) == mode)\n-      return result;\n-    else if (target != 0)\n-      {\n-\tconvert_move (target, result, 0);\n-\treturn target;\n-      }\n-    else\n       return convert_to_mode (mode, result, 0);\n-  }\n-#endif /* HAVE_cmpmemsi.  */\n+    }\n \n-  return NULL_RTX;\n+  result = target;\n+  if (! (result != 0\n+\t && REG_P (result) && GET_MODE (result) == mode\n+\t && REGNO (result) >= FIRST_PSEUDO_REGISTER))\n+    result = gen_reg_rtx (mode);\n+\n+  emit_library_call_value (memcmp_libfunc, result, LCT_PURE,\n+\t\t\t   TYPE_MODE (integer_type_node), 3,\n+\t\t\t   XEXP (arg1_rtx, 0), Pmode,\n+\t\t\t   XEXP (arg2_rtx, 0), Pmode,\n+\t\t\t   convert_to_mode (TYPE_MODE (sizetype), arg3_rtx,\n+\t\t\t\t\t    TYPE_UNSIGNED (sizetype)),\n+\t\t\t   TYPE_MODE (sizetype));\n+  return result;\n }\n \n /* Expand expression EXP, which is a call to the strcmp builtin.  Return NULL_RTX\n@@ -4137,9 +4121,9 @@ expand_builtin_strcmp (tree exp, ATTRIBUTE_UNUSED rtx target)\n \t  if (len && !TREE_SIDE_EFFECTS (len))\n \t    {\n \t      arg3_rtx = expand_normal (len);\n-\t      result = expand_cmpstrn (cmpstrn_icode, target, arg1_rtx,\n-\t\t\t\t       arg2_rtx, TREE_TYPE (len), arg3_rtx,\n-\t\t\t\t       MIN (arg1_align, arg2_align));\n+\t      result = expand_cmpstrn_or_cmpmem\n+\t\t(cmpstrn_icode, target, arg1_rtx, arg2_rtx, TREE_TYPE (len),\n+\t\t arg3_rtx, MIN (arg1_align, arg2_align));\n \t    }\n \t}\n \n@@ -4249,9 +4233,9 @@ expand_builtin_strncmp (tree exp, ATTRIBUTE_UNUSED rtx target,\n     arg1_rtx = get_memory_rtx (arg1, len);\n     arg2_rtx = get_memory_rtx (arg2, len);\n     arg3_rtx = expand_normal (len);\n-    result = expand_cmpstrn (cmpstrn_icode, target, arg1_rtx, arg2_rtx,\n-\t\t\t     TREE_TYPE (len), arg3_rtx,\n-\t\t\t     MIN (arg1_align, arg2_align));\n+    result = expand_cmpstrn_or_cmpmem (cmpstrn_icode, target, arg1_rtx,\n+\t\t\t\t       arg2_rtx, TREE_TYPE (len), arg3_rtx,\n+\t\t\t\t       MIN (arg1_align, arg2_align));\n     if (result)\n       {\n \t/* Return the value in the proper mode for this function.  */\n@@ -6346,7 +6330,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n \n     case BUILT_IN_BCMP:\n     case BUILT_IN_MEMCMP:\n-      target = expand_builtin_memcmp (exp, target, mode);\n+      target = expand_builtin_memcmp (exp, target);\n       if (target)\n \treturn target;\n       break;"}]}