{"sha": "5887325513b0bafa41a4c77a094d7995cc09817c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg4NzMyNTUxM2IwYmFmYTQxYTRjNzdhMDk0ZDc5OTVjYzA5ODE3Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-04-13T18:51:22Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-04-13T18:51:22Z"}, "message": "(canon_reg, cse_insn): Don't examine insn_n_dups if recog_memoized\nfails to find a match.\n\nFrom-SVN: r13888", "tree": {"sha": "f0d4fa042a12ccd0d4e48bce387e3354cda7f052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0d4fa042a12ccd0d4e48bce387e3354cda7f052"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5887325513b0bafa41a4c77a094d7995cc09817c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5887325513b0bafa41a4c77a094d7995cc09817c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5887325513b0bafa41a4c77a094d7995cc09817c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5887325513b0bafa41a4c77a094d7995cc09817c/comments", "author": null, "committer": null, "parents": [{"sha": "cfb3ee16db4fc9138f2df3524c32c580bb505460", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfb3ee16db4fc9138f2df3524c32c580bb505460", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfb3ee16db4fc9138f2df3524c32c580bb505460"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "f180075194d9b328751ef6fcd05326b7f1ca6e88", "filename": "gcc/cse.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5887325513b0bafa41a4c77a094d7995cc09817c/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5887325513b0bafa41a4c77a094d7995cc09817c/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=5887325513b0bafa41a4c77a094d7995cc09817c", "patch": "@@ -2595,14 +2595,16 @@ canon_reg (x, insn)\n       if (fmt[i] == 'e')\n \t{\n \t  rtx new = canon_reg (XEXP (x, i), insn);\n+\t  int insn_code;\n \n \t  /* If replacing pseudo with hard reg or vice versa, ensure the\n \t     insn remains valid.  Likewise if the insn has MATCH_DUPs.  */\n \t  if (insn != 0 && new != 0\n \t      && GET_CODE (new) == REG && GET_CODE (XEXP (x, i)) == REG\n \t      && (((REGNO (new) < FIRST_PSEUDO_REGISTER)\n \t\t   != (REGNO (XEXP (x, i)) < FIRST_PSEUDO_REGISTER))\n-\t\t  || insn_n_dups[recog_memoized (insn)] > 0))\n+\t\t  || (insn_code = recog_memoized (insn)) < 0\n+\t\t  || insn_n_dups[insn_code] > 0))\n \t    validate_change (insn, &XEXP (x, i), new, 1);\n \t  else\n \t    XEXP (x, i) = new;\n@@ -6328,11 +6330,13 @@ cse_insn (insn, in_libcall_block)\n       rtx dest = SET_DEST (sets[i].rtl);\n       rtx src = SET_SRC (sets[i].rtl);\n       rtx new = canon_reg (src, insn);\n+      int insn_code;\n \n       if ((GET_CODE (new) == REG && GET_CODE (src) == REG\n \t   && ((REGNO (new) < FIRST_PSEUDO_REGISTER)\n \t       != (REGNO (src) < FIRST_PSEUDO_REGISTER)))\n-\t  || insn_n_dups[recog_memoized (insn)] > 0)\n+\t  || (insn_code = recog_memoized (insn)) < 0\n+\t  || insn_n_dups[insn_code] > 0)\n \tvalidate_change (insn, &SET_SRC (sets[i].rtl), new, 1);\n       else\n \tSET_SRC (sets[i].rtl) = new;"}]}