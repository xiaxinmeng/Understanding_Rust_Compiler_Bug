{"sha": "7deb61cd7fdf23c235cd540ad200fb6bb5e77527", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RlYjYxY2Q3ZmRmMjNjMjM1Y2Q1NDBhZDIwMGZiNmJiNWU3NzUyNw==", "commit": {"author": {"name": "Ira Rosen", "email": "ira.rosen@linaro.org", "date": "2011-09-19T11:46:00Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2011-09-19T11:46:00Z"}, "message": "re PR tree-optimization/50413 (Incorrect instruction is used to shift value of 128 bit xmm0 registrer)\n\n\n        PR tree-optimization/50413\n        * tree-vect-data-refs.c (vect_analyze_data_refs): Fail to\n        vectorize a basic block if one of its data-refs can't be\n        analyzed.\n\nFrom-SVN: r178968", "tree": {"sha": "152fa998cf7d6f1978db8497f6c12c10246b55d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/152fa998cf7d6f1978db8497f6c12c10246b55d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7deb61cd7fdf23c235cd540ad200fb6bb5e77527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7deb61cd7fdf23c235cd540ad200fb6bb5e77527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7deb61cd7fdf23c235cd540ad200fb6bb5e77527", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7deb61cd7fdf23c235cd540ad200fb6bb5e77527/comments", "author": null, "committer": null, "parents": [{"sha": "a3627303ee33116be7f61fbf8f8f5547baf04a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3627303ee33116be7f61fbf8f8f5547baf04a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3627303ee33116be7f61fbf8f8f5547baf04a03"}], "stats": {"total": 232, "additions": 212, "deletions": 20}, "files": [{"sha": "06060c5fd69a597b324af0921f63e53c04fd4233", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7deb61cd7fdf23c235cd540ad200fb6bb5e77527/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7deb61cd7fdf23c235cd540ad200fb6bb5e77527/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7deb61cd7fdf23c235cd540ad200fb6bb5e77527", "patch": "@@ -1,3 +1,9 @@\n+2011-09-19  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR tree-optimization/50413\n+\t* tree-vect-data-refs.c (vect_analyze_data_refs): Fail to vectorize\n+\ta basic block if one of its data-refs can't be analyzed.\n+\n 2011-09-19  Paul Brook  <paul@codesourcery.com>\n \n \tgcc/"}, {"sha": "66c639adf2b5a249143564375cf48b2a28cfaeaf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7deb61cd7fdf23c235cd540ad200fb6bb5e77527/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7deb61cd7fdf23c235cd540ad200fb6bb5e77527/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7deb61cd7fdf23c235cd540ad200fb6bb5e77527", "patch": "@@ -1,10 +1,18 @@\n+2011-09-19  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR tree-optimization/50413\n+\t* g++.dg/vect/vect.exp: Run slp-pr* tests with\n+\t-fdump-tree-slp-details.  Run other tests with\n+\t-fdump-tree-vect-details.\n+\t* g++.dg/vect/slp-pr50413.cc: New.\n+\n 2011-09-18  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \t    Ira Rosen  <ira.rosen@linaro.org>\n \n \tPR testsuite/50435\n \t* gcc.dg/vect/bb-slp-25.c: Add an if to avoid loop vectorization.\n \tFix underscores around restrict.\n- \n+\n 2011-09-18  Ira Rosen  <ira.rosen@linaro.org>\n \n \tPR tree-optimization/50414"}, {"sha": "5a8c82a604e487bb4dffe211cd765ded6114b0ea", "filename": "gcc/testsuite/g++.dg/vect/slp-pr50413.cc", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7deb61cd7fdf23c235cd540ad200fb6bb5e77527/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr50413.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7deb61cd7fdf23c235cd540ad200fb6bb5e77527/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr50413.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr50413.cc?ref=7deb61cd7fdf23c235cd540ad200fb6bb5e77527", "patch": "@@ -0,0 +1,185 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+typedef unsigned long long UInt64;\n+\n+typedef struct struct128\n+{\n+  UInt64 uint64_lower;\n+  UInt64 uint64_upper;\n+}\n+STRUCT_128;\n+\n+typedef union uint128_bitmap\n+{\n+  STRUCT_128 uint128;\n+  \n+    struct\n+    {\n+      UInt64 b00 : 1;\n+      UInt64 b01 : 1;\n+      UInt64 b02 : 1;\n+      UInt64 b03 : 1;\n+      UInt64 b04 : 1;\n+      UInt64 b05 : 1;\n+      UInt64 b06 : 1;\n+      UInt64 b07 : 1;\n+      UInt64 b08 : 1;\n+      UInt64 b09 : 1;\n+      UInt64 b10 : 1;\n+      UInt64 b11 : 1;\n+      UInt64 b12 : 1;\n+      UInt64 b13 : 1;\n+      UInt64 b14 : 1;\n+      UInt64 b15 : 1;\n+      UInt64 b16 : 1;\n+      UInt64 b17 : 1;\n+      UInt64 b18 : 1;\n+      UInt64 b19 : 1;\n+      UInt64 b20 : 1;\n+      UInt64 b21 : 1;\n+      UInt64 b22 : 1;\n+      UInt64 b23 : 1;\n+      UInt64 b24 : 1;\n+      UInt64 b25 : 1;\n+      UInt64 b26 : 1;\n+      UInt64 b27 : 1;\n+      UInt64 b28 : 1;\n+      UInt64 b29 : 1;\n+      UInt64 b30 : 1;\n+      UInt64 b31 : 1;\n+      UInt64 b32 : 1;\n+      UInt64 b33 : 1;\n+      UInt64 b34 : 1;\n+      UInt64 b35 : 1;\n+      UInt64 b36 : 1;\n+      UInt64 b37 : 1;\n+      UInt64 b38 : 1;\n+      UInt64 b39 : 1;\n+      UInt64 b40 : 1;\n+      UInt64 b41 : 1;\n+      UInt64 b42 : 1;\n+      UInt64 b43 : 1;\n+      UInt64 b44 : 1;\n+      UInt64 b45 : 1;\n+      UInt64 b46 : 1;\n+      UInt64 b47 : 1;\n+      UInt64 b48 : 1;\n+      UInt64 b49 : 1;\n+      UInt64 b50 : 1;\n+      UInt64 b51 : 1;\n+      UInt64 b52 : 1;\n+      UInt64 b53 : 1;\n+      UInt64 b54 : 1;\n+      UInt64 b55 : 1;\n+      UInt64 b56 : 1;\n+      UInt64 b57 : 1;\n+      UInt64 b58 : 1;\n+      UInt64 b59 : 1;\n+      UInt64 b60 : 1;\n+      UInt64 b61 : 1;\n+      UInt64 b62 : 1;\n+      UInt64 b63 : 1;\n+      UInt64 b64 : 1;\n+      UInt64 b65 : 1;\n+      UInt64 b66 : 1;\n+      UInt64 b67 : 1;\n+      UInt64 b68 : 1;\n+      UInt64 b69 : 1;\n+      UInt64 b70 : 1;\n+      UInt64 b71 : 1;\n+      UInt64 b72 : 1;\n+      UInt64 b73 : 1;\n+      UInt64 b74 : 1;\n+      UInt64 b75 : 1;\n+      UInt64 b76 : 1;\n+      UInt64 b77 : 1;\n+      UInt64 b78 : 1;\n+      UInt64 b79 : 1;\n+      UInt64 b80 : 1;\n+      UInt64 b81 : 1;\n+      UInt64 b82 : 1;\n+      UInt64 b83 : 1;\n+      UInt64 b84 : 1;\n+      UInt64 b85 : 1;\n+      UInt64 b86 : 1;\n+      UInt64 b87 : 1;\n+      UInt64 b88 : 1;\n+      UInt64 b89 : 1;\n+      UInt64 b90 : 1;\n+      UInt64 b91 : 1;\n+      UInt64 b92 : 1;\n+      UInt64 b93 : 1;\n+      UInt64 b94 : 1;\n+      UInt64 b95 : 1;\n+      UInt64 b96 : 1;\n+      UInt64 b97 : 1;\n+      UInt64 b98 : 1;\n+      UInt64 b99 : 1;\n+      UInt64 b100 : 1;\n+      UInt64 b101 : 1;\n+      UInt64 b102 : 1;\n+      UInt64 b103 : 1;\n+      UInt64 b104 : 1;\n+      UInt64 b105 : 1;\n+      UInt64 b106 : 1;\n+      UInt64 b107 : 1;\n+      UInt64 b108 : 1;\n+      UInt64 b109 : 1;\n+      UInt64 b110 : 1;\n+      UInt64 b111 : 1;\n+      UInt64 b112 : 1;\n+      UInt64 b113 : 1;\n+      UInt64 b114 : 1;\n+      UInt64 b115 : 1;\n+      UInt64 b116 : 1;\n+      UInt64 b117 : 1;\n+      UInt64 b118 : 1;\n+      UInt64 b119 : 1;\n+      UInt64 b120 : 1;\n+      UInt64 b121 : 1;\n+      UInt64 b122 : 1;\n+      UInt64 b123 : 1;\n+      UInt64 b124 : 1;\n+      UInt64 b125 : 1;\n+      UInt64 b126 : 1;\n+      UInt64 b127 : 1;\n+    }\n+    bitmap;\n+}\n+UInt128_BITMAP;\n+\n+UInt128_BITMAP V;\n+\n+template<typename CAST>\n+unsigned char get_bit(CAST value, unsigned char pos)\n+{\n+    return ( value & (static_cast<CAST>(1) << pos) ) != 0;\n+}\n+\n+void shift(unsigned char t)\n+{\n+  V.uint128.uint64_lower = (V.uint128.uint64_lower >> 1);\n+  V.bitmap.b63 = V.bitmap.b64;\n+  V.uint128.uint64_upper = (V.uint128.uint64_upper >> 1);\n+  \n+  V.bitmap.b96 = t;\n+}\n+\n+int main()\n+{\n+   V.uint128.uint64_lower = 0;\n+   V.uint128.uint64_upper = 0xd4004001;\n+\n+   UInt64 Kc = 0xDD1A1B8A8A5C2400;\n+ \n+  for (int i = 0; i < 64; i++ )\n+  {\n+    shift( get_bit( Kc, i) );\n+  }\n+\n+   return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"basic block vectorized using SLP\" 0 \"slp\" } } */\n+/* { dg-final { cleanup-tree-dump \"slp\" } } */\n+"}, {"sha": "ac22f4b017ddf8c5f6631b19b036a086603b2822", "filename": "gcc/testsuite/g++.dg/vect/vect.exp", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7deb61cd7fdf23c235cd540ad200fb6bb5e77527/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7deb61cd7fdf23c235cd540ad200fb6bb5e77527/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp?ref=7deb61cd7fdf23c235cd540ad200fb6bb5e77527", "patch": "@@ -40,8 +40,13 @@ global DEFAULT_VECTCFLAGS\n set DEFAULT_VECTCFLAGS \"\"\n \n # These flags are used for all targets.\n-lappend DEFAULT_VECTCFLAGS \"-O2\" \"-ftree-vectorize\" \"-fno-vect-cost-model\" \\\n-  \"-ftree-vectorizer-verbose=4\" \"-fdump-tree-vect-stats\"\n+lappend DEFAULT_VECTCFLAGS \"-O2\" \"-ftree-vectorize\" \"-fno-vect-cost-model\"\n+\n+set VECT_SLP_CFLAGS $DEFAULT_VECTCFLAGS\n+\n+lappend DEFAULT_VECTCFLAGS \"-fdump-tree-vect-details\"\n+lappend VECT_SLP_CFLAGS \"-fdump-tree-slp-details\"\n+\n \n # Skip these tests for targets that do not support generating vector\n # code.  Set additional target-dependent vector flags, which can be\n@@ -54,8 +59,10 @@ if ![check_vect_support_and_set_flags] {\n dg-init\n \n # Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.{c,cc,S} ]] \\\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/pr*.{c,cc,S} ]] \\\n         \"\" $DEFAULT_VECTCFLAGS\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/slp-pr*.{c,cc,S} ]] \\\n+        \"\" $VECT_SLP_CFLAGS\n \n #### Tests with special options\n global SAVED_DEFAULT_VECTCFLAGS"}, {"sha": "a9504cd23626c83c38dca92c923a034c900b8a61", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7deb61cd7fdf23c235cd540ad200fb6bb5e77527/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7deb61cd7fdf23c235cd540ad200fb6bb5e77527/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=7deb61cd7fdf23c235cd540ad200fb6bb5e77527", "patch": "@@ -2595,29 +2595,15 @@ vect_analyze_data_refs (loop_vec_info loop_vinfo,\n               print_gimple_stmt (vect_dump, stmt, 0, TDF_SLIM);\n             }\n \n-          if (bb_vinfo)\n-            {\n-              /* Mark the statement as not vectorizable.  */\n-              STMT_VINFO_VECTORIZABLE (stmt_info) = false;\n-              continue;\n-            }\n-          else\n-            return false;\n+          return false;\n         }\n \n       if (TREE_CODE (DR_BASE_ADDRESS (dr)) == INTEGER_CST)\n         {\n           if (vect_print_dump_info (REPORT_UNVECTORIZED_LOCATIONS))\n             fprintf (vect_dump, \"not vectorized: base addr of dr is a \"\n                      \"constant\");\n-          if (bb_vinfo)\n-            {\n-              /* Mark the statement as not vectorizable.  */\n-              STMT_VINFO_VECTORIZABLE (stmt_info) = false;\n-              continue;\n-            }\n-          else\n-            return false;\n+          return false;\n         }\n \n       if (TREE_THIS_VOLATILE (DR_REF (dr)))"}]}