{"sha": "56f58d3a43c2adf16c117bfcaf94e11324b09184", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZmNThkM2E0M2MyYWRmMTZjMTE3YmZjYWY5NGUxMTMyNGIwOTE4NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-21T22:45:38Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-21T22:45:38Z"}, "message": "(reload): Clear forbidden_regs earlier.\n\n(new_spill_reg): Mention in error message that asm clauses can also\ncause the compiler to run out of spill regs.\n(scan_paradoxical_regs): If SMALL_REGISTER_CLASSES, forbid hard regs\nused in explicit user variables.\n\nFrom-SVN: r7132", "tree": {"sha": "020fe35e52670fa572abaccf34cd855ed50e4046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/020fe35e52670fa572abaccf34cd855ed50e4046"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56f58d3a43c2adf16c117bfcaf94e11324b09184", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f58d3a43c2adf16c117bfcaf94e11324b09184", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56f58d3a43c2adf16c117bfcaf94e11324b09184", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f58d3a43c2adf16c117bfcaf94e11324b09184/comments", "author": null, "committer": null, "parents": [{"sha": "c448a43e24ae85ee584aac5113081e4e360c1d81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c448a43e24ae85ee584aac5113081e4e360c1d81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c448a43e24ae85ee584aac5113081e4e360c1d81"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "98b5b405458f5c4036539df3f1352e755b57e445", "filename": "gcc/reload1.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f58d3a43c2adf16c117bfcaf94e11324b09184/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f58d3a43c2adf16c117bfcaf94e11324b09184/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=56f58d3a43c2adf16c117bfcaf94e11324b09184", "patch": "@@ -526,9 +526,14 @@ reload (first, global, dumpfile)\n   cannot_omit_stores = (char *) alloca (max_regno);\n   bzero (cannot_omit_stores, max_regno);\n \n+#ifdef SMALL_REGISTER_CLASSES\n+  CLEAR_HARD_REG_SET (forbidden_regs);\n+#endif\n+\n   /* Look for REG_EQUIV notes; record what each pseudo is equivalent to.\n-     Also find all paradoxical subregs\n-     and find largest such for each pseudo.  */\n+     Also find all paradoxical subregs and find largest such for each pseudo.\n+     On machines with small register classes, record hard registers that\n+     are used for user variables.  These can never be used for spills.  */\n \n   for (insn = first; insn; insn = NEXT_INSN (insn))\n     {\n@@ -690,9 +695,7 @@ reload (first, global, dumpfile)\n      rtl as a spill register.  But on some, we have to.  Those will have\n      taken care to keep the life of hard regs as short as possible.  */\n \n-#ifdef SMALL_REGISTER_CLASSES\n-  CLEAR_HARD_REG_SET (forbidden_regs);\n-#else\n+#ifndef SMALL_REGISTER_CLASSES\n   COPY_HARD_REG_SET (forbidden_regs, bad_spill_regs);\n #endif\n \n@@ -2168,7 +2171,8 @@ new_spill_reg (i, class, max_needs, max_nongroups, global, dumpfile)\n \n   if (fixed_regs[regno] || TEST_HARD_REG_BIT (forbidden_regs, regno))\n     fatal (\"fixed or forbidden register was spilled.\\n\\\n-This may be due to a compiler bug or to impossible asm statements.\");\n+This may be due to a compiler bug or to impossible asm\\n\\\n+statements or clauses.\");\n \n   /* Make reg REGNO an additional reload reg.  */\n \n@@ -3406,7 +3410,9 @@ spill_hard_reg (regno, global, dumpfile, cant_eliminate)\n   return something_changed;\n }\n \f\n-/* Find all paradoxical subregs within X and update reg_max_ref_width.  */\n+/* Find all paradoxical subregs within X and update reg_max_ref_width. \n+   Also mark any hard registers used to store user variables as\n+   forbidden from being used for spill registers.  */\n \n static void\n scan_paradoxical_subregs (x)\n@@ -3418,14 +3424,20 @@ scan_paradoxical_subregs (x)\n \n   switch (code)\n     {\n+    case REG:\n+#ifdef SMALL_REGISTER_CLASSES\n+      if (REGNO (x) < FIRST_PSEUDO_REGISTER && REG_USERVAR_P (x))\n+\tSET_HARD_REG_BIT (forbidden_regs, REGNO (x));\n+#endif\n+      return;\n+\n     case CONST_INT:\n     case CONST:\n     case SYMBOL_REF:\n     case LABEL_REF:\n     case CONST_DOUBLE:\n     case CC0:\n     case PC:\n-    case REG:\n     case USE:\n     case CLOBBER:\n       return;"}]}