{"sha": "a3be187d610ce71528decf216eb1f7410a5dc8ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNiZTE4N2Q2MTBjZTcxNTI4ZGVjZjIxNmViMWY3NDEwYTVkYzhhZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-27T20:24:41Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-27T20:24:41Z"}, "message": "resource.c: Use rtx_sequence\n\ngcc/\n2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n\n\t* resource.c (mark_referenced_resources): Strengthen local\n\t\"sequence\" from rtx to rtx_sequence *, adding a checked cast, and\n\tusing methods of rtx_sequence to clarify the code.\n\t(find_dead_or_set_registers): Within the switch statement, convert\n\ta GET_CODE check to a dyn_cast, introducing local \"seq\".  Within\n\tthe JUMP_P handling, introduce another local \"seq\", adding a\n\tchecked cast to rtx_sequence *.  In both cases, use methods of\n\trtx_sequence to clarify the code.\n\t(mark_set_resources): Within SEQUENCE case, introduce local \"seq\"\n\tvia a checked cast, and use methods of rtx_sequence to simplify\n\tthe code.\n\nFrom-SVN: r214598", "tree": {"sha": "a6d4c67e572fd7570f3a84d89171aba1bd598aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6d4c67e572fd7570f3a84d89171aba1bd598aa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3be187d610ce71528decf216eb1f7410a5dc8ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3be187d610ce71528decf216eb1f7410a5dc8ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3be187d610ce71528decf216eb1f7410a5dc8ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3be187d610ce71528decf216eb1f7410a5dc8ae/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e3090e11260968e1bc2af530b3ed339fb43db16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3090e11260968e1bc2af530b3ed339fb43db16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e3090e11260968e1bc2af530b3ed339fb43db16"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "162722c8622c17a2cae5ecfae55fcbbad46d53d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3be187d610ce71528decf216eb1f7410a5dc8ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3be187d610ce71528decf216eb1f7410a5dc8ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3be187d610ce71528decf216eb1f7410a5dc8ae", "patch": "@@ -1,3 +1,17 @@\n+2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* resource.c (mark_referenced_resources): Strengthen local\n+\t\"sequence\" from rtx to rtx_sequence *, adding a checked cast, and\n+\tusing methods of rtx_sequence to clarify the code.\n+\t(find_dead_or_set_registers): Within the switch statement, convert\n+\ta GET_CODE check to a dyn_cast, introducing local \"seq\".  Within\n+\tthe JUMP_P handling, introduce another local \"seq\", adding a\n+\tchecked cast to rtx_sequence *.  In both cases, use methods of\n+\trtx_sequence to clarify the code.\n+\t(mark_set_resources): Within SEQUENCE case, introduce local \"seq\"\n+\tvia a checked cast, and use methods of rtx_sequence to simplify\n+\tthe code.\n+\n 2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* reorg.c (redundant_insn): In two places in the function, replace"}, {"sha": "dfd10f624cbcd3d628ec5a2423e8daa0d732b4eb", "filename": "gcc/resource.c", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3be187d610ce71528decf216eb1f7410a5dc8ae/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3be187d610ce71528decf216eb1f7410a5dc8ae/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=a3be187d610ce71528decf216eb1f7410a5dc8ae", "patch": "@@ -309,15 +309,15 @@ mark_referenced_resources (rtx x, struct resources *res,\n \t     into the delay slot of this CALL.  If so, the USE's for them\n \t     don't count and should be skipped.  */\n \t  rtx_insn *insn = PREV_INSN (x);\n-\t  rtx sequence = 0;\n+\t  rtx_sequence *sequence = 0;\n \t  int seq_size = 0;\n \t  int i;\n \n \t  /* If we are part of a delay slot sequence, point at the SEQUENCE.  */\n \t  if (NEXT_INSN (insn) != x)\n \t    {\n-\t      sequence = PATTERN (NEXT_INSN (insn));\n-\t      seq_size = XVECLEN (sequence, 0);\n+\t      sequence = as_a <rtx_sequence *> (PATTERN (NEXT_INSN (insn)));\n+\t      seq_size = sequence->len ();\n \t      gcc_assert (GET_CODE (sequence) == SEQUENCE);\n \t    }\n \n@@ -356,7 +356,7 @@ mark_referenced_resources (rtx x, struct resources *res,\n \t\t{\n \t\t  for (i = 1; i < seq_size; i++)\n \t\t    {\n-\t\t      rtx slot_pat = PATTERN (XVECEXP (sequence, 0, i));\n+\t\t      rtx slot_pat = PATTERN (sequence->element (i));\n \t\t      if (GET_CODE (slot_pat) == SET\n \t\t\t  && rtx_equal_p (SET_DEST (slot_pat),\n \t\t\t\t\t  XEXP (XEXP (link, 0), 0)))\n@@ -473,13 +473,14 @@ find_dead_or_set_registers (rtx target, struct resources *res,\n \t    }\n \t  else if (GET_CODE (PATTERN (insn)) == CLOBBER)\n \t    continue;\n-\t  else if (GET_CODE (PATTERN (insn)) == SEQUENCE)\n+\t  else if (rtx_sequence *seq =\n+\t\t     dyn_cast <rtx_sequence *> (PATTERN (insn)))\n \t    {\n \t      /* An unconditional jump can be used to fill the delay slot\n \t\t of a call, so search for a JUMP_INSN in any position.  */\n-\t      for (i = 0; i < XVECLEN (PATTERN (insn), 0); i++)\n+\t      for (i = 0; i < seq->len (); i++)\n \t\t{\n-\t\t  this_jump_insn = XVECEXP (PATTERN (insn), 0, i);\n+\t\t  this_jump_insn = seq->element (i);\n \t\t  if (JUMP_P (this_jump_insn))\n \t\t    break;\n \t\t}\n@@ -536,17 +537,18 @@ find_dead_or_set_registers (rtx target, struct resources *res,\n \t\t  if (GET_CODE (PATTERN (insn)) == SEQUENCE\n \t\t      && INSN_ANNULLED_BRANCH_P (this_jump_insn))\n \t\t    {\n-\t\t      for (i = 1; i < XVECLEN (PATTERN (insn), 0); i++)\n-\t\t\tINSN_FROM_TARGET_P (XVECEXP (PATTERN (insn), 0, i))\n-\t\t\t  = ! INSN_FROM_TARGET_P (XVECEXP (PATTERN (insn), 0, i));\n+\t\t      rtx_sequence *seq = as_a <rtx_sequence *> (PATTERN (insn));\n+\t\t      for (i = 1; i < seq->len (); i++)\n+\t\t\tINSN_FROM_TARGET_P (seq->element (i))\n+\t\t\t  = ! INSN_FROM_TARGET_P (seq->element (i));\n \n \t\t      target_set = set;\n \t\t      mark_set_resources (insn, &target_set, 0,\n \t\t\t\t\t  MARK_SRC_DEST_CALL);\n \n-\t\t      for (i = 1; i < XVECLEN (PATTERN (insn), 0); i++)\n-\t\t\tINSN_FROM_TARGET_P (XVECEXP (PATTERN (insn), 0, i))\n-\t\t\t  = ! INSN_FROM_TARGET_P (XVECEXP (PATTERN (insn), 0, i));\n+\t\t      for (i = 1; i < seq->len (); i++)\n+\t\t\tINSN_FROM_TARGET_P (seq->element (i))\n+\t\t\t  = ! INSN_FROM_TARGET_P (seq->element (i));\n \n \t\t      mark_set_resources (insn, &set, 0, MARK_SRC_DEST_CALL);\n \t\t    }\n@@ -712,13 +714,14 @@ mark_set_resources (rtx x, struct resources *res, int in_dest,\n \n     case SEQUENCE:\n       {\n-        rtx control = XVECEXP (x, 0, 0);\n+        rtx_sequence *seq = as_a <rtx_sequence *> (x);\n+        rtx control = seq->element (0);\n         bool annul_p = JUMP_P (control) && INSN_ANNULLED_BRANCH_P (control);\n \n         mark_set_resources (control, res, 0, mark_type);\n-        for (i = XVECLEN (x, 0) - 1; i >= 0; --i)\n+        for (i = seq->len () - 1; i >= 0; --i)\n \t  {\n-\t    rtx elt = XVECEXP (x, 0, i);\n+\t    rtx elt = seq->element (i);\n \t    if (!annul_p && INSN_FROM_TARGET_P (elt))\n \t      mark_set_resources (elt, res, 0, mark_type);\n \t  }"}]}