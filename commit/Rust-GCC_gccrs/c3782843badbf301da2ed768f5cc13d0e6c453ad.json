{"sha": "c3782843badbf301da2ed768f5cc13d0e6c453ad", "node_id": "C_kwDOANBUbNoAKGMzNzgyODQzYmFkYmYzMDFkYTJlZDc2OGY1Y2MxM2QwZTZjNDUzYWQ", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-12T12:56:32Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-13T16:03:11Z"}, "message": "Fix -Wformat-diag for ARM target.\n\ngcc/ChangeLog:\n\n\t* common/config/arm/arm-common.c (arm_target_mode): Wrap\n\tkeywords with %<, %> and remove trailing punctuation char.\n\t(arm_canon_arch_option_1): Likewise.\n\t(arm_asm_auto_mfpu): Likewise.\n\t* config/arm/arm-builtins.c (arm_expand_builtin): Likewise.\n\t* config/arm/arm.c (arm_options_perform_arch_sanity_checks): Likewise.\n\t(use_vfp_abi): Likewise.\n\t(aapcs_vfp_is_call_or_return_candidate): Likewise.\n\t(arm_handle_cmse_nonsecure_entry): Likewise.\n\t(arm_handle_cmse_nonsecure_call): Likewise.\n\t(thumb1_md_asm_adjust): Likewise.", "tree": {"sha": "6746aac355fd511d9f75187d261c55ebd1fcb0e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6746aac355fd511d9f75187d261c55ebd1fcb0e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3782843badbf301da2ed768f5cc13d0e6c453ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3782843badbf301da2ed768f5cc13d0e6c453ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3782843badbf301da2ed768f5cc13d0e6c453ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3782843badbf301da2ed768f5cc13d0e6c453ad/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "6a898d8554b513d3bec7dc4d5e6c366f73335997", "filename": "gcc/common/config/arm/arm-common.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3782843badbf301da2ed768f5cc13d0e6c453ad/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3782843badbf301da2ed768f5cc13d0e6c453ad/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=c3782843badbf301da2ed768f5cc13d0e6c453ad", "patch": "@@ -286,7 +286,7 @@ arm_target_mode (int argc, const char **argv)\n \n   if (argc % 2 != 0)\n     fatal_error (input_location,\n-\t\t \"%%:target_mode_check takes an even number of parameters\");\n+\t\t \"%%:%<target_mode_check%> takes an even number of parameters\");\n \n   while (argc)\n     {\n@@ -295,8 +295,8 @@ arm_target_mode (int argc, const char **argv)\n       else if (strcmp (argv[0], \"cpu\") == 0)\n \tcpu = argv[1];\n       else\n-\tfatal_error (input_location,\n-\t\t     \"unrecognized option passed to %%:target_mode_check\");\n+\tfatal_error (input_location, \"unrecognized option passed to %%:\"\n+\t\t     \"%<target_mode_check%%>>\");\n       argc -= 2;\n       argv += 2;\n     }\n@@ -662,7 +662,7 @@ arm_canon_arch_option_1 (int argc, const char **argv, bool arch_for_multilib)\n \n   if (argc & 1)\n     fatal_error (input_location,\n-\t\t \"%%:canon_for_mlib takes 1 or more pairs of parameters\");\n+\t\t \"%%:%<canon_for_mlib%> takes 1 or more pairs of parameters\");\n \n   while (argc)\n     {\n@@ -676,7 +676,7 @@ arm_canon_arch_option_1 (int argc, const char **argv, bool arch_for_multilib)\n \tabi = argv[1];\n       else\n \tfatal_error (input_location,\n-\t\t     \"unrecognized operand to %%:canon_for_mlib\");\n+\t\t     \"unrecognized operand to %%:%<canon_for_mlib%>\");\n \n       argc -= 2;\n       argv += 2;\n@@ -1032,7 +1032,7 @@ arm_asm_auto_mfpu (int argc, const char **argv)\n \tarch = argv[1];\n       else\n \tfatal_error (input_location,\n-\t\t     \"unrecognized operand to %%:asm_auto_mfpu\");\n+\t\t     \"unrecognized operand to %%:%<asm_auto_mfpu%>\");\n       argc -= 2;\n       argv += 2;\n     }"}, {"sha": "e6bbda23e3ea3662bcb35023d61f49ebb891d91a", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3782843badbf301da2ed768f5cc13d0e6c453ad/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3782843badbf301da2ed768f5cc13d0e6c453ad/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=c3782843badbf301da2ed768f5cc13d0e6c453ad", "patch": "@@ -3013,7 +3013,7 @@ arm_expand_builtin_args (rtx target, machine_mode map_mode, int fcode,\n \t\t\t  else\n \t\t\t    error_at (EXPR_LOCATION (exp),\n \t\t\t\t      \"coproc must be a constant immediate in \"\n-\t\t\t\t      \"range [0-%d] enabled with +cdecp<N>\",\n+\t\t\t\t      \"range [0-%d] enabled with %<+cdecp<N>%>\",\n \t\t\t\t      ARM_CDE_CONST_COPROC);\n \t\t\t}\n \t\t      else\n@@ -3860,60 +3860,60 @@ arm_expand_builtin (tree exp,\n \t      && (imm < 0 || imm > 32))\n \t    {\n \t      if (fcode == ARM_BUILTIN_WRORHI)\n-\t\terror (\"the range of count should be in 0 to 32.  please check the intrinsic _mm_rori_pi16 in code.\");\n+\t\terror (\"the range of count should be in 0 to 32; please check the intrinsic %<_mm_rori_pi16%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WRORWI)\n-\t\terror (\"the range of count should be in 0 to 32.  please check the intrinsic _mm_rori_pi32 in code.\");\n+\t\terror (\"the range of count should be in 0 to 32; please check the intrinsic %<_mm_rori_pi32%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WRORH)\n-\t\terror (\"the range of count should be in 0 to 32.  please check the intrinsic _mm_ror_pi16 in code.\");\n+\t\terror (\"the range of count should be in 0 to 32; please check the intrinsic %<_mm_ror_pi16%> in code\");\n \t      else\n-\t\terror (\"the range of count should be in 0 to 32.  please check the intrinsic _mm_ror_pi32 in code.\");\n+\t\terror (\"the range of count should be in 0 to 32; please check the intrinsic %<_mm_ror_pi32%> in code\");\n \t    }\n \t  else if ((fcode == ARM_BUILTIN_WRORDI || fcode == ARM_BUILTIN_WRORD)\n \t\t   && (imm < 0 || imm > 64))\n \t    {\n \t      if (fcode == ARM_BUILTIN_WRORDI)\n-\t\terror (\"the range of count should be in 0 to 64.  please check the intrinsic _mm_rori_si64 in code.\");\n+\t\terror (\"the range of count should be in 0 to 64; please check the intrinsic %<_mm_rori_si64%> in code\");\n \t      else\n-\t\terror (\"the range of count should be in 0 to 64.  please check the intrinsic _mm_ror_si64 in code.\");\n+\t\terror (\"the range of count should be in 0 to 64; please check the intrinsic %<_mm_ror_si64%> in code\");\n \t    }\n \t  else if (imm < 0)\n \t    {\n \t      if (fcode == ARM_BUILTIN_WSRLHI)\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srli_pi16 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srli_pi16%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WSRLWI)\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srli_pi32 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srli_pi32%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WSRLDI)\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srli_si64 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srli_si64%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WSLLHI)\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_slli_pi16 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_slli_pi16%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WSLLWI)\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_slli_pi32 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_slli_pi32%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WSLLDI)\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_slli_si64 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_slli_si64%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WSRAHI)\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srai_pi16 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srai_pi16%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WSRAWI)\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srai_pi32 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srai_pi32%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WSRADI)\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srai_si64 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srai_si64%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WSRLH)\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srl_pi16 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srl_pi16%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WSRLW)\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srl_pi32 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srl_pi32%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WSRLD)\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srl_si64 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srl_si64%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WSLLH)\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_sll_pi16 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_sll_pi16%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WSLLW)\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_sll_pi32 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_sll_pi32%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WSLLD)\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_sll_si64 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_sll_si64%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WSRAH)\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_sra_pi16 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_sra_pi16%> in code\");\n \t      else if (fcode == ARM_BUILTIN_WSRAW)\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_sra_pi32 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_sra_pi32%> in code\");\n \t      else\n-\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_sra_si64 in code.\");\n+\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_sra_si64%> in code\");\n \t    }\n \t}\n       return arm_expand_binop_builtin (icode, exp, target);"}, {"sha": "084cbac68ed66af0632ae48d494f5e6a0ca2beab", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3782843badbf301da2ed768f5cc13d0e6c453ad/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3782843badbf301da2ed768f5cc13d0e6c453ad/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c3782843badbf301da2ed768f5cc13d0e6c453ad", "patch": "@@ -3894,7 +3894,7 @@ arm_options_perform_arch_sanity_checks (void)\n \n   /* __fp16 support currently assumes the core has ldrh.  */\n   if (!arm_arch4 && arm_fp16_format != ARM_FP16_FORMAT_NONE)\n-    sorry (\"__fp16 and no ldrh\");\n+    sorry (\"%<__fp16%> and no ldrh\");\n \n   if (use_cmse && !arm_arch_cmse)\n     error (\"target CPU does not support ARMv8-M Security Extensions\");\n@@ -6455,7 +6455,7 @@ use_vfp_abi (enum arm_pcs pcs_variant, bool is_double)\n \n       if (TARGET_THUMB1 && !seen_thumb1_vfp)\n \t{\n-\t  sorry (\"Thumb-1 hard-float VFP ABI\");\n+\t  sorry (\"Thumb-1 %<hard-float%> VFP ABI\");\n \t  /* sorry() is not immediately fatal, so only display this once.  */\n \t  seen_thumb1_vfp = true;\n \t}\n@@ -6544,7 +6544,7 @@ aapcs_vfp_is_call_or_return_candidate (enum arm_pcs pcs_variant,\n   *base_mode = new_mode;\n \n   if (TARGET_GENERAL_REGS_ONLY)\n-    error (\"argument of type %qT not permitted with -mgeneral-regs-only\",\n+    error (\"argument of type %qT not permitted with %<-mgeneral-regs-only%>\",\n \t   type);\n \n   return true;\n@@ -7488,7 +7488,7 @@ arm_handle_cmse_nonsecure_entry (tree *node, tree name,\n     {\n       *no_add_attrs = true;\n       warning (OPT_Wattributes, \"%qE attribute ignored without %<-mcmse%> \"\n-\t       \"option.\", name);\n+\t       \"option\", name);\n       return NULL_TREE;\n     }\n \n@@ -7540,7 +7540,7 @@ arm_handle_cmse_nonsecure_call (tree *node, tree name,\n     {\n       *no_add_attrs = true;\n       warning (OPT_Wattributes, \"%qE attribute ignored without %<-mcmse%> \"\n-\t       \"option.\", name);\n+\t       \"option\", name);\n       return NULL_TREE;\n     }\n \n@@ -34087,7 +34087,7 @@ thumb1_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n   for (unsigned i = 0, n = outputs.length (); i < n; ++i)\n     if (startswith (constraints[i], \"=@cc\"))\n       {\n-\tsorry (\"asm flags not supported in thumb1 mode\");\n+\tsorry (\"%<asm%> flags not supported in thumb1 mode\");\n \tbreak;\n       }\n   return NULL;"}]}