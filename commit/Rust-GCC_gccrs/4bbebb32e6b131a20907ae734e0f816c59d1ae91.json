{"sha": "4bbebb32e6b131a20907ae734e0f816c59d1ae91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJiZWJiMzJlNmIxMzFhMjA5MDdhZTczNGUwZjgxNmM1OWQxYWU5MQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "1999-09-06T21:44:50Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-06T21:44:50Z"}, "message": "Makefile.in (C_AND_OBJC_OBJS): Remove ggc-callbacks.o.\n\n\t* Makefile.in (C_AND_OBJC_OBJS): Remove ggc-callbacks.o.\n\t(c-parse.o, c-decl.o, c-lang.o, c-lex.o, c-common.o,\n\t$(out_object_file)): Depend on ggc.h.\n\t* c-common.c: Include \"ggc.h\".\n\t(combine_strings): If doing GC, use ggc_alloc_string.\n\t* c-decl.c: Include \"ggc.h\".\n\t(ggc_p): Define with value 0.\n\t(mark_binding_level): New function.\n\t(init_decl_processing): Add GC roots.\n\t(mark_c_function_context): New function.\n\t(lang_mark_false_label_stack): New function.\n\t(lang_mark_tree): New function.\n\t(lang_cleanup_tree): New function.\n\t* c-lang.c: Include \"ggc.h\".\n\t(lang_init): Call c_parse_init.\n\t* c-lex.c: Include \"ggc.h\".\n\t(check_linenum): If doing GC, don't copy filenames to permanent\n\tobstack.\n\t* c-parse.in: Include \"ggc.h\".\n\t(c_parse_init): New function.\n\t* c-tree.h (c_parse_init, mark_c_function_context): Declare.\n\t* objc/Make-lang.in (objc-parse.o): Depend on ggc.h.\n\n\t* except.c (mark_eh_state): Mark more state.\n\t* function.c (mark_function_state): Likewise.\n\t* ggc-simple.c (ggc_alloc_rtvec): Bring in sync with non-gc version.\n\t(ggc_alloc_string) [GGC_DUMP]: Fix typo.\n\t* toplev.c (mark_file_stack): New function.\n\t(compile_file): If doing GC, use ggc_alloc_string on input filename.\n\t(main): Add root for input_file_stack.\n\n\t* i386.c: Include \"ggc.h\".\n\t(ix86_mark_machine_status): New function.\n\t(override_options): Set mark_machine_status.\n\nFrom-SVN: r29144", "tree": {"sha": "e4678d478c15f38707157f8a1e7ba008f886606c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4678d478c15f38707157f8a1e7ba008f886606c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bbebb32e6b131a20907ae734e0f816c59d1ae91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bbebb32e6b131a20907ae734e0f816c59d1ae91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bbebb32e6b131a20907ae734e0f816c59d1ae91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bbebb32e6b131a20907ae734e0f816c59d1ae91/comments", "author": null, "committer": null, "parents": [{"sha": "1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "8e4a12ae9663a58faa268aed2361e0fb0cc04fbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bbebb32e6b131a20907ae734e0f816c59d1ae91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bbebb32e6b131a20907ae734e0f816c59d1ae91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bbebb32e6b131a20907ae734e0f816c59d1ae91", "patch": "@@ -1,3 +1,40 @@\n+Mon Sep  6 14:30:13 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* Makefile.in (C_AND_OBJC_OBJS): Remove ggc-callbacks.o.\n+\t(c-parse.o, c-decl.o, c-lang.o, c-lex.o, c-common.o,\n+\t$(out_object_file)): Depend on ggc.h.\n+\t* c-common.c: Include \"ggc.h\".\n+\t(combine_strings): If doing GC, use ggc_alloc_string.\n+\t* c-decl.c: Include \"ggc.h\".\n+\t(ggc_p): Define with value 0.\n+\t(mark_binding_level): New function.\n+\t(init_decl_processing): Add GC roots.\n+\t(mark_c_function_context): New function.\n+\t(lang_mark_false_label_stack): New function.\n+\t(lang_mark_tree): New function.\n+\t(lang_cleanup_tree): New function.\n+\t* c-lang.c: Include \"ggc.h\".\n+\t(lang_init): Call c_parse_init.\n+\t* c-lex.c: Include \"ggc.h\".\n+\t(check_linenum): If doing GC, don't copy filenames to permanent\n+\tobstack.\n+\t* c-parse.in: Include \"ggc.h\".\n+\t(c_parse_init): New function.\n+\t* c-tree.h (c_parse_init, mark_c_function_context): Declare.\n+\t* objc/Make-lang.in (objc-parse.o): Depend on ggc.h.\n+\n+\t* except.c (mark_eh_state): Mark more state.\n+\t* function.c (mark_function_state): Likewise.\n+\t* ggc-simple.c (ggc_alloc_rtvec): Bring in sync with non-gc version.\n+\t(ggc_alloc_string) [GGC_DUMP]: Fix typo.\n+\t* toplev.c (mark_file_stack): New function.\n+\t(compile_file): If doing GC, use ggc_alloc_string on input filename.\n+\t(main): Add root for input_file_stack.\n+\n+\t* i386.c: Include \"ggc.h\".\n+\t(ix86_mark_machine_status): New function.\n+\t(override_options): Set mark_machine_status.\n+\n Mon Sep  6 15:26:23 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* tree.c (copy_node): Copy node contents also if doing GC."}]}