{"sha": "30821df75c2dbbb969dca0144177948dda1f7a80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA4MjFkZjc1YzJkYmJiOTY5ZGNhMDE0NDE3Nzk0OGRkYTFmN2E4MA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2015-04-23T01:49:08Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2015-04-23T01:49:08Z"}, "message": "rs6000.c (rtx_is_swappable_p): Commentary adjustments.\n\n[gcc]\n\n2015-04-22  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (rtx_is_swappable_p): Commentary\n\tadjustments.\n\t(insn_is_swappable_p): Return 1 for a convert from double to\n\tsingle precision when all of its uses are splats of BE element\n\tzero.\n\n[gcc/testsuite]\n\n2015-04-22  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/swaps-p8-18.c: New test.\n\nFrom-SVN: r222351", "tree": {"sha": "2a0b63ca7391ac3bf14a444fa31ed6295a5a0f87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a0b63ca7391ac3bf14a444fa31ed6295a5a0f87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30821df75c2dbbb969dca0144177948dda1f7a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30821df75c2dbbb969dca0144177948dda1f7a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30821df75c2dbbb969dca0144177948dda1f7a80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30821df75c2dbbb969dca0144177948dda1f7a80/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed0235376538cb63a7afdbfa43df61652175237a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed0235376538cb63a7afdbfa43df61652175237a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed0235376538cb63a7afdbfa43df61652175237a"}], "stats": {"total": 86, "additions": 79, "deletions": 7}, "files": [{"sha": "f59ab8485ae2a26c53a7171b5e4196408af66238", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30821df75c2dbbb969dca0144177948dda1f7a80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30821df75c2dbbb969dca0144177948dda1f7a80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30821df75c2dbbb969dca0144177948dda1f7a80", "patch": "@@ -1,3 +1,11 @@\n+2015-04-22  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rtx_is_swappable_p): Commentary\n+\tadjustments.\n+\t(insn_is_swappable_p): Return 1 for a convert from double to\n+\tsingle precision when all of its uses are splats of BE element\n+\tzero.\n+\n 2015-04-23  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \t* ira-costs.c (record_operand_costs): Fix typo (remove redundant code)."}, {"sha": "77f6a869929b533f136d6eb7475f99afd54e29bc", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30821df75c2dbbb969dca0144177948dda1f7a80/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30821df75c2dbbb969dca0144177948dda1f7a80/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=30821df75c2dbbb969dca0144177948dda1f7a80", "patch": "@@ -34245,7 +34245,8 @@ rtx_is_swappable_p (rtx op, unsigned int *special)\n \t   order-dependent element, so additional fixup code would be\n \t   needed to make those work.  Vector set and non-immediate-form\n \t   vector splat are element-order sensitive.  A few of these\n-\t   cases might be workable with special handling if required.  */\n+\t   cases might be workable with special handling if required.\n+\t   Adding cost modeling would be appropriate in some cases.  */\n \tint val = XINT (op, 1);\n \tswitch (val)\n \t  {\n@@ -34284,12 +34285,6 @@ rtx_is_swappable_p (rtx op, unsigned int *special)\n \t  case UNSPEC_VUPKLPX:\n \t  case UNSPEC_VUPKLS_V4SF:\n \t  case UNSPEC_VUPKLU_V4SF:\n-\t  /* The following could be handled as an idiom with XXSPLTW.\n-\t     These place a scalar in BE element zero, but the XXSPLTW\n-\t     will currently expect it in BE element 2 in a swapped\n-\t     region.  When one of these feeds an XXSPLTW with no other\n-\t     defs/uses either way, we can avoid the lane change for\n-\t     XXSPLTW and things will be correct.  TBD.  */\n \t  case UNSPEC_VSX_CVDPSPN:\n \t  case UNSPEC_VSX_CVSPDP:\n \t  case UNSPEC_VSX_CVSPDPN:\n@@ -34380,6 +34375,36 @@ insn_is_swappable_p (swap_web_entry *insn_entry, rtx insn,\n \treturn 0;\n     }\n \n+  /* A convert to single precision can be left as is provided that\n+     all of its uses are in xxspltw instructions that splat BE element\n+     zero.  */\n+  if (GET_CODE (body) == SET\n+      && GET_CODE (SET_SRC (body)) == UNSPEC\n+      && XINT (SET_SRC (body), 1) == UNSPEC_VSX_CVDPSPN)\n+    {\n+      df_ref def;\n+      struct df_insn_info *insn_info = DF_INSN_INFO_GET (insn);\n+\n+      FOR_EACH_INSN_INFO_DEF (def, insn_info)\n+\t{\n+\t  struct df_link *link = DF_REF_CHAIN (def);\n+\t  if (!link)\n+\t    return 0;\n+\n+\t  for (; link; link = link->next) {\n+\t    rtx use_insn = DF_REF_INSN (link->ref);\n+\t    rtx use_body = PATTERN (use_insn);\n+\t    if (GET_CODE (use_body) != SET\n+\t\t|| GET_CODE (SET_SRC (use_body)) != UNSPEC\n+\t\t|| XINT (SET_SRC (use_body), 1) != UNSPEC_VSX_XXSPLTW\n+\t\t|| XEXP (XEXP (SET_SRC (use_body), 0), 1) != const0_rtx)\n+\t      return 0;\n+\t  }\n+\t}\n+\n+      return 1;\n+    }\n+\n   /* Otherwise check the operands for vector lane violations.  */\n   return rtx_is_swappable_p (body, special);\n }"}, {"sha": "d0e53773c8bcb6c4f39371733efd29c1ee5533a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30821df75c2dbbb969dca0144177948dda1f7a80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30821df75c2dbbb969dca0144177948dda1f7a80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30821df75c2dbbb969dca0144177948dda1f7a80", "patch": "@@ -1,3 +1,7 @@\n+2015-04-22  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/swaps-p8-18.c: New test.\n+\n 2015-04-22  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR target/65456"}, {"sha": "c55f527d420cc06ad8efc13c402a9e0e9e006d12", "filename": "gcc/testsuite/gcc.target/powerpc/swaps-p8-18.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30821df75c2dbbb969dca0144177948dda1f7a80/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30821df75c2dbbb969dca0144177948dda1f7a80/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-18.c?ref=30821df75c2dbbb969dca0144177948dda1f7a80", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O3\" } */\n+/* { dg-final { scan-assembler-not \"xxpermdi\" } } */\n+\n+/* This is a test for a specific convert-splat permute removal.  */\n+\n+void compute (float*, float*, float*, int, int);\n+double test (void);\n+double gorp;\n+\n+int main (void)\n+{\n+  float X[10000], Y[256], Z[2000];\n+  int i;\n+  for (i = 0; i < 2500; i++)\n+    compute (X, Y, Z, 256, 2000);\n+  gorp = test ();\n+}\n+\n+void compute(float *X, float *Y, float *Z, int m, int n)\n+{\n+  int i, j;\n+  float w, *x, *y;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      w = 0.0;\n+      x = X++;\n+      y = Y;\n+      for (j = 0; j < m; j++)\n+\tw += (*x++) * (*y++);\n+      Z[i] = w;\n+    }\n+}"}]}