{"sha": "904aac81db2a08a89fcfd6321cdf5b1f328d94ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA0YWFjODFkYjJhMDhhODlmY2ZkNjMyMWNkZjViMWYzMjhkOTRlZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-16T14:26:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-16T14:26:47Z"}, "message": "[multiple changes]\n\n2014-07-16  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Document binder switch -Ra.\n\t* gnatbind.adb (List_Closure_Display): Implement -Ra switch\n\t(List_Closure_All).\n\t* opt.ads (List_Closure_All): New switch.\n\t* switch-b.adb (Scan_Binder_Switches): Recognize -Ra to set\n\tList_Closure_All.\n\n2014-07-16  Ben Brosgol  <brosgol@adacore.com>\n\n\t* gnat_rm.texi: Minor edits, to make case consistent in names\n\tof types and fields.\n\nFrom-SVN: r212654", "tree": {"sha": "1d6395e0de92d622b4ff12e0b25bd1360b1b3066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d6395e0de92d622b4ff12e0b25bd1360b1b3066"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/904aac81db2a08a89fcfd6321cdf5b1f328d94ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/904aac81db2a08a89fcfd6321cdf5b1f328d94ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/904aac81db2a08a89fcfd6321cdf5b1f328d94ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/904aac81db2a08a89fcfd6321cdf5b1f328d94ee/comments", "author": null, "committer": null, "parents": [{"sha": "3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1"}], "stats": {"total": 156, "additions": 114, "deletions": 42}, "files": [{"sha": "76cab67cd0ad1ea49ea4cc32a2dbf0e7f3235c4e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904aac81db2a08a89fcfd6321cdf5b1f328d94ee/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904aac81db2a08a89fcfd6321cdf5b1f328d94ee/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=904aac81db2a08a89fcfd6321cdf5b1f328d94ee", "patch": "@@ -1,3 +1,17 @@\n+2014-07-16  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Document binder switch -Ra.\n+\t* gnatbind.adb (List_Closure_Display): Implement -Ra switch\n+\t(List_Closure_All).\n+\t* opt.ads (List_Closure_All): New switch.\n+\t* switch-b.adb (Scan_Binder_Switches): Recognize -Ra to set\n+\tList_Closure_All.\n+\n+2014-07-16  Ben Brosgol  <brosgol@adacore.com>\n+\n+\t* gnat_rm.texi: Minor edits, to make case consistent in names\n+\tof types and fields.\n+\n 2014-07-16  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_rm.texi: Document erroneous mixing of thin pointers and"}, {"sha": "a223d3d86a433055129e68c7cc55b095af7dbb5e", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904aac81db2a08a89fcfd6321cdf5b1f328d94ee/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904aac81db2a08a89fcfd6321cdf5b1f328d94ee/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=904aac81db2a08a89fcfd6321cdf5b1f328d94ee", "patch": "@@ -15542,51 +15542,51 @@ For example, consider the record\n \n @smallexample @c ada\n    type Rb1 is array (1 .. 13) of Boolean;\n-   pragma Pack (rb1);\n+   pragma Pack (Rb1);\n \n    type Rb2 is array (1 .. 65) of Boolean;\n-   pragma Pack (rb2);\n+   pragma Pack (Rb2);\n \n    type AF is new Float with Atomic;\n \n-   type x2 is record\n-      l1 : Boolean;\n-      l2 : Duration;\n-      l3 : AF;\n-      l4 : Boolean;\n-      l5 : Rb1;\n-      l6 : Rb2;\n+   type X2 is record\n+      L1 : Boolean;\n+      L2 : Duration;\n+      L3 : AF;\n+      L4 : Boolean;\n+      L5 : Rb1;\n+      L6 : Rb2;\n    end record;\n-   pragma Pack (x2);\n+   pragma Pack (X2);\n @end smallexample\n \n @noindent\n-The representation for the record x2 is as follows:\n+The representation for the record X2 is as follows:\n \n @smallexample @c ada\n-for x2'Size use 224;\n-for x2 use record\n-   l1 at  0 range  0 .. 0;\n-   l2 at  0 range  1 .. 64;\n-   l3 at 12 range  0 .. 31;\n-   l4 at 16 range  0 .. 0;\n-   l5 at 16 range  1 .. 13;\n-   l6 at 18 range  0 .. 71;\n+for X2'Size use 224;\n+for X2 use record\n+   L1 at  0 range  0 .. 0;\n+   L2 at  0 range  1 .. 64;\n+   L3 at 12 range  0 .. 31;\n+   L4 at 16 range  0 .. 0;\n+   L5 at 16 range  1 .. 13;\n+   L6 at 18 range  0 .. 71;\n end record;\n @end smallexample\n \n @noindent\n-Studying this example, we see that the packable fields @code{l1}\n-and @code{l2} are\n+Studying this example, we see that the packable fields @code{L1}\n+and @code{L2} are\n of length equal to their sizes, and placed at specific bit boundaries (and\n not byte boundaries) to\n-eliminate padding.  But @code{l3} is of a non-packable float type (because\n+eliminate padding.  But @code{L3} is of a non-packable float type (because\n it is aliased), so it is on the next appropriate alignment boundary.\n \n-The next two fields are fully packable, so @code{l4} and @code{l5} are\n+The next two fields are fully packable, so @code{L4} and @code{L5} are\n minimally packed with no gaps.  However, type @code{Rb2} is a packed\n array that is longer than 64 bits, so it is itself non-packable.  Thus\n-the @code{l6} field is aligned to the next byte boundary, and takes an\n+the @code{L6} field is aligned to the next byte boundary, and takes an\n integral number of bytes, i.e.@: 72 bits.\n \n @node Record Representation Clauses"}, {"sha": "85b447142c0a738bc3a0a0b7892c5c426d5d6880", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904aac81db2a08a89fcfd6321cdf5b1f328d94ee/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904aac81db2a08a89fcfd6321cdf5b1f328d94ee/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=904aac81db2a08a89fcfd6321cdf5b1f328d94ee", "patch": "@@ -8451,7 +8451,12 @@ Generate binder file suitable for CodePeer.\n \n @item ^-R^-R^\n @cindex @option{^-R^-R^} (@command{gnatbind})\n-Output closure source list.\n+Output closure source list, which includes all non-time-units that are\n+included in the bind.\n+\n+@item ^-Ra^-Ra^\n+@cindex @option{^-Ra^-Ra^} (@command{gnatbind})\n+Like @option{-R} but the list includes run-time units.\n \n @item ^-s^/READ_SOURCES=ALL^\n @cindex @option{^-s^/READ_SOURCES=ALL^} (@command{gnatbind})\n@@ -20126,6 +20131,8 @@ The tool currently does not support following features:\n @c *********************************\n @node Performing Dimensionality Analysis in GNAT\n @chapter Performing Dimensionality Analysis in GNAT\n+@cindex Dimensionality analysis\n+\n @noindent\n The GNAT compiler now supports dimensionality checking. The user can\n specify physical units for objects, and the compiler will verify that uses\n@@ -20134,22 +20141,33 @@ familiar to engineering practice. The dimensions of algebraic expressions\n (including powers with static exponents) are computed from their consistuents.\n \n This feature depends on Ada 2012 aspect specifications, and is available from\n-version 7.0.1 of GNAT onwards. The GNAT-specific aspect Dimension_System allows\n-you to define a system of units; the aspect Dimension then allows the user\n-to declare dimensioned quantities within a given system.\n+version 7.0.1 of GNAT onwards.\n+The GNAT-specific aspect @code{Dimension_System}\n+@cindex @code{Dimension_System} aspect\n+allows you to define a system of units; the aspect @code{Dimension}\n+@cindex @code{Dimension} aspect\n+then allows the user to declare dimensioned quantities within a given system.\n+(These aspects are described in the @i{Implementation Defined Aspects}\n+chapter of the @i{GNAT Reference Manual}).\n \n The major advantage of this model is that it does not require the declaration of\n multiple operators for all possible combinations of types: it is only necessary\n to use the proper subtypes in object declarations.\n \n The simplest way to impose dimensionality checking on a computation is to make\n-use of the package System.Dim.Mks, which is part of the GNAT library. This\n-package defines a floating-point type MKS_Type, for which a sequence of\n+use of the package @code{System.Dim.Mks},\n+@cindex @code{System.Dim.Mks} package (GNAT library)\n+which is part of the GNAT library. This\n+package defines a floating-point type @code{MKS_Type},\n+@cindex @code{MKS_Type} type\n+for which a sequence of\n dimension names are specified, together with their conventional abbreviations.\n The following should be read together with the full specification of the\n-package, in file s-dimmks.ads.\n+package, in file @file{s-dimmks.ads}.\n+@cindex @file{s-dimmks.ads} file\n \n @smallexample @c ada\n+@group\n    type Mks_Type is new Long_Long_Float\n      with\n       Dimension_System => (\n@@ -20160,40 +20178,49 @@ package, in file s-dimmks.ads.\n         (Unit_Name => Kelvin,   Unit_Symbol => 'K',   Dim_Symbol => \"Theta\"),\n         (Unit_Name => Mole,     Unit_Symbol => \"mol\", Dim_Symbol => 'N'),\n         (Unit_Name => Candela,  Unit_Symbol => \"cd\",  Dim_Symbol => 'J'));\n+@end group\n @end smallexample\n \n @noindent\n The package then defines a series of subtypes that correspond to these\n conventional units. For example:\n+\n @smallexample @c ada\n+@group\n    subtype Length is Mks_Type\n      with\n       Dimension => (Symbol => 'm', Meter  => 1, others => 0);\n+@end group\n @end smallexample\n+\n @noindent\n-and similarly for Mass, Time, Electric_Current, Thermodynamic_Temperature,\n-Amount_Of_Substance, and Luminous_Intensity (the standard set of units of\n-the SI system).\n+and similarly for @code{Mass}, @code{Time}, @code{Electric_Current},\n+@code{Thermodynamic_Temperature}, @code{Amount_Of_Substance}, and\n+@code{Luminous_Intensity} (the standard set of units of the SI system).\n \n The package also defines conventional names for values of each unit, for\n example:\n \n @smallexample @c ada\n+@group\n    m   : constant Length           := 1.0;\n    kg  : constant Mass             := 1.0;\n    s   : constant Time             := 1.0;\n    A   : constant Electric_Current := 1.0;\n+@end group\n @end smallexample\n \n @noindent\n as well as useful multiples of these units:\n \n @smallexample @c ada\n+@group\n    cm  : constant Length := 1.0E-02;\n    g   : constant Mass   := 1.0E-03;\n    min : constant Time   := 60.0;\n-   day : constant TIme   := 60.0 * 24.0 * min;\n+   day : constant Time   := 60.0 * 24.0 * min;\n   ...\n+@end group\n @end smallexample\n \n @noindent\n@@ -20203,17 +20230,20 @@ specifies its dimensions within the MKS system, as well as the string to\n be used for output of a value of that unit:\n \n @smallexample @c ada\n+@group\n   subtype Acceleration is Mks_Type\n     with Dimension => (\"m/sec^^^2\",\n                        Meter => 1,\n                        Second => -2,\n                        others => 0);\n+@end group\n @end smallexample\n \n @noindent\n Here is a complete example of use:\n \n @smallexample @c ada\n+@group\n with System.Dim.MKS; use System.Dim.Mks;\n with System.Dim.Mks_IO; use System.Dim.Mks_IO;\n with Text_IO; use Text_IO;\n@@ -20223,6 +20253,8 @@ procedure Free_Fall is\n   G : constant acceleration := 9.81 * m / (s ** 2);\n   T : Time := 10.0*s;\n   Distance : Length;\n+@end group\n+@group\n begin\n   Put (\"Gravitational constant: \");\n   Put (G, Aft => 2, Exp => 0); Put_Line (\"\");\n@@ -20231,46 +20263,57 @@ begin\n   Put (Distance, Aft => 2, Exp => 0);\n   Put_Line (\"\");\n end Free_Fall;\n+@end group\n @end smallexample\n \n @noindent\n Execution of this program yields:\n @smallexample\n+@group\n Gravitational constant:  9.81 m/sec^^^2\n distance travelled in 10 seconds of free fall 490.50 m\n+@end group\n @end smallexample\n \n @noindent\n However, incorrect assignments such as:\n \n @smallexample @c ada\n+@group\n    Distance := 5.0;\n    Distance := 5.0 * kg:\n+@end group\n @end smallexample\n \n @noindent\n are rejected with the following diagnoses:\n \n @smallexample\n+@group\n    Distance := 5.0;\n       >>> dimensions mismatch in assignment\n       >>> left-hand side has dimension [L]\n       >>> right-hand side is dimensionless\n+@end group\n \n+@group\n    Distance := 5.0 * kg:\n       >>> dimensions mismatch in assignment\n       >>> left-hand side has dimension [L]\n       >>> right-hand side has dimension [M]\n+@end group\n @end smallexample\n \n @noindent\n The dimensions of an expression are properly displayed, even if there is\n no explicit subtype for it. If we add to the program:\n \n @smallexample @c ada\n+@group\n       Put (\"Final velocity: \");\n       Put (G * T, Aft =>2, Exp =>0);\n       Put_Line (\"\");\n+@end group\n @end smallexample\n \n @noindent\n@@ -20279,6 +20322,7 @@ then the output includes:\n      Final velocity: 98.10 m.s**(-1)\n @end smallexample\n \n+\n @c *********************************\n @node Generating Ada Bindings for C and C++ headers\n @chapter Generating Ada Bindings for C and C++ headers"}, {"sha": "0903fe414ca2a2460da4b021f0db0af602604956", "filename": "gcc/ada/gnatbind.adb", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904aac81db2a08a89fcfd6321cdf5b1f328d94ee/gcc%2Fada%2Fgnatbind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904aac81db2a08a89fcfd6321cdf5b1f328d94ee/gcc%2Fada%2Fgnatbind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatbind.adb?ref=904aac81db2a08a89fcfd6321cdf5b1f328d94ee", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -913,7 +913,8 @@ begin\n                   --------------------\n \n                   function Put_In_Sources\n-                    (S : File_Name_Type) return Boolean is\n+                    (S : File_Name_Type) return Boolean\n+                  is\n                   begin\n                      for J in 1 .. Closure_Sources.Last loop\n                         if Closure_Sources.Table (J) = S then\n@@ -939,11 +940,14 @@ begin\n                   for J in reverse Elab_Order.First .. Elab_Order.Last loop\n                      Source := Units.Table (Elab_Order.Table (J)).Sfile;\n \n-                     --  Do not include the sources of the runtime and do not\n-                     --  include the same source several times.\n+                     --  Do not include same source more than once\n \n                      if Put_In_Sources (Source)\n-                       and then not Is_Internal_File_Name (Source)\n+\n+                       --  Do not include run-time units unless -Ra switch set\n+\n+                       and then (List_Closure_All\n+                                  or else not Is_Internal_File_Name (Source))\n                      then\n                         if not Zero_Formatting then\n                            Write_Str (\"   \");"}, {"sha": "a8447065c69949b9902aadee0745159da5279e4a", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904aac81db2a08a89fcfd6321cdf5b1f328d94ee/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904aac81db2a08a89fcfd6321cdf5b1f328d94ee/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=904aac81db2a08a89fcfd6321cdf5b1f328d94ee", "patch": "@@ -885,7 +885,12 @@ package Opt is\n \n    List_Closure : Boolean := False;\n    --  GNATBIND\n-   --  List all sources in the closure of a main (-R gnatbind switch)\n+   --  List all sources in the closure of a main (-R or -Ra gnatbind switch)\n+\n+   List_Closure_All : Boolean := False;\n+   --  GNATBIND\n+   --  List all sources in closure of main including run-time units (-Ra\n+   --  gnatbind switch).\n \n    List_Dependencies : Boolean := False;\n    --  GNATMAKE"}, {"sha": "8253d41b267b1f15331e3ec115698bf6aa2530bb", "filename": "gcc/ada/switch-b.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904aac81db2a08a89fcfd6321cdf5b1f328d94ee/gcc%2Fada%2Fswitch-b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904aac81db2a08a89fcfd6321cdf5b1f328d94ee/gcc%2Fada%2Fswitch-b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-b.adb?ref=904aac81db2a08a89fcfd6321cdf5b1f328d94ee", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -379,6 +379,11 @@ package body Switch.B is\n             Ptr := Ptr + 1;\n             List_Closure := True;\n \n+            if Switch_Chars (Ptr) = 'a' then\n+               Ptr := Ptr + 1;\n+               List_Closure_All := True;\n+            end if;\n+\n          --  Processing for s switch\n \n          when 's' =>"}]}