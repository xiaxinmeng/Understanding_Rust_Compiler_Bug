{"sha": "2b86788d7c976a261446654166291e855cdc8191", "node_id": "C_kwDOANBUbNoAKDJiODY3ODhkN2M5NzZhMjYxNDQ2NjU0MTY2MjkxZTg1NWNkYzgxOTE", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-06-24T02:20:47Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-06-24T02:25:52Z"}, "message": "libstdc++: testsuite: avoid predictable mkstemp\n\nThis patch was originally meant to reduce the likelihood that\nnonexistent_path() returns the same pathname for from and to.\n\nIt was prompted by a target system with a non-random implementation of\nmkstemp, that returns a predictable sequence of filenames and selects\nthe first one that isn't already taken.\n\nThat turned out not to be enough: nonexistent_path adds a suffix to\nthe filename chosen by mkstemp and removes the file it created, so\nmkstemp may very well insist on the same basename, and the case that\ndoesn't use mkstemp doesn't even check whether the file already\nexists.\n\nAnyway, by the time I realized this wasn't enough, I'd already\nimplemented some of the changes, and I figured I might as well\ncontribute them, even though they don't really solve any problem, and\neven if they did, they'd be just a partial solution.\n\n\nfor  libstdc++-v3/ChangeLog\n\n\t* testsuite/27_io/filesystem/operations/copy.cc (test02):\n\tSelect TO after creating FROM.\n\t(test03, test04): Likewise.\n\t* testsuite/experimental/filesystem/operations/copy.cc\n\t(test02, test03, test04): Likewise.", "tree": {"sha": "328818f19846359012717fd6e9a1d651386b0f43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/328818f19846359012717fd6e9a1d651386b0f43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b86788d7c976a261446654166291e855cdc8191", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b86788d7c976a261446654166291e855cdc8191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b86788d7c976a261446654166291e855cdc8191", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b86788d7c976a261446654166291e855cdc8191/comments", "author": null, "committer": null, "parents": [{"sha": "0b2c1781db8df9051ce3d160af2113387742fef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b2c1781db8df9051ce3d160af2113387742fef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b2c1781db8df9051ce3d160af2113387742fef2"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "f3081f4b64ebc42e9c41291a54a86083debeb8ba", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/copy.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b86788d7c976a261446654166291e855cdc8191/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b86788d7c976a261446654166291e855cdc8191/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy.cc?ref=2b86788d7c976a261446654166291e855cdc8191", "patch": "@@ -73,14 +73,14 @@ test02()\n \n   const std::error_code bad_ec = make_error_code(std::errc::invalid_argument);\n   auto from = __gnu_test::nonexistent_path();\n-  auto to = __gnu_test::nonexistent_path();\n   std::error_code ec;\n \n   ec = bad_ec;\n   fs::create_symlink(\".\", from, ec);\n   VERIFY( !ec );\n   VERIFY( fs::exists(from) );\n \n+  auto to = __gnu_test::nonexistent_path();\n   ec = bad_ec;\n   fs::copy(from, to, fs::copy_options::skip_symlinks, ec);\n   VERIFY( !ec );\n@@ -117,12 +117,13 @@ void\n test03()\n {\n   auto from = __gnu_test::nonexistent_path();\n-  auto to = __gnu_test::nonexistent_path();\n \n   // test empty file\n   std::ofstream{from};\n   VERIFY( fs::exists(from) );\n   VERIFY( fs::file_size(from) == 0 );\n+\n+  auto to = __gnu_test::nonexistent_path();\n   fs::copy(from, to);\n   VERIFY( fs::exists(to) );\n   VERIFY( fs::file_size(to) == 0 );\n@@ -145,11 +146,11 @@ test04()\n {\n   const std::error_code bad_ec = make_error_code(std::errc::invalid_argument);\n   auto from = __gnu_test::nonexistent_path();\n-  auto to = __gnu_test::nonexistent_path();\n   std::error_code ec;\n \n   create_directories(from/\"a/b/c\");\n \n+  auto to = __gnu_test::nonexistent_path();\n   {\n     __gnu_test::scoped_file f(to);\n     copy(from, to, ec);"}, {"sha": "ca38328c5da153b823632fbf39e87a4a47bf7356", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/copy.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b86788d7c976a261446654166291e855cdc8191/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b86788d7c976a261446654166291e855cdc8191/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc?ref=2b86788d7c976a261446654166291e855cdc8191", "patch": "@@ -73,14 +73,14 @@ test02()\n #endif\n \n   auto from = __gnu_test::nonexistent_path();\n-  auto to = __gnu_test::nonexistent_path();\n   std::error_code ec, bad = std::make_error_code(std::errc::invalid_argument);\n \n   ec = bad;\n   fs::create_symlink(\".\", from, ec);\n   VERIFY( !ec );\n   VERIFY( fs::exists(from) );\n \n+  auto to = __gnu_test::nonexistent_path();\n   ec = bad;\n   fs::copy(from, to, fs::copy_options::skip_symlinks, ec);\n   VERIFY( !ec );\n@@ -116,12 +116,13 @@ void\n test03()\n {\n   auto from = __gnu_test::nonexistent_path();\n-  auto to = __gnu_test::nonexistent_path();\n \n   // test empty file\n   std::ofstream{from.c_str()};\n   VERIFY( fs::exists(from) );\n   VERIFY( fs::file_size(from) == 0 );\n+\n+  auto to = __gnu_test::nonexistent_path();\n   fs::copy(from, to);\n   VERIFY( fs::exists(to) );\n   VERIFY( fs::file_size(to) == 0 );\n@@ -143,11 +144,11 @@ void\n test04()\n {\n   auto from = __gnu_test::nonexistent_path();\n-  auto to = __gnu_test::nonexistent_path();\n   std::error_code ec;\n \n   create_directories(from/\"a/b/c\");\n \n+  auto to = __gnu_test::nonexistent_path();\n   {\n     __gnu_test::scoped_file f(to);\n     copy(from, to, ec);"}]}