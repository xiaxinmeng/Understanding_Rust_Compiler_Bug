{"sha": "fc93bcb6d545c44a48fb4928cebfac56390ac2bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM5M2JjYjZkNTQ1YzQ0YTQ4ZmI0OTI4Y2ViZmFjNTYzOTBhYzJiZA==", "commit": {"author": {"name": "Fernando Pereira", "email": "fernando@cs.ucla.edu", "date": "2008-07-07T20:17:37Z"}, "committer": {"name": "Fernando Pereira", "email": "pronesto@gcc.gnu.org", "date": "2008-07-07T20:17:37Z"}, "message": "tree-ssa-structalias.c (compute_points_to_sets): Add call to dump_constraint_graph.\n\n2008-07-07  Fernando Pereira <fernando@cs.ucla.edu>\n\n        * tree-ssa-structalias.c (compute_points_to_sets): Add call to\n        dump_constraint_graph.\n        (dump_constraint_edge): New function.\n        (dump_constraint_graph): New function.\n        (debug_constraint_graph): New function.\n        (dump_constraint): Removed useless comparison.\n        * tree-ssa-structalias.h (dump_constraint_edge): Declare.\n        (dump_constraint_graph): Declare.\n        (debug_constraint_graph): Declare.\n        * tree-dump.c (struct dump_option_value_info): Declare\n        TDF_GRAPH.\n\nFrom-SVN: r137597", "tree": {"sha": "073ccbe13e2ce1f1b8f2e8899ef8e3376ed18d7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/073ccbe13e2ce1f1b8f2e8899ef8e3376ed18d7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc93bcb6d545c44a48fb4928cebfac56390ac2bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc93bcb6d545c44a48fb4928cebfac56390ac2bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc93bcb6d545c44a48fb4928cebfac56390ac2bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc93bcb6d545c44a48fb4928cebfac56390ac2bd/comments", "author": null, "committer": null, "parents": [{"sha": "2769621878cf8b7559e702707f3e2d840ac7968e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2769621878cf8b7559e702707f3e2d840ac7968e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2769621878cf8b7559e702707f3e2d840ac7968e"}], "stats": {"total": 112, "additions": 112, "deletions": 0}, "files": [{"sha": "eb9a2621ea3a0db6b56a30c2730925c7578c59a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc93bcb6d545c44a48fb4928cebfac56390ac2bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc93bcb6d545c44a48fb4928cebfac56390ac2bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc93bcb6d545c44a48fb4928cebfac56390ac2bd", "patch": "@@ -1,3 +1,17 @@\n+2008-07-07  Fernando Pereira <fernando@cs.ucla.edu>\n+\n+        * tree-ssa-structalias.c (compute_points_to_sets): Add call to\n+        dump_constraint_graph.\n+        (dump_constraint_edge): New function.\n+        (dump_constraint_graph): New function.\n+        (debug_constraint_graph): New function.\n+        (dump_constraint): Removed useless comparison.\n+        * tree-ssa-structalias.h (dump_constraint_edge): Declare.\n+        (dump_constraint_graph): Declare.\n+        (debug_constraint_graph): Declare.\n+        * tree-dump.c (struct dump_option_value_info): Declare\n+        TDF_GRAPH.\n+\n 2008-07-07  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* config/i386/i386.c (is_va_list_char_pointer): New."}, {"sha": "7cc0285ff48b3b83c020e46309f381cf8fd7907b", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc93bcb6d545c44a48fb4928cebfac56390ac2bd/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc93bcb6d545c44a48fb4928cebfac56390ac2bd/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=fc93bcb6d545c44a48fb4928cebfac56390ac2bd", "patch": "@@ -814,6 +814,7 @@ static const struct dump_option_value_info dump_options[] =\n   {\"address\", TDF_ADDRESS},\n   {\"slim\", TDF_SLIM},\n   {\"raw\", TDF_RAW},\n+  {\"graph\", TDF_GRAPH},\n   {\"details\", TDF_DETAILS},\n   {\"stats\", TDF_STATS},\n   {\"blocks\", TDF_BLOCKS},"}, {"sha": "6121437b245aed597eb96a7e5bf9996563cf3f9d", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc93bcb6d545c44a48fb4928cebfac56390ac2bd/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc93bcb6d545c44a48fb4928cebfac56390ac2bd/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=fc93bcb6d545c44a48fb4928cebfac56390ac2bd", "patch": "@@ -624,6 +624,96 @@ debug_constraints (void)\n   dump_constraints (stderr);\n }\n \n+/* Print out to FILE the edge in the constraint graph that is created by\n+   constraint c. The edge may have a label, depending on the type of\n+   constraint that it represents. If complex1, e.g: a = *b, then the label\n+   is \"=*\", if complex2, e.g: *a = b, then the label is \"*=\", if\n+   complex with an offset, e.g: a = b + 8, then the label is \"+\".\n+   Otherwise the edge has no label.  */\n+\n+void\n+dump_constraint_edge (FILE *file, constraint_t c)\n+{\n+  if (c->rhs.type != ADDRESSOF)\n+    {\n+      const char *src = get_varinfo_fc (c->rhs.var)->name;\n+      const char *dst = get_varinfo_fc (c->lhs.var)->name;\n+      fprintf (file, \"  \\\"%s\\\" -> \\\"%s\\\" \", src, dst);\n+      /* Due to preprocessing of constraints, instructions like *a = *b are\n+         illegal; thus, we do not have to handle such cases.  */\n+      if (c->lhs.type == DEREF)\n+        fprintf (file, \" [ label=\\\"*=\\\" ] ;\\n\");\n+      else if (c->rhs.type == DEREF)\n+        fprintf (file, \" [ label=\\\"=*\\\" ] ;\\n\");\n+      else\n+        {\n+          /* We must check the case where the constraint is an offset.\n+             In this case, it is treated as a complex constraint.  */\n+          if (c->rhs.offset != c->lhs.offset)\n+            fprintf (file, \" [ label=\\\"+\\\" ] ;\\n\");\n+          else\n+            fprintf (file, \" ;\\n\");\n+        }\n+    }\n+}\n+\n+/* Print the constraint graph in dot format.  */\n+\n+void\n+dump_constraint_graph (FILE *file)\n+{\n+  unsigned int i=0, size;\n+  constraint_t c;\n+\n+  /* Only print the graph if it has already been initialized:  */\n+  if (!graph)\n+    return;\n+\n+  /* Print the constraints used to produce the constraint graph. The\n+     constraints will be printed as comments in the dot file:  */\n+  fprintf (file, \"\\n\\n/* Constraints used in the constraint graph:\\n\");\n+  dump_constraints (file);\n+  fprintf (file, \"*/\\n\");\n+\n+  /* Prints the header of the dot file:  */\n+  fprintf (file, \"\\n\\n// The constraint graph in dot format:\\n\");\n+  fprintf (file, \"strict digraph {\\n\");\n+  fprintf (file, \"  node [\\n    shape = box\\n  ]\\n\");\n+  fprintf (file, \"  edge [\\n    fontsize = \\\"12\\\"\\n  ]\\n\");\n+  fprintf (file, \"\\n  // List of nodes in the constraint graph:\\n\");\n+\n+  /* The next lines print the nodes in the graph. In order to get the\n+     number of nodes in the graph, we must choose the minimum between the\n+     vector VEC (varinfo_t, varmap) and graph->size. If the graph has not\n+     yet been initialized, then graph->size == 0, otherwise we must only\n+     read nodes that have an entry in VEC (varinfo_t, varmap).  */\n+  size = VEC_length (varinfo_t, varmap);\n+  size = size < graph->size ? size : graph->size;\n+  for (i = 0; i < size; i++)\n+    {\n+      const char *name = get_varinfo_fc (graph->rep[i])->name;\n+      fprintf (file, \"  \\\"%s\\\" ;\\n\", name);\n+    }\n+\n+  /* Go over the list of constraints printing the edges in the constraint\n+     graph.  */\n+  fprintf (file, \"\\n  // The constraint edges:\\n\");\n+  for (i = 0; VEC_iterate (constraint_t, constraints, i, c); i++)\n+    if (c)\n+      dump_constraint_edge (file, c);\n+\n+  /* Prints the tail of the dot file. By now, only the closing bracket.  */\n+  fprintf (file, \"}\\n\\n\\n\");\n+}\n+\n+/* Print out the constraint graph to stderr.  */\n+\n+void\n+debug_constraint_graph (void)\n+{\n+  dump_constraint_graph (stderr);\n+}\n+\n /* SOLVER FUNCTIONS\n \n    The solver is a simple worklist solver, that works on the following\n@@ -5397,6 +5487,10 @@ compute_points_to_sets (void)\n   free_var_substitution_info (si);\n \n   build_succ_graph ();\n+\n+  if (dump_file && (dump_flags & TDF_GRAPH))\n+    dump_constraint_graph (dump_file);\n+\n   move_complex_constraints (graph);\n \n   if (dump_file)"}, {"sha": "0d0d6bdf0733786c358b84bd187ac833f5ebb3b0", "filename": "gcc/tree-ssa-structalias.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc93bcb6d545c44a48fb4928cebfac56390ac2bd/gcc%2Ftree-ssa-structalias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc93bcb6d545c44a48fb4928cebfac56390ac2bd/gcc%2Ftree-ssa-structalias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.h?ref=fc93bcb6d545c44a48fb4928cebfac56390ac2bd", "patch": "@@ -32,9 +32,12 @@ void update_mem_sym_stats_from_stmt (tree, tree, long, long);\n extern void compute_points_to_sets (void);\n extern void delete_points_to_sets (void);\n extern void dump_constraint (FILE *, constraint_t);\n+extern void dump_constraint_edge (FILE *, constraint_t);\n extern void dump_constraints (FILE *);\n+extern void dump_constraint_graph (FILE *);\n extern void debug_constraint (constraint_t);\n extern void debug_constraints (void);\n+extern void debug_constraint_graph (void);\n extern void dump_solution_for_var (FILE *, unsigned int);\n extern void debug_solution_for_var (unsigned int);\n extern void dump_sa_points_to_info (FILE *);"}]}