{"sha": "ca300798ae1905d46697565ec095fb496398ec24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzMDA3OThhZTE5MDVkNDY2OTc1NjVlYzA5NWZiNDk2Mzk4ZWMyNA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-01-13T12:07:28Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-01-13T12:07:28Z"}, "message": "(expand_increment): Handle all preincrements by building\narithmetic and calling expand_assignment.\n\nFrom-SVN: r3222", "tree": {"sha": "135e5fa7ecd8405194932a90f267748fa258e294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/135e5fa7ecd8405194932a90f267748fa258e294"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca300798ae1905d46697565ec095fb496398ec24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca300798ae1905d46697565ec095fb496398ec24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca300798ae1905d46697565ec095fb496398ec24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca300798ae1905d46697565ec095fb496398ec24/comments", "author": null, "committer": null, "parents": [{"sha": "8230fba78adffe8eb6f746404c6e0b67702383df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8230fba78adffe8eb6f746404c6e0b67702383df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8230fba78adffe8eb6f746404c6e0b67702383df"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "ff5e90c0170c6dc8190fc3deb612bf122fe81ad7", "filename": "gcc/expr.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca300798ae1905d46697565ec095fb496398ec24/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca300798ae1905d46697565ec095fb496398ec24/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ca300798ae1905d46697565ec095fb496398ec24", "patch": "@@ -6298,7 +6298,8 @@ expand_increment (exp, post)\n \n   /* Stabilize any component ref that might need to be\n      evaluated more than once below.  */\n-  if (TREE_CODE (incremented) == BIT_FIELD_REF\n+  if (!post\n+      || TREE_CODE (incremented) == BIT_FIELD_REF\n       || (TREE_CODE (incremented) == COMPONENT_REF\n \t  && (TREE_CODE (TREE_OPERAND (incremented, 0)) != INDIRECT_REF\n \t      || DECL_BIT_FIELD (TREE_OPERAND (incremented, 1)))))\n@@ -6333,14 +6334,15 @@ expand_increment (exp, post)\n     this_optab = sub_optab;\n \n   /* If OP0 is not the actual lvalue, but rather a copy in a register,\n-     then we cannot just increment OP0.  We must\n-     therefore contrive to increment the original value.\n-     Then we can return OP0 since it is a copy of the old value.  */\n-  if (op0_is_copy)\n+     then we cannot just increment OP0.  We must therefore contrive to\n+     increment the original value.  Then, for postincrement, we can return\n+     OP0 since it is a copy of the old value.  For preincrement, we want\n+     to always expand here, since this generates better or equivalent code.  */\n+  if (!post || op0_is_copy)\n     {\n       /* This is the easiest way to increment the value wherever it is.\n-\t Problems with multiple evaluation of INCREMENTED\n-\t are prevented because either (1) it is a component_ref,\n+\t Problems with multiple evaluation of INCREMENTED are prevented\n+\t because either (1) it is a component_ref or preincrement,\n \t in which case it was stabilized above, or (2) it is an array_ref\n \t with constant index in an array in a register, which is\n \t safe to reevaluate.  */"}]}