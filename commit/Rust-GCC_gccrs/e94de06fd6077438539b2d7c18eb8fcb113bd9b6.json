{"sha": "e94de06fd6077438539b2d7c18eb8fcb113bd9b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk0ZGUwNmZkNjA3NzQzODUzOWIyZDdjMThlYjhmY2IxMTNiZDliNg==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-10-27T06:38:07Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-10-27T08:14:29Z"}, "message": "RISC-V: Refine riscv_parse_arch_string\n\n - Generalize logic for translating arch to internal flags, this patch\n   is infrastructure for supporing sub-extension parsing.\n\ngcc/ChangeLog\n\n\t* common/config/riscv/riscv-common.c (opt_var_ref_t): New.\n\t(riscv_ext_flag_table_t): New.\n\t(riscv_ext_flag_table): New.\n\t(riscv_parse_arch_string): Pass gcc_options* instead of\n\t&opts->x_target_flags only, and using riscv_arch_option_table to\n\tsetup flags.\n\t(riscv_handle_option): Update argument for riscv_parse_arch_string.\n\t(riscv_expand_arch): Ditto.\n\t(riscv_expand_arch_from_cpu): Ditto.", "tree": {"sha": "c86c5782dbb4c17d52b75fb56e11945c481d5350", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c86c5782dbb4c17d52b75fb56e11945c481d5350"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e94de06fd6077438539b2d7c18eb8fcb113bd9b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e94de06fd6077438539b2d7c18eb8fcb113bd9b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e94de06fd6077438539b2d7c18eb8fcb113bd9b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e94de06fd6077438539b2d7c18eb8fcb113bd9b6/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f227da3e603cffe7659d404f094e07507a993b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f227da3e603cffe7659d404f094e07507a993b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f227da3e603cffe7659d404f094e07507a993b1"}], "stats": {"total": 84, "additions": 51, "deletions": 33}, "files": [{"sha": "b84503a7742990266275e5ba3f6b0888b4eadba8", "filename": "gcc/common/config/riscv/riscv-common.c", "status": "modified", "additions": 51, "deletions": 33, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94de06fd6077438539b2d7c18eb8fcb113bd9b6/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94de06fd6077438539b2d7c18eb8fcb113bd9b6/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c?ref=e94de06fd6077438539b2d7c18eb8fcb113bd9b6", "patch": "@@ -618,44 +618,64 @@ riscv_arch_str (bool version_p)\n     return std::string();\n }\n \n+/* Type for pointer to member of gcc_options.  */\n+typedef int (gcc_options::*opt_var_ref_t);\n+\n+/* Types for recording extension to internal flag.  */\n+struct riscv_ext_flag_table_t {\n+  const char *ext;\n+  opt_var_ref_t var_ref;\n+  int mask;\n+};\n+\n+/* Mapping table between extension to internal flag.  */\n+static const riscv_ext_flag_table_t riscv_ext_flag_table[] =\n+{\n+  {\"e\", &gcc_options::x_target_flags, MASK_RVE},\n+  {\"m\", &gcc_options::x_target_flags, MASK_MUL},\n+  {\"a\", &gcc_options::x_target_flags, MASK_ATOMIC},\n+  {\"f\", &gcc_options::x_target_flags, MASK_HARD_FLOAT},\n+  {\"d\", &gcc_options::x_target_flags, MASK_DOUBLE_FLOAT},\n+  {\"c\", &gcc_options::x_target_flags, MASK_RVC},\n+  {NULL, NULL, 0}\n+};\n+\n /* Parse a RISC-V ISA string into an option mask.  Must clear or set all arch\n    dependent mask bits, in case more than one -march string is passed.  */\n \n static void\n-riscv_parse_arch_string (const char *isa, int *flags, location_t loc)\n+riscv_parse_arch_string (const char *isa,\n+\t\t\t struct gcc_options *opts,\n+\t\t\t location_t loc)\n {\n   riscv_subset_list *subset_list;\n   subset_list = riscv_subset_list::parse (isa, loc);\n   if (!subset_list)\n     return;\n \n-  if (subset_list->xlen () == 32)\n-    *flags &= ~MASK_64BIT;\n-  else if (subset_list->xlen () == 64)\n-    *flags |= MASK_64BIT;\n-\n-  *flags &= ~MASK_RVE;\n-  if (subset_list->lookup (\"e\"))\n-    *flags |= MASK_RVE;\n-\n-  *flags &= ~MASK_MUL;\n-  if (subset_list->lookup (\"m\"))\n-    *flags |= MASK_MUL;\n-\n-  *flags &= ~MASK_ATOMIC;\n-  if (subset_list->lookup (\"a\"))\n-    *flags |= MASK_ATOMIC;\n-\n-  *flags &= ~(MASK_HARD_FLOAT | MASK_DOUBLE_FLOAT);\n-  if (subset_list->lookup (\"f\"))\n-    *flags |= MASK_HARD_FLOAT;\n-\n-  if (subset_list->lookup (\"d\"))\n-    *flags |= MASK_DOUBLE_FLOAT;\n-\n-  *flags &= ~MASK_RVC;\n-  if (subset_list->lookup (\"c\"))\n-    *flags |= MASK_RVC;\n+  if (opts)\n+    {\n+      const riscv_ext_flag_table_t *arch_ext_flag_tab;\n+      /* Clean up target flags before we set.  */\n+      for (arch_ext_flag_tab = &riscv_ext_flag_table[0];\n+\t   arch_ext_flag_tab->ext;\n+\t   ++arch_ext_flag_tab)\n+\topts->*arch_ext_flag_tab->var_ref &= ~arch_ext_flag_tab->mask;\n+\n+      if (subset_list->xlen () == 32)\n+\topts->x_target_flags &= ~MASK_64BIT;\n+      else if (subset_list->xlen () == 64)\n+\topts->x_target_flags |= MASK_64BIT;\n+\n+\n+      for (arch_ext_flag_tab = &riscv_ext_flag_table[0];\n+\t   arch_ext_flag_tab->ext;\n+\t   ++arch_ext_flag_tab)\n+\t{\n+\t  if (subset_list->lookup (arch_ext_flag_tab->ext))\n+\t    opts->*arch_ext_flag_tab->var_ref |= arch_ext_flag_tab->mask;\n+\t}\n+    }\n \n   if (current_subset_list)\n     delete current_subset_list;\n@@ -689,7 +709,7 @@ riscv_handle_option (struct gcc_options *opts,\n   switch (decoded->opt_index)\n     {\n     case OPT_march_:\n-      riscv_parse_arch_string (decoded->arg, &opts->x_target_flags, loc);\n+      riscv_parse_arch_string (decoded->arg, opts, loc);\n       return true;\n \n     case OPT_mcpu_:\n@@ -710,9 +730,8 @@ riscv_expand_arch (int argc ATTRIBUTE_UNUSED,\n \t\t   const char **argv)\n {\n   gcc_assert (argc == 1);\n-  int flags;\n   location_t loc = UNKNOWN_LOCATION;\n-  riscv_parse_arch_string (argv[0], &flags, loc);\n+  riscv_parse_arch_string (argv[0], NULL, loc);\n   const std::string arch = riscv_arch_str (false);\n   if (arch.length())\n     return xasprintf (\"-march=%s\", arch.c_str());\n@@ -760,9 +779,8 @@ riscv_expand_arch_from_cpu (int argc ATTRIBUTE_UNUSED,\n     arch_str = cpu->arch;\n \n   location_t loc = UNKNOWN_LOCATION;\n-  int flags;\n \n-  riscv_parse_arch_string (arch_str, &flags, loc);\n+  riscv_parse_arch_string (arch_str, NULL, loc);\n   const std::string arch = riscv_arch_str (false);\n   return xasprintf (\"-march=%s\", arch.c_str());\n }"}]}