{"sha": "aff08c1864a08245642bcf7522aa54707102dd37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZmMDhjMTg2NGEwODI0NTY0MmJjZjc1MjJhYTU0NzA3MTAyZGQzNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-04-13T00:39:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-04-13T00:39:32Z"}, "message": "cp-tree.h (struct lang_type): Add com_interface.\n\n\t* cp-tree.h (struct lang_type): Add com_interface.\n\t(CLASSTYPE_COM_INTERFACE): New macro.\n\t* class.c (set_rtti_entry): COM interface classes have no RTTI\n\tentries in their vtables; adjust.\n\t(add_virtual_function, finish_base_struct, skip_rtti_stuff,\n\tmodify_one_vtable, fixup_vtable_deltas1, override_one_vtable,\n\tfinish_struct_1): Likewise.\n\t* decl2.c (mark_vtable_entries): Likewise.\n\t* rtti.c (build_headof, get_tinfo_fn_dynamic): Likewise.\n\t* search.c (get_abstract_virtuals_1, get_abstract_virtuals,\n\texpand_upcast_fixups): Likewise.\n\t* tree.c (debug_binfo): Likewise.\n\nFrom-SVN: r26394", "tree": {"sha": "96032288ea4567cb8d228e1912de01cd2cf5999a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96032288ea4567cb8d228e1912de01cd2cf5999a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aff08c1864a08245642bcf7522aa54707102dd37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff08c1864a08245642bcf7522aa54707102dd37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aff08c1864a08245642bcf7522aa54707102dd37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff08c1864a08245642bcf7522aa54707102dd37/comments", "author": null, "committer": null, "parents": [{"sha": "940ff22359106048380577cececbf9d6f2624084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940ff22359106048380577cececbf9d6f2624084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/940ff22359106048380577cececbf9d6f2624084"}], "stats": {"total": 125, "additions": 89, "deletions": 36}, "files": [{"sha": "179cd0c7c427e7618dbe1fd2b8449ebc5ee7fb61", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff08c1864a08245642bcf7522aa54707102dd37/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff08c1864a08245642bcf7522aa54707102dd37/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aff08c1864a08245642bcf7522aa54707102dd37", "patch": "@@ -1,5 +1,18 @@\n 1999-04-12  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* cp-tree.h (struct lang_type): Add com_interface.\n+\t(CLASSTYPE_COM_INTERFACE): New macro.\n+\t* class.c (set_rtti_entry): COM interface classes have no RTTI \n+\tentries in their vtables; adjust.\n+\t(add_virtual_function, finish_base_struct, skip_rtti_stuff,\n+\tmodify_one_vtable, fixup_vtable_deltas1, override_one_vtable, \n+\tfinish_struct_1): Likewise.\n+\t* decl2.c (mark_vtable_entries): Likewise.\n+\t* rtti.c (build_headof, get_tinfo_fn_dynamic): Likewise.\n+\t* search.c (get_abstract_virtuals_1, get_abstract_virtuals,\n+\texpand_upcast_fixups): Likewise.\n+\t* tree.c (debug_binfo): Likewise.\n+\n \t* cp-tree.h (COMPARE_NO_ATTRIBUTES): New macro.\n \t* typeck.c (comptypes): If we get it, ignore attributes.\n \t* class.c (instantiate_type): Use BASELINK_P.  Change complain"}, {"sha": "9d3d52532fbad5f1ee0ba3d0853d41e700837180", "filename": "gcc/cp/class.c", "status": "modified", "additions": 45, "deletions": 17, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff08c1864a08245642bcf7522aa54707102dd37/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff08c1864a08245642bcf7522aa54707102dd37/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=aff08c1864a08245642bcf7522aa54707102dd37", "patch": "@@ -671,6 +671,9 @@ set_rtti_entry (virtuals, offset, type)\n {\n   tree vfn;\n \n+  if (CLASSTYPE_COM_INTERFACE (type))\n+    return;\n+\n   if (flag_rtti)\n     vfn = build1 (ADDR_EXPR, vfunc_ptr_type_node, get_tinfo_fn (type));\n   else\n@@ -1035,18 +1038,22 @@ add_virtual_function (pv, phv, has_virtual, fndecl, t)\n       CLASSTYPE_RTTI (t) = t;\n \n       /* If we are using thunks, use two slots at the front, one\n-\t for the offset pointer, one for the tdesc pointer.  */\n-      if (*has_virtual == 0 && flag_vtable_thunks)\n+\t for the offset pointer, one for the tdesc pointer.\n+         For ARM-style vtables, use the same slot for both.  */\n+      if (*has_virtual == 0 && ! CLASSTYPE_COM_INTERFACE (t))\n \t{\n-\t  *has_virtual = 1;\n+\t  if (flag_vtable_thunks)\n+\t    *has_virtual = 2;\n+\t  else\n+\t    *has_virtual = 1;\n \t}\n \n       /* Build a new INT_CST for this DECL_VINDEX.  */\n       {\n \tstatic tree index_table[256];\n \ttree idx;\n \t/* We skip a slot for the offset/tdesc entry.  */\n-\tint i = ++(*has_virtual);\n+\tint i = (*has_virtual)++;\n \n \tif (i >= 256 || index_table[i] == 0)\n \t  {\n@@ -1634,6 +1641,21 @@ finish_base_struct (t, b)\n       TYPE_OVERLOADS_ARRAY_REF (t) |= TYPE_OVERLOADS_ARRAY_REF (basetype);\n       TYPE_OVERLOADS_ARROW (t) |= TYPE_OVERLOADS_ARROW (basetype);\n \n+      if (CLASSTYPE_COM_INTERFACE (basetype))\n+\t{\n+\t  CLASSTYPE_COM_INTERFACE (t) = 1;\n+\t  if (i > 0)\n+\t    cp_error\n+\t      (\"COM interface type `%T' must be the leftmost base class\",\n+\t       basetype);\n+\t}\n+      else if (CLASSTYPE_COM_INTERFACE (t))\n+\t{\n+\t  cp_error (\"COM interface type `%T' with non-COM base class `%T'\",\n+\t\t    t, basetype);\n+\t  CLASSTYPE_COM_INTERFACE (t) = 0;\n+\t}\n+\n       if (TYPE_VIRTUAL_P (basetype))\n \t{\n \t  /* Ensure that this is set from at least a virtual base\n@@ -2285,11 +2307,14 @@ get_class_offset (context, t, binfo, fndecl)\n /* Skip RTTI information at the front of the virtual list.  */\n \n unsigned HOST_WIDE_INT\n-skip_rtti_stuff (virtuals)\n-     tree *virtuals;\n+skip_rtti_stuff (virtuals, t)\n+     tree *virtuals, t;\n {\n   int n;\n \n+  if (CLASSTYPE_COM_INTERFACE (t))\n+    return 0;\n+\n   n = 0;\n   if (*virtuals)\n     {\n@@ -2331,7 +2356,7 @@ modify_one_vtable (binfo, t, fndecl, pfn)\n   if (fndecl == NULL_TREE)\n     return;\n \n-  n = skip_rtti_stuff (&virtuals);\n+  n = skip_rtti_stuff (&virtuals, t);\n \n   while (virtuals)\n     {\n@@ -2425,7 +2450,7 @@ fixup_vtable_deltas1 (binfo, t)\n   tree virtuals = BINFO_VIRTUALS (binfo);\n   unsigned HOST_WIDE_INT n;\n   \n-  n = skip_rtti_stuff (&virtuals);\n+  n = skip_rtti_stuff (&virtuals, t);\n \n   while (virtuals)\n     {\n@@ -2598,8 +2623,8 @@ override_one_vtable (binfo, old, t)\n   if (BINFO_NEW_VTABLE_MARKED (binfo))\n     choose = NEITHER;\n \n-  skip_rtti_stuff (&virtuals);\n-  skip_rtti_stuff (&old_virtuals);\n+  skip_rtti_stuff (&virtuals, t);\n+  skip_rtti_stuff (&old_virtuals, t);\n \n   while (virtuals)\n     {\n@@ -3874,15 +3899,18 @@ finish_struct_1 (t, warn_anon)\n       /* We must enter these virtuals into the table.  */\n       if (first_vfn_base_index < 0)\n \t{\n-\t  /* The second slot is for the tdesc pointer when thunks are used.  */\n-\t  if (flag_vtable_thunks)\n-\t    pending_virtuals = tree_cons (NULL_TREE, NULL_TREE, pending_virtuals);\n+\t  if (! CLASSTYPE_COM_INTERFACE (t))\n+\t    {\n+\t      /* The second slot is for the tdesc pointer when thunks are used.  */\n+\t      if (flag_vtable_thunks)\n+\t\tpending_virtuals = tree_cons (NULL_TREE, NULL_TREE, pending_virtuals);\n \n-\t  /* The first slot is for the rtti offset.  */\n-\t  pending_virtuals = tree_cons (NULL_TREE, NULL_TREE, pending_virtuals);\n+\t      /* The first slot is for the rtti offset.  */\n+\t      pending_virtuals = tree_cons (NULL_TREE, NULL_TREE, pending_virtuals);\n \n-\t  set_rtti_entry (pending_virtuals,\n-\t\t\t  convert (ssizetype, integer_zero_node), t);\n+\t      set_rtti_entry (pending_virtuals,\n+\t\t\t      convert (ssizetype, integer_zero_node), t);\n+\t    }\n \t  build_vtable (NULL_TREE, t);\n \t}\n       else"}, {"sha": "ab364454902c45bb734a368040009767424dcdb9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff08c1864a08245642bcf7522aa54707102dd37/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff08c1864a08245642bcf7522aa54707102dd37/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=aff08c1864a08245642bcf7522aa54707102dd37", "patch": "@@ -736,11 +736,12 @@ struct lang_type\n       unsigned non_aggregate : 1;\n       unsigned is_partial_instantiation : 1;\n       unsigned has_mutable : 1;\n+      unsigned com_interface : 1;\n \n       /* The MIPS compiler gets it wrong if this struct also\n \t does not fill out to a multiple of 4 bytes.  Add a\n \t member `dummy' with new bits if you go over the edge.  */\n-      unsigned dummy : 11;\n+      unsigned dummy : 10;\n     } type_flags;\n \n   int vsize;\n@@ -1010,6 +1011,10 @@ struct lang_type\n #define CLASSTYPE_HAS_MUTABLE(NODE) (TYPE_LANG_SPECIFIC(NODE)->type_flags.has_mutable)\n #define TYPE_HAS_MUTABLE_P(NODE) (cp_has_mutable_p (NODE))\n \n+/* Nonzero means that this type is meant for communication via COM.  */\n+#define CLASSTYPE_COM_INTERFACE(NODE) \\\n+  (TYPE_LANG_SPECIFIC(NODE)->type_flags.com_interface)\n+\n /* A list of class types of which this type is a friend.  The\n    TREE_VALUE is normally a TYPE, but will be a TEMPLATE_DECL in the\n    case of a template friend.  */\n@@ -2724,7 +2729,7 @@ extern void pop_lang_context\t\t\tPROTO((void));\n extern tree instantiate_type\t\t\tPROTO((tree, tree, int));\n extern void print_class_statistics\t\tPROTO((void));\n extern void maybe_push_cache_obstack\t\tPROTO((void));\n-extern unsigned HOST_WIDE_INT skip_rtti_stuff\tPROTO((tree *));\n+extern unsigned HOST_WIDE_INT skip_rtti_stuff\tPROTO((tree *, tree));\n extern void build_self_reference\t\tPROTO((void));\n extern void warn_hidden\t\t\t\tPROTO((tree));\n extern tree get_enclosing_class\t\t\tPROTO((tree));"}, {"sha": "04114f7441788b972f6bd9a4c700518c7359c206", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff08c1864a08245642bcf7522aa54707102dd37/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff08c1864a08245642bcf7522aa54707102dd37/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=aff08c1864a08245642bcf7522aa54707102dd37", "patch": "@@ -2339,21 +2339,18 @@ mark_vtable_entries (decl)\n {\n   tree entries = CONSTRUCTOR_ELTS (DECL_INITIAL (decl));\n \n-  if (flag_rtti)\n-    {\n-      tree fnaddr = (flag_vtable_thunks ? TREE_VALUE (TREE_CHAIN (entries))\n-\t\t     : FNADDR_FROM_VTABLE_ENTRY (TREE_VALUE (entries)));\n-      tree fn = TREE_OPERAND (fnaddr, 0);\n-      TREE_ADDRESSABLE (fn) = 1;\n-      mark_used (fn);\n-    }\n-  skip_rtti_stuff (&entries);\n-\n   for (; entries; entries = TREE_CHAIN (entries))\n     {\n-      tree fnaddr = (flag_vtable_thunks ? TREE_VALUE (entries) \n-\t\t     : FNADDR_FROM_VTABLE_ENTRY (TREE_VALUE (entries)));\n-      tree fn = TREE_OPERAND (fnaddr, 0);\n+      tree fnaddr;\n+      tree fn;\n+\n+      if (TREE_CODE (TREE_VALUE (entries)) == NOP_EXPR)\n+\t/* RTTI offset.  */\n+\tcontinue;\n+\n+      fnaddr = (flag_vtable_thunks ? TREE_VALUE (entries) \n+\t\t: FNADDR_FROM_VTABLE_ENTRY (TREE_VALUE (entries)));\n+      fn = TREE_OPERAND (fnaddr, 0);\n       TREE_ADDRESSABLE (fn) = 1;\n       if (DECL_LANG_SPECIFIC (fn) && DECL_ABSTRACT_VIRTUAL_P (fn))\n \t{"}, {"sha": "6ff3c60410d4c9153ec69866800960e25302fc9a", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff08c1864a08245642bcf7522aa54707102dd37/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff08c1864a08245642bcf7522aa54707102dd37/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=aff08c1864a08245642bcf7522aa54707102dd37", "patch": "@@ -108,6 +108,11 @@ build_headof (exp)\n \n   if (!TYPE_VIRTUAL_P (type))\n     return exp;\n+  if (CLASSTYPE_COM_INTERFACE (type))\n+    {\n+      cp_error (\"RTTI not supported for COM interface type `%T'\", type);\n+      return error_mark_node;\n+    }\n \n   /* If we don't have rtti stuff, get to a sub-object that does.  */\n   if (!CLASSTYPE_VFIELDS (TREE_TYPE (TREE_TYPE (exp))))\n@@ -216,6 +221,11 @@ get_tinfo_fn_dynamic (exp)\n \n       if (! flag_rtti)\n \terror (\"taking dynamic typeid of object with -fno-rtti\");\n+      if (CLASSTYPE_COM_INTERFACE (type))\n+\t{\n+\t  cp_error (\"RTTI not supported for COM interface type `%T'\", type);\n+\t  return error_mark_node;\n+\t}\n \n       /* If we don't have rtti stuff, get to a sub-object that does.  */\n       if (! CLASSTYPE_VFIELDS (type))"}, {"sha": "a756acde93eacf61d6018a4f994b6fea96bcb858", "filename": "gcc/cp/search.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff08c1864a08245642bcf7522aa54707102dd37/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff08c1864a08245642bcf7522aa54707102dd37/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=aff08c1864a08245642bcf7522aa54707102dd37", "patch": "@@ -2034,7 +2034,7 @@ get_abstract_virtuals_1 (binfo, do_self, abstract_virtuals)\n     {\n       tree virtuals = BINFO_VIRTUALS (binfo);\n \n-      skip_rtti_stuff (&virtuals);\n+      skip_rtti_stuff (&virtuals, BINFO_TYPE (binfo));\n \n       while (virtuals)\n \t{\n@@ -2067,7 +2067,7 @@ get_abstract_virtuals (type)\n     {\n       tree virtuals = BINFO_VIRTUALS (vbases);\n \n-      skip_rtti_stuff (&virtuals);\n+      skip_rtti_stuff (&virtuals, type);\n \n       while (virtuals)\n \t{\n@@ -2528,7 +2528,7 @@ expand_upcast_fixups (binfo, addr, orig_addr, vbase, vbase_addr, t,\n       *vbase_offsets = delta;\n     }\n \n-  n = skip_rtti_stuff (&virtuals);\n+  n = skip_rtti_stuff (&virtuals, t);\n \n   while (virtuals)\n     {"}, {"sha": "d870a6be69105e758085f7d99925886b1e6d4452", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff08c1864a08245642bcf7522aa54707102dd37/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff08c1864a08245642bcf7522aa54707102dd37/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=aff08c1864a08245642bcf7522aa54707102dd37", "patch": "@@ -1169,7 +1169,7 @@ debug_binfo (elem)\n   fprintf (stderr, \"virtuals:\\n\");\n   virtuals = BINFO_VIRTUALS (elem);\n \n-  n = skip_rtti_stuff (&virtuals);\n+  n = skip_rtti_stuff (&virtuals, BINFO_TYPE (elem));\n \n   while (virtuals)\n     {"}]}