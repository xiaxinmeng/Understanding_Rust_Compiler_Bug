{"sha": "75995f378221fd6b0f86c920d64d8e09b6b76f3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU5OTVmMzc4MjIxZmQ2YjBmODZjOTIwZDY0ZDhlMDliNmI3NmYzYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-12-30T23:22:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-12-30T23:22:58Z"}, "message": "[multiple changes]\n\n2009-12-30  Daniel Frey  <d.frey@gmx.de>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>  \n\n\t* include/std/type_traits (is_explicitly_convertible,\n\tis_constructible): Add.\n\t* testsuite/util/testsuite_tr1.h (ExplicitClass): Add.\n\t* testsuite/20_util/is_explicitly_convertible/value.cc: New.\n\t* testsuite/20_util/is_constructible/value.cc: Likewise.\n\n2009-12-30  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/util/testsuite_tr1.h (test_relationship): Add\n\tvariadic version.\n\t* testsuite/20_util/is_explicitly_convertible/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/20_util/is_explicitly_convertible/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/is_constructible/requirements/typedefs.cc:\n\tLikewise.\n\t* testsuite/20_util/is_constructible/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/is_convertible/value.cc: Extend.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n\tAdjust dg-error line numbers.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n\nFrom-SVN: r155529", "tree": {"sha": "6830862601b54dd8795e6c9f6929ea52071e63e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6830862601b54dd8795e6c9f6929ea52071e63e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75995f378221fd6b0f86c920d64d8e09b6b76f3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75995f378221fd6b0f86c920d64d8e09b6b76f3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75995f378221fd6b0f86c920d64d8e09b6b76f3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75995f378221fd6b0f86c920d64d8e09b6b76f3c/comments", "author": null, "committer": null, "parents": [{"sha": "8589115b9cf39923208629a049f406b887c0cd3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8589115b9cf39923208629a049f406b887c0cd3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8589115b9cf39923208629a049f406b887c0cd3b"}], "stats": {"total": 337, "additions": 332, "deletions": 5}, "files": [{"sha": "5b5e39ddc9029422eb8ea93b8893e2038dc2635c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=75995f378221fd6b0f86c920d64d8e09b6b76f3c", "patch": "@@ -1,3 +1,31 @@\n+2009-12-30  Daniel Frey  <d.frey@gmx.de>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/type_traits (is_explicitly_convertible,\n+\tis_constructible): Add.\n+\t* testsuite/util/testsuite_tr1.h (ExplicitClass): Add.\n+\t* testsuite/20_util/is_explicitly_convertible/value.cc: New.\n+\t* testsuite/20_util/is_constructible/value.cc: Likewise.\n+\n+2009-12-30  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/util/testsuite_tr1.h (test_relationship): Add\n+\tvariadic version.\n+\t* testsuite/20_util/is_explicitly_convertible/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/20_util/is_explicitly_convertible/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_constructible/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_constructible/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_convertible/value.cc: Extend.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n+\tAdjust dg-error line numbers.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n+\n 2009-12-30  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_iterator.h.: Fix typo in comment."}, {"sha": "09ad8637de0e14eac07b0cf97bb4a7b919dd6f71", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=75995f378221fd6b0f86c920d64d8e09b6b76f3c", "patch": "@@ -272,6 +272,55 @@ namespace std\n \t\t\t       __is_convertible_helper<_From, _To>::__value>\n     { };\n \n+  template<typename _To, typename... _From>\n+    struct __is_constructible_helper\n+    : public __sfinae_types\n+    {\n+    private:\n+      template<typename _To1, typename... _From1>\n+        static decltype(_To1(declval<_From1>()...), __one()) __test(int);\n+\n+      template<typename, typename...>\n+        static __two __test(...);\n+\n+    public:\n+      static const bool __value = sizeof(__test<_To, _From...>(0)) == 1;\n+    };\n+\n+  template<typename _To, typename... _From>\n+    struct is_constructible\n+    : public integral_constant<bool,\n+\t\t\t       __is_constructible_helper<_To,\n+\t\t\t\t\t\t\t _From...>::__value>\n+    { };\n+\n+  template<typename _To, typename _From>\n+    struct __is_constructible_helper1\n+    : public __sfinae_types\n+    {\n+    private:\n+      template<typename _To1, typename _From1>\n+        static decltype( static_cast<_To1>(declval<_From1>()), __one())\n+\t__test(int);\n+\n+      template<typename, typename>\n+        static __two __test(...);\n+\n+    public:\n+      static const bool __value = sizeof(__test<_To, _From>(0)) == 1;\n+    };\n+\n+  template<typename _To, typename _From>\n+    struct is_constructible<_To, _From>\n+    : public integral_constant<bool,\n+\t\t\t       __is_constructible_helper1<_To, _From>::__value>\n+    { };\n+\n+  template<typename _From, typename _To>\n+    struct is_explicitly_convertible\n+    : public is_constructible<_To, _From>\n+    { };\n+\n   template<std::size_t _Len>\n     struct __aligned_storage_msa\n     { "}, {"sha": "dfb522e819d9e171776b88f77a70444be10a2107", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=75995f378221fd6b0f86c920d64d8e09b6b76f3c", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 587 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 636 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 30 }\n // { dg-excess-errors \"In function\" }\n "}, {"sha": "356f73cac49d0994da7535961c5caf2fb41c424e", "filename": "libstdc++-v3/testsuite/20_util/is_constructible/requirements/explicit_instantiation.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Frequirements%2Fexplicit_instantiation.cc?ref=75995f378221fd6b0f86c920d64d8e09b6b76f3c", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2009-12-30  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_constructible<test_type, test_type>;\n+}"}, {"sha": "4b9ecd9e19f6db810f48862361c288c9974b3d8b", "filename": "libstdc++-v3/testsuite/20_util/is_constructible/requirements/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Frequirements%2Ftypedefs.cc?ref=75995f378221fd6b0f86c920d64d8e09b6b76f3c", "patch": "@@ -0,0 +1,36 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2009-12-30  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_constructible<int, int>   test_type;\n+  typedef test_type::value_type             value_type;\n+  typedef test_type::type                   type;\n+  typedef test_type::type::value_type       type_value_type;\n+  typedef test_type::type::type             type_type;\n+}"}, {"sha": "5ff57f6fb6b4e5a403889bf14c08ea2b7b65e545", "filename": "libstdc++-v3/testsuite/20_util/is_constructible/value.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue.cc?ref=75995f378221fd6b0f86c920d64d8e09b6b76f3c", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_constructible;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_relationship<is_constructible, ExplicitClass,\n+\t   double&>(true)) );\n+  VERIFY( (test_relationship<is_constructible, ExplicitClass,\n+\t   int&>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_relationship<is_constructible, ExplicitClass,\n+\t   void*>(false)) );\n+  VERIFY( (test_relationship<is_constructible, ExplicitClass>(false)) );\n+  VERIFY( (test_relationship<is_constructible, ExplicitClass,\n+\t   int, double>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f6282a9019691c16e8c0249fa49108b78314f77d", "filename": "libstdc++-v3/testsuite/20_util/is_convertible/value.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Fvalue.cc?ref=75995f378221fd6b0f86c920d64d8e09b6b76f3c", "patch": "@@ -56,6 +56,7 @@ void test01()\n   VERIFY( (test_relationship<is_convertible, void, void>(true)) );\n   VERIFY( (test_relationship<is_convertible, const void, void>(true)) );\n   VERIFY( (test_relationship<is_convertible, void, volatile void>(true)) );\n+  VERIFY( (test_relationship<is_convertible, double&, ExplicitClass>(true)) );\n \n   // Negative tests.\n   VERIFY( (test_relationship<is_convertible, const int*, int*>(false)) );\n@@ -93,6 +94,9 @@ void test01()\n   VERIFY( (test_relationship<is_convertible, volatile int,\n \t                                     volatile int&>(false)) );\n   VERIFY( (test_relationship<is_convertible, int(int), int(&)(int)>(false)) );\n+\n+  VERIFY( (test_relationship<is_convertible, int&, ExplicitClass>(false)) );\n+  VERIFY( (test_relationship<is_convertible, void*, ExplicitClass>(false)) );\n }\n \n int main()"}, {"sha": "87dd950b27d1967010202c3db36b7fdc8181ebd8", "filename": "libstdc++-v3/testsuite/20_util/is_explicitly_convertible/requirements/explicit_instantiation.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_explicitly_convertible%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_explicitly_convertible%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_explicitly_convertible%2Frequirements%2Fexplicit_instantiation.cc?ref=75995f378221fd6b0f86c920d64d8e09b6b76f3c", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2009-12-30  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_explicitly_convertible<test_type, test_type>;\n+}"}, {"sha": "52ba964b1fdaae62279f1f50eeb8dfe8f1f19748", "filename": "libstdc++-v3/testsuite/20_util/is_explicitly_convertible/requirements/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_explicitly_convertible%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_explicitly_convertible%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_explicitly_convertible%2Frequirements%2Ftypedefs.cc?ref=75995f378221fd6b0f86c920d64d8e09b6b76f3c", "patch": "@@ -0,0 +1,36 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2009-12-30  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_explicitly_convertible<int, int>   test_type;\n+  typedef test_type::value_type                      value_type;\n+  typedef test_type::type                            type;\n+  typedef test_type::type::value_type                type_value_type;\n+  typedef test_type::type::type                      type_type;\n+}"}, {"sha": "7e704873275a02479c9c480bfcae6a47108fcc71", "filename": "libstdc++-v3/testsuite/20_util/is_explicitly_convertible/value.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_explicitly_convertible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_explicitly_convertible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_explicitly_convertible%2Fvalue.cc?ref=75995f378221fd6b0f86c920d64d8e09b6b76f3c", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_explicitly_convertible;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_relationship<is_explicitly_convertible, double&,\n+\t   ExplicitClass>(true)) );\n+  VERIFY( (test_relationship<is_explicitly_convertible, int&,\n+\t   ExplicitClass>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_relationship<is_explicitly_convertible, void*,\n+\t   ExplicitClass>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b37963330c4583142520e04e26583a91af8c3dc0", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=75995f378221fd6b0f86c920d64d8e09b6b76f3c", "patch": "@@ -48,8 +48,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 549 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 511 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 598 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 560 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "0b842b39ea30b5df938c403e50aada2c0114fc0b", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=75995f378221fd6b0f86c920d64d8e09b6b76f3c", "patch": "@@ -48,8 +48,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 470 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 432 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 519 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 481 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "7ac45bdcaa0895a31f68a0e07836985debb1e056", "filename": "libstdc++-v3/testsuite/util/testsuite_tr1.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75995f378221fd6b0f86c920d64d8e09b6b76f3c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h?ref=75995f378221fd6b0f86c920d64d8e09b6b76f3c", "patch": "@@ -67,6 +67,18 @@ namespace __gnu_test\n       return ret;\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<template<typename...> class Relationship,\n+           typename... Types>\n+    bool\n+    test_relationship(bool value)\n+    {\n+      bool ret = true;\n+      ret &= Relationship<Types...>::value == value;\n+      ret &= Relationship<Types...>::type::value == value;\n+      return ret;\n+    }\n+#else\n   template<template<typename, typename> class Relationship,\n            typename Type1, typename Type2>\n     bool\n@@ -77,6 +89,7 @@ namespace __gnu_test\n       ret &= Relationship<Type1, Type2>::type::value == value;\n       return ret;\n     }\n+#endif\n \n   // Test types.\n   class ClassType { };\n@@ -112,6 +125,12 @@ namespace __gnu_test\n \n   class IncompleteClass;\n \n+  struct ExplicitClass\n+  {\n+    ExplicitClass(double&);\n+    explicit ExplicitClass(int&);\n+  };\n+\n   int truncate_float(float x) { return (int)x; }\n   long truncate_double(double x) { return (long)x; }\n "}]}