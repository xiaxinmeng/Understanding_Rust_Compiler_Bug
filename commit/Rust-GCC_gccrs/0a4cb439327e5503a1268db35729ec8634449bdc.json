{"sha": "0a4cb439327e5503a1268db35729ec8634449bdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE0Y2I0MzkzMjdlNTUwM2ExMjY4ZGIzNTcyOWVjODYzNDQ0OWJkYw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-18T00:16:36Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-18T00:16:36Z"}, "message": "Daily bump.", "tree": {"sha": "17b9afe1de42686a2483e20547ab00d2786e3cec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17b9afe1de42686a2483e20547ab00d2786e3cec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a4cb439327e5503a1268db35729ec8634449bdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4cb439327e5503a1268db35729ec8634449bdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a4cb439327e5503a1268db35729ec8634449bdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4cb439327e5503a1268db35729ec8634449bdc/comments", "author": null, "committer": null, "parents": [{"sha": "94c12ffac234b29a702aa7b6730f2678265857c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c12ffac234b29a702aa7b6730f2678265857c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94c12ffac234b29a702aa7b6730f2678265857c8"}], "stats": {"total": 1011, "additions": 1010, "deletions": 1}, "files": [{"sha": "a10bf6cfef97826c7579b6e98166c91ab275c257", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4cb439327e5503a1268db35729ec8634449bdc/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4cb439327e5503a1268db35729ec8634449bdc/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=0a4cb439327e5503a1268db35729ec8634449bdc", "patch": "@@ -1,3 +1,9 @@\n+2021-09-17  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* Makefile.def: Add a jit check target for the jit\n+\tlanguage.\n+\t* Makefile.in: Regenerate.\n+\n 2021-09-16  Andrew Pinski  <apinski@marvell.com>\n \n \tPR bootstrap/67102"}, {"sha": "8efe3cddce93e2b5d37d95d609f58670f519a6b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 667, "deletions": 0, "changes": 667, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4cb439327e5503a1268db35729ec8634449bdc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4cb439327e5503a1268db35729ec8634449bdc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a4cb439327e5503a1268db35729ec8634449bdc", "patch": "@@ -1,3 +1,670 @@\n+2021-09-17  Martin Sebor  <msebor@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add gimple-predicate-analysis.o.\n+\t* tree-ssa-uninit.c (max_phi_args): Move to gimple-predicate-analysis.\n+\t(MASK_SET_BIT, MASK_TEST_BIT, MASK_EMPTY): Same.\n+\t(check_defs): Add comment.\n+\t(can_skip_redundant_opnd): Update comment.\n+\t(compute_uninit_opnds_pos): Adjust to namespace change.\n+\t(find_pdom): Move to gimple-predicate-analysis.cc.\n+\t(find_dom): Same.\n+\t(struct uninit_undef_val_t): New.\n+\t(is_non_loop_exit_postdominating): Move to gimple-predicate-analysis.cc.\n+\t(find_control_equiv_block): Same.\n+\t(MAX_NUM_CHAINS, MAX_CHAIN_LEN, MAX_POSTDOM_CHECK): Same.\n+\t(MAX_SWITCH_CASES): Same.\n+\t(compute_control_dep_chain): Same.\n+\t(find_uninit_use): Use predicate analyzer.\n+\t(struct pred_info): Move to gimple-predicate-analysis.\n+\t(convert_control_dep_chain_into_preds): Same.\n+\t(find_predicates): Same.\n+\t(collect_phi_def_edges): Same.\n+\t(warn_uninitialized_phi): Use predicate analyzer.\n+\t(find_def_preds): Move to gimple-predicate-analysis.\n+\t(dump_pred_info): Same.\n+\t(dump_pred_chain): Same.\n+\t(dump_predicates): Same.\n+\t(destroy_predicate_vecs): Remove.\n+\t(execute_late_warn_uninitialized): New.\n+\t(get_cmp_code): Move to gimple-predicate-analysis.\n+\t(is_value_included_in): Same.\n+\t(value_sat_pred_p): Same.\n+\t(find_matching_predicate_in_rest_chains): Same.\n+\t(is_use_properly_guarded): Same.\n+\t(prune_uninit_phi_opnds): Same.\n+\t(find_var_cmp_const): Same.\n+\t(use_pred_not_overlap_with_undef_path_pred): Same.\n+\t(pred_equal_p): Same.\n+\t(is_neq_relop_p): Same.\n+\t(is_neq_zero_form_p): Same.\n+\t(pred_expr_equal_p): Same.\n+\t(is_pred_expr_subset_of): Same.\n+\t(is_pred_chain_subset_of): Same.\n+\t(is_included_in): Same.\n+\t(is_superset_of): Same.\n+\t(pred_neg_p): Same.\n+\t(simplify_pred): Same.\n+\t(simplify_preds_2): Same.\n+\t(simplify_preds_3): Same.\n+\t(simplify_preds_4): Same.\n+\t(simplify_preds): Same.\n+\t(push_pred): Same.\n+\t(push_to_worklist): Same.\n+\t(get_pred_info_from_cmp): Same.\n+\t(is_degenerated_phi): Same.\n+\t(normalize_one_pred_1): Same.\n+\t(normalize_one_pred): Same.\n+\t(normalize_one_pred_chain): Same.\n+\t(normalize_preds): Same.\n+\t(can_one_predicate_be_invalidated_p): Same.\n+\t(can_chain_union_be_invalidated_p): Same.\n+\t(uninit_uses_cannot_happen): Same.\n+\t(pass_late_warn_uninitialized::execute): Define.\n+\t* gimple-predicate-analysis.cc: New file.\n+\t* gimple-predicate-analysis.h: New file.\n+\n+2021-09-17  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/gcn/gcn.c (gimple.h): Include.\n+\t(gcn_fork_join): Emit barrier for worker-level joins.\n+\t* omp-oacc-neuter-broadcast.cc (find_local_vars_to_propagate): Add\n+\twrites_gang_private bitmap parameter. Set bit for blocks\n+\tcontaining gang-private variable writes.\n+\t(worker_single_simple): Don't emit barrier after predicated block.\n+\t(worker_single_copy): Don't emit barrier if we're not broadcasting\n+\tanything and the block contains no gang-private writes.\n+\t(neuter_worker_single): Don't predicate blocks that only contain\n+\tNOPs or internal marker functions.  Pass has_gang_private_write\n+\targument to worker_single_copy.\n+\t(oacc_do_neutering): Add writes_gang_private bitmap handling.\n+\n+2021-09-17  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/gcn/gcn-protos.h\n+\t(gcn_goacc_create_worker_broadcast_record): Update prototype.\n+\t* config/gcn/gcn-tree.c (gcn_goacc_get_worker_red_decl): Use\n+\tpreallocated block of LDS memory.  Do not cache/share decls for\n+\treduction temporaries between invocations.\n+\t(gcn_goacc_reduction_teardown): Unshare VAR on second use.\n+\t(gcn_goacc_create_worker_broadcast_record): Add OFFSET parameter\n+\tand return temporary LDS space at that offset.  Return pointer in\n+\t\"sender\" case.\n+\t* config/gcn/gcn.c (acc_lds_size, gang_private_hwm, lds_allocs):\n+\tNew global vars.\n+\t(ACC_LDS_SIZE): Define as acc_lds_size.\n+\t(gcn_init_machine_status): Don't initialise lds_allocated,\n+\tlds_allocs, reduc_decls fields of machine function struct.\n+\t(gcn_option_override): Handle default size for gang-private\n+\tvariables and -mgang-private-size option.\n+\t(gcn_expand_prologue): Use LDS_SIZE instead of LDS_SIZE-1 when\n+\tinitialising M0_REG.\n+\t(gcn_shared_mem_layout): New function.\n+\t(gcn_print_lds_decl): Update comment. Use global lds_allocs map and\n+\tgang_private_hwm variable.\n+\t(TARGET_GOACC_SHARED_MEM_LAYOUT): Define target hook.\n+\t* config/gcn/gcn.h (machine_function): Remove lds_allocated,\n+\tlds_allocs, reduc_decls. Add reduction_base, reduction_limit.\n+\t* config/gcn/gcn.opt (gang_private_size_opt): New global.\n+\t(mgang-private-size=): New option.\n+\t* doc/tm.texi.in (TARGET_GOACC_SHARED_MEM_LAYOUT): Place\n+\tdocumentation hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* omp-oacc-neuter-broadcast.cc (targhooks.h, diagnostic-core.h):\n+\tAdd includes.\n+\t(build_sender_ref): Handle sender_decl being pointer.\n+\t(worker_single_copy): Add PLACEMENT and ISOLATE_BROADCASTS\n+\tparameters.  Pass placement argument to\n+\tcreate_worker_broadcast_record hook invocations.  Handle\n+\tsender_decl being pointer and isolate_broadcasts inserting extra\n+\tbarriers.\n+\t(blk_offset_map_t): Add typedef.\n+\t(neuter_worker_single): Add BLK_OFFSET_MAP parameter.  Pass\n+\tpreallocated range to worker_single_copy call.\n+\t(dfs_broadcast_reachable_1): New function.\n+\t(idx_decl_pair_t, used_range_vec_t): New typedefs.\n+\t(sort_size_descending): New function.\n+\t(addr_range): New class.\n+\t(splay_tree_compare_addr_range, splay_tree_free_key)\n+\t(first_fit_range, merge_ranges_1, merge_ranges): New functions.\n+\t(execute_omp_oacc_neuter_broadcast): Rename to...\n+\t(oacc_do_neutering): ... this.  Add BOUNDS_LO, BOUNDS_HI\n+\tparameters.  Arrange layout of shared memory for broadcast\n+\toperations.\n+\t(execute_omp_oacc_neuter_broadcast): New function.\n+\t(pass_omp_oacc_neuter_broadcast::gate): Remove num_workers==1\n+\thandling from here.  Enable pass for all OpenACC routines in order\n+\tto call shared memory-layout hook.\n+\t* target.def (create_worker_broadcast_record): Add OFFSET\n+\tparameter.\n+\t(shared_mem_layout): New hook.\n+\n+2021-09-17  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-oacc-neuter-broadcast.cc\n+\t(pass_omp_oacc_neuter_broadcast::gate): Disable if num_workers is\n+\t1.\n+\t(execute_omp_oacc_neuter_broadcast): Adjust.\n+\n+2021-09-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* value-relation.cc (class equiv_chain): Move to header file.\n+\t(path_oracle::path_oracle): New.\n+\t(path_oracle::~path_oracle): New.\n+\t(path_oracle::register_relation): New.\n+\t(path_oracle::query_relation): New.\n+\t(path_oracle::reset_path): New.\n+\t(path_oracle::dump): New.\n+\t* value-relation.h (class equiv_chain): Move to here.\n+\t(class path_oracle): New.\n+\n+2021-09-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::ranger_cache): Create a DOM\n+\tbased oracle.\n+\t* gimple-range-fold.cc (fur_depend::register_relation): Use\n+\tregister_stmt/edge routines.\n+\t* value-relation.cc (equiv_chain::find): Relocate from equiv_oracle.\n+\t(equiv_oracle::equiv_oracle): Create self equivalence cache.\n+\t(equiv_oracle::~equiv_oracle): Release same.\n+\t(equiv_oracle::equiv_set): Return entry from self equiv cache if there\n+\tare no equivalences.\n+\t(equiv_oracle::find_equiv_block): Move list find to equiv_chain.\n+\t(equiv_oracle::register_relation): Rename from register_equiv.\n+\t(relation_chain_head::find_relation): Relocate from dom_oracle.\n+\t(relation_oracle::register_stmt): New.\n+\t(relation_oracle::register_edge): New.\n+\t(dom_oracle::*): Rename from relation_oracle.\n+\t(dom_oracle::register_relation): Adjust to call equiv_oracle.\n+\t(dom_oracle::set_one_relation): Split from register_relation.\n+\t(dom_oracle::register_transitives): Consolidate 2 methods.\n+\t(dom_oracle::find_relation_block): Move core to relation_chain.\n+\t(dom_oracle::query_relation): Rename from find_relation_dom and adjust.\n+\t* value-relation.h (class relation_oracle): New pure virtual base.\n+\t(class equiv_oracle): Inherit from relation_oracle and adjust.\n+\t(class dom_oracle): Rename from old relation_oracle and adjust.\n+\n+2021-09-17  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/102200\n+\t* pointer-query.cc (access_ref::inform_access): Handle MIN/MAX_EXPR.\n+\t(handle_min_max_size): Change argument.  Store original SSA_NAME for\n+\toperands to potentially distinct (sub)objects.\n+\t(compute_objsize_r): Adjust call to the above.\n+\n+2021-09-17  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000-builtins.h): New include.\n+\t(rs6000_new_builtin_vectorized_function): New function.\n+\t(rs6000_new_builtin_md_vectorized_function): Likewise.\n+\t(rs6000_builtin_vectorized_function): Call\n+\trs6000_new_builtin_vectorized_function.\n+\t(rs6000_builtin_md_vectorized_function): Call\n+\trs6000_new_builtin_md_vectorized_function.\n+\n+2021-09-17  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin-new.def (ASSEMBLE_ACC): Add mmaint flag.\n+\t(ASSEMBLE_PAIR): Likewise.\n+\t(BUILD_ACC): Likewise.\n+\t(DISASSEMBLE_ACC): Likewise.\n+\t(DISASSEMBLE_PAIR): Likewise.\n+\t(PMXVBF16GER2): Likewise.\n+\t(PMXVBF16GER2NN): Likewise.\n+\t(PMXVBF16GER2NP): Likewise.\n+\t(PMXVBF16GER2PN): Likewise.\n+\t(PMXVBF16GER2PP): Likewise.\n+\t(PMXVF16GER2): Likewise.\n+\t(PMXVF16GER2NN): Likewise.\n+\t(PMXVF16GER2NP): Likewise.\n+\t(PMXVF16GER2PN): Likewise.\n+\t(PMXVF16GER2PP): Likewise.\n+\t(PMXVF32GER): Likewise.\n+\t(PMXVF32GERNN): Likewise.\n+\t(PMXVF32GERNP): Likewise.\n+\t(PMXVF32GERPN): Likewise.\n+\t(PMXVF32GERPP): Likewise.\n+\t(PMXVF64GER): Likewise.\n+\t(PMXVF64GERNN): Likewise.\n+\t(PMXVF64GERNP): Likewise.\n+\t(PMXVF64GERPN): Likewise.\n+\t(PMXVF64GERPP): Likewise.\n+\t(PMXVI16GER2): Likewise.\n+\t(PMXVI16GER2PP): Likewise.\n+\t(PMXVI16GER2S): Likewise.\n+\t(PMXVI16GER2SPP): Likewise.\n+\t(PMXVI4GER8): Likewise.\n+\t(PMXVI4GER8PP): Likewise.\n+\t(PMXVI8GER4): Likewise.\n+\t(PMXVI8GER4PP): Likewise.\n+\t(PMXVI8GER4SPP): Likewise.\n+\t(XVBF16GER2): Likewise.\n+\t(XVBF16GER2NN): Likewise.\n+\t(XVBF16GER2NP): Likewise.\n+\t(XVBF16GER2PN): Likewise.\n+\t(XVBF16GER2PP): Likewise.\n+\t(XVF16GER2): Likewise.\n+\t(XVF16GER2NN): Likewise.\n+\t(XVF16GER2NP): Likewise.\n+\t(XVF16GER2PN): Likewise.\n+\t(XVF16GER2PP): Likewise.\n+\t(XVF32GER): Likewise.\n+\t(XVF32GERNN): Likewise.\n+\t(XVF32GERNP): Likewise.\n+\t(XVF32GERPN): Likewise.\n+\t(XVF32GERPP): Likewise.\n+\t(XVF64GER): Likewise.\n+\t(XVF64GERNN): Likewise.\n+\t(XVF64GERNP): Likewise.\n+\t(XVF64GERPN): Likewise.\n+\t(XVF64GERPP): Likewise.\n+\t(XVI16GER2): Likewise.\n+\t(XVI16GER2PP): Likewise.\n+\t(XVI16GER2S): Likewise.\n+\t(XVI16GER2SPP): Likewise.\n+\t(XVI4GER8): Likewise.\n+\t(XVI4GER8PP): Likewise.\n+\t(XVI8GER4): Likewise.\n+\t(XVI8GER4PP): Likewise.\n+\t(XVI8GER4SPP): Likewise.\n+\t(XXMFACC): Likewise.\n+\t(XXMTACC): Likewise.\n+\t(XXSETACCZ): Likewise.\n+\t(ASSEMBLE_PAIR_V): Likewise.\n+\t(BUILD_PAIR): Likewise.\n+\t(DISASSEMBLE_PAIR_V): Likewise.\n+\t(LXVP): New.\n+\t(STXVP): New.\n+\t* config/rs6000/rs6000-call.c (rs6000_gimple_fold_new_mma_builtin):\n+\tHandle RS6000_BIF_LXVP and RS6000_BIF_STXVP.\n+\t* config/rs6000/rs6000-gen-builtins.c (attrinfo): Add ismmaint.\n+\t(parse_bif_attrs): Handle ismmaint.\n+\t(write_decls): Add bif_mmaint_bit and bif_is_mmaint.\n+\t(write_bif_static_init): Handle ismmaint.\n+\n+2021-09-17  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-call.c (rs6000_gimple_fold_new_builtin): New\n+\tforward decl.\n+\t(rs6000_gimple_fold_builtin): Call rs6000_gimple_fold_new_builtin.\n+\t(rs6000_new_builtin_valid_without_lhs): New function.\n+\t(rs6000_gimple_fold_new_mma_builtin): Likewise.\n+\t(rs6000_gimple_fold_new_builtin): Likewise.\n+\n+2021-09-17  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* hash-table.h (hash_table<Descriptor, Lazy, Allocator>::expand):\n+\tDestruct stale Value objects.\n+\t* hash-map-tests.c (test_map_of_type_with_ctor_and_dtor_expand):\n+\tUpdate.\n+\n+2021-09-17  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR c/102245\n+\t* match.pd (shift optimizations): Disable recent sign-changing\n+\toptimization for shifts by zero, these will be folded later.\n+\n+2021-09-17  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin-new.def (__builtin_mffsl): Move from\n+\t[power9] to [always].\n+\n+2021-09-17  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (vectorizable_load): Do not frob\n+\tstmt_info for SLP.\n+\n+2021-09-17  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* config/i386/i386-features.c (remove_partial_avx_dependency):\n+\tAlso check TARGET_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY and\n+\tand TARGET_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY before generating\n+\tvxorps.\n+\t* config/i386/i386.h (TARGET_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY):\n+\tNew.\n+\t(TARGET_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY): Likewise.\n+\t* config/i386/i386.md (SSE FP to FP splitters): Replace\n+\tTARGET_SSE_PARTIAL_REG_DEPENDENCY with\n+\tTARGET_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY.\n+\t(SSE INT to FP splitter): Replace TARGET_SSE_PARTIAL_REG_DEPENDENCY\n+\twith TARGET_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY.\n+\t* config/i386/x86-tune.def\n+\t(X86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY): New.\n+\t(X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY): Likewise.\n+\n+2021-09-17  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101900\n+\t* config/i386/i386-features.c (remove_partial_avx_dependency):\n+\tCheck TARGET_USE_VECTOR_FP_CONVERTS and TARGET_USE_VECTOR_CONVERTS\n+\tbefore generating vxorps.\n+\n+2021-09-17  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* config/i386/i386-options.c (processor_cost_table): Use\n+\ttremont_cost for Tremont.\n+\t* config/i386/x86-tune-costs.h (tremont_memcpy): New.\n+\t(tremont_memset): Likewise.\n+\t(tremont_cost): Likewise.\n+\t* config/i386/x86-tune.def (X86_TUNE_PREFER_KNOWN_REP_MOVSB_STOSB):\n+\tEnable for Tremont.\n+\n+2021-09-17  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* common/config/i386/i386-common.c: Use Haswell scheduling model\n+\tfor Tremont.\n+\t* config/i386/i386.c (ix86_sched_init_global): Prepare for Tremont\n+\tscheduling pass.\n+\t* config/i386/x86-tune-sched.c (ix86_issue_rate): Change Tremont\n+\tissue rate to 4.\n+\t(ix86_adjust_cost): Handle Tremont.\n+\t* config/i386/x86-tune.def (X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY):\n+\tEnable for Tremont.\n+\t(X86_TUNE_USE_LEAVE): Likewise.\n+\t(X86_TUNE_PUSH_MEMORY): Likewise.\n+\t(X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES): Likewise.\n+\t(X86_TUNE_USE_CLTD): Likewise.\n+\t(X86_TUNE_AVOID_FALSE_DEP_FOR_BMI): Likewise.\n+\t(X86_TUNE_AVOID_MFENCE): Likewise.\n+\t(X86_TUNE_SSE_TYPELESS_STORES): Likewise.\n+\t(X86_TUNE_SSE_LOAD0_BY_PXOR): Likewise.\n+\t(X86_TUNE_ACCUMULATE_OUTGOING_ARGS): Disable for Tremont.\n+\t(X86_TUNE_FOUR_JUMP_LIMIT): Likewise.\n+\t(X86_TUNE_OPT_AGU): Likewise.\n+\t(X86_TUNE_AVOID_LEA_FOR_ADDR): Likewise.\n+\t(X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE): Likewise.\n+\t(X86_TUNE_EXPAND_ABS): Likewise.\n+\t(X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS): Likewise.\n+\t(X86_TUNE_SLOW_PSHUFB): Likewise.\n+\n+2021-09-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/102306\n+\t* combine.c (try_combine): Abort the combination if we are about to\n+\tduplicate volatile references.\n+\n+2021-09-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm_undefined_ph):\n+\tNew intrinsic.\n+\t(_mm256_undefined_ph): Likewise.\n+\t(_mm512_undefined_ph): Likewise.\n+\t(_mm_cvtsh_h): Likewise.\n+\t(_mm256_cvtsh_h): Likewise.\n+\t(_mm512_cvtsh_h): Likewise.\n+\t(_mm512_castph_ps): Likewise.\n+\t(_mm512_castph_pd): Likewise.\n+\t(_mm512_castph_si512): Likewise.\n+\t(_mm512_castph512_ph128): Likewise.\n+\t(_mm512_castph512_ph256): Likewise.\n+\t(_mm512_castph128_ph512): Likewise.\n+\t(_mm512_castph256_ph512): Likewise.\n+\t(_mm512_zextph128_ph512): Likewise.\n+\t(_mm512_zextph256_ph512): Likewise.\n+\t(_mm512_castps_ph): Likewise.\n+\t(_mm512_castpd_ph): Likewise.\n+\t(_mm512_castsi512_ph): Likewise.\n+\t* config/i386/avx512fp16vlintrin.h (_mm_castph_ps):\n+\tNew intrinsic.\n+\t(_mm256_castph_ps): Likewise.\n+\t(_mm_castph_pd): Likewise.\n+\t(_mm256_castph_pd): Likewise.\n+\t(_mm_castph_si128): Likewise.\n+\t(_mm256_castph_si256): Likewise.\n+\t(_mm_castps_ph): Likewise.\n+\t(_mm256_castps_ph): Likewise.\n+\t(_mm_castpd_ph): Likewise.\n+\t(_mm256_castpd_ph): Likewise.\n+\t(_mm_castsi128_ph): Likewise.\n+\t(_mm256_castsi256_ph): Likewise.\n+\t(_mm256_castph256_ph128): Likewise.\n+\t(_mm256_castph128_ph256): Likewise.\n+\t(_mm256_zextph128_ph256): Likewise.\n+\n+2021-09-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm_cvtsh_ss):\n+\tNew intrinsic.\n+\t(_mm_mask_cvtsh_ss): Likewise.\n+\t(_mm_maskz_cvtsh_ss): Likewise.\n+\t(_mm_cvtsh_sd): Likewise.\n+\t(_mm_mask_cvtsh_sd): Likewise.\n+\t(_mm_maskz_cvtsh_sd): Likewise.\n+\t(_mm_cvt_roundsh_ss): Likewise.\n+\t(_mm_mask_cvt_roundsh_ss): Likewise.\n+\t(_mm_maskz_cvt_roundsh_ss): Likewise.\n+\t(_mm_cvt_roundsh_sd): Likewise.\n+\t(_mm_mask_cvt_roundsh_sd): Likewise.\n+\t(_mm_maskz_cvt_roundsh_sd): Likewise.\n+\t(_mm_cvtss_sh): Likewise.\n+\t(_mm_mask_cvtss_sh): Likewise.\n+\t(_mm_maskz_cvtss_sh): Likewise.\n+\t(_mm_cvtsd_sh): Likewise.\n+\t(_mm_mask_cvtsd_sh): Likewise.\n+\t(_mm_maskz_cvtsd_sh): Likewise.\n+\t(_mm_cvt_roundss_sh): Likewise.\n+\t(_mm_mask_cvt_roundss_sh): Likewise.\n+\t(_mm_maskz_cvt_roundss_sh): Likewise.\n+\t(_mm_cvt_roundsd_sh): Likewise.\n+\t(_mm_mask_cvt_roundsd_sh): Likewise.\n+\t(_mm_maskz_cvt_roundsd_sh): Likewise.\n+\t* config/i386/i386-builtin-types.def\n+\t(V8HF_FTYPE_V2DF_V8HF_V8HF_UQI_INT,\n+\tV8HF_FTYPE_V4SF_V8HF_V8HF_UQI_INT,\n+\tV2DF_FTYPE_V8HF_V2DF_V2DF_UQI_INT,\n+\tV4SF_FTYPE_V8HF_V4SF_V4SF_UQI_INT): Add new builtin types.\n+\t* config/i386/i386-builtin.def: Add corrresponding new builtins.\n+\t* config/i386/i386-expand.c: Handle new builtin types.\n+\t* config/i386/sse.md (VF48_128): New mode iterator.\n+\t(avx512fp16_vcvtsh2<ssescalarmodesuffix><mask_scalar_name><round_saeonly_scalar_name>):\n+\tNew.\n+\t(avx512fp16_vcvt<ssescalarmodesuffix>2sh<mask_scalar_name><round_scalar_name>):\n+\tDitto.\n+\n+2021-09-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm512_cvtph_pd):\n+\tNew intrinsic.\n+\t(_mm512_mask_cvtph_pd): Likewise.\n+\t(_mm512_maskz_cvtph_pd): Likewise.\n+\t(_mm512_cvt_roundph_pd): Likewise.\n+\t(_mm512_mask_cvt_roundph_pd): Likewise.\n+\t(_mm512_maskz_cvt_roundph_pd): Likewise.\n+\t(_mm512_cvtxph_ps): Likewise.\n+\t(_mm512_mask_cvtxph_ps): Likewise.\n+\t(_mm512_maskz_cvtxph_ps): Likewise.\n+\t(_mm512_cvtx_roundph_ps): Likewise.\n+\t(_mm512_mask_cvtx_roundph_ps): Likewise.\n+\t(_mm512_maskz_cvtx_roundph_ps): Likewise.\n+\t(_mm512_cvtxps_ph): Likewise.\n+\t(_mm512_mask_cvtxps_ph): Likewise.\n+\t(_mm512_maskz_cvtxps_ph): Likewise.\n+\t(_mm512_cvtx_roundps_ph): Likewise.\n+\t(_mm512_mask_cvtx_roundps_ph): Likewise.\n+\t(_mm512_maskz_cvtx_roundps_ph): Likewise.\n+\t(_mm512_cvtpd_ph): Likewise.\n+\t(_mm512_mask_cvtpd_ph): Likewise.\n+\t(_mm512_maskz_cvtpd_ph): Likewise.\n+\t(_mm512_cvt_roundpd_ph): Likewise.\n+\t(_mm512_mask_cvt_roundpd_ph): Likewise.\n+\t(_mm512_maskz_cvt_roundpd_ph): Likewise.\n+\t* config/i386/avx512fp16vlintrin.h (_mm_cvtph_pd):\n+\tNew intrinsic.\n+\t(_mm_mask_cvtph_pd): Likewise.\n+\t(_mm_maskz_cvtph_pd): Likewise.\n+\t(_mm256_cvtph_pd): Likewise.\n+\t(_mm256_mask_cvtph_pd): Likewise.\n+\t(_mm256_maskz_cvtph_pd): Likewise.\n+\t(_mm_cvtxph_ps): Likewise.\n+\t(_mm_mask_cvtxph_ps): Likewise.\n+\t(_mm_maskz_cvtxph_ps): Likewise.\n+\t(_mm256_cvtxph_ps): Likewise.\n+\t(_mm256_mask_cvtxph_ps): Likewise.\n+\t(_mm256_maskz_cvtxph_ps): Likewise.\n+\t(_mm_cvtxps_ph): Likewise.\n+\t(_mm_mask_cvtxps_ph): Likewise.\n+\t(_mm_maskz_cvtxps_ph): Likewise.\n+\t(_mm256_cvtxps_ph): Likewise.\n+\t(_mm256_mask_cvtxps_ph): Likewise.\n+\t(_mm256_maskz_cvtxps_ph): Likewise.\n+\t(_mm_cvtpd_ph): Likewise.\n+\t(_mm_mask_cvtpd_ph): Likewise.\n+\t(_mm_maskz_cvtpd_ph): Likewise.\n+\t(_mm256_cvtpd_ph): Likewise.\n+\t(_mm256_mask_cvtpd_ph): Likewise.\n+\t(_mm256_maskz_cvtpd_ph): Likewise.\n+\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n+\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n+\t* config/i386/i386-expand.c: Handle new builtin types.\n+\t* config/i386/sse.md\n+\t(VF4_128_8_256): New.\n+\t(VF48H_AVX512VL): Ditto.\n+\t(ssePHmode): Add HF vector modes.\n+\t(castmode): Add new convertable modes.\n+\t(qq2phsuff): Ditto.\n+\t(ph2pssuffix): New.\n+\t(avx512fp16_vcvt<castmode>2ph_<mode><mask_name><round_name>): Ditto.\n+\t(avx512fp16_vcvt<castmode>2ph_<mode>): Ditto.\n+\t(*avx512fp16_vcvt<castmode>2ph_<mode>): Ditto.\n+\t(avx512fp16_vcvt<castmode>2ph_<mode>_mask): Ditto.\n+\t(*avx512fp16_vcvt<castmode>2ph_<mode>_mask): Ditto.\n+\t(*avx512fp16_vcvt<castmode>2ph_<mode>_mask_1): Ditto.\n+\t(avx512fp16_float_extend_ph<mode>2<mask_name><round_saeonly_name>):\n+\tDitto.\n+\t(avx512fp16_float_extend_ph<mode>2<mask_name>): Ditto.\n+\t(*avx512fp16_float_extend_ph<mode>2_load<mask_name>): Ditto.\n+\t(avx512fp16_float_extend_phv2df2<mask_name>): Ditto.\n+\t(*avx512fp16_float_extend_phv2df2_load<mask_name>): Ditto.\n+\n+2021-09-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm_cvttsh_i32):\n+\tNew intrinsic.\n+\t(_mm_cvttsh_u32): Likewise.\n+\t(_mm_cvtt_roundsh_i32): Likewise.\n+\t(_mm_cvtt_roundsh_u32): Likewise.\n+\t(_mm_cvttsh_i64): Likewise.\n+\t(_mm_cvttsh_u64): Likewise.\n+\t(_mm_cvtt_roundsh_i64): Likewise.\n+\t(_mm_cvtt_roundsh_u64): Likewise.\n+\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n+\t* config/i386/sse.md\n+\t(avx512fp16_fix<fixunssuffix>_trunc<mode>2<round_saeonly_name>):\n+\tNew.\n+\n+2021-09-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm512_cvttph_epi32):\n+\tNew intrinsic.\n+\t(_mm512_mask_cvttph_epi32): Likewise.\n+\t(_mm512_maskz_cvttph_epi32): Likewise.\n+\t(_mm512_cvtt_roundph_epi32): Likewise.\n+\t(_mm512_mask_cvtt_roundph_epi32): Likewise.\n+\t(_mm512_maskz_cvtt_roundph_epi32): Likewise.\n+\t(_mm512_cvttph_epu32): Likewise.\n+\t(_mm512_mask_cvttph_epu32): Likewise.\n+\t(_mm512_maskz_cvttph_epu32): Likewise.\n+\t(_mm512_cvtt_roundph_epu32): Likewise.\n+\t(_mm512_mask_cvtt_roundph_epu32): Likewise.\n+\t(_mm512_maskz_cvtt_roundph_epu32): Likewise.\n+\t(_mm512_cvttph_epi64): Likewise.\n+\t(_mm512_mask_cvttph_epi64): Likewise.\n+\t(_mm512_maskz_cvttph_epi64): Likewise.\n+\t(_mm512_cvtt_roundph_epi64): Likewise.\n+\t(_mm512_mask_cvtt_roundph_epi64): Likewise.\n+\t(_mm512_maskz_cvtt_roundph_epi64): Likewise.\n+\t(_mm512_cvttph_epu64): Likewise.\n+\t(_mm512_mask_cvttph_epu64): Likewise.\n+\t(_mm512_maskz_cvttph_epu64): Likewise.\n+\t(_mm512_cvtt_roundph_epu64): Likewise.\n+\t(_mm512_mask_cvtt_roundph_epu64): Likewise.\n+\t(_mm512_maskz_cvtt_roundph_epu64): Likewise.\n+\t(_mm512_cvttph_epi16): Likewise.\n+\t(_mm512_mask_cvttph_epi16): Likewise.\n+\t(_mm512_maskz_cvttph_epi16): Likewise.\n+\t(_mm512_cvtt_roundph_epi16): Likewise.\n+\t(_mm512_mask_cvtt_roundph_epi16): Likewise.\n+\t(_mm512_maskz_cvtt_roundph_epi16): Likewise.\n+\t(_mm512_cvttph_epu16): Likewise.\n+\t(_mm512_mask_cvttph_epu16): Likewise.\n+\t(_mm512_maskz_cvttph_epu16): Likewise.\n+\t(_mm512_cvtt_roundph_epu16): Likewise.\n+\t(_mm512_mask_cvtt_roundph_epu16): Likewise.\n+\t(_mm512_maskz_cvtt_roundph_epu16): Likewise.\n+\t* config/i386/avx512fp16vlintrin.h (_mm_cvttph_epi32):\n+\tNew intirnsic.\n+\t(_mm_mask_cvttph_epi32): Likewise.\n+\t(_mm_maskz_cvttph_epi32): Likewise.\n+\t(_mm256_cvttph_epi32): Likewise.\n+\t(_mm256_mask_cvttph_epi32): Likewise.\n+\t(_mm256_maskz_cvttph_epi32): Likewise.\n+\t(_mm_cvttph_epu32): Likewise.\n+\t(_mm_mask_cvttph_epu32): Likewise.\n+\t(_mm_maskz_cvttph_epu32): Likewise.\n+\t(_mm256_cvttph_epu32): Likewise.\n+\t(_mm256_mask_cvttph_epu32): Likewise.\n+\t(_mm256_maskz_cvttph_epu32): Likewise.\n+\t(_mm_cvttph_epi64): Likewise.\n+\t(_mm_mask_cvttph_epi64): Likewise.\n+\t(_mm_maskz_cvttph_epi64): Likewise.\n+\t(_mm256_cvttph_epi64): Likewise.\n+\t(_mm256_mask_cvttph_epi64): Likewise.\n+\t(_mm256_maskz_cvttph_epi64): Likewise.\n+\t(_mm_cvttph_epu64): Likewise.\n+\t(_mm_mask_cvttph_epu64): Likewise.\n+\t(_mm_maskz_cvttph_epu64): Likewise.\n+\t(_mm256_cvttph_epu64): Likewise.\n+\t(_mm256_mask_cvttph_epu64): Likewise.\n+\t(_mm256_maskz_cvttph_epu64): Likewise.\n+\t(_mm_cvttph_epi16): Likewise.\n+\t(_mm_mask_cvttph_epi16): Likewise.\n+\t(_mm_maskz_cvttph_epi16): Likewise.\n+\t(_mm256_cvttph_epi16): Likewise.\n+\t(_mm256_mask_cvttph_epi16): Likewise.\n+\t(_mm256_maskz_cvttph_epi16): Likewise.\n+\t(_mm_cvttph_epu16): Likewise.\n+\t(_mm_mask_cvttph_epu16): Likewise.\n+\t(_mm_maskz_cvttph_epu16): Likewise.\n+\t(_mm256_cvttph_epu16): Likewise.\n+\t(_mm256_mask_cvttph_epu16): Likewise.\n+\t(_mm256_maskz_cvttph_epu16): Likewise.\n+\t* config/i386/i386-builtin.def: Add new builtins.\n+\t* config/i386/sse.md\n+\t(avx512fp16_fix<fixunssuffix>_trunc<mode>2<mask_name><round_saeonly_name>):\n+\tNew.\n+\t(avx512fp16_fix<fixunssuffix>_trunc<mode>2<mask_name>): Ditto.\n+\t(*avx512fp16_fix<fixunssuffix>_trunc<mode>2_load<mask_name>): Ditto.\n+\t(avx512fp16_fix<fixunssuffix>_truncv2di2<mask_name>): Ditto.\n+\t(avx512fp16_fix<fixunssuffix>_truncv2di2_load<mask_name>): Ditto.\n+\n+2021-09-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm_cvtsh_i32): New intrinsic.\n+\t(_mm_cvtsh_u32): Likewise.\n+\t(_mm_cvt_roundsh_i32): Likewise.\n+\t(_mm_cvt_roundsh_u32): Likewise.\n+\t(_mm_cvtsh_i64): Likewise.\n+\t(_mm_cvtsh_u64): Likewise.\n+\t(_mm_cvt_roundsh_i64): Likewise.\n+\t(_mm_cvt_roundsh_u64): Likewise.\n+\t(_mm_cvti32_sh): Likewise.\n+\t(_mm_cvtu32_sh): Likewise.\n+\t(_mm_cvt_roundi32_sh): Likewise.\n+\t(_mm_cvt_roundu32_sh): Likewise.\n+\t(_mm_cvti64_sh): Likewise.\n+\t(_mm_cvtu64_sh): Likewise.\n+\t(_mm_cvt_roundi64_sh): Likewise.\n+\t(_mm_cvt_roundu64_sh): Likewise.\n+\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n+\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n+\t* config/i386/i386-expand.c (ix86_expand_round_builtin):\n+\tHandle new builtin types.\n+\t* config/i386/sse.md\n+\t(avx512fp16_vcvtsh2<sseintconvertsignprefix>si<rex64namesuffix><round_name>):\n+\tNew define_insn.\n+\t(avx512fp16_vcvtsh2<sseintconvertsignprefix>si<rex64namesuffix>_2): Likewise.\n+\t(avx512fp16_vcvt<floatsuffix>si2sh<rex64namesuffix><round_name>): Likewise.\n+\n 2021-09-16  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \t* config/rs6000/rs6000-c.c (rs6000-builtins.h): New include."}, {"sha": "0e68b89b8a892fe66691aa436b6417d7d13f1c0e", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4cb439327e5503a1268db35729ec8634449bdc/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4cb439327e5503a1268db35729ec8634449bdc/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=0a4cb439327e5503a1268db35729ec8634449bdc", "patch": "@@ -1 +1 @@\n-20210917\n+20210918"}, {"sha": "c97755acace7413bedd6730d92d926feb835f3f0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4cb439327e5503a1268db35729ec8634449bdc/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4cb439327e5503a1268db35729ec8634449bdc/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=0a4cb439327e5503a1268db35729ec8634449bdc", "patch": "@@ -1,3 +1,12 @@\n+2021-09-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-omp.c (c_finish_omp_atomic): Avoid creating\n+\tTARGET_EXPR if test is true, use create_tmp_var_raw instead of\n+\tcreate_tmp_var and add a zero initializer to TARGET_EXPRs that\n+\thad NULL initializer.  When omitting operands after v = x,\n+\tuse type of v rather than type of x.  Fix type of vtmp\n+\tTARGET_EXPR.\n+\n 2021-09-13  Jason Merrill  <jason@redhat.com>\n \n \t* c.opt: Add -Winterference-size."}, {"sha": "2c66ae02a366df83a4615056a0f495b4b8c461f1", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4cb439327e5503a1268db35729ec8634449bdc/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4cb439327e5503a1268db35729ec8634449bdc/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=0a4cb439327e5503a1268db35729ec8634449bdc", "patch": "@@ -1,3 +1,8 @@\n+2021-09-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_atomic): Reject atomic swap if capture\n+\tis true.\n+\n 2021-09-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_conditional_expression): If omp_atomic_lhs and"}, {"sha": "1f880f30f84908bd6c449a4e6e7197a7a4b62786", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4cb439327e5503a1268db35729ec8634449bdc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4cb439327e5503a1268db35729ec8634449bdc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0a4cb439327e5503a1268db35729ec8634449bdc", "patch": "@@ -1,3 +1,14 @@\n+2021-09-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-tree.h (finish_omp_atomic): Add r and weak arguments.\n+\t* parser.c (cp_parser_omp_atomic): Update function comment for\n+\tOpenMP 5.1 atomics, parse OpenMP 5.1 atomics and fail, compare and\n+\tweak clauses.\n+\t* semantics.c (finish_omp_atomic): Add r and weak arguments, handle\n+\tthem, handle COND_EXPRs.\n+\t* pt.c (tsubst_expr): Adjust for COND_EXPR forms that\n+\tfinish_omp_atomic can now produce.\n+\n 2021-09-16  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/98486"}, {"sha": "1f0f005fd8a58b9759a751a62a2e190a5fc0d72a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4cb439327e5503a1268db35729ec8634449bdc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4cb439327e5503a1268db35729ec8634449bdc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0a4cb439327e5503a1268db35729ec8634449bdc", "patch": "@@ -1,3 +1,20 @@\n+2021-09-17  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102366\n+\t* trans-decl.c (gfc_finish_var_decl): Disable the warning message\n+\tfor variables moved from stack to static storange if they are\n+\tdeclared in the main, but allow the move to happen.\n+\n+2021-09-17  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* intrinsic.texi (ISO_C_BINDING): Change C_FLOAT128 to correspond\n+\tto _Float128 rather than __float128.\n+\t* iso-c-binding.def (c_float128): Update comments.\n+\t* trans-intrinsic.c (gfc_builtin_decl_for_float_kind): Likewise.\n+\t(build_round_expr): Likewise.\n+\t(gfc_build_intrinsic_lib_fndcecls): Likewise.\n+\t* trans-types.h (gfc_real16_is_float128): Likewise.\n+\n 2021-09-16  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/102287"}, {"sha": "6852772945834d399aac0b718b616130cc7829c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 234, "deletions": 0, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4cb439327e5503a1268db35729ec8634449bdc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4cb439327e5503a1268db35729ec8634449bdc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a4cb439327e5503a1268db35729ec8634449bdc", "patch": "@@ -1,3 +1,237 @@\n+2021-09-17  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102366\n+\t* gfortran.dg/pr102366.f90: New test.\n+\n+2021-09-17  qing zhao  <qing.zhao@oracle.com>\n+\n+\t* gcc.target/i386/auto-init-1.c: Restrict the testing only for\n+\t-march=x86-64 and -mtune=generic. Add -fno-stack-protector.\n+\t* gcc.target/i386/auto-init-2.c: Restrict the testing only for\n+\t-march=x86-64 and -mtune=generic -msse.\n+\t* gcc.target/i386/auto-init-3.c: Likewise.\n+\t* gcc.target/i386/auto-init-4.c: Likewise.\n+\t* gcc.target/i386/auto-init-5.c: Different pattern match for lp64 and\n+\tia32.\n+\t* gcc.target/i386/auto-init-6.c: Restrict the testing only for\n+\t-march=x86-64 and -mtune-generic -msse. Add -fno-stack-protector.\n+\t* gcc.target/i386/auto-init-7.c: Likewise.\n+\t* gcc.target/i386/auto-init-8.c: Restrict the testing only for\n+\t-march=x86-64 and -mtune=generic -msse..\n+\t* gcc.target/i386/auto-init-padding-1.c: Likewise.\n+\t* gcc.target/i386/auto-init-padding-10.c: Likewise.\n+\t* gcc.target/i386/auto-init-padding-11.c: Likewise.\n+\t* gcc.target/i386/auto-init-padding-12.c: Likewise.\n+\t* gcc.target/i386/auto-init-padding-2.c: Likewise.\n+\t* gcc.target/i386/auto-init-padding-3.c: Restrict the testing only for\n+\t-march=x86-64. Different pattern match for lp64 and ia32.\n+\t* gcc.target/i386/auto-init-padding-4.c: Restrict the testing only for\n+\t-march=x86-64 and -mtune-generic -msse.\n+\t* gcc.target/i386/auto-init-padding-5.c: Likewise.\n+\t* gcc.target/i386/auto-init-padding-6.c: Likewise.\n+\t* gcc.target/i386/auto-init-padding-7.c: Restrict the testing only for\n+\t-march=x86-64 and -mtune-generic -msse. Add -fno-stack-protector.\n+\t* gcc.target/i386/auto-init-padding-8.c: Likewise.\n+\t* gcc.target/i386/auto-init-padding-9.c: Restrict the testing only for\n+\t-march=x86-64. Different pattern match for lp64 and ia32.\n+\n+2021-09-17  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/102200\n+\t* gcc.dg/Wstringop-overflow-62.c: Adjust text of an expected note.\n+\t* gcc.dg/Warray-bounds-89.c: New test.\n+\t* gcc.dg/Wstringop-overflow-74.c: New test.\n+\t* gcc.dg/Wstringop-overflow-75.c: New test.\n+\t* gcc.dg/Wstringop-overflow-76.c: New test.\n+\n+2021-09-17  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* gfortran.dg/PR100914.c: Do not include quadmath.h.  Use\n+\t_Float128 _Complex instead of __complex128.\n+\t* gfortran.dg/PR100914.f90: Add -Wno-pedantic to suppress error\n+\tabout use of _Float128.\n+\t* gfortran.dg/c-interop/typecodes-array-float128-c.c: Use\n+\t_Float128 instead of __float128.\n+\t* gfortran.dg/c-interop/typecodes-sanity-c.c: Likewise.\n+\t* gfortran.dg/c-interop/typecodes-scalar-float128-c.c: Likewise.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_fortran_real_c_float128): Update comments.\n+\n+2021-09-17  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR c/102245\n+\t* gcc.dg/Wint-in-bool-context-4.c: New test case.\n+\n+2021-09-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/atomic-18.c: Expect same diagnostics in C++ as in\n+\tC.\n+\t* c-c++-common/gomp/atomic-25.c: Drop c effective target.\n+\t* c-c++-common/gomp/atomic-26.c: Likewise.\n+\t* c-c++-common/gomp/atomic-27.c: Likewise.\n+\t* c-c++-common/gomp/atomic-28.c: Likewise.\n+\t* c-c++-common/gomp/atomic-29.c: Likewise.\n+\t* c-c++-common/gomp/atomic-30.c: Likewise.  Adjust expected diagnostics\n+\tfor C++ when it differs from C.\n+\t(foo): Change return type from double to void.\n+\t* g++.dg/gomp/atomic-5.C: Adjust expected diagnostics wording.\n+\t* g++.dg/gomp/atomic-20.C: New test.\n+\n+2021-09-17  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/avx-covert-1.c: New file.\n+\t* gcc.target/i386/avx-fp-covert-1.c: Likewise.\n+\t* gcc.target/i386/avx-int-covert-1.c: Likewise.\n+\t* gcc.target/i386/sse-covert-1.c: Likewise.\n+\t* gcc.target/i386/sse-fp-covert-1.c: Likewise.\n+\t* gcc.target/i386/sse-int-covert-1.c: Likewise.\n+\n+2021-09-17  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101900\n+\t* gcc.target/i386/pr101900-1.c: New test.\n+\t* gcc.target/i386/pr101900-2.c: Likewise.\n+\t* gcc.target/i386/pr101900-3.c: Likewise.\n+\n+2021-09-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.target/sparc/20210917-1.c: New test.\n+\n+2021-09-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-typecast-1.c: New test.\n+\t* gcc.target/i386/avx512fp16-typecast-2.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-typecast-1.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-typecast-2.c: Ditto.\n+\n+2021-09-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-vcvtsd2sh-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vcvtsd2sh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtsh2sd-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtsh2sd-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtsh2ss-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtsh2ss-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtss2sh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtss2sh-1b.c: Ditto.\n+\n+2021-09-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-helper.h (V512): Add DF contents.\n+\t(src3f): New.\n+\t* gcc.target/i386/avx512fp16-vcvtpd2ph-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vcvtpd2ph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtph2pd-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtph2pd-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtph2psx-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtph2psx-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtps2ph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtps2ph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtpd2ph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtpd2ph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtph2pd-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtph2pd-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtph2psx-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtph2psx-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtps2ph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtps2ph-1b.c: Ditto.\n+\n+2021-09-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-vcvttsh2si-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vcvttsh2si-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvttsh2si64-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvttsh2si64-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvttsh2usi-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvttsh2usi-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvttsh2usi64-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvttsh2usi64-1b.c: Ditto.\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-vcvttph2dq-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vcvttph2dq-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvttph2qq-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvttph2qq-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvttph2udq-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvttph2udq-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvttph2uqq-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvttph2uqq-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvttph2uw-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvttph2uw-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvttph2w-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvttph2w-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvttph2dq-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvttph2dq-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvttph2qq-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvttph2qq-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvttph2udq-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvttph2udq-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvttph2uqq-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvttph2uqq-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvttph2uw-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvttph2uw-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvttph2w-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvttph2w-1b.c: Ditto.\n+\n+2021-09-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-helper.h (V512): Add int32\n+\tcomponent.\n+\t* gcc.target/i386/avx512fp16-vcvtsh2si-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vcvtsh2si-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtsh2si64-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtsh2si64-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtsh2usi-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtsh2usi-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtsh2usi64-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtsh2usi64-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtsi2sh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtsi2sh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtsi2sh64-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtsi2sh64-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtusi2sh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtusi2sh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtusi2sh64-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtusi2sh64-1b.c: Ditto.\n+\n+2021-09-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n 2021-09-16  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/98486"}, {"sha": "779ef06ad3abe4eb20c229df98f09f08ad02c390", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4cb439327e5503a1268db35729ec8634449bdc/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4cb439327e5503a1268db35729ec8634449bdc/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=0a4cb439327e5503a1268db35729ec8634449bdc", "patch": "@@ -1,3 +1,15 @@\n+2021-09-17  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* ISO_Fortran_binding.h: Update comments.\n+\t* runtime/ISO_Fortran_binding.c: Likewise.\n+\n+2021-09-17  Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* ISO_Fortran_binding.h: Only include float.h if the C compiler\n+\tdoesn't have predefined __LDBL_* and __DBL_* macros. Handle\n+\tLDBL_MANT_DIG == 53 for FreeBSD.\n+\n 2021-09-13  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* ISO_Fortran_binding.h (CFI_type_long_double)"}, {"sha": "38f5e5eff94ae620167bd5c821e2c2a99323f228", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4cb439327e5503a1268db35729ec8634449bdc/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4cb439327e5503a1268db35729ec8634449bdc/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=0a4cb439327e5503a1268db35729ec8634449bdc", "patch": "@@ -1,3 +1,25 @@\n+2021-09-17  Julian Brown  <julian@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/broadcast-many.c: Update.\n+\n+2021-09-17  Julian Brown  <julian@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/broadcast-many.c: New test.\n+\n+2021-09-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgomp.texi (OpenMP 5.1): Spelling fix,\n+\tdeclare variante -> declare variant.\n+\n+2021-09-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c-c++-common/atomic-19.c: Drop c effective target.\n+\tUse /* */ comments instead of //.\n+\t* testsuite/libgomp.c-c++-common/atomic-20.c: Likewise.\n+\t* testsuite/libgomp.c-c++-common/atomic-21.c: Likewise.\n+\t* testsuite/libgomp.c++/atomic-16.C: New test.\n+\t* testsuite/libgomp.c++/atomic-17.C: New test.\n+\n 2021-09-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c-c++-common/atomic-19.c: New test."}, {"sha": "22f78a38f8a5166ec4b4c252a8622011705d77e7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4cb439327e5503a1268db35729ec8634449bdc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4cb439327e5503a1268db35729ec8634449bdc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0a4cb439327e5503a1268db35729ec8634449bdc", "patch": "@@ -1,3 +1,29 @@\n+2021-09-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_path.h (path::iterator): Add noexcept to all\n+\tmember functions and friend functions.\n+\t(distance): Add noexcept.\n+\t(advance): Add noexcept and inline.\n+\t* include/experimental/bits/fs_path.h (path::iterator):\n+\tAdd noexcept to all member functions.\n+\n+2021-09-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/102270\n+\t* include/std/tuple (_Tuple_impl): Add constexpr to constructor\n+\tmissed in previous patch.\n+\t* testsuite/20_util/tuple/cons/102270.C: Moved to...\n+\t* testsuite/20_util/tuple/cons/102270.cc: ...here.\n+\t* testsuite/util/testsuite_allocator.h (SimpleAllocator): Add\n+\tconstexpr to constructor so it can be used for C++20 tests.\n+\n+2021-09-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/26_numerics/valarray/dr630-3.C: Moved to...\n+\t* testsuite/26_numerics/valarray/dr630-3.cc: ...here.\n+\t* testsuite/27_io/basic_iostream/cons/16251.C: Moved to...\n+\t* testsuite/27_io/basic_iostream/cons/16251.cc: ...here.\n+\n 2021-09-16  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/Makefile.am (stamp-debug): Add all Makefiles as"}]}