{"sha": "57a4717bd3f09f2270cf928a381fe204fd702a90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdhNDcxN2JkM2YwOWYyMjcwY2Y5MjhhMzgxZmUyMDRmZDcwMmE5MA==", "commit": {"author": {"name": "Tejas Belagod", "email": "tejas.belagod@arm.com", "date": "2012-06-18T10:43:03Z"}, "committer": {"name": "Tejas Belagod", "email": "belagod@gcc.gnu.org", "date": "2012-06-18T10:43:03Z"}, "message": "Implement support for int iterators.\n\nFrom-SVN: r188726", "tree": {"sha": "3f348986a905d10f6625171379da020acb5abe77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f348986a905d10f6625171379da020acb5abe77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57a4717bd3f09f2270cf928a381fe204fd702a90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a4717bd3f09f2270cf928a381fe204fd702a90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57a4717bd3f09f2270cf928a381fe204fd702a90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a4717bd3f09f2270cf928a381fe204fd702a90/comments", "author": {"login": "tejas-belagod-arm", "id": 92718852, "node_id": "U_kgDOBYbHBA", "avatar_url": "https://avatars.githubusercontent.com/u/92718852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tejas-belagod-arm", "html_url": "https://github.com/tejas-belagod-arm", "followers_url": "https://api.github.com/users/tejas-belagod-arm/followers", "following_url": "https://api.github.com/users/tejas-belagod-arm/following{/other_user}", "gists_url": "https://api.github.com/users/tejas-belagod-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tejas-belagod-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tejas-belagod-arm/subscriptions", "organizations_url": "https://api.github.com/users/tejas-belagod-arm/orgs", "repos_url": "https://api.github.com/users/tejas-belagod-arm/repos", "events_url": "https://api.github.com/users/tejas-belagod-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/tejas-belagod-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b7104c55e7d5c7335d1263131ac12ec9214b1dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7104c55e7d5c7335d1263131ac12ec9214b1dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7104c55e7d5c7335d1263131ac12ec9214b1dce"}], "stats": {"total": 136, "additions": 131, "deletions": 5}, "files": [{"sha": "2f8e62dd32e5d2fc15542f1b197bdfd3db5a5851", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a4717bd3f09f2270cf928a381fe204fd702a90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a4717bd3f09f2270cf928a381fe204fd702a90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57a4717bd3f09f2270cf928a381fe204fd702a90", "patch": "@@ -1,3 +1,16 @@\n+2012-06-18  Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* doc/md.texi: Document int iterators.\n+\t* read-rtl.c (ints): New iterator group.\n+\t(find_int): Int iterator group callback.\n+\t(apply_int_iterator): Likewise.\n+\t(apply_iterators): Traverse int iterator table and add all the used\n+\titerators to list.\n+\t(initialize_iterators): Initialize data structures and callbacks for int\n+\titerators.\n+\t(read_rtx): Parse and read mappings for int iterators.\n+\t(read_rtx_code): Record int iterator usage.\n+\n 2012-06-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR middle-end/53698"}, {"sha": "c71c59cef066fb5c2736bbd938f373f2b9c6a28c", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a4717bd3f09f2270cf928a381fe204fd702a90/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a4717bd3f09f2270cf928a381fe204fd702a90/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=57a4717bd3f09f2270cf928a381fe204fd702a90", "patch": "@@ -8895,6 +8895,7 @@ facilities to make this process easier.\n @menu\n * Mode Iterators::         Generating variations of patterns for different modes.\n * Code Iterators::         Doing the same for codes.\n+* Int Iterators::          Doing the same for integers.\n @end menu\n \n @node Mode Iterators\n@@ -9166,4 +9167,81 @@ This is equivalent to:\n @dots{}\n @end smallexample\n \n+@node Int Iterators\n+@subsection Int Iterators\n+@cindex int iterators in @file{.md} files\n+@findex define_int_iterator\n+@findex define_int_attr\n+\n+Int iterators operate in a similar way to code iterators.  @xref{Code Iterators}.\n+\n+The construct:\n+\n+@smallexample\n+(define_int_iterator @var{name} [(@var{int1} \"@var{cond1}\") @dots{} (@var{intn} \"@var{condn}\")])\n+@end smallexample\n+\n+defines a pseudo integer constant @var{name} that can be instantiated as\n+@var{inti} if condition @var{condi} is true.  Each @var{int}\n+must have the same rtx format.  @xref{RTL Classes}. Int iterators can appear\n+in only those rtx fields that have 'i' as the specifier. This means that\n+each @var{int} has to be a constant defined using define_constant or\n+define_c_enum.\n+\n+As with mode and code iterators, each pattern that uses @var{name} will be\n+expanded @var{n} times, once with all uses of @var{name} replaced by\n+@var{int1}, once with all uses replaced by @var{int2}, and so on.\n+@xref{Defining Mode Iterators}.\n+\n+It is possible to define attributes for ints as well as for codes and modes.\n+Attributes are defined using:\n+\n+@smallexample\n+(define_int_attr @var{name} [(@var{int1} \"@var{value1}\") @dots{} (@var{intn} \"@var{valuen}\")])\n+@end smallexample\n+\n+Here's an example of int iterators in action, taken from the ARM port:\n+\n+@smallexample\n+(define_int_iterator QABSNEG [UNSPEC_VQABS UNSPEC_VQNEG])\n+\n+(define_int_attr absneg [(UNSPEC_VQABS \"abs\") (UNSPEC_VQNEG \"neg\")])\n+\n+(define_insn \"neon_vq<absneg><mode>\"\n+  [(set (match_operand:VDQIW 0 \"s_register_operand\" \"=w\")\n+\t(unspec:VDQIW [(match_operand:VDQIW 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t\t      QABSNEG))]\n+  \"TARGET_NEON\"\n+  \"vq<absneg>.<V_s_elem>\\t%<V_reg>0, %<V_reg>1\"\n+  [(set_attr \"neon_type\" \"neon_vqneg_vqabs\")]\n+)\n+\n+@end smallexample\n+\n+This is equivalent to:\n+\n+@smallexample\n+(define_insn \"neon_vqabs<mode>\"\n+  [(set (match_operand:VDQIW 0 \"s_register_operand\" \"=w\")\n+\t(unspec:VDQIW [(match_operand:VDQIW 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t\t      UNSPEC_VQABS))]\n+  \"TARGET_NEON\"\n+  \"vqabs.<V_s_elem>\\t%<V_reg>0, %<V_reg>1\"\n+  [(set_attr \"neon_type\" \"neon_vqneg_vqabs\")]\n+)\n+\n+(define_insn \"neon_vqneg<mode>\"\n+  [(set (match_operand:VDQIW 0 \"s_register_operand\" \"=w\")\n+\t(unspec:VDQIW [(match_operand:VDQIW 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t\t      UNSPEC_VQNEG))]\n+  \"TARGET_NEON\"\n+  \"vqneg.<V_s_elem>\\t%<V_reg>0, %<V_reg>1\"\n+  [(set_attr \"neon_type\" \"neon_vqneg_vqabs\")]\n+)\n+\n+@end smallexample\n+\n @end ifset"}, {"sha": "71ecf5376421738c8bd8d7442b5a4d73e82ce4b8", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a4717bd3f09f2270cf928a381fe204fd702a90/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a4717bd3f09f2270cf928a381fe204fd702a90/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=57a4717bd3f09f2270cf928a381fe204fd702a90", "patch": "@@ -114,7 +114,7 @@ static rtx read_nested_rtx (void);\n static rtx read_rtx_variadic (rtx);\n \n /* The mode and code iterator structures.  */\n-static struct iterator_group modes, codes;\n+static struct iterator_group modes, codes, ints;\n \n /* All iterators used in the current rtx.  */\n static VEC (mapping_ptr, heap) *current_iterators;\n@@ -165,6 +165,25 @@ apply_code_iterator (void *loc, int code)\n   PUT_CODE ((rtx) loc, (enum rtx_code) code);\n }\n \n+/* Implementations of the iterator_group callbacks for ints.  */\n+\n+/* Since GCC does not construct a table of valid constants,\n+   we have to accept any int as valid.  No cross-checking can\n+   be done.  */\n+\n+static int\n+find_int (const char *name)\n+{\n+  validate_const_int (name);\n+  return atoi (name);\n+}\n+\n+static void\n+apply_int_iterator (void *loc, int value)\n+{\n+  *(int *)loc = value;\n+}\n+\n /* Map attribute string P to its current value.  Return null if the attribute\n    isn't known.  */\n \n@@ -412,6 +431,7 @@ apply_iterators (rtx original, rtx *queue)\n      definition order within each group.  */\n   htab_traverse (modes.iterators, add_current_iterators, NULL);\n   htab_traverse (codes.iterators, add_current_iterators, NULL);\n+  htab_traverse (ints.iterators, add_current_iterators, NULL);\n   gcc_assert (!VEC_empty (mapping_ptr, current_iterators));\n \n   for (;;)\n@@ -518,6 +538,12 @@ initialize_iterators (void)\n   codes.find_builtin = find_code;\n   codes.apply_iterator = apply_code_iterator;\n \n+  ints.attrs = htab_create (13, leading_string_hash, leading_string_eq_p, 0);\n+  ints.iterators = htab_create (13, leading_string_hash,\n+\t\t\t\t leading_string_eq_p, 0);\n+  ints.find_builtin = find_int;\n+  ints.apply_iterator = apply_int_iterator;\n+\n   lower = add_mapping (&modes, modes.attrs, \"mode\");\n   upper = add_mapping (&modes, modes.attrs, \"MODE\");\n   lower_ptr = &lower->values;\n@@ -827,6 +853,16 @@ read_rtx (const char *rtx_name, rtx *x)\n       check_code_iterator (read_mapping (&codes, codes.iterators));\n       return false;\n     }\n+  if (strcmp (rtx_name, \"define_int_attr\") == 0)\n+    {\n+      read_mapping (&ints, ints.attrs);\n+      return false;\n+    }\n+  if (strcmp (rtx_name, \"define_int_iterator\") == 0)\n+    {\n+      read_mapping (&ints, ints.iterators);\n+      return false;\n+    }\n \n   apply_iterators (read_rtx_code (rtx_name), &queue_head);\n   VEC_truncate (iterator_use, iterator_uses, 0);\n@@ -850,7 +886,6 @@ read_rtx_code (const char *code_name)\n   struct md_name name;\n   rtx return_rtx;\n   int c;\n-  int tmp_int;\n   HOST_WIDE_INT tmp_wide;\n \n   /* Linked list structure for making RTXs: */\n@@ -1026,10 +1061,10 @@ read_rtx_code (const char *code_name)\n \n       case 'i':\n       case 'n':\n+\t/* Can be an iterator or an integer constant.  */\n \tread_name (&name);\n-\tvalidate_const_int (name.string);\n-\ttmp_int = atoi (name.string);\n-\tXINT (return_rtx, i) = tmp_int;\n+\trecord_potential_iterator_use (&ints, &XINT (return_rtx, i),\n+\t\t\t\t       name.string);\n \tbreak;\n \n       default:"}]}