{"sha": "d54ef62c4726edbe17d327535db1fd679f014200", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU0ZWY2MmM0NzI2ZWRiZTE3ZDMyNzUzNWRiMWZkNjc5ZjAxNDIwMA==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@redhat.com", "date": "2001-07-19T19:43:44Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2001-07-19T19:43:44Z"}, "message": "ifcvt.c (noce_try_store_flag_constants): Use trunc_int_for_mode when negating constants.\n\n\t* ifcvt.c (noce_try_store_flag_constants): Use trunc_int_for_mode\n\twhen negating constants.\n\nFrom-SVN: r44158", "tree": {"sha": "d1511976936dbd59d6ae7eb5b9c8c917fa8c8935", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1511976936dbd59d6ae7eb5b9c8c917fa8c8935"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d54ef62c4726edbe17d327535db1fd679f014200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54ef62c4726edbe17d327535db1fd679f014200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d54ef62c4726edbe17d327535db1fd679f014200", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54ef62c4726edbe17d327535db1fd679f014200/comments", "author": null, "committer": null, "parents": [{"sha": "7d46d516525c2a1977766d88306e85493b841add", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d46d516525c2a1977766d88306e85493b841add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d46d516525c2a1977766d88306e85493b841add"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "e643a7609771cb0fb2546802a7b160853c282e8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54ef62c4726edbe17d327535db1fd679f014200/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54ef62c4726edbe17d327535db1fd679f014200/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d54ef62c4726edbe17d327535db1fd679f014200", "patch": "@@ -1,3 +1,8 @@\n+2001-07-19  Geoffrey Keating  <geoffk@redhat.com>\n+\n+\t* ifcvt.c (noce_try_store_flag_constants): Use trunc_int_for_mode\n+\twhen negating constants.\n+\n 2001-07-19  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* tree.def: Document restriction on {L|R}SHIFT_EXPR's second argument."}, {"sha": "92bb6b53bfd90f982e12f892dfb2c77c8710ebf5", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54ef62c4726edbe17d327535db1fd679f014200/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54ef62c4726edbe17d327535db1fd679f014200/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=d54ef62c4726edbe17d327535db1fd679f014200", "patch": "@@ -642,14 +642,16 @@ noce_try_store_flag_constants (if_info)\n   int reversep;\n   HOST_WIDE_INT itrue, ifalse, diff, tmp;\n   int normalize, can_reverse;\n+  enum machine_mode mode;\n \n   if (! no_new_pseudos\n       && GET_CODE (if_info->a) == CONST_INT\n       && GET_CODE (if_info->b) == CONST_INT)\n     {\n+      mode = GET_MODE (if_info->x);\n       ifalse = INTVAL (if_info->a);\n       itrue = INTVAL (if_info->b);\n-      diff = itrue - ifalse;\n+      diff = trunc_int_for_mode (mode, itrue - ifalse);\n \n       can_reverse = (reversed_comparison_code (if_info->cond, if_info->jump)\n \t\t     != UNKNOWN);\n@@ -680,7 +682,7 @@ noce_try_store_flag_constants (if_info)\n       if (reversep)\n       \t{\n \t  tmp = itrue; itrue = ifalse; ifalse = tmp;\n-\t  diff = -diff;\n+\t  diff = trunc_int_for_mode (mode, -diff);\n \t}\n \n       start_sequence ();\n@@ -695,7 +697,7 @@ noce_try_store_flag_constants (if_info)\n \t =>   x = 3 + (test == 0);  */\n       if (diff == STORE_FLAG_VALUE || diff == -STORE_FLAG_VALUE)\n \t{\n-\t  target = expand_binop (GET_MODE (if_info->x),\n+\t  target = expand_binop (mode,\n \t\t\t\t (diff == STORE_FLAG_VALUE\n \t\t\t\t  ? add_optab : sub_optab),\n \t\t\t\t GEN_INT (ifalse), target, if_info->x, 0,\n@@ -706,7 +708,7 @@ noce_try_store_flag_constants (if_info)\n \t =>   x = (test != 0) << 3;  */\n       else if (ifalse == 0 && (tmp = exact_log2 (itrue)) >= 0)\n \t{\n-\t  target = expand_binop (GET_MODE (if_info->x), ashl_optab,\n+\t  target = expand_binop (mode, ashl_optab,\n \t\t\t\t target, GEN_INT (tmp), if_info->x, 0,\n \t\t\t\t OPTAB_WIDEN);\n \t}\n@@ -715,7 +717,7 @@ noce_try_store_flag_constants (if_info)\n \t =>   x = -(test != 0) | b;  */\n       else if (itrue == -1)\n \t{\n-\t  target = expand_binop (GET_MODE (if_info->x), ior_optab,\n+\t  target = expand_binop (mode, ior_optab,\n \t\t\t\t target, GEN_INT (ifalse), if_info->x, 0,\n \t\t\t\t OPTAB_WIDEN);\n \t}\n@@ -724,11 +726,11 @@ noce_try_store_flag_constants (if_info)\n \t =>   x = (-(test != 0) & (b - a)) + a;  */\n       else\n \t{\n-\t  target = expand_binop (GET_MODE (if_info->x), and_optab,\n+\t  target = expand_binop (mode, and_optab,\n \t\t\t\t target, GEN_INT (diff), if_info->x, 0,\n \t\t\t\t OPTAB_WIDEN);\n \t  if (target)\n-\t    target = expand_binop (GET_MODE (if_info->x), add_optab,\n+\t    target = expand_binop (mode, add_optab,\n \t\t\t\t   target, GEN_INT (ifalse), if_info->x, 0,\n \t\t\t\t   OPTAB_WIDEN);\n \t}"}]}