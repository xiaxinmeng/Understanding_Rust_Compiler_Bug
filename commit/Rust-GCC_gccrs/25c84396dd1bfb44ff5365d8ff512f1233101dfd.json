{"sha": "25c84396dd1bfb44ff5365d8ff512f1233101dfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVjODQzOTZkZDFiZmI0NGZmNTM2NWQ4ZmY1MTJmMTIzMzEwMWRmZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-09-10T19:16:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-09-10T19:16:20Z"}, "message": "cgraph.h (struct cgraph_node): Rename lowered to analyzed.\n\n        * cgraph.h (struct cgraph_node): Rename lowered to analyzed.\n        * cgraphunit.c: Update to match.\n        (record_call_1): Rearrange.  Call lang hook for language nodes.\n        (cgraph_analyze_function): Don't call lower_function.\n        * langhooks.h (struct lang_hooks_for_callgraph): Replace\n        lower_function with analyze_expr.\n        * langhooks-def.h: Update to match.\n        * langhooks.c (lhd_callgraph_analyze_expr): New.\n\n        * decl2.c (cxx_callgraph_analyze_expr): New, from corpse of\n        mark_member_pointers.\n        (lower_function): Remove.\n        * cp-tree.h: Update to match.\n        * cp-lang.c (LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR): New.\n        (LANG_HOOKS_CALLGRAPH_LOWER_FUNCTION): Remove.\n\nFrom-SVN: r71277", "tree": {"sha": "56d08387c52a8a24e834f4ec5cb02b4cf7d17bf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56d08387c52a8a24e834f4ec5cb02b4cf7d17bf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25c84396dd1bfb44ff5365d8ff512f1233101dfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25c84396dd1bfb44ff5365d8ff512f1233101dfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25c84396dd1bfb44ff5365d8ff512f1233101dfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25c84396dd1bfb44ff5365d8ff512f1233101dfd/comments", "author": null, "committer": null, "parents": [{"sha": "707691d877398ea53c48961368d24e06787ac43d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/707691d877398ea53c48961368d24e06787ac43d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/707691d877398ea53c48961368d24e06787ac43d"}], "stats": {"total": 185, "additions": 115, "deletions": 70}, "files": [{"sha": "350d0e513e211e7d81d5db6f02aab1d181486a49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25c84396dd1bfb44ff5365d8ff512f1233101dfd", "patch": "@@ -1,3 +1,14 @@\n+2003-09-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* cgraph.h (struct cgraph_node): Rename lowered to analyzed.\n+\t* cgraphunit.c: Update to match.\n+\t(record_call_1): Rearrange.  Call lang hook for language nodes.\n+\t(cgraph_analyze_function): Don't call lower_function.\n+\t* langhooks.h (struct lang_hooks_for_callgraph): Replace \n+\tlower_function with analyze_expr.\n+\t* langhooks-def.h: Update to match.\n+\t* langhooks.c (lhd_callgraph_analyze_expr): New.\n+\n 2003-09-10  Martin Husemann  <martin@duskware.de>\n \n \tPR target/11965"}, {"sha": "2e6e68918ec68c796600dd3a1103cf29a55a8906", "filename": "gcc/cgraph.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=25c84396dd1bfb44ff5365d8ff512f1233101dfd", "patch": "@@ -23,7 +23,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define GCC_CGRAPH_H\n \n /* Information about the function collected locally.\n-   Available after function is lowered  */\n+   Available after function is analyzed.  */\n \n struct cgraph_local_info GTY(())\n {\n@@ -100,10 +100,9 @@ struct cgraph_node GTY((chain_next (\"%h.next\"), chain_prev (\"%h.previous\")))\n   /* Set when function is reachable by call from other function\n      that is either reachable or needed.  */\n   bool reachable;\n-  /* Set when the frontend has been asked to lower representation of this\n-     function into trees.  Callees lists are not available when lowered\n-     is not set.  */\n-  bool lowered;\n+  /* Set once the function has been instantiated and its callee\n+     lists created.  */\n+  bool analyzed;\n   /* Set when function is scheduled to be assembled.  */\n   bool output;\n   struct cgraph_local_info local;"}, {"sha": "bb55d2d3e8cab0dedcef5803885613d8c8d7695b", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 60, "deletions": 38, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=25c84396dd1bfb44ff5365d8ff512f1233101dfd", "patch": "@@ -165,7 +165,7 @@ cgraph_finalize_function (tree decl)\n       memset (&node->local, 0, sizeof (node->local));\n       memset (&node->global, 0, sizeof (node->global));\n       memset (&node->rtl, 0, sizeof (node->rtl));\n-      node->lowered = false;\n+      node->analyzed = false;\n       if (node->output)\n \tabort ();\n       while (node->callees)\n@@ -209,41 +209,66 @@ cgraph_finalize_function (tree decl)\n static tree\n record_call_1 (tree *tp, int *walk_subtrees, void *data)\n {\n-  if (TREE_CODE (*tp) == VAR_DECL && TREE_STATIC (*tp))\n-    cgraph_varpool_mark_needed_node (cgraph_varpool_node (*tp));\n-  /* Record dereferences to the functions.  This makes the functions\n-     reachable unconditionally.  */\n-  else if (TREE_CODE (*tp) == ADDR_EXPR && flag_unit_at_a_time)\n-    {\n-      tree decl = TREE_OPERAND (*tp, 0);\n-      if (TREE_CODE (decl) == FUNCTION_DECL)\n-        cgraph_mark_needed_node (cgraph_node (decl));\n-    }\n-  else if (TREE_CODE (*tp) == CALL_EXPR)\n+  tree t = *tp;\n+\n+  switch (TREE_CODE (t))\n     {\n-      tree decl = get_callee_fndecl (*tp);\n-      if (decl && TREE_CODE (decl) == FUNCTION_DECL)\n+    case VAR_DECL:\n+      /* ??? Really, we should mark this decl as *potentially* referenced\n+\t by this function and re-examine whether the decl is actually used\n+\t after rtl has been generated.  */\n+      if (TREE_STATIC (t))\n+        cgraph_varpool_mark_needed_node (cgraph_varpool_node (t));\n+      break;\n+\n+    case ADDR_EXPR:\n+      if (flag_unit_at_a_time)\n+\t{\n+\t  /* Record dereferences to the functions.  This makes the\n+\t     functions reachable unconditionally.  */\n+\t  tree decl = TREE_OPERAND (*tp, 0);\n+\t  if (TREE_CODE (decl) == FUNCTION_DECL)\n+\t    cgraph_mark_needed_node (cgraph_node (decl));\n+\t}\n+      break;\n+\n+    case CALL_EXPR:\n+      {\n+\ttree decl = get_callee_fndecl (*tp);\n+\tif (decl && TREE_CODE (decl) == FUNCTION_DECL)\n+\t  {\n+\t    if (DECL_BUILT_IN (decl))\n+\t      return NULL;\n+\t    cgraph_record_call (data, decl);\n+\n+\t    /* When we see a function call, we don't want to look at the\n+\t       function reference in the ADDR_EXPR that is hanging from\n+\t       the CALL_EXPR we're examining here, because we would\n+\t       conclude incorrectly that the function's address could be\n+\t       taken by something that is not a function call.  So only\n+\t       walk the function parameter list, skip the other subtrees.  */\n+\n+\t    walk_tree (&TREE_OPERAND (*tp, 1), record_call_1, data,\n+\t\t       visited_nodes);\n+\t    *walk_subtrees = 0;\n+\t  }\n+\tbreak;\n+      }\n+\n+    default:\n+      /* Save some cycles by not walking types and declaration as we\n+\t won't find anything useful there anyway.  */\n+      if (DECL_P (*tp) || TYPE_P (*tp))\n \t{\n-\t  if (DECL_BUILT_IN (decl))\n-\t    return NULL;\n-\t  cgraph_record_call (data, decl);\n-\n-\t  /* When we see a function call, we don't want to look at the\n-\t     function reference in the ADDR_EXPR that is hanging from\n-\t     the CALL_EXPR we're examining here, because we would\n-\t     conclude incorrectly that the function's address could be\n-\t     taken by something that is not a function call.  So only\n-\t     walk the function parameter list, skip the other subtrees.  */\n-\n-\t  walk_tree (&TREE_OPERAND (*tp, 1), record_call_1, data,\n-\t\t     visited_nodes);\n \t  *walk_subtrees = 0;\n+\t  break;\n \t}\n+\n+      if ((unsigned int) TREE_CODE (t) >= LAST_AND_UNUSED_TREE_CODE)\n+\treturn (*lang_hooks.callgraph.analyze_expr) (tp, walk_subtrees, data);\n+      break;\n     }\n-  /* Save some cycles by not walking types and declaration as we won't find anything\n-     usefull there anyway.  */\n-  if (DECL_P (*tp) || TYPE_P (*tp))\n-    *walk_subtrees = 0;\n+\n   return NULL;\n }\n \n@@ -267,10 +292,7 @@ cgraph_analyze_function (struct cgraph_node *node)\n {\n   tree decl = node->decl;\n \n-  if (lang_hooks.callgraph.lower_function)\n-    (*lang_hooks.callgraph.lower_function) (decl);\n-\n-  current_function_decl = node->decl;\n+  current_function_decl = decl;\n \n   /* First kill forward declaration so reverse inlining works properly.  */\n   cgraph_create_edges (decl, DECL_SAVED_TREE (decl));\n@@ -286,13 +308,13 @@ cgraph_analyze_function (struct cgraph_node *node)\n \n   /* Inlining characteristics are maintained by the cgraph_mark_inline.  */\n   node->global.insns = node->local.self_insns;\n-  if (!DECL_EXTERNAL (node->decl))\n+  if (!DECL_EXTERNAL (decl))\n     {\n       node->global.cloned_times = 1;\n       node->global.will_be_output = true;\n     }\n \n-  node->lowered = true;\n+  node->analyzed = true;\n   current_function_decl = NULL;\n }\n \n@@ -341,7 +363,7 @@ cgraph_finalize_compilation_unit (void)\n       if (!DECL_SAVED_TREE (decl))\n \tcontinue;\n \n-      if (node->lowered || !node->reachable || !DECL_SAVED_TREE (decl))\n+      if (node->analyzed || !node->reachable || !DECL_SAVED_TREE (decl))\n \tabort ();\n \n       cgraph_analyze_function (node);"}, {"sha": "918d5dad2ca0bd59e6f714508f11febac2758dbd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=25c84396dd1bfb44ff5365d8ff512f1233101dfd", "patch": "@@ -1,3 +1,12 @@\n+2003-09-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* decl2.c (cxx_callgraph_analyze_expr): New, from corpse of\n+\tmark_member_pointers.\n+\t(lower_function): Remove.\n+\t* cp-tree.h: Update to match.\n+\t* cp-lang.c (LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR): New.\n+\t(LANG_HOOKS_CALLGRAPH_LOWER_FUNCTION): Remove.\n+\n 2003-09-09  Richard Henderson  <rth@redhat.com>\n \n \t* semantics.c (expand_or_defer_fn): Update call to "}, {"sha": "e71d53ad281fdeb27193f13f2ec87ba29adab0fa", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=25c84396dd1bfb44ff5365d8ff512f1233101dfd", "patch": "@@ -163,10 +163,10 @@ static void cxx_initialize_diagnostics (diagnostic_context *);\n #undef LANG_HOOKS_EXPR_SIZE\n #define LANG_HOOKS_EXPR_SIZE cp_expr_size\n \n+#undef LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR\n+#define LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR cxx_callgraph_analyze_expr\n #undef LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION\n #define LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION expand_body\n-#undef LANG_HOOKS_CALLGRAPH_LOWER_FUNCTION\n-#define LANG_HOOKS_CALLGRAPH_LOWER_FUNCTION lower_function\n \n #undef LANG_HOOKS_MAKE_TYPE\n #define LANG_HOOKS_MAKE_TYPE cxx_make_type"}, {"sha": "8ab8c6c41ce09517f6e519a904aa190ccf5b1c0d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=25c84396dd1bfb44ff5365d8ff512f1233101dfd", "patch": "@@ -3806,7 +3806,7 @@ extern tree build_artificial_parm (tree, tree);\n extern tree get_guard (tree);\n extern tree get_guard_cond (tree);\n extern tree set_guard (tree);\n-extern void lower_function (tree);\n+extern tree cxx_callgraph_analyze_expr (tree *, int *, tree);\n \n /* XXX Not i18n clean.  */\n #define cp_deprecated(STR)\t\t\t\t\t\t\\"}, {"sha": "8e2c6c75fd507f9ff8d5e0bef1354333b7b0743f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=25c84396dd1bfb44ff5365d8ff512f1233101dfd", "patch": "@@ -2557,10 +2557,15 @@ generate_ctor_and_dtor_functions_for_priority (splay_tree_node n, void * data)\n   return 0;\n }\n \n-/* Callgraph code does not understand the member pointers.  Mark the methods\n-   referenced as used.  */\n-static tree\n-mark_member_pointers (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n+/* Called via LANGHOOK_CALLGRAPH_ANALYZE_EXPR.  It is supposed to mark\n+   decls referenced from frontend specific constructs; it will be called\n+   only for language-specific tree nodes.\n+\n+   Here we must deal with member pointers.  */\n+\n+tree\n+cxx_callgraph_analyze_expr (tree *tp, int *walk_subtrees,\n+\t\t\t    tree from ATTRIBUTE_UNUSED)\n {\n   tree t = *tp;\n \n@@ -2572,22 +2577,10 @@ mark_member_pointers (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n       break;\n \n     default:\n-      /* Avoid useless walking of complex type and declaration nodes.  */\n-      if (TYPE_P (t) || DECL_P (t))\n-\t*walk_subtrees = 0;\n       break;\n     }\n \n-  return 0;\n-}\n-\n-/* Called via LANGHOOK_CALLGRAPH_LOWER_FUNCTION.  It is supposed to lower\n-   frontend specific constructs that would otherwise confuse the middle end.  */\n-void\n-lower_function (tree fn)\n-{\n-  walk_tree_without_duplicates (&DECL_SAVED_TREE (fn),\n-\t\t  \t\tmark_member_pointers, NULL);\n+  return NULL;\n }\n \n /* This routine is called from the last rule in yyparse ()."}, {"sha": "57b10da15f45455e4de51fb12146aad79140a1fb", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=25c84396dd1bfb44ff5365d8ff512f1233101dfd", "patch": "@@ -82,6 +82,8 @@ extern int lhd_tree_inlining_start_inlining (tree);\n extern void lhd_tree_inlining_end_inlining (tree);\n extern tree lhd_tree_inlining_convert_parm_for_inlining (tree, tree, tree);\n extern void lhd_initialize_diagnostics (struct diagnostic_context *);\n+extern tree lhd_callgraph_analyze_expr (tree *, int *, tree);\n+\n \n #define LANG_HOOKS_NAME\t\t\t\"GNU unknown\"\n #define LANG_HOOKS_IDENTIFIER_SIZE\tsizeof (struct lang_identifier)\n@@ -174,15 +176,15 @@ extern void lhd_initialize_diagnostics (struct diagnostic_context *);\n   LANG_HOOKS_TREE_INLINING_END_INLINING, \\\n   LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING, \\\n   LANG_HOOKS_TREE_INLINING_ESTIMATE_NUM_INSNS \\\n-} \\\n+}\n \n-#define LANG_HOOKS_CALLGRAPH_LOWER_FUNCTION NULL\n+#define LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR lhd_callgraph_analyze_expr\n #define LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION NULL\n \n #define LANG_HOOKS_CALLGRAPH_INITIALIZER { \\\n-  LANG_HOOKS_CALLGRAPH_LOWER_FUNCTION, \\\n+  LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR, \\\n   LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION, \\\n-} \\\n+}\n \n #define LANG_HOOKS_FUNCTION_INITIALIZER {\t\\\n   LANG_HOOKS_FUNCTION_INIT,\t\t\t\\"}, {"sha": "2b9f0ec62b4858900d232ebd6f40f205b06f0295", "filename": "gcc/langhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=25c84396dd1bfb44ff5365d8ff512f1233101dfd", "patch": "@@ -535,4 +535,12 @@ lhd_print_error_function (diagnostic_context *context, const char *file)\n     }\n }\n \n+tree\n+lhd_callgraph_analyze_expr (tree *tp ATTRIBUTE_UNUSED,\n+\t\t\t    int *walk_subtrees ATTRIBUTE_UNUSED,\n+\t\t\t    tree decl ATTRIBUTE_UNUSED)\n+{\n+  return NULL;\n+}\n+\n #include \"gt-langhooks.h\""}, {"sha": "195446c702c90275b2d9d0c2a73259afe0d98ae3", "filename": "gcc/langhooks.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c84396dd1bfb44ff5365d8ff512f1233101dfd/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=25c84396dd1bfb44ff5365d8ff512f1233101dfd", "patch": "@@ -53,9 +53,10 @@ struct lang_hooks_for_tree_inlining\n \n struct lang_hooks_for_callgraph\n {\n-  /* Function passed as argument is needed and will be compiled.\n-     Lower the representation so the calls are explicit.  */\n-  void (*lower_function) (tree);\n+  /* The node passed is a language-specific tree node.  If its contents\n+     are relevant to use of other declarations, mark them.  */\n+  tree (*analyze_expr) (tree *, int *, tree);\n+\n   /* Produce RTL for function passed as argument.  */\n   void (*expand_function) (tree);\n };"}]}