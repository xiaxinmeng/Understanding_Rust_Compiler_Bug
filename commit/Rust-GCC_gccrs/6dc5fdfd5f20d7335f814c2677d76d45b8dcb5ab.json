{"sha": "6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRjNWZkZmQ1ZjIwZDczMzVmODE0YzI2NzdkNzZkNDViOGRjYjVhYg==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-08-23T16:52:29Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-08-23T16:52:29Z"}, "message": "linker-map.gnu: Verbose comments, clean up spacing.\n\n2002-08-23  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* config/linker-map.gnu:  Verbose comments, clean up spacing.\n\t* include/bits/stl_alloc.h:  Fix indentation of 'if' bodies, return\n\tstatements.\n\t__allocator:  Change class declaration to struct.\n\t* docs/html/17_intro/C++STYLE:  Fix typo.\n\t* include/bits/stl_deque.h, include/bits/stl_list.h,\n\tinclude/bits/stl_map.h, include/bits/stl_multimap.h,\n\tinclude/bits/stl_vector.h:  Fix fallout from typo.\n\nFrom-SVN: r56540", "tree": {"sha": "dafc8c05d55e3d76f0f3ae08b7d6c9d0ca6b7ade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dafc8c05d55e3d76f0f3ae08b7d6c9d0ca6b7ade"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/comments", "author": null, "committer": null, "parents": [{"sha": "939e32f0605f8014facc2c920fe641241c797c1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/939e32f0605f8014facc2c920fe641241c797c1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/939e32f0605f8014facc2c920fe641241c797c1c"}], "stats": {"total": 150, "additions": 83, "deletions": 67}, "files": [{"sha": "c1480452e91c663a4947a24463774849edf868ca", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab", "patch": "@@ -1,3 +1,14 @@\n+2002-08-23  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* config/linker-map.gnu:  Verbose comments, clean up spacing.\n+\t* include/bits/stl_alloc.h:  Fix indentation of 'if' bodies, return\n+\tstatements.\n+\t__allocator:  Change class declaration to struct.\n+\t* docs/html/17_intro/C++STYLE:  Fix typo.\n+\t* include/bits/stl_deque.h, include/bits/stl_list.h,\n+\tinclude/bits/stl_map.h, include/bits/stl_multimap.h,\n+\tinclude/bits/stl_vector.h:  Fix fallout from typo.\n+\n 2002-08-22  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_CONFIGURE_TESTSUITE): Set"}, {"sha": "368a20768bdfdad647113c6d71c2e35fa48727b5", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab", "patch": "@@ -42,6 +42,8 @@ GLIBCPP_3.2 {\n     };\n \n     # Names not in an 'extern' block are mangled names.\n+\n+    # std::has_facet*\n     _ZSt9has_facet*;\n \n     # operator new(unsigned)\n@@ -72,8 +74,8 @@ GLIBCPP_3.2 {\n     # operator delete[](void*, std::nothrow_t const&)\n     _ZdaPvRKSt9nothrow_t;\n \n-    # vtable\t\n-    _ZTV*;  \n+    # vtable\n+    _ZTV*;\n     _ZTT*;\n \n     # typeinfo"}, {"sha": "f838b830124879d0609a25058c8b0f49336f94fe", "filename": "libstdc++-v3/docs/html/17_intro/C++STYLE", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE?ref=6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab", "patch": "@@ -173,7 +173,7 @@ Notable areas of divergence from what may be previous local practice\n      int foo;\n \n 13. Spacing WRT return statements.\n-   no extra spacing before returns\n+   no extra spacing before returns, no parenthesis\n    ie\n \n    }\n@@ -184,6 +184,12 @@ Notable areas of divergence from what may be previous local practice\n \n    return __ret;\n \n+   -NOT-\n+\n+   }\n+   return (__ret);\n+\n+\n 14. Location of global variables.\n    All global variables of class type, whether in the \"user visable\"\n    space (e.g., cin) or the implementation namespace, must be defined\n@@ -264,7 +270,7 @@ namespace std\n \n     int \n     two_lines(const char* arg) \n-      { return strchr(arg, 'a'); }\n+    { return strchr(arg, 'a'); }\n \n     inline int \n     three_lines();  // inline, but defined below.\n@@ -360,7 +366,3 @@ namespace std\n   }\n } // namespace std\n \n-\n-\n-\n-"}, {"sha": "c3b4b19b1769eaf2d1c548b1a260bea3547c3fb1", "filename": "libstdc++-v3/include/bits/stl_alloc.h", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h?ref=6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab", "patch": "@@ -111,6 +111,7 @@ namespace std\n     { ::operator delete(__p); }\n   };\n \n+\n   /**\n    *  @if maint\n    *  A malloc-based allocator.  Typically slower than the\n@@ -159,7 +160,7 @@ namespace std\n       {\n         void (* __old)() = __malloc_alloc_oom_handler;\n         __malloc_alloc_oom_handler = __f;\n-        return(__old);\n+        return __old;\n       }\n     };\n \n@@ -179,11 +180,11 @@ namespace std\n         {\n           __my_malloc_handler = __malloc_alloc_oom_handler;\n           if (0 == __my_malloc_handler)\n-          std::__throw_bad_alloc();\n+            std::__throw_bad_alloc();\n           (*__my_malloc_handler)();\n           __result = malloc(__n);\n           if (__result)\n-            return(__result);\n+            return __result;\n         }\n     }\n \n@@ -204,7 +205,7 @@ namespace std\n           (*__my_malloc_handler)();\n           __result = realloc(__p, __n);\n           if (__result)\n-            return(__result);\n+            return __result;\n         }\n     }\n #endif\n@@ -230,25 +231,25 @@ namespace std\n    *  (See @link Allocators allocators info @endlink for more.)\n    */\n   template<typename _Tp, typename _Alloc>\n-  class __simple_alloc\n-  {\n-  public:\n-    static _Tp*\n-    allocate(size_t __n)\n-    { return 0 == __n ? 0 : (_Tp*) _Alloc::allocate(__n * sizeof (_Tp)); }\n-\n-    static _Tp*\n-    allocate()\n-    { return (_Tp*) _Alloc::allocate(sizeof (_Tp)); }\n-\n-    static void\n-    deallocate(_Tp* __p, size_t __n)\n-    { if (0 != __n) _Alloc::deallocate(__p, __n * sizeof (_Tp)); }\n-\n-    static void\n-    deallocate(_Tp* __p)\n-    { _Alloc::deallocate(__p, sizeof (_Tp)); }\n-  };\n+    class __simple_alloc\n+    {\n+    public:\n+      static _Tp*\n+      allocate(size_t __n)\n+      { return 0 == __n ? 0 : (_Tp*) _Alloc::allocate(__n * sizeof (_Tp)); }\n+  \n+      static _Tp*\n+      allocate()\n+      { return (_Tp*) _Alloc::allocate(sizeof (_Tp)); }\n+  \n+      static void\n+      deallocate(_Tp* __p, size_t __n)\n+      { if (0 != __n) _Alloc::deallocate(__p, __n * sizeof (_Tp)); }\n+  \n+      static void\n+      deallocate(_Tp* __p)\n+      { _Alloc::deallocate(__p, sizeof (_Tp)); }\n+    };\n \n \n   /**\n@@ -479,15 +480,15 @@ namespace std\n         {\n           __result = _S_start_free;\n           _S_start_free += __total_bytes;\n-          return(__result);\n+          return __result ;\n         }\n       else if (__bytes_left >= __size)\n         {\n           __nobjs = (int)(__bytes_left/__size);\n           __total_bytes = __size * __nobjs;\n           __result = _S_start_free;\n           _S_start_free += __total_bytes;\n-          return(__result);\n+          return __result;\n         }\n       else\n         {\n@@ -521,7 +522,7 @@ namespace std\n                       *__my_free_list = __p -> _M_free_list_link;\n                       _S_start_free = (char*)__p;\n                       _S_end_free = _S_start_free + __i;\n-                      return(_S_chunk_alloc(__size, __nobjs));\n+                      return _S_chunk_alloc(__size, __nobjs);\n                       // Any leftover piece will eventually make it to the\n                       // right free list.\n                     }\n@@ -533,7 +534,7 @@ namespace std\n             }\n           _S_heap_size += __bytes_to_get;\n           _S_end_free = _S_start_free + __bytes_to_get;\n-          return(_S_chunk_alloc(__size, __nobjs));\n+          return _S_chunk_alloc(__size, __nobjs);\n         }\n     }\n \n@@ -554,7 +555,7 @@ namespace std\n       int __i;\n \n       if (1 == __nobjs)\n-        return(__chunk);\n+        return __chunk;\n       __my_free_list = _S_free_list + _S_freelist_index(__n);\n \n       // Build free list in chunk.\n@@ -784,7 +785,7 @@ namespace std\n   };\n \n   template<typename _Alloc>\n-    class __allocator<void, _Alloc>\n+    struct __allocator<void, _Alloc>\n     {\n       typedef size_t      size_type;\n       typedef ptrdiff_t   difference_type;"}, {"sha": "672a4ef0e5a950af4ba30af791c89d6bb5824d21", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab", "patch": "@@ -81,7 +81,7 @@ namespace std\n   */\n   inline size_t \n   __deque_buf_size(size_t __size) \n-    { return __size < 512 ? size_t(512 / __size) : size_t(1); }\n+  { return __size < 512 ? size_t(512 / __size) : size_t(1); }\n   \n   \n   /**\n@@ -1160,7 +1160,7 @@ namespace std\n     */\n     iterator\n     insert(iterator __position)\n-      { return insert(__position, value_type()); }\n+    { return insert(__position, value_type()); }\n   #endif\n   \n     /**\n@@ -1174,7 +1174,7 @@ namespace std\n     */\n     void\n     insert(iterator __position, size_type __n, const value_type& __x)\n-      { _M_fill_insert(__position, __n, __x); }\n+    { _M_fill_insert(__position, __n, __x); }\n   \n     /**\n      *  @brief  Inserts a range into the %deque."}, {"sha": "c5ce621b34aec0e00758584c2709dfe6f8594f9b", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab", "patch": "@@ -113,20 +113,20 @@ namespace std\n     /// Walk the %list forward.\n     void\n     _M_incr()\n-      { _M_node = _M_node->_M_next; }\n+    { _M_node = _M_node->_M_next; }\n   \n     /// Walk the %list backward.\n     void\n     _M_decr()\n-      { _M_node = _M_node->_M_prev; }\n+    { _M_node = _M_node->_M_prev; }\n   \n     bool\n     operator==(const _List_iterator_base& __x) const\n-      { return _M_node == __x._M_node; }\n+    { return _M_node == __x._M_node; }\n   \n     bool\n     operator!=(const _List_iterator_base& __x) const\n-      { return _M_node != __x._M_node; }\n+    { return _M_node != __x._M_node; }\n   };\n   \n   /**\n@@ -164,12 +164,12 @@ namespace std\n   \n     reference\n     operator*() const\n-      { return static_cast<_Node*>(_M_node)->_M_data; }\n-      // Must downcast from List_node_base to _List_node to get to _M_data.\n+    { return static_cast<_Node*>(_M_node)->_M_data; }\n+    // Must downcast from List_node_base to _List_node to get to _M_data.\n   \n     pointer\n     operator->() const\n-      { return &(operator*()); }\n+    { return &(operator*()); }\n   \n     _Self&\n     operator++()\n@@ -226,11 +226,11 @@ namespace std\n   protected:\n     _List_node<_Tp>*\n     _M_get_node()\n-      { return _M_node_allocator.allocate(1); }\n+    { return _M_node_allocator.allocate(1); }\n   \n     void\n     _M_put_node(_List_node<_Tp>* __p)\n-      { _M_node_allocator.deallocate(__p, 1); }\n+    { _M_node_allocator.deallocate(__p, 1); }\n   \n     // NOTA BENE\n     // The stored instance is not actually of \"allocator_type\"'s type.  Instead\n@@ -272,11 +272,11 @@ namespace std\n   \n     _List_node<_Tp>*\n     _M_get_node()\n-      { return _Alloc_type::allocate(1); }\n+    { return _Alloc_type::allocate(1); }\n   \n     void\n     _M_put_node(_List_node<_Tp>* __p)\n-      { _Alloc_type::deallocate(__p, 1); }\n+    { _Alloc_type::deallocate(__p, 1); }\n   \n     _List_node<_Tp>* _M_node;\n   };\n@@ -828,7 +828,7 @@ namespace std\n     */\n     void\n     insert(iterator __pos, size_type __n, const value_type& __x)\n-      { _M_fill_insert(__pos, __n, __x); }\n+    { _M_fill_insert(__pos, __n, __x); }\n   \n     /**\n      *  @brief  Inserts a range into the %list."}, {"sha": "ed47bbb44e73cfe93ffc750d8437f2a6604a94fc", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab", "patch": "@@ -109,7 +109,7 @@ namespace std\n         value_compare(_Compare __c) : comp(__c) {}\n       public:\n         bool operator()(const value_type& __x, const value_type& __y) const\n-          { return comp(__x.first, __y.first); }\n+        { return comp(__x.first, __y.first); }\n       };\n   \n   private:\n@@ -337,7 +337,7 @@ namespace std\n     */\n     pair<iterator,bool>\n     insert(const value_type& __x)\n-      { return _M_t.insert_unique(__x); }\n+    { return _M_t.insert_unique(__x); }\n   \n     /**\n      *  @brief Attempts to insert a std::pair into the %map.\n@@ -361,7 +361,7 @@ namespace std\n     */\n     iterator\n     insert(iterator position, const value_type& __x)\n-      { return _M_t.insert_unique(position, __x); }\n+    { return _M_t.insert_unique(position, __x); }\n   \n     /**\n      *  @brief A template function that attemps to insert a range of elements.\n@@ -374,7 +374,7 @@ namespace std\n     template <typename _InputIterator>\n       void\n       insert(_InputIterator __first, _InputIterator __last)\n-        { _M_t.insert_unique(__first, __last); }\n+      { _M_t.insert_unique(__first, __last); }\n   \n     /**\n      *  @brief Erases an element from a %map.\n@@ -491,7 +491,7 @@ namespace std\n     */\n     size_type\n     count(const key_type& __x) const\n-      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }\n+    { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }\n   \n     /**\n      *  @brief Finds the beginning of a subsequence matching given key.\n@@ -541,7 +541,7 @@ namespace std\n     */\n     const_iterator\n     upper_bound(const key_type& __x) const\n-      { return _M_t.upper_bound(__x); }\n+    { return _M_t.upper_bound(__x); }\n   \n     /**\n      *  @brief Finds a subsequence matching given key.\n@@ -560,7 +560,7 @@ namespace std\n     */\n     pair<iterator,iterator>\n     equal_range(const key_type& __x)\n-      { return _M_t.equal_range(__x); }\n+    { return _M_t.equal_range(__x); }\n   \n     /**\n      *  @brief Finds a subsequence matching given key.\n@@ -579,7 +579,7 @@ namespace std\n     */\n     pair<const_iterator,const_iterator>\n     equal_range(const key_type& __x) const\n-      { return _M_t.equal_range(__x); }\n+    { return _M_t.equal_range(__x); }\n   \n     template <typename _K1, typename _T1, typename _C1, typename _A1>\n     friend bool operator== (const map<_K1,_T1,_C1,_A1>&,"}, {"sha": "0fa79a8d139eb25634b5f88b926ca418dcf7ab2f", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab", "patch": "@@ -123,7 +123,7 @@ namespace std\n         value_compare(_Compare __c) : comp(__c) {}\n       public:\n         bool operator()(const value_type& __x, const value_type& __y) const\n-          { return comp(__x.first, __y.first); }\n+        { return comp(__x.first, __y.first); }\n     };\n   \n   private:\n@@ -347,7 +347,7 @@ namespace std\n     */\n     iterator\n     insert(iterator __position, const value_type& __x)\n-      { return _M_t.insert_equal(__position, __x); }\n+    { return _M_t.insert_equal(__position, __x); }\n   \n     /**\n      *  @brief A template function that attemps to insert a range of elements.\n@@ -360,7 +360,7 @@ namespace std\n     template <typename _InputIterator>\n       void\n       insert(_InputIterator __first, _InputIterator __last)\n-        { _M_t.insert_equal(__first, __last); }\n+      { _M_t.insert_equal(__first, __last); }\n   \n     /**\n      *  @brief Erases an element from a %multimap."}, {"sha": "6958ab493619595939cafb964b098864a9ec8d5b", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=6dc5fdfd5f20d7335f814c2677d76d45b8dcb5ab", "patch": "@@ -98,7 +98,7 @@ namespace std\n   \n     void\n     _M_deallocate(_Tp* __p, size_t __n)\n-      { if (__p) _M_data_allocator.deallocate(__p, __n); }\n+    { if (__p) _M_data_allocator.deallocate(__p, __n); }\n   };\n   \n   /// @if maint Specialization for instanceless allocators.  @endif\n@@ -447,7 +447,7 @@ namespace std\n     */\n     size_type\n     capacity() const\n-      { return size_type(const_iterator(_M_end_of_storage) - begin()); }\n+    { return size_type(const_iterator(_M_end_of_storage) - begin()); }\n   \n     /**\n      *  Returns true if the %vector is empty.  (Thus begin() would equal end().)\n@@ -631,7 +631,7 @@ namespace std\n     */\n     iterator\n     insert(iterator __position)\n-      { return insert(__position, value_type()); }\n+    { return insert(__position, value_type()); }\n   #endif\n   \n     /**\n@@ -648,7 +648,7 @@ namespace std\n     */\n     void\n     insert (iterator __pos, size_type __n, const value_type& __x)\n-      { _M_fill_insert(__pos, __n, __x); }\n+    { _M_fill_insert(__pos, __n, __x); }\n   \n     /**\n      *  @brief  Inserts a range into the %vector."}]}