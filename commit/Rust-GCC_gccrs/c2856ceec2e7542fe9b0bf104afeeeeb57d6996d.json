{"sha": "c2856ceec2e7542fe9b0bf104afeeeeb57d6996d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI4NTZjZWVjMmU3NTQyZmU5YjBiZjEwNGFmZWVlZWI1N2Q2OTk2ZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-29T19:19:51Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-03T15:09:53Z"}, "message": "c++: Tweaks for value_dependent_expression_p.\n\nWe may not call value_dependent_expression_p on expressions that are\nnot potential constant expressions, otherwise value_d could crash,\nas I saw recently (in C++98).  So beef up the checking in i_d_e_p.\n\nThis revealed a curious issue: when we have __PRETTY_FUNCTION__ in\na template function, we set its DECL_VALUE_EXPR to error_mark_node\n(cp_make_fname_decl), so potential_c_e returns false when it gets it,\nbut value_dependent_expression_p handles it specially and says true.\nThis broke lambda-generic-pretty1.C.  So take care of that.\n\nAnd then also tweak uses_template_parms.\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (potential_constant_expression_1): Treat\n\t__PRETTY_FUNCTION__ inside a template function as\n\tpotentially-constant.\n\t* pt.c (uses_template_parms): Call\n\tinstantiation_dependent_expression_p instead of\n\tvalue_dependent_expression_p.\n\t(instantiation_dependent_expression_p): Check\n\tpotential_constant_expression before calling\n\tvalue_dependent_expression_p.", "tree": {"sha": "028f74c4d0f6294d8f0d52ae0fed7a136fda09a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/028f74c4d0f6294d8f0d52ae0fed7a136fda09a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2856ceec2e7542fe9b0bf104afeeeeb57d6996d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2856ceec2e7542fe9b0bf104afeeeeb57d6996d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2856ceec2e7542fe9b0bf104afeeeeb57d6996d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2856ceec2e7542fe9b0bf104afeeeeb57d6996d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f620e64a6f13371b95be5b17abba0acf15bf7cae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f620e64a6f13371b95be5b17abba0acf15bf7cae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f620e64a6f13371b95be5b17abba0acf15bf7cae"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "7033a49ffcf643c238e5257b7476007450fdb23b", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2856ceec2e7542fe9b0bf104afeeeeb57d6996d/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2856ceec2e7542fe9b0bf104afeeeeb57d6996d/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=c2856ceec2e7542fe9b0bf104afeeeeb57d6996d", "patch": "@@ -7714,6 +7714,11 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t\t}\n \t      return false;\n \t    }\n+\t  /* Treat __PRETTY_FUNCTION__ inside a template function as\n+\t     potentially-constant.  */\n+\t  else if (DECL_PRETTY_FUNCTION_P (t)\n+\t\t   && DECL_VALUE_EXPR (t) == error_mark_node)\n+\t    return true;\n \t  return RECUR (DECL_VALUE_EXPR (t), rval);\n \t}\n       if (want_rval"}, {"sha": "c3492f66c9ae812745ad067a7128e10265b1f461", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2856ceec2e7542fe9b0bf104afeeeeb57d6996d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2856ceec2e7542fe9b0bf104afeeeeb57d6996d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c2856ceec2e7542fe9b0bf104afeeeeb57d6996d", "patch": "@@ -10755,7 +10755,7 @@ uses_template_parms (tree t)\n   else if (t == error_mark_node)\n     dependent_p = false;\n   else\n-    dependent_p = value_dependent_expression_p (t);\n+    dependent_p = instantiation_dependent_expression_p (t);\n \n   processing_template_decl = saved_processing_template_decl;\n \n@@ -27294,7 +27294,8 @@ bool\n instantiation_dependent_expression_p (tree expression)\n {\n   return (instantiation_dependent_uneval_expression_p (expression)\n-\t  || value_dependent_expression_p (expression));\n+\t  || (potential_constant_expression (expression)\n+\t      && value_dependent_expression_p (expression)));\n }\n \n /* Like type_dependent_expression_p, but it also works while not processing"}]}