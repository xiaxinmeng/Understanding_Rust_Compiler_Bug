{"sha": "87b3f81fc94c4a40ddc8ef8107757696fd2accad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdiM2Y4MWZjOTRjNGE0MGRkYzhlZjgxMDc3NTc2OTZmZDJhY2NhZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-01-03T15:43:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-01-03T15:43:24Z"}, "message": "ug_words, [...]: Added alpha-ivms transitioning section to porting guide chapter (vms version).\n\n\t* ug_words, gnat_ugn.texi: Added alpha-ivms transitioning section to\n\tporting guide chapter (vms version).\n\tRevised doc title (removed \"for native platforms\") and subtitle.\n\tAdd discussion on warning flag for obsolescent features. First we\n\tnote that it applies to obsolete GNAT features, which was previously\n\tomitted. Second we contrast the behavior with that of the new\n\tAda 2005 AI-368 restriction No_Obsolescent_Features.\n\tPreliminary rewriting of GNAT & libraries chapter in order to take\n\tinto account default project locations & new project manager\n\tcapabilities.\n\n\t* cstand.adb (Create_Operators): Clean up format and documentation of\n\tunary and binary operator result tables. No change in code, just\n\treformatting and addition of comments.\n\n\t* errout.ads, gnatfind.adb, s-maccod.ads, sem.adb,\n\tsem_ch2.adb: Minor reformatting\n\n\t* atree.ads, elists.ads, lib.ads, namet.ads, nlists.ads, repinfo.ads,\n\tsinput.ads, stringt.ads, uintp.ads, urealp.ads: Minor clarification to\n\tcomments for Tree_Read and Tree_Write.\n\n\t* exp_attr.ads: Minor reformatting.\n\n\t* comperr.adb (Compiler_Abort): Add specialized message for GAP\n\tversions.\n\n\t* exp_pakd.adb (Create_Packed_Array_Type): Add a guard to check\n\twhether the ancestor type is private, as may be the case with nested\n\tinstantiations.\n\nFrom-SVN: r92852", "tree": {"sha": "cc56ad2870547da06116c5f927b552a16d94614f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc56ad2870547da06116c5f927b552a16d94614f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87b3f81fc94c4a40ddc8ef8107757696fd2accad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87b3f81fc94c4a40ddc8ef8107757696fd2accad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87b3f81fc94c4a40ddc8ef8107757696fd2accad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87b3f81fc94c4a40ddc8ef8107757696fd2accad/comments", "author": null, "committer": null, "parents": [{"sha": "e9906cbf174623cc53b32ad2a0f6d603d6f975b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9906cbf174623cc53b32ad2a0f6d603d6f975b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9906cbf174623cc53b32ad2a0f6d603d6f975b5"}], "stats": {"total": 1306, "additions": 916, "deletions": 390}, "files": [{"sha": "17258902df2e15562f22bb760cb81b528aff8703", "filename": "gcc/ada/comperr.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fcomperr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fcomperr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcomperr.adb?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -95,6 +95,7 @@ package body Comperr is\n \n       Is_Public_Version : constant Boolean := Get_Gnat_Build_Type = Public;\n       Is_FSF_Version    : constant Boolean := Get_Gnat_Build_Type = FSF;\n+      Is_GAP_Version    : constant Boolean := Get_Gnat_Build_Type = GAP;\n \n    --  Start of processing for Compiler_Abort\n \n@@ -314,6 +315,16 @@ package body Comperr is\n                      \"for submitting bugs.\");\n                   End_Line;\n \n+               elsif Is_GAP_Version then\n+                  Write_Str\n+                    (\"| (use plain ASCII or MIME attachment, or FTP \"\n+                     & \"to your GAP account.).\");\n+                  End_Line;\n+\n+                  Write_Str\n+                    (\"| Please use your GAP account to report this.\");\n+                  End_Line;\n+\n                elsif not Is_FSF_Version then\n                   Write_Str\n                     (\"| (use plain ASCII or MIME attachment, or FTP \""}, {"sha": "73afd401c2f43f33051004683cbde353dfc91f5a", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 61, "deletions": 20, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -189,35 +189,76 @@ package body CStand is\n    procedure Create_Operators is\n       Op_Node : Entity_Id;\n \n-      --  Following list has two entries for concatenation, to include\n-      --  explicitly the operation on wide strings.\n+      --  The following tables define the binary and unary operators and their\n+      --  corresponding result type.\n \n       Binary_Ops : constant array (S_Binary_Ops) of Name_Id :=\n-        (Name_Op_Add,      Name_Op_And,   Name_Op_Concat,   Name_Op_Concat,\n-         Name_Op_Divide,   Name_Op_Eq,    Name_Op_Expon,    Name_Op_Ge,\n-         Name_Op_Gt,       Name_Op_Le,    Name_Op_Lt,       Name_Op_Mod,\n-         Name_Op_Multiply, Name_Op_Ne,    Name_Op_Or,       Name_Op_Rem,\n-         Name_Op_Subtract, Name_Op_Xor);\n+\n+         --  There is one entry here for each binary operator, except for the\n+         --  case of concatenation, where there are two entries, one for a\n+         --  String result, and one for a Wide_String result.\n+\n+        (Name_Op_Add,\n+         Name_Op_And,\n+         Name_Op_Concat,\n+         Name_Op_Concat,\n+         Name_Op_Divide,\n+         Name_Op_Eq,\n+         Name_Op_Expon,\n+         Name_Op_Ge,\n+         Name_Op_Gt,\n+         Name_Op_Le,\n+         Name_Op_Lt,\n+         Name_Op_Mod,\n+         Name_Op_Multiply,\n+         Name_Op_Ne,\n+         Name_Op_Or,\n+         Name_Op_Rem,\n+         Name_Op_Subtract,\n+         Name_Op_Xor);\n \n       Bin_Op_Types : constant array (S_Binary_Ops) of Entity_Id :=\n-        (Universal_Integer, Standard_Boolean,\n-         Standard_String,   Standard_Wide_String,\n-         Universal_Integer, Standard_Boolean,\n-         Universal_Integer, Standard_Boolean,\n-         Standard_Boolean,  Standard_Boolean,\n-         Standard_Boolean,  Universal_Integer,\n-         Universal_Integer, Standard_Boolean,\n-         Standard_Boolean,  Universal_Integer,\n-         Universal_Integer, Standard_Boolean);\n+\n+         --  This table has the corresponding result types. The entries are\n+         --  ordered so they correspond to the Binary_Ops array above.\n+\n+        (Universal_Integer,       -- Add\n+         Standard_Boolean,        -- And\n+         Standard_String,         -- Concat (String)\n+         Standard_Wide_String,    -- Concat (Wide_String)\n+         Universal_Integer,       -- Divide\n+         Standard_Boolean,        -- Eq\n+         Universal_Integer,       -- Expon\n+         Standard_Boolean,        -- Ge\n+         Standard_Boolean,        -- Gt\n+         Standard_Boolean,        -- Le\n+         Standard_Boolean,        -- Lt\n+         Universal_Integer,       -- Mod\n+         Universal_Integer,       -- Multiply\n+         Standard_Boolean,        -- Ne\n+         Standard_Boolean,        -- Or\n+         Universal_Integer,       -- Rem\n+         Universal_Integer,       -- Subtract\n+         Standard_Boolean);       -- Xor\n \n       Unary_Ops : constant array (S_Unary_Ops) of Name_Id :=\n-        (Name_Op_Abs, Name_Op_Subtract, Name_Op_Not, Name_Op_Add);\n+\n+         --  There is one entry here for each unary operator\n+\n+        (Name_Op_Abs,\n+         Name_Op_Subtract,\n+         Name_Op_Not,\n+         Name_Op_Add);\n \n       Unary_Op_Types : constant array (S_Unary_Ops) of Entity_Id :=\n-        (Universal_Integer, Universal_Integer,\n-         Standard_Boolean,  Universal_Integer);\n \n-      --  Corresponding to Abs, Minus, Not, and Plus.\n+         --  This table has the corresponding result types. The entries are\n+         --  ordered so they correspond to the Unary_Ops array above.\n+\n+        (Universal_Integer,     -- Abs\n+         Universal_Integer,     -- Subtract\n+         Standard_Boolean,      -- Not\n+         Universal_Integer);    -- Add\n \n    begin\n       for J in S_Binary_Ops loop"}, {"sha": "b94dc3a25c2aa1f9350afe83e72451ba21531b57", "filename": "gcc/ada/elists.ads", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Felists.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Felists.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Felists.ads?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-1998 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -63,12 +63,13 @@ package Elists is\n    --  Lock tables used for element lists before calling backend\n \n    procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using Tree_Read.\n-   --  Note that Initialize should not be called if Tree_Read is used.\n-   --  Tree_Read includes all necessary initialization.\n+   --  Initializes internal tables from current tree file using the relevant\n+   --  Table.Tree_Read routines. Note that Initialize should not be called if\n+   --  Tree_Read is used. Tree_Read includes all necessary initialization.\n \n    procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using Tree_Write\n+   --  Writes out internal tables to current tree file using the relevant\n+   --  Table.Tree_Write routines.\n \n    function Last_Elist_Id return Elist_Id;\n    --  Returns Id of last allocated element list header"}, {"sha": "f3ffa2d13d2e5e1331c92c30918e95a7c8b4d553", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 114, "deletions": 113, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -24,10 +24,10 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package contains the routines to output error messages. They\n---  are basically system independent, however in some environments, e.g.\n---  when the parser is embedded into an editor, it may be appropriate\n---  to replace the implementation of this package.\n+--  This package contains the routines to output error messages. They are\n+--  basically system independent, however in some environments, e.g. when the\n+--  parser is embedded into an editor, it may be appropriate to replace the\n+--  implementation of this package.\n \n with Err_Vars;\n with Erroutc;\n@@ -41,13 +41,13 @@ package Errout is\n \n    Serious_Errors_Detected : Nat renames Err_Vars.Serious_Errors_Detected;\n    --  This is a count of errors that are serious enough to stop expansion,\n-   --  and hence to prevent generation of an object file even if the\n-   --  switch -gnatQ is set.\n+   --  and hence to prevent generation of an object file even if the switch\n+   --  -gnatQ is set.\n \n    Total_Errors_Detected : Nat renames Err_Vars.Total_Errors_Detected;\n-   --  Number of errors detected so far. Includes count of serious errors\n-   --  and non-serious errors, so this value is always greater than or\n-   --  equal to the Serious_Errors_Detected value.\n+   --  Number of errors detected so far. Includes count of serious errors and\n+   --  non-serious errors, so this value is always greater than or equal to\n+   --  the Serious_Errors_Detected value.\n \n    Warnings_Detected : Nat renames Err_Vars.Warnings_Detected;\n    --  Number of warnings detected\n@@ -56,32 +56,32 @@ package Errout is\n    --  Count of configurable run time violations so far. This is used to\n    --  suppress certain cascaded error messages when we know that we may not\n    --  have fully expanded some items, due to high integrity violations (i.e.\n-   --  the use of constructs not permitted by the library in use, or\n-   --  improper constructs in No_Run_Time mode).\n+   --  the use of constructs not permitted by the library in use, or improper\n+   --  constructs in No_Run_Time mode).\n \n    type Compiler_State_Type is (Parsing, Analyzing);\n    Compiler_State : Compiler_State_Type;\n-   --  Indicates current state of compilation. This is put in the Errout\n-   --  spec because it affects the action of the error message handling.\n-   --  In particular, an attempt is made by Errout to suppress cascaded\n-   --  error messages in Parsing mode, but not in the other modes.\n+   --  Indicates current state of compilation. This is put in the Errout spec\n+   --  because it affects the action of the error message handling. In\n+   --  particular, an attempt is made by Errout to suppress cascaded error\n+   --  messages in Parsing mode, but not in the other modes.\n \n    Current_Error_Source_File : Source_File_Index\n      renames Err_Vars.Current_Error_Source_File;\n    --  Id of current messages. Used to post file name when unit changes. This\n    --  is initialized to Main_Source_File at the start of a compilation, which\n-   --  means that no file names will be output unless there are errors in units\n-   --  other than the main unit. However, if the main unit has a pragma\n-   --  Source_Reference line, then this is initialized to No_Source_File,\n-   --  to force an initial reference to the real source file name.\n+   --  means that no file names will be output unless there are errors in\n+   --  units other than the main unit. However, if the main unit has a pragma\n+   --  Source_Reference line, then this is initialized to No_Source_File, to\n+   --  force an initial reference to the real source file name.\n \n    Raise_Exception_On_Error : Nat renames Err_Vars.Raise_Exception_On_Error;\n    --  If this value is non-zero, then any attempt to generate an error\n-   --  message raises the exception Error_Msg_Exception, and the error\n-   --  message is not output. This is used for defending against junk\n-   --  resulting from illegalities, and also for substitution of more\n-   --  appropriate error messages from higher semantic levels. It is\n-   --  a counter so that the increment/decrement protocol nests neatly.\n+   --  message raises the exception Error_Msg_Exception, and the error message\n+   --  is not output. This is used for defending against junk resulting from\n+   --  illegalities, and also for substitution of more appropriate error\n+   --  messages from higher semantic levels. It is a counter so that the\n+   --  increment/decrement protocol nests neatly.\n \n    Error_Msg_Exception : exception renames Err_Vars.Error_Msg_Exception;\n    --  Exception raised if Raise_Exception_On_Error is true\n@@ -135,50 +135,50 @@ package Errout is\n \n    --    Insertion character % (Percent: insert name from Names table)\n    --      The character % is replaced by the text for the name specified by\n-   --      the Name_Id value stored in Error_Msg_Name_1. A blank precedes\n-   --      the name if it is preceded by a non-blank character other than a\n-   --      left parenthesis. The name is enclosed in quotes unless manual\n-   --      quotation mode is set. If the Name_Id is set to No_Name, then\n-   --      no insertion occurs; if the Name_Id is set to Error_Name, then\n-   --      the string <error> is inserted. A second and third % may appear\n-   --      in a single message, similarly replaced by the names which are\n-   --      specified by the Name_Id values stored in Error_Msg_Name_2 and\n-   --      Error_Msg_Name_3. The names are decoded and cased according to\n-   --      the current identifier casing mode.\n+   --      the Name_Id value stored in Error_Msg_Name_1. A blank precedes the\n+   --      name if it is preceded by a non-blank character other than left\n+   --      parenthesis. The name is enclosed in quotes unless manual quotation\n+   --      mode is set. If the Name_Id is set to No_Name, then no insertion\n+   --      occurs; if the Name_Id is set to Error_Name, then the string\n+   --      <error> is inserted. A second and third % may appear in a single\n+   --      message, similarly replaced by the names which are specified by the\n+   --      Name_Id values stored in Error_Msg_Name_2 and Error_Msg_Name_3. The\n+   --      names are decoded and cased according to the current identifier\n+   --      casing mode.\n \n    --    Insertion character $ (Dollar: insert unit name from Names table)\n-   --      The character $ is treated similarly to %, except that the name\n-   --      is obtained from the Unit_Name_Type value in Error_Msg_Unit_1\n-   --      and Error_Msg_Unit_2, as provided by Get_Unit_Name_String in\n-   --      package Uname. Note that this name includes the postfix (spec)\n-   --      or (body) strings. If this postfix is not required, use the\n-   --      normal % insertion for the unit name.\n+   --      The character $ is treated similarly to %, except that the name is\n+   --      obtained from the Unit_Name_Type value in Error_Msg_Unit_1 and\n+   --      Error_Msg_Unit_2, as provided by Get_Unit_Name_String in package\n+   --      Uname. Note that this name includes the postfix (spec) or (body)\n+   --      strings. If this postfix is not required, use the normal %\n+   --      insertion for the unit name.\n \n    --    Insertion character { (Left brace: insert literally from names table)\n-   --      The character { is treated similarly to %, except that the\n-   --      name is output literally as stored in the names table without\n-   --      adjusting the casing. This can be used for file names and in\n-   --      other situations where the name string is to be output unchanged.\n+   --      The character { is treated similarly to %, except that the name is\n+   --      output literally as stored in the names table without adjusting the\n+   --      casing. This can be used for file names and in other situations\n+   --      where the name string is to be output unchanged.\n \n    --    Insertion character * (Asterisk, insert reserved word name)\n-   --      The insertion character * is treated exactly like % except that\n-   --      the resulting name is cased according to the default conventions\n-   --      for reserved words (see package Scans).\n+   --      The insertion character * is treated exactly like % except that the\n+   --      resulting name is cased according to the default conventions for\n+   --      reserved words (see package Scans).\n \n    --    Insertion character & (Ampersand: insert name from node)\n    --      The insertion character & is treated similarly to %, except that\n    --      the name is taken from the Chars field of the given node, and may\n-   --      refer to a child unit name, or a selected component. The casing\n-   --      is, if possible, taken from the original source reference, which\n-   --      is obtained from the Sloc field of the given node or nodes. If no\n-   --      Sloc is available (happens e.g. for nodes in package Standard),\n-   --      then the default case (see Scans spec) is used. The nodes to be\n-   --      used are stored in Error_Msg_Node_1, Error_Msg_Node_2. No insertion\n-   --      occurs for the Empty node, and the Error node results in the\n-   --      insertion of the characters <error>. In addition, if the special\n-   --      global variable Error_Msg_Qual_Level is non-zero, then the\n-   --      reference will include up to the given number of levels of\n-   --      qualification, using the scope chain.\n+   --      refer to a child unit name, or a selected component. The casing is,\n+   --      if possible, taken from the original source reference, which is\n+   --      obtained from the Sloc field of the given node or nodes. If no Sloc\n+   --      is available (happens e.g. for nodes in package Standard), then the\n+   --      default case (see Scans spec) is used. The nodes to be used are\n+   --      stored in Error_Msg_Node_1, Error_Msg_Node_2. No insertion occurs\n+   --      for the Empty node, and the Error node results in the insertion of\n+   --      the characters <error>. In addition, if the special global variable\n+   --      Error_Msg_Qual_Level is non-zero, then the reference will include\n+   --      up to the given number of levels of qualification, using the scope\n+   --      chain.\n \n    --    Insertion character # (Pound: insert line number reference)\n    --      The character # is replaced by the string indicating the source\n@@ -188,28 +188,29 @@ package Errout is\n    --        for locations in current file:  at line nnn:ccc\n    --        for locations in other files:   at filename:nnn:ccc\n    --\n-   --      By convention, the # insertion character is only used at the end\n-   --      of an error message, so the above strings only appear as the last\n+   --      By convention, the # insertion character is only used at the end of\n+   --      an error message, so the above strings only appear as the last\n    --      characters of an error message.\n \n    --    Insertion character } (Right brace: insert type reference)\n    --      The character } is replaced by a string describing the type\n    --      referenced by the entity whose Id is stored in Error_Msg_Node_1.\n    --      the string gives the name or description of the type, and also\n-   --      where appropriate the location of its declaration. Special\n-   --      cases like \"some integer type\" are handled appropriately. Only\n-   --      one } is allowed in a message, since there is not enough room\n-   --      for two (the insertion can be quite long, including a file name)\n-   --      In addition, if the special global variable Error_Msg_Qual_Level\n-   --      is non-zero, then the reference will include up to the given\n-   --      number of levels of qualification, using the scope chain.\n+   --      where appropriate the location of its declaration. Special cases\n+   --      like \"some integer type\" are handled appropriately. Only one } is\n+   --      allowed in a message, since there is not enough room for two (the\n+   --      insertion can be quite long, including a file name) In addition, if\n+   --      the special global variable Error_Msg_Qual_Level is non-zero, then\n+   --      the reference will include up to the given number of levels of\n+   --      qualification, using the scope chain.\n \n    --    Insertion character @ (At: insert column number reference)\n    --      The character @ is replaced by null if the RM_Column_Check mode is\n    --      off (False). If the switch is on (True), then @ is replaced by the\n-   --      text string \" in column nnn\" where nnn is the decimal representation\n-   --      of the column number stored in Error_Msg_Col plus one (the plus one\n-   --      is because the number is stored 0-origin and displayed 1-origin).\n+   --      text string \" in column nnn\" where nnn is the decimal\n+   --      representation of the column number stored in Error_Msg_Col plus\n+   --      one (the plus one is because the number is stored 0-origin and\n+   --      displayed 1-origin).\n \n    --    Insertion character ^ (Carret: insert integer value)\n    --      The character ^ is replaced by the decimal conversion of the Uint\n@@ -235,12 +236,12 @@ package Errout is\n    --      a warning instead of a normal error message, and the text of the\n    --      message will be preceded by \"Warning:\" instead of \"Error:\" The\n    --      handling of warnings if further controlled by the Warning_Mode\n-   --      option (-w switch), see package Opt for further details, and\n-   --      also by the current setting from pragma Warnings. This pragma\n-   --      applies only to warnings issued from the semantic phase (not\n-   --      the parser), but currently all relevant warnings are posted\n-   --      by the semantic phase anyway. Messages starting with (style)\n-   --      are also treated as warning messages.\n+   --      option (-w switch), see package Opt for further details, and also\n+   --      by the current setting from pragma Warnings. This pragma applies\n+   --      only to warnings issued from the semantic phase (not the parser),\n+   --      but currently all relevant warnings are posted by the semantic\n+   --      phase anyway. Messages starting with (style) are also treated as\n+   --      warning messages.\n \n    --    Insertion character A-Z (Upper case letter: Ada reserved word)\n    --      If two or more upper case letters appear in the message, they are\n@@ -249,10 +250,10 @@ package Errout is\n    --      quotes are added unless manual quotation mode is currently set.\n \n    --    Insertion character ` (Backquote: set manual quotation mode)\n-   --      The backquote character always appears in pairs. Each backquote\n-   --      of the pair is replaced by a double quote character. In addition,\n-   --      Any reserved keywords, or name insertions between these backquotes\n-   --      are not surrounded by the usual automatic double quotes. See the\n+   --      The backquote character always appears in pairs. Each backquote of\n+   --      the pair is replaced by a double quote character. In addition, Any\n+   --      reserved keywords, or name insertions between these backquotes are\n+   --      not surrounded by the usual automatic double quotes. See the\n    --      section below on manual quotation mode for further details.\n \n    --    Insertion character ' (Quote: literal character)\n@@ -264,17 +265,17 @@ package Errout is\n \n    --    Insertion character \\ (Backslash: continuation message)\n    --      Indicates that the message is a continuation of a message\n-   --      previously posted. This is used to ensure that such groups\n-   --      of messages are treated as a unit. The \\ character must be\n-   --      the first character of the message text.\n+   --      previously posted. This is used to ensure that such groups of\n+   --      messages are treated as a unit. The \\ character must be the first\n+   --      character of the message text.\n \n    --    Insertion character | (vertical bar, non-serious error)\n    --      By default, error messages (other than warning messages) are\n-   --      considered to be fatal error messages which prevent expansion\n-   --      or generation of code in the presence of the -gnatQ switch.\n-   --      If the insertion character | appears, the message is considered\n-   --      to be non-serious, and does not cause Serious_Errors_Detected\n-   --      to be incremented (so expansion is not prevented by such a msg).\n+   --      considered to be fatal error messages which prevent expansion or\n+   --      generation of code in the presence of the -gnatQ switch. If the\n+   --      insertion character | appears, the message is considered to be\n+   --      non-serious, and does not cause Serious_Errors_Detected to be\n+   --      incremented (so expansion is not prevented by such a msg).\n \n    ----------------------------------------\n    -- Specialization of Messages for VMS --\n@@ -458,11 +459,11 @@ package Errout is\n       Ploc : Source_Ptr;\n    end record;\n \n-   --  Note: Ploc points to the terminating semicolon in the List_Off and\n-   --  Page cases, and to the pragma keyword for List_On. In the case of\n-   --  a pragma List_Off, a List_On entry is also made in the table,\n-   --  pointing to the pragma keyword. This ensures that, as required,\n-   --  a List (Off) pragma is listed even in list off mode.\n+   --  Note: Ploc points to the terminating semicolon in the List_Off and Page\n+   --  cases, and to the pragma keyword for List_On. In the case of a pragma\n+   --  List_Off, a List_On entry is also made in the table, pointing to the\n+   --  pragma keyword. This ensures that, as required, a List (Off) pragma is\n+   --  listed even in list off mode.\n \n    package List_Pragmas is new Table.Table (\n      Table_Component_Type => List_Pragma_Record,\n@@ -529,13 +530,13 @@ package Errout is\n \n    procedure Error_Msg_N (Msg : String; N : Node_Or_Entity_Id);\n    --  Output a message at the Sloc of the given node. This routine can be\n-   --  called from the parser or the semantic analyzer, although the call\n-   --  from the latter is much more common (and is the most usual way of\n-   --  generating error messages from the analyzer). The message text may\n-   --  contain a single & insertion, which will reference the given node.\n-   --  The message is suppressed if the node N already has a message posted,\n-   --  or if it is a warning and warnings and N is an entity node for which\n-   --  warnings are suppressed.\n+   --  called from the parser or the semantic analyzer, although the call from\n+   --  the latter is much more common (and is the most usual way of generating\n+   --  error messages from the analyzer). The message text may contain a\n+   --  single & insertion, which will reference the given node. The message is\n+   --  suppressed if the node N already has a message posted, or if it is a\n+   --  warning and warnings and N is an entity node for which warnings are\n+   --  suppressed.\n \n    procedure Error_Msg_F (Msg : String; N : Node_Id);\n    --  Similar to Error_Msg_N except that the message is placed on the\n@@ -547,9 +548,9 @@ package Errout is\n       E   : Node_Or_Entity_Id);\n    --  Output a message at the Sloc of the given node N, with an insertion of\n    --  the name from the given entity node E. This is used by the semantic\n-   --  routines, where this is a common error message situation. The Msg\n-   --  text will contain a & or } as usual to mark the insertion point.\n-   --  This routine can be called from the parser or the analyzer.\n+   --  routines, where this is a common error message situation. The Msg text\n+   --  will contain a & or } as usual to mark the insertion point. This\n+   --  routine can be called from the parser or the analyzer.\n \n    procedure Error_Msg_FE\n      (Msg : String;\n@@ -623,10 +624,10 @@ package Errout is\n    --  (treat warnings as errors) mode.\n \n    procedure Error_Msg_CRT (Feature : String; N : Node_Id);\n-   --  Posts a non-fatal message on node N saying that the feature\n-   --  identified by the Feature argument is not supported in either\n-   --  configurable run-time mode or no run-time mode (as appropriate).\n-   --  In the former case, the name of the library is output if available.\n+   --  Posts a non-fatal message on node N saying that the feature identified\n+   --  by the Feature argument is not supported in either configurable\n+   --  run-time mode or no run-time mode (as appropriate). In the former case,\n+   --  the name of the library is output if available.\n \n    procedure dmsg (Id : Error_Msg_Id) renames Erroutc.dmsg;\n    --  Debugging routine to dump an error message\n@@ -642,13 +643,13 @@ package Errout is\n    procedure Set_Identifier_Casing\n      (Identifier_Name : System.Address;\n       File_Name       : System.Address);\n-   --  The identifier is a null terminated string that represents the name\n-   --  of an identifier appearing in the source program. File_Name is a null\n+   --  The identifier is a null terminated string that represents the name of\n+   --  an identifier appearing in the source program. File_Name is a null\n    --  terminated string giving the corresponding file name for the identifier\n    --  as obtained from the front end by the use of Full_Debug_Name to the\n-   --  source file referenced by the corresponding source location value.\n-   --  On return, the name is in Name_Buffer, null terminated with Name_Len\n-   --  set. This name is the identifier name as passed, cased according to\n-   --  the default identifier casing for the given file.\n+   --  source file referenced by the corresponding source location value. On\n+   --  return, the name is in Name_Buffer, null terminated with Name_Len set.\n+   --  This name is the identifier name as passed, cased according to the\n+   --  default identifier casing for the given file.\n \n end Errout;"}, {"sha": "9cf583222c37fc31aeec181398f38867c9b4017e", "filename": "gcc/ada/exp_attr.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fexp_attr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fexp_attr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.ads?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--            Copyright (C) 1992-2005, Free Software Foundation, Inc.       --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,5 +29,7 @@\n with Types; use Types;\n \n package Exp_Attr is\n-   procedure Expand_N_Attribute_Reference       (N : Node_Id);\n+\n+   procedure Expand_N_Attribute_Reference (N : Node_Id);\n+\n end Exp_Attr;"}, {"sha": "1608e437214722ffbfd985d12a2300be2360c215", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -851,12 +851,15 @@ package body Exp_Pakd is\n \n       --  If our immediate ancestor subtype is constrained, and it already\n       --  has a packed array type, then just share the same type, since the\n-      --  bounds must be the same.\n+      --  bounds must be the same. If the ancestor is not an array type but\n+      --  a private type, as can happen with multiple instantiations, create\n+      --  a new packed type, to avoid privacy issues.\n \n       if Ekind (Typ) = E_Array_Subtype then\n          Ancest := Ancestor_Subtype (Typ);\n \n          if Present (Ancest)\n+           and then Is_Array_Type (Ancest)\n            and then Is_Constrained (Ancest)\n            and then Present (Packed_Array_Type (Ancest))\n          then"}, {"sha": "0fa31b944363e14e562d7e474d38b1c0fafe7e84", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 581, "deletions": 125, "changes": 706, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -89,19 +89,19 @@\n @set EDITION GNAT\n \n @ifset unw\n-@set PLATFORM Unix and Windows\n+@set PLATFORM\n @set FILE gnat_ugn_unw\n @end ifset\n \n @ifset vms\n-@set PLATFORM OpenVMS Alpha\n+@set PLATFORM OpenVMS\n @set FILE gnat_ugn_vms\n @end ifset\n \n-@settitle @value{EDITION} User's Guide for Native Platforms / @value{PLATFORM}\n+@settitle @value{EDITION} User's Guide @value{PLATFORM}\n @dircategory GNU Ada tools\n @direntry\n-* @value{EDITION} User's Guide (@value{FILE}) for Native Platforms / @value{PLATFORM}\n+* @value{EDITION} User's Guide (@value{FILE}) @value{PLATFORM}\n @end direntry\n \n @include gcc-common.texi\n@@ -127,7 +127,7 @@ A copy of the license is included in the section entitled\n @titlepage\n \n @title @value{EDITION} User's Guide\n-@center @titlefont{for Native Platforms}\n+@c @center @titlefont{for Native Platforms}\n @sp 1\n \n @flushright\n@@ -138,7 +138,7 @@ A copy of the license is included in the section entitled\n @subtitle GNAT, The GNU Ada 95 Compiler\n @subtitle GCC version @value{version-GCC}\n \n-@author Ada Core Technologies, Inc.\n+@author AdaCore\n \n @page\n @vskip 0pt plus 1filll\n@@ -152,14 +152,14 @@ A copy of the license is included in the section entitled\n @top @value{EDITION} User's Guide\n \n @noindent\n-@value{EDITION} User's Guide for Native Platforms / @value{PLATFORM}\n+@value{EDITION} User's Guide @value{PLATFORM}\n \n @noindent\n GNAT, The GNU Ada 95 Compiler@*\n GCC version @value{version-GCC}@*\n \n @noindent\n-Ada Core Technologies, Inc.@*\n+AdaCore@*\n \n @menu\n * About This Guide::\n@@ -607,6 +607,9 @@ Compatibility and Porting Guide\n * Compatibility with DEC Ada 83::\n * Compatibility with Other Ada 95 Systems::\n * Representation Clauses::\n+@ifset vms\n+* Transitioning from Alpha to Integrity OpenVMS::\n+@end ifset\n \n @ifset unw\n Microsoft Windows Topics\n@@ -633,9 +636,10 @@ Microsoft Windows Topics\n \n @noindent\n @ifset vms\n-This guide describes the use of of @value{EDITION},\n+This guide describes the use of @value{EDITION},\n a full language compiler for the Ada\n-95 programming language, implemented on HP OpenVMS Alpha platforms.\n+95 programming language, implemented on HP's Alpha and\n+Integrity (ia64) OpenVMS platforms.\n @end ifset\n @ifclear vms\n This guide describes the use of @value{EDITION},\n@@ -4680,6 +4684,17 @@ of the renamed packages (like @code{Text_IO}) and use of package\n would generate many annoying positive warnings. The default is that\n such warnings are not generated.\n \n+In addition to the above cases, warnings are also generated for\n+GNAT features that have been provided in past versions but which\n+have been superceded (typically by features in the new Ada standard).\n+For example, @code{pragma Ravenscar} will be flagged since its\n+function is replaced by @code{pragma Profile(Ravenscar)}.\n+\n+Note that this warning option functions differently from the\n+restriction @code{No_Obsolescent_Features} in two respects.\n+First, the restriction applies only to annex J features.\n+Second, the restriction does flag uses of package @code{ASCII}.\n+\n @item -gnatwJ\n @emph{Suppress warnings on obsolescent features (Annex J).}\n @cindex @option{-gnatwJ} (@code{gcc})\n@@ -6654,7 +6669,7 @@ The content of the @file{ada_source_path} file which is part of the GNAT\n installation tree and is used to store standard libraries such as the\n GNAT Run Time Library (RTL) source files.\n @ifclear vms\n-@ref{Installing the library}\n+@ref{Installing a library}\n @end ifclear\n @end enumerate\n \n@@ -7572,7 +7587,7 @@ installation tree and is used to store standard libraries such as the\n GNAT Run Time Library (RTL) unless the switch @option{-nostdlib} is\n specified.\n @ifclear vms\n-@ref{Installing the library}\n+@ref{Installing a library}\n @end ifclear\n @end enumerate\n \n@@ -15470,9 +15485,8 @@ $ gnatmetric [@var{switches}] @var{filename} [@var{-cargs gcc_switches}]\n where\n @itemize @bullet\n @item\n-@var{switches} is an optional sequence of switches specifying\n-the set of metrics to compute and defining the destination for the\n-output information\n+@var{switches} specify the metrics to compute and define the destination for\n+the output\n \n @item\n @var{filename} is the name (including the extension) of the source file to\n@@ -15481,7 +15495,7 @@ command are allowed.  The file name may contain path information; in this case\n it does not have to follow the GNAT file naming rules\n \n @item\n-@option{-cargs gcc_switches} is a list of switches that are valid switches for\n+@option{-cargs gcc_switches} is a list of switches for\n @command{gcc}. They will be passed on to all compiler invocations made by\n @command{gnatmetric} to generate the ASIS trees. Here you can provide\n @option{-I} switches to form the source search path,\n@@ -15513,8 +15527,8 @@ The following subsections describe the various switches accepted by\n @cindex Output file control in @command{gnatmetric}\n \n @noindent\n-@command{gnatmetric} has two output formats. It can generate the output in\n-textual (human-readable) form, and also as XML. By default only textual\n+@command{gnatmetric} has two output formats. It can generate a\n+textual (human-readable) form, and also XML. By default only textual\n output is generated.\n \n When generating the output in textual form, @command{gnatmetric} creates\n@@ -15534,7 +15548,7 @@ Some of the computed metrics are summed over the units passed to\n By default this information is sent to @file{stdout}, but a file\n can be specified with the @option{-og} switch.\n \n-The following switches may be used to control the @command{gnatmetric} output:\n+The following switches control the @command{gnatmetric} output:\n \n @table @option\n @cindex @option{^-x^/XML^} (@command{gnatmetric})\n@@ -15551,11 +15565,12 @@ Put textual files with detailed metrics into @var{output_dir}\n \n @cindex @option{^-o^/SUFFIX_DETAILS^} (@command{gnatmetric})\n @item ^-o @var{file_suffix}^/SUFFIX_DETAILS=@var{file_suffix}^\n-Use @var{file_suffix} to form the name of the file for the detailed metrics.\n+Use @var{file_suffix}, instead of ^@file{.metrix}^@file{$METRIX}^\n+in the name of the output file.\n \n @cindex @option{^-og^/GLOBAL_OUTPUT^} (@command{gnatmetric})\n @item ^-og @var{file_name}^/GLOBAL_OUTPUT=@var{file_name}^\n-Put global metrics info into @var{file_name}\n+Put global metrics into @var{file_name}\n \n @cindex @option{^-ox^/XML_OUTPUT^} (@command{gnatmetric})\n @item ^-ox @var{file_name}^/XML_OUTPUT=@var{file_name}^\n@@ -15583,15 +15598,13 @@ compute metrics for:\n \n @itemize @bullet\n @item\n-a library item or a subunit into a compilation unit;\n+a library item or a subunit in a compilation unit;\n \n @item\n all kinds of bodies;\n \n @item\n declarations of tasks and protected types and objects, package and generic\n-\n-@item\n package declarations;\n \n @end itemize\n@@ -15636,35 +15649,35 @@ format effectors (blank lines)\n @end itemize\n \n If @command{gnatmetric} is invoked on more than one source file, it sums the\n-values of the line metrics for all the files being processed and then prints\n-out the cumulative results.\n+values of the line metrics for all the files being processed and then\n+generates the cumulative results.\n \n By default, all the line metrics are computed and reported. You can use the\n following switches to select the specific line metrics to be computed and\n reported (if any of these parameters is set, only explicitly specified line\n-metrics are computed)\n+metrics are computed).\n \n @table @option\n @cindex @option{^-la^/LINES_ALL^} (@command{gnatmetric})\n @item ^-la^/LINES_ALL^\n-Compute and print out the number of all lines\n+The number of all lines\n \n @cindex @option{^-lcode^/CODE_LINES^} (@command{gnatmetric})\n @item ^-lcode^/CODE_LINES^\n-Compute and print out the number of code lines\n+The number of code lines\n \n @cindex @option{^-lcomm^/COMENT_LINES^} (@command{gnatmetric})\n @item ^-lcomm^/COMENT_LINES^\n-Compute and print out the number of comment lines\n+The number of comment lines\n \n @cindex @option{^-leol^/MIXED_CODE_COMMENTS^} (@command{gnatmetric})\n @item ^-leol^/MIXED_CODE_COMMENTS^\n-Compute and print out the number of code lines containing\n+The number of code lines containing\n end-of-line comments\n \n @cindex @option{^-lb^/BLANK_LINES^} (@command{gnatmetric})\n @item ^-lb^/BLANK_LINES^\n- Compute and print out the number of blank lines\n+The number of blank lines\n \n @end table\n \n@@ -15673,14 +15686,15 @@ end-of-line comments\n @cindex Syntax metrics control in @command{gnatmetric}\n \n @noindent\n-For any program unit, @command{gnatmetri}c computes the total number of\n+For any program unit, @command{gnatmetric} computes the total number of\n declarations and the total number of statements.  The sum of all the statements\n-and all the declarations is considered as @emph{LSLOC} (Logical Source\n-Lines Of Code)\n+and all the declarations is considered as @emph{LSLOC} (``Logical Source\n+Lines Of Code'')\n and is reported as a separate metric.\n \n-For any body and any task, protected, package and generic package declaration a\n-maximal nesting level of nested program units is computed. According to\n+For any body and any task, protected, package and generic package declaration\n+the maximal static nesting level of nested program units is computed.\n+According to\n @cite{Ada 95 Language Reference Manual}, 10.1(1), ``A program unit is either a\n package, a task unit, a protected unit, a\n protected entry, a generic unit, or an explicitly declared subprogram other\n@@ -15724,21 +15738,20 @@ types are counted and reported separately:\n \n @itemize @bullet\n @item\n-abstract types;\n+Abstract types\n \n @item\n-tagged types (abstract, non-abstract, private, non-private). Type\n-extensions are @emph{not} counted as tagged types; the idea is to count\n-possible roots for classes of extendable types;\n+Root tagged types (abstract, non-abstract, private, non-private). Type\n+extensions are @emph{not} counted\n \n @item\n-private types (including private extensions);\n+Private types (including private extensions)\n \n @item\n-task types;\n+Task types\n \n @item\n-protected types.\n+Protected types\n \n @end itemize\n \n@@ -15761,39 +15774,35 @@ if any of these is set, only the explicitly specified metrics are computed.\n @table @option\n @cindex @option{^-ed^/DECLARATION_TOTAL^} (@command{gnatmetric})\n @item ^-ed^/DECLARATION_TOTAL^\n-Compute and print out the total number of declarations\n+The total number of declarations\n \n @cindex @option{^-es^/STATEMENT_TOTAL^} (@command{gnatmetric})\n @item ^-es^/STATEMENT_TOTAL^\n-Compute and print out the total number of statements\n+The total number of statements\n \n @cindex @option{^-eps^/^} (@command{gnatmetric})\n @item ^-eps^/INT_SUBPROGRAMS^\n-Compute and print out the number of public subprograms in a\n-compilation unit\n+The number of public subprograms in a compilation unit\n \n @cindex @option{^-eas^/SUBPROGRAMS_ALL^} (@command{gnatmetric})\n @item ^-eas^/SUBPROGRAMS_ALL^\n-Compute and print out the number of all the subprograms in a\n-compilation unit\n+The number of all the subprograms in a compilation unit\n \n @cindex @option{^-ept^/INT_TYPES^} (@command{gnatmetric})\n @item ^-ept^/INT_TYPES^\n-Compute and print out the number of public types in a compilation\n-unit\n+The number of public types in a compilation unit\n \n @cindex @option{^-eat^/TYPES_ALL^} (@command{gnatmetric})\n @item ^-eat^/TYPES_ALL^\n-Compute and print out the number of all the types in a compilation\n-unit\n+The number of all the types in a compilation unit\n \n @cindex @option{^-enu^/PROGRAM_NESTING_MAX^} (@command{gnatmetric})\n @item ^-enu^/PROGRAM_NESTING_MAX^\n-Compute and print out the maximal program unit nesting level\n+The maximal program unit nesting level\n \n @cindex @option{^-ec^/CONSTRUCT_NESTING_MAX^} (@command{gnatmetric})\n @item ^-ec^/CONSTRUCT_NESTING_MAX^\n-Compute and print out the maximal construct nesting level\n+The maximal construct nesting level\n \n @end table\n \n@@ -15842,7 +15851,7 @@ cyclomatic complexity, which is the sum of these two values.\n \n @noindent\n When computing cyclomatic and essential complexity, @command{gnatmetric} skips\n-the code in the exception handlers and in all the nested program units\n+the code in the exception handlers and in all the nested program units.\n \n By default, all the complexity metrics are computed and reported.\n For more finely-grained control you can use\n@@ -15878,8 +15887,8 @@ Additional @command{gnatmetric} switches are as follows:\n Take the argument source files from the specified file. This file should be an\n ordinary textual file containing file names separated by spaces or\n line breaks. You can use this switch more then once in the same call to\n-@command{gnatmetric}. You also can combine this switch with explicit list of\n-files.\n+@command{gnatmetric}. You also can combine this switch with\n+an explicit list of files.\n \n @item ^-v^/VERBOSE^\n @cindex @option{^-v^/VERBOSE^} (@code{gnatmetric})\n@@ -16864,9 +16873,8 @@ where @code{gnatclean} was invoked.\n @cindex Library, building, installing, using\n \n @noindent\n-This chapter describes how to build and use\n-libraries with GNAT, and also shows how to recompile the GNAT run-time library.\n-You should be familiar with the\n+This chapter describes how to build and use libraries with GNAT, and also shows\n+how to recompile the GNAT run-time library. You should be familiar with the\n Project Manager facility (see @ref{GNAT Project Manager}) before reading this\n chapter.\n \n@@ -16889,50 +16897,50 @@ or, on platforms that support it, be dynamically linked, in which case\n its code is shared by all applications making use of this library.\n \n GNAT supports both types of libraries.\n-In the static case, the compiled code can be provided in different ways.\n-The simplest approach is to provide directly the\n-set of objects resulting from compilation of the library source files.\n-Alternatively, you can group the objects into an archive using whatever\n-commands are provided by the operating system. For the latter case,\n-the objects are grouped into a shared library.\n-\n-In the GNAT environment, a library has two types of components:\n+In the static case, the compiled code can be provided in different ways. The\n+simplest approach is to provide directly the set of objects resulting from\n+compilation of the library source files. Alternatively, you can group the\n+objects into an archive using whatever commands are provided by the operating\n+system. For the latter case, the objects are grouped into a shared library.\n+\n+In the GNAT environment, a library has three types of components:\n @itemize @bullet\n @item\n Source files.\n @item\n-Compiled code and @file{ALI} files.\n+@file{ALI} files.\n See @ref{The Ada Library Information Files}.\n+@item\n+Object files, an archive or a shared library.\n @end itemize\n \n @noindent\n-A GNAT library may either completely expose its source files to the\n-compilation context of the user's application.\n-Alternatively, it may expose\n-a limited subset of its source files, called @emph{interface units},\n-in which case the library is referred to as a @emph{stand-alone library}\n-(see @ref{Stand-alone Ada Libraries}). In addition, GNAT fully supports\n-foreign libraries, which are only available in the object format.\n+A GNAT library may expose all its source files, which is useful for\n+documentation purposes. Alternatively, it may expose only the units needed by\n+an external user to make use of the library. That is to say, the specs\n+expliciting the library services along with all the units needed to compile\n+those specs, which can include generic bodies or any body implementing an\n+inlined routine. In the case of @emph{stand-alone libraries} those exposed\n+units are called @emph{interface units} (see @ref{Stand-alone Ada Libraries}).\n \n-All compilation units comprising\n-an application are elaborated, in an order partially defined by Ada language\n-semantics.\n-Where possible, GNAT provides facilities\n-to ensure that compilation units of a library are automatically elaborated;\n-however, there are cases where this must be responsibility of a user. This will\n-be addressed in greater detail below.\n+All compilation units comprising an application, including those in a library,\n+need to be elaborated in an order partially defined by Ada's semantics. GNAT\n+computes the elaboration order from the @file{ALI} files and this is why they\n+constitute a mandatory part of GNAT libraries. Except in the case of\n+@emph{stand-alone libraries}, where a specific library elaboration routine is\n+produced independantly of the application(s) using the library.\n \n @node General Ada Libraries\n @section General Ada Libraries\n \n @menu\n-* Building the library::\n-* Installing the library::\n-* Using the library::\n+* Building a library::\n+* Installing a library::\n+* Using a library::\n @end menu\n \n-@node Building the library\n-@subsection Building the library\n+@node Building a library\n+@subsection Building a library\n \n @noindent\n The easiest way to build a library is to use the Project Manager,\n@@ -16945,7 +16953,7 @@ control different aspects of library configuration, additional optional\n project-level attributes can be specified:\n @table @code\n @item Library_Kind\n-This attribute controls whether the library is to be static or shared\n+This attribute controls whether the library is to be static or dynamic\n \n @item Library_Version\n This attribute specifies what is the library version; this value is used\n@@ -16966,15 +16974,29 @@ or are not up to date, assembly of the library archive, and installation of\n the library, i.e. copying associated source, object and @file{ALI} files\n to the specified location.\n \n-It is not entirely trivial to correctly perform all the steps required to\n+Here is a simple library project file:\n+@smallexample @c ada\n+project My_Lib is\n+   for Source_Dirs use (\"src1\", \"src2\");\n+   for Object_Dir use \"obj\";\n+   for Library_Name use \"mylib\";\n+   for Library_Dir use \"lib\";\n+   for Library_Kind use \"dynamic\";\n+end My_lib;\n+@end smallexample\n+and the compilation command to build and install the library:\n+@smallexample @c ada\n+  $ gnatmake -Pmy_lib\n+@end smallexample\n+\n+It is not entirely trivial to perform manually all the steps required to\n produce a library. We recommend that you use the GNAT Project Manager\n for this task. In special cases where this is not desired, the necessary\n steps are discussed below.\n \n There are various possibilities for compiling the units that make up the\n-library: for example with a Makefile (see @ref{Using the GNU make Utility})\n-or with a conventional script.\n-For simple libraries, it is also possible to create a\n+library: for example with a Makefile (see @ref{Using the GNU make Utility}) or\n+with a conventional script. For simple libraries, it is also possible to create\n dummy main program which depends upon all the packages that comprise the\n interface of the library. This dummy main program can then be given to\n @command{gnatmake}, which will ensure that all necessary objects are built.\n@@ -17023,28 +17045,62 @@ $ chmod -w *.ali\n \n @noindent\n Please note that the library must have a name of the form @file{libxxx.a} or\n-@file{libxxx.so} in order to be accessed by the directive @option{-lxxx}\n-at link time.\n+@file{libxxx.so} (or @file{libxxx.dll} on Windows) in order to be accessed by\n+the directive @option{-lxxx} at link time.\n \n-@node Installing the library\n-@subsection Installing the library\n+@node Installing a library\n+@subsection Installing a library\n \n @noindent\n-In the GNAT model, installing a library consists in copying into a specific\n-location the files that make up this library. When the library is built using\n-projects, it is automatically installed in the location specified in the\n-project by means of the attribute @code{Library_Dir},\n-otherwise the user must specify the destination.\n-GNAT also supports installing the sources in a\n-different directory from the other files (@file{ALI}, objects, archives)\n-since the source path and the object path can be specified separately.\n+When using project files, installing libraries is part of the library build\n+process and thus, no further action is needed in order to make use of the\n+libraries that are built as part of the general application build. A usable\n+version of the library is installed in the directory specified by the\n+@code{Library_Dir} attribute of the library project file.\n \n-The system administrator can place general purpose libraries in the default\n-compiler paths, by specifying the libraries' location in the configuration\n-files @file{ada_source_path} and @file{ada_object_path}.\n-These configuration files must be located in the GNAT\n-installation tree at the same place as the gcc spec file. The location of\n-the gcc spec file can be determined as follows:\n+One may want to install a library in a context different from where the library\n+is built. This is, for instance, the case of third party suppliers, who whish\n+to distribute a library in binary form where the user is not expected to be\n+able to recompile the library. The simplest option, in this case, is to provide\n+project file slightly different from the one used to build the library which\n+makes use of the @code{externally_built} attribute. For instance the project\n+file used to build the library in the previous section can be changed into the\n+following one when the library is installed:\n+\n+@smallexample @c ada\n+project My_Lib is\n+   for Source_Dirs use (\"src1\", \"src2\");\n+   for Library_Name use \"mylib\";\n+   for Library_Dir use \"lib\";\n+   for Library_Kind use \"dynamic\";\n+   for Externally_Built use \"true\";\n+end My_lib;\n+@end smallexample\n+\n+This project file assumes that the directories \"src1\", \"src2\" & \"lib\" exist in\n+the directory containing the project file. The @code{externally_built}\n+attribute makes it clear to the GNAT builder that it should not attempt to\n+recompile any of the units from this library. It allows the library provider to\n+restrict the source set to the minimum necessary for clients to make use of the\n+library as described in the first section of this chapter. It is the\n+responsability of the library provider to install the necessary sources, ALI\n+files & libraries in the directories mentioned in the project file. For\n+convenience to the user, it is recommended to install the user's library\n+project file in a location that will be searched automatically by the GNAT\n+builder. That is to say, any directory refernced in the @code{ADA_LIBRARY_PATH}\n+environmenbt variable (see @ref{Importing Projects}), or in the default GNAT\n+library location that can be queried with @code{gnatls -v} and is usually of\n+the form $gnat_install_root/lib/gnat.\n+\n+When project files are not an option, it is also possible, but not recommended,\n+to install the library so that the sources needed to use the library be on the\n+Ada source path and the ALI files & libraries be on the Ada Object path (see\n+@ref{Search Paths and the Run-Time Library (RTL)}. Alternatively, he system\n+administrator can place general purpose libraries in the default compiler\n+paths, by specifying the libraries' location in the configuration files\n+@file{ada_source_path} and @file{ada_object_path}. These configuration files\n+must be located in the GNAT installation tree at the same place as the gcc spec\n+file. The location of the gcc spec file can be determined as follows:\n @smallexample\n $ gcc -v\n @end smallexample\n@@ -17080,15 +17136,20 @@ library, by reordering the lines in the configuration files. In general, a\n library must be installed before the GNAT library if it redefines\n any part of it.\n \n-@node Using the library\n-@subsection Using the library\n+@node Using a library\n+@subsection Using a library\n \n-@noindent\n-Once again, the project facility greatly simplifies the addition of libraries\n-to the compilation. If the project file for an application lists a library\n-project in its @code{with} clause, the Project Manager will ensure that the\n-library files are consistent, and that they are considered during the\n-compilation and linking of the application.\n+@noindent Once again, the project facility greatly simplifies the use of\n+libraries. In this context, using a library is just a matter of adding a\n+@code{with} clause in the user project. For instance, to make use of the\n+library \"My_Lib\" used as an examples in earlier sections, is just a matter of\n+writing something like:\n+@smallexample @c ada\n+with \"my_lib\";\n+project My_Proj is\n+  ...\n+end My_Proj;\n+@end smallexample\n \n Even if you have a third-party, non-Ada library, you can still use GNAT's\n Project Manager facility to provide a wrapper for it. The following project for\n@@ -17288,7 +17349,7 @@ read-only.\n \n @noindent\n Using SALs is not different from using other libraries\n-(see @ref{Using the library}).\n+(see @ref{Using a library}).\n \n @node Creating a Stand-alone Library to be used in a non-Ada context\n @subsection Creating a Stand-alone Library to be used in a non-Ada context\n@@ -18817,8 +18878,13 @@ $ RUN/DEBUG <PROGRAM_NAME>\n @cindex Debugging\n \n @noindent\n-This chapter discusses how to debug Ada programs. An incorrect Ada program\n-may be handled in three ways by the GNAT compiler:\n+This chapter discusses how to debug Ada programs.\n+@ifset vms\n+It applies to the Alpha OpenVMS platform;\n+the debugger for Integrity OpenVMS is scheduled for a subsequent release.\n+@end ifset\n+\n+An incorrect Ada program may be handled in three ways by the GNAT compiler:\n \n @enumerate\n @item\n@@ -26136,9 +26202,12 @@ applications developed in other Ada environments.\n @menu\n * Compatibility with Ada 83::\n * Implementation-dependent characteristics::\n-* Compatibility with DEC Ada 83::\n * Compatibility with Other Ada 95 Systems::\n * Representation Clauses::\n+* Compatibility with DEC Ada 83::\n+@ifset vms\n+* Transitioning from Alpha to Integrity OpenVMS::\n+@end ifset\n @end menu\n \n @node Compatibility with Ada 83\n@@ -26642,6 +26711,393 @@ attributes are recognized, although only a subset of them can sensibly\n be implemented.  The description of pragmas in this reference manual\n indicates whether or not they are applicable to non-VMS systems.\n \n+\n+@ifset vms\n+@node Transitioning from Alpha to Integrity OpenVMS\n+@section Transitioning from Alpha to Integrity OpenVMS\n+\n+@menu\n+* Introduction to transitioning::\n+* Migration of 32 bit code::\n+* Taking advantage of 64 bit addressing::\n+* Technical details::\n+@end menu\n+\n+@node Introduction to transitioning\n+@subsection Introduction to transitioning\n+\n+@noindent\n+This guide is meant to assist users of GNAT Pro\n+for Alpha OpenVMS who are planning to transition to the IA64 architecture.\n+GNAT Pro for Open VMS Integrity has been designed to meet\n+three main goals:\n+\n+@enumerate\n+@item\n+Providing a full conforming implementation of the Ada 95 language\n+\n+@item\n+Allowing maximum backward compatibility, thus easing migration of existing\n+Ada source code\n+\n+@item\n+Supplying a path for exploiting the full IA64 address range\n+@end enumerate\n+\n+@noindent\n+Ada's strong typing semantics has made it\n+impractical to have different 32-bit and 64-bit modes. As soon as\n+one object could possibly be outside the 32-bit address space, this\n+would make it necessary for the @code{System.Address} type to be 64 bits.\n+In particular, this would cause inconsistencies if 32-bit code is\n+called from 64-bit code that raises an exception.\n+\n+This issue has been resolved by always using 64-bit addressing\n+at the system level, but allowing for automatic conversions between\n+32-bit and 64-bit addresses where required. Thus users who\n+do not currently require 64-bit addressing capabilities, can\n+recompile their code with only minimal changes (and indeed\n+if the code is written in portable Ada, with no assumptions about\n+the size of the @code{Address} type, then no changes at all are necessary).\n+At the same time,\n+this approach provides a simple, gradual upgrade path to future\n+use of larger memories than available for 32-bit systems.\n+Also, newly written applications or libraries will by default\n+be fully compatible with future systems exploiting 64-bit\n+addressing capabilities present in IA64.\n+\n+@ref{Migration of 32 bit code}, will focus on porting applications\n+that do not require more than 2 GB of\n+addressable memory. This code will be referred to as\n+@emph{32-bit code}.\n+For applications intending to exploit the full ia64 address space,\n+@ref{Taking advantage of 64 bit addressing},\n+will consider further changes that may be required.\n+Such code is called @emph{64-bit code} in the\n+remainder of this guide.\n+\n+\n+@node Migration of 32 bit code\n+@subsection Migration of 32-bit code\n+\n+@menu\n+* Address types::\n+* Access types::\n+* Unchecked conversions::\n+* Predefined constants::\n+* Single source compatibility::\n+* Experience with source compatibility::\n+@end menu\n+\n+@node Address types\n+@subsubsection Address types\n+\n+@noindent\n+To solve the problem of mixing 64-bit and 32-bit addressing,\n+while maintaining maximum backward compatibility, the following\n+approach has been taken:\n+\n+@itemize @bullet\n+@item\n+@code{System.Address} always has a size of 64 bits\n+\n+@item\n+@code{System.Short_Address} is a 32-bit subtype of @code{System.Address}\n+@end itemize\n+\n+\n+@noindent\n+Since @code{System.Short_Address} is a subtype of @code{System.Address},\n+a @code{Short_Address}\n+may be used where an @code{Address} is required, and vice versa, without\n+needing explicit type conversions.\n+By virtue of the Open VMS Integrity parameter passing conventions,\n+even imported\n+and exported subprograms that have 32-bit address parameters are\n+compatible with those that have 64-bit address parameters.\n+(See @ref{Making code 64 bit clean}, for details.)\n+\n+The areas that may need attention are those where record types have\n+been defined that contain components of the type @code{System.Address}, and\n+where objects of this type are passed to code expecting a record layout with\n+32-bit addresses.\n+\n+Different compilers on different platforms cannot be\n+expected to represent the same type in the same way,\n+since alignment constraints\n+and other system-dependent properties affect the compiler's decision.\n+For that reason, Ada code\n+generally uses representation clauses to specify the expected\n+layout where required.\n+\n+If such a representation clause uses 32 bits for a component having\n+the type @code{System.Address}, GNAT Pro for OpenVMS Integrity will detect\n+that error and produce a specific diagnostic message.\n+The developer should then determine whether the representation\n+should be 64 bits or not and make either of two changes:\n+change the size to 64 bits and leave the type as @code{System.Address}, or\n+leave the size as 32 bits and change the type to @code{System.Short_Address}.\n+Since @code{Short_Address} is a subtype of @code{Address}, no changes are\n+required in any code setting or accessing the field; the compiler will\n+automatically perform any needed conversions between address\n+formats.\n+\n+@node Access types\n+@subsubsection Access types\n+\n+@noindent\n+By default, objects designated by access values are always\n+allocated in the 32-bit\n+address space. Thus legacy code will never contain\n+any objects that are not addressable with 32-bit addresses, and\n+the compiler will never raise exceptions as result of mixing\n+32-bit and 64-bit addresses.\n+\n+However, the access values themselves are represented in 64 bits, for optimum\n+performance and future compatibility with 64-bit code. As was\n+the case with @code{System.Address}, the compiler will give an error message\n+if an object or record component has a representation clause that\n+requires the access value to fit in 32 bits. In such a situation,\n+an explicit size clause for the access type, specifying 32 bits,\n+will have the desired effect.\n+\n+General access types (declared with @code{access all}) can never be\n+32 bits, as values of such types must be able to refer to any object\n+of the  designated type,\n+including objects residing outside the 32-bit address range.\n+Existing Ada 83 code will not contain such type definitions,\n+however, since general access types were introduced in Ada 95.\n+\n+@node Unchecked conversions\n+@subsubsection Unchecked conversions\n+\n+@noindent\n+In the case of an @code{Unchecked_Conversion} where the source type is a\n+64-bit access type or the type @code{System.Address}, and the target\n+type is a 32-bit type, the compiler will generate a warning.\n+Even though the generated code will still perform the required\n+conversions, it is highly recommended in these cases to use\n+respectively a 32-bit access type or @code{System.Short_Address}\n+as the source type.\n+\n+@node Predefined constants\n+@subsubsection Predefined constants\n+\n+@noindent\n+The following predefined constants have changed:\n+\n+@multitable {@code{System.Address_Size}} {2**32} {2**64}\n+@item   @b{Constant}               @tab @b{Old} @tab @b{New}\n+@item   @code{System.Word_Size}    @tab 32      @tab 64\n+@item   @code{System.Memory_Size}  @tab 2**32   @tab 2**64\n+@item   @code{System.Address_Size} @tab 32      @tab 64\n+@end multitable\n+\n+@noindent\n+If you need to refer to the specific\n+memory size of a 32-bit implementation, instead of the\n+actual memory size, use @code{System.Short_Memory_Size}\n+rather than @code{System.Memory_Size}.\n+Similarly, references to @code{System.Address_Size} may need\n+to be replaced by @code{System.Short_Address'Size}.\n+The program @command{gnatfind} may be useful for locating\n+references to the above constants, so that you can verify that they\n+are still correct.\n+\n+@node Single source compatibility\n+@subsubsection Single source compatibility\n+\n+@noindent\n+In order to allow the same source code to be compiled on\n+both Alpha and IA64 platforms, GNAT Pro for Alpha/OpenVMS\n+defines @code{System.Short_Address} and System.Short_Memory_Size\n+as aliases of respectively @code{System.Address} and\n+@code{System.Memory_Size}.\n+(These aliases also leave the door open for a possible\n+future ``upgrade'' of OpenVMS Alpha to a 64-bit address space.)\n+\n+@node Experience with source compatibility\n+@subsubsection Experience with source compatibility\n+\n+@noindent\n+The Security Server and STARLET provide an interesting ``test case''\n+for source compatibility issues, since it is in such system code\n+where assumptions about @code{Address} size might be expected to occur.\n+Indeed, there were a small number of occasions in the Security Server\n+file @file{jibdef.ads}\n+where a representation clause for a record type specified\n+32 bits for a component of type @code{Address}.\n+All of these errors were detected by the compiler.\n+The repair was obvious and immediate; to simply replace @code{Address} by\n+@code{Short_Address}.\n+\n+In the case of STARLET, there were several record types that should\n+have had representation clauses but did not.  In these record types\n+there was an implicit assumption that an @code{Address} value occupied\n+32 bits.\n+These compiled without error, but their usage resulted in run-time error\n+returns from STARLET system calls.\n+To assist in the compile-time detection of such situations, we\n+plan to include a switch to generate a warning message when a\n+record component is of type @code{Address}.\n+\n+\n+@c ****************************************\n+@node Taking advantage of 64 bit addressing\n+@subsection Taking advantage of 64-bit addressing\n+\n+@menu\n+* Making code 64 bit clean::\n+* Allocating memory from the 64 bit storage pool::\n+* Restrictions on use of 64 bit objects::\n+* Using 64 bit storage pools by default::\n+* General access types::\n+* STARLET and other predefined libraries::\n+@end menu\n+\n+@node Making code 64 bit clean\n+@subsubsection Making code 64-bit clean\n+\n+@noindent\n+In order to prevent problems that may occur when (parts of) a\n+system start using memory outside the 32-bit address range,\n+we recommend some additional guidelines:\n+\n+@itemize @bullet\n+@item\n+For imported subprograms that take parameters of the\n+type @code{System.Address}, ensure that these subprograms can\n+indeed handle 64-bit addresses. If not, or when in doubt,\n+change the subprogram declaration to specify\n+@code{System.Short_Address} instead.\n+\n+@item\n+Resolve all warnings related to size mismatches in\n+unchecked conversions. Failing to do so causes\n+erroneous execution if the source object is outside\n+the 32-bit address space.\n+\n+@item\n+(optional) Explicitly use the 32-bit storage pool\n+for access types used in a 32-bit context, or use\n+generic access types where possible\n+(see @ref{Restrictions on use of 64 bit objects}).\n+@end itemize\n+\n+@noindent\n+If these rules are followed, the compiler will automatically insert\n+any necessary checks to ensure that no addresses or access values\n+passed to 32-bit code ever refer to objects outside the 32-bit\n+address range.\n+Any attempt to do this will raise @code{Constraint_Error}.\n+\n+@node Allocating memory from the 64 bit storage pool\n+@subsubsection Allocating memory from the 64-bit storage pool\n+\n+@noindent\n+For any access type @code{T} that potentially requires memory allocations\n+beyond the 32-bit address space,\n+use the following representation clause:\n+\n+@smallexample @c ada\n+   for T'Storage_Pool use System.Pool_64;\n+@end smallexample\n+\n+\n+@node Restrictions on use of 64 bit objects\n+@subsubsection Restrictions on use of 64-bit objects\n+\n+@noindent\n+Taking the address of an object allocated from a 64-bit storage pool,\n+and then passing this address to a subprogram expecting\n+@code{System.Short_Address},\n+or assigning it to a variable of type @code{Short_Address}, will cause\n+@code{Constraint_Error} to be raised. In case the code is not 64-bit clean\n+(see @ref{Making code 64 bit clean}), or checks are suppressed,\n+no exception is raised and execution\n+will become erroneous.\n+\n+@node Using 64 bit storage pools by default\n+@subsubsection Using 64-bit storage pools by default\n+\n+@noindent\n+In some cases it may be desirable to have the compiler allocate\n+from 64-bit storage pools by default. This may be the case for\n+libraries that are 64-bit clean, but may be used in both 32-bit\n+and 64-bit contexts. For these cases the following configuration\n+pragma may be specified:\n+\n+@smallexample @c ada\n+  pragma Pool_64_Default;\n+@end smallexample\n+\n+@noindent\n+Any code compiled in the context of this pragma will by default\n+use the @code{System.Pool_64} storage pool. This default may be overridden\n+for a specific access type @code{T} by the representation clause:\n+\n+@smallexample @c ada\n+   for T'Storage_Pool use System.Pool_32;\n+@end smallexample\n+\n+@noindent\n+Any object whose address may be passed to a subprogram with a\n+@code{Short_Address} argument, or assigned to a variable of type\n+@code{Short_Address}, needs to be allocated from this pool.\n+\n+@node General access types\n+@subsubsection General access types\n+\n+@noindent\n+Objects designated by access values from a\n+general access type (declared with @code{access all}) are never allocated\n+from a 64-bit storage pool. Code that uses general access types will\n+accept objects allocated in either 32-bit or 64-bit address spaces,\n+but never allocate objects outside the 32-bit address space.\n+Using general access types ensures maximum compatibility with both\n+32-bit and 64-bit code.\n+\n+\n+@node STARLET and other predefined libraries\n+@subsubsection STARLET and other predefined libraries\n+\n+@noindent\n+All code that comes as part of GNAT is 64-bit clean, but the\n+restrictions given in @ref{Restrictions on use of 64 bit objects},\n+still apply. Look at the package\n+specifications to see in which contexts objects allocated\n+in 64-bit address space are acceptable.\n+\n+@node Technical details\n+@subsection Technical details\n+\n+@noindent\n+GNAT Pro for Open VMS Integrity takes advantage of the freedom given in the Ada\n+standard with respect to the type of @code{System.Address}. Previous versions\n+of GNAT Pro have defined this type as private and implemented it as\n+a modular type.\n+\n+In order to allow defining @code{System.Short_Address} as a proper subtype,\n+and to match the implicit sign extension in parameter passing,\n+in GNAT Pro for Open VMS Integrity, @code{System.Address} is defined as a\n+visible (i.e., non-private) integer type.\n+Standard operations on the type, such as the binary operators ``+'', ``-'',\n+etc., that take @code{Address} operands and return an @code{Address} result,\n+have been hidden by declaring these\n+@code{abstract}, an Ada 95 feature that helps avoid the potential ambiguities\n+that would otherwise result from overloading.\n+(Note that, although @code{Address} is a visible integer type,\n+good programming practice dictates against exploiting the type's\n+integer properties such as literals, since this will compromise\n+code portability.)\n+\n+Defining @code{Address} as a visible integer type helps achieve\n+maximum compatibility for existing Ada code,\n+without sacrificing the capabilities of the IA64 architecture.\n+@end ifset\n+\n+\n+@c ************************************************\n @ifset unw\n @node Microsoft Windows Topics\n @appendix Microsoft Windows Topics"}, {"sha": "980f31febb8d25206e2d14efcc62f539ce94f2f8", "filename": "gcc/ada/gnatfind.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fgnatfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fgnatfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatfind.adb?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -36,9 +36,10 @@ with Ada.Strings.Fixed; use Ada.Strings.Fixed;\n with Ada.Text_IO;       use Ada.Text_IO;\n with GNAT.Command_Line; use GNAT.Command_Line;\n with GNAT.Strings;      use GNAT.Strings;\n----------------\n---  Gnatfind --\n----------------\n+\n+--------------\n+-- Gnatfind --\n+--------------\n \n procedure Gnatfind is\n    Output_Ref      : Boolean := False;\n@@ -208,6 +209,7 @@ procedure Gnatfind is\n                end if;\n \n             --  Next arguments are the files to search\n+\n             else\n                Add_Xref_File (S);\n                Wide_Search := False;"}, {"sha": "74c8a07cdcdfc4a4d4267ddf09f4d2884fef4bd8", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -561,11 +561,13 @@ package Lib is\n    procedure Lock;\n    --  Lock internal tables before calling back end\n \n-   procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using Tree_Write\n-\n    procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using Tree_Read\n+   --  Initializes internal tables from current tree file using the relevant\n+   --  Table.Tree_Read routines.\n+\n+   procedure Tree_Write;\n+   --  Writes out internal tables to current tree file using the relevant\n+   --  Table.Tree_Write routines.\n \n    function Is_Loaded (Uname : Unit_Name_Type) return Boolean;\n    --  Determines if unit with given name is already loaded, i.e. there is"}, {"sha": "bf4ec2cc261211830a71f751a626b785820d6841", "filename": "gcc/ada/namet.ads", "status": "modified", "additions": 82, "deletions": 81, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fnamet.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fnamet.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.ads?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -100,12 +100,12 @@ package Namet is\n --                       characters may appear for such entries.\n \n --  Note: the encodings Uhh (upper half characters), Whhhh (wide characters),\n---  and Qx (character literal names) are described in the spec, since they\n---  are visible throughout the system (e.g. in debugging output). However,\n---  no code should depend on these particular encodings, so it should be\n---  possible to change the encodings by making changes only to the Namet\n---  specification (to change these comments) and the body (which actually\n---  implements the encodings).\n+--  and Qx (character literal names) are described in the spec, since they are\n+--  visible throughout the system (e.g. in debugging output). However, no code\n+--  should depend on these particular encodings, so it should be possible to\n+--  change the encodings by making changes only to the Namet specification (to\n+--  change these comments) and the body (which actually implements the\n+--  encodings).\n \n --  The names are hashed so that a given name appears only once in the table,\n --  except that names entered with Name_Enter as opposed to Name_Find are\n@@ -118,19 +118,19 @@ package Namet is\n \n --  Two values, one of type Int and one of type Byte, are stored with each\n --  names table entry and subprograms are provided for setting and retrieving\n---  these associated values. The usage of these values is up to the client.\n---  In the compiler, the Int field is used to point to a chain of potentially\n---  visible entities (see Sem.Ch8 for details), and the Byte field is used\n---  to hold the Token_Type value for reserved words (see Sem for details).\n---  In the binder, the Byte field is unused, and the Int field is used in\n---  various ways depending on the name involved (see binder documentation).\n+--  these associated values. The usage of these values is up to the client. In\n+--  the compiler, the Int field is used to point to a chain of potentially\n+--  visible entities (see Sem.Ch8 for details), and the Byte field is used to\n+--  hold the Token_Type value for reserved words (see Sem for details). In the\n+--  binder, the Byte field is unused, and the Int field is used in various\n+--  ways depending on the name involved (see binder documentation).\n \n    Name_Buffer : String (1 .. 16*1024);\n    --  This buffer is used to set the name to be stored in the table for the\n    --  Name_Find call, and to retrieve the name for the Get_Name_String call.\n-   --  The plus 1 in the length allows for cases of adding ASCII.NUL. The\n-   --  16K here is intended to be an infinite value that ensures that we\n-   --  never overflow the buffer (names this long are too absurd to worry!)\n+   --  The plus 1 in the length allows for cases of adding ASCII.NUL. The 16K\n+   --  here is intended to be an infinite value that ensures that we never\n+   --  overflow the buffer (names this long are too absurd to worry!)\n \n    Name_Len : Natural;\n    --  Length of name stored in Name_Buffer. Used as an input parameter for\n@@ -147,28 +147,28 @@ package Namet is\n \n    procedure Get_Name_String (Id : Name_Id);\n    --  Get_Name_String is used to retrieve the string associated with an entry\n-   --  in the names table. The resulting string is stored in Name_Buffer\n-   --  and Name_Len is set. It is an error to call Get_Name_String with one\n-   --  of the special name Id values (No_Name or Error_Name).\n+   --  in the names table. The resulting string is stored in Name_Buffer and\n+   --  Name_Len is set. It is an error to call Get_Name_String with one of the\n+   --  special name Id values (No_Name or Error_Name).\n \n    function Get_Name_String (Id : Name_Id) return String;\n    --  This functional form returns the result as a string without affecting\n    --  the contents of either Name_Buffer or Name_Len.\n \n    procedure Get_Unqualified_Name_String (Id : Name_Id);\n    --  Similar to the above except that qualification (as defined in unit\n-   --  Exp_Dbug) is removed (including both preceding __ delimited names,\n-   --  and also the suffixes used to indicate package body entities and to\n+   --  Exp_Dbug) is removed (including both preceding __ delimited names, and\n+   --  also the suffixes used to indicate package body entities and to\n    --  distinguish between overloaded entities). Note that names are not\n-   --  qualified until just before the call to gigi, so this routine is\n-   --  only needed by processing that occurs after gigi has been called.\n-   --  This includes all ASIS processing, since ASIS works on the tree\n-   --  written after gigi has been called.\n+   --  qualified until just before the call to gigi, so this routine is only\n+   --  needed by processing that occurs after gigi has been called. This\n+   --  includes all ASIS processing, since ASIS works on the tree written\n+   --  after gigi has been called.\n \n    procedure Get_Name_String_And_Append (Id : Name_Id);\n-   --  Like Get_Name_String but the resulting characters are appended to\n-   --  the current contents of the entry stored in Name_Buffer, and Name_Len\n-   --  is incremented to include the added characters.\n+   --  Like Get_Name_String but the resulting characters are appended to the\n+   --  current contents of the entry stored in Name_Buffer, and Name_Len is\n+   --  incremented to include the added characters.\n \n    procedure Get_Decoded_Name_String (Id : Name_Id);\n    --  Same calling sequence an interface as Get_Name_String, except that the\n@@ -179,22 +179,22 @@ package Namet is\n \n    procedure Get_Unqualified_Decoded_Name_String (Id : Name_Id);\n    --  Similar to the above except that qualification (as defined in unit\n-   --  Exp_Dbug) is removed (including both preceding __ delimited names,\n-   --  and also the suffix used to indicate package body entities). Note\n-   --  that names are not qualified until just before the call to gigi, so\n-   --  this routine is only needed by processing that occurs after gigi has\n-   --  been called. This includes all ASIS processing, since ASIS works on\n-   --  the tree written after gigi has been called.\n+   --  Exp_Dbug) is removed (including both preceding __ delimited names, and\n+   --  also the suffix used to indicate package body entities). Note that\n+   --  names are not qualified until just before the call to gigi, so this\n+   --  routine is only needed by processing that occurs after gigi has been\n+   --  called. This includes all ASIS processing, since ASIS works on the tree\n+   --  written after gigi has been called.\n \n    procedure Get_Decoded_Name_String_With_Brackets (Id : Name_Id);\n    --  This routine is similar to Decoded_Name, except that the brackets\n-   --  notation (Uhh replaced by [\"hh\"], Whhhh replaced by [\"hhhh\"]) is\n-   --  used for all non-lower half characters, regardless of the setting\n-   --  of Opt.Wide_Character_Encoding_Method, and also in that characters\n-   --  in the range 16#80# .. 16#FF# are converted to brackets notation\n-   --  in all cases. This routine can be used when there is a requirement\n-   --  for a canonical representation not affected by the character set\n-   --  options (e.g. in the binder generation of symbols).\n+   --  notation (Uhh replaced by [\"hh\"], Whhhh replaced by [\"hhhh\"]) is used\n+   --  for all non-lower half characters, regardless of the setting of\n+   --  Opt.Wide_Character_Encoding_Method, and also in that characters in the\n+   --  range 16#80# .. 16#FF# are converted to brackets notation in all cases.\n+   --  This routine can be used when there is a requirement for a canonical\n+   --  representation not affected by the character set options (e.g. in the\n+   --  binder generation of symbols).\n \n    function Get_Name_Table_Byte (Id : Name_Id) return Byte;\n    pragma Inline (Get_Name_Table_Byte);\n@@ -210,17 +210,17 @@ package Namet is\n \n    procedure Initialize;\n    --  Initializes the names table, including initializing the first 26\n-   --  entries in the table (for the 1-character lower case names a-z)\n-   --  Note that Initialize must not be called if Tree_Read is used.\n+   --  entries in the table (for the 1-character lower case names a-z) Note\n+   --  that Initialize must not be called if Tree_Read is used.\n \n    procedure Lock;\n    --  Lock name table before calling back end. Space for up to 10 extra\n    --  names and 1000 extra characters is reserved before the table is locked.\n \n    procedure Unlock;\n    --  Unlocks the name table to allow use of the 10 extra names and 1000\n-   --  extra characters reserved by the Lock call. See gnat1drv for details\n-   --  of the need for this.\n+   --  extra characters reserved by the Lock call. See gnat1drv for details of\n+   --  the need for this.\n \n    function Length_Of_Name (Id : Name_Id) return Nat;\n    pragma Inline (Length_Of_Name);\n@@ -230,18 +230,18 @@ package Namet is\n    --  Length_Of_Name does not affect the contents of Name_Len and Name_Buffer.\n \n    function Name_Chars_Address return System.Address;\n-   --  Return starting address of name characters table (used in Back_End\n-   --  call to Gigi).\n+   --  Return starting address of name characters table (used in Back_End call\n+   --  to Gigi).\n \n    function Name_Find return Name_Id;\n-   --  Name_Find is called with a string stored in Name_Buffer whose length\n-   --  is in Name_Len (i.e. the characters of the name are in subscript\n-   --  positions 1 to Name_Len in Name_Buffer). It searches the names\n-   --  table to see if the string has already been stored. If so the Id of\n-   --  the existing entry is returned. Otherwise a new entry is created with\n-   --  its Name_Table_Info field set to zero. The contents of Name_Buffer\n-   --  and Name_Len are not modified by this call. Note that it is permissible\n-   --  for Name_Len to be set to zero to lookup the null name string.\n+   --  Name_Find is called with a string stored in Name_Buffer whose length is\n+   --  in Name_Len (i.e. the characters of the name are in subscript positions\n+   --  1 to Name_Len in Name_Buffer). It searches the names table to see if\n+   --  the string has already been stored. If so the Id of the existing entry\n+   --  is returned. Otherwise a new entry is created with its Name_Table_Info\n+   --  field set to zero. The contents of Name_Buffer and Name_Len are not\n+   --  modified by this call. Note that it is permissible for Name_Len to be\n+   --  set to zero to lookup the null name string.\n \n    function Name_Enter return Name_Id;\n    --  Name_Enter has the same calling interface as Name_Find. The difference\n@@ -255,7 +255,7 @@ package Namet is\n    --  hashing by Name_Find in any case.\n \n    function Name_Entries_Address return System.Address;\n-   --  Return starting address of Names table. Used in Back_End call to Gigi.\n+   --  Return starting address of Names table (used in Back_End call to Gigi)\n \n    function Name_Entries_Count return Nat;\n    --  Return current number of entries in the names table\n@@ -274,16 +274,16 @@ package Namet is\n    --  with an underscore. This call destroys the value of Name_Len and\n    --  Name_Buffer (it loads these as for Get_Name_String).\n    --\n-   --  Note: if the name is qualified (has a double underscore), then\n-   --  only the final entity name is considered, not the qualifying\n-   --  names. Consider for example that the name:\n+   --  Note: if the name is qualified (has a double underscore), then only the\n+   --  final entity name is considered, not the qualifying names. Consider for\n+   --  example that the name:\n    --\n    --    pkg__B_1__xyz\n    --\n-   --  is not an internal name, because the B comes from the internal\n-   --  name of a qualifying block, but the xyz means that this was\n-   --  indeed a declared identifier called \"xyz\" within this block\n-   --  and there is nothing internal about that name.\n+   --  is not an internal name, because the B comes from the internal name of\n+   --  a qualifying block, but the xyz means that this was indeed a declared\n+   --  identifier called \"xyz\" within this block and there is nothing internal\n+   --  about that name.\n \n    function Is_Internal_Name return Boolean;\n    --  Like the form with an Id argument, except that the name to be tested is\n@@ -295,8 +295,8 @@ package Namet is\n    --  the name table info entries associated with current entries in the\n    --  names table. There is no harm in keeping the names entries themselves\n    --  from one compilation to another, but we can't keep the entity info,\n-   --  since this refers to tree nodes, which are destroyed between each\n-   --  main source file.\n+   --  since this refers to tree nodes, which are destroyed between each main\n+   --  source file.\n \n    procedure Add_Char_To_Name_Buffer (C : Character);\n    pragma Inline (Add_Char_To_Name_Buffer);\n@@ -328,19 +328,20 @@ package Namet is\n    --  Stores given character code at the end of Name_Buffer, updating the\n    --  value in Name_Len appropriately. Lower case letters and digits are\n    --  stored unchanged. Other 8-bit characters are stored using the Uhh\n-   --  encoding (hh = hex code), and other 16-bit wide-character values\n-   --  are stored using the Whhhh (hhhh = hex code) encoding. Note that\n-   --  this procedure does not fold upper case letters (they are stored\n-   --  using the Uhh encoding). If folding is required, it must be done\n-   --  by the caller prior to the call.\n+   --  encoding (hh = hex code), and other 16-bit wide-character values are\n+   --  stored using the Whhhh (hhhh = hex code) encoding. Note that this\n+   --  procedure does not fold upper case letters (they are stored using the\n+   --  Uhh encoding). If folding is required, it must be done by the caller\n+   --  prior to the call.\n \n    procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using Tree_Read.\n-   --  Note that Initialize should not be called if Tree_Read is used.\n-   --  Tree_Read includes all necessary initialization.\n+   --  Initializes internal tables from current tree file using the relevant\n+   --  Table.Tree_Read routines. Note that Initialize should not be called if\n+   --  Tree_Read is used. Tree_Read includes all necessary initialization.\n \n    procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using Tree_Write\n+   --  Writes out internal tables to current tree file using the relevant\n+   --  Table.Tree_Write routines.\n \n    procedure Get_Last_Two_Chars (N : Name_Id; C1, C2 : out Character);\n    --  Obtains last two characters of a name. C1 is last but one character\n@@ -375,10 +376,10 @@ package Namet is\n \n private\n \n-   --  This table stores the actual string names. Although logically there\n-   --  is no need for a terminating character (since the length is stored\n-   --  in the name entry table), we still store a NUL character at the end\n-   --  of every name (for convenience in interfacing to the C world).\n+   --  This table stores the actual string names. Although logically there is\n+   --  no need for a terminating character (since the length is stored in the\n+   --  name entry table), we still store a NUL character at the end of every\n+   --  name (for convenience in interfacing to the C world).\n \n    package Name_Chars is new Table.Table (\n      Table_Component_Type => Character,\n@@ -390,10 +391,10 @@ private\n \n    type Name_Entry is record\n       Name_Chars_Index : Int;\n-      --  Starting location of characters in the Name_Chars table minus\n-      --  one (i.e. pointer to character just before first character). The\n-      --  reason for the bias of one is that indexes in Name_Buffer are\n-      --  one's origin, so this avoids unnecessary adds and subtracts of 1.\n+      --  Starting location of characters in the Name_Chars table minus one\n+      --  (i.e. pointer to character just before first character). The reason\n+      --  for the bias of one is that indexes in Name_Buffer are one's origin,\n+      --  so this avoids unnecessary adds and subtracts of 1.\n \n       Name_Len : Short;\n       --  Length of this name in characters"}, {"sha": "c8c1330dc09950b99d826c2ef2c9188c4832736d", "filename": "gcc/ada/nlists.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fnlists.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fnlists.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.ads?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -292,12 +292,13 @@ package Nlists is\n    --  Called to lock tables before back end is called\n \n    procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using Tree_Read.\n-   --  Note that Initialize should not be called if Tree_Read is used.\n-   --  Tree_Read includes all necessary initialization.\n+   --  Initializes internal tables from current tree file using the relevant\n+   --  Table.Tree_Read routines. Note that Initialize should not be called if\n+   --  Tree_Read is used. Tree_Read includes all necessary initialization.\n \n    procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using Tree_Write\n+   --  Writes out internal tables to current tree file using the relevant\n+   --  Table.Tree_Write routines.\n \n    function Parent (List : List_Id) return Node_Id;\n    pragma Inline (Parent);"}, {"sha": "72a31edb1fd5088b462af568459e805d7ed9f56c", "filename": "gcc/ada/repinfo.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Frepinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Frepinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.ads?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -277,7 +277,8 @@ package Repinfo is\n    --  also returned unmodified.\n \n    procedure Tree_Read;\n-   --  Read in the value of the Rep_Table\n+   --  Initializes internal tables from current tree file using the relevant\n+   --  Table.Tree_Read routines.\n \n    ------------------------\n    -- Compiler Interface --\n@@ -287,7 +288,8 @@ package Repinfo is\n    --  Procedure to list representation information\n \n    procedure Tree_Write;\n-   --  Write out the value of the Rep_Table\n+   --  Writes out internal tables to current tree file using the relevant\n+   --  Table.Tree_Write routines.\n \n    --------------------------\n    -- Debugging Procedures --"}, {"sha": "87d7fcc2bd5eb4239dd5cbe529b6c3fa7916737e", "filename": "gcc/ada/s-maccod.ads", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fs-maccod.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fs-maccod.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-maccod.ads?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -97,24 +97,21 @@ pragma Pure (Machine_Code);\n      Outputs  : Asm_Output_Operand := No_Output_Operands;\n      Inputs   : Asm_Input_Operand_List;\n      Clobber  : String  := \"\";\n-     Volatile : Boolean := False)\n-     return     Asm_Insn;\n+     Volatile : Boolean := False) return Asm_Insn;\n \n    function Asm (\n      Template : String;\n      Outputs  : Asm_Output_Operand_List;\n      Inputs   : Asm_Input_Operand := No_Input_Operands;\n      Clobber  : String  := \"\";\n-     Volatile : Boolean := False)\n-     return     Asm_Insn;\n+     Volatile : Boolean := False) return Asm_Insn;\n \n    function Asm (\n      Template : String;\n      Outputs  : Asm_Output_Operand := No_Output_Operands;\n      Inputs   : Asm_Input_Operand  := No_Input_Operands;\n      Clobber  : String  := \"\";\n-     Volatile : Boolean := False)\n-     return     Asm_Insn;\n+     Volatile : Boolean := False) return Asm_Insn;\n \n    pragma Import (Intrinsic, Asm);\n "}, {"sha": "e242bc9399305ecf315167c66f55cdd717f82141", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -1267,8 +1267,8 @@ package body Sem is\n    --  Start of processing for Semantics\n \n    begin\n-      Compiler_State        := Analyzing;\n-      Current_Sem_Unit      := Get_Cunit_Unit_Number (Comp_Unit);\n+      Compiler_State   := Analyzing;\n+      Current_Sem_Unit := Get_Cunit_Unit_Number (Comp_Unit);\n \n       if Generic_Main then\n          Expander_Mode_Save_And_Set (False);"}, {"sha": "7015fbd2096eabcc0c50e15d54814d50f9e1f060", "filename": "gcc/ada/sem_ch2.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fsem_ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fsem_ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch2.adb?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,7 +41,6 @@ package body Sem_Ch2 is\n \n    procedure Analyze_Character_Literal (N : Node_Id) is\n    begin\n-\n       --  The type is eventually inherited from the context. If expansion\n       --  has already established the proper type, do not modify it.\n "}, {"sha": "53e8889b4242cfd8986d50b003ecfead6b1e4570", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -564,11 +564,13 @@ package Sinput is\n    procedure Write_Time_Stamp (S : Source_File_Index);\n    --  Writes time stamp of specified file in YY-MM-DD HH:MM.SS format\n \n-   procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using Tree_Write\n-\n    procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using Tree_Read\n+   --  Initializes internal tables from current tree file using the relevant\n+   --  Table.Tree_Read routines.\n+\n+   procedure Tree_Write;\n+   --  Writes out internal tables to current tree file using the relevant\n+   --  Table.Tree_Write routines.\n \n private\n    pragma Inline (File_Name);"}, {"sha": "6a6291a582946ab596bead0eac9c077d41835d8e", "filename": "gcc/ada/stringt.ads", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fstringt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fstringt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstringt.ads?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -128,12 +128,13 @@ package Stringt is\n    --  Return address of Strings table (used by Back_End call to Gigi)\n \n    procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using Tree_Read.\n-   --  Note that Initialize should not be called if Tree_Read is used.\n-   --  Tree_Read includes all necessary initialization.\n+   --  Initializes internal tables from current tree file using the relevant\n+   --  Table.Tree_Read routines. Note that Initialize should not be called if\n+   --  Tree_Read is used. Tree_Read includes all necessary initialization.\n \n    procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using Tree_Write\n+   --  Writes out internal tables to current tree file using the relevant\n+   --  Table.Tree_Write routines.\n \n    procedure Write_Char_Code (Code : Char_Code);\n    --  Procedure to write a character code value, used for debugging purposes"}, {"sha": "21ccc3f911c9355c1ee74eea7d626ba7c2313dc4", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -30,6 +30,8 @@ gnatls          ^ GNAT LIST\n Gnatls          ^ GNAT LIST\n gnatmake        ^ GNAT MAKE\n Gnatmake        ^ GNAT MAKE\n+gnatmetric      ^ GNAT METRIC\n+Gnatmetric      ^ GNAT METRIC\n gnatname        ^ GNAT NAME\n Gnatname        ^ GNAT NAME\n gnatpp          ^ GNAT PRETTY"}, {"sha": "f1babd179de236f30735daa6068997ad004e092f", "filename": "gcc/ada/uintp.ads", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fuintp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Fuintp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.ads?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2004, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -100,12 +100,13 @@ package Uintp is\n    --  gigi processing.\n \n    procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using Tree_Read.\n-   --  Note that Initialize should not be called if Tree_Read is used.\n-   --  Tree_Read includes all necessary initialization.\n+   --  Initializes internal tables from current tree file using the relevant\n+   --  Table.Tree_Read routines. Note that Initialize should not be called if\n+   --  Tree_Read is used. Tree_Read includes all necessary initialization.\n \n    procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using Tree_Write.\n+   --  Writes out internal tables to current tree file using the relevant\n+   --  Table.Tree_Write routines.\n \n    function UI_Abs (Right : Uint) return Uint;\n    pragma Inline (UI_Abs);"}, {"sha": "57bc0fa8c139536d48bb91fc0f2802906ef8e242", "filename": "gcc/ada/urealp.ads", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Furealp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b3f81fc94c4a40ddc8ef8107757696fd2accad/gcc%2Fada%2Furealp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Furealp.ads?ref=87b3f81fc94c4a40ddc8ef8107757696fd2accad", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -139,12 +139,13 @@ package Urealp is\n    --  during Gigi processing.\n \n    procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using Tree_Read.\n-   --  Note that Initialize should not be called if Tree_Read is used.\n-   --  Tree_Read includes all necessary initialization.\n+   --  Initializes internal tables from current tree file using the relevant\n+   --  Table.Tree_Read routines. Note that Initialize should not be called if\n+   --  Tree_Read is used. Tree_Read includes all necessary initialization.\n \n    procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using Tree_Write\n+   --  Writes out internal tables to current tree file using the relevant\n+   --  Table.Tree_Write routines.\n \n    function Rbase (Real : Ureal) return Nat;\n    --  Return the base of the universal real."}]}