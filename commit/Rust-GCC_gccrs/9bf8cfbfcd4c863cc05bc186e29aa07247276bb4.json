{"sha": "9bf8cfbfcd4c863cc05bc186e29aa07247276bb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJmOGNmYmZjZDRjODYzY2MwNWJjMTg2ZTI5YWEwNzI0NzI3NmJiNA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2003-06-04T07:51:41Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2003-06-04T07:51:41Z"}, "message": "Makefile.in (cse.o): Add params.h dependency.\n\n\t* Makefile.in (cse.o): Add params.h dependency.\n\t* cse.c: Include params.h.\n\t(PATHLENGTH): Removed.\n\t(struct cse_basic_block_data): Make path array dynamic.\n\t(cse_end_of_basic_block): Use PARAM_MAX_CSE_PATH_LENGTH instead of PATHLENGTH.\n\t(cse_main, cse_basic_block): Allocate path array.\n\t* params.def (PARAM_MAX_CSE_PATH_LENGTH): New.\n\nFrom-SVN: r67433", "tree": {"sha": "2d98fe2e63519131803e58e2cf702902ee9316d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d98fe2e63519131803e58e2cf702902ee9316d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bf8cfbfcd4c863cc05bc186e29aa07247276bb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf8cfbfcd4c863cc05bc186e29aa07247276bb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf8cfbfcd4c863cc05bc186e29aa07247276bb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf8cfbfcd4c863cc05bc186e29aa07247276bb4/comments", "author": null, "committer": null, "parents": [{"sha": "253c7a0090928522c2bca312dc227ebf53b2dd99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/253c7a0090928522c2bca312dc227ebf53b2dd99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/253c7a0090928522c2bca312dc227ebf53b2dd99"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "23a9ad0a232024547c4dc4d29dbfded34994e8a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf8cfbfcd4c863cc05bc186e29aa07247276bb4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf8cfbfcd4c863cc05bc186e29aa07247276bb4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bf8cfbfcd4c863cc05bc186e29aa07247276bb4", "patch": "@@ -1,3 +1,13 @@\n+2003-06-04  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* Makefile.in (cse.o): Add params.h dependency.\n+\t* cse.c: Include params.h.\n+\t(PATHLENGTH): Removed.\n+\t(struct cse_basic_block_data): Make path array dynamic.\n+\t(cse_end_of_basic_block): Use PARAM_MAX_CSE_PATH_LENGTH instead of PATHLENGTH.\n+\t(cse_main, cse_basic_block): Allocate path array.\n+\t* params.def (PARAM_MAX_CSE_PATH_LENGTH): New.\n+\n Wed Jun  4 09:49:21 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (ix86_reorg): Replace the jump instead of adding nop."}, {"sha": "f0ca525716ebfe8488ff68d5056059c6a58111f8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf8cfbfcd4c863cc05bc186e29aa07247276bb4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf8cfbfcd4c863cc05bc186e29aa07247276bb4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9bf8cfbfcd4c863cc05bc186e29aa07247276bb4", "patch": "@@ -1604,7 +1604,7 @@ cselib.o : cselib.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_\n cse.o : cse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h flags.h real.h insn-config.h $(RECOG_H) $(EXPR_H) toplev.h \\\n    output.h function.h $(BASIC_BLOCK_H) $(GGC_H) $(TM_P_H) $(TIMEVAR_H) \\\n-   except.h $(TARGET_H)\n+   except.h $(TARGET_H) $(PARAMS_H)\n gcse.o : gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h flags.h real.h insn-config.h ggc.h $(RECOG_H) $(EXPR_H) \\\n    $(BASIC_BLOCK_H) function.h output.h toplev.h $(TM_P_H) $(PARAMS_H) except.h gt-gcse.h"}, {"sha": "65b068427848bfcba2e80660135d1c42bd337bc8", "filename": "gcc/cse.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf8cfbfcd4c863cc05bc186e29aa07247276bb4/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf8cfbfcd4c863cc05bc186e29aa07247276bb4/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=9bf8cfbfcd4c863cc05bc186e29aa07247276bb4", "patch": "@@ -42,6 +42,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"timevar.h\"\n #include \"except.h\"\n #include \"target.h\"\n+#include \"params.h\"\n \n /* The basic idea of common subexpression elimination is to go\n    through the code, keeping a record of expressions that would\n@@ -569,10 +570,6 @@ static struct table_elt *last_jump_equiv_class;\n \n static int constant_pool_entries_cost;\n \n-/* Define maximum length of a branch path.  */\n-\n-#define PATHLENGTH\t10\n-\n /* This data describes a block that will be processed by cse_basic_block.  */\n \n struct cse_basic_block_data\n@@ -596,7 +593,7 @@ struct cse_basic_block_data\n \t except that it is used when the destination label is not preceded\n        by a BARRIER.  */\n       enum taken {TAKEN, NOT_TAKEN, AROUND} status;\n-    } path[PATHLENGTH];\n+    } *path;\n };\n \n static bool fixed_base_plus_p\tPARAMS ((rtx x));\n@@ -6947,7 +6944,7 @@ cse_end_of_basic_block (insn, data, follow_jumps, after_loop, skip_blocks)\n \t In this case invalidate_skipped_block will be called to invalidate any\n \t registers set in the block when following the jump.  */\n \n-      else if ((follow_jumps || skip_blocks) && path_size < PATHLENGTH - 1\n+      else if ((follow_jumps || skip_blocks) && path_size < PARAM_VALUE (PARAM_MAX_CSE_PATH_LENGTH) - 1\n \t       && GET_CODE (p) == JUMP_INSN\n \t       && GET_CODE (PATTERN (p)) == SET\n \t       && GET_CODE (SET_SRC (PATTERN (p))) == IF_THEN_ELSE\n@@ -7077,6 +7074,9 @@ cse_main (f, nregs, after_loop, file)\n   rtx insn = f;\n   int i;\n \n+  val.path = xmalloc (sizeof (struct branch_path)\n+\t\t      * PARAM_VALUE (PARAM_MAX_CSE_PATH_LENGTH));\n+\n   cse_jumps_altered = 0;\n   recorded_label_ref = 0;\n   constant_pool_entries_cost = 0;\n@@ -7200,6 +7200,7 @@ cse_main (f, nregs, after_loop, file)\n   end_alias_analysis ();\n   free (uid_cuid);\n   free (reg_eqv_table);\n+  free (val.path);\n \n   return cse_jumps_altered || recorded_label_ref;\n }\n@@ -7377,7 +7378,10 @@ cse_basic_block (from, to, next_branch, around_loop)\n \t     following branches in this case.  */\n \t  to_usage = 0;\n \t  val.path_size = 0;\n+\t  val.path = xmalloc (sizeof (struct branch_path)\n+\t\t\t      * PARAM_VALUE (PARAM_MAX_CSE_PATH_LENGTH));\n \t  cse_end_of_basic_block (insn, &val, 0, 0, 0);\n+\t  free (val.path);\n \n \t  /* If the tables we allocated have enough space left\n \t     to handle all the SETs in the next basic block,"}, {"sha": "9d9d973ec0b6145613f88ddebd5fbd2fda9f42f2", "filename": "gcc/params.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf8cfbfcd4c863cc05bc186e29aa07247276bb4/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf8cfbfcd4c863cc05bc186e29aa07247276bb4/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=9bf8cfbfcd4c863cc05bc186e29aa07247276bb4", "patch": "@@ -264,6 +264,12 @@ DEFPARAM(PARAM_MAX_CROSSJUMP_EDGES,\n \t \"The maximum number of incoming edges to consider for crossjumping\",\n \t 100)\n \n+/* The maximum length of path considered in cse.  */\n+DEFPARAM(PARAM_MAX_CSE_PATH_LENGTH,\n+\t \"max-cse-path-length\",\n+\t \"The maximum length of path considered in cse.\",\n+\t 10)\n+\n #ifdef ENABLE_GC_ALWAYS_COLLECT\n # define GGC_MIN_EXPAND_DEFAULT 0\n # define GGC_MIN_HEAPSIZE_DEFAULT 0"}]}