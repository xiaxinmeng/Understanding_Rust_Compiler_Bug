{"sha": "8412b939d1cf375c8e478e39a5ac9d7260e4c23c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQxMmI5MzlkMWNmMzc1YzhlNDc4ZTM5YTVhYzlkNzI2MGU0YzIzYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-11-01T23:26:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-01T23:26:17Z"}, "message": "PR c++/91369 - Implement P0784R7: constexpr new\n\n\tPR c++/91369 - Implement P0784R7: constexpr new\n\t* cp-tree.h (CALL_FROM_NEW_OR_DELETE_P): Define.\n\t* init.c (build_new_1, build_vec_delete_1, build_delete): Set\n\tCALL_FROM_NEW_OR_DELETE_P on the CALL_EXPR to allocator functions.\n\t* constexpr.c (is_std_allocator_allocate): Only allow\n\tglobal replaceable allocator functions if CALL_FROM_NEW_OR_DELETE_P\n\tor in std::allocate<T>::{,de}allocate.\n\t(potential_constant_expression_1): Likewise.\n\n\t* g++.dg/cpp2a/constexpr-new6.C: New test.\n\t* g++.dg/cpp2a/constexpr-new7.C: New test.\n\nFrom-SVN: r277732", "tree": {"sha": "fa30aa009dcb3b40d9e2996606c4f8ec9635d72e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa30aa009dcb3b40d9e2996606c4f8ec9635d72e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8412b939d1cf375c8e478e39a5ac9d7260e4c23c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8412b939d1cf375c8e478e39a5ac9d7260e4c23c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8412b939d1cf375c8e478e39a5ac9d7260e4c23c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8412b939d1cf375c8e478e39a5ac9d7260e4c23c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a8ce49e0f3983e1b72f490a59ded92bca053c71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8ce49e0f3983e1b72f490a59ded92bca053c71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a8ce49e0f3983e1b72f490a59ded92bca053c71"}], "stats": {"total": 192, "additions": 189, "deletions": 3}, "files": [{"sha": "50da698107d12cd3ac9bb478e0dfca9f22e23a93", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8412b939d1cf375c8e478e39a5ac9d7260e4c23c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8412b939d1cf375c8e478e39a5ac9d7260e4c23c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8412b939d1cf375c8e478e39a5ac9d7260e4c23c", "patch": "@@ -1,3 +1,14 @@\n+2019-11-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/91369 - Implement P0784R7: constexpr new\n+\t* cp-tree.h (CALL_FROM_NEW_OR_DELETE_P): Define.\n+\t* init.c (build_new_1, build_vec_delete_1, build_delete): Set\n+\tCALL_FROM_NEW_OR_DELETE_P on the CALL_EXPR to allocator functions.\n+\t* constexpr.c (is_std_allocator_allocate): Only allow\n+\tglobal replaceable allocator functions if CALL_FROM_NEW_OR_DELETE_P\n+\tor in std::allocate<T>::{,de}allocate.\n+\t(potential_constant_expression_1): Likewise.\n+\n 2019-11-01  Nathan Sidwell  <nathan@acm.org>\n \n \t* class.c (check_field_decls): Refactor."}, {"sha": "4baaac06252101053272dfbb7e49b9bd8bae6d00", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8412b939d1cf375c8e478e39a5ac9d7260e4c23c/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8412b939d1cf375c8e478e39a5ac9d7260e4c23c/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=8412b939d1cf375c8e478e39a5ac9d7260e4c23c", "patch": "@@ -1638,6 +1638,28 @@ is_std_construct_at (tree fndecl)\n   return name && id_equal (name, \"construct_at\");\n }\n \n+/* Return true if FNDECL is std::allocator<T>::{,de}allocate.  */\n+\n+static inline bool\n+is_std_allocator_allocate (tree fndecl)\n+{\n+  tree name = DECL_NAME (fndecl);\n+  if (name == NULL_TREE\n+      || !(id_equal (name, \"allocate\") || id_equal (name, \"deallocate\")))\n+    return false;\n+\n+  tree ctx = DECL_CONTEXT (fndecl);\n+  if (ctx == NULL_TREE || !CLASS_TYPE_P (ctx) || !TYPE_MAIN_DECL (ctx))\n+    return false;\n+\n+  tree decl = TYPE_MAIN_DECL (ctx);\n+  name = DECL_NAME (decl);\n+  if (name == NULL_TREE || !id_equal (name, \"allocator\"))\n+    return false;\n+\n+  return decl_in_std_namespace_p (decl);\n+}\n+\n /* Subroutine of cxx_eval_constant_expression.\n    Evaluate the call expression tree T in the context of OLD_CALL expression\n    evaluation.  */\n@@ -1716,7 +1738,12 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t\t   lval, non_constant_p, overflow_p);\n   if (!DECL_DECLARED_CONSTEXPR_P (fun))\n     {\n-      if (cxx_replaceable_global_alloc_fn (fun))\n+      if (TREE_CODE (t) == CALL_EXPR\n+\t  && cxx_replaceable_global_alloc_fn (fun)\n+\t  && (CALL_FROM_NEW_OR_DELETE_P (t)\n+\t      || (ctx->call\n+\t\t  && ctx->call->fundef\n+\t\t  && is_std_allocator_allocate (ctx->call->fundef->decl))))\n \t{\n \t  const int nargs = call_expr_nargs (t);\n \t  tree arg0 = NULL_TREE;\n@@ -1774,7 +1801,8 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t}\n       /* Allow placement new in std::construct_at, just return the second\n \t argument.  */\n-      if (cxx_placement_new_fn (fun)\n+      if (TREE_CODE (t) == CALL_EXPR\n+\t  && cxx_placement_new_fn (fun)\n \t  && ctx->call\n \t  && ctx->call->fundef\n \t  && is_std_construct_at (ctx->call->fundef->decl))\n@@ -6508,9 +6536,15 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t\t    && !fndecl_built_in_p (fun)\n \t\t    /* In C++2a, replaceable global allocation functions\n \t\t       are constant expressions.  */\n-\t\t    && !cxx_replaceable_global_alloc_fn (fun)\n+\t\t    && (!cxx_replaceable_global_alloc_fn (fun)\n+\t\t\t|| TREE_CODE (t) != CALL_EXPR\n+\t\t\t|| (!CALL_FROM_NEW_OR_DELETE_P (t)\n+\t\t\t    && (current_function_decl == NULL_TREE\n+\t\t\t\t|| !is_std_allocator_allocate\n+\t\t\t\t\t\t(current_function_decl))))\n \t\t    /* Allow placement new in std::construct_at.  */\n \t\t    && (!cxx_placement_new_fn (fun)\n+\t\t\t|| TREE_CODE (t) != CALL_EXPR\n \t\t\t|| current_function_decl == NULL_TREE\n \t\t\t|| !is_std_construct_at (current_function_decl)))\n \t\t  {"}, {"sha": "6c9731f24db7f73f248e68a54a35441b2d7bc4ec", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8412b939d1cf375c8e478e39a5ac9d7260e4c23c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8412b939d1cf375c8e478e39a5ac9d7260e4c23c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8412b939d1cf375c8e478e39a5ac9d7260e4c23c", "patch": "@@ -448,6 +448,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       LAMBDA_EXPR_CAPTURE_OPTIMIZED (in LAMBDA_EXPR)\n       IMPLICIT_CONV_EXPR_BRACED_INIT (in IMPLICIT_CONV_EXPR)\n       TINFO_VAR_DECLARED_CONSTINIT (in TEMPLATE_INFO)\n+      CALL_FROM_NEW_OR_DELETE_P (in CALL_EXPR)\n    3: (TREE_REFERENCE_EXPR) (in NON_LVALUE_EXPR) (commented-out).\n       ICS_BAD_FLAG (in _CONV)\n       FN_TRY_BLOCK_P (in TRY_BLOCK)\n@@ -3791,6 +3792,11 @@ struct GTY(()) lang_decl {\n    should be performed at instantiation time.  */\n #define KOENIG_LOOKUP_P(NODE) TREE_LANG_FLAG_0 (CALL_EXPR_CHECK (NODE))\n \n+/* In a CALL_EXPR, true for allocator calls from new or delete\n+   expressions.  */\n+#define CALL_FROM_NEW_OR_DELETE_P(NODE) \\\n+  TREE_LANG_FLAG_2 (CALL_EXPR_CHECK (NODE))\n+\n /* True if the arguments to NODE should be evaluated in left-to-right\n    order regardless of PUSH_ARGS_REVERSED.  */\n #define CALL_EXPR_ORDERED_ARGS(NODE) \\"}, {"sha": "f86cf55103976c626157364775aaf6e694efe8ad", "filename": "gcc/cp/init.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8412b939d1cf375c8e478e39a5ac9d7260e4c23c/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8412b939d1cf375c8e478e39a5ac9d7260e4c23c/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=8412b939d1cf375c8e478e39a5ac9d7260e4c23c", "patch": "@@ -3404,6 +3404,10 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t}\n     }\n \n+  tree alloc_call_expr = extract_call_expr (alloc_call);\n+  if (TREE_CODE (alloc_call_expr) == CALL_EXPR)\n+    CALL_FROM_NEW_OR_DELETE_P (alloc_call_expr) = 1;\n+\n   if (cookie_size)\n     alloc_call = maybe_wrap_new_for_constexpr (alloc_call, elt_type,\n \t\t\t\t\t       cookie_size);\n@@ -4046,6 +4050,10 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n \t\t\t\t\t      /*placement=*/NULL_TREE,\n \t\t\t\t\t      /*alloc_fn=*/NULL_TREE,\n \t\t\t\t\t      complain);\n+\n+      tree deallocate_call_expr = extract_call_expr (deallocate_expr);\n+      if (TREE_CODE (deallocate_call_expr) == CALL_EXPR)\n+\tCALL_FROM_NEW_OR_DELETE_P (deallocate_call_expr) = 1;\n     }\n \n   body = loop;\n@@ -4955,6 +4963,13 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n   if (!deleting)\n     return expr;\n \n+  if (do_delete)\n+    {\n+      tree do_delete_call_expr = extract_call_expr (do_delete);\n+      if (TREE_CODE (do_delete_call_expr) == CALL_EXPR)\n+\tCALL_FROM_NEW_OR_DELETE_P (do_delete_call_expr) = 1;\n+    }\n+\n   if (do_delete && !TREE_SIDE_EFFECTS (expr))\n     expr = do_delete;\n   else if (do_delete)"}, {"sha": "c5293582e9a92ebe92649a9b43e854f4a7d3d2ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8412b939d1cf375c8e478e39a5ac9d7260e4c23c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8412b939d1cf375c8e478e39a5ac9d7260e4c23c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8412b939d1cf375c8e478e39a5ac9d7260e4c23c", "patch": "@@ -1,5 +1,9 @@\n 2019-11-02  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/91369 - Implement P0784R7: constexpr new\n+\t* g++.dg/cpp2a/constexpr-new6.C: New test.\n+\t* g++.dg/cpp2a/constexpr-new7.C: New test.\n+\n \t* gcc.dg/pr36902.c: Terminate dg-warning regexp string.\n \n 2019-11-01  Martin Sebor  <msebor@redhat.com>"}, {"sha": "5c0c2b6f967fe4d04682eb28fcea877d4a4e1454", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new6.C", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8412b939d1cf375c8e478e39a5ac9d7260e4c23c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8412b939d1cf375c8e478e39a5ac9d7260e4c23c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new6.C?ref=8412b939d1cf375c8e478e39a5ac9d7260e4c23c", "patch": "@@ -0,0 +1,83 @@\n+// P0784R7\n+// { dg-do compile { target c++2a } }\n+\n+namespace std\n+{\n+  inline namespace _8 { }\n+  namespace _8 {\n+\n+    typedef __SIZE_TYPE__ size_t;\n+\n+    template <typename T>\n+    struct allocator\n+    {\n+      constexpr allocator () noexcept {}\n+\n+      constexpr T *allocate (size_t n)\n+      { return static_cast<T *> (::operator new (n * sizeof(T))); }\n+\n+      constexpr void\n+      deallocate (T *p, size_t n)\n+      { ::operator delete (p); }\n+    };\n+\n+    template <typename T, typename U = T &&>\n+    U __declval (int);\n+    template <typename T>\n+    T __declval (long);\n+    template <typename T>\n+    auto declval () noexcept -> decltype (__declval<T> (0));\n+\n+    template <typename T>\n+    struct remove_reference\n+    { typedef T type; };\n+    template <typename T>\n+    struct remove_reference<T &>\n+    { typedef T type; };\n+    template <typename T>\n+    struct remove_reference<T &&>\n+    { typedef T type; };\n+\n+    template <typename T>\n+    constexpr T &&\n+    forward (typename std::remove_reference<T>::type &t) noexcept\n+    { return static_cast<T&&> (t); }\n+\n+    template<typename T>\n+    constexpr T &&\n+    forward (typename std::remove_reference<T>::type &&t) noexcept\n+    { return static_cast<T&&> (t); }\n+\n+    template <typename T, typename... A>\n+    constexpr auto\n+    construct_at (T *l, A &&... a)\n+    noexcept (noexcept (::new ((void *) 0) T (std::declval<A> ()...)))\n+    -> decltype (::new ((void *) 0) T (std::declval<A> ()...))\n+    { return ::new ((void *) l) T (std::forward<A> (a)...); }\n+\n+    template <typename T>\n+    constexpr inline void\n+    destroy_at (T *l)\n+    { l->~T (); }\n+  }\n+}\n+\n+inline void *operator new (std::size_t, void *p) noexcept\n+{ return p; }\n+\n+constexpr bool\n+foo ()\n+{\n+  std::allocator<int> a;\n+  auto p = a.allocate (2);\n+  std::construct_at (p, 1);\n+  std::construct_at (p + 1, 2);\n+  if (p[0] != 1 || p[1] != 2)\n+    throw 1;\n+  std::destroy_at (p);\n+  std::destroy_at (p + 1);\n+  a.deallocate (p, 2);\n+  return true;\n+}\n+\n+static_assert (foo ());"}, {"sha": "5fc130e4432dcd1267c7b989e83fbb322692d516", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new7.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8412b939d1cf375c8e478e39a5ac9d7260e4c23c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8412b939d1cf375c8e478e39a5ac9d7260e4c23c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new7.C?ref=8412b939d1cf375c8e478e39a5ac9d7260e4c23c", "patch": "@@ -0,0 +1,33 @@\n+// P0784R7\n+// { dg-do compile { target c++2a } }\n+\n+namespace std\n+{\n+  typedef __SIZE_TYPE__ size_t;\n+}\n+\n+inline void *operator new (std::size_t, void *p) noexcept\n+{ return p; }\n+void *operator new (std::size_t) noexcept;\n+\n+constexpr bool\n+foo ()\n+{\n+  auto p = static_cast<int *> (::operator new (sizeof (int)));\t// { dg-error \"call to non-'constexpr' function\" }\n+  *p = 1;\n+  ::operator delete (p);\n+  return false;\n+}\n+\n+struct S { constexpr S () : s (0) {} int s; };\n+\n+constexpr bool\n+bar ()\n+{\n+  auto p = static_cast<S *> (::operator new (sizeof (S)));\t// { dg-error \"call to non-'constexpr' function\" }\n+  auto q = new (p) S ();\n+  q->s++;\n+  q->~S ();\n+  ::operator delete (p);\n+  return false;\n+}"}]}