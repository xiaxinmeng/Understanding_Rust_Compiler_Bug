{"sha": "0dfa7ba12c7cbdfc177b07f990a859761dc36e25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRmYTdiYTEyYzdjYmRmYzE3N2IwN2Y5OTBhODU5NzYxZGMzNmUyNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-07-25T16:16:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-07-25T16:16:32Z"}, "message": "stmt.c (expand_case): Try to narrow the index type if it's larger than a word.\n\n\t* stmt.c (expand_case): Try to narrow the index type if it's larger\n\tthan a word.  Tidy up.\n\nFrom-SVN: r273805", "tree": {"sha": "90a092de84a26f643015a197a2e32ad6ed8bf2e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90a092de84a26f643015a197a2e32ad6ed8bf2e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dfa7ba12c7cbdfc177b07f990a859761dc36e25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dfa7ba12c7cbdfc177b07f990a859761dc36e25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dfa7ba12c7cbdfc177b07f990a859761dc36e25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dfa7ba12c7cbdfc177b07f990a859761dc36e25/comments", "author": null, "committer": null, "parents": [{"sha": "5ab2422adf894bdf84deed8c7c0557c16d6dca2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab2422adf894bdf84deed8c7c0557c16d6dca2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ab2422adf894bdf84deed8c7c0557c16d6dca2b"}], "stats": {"total": 101, "additions": 83, "deletions": 18}, "files": [{"sha": "336e9eef2c32a1be2b3d843d9c6d6a5ddb7663ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfa7ba12c7cbdfc177b07f990a859761dc36e25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfa7ba12c7cbdfc177b07f990a859761dc36e25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0dfa7ba12c7cbdfc177b07f990a859761dc36e25", "patch": "@@ -1,3 +1,8 @@\n+2019-07-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* stmt.c (expand_case): Try to narrow the index type if it's larger\n+\tthan a word.  Tidy up.\n+\n 2019-07-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* cif-code.def (NEVER_CALL): New code."}, {"sha": "17f43d14d88a993c85a9a99222d5b8c350cfe174", "filename": "gcc/stmt.c", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfa7ba12c7cbdfc177b07f990a859761dc36e25/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfa7ba12c7cbdfc177b07f990a859761dc36e25/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=0dfa7ba12c7cbdfc177b07f990a859761dc36e25", "patch": "@@ -885,6 +885,7 @@ expand_case (gswitch *stmt)\n   tree index_type = TREE_TYPE (index_expr);\n   tree elt;\n   basic_block bb = gimple_bb (stmt);\n+  gimple *def_stmt;\n \n   auto_vec<simple_case_node> case_list;\n \n@@ -918,6 +919,31 @@ expand_case (gswitch *stmt)\n   else\n     maxval = fold_convert (index_type, CASE_LOW (elt));\n \n+  /* Try to narrow the index type if it's larger than a word.\n+     That is mainly for -O0 where an equivalent optimization\n+     done by forward propagation is not run and is aimed at\n+     avoiding a call to a comparison routine of libgcc.  */\n+  if (TYPE_PRECISION (index_type) > BITS_PER_WORD\n+      && TREE_CODE (index_expr) == SSA_NAME\n+      && (def_stmt = SSA_NAME_DEF_STMT (index_expr))\n+      && is_gimple_assign (def_stmt)\n+      && gimple_assign_rhs_code (def_stmt) == NOP_EXPR)\n+    {\n+      tree inner_index_expr = gimple_assign_rhs1 (def_stmt);\n+      tree inner_index_type = TREE_TYPE (inner_index_expr);\n+\n+      if (INTEGRAL_TYPE_P (inner_index_type)\n+\t  && TYPE_PRECISION (inner_index_type) <= BITS_PER_WORD\n+\t  && int_fits_type_p (minval, inner_index_type)\n+\t  && int_fits_type_p (maxval, inner_index_type))\n+\t{\n+\t  index_expr = inner_index_expr;\n+\t  index_type = inner_index_type;\n+\t  minval = fold_convert (index_type, minval);\n+\t  maxval = fold_convert (index_type, maxval);\n+\t}\n+    }\n+\n   /* Compute span of values.  */\n   range = fold_build2 (MINUS_EXPR, index_type, maxval, minval);\n \n@@ -969,27 +995,22 @@ expand_case (gswitch *stmt)\n \n   rtx_insn *before_case = get_last_insn ();\n \n-  /* Decide how to expand this switch.\n-     The two options at this point are a dispatch table (casesi or\n-     tablejump) or a decision tree.  */\n-\n+  /* If the default case is unreachable, then set default_label to NULL\n+     so that we omit the range check when generating the dispatch table.\n+     We also remove the edge to the unreachable default case.  The block\n+     itself will be automatically removed later.  */\n+  if (EDGE_COUNT (default_edge->dest->succs) == 0\n+      && gimple_seq_unreachable_p (bb_seq (default_edge->dest)))\n     {\n-      /* If the default case is unreachable, then set default_label to NULL\n-\t so that we omit the range check when generating the dispatch table.\n-\t We also remove the edge to the unreachable default case.  The block\n-\t itself will be automatically removed later.  */\n-      if (EDGE_COUNT (default_edge->dest->succs) == 0\n-\t  && gimple_seq_unreachable_p (bb_seq (default_edge->dest)))\n-\t{\n-\t  default_label = NULL;\n-\t  remove_edge (default_edge);\n-\t  default_edge = NULL;\n-\t}\n-      emit_case_dispatch_table (index_expr, index_type,\n-\t\t\t\tcase_list, default_label, default_edge,\n-\t\t\t\tminval, maxval, range, bb);\n+      default_label = NULL;\n+      remove_edge (default_edge);\n+      default_edge = NULL;\n     }\n \n+  emit_case_dispatch_table (index_expr, index_type,\n+\t\t\t    case_list, default_label, default_edge,\n+\t\t\t    minval, maxval, range, bb);\n+\n   reorder_insns (NEXT_INSN (before_case), get_last_insn (), before_case);\n \n   free_temp_slots ();"}, {"sha": "948acc0c771a719521470bb44044650f01beb4bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfa7ba12c7cbdfc177b07f990a859761dc36e25/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfa7ba12c7cbdfc177b07f990a859761dc36e25/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0dfa7ba12c7cbdfc177b07f990a859761dc36e25", "patch": "@@ -1,3 +1,7 @@\n+2019-07-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/case_optimization3.ad[sb]: New test.\n+\n 2019-07-25  Martin Liska  <mliska@suse.cz\n \t    Dominik Infuhr  <dominik.infuehr@theobroma-systems.com>\n "}, {"sha": "6887f325d4d59fd06efa92870e85f9533add5343", "filename": "gcc/testsuite/gnat.dg/case_optimization3.adb", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfa7ba12c7cbdfc177b07f990a859761dc36e25/gcc%2Ftestsuite%2Fgnat.dg%2Fcase_optimization3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfa7ba12c7cbdfc177b07f990a859761dc36e25/gcc%2Ftestsuite%2Fgnat.dg%2Fcase_optimization3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcase_optimization3.adb?ref=0dfa7ba12c7cbdfc177b07f990a859761dc36e25", "patch": "@@ -0,0 +1,25 @@\n+-- { dg-do compile }\n+\n+package body Case_Optimization3 is\n+\n+   procedure Proc (Val : T_RANGE) is\n+   begin\n+      case Val is\n+         when 0 =>\n+            raise Program_Error;\n+         when 1 =>\n+            null;\n+         when 2 =>\n+            null;\n+         when 3 =>\n+            null;\n+         when 4 =>\n+            null;\n+         when others =>\n+            null;\n+      end case;\n+   end;\n+\n+end Case_Optimization3;\n+\n+-- { dg-final { scan-assembler-not \"__ucmpdi2\" } }"}, {"sha": "3e3c769c2f5f76d9eb86c3ee57189fe964c6ac87", "filename": "gcc/testsuite/gnat.dg/case_optimization3.ads", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfa7ba12c7cbdfc177b07f990a859761dc36e25/gcc%2Ftestsuite%2Fgnat.dg%2Fcase_optimization3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfa7ba12c7cbdfc177b07f990a859761dc36e25/gcc%2Ftestsuite%2Fgnat.dg%2Fcase_optimization3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcase_optimization3.ads?ref=0dfa7ba12c7cbdfc177b07f990a859761dc36e25", "patch": "@@ -0,0 +1,10 @@\n+package Case_Optimization3 is\n+\n+   type T_UINT32 is range 0 .. (2 ** 32) - 1;\n+   for T_UINT32'Size use 32;\n+\n+   subtype T_RANGE is T_UINT32 range 0 .. 7;\n+\n+   procedure Proc (Val : T_RANGE);\n+\n+end Case_Optimization3;"}]}