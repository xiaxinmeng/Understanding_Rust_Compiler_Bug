{"sha": "dbdfaaba50c5d7d85c1e64751988d00114fd7d6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJkZmFhYmE1MGM1ZDdkODVjMWU2NDc1MTk4OGQwMDExNGZkN2Q2Yg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-08-27T12:17:54Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-08-27T12:17:54Z"}, "message": "Fix probabilities for jump table (PR tree-optimization/86702).\n\n2018-08-27  Martin Liska  <mliska@suse.cz>\n\n        PR tree-optimization/86702\n\t* tree-switch-conversion.c (jump_table_cluster::emit):\n        Make probabilities even for values in jump table\n        according to number of cases handled.\n\t(switch_decision_tree::compute_cases_per_edge): Pass\n        argument to reset_out_edges_aux function.\n\t(switch_decision_tree::analyze_switch_statement): Likewise.\n\t* tree-switch-conversion.h (switch_decision_tree::reset_out_edges_aux):\n        Make it static.\n\nFrom-SVN: r263877", "tree": {"sha": "5c8f893e4a884022f9007c23ad181990fb45cdce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c8f893e4a884022f9007c23ad181990fb45cdce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbdfaaba50c5d7d85c1e64751988d00114fd7d6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbdfaaba50c5d7d85c1e64751988d00114fd7d6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbdfaaba50c5d7d85c1e64751988d00114fd7d6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbdfaaba50c5d7d85c1e64751988d00114fd7d6b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "61ff5d6f4ed5000ee427e054ee803bc8f5535bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ff5d6f4ed5000ee427e054ee803bc8f5535bdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61ff5d6f4ed5000ee427e054ee803bc8f5535bdd"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "b39f12fe03702e53cbfb1c62a5e83144e1736599", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdfaaba50c5d7d85c1e64751988d00114fd7d6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdfaaba50c5d7d85c1e64751988d00114fd7d6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbdfaaba50c5d7d85c1e64751988d00114fd7d6b", "patch": "@@ -1,3 +1,15 @@\n+2018-08-27  Martin Liska  <mliska@suse.cz>\n+\n+        PR tree-optimization/86702\n+\t* tree-switch-conversion.c (jump_table_cluster::emit):\n+        Make probabilities even for values in jump table\n+        according to number of cases handled.\n+\t(switch_decision_tree::compute_cases_per_edge): Pass\n+        argument to reset_out_edges_aux function.\n+\t(switch_decision_tree::analyze_switch_statement): Likewise.\n+\t* tree-switch-conversion.h (switch_decision_tree::reset_out_edges_aux):\n+        Make it static.\n+\n 2018-08-27  Martin Liska  <mliska@suse.cz>\n \n \t* cfgexpand.c (expand_asm_stmt): Use label_to_block and pass"}, {"sha": "00a463b1dde8497c279c0bd2ecd9252ddf383983", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdfaaba50c5d7d85c1e64751988d00114fd7d6b/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdfaaba50c5d7d85c1e64751988d00114fd7d6b/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=dbdfaaba50c5d7d85c1e64751988d00114fd7d6b", "patch": "@@ -1061,6 +1061,9 @@ void\n jump_table_cluster::emit (tree index_expr, tree,\n \t\t\t  tree default_label_expr, basic_block default_bb)\n {\n+  unsigned HOST_WIDE_INT range = get_range (get_low (), get_high ());\n+  unsigned HOST_WIDE_INT nondefault_range = 0;\n+\n   /* For jump table we just emit a new gswitch statement that will\n      be latter lowered to jump table.  */\n   auto_vec <tree> labels;\n@@ -1077,6 +1080,39 @@ jump_table_cluster::emit (tree index_expr, tree,\n \t\t\t\t    unshare_expr (default_label_expr), labels);\n   gimple_stmt_iterator gsi = gsi_start_bb (m_case_bb);\n   gsi_insert_after (&gsi, s, GSI_NEW_STMT);\n+\n+  /* Set up even probabilities for all cases.  */\n+  for (unsigned i = 0; i < m_cases.length (); i++)\n+    {\n+      simple_cluster *sc = static_cast<simple_cluster *> (m_cases[i]);\n+      edge case_edge = find_edge (m_case_bb, sc->m_case_bb);\n+      unsigned HOST_WIDE_INT case_range\n+\t= sc->get_range (sc->get_low (), sc->get_high ());\n+      nondefault_range += case_range;\n+\n+      /* case_edge->aux is number of values in a jump-table that are covered\n+\t by the case_edge.  */\n+      case_edge->aux = (void *) ((intptr_t) (case_edge->aux) + case_range);\n+    }\n+\n+  edge default_edge = gimple_switch_default_edge (cfun, s);\n+  default_edge->probability = profile_probability::never ();\n+\n+  for (unsigned i = 0; i < m_cases.length (); i++)\n+    {\n+      simple_cluster *sc = static_cast<simple_cluster *> (m_cases[i]);\n+      edge case_edge = find_edge (m_case_bb, sc->m_case_bb);\n+      case_edge->probability\n+\t= profile_probability::always ().apply_scale ((intptr_t)case_edge->aux,\n+\t\t\t\t\t\t      range);\n+    }\n+\n+  /* Number of non-default values is probability of default edge.  */\n+  default_edge->probability\n+    += profile_probability::always ().apply_scale (nondefault_range,\n+\t\t\t\t\t\t   range).invert ();\n+\n+  switch_decision_tree::reset_out_edges_aux (s);\n }\n \n /* Find jump tables of given CLUSTERS, where all members of the vector\n@@ -1568,7 +1604,7 @@ bit_test_cluster::hoist_edge_and_branch_if_true (gimple_stmt_iterator *gsip,\n void\n switch_decision_tree::compute_cases_per_edge ()\n {\n-  reset_out_edges_aux ();\n+  reset_out_edges_aux (m_switch);\n   int ncases = gimple_switch_num_labels (m_switch);\n   for (int i = ncases - 1; i >= 1; --i)\n     {\n@@ -1610,7 +1646,7 @@ switch_decision_tree::analyze_switch_statement ()\n       m_case_bbs.quick_push (case_edge->dest);\n     }\n \n-  reset_out_edges_aux ();\n+  reset_out_edges_aux (m_switch);\n \n   /* Find jump table clusters.  */\n   vec<cluster *> output = jump_table_cluster::find_jump_tables (clusters);"}, {"sha": "af2f47a07e69998fb9f43308b8bed671892753de", "filename": "gcc/tree-switch-conversion.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdfaaba50c5d7d85c1e64751988d00114fd7d6b/gcc%2Ftree-switch-conversion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdfaaba50c5d7d85c1e64751988d00114fd7d6b/gcc%2Ftree-switch-conversion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.h?ref=dbdfaaba50c5d7d85c1e64751988d00114fd7d6b", "patch": "@@ -513,10 +513,6 @@ struct switch_decision_tree\n   /* Attempt to expand CLUSTERS as a decision tree.  Return true when\n      expanded.  */\n   bool try_switch_expansion (vec<cluster *> &clusters);\n-\n-  /* Reset the aux field of all outgoing edges of switch basic block.  */\n-  inline void reset_out_edges_aux ();\n-\n   /* Compute the number of case labels that correspond to each outgoing edge of\n      switch statement.  Record this information in the aux field of the edge.\n      */\n@@ -576,6 +572,9 @@ struct switch_decision_tree\n \t\t\t\t\t      basic_block label_bb,\n \t\t\t\t\t      profile_probability prob);\n \n+  /* Reset the aux field of all outgoing edges of switch basic block.  */\n+  static inline void reset_out_edges_aux (gswitch *swtch);\n+\n   /* Switch statement.  */\n   gswitch *m_switch;\n \n@@ -838,9 +837,9 @@ struct switch_conversion\n };\n \n void\n-switch_decision_tree::reset_out_edges_aux ()\n+switch_decision_tree::reset_out_edges_aux (gswitch *swtch)\n {\n-  basic_block bb = gimple_bb (m_switch);\n+  basic_block bb = gimple_bb (swtch);\n   edge e;\n   edge_iterator ei;\n   FOR_EACH_EDGE (e, ei, bb->succs)"}]}