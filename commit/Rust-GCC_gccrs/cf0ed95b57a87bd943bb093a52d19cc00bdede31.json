{"sha": "cf0ed95b57a87bd943bb093a52d19cc00bdede31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YwZWQ5NWI1N2E4N2JkOTQzYmIwOTNhNTJkMTljYzAwYmRlZGUzMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-04-15T19:32:07Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-04-15T19:32:07Z"}, "message": "i386.md (*cmpi<FPCMP:unord><MODEF:mode>_mixed): Merge with *cmpi<FPCMP:unord><MODEF:mode>_sse using enabled attribute.\n\n\t* config/i386/i386.md (*cmpi<FPCMP:unord><MODEF:mode>_mixed):\n\tMerge with *cmpi<FPCMP:unord><MODEF:mode>_sse using enabled attribute.\n\t(*extendsfdf2_mixed): Merge with *extendsfdf2_sse using enabled\n\tattribute.\n\t(*truncdfsf_fast_mixed): Merge with *truncdfsf_fast_sse using\n\tenabled attribute.\n\t(*float<SWI48:mode><MODEF:mode>2_mixed): Rename from\n\t*float<SWI48:mode><MODEF:mode>2_sse.\n\t(*absneg<mode>2_mixed): Merge with *absneg<mode>2_sse using\n\tenabled attribute.\n\t(*fop_<mode>_comm_mixed): Merge with *fop_<mode>_comm_sse using\n\tenabled attribute.\n\nFrom-SVN: r222131", "tree": {"sha": "7de092f3ace5a3f0e09d19e42046d7f33865b863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7de092f3ace5a3f0e09d19e42046d7f33865b863"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf0ed95b57a87bd943bb093a52d19cc00bdede31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0ed95b57a87bd943bb093a52d19cc00bdede31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0ed95b57a87bd943bb093a52d19cc00bdede31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0ed95b57a87bd943bb093a52d19cc00bdede31/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20e38fcf4ff4d96d4d12d2939a94495166811203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e38fcf4ff4d96d4d12d2939a94495166811203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20e38fcf4ff4d96d4d12d2939a94495166811203"}], "stats": {"total": 145, "additions": 58, "deletions": 87}, "files": [{"sha": "6571c1f15580badd872ec2127626121073b53fa3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0ed95b57a87bd943bb093a52d19cc00bdede31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0ed95b57a87bd943bb093a52d19cc00bdede31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf0ed95b57a87bd943bb093a52d19cc00bdede31", "patch": "@@ -1,3 +1,18 @@\n+2015-04-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*cmpi<FPCMP:unord><MODEF:mode>_mixed):\n+\tMerge with *cmpi<FPCMP:unord><MODEF:mode>_sse using enabled attribute.\n+\t(*extendsfdf2_mixed): Merge with *extendsfdf2_sse using enabled\n+\tattribute.\n+\t(*truncdfsf_fast_mixed): Merge with *truncdfsf_fast_sse using\n+\tenabled attribute.\n+\t(*float<SWI48:mode><MODEF:mode>2_mixed): Rename from\n+\t*float<SWI48:mode><MODEF:mode>2_sse.\n+\t(*absneg<mode>2_mixed): Merge with *absneg<mode>2_sse using\n+\tenabled attribute.\n+\t(*fop_<mode>_comm_mixed): Merge with *fop_<mode>_comm_sse using\n+\tenabled attribute.\n+\n 2015-04-15  Tom de Vries  <tom@codesourcery.com>\n \n \tPR other/65487"}, {"sha": "922b2b2d38c13edb8f76e61f4eb326f8e4c2eedc", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 43, "deletions": 87, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0ed95b57a87bd943bb093a52d19cc00bdede31/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0ed95b57a87bd943bb093a52d19cc00bdede31/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=cf0ed95b57a87bd943bb093a52d19cc00bdede31", "patch": "@@ -1641,48 +1641,28 @@\n \t(compare:FPCMP\n \t  (match_operand:MODEF 0 \"register_operand\" \"f,x\")\n \t  (match_operand:MODEF 1 \"nonimmediate_operand\" \"f,xm\")))]\n-  \"TARGET_MIX_SSE_I387\n-   && SSE_FLOAT_MODE_P (<MODEF:MODE>mode)\"\n+  \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\"\n   \"* return output_fp_compare (insn, operands, true,\n \t\t\t       <FPCMP:MODE>mode == CCFPUmode);\"\n   [(set_attr \"type\" \"fcmp,ssecomi\")\n    (set_attr \"prefix\" \"orig,maybe_vex\")\n    (set_attr \"mode\" \"<MODEF:MODE>\")\n-   (set (attr \"prefix_rep\")\n-\t(if_then_else (eq_attr \"type\" \"ssecomi\")\n-\t\t      (const_string \"0\")\n-\t\t      (const_string \"*\")))\n+   (set_attr \"prefix_rep\" \"*,0\")\n    (set (attr \"prefix_data16\")\n-\t(cond [(eq_attr \"type\" \"fcmp\")\n+\t(cond [(eq_attr \"alternative\" \"0\")\n \t\t (const_string \"*\")\n \t       (eq_attr \"mode\" \"DF\")\n \t\t (const_string \"1\")\n \t      ]\n \t      (const_string \"0\")))\n    (set_attr \"athlon_decode\" \"vector\")\n    (set_attr \"amdfam10_decode\" \"direct\")\n-   (set_attr \"bdver1_decode\" \"double\")])\n-\n-(define_insn \"*cmpi<FPCMP:unord><MODEF:mode>_sse\"\n-  [(set (reg:FPCMP FLAGS_REG)\n-\t(compare:FPCMP\n-\t  (match_operand:MODEF 0 \"register_operand\" \"x\")\n-\t  (match_operand:MODEF 1 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE_MATH\n-   && SSE_FLOAT_MODE_P (<MODEF:MODE>mode)\"\n-  \"* return output_fp_compare (insn, operands, true,\n-\t\t\t       <FPCMP:MODE>mode == CCFPUmode);\"\n-  [(set_attr \"type\" \"ssecomi\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"<MODEF:MODE>\")\n-   (set_attr \"prefix_rep\" \"0\")\n-   (set (attr \"prefix_data16\")\n-\t(if_then_else (eq_attr \"mode\" \"DF\")\n-\t\t      (const_string \"1\")\n-\t\t      (const_string \"0\")))\n-   (set_attr \"athlon_decode\" \"vector\")\n-   (set_attr \"amdfam10_decode\" \"direct\")\n-   (set_attr \"bdver1_decode\" \"double\")])\n+   (set_attr \"bdver1_decode\" \"double\")\n+   (set (attr \"enabled\")\n+     (cond [(eq_attr \"alternative\" \"0\")\n+              (symbol_ref \"TARGET_MIX_SSE_I387\")\n+\t   ]\n+           (symbol_ref \"true\")))])\n \n (define_insn \"*cmpi<FPCMP:unord><X87MODEF:mode>_i387\"\n   [(set (reg:FPCMP FLAGS_REG)\n@@ -4051,7 +4031,7 @@\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,m,x\")\n         (float_extend:DF\n \t  (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f,xm\")))]\n-  \"TARGET_SSE2 && TARGET_MIX_SSE_I387\"\n+  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n {\n   switch (which_alternative)\n     {\n@@ -4068,16 +4048,12 @@\n }\n   [(set_attr \"type\" \"fmov,fmov,ssecvt\")\n    (set_attr \"prefix\" \"orig,orig,maybe_vex\")\n-   (set_attr \"mode\" \"SF,XF,DF\")])\n-\n-(define_insn \"*extendsfdf2_sse\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=x\")\n-        (float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n-  \"%vcvtss2sd\\t{%1, %d0|%d0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"DF\")])\n+   (set_attr \"mode\" \"SF,XF,DF\")\n+   (set (attr \"enabled\")\n+     (cond [(eq_attr \"alternative\" \"0,1\")\n+              (symbol_ref \"TARGET_MIX_SSE_I387\")\n+\t   ]\n+           (symbol_ref \"true\")))])\n \n (define_insn \"*extendsfdf2_i387\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,m\")\n@@ -4205,11 +4181,13 @@\n \t\t   (float_truncate:SF (match_operand:DF 1)))\n \t      (clobber (match_operand:SF 2))])])\n \n+;; SSE alternative doesn't depend on flag_unsafe_math_optimizations,\n+;; because nothing we do there is unsafe.\n (define_insn \"*truncdfsf_fast_mixed\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=fm,x\")\n         (float_truncate:SF\n           (match_operand:DF 1 \"nonimmediate_operand\" \"f  ,xm\")))]\n-  \"TARGET_SSE2 && TARGET_MIX_SSE_I387 && flag_unsafe_math_optimizations\"\n+  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n {\n   switch (which_alternative)\n     {\n@@ -4223,19 +4201,13 @@\n }\n   [(set_attr \"type\" \"fmov,ssecvt\")\n    (set_attr \"prefix\" \"orig,maybe_vex\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-;; Yes, this one doesn't depend on flag_unsafe_math_optimizations,\n-;; because nothing we do here is unsafe.\n-(define_insn \"*truncdfsf_fast_sse\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=x\")\n-        (float_truncate:SF\n-          (match_operand:DF 1 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n-  \"%vcvtsd2ss\\t{%1, %d0|%d0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"SF\")])\n+   (set_attr \"mode\" \"SF\")\n+   (set (attr \"enabled\")\n+     (cond [(eq_attr \"alternative\" \"0\")\n+              (symbol_ref \"TARGET_MIX_SSE_I387\n+\t\t\t   && flag_unsafe_math_optimizations\")\n+\t   ]\n+           (symbol_ref \"true\")))])\n \n (define_insn \"*truncdfsf_fast_i387\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=fm\")\n@@ -4863,7 +4835,7 @@\n     }\n })\n \n-(define_insn \"*float<SWI48:mode><MODEF:mode>2_sse\"\n+(define_insn \"*float<SWI48:mode><MODEF:mode>2_mixed\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=f,x,x\")\n \t(float:MODEF\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"m,r,m\")))]\n@@ -8836,17 +8808,13 @@\n \t  [(match_operand:MODEF 1 \"register_operand\" \"0,x,0,0\")]))\n    (use (match_operand:<ssevecmode> 2 \"nonimmediate_operand\" \"xm,0,X,X\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_MIX_SSE_I387 && SSE_FLOAT_MODE_P (<MODE>mode)\"\n-  \"#\")\n-\n-(define_insn \"*absneg<mode>2_sse\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x,!r\")\n-\t(match_operator:MODEF 3 \"absneg_operator\"\n-\t  [(match_operand:MODEF 1 \"register_operand\" \"0 ,x,0\")]))\n-   (use (match_operand:<ssevecmode> 2 \"register_operand\" \"xm,0,X\"))\n-   (clobber (reg:CC FLAGS_REG))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n-  \"#\")\n+  \"#\"\n+  [(set (attr \"enabled\")\n+     (cond [(eq_attr \"alternative\" \"2\")\n+              (symbol_ref \"TARGET_MIX_SSE_I387\")\n+\t   ]\n+           (symbol_ref \"true\")))])\n \n (define_insn \"*absneg<mode>2_i387\"\n   [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f,!r\")\n@@ -13594,11 +13562,11 @@\n ;; so use special patterns for add and mull.\n \n (define_insn \"*fop_<mode>_comm_mixed\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=f,x,x\")\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=f,x,v\")\n \t(match_operator:MODEF 3 \"binary_fp_operator\"\n-\t  [(match_operand:MODEF 1 \"nonimmediate_operand\" \"%0,0,x\")\n-\t   (match_operand:MODEF 2 \"nonimmediate_operand\" \"fm,xm,xm\")]))]\n-  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_MIX_SSE_I387\n+\t  [(match_operand:MODEF 1 \"nonimmediate_operand\" \"%0,0,v\")\n+\t   (match_operand:MODEF 2 \"nonimmediate_operand\" \"fm,xm,vm\")]))]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n    && COMMUTATIVE_ARITH_P (operands[3])\n    && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"* return output_387_binary_op (insn, operands);\"\n@@ -13612,24 +13580,12 @@\n \t      (const_string \"fop\"))))\n    (set_attr \"isa\" \"*,noavx,avx\")\n    (set_attr \"prefix\" \"orig,orig,vex\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*fop_<mode>_comm_sse\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,v\")\n-\t(match_operator:MODEF 3 \"binary_fp_operator\"\n-\t  [(match_operand:MODEF 1 \"nonimmediate_operand\" \"%0,v\")\n-\t   (match_operand:MODEF 2 \"nonimmediate_operand\" \"xm,vm\")]))]\n-  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-   && COMMUTATIVE_ARITH_P (operands[3])\n-   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\")\n-        (if_then_else (match_operand:MODEF 3 \"mult_operator\")\n-\t   (const_string \"ssemul\")\n-\t   (const_string \"sseadd\")))\n-   (set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set (attr \"enabled\")\n+     (cond [(eq_attr \"alternative\" \"0\")\n+              (symbol_ref \"TARGET_MIX_SSE_I387\")\n+\t   ]\n+           (const_string \"*\")))])\n \n (define_insn \"*fop_<mode>_comm_i387\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=f\")"}]}