{"sha": "fed8129b153e3c83c3038cc3ddc71730cbb7d47e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVkODEyOWIxNTNlM2M4M2MzMDM4Y2MzZGRjNzE3MzBjYmI3ZDQ3ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@wasabisystems.com", "date": "2004-03-18T03:16:37Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2004-03-18T03:16:37Z"}, "message": "pex-unix.c (pexecute): Use vfork instead of fork, with appropriate changes to make this safe.\n\n\t* pex-unix.c (pexecute): Use vfork instead of fork, with\n\tappropriate changes to make this safe.\n\t* pex-common.h (STDERR_FILE_NO): Define.\n\nFrom-SVN: r79617", "tree": {"sha": "6811fe401ca011fb4fb3791c0dad4ada7a9a0fbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6811fe401ca011fb4fb3791c0dad4ada7a9a0fbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fed8129b153e3c83c3038cc3ddc71730cbb7d47e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed8129b153e3c83c3038cc3ddc71730cbb7d47e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fed8129b153e3c83c3038cc3ddc71730cbb7d47e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed8129b153e3c83c3038cc3ddc71730cbb7d47e/comments", "author": null, "committer": null, "parents": [{"sha": "e8190aa2d4f92ba59fe8b0e955d926df0ed1bea8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8190aa2d4f92ba59fe8b0e955d926df0ed1bea8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8190aa2d4f92ba59fe8b0e955d926df0ed1bea8"}], "stats": {"total": 90, "additions": 73, "deletions": 17}, "files": [{"sha": "2dce4d82d0243736a66c0cf454fcaeaa20af986f", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed8129b153e3c83c3038cc3ddc71730cbb7d47e/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed8129b153e3c83c3038cc3ddc71730cbb7d47e/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=fed8129b153e3c83c3038cc3ddc71730cbb7d47e", "patch": "@@ -1,5 +1,9 @@\n 2004-03-17  Ian Lance Taylor  <ian@wasabisystems.com>\n \n+\t* pex-unix.c (pexecute): Use vfork instead of fork, with\n+\tappropriate changes to make this safe.\n+\t* pex-common.h (STDERR_FILE_NO): Define.\n+\n \t* Makefile.in: Clean up REQUIRED_OFILES and CONFIGURED_OFILES for\n \tan 80 column screen.  Run maint-deps.\n "}, {"sha": "df3c0f6519c3329de93ed071623c201c1e6ae18b", "filename": "libiberty/pex-common.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed8129b153e3c83c3038cc3ddc71730cbb7d47e/libiberty%2Fpex-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed8129b153e3c83c3038cc3ddc71730cbb7d47e/libiberty%2Fpex-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-common.h?ref=fed8129b153e3c83c3038cc3ddc71730cbb7d47e", "patch": "@@ -1,6 +1,6 @@\n /* Utilities to execute a program in a subprocess (possibly linked by pipes\n    with other subprocesses), and wait for it.  Shared logic.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004\n    Free Software Foundation, Inc.\n \n This file is part of the libiberty library.\n@@ -33,6 +33,9 @@ Boston, MA 02111-1307, USA.  */\n /* stdout file number.  */\n #define STDOUT_FILE_NO 1\n \n+/* stderr file number.  */\n+#define STDERR_FILE_NO 2\n+\n /* value of `pipe': port index for reading.  */\n #define READ_PORT 0\n "}, {"sha": "ddbed8f4a05cf175c4e2fbb9bf134f9a71e6cb15", "filename": "libiberty/pex-unix.c", "status": "modified", "additions": 65, "deletions": 16, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed8129b153e3c83c3038cc3ddc71730cbb7d47e/libiberty%2Fpex-unix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed8129b153e3c83c3038cc3ddc71730cbb7d47e/libiberty%2Fpex-unix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-unix.c?ref=fed8129b153e3c83c3038cc3ddc71730cbb7d47e", "patch": "@@ -1,7 +1,7 @@\n /* Utilities to execute a program in a subprocess (possibly linked by pipes\n    with other subprocesses), and wait for it.  Generic Unix version\n    (also used for UWIN and VMS).\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004\n    Free Software Foundation, Inc.\n \n This file is part of the libiberty library.\n@@ -44,28 +44,66 @@ extern int errno;\n #define waitpid(pid, status, flags) wait(status)\n #endif\n \n-extern int execv ();\n-extern int execvp ();\n+#ifdef vfork /* Autoconf may define this to fork for us. */\n+# define VFORK_STRING \"fork\"\n+#else\n+# define VFORK_STRING \"vfork\"\n+#endif\n+#ifdef HAVE_VFORK_H\n+#include <vfork.h>\n+#endif\n+#ifdef VMS\n+#define vfork() (decc$$alloc_vfork_blocks() >= 0 ? \\\n+               lib$get_current_invo_context(decc$$get_vfork_jmpbuf()) : -1)\n+#endif /* VMS */\n+\n+/* Execute a program, possibly setting up pipes to programs executed\n+   via other calls to this function.\n+\n+   This version of the function uses vfork.  In general vfork is\n+   similar to setjmp/longmp, in that any variable which is modified by\n+   the child process has an indeterminate value in the parent process.\n+   We follow a safe approach here by not modifying any variables at\n+   all in the child process (with the possible exception of variables\n+   modified by xstrerror if exec fails, but this is unlikely to be\n+   detectable).\n+\n+   We work a little bit harder to avoid gcc warnings.  gcc will warn\n+   about any automatic variable which is live at the time of the\n+   vfork, which is non-volatile, and which is either set more than\n+   once or is an argument to the function.  This warning isn't quite\n+   right, since what we really care about is whether the variable is\n+   live at the time of the vfork and set afterward by the child\n+   process, but gcc only checks whether the variable is set more than\n+   once.  To avoid this warning, we ensure that any variable which is\n+   live at the time of the vfork (i.e., used after the vfork) is set\n+   exactly once and is not an argument, or is marked volatile.  */\n \n int\n-pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n+pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg,\n+\t  flagsarg)\n      const char *program;\n      char * const *argv;\n      const char *this_pname;\n      const char *temp_base ATTRIBUTE_UNUSED;\n      char **errmsg_fmt, **errmsg_arg;\n-     int flags;\n+     int flagsarg;\n {\n-  int (*func)() = (flags & PEXECUTE_SEARCH ? execvp : execv);\n   int pid;\n   int pdes[2];\n+  int out;\n   int input_desc, output_desc;\n-  int retries, sleep_interval;\n+  int flags;\n+  /* We declare these to be volatile to avoid warnings from gcc about\n+     them being clobbered by vfork.  */\n+  volatile int retries, sleep_interval;\n   /* Pipe waiting from last process, to be used as input for the next one.\n      Value is STDIN_FILE_NO if no pipe is waiting\n      (i.e. the next command is the first of a group).  */\n   static int last_pipe_input;\n \n+  flags = flagsarg;\n+\n   /* If this is the first process, initialize.  */\n   if (flags & PEXECUTE_FIRST)\n     last_pipe_input = STDIN_FILE_NO;\n@@ -82,22 +120,24 @@ pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n \t  *errmsg_arg = NULL;\n \t  return -1;\n \t}\n-      output_desc = pdes[WRITE_PORT];\n+      out = pdes[WRITE_PORT];\n       last_pipe_input = pdes[READ_PORT];\n     }\n   else\n     {\n       /* Last process.  */\n-      output_desc = STDOUT_FILE_NO;\n+      out = STDOUT_FILE_NO;\n       last_pipe_input = STDIN_FILE_NO;\n     }\n \n+  output_desc = out;\n+\n   /* Fork a subprocess; wait and retry if it fails.  */\n   sleep_interval = 1;\n   pid = -1;\n   for (retries = 0; retries < 4; retries++)\n     {\n-      pid = fork ();\n+      pid = vfork ();\n       if (pid >= 0)\n \tbreak;\n       sleep (sleep_interval);\n@@ -131,12 +171,21 @@ pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n \tclose (last_pipe_input);\n \n       /* Exec the program.  */\n-      (*func) (program, argv);\n-\n-      fprintf (stderr, \"%s: \", this_pname);\n-      fprintf (stderr, install_error_msg, program);\n-      fprintf (stderr, \": %s\\n\", xstrerror (errno));\n-      exit (-1);\n+      if (flags & PEXECUTE_SEARCH)\n+\texecvp (program, argv);\n+      else\n+\texecv (program, argv);\n+\n+      /* We don't want to call fprintf after vfork.  */\n+#define writeerr(s) write (STDERR_FILE_NO, s, strlen (s))\n+      writeerr (this_pname);\n+      writeerr (\": \");\n+      writeerr (\"installation problem, cannot exec '\");\n+      writeerr (program);\n+      writeerr (\"': \");\n+      writeerr (xstrerror (errno));\n+      writeerr (\"\\n\");\n+      _exit (-1);\n       /* NOTREACHED */\n       return 0;\n "}]}