{"sha": "cba61d8dcbe1ac0fb23a96b2974541b201292465", "node_id": "C_kwDOANBUbNoAKGNiYTYxZDhkY2JlMWFjMGZiMjNhOTZiMjk3NDU0MWIyMDEyOTI0NjU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-28T18:46:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-28T18:46:18Z"}, "message": "Merge #774\n\n774: Removed lambda in iterate_params within CallExpr and MethodCallExpr r=tschwinge a=npate012\n\nSigned-off-by: Nirmal Patel <npate012@gmail.com>\r\n\r\nRemoved iterate_params from AST::CallExpr and AST::MethodCallExpr.\r\n\r\nFixes #722 #723 \r\n\n\nCo-authored-by: Nirmal Patel <npate012@gmail.com>", "tree": {"sha": "9a3a4588f82358c9139d07455c2b4e1f80ed53b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a3a4588f82358c9139d07455c2b4e1f80ed53b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cba61d8dcbe1ac0fb23a96b2974541b201292465", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJheu/6CRBK7hj4Ov3rIwAA3lkIAAVX+FCJ8EH8dhR0qn5wymSu\n2HQjUeAr/Gnn0CX5abenLzLM6KKIHvsImX+Y3uxz4UN4H8/+HWaQ6qAP3y2PwEzS\nZsGdVFIQVnwgnicaGKu42DHLSorNyAQaPnpmXjL3SduHIOhnEXVsrzFsR5tlqrbY\nz3wpzlCMfif1EFJIC8q5K6t0sWZeSh94Hr2qoc2GyQOy03artlhdnwuIMipop4TU\npMg2LX2GW1lyY7TlZ89RJX3lxPFqU8de0CfZrvDVrJOuk6CpGbVlYDuBiMkIdPBq\nMvxa1b+9h1Z2P+aJ1hHoHtpZUwPdcLWrGN0qmMO67AObAWoJmxhCJzQ/ql9U41Y=\n=3kmN\n-----END PGP SIGNATURE-----\n", "payload": "tree 9a3a4588f82358c9139d07455c2b4e1f80ed53b6\nparent a2ce3ef6b024736dfcbfabb062100c685fa95c6b\nparent 08b83163db07c903a6524f15f9adce4a0e7fa359\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1635446778 +0000\ncommitter GitHub <noreply@github.com> 1635446778 +0000\n\nMerge #774\n\n774: Removed lambda in iterate_params within CallExpr and MethodCallExpr r=tschwinge a=npate012\n\nSigned-off-by: Nirmal Patel <npate012@gmail.com>\r\n\r\nRemoved iterate_params from AST::CallExpr and AST::MethodCallExpr.\r\n\r\nFixes #722 #723 \r\n\n\nCo-authored-by: Nirmal Patel <npate012@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba61d8dcbe1ac0fb23a96b2974541b201292465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cba61d8dcbe1ac0fb23a96b2974541b201292465", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba61d8dcbe1ac0fb23a96b2974541b201292465/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2ce3ef6b024736dfcbfabb062100c685fa95c6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ce3ef6b024736dfcbfabb062100c685fa95c6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ce3ef6b024736dfcbfabb062100c685fa95c6b"}, {"sha": "08b83163db07c903a6524f15f9adce4a0e7fa359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08b83163db07c903a6524f15f9adce4a0e7fa359", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08b83163db07c903a6524f15f9adce4a0e7fa359"}], "stats": {"total": 55, "additions": 19, "deletions": 36}, "files": [{"sha": "05c78b7b9655c8adcdbaba5d6ebb59ae658c644f", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba61d8dcbe1ac0fb23a96b2974541b201292465/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba61d8dcbe1ac0fb23a96b2974541b201292465/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=cba61d8dcbe1ac0fb23a96b2974541b201292465", "patch": "@@ -1916,15 +1916,6 @@ class CallExpr : public ExprWithoutBlock\n   void mark_for_strip () override { function = nullptr; }\n   bool is_marked_for_strip () const override { return function == nullptr; }\n \n-  void iterate_params (std::function<bool (Expr *)> cb)\n-  {\n-    for (auto &param : params)\n-      {\n-\tif (!cb (param.get ()))\n-\t  return;\n-      }\n-  }\n-\n   // TODO: this mutable getter seems really dodgy. Think up better way.\n   const std::vector<std::unique_ptr<Expr> > &get_params () const\n   {\n@@ -2025,15 +2016,6 @@ class MethodCallExpr : public ExprWithoutBlock\n   void mark_for_strip () override { receiver = nullptr; }\n   bool is_marked_for_strip () const override { return receiver == nullptr; }\n \n-  void iterate_params (std::function<bool (Expr *)> cb)\n-  {\n-    for (auto &param : params)\n-      {\n-\tif (!cb (param.get ()))\n-\t  return;\n-      }\n-  }\n-\n   // TODO: this mutable getter seems really dodgy. Think up better way.\n   const std::vector<std::unique_ptr<Expr> > &get_params () const\n   {"}, {"sha": "54cb6113ab72792e995dde3beaf66e4a68bc17a3", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba61d8dcbe1ac0fb23a96b2974541b201292465/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba61d8dcbe1ac0fb23a96b2974541b201292465/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=cba61d8dcbe1ac0fb23a96b2974541b201292465", "patch": "@@ -192,12 +192,14 @@ class ASTLoweringExpr : public ASTLoweringBase\n   {\n     HIR::Expr *func\n       = ASTLoweringExpr::translate (expr.get_function_expr ().get ());\n+\n+    auto const &in_params = expr.get_params ();\n     std::vector<std::unique_ptr<HIR::Expr> > params;\n-    expr.iterate_params ([&] (AST::Expr *p) mutable -> bool {\n-      auto trans = ASTLoweringExpr::translate (p);\n-      params.push_back (std::unique_ptr<HIR::Expr> (trans));\n-      return true;\n-    });\n+    for (auto &param : in_params)\n+      {\n+\tauto trans = ASTLoweringExpr::translate (param.get ());\n+\tparams.push_back (std::unique_ptr<HIR::Expr> (trans));\n+      }\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (\n@@ -217,12 +219,13 @@ class ASTLoweringExpr : public ASTLoweringBase\n     HIR::Expr *receiver\n       = ASTLoweringExpr::translate (expr.get_receiver_expr ().get ());\n \n+    auto const &in_params = expr.get_params ();\n     std::vector<std::unique_ptr<HIR::Expr> > params;\n-    expr.iterate_params ([&] (AST::Expr *p) mutable -> bool {\n-      auto trans = ASTLoweringExpr::translate (p);\n-      params.push_back (std::unique_ptr<HIR::Expr> (trans));\n-      return true;\n-    });\n+    for (auto &param : in_params)\n+      {\n+\tauto trans = ASTLoweringExpr::translate (param.get ());\n+\tparams.push_back (std::unique_ptr<HIR::Expr> (trans));\n+      }\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),"}, {"sha": "12a4f8ca9c79d78a5375d1571c9b2778ceb6f4af", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba61d8dcbe1ac0fb23a96b2974541b201292465/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba61d8dcbe1ac0fb23a96b2974541b201292465/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=cba61d8dcbe1ac0fb23a96b2974541b201292465", "patch": "@@ -101,10 +101,9 @@ class ResolveExpr : public ResolverBase\n   void visit (AST::CallExpr &expr) override\n   {\n     ResolveExpr::go (expr.get_function_expr ().get (), expr.get_node_id ());\n-    expr.iterate_params ([&] (AST::Expr *p) mutable -> bool {\n-      ResolveExpr::go (p, expr.get_node_id ());\n-      return true;\n-    });\n+    auto const &in_params = expr.get_params ();\n+    for (auto &param : in_params)\n+      ResolveExpr::go (param.get (), expr.get_node_id ());\n   }\n \n   void visit (AST::MethodCallExpr &expr) override\n@@ -117,10 +116,9 @@ class ResolveExpr : public ResolverBase\n \tResolveTypeToCanonicalPath::type_resolve_generic_args (args);\n       }\n \n-    expr.iterate_params ([&] (AST::Expr *p) mutable -> bool {\n-      ResolveExpr::go (p, expr.get_node_id ());\n-      return true;\n-    });\n+    auto const &in_params = expr.get_params ();\n+    for (auto &param : in_params)\n+      ResolveExpr::go (param.get (), expr.get_node_id ());\n   }\n \n   void visit (AST::AssignmentExpr &expr) override"}]}