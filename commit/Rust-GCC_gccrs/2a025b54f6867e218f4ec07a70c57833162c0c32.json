{"sha": "2a025b54f6867e218f4ec07a70c57833162c0c32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEwMjViNTRmNjg2N2UyMThmNGVjMDdhNzBjNTc4MzMxNjJjMGMzMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-02-25T18:11:20Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-02-25T18:11:20Z"}, "message": "re PR middle-end/30509 (ice for legal code with -O3)\n\n\tPR middle-end/30509\n\t* tree-inline.c (copy_bb): Produce exact copy of EH info when copying for inlining.\n\nFrom-SVN: r122314", "tree": {"sha": "1a37d2e2bb52f60603e5c98e35b7b35011c5407c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a37d2e2bb52f60603e5c98e35b7b35011c5407c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a025b54f6867e218f4ec07a70c57833162c0c32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a025b54f6867e218f4ec07a70c57833162c0c32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a025b54f6867e218f4ec07a70c57833162c0c32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a025b54f6867e218f4ec07a70c57833162c0c32/comments", "author": null, "committer": null, "parents": [{"sha": "bd8d4d191780e0b944d5187129b8210d71c565ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd8d4d191780e0b944d5187129b8210d71c565ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd8d4d191780e0b944d5187129b8210d71c565ec"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "cc9e79e10dedb7c4523e6511a4e603c6ebb250d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a025b54f6867e218f4ec07a70c57833162c0c32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a025b54f6867e218f4ec07a70c57833162c0c32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a025b54f6867e218f4ec07a70c57833162c0c32", "patch": "@@ -1,3 +1,8 @@\n+2007-02-24  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/30509\n+\t* tree-inline.c (copy_bb): Produce exact copy of EH info when copying for inlining.\n+\n 2007-02-24  Uros Bizjak  <ubizjak@gmail.com>\n \t    Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "349d109a7ca18572bce7f0c17540d8c55f5500e3", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a025b54f6867e218f4ec07a70c57833162c0c32/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a025b54f6867e218f4ec07a70c57833162c0c32/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=2a025b54f6867e218f4ec07a70c57833162c0c32", "patch": "@@ -873,7 +873,20 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale, int count_scal\n \t      gcc_assert (lookup_stmt_eh_region_fn (id->src_cfun, orig_stmt)\n \t\t\t  != 0);\n \n-\t      if (tree_could_throw_p (stmt))\n+\t      if (tree_could_throw_p (stmt)\n+\t\t  /* When we are cloning for inlining, we are supposed to\n+\t\t     construct a clone that calls precisely the same functions\n+\t\t     as original.  However IPA optimizers might've proved\n+\t\t     earlier some function calls as non-trapping that might\n+\t\t     render some basic blocks dead that might become\n+\t\t     unreachable.\n+\n+\t\t     We can't update SSA with unreachable blocks in CFG and thus\n+\t\t     we prevent the scenario by preserving even the \"dead\" eh\n+\t\t     edges until the point they are later removed by\n+\t\t     fixup_cfg pass.  */\n+\t\t  || (id->transform_call_graph_edges == CB_CGE_MOVE_CLONES\n+\t\t      && lookup_stmt_eh_region_fn (id->src_cfun, orig_stmt) > 0))\n \t\t{\n \t\t  int region = lookup_stmt_eh_region_fn (id->src_cfun, orig_stmt);\n \t\t  /* Add an entry for the copied tree in the EH hashtable."}]}