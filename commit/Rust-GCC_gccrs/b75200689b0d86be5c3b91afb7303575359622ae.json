{"sha": "b75200689b0d86be5c3b91afb7303575359622ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc1MjAwNjg5YjBkODZiZTVjM2I5MWFmYjczMDM1NzUzNTk2MjJhZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-10-24T10:44:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-24T10:44:56Z"}, "message": "re PR rtl-optimization/82628 (wrong code at -Os on x86_64-linux-gnu in the 32-bit mode)\n\n\tPR target/82628\n\t* config/i386/i386.md (addcarry<mode>, subborrow<mode>): Change\n\tpatterns to better describe from which operation the CF is computed.\n\t(addcarry<mode>_0, subborrow<mode>_0): New patterns.\n\t* config/i386/i386.c (ix86_expand_builtin) <case handlecarry>: Pass\n\tone LTU with [DT]Imode and another one with [SD]Imode.  If arg0\n\tis 0, use _0 suffixed expanders instead of emitting a comparison\n\tbefore it.\n\nFrom-SVN: r254039", "tree": {"sha": "ffea2d11e20212b983fdd0aaa7477e99a37899ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffea2d11e20212b983fdd0aaa7477e99a37899ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b75200689b0d86be5c3b91afb7303575359622ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75200689b0d86be5c3b91afb7303575359622ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b75200689b0d86be5c3b91afb7303575359622ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75200689b0d86be5c3b91afb7303575359622ae/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "585a449d7307c46919fa9b2d6a0ee63fcb692789", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/585a449d7307c46919fa9b2d6a0ee63fcb692789", "html_url": "https://github.com/Rust-GCC/gccrs/commit/585a449d7307c46919fa9b2d6a0ee63fcb692789"}], "stats": {"total": 115, "additions": 89, "deletions": 26}, "files": [{"sha": "c2c3a523405a918689bf79cc2b71582efcd0af4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75200689b0d86be5c3b91afb7303575359622ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75200689b0d86be5c3b91afb7303575359622ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b75200689b0d86be5c3b91afb7303575359622ae", "patch": "@@ -1,3 +1,14 @@\n+2017-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/82628\n+\t* config/i386/i386.md (addcarry<mode>, subborrow<mode>): Change\n+\tpatterns to better describe from which operation the CF is computed.\n+\t(addcarry<mode>_0, subborrow<mode>_0): New patterns.\n+\t* config/i386/i386.c (ix86_expand_builtin) <case handlecarry>: Pass\n+\tone LTU with [DT]Imode and another one with [SD]Imode.  If arg0\n+\tis 0, use _0 suffixed expanders instead of emitting a comparison\n+\tbefore it.\n+\n 2017-10-06  Sergey Shalnov  <Sergey.Shalnov@intel.com>\n \n \t* config/i386/i386.md(*movsf_internal, *movdf_internal):"}, {"sha": "d8241fa15cd10be33d530f1fbd49a6ae84335952", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75200689b0d86be5c3b91afb7303575359622ae/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75200689b0d86be5c3b91afb7303575359622ae/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b75200689b0d86be5c3b91afb7303575359622ae", "patch": "@@ -35080,10 +35080,10 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t\t     machine_mode mode, int ignore)\n {\n   size_t i;\n-  enum insn_code icode;\n+  enum insn_code icode, icode2;\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   tree arg0, arg1, arg2, arg3, arg4;\n-  rtx op0, op1, op2, op3, op4, pat, insn;\n+  rtx op0, op1, op2, op3, op4, pat, pat2, insn;\n   machine_mode mode0, mode1, mode2, mode3, mode4;\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n \n@@ -36058,22 +36058,34 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \n     case IX86_BUILTIN_SBB32:\n       icode = CODE_FOR_subborrowsi;\n+      icode2 = CODE_FOR_subborrowsi_0;\n       mode0 = SImode;\n+      mode1 = DImode;\n+      mode2 = CCmode;\n       goto handlecarry;\n \n     case IX86_BUILTIN_SBB64:\n       icode = CODE_FOR_subborrowdi;\n+      icode2 = CODE_FOR_subborrowdi_0;\n       mode0 = DImode;\n+      mode1 = TImode;\n+      mode2 = CCmode;\n       goto handlecarry;\n \n     case IX86_BUILTIN_ADDCARRYX32:\n       icode = CODE_FOR_addcarrysi;\n+      icode2 = CODE_FOR_addcarrysi_0;\n       mode0 = SImode;\n+      mode1 = DImode;\n+      mode2 = CCCmode;\n       goto handlecarry;\n \n     case IX86_BUILTIN_ADDCARRYX64:\n       icode = CODE_FOR_addcarrydi;\n+      icode2 = CODE_FOR_addcarrydi_0;\n       mode0 = DImode;\n+      mode1 = TImode;\n+      mode2 = CCCmode;\n \n     handlecarry:\n       arg0 = CALL_EXPR_ARG (exp, 0); /* unsigned char c_in.  */\n@@ -36082,7 +36094,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       arg3 = CALL_EXPR_ARG (exp, 3); /* unsigned int *sum_out.  */\n \n       op1 = expand_normal (arg0);\n-      op1 = copy_to_mode_reg (QImode, convert_to_mode (QImode, op1, 1));\n+      if (!integer_zerop (arg0))\n+\top1 = copy_to_mode_reg (QImode, convert_to_mode (QImode, op1, 1));\n \n       op2 = expand_normal (arg1);\n       if (!register_operand (op2, mode0))\n@@ -36099,21 +36112,31 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t  op4 = copy_addr_to_reg (op4);\n \t}\n \n-      /* Generate CF from input operand.  */\n-      emit_insn (gen_addqi3_cconly_overflow (op1, constm1_rtx));\n-\n-      /* Generate instruction that consumes CF.  */\n       op0 = gen_reg_rtx (mode0);\n+      if (integer_zerop (arg0))\n+\t{\n+\t  /* If arg0 is 0, optimize right away into add or sub\n+\t     instruction that sets CCCmode flags.  */\n+\t  op1 = gen_rtx_REG (mode2, FLAGS_REG);\n+\t  emit_insn (GEN_FCN (icode2) (op0, op2, op3));\n+\t}\n+      else\n+\t{\n+\t  /* Generate CF from input operand.  */\n+\t  emit_insn (gen_addqi3_cconly_overflow (op1, constm1_rtx));\n \n-      op1 = gen_rtx_REG (CCCmode, FLAGS_REG);\n-      pat = gen_rtx_LTU (mode0, op1, const0_rtx);\n-      emit_insn (GEN_FCN (icode) (op0, op2, op3, op1, pat));\n+\t  /* Generate instruction that consumes CF.  */\n+\t  op1 = gen_rtx_REG (CCCmode, FLAGS_REG);\n+\t  pat = gen_rtx_LTU (mode1, op1, const0_rtx);\n+\t  pat2 = gen_rtx_LTU (mode0, op1, const0_rtx);\n+\t  emit_insn (GEN_FCN (icode) (op0, op2, op3, op1, pat, pat2));\n+\t}\n \n       /* Return current CF value.  */\n       if (target == 0)\n         target = gen_reg_rtx (QImode);\n \n-      PUT_MODE (pat, QImode);\n+      pat = gen_rtx_LTU (QImode, op1, const0_rtx);\n       emit_insn (gen_rtx_SET (target, pat));\n \n       /* Store the result.  */"}, {"sha": "49ad0394fb57dde3c155f39ec7d408229f1350cf", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 44, "deletions": 15, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75200689b0d86be5c3b91afb7303575359622ae/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75200689b0d86be5c3b91afb7303575359622ae/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b75200689b0d86be5c3b91afb7303575359622ae", "patch": "@@ -6844,15 +6844,19 @@\n (define_insn \"addcarry<mode>\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n-\t  (plus:SWI48\n+\t  (zero_extend:<DWI>\n \t    (plus:SWI48\n-\t      (match_operator:SWI48 4 \"ix86_carry_flag_operator\"\n-\t       [(match_operand 3 \"flags_reg_operand\") (const_int 0)])\n-\t      (match_operand:SWI48 1 \"nonimmediate_operand\" \"%0\"))\n-\t    (match_operand:SWI48 2 \"nonimmediate_operand\" \"rm\"))\n-\t  (match_dup 1)))\n+\t      (plus:SWI48\n+\t\t(match_operator:SWI48 5 \"ix86_carry_flag_operator\"\n+\t\t  [(match_operand 3 \"flags_reg_operand\") (const_int 0)])\n+\t\t(match_operand:SWI48 1 \"nonimmediate_operand\" \"%0\"))\n+\t      (match_operand:SWI48 2 \"nonimmediate_operand\" \"rm\")))\n+\t  (plus:<DWI>\n+\t    (zero_extend:<DWI> (match_dup 2))\n+\t    (match_operator:<DWI> 4 \"ix86_carry_flag_operator\"\n+\t      [(match_dup 3) (const_int 0)]))))\n    (set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-\t(plus:SWI48 (plus:SWI48 (match_op_dup 4\n+\t(plus:SWI48 (plus:SWI48 (match_op_dup 5\n \t\t\t\t [(match_dup 3) (const_int 0)])\n \t\t\t\t(match_dup 1))\n \t\t    (match_dup 2)))]\n@@ -6863,6 +6867,18 @@\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_expand \"addcarry<mode>_0\"\n+  [(parallel\n+     [(set (reg:CCC FLAGS_REG)\n+\t   (compare:CCC\n+\t     (plus:SWI48\n+\t       (match_operand:SWI48 1 \"nonimmediate_operand\")\n+\t       (match_operand:SWI48 2 \"x86_64_general_operand\"))\n+\t     (match_dup 1)))\n+      (set (match_operand:SWI48 0 \"register_operand\")\n+\t   (plus:SWI48 (match_dup 1) (match_dup 2)))])]\n+  \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\")\n+\n (define_insn \"sub<mode>3_carry\"\n   [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n \t(minus:SWI\n@@ -6945,22 +6961,35 @@\n (define_insn \"subborrow<mode>\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n-\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0\")\n-\t  (plus:SWI48\n-\t    (match_operator:SWI48 4 \"ix86_carry_flag_operator\"\n-\t     [(match_operand 3 \"flags_reg_operand\") (const_int 0)])\n-\t    (match_operand:SWI48 2 \"nonimmediate_operand\" \"rm\"))))\n+\t  (zero_extend:<DWI>\n+\t    (match_operand:SWI48 1 \"nonimmediate_operand\" \"0\"))\n+\t  (plus:<DWI>\n+\t    (match_operator:<DWI> 4 \"ix86_carry_flag_operator\"\n+\t      [(match_operand 3 \"flags_reg_operand\") (const_int 0)])\n+\t    (zero_extend:<DWI>\n+\t      (match_operand:SWI48 2 \"nonimmediate_operand\" \"rm\")))))\n    (set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-\t(minus:SWI48 (minus:SWI48 (match_dup 1)\n-\t\t\t\t  (match_op_dup 4\n-\t\t\t\t   [(match_dup 3) (const_int 0)]))\n+\t(minus:SWI48 (minus:SWI48\n+\t\t       (match_dup 1)\n+\t\t       (match_operator:SWI48 5 \"ix86_carry_flag_operator\"\n+\t\t\t [(match_dup 3) (const_int 0)]))\n \t\t     (match_dup 2)))]\n   \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\"\n   \"sbb{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"subborrow<mode>_0\"\n+  [(parallel\n+     [(set (reg:CC FLAGS_REG)\n+\t   (compare:CC\n+\t     (match_operand:SWI48 1 \"nonimmediate_operand\")\n+\t     (match_operand:SWI48 2 \"<general_operand>\")))\n+      (set (match_operand:SWI48 0 \"register_operand\")\n+\t   (minus:SWI48 (match_dup 1) (match_dup 2)))])]\n+  \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\")\n \f\n ;; Overflow setting add instructions\n "}]}