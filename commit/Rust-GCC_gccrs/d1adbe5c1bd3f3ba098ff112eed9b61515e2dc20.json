{"sha": "d1adbe5c1bd3f3ba098ff112eed9b61515e2dc20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFhZGJlNWMxYmQzZjNiYTA5OGZmMTEyZWVkOWI2MTUxNWUyZGMyMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-12T10:21:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-12T13:51:15Z"}, "message": "libstdc++: Fix some problems in PSTL tests\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/25_algorithms/pstl/alg_nonmodifying/find_end.cc:\n\tIncrease dg-timeout-factor to 4. Fix -Wunused-parameter\n\twarnings. Replace bitwise AND with logical AND in loop\n\tcondition.\n\t* testsuite/25_algorithms/pstl/alg_nonmodifying/search_n.cc:\n\tReplace bitwise AND with logical AND in loop condition.\n\t* testsuite/util/pstl/test_utils.h: Remove unused parameter\n\tnames.", "tree": {"sha": "9adcf6c548e7507b4ad0bd84c73b522bd24df6bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9adcf6c548e7507b4ad0bd84c73b522bd24df6bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1adbe5c1bd3f3ba098ff112eed9b61515e2dc20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1adbe5c1bd3f3ba098ff112eed9b61515e2dc20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1adbe5c1bd3f3ba098ff112eed9b61515e2dc20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1adbe5c1bd3f3ba098ff112eed9b61515e2dc20/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6b664e2c4c127025e076d8b584abe0976694629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b664e2c4c127025e076d8b584abe0976694629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b664e2c4c127025e076d8b584abe0976694629"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "6e49947396367e3b2c1ec4f3ee18fe43c8a18315", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_nonmodifying/find_end.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1adbe5c1bd3f3ba098ff112eed9b61515e2dc20/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Ffind_end.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1adbe5c1bd3f3ba098ff112eed9b61515e2dc20/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Ffind_end.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Ffind_end.cc?ref=d1adbe5c1bd3f3ba098ff112eed9b61515e2dc20", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // { dg-options \"-ltbb\" }\n // { dg-do run { target c++17 } }\n-// { dg-timeout-factor 3 }\n+// { dg-timeout-factor 4 }\n // { dg-require-effective-target tbb-backend }\n \n //===-- find_end.pass.cpp -------------------------------------------------===//\n@@ -78,8 +78,8 @@ test(const std::size_t bits)\n \n     const std::size_t max_n1 = 1000;\n     const std::size_t max_n2 = (max_n1 * 10) / 8;\n-    Sequence<T> in(max_n1, [max_n1, bits](std::size_t k) { return T(2 * HashBits(max_n1, bits - 1) ^ 1); });\n-    Sequence<T> sub(max_n2, [max_n1, bits](std::size_t k) { return T(2 * HashBits(max_n1, bits - 1)); });\n+    Sequence<T> in(max_n1, [max_n1, bits](std::size_t) { return T(2 * HashBits(max_n1, bits - 1) ^ 1); });\n+    Sequence<T> sub(max_n2, [max_n1, bits](std::size_t) { return T(2 * HashBits(max_n1, bits - 1)); });\n     for (std::size_t n1 = 0; n1 <= max_n1; n1 = n1 <= 16 ? n1 + 1 : size_t(3.1415 * n1))\n     {\n         std::size_t sub_n[] = {0, 1, 3, n1, (n1 * 10) / 8};\n@@ -89,7 +89,7 @@ test(const std::size_t bits)\n             for (auto r : res)\n             {\n                 std::size_t i = r, isub = 0;\n-                for (; i < n1 & isub < n2; ++i, ++isub)\n+                for (; i < n1 && isub < n2; ++i, ++isub)\n                     in[i] = sub[isub];\n                 invoke_on_all_policies(test_one_policy(), in.begin(), in.begin() + n1, sub.begin(), sub.begin() + n2,\n                                        std::equal_to<T>());"}, {"sha": "6b6fb03e6b6bd3aa5202acf3cf5bcda922537c3e", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_nonmodifying/search_n.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1adbe5c1bd3f3ba098ff112eed9b61515e2dc20/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fsearch_n.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1adbe5c1bd3f3ba098ff112eed9b61515e2dc20/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fsearch_n.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fsearch_n.cc?ref=d1adbe5c1bd3f3ba098ff112eed9b61515e2dc20", "patch": "@@ -79,7 +79,7 @@ test()\n             {\n                 Sequence<T> in(n1, [n1](std::size_t k) { return T(0); });\n                 std::size_t i = r, isub = 0;\n-                for (; i < n1 & isub < n2; ++i, ++isub)\n+                for (; i < n1 && isub < n2; ++i, ++isub)\n                     in[i] = value;\n \n                 invoke_on_all_policies(test_one_policy(), in.begin(), in.begin() + n1, n2, value, std::equal_to<T>());"}, {"sha": "80a8f9c7b87903e87ea5101cf256af96754b6733", "filename": "libstdc++-v3/testsuite/util/pstl/test_utils.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1adbe5c1bd3f3ba098ff112eed9b61515e2dc20/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fpstl%2Ftest_utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1adbe5c1bd3f3ba098ff112eed9b61515e2dc20/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fpstl%2Ftest_utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fpstl%2Ftest_utils.h?ref=d1adbe5c1bd3f3ba098ff112eed9b61515e2dc20", "patch": "@@ -752,7 +752,7 @@ struct invoke_if_<std::false_type, std::false_type>\n {\n     template <typename Op, typename... Rest>\n     void\n-    operator()(bool is_allow, Op op, Rest&&... rest)\n+    operator()(bool, Op op, Rest&&... rest)\n     {\n         op(std::forward<Rest>(rest)...);\n     }\n@@ -787,14 +787,14 @@ struct non_const_wrapper_tagged : non_const_wrapper\n \n     template <typename Policy, typename Iterator>\n     typename std::enable_if<IsPositiveCondition != is_same_iterator_category<Iterator, IteratorTag>::value, void>::type\n-    operator()(Policy&& exec, Iterator iter)\n+    operator()(Policy&&, Iterator)\n     {\n     }\n \n     template <typename Policy, typename InputIterator, typename OutputIterator>\n     typename std::enable_if<IsPositiveCondition != is_same_iterator_category<OutputIterator, IteratorTag>::value,\n                             void>::type\n-    operator()(Policy&& exec, InputIterator input_iter, OutputIterator out_iter)\n+    operator()(Policy&&, InputIterator, OutputIterator)\n     {\n     }\n };\n@@ -999,7 +999,7 @@ struct iterator_invoker<std::forward_iterator_tag, /*isReverse=*/std::true_type>\n {\n     template <typename... Rest>\n     void\n-    operator()(Rest&&... rest)\n+    operator()(Rest&&...)\n     {\n     }\n };\n@@ -1226,7 +1226,7 @@ test_algo_basic_double(F&& f)\n \n template <typename Policy, typename F>\n static void\n-invoke_if(Policy&& p, F f)\n+invoke_if(Policy&&, F f)\n {\n #if _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN || _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN\n     __pstl::__internal::invoke_if_not(__pstl::__internal::allow_unsequenced<Policy>(), f);"}]}