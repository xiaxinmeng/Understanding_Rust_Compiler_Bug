{"sha": "c1fb34c3ae740ed96d771e3f2b009e3bf3278242", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFmYjM0YzNhZTc0MGVkOTZkNzcxZTNmMmIwMDllM2JmMzI3ODI0Mg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-06-18T18:15:51Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-06-18T18:15:51Z"}, "message": "re PR fortran/53526 ([Coarray] (lib) Properly handle MOVE_ALLOC for coarrays)\n\n2012-06-18  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/53526\n        * trans-intrinsic.c (conv_intrinsic_move_alloc): Handle\n        * coarrays.\n\n2012-06-18  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/53526\n        * gfortran.dg/coarray_lib_move_alloc_1.f90: New.\n\nFrom-SVN: r188748", "tree": {"sha": "74ac355b6b05c8451b36d64d22d6cf6bc1142534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74ac355b6b05c8451b36d64d22d6cf6bc1142534"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1fb34c3ae740ed96d771e3f2b009e3bf3278242", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fb34c3ae740ed96d771e3f2b009e3bf3278242", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1fb34c3ae740ed96d771e3f2b009e3bf3278242", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fb34c3ae740ed96d771e3f2b009e3bf3278242/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "284943b0226b75d81e80cc2713cf0e0044a2d21f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/284943b0226b75d81e80cc2713cf0e0044a2d21f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/284943b0226b75d81e80cc2713cf0e0044a2d21f"}], "stats": {"total": 109, "additions": 102, "deletions": 7}, "files": [{"sha": "8be714221b8a0ba013dd553bbeaf07e299924803", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fb34c3ae740ed96d771e3f2b009e3bf3278242/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fb34c3ae740ed96d771e3f2b009e3bf3278242/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c1fb34c3ae740ed96d771e3f2b009e3bf3278242", "patch": "@@ -1,3 +1,8 @@\n+2012-06-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/53526\n+\t* trans-intrinsic.c (conv_intrinsic_move_alloc): Handle coarrays.\n+\n 2012-06-18  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/53526"}, {"sha": "8cce42744bf20e9552c49c9fd1d3f3cf8e005c98", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 44, "deletions": 7, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fb34c3ae740ed96d771e3f2b009e3bf3278242/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fb34c3ae740ed96d771e3f2b009e3bf3278242/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=c1fb34c3ae740ed96d771e3f2b009e3bf3278242", "patch": "@@ -7243,6 +7243,7 @@ conv_intrinsic_move_alloc (gfc_code *code)\n   gfc_se from_se, to_se;\n   gfc_ss *from_ss, *to_ss;\n   tree tmp;\n+  bool coarray;\n \n   gfc_start_block (&block);\n \n@@ -7254,8 +7255,9 @@ conv_intrinsic_move_alloc (gfc_code *code)\n \n   gcc_assert (from_expr->ts.type != BT_CLASS\n \t      || to_expr->ts.type == BT_CLASS);\n+  coarray = gfc_get_corank (from_expr) != 0;\n \n-  if (from_expr->rank == 0)\n+  if (from_expr->rank == 0 && !coarray)\n     {\n       if (from_expr->ts.type != BT_CLASS)\n \tfrom_expr2 = from_expr;\n@@ -7366,15 +7368,50 @@ conv_intrinsic_move_alloc (gfc_code *code)\n     }\n \n   /* Deallocate \"to\".  */\n-  to_ss = gfc_walk_expr (to_expr);\n-  from_ss = gfc_walk_expr (from_expr);\n+  if (from_expr->rank != 0)\n+    {\n+      to_ss = gfc_walk_expr (to_expr);\n+      from_ss = gfc_walk_expr (from_expr);\n+    }\n+  else\n+    {\n+      to_ss = walk_coarray (to_expr);\n+      from_ss = walk_coarray (from_expr);\n+    }\n   gfc_conv_expr_descriptor (&to_se, to_expr, to_ss);\n   gfc_conv_expr_descriptor (&from_se, from_expr, from_ss);\n \n-  tmp = gfc_conv_descriptor_data_get (to_se.expr);\n-  tmp = gfc_deallocate_with_status (tmp, NULL_TREE, NULL_TREE, NULL_TREE,\n-\t\t\t\t    NULL_TREE, true, to_expr, false);\n-  gfc_add_expr_to_block (&block, tmp);\n+  /* For coarrays, call SYNC ALL if TO is already deallocated as MOVE_ALLOC\n+     is an image control \"statement\", cf. IR F08/0040 in 12-006A.  */\n+  if (coarray && gfc_option.coarray == GFC_FCOARRAY_LIB)\n+    {\n+      tree cond;\n+\n+      tmp = gfc_deallocate_with_status (to_se.expr, NULL_TREE, NULL_TREE,\n+\t\t\t\t\tNULL_TREE, NULL_TREE, true, to_expr,\n+\t\t\t\t\ttrue);\n+      gfc_add_expr_to_block (&block, tmp);\n+\n+      tmp = gfc_conv_descriptor_data_get (to_se.expr);\n+      cond = fold_build2_loc (input_location, EQ_EXPR,\n+\t\t\t      boolean_type_node, tmp,\n+\t\t\t      fold_convert (TREE_TYPE (tmp),\n+\t\t\t\t\t    null_pointer_node));\n+      tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_sync_all,\n+\t\t\t\t 3, null_pointer_node, null_pointer_node,\n+\t\t\t\t build_int_cst (integer_type_node, 0));\n+\n+      tmp = fold_build3_loc (input_location, COND_EXPR, void_type_node, cond,\n+\t\t\t     tmp, build_empty_stmt (input_location));\n+      gfc_add_expr_to_block (&block, tmp);\n+    }\n+  else\n+    {\n+      tmp = gfc_conv_descriptor_data_get (to_se.expr);\n+      tmp = gfc_deallocate_with_status (tmp, NULL_TREE, NULL_TREE, NULL_TREE,\n+\t\t\t\t\tNULL_TREE, true, to_expr, false);\n+      gfc_add_expr_to_block (&block, tmp);\n+    }\n \n   /* Move the pointer and update the array descriptor data.  */\n   gfc_add_modify_loc (input_location, &block, to_se.expr, from_se.expr);"}, {"sha": "e8c27eca98d1103c71398c0ab3fed1975de554fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fb34c3ae740ed96d771e3f2b009e3bf3278242/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fb34c3ae740ed96d771e3f2b009e3bf3278242/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c1fb34c3ae740ed96d771e3f2b009e3bf3278242", "patch": "@@ -1,3 +1,9 @@\n+2012-06-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/53526\n+\t* gfortran.dg/coarray_lib_move_alloc_1.f90: New.\n+\t* gfortran.dg/coarray/move_alloc_1.f90\n+\n 2012-06-18  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/53526"}, {"sha": "1f320522489cb04f01ce146108dc4b20e5edbae5", "filename": "gcc/testsuite/gfortran.dg/coarray/move_alloc_1.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fb34c3ae740ed96d771e3f2b009e3bf3278242/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fmove_alloc_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fb34c3ae740ed96d771e3f2b009e3bf3278242/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fmove_alloc_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fmove_alloc_1.f90?ref=c1fb34c3ae740ed96d771e3f2b009e3bf3278242", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do run }\n+!\n+! PR fortran/53526\n+!\n+! Check handling of move_alloc with coarrays\n+!\n+implicit none\n+integer, allocatable :: u[:], v[:], w(:)[:,:], x(:)[:,:]\n+\n+allocate (u[4:*])\n+call move_alloc (u, v)\n+if (allocated (u)) call abort ()\n+if (lcobound (v, dim=1) /= 4) call abort ()\n+if (ucobound (v, dim=1) /= 3 + num_images()) call abort ()\n+\n+allocate (w(-2:3)[4:5,-1:*])\n+call move_alloc (w, x)\n+if (allocated (w)) call abort ()\n+if (lbound (x, dim=1) /= -2) call abort ()\n+if (ubound (x, dim=1) /= 3) call abort ()\n+if (any (lcobound (x) /= [4, -1])) call abort ()\n+if (any (ucobound (x) /= [5, -2 + (num_images()+1)/2])) call abort ()\n+\n+end"}, {"sha": "fef9d718bf7177b078f068b41da9d60992be1954", "filename": "gcc/testsuite/gfortran.dg/coarray_lib_move_alloc_1.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fb34c3ae740ed96d771e3f2b009e3bf3278242/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_move_alloc_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fb34c3ae740ed96d771e3f2b009e3bf3278242/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_move_alloc_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_move_alloc_1.f90?ref=c1fb34c3ae740ed96d771e3f2b009e3bf3278242", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib -fdump-tree-original\" }\n+!\n+! PR fortran/53526\n+!\n+! Check handling of move_alloc with coarrays\n+\n+subroutine ma_scalar (aa, bb)\n+  integer, allocatable :: aa[:], bb[:]\n+  call move_alloc(aa,bb)\n+end\n+\n+subroutine ma_array (cc, dd)\n+  integer, allocatable :: cc(:)[:], dd(:)[:]\n+  call move_alloc (cc, dd)\n+end\n+\n+! { dg-final { scan-tree-dump-times \"free\" 0 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_sync_all\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_deregister\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"\\\\*bb = \\\\*aa\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"\\\\*dd = \\\\*cc\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}