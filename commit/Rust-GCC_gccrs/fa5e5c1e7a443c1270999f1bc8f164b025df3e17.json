{"sha": "fa5e5c1e7a443c1270999f1bc8f164b025df3e17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE1ZTVjMWU3YTQ0M2MxMjcwOTk5ZjFiYzhmMTY0YjAyNWRmM2UxNw==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-09-24T19:36:29Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-09-24T19:36:29Z"}, "message": "(clobbered_register): Delete.\n\n(srcsi_operand): Return 1 also for things matching depi_cint_operand.\n(secondary_reload_class): Replace.\n\nFrom-SVN: r2233", "tree": {"sha": "de7d83989dd37257fafa321382ec224953d24018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de7d83989dd37257fafa321382ec224953d24018"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa5e5c1e7a443c1270999f1bc8f164b025df3e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5e5c1e7a443c1270999f1bc8f164b025df3e17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa5e5c1e7a443c1270999f1bc8f164b025df3e17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5e5c1e7a443c1270999f1bc8f164b025df3e17/comments", "author": null, "committer": null, "parents": [{"sha": "907f67ccf3ff01b7fcbc5d139616858a4a8fafd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907f67ccf3ff01b7fcbc5d139616858a4a8fafd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/907f67ccf3ff01b7fcbc5d139616858a4a8fafd5"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "f723542eb956fa94dbbc855bbe6184befb8a846e", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5e5c1e7a443c1270999f1bc8f164b025df3e17/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5e5c1e7a443c1270999f1bc8f164b025df3e17/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=fa5e5c1e7a443c1270999f1bc8f164b025df3e17", "patch": "@@ -382,15 +382,6 @@ arith32_operand (op, mode)\n   return register_operand (op, mode) || GET_CODE (op) == CONST_INT;\n }\n \n-/* Return truth value of statement that OP is a call-clobbered register.  */\n-int\n-clobbered_register (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n-{\n-  return (GET_CODE (op) == REG && call_used_regs[REGNO (op)]);\n-}\n-\n /* True iff OP can be the source of a move to a general register.  */\n int\n srcsi_operand (op, mode)\n@@ -405,6 +396,9 @@ srcsi_operand (op, mode)\n   if (nonimmediate_operand (op, mode))\n     return 1;\n \n+  if (depi_cint_operand (op, mode))\n+    return 1;\n+\n   /* OK if ldo or ldil can be used.  */\n   return (GET_CODE (op) == CONST_INT\n \t  && (INT_14_BITS (op) || (INTVAL (op) & 0x7ff) == 0));\n@@ -2378,8 +2372,8 @@ output_arg_descriptor (insn)\n   fputc ('\\n', asm_out_file);\n }\n \f\n-/* Memory loads/stores to/from fp registers may need a scratch\n-   register in which to reload the address. */\n+/* Memory loads/stores to/from the shift need to go through\n+   the general registers.  */\n \n enum reg_class\n secondary_reload_class (class, mode, in)\n@@ -2389,12 +2383,10 @@ secondary_reload_class (class, mode, in)\n {\n   int regno = true_regnum (in);\n \n-  if ((regno >= FIRST_PSEUDO_REGISTER || regno == -1)\n-      && (class == FP_REGS || class == SNAKE_FP_REGS\n-\t  || class == HI_SNAKE_FP_REGS))\n+  if (class == SHIFT_REGS && (regno <= 0 || regno >= 32))\n     return GENERAL_REGS;\n-  else\n-    return NO_REGS;\n+\n+  return NO_REGS;\n }\n \n enum direction"}]}