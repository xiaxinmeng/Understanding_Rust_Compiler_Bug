{"sha": "50aadcbcd9f8b49c62e6b364f0779516d6df6f99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBhYWRjYmNkOWY4YjQ5YzYyZTZiMzY0ZjA3Nzk1MTZkNmRmNmY5OQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2002-11-19T07:11:42Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2002-11-19T07:11:42Z"}, "message": "tree-inline.c: Move prototpyes of find_alloca_call_1 and find_alloca_call to right place.\n\n\t* tree-inline.c: Move prototpyes of find_alloca_call_1 and\n\tfind_alloca_call to right place.\n\nFrom-SVN: r59247", "tree": {"sha": "391b0fc46a5a057437be5261ef5b726f2c3e81d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/391b0fc46a5a057437be5261ef5b726f2c3e81d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50aadcbcd9f8b49c62e6b364f0779516d6df6f99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50aadcbcd9f8b49c62e6b364f0779516d6df6f99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50aadcbcd9f8b49c62e6b364f0779516d6df6f99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50aadcbcd9f8b49c62e6b364f0779516d6df6f99/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc65cd609e046633b7e665ace8072aa2d70788f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc65cd609e046633b7e665ace8072aa2d70788f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc65cd609e046633b7e665ace8072aa2d70788f7"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "92afadb886581e73951642a56861345b4b7e04b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50aadcbcd9f8b49c62e6b364f0779516d6df6f99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50aadcbcd9f8b49c62e6b364f0779516d6df6f99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50aadcbcd9f8b49c62e6b364f0779516d6df6f99", "patch": "@@ -1,3 +1,8 @@\n+2002-11-19  Andreas Jaeger  <aj@suse.de>\n+\n+\t* tree-inline.c: Move prototpyes of find_alloca_call_1 and\n+\tfind_alloca_call to right place.\n+\n 2002-11-19  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cppfiles.c: Fix formatting."}, {"sha": "6dea3539cc01075cd6895c1bed58c0c2bb518211", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50aadcbcd9f8b49c62e6b364f0779516d6df6f99/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50aadcbcd9f8b49c62e6b364f0779516d6df6f99/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=50aadcbcd9f8b49c62e6b364f0779516d6df6f99", "patch": "@@ -122,9 +122,9 @@ static void copy_scope_stmt PARAMS ((tree *, int *, inline_data *));\n static tree initialize_inlined_parameters PARAMS ((inline_data *, tree, tree, tree));\n static void remap_block PARAMS ((tree *, tree, inline_data *));\n static tree add_stmt_to_compound PARAMS ((tree, tree, tree));\n+#endif /* INLINER_FOR_JAVA */\n static tree find_alloca_call_1 PARAMS ((tree *, int *, void *));\n static tree find_alloca_call PARAMS ((tree));\n-#endif /* INLINER_FOR_JAVA */\n \n /* The approximate number of instructions per statement.  This number\n    need not be particularly accurate; it is used only to make\n@@ -474,7 +474,7 @@ copy_body_r (tp, walk_subtrees, data)\n \t{\n \t  copy_body_r (&assignment, walk_subtrees, data);\n \t  *tp = build (COMPOUND_EXPR, void_type_node, assignment, goto_stmt);\n-\t  TREE_SIDE_EFFECTS (*tp) = 1;\t    \n+\t  TREE_SIDE_EFFECTS (*tp) = 1;\n \t}\n #endif /* INLINER_FOR_JAVA */\n       /* If we're not returning anything just do the jump.  */\n@@ -527,8 +527,8 @@ copy_body_r (tp, walk_subtrees, data)\n     }\n   else if (TREE_CODE (*tp) == EXIT_BLOCK_EXPR)\n     {\n-      splay_tree_node n \n-\t= splay_tree_lookup (id->decl_map, \n+      splay_tree_node n\n+\t= splay_tree_lookup (id->decl_map,\n \t\t\t     (splay_tree_key) TREE_OPERAND (*tp, 0));\n       /* We _must_ have seen the enclosing LABELED_BLOCK_EXPR.  */\n       if (! n)\n@@ -733,7 +733,7 @@ initialize_inlined_parameters (id, args, fn, block)\n #else /* INLINER_FOR_JAVA */\n \t{\n \t  tree assignment = build (MODIFY_EXPR, TREE_TYPE (p), var, value);\n-\t  init_stmts = add_stmt_to_compound (init_stmts, TREE_TYPE (p), \n+\t  init_stmts = add_stmt_to_compound (init_stmts, TREE_TYPE (p),\n \t\t\t\t\t     assignment);\n \t}\n       else\n@@ -1150,10 +1150,10 @@ expand_call_inline (tp, walk_subtrees, data)\n \t inline calls to FN that appear in the initializers for the\n \t parameters.  */\n       expand_calls_inline (&arg_inits, id);\n-      \n+\n       /* And add them to the tree.  */\n-      BLOCK_EXPR_BODY (expr) = add_stmt_to_compound (BLOCK_EXPR_BODY (expr), \n-\t\t\t\t\t\t     TREE_TYPE (arg_inits), \n+      BLOCK_EXPR_BODY (expr) = add_stmt_to_compound (BLOCK_EXPR_BODY (expr),\n+\t\t\t\t\t\t     TREE_TYPE (arg_inits),\n \t\t\t\t\t\t     arg_inits);\n     }\n #endif /* INLINER_FOR_JAVA */\n@@ -1212,7 +1212,7 @@ expand_call_inline (tp, walk_subtrees, data)\n       {\n \ttree *next = &BLOCK_VARS (expr);\n \twhile (*next)\n-\t  next = &TREE_CHAIN (*next);\t\n+\t  next = &TREE_CHAIN (*next);\n \t*next = decl;\n       }\n   }\n@@ -1232,7 +1232,7 @@ expand_call_inline (tp, walk_subtrees, data)\n     new_body = copy_body (id);\n     TREE_TYPE (new_body) = TREE_TYPE (TREE_TYPE (fn));\n     BLOCK_EXPR_BODY (expr)\n-      = add_stmt_to_compound (BLOCK_EXPR_BODY (expr), \n+      = add_stmt_to_compound (BLOCK_EXPR_BODY (expr),\n \t\t\t      TREE_TYPE (new_body), new_body);\n     inlined_body = &BLOCK_EXPR_BODY (expr);\n   }\n@@ -1258,7 +1258,7 @@ expand_call_inline (tp, walk_subtrees, data)\n      statement-expression is the returned value of the function.  */\n #ifndef INLINER_FOR_JAVA\n   COMPOUND_BODY (stmt) = chainon (COMPOUND_BODY (stmt), use_stmt);\n-  \n+\n   /* Close the block for the parameters.  */\n   scope_stmt = build_stmt (SCOPE_STMT, DECL_INITIAL (fn));\n   SCOPE_NO_CLEANUPS_P (scope_stmt) = 1;\n@@ -1272,11 +1272,11 @@ expand_call_inline (tp, walk_subtrees, data)\n \t promoted, convert it back to the expected type.  */\n       if (TREE_TYPE (TREE_TYPE (fn)) != TREE_TYPE (retvar))\n \tretvar = build1 (NOP_EXPR, TREE_TYPE (TREE_TYPE (fn)), retvar);\n-      BLOCK_EXPR_BODY (expr) \n-\t= add_stmt_to_compound (BLOCK_EXPR_BODY (expr), \n+      BLOCK_EXPR_BODY (expr)\n+\t= add_stmt_to_compound (BLOCK_EXPR_BODY (expr),\n \t\t\t\tTREE_TYPE (retvar), retvar);\n     }\n-  \n+\n   java_inlining_merge_static_initializers (fn, id->decl_map);\n #endif /* INLINER_FOR_JAVA */\n \n@@ -1295,7 +1295,7 @@ expand_call_inline (tp, walk_subtrees, data)\n   *tp = build_expr_wfl (expr, DECL_SOURCE_FILE (fn), DECL_SOURCE_LINE (fn),\n \t\t\t/*col=*/0);\n #else /* INLINER_FOR_JAVA */\n-  *tp = build_expr_wfl (expr, DECL_SOURCE_FILE (fn), \n+  *tp = build_expr_wfl (expr, DECL_SOURCE_FILE (fn),\n \t\t\tDECL_SOURCE_LINE_FIRST(fn),\n \t\t\t/*col=*/0);\n #endif /* INLINER_FOR_JAVA */"}]}