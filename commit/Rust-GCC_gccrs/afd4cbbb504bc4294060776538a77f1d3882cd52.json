{"sha": "afd4cbbb504bc4294060776538a77f1d3882cd52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZkNGNiYmI1MDRiYzQyOTQwNjA3NzY1MzhhNzdmMWQzODgyY2Q1Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-02-01T17:56:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-02-01T17:56:06Z"}, "message": "stl_function.h: Additional minor tweaks.\n\n2004-02-01  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_function.h: Additional minor tweaks.\n\nFrom-SVN: r77078", "tree": {"sha": "6bc1ea083ad6e6651ac5d8282a5804f121ecaaaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bc1ea083ad6e6651ac5d8282a5804f121ecaaaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afd4cbbb504bc4294060776538a77f1d3882cd52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd4cbbb504bc4294060776538a77f1d3882cd52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afd4cbbb504bc4294060776538a77f1d3882cd52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd4cbbb504bc4294060776538a77f1d3882cd52/comments", "author": null, "committer": null, "parents": [{"sha": "f6592a9e2cdd63133763f8b9171e2b6051db2393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6592a9e2cdd63133763f8b9171e2b6051db2393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6592a9e2cdd63133763f8b9171e2b6051db2393"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "a8bdc2678963889e673ed5dac648205db748840e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd4cbbb504bc4294060776538a77f1d3882cd52/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd4cbbb504bc4294060776538a77f1d3882cd52/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=afd4cbbb504bc4294060776538a77f1d3882cd52", "patch": "@@ -1,3 +1,7 @@\n+2004-02-01  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_function.h: Additional minor tweaks.\n+\n 2004-02-01  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/deque.tcc: Wrap overlong lines, constify"}, {"sha": "e9ee842ce3711a45849a106628d9f2a44aafd687", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd4cbbb504bc4294060776538a77f1d3882cd52/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd4cbbb504bc4294060776538a77f1d3882cd52/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=afd4cbbb504bc4294060776538a77f1d3882cd52", "patch": "@@ -339,7 +339,7 @@ namespace std\n       _Predicate _M_pred;\n     public:\n       explicit binary_negate(const _Predicate& __x)\n-\t: _M_pred(__x) { }\n+      : _M_pred(__x) { }\n \n       bool\n       operator()(const typename _Predicate::first_argument_type& __x, \n@@ -397,7 +397,7 @@ namespace std\n     public:\n       binder1st(const _Operation& __x,\n \t\tconst typename _Operation::first_argument_type& __y)\n-\t: op(__x), value(__y) {}\n+      : op(__x), value(__y) {}\n \n       typename _Operation::result_type\n       operator()(const typename _Operation::second_argument_type& __x) const\n@@ -431,7 +431,7 @@ namespace std\n     public:\n       binder2nd(const _Operation& __x,\n \t\tconst typename _Operation::second_argument_type& __y) \n-\t: op(__x), value(__y) {}\n+      : op(__x), value(__y) {}\n \n       typename _Operation::result_type\n       operator()(const typename _Operation::first_argument_type& __x) const\n@@ -500,7 +500,7 @@ namespace std\n   /// One of the @link s20_3_7_adaptors adaptors for function pointers@endlink.\n   template <class _Arg1, class _Arg2, class _Result>\n     class pointer_to_binary_function\n-      : public binary_function<_Arg1, _Arg2, _Result>\n+    : public binary_function<_Arg1, _Arg2, _Result>\n     {\n     protected:\n       _Result (*_M_ptr)(_Arg1, _Arg2);\n@@ -603,7 +603,7 @@ namespace std\n     {\n     public:\n       explicit const_mem_fun_t(_Ret (_Tp::*__pf)() const)\n-\t: _M_f(__pf) {}\n+      : _M_f(__pf) {}\n \n       _Ret\n       operator()(const _Tp* __p) const\n@@ -618,7 +618,7 @@ namespace std\n     {\n     public:\n       explicit mem_fun_ref_t(_Ret (_Tp::*__pf)())\n-\t: _M_f(__pf) {}\n+      : _M_f(__pf) {}\n \n       _Ret\n       operator()(_Tp& __r) const"}]}