{"sha": "4a6cb9c0da73ce8733a68fc802b1f5a332cfebdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE2Y2I5YzBkYTczY2U4NzMzYTY4ZmM4MDJiMWY1YTMzMmNmZWJkYw==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2019-10-03T22:39:49Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2019-10-03T22:39:49Z"}, "message": "pa.c (pa_output_call): Remove 64-bit sibcall sequence.\n\n\t* config/pa/pa.c (pa_output_call): Remove 64-bit sibcall sequence.\n\t(pa_attr_length_call): Adjust length for 64-bit plabel sequence.\n\nFrom-SVN: r276543", "tree": {"sha": "faeb4961425d216e2c75340e31332326cd54e920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/faeb4961425d216e2c75340e31332326cd54e920"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a6cb9c0da73ce8733a68fc802b1f5a332cfebdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a6cb9c0da73ce8733a68fc802b1f5a332cfebdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a6cb9c0da73ce8733a68fc802b1f5a332cfebdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a6cb9c0da73ce8733a68fc802b1f5a332cfebdc/comments", "author": null, "committer": null, "parents": [{"sha": "5d8bb3897ef3fba6b4ac677e64188b1da86eda39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d8bb3897ef3fba6b4ac677e64188b1da86eda39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d8bb3897ef3fba6b4ac677e64188b1da86eda39"}], "stats": {"total": 35, "additions": 13, "deletions": 22}, "files": [{"sha": "2068d05bdfa7853b46bfa85892282f3814e8f0c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a6cb9c0da73ce8733a68fc802b1f5a332cfebdc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a6cb9c0da73ce8733a68fc802b1f5a332cfebdc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a6cb9c0da73ce8733a68fc802b1f5a332cfebdc", "patch": "@@ -1,3 +1,8 @@\n+2019-10-03  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa.c (pa_output_call): Remove 64-bit sibcall sequence.\n+\t(pa_attr_length_call): Adjust length for 64-bit plabel sequence.\n+\n 2019-10-03  Aaron Sawdey <acsawdey@linux.ibm.com>\n \n \t* expr.c (emit_block_move_hints): Slightly cleaner fix to"}, {"sha": "4f48c416e2de7d0ff36e3e4b1529ccf5d6d838c3", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a6cb9c0da73ce8733a68fc802b1f5a332cfebdc/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a6cb9c0da73ce8733a68fc802b1f5a332cfebdc/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=4a6cb9c0da73ce8733a68fc802b1f5a332cfebdc", "patch": "@@ -7845,7 +7845,7 @@ pa_attr_length_call (rtx_insn *insn, int sibcall)\n \n   /* 64-bit plabel sequence.  */\n   else if (TARGET_64BIT && !local_call)\n-    length += sibcall ? 28 : 24;\n+    length += 24;\n \n   /* non-pic long absolute branch sequence.  */\n   else if ((TARGET_LONG_ABS_CALL || local_call) && !flag_pic)\n@@ -7917,38 +7917,24 @@ pa_output_call (rtx_insn *insn, rtx call_dest, int sibcall)\n \t  xoperands[0] = pa_get_deferred_plabel (call_dest);\n \t  xoperands[1] = gen_label_rtx ();\n \n-\t  /* If this isn't a sibcall, we put the load of %r27 into the\n-\t     delay slot.  We can't do this in a sibcall as we don't\n-\t     have a second call-clobbered scratch register available.\n-\t     We don't need to do anything when generating fast indirect\n-\t     calls.  */\n-\t  if (seq_length != 0 && !sibcall)\n+\t  /* Put the load of %r27 into the delay slot.  We don't need to\n+\t     do anything when generating fast indirect calls.  */\n+\t  if (seq_length != 0)\n \t    {\n \t      final_scan_insn (NEXT_INSN (insn), asm_out_file,\n \t\t\t       optimize, 0, NULL);\n \n \t      /* Now delete the delay insn.  */\n \t      SET_INSN_DELETED (NEXT_INSN (insn));\n-\t      seq_length = 0;\n \t    }\n \n \t  output_asm_insn (\"addil LT'%0,%%r27\", xoperands);\n \t  output_asm_insn (\"ldd RT'%0(%%r1),%%r1\", xoperands);\n \t  output_asm_insn (\"ldd 0(%%r1),%%r1\", xoperands);\n-\n-\t  if (sibcall)\n-\t    {\n-\t      output_asm_insn (\"ldd 24(%%r1),%%r27\", xoperands);\n-\t      output_asm_insn (\"ldd 16(%%r1),%%r1\", xoperands);\n-\t      output_asm_insn (\"bve (%%r1)\", xoperands);\n-\t    }\n-\t  else\n-\t    {\n-\t      output_asm_insn (\"ldd 16(%%r1),%%r2\", xoperands);\n-\t      output_asm_insn (\"bve,l (%%r2),%%r2\", xoperands);\n-\t      output_asm_insn (\"ldd 24(%%r1),%%r27\", xoperands);\n-\t      seq_length = 1;\n-\t    }\n+\t  output_asm_insn (\"ldd 16(%%r1),%%r2\", xoperands);\n+\t  output_asm_insn (\"bve,l (%%r2),%%r2\", xoperands);\n+\t  output_asm_insn (\"ldd 24(%%r1),%%r27\", xoperands);\n+\t  seq_length = 1;\n \t}\n       else\n \t{"}]}