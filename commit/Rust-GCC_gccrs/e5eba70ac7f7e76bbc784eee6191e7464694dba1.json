{"sha": "e5eba70ac7f7e76bbc784eee6191e7464694dba1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVlYmE3MGFjN2Y3ZTc2YmJjNzg0ZWVlNjE5MWU3NDY0Njk0ZGJhMQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-08-21T19:23:24Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-08-21T19:23:24Z"}, "message": "cppfiles.c (stack_include_file): Harmonize system headerness tests.\n\n\t* cppfiles.c (stack_include_file): Harmonize system headerness tests.\n\t* cppfiles.c (stack_include_file): Only stack a file if there\n\tis something to do.  Return a boolean indicating whether a\n\tbuffer was stacked or not.\n\t(_cpp_execute_include): Similarly.\n\t(_cpp_read_file): Similarly.\n\t* cpphash.h (_cpp_read_file, _cpp_execute_include): Update prototypes.\n\nFrom-SVN: r45083", "tree": {"sha": "b8f13202d7b92b0fabf823b1b15ac5379a0fdbc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8f13202d7b92b0fabf823b1b15ac5379a0fdbc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5eba70ac7f7e76bbc784eee6191e7464694dba1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5eba70ac7f7e76bbc784eee6191e7464694dba1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5eba70ac7f7e76bbc784eee6191e7464694dba1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5eba70ac7f7e76bbc784eee6191e7464694dba1/comments", "author": null, "committer": null, "parents": [{"sha": "c1a6a8dc2a4e41198a30f1301fea869829f3e4a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a6a8dc2a4e41198a30f1301fea869829f3e4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1a6a8dc2a4e41198a30f1301fea869829f3e4a5"}], "stats": {"total": 98, "additions": 55, "deletions": 43}, "files": [{"sha": "58889c7f2b0f8f9d368a78b01a10ce782abe0645", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5eba70ac7f7e76bbc784eee6191e7464694dba1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5eba70ac7f7e76bbc784eee6191e7464694dba1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5eba70ac7f7e76bbc784eee6191e7464694dba1", "patch": "@@ -1,3 +1,13 @@\n+2001-08-21  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cppfiles.c (stack_include_file): Harmonize system headerness tests.\n+\t* cppfiles.c (stack_include_file): Only stack a file if there\n+\tis something to do.  Return a boolean indicating whether a\n+\tbuffer was stacked or not.\n+\t(_cpp_execute_include): Similarly.\n+\t(_cpp_read_file): Similarly.\n+\t* cpphash.h (_cpp_read_file, _cpp_execute_include): Update prototypes.\n+\n 2001-08-21  Sam Steingold  <sds@gnu.org>\n \n \t* tradcpp.c (rescan): define obufp_before_macroname before RECACHE"}, {"sha": "da244beb25da838ed4b1f80222781fd97b4e1873", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 43, "deletions": 41, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5eba70ac7f7e76bbc784eee6191e7464694dba1/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5eba70ac7f7e76bbc784eee6191e7464694dba1/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=e5eba70ac7f7e76bbc784eee6191e7464694dba1", "patch": "@@ -95,7 +95,7 @@ static struct include_file *\n \t\t\t\t   enum include_type));\n static struct include_file *open_file PARAMS ((cpp_reader *, const char *));\n static int read_include_file\tPARAMS ((cpp_reader *, struct include_file *));\n-static void stack_include_file\tPARAMS ((cpp_reader *, struct include_file *));\n+static bool stack_include_file\tPARAMS ((cpp_reader *, struct include_file *));\n static void purge_cache \tPARAMS ((struct include_file *));\n static void destroy_node\tPARAMS ((splay_tree_value));\n static int report_missing_guard\t\tPARAMS ((splay_tree_node, void *));\n@@ -275,59 +275,59 @@ open_file (pfile, filename)\n   return 0;\n }\n \n-/* Place the file referenced by INC into a new buffer on PFILE's\n-   stack.  If there are errors, or the file should not be re-included,\n-   a null (zero-length) buffer is pushed.  */\n+/* Place the file referenced by INC into a new buffer on the buffer\n+   stack, unless there are errors, or the file is not re-included\n+   because of e.g. multiple-include guards.  Returns true if a buffer\n+   is stacked.  */\n \n-static void\n+static bool\n stack_include_file (pfile, inc)\n      cpp_reader *pfile;\n      struct include_file *inc;\n {\n-  size_t len = 0;\n   cpp_buffer *fp;\n-  int sysp, deps_sysp;\n+  int sysp;\n   const char *filename;\n \n-  /* We'll try removing deps_sysp after the release of 3.0.  */\n-  deps_sysp = pfile->system_include_depth != 0;\n+  if (DO_NOT_REREAD (inc))\n+    return false;\n+\n   sysp = MAX ((pfile->map ? pfile->map->sysp : 0),\n \t      (inc->foundhere ? inc->foundhere->sysp : 0));\n \n   /* For -M, add the file to the dependencies on its first inclusion.  */\n-  if (CPP_OPTION (pfile, print_deps) > deps_sysp && !inc->include_count)\n+  if (CPP_OPTION (pfile, print_deps) > sysp && !inc->include_count)\n     deps_add_dep (pfile->deps, inc->name);\n \n   /* Not in cache?  */\n-  if (! DO_NOT_REREAD (inc) && ! inc->buffer)\n+  if (! inc->buffer)\n     {\n       /* If an error occurs, do not try to read this file again.  */\n       if (read_include_file (pfile, inc))\n-\t_cpp_never_reread (inc);\n+\t{\n+\t  _cpp_never_reread (inc);\n+\t  return false;\n+\t}\n       close (inc->fd);\n       inc->fd = -1;\n     }\n \n-  if (! DO_NOT_REREAD (inc))\n+  if (pfile->buffer)\n     {\n-      len = inc->st.st_size;\n-      if (pfile->buffer)\n-\t{\n-\t  /* We don't want MI guard advice for the main file.  */\n-\t  inc->include_count++;\n+      /* We don't want MI guard advice for the main file.  */\n+      inc->include_count++;\n \n-\t  /* Handle -H option.  */\n-\t  if (CPP_OPTION (pfile, print_include_names))\n-\t    {\n-\t      for (fp = pfile->buffer; fp; fp = fp->prev)\n-\t\tputc ('.', stderr);\n-\t      fprintf (stderr, \" %s\\n\", inc->name);\n-\t    }\n+      /* Handle -H option.  */\n+      if (CPP_OPTION (pfile, print_include_names))\n+\t{\n+\t  for (fp = pfile->buffer; fp; fp = fp->prev)\n+\t    putc ('.', stderr);\n+\t  fprintf (stderr, \" %s\\n\", inc->name);\n \t}\n     }\n \n   /* Push a buffer.  */\n-  fp = cpp_push_buffer (pfile, inc->buffer, len, BUF_FILE, 0);\n+  fp = cpp_push_buffer (pfile, inc->buffer, inc->st.st_size, BUF_FILE, 0);\n   fp->inc = inc;\n   fp->inc->refcnt++;\n \n@@ -341,6 +341,8 @@ stack_include_file (pfile, inc)\n   if (*filename == '\\0')\n     filename = _(\"<stdin>\");\n   _cpp_do_file_change (pfile, LC_ENTER, filename, 1, sysp);\n+\n+  return true;\n }\n \n /* Read the file referenced by INC into the file cache.\n@@ -663,13 +665,15 @@ handle_missing_header (pfile, fname, angle_brackets)\n     cpp_error_from_errno (pfile, fname);\n }\n \n-/* Returns non-zero if a buffer was stacked.  */\n-int\n+/* Handles #include-family directives, and the command line -imacros\n+   and -include.  Returns true if a buffer was stacked.  */\n+bool\n _cpp_execute_include (pfile, header, type)\n      cpp_reader *pfile;\n      const cpp_token *header;\n      enum include_type type;\n {\n+  bool stacked = false;\n   struct include_file *inc = find_include_file (pfile, header, type);\n \n   if (inc == 0)\n@@ -680,15 +684,13 @@ _cpp_execute_include (pfile, header, type)\n       if (header->type == CPP_HEADER_NAME)\n \tpfile->system_include_depth++;\n \n-      stack_include_file (pfile, inc);\n+      stacked = stack_include_file (pfile, inc);\n \n       if (type == IT_IMPORT)\n \t_cpp_never_reread (inc);\n-\n-      return 1;\n     }\n \n-  return 0;\n+  return stacked;\n }\n \n /* Locate HEADER, and determine whether it is newer than the current\n@@ -714,23 +716,23 @@ _cpp_compare_file_date (pfile, header)\n }\n \n \n-/* Push an input buffer and load it up with the contents of FNAME.\n-   If FNAME is \"\", read standard input.  */\n-int\n+/* Push an input buffer and load it up with the contents of FNAME.  If\n+   FNAME is \"\", read standard input.  Return true if a buffer was\n+   stacked.  */\n+bool\n _cpp_read_file (pfile, fname)\n      cpp_reader *pfile;\n      const char *fname;\n {\n   struct include_file *f = open_file (pfile, fname);\n+  bool stacked = false;\n \n   if (f == NULL)\n-    {\n-      cpp_error_from_errno (pfile, fname);\n-      return 0;\n-    }\n+    cpp_error_from_errno (pfile, fname);\n+  else\n+    stacked = stack_include_file (pfile, f);\n \n-  stack_include_file (pfile, f);\n-  return 1;\n+  return stacked;\n }\n \n /* Do appropriate cleanup when a file buffer is popped off the input"}, {"sha": "908040a69480384f0af00f32f301a568159246da", "filename": "gcc/cpphash.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5eba70ac7f7e76bbc784eee6191e7464694dba1/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5eba70ac7f7e76bbc784eee6191e7464694dba1/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=e5eba70ac7f7e76bbc784eee6191e7464694dba1", "patch": "@@ -391,8 +391,8 @@ extern void _cpp_destroy_hashtable\tPARAMS ((cpp_reader *));\n extern void _cpp_fake_include\t\tPARAMS ((cpp_reader *, const char *));\n extern void _cpp_never_reread\t\tPARAMS ((struct include_file *));\n extern char *_cpp_simplify_pathname\tPARAMS ((char *));\n-extern int _cpp_read_file\t\tPARAMS ((cpp_reader *, const char *));\n-extern int _cpp_execute_include\t\tPARAMS ((cpp_reader *,\n+extern bool _cpp_read_file\t\tPARAMS ((cpp_reader *, const char *));\n+extern bool _cpp_execute_include\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t const cpp_token *,\n \t\t\t\t\t\t enum include_type));\n extern int _cpp_compare_file_date       PARAMS ((cpp_reader *,"}]}