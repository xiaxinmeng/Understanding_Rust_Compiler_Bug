{"sha": "1387fef3fbf29d527e8ca1956a2eaf1de137a377", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM4N2ZlZjNmYmYyOWQ1MjdlOGNhMTk1NmEyZWFmMWRlMTM3YTM3Nw==", "commit": {"author": {"name": "Adrian Straetling", "email": "straetling@de.ibm.com", "date": "2006-01-03T11:52:29Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2006-01-03T11:52:29Z"}, "message": "builtins.c (get_builtin_sync_mem): New function.\n\n2006-01-03  Adrian Straetling  <straetling@de.ibm.com>\n\n\t* gcc/builtins.c (get_builtin_sync_mem): New function.\n\t(expand_builtin_sync_operation, expand_builtin_compare_and_swap,\n\texpand_builtin_lock_test_and_set, expand_builtin_lock_release):\n\tCall get_builtin_sync_mem to generate mem rtx.\n\nFrom-SVN: r109279", "tree": {"sha": "d58769b18d490b931d60d7e54346022db94c8689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d58769b18d490b931d60d7e54346022db94c8689"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1387fef3fbf29d527e8ca1956a2eaf1de137a377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1387fef3fbf29d527e8ca1956a2eaf1de137a377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1387fef3fbf29d527e8ca1956a2eaf1de137a377", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1387fef3fbf29d527e8ca1956a2eaf1de137a377/comments", "author": null, "committer": null, "parents": [{"sha": "9c5093d1a61a9651ceae4541c1b4c859db58730b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5093d1a61a9651ceae4541c1b4c859db58730b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c5093d1a61a9651ceae4541c1b4c859db58730b"}], "stats": {"total": 68, "additions": 36, "deletions": 32}, "files": [{"sha": "1e9a27b0c3841fcc538c8af4d07650feb59b36a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1387fef3fbf29d527e8ca1956a2eaf1de137a377/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1387fef3fbf29d527e8ca1956a2eaf1de137a377/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1387fef3fbf29d527e8ca1956a2eaf1de137a377", "patch": "@@ -1,3 +1,10 @@\n+2006-01-03  Adrian Straetling  <straetling@de.ibm.com>\n+\n+\t* gcc/builtins.c (get_builtin_sync_mem): New function.\n+\t(expand_builtin_sync_operation, expand_builtin_compare_and_swap,\n+\texpand_builtin_lock_test_and_set, expand_builtin_lock_release):\n+\tCall get_builtin_sync_mem to generate mem rtx.\n+\n 2006-01-03  Richard Guenther  <rguenther@suse.de>\n \n \tPR c/25183"}, {"sha": "01d16dd5acb70a14e16f0da2f6b6681d89b789d9", "filename": "gcc/builtins.c", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1387fef3fbf29d527e8ca1956a2eaf1de137a377/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1387fef3fbf29d527e8ca1956a2eaf1de137a377/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=1387fef3fbf29d527e8ca1956a2eaf1de137a377", "patch": "@@ -5348,6 +5348,27 @@ get_builtin_sync_mode (int fcode_diff)\n   return mode_for_size (BITS_PER_UNIT << fcode_diff, MODE_INT, 0);\n }\n \n+/* Expand the memory expression LOC and return the appropriate memory operand\n+   for the builtin_sync operations.  */\n+\n+static rtx\n+get_builtin_sync_mem (tree loc, enum machine_mode mode)\n+{\n+  rtx addr, mem;\n+\n+  addr = expand_expr (loc, NULL, Pmode, EXPAND_SUM);\n+\n+  /* Note that we explicitly do not want any alias information for this\n+     memory, so that we kill all other live memories.  Otherwise we don't\n+     satisfy the full barrier semantics of the intrinsic.  */\n+  mem = validize_mem (gen_rtx_MEM (mode, addr));\n+\n+  set_mem_align (mem, get_pointer_alignment (loc, BIGGEST_ALIGNMENT));\n+  MEM_VOLATILE_P (mem) = 1;\n+\n+  return mem;\n+}\n+\n /* Expand the __sync_xxx_and_fetch and __sync_fetch_and_xxx intrinsics.\n    ARGLIST is the operands list to the function.  CODE is the rtx code \n    that corresponds to the arithmetic or logical operation from the name;\n@@ -5361,20 +5382,14 @@ expand_builtin_sync_operation (enum machine_mode mode, tree arglist,\n \t\t\t       enum rtx_code code, bool after,\n \t\t\t       rtx target, bool ignore)\n {\n-  rtx addr, val, mem;\n+  rtx val, mem;\n \n   /* Expand the operands.  */\n-  addr = expand_expr (TREE_VALUE (arglist), NULL, Pmode, EXPAND_SUM);\n+  mem = get_builtin_sync_mem (TREE_VALUE (arglist), mode);\n \n   arglist = TREE_CHAIN (arglist);\n   val = expand_expr (TREE_VALUE (arglist), NULL, mode, EXPAND_NORMAL);\n \n-  /* Note that we explicitly do not want any alias information for this\n-     memory, so that we kill all other live memories.  Otherwise we don't\n-     satisfy the full barrier semantics of the intrinsic.  */\n-  mem = validize_mem (gen_rtx_MEM (mode, addr));\n-  MEM_VOLATILE_P (mem) = 1;\n-\n   if (ignore)\n     return expand_sync_operation (mem, val, code);\n   else\n@@ -5390,23 +5405,17 @@ static rtx\n expand_builtin_compare_and_swap (enum machine_mode mode, tree arglist,\n \t\t\t\t bool is_bool, rtx target)\n {\n-  rtx addr, old_val, new_val, mem;\n+  rtx old_val, new_val, mem;\n \n   /* Expand the operands.  */\n-  addr = expand_expr (TREE_VALUE (arglist), NULL, Pmode, EXPAND_SUM);\n+  mem = get_builtin_sync_mem (TREE_VALUE (arglist), mode);\n \n   arglist = TREE_CHAIN (arglist);\n   old_val = expand_expr (TREE_VALUE (arglist), NULL, mode, EXPAND_NORMAL);\n \n   arglist = TREE_CHAIN (arglist);\n   new_val = expand_expr (TREE_VALUE (arglist), NULL, mode, EXPAND_NORMAL);\n \n-  /* Note that we explicitly do not want any alias information for this\n-     memory, so that we kill all other live memories.  Otherwise we don't\n-     satisfy the full barrier semantics of the intrinsic.  */\n-  mem = validize_mem (gen_rtx_MEM (mode, addr));\n-  MEM_VOLATILE_P (mem) = 1;\n-\n   if (is_bool)\n     return expand_bool_compare_and_swap (mem, old_val, new_val, target);\n   else\n@@ -5423,20 +5432,14 @@ static rtx\n expand_builtin_lock_test_and_set (enum machine_mode mode, tree arglist,\n \t\t\t\t  rtx target)\n {\n-  rtx addr, val, mem;\n+  rtx val, mem;\n \n   /* Expand the operands.  */\n-  addr = expand_expr (TREE_VALUE (arglist), NULL, Pmode, EXPAND_NORMAL);\n+  mem = get_builtin_sync_mem (TREE_VALUE (arglist), mode);\n \n   arglist = TREE_CHAIN (arglist);\n   val = expand_expr (TREE_VALUE (arglist), NULL, mode, EXPAND_NORMAL);\n \n-  /* Note that we explicitly do not want any alias information for this\n-     memory, so that we kill all other live memories.  Otherwise we don't\n-     satisfy the barrier semantics of the intrinsic.  */\n-  mem = validize_mem (gen_rtx_MEM (mode, addr));\n-  MEM_VOLATILE_P (mem) = 1;\n-\n   return expand_sync_lock_test_and_set (mem, val, target);\n }\n \n@@ -5470,17 +5473,11 @@ static void\n expand_builtin_lock_release (enum machine_mode mode, tree arglist)\n {\n   enum insn_code icode;\n-  rtx addr, mem, insn;\n+  rtx mem, insn;\n   rtx val = const0_rtx;\n \n   /* Expand the operands.  */\n-  addr = expand_expr (TREE_VALUE (arglist), NULL, Pmode, EXPAND_NORMAL);\n-\n-  /* Note that we explicitly do not want any alias information for this\n-     memory, so that we kill all other live memories.  Otherwise we don't\n-     satisfy the barrier semantics of the intrinsic.  */\n-  mem = validize_mem (gen_rtx_MEM (mode, addr));\n-  MEM_VOLATILE_P (mem) = 1;\n+  mem = get_builtin_sync_mem (TREE_VALUE (arglist), mode);\n \n   /* If there is an explicit operation in the md file, use it.  */\n   icode = sync_lock_release[mode];"}]}