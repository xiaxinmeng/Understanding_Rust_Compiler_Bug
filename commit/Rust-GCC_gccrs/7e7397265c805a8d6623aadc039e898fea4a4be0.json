{"sha": "7e7397265c805a8d6623aadc039e898fea4a4be0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U3Mzk3MjY1YzgwNWE4ZDY2MjNhYWRjMDM5ZTg5OGZlYTRhNGJlMA==", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2021-04-29T21:54:54Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-05T13:09:15Z"}, "message": "[Ada] Remove Ada.Strings.Text_Output and child units\n\ngcc/ada/\n\n\t* libgnat/a-stobbu.adb, libgnat/a-stobbu.ads,\n\tlibgnat/a-stobfi.adb, libgnat/a-stobfi.ads,\n\tlibgnat/a-stoubu.adb, libgnat/a-stoubu.ads,\n\tlibgnat/a-stoufi.adb, libgnat/a-stoufi.ads,\n\tlibgnat/a-stoufo.adb, libgnat/a-stoufo.ads,\n\tlibgnat/a-stouut.adb, libgnat/a-stouut.ads,\n\tlibgnat/a-stteou.ads: Delete files.\n\t* Makefile.rtl, impunit.adb: Remove references to deleted files.", "tree": {"sha": "f7c425d7770396cf9ed75b4c44161657d1da443c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7c425d7770396cf9ed75b4c44161657d1da443c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e7397265c805a8d6623aadc039e898fea4a4be0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7397265c805a8d6623aadc039e898fea4a4be0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e7397265c805a8d6623aadc039e898fea4a4be0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7397265c805a8d6623aadc039e898fea4a4be0/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d1e91f4c3f74bfa4d106d184ca206b5abccec4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f"}], "stats": {"total": 1499, "additions": 0, "deletions": 1499}, "files": [{"sha": "d712ab5320df4f92e5ffc26a85192199351bce89", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7397265c805a8d6623aadc039e898fea4a4be0/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7397265c805a8d6623aadc039e898fea4a4be0/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=7e7397265c805a8d6623aadc039e898fea4a4be0", "patch": "@@ -275,13 +275,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-stboha$(objext) \\\n   a-stfiha$(objext) \\\n   a-stmaco$(objext) \\\n-  a-stobbu$(objext) \\\n-  a-stobfi$(objext) \\\n   a-storio$(objext) \\\n-  a-stoubu$(objext) \\\n-  a-stoufi$(objext) \\\n-  a-stoufo$(objext) \\\n-  a-stouut$(objext) \\\n   a-strbou$(objext) \\\n   a-stream$(objext) \\\n   a-strsto$(objext) \\\n@@ -295,7 +289,6 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-strsup$(objext) \\\n   a-strunb$(objext) \\\n   a-ststio$(objext) \\\n-  a-stteou$(objext) \\\n   a-sttebu$(objext) \\\n   a-stbuun$(objext) \\\n   a-stbubo$(objext) \\"}, {"sha": "b99f3fd8ba00ec874e25f155c7ac41eb94738f1d", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7397265c805a8d6623aadc039e898fea4a4be0/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7397265c805a8d6623aadc039e898fea4a4be0/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=7e7397265c805a8d6623aadc039e898fea4a4be0", "patch": "@@ -635,12 +635,6 @@ package body Impunit is\n     (\"a-sttebu\", T),  -- Ada.Strings.Text_Buffers\n     (\"a-stbuun\", T),  -- Ada.Strings.Text_Buffers.Unbounded\n     (\"a-stbubo\", T),  -- Ada.Strings.Text_Buffers.Bounded\n-    (\"a-stteou\", T),  -- Ada.Strings.Text_Output\n-    (\"a-stouut\", T),  -- Ada.Strings.Text_Output.Utils\n-    (\"a-stoufi\", T),  -- Ada.Strings.Text_Output.Files\n-    (\"a-stobfi\", T),  -- Ada.Strings.Text_Output.Basic_Files\n-    (\"a-stobbu\", T),  -- Ada.Strings.Text_Output.Bit_Buckets\n-    (\"a-stoufo\", T),  -- Ada.Strings.Text_Output.Formatting\n     (\"a-strsto\", T),  -- Ada.Streams.Storage\n     (\"a-ststbo\", T),  -- Ada.Streams.Storage.Bounded\n     (\"a-ststun\", T),  -- Ada.Streams.Storage.Unbounded"}, {"sha": "560fab213140be49d0b5df82bbe6899681af2da0", "filename": "gcc/ada/libgnat/a-stobbu.adb", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stobbu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stobbu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stobbu.adb?ref=1d1e91f4c3f74bfa4d106d184ca206b5abccec4f", "patch": "@@ -1,53 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                    ADA.STRINGS.TEXT_OUTPUT.BIT_BUCKETS                   --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-package body Ada.Strings.Text_Output.Bit_Buckets is\n-\n-   type Bit_Bucket_Type is new Sink with null record;\n-   overriding procedure Full_Method (S : in out Bit_Bucket_Type);\n-   overriding procedure Flush_Method (S : in out Bit_Bucket_Type);\n-\n-   The_Bit_Bucket : aliased Bit_Bucket_Type\n-     (Chunk_Length => Default_Chunk_Length);\n-   function Bit_Bucket return Sink_Access is (The_Bit_Bucket'Access);\n-\n-   overriding procedure Full_Method (S : in out Bit_Bucket_Type)\n-                renames Flush_Method;\n-\n-   overriding procedure Flush_Method (S : in out Bit_Bucket_Type) is\n-   begin\n-      S.Last := 0;\n-   end Flush_Method;\n-\n-begin\n-   The_Bit_Bucket.Indent_Amount := 0;\n-   The_Bit_Bucket.Cur_Chunk := The_Bit_Bucket.Initial_Chunk'Access;\n-end Ada.Strings.Text_Output.Bit_Buckets;"}, {"sha": "b8710d0bdc99ae64206bece3ff48822201284bfe", "filename": "gcc/ada/libgnat/a-stobbu.ads", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stobbu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stobbu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stobbu.ads?ref=1d1e91f4c3f74bfa4d106d184ca206b5abccec4f", "patch": "@@ -1,34 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                    ADA.STRINGS.TEXT_OUTPUT.BIT_BUCKETS                   --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-package Ada.Strings.Text_Output.Bit_Buckets is\n-   function Bit_Bucket return Sink_Access;\n-end Ada.Strings.Text_Output.Bit_Buckets;"}, {"sha": "942f1518229380aadebd0c08a3f26648aa51e9cf", "filename": "gcc/ada/libgnat/a-stobfi.adb", "status": "removed", "additions": 0, "deletions": 118, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stobfi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stobfi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stobfi.adb?ref=1d1e91f4c3f74bfa4d106d184ca206b5abccec4f", "patch": "@@ -1,118 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                    ADA.STRINGS.TEXT_OUTPUT.BASIC_FILES                   --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Ada.Strings.Text_Output.Utils; use Ada.Strings.Text_Output.Utils;\n-package body Ada.Strings.Text_Output.Basic_Files is\n-   use type OS.File_Descriptor;\n-\n-   function Create_From_FD\n-     (FD : OS.File_Descriptor;\n-      Indent_Amount : Natural;\n-      Chunk_Length : Positive) return File;\n-   --  Create a file from an OS file descriptor\n-\n-   function Create_From_FD\n-     (FD : OS.File_Descriptor;\n-      Indent_Amount : Natural;\n-      Chunk_Length : Positive) return File\n-   is\n-   begin\n-      if FD = OS.Invalid_FD then\n-         raise Program_Error with OS.Errno_Message;\n-      end if;\n-      return Result : File (Chunk_Length) do\n-         Result.Indent_Amount := Indent_Amount;\n-         Result.Cur_Chunk := Result.Initial_Chunk'Unchecked_Access;\n-         Result.FD := FD;\n-      end return;\n-   end Create_From_FD;\n-\n-   function Create_File\n-     (Name : String;\n-      Indent_Amount : Natural := Default_Indent_Amount;\n-      Chunk_Length : Positive := Default_Chunk_Length) return File\n-   is\n-   begin\n-      return Create_From_FD\n-        (OS.Create_File (Name, Fmode => OS.Binary),\n-         Indent_Amount, Chunk_Length);\n-   end Create_File;\n-\n-   function Create_New_File\n-     (Name : String;\n-      Indent_Amount : Natural := Default_Indent_Amount;\n-      Chunk_Length : Positive := Default_Chunk_Length) return File\n-   is\n-   begin\n-      return Create_From_FD\n-        (OS.Create_New_File (Name, Fmode => OS.Binary),\n-         Indent_Amount, Chunk_Length);\n-   end Create_New_File;\n-\n-   procedure Close (S : in out File'Class) is\n-      Status : Boolean;\n-   begin\n-      Flush (S);\n-\n-      if S.FD not in OS.Standout | OS.Standerr then -- Don't close these\n-         OS.Close (S.FD, Status);\n-         if not Status then\n-            raise Program_Error with OS.Errno_Message;\n-         end if;\n-      end if;\n-   end Close;\n-\n-   overriding procedure Full_Method (S : in out File) renames Flush_Method;\n-\n-   overriding procedure Flush_Method (S : in out File) is\n-      pragma Assert (S.Cur_Chunk = S.Initial_Chunk'Unchecked_Access);\n-      Res : constant Integer :=\n-        OS.Write (S.FD, S.Cur_Chunk.Chars'Address, S.Last);\n-   begin\n-      if Res /= S.Last then\n-         raise Program_Error with OS.Errno_Message;\n-      end if;\n-      S.Last := 0;\n-   end Flush_Method;\n-\n-   The_Stdout : aliased File :=\n-     Create_From_FD (OS.Standout,\n-                     Indent_Amount => Default_Indent_Amount,\n-                     Chunk_Length => Default_Chunk_Length);\n-   The_Stderr : aliased File :=\n-     Create_From_FD (OS.Standerr,\n-                     Indent_Amount => Default_Indent_Amount,\n-                     Chunk_Length => Default_Chunk_Length);\n-\n-   function Standard_Output return Sink_Access is (The_Stdout'Access);\n-   function Standard_Error return Sink_Access is (The_Stderr'Access);\n-\n-end Ada.Strings.Text_Output.Basic_Files;"}, {"sha": "89fcb4d7d852cd1cc8bbc62f4d03bfaf667eb6e0", "filename": "gcc/ada/libgnat/a-stobfi.ads", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stobfi.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stobfi.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stobfi.ads?ref=1d1e91f4c3f74bfa4d106d184ca206b5abccec4f", "patch": "@@ -1,66 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                    ADA.STRINGS.TEXT_OUTPUT.BASIC_FILES                   --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-private with GNAT.OS_Lib;\n-package Ada.Strings.Text_Output.Basic_Files is\n-   --  Normally, you should use Ada.Strings.Text_Output.Files, which\n-   --  automatically Closes files via finalization. If you don't want to use\n-   --  finalization, use this package instead. You must then Close the file by\n-   --  hand. The semantics is otherwise the same as Files.\n-\n-   function Standard_Output return Sink_Access;\n-   function Standard_Error return Sink_Access;\n-\n-   type File (<>) is new Sink with private;\n-\n-   function Create_File\n-     (Name : String;\n-      Indent_Amount : Natural := Default_Indent_Amount;\n-      Chunk_Length : Positive := Default_Chunk_Length) return File;\n-   function Create_New_File\n-     (Name : String;\n-      Indent_Amount : Natural := Default_Indent_Amount;\n-      Chunk_Length : Positive := Default_Chunk_Length) return File;\n-\n-   procedure Close (S : in out File'Class);\n-\n-private\n-\n-   package OS renames GNAT.OS_Lib;\n-\n-   type File is new Sink with record\n-      FD : OS.File_Descriptor := OS.Invalid_FD;\n-   end record;\n-\n-   overriding procedure Full_Method (S : in out File);\n-   overriding procedure Flush_Method (S : in out File);\n-\n-end Ada.Strings.Text_Output.Basic_Files;"}, {"sha": "3c5433866a102cea2a59678511b9fabac17ae3e0", "filename": "gcc/ada/libgnat/a-stoubu.adb", "status": "removed", "additions": 0, "deletions": 148, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stoubu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stoubu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stoubu.adb?ref=1d1e91f4c3f74bfa4d106d184ca206b5abccec4f", "patch": "@@ -1,148 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                      ADA.STRINGS.TEXT_OUTPUT.BUFFERS                     --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Unchecked_Deallocation;\n-with Ada.Strings.UTF_Encoding.Strings;\n-with Ada.Strings.UTF_Encoding.Wide_Strings;\n-with Ada.Strings.UTF_Encoding.Wide_Wide_Strings;\n-package body Ada.Strings.Text_Output.Buffers is\n-\n-   type Chunk_Access is access all Chunk;\n-\n-   function New_Buffer\n-     (Indent_Amount : Natural := Default_Indent_Amount;\n-      Chunk_Length : Positive := Default_Chunk_Length) return Buffer\n-   is\n-   begin\n-      return Result : Buffer (Chunk_Length) do\n-         Result.Indent_Amount := Indent_Amount;\n-         Result.Cur_Chunk := Result.Initial_Chunk'Unchecked_Access;\n-      end return;\n-   end New_Buffer;\n-\n-   --  We need type conversions of Chunk_Access values in the following two\n-   --  procedures, because the one in Text_Output has Storage_Size => 0,\n-   --  because Text_Output is Pure. We do not run afoul of 13.11.2(16/3),\n-   --  which requires the allocation and deallocation to have the same pool,\n-   --  because the allocation in Full_Method and the deallocation in Destroy\n-   --  use the same access type, and therefore the same pool.\n-\n-   procedure Destroy (S : in out Buffer) is\n-      procedure Free is new Unchecked_Deallocation (Chunk, Chunk_Access);\n-      Cur : Chunk_Access := Chunk_Access (S.Initial_Chunk.Next);\n-   begin\n-      while Cur /= null loop\n-         declare\n-            Temp : constant Chunk_Access := Chunk_Access (Cur.Next);\n-         begin\n-            Free (Cur);\n-            Cur := Temp;\n-         end;\n-      end loop;\n-\n-      S.Cur_Chunk := null;\n-   end Destroy;\n-\n-   overriding procedure Full_Method (S : in out Buffer) is\n-   begin\n-      pragma Assert (S.Cur_Chunk.Next = null);\n-      pragma Assert (S.Last = S.Cur_Chunk.Chars'Length);\n-      S.Cur_Chunk.Next :=\n-        Text_Output.Chunk_Access (Chunk_Access'(new Chunk (S.Chunk_Length)));\n-      S.Cur_Chunk := S.Cur_Chunk.Next;\n-      S.Num_Extra_Chunks := S.Num_Extra_Chunks + 1;\n-      S.Last := 0;\n-   end Full_Method;\n-\n-   function UTF_8_Length (S : Buffer'Class) return Natural is\n-   begin\n-      return S.Num_Extra_Chunks * S.Chunk_Length + S.Last;\n-   end UTF_8_Length;\n-\n-   procedure Get_UTF_8\n-     (S : Buffer'Class; Result : out UTF_8_Lines)\n-   is\n-      Cur : access constant Chunk := S.Initial_Chunk'Access;\n-      First : Positive := 1;\n-   begin\n-      loop\n-         if Cur.Next = null then\n-            pragma Assert (Result'Last = First + S.Last - 1);\n-            Result (First .. Result'Last) := Cur.Chars (1 .. S.Last);\n-            exit;\n-         end if;\n-\n-         pragma Assert (S.Chunk_Length = Cur.Chars'Length);\n-         Result (First .. First + S.Chunk_Length - 1) := Cur.Chars;\n-         First := First + S.Chunk_Length;\n-         Cur := Cur.Next;\n-      end loop;\n-   end Get_UTF_8;\n-\n-   function Get_UTF_8 (S : Buffer'Class) return UTF_8_Lines is\n-   begin\n-      return Result : String (1 .. UTF_8_Length (S)) do\n-         Get_UTF_8 (S, Result);\n-      end return;\n-   end Get_UTF_8;\n-\n-   function Get (S : Buffer'Class) return String is\n-   begin\n-      --  If all characters are 7 bits, we don't need to decode;\n-      --  this is an optimization.\n-\n-      --  Otherwise, if all are 8 bits, we need to decode to get Latin-1.\n-      --  Otherwise, the result is implementation defined, so we return a\n-      --  String encoded as UTF-8. (Note that the AI says \"if any character\n-      --  in the sequence is not defined in Character, the result is\n-      --  implementation-defined\", so we are not obliged to decode ANY\n-      --  Latin-1 characters if ANY character is bigger than 8 bits.\n-\n-      if S.All_7_Bits then\n-         return Get_UTF_8 (S);\n-      elsif S.All_8_Bits then\n-         return UTF_Encoding.Strings.Decode (Get_UTF_8 (S));\n-      else\n-         return Get_UTF_8 (S);\n-      end if;\n-   end Get;\n-\n-   function Wide_Get (S : Buffer'Class) return Wide_String is\n-   begin\n-      return UTF_Encoding.Wide_Strings.Decode (Get_UTF_8 (S));\n-   end Wide_Get;\n-\n-   function Wide_Wide_Get (S : Buffer'Class) return Wide_Wide_String is\n-   begin\n-      return UTF_Encoding.Wide_Wide_Strings.Decode (Get_UTF_8 (S));\n-   end Wide_Wide_Get;\n-\n-end Ada.Strings.Text_Output.Buffers;"}, {"sha": "0370cae1b41f786df1ebe9903021a425fbd66f42", "filename": "gcc/ada/libgnat/a-stoubu.ads", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stoubu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stoubu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stoubu.ads?ref=1d1e91f4c3f74bfa4d106d184ca206b5abccec4f", "patch": "@@ -1,73 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                      ADA.STRINGS.TEXT_OUTPUT.BUFFERS                     --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-package Ada.Strings.Text_Output.Buffers is\n-\n-   type Buffer (<>) is new Sink with private;\n-\n-   function New_Buffer\n-     (Indent_Amount : Natural := Default_Indent_Amount;\n-      Chunk_Length : Positive := Default_Chunk_Length) return Buffer;\n-\n-   procedure Destroy (S : in out Buffer);\n-   --  Reclaim any heap-allocated data, and render the Buffer unusable.\n-   --  It would make sense to do this via finalization, but we wish to\n-   --  avoid controlled types in the generated code for 'Image.\n-\n-   function Get_UTF_8 (S : Buffer'Class) return UTF_8_Lines;\n-   --  Get the characters in S, encoded as UTF-8.\n-\n-   function UTF_8_Length (S : Buffer'Class) return Natural;\n-   procedure Get_UTF_8\n-     (S : Buffer'Class; Result : out UTF_8_Lines) with\n-       Pre => Result'First = 1 and Result'Last = UTF_8_Length (S);\n-   --  This is a procedure version of the Get_UTF_8 function, for\n-   --  efficiency. The Result String must be the exact right length.\n-\n-   function Get (S : Buffer'Class) return String;\n-   function Wide_Get (S : Buffer'Class) return Wide_String;\n-   function Wide_Wide_Get (S : Buffer'Class) return Wide_Wide_String;\n-   --  Get the characters in S, decoded as [[Wide_]Wide_]String.\n-   --  There is no need for procedure versions of these, because\n-   --  they are intended primarily to implement the [[Wide_]Wide_]Image\n-   --  attribute, which is already a function.\n-\n-private\n-   type Chunk_Count is new Natural;\n-   type Buffer is new Sink with record\n-      Num_Extra_Chunks : Natural := 0;\n-      --  Number of chunks in the linked list, not including Initial_Chunk.\n-   end record;\n-\n-   overriding procedure Full_Method (S : in out Buffer);\n-   overriding procedure Flush_Method (S : in out Buffer) is null;\n-\n-end Ada.Strings.Text_Output.Buffers;"}, {"sha": "3444e3b47d98ce2ea97dde3cb032dd9ac13a4d70", "filename": "gcc/ada/libgnat/a-stoufi.adb", "status": "removed", "additions": 0, "deletions": 123, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stoufi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stoufi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stoufi.adb?ref=1d1e91f4c3f74bfa4d106d184ca206b5abccec4f", "patch": "@@ -1,123 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                       ADA.STRINGS.TEXT_OUTPUT.FILES                      --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Ada.Strings.Text_Output.Utils; use Ada.Strings.Text_Output.Utils;\n-package body Ada.Strings.Text_Output.Files is\n-   use type OS.File_Descriptor;\n-\n-   function Create_From_FD\n-     (FD : OS.File_Descriptor;\n-      Indent_Amount : Natural;\n-      Chunk_Length : Positive) return File;\n-   --  Create a file from an OS file descriptor\n-\n-   function Create_From_FD\n-     (FD : OS.File_Descriptor;\n-      Indent_Amount : Natural;\n-      Chunk_Length : Positive) return File\n-   is\n-   begin\n-      if FD = OS.Invalid_FD then\n-         raise Program_Error;\n-      end if;\n-      return Result : File (Chunk_Length) do\n-         Result.Indent_Amount := Indent_Amount;\n-         Result.Cur_Chunk := Result.Initial_Chunk'Unchecked_Access;\n-         Result.FD := FD;\n-      end return;\n-   end Create_From_FD;\n-\n-   function Create_File\n-     (Name : String;\n-      Indent_Amount : Natural := Default_Indent_Amount;\n-      Chunk_Length : Positive := Default_Chunk_Length) return File\n-   is\n-   begin\n-      return Create_From_FD\n-        (OS.Create_File (Name, Fmode => OS.Binary),\n-         Indent_Amount, Chunk_Length);\n-   end Create_File;\n-\n-   function Create_New_File\n-     (Name : String;\n-      Indent_Amount : Natural := Default_Indent_Amount;\n-      Chunk_Length : Positive := Default_Chunk_Length) return File\n-   is\n-   begin\n-      return Create_From_FD\n-        (OS.Create_New_File (Name, Fmode => OS.Binary),\n-         Indent_Amount, Chunk_Length);\n-   end Create_New_File;\n-\n-   overriding procedure Finalize (Ref : in out Self_Ref) is\n-   begin\n-      Close (Ref.Self.all);\n-   end Finalize;\n-\n-   procedure Close (S : in out File'Class) is\n-      Status : Boolean;\n-   begin\n-      Flush (S);\n-\n-      if S.FD not in OS.Standout | OS.Standerr then -- Don't close these\n-         OS.Close (S.FD, Status);\n-         if not Status then\n-            raise Program_Error;\n-         end if;\n-      end if;\n-   end Close;\n-\n-   overriding procedure Full_Method (S : in out File) renames Flush_Method;\n-\n-   overriding procedure Flush_Method (S : in out File) is\n-      pragma Assert (S.Cur_Chunk = S.Initial_Chunk'Unchecked_Access);\n-      Res : constant Integer :=\n-        OS.Write (S.FD, S.Cur_Chunk.Chars'Address, S.Last);\n-   begin\n-      if Res /= S.Last then\n-         raise Program_Error;\n-      end if;\n-      S.Last := 0;\n-   end Flush_Method;\n-\n-   The_Stdout : aliased File :=\n-     Create_From_FD (OS.Standout,\n-                     Indent_Amount => Default_Indent_Amount,\n-                     Chunk_Length => Default_Chunk_Length);\n-   The_Stderr : aliased File :=\n-     Create_From_FD (OS.Standerr,\n-                     Indent_Amount => Default_Indent_Amount,\n-                     Chunk_Length => Default_Chunk_Length);\n-\n-   function Standard_Output return Sink_Access is (The_Stdout'Access);\n-   function Standard_Error return Sink_Access is (The_Stderr'Access);\n-\n-end Ada.Strings.Text_Output.Files;"}, {"sha": "330b84f201dc7d7f0de688f13b1cdf14a16b6ecd", "filename": "gcc/ada/libgnat/a-stoufi.ads", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stoufi.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stoufi.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stoufi.ads?ref=1d1e91f4c3f74bfa4d106d184ca206b5abccec4f", "patch": "@@ -1,72 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                       ADA.STRINGS.TEXT_OUTPUT.FILES                      --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-private with GNAT.OS_Lib;\n-private with Ada.Finalization;\n-package Ada.Strings.Text_Output.Files is\n-   --  This package supports a Sink type that sends output to a file. The file\n-   --  is automatically closed when finalized.\n-\n-   function Standard_Output return Sink_Access;\n-   function Standard_Error return Sink_Access;\n-\n-   type File (<>) is new Sink with private;\n-\n-   function Create_File\n-     (Name : String;\n-      Indent_Amount : Natural := Default_Indent_Amount;\n-      Chunk_Length : Positive := Default_Chunk_Length) return File;\n-   function Create_New_File\n-     (Name : String;\n-      Indent_Amount : Natural := Default_Indent_Amount;\n-      Chunk_Length : Positive := Default_Chunk_Length) return File;\n-   --  Create a file. Create_New_File raises an exception if the file already\n-   --  exists; Create_File overwrites.\n-\n-   procedure Close (S : in out File'Class);\n-\n-private\n-\n-   package OS renames GNAT.OS_Lib;\n-\n-   type Self_Ref (Self : access File) is new Finalization.Limited_Controlled\n-     with null record;\n-   overriding procedure Finalize (Ref : in out Self_Ref);\n-\n-   type File is new Sink with record\n-      FD : OS.File_Descriptor := OS.Invalid_FD;\n-      Ref : Self_Ref (File'Access);\n-   end record;\n-\n-   overriding procedure Full_Method (S : in out File);\n-   overriding procedure Flush_Method (S : in out File);\n-\n-end Ada.Strings.Text_Output.Files;"}, {"sha": "3be8826923c079449b4235927b4f3b809b0bca08", "filename": "gcc/ada/libgnat/a-stoufo.adb", "status": "removed", "additions": 0, "deletions": 155, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stoufo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stoufo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stoufo.adb?ref=1d1e91f4c3f74bfa4d106d184ca206b5abccec4f", "patch": "@@ -1,155 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                    ADA.STRINGS.TEXT_OUTPUT.FORMATTING                    --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Ada.Strings.Text_Output.Files;\n-with Ada.Strings.Text_Output.Buffers; use Ada.Strings.Text_Output.Buffers;\n-with Ada.Strings.Text_Output.Utils; use Ada.Strings.Text_Output.Utils;\n-package body Ada.Strings.Text_Output.Formatting is\n-\n-   procedure Put\n-     (S : in out Sink'Class; T : Template;\n-      X1, X2, X3, X4, X5, X6, X7, X8, X9 : UTF_8_Lines := \"\")\n-   is\n-      J : Positive := T'First;\n-      Used : array (1 .. 9) of Boolean := (others => False);\n-   begin\n-      while J <= T'Last loop\n-         if T (J) = '\\' then\n-            J := J + 1;\n-            case T (J) is\n-               when 'n' =>\n-                  New_Line (S);\n-               when '\\' =>\n-                  Put_7bit (S, '\\');\n-               when 'i' =>\n-                  Indent (S);\n-               when 'o' =>\n-                  Outdent (S);\n-               when 'I' =>\n-                  Indent (S, 1);\n-               when 'O' =>\n-                  Outdent (S, 1);\n-\n-               when '1' =>\n-                  Used (1) := True;\n-                  Put_UTF_8_Lines (S, X1);\n-               when '2' =>\n-                  Used (2) := True;\n-                  Put_UTF_8_Lines (S, X2);\n-               when '3' =>\n-                  Used (3) := True;\n-                  Put_UTF_8_Lines (S, X3);\n-               when '4' =>\n-                  Used (4) := True;\n-                  Put_UTF_8_Lines (S, X4);\n-               when '5' =>\n-                  Used (5) := True;\n-                  Put_UTF_8_Lines (S, X5);\n-               when '6' =>\n-                  Used (6) := True;\n-                  Put_UTF_8_Lines (S, X6);\n-               when '7' =>\n-                  Used (7) := True;\n-                  Put_UTF_8_Lines (S, X7);\n-               when '8' =>\n-                  Used (8) := True;\n-                  Put_UTF_8_Lines (S, X8);\n-               when '9' =>\n-                  Used (9) := True;\n-                  Put_UTF_8_Lines (S, X9);\n-\n-               when others =>\n-                  raise Program_Error;\n-            end case;\n-         else\n-            Put_7bit (S, T (J));\n-         end if;\n-\n-         J := J + 1;\n-      end loop;\n-\n-      if not Used (1) then\n-         pragma Assert (X1 = \"\");\n-      end if;\n-      if not Used (2) then\n-         pragma Assert (X2 = \"\");\n-      end if;\n-      if not Used (3) then\n-         pragma Assert (X3 = \"\");\n-      end if;\n-      if not Used (4) then\n-         pragma Assert (X4 = \"\");\n-      end if;\n-      if not Used (5) then\n-         pragma Assert (X5 = \"\");\n-      end if;\n-      if not Used (6) then\n-         pragma Assert (X6 = \"\");\n-      end if;\n-      if not Used (7) then\n-         pragma Assert (X7 = \"\");\n-      end if;\n-      if not Used (8) then\n-         pragma Assert (X8 = \"\");\n-      end if;\n-      if not Used (9) then\n-         pragma Assert (X9 = \"\");\n-      end if;\n-\n-      Flush (S);\n-   end Put;\n-\n-   procedure Put\n-     (T : Template;\n-      X1, X2, X3, X4, X5, X6, X7, X8, X9 : UTF_8_Lines := \"\") is\n-   begin\n-      Put (Files.Standard_Output.all, T, X1, X2, X3, X4, X5, X6, X7, X8, X9);\n-   end Put;\n-\n-   procedure Err\n-     (T : Template;\n-      X1, X2, X3, X4, X5, X6, X7, X8, X9 : UTF_8_Lines := \"\") is\n-   begin\n-      Put (Files.Standard_Error.all, T, X1, X2, X3, X4, X5, X6, X7, X8, X9);\n-   end Err;\n-\n-   function Format\n-     (T : Template;\n-      X1, X2, X3, X4, X5, X6, X7, X8, X9 : UTF_8_Lines := \"\")\n-     return UTF_8_Lines\n-   is\n-      Buf : Buffer := New_Buffer;\n-   begin\n-      Put (Buf, T, X1, X2, X3, X4, X5, X6, X7, X8, X9);\n-      return Get_UTF_8 (Buf);\n-   end Format;\n-\n-end Ada.Strings.Text_Output.Formatting;"}, {"sha": "a03d087603ddce8381ba00d7ad3d09c8586b93f0", "filename": "gcc/ada/libgnat/a-stoufo.ads", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stoufo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stoufo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stoufo.ads?ref=1d1e91f4c3f74bfa4d106d184ca206b5abccec4f", "patch": "@@ -1,72 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                    ADA.STRINGS.TEXT_OUTPUT.FORMATTING                    --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-package Ada.Strings.Text_Output.Formatting is\n-\n-   --  Template-based output, based loosely on C's printf family. Unlike\n-   --  printf, it is type safe. We don't support myriad formatting options; the\n-   --  caller is expected to call 'Image, or other functions that might have\n-   --  various formatting capabilities.\n-   --\n-   --  Each of the following calls Flush\n-\n-   type Template is new UTF_8;\n-   procedure Put\n-     (S : in out Sink'Class; T : Template;\n-      X1, X2, X3, X4, X5, X6, X7, X8, X9 : UTF_8_Lines := \"\");\n-   --  Prints the template as is, except for the following escape sequences:\n-   --    \"\\n\" is end of line.\n-   --    \"\\i\" indents by the default amount, and \"\\o\" outdents.\n-   --    \"\\I\" indents by one space, and \"\\O\" outdents.\n-   --    \"\\1\" is replaced with X1, and similarly for 2, 3, ....\n-   --    \"\\\\\" is \"\\\".\n-\n-   --  Note that the template is not type String, to avoid this sort of thing:\n-   --\n-   --      https://xkcd.com/327/\n-\n-   procedure Put\n-     (T : Template;\n-      X1, X2, X3, X4, X5, X6, X7, X8, X9 : UTF_8_Lines := \"\");\n-   --  Sends to standard output\n-\n-   procedure Err\n-     (T : Template;\n-      X1, X2, X3, X4, X5, X6, X7, X8, X9 : UTF_8_Lines := \"\");\n-   --  Sends to standard error\n-\n-   function Format\n-     (T : Template;\n-      X1, X2, X3, X4, X5, X6, X7, X8, X9 : UTF_8_Lines := \"\")\n-     return UTF_8_Lines;\n-   --  Returns a UTF-8-encoded String\n-\n-end Ada.Strings.Text_Output.Formatting;"}, {"sha": "6b8f72ba84d84d08013b89b2b04a30b848cef630", "filename": "gcc/ada/libgnat/a-stouut.adb", "status": "removed", "additions": 0, "deletions": 272, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stouut.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stouut.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stouut.adb?ref=1d1e91f4c3f74bfa4d106d184ca206b5abccec4f", "patch": "@@ -1,272 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                       ADA.STRINGS.TEXT_OUTPUT.UTILS                      --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Ada.Strings.UTF_Encoding.Wide_Wide_Strings;\n-\n-package body Ada.Strings.Text_Output.Utils is\n-\n-   procedure Put_Octet (S : in out Sink'Class; Item : Character) with Inline;\n-   --  Send a single octet to the current Chunk\n-\n-   procedure Adjust_Column (S : in out Sink'Class) with Inline;\n-   --  Adjust the column for a non-NL character.\n-\n-   procedure Put_UTF_8_Outline (S : in out Sink'Class; Item : UTF_8);\n-   --  Out-of-line portion of Put_UTF_8. This exists solely to make Put_UTF_8\n-   --  small enough to reasonably inline it.\n-\n-   procedure Full (S : in out Sink'Class) is\n-   begin\n-      pragma Assert (S.Last = S.Chunk_Length);\n-      Full_Method (S);\n-      pragma Assert (S.Last = 0);\n-   end Full;\n-\n-   procedure Flush (S : in out Sink'Class) is\n-   begin\n-      Flush_Method (S);\n-   end Flush;\n-\n-   procedure Put_Octet (S : in out Sink'Class; Item : Character) is\n-   begin\n-      S.Last := S.Last + 1;\n-      S.Cur_Chunk.Chars (S.Last) := Item;\n-      pragma Assert (S.Chunk_Length = S.Cur_Chunk.Chars'Length);\n-      if S.Last = S.Chunk_Length then\n-         Full (S);\n-      end if;\n-   end Put_Octet;\n-\n-   procedure Adjust_Column (S : in out Sink'Class) is\n-   begin\n-      --  If we're in the first column, indent. This is handled here, rather\n-      --  than when we see NL, because we don't want spaces in a blank line.\n-      --  The character we're about to put is not NL; NL is handled in\n-      --  New_Line. So after indenting, we simply increment the Column.\n-\n-      if S.Column = 1 then\n-         Tab_To_Column (S, S.Indentation + 1);\n-      end if;\n-      S.Column := S.Column + 1;\n-   end Adjust_Column;\n-\n-   procedure Put_7bit (S : in out Sink'Class; Item : Character_7) is\n-   begin\n-      Adjust_Column (S);\n-      Put_Octet (S, Item);\n-   end Put_7bit;\n-\n-   procedure Put_7bit_NL (S : in out Sink'Class; Item : Character_7) is\n-   begin\n-      if Item = NL then\n-         New_Line (S);\n-      else\n-         Put_7bit (S, Item);\n-      end if;\n-   end Put_7bit_NL;\n-\n-   procedure Put_Character (S : in out Sink'Class; Item : Character) is\n-   begin\n-      if Character'Pos (Item) < 2**7 then\n-         Put_7bit_NL (S, Item);\n-      else\n-         Put_Wide_Wide_Character (S, To_Wide_Wide (Item));\n-      end if;\n-   end Put_Character;\n-\n-   procedure Put_Wide_Character\n-     (S : in out Sink'Class; Item : Wide_Character) is\n-   begin\n-      if Wide_Character'Pos (Item) < 2**7 then\n-         Put_7bit_NL (S, From_Wide (Item));\n-      else\n-         Put_Wide_Wide_Character (S, To_Wide_Wide (Item));\n-      end if;\n-   end Put_Wide_Character;\n-\n-   procedure Put_Wide_Wide_Character\n-     (S : in out Sink'Class; Item : Wide_Wide_Character) is\n-   begin\n-      if Wide_Wide_Character'Pos (Item) < 2**7 then\n-         Put_7bit_NL (S, From_Wide_Wide (Item));\n-      else\n-         S.All_7_Bits := False;\n-         if Wide_Wide_Character'Pos (Item) >= 2**8 then\n-            S.All_8_Bits := False;\n-         end if;\n-         declare\n-            Temp : constant UTF_8_Lines :=\n-              UTF_Encoding.Wide_Wide_Strings.Encode ((1 => Item));\n-         begin\n-            for X of Temp loop\n-               pragma Assert (X /= NL);\n-               Adjust_Column (S);\n-               Put_Octet (S, X);\n-            end loop;\n-         end;\n-      end if;\n-   end Put_Wide_Wide_Character;\n-\n-   procedure Put_UTF_8_Outline (S : in out Sink'Class; Item : UTF_8) is\n-   begin\n-      if S.Last + Item'Length = S.Chunk_Length then\n-         --  Item fits exactly in current chunk\n-\n-         S.Cur_Chunk.Chars (S.Last + 1 .. S.Last + Item'Length) := Item;\n-         S.Last := S.Last + Item'Length;\n-         S.Column := S.Column + Item'Length;\n-         Full (S);\n-         --  ???Seems like maybe we shouldn't call Full until we have MORE\n-         --  characters. But then we can't pass Chunk_Length => 1 to\n-         --  Create_File to get unbuffered output.\n-      else\n-         --  We get here only if Item doesn't fit in the current chunk, which\n-         --  should be fairly rare. We split Item into Left and Right, where\n-         --  Left exactly fills the current chunk, and recurse on Left and\n-         --  Right. Right will fit into the next chunk unless it's very long,\n-         --  so another level of recursion will be extremely rare.\n-\n-         declare\n-            Left_Length : constant Natural := S.Chunk_Length - S.Last;\n-            Right_First : constant Natural := Item'First + Left_Length;\n-            Left : UTF_8 renames Item (Item'First .. Right_First - 1);\n-            Right : UTF_8 renames Item (Right_First .. Item'Last);\n-            pragma Assert (Left & Right = Item);\n-         begin\n-            Put_UTF_8 (S, Left); -- This will call Full.\n-            Put_UTF_8 (S, Right); -- This might call Full, but probably not.\n-         end;\n-      end if;\n-   end Put_UTF_8_Outline;\n-\n-   procedure Put_UTF_8 (S : in out Sink'Class; Item : UTF_8) is\n-   begin\n-      Adjust_Column (S);\n-\n-      if S.Last + Item'Length < S.Chunk_Length then\n-         --  Item fits in current chunk\n-\n-         S.Cur_Chunk.Chars (S.Last + 1 .. S.Last + Item'Length) := Item;\n-         S.Last := S.Last + Item'Length;\n-         S.Column := S.Column + Item'Length;\n-      else\n-         Put_UTF_8_Outline (S, Item);\n-      end if;\n-   end Put_UTF_8;\n-\n-   procedure Put_UTF_8_Lines (S : in out Sink'Class; Item : UTF_8_Lines) is\n-      Line_Start, Index : Integer := Item'First;\n-      --  Needs to be Integer, because Item'First might be negative for empty\n-      --  Items.\n-   begin\n-      while Index <= Item'Last loop\n-         if Item (Index) = NL then\n-            if Index > Line_Start then\n-               Put_UTF_8 (S, Item (Line_Start .. Index - 1));\n-            end if;\n-            New_Line (S);\n-            Line_Start := Index + 1;\n-         end if;\n-\n-         Index := Index + 1;\n-      end loop;\n-\n-      if Index > Line_Start then\n-         Put_UTF_8 (S, Item (Line_Start .. Index - 1));\n-      end if;\n-   end Put_UTF_8_Lines;\n-\n-   procedure Put_String (S : in out Sink'Class; Item : String) is\n-   begin\n-      for X of Item loop\n-         Put_Character (S, X);\n-      end loop;\n-   end Put_String;\n-\n-   procedure Put_Wide_String (S : in out Sink'Class; Item : Wide_String) is\n-   begin\n-      for X of Item loop\n-         Put_Wide_Character (S, X);\n-      end loop;\n-   end Put_Wide_String;\n-\n-   procedure Put_Wide_Wide_String\n-     (S : in out Sink'Class; Item : Wide_Wide_String) is\n-   begin\n-      for X of Item loop\n-         Put_Wide_Wide_Character (S, X);\n-      end loop;\n-   end Put_Wide_Wide_String;\n-\n-   procedure New_Line (S : in out Sink'Class) is\n-   begin\n-      S.Column := 1;\n-      Put_Octet (S, NL);\n-   end New_Line;\n-\n-   function Column (S : Sink'Class) return Positive is (S.Column);\n-\n-   procedure Tab_To_Column (S : in out Sink'Class; Column : Positive) is\n-   begin\n-      if S.Column < Column then\n-         for X in 1 .. Column - S.Column loop\n-            Put_Octet (S, ' ');\n-         end loop;\n-         S.Column := Column;\n-      end if;\n-   end Tab_To_Column;\n-\n-   procedure Set_Indentation (S : in out Sink'Class; Amount : Natural) is\n-   begin\n-      S.Indentation := Amount;\n-   end Set_Indentation;\n-\n-   function Indentation (S : Sink'Class) return Natural is (S.Indentation);\n-\n-   procedure Indent\n-     (S : in out Sink'Class; Amount : Optional_Indentation := Default)\n-   is\n-      By : constant Natural :=\n-        (if Amount = Default then S.Indent_Amount else Amount);\n-   begin\n-      Set_Indentation (S, Indentation (S) + By);\n-   end Indent;\n-\n-   procedure Outdent\n-     (S : in out Sink'Class; Amount : Optional_Indentation := Default)\n-   is\n-      By : constant Natural :=\n-        (if Amount = Default then S.Indent_Amount else Amount);\n-   begin\n-      Set_Indentation (S, Indentation (S) - By);\n-   end Outdent;\n-\n-end Ada.Strings.Text_Output.Utils;"}, {"sha": "69cde5573e62ac7bea6b60fea83558544aca1d66", "filename": "gcc/ada/libgnat/a-stouut.ads", "status": "removed", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stouut.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stouut.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stouut.ads?ref=1d1e91f4c3f74bfa4d106d184ca206b5abccec4f", "patch": "@@ -1,107 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                       ADA.STRINGS.TEXT_OUTPUT.UTILS                      --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-package Ada.Strings.Text_Output.Utils with Pure is\n-\n-   --  This package provides utility functions on Sink'Class. These are\n-   --  intended for use by Put_Image attributes, both the default versions\n-   --  generated by the compiler, and user-defined ones.\n-\n-   procedure Full (S : in out Sink'Class) with Inline;\n-   --  Must be called when the current chunk is full. Dispatches to\n-   --  Full_Method.\n-\n-   procedure Flush (S : in out Sink'Class) with Inline;\n-   --  Dispatches to Flush_Method\n-\n-   --  Full_Method and Flush_Method should be called only via Full and Flush\n-\n-   procedure Put_Character (S : in out Sink'Class; Item : Character);\n-   procedure Put_Wide_Character (S : in out Sink'Class; Item : Wide_Character);\n-   procedure Put_Wide_Wide_Character\n-     (S : in out Sink'Class; Item : Wide_Wide_Character);\n-   procedure Put_String (S : in out Sink'Class; Item : String);\n-   procedure Put_Wide_String (S : in out Sink'Class; Item : Wide_String);\n-   procedure Put_Wide_Wide_String\n-     (S : in out Sink'Class; Item : Wide_Wide_String);\n-   --  Encode characters or strings as UTF-8, and send them to S.\n-\n-   subtype Character_7 is\n-     Character range Character'Val (0) .. Character'Val (2**7 - 1);\n-   --  7-bit character. These are the same in both Latin-1 and UTF-8.\n-\n-   procedure Put_7bit (S : in out Sink'Class; Item : Character_7)\n-     with Inline, Pre => Item /= NL;\n-   procedure Put_7bit_NL (S : in out Sink'Class; Item : Character_7)\n-     with Inline;\n-   --  Put a 7-bit character, and adjust the Column. For Put_7bit_NL, Item can\n-   --  be NL.\n-\n-   procedure Put_UTF_8 (S : in out Sink'Class; Item : UTF_8) with Inline;\n-   procedure Put_UTF_8_Lines (S : in out Sink'Class; Item : UTF_8_Lines);\n-   --  Send data that is already UTF-8 encoded (including 7-bit ASCII) to\n-   --  S. These are more efficient than Put_String.\n-\n-   procedure New_Line (S : in out Sink'Class) with\n-     Inline, Post => Column (S) = 1;\n-   --  Puts the new-line character.\n-\n-   function Column (S : Sink'Class) return Positive with Inline;\n-   --  Current output column. The Column is initially 1, and is incremented for\n-   --  each 7-bit character output, except for the new-line character, which\n-   --  sets Column back to 1. The next character to be output will go in this\n-   --  column.\n-\n-   procedure Tab_To_Column (S : in out Sink'Class; Column : Positive);\n-   --  Put spaces until we're at or past Column.\n-\n-   procedure Set_Indentation (S : in out Sink'Class; Amount : Natural)\n-     with Inline;\n-   function Indentation (S : Sink'Class) return Natural with Inline;\n-   --  Indentation is initially 0. Set_Indentation sets it, and Indentation\n-   --  returns it. This number of space characters are put at the start of\n-   --  each nonempty line.\n-\n-   subtype Optional_Indentation is Integer range -1 .. Natural'Last;\n-   Default : constant Optional_Indentation := -1;\n-\n-   procedure Indent\n-     (S : in out Sink'Class; Amount : Optional_Indentation := Default)\n-      with Inline;\n-   procedure Outdent\n-     (S : in out Sink'Class; Amount : Optional_Indentation := Default)\n-      with Inline;\n-   --  Increase/decrease Indentation by Amount. If Amount = Default, the amount\n-   --  specified by the Indent_Amount parameter of the sink creation function\n-   --  is used. The sink creation functions are New_Buffer, Create_File, and\n-   --  Create_New_File.\n-\n-end Ada.Strings.Text_Output.Utils;"}, {"sha": "324c9e6f9476b60f71a4b72c4b999f44b18efb02", "filename": "gcc/ada/libgnat/a-stteou.ads", "status": "removed", "additions": 0, "deletions": 193, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stteou.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1e91f4c3f74bfa4d106d184ca206b5abccec4f/gcc%2Fada%2Flibgnat%2Fa-stteou.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stteou.ads?ref=1d1e91f4c3f74bfa4d106d184ca206b5abccec4f", "patch": "@@ -1,193 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                          ADA.STRINGS.TEXT_OUTPUT                         --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Ada.Strings.UTF_Encoding;\n-with Ada.Strings.UTF_Encoding.Wide_Wide_Strings;\n-\n-package Ada.Strings.Text_Output with Pure is\n-\n-   --  This package provides a \"Sink\" abstraction, to which characters of type\n-   --  Character, Wide_Character, and Wide_Wide_Character can be sent. This\n-   --  type is used by the Put_Image attribute. In particular, T'Put_Image has\n-   --  the following parameter types:\n-   --\n-   --     procedure T'Put_Image (S : in out Sink'Class; V : T);\n-   --\n-   --  The default generated code for Put_Image of a composite type will\n-   --  typically call Put_Image on the components.\n-   --\n-   --  This is not a fully general abstraction that can be arbitrarily\n-   --  extended. It is designed with particular extensions in mind, and these\n-   --  extensions are declared in child packages of this package, because they\n-   --  depend on implementation details in the private part of this\n-   --  package.\n-   --\n-   --  Users are not expected to extend type Sink.\n-   --\n-   --  The primary extensions of Sink are:\n-   --\n-   --     Buffer. The characters sent to a Buffer are stored in memory, and can\n-   --     be retrieved via Get functions. This is intended for the\n-   --     implementation of the 'Image attribute. The compiler will generate a\n-   --     T'Image function that declares a local Buffer, sends characters to\n-   --     it, and then returns a call to Get, Destroying the Buffer on return.\n-   --\n-   --       function T'Image (V : T) return String is\n-   --          Buf : Buffer := New_Buffer (...);\n-   --       begin\n-   --          T'Put_Image (Buf, V);\n-   --          return Result : constant String := Get (Buf) do\n-   --             Destroy (Buf);\n-   --          end return;\n-   --       end T'Image;\n-   --       ????Perhaps Buffer should be controlled; if you don't like\n-   --       controlled types, call Put_Image directly.\n-   --\n-   --     File. The characters are sent to a file, possibly opened by file\n-   --     name, or possibly standard output or standard error. 'Put_Image\n-   --     can be called directly on a File, thus avoiding any heap allocation.\n-\n-   type Sink (<>) is abstract tagged limited private;\n-   type Sink_Access is access all Sink'Class with Storage_Size => 0;\n-   --  Sink is a character sink; you can send characters to a Sink.\n-   --  UTF-8 encoding is used.\n-\n-   procedure Full_Method (S : in out Sink) is abstract;\n-   procedure Flush_Method (S : in out Sink) is abstract;\n-   --  There is an internal buffer to store the characters. Full_Method is\n-   --  called when the buffer is full, and Flush_Method may be called to flush\n-   --  the buffer. For Buffer, Full_Method allocates more space for more\n-   --  characters, and Flush_Method does nothing. For File, Full_Method and\n-   --  Flush_Method do the same thing: write the characters to the file, and\n-   --  empty the internal buffer.\n-   --\n-   --  These are the only dispatching subprograms on Sink. This is for\n-   --  efficiency; we don't dispatch on every write to the Sink, but only when\n-   --  the internal buffer is full (or upon client request).\n-   --\n-   --  Full_Method and Flush_Method must make the current chunk empty.\n-   --\n-   --  Additional operations operating on Sink'Class are declared in the Utils\n-   --  child, including Full and Flush, which call the above.\n-\n-   function To_Wide (C : Character) return Wide_Character is\n-     (Wide_Character'Val (Character'Pos (C)));\n-   function To_Wide_Wide (C : Character) return Wide_Wide_Character is\n-     (Wide_Wide_Character'Val (Character'Pos (C)));\n-   function To_Wide_Wide (C : Wide_Character) return Wide_Wide_Character is\n-     (Wide_Wide_Character'Val (Wide_Character'Pos (C)));\n-   --  Conversions [Wide_]Character --> [Wide_]Wide_Character.\n-   --  These cannot fail.\n-\n-   function From_Wide (C : Wide_Character) return Character is\n-     (Character'Val (Wide_Character'Pos (C)));\n-   function From_Wide_Wide (C : Wide_Wide_Character) return Character is\n-     (Character'Val (Wide_Wide_Character'Pos (C)));\n-   function From_Wide_Wide (C : Wide_Wide_Character) return Wide_Character is\n-     (Wide_Character'Val (Wide_Wide_Character'Pos (C)));\n-   --  Conversions [Wide_]Wide_Character --> [Wide_]Character.\n-   --  These fail if the character is out of range.\n-\n-   function NL return Character is (ASCII.LF) with Inline;\n-   function Wide_NL return Wide_Character is (To_Wide (Character'(NL)))\n-     with Inline;\n-   function Wide_Wide_NL return Wide_Wide_Character is\n-     (To_Wide_Wide (Character'(NL))) with Inline;\n-   --  Character representing new line. There is no support for CR/LF line\n-   --  endings.\n-\n-   --  We have two subtypes of String that are encoded in UTF-8. UTF_8 cannot\n-   --  contain newline characters; UTF_8_Lines can. Sending UTF_8 data to a\n-   --  Sink is more efficient, because end-of-line processing is not needed.\n-   --  Both of these are more efficient than [[Wide_]Wide_]String, because no\n-   --  encoding is needed.\n-\n-   subtype UTF_8_Lines is UTF_Encoding.UTF_8_String with\n-     Predicate =>\n-       UTF_Encoding.Wide_Wide_Strings.Encode\n-         (UTF_Encoding.Wide_Wide_Strings.Decode (UTF_8_Lines)) = UTF_8_Lines;\n-\n-   subtype UTF_8 is UTF_8_Lines with\n-     Predicate => (for all UTF_8_Char of UTF_8 => UTF_8_Char /= NL);\n-\n-   Default_Indent_Amount : constant Natural := 4;\n-\n-   Default_Chunk_Length : constant Positive := 500;\n-   --  Experiment shows this value to be reasonably efficient; decreasing it\n-   --  slows things down, but increasing it doesn't gain much.\n-\n-private\n-   --  For Buffer, the \"internal buffer\" mentioned above is implemented as a\n-   --  linked list of chunks. When the current chunk is full, we allocate a new\n-   --  one. For File, there is only one chunk. When it is full, we send the\n-   --  data to the file, and empty it.\n-\n-   type Chunk;\n-   type Chunk_Access is access all Chunk with Storage_Size => 0;\n-   type Chunk (Length : Positive) is limited record\n-      Next : Chunk_Access := null;\n-      Chars : UTF_8_Lines (1 .. Length);\n-   end record;\n-\n-   type Sink (Chunk_Length : Positive) is abstract tagged limited record\n-      Indent_Amount : Natural;\n-      Column : Positive := 1;\n-      Indentation : Natural := 0;\n-\n-      All_7_Bits : Boolean := True;\n-      --  For optimization of Text_Output.Buffers.Get (cf).\n-      --  True if all characters seen so far fit in 7 bits.\n-      --  7-bit characters are represented the same in Character\n-      --  and in UTF-8, so they don't need translation.\n-\n-      All_8_Bits : Boolean := True;\n-      --  True if all characters seen so far fit in 8 bits.\n-      --  This is needed in Text_Output.Buffers.Get to distinguish\n-      --  the case where all characters are Latin-1 (so it should\n-      --  decode) from the case where some characters are bigger than\n-      --  8 bits (so the result is implementation defined).\n-\n-      Cur_Chunk : Chunk_Access;\n-      --  Points to the chunk we are currently sending characters to.\n-      --  We want to say:\n-      --     Cur_Chunk : Chunk_Access := Initial_Chunk'Access;\n-      --  but that's illegal, so we have some horsing around to do.\n-\n-      Last : Natural := 0;\n-      --  Last-used character in Cur_Chunk.all.\n-\n-      Initial_Chunk : aliased Chunk (Length => Chunk_Length);\n-      --  For Buffer, this is the first chunk. Subsequent chunks are allocated\n-      --  on the heap. For File, this is the only chunk, and there is no heap\n-      --  allocation.\n-   end record;\n-\n-end Ada.Strings.Text_Output;"}]}