{"sha": "b3851501be90860cfe5086b1cc4e7de247ac0404", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM4NTE1MDFiZTkwODYwY2ZlNTA4NmIxY2M0ZTdkZTI0N2FjMDQwNA==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2013-05-23T14:20:07Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2013-05-23T14:20:07Z"}, "message": "re PR debug/57351 (ICE: internal compiler error: in dbx_reg_number, at dwarf2out.c:10507 on arm-none-eabi)\n\n2013-05-23  Christian Bruel  <christian.bruel@st.com>\n\n        PR debug/57351\n        * config/arm/arm.c (arm_dwarf_register_span): Do not use dbx number.\n\nFrom-SVN: r199261", "tree": {"sha": "70ca1e83c7f6bbd96b3e3c6f0ee36cec6d040586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70ca1e83c7f6bbd96b3e3c6f0ee36cec6d040586"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3851501be90860cfe5086b1cc4e7de247ac0404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3851501be90860cfe5086b1cc4e7de247ac0404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3851501be90860cfe5086b1cc4e7de247ac0404", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3851501be90860cfe5086b1cc4e7de247ac0404/comments", "author": null, "committer": null, "parents": [{"sha": "4e1949126511bce6782106460e7df1907eeea1e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1949126511bce6782106460e7df1907eeea1e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e1949126511bce6782106460e7df1907eeea1e2"}], "stats": {"total": 67, "additions": 65, "deletions": 2}, "files": [{"sha": "d107f45596f112068cf2542b375ec7baa0a57958", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3851501be90860cfe5086b1cc4e7de247ac0404/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3851501be90860cfe5086b1cc4e7de247ac0404/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3851501be90860cfe5086b1cc4e7de247ac0404", "patch": "@@ -1,3 +1,8 @@\n+2013-05-23  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR debug/57351\n+\t* config/arm/arm.c (arm_dwarf_register_span): Do not use dbx number.\n+\n 2013-05-23  Chris Schlumberger-Socha <chris.schlumberger-socha@arm.com>\n \t    Marcus Shawcroft  <marcus.shawcroft@arm.com>\n "}, {"sha": "43dfe2772f6e2e0c92b926b82160b2d00c4bf9f0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3851501be90860cfe5086b1cc4e7de247ac0404/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3851501be90860cfe5086b1cc4e7de247ac0404/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b3851501be90860cfe5086b1cc4e7de247ac0404", "patch": "@@ -25878,9 +25878,8 @@ arm_dwarf_register_span (rtx rtl)\n \n   nregs = GET_MODE_SIZE (GET_MODE (rtl)) / 8;\n   p = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (nregs));\n-  regno = (regno - FIRST_VFP_REGNUM) / 2;\n   for (i = 0; i < nregs; i++)\n-    XVECEXP (p, 0, i) = gen_rtx_REG (DImode, 256 + regno + i);\n+    XVECEXP (p, 0, i) = gen_rtx_REG (DImode, regno + i);\n \n   return p;\n }"}, {"sha": "b1895fbafdebec5efbd8a1da8d604df83ca1a1a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3851501be90860cfe5086b1cc4e7de247ac0404/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3851501be90860cfe5086b1cc4e7de247ac0404/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3851501be90860cfe5086b1cc4e7de247ac0404", "patch": "@@ -1,3 +1,8 @@\n+2013-05-23  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR debug/57351\n+\t* gcc.dg/debug/pr57351.c: New test\n+\n 2013-05-23  Vidya Praveen <vidyapraveen@arm.com>\n \n \t* gcc.target/aarch64/vect-clz.c: New file."}, {"sha": "972f3e9ebecc703d66afe5e801c7e3ca796ffe56", "filename": "gcc/testsuite/gcc.dg/debug/pr57351.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3851501be90860cfe5086b1cc4e7de247ac0404/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr57351.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3851501be90860cfe5086b1cc4e7de247ac0404/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr57351.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr57351.c?ref=b3851501be90860cfe5086b1cc4e7de247ac0404", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon }  */\n+/* { dg-options \"-std=c99 -Os -g -march=armv7-a\" } */\n+/* { dg-add-options arm_neon } */\n+\n+typedef unsigned int size_t;\n+typedef int ptrdiff_t;\n+typedef signed char int8_t ;\n+typedef signed long long int64_t;\n+typedef int8_t GFC_INTEGER_1;\n+typedef GFC_INTEGER_1 GFC_LOGICAL_1;\n+typedef int64_t GFC_INTEGER_8;\n+typedef GFC_INTEGER_8 GFC_LOGICAL_8;\n+typedef ptrdiff_t index_type;\n+typedef struct descriptor_dimension\n+{\n+  index_type lower_bound;\n+  index_type _ubound;\n+}\n+descriptor_dimension;\n+typedef struct { GFC_LOGICAL_1 *base_addr; size_t offset; index_type dtype; descriptor_dimension dim[7];} gfc_array_l1;\n+typedef struct { GFC_LOGICAL_8 *base_addr; size_t offset; index_type dtype; descriptor_dimension dim[7];} gfc_array_l8;\n+void\n+all_l8 (gfc_array_l8 * const restrict retarray,\n+ gfc_array_l1 * const restrict array,\n+ const index_type * const restrict pdim)\n+{\n+  GFC_LOGICAL_8 * restrict dest;\n+  index_type n;\n+  index_type len;\n+  index_type delta;\n+  index_type dim;\n+  dim = (*pdim) - 1;\n+  len = ((array)->dim[dim]._ubound + 1 - (array)->dim[dim].lower_bound);\n+  for (n = 0; n < dim; n++)\n+    {\n+      const GFC_LOGICAL_1 * restrict src;\n+      GFC_LOGICAL_8 result;\n+      {\n+  result = 1;\n+   {\n+     for (n = 0; n < len; n++, src += delta)\n+       {\n+  if (! *src)\n+    {\n+      result = 0;\n+      break;\n+    }\n+          }\n+     *dest = result;\n+   }\n+      }\n+    }\n+}"}]}