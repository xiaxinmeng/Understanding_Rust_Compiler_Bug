{"sha": "9b4f7004a77b10bc403875f56c94f73ef86562d8", "node_id": "C_kwDOANBUbNoAKDliNGY3MDA0YTc3YjEwYmM0MDM4NzVmNTZjOTRmNzNlZjg2NTYyZDg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-01T08:54:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-01T08:54:52Z"}, "message": "lto: Fix up lto_fixup_prevailing_type [PR108910]\n\nWithout LTO, TYPE_POINTER_TO/TYPE_REFERENCE_TO chains are only maintained\ninside of build_{pointer,reference}_type_for_mode and those routines\nensure that the pointer/reference type added to the chain is really\nwithout any user attributes (unless something would modify the types\nin place, but that would be wrong).\n\nNow, LTO adds stuff to these chains in lto_fixup_prevailing_type but\ndoesn't guarantee that.  The testcase in the PR (which I'm not including\nfor testsuite because when (I hope) the aarch64 backend bug will be fixed,\nthe testcase would work either way) shows a case where user has\nTYPE_USER_ALIGN type with very high alignment, as there aren't enough\npointers to float in the code left that one becomes the prevailing one\n(because types with attributes are created with build_distinct_type_copy\nand thus their own TYPE_MAIN_VARIANTs), lto_fixup_prevailing_type puts\nit into the TYPE_POINTER_TO chain of float and later on during expansion\nof __builtin_cexpif expander uses build_pointer_type (float_type_node)\nto emit a sincosf call and instead of getting a normal pointer type gets\nthis non-standard one.\n\nThe following patch fixes that by not adding into those chains\ntypes with TYPE_ATTRIBUTES, and for REFERENCE_TYPEs not even with\nTYPE_REF_IS_RVALUE - while the C++ FE adds those into those chains,\nit always ensures such a type goes immediately after the corresponding\nnon-TYPE_REF_IS_RVALUE REFERENCE_TYPE with the same\nmode/TYPE_REF_CAN_ALIAS_ALL, so LTO would need to ensure that too, but\nTYPE_REF_IS_RVALUE types are looked that way only in the C++ FE.\n\n2023-03-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/108910\n\t* lto-common.cc (lto_fixup_prevailing_type): Don't add t to\n\tTYPE_POINTER_TO or TYPE_REFERENCE_TO chain if it has\n\tTYPE_ATTRIBUTES or is TYPE_REF_IS_RVALUE.", "tree": {"sha": "e8e166c500460d6eba046b09f3ff432d80121353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8e166c500460d6eba046b09f3ff432d80121353"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b4f7004a77b10bc403875f56c94f73ef86562d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4f7004a77b10bc403875f56c94f73ef86562d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4f7004a77b10bc403875f56c94f73ef86562d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4f7004a77b10bc403875f56c94f73ef86562d8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3837b6f6c28a1d2cea3a69efbda795ea3fb8816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3837b6f6c28a1d2cea3a69efbda795ea3fb8816", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3837b6f6c28a1d2cea3a69efbda795ea3fb8816"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "882dd8971a4baf457c702f2a417d38c2c043b36b", "filename": "gcc/lto/lto-common.cc", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4f7004a77b10bc403875f56c94f73ef86562d8/gcc%2Flto%2Flto-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4f7004a77b10bc403875f56c94f73ef86562d8/gcc%2Flto%2Flto-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.cc?ref=9b4f7004a77b10bc403875f56c94f73ef86562d8", "patch": "@@ -984,21 +984,25 @@ lto_fixup_prevailing_type (tree t)\n       TYPE_NEXT_VARIANT (t) = TYPE_NEXT_VARIANT (mv);\n       TYPE_NEXT_VARIANT (mv) = t;\n     }\n-\n-  /* The following reconstructs the pointer chains\n-     of the new pointed-to type if we are a main variant.  We do\n-     not stream those so they are broken before fixup.  */\n-  if (TREE_CODE (t) == POINTER_TYPE\n-      && TYPE_MAIN_VARIANT (t) == t)\n-    {\n-      TYPE_NEXT_PTR_TO (t) = TYPE_POINTER_TO (TREE_TYPE (t));\n-      TYPE_POINTER_TO (TREE_TYPE (t)) = t;\n-    }\n-  else if (TREE_CODE (t) == REFERENCE_TYPE\n-\t   && TYPE_MAIN_VARIANT (t) == t)\n-    {\n-      TYPE_NEXT_REF_TO (t) = TYPE_REFERENCE_TO (TREE_TYPE (t));\n-      TYPE_REFERENCE_TO (TREE_TYPE (t)) = t;\n+  else if (!TYPE_ATTRIBUTES (t))\n+    {\n+      /* The following reconstructs the pointer chains\n+\t of the new pointed-to type if we are a main variant.  We do\n+\t not stream those so they are broken before fixup.\n+\t Don't add it if despite being main variant it has\n+\t attributes (then it was created with build_distinct_type_copy).\n+\t Similarly don't add TYPE_REF_IS_RVALUE REFERENCE_TYPEs.\n+\t Don't add it if there is something in the chain already.  */\n+      if (TREE_CODE (t) == POINTER_TYPE)\n+\t{\n+\t  TYPE_NEXT_PTR_TO (t) = TYPE_POINTER_TO (TREE_TYPE (t));\n+\t  TYPE_POINTER_TO (TREE_TYPE (t)) = t;\n+\t}\n+      else if (TREE_CODE (t) == REFERENCE_TYPE && !TYPE_REF_IS_RVALUE (t))\n+\t{\n+\t  TYPE_NEXT_REF_TO (t) = TYPE_REFERENCE_TO (TREE_TYPE (t));\n+\t  TYPE_REFERENCE_TO (TREE_TYPE (t)) = t;\n+\t}\n     }\n }\n "}]}