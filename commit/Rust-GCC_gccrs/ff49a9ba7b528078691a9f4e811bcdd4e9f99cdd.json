{"sha": "ff49a9ba7b528078691a9f4e811bcdd4e9f99cdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY0OWE5YmE3YjUyODA3ODY5MWE5ZjRlODExYmNkZDRlOWY5OWNkZA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-17T22:52:21Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-17T22:52:21Z"}, "message": "re PR target/51244 ([SH] Inefficient conditional branch and code around T bit)\n\ngcc/\n\tPR target/51244\n\t* config/sh/sh_treg_combine.cc (sh_treg_combine::try_optimize_cbranch):\n\tCombine ccreg inversion and cbranch into inverted cbranch.\n\nFrom-SVN: r218847", "tree": {"sha": "0933652a8f697fda312a9852cba33b84ad34e166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0933652a8f697fda312a9852cba33b84ad34e166"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff49a9ba7b528078691a9f4e811bcdd4e9f99cdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff49a9ba7b528078691a9f4e811bcdd4e9f99cdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff49a9ba7b528078691a9f4e811bcdd4e9f99cdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff49a9ba7b528078691a9f4e811bcdd4e9f99cdd/comments", "author": null, "committer": null, "parents": [{"sha": "64e6d5c44231696ec9212101d099427e9214203a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64e6d5c44231696ec9212101d099427e9214203a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64e6d5c44231696ec9212101d099427e9214203a"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "00b37280adc02ce3866b4fec697c636d3cca39a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff49a9ba7b528078691a9f4e811bcdd4e9f99cdd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff49a9ba7b528078691a9f4e811bcdd4e9f99cdd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff49a9ba7b528078691a9f4e811bcdd4e9f99cdd", "patch": "@@ -1,3 +1,9 @@\n+2014-12-17  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* config/sh/sh_treg_combine.cc (sh_treg_combine::try_optimize_cbranch):\n+\tCombine ccreg inversion and cbranch into inverted cbranch.\n+\n 2014-12-17  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* lra-constraints.c (process_alt_operands): Remove non"}, {"sha": "62392d81f1bfb4b42e1b8a0df8e1b3c2113e8b43", "filename": "gcc/config/sh/sh_treg_combine.cc", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff49a9ba7b528078691a9f4e811bcdd4e9f99cdd/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff49a9ba7b528078691a9f4e811bcdd4e9f99cdd/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc?ref=ff49a9ba7b528078691a9f4e811bcdd4e9f99cdd", "patch": "@@ -1339,9 +1339,17 @@ sh_treg_combine::try_optimize_cbranch (rtx_insn *insn)\n   // for now we limit the search to the current basic block.\n   trace.setcc = find_set_of_reg_bb (m_ccreg, prev_nonnote_insn_bb (insn));\n \n-  if (!is_cmp_eq_zero (trace.setcc.set_src ()))\n+  if (trace.setcc.set_src () == NULL_RTX)\n     log_return_void (\"could not find set of ccreg in current BB\\n\");\n \n+  if (!is_cmp_eq_zero (trace.setcc.set_src ())\n+      && !is_inverted_ccreg (trace.setcc.set_src ()))\n+    {\n+      log_msg (\"unsupported set of ccreg in current BB: \");\n+      log_rtx (trace.setcc.set_src ());\n+      log_return_void (\"\\n\");\n+    }\n+\n   rtx trace_reg = XEXP (trace.setcc.set_src (), 0);\n \n   log_msg (\"set of ccreg:\\n\");\n@@ -1358,6 +1366,19 @@ sh_treg_combine::try_optimize_cbranch (rtx_insn *insn)\n       log_return_void (\"\\nbecause it's volatile\\n\");\n     }\n \n+  // If the ccreg is inverted before cbranch try inverting the branch\n+  // condition.\n+  if (is_inverted_ccreg (trace.setcc.set_src ()))\n+    {\n+      if (!trace.can_invert_condition ())\n+\tlog_return_void (\"branch condition can't be inverted - aborting\\n\");\n+\n+      if (try_invert_branch_condition (trace))\n+\tdelete_insn (trace.setcc.insn);\n+\n+      return;\n+    }\n+\n   // Now that we have an insn which tests some reg and sets the condition\n   // reg before the conditional branch, try to figure out how that tested\n   // reg was formed, i.e. find all the insns that set the tested reg in"}]}