{"sha": "541d3103fc50b32bf5d5d4a403995e3857eb030e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQxZDMxMDNmYzUwYjMyYmY1ZDVkNGE0MDM5OTVlMzg1N2ViMDMwZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-08-30T08:27:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-08-30T08:27:33Z"}, "message": "re PR middle-end/32758 (ecj1 hangs)\n\n\tPR middle-end/32758\n\t* dce.c (dce_process_block): Don't delete setters of\n\tartificially used registers.\n\n\t* gcc.dg/cleanup-12.c: New test.\n\nFrom-SVN: r127923", "tree": {"sha": "843bcc42b95f46f88f072aea7f1fd140c519891d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/843bcc42b95f46f88f072aea7f1fd140c519891d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/541d3103fc50b32bf5d5d4a403995e3857eb030e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/541d3103fc50b32bf5d5d4a403995e3857eb030e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/541d3103fc50b32bf5d5d4a403995e3857eb030e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/541d3103fc50b32bf5d5d4a403995e3857eb030e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c75c6d11bcc4a54e608d46a203a19e62cda55785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75c6d11bcc4a54e608d46a203a19e62cda55785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c75c6d11bcc4a54e608d46a203a19e62cda55785"}], "stats": {"total": 89, "additions": 88, "deletions": 1}, "files": [{"sha": "f0254593a2661acb8a0cf82d405d1fae76f46def", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541d3103fc50b32bf5d5d4a403995e3857eb030e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541d3103fc50b32bf5d5d4a403995e3857eb030e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=541d3103fc50b32bf5d5d4a403995e3857eb030e", "patch": "@@ -5,6 +5,10 @@\n \tSImode and update m.  Don't run gen_lowpart_common on arbitrary\n \tmemory address, force it to register first.\n \n+\tPR middle-end/32758\n+\t* dce.c (dce_process_block): Don't delete setters of\n+\tartificially used registers.\n+\n 2007-08-30  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/s390/s390.md (\"*add<mode>3_alc_carry1_cc\","}, {"sha": "c5af55ecc12ea8fd01b5827f26d8fa21b3550032", "filename": "gcc/dce.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541d3103fc50b32bf5d5d4a403995e3857eb030e/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541d3103fc50b32bf5d5d4a403995e3857eb030e/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=541d3103fc50b32bf5d5d4a403995e3857eb030e", "patch": "@@ -527,6 +527,7 @@ static bool\n dce_process_block (basic_block bb, bool redo_out)\n {\n   bitmap local_live = BITMAP_ALLOC (&dce_tmp_bitmap_obstack);\n+  bitmap au;\n   rtx insn;\n   bool block_changed;\n   struct df_ref **def_rec, **use_rec;\n@@ -569,6 +570,15 @@ dce_process_block (basic_block bb, bool redo_out)\n \tbitmap_set_bit (local_live, DF_REF_REGNO (use));\n     }\n \n+  /* These regs are considered always live so if they end up dying\n+     because of some def, we need to bring the back again.\n+     Calling df_simulate_fixup_sets has the disadvantage of calling\n+     df_has_eh_preds once per insn, so we cache the information here.  */\n+  if (df_has_eh_preds (bb))\n+    au = df->eh_block_artificial_uses;\n+  else\n+    au = df->regular_block_artificial_uses;\n+\n   FOR_BB_INSNS_REVERSE (bb, insn)\n     if (INSN_P (insn))\n       {\n@@ -580,7 +590,8 @@ dce_process_block (basic_block bb, bool redo_out)\n \n \t    /* The insn is needed if there is someone who uses the output.  */\n \t    for (def_rec = DF_INSN_DEFS (insn); *def_rec; def_rec++)\n-\t      if (bitmap_bit_p (local_live, DF_REF_REGNO (*def_rec)))\n+\t      if (bitmap_bit_p (local_live, DF_REF_REGNO (*def_rec))\n+\t\t  || bitmap_bit_p (au, DF_REF_REGNO (*def_rec)))\n \t\t{\n \t\t  needed = true;\n \t\t  break;"}, {"sha": "0fd46770896a4b8b405b92e0ea4bca0e66d24ced", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541d3103fc50b32bf5d5d4a403995e3857eb030e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541d3103fc50b32bf5d5d4a403995e3857eb030e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=541d3103fc50b32bf5d5d4a403995e3857eb030e", "patch": "@@ -4,6 +4,9 @@\n \t(AI): Add AI_ALIGN.\n \t* gcc.dg/sync-3.c: New test.\n \n+\tPR middle-end/32758\n+\t* gcc.dg/cleanup-12.c: New test.\n+\n 2007-08-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* lib/gcc-dg.exp (cleanup-profile-file): New procedure."}, {"sha": "90de90ac8311ef265df72afc82fc0dac1c2f74fa", "filename": "gcc/testsuite/gcc.dg/cleanup-12.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541d3103fc50b32bf5d5d4a403995e3857eb030e/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541d3103fc50b32bf5d5d4a403995e3857eb030e/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-12.c?ref=541d3103fc50b32bf5d5d4a403995e3857eb030e", "patch": "@@ -0,0 +1,69 @@\n+/* PR middle-end/32758 */\n+/* HP-UX libunwind.so doesn't provide _UA_END_OF_STACK */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fexceptions\" } */\n+/* { dg-skip-if \"\" { \"ia64-*-hpux11.*\" }  { \"*\" } { \"\" } } */\n+/* Verify unwind info in presence of alloca.  */\n+\n+#include <unwind.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+static _Unwind_Reason_Code\n+force_unwind_stop (int version, _Unwind_Action actions,\n+\t\t   _Unwind_Exception_Class exc_class,\n+\t\t   struct _Unwind_Exception *exc_obj,\n+\t\t   struct _Unwind_Context *context,\n+\t\t   void *stop_parameter)\n+{\n+  if (actions & _UA_END_OF_STACK)\n+    abort ();\n+  return _URC_NO_REASON;\n+}\n+\n+static void force_unwind (void)\n+{\n+  struct _Unwind_Exception *exc = malloc (sizeof (*exc));\n+  memset (&exc->exception_class, 0, sizeof (exc->exception_class));\n+  exc->exception_cleanup = 0;\n+\n+#ifndef __USING_SJLJ_EXCEPTIONS__\n+  _Unwind_ForcedUnwind (exc, force_unwind_stop, 0);\n+#else\n+  _Unwind_SjLj_ForcedUnwind (exc, force_unwind_stop, 0);\n+#endif\n+\n+  abort ();\n+}\n+\n+__attribute__((noinline))\n+void foo (void *x __attribute__((unused)))\n+{\n+  force_unwind ();\n+}\n+\n+__attribute__((noinline))\n+int bar (unsigned int x)\n+{\n+  void *y = __builtin_alloca (x);\n+  foo (y);\n+  return 1;\n+}\n+\n+static void handler (void *p __attribute__((unused)))\n+{\n+  exit (0);\n+}\n+\n+__attribute__((noinline))\n+static void doit ()\n+{\n+  char dummy __attribute__((cleanup (handler)));\n+  bar (1024);\n+}\n+\n+int main ()\n+{\n+  doit ();\n+  abort ();\n+}"}]}