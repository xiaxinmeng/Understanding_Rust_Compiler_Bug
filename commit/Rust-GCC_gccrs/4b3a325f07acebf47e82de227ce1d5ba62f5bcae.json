{"sha": "4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "node_id": "C_kwDOANBUbNoAKDRiM2EzMjVmMDdhY2ViZjQ3ZTgyZGUyMjdjZTFkNWJhNjJmNWJjYWU", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-28T13:35:21Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-29T15:57:27Z"}, "message": "Remove VRP threader passes in exchange for better threading pre-VRP.\n\nThis patch upgrades the pre-VRP threading passes to fully resolving\nbackward threaders, and removes the post-VRP threading passes altogether.\nWith it, we reduce the number of threaders in our pipeline from 9 to 7.\n\nThis will leave DOM as the only forward threader client.  When the ranger\ncan handle floats, we should be able to upgrade the pre-DOM threaders to\nfully resolving threaders and kill the embedded DOM threader.\n\nThe numbers are as follows:\n\n\tprev: # threads in backward + vrp-threaders = 92624\n\tnow:  # threads in backward threaders = 94275\n\tGain: +1.78%\n\n\tprev: # total threads: 189495\n\tnow:  # total threads: 193714\n\tGain: +2.22%\n\n\tThe numbers are not as great as my initial proposal, but I've\n\trecently pushed all the work that got us to this point ;-).\n\nAnd... the compilation improves by 1.32%!\n\nThere's a regression on uninit-pred-7_a.c that I've yet to look at.  I\nwant to make sure it's not a missing thread.  If it is, I'll create a PR\nand own it.\n\nAlso, the tree-ssa/phi_on_compare-*.c tests have all regressed.  This\nseems to be some special case the forward threader handles that the\nbackward threader does not (edge_forwards_cmp_to_conditional_jump*).\nI haven't dug deep to see if this is solveable within our\ninfrastructure, but a cursory look shows that even though the VRP\nthreader threads this, the *.optimized dump ends with more conditional\njumps than without the optimization.  I'd like to punt on this for\nnow, because DOM actually catches this through its lone use of the\nforward threader (I've adjusted the tests).  However, we will need to\naddress this sooner or later, if indeed it's still improving the final\nassembly.\n\ngcc/ChangeLog:\n\n\t* passes.def: Replace the pass_thread_jumps before VRP* with\n\tpass_thread_jumps_full.  Remove all pass_vrp_threader instances.\n\t* tree-ssa-threadbackward.c (pass_data_thread_jumps_full):\n\tRemove hyphen from \"thread-full\" name.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.graphite/force-parallel-4.c: Adjust for threading changes.\n\t* testsuite/libgomp.graphite/force-parallel-8.c: Same.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/loop-unswitch-2.c: Adjust for threading changes.\n\t* gcc.dg/old-style-asm-1.c: Same.\n\t* gcc.dg/tree-ssa/phi_on_compare-1.c: Same.\n\t* gcc.dg/tree-ssa/phi_on_compare-2.c: Same.\n\t* gcc.dg/tree-ssa/phi_on_compare-3.c: Same.\n\t* gcc.dg/tree-ssa/phi_on_compare-4.c: Same.\n\t* gcc.dg/tree-ssa/pr20701.c: Same.\n\t* gcc.dg/tree-ssa/pr21001.c: Same.\n\t* gcc.dg/tree-ssa/pr21294.c: Same.\n\t* gcc.dg/tree-ssa/pr21417.c: Same.\n\t* gcc.dg/tree-ssa/pr21559.c: Same.\n\t* gcc.dg/tree-ssa/pr21563.c: Same.\n\t* gcc.dg/tree-ssa/pr49039.c: Same.\n\t* gcc.dg/tree-ssa/pr59597.c: Same.\n\t* gcc.dg/tree-ssa/pr61839_1.c: Same.\n\t* gcc.dg/tree-ssa/pr61839_3.c: Same.\n\t* gcc.dg/tree-ssa/pr66752-3.c: Same.\n\t* gcc.dg/tree-ssa/pr68198.c: Same.\n\t* gcc.dg/tree-ssa/pr77445-2.c: Same.\n\t* gcc.dg/tree-ssa/pr77445.c: Same.\n\t* gcc.dg/tree-ssa/ranger-threader-1.c: Same.\n\t* gcc.dg/tree-ssa/ranger-threader-2.c: Same.\n\t* gcc.dg/tree-ssa/ranger-threader-4.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-1.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-11.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-12.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-14.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-16.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-2b.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Same.\n\t* gcc.dg/tree-ssa/ssa-thread-14.c: Same.\n\t* gcc.dg/tree-ssa/ssa-thread-backedge.c: Same.\n\t* gcc.dg/tree-ssa/ssa-vrp-thread-1.c: Same.\n\t* gcc.dg/tree-ssa/vrp02.c: Same.\n\t* gcc.dg/tree-ssa/vrp03.c: Same.\n\t* gcc.dg/tree-ssa/vrp05.c: Same.\n\t* gcc.dg/tree-ssa/vrp06.c: Same.\n\t* gcc.dg/tree-ssa/vrp07.c: Same.\n\t* gcc.dg/tree-ssa/vrp08.c: Same.\n\t* gcc.dg/tree-ssa/vrp09.c: Same.\n\t* gcc.dg/tree-ssa/vrp33.c: Same.\n\t* gcc.dg/uninit-pred-9_b.c: Same.\n\t* gcc.dg/uninit-pred-7_a.c: xfail.", "tree": {"sha": "51fe3d166c5b7809ef1ed1b0212efeafeaac16f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51fe3d166c5b7809ef1ed1b0212efeafeaac16f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14c7757e9b751781360737f53b71f851fc356d3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c7757e9b751781360737f53b71f851fc356d3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14c7757e9b751781360737f53b71f851fc356d3d"}], "stats": {"total": 181, "additions": 89, "deletions": 92}, "files": [{"sha": "29921f80ed9aa9d45de03a03047d8f4c94fb67dc", "filename": "gcc/passes.def", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -210,9 +210,8 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_return_slot);\n       NEXT_PASS (pass_fre, true /* may_iterate */);\n       NEXT_PASS (pass_merge_phi);\n-      NEXT_PASS (pass_thread_jumps);\n+      NEXT_PASS (pass_thread_jumps_full);\n       NEXT_PASS (pass_vrp, true /* warn_array_bounds_p */);\n-      NEXT_PASS (pass_vrp_threader);\n       NEXT_PASS (pass_dse);\n       NEXT_PASS (pass_dce);\n       /* pass_stdarg is always run and at this point we execute\n@@ -336,9 +335,8 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_thread_jumps);\n       NEXT_PASS (pass_dominator, false /* may_peel_loop_headers_p */);\n       NEXT_PASS (pass_strlen);\n-      NEXT_PASS (pass_thread_jumps);\n+      NEXT_PASS (pass_thread_jumps_full);\n       NEXT_PASS (pass_vrp, false /* warn_array_bounds_p */);\n-      NEXT_PASS (pass_vrp_threader);\n       /* Run CCP to compute alignment and nonzero bits.  */\n       NEXT_PASS (pass_ccp, true /* nonzero_p */);\n       NEXT_PASS (pass_warn_restrict);"}, {"sha": "f8e99bd16693f404d791d74d4095aae448c199d6", "filename": "gcc/testsuite/gcc.dg/loop-unswitch-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-2.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -funswitch-loops -fdump-tree-unswitch-details -fdisable-tree-thread2 -fdisable-tree-thread3\" } */\n+/* { dg-options \"-O2 -funswitch-loops -fdump-tree-unswitch-details -fno-thread-jumps\" } */\n \n void foo (float **a, float **b, float *c, int n, int m, int l)\n {"}, {"sha": "c8fb668ff2999c4c51226f258d0e4950cee9a7d1", "filename": "gcc/testsuite/gcc.dg/old-style-asm-1.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-asm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-asm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-asm-1.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,9 +1,6 @@\n /* PR inline-asm/8832 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -dP -fdisable-tree-ethread -fdisable-tree-thread1 -fdisable-tree-thread2 -fdisable-tree-thread3 -fdisable-tree-thread4\" } */\n-\n-/* Note: Threader will duplicate BBs and replace one conditional branch by an\n-   unconditional one.  */\n+/* { dg-options \"-O2 -dP -fno-thread-jumps\" } */\n \n /* Verify that GCC doesn't optimize\n    old style asm instructions.  */"}, {"sha": "be504ddb11ae880bdb87f29856b7b13df750a75e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi_on_compare-1.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-1.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -fdump-tree-vrp-thread1\" } */\n+/* { dg-options \"-Ofast -fdump-tree-dom2\" } */\n \n void g (int);\n void g1 (int);\n@@ -27,4 +27,9 @@ f (long a, long b, long c, long d, long x)\n   g (a);\n }\n \n-/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"vrp-thread1\" } } */\n+/* This is actually a regression.  The backward threader cannot thread\n+   the above scenario, but it is being caught by the DOM threader\n+   which still uses the forward threader.  We should implement this\n+   optimization in the backward threader before killing the forward\n+   threader.  Similarly for the other phi_on_compare-*.c tests.  */\n+/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"dom2\" } } */"}, {"sha": "b1865701ad8e2b48e7c60da7785362f902eb10c4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi_on_compare-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-2.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -fdump-tree-vrp-thread1\" } */\n+/* { dg-options \"-Ofast -fdump-tree-dom2\" } */\n \n void g (void);\n void g1 (void);\n@@ -20,4 +20,4 @@ f (long a, long b, long c, long d, int x)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"vrp-thread1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"dom2\" } } */"}, {"sha": "b48ecbf6e61fe3bfe9c342d5a65c8eb92f4679bc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi_on_compare-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-3.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -fdump-tree-vrp-thread1\" } */\n+/* { dg-options \"-Ofast -fdump-tree-dom2\" } */\n \n void g (void);\n void g1 (void);\n@@ -22,4 +22,4 @@ f (long a, long b, long c, long d, int x)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"vrp-thread1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"dom2\" } } */"}, {"sha": "1e09f89af9f8da949375697074eac968fc19e60b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi_on_compare-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-4.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -fdump-tree-vrp-thread1\" } */\n+/* { dg-options \"-Ofast -fdump-tree-dom2\" } */\n \n void g (int);\n void g1 (int);\n@@ -37,4 +37,4 @@ f (long a, long b, long c, long d, int x)\n   g (c + d);\n }\n \n-/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"vrp-thread1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"dom2\" } } */"}, {"sha": "f05076cafac0cae8ff1237f97531aef80946a83a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20701.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20701.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20701.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20701.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-early-inlining -fdelete-null-pointer-checks -fdisable-tree-thread1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-early-inlining -fdelete-null-pointer-checks -fno-thread-jumps\" } */\n \n typedef struct {\n   int code;"}, {"sha": "f9216a44a754233353bee80c29679108301a9d5f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21001.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21001.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21001.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21001.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -5,7 +5,7 @@\n    range information out of the conditional.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdisable-tree-evrp -fno-thread-jumps -fdump-tree-vrp1-details\" } */\n /* { dg-additional-options \"-fdisable-tree-ethread -fdisable-tree-thread1\" } */\n \n int"}, {"sha": "8c8f4479a77cb6e2d1fa1dd3f49f0aeb4384ac96", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21294.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21294.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21294.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21294.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -4,8 +4,7 @@\n    allows us to eliminate the second \"if\" statement.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fdisable-tree-evrp -fdump-tree-vrp1-details\" } */\n-/* { dg-additional-options \"-fdisable-tree-ethread -fdisable-tree-thread1\" } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fdisable-tree-evrp -fdisable-tree-ethread -fdisable-tree-threadfull1 -fdump-tree-vrp1-details\" } */\n \n struct f {\n   int i;"}, {"sha": "36d9cb0991dcada648964f68c24e237dce516a08", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21417.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21417.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21417.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21417.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdisable-tree-thread3 -fdump-tree-thread4-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-thread2-details\" } */\n \n struct tree_common \n { \n@@ -49,5 +49,5 @@ test (tree expr, int t, int D17630)\n /* We should thread the backedge to the top of the loop; ie we only\n    execute the if (expr->common.code != 142) test once per loop\n    iteration.  */\n-/* { dg-final { scan-tree-dump-times \"jump thread\" 1 \"thread4\" } } */\n+/* { dg-final { scan-tree-dump-times \"jump thread\" 1 \"thread2\" } } */\n "}, {"sha": "83b7c802e358894498e5915edaae2f386ac4fd05", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21559.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-evrp-details -fdump-tree-vrp-thread1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-evrp-details\" } */\n \n static int blocksize = 4096;\n \n@@ -34,8 +34,3 @@ void foo (void)\n \n /* First, we should simplify the bits < 0 test within the loop.  */\n /* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"evrp\" } } */\n-\n-/* We used to check for 3 threaded jumps here, but they all would\n-   rotate the loop.  */\n-\n-"}, {"sha": "504b3cce6e6a81e37b73d7142c58606854885293", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21563.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21563.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21563.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21563.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -2,7 +2,7 @@\n    Make sure VRP folds the second \"if\" statement.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fdisable-tree-evrp -fdump-tree-vrp1-details -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n+/* { dg-options \"-O2 -fno-thread-jumps -fdisable-tree-evrp -fdump-tree-vrp1-details\" } */\n \n int\n foo (int a)"}, {"sha": "102b07346b434f96f031276430165d69acebe217", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr49039.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr49039.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr49039.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr49039.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,6 +1,6 @@\n /* PR tree-optimization/49039 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1 -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1 -fno-thread-jumps\" } */\n \n extern void bar (void);\n "}, {"sha": "0f66aae87bba1dfc1c8eeba55ae634096f290543", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr59597.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr59597.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr59597.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr59597.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -fdump-tree-vrp-thread1-details\" } */\n+/* { dg-options \"-Ofast -fdisable-tree-cunrolli -fdump-tree-threadfull1-details\" } */\n \n typedef unsigned short u16;\n typedef unsigned char u8;\n@@ -56,7 +56,8 @@ main (int argc, char argv[])\n   return crc;\n }\n \n-/* None of the threads we can get in vrp-thread1 are valid.  They all\n-   cross or rotate loops.  */\n-/* { dg-final { scan-tree-dump-not \"Registering jump thread\" \"vrp-thread1\" } } */\n-/* { dg-final { scan-tree-dump-not \"joiner\" \"vrp-thread1\" } } */\n+/* We used to have no threads in vrp-thread1 because all the attempted\n+   ones would cross loops.  Now we get 30+ threads before VRP because\n+   of loop unrolling.  A better option is to disable unrolling and\n+   test for the original 4 threads that this test was testing.  */\n+/* { dg-final { scan-tree-dump-times \"Registering jump thread\" 4 \"threadfull1\" } } */"}, {"sha": "f5af7a1d6b6758f6a1566d17138880e429bb0fda", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61839_1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_1.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,6 +1,6 @@\n /* PR tree-optimization/61839.  */\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fdump-tree-vrp-thread1 -fdisable-tree-evrp -fdump-tree-optimized -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdisable-tree-ethread -fdisable-tree-threadfull1 -fdump-tree-vrp1 -fdump-tree-optimized\" } */\n /* { dg-require-effective-target int32plus } */\n \n __attribute__ ((noinline))\n@@ -38,11 +38,11 @@ int main ()\n }\n \n /* Scan for c = 972195717) >> [0, 1] in function foo.  */\n-/* { dg-final { scan-tree-dump-times \"486097858 : 972195717\" 1  \"vrp-thread1\" } } */\n+/* { dg-final { scan-tree-dump-times \"486097858 : 972195717\" 1  \"vrp1\" } } */\n \n /* Previously we were checking for two ?: with constant PHI arguments,\n    but now we collapse them into one.  */\n /* Scan for c = 972195717) >> [2, 3] in function bar.  */\n-/* { dg-final { scan-tree-dump-times \"243048929 : 121524464\" 1  \"vrp-thread1\" } } */\n+/* { dg-final { scan-tree-dump-times \"243048929 : 121524464\" 1  \"vrp1\" } } */\n \n /* { dg-final { scan-tree-dump-times \"486097858\" 0  \"optimized\" } } */"}, {"sha": "bc2126fce4ec74464b9928e42e56c057a85b1abb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61839_3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_3.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,6 +1,6 @@\n /* PR tree-optimization/61839.  */\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fdump-tree-vrp-thread1 -fdump-tree-optimized -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp -fdump-tree-optimized -fdisable-tree-ethread -fdisable-tree-threadfull1\" } */\n \n __attribute__ ((noinline))\n int foo (int a, unsigned b)\n@@ -22,5 +22,5 @@ int main ()\n }\n \n /* Scan for c [12, 13] << 8 in function foo.  */\n-/* { dg-final { scan-tree-dump-times \"3072 : 3328\" 1  \"vrp-thread1\" } } */\n+/* { dg-final { scan-tree-dump-times \"3072 : 3328\" 1  \"vrp1\" } } */\n /* { dg-final { scan-tree-dump-times \"3072\" 0  \"optimized\" } } */"}, {"sha": "e9bb744389c20af8418eb3ed0449f816c91ee060", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr66752-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-thread1-details -fdump-tree-thread4\" } */\n+/* { dg-options \"-O2 -fdump-tree-threadfull1-details -fdump-tree-thread2\" } */\n \n extern int status, pt;\n extern int count;\n@@ -35,12 +35,12 @@ foo (int N, int c, int b, int *a)\n /* There are 2 jump threading opportunities (which don't cross loops),\n    all of which will be realized, which will eliminate testing of\n    FLAG, completely.  */\n-/* { dg-final { scan-tree-dump-times \"Registering jump\" 2 \"thread1\"} } */\n+/* { dg-final { scan-tree-dump-times \"Registering jump\" 2 \"threadfull1\"} } */\n \n /* We used to remove references to FLAG by DCE2, but this was\n    depending on early threaders threading through loop boundaries\n    (which we shouldn't do).  However, the late threading passes, which\n    run after loop optimizations , can successfully eliminate the\n    references to FLAG.  Verify that ther are no references by the late\n    threading passes.  */\n-/* { dg-final { scan-tree-dump-not \"if .flag\" \"thread4\"} } */\n+/* { dg-final { scan-tree-dump-not \"if .flag\" \"thread2\"} } */"}, {"sha": "125072941da7d538fdbb9a8200f3cf865cb030e6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr68198.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68198.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68198.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68198.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-thread1-details -fdisable-tree-ethread\" } */\n+/* { dg-options \"-O2 -fdump-tree-threadfull1-details -fdisable-tree-ethread\" } */\n \n extern void abort (void);\n \n@@ -38,4 +38,4 @@ c_finish_omp_clauses (tree clauses)\n }\n \n /* There are 3 jump threading opportunities.  */\n-/* { dg-final { scan-tree-dump-times \"Registering jump\" 3 \"thread1\"} } */\n+/* { dg-final { scan-tree-dump-times \"Registering jump\" 3 \"threadfull1\"} } */"}, {"sha": "b3db1bca6173d58620a4307fa5fdcf4231761775", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr77445-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-thread-details-blocks-stats\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-thread-details-blocks-stats -fdump-tree-threadfull1-blocks-stats -fdump-tree-threadfull2-blocks-stats\" } */\n typedef enum STATES {\n \tSTART=0,\n \tINVALID,\n@@ -123,8 +123,8 @@ enum STATES FMS( u8 **in , u32 *transitions) {\n    aarch64 has the highest CASE_VALUES_THRESHOLD in GCC.  It's high enough\n    to change decisions in switch expansion which in turn can expose new\n    jump threading opportunities.  Skip the later tests on aarch64.  */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: \\[7-9\\]\" \"thread2\" } } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: \\[7-9\\]\" \"thread1\" } } */\n /* { dg-final { scan-tree-dump-not \"optimizing for size\" \"thread1\" } } */\n-/* { dg-final { scan-tree-dump-not \"optimizing for size\" \"thread2\" } } */\n-/* { dg-final { scan-tree-dump-not \"optimizing for size\" \"thread3\" { target { ! aarch64*-*-* } } } } */\n-/* { dg-final { scan-tree-dump-not \"optimizing for size\" \"thread4\" { target { ! aarch64*-*-* } } } } */ \n+/* { dg-final { scan-tree-dump-not \"optimizing for size\" \"threadfull1\" } } */\n+/* { dg-final { scan-tree-dump-not \"optimizing for size\" \"thread2\" { target { ! aarch64*-*-* } } } } */\n+/* { dg-final { scan-tree-dump-not \"optimizing for size\" \"threadfull2\" { target { ! aarch64*-*-* } } } } */ "}, {"sha": "72bf0eca81fd8cd243b0b5cca8c7a9e3d8f018c3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr77445.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-thread3-details-blocks -fno-early-inlining -fno-tree-vrp -fno-tree-dominator-opts\" } */\n+/* { dg-options \"-O2 -fno-early-inlining -fno-tree-vrp -fno-tree-dominator-opts -fdump-tree-thread2-details-blocks\" } */\n \n static int a;\n static int b;\n@@ -25,5 +25,5 @@ main (int argc)\n   if (b)\n     test2 ();\n }\n-/* { dg-final { scan-tree-dump-times \"Registering jump thread\" 2 \"thread3\" } } */\n-/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"thread3\" } } */\n+/* { dg-final { scan-tree-dump-times \"Registering jump thread\" 2 \"thread2\" } } */\n+/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"thread2\" } } */"}, {"sha": "c6c2b2b78a5ac3aa64efe2444f2e4c388063c302", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ranger-threader-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-1.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-thread1-details --param logical-op-non-short-circuit=1\" } */\n+/* { dg-options \"-O2 -fdump-tree-threadfull1-details --param logical-op-non-short-circuit=1\" } */\n \n // Copied from ssa-dom-thread-11.c\n \n@@ -17,4 +17,4 @@ mark_target_live_regs (int b, int block, int bb_tick)\n /* When the first two conditionals in the first IF are true, but\n    the third conditional is false, then there's a jump threading\n    opportunity to bypass the second IF statement.  */\n-/* { dg-final { scan-tree-dump-times \"Registering.*jump thread\" 1 \"thread1\"} } */\n+/* { dg-final { scan-tree-dump-times \"Registering.*jump thread\" 1 \"threadfull1\"} } */"}, {"sha": "163d9e1cf083c321b16b6e6ad7fc1e5cfea9679f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ranger-threader-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-2.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-thread2-details -w\" } */\n+/* { dg-options \"-O2 -fdump-tree-thread1-details -w\" } */\n \n // Copied from ssa-dom-thread-12.c.\n \n@@ -36,4 +36,4 @@ scan_function (gimple stmt)\n    that stmt->num_ops - 3 != 0.  When that test is false, we can derive\n    a value for stmt->num_ops.  That in turn allows us to thread the jump\n    for the conditional at the start of the call to gimple_op.  */\n-/* { dg-final { scan-tree-dump-times \"Registering.*jump thread\" 1 \"thread2\"} } */\n+/* { dg-final { scan-tree-dump-times \"Registering.*jump thread\" 1 \"thread1\"} } */"}, {"sha": "dde43ff886c89dc6239a21003871ed3fdbd67c79", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ranger-threader-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-4.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-additional-options \"-O2 -fdump-tree-vrp-details -fdump-tree-thread1-details --param logical-op-non-short-circuit=1\" }  */\n-/* { dg-final { scan-tree-dump-times \"Registering jump\" 8 \"thread1\" } }  */\n+/* { dg-additional-options \"-O2 -fdump-tree-threadfull1-details --param logical-op-non-short-circuit=1\" }  */\n+/* { dg-final { scan-tree-dump-times \"Registering jump\" 8 \"threadfull1\" } }  */\n \n /* Copied from ssa-thread-14.  */\n "}, {"sha": "5b2ac53731cbabf665732f064376e76453e91bf5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-1.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fno-tree-vrp -fdump-tree-dom2-details\" } */\n+/* { dg-options \"-O2 -fno-tree-vrp -fdisable-tree-threadfull1 -fdump-tree-dom2-details\" } */\n void t(void);\n void q(void);\n void q1(void);"}, {"sha": "bcc9ccf8f282959ebd223c51034297e4e92373aa", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-11.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom2-details --param logical-op-non-short-circuit=1 -fdisable-tree-thread1 -fdisable-tree-thread2 -fdisable-tree-vrp-thread1 \" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2-details --param logical-op-non-short-circuit=1 -fdisable-tree-thread1 -fdisable-tree-thread2 -fdisable-tree-threadfull1\" } */\n \n static int *bb_ticks;\n extern void frob (void);"}, {"sha": "e68acbbc5d9a6637b3a189089e7a067b466d3926", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-12.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-dom2-details -w -fdisable-tree-thread2\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2-details -w -fdisable-tree-thread1\" } */\n typedef long unsigned int size_t;\n union tree_node;\n typedef union tree_node *tree;"}, {"sha": "8497ed6b4a4ee32417aa1d33ae97efc2ac536039", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-14.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-dom2-details -w --param logical-op-non-short-circuit=1\" } */\n-/* { dg-additional-options \"-fdisable-tree-thread1 -fdisable-tree-ethread -fdisable-tree-thread2\" } */\n+/* { dg-additional-options \"-fdisable-tree-thread1 -fdisable-tree-ethread -fdisable-tree-threadfull1\" } */\n \n enum optab_methods\n {"}, {"sha": "e8555f2d9636f97cf468c10de2d59cd13820fd03", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-16.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom2-details -w --param logical-op-non-short-circuit=1 -fdisable-tree-vrp-thread1\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2-details -w --param logical-op-non-short-circuit=1 -fdisable-tree-threadfull1\" } */\n unsigned char\n validate_subreg (unsigned int offset, unsigned int isize, unsigned int osize, int zz, int qq)\n {"}, {"sha": "74a55aa51832bf26769b90c86625263365a69aab", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-2b.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2b.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-thread3-stats -fdump-tree-dom2-stats -fdisable-tree-ethread\" } */\n+/* { dg-options \"-O2 -fdump-tree-thread2-stats -fdump-tree-dom2-stats -fdisable-tree-ethread\" } */\n \n void foo();\n void bla();\n@@ -26,4 +26,4 @@ void thread_latch_through_header (void)\n    case.  And we want to thread through the header as well.  These\n    are both caught by threading in DOM.  */\n /* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"dom2\"} } */\n-/* { dg-final { scan-tree-dump-times \"Jumps threaded: 1\" 1 \"thread3\"} } */\n+/* { dg-final { scan-tree-dump-times \"Jumps threaded: 1\" 1 \"thread2\"} } */"}, {"sha": "d40a61fd725f90c3f8e4d16092640880edd52c7e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-7.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,15 +1,18 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom2-stats -fdump-tree-thread3-stats -fdump-tree-dom3-stats -fdump-tree-vrp-thread2-stats -fno-guess-branch-probability\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2-stats -fdump-tree-thread2-stats -fdump-tree-dom3-stats -fno-guess-branch-probability\" } */\n \n /* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"dom2\" } } */\n \n+/* We were previously checking for no threads in vrp-thread2, but now\n+   that we have merged the post and pre threaders, we get a dozen\n+   threads before VRP2.  */\n+\n /* aarch64 has the highest CASE_VALUES_THRESHOLD in GCC.  It's high enough\n    to change decisions in switch expansion which in turn can expose new\n    jump threading opportunities.  Skip the later tests on aarch64.  */\n /* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"dom3\" { target { ! aarch64*-*-* } } } } */\n-/* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"vrp-thread2\" { target { ! aarch64*-*-* } } } } */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: 11\"  \"thread3\" { target { ! aarch64*-*-* } } } } */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: 18\"  \"thread3\" { target { aarch64*-*-* } } } } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 11\"  \"thread2\" { target { ! aarch64*-*-* } } } } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 18\"  \"thread2\" { target { aarch64*-*-* } } } } */\n \n enum STATE {\n   S0=0,"}, {"sha": "51fc06571220d87f66725ca462e6b1265b464524", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-14.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-14.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-additional-options \"-O2 -fdump-tree-vrp-thread1-details --param logical-op-non-short-circuit=1\" }  */\n-/* { dg-additional-options \"-fdisable-tree-thread1\" } */\n-/* { dg-final { scan-tree-dump-times \"Threaded jump\" 8 \"vrp-thread1\" } }  */\n+/* { dg-additional-options \"-O2 --param logical-op-non-short-circuit=1 -fdump-tree-threadfull1-details\" }  */\n+/* { dg-final { scan-tree-dump-times \"Registering jump thread\" 8 \"threadfull1\" } }  */\n \n void foo (void);\n void bar (void);"}, {"sha": "ef9a3e8c22bc0259a07f0d784130ac6bc9836e0d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-backedge.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-backedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-backedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-backedge.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-O2 -fdisable-tree-ethread -fdisable-tree-thread1 -fdisable-tree-thread2 -fno-tree-dominator-opts -fdump-tree-thread3-details\" }\n+// { dg-options \"-O2 -fdisable-tree-ethread -fdisable-tree-thread1 -fdisable-tree-thread2 -fno-tree-dominator-opts -fdump-tree-threadfull2-details\" }\n \n // Test that we can thread jumps across the backedge of a loop through\n // the switch statement to a particular case.\n@@ -29,4 +29,4 @@ int foo (unsigned int x, int s)\n   return s;\n }\n \n-// { dg-final { scan-tree-dump \"Registering jump thread:.*normal \\\\(back\\\\)\" \"thread3\" } }\n+// { dg-final { scan-tree-dump \"Registering jump thread:.*normal \\\\(back\\\\)\" \"threadfull2\" } }"}, {"sha": "25c2d3a8614f54c304ba729c1b6b73024646d887", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-vrp-thread-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-thread1-details -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fdump-tree-threadfull1-details -fdelete-null-pointer-checks\" } */\n /* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n void oof (void);\n@@ -29,5 +29,5 @@ build_omp_regions_1 (basic_block bb, struct omp_region *parent,\n \n /* ARM Cortex-M defined LOGICAL_OP_NON_SHORT_CIRCUIT to false,\n    so skip below test.  */\n-/* { dg-final { scan-tree-dump-times \"Registering jump thread\" 1 \"thread1\" { target { ! arm_cortex_m } } } } */\n+/* { dg-final { scan-tree-dump-times \"Registering jump thread\" 1 \"threadfull1\" { target { ! arm_cortex_m } } } } */\n "}, {"sha": "6e9c8df2f0a2336c1caa8bbd88ec35b258a13231", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp02.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp02.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fdelete-null-pointer-checks -fdisable-tree-evrp -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdelete-null-pointer-checks -fdisable-tree-evrp -fno-thread-jumps\" } */\n \n struct A\n {"}, {"sha": "4cbaca4133212254a05276693f4d988dd699970c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp03.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp03.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp03.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp03.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1 -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1 -fno-thread-jumps\" } */\n \n struct A\n {"}, {"sha": "7f38e8d3852ba939829875668d061f0b1fbe195f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp05.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp05.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp05.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp05.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-early-inlining -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-early-inlining -fno-thread-jumps\" } */\n \n \n inline int ten()"}, {"sha": "898477e42fbceed499e958759aa3957ff04e12d0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp06.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp06.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp06.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp06.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1 -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1 -fno-thread-jumps\" } */\n \n int baz (void);\n "}, {"sha": "9c4acd29681f621c740dc00df8ac5053c807876d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp07.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1-details -fdelete-null-pointer-checks -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1-details -fdelete-null-pointer-checks -fno-thread-jumps\" } */\n \n int\n foo (int i, int *p)"}, {"sha": "4599fa7d533a90a9642580d26579831f8c24aab1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp08.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1-details -fdisable-tree-thread1 -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1-details -fno-thread-jumps -fdelete-null-pointer-checks\" } */\n \n /* Compile with -fno-tree-fre -O2 to prevent CSEing *p.  */\n int"}, {"sha": "4e4954da32aef7006011511af82df3eae1ba32c1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp09.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp09.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp09.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp09.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1 -std=gnu89 -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1 -std=gnu89 -fno-thread-jumps\" } */\n \n foo (int *p)\n {"}, {"sha": "470675ef50e5b1530afdd0987e2ac3222c6cc60c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp33.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp33.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-tree-fre -fdisable-tree-evrp -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-tree-fre -fdisable-tree-evrp -fno-thread-jumps\" } */\n \n /* This is from PR14052.  */\n "}, {"sha": "434d90ac57038f7e4d7d617b767e40917bea5100", "filename": "gcc/testsuite/gcc.dg/uninit-pred-7_a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pred-7_a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pred-7_a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pred-7_a.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -23,7 +23,7 @@ int foo (int n, int l, int m, int r)\n       blah(v); /* { dg-bogus \"uninitialized\" \"bogus warning\" } */\n \n   if ( l )\n-      blah(v); /* { dg-bogus \"uninitialized\" \"bogus warning\" } */\n+      blah(v); /* { dg-bogus \"uninitialized\" \"bogus warning\" { xfail *-*-* } } */\n \n   return 0;\n }"}, {"sha": "552ab8b4ff4e6b6dc2c70291789b41f38555c8b5", "filename": "gcc/testsuite/gcc.dg/uninit-pred-9_b.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pred-9_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pred-9_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pred-9_b.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -17,10 +17,10 @@ int foo (int n, int l, int m, int r)\n \n   if (l > 100)\n     if ( (n <= 9) &&  (m < 100)  && (r < 19) )\n-      blah(v); /* { dg-bogus \"uninitialized\" \"bogus warning\" } */\n+      blah(v); /* { dg-bogus \"uninitialized\" \"bogus warning\" { xfail powerpc64*-*-* } } */\n \n   if ( (n <= 8) &&  (m < 99)  && (r < 19) )\n-      blah(v); /* { dg-bogus \"uninitialized\" \"pr101674\" { xfail powerpc64*-*-* mmix-*-* cris-*-* } } */\n+      blah(v); /* { dg-bogus \"uninitialized\" \"pr101674\" { xfail mmix-*-* cris-*-* } } */\n \n   return 0;\n }"}, {"sha": "9979bfdedf44794c6cdd8b72f886ab3399de9a22", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -955,7 +955,7 @@ const pass_data pass_data_thread_jumps =\n const pass_data pass_data_thread_jumps_full =\n {\n   GIMPLE_PASS,\n-  \"thread-full\",\n+  \"threadfull\",\n   OPTGROUP_NONE,\n   TV_TREE_SSA_THREAD_JUMPS,\n   ( PROP_cfg | PROP_ssa ),"}, {"sha": "587c0a124976ec29e5e3043ba7df42b29e1ba53d", "filename": "libgomp/testsuite/libgomp.graphite/force-parallel-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-4.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,5 +1,5 @@\n /* Autopar with IF conditions.  */\n-/* { dg-additional-options \"-fdisable-tree-thread1 -fdisable-tree-vrp-thread1\" } */\n+/* { dg-additional-options \"-fno-thread-jumps\" } */\n \n void abort();\n "}, {"sha": "ee5a67aa2b0913a78809dc0e388212992aa2898a", "filename": "libgomp/testsuite/libgomp.graphite/force-parallel-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3a325f07acebf47e82de227ce1d5ba62f5bcae/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-8.c?ref=4b3a325f07acebf47e82de227ce1d5ba62f5bcae", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-additional-options \"-fdisable-tree-thread1 -fdisable-tree-vrp-thread1 --param max-stores-to-sink=0\" } */\n+/* { dg-additional-options \"-fno-thread-jumps --param max-stores-to-sink=0\" } */\n \n #define N 1500\n "}]}