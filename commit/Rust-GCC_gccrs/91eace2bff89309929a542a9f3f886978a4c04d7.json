{"sha": "91eace2bff89309929a542a9f3f886978a4c04d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFlYWNlMmJmZjg5MzA5OTI5YTU0MmE5ZjNmODg2OTc4YTRjMDRkNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-04-28T20:03:02Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-28T20:03:02Z"}, "message": "lto-streamer-in.c (unpack_ts_type_value_fields): Replace test for record or union type with RECORD_OR_UNION_TYPE_P predicate.\n\n\t* lto-streamer-in.c (unpack_ts_type_value_fields): Replace test for\n\trecord or union type with RECORD_OR_UNION_TYPE_P predicate.\n\t(lto_input_ts_type_tree_pointers): Likewise.\n\t* lto-streamer-out.c (pack_ts_type_value_fields): Likewise.\n\t(lto_output_ts_type_tree_pointers): Likewise.\n\nFrom-SVN: r158841", "tree": {"sha": "d8bc53a8850807172136dba3487b68e49c937815", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8bc53a8850807172136dba3487b68e49c937815"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91eace2bff89309929a542a9f3f886978a4c04d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91eace2bff89309929a542a9f3f886978a4c04d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91eace2bff89309929a542a9f3f886978a4c04d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91eace2bff89309929a542a9f3f886978a4c04d7/comments", "author": null, "committer": null, "parents": [{"sha": "ab6edba459335999c6ca4316399754036d0439e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab6edba459335999c6ca4316399754036d0439e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab6edba459335999c6ca4316399754036d0439e7"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "7fcbf0474dbccfae0769bd5b9e11c690d7ae6877", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91eace2bff89309929a542a9f3f886978a4c04d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91eace2bff89309929a542a9f3f886978a4c04d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91eace2bff89309929a542a9f3f886978a4c04d7", "patch": "@@ -1,3 +1,11 @@\n+2010-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* lto-streamer-in.c (unpack_ts_type_value_fields): Replace test for\n+\trecord or union type with RECORD_OR_UNION_TYPE_P predicate.\n+\t(lto_input_ts_type_tree_pointers): Likewise.\n+\t* lto-streamer-out.c (pack_ts_type_value_fields): Likewise.\n+\t(lto_output_ts_type_tree_pointers): Likewise.\n+\n 2010-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tUniquization of constants at the Tree level"}, {"sha": "bbcd2abc9c9855df028f747140d1a921598480df", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91eace2bff89309929a542a9f3f886978a4c04d7/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91eace2bff89309929a542a9f3f886978a4c04d7/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=91eace2bff89309929a542a9f3f886978a4c04d7", "patch": "@@ -1774,8 +1774,8 @@ unpack_ts_type_value_fields (struct bitpack_d *bp, tree expr)\n   SET_TYPE_MODE (expr, mode);\n   TYPE_STRING_FLAG (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_NO_FORCE_BLK (expr) = (unsigned) bp_unpack_value (bp, 1);\n-  TYPE_NEEDS_CONSTRUCTING(expr) = (unsigned) bp_unpack_value (bp, 1);\n-  if (TREE_CODE (expr) == UNION_TYPE || TREE_CODE (expr) == RECORD_TYPE)\n+  TYPE_NEEDS_CONSTRUCTING (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  if (RECORD_OR_UNION_TYPE_P (expr))\n     TYPE_TRANSPARENT_AGGR (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_PACKED (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_RESTRICT (expr) = (unsigned) bp_unpack_value (bp, 1);\n@@ -2167,9 +2167,10 @@ lto_input_ts_type_tree_pointers (struct lto_input_block *ib,\n     TYPE_VALUES (expr) = lto_input_tree (ib, data_in);\n   else if (TREE_CODE (expr) == ARRAY_TYPE)\n     TYPE_DOMAIN (expr) = lto_input_tree (ib, data_in);\n-  else if (TREE_CODE (expr) == RECORD_TYPE || TREE_CODE (expr) == UNION_TYPE)\n+  else if (RECORD_OR_UNION_TYPE_P (expr))\n     TYPE_FIELDS (expr) = lto_input_tree (ib, data_in);\n-  else if (TREE_CODE (expr) == FUNCTION_TYPE || TREE_CODE (expr) == METHOD_TYPE)\n+  else if (TREE_CODE (expr) == FUNCTION_TYPE\n+\t   || TREE_CODE (expr) == METHOD_TYPE)\n     TYPE_ARG_TYPES (expr) = lto_input_tree (ib, data_in);\n   else if (TREE_CODE (expr) == VECTOR_TYPE)\n     TYPE_DEBUG_REPRESENTATION_TYPE (expr) = lto_input_tree (ib, data_in);"}, {"sha": "99a7da1679497c7823b8db2a836a99464bdfc5ab", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91eace2bff89309929a542a9f3f886978a4c04d7/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91eace2bff89309929a542a9f3f886978a4c04d7/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=91eace2bff89309929a542a9f3f886978a4c04d7", "patch": "@@ -518,8 +518,8 @@ pack_ts_type_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, TYPE_MODE (expr), 7);\n   bp_pack_value (bp, TYPE_STRING_FLAG (expr), 1);\n   bp_pack_value (bp, TYPE_NO_FORCE_BLK (expr), 1);\n-  bp_pack_value (bp, TYPE_NEEDS_CONSTRUCTING(expr), 1);\n-  if (TREE_CODE (expr) == UNION_TYPE || TREE_CODE (expr) == RECORD_TYPE)\n+  bp_pack_value (bp, TYPE_NEEDS_CONSTRUCTING (expr), 1);\n+  if (RECORD_OR_UNION_TYPE_P (expr))\n     bp_pack_value (bp, TYPE_TRANSPARENT_AGGR (expr), 1);\n   bp_pack_value (bp, TYPE_PACKED (expr), 1);\n   bp_pack_value (bp, TYPE_RESTRICT (expr), 1);\n@@ -947,9 +947,10 @@ lto_output_ts_type_tree_pointers (struct output_block *ob, tree expr,\n     lto_output_tree_or_ref (ob, TYPE_VALUES (expr), ref_p);\n   else if (TREE_CODE (expr) == ARRAY_TYPE)\n     lto_output_tree_or_ref (ob, TYPE_DOMAIN (expr), ref_p);\n-  else if (TREE_CODE (expr) == RECORD_TYPE || TREE_CODE (expr) == UNION_TYPE)\n+  else if (RECORD_OR_UNION_TYPE_P (expr))\n     lto_output_tree_or_ref (ob, TYPE_FIELDS (expr), ref_p);\n-  else if (TREE_CODE (expr) == FUNCTION_TYPE || TREE_CODE (expr) == METHOD_TYPE)\n+  else if (TREE_CODE (expr) == FUNCTION_TYPE\n+\t   || TREE_CODE (expr) == METHOD_TYPE)\n     lto_output_tree_or_ref (ob, TYPE_ARG_TYPES (expr), ref_p);\n   else if (TREE_CODE (expr) == VECTOR_TYPE)\n     lto_output_tree_or_ref (ob, TYPE_DEBUG_REPRESENTATION_TYPE (expr), ref_p);\n@@ -966,7 +967,7 @@ lto_output_ts_type_tree_pointers (struct output_block *ob, tree expr,\n   lto_output_tree_or_ref (ob, TYPE_MAIN_VARIANT (expr), ref_p);\n   /* Do not stream TYPE_NEXT_VARIANT, we reconstruct the variant lists\n      during fixup.  */\n-  if (TREE_CODE (expr) == RECORD_TYPE || TREE_CODE (expr) == UNION_TYPE)\n+  if (RECORD_OR_UNION_TYPE_P (expr))\n     lto_output_tree_or_ref (ob, TYPE_BINFO (expr), ref_p);\n   lto_output_tree_or_ref (ob, TYPE_CONTEXT (expr), ref_p);\n   lto_output_tree_or_ref (ob, TYPE_CANONICAL (expr), ref_p);"}]}