{"sha": "dca23bf0bbe68c3880c9793b401cfc03890e6a0d", "node_id": "C_kwDOANBUbNoAKGRjYTIzYmYwYmJlNjhjMzg4MGM5NzkzYjQwMWNmYzAzODkwZTZhMGQ", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-08T20:52:36Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T07:14:35Z"}, "message": "RISC-V: Add vmadc/vmsbc C/C++ API support\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vector-builtins-bases.cc (class vmadc): New class.\n\t(class vmsbc): Ditto.\n\t(BASE): Define new class.\n\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n\t* config/riscv/riscv-vector-builtins-functions.def (vmadc): New define.\n\t(vmsbc): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.cc (struct return_mask_def):\n\tNew class.\n\t(SHAPE): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.h: Ditto.\n\t* config/riscv/riscv-vector-builtins.cc\n\t(function_expander::use_exact_insn): Adjust for new support\n\t* config/riscv/riscv-vector-builtins.h\n\t(function_base::has_merge_operand_p): New function.\n\t* config/riscv/vector-iterators.md: New iterator.\n\t* config/riscv/vector.md (@pred_madc<mode>): New pattern.\n\t(@pred_msbc<mode>): Ditto.\n\t(@pred_madc<mode>_scalar): Ditto.\n\t(@pred_msbc<mode>_scalar): Ditto.\n\t(*pred_madc<mode>_scalar): Ditto.\n\t(*pred_madc<mode>_extended_scalar): Ditto.\n\t(*pred_msbc<mode>_scalar): Ditto.\n\t(*pred_msbc<mode>_extended_scalar): Ditto.\n\t(@pred_madc<mode>_overflow): Ditto.\n\t(@pred_msbc<mode>_overflow): Ditto.\n\t(@pred_madc<mode>_overflow_scalar): Ditto.\n\t(@pred_msbc<mode>_overflow_scalar): Ditto.\n\t(*pred_madc<mode>_overflow_scalar): Ditto.\n\t(*pred_madc<mode>_overflow_extended_scalar): Ditto.\n\t(*pred_msbc<mode>_overflow_scalar): Ditto.\n\t(*pred_msbc<mode>_overflow_extended_scalar): Ditto.", "tree": {"sha": "27e782dc9c4280aeed5f87851f00ab088aae5193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27e782dc9c4280aeed5f87851f00ab088aae5193"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dca23bf0bbe68c3880c9793b401cfc03890e6a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca23bf0bbe68c3880c9793b401cfc03890e6a0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dca23bf0bbe68c3880c9793b401cfc03890e6a0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7e4f61c3e703f38c5621d5114e776d245abdf73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e4f61c3e703f38c5621d5114e776d245abdf73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e4f61c3e703f38c5621d5114e776d245abdf73"}], "stats": {"total": 643, "additions": 642, "deletions": 1}, "files": [{"sha": "bcf2dfe805a3ede06070f3f66b783e04ae69a641", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=dca23bf0bbe68c3880c9793b401cfc03890e6a0d", "patch": "@@ -338,6 +338,64 @@ class vsbc : public function_base\n   }\n };\n \n+/* Implements vmadc.  */\n+class vmadc : public function_base\n+{\n+public:\n+  bool apply_tail_policy_p () const override { return false; }\n+  bool apply_mask_policy_p () const override { return false; }\n+  bool use_mask_predication_p () const override { return false; }\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    switch (e.op_info->op)\n+      {\n+      case OP_TYPE_vvm:\n+\treturn e.use_exact_insn (code_for_pred_madc (e.vector_mode ()));\n+      case OP_TYPE_vxm:\n+\treturn e.use_exact_insn (code_for_pred_madc_scalar (e.vector_mode ()));\n+      case OP_TYPE_vv:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_madc_overflow (e.vector_mode ()));\n+      case OP_TYPE_vx:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_madc_overflow_scalar (e.vector_mode ()));\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  }\n+};\n+\n+/* Implements vmsbc.  */\n+class vmsbc : public function_base\n+{\n+public:\n+  bool apply_tail_policy_p () const override { return false; }\n+  bool apply_mask_policy_p () const override { return false; }\n+  bool use_mask_predication_p () const override { return false; }\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    switch (e.op_info->op)\n+      {\n+      case OP_TYPE_vvm:\n+\treturn e.use_exact_insn (code_for_pred_msbc (e.vector_mode ()));\n+      case OP_TYPE_vxm:\n+\treturn e.use_exact_insn (code_for_pred_msbc_scalar (e.vector_mode ()));\n+      case OP_TYPE_vv:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_msbc_overflow (e.vector_mode ()));\n+      case OP_TYPE_vx:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_msbc_overflow_scalar (e.vector_mode ()));\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  }\n+};\n+\n static CONSTEXPR const vsetvl<false> vsetvl_obj;\n static CONSTEXPR const vsetvl<true> vsetvlmax_obj;\n static CONSTEXPR const loadstore<false, LST_UNIT_STRIDE, false> vle_obj;\n@@ -398,6 +456,8 @@ static CONSTEXPR const vwcvt<SIGN_EXTEND> vwcvt_x_obj;\n static CONSTEXPR const vwcvt<ZERO_EXTEND> vwcvtu_x_obj;\n static CONSTEXPR const vadc vadc_obj;\n static CONSTEXPR const vsbc vsbc_obj;\n+static CONSTEXPR const vmadc vmadc_obj;\n+static CONSTEXPR const vmsbc vmsbc_obj;\n static CONSTEXPR const binop<SS_PLUS> vsadd_obj;\n static CONSTEXPR const binop<SS_MINUS> vssub_obj;\n static CONSTEXPR const binop<US_PLUS> vsaddu_obj;\n@@ -468,6 +528,8 @@ BASE (vwcvt_x)\n BASE (vwcvtu_x)\n BASE (vadc)\n BASE (vsbc)\n+BASE (vmadc)\n+BASE (vmsbc)\n BASE (vsadd)\n BASE (vssub)\n BASE (vsaddu)"}, {"sha": "6a8747b184e667018aa61a81aceb16937703fcdc", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=dca23bf0bbe68c3880c9793b401cfc03890e6a0d", "patch": "@@ -84,6 +84,8 @@ extern const function_base *const vwcvt_x;\n extern const function_base *const vwcvtu_x;\n extern const function_base *const vadc;\n extern const function_base *const vsbc;\n+extern const function_base *const vmadc;\n+extern const function_base *const vmsbc;\n extern const function_base *const vsadd;\n extern const function_base *const vssub;\n extern const function_base *const vsaddu;"}, {"sha": "6d328537ab8ff556c1e85bfb6b144eb5198ce81f", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=dca23bf0bbe68c3880c9793b401cfc03890e6a0d", "patch": "@@ -140,6 +140,14 @@ DEF_RVV_FUNCTION (vadc, no_mask_policy, tu_preds, iu_vvvm_ops)\n DEF_RVV_FUNCTION (vsbc, no_mask_policy, tu_preds, iu_vvvm_ops)\n DEF_RVV_FUNCTION (vadc, no_mask_policy, tu_preds, iu_vvxm_ops)\n DEF_RVV_FUNCTION (vsbc, no_mask_policy, tu_preds, iu_vvxm_ops)\n+DEF_RVV_FUNCTION (vmadc, return_mask, none_preds, iu_mvvm_ops)\n+DEF_RVV_FUNCTION (vmsbc, return_mask, none_preds, iu_mvvm_ops)\n+DEF_RVV_FUNCTION (vmadc, return_mask, none_preds, iu_mvxm_ops)\n+DEF_RVV_FUNCTION (vmsbc, return_mask, none_preds, iu_mvxm_ops)\n+DEF_RVV_FUNCTION (vmadc, return_mask, none_preds, iu_mvv_ops)\n+DEF_RVV_FUNCTION (vmsbc, return_mask, none_preds, iu_mvv_ops)\n+DEF_RVV_FUNCTION (vmadc, return_mask, none_preds, iu_mvx_ops)\n+DEF_RVV_FUNCTION (vmsbc, return_mask, none_preds, iu_mvx_ops)\n /* 12. Vector Fixed-Point Arithmetic Instructions. */\n DEF_RVV_FUNCTION (vsadd, alu, full_preds, i_vvv_ops)\n DEF_RVV_FUNCTION (vssub, alu, full_preds, i_vvv_ops)"}, {"sha": "dae515cb5c3e86ee459ccfc9e481507ba060dde4", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc?ref=dca23bf0bbe68c3880c9793b401cfc03890e6a0d", "patch": "@@ -266,12 +266,40 @@ struct no_mask_policy_def : public build_base\n   }\n };\n \n+/* return_mask_def class. Such instructions belong to this class\n+   is returning mask value.  */\n+struct return_mask_def : public build_base\n+{\n+  char *get_name (function_builder &b, const function_instance &instance,\n+\t\t  bool overloaded_p) const override\n+  {\n+    b.append_base_name (instance.base_name);\n+\n+    if (!overloaded_p)\n+      b.append_name (operand_suffixes[instance.op_info->op]);\n+\n+    /* vop<sew>_<op> --> vop<sew>_<op>_<type1>_<type2>.  */\n+    if (!overloaded_p)\n+      {\n+\tb.append_name (type_suffixes[instance.type.index].vector);\n+\tvector_type_index ret_type_idx\n+\t  = instance.op_info->ret.get_base_vector_type (\n+\t    builtin_types[instance.type.index].vector);\n+\tb.append_name (type_suffixes[ret_type_idx].vector);\n+      }\n+\n+    b.append_name (predication_suffixes[instance.pred]);\n+    return b.finish_name ();\n+  }\n+};\n+\n SHAPE(vsetvl, vsetvl)\n SHAPE(vsetvl, vsetvlmax)\n SHAPE(loadstore, loadstore)\n SHAPE(indexed_loadstore, indexed_loadstore)\n SHAPE(alu, alu)\n SHAPE(widen_alu, widen_alu)\n SHAPE(no_mask_policy, no_mask_policy)\n+SHAPE(return_mask, return_mask)\n \n } // end namespace riscv_vector"}, {"sha": "783b4712a456d1e3c011cf50afc8f03dd2d6a8d2", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h?ref=dca23bf0bbe68c3880c9793b401cfc03890e6a0d", "patch": "@@ -31,6 +31,7 @@ extern const function_shape *const indexed_loadstore;\n extern const function_shape *const alu;\n extern const function_shape *const widen_alu;\n extern const function_shape *const no_mask_policy;\n+extern const function_shape *const return_mask;\n }\n \n } // end namespace riscv_vector"}, {"sha": "ce62baec5ce57eb8273dfa7f9a1a8922c383c983", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=dca23bf0bbe68c3880c9793b401cfc03890e6a0d", "patch": "@@ -570,6 +570,38 @@ static CONSTEXPR const rvv_op_info iu_vvxm_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      vxm_args /* Args */};\n \n+/* A static operand information for mask_type func (vector_type, vector_type,\n+ * mask_type) function registration. */\n+static CONSTEXPR const rvv_op_info iu_mvvm_ops\n+  = {iu_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vvm,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_mask), /* Return type */\n+     vvm_args /* Args */};\n+\n+/* A static operand information for mask_type func (vector_type, scalar_type,\n+ * mask_type) function registration. */\n+static CONSTEXPR const rvv_op_info iu_mvxm_ops\n+  = {iu_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vxm,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_mask), /* Return type */\n+     vxm_args /* Args */};\n+\n+/* A static operand information for mask_type func (vector_type, vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info iu_mvv_ops\n+  = {iu_ops,\t\t\t\t/* Types */\n+     OP_TYPE_vv,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_mask), /* Return type */\n+     vv_args /* Args */};\n+\n+/* A static operand information for mask_type func (vector_type, scalar_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info iu_mvx_ops\n+  = {iu_ops,\t\t\t\t/* Types */\n+     OP_TYPE_vx,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_mask), /* Return type */\n+     vx_args /* Args */};\n+\n /* A static operand information for vector_type func (vector_type, vector_type)\n  * function registration. */\n static CONSTEXPR const rvv_op_info i_vvv_ops\n@@ -1670,7 +1702,7 @@ function_expander::use_exact_insn (insn_code icode)\n     }\n \n   /* Store operation doesn't have merge operand.  */\n-  if (!function_returns_void_p ())\n+  if (!function_returns_void_p () && base->has_merge_operand_p ())\n     {\n       if (use_real_merge_p (pred))\n \tadd_input_operand (arg_offset++);"}, {"sha": "f00b2c51020a1d9ca330cf705c7a985796cee886", "filename": "gcc/config/riscv/riscv-vector-builtins.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h?ref=dca23bf0bbe68c3880c9793b401cfc03890e6a0d", "patch": "@@ -388,6 +388,9 @@ class function_base\n   /* Return true if intrinsics use mask predication.  */\n   virtual bool use_mask_predication_p () const;\n \n+  /* Return true if intrinsics has merge operand.  */\n+  virtual bool has_merge_operand_p () const;\n+\n   /* Expand the given call into rtl.  Return the result of the function,\n      or an arbitrary value if the function doesn't return a result.  */\n   virtual rtx expand (function_expander &) const = 0;\n@@ -521,6 +524,14 @@ function_base::use_mask_predication_p () const\n   return true;\n }\n \n+/* We choose to return true by default since most of the intrinsics use\n+   has merge operand.  */\n+inline bool\n+function_base::has_merge_operand_p () const\n+{\n+  return true;\n+}\n+\n /* Since most of intrinsics can be overloaded, we set it true by default.  */\n inline bool\n function_base::can_be_overloaded_p (enum predication_type_index) const"}, {"sha": "6b255c4ddb3e348f01b1ca5fefa5484faf074fff", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=dca23bf0bbe68c3880c9793b401cfc03890e6a0d", "patch": "@@ -36,6 +36,9 @@\n \n   UNSPEC_VADC\n   UNSPEC_VSBC\n+  UNSPEC_VMADC\n+  UNSPEC_VMSBC\n+  UNSPEC_OVERFLOW\n ])\n \n (define_mode_iterator V ["}, {"sha": "b3f8c055a75d98e876edd7be2883069b6b69e72b", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 494, "deletions": 0, "changes": 494, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca23bf0bbe68c3880c9793b401cfc03890e6a0d/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=dca23bf0bbe68c3880c9793b401cfc03890e6a0d", "patch": "@@ -1962,6 +1962,7 @@\n    vadc.vim\\t%0,%2,%v3,%4\"\n   [(set_attr \"type\" \"vicalu\")\n    (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"1\")\n    (set_attr \"vl_op_idx\" \"5\")\n    (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n@@ -1985,6 +1986,7 @@\n   \"vsbc.vvm\\t%0,%2,%3,%4\"\n   [(set_attr \"type\" \"vicalu\")\n    (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"1\")\n    (set_attr \"vl_op_idx\" \"5\")\n    (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n@@ -2009,6 +2011,7 @@\n   \"vadc.vxm\\t%0,%2,%3,%4\"\n   [(set_attr \"type\" \"vicalu\")\n    (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"1\")\n    (set_attr \"vl_op_idx\" \"5\")\n    (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n@@ -2033,6 +2036,7 @@\n   \"vsbc.vxm\\t%0,%2,%z3,%4\"\n   [(set_attr \"type\" \"vicalu\")\n    (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"1\")\n    (set_attr \"vl_op_idx\" \"5\")\n    (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n@@ -2102,6 +2106,7 @@\n   \"vadc.vxm\\t%0,%2,%3,%4\"\n   [(set_attr \"type\" \"vicalu\")\n    (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"1\")\n    (set_attr \"vl_op_idx\" \"5\")\n    (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n@@ -2127,6 +2132,7 @@\n   \"vadc.vxm\\t%0,%2,%3,%4\"\n   [(set_attr \"type\" \"vicalu\")\n    (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"1\")\n    (set_attr \"vl_op_idx\" \"5\")\n    (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n@@ -2200,6 +2206,7 @@\n   \"vsbc.vxm\\t%0,%2,%z3,%4\"\n   [(set_attr \"type\" \"vicalu\")\n    (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"1\")\n    (set_attr \"vl_op_idx\" \"5\")\n    (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n@@ -2225,10 +2232,497 @@\n   \"vsbc.vxm\\t%0,%2,%z3,%4\"\n   [(set_attr \"type\" \"vicalu\")\n    (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"1\")\n    (set_attr \"vl_op_idx\" \"5\")\n    (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n \n+(define_insn \"@pred_madc<mode>\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"        \"=&vr, &vr\")\n+\t(unspec:<VM>\n+\t   [(plus:VI\n+\t     (match_operand:VI 1 \"register_operand\"     \"  vr,  vr\")\n+\t     (match_operand:VI 2 \"vector_arith_operand\" \"  vr,  vi\"))\n+\t    (match_operand:<VM> 3 \"register_operand\"    \"  vm,  vm\")\n+\t    (unspec:<VM>\n+\t      [(match_operand 4 \"vector_length_operand\" \"  rK,  rK\")\n+\t       (match_operand 5 \"const_int_operand\"     \"   i,   i\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_VMADC))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vmadc.vvm\\t%0,%1,%2,%3\n+   vmadc.vim\\t%0,%1,%v2,%3\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"4\")\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[5])\"))])\n+\n+(define_insn \"@pred_msbc<mode>\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"        \"=&vr\")\n+\t(unspec:<VM>\n+\t   [(minus:VI\n+\t     (match_operand:VI 1 \"register_operand\"     \"  vr\")\n+\t     (match_operand:VI 2 \"register_operand\"     \"  vr\"))\n+\t    (match_operand:<VM> 3 \"register_operand\"    \"  vm\")\n+\t    (unspec:<VM>\n+\t      [(match_operand 4 \"vector_length_operand\" \"  rK\")\n+\t       (match_operand 5 \"const_int_operand\"     \"   i\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_VMSBC))]\n+  \"TARGET_VECTOR\"\n+  \"vmsbc.vvm\\t%0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"4\")\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[5])\"))])\n+\n+(define_insn \"@pred_madc<mode>_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"         \"=&vr\")\n+\t(unspec:<VM>\n+\t   [(plus:VI_QHS\n+\t     (vec_duplicate:VI_QHS\n+\t       (match_operand:<VEL> 2 \"register_operand\" \"   r\"))\n+\t     (match_operand:VI_QHS 1 \"register_operand\"  \"  vr\"))\n+\t    (match_operand:<VM> 3 \"register_operand\"     \"  vm\")\n+\t    (unspec:<VM>\n+\t      [(match_operand 4 \"vector_length_operand\"  \"  rK\")\n+\t       (match_operand 5 \"const_int_operand\"      \"   i\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_VMADC))]\n+  \"TARGET_VECTOR\"\n+  \"vmadc.vxm\\t%0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"4\")\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[5])\"))])\n+\n+(define_insn \"@pred_msbc<mode>_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"         \"=&vr\")\n+\t(unspec:<VM>\n+\t   [(minus:VI_QHS\n+\t     (vec_duplicate:VI_QHS\n+\t       (match_operand:<VEL> 2 \"reg_or_0_operand\" \"  rJ\"))\n+\t     (match_operand:VI_QHS 1 \"register_operand\"  \"  vr\"))\n+\t    (match_operand:<VM> 3 \"register_operand\"     \"  vm\")\n+\t    (unspec:<VM>\n+\t      [(match_operand 4 \"vector_length_operand\"  \"  rK\")\n+\t       (match_operand 5 \"const_int_operand\"      \"   i\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_VMSBC))]\n+  \"TARGET_VECTOR\"\n+  \"vmsbc.vxm\\t%0,%1,%z2,%3\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"4\")\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[5])\"))])\n+\n+(define_expand \"@pred_madc<mode>_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\")\n+\t(unspec:<VM>\n+\t   [(plus:VI_D\n+\t     (vec_duplicate:VI_D\n+\t       (match_operand:<VEL> 2 \"reg_or_int_operand\"))\n+\t     (match_operand:VI_D 1 \"register_operand\"))\n+\t    (match_operand:<VM> 3 \"register_operand\")\n+\t    (unspec:<VM>\n+\t      [(match_operand 4 \"vector_length_operand\")\n+\t       (match_operand 5 \"const_int_operand\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_VMADC))]\n+  \"TARGET_VECTOR\"\n+  {\n+    if (riscv_vector::simm5_p (operands[2]))\n+      operands[2] = force_reg (<VEL>mode, operands[2]);\n+    else if (!TARGET_64BIT)\n+      {\n+\trtx v = gen_reg_rtx (<MODE>mode);\n+\n+\tif (riscv_vector::simm32_p (operands[2]))\n+\t  operands[2] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n+\t\tforce_reg (Pmode, operands[2]));\n+\telse\n+\t  {\n+\t    if (CONST_INT_P (operands[2]))\n+\t      operands[2] = force_reg (<VEL>mode, operands[2]);\n+\n+\t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n+\t\t\t\t\t    v, operands[2], operands[5],\n+\t\t\t\t\t    <VM>mode);\n+\t    emit_insn (gen_pred_madc<mode> (operands[0], operands[1], v, operands[3],\n+\t\t\t\t\t    operands[4], operands[5]));\n+\t    DONE;\n+\t  }\n+      }\n+    else\n+      operands[2] = force_reg (<VEL>mode, operands[2]);\n+  })\n+\n+(define_insn \"*pred_madc<mode>_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"         \"=&vr\")\n+\t(unspec:<VM>\n+\t   [(plus:VI_D\n+\t     (vec_duplicate:VI_D\n+\t       (match_operand:<VEL> 2 \"register_operand\" \"   r\"))\n+\t     (match_operand:VI_D 1 \"register_operand\"    \"  vr\"))\n+\t    (match_operand:<VM> 3 \"register_operand\"     \"  vm\")\n+\t    (unspec:<VM>\n+\t      [(match_operand 4 \"vector_length_operand\"  \"  rK\")\n+\t       (match_operand 5 \"const_int_operand\"      \"   i\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_VMADC))]\n+  \"TARGET_VECTOR\"\n+  \"vmadc.vxm\\t%0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"4\")\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[5])\"))])\n+\n+(define_insn \"*pred_madc<mode>_extended_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"             \"=&vr\")\n+\t(unspec:<VM>\n+\t   [(plus:VI_D\n+\t     (vec_duplicate:VI_D\n+\t       (sign_extend:<VEL>\n+\t         (match_operand:<VSUBEL> 2 \"register_operand\" \"   r\")))\n+\t     (match_operand:VI_D 1 \"register_operand\"         \"  vr\"))\n+\t    (match_operand:<VM> 3 \"register_operand\"          \"  vm\")\n+\t    (unspec:<VM>\n+\t      [(match_operand 4 \"vector_length_operand\"       \"  rK\")\n+\t       (match_operand 5 \"const_int_operand\"           \"   i\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_VMADC))]\n+  \"TARGET_VECTOR\"\n+  \"vmadc.vxm\\t%0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"4\")\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[5])\"))])\n+\n+(define_expand \"@pred_msbc<mode>_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\")\n+\t(unspec:<VM>\n+\t   [(minus:VI_D\n+\t     (vec_duplicate:VI_D\n+\t       (match_operand:<VEL> 2 \"reg_or_int_operand\"))\n+\t     (match_operand:VI_D 1 \"register_operand\"))\n+\t    (match_operand:<VM> 3 \"register_operand\")\n+\t    (unspec:<VM>\n+\t      [(match_operand 4 \"vector_length_operand\")\n+\t       (match_operand 5 \"const_int_operand\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_VMSBC))]\n+  \"TARGET_VECTOR\"\n+  {\n+    if (!TARGET_64BIT)\n+      {\n+        rtx v = gen_reg_rtx (<MODE>mode);\n+\n+\tif (riscv_vector::simm32_p (operands[2]))\n+\t  {\n+\t    if (!rtx_equal_p (operands[2], const0_rtx))\n+\t      operands[2] = force_reg (Pmode, operands[2]);\n+\t    operands[2] = gen_rtx_SIGN_EXTEND (<VEL>mode, operands[2]);\n+\t  }\n+\telse\n+\t  {\n+\t    if (CONST_INT_P (operands[2]))\n+\t      operands[2] = force_reg (<VEL>mode, operands[2]);\n+\n+\t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n+\t\t\t\t\t    v, operands[2], operands[5],\n+\t\t\t\t\t    <VM>mode);\n+\t    emit_insn (gen_pred_msbc<mode> (operands[0], operands[1], v, operands[3],\n+\t\t\t\t\t    operands[4], operands[5]));\n+\t    DONE;\n+\t  }\n+      }\n+    else\n+      {\n+\tif (!rtx_equal_p (operands[2], const0_rtx))\n+\t  operands[2] = force_reg (<VEL>mode, operands[2]);\n+      }\n+  })\n+\n+(define_insn \"*pred_msbc<mode>_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"         \"=&vr\")\n+\t(unspec:<VM>\n+\t   [(minus:VI_D\n+\t     (vec_duplicate:VI_D\n+\t       (match_operand:<VEL> 2 \"reg_or_0_operand\" \"  rJ\"))\n+\t     (match_operand:VI_D 1 \"register_operand\"    \"  vr\"))\n+\t    (match_operand:<VM> 3 \"register_operand\"     \"  vm\")\n+\t    (unspec:<VM>\n+\t      [(match_operand 4 \"vector_length_operand\"  \"  rK\")\n+\t       (match_operand 5 \"const_int_operand\"      \"   i\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_VMSBC))]\n+  \"TARGET_VECTOR\"\n+  \"vmsbc.vxm\\t%0,%1,%z2,%3\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"4\")\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[5])\"))])\n+\n+(define_insn \"*pred_msbc<mode>_extended_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"             \"=&vr\")\n+\t(unspec:<VM>\n+\t   [(minus:VI_D\n+\t     (vec_duplicate:VI_D\n+\t       (sign_extend:<VEL>\n+\t         (match_operand:<VSUBEL> 2 \"reg_or_0_operand\" \"  rJ\")))\n+\t     (match_operand:VI_D 1 \"register_operand\"         \"  vr\"))\n+\t    (match_operand:<VM> 3 \"register_operand\"          \"  vm\")\n+\t    (unspec:<VM>\n+\t      [(match_operand 4 \"vector_length_operand\"       \"  rK\")\n+\t       (match_operand 5 \"const_int_operand\"           \"   i\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_VMSBC))]\n+  \"TARGET_VECTOR\"\n+  \"vmsbc.vxm\\t%0,%1,%z2,%3\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"4\")\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[5])\"))])\n+\n+(define_insn \"@pred_madc<mode>_overflow\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"        \"=&vr, &vr\")\n+\t(unspec:<VM>\n+\t   [(plus:VI\n+\t     (match_operand:VI 1 \"register_operand\"     \"  vr,  vr\")\n+\t     (match_operand:VI 2 \"vector_arith_operand\" \"  vr,  vi\"))\n+\t    (unspec:<VM>\n+\t      [(match_operand 3 \"vector_length_operand\" \"  rK,  rK\")\n+\t       (match_operand 4 \"const_int_operand\"     \"   i,   i\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_OVERFLOW))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vmadc.vv\\t%0,%1,%2\n+   vmadc.vi\\t%0,%1,%v2\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"3\")\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[4])\"))])\n+\n+(define_insn \"@pred_msbc<mode>_overflow\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"        \"=&vr\")\n+\t(unspec:<VM>\n+\t   [(minus:VI\n+\t     (match_operand:VI 1 \"register_operand\"     \"  vr\")\n+\t     (match_operand:VI 2 \"register_operand\"     \"  vr\"))\n+\t    (unspec:<VM>\n+\t      [(match_operand 3 \"vector_length_operand\" \"  rK\")\n+\t       (match_operand 4 \"const_int_operand\"     \"   i\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_OVERFLOW))]\n+  \"TARGET_VECTOR\"\n+  \"vmsbc.vv\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"3\")\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[4])\"))])\n+\n+(define_insn \"@pred_madc<mode>_overflow_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"         \"=&vr\")\n+\t(unspec:<VM>\n+\t   [(plus:VI_QHS\n+\t     (vec_duplicate:VI_QHS\n+\t       (match_operand:<VEL> 2 \"register_operand\" \"   r\"))\n+\t     (match_operand:VI_QHS 1 \"register_operand\"  \"  vr\"))\n+\t    (unspec:<VM>\n+\t      [(match_operand 3 \"vector_length_operand\"  \"  rK\")\n+\t       (match_operand 4 \"const_int_operand\"      \"   i\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_OVERFLOW))]\n+  \"TARGET_VECTOR\"\n+  \"vmadc.vx\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"3\")\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[4])\"))])\n+\n+(define_insn \"@pred_msbc<mode>_overflow_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"         \"=&vr\")\n+\t(unspec:<VM>\n+\t   [(minus:VI_QHS\n+\t     (vec_duplicate:VI_QHS\n+\t       (match_operand:<VEL> 2 \"reg_or_0_operand\" \"  rJ\"))\n+\t     (match_operand:VI_QHS 1 \"register_operand\"  \"  vr\"))\n+\t    (unspec:<VM>\n+\t      [(match_operand 3 \"vector_length_operand\"  \"  rK\")\n+\t       (match_operand 4 \"const_int_operand\"      \"   i\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_OVERFLOW))]\n+  \"TARGET_VECTOR\"\n+  \"vmsbc.vx\\t%0,%1,%z2\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"3\")\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[4])\"))])\n+\n+(define_expand \"@pred_madc<mode>_overflow_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\")\n+\t(unspec:<VM>\n+\t   [(plus:VI_D\n+\t     (vec_duplicate:VI_D\n+\t       (match_operand:<VEL> 2 \"reg_or_int_operand\"))\n+\t     (match_operand:VI_D 1 \"register_operand\"))\n+\t    (unspec:<VM>\n+\t      [(match_operand 3 \"vector_length_operand\")\n+\t       (match_operand 4 \"const_int_operand\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_OVERFLOW))]\n+  \"TARGET_VECTOR\"\n+  {\n+    if (riscv_vector::simm5_p (operands[2]))\n+      operands[2] = force_reg (<VEL>mode, operands[2]);\n+    else if (!TARGET_64BIT)\n+      {\n+        rtx v = gen_reg_rtx (<MODE>mode);\n+\n+\tif (riscv_vector::simm32_p (operands[2]))\n+\t  operands[2] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n+\t\tforce_reg (Pmode, operands[2]));\n+\telse\n+\t  {\n+\t    if (CONST_INT_P (operands[2]))\n+\t      operands[2] = force_reg (<VEL>mode, operands[2]);\n+\n+\t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n+\t\t\t\t\t    v, operands[2], operands[3],\n+\t\t\t\t\t    <VM>mode);\n+\t    emit_insn (gen_pred_madc<mode>_overflow (operands[0], operands[1],\n+\t\t\t\t\t\t     v, operands[3], operands[4]));\n+\t    DONE;\n+\t  }\n+      }\n+    else\n+      operands[2] = force_reg (<VEL>mode, operands[2]);\n+  })\n+\n+(define_insn \"*pred_madc<mode>_overflow_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"         \"=&vr\")\n+\t(unspec:<VM>\n+\t   [(plus:VI_D\n+\t     (vec_duplicate:VI_D\n+\t       (match_operand:<VEL> 2 \"register_operand\" \"   r\"))\n+\t     (match_operand:VI_D 1 \"register_operand\"    \"  vr\"))\n+\t    (unspec:<VM>\n+\t      [(match_operand 3 \"vector_length_operand\"  \"  rK\")\n+\t       (match_operand 4 \"const_int_operand\"      \"   i\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_OVERFLOW))]\n+  \"TARGET_VECTOR\"\n+  \"vmadc.vx\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"3\")\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[4])\"))])\n+\n+(define_insn \"*pred_madc<mode>_overflow_extended_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"             \"=&vr\")\n+\t(unspec:<VM>\n+\t   [(plus:VI_D\n+\t     (vec_duplicate:VI_D\n+\t       (sign_extend:<VEL>\n+\t         (match_operand:<VSUBEL> 2 \"register_operand\" \"   r\")))\n+\t     (match_operand:VI_D 1 \"register_operand\"         \"  vr\"))\n+\t    (unspec:<VM>\n+\t      [(match_operand 3 \"vector_length_operand\"       \"  rK\")\n+\t       (match_operand 4 \"const_int_operand\"           \"   i\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_OVERFLOW))]\n+  \"TARGET_VECTOR\"\n+  \"vmadc.vx\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"3\")\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[4])\"))])\n+\n+(define_expand \"@pred_msbc<mode>_overflow_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\")\n+\t(unspec:<VM>\n+\t   [(minus:VI_D\n+\t     (vec_duplicate:VI_D\n+\t       (match_operand:<VEL> 2 \"reg_or_int_operand\"))\n+\t     (match_operand:VI_D 1 \"register_operand\"))\n+\t    (unspec:<VM>\n+\t      [(match_operand 3 \"vector_length_operand\")\n+\t       (match_operand 4 \"const_int_operand\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_OVERFLOW))]\n+  \"TARGET_VECTOR\"\n+  {\n+    if (!TARGET_64BIT)\n+      {\n+        rtx v = gen_reg_rtx (<MODE>mode);\n+\n+\tif (riscv_vector::simm32_p (operands[2]))\n+\t  {\n+\t    if (!rtx_equal_p (operands[2], const0_rtx))\n+\t      operands[2] = force_reg (Pmode, operands[2]);\n+\t    operands[2] = gen_rtx_SIGN_EXTEND (<VEL>mode, operands[2]);\n+\t  }\n+\telse\n+\t  {\n+\t    if (CONST_INT_P (operands[2]))\n+\t      operands[2] = force_reg (<VEL>mode, operands[2]);\n+\n+\t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n+\t\t\t\t\t    v, operands[2], operands[3],\n+\t\t\t\t\t    <VM>mode);\n+\t    emit_insn (gen_pred_msbc<mode>_overflow (operands[0], operands[1],\n+\t\t\t\t\t\t     v, operands[3], operands[4]));\n+\t    DONE;\n+\t  }\n+      }\n+    else\n+      {\n+\tif (!rtx_equal_p (operands[2], const0_rtx))\n+\t  operands[2] = force_reg (<VEL>mode, operands[2]);\n+      }\n+  })\n+\n+(define_insn \"*pred_msbc<mode>_overflow_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"         \"=&vr\")\n+\t(unspec:<VM>\n+\t   [(minus:VI_D\n+\t     (vec_duplicate:VI_D\n+\t       (match_operand:<VEL> 2 \"reg_or_0_operand\" \"  rJ\"))\n+\t     (match_operand:VI_D 1 \"register_operand\"    \"  vr\"))\n+\t    (unspec:<VM>\n+\t      [(match_operand 3 \"vector_length_operand\"  \"  rK\")\n+\t       (match_operand 4 \"const_int_operand\"      \"   i\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_OVERFLOW))]\n+  \"TARGET_VECTOR\"\n+  \"vmsbc.vx\\t%0,%1,%z2\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"3\")\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[4])\"))])\n+\n+(define_insn \"*pred_msbc<mode>_overflow_extended_scalar\"\n+  [(set (match_operand:<VM> 0 \"register_operand\"             \"=&vr\")\n+\t(unspec:<VM>\n+\t   [(minus:VI_D\n+\t     (vec_duplicate:VI_D\n+\t       (sign_extend:<VEL>\n+\t         (match_operand:<VSUBEL> 2 \"reg_or_0_operand\" \"  rJ\")))\n+\t     (match_operand:VI_D 1 \"register_operand\"         \"  vr\"))\n+\t    (unspec:<VM>\n+\t      [(match_operand 3 \"vector_length_operand\"       \"  rK\")\n+\t       (match_operand 4 \"const_int_operand\"           \"   i\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_OVERFLOW))]\n+  \"TARGET_VECTOR\"\n+  \"vmsbc.vx\\t%0,%1,%z2\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"3\")\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[4])\"))])\n+\n ;; -------------------------------------------------------------------------------\n ;; ---- Predicated integer unary operations\n ;; -------------------------------------------------------------------------------"}]}