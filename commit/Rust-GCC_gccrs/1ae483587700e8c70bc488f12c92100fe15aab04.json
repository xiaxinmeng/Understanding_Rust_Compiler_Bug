{"sha": "1ae483587700e8c70bc488f12c92100fe15aab04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFlNDgzNTg3NzAwZThjNzBiYzQ4OGYxMmM5MjEwMGZlMTVhYWIwNA==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2005-04-08T17:31:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-04-08T17:31:33Z"}, "message": "re PR libstdc++/20806 (basic_filebuf::xsgetn()  fails with text mode and DOS line endings and large buffers)\n\n2005-04-08  Danny Smith  <dannysmith@users.sourceforge.net>\n\t    Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/20806\n\t* config/os/mingw32/os_defines.h: Define\n\t_GLIBCXX_HAVE_DOS_BASED_FILESYSTEM.\n\t* config/os/newlib/os_defines.h: Likewise, for __CYGWIN__.\n\t* include/bits/fstream.tcc (basic_filebuf<>::showmanyc()):\n\tUse it.\n\t(basic_filebuf<>::xsgetn(_CharT*, streamsize)): Likewise.\n\nCo-Authored-By: Paolo Carlini <pcarlini@suse.de>\n\nFrom-SVN: r97842", "tree": {"sha": "de5ca130869afa5dc643f8e2b96756dafddaa6fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de5ca130869afa5dc643f8e2b96756dafddaa6fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ae483587700e8c70bc488f12c92100fe15aab04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ae483587700e8c70bc488f12c92100fe15aab04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ae483587700e8c70bc488f12c92100fe15aab04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ae483587700e8c70bc488f12c92100fe15aab04/comments", "author": null, "committer": null, "parents": [{"sha": "db77171de4ffad95cbdf68a50a8d113c73cb3353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db77171de4ffad95cbdf68a50a8d113c73cb3353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db77171de4ffad95cbdf68a50a8d113c73cb3353"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "e92b927fac3cabced668f4e62b11a409a16a6683", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ae483587700e8c70bc488f12c92100fe15aab04/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ae483587700e8c70bc488f12c92100fe15aab04/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1ae483587700e8c70bc488f12c92100fe15aab04", "patch": "@@ -1,3 +1,14 @@\n+2005-04-08  Danny Smith  <dannysmith@users.sourceforge.net>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n+\t    \t\t\n+\tPR libstdc++/20806\n+\t* config/os/mingw32/os_defines.h: Define\n+\t_GLIBCXX_HAVE_DOS_BASED_FILESYSTEM.\n+\t* config/os/newlib/os_defines.h: Likewise, for __CYGWIN__.\n+\t* include/bits/fstream.tcc (basic_filebuf<>::showmanyc()):\n+\tUse it.\n+\t(basic_filebuf<>::xsgetn(_CharT*, streamsize)): Likewise.\n+\n 2005-04-08  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* acconfig.h: Sort the bottom section."}, {"sha": "20088868a3985ffcdd333e29ba1752aa3adbf529", "filename": "libstdc++-v3/config/os/mingw32/os_defines.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ae483587700e8c70bc488f12c92100fe15aab04/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ae483587700e8c70bc488f12c92100fe15aab04/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fos_defines.h?ref=1ae483587700e8c70bc488f12c92100fe15aab04", "patch": "@@ -1,6 +1,6 @@\n // Specific definitions for generic platforms  -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -45,4 +45,7 @@\n #undef NOMINMAX\n #define NOMINMAX 1\n \n+// See libstdc++/20806.\n+#define _GLIBCXX_HAVE_DOS_BASED_FILESYSTEM 1\n+\n #endif"}, {"sha": "0b0a629795550c1173191f6c056cdd44f82bf39e", "filename": "libstdc++-v3/config/os/newlib/os_defines.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ae483587700e8c70bc488f12c92100fe15aab04/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ae483587700e8c70bc488f12c92100fe15aab04/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fos_defines.h?ref=1ae483587700e8c70bc488f12c92100fe15aab04", "patch": "@@ -1,6 +1,6 @@\n // Specific definitions for newlib  -*- C++ -*-\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,6 +35,9 @@\n \n #ifdef __CYGWIN__\n #define _GLIBCXX_GTHREAD_USE_WEAK 0\n+\n+// See libstdc++/20806.\n+#define _GLIBCXX_HAVE_DOS_BASED_FILESYSTEM 1\n #endif\n \n #endif"}, {"sha": "6915ea9b23c0effc29cde557ca6deb9cc7de2b84", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ae483587700e8c70bc488f12c92100fe15aab04/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ae483587700e8c70bc488f12c92100fe15aab04/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=1ae483587700e8c70bc488f12c92100fe15aab04", "patch": "@@ -171,7 +171,15 @@ namespace std\n \t  // For a stateful encoding (-1) the pending sequence might be just\n \t  // shift and unshift prefixes with no actual character.\n \t  __ret = this->egptr() - this->gptr();\n+\n+#if _GLIBCXX_HAVE_DOS_BASED_FILESYSTEM\n+\t  // About this workaround, see libstdc++/20806.\n+\t  const bool __testbinary = _M_mode & ios_base::binary;\n+\t  if (__check_facet(_M_codecvt).encoding() >= 0\n+\t      && __testbinary)\n+#else\n \t  if (__check_facet(_M_codecvt).encoding() >= 0)\n+#endif\n \t    __ret += _M_file.showmanyc() / _M_codecvt->max_length();\n \t}\n       return __ret;\n@@ -521,10 +529,17 @@ namespace std\n        // future: when __n > __buflen we read directly instead of using the\n        // buffer repeatedly.\n        const bool __testin = _M_mode & ios_base::in;\n-       const streamsize __buflen = _M_buf_size > 1 ? _M_buf_size - 1\n-\t                                                 : 1;\n+       const streamsize __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;\n+\n+#if _GLIBCXX_HAVE_DOS_BASED_FILESYSTEM\n+       // About this workaround, see libstdc++/20806.\n+       const bool __testbinary = _M_mode & ios_base::binary;\n+       if (__n > __buflen && __check_facet(_M_codecvt).always_noconv()\n+\t   && __testin && __testbinary && !_M_writing)\n+#else\n        if (__n > __buflen && __check_facet(_M_codecvt).always_noconv()\n \t   && __testin && !_M_writing)\n+#endif\n \t {\n \t   // First, copy the chars already present in the buffer.\n \t   const streamsize __avail = this->egptr() - this->gptr();"}]}