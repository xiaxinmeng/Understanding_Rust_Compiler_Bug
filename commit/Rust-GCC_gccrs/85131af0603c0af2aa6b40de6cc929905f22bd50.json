{"sha": "85131af0603c0af2aa6b40de6cc929905f22bd50", "node_id": "C_kwDOANBUbNoAKDg1MTMxYWYwNjAzYzBhZjJhYTZiNDBkZTZjYzkyOTkwNWYyMmJkNTA", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-30T15:07:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-30T22:25:04Z"}, "message": "c++: generic lambda and function ptr conv [PR105221]\n\nWe weren't properly considering the function pointer conversions in\ndeduction between FUNCTION_TYPE; we just hardcoded the\nUNIFY_ALLOW_MORE_CV_QUAL semantics, which are backwards when deducing for a\ntemplate conversion function like the one in a generic lambda.  And when I\nstarted checking the ALLOW flags, I needed to make sure they stay set to\navoid breaking trailing13.C.\n\n\tPR c++/105221\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (unify) [FUNCTION_TYPE]: Handle function pointer\n\tconversions.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/noexcept-type27.C: New test.", "tree": {"sha": "b4a74b14b933f1008cd0cbfb0cf6f6f8dda2d2f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4a74b14b933f1008cd0cbfb0cf6f6f8dda2d2f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85131af0603c0af2aa6b40de6cc929905f22bd50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85131af0603c0af2aa6b40de6cc929905f22bd50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85131af0603c0af2aa6b40de6cc929905f22bd50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85131af0603c0af2aa6b40de6cc929905f22bd50/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83d2b1ccd17d394d546a38562815ef83daa05e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83d2b1ccd17d394d546a38562815ef83daa05e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83d2b1ccd17d394d546a38562815ef83daa05e85"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "dd7f0db96580988bdb8aa3c6f683237f0658717c", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85131af0603c0af2aa6b40de6cc929905f22bd50/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85131af0603c0af2aa6b40de6cc929905f22bd50/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=85131af0603c0af2aa6b40de6cc929905f22bd50", "patch": "@@ -24472,9 +24472,12 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n     return unify_cv_qual_mismatch (explain_p, parm, arg);\n \n   if (!(strict & UNIFY_ALLOW_OUTER_LEVEL)\n-      && TYPE_P (parm) && !CP_TYPE_CONST_P (parm))\n+      && TYPE_P (parm) && !CP_TYPE_CONST_P (parm)\n+      && !FUNC_OR_METHOD_TYPE_P (parm))\n     strict &= ~UNIFY_ALLOW_MORE_CV_QUAL;\n-  strict &= ~UNIFY_ALLOW_OUTER_LEVEL;\n+  /* PMFs recurse at the same level, so don't strip this yet.  */\n+  if (!TYPE_PTRMEMFUNC_P (parm))\n+    strict &= ~UNIFY_ALLOW_OUTER_LEVEL;\n   strict &= ~UNIFY_ALLOW_DERIVED;\n   strict &= ~UNIFY_ALLOW_OUTER_MORE_CV_QUAL;\n   strict &= ~UNIFY_ALLOW_OUTER_LESS_CV_QUAL;\n@@ -25022,7 +25025,31 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t      RECUR_AND_CHECK_FAILURE (tparms, targs, TREE_PURPOSE (pspec),\n \t\t\t\t       TREE_PURPOSE (aspec),\n \t\t\t\t       UNIFY_ALLOW_NONE, explain_p);\n-\t    else if (nothrow_spec_p (pspec) && !nothrow_spec_p (aspec))\n+\t    else\n+\t      {\n+\t\tbool pn = nothrow_spec_p (pspec);\n+\t\tbool an = nothrow_spec_p (aspec);\n+\t\t/* Here \"less cv-qual\" means the deduced arg (i.e. parm) has\n+\t\t   /more/ noexcept, since function pointer conversions are the\n+\t\t   reverse of qualification conversions.  */\n+\t\tif (an == pn\n+\t\t    || (an < pn && (strict & UNIFY_ALLOW_LESS_CV_QUAL))\n+\t\t    || (an > pn && (strict & UNIFY_ALLOW_MORE_CV_QUAL)))\n+\t\t  /* OK.  */;\n+\t\telse\n+\t\t  return unify_type_mismatch (explain_p, parm, arg);\n+\t      }\n+\t  }\n+\tif (flag_tm)\n+\t  {\n+\t    /* As for noexcept.  */\n+\t    bool pn = tx_safe_fn_type_p (parm);\n+\t    bool an = tx_safe_fn_type_p (arg);\n+\t    if (an == pn\n+\t\t|| (an < pn && (strict & UNIFY_ALLOW_LESS_CV_QUAL))\n+\t\t|| (an > pn && (strict & UNIFY_ALLOW_MORE_CV_QUAL)))\n+\t      /* OK.  */;\n+\t    else\n \t      return unify_type_mismatch (explain_p, parm, arg);\n \t  }\n "}, {"sha": "a691f695389e099698f7b8e6b050f86c82962492", "filename": "gcc/testsuite/g++.dg/cpp1z/noexcept-type27.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85131af0603c0af2aa6b40de6cc929905f22bd50/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85131af0603c0af2aa6b40de6cc929905f22bd50/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type27.C?ref=85131af0603c0af2aa6b40de6cc929905f22bd50", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/105221\n+// { dg-do compile { target c++14 } }\n+\n+void (*p)(int) = [](auto) noexcept {};\n+\n+int main() {\n+  true ? [](auto) noexcept {} : [](int) {};\n+}"}]}