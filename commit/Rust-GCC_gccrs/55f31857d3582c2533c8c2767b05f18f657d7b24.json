{"sha": "55f31857d3582c2533c8c2767b05f18f657d7b24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVmMzE4NTdkMzU4MmMyNTMzYzhjMjc2N2IwNWYxOGY2NTdkN2IyNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-04-08T09:03:42Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-04-08T09:03:42Z"}, "message": "re PR ada/60411 (Ada bootstrap failure on ARM)\n\n\tPR ada/60411\n\t* sigtramp-armdroid.c: New file.\n\nFrom-SVN: r209211", "tree": {"sha": "ea38a5a77827d401f21df9bb2ede25668d6c295e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea38a5a77827d401f21df9bb2ede25668d6c295e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55f31857d3582c2533c8c2767b05f18f657d7b24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55f31857d3582c2533c8c2767b05f18f657d7b24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55f31857d3582c2533c8c2767b05f18f657d7b24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55f31857d3582c2533c8c2767b05f18f657d7b24/comments", "author": null, "committer": null, "parents": [{"sha": "f3d6c7cb7610dae3b2dcc8d1f3533bc450eebb25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d6c7cb7610dae3b2dcc8d1f3533bc450eebb25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d6c7cb7610dae3b2dcc8d1f3533bc450eebb25"}], "stats": {"total": 165, "additions": 164, "deletions": 1}, "files": [{"sha": "3353b89867a684539396d99f1be7085713fbc36c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31857d3582c2533c8c2767b05f18f657d7b24/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31857d3582c2533c8c2767b05f18f657d7b24/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=55f31857d3582c2533c8c2767b05f18f657d7b24", "patch": "@@ -4,6 +4,7 @@\n \t* gcc-interface/Makefile.in (arm% linux-android): Switch to EHABI.\n \t* s-linux-android.ads: New file.\n \t* s-intman-android.adb: Likewise.\n+\t* sigtramp-armdroid.c: Likewise.\n \n 2014-04-07  Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "5741bd9b841bf577d92e0e5e574c16e158a19f06", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31857d3582c2533c8c2767b05f18f657d7b24/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31857d3582c2533c8c2767b05f18f657d7b24/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=55f31857d3582c2533c8c2767b05f18f657d7b24", "patch": "@@ -1064,7 +1064,7 @@ ifeq ($(strip $(filter-out arm% linux-androideabi,$(target_cpu) $(target_os))),)\n \n   GNATRTL_SOCKETS_OBJS =\n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o\n-  EXTRA_LIBGNAT_OBJS+=raise-gcc.o\n+  EXTRA_LIBGNAT_OBJS+=raise-gcc.o sigtramp-armdroid.o\n   EXTRA_GNATRTL_NONTASKING_OBJS+=g-cppexc.o s-excmac.o\n   EH_MECHANISM=-arm\n   THREADSLIB =\n@@ -3068,6 +3068,7 @@ mkdir.o   : mkdir.c\n socket.o  : socket.c gsocket.h\n sysdep.o  : sysdep.c\n raise.o   : raise.c raise.h\n+sigtramp-armdroid.o : sigtramp-armdroid.c sigtramp.h\n sigtramp-armvxw.o : sigtramp-armvxw.c sigtramp.h\n sigtramp-ppcvxw.o : sigtramp-ppcvxw.c sigtramp.h\n terminals.o : terminals.c"}, {"sha": "fb522dfcd994ab5af7055c11d5a9d7d0b11ed283", "filename": "gcc/ada/sigtramp-armdroid.c", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31857d3582c2533c8c2767b05f18f657d7b24/gcc%2Fada%2Fsigtramp-armdroid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31857d3582c2533c8c2767b05f18f657d7b24/gcc%2Fada%2Fsigtramp-armdroid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-armdroid.c?ref=55f31857d3582c2533c8c2767b05f18f657d7b24", "patch": "@@ -0,0 +1,161 @@\n+/****************************************************************************\n+ *                                                                          *\n+ *                         GNAT COMPILER COMPONENTS                         *\n+ *                                                                          *\n+ *                             S I G T R A M P                              *\n+ *                                                                          *\n+ *                         Asm Implementation File                          *\n+ *                                                                          *\n+ *           Copyright (C) 2014, Free Software Foundation, Inc.             *\n+ *                                                                          *\n+ * GNAT is free software;  you can  redistribute it  and/or modify it under *\n+ * terms of the  GNU General Public License as published  by the Free Soft- *\n+ * ware  Foundation;  either version 3,  or (at your option) any later ver- *\n+ * sion.  GNAT is distributed in the hope that it will be useful, but WITH- *\n+ * OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY *\n+ * or FITNESS FOR A PARTICULAR PURPOSE.                                     *\n+ *                                                                          *\n+ * As a special exception under Section 7 of GPL version 3, you are granted *\n+ * additional permissions described in the GCC Runtime Library Exception,   *\n+ * version 3.1, as published by the Free Software Foundation.               *\n+ *                                                                          *\n+ * In particular,  you can freely  distribute your programs  built with the *\n+ * GNAT Pro compiler, including any required library run-time units,  using *\n+ * any licensing terms  of your choosing.  See the AdaCore Software License *\n+ * for full details.                                                        *\n+ *                                                                          *\n+ * GNAT was originally developed  by the GNAT team at  New York University. *\n+ * Extensive contributions were provided by Ada Core Technologies Inc.      *\n+ *                                                                          *\n+ ****************************************************************************/\n+\n+/******************************************************\n+ * ARM-Android version of the __gnat_sigtramp service *\n+ ******************************************************/\n+\n+#include \"sigtramp.h\"\n+/* See sigtramp.h for a general explanation of functionality.  */\n+\n+/* ----------------------\n+   -- General comments --\n+   ----------------------\n+\n+   Stubs are generated from toplevel asms,\n+   The general idea is to establish CFA as the sigcontext\n+   and state where to find the registers as offsets from there.\n+\n+   We support stubs for VxWorks and Android, providing unwind info for\n+   common registers. We might need variants with support for floating\n+   point or altivec registers as well at some point.\n+\n+   For Android it would be simpler to write this in Asm since there's only\n+   one variant, but to keep it looking like the VxWorks stubs,\n+   C is the choice for our toplevel interface.\n+\n+   Note that the registers we \"restore\" here are those to which we have\n+   direct access through the system sigcontext structure, which includes\n+   only a partial set of the non-volatiles ABI-wise.  */\n+\n+/* -----------------------------------------\n+   -- Protypes for our internal asm stubs --\n+   -----------------------------------------\n+\n+   The registers are expected to be at SIGCONTEXT + 12 (reference the\n+   sicontext structure in asm/sigcontext.h which describes the first\n+   3 * 4byte fields.)  Even though our symbols will remain local, the\n+   prototype claims \"extern\" and not \"static\" to prevent compiler complaints\n+   about a symbol used but never defined.  */\n+\n+/* sigtramp stub providing unwind info for common registers.  */\n+\n+extern void __gnat_sigtramp_common\n+  (int signo, void *siginfo, void *sigcontext,\n+   __sigtramphandler_t * handler);\n+\n+void __gnat_sigtramp (int signo, void *si, void *sc,\n+                      __sigtramphandler_t * handler)\n+     __attribute__((optimize(2)));\n+\n+void __gnat_sigtramp (int signo, void *si, void *ucontext,\n+                      __sigtramphandler_t * handler)\n+{\n+  struct sigcontext *mcontext = &((ucontext_t *) ucontext)->uc_mcontext;\n+\n+  __gnat_sigtramp_common (signo, si, mcontext, handler);\n+}\n+\n+/* asm string construction helpers.  */\n+\n+#define STR(TEXT) #TEXT\n+/* stringify expanded TEXT, surrounding it with double quotes.  */\n+\n+#define S(E) STR(E)\n+/* stringify E, which will resolve as text but may contain macros\n+   still to be expanded.  */\n+\n+/* asm (TEXT) outputs <tab>TEXT. These facilitate the output of\n+   multiline contents:  */\n+#define TAB(S) \"\\t\" S\n+#define CR(S)  S \"\\n\"\n+\n+#undef TCR\n+#define TCR(S) TAB(CR(S))\n+\n+/* Trampoline body block\n+   ---------------------  */\n+\n+#define SIGTRAMP_BODY \\\n+CR(\"\") \\\n+TCR(\"# Allocate frame and also save r2 which is the argument register\") \\\n+TCR(\"# containing the sigcontext, so that we can restore it during\") \\\n+TCR(\"# unwinding and thereby load the rest of the desired context.\") \\\n+TCR(\"stmfd\tsp!, {r2, r3, lr}\") \\\n+TCR(\"# The unwinder undo's these operations in reverse order so starting\") \\\n+TCR(\"# from bottom, restore r2 from the current vsp location, move r2 into\") \\\n+TCR(\"# the vsp, add 12 bytes to get the start of the register save area\") \\\n+TCR(\"# then restore the 15 general purpose registers of the frame which\") \\\n+TCR(\"# raised the signal.\") \\\n+TCR(\".save {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15}\") \\\n+TCR(\".pad #12\") \\\n+TCR(\".movsp r2\") \\\n+TCR(\".save {r2}\") \\\n+TCR(\"# Call the real handler. The signo, siginfo and sigcontext\") \\\n+TCR(\"# arguments are the same as those we received in r0, r1 and r2.\") \\\n+TCR(\"blx\tr3\") \\\n+TCR(\"# Restore our callee-saved items, release our frame and return\") \\\n+TCR(\"# (should never get here!).\") \\\n+TCR(\"ldmfd\tsp, {r2, r3, pc}\")\n+\n+/* Symbol definition block\n+   -----------------------  */\n+\n+#define SIGTRAMP_START(SYM) \\\n+CR(\"# \" S(SYM) \" unwind trampoline\") \\\n+TCR(\".type \" S(SYM) \", %function\") \\\n+CR(\"\") \\\n+CR(S(SYM) \":\") \\\n+TCR(\".fnstart\")\n+\n+/* Symbol termination block\n+   ------------------------  */\n+\n+#define SIGTRAMP_END(SYM) \\\n+CR(\".fnend\") \\\n+TCR(\".size \" S(SYM) \", .-\" S(SYM))\n+\n+/*----------------------------\n+  -- And now, the real code --\n+  ---------------------------- */\n+\n+/* Text section start.  The compiler isn't aware of that switch.  */\n+\n+asm (\".text\\n\"\n+     TCR(\".align 2\"));\n+\n+/* sigtramp stub for common registers.  */\n+\n+#define TRAMP_COMMON __gnat_sigtramp_common\n+\n+asm (SIGTRAMP_START(TRAMP_COMMON));\n+asm (SIGTRAMP_BODY);\n+asm (SIGTRAMP_END(TRAMP_COMMON));"}]}