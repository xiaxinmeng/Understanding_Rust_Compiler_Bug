{"sha": "6ab1ab1480bf6090f1da481e6cb3da59e46f31bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFiMWFiMTQ4MGJmNjA5MGYxZGE0ODFlNmNiM2RhNTllNDZmMzFiZg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-05-03T11:14:15Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-05-03T11:14:15Z"}, "message": "tree-switch-conversion.c (gen_inbound_check): Free post-dominance information as early as possible.\n\n\t* tree-switch-conversion.c (gen_inbound_check): Free post-dominance\n\tinformation as early as possible.  Update dominance info instead of\n\tdiscarding it.\n\nFrom-SVN: r187093", "tree": {"sha": "767acae9ce911d995b67441e042cc3ddac67a02f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/767acae9ce911d995b67441e042cc3ddac67a02f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ab1ab1480bf6090f1da481e6cb3da59e46f31bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab1ab1480bf6090f1da481e6cb3da59e46f31bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ab1ab1480bf6090f1da481e6cb3da59e46f31bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab1ab1480bf6090f1da481e6cb3da59e46f31bf/comments", "author": null, "committer": null, "parents": [{"sha": "1937283892c2fb55b9c22f4d91b3185a99ed335a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1937283892c2fb55b9c22f4d91b3185a99ed335a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1937283892c2fb55b9c22f4d91b3185a99ed335a"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "60ffb7d9cf4d2a8d8d3896a37f72193f16c118cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab1ab1480bf6090f1da481e6cb3da59e46f31bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab1ab1480bf6090f1da481e6cb3da59e46f31bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ab1ab1480bf6090f1da481e6cb3da59e46f31bf", "patch": "@@ -1,3 +1,9 @@\n+2012-05-03  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* tree-switch-conversion.c (gen_inbound_check): Free post-dominance\n+\tinformation as early as possible.  Update dominance info instead of\n+\tdiscarding it.\n+\n 2012-05-03  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-pre.c (debug_bitmap_sets_for): New function."}, {"sha": "4f3d1d30f206579bde4d2e3ec34b32a8383276fc", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab1ab1480bf6090f1da481e6cb3da59e46f31bf/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab1ab1480bf6090f1da481e6cb3da59e46f31bf/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=6ab1ab1480bf6090f1da481e6cb3da59e46f31bf", "patch": "@@ -800,6 +800,14 @@ gen_inbound_check (gimple swtch, struct switch_conv_info *info)\n   location_t loc = gimple_location (swtch);\n \n   gcc_assert (info->default_values);\n+\n+  /* Make no effort to update the post-dominator tree.  It is actually not\n+     that hard for the transformations we have performed, but it is not\n+     supported by iterate_fix_dominators.\n+     Freeing post-dominance info is dome early to avoid pointless work in\n+     create_basic_block, which is called when we split SWITCH_BB.  */\n+  free_dominance_info (CDI_POST_DOMINATORS);\n+\n   bb0 = gimple_bb (swtch);\n \n   tidx = gimple_assign_lhs (info->arr_ref_first);\n@@ -866,13 +874,32 @@ gen_inbound_check (gimple swtch, struct switch_conv_info *info)\n   bb2->frequency = EDGE_FREQUENCY (e02);\n   bbf->frequency = EDGE_FREQUENCY (e1f) + EDGE_FREQUENCY (e2f);\n \n-  prune_bbs (bbd, info->final_bb); /* To keep calc_dfs_tree() in dominance.c\n-\t\t\t\t     happy.  */\n+  /* Tidy blocks that have become unreachable.  */\n+  prune_bbs (bbd, info->final_bb);\n \n+  /* Fixup the PHI nodes in bbF.  */\n   fix_phi_nodes (e1f, e2f, bbf, info);\n \n-  free_dominance_info (CDI_DOMINATORS);\n-  free_dominance_info (CDI_POST_DOMINATORS);\n+  /* Fix the dominator tree, if it is available.  */\n+  if (dom_info_available_p (CDI_DOMINATORS))\n+    {\n+      VEC (basic_block, heap) *bbs_to_fix_dom;\n+\n+      set_immediate_dominator (CDI_DOMINATORS, bb1, bb0);\n+      set_immediate_dominator (CDI_DOMINATORS, bb2, bb0);\n+      if (! get_immediate_dominator(CDI_DOMINATORS, bbf))\n+\t/* If bbD was the immediate dominator ...  */\n+\tset_immediate_dominator (CDI_DOMINATORS, bbf, bb0);\n+\n+      bbs_to_fix_dom = VEC_alloc (basic_block, heap, 4);\n+      VEC_quick_push (basic_block, bbs_to_fix_dom, bb0);\n+      VEC_quick_push (basic_block, bbs_to_fix_dom, bb1);\n+      VEC_quick_push (basic_block, bbs_to_fix_dom, bb2);\n+      VEC_quick_push (basic_block, bbs_to_fix_dom, bbf);\n+\n+      iterate_fix_dominators (CDI_DOMINATORS, bbs_to_fix_dom, true);\n+      VEC_free (basic_block, heap, bbs_to_fix_dom);\n+    }\n }\n \n /* The following function is invoked on every switch statement (the current one"}]}