{"sha": "374929b22f9ef8a02a0d2d1be531efc0e9949ee7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc0OTI5YjIyZjllZjhhMDJhMGQyZDFiZTUzMWVmYzBlOTk0OWVlNw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-05-15T21:12:53Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-05-15T21:12:53Z"}, "message": "trans-expr.c (gfc_conv_concat_op): Take care of nondefault character kinds.\n\n\t* trans-expr.c (gfc_conv_concat_op): Take care of nondefault\n\tcharacter kinds.\n\t(gfc_build_compare_string): Add kind argument and use it.\n\t(gfc_conv_statement_function): Fix indentation.\n\t* gfortran.h (gfc_character_info): New structure.\n\t(gfc_character_kinds): New array.\n\t* trans-types.c (gfc_character_kinds, gfc_character_types,\n\tgfc_pcharacter_types): New array.\n\t(gfc_init_kinds): Fill character kinds array.\n\t(validate_character): Take care of nondefault character kinds.\n\t(gfc_build_uint_type): New function.\n\t(gfc_init_types): Take care of nondefault character kinds.\n\t(gfc_get_char_type, gfc_get_pchar_type): New functions.\n\t(gfc_get_character_type_len): Use gfc_get_char_type.\n\t* trans.h (gfc_build_compare_string): Adjust prototype.\n\t(gfor_fndecl_compare_string_char4, gfor_fndecl_concat_string_char4,\n\tgfor_fndecl_string_len_trim_char4, gfor_fndecl_string_index_char4,\n\tgfor_fndecl_string_scan_char4, gfor_fndecl_string_verify_char4,\n\tgfor_fndecl_string_trim_char4, gfor_fndecl_string_minmax_char4,\n\tgfor_fndecl_adjustl_char4, gfor_fndecl_adjustr_char4): New\n\tprototypes.\n\t* trans-types.h (gfc_get_char_type, gfc_get_pchar_type): New\n\tprototypes.\n\t* trans-decl.c (gfor_fndecl_compare_string_char4,\n\tgfor_fndecl_string_len_trim_char4, gfor_fndecl_string_index_char4,\n\tgfor_fndecl_string_scan_char4, gfor_fndecl_string_verify_char4,\n\tgfor_fndecl_string_trim_char4, gfor_fndecl_string_minmax_char4,\n\tgfor_fndecl_adjustl_char4, gfor_fndecl_adjustr_char4,\n\tgfor_fndecl_concat_string_char4): New function decls.\n\t(gfc_build_intrinsic_function_decls): Define new *_char4 function\n\tdecls.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_minmax_char,\n\tgfc_conv_intrinsic_len_trim, gfc_conv_intrinsic_ichar,\n\tgfc_conv_intrinsic_strcmp, gfc_conv_intrinsic_trim,\n\tgfc_conv_intrinsic_function): Deal with nondefault character kinds.\n\nFrom-SVN: r135397", "tree": {"sha": "0711a0630b3b197d42e81a4da70d30a9f18bbdb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0711a0630b3b197d42e81a4da70d30a9f18bbdb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/374929b22f9ef8a02a0d2d1be531efc0e9949ee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374929b22f9ef8a02a0d2d1be531efc0e9949ee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/374929b22f9ef8a02a0d2d1be531efc0e9949ee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374929b22f9ef8a02a0d2d1be531efc0e9949ee7/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "470a4c97a956621f2ee37e4df6d9d9d3e15555d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/470a4c97a956621f2ee37e4df6d9d9d3e15555d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/470a4c97a956621f2ee37e4df6d9d9d3e15555d7"}], "stats": {"total": 468, "additions": 376, "deletions": 92}, "files": [{"sha": "fb05a79faaa016c8b0282ddbaf1539399c8127a9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374929b22f9ef8a02a0d2d1be531efc0e9949ee7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374929b22f9ef8a02a0d2d1be531efc0e9949ee7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=374929b22f9ef8a02a0d2d1be531efc0e9949ee7", "patch": "@@ -1,3 +1,41 @@\n+2008-05-15  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* trans-expr.c (gfc_conv_concat_op): Take care of nondefault\n+\tcharacter kinds.\n+\t(gfc_build_compare_string): Add kind argument and use it.\n+\t(gfc_conv_statement_function): Fix indentation.\n+\t* gfortran.h (gfc_character_info): New structure.\n+\t(gfc_character_kinds): New array.\n+\t* trans-types.c (gfc_character_kinds, gfc_character_types,\n+\tgfc_pcharacter_types): New array.\n+\t(gfc_init_kinds): Fill character kinds array.\n+\t(validate_character): Take care of nondefault character kinds.\n+\t(gfc_build_uint_type): New function.\n+\t(gfc_init_types): Take care of nondefault character kinds.\n+\t(gfc_get_char_type, gfc_get_pchar_type): New functions.\n+\t(gfc_get_character_type_len): Use gfc_get_char_type.\n+\t* trans.h (gfc_build_compare_string): Adjust prototype.\n+\t(gfor_fndecl_compare_string_char4, gfor_fndecl_concat_string_char4,\n+\tgfor_fndecl_string_len_trim_char4, gfor_fndecl_string_index_char4,\n+\tgfor_fndecl_string_scan_char4, gfor_fndecl_string_verify_char4,\n+\tgfor_fndecl_string_trim_char4, gfor_fndecl_string_minmax_char4,\n+\tgfor_fndecl_adjustl_char4, gfor_fndecl_adjustr_char4): New\n+\tprototypes.\n+\t* trans-types.h (gfc_get_char_type, gfc_get_pchar_type): New\n+\tprototypes.\n+\t* trans-decl.c (gfor_fndecl_compare_string_char4,\n+\tgfor_fndecl_string_len_trim_char4, gfor_fndecl_string_index_char4,\n+\tgfor_fndecl_string_scan_char4, gfor_fndecl_string_verify_char4,\n+\tgfor_fndecl_string_trim_char4, gfor_fndecl_string_minmax_char4,\n+\tgfor_fndecl_adjustl_char4, gfor_fndecl_adjustr_char4,\n+\tgfor_fndecl_concat_string_char4): New function decls.\n+\t(gfc_build_intrinsic_function_decls): Define new *_char4 function\n+\tdecls.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_minmax_char,\n+\tgfc_conv_intrinsic_len_trim, gfc_conv_intrinsic_ichar,\n+\tgfc_conv_intrinsic_strcmp, gfc_conv_intrinsic_trim,\n+\tgfc_conv_intrinsic_function): Deal with nondefault character kinds.\n+\n 2008-05-15  Sa Liu  <saliu@de.ibm.com>\n \n \t* iso-c-binding.def: Add standard parameter to macro NAMED_INTCST."}, {"sha": "bf80847391e1776f967668a0502cf56bf3a20206", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374929b22f9ef8a02a0d2d1be531efc0e9949ee7/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374929b22f9ef8a02a0d2d1be531efc0e9949ee7/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=374929b22f9ef8a02a0d2d1be531efc0e9949ee7", "patch": "@@ -1567,6 +1567,15 @@ gfc_real_info;\n \n extern gfc_real_info gfc_real_kinds[];\n \n+typedef struct\n+{\n+  int kind, bit_size;\n+  const char *name;\n+}\n+gfc_character_info;\n+\n+extern gfc_character_info gfc_character_kinds[];\n+\n \n /* Equivalence structures.  Equivalent lvalues are linked along the\n    *eq pointer, equivalence sets are strung along the *next node.  */"}, {"sha": "49eb2aa8b41f5a4bac47c06a2259de71c6400a58", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 123, "deletions": 46, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374929b22f9ef8a02a0d2d1be531efc0e9949ee7/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374929b22f9ef8a02a0d2d1be531efc0e9949ee7/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=374929b22f9ef8a02a0d2d1be531efc0e9949ee7", "patch": "@@ -116,6 +116,16 @@ tree gfor_fndecl_string_trim;\n tree gfor_fndecl_string_minmax;\n tree gfor_fndecl_adjustl;\n tree gfor_fndecl_adjustr;\n+tree gfor_fndecl_compare_string_char4;\n+tree gfor_fndecl_concat_string_char4;\n+tree gfor_fndecl_string_len_trim_char4;\n+tree gfor_fndecl_string_index_char4;\n+tree gfor_fndecl_string_scan_char4;\n+tree gfor_fndecl_string_verify_char4;\n+tree gfor_fndecl_string_trim_char4;\n+tree gfor_fndecl_string_minmax_char4;\n+tree gfor_fndecl_adjustl_char4;\n+tree gfor_fndecl_adjustr_char4;\n \n \n /* Other misc. runtime library functions.  */\n@@ -2007,64 +2017,145 @@ gfc_build_intrinsic_function_decls (void)\n   tree gfc_int8_type_node = gfc_get_int_type (8);\n   tree gfc_int16_type_node = gfc_get_int_type (16);\n   tree gfc_logical4_type_node = gfc_get_logical_type (4);\n+  tree pchar1_type_node = gfc_get_pchar_type (1);\n+  tree pchar4_type_node = gfc_get_pchar_type (4);\n \n   /* String functions.  */\n   gfor_fndecl_compare_string =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"compare_string\")),\n \t\t\t\t     integer_type_node, 4,\n-\t\t\t\t     gfc_charlen_type_node, pchar_type_node,\n-\t\t\t\t     gfc_charlen_type_node, pchar_type_node);\n+\t\t\t\t     gfc_charlen_type_node, pchar1_type_node,\n+\t\t\t\t     gfc_charlen_type_node, pchar1_type_node);\n \n   gfor_fndecl_concat_string =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"concat_string\")),\n-\t\t\t\t     void_type_node,\n-\t\t\t\t     6,\n-\t\t\t\t     gfc_charlen_type_node, pchar_type_node,\n-\t\t\t\t     gfc_charlen_type_node, pchar_type_node,\n-\t\t\t\t     gfc_charlen_type_node, pchar_type_node);\n+\t\t\t\t     void_type_node, 6,\n+\t\t\t\t     gfc_charlen_type_node, pchar1_type_node,\n+\t\t\t\t     gfc_charlen_type_node, pchar1_type_node,\n+\t\t\t\t     gfc_charlen_type_node, pchar1_type_node);\n \n   gfor_fndecl_string_len_trim =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"string_len_trim\")),\n-\t\t\t\t     gfc_int4_type_node,\n-\t\t\t\t     2, gfc_charlen_type_node,\n-\t\t\t\t     pchar_type_node);\n+\t\t\t\t     gfc_int4_type_node, 2,\n+\t\t\t\t     gfc_charlen_type_node, pchar1_type_node);\n \n   gfor_fndecl_string_index =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"string_index\")),\n-\t\t\t\t     gfc_int4_type_node,\n-\t\t\t\t     5, gfc_charlen_type_node, pchar_type_node,\n-\t\t\t\t     gfc_charlen_type_node, pchar_type_node,\n-                                     gfc_logical4_type_node);\n+\t\t\t\t     gfc_int4_type_node, 5,\n+\t\t\t\t     gfc_charlen_type_node, pchar1_type_node,\n+\t\t\t\t     gfc_charlen_type_node, pchar1_type_node,\n+\t\t\t\t     gfc_logical4_type_node);\n \n   gfor_fndecl_string_scan =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"string_scan\")),\n-                                     gfc_int4_type_node,\n-                                     5, gfc_charlen_type_node, pchar_type_node,\n-                                     gfc_charlen_type_node, pchar_type_node,\n-                                     gfc_logical4_type_node);\n+\t\t\t\t     gfc_int4_type_node, 5,\n+\t\t\t\t     gfc_charlen_type_node, pchar1_type_node,\n+\t\t\t\t     gfc_charlen_type_node, pchar1_type_node,\n+\t\t\t\t     gfc_logical4_type_node);\n \n   gfor_fndecl_string_verify =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"string_verify\")),\n-                                     gfc_int4_type_node,\n-                                     5, gfc_charlen_type_node, pchar_type_node,\n-                                     gfc_charlen_type_node, pchar_type_node,\n-                                     gfc_logical4_type_node);\n+\t\t\t\t     gfc_int4_type_node, 5,\n+\t\t\t\t     gfc_charlen_type_node, pchar1_type_node,\n+\t\t\t\t     gfc_charlen_type_node, pchar1_type_node,\n+\t\t\t\t     gfc_logical4_type_node);\n \n   gfor_fndecl_string_trim =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"string_trim\")),\n-                                     void_type_node,\n-                                     4,\n-                                     build_pointer_type (gfc_charlen_type_node),\n-                                     ppvoid_type_node,\n-                                     gfc_charlen_type_node,\n-                                     pchar_type_node);\n+\t\t\t\t     void_type_node, 4,\n+\t\t\t\t     build_pointer_type (gfc_charlen_type_node),\n+\t\t\t\t     build_pointer_type (pchar1_type_node),\n+\t\t\t\t     gfc_charlen_type_node, pchar1_type_node);\n \n   gfor_fndecl_string_minmax = \n     gfc_build_library_function_decl (get_identifier (PREFIX(\"string_minmax\")),\n-                                     void_type_node, -4,\n-                                     build_pointer_type (gfc_charlen_type_node),\n-                                     ppvoid_type_node, integer_type_node,\n-                                     integer_type_node);\n+\t\t\t\t     void_type_node, -4,\n+\t\t\t\t     build_pointer_type (gfc_charlen_type_node),\n+\t\t\t\t     build_pointer_type (pchar1_type_node),\n+\t\t\t\t     integer_type_node, integer_type_node);\n+\n+  gfor_fndecl_adjustl =\n+    gfc_build_library_function_decl (get_identifier (PREFIX(\"adjustl\")),\n+\t\t\t\t     void_type_node, 3, pchar1_type_node,\n+\t\t\t\t     gfc_charlen_type_node, pchar1_type_node);\n+\n+  gfor_fndecl_adjustr =\n+    gfc_build_library_function_decl (get_identifier (PREFIX(\"adjustr\")),\n+\t\t\t\t     void_type_node, 3, pchar1_type_node,\n+\t\t\t\t     gfc_charlen_type_node, pchar1_type_node);\n+\n+  gfor_fndecl_compare_string_char4 =\n+    gfc_build_library_function_decl (get_identifier\n+\t\t\t\t\t(PREFIX(\"compare_string_char4\")),\n+\t\t\t\t     integer_type_node, 4,\n+\t\t\t\t     gfc_charlen_type_node, pchar4_type_node,\n+\t\t\t\t     gfc_charlen_type_node, pchar4_type_node);\n+\n+  gfor_fndecl_concat_string_char4 =\n+    gfc_build_library_function_decl (get_identifier\n+\t\t\t\t\t(PREFIX(\"concat_string_char4\")),\n+\t\t\t\t     void_type_node, 6,\n+\t\t\t\t     gfc_charlen_type_node, pchar4_type_node,\n+\t\t\t\t     gfc_charlen_type_node, pchar4_type_node,\n+\t\t\t\t     gfc_charlen_type_node, pchar4_type_node);\n+\n+  gfor_fndecl_string_len_trim_char4 =\n+    gfc_build_library_function_decl (get_identifier\n+\t\t\t\t\t(PREFIX(\"string_len_trim_char4\")),\n+\t\t\t\t     gfc_charlen_type_node, 2,\n+\t\t\t\t     gfc_charlen_type_node, pchar4_type_node);\n+\n+  gfor_fndecl_string_index_char4 =\n+    gfc_build_library_function_decl (get_identifier\n+\t\t\t\t\t(PREFIX(\"string_index_char4\")),\n+\t\t\t\t     gfc_charlen_type_node, 5,\n+\t\t\t\t     gfc_charlen_type_node, pchar4_type_node,\n+\t\t\t\t     gfc_charlen_type_node, pchar4_type_node,\n+\t\t\t\t     gfc_logical4_type_node);\n+\n+  gfor_fndecl_string_scan_char4 =\n+    gfc_build_library_function_decl (get_identifier\n+\t\t\t\t\t(PREFIX(\"string_scan_char4\")),\n+\t\t\t\t     gfc_charlen_type_node, 5,\n+\t\t\t\t     gfc_charlen_type_node, pchar4_type_node,\n+\t\t\t\t     gfc_charlen_type_node, pchar4_type_node,\n+\t\t\t\t     gfc_logical4_type_node);\n+\n+  gfor_fndecl_string_verify_char4 =\n+    gfc_build_library_function_decl (get_identifier\n+\t\t\t\t\t(PREFIX(\"string_verify_char4\")),\n+\t\t\t\t     gfc_charlen_type_node, 5,\n+\t\t\t\t     gfc_charlen_type_node, pchar4_type_node,\n+\t\t\t\t     gfc_charlen_type_node, pchar4_type_node,\n+\t\t\t\t     gfc_logical4_type_node);\n+\n+  gfor_fndecl_string_trim_char4 =\n+    gfc_build_library_function_decl (get_identifier\n+\t\t\t\t\t(PREFIX(\"string_trim_char4\")),\n+\t\t\t\t     void_type_node, 4,\n+\t\t\t\t     build_pointer_type (gfc_charlen_type_node),\n+\t\t\t\t     build_pointer_type (pchar4_type_node),\n+\t\t\t\t     gfc_charlen_type_node, pchar4_type_node);\n+\n+  gfor_fndecl_string_minmax_char4 =\n+    gfc_build_library_function_decl (get_identifier\n+\t\t\t\t\t(PREFIX(\"string_minmax_char4\")),\n+\t\t\t\t     void_type_node, -4,\n+\t\t\t\t     build_pointer_type (gfc_charlen_type_node),\n+\t\t\t\t     build_pointer_type (pchar4_type_node),\n+\t\t\t\t     integer_type_node, integer_type_node);\n+\n+  gfor_fndecl_adjustl_char4 =\n+    gfc_build_library_function_decl (get_identifier (PREFIX(\"adjustl_char4\")),\n+\t\t\t\t     void_type_node, 3, pchar4_type_node,\n+\t\t\t\t     gfc_charlen_type_node, pchar4_type_node);\n+\n+  gfor_fndecl_adjustr_char4 =\n+    gfc_build_library_function_decl (get_identifier (PREFIX(\"adjustr_char4\")),\n+\t\t\t\t     void_type_node, 3, pchar4_type_node,\n+\t\t\t\t     gfc_charlen_type_node, pchar4_type_node);\n+\n+  /* Misc. functions.  */\n \n   gfor_fndecl_ttynam =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"ttynam\")),\n@@ -2089,20 +2180,6 @@ gfc_build_intrinsic_function_decls (void)\n                                      gfc_charlen_type_node,\n                                      gfc_int8_type_node);\n \n-  gfor_fndecl_adjustl =\n-    gfc_build_library_function_decl (get_identifier (PREFIX(\"adjustl\")),\n-\t\t\t\t     void_type_node,\n-\t\t\t\t     3,\n-\t\t\t\t     pchar_type_node,\n-\t\t\t\t     gfc_charlen_type_node, pchar_type_node);\n-\n-  gfor_fndecl_adjustr =\n-    gfc_build_library_function_decl (get_identifier (PREFIX(\"adjustr\")),\n-\t\t\t\t     void_type_node,\n-\t\t\t\t     3,\n-\t\t\t\t     pchar_type_node,\n-\t\t\t\t     gfc_charlen_type_node, pchar_type_node);\n-\n   gfor_fndecl_sc_kind =\n     gfc_build_library_function_decl (get_identifier\n \t\t\t\t\t(PREFIX(\"selected_char_kind\")),"}, {"sha": "563e840c64ade71d9efb6cb8edb39a45a63bab3c", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374929b22f9ef8a02a0d2d1be531efc0e9949ee7/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374929b22f9ef8a02a0d2d1be531efc0e9949ee7/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=374929b22f9ef8a02a0d2d1be531efc0e9949ee7", "patch": "@@ -1003,15 +1003,11 @@ gfc_conv_string_tmp (gfc_se * se, tree type, tree len)\n static void\n gfc_conv_concat_op (gfc_se * se, gfc_expr * expr)\n {\n-  gfc_se lse;\n-  gfc_se rse;\n-  tree len;\n-  tree type;\n-  tree var;\n-  tree tmp;\n+  gfc_se lse, rse;\n+  tree len, type, var, tmp, fndecl;\n \n   gcc_assert (expr->value.op.op1->ts.type == BT_CHARACTER\n-\t  && expr->value.op.op2->ts.type == BT_CHARACTER);\n+\t      && expr->value.op.op2->ts.type == BT_CHARACTER);\n \n   gfc_init_se (&lse, se);\n   gfc_conv_expr (&lse, expr->value.op.op1);\n@@ -1036,9 +1032,14 @@ gfc_conv_concat_op (gfc_se * se, gfc_expr * expr)\n   var = gfc_conv_string_tmp (se, type, len);\n \n   /* Do the actual concatenation.  */\n-  tmp = build_call_expr (gfor_fndecl_concat_string, 6,\n-\t\t\t len, var,\n-\t\t\t lse.string_length, lse.expr,\n+  if (expr->ts.kind == 1)\n+    fndecl = gfor_fndecl_concat_string;\n+  else if (expr->ts.kind == 4)\n+    fndecl = gfor_fndecl_concat_string_char4;\n+  else\n+    gcc_unreachable ();\n+\n+  tmp = build_call_expr (fndecl, 6, len, var, lse.string_length, lse.expr,\n \t\t\t rse.string_length, rse.expr);\n   gfc_add_expr_to_block (&se->pre, tmp);\n \n@@ -1212,7 +1213,8 @@ gfc_conv_expr_op (gfc_se * se, gfc_expr * expr)\n       gfc_conv_string_parameter (&rse);\n \n       lse.expr = gfc_build_compare_string (lse.string_length, lse.expr,\n-\t\t\t\t\t   rse.string_length, rse.expr);\n+\t\t\t\t\t   rse.string_length, rse.expr,\n+\t\t\t\t\t   expr->value.op.op1->ts.kind);\n       rse.expr = build_int_cst (TREE_TYPE (lse.expr), 0);\n       gfc_add_block_to_block (&lse.post, &rse.post);\n     }\n@@ -1313,7 +1315,7 @@ gfc_conv_scalar_char_value (gfc_symbol *sym, gfc_se *se, gfc_expr **expr)\n    subtraction of them. Otherwise, we build a library call.  */\n \n tree\n-gfc_build_compare_string (tree len1, tree str1, tree len2, tree str2)\n+gfc_build_compare_string (tree len1, tree str1, tree len2, tree str2, int kind)\n {\n   tree sc1;\n   tree sc2;\n@@ -1325,17 +1327,28 @@ gfc_build_compare_string (tree len1, tree str1, tree len2, tree str2)\n   sc1 = gfc_to_single_character (len1, str1);\n   sc2 = gfc_to_single_character (len2, str2);\n \n-  /* Deal with single character specially.  */\n   if (sc1 != NULL_TREE && sc2 != NULL_TREE)\n     {\n+      /* Deal with single character specially.  */\n       sc1 = fold_convert (integer_type_node, sc1);\n       sc2 = fold_convert (integer_type_node, sc2);\n       tmp = fold_build2 (MINUS_EXPR, integer_type_node, sc1, sc2);\n     }\n-   else\n-     /* Build a call for the comparison.  */\n-     tmp = build_call_expr (gfor_fndecl_compare_string, 4,\n-\t\t\t    len1, str1, len2, str2);\n+  else\n+    {\n+      /* Build a call for the comparison.  */\n+      tree fndecl;\n+\n+      if (kind == 1)\n+\tfndecl = gfor_fndecl_compare_string;\n+      else if (kind == 4)\n+\tfndecl = gfor_fndecl_compare_string_char4;\n+      else\n+\tgcc_unreachable ();\n+\n+      tmp = build_call_expr (fndecl, 4, len1, str1, len2, str2);\n+    }\n+\n   return tmp;\n }\n \n@@ -2981,7 +2994,7 @@ gfc_conv_statement_function (gfc_se * se, gfc_expr * expr)\n           tree arglen;\n \n           gcc_assert (fsym->ts.cl && fsym->ts.cl->length\n-                  && fsym->ts.cl->length->expr_type == EXPR_CONSTANT);\n+                     && fsym->ts.cl->length->expr_type == EXPR_CONSTANT);\n \n           arglen = TYPE_MAX_VALUE (TYPE_DOMAIN (type));\n           tmp = gfc_build_addr_expr (build_pointer_type (type),"}, {"sha": "03ddefd5e6668accb175036f9493906631456267", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 84, "deletions": 20, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374929b22f9ef8a02a0d2d1be531efc0e9949ee7/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374929b22f9ef8a02a0d2d1be531efc0e9949ee7/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=374929b22f9ef8a02a0d2d1be531efc0e9949ee7", "patch": "@@ -1509,7 +1509,7 @@ static void\n gfc_conv_intrinsic_minmax_char (gfc_se * se, gfc_expr * expr, int op)\n {\n   tree *args;\n-  tree var, len, fndecl, tmp, cond;\n+  tree var, len, fndecl, tmp, cond, function;\n   unsigned int nargs;\n \n   nargs = gfc_intrinsic_argument_list_length (expr);\n@@ -1524,10 +1524,17 @@ gfc_conv_intrinsic_minmax_char (gfc_se * se, gfc_expr * expr, int op)\n   args[2] = build_int_cst (NULL_TREE, op);\n   args[3] = build_int_cst (NULL_TREE, nargs / 2);\n \n+  if (expr->ts.kind == 1)\n+    function = gfor_fndecl_string_minmax;\n+  else if (expr->ts.kind == 4)\n+    function = gfor_fndecl_string_minmax_char4;\n+  else\n+    gcc_unreachable ();\n+\n   /* Make the function call.  */\n-  fndecl = build_addr (gfor_fndecl_string_minmax, current_function_decl);\n-  tmp = build_call_array (TREE_TYPE (TREE_TYPE (gfor_fndecl_string_minmax)),\n-\t\t\t  fndecl, nargs + 4, args);\n+  fndecl = build_addr (function, current_function_decl);\n+  tmp = build_call_array (TREE_TYPE (TREE_TYPE (function)), fndecl,\n+\t\t\t  nargs + 4, args);\n   gfc_add_expr_to_block (&se->pre, tmp);\n \n   /* Free the temporary afterwards, if necessary.  */\n@@ -2691,12 +2698,20 @@ gfc_conv_intrinsic_len (gfc_se * se, gfc_expr * expr)\n static void\n gfc_conv_intrinsic_len_trim (gfc_se * se, gfc_expr * expr)\n {\n-  tree args[2];\n-  tree type;\n+  int kind = expr->value.function.actual->expr->ts.kind;\n+  tree args[2], type, fndecl;\n \n   gfc_conv_intrinsic_function_args (se, expr, args, 2);\n   type = gfc_typenode_for_spec (&expr->ts);\n-  se->expr = build_call_expr (gfor_fndecl_string_len_trim, 2, args[0], args[1]);\n+\n+  if (kind == 1)\n+    fndecl = gfor_fndecl_string_len_trim;\n+  else if (kind == 4)\n+    fndecl = gfor_fndecl_string_len_trim_char4;\n+  else\n+    gcc_unreachable ();\n+\n+  se->expr = build_call_expr (fndecl, 2, args[0], args[1]);\n   se->expr = convert (type, se->expr);\n }\n \n@@ -2736,12 +2751,12 @@ gfc_conv_intrinsic_index_scan_verify (gfc_se * se, gfc_expr * expr,\n static void\n gfc_conv_intrinsic_ichar (gfc_se * se, gfc_expr * expr)\n {\n-  tree args[2];\n-  tree type;\n+  tree args[2], type, pchartype;\n \n   gfc_conv_intrinsic_function_args (se, expr, args, 2);\n   gcc_assert (POINTER_TYPE_P (TREE_TYPE (args[1])));\n-  args[1] = fold_build1 (NOP_EXPR, pchar_type_node, args[1]);\n+  pchartype = gfc_get_pchar_type (expr->value.function.actual->expr->ts.kind);\n+  args[1] = fold_build1 (NOP_EXPR, pchartype, args[1]);\n   type = gfc_typenode_for_spec (&expr->ts);\n \n   se->expr = build_fold_indirect_ref (args[1]);\n@@ -3273,7 +3288,9 @@ gfc_conv_intrinsic_strcmp (gfc_se * se, gfc_expr * expr, int op)\n \n   gfc_conv_intrinsic_function_args (se, expr, args, 4);\n \n-  se->expr = gfc_build_compare_string (args[0], args[1], args[2], args[3]);\n+  se->expr\n+    = gfc_build_compare_string (args[0], args[1], args[2], args[3],\n+                               expr->value.function.actual->expr->ts.kind);\n   se->expr = fold_build2 (op, gfc_typenode_for_spec (&expr->ts), se->expr,\n \t\t\t  build_int_cst (TREE_TYPE (se->expr), 0));\n }\n@@ -3828,6 +3845,7 @@ gfc_conv_intrinsic_trim (gfc_se * se, gfc_expr * expr)\n   tree type;\n   tree cond;\n   tree fndecl;\n+  tree function;\n   tree *args;\n   unsigned int num_args;\n \n@@ -3843,9 +3861,16 @@ gfc_conv_intrinsic_trim (gfc_se * se, gfc_expr * expr)\n   args[0] = build_fold_addr_expr (len);\n   args[1] = addr;\n \n-  fndecl = build_addr (gfor_fndecl_string_trim, current_function_decl);\n-  tmp = build_call_array (TREE_TYPE (TREE_TYPE (gfor_fndecl_string_trim)),\n-\t\t\t  fndecl, num_args, args);\n+  if (expr->ts.kind == 1)\n+    function = gfor_fndecl_string_trim;\n+  else if (expr->ts.kind == 4)\n+    function = gfor_fndecl_string_trim_char4;\n+  else\n+    gcc_unreachable ();\n+\n+  fndecl = build_addr (function, current_function_decl);\n+  tmp = build_call_array (TREE_TYPE (TREE_TYPE (function)), fndecl,\n+\t\t\t  num_args, args);\n   gfc_add_expr_to_block (&se->pre, tmp);\n \n   /* Free the temporary afterwards, if necessary.  */\n@@ -4033,7 +4058,8 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n {\n   gfc_intrinsic_sym *isym;\n   const char *name;\n-  int lib;\n+  int lib, kind;\n+  tree fndecl;\n \n   isym = expr->value.function.isym;\n \n@@ -4081,11 +4107,27 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       break;\n \n     case GFC_ISYM_SCAN:\n-      gfc_conv_intrinsic_index_scan_verify (se, expr, gfor_fndecl_string_scan);\n+      kind = expr->value.function.actual->expr->ts.kind;\n+      if (kind == 1)\n+       fndecl = gfor_fndecl_string_scan;\n+      else if (kind == 4)\n+       fndecl = gfor_fndecl_string_scan_char4;\n+      else\n+       gcc_unreachable ();\n+\n+      gfc_conv_intrinsic_index_scan_verify (se, expr, fndecl);\n       break;\n \n     case GFC_ISYM_VERIFY:\n-      gfc_conv_intrinsic_index_scan_verify (se, expr, gfor_fndecl_string_verify);\n+      kind = expr->value.function.actual->expr->ts.kind;\n+      if (kind == 1)\n+       fndecl = gfor_fndecl_string_verify;\n+      else if (kind == 4)\n+       fndecl = gfor_fndecl_string_verify_char4;\n+      else\n+       gcc_unreachable ();\n+\n+      gfc_conv_intrinsic_index_scan_verify (se, expr, fndecl);\n       break;\n \n     case GFC_ISYM_ALLOCATED:\n@@ -4101,11 +4143,25 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       break;\n \n     case GFC_ISYM_ADJUSTL:\n-      gfc_conv_intrinsic_adjust (se, expr, gfor_fndecl_adjustl);\n+      if (expr->ts.kind == 1)\n+       fndecl = gfor_fndecl_adjustl;\n+      else if (expr->ts.kind == 4)\n+       fndecl = gfor_fndecl_adjustl_char4;\n+      else\n+       gcc_unreachable ();\n+\n+      gfc_conv_intrinsic_adjust (se, expr, fndecl);\n       break;\n \n     case GFC_ISYM_ADJUSTR:\n-      gfc_conv_intrinsic_adjust (se, expr, gfor_fndecl_adjustr);\n+      if (expr->ts.kind == 1)\n+       fndecl = gfor_fndecl_adjustr;\n+      else if (expr->ts.kind == 4)\n+       fndecl = gfor_fndecl_adjustr_char4;\n+      else\n+       gcc_unreachable ();\n+\n+      gfc_conv_intrinsic_adjust (se, expr, fndecl);\n       break;\n \n     case GFC_ISYM_AIMAG:\n@@ -4252,7 +4308,15 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       break;\n \n     case GFC_ISYM_INDEX:\n-      gfc_conv_intrinsic_index_scan_verify (se, expr, gfor_fndecl_string_index);\n+      kind = expr->value.function.actual->expr->ts.kind;\n+      if (kind == 1)\n+       fndecl = gfor_fndecl_string_index;\n+      else if (kind == 4)\n+       fndecl = gfor_fndecl_string_index_char4;\n+      else\n+       gcc_unreachable ();\n+\n+      gfc_conv_intrinsic_index_scan_verify (se, expr, fndecl);\n       break;\n \n     case GFC_ISYM_IOR:"}, {"sha": "1c15d644ab4f712717a3692526edd78c4d778e9f", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 78, "deletions": 7, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374929b22f9ef8a02a0d2d1be531efc0e9949ee7/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374929b22f9ef8a02a0d2d1be531efc0e9949ee7/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=374929b22f9ef8a02a0d2d1be531efc0e9949ee7", "patch": "@@ -83,6 +83,11 @@ gfc_real_info gfc_real_kinds[MAX_REAL_KINDS + 1];\n static GTY(()) tree gfc_real_types[MAX_REAL_KINDS + 1];\n static GTY(()) tree gfc_complex_types[MAX_REAL_KINDS + 1];\n \n+#define MAX_CHARACTER_KINDS 2\n+gfc_character_info gfc_character_kinds[MAX_CHARACTER_KINDS + 1];\n+static GTY(()) tree gfc_character_types[MAX_CHARACTER_KINDS + 1];\n+static GTY(()) tree gfc_pcharacter_types[MAX_CHARACTER_KINDS + 1];\n+\n \n /* The integer kind to use for array indices.  This will be set to the\n    proper value based on target information from the backend.  */\n@@ -262,7 +267,7 @@ void\n gfc_init_kinds (void)\n {\n   enum machine_mode mode;\n-  int i_index, r_index;\n+  int i_index, r_index, kind;\n   bool saw_i4 = false, saw_i8 = false;\n   bool saw_r4 = false, saw_r8 = false, saw_r16 = false;\n \n@@ -450,8 +455,27 @@ gfc_init_kinds (void)\n   gfc_default_logical_kind = gfc_default_integer_kind;\n   gfc_default_complex_kind = gfc_default_real_kind;\n \n+  /* We only have two character kinds: ASCII and UCS-4.\n+     ASCII corresponds to a 8-bit integer type, if one is available.\n+     UCS-4 corresponds to a 32-bit integer type, if one is available. */\n+  i_index = 0;\n+  if ((kind = get_int_kind_from_width (8)) > 0)\n+    {\n+      gfc_character_kinds[i_index].kind = kind;\n+      gfc_character_kinds[i_index].bit_size = 8;\n+      gfc_character_kinds[i_index].name = \"ascii\";\n+      i_index++;\n+    }\n+  if ((kind = get_int_kind_from_width (32)) > 0)\n+    {\n+      gfc_character_kinds[i_index].kind = kind;\n+      gfc_character_kinds[i_index].bit_size = 32;\n+      gfc_character_kinds[i_index].name = \"iso_10646\";\n+      i_index++;\n+    }\n+\n   /* Choose the smallest integer kind for our default character.  */\n-  gfc_default_character_kind = gfc_integer_kinds[0].kind;\n+  gfc_default_character_kind = gfc_character_kinds[0].kind;\n   gfc_character_storage_size = gfc_default_character_kind * 8;\n \n   /* Choose the integer kind the same size as \"void*\" for our index kind.  */\n@@ -505,7 +529,13 @@ validate_logical (int kind)\n static int\n validate_character (int kind)\n {\n-  return kind == gfc_default_character_kind ? 0 : -1;\n+  int i;\n+\n+  for (i = 0; gfc_character_kinds[i].kind; i++)\n+    if (gfc_character_kinds[i].kind == kind)\n+      return i;\n+\n+  return -1;\n }\n \n /* Validate a kind given a basic type.  The return value is the same\n@@ -579,6 +609,24 @@ gfc_build_int_type (gfc_integer_info *info)\n   return make_signed_type (mode_precision);\n }\n \n+static tree\n+gfc_build_uint_type (int size)\n+{\n+  if (size == CHAR_TYPE_SIZE)\n+    return unsigned_char_type_node;\n+  if (size == SHORT_TYPE_SIZE)\n+    return short_unsigned_type_node;\n+  if (size == INT_TYPE_SIZE)\n+    return unsigned_type_node;\n+  if (size == LONG_TYPE_SIZE)\n+    return long_unsigned_type_node;\n+  if (size == LONG_LONG_TYPE_SIZE)\n+    return long_long_unsigned_type_node;\n+\n+  return make_unsigned_type (size);\n+}\n+\n+\n static tree\n gfc_build_real_type (gfc_real_info *info)\n {\n@@ -717,9 +765,17 @@ gfc_init_types (void)\n       PUSH_TYPE (name_buf, type);\n     }\n \n-  gfc_character1_type_node = build_qualified_type (unsigned_char_type_node, \n-\t\t\t\t\t\t   TYPE_UNQUALIFIED);\n-  PUSH_TYPE (\"character(kind=1)\", gfc_character1_type_node);\n+  for (index = 0; gfc_character_kinds[index].kind != 0; ++index)\n+    {\n+      type = gfc_build_uint_type (gfc_character_kinds[index].bit_size);\n+      type = build_qualified_type (type, TYPE_UNQUALIFIED);\n+      snprintf (name_buf, sizeof(name_buf), \"character(kind=%d)\",\n+\t\tgfc_character_kinds[index].kind);\n+      PUSH_TYPE (name_buf, type);\n+      gfc_character_types[index] = type;\n+      gfc_pcharacter_types[index] = build_pointer_type (type);\n+    }\n+  gfc_character1_type_node = gfc_character_types[0];\n \n   PUSH_TYPE (\"byte\", unsigned_char_type_node);\n   PUSH_TYPE (\"void\", void_type_node);\n@@ -799,6 +855,21 @@ gfc_get_logical_type (int kind)\n   int index = gfc_validate_kind (BT_LOGICAL, kind, true);\n   return index < 0 ? 0 : gfc_logical_types[index];\n }\n+\n+tree\n+gfc_get_char_type (int kind)\n+{\n+  int index = gfc_validate_kind (BT_CHARACTER, kind, true);\n+  return index < 0 ? 0 : gfc_character_types[index];\n+}\n+\n+tree\n+gfc_get_pchar_type (int kind)\n+{\n+  int index = gfc_validate_kind (BT_CHARACTER, kind, true);\n+  return index < 0 ? 0 : gfc_pcharacter_types[index];\n+}\n+\n \f\n /* Create a character type with the given kind and length.  */\n \n@@ -810,7 +881,7 @@ gfc_get_character_type_len (int kind, tree len)\n   gfc_validate_kind (BT_CHARACTER, kind, false);\n \n   bounds = build_range_type (gfc_charlen_type_node, gfc_index_one_node, len);\n-  type = build_array_type (gfc_character1_type_node, bounds);\n+  type = build_array_type (gfc_get_char_type (kind), bounds);\n   TYPE_STRING_FLAG (type) = 1;\n \n   return type;"}, {"sha": "0da736d6d5cef33cb271c1333edcb8eaa464c09a", "filename": "gcc/fortran/trans-types.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374929b22f9ef8a02a0d2d1be531efc0e9949ee7/gcc%2Ffortran%2Ftrans-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374929b22f9ef8a02a0d2d1be531efc0e9949ee7/gcc%2Ffortran%2Ftrans-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.h?ref=374929b22f9ef8a02a0d2d1be531efc0e9949ee7", "patch": "@@ -55,6 +55,8 @@ tree gfc_get_int_type (int);\n tree gfc_get_real_type (int);\n tree gfc_get_complex_type (int);\n tree gfc_get_logical_type (int);\n+tree gfc_get_char_type (int);\n+tree gfc_get_pchar_type (int);\n tree gfc_get_character_type (int, gfc_charlen *);\n tree gfc_get_character_type_len (int, tree);\n "}, {"sha": "0b431a52daed49094e6e3b42ab0bca068736b5b8", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374929b22f9ef8a02a0d2d1be531efc0e9949ee7/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374929b22f9ef8a02a0d2d1be531efc0e9949ee7/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=374929b22f9ef8a02a0d2d1be531efc0e9949ee7", "patch": "@@ -277,7 +277,7 @@ void gfc_make_safe_expr (gfc_se * se);\n void gfc_conv_string_parameter (gfc_se * se);\n \n /* Compare two strings.  */\n-tree gfc_build_compare_string (tree, tree, tree, tree);\n+tree gfc_build_compare_string (tree, tree, tree, tree, int);\n \n /* Add an item to the end of TREE_LIST.  */\n tree gfc_chainon_list (tree, tree);\n@@ -550,6 +550,16 @@ extern GTY(()) tree gfor_fndecl_string_trim;\n extern GTY(()) tree gfor_fndecl_string_minmax;\n extern GTY(()) tree gfor_fndecl_adjustl;\n extern GTY(()) tree gfor_fndecl_adjustr;\n+extern GTY(()) tree gfor_fndecl_compare_string_char4;\n+extern GTY(()) tree gfor_fndecl_concat_string_char4;\n+extern GTY(()) tree gfor_fndecl_string_len_trim_char4;\n+extern GTY(()) tree gfor_fndecl_string_index_char4;\n+extern GTY(()) tree gfor_fndecl_string_scan_char4;\n+extern GTY(()) tree gfor_fndecl_string_verify_char4;\n+extern GTY(()) tree gfor_fndecl_string_trim_char4;\n+extern GTY(()) tree gfor_fndecl_string_minmax_char4;\n+extern GTY(()) tree gfor_fndecl_adjustl_char4;\n+extern GTY(()) tree gfor_fndecl_adjustr_char4;\n \n /* Other misc. runtime library functions.  */\n extern GTY(()) tree gfor_fndecl_size0;"}]}