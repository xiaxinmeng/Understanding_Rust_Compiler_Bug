{"sha": "d1bd43d95082914bdc5e6f782ed0a919ff4305e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFiZDQzZDk1MDgyOTE0YmRjNWU2Zjc4MmVkMGE5MTlmZjQzMDVlMg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-12-04T10:30:04Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-12-04T10:30:04Z"}, "message": "stmt.c (expand_expr_stmt): Keep last_expr_value non-NULL iff we're interested in the result.\n\n* stmt.c (expand_expr_stmt): Keep last_expr_value non-NULL iff\nwe're interested in the result.  Use it to tell whether to\nignore results of enclosed expressions.\n(expand_start_stmt_expr): Added new argument, and initialize\nlast_expr_value accordingly.\n* tree.h (expand_start_stmt_expr): Adjusted declaration.\n* c-common.c (c_expand_expr): Adjust call.\n* expr.c (expand_expr) [EXPR_WFL]: Pass const0_rtx down if\nignoring the result.\n\nFrom-SVN: r47607", "tree": {"sha": "764fcb1b30f9b79f8a0f0dc4fa3f07a61527c096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/764fcb1b30f9b79f8a0f0dc4fa3f07a61527c096"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1bd43d95082914bdc5e6f782ed0a919ff4305e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1bd43d95082914bdc5e6f782ed0a919ff4305e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1bd43d95082914bdc5e6f782ed0a919ff4305e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1bd43d95082914bdc5e6f782ed0a919ff4305e2/comments", "author": null, "committer": null, "parents": [{"sha": "1b3ea405b0f468e456251a24fede3012be58b3ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3ea405b0f468e456251a24fede3012be58b3ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b3ea405b0f468e456251a24fede3012be58b3ff"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "a27871443186f74cf81703e77647cc582b214f8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1bd43d95082914bdc5e6f782ed0a919ff4305e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1bd43d95082914bdc5e6f782ed0a919ff4305e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1bd43d95082914bdc5e6f782ed0a919ff4305e2", "patch": "@@ -1,3 +1,15 @@\n+2001-12-04  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* stmt.c (expand_expr_stmt): Keep last_expr_value non-NULL iff\n+\twe're interested in the result.  Use it to tell whether to\n+\tignore results of enclosed expressions.\n+\t(expand_start_stmt_expr): Added new argument, and initialize\n+\tlast_expr_value accordingly.\n+\t* tree.h (expand_start_stmt_expr): Adjusted declaration.\n+\t* c-common.c (c_expand_expr): Adjust call.\n+\t* expr.c (expand_expr) [EXPR_WFL]: Pass const0_rtx down if\n+\tignoring the result.\n+\n 2001-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* flow.c (ior_reg_cond): Return NULL if ! add and rtx wasn't optimized."}, {"sha": "41aaeb6057d0c7e5f447e4c2f69b55058906bb83", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1bd43d95082914bdc5e6f782ed0a919ff4305e2/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1bd43d95082914bdc5e6f782ed0a919ff4305e2/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d1bd43d95082914bdc5e6f782ed0a919ff4305e2", "patch": "@@ -3409,7 +3409,7 @@ c_expand_expr (exp, target, tmode, modifier)\n \t   out-of-scope after the first EXPR_STMT from within the\n \t   STMT_EXPR.  */\n \tpush_temp_slots ();\n-\trtl_expr = expand_start_stmt_expr ();\n+\trtl_expr = expand_start_stmt_expr (target != const0_rtx);\n \texpand_stmt (STMT_EXPR_STMT (exp));\n \texpand_end_stmt_expr (rtl_expr);\n \tresult = expand_expr (rtl_expr, target, tmode, modifier);"}, {"sha": "1a4681e5b0050ceb7d7572f45d7c7d1220fdc1bc", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1bd43d95082914bdc5e6f782ed0a919ff4305e2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1bd43d95082914bdc5e6f782ed0a919ff4305e2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d1bd43d95082914bdc5e6f782ed0a919ff4305e2", "patch": "@@ -6528,7 +6528,9 @@ expand_expr (exp, target, tmode, modifier)\n \tif (EXPR_WFL_EMIT_LINE_NOTE (exp))\n \t  emit_line_note (input_filename, lineno);\n \t/* Possibly avoid switching back and forth here.  */\n-\tto_return = expand_expr (EXPR_WFL_NODE (exp), target, tmode, modifier);\n+\tto_return = expand_expr (EXPR_WFL_NODE (exp),\n+\t\t\t\t target || ! ignore ? target : const0_rtx,\n+\t\t\t\t tmode, modifier);\n \tinput_filename = saved_input_filename;\n \tlineno = saved_lineno;\n \treturn to_return;"}, {"sha": "bfac270dd524229452c32d66d0caa6098c7bb8dd", "filename": "gcc/stmt.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1bd43d95082914bdc5e6f782ed0a919ff4305e2/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1bd43d95082914bdc5e6f782ed0a919ff4305e2/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=d1bd43d95082914bdc5e6f782ed0a919ff4305e2", "patch": "@@ -2149,6 +2149,8 @@ void\n expand_expr_stmt (exp)\n      tree exp;\n {\n+  bool want_value = last_expr_value != NULL_RTX;\n+\n   /* If -W, warn about statements with no side effects,\n      except for an explicit cast to void (e.g. for assert()), and\n      except inside a ({...}) where they may be useful.  */\n@@ -2175,7 +2177,7 @@ expand_expr_stmt (exp)\n      last_expr_value to get reset.  Therefore, we set last_expr_value\n      and last_expr_type *after* calling expand_expr.  */\n   last_expr_value = expand_expr (exp,\n-\t\t\t\t (expr_stmts_for_value\n+\t\t\t\t (want_value && expr_stmts_for_value\n \t\t\t\t  ? NULL_RTX : const0_rtx),\n \t\t\t\t VOIDmode, 0);\n   last_expr_type = TREE_TYPE (exp);\n@@ -2188,7 +2190,7 @@ expand_expr_stmt (exp)\n       if (TYPE_MODE (TREE_TYPE (exp)) == VOIDmode)\n \t;\n       else if (TYPE_MODE (TREE_TYPE (exp)) != BLKmode)\n-\tcopy_to_reg (last_expr_value);\n+\tlast_expr_value = copy_to_reg (last_expr_value);\n       else\n \t{\n \t  rtx lab = gen_label_rtx ();\n@@ -2211,6 +2213,14 @@ expand_expr_stmt (exp)\n      above.  */\n   free_temp_slots ();\n \n+  if (! want_value && last_expr_value)\n+    {\n+      protect_from_queue (last_expr_value, 0);\n+      last_expr_value = NULL_RTX;\n+    }\n+  else if (want_value && ! last_expr_value)\n+    last_expr_value = const0_rtx;\n+\n   emit_queue ();\n }\n \n@@ -2336,7 +2346,8 @@ clear_last_expr ()\n    The caller must save that value and pass it to expand_end_stmt_expr.  */\n \n tree\n-expand_start_stmt_expr ()\n+expand_start_stmt_expr (want_value)\n+     int want_value;\n {\n   tree t;\n \n@@ -2347,6 +2358,7 @@ expand_start_stmt_expr ()\n   start_sequence_for_rtl_expr (t);\n   NO_DEFER_POP;\n   expr_stmts_for_value++;\n+  last_expr_value = want_value ? const0_rtx : NULL_RTX;\n   return t;\n }\n "}, {"sha": "9492b01e294095b8c59cc28d3d5775d53126cbc9", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1bd43d95082914bdc5e6f782ed0a919ff4305e2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1bd43d95082914bdc5e6f782ed0a919ff4305e2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d1bd43d95082914bdc5e6f782ed0a919ff4305e2", "patch": "@@ -2706,7 +2706,7 @@ extern int type_num_arguments                   PARAMS ((tree));\n \n extern int in_control_zone_p\t\t\tPARAMS ((void));\n extern void expand_fixups\t\t\tPARAMS ((rtx));\n-extern tree expand_start_stmt_expr\t\tPARAMS ((void));\n+extern tree expand_start_stmt_expr\t\tPARAMS ((int));\n extern tree expand_end_stmt_expr\t\tPARAMS ((tree));\n extern void expand_expr_stmt\t\t\tPARAMS ((tree));\n extern int warn_if_unused_value\t\t\tPARAMS ((tree));"}]}