{"sha": "06449b408eb72fbc8f5b78fea962efd4e72db5e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY0NDliNDA4ZWI3MmZiYzhmNWI3OGZlYTk2MmVmZDRlNzJkYjVlNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-02-15T01:27:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-02-15T01:27:03Z"}, "message": "re PR c++/56323 ([C++11] cannot compile inherited constructor for typedef'ed base class)\n\n\tPR c++/56323\n\t* name-lookup.c (do_class_using_decl): Handle typedefs with\n\tinheriting constructors.\n\t(push_class_level_binding_1): Allow inheriting from template\n\ttemplate parameter, too.\n\t* pt.c (tsubst_decl) [USING_DECL]: Likewise.\n\nFrom-SVN: r196067", "tree": {"sha": "ad0d25171feaf55e2a861ed9ae317b09f912e845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad0d25171feaf55e2a861ed9ae317b09f912e845"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06449b408eb72fbc8f5b78fea962efd4e72db5e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06449b408eb72fbc8f5b78fea962efd4e72db5e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06449b408eb72fbc8f5b78fea962efd4e72db5e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06449b408eb72fbc8f5b78fea962efd4e72db5e6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b858a6cc3584c4dfec7c9ef377f71bccf986e13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b858a6cc3584c4dfec7c9ef377f71bccf986e13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b858a6cc3584c4dfec7c9ef377f71bccf986e13"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "76cefcf848bc4dd6f3b1e4d98f2f8e1233973635", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06449b408eb72fbc8f5b78fea962efd4e72db5e6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06449b408eb72fbc8f5b78fea962efd4e72db5e6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=06449b408eb72fbc8f5b78fea962efd4e72db5e6", "patch": "@@ -1,5 +1,12 @@\n 2013-02-14  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/56323\n+\t* name-lookup.c (do_class_using_decl): Handle typedefs with\n+\tinheriting constructors.\n+\t(push_class_level_binding_1): Allow inheriting from template\n+\ttemplate parameter, too.\n+\t* pt.c (tsubst_decl) [USING_DECL]: Likewise.\n+\n \tPR c++/55223\n \t* pt.c (tsubst_copy_and_build) [LAMBDA_EXPR]: Fix handling of\n \tdefault argument scope."}, {"sha": "1f3c042041ecae92774f3b874d29fee4a0ca573b", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06449b408eb72fbc8f5b78fea962efd4e72db5e6/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06449b408eb72fbc8f5b78fea962efd4e72db5e6/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=06449b408eb72fbc8f5b78fea962efd4e72db5e6", "patch": "@@ -3028,11 +3028,10 @@ push_class_level_binding_1 (tree name, tree x)\n     decl = TREE_VALUE (decl);\n \n   if (TREE_CODE (decl) == USING_DECL\n-      && TREE_CODE (USING_DECL_SCOPE (decl)) == TEMPLATE_TYPE_PARM\n+      && TYPE_NAME (USING_DECL_SCOPE (decl))\n       && DECL_NAME (decl) == TYPE_IDENTIFIER (USING_DECL_SCOPE (decl)))\n-    /* This using-declaration declares constructors that inherit from the\n-       constructors for the template parameter.  It does not redeclare the\n-       name of the template parameter.  */\n+    /* This using-declaration declares inheriting constructors; it does not\n+       redeclare the name of a template parameter.  */\n     return true;\n \n   if (!check_template_shadow (decl))\n@@ -3226,6 +3225,10 @@ do_class_using_decl (tree scope, tree name)\n       error (\"%<%T::%D%> names destructor\", scope, name);\n       return NULL_TREE;\n     }\n+  if (TYPE_NAME (scope) && name == TYPE_IDENTIFIER (scope))\n+    /* 3.4.3.1 says that using B::B always names the constructor even if B\n+       is a typedef; now replace the second B with the real name.  */\n+    name = TYPE_IDENTIFIER (TYPE_MAIN_VARIANT (scope));\n   if (MAYBE_CLASS_TYPE_P (scope) && constructor_name_p (name, scope))\n     maybe_warn_cpp0x (CPP0X_INHERITING_CTORS);\n   if (constructor_name_p (name, current_class_type))"}, {"sha": "e88ea855694d05df71be88cccc27a5a403dfe371", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06449b408eb72fbc8f5b78fea962efd4e72db5e6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06449b408eb72fbc8f5b78fea962efd4e72db5e6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=06449b408eb72fbc8f5b78fea962efd4e72db5e6", "patch": "@@ -10492,7 +10492,8 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t  tree inst_scope = tsubst_copy (USING_DECL_SCOPE (t), args,\n \t\t\t\t\t complain, in_decl);\n \t  tree name = tsubst_copy (DECL_NAME (t), args, complain, in_decl);\n-\t  if (TREE_CODE (scope) == TEMPLATE_TYPE_PARM\n+\t  /* Handle 'using T::T'.  */\n+\t  if (TYPE_NAME (scope)\n \t      && name == TYPE_IDENTIFIER (scope))\n \t    name = TYPE_IDENTIFIER (inst_scope);\n \t  r = do_class_using_decl (inst_scope, name);"}, {"sha": "22eda3af5054b72254e45dfc9609fdf595871f81", "filename": "gcc/testsuite/g++.dg/cpp0x/inh-ctor17.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06449b408eb72fbc8f5b78fea962efd4e72db5e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06449b408eb72fbc8f5b78fea962efd4e72db5e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor17.C?ref=06449b408eb72fbc8f5b78fea962efd4e72db5e6", "patch": "@@ -0,0 +1,45 @@\n+// PR c++/56323\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  A(int i);\n+};\n+\n+typedef A B;\n+\n+struct C : B {\n+  using B::B;\n+};\n+\n+struct D : B {\n+  using B::A;\n+};\n+\n+C c(0);\n+D d(0);\n+\n+template <class T>\n+struct E {\n+  typedef T type;\n+};\n+\n+template <class T>\n+struct F : E<T>::type {\n+  using E<T>::type::type; // error: E<T>::type is a typedef\n+};\n+\n+F<A> f(0);\n+\n+template <class T>\n+struct AT\n+{\n+  AT(T);\n+};\n+\n+template <template <class> class T>\n+struct G : T<int>\n+{\n+  using T<int>::T;\n+};\n+\n+G<AT> g(0);"}]}