{"sha": "f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI1YTJiNTJhYjU4ZmZhM2Q5YzViYTc3MzE4MWQwYTk1MTVmOWUwOQ==", "commit": {"author": {"name": "Shujing Zhao", "email": "pearly.zhao@oracle.com", "date": "2010-02-10T07:37:37Z"}, "committer": {"name": "Shujing Zhao", "email": "pzhao@gcc.gnu.org", "date": "2010-02-10T07:37:37Z"}, "message": "Make-lang.in (cp/cvt.o, [...]): Depend on intl.h.\n\n2010-02-10  Shujing Zhao  <pearly.zhao@oracle.com>\n\n        * Make-lang.in (cp/cvt.o, cp/parser.o, cp/search.o): Depend on intl.h.\n        * cvt.c (warn_ref_binding): Wrap the messages into G_() for easy\n        translation.\n        * parser.c (cp_parser_postfix_expression, cp_parser_new_type_id)\n        (cp_parser_cast_expression, cp_parser_condition, cp_parser_decltype)\n        (cp_parser_parameter_declaration)\n        (cp_parser_exception_specification_opt)\n        (cp_parser_exception_declaration): Likewise.\n        * pt.c (check_default_tmpl_args): Likewise.\n        * search.c (lookup_field_r): Likewise.\n\nFrom-SVN: r156645", "tree": {"sha": "29acfc35ef9268967bd768e6d51fe3e60b986d58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29acfc35ef9268967bd768e6d51fe3e60b986d58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09/comments", "author": null, "committer": null, "parents": [{"sha": "0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7"}], "stats": {"total": 77, "additions": 49, "deletions": 28}, "files": [{"sha": "6bd2eca6d5682f697d16dc79ad52a2b92f9e9858", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09", "patch": "@@ -1,3 +1,16 @@\n+2010-02-10  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\t* Make-lang.in (cp/cvt.o, cp/parser.o, cp/search.o): Depend on intl.h.\n+\t* cvt.c (warn_ref_binding): Wrap the messages into G_() for easy\n+\ttranslation.\n+\t* parser.c (cp_parser_postfix_expression, cp_parser_new_type_id)\n+\t(cp_parser_cast_expression, cp_parser_condition, cp_parser_decltype)\n+\t(cp_parser_parameter_declaration)\n+\t(cp_parser_exception_specification_opt)\n+\t(cp_parser_exception_declaration): Likewise.\n+\t* pt.c (check_default_tmpl_args): Likewise.\n+\t* search.c (lookup_field_r): Likewise.\n+\n 2010-02-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/42399"}, {"sha": "f6cb70fbeec4c9caf44872ef52c043a0f12313b9", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09", "patch": "@@ -279,8 +279,9 @@ cp/init.o: cp/init.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) $(RTL_H) $(EXPR_H) \\\n cp/method.o: cp/method.c $(CXX_TREE_H) $(TM_H) toplev.h $(RTL_H) $(EXPR_H) \\\n   $(TM_P_H) $(TARGET_H) $(DIAGNOSTIC_H) gt-cp-method.h $(GIMPLE_H)\n cp/cvt.o: cp/cvt.c $(CXX_TREE_H) $(TM_H) cp/decl.h $(FLAGS_H) toplev.h \\\n-  convert.h $(TARGET_H)\n-cp/search.o: cp/search.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h $(RTL_H)\n+  convert.h $(TARGET_H) intl.h\n+cp/search.o: cp/search.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h $(RTL_H) \\\n+  intl.h\n cp/tree.o: cp/tree.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h $(RTL_H) \\\n   insn-config.h $(INTEGRATE_H) $(TREE_INLINE_H) $(REAL_H) gt-cp-tree.h \\\n   $(TARGET_H) debug.h $(TREE_FLOW_H) $(CGRAPH_H)\n@@ -309,7 +310,7 @@ cp/optimize.o: cp/optimize.c $(CXX_TREE_H) $(TM_H) rtl.h $(INTEGRATE_H) \\\n cp/mangle.o: cp/mangle.c $(CXX_TREE_H) $(TM_H) toplev.h $(REAL_H) \\\n   gt-cp-mangle.h $(TARGET_H) $(TM_P_H)\n cp/parser.o: cp/parser.c $(CXX_TREE_H) $(TM_H) $(DIAGNOSTIC_H) gt-cp-parser.h \\\n-  output.h $(TARGET_H) $(PLUGIN_H)\n+  output.h $(TARGET_H) $(PLUGIN_H) intl.h\n cp/cp-gimplify.o: cp/cp-gimplify.c $(CXX_TREE_H) toplev.h $(C_COMMON_H) \\\n \t$(TM_H) coretypes.h pointer-set.h tree-iterator.h\n "}, {"sha": "9dd0c596ac77eedb47fe31ea946c8a8929f57d09", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"flags.h\"\n #include \"cp-tree.h\"\n+#include \"intl.h\"\n #include \"convert.h\"\n #include \"toplev.h\"\n #include \"decl.h\"\n@@ -367,17 +368,17 @@ warn_ref_binding (tree reftype, tree intype, tree decl)\n       const char *msg;\n \n       if (CP_TYPE_VOLATILE_P (ttl) && decl)\n-\t  msg = \"initialization of volatile reference type %q#T from\"\n-\t    \" rvalue of type %qT\";\n+\tmsg = G_(\"initialization of volatile reference type %q#T from \"\n+\t         \"rvalue of type %qT\");\n       else if (CP_TYPE_VOLATILE_P (ttl))\n-\t  msg = \"conversion to volatile reference type %q#T \"\n-\t    \" from rvalue of type %qT\";\n+\tmsg = G_(\"conversion to volatile reference type %q#T \"\n+\t         \"from rvalue of type %qT\");\n       else if (decl)\n-\t  msg = \"initialization of non-const reference type %q#T from\"\n-\t    \" rvalue of type %qT\";\n+\tmsg = G_(\"initialization of non-const reference type %q#T from \"\n+\t         \"rvalue of type %qT\");\n       else\n-\t  msg = \"conversion to non-const reference type %q#T from\"\n-\t    \" rvalue of type %qT\";\n+\tmsg = G_(\"conversion to non-const reference type %q#T from \"\n+\t         \"rvalue of type %qT\");\n \n       permerror (input_location, msg, reftype, intype);\n     }"}, {"sha": "5256883565f34cb74d68e32edd043cf64ae935dc", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cpplib.h\"\n #include \"tree.h\"\n #include \"cp-tree.h\"\n+#include \"intl.h\"\n #include \"c-pragma.h\"\n #include \"decl.h\"\n #include \"flags.h\"\n@@ -4537,7 +4538,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t/* New types cannot be defined in the cast.  */\n \tsaved_message = parser->type_definition_forbidden_message;\n \tparser->type_definition_forbidden_message\n-\t  = \"types may not be defined in casts\";\n+\t  = G_(\"types may not be defined in casts\");\n \n \t/* Look for the opening `<'.  */\n \tcp_parser_require (parser, CPP_LESS, \"%<<%>\");\n@@ -4600,7 +4601,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t/* Types cannot be defined in a `typeid' expression.  */\n \tsaved_message = parser->type_definition_forbidden_message;\n \tparser->type_definition_forbidden_message\n-\t  = \"types may not be defined in a %<typeid%> expression\";\n+\t  = G_(\"types may not be defined in a %<typeid%> expression\");\n \t/* We can't be sure yet whether we're looking at a type-id or an\n \t   expression.  */\n \tcp_parser_parse_tentatively (parser);\n@@ -5837,7 +5838,7 @@ cp_parser_new_type_id (cp_parser* parser, tree *nelts)\n      complete.)  */\n   saved_message = parser->type_definition_forbidden_message;\n   parser->type_definition_forbidden_message\n-    = \"types may not be defined in a new-type-id\";\n+    = G_(\"types may not be defined in a new-type-id\");\n   /* Parse the type-specifier-seq.  */\n   cp_parser_type_specifier_seq (parser, /*is_declaration=*/false,\n \t\t\t\t/*is_trailing_return=*/false,\n@@ -6150,7 +6151,7 @@ cp_parser_cast_expression (cp_parser *parser, bool address_p, bool cast_p,\n       /* Types may not be defined in a cast.  */\n       saved_message = parser->type_definition_forbidden_message;\n       parser->type_definition_forbidden_message\n-\t= \"types may not be defined in casts\";\n+\t= G_(\"types may not be defined in casts\");\n       /* Consume the `('.  */\n       cp_lexer_consume_token (parser->lexer);\n       /* A very tricky bit is that `(struct S) { 3 }' is a\n@@ -8103,7 +8104,7 @@ cp_parser_condition (cp_parser* parser)\n      condition.  */\n   saved_message = parser->type_definition_forbidden_message;\n   parser->type_definition_forbidden_message\n-    = \"types may not be defined in conditions\";\n+    = G_(\"types may not be defined in conditions\");\n   /* Parse the type-specifier-seq.  */\n   cp_parser_type_specifier_seq (parser, /*is_declaration==*/true,\n \t\t\t\t/*is_trailing_return=*/false,\n@@ -9513,7 +9514,7 @@ cp_parser_decltype (cp_parser *parser)\n \n   /* And create the new one.  */\n   parser->type_definition_forbidden_message\n-    = \"types may not be defined in %<decltype%> expressions\";\n+    = G_(\"types may not be defined in %<decltype%> expressions\");\n \n   /* The restrictions on constant-expressions do not apply inside\n      decltype expressions.  */\n@@ -15022,7 +15023,7 @@ cp_parser_parameter_declaration (cp_parser *parser,\n   /* Type definitions may not appear in parameter types.  */\n   saved_message = parser->type_definition_forbidden_message;\n   parser->type_definition_forbidden_message\n-    = \"types may not be defined in parameter types\";\n+    = G_(\"types may not be defined in parameter types\");\n \n   /* Parse the declaration-specifiers.  */\n   cp_parser_decl_specifier_seq (parser,\n@@ -17212,7 +17213,7 @@ cp_parser_exception_specification_opt (cp_parser* parser)\n       /* Types may not be defined in an exception-specification.  */\n       saved_message = parser->type_definition_forbidden_message;\n       parser->type_definition_forbidden_message\n-\t= \"types may not be defined in an exception-specification\";\n+\t= G_(\"types may not be defined in an exception-specification\");\n       /* Parse the type-id-list.  */\n       type_id_list = cp_parser_type_id_list (parser);\n       /* Restore the saved message.  */\n@@ -17393,7 +17394,7 @@ cp_parser_exception_declaration (cp_parser* parser)\n   /* Types may not be defined in exception-declarations.  */\n   saved_message = parser->type_definition_forbidden_message;\n   parser->type_definition_forbidden_message\n-    = \"types may not be defined in exception-declarations\";\n+    = G_(\"types may not be defined in exception-declarations\");\n \n   /* Parse the type-specifier-seq.  */\n   cp_parser_type_specifier_seq (parser, /*is_declaration=*/true,"}, {"sha": "43cd105474ee98ad5509f01998ae462069a2f476", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09", "patch": "@@ -4112,16 +4112,19 @@ check_default_tmpl_args (tree decl, tree parms, int is_primary,\n \n   /* Figure out what error message to issue.  */\n   if (is_friend_decl == 2)\n-    msg = \"default template arguments may not be used in function template friend re-declaration\";\n+    msg = G_(\"default template arguments may not be used in function template \"\n+\t     \"friend re-declaration\");\n   else if (is_friend_decl)\n-    msg = \"default template arguments may not be used in function template friend declarations\";\n+    msg = G_(\"default template arguments may not be used in function template \"\n+\t     \"friend declarations\");\n   else if (TREE_CODE (decl) == FUNCTION_DECL && (cxx_dialect == cxx98))\n-    msg = (\"default template arguments may not be used in function templates \"\n-\t   \"without -std=c++0x or -std=gnu++0x\");\n+    msg = G_(\"default template arguments may not be used in function templates \"\n+\t     \"without -std=c++0x or -std=gnu++0x\");\n   else if (is_partial)\n-    msg = \"default template arguments may not be used in partial specializations\";\n+    msg = G_(\"default template arguments may not be used in \"\n+\t     \"partial specializations\");\n   else\n-    msg = \"default argument for template parameter for class enclosing %qD\";\n+    msg = G_(\"default argument for template parameter for class enclosing %qD\");\n \n   if (current_class_type && TYPE_BEING_DEFINED (current_class_type))\n     /* If we're inside a class definition, there's no need to\n@@ -4172,7 +4175,8 @@ check_default_tmpl_args (tree decl, tree parms, int is_primary,\n       /* At this point, if we're still interested in issuing messages,\n \t they must apply to classes surrounding the object declared.  */\n       if (msg)\n-\tmsg = \"default argument for template parameter for class enclosing %qD\";\n+\tmsg = G_(\"default argument for template parameter for class \"\n+\t\t \"enclosing %qD\");\n     }\n \n   return no_errors;"}, {"sha": "772ae3b1fbe8074ce2cdea083aee301d46fe7241", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=f25a2b52ab58ffa3d9c5ba773181d0a9515f9e09", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"cp-tree.h\"\n+#include \"intl.h\"\n #include \"obstack.h\"\n #include \"flags.h\"\n #include \"rtl.h\"\n@@ -1101,7 +1102,7 @@ lookup_field_r (tree binfo, void *data)\n \t  /* Add the new value.  */\n \t  lfi->ambiguous = tree_cons (NULL_TREE, nval, lfi->ambiguous);\n \t  TREE_TYPE (lfi->ambiguous) = error_mark_node;\n-\t  lfi->errstr = \"request for member %qD is ambiguous\";\n+\t  lfi->errstr = G_(\"request for member %qD is ambiguous\");\n \t}\n     }\n   else"}]}