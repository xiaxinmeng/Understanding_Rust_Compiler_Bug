{"sha": "e23390d29e19a8a6aea06fd3c4cc3990c9977ac8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIzMzkwZDI5ZTE5YThhNmFlYTA2ZmQzYzRjYzM5OTBjOTk3N2FjOA==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-10-03T20:46:26Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-10-03T20:46:26Z"}, "message": "re PR fortran/91497 (-Wconversion warns when doing explicit type conversion)\n\n2019-10-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/91497\n\t* simplify.c (gfc_simplify_dble, simplify_intconv, gfc_simplify_real,\n\tgfc_simplify_sngl): Disable -Wconversion and -Wconversion-extra\n\twarnings for explicit conversion of literal constants.\n\n2019-10-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/91497\n\t* gfortran.dg/pr91497.f90: New test.\n\nFrom-SVN: r276532", "tree": {"sha": "a5f8481646a3870a8fef6c6dcdafad2ce7158667", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5f8481646a3870a8fef6c6dcdafad2ce7158667"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e23390d29e19a8a6aea06fd3c4cc3990c9977ac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23390d29e19a8a6aea06fd3c4cc3990c9977ac8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e23390d29e19a8a6aea06fd3c4cc3990c9977ac8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23390d29e19a8a6aea06fd3c4cc3990c9977ac8/comments", "author": null, "committer": null, "parents": [{"sha": "24ec3cc957c4181d8da9972cb2aa212a3e0cec1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ec3cc957c4181d8da9972cb2aa212a3e0cec1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24ec3cc957c4181d8da9972cb2aa212a3e0cec1c"}], "stats": {"total": 184, "additions": 183, "deletions": 1}, "files": [{"sha": "9a2a800408bf6f365fb40a02f9e65825241361af", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23390d29e19a8a6aea06fd3c4cc3990c9977ac8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23390d29e19a8a6aea06fd3c4cc3990c9977ac8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e23390d29e19a8a6aea06fd3c4cc3990c9977ac8", "patch": "@@ -1,3 +1,10 @@\n+2019-10-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/91497\n+\t* simplify.c (gfc_simplify_dble, simplify_intconv, gfc_simplify_real,\n+\tgfc_simplify_sngl): Disable -Wconversion and -Wconversion-extra\n+\twarnings for explicit conversion of literal constants.\n+\n 2019-10-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* primary.c (match_real_constant): Remove shadowing local vars."}, {"sha": "8c1577ec269bf21b755703b5ae2a18a023084666", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23390d29e19a8a6aea06fd3c4cc3990c9977ac8/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23390d29e19a8a6aea06fd3c4cc3990c9977ac8/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=e23390d29e19a8a6aea06fd3c4cc3990c9977ac8", "patch": "@@ -2189,11 +2189,22 @@ gfc_expr *\n gfc_simplify_dble (gfc_expr *e)\n {\n   gfc_expr *result = NULL;\n+  int tmp1, tmp2;\n \n   if (e->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n+  /* For explicit conversion, turn off -Wconversion and -Wconversion-extra\n+     warnings.  */\n+  tmp1 = warn_conversion;\n+  tmp2 = warn_conversion_extra;\n+  warn_conversion = warn_conversion_extra = 0;\n+\n   result = gfc_convert_constant (e, BT_REAL, gfc_default_double_kind);\n+\n+  warn_conversion = tmp1;\n+  warn_conversion_extra = tmp2;\n+\n   if (result == &gfc_bad_expr)\n     return &gfc_bad_expr;\n \n@@ -3572,6 +3583,7 @@ static gfc_expr *\n simplify_intconv (gfc_expr *e, int kind, const char *name)\n {\n   gfc_expr *result = NULL;\n+  int tmp1, tmp2;\n \n   /* Convert BOZ to integer, and return without range checking.  */\n   if (e->ts.type == BT_BOZ)\n@@ -3585,7 +3597,17 @@ simplify_intconv (gfc_expr *e, int kind, const char *name)\n   if (e->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n+  /* For explicit conversion, turn off -Wconversion and -Wconversion-extra\n+     warnings.  */\n+  tmp1 = warn_conversion;\n+  tmp2 = warn_conversion_extra;\n+  warn_conversion = warn_conversion_extra = 0;\n+\n   result = gfc_convert_constant (e, BT_INTEGER, kind);\n+\n+  warn_conversion = tmp1;\n+  warn_conversion_extra = tmp2;\n+\n   if (result == &gfc_bad_expr)\n     return &gfc_bad_expr;\n \n@@ -6472,7 +6494,7 @@ gfc_expr *\n gfc_simplify_real (gfc_expr *e, gfc_expr *k)\n {\n   gfc_expr *result = NULL;\n-  int kind;\n+  int kind, tmp1, tmp2;\n \n   /* Convert BOZ to real, and return without range checking.  */\n   if (e->ts.type == BT_BOZ)\n@@ -6500,7 +6522,17 @@ gfc_simplify_real (gfc_expr *e, gfc_expr *k)\n   if (e->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n+  /* For explicit conversion, turn off -Wconversion and -Wconversion-extra\n+     warnings.  */\n+  tmp1 = warn_conversion;\n+  tmp2 = warn_conversion_extra;\n+  warn_conversion = warn_conversion_extra = 0;\n+\n   result = gfc_convert_constant (e, BT_REAL, kind);\n+\n+  warn_conversion = tmp1;\n+  warn_conversion_extra = tmp2;\n+\n   if (result == &gfc_bad_expr)\n     return &gfc_bad_expr;\n \n@@ -7551,11 +7583,22 @@ gfc_expr *\n gfc_simplify_sngl (gfc_expr *a)\n {\n   gfc_expr *result;\n+  int tmp1, tmp2;\n \n   if (a->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n+  /* For explicit conversion, turn off -Wconversion and -Wconversion-extra\n+     warnings.  */\n+  tmp1 = warn_conversion;\n+  tmp2 = warn_conversion_extra;\n+  warn_conversion = warn_conversion_extra = 0;\n+\n   result = gfc_real2real (a, gfc_default_real_kind);\n+\n+  warn_conversion = tmp1;\n+  warn_conversion_extra = tmp2;\n+\n   return range_check (result, \"SNGL\");\n }\n "}, {"sha": "fdfcde25520a6cca07a2f106d4811568b0d82197", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23390d29e19a8a6aea06fd3c4cc3990c9977ac8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23390d29e19a8a6aea06fd3c4cc3990c9977ac8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e23390d29e19a8a6aea06fd3c4cc3990c9977ac8", "patch": "@@ -1,3 +1,8 @@\n+2019-10-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/91497\n+\t* gfortran.dg/pr91497.f90: New test.\n+\n 2019-10-03  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* g++.dg/tree-ssa/pr61034.C: Add --param max-inline-insns-single-O2=200."}, {"sha": "aa06a49bf3f84bedf797eb0544f006a3bcf5c513", "filename": "gcc/testsuite/gfortran.dg/pr91497.f90", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23390d29e19a8a6aea06fd3c4cc3990c9977ac8/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91497.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23390d29e19a8a6aea06fd3c4cc3990c9977ac8/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91497.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91497.f90?ref=e23390d29e19a8a6aea06fd3c4cc3990c9977ac8", "patch": "@@ -0,0 +1,127 @@\n+! { dg-do compile }\n+! { dg-options \"-Wall\" }\n+! Code contributed by Manfred Schwarb <manfred99 at gmx dot ch>\n+! PR fortran/91497\n+!\n+! Prior to applying the patch for this PR, the following code\n+! would generate numerous conversion warnings.\n+!\n+program foo\n+\n+      real*4 a,aa\n+      real*8 b,bb\n+      real*10 c,cc\n+      real*16 d\n+      integer*2 e,ee\n+      integer*4 f,ff\n+      integer*8 g,gg\n+      PARAMETER(a=3.1415927_4)\n+      PARAMETER(b=3.1415927_8)\n+      PARAMETER(c=3.1415927_10)\n+      PARAMETER(d=3.1415927_16)\n+      PARAMETER(e=123_2)\n+      PARAMETER(f=123_4)\n+      PARAMETER(g=123_8)\n+\n+      aa=REAL(b)\n+      aa=REAL(c)\n+      aa=REAL(d)\n+      aa=REAL(e)\n+      aa=REAL(f)\n+      aa=REAL(g)\n+      aa=FLOAT(f)\n+      aa=FLOOR(b)\n+      aa=FLOOR(c)\n+      aa=FLOOR(d)\n+      aa=CEILING(b)\n+      aa=CEILING(c)\n+      aa=CEILING(d)\n+      !---unknown but documented type conversions:\n+      !!aa=FLOATI(e)\n+      !!aa=FLOATJ(f)\n+      !!aa=FLOATK(g)\n+      !---documentation is wrong for sngl:\n+      aa=SNGL(c)\n+      aa=SNGL(d)\n+      bb=REAL(c, kind=8)\n+      bb=REAL(d, kind=8)\n+      bb=DBLE(c)\n+      bb=DBLE(d)\n+      bb=DFLOAT(g)\n+      bb=FLOOR(c)\n+      bb=FLOOR(d)\n+      bb=CEILING(c)\n+      bb=CEILING(d)\n+      cc=REAL(d, kind=10)\n+      cc=FLOOR(d)\n+      cc=CEILING(d)\n+\n+      aa=AINT(b)\n+      aa=ANINT(b)\n+      aa=AINT(c)\n+      aa=ANINT(c)\n+      aa=AINT(d)\n+      aa=ANINT(d)\n+      bb=DINT(b)\n+      bb=DNINT(b)\n+\n+      ee=INT(a, kind=2)\n+      ee=NINT(a, kind=2)\n+      ee=INT(b, kind=2)\n+      ee=NINT(b, kind=2)\n+      ee=INT(c, kind=2)\n+      ee=NINT(c, kind=2)\n+      ee=INT(d, kind=2)\n+      ee=NINT(d, kind=2)\n+      ee=INT(f, kind=2)\n+      ee=INT(g, kind=2)\n+      ee=IFIX(a)\n+      ee=IDINT(b)\n+      ee=IDNINT(b)\n+      ee=INT2(a)\n+      ee=INT2(b)\n+      ee=INT2(c)\n+      ee=INT2(d)\n+      ee=INT2(f)\n+      ee=INT2(g)\n+\n+      ff=INT(a, kind=4)\n+      ff=NINT(a, kind=4)\n+      ff=INT(b, kind=4)\n+      ff=NINT(b, kind=4)\n+      ff=INT(c, kind=4)\n+      ff=NINT(c, kind=4)\n+      ff=INT(d, kind=4)\n+      ff=NINT(d, kind=4)\n+      ff=INT(f, kind=4)\n+      ff=INT(g, kind=4)\n+      ff=IFIX(a)\n+      ff=IDINT(b)\n+      ff=IDNINT(b)\n+      !---LONG not allowed anymore in gfortran 10 (?):\n+      !!ff=LONG(a)\n+      !!ff=LONG(b)\n+      !!ff=LONG(c)\n+      !!ff=LONG(d)\n+      !!ff=LONG(g)\n+\n+      gg=INT(a, kind=8)\n+      gg=NINT(a, kind=8)\n+      gg=INT(b, kind=8)\n+      gg=NINT(b, kind=8)\n+      gg=INT(c, kind=8)\n+      gg=NINT(c, kind=8)\n+      gg=INT(d, kind=8)\n+      gg=NINT(d, kind=8)\n+      gg=INT(f, kind=8)\n+      gg=INT(g, kind=8)\n+      gg=IFIX(a)\n+      gg=IDINT(b)\n+      gg=IDNINT(b)\n+      gg=INT8(a)\n+      gg=INT8(b)\n+      gg=INT8(c)\n+      gg=INT8(d)\n+      gg=INT8(g)\n+end\n+"}]}