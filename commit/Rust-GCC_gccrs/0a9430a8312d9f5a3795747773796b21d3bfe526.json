{"sha": "0a9430a8312d9f5a3795747773796b21d3bfe526", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE5NDMwYTgzMTJkOWY1YTM3OTU3NDc3NzM3OTZiMjFkM2JmZTUyNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-04-03T09:05:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-04-03T09:05:38Z"}, "message": "re PR middle-end/30704 (Incorrect constant generation for long long)\n\n\tPR middle-end/30704\n\t* fold-const.c (native_encode_real): Encode real.c provided longs\n\tas a series of 32-bit native integers.\n\t(native_interpret_real): Interpret buffer as a series of 32-bit\n\tnative integers.\n\n\t* gcc.c-torture/execute/ieee/pr30704.c: New test.\n\nFrom-SVN: r123455", "tree": {"sha": "602f9d225374a7b7691e8fa6a89f62777839aed1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/602f9d225374a7b7691e8fa6a89f62777839aed1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a9430a8312d9f5a3795747773796b21d3bfe526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9430a8312d9f5a3795747773796b21d3bfe526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a9430a8312d9f5a3795747773796b21d3bfe526", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9430a8312d9f5a3795747773796b21d3bfe526/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb9af792f2c0e8934f6b537ec12f8211d1fba505", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9af792f2c0e8934f6b537ec12f8211d1fba505", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb9af792f2c0e8934f6b537ec12f8211d1fba505"}], "stats": {"total": 104, "additions": 88, "deletions": 16}, "files": [{"sha": "de6bea5217939318a70be508787e63bb83f857e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9430a8312d9f5a3795747773796b21d3bfe526/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9430a8312d9f5a3795747773796b21d3bfe526/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a9430a8312d9f5a3795747773796b21d3bfe526", "patch": "@@ -1,3 +1,11 @@\n+2007-04-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/30704\n+\t* fold-const.c (native_encode_real): Encode real.c provided longs\n+\tas a series of 32-bit native integers.\n+\t(native_interpret_real): Interpret buffer as a series of 32-bit\n+\tnative integers.\n+\n 2007-04-03  Richard Guenther  <rguenther@suse.de>\n \n \t* genpreds.c (write_insn_constraint_len): Write function"}, {"sha": "a8b6f349d95f3acd83970b3eac959a938fb8e6ae", "filename": "gcc/fold-const.c", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9430a8312d9f5a3795747773796b21d3bfe526/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9430a8312d9f5a3795747773796b21d3bfe526/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0a9430a8312d9f5a3795747773796b21d3bfe526", "patch": "@@ -7162,7 +7162,7 @@ native_encode_real (tree expr, unsigned char *ptr, int len)\n {\n   tree type = TREE_TYPE (expr);\n   int total_bytes = GET_MODE_SIZE (TYPE_MODE (type));\n-  int byte, offset, word, words;\n+  int byte, offset, word, words, bitpos;\n   unsigned char value;\n \n   /* There are always 32 bits in each long, no matter the size of\n@@ -7172,19 +7172,20 @@ native_encode_real (tree expr, unsigned char *ptr, int len)\n \n   if (total_bytes > len)\n     return 0;\n-  words = total_bytes / UNITS_PER_WORD;\n+  words = 32 / UNITS_PER_WORD;\n \n   real_to_target (tmp, TREE_REAL_CST_PTR (expr), TYPE_MODE (type));\n \n-  for (byte = 0; byte < total_bytes; byte++)\n+  for (bitpos = 0; bitpos < total_bytes * BITS_PER_UNIT;\n+       bitpos += BITS_PER_UNIT)\n     {\n-      int bitpos = byte * BITS_PER_UNIT;\n+      byte = (bitpos / BITS_PER_UNIT) & 3;\n       value = (unsigned char) (tmp[bitpos / 32] >> (bitpos & 31));\n \n-      if (total_bytes > UNITS_PER_WORD)\n+      if (UNITS_PER_WORD < 4)\n \t{\n \t  word = byte / UNITS_PER_WORD;\n-\t  if (FLOAT_WORDS_BIG_ENDIAN)\n+\t  if (WORDS_BIG_ENDIAN)\n \t    word = (words - 1) - word;\n \t  offset = word * UNITS_PER_WORD;\n \t  if (BYTES_BIG_ENDIAN)\n@@ -7193,8 +7194,8 @@ native_encode_real (tree expr, unsigned char *ptr, int len)\n \t    offset += byte % UNITS_PER_WORD;\n \t}\n       else\n-\toffset = BYTES_BIG_ENDIAN ? (total_bytes - 1) - byte : byte;\n-      ptr[offset] = value;\n+\toffset = BYTES_BIG_ENDIAN ? 3 - byte : byte;\n+      ptr[offset + ((bitpos / BITS_PER_UNIT) & ~3)] = value;\n     }\n   return total_bytes;\n }\n@@ -7350,7 +7351,7 @@ native_interpret_real (tree type, unsigned char *ptr, int len)\n {\n   enum machine_mode mode = TYPE_MODE (type);\n   int total_bytes = GET_MODE_SIZE (mode);\n-  int byte, offset, word, words;\n+  int byte, offset, word, words, bitpos;\n   unsigned char value;\n   /* There are always 32 bits in each long, no matter the size of\n      the hosts long.  We handle floating point representations with\n@@ -7361,16 +7362,17 @@ native_interpret_real (tree type, unsigned char *ptr, int len)\n   total_bytes = GET_MODE_SIZE (TYPE_MODE (type));\n   if (total_bytes > len || total_bytes > 24)\n     return NULL_TREE;\n-  words = total_bytes / UNITS_PER_WORD;\n+  words = 32 / UNITS_PER_WORD;\n \n   memset (tmp, 0, sizeof (tmp));\n-  for (byte = 0; byte < total_bytes; byte++)\n+  for (bitpos = 0; bitpos < total_bytes * BITS_PER_UNIT;\n+       bitpos += BITS_PER_UNIT)\n     {\n-      int bitpos = byte * BITS_PER_UNIT;\n-      if (total_bytes > UNITS_PER_WORD)\n+      byte = (bitpos / BITS_PER_UNIT) & 3;\n+      if (UNITS_PER_WORD < 4)\n \t{\n \t  word = byte / UNITS_PER_WORD;\n-\t  if (FLOAT_WORDS_BIG_ENDIAN)\n+\t  if (WORDS_BIG_ENDIAN)\n \t    word = (words - 1) - word;\n \t  offset = word * UNITS_PER_WORD;\n \t  if (BYTES_BIG_ENDIAN)\n@@ -7379,8 +7381,8 @@ native_interpret_real (tree type, unsigned char *ptr, int len)\n \t    offset += byte % UNITS_PER_WORD;\n \t}\n       else\n-\toffset = BYTES_BIG_ENDIAN ? (total_bytes - 1) - byte : byte;\n-      value = ptr[offset];\n+\toffset = BYTES_BIG_ENDIAN ? 3 - byte : byte;\n+      value = ptr[offset + ((bitpos / BITS_PER_UNIT) & ~3)];\n \n       tmp[bitpos / 32] |= (unsigned long)value << (bitpos & 31);\n     }"}, {"sha": "5570d4806da905857539d9a8fa428b662c933868", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9430a8312d9f5a3795747773796b21d3bfe526/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9430a8312d9f5a3795747773796b21d3bfe526/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a9430a8312d9f5a3795747773796b21d3bfe526", "patch": "@@ -1,3 +1,8 @@\n+2007-04-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/30704\n+\t* gcc.c-torture/execute/ieee/pr30704.c: New test.\n+\n 2007-04-02  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/31187"}, {"sha": "2d062a97d62a3c489f54dd95925bb1283f585dd2", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/pr30704.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9430a8312d9f5a3795747773796b21d3bfe526/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fpr30704.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9430a8312d9f5a3795747773796b21d3bfe526/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fpr30704.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fpr30704.c?ref=0a9430a8312d9f5a3795747773796b21d3bfe526", "patch": "@@ -0,0 +1,57 @@\n+/* PR middle-end/30704 */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern void abort (void);\n+extern int memcmp (const void *, const void *, size_t);\n+extern void *memcpy (void *, const void *, size_t);\n+\n+long long\n+__attribute__((noinline))\n+f1 (void)\n+{\n+  long long t;\n+  double d = 0x0.fffffffffffff000p-1022;\n+  memcpy (&t, &d, sizeof (long long));\n+  return t;\n+}\n+\n+double\n+__attribute__((noinline))\n+f2 (void)\n+{\n+  long long t = 0x000fedcba9876543LL;\n+  double d;\n+  memcpy (&d, &t, sizeof (long long));\n+  return d;\n+}\n+\n+int\n+main ()\n+{\n+  union\n+  {\n+    long long ll;\n+    double d;\n+  } u;\n+\n+  if (sizeof (long long) != sizeof (double) || __DBL_MIN_EXP__ != -1021)\n+    return 0;\n+\n+  u.ll = f1 ();\n+  if (u.d != 0x0.fffffffffffff000p-1022)\n+    abort ();\n+\n+  u.d = f2 ();\n+  if (u.ll != 0x000fedcba9876543LL)\n+    abort ();\n+\n+  double b = 234.0;\n+  long long c;\n+  double d = b;\n+  memcpy (&c, &b, sizeof (double));\n+  long long e = c;\n+  if (memcmp (&e, &d, sizeof (double)) != 0)\n+    abort ();\n+\n+  return 0;\n+}"}]}