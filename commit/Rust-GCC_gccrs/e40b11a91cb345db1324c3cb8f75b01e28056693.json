{"sha": "e40b11a91cb345db1324c3cb8f75b01e28056693", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQwYjExYTkxY2IzNDVkYjEzMjRjM2NiOGY3NWIwMWUyODA1NjY5Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-16T21:34:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-16T21:34:55Z"}, "message": "libstdc++: Strip cv-qualifiers in std::atomic<FP> (PR 95282)\n\nThis improves the previous fix for PR 95282, and extends it to also\napply to the exchange function (which has a similar problem and would\nbecome ill-formed with my proposed fix for PR 95378).\n\n\tPR libstdc++/95282\n\t* include/bits/atomic_base.h (__atomic_impl::load): Use the _Val\n\talias instead of deducing _Tp as an unqualified type.\n\t(__atomic_impl::exchange): Use the _Val alias to remove volatile\n\tfrom the reinterpret_cast result type.", "tree": {"sha": "31db062e48f4fa492a5f246413308332f5316ca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31db062e48f4fa492a5f246413308332f5316ca7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e40b11a91cb345db1324c3cb8f75b01e28056693", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e40b11a91cb345db1324c3cb8f75b01e28056693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e40b11a91cb345db1324c3cb8f75b01e28056693", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e40b11a91cb345db1324c3cb8f75b01e28056693/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc799df98f6eaf73763a069f7854e490a0416573", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc799df98f6eaf73763a069f7854e490a0416573", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc799df98f6eaf73763a069f7854e490a0416573"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "015acef83c47d955789720a2c80f39986ade72c4", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e40b11a91cb345db1324c3cb8f75b01e28056693/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e40b11a91cb345db1324c3cb8f75b01e28056693/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=e40b11a91cb345db1324c3cb8f75b01e28056693", "patch": "@@ -870,21 +870,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __atomic_store(__ptr, std::__addressof(__t), int(__m)); }\n \n     template<typename _Tp>\n-      _GLIBCXX_ALWAYS_INLINE _Tp\n-      load(const volatile _Tp* __ptr, memory_order __m) noexcept\n+      _GLIBCXX_ALWAYS_INLINE _Val<_Tp>\n+      load(const _Tp* __ptr, memory_order __m) noexcept\n       {\n \talignas(_Tp) unsigned char __buf[sizeof(_Tp)];\n-\t_Tp* __dest = reinterpret_cast<_Tp*>(__buf);\n+\tauto* __dest = reinterpret_cast<_Val<_Tp>*>(__buf);\n \t__atomic_load(__ptr, __dest, int(__m));\n \treturn *__dest;\n       }\n \n     template<typename _Tp>\n-      _GLIBCXX_ALWAYS_INLINE _Tp\n+      _GLIBCXX_ALWAYS_INLINE _Val<_Tp>\n       exchange(_Tp* __ptr, _Val<_Tp> __desired, memory_order __m) noexcept\n       {\n         alignas(_Tp) unsigned char __buf[sizeof(_Tp)];\n-\t_Tp* __dest = reinterpret_cast<_Tp*>(__buf);\n+\tauto* __dest = reinterpret_cast<_Val<_Tp>*>(__buf);\n \t__atomic_exchange(__ptr, std::__addressof(__desired), __dest, int(__m));\n \treturn *__dest;\n       }"}]}