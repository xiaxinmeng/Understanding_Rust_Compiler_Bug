{"sha": "22f46473c7f98a4f414db8728ba64a60a6e23a16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJmNDY0NzNjN2Y5OGE0ZjQxNGRiODcyOGJhNjRhNjBhNmUyM2ExNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-15T09:05:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-15T09:05:07Z"}, "message": "[multiple changes]\n\n2012-03-15  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_util.adb (Initialized_By_Ctrl_Function): Do not loop over\n\tselector names as the function call always appears at the top selected\n\tcomponent.\n\n2012-03-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Validate_Access_Subprogram_Instance): keep\n\tMode_Conformance check for older versions of the language.\n\n2012-03-15  Yannick Moy  <moy@adacore.com>\n\n\t* gnat_ugn.texi Document the extension of option -gnatw.t.\n\t* sem_ch3.adb (Analyze_Declaration): Check for suspicious\n\tcontracts only after contract cases have been semantically\n\tanalyzed.\n\t* sem_ch6.adb (Check_Subprogram_Contract): Consider also Ensures\n\tcomponents of contract cases for detecting suspicious contracts.\n\nFrom-SVN: r185417", "tree": {"sha": "52201626abb84b459a35501a273881a6f05bc0ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52201626abb84b459a35501a273881a6f05bc0ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22f46473c7f98a4f414db8728ba64a60a6e23a16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f46473c7f98a4f414db8728ba64a60a6e23a16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22f46473c7f98a4f414db8728ba64a60a6e23a16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f46473c7f98a4f414db8728ba64a60a6e23a16/comments", "author": null, "committer": null, "parents": [{"sha": "a59205fa161b77c89cb8cfb0a4d10bab5f9a257a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59205fa161b77c89cb8cfb0a4d10bab5f9a257a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a59205fa161b77c89cb8cfb0a4d10bab5f9a257a"}], "stats": {"total": 213, "additions": 165, "deletions": 48}, "files": [{"sha": "e8d4a5b2ad13f3439a2f2af7e0ceee3ab44e2bdd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f46473c7f98a4f414db8728ba64a60a6e23a16/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f46473c7f98a4f414db8728ba64a60a6e23a16/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=22f46473c7f98a4f414db8728ba64a60a6e23a16", "patch": "@@ -1,3 +1,23 @@\n+2012-03-15  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_util.adb (Initialized_By_Ctrl_Function): Do not loop over\n+\tselector names as the function call always appears at the top selected\n+\tcomponent.\n+\n+2012-03-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Validate_Access_Subprogram_Instance): keep\n+\tMode_Conformance check for older versions of the language.\n+\n+2012-03-15  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat_ugn.texi Document the extension of option -gnatw.t.\n+\t* sem_ch3.adb (Analyze_Declaration): Check for suspicious\n+\tcontracts only after contract cases have been semantically\n+\tanalyzed.\n+\t* sem_ch6.adb (Check_Subprogram_Contract): Consider also Ensures\n+\tcomponents of contract cases for detecting suspicious contracts.\n+\n 2012-03-15  Yannick Moy  <moy@adacore.com>\n \n \t* aspects.adb, aspects.ads (Aspect_Id): New GNAT aspect"}, {"sha": "ae7f2b95467242af2b10b2a0d9492fd947ac3c36", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f46473c7f98a4f414db8728ba64a60a6e23a16/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f46473c7f98a4f414db8728ba64a60a6e23a16/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=22f46473c7f98a4f414db8728ba64a60a6e23a16", "patch": "@@ -3967,16 +3967,11 @@ package body Exp_Util is\n             Expr := Name (Expr);\n          end if;\n \n-         --  The function call may appear in object.operation format. Strip\n-         --  all prefixes and retrieve the function name.\n+         --  The function call may appear in object.operation format\n \n-         loop\n-            if Nkind (Expr) = N_Selected_Component then\n-               Expr := Selector_Name (Expr);\n-            else\n-               exit;\n-            end if;\n-         end loop;\n+         if Nkind (Expr) = N_Selected_Component then\n+            Expr := Selector_Name (Expr);\n+         end if;\n \n          return\n            Nkind_In (Expr, N_Expanded_Name, N_Identifier)"}, {"sha": "365a4478a1dcfa4b6315b86322051f262708d504", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f46473c7f98a4f414db8728ba64a60a6e23a16/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f46473c7f98a4f414db8728ba64a60a6e23a16/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=22f46473c7f98a4f414db8728ba64a60a6e23a16", "patch": "@@ -5696,9 +5696,11 @@ This switch suppresses warnings for tracking of deleted conditional code.\n @emph{Activate warnings on suspicious contracts.}\n @cindex @option{-gnatw.t} (@command{gcc})\n This switch activates warnings on suspicious postconditions (whether a\n-pragma @code{Postcondition} or a @code{Post} aspect in Ada 2012). A\n-function postcondition is suspicious when it does not mention the result\n-of the function. A procedure postcondition is suspicious when it only\n+pragma @code{Postcondition} or a @code{Post} aspect in Ada 2012)\n+and suspicious contract cases (pragma @code{Contract_Case}). A\n+function postcondition or contract case is suspicious when no postcondition\n+or contract case for this function mentions the result of the function.\n+A procedure postcondition or contract case is suspicious when it only\n refers to the pre-state of the procedure, because in that case it should\n rather be expressed as a precondition. The default is that such warnings\n are not generated. This warning can also be turned on using @option{-gnatwa}."}, {"sha": "5ab842d36731aad89930e191561edb1af1569366", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f46473c7f98a4f414db8728ba64a60a6e23a16/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f46473c7f98a4f414db8728ba64a60a6e23a16/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=22f46473c7f98a4f414db8728ba64a60a6e23a16", "patch": "@@ -10433,17 +10433,29 @@ package body Sem_Ch12 is\n             Abandon_Instantiation (Actual);\n          end if;\n \n-         --  In accordance with AI05-288 (which is an Ada 2012 AI that is a\n-         --  binding intepretation to be applied to previous versions of Ada\n-         --  as well as Ada 2012), actuals for access_to_subprograms must be\n+         --  According to AI05-288, actuals for access_to_subprograms must be\n          --  subtype conformant with the generic formal. Previous to AI05-288\n          --  only mode conformance was required.\n \n-         Check_Subtype_Conformant\n-           (Designated_Type (Act_T),\n-            Designated_Type (A_Gen_T),\n-            Actual,\n-            Get_Inst => True);\n+         --  This is a binding interpretation that applies to previous versions\n+         --  of the language, but for now we retain the milder check in order\n+         --  to preserve ACATS tests.\n+         --  These will be protested eventually ???\n+\n+         if Ada_Version < Ada_2012 then\n+            Check_Mode_Conformant\n+              (Designated_Type (Act_T),\n+               Designated_Type (A_Gen_T),\n+               Actual,\n+               Get_Inst => True);\n+\n+         else\n+            Check_Subtype_Conformant\n+              (Designated_Type (Act_T),\n+               Designated_Type (A_Gen_T),\n+               Actual,\n+               Get_Inst => True);\n+         end if;\n \n          if Ekind (Base_Type (Act_T)) = E_Access_Protected_Subprogram_Type then\n             if Ekind (A_Gen_T) = E_Access_Subprogram_Type then"}, {"sha": "71b1fb44f3f188120d6b3e488339d81aef941c4d", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f46473c7f98a4f414db8728ba64a60a6e23a16/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f46473c7f98a4f414db8728ba64a60a6e23a16/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=22f46473c7f98a4f414db8728ba64a60a6e23a16", "patch": "@@ -2196,19 +2196,26 @@ package body Sem_Ch3 is\n                Spec := Specification (Original_Node (Decl));\n                Sent := Defining_Unit_Name (Spec);\n \n+               --  Analyze preconditions and postconditions\n+\n                Prag := Spec_PPC_List (Contract (Sent));\n                while Present (Prag) loop\n                   Analyze_PPC_In_Decl_Part (Prag, Sent);\n                   Prag := Next_Pragma (Prag);\n                end loop;\n \n-               Check_Subprogram_Contract (Sent);\n+               --  Analyze contract-cases and test-cases\n \n                Prag := Spec_CTC_List (Contract (Sent));\n                while Present (Prag) loop\n                   Analyze_CTC_In_Decl_Part (Prag, Sent);\n                   Prag := Next_Pragma (Prag);\n                end loop;\n+\n+               --  At this point, entities have been attached to identifiers.\n+               --  This is required to be able to detect suspicious contracts.\n+\n+               Check_Subprogram_Contract (Sent);\n             end if;\n \n             Next (Decl);"}, {"sha": "13fc5aba172a74eeb65ed432d38c470569fef0f3", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 108, "deletions": 27, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f46473c7f98a4f414db8728ba64a60a6e23a16/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f46473c7f98a4f414db8728ba64a60a6e23a16/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=22f46473c7f98a4f414db8728ba64a60a6e23a16", "patch": "@@ -6953,6 +6953,9 @@ package body Sem_Ch6 is\n       --  Last postcondition on the subprogram, or else Empty if either no\n       --  postcondition or only inherited postconditions.\n \n+      Last_Contract_Case : Node_Id := Empty;\n+      --  Last contract-case on the subprogram, or else Empty\n+\n       Attribute_Result_Mentioned : Boolean := False;\n       --  Whether attribute 'Result is mentioned in a postcondition\n \n@@ -6971,9 +6974,14 @@ package body Sem_Ch6 is\n       --  reference to attribute 'Old, in order to ignore its prefix, which\n       --  is precisely evaluated in the pre-state. Otherwise return OK.\n \n+      procedure Process_Contract_Cases (Spec : Node_Id);\n+      --  This processes the Spec_CTC_List from Spec, processing any contract\n+      --  case from the list. The caller has checked that Spec_CTC_List is\n+      --  non-Empty.\n+\n       procedure Process_Post_Conditions (Spec : Node_Id; Class : Boolean);\n       --  This processes the Spec_PPC_List from Spec, processing any\n-      --  postconditions from the list. If Class is True, then only\n+      --  postcondition from the list. If Class is True, then only\n       --  postconditions marked with Class_Present are considered. The\n       --  caller has checked that Spec_PPC_List is non-Empty.\n \n@@ -7056,6 +7064,57 @@ package body Sem_Ch6 is\n          end if;\n       end Check_Post_State;\n \n+      ----------------------------\n+      -- Process_Contract_Cases --\n+      ----------------------------\n+\n+      procedure Process_Contract_Cases (Spec : Node_Id) is\n+         Prag    : Node_Id;\n+         Arg     : Node_Id;\n+         Ignored : Traverse_Final_Result;\n+         pragma Unreferenced (Ignored);\n+\n+      begin\n+         Prag := Spec_CTC_List (Contract (Spec));\n+\n+         loop\n+            --  Retrieve the Ensures component of the contract-case, if any\n+\n+            Arg := Get_Ensures_From_Case_Pragma (Prag);\n+\n+            if Pragma_Name (Prag) = Name_Contract_Case then\n+\n+               --  Since contract-cases are listed in reverse order, the first\n+               --  contract-case in the list is the last in the source.\n+\n+               if No (Last_Contract_Case) then\n+                  Last_Contract_Case := Prag;\n+               end if;\n+\n+               --  For functions, look for presence of 'Result in Ensures\n+\n+               if Ekind_In (Spec_Id, E_Function, E_Generic_Function) then\n+                  Ignored := Find_Attribute_Result (Arg);\n+               end if;\n+\n+               --  For each individual contract-case, look for presence\n+               --  of an expression that could be evaluated differently\n+               --  in post-state.\n+\n+               Post_State_Mentioned := False;\n+               Ignored := Find_Post_State (Arg);\n+\n+               if not Post_State_Mentioned then\n+                  Error_Msg_N (\"?`Ensures` component refers only to pre-state\",\n+                               Prag);\n+               end if;\n+            end if;\n+\n+            Prag := Next_Pragma (Prag);\n+            exit when No (Prag);\n+         end loop;\n+      end Process_Contract_Cases;\n+\n       -----------------------------\n       -- Process_Post_Conditions --\n       -----------------------------\n@@ -7075,35 +7134,36 @@ package body Sem_Ch6 is\n          loop\n             Arg := First (Pragma_Argument_Associations (Prag));\n \n-            --  Since pre- and post-conditions are listed in reverse order, the\n-            --  first postcondition in the list is the last in the source.\n+            if Pragma_Name (Prag) = Name_Postcondition then\n \n-            if Pragma_Name (Prag) = Name_Postcondition\n-              and then not Class\n-              and then No (Last_Postcondition)\n-            then\n-               Last_Postcondition := Prag;\n-            end if;\n+               --  Since pre- and post-conditions are listed in reverse order,\n+               --  the first postcondition in the list is the last in the\n+               --  source.\n \n-            --  For functions, look for presence of 'Result in postcondition\n+               if not Class\n+                 and then No (Last_Postcondition)\n+               then\n+                  Last_Postcondition := Prag;\n+               end if;\n \n-            if Ekind_In (Spec_Id, E_Function, E_Generic_Function) then\n-               Ignored := Find_Attribute_Result (Arg);\n-            end if;\n+               --  For functions, look for presence of 'Result in postcondition\n \n-            --  For each individual non-inherited postcondition, look for\n-            --  presence of an expression that could be evaluated differently\n-            --  in post-state.\n+               if Ekind_In (Spec_Id, E_Function, E_Generic_Function) then\n+                  Ignored := Find_Attribute_Result (Arg);\n+               end if;\n \n-            if Pragma_Name (Prag) = Name_Postcondition\n-              and then not Class\n-            then\n-               Post_State_Mentioned := False;\n-               Ignored := Find_Post_State (Arg);\n+               --  For each individual non-inherited postcondition, look\n+               --  for presence of an expression that could be evaluated\n+               --  differently in post-state.\n \n-               if not Post_State_Mentioned then\n-                  Error_Msg_N (\"?postcondition refers only to pre-state\",\n-                               Prag);\n+               if not Class then\n+                  Post_State_Mentioned := False;\n+                  Ignored := Find_Post_State (Arg);\n+\n+                  if not Post_State_Mentioned then\n+                     Error_Msg_N (\"?postcondition refers only to pre-state\",\n+                                  Prag);\n+                  end if;\n                end if;\n             end if;\n \n@@ -7119,6 +7179,8 @@ package body Sem_Ch6 is\n          return;\n       end if;\n \n+      --  Process spec postconditions\n+\n       if Present (Spec_PPC_List (Contract (Spec_Id))) then\n          Process_Post_Conditions (Spec_Id, Class => False);\n       end if;\n@@ -7135,15 +7197,34 @@ package body Sem_Ch6 is\n --           end if;\n --        end loop;\n \n+      --  Process contract cases\n+\n+      if Present (Spec_CTC_List (Contract (Spec_Id))) then\n+         Process_Contract_Cases (Spec_Id);\n+      end if;\n+\n       --  Issue warning for functions whose postcondition does not mention\n       --  'Result after all postconditions have been processed.\n \n       if Ekind_In (Spec_Id, E_Function, E_Generic_Function)\n-        and then Present (Last_Postcondition)\n+        and then (Present (Last_Postcondition)\n+                    or else Present (Last_Contract_Case))\n         and then not Attribute_Result_Mentioned\n       then\n-         Error_Msg_N (\"?function postcondition does not mention result\",\n-                      Last_Postcondition);\n+         if Present (Last_Postcondition) then\n+            if Present (Last_Contract_Case) then\n+               Error_Msg_N (\"?neither function postcondition nor \" &\n+                              \"contract cases do mention result\",\n+                            Last_Postcondition);\n+\n+            else\n+               Error_Msg_N (\"?function postcondition does not mention result\",\n+                            Last_Postcondition);\n+            end if;\n+         else\n+            Error_Msg_N (\"?contract cases do not mention result\",\n+                         Last_Contract_Case);\n+         end if;\n       end if;\n    end Check_Subprogram_Contract;\n "}]}