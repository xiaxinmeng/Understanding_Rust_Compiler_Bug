{"sha": "4042dca916ad7f5a99438e37416d4fed2209cc6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA0MmRjYTkxNmFkN2Y1YTk5NDM4ZTM3NDE2ZDRmZWQyMjA5Y2M2ZA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2013-08-16T10:42:49Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2013-08-16T10:42:49Z"}, "message": "sched-vis.c (rtl_slim_pp_initialized): Remove.\n\n\t* sched-vis.c (rtl_slim_pp_initialized): Remove.\n\t(rtl_slim_pp): Likewise.\n\t(init_rtl_slim_pretty_print): Likewise.\n\t(dump_value_slim):  Don't call it.  Use local pretty printer.\n\t(dump_insn_slim): Likewise.\n\t(dump_rtl_slim): Likewise.\n\t(str_pattern_slim): Likewise.\n\t* tree-mudflap.c (mf_varname_tree): Use local pretty printer.\n\tSimplify.\n\nFrom-SVN: r201785", "tree": {"sha": "1941396b68e43aac5c217d7b53117fdbbf6b6df2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1941396b68e43aac5c217d7b53117fdbbf6b6df2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4042dca916ad7f5a99438e37416d4fed2209cc6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4042dca916ad7f5a99438e37416d4fed2209cc6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4042dca916ad7f5a99438e37416d4fed2209cc6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4042dca916ad7f5a99438e37416d4fed2209cc6d/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5073d50905684dc9069c9e047ed00335450bfe47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5073d50905684dc9069c9e047ed00335450bfe47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5073d50905684dc9069c9e047ed00335450bfe47"}], "stats": {"total": 101, "additions": 46, "deletions": 55}, "files": [{"sha": "f9c214c2d73f7983df1d70707418638ed3dd9f1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4042dca916ad7f5a99438e37416d4fed2209cc6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4042dca916ad7f5a99438e37416d4fed2209cc6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4042dca916ad7f5a99438e37416d4fed2209cc6d", "patch": "@@ -1,3 +1,15 @@\n+2013-08-16  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* sched-vis.c (rtl_slim_pp_initialized): Remove.\n+\t(rtl_slim_pp): Likewise.\n+\t(init_rtl_slim_pretty_print): Likewise.\n+\t(dump_value_slim):  Don't call it.  Use local pretty printer.\n+\t(dump_insn_slim): Likewise.\n+\t(dump_rtl_slim): Likewise.\n+\t(str_pattern_slim): Likewise.\n+\t* tree-mudflap.c (mf_varname_tree): Use local pretty printer.\n+\tSimplify.\n+\n 2013-08-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/58164"}, {"sha": "a65e9229ddacfe950107a363520fa6fec8be0431", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 19, "deletions": 34, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4042dca916ad7f5a99438e37416d4fed2209cc6d/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4042dca916ad7f5a99438e37416d4fed2209cc6d/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=4042dca916ad7f5a99438e37416d4fed2209cc6d", "patch": "@@ -47,10 +47,6 @@ along with GCC; see the file COPYING3.  If not see\n    It is also possible to obtain a string for a single pattern as a string\n    pointer, via str_pattern_slim, but this usage is discouraged.  */\n \n-/* A pretty-printer for slim rtl printing.  */\n-static bool rtl_slim_pp_initialized = false;\n-static pretty_printer rtl_slim_pp;\n-\n /* For insns we print patterns, and for some patterns we print insns...  */\n static void print_insn_with_notes (pretty_printer *, const_rtx);\n \n@@ -760,24 +756,6 @@ print_insn_with_notes (pretty_printer *pp, const_rtx x)\n       }\n }\n \n-/* Return a pretty-print buffer set up to print to file F.  */\n-\n-static pretty_printer *\n-init_rtl_slim_pretty_print (FILE *f)\n-{\n-  if (! rtl_slim_pp_initialized)\n-    {\n-      pp_construct (&rtl_slim_pp, /*prefix=*/NULL, /*linewidth=*/0);\n-      rtl_slim_pp_initialized = true;\n-    }\n-  else\n-    /* Clean out any data that str_insn_slim may have left here.  */\n-    pp_clear_output_area (&rtl_slim_pp);\n-\n-  rtl_slim_pp.buffer->stream = f;\n-  return &rtl_slim_pp;\n-}\n-\n /* Print X, an RTL value node, to file F in slim format.  Include\n    additional information if VERBOSE is nonzero.\n \n@@ -787,19 +765,23 @@ init_rtl_slim_pretty_print (FILE *f)\n void\n dump_value_slim (FILE *f, const_rtx x, int verbose)\n {\n-  pretty_printer *pp = init_rtl_slim_pretty_print (f);\n-  print_value (pp, x, verbose);\n-  pp_flush (pp);\n+  pretty_printer rtl_slim_pp;\n+  pp_construct (&rtl_slim_pp, /*prefix=*/NULL, /*linewidth=*/0);\n+  rtl_slim_pp.buffer->stream = f;\n+  print_value (&rtl_slim_pp, x, verbose);\n+  pp_flush (&rtl_slim_pp);\n }\n \n /* Emit a slim dump of X (an insn) to the file F, including any register\n    note attached to the instruction.  */\n void\n dump_insn_slim (FILE *f, const_rtx x)\n {\n-  pretty_printer *pp = init_rtl_slim_pretty_print (f);\n-  print_insn_with_notes (pp, x);\n-  pp_flush (pp);\n+  pretty_printer rtl_slim_pp;\n+  pp_construct (&rtl_slim_pp, /*prefix=*/NULL, /*linewidth=*/0);\n+  rtl_slim_pp.buffer->stream = f;\n+  print_insn_with_notes (&rtl_slim_pp, x);\n+  pp_flush (&rtl_slim_pp);\n }\n \n /* Same as above, but stop at LAST or when COUNT == 0.\n@@ -810,19 +792,21 @@ dump_rtl_slim (FILE *f, const_rtx first, const_rtx last,\n \t       int count, int flags ATTRIBUTE_UNUSED)\n {\n   const_rtx insn, tail;\n-  pretty_printer *pp = init_rtl_slim_pretty_print (f);\n+  pretty_printer rtl_slim_pp;\n+  pp_construct (&rtl_slim_pp, /*prefix=*/NULL, /*linewidth=*/0);\n+  rtl_slim_pp.buffer->stream = f;\n \n   tail = last ? NEXT_INSN (last) : NULL_RTX;\n   for (insn = first;\n        (insn != NULL) && (insn != tail) && (count != 0);\n        insn = NEXT_INSN (insn))\n     {\n-      print_insn_with_notes (pp, insn);\n+      print_insn_with_notes (&rtl_slim_pp, insn);\n       if (count > 0)\n         count--;\n     }\n \n-  pp_flush (pp);\n+  pp_flush (&rtl_slim_pp);\n }\n \n /* Dumps basic block BB to pretty-printer PP in slim form and without and\n@@ -857,9 +841,10 @@ rtl_dump_bb_for_graph (pretty_printer *pp, basic_block bb)\n const char *\n str_pattern_slim (const_rtx x)\n {\n-  pretty_printer *pp = init_rtl_slim_pretty_print (NULL);\n-  print_pattern (pp, x, 0);\n-  return pp_formatted_text (pp);\n+  pretty_printer rtl_slim_pp;\n+  pp_construct (&rtl_slim_pp, /*prefix=*/NULL, /*linewidth=*/0);\n+  print_pattern (&rtl_slim_pp, x, 0);\n+  return ggc_strdup (pp_formatted_text (&rtl_slim_pp));\n }\n \n /* Emit a slim dump of X (an insn) to stderr.  */"}, {"sha": "293ee2c4b756900ec692bab5f0995f8ae56e345a", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4042dca916ad7f5a99438e37416d4fed2209cc6d/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4042dca916ad7f5a99438e37416d4fed2209cc6d/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=4042dca916ad7f5a99438e37416d4fed2209cc6d", "patch": "@@ -106,20 +106,14 @@ mf_build_string (const char *string)\n static tree\n mf_varname_tree (tree decl)\n {\n-  static pretty_printer buf_rec;\n-  static int initialized = 0;\n-  pretty_printer *buf = & buf_rec;\n   const char *buf_contents;\n   tree result;\n \n   gcc_assert (decl);\n \n-  if (!initialized)\n-    {\n-      pp_construct (buf, /* prefix */ NULL, /* line-width */ 0);\n-      initialized = 1;\n-    }\n-  pp_clear_output_area (buf);\n+  pretty_printer buf;\n+  pp_construct (&buf, /* prefix */ NULL, /* line-width */ 0);\n+  pp_clear_output_area (&buf);\n \n   /* Add FILENAME[:LINENUMBER[:COLUMNNUMBER]].  */\n   {\n@@ -134,38 +128,38 @@ mf_varname_tree (tree decl)\n     if (sourcefile == NULL)\n       sourcefile = \"<unknown file>\";\n \n-    pp_string (buf, sourcefile);\n+    pp_string (&buf, sourcefile);\n \n     if (sourceline != 0)\n       {\n-        pp_colon (buf);\n-        pp_decimal_int (buf, sourceline);\n+        pp_colon (&buf);\n+        pp_decimal_int (&buf, sourceline);\n \n         if (sourcecolumn != 0)\n           {\n-            pp_colon (buf);\n-            pp_decimal_int (buf, sourcecolumn);\n+            pp_colon (&buf);\n+            pp_decimal_int (&buf, sourcecolumn);\n           }\n       }\n   }\n \n   if (current_function_decl != NULL_TREE)\n     {\n       /* Add (FUNCTION) */\n-      pp_string (buf, \" (\");\n+      pp_string (&buf, \" (\");\n       {\n         const char *funcname = NULL;\n         if (DECL_NAME (current_function_decl))\n           funcname = lang_hooks.decl_printable_name (current_function_decl, 1);\n         if (funcname == NULL)\n           funcname = \"anonymous fn\";\n \n-        pp_string (buf, funcname);\n+        pp_string (&buf, funcname);\n       }\n-      pp_string (buf, \") \");\n+      pp_string (&buf, \") \");\n     }\n   else\n-    pp_space (buf);\n+    pp_space (&buf);\n \n   /* Add <variable-declaration>, possibly demangled.  */\n   {\n@@ -186,13 +180,13 @@ mf_varname_tree (tree decl)\n     if (declname == NULL)\n       declname = \"<unnamed variable>\";\n \n-    pp_string (buf, declname);\n+    pp_string (&buf, declname);\n   }\n \n   /* Return the lot as a new STRING_CST.  */\n-  buf_contents = pp_formatted_text (buf);\n+  buf_contents = ggc_strdup (pp_formatted_text (&buf));\n   result = mf_build_string (buf_contents);\n-  pp_clear_output_area (buf);\n+  pp_clear_output_area (&buf);\n \n   return result;\n }"}]}