{"sha": "05549c9604478e34987a41237d67261c42081c0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU1NDljOTYwNDQ3OGUzNDk4N2E0MTIzN2Q2NzI2MWM0MjA4MWMwYQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2006-11-25T10:53:06Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2006-11-25T10:53:06Z"}, "message": "jump.c (mark_all_labels): Work in cfglayout mode.\n\n\t* jump.c (mark_all_labels): Work in cfglayout mode.\n\t* cfgcleanup.c (cleanup_cfg): Do not call delete_dead_jumptables\n\twhen in cfglayout mode, because there are no dead jumptables\n\tvisible.\n\t* cfgrtl.c (commit_one_edge_insertion): Don't set bb->aux when\n\tin cfglayout mode.\n\t(commit_edge_insertions): Do not allow insertion of instructions\n\twith control flow insns when in cfglayout mode.\n\nFrom-SVN: r119191", "tree": {"sha": "dbf72ba61ed6753fe19c4159331e8b57ecaa7d44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbf72ba61ed6753fe19c4159331e8b57ecaa7d44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05549c9604478e34987a41237d67261c42081c0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05549c9604478e34987a41237d67261c42081c0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05549c9604478e34987a41237d67261c42081c0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05549c9604478e34987a41237d67261c42081c0a/comments", "author": null, "committer": null, "parents": [{"sha": "dc4871cba20dcaade3c609117f4b5ee4e08aeb6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4871cba20dcaade3c609117f4b5ee4e08aeb6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc4871cba20dcaade3c609117f4b5ee4e08aeb6b"}], "stats": {"total": 60, "additions": 55, "deletions": 5}, "files": [{"sha": "7e2e0db3eb2fcfb685bc1193a3113c41410569ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05549c9604478e34987a41237d67261c42081c0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05549c9604478e34987a41237d67261c42081c0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05549c9604478e34987a41237d67261c42081c0a", "patch": "@@ -1,3 +1,14 @@\n+2006-11-25  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* jump.c (mark_all_labels): Work in cfglayout mode.\n+\t* cfgcleanup.c (cleanup_cfg): Do not call delete_dead_jumptables\n+\twhen in cfglayout mode, because there are no dead jumptables\n+\tvisible.\n+\t* cfgrtl.c (commit_one_edge_insertion): Don't set bb->aux when\n+\tin cfglayout mode.\n+\t(commit_edge_insertions): Do not allow insertion of instructions\n+\twith control flow insns when in cfglayout mode.\n+\n 2006-11-25  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* tree-vrp.c (execute_vrp): Do not pass loops structure through\n@@ -1467,7 +1478,7 @@\n \n 2006-11-11  Jan Hubicka  <jh@suse.cz>\n \n-\t* extended.texi (__builtin_expect): We no longer require second argument\n+\t* extend.texi (__builtin_expect): We no longer require second argument\n \tto be constant.\n \t* gengtype.c (adjust_field_rtx_def): Drop NOTE_INSN_EXPECTED_VALUE.\n \t* builtins.c (expand_builtin_expect): Simplify."}, {"sha": "ad9ae4f8f3bf30cf88041c73b36ae8a31ac62f27", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05549c9604478e34987a41237d67261c42081c0a/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05549c9604478e34987a41237d67261c42081c0a/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=05549c9604478e34987a41237d67261c42081c0a", "patch": "@@ -763,8 +763,6 @@ merge_blocks_move (edge e, basic_block b, basic_block c, int mode)\n   if (BB_PARTITION (b) != BB_PARTITION (c))\n     return NULL;\n \n-\n-\n   /* If B has a fallthru edge to C, no need to move anything.  */\n   if (e->flags & EDGE_FALLTHRU)\n     {\n@@ -2260,7 +2258,15 @@ cleanup_cfg (int mode)\n \t}\n       else\n \tbreak;\n-      delete_dead_jumptables ();\n+\n+      /* Don't call delete_dead_jumptables in cfglayout mode, because\n+\t that function assumes that jump tables are in the insns stream.\n+\t But we also don't _have_ to delete dead jumptables in cfglayout\n+\t mode because we shouldn't even be looking at things that are\n+\t not in a basic block.  Dead jumptables are cleaned up when\n+\t going out of cfglayout mode.  */\n+      if (!(mode & CLEANUP_CFGLAYOUT))\n+\tdelete_dead_jumptables ();\n     }\n \n   timevar_pop (TV_CLEANUP_CFG);"}, {"sha": "6f474c0441dcb29a05a329f60ec82109d5f5cc47", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05549c9604478e34987a41237d67261c42081c0a/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05549c9604478e34987a41237d67261c42081c0a/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=05549c9604478e34987a41237d67261c42081c0a", "patch": "@@ -1477,7 +1477,8 @@ commit_one_edge_insertion (edge e, int watch_calls)\n     gcc_assert (!JUMP_P (last));\n \n   /* Mark the basic block for find_many_sub_basic_blocks.  */\n-  bb->aux = &bb->aux;\n+  if (current_ir_type () != IR_RTL_CFGLAYOUT)\n+    bb->aux = &bb->aux;\n }\n \n /* Update the CFG for all queued instructions.  */\n@@ -1509,6 +1510,13 @@ commit_edge_insertions (void)\n   if (!changed)\n     return;\n \n+  /* In the old rtl CFG API, it was OK to insert control flow on an\n+     edge, apparently?  In cfglayout mode, this will *not* work, and\n+     the caller is responsible for making sure that control flow is\n+     valid at all times.  */\n+  if (current_ir_type () == IR_RTL_CFGLAYOUT)\n+    return;\n+\n   blocks = sbitmap_alloc (last_basic_block);\n   sbitmap_zero (blocks);\n   FOR_EACH_BB (bb)"}, {"sha": "127e8a800c3092bf823d94abc32a1a7002702e21", "filename": "gcc/jump.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05549c9604478e34987a41237d67261c42081c0a/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05549c9604478e34987a41237d67261c42081c0a/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=05549c9604478e34987a41237d67261c42081c0a", "patch": "@@ -202,6 +202,31 @@ mark_all_labels (rtx f)\n \t      }\n \t  }\n       }\n+  \n+  /* If we are in cfglayout mode, there may be non-insns between the\n+     basic blocks.  If those non-insns represent tablejump data, they\n+     contain label references that we must record.  */\n+  if (current_ir_type () == IR_RTL_CFGLAYOUT)\n+    {\n+      basic_block bb;\n+      rtx insn;\n+      FOR_EACH_BB (bb)\n+\t{\n+\t  for (insn = bb->il.rtl->header; insn; insn = NEXT_INSN (insn))\n+\t    if (INSN_P (insn))\n+\t      {\n+\t\tgcc_assert (JUMP_TABLE_DATA_P (insn));\n+\t\tmark_jump_label (PATTERN (insn), insn, 0);\n+\t      }\n+\n+\t  for (insn = bb->il.rtl->footer; insn; insn = NEXT_INSN (insn))\n+\t    if (INSN_P (insn))\n+\t      {\n+\t\tgcc_assert (JUMP_TABLE_DATA_P (insn));\n+\t\tmark_jump_label (PATTERN (insn), insn, 0);\n+\t      }\n+\t}\n+    }\n }\n \f\n /* Move all block-beg, block-end and loop-beg notes between START and END out"}]}