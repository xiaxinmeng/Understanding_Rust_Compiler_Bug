{"sha": "8e39b3681c91297e7cdf7f453518f23191582e5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUzOWIzNjgxYzkxMjk3ZTdjZGY3ZjQ1MzUxOGYyMzE5MTU4MmU1Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-01-13T01:29:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-01-13T01:29:48Z"}, "message": "tweak comment\n\nFrom-SVN: r143321", "tree": {"sha": "43d741b0aaf3a700a67b4773679f533bb02851d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43d741b0aaf3a700a67b4773679f533bb02851d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e39b3681c91297e7cdf7f453518f23191582e5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e39b3681c91297e7cdf7f453518f23191582e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e39b3681c91297e7cdf7f453518f23191582e5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e39b3681c91297e7cdf7f453518f23191582e5f/comments", "author": null, "committer": null, "parents": [{"sha": "b9f673eb35aa687a05466b8532c25d3e56e3e1bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9f673eb35aa687a05466b8532c25d3e56e3e1bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9f673eb35aa687a05466b8532c25d3e56e3e1bd"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "6dc244fccb8ba5fa18fe23ad8efc084055393843", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e39b3681c91297e7cdf7f453518f23191582e5f/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e39b3681c91297e7cdf7f453518f23191582e5f/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=8e39b3681c91297e7cdf7f453518f23191582e5f", "patch": "@@ -4043,8 +4043,12 @@ outer_binding (tree name,\n \t\treturn class_binding;\n \t      }\n \t  }\n-\t/* If SCOPE is a template and if NAME binds to one of its template parameters\n-\t   return the binding, otherwise we might miss it.  */\n+\t/* If we are in a member template, the template parms of the member\n+\t   template are considered to be inside the scope of the containing\n+\t   class, but within G++ the class bindings are all pushed between the\n+\t   template parms and the function body.  So if the outer binding is\n+\t   a template parm for the current scope, return it now rather than\n+\t   look for a class binding.  */\n \tif (outer_scope && outer_scope->kind == sk_template_parms\n \t    && binding_to_template_parms_of_scope_p (outer, scope))\n \t  return outer;"}]}