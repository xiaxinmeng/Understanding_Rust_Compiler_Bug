{"sha": "e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "node_id": "C_kwDOANBUbNoAKGU5ZGQwNTBlMGNjZDY0NGMzYmI2ZDY1MzhkYzYxODcxNTdmNmIzZTg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-08-20T08:26:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-08-20T08:26:55Z"}, "message": "libcpp: Implement C++23 P2290R3 - Delimited escape sequences [PR106645]\n\nThe following patch implements the C++23 P2290R3 paper.\n\n2022-08-20  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/106645\nlibcpp/\n\t* include/cpplib.h (struct cpp_options): Implement\n\tP2290R3 - Delimited escape sequences.  Add delimite_escape_seqs\n\tmember.\n\t* init.cc (struct lang_flags): Likewise.\n\t(lang_defaults): Add delim column.\n\t(cpp_set_lang): Copy over delimite_escape_seqs.\n\t* charset.cc (extend_char_range): New function.\n\t(_cpp_valid_ucn): Use it.  Handle delimited escape sequences.\n\t(convert_hex): Likewise.\n\t(convert_oct): Likewise.\n\t(convert_ucn): Use extend_char_range.\n\t(convert_escape): Call convert_oct even for \\o.\n\t(_cpp_interpret_identifier): Handle delimited escape sequences.\n\t* lex.cc (get_bidi_ucn_1): Likewise.  Add end argument, fill it in.\n\t(get_bidi_ucn): Adjust get_bidi_ucn_1 caller.  Use end argument to\n\tcompute num_bytes.\ngcc/testsuite/\n\t* c-c++-common/cpp/delimited-escape-seq-1.c: New test.\n\t* c-c++-common/cpp/delimited-escape-seq-2.c: New test.\n\t* c-c++-common/cpp/delimited-escape-seq-3.c: New test.\n\t* c-c++-common/Wbidi-chars-24.c: New test.\n\t* gcc.dg/cpp/delimited-escape-seq-1.c: New test.\n\t* gcc.dg/cpp/delimited-escape-seq-2.c: New test.\n\t* g++.dg/cpp/delimited-escape-seq-1.C: New test.\n\t* g++.dg/cpp/delimited-escape-seq-2.C: New test.", "tree": {"sha": "83db1180a30890d65465b55a54be1e8a30cc1534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83db1180a30890d65465b55a54be1e8a30cc1534"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "613e9e16b85e209fad316deaef33cfaf7bd2bc98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/613e9e16b85e209fad316deaef33cfaf7bd2bc98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/613e9e16b85e209fad316deaef33cfaf7bd2bc98"}], "stats": {"total": 482, "additions": 432, "deletions": 50}, "files": [{"sha": "608a5d6a1da2dbea372d434d7efd3ddcf52f4206", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-24.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-24.c?ref=e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "patch": "@@ -0,0 +1,28 @@\n+/* PR preprocessor/103026 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wbidi-chars=ucn,unpaired\" } */\n+/* Test nesting of bidi chars in various contexts.  */\n+\n+void\n+g1 ()\n+{\n+  const char *s1 = \"a b c LRE\\u{202a} 1 2 3 PDI\\u{00000000000000000000000002069} x y z\";\n+/* { dg-warning \"unpaired\" \"\" { target *-*-* } .-1 } */\n+  const char *s2 = \"a b c RLE\\u{00202b} 1 2 3 PDI\\u{2069} x y z\";\n+/* { dg-warning \"unpaired\" \"\" { target *-*-* } .-1 } */\n+  const char *s3 = \"a b c LRO\\u{000000202d} 1 2 3 PDI\\u{02069} x y z\";\n+/* { dg-warning \"unpaired\" \"\" { target *-*-* } .-1 } */\n+  const char *s4 = \"a b c RLO\\u{202e} 1 2 3 PDI\\u{00000002069} x y z\";\n+/* { dg-warning \"unpaired\" \"\" { target *-*-* } .-1 } */\n+  const char *s5 = \"a b c LRI\\u{002066} 1 2 3 PDF\\u{202C} x y z\";\n+/* { dg-warning \"unpaired\" \"\" { target *-*-* } .-1 } */\n+  const char *s6 = \"a b c RLI\\u{02067} 1 2 3 PDF\\u{202c} x y z\";\n+/* { dg-warning \"unpaired\" \"\" { target *-*-* } .-1 } */\n+  const char *s7 = \"a b c FSI\\u{0002068} 1 2 3 PDF\\u{0202c} x y z\";\n+/* { dg-warning \"unpaired\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+int A\\u{202a}B\\u{2069}C;\n+/* { dg-warning \"unpaired\" \"\" { target *-*-* } .-1 } */\n+int a\\u{00000202b}B\\u{000000002069}c;\n+/* { dg-warning \"unpaired\" \"\" { target *-*-* } .-1 } */"}, {"sha": "04d822d3ccf2306b7c8823c17d844301b7a5b32b", "filename": "gcc/testsuite/c-c++-common/cpp/delimited-escape-seq-1.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-1.c?ref=e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "patch": "@@ -0,0 +1,92 @@\n+/* P2290R3 - Delimited escape sequences */\n+/* { dg-do run } */\n+/* { dg-require-effective-target wchar } */\n+/* { dg-options \"-std=gnu99 -Wno-c++-compat\" { target c } } */\n+/* { dg-options \"-std=c++23\" { target c++ } } */\n+\n+#ifndef __cplusplus\n+#include <wchar.h>\n+typedef __CHAR16_TYPE__ char16_t;\n+typedef __CHAR32_TYPE__ char32_t;\n+#endif\n+\n+const char32_t *a = U\"\\u{1234}\\u{10fffd}\\u{000000000000000000000000000000000000000000000000000000000001234}\\u{10FFFD}\";\n+const char32_t *b = U\"\\x{1234}\\x{10fffd}\\x{000000000000000000000000000000000000000000000000000000000001234}\";\n+const char32_t *c = U\"\\o{1234}\\o{4177775}\\o{000000000000000000000000000000000000000000000000000000000000000000000000004177775}\";\n+const char16_t *d = u\"\\u{1234}\\u{bFFd}\\u{00000000000000000000000000000001234}\";\n+const char16_t *e = u\"\\x{1234}\\x{BffD}\\x{000001234}\";\n+const char16_t *f = u\"\\o{1234}\\o{137775}\\o{000000000000000137775}\";\n+const wchar_t *g = L\"\\u{1234}\\u{bFFd}\\u{00000000000000000000000000000001234}\";\n+const wchar_t *h = L\"\\x{1234}\\x{bFFd}\\x{000001234}\";\n+const wchar_t *i = L\"\\o{1234}\\o{137775}\\o{000000000000000137775}\";\n+#ifdef __cplusplus\n+const char *j = \"\\u{34}\\u{000000000000000003D}\";\n+#endif\n+const char *k = \"\\x{34}\\x{000000000000000003D}\";\n+const char *l = \"\\o{34}\\o{000000000000000176}\";\n+\n+#if U'\\u{1234}' != U'\\u1234' || U'\\u{10fffd}' != U'\\U0010FFFD' \\\n+    || U'\\x{00000001234}' != U'\\x1234' || U'\\x{010fffd}' != U'\\x10FFFD' \\\n+    || U'\\o{1234}' != U'\\x29c' || U'\\o{004177775}' != U'\\x10FFFD' \\\n+    || u'\\u{1234}' != u'\\u1234' || u'\\u{0bffd}' != u'\\uBFFD' \\\n+    || u'\\x{00000001234}' != u'\\x1234' || u'\\x{0Bffd}' != u'\\x0bFFD' \\\n+    || u'\\o{1234}' != u'\\x29c' || u'\\o{00137775}' != u'\\xBFFD' \\\n+    || L'\\u{1234}' != L'\\u1234' || L'\\u{0bffd}' != L'\\uBFFD' \\\n+    || L'\\x{00000001234}' != L'\\x1234' || L'\\x{0bffd}' != L'\\x0bFFD' \\\n+    || L'\\o{1234}' != L'\\x29c' || L'\\o{00137775}' != L'\\xBFFD' \\\n+    || '\\x{34}' != '\\x034' || '\\x{0003d}' != '\\x003D' \\\n+    || '\\o{34}' != '\\x1C' || '\\o{176}' != '\\x007E'\n+#error Bad\n+#endif\n+#ifdef __cplusplus\n+#if '\\u{0000000034}' != '\\u0034' || '\\u{3d}' != '\\u003D'\n+#error Bad\n+#endif\n+#endif\n+\n+int\n+main ()\n+{\n+  if (a[0] != U'\\u1234' || a[0] != U'\\u{1234}'\n+      || a[1] != U'\\U0010FFFD' || a[1] != U'\\u{000010fFfD}'\n+      || a[2] != a[0]\n+      || a[3] != a[1]\n+      || b[0] != U'\\x1234' || b[0] != U'\\x{001234}'\n+      || b[1] != U'\\x10FFFD' || b[1] != U'\\x{0010fFfD}'\n+      || b[2] != b[0]\n+      || c[0] != U'\\x29c' || c[0] != U'\\o{001234}'\n+      || c[1] != U'\\x10FFFD' || c[1] != U'\\o{4177775}'\n+      || c[2] != c[1])\n+    __builtin_abort ();\n+  if (d[0] != u'\\u1234' || d[0] != u'\\u{1234}'\n+      || d[1] != u'\\U0000BFFD' || d[1] != u'\\u{00000bFfD}'\n+      || d[2] != d[0]\n+      || e[0] != u'\\x1234' || e[0] != u'\\x{001234}'\n+      || e[1] != u'\\xBFFD' || e[1] != u'\\x{00bFfD}'\n+      || e[2] != e[0]\n+      || f[0] != u'\\x29c' || f[0] != u'\\o{001234}'\n+      || f[1] != u'\\xbFFD' || f[1] != u'\\o{137775}'\n+      || f[2] != f[1])\n+    __builtin_abort ();\n+  if (g[0] != L'\\u1234' || g[0] != L'\\u{1234}'\n+      || g[1] != L'\\U0000BFFD' || g[1] != L'\\u{00000bFfD}'\n+      || g[2] != g[0]\n+      || h[0] != L'\\x1234' || h[0] != L'\\x{001234}'\n+      || h[1] != L'\\xBFFD' || h[1] != L'\\x{00bFfD}'\n+      || h[2] != h[0]\n+      || i[0] != L'\\x29c' || i[0] != L'\\o{001234}'\n+      || i[1] != L'\\xbFFD' || i[1] != L'\\o{137775}'\n+      || i[2] != i[1])\n+    __builtin_abort ();\n+#ifdef __cplusplus\n+  if (j[0] != '\\u0034' || j[0] != '\\u{034}'\n+      || j[1] != '\\U0000003D' || j[1] != '\\u{000003d}')\n+    __builtin_abort ();\n+#endif\n+  if (k[0] != '\\x034' || k[0] != '\\x{0034}'\n+      || k[1] != '\\x3D' || k[1] != '\\x{3d}'\n+      || l[0] != '\\x1c' || l[0] != '\\o{0034}'\n+      || l[1] != '\\x07e' || l[1] != '\\o{176}' || l[1] != '\\176')\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "b23b83f23b7103b4c2ea51ec386496d9448836e8", "filename": "gcc/testsuite/c-c++-common/cpp/delimited-escape-seq-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-2.c?ref=e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "patch": "@@ -0,0 +1,18 @@\n+/* P2290R3 - Delimited escape sequences */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wno-c++-compat\" { target c } } */\n+/* { dg-options \"-std=c++23\" { target c++ } } */\n+\n+int jalape\\u{f1}o = 42;\n+\n+int\n+caf\\u{000e9} (void)\n+{\n+  return jalape\\u00F1o;\n+}\n+\n+int\n+test (void)\n+{\n+  return caf\\u00e9 ();\n+}"}, {"sha": "ef9e5b57ff6b0b7d78311077d084b8facc890752", "filename": "gcc/testsuite/c-c++-common/cpp/delimited-escape-seq-3.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-3.c?ref=e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "patch": "@@ -0,0 +1,33 @@\n+/* P2290R3 - Delimited escape sequences */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target wchar } */\n+/* { dg-options \"-std=gnu99 -Wno-c++-compat\" { target c } } */\n+/* { dg-options \"-std=c++23\" { target c++ } } */\n+\n+#ifndef __cplusplus\n+typedef __CHAR32_TYPE__ char32_t;\n+#endif\n+\n+const char32_t *a = U\"\\u{}\";\t\t\t\t/* { dg-error \"empty delimited escape sequence\" } */\n+\t\t\t\t\t\t\t/* { dg-error \"is not a valid universal character\" \"\" { target c } .-1 } */\n+const char32_t *b = U\"\\u{12\" \"34}\";\t\t\t/* { dg-error \"'\\\\\\\\u\\\\{' not terminated with '\\\\}' after\" } */\n+const char32_t *c = U\"\\u{0000ffffffff}\";\t\t/* { dg-error \"is not a valid universal character\" } */\n+const char32_t *d = U\"\\u{010000edcb}\";\t\t\t/* { dg-error \"is not a valid universal character\" } */\n+const char32_t *e = U\"\\u{02000000000000000000edcb}\";\t/* { dg-error \"is not a valid universal character\" } */\n+const char32_t *f = U\"\\u{123ghij}\";\t\t\t/* { dg-error \"'\\\\\\\\u\\\\{' not terminated with '\\\\}' after\" } */\n+const char32_t *g = U\"\\u{123.}\";\t\t\t/* { dg-error \"'\\\\\\\\u\\\\{' not terminated with '\\\\}' after\" } */\n+const char32_t *h = U\"\\u{.}\";\t\t\t\t/* { dg-error \"'\\\\\\\\u\\\\{' not terminated with '\\\\}' after\" } */\n+const char32_t *i = U\"\\x{}\";\t\t\t\t/* { dg-error \"empty delimited escape sequence\" } */\n+const char32_t *j = U\"\\x{12\" \"34}\";\t\t\t/* { dg-error \"'\\\\\\\\x\\\\{' not terminated with '\\\\}' after\" } */\n+const char32_t *k = U\"\\x{0000ffffffff}\";\n+const char32_t *l = U\"\\x{010000edcb}\";\t\t\t/* { dg-warning \"hex escape sequence out of range\" } */\n+const char32_t *m = U\"\\x{02000000000000000000edcb}\";\t/* { dg-warning \"hex escape sequence out of range\" } */\n+const char32_t *n = U\"\\x{123ghij}\";\t\t\t/* { dg-error \"'\\\\\\\\x\\\\{' not terminated with '\\\\}' after\" } */\n+const char32_t *o = U\"\\x{123.}\";\t\t\t/* { dg-error \"'\\\\\\\\x\\\\{' not terminated with '\\\\}' after\" } */\n+const char32_t *p = U\"\\o{}\";\t\t\t\t/* { dg-error \"empty delimited escape sequence\" } */\n+const char32_t *q = U\"\\o{12\" \"34}\";\t\t\t/* { dg-error \"'\\\\\\\\o\\\\{' not terminated with '\\\\}' after\" } */\n+const char32_t *r = U\"\\o{0000037777777777}\";\n+const char32_t *s = U\"\\o{040000166713}\";\t\t/* { dg-warning \"octal escape sequence out of range\" } */\n+const char32_t *t = U\"\\o{02000000000000000000000166713}\";/* { dg-warning \"octal escape sequence out of range\" } */\n+const char32_t *u = U\"\\o{1238}\";\t\t\t/* { dg-error \"'\\\\\\\\o\\\\{' not terminated with '\\\\}' after\" } */\n+const char32_t *v = U\"\\o{.}\";\t\t\t\t/* { dg-error \"'\\\\\\\\o\\\\{' not terminated with '\\\\}' after\" } */"}, {"sha": "a9c8a0c3d5d19a058cbbd0b753f5d6ce0e75adb4", "filename": "gcc/testsuite/g++.dg/cpp/delimited-escape-seq-1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fdelimited-escape-seq-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fdelimited-escape-seq-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fdelimited-escape-seq-1.C?ref=e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "patch": "@@ -0,0 +1,8 @@\n+// P2290R3 - Delimited escape sequences\n+// { dg-do compile { target c++11 } }\n+// { dg-require-effective-target wchar }\n+// { dg-options \"-pedantic\" }\n+\n+const char32_t *a = U\"\\u{1234}\";\t// { dg-warning \"delimited escape sequences are only valid in\" \"\" { target c++20_down } }\n+const char32_t *b = U\"\\x{1234}\";\t// { dg-warning \"delimited escape sequences are only valid in\" \"\" { target c++20_down } }\n+const char32_t *c = U\"\\o{1234}\";\t// { dg-warning \"delimited escape sequences are only valid in\" \"\" { target c++20_down } }"}, {"sha": "51af741f90965eb5505442e59cb6d7b79ed35cc2", "filename": "gcc/testsuite/g++.dg/cpp/delimited-escape-seq-2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fdelimited-escape-seq-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fdelimited-escape-seq-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fdelimited-escape-seq-2.C?ref=e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "patch": "@@ -0,0 +1,8 @@\n+// P2290R3 - Delimited escape sequences\n+// { dg-do compile { target c++11 } }\n+// { dg-require-effective-target wchar }\n+// { dg-options \"-pedantic-errors\" }\n+\n+const char32_t *a = U\"\\u{1234}\";\t// { dg-error \"delimited escape sequences are only valid in\" \"\" { target c++20_down } }\n+const char32_t *b = U\"\\x{1234}\";\t// { dg-error \"delimited escape sequences are only valid in\" \"\" { target c++20_down } }\n+const char32_t *c = U\"\\o{1234}\";\t// { dg-error \"delimited escape sequences are only valid in\" \"\" { target c++20_down } }"}, {"sha": "e08775f62ed628225607dd1465a6bd0e85018eb8", "filename": "gcc/testsuite/gcc.dg/cpp/delimited-escape-seq-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdelimited-escape-seq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdelimited-escape-seq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdelimited-escape-seq-1.c?ref=e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "patch": "@@ -0,0 +1,10 @@\n+/* P2290R3 - Delimited escape sequences */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target wchar } */\n+/* { dg-options \"-std=gnu99 -Wno-c++-compat -pedantic\" } */\n+\n+typedef __CHAR32_TYPE__ char32_t;\n+\n+const char32_t *a = U\"\\u{1234}\";\t/* { dg-warning \"delimited escape sequences are only valid in\" } */\n+const char32_t *b = U\"\\x{1234}\";\t/* { dg-warning \"delimited escape sequences are only valid in\" } */\n+const char32_t *c = U\"\\o{1234}\";\t/* { dg-warning \"delimited escape sequences are only valid in\" } */"}, {"sha": "71c98656323250330933375c88c7e193d25196a1", "filename": "gcc/testsuite/gcc.dg/cpp/delimited-escape-seq-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdelimited-escape-seq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdelimited-escape-seq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdelimited-escape-seq-2.c?ref=e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "patch": "@@ -0,0 +1,10 @@\n+/* P2290R3 - Delimited escape sequences */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target wchar } */\n+/* { dg-options \"-std=gnu99 -Wno-c++-compat -pedantic-errors\" } */\n+\n+typedef __CHAR32_TYPE__ char32_t;\n+\n+const char32_t *a = U\"\\u{1234}\";\t/* { dg-error \"delimited escape sequences are only valid in\" } */\n+const char32_t *b = U\"\\x{1234}\";\t/* { dg-error \"delimited escape sequences are only valid in\" } */\n+const char32_t *c = U\"\\o{1234}\";\t/* { dg-error \"delimited escape sequences are only valid in\" } */"}, {"sha": "cf4a52517e8128d093ef4c30ebbd95cb8881695b", "filename": "libcpp/charset.cc", "status": "modified", "additions": 174, "deletions": 21, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/libcpp%2Fcharset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/libcpp%2Fcharset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.cc?ref=e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "patch": "@@ -1036,6 +1036,19 @@ ucn_valid_in_identifier (cpp_reader *pfile, cppchar_t c,\n   return 1;\n }\n \n+/* Increment char_range->m_finish by a single character.  */\n+\n+static void\n+extend_char_range (source_range *char_range,\n+\t\t   cpp_string_location_reader *loc_reader)\n+{\n+  if (loc_reader)\n+    {\n+      gcc_assert (char_range);\n+      char_range->m_finish = loc_reader->get_next ().m_finish;\n+    }\n+}\n+\n /* [lex.charset]: The character designated by the universal character\n    name \\UNNNNNNNN is that character whose character short name in\n    ISO/IEC 10646 is NNNNNNNN; the character designated by the\n@@ -1081,6 +1094,7 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n   unsigned int length;\n   const uchar *str = *pstr;\n   const uchar *base = str - 2;\n+  bool delimited = false;\n \n   if (!CPP_OPTION (pfile, cplusplus) && !CPP_OPTION (pfile, c99))\n     cpp_error (pfile, CPP_DL_WARNING,\n@@ -1095,7 +1109,17 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n \t         (int) str[-1]);\n \n   if (str[-1] == 'u')\n-    length = 4;\n+    {\n+      length = 4;\n+      if (str < limit && *str == '{')\n+\t{\n+\t  str++;\n+\t  /* Magic value to indicate no digits seen.  */\n+\t  length = 32;\n+\t  delimited = true;\n+\t  extend_char_range (char_range, loc_reader);\n+\t}\n+    }\n   else if (str[-1] == 'U')\n     length = 8;\n   else\n@@ -1107,18 +1131,53 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n   result = 0;\n   do\n     {\n+      if (str == limit)\n+\tbreak;\n       c = *str;\n       if (!ISXDIGIT (c))\n \tbreak;\n       str++;\n-      if (loc_reader)\n+      extend_char_range (char_range, loc_reader);\n+      if (delimited)\n \t{\n-\t  gcc_assert (char_range);\n-\t  char_range->m_finish = loc_reader->get_next ().m_finish;\n+\t  if (!result)\n+\t    /* Accept arbitrary number of leading zeros.\n+\t       16 is another magic value, smaller than 32 above\n+\t       and bigger than 8, so that upon encountering first\n+\t       non-zero digit we can count 8 digits and after that\n+\t       or in overflow bit and ensure length doesn't decrease\n+\t       to 0, as delimited escape sequence doesn't have upper\n+\t       bound on the number of hex digits.  */\n+\t    length = 16;\n+\t  else if (length == 16 - 8)\n+\t    {\n+\t      /* Make sure we detect overflows.  */\n+\t      result |= 0x8000000;\n+\t      ++length;\n+\t    }\n \t}\n+\n       result = (result << 4) + hex_value (c);\n     }\n-  while (--length && str < limit);\n+  while (--length);\n+\n+  if (delimited\n+      && str < limit\n+      && *str == '}'\n+      && (length != 32 || !identifier_pos))\n+    {\n+      if (length == 32)\n+\tcpp_error (pfile, CPP_DL_ERROR,\n+\t\t   \"empty delimited escape sequence\");\n+      else if (!CPP_OPTION (pfile, delimited_escape_seqs)\n+\t       && CPP_OPTION (pfile, cpp_pedantic))\n+\tcpp_error (pfile, CPP_DL_PEDWARN,\n+\t\t   \"delimited escape sequences are only valid in C++23\");\n+      str++;\n+      length = 0;\n+      delimited = false;\n+      extend_char_range (char_range, loc_reader);\n+    }\n \n   /* Partial UCNs are not valid in strings, but decompose into\n      multiple tokens in identifiers, so we can't give a helpful\n@@ -1132,9 +1191,14 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n   *pstr = str;\n   if (length)\n     {\n-      cpp_error (pfile, CPP_DL_ERROR,\n-\t\t \"incomplete universal character name %.*s\",\n-\t\t (int) (str - base), base);\n+      if (!delimited)\n+\tcpp_error (pfile, CPP_DL_ERROR,\n+\t\t   \"incomplete universal character name %.*s\",\n+\t\t   (int) (str - base), base);\n+      else\n+\tcpp_error (pfile, CPP_DL_ERROR,\n+\t\t   \"'\\\\u{' not terminated with '}' after %.*s\",\n+\t\t   (int) (str - base), base);\n       result = 1;\n     }\n   /* The C99 standard permits $, @ and ` to be specified as UCNs.  We use\n@@ -1212,9 +1276,8 @@ convert_ucn (cpp_reader *pfile, const uchar *from, const uchar *limit,\n \n   from++;  /* Skip u/U.  */\n \n-  if (loc_reader)\n-    /* The u/U is part of the spelling of this character.  */\n-    char_range.m_finish = loc_reader->get_next ().m_finish;\n+  /* The u/U is part of the spelling of this character.  */\n+  extend_char_range (&char_range, loc_reader);\n \n   _cpp_valid_ucn (pfile, &from, limit, 0, &nst,\n \t\t  &ucn, &char_range, loc_reader);\n@@ -1392,6 +1455,8 @@ convert_hex (cpp_reader *pfile, const uchar *from, const uchar *limit,\n   int digits_found = 0;\n   size_t width = cvt.width;\n   size_t mask = width_to_mask (width);\n+  bool delimited = false;\n+  const uchar *base = from - 1;\n \n   /* loc_reader and ranges must either be both NULL, or both be non-NULL.  */\n   gcc_assert ((loc_reader != NULL) == (ranges != NULL));\n@@ -1404,28 +1469,57 @@ convert_hex (cpp_reader *pfile, const uchar *from, const uchar *limit,\n   from++;\n \n   /* The 'x' is part of the spelling of this character.  */\n-  if (loc_reader)\n-    char_range.m_finish = loc_reader->get_next ().m_finish;\n+  extend_char_range (&char_range, loc_reader);\n+\n+  if (from < limit && *from == '{')\n+    {\n+      delimited = true;\n+      from++;\n+      extend_char_range (&char_range, loc_reader);\n+    }\n \n   while (from < limit)\n     {\n       c = *from;\n       if (! hex_p (c))\n \tbreak;\n       from++;\n-      if (loc_reader)\n-\tchar_range.m_finish = loc_reader->get_next ().m_finish;\n+      extend_char_range (&char_range, loc_reader);\n       overflow |= n ^ (n << 4 >> 4);\n       n = (n << 4) + hex_value (c);\n       digits_found = 1;\n     }\n \n+  if (delimited && from < limit && *from == '}')\n+    {\n+      from++;\n+      if (!digits_found)\n+\t{\n+\t  cpp_error (pfile, CPP_DL_ERROR,\n+\t\t     \"empty delimited escape sequence\");\n+\t  return from;\n+\t}\n+     else if (!CPP_OPTION (pfile, delimited_escape_seqs)\n+\t      && CPP_OPTION (pfile, cpp_pedantic))\n+\tcpp_error (pfile, CPP_DL_PEDWARN,\n+\t\t   \"delimited escape sequences are only valid in C++23\");\n+      delimited = false;\n+      extend_char_range (&char_range, loc_reader);\n+    }\n+\n   if (!digits_found)\n     {\n       cpp_error (pfile, CPP_DL_ERROR,\n \t\t \"\\\\x used with no following hex digits\");\n       return from;\n     }\n+  else if (delimited)\n+    {\n+      cpp_error (pfile, CPP_DL_ERROR,\n+\t\t \"'\\\\x{' not terminated with '}' after %.*s\",\n+\t\t (int) (from - base), base);\n+      return from;\n+    }\n \n   if (overflow | (n != (n & mask)))\n     {\n@@ -1459,25 +1553,71 @@ convert_oct (cpp_reader *pfile, const uchar *from, const uchar *limit,\n \t     cpp_substring_ranges *ranges)\n {\n   size_t count = 0;\n-  cppchar_t c, n = 0;\n+  cppchar_t c, n = 0, overflow = 0;\n   size_t width = cvt.width;\n   size_t mask = width_to_mask (width);\n+  bool delimited = false;\n+  const uchar *base = from - 1;\n \n   /* loc_reader and ranges must either be both NULL, or both be non-NULL.  */\n   gcc_assert ((loc_reader != NULL) == (ranges != NULL));\n \n+  if (from < limit && *from == 'o')\n+    {\n+      from++;\n+      extend_char_range (&char_range, loc_reader);\n+      if (from == limit || *from != '{')\n+\tcpp_error (pfile, CPP_DL_ERROR, \"'\\\\o' not followed by '{'\");\n+      else\n+\t{\n+\t  from++;\n+\t  extend_char_range (&char_range, loc_reader);\n+\t  delimited = true;\n+\t}\n+    }\n+\n   while (from < limit && count++ < 3)\n     {\n       c = *from;\n       if (c < '0' || c > '7')\n \tbreak;\n       from++;\n-      if (loc_reader)\n-\tchar_range.m_finish = loc_reader->get_next ().m_finish;\n+      extend_char_range (&char_range, loc_reader);\n+      if (delimited)\n+\t{\n+\t  count = 2;\n+\t  overflow |= n ^ (n << 3 >> 3);\n+\t}\n       n = (n << 3) + c - '0';\n     }\n \n-  if (n != (n & mask))\n+  if (delimited)\n+    {\n+      if (from < limit && *from == '}')\n+\t{\n+\t  from++;\n+\t  if (count == 1)\n+\t    {\n+\t      cpp_error (pfile, CPP_DL_ERROR,\n+\t\t\t \"empty delimited escape sequence\");\n+\t      return from;\n+\t    }\n+\t  else if (!CPP_OPTION (pfile, delimited_escape_seqs)\n+\t\t   && CPP_OPTION (pfile, cpp_pedantic))\n+\t    cpp_error (pfile, CPP_DL_PEDWARN,\n+\t\t       \"delimited escape sequences are only valid in C++23\");\n+\t  extend_char_range (&char_range, loc_reader);\n+\t}\n+      else\n+\t{\n+\t  cpp_error (pfile, CPP_DL_ERROR,\n+\t\t     \"'\\\\o{' not terminated with '}' after %.*s\",\n+\t\t     (int) (from - base), base);\n+\t  return from;\n+\t}\n+    }\n+\n+  if (overflow | (n != (n & mask)))\n     {\n       cpp_error (pfile, CPP_DL_PEDWARN,\n \t\t \"octal escape sequence out of range\");\n@@ -1535,6 +1675,7 @@ convert_escape (cpp_reader *pfile, const uchar *from, const uchar *limit,\n \n     case '0':  case '1':  case '2':  case '3':\n     case '4':  case '5':  case '6':  case '7':\n+    case 'o':\n       return convert_oct (pfile, from, limit, tbuf, cvt,\n \t\t\t  char_range, loc_reader, ranges);\n \n@@ -2119,15 +2260,27 @@ _cpp_interpret_identifier (cpp_reader *pfile, const uchar *id, size_t len)\n \tcppchar_t value = 0;\n \tsize_t bufleft = len - (bufp - buf);\n \tint rval;\n+\tbool delimited = false;\n \n \tidp += 2;\n+\tif (length == 4 && id[idp] == '{')\n+\t  {\n+\t    delimited = true;\n+\t    idp++;\n+\t  }\n \twhile (length && idp < len && ISXDIGIT (id[idp]))\n \t  {\n \t    value = (value << 4) + hex_value (id[idp]);\n \t    idp++;\n-\t    length--;\n+\t    if (!delimited)\n+\t      length--;\n \t  }\n-\tidp--;\n+\tif (!delimited)\n+\t  idp--;\n+\t/* else\n+\t     assert (id[idp] == '}');\n+\t   As the caller ensures it is a valid identifier, if it is\n+\t   delimited escape sequence, it must be terminated by }.  */\n \n \t/* Special case for EBCDIC: if the identifier contains\n \t   a '$' specified using a UCN, translate it to EBCDIC.  */"}, {"sha": "810203db6080c7e1c17865b6f2b2bd3e002ea9fa", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "patch": "@@ -522,6 +522,9 @@ struct cpp_options\n   /* Nonzero for C++23 size_t literals.  */\n   unsigned char size_t_literals;\n \n+  /* Nonzero for C++23 delimited escape sequences.  */\n+  unsigned char delimited_escape_seqs;\n+\n   /* Holds the name of the target (execution) character set.  */\n   const char *narrow_charset;\n "}, {"sha": "b184e1ffd995176eb2c7f00c3761ed56e653712f", "filename": "libcpp/init.cc", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/libcpp%2Finit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/libcpp%2Finit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.cc?ref=e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "patch": "@@ -97,34 +97,35 @@ struct lang_flags\n   char size_t_literals;\n   char elifdef;\n   char warning_directive;\n+  char delimited_escape_seqs;\n };\n \n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig u8chlit vaopt scope dfp szlit elifdef warndir */\n-  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0 },\n-  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0 },\n-  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0 },\n-  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0 },\n-  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    1,     1,     0,   1,      1,   1,     1,   0,   1,      1 },\n-  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0 },\n-  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0 },\n-  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0 },\n-  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0 },\n-  /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0 },\n-  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    1,     1,     1,   1,      0,   1,     1,   0,   1,      1 },\n-  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0 },\n-  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1,     0,   0,   0,      0 },\n-  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0 },\n-  /* CXX11    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1,   0,      0,   1,     0,   0,   0,      0 },\n-  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   0,      1,   1,     0,   0,   0,      0 },\n-  /* CXX14    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1,   0,      0,   1,     0,   0,   0,      0 },\n-  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0 },\n-  /* CXX17    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      0,   1,     0,   0,   0,      0 },\n-  /* GNUCXX20 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0 },\n-  /* CXX20    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0 },\n-  /* GNUCXX23 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   1,      0 },\n-  /* CXX23    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   1,      0 },\n-  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0,      0,   0,     0,   0,   0,      0 }\n+{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig u8chlit vaopt scope dfp szlit elifdef warndir delim */\n+  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0 },\n+  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0 },\n+  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0 },\n+  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0 },\n+  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    1,     1,     0,   1,      1,   1,     1,   0,   1,      1,      0 },\n+  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0 },\n+  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0 },\n+  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0 },\n+  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0 },\n+  /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0 },\n+  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    1,     1,     1,   1,      0,   1,     1,   0,   1,      1,      0 },\n+  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0 },\n+  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1,     0,   0,   0,      0,      0 },\n+  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0 },\n+  /* CXX11    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1,   0,      0,   1,     0,   0,   0,      0,      0 },\n+  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   0,      1,   1,     0,   0,   0,      0,      0 },\n+  /* CXX14    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1,   0,      0,   1,     0,   0,   0,      0,      0 },\n+  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0,      0 },\n+  /* CXX17    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      0,   1,     0,   0,   0,      0,      0 },\n+  /* GNUCXX20 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0,      0 },\n+  /* CXX20    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0,      0 },\n+  /* GNUCXX23 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   1,      0,      1 },\n+  /* CXX23    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   1,      0,      1 },\n+  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0,      0,   0,     0,   0,   0,      0,      0 }\n };\n \n /* Sets internal flags correctly for a given language.  */\n@@ -155,6 +156,7 @@ cpp_set_lang (cpp_reader *pfile, enum c_lang lang)\n   CPP_OPTION (pfile, size_t_literals)\t\t = l->size_t_literals;\n   CPP_OPTION (pfile, elifdef)\t\t\t = l->elifdef;\n   CPP_OPTION (pfile, warning_directive)\t\t = l->warning_directive;\n+  CPP_OPTION (pfile, delimited_escape_seqs)\t = l->delimited_escape_seqs;\n }\n \n /* Initialize library global state.  */"}, {"sha": "571cd2ae5a8fe92eb277e94f0e7d446b8e495bc8", "filename": "libcpp/lex.cc", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/libcpp%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8/libcpp%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.cc?ref=e9dd050e0ccd644c3bb6d6538dc6187157f6b3e8", "patch": "@@ -1426,19 +1426,35 @@ get_bidi_utf8 (cpp_reader *pfile, const unsigned char *const p, location_t *out)\n /* Parse a UCN where P points just past \\u or \\U and return its bidi code.  */\n \n static bidi::kind\n-get_bidi_ucn_1 (const unsigned char *p, bool is_U)\n+get_bidi_ucn_1 (const unsigned char *p, bool is_U, const unsigned char **end)\n {\n   /* 6.4.3 Universal Character Names\n       \\u hex-quad\n       \\U hex-quad hex-quad\n+      \\u { simple-hexadecimal-digit-sequence }\n      where \\unnnn means \\U0000nnnn.  */\n \n+  *end = p + 4;\n   if (is_U)\n     {\n       if (p[0] != '0' || p[1] != '0' || p[2] != '0' || p[3] != '0')\n \treturn bidi::kind::NONE;\n       /* Skip 4B so we can treat \\u and \\U the same below.  */\n       p += 4;\n+      *end += 4;\n+    }\n+  else if (p[0] == '{')\n+    {\n+      p++;\n+      while (*p == '0')\n+\tp++;\n+      if (p[0] != '2'\n+\t  || p[1] != '0'\n+\t  || !ISXDIGIT (p[2])\n+\t  || !ISXDIGIT (p[3])\n+\t  || p[4] != '}')\n+\treturn bidi::kind::NONE;\n+      *end = p + 5;\n     }\n \n   /* All code points we are looking for start with 20xx.  */\n@@ -1499,14 +1515,15 @@ get_bidi_ucn_1 (const unsigned char *p, bool is_U)\n    If the kind is not NONE, write the location to *OUT.*/\n \n static bidi::kind\n-get_bidi_ucn (cpp_reader *pfile,  const unsigned char *p, bool is_U,\n+get_bidi_ucn (cpp_reader *pfile, const unsigned char *p, bool is_U,\n \t      location_t *out)\n {\n-  bidi::kind result = get_bidi_ucn_1 (p, is_U);\n+  const unsigned char *end;\n+  bidi::kind result = get_bidi_ucn_1 (p, is_U, &end);\n   if (result != bidi::kind::NONE)\n     {\n       const unsigned char *start = p - 2;\n-      size_t num_bytes = 2 + (is_U ? 8 : 4);\n+      size_t num_bytes = end - start;\n       *out = get_location_for_byte_range_in_cur_line (pfile, start, num_bytes);\n     }\n   return result;"}]}