{"sha": "ea3f2b240febca348d795e19ba908a34f78b206d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEzZjJiMjQwZmViY2EzNDhkNzk1ZTE5YmE5MDhhMzRmNzhiMjA2ZA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2014-09-11T08:08:17Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2014-09-11T08:08:17Z"}, "message": "re PR target/63223 ([avr] Make jumptables work with -Wl,--section-start,.text=)\n\ngcc/\n\tPR target/63223\n\t* config/avr/avr.md (*tablejump.3byte-pc): New insn.\n\t(*tablejump): Restrict to !AVR_HAVE_EIJMP_EICALL.  Add void clobber.\n\t(casesi): Expand to *tablejump.3byte-pc if AVR_HAVE_EIJMP_EICALL.\nlibgcc/\n\tPR target/63223\n\t* config/avr/libgcc.S (__tablejump2__): Rewrite to use RAMPZ, ELPM\n\tand R24 as needed.  Make work for all devices and .text locations.\n\t(__do_global_ctors, __do_global_dtors): Use word addresses.\n\t(__tablejump__, __tablejump_elpm__): Remove functions.\n\t* t-avr (LIB1ASMFUNCS): Remove _tablejump, _tablejump_elpm.\n\tAdd _tablejump2.\n\t(XICALL, XIJMP): New macros.\n\nFrom-SVN: r215152", "tree": {"sha": "462a929a1a108e79a3e7461e386a0bfb888077a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/462a929a1a108e79a3e7461e386a0bfb888077a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea3f2b240febca348d795e19ba908a34f78b206d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea3f2b240febca348d795e19ba908a34f78b206d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea3f2b240febca348d795e19ba908a34f78b206d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea3f2b240febca348d795e19ba908a34f78b206d/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c883e5fb6a12718325cebeb653a4ccf4668a723c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c883e5fb6a12718325cebeb653a4ccf4668a723c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c883e5fb6a12718325cebeb653a4ccf4668a723c"}], "stats": {"total": 290, "additions": 155, "deletions": 135}, "files": [{"sha": "014014a8c148663f21b9b16476a40dd301fd355c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3f2b240febca348d795e19ba908a34f78b206d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3f2b240febca348d795e19ba908a34f78b206d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea3f2b240febca348d795e19ba908a34f78b206d", "patch": "@@ -1,3 +1,10 @@\n+2014-09-11  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/63223\n+\t* config/avr/avr.md (*tablejump.3byte-pc): New insn.\n+\t(*tablejump): Restrict to !AVR_HAVE_EIJMP_EICALL.  Add void clobber.\n+\t(casesi): Expand to *tablejump.3byte-pc if AVR_HAVE_EIJMP_EICALL.\n+\n 2014-09-11  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "ecedbbd96b0f35a2afa98c478e9b9cbe19e2584c", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3f2b240febca348d795e19ba908a34f78b206d/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3f2b240febca348d795e19ba908a34f78b206d/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=ea3f2b240febca348d795e19ba908a34f78b206d", "patch": "@@ -4932,8 +4932,9 @@\n         (unspec:HI [(match_operand:HI 0 \"register_operand\" \"!z,*r,z\")]\n                    UNSPEC_INDEX_JMP))\n    (use (label_ref (match_operand 1 \"\" \"\")))\n-   (clobber (match_dup 0))]\n-  \"\"\n+   (clobber (match_dup 0))\n+   (clobber (const_int 0))]\n+  \"!AVR_HAVE_EIJMP_EICALL\"\n   \"@\n \tijmp\n \tpush %A0\\;push %B0\\;ret\n@@ -4942,6 +4943,19 @@\n    (set_attr \"isa\" \"rjmp,rjmp,jmp\")\n    (set_attr \"cc\" \"none,none,clobber\")])\n \n+(define_insn \"*tablejump.3byte-pc\"\n+  [(set (pc)\n+        (unspec:HI [(reg:HI REG_Z)]\n+                   UNSPEC_INDEX_JMP))\n+   (use (label_ref (match_operand 0 \"\" \"\")))\n+   (clobber (reg:HI REG_Z))\n+   (clobber (reg:QI 24))]\n+  \"AVR_HAVE_EIJMP_EICALL\"\n+  \"clr r24\\;subi r30,pm_lo8(-(%0))\\;sbci r31,pm_hi8(-(%0))\\;sbci r24,pm_hh8(-(%0))\\;jmp __tablejump2__\"\n+  [(set_attr \"length\" \"6\")\n+   (set_attr \"isa\" \"eijmp\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n \n (define_expand \"casesi\"\n   [(parallel [(set (match_dup 6)\n@@ -4959,15 +4973,31 @@\n                       (label_ref (match_operand 4 \"\" \"\"))\n                       (pc)))\n \n-   (set (match_dup 6)\n-        (plus:HI (match_dup 6) (label_ref (match_operand:HI 3 \"\" \"\"))))\n+   (set (match_dup 10)\n+        (match_dup 7))\n \n-   (parallel [(set (pc) (unspec:HI [(match_dup 6)] UNSPEC_INDEX_JMP))\n+   (parallel [(set (pc)\n+                   (unspec:HI [(match_dup 10)] UNSPEC_INDEX_JMP))\n               (use (label_ref (match_dup 3)))\n-              (clobber (match_dup 6))])]\n+              (clobber (match_dup 10))\n+              (clobber (match_dup 8))])]\n   \"\"\n   {\n     operands[6] = gen_reg_rtx (HImode);\n+\n+    if (AVR_HAVE_EIJMP_EICALL)\n+      {\n+        operands[7] = operands[6];\n+        operands[8] = all_regs_rtx[24];\n+        operands[10] = gen_rtx_REG (HImode, REG_Z);\n+      }\n+    else\n+      {\n+        operands[7] = gen_rtx_PLUS (HImode, operands[6], \n+                                    gen_rtx_LABEL_REF (VOIDmode, operands[3]));\n+        operands[8] = const0_rtx;\n+        operands[10] = operands[6];\n+      }\n   })\n \n "}, {"sha": "a63f08e7ba6d6fb175b269fbeb448856b6766a17", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3f2b240febca348d795e19ba908a34f78b206d/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3f2b240febca348d795e19ba908a34f78b206d/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=ea3f2b240febca348d795e19ba908a34f78b206d", "patch": "@@ -1,3 +1,14 @@\n+2014-09-11  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/63223\n+\t* config/avr/libgcc.S (__tablejump2__): Rewrite to use RAMPZ, ELPM\n+\tand R24 as needed.  Make work for all devices and .text locations.\n+\t(__do_global_ctors, __do_global_dtors): Use word addresses.\n+\t(__tablejump__, __tablejump_elpm__): Remove functions.\n+\t* t-avr (LIB1ASMFUNCS): Remove _tablejump, _tablejump_elpm.\n+\tAdd _tablejump2.\n+\t(XICALL, XIJMP): New macros.\n+\n 2014-09-09  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n \tRamana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n "}, {"sha": "080e250cd616318549388ac24e2a0a9a18bcac80", "filename": "libgcc/config/avr/lib1funcs.S", "status": "modified", "additions": 100, "deletions": 127, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3f2b240febca348d795e19ba908a34f78b206d/libgcc%2Fconfig%2Favr%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3f2b240febca348d795e19ba908a34f78b206d/libgcc%2Fconfig%2Favr%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Flib1funcs.S?ref=ea3f2b240febca348d795e19ba908a34f78b206d", "patch": "@@ -46,6 +46,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n            input sections together are small enough to reach every\n            location with a RCALL/RJMP instruction.  */\n \n+#if defined (__AVR_HAVE_EIJMP_EICALL__) && !defined (__AVR_HAVE_ELPMX__)\n+#error device not supported\n+#endif\n+\n \t.macro\tmov_l  r_dest, r_src\n #if defined (__AVR_HAVE_MOVW__)\n \tmovw\t\\r_dest, \\r_src\n@@ -79,6 +83,14 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define XJMP  rjmp\n #endif\n \n+#if defined (__AVR_HAVE_EIJMP_EICALL__)\n+#define XICALL eicall\n+#define XIJMP  eijmp\n+#else\n+#define XICALL icall\n+#define XIJMP  ijmp\n+#endif\n+\n ;; Prologue stuff\n \n .macro do_prologue_saves n_pushed n_frame=0\n@@ -2127,11 +2139,7 @@ DEFUN __prologue_saves__\n \tout\t__SP_L__,r28\n #endif /* #SP = 8/16 */\n \n-#if defined (__AVR_HAVE_EIJMP_EICALL__)\n-\teijmp\n-#else\n-\tijmp\n-#endif\n+\tXIJMP\n \n ENDF __prologue_saves__\n #endif /* defined (L_prologue) */\n@@ -2213,38 +2221,54 @@ _cleanup:\n \f\n .section .text.libgcc, \"ax\", @progbits\n \n-#ifdef L_tablejump\n+#ifdef L_tablejump2\n DEFUN __tablejump2__\n-\tlsl\tr30\n-\trol\tr31\n-    ;; FALLTHRU\n-ENDF __tablejump2__\n-\n-DEFUN __tablejump__\n-#if defined (__AVR_HAVE_LPMX__)\n-\tlpm __tmp_reg__, Z+\n-\tlpm r31, Z\n-\tmov r30, __tmp_reg__\n+    lsl     r30\n+    rol     r31\n #if defined (__AVR_HAVE_EIJMP_EICALL__)\n-\teijmp\n-#else\n-\tijmp\n+    ;; Word address of gs() jumptable entry in R24:Z\n+    rol     r24\n+    out     __RAMPZ__, r24\n+#elif defined (__AVR_HAVE_ELPM__)\n+    ;; Word address of jumptable entry in Z\n+    clr     __tmp_reg__\n+    rol     __tmp_reg__\n+    out     __RAMPZ__, __tmp_reg__\n #endif\n \n-#else /* !HAVE_LPMX */\n-\tlpm\n-\tadiw r30, 1\n-\tpush r0\n-\tlpm\n-\tpush r0\n-#if defined (__AVR_HAVE_EIJMP_EICALL__)\n-\tin   __tmp_reg__, __EIND__\n-\tpush __tmp_reg__\n+    ;; Read word address from jumptable and jump\n+\n+#if defined (__AVR_HAVE_ELPMX__)\n+    elpm    __tmp_reg__, Z+\n+    elpm    r31, Z\n+    mov     r30, __tmp_reg__\n+#ifdef __AVR_HAVE_RAMPD__\n+    ;; Reset RAMPZ to 0 so that EBI devices don't read garbage from RAM\n+    out     __RAMPZ__, __zero_reg__\n+#endif /* RAMPD */\n+    XIJMP\n+#elif defined (__AVR_HAVE_ELPM__)\n+    elpm\n+    push    r0\n+    adiw    r30, 1\n+    elpm\n+    push    r0\n+    ret\n+#elif defined (__AVR_HAVE_LPMX__)\n+    lpm     __tmp_reg__, Z+\n+    lpm     r31, Z\n+    mov     r30, __tmp_reg__\n+    ijmp\n+#else\n+    lpm\n+    push    r0\n+    adiw    r30, 1\n+    lpm\n+    push    r0\n+    ret\n #endif\n-\tret\n-#endif /* !HAVE_LPMX */\n-ENDF __tablejump__\n-#endif /* defined (L_tablejump) */\n+ENDF __tablejump2__\n+#endif /* L_tablejump2 */\n \n #ifdef L_copy_data\n \t.section .init4,\"ax\",@progbits\n@@ -2336,116 +2360,65 @@ ENDF __do_clear_bss\n #ifdef L_ctors\n \t.section .init6,\"ax\",@progbits\n DEFUN __do_global_ctors\n-#if defined(__AVR_HAVE_ELPM__)\n-\tldi\tr17, hi8(__ctors_start)\n-\tldi\tr28, lo8(__ctors_end)\n-\tldi\tr29, hi8(__ctors_end)\n-\tldi\tr16, hh8(__ctors_end)\n-\trjmp\t.L__do_global_ctors_start\n+    ldi     r17, pm_hi8(__ctors_start)\n+    ldi     r28, pm_lo8(__ctors_end)\n+    ldi     r29, pm_hi8(__ctors_end)\n+#ifdef __AVR_HAVE_EIJMP_EICALL__\n+    ldi     r16, pm_hh8(__ctors_end)\n+#endif /* HAVE_EIJMP */\n+    rjmp    .L__do_global_ctors_start\n .L__do_global_ctors_loop:\n-\tsbiw\tr28, 2\n-\tsbc     r16, __zero_reg__\n-\tmov_h\tr31, r29\n-\tmov_l\tr30, r28\n-\tout     __RAMPZ__, r16\n-\tXCALL\t__tablejump_elpm__\n+    sbiw    r28, 1\n+#ifdef __AVR_HAVE_EIJMP_EICALL__\n+    sbc     r16, __zero_reg__\n+    mov     r24, r16\n+#endif /* HAVE_EIJMP */\n+    mov_h   r31, r29\n+    mov_l   r30, r28\n+    XCALL   __tablejump2__\n .L__do_global_ctors_start:\n-\tcpi\tr28, lo8(__ctors_start)\n-\tcpc\tr29, r17\n-\tldi\tr24, hh8(__ctors_start)\n-\tcpc\tr16, r24\n-\tbrne\t.L__do_global_ctors_loop\n-#else\n-\tldi\tr17, hi8(__ctors_start)\n-\tldi\tr28, lo8(__ctors_end)\n-\tldi\tr29, hi8(__ctors_end)\n-\trjmp\t.L__do_global_ctors_start\n-.L__do_global_ctors_loop:\n-\tsbiw\tr28, 2\n-\tmov_h\tr31, r29\n-\tmov_l\tr30, r28\n-\tXCALL\t__tablejump__\n-.L__do_global_ctors_start:\n-\tcpi\tr28, lo8(__ctors_start)\n-\tcpc\tr29, r17\n-\tbrne\t.L__do_global_ctors_loop\n-#endif /* defined(__AVR_HAVE_ELPM__) */\n+    cpi     r28, pm_lo8(__ctors_start)\n+    cpc     r29, r17\n+#ifdef __AVR_HAVE_EIJMP_EICALL__\n+    ldi     r24, pm_hh8(__ctors_start)\n+    cpc     r16, r24\n+#endif /* HAVE_EIJMP */\n+    brne    .L__do_global_ctors_loop\n ENDF __do_global_ctors\n #endif /* L_ctors */\n \n #ifdef L_dtors\n \t.section .fini6,\"ax\",@progbits\n DEFUN __do_global_dtors\n-#if defined(__AVR_HAVE_ELPM__)\n-\tldi\tr17, hi8(__dtors_end)\n-\tldi\tr28, lo8(__dtors_start)\n-\tldi\tr29, hi8(__dtors_start)\n-\tldi\tr16, hh8(__dtors_start)\n-\trjmp\t.L__do_global_dtors_start\n+    ldi     r17, pm_hi8(__dtors_start)\n+    ldi     r28, pm_lo8(__dtors_end)\n+    ldi     r29, pm_hi8(__dtors_end)\n+#ifdef __AVR_HAVE_EIJMP_EICALL__\n+    ldi     r16, pm_hh8(__dtors_end)\n+#endif /* HAVE_EIJMP */\n+    rjmp    .L__do_global_dtors_start\n .L__do_global_dtors_loop:\n-\tsbiw\tr28, 2\n-\tsbc     r16, __zero_reg__\n-\tmov_h\tr31, r29\n-\tmov_l\tr30, r28\n-\tout     __RAMPZ__, r16\n-\tXCALL\t__tablejump_elpm__\n+    sbiw    r28, 1\n+#ifdef __AVR_HAVE_EIJMP_EICALL__\n+    sbc     r16, __zero_reg__\n+    mov     r24, r16\n+#endif /* HAVE_EIJMP */\n+    mov_h   r31, r29\n+    mov_l   r30, r28\n+    XCALL   __tablejump2__\n .L__do_global_dtors_start:\n-\tcpi\tr28, lo8(__dtors_end)\n-\tcpc\tr29, r17\n-\tldi\tr24, hh8(__dtors_end)\n-\tcpc\tr16, r24\n-\tbrne\t.L__do_global_dtors_loop\n-#else\n-\tldi\tr17, hi8(__dtors_end)\n-\tldi\tr28, lo8(__dtors_start)\n-\tldi\tr29, hi8(__dtors_start)\n-\trjmp\t.L__do_global_dtors_start\n-.L__do_global_dtors_loop:\n-\tmov_h\tr31, r29\n-\tmov_l\tr30, r28\n-\tXCALL\t__tablejump__\n-\tadiw\tr28, 2\n-.L__do_global_dtors_start:\n-\tcpi\tr28, lo8(__dtors_end)\n-\tcpc\tr29, r17\n-\tbrne\t.L__do_global_dtors_loop\n-#endif /* defined(__AVR_HAVE_ELPM__) */\n+    cpi     r28, pm_lo8(__dtors_start)\n+    cpc     r29, r17\n+#ifdef __AVR_HAVE_EIJMP_EICALL__\n+    ldi     r24, pm_hh8(__dtors_start)\n+    cpc     r16, r24\n+#endif /* HAVE_EIJMP */\n+    brne    .L__do_global_dtors_loop\n ENDF __do_global_dtors\n #endif /* L_dtors */\n \n .section .text.libgcc, \"ax\", @progbits\n \n-#ifdef L_tablejump_elpm\n-DEFUN __tablejump_elpm__\n-#if defined (__AVR_HAVE_ELPMX__)\n-\telpm\t__tmp_reg__, Z+\n-\telpm\tr31, Z\n-\tmov\tr30, __tmp_reg__\n-#if defined (__AVR_HAVE_RAMPD__)\n-\t;; Reset RAMPZ to 0 so that EBI devices don't read garbage from RAM\n-\tout\t__RAMPZ__, __zero_reg__\n-#endif /* RAMPD */\n-#if defined (__AVR_HAVE_EIJMP_EICALL__)\n-\teijmp\n-#else\n-\tijmp\n-#endif\n-\n-#elif defined (__AVR_HAVE_ELPM__)\n-\telpm\n-\tadiw\tr30, 1\n-\tpush\tr0\n-\telpm\n-\tpush\tr0\n-#if defined (__AVR_HAVE_EIJMP_EICALL__)\n-\tin      __tmp_reg__, __EIND__\n-\tpush    __tmp_reg__\n-#endif\n-\tret\n-#endif\n-ENDF __tablejump_elpm__\n-#endif /* defined (L_tablejump_elpm) */\n-\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;; Loading n bytes from Flash; n = 3,4\n ;; R22... = Flash[Z]"}, {"sha": "1f7356968aacb4993b33882ee13a2c914a34d553", "filename": "libgcc/config/avr/t-avr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3f2b240febca348d795e19ba908a34f78b206d/libgcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3f2b240febca348d795e19ba908a34f78b206d/libgcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Ft-avr?ref=ea3f2b240febca348d795e19ba908a34f78b206d", "patch": "@@ -26,8 +26,7 @@ LIB1ASMFUNCS = \\\n \t_epilogue \\\n \t_exit \\\n \t_cleanup \\\n-\t_tablejump \\\n-\t_tablejump_elpm \\\n+\t_tablejump2 \\\n \t_load_3 _load_4 \\\n \t_xload_1 _xload_2 _xload_3 _xload_4 \\\n \t_movmemx \\"}]}