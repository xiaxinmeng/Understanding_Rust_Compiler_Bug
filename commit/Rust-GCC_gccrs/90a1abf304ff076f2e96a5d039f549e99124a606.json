{"sha": "90a1abf304ff076f2e96a5d039f549e99124a606", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBhMWFiZjMwNGZmMDc2ZjJlOTZhNWQwMzlmNTQ5ZTk5MTI0YTYwNg==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-05-10T15:29:27Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-06T11:35:33Z"}, "message": "[Ada] Time_IO.Image: Allow printing the time zone\n\ngcc/ada/\n\n\t* libgnat/g-catiio.ads: Document newly supported format.  Add\n\tISO_Time constant, for convenience.\n\t* libgnat/g-catiio.adb (Image_Helper): New helper function to do\n\tall the formatting work, called by the two exported Image\n\tfunctions.  Add support for \"%:::z\" here. Add a Time_Zone\n\tparameter used by the \"%:::z\" processing. This parameter is not\n\tused for the actual time zone computations; local time is always\n\tused for that, for ease of implementation reasons.  It would\n\tmake sense to use Append throughout this function, but that's a\n\tcleanup for another day.\n\t(Image): Modify these to pass the local time zone, or the\n\tspecified time zone, as appropriate.", "tree": {"sha": "1362a2b4b47e4b0ffad8032ac8acc5bfa74ccc65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1362a2b4b47e4b0ffad8032ac8acc5bfa74ccc65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90a1abf304ff076f2e96a5d039f549e99124a606", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90a1abf304ff076f2e96a5d039f549e99124a606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90a1abf304ff076f2e96a5d039f549e99124a606", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90a1abf304ff076f2e96a5d039f549e99124a606/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d868231706cf9a43ce1d6b474e8c1aa1535c4736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d868231706cf9a43ce1d6b474e8c1aa1535c4736", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d868231706cf9a43ce1d6b474e8c1aa1535c4736"}], "stats": {"total": 83, "additions": 77, "deletions": 6}, "files": [{"sha": "ad1babfb8261487d21699b5524806b91a70761cb", "filename": "gcc/ada/libgnat/g-catiio.adb", "status": "modified", "additions": 69, "deletions": 4, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90a1abf304ff076f2e96a5d039f549e99124a606/gcc%2Fada%2Flibgnat%2Fg-catiio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90a1abf304ff076f2e96a5d039f549e99124a606/gcc%2Fada%2Flibgnat%2Fg-catiio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-catiio.adb?ref=90a1abf304ff076f2e96a5d039f549e99124a606", "patch": "@@ -69,6 +69,14 @@ package body GNAT.Calendar.Time_IO is\n    -- Local Subprograms --\n    -----------------------\n \n+   function Image_Helper\n+     (Date      : Ada.Calendar.Time;\n+      Picture   : Picture_String;\n+      Time_Zone : Time_Zones.Time_Offset) return String;\n+   --  This is called by the two exported Image functions. It uses the local\n+   --  time zone for its computations, but uses Time_Zone when interpreting the\n+   --  \"%:::z\" tag.\n+\n    function Am_Pm (H : Natural) return String;\n    --  Return AM or PM depending on the hour H\n \n@@ -168,6 +176,10 @@ package body GNAT.Calendar.Time_IO is\n       return Image (Sec_Number (N), Padding, Length);\n    end Image;\n \n+   -----------\n+   -- Image --\n+   -----------\n+\n    function Image\n      (N       : Sec_Number;\n       Padding : Padding_Mode := Zero;\n@@ -213,15 +225,16 @@ package body GNAT.Calendar.Time_IO is\n       Time_Zone : Time_Zones.Time_Offset) return String\n    is\n       --  We subtract off the local time zone, and add in the requested\n-      --  Time_Zone, and then pass it on to the version of Image that uses\n-      --  the local time zone.\n+      --  Time_Zone, and then pass it on to Image_Helper, which uses the\n+      --  local time zone.\n \n       use Time_Zones;\n       Local_TZ : constant Time_Offset := Local_Time_Offset (Date);\n       Minute_Offset : constant Integer := Integer (Time_Zone - Local_TZ);\n       Second_Offset : constant Integer := Minute_Offset * 60;\n    begin\n-      return Image (Date + Duration (Second_Offset), Picture);\n+      return Image_Helper\n+        (Date + Duration (Second_Offset), Picture, Time_Zone);\n    end Image;\n \n    -----------\n@@ -231,6 +244,21 @@ package body GNAT.Calendar.Time_IO is\n    function Image\n      (Date    : Ada.Calendar.Time;\n       Picture : Picture_String) return String\n+   is\n+      use Time_Zones;\n+      Local_TZ : constant Time_Offset := Local_Time_Offset (Date);\n+   begin\n+      return Image_Helper (Date, Picture, Local_TZ);\n+   end Image;\n+\n+   ------------------\n+   -- Image_Helper --\n+   ------------------\n+\n+   function Image_Helper\n+     (Date      : Ada.Calendar.Time;\n+      Picture   : Picture_String;\n+      Time_Zone : Time_Zones.Time_Offset) return String\n    is\n       Padding : Padding_Mode := Zero;\n       --  Padding is set for one directive\n@@ -424,6 +452,43 @@ package body GNAT.Calendar.Time_IO is\n                     Image (Minute, Padding, Length => 2) & ':' &\n                     Image (Second, Padding, Length => 2);\n \n+               --  Time zone. Append \"+hh\", \"-hh\", \"+hh:mm\", or \"-hh:mm\", as\n+               --  appropriate.\n+\n+               when ':' =>\n+                  declare\n+                     use type Time_Zones.Time_Offset;\n+                     TZ_Form : constant Picture_String := \"%:::z\";\n+                     TZ : constant Natural := Natural (abs Time_Zone);\n+                  begin\n+                     if P + TZ_Form'Length - 1 <= Picture'Last\n+                       and then Picture (P .. P + TZ_Form'Length - 1) = \"%:::z\"\n+                     then\n+                        if Time_Zone >= 0 then\n+                           Result := Result & \"+\";\n+                        else\n+                           Result := Result & \"-\";\n+                        end if;\n+\n+                        Result := Result &\n+                          Image (Integer (TZ / 60), Padding, Length => 2);\n+\n+                        if TZ mod 60 /= 0 then\n+                           Result := Result & \":\";\n+                           Result := Result &\n+                             Image (TZ mod 60, Padding, Length => 2);\n+                        end if;\n+\n+                        P := P + TZ_Form'Length - 2; -- will add 2 below\n+\n+                     --  We do not support any of the other standard GNU\n+                     --  time-zone formats (%z, %:z, %::z, %Z).\n+\n+                     else\n+                        raise Picture_Error with \"unsupported picture format\";\n+                     end if;\n+                  end;\n+\n                --  Locale's abbreviated weekday name (Sun..Sat)\n \n                when 'a' =>\n@@ -550,7 +615,7 @@ package body GNAT.Calendar.Time_IO is\n       end loop;\n \n       return To_String (Result);\n-   end Image;\n+   end Image_Helper;\n \n    --------------------------\n    -- Month_Name_To_Number --"}, {"sha": "6bb98471f6925ddb5becade567f096fd5815aec8", "filename": "gcc/ada/libgnat/g-catiio.ads", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90a1abf304ff076f2e96a5d039f549e99124a606/gcc%2Fada%2Flibgnat%2Fg-catiio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90a1abf304ff076f2e96a5d039f549e99124a606/gcc%2Fada%2Flibgnat%2Fg-catiio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-catiio.ads?ref=90a1abf304ff076f2e96a5d039f549e99124a606", "patch": "@@ -43,7 +43,7 @@ package GNAT.Calendar.Time_IO is\n    --  This is a string to describe date and time output format. The string is\n    --  a set of standard character and special tag that are replaced by the\n    --  corresponding values. It follows the GNU Date specification. Here are\n-   --  the recognized directives :\n+   --  the recognized directives:\n    --\n    --          %    a literal %\n    --          n    a newline\n@@ -62,6 +62,8 @@ package GNAT.Calendar.Time_IO is\n    --                (a nonstandard extension)\n    --          %S   second (00..59)\n    --          %T   time, 24-hour (hh:mm:ss)\n+   --          %:::z  numeric time zone with : to necessary precision\n+   --                 (e.g., -04, +05:30)\n    --\n    --          Date fields:\n    --\n@@ -98,8 +100,11 @@ package GNAT.Calendar.Time_IO is\n    --          %e   microseconds (6 digits)\n    --          %o   nanoseconds  (9 digits)\n \n+   ISO_Time : constant Picture_String;\n+   --  ISO 8601 standard date and time, with time zone.\n+\n    ISO_Date : constant Picture_String;\n-   --  This format follow the ISO 8601 standard. The format is \"YYYY-MM-DD\",\n+   --  This format follows the ISO 8601 standard. The format is \"YYYY-MM-DD\",\n    --  four digits year, month and day number separated by minus.\n \n    US_Date : constant Picture_String;\n@@ -174,6 +179,7 @@ package GNAT.Calendar.Time_IO is\n    --  Put Date with format Picture. Raise Picture_Error if bad picture string\n \n private\n+   ISO_Time      : constant Picture_String := \"%Y-%m-%dT%H:%M:%S%:::z\";\n    ISO_Date      : constant Picture_String := \"%Y-%m-%d\";\n    US_Date       : constant Picture_String := \"%m/%d/%y\";\n    European_Date : constant Picture_String := \"%d/%m/%y\";"}]}