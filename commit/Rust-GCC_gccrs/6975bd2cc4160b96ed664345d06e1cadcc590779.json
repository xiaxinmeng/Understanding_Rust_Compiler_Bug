{"sha": "6975bd2cc4160b96ed664345d06e1cadcc590779", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk3NWJkMmNjNDE2MGI5NmVkNjY0MzQ1ZDA2ZTFjYWRjYzU5MDc3OQ==", "commit": {"author": {"name": "Kazuhiro Inaoka", "email": "inaoka.kazuhiro@renesas.com", "date": "2003-12-09T17:33:00Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2003-12-09T17:33:00Z"}, "message": "m32r.h: Add support for m32r2 processor.\n\n* config/m32r/m32r.h: Add support for m32r2 processor.  Including\n  a new command line option -m32r2 to select it.\n* config/m32r/m32r.c: Add support for the new processor variant.\n* config/m32r/m32r.md: Likewise.\n* config/m32r/t-m32r: Add m32r2 multilibs.\n* doc/invoke.texi: Document the new command line switch.\n\nFrom-SVN: r74473", "tree": {"sha": "8526222592895afa1cff9ca4e7742382b6ea65ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8526222592895afa1cff9ca4e7742382b6ea65ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6975bd2cc4160b96ed664345d06e1cadcc590779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6975bd2cc4160b96ed664345d06e1cadcc590779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6975bd2cc4160b96ed664345d06e1cadcc590779", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6975bd2cc4160b96ed664345d06e1cadcc590779/comments", "author": null, "committer": null, "parents": [{"sha": "3a7ab7e8b78d9f29598eb43e5643b5756ce0aa32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7ab7e8b78d9f29598eb43e5643b5756ce0aa32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a7ab7e8b78d9f29598eb43e5643b5756ce0aa32"}], "stats": {"total": 57, "additions": 44, "deletions": 13}, "files": [{"sha": "c54a4fe6630a75a9247af77d2cc19b6ded8a21a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6975bd2cc4160b96ed664345d06e1cadcc590779/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6975bd2cc4160b96ed664345d06e1cadcc590779/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6975bd2cc4160b96ed664345d06e1cadcc590779", "patch": "@@ -1,3 +1,12 @@\n+2003-12-09  Kazuhiro Inaoka <inaoka.kazuhiro@renesas.com>\n+\n+\t* config/m32r/m32r.h: Add support for m32r2 processor.  Including\n+\ta new command line option -m32r2 to select it.\n+\t* config/m32r/m32r.c: Add support for the new processor variant.\n+\t* config/m32r/m32r.md: Likewise.\n+\t* config/m32r/t-m32r: Add m32r2 multilibs.\n+\t* doc/invoke.texi: Document the new command line switch.\n+\n 2003-12-08  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* defaults.h (LOCAL_REGNO): Give the default definition."}, {"sha": "e92566ca964011c16d4c7f1a7cf188221d6144cb", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6975bd2cc4160b96ed664345d06e1cadcc590779/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6975bd2cc4160b96ed664345d06e1cadcc590779/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=6975bd2cc4160b96ed664345d06e1cadcc590779", "patch": "@@ -659,7 +659,7 @@ arm*-*-netbsd*)\n \tuse_collect2=yes\n \t;;\n arm*-*-linux*)\t\t\t# ARM GNU/Linux with ELF\n-\ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h arm/linux-gas.h arm/linux-elf.h\"\n+\ttm_file=\"dbxelf.h elfos.h linux.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h arm/linux-gas.h arm/linux-elf.h\"\n \ttmake_file=\"t-slibgcc-elf-ver t-linux arm/t-linux\"\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \tgnu_ld=yes"}, {"sha": "bcc9749b3ca98b5af81bcf1f618d4688a8a41c2c", "filename": "gcc/config/arm/linux-elf.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6975bd2cc4160b96ed664345d06e1cadcc590779/gcc%2Fconfig%2Farm%2Flinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6975bd2cc4160b96ed664345d06e1cadcc590779/gcc%2Fconfig%2Farm%2Flinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-elf.h?ref=6975bd2cc4160b96ed664345d06e1cadcc590779", "patch": "@@ -47,6 +47,7 @@\n #define CPLUSPLUS_CPP_SPEC \"-D_GNU_SOURCE %(cpp)\"\n \n /* Now we define the strings used to build the spec file.  */\n+#undef  LIB_SPEC\n #define LIB_SPEC \\\n   \"%{pthread:-lpthread} \\\n    %{shared:-lc} \\"}, {"sha": "77918c35cd0ec05eac675cc2a5d2c912641b1853", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6975bd2cc4160b96ed664345d06e1cadcc590779/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6975bd2cc4160b96ed664345d06e1cadcc590779/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=6975bd2cc4160b96ed664345d06e1cadcc590779", "patch": "@@ -42,14 +42,18 @@ Boston, MA 02111-1307, USA.  */\n \n /* M32R/X overrides.  */\n /* Print subsidiary information on the compiler version in use.  */\n-#define TARGET_VERSION fprintf (stderr, \" (m32r/x)\");\n+#define TARGET_VERSION fprintf (stderr, \" (m32r/x/2)\");\n \n /* Additional flags for the preprocessor.  */\n-#define CPP_CPU_SPEC \"%{m32rx:-D__M32RX__} %{m32r:-U__M32RX__}\"\n+#define CPP_CPU_SPEC \"%{m32rx:-D__M32RX__ -D__m32rx__ -U__M32R2__ -U__m32r2__} \\\n+%{m32r2:-D__M32R2__ -D__m32r2__ -U__M32RX__ -U__m32rx__} \\\n+%{m32r:-U__M32RX__  -U__m32rx__ -U__M32R2__ -U__m32r2__} \\\n+ \"\n+\n \n /* Assembler switches.  */\n #define ASM_CPU_SPEC \\\n-\"%{m32r} %{m32rx} %{!O0: %{O*: -O}} --no-warn-explicit-parallel-conflicts\"\n+\"%{m32r} %{m32rx} %{m32r2} %{!O0: %{O*: -O}} --no-warn-explicit-parallel-conflicts\"\n \n /* Use m32rx specific crt0/crtinit/crtfini files.  */\n #define STARTFILE_CPU_SPEC \"%{!shared:crt0.o%s} %{m32rx:m32rx/crtinit.o%s} %{!m32rx:crtinit.o%s}\"\n@@ -58,7 +62,8 @@ Boston, MA 02111-1307, USA.  */\n /* Extra machine dependent switches.  */\n #define SUBTARGET_SWITCHES\t\t\t\t\t\t\t\\\n     { \"32rx\",\t\t\tTARGET_M32RX_MASK, \"Compile for the m32rx\" },\t\\\n-    { \"32r\",\t\t\t-TARGET_M32RX_MASK, \"\" },\n+    { \"32r2\",\t\t\tTARGET_M32R2_MASK, \"Compile for the m32r2\" },\t\\\n+    { \"32r\",\t\t\t-(TARGET_M32RX_MASK+TARGET_M32R2_MASK), \"\" },\n \n /* Define this macro as a C expression for the initializer of an array of\n    strings to tell the driver program which options are defaults for this\n@@ -223,6 +228,12 @@ extern int target_flags;\n #undef  TARGET_M32R\n #define TARGET_M32R             (! TARGET_M32RX)\n \n+/* Support extended instruction set of m32r2.  */\n+#define TARGET_M32R2_MASK       (1 << 6)\n+#define TARGET_M32R2            (target_flags & TARGET_M32RX_MASK)\n+#undef  TARGET_M32R\n+#define TARGET_M32R             (! TARGET_M32RX && ! TARGET_M32R2)\n+\n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n    each pair being { \"NAME\", VALUE }"}, {"sha": "638997f2a929745dbe5108013d7fe560efce020d", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6975bd2cc4160b96ed664345d06e1cadcc590779/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6975bd2cc4160b96ed664345d06e1cadcc590779/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=6975bd2cc4160b96ed664345d06e1cadcc590779", "patch": "@@ -72,8 +72,12 @@\n (define_attr \"m32rx\" \"no,yes\"\n   (const (symbol_ref \"(TARGET_M32RX != 0)\")))\n \n+(define_attr \"m32r2\" \"no,yes\"\n+  (const (symbol_ref \"(TARGET_M32R2 != 0)\")))\n+\n (define_attr \"m32rx_pipeline\" \"either,s,o,long,m32r\"\n-  (cond [(eq_attr \"m32rx\" \"no\")\n+  (cond [(and (eq_attr \"m32rx\" \"no\")\n+              (eq_attr \"m32r2\" \"no\"))\n          (const_string \"m32r\")\n \n          (eq_attr \"insn_size\" \"!short\")\n@@ -1180,7 +1184,7 @@\n   [(set (reg:SI 17)\n         (eq:SI (match_operand:SI 0 \"register_operand\" \"r,r\")\n                (match_operand:SI 1 \"reg_or_zero_operand\" \"r,P\")))]\n-  \"TARGET_M32RX\"\n+  \"TARGET_M32RX || TARGET_M32R2\"\n   \"@\n    cmpeq %0, %1\n    cmpz  %0\"\n@@ -1612,7 +1616,7 @@\n   if (! register_operand (op1, mode))\n     op1 = force_reg (mode, op1);\n \n-  if (TARGET_M32RX)\n+  if (TARGET_M32RX || TARGET_M32R2)\n     {\n       if (! reg_or_zero_operand (op2, mode))\n         op2 = force_reg (mode, op2);\n@@ -1638,7 +1642,7 @@\n \t(eq:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n \t       (match_operand:SI 2 \"reg_or_zero_operand\" \"rP\")))\n    (clobber (reg:SI 17))]\n-  \"TARGET_M32RX\"\n+  \"TARGET_M32RX || TARGET_M32R2\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"6\")])\n@@ -1648,7 +1652,7 @@\n \t(eq:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t       (match_operand:SI 2 \"reg_or_zero_operand\" \"\")))\n    (clobber (reg:SI 17))]\n-  \"TARGET_M32RX\"\n+  \"TARGET_M32RX || TARGET_M32R2\"\n   [(set (reg:SI 17)\n \t(eq:SI (match_dup 1)\n \t       (match_dup 2)))"}, {"sha": "8770f1ea8a32a7f4a25b5b0e3dbb15189ef58750", "filename": "gcc/config/m32r/t-m32r", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6975bd2cc4160b96ed664345d06e1cadcc590779/gcc%2Fconfig%2Fm32r%2Ft-m32r", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6975bd2cc4160b96ed664345d06e1cadcc590779/gcc%2Fconfig%2Fm32r%2Ft-m32r", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Ft-m32r?ref=6975bd2cc4160b96ed664345d06e1cadcc590779", "patch": "@@ -41,14 +41,16 @@ $(T)crtfini.o: $(srcdir)/config/m32r/initfini.c $(GCC_PASSES) $(CONFIG_H)\n \t-o $(T)crtfini.o \n m32rx:\n \tmkdir $@\n+m32r2:\n+\tmkdir $@\n \n # -mmodel={small,medium} requires separate libraries.\n # We don't build libraries for the large model, instead we use the medium\n # libraries.  The only difference is that the large model can handle jumps\n # more than 26 signed bits away.\n \n-MULTILIB_OPTIONS = mmodel=small/mmodel=medium m32r/m32rx\n-MULTILIB_DIRNAMES = small medium m32r m32rx\n+MULTILIB_OPTIONS = mmodel=small/mmodel=medium m32r/m32rx/m32r2 \n+MULTILIB_DIRNAMES = small medium m32r m32rx m32r2\n MULTILIB_MATCHES = mmodel?medium=mmodel?large\n \n # Set MULTILIB_EXTRA_OPTS so shipped libraries have small data in .sdata and"}, {"sha": "8102e89f278187cacbd273a37bbf43593db6670b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6975bd2cc4160b96ed664345d06e1cadcc590779/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6975bd2cc4160b96ed664345d06e1cadcc590779/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6975bd2cc4160b96ed664345d06e1cadcc590779", "patch": "@@ -400,7 +400,7 @@ in the following sections.\n -mno-crt0  -mrelax}\n \n @emph{M32R/D Options}\n-@gccoptlist{-m32rx  -m32r  -mcode-model=@var{model-type} @gol\n+@gccoptlist{-m32r2 -m32rx -m32r -mcode-model=@var{model-type} @gol\n -msdata=@var{sdata-type}  -G @var{num}}\n \n @emph{M88K Options}\n@@ -6840,6 +6840,10 @@ This option makes symbolic debugging impossible.\n These @option{-m} options are defined for Mitsubishi M32R/D architectures:\n \n @table @gcctabopt\n+@item -m32r2\n+@opindex m32r2\n+Generate code for the M32R/2@.\n+\n @item -m32rx\n @opindex m32rx\n Generate code for the M32R/X@."}]}