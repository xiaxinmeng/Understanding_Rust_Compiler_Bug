{"sha": "0c308f598081af95f63e2cc0c788b9baf4f6f1dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMzMDhmNTk4MDgxYWY5NWY2M2UyY2MwYzc4OGI5YmFmNGY2ZjFkYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-08-25T16:22:42Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-08-25T16:22:42Z"}, "message": "20001117-1.c: Needs return_address.\n\n\t* gcc.dg/20001117-1.c: Needs return_address.\n\t* gcc.dg/20020415-1.c: Needs alloca.\n\t* gcc.dg/graphite/id-pr44676.c: Needs profiling.\n\t* gcc.dg/graphite/pr60979.c: Needs nonlocal_goto\n\t* gcc.dg/pr63186.c: Needs label_values.\n\t* gcc.dg/torture/pr33848.c: Likwise.\n\n\t* lib/target-supports.exp (check_effective_target_fopenacc,\n\tcheck_effective_target_fopenmp): Disable for nvptx.\n\t* gcc.dg/graphite/run-id-pr47653.c: Disable for nvptx.\n\t* gcc.dg/stack-usage-1.c: Likewise.\n\t* gcc.dg/stack-usage-2.c: Likewise.\n\t* gcc.dg/unused-5.c: Likewise.\n\t* gcc.dg/unwind-1.c: Likewise.\n\nFrom-SVN: r227177", "tree": {"sha": "3b0f497d2b6c454da00615042b211271bb9f8c09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b0f497d2b6c454da00615042b211271bb9f8c09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c308f598081af95f63e2cc0c788b9baf4f6f1dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c308f598081af95f63e2cc0c788b9baf4f6f1dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c308f598081af95f63e2cc0c788b9baf4f6f1dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a139f281473e41b815913e27f124713bddcb5421", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a139f281473e41b815913e27f124713bddcb5421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a139f281473e41b815913e27f124713bddcb5421"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "214a87a88e14b5bc7bd9bad5387e4ab634d69594", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c308f598081af95f63e2cc0c788b9baf4f6f1dc", "patch": "@@ -1,3 +1,20 @@\n+2015-08-25  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* gcc.dg/20001117-1.c: Needs return_address.\n+\t* gcc.dg/20020415-1.c: Needs alloca.\n+\t* gcc.dg/graphite/id-pr44676.c: Needs profiling.\n+\t* gcc.dg/graphite/pr60979.c: Needs nonlocal_goto\n+\t* gcc.dg/pr63186.c: Needs label_values.\n+\t* gcc.dg/torture/pr33848.c: Likwise.\n+\n+\t* lib/target-supports.exp (check_effective_target_fopenacc,\n+\tcheck_effective_target_fopenmp): Disable for nvptx.\n+\t* gcc.dg/graphite/run-id-pr47653.c: Disable for nvptx.\n+\t* gcc.dg/stack-usage-1.c: Likewise.\n+\t* gcc.dg/stack-usage-2.c: Likewise.\n+\t* gcc.dg/unused-5.c: Likewise.\n+\t* gcc.dg/unwind-1.c: Likewise.\n+\n 2015-08-25  Christian Bruel  <christian.bruel@st.com>\n \n \t* gcc.dg/Wno-frame-address.c: Skip for ARM."}, {"sha": "1b24300da8e5b16636303ae72e00ad9184e50e0e", "filename": "gcc/testsuite/gcc.dg/20001117-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2F20001117-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2F20001117-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20001117-1.c?ref=0c308f598081af95f63e2cc0c788b9baf4f6f1dc", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -finstrument-functions\" } */\n+/* { dg-require-effective-target return_address } */\n \n extern void abort (void);\n extern void exit (int);"}, {"sha": "46a1bbddc30c7f29948dc1d2aa5d81bc99be66b7", "filename": "gcc/testsuite/gcc.dg/20020415-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2F20020415-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2F20020415-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020415-1.c?ref=0c308f598081af95f63e2cc0c788b9baf4f6f1dc", "patch": "@@ -1,9 +1,9 @@\n /* PR target/6303\n    This testcase ICEd because s390 did not define\n    ASM_SIMPLIFY_DWARF_ADDR hook.  */\n-/* { dg-require-effective-target alloca } */\n /* { dg-do compile { target fpic } } */\n /* { dg-options \"-O2 -fpic -g\" } */\n+/* { dg-require-effective-target alloca } */\n \n static inline char *\n bar (unsigned long x, char *y)"}, {"sha": "ad22cdec8a7f73fec8910d96d43b8428d21b88dd", "filename": "gcc/testsuite/gcc.dg/graphite/id-pr44676.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-pr44676.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-pr44676.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-pr44676.c?ref=0c308f598081af95f63e2cc0c788b9baf4f6f1dc", "patch": "@@ -1,4 +1,5 @@\n /* { dg-options \"-O2 -fgraphite-identity -fprofile-generate\" } */\n+/* { dg-require-profiling \"-fprofile-generate\" } */\n \n int\n extend_options (int h, int map, int x, int y, int dx)"}, {"sha": "ab8aa654d192824d933eefc2bf11d90484cfd5a4", "filename": "gcc/testsuite/gcc.dg/graphite/pr60979.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr60979.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr60979.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr60979.c?ref=0c308f598081af95f63e2cc0c788b9baf4f6f1dc", "patch": "@@ -1,4 +1,5 @@\n /* { dg-options \"-O -fgraphite-identity\" } */\n+/* { dg-require-effective-target nonlocal_goto } */\n \n #include <setjmp.h>\n "}, {"sha": "20fdf87565ed42a8020dbdeb260bcb13e54d64c9", "filename": "gcc/testsuite/gcc.dg/graphite/run-id-pr47653.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-pr47653.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-pr47653.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-pr47653.c?ref=0c308f598081af95f63e2cc0c788b9baf4f6f1dc", "patch": "@@ -1,4 +1,6 @@\n /* { dg-options \"-O -fstack-check=generic -ftree-pre -fgraphite-identity\" } */\n+/* nvptx doesn't expose a stack.  */\n+/* { dg-skip-if \"\" { nvptx-*-* } { \"*\" } { \"\" } } */\n \n int main ()\n {"}, {"sha": "32aa2afda9b1a453e7ba6ae28a836b093829a82f", "filename": "gcc/testsuite/gcc.dg/pr63186.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63186.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63186.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63186.c?ref=0c308f598081af95f63e2cc0c788b9baf4f6f1dc", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do link } */\n /* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target label_values } */\n+\n void *a;\n int b, c, d;\n "}, {"sha": "7864c6a282ba021d702aaba4802e655305b34a7c", "filename": "gcc/testsuite/gcc.dg/stack-usage-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c?ref=0c308f598081af95f63e2cc0c788b9baf4f6f1dc", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-fstack-usage\" } */\n+/* nvptx doesn't have a reg allocator, and hence no stack usage data.  */\n+/* { dg-skip-if \"\" { nvptx-*-* } { \"*\" } { \"\" } } */\n \n /* This is aimed at testing basic support for -fstack-usage in the back-ends.\n    See the SPARC back-end for example (grep flag_stack_usage_info in sparc.c)."}, {"sha": "c2527d27c18b797609c8e9dead537c1a3bff7761", "filename": "gcc/testsuite/gcc.dg/stack-usage-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-2.c?ref=0c308f598081af95f63e2cc0c788b9baf4f6f1dc", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wstack-usage=512\" } */\n+/* nvptx gets very upset with mismatched function types.  */\n+/* { dg-skip-if \"\" { nvptx-*-* } { \"*\" } { \"\" } } */\n \n int foo1 (void)  /* { dg-bogus \"stack usage\" } */\n {"}, {"sha": "db6060253eb2712326b557acf4e543bf9576f2de", "filename": "gcc/testsuite/gcc.dg/torture/pr33848.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr33848.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr33848.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr33848.c?ref=0c308f598081af95f63e2cc0c788b9baf4f6f1dc", "patch": "@@ -1,4 +1,3 @@\n-/* { dg-require-effective-target label_values } */\n /* &&foo should be hoisted, but on most targets, excess register pressure\n    forces it to be rematerialized before \"data != &&foo\".  On targets that\n    have a \"branch if registers are equal\" instruction, this leads to the\n@@ -7,6 +6,7 @@\n    say that &&foo was the target of the branch, and the real target would\n    then be removed as dead.  */\n /* { dg-do link } */\n+/* { dg-require-effective-target label_values } */\n #define NVARS 30\n #define MULTI(X) \\\n   X( 0), X( 1), X( 2), X( 3), X( 4), X( 5), X( 6), X( 7), X( 8), X( 9), \\"}, {"sha": "1b8e100d249e8a57349917a14176882657dc2626", "filename": "gcc/testsuite/gcc.dg/unused-5.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Funused-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Funused-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funused-5.c?ref=0c308f598081af95f63e2cc0c788b9baf4f6f1dc", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wunused\" } */\n /* { dg-final { scan-assembler \"string_to_look_for\" } } */\n+/* nvptx outputs strings as array of ints.  */\n+/* { dg-skip-if \"\" { nvptx-*-* } { \"*\" } { \"\" } } */\n \n /* 'volatile' variables get output and don't produce a warning about being\n    unused.  */"}, {"sha": "a035af1f2c266cf7481a073f0350fb3871d802d8", "filename": "gcc/testsuite/gcc.dg/unwind-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Funwind-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Fgcc.dg%2Funwind-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funwind-1.c?ref=0c308f598081af95f63e2cc0c788b9baf4f6f1dc", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do assemble { target { ! { powerpc-ibm-aix* } } } } */\n+/* { dg-do assemble { target { ! { powerpc-ibm-aix* nvptx-*-* } } } } */\n /* { dg-options \"-fleading-underscore -funwind-tables\" } */\n \n void func(void) __asm(\"_func\");"}, {"sha": "1a0ad787ac09e101b9205dc88499061a933a3f7f", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c308f598081af95f63e2cc0c788b9baf4f6f1dc/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=0c308f598081af95f63e2cc0c788b9baf4f6f1dc", "patch": "@@ -819,6 +819,10 @@ proc check_effective_target_fgraphite {} {\n # code, 0 otherwise.\n \n proc check_effective_target_fopenacc {} {\n+    # nvptx can be built with the device-side bits of openacc, but it\n+    # does not make sense to test it as an openacc host.\n+    if [istarget nvptx-*-*] { return 0 }\n+\n     return [check_no_compiler_messages fopenacc object {\n \tvoid foo (void) { }\n     } \"-fopenacc\"]\n@@ -828,6 +832,10 @@ proc check_effective_target_fopenacc {} {\n # code, 0 otherwise.\n \n proc check_effective_target_fopenmp {} {\n+    # nvptx can be built with the device-side bits of libgomp, but it\n+    # does not make sense to test it as an openmp host.\n+    if [istarget nvptx-*-*] { return 0 }\n+\n     return [check_no_compiler_messages fopenmp object {\n \tvoid foo (void) { }\n     } \"-fopenmp\"]"}]}