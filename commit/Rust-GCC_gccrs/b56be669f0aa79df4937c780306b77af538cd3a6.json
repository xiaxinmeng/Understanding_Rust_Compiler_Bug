{"sha": "b56be669f0aa79df4937c780306b77af538cd3a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU2YmU2NjlmMGFhNzlkZjQ5MzdjNzgwMzA2Yjc3YWY1MzhjZDNhNg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-05-06T22:04:19Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-05-06T22:04:19Z"}, "message": "rs6000: Remove TM regs\n\nWe do not need to expose the TM registers in debug info.  It isn't\nactually useful there, because none of the things that can modify\nthese registers (other than explicit moves) are marked.\n\nWe also do not need the registers for GCC itself internally.  This\npatch deletes them.\n\n\n\t* config/rs6000/rs6000.md (TFHAR_REGNO, TFIAR_REGNO, TEXASR_REGNO):\n\tDelete.\n\t* config/rs6000/rs6000.h (FIRST_PSEUDO_REGISTER): Adjust.\n\t(DWARF_FRAME_REGISTERS): Adjust.\n\t(FIXED_REGISTERS, CALL_USED_REGISTERS, CALL_REALLY_USED_REGISTERS):\n\tAdjust.\n\t(REG_ALLOC_ORDER): Adjust.\n\t(enum reg_class): Delete SPR_REGS.\n\t(REG_CLASS_NAMES): Delete SPR_REGS.\n\t(REG_CLASS_CONTENTS): Delete SPR_REGS.  Adjust for deleted TM regs.\n\t(REGISTER_NAMES): Adjust.\n\t(ADDITIONAL_REGISTER_NAMES): Adjust.\n\t* config/rs6000/darwin.h (REGISTER_NAMES): Adjust.\n\t* config/rs6000/htm.md (htm_mfspr_<mode>, htm_mtspr_<mode>): Adjust.\n\t* config/rs6000/predicates.md (htm_spr_reg_operand): Delete.\n\t* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Adjust.\n\t(htm_spr_regno): Delete.\n\t(htm_expand_builtin): Adjust: the HTM builtins now have one fewer\n\targument.\n\t(rs6000_dbx_register_number): Adjust.\n\nFrom-SVN: r270927", "tree": {"sha": "2e888dff6c2db990d092c84a0d843da632218fdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e888dff6c2db990d092c84a0d843da632218fdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b56be669f0aa79df4937c780306b77af538cd3a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56be669f0aa79df4937c780306b77af538cd3a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b56be669f0aa79df4937c780306b77af538cd3a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56be669f0aa79df4937c780306b77af538cd3a6/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7da118f12b9ce01918cd8384e5e523c9834c09d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7da118f12b9ce01918cd8384e5e523c9834c09d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7da118f12b9ce01918cd8384e5e523c9834c09d9"}], "stats": {"total": 132, "additions": 38, "deletions": 94}, "files": [{"sha": "bf16557218df067dac26c2341e5dc0e43d75e113", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56be669f0aa79df4937c780306b77af538cd3a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56be669f0aa79df4937c780306b77af538cd3a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b56be669f0aa79df4937c780306b77af538cd3a6", "patch": "@@ -1,3 +1,26 @@\n+2019-05-06  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.md (TFHAR_REGNO, TFIAR_REGNO, TEXASR_REGNO):\n+\tDelete.\n+\t* config/rs6000/rs6000.h (FIRST_PSEUDO_REGISTER): Adjust.\n+\t(DWARF_FRAME_REGISTERS): Adjust.\n+\t(FIXED_REGISTERS, CALL_USED_REGISTERS, CALL_REALLY_USED_REGISTERS):\n+\tAdjust.\n+\t(REG_ALLOC_ORDER): Adjust.\n+\t(enum reg_class): Delete SPR_REGS.\n+\t(REG_CLASS_NAMES): Delete SPR_REGS.\n+\t(REG_CLASS_CONTENTS): Delete SPR_REGS.  Adjust for deleted TM regs.\n+\t(REGISTER_NAMES): Adjust.\n+\t(ADDITIONAL_REGISTER_NAMES): Adjust.\n+\t* config/rs6000/darwin.h (REGISTER_NAMES): Adjust.\n+\t* config/rs6000/htm.md (htm_mfspr_<mode>, htm_mtspr_<mode>): Adjust.\n+\t* config/rs6000/predicates.md (htm_spr_reg_operand): Delete.\n+\t* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Adjust.\n+\t(htm_spr_regno): Delete.\n+\t(htm_expand_builtin): Adjust: the HTM builtins now have one fewer\n+\targument.\n+\t(rs6000_dbx_register_number): Adjust.\n+\n 2019-05-06  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.h (PRE_GCC3_DWARF_FRAME_REGISTERS): Delete."}, {"sha": "d86333d94290244950a9e0127e7e9241f2414409", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56be669f0aa79df4937c780306b77af538cd3a6/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56be669f0aa79df4937c780306b77af538cd3a6/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=b56be669f0aa79df4937c780306b77af538cd3a6", "patch": "@@ -231,8 +231,7 @@ extern int darwin_emit_branch_islands;\n     \"v16\", \"v17\", \"v18\", \"v19\", \"v20\", \"v21\", \"v22\", \"v23\",             \\\n     \"v24\", \"v25\", \"v26\", \"v27\", \"v28\", \"v29\", \"v30\", \"v31\",             \\\n     \"vrsave\", \"vscr\",\t\t\t\t\t\t\t\\\n-    \"sfp\",\t\t\t\t\t\t\t\t\\\n-    \"tfhar\", \"tfiar\", \"texasr\"\t\t\t\t\t\t\\\n+    \"sfp\"\t\t\t\t\t\t\t\t\\\n }\n \n /* This outputs NAME to FILE.  */"}, {"sha": "9e99afad9c0df374d2a22f12d53023cc6e1dee1e", "filename": "gcc/config/rs6000/htm.md", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56be669f0aa79df4937c780306b77af538cd3a6/gcc%2Fconfig%2Frs6000%2Fhtm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56be669f0aa79df4937c780306b77af538cd3a6/gcc%2Fconfig%2Frs6000%2Fhtm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fhtm.md?ref=b56be669f0aa79df4937c780306b77af538cd3a6", "patch": "@@ -267,18 +267,16 @@\n \n (define_insn \"htm_mfspr_<mode>\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec_volatile:GPR [(match_operand 1 \"u10bit_cint_operand\" \"n\")\n-\t\t\t      (match_operand:GPR 2 \"htm_spr_reg_operand\" \"\")]\n+        (unspec_volatile:GPR [(match_operand 1 \"u10bit_cint_operand\" \"n\")]\n \t\t\t     UNSPECV_HTM_MFSPR))]\n   \"TARGET_HTM\"\n   \"mfspr %0,%1\";\n   [(set_attr \"type\" \"htm\")])\n \n (define_insn \"htm_mtspr_<mode>\"\n-  [(set (match_operand:GPR 2 \"htm_spr_reg_operand\" \"\")\n-        (unspec_volatile:GPR [(match_operand:GPR 0 \"gpc_reg_operand\" \"r\")\n-\t\t\t      (match_operand 1 \"u10bit_cint_operand\" \"n\")]\n-\t\t\t     UNSPECV_HTM_MTSPR))]\n+  [(unspec_volatile [(match_operand:GPR 0 \"gpc_reg_operand\" \"r\")\n+\t\t     (match_operand 1 \"u10bit_cint_operand\" \"n\")]\n+\t\t    UNSPECV_HTM_MTSPR)]\n   \"TARGET_HTM\"\n   \"mtspr %1,%0\";\n   [(set_attr \"type\" \"htm\")])"}, {"sha": "2643f1abd2ee604c4bef980ca1703ac98aa23d64", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56be669f0aa79df4937c780306b77af538cd3a6/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56be669f0aa79df4937c780306b77af538cd3a6/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=b56be669f0aa79df4937c780306b77af538cd3a6", "patch": "@@ -406,33 +406,6 @@\n   return FP_REGNO_P (r);\n })\n \n-;; Return 1 if op is a HTM specific SPR register.\n-(define_predicate \"htm_spr_reg_operand\"\n-  (match_operand 0 \"register_operand\")\n-{\n-  if (!TARGET_HTM)\n-    return 0;\n-\n-  if (SUBREG_P (op))\n-    op = SUBREG_REG (op);\n-\n-  if (!REG_P (op))\n-    return 0;\n-\n-  switch (REGNO (op))\n-    {\n-      case TFHAR_REGNO:\n-      case TFIAR_REGNO:\n-      case TEXASR_REGNO:\n-\treturn 1;\n-      default:\n-\tbreak;\n-    }\n-  \n-  /* Unknown SPR.  */\n-  return 0;\n-})\n-\n ;; Return 1 if op is a general purpose register that is an even register\n ;; which suitable for a load/store quad operation\n ;; Subregs are not allowed here because when they are combine can"}, {"sha": "d7b75263df417921a4944177e6319cc7528f7e55", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56be669f0aa79df4937c780306b77af538cd3a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56be669f0aa79df4937c780306b77af538cd3a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b56be669f0aa79df4937c780306b77af538cd3a6", "patch": "@@ -3011,9 +3011,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n   rs6000_regno_regclass[CA_REGNO] = NO_REGS;\n   rs6000_regno_regclass[VRSAVE_REGNO] = VRSAVE_REGS;\n   rs6000_regno_regclass[VSCR_REGNO] = VRSAVE_REGS;\n-  rs6000_regno_regclass[TFHAR_REGNO] = SPR_REGS;\n-  rs6000_regno_regclass[TFIAR_REGNO] = SPR_REGS;\n-  rs6000_regno_regclass[TEXASR_REGNO] = SPR_REGS;\n   rs6000_regno_regclass[ARG_POINTER_REGNUM] = BASE_REGS;\n   rs6000_regno_regclass[FRAME_POINTER_REGNUM] = BASE_REGS;\n \n@@ -14098,23 +14095,6 @@ htm_spr_num (enum rs6000_builtins code)\n   return TEXASRU_SPR;\n }\n \n-/* Return the appropriate SPR regno associated with the given builtin.  */\n-static inline HOST_WIDE_INT\n-htm_spr_regno (enum rs6000_builtins code)\n-{\n-  if (code == HTM_BUILTIN_GET_TFHAR\n-      || code == HTM_BUILTIN_SET_TFHAR)\n-    return TFHAR_REGNO;\n-  else if (code == HTM_BUILTIN_GET_TFIAR\n-\t   || code == HTM_BUILTIN_SET_TFIAR)\n-    return TFIAR_REGNO;\n-  gcc_assert (code == HTM_BUILTIN_GET_TEXASR\n-\t      || code == HTM_BUILTIN_SET_TEXASR\n-\t      || code == HTM_BUILTIN_GET_TEXASRU\n-\t      || code == HTM_BUILTIN_SET_TEXASRU);\n-  return TEXASR_REGNO;\n-}\n-\n /* Return the correct ICODE value depending on whether we are\n    setting or reading the HTM SPRs.  */\n static inline enum insn_code\n@@ -14231,7 +14211,6 @@ htm_expand_builtin (tree exp, rtx target, bool * expandedp)\n \t  {\n \t    machine_mode mode = (TARGET_POWERPC64) ? DImode : SImode;\n \t    op[nopnds++] = gen_rtx_CONST_INT (mode, htm_spr_num (fcode));\n-\t    op[nopnds++] = gen_rtx_REG (mode, htm_spr_regno (fcode));\n \t  }\n \t/* If this builtin accesses a CR, then pass in a scratch\n \t   CR as the last operand.  */\n@@ -14252,7 +14231,7 @@ htm_expand_builtin (tree exp, rtx target, bool * expandedp)\n \t    if (!(attr & RS6000_BTC_VOID))\n \t      expected_nopnds += 1;\n \t    if (uses_spr)\n-\t      expected_nopnds += 2;\n+\t      expected_nopnds += 1;\n \n \t    gcc_assert (nopnds == expected_nopnds\n \t\t\t&& nopnds <= MAX_HTM_OPERANDS);\n@@ -36302,12 +36281,6 @@ rs6000_dbx_register_number (unsigned int regno, unsigned int format)\n \treturn 356;\n       if (regno == VSCR_REGNO)\n \treturn 67;\n-      if (regno == TFHAR_REGNO)\n-\treturn 228;\n-      if (regno == TFIAR_REGNO)\n-\treturn 229;\n-      if (regno == TEXASR_REGNO)\n-\treturn 230;\n \n       /* These do not make much sense.  */\n       if (regno == FRAME_POINTER_REGNUM)\n@@ -36342,12 +36315,6 @@ rs6000_dbx_register_number (unsigned int regno, unsigned int format)\n     return 109;\n   if (regno == VSCR_REGNO)\n     return 110;\n-  if (regno == TFHAR_REGNO)\n-    return 114;\n-  if (regno == TFIAR_REGNO)\n-    return 115;\n-  if (regno == TEXASR_REGNO)\n-    return 116;\n \n   if (regno == FRAME_POINTER_REGNUM)\n     return 111;"}, {"sha": "3a32c11503681028b60a2c7efc509acd797e9ac8", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56be669f0aa79df4937c780306b77af538cd3a6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56be669f0aa79df4937c780306b77af538cd3a6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=b56be669f0aa79df4937c780306b77af538cd3a6", "patch": "@@ -815,11 +815,10 @@ enum data_align { align_abi, align_opt, align_both };\n \n    The 3 HTM registers aren't also included in DWARF_FRAME_REGISTERS.  */\n \n-#define FIRST_PSEUDO_REGISTER 115\n+#define FIRST_PSEUDO_REGISTER 112\n \n-/* The sfp register and 3 HTM registers\n-   aren't included in DWARF_FRAME_REGISTERS.  */\n-#define DWARF_FRAME_REGISTERS (FIRST_PSEUDO_REGISTER - 4)\n+/* The sfp register isn't included in DWARF_FRAME_REGISTERS.  */\n+#define DWARF_FRAME_REGISTERS (FIRST_PSEUDO_REGISTER - 1)\n \n /* Use standard DWARF numbering for DWARF debugging information.  */\n #define DBX_REGISTER_NUMBER(REGNO) rs6000_dbx_register_number ((REGNO), 0)\n@@ -851,7 +850,7 @@ enum data_align { align_abi, align_opt, align_both };\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    1, 1\t\t\t\t\t\t   \\\n-   , 1, 1, 1, 1\t\t\t\t\t   \\\n+   , 1\t\t\t\t\t\t   \\\n }\n \n /* 1 for registers not available across function calls.\n@@ -871,7 +870,7 @@ enum data_align { align_abi, align_opt, align_both };\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    1, 1\t\t\t\t\t\t   \\\n-   , 1, 1, 1, 1\t\t\t\t\t   \\\n+   , 1\t\t\t\t\t\t   \\\n }\n \n /* Like `CALL_USED_REGISTERS' except this macro doesn't require that\n@@ -890,7 +889,7 @@ enum data_align { align_abi, align_opt, align_both };\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0\t\t\t\t\t\t   \\\n-   , 0, 0, 0, 0\t\t\t\t\t   \\\n+   , 0\t\t\t\t\t\t   \\\n }\n \n #define TOTAL_ALTIVEC_REGS\t(LAST_ALTIVEC_REGNO - FIRST_ALTIVEC_REGNO + 1)\n@@ -929,9 +928,6 @@ enum data_align { align_abi, align_opt, align_both };\n \tv31 - v20\t(saved; order given to save least number)\n \tvrsave, vscr\t(fixed)\n \tsfp\t\t(fixed)\n-\ttfhar\t\t(fixed)\n-\ttfiar\t\t(fixed)\n-\ttexasr\t\t(fixed)\n */\n \n #if FIXED_R2 == 1\n@@ -973,7 +969,7 @@ enum data_align { align_abi, align_opt, align_both };\n    96, 95, 94, 93, 92, 91,\t\t\t\t\t\\\n    108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97,\t\\\n    109, 110,\t\t\t\t\t\t\t\\\n-   111, 112, 113, 114\t\t\t\t\t\t\\\n+   111\t\t\t\t\t\t\t\t\\\n }\n \n /* True if register is floating-point.  */\n@@ -1134,7 +1130,6 @@ enum reg_class\n   VSX_REGS,\n   VRSAVE_REGS,\n   VSCR_REGS,\n-  SPR_REGS,\n   GEN_OR_FLOAT_REGS,\n   LINK_REGS,\n   CTR_REGS,\n@@ -1163,7 +1158,6 @@ enum reg_class\n   \"VSX_REGS\",\t\t\t\t\t\t\t\t\\\n   \"VRSAVE_REGS\",\t\t\t\t\t\t\t\\\n   \"VSCR_REGS\",\t\t\t\t\t\t\t\t\\\n-  \"SPR_REGS\",\t\t\t\t\t\t\t\t\\\n   \"GEN_OR_FLOAT_REGS\",\t\t\t\t\t\t\t\\\n   \"LINK_REGS\",\t\t\t\t\t\t\t\t\\\n   \"CTR_REGS\",\t\t\t\t\t\t\t\t\\\n@@ -1199,8 +1193,6 @@ enum reg_class\n   { 0x00000000, 0x00000000, 0x00000000, 0x00002000 },\t\t\t\\\n   /* VSCR_REGS.  */\t\t\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00004000 },\t\t\t\\\n-  /* SPR_REGS.  */\t\t\t\t\t\t\t\\\n-  { 0x00000000, 0x00000000, 0x00000000, 0x00010000 },\t\t\t\\\n   /* GEN_OR_FLOAT_REGS.  */\t\t\t\t\t\t\\\n   { 0xffffffff, 0xffffffff, 0x00000008, 0x00008000 },\t\t\t\\\n   /* LINK_REGS.  */\t\t\t\t\t\t\t\\\n@@ -1222,7 +1214,7 @@ enum reg_class\n   /* CA_REGS.  */\t\t\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00001000, 0x00000000 },\t\t\t\\\n   /* ALL_REGS.  */\t\t\t\t\t\t\t\\\n-  { 0xffffffff, 0xffffffff, 0xfffffffe, 0x0001ffff }\t\t\t\\\n+  { 0xffffffff, 0xffffffff, 0xfffffffe, 0x0000ffff }\t\t\t\\\n }\n \n /* The same information, inverted:\n@@ -2144,10 +2136,7 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n   &rs6000_reg_names[108][0],\t/* v31  */\t\t\t\t\\\n   &rs6000_reg_names[109][0],\t/* vrsave  */\t\t\t\t\\\n   &rs6000_reg_names[110][0],\t/* vscr  */\t\t\t\t\\\n-  &rs6000_reg_names[111][0],\t/* sfp  */\t\t\t\t\\\n-  &rs6000_reg_names[112][0],\t/* tfhar  */\t\t\t\t\\\n-  &rs6000_reg_names[113][0],\t/* tfiar  */\t\t\t\t\\\n-  &rs6000_reg_names[114][0],\t/* texasr  */\t\t\t\t\\\n+  &rs6000_reg_names[111][0]\t/* sfp  */\t\t\t\t\\\n }\n \n /* Table of additional register names to use in user input.  */\n@@ -2201,8 +2190,6 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n   {\"vs52\", 97}, {\"vs53\", 98}, {\"vs54\", 99}, {\"vs55\", 100},\t\\\n   {\"vs56\", 101},{\"vs57\", 102},{\"vs58\", 103},{\"vs59\", 104},      \\\n   {\"vs60\", 105},{\"vs61\", 106},{\"vs62\", 107},{\"vs63\", 108},\t\\\n-  /* Transactional Memory Facility (HTM) Registers.  */\t\t\\\n-  {\"tfhar\",  112}, {\"tfiar\",  113}, {\"texasr\",  114},\t\t\\\n }\n \n /* This is how to output an element of a case-vector that is relative.  */"}, {"sha": "9c1a645741c200cb2443f8434a840e859e99b8a1", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56be669f0aa79df4937c780306b77af538cd3a6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56be669f0aa79df4937c780306b77af538cd3a6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=b56be669f0aa79df4937c780306b77af538cd3a6", "patch": "@@ -51,9 +51,6 @@\n    (VRSAVE_REGNO\t\t109)\n    (VSCR_REGNO\t\t\t110)\n    (FRAME_POINTER_REGNUM\t111)\n-   (TFHAR_REGNO\t\t\t112)\n-   (TFIAR_REGNO\t\t\t113)\n-   (TEXASR_REGNO\t\t114)\n   ])\n \n ;;"}]}