{"sha": "976401aa4781fa5850e1f34142bc13d1cfe0b2bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc2NDAxYWE0NzgxZmE1ODUwZTFmMzQxNDJiYzEzZDFjZmUwYjJiZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-19T23:24:23Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-19T23:28:47Z"}, "message": "Fold more constants during veclower pass.\n\nAn issue with a backend patch I've been investigating has revealed\na missed optimization opportunity during GCC's vector lowering pass.\nAn unrecognized insn for \"(set (reg:SI) (not:SI (const_int 0))\"\nrevealed that not only was my expander not expecting a NOT with\na constant operand, but also that veclower was producing the\ndubious tree expression ~0.\n\nThe attached patch replaces a call to gimple_build_assign with a\ncall to either gimplify_build1 or gimplify_build2 depending upon\nwhether the operation takes one or two operands.  The net effect\nis that where GCC previously produced the following optimized\ngimple for testsuite/c-c++common/Wunused-var-16.c (notice the ~0\nand the \"& 0\"):\n\nvoid foo ()\n{\n  V x;\n  V y;\n  vector(16) unsigned char _1;\n  unsigned char _7;\n  unsigned char _8;\n\n  y_2 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n  x_3 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n  _7 = ~0;\n  _1 = {_7, _7, _7, _7, _7, _7, _7, _7, _7, _7, _7, _7, _7, _7, _7, _7};\n  _8 = 0 & _7;\n  y_4 = {_8, _8, _8, _8, _8, _8, _8, _8, _8, _8, _8, _8, _8, _8, _8, _8};\n  v = y_4;\n  return;\n}\n\nWith this patch we now generate:\n\nvoid foo ()\n{\n  V x;\n  V y;\n  vector(16) unsigned char _1;\n\n  y_2 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n  x_3 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n  _1 = { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 2\n55, 255 };\n  y_4 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n  v = y_4;\n  return;\n}\n\n2021-08-20  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* tree-vect-generic.c (expand_vector_operations_1): Use either\n\tgimplify_build1 or gimplify_build2 instead of gimple_build_assign\n\twhen constructing scalar splat expressions.\n\ngcc/testsuite/ChangeLog\n\t* c-c++-common/Wunused-var-16.c: Add an extra check that ~0\n\tis optimized away.", "tree": {"sha": "799b32089cf1082f197598a9ac10b6e475d7aee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/799b32089cf1082f197598a9ac10b6e475d7aee2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/976401aa4781fa5850e1f34142bc13d1cfe0b2bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976401aa4781fa5850e1f34142bc13d1cfe0b2bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/976401aa4781fa5850e1f34142bc13d1cfe0b2bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976401aa4781fa5850e1f34142bc13d1cfe0b2bd/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0963c4379becafaebd8e52b0b42698ff151c293", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0963c4379becafaebd8e52b0b42698ff151c293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0963c4379becafaebd8e52b0b42698ff151c293"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "31c7db30f9fafc62cccf7c1eb073d2cb3e695fda", "filename": "gcc/testsuite/c-c++-common/Wunused-var-16.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976401aa4781fa5850e1f34142bc13d1cfe0b2bd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976401aa4781fa5850e1f34142bc13d1cfe0b2bd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-16.c?ref=976401aa4781fa5850e1f34142bc13d1cfe0b2bd", "patch": "@@ -1,6 +1,6 @@\n /* PR c++/78949 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wunused\" } */\n+/* { dg-options \"-Wunused -fdump-tree-optimized\" } */\n /* { dg-additional-options \"-fno-common\" { target hppa*-*-hpux* } } */\n \n typedef unsigned char V __attribute__((vector_size(16)));\n@@ -14,3 +14,5 @@ foo ()\n   y &= ~x;\n   v = y;\n }\n+\n+/* { dg-final { scan-tree-dump-not \" ~0\" \"optimized\" } } */"}, {"sha": "0d7f04126f2221fc9d12799882642a6454478b99", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976401aa4781fa5850e1f34142bc13d1cfe0b2bd/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976401aa4781fa5850e1f34142bc13d1cfe0b2bd/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=976401aa4781fa5850e1f34142bc13d1cfe0b2bd", "patch": "@@ -2162,9 +2162,10 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi,\n       if (op >= FIRST_NORM_OPTAB && op <= LAST_NORM_OPTAB\n \t  && optab_handler (op, TYPE_MODE (TREE_TYPE (type))) != CODE_FOR_nothing)\n \t{\n-\t  tree slhs = make_ssa_name (TREE_TYPE (TREE_TYPE (lhs)));\n-\t  gimple *repl = gimple_build_assign (slhs, code, srhs1, srhs2);\n-\t  gsi_insert_before (gsi, repl, GSI_SAME_STMT);\n+\t  tree stype = TREE_TYPE (TREE_TYPE (lhs));\n+\t  tree slhs = (rhs2 != NULL_TREE)\n+\t\t      ? gimplify_build2 (gsi, code, stype, srhs1, srhs2)\n+\t\t      : gimplify_build1 (gsi, code, stype, srhs1);\n \t  gimple_assign_set_rhs_from_tree (gsi,\n \t\t\t\t\t   build_vector_from_val (type, slhs));\n \t  update_stmt (stmt);"}]}