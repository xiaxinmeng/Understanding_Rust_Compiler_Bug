{"sha": "d660a3db5c4c948192242fcfeb16a4b5f671c0b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY2MGEzZGI1YzRjOTQ4MTkyMjQyZmNmZWIxNmE0YjVmNjcxYzBiOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-10-12T15:28:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-10-12T15:28:48Z"}, "message": "tree-ssa-alias.c (maybe_skip_until): Cache also at the point of the first store we visit in a basic-block.\n\n2011-10-12  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-alias.c (maybe_skip_until): Cache also at the point\n\tof the first store we visit in a basic-block.\n\t(get_continuation_for_phi): Search for a candidate VUSE that\n\tmight dominates all others.  Do pairwise disambiguation against\n\tthat candidate.\n\nFrom-SVN: r179858", "tree": {"sha": "2af5c64cb2b30a26873731f5bb2ed6a9b56d5f49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2af5c64cb2b30a26873731f5bb2ed6a9b56d5f49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d660a3db5c4c948192242fcfeb16a4b5f671c0b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d660a3db5c4c948192242fcfeb16a4b5f671c0b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d660a3db5c4c948192242fcfeb16a4b5f671c0b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d660a3db5c4c948192242fcfeb16a4b5f671c0b9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ebbcd0c6ea5d565ffa743079449e9ad6169fcf4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebbcd0c6ea5d565ffa743079449e9ad6169fcf4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebbcd0c6ea5d565ffa743079449e9ad6169fcf4e"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "d48ef7e689011551a9678afa2003dbaa74ead941", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d660a3db5c4c948192242fcfeb16a4b5f671c0b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d660a3db5c4c948192242fcfeb16a4b5f671c0b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d660a3db5c4c948192242fcfeb16a4b5f671c0b9", "patch": "@@ -1,3 +1,11 @@\n+2011-10-12  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-alias.c (maybe_skip_until): Cache also at the point\n+\tof the first store we visit in a basic-block.\n+\t(get_continuation_for_phi): Search for a candidate VUSE that\n+\tmight dominates all others.  Do pairwise disambiguation against\n+\tthat candidate.\n+\n 2011-10-12  Paul Koning  <pkoning@gcc.gnu.org>\n \n \tPR tree-optimization/50189"}, {"sha": "2433afa77da98d076e945a4f5c5ee9b84214b691", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d660a3db5c4c948192242fcfeb16a4b5f671c0b9/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d660a3db5c4c948192242fcfeb16a4b5f671c0b9/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=d660a3db5c4c948192242fcfeb16a4b5f671c0b9", "patch": "@@ -1846,6 +1846,8 @@ static bool\n maybe_skip_until (gimple phi, tree target, ao_ref *ref,\n \t\t  tree vuse, bitmap *visited)\n {\n+  basic_block bb = gimple_bb (phi);\n+\n   if (!*visited)\n     *visited = BITMAP_ALLOC (NULL);\n \n@@ -1870,6 +1872,14 @@ maybe_skip_until (gimple phi, tree target, ao_ref *ref,\n       else if (gimple_nop_p (def_stmt)\n \t       || stmt_may_clobber_ref_p_1 (def_stmt, ref))\n \treturn false;\n+      /* If we reach a new basic-block see if we already skipped it\n+         in a previous walk that ended successfully.  */\n+      if (gimple_bb (def_stmt) != bb)\n+\t{\n+\t  if (!bitmap_set_bit (*visited, SSA_NAME_VERSION (vuse)))\n+\t    return true;\n+\t  bb = gimple_bb (def_stmt);\n+\t}\n       vuse = gimple_vuse (def_stmt);\n     }\n   return true;\n@@ -1948,18 +1958,35 @@ get_continuation_for_phi (gimple phi, ao_ref *ref, bitmap *visited)\n      until we hit the phi argument definition that dominates the other one.  */\n   else if (nargs >= 2)\n     {\n-      tree arg0 = PHI_ARG_DEF (phi, 0);\n-      tree arg1;\n-      unsigned i = 1;\n-      do\n+      tree arg0, arg1;\n+      unsigned i;\n+\n+      /* Find a candidate for the virtual operand which definition\n+\t dominates those of all others.  */\n+      arg0 = PHI_ARG_DEF (phi, 0);\n+      if (!SSA_NAME_IS_DEFAULT_DEF (arg0))\n+\tfor (i = 1; i < nargs; ++i)\n+\t  {\n+\t    arg1 = PHI_ARG_DEF (phi, i);\n+\t    if (SSA_NAME_IS_DEFAULT_DEF (arg1))\n+\t      {\n+\t\targ0 = arg1;\n+\t\tbreak;\n+\t      }\n+\t    if (dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\tgimple_bb (SSA_NAME_DEF_STMT (arg0)),\n+\t\t\t\tgimple_bb (SSA_NAME_DEF_STMT (arg1))))\n+\t      arg0 = arg1;\n+\t  }\n+\n+      /* Then pairwise reduce against the found candidate.  */\n+      for (i = 0; i < nargs; ++i)\n \t{\n \t  arg1 = PHI_ARG_DEF (phi, i);\n \t  arg0 = get_continuation_for_phi_1 (phi, arg0, arg1, ref, visited);\n \t  if (!arg0)\n \t    return NULL_TREE;\n-\n \t}\n-      while (++i < nargs);\n \n       return arg0;\n     }"}]}