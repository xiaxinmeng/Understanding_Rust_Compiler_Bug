{"sha": "d7ed20db763473e20d1186e5e138ae00e5afc764", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdlZDIwZGI3NjM0NzNlMjBkMTE4NmU1ZTEzOGFlMDBlNWFmYzc2NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-26T12:56:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-26T12:56:36Z"}, "message": "omp-low.c (finalize_task_copyfn): Do not drop PROP_loops.\n\n2013-04-26  Richard Biener  <rguenther@suse.de>\n\n\t* omp-low.c (finalize_task_copyfn): Do not drop PROP_loops.\n\t(expand_omp_taskreg): Likewise.  Mark loops for fixup.\n\t* tree-cfg.c (move_block_to_fn): Remap loop fathers.\n\t(fixup_loop_arrays_after_move): New function.\n\t(move_sese_region_to_fn): Properly outline the loop tree parts\n\tof the SESE region.\n\nFrom-SVN: r198338", "tree": {"sha": "59f2be7bd6aa35b6e02ed5b1144cf5da176a6d03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59f2be7bd6aa35b6e02ed5b1144cf5da176a6d03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7ed20db763473e20d1186e5e138ae00e5afc764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ed20db763473e20d1186e5e138ae00e5afc764", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7ed20db763473e20d1186e5e138ae00e5afc764", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ed20db763473e20d1186e5e138ae00e5afc764/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e03fa931c3264b82681e0f7894e161e148dbfc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e03fa931c3264b82681e0f7894e161e148dbfc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e03fa931c3264b82681e0f7894e161e148dbfc5"}], "stats": {"total": 105, "additions": 86, "deletions": 19}, "files": [{"sha": "dd490374f524e26f17f1fdae382c0f5ecf40384e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ed20db763473e20d1186e5e138ae00e5afc764/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ed20db763473e20d1186e5e138ae00e5afc764/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7ed20db763473e20d1186e5e138ae00e5afc764", "patch": "@@ -1,3 +1,12 @@\n+2013-04-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* omp-low.c (finalize_task_copyfn): Do not drop PROP_loops.\n+\t(expand_omp_taskreg): Likewise.  Mark loops for fixup.\n+\t* tree-cfg.c (move_block_to_fn): Remap loop fathers.\n+\t(fixup_loop_arrays_after_move): New function.\n+\t(move_sese_region_to_fn): Properly outline the loop tree parts\n+\tof the SESE region.\n+\n 2013-04-26  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (type, unit): Fix long lines."}, {"sha": "81ae5b4e5c1ca777db2f8ce6eccf3be1dd407e03", "filename": "gcc/omp-low.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ed20db763473e20d1186e5e138ae00e5afc764/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ed20db763473e20d1186e5e138ae00e5afc764/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=d7ed20db763473e20d1186e5e138ae00e5afc764", "patch": "@@ -1258,10 +1258,7 @@ finalize_task_copyfn (gimple task_stmt)\n     return;\n \n   child_cfun = DECL_STRUCT_FUNCTION (child_fn);\n-\n-  /* Inform the callgraph about the new function.  */\n-  DECL_STRUCT_FUNCTION (child_fn)->curr_properties\n-    = cfun->curr_properties & ~PROP_loops;\n+  DECL_STRUCT_FUNCTION (child_fn)->curr_properties = cfun->curr_properties;\n \n   push_cfun (child_cfun);\n   bind = gimplify_body (child_fn, false);\n@@ -1276,6 +1273,7 @@ finalize_task_copyfn (gimple task_stmt)\n   gimple_set_body (child_fn, seq);\n   pop_cfun ();\n \n+  /* Inform the callgraph about the new function.  */\n   cgraph_add_new_function (child_fn, false);\n }\n \n@@ -3573,6 +3571,11 @@ expand_omp_taskreg (struct omp_region *region)\n       new_bb = move_sese_region_to_fn (child_cfun, entry_bb, exit_bb, block);\n       if (exit_bb)\n \tsingle_succ_edge (new_bb)->flags = EDGE_FALLTHRU;\n+      /* ???  As the OMP expansion process does not update the loop\n+         tree of the original function before outlining the region to\n+\t the new child function we need to discover loops in the child.\n+\t Arrange for that.  */\n+      child_cfun->x_current_loops->state |= LOOPS_NEED_FIXUP;\n \n       /* Remove non-local VAR_DECLs from child_cfun->local_decls list.  */\n       num = vec_safe_length (child_cfun->local_decls);\n@@ -3589,8 +3592,7 @@ expand_omp_taskreg (struct omp_region *region)\n \tvec_safe_truncate (child_cfun->local_decls, dstidx);\n \n       /* Inform the callgraph about the new function.  */\n-      DECL_STRUCT_FUNCTION (child_fn)->curr_properties\n-\t= cfun->curr_properties & ~PROP_loops;\n+      DECL_STRUCT_FUNCTION (child_fn)->curr_properties = cfun->curr_properties;\n       cgraph_add_new_function (child_fn, true);\n \n       /* Fix the callgraph edges for child_cfun.  Those for cfun will be"}, {"sha": "a8e9f5cbab62a70d57f42b91df535ab528f5d43c", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 69, "deletions": 13, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ed20db763473e20d1186e5e138ae00e5afc764/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ed20db763473e20d1186e5e138ae00e5afc764/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=d7ed20db763473e20d1186e5e138ae00e5afc764", "patch": "@@ -6346,8 +6346,14 @@ move_block_to_fn (struct function *dest_cfun, basic_block bb,\n \n   /* Remove BB from dominance structures.  */\n   delete_from_dominance_info (CDI_DOMINATORS, bb);\n+\n+  /* Move BB from its current loop to the copy in the new function.  */\n   if (current_loops)\n-    remove_bb_from_loops (bb);\n+    {\n+      struct loop *new_loop = (struct loop *)bb->loop_father->aux;\n+      if (new_loop)\n+\tbb->loop_father = new_loop;\n+    }\n \n   /* Link BB to the new linked list.  */\n   move_block_after (bb, after);\n@@ -6579,6 +6585,25 @@ replace_block_vars_by_duplicates (tree block, struct pointer_map_t *vars_map,\n     replace_block_vars_by_duplicates (block, vars_map, to_context);\n }\n \n+/* Fixup the loop arrays and numbers after moving LOOP and its subloops\n+   from FN1 to FN2.  */\n+\n+static void\n+fixup_loop_arrays_after_move (struct function *fn1, struct function *fn2,\n+\t\t\t      struct loop *loop)\n+{\n+  /* Discard it from the old loop array.  */\n+  (*fn1->x_current_loops->larray)[loop->num] = NULL;\n+\n+  /* Place it in the new loop array, assigning it a new number.  */\n+  loop->num = vec_safe_length (fn2->x_current_loops->larray);\n+  vec_safe_push (fn2->x_current_loops->larray, loop);\n+\n+  /* Recurse to children.  */\n+  for (loop = loop->inner; loop; loop = loop->next)\n+    fixup_loop_arrays_after_move (fn1, fn2, loop);\n+}\n+\n /* Move a single-entry, single-exit region delimited by ENTRY_BB and\n    EXIT_BB to function DEST_CFUN.  The whole region is replaced by a\n    single basic block in the original CFG and the new basic block is\n@@ -6698,6 +6723,42 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n \t}\n     }\n \n+  /* Initialize an empty loop tree.  */\n+  dest_cfun->x_current_loops = ggc_alloc_cleared_loops ();\n+  init_loops_structure (dest_cfun, dest_cfun->x_current_loops, 1);\n+  dest_cfun->x_current_loops->state = LOOPS_MAY_HAVE_MULTIPLE_LATCHES;\n+\n+  /* Move the outlined loop tree part.  */\n+  FOR_EACH_VEC_ELT (bbs, i, bb)\n+    {\n+      if (bb->loop_father->header == bb\n+\t  && loop_outer (bb->loop_father) == loop)\n+\t{\n+\t  struct loop *loop = bb->loop_father;\n+\t  flow_loop_tree_node_remove (bb->loop_father);\n+\t  flow_loop_tree_node_add (dest_cfun->x_current_loops->tree_root, loop);\n+\t  fixup_loop_arrays_after_move (saved_cfun, cfun, loop);\n+\t}\n+\n+      /* Remove loop exits from the outlined region.  */\n+      if (saved_cfun->x_current_loops->exits)\n+\tFOR_EACH_EDGE (e, ei, bb->succs)\n+\t  {\n+\t    void **slot = htab_find_slot_with_hash\n+\t\t(saved_cfun->x_current_loops->exits, e,\n+\t\t htab_hash_pointer (e), NO_INSERT);\n+\t    if (slot)\n+\t      htab_clear_slot (saved_cfun->x_current_loops->exits, slot);\n+\t  }\n+    }\n+\n+\n+  /* Adjust the number of blocks in the tree root of the outlined part.  */\n+  dest_cfun->x_current_loops->tree_root->num_nodes = bbs.length () + 2;\n+\n+  /* Setup a mapping to be used by move_block_to_fn.  */\n+  loop->aux = current_loops->tree_root;\n+\n   pop_cfun ();\n \n   /* Move blocks from BBS into DEST_CFUN.  */\n@@ -6715,18 +6776,6 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n   d.eh_map = eh_map;\n   d.remap_decls_p = true;\n \n-  /* Cancel all loops inside the SESE region.\n-     ???  We rely on loop fixup because loop structure is not 100%\n-     up-to-date when called from OMP lowering and thus cancel_loop_tree\n-     will not work.\n-     ???  Properly move loops to the outlined function.  */\n-  FOR_EACH_VEC_ELT (bbs, i, bb)\n-    if (bb->loop_father->header == bb)\n-      {\n-\tbb->loop_father->header = NULL;\n-\tbb->loop_father->latch = NULL;\n-\tloops_state_set (LOOPS_NEED_FIXUP);\n-      }\n   FOR_EACH_VEC_ELT (bbs, i, bb)\n     {\n       /* No need to update edge counts on the last block.  It has\n@@ -6736,6 +6785,13 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n       after = bb;\n     }\n \n+  loop->aux = NULL;\n+  /* Loop sizes are no longer correct, fix them up.  */\n+  loop->num_nodes -= bbs.length ();\n+  for (struct loop *outer = loop_outer (loop);\n+       outer; outer = loop_outer (outer))\n+    outer->num_nodes -= bbs.length ();\n+\n   /* Rewire BLOCK_SUBBLOCKS of orig_block.  */\n   if (orig_block)\n     {"}]}