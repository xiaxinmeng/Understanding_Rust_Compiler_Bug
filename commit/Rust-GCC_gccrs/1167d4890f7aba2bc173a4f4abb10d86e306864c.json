{"sha": "1167d4890f7aba2bc173a4f4abb10d86e306864c", "node_id": "C_kwDOANBUbNoAKDExNjdkNDg5MGY3YWJhMmJjMTczYTRmNGFiYjEwZDg2ZTMwNjg2NGM", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-11-25T11:13:59Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-11-25T11:15:20Z"}, "message": "docs: Add missing @option keyword.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi: Use @option for -Wuninitialized.", "tree": {"sha": "a69570e651aaa8ca4d563ad7339b5332102566d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a69570e651aaa8ca4d563ad7339b5332102566d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1167d4890f7aba2bc173a4f4abb10d86e306864c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1167d4890f7aba2bc173a4f4abb10d86e306864c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1167d4890f7aba2bc173a4f4abb10d86e306864c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1167d4890f7aba2bc173a4f4abb10d86e306864c/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1c1919ef8a18eea9d5c1741f8c9adaabf5571f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c1919ef8a18eea9d5c1741f8c9adaabf5571f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1c1919ef8a18eea9d5c1741f8c9adaabf5571f2"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "3bddfbaae6a3b4a58f3f0004bc42fa1830bda5a0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1167d4890f7aba2bc173a4f4abb10d86e306864c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1167d4890f7aba2bc173a4f4abb10d86e306864c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1167d4890f7aba2bc173a4f4abb10d86e306864c", "patch": "@@ -12117,8 +12117,8 @@ Initialize automatic variables with either a pattern or with zeroes to increase\n the security and predictability of a program by preventing uninitialized memory\n disclosure and use.\n GCC still considers an automatic variable that doesn't have an explicit\n-initializer as uninitialized, -Wuninitialized will still report warning messages\n-on such automatic variables.\n+initializer as uninitialized, @option{-Wuninitialized} will still report\n+warning messages on such automatic variables.\n With this option, GCC will also initialize any padding of automatic variables\n that have structure or union types to zeroes.\n "}]}