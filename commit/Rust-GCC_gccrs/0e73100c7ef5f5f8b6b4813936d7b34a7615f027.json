{"sha": "0e73100c7ef5f5f8b6b4813936d7b34a7615f027", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU3MzEwMGM3ZWY1ZjVmOGI2YjQ4MTM5MzZkN2IzNGE3NjE1ZjAyNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-12-21T20:36:31Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-12-21T20:36:31Z"}, "message": "(sqrtsf2, sinsf2, sindf2, sinxf2): Define.\n\n(cossf2, cosdf2, cosxf2): Likewise.\n(sqrtxf2): Operand 1 now XFmode.\n\nFrom-SVN: r8685", "tree": {"sha": "53cf2045e6bb239207de30a8cbd8f375638824b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53cf2045e6bb239207de30a8cbd8f375638824b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e73100c7ef5f5f8b6b4813936d7b34a7615f027", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e73100c7ef5f5f8b6b4813936d7b34a7615f027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e73100c7ef5f5f8b6b4813936d7b34a7615f027", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e73100c7ef5f5f8b6b4813936d7b34a7615f027/comments", "author": null, "committer": null, "parents": [{"sha": "54dad0c2605f905a0e78b4e88a03e7c262ef5c2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54dad0c2605f905a0e78b4e88a03e7c262ef5c2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54dad0c2605f905a0e78b4e88a03e7c262ef5c2f"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "761bb4f7023126c1b54e98d01b60f32043bda7d5", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e73100c7ef5f5f8b6b4813936d7b34a7615f027/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e73100c7ef5f5f8b6b4813936d7b34a7615f027/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=0e73100c7ef5f5f8b6b4813936d7b34a7615f027", "patch": "@@ -64,6 +64,12 @@\n ;;- \"%$\"    single-precision fp specifier (\"s\" or \"\")\tf%$add.x fp0,fp1\n ;;- \"%&\"    double-precision fp specifier (\"d\" or \"\")\tf%&add.x fp0,fp1\n \n+;; UNSPEC usage:\n+;; 1  This is a `sin' operation.  The mode of the UNSPEC is MODE_FLOAT.\n+;;    operand 1 is the argument for `sin'.\n+;; 2  This is a `cos' operation.  The mode of the UNSPEC is MODE_FLOAT.\n+;;    operand 1 is the argument for `cos'.\n+\n ;;- Information about 68040 port.\n \n ;;- The 68040 executes all 68030 and 68881/2 instructions, but some must\n@@ -3465,6 +3471,18 @@\n \f\n ;; Sqrt instruction for the 68881\n \n+(define_insn \"sqrtsf2\"\n+  [(set (match_operand:SF 0 \"general_operand\" \"=f\")\n+\t(sqrt:SF (match_operand:SF 1 \"general_operand\" \"fm\")))]\n+  \"TARGET_68881\"\n+  \"*\n+{\n+  if (FP_REG_P (operands[1]))\n+    return \\\"fsqrt%.x %1,%0\\\";\n+  else\n+    return \\\"fsqrt%.s %1,%0\\\";\n+}\")\n+\n (define_insn \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"general_operand\" \"=f\")\n \t(sqrt:DF (match_operand:DF 1 \"general_operand\" \"fm\")))]\n@@ -5930,9 +5948,75 @@\n \n (define_insn \"sqrtxf2\"\n   [(set (match_operand:XF 0 \"general_operand\" \"=f\")\n-\t(sqrt:XF (match_operand:DF 1 \"nonimmediate_operand\" \"fm\")))]\n+\t(sqrt:XF (match_operand:XF 1 \"nonimmediate_operand\" \"fm\")))]\n   \"TARGET_68881\"\n   \"*\n {\n     return \\\"fsqrt%.x %1,%0\\\";\n }\")\n+\n+(define_insn \"sinsf2\"\n+  [(set (match_operand:SF 0 \"general_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 1 \"general_operand\" \"fm\")] 1))]\n+  \"TARGET_68881 && flag_fast_math\"\n+  \"*\n+{\n+  if (FP_REG_P (operands[1]))\n+    return \\\"fsin%.x %1,%0\\\";\n+  else\n+    return \\\"fsin%.s %1,%0\\\";\n+}\")\n+\n+(define_insn \"sindf2\"\n+  [(set (match_operand:DF 0 \"general_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 1 \"general_operand\" \"fm\")] 1))]\n+  \"TARGET_68881 && flag_fast_math\"\n+  \"*\n+{\n+  if (FP_REG_P (operands[1]))\n+    return \\\"fsin%.x %1,%0\\\";\n+  else\n+    return \\\"fsin%.d %1,%0\\\";\n+}\")\n+\n+(define_insn \"sinxf2\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 1 \"nonimmediate_operand\" \"fm\")] 1))]\n+  \"TARGET_68881 && flag_fast_math\"\n+  \"*\n+{\n+    return \\\"fsin%.x %1,%0\\\";\n+}\")\n+\n+(define_insn \"cossf2\"\n+  [(set (match_operand:SF 0 \"general_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 1 \"general_operand\" \"fm\")] 2))]\n+  \"TARGET_68881 && flag_fast_math\"\n+  \"*\n+{\n+  if (FP_REG_P (operands[1]))\n+    return \\\"fcos%.x %1,%0\\\";\n+  else\n+    return \\\"fcos%.s %1,%0\\\";\n+}\")\n+\n+(define_insn \"cosdf2\"\n+  [(set (match_operand:DF 0 \"general_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 1 \"general_operand\" \"fm\")] 2))]\n+  \"TARGET_68881 && flag_fast_math\"\n+  \"*\n+{\n+  if (FP_REG_P (operands[1]))\n+    return \\\"fcos%.x %1,%0\\\";\n+  else\n+    return \\\"fcos%.d %1,%0\\\";\n+}\")\n+\n+(define_insn \"cosxf2\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 1 \"nonimmediate_operand\" \"fm\")] 2))]\n+  \"TARGET_68881 && flag_fast_math\"\n+  \"*\n+{\n+    return \\\"fcos%.x %1,%0\\\";\n+}\")"}]}