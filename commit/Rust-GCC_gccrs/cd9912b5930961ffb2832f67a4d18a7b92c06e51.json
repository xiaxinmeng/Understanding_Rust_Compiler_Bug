{"sha": "cd9912b5930961ffb2832f67a4d18a7b92c06e51", "node_id": "C_kwDOANBUbNoAKGNkOTkxMmI1OTMwOTYxZmZiMjgzMmY2N2E0ZDE4YTdiOTJjMDZlNTE", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-10T10:46:58Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-17T21:12:14Z"}, "message": "Manual changes for .cc renaming.\n\ngcc/ChangeLog:\n\n\t* Makefile.in: Rename .c names to .cc.\n\t* config.gcc: Likewise.\n\t* configure: Regenerate. Likewise.\n\t* configure.ac: Likewise.\n\t* gengtype.cc (set_gc_used): Likewise.\n\t(source_dot_c_frul): Likewise.\n\t(source_dot_cc_frul): Likewise.\n\t(struct file_rule_st): Likewise.\n\t(close_output_files): Likewise.\n\t* config/avr/t-avr: Use CXXFLAGS_* and CXX_FOR_BUILD.\n\ngcc/ada/ChangeLog:\n\n\t* Makefile.rtl: Rename .c names to .cc.\n\t* gcc-interface/Make-lang.in: Likewise.\n\t* gcc-interface/Makefile.in: Likewise.\n\nlibgcc/ChangeLog:\n\n\t* libgcov-driver.c: Rename .c names to .cc.\n\nlibcpp/ChangeLog:\n\n\t* Makefile.in: Rename .c names to .cc.", "tree": {"sha": "395a20a574de81fa525814c419892337e78498ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/395a20a574de81fa525814c419892337e78498ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd9912b5930961ffb2832f67a4d18a7b92c06e51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd9912b5930961ffb2832f67a4d18a7b92c06e51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd9912b5930961ffb2832f67a4d18a7b92c06e51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd9912b5930961ffb2832f67a4d18a7b92c06e51/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e53b6e564aab615703ff2f9e8406a3953f0a3785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53b6e564aab615703ff2f9e8406a3953f0a3785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e53b6e564aab615703ff2f9e8406a3953f0a3785"}], "stats": {"total": 126, "additions": 63, "deletions": 63}, "files": [{"sha": "31ff95500c96de724f53be8bd07a2b9df1c0acb5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=cd9912b5930961ffb2832f67a4d18a7b92c06e51", "patch": "@@ -1784,7 +1784,7 @@ MOSTLYCLEANFILES = insn-flags.h insn-config.h insn-codes.h \\\n  gcc-ranlib$(exeext) \\\n  genversion$(build_exeext) gcov$(exeext) gcov-dump$(exeext) \\\n  gcov-tool$(exeect) \\\n- gengtype$(exeext) *.[0-9][0-9].* *.[si] *-checksum.c libbackend.a \\\n+ gengtype$(exeext) *.[0-9][0-9].* *.[si] *-checksum.cc libbackend.a \\\n  libcommon-target.a libcommon.a libgcc.mk perf.data\n \n # This symlink makes the full installation name of the driver be available\n@@ -2421,10 +2421,10 @@ simple_generated_h\t= $(simple_rtl_generated_h) insn-constants.h\n simple_generated_c\t= $(simple_rtl_generated_c) insn-enums.cc\n \n $(simple_generated_h:insn-%.h=s-%) \\\n-$(simple_generated_c:insn-%.c=s-%): s-%: $(MD_DEPS)\n+$(simple_generated_c:insn-%.cc=s-%): s-%: $(MD_DEPS)\n \n $(simple_rtl_generated_h:insn-%.h=s-%) \\\n-$(simple_rtl_generated_c:insn-%.c=s-%): s-%: insn-conditions.md\n+$(simple_rtl_generated_c:insn-%.cc=s-%): s-%: insn-conditions.md\n \n $(simple_generated_h): insn-%.h: s-%; @true\n \n@@ -2434,11 +2434,11 @@ $(simple_generated_h:insn-%.h=s-%): s-%: build/gen%$(build_exeext)\n \t$(SHELL) $(srcdir)/../move-if-change tmp-$*.h insn-$*.h\n \t$(STAMP) s-$*\n \n-$(simple_generated_c): insn-%.c: s-%; @true\n-$(simple_generated_c:insn-%.c=s-%): s-%: build/gen%$(build_exeext)\n+$(simple_generated_c): insn-%.cc: s-%; @true\n+$(simple_generated_c:insn-%.cc=s-%): s-%: build/gen%$(build_exeext)\n \t$(RUN_GEN) build/gen$*$(build_exeext) $(md_file) \\\n-\t  $(filter insn-conditions.md,$^) > tmp-$*.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-$*.c insn-$*.c\n+\t  $(filter insn-conditions.md,$^) > tmp-$*.cc\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-$*.cc insn-$*.cc\n \t$(STAMP) s-$*\n \n # gencheck doesn't read the machine description, and the file produced\n@@ -2449,12 +2449,12 @@ s-check : build/gencheck$(build_exeext)\n \t$(SHELL) $(srcdir)/../move-if-change tmp-check.h tree-check.h\n \t$(STAMP) s-check\n \n-# genattrtab produces three files: tmp-{attrtab.c,dfatab.c,latencytab.c}\n+# genattrtab produces three files: tmp-{attrtab.cc,dfatab.cc,latencytab.cc}\n insn-attrtab.cc insn-dfatab.cc insn-latencytab.cc: s-attrtab ; @true\n s-attrtab : $(MD_DEPS) build/genattrtab$(build_exeext) \\\n   insn-conditions.md\n \t$(RUN_GEN) build/genattrtab$(build_exeext) $(md_file) insn-conditions.md \\\n-\t\t-Atmp-attrtab.c -Dtmp-dfatab.c -Ltmp-latencytab.c\n+\t\t-Atmp-attrtab.cc -Dtmp-dfatab.cc -Ltmp-latencytab.cc\n \t$(SHELL) $(srcdir)/../move-if-change tmp-attrtab.cc    insn-attrtab.cc\n \t$(SHELL) $(srcdir)/../move-if-change tmp-dfatab.cc     insn-dfatab.cc\n \t$(SHELL) $(srcdir)/../move-if-change tmp-latencytab.cc insn-latencytab.cc\n@@ -2464,16 +2464,16 @@ s-attrtab : $(MD_DEPS) build/genattrtab$(build_exeext) \\\n insn-opinit.cc insn-opinit.h: s-opinit ; @true\n s-opinit: $(MD_DEPS) build/genopinit$(build_exeext) insn-conditions.md\n \t$(RUN_GEN) build/genopinit$(build_exeext) $(md_file) \\\n-\t  insn-conditions.md -htmp-opinit.h -ctmp-opinit.c\n+\t  insn-conditions.md -htmp-opinit.h -ctmp-opinit.cc\n \t$(SHELL) $(srcdir)/../move-if-change tmp-opinit.h insn-opinit.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-opinit.cc insn-opinit.cc\n \t$(STAMP) s-opinit\n \n # gencondmd doesn't use the standard naming convention.\n build/gencondmd.cc: s-conditions; @true\n s-conditions: $(MD_DEPS) build/genconditions$(build_exeext)\n-\t$(RUN_GEN) build/genconditions$(build_exeext) $(md_file) > tmp-condmd.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-condmd.c build/gencondmd.cc\n+\t$(RUN_GEN) build/genconditions$(build_exeext) $(md_file) > tmp-condmd.cc\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-condmd.cc build/gencondmd.cc\n \t$(STAMP) s-conditions\n \n insn-conditions.md: s-condmd; @true\n@@ -2499,8 +2499,8 @@ insn-modes-inline.h: s-modes-inline-h; @true\n min-insn-modes.cc: s-modes-m; @true\n \n s-modes: build/genmodes$(build_exeext)\n-\t$(RUN_GEN) build/genmodes$(build_exeext) > tmp-modes.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-modes.c insn-modes.cc\n+\t$(RUN_GEN) build/genmodes$(build_exeext) > tmp-modes.cc\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-modes.cc insn-modes.cc\n \t$(STAMP) s-modes\n \n s-modes-h: build/genmodes$(build_exeext)\n@@ -2515,8 +2515,8 @@ s-modes-inline-h: build/genmodes$(build_exeext)\n \t$(STAMP) s-modes-inline-h\n \n s-modes-m: build/genmodes$(build_exeext)\n-\t$(RUN_GEN) build/genmodes$(build_exeext) -m > tmp-min-modes.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-min-modes.c min-insn-modes.cc\n+\t$(RUN_GEN) build/genmodes$(build_exeext) -m > tmp-min-modes.cc\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-min-modes.cc min-insn-modes.cc\n \t$(STAMP) s-modes-m\n \n insn-preds.cc: s-preds; @true\n@@ -2528,8 +2528,8 @@ mddump: $(BUILD_RTL) $(MD_DEPS) build/genmddump$(build_exeext)\n \t$(RUN_GEN) build/genmddump$(build_exeext) $(md_file) > tmp-mddump.md\n \n s-preds: $(MD_DEPS) build/genpreds$(build_exeext)\n-\t$(RUN_GEN) build/genpreds$(build_exeext) $(md_file) > tmp-preds.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-preds.c insn-preds.cc\n+\t$(RUN_GEN) build/genpreds$(build_exeext) $(md_file) > tmp-preds.cc\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-preds.cc insn-preds.cc\n \t$(STAMP) s-preds\n \n s-preds-h: $(MD_DEPS) build/genpreds$(build_exeext)\n@@ -2734,8 +2734,8 @@ GTFILES = $(CPPLIB_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n \n GTFILES_H = $(subst /,-, \\\n \t    $(shell echo $(patsubst $(srcdir)/%,gt-%, \\\n-\t\t\t   $(patsubst %.c,%.h, \\\n-\t\t\t     $(filter %.c, $(GTFILES)))) \\\n+\t\t\t   $(patsubst %.cc,%.h, \\\n+\t\t\t     $(filter %.cc, $(GTFILES)))) \\\n \t\t\t| sed -e \"s|/[^ ]*/|/|g\" -e \"s|gt-config/|gt-|g\"))\n \n GTFILES_LANG_H = $(patsubst [%], gtype-%.h, $(filter [%], $(GTFILES)))\n@@ -3536,7 +3536,7 @@ mostlyclean: lang.mostlyclean\n \t-rm -f gt-*\n \t-rm -f gtype.state\n # Delete genchecksum outputs\n-\t-rm -f *-checksum.c\n+\t-rm -f *-checksum.cc\n # Delete lock-and-run bits\n \t-rm -rf linkfe.lck lock-stamp.*\n \n@@ -3574,7 +3574,7 @@ distclean: clean lang.distclean\n \t-rm -f *.asm\n \t-rm -f site.exp site.bak testsuite/site.exp testsuite/site.bak\n \t-rm -f testsuite/*.log testsuite/*.sum\n-\t-cd testsuite && rm -f x *.x *.x? *.exe *.rpo *.o *.s *.S *.c\n+\t-cd testsuite && rm -f x *.x *.x? *.exe *.rpo *.o *.s *.S *.cc\n \t-cd testsuite && rm -f *.out *.gcov *$(coverageexts)\n \t-rm -rf ${QMTEST_DIR} stamp-qmtest\n \t-rm -f .gdbinit configargs.h\n@@ -4336,7 +4336,7 @@ TAGS: lang.tags\n \t    incs=\"$$incs --include $$dir/TAGS.sub\";\t\\\n \t  fi;\t\t\t\t\t\t\\\n \tdone;\t\t\t\t\t\t\\\n-\t$(ETAGS) -o TAGS.sub c-family/*.h c-family/*.c c-family/*.cc \\\n+\t$(ETAGS) -o TAGS.sub c-family/*.h c-family/*.cc c-family/*.cc \\\n \t      *.h *.c *.cc \\\n \t      ../include/*.h ../libiberty/*.c \\\n \t      ../libcpp/*.c ../libcpp/include/*.h \\"}, {"sha": "59db72834dc893ac057a46383f0c6df749195970", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=cd9912b5930961ffb2832f67a4d18a7b92c06e51", "patch": "@@ -2856,7 +2856,7 @@ LIBGNAT_TARGET_PAIRS += \\\n \n # LIBGNAT_SRCS is the list of all C files (including headers) of the runtime\n # library.  LIBGNAT_OBJS is the list of object files for libgnat.\n-# thread.c is special as put into GNATRTL_TASKING_OBJS\n+# thread.cc is special as put into GNATRTL_TASKING_OBJS\n LIBGNAT_OBJS = adadecode.o adaint.o argv.o aux-io.o \t\t\t\\\n   cal.o cio.o cstreams.o ctrl_c.o\t\t\t\t\t\\\n   env.o errno.o exit.o expect.o final.o rtfinal.o rtinit.o\t\t\\\n@@ -2870,7 +2870,7 @@ LIBGNAT_OBJS = adadecode.o adaint.o argv.o aux-io.o \t\t\t\\\n #  GNAT_RTL_SRCS.  Right now we count on being able to build GNATRTL_OBJS\n #  from ADA_INCLUDE_SRCS.\n \n-LIBGNAT_SRCS = $(patsubst %.o,%.c,$(LIBGNAT_OBJS))\t\t\t\\\n+LIBGNAT_SRCS = $(patsubst %.o,%.cc,$(LIBGNAT_OBJS))\t\t\t\\\n   adadecode.h adaint.h env.h gsocket.h raise.h standard.ads.h\t\t\\\n   runtime.h $(EXTRA_LIBGNAT_SRCS)\n \n@@ -2920,7 +2920,7 @@ setup-rts: force\n \t$(MKDIR) $(RTSDIR)\n \t$(CHMOD) u+w $(RTSDIR)\n # Copy target independent sources\n-\t$(foreach f,$(ADA_INCLUDE_SRCS) $(LIBGNAT_SRCS) libgnarl/thread.c, \\\n+\t$(foreach f,$(ADA_INCLUDE_SRCS) $(LIBGNAT_SRCS) libgnarl/thread.cc, \\\n \t  $(LN_S) $(GNAT_SRC)/$(f) $(RTSDIR) ;) true\n # Remove files not used\n \t$(RM) $(patsubst %,$(RTSDIR)/%,$(ADA_EXCLUDE_FILES))\n@@ -2941,7 +2941,7 @@ setup-rts: force\n \tdo \\\n \t  if [ -f $(RTSDIR)/$$f ]; then echo $$f >> $(RTSDIR)/libgnarl.lst; fi \\\n \tdone\n-\t@echo thread.c >> $(RTSDIR)/libgnarl.lst\n+\t@echo thread.cc >> $(RTSDIR)/libgnarl.lst\n \t@for f in \\\n \t  $(foreach F,$(GNATRTL_NONTASKING_OBJS),$(subst $(objext),.ads,$(F))) \\\n \t  $(foreach F,$(GNATRTL_NONTASKING_OBJS),$(subst $(objext),.adb,$(F))); \\"}, {"sha": "a8d8899d3c9c411176344d37c14328d2c1b5dd0d", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=cd9912b5930961ffb2832f67a4d18a7b92c06e51", "patch": "@@ -121,13 +121,13 @@ ADA_TOOLS=gnatbind gnatchop gnat gnatkr gnatlink gnatls gnatmake \\\n # Say how to compile Ada programs.\n .SUFFIXES: .ada .adb .ads\n \n-# FIXME: need to add $(ADA_CFLAGS) to .c.o suffix rule\n+# FIXME: need to add $(ADA_CFLAGS) to .cc.o suffix rule\n # Use mildly strict warnings for this front end and add special flags.\n ada-warn = $(ADA_CFLAGS) $(filter-out -pedantic, $(STRICT_WARN))\n # Unresolved warnings in specific files.\n ada/adaint.o-warn = -Wno-error\n \n-ada/%.o: ada/gcc-interface/%.c\n+ada/%.o: ada/gcc-interface/%.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n@@ -796,7 +796,7 @@ ada.srcextra:\n ada.srcman:\n \n ada.tags: force\n-\tcd $(srcdir)/ada && $(ETAGS) -o TAGS.sub *.c *.h *.ads *.adb && \\\n+\tcd $(srcdir)/ada && $(ETAGS) -o TAGS.sub *.cc *.h *.ads *.adb && \\\n \t$(ETAGS) --include TAGS.sub --include ../TAGS.sub\n \n "}, {"sha": "54cf182a8c3152b609d73ca33311de24589dd8b5", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=cd9912b5930961ffb2832f67a4d18a7b92c06e51", "patch": "@@ -296,6 +296,10 @@ ADA_INCLUDES_FOR_SUBDIR = -I. -I$(fsrcdir)/ada\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) $(ALL_CPPFLAGS) \\\n \t  $(INCLUDES) $< $(OUTPUT_OPTION)\n \n+.cc.o:\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) $(ALL_CPPFLAGS) \\\n+\t  $(INCLUDES) $< $(OUTPUT_OPTION)\n+\n .adb.o:\n \t$(CC) -c $(ALL_ADAFLAGS) $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n \n@@ -411,6 +415,7 @@ ifeq ($(TOOLSCASE),native)\n   vpath %.ads ../$(RTSDIR) ../\n   vpath %.adb ../$(RTSDIR) ../\n   vpath %.c   ../$(RTSDIR) ../\n+  vpath %.cc  ../$(RTSDIR) ../\n   vpath %.h   ../$(RTSDIR) ../\n endif\n \n@@ -420,6 +425,7 @@ ifeq ($(TOOLSCASE),cross)\n   vpath %.ads ../\n   vpath %.adb ../\n   vpath %.c   ../\n+  vpath %.cc  ../\n   vpath %.h   ../\n endif\n "}, {"sha": "2c4266ce7b0c6460fc8942775b773a406fbd3005", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=cd9912b5930961ffb2832f67a4d18a7b92c06e51", "patch": "@@ -5374,7 +5374,7 @@ case ${target} in\n \t\tthen\n \t\t\ttarget_cpu_default2=\"\\\\\\\"$with_cpu\\\\\\\"\"\n \t\tfi\n-\t\tout_file=\"${cpu_type}/${cpu_type}.c\"\n+\t\tout_file=\"${cpu_type}/${cpu_type}.cc\"\n \t\tc_target_objs=\"${c_target_objs} ${cpu_type}-c.o\"\n \t\tcxx_target_objs=\"${cxx_target_objs} ${cpu_type}-c.o\"\n \t\td_target_objs=\"${d_target_objs} ${cpu_type}-d.o\""}, {"sha": "d7b1751b3b6cc50997db871bcab29f7a358fd41e", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=cd9912b5930961ffb2832f67a4d18a7b92c06e51", "patch": "@@ -84,7 +84,7 @@ avr-mcus: $(srcdir)/doc/avr-mmcu.texi ; @true\n gen-avr-mmcu-texi$(build_exeext): $(srcdir)/config/avr/gen-avr-mmcu-texi.cc \\\n   $(AVR_MCUS) $(srcdir)/config/avr/avr-devices.cc \\\n   $(srcdir)/config/avr/avr-arch.h\n-\t$(CC_FOR_BUILD) $(CFLAGS_FOR_BUILD) $< -o $@\n+\t$(CXX_FOR_BUILD) $(CXXFLAGS_FOR_BUILD) $< -o $@\n \n gen-avr-mmcu-specs$(build_exeext): $(srcdir)/config/avr/gen-avr-mmcu-specs.cc \\\n   $(AVR_MCUS) $(srcdir)/config/avr/avr-devices.cc \\"}, {"sha": "fd7227078e4a076375045c2bc1b7e4f699d594f2", "filename": "gcc/configure", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=cd9912b5930961ffb2832f67a4d18a7b92c06e51", "patch": "@@ -592,7 +592,7 @@ PACKAGE_STRING=\n PACKAGE_BUGREPORT=\n PACKAGE_URL=\n \n-ac_unique_file=\"tree.c\"\n+ac_unique_file=\"tree.cc\"\n # Factoring default headers for most tests.\n ac_includes_default=\"\\\n #include <stdio.h>\n@@ -8395,7 +8395,7 @@ fi\n   test -n \"$AWK\" && break\n done\n \n-# We need awk to create options.c and options.h.\n+# We need awk to create options.cc and options.h.\n # Bail out if it's missing.\n case ${AWK} in\n   \"\") as_fn_error $? \"can't build without awk, bailing out\" \"$LINENO\" 5 ;;\n@@ -12123,7 +12123,7 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n \n # On AIX 5.2, <ldfcn.h> conflicts with <fcntl.h>, as both define incompatible\n # FREAD and FWRITE macros.  Fortunately, for GCC's single usage of ldgetname\n-# in collect2.c, <fcntl.h> isn't visible, but the configure test below needs\n+# in collect2.cc, <fcntl.h> isn't visible, but the configure test below needs\n # to undef these macros to get the correct value for HAVE_DECL_LDGETNAME.\n for ac_func in ldgetname\n do\n@@ -12699,7 +12699,7 @@ if test x$md_file = x\n then md_file=$cpu_type/$cpu_type.md; fi\n \n if test x$out_file = x\n-then out_file=$cpu_type/$cpu_type.c; fi\n+then out_file=$cpu_type/$cpu_type.cc; fi\n \n if test x\"$tmake_file\" = x\n then tmake_file=$cpu_type/t-$cpu_type\n@@ -13351,8 +13351,8 @@ do\n done\n tmake_file=\"${tmake_file_}${omp_device_property_tmake_file}\"\n \n-out_object_file=`basename $out_file .c`.o\n-common_out_object_file=`basename $common_out_file .c`.o\n+out_object_file=`basename $out_file .cc`.o\n+common_out_object_file=`basename $common_out_file .cc`.o\n \n tm_file_list=\"options.h\"\n tm_include_list=\"options.h insn-constants.h\"\n@@ -32319,7 +32319,7 @@ _ACEOF\n \n \n # Generate gcc-driver-name.h containing GCC_DRIVER_NAME for the benefit\n-# of jit/jit-playback.c.\n+# of jit/jit-playback.cc.\n gcc_driver_version=`eval \"${get_gcc_base_ver} $srcdir/BASE-VER\"`\n echo \"gcc_driver_version: ${gcc_driver_version}\"\n cat > gcc-driver-name.h <<EOF"}, {"sha": "40cfd38fe56ceed7fbf5dd96bf3c55a40005c34f", "filename": "gcc/configure.ac", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=cd9912b5930961ffb2832f67a4d18a7b92c06e51", "patch": "@@ -1838,7 +1838,7 @@ if test x$md_file = x\n then md_file=$cpu_type/$cpu_type.md; fi\n \n if test x$out_file = x\n-then out_file=$cpu_type/$cpu_type.c; fi\n+then out_file=$cpu_type/$cpu_type.cc; fi\n \n if test x\"$tmake_file\" = x\n then tmake_file=$cpu_type/t-$cpu_type\n@@ -2308,8 +2308,8 @@ do\n done\n tmake_file=\"${tmake_file_}${omp_device_property_tmake_file}\"\n \n-out_object_file=`basename $out_file .c`.o\n-common_out_object_file=`basename $common_out_file .c`.o\n+out_object_file=`basename $out_file .cc`.o\n+common_out_object_file=`basename $common_out_file .cc`.o\n \n tm_file_list=\"options.h\"\n tm_include_list=\"options.h insn-constants.h\""}, {"sha": "386ae1b0506e9b26b18b51e99df4b73e0a384275", "filename": "gcc/gengtype.cc", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2Fgengtype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9912b5930961ffb2832f67a4d18a7b92c06e51/gcc%2Fgengtype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.cc?ref=cd9912b5930961ffb2832f67a4d18a7b92c06e51", "patch": "@@ -1618,7 +1618,7 @@ set_gc_used (pair_p variables)\n     printf (\"%s used %d GTY-ed variables\\n\", progname, nbvars);\n }\n \f\n-/* File mapping routines.  For each input file, there is one output .c file\n+/* File mapping routines.  For each input file, there is one output .cc file\n    (but some output files have many input files), and there is one .h file\n    for the whole build.  */\n \n@@ -1949,8 +1949,8 @@ struct file_rule_st {\n /* File rule action handling *.h files.  */\n static outf_p header_dot_h_frul (input_file*, char**, char**);\n \n-/* File rule action handling *.c files.  */\n-static outf_p source_dot_c_frul (input_file*, char**, char**);\n+/* File rule action handling *.cc files.  */\n+static outf_p source_dot_cc_frul (input_file*, char**, char**);\n \n #define NULL_REGEX (regex_t*)0\n \n@@ -1970,9 +1970,9 @@ struct file_rule_st files_rules[] = {\n      but are not shared.  */\n \n   /* the c-family/ source directory is special.  */\n-  { DIR_PREFIX_REGEX \"c-family/([[:alnum:]_-]*)\\\\.c$\",\n+  { DIR_PREFIX_REGEX \"c-family/([[:alnum:]_-]*)\\\\.cc$\",\n     REG_EXTENDED, NULL_REGEX,\n-    \"gt-c-family-$3.h\", \"c-family/$3.c\", NULL_FRULACT},\n+    \"gt-c-family-$3.h\", \"c-family/$3.cc\", NULL_FRULACT},\n \n   { DIR_PREFIX_REGEX \"c-family/([[:alnum:]_-]*)\\\\.h$\",\n     REG_EXTENDED, NULL_REGEX,\n@@ -2015,20 +2015,14 @@ struct file_rule_st files_rules[] = {\n     REG_EXTENDED, NULL_REGEX,\n     \"gt-objc-objc-map.h\", \"objc/objc-map.cc\", NULL_FRULACT },\n \n-  /* General cases.  For header *.h and source *.c or *.cc files, we\n+  /* General cases.  For header *.h and *.cc files, we\n    * need special actions to handle the language.  */\n \n-  /* Source *.c files are using get_file_gtfilename to compute their\n-     output_name and get_file_basename to compute their for_name\n-     through the source_dot_c_frul action.  */\n-  { DIR_PREFIX_REGEX \"([[:alnum:]_-]*)\\\\.c$\",\n-    REG_EXTENDED, NULL_REGEX, \"gt-$3.h\", \"$3.c\", source_dot_c_frul},\n-\n   /* Source *.cc files are using get_file_gtfilename to compute their\n      output_name and get_file_basename to compute their for_name\n-     through the source_dot_c_frul action.  */\n+     through the source_dot_cc_frul action.  */\n   { DIR_PREFIX_REGEX \"([[:alnum:]_-]*)\\\\.cc$\",\n-    REG_EXTENDED, NULL_REGEX, \"gt-$3.h\", \"$3.cc\", source_dot_c_frul},\n+    REG_EXTENDED, NULL_REGEX, \"gt-$3.h\", \"$3.cc\", source_dot_cc_frul},\n \n   /* Common header files get \"gtype-desc.cc\" as their output_name,\n    * while language specific header files are handled specially.  So\n@@ -2083,13 +2077,13 @@ header_dot_h_frul (input_file* inpf, char**poutname,\n }\n \n \n-/* Special file rules action for handling *.c source files using\n+/* Special file rules action for handling *.cc source files using\n  * get_file_gtfilename to compute their output_name and\n  * get_file_basename to compute their for_name.  The output_name is\n  * gt-<LANG>-<BASE>.h for language specific source files, and\n  * gt-<BASE>.h for common source files.  */\n static outf_p\n-source_dot_c_frul (input_file* inpf, char**poutname, char**pforname)\n+source_dot_cc_frul (input_file* inpf, char**poutname, char**pforname)\n {\n   char *newbasename = CONST_CAST (char*, get_file_basename (inpf));\n   char *newoutname = CONST_CAST (char*, get_file_gtfilename (inpf));\n@@ -2371,8 +2365,8 @@ close_output_files (void)\n \t{\n \t  FILE *newfile = NULL;\n \t  char *backupname = NULL;\n-\t  /* Back up the old version of the output file gt-FOO.c as\n-\t     BACKUPDIR/gt-FOO.c~ if we have a backup directory.  */\n+\t  /* Back up the old version of the output file gt-FOO.cc as\n+\t     BACKUPDIR/gt-FOO.cc~ if we have a backup directory.  */\n \t  if (backup_dir)\n \t    {\n \t      backupname = concat (backup_dir, \"/\","}, {"sha": "9e4c3fe5c1605645bd9cdf691594682395197590", "filename": "libcpp/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9912b5930961ffb2832f67a4d18a7b92c06e51/libcpp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9912b5930961ffb2832f67a4d18a7b92c06e51/libcpp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FMakefile.in?ref=cd9912b5930961ffb2832f67a4d18a7b92c06e51", "patch": "@@ -96,7 +96,7 @@ libcpp_a_SOURCES = charset.cc directives.cc errors.cc \\\n all: libcpp.a $(USED_CATALOGS)\n \n .SUFFIXES:\n-.SUFFIXES: .c .gmo .o .obj .po .pox\n+.SUFFIXES: .cc .gmo .o .obj .po .pox\n \n libcpp.a: $(libcpp_a_OBJS)\n \t-rm -f libcpp.a\n@@ -223,7 +223,7 @@ endif\n \n # Implicit rules and I18N\n \n-.c.o:\n+.cc.o:\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n "}, {"sha": "7e52c5676e56683a14c28090c26b50ef6296ae71", "filename": "libgcc/libgcov-driver.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9912b5930961ffb2832f67a4d18a7b92c06e51/libgcc%2Flibgcov-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9912b5930961ffb2832f67a4d18a7b92c06e51/libgcc%2Flibgcov-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver.c?ref=cd9912b5930961ffb2832f67a4d18a7b92c06e51", "patch": "@@ -79,7 +79,7 @@ static int gcov_error (const char *, ...);\n static void gcov_error_exit (void);\n #endif\n \n-#include \"gcov-io.c\"\n+#include \"gcov-io.cc\"\n \n #define GCOV_PROF_PREFIX \"libgcov profiling error:%s:\"\n "}]}