{"sha": "524301457dd42c12bb76dc4ff47d8e270e39ef65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI0MzAxNDU3ZGQ0MmMxMmJiNzZkYzRmZjQ3ZDhlMjcwZTM5ZWY2NQ==", "commit": {"author": {"name": "Ghjuvan Lacambre", "email": "lacambre@adacore.com", "date": "2020-06-24T15:12:19Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-16T07:34:54Z"}, "message": "[Ada] Implement expansion of CUDA_Execute pragma\n\ngcc/ada/\n\n\t* elists.ads (New_Elmt_List): New functions.\n\t* elists.adb (New_Elmt_List): New functions.\n\t* exp_prag.adb: Add dependency on Elists.\n\t(Expand_Pragma_CUDA_Execute): New function.\n\t(Expand_N_Pragma): Add call to Expand_Pragma_CUDA_Execute.\n\t* rtsfind.ads: Add CUDA.Internal, CUDA.Runtime, System.C\n\tpackages and RE_Push_Call_Configuration,\n\tRE_Pop_Call_Configuration, RE_Launch_Kernel, RO_IC_Unsigned,\n\tRO_IC_Unsigned_Long_Long entities.\n\t* rtsfind.adb: Extend Interfaces_Descendant to include\n\tInterfaces_C.", "tree": {"sha": "51dd3f2d8d06aac3727dac2aa91c64be0ceebe48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51dd3f2d8d06aac3727dac2aa91c64be0ceebe48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/524301457dd42c12bb76dc4ff47d8e270e39ef65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/524301457dd42c12bb76dc4ff47d8e270e39ef65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/524301457dd42c12bb76dc4ff47d8e270e39ef65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/524301457dd42c12bb76dc4ff47d8e270e39ef65/comments", "author": {"login": "glacambre", "id": 11534587, "node_id": "MDQ6VXNlcjExNTM0NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glacambre", "html_url": "https://github.com/glacambre", "followers_url": "https://api.github.com/users/glacambre/followers", "following_url": "https://api.github.com/users/glacambre/following{/other_user}", "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}", "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions", "organizations_url": "https://api.github.com/users/glacambre/orgs", "repos_url": "https://api.github.com/users/glacambre/repos", "events_url": "https://api.github.com/users/glacambre/events{/privacy}", "received_events_url": "https://api.github.com/users/glacambre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54690b9871d742bb322d28f7c1c4fa8b81cf94e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54690b9871d742bb322d28f7c1c4fa8b81cf94e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54690b9871d742bb322d28f7c1c4fa8b81cf94e6"}], "stats": {"total": 569, "additions": 567, "deletions": 2}, "files": [{"sha": "44998bcd28bddb8f79a5d26f4775b67d06e7bcf3", "filename": "gcc/ada/elists.adb", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524301457dd42c12bb76dc4ff47d8e270e39ef65/gcc%2Fada%2Felists.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524301457dd42c12bb76dc4ff47d8e270e39ef65/gcc%2Fada%2Felists.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Felists.adb?ref=524301457dd42c12bb76dc4ff47d8e270e39ef65", "patch": "@@ -373,6 +373,64 @@ package body Elists is\n       return Elists.Last;\n    end New_Elmt_List;\n \n+   -------------------\n+   -- New_Elmt_List --\n+   -------------------\n+\n+   function New_Elmt_List (Elmt1 : Node_Or_Entity_Id)\n+     return Elist_Id\n+   is\n+      L : constant Elist_Id := New_Elmt_List;\n+   begin\n+      Append_Elmt (Elmt1, L);\n+      return L;\n+   end New_Elmt_List;\n+\n+   -------------------\n+   -- New_Elmt_List --\n+   -------------------\n+\n+   function New_Elmt_List\n+     (Elmt1 : Node_Or_Entity_Id;\n+      Elmt2 : Node_Or_Entity_Id) return Elist_Id\n+   is\n+      L : constant Elist_Id := New_Elmt_List (Elmt1);\n+   begin\n+      Append_Elmt (Elmt2, L);\n+      return L;\n+   end New_Elmt_List;\n+\n+   -------------------\n+   -- New_Elmt_List --\n+   -------------------\n+\n+   function New_Elmt_List\n+     (Elmt1 : Node_Or_Entity_Id;\n+      Elmt2 : Node_Or_Entity_Id;\n+      Elmt3 : Node_Or_Entity_Id) return Elist_Id\n+   is\n+      L : constant Elist_Id := New_Elmt_List (Elmt1, Elmt2);\n+   begin\n+      Append_Elmt (Elmt3, L);\n+      return L;\n+   end New_Elmt_List;\n+\n+   -------------------\n+   -- New_Elmt_List --\n+   -------------------\n+\n+   function New_Elmt_List\n+     (Elmt1 : Node_Or_Entity_Id;\n+      Elmt2 : Node_Or_Entity_Id;\n+      Elmt3 : Node_Or_Entity_Id;\n+      Elmt4 : Node_Or_Entity_Id) return Elist_Id\n+   is\n+      L : constant Elist_Id := New_Elmt_List (Elmt1, Elmt2, Elmt3);\n+   begin\n+      Append_Elmt (Elmt4, L);\n+      return L;\n+   end New_Elmt_List;\n+\n    ---------------\n    -- Next_Elmt --\n    ---------------"}, {"sha": "825b87f5bcdd7dbe59d171ae05ca968dd07ec941", "filename": "gcc/ada/elists.ads", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524301457dd42c12bb76dc4ff47d8e270e39ef65/gcc%2Fada%2Felists.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524301457dd42c12bb76dc4ff47d8e270e39ef65/gcc%2Fada%2Felists.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Felists.ads?ref=524301457dd42c12bb76dc4ff47d8e270e39ef65", "patch": "@@ -90,6 +90,21 @@ package Elists is\n    --  a field in some other node which points to an element list where the\n    --  list is then subsequently filled in using Append calls.\n \n+   function New_Elmt_List (Elmt1 : Node_Or_Entity_Id) return Elist_Id;\n+   function New_Elmt_List\n+     (Elmt1 : Node_Or_Entity_Id;\n+      Elmt2 : Node_Or_Entity_Id) return Elist_Id;\n+   function New_Elmt_List\n+     (Elmt1 : Node_Or_Entity_Id;\n+      Elmt2 : Node_Or_Entity_Id;\n+      Elmt3 : Node_Or_Entity_Id) return Elist_Id;\n+   function New_Elmt_List\n+     (Elmt1 : Node_Or_Entity_Id;\n+      Elmt2 : Node_Or_Entity_Id;\n+      Elmt3 : Node_Or_Entity_Id;\n+      Elmt4 : Node_Or_Entity_Id) return Elist_Id;\n+   --  Create a new element list containing the given arguments.\n+\n    function First_Elmt (List : Elist_Id) return Elmt_Id;\n    pragma Inline (First_Elmt);\n    --  Obtains the first element of the given element list or, if the list has"}, {"sha": "b0ee2337ef824065de7b19ab5ff0c0833901cc95", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 473, "deletions": 0, "changes": 473, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524301457dd42c12bb76dc4ff47d8e270e39ef65/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524301457dd42c12bb76dc4ff47d8e270e39ef65/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=524301457dd42c12bb76dc4ff47d8e270e39ef65", "patch": "@@ -28,6 +28,7 @@ with Casing;   use Casing;\n with Checks;   use Checks;\n with Debug;    use Debug;\n with Einfo;    use Einfo;\n+with Elists;   use Elists;\n with Errout;   use Errout;\n with Exp_Ch11; use Exp_Ch11;\n with Exp_Util; use Exp_Util;\n@@ -67,6 +68,7 @@ package body Exp_Prag is\n    procedure Expand_Pragma_Abort_Defer             (N : Node_Id);\n    procedure Expand_Pragma_Check                   (N : Node_Id);\n    procedure Expand_Pragma_Common_Object           (N : Node_Id);\n+   procedure Expand_Pragma_CUDA_Execute            (N : Node_Id);\n    procedure Expand_Pragma_Import_Or_Interface     (N : Node_Id);\n    procedure Expand_Pragma_Inspection_Point        (N : Node_Id);\n    procedure Expand_Pragma_Interrupt_Priority      (N : Node_Id);\n@@ -156,6 +158,9 @@ package body Exp_Prag is\n          when Pragma_Common_Object =>\n             Expand_Pragma_Common_Object (N);\n \n+         when Pragma_CUDA_Execute =>\n+            Expand_Pragma_CUDA_Execute (N);\n+\n          when Pragma_Import =>\n             Expand_Pragma_Import_Or_Interface (N);\n \n@@ -614,6 +619,474 @@ package body Exp_Prag is\n               Expression => New_Copy_Tree (Psect)))));\n    end Expand_Pragma_Common_Object;\n \n+   --------------------------------\n+   -- Expand_Pragma_CUDA_Execute --\n+   --------------------------------\n+\n+   --  Pragma CUDA_Execute is expanded in the following manner:\n+\n+   --  Original Code\n+\n+   --    pragma CUDA_Execute (My_Proc (X, Y), Blocks, Grids, Mem, Stream)\n+\n+   --  Expanded Code\n+\n+   --    declare\n+   --      Blocks_Id : CUDA.Vector_Types.Dim3 := Blocks;\n+   --      Grids_Id  : CUDA.Vector_Types.Dim3 := Grids;\n+   --      Mem_Id    : Integer := <Mem or 0>;\n+   --      Stream_Id : CUDA.Driver_Types.Stream_T := <Stream or null>;\n+   --      X_Id      : <Type of X> := X;\n+   --      Y_Id      : <Type of Y> := Y;\n+   --      Arg_Id    : Array (1..2) of System.Address :=\n+   --        (X'Address,_Id Y'Address);_Id\n+   --    begin\n+   --      CUDA.Internal.Push_Call_Configuration (\n+   --        Grids_Id,\n+   --        Blocks_Id,\n+   --        Mem_Id,\n+   --        Stream_Id);\n+   --      CUDA.Internal.Pop_Call_Configuration (\n+   --        Grids_Id'address,\n+   --        Blocks_Id'address,\n+   --        Mem_Id'address,\n+   --        Stream_Id'address),\n+   --      CUDA.Runtime_Api.Launch_Kernel (\n+   --        My_Proc'Address,\n+   --        Blocks_Id,\n+   --        Grids_Id,\n+   --        Arg_Id'Address,\n+   --        Mem_Id,\n+   --        Stream_Id);\n+   --    end;\n+\n+   procedure Expand_Pragma_CUDA_Execute (N : Node_Id) is\n+\n+      Loc : constant Source_Ptr := Sloc (N);\n+\n+      procedure Append_Copies\n+        (Params : List_Id;\n+         Decls  : List_Id;\n+         Copies : Elist_Id);\n+      --  For each parameter in list Params, create an object declaration of\n+      --  the followinng form:\n+      --\n+      --    Copy_Id : Param_Typ := Param_Val;\n+      --\n+      --  Param_Typ is the type of the parameter. Param_Val is the initial\n+      --  value of the parameter. The declarations are stored in Decls, the\n+      --  entities of the new objects are collected in list Copies.\n+\n+      function Build_Dim3_Declaration\n+        (Decl_Id  : Entity_Id;\n+         Init_Val : Node_Id) return Node_Id;\n+      --  Build an object declaration of the form\n+      --\n+      --    Decl_Id : CUDA.Vectory_Types.Dim3 := Val;\n+      --\n+      --  Val depends on the nature of Init_Val, as follows:\n+      --\n+      --    * If Init_Val is already of type CUDA.Vector_Types.Dim3, then\n+      --      Init_Val is used.\n+      --\n+      --    * If Init_Val is a single Integer, Val has the following form:\n+      --\n+      --        (Interfaces.C.Unsigned (Init_Val),\n+      --         Interfaces.C.Unsigned (1),\n+      --         Interfaces.C.Unsigned (1))\n+      --\n+      --    * If Init_Val is an aggregate of three values, Val has the\n+      --      following form:\n+      --\n+      --        (Interfaces.C.Unsigned (Val_1),\n+      --         Interfaces.C.Unsigned (Val_2),\n+      --         Interfaces.C.Unsigned (Val_3))\n+\n+      function Build_Kernel_Args_Declaration\n+        (Kernel_Arg : Entity_Id;\n+         Var_Ids    : Elist_Id) return Node_Id;\n+      --  Given a list of variables, return an object declaration of the\n+      --  following form:\n+      --\n+      --    Kernel_Arg : ... := (Var_1'Address, ..., Var_N'Address);\n+\n+      function Build_Launch_Kernel_Call\n+        (Proc       : Entity_Id;\n+         Grid_Dims  : Entity_Id;\n+         Block_Dims : Entity_Id;\n+         Kernel_Arg : Entity_Id;\n+         Memory     : Entity_Id;\n+         Stream     : Entity_Id) return Node_Id;\n+      --  Builds and returns a call to CUDA.Launch_Kernel using the given\n+      --  arguments. Proc is the entity of the procedure passed to the\n+      --  CUDA_Execute pragma. Grid_Dims and Block_Dims are entities of the\n+      --  generated declarations that hold the kernel's dimensions. Args is the\n+      --  entity of the temporary array that holds the arguments of the kernel.\n+      --  Memory and Stream are the entities of the temporaries that hold the\n+      --  fourth and fith arguments of CUDA_Execute or their default values.\n+\n+      function Build_Shared_Memory_Declaration\n+        (Decl_Id  : Entity_Id;\n+         Init_Val : Node_Id) return Node_Id;\n+      --  Builds a declaration the Defining_Identifier of which is Decl_Id, the\n+      --  type of which is CUDA.Driver_Types.Stream_T and the value of which is\n+      --  Init_Val if present or null if not.\n+\n+      function Build_Simple_Declaration_With_Default\n+         (Decl_Id     : Entity_Id;\n+          Init_Val    : Entity_Id;\n+          Typ         : Entity_Id;\n+          Default_Val : Entity_Id) return Node_Id;\n+      --  Build a declaration the Defining_Identifier of which is Decl_Id, the\n+      --  Object_Definition of which is Typ, the value of which is Init_Val if\n+      --  present or Default otherwise.\n+\n+      function Build_Stream_Declaration\n+        (Decl_Id  : Entity_Id;\n+         Init_Val : Node_Id) return Node_Id;\n+      --  Build a declaration the Defining_Identifier of which is Decl_Id, the\n+      --  type of which is Integer, the value of which is Init_Val if present\n+      --  and 0 otherwise.\n+\n+      function To_Addresses (Elmts : Elist_Id) return List_Id;\n+      --  Returns a new list containing each element of Elmts wrapped in an\n+      --  'address attribute reference. When passed No_Elist, returns an empty\n+      --  list.\n+\n+      -------------------\n+      -- Append_Copies --\n+      -------------------\n+\n+      procedure Append_Copies\n+        (Params : List_Id;\n+         Decls  : List_Id;\n+         Copies : Elist_Id)\n+      is\n+         Copy  : Entity_Id;\n+         Param : Node_Id;\n+      begin\n+         Param := First (Params);\n+         while Present (Param) loop\n+            Copy := Make_Temporary (Loc, 'C');\n+\n+            Append_To (Decls,\n+               Make_Object_Declaration (Loc,\n+                 Defining_Identifier => Copy,\n+                 Object_Definition   => New_Occurrence_Of (Etype (Param), Loc),\n+                 Expression          => New_Copy_Tree (Param)));\n+\n+            Append_Elmt (Copy, Copies);\n+            Next (Param);\n+         end loop;\n+      end Append_Copies;\n+\n+      ----------------------------\n+      -- Build_Dim3_Declaration --\n+      ----------------------------\n+\n+      function Build_Dim3_Declaration\n+        (Decl_Id  : Entity_Id;\n+         Init_Val : Node_Id) return Node_Id\n+      is\n+         Grid_Dim_X : Node_Id;\n+         Grid_Dim_Y : Node_Id;\n+         Grid_Dim_Z : Node_Id;\n+         Init_Value : Node_Id;\n+      begin\n+         if Etype (Init_Val) = RTE (RE_Dim3) then\n+            Init_Value := Init_Val;\n+         else\n+            --  If Init_Val is an aggregate, use each of its arguments\n+\n+            if Nkind (Init_Val) = N_Aggregate then\n+               Grid_Dim_X := First (Expressions (Init_Val));\n+               Grid_Dim_Y := Next (Grid_Dim_X);\n+               Grid_Dim_Z := Next (Grid_Dim_Y);\n+\n+            --  Otherwise, we know it is an integer and the rest defaults to 1.\n+\n+            else\n+               Grid_Dim_X := Init_Val;\n+               Grid_Dim_Y := Make_Integer_Literal (Loc, 1);\n+               Grid_Dim_Z := Make_Integer_Literal (Loc, 1);\n+            end if;\n+\n+            --  Then cast every value to Interfaces.C.Unsigned and build an\n+            --  aggregate we can use to initialize the Dim3.\n+\n+            Init_Value :=\n+              Make_Aggregate (Loc,\n+                Expressions => New_List (\n+                  Make_Type_Conversion (Loc,\n+                    Subtype_Mark =>\n+                      New_Occurrence_Of (RTE (RO_IC_Unsigned), Loc),\n+                    Expression   => New_Copy_Tree (Grid_Dim_X)),\n+\n+                  Make_Type_Conversion (Loc,\n+                    Subtype_Mark =>\n+                      New_Occurrence_Of (RTE (RO_IC_Unsigned), Loc),\n+                    Expression   => New_Copy_Tree (Grid_Dim_Y)),\n+\n+                  Make_Type_Conversion (Loc,\n+                    Subtype_Mark =>\n+                      New_Occurrence_Of (RTE (RO_IC_Unsigned), Loc),\n+                    Expression   => New_Copy_Tree (Grid_Dim_Z))));\n+         end if;\n+\n+         --  Finally return the declaration\n+\n+         return Make_Object_Declaration (Loc,\n+            Defining_Identifier => Decl_Id,\n+            Object_Definition   => New_Occurrence_Of (RTE (RE_Dim3), Loc),\n+            Expression          => Init_Value);\n+      end Build_Dim3_Declaration;\n+\n+      -----------------------------------\n+      -- Build_Kernel_Args_Declaration --\n+      -----------------------------------\n+\n+      function Build_Kernel_Args_Declaration\n+        (Kernel_Arg : Entity_Id;\n+         Var_Ids    : Elist_Id) return Node_Id\n+      is\n+         Vals : constant List_Id := To_Addresses (Var_Ids);\n+      begin\n+         return\n+           Make_Object_Declaration (Loc,\n+             Defining_Identifier => Kernel_Arg,\n+             Object_Definition   =>\n+               Make_Constrained_Array_Definition (Loc,\n+                 Discrete_Subtype_Definitions => New_List (\n+                   Make_Range (Loc,\n+                     Low_Bound  => Make_Integer_Literal (Loc, 1),\n+                     High_Bound =>\n+                       Make_Integer_Literal (Loc, List_Length (Vals)))),\n+                 Component_Definition         =>\n+                   Make_Component_Definition (Loc,\n+                     Subtype_Indication =>\n+                       New_Occurrence_Of (Etype (RTE (RE_Address)), Loc))),\n+             Expression          => Make_Aggregate (Loc, Vals));\n+      end Build_Kernel_Args_Declaration;\n+\n+      -------------------------------\n+      --  Build_Launch_Kernel_Call --\n+      -------------------------------\n+\n+      function Build_Launch_Kernel_Call\n+        (Proc       : Entity_Id;\n+         Grid_Dims  : Entity_Id;\n+         Block_Dims : Entity_Id;\n+         Kernel_Arg : Entity_Id;\n+         Memory     : Entity_Id;\n+         Stream     : Entity_Id) return Node_Id is\n+      begin\n+         return\n+           Make_Procedure_Call_Statement (Loc,\n+             Name                   =>\n+               New_Occurrence_Of (RTE (RE_Launch_Kernel), Loc),\n+             Parameter_Associations => New_List (\n+               Make_Attribute_Reference (Loc,\n+                 Prefix         => New_Occurrence_Of (Proc, Loc),\n+                 Attribute_Name => Name_Address),\n+               New_Occurrence_Of (Grid_Dims, Loc),\n+               New_Occurrence_Of (Block_Dims, Loc),\n+               Make_Attribute_Reference (Loc,\n+                 Prefix         => New_Occurrence_Of (Kernel_Arg, Loc),\n+                 Attribute_Name => Name_Address),\n+               New_Occurrence_Of (Memory, Loc),\n+               New_Occurrence_Of (Stream, Loc)));\n+      end Build_Launch_Kernel_Call;\n+\n+      -------------------------------------\n+      -- Build_Shared_Memory_Declaration --\n+      -------------------------------------\n+\n+      function Build_Shared_Memory_Declaration\n+        (Decl_Id  : Entity_Id;\n+         Init_Val : Node_Id) return Node_Id\n+      is\n+      begin\n+         return Build_Simple_Declaration_With_Default\n+           (Decl_Id     => Decl_Id,\n+            Init_Val    => Init_Val,\n+            Typ         =>\n+              New_Occurrence_Of (RTE (RO_IC_Unsigned_Long_Long), Loc),\n+            Default_Val => Make_Integer_Literal (Loc, 0));\n+      end Build_Shared_Memory_Declaration;\n+\n+      -------------------------------------------\n+      -- Build_Simple_Declaration_With_Default --\n+      -------------------------------------------\n+\n+      function Build_Simple_Declaration_With_Default\n+        (Decl_Id     : Entity_Id;\n+         Init_Val    : Node_Id;\n+         Typ         : Entity_Id;\n+         Default_Val : Node_Id) return Node_Id\n+      is\n+         Value : Node_Id := Init_Val;\n+      begin\n+         if No (Value) then\n+            Value := Default_Val;\n+         end if;\n+\n+         return Make_Object_Declaration (Loc,\n+           Defining_Identifier => Decl_Id,\n+           Object_Definition   => Typ,\n+           Expression          => Value);\n+      end Build_Simple_Declaration_With_Default;\n+\n+      ------------------------------\n+      -- Build_Stream_Declaration --\n+      ------------------------------\n+\n+      function Build_Stream_Declaration\n+        (Decl_Id  : Entity_Id;\n+         Init_Val : Node_Id) return Node_Id\n+      is\n+      begin\n+         return Build_Simple_Declaration_With_Default\n+           (Decl_Id     => Decl_Id,\n+            Init_Val    => Init_Val,\n+            Typ         => New_Occurrence_Of (RTE (RE_Stream_T), Loc),\n+            Default_Val => Make_Null (Loc));\n+      end Build_Stream_Declaration;\n+\n+      ------------------\n+      -- To_Addresses --\n+      ------------------\n+\n+      function To_Addresses (Elmts : Elist_Id) return List_Id is\n+         Result : constant List_Id := New_List;\n+         Elmt   : Elmt_Id;\n+      begin\n+         if Elmts = No_Elist then\n+            return Result;\n+         end if;\n+\n+         Elmt := First_Elmt (Elmts);\n+         while Present (Elmt) loop\n+            Append_To (Result,\n+              Make_Attribute_Reference (Loc,\n+                Prefix         => New_Occurrence_Of (Node (Elmt), Loc),\n+                Attribute_Name => Name_Address));\n+            Next_Elmt (Elmt);\n+         end loop;\n+\n+         return Result;\n+      end To_Addresses;\n+\n+      --  Local variables\n+\n+      --  Pragma arguments\n+\n+      Procedure_Call   : constant Node_Id := Get_Pragma_Arg (Arg_N (N, 1));\n+      Grid_Dimensions  : constant Node_Id := Get_Pragma_Arg (Arg_N (N, 2));\n+      Block_Dimensions : constant Node_Id := Get_Pragma_Arg (Arg_N (N, 3));\n+      Shared_Memory    : constant Node_Id := Get_Pragma_Arg (Arg_N (N, 4));\n+      CUDA_Stream      : constant Node_Id := Get_Pragma_Arg (Arg_N (N, 5));\n+\n+      --  Entities of objects that capture the value of pragma arguments\n+\n+      Grids_Id  : constant Entity_Id := Make_Temporary (Loc, 'C');\n+      Blocks_Id : constant Entity_Id := Make_Temporary (Loc, 'C');\n+      Memory_Id : constant Entity_Id := Make_Temporary (Loc, 'C');\n+      Stream_Id : constant Entity_Id := Make_Temporary (Loc, 'C');\n+\n+      --  List holding the entities of the copies of Procedure_Call's\n+      --  arguments.\n+\n+      Kernel_Arg_Copies : constant Elist_Id := New_Elmt_List;\n+\n+      --  Entity of the array that contains the address of each of the kernel's\n+      --  arguments.\n+\n+      Kernel_Args_Id : constant Entity_Id := Make_Temporary (Loc, 'C');\n+\n+      --  Calls to the CUDA runtime API.\n+\n+      Launch_Kernel_Call : Node_Id;\n+      Pop_Call           : Node_Id;\n+      Push_Call          : Node_Id;\n+\n+      --  Declaration of all temporaries required for CUDA API Calls.\n+\n+      Blk_Decls  : constant List_Id := New_List;\n+\n+   --  Start of processing for CUDA_Execute\n+\n+   begin\n+      --  Build parameter declarations for CUDA API calls\n+\n+      Append_To\n+        (Blk_Decls, Build_Dim3_Declaration (Grids_Id, Grid_Dimensions));\n+\n+      Append_To\n+        (Blk_Decls,\n+         Build_Dim3_Declaration (Blocks_Id, Block_Dimensions));\n+\n+      Append_To\n+        (Blk_Decls,\n+         Build_Shared_Memory_Declaration (Memory_Id, Shared_Memory));\n+\n+      Append_To\n+        (Blk_Decls, Build_Stream_Declaration (Stream_Id, CUDA_Stream));\n+\n+      Append_Copies\n+        (Parameter_Associations (Procedure_Call),\n+         Blk_Decls,\n+         Kernel_Arg_Copies);\n+\n+      Append_To\n+        (Blk_Decls,\n+         Build_Kernel_Args_Declaration\n+           (Kernel_Args_Id, Kernel_Arg_Copies));\n+\n+      --  Build calls to the CUDA API\n+\n+      Push_Call :=\n+         Make_Procedure_Call_Statement (Loc,\n+           Name                   =>\n+             New_Occurrence_Of (RTE (RE_Push_Call_Configuration), Loc),\n+           Parameter_Associations => New_List (\n+             New_Occurrence_Of (Grids_Id, Loc),\n+             New_Occurrence_Of (Blocks_Id, Loc),\n+             New_Occurrence_Of (Memory_Id, Loc),\n+             New_Occurrence_Of (Stream_Id, Loc)));\n+\n+      Pop_Call :=\n+        Make_Procedure_Call_Statement (Loc,\n+          Name                   =>\n+            New_Occurrence_Of (RTE (RE_Pop_Call_Configuration), Loc),\n+          Parameter_Associations => To_Addresses\n+            (New_Elmt_List\n+              (Grids_Id,\n+               Blocks_Id,\n+               Memory_Id,\n+               Stream_Id)));\n+\n+      Launch_Kernel_Call := Build_Launch_Kernel_Call\n+        (Proc       => Entity (Name (Procedure_Call)),\n+         Grid_Dims  => Grids_Id,\n+         Block_Dims => Blocks_Id,\n+         Kernel_Arg => Kernel_Args_Id,\n+         Memory     => Memory_Id,\n+         Stream     => Stream_Id);\n+\n+      --  Finally make the block that holds declarations and calls\n+\n+      Rewrite (N,\n+        Make_Block_Statement (Loc,\n+          Declarations               => Blk_Decls,\n+          Handled_Statement_Sequence =>\n+            Make_Handled_Sequence_Of_Statements (Loc,\n+             Statements => New_List (\n+               Push_Call,\n+               Pop_Call,\n+               Launch_Kernel_Call))));\n+      Analyze (N);\n+   end Expand_Pragma_CUDA_Execute;\n+\n    ----------------------------------\n    -- Expand_Pragma_Contract_Cases --\n    ----------------------------------"}, {"sha": "83220ef0cbb039a4ed2e67aff8837bef75e4c822", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524301457dd42c12bb76dc4ff47d8e270e39ef65/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524301457dd42c12bb76dc4ff47d8e270e39ef65/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=524301457dd42c12bb76dc4ff47d8e270e39ef65", "patch": "@@ -589,7 +589,7 @@ package body Rtsfind is\n      range CUDA_Driver_Types .. CUDA_Vector_Types;\n \n    subtype Interfaces_Descendant is RTU_Id\n-     range Interfaces_Packed_Decimal .. Interfaces_Packed_Decimal;\n+     range Interfaces_C .. Interfaces_Packed_Decimal;\n \n    subtype System_Descendant is RTU_Id\n      range System_Address_Image .. System_Tasking_Stages;"}, {"sha": "ed6b671ef8005ad1b32c27c280965cb316612d88", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524301457dd42c12bb76dc4ff47d8e270e39ef65/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524301457dd42c12bb76dc4ff47d8e270e39ef65/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=524301457dd42c12bb76dc4ff47d8e270e39ef65", "patch": "@@ -159,13 +159,15 @@ package Rtsfind is\n       Ada_Wide_Wide_Text_IO_Integer_IO,\n       Ada_Wide_Wide_Text_IO_Modular_IO,\n \n-      --  CUDA\n+      --  Package CUDA\n \n       CUDA,\n \n       --  Children of CUDA\n \n       CUDA_Driver_Types,\n+      CUDA_Internal,\n+      CUDA_Runtime_Api,\n       CUDA_Vector_Types,\n \n       --  Interfaces\n@@ -174,6 +176,7 @@ package Rtsfind is\n \n       --  Children of Interfaces\n \n+      Interfaces_C,\n       Interfaces_Packed_Decimal,\n \n       --  Package System\n@@ -625,6 +628,11 @@ package Rtsfind is\n \n      RE_Stream_T,                        -- CUDA.Driver_Types\n \n+     RE_Push_Call_Configuration,         -- CUDA.Internal\n+     RE_Pop_Call_Configuration,          -- CUDA.Internal\n+\n+     RE_Launch_Kernel,                   -- CUDA.Runtime_Api\n+\n      RE_Dim3,                            -- CUDA.Vector_Types\n \n      RE_Integer_8,                       -- Interfaces\n@@ -636,6 +644,9 @@ package Rtsfind is\n      RE_Unsigned_32,                     -- Interfaces\n      RE_Unsigned_64,                     -- Interfaces\n \n+     RO_IC_Unsigned,                     -- Interfaces.C\n+     RO_IC_Unsigned_Long_Long,           -- Interfaces.C\n+\n      RE_Address,                         -- System\n      RE_Any_Priority,                    -- System\n      RE_Bit_Order,                       -- System\n@@ -1916,6 +1927,11 @@ package Rtsfind is\n \n      RE_Stream_T                         => CUDA_Driver_Types,\n \n+     RE_Push_Call_Configuration          => CUDA_Internal,\n+     RE_Pop_Call_Configuration           => CUDA_Internal,\n+\n+     RE_Launch_Kernel                    => CUDA_Runtime_Api,\n+\n      RE_Dim3                             => CUDA_Vector_Types,\n \n      RE_Integer_8                        => Interfaces,\n@@ -1927,6 +1943,9 @@ package Rtsfind is\n      RE_Unsigned_32                      => Interfaces,\n      RE_Unsigned_64                      => Interfaces,\n \n+     RO_IC_Unsigned                      => Interfaces_C,\n+     RO_IC_Unsigned_Long_Long            => Interfaces_C,\n+\n      RE_Address                          => System,\n      RE_Any_Priority                     => System,\n      RE_Bit_Order                        => System,"}]}