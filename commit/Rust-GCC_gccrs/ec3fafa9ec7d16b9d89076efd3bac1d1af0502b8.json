{"sha": "ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMzZmFmYTllYzdkMTZiOWQ4OTA3NmVmZDNiYWMxZDFhZjA1MDJiOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-06-15T21:53:34Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-06-15T21:53:34Z"}, "message": "analyzer: fix bitfield endianness issues [PR99212,PR101082]\n\nLooks like my patch for PR analyzer/99212 implicitly assumed\nlittle-endian, which the following patch fixes.\n\nFixes bitfields-1.c on:\n- armeb-none-linux-gnueabihf\n- cris-elf\n- powerpc64-darwin\n- s390-linux-gnu\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/99212\n\tPR analyzer/101082\n\t* engine.cc: Include \"target.h\".\n\t(impl_run_checkers): Log BITS_BIG_ENDIAN, BYTES_BIG_ENDIAN, and\n\tWORDS_BIG_ENDIAN.\n\t* region-model-manager.cc\n\t(region_model_manager::maybe_fold_binop): Move support for masking\n\tvia ARG0 & CST into...\n\t(region_model_manager::maybe_undo_optimize_bit_field_compare):\n\t...this new function.  Flatten by converting from nested\n\tconditionals to a series of early return statements to reject\n\tfailures.  Reject if type is not unsigned_char_type_node.\n\tHandle BYTES_BIG_ENDIAN when determining which bits are bound\n\tin the binding_map.\n\t* region-model.h\n\t(region_model_manager::maybe_undo_optimize_bit_field_compare):\n\tNew decl.\n\t* store.cc (bit_range::dump): New function.\n\t* store.h (bit_range::dump): New decl.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "f0ec9db9a54b4825020dba1cf584381c49c8d583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0ec9db9a54b4825020dba1cf584381c49c8d583"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71790f398e119c7fed867b0cfce60a7500629dff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71790f398e119c7fed867b0cfce60a7500629dff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71790f398e119c7fed867b0cfce60a7500629dff"}], "stats": {"total": 118, "additions": 83, "deletions": 35}, "files": [{"sha": "529965af1875f1cd907cd5b5aae20c6744c8c602", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8", "patch": "@@ -64,6 +64,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"analyzer/bar-chart.h\"\n #include <zlib.h>\n #include \"plugin.h\"\n+#include \"target.h\"\n \n /* For an overview, see gcc/doc/analyzer.texi.  */\n \n@@ -4845,6 +4846,13 @@ impl_run_checkers (logger *logger)\n {\n   LOG_SCOPE (logger);\n \n+  if (logger)\n+    {\n+      logger->log (\"BITS_BIG_ENDIAN: %i\", BITS_BIG_ENDIAN ? 1 : 0);\n+      logger->log (\"BYTES_BIG_ENDIAN: %i\", BYTES_BIG_ENDIAN ? 1 : 0);\n+      logger->log (\"WORDS_BIG_ENDIAN: %i\", WORDS_BIG_ENDIAN ? 1 : 0);\n+    }\n+\n   /* If using LTO, ensure that the cgraph nodes have function bodies.  */\n   cgraph_node *node;\n   FOR_EACH_FUNCTION_WITH_GIMPLE_BODY (node)"}, {"sha": "621eff0e13953085fbafc0212fd02c48892994eb", "filename": "gcc/analyzer/region-model-manager.cc", "status": "modified", "additions": 59, "deletions": 35, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8/gcc%2Fanalyzer%2Fregion-model-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8/gcc%2Fanalyzer%2Fregion-model-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.cc?ref=ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8", "patch": "@@ -431,6 +431,60 @@ region_model_manager::get_or_create_cast (tree type, const svalue *arg)\n   return get_or_create_unaryop (type, op, arg);\n }\n \n+/* Subroutine of region_model_manager::maybe_fold_binop for handling\n+   (TYPE)(COMPOUND_SVAL BIT_AND_EXPR CST) that may have been generated by\n+   optimize_bit_field_compare, where CST is from ARG1.\n+\n+   Support masking out bits from a compound_svalue for comparing a bitfield\n+   against a value, as generated by optimize_bit_field_compare for\n+   BITFIELD == VALUE.\n+\n+   If COMPOUND_SVAL has a value for the appropriate bits, return it,\n+   shifted accordingly.\n+   Otherwise return NULL.  */\n+\n+const svalue *\n+region_model_manager::\n+maybe_undo_optimize_bit_field_compare (tree type,\n+\t\t\t\t       const compound_svalue *compound_sval,\n+\t\t\t\t       tree cst,\n+\t\t\t\t       const svalue *arg1)\n+{\n+  if (type != unsigned_char_type_node)\n+    return NULL;\n+\n+  const binding_map &map = compound_sval->get_map ();\n+  unsigned HOST_WIDE_INT mask = TREE_INT_CST_LOW (cst);\n+  /* If \"mask\" is a contiguous range of set bits, see if the\n+     compound_sval has a value for those bits.  */\n+  bit_range bits (0, 0);\n+  if (!bit_range::from_mask (mask, &bits))\n+    return NULL;\n+\n+  bit_range bound_bits (bits);\n+  if (BYTES_BIG_ENDIAN)\n+    bound_bits = bit_range (BITS_PER_UNIT - bits.get_next_bit_offset (),\n+\t\t\t    bits.m_size_in_bits);\n+  const concrete_binding *conc\n+    = get_store_manager ()->get_concrete_binding (bound_bits, BK_direct);\n+  const svalue *sval = map.get (conc);\n+  if (!sval)\n+    return NULL;\n+\n+  /* We have a value;\n+     shift it by the correct number of bits.  */\n+  const svalue *lhs = get_or_create_cast (type, sval);\n+  HOST_WIDE_INT bit_offset = bits.get_start_bit_offset ().to_shwi ();\n+  tree shift_amt = build_int_cst (type, bit_offset);\n+  const svalue *shift_sval = get_or_create_constant_svalue (shift_amt);\n+  const svalue *shifted_sval = get_or_create_binop (type, LSHIFT_EXPR,\n+\t\t\t\t\t\t    lhs, shift_sval);\n+  /* Reapply the mask (needed for negative\n+     signed bitfields).  */\n+  return get_or_create_binop (type, BIT_AND_EXPR,\n+\t\t\t      shifted_sval, arg1);\n+}\n+\n /* Subroutine of region_model_manager::get_or_create_binop.\n    Attempt to fold the inputs and return a simpler svalue *.\n    Otherwise, return NULL.  */\n@@ -485,43 +539,13 @@ region_model_manager::maybe_fold_binop (tree type, enum tree_code op,\n \t    /* \"(ARG0 & 0)\" -> \"0\".  */\n \t    return get_or_create_constant_svalue (build_int_cst (type, 0));\n \n-\t  /* Support masking out bits from a compound_svalue, as this\n-\t     is generated when accessing bitfields.  */\n \t  if (const compound_svalue *compound_sval\n \t\t= arg0->dyn_cast_compound_svalue ())\n-\t    {\n-\t      const binding_map &map = compound_sval->get_map ();\n-\t      unsigned HOST_WIDE_INT mask = TREE_INT_CST_LOW (cst1);\n-\t      /* If \"mask\" is a contiguous range of set bits, see if the\n-\t\t compound_sval has a value for those bits.  */\n-\t      bit_range bits (0, 0);\n-\t      if (bit_range::from_mask (mask, &bits))\n-\t\t{\n-\t\t  const concrete_binding *conc\n-\t\t    = get_store_manager ()->get_concrete_binding (bits,\n-\t\t\t\t\t\t\t\t  BK_direct);\n-\t\t  if (const svalue *sval = map.get (conc))\n-\t\t    {\n-\t\t      /* We have a value;\n-\t\t\t shift it by the correct number of bits.  */\n-\t\t      const svalue *lhs = get_or_create_cast (type, sval);\n-\t\t      HOST_WIDE_INT bit_offset\n-\t\t\t= bits.get_start_bit_offset ().to_shwi ();\n-\t\t      tree shift_amt = build_int_cst (type, bit_offset);\n-\t\t      const svalue *shift_sval\n-\t\t\t= get_or_create_constant_svalue (shift_amt);\n-\t\t      const svalue *shifted_sval\n-\t\t\t= get_or_create_binop (type,\n-\t\t\t\t\t       LSHIFT_EXPR,\n-\t\t\t\t\t       lhs, shift_sval);\n-\t\t      /* Reapply the mask (needed for negative\n-\t\t\t signed bitfields).  */\n-\t\t      return get_or_create_binop (type,\n-\t\t\t\t\t\t  BIT_AND_EXPR,\n-\t\t\t\t\t\t  shifted_sval, arg1);\n-\t\t    }\n-\t\t}\n-\t    }\n+\t    if (const svalue *sval\n+\t\t= maybe_undo_optimize_bit_field_compare (type,\n+\t\t\t\t\t\t\t compound_sval,\n+\t\t\t\t\t\t\t cst1, arg1))\n+\t      return sval;\n \t}\n       break;\n     case TRUTH_ANDIF_EXPR:"}, {"sha": "7b12d35ab597a4480122df9e9aa68f47c3785809", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8", "patch": "@@ -320,6 +320,9 @@ class region_model_manager\n   const svalue *maybe_fold_sub_svalue (tree type,\n \t\t\t\t       const svalue *parent_svalue,\n \t\t\t\t       const region *subregion);\n+  const svalue *maybe_undo_optimize_bit_field_compare (tree type,\n+\t\t\t\t\t\t       const compound_svalue *compound_sval,\n+\t\t\t\t\t\t       tree cst, const svalue *arg1);\n \n   unsigned m_next_region_id;\n   root_region m_root_region;"}, {"sha": "d75fb2c4c7a27582c2fd20f0d58d734fb668d442", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8", "patch": "@@ -249,6 +249,18 @@ bit_range::dump_to_pp (pretty_printer *pp) const\n   pp_wide_int (pp, get_next_bit_offset (), SIGNED);\n }\n \n+/* Dump this object to stderr.  */\n+\n+DEBUG_FUNCTION void\n+bit_range::dump () const\n+{\n+  pretty_printer pp;\n+  pp.buffer->stream = stderr;\n+  dump_to_pp (&pp);\n+  pp_newline (&pp);\n+  pp_flush (&pp);\n+}\n+\n int\n bit_range::cmp (const bit_range &br1, const bit_range &br2)\n {"}, {"sha": "ca9ff696bca2a00907d823678e08f52f6fc3bacd", "filename": "gcc/analyzer/store.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8/gcc%2Fanalyzer%2Fstore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8/gcc%2Fanalyzer%2Fstore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.h?ref=ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8", "patch": "@@ -275,6 +275,7 @@ struct bit_range\n   {}\n \n   void dump_to_pp (pretty_printer *pp) const;\n+  void dump () const;\n \n   bit_offset_t get_start_bit_offset () const\n   {"}]}