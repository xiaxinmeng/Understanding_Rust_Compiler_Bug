{"sha": "1e2c9a2761097a6758b6aaaf612d629aa7e9febf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUyYzlhMjc2MTA5N2E2NzU4YjZhYWFmNjEyZDYyOWFhN2U5ZmViZg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-25T09:34:01Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-25T09:34:01Z"}, "message": "Daily bump.", "tree": {"sha": "345eb93e4734177027f079ff7a64993fecb368d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/345eb93e4734177027f079ff7a64993fecb368d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e2c9a2761097a6758b6aaaf612d629aa7e9febf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2c9a2761097a6758b6aaaf612d629aa7e9febf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2c9a2761097a6758b6aaaf612d629aa7e9febf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/comments", "author": null, "committer": null, "parents": [{"sha": "d3e763efcb85d2b5967aeb3178567e435e796420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3e763efcb85d2b5967aeb3178567e435e796420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3e763efcb85d2b5967aeb3178567e435e796420"}], "stats": {"total": 513, "additions": 512, "deletions": 1}, "files": [{"sha": "9bd36a5f8ac44703cd52f00804f6dc228372775d", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=1e2c9a2761097a6758b6aaaf612d629aa7e9febf", "patch": "@@ -1,3 +1,8 @@\n+2020-11-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Use revert_regex instead\n+\tof string prefix.  Convert sets to literals.\n+\n 2020-11-16  Martin Liska  <mliska@suse.cz>\n \n \t* mklog.py: Do not call read on an input stream."}, {"sha": "0f05ad18b4558843d3d784443d166f04c81c723d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e2c9a2761097a6758b6aaaf612d629aa7e9febf", "patch": "@@ -1,3 +1,105 @@\n+2020-11-24  Ulrich Weigand  <ulrich.weigand@de.ibm.com>\n+\n+\tRevert:\n+\t2020-11-24  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* doc/invoke.texi (-ffast-math): Remove mention of -fno-signaling-nans.\n+\tClarify conditions when __FAST_MATH__ preprocessor macro is defined.\n+\t* opts.c (common_handle_option): Pass OPTS_SET to set_fast_math_flags\n+\tand set_unsafe_math_optimizations_flags.\n+\t(set_fast_math_flags): Add OPTS_SET argument, and use it to avoid\n+\tsetting flags already explicitly set on the command line.  In the !set\n+\tcase, also reset x_flag_cx_limited_range and x_flag_excess_precision.\n+\tNever reset x_flag_signaling_nans or x_flag_rounding_math.\n+\t(set_unsafe_math_optimizations_flags): Add OPTS_SET argument, and use\n+\tit to avoid setting flags already explicitly set on the command line.\n+\t(fast_math_flags_set_p): Also test x_flag_cx_limited_range,\n+\tx_flag_associative_math, x_flag_reciprocal_math, and\n+\tx_flag_rounding_math.\n+\n+2020-11-24  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR bootstrap/97933\n+\t* lra.c (lra_process_new_insns): Stop on the first real insn after\n+\thead of e->dest.\n+\n+2020-11-24  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/97534\n+\t* config/arm/arm.c (arm_split_atomic_op): Use gen_int_mode when\n+\tnegating a const_int.\n+\n+2020-11-24  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/vector.md: Use vcond_comparison_operator\n+\tpredicate.\n+\n+2020-11-24  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* doc/invoke.texi (-ffast-math): Remove mention of -fno-signaling-nans.\n+\tClarify conditions when __FAST_MATH__ preprocessor macro is defined.\n+\t* opts.c (common_handle_option): Pass OPTS_SET to set_fast_math_flags\n+\tand set_unsafe_math_optimizations_flags.\n+\t(set_fast_math_flags): Add OPTS_SET argument, and use it to avoid\n+\tsetting flags already explicitly set on the command line.  In the !set\n+\tcase, also reset x_flag_cx_limited_range and x_flag_excess_precision.\n+\tNever reset x_flag_signaling_nans or x_flag_rounding_math.\n+\t(set_unsafe_math_optimizations_flags): Add OPTS_SET argument, and use\n+\tit to avoid setting flags already explicitly set on the command line.\n+\t(fast_math_flags_set_p): Also test x_flag_cx_limited_range,\n+\tx_flag_associative_math, x_flag_reciprocal_math, and\n+\tx_flag_rounding_math.\n+\n+2020-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/97950\n+\t* config/i386/i386.md (*setcc_si_1_and): Macroize into...\n+\t(*setcc_<mode>_1_and): New define_insn_and_split with SWI24 iterator.\n+\t(*setcc_si_1_movzbl): Macroize into...\n+\t(*setcc_<mode>_1_movzbl): New define_insn_and_split with SWI24\n+\titerator.\n+\n+2020-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimple-fold.c (clear_padding_flush): If a word contains only 0\n+\tor 0xff bytes of padding other than all set, all clear, all set\n+\tfollowed by all clear or all clear followed by all set, don't emit\n+\ta RMW operation on the whole word or parts of it, but instead\n+\tclear the individual bytes of padding.  For paddings of one byte\n+\tsize, don't use char[1] and {}, but instead just char and 0.\n+\n+2020-11-24  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-expand.c (expand_oacc_for): More explicit checking of which\n+\tOMP constructs we're expecting.\n+\n+2020-11-24  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* doc/install.texi (Prerequisites) <Tcl>: Add comment.\n+\n+2020-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96929\n+\t* fold-const.c (wide_int_binop) <case LSHIFT_EXPR, case RSHIFT_EXPR>:\n+\tReturn false on negative second argument rather than trying to handle\n+\tit as shift in the other direction.\n+\t* tree-ssa-ccp.c (bit_value_binop) <case LSHIFT_EXPR,\n+\tcase RSHIFT_EXPR>: Punt on negative shift count rather than trying\n+\tto handle it as shift in the other direction.\n+\t* match.pd (-1 >> x to -1): Remove tree_expr_nonnegative_p check.\n+\n+2020-11-24  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR tree-optimization/97849\n+\t* tree-if-conv.c (tree_if_conversion): Move ssa_name\n+\treplacement code from ifcvt_local_dce to this function\n+\tbefore calling do_rpo_vn.\n+\n+2020-11-24  Martin Sebor  <msebor@redhat.com>\n+\n+\t* tree-cfg.c (dump_function_to_file): Print type attributes\n+\tand return type.\n+\n 2020-11-23  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-prop.h (ipa_pass_through_data): Expand comment describing"}, {"sha": "a2b688586c39cffb733f824c1afd4e84580c6bd7", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=1e2c9a2761097a6758b6aaaf612d629aa7e9febf", "patch": "@@ -1 +1 @@\n-20201124\n+20201125"}, {"sha": "7fe4449f69a812cb8d16ee08da8183eef6597241", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1e2c9a2761097a6758b6aaaf612d629aa7e9febf", "patch": "@@ -1,3 +1,222 @@\n+2020-11-24  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Global_Item): Call SPARK_Msg_NE with the\n+\tentity, not with its identifier.\n+\n+2020-11-24  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* opt.ads (Generate_Asm): New flag.\n+\t* osint-c.adb (Set_Output_Object_File_Name): Accept any\n+\textension when generating assembly.\n+\t* adabkend.adb (Scan_Compiler_Args): Recognize -S.\n+\n+2020-11-24  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb, exp_ch4.adb, exp_intr.adb, sem_ch8.adb,\n+\tsem_res.adb, sem_type.adb, sem_util.adb: Reuse Is_Packed_Array.\n+\n+2020-11-24  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb (Apply_Access_Check): Remove unbalanced paren.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Fix typo in\n+\tcomment.\n+\n+2020-11-24  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Mark relevant pragmas as ghost\n+\twhen they are within a ghost region.\n+\n+2020-11-24  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* contracts.adb, freeze.adb, sem_ch12.adb, sem_prag.adb: Reuse\n+\tIn_Same_List.\n+\n+2020-11-24  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Is_Loop_Pragma): Avoid repeated calls to\n+\tOriginal_Node; remove unnecessary IF statement.\n+\n+2020-11-24  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Rewrite\n+\twith a CASE statement.\n+\n+2020-11-24  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Replace calls to\n+\tSloc with a local constant Loc; remove call to\n+\tAnalyze_And_Resolve and return, which is exactly what happens\n+\tanyway (and other branches in the Constrained declare block\n+\tappear to rely on analysis, resolution and returning happening\n+\tin all cases).\n+\t* sem_util.adb: Remove useless parens.\n+\n+2020-11-24  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Is_Object_Reference): Delta and extension\n+\taggregates are objects.\n+\n+2020-11-24  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* libgnat/s-rident.ads (System.Rident): Register new restriction\n+\tIDs.\n+\t* par-ch13.adb (Get_Aspect_Specifications): Add restriction check.\n+\t* par-prag.adb (Process_Restrictions_Or_Restriction_Warnings):\n+\tRegister No_Unrecognized_Aspects restriction.\n+\t* sem_prag.adb (Analyze_Pragma): Add restriction check.\n+\t* snames.ads-tmpl: Create restriction names.\n+\n+2020-11-24  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Declared_Within): Return True for objects\n+\tdeclared within the attribute Loop_Entry prefix itself.\n+\n+2020-11-24  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch3.adb (Process_Discriminants): Correctly set right\n+\tcontext for analyzing default value of discriminant.\n+\n+2020-11-24  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_type.adb (Add_One_Interp.Is_Universal_Operation): Account\n+\tfor universal_access = operator.\n+\t(Disambiguate): Take into account preference on universal_access\n+\t= operator when relevant.\n+\t(Disambiguate.Is_User_Defined_Anonymous_Access_Equality): New.\n+\n+2020-11-24  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_util.adb (Is_Finalizable_Transient): Take into account return\n+\tstatements containing N_Expression_With_Actions. Also clean up a\n+\tcondition to make it more readable.\n+\t* exp_ch6.adb: Fix typo.\n+\n+2020-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/a-wtdeio.adb (TFT): Delete and adjust throughout.\n+\t* libgnat/a-wtenau.adb (TFT): Likewise.\n+\t* libgnat/a-wtfiio.adb (TFT): Likewise.\n+\t* libgnat/a-wtflio.adb (TFT): Likewise.\n+\t* libgnat/a-wtinio.adb (TFT): Likewise.\n+\t* libgnat/a-wtinio__128.adb (TFT): Likewise.\n+\t* libgnat/a-wtmoio.adb (TFT): Likewise.\n+\t* libgnat/a-wtmoio__128.adb (TFT): Likewise.\n+\t* libgnat/a-ztdeio.adb (TFT): Likewise.\n+\t* libgnat/a-ztenau.adb (TFT): Likewise.\n+\t* libgnat/a-ztfiio.adb (TFT): Likewise.\n+\t* libgnat/a-ztflio.adb (TFT): Likewise.\n+\t* libgnat/a-ztinio.adb (TFT): Likewise.\n+\t* libgnat/a-ztinio__128.adb (TFT): Likewise.\n+\t* libgnat/a-ztmoio.adb (TFT): Likewise.\n+\t* libgnat/a-ztmoio__128.adb (TFT): Likewise.\n+\n+2020-11-24  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch13.adb (Validate_Literal_Aspect): Add support for named\n+\tnumbers and in particular overload of the Real_Literal function.\n+\t* sem_res.adb (Resolve): Add support for named numbers in\n+\tReal_Literal and Integer_Literal resolution.\n+\t* einfo.adb, einfo.ads (Related_Expression,\n+\tSet_Related_Expression): Allow E_Function.\n+\t* uintp.ads (UI_Image_Max): Bump size of buffer to avoid loosing\n+\tprecision.\n+\t* sem_eval.adb: Fix typo in comment.\n+\t* libgnat/a-nbnbin.adb, libgnat/a-nbnbin.ads (From_String):\n+\tReturn a Valid_Big_Integer.\n+\t* libgnat/a-nbnbre.adb, libgnat/a-nbnbre.ads (From_String): New\n+\tvariant taking two strings. Return a Valid_Big_Real.\n+\n+2020-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Associations) <Explicit_Freeze_Check>: Test\n+\tthat the instance is in a statement sequence instead of local scope.\n+\t(Freeze_Subprogram_Body): Use the special delayed placement with\n+\tregard to the parent instance only if its Sloc is strictly greater.\n+\t(Install_Body): Likewise.\n+\n+2020-11-24  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_ch13.adb (Validate_Literal_Aspect): Call to Base_Type\n+\tneeded in order to correctly check result type of String_Literal\n+\tfunction when the first named subtype differs from the base\n+\ttype (e.g.:\n+\ttype T is range 1 .. 10 with String_Literal => ... ;\n+\t).\n+\n+2020-11-24  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Global_Item): Handle specially the\n+\tcurrent instance of a PO.\n+\t* sem_util.ads (Is_Effectively_Volatile,\n+\tIs_Effectively_Volatile_For_Reading): Add parameter\n+\tIgnore_Protected.\n+\t* sem_util.adb (Is_Effectively_Volatile,\n+\tIs_Effectively_Volatile_For_Reading): Add parameter\n+\tIgnore_Protected to compute the query results ignoring protected\n+\tobjects/types.\n+\t(Is_Effectively_Volatile_Object,\n+\tIs_Effectively_Volatile_Object_For_Reading): Adapt to new\n+\tsignature.\n+\n+2020-11-24  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tUpdate documentation on -gnatyk.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2020-11-24  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch10.adb (Analyze_Compilation_Unit): Move aspects from\n+\tbody to the newly created spec.\n+\n+2020-11-24  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch6.adb (Add_Cond_Expression_Extra_Actual): Simplify\n+\thandling of function calls and remove bug in handling of\n+\ttransient objects.  Minor reformatting along the way.\n+\n+2020-11-24  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-nbnbin.adb (From_String): Implement fully.\n+\n+2020-11-24  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Delta_Array_Aggregate): If the choice is\n+\ta subtype_indication then call\n+\tResolve_Discrete_Subtype_Indication; both for choices\n+\timmediately inside array delta aggregates and inside\n+\titerated_component_association within array delta aggregates.\n+\n+2020-11-24  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* lib-load.adb, lib-writ.adb, lib.adb, par-load.adb,\n+\trtsfind.adb, sem_ch10.adb: Use Present where possible.\n+\n+2020-11-24  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Depends_Global): Reject Global and\n+\tDepends on null procedure.\n+\n+2020-11-24  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-nbnbre.adb (From_String): Handle properly '_'\n+\tcharacters.\n+\n+2020-11-24  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_Array_Aggregate,\n+\tExpand_SPARK_N_Aggregate): Remove, no longer needed.\n+\t* sem_aggr.adb (Resolve_Iterated_Component_Association): Only\n+\tremove references in the analyzed expression when generating\n+\tcode and the expression needs to be analyzed anew after being\n+\trewritten into a loop.\n+\n+2020-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_characteristics.rst: Complete\n+\tentry of 3.5.9(10).\n+\t* gnat_rm.texi: Regenerate.\n+\n 2020-11-20  Maciej W. Rozycki  <macro@linux-mips.org>\n \n \t* adaint.c (__gnat_number_of_cpus): Check for the presence of"}, {"sha": "c3af98e87766a1c5773833aa1a0653879dfbe61a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1e2c9a2761097a6758b6aaaf612d629aa7e9febf", "patch": "@@ -1,3 +1,7 @@\n+2020-11-24  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-warn.c (warn_parm_array_mismatch): Avoid invalid redeclarations.\n+\n 2020-11-23  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* c-attribs.c (handle_special_var_sec_attribute): New."}, {"sha": "fde2f96e8bad36b13cd5b7dc07c4da2ded7c7005", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=1e2c9a2761097a6758b6aaaf612d629aa7e9febf", "patch": "@@ -1,3 +1,10 @@\n+2020-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/97958\n+\t* c-parser.c (c_parser_binary_expression): For omp atomic binary\n+\texpressions, use make_node instead of build2 to avoid checking build2\n+\tperforms.\n+\n 2020-11-23  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/95630"}, {"sha": "be56219b40a1b1fed68c6575f226ccc5aabfb35f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1e2c9a2761097a6758b6aaaf612d629aa7e9febf", "patch": "@@ -1,3 +1,16 @@\n+2020-11-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/97899\n+\t* typeck2.c (store_init_value): Don't split_nonconstant_init in a\n+\ttemplate.\n+\n+2020-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96929\n+\t* constexpr.c (cxx_eval_binary_expression): For shifts by constant\n+\twith MSB set, emulate older wide_int_binop behavior to preserve\n+\tdiagnostics and -fpermissive behavior.\n+\n 2020-11-23  Nathan Sidwell  <nathan@acm.org>\n \n \t* module.cc: New dummy file."}, {"sha": "b189ac4358771cbec9dabb34fbf3ec5fe4489e85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e2c9a2761097a6758b6aaaf612d629aa7e9febf", "patch": "@@ -1,3 +1,99 @@\n+2020-11-24  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/pr97955.c: New test.\n+\n+2020-11-24  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/Wstringop-overflow-47.c: Add a note.\n+\n+2020-11-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/97899\n+\t* g++.dg/cpp0x/initlist-template3.C: New test.\n+\n+2020-11-24  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gfortran.dg/gomp/declare-target-4.f90: Adjust pattern to expect\n+\tan additional attribute and function return type.\n+\n+2020-11-24  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* gcc.dg/pr97534.c: New test.\n+\n+2020-11-24  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/aapcs64/abitest.h (FUNC_VAL_CHECK): Use\n+\tnoipa rather than noinline.\n+\t* gcc.target/aarch64/aapcs64/abitest-2.h (FUNC_VAL_CHECK): Likewise.\n+\n+2020-11-24  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/zvector/autovec-double-quiet-uneq.c: Expect\n+\tthat \"vx\" is not emitted.\n+\t* gcc.target/s390/zvector/autovec-float-quiet-uneq.c: Likewise.\n+\n+2020-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/97950\n+\t* gcc.target/i386/pr97950.c: New test.\n+\n+2020-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97964\n+\t* gcc.dg/tree-ssa/pr97964.c: New test.\n+\n+2020-11-24  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/kernels-decompose-1.c: Avoid Tcl 8.5-specific\n+\tbehavior.\n+\t* c-c++-common/goacc/kernels-decompose-2.c: Likewise.\n+\t* gfortran.dg/goacc/kernels-decompose-1.f95: Likewise.\n+\t* gfortran.dg/goacc/kernels-decompose-2.f95: Likewise.\n+\n+2020-11-24  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* lib/gcc-dg.exp (dg-optimized, dg-missed): Use 'saved-dg-warning'\n+\tinstead of 'saved-dg-error'.\n+\n+2020-11-24  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* lib/gcc-dg.exp (dg-optimized, dg-missed): Fix 'process-message'\n+\tcall.\n+\t* gcc.dg/vect/nodump-vect-opt-info-1.c: Demonstrate.\n+\t* gcc.dg/vect/nodump-vect-opt-info-2.c: Likewise.\n+\n+2020-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/97958\n+\t* c-c++-common/gomp/pr97958.c: New test.\n+\n+2020-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96929\n+\t* gcc.dg/tree-ssa/pr96929.c: New test.\n+\n+2020-11-24  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr23401.c: Update expected output.\n+\t* gcc.dg/tree-ssa/pr27810.c: Update expected output.\n+\t* gcc.dg/tree-ssa/slsr-8.c: Update expected output.\n+\n+2020-11-24  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* gcc.dg/vect/slp-perm-1.c: Adjust for partial vectors.\n+\t* gcc.dg/vect/slp-perm-5.c: Likewise.\n+\t* gcc.dg/vect/slp-perm-6.c: Likewise.\n+\t* gcc.dg/vect/slp-perm-7.c: Likewise.\n+\n+2020-11-24  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR tree-optimization/97849\n+\t* gcc.dg/tree-ssa/pr97849.c: New test.\n+\n+2020-11-24  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/attr-access-5.c: New test.\n+\n 2020-11-23  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/95630"}, {"sha": "307d0a2664c594b8a7f4fd34425cf8fe6343ae0a", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=1e2c9a2761097a6758b6aaaf612d629aa7e9febf", "patch": "@@ -1,3 +1,29 @@\n+2020-11-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* include/cpplib.h (struct cpp_hashnode): Add deferred field.\n+\t(cpp_set_deferred_macro): Define.\n+\t(cpp_get_deferred_macro): Declare.\n+\t(cpp_macro_definition): Reformat, add overload.\n+\t(cpp_macro_definition_location): Deal with deferred macro.\n+\t(cpp_alloc_token_string, cpp_compare_macro): Declare.\n+\t* internal.h (_cpp_notify_macro_use): Return bool\n+\t(_cpp_maybe_notify_macro_use): Likewise.\n+\t* directives.c (do_undef): Check macro is not undef before\n+\twarning.\n+\t(do_ifdef, do_ifndef): Deal with deferred macro.\n+\t* expr.c (parse_defined): Likewise.\n+\t* lex.c (cpp_allocate_token_string): Break out of ...\n+\t(create_literal): ... here.  Call it.\n+\t(cpp_maybe_module_directive): Deal with deferred macro.\n+\t* macro.c (cpp_get_token_1): Deal with deferred macro.\n+\t(warn_of_redefinition): Deal with deferred macro.\n+\t(compare_macros): Rename to ...\n+\t(cpp_compare_macro): ... here.  Make extern.\n+\t(cpp_get_deferred_macro): New.\n+\t(_cpp_notify_macro_use): Deal with deferred macro, return bool\n+\tindicating definedness.\n+\t(cpp_macro_definition): Deal with deferred macro.\n+\n 2020-11-19  Nathan Sidwell  <nathan@acm.org>\n \n \t* include/cpplib.h (enum cpp_main_search): New."}, {"sha": "9296697200d31762963775a12fb05568c383e864", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=1e2c9a2761097a6758b6aaaf612d629aa7e9febf", "patch": "@@ -1,3 +1,14 @@\n+2020-11-24  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* plugin/plugin-gcn.c: Don't redefine relocations if elf.h has them.\n+\t(reserved): Delete unused define.\n+\n+2020-11-24  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c: Avoid\n+\tTcl 8.5-specific behavior.\n+\t* testsuite/libgomp.oacc-fortran/pr94358-1.f90: Likewise.\n+\n 2020-11-18  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* env.c (gomp_global_icv): Remove nest_var field.  Add"}, {"sha": "a609d90156e7d65cfaec3ff05a244ef728b951de", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c9a2761097a6758b6aaaf612d629aa7e9febf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1e2c9a2761097a6758b6aaaf612d629aa7e9febf", "patch": "@@ -1,3 +1,31 @@\n+2020-11-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97936\n+\tPR libstdc++/97944\n+\t* testsuite/29_atomics/atomic_integral/wait_notify.cc: Disable.\n+\tDo not require pthreads, but add -pthread when appropriate.\n+\t* testsuite/30_threads/jthread/95989.cc: Likewise.\n+\t* testsuite/30_threads/latch/3.cc: Likewise.\n+\t* testsuite/30_threads/semaphore/try_acquire_until.cc: Likewise.\n+\n+2020-11-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/30_threads/jthread/95989.cc: Run all three test\n+\tfunctions, not just the first one twice.\n+\n+2020-11-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/67791\n+\t* src/c++11/thread.cc (thread::_M_start_thread(_State_ptr, void (*)())):\n+\tCheck that gthreads is available before calling __gthread_create.\n+\n+2020-11-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++98/locale.cc (locale::facet::_S_get_c_locale())\n+\t(locale::id::_M_id() const): Use __is_single_threaded.\n+\t* src/c++98/locale_init.cc (locale::_S_initialize()):\n+\tLikewise.\n+\n 2020-11-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/semaphore_base.h"}]}