{"sha": "5cca7d17787ae7c734ef08b35ad47b95416cd55f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNjYTdkMTc3ODdhZTdjNzM0ZWYwOGIzNWFkNDdiOTU0MTZjZDU1Zg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-02-24T22:51:04Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-02-24T22:51:04Z"}, "message": "(fp_literal_one, fp_literal_zero): Don't accept VOIDmode.\n\n(i960_output_ldconst): In DFmode code, delete code to handle FP_REG_P\ntarget.  In DFmode and SFmode code, delete test for HOST_FLOAT_FORMAT\n== TARGET_FLOAT_FORMAT.\n\nFrom-SVN: r9067", "tree": {"sha": "f9935a7479f697c3663882c2f0a962b49033799e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9935a7479f697c3663882c2f0a962b49033799e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cca7d17787ae7c734ef08b35ad47b95416cd55f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cca7d17787ae7c734ef08b35ad47b95416cd55f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cca7d17787ae7c734ef08b35ad47b95416cd55f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cca7d17787ae7c734ef08b35ad47b95416cd55f/comments", "author": null, "committer": null, "parents": [{"sha": "819f6d59590c2c0380d94af634d2fcc8d3007229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/819f6d59590c2c0380d94af634d2fcc8d3007229", "html_url": "https://github.com/Rust-GCC/gccrs/commit/819f6d59590c2c0380d94af634d2fcc8d3007229"}], "stats": {"total": 29, "additions": 4, "deletions": 25}, "files": [{"sha": "a9dfd411622912d4958e03129f97868aa5ee0fb3", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cca7d17787ae7c734ef08b35ad47b95416cd55f/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cca7d17787ae7c734ef08b35ad47b95416cd55f/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=5cca7d17787ae7c734ef08b35ad47b95416cd55f", "patch": "@@ -223,8 +223,7 @@ fp_literal_one (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n-  return (TARGET_NUMERICS && (mode == VOIDmode || mode == GET_MODE (op))\n-\t  && (op == CONST1_RTX (mode)));\n+  return (TARGET_NUMERICS && mode == GET_MODE (op) && op == CONST1_RTX (mode));\n }\n \n /* Return true if OP is a float constant of 0.  */\n@@ -234,8 +233,7 @@ fp_literal_zero (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n-  return (TARGET_NUMERICS && (mode == VOIDmode || mode == GET_MODE (op))\n-\t  && (op == CONST0_RTX (mode)));\n+  return (TARGET_NUMERICS && mode == GET_MODE (op) && op == CONST0_RTX (mode));\n }\n \n /* Return true if OP is a valid floating point literal.  */\n@@ -571,15 +569,9 @@ i960_output_ldconst (dst, src)\n     {\n       rtx first, second;\n \n-      if (fp_literal_zero (src, VOIDmode))\n-\t{\n-\t  if (FP_REG_P (dst))\n-\t    return \"movrl\t%1,%0\";\n-\t  else\n-\t    return \"movl\t0,%0\";\n-\t}\n+      if (fp_literal_zero (src, DFmode))\n+\treturn \"movl\t0,%0\";\n \n-#if HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT\n       split_double (src, &first, &second);\n \n       output_asm_insn (\"# ldconst\t%1,%0\",operands);\n@@ -593,11 +585,6 @@ i960_output_ldconst (dst, src)\n       output_asm_insn (i960_output_ldconst (operands[0], operands[1]),\n \t\t      operands);\n       return \"\";\n-#else\n-      if (fp_literal_one (src, VOIDmode))\n-\treturn \"movrl\t0f1.0,%0\";\n-      fatal (\"inline double constants not supported on this host\");\n-#endif\n     }\n   else if (mode == TImode)\n     {\n@@ -645,7 +632,6 @@ i960_output_ldconst (dst, src)\n     }\n   else if (mode == SFmode)\n     {\n-#if HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT\n       REAL_VALUE_TYPE d;\n       long value;\n \n@@ -657,13 +643,6 @@ i960_output_ldconst (dst, src)\n       operands[1] = gen_rtx (CONST_INT, VOIDmode, value);\n       output_asm_insn (i960_output_ldconst (operands[0], operands[1]),\n \t\t      operands);\n-#else\n-      if (fp_literal_zero (src, VOIDmode))\n-\treturn \"movr\t0f0.0,%0\";\n-      if (fp_literal_one (src, VOIDmode))\n-\treturn \"movr\t0f1.0,%0\";\n-      fatal (\"inline float constants not supported on this host\");\n-#endif\n       return \"\";\n     }\n   else"}]}