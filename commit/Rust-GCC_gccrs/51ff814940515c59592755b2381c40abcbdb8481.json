{"sha": "51ff814940515c59592755b2381c40abcbdb8481", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFmZjgxNDk0MDUxNWM1OTU5Mjc1NWIyMzgxYzQwYWJjYmRiODQ4MQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-05-11T04:20:57Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-05-11T04:20:57Z"}, "message": "[multiple changes]\n\n\n2003-05-10  Petur Runolfsson  <peturr02@ru.is>\n\n\tPR libstdc++/9027\n\tPR libstdc++/9520\n\tPR libstdc++/10096\n\t* include/bits/fstream.tcc (basic_file::_M_underflow):  Add generic\n\timplementation, based on old wchar_t specialization, add support\n\tfor codecvt::in() return value of codecvt_base::noconv, remove\n\t_M_file.sys_ungetc() call.\n\t* include/std/std_fstream.h (basic_file::underflow,\n\tbasic_file::uflow, basic_file::_M_underflow):  Remove\n\tspecialization declarations, call _M_underflow from generic versions\n\tof underflow and uflow.\n\t* src/fstream.cc (basic_file::underflow, basic_file::uflow,\n\tbasic_file::_M_underflow):  Remove specializations.\n\t* src/Makefile.am (sources):  Remove fstream.cc.\n\t* src/Makefile.in:  Regenerated.\n\t* testsuite/27_io/basic_filebuf/underflow/10096.cc:  New test.\n\t* testsuite/27_io/basic_filebuf/underflow/char/1.cc:  New test.\n\t* testsuite/27_io/basic_filebuf/underflow/char/9027.cc:  New test.\n\t* testsuite/27_io/basic_filebuf/underflow/wchar_t/9520.cc:  New test.\n\n2003-05-10  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/stdio_filebuf.h (__stdio_filebuf): Remove stack\n\tbuffer.\n\t* config/io/basic_file_stdio.h (__basic_file::xsgetn): Remove\n\tunbuffered bits.\n\t(__basic_file::xsputn): Same.\n\t(__basic_file::seekoff): Same.\n\t(__basic_file::seekpos): Same.\n\t(__basic_file::showmanyc): Same.\n\t* config/io/basic_file_stdio.cc: Same.\n\t* include/std/std_fstream.h: Same.\n\t* include/bits/fstream.tcc: Same.\n\t* src/fstream.cc: Same.\n\t* testsuite/27_io/basic_filebuf/sgetn/char/1.cc (test05): Tidy.\n\n2003-05-10  Petur Runolfsson  <peturr02@ru.is>\n\n\tPR libstdc++/9520\n\tPR libstdc++/9661\n\tPR libstdc++/9662\n\t* include/ext/stdio_sync_filebuf.h:  New file.\n\t(basic_stdiobuf):  New.\n\t* include/Makefile.am (ext_headers): Add ext/stdio_sync_filebuf.h\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/ios_base.h (Init::_S_create_buffers,\n\tInit::_S_destroy_buffers):  Remove declarations.\n\t* src/globals.cc (buf_cout_sync, buf_cin_sync, buf_cerr_sync,\n\tbuf_wcout_sync, buf_wcin_sync, buf_wcerr_sync):  Define.\n\t* src/ios.cc (Init::_S_create_buffers,\n\tInit::_S_destroy_buffers):  Remove.\n\t(Init::Init):  Create and use syncronized buffers.\n\t(ios_base::sync_with_stdio):  Destroy syncronized buffers,\n\tcreate and install unsyncronized buffers.\n\t* testsuite/27_io/objects/char/10.cc:  New test.\n\t* testsuite/27_io/objects/char/9.cc:  New test.\n\t* testsuite/27_io/objects/char/9661-1.cc:  New test.\n\t* testsuite/27_io/objects/char/9661-2_xin.cc:  New test.\n\t* testsuite/27_io/objects/char/9661-2_xin.in:  New.\n\t* testsuite/27_io/objects/wchar_t/1.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/10.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/2.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/2523-1_xin.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/2523-1_xin.in:  New.\n\t* testsuite/27_io/objects/wchar_t/2523-2_xin.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/2523-2_xin.in:  New.\n\t* testsuite/27_io/objects/wchar_t/3045.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/3647.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/3_xin.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/3_xin.in:  New.\n\t* testsuite/27_io/objects/wchar_t/4_xin.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/4_xin.in:  New.\n\t* testsuite/27_io/objects/wchar_t/5.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/5268.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/5280_xin.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/5280_xin.in:  New.\n\t* testsuite/27_io/objects/wchar_t/6.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/6548_xin.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/6548_xin.in:  New.\n\t* testsuite/27_io/objects/wchar_t/6648-1_xin.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/6648-1_xin.in:  New.\n\t* testsuite/27_io/objects/wchar_t/6648-2_xin.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/6648-2_xin.in:  New.\n\t* testsuite/27_io/objects/wchar_t/7.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/7744_xin.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/7744_xin.in:  New.\n\t* testsuite/27_io/objects/wchar_t/8.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/9_xin.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/9_xin.in:  New.\n\t* testsuite/27_io/objects/wchar_t/9520.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/9661-1.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/9661-2_xin.cc:  New test.\n\t* testsuite/27_io/objects/wchar_t/9661-2_xin.in:  New.\n\t* testsuite/27_io/objects/wchar_t/9662.cc:  New test.\n\t* testsuite/ext/stdiobuf_char.cc:  New test.\n\t* testsuite/ext/stdiobuf_wchar_t.cc:  New test.\n\nFrom-SVN: r66678", "tree": {"sha": "d71fba2b50f60c163b3ae4a43531c159bc10ec81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d71fba2b50f60c163b3ae4a43531c159bc10ec81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51ff814940515c59592755b2381c40abcbdb8481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ff814940515c59592755b2381c40abcbdb8481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51ff814940515c59592755b2381c40abcbdb8481", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ff814940515c59592755b2381c40abcbdb8481/comments", "author": null, "committer": null, "parents": [{"sha": "6e5d72baacbe5026ce1eb854d4e2f314d0f852fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5d72baacbe5026ce1eb854d4e2f314d0f852fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5d72baacbe5026ce1eb854d4e2f314d0f852fd"}], "stats": {"total": 3022, "additions": 2586, "deletions": 436}, "files": [{"sha": "2123a81de7a46e7f54dfdf78b8f2c460ee476308", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -1,3 +1,102 @@\n+2003-05-10  Petur Runolfsson  <peturr02@ru.is>\n+\n+\tPR libstdc++/9027\n+\tPR libstdc++/9520\n+\tPR libstdc++/10096\n+\t* include/bits/fstream.tcc (basic_file::_M_underflow):  Add generic\n+\timplementation, based on old wchar_t specialization, add support\n+\tfor codecvt::in() return value of codecvt_base::noconv, remove\n+\t_M_file.sys_ungetc() call.\n+\t* include/std/std_fstream.h (basic_file::underflow,\n+\tbasic_file::uflow, basic_file::_M_underflow):  Remove\n+\tspecialization declarations, call _M_underflow from generic versions\n+\tof underflow and uflow.\n+\t* src/fstream.cc (basic_file::underflow, basic_file::uflow,\n+\tbasic_file::_M_underflow):  Remove specializations.\n+\t* src/Makefile.am (sources):  Remove fstream.cc.\n+\t* src/Makefile.in:  Regenerated.\n+\t* testsuite/27_io/basic_filebuf/underflow/10096.cc:  New test.\n+\t* testsuite/27_io/basic_filebuf/underflow/char/1.cc:  New test.\n+\t* testsuite/27_io/basic_filebuf/underflow/char/9027.cc:  New test.\n+\t* testsuite/27_io/basic_filebuf/underflow/wchar_t/9520.cc:  New test.\n+\n+2003-05-10  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/stdio_filebuf.h (__stdio_filebuf): Remove stack\n+\tbuffer.\n+\t* config/io/basic_file_stdio.h (__basic_file::xsgetn): Remove\n+\tunbuffered bits.\n+\t(__basic_file::xsputn): Same.\n+\t(__basic_file::seekoff): Same.\n+\t(__basic_file::seekpos): Same.\n+\t(__basic_file::showmanyc): Same.\n+\t* config/io/basic_file_stdio.cc: Same.\n+\t* include/std/std_fstream.h: Same.\n+\t* include/bits/fstream.tcc: Same.\n+\t* src/fstream.cc: Same.\n+\t* testsuite/27_io/basic_filebuf/sgetn/char/1.cc (test05): Tidy.\n+\t\n+2003-05-10  Petur Runolfsson  <peturr02@ru.is>\n+\n+\tPR libstdc++/9520\n+\tPR libstdc++/9661\n+\tPR libstdc++/9662\n+\t* include/ext/stdio_sync_filebuf.h:  New file.\n+\t(basic_stdiobuf):  New.\n+\t* include/Makefile.am (ext_headers): Add ext/stdio_sync_filebuf.h\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/ios_base.h (Init::_S_create_buffers,\n+\tInit::_S_destroy_buffers):  Remove declarations.\n+\t* src/globals.cc (buf_cout_sync, buf_cin_sync, buf_cerr_sync, \n+\tbuf_wcout_sync, buf_wcin_sync, buf_wcerr_sync):  Define.\n+\t* src/ios.cc (Init::_S_create_buffers,\n+\tInit::_S_destroy_buffers):  Remove.\n+\t(Init::Init):  Create and use syncronized buffers.\n+\t(ios_base::sync_with_stdio):  Destroy syncronized buffers,\n+\tcreate and install unsyncronized buffers.\n+\t* testsuite/27_io/objects/char/10.cc:  New test.\n+\t* testsuite/27_io/objects/char/9.cc:  New test.\n+\t* testsuite/27_io/objects/char/9661-1.cc:  New test.\n+\t* testsuite/27_io/objects/char/9661-2_xin.cc:  New test.\n+\t* testsuite/27_io/objects/char/9661-2_xin.in:  New.\n+\t* testsuite/27_io/objects/wchar_t/1.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/10.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/2.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/2523-1_xin.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/2523-1_xin.in:  New.\n+\t* testsuite/27_io/objects/wchar_t/2523-2_xin.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/2523-2_xin.in:  New.\n+\t* testsuite/27_io/objects/wchar_t/3045.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/3647.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/3_xin.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/3_xin.in:  New.\n+\t* testsuite/27_io/objects/wchar_t/4_xin.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/4_xin.in:  New.\n+\t* testsuite/27_io/objects/wchar_t/5.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/5268.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/5280_xin.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/5280_xin.in:  New.\n+\t* testsuite/27_io/objects/wchar_t/6.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/6548_xin.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/6548_xin.in:  New.\n+\t* testsuite/27_io/objects/wchar_t/6648-1_xin.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/6648-1_xin.in:  New.\n+\t* testsuite/27_io/objects/wchar_t/6648-2_xin.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/6648-2_xin.in:  New.\n+\t* testsuite/27_io/objects/wchar_t/7.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/7744_xin.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/7744_xin.in:  New.\n+\t* testsuite/27_io/objects/wchar_t/8.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/9_xin.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/9_xin.in:  New.\n+\t* testsuite/27_io/objects/wchar_t/9520.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/9661-1.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/9661-2_xin.cc:  New test.\n+\t* testsuite/27_io/objects/wchar_t/9661-2_xin.in:  New.\n+\t* testsuite/27_io/objects/wchar_t/9662.cc:  New test.\n+\t* testsuite/ext/stdiobuf_char.cc:  New test.\n+\t* testsuite/ext/stdiobuf_wchar_t.cc:  New test.\n+\n 2003-05-10  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* testsuite/27_io/basic_filebuf/close/char/3.cc: Remove"}, {"sha": "eaddd3a2bbaf920fc7ba77f13cf38c756f3be41e", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 17, "deletions": 56, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -205,77 +205,41 @@ namespace std\n     return __retval;\n   }\n  \n-  // In the next four functions we want to use stdio functions only\n-  // when synced with stdio (_M_buf_size == 1): I/O primitives do not\n-  // block until the asked number of bytes are available.\n   streamsize \n-  __basic_file<char>::xsgetn(char* __s, streamsize __n, bool __stdio)\n+  __basic_file<char>::xsgetn(char* __s, streamsize __n)\n   {\n-    if (__stdio)\n-      return fread(__s, 1, __n, _M_cfile);\n-    else\n-      {\n-\tstreamsize __ret;\n-        do\n-\t  __ret = read(this->fd(), __s, __n);\n-\twhile (__ret == -1L && errno == EINTR);\n-\treturn __ret;\n-      }\n+    streamsize __ret;\n+    do\n+      __ret = read(this->fd(), __s, __n);\n+    while (__ret == -1L && errno == EINTR);\n+    return __ret;\n   }\n     \n   streamsize \n-  __basic_file<char>::xsputn(const char* __s, streamsize __n, bool __stdio)\n+  __basic_file<char>::xsputn(const char* __s, streamsize __n)\n   {\n-    if (__stdio)\n-      return fwrite(__s, 1, __n, _M_cfile);\n-    else\n-      {\n-\tstreamsize __ret;\n-        do\n-\t  __ret = write(this->fd(), __s, __n);\n-\twhile (__ret == -1L && errno == EINTR);\n-\treturn __ret;\n-      }\n+    streamsize __ret;\n+    do\n+      __ret = write(this->fd(), __s, __n);\n+    while (__ret == -1L && errno == EINTR);\n+    return __ret;\n   }\n   \n   streamoff\n   __basic_file<char>::seekoff(streamoff __off, ios_base::seekdir __way, \n-\t\t\t      bool __stdio, ios_base::openmode /*__mode*/)\n-  { \n-    if (!__stdio)\n-      return lseek(this->fd(), __off, __way);\n-    else\n-      {\n-\tif (!fseek(_M_cfile, __off, __way))\n-\t  return ftell(_M_cfile); \n-\telse\n-\t  // Fseek failed.\n-\t  return -1L;\n-      }\n-  }\n+\t\t\t      ios_base::openmode /*__mode*/)\n+  { return lseek(this->fd(), __off, __way); }\n \n   streamoff\n-  __basic_file<char>::seekpos(streamoff __pos, bool __stdio,\n-\t\t\t      ios_base::openmode /*__mode*/)\n-  { \n-    if (!__stdio)\n-      return lseek(this->fd(), __pos, ios_base::beg);\n-    else\n-      {\n-\tif (!fseek(_M_cfile, __pos, ios_base::beg))\n-\t  return ftell(_M_cfile);\n-\telse\n-\t  // Fseek failed.\n-\t  return -1L;\n-      }\n-  }\n+  __basic_file<char>::seekpos(streamoff __pos, ios_base::openmode /*__mode*/)\n+  { return lseek(this->fd(), __pos, ios_base::beg); }\n   \n   int \n   __basic_file<char>::sync() \n   { return fflush(_M_cfile); }\n \n   streamsize\n-  __basic_file<char>::showmanyc_helper(bool __stdio)\n+  __basic_file<char>::showmanyc()\n   {\n #ifdef FIONREAD\n     // Pipes and sockets.    \n@@ -299,9 +263,6 @@ namespace std\n     struct stat __buffer;\n     int __ret = fstat(this->fd(), &__buffer);\n     if (!__ret && _GLIBCPP_ISREG(__buffer.st_mode))\n-      if (__stdio)\n-\treturn __buffer.st_size - ftell(_M_cfile);\n-      else\n \treturn __buffer.st_size - lseek(this->fd(), 0, ios_base::cur);\n #endif\n     return 0;"}, {"sha": "e46407d8bc608bd6979ec0b62a32c31e8c181be4", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -56,6 +56,7 @@ namespace std\n     {\n       // Underlying data source/sink.\n       __c_file* \t_M_cfile;\n+\n       // True iff we opened _M_cfile, and thus must close it ourselves.\n       bool \t\t_M_cfile_created;\n \n@@ -93,25 +94,25 @@ namespace std\n       ~__basic_file();\n \n       streamsize \n-      xsputn(const char* __s, streamsize __n, bool __stdio);\n+      xsputn(const char* __s, streamsize __n);\n \n       streamsize \n-      xsgetn(char* __s, streamsize __n, bool __stdio);\n+      xsgetn(char* __s, streamsize __n);\n \n       streamoff\n-      seekoff(streamoff __off, ios_base::seekdir __way, bool __stdio,\n+      seekoff(streamoff __off, ios_base::seekdir __way, \n \t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n \n       streamoff\n-      seekpos(streamoff __pos, bool __stdio,\n+      seekpos(streamoff __pos, \n \t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n \n       int \n       sync();\n \n       streamsize\n-      showmanyc_helper(bool __stdio);\n+      showmanyc();\n     };\n }  // namespace std\n \n-#endif\t// _CPP_BASIC_FILE\n+#endif\t"}, {"sha": "1a462aed417504044b58b6d93d32a7f9703c6f3f", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -217,6 +217,7 @@ ext_headers = \\\n \t${ext_srcdir}/algorithm \\\n \t${ext_srcdir}/enc_filebuf.h \\\n \t${ext_srcdir}/stdio_filebuf.h \\\n+\t${ext_srcdir}/stdio_sync_filebuf.h \\\n \t${ext_srcdir}/functional \\\n \t${ext_srcdir}/hash_map \\\n \t${ext_srcdir}/hash_set \\"}, {"sha": "bfa88a8ab0cb17a6afdf61701b3ae20d5de1d48a", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -337,6 +337,7 @@ ext_headers = \\\n \t${ext_srcdir}/algorithm \\\n \t${ext_srcdir}/enc_filebuf.h \\\n \t${ext_srcdir}/stdio_filebuf.h \\\n+\t${ext_srcdir}/stdio_sync_filebuf.h \\\n \t${ext_srcdir}/functional \\\n \t${ext_srcdir}/hash_map \\\n \t${ext_srcdir}/hash_set \\"}, {"sha": "cec57ffffc08d4bfdfe059f18ba8674fe96e61ca", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 94, "deletions": 14, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -165,7 +165,6 @@ namespace std\n       const bool __testin = this->_M_mode & ios_base::in;\n       const locale __loc = this->getloc();\n       const __codecvt_type& __cvt = use_facet<__codecvt_type>(__loc);\n-      const bool __testsync = this->_M_buf_size <= 1;\n \n       if (__testin && this->is_open())\n \t{\n@@ -174,13 +173,100 @@ namespace std\n \t  // For a stateful encoding (-1) the pending sequence might be just\n \t  // shift and unshift prefixes with no actual character.\n \t  if (__cvt.encoding() >= 0)\n-\t    __ret += _M_file.showmanyc_helper(__testsync) / __cvt.max_length();\n+\t    __ret += _M_file.showmanyc() / __cvt.max_length();\n \t}\n \n       _M_last_overflowed = false;\t\n       return __ret;\n     }\n   \n+  template<typename _CharT, typename _Traits>\n+    typename basic_filebuf<_CharT, _Traits>::int_type \n+    basic_filebuf<_CharT, _Traits>::_M_underflow(bool __bump)\n+    {\n+      int_type __ret = traits_type::eof();\n+      const bool __testin = this->_M_mode & ios_base::in;\n+      const bool __testout = this->_M_mode & ios_base::out;\n+\n+      if (__testin)\n+\t{\n+\t  // Check for pback madness, and if so swich back to the\n+\t  // normal buffers and jet outta here before expensive\n+\t  // fileops happen...\n+\t  if (_M_pback_init)\n+\t    _M_destroy_pback();\n+\n+\t  if (this->_M_in_cur < this->_M_in_end)\n+\t    {\n+\t      __ret = traits_type::to_int_type(*this->_M_in_cur);\n+\t      if (__bump)\n+\t\t_M_move_in_cur(1);\n+\t      return __ret;\n+\t    }\n+\n+\t  // Sync internal and external buffers.\n+\t  // NB: __testget -> __testput as _M_buf_unified here.\n+\t  if (this->_M_in_cur > this->_M_in_beg)\n+\t    {\n+\t      if (__testout)\n+\t\t_M_overflow();\n+\t      else if (this->_M_in_cur != _M_filepos)\n+\t\t_M_file.seekoff(this->_M_in_cur - _M_filepos, ios_base::cur, \n+\t\t\t\tios_base::in);\n+\t    }\n+\n+\t  if (_M_buf_size)\n+\t    {\n+\t      streamsize __elen = 0;\n+\t      streamsize __ilen = 0;\n+\t      const locale __loc = this->getloc();\n+\t      const __codecvt_type& __cvt = use_facet<__codecvt_type>(__loc);\n+\t      if (__cvt.always_noconv())\n+\t\t{\n+\t\t  __elen = _M_file.xsgetn(reinterpret_cast<char*>(this->_M_in_beg), _M_buf_size);\n+\t\t  __ilen = __elen;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  char* __buf = static_cast<char*>(__builtin_alloca(_M_buf_size));\n+\t\t  __elen = _M_file.xsgetn(__buf, _M_buf_size);\n+\t\t  \n+\t\t  const char* __eend;\n+\t\t  char_type* __iend;\n+\t\t  codecvt_base::result __r;\n+\t\t  __r = __cvt.in(_M_state_cur, __buf, __buf + __elen, __eend, \n+\t\t\t\t this->_M_in_beg, \n+\t\t\t\t this->_M_in_beg + _M_buf_size, __iend);\n+\t\t  if (__r == codecvt_base::ok)\n+\t\t    __ilen = __iend - this->_M_in_beg;\n+\t\t  else if (__r == codecvt_base::noconv)\n+\t\t    {\n+\t\t      traits_type::copy(this->_M_in_beg,\n+ \t\t\t\t\treinterpret_cast<char_type*>(__buf), \n+\t\t\t\t\t__elen);\n+ \t\t      __ilen = __elen;\n+\t\t    }\n+\t\t  else \n+\t\t    {\n+\t\t      // Unwind.\n+\t\t      __ilen = 0;\n+\t\t      _M_file.seekoff(-__elen, ios_base::cur, ios_base::in);\n+\t\t    }\n+\t\t}\n+\n+\t      if (0 < __ilen)\n+\t\t{\n+\t\t  _M_set_determinate(__ilen);\n+\t\t  __ret = traits_type::to_int_type(*this->_M_in_cur);\n+\t\t  if (__bump)\n+\t\t    _M_move_in_cur(1);\n+\t\t}\t   \n+\t    }\n+\t}\n+      _M_last_overflowed = false;\t\n+      return __ret;\n+    }\n+\n   template<typename _CharT, typename _Traits>\n     typename basic_filebuf<_CharT, _Traits>::int_type \n     basic_filebuf<_CharT, _Traits>::\n@@ -277,14 +363,12 @@ namespace std\n     _M_convert_to_external(_CharT* __ibuf, streamsize __ilen,\n \t\t\t   streamsize& __elen, streamsize& __plen)\n     {\n-      const bool __testsync = this->_M_buf_size <= 1;\n       const locale __loc = this->getloc();\n       const __codecvt_type& __cvt = use_facet<__codecvt_type>(__loc);\n \n       if (__cvt.always_noconv() && __ilen)\n \t{\n-\t  __elen += _M_file.xsputn(reinterpret_cast<char*>(__ibuf), \n-\t\t\t\t   __ilen, __testsync);\n+\t  __elen += _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);\n \t  __plen += __ilen;\n \t}\n       else\n@@ -317,7 +401,7 @@ namespace std\n \t  \n \t  if (__blen)\n \t    {\n-\t      __elen += _M_file.xsputn(__buf, __blen, __testsync);\n+\t      __elen += _M_file.xsputn(__buf, __blen);\n \t      __plen += __blen;\n \t    }\n \t  \n@@ -331,7 +415,7 @@ namespace std\n \t      if (__r != codecvt_base::error)\n \t\t{\n \t\t  __rlen = __bend - __buf;\n-\t\t  __elen += _M_file.xsputn(__buf, __rlen, __testsync);\n+\t\t  __elen += _M_file.xsputn(__buf, __rlen);\n \t\t  __plen += __rlen;\n \t\t}\n \t    }\n@@ -346,7 +430,6 @@ namespace std\n       int_type __ret = traits_type::eof();\n       const bool __testput = this->_M_out_beg < this->_M_out_lim;\n       const bool __testunbuffered = _M_file.is_open() && !this->_M_buf_size;\n-      const bool __testsync = this->_M_buf_size <= 1;\n \n       if (__testput || __testunbuffered)\n \t{\n@@ -360,7 +443,7 @@ namespace std\n \t  if (_M_filepos && _M_filepos != this->_M_out_beg)\n \t    {\n \t      off_type __off = this->_M_out_beg - _M_filepos;\n-\t      _M_file.seekoff(__off, ios_base::cur, __testsync);\n+\t      _M_file.seekoff(__off, ios_base::cur);\n \t    }\n \n \t  // Convert internal buffer to external representation, output.\n@@ -434,7 +517,6 @@ namespace std\n       pos_type __ret =  pos_type(off_type(-1)); \n       const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;\n       const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;\n-      const bool __testsync = this->_M_buf_size <= 1;\n       \n       int __width = 0;\n       if (has_facet<__codecvt_type>(this->_M_buf_locale))\n@@ -468,16 +550,14 @@ namespace std\n \t\t__computed_off += this->_M_in_cur - _M_filepos;\n \n \t      // Return pos_type(off_type(-1)) in case of failure.\n-\t      __ret = _M_file.seekoff(__computed_off, __way, __testsync, \n-\t\t\t\t      __mode);\n+\t      __ret = _M_file.seekoff(__computed_off, __way, __mode);\n \t      _M_set_indeterminate();\n \t    }\n \t  // NB: Need to do this in case _M_file in indeterminate\n \t  // state, ie _M_file._offset == -1\n \t  else\n \t    {\n-\t      pos_type __tmp = _M_file.seekoff(__off, ios_base::cur, \n-\t\t\t\t\t       __testsync, __mode);\n+\t      pos_type __tmp = _M_file.seekoff(__off, ios_base::cur, __mode);\n \t      if (__tmp >= 0)\n \t\t{\n \t\t  // Seek successful."}, {"sha": "37a02a43dddf956a686381c25fe3256f08d5f5f4", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -452,12 +452,6 @@ namespace std\n       Init();\n       ~Init();\n       \n-      static void\n-      _S_create_buffers(bool __sync);\n-      \n-      static void\n-      _S_destroy_buffers();\n-\n       // NB: Allows debugger applications use of the standard streams\n       // from operator new. _S_ios_base_init must be incremented in\n       // _S_ios_create _after_ initialization is completed."}, {"sha": "4d3c9d07eeec85140672a5782e67475dcdf4c2c4", "filename": "libstdc++-v3/include/ext/stdio_filebuf.h", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -35,6 +35,7 @@\n #define _EXT_STDIO_FILEBUF\n \n #pragma GCC system_header\n+\n #include <fstream>\n \n namespace __gnu_cxx\n@@ -60,10 +61,6 @@ namespace __gnu_cxx\n       typedef typename traits_type::off_type \t\toff_type;\n       typedef std::size_t                               size_t;\n       \n-    protected:\n-      // Stack-based buffer for unbuffered input.\n-      char_type\t\t\t_M_unbuf[4];\n-      \n     public:\n       /**\n        *  @param  fd  An open file descriptor.\n@@ -125,11 +122,7 @@ namespace __gnu_cxx\n \t{\n \t  this->_M_mode = __mode;\n \t  this->_M_buf_size = __size;\n-\t  if (__size > 0 && __size < 4)\n-\t    // Specify not to use an allocated buffer.\n-\t    this->_M_buf = _M_unbuf;\n-\t  else\n-\t    _M_allocate_internal_buffer();\n+\t  _M_allocate_internal_buffer();\n \t  _M_set_indeterminate();\n \t}\n     }\n@@ -144,14 +137,10 @@ namespace __gnu_cxx\n \t{\n \t  this->_M_mode = __mode;\n \t  this->_M_buf_size = __size;\n-\t  if (__size > 0 && __size < 4)\n-\t    // Specify not to use an allocated buffer.\n-\t    this->_M_buf = _M_unbuf;\n-\t  else\n-\t    _M_allocate_internal_buffer();\n+\t  _M_allocate_internal_buffer();\n \t  _M_set_indeterminate();\n \t}\n     }\n } // namespace __gnu_cxx\n \n-#endif /* _EXT_STDIO_FILEBUF */\n+#endif "}, {"sha": "5e110c4fd204cb7cb3dc7eccf2680b450861aa29", "filename": "libstdc++-v3/include/ext/stdio_sync_filebuf.h", "status": "added", "additions": 247, "deletions": 0, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,247 @@\n+// Iostreams wrapper for stdio FILE* -*- C++ -*-\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file ext/stdiostream.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ */\n+\n+#ifndef _EXT_STDIO_SYNC_FILEBUF\n+#define _EXT_STDIO_SYNC_FILEBUF\n+\n+#pragma GCC system_header\n+\n+#include <fstream>\n+#include <unistd.h>\n+\n+#if defined(_GLIBCPP_HAVE_S_ISREG) || defined(_GLIBCPP_HAVE_S_IFREG)\n+# include <sys/stat.h>\n+# ifdef _GLIBCPP_HAVE_S_ISREG\n+#  define _GLIBCPP_ISREG(x) S_ISREG(x)\n+# else\n+#  define _GLIBCPP_ISREG(x) (((x) & S_IFMT) == S_IFREG)\n+# endif\n+#endif\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+#include <cwchar>\n+#endif\n+\n+namespace __gnu_cxx\n+{\n+  template<typename _CharT, typename _Traits = std::char_traits<_CharT> >\n+    class stdio_sync_filebuf : public std::basic_streambuf<_CharT, _Traits>\n+    {\n+    private:\n+      std::__c_file* const _M_file;\n+\n+     public:\n+      // Types:\n+      typedef _CharT                  \t        \tchar_type;\n+      typedef _Traits\t\t                    \ttraits_type;\n+      typedef typename traits_type::int_type \t\tint_type;\n+      typedef typename traits_type::pos_type \t\tpos_type;\n+      typedef typename traits_type::off_type \t\toff_type;\n+\n+      explicit \n+      stdio_sync_filebuf(std::__c_file* __f) : _M_file(__f) { }\n+\n+    protected:\n+\n+      int_type\n+      syncgetc();\n+\n+      int_type\n+      syncungetc(int_type __c);\n+\n+      int_type\n+      syncputc(int_type __c);\n+\n+      virtual int_type\n+      underflow()\n+      {\n+\tint_type __c = this->syncgetc();\n+\treturn this->syncungetc(__c);\n+      }\n+\n+      virtual int_type\n+      uflow()\n+      { return this->syncgetc(); }\n+\n+      virtual int_type\n+      pbackfail(int_type __c = traits_type::eof())\n+      { return this->syncungetc(__c); }\n+\n+      virtual std::streamsize\n+      xsgetn(char_type* __s, std::streamsize __n);\n+      \n+      virtual std::streamsize\n+      showmanyc()\n+      { \n+#if defined(_GLIBCPP_HAVE_S_ISREG) || defined(_GLIBCPP_HAVE_S_IFREG)\n+\t// Regular files.\n+\tstruct stat __buffer;\n+\tint __ret = fstat(fileno(_M_file), &__buffer);\n+\tif (!__ret && _GLIBCPP_ISREG(__buffer.st_mode))\n+\t  return __buffer.st_size - ftell(_M_file);\n+#endif\n+\treturn 0; \n+      }\n+\n+      virtual int_type\n+      overflow(int_type __c = traits_type::eof())\n+      {\n+\tint_type __ret;\n+\tif (traits_type::eq_int_type(__c, traits_type::eof()))\n+\t  {\n+\t    if (std::fflush(_M_file))\n+\t      __ret = traits_type::eof();\n+\t    else\n+\t      __ret = traits_type::not_eof(__c);\n+\t  }\n+\telse\n+\t  __ret = this->syncputc(__c);\n+\treturn __ret;\n+      }\n+\n+      virtual std::streamsize\n+      xsputn(const char_type* __s, std::streamsize __n);\n+\n+      virtual int\n+      sync()\n+      { return std::fflush(_M_file); }\n+\n+      virtual std::streampos\n+      seekoff(std::streamoff __off, std::ios_base::seekdir __dir,\n+\t      std::ios_base::openmode = std::ios_base::in | std::ios_base::out)\n+      {\n+\tstd::streampos __ret(std::streamoff(-1));\n+\tint __whence;\n+\tif (__dir == std::ios_base::beg)\n+\t  __whence = SEEK_SET;\n+\telse if (__dir == std::ios_base::cur)\n+\t  __whence = SEEK_CUR;\n+\telse\n+\t  __whence = SEEK_END;\n+\t\n+\tif (!fseek(_M_file, __off, __whence))\n+\t  __ret = std::streampos(std::ftell(_M_file));\n+\treturn __ret;\n+      }\n+\n+      virtual std::streampos\n+      seekpos(std::streampos __pos,\n+\t      std::ios_base::openmode __mode =\n+\t      std::ios_base::in | std::ios_base::out)\n+      { return seekoff(std::streamoff(__pos), std::ios_base::beg, __mode); }\n+    };\n+\n+  template<>\n+    inline stdio_sync_filebuf<char>::int_type\n+    stdio_sync_filebuf<char>::syncgetc()\n+    { return std::getc(_M_file); }\n+\n+  template<>\n+    inline stdio_sync_filebuf<char>::int_type\n+    stdio_sync_filebuf<char>::syncungetc(int_type __c)\n+    { return std::ungetc(__c, _M_file); }\n+\n+  template<>\n+    inline stdio_sync_filebuf<char>::int_type\n+    stdio_sync_filebuf<char>::syncputc(int_type __c)\n+    { return std::putc(__c, _M_file); }\n+\n+  template<>\n+    inline std::streamsize\n+    stdio_sync_filebuf<char>::xsgetn(char* __s, std::streamsize __n)\n+    { return std::fread(__s, 1, __n, _M_file); }\n+\n+  template<>\n+    inline std::streamsize\n+    stdio_sync_filebuf<char>::xsputn(const char* __s, std::streamsize __n)\n+    { return std::fwrite(__s, 1, __n, _M_file); }\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<>\n+    inline stdio_sync_filebuf<wchar_t>::int_type\n+    stdio_sync_filebuf<wchar_t>::syncgetc()\n+    { return std::getwc(_M_file); }\n+\n+  template<>\n+    inline stdio_sync_filebuf<wchar_t>::int_type\n+    stdio_sync_filebuf<wchar_t>::syncungetc(int_type __c)\n+    { return std::ungetwc(__c, _M_file); }\n+\n+  template<>\n+    inline stdio_sync_filebuf<wchar_t>::int_type\n+    stdio_sync_filebuf<wchar_t>::syncputc(int_type __c)\n+    { return std::putwc(__c, _M_file); }\n+\n+  template<>\n+    inline std::streamsize\n+    stdio_sync_filebuf<wchar_t>::xsgetn(wchar_t* __s, std::streamsize __n)\n+    {  \n+      std::streamsize __ret = 0;\n+      const int_type __eof = traits_type::eof();\n+      while (__n--)\n+\t{\n+\t  int_type __c = this->syncgetc();\n+\t  if (traits_type::eq_int_type(__c, __eof))\n+\t    break;\n+\t  *__s++ = __c;\n+\t  ++__ret;\n+\t}\n+      return __ret;\n+    }\n+      \n+  template<>\n+    inline std::streamsize\n+    stdio_sync_filebuf<wchar_t>::xsputn(const wchar_t* __s, \n+\t\t\t\t\tstd::streamsize __n)\n+    {\n+      std::streamsize __ret = 0;\n+      const int_type __eof = traits_type::eof();\n+      while (__n--)\n+\t{\n+\t  if (traits_type::eq_int_type(this->syncputc(*__s++), __eof))\n+\t    break;\n+\t  ++__ret;\n+\t}\n+      return __ret;\n+    }\n+#endif\n+\n+#if _GLIBCPP_EXTERN_TEMPLATE\n+  extern template class stdio_sync_filebuf<char>;\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  extern template class stdio_sync_filebuf<wchar_t>;\n+#endif\n+#endif\n+} // namespace __gnu_cxx\n+\n+#endif "}, {"sha": "0de74e6252d213b776352c8fd3434d5b80ab3bcc", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 5, "deletions": 43, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -306,11 +306,13 @@ namespace std\n \n       // [documentation is inherited]\n       virtual int_type\n-      underflow();\n+      underflow()\n+      { return _M_underflow(false); }\n \n       // [documentation is inherited]\n       virtual int_type\n-      uflow();\n+      uflow()\n+      { return _M_underflow(true); }\n \n       // [documentation is inherited]\n       virtual int_type\n@@ -385,8 +387,6 @@ namespace std\n       {\n \tint __ret = 0;\n \tconst bool __testput = this->_M_out_beg < this->_M_out_lim;\n-\t// Sync with stdio.\n-\tconst bool __sync = this->_M_buf_size <= 1;\n \n \t// Make sure that the internal buffer resyncs its idea of\n \t// the file position with the external file.\n@@ -399,7 +399,7 @@ namespace std\n \t    if (traits_type::eq_int_type(_M_overflow(), traits_type::eof()))\n \t      __ret = -1;\n \t    else if (__off)\n-\t      _M_file.seekoff(__off, ios_base::cur, __sync);\n+\t      _M_file.seekoff(__off, ios_base::cur);\n \t  }\n \telse\n \t  _M_file.sync();\n@@ -487,44 +487,6 @@ namespace std\n       }\n     };\n \n-  // Explicit specialization declarations, defined in src/fstream.cc.\n-  template<> \n-    basic_filebuf<char>::int_type \n-    basic_filebuf<char>::_M_underflow(bool __bump);\n-\n-  template<>\n-    basic_filebuf<char>::int_type\n-    basic_filebuf<char>::underflow(); \n-\n-  template<>\n-    basic_filebuf<char>::int_type\n-    basic_filebuf<char>::uflow(); \n-\n- #ifdef _GLIBCPP_USE_WCHAR_T\n-  template<> \n-    basic_filebuf<wchar_t>::int_type \n-    basic_filebuf<wchar_t>::_M_underflow(bool __bump);\n-\n-  template<>\n-    basic_filebuf<wchar_t>::int_type\n-    basic_filebuf<wchar_t>::underflow(); \n-\n-  template<>\n-    basic_filebuf<wchar_t>::int_type\n-    basic_filebuf<wchar_t>::uflow(); \n- #endif\n-\n-  // Generic definitions do nothing.\n-  template <typename _CharT, typename _Traits>\n-    typename basic_filebuf<_CharT, _Traits>::int_type\n-    basic_filebuf<_CharT, _Traits>::underflow() \n-    { return int_type(); }\n-\n-  template <typename _CharT, typename _Traits>\n-    typename basic_filebuf<_CharT, _Traits>::int_type\n-    basic_filebuf<_CharT, _Traits>::uflow() \n-    { return int_type(); }\n-\n   // [27.8.1.5] Template class basic_ifstream\n   /**\n    *  @brief  Controlling input for files."}, {"sha": "a788cb9369bd68004f3f8837143d9172fd64a98d", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -123,7 +123,6 @@ sources = \\\n \tctype.cc \\\n \tdemangle.cc \\\n \text-inst.cc \\\n-\tfstream.cc \\\n \tfstream-inst.cc \\\n \tfunctexcept.cc \\\n \tglobals.cc \\"}, {"sha": "8e01572be71a7be700b31af0af5fe6ac17426310", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -205,7 +205,6 @@ sources = \\\n \tctype.cc \\\n \tdemangle.cc \\\n \text-inst.cc \\\n-\tfstream.cc \\\n \tfstream-inst.cc \\\n \tfunctexcept.cc \\\n \tglobals.cc \\\n@@ -306,9 +305,9 @@ CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n libstdc___la_OBJECTS =  codecvt.lo complex_io.lo concept-inst.lo \\\n-ctype.lo demangle.lo ext-inst.lo fstream.lo fstream-inst.lo \\\n-functexcept.lo globals.lo io-inst.lo ios.lo istream-inst.lo limits.lo \\\n-locale.lo locale-inst.lo localename.lo misc-inst.lo ostream-inst.lo \\\n+ctype.lo demangle.lo ext-inst.lo fstream-inst.lo functexcept.lo \\\n+globals.lo io-inst.lo ios.lo istream-inst.lo limits.lo locale.lo \\\n+locale-inst.lo localename.lo misc-inst.lo ostream-inst.lo \\\n sstream-inst.lo stdexcept.lo stl-inst.lo streambuf-inst.lo \\\n string-inst.lo strstream.lo valarray-inst.lo wstring-inst.lo \\\n codecvt_members.lo collate_members.lo ctype_members.lo \\"}, {"sha": "41ca7702233be192e4cb9f0ede5e8f7e8ca834a6", "filename": "libstdc++-v3/src/fstream.cc", "status": "removed", "additions": 0, "deletions": 218, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5d72baacbe5026ce1eb854d4e2f314d0f852fd/libstdc%2B%2B-v3%2Fsrc%2Ffstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5d72baacbe5026ce1eb854d4e2f314d0f852fd/libstdc%2B%2B-v3%2Fsrc%2Ffstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffstream.cc?ref=6e5d72baacbe5026ce1eb854d4e2f314d0f852fd", "patch": "@@ -1,218 +0,0 @@\n-// File based streams -*- C++ -*-\n-\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n-// Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 27.8  File-based streams\n-//\n-\n-#include <fstream>\n-\n-namespace std \n-{\n-  template<> \n-    basic_filebuf<char>::int_type \n-    basic_filebuf<char>::_M_underflow(bool __bump)\n-    {\n-      int_type __ret = traits_type::eof();\n-      const bool __testin = _M_mode & ios_base::in;\n-      const bool __testout = _M_mode & ios_base::out;\n-      const bool __testsync = _M_buf_size <= 1;\n-\n-      if (__testin)\n-\t{\n-\t  // Check for pback madness, and if so swich back to the\n-\t  // normal buffers and jet outta here before expensive\n-\t  // fileops happen...\n-\t  if (_M_pback_init)\n-\t    _M_destroy_pback();\n-\n-\t  if (_M_in_cur < _M_in_end)\n-\t    {\n-\t      __ret = traits_type::to_int_type(*_M_in_cur);\n-\t      if (__bump)\n-\t\t_M_move_in_cur(1);\n-\t      return __ret;\n-\t    }\n-\n-\t  // Sync internal and external buffers.\n-\t  // NB: __testget -> __testput as _M_buf_unified here.\n-\t  const bool __testget = _M_in_beg < _M_in_cur;\n-\t  if (__testget)\n-\t    {\n-\t      if (__testout)\n-\t\t_M_overflow();\n-\t      else if (_M_in_cur != _M_filepos)\n-\t\t_M_file.seekoff(_M_in_cur - _M_filepos,\n-\t\t\t\tios_base::cur, __testsync, ios_base::in);\n-\t    }\n-\n-\t  if (_M_buf_size)\n-\t    {\n-\t      streamsize __elen = 0;\n-\t      streamsize __ilen = 0;\n-\n-\t      __elen = _M_file.xsgetn(reinterpret_cast<char*>(_M_in_beg), \n-\t\t\t\t      _M_buf_size, __testsync);\n-\t      __ilen = __elen;\n-\n-\t      if (0 < __ilen)\n-\t\t{\n-\t\t  _M_set_determinate(__ilen);\n-\t\t  __ret = traits_type::to_int_type(*_M_in_cur);\n-\t\t  if (__bump)\n-\t\t    _M_move_in_cur(1);\n-\t\t  else if (__testsync)\n-\t\t    {\n-\t\t      // If we are synced with stdio, we have to unget the\n-\t\t      // character we just read so that the file pointer\n-\t\t      // doesn't move.\n-\t\t      _M_file.sys_ungetc(traits_type::to_int_type(*_M_in_cur));\n-\t\t      _M_set_indeterminate();\n-\t\t    }\n-\t\t}\t   \n-\t    }\n-\t}\n-      _M_last_overflowed = false;\t\n-      return __ret;\n-    }\n-\n-  template<>\n-    basic_filebuf<char>::int_type\n-    basic_filebuf<char>::underflow() \n-    { return _M_underflow(false); }\n-\n-  template<>\n-    basic_filebuf<char>::int_type\n-    basic_filebuf<char>::uflow() \n-    { return _M_underflow(true); }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  template<> \n-    basic_filebuf<wchar_t>::int_type \n-    basic_filebuf<wchar_t>::_M_underflow(bool __bump)\n-    {\n-      int_type __ret = traits_type::eof();\n-      const bool __testin = _M_mode & ios_base::in;\n-      const bool __testout = _M_mode & ios_base::out;\n-      const bool __testsync = _M_buf_size <= 1;\n-\n-      if (__testin)\n-\t{\n-\t  // Check for pback madness, and if so swich back to the\n-\t  // normal buffers and jet outta here before expensive\n-\t  // fileops happen...\n-\t  if (_M_pback_init)\n-\t    _M_destroy_pback();\n-\n-\t  if (_M_in_cur < _M_in_end)\n-\t    {\n-\t      __ret = traits_type::to_int_type(*_M_in_cur);\n-\t      if (__bump)\n-\t\t_M_move_in_cur(1);\n-\t      return __ret;\n-\t    }\n-\n-\t  // Sync internal and external buffers.\n-\t  // NB: __testget -> __testput as _M_buf_unified here.\n-\t  const bool __testget = _M_in_beg < _M_in_cur;\n-\t  if (__testget)\n-\t    {\n-\t      if (__testout)\n-\t\t_M_overflow();\n-\t      else if (_M_in_cur != _M_filepos)\n-\t\t_M_file.seekoff(_M_in_cur - _M_filepos,\n-\t\t\t\tios_base::cur, __testsync, ios_base::in);\n-\t    }\n-\n-\t  if (_M_buf_size)\n-\t    {\n-\t      streamsize __elen = 0;\n-\t      streamsize __ilen = 0;\n-\t      const locale __loc = this->getloc();\n-\t      const __codecvt_type& __cvt = use_facet<__codecvt_type>(__loc);\n-\t      if (__cvt.always_noconv())\n-\t\t{\n-\t\t  __elen = _M_file.xsgetn(reinterpret_cast<char*>(_M_in_beg), \n-\t\t\t\t\t  _M_buf_size, __testsync);\n-\t\t  __ilen = __elen;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  char* __buf = static_cast<char*>(__builtin_alloca(_M_buf_size));\n-\t\t  __elen = _M_file.xsgetn(__buf, _M_buf_size, __testsync);\n-\t\t  \n-\t\t  const char* __eend;\n-\t\t  char_type* __iend;\n-\t\t  codecvt_base::result __r;\n-\t\t  __r = __cvt.in(_M_state_cur, __buf, __buf + __elen, __eend, \n-\t\t\t\t _M_in_beg, _M_in_beg + _M_buf_size, __iend);\n-\t\t  if (__r == codecvt_base::ok)\n-\t\t    __ilen = __iend - _M_in_beg;\n-\t\t  else \n-\t\t    {\n-\t\t      // Unwind.\n-\t\t      __ilen = 0;\n-\t\t      _M_file.seekoff(-__elen, ios_base::cur, __testsync, \n-\t\t\t\t      ios_base::in);\n-\t\t    }\n-\t\t}\n-\n-\t      if (0 < __ilen)\n-\t\t{\n-\t\t  _M_set_determinate(__ilen);\n-\t\t  __ret = traits_type::to_int_type(*_M_in_cur);\n-\t\t  if (__bump)\n-\t\t    _M_move_in_cur(1);\n-\t\t  else if (__testsync)\n-\t\t    {\n-\t\t      // If we are synced with stdio, we have to unget the\n-\t\t      // character we just read so that the file pointer\n-\t\t      // doesn't move.\n-\t\t      _M_file.sys_ungetc(traits_type::to_int_type(*_M_in_cur));\n-\t\t      _M_set_indeterminate();\n-\t\t    }\n-\t\t}\t   \n-\t    }\n-\t}\n-      _M_last_overflowed = false;\t\n-      return __ret;\n-    }\n-\n-  template<>\n-    basic_filebuf<wchar_t>::int_type\n-    basic_filebuf<wchar_t>::underflow() \n-    { return _M_underflow(false); }\n-\n-  template<>\n-    basic_filebuf<wchar_t>::int_type\n-    basic_filebuf<wchar_t>::uflow() \n-    { return _M_underflow(true); }\n-#endif\n-} // namespace std"}, {"sha": "a0220f1cd8e17b099844a30f0133f22dbfe4d4f5", "filename": "libstdc++-v3/src/globals.cc", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -32,6 +32,7 @@\n #include <ostream>\n #include <locale>\n #include <ext/stdio_filebuf.h>\n+#include <ext/stdio_sync_filebuf.h>\n \n // On AIX, and perhaps other systems, library initialization order is\n // not guaranteed.  For example, the static initializers for the main\n@@ -78,16 +79,27 @@ namespace __gnu_cxx\n {\n   using namespace std;\n \n-  // Because <iostream> declares the standard streams to be [io]stream\n-  // types instead of say [io]fstream types, it is also necessary to\n-  // allocate the actual file buffers in this file.\n+  // We use different stream buffer types depending on whether\n+  // ios_base::sync_with_stdio(false) has been called.\n+  typedef char fake_stdiobuf[sizeof(stdio_sync_filebuf<char>)]\n+  __attribute__ ((aligned(__alignof__(stdio_sync_filebuf<char>))));\n+  fake_stdiobuf buf_cout_sync;\n+  fake_stdiobuf buf_cin_sync;\n+  fake_stdiobuf buf_cerr_sync;\n+\n   typedef char fake_filebuf[sizeof(stdio_filebuf<char>)]\n   __attribute__ ((aligned(__alignof__(stdio_filebuf<char>))));\n   fake_filebuf buf_cout;\n   fake_filebuf buf_cin;\n   fake_filebuf buf_cerr;\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n+  typedef char fake_wstdiobuf[sizeof(stdio_sync_filebuf<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(stdio_sync_filebuf<wchar_t>))));\n+  fake_wstdiobuf buf_wcout_sync;\n+  fake_wstdiobuf buf_wcin_sync;\n+  fake_wstdiobuf buf_wcerr_sync;\n+\n   typedef char fake_wfilebuf[sizeof(stdio_filebuf<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(stdio_filebuf<wchar_t>))));\n   fake_wfilebuf buf_wcout;"}, {"sha": "ee4fd24cc54a259bafb65637b500ed39ad9d9c9e", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 61, "deletions": 57, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -38,15 +38,24 @@\n #include <fstream>\n #include <bits/atomicity.h>\n #include <ext/stdio_filebuf.h>\n+#include <ext/stdio_sync_filebuf.h>\n \n namespace __gnu_cxx\n {\n   // Extern declarations for global objects in src/globals.cc.\n+  extern stdio_sync_filebuf<char> buf_cout_sync;\n+  extern stdio_sync_filebuf<char> buf_cin_sync;\n+  extern stdio_sync_filebuf<char> buf_cerr_sync;\n+\n   extern stdio_filebuf<char> buf_cout;\n   extern stdio_filebuf<char> buf_cin;\n   extern stdio_filebuf<char> buf_cerr;\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n+  extern stdio_sync_filebuf<wchar_t> buf_wcout_sync;\n+  extern stdio_sync_filebuf<wchar_t> buf_wcin_sync;\n+  extern stdio_sync_filebuf<wchar_t> buf_wcerr_sync;\n+\n   extern stdio_filebuf<wchar_t> buf_wcout;\n   extern stdio_filebuf<wchar_t> buf_wcin;\n   extern stdio_filebuf<wchar_t> buf_wcerr;\n@@ -153,76 +162,39 @@ namespace std\n   ios_base::failure::what() const throw()\n   { return _M_name; }\n \n-  void\n-  ios_base::Init::_S_create_buffers(bool __sync)\n-  {\n-    size_t __out_size = __sync ? 0 : static_cast<size_t>(BUFSIZ);\n-    size_t __in_size = __sync ? 1 : static_cast<size_t>(BUFSIZ);\n-\n-    // Create stream buffers for the standard streams and use those\n-    // buffers without destroying and recreating the streams.\n-    new (&buf_cout) stdio_filebuf<char>(stdout, ios_base::out, __out_size);\n-    new (&buf_cin) stdio_filebuf<char>(stdin, ios_base::in, __in_size);\n-    new (&buf_cerr) stdio_filebuf<char>(stderr, ios_base::out, __out_size);\n-    cout.rdbuf(&buf_cout);\n-    cin.rdbuf(&buf_cin);\n-    cerr.rdbuf(&buf_cerr);\n-    clog.rdbuf(&buf_cerr);\n-    \n-#ifdef _GLIBCPP_USE_WCHAR_T\n-    new (&buf_wcout) stdio_filebuf<wchar_t>(stdout, ios_base::out, __out_size);\n-    new (&buf_wcin) stdio_filebuf<wchar_t>(stdin, ios_base::in, __in_size);\n-    new (&buf_wcerr) stdio_filebuf<wchar_t>(stderr, ios_base::out, __out_size);\n-    wcout.rdbuf(&buf_wcout);\n-    wcin.rdbuf(&buf_wcin);\n-    wcerr.rdbuf(&buf_wcerr);\n-    wclog.rdbuf(&buf_wcerr);\n-#endif\n-  }\n-\n-  void\n-  ios_base::Init::_S_destroy_buffers()\n-  {\n-    // Explicitly call dtors to free any memory that is dynamically\n-    // allocated by filebuf ctor or member functions, but don't\n-    // deallocate all memory by calling operator delete.\n-    buf_cout.~stdio_filebuf();\n-    buf_cin.~stdio_filebuf();\n-    buf_cerr.~stdio_filebuf();\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-    buf_wcout.~stdio_filebuf();\n-    buf_wcin.~stdio_filebuf();\n-    buf_wcerr.~stdio_filebuf();\n-#endif\n-  }\n-\n   ios_base::Init::Init()\n   {\n     if (_S_ios_base_init == 0)\n       {\n \t// Standard streams default to synced with \"C\" operations.\n \tios_base::Init::_S_synced_with_stdio = true;\n \n-\t// The standard streams are constructed once only and never destroyed.\n-\t// The stream buffers are set in _S_create_buffers below.\n-\tnew (&cout) ostream(NULL);\n-\tnew (&cin) istream(NULL);\n-\tnew (&cerr) ostream(NULL);\n-\tnew (&clog) ostream(NULL);\n+\tnew (&buf_cout_sync) stdio_sync_filebuf<char>(stdout);\n+\tnew (&buf_cin_sync) stdio_sync_filebuf<char>(stdin);\n+\tnew (&buf_cerr_sync) stdio_sync_filebuf<char>(stderr);\n+\n+\t// The standard streams are constructed once only and never\n+\t// destroyed.\n+\tnew (&cout) ostream(&buf_cout_sync);\n+\tnew (&cin) istream(&buf_cin_sync);\n+\tnew (&cerr) ostream(&buf_cerr_sync);\n+\tnew (&clog) ostream(&buf_cerr_sync);\n \tcin.tie(&cout);\n \tcerr.flags(ios_base::unitbuf);\n \t\n #ifdef _GLIBCPP_USE_WCHAR_T\n-\tnew (&wcout) wostream(NULL);\n-\tnew (&wcin) wistream(NULL);\n-\tnew (&wcerr) wostream(NULL);\n-\tnew (&wclog) wostream(NULL);\n+\tnew (&buf_wcout_sync) stdio_sync_filebuf<wchar_t>(stdout);\n+\tnew (&buf_wcin_sync) stdio_sync_filebuf<wchar_t>(stdin);\n+\tnew (&buf_wcerr_sync) stdio_sync_filebuf<wchar_t>(stderr);\n+\n+\tnew (&wcout) wostream(&buf_wcout_sync);\n+\tnew (&wcin) wistream(&buf_wcin_sync);\n+\tnew (&wcerr) wostream(&buf_wcerr_sync);\n+\tnew (&wclog) wostream(&buf_wcerr_sync);\n \twcin.tie(&wcout);\n \twcerr.flags(ios_base::unitbuf);\n #endif\n \n-\t_S_create_buffers(ios_base::Init::_S_synced_with_stdio);\n \t_S_ios_base_init = 1;\n       }\n     ++_S_ios_base_init;\n@@ -389,8 +361,40 @@ namespace std\n     if (!__sync && __ret)\n       {\n \tios_base::Init::_S_synced_with_stdio = __sync;\n-\tios_base::Init::_S_destroy_buffers();\n-\tios_base::Init::_S_create_buffers(__sync);\n+\n+\t// Explicitly call dtors to free any memory that is\n+\t// dynamically allocated by filebuf ctor or member functions,\n+\t// but don't deallocate all memory by calling operator delete.\n+\tbuf_cout_sync.~stdio_sync_filebuf<char>();\n+\tbuf_cin_sync.~stdio_sync_filebuf<char>();\n+\tbuf_cerr_sync.~stdio_sync_filebuf<char>();\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+\tbuf_wcout_sync.~stdio_sync_filebuf<wchar_t>();\n+\tbuf_wcin_sync.~stdio_sync_filebuf<wchar_t>();\n+\tbuf_wcerr_sync.~stdio_sync_filebuf<wchar_t>();\n+#endif\n+\n+\t// Create stream buffers for the standard streams and use\n+\t// those buffers without destroying and recreating the\n+\t// streams.\n+\tnew (&buf_cout) stdio_filebuf<char>(stdout, ios_base::out);\n+\tnew (&buf_cin) stdio_filebuf<char>(stdin, ios_base::in);\n+\tnew (&buf_cerr) stdio_filebuf<char>(stderr, ios_base::out);\n+\tcout.rdbuf(&buf_cout);\n+\tcin.rdbuf(&buf_cin);\n+\tcerr.rdbuf(&buf_cerr);\n+\tclog.rdbuf(&buf_cerr);\n+    \n+#ifdef _GLIBCPP_USE_WCHAR_T\n+\tnew (&buf_wcout) stdio_filebuf<wchar_t>(stdout, ios_base::out);\n+\tnew (&buf_wcin) stdio_filebuf<wchar_t>(stdin, ios_base::in);\n+\tnew (&buf_wcerr) stdio_filebuf<wchar_t>(stderr, ios_base::out);\n+\twcout.rdbuf(&buf_wcout);\n+\twcin.rdbuf(&buf_wcin);\n+\twcerr.rdbuf(&buf_wcerr);\n+\twclog.rdbuf(&buf_wcerr);\n+#endif\n       }\n     return __ret; \n   }"}, {"sha": "ab5979759001d85f66e6f69018ba77eb6aec971f", "filename": "libstdc++-v3/src/misc-inst.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -38,6 +38,7 @@\n #include <algorithm>\n #include <vector>\n #include <bits/atomicity.h>\n+#include <ext/stdio_sync_filebuf.h>\n \n namespace std\n {\n@@ -73,9 +74,10 @@ namespace std\n #endif\n } // namespace std\n \n-#ifdef _GLIBCPP_NEED_GENERIC_MUTEX\n+\n namespace __gnu_cxx\n {\n+#ifdef _GLIBCPP_NEED_GENERIC_MUTEX\n #ifdef __GTHREAD_MUTEX_INIT\n   __gthread_mutex_t _Atomic_add_mutex = __GTHREAD_MUTEX_INIT;\n #else\n@@ -87,6 +89,12 @@ namespace __gnu_cxx\n     __GTHREAD_MUTEX_INIT_FUNCTION (&_Atomic_add_mutex);\n   }\n #endif\n-} // namespace __gnu_cxx\n #endif // _GLIBCPP_NEED_GLOBAL_MUTEX\n \n+  template class stdio_sync_filebuf<char>;\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template class stdio_sync_filebuf<wchar_t>;\n+#endif\n+} // namespace __gnu_cxx\n+\n+"}, {"sha": "05fbd23a573874c47203333b8b005cee5abd6999", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetn/char/1.cc", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -76,28 +76,31 @@ void test05()\n   fb_01.open(name_01, ios_base::in);\n   fb_02.open(name_02, ios_base::out | ios_base::trunc);\n   fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc); \n-  strmof_1 = fb_01.in_avail();\n-  strmof_2 = fb_02.in_avail();\n-  strmof_1 = fb_03.in_avail(); \n \n+  strmof_1 = fb_01.in_avail();\n   int_type c1 = fb_01.sbumpc();\n-  int_type c2 = fb_02.sbumpc();\n   int_type c3 = fb_01.sbumpc();\n-  int_type c4 = fb_02.sbumpc();\n-  int_type c5 = fb_03.sbumpc();\n-\n   int_type c6 = fb_01.sgetc();\n-  int_type c7 = fb_02.sgetc();\n   int_type c8 = fb_01.sgetc();\n+\n+  strmof_2 = fb_02.in_avail();\n+  int_type c2 = fb_02.sbumpc();\n+  int_type c4 = fb_02.sbumpc();\n+  int_type c7 = fb_02.sgetc();\n   int_type c9 = fb_02.sgetc();\n+\n+  strmof_1 = fb_03.in_avail(); \n+  int_type c5 = fb_03.sbumpc();\n   c5 = fb_03.sgetc();\n \n   // int_type snextc()\n   // calls sbumpc and if sbumpc != eof, return sgetc\n   c6 = fb_01.snextc();\n-  c7 = fb_02.snextc();\n   c6 = fb_01.snextc();\n+\n   c7 = fb_02.snextc();\n+  c7 = fb_02.snextc();\n+\n   c5 = fb_03.snextc();\n \n   // streamsize sgetn(char_type *s, streamsize n)"}, {"sha": "8dd24343f2e9d8a8cff43623b3f75478e0f01dd4", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/underflow/10096.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2F10096.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2F10096.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2F10096.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,70 @@\n+// 2003-05-03  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+class MyTraits : public std::char_traits<char>\n+{\n+};\n+\n+// libstdc++/10096\n+void test01()\n+{\n+  using namespace std;\n+\n+  const char* name = \"filebuf_virtuals-1.txt\";\n+\n+  string str;\n+  filebuf fb1;\n+  fb1.open(name, ios_base::in);\n+  \n+  filebuf::int_type c1;\n+  while ((c1 = fb1.sbumpc()) != filebuf::traits_type::eof())\n+    str.push_back(filebuf::traits_type::to_char_type(c1));\n+  fb1.close();\n+\n+  basic_filebuf<char, MyTraits> fb;\n+  VERIFY( fb.sgetc() == MyTraits::eof() );\n+\n+  fb.open(name, ios_base::in);\n+  VERIFY( fb.is_open() );\n+\n+  for (string::iterator i = str.begin(); i != str.end(); ++i)\n+    {\n+      MyTraits::int_type c2 = fb.sbumpc();\n+      VERIFY( c2 != MyTraits::eof() );\n+      VERIFY( c2 == MyTraits::to_int_type(*i) );\n+    }\n+\n+  VERIFY( fb.sgetc() == MyTraits::eof() );\n+  fb.close();\n+  VERIFY( !fb.is_open() );\n+  VERIFY( fb.sgetc() == MyTraits::eof() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "40e51371c9c9c0fb01d78963d554cda25e14f089", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/underflow/char/1.cc", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F1.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,84 @@\n+// 2003-05-03  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// Check that basic_filebuf::underflow() handles\n+// codecvt::always_noconv() == false and codecvt::in() == noconv.\n+class NoconvCvt : public std::codecvt<char, char, std::mbstate_t>\n+{\n+protected:\n+  virtual bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  virtual result\n+  do_in(state_type&, const char* from, const char*, const char*& from_next,\n+\tchar* to, char*, char*& to_next)\n+  {\n+    from_next = from;\n+    to_next = to;\n+    return noconv;\n+  }\n+};\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test = true;\n+  const char* name = \"filebuf_virtuals-1.txt\";\n+\n+  string str;\n+  filebuf fb;\n+  filebuf::int_type c1;\n+\n+  if (fb.open(name, ios_base::in))\n+    {  \n+      while ((c1 = fb.sbumpc()) != EOF)\n+\tstr.push_back(filebuf::traits_type::to_char_type(c1));\n+      fb.close();\n+    }\n+\n+  locale loc(locale::classic(), new NoconvCvt);\n+  fb.pubimbue(loc);\n+\n+  if (fb.open(name, ios_base::in))\n+    {\n+      for (string::iterator i = str.begin(); i != str.end(); ++i)\n+\t{\n+\t  c1 = fb.sbumpc();\n+\t  VERIFY( c1 != filebuf::traits_type::eof() );\n+\t  VERIFY( c1 == filebuf::traits_type::to_int_type(*i) );\n+\t}\n+      VERIFY( fb.sgetc() == filebuf::traits_type::eof() );\n+      fb.close();\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0e4c077bc21470420ec2479ce37dd79c3186324c", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/underflow/char/9027.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F9027.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F9027.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F9027.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,86 @@\n+// 2003-05-03  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <cctype>\n+#include <testsuite_hooks.h>\n+\n+class Cvt_to_upper : public std::codecvt<char, char, std::mbstate_t>\n+{\n+  typedef std::codecvt<char, char, std::mbstate_t> Base;\n+\n+public:\n+  explicit Cvt_to_upper(std::size_t refs = 0)\n+  : Base(refs)\n+  { }\n+\n+protected:\n+  virtual result\n+  do_in(state_type&,\n+\tconst extern_type* from, const extern_type* from_end,\n+\tconst extern_type*& from_next,\n+\tintern_type* to, intern_type* to_end,\n+\tintern_type*& to_next) const\n+  {\n+    while (from < from_end && to < to_end)\n+      *to++ = std::toupper(*from++);\n+    \n+    to_next = to;\n+    from_next = from;\n+    return from == from_end ? ok : partial;\n+  }\n+\n+  virtual bool\n+  do_always_noconv() const throw()\n+  {\n+    return false;\n+  }\n+};\n+\n+// libstdc++/9027\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  const char* name = \"filebuf_virtuals-1.txt\";\n+  locale loc (locale::classic(), new Cvt_to_upper);\t\n+\n+  filebuf fbin;\n+  fbin.pubimbue(loc);\n+  fbin.open(name, ios_base::in);\n+\n+  int c;\n+  while ((c = fbin.sbumpc()) != EOF)\n+    {\n+      VERIFY( !islower(c) );\n+    }\n+  \n+  fbin.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a764bb2b5dee5edc0bcc9417f22e894354ee52c4", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/underflow/wchar_t/9520.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F9520.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F9520.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F9520.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,60 @@\n+// 2003-05-03  Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <testsuite_hooks.h>\n+#include <fstream>\n+#include <cstdio>\n+\n+// libstdc++/9520\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  const char* name = \"tmp_9520\";\n+\n+  FILE* file = fopen(name, \"w\");\n+  for (int i = 1; i < 256; ++i)\n+    putc(static_cast<unsigned char>(i), file);\n+  fclose(file);\n+\n+  locale loc (__gnu_cxx_test::try_named_locale(\"de_DE.ISO-8859-15@euro\"));\n+  wchar_t buf[1];\n+  wfilebuf fb;\n+  fb.pubimbue(loc);\n+  fb.pubsetbuf(buf, 1);\n+  fb.open(name, ios_base::in);\n+\n+  for (int j = 1; j < 256; ++j)\n+    {\n+      wfilebuf::int_type c1 = fb.sgetc();\n+      VERIFY( c1 != wfilebuf::traits_type::eof() );\n+      wfilebuf::int_type c2 = fb.sbumpc();\n+      VERIFY( c1 == c2 );\n+    }\n+\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();  \n+  return 0;\n+}"}, {"sha": "4990a58857dda59db4469cc044a29156c090098c", "filename": "libstdc++-v3/testsuite/27_io/objects/char/10.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F10.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,73 @@\n+// 2003-05-01  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+ \n+#include <iostream>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+void test10()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  const char* name = \"filebuf_virtuals-1.txt\";\n+\n+  FILE* ret = freopen(name, \"r\", stdin);\n+  VERIFY( ret != NULL );\n+\n+  streampos p1 = cin.tellg();\n+  VERIFY( p1 != streampos(-1) );\n+  VERIFY( streamoff(p1) == 0 );\n+\n+  cin.seekg(0, ios::end);\n+  VERIFY( cin.good() );\n+\n+  streampos p2 = cin.tellg();\n+  VERIFY( p2 != streampos(-1) );\n+  VERIFY( p2 != p1 );\n+  VERIFY( streamoff(p2) == ftell(stdin) );\n+\n+  cin.seekg(p1);\n+  VERIFY( cin.good() );\n+\n+  streamoff n = p2 - p1;\n+  VERIFY( n > 0 );\n+\t\n+  for (streamoff i = 0; i < n; ++i)\n+    {\n+      streampos p3 = cin.tellg();\n+      VERIFY( streamoff(p3) == i );\n+      VERIFY( ftell(stdin) == i );\n+      cin.get();\n+      VERIFY( cin.good() );\n+    }\n+\n+  streampos p4 = cin.tellg();\n+  VERIFY( streamoff(p4) == n );\n+  VERIFY( ftell(stdin) == n );\n+  cin.get();\n+  VERIFY( cin.eof() );\n+}\n+\n+int main()\n+{\n+  test10();\n+  return 0;\n+}"}, {"sha": "faa05e65ebfeaadc3915599bd77ec8b004bd259e", "filename": "libstdc++-v3/testsuite/27_io/objects/char/9.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,47 @@\n+// 2003-05-01  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+ \n+#include <iostream>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+void test09()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  const char* name = \"tmp_09\";\n+\n+  FILE* fout = fopen(name, \"w\");\n+  fputs(\"abc\\n\", fout);\n+  fclose(fout);\n+\n+  freopen(name, \"r\", stdin);\n+ \n+  // The number of unread characters should be 4 (a, b, c, \\\\n)\n+  VERIFY( 4 == std::cin.rdbuf()->in_avail() );\n+}\n+\n+int \n+main()\n+{\n+  test09();\n+  return 0;\n+}"}, {"sha": "d404cd0da0a99a3d522c02584bbd10e202ca3e31", "filename": "libstdc++-v3/testsuite/27_io/objects/char/9661-1.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-1.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,85 @@\n+// 2003-04-30  Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <testsuite_hooks.h>\n+#include <cstdio>\n+#include <iostream>\n+#include <unistd.h>\n+#include <signal.h>\n+#include <fcntl.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+\n+// Check that cin.rdbuf()->sputbackc() puts characters back to stdin.\n+// If cin.rdbuf() is a filebuf, this succeeds when stdin is a regular\n+// file, but fails otherwise, hence the named fifo.\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+\n+  const char* name = \"tmp_fifo5\";\n+\n+  signal(SIGPIPE, SIG_IGN);\n+\n+  unlink(name);  \n+  mkfifo(name, S_IRWXU);\n+  \n+  int child = fork();\n+  VERIFY( child != -1 );\n+\n+  if (child == 0)\n+    {\n+      sleep(1);\n+      FILE* file = fopen(name, \"w\");\n+      fputs(\"Whatever\\n\", file);\n+      fflush(file);\n+      sleep(2);\n+      fclose(file);\n+      exit(0);\n+    }\n+  \n+  freopen(name, \"r\", stdin);\n+  sleep(2);\n+\n+  int c1 = fgetc(stdin);\n+  VERIFY( c1 != EOF );\n+  int c2 = cin.rdbuf()->sputbackc('a');\n+  VERIFY( c2 != EOF );\n+  VERIFY( c2 == 'a' );\n+  \n+  int c3 = fgetc(stdin);\n+  VERIFY( c3 != EOF );\n+  VERIFY( c3 == c2 );\n+  int c4 = ungetc('b', stdin);\n+  VERIFY( c4 != EOF );\n+  VERIFY( c4 == 'b' );\n+  \n+  int c5 = cin.rdbuf()->sgetc();\n+  VERIFY( c5 != EOF );\n+  VERIFY( c5 == c4 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6b617463608b5a91e86d022865742a94c95ccc50", "filename": "libstdc++-v3/testsuite/27_io/objects/char/9661-2_xin.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-2_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-2_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-2_xin.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,47 @@\n+// 2003-04-30  Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <testsuite_hooks.h>\n+#include <cstdio>\n+#include <iostream>\n+\n+void test02()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+\n+  int c1 = fgetc(stdin);\n+  int c2 = cin.rdbuf()->sputbackc(c1);\n+  VERIFY( c2 == c1 );\n+  \n+  int c3 = fgetc(stdin);\n+  VERIFY( c3 == c1 );\n+  ungetc(c3, stdin);\n+  \n+  int c4 = cin.rdbuf()->sgetc();\n+  VERIFY( c4 == c3 );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "ad9013028f5e96597d5d28bd80bc857ec609c14b", "filename": "libstdc++-v3/testsuite/27_io/objects/char/9661-2_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-2_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-2_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-2_xin.in?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1 @@\n+For what you dream of"}, {"sha": "c766cd6fa5b990a6b55b3272a836fe7a7f97aa62", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F1.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -1,4 +1,4 @@\n-// 2000-08-02 bkoz\n+// 2003-05-01 Petur Runolfsson  <peturr02@ru.is>\n \n // Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n //"}, {"sha": "f0a7868ba4f43bd582e2d078ccedcbf310f76dd9", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/10.cc", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F10.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,121 @@\n+// 2003-05-01  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <iostream>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+// Test handling of UTF-8 in wcin and wcout\n+void test10()\n+{\n+  using namespace std;\n+  \n+  bool test = true;\n+  const char* name = \"tmp_10\";\n+\n+  locale loc(__gnu_cxx_test::try_named_locale(\"se_NO.UTF-8\"));\n+  locale::global(loc);\n+  wcin.imbue(loc);\n+  wcout.imbue(loc);\n+\n+  const char* e_lit =\n+    \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n+    \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\"\n+    \"'()*+,-./0123456789:;<=>?@}~\\x7f\\xc2\\x80\\xc2\\x81\\xc2\\x82\\xc2\"\n+    \"\\x83\\xc2\\x84\\xc2\\x85\\xc2\\x86\\xc2\\x87\\xc2\\x88\\xc2\\x89\\xc2\\x8a\"\n+    \"\\xc2\\x8b\\xc2\\x8c\\xc2\\x8d\\xc2\\x8e\\xc2\\x8f\\xc2\\x90\\xc2\\x91\\xc2\"\n+    \"\\x92\\xc2\\x93\\xc2\\x94\\xc2\\x95\\xc2\\x96\\xc2\\x97\\xc2\\x98\\xc2\\x99\"\n+    \"\\xc2\\x9a\\xc2\\x9b\\xc2\\x9c\\xc3\\xba\\xc3\\xbb\\xc3\\xbc\\xc3\\xbd\\xc3\"\n+    \"\\xbe\\xc3\\xbf\\xc4\\x80\\xc4\\x81\\xc4\\x82\\xc4\\x83\\xc4\\x84\\xc4\\x85\"\n+    \"\\xc4\\x86\\xc4\\x87\\xc4\\x88\\xc4\\x89\\xc4\\x8a\\xc4\\x8b\\xc4\\x8c\\xc4\"\n+    \"\\x8d\\xc4\\x8e\\xc4\\x8f\\xc4\\x90\\xc4\\x91\\xc4\\x92\\xc4\\x93\\xc4\\x94\"\n+    \"\\xc4\\x95\\xc4\\x96\\xc4\\x97\\xc4\\x98\\xc4\\x99\\xdf\\xb8\\xdf\\xb9\\xdf\"\n+    \"\\xba\\xdf\\xbb\\xdf\\xbc\\xdf\\xbd\\xdf\\xbe\\xdf\\xbf\\xe0\\xa0\\x80\\xe0\"\n+    \"\\xa0\\x81\\xe0\\xa0\\x82\\xe0\\xa0\\x83\\xe0\\xa0\\x84\\xe0\\xa0\\x85\\xe0\"\n+    \"\\xa0\\x86\\xe0\\xa0\\x87\\xe0\\xa0\\x88\\xe0\\xa0\\x89\\xe0\\xa0\\x8a\\xe0\"\n+    \"\\xa0\\x8b\\xe0\\xa0\\x8c\\xe0\\xa0\\x8d\\xe0\\xa0\\x8e\\xe0\\xa0\\x8f\\xe0\"\n+    \"\\xa0\\x90\\xe0\\xa0\\x91\\xe0\\xa0\\x92\\xe0\\xa0\\x93\\xe0\\xa0\\x94\\xe0\"\n+    \"\\xa0\\x95\\xe0\\xa0\\x96\\xe0\\xa0\\x97\\x1\\x2\\x4\\x8\\x10\\x20@\\xc2\\x80\"\n+    \"\\xc4\\x80\\xc8\\x80\\xd0\\x80\\xe0\\xa0\\x80\\xe1\\x80\\x80\\xe2\\x80\\x80\"\n+    \"\\xe4\\x80\\x80\\xe8\\x80\\x80\\xf0\\x90\\x80\\x80\\xf0\\xa0\\x80\\x80\\xf1\"\n+    \"\\x80\\x80\\x80\\xf2\\x80\\x80\\x80\\xf4\\x80\\x80\\x80\\xf8\\x88\\x80\\x80\"\n+    \"\\x80\\xf8\\x90\\x80\\x80\\x80\\xf8\\xa0\\x80\\x80\\x80\\xf9\\x80\\x80\\x80\"\n+    \"\\x80\\xfa\\x80\\x80\\x80\\x80\\xfc\\x84\\x80\\x80\\x80\\x80\\xfc\\x88\\x80\"\n+    \"\\x80\\x80\\x80\\xfc\\x90\\x80\\x80\\x80\\x80\\xfc\\xa0\\x80\\x80\\x80\\x80\"\n+    \"\\xfd\\x80\\x80\\x80\\x80\\x80\";\n+  size_t e_size = strlen(e_lit);\n+\n+  const wchar_t i_lit[] = {\n+    0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc,\n+    0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n+    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, L'!',\n+    L'\"', L'#', L'$', L'%', L'&', L'\\'', L'(', L')', L'*', L'+',\n+    L',', L'-', L'.', L'/', L'0', L'1', L'2', L'3', L'4', L'5',\n+    L'6', L'7', L'8', L'9', L':', L';', L'<', L'=', L'>', L'?',\n+    L'@', L'}', L'~', 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85,\n+    0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,\n+    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,\n+    0x9a, 0x9b, 0x9c, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x100,\n+    0x101, 0x102, 0x103, 0x104, 0x105, 0x106, 0x107, 0x108, 0x109,\n+    0x10a, 0x10b, 0x10c, 0x10d, 0x10e, 0x10f, 0x110, 0x111, 0x112,\n+    0x113, 0x114, 0x115, 0x116, 0x117, 0x118, 0x119, 0x7f8, 0x7f9,\n+    0x7fa, 0x7fb, 0x7fc, 0x7fd, 0x7fe, 0x7ff, 0x800, 0x801, 0x802,\n+    0x803, 0x804, 0x805, 0x806, 0x807, 0x808, 0x809, 0x80a, 0x80b,\n+    0x80c, 0x80d, 0x80e, 0x80f, 0x810, 0x811, 0x812, 0x813, 0x814,\n+    0x815, 0x816, 0x817, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, L'@',\n+    0x80, 0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000, 0x8000,\n+    0x10000, 0x20000, 0x40000, 0x80000, 0x100000, 0x200000, 0x400000,\n+    0x800000, 0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000,\n+    0x20000000, 0x40000000, 0x0\n+  };\n+  size_t i_size = wcslen(i_lit);\n+\n+  freopen(name, \"w\", stdout);\n+  \n+  wcout.write(i_lit, i_size);\n+  wcout.flush();\n+  VERIFY( wcout.good() );\n+\n+  FILE* file = fopen(name, \"r\");\n+  char* buf = new char[e_size + 10];\n+  size_t n = fread(buf, 1, e_size + 10, file);\n+  VERIFY( n == e_size );\n+  VERIFY( !memcmp(buf, e_lit, e_size) );\n+  delete[] buf;\n+  fclose(file);\n+\n+  freopen(name, \"r\", stdin);\n+  \n+  wchar_t* wbuf = new wchar_t[i_size + 10];\n+  wcin.read(wbuf, i_size + 10);\n+  n = wcin.gcount();\n+  VERIFY( n == i_size );\n+  VERIFY( !wmemcmp(wbuf, i_lit, i_size) );\n+  VERIFY( wcin.eof() );\n+  VERIFY( wcin.fail() );\n+  VERIFY( !wcin.bad() );\n+  delete[] wbuf;\n+}\n+\n+int main()\n+{\n+  test10();\n+  return 0;\n+}"}, {"sha": "ed8593242b0ef6b4e249b5c0d6b0340aff806ec3", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/2.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F2.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,47 @@\n+// 2003-05-01 Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+ \n+#include <iostream>\n+\n+// Interactive test, to be exercised as follows:\n+// assign stderr to stdout in shell command line,\n+// pipe stdout to cat process and/or redirect stdout to file.\n+// a.out >& output\n+// \"hello fine world\\n\" should be written to stdout, and output, in\n+// proper order.  This is a version of the scott snyder test taken\n+// from: http://gcc.gnu.org/ml/libstdc++/1999-q4/msg00108.html\n+void test04()\n+{\n+  using namespace std;\n+\n+  wcout << L\"hello \";\n+  wcout.flush();\n+  wcerr << L\"fine \";\n+  wcerr.flush();\n+  wcout << L\"world\" << endl;\n+  wcout.flush();\n+}\n+\n+int \n+main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "58b1de6db24dc44da4186eb2f19ae7b18f1f93c2", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/2523-1_xin.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F2523-1_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F2523-1_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F2523-1_xin.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,89 @@\n+// 2003-05-01 Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// Include all the headers except for iostream.\n+#include <algorithm>\n+#include <bitset>\n+#include <complex>\n+#include <deque>\n+#include <exception>\n+#include <fstream>\n+#include <functional>\n+#include <iomanip>\n+#include <ios>\n+#include <iosfwd>\n+#include <istream>\n+#include <iterator>\n+#include <limits>\n+#include <list>\n+#include <locale>\n+#include <map>\n+#include <memory>\n+#include <new>\n+#include <numeric>\n+#include <ostream>\n+#include <queue>\n+#include <set>\n+#include <sstream>\n+#include <stack>\n+#include <stdexcept>\n+#include <streambuf>\n+#include <string>\n+#include <typeinfo>\n+#include <utility>\n+#include <valarray>\n+#include <vector>\n+#include <cassert>\n+#include <cctype>\n+#include <cerrno>\n+#include <cfloat>\n+#include <ciso646>\n+#include <climits>\n+#include <clocale>\n+#include <cmath>\n+#include <csetjmp>\n+#include <csignal>\n+#include <cstdarg>\n+#include <cstddef>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <cstring>\n+#include <ctime>\n+#include <testsuite_hooks.h>\n+\n+// Include iostream last, just to make is as difficult as possible to\n+// properly initialize the standard iostream objects.\n+#include <iostream>\n+\n+// libstdc++/2523\n+void test02()\n+{\n+  using namespace std;\n+  int i;\n+  wcin >> i;\n+  wcout << \"i == \" << i << endl;\n+}\n+\n+int \n+main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "ec308096e18e5218456c098541aa26c33847fabf", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/2523-1_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F2523-1_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F2523-1_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F2523-1_xin.in?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1 @@\n+5588885 "}, {"sha": "cea4001537a902309cef71fae6829340b00e6ae0", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/2523-2_xin.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F2523-2_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F2523-2_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F2523-2_xin.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,39 @@\n+// 2003-05-01 Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <iostream>\n+\n+// libstdc++/2523\n+void test03()\n+{\n+  using namespace std;\n+  ios_base::sync_with_stdio(false);\n+\n+  int i;\n+  wcin >> i;\n+  wcout << \"i == \" << i << endl;\n+}\n+\n+int \n+main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "aaee5e5621ac34cf36042d0057fe6a90b905166e", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/2523-2_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F2523-2_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F2523-2_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F2523-2_xin.in?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1 @@\n+33332"}, {"sha": "acc45b25b77f254aa3b52d4b6e8d85d0a96d74b3", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/3045.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F3045.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F3045.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F3045.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,86 @@\n+// 2003-05-01 Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <fstream>\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+\n+class gnu_filebuf: public std::wfilebuf\n+{\n+  int i;\n+public:\n+  gnu_filebuf(int j = 1): i(j) { }\n+  ~gnu_filebuf() { --i; }\n+  int get_i() { return i;}\n+};\n+\n+const int initial = 4;\n+gnu_filebuf buf(initial);\n+\n+// libstdc++/3045, in a vague way.\n+void test01()\n+{\n+  bool test = true;\n+  int k1;\n+\n+  // 1 normal\n+  k1 = buf.get_i();\n+  VERIFY( k1 == initial );\n+  {\n+    std::wcout.rdbuf(&buf);\n+  }\n+  k1 = buf.get_i();\n+  VERIFY( k1 == initial );\n+\n+  // 2 syncd off\n+  k1 = buf.get_i();\n+  VERIFY( k1 == initial );\n+  {\n+    std::wcout.rdbuf(&buf);\n+    std::ios_base::sync_with_stdio(false); // make sure doesn't clobber buf\n+  }\n+  k1 = buf.get_i();\n+  VERIFY( k1 == initial );\n+\n+  // 3 callling init\n+  k1 = buf.get_i();\n+  VERIFY( k1 == initial );\n+  {\n+    std::wcout.rdbuf(&buf);\n+    std::ios_base::Init make_sure_initialized;\n+  }\n+  k1 = buf.get_i();\n+  VERIFY( k1 == initial );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5a00cc8d54d4fe834ba27ce304d4f705c89ed652", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/3647.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F3647.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F3647.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F3647.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,46 @@\n+// 2003-05-01 Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.6.1.5 - Template class basic_iostream\n+// NB: This file is for testing iostream with NO OTHER INCLUDES.\n+\n+#include <iostream>\n+\n+// libstdc++/3647\n+void test07()\n+{\n+  // Should not block.\n+  std::wcout << std::wcin.rdbuf()->in_avail() << std::endl;\n+}\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}"}, {"sha": "83d30f5163732567d9c7c83c3bf5dcabca009f6c", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/3_xin.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F3_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F3_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F3_xin.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,42 @@\n+// 2003-05-01 Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <iostream>\n+\n+// Interactive test, to be exercised as follows:\n+// run test under truss(1) or strace(1).  Look at\n+// size and pattern of write system calls.\n+// Should be 2 or 3 write(1,[...]) calls when run interactively\n+// depending upon buffering mode enforced.\n+void test05()\n+{\n+  std::wcout << L\"hello\" << L' ' << L\"world\" << std::endl;\n+  std::wcout << L\"Enter your name: \";\n+  std::wstring s;\n+  std::wcin >> s;\n+  std::wcout << L\"hello \" << s << std::endl;\n+}\n+\n+int \n+main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "a26c12687d7f575095e8847224e1a76bfadcce4c", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/3_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F3_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F3_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F3_xin.in?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1 @@\n+JOHN HUME and DAVID TRIMBLE"}, {"sha": "b8c650c55c17932811b0e1cdf2e6b84b61a64e56", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/4_xin.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F4_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F4_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F4_xin.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,39 @@\n+// 2003-05-01 Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <iostream>\n+\n+// http://gcc.gnu.org/ml/libstdc++/2002-08/msg00060.html\n+// Should only have to hit enter once.\n+void\n+test10()\n+{\n+  using namespace std;\n+  wcout << L\"Press ENTER once\\n\";\n+  wcin.ignore(1);\n+  wcout << L\"_M_gcount: \" << wcin.gcount() << endl;\n+}\n+\n+int \n+main()\n+{\n+  test10();\n+  return 0;\n+}"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/4_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F4_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F4_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F4_xin.in?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "267bc792acd299c9f2f664176316a86abad10ae8", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/5.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F5.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,85 @@\n+// 2003-05-01 Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.3 Standard iostream objects\n+\n+// Check that standard streams can be used from constructors and\n+// destructors of static objects, provided that an instance of \n+// ios_base::Init has been constructed.\n+\n+void init_standard_streams();\n+int use_standard_streams();\n+\n+struct Strange\n+{\n+  int i;\n+\n+  Strange()\n+  {\n+    init_standard_streams();\n+    i = use_standard_streams();\n+  }\n+\n+  ~Strange()\n+  {\n+    use_standard_streams();\n+    init_standard_streams();\n+  }\n+};\n+\n+static Strange static_ob;\n+\n+#include <testsuite_hooks.h>\n+#include <iostream>\n+\n+void init_standard_streams()\n+{\n+  std::ios_base::Init init;\n+}\n+\n+int use_standard_streams()\n+{\n+  std::wcout << L\"Hello, world!\" << std::endl;\n+  std::wcerr << L\"World, hello!\" << std::endl;\n+\n+  int ret = std::ios_base::xalloc();\n+  std::wcin.iword(ret) = ret + 1;\n+  std::wcout.iword(ret) = ret + 2;\n+  std::wcerr.iword(ret) = ret + 3;\n+  std::wclog.iword(ret) = ret + 4;\n+  return ret;\n+}\n+\n+void test05()\n+{\n+  bool test = true;\n+  int i = static_ob.i;\n+\n+  VERIFY( std::wcin.iword(i) == i + 1 );\n+  VERIFY( std::wcout.iword(i) == i + 2 );\n+  VERIFY( std::wcerr.iword(i) == i + 3 );\n+  VERIFY( std::wclog.iword(i) == i + 4 );\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "14051d902f3736937982b313edf3278584d522b0", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/5268.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F5268.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F5268.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F5268.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,46 @@\n+// 2003-05-01 Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <sstream>\n+#include <iostream>\n+\n+// libstdc++/5268\n+void test04()\n+{\n+  std::wstringbuf b1;\n+  std::wcout.rdbuf( &b1 );\n+  std::wcout << L\"hello\\n\";\n+  std::wcout.rdbuf(NULL);\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "7fcdf32ccce5b17e4d87a05c51aef98a1a478d6a", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/5280_xin.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F5280_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F5280_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F5280_xin.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,48 @@\n+// 2003-05-01 Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <iostream>\n+\n+// libstdc++/5280\n+// Interactive test: input \"1234^D^D\" for i should terminate for EOF.\n+void test06()\n+{\n+  using namespace std;\n+  int i;\n+  wcin >> i;\n+  if (!wcin.good()) \n+    {\n+      wcerr << endl;\n+      wcerr << L\"i == \" << i << endl;\n+      wcerr << L\"wcin.rdstate() == \" << wcin.rdstate() << endl;\n+      wcerr << L\"wcin.bad() == \" << wcin.bad() << endl;      \n+      wcerr << L\"wcin.fail() == \" << wcin.fail() << endl;      \n+      wcerr << L\"wcin.eof() == \" << wcin.eof() << endl;\n+    }   \n+  else\n+    wcerr << L\"i == \" << i << endl;\n+}\n+\n+int \n+main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "81c545efebe5f57d4cab2ba9ec294c4b0cadf672", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/5280_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F5280_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F5280_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F5280_xin.in?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1 @@\n+1234"}, {"sha": "6b4e3e252eaeec96b7c22808f49f7423f5c27b37", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/6.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,50 @@\n+// 2003-05-01  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.3 Standard iostream objects\n+\n+// ios_base::Init::~Init() calls wcout.flush(), which may call\n+// wcout.setstate(badbit), which may throw an exception. Check that\n+// the exception doesn't escape from the destructor.\n+\n+#include <iostream>\n+#include <streambuf>\n+\n+class Badbuf : public std::wstreambuf\n+{\n+protected:\n+  virtual int sync()\n+  {\n+    return -1;\n+  }\n+};\n+\n+void test06()\n+{\n+  std::ios_base::Init init;\n+  std::wcout.rdbuf(new Badbuf);\n+  std::wcout.exceptions(std::ios_base::badbit);\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "0466b67547712bbdc5b3efeb2b880f14818c360e", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/6548_xin.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6548_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6548_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6548_xin.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,39 @@\n+// 2003-05-01 Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/6548\n+void test07()\n+{\n+  bool test = true;\n+  std::wcout << L\"Enter 'test':\";\n+  std::wstring s;\n+  std::getline(std::wcin, s, L'\\n');\n+  VERIFY( s == L\"test\" );\n+}\n+\n+int \n+main()\n+{\n+  test07();\n+  return 0;\n+}"}, {"sha": "9daeafb9864cf43055ae93beb0afd6c7d144bfa4", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/6548_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6548_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6548_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6548_xin.in?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1 @@\n+test"}, {"sha": "4db05d1e06fd7fe126f6bc538f47b35cc71d1ca6", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/6648-1_xin.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6648-1_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6648-1_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6648-1_xin.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,38 @@\n+// 2003-05-01 Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <iostream>\n+\n+// libstdc++/6648\n+// Interactive tests: each one (run alone) must terminate upon a single '\\n'.\n+void test08()\n+{\n+  bool test = true;\n+  wchar_t buff[2048];\n+  std::wcout << \"Enter name: \";\n+  std::wcin.getline(buff, 2048);\n+}\n+\n+int \n+main()\n+{\n+  test08();\n+  return 0;\n+}"}, {"sha": "9dd5f1f2e27b7713336643275f4b48a67a6076b2", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/6648-1_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6648-1_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6648-1_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6648-1_xin.in?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1 @@\n+Kofi A. Annan"}, {"sha": "778c58f07b45590e6c9908302cca381b39ffb24c", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/6648-2_xin.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6648-2_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6648-2_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6648-2_xin.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,35 @@\n+// 2003-05-01  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <iostream>\n+\n+void test09()\n+{\n+  bool test = true;\n+  std::wcout << L\"Enter favorite beach: \";\n+  std::wcin.ignore(2048, '\\n');\n+}\n+\n+int \n+main()\n+{\n+  test09();\n+  return 0;\n+}"}, {"sha": "0b2c7cf282e842f87e3601d3cdfff81af10b5fc4", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/6648-2_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6648-2_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6648-2_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F6648-2_xin.in?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1 @@\n+Oak St. Beach, Chicago"}, {"sha": "fcdeaba2ff5a2402a34613d14a010c3145438249", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/7.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F7.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,75 @@\n+// 2003-05-01 Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.3 Standard iostream objects\n+\n+#include <fstream>\n+#include <iostream>\n+#include <unistd.h>\n+#include <signal.h>\n+#include <fcntl.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <testsuite_hooks.h>\n+\n+// Check that wcout.flush() is called when last ios_base::Init is destroyed.\n+void test07()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  const char* name = \"tmp_fifo4\";\n+\n+  signal(SIGPIPE, SIG_IGN);\n+\n+  unlink(name);  \n+  mkfifo(name, S_IRWXU);\n+  \n+  int child = fork();\n+  VERIFY( child != -1 );\n+\n+  if (child == 0)\n+    {\n+      wfilebuf fbout;\n+      sleep(1);\n+      fbout.open(name, ios_base::out);\n+      wcout.rdbuf(&fbout);\n+      fbout.sputc(L'a');\n+      sleep(2);\n+      // NB: fbout is *not* destroyed here!\n+      exit(0);\n+    }\n+  \n+  wfilebuf fbin;\n+  fbin.open(name, ios_base::in);\n+  sleep(2);\n+  wfilebuf::int_type c = fbin.sbumpc();\n+  VERIFY( c != wfilebuf::traits_type::eof() );\n+  VERIFY( c == wfilebuf::traits_type::to_int_type(L'a') );\n+\n+  fbin.close();\n+}\n+\n+int\n+main()\n+{\n+  test07();\n+  return 0;\n+}"}, {"sha": "e4ca3b95d46ba833681e5580a8513ca92e12f4fe", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/7744_xin.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F7744_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F7744_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F7744_xin.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,42 @@\n+// 2003-05-01  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+ \n+#include <iostream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7744\n+void test11()\n+{\n+  bool test = true;\n+  std::ios::sync_with_stdio(false);\n+\n+  std::wcout << \"Type in the characters 'abc' and press <ENTER>: \";\n+  std::wcin.peek();\n+ \n+  // The number of unread characters should be 4 (a, b, c, \\\\n)\n+  VERIFY( 4 == std::wcin.rdbuf()->in_avail() );\n+}\n+\n+int \n+main()\n+{\n+  test11();\n+  return 0;\n+}"}, {"sha": "8baef1b4abc478178b004d62031cf7fe6db6f903", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/7744_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F7744_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F7744_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F7744_xin.in?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1 @@\n+abc"}, {"sha": "346d0fc81d41616983211b25b58bc999c4b9dbdc", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/8.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F8.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,51 @@\n+// 2003-05-01  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+  // 27.3 - Standard iostream objects p 2\n+\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+\n+void test02() \n+{\n+  bool test = true;\n+  \n+  // 27.3 - Standard iostream objects p 2\n+  // The objects are not destroyed during program execution.\n+  void* p1 = &std::wcout;\n+  void* p2 = &std::wcin;\n+  void* p3 = &std::wcerr;\n+  void* p4 = &std::wclog;\n+  std::ios_base::sync_with_stdio(false); \n+  void* p1s = &std::wcout;\n+  void* p2s = &std::wcin;\n+  void* p3s = &std::wcerr;\n+  void* p4s = &std::wclog;\n+  VERIFY( p1 == p1s );\n+  VERIFY( p2 == p2s );\n+  VERIFY( p3 == p3s );\n+  VERIFY( p4 == p4s );\n+}\n+\n+int main(void)\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "835282fe44953d0f2bcac345f03cde2057611e24", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/9520.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9520.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9520.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9520.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,57 @@\n+// 2003-04-30  Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <testsuite_hooks.h>\n+#include <iostream>\n+#include <cstdio>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  const char* name = \"tmp_9520\";\n+\n+  FILE* file = fopen(name, \"w\");\n+  for (int i = 1; i < 256; ++i)\n+    putc(static_cast<unsigned char>(i), file);\n+  fclose(file);\n+\n+  locale loc (__gnu_cxx_test::try_named_locale(\"de_DE.ISO-8859-15@euro\"));\n+  locale::global(loc); // Set locale for stdin\n+\n+  freopen(name, \"r\", stdin);\n+\n+  wcin.imbue(loc);\n+\n+  for (int j = 1; j < 256; ++j)\n+    {\n+      wint_t c1 = wcin.rdbuf()->sgetc();\n+      VERIFY( c1 != WEOF );\n+      wint_t c2 = wcin.rdbuf()->sbumpc();\n+      VERIFY( c1 == c2 );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();  \n+  return 0;\n+}"}, {"sha": "0d8d6283521c5c74fc1503df26557a67fabda00b", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/9661-1.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9661-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9661-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9661-1.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,85 @@\n+// 2003-04-30  Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <testsuite_hooks.h>\n+#include <cstdio>\n+#include <iostream>\n+#include <unistd.h>\n+#include <signal.h>\n+#include <fcntl.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+\n+// Check that wcin.rdbuf()->sputbackc() puts characters back to stdin.\n+// If wcin.rdbuf() is a filebuf, this succeeds when stdin is a regular\n+// file, but fails otherwise, hence the named fifo.\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+\n+  const char* name = \"tmp_fifo5\";\n+\n+  signal(SIGPIPE, SIG_IGN);\n+\n+  unlink(name);  \n+  mkfifo(name, S_IRWXU);\n+  \n+  int child = fork();\n+  VERIFY( child != -1 );\n+\n+  if (child == 0)\n+    {\n+      sleep(1);\n+      FILE* file = fopen(name, \"w\");\n+      fputs(\"Whatever\\n\", file);\n+      fflush(file);\n+      sleep(2);\n+      fclose(file);\n+      exit(0);\n+    }\n+  \n+  freopen(name, \"r\", stdin);\n+  sleep(2);\n+\n+  wint_t c1 = fgetwc(stdin);\n+  VERIFY( c1 != WEOF );\n+  wint_t c2 = wcin.rdbuf()->sputbackc(L'a');\n+  VERIFY( c2 != WEOF );\n+  VERIFY( c2 == L'a' );\n+  \n+  wint_t c3 = fgetwc(stdin);\n+  VERIFY( c3 != WEOF );\n+  VERIFY( c3 == c2 );\n+  wint_t c4 = ungetwc(L'b', stdin);\n+  VERIFY( c4 != WEOF );\n+  VERIFY( c4 == L'b' );\n+  \n+  wint_t c5 = wcin.rdbuf()->sgetc();\n+  VERIFY( c5 != WEOF );\n+  VERIFY( c5 == c4 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "351a91b6f0357fa6ffa316e2c39c17182bc36fc8", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/9661-2_xin.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9661-2_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9661-2_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9661-2_xin.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,48 @@\n+// 2003-04-30  Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <testsuite_hooks.h>\n+#include <cstdio>\n+#include <iostream>\n+#include <cwchar>\n+\n+void test02()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+\n+  wint_t c1 = fgetwc(stdin);\n+  wint_t c2 = wcin.rdbuf()->sputbackc(c1);\n+  VERIFY( c2 == c1 );\n+  \n+  wint_t c3 = fgetwc(stdin);\n+  VERIFY( c3 == c1 );\n+  ungetwc(c3, stdin);\n+  \n+  wint_t c4 = wcin.rdbuf()->sgetc();\n+  VERIFY( c4 == c3 );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "ad9013028f5e96597d5d28bd80bc857ec609c14b", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/9661-2_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9661-2_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9661-2_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9661-2_xin.in?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1 @@\n+For what you dream of"}, {"sha": "27c7ff7f7cdb4fb4223092683e990bf9ea3c5c8f", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/9662.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9662.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9662.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9662.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,42 @@\n+// 2003-04-30  Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <testsuite_hooks.h>\n+#include <iostream>\n+#include <cstdio>\n+#include <cwchar>\n+\n+// Check that operations on wcout can be mixed with wide operations\n+// on stdout.\n+void test01()\n+{\n+  bool test = true;\n+\n+  std::wcout << L\"Hello, \";\n+  VERIFY( std::fwide(stdout, 0) >= 0 );\n+  int ret = std::fputws(L\"world!\\n\", stdout);\n+  VERIFY( ret >= 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6de8bd26a1adb08598c92726ee654f3751e9243f", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/9_xin.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9_xin.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,65 @@\n+// 2003-05-01  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <iostream>\n+#include <locale>\n+#include <string>\n+#include <cwchar>\n+#include <cwctype>\n+#include <iterator>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+// This tests the handling of multibyte characters by wcin and wcout.\n+void test09()\n+{\n+  using namespace std;\n+\n+  locale loc(\"\");\n+  locale::global(loc);\n+\t\n+  wcout.imbue(loc);\n+  wcin.imbue(loc);\n+\n+  wcout << L\"Current locale is: \\'\" << loc.name().c_str() << L\"\\'\\n\";\n+  wcout << L\"Please enter your name: \";\n+\n+  wstring str;\n+  getline(wcin, str);\n+\n+  wcout << str << endl;\n+  wcout << str.size() << endl;\n+\n+  transform(str.begin(), str.end(),\n+\t    ostream_iterator<wchar_t, wchar_t>(wcout), towupper);\n+  wcout << endl;\n+  transform(str.begin(), str.end(),\n+\t    ostream_iterator<wchar_t, wchar_t>(wcout), towlower);\n+  wcout << endl << hex << showbase;\n+  copy(str.begin(), str.end(),\n+       ostream_iterator<wint_t, wchar_t>(wcout, L\" \"));\n+  wcout << endl;\n+}\n+\n+int main()\n+{\n+  test09();\n+  return 0;\n+}"}, {"sha": "a26c12687d7f575095e8847224e1a76bfadcce4c", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/9_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9_xin.in?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1 @@\n+JOHN HUME and DAVID TRIMBLE"}, {"sha": "cffcf37590fd3412e97ca35539eeef5edff250c4", "filename": "libstdc++-v3/testsuite/ext/stdio_sync_filebuf_char.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf_char.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,64 @@\n+// 2003-05-01 Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <ext/stdio_sync_filebuf.h>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  const char* c_lit = \"black pearl jasmine tea\";\n+  int size = strlen(c_lit);\n+  const char* name = \"stdiobuf-1.txt\";\n+\n+  FILE* fout = fopen(name, \"w\");\n+  fwrite(c_lit, 1, size, fout);\n+  fclose(fout);\n+\n+  FILE* fin = fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<char> sbuf(fin);\n+\n+  VERIFY( sbuf.sgetc() == c_lit[0] );\n+  VERIFY( getc(fin) == c_lit[0] );\n+  VERIFY( sbuf.sgetc() == c_lit[1] );\n+  VERIFY( sbuf.sbumpc() == c_lit[1] );\n+  VERIFY( ungetc('Z', fin) == 'Z' );\n+  VERIFY( sbuf.sbumpc() == 'Z' );\n+  VERIFY( getc(fin) == c_lit[2] );\n+  VERIFY( sbuf.sputbackc('X') == 'X' );\n+  VERIFY( getc(fin) == 'X' );\n+\n+  char buf[5];\n+  memset(buf, 'x', 5);\n+  VERIFY( sbuf.sgetn(buf, 5) == 5 );\n+  VERIFY( !memcmp(buf, c_lit + 3, 5) );\n+  VERIFY( getc(fin) == c_lit[8] );\n+  VERIFY( sbuf.sungetc() == EOF );\n+\n+  fclose(fin);\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a8cde4abda131e209c9343e2480362a82f9cf077", "filename": "libstdc++-v3/testsuite/ext/stdio_sync_filebuf_wchar_t.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ff814940515c59592755b2381c40abcbdb8481/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf_wchar_t.cc?ref=51ff814940515c59592755b2381c40abcbdb8481", "patch": "@@ -0,0 +1,65 @@\n+// 2003-05-01 Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <ext/stdio_sync_filebuf.h>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  const char* c_lit = \"black pearl jasmine tea\";\n+  const wchar_t* w_lit = L\"black pearl jasmine tea\";\n+  int size = strlen(c_lit);\n+  const char* name = \"stdiobuf-1.txt\";\n+\n+  FILE* fout = fopen(name, \"w\");\n+  fwrite(c_lit, 1, size, fout);\n+  fclose(fout);\n+\n+  FILE* fin = fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<wchar_t> wsbuf(fin);\n+\n+  VERIFY( wsbuf.sgetc() == w_lit[0] );\n+  VERIFY( getwc(fin) == w_lit[0] );\n+  VERIFY( wsbuf.sgetc() == w_lit[1] );\n+  VERIFY( wsbuf.sbumpc() == w_lit[1] );\n+  VERIFY( ungetwc(L'Z', fin) == L'Z' );\n+  VERIFY( wsbuf.sbumpc() == L'Z' );\n+  VERIFY( getwc(fin) == w_lit[2] );\n+  VERIFY( wsbuf.sputbackc(L'X') == L'X' );\n+  VERIFY( getwc(fin) == L'X' );\n+\n+  wchar_t buf[5];\n+  wmemset(buf, 0xdeadbeef, 5);\n+  VERIFY( wsbuf.sgetn(buf, 5) == 5 );\n+  VERIFY( !wmemcmp(buf, w_lit + 3, 5) );\n+  VERIFY( getwc(fin) == w_lit[8] );\n+  VERIFY( wsbuf.sungetc() == WEOF );\n+\n+  fclose(fin);\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}]}