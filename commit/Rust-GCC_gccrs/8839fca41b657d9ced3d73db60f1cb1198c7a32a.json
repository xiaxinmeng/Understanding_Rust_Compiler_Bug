{"sha": "8839fca41b657d9ced3d73db60f1cb1198c7a32a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgzOWZjYTQxYjY1N2Q5Y2VkM2Q3M2RiNjBmMWNiMTE5OGM3YTMyYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1997-01-14T20:28:45Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1997-01-14T20:28:45Z"}, "message": "Add support for new target macro CONSTANT_AFTER_FUNCTION_P\n\nFrom-SVN: r13489", "tree": {"sha": "58b84dd24fcea3f90199a448fdfb275e5fe92eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58b84dd24fcea3f90199a448fdfb275e5fe92eb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8839fca41b657d9ced3d73db60f1cb1198c7a32a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8839fca41b657d9ced3d73db60f1cb1198c7a32a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8839fca41b657d9ced3d73db60f1cb1198c7a32a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8839fca41b657d9ced3d73db60f1cb1198c7a32a/comments", "author": null, "committer": null, "parents": [{"sha": "686fc14126b4a105a1c8ecf323517abb0f4b67b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/686fc14126b4a105a1c8ecf323517abb0f4b67b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/686fc14126b4a105a1c8ecf323517abb0f4b67b3"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "a13540932aea0d6d876a1d8946c8c91684b7471b", "filename": "gcc/varasm.c", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8839fca41b657d9ced3d73db60f1cb1198c7a32a/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8839fca41b657d9ced3d73db60f1cb1198c7a32a/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=8839fca41b657d9ced3d73db60f1cb1198c7a32a", "patch": "@@ -1,5 +1,5 @@\n /* Output variables, constants and external declarations, for GNU compiler.\n-   Copyright (C) 1987, 88, 89, 92-5, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92-6, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -144,6 +144,7 @@ static struct constant_descriptor *record_constant_rtx PROTO((enum machine_mode,\n \t\t\t\t\t\t\t      rtx));\n static struct pool_constant *find_pool_constant PROTO((rtx));\n static int output_addressed_constants\tPROTO((tree));\n+static void output_after_function_constants PROTO((void));\n static void bc_assemble_integer\t\tPROTO((tree, int));\n static void output_constructor\t\tPROTO((tree, int));\n \f\n@@ -1025,6 +1026,9 @@ assemble_end_function (decl, fnname)\n #endif\n   if (! CONSTANT_POOL_BEFORE_FUNCTION)\n     output_constant_pool (fnname, decl);\n+\n+  /* Output any constants which should appear after the function.  */\n+  output_after_function_constants ();\n }\n \f\n /* Assemble code to leave SIZE bytes of zeros.  */\n@@ -2737,6 +2741,10 @@ struct deferred_constant\n \n static struct deferred_constant *deferred_constants;\n \n+/* Another list of constants which should be output after the\n+   function.  */\n+static struct deferred_constant *after_function_constants;\n+\n /* Nonzero means defer output of addressed subconstants\n    (i.e., those for which output_constant_def is called.)  */\n static int defer_addressed_constants_flag;\n@@ -2772,6 +2780,23 @@ output_deferred_addressed_constants ()\n   deferred_constants = 0;\n }\n \n+/* Output any constants which should appear after a function.  */\n+\n+static void\n+output_after_function_constants ()\n+{\n+  struct deferred_constant *p, *next;\n+\n+  for (p = after_function_constants; p; p = next)\n+    {\n+      output_constant_def_contents (p->exp, p->reloc, p->labelno);\n+      next = p->next;\n+      free (p);\n+    }\n+\n+  after_function_constants = 0;\n+}\n+\n /* Make a copy of the whole tree structure for a constant.\n    This handles the same types of nodes that compare_constant\n    and record_constant handle.  */\n@@ -2925,7 +2950,15 @@ output_constant_def (exp)\n      output it (or defer its output for later).  */\n   if (found == 0)\n     {\n-      if (defer_addressed_constants_flag)\n+      int after_function = 0;\n+\n+#ifdef CONSTANT_AFTER_FUNCTION_P\n+      if (current_function_decl != 0\n+\t  && CONSTANT_AFTER_FUNCTION_P (exp))\n+\tafter_function = 1;\n+#endif\n+\n+      if (defer_addressed_constants_flag || after_function)\n \t{\n \t  struct deferred_constant *p;\n \t  p = (struct deferred_constant *) xmalloc (sizeof (struct deferred_constant));\n@@ -2936,8 +2969,16 @@ output_constant_def (exp)\n \t  pop_obstacks ();\n \t  p->reloc = reloc;\n \t  p->labelno = const_labelno++;\n-\t  p->next = deferred_constants;\n-\t  deferred_constants = p;\n+\t  if (after_function)\n+\t    {\n+\t      p->next = after_function_constants;\n+\t      after_function_constants = p;\n+\t    }\n+\t  else\n+\t    {\n+\t      p->next = deferred_constants;\n+\t      deferred_constants = p;\n+\t    }\n \t}\n       else\n \toutput_constant_def_contents (exp, reloc, const_labelno++);"}]}