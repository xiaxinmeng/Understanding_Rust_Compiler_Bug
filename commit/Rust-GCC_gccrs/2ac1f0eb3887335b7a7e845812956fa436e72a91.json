{"sha": "2ac1f0eb3887335b7a7e845812956fa436e72a91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFjMWYwZWIzODg3MzM1YjdhN2U4NDU4MTI5NTZmYTQzNmU3MmE5MQ==", "commit": {"author": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2021-05-11T12:11:09Z"}, "committer": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2021-05-11T12:11:09Z"}, "message": "arm: Avoid emitting bogus CFA adjusts for CMSE nonsecure calls [PR99725]\n\nThe PR shows us attaching REG_CFA_ADJUST_CFA notes to stack pointer\nadjustments emitted in cmse_nonsecure_call_inline_register_clear (when\n-march=armv8.1-m.main). However, the stack pointer is not guaranteed to\nbe the CFA reg. If we're at -O0 or we have -fno-omit-frame-pointer, then\nthe frame pointer will be used as the CFA reg, and these notes on the sp\nadjustments will lead to ICEs in dwarf2out_frame_debug_adjust_cfa.\n\nThis patch avoids emitting these notes if the current function has a\nframe pointer.\n\ngcc/ChangeLog:\n\n\tPR target/99725\n\t* config/arm/arm.c (cmse_nonsecure_call_inline_register_clear):\n\tAvoid emitting CFA adjusts on the sp if we have the fp.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/99725\n\t* gcc.target/arm/cmse/pr99725.c: New test.", "tree": {"sha": "669c82dc015203eaa09cf5903e8b04b7adf6f3c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/669c82dc015203eaa09cf5903e8b04b7adf6f3c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ac1f0eb3887335b7a7e845812956fa436e72a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ac1f0eb3887335b7a7e845812956fa436e72a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ac1f0eb3887335b7a7e845812956fa436e72a91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ac1f0eb3887335b7a7e845812956fa436e72a91/comments", "author": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28de75d27685b2735612d264bb96f39001f4d836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28de75d27685b2735612d264bb96f39001f4d836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28de75d27685b2735612d264bb96f39001f4d836"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "2962071adfd5ec65108d467ed78580addba8faae", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac1f0eb3887335b7a7e845812956fa436e72a91/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac1f0eb3887335b7a7e845812956fa436e72a91/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=2ac1f0eb3887335b7a7e845812956fa436e72a91", "patch": "@@ -18774,10 +18774,14 @@ cmse_nonsecure_call_inline_register_clear (void)\n \t\t  imm = gen_int_mode (- lazy_store_stack_frame_size, SImode);\n \t\t  add_insn = emit_insn (gen_addsi3 (stack_pointer_rtx,\n \t\t\t\t\t\t    stack_pointer_rtx, imm));\n-\t\t  arm_add_cfa_adjust_cfa_note (add_insn,\n-\t\t\t\t\t       - lazy_store_stack_frame_size,\n-\t\t\t\t\t       stack_pointer_rtx,\n-\t\t\t\t\t       stack_pointer_rtx);\n+\t\t  /* If we have the frame pointer, then it will be the\n+\t\t     CFA reg.  Otherwise, the stack pointer is the CFA\n+\t\t     reg, so we need to emit a CFA adjust.  */\n+\t\t  if (!frame_pointer_needed)\n+\t\t    arm_add_cfa_adjust_cfa_note (add_insn,\n+\t\t\t\t\t\t - lazy_store_stack_frame_size,\n+\t\t\t\t\t\t stack_pointer_rtx,\n+\t\t\t\t\t\t stack_pointer_rtx);\n \t\t  emit_insn (gen_lazy_store_multiple_insn (stack_pointer_rtx));\n \t\t}\n \t      /* Save VFP callee-saved registers.  */\n@@ -18815,10 +18819,11 @@ cmse_nonsecure_call_inline_register_clear (void)\n \t\t  rtx_insn *add_insn =\n \t\t    emit_insn (gen_addsi3 (stack_pointer_rtx,\n \t\t\t\t\t   stack_pointer_rtx, imm));\n-\t\t  arm_add_cfa_adjust_cfa_note (add_insn,\n-\t\t\t\t\t       lazy_store_stack_frame_size,\n-\t\t\t\t\t       stack_pointer_rtx,\n-\t\t\t\t\t       stack_pointer_rtx);\n+\t\t  if (!frame_pointer_needed)\n+\t\t    arm_add_cfa_adjust_cfa_note (add_insn,\n+\t\t\t\t\t\t lazy_store_stack_frame_size,\n+\t\t\t\t\t\t stack_pointer_rtx,\n+\t\t\t\t\t\t stack_pointer_rtx);\n \t\t}\n \t      /* Restore VFP callee-saved registers.  */\n \t      else"}, {"sha": "284da184f96f58f50dedd5f7ced5c2f97eb0c64c", "filename": "gcc/testsuite/gcc.target/arm/cmse/pr99725.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac1f0eb3887335b7a7e845812956fa436e72a91/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fpr99725.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac1f0eb3887335b7a7e845812956fa436e72a91/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fpr99725.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fpr99725.c?ref=2ac1f0eb3887335b7a7e845812956fa436e72a91", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mcmse -g\" } */\n+typedef int __attribute__((cmse_nonsecure_call)) (*t)();\n+t f;\n+void g() { f(); }"}]}