{"sha": "5970b0793c7f4a72296e6270254287ba3c172f7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk3MGIwNzkzYzdmNGE3MjI5NmU2MjcwMjU0Mjg3YmEzYzE3MmY3Zg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-10-31T12:32:05Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-10-31T12:32:05Z"}, "message": "ipa-inline.c (want_inline_small_function_p): Fix typo and formatting.\n\n\t* ipa-inline.c (want_inline_small_function_p): Fix typo and formatting.\n\t(want_inline_function_to_all_callers_p): Fix formatting and simplify.\n\nFrom-SVN: r216973", "tree": {"sha": "1e61a4591c3c5fcbfd7c3c9295025f5e68a8ffde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e61a4591c3c5fcbfd7c3c9295025f5e68a8ffde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5970b0793c7f4a72296e6270254287ba3c172f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5970b0793c7f4a72296e6270254287ba3c172f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5970b0793c7f4a72296e6270254287ba3c172f7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5970b0793c7f4a72296e6270254287ba3c172f7f/comments", "author": null, "committer": null, "parents": [{"sha": "3012e0ab0b1e995618bbc76ea743e2f6b37616d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3012e0ab0b1e995618bbc76ea743e2f6b37616d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3012e0ab0b1e995618bbc76ea743e2f6b37616d8"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "af7e3d424d8d63d07152957b2b4c09f641c1e9d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5970b0793c7f4a72296e6270254287ba3c172f7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5970b0793c7f4a72296e6270254287ba3c172f7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5970b0793c7f4a72296e6270254287ba3c172f7f", "patch": "@@ -1,3 +1,8 @@\n+2014-10-31  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* ipa-inline.c (want_inline_small_function_p): Fix typo and formatting.\n+\t(want_inline_function_to_all_callers_p): Fix formatting and simplify.\n+\n 2014-10-31  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \tPR tree-optimization/63259\n@@ -19,7 +24,7 @@\n \t* ipa-icf.c (sem_function::~sem_function): Change free to delete to avoid\n \talloc-dealloc mismatch with new, called in ipa_icf::sem_function::init.\n \n-2014-10-10  Felix Yang  <felix.yang@huawei.com>\n+2014-10-30  Felix Yang  <felix.yang@huawei.com>\n \n \t* config/xtensa/xtensa.h (TARGET_LOOPS): New Macro.\n \t* config/xtensa/xtensa.c: Include dumpfile.h and hw-doloop.h."}, {"sha": "fff386bb739fa57bdced1b05c1debbca717757ed", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5970b0793c7f4a72296e6270254287ba3c172f7f/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5970b0793c7f4a72296e6270254287ba3c172f7f/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=5970b0793c7f4a72296e6270254287ba3c172f7f", "patch": "@@ -590,19 +590,21 @@ want_inline_small_function_p (struct cgraph_edge *e, bool report)\n       want_inline = false;\n     }\n   /* Do fast and conservative check if the function can be good\n-     inline cnadidate.  At themoment we allow inline hints to\n-     promote non-inline function to inline and we increase\n-     MAX_INLINE_INSNS_SINGLE 16fold for inline functions.  */\n+     inline candidate.  At the moment we allow inline hints to\n+     promote non-inline functions to inline and we increase\n+     MAX_INLINE_INSNS_SINGLE 16-fold for inline functions.  */\n   else if ((!DECL_DECLARED_INLINE_P (callee->decl)\n \t   && (!e->count || !e->maybe_hot_p ()))\n-\t   && inline_summary (callee)->min_size - inline_edge_summary (e)->call_stmt_size\n+\t   && inline_summary (callee)->min_size\n+\t\t- inline_edge_summary (e)->call_stmt_size\n \t      > MAX (MAX_INLINE_INSNS_SINGLE, MAX_INLINE_INSNS_AUTO))\n     {\n       e->inline_failed = CIF_MAX_INLINE_INSNS_AUTO_LIMIT;\n       want_inline = false;\n     }\n   else if ((DECL_DECLARED_INLINE_P (callee->decl) || e->count)\n-\t   && inline_summary (callee)->min_size - inline_edge_summary (e)->call_stmt_size\n+\t   && inline_summary (callee)->min_size\n+\t\t- inline_edge_summary (e)->call_stmt_size\n \t      > 16 * MAX_INLINE_INSNS_SINGLE)\n     {\n       e->inline_failed = (DECL_DECLARED_INLINE_P (callee->decl)\n@@ -836,27 +838,26 @@ has_caller_p (struct cgraph_node *node, void *data ATTRIBUTE_UNUSED)\n static bool\n want_inline_function_to_all_callers_p (struct cgraph_node *node, bool cold)\n {\n-   struct cgraph_node *function = node->ultimate_alias_target ();\n-   bool has_hot_call = false;\n-\n-   /* Does it have callers?  */\n-   if (!node->call_for_symbol_thunks_and_aliases (has_caller_p, NULL, true))\n-     return false;\n-   /* Already inlined?  */\n-   if (function->global.inlined_to)\n-     return false;\n-   if (node->ultimate_alias_target () != node)\n-     return false;\n-   /* Inlining into all callers would increase size?  */\n-   if (estimate_growth (node) > 0)\n-     return false;\n-   /* All inlines must be possible.  */\n-   if (node->call_for_symbol_thunks_and_aliases\n-     (check_callers, &has_hot_call, true))\n-     return false;\n-   if (!cold && !has_hot_call)\n-     return false;\n-   return true;\n+  bool has_hot_call = false;\n+\n+  if (node->ultimate_alias_target () != node)\n+    return false;\n+  /* Already inlined?  */\n+  if (node->global.inlined_to)\n+    return false;\n+  /* Does it have callers?  */\n+  if (!node->call_for_symbol_thunks_and_aliases (has_caller_p, NULL, true))\n+    return false;\n+  /* Inlining into all callers would increase size?  */\n+  if (estimate_growth (node) > 0)\n+    return false;\n+  /* All inlines must be possible.  */\n+  if (node->call_for_symbol_thunks_and_aliases (check_callers, &has_hot_call,\n+\t\t\t\t\t\ttrue))\n+    return false;\n+  if (!cold && !has_hot_call)\n+    return false;\n+  return true;\n }\n \n #define RELATIVE_TIME_BENEFIT_RANGE (INT_MAX / 64)"}]}