{"sha": "b9424661f58de6c0aa9dc4c855c1fd913cc06282", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk0MjQ2NjFmNThkZTZjMGFhOWRjNGM4NTVjMWZkOTEzY2MwNjI4Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-10-14T06:52:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-10-14T06:52:46Z"}, "message": "c-parser.c (c_parser_omp_all_clauses): Change bool NESTED_P argument into int NESTED...\n\nc/\n\t* c-parser.c (c_parser_omp_all_clauses): Change bool NESTED_P argument\n\tinto int NESTED, if it is 2, diagnose missing commas in between\n\tclauses.\n\t(c_parser_omp_context_selector): Pass 2 as last argument to\n\tc_parser_omp_all_clauses.\ncp/\n\t* parser.c (cp_parser_omp_all_clauses): Change bool NESTED_P argument\n\tinto int NESTED, if it is 2, diagnose missing commas in between\n\tclauses.\n\t(cp_parser_omp_context_selector): Pass 2 as last argument to\n\tcp_parser_omp_all_clauses.\ntestsuite/\n\t* c-c++-common/gomp/declare-variant-7.c: Add tests for clauses not\n\tseparated by commas in simd selector trait properties.\n\nFrom-SVN: r276950", "tree": {"sha": "3a68fda9b91c308cf0facc6af4dd010531cb86b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a68fda9b91c308cf0facc6af4dd010531cb86b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9424661f58de6c0aa9dc4c855c1fd913cc06282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9424661f58de6c0aa9dc4c855c1fd913cc06282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9424661f58de6c0aa9dc4c855c1fd913cc06282", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9424661f58de6c0aa9dc4c855c1fd913cc06282/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dede82f21ba8b569ad0f5538a0c00216ea71d2b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dede82f21ba8b569ad0f5538a0c00216ea71d2b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dede82f21ba8b569ad0f5538a0c00216ea71d2b4"}], "stats": {"total": 75, "additions": 58, "deletions": 17}, "files": [{"sha": "c76baf060a746192e880916447f286c58850b844", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9424661f58de6c0aa9dc4c855c1fd913cc06282/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9424661f58de6c0aa9dc4c855c1fd913cc06282/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b9424661f58de6c0aa9dc4c855c1fd913cc06282", "patch": "@@ -1,3 +1,11 @@\n+2019-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_all_clauses): Change bool NESTED_P argument\n+\tinto int NESTED, if it is 2, diagnose missing commas in between\n+\tclauses.\n+\t(c_parser_omp_context_selector): Pass 2 as last argument to\n+\tc_parser_omp_all_clauses.\n+\n 2019-10-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_omp_context_selector): Improve error recovery."}, {"sha": "15095dd3214e5e42478c040f92ddedc4f9fabc90", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9424661f58de6c0aa9dc4c855c1fd913cc06282/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9424661f58de6c0aa9dc4c855c1fd913cc06282/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=b9424661f58de6c0aa9dc4c855c1fd913cc06282", "patch": "@@ -15215,13 +15215,14 @@ c_parser_oacc_all_clauses (c_parser *parser, omp_clause_mask mask,\n /* Parse all OpenMP clauses.  The set clauses allowed by the directive\n    is a bitmask in MASK.  Return the list of clauses found.\n    FINISH_P set if c_finish_omp_clauses should be called.\n-   NESTED_P set if clauses should be terminated by closing paren instead\n-   of end of pragma.  */\n+   NESTED non-zero if clauses should be terminated by closing paren instead\n+   of end of pragma.  If it is 2, additionally commas are required in between\n+   the clauses.  */\n \n static tree\n c_parser_omp_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t\t\t  const char *where, bool finish_p = true,\n-\t\t\t  bool nested_p = false)\n+\t\t\t  int nested = 0)\n {\n   tree clauses = NULL;\n   bool first = true;\n@@ -15233,11 +15234,18 @@ c_parser_omp_all_clauses (c_parser *parser, omp_clause_mask mask,\n       const char *c_name;\n       tree prev = clauses;\n \n-      if (nested_p && c_parser_next_token_is (parser, CPP_CLOSE_PAREN))\n+      if (nested && c_parser_next_token_is (parser, CPP_CLOSE_PAREN))\n \tbreak;\n \n-      if (!first && c_parser_next_token_is (parser, CPP_COMMA))\n-\tc_parser_consume_token (parser);\n+      if (!first)\n+\t{\n+\t  if (c_parser_next_token_is (parser, CPP_COMMA))\n+\t    c_parser_consume_token (parser);\n+\t  else if (nested == 2)\n+\t    error_at (c_parser_peek_token (parser)->location,\n+\t\t      \"clauses in %<simd%> trait should be separated \"\n+\t\t      \"by %<,%>\");\n+\t}\n \n       here = c_parser_peek_token (parser)->location;\n       c_kind = c_parser_omp_clause_name (parser);\n@@ -15520,7 +15528,7 @@ c_parser_omp_all_clauses (c_parser *parser, omp_clause_mask mask,\n     }\n \n  saw_error:\n-  if (!nested_p)\n+  if (!nested)\n     c_parser_skip_to_pragma_eol (parser);\n \n   if (finish_p)\n@@ -19279,7 +19287,7 @@ c_parser_omp_context_selector (c_parser *parser, tree set, tree parms)\n \t      tree c;\n \t      c = c_parser_omp_all_clauses (parser,\n \t\t\t\t\t    OMP_DECLARE_SIMD_CLAUSE_MASK,\n-\t\t\t\t\t    \"simd\", true, true);\n+\t\t\t\t\t    \"simd\", true, 2);\n \t      c = c_omp_declare_simd_clauses_to_numbers (parms\n \t\t\t\t\t\t\t == error_mark_node\n \t\t\t\t\t\t\t ? NULL_TREE : parms,"}, {"sha": "af084974cf8fbabf88bc015ac5c6a5f350bfbc88", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9424661f58de6c0aa9dc4c855c1fd913cc06282/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9424661f58de6c0aa9dc4c855c1fd913cc06282/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b9424661f58de6c0aa9dc4c855c1fd913cc06282", "patch": "@@ -1,3 +1,11 @@\n+2019-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_all_clauses): Change bool NESTED_P argument\n+\tinto int NESTED, if it is 2, diagnose missing commas in between\n+\tclauses.\n+\t(cp_parser_omp_context_selector): Pass 2 as last argument to\n+\tcp_parser_omp_all_clauses.\n+\n 2019-10-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.c (cp_parser_omp_context_selector): Improve error recovery."}, {"sha": "53db8afc9f65a8fea796e607707b97d5f463965c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9424661f58de6c0aa9dc4c855c1fd913cc06282/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9424661f58de6c0aa9dc4c855c1fd913cc06282/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b9424661f58de6c0aa9dc4c855c1fd913cc06282", "patch": "@@ -36078,13 +36078,14 @@ cp_parser_oacc_all_clauses (cp_parser *parser, omp_clause_mask mask,\n /* Parse all OpenMP clauses.  The set clauses allowed by the directive\n    is a bitmask in MASK.  Return the list of clauses found.\n    FINISH_P set if finish_omp_clauses should be called.\n-   NESTED_P set if clauses should be terminated by closing paren instead\n-   of end of pragma.  */\n+   NESTED non-zero if clauses should be terminated by closing paren instead\n+   of end of pragma.  If it is 2, additionally commas are required in between\n+   the clauses.  */\n \n static tree\n cp_parser_omp_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t\t\t   const char *where, cp_token *pragma_tok,\n-\t\t\t   bool finish_p = true, bool nested_p = false)\n+\t\t\t   bool finish_p = true, int nested = 0)\n {\n   tree clauses = NULL;\n   bool first = true;\n@@ -36099,11 +36100,18 @@ cp_parser_omp_all_clauses (cp_parser *parser, omp_clause_mask mask,\n       const char *c_name;\n       tree prev = clauses;\n \n-      if (nested_p && cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_PAREN))\n+      if (nested && cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_PAREN))\n \tbreak;\n \n-      if (!first && cp_lexer_next_token_is (parser->lexer, CPP_COMMA))\n-\tcp_lexer_consume_token (parser->lexer);\n+      if (!first)\n+\t{\n+\t  if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))\n+\t    cp_lexer_consume_token (parser->lexer);\n+\t  else if (nested == 2)\n+\t    error_at (cp_lexer_peek_token (parser->lexer)->location,\n+\t\t      \"clauses in %<simd%> trait should be separated \"\n+                      \"by %<,%>\");\n+\t}\n \n       token = cp_lexer_peek_token (parser->lexer);\n       c_kind = cp_parser_omp_clause_name (parser);\n@@ -36421,7 +36429,7 @@ cp_parser_omp_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t}\n     }\n  saw_error:\n-  if (!nested_p)\n+  if (!nested)\n     cp_parser_skip_to_pragma_eol (parser, pragma_tok);\n   if (finish_p)\n     {\n@@ -40548,7 +40556,7 @@ cp_parser_omp_context_selector (cp_parser *parser, tree set, bool has_parms_p)\n \t      properties\n \t\t= cp_parser_omp_all_clauses (parser,\n \t\t\t\t\t     OMP_DECLARE_SIMD_CLAUSE_MASK,\n-\t\t\t\t\t     \"simd\", NULL, true, true);\n+\t\t\t\t\t     \"simd\", NULL, true, 2);\n \t      break;\n \t    default:\n \t      gcc_unreachable ();"}, {"sha": "5db77a788d5e00ea982fbb7f87139e9f2290fcc2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9424661f58de6c0aa9dc4c855c1fd913cc06282/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9424661f58de6c0aa9dc4c855c1fd913cc06282/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9424661f58de6c0aa9dc4c855c1fd913cc06282", "patch": "@@ -1,3 +1,8 @@\n+2019-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/declare-variant-7.c: Add tests for clauses not\n+\tseparated by commas in simd selector trait properties.\n+\n 2019-10-14  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gcc.dg/tree-ssa/evrp4.c: Adjust for unsigned non-zero being"}, {"sha": "1df63384dffea88d596794baf99beb40b0a19644", "filename": "gcc/testsuite/c-c++-common/gomp/declare-variant-7.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9424661f58de6c0aa9dc4c855c1fd913cc06282/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9424661f58de6c0aa9dc4c855c1fd913cc06282/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-7.c?ref=b9424661f58de6c0aa9dc4c855c1fd913cc06282", "patch": "@@ -27,7 +27,11 @@ int f10 (float x, float y, float *q);\n int f11 (float x, float y, float *z);\n #pragma omp declare variant (f3) match (construct={simd(simdlen(4),inbranch,linear(y:1))})\n int f12 (int x, int y);\n-#pragma omp declare variant (f3) match (construct={simd(inbranch,simdlen(5-1),linear(q:4-3))})\n+#pragma omp declare variant (f3) match (construct={simd(inbranch, simdlen (5-1), linear (q:4-3))})\n int f13 (int x, int q);\n #pragma omp declare variant (f3) match (construct={simd(inbranch,simdlen(4),linear(q:2))})\t\t/* { dg-error \"'f3' used as a variant with incompatible 'constructor' selector sets\" \"\" { target c } } */\n int f14 (int x, int q);\n+#pragma omp declare variant (f3) match (construct={simd(inbranch simdlen (4) linear (q:1))})\t\t/* { dg-error \"clauses in 'simd' trait should be separated by ','\" } */\n+int f15 (int x, int q);\n+#pragma omp declare variant (f3) match (construct={simd(inbranch, simdlen (5-1) linear (q:4-3))})\t/* { dg-error \"clauses in 'simd' trait should be separated by ','\" } */\n+int f16 (int x, int q);"}]}