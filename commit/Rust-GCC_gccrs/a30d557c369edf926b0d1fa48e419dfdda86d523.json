{"sha": "a30d557c369edf926b0d1fa48e419dfdda86d523", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMwZDU1N2MzNjllZGY5MjZiMGQxZmE0OGU0MTlkZmRkYTg2ZDUyMw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-04-14T20:28:54Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-04-14T20:28:54Z"}, "message": "graph.c (node_data): Return void.\n\n1999-04-14 23:26 -0400  Zack Weinberg  <zack@rabi.columbia.edu>\n\t* graph.c (node_data): Return void.  Ignore result of\n\tprint_rtl_single.  Change caller to match.\n\t* integrate.c (subst_constants): Initialize op0_mode to an\n\tinvalid mode, and abort before use if it's still invalid.\n\t(Can only happen if the RTX_CLASS, RTX_FORMAT tables are corrupted.)\n\t* objc/objc-act.c (get_objc_string_decl,\n\tbuild_selector_translation_table, generate_protocol_list,\n\tsynth_id_with_class_suffix, build_keyword_selector,\n\tbuild_selector_expr, gen_declarator): Abort when the tree\n\tstructure is corrupted.\n\nFrom-SVN: r26463", "tree": {"sha": "30c3f0597f0621506978887d289120c8b4def75a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30c3f0597f0621506978887d289120c8b4def75a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a30d557c369edf926b0d1fa48e419dfdda86d523", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30d557c369edf926b0d1fa48e419dfdda86d523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a30d557c369edf926b0d1fa48e419dfdda86d523", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30d557c369edf926b0d1fa48e419dfdda86d523/comments", "author": null, "committer": null, "parents": [{"sha": "d20a4159c39d75bb573a6d524f6f06b4a35eac2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d20a4159c39d75bb573a6d524f6f06b4a35eac2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d20a4159c39d75bb573a6d524f6f06b4a35eac2e"}], "stats": {"total": 112, "additions": 71, "deletions": 41}, "files": [{"sha": "9c216d05cb8ee4c4836694233806df7565b7f0b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 30, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30d557c369edf926b0d1fa48e419dfdda86d523/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30d557c369edf926b0d1fa48e419dfdda86d523/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a30d557c369edf926b0d1fa48e419dfdda86d523", "patch": "@@ -1,3 +1,16 @@\n+1999-04-14 23:26 -0400  Zack Weinberg  <zack@rabi.columbia.edu>\n+\n+\t* graph.c (node_data): Return void.  Ignore result of\n+\tprint_rtl_single.  Change caller to match.\n+\t* integrate.c (subst_constants): Initialize op0_mode to an \n+\tinvalid mode, and abort before use if it's still invalid.\n+\t(Can only happen if the RTX_CLASS, RTX_FORMAT tables are corrupted.)\n+\t* objc/objc-act.c (get_objc_string_decl,\n+\tbuild_selector_translation_table, generate_protocol_list,\n+\tsynth_id_with_class_suffix, build_keyword_selector,\n+\tbuild_selector_expr, gen_declarator): Abort when the tree\n+\tstructure is corrupted.\n+\n Wed Apr 14 19:57:49 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* configure.in (alpha interix): Use symbolic names to set\n@@ -20,39 +33,39 @@ Wed Apr 14 14:26:36 1999  John Wehle  (john@feith.com)\n \t* i386.md (truncxfdf): Output the template supplied\n \tby output_move_double with the correct operands.\n \n-        * i386.md (extendsfdf, extendsfxf, extenddfxf): Use\n-        output_float_extend instead specifying '#' as the template.\n-        * i386.c (output_float_extend): Define.\n-        * i386.h (output_float_extend): Declare.\n+\t* i386.md (extendsfdf, extendsfxf, extenddfxf): Use\n+\toutput_float_extend instead specifying '#' as the template.\n+\t* i386.c (output_float_extend): Define.\n+\t* i386.h (output_float_extend): Declare.\n \n Wed Apr 14 10:48:03 1999  Catherine Moore  <clm@cygnus.com>\n  \n-        * config/mips/elf.h, config/mips/elf64.h\n-        (CTORS_SECTION_ASM_OP): Define.\n-        (DTORS_SECTION_ASM_OP): Define.\n-        (EXTRA_SECTIONS): Define.\n-        (INVOKE__main): Define.\n-        (NAME__MAIN): Define.\n-        (SYMBOL__MAIN): Define.\n-        (EXTRA_SECTIONS_FUNCTIONS): Define.\n-        (SECTION_FUNCTION_TEMPLATE): Define.\n-        (ASM_OUTPUT_CONSTRUCTOR): Define.\n-        (ASM_OUTPUT_DESTRUCTOR): Define.\n-        (CTOR_LIST_BEGIN): Define.\n-        (CTOR_LIST_END): Define.\n-        (DTOR_LIST_BEGIN): Define.\n-        (DTOR_LIST_END): Define.\n-        (LIB_SPEC): Define.\n-        (STARTFILE_SPEC): Define.\n-        (ENDFILE_SPEC): Define.\n-        * config/mips/linux.h:  Undefine all of the above.\n-        * config/mips/rtems64.h: Likewise.\n-        * config/mips/t-r3900: Likewise.\n-        * config/mips/t-elf: New file.\n-        * config/mips/vxworks.h: New file.\n-        * configure.in (mips-wrs-vxworks): Use mips/vxworks.h.\n-        (mips*-*-*elf*):  Use t-elf instead of t-ecoff.\n-        * configure: Regenerate.\n+\t* config/mips/elf.h, config/mips/elf64.h\n+\t(CTORS_SECTION_ASM_OP): Define.\n+\t(DTORS_SECTION_ASM_OP): Define.\n+\t(EXTRA_SECTIONS): Define.\n+\t(INVOKE__main): Define.\n+\t(NAME__MAIN): Define.\n+\t(SYMBOL__MAIN): Define.\n+\t(EXTRA_SECTIONS_FUNCTIONS): Define.\n+\t(SECTION_FUNCTION_TEMPLATE): Define.\n+\t(ASM_OUTPUT_CONSTRUCTOR): Define.\n+\t(ASM_OUTPUT_DESTRUCTOR): Define.\n+\t(CTOR_LIST_BEGIN): Define.\n+\t(CTOR_LIST_END): Define.\n+\t(DTOR_LIST_BEGIN): Define.\n+\t(DTOR_LIST_END): Define.\n+\t(LIB_SPEC): Define.\n+\t(STARTFILE_SPEC): Define.\n+\t(ENDFILE_SPEC): Define.\n+\t* config/mips/linux.h:  Undefine all of the above.\n+\t* config/mips/rtems64.h: Likewise.\n+\t* config/mips/t-r3900: Likewise.\n+\t* config/mips/t-elf: New file.\n+\t* config/mips/vxworks.h: New file.\n+\t* configure.in (mips-wrs-vxworks): Use mips/vxworks.h.\n+\t(mips*-*-*elf*):  Use t-elf instead of t-ecoff.\n+\t* configure: Regenerate.\n \n Wed Apr 14 09:59:38 1999  Richard Henderson  <rth@cygnus.com>\n "}, {"sha": "f586314bb31eb6e177924e512de863b607ff4462", "filename": "gcc/graph.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30d557c369edf926b0d1fa48e419dfdda86d523/gcc%2Fgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30d557c369edf926b0d1fa48e419dfdda86d523/gcc%2Fgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.c?ref=a30d557c369edf926b0d1fa48e419dfdda86d523", "patch": "@@ -94,12 +94,11 @@ label: \\\"basic block %d\",\n     }\n }\n \n-static int\n+static void\n node_data (fp, tmp_rtx)\n      FILE *fp;\n      rtx tmp_rtx;\n {\n-  int result;\n \n   if (PREV_INSN (tmp_rtx) == 0)\n     {\n@@ -168,9 +167,9 @@ darkgrey\\n  shape: ellipse\" : \"white\",\n \t       XINT (tmp_rtx, 4) < 0 ? note_names[-XINT (tmp_rtx, 4)] : \"\");\n     }\n   else if (GET_RTX_CLASS (GET_CODE (tmp_rtx)) == 'i')\n-    result = print_rtl_single (fp, PATTERN (tmp_rtx));\n+    print_rtl_single (fp, PATTERN (tmp_rtx));\n   else\n-    result = print_rtl_single (fp, tmp_rtx);\n+    print_rtl_single (fp, tmp_rtx);\n \n   switch (graph_dump_format)\n     {\n@@ -180,8 +179,6 @@ darkgrey\\n  shape: ellipse\" : \"white\",\n     case no_graph:\n       break;\n     }\n-\n-  return result;\n }\n \n static void\n@@ -316,7 +313,6 @@ print_rtl_graph_with_bb (base, suffix, rtx_first)\n       for (tmp_rtx = NEXT_INSN (rtx_first); NULL != tmp_rtx;\n \t   tmp_rtx = NEXT_INSN (tmp_rtx))\n \t{\n-\t  int did_output;\n \t  int edge_printed = 0;\n \t  rtx next_insn;\n \n@@ -339,7 +335,7 @@ print_rtl_graph_with_bb (base, suffix, rtx_first)\n \t    }\n \n \t  /* Print the data for this node.  */\n-\t  did_output = node_data (fp, tmp_rtx);\n+\t  node_data (fp, tmp_rtx);\n \t  next_insn = next_nonnote_insn (tmp_rtx);\n \n \t  if ((i = end[INSN_UID (tmp_rtx)]) >= 0)"}, {"sha": "76f71441e5563317066cc533b9e6734f4a627c08", "filename": "gcc/integrate.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30d557c369edf926b0d1fa48e419dfdda86d523/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30d557c369edf926b0d1fa48e419dfdda86d523/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=a30d557c369edf926b0d1fa48e419dfdda86d523", "patch": "@@ -2853,7 +2853,7 @@ subst_constants (loc, insn, map)\n   register char *format_ptr;\n   int num_changes = num_validated_changes ();\n   rtx new = 0;\n-  enum machine_mode op0_mode;\n+  enum machine_mode op0_mode = MAX_MACHINE_MODE;\n \n   code = GET_CODE (x);\n \n@@ -3067,6 +3067,8 @@ subst_constants (loc, insn, map)\n   switch (GET_RTX_CLASS (code))\n     {\n     case '1':\n+      if (op0_mode == MAX_MACHINE_MODE)\n+\tabort ();\n       new = simplify_unary_operation (code, GET_MODE (x),\n \t\t\t\t      XEXP (x, 0), op0_mode);\n       break;\n@@ -3095,6 +3097,8 @@ subst_constants (loc, insn, map)\n \n     case 'b':\n     case '3':\n+      if (op0_mode == MAX_MACHINE_MODE)\n+\tabort ();\n       new = simplify_ternary_operation (code, GET_MODE (x), op0_mode,\n \t\t\t\t\tXEXP (x, 0), XEXP (x, 1), XEXP (x, 2));\n       break;"}, {"sha": "a2842c8c52a5b6b2ce9a3b2120bb44c28765042a", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30d557c369edf926b0d1fa48e419dfdda86d523/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30d557c369edf926b0d1fa48e419dfdda86d523/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=a30d557c369edf926b0d1fa48e419dfdda86d523", "patch": "@@ -1858,6 +1858,8 @@ get_objc_string_decl (ident, section)\n     chain = meth_var_names_chain;\n   else if (section == meth_var_types)\n     chain = meth_var_types_chain;\n+  else\n+    abort ();\n \n   for (; chain != 0; chain = TREE_VALUE (chain))\n     if (TREE_VALUE (chain) == ident)\n@@ -2081,7 +2083,7 @@ build_selector_translation_table ()\n   tree sc_spec, decl_specs;\n   tree chain, initlist = NULL_TREE;\n   int offset = 0;\n-  tree decl, var_decl, name;\n+  tree decl = NULL_TREE, var_decl, name;\n \n   /* The corresponding pop_obstacks is in finish_decl,\n      called at the end of this function.  */\n@@ -2353,6 +2355,8 @@ add_objc_string (ident, section)\n     chain = &meth_var_names_chain;\n   else if (section == meth_var_types)\n     chain = &meth_var_types_chain;\n+  else\n+    abort ();\n \n   while (*chain)\n     {\n@@ -4222,6 +4226,8 @@ generate_protocol_list (i_or_p)\n \t\t  synth_id_with_class_suffix (\"_OBJC_CATEGORY_PROTOCOLS\",\n \t\t\t\t\t      i_or_p),\n \t\t  build_int_2 (size + 2, 0));\n+  else\n+    abort ();\n \n   expr_decl = build1 (INDIRECT_REF, NULL_TREE, expr_decl);\n \n@@ -4599,6 +4605,9 @@ synth_id_with_class_suffix (preamble, ctxt)\n \t= (char *) alloca (strlen (preamble) + strlen (protocol_name) + 3);\n       sprintf (string, \"%s_%s\", preamble, protocol_name);\n     }\n+  else\n+    abort ();\n+  \n   return get_identifier (string);\n }\n \n@@ -4700,6 +4709,8 @@ build_keyword_selector (selector)\n \tkey_name = KEYWORD_KEY_NAME (key_chain);\n       else if (TREE_CODE (selector) == TREE_LIST)\n \tkey_name = TREE_PURPOSE (key_chain);\n+      else\n+\tabort ();\n \n       if (key_name)\n \tlen += IDENTIFIER_LENGTH (key_name) + 1;\n@@ -4717,6 +4728,8 @@ build_keyword_selector (selector)\n \tkey_name = KEYWORD_KEY_NAME (key_chain);\n       else if (TREE_CODE (selector) == TREE_LIST)\n \tkey_name = TREE_PURPOSE (key_chain);\n+      else\n+\tabort ();\n \n       if (key_name)\n \tstrcat (buf, IDENTIFIER_POINTER (key_name));\n@@ -4969,6 +4982,8 @@ build_message_expr (mess)\n     sel_name = args;\n   else if (TREE_CODE (args) == TREE_LIST)\n     sel_name = build_keyword_selector (args);\n+  else\n+    abort ();\n \n   /* Build the parameter list to give to the method.  */\n \n@@ -5375,6 +5390,8 @@ build_selector_expr (selnamelist)\n     selname = selnamelist;\n   else if (TREE_CODE (selnamelist) == TREE_LIST)\n     selname = build_keyword_selector (selnamelist);\n+  else\n+    abort ();\n \n   if (flag_typed_selectors)\n     return build_typed_selector_reference (selname, 0);\n@@ -7635,7 +7652,7 @@ gen_declarator (decl, buf, name)\n \t  return buf;\n \n \tdefault:\n-\t  break;\n+\t  abort ();\n \t}\n \n       return str;"}]}