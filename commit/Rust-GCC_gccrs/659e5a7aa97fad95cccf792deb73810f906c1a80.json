{"sha": "659e5a7aa97fad95cccf792deb73810f906c1a80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU5ZTVhN2FhOTdmYWQ5NWNjY2Y3OTJkZWI3MzgxMGY5MDZjMWE4MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-04-04T00:11:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-04-04T00:11:00Z"}, "message": "re PR c++/5636 (gcc-3.0.3, memory leakage: function that take a string as parameter will not call local variable destructors if exception is thrown.)\n\n        PR c++/5636\n        * tree.h (CLEANUP_EH_ONLY): New macro.\n        * stmt.c (expand_decl_cleanup_eh): New fn.\n        (expand_cleanups): Check CLEANUP_EH_ONLY.\n        * c-semantics.c (genrtl_decl_cleanup): Just take the CLEANUP_STMT.\n        Use expand_decl_cleanup_eh.\n        (expand_stmt): Adjust.\n        * c-common.h: Adjust prototype.\n        * cp/semantics.c (nullify_returns_r): Just set CLEANUP_EH_ONLY on\n        cleanup for nrv.\n\n        * except.c (struct eh_status): Remove protect_list.\n        (begin_protect_partials, end_protect_partials): Remove.\n        (add_partial_entry): Remove.\n        * except.h: Remove prototypes.\n\n        * expr.c (expand_expr) [WITH_CLEANUP_EXPR, TARGET_EXPR]: Use\n        expand_decl_cleanup_eh.\n\ncp/:\n        * semantics.c (finish_eh_cleanup): New fn.\n        * cp-tree.h: Add prototype.\n        * init.c (perform_member_init, expand_cleanup_for_base): Use\n        finish_eh_cleanup.\n        * cp-tree.def (SUBOBJECT, CTOR_STMT): Remove.\n        * cp-tree.h: Remove references.\n        * decl.c (begin_constructor_body, end_constructor_body): Likewise.\n        * dump.c (cp_dump_tree): Likewise.\n        * pt.c (tsubst_expr): Likewise.\n        * semantics.c (genrtl_ctor_stmt, genrtl_subobject): Remove.\n        (cp_expand_stmt): Remove handling of CTOR_STMT and SUBOBJECT.\n        * tree.c (cp_statement_code_p): Likewise.\n\n        * init.c (build_new_1): Set CLEANUP_EH_ONLY on deleting cleanup.\n\nFrom-SVN: r51827", "tree": {"sha": "e7c013fd4dcc1ce433e1cbcd41032def785b9193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7c013fd4dcc1ce433e1cbcd41032def785b9193"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/659e5a7aa97fad95cccf792deb73810f906c1a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/659e5a7aa97fad95cccf792deb73810f906c1a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/659e5a7aa97fad95cccf792deb73810f906c1a80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/659e5a7aa97fad95cccf792deb73810f906c1a80/comments", "author": null, "committer": null, "parents": [{"sha": "053d3344d411a28cb7d59ea924e7e81caa0255e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053d3344d411a28cb7d59ea924e7e81caa0255e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053d3344d411a28cb7d59ea924e7e81caa0255e8"}], "stats": {"total": 302, "additions": 120, "deletions": 182}, "files": [{"sha": "57e66e4c992edc0d6f6cfa89b55bebfd2d6d87fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -1,3 +1,22 @@\n+2002-04-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* except.c (struct eh_status): Remove protect_list.\n+\t(begin_protect_partials, end_protect_partials): Remove.\n+\t(add_partial_entry): Remove.\n+\t* except.h: Remove prototypes.\n+\n+\t* expr.c (expand_expr) [WITH_CLEANUP_EXPR, TARGET_EXPR]: Use\n+\texpand_decl_cleanup_eh.\n+\n+\tPR c++/5636\n+\t* tree.h (CLEANUP_EH_ONLY): New macro.\n+\t* stmt.c (expand_decl_cleanup_eh): New fn.\n+\t(expand_cleanups): Check CLEANUP_EH_ONLY.\n+\t* c-semantics.c (genrtl_decl_cleanup): Just take the CLEANUP_STMT.\n+\tUse expand_decl_cleanup_eh.\n+\t(expand_stmt): Adjust.\n+\t* c-common.h: Adjust prototype.\n+\n 2002-04-04  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.c (cris_target_asm_function_prologue): Cast\n@@ -1497,7 +1516,7 @@ Fri Mar 22 12:08:36 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* flags.h (flag_really_no_inline): New.\n \n-\t* c-common.c (c_common_post_options): Initialzie\n+\t* c-common.c (c_common_post_options): Initialize\n \tflag_really_no_inline.\n \n \t* toplev.c (flag_really_no_inline): New."}, {"sha": "cb49b529e80c4a88acac329308ce55cd81f52281", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -765,7 +765,7 @@ extern void genrtl_compound_stmt                PARAMS ((tree));\n extern void genrtl_asm_stmt                     PARAMS ((tree, tree,\n \t\t\t\t\t\t\t tree, tree,\n \t\t\t\t\t\t\t tree, int));\n-extern void genrtl_decl_cleanup                 PARAMS ((tree, tree));\n+extern void genrtl_decl_cleanup                 PARAMS ((tree));\n extern int stmts_are_full_exprs_p               PARAMS ((void));\n extern int anon_aggr_type_p                     PARAMS ((tree));\n "}, {"sha": "030a04cb00954479b72642427f45b8b526ed2335", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -737,12 +737,12 @@ genrtl_asm_stmt (cv_qualifier, string, output_operands,\n /* Generate the RTL for a DECL_CLEANUP.  */\n \n void \n-genrtl_decl_cleanup (decl, cleanup)\n-     tree decl;\n-     tree cleanup;\n+genrtl_decl_cleanup (t)\n+     tree t;\n {\n+  tree decl = CLEANUP_DECL (t);\n   if (!decl || (DECL_SIZE (decl) && TREE_TYPE (decl) != error_mark_node))\n-    expand_decl_cleanup (decl, cleanup);\n+    expand_decl_cleanup_eh (decl, CLEANUP_EXPR (t), CLEANUP_EH_ONLY (t));\n }\n \n /* We're about to expand T, a statement.  Set up appropriate context\n@@ -848,7 +848,7 @@ expand_stmt (t)\n \t  break;\n \n \tcase CLEANUP_STMT:\n-\t  genrtl_decl_cleanup (CLEANUP_DECL (t), CLEANUP_EXPR (t));\n+\t  genrtl_decl_cleanup (t);\n \t  break;\n \n \tdefault:"}, {"sha": "756d2b30c63115cdfcdf3d64552b2bd0d9bb902a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -1,5 +1,24 @@\n 2002-04-04  Jason Merrill  <jason@redhat.com>\n \n+\t* semantics.c (finish_eh_cleanup): New fn.\n+\t* cp-tree.h: Add prototype.\n+\t* init.c (perform_member_init, expand_cleanup_for_base): Use \n+\tfinish_eh_cleanup.\n+\t* cp-tree.def (SUBOBJECT, CTOR_STMT): Remove.\n+\t* cp-tree.h: Remove references.\n+\t* decl.c (begin_constructor_body, end_constructor_body): Likewise.\n+\t* dump.c (cp_dump_tree): Likewise.\n+\t* pt.c (tsubst_expr): Likewise.\n+\t* semantics.c (genrtl_ctor_stmt, genrtl_subobject): Remove.\n+\t(cp_expand_stmt): Remove handling of CTOR_STMT and SUBOBJECT.\n+\t* tree.c (cp_statement_code_p): Likewise.\n+\n+\t* init.c (build_new_1): Set CLEANUP_EH_ONLY on deleting cleanup.\n+\n+\tPR c++/5636\n+\t* semantics.c (nullify_returns_r): Just set CLEANUP_EH_ONLY on\n+\tcleanup for nrv.\n+\n \tPR c++/5104\n \t* typeck.c (comptypes) [FUNCTION_TYPE]: Don't compare exception\n \tspecifiers."}, {"sha": "1bf4c0d2ec63ad8c206408019e586fe67dd66fe8", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -220,16 +220,6 @@ DEFTREECODE (DOTSTAR_EXPR, \"dotstar_expr\", 'e', 2)\n DEFTREECODE (TYPEID_EXPR, \"typeid_expr\", 'e', 1)\n DEFTREECODE (PSEUDO_DTOR_EXPR, \"pseudo_dtor_expr\", 'e', 3)\n \n-/* A SUBOBJECT statement marks the point at which a sub-object is\n-   fully constructed.  After this point, the SUBOBJECT_CLEANUP must be\n-   run if an exception is thrown before the end of the enclosing\n-   function.  */\n-DEFTREECODE (SUBOBJECT, \"subobject\", 'e', 1)\n-/* An CTOR_STMT marks the beginning (if CTOR_BEGIN_P holds) or end of\n-   a constructor (if CTOR_END_P) holds.  At the end of a constructor,\n-   the cleanups associated with any SUBOBJECT_CLEANUPS need no longer\n-   be run.  */\n-DEFTREECODE (CTOR_STMT, \"ctor_stmt\", 'e', 0)\n /* CTOR_INITIALIZER is a placeholder in template code for a call to\n    setup_vtbl_pointer (and appears in all functions, not just ctors).  */\n DEFTREECODE (CTOR_INITIALIZER, \"ctor_initializer\", 'e', 2)"}, {"sha": "b65467bae1d58314c5b7ec300426a49f951b6824", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -47,7 +47,6 @@ struct diagnostic_context;\n       ICS_USER_FLAG (in _CONV)\n       CLEANUP_P (in TRY_BLOCK)\n       AGGR_INIT_VIA_CTOR_P (in AGGR_INIT_EXPR)\n-      CTOR_BEGIN_P (in CTOR_STMT)\n       BV_USE_VCALL_INDEX_P (in the BINFO_VIRTUALS TREE_LIST)\n       PTRMEM_OK_P (in ADDR_EXPR, OFFSET_REF)\n       PARMLIST_ELLIPSIS_P (in PARMLIST)\n@@ -2969,15 +2968,6 @@ enum ptrmemfunc_vbit_where_t\n #define HANDLER_PARMS(NODE)     TREE_OPERAND (HANDLER_CHECK (NODE), 0)\n #define HANDLER_BODY(NODE)      TREE_OPERAND (HANDLER_CHECK (NODE), 1)\n #define HANDLER_TYPE(NODE)\tTREE_TYPE (HANDLER_CHECK (NODE))\n-#define SUBOBJECT_CLEANUP(NODE) TREE_OPERAND (SUBOBJECT_CHECK (NODE), 0)\n-\n-/* Nonzero if this CTOR_STMT is for the beginning of a constructor.  */\n-#define CTOR_BEGIN_P(NODE) \\\n-  (TREE_LANG_FLAG_0 (CTOR_STMT_CHECK (NODE)))\n-\n-/* Nonzero if this CTOR_STMT is for the end of a constructor.  */\n-#define CTOR_END_P(NODE) \\\n-  (!CTOR_BEGIN_P (NODE))\n \n /* The parameters for a call-declarator.  */\n #define CALL_DECLARATOR_PARMS(NODE) \\\n@@ -4217,6 +4207,7 @@ extern tree finish_typeof\t\t\tPARAMS ((tree));\n extern tree finish_sizeof\t\t\tPARAMS ((tree));\n extern tree finish_alignof\t\t\tPARAMS ((tree));\n extern void finish_decl_cleanup                 PARAMS ((tree, tree));\n+extern void finish_eh_cleanup                   PARAMS ((tree));\n extern void finish_named_return_value           PARAMS ((tree, tree));\n extern void expand_body                         PARAMS ((tree));\n extern tree nullify_returns_r\t\t      PARAMS ((tree *, int *, void *));"}, {"sha": "78f1b14a7f385a4c4e79198811a3a732bed53c4b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -13948,9 +13948,6 @@ save_function_data (decl)\n static void\n begin_constructor_body ()\n {\n-  tree ctor_stmt = build_stmt (CTOR_STMT);\n-  CTOR_BEGIN_P (ctor_stmt) = 1;\n-  add_stmt (ctor_stmt);\n }\n \n /* Add a note to mark the end of the main body of the constructor.  This is\n@@ -13960,12 +13957,6 @@ begin_constructor_body ()\n static void\n finish_constructor_body ()\n {\n-  /* Mark the end of the cleanups for a partially constructed object.\n-\n-     ??? These should really be handled automatically by closing the block,\n-     as with the destructor cleanups; the only difference is that these are\n-     only run if an exception is thrown.  */\n-  add_stmt (build_stmt (CTOR_STMT));\n }\n \n /* Do all the processing for the beginning of a destructor; set up the"}, {"sha": "e0bc410bcae0cd90e739b7c809d237dfd1ee6efb", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -390,15 +390,6 @@ cp_dump_tree (dump_info, t)\n       dump_child (\"decl\", TREE_OPERAND (t, 2));\n       break;\n       \n-    case CTOR_STMT:\n-      dump_stmt (di, t);\n-      if (CTOR_BEGIN_P (t))\n-\tdump_string (di, \"begn\");\n-      else\n-\tdump_string (di, \"end\");\n-      dump_next_stmt (di, t);\n-      break;\n-\n     case HANDLER:\n       dump_stmt (di, t);\n       dump_child (\"parm\", HANDLER_PARMS (t));\n@@ -412,12 +403,6 @@ cp_dump_tree (dump_info, t)\n       dump_next_stmt (di, t);\n       break;\n \n-    case SUBOBJECT:\n-      dump_stmt (di, t);\n-      dump_child (\"clnp\", TREE_OPERAND (t, 0));\n-      dump_next_stmt (di, t);\n-      break;\n-\n     case USING_STMT:\n       dump_stmt (di, t);\n       dump_child (\"nmsp\", USING_STMT_NAMESPACE (t));"}, {"sha": "8b7e1f239a43678ade683c0e494a379e15893be7", "filename": "gcc/cp/init.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -296,7 +296,7 @@ perform_member_init (member, init, explicit)\n \t\t\t   LOOKUP_NONVIRTUAL|LOOKUP_DESTRUCTOR, 0);\n \n       if (expr != error_mark_node)\n-\tfinish_subobject (expr);\n+\tfinish_eh_cleanup (expr);\n     }\n }\n \n@@ -844,7 +844,7 @@ expand_cleanup_for_base (binfo, flag)\n \t\t\ttruthvalue_conversion (flag),\n \t\t\texpr, integer_zero_node));\n \n-  finish_subobject (expr);\n+  finish_eh_cleanup (expr);\n }\n \n /* Subroutine of `expand_aggr_vbase_init'.\n@@ -2498,9 +2498,11 @@ build_new_1 (exp)\n \t      tree end, sentry, begin;\n \n \t      begin = get_target_expr (boolean_true_node);\n-\t      sentry = TREE_OPERAND (begin, 0);\n+\t      CLEANUP_EH_ONLY (begin) = 1;\n \n-\t      TREE_OPERAND (begin, 2)\n+\t      sentry = TARGET_EXPR_SLOT (begin);\n+\n+\t      TARGET_EXPR_CLEANUP (begin)\n \t\t= build (COND_EXPR, void_type_node, sentry,\n \t\t\t cleanup, void_zero_node);\n "}, {"sha": "b7057830686ebad93e37bbf70f7aefcbc2e70d84", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -7584,10 +7584,6 @@ tsubst_expr (t, args, complain, in_decl)\n       tsubst (TREE_TYPE (t), args, complain, NULL_TREE);\n       break;\n \n-    case CTOR_STMT:\n-      add_stmt (copy_node (t));\n-      break;\n-\n     default:\n       abort ();\n     }"}, {"sha": "ee609f45363366a7d99eb625bd341b347d4489a9", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 11, "deletions": 46, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -56,8 +56,6 @@ static void emit_associated_thunks PARAMS ((tree));\n static void genrtl_try_block PARAMS ((tree));\n static void genrtl_eh_spec_block PARAMS ((tree));\n static void genrtl_handler PARAMS ((tree));\n-static void genrtl_ctor_stmt PARAMS ((tree));\n-static void genrtl_subobject PARAMS ((tree));\n static void genrtl_named_return_value PARAMS ((void));\n static void cp_expand_stmt PARAMS ((tree));\n static void genrtl_start_function PARAMS ((tree));\n@@ -777,21 +775,6 @@ finish_handler (handler)\n   RECHAIN_STMTS (handler, HANDLER_BODY (handler));\n }\n \n-/* Generate the RTL for T, which is a CTOR_STMT. */\n-\n-static void\n-genrtl_ctor_stmt (t)\n-     tree t;\n-{\n-  if (CTOR_BEGIN_P (t))\n-    begin_protect_partials ();\n-  else\n-    /* After this point, any exceptions will cause the\n-       destructor to be executed, so we no longer need to worry\n-       about destroying the various subobjects ourselves.  */\n-    end_protect_partials ();\n-}\n-\n /* Begin a compound-statement.  If HAS_NO_SCOPE is non-zero, the\n    compound-statement does not define a scope.  Returns a new\n    COMPOUND_STMT if appropriate.  */\n@@ -976,35 +959,25 @@ finish_label_decl (name)\n   add_decl_stmt (decl);\n }\n \n-/* Generate the RTL for a SUBOBJECT. */\n-\n-static void \n-genrtl_subobject (cleanup)\n-     tree cleanup;\n-{\n-  add_partial_entry (cleanup);\n-}\n-\n-/* We're in a constructor, and have just constructed a a subobject of\n-   *THIS.  CLEANUP is code to run if an exception is thrown before the\n-   end of the current function is reached.   */\n+/* When DECL goes out of scope, make sure that CLEANUP is executed.  */\n \n void \n-finish_subobject (cleanup)\n+finish_decl_cleanup (decl, cleanup)\n+     tree decl;\n      tree cleanup;\n {\n-  tree r = build_stmt (SUBOBJECT, cleanup);\n-  add_stmt (r);\n+  add_stmt (build_stmt (CLEANUP_STMT, decl, cleanup));\n }\n \n-/* When DECL goes out of scope, make sure that CLEANUP is executed.  */\n+/* If the current scope exits with an exception, run CLEANUP.  */\n \n-void \n-finish_decl_cleanup (decl, cleanup)\n-     tree decl;\n+void\n+finish_eh_cleanup (cleanup)\n      tree cleanup;\n {\n-  add_stmt (build_stmt (CLEANUP_STMT, decl, cleanup));\n+  tree r = build_stmt (CLEANUP_STMT, NULL_TREE, cleanup);\n+  CLEANUP_EH_ONLY (r) = 1;\n+  add_stmt (r);\n }\n \n /* Generate the RTL for a RETURN_INIT. */\n@@ -2130,10 +2103,6 @@ cp_expand_stmt (t)\n {\n   switch (TREE_CODE (t))\n     {\n-    case CTOR_STMT:\n-      genrtl_ctor_stmt (t);\n-      break;\n-\n     case TRY_BLOCK:\n       genrtl_try_block (t);\n       break;\n@@ -2146,10 +2115,6 @@ cp_expand_stmt (t)\n       genrtl_handler (t);\n       break;\n \n-    case SUBOBJECT:\n-      genrtl_subobject (SUBOBJECT_CLEANUP (t));\n-      break;\n-\n     case RETURN_INIT:\n       genrtl_named_return_value ();\n       break;\n@@ -2458,7 +2423,7 @@ nullify_returns_r (tp, walk_subtrees, data)\n     RETURN_EXPR (*tp) = NULL_TREE;\n   else if (TREE_CODE (*tp) == CLEANUP_STMT\n \t   && CLEANUP_DECL (*tp) == nrv)\n-    CLEANUP_EXPR (*tp) = NULL_TREE;\n+    CLEANUP_EH_ONLY (*tp) = 1;\n \n   /* Keep iterating.  */\n   return NULL_TREE;"}, {"sha": "e0f736174499ad98774d4166101ce88b0159a1a9", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -1030,8 +1030,6 @@ cp_statement_code_p (code)\n {\n   switch (code)\n     {\n-    case SUBOBJECT:\n-    case CTOR_STMT:\n     case CTOR_INITIALIZER:\n     case RETURN_INIT:\n     case TRY_BLOCK:"}, {"sha": "e5079f99e0dcf637203c39fcab30555da83b61b2", "filename": "gcc/except.c", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -214,12 +214,6 @@ struct eh_status\n   /* This is the region for which we are processing catch blocks.  */\n   struct eh_region *try_region;\n \n-  /* A stack (TREE_LIST) of lists of handlers.  The TREE_VALUE of each\n-     node is itself a TREE_CHAINed list of handlers for regions that\n-     are not yet closed. The TREE_VALUE of each entry contains the\n-     handler for the corresponding entry on the ehstack.  */\n-  tree protect_list;\n-\n   rtx filter;\n   rtx exc_ptr;\n \n@@ -560,7 +554,6 @@ mark_eh_status (eh)\n     tree_done:;\n     }\n \n-  ggc_mark_tree (eh->protect_list);\n   ggc_mark_rtx (eh->filter);\n   ggc_mark_rtx (eh->exc_ptr);\n   ggc_mark_tree_varray (eh->ttype_data);\n@@ -1011,55 +1004,6 @@ get_exception_filter (fun)\n     }\n   return filter;\n }\n-\f\n-/* Begin a region that will contain entries created with\n-   add_partial_entry.  */\n-\n-void\n-begin_protect_partials ()\n-{\n-  /* Push room for a new list.  */\n-  cfun->eh->protect_list\n-    = tree_cons (NULL_TREE, NULL_TREE, cfun->eh->protect_list);\n-}\n-\n-/* Start a new exception region for a region of code that has a\n-   cleanup action and push the HANDLER for the region onto\n-   protect_list. All of the regions created with add_partial_entry\n-   will be ended when end_protect_partials is invoked.\n-\n-   ??? The only difference between this purpose and that of\n-   expand_decl_cleanup is that in this case, we only want the cleanup to\n-   run if an exception is thrown.  This should also be handled using\n-   binding levels.  */\n-\n-void\n-add_partial_entry (handler)\n-     tree handler;\n-{\n-  expand_eh_region_start ();\n-\n-  /* Add this entry to the front of the list.  */\n-  TREE_VALUE (cfun->eh->protect_list)\n-    = tree_cons (NULL_TREE, handler, TREE_VALUE (cfun->eh->protect_list));\n-}\n-\n-/* End all the pending exception regions on protect_list.  */\n-\n-void\n-end_protect_partials ()\n-{\n-  tree t;\n-\n-  /* Pop the topmost entry.  */\n-  t = TREE_VALUE (cfun->eh->protect_list);\n-  cfun->eh->protect_list = TREE_CHAIN (cfun->eh->protect_list);\n-\n-  /* End all the exception regions.  */\n-  for (; t; t = TREE_CHAIN (t))\n-    expand_eh_region_end_cleanup (TREE_VALUE (t));\n-}\n-\n \f\n /* This section is for the exception handling specific optimization pass.  */\n "}, {"sha": "200210f31bc852392f93f2d17cc8553999b730ff", "filename": "gcc/except.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -83,20 +83,6 @@ extern void expand_eh_region_end_throw\t\tPARAMS ((tree));\n    destroying an object twice.  */\n extern void expand_eh_region_end_fixup\t\tPARAMS ((tree));\n \n-/* Begin a region that will contain entries created with\n-   add_partial_entry.  */\n-extern void begin_protect_partials              PARAMS ((void));\n-\n-/* Create a new exception region and add the handler for the region\n-   onto a list. These regions will be ended (and their handlers emitted)\n-   when end_protect_partials is invoked.  */\n-extern void add_partial_entry\t\t\tPARAMS ((tree));\n-\n-/* End all of the pending exception regions that have handlers added with\n-   add_partial_entry.  */\n-extern void end_protect_partials\t\tPARAMS ((void));\n-\n-\n /* A list of labels used for exception handlers.  */\n extern rtx exception_handler_labels;\n "}, {"sha": "066b454a735e19a452eadf04d7fc3fe12d5559be", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -7209,7 +7209,8 @@ expand_expr (exp, target, tmode, modifier)\n \t{\n \t  WITH_CLEANUP_EXPR_RTL (exp)\n \t    = expand_expr (TREE_OPERAND (exp, 0), target, tmode, modifier);\n-\t  expand_decl_cleanup (NULL_TREE, TREE_OPERAND (exp, 1));\n+\t  expand_decl_cleanup_eh (NULL_TREE, TREE_OPERAND (exp, 1),\n+\t\t\t\t  CLEANUP_EH_ONLY (exp));\n \n \t  /* That's it for this cleanup.  */\n \t  TREE_OPERAND (exp, 1) = 0;\n@@ -8422,7 +8423,7 @@ expand_expr (exp, target, tmode, modifier)\n \n \tstore_expr (exp1, target, 0);\n \n-\texpand_decl_cleanup (NULL_TREE, cleanups);\n+\texpand_decl_cleanup_eh (NULL_TREE, cleanups, CLEANUP_EH_ONLY (exp));\n \n \treturn target;\n       }"}, {"sha": "2e8aeb628c67668ef44262a88a0368cea6783211", "filename": "gcc/stmt.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -4169,6 +4169,23 @@ expand_decl_cleanup (decl, cleanup)\n     }\n   return 1;\n }\n+\n+/* Like expand_decl_cleanup, but maybe only run the cleanup if an exception\n+   is thrown.  */\n+\n+int\n+expand_decl_cleanup_eh (decl, cleanup, eh_only)\n+     tree decl, cleanup;\n+     int eh_only;\n+{\n+  int ret = expand_decl_cleanup (decl, cleanup);\n+  if (cleanup && ret)\n+    {\n+      tree node = block_stack->data.block.cleanups;\n+      CLEANUP_EH_ONLY (node) = eh_only;\n+    }\n+  return ret;\n+}\n \f\n /* DECL is an anonymous union.  CLEANUP is a cleanup for DECL.\n    DECL_ELTS is the list of elements that belong to DECL's type.\n@@ -4277,7 +4294,7 @@ expand_cleanups (list, dont_do, in_fixup, reachable)\n \t    if (! in_fixup && using_eh_for_cleanups_p)\n \t      expand_eh_region_end_cleanup (TREE_VALUE (tail));\n \n-\t    if (reachable)\n+\t    if (reachable && !CLEANUP_EH_ONLY (tail))\n \t      {\n \t\t/* Cleanups may be run multiple times.  For example,\n \t\t   when exiting a binding contour, we expand the"}, {"sha": "e2457e87e65b2638b7be04ce67272ccbbb1f8685", "filename": "gcc/testsuite/g++.dg/eh/nrv1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fnrv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fnrv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fnrv1.C?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/5636\n+// Bug: the named return value optimization interfered with EH cleanups.\n+\n+int c, d;\n+\n+struct A\n+{\n+  A() { ++c; }\n+  ~A() { ++d; }\n+};\n+\n+A f()\n+{\n+  A nrv;\n+  throw 42;\n+  return nrv;\n+}\n+\n+int main()\n+{\n+  try\n+    { A a = f(); }\n+  catch (...) { }\n+  return (d < c);\n+}"}, {"sha": "950463f637279cea0266ebc640885dad3951ecab", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659e5a7aa97fad95cccf792deb73810f906c1a80/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=659e5a7aa97fad95cccf792deb73810f906c1a80", "patch": "@@ -177,6 +177,9 @@ struct tree_common\n            INTEGER_CST, REAL_CST, COMPLEX_CST, VECTOR_CST\n        TREE_SYMBOL_REFERENCED in\n            IDENTIFIER_NODE\n+       CLEANUP_EH_ONLY in\n+           TARGET_EXPR, WITH_CLEANUP_EXPR, CLEANUP_STMT,\n+\t   TREE_LIST elements of a block's cleanup list.\n \n    public_flag:\n \n@@ -194,7 +197,7 @@ struct tree_common\n        TREE_VIA_PRIVATE in\n            TREE_LIST or TREE_VEC\n        TREE_PRIVATE in\n-           ??? unspecified nodes\n+           ..._DECL\n \n    protected_flag:\n \n@@ -203,7 +206,7 @@ struct tree_common\n \t   TREE_VEC\n        TREE_PROTECTED in\n            BLOCK\n-\t   ??? unspecified nodes\n+\t   ..._DECL\n \n    side_effects_flag:\n \n@@ -503,6 +506,11 @@ extern void tree_class_check_failed PARAMS ((const tree, int,\n    In a CONSTRUCTOR, nonzero means allocate static storage.  */\n #define TREE_STATIC(NODE) ((NODE)->common.static_flag)\n \n+/* In a TARGET_EXPR, WITH_CLEANUP_EXPR, CLEANUP_STMT, or element of a\n+   block's cleanup list, means that the pertinent cleanup should only be\n+   executed if an exception is thrown, not on normal exit of its scope.  */\n+#define CLEANUP_EH_ONLY(NODE) ((NODE)->common.static_flag)\n+\n /* In a CONVERT_EXPR, NOP_EXPR or COMPOUND_EXPR, this means the node was\n    made implicitly and should not lead to an \"unused value\" warning.  */\n #define TREE_NO_UNUSED_WARNING(NODE) ((NODE)->common.static_flag)\n@@ -2985,6 +2993,7 @@ extern void expand_elseif\t\tPARAMS ((tree));\n extern void save_stack_pointer\t\tPARAMS ((void));\n extern void expand_decl\t\t\tPARAMS ((tree));\n extern int expand_decl_cleanup\t\tPARAMS ((tree, tree));\n+extern int expand_decl_cleanup_eh\tPARAMS ((tree, tree, int));\n extern void expand_anon_union_decl\tPARAMS ((tree, tree, tree));\n extern void move_cleanups_up\t\tPARAMS ((void));\n extern void expand_start_case_dummy\tPARAMS ((void));"}]}