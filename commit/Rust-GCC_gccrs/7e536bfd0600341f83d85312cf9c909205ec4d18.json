{"sha": "7e536bfd0600341f83d85312cf9c909205ec4d18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U1MzZiZmQwNjAwMzQxZjgzZDg1MzEyY2Y5YzkwOTIwNWVjNGQxOA==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2019-10-10T15:25:36Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-10-10T15:25:36Z"}, "message": "[Ada] Handling up-level references in loops within library-level declarations\n\n2019-10-10  Gary Dismukes  <dismukes@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch7.adb (Check_Unnesting_In_Decls_Or_Stmts): When\n\tencountering a loop at the top level of a package declaration\n\tlist (that is, within the declarations of a package spec or\n\tbody) that has nested subprograms, call Unnest_Loop to create a\n\tnew library-level procedure that will contain the loop, to allow\n\tfor proper handling of up-level references from within nested\n\tsubprograms, such as to loop parameters.\n\t(Unnest_Loop): New procedure that takes a loop statement and\n\tcreates a new procedure body to enclose the loop statement,\n\talong with generating a call to the procedure.\n\nFrom-SVN: r276836", "tree": {"sha": "2081bd613368ceea2a041f343f4afb2d377eb20f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2081bd613368ceea2a041f343f4afb2d377eb20f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e536bfd0600341f83d85312cf9c909205ec4d18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e536bfd0600341f83d85312cf9c909205ec4d18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e536bfd0600341f83d85312cf9c909205ec4d18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e536bfd0600341f83d85312cf9c909205ec4d18/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ebeabe0454975d7600af111a9461a85e75863641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebeabe0454975d7600af111a9461a85e75863641", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebeabe0454975d7600af111a9461a85e75863641"}], "stats": {"total": 100, "additions": 97, "deletions": 3}, "files": [{"sha": "4b829cf649e6352aff7c17c1c4bd97225274b0d9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e536bfd0600341f83d85312cf9c909205ec4d18/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e536bfd0600341f83d85312cf9c909205ec4d18/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7e536bfd0600341f83d85312cf9c909205ec4d18", "patch": "@@ -1,4 +1,12 @@\n-2019-10-10  Arnaud Charlet  <charlet@adacore.com>\n+2019-10-10  Gary Dismukes  <dismukes@adacore.com>\n \n-\t* freeze.adb (Freeze_Subprogram): Ensure constructor is a C++\n-\tconstructor.\n\\ No newline at end of file\n+\t* exp_ch7.adb (Check_Unnesting_In_Decls_Or_Stmts): When\n+\tencountering a loop at the top level of a package declaration\n+\tlist (that is, within the declarations of a package spec or\n+\tbody) that has nested subprograms, call Unnest_Loop to create a\n+\tnew library-level procedure that will contain the loop, to allow\n+\tfor proper handling of up-level references from within nested\n+\tsubprograms, such as to loop parameters.\n+\t(Unnest_Loop): New procedure that takes a loop statement and\n+\tcreates a new procedure body to enclose the loop statement,\n+\talong with generating a call to the procedure.\n\\ No newline at end of file"}, {"sha": "297e27dcf23bb6bd09e69b003d97707bb1dd22db", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e536bfd0600341f83d85312cf9c909205ec4d18/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e536bfd0600341f83d85312cf9c909205ec4d18/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=7e536bfd0600341f83d85312cf9c909205ec4d18", "patch": "@@ -398,6 +398,14 @@ package body Exp_Ch7 is\n    --  actions or secondary-stack management, in which case the nested\n    --  subprogram is a finalizer.\n \n+   procedure Unnest_Loop (Loop_Stmt : Node_Id);\n+   --  Top-level Loops that contain nested subprograms with up-level references\n+   --  need to have activation records. We do this by rewriting the loop as a\n+   --  procedure containing the loop, followed by a call to the procedure in\n+   --  the same library-level declarative list, to replicate the semantics of\n+   --  the original loop. Such loops can occur due to aggregate expansions and\n+   --  other constructs.\n+\n    procedure Check_Visibly_Controlled\n      (Prim : Final_Primitives;\n       Typ  : Entity_Id;\n@@ -4230,6 +4238,23 @@ package body Exp_Ch7 is\n             then\n                Unnest_Block (Decl_Or_Stmt);\n \n+            elsif Nkind (Decl_Or_Stmt) = N_Loop_Statement then\n+               declare\n+                  Id : constant Entity_Id :=\n+                         Entity (Identifier (Decl_Or_Stmt));\n+\n+               begin\n+                  --  When a top-level loop within declarations of a library\n+                  --  package spec or body contains nested subprograms, we wrap\n+                  --  it in a procedure to handle possible up-level references\n+                  --  to entities associated with the loop (such as loop\n+                  --  parameters).\n+\n+                  if Present (Id) and then Contains_Subprogram (Id) then\n+                     Unnest_Loop (Decl_Or_Stmt);\n+                  end if;\n+               end;\n+\n             elsif Nkind (Decl_Or_Stmt) = N_Package_Declaration\n               and then not Modify_Tree_For_C\n             then\n@@ -9256,6 +9281,67 @@ package body Exp_Ch7 is\n       end loop;\n    end Unnest_Block;\n \n+   -----------------\n+   -- Unnest_Loop --\n+   -----------------\n+\n+   procedure Unnest_Loop (Loop_Stmt : Node_Id) is\n+      Loc        : constant Source_Ptr := Sloc (Loop_Stmt);\n+      Ent        : Entity_Id;\n+      Local_Body : Node_Id;\n+      Local_Call : Node_Id;\n+      Local_Proc : Entity_Id;\n+      Local_Scop : Entity_Id;\n+      Loop_Copy  : constant Node_Id :=\n+                     Relocate_Node (Loop_Stmt);\n+   begin\n+      Local_Scop := Entity (Identifier (Loop_Stmt));\n+      Ent := First_Entity (Local_Scop);\n+\n+      Local_Proc :=\n+        Make_Defining_Identifier (Loc,\n+          Chars => New_Internal_Name ('P'));\n+\n+      Local_Body :=\n+        Make_Subprogram_Body (Loc,\n+          Specification              =>\n+            Make_Procedure_Specification (Loc,\n+              Defining_Unit_Name => Local_Proc),\n+              Declarations       => Empty_List,\n+          Handled_Statement_Sequence =>\n+            Make_Handled_Sequence_Of_Statements (Loc,\n+              Statements => New_List (Loop_Copy)));\n+\n+      Set_First_Real_Statement\n+        (Handled_Statement_Sequence (Local_Body), Loop_Copy);\n+\n+      Rewrite (Loop_Stmt, Local_Body);\n+      Analyze (Loop_Stmt);\n+\n+      Set_Has_Nested_Subprogram (Local_Proc);\n+\n+      Local_Call :=\n+        Make_Procedure_Call_Statement (Loc,\n+          Name => New_Occurrence_Of (Local_Proc, Loc));\n+\n+      Insert_After (Loop_Stmt, Local_Call);\n+      Analyze (Local_Call);\n+\n+      --  New procedure has the same scope as the original loop, and the scope\n+      --  of the loop is the new procedure.\n+\n+      Set_Scope (Local_Proc, Scope (Local_Scop));\n+      Set_Scope (Local_Scop, Local_Proc);\n+\n+      --  The entity list of the new procedure is that of the loop\n+\n+      Set_First_Entity (Local_Proc, Ent);\n+\n+      --  Note that the entities associated with the loop don't need to have\n+      --  their Scope fields reset, since they're still associated with the\n+      --  same loop entity that now belongs to the copied loop statement.\n+   end Unnest_Loop;\n+\n    --------------------------------\n    -- Wrap_Transient_Declaration --\n    --------------------------------"}]}