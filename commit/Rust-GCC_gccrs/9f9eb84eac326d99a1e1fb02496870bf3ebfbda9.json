{"sha": "9f9eb84eac326d99a1e1fb02496870bf3ebfbda9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY5ZWI4NGVhYzMyNmQ5OWExZTFmYjAyNDk2ODcwYmYzZWJmYmRhOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-04-28T12:33:07Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-04-28T12:33:07Z"}, "message": "libstdc++/70766 use std::addressof instead of operator&\n\n\tPR libstdc++/70766\n\t* include/bits/basic_ios.tcc (basic_ios::_M_cache_locale): Use\n\t__addressof.\n\t* include/bits/stream_iterator.h (istream_iterator, ostream_iterator):\n\tLikewise.\n\t* include/std/atomic (atomic<_Tp>): Likewise.\n\t* include/std/shared_mutex (shared_lock): Likewise.\n\t* testsuite/24_iterators/istream_iterator/70766.cc: New test.\n\t* testsuite/24_iterators/ostream_iterator/70766.cc : New test.\n\t* testsuite/29_atomics/atomic/60695.cc: Adjust dg-error line number.\n\t* testsuite/29_atomics/atomic/70766.cc: New test.\n\t* testsuite/30_threads/shared_lock/70766.cc: New test.\n\nFrom-SVN: r235565", "tree": {"sha": "701510697d2206daf1cfc9678e85b66c1ceb9cb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/701510697d2206daf1cfc9678e85b66c1ceb9cb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "272b2ce49fb032b02f786d25e43e920383426d5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272b2ce49fb032b02f786d25e43e920383426d5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/272b2ce49fb032b02f786d25e43e920383426d5b"}], "stats": {"total": 258, "additions": 235, "deletions": 23}, "files": [{"sha": "825fef01e5311fa7f694ede5d2912ec7ce37ae20", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9f9eb84eac326d99a1e1fb02496870bf3ebfbda9", "patch": "@@ -1,5 +1,18 @@\n 2016-04-28  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/70766\n+\t* include/bits/basic_ios.tcc (basic_ios::_M_cache_locale): Use\n+\t__addressof.\n+\t* include/bits/stream_iterator.h (istream_iterator, ostream_iterator):\n+\tLikewise.\n+\t* include/std/atomic (atomic<_Tp>): Likewise.\n+\t* include/std/shared_mutex (shared_lock): Likewise.\n+\t* testsuite/24_iterators/istream_iterator/70766.cc: New test.\n+\t* testsuite/24_iterators/ostream_iterator/70766.cc : New test.\n+\t* testsuite/29_atomics/atomic/60695.cc: Adjust dg-error line number.\n+\t* testsuite/29_atomics/atomic/70766.cc: New test.\n+\t* testsuite/30_threads/shared_lock/70766.cc: New test.\n+\n \t* include/bits/hashtable_policy.h (__detail::_Insert_base,\n \t__detail::_Insert): Improve comments.\n "}, {"sha": "04692201a51b85baad0e9c7390979f4596c57033", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=9f9eb84eac326d99a1e1fb02496870bf3ebfbda9", "patch": "@@ -157,17 +157,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)\n     {\n       if (__builtin_expect(has_facet<__ctype_type>(__loc), true))\n-\t_M_ctype = &use_facet<__ctype_type>(__loc);\n+\t_M_ctype = std::__addressof(use_facet<__ctype_type>(__loc));\n       else\n \t_M_ctype = 0;\n \n       if (__builtin_expect(has_facet<__num_put_type>(__loc), true))\n-\t_M_num_put = &use_facet<__num_put_type>(__loc);\n+\t_M_num_put = std::__addressof(use_facet<__num_put_type>(__loc));\n       else\n \t_M_num_put = 0;\n \n       if (__builtin_expect(has_facet<__num_get_type>(__loc), true))\n-\t_M_num_get = &use_facet<__num_get_type>(__loc);\n+\t_M_num_get = std::__addressof(use_facet<__num_get_type>(__loc));\n       else\n \t_M_num_get = 0;\n     }"}, {"sha": "4afba4e1cbf11239ccb306f6475a7bf1268dea56", "filename": "libstdc++-v3/include/bits/stream_iterator.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h?ref=9f9eb84eac326d99a1e1fb02496870bf3ebfbda9", "patch": "@@ -66,7 +66,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       ///  Construct start of input stream iterator.\n       istream_iterator(istream_type& __s)\n-      : _M_stream(&__s)\n+      : _M_stream(std::__addressof(__s))\n       { _M_read(); }\n \n       istream_iterator(const istream_iterator& __obj)\n@@ -84,7 +84,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       const _Tp*\n-      operator->() const { return &(operator*()); }\n+      operator->() const { return std::__addressof((operator*())); }\n \n       istream_iterator&\n       operator++()\n@@ -168,7 +168,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     public:\n       /// Construct from an ostream.\n-      ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}\n+      ostream_iterator(ostream_type& __s)\n+      : _M_stream(std::__addressof(__s)), _M_string(0) {}\n \n       /**\n        *  Construct from an ostream."}, {"sha": "3c8ece85b0b7322a5e2c5b6821d89997da78cf87", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=9f9eb84eac326d99a1e1fb02496870bf3ebfbda9", "patch": "@@ -39,6 +39,7 @@\n #else\n \n #include <bits/atomic_base.h>\n+#include <bits/move.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -222,33 +223,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void\n       store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept\n-      { __atomic_store(&_M_i, &__i, __m); }\n+      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), __m); }\n \n       void\n       store(_Tp __i, memory_order __m = memory_order_seq_cst) volatile noexcept\n-      { __atomic_store(&_M_i, &__i, __m); }\n+      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), __m); }\n \n       _Tp\n       load(memory_order __m = memory_order_seq_cst) const noexcept\n       { \n         _Tp tmp;\n-\t__atomic_load(&_M_i, &tmp, __m);\n+\t__atomic_load(std::__addressof(_M_i), std::__addressof(tmp), __m);\n \treturn tmp;\n       }\n \n       _Tp\n       load(memory_order __m = memory_order_seq_cst) const volatile noexcept\n       { \n         _Tp tmp;\n-\t__atomic_load(&_M_i, &tmp, __m);\n+\t__atomic_load(std::__addressof(_M_i), std::__addressof(tmp), __m);\n \treturn tmp;\n       }\n \n       _Tp\n       exchange(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept\n       { \n         _Tp tmp;\n-\t__atomic_exchange(&_M_i, &__i, &tmp, __m);\n+\t__atomic_exchange(std::__addressof(_M_i), std::__addressof(__i),\n+\t\t\t  std::__addressof(tmp), __m);\n \treturn tmp;\n       }\n \n@@ -257,22 +259,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       memory_order __m = memory_order_seq_cst) volatile noexcept\n       { \n         _Tp tmp;\n-\t__atomic_exchange(&_M_i, &__i, &tmp, __m);\n+\t__atomic_exchange(std::__addressof(_M_i), std::__addressof(__i),\n+\t\t\t  std::__addressof(tmp), __m);\n \treturn tmp;\n       }\n \n       bool\n       compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s, \n \t\t\t    memory_order __f) noexcept\n       {\n-\treturn __atomic_compare_exchange(&_M_i, &__e, &__i, true, __s, __f);\n+\treturn __atomic_compare_exchange(std::__addressof(_M_i),\n+\t\t\t\t\t std::__addressof(__e),\n+\t\t\t\t\t std::__addressof(__i),\n+\t\t\t\t\t true, __s, __f);\n       }\n \n       bool\n       compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s, \n \t\t\t    memory_order __f) volatile noexcept\n       {\n-\treturn __atomic_compare_exchange(&_M_i, &__e, &__i, true, __s, __f);\n+\treturn __atomic_compare_exchange(std::__addressof(_M_i),\n+\t\t\t\t\t std::__addressof(__e),\n+\t\t\t\t\t std::__addressof(__i),\n+\t\t\t\t\t true, __s, __f);\n       }\n \n       bool\n@@ -291,14 +300,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, \n \t\t\t      memory_order __f) noexcept\n       {\n-\treturn __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);\n+\treturn __atomic_compare_exchange(std::__addressof(_M_i),\n+\t\t\t\t\t std::__addressof(__e),\n+\t\t\t\t\t std::__addressof(__i),\n+\t\t\t\t\t false, __s, __f);\n       }\n \n       bool\n       compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, \n \t\t\t      memory_order __f) volatile noexcept\n       {\n-\treturn __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);\n+\treturn __atomic_compare_exchange(std::__addressof(_M_i),\n+\t\t\t\t\t std::__addressof(__e),\n+\t\t\t\t\t std::__addressof(__i),\n+\t\t\t\t\t false, __s, __f);\n       }\n \n       bool"}, {"sha": "6ca322b44e8a73865da9f11a32c47c28638c63de", "filename": "libstdc++-v3/include/std/shared_mutex", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex?ref=9f9eb84eac326d99a1e1fb02496870bf3ebfbda9", "patch": "@@ -550,27 +550,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       shared_lock() noexcept : _M_pm(nullptr), _M_owns(false) { }\n \n       explicit\n-      shared_lock(mutex_type& __m) : _M_pm(&__m), _M_owns(true)\n+      shared_lock(mutex_type& __m)\n+      : _M_pm(std::__addressof(__m)), _M_owns(true)\n       { __m.lock_shared(); }\n \n       shared_lock(mutex_type& __m, defer_lock_t) noexcept\n-      : _M_pm(&__m), _M_owns(false) { }\n+      : _M_pm(std::__addressof(__m)), _M_owns(false) { }\n \n       shared_lock(mutex_type& __m, try_to_lock_t)\n-      : _M_pm(&__m), _M_owns(__m.try_lock_shared()) { }\n+      : _M_pm(std::__addressof(__m)), _M_owns(__m.try_lock_shared()) { }\n \n       shared_lock(mutex_type& __m, adopt_lock_t)\n-      : _M_pm(&__m), _M_owns(true) { }\n+      : _M_pm(std::__addressof(__m)), _M_owns(true) { }\n \n       template<typename _Clock, typename _Duration>\n \tshared_lock(mutex_type& __m,\n \t\t    const chrono::time_point<_Clock, _Duration>& __abs_time)\n-      : _M_pm(&__m), _M_owns(__m.try_lock_shared_until(__abs_time)) { }\n+      : _M_pm(std::__addressof(__m)),\n+\t_M_owns(__m.try_lock_shared_until(__abs_time)) { }\n \n       template<typename _Rep, typename _Period>\n \tshared_lock(mutex_type& __m,\n \t\t    const chrono::duration<_Rep, _Period>& __rel_time)\n-      : _M_pm(&__m), _M_owns(__m.try_lock_shared_for(__rel_time)) { }\n+      : _M_pm(std::__addressof(__m)),\n+\t_M_owns(__m.try_lock_shared_for(__rel_time)) { }\n \n       ~shared_lock()\n       {"}, {"sha": "3018e346477c6a3f53eb65f3e5c520c5ec694bbf", "filename": "libstdc++-v3/testsuite/24_iterators/istream_iterator/70766.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2F70766.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2F70766.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2F70766.cc?ref=9f9eb84eac326d99a1e1fb02496870bf3ebfbda9", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <iterator>\n+#include <istream>\n+\n+namespace adl\n+{\n+  template<typename T>\n+    void operator&(const T&) = delete;\n+\n+  struct traits : std::char_traits<char> { };\n+\n+  struct X { void f() const { } };\n+\n+  std::basic_istream<char, adl::traits>&\n+  operator>>(std::basic_istream<char, adl::traits>& is, X&)\n+  { return is; }\n+}\n+\n+void\n+test01()\n+{\n+  std::basic_istream<char, adl::traits> is(nullptr);\n+  std::istream_iterator<adl::X, char, adl::traits> ii(is);\n+  ii->f();\n+}"}, {"sha": "1f6b94358bea3f97c0e6550098eb2b65c8dbc219", "filename": "libstdc++-v3/testsuite/24_iterators/ostream_iterator/70766.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2F70766.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2F70766.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2F70766.cc?ref=9f9eb84eac326d99a1e1fb02496870bf3ebfbda9", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <iterator>\n+#include <ostream>\n+\n+namespace adl\n+{\n+  template<typename T>\n+    void operator&(const T&) = delete;\n+\n+  struct traits : std::char_traits<char> { };\n+}\n+\n+void\n+test01()\n+{\n+  std::basic_ostream<char, adl::traits> os(nullptr);\n+  std::ostream_iterator<int, char, adl::traits> oi(os);\n+}"}, {"sha": "5977d54760c5d40a89bc153c1f86c22712899080", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/60695.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60695.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60695.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60695.cc?ref=9f9eb84eac326d99a1e1fb02496870bf3ebfbda9", "patch": "@@ -27,4 +27,4 @@ struct X {\n   char stuff[0]; // GNU extension, type has zero size\n };\n \n-std::atomic<X> a;  // { dg-error \"not supported\" \"\" { target *-*-* } 181 }\n+std::atomic<X> a;  // { dg-error \"not supported\" \"\" { target *-*-* } 182 }"}, {"sha": "1390e4e4de5d56c740852fe07e7552e4ff23bd78", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/70766.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F70766.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F70766.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F70766.cc?ref=9f9eb84eac326d99a1e1fb02496870bf3ebfbda9", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <atomic>\n+\n+namespace adl\n+{\n+  template<typename T>\n+    void operator&(const T&) = delete;\n+\n+  struct X {\n+    int i;\n+  };\n+}\n+\n+void\n+test01()\n+{\n+  adl::X x;\n+  std::atomic<adl::X> a;\n+  a.store(x);\n+  x = a.load();\n+  x = a.exchange(x);\n+  a.compare_exchange_weak(x, x);\n+  a.compare_exchange_strong(x, x);\n+}\n+\n+void\n+test02()\n+{\n+  adl::X x;\n+  volatile std::atomic<adl::X> a;\n+  a.store(x);\n+  x = a.load();\n+  x = a.exchange(x);\n+  a.compare_exchange_weak(x, x);\n+  a.compare_exchange_strong(x, x);\n+}"}, {"sha": "940b7b17281d79f0e2e7319be4b235f5d6e681f9", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/70766.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2F70766.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9eb84eac326d99a1e1fb02496870bf3ebfbda9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2F70766.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2F70766.cc?ref=9f9eb84eac326d99a1e1fb02496870bf3ebfbda9", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+#include <shared_mutex>\n+\n+namespace adl\n+{\n+  template<typename T>\n+    void operator&(const T&) = delete;\n+\n+  struct M : std::shared_timed_mutex { };\n+}\n+\n+void\n+test01()\n+{\n+  using namespace std::chrono_literals;\n+\n+  adl::M m;\n+  std::shared_lock<adl::M> l1(m);\n+  std::shared_lock<adl::M> l2(m, std::defer_lock);\n+  std::shared_lock<adl::M> l3(m, std::try_to_lock);\n+  m.lock_shared();\n+  std::shared_lock<adl::M> l4(m, std::adopt_lock);\n+  std::shared_lock<adl::M> l5(m, std::chrono::system_clock::now() + 1ms);\n+  std::shared_lock<adl::M> l6(m, 1ms);\n+}"}]}