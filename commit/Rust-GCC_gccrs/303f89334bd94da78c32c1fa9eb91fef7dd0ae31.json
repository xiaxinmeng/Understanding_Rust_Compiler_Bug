{"sha": "303f89334bd94da78c32c1fa9eb91fef7dd0ae31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAzZjg5MzM0YmQ5NGRhNzhjMzJjMWZhOWViOTFmZWY3ZGQwYWUzMQ==", "commit": {"author": {"name": "Dan Nicolaescu", "email": "dann@ics.uci.edu", "date": "2001-12-19T23:00:39Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-12-19T23:00:39Z"}, "message": "sparc.md (ldd peephole2s): For load peepholes pass the destination register as a parameter to...\n\n        * config/sparc/sparc.md (ldd peephole2s): For load peepholes pass\n        the destination register as a parameter to mems_ok_for_ldd_peep.\n        For store peepholes pass NULL_RTX.  Move all volatile checks ...\n        * config/sparc/sparc.c (mems_ok_for_ldd_peep): ... here.  Add a\n        register parameter, check it's not the same as base for an address.\n        * config/sparc/sparc-protos.h (mems_ok_for_ldd_peep): Update.\n\nFrom-SVN: r48188", "tree": {"sha": "815e0dd36a13f318f219631222c0b7e00df7b573", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/815e0dd36a13f318f219631222c0b7e00df7b573"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/303f89334bd94da78c32c1fa9eb91fef7dd0ae31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303f89334bd94da78c32c1fa9eb91fef7dd0ae31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/303f89334bd94da78c32c1fa9eb91fef7dd0ae31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303f89334bd94da78c32c1fa9eb91fef7dd0ae31/comments", "author": null, "committer": null, "parents": [{"sha": "30fa7e33061e1b31416ff202deffd5c9ab921351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30fa7e33061e1b31416ff202deffd5c9ab921351", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30fa7e33061e1b31416ff202deffd5c9ab921351"}], "stats": {"total": 120, "additions": 63, "deletions": 57}, "files": [{"sha": "b5314bf305539826438c8fe58ca7d6ce5b1cb761", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303f89334bd94da78c32c1fa9eb91fef7dd0ae31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303f89334bd94da78c32c1fa9eb91fef7dd0ae31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=303f89334bd94da78c32c1fa9eb91fef7dd0ae31", "patch": "@@ -1,3 +1,12 @@\n+2001-12-19  Dan Nicolaescu  <dann@ics.uci.edu>\n+\n+\t* config/sparc/sparc.md (ldd peephole2s): For load peepholes pass\n+\tthe destination register as a parameter to mems_ok_for_ldd_peep.\n+\tFor store peepholes pass NULL_RTX.  Move all volatile checks ...\n+\t* config/sparc/sparc.c (mems_ok_for_ldd_peep): ... here.  Add a\n+\tregister parameter, check it's not the same as base for an address.\n+\t* config/sparc/sparc-protos.h (mems_ok_for_ldd_peep): Update.\n+\n 2001-12-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/ia64/ia64.c (ia64_single_set): Return first set for\n@@ -151,7 +160,7 @@ objc:\n \n 2001-12-17  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.c: Remove is_gpr_return_reg prototype.\n+\t* config/rs6000/rs6000.c: Remove is_gpr_return_reg prototype.\n \n 2001-12-17  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n@@ -179,7 +188,7 @@ Mon Dec 17 14:21:21 2001  Jeffrey A Law  (law@redhat.com)\n \tdefinition.\n \t* doc/tm.texi: Document MODE_BASE_REG_CLASS.\n \n-        * config/arm/arm.h (MODE_BASE_REG_CLASS): Define.\n+\t* config/arm/arm.h (MODE_BASE_REG_CLASS): Define.\n \n 2001-12-17  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n@@ -202,12 +211,12 @@ Mon Dec 17 14:21:21 2001  Jeffrey A Law  (law@redhat.com)\n \n 2001-12-17  Dale Johannesen  <dalej@apple.com>\n \n-         * config/rs6000/rs6000.h:  CPP_CPU_SPEC: add mcpu=7400.\n-         ASM_CPU_SPEC: Ditto.\n-         RTX_COSTS: Fix timing info for 7450 multiply.\n-         * config/rs6000/rs6000.md:  Fix timing info for 7450 imul.\n-         Allow floats to be kept in int regs in movsf_low,\n-         movsf_low_st (Darwin only)\n+\t * config/rs6000/rs6000.h:  CPP_CPU_SPEC: add mcpu=7400.\n+\t ASM_CPU_SPEC: Ditto.\n+\t RTX_COSTS: Fix timing info for 7450 multiply.\n+\t * config/rs6000/rs6000.md:  Fix timing info for 7450 imul.\n+\t Allow floats to be kept in int regs in movsf_low,\n+\t movsf_low_st (Darwin only)\n \n 2001-12-17  Aldy Hernandez  <aldyh@redhat.com>\n \n@@ -294,7 +303,7 @@ Mon Dec 17 17:57:05 CET 2001  Jan Hubicka  <jh@suse.cz>\n \t(dw2_asm_output_nstring): Use assemble_integer for the null terminator.\n \t(dw2_asm_output_data_uleb128, dw2_asm_output_data_sleb128): Use\n \tinteger_asm_op to get the byte pseudo-op.  Use assemble_integer\n-        if it returns NULL.\n+\tif it returns NULL.\n \t* dwarf2asm.h (dw2_assemble_integer): Declare.\n \t* dwarfout.c: Include dwarf2asm.h.  Use dwarf2 functions for the\n \tdefault\timplementation of most macros.\n@@ -526,7 +535,7 @@ Mon Dec 17 17:57:05 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-12-16  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config.gcc: Add powerpc-*-eabisimaltivec*.\n+\t* config.gcc: Add powerpc-*-eabisimaltivec*.\n \n 2001-12-16  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n@@ -625,15 +634,15 @@ Sun Dec 16 13:13:01 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-12-15  Dan Nicolaescu  <dann@ics.uci.edu>\n \n-        * config/sparc/sparc.c (mems_ok_for_ldd_peep): Rename from\n+\t* config/sparc/sparc.c (mems_ok_for_ldd_peep): Rename from\n \taddrs_ok_for_ldd_peep_withmem; take MEMs as parameters, not\n-        addrs; eliminate restriction of only using fp and sp as base\n-        registers.\n-        * config/sparc/sparc-protos.h: Update.\n-        * config/sparc/sparc.md (movdi): Use TARGET_V9 not TARGET_ARCH64.\n-        (*cmp_cc_set, *cmp_ccx_set64, *movdi_zero): New insns derived\n-        from old define_peepholes.\n-        Convert all the ldd/std peepholes to peephole2.\n+\taddrs; eliminate restriction of only using fp and sp as base\n+\tregisters.\n+\t* config/sparc/sparc-protos.h: Update.\n+\t* config/sparc/sparc.md (movdi): Use TARGET_V9 not TARGET_ARCH64.\n+\t(*cmp_cc_set, *cmp_ccx_set64, *movdi_zero): New insns derived\n+\tfrom old define_peepholes.\n+\tConvert all the ldd/std peepholes to peephole2.\n \n 2001-12-15  Ulrich Weigand  <uweigand@de.ibm.com>\n "}, {"sha": "c0f3edce65dc176abbd520e77eb8624ae1afea96", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303f89334bd94da78c32c1fa9eb91fef7dd0ae31/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303f89334bd94da78c32c1fa9eb91fef7dd0ae31/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=303f89334bd94da78c32c1fa9eb91fef7dd0ae31", "patch": "@@ -91,7 +91,7 @@ extern const char *output_sibcall PARAMS ((rtx, rtx));\n extern char *output_v9branch PARAMS ((rtx, int, int, int, int, int, rtx));\n extern void emit_v9_brxx_insn PARAMS ((enum rtx_code, rtx, rtx));\n extern void print_operand PARAMS ((FILE *, rtx, int));\n-extern int mems_ok_for_ldd_peep PARAMS ((rtx, rtx));\n+extern int mems_ok_for_ldd_peep PARAMS ((rtx, rtx, rtx));\n extern int arith_double_4096_operand PARAMS ((rtx, enum machine_mode));\n extern int arith_4096_operand PARAMS ((rtx, enum machine_mode));\n extern int zero_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "f8fefbe6422f197ef0e06ace433efc235ad845fd", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303f89334bd94da78c32c1fa9eb91fef7dd0ae31/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303f89334bd94da78c32c1fa9eb91fef7dd0ae31/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=303f89334bd94da78c32c1fa9eb91fef7dd0ae31", "patch": "@@ -5673,27 +5673,41 @@ registers_ok_for_ldd_peep (reg1, reg2)\n }\n \n /* Return 1 if the addresses in mem1 and mem2 are suitable for use in\n-   an ldd or std insn. \n-      \n+   an ldd or std insn.\n+   \n    This can only happen when addr1 and addr2, the addresses in mem1\n    and mem2, are consecutive memory locations (addr1 + 4 == addr2).\n-   addr1 must also be aligned on a 64-bit boundary.  */\n+   addr1 must also be aligned on a 64-bit boundary.\n+\n+   Also iff dependent_reg_rtx is not null it should not be used to\n+   compute the address for mem1, i.e. we cannot optimize a sequence\n+   like:\n+   \tld [%o0], %o0\n+\tld [%o0 + 4], %o1\n+   to\n+   \tldd [%o0], o0\n+   For stores we don't have a similar problem, so dependent_reg_rtx is\n+   NULL_RTX.  */\n \n int\n-mems_ok_for_ldd_peep (mem1, mem2)\n-      rtx mem1, mem2;\n+mems_ok_for_ldd_peep (mem1, mem2, dependent_reg_rtx)\n+      rtx mem1, mem2, dependent_reg_rtx;\n {\n   rtx addr1, addr2;\n   unsigned int reg1;\n   int offset1;\n \n-  addr1 = XEXP (mem1, 0);\n-  addr2 = XEXP (mem2, 0);\n+  /* The mems cannot be volatile.  */\n+  if (MEM_VOLATILE_P (mem1) || MEM_VOLATILE_P (mem2))\n+    return 0;\n \n-  /* mem1 should be aligned on a 64-bit boundary */\n+  /* MEM1 should be aligned on a 64-bit boundary.  */\n   if (MEM_ALIGN (mem1) < 64)\n     return 0;\n   \n+  addr1 = XEXP (mem1, 0);\n+  addr2 = XEXP (mem2, 0);\n+  \n   /* Extract a register number and offset (if used) from the first addr.  */\n   if (GET_CODE (addr1) == PLUS)\n     {\n@@ -5729,6 +5743,9 @@ mems_ok_for_ldd_peep (mem1, mem2)\n   if (reg1 != REGNO (XEXP (addr2, 0)))\n     return 0;\n \n+  if (dependent_reg_rtx != NULL_RTX && reg1 == REGNO (dependent_reg_rtx))\n+    return 0;\n+  \n   /* The first offset must be evenly divisible by 8 to ensure the \n      address is 64 bit aligned.  */\n   if (offset1 % 8 != 0)"}, {"sha": "5c51d371ecd607b0b79ed908fef008e80246cfe0", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 10, "deletions": 30, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303f89334bd94da78c32c1fa9eb91fef7dd0ae31/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303f89334bd94da78c32c1fa9eb91fef7dd0ae31/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=303f89334bd94da78c32c1fa9eb91fef7dd0ae31", "patch": "@@ -8923,9 +8923,7 @@\n    (set (match_operand:SI 1 \"memory_operand\" \"\")\n       (const_int 0))]\n   \"TARGET_V9\n-   && ! MEM_VOLATILE_P (operands[0])\n-   && ! MEM_VOLATILE_P (operands[1])\n-   && mems_ok_for_ldd_peep (operands[0], operands[1])\"\n+   && mems_ok_for_ldd_peep (operands[0], operands[1], NULL_RTX)\"\n   [(set (match_dup 0)\n        (const_int 0))]\n   \"operands[0] = change_address (operands[0], DImode, NULL);\")\n@@ -8936,9 +8934,7 @@\n    (set (match_operand:SI 1 \"memory_operand\" \"\")\n       (const_int 0))]\n   \"TARGET_V9\n-   && ! MEM_VOLATILE_P (operands[0])\n-   && ! MEM_VOLATILE_P (operands[1])\n-   && mems_ok_for_ldd_peep (operands[1], operands[0])\"\n+   && mems_ok_for_ldd_peep (operands[1], operands[0], NULL_RTX)\"\n   [(set (match_dup 1)\n        (const_int 0))]\n   \"operands[1] = change_address (operands[1], DImode, NULL);\")\n@@ -8949,9 +8945,7 @@\n    (set (match_operand:SI 2 \"register_operand\" \"\")\n         (match_operand:SI 3 \"memory_operand\" \"\"))]\n   \"registers_ok_for_ldd_peep (operands[0], operands[2]) \n-   && ! MEM_VOLATILE_P (operands[1])\n-   && ! MEM_VOLATILE_P (operands[3])\n-   && mems_ok_for_ldd_peep (operands[1], operands[3])\" \n+   && mems_ok_for_ldd_peep (operands[1], operands[3], operands[0])\" \n   [(set (match_dup 0)\n \t(match_dup 1))]\n   \"operands[1] = change_address (operands[1], DImode, NULL);\n@@ -8963,9 +8957,7 @@\n    (set (match_operand:SI 2 \"memory_operand\" \"\")\n         (match_operand:SI 3 \"register_operand\" \"\"))]\n   \"registers_ok_for_ldd_peep (operands[1], operands[3]) \n-   && ! MEM_VOLATILE_P (operands[0])\n-   && ! MEM_VOLATILE_P (operands[2])\n-   && mems_ok_for_ldd_peep (operands[0], operands[2])\"\n+   && mems_ok_for_ldd_peep (operands[0], operands[2], NULL_RTX)\"\n   [(set (match_dup 0)\n \t(match_dup 1))]\n   \"operands[0] = change_address (operands[0], DImode, NULL);\n@@ -8977,9 +8969,7 @@\n    (set (match_operand:SF 2 \"register_operand\" \"\")\n         (match_operand:SF 3 \"memory_operand\" \"\"))]\n   \"registers_ok_for_ldd_peep (operands[0], operands[2]) \n-   && ! MEM_VOLATILE_P (operands[1])\n-   && ! MEM_VOLATILE_P (operands[3])\n-   && mems_ok_for_ldd_peep (operands[1], operands[3])\"\n+   && mems_ok_for_ldd_peep (operands[1], operands[3], operands[0])\"\n   [(set (match_dup 0)\n \t(match_dup 1))]\n   \"operands[1] = change_address (operands[1], DFmode, NULL);\n@@ -8991,9 +8981,7 @@\n    (set (match_operand:SF 2 \"memory_operand\" \"\")\n         (match_operand:SF 3 \"register_operand\" \"\"))]\n   \"registers_ok_for_ldd_peep (operands[1], operands[3]) \n-  && ! MEM_VOLATILE_P (operands[0])\n-  && ! MEM_VOLATILE_P (operands[2])\n-  && mems_ok_for_ldd_peep (operands[0], operands[2])\"\n+  && mems_ok_for_ldd_peep (operands[0], operands[2], NULL_RTX)\"\n   [(set (match_dup 0)\n \t(match_dup 1))]\n   \"operands[0] = change_address (operands[0], DFmode, NULL);\n@@ -9005,9 +8993,7 @@\n    (set (match_operand:SI 2 \"register_operand\" \"\")\n         (match_operand:SI 3 \"memory_operand\" \"\"))]\n   \"registers_ok_for_ldd_peep (operands[2], operands[0]) \n-  && ! MEM_VOLATILE_P (operands[3])\n-  && ! MEM_VOLATILE_P (operands[1])\n-  && mems_ok_for_ldd_peep (operands[3], operands[1])\"\n+  && mems_ok_for_ldd_peep (operands[3], operands[1], operands[2])\"\n   [(set (match_dup 2)\n \t(match_dup 3))]\n    \"operands[3] = change_address (operands[3], DImode, NULL);\n@@ -9019,9 +9005,7 @@\n    (set (match_operand:SI 2 \"memory_operand\" \"\")\n         (match_operand:SI 3 \"register_operand\" \"\"))]\n   \"registers_ok_for_ldd_peep (operands[3], operands[1]) \n-  && ! MEM_VOLATILE_P (operands[2])\n-  && ! MEM_VOLATILE_P (operands[0])\n-  && mems_ok_for_ldd_peep (operands[2], operands[0])\" \n+  && mems_ok_for_ldd_peep (operands[2], operands[0], NULL_RTX)\" \n   [(set (match_dup 2)\n \t(match_dup 3))]\n   \"operands[2] = change_address (operands[2], DImode, NULL);\n@@ -9034,9 +9018,7 @@\n    (set (match_operand:SF 2 \"register_operand\" \"\")\n         (match_operand:SF 3 \"memory_operand\" \"\"))]\n   \"registers_ok_for_ldd_peep (operands[2], operands[0]) \n-  && ! MEM_VOLATILE_P (operands[3])\n-  && ! MEM_VOLATILE_P (operands[1])\n-  && mems_ok_for_ldd_peep (operands[3], operands[1])\"\n+  && mems_ok_for_ldd_peep (operands[3], operands[1], operands[2])\"\n   [(set (match_dup 2)\n \t(match_dup 3))]\n   \"operands[3] = change_address (operands[3], DFmode, NULL);\n@@ -9048,9 +9030,7 @@\n    (set (match_operand:SF 2 \"memory_operand\" \"\")\n         (match_operand:SF 3 \"register_operand\" \"\"))]\n   \"registers_ok_for_ldd_peep (operands[3], operands[1]) \n-  && ! MEM_VOLATILE_P (operands[2])\n-  && ! MEM_VOLATILE_P (operands[0])\n-  && mems_ok_for_ldd_peep (operands[2], operands[0])\"\n+  && mems_ok_for_ldd_peep (operands[2], operands[0], NULL_RTX)\"\n   [(set (match_dup 2)\n \t(match_dup 3))]\n   \"operands[2] = change_address (operands[2], DFmode, NULL);"}]}