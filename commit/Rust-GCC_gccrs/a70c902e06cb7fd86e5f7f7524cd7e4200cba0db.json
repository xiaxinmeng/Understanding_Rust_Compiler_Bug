{"sha": "a70c902e06cb7fd86e5f7f7524cd7e4200cba0db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcwYzkwMmUwNmNiN2ZkODZlNWY3Zjc1MjRjZDdlNDIwMGNiYTBkYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-04-29T18:50:00Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-04-29T18:50:00Z"}, "message": "re PR libstdc++/21238 (conflicting \"typedef __numpunct_cache<_CharT>    __cache_type;\" in std::numpunct<CharT> makes specialization impossible)\n\n2005-04-29  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/21238\n\t* include/bits/locale_facets.tcc (num_get::_M_extract_float,\n\tnum_get::_M_extract_int, num_get::do_get(bool&),\n\tnum_put::_M_insert_int, num_put::_M_insert_float,\n\tnum_put::do_put(bool), money_get::_M_extract,\n\tmoney_put::_M_insert): Adjust the __cache_type typedef not to\n\tforward to a numpunct/moneypunct typedef.\n\t* testsuite/testsuite_character.h: Add pod_uint and its numpunct\n\tand moneypunct specializations.\n\t* testsuite/testsuite_character.cc: Add numpunct<pod_uint>::id\n\tand moneypunct<pod_uint>::id.\n\t* testsuite/22_locale/num_get/3.cc: New.\n\t* testsuite/22_locale/num_put/3.cc: Likewise.\n\t* testsuite/22_locale/money_get/3.cc: Likewise.\n\t* testsuite/22_locale/money_put/3.cc: Likewise.\n\n\t* include/bits/locale_facets.tcc (money_put::_M_insert,\n\ttime_get::_M_extract_name): Prefer operator== to operator!=\n\ton char_types.\n\nFrom-SVN: r99012", "tree": {"sha": "46a68024b46ac9b5e42fe36270112667cbeeb1dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46a68024b46ac9b5e42fe36270112667cbeeb1dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db/comments", "author": null, "committer": null, "parents": [{"sha": "b61ae8b2611643a3f7005680573e4f13dcf9ef23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b61ae8b2611643a3f7005680573e4f13dcf9ef23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b61ae8b2611643a3f7005680573e4f13dcf9ef23"}], "stats": {"total": 371, "additions": 358, "deletions": 13}, "files": [{"sha": "164aee42cc610404f91909231758f2625e6abdf1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a70c902e06cb7fd86e5f7f7524cd7e4200cba0db", "patch": "@@ -1,3 +1,25 @@\n+2005-04-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/21238\n+\t* include/bits/locale_facets.tcc (num_get::_M_extract_float,\n+\tnum_get::_M_extract_int, num_get::do_get(bool&),\n+\tnum_put::_M_insert_int, num_put::_M_insert_float,\n+\tnum_put::do_put(bool), money_get::_M_extract,\n+\tmoney_put::_M_insert): Adjust the __cache_type typedef not to\n+\tforward to a numpunct/moneypunct typedef.\n+\t* testsuite/testsuite_character.h: Add pod_uint and its numpunct\n+\tand moneypunct specializations.\n+\t* testsuite/testsuite_character.cc: Add numpunct<pod_uint>::id\n+\tand moneypunct<pod_uint>::id.\n+\t* testsuite/22_locale/num_get/3.cc: New.\n+\t* testsuite/22_locale/num_put/3.cc: Likewise.\n+\t* testsuite/22_locale/money_get/3.cc: Likewise.\n+\t* testsuite/22_locale/money_put/3.cc: Likewise.\n+\n+\t* include/bits/locale_facets.tcc (money_put::_M_insert,\n+\ttime_get::_M_extract_name): Prefer operator== to operator!=\n+\ton char_types.\n+\n 2005-04-29  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/type_traits (is_convertible): Adjust according"}, {"sha": "ff54c93ed93f07445aed39caa464d70fade2b07d", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=a70c902e06cb7fd86e5f7f7524cd7e4200cba0db", "patch": "@@ -277,7 +277,7 @@ namespace std\n \t\t     ios_base::iostate& __err, string& __xtrc) const\n     {\n       typedef char_traits<_CharT>\t\t\t__traits_type;\n-      typedef typename numpunct<_CharT>::__cache_type\t__cache_type;\n+      typedef __numpunct_cache<_CharT>                  __cache_type;\n       __use_cache<__cache_type> __uc;\n       const locale& __loc = __io._M_getloc();\n       const __cache_type* __lc = __uc(__loc);\n@@ -462,8 +462,8 @@ namespace std\n \t\t     ios_base::iostate& __err, _ValueT& __v) const\n       {\n         typedef char_traits<_CharT>\t\t\t     __traits_type;\n-\ttypedef typename __to_unsigned_type<_ValueT>::__type __unsigned_type;\t\n-\ttypedef typename numpunct<_CharT>::__cache_type      __cache_type;\n+\ttypedef typename __to_unsigned_type<_ValueT>::__type __unsigned_type;\n+\ttypedef __numpunct_cache<_CharT>                     __cache_type;\n \t__use_cache<__cache_type> __uc;\n \tconst locale& __loc = __io._M_getloc();\n \tconst __cache_type* __lc = __uc(__loc);\n@@ -650,7 +650,7 @@ namespace std\n       else\n         {\n \t  // Parse bool values as alphanumeric.\n-\t  typedef typename numpunct<_CharT>::__cache_type __cache_type;\n+\t  typedef __numpunct_cache<_CharT>              __cache_type;\n \t  __use_cache<__cache_type> __uc;\n \t  const locale& __loc = __io._M_getloc();\n \t  const __cache_type* __lc = __uc(__loc);\n@@ -915,7 +915,7 @@ namespace std\n       _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,\n \t\t    _ValueT __v) const\n       {\n-\ttypedef typename numpunct<_CharT>::__cache_type\t__cache_type;\n+\ttypedef __numpunct_cache<_CharT>\t        __cache_type;\n \t__use_cache<__cache_type> __uc;\n \tconst locale& __loc = __io._M_getloc();\n \tconst __cache_type* __lc = __uc(__loc);\n@@ -1038,7 +1038,7 @@ namespace std\n       _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,\n \t\t       _ValueT __v) const\n       {\n-\ttypedef typename numpunct<_CharT>::__cache_type\t__cache_type;\n+\ttypedef __numpunct_cache<_CharT>                __cache_type;\n \t__use_cache<__cache_type> __uc;\n \tconst locale& __loc = __io._M_getloc();\n \tconst __cache_type* __lc = __uc(__loc);\n@@ -1165,7 +1165,7 @@ namespace std\n         }\n       else\n         {\n-\t  typedef typename numpunct<_CharT>::__cache_type __cache_type;\n+\t  typedef __numpunct_cache<_CharT>              __cache_type;\n \t  __use_cache<__cache_type> __uc;\n \t  const locale& __loc = __io._M_getloc();\n \t  const __cache_type* __lc = __uc(__loc);\n@@ -1259,8 +1259,7 @@ namespace std\n \ttypedef char_traits<_CharT>\t\t\t  __traits_type;\n \ttypedef typename string_type::size_type\t          size_type;\t\n \ttypedef money_base::part\t\t\t  part;\n-\ttypedef moneypunct<_CharT, _Intl>\t\t  __moneypunct_type;\n-\ttypedef typename __moneypunct_type::__cache_type  __cache_type;\n+\ttypedef __moneypunct_cache<_CharT, _Intl>         __cache_type;\n \t\n \tconst locale& __loc = __io._M_getloc();\n \tconst ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n@@ -1518,8 +1517,7 @@ namespace std\n       {\n \ttypedef typename string_type::size_type\t          size_type;\n \ttypedef money_base::part                          part;\n-\ttypedef moneypunct<_CharT, _Intl>                 __moneypunct_type;\n-\ttypedef typename __moneypunct_type::__cache_type  __cache_type;\n+\ttypedef __moneypunct_cache<_CharT, _Intl>         __cache_type;\n       \n \tconst locale& __loc = __io._M_getloc();\n \tconst ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n@@ -1535,7 +1533,7 @@ namespace std\n \tmoney_base::pattern __p;\n \tconst char_type* __sign;\n \tsize_type __sign_size;\n-\tif (*__beg != __lit[money_base::_S_minus])\n+\tif (!(*__beg == __lit[money_base::_S_minus]))\n \t  {\n \t    __p = __lc->_M_pos_format;\n \t    __sign = __lc->_M_positive_sign;\n@@ -2020,7 +2018,7 @@ namespace std\n \t    for (size_t __i3 = 0; __i3 < __nmatches;)\n \t      {\n \t\t__name = __names[__matches[__i3]];\n-\t\tif (__name[__pos] != *__beg)\n+\t\tif (!(__name[__pos] == *__beg))\n \t\t  __matches[__i3] = __matches[--__nmatches];\n \t\telse\n \t\t  ++__i3;"}, {"sha": "d2278f285251e7cd5218e298c193c72a1de690c8", "filename": "libstdc++-v3/testsuite/22_locale/money_get/3.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2F3.cc?ref=a70c902e06cb7fd86e5f7f7524cd7e4200cba0db", "patch": "@@ -0,0 +1,41 @@\n+// 2005-04-29  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1  Template class money_get\n+\n+// { dg-do compile }\n+\n+#include <locale> \n+#include <testsuite_character.h>\n+\n+class gnu_money_get: public std::money_get<__gnu_test::pod_uint> \n+{ };\n+\n+// libstdc++/21238\n+void test01()\n+{ \n+  gnu_money_get facet01;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "700b07ebf19c419603237c1a7f75127466f894d4", "filename": "libstdc++-v3/testsuite/22_locale/money_put/3.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2F3.cc?ref=a70c902e06cb7fd86e5f7f7524cd7e4200cba0db", "patch": "@@ -0,0 +1,41 @@\n+// 2005-04-29  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2  Template class money_put\n+\n+// { dg-do compile }\n+\n+#include <locale> \n+#include <testsuite_character.h>\n+\n+class gnu_money_put: public std::money_put<__gnu_test::pod_uint> \n+{ };\n+\n+// libstdc++/21238\n+void test01()\n+{ \n+  gnu_money_put facet01;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4399d682ff9c30d316e13ab27b613f26c122d567", "filename": "libstdc++-v3/testsuite/22_locale/num_get/3.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2F3.cc?ref=a70c902e06cb7fd86e5f7f7524cd7e4200cba0db", "patch": "@@ -0,0 +1,41 @@\n+// 2005-04-29  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1  Template class num_get\n+\n+// { dg-do compile }\n+\n+#include <locale> \n+#include <testsuite_character.h>\n+\n+class gnu_num_get: public std::num_get<__gnu_test::pod_uint> \n+{ };\n+\n+// libstdc++/21238\n+void test01()\n+{ \n+  gnu_num_get facet01;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "799294e4aa2f45517e9946c9a1719d6e1b63feba", "filename": "libstdc++-v3/testsuite/22_locale/num_put/3.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2F3.cc?ref=a70c902e06cb7fd86e5f7f7524cd7e4200cba0db", "patch": "@@ -0,0 +1,41 @@\n+// 2005-04-29  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2  Template class num_put\n+\n+// { dg-do compile }\n+\n+#include <locale> \n+#include <testsuite_character.h>\n+\n+class gnu_num_put: public std::num_put<__gnu_test::pod_uint> \n+{ };\n+\n+// libstdc++/21238\n+void test01()\n+{ \n+  gnu_num_put facet01;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "75a76887e90d4d3aea0b5f9090dbef9d09ad4b26", "filename": "libstdc++-v3/testsuite/testsuite_character.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.cc?ref=a70c902e06cb7fd86e5f7f7524cd7e4200cba0db", "patch": "@@ -39,6 +39,12 @@ namespace std\n   locale::id \n   ctype<__gnu_test::pod_uchar>::id;\n \n+  locale::id\n+  numpunct<__gnu_test::pod_uint>::id;\n+\n+  locale::id\n+  moneypunct<__gnu_test::pod_uint>::id;\n+\n   // Member specializations for the existing facet classes.  \n   // NB: This isn't especially portable. Perhaps a better way would be\n   // to just specialize all of numpunct and ctype."}, {"sha": "c4817d54f88701894b4c423ace0ec13f42068c47", "filename": "libstdc++-v3/testsuite/testsuite_character.h", "status": "modified", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70c902e06cb7fd86e5f7f7524cd7e4200cba0db/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h?ref=a70c902e06cb7fd86e5f7f7524cd7e4200cba0db", "patch": "@@ -71,6 +71,7 @@ namespace __gnu_test\n   typedef character<unsigned char, pod_int, pod_state>  \tpod_char;\n   typedef character<unsigned char, unsigned int, pod_state>  \tpod_uchar;\n   typedef character<unsigned short, unsigned int>\t   \tpod_ushort;\n+  typedef character<unsigned int, unsigned long>\t   \tpod_uint;  \n \n   // Specializations.\n   // pod_char\n@@ -377,6 +378,160 @@ namespace std\n \treturn high;\n       }\n     };\n+\n+  // numpunct specializations\n+  template<> \n+    class numpunct<__gnu_test::pod_uint>\n+    : public locale::facet\n+    { \n+    public: \n+      typedef __gnu_test::pod_uint    char_type; \n+      typedef basic_string<char_type> string_type; \n+    \n+      static locale::id id; \n+      \n+      explicit\n+      numpunct(size_t refs = 0)\n+      : locale::facet(refs) \n+      { } \n+ \n+      char_type\n+      decimal_point() const \n+      { return this->do_decimal_point(); } \n+ \n+      char_type\n+      thousands_sep() const \n+      { return this->do_thousands_sep(); } \n+ \n+      string\n+      grouping() const \n+      { return this->do_grouping(); } \n+ \n+      string_type\n+      truename() const \n+      { return this->do_truename(); } \n+ \n+      string_type\n+      falsename() const \n+      { return this->do_falsename(); } \n+ \n+    protected: \n+      ~numpunct()\n+      { } \n+ \n+      virtual char_type\n+      do_decimal_point() const \n+      { return char_type(); } \n+ \n+      virtual char_type\n+      do_thousands_sep() const \n+      { return char_type(); } \n+ \n+      virtual string\n+      do_grouping() const \n+      { return string(); } \n+ \n+      virtual string_type\n+      do_truename() const \n+      { return string_type(); }\n+ \n+      virtual string_type\n+      do_falsename() const \n+      { return string_type(); } \n+    };\n+\n+  template<> \n+    class moneypunct<__gnu_test::pod_uint>\n+    : public locale::facet, public money_base\n+    { \n+    public: \n+      typedef __gnu_test::pod_uint    char_type; \n+      typedef basic_string<char_type> string_type; \n+    \n+      static locale::id id; \n+      static const bool intl = false;\n+\n+      explicit\n+      moneypunct(size_t refs = 0)\n+      : locale::facet(refs) \n+      { }\n+ \n+      char_type\n+      decimal_point() const \n+      { return this->do_decimal_point(); } \n+ \n+      char_type\n+      thousands_sep() const \n+      { return this->do_thousands_sep(); }\n+\n+      string\n+      grouping() const\n+      { return this->do_grouping(); }\n+\n+      string_type\n+      curr_symbol() const \n+      { return this->do_curr_symbol(); } \n+ \n+      string_type\n+      positive_sign() const \n+      { return this->do_positive_sign(); } \n+\n+      string_type\n+      negative_sign() const \n+      { return this->do_negative_sign(); } \n+      \n+      int\n+      frac_digits() const\n+      { return this->do_frac_digits(); }\n+\n+      pattern\n+      pos_format() const\n+      { return this->do_pos_format(); }\n+ \n+      pattern\n+      neg_format() const\n+      { return this->do_neg_format(); }\n+  \n+    protected: \n+      ~moneypunct() \n+      { } \n+ \n+      virtual char_type\n+      do_decimal_point() const \n+      { return char_type(); } \n+ \n+      virtual char_type\n+      do_thousands_sep() const \n+      { return char_type(); } \n+ \n+      virtual string\n+      do_grouping() const \n+      { return string(); }\n+\n+      virtual string_type\n+      do_curr_symbol() const \n+      { return string_type(); } \n+ \n+      string_type\n+      do_positive_sign() const \n+      { return string_type(); } \n+\n+      string_type\n+      do_negative_sign() const \n+      { return string_type(); } \n+      \n+      int\n+      do_frac_digits() const\n+      { return 0; }\n+\n+      pattern\n+      do_pos_format() const\n+      { return pattern(); }\n+ \n+      pattern\n+      do_neg_format() const\n+      { return pattern(); }\n+     };\n } // namespace std\n \n #endif // _GLIBCXX_TESTSUITE_CHARACTER_H"}]}