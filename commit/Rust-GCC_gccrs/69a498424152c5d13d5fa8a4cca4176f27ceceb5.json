{"sha": "69a498424152c5d13d5fa8a4cca4176f27ceceb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlhNDk4NDI0MTUyYzVkMTNkNWZhOGE0Y2NhNDE3NmYyN2NlY2ViNQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2006-11-28T06:05:25Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2006-11-28T06:05:25Z"}, "message": "locks.h: Enable use of either file on either target to support multilibs from one to the...\n\n\t* sysdep/x86-64/locks.h: Enable use of either file on either\n\ttarget to support multilibs from one to the other.\n\t* sysdep/i386/locks.h: Likewise.\n\nFrom-SVN: r119276", "tree": {"sha": "fff2aca16cb8eb6c9d57fee5555601236821ecbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fff2aca16cb8eb6c9d57fee5555601236821ecbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69a498424152c5d13d5fa8a4cca4176f27ceceb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69a498424152c5d13d5fa8a4cca4176f27ceceb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69a498424152c5d13d5fa8a4cca4176f27ceceb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69a498424152c5d13d5fa8a4cca4176f27ceceb5/comments", "author": null, "committer": null, "parents": [{"sha": "7523cace86c3739099763b969614c5cd3eee4994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7523cace86c3739099763b969614c5cd3eee4994", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7523cace86c3739099763b969614c5cd3eee4994"}], "stats": {"total": 52, "additions": 34, "deletions": 18}, "files": [{"sha": "fd1d4ebb2e0d7a92d805a676be939ca6b2411c39", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a498424152c5d13d5fa8a4cca4176f27ceceb5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a498424152c5d13d5fa8a4cca4176f27ceceb5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=69a498424152c5d13d5fa8a4cca4176f27ceceb5", "patch": "@@ -1,3 +1,9 @@\n+2006-11-27  Mike Stump  <mrs@apple.com>\n+\n+\t* sysdep/x86-64/locks.h: Enable use of either file on either\n+\ttarget to support multilibs from one to the other.\n+\t* sysdep/i386/locks.h: Likewise.\n+\n 2006-11-21  Gary Benson  <gbenson@redhat.com>\n \n \t* java/security/Security.java: Merge with classpath."}, {"sha": "9d130b0f515446c27d83c8673f02499ac4cf7d3b", "filename": "libjava/sysdep/i386/locks.h", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a498424152c5d13d5fa8a4cca4176f27ceceb5/libjava%2Fsysdep%2Fi386%2Flocks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a498424152c5d13d5fa8a4cca4176f27ceceb5/libjava%2Fsysdep%2Fi386%2Flocks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Fi386%2Flocks.h?ref=69a498424152c5d13d5fa8a4cca4176f27ceceb5", "patch": "@@ -1,6 +1,6 @@\n-// locks.h - Thread synchronization primitives. X86 implementation.\n+/* locks.h - Thread synchronization primitives. X86/x86-64 implementation.\n \n-/* Copyright (C) 2002  Free Software Foundation\n+   Copyright (C) 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -20,21 +20,28 @@ typedef size_t obj_addr_t;\t/* Integer type big enough for object\t*/\n // cannot execute before the compare_and_swap finishes.\n inline static bool\n compare_and_swap(volatile obj_addr_t *addr,\n-\t\t  \t\t\t      obj_addr_t old,\n-\t\t\t\t\t      obj_addr_t new_val) \n+\t\t obj_addr_t old,\n+\t\t obj_addr_t new_val)\n {\n   char result;\n-  __asm__ __volatile__(\"lock; cmpxchgl %2, %0; setz %1\"\n-\t      : \"=m\"(*addr), \"=q\"(result)\n+#ifdef __x86_64__\n+  __asm__ __volatile__(\"lock; cmpxchgq %2, %0; setz %1\"\n+\t      : \"=m\"(*(addr)), \"=q\"(result)\n \t      : \"r\" (new_val), \"a\"(old), \"m\"(*addr)\n \t      : \"memory\");\n+#else\n+  __asm__ __volatile__(\"lock; cmpxchgl %2, %0; setz %1\"\n+\t\t       : \"=m\"(*addr), \"=q\"(result)\n+\t\t       : \"r\" (new_val), \"a\"(old), \"m\"(*addr)\n+\t\t       : \"memory\");\n+#endif\n   return (bool) result;\n }\n \n // Set *addr to new_val with release semantics, i.e. making sure\n // that prior loads and stores complete before this\n // assignment.\n-// On X86, the hardware shouldn't reorder reads and writes,\n+// On X86/x86-64, the hardware shouldn't reorder reads and writes,\n // so we just have to convince gcc not to do it either.\n inline static void\n release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n@@ -48,15 +55,15 @@ release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n // implementation can be the same.\n inline static bool\n compare_and_swap_release(volatile obj_addr_t *addr,\n-\t\t  \t\t\t\t     obj_addr_t old,\n-\t\t\t\t\t\t     obj_addr_t new_val)\n+\t\t\t obj_addr_t old,\n+\t\t\t obj_addr_t new_val)\n {\n   return compare_and_swap(addr, old, new_val);\n }\n \n // Ensure that subsequent instructions do not execute on stale\n // data that was loaded from memory before the barrier.\n-// On X86, the hardware ensures that reads are properly ordered.\n+// On X86/x86-64, the hardware ensures that reads are properly ordered.\n inline static void\n read_barrier()\n {\n@@ -67,7 +74,8 @@ read_barrier()\n inline static void\n write_barrier()\n {\n-  // X86 does not reorder writes. We just need to ensure that gcc also doesn't.\n+  /* x86-64/X86 does not reorder writes. We just need to ensure that\n+     gcc also doesn't.  */\n   __asm__ __volatile__(\" \" : : : \"memory\");\n }\n #endif"}, {"sha": "fdc0a3efb82594162c633d3fb316f12588a03036", "filename": "libjava/sysdep/x86-64/locks.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a498424152c5d13d5fa8a4cca4176f27ceceb5/libjava%2Fsysdep%2Fx86-64%2Flocks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a498424152c5d13d5fa8a4cca4176f27ceceb5/libjava%2Fsysdep%2Fx86-64%2Flocks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Fx86-64%2Flocks.h?ref=69a498424152c5d13d5fa8a4cca4176f27ceceb5", "patch": "@@ -1,4 +1,4 @@\n-/* locks.h - Thread synchronization primitives. x86-64 implementation.\n+/* locks.h - Thread synchronization primitives. X86/x86-64 implementation.\n \n    Copyright (C) 2002  Free Software Foundation\n \n@@ -21,7 +21,9 @@ typedef size_t obj_addr_t;\t/* Integer type big enough for object\t*/\n // Assumed to have acquire semantics, i.e. later memory operations\n // cannot execute before the compare_and_swap finishes.\n inline static bool\n-compare_and_swap(volatile obj_addr_t *addr, obj_addr_t old, obj_addr_t new_val)\n+compare_and_swap(volatile obj_addr_t *addr,\n+\t\t obj_addr_t old,\n+\t\t obj_addr_t new_val)\n {\n   char result;\n #ifdef __x86_64__\n@@ -31,7 +33,7 @@ compare_and_swap(volatile obj_addr_t *addr, obj_addr_t old, obj_addr_t new_val)\n \t      : \"memory\");\n #else\n   __asm__ __volatile__(\"lock; cmpxchgl %2, %0; setz %1\"\n-\t\t       : \"=m\"(*(addr)), \"=q\"(result)\n+\t\t       : \"=m\"(*addr), \"=q\"(result)\n \t\t       : \"r\" (new_val), \"a\"(old), \"m\"(*addr)\n \t\t       : \"memory\");\n #endif\n@@ -41,7 +43,7 @@ compare_and_swap(volatile obj_addr_t *addr, obj_addr_t old, obj_addr_t new_val)\n // Set *addr to new_val with release semantics, i.e. making sure\n // that prior loads and stores complete before this\n // assignment.\n-// On x86-64, the hardware shouldn't reorder reads and writes,\n+// On X86/x86-64, the hardware shouldn't reorder reads and writes,\n // so we just have to convince gcc not to do it either.\n inline static void\n release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n@@ -63,7 +65,7 @@ compare_and_swap_release(volatile obj_addr_t *addr,\n \n // Ensure that subsequent instructions do not execute on stale\n // data that was loaded from memory before the barrier.\n-// On x86-64, the hardware ensures that reads are properly ordered.\n+// On X86/x86-64, the hardware ensures that reads are properly ordered.\n inline static void\n read_barrier()\n {\n@@ -74,8 +76,8 @@ read_barrier()\n inline static void\n write_barrier()\n {\n-  /* x86-64 does not reorder writes. We just need to ensure that gcc also\n-     doesn't.  */\n+  /* x86-64/X86 does not reorder writes. We just need to ensure that\n+     gcc also doesn't.  */\n   __asm__ __volatile__(\" \" : : : \"memory\");\n }\n #endif"}]}