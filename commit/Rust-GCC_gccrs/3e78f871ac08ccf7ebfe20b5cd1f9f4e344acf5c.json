{"sha": "3e78f871ac08ccf7ebfe20b5cd1f9f4e344acf5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U3OGY4NzFhYzA4Y2NmN2ViZmUyMGI1Y2QxZjlmNGUzNDRhY2Y1Yw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-12-13T17:51:02Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-12-13T17:51:02Z"}, "message": "parse.y (patch_method_invocation): If class_decl is null (e.g.\n\n\ufffd\n\t* parse.y (patch_method_invocation):  If class_decl is null\n\t(e.g. an array type), use original type.\n\t* parse.y (check_thrown_exceptions):  Temporary hack to suppress\n\terrors about uncaught exception from clone (of array, specifically).\n\nFrom-SVN: r24298", "tree": {"sha": "2803370ba4816bd51a32cb74a35d0e7170399055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2803370ba4816bd51a32cb74a35d0e7170399055"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e78f871ac08ccf7ebfe20b5cd1f9f4e344acf5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e78f871ac08ccf7ebfe20b5cd1f9f4e344acf5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e78f871ac08ccf7ebfe20b5cd1f9f4e344acf5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e78f871ac08ccf7ebfe20b5cd1f9f4e344acf5c/comments", "author": null, "committer": null, "parents": [{"sha": "cb975f38fbfb5d5d0cd1092b013c64cd54a2a1ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb975f38fbfb5d5d0cd1092b013c64cd54a2a1ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb975f38fbfb5d5d0cd1092b013c64cd54a2a1ce"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "3183846be203cf9ff2cc41b827baf3bf459146b1", "filename": "gcc/java/parse.y", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e78f871ac08ccf7ebfe20b5cd1f9f4e344acf5c/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e78f871ac08ccf7ebfe20b5cd1f9f4e344acf5c/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=3e78f871ac08ccf7ebfe20b5cd1f9f4e344acf5c", "patch": "@@ -6640,6 +6640,7 @@ patch_method_invocation (patch, primary, where, is_static, ret_decl)\n \t  /* 2- Do the layout of the class where the last field\n \t     was found, so we can search it. */\n \t  class_decl = resolve_and_layout (type, NULL_TREE);\n+\t  if (class_decl != NULL_TREE)\n \t  type = TREE_TYPE (class_decl);\n \n \t  /* 3- Retrieve a filtered list of method matches, Refine\n@@ -10855,6 +10856,11 @@ check_thrown_exceptions (location, decl)\n        throws = TREE_CHAIN (throws)) \n     if (!check_thrown_exceptions_do (TREE_VALUE (throws)))\n       {\n+#if 1\n+\t/* Temporary hack to suppresses errors about cloning arrays. FIXME */\n+\tif (DECL_NAME (decl) == get_identifier (\"clone\"))\n+\t  continue;\n+#endif\n \tEXPR_WFL_LINECOL (wfl_operator) = location;\n \tparse_error_context \n \t  (wfl_operator, \"Exception `%s' must be caught, or it must be \""}]}