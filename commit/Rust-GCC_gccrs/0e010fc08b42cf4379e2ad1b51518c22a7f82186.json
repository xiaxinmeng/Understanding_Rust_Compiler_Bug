{"sha": "0e010fc08b42cf4379e2ad1b51518c22a7f82186", "node_id": "C_kwDOANBUbNoAKDBlMDEwZmMwOGI0MmNmNDM3OWUyYWQxYjUxNTE4YzIyYTdmODIxODY", "commit": {"author": {"name": "Tage Johansson", "email": "frans.tage@gmail.com", "date": "2023-03-04T18:43:02Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-03-16T10:19:16Z"}, "message": "gccrs: Add all rust keywords (except priv) to the follow-set of `:vis` when parsing macro rules\n\nPreviously, the following macro rules were rejected by gccrs:\n```Rust\nmacro_rules! {\n    ($v:vis <KEY_WORD>) => { ... };\n}\n```\n\nThis PR fixes so the above code is accepted by the compiler for all key words like `async` or `unsafe`.\nThe only exception is the keyword `priv` which is not allowed.\nSee [this page](https://doc.rust-lang.org/reference/macro-ambiguity.html) for reference. Especially the following excerpt:\n> FOLLOW(vis) = {,l any keyword or identifier except a non-raw priv; any token that can begin a type; ident, ty, and path nonterminals}.\n\nFixes #1060\n\ngcc/rust/ChangeLog:\n\n\t* parse/rust-parse.cc: fix follow-sets\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/macro47.rs: Test that :vis can be followed by some keywords\n\t* rust/compile/macro48.rs: Test that :vis cannot be followed by the keyword priv\n\nSigned-off-by: Tage Johansson <frans.tage@gmail.com>", "tree": {"sha": "7a10cd3d564b6fd55a20eab18b4ddfcbf3e908f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a10cd3d564b6fd55a20eab18b4ddfcbf3e908f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e010fc08b42cf4379e2ad1b51518c22a7f82186", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e010fc08b42cf4379e2ad1b51518c22a7f82186", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e010fc08b42cf4379e2ad1b51518c22a7f82186", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e010fc08b42cf4379e2ad1b51518c22a7f82186/comments", "author": {"login": "tage64", "id": 40422978, "node_id": "MDQ6VXNlcjQwNDIyOTc4", "avatar_url": "https://avatars.githubusercontent.com/u/40422978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tage64", "html_url": "https://github.com/tage64", "followers_url": "https://api.github.com/users/tage64/followers", "following_url": "https://api.github.com/users/tage64/following{/other_user}", "gists_url": "https://api.github.com/users/tage64/gists{/gist_id}", "starred_url": "https://api.github.com/users/tage64/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tage64/subscriptions", "organizations_url": "https://api.github.com/users/tage64/orgs", "repos_url": "https://api.github.com/users/tage64/repos", "events_url": "https://api.github.com/users/tage64/events{/privacy}", "received_events_url": "https://api.github.com/users/tage64/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae80bcdd9b3bb8ace429804dd0f493d9f31b7c29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae80bcdd9b3bb8ace429804dd0f493d9f31b7c29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae80bcdd9b3bb8ace429804dd0f493d9f31b7c29"}], "stats": {"total": 112, "additions": 84, "deletions": 28}, "files": [{"sha": "1b565bc8f456a5563bdad170f3f266472295dcee", "filename": "gcc/rust/parse/rust-parse.cc", "status": "modified", "additions": 64, "deletions": 28, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e010fc08b42cf4379e2ad1b51518c22a7f82186/gcc%2Frust%2Fparse%2Frust-parse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e010fc08b42cf4379e2ad1b51518c22a7f82186/gcc%2Frust%2Fparse%2Frust-parse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.cc?ref=0e010fc08b42cf4379e2ad1b51518c22a7f82186", "patch": "@@ -17,6 +17,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rust-parse.h\"\n #include \"rust-linemap.h\"\n #include \"rust-diagnostics.h\"\n+#include \"rust-token.h\"\n \n namespace Rust {\n \n@@ -166,34 +167,69 @@ peculiar_fragment_match_compatible (const AST::MacroMatchFragment &last_match,\n \t{MATCH_ARROW, COMMA, EQUAL, PIPE, SEMICOLON, COLON, RIGHT_ANGLE,\n \t RIGHT_SHIFT, LEFT_SQUARE, LEFT_CURLY, AS, WHERE}},\n        {AST::MacroFragSpec::VIS,\n-\t{\n-\t  COMMA,\n-\t  IDENTIFIER /* FIXME: Other than `priv` */,\n-\t  LEFT_PAREN,\n-\t  LEFT_SQUARE,\n-\t  EXCLAM,\n-\t  ASTERISK,\n-\t  AMP,\n-\t  LOGICAL_AND,\n-\t  QUESTION_MARK,\n-\t  LIFETIME,\n-\t  LEFT_ANGLE,\n-\t  LEFT_SHIFT,\n-\t  SUPER,\n-\t  SELF,\n-\t  SELF_ALIAS,\n-\t  EXTERN_TOK,\n-\t  CRATE,\n-\t  UNDERSCORE,\n-\t  FOR,\n-\t  IMPL,\n-\t  FN_TOK,\n-\t  UNSAFE,\n-\t  TYPEOF,\n-\t  DYN\n-\t  // FIXME: Add Non kw identifiers\n-\t  // FIXME: Add $crate as valid\n-\t}}};\n+\t{COMMA,\n+\t IDENTIFIER,\n+\t LEFT_PAREN,\n+\t LEFT_SQUARE,\n+\t EXCLAM,\n+\t ASTERISK,\n+\t AMP,\n+\t LOGICAL_AND,\n+\t QUESTION_MARK,\n+\t LIFETIME,\n+\t LEFT_ANGLE,\n+\t LEFT_SHIFT,\n+\t UNDERSCORE,\n+\t ABSTRACT,\n+\t AS,\n+\t ASYNC,\n+\t AUTO,\n+\t BECOME,\n+\t BOX,\n+\t BREAK,\n+\t CONST,\n+\t CONTINUE,\n+\t CRATE,\n+\t DO,\n+\t DYN,\n+\t ELSE,\n+\t ENUM_TOK,\n+\t EXTERN_TOK,\n+\t FALSE_LITERAL,\n+\t FINAL_TOK,\n+\t FN_TOK,\n+\t FOR,\n+\t IF,\n+\t IMPL,\n+\t IN,\n+\t LET,\n+\t LOOP,\n+\t MACRO,\n+\t MATCH_TOK,\n+\t MOD,\n+\t MOVE,\n+\t MUT,\n+\t OVERRIDE_TOK,\n+\t PUB,\n+\t REF,\n+\t RETURN_TOK,\n+\t SELF_ALIAS,\n+\t SELF,\n+\t STATIC_TOK,\n+\t STRUCT_TOK,\n+\t SUPER,\n+\t TRAIT,\n+\t TRUE_LITERAL,\n+\t TRY,\n+\t TYPE,\n+\t TYPEOF,\n+\t UNSAFE,\n+\t UNSIZED,\n+\t USE,\n+\t VIRTUAL,\n+\t WHERE,\n+\t WHILE,\n+\t YIELD}}};\n \n   Location error_locus = match.get_match_locus ();\n   std::string kind_str = \"fragment\";"}, {"sha": "36545af7e1669354f4db41e109287e5bc311863f", "filename": "gcc/testsuite/rust/compile/macro47.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e010fc08b42cf4379e2ad1b51518c22a7f82186/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro47.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e010fc08b42cf4379e2ad1b51518c22a7f82186/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro47.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro47.rs?ref=0e010fc08b42cf4379e2ad1b51518c22a7f82186", "patch": "@@ -0,0 +1,10 @@\n+// Check the follow-set of :vis in macro rules.\n+\n+macro_rules! my_mac {\n+    ($v:vis async) => {\n+        $v struct Foo(i32);\n+    };\n+    ($v:vis $i:ident) => {\n+        $v struct $i(i32);\n+    }\n+}"}, {"sha": "6b3b369bc3a0eba20fa41eb2e6dcd015d244d75e", "filename": "gcc/testsuite/rust/compile/macro48.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e010fc08b42cf4379e2ad1b51518c22a7f82186/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro48.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e010fc08b42cf4379e2ad1b51518c22a7f82186/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro48.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro48.rs?ref=0e010fc08b42cf4379e2ad1b51518c22a7f82186", "patch": "@@ -0,0 +1,10 @@\n+// Check that \"priv\" is not in the follow set of :vis.\n+\n+// { dg-error \"token .priv. is not allowed after .vis. fragment\" \"#359\" { target *-*-* } .+4 }\n+// { dg-error \"required first macro rule in macro rules definition could not be parsed\" \"\" { target *-*-* } .+3 }\n+// { dg-error \"failed to parse item in crate\" \"\" { target *-*-* } .+2 }\n+macro_rules! my_mac {\n+    ($v:vis priv) => {\n+        $v struct Foo(i32);\n+    }\n+}"}]}