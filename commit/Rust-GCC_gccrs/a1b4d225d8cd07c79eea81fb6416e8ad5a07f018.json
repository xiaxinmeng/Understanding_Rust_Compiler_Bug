{"sha": "a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "node_id": "C_kwDOANBUbNoAKGExYjRkMjI1ZDhjZDA3Yzc5ZWVhODFmYjY0MTZlOGFkNWEwN2YwMTg", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2022-02-03T02:59:00Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2022-02-03T15:01:55Z"}, "message": "rs6000: Unify error messages for built-in constant restrictions\n\nWe currently give different error messages for built-in functions that\nviolate range restrictions on their arguments, depending on whether we\nrecord them as requiring an n-bit literal or a literal between two values.\nIt's better to be consistent.  Change the error message for the n-bit\nliteral to look like the other one.\n\n2022-02-02  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-call.cc (rs6000_expand_builtin): Revise error\n\tmessage for RES_BITS case.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/bfp/scalar-test-data-class-10.c: Adjust error\n\tmessages.\n\t* gcc.target/powerpc/bfp/scalar-test-data-class-2.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-test-data-class-3.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-test-data-class-4.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-test-data-class-5.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-test-data-class-9.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-test-data-class-4.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-test-data-class-5.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-test-data-class-6.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-test-data-class-7.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-12.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-14.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-17.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-19.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-2.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-22.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-24.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-27.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-29.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-32.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-34.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-37.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-39.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-4.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-42.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-44.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-47.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-49.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-52.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-54.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-57.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-59.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-62.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-64.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-67.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-69.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-7.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-72.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-74.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-77.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-79.c: Likewise.\n\t* gcc.target/powerpc/dfp/dtstsfi-9.c: Likewise.\n\t* gcc.target/powerpc/pr80315-1.c: Likewise.\n\t* gcc.target/powerpc/pr80315-2.c: Likewise.\n\t* gcc.target/powerpc/pr80315-3.c: Likewise.\n\t* gcc.target/powerpc/pr80315-4.c: Likewise.\n\t* gcc.target/powerpc/pr82015.c: Likewise.\n\t* gcc.target/powerpc/pr91903.c: Likewise.\n\t* gcc.target/powerpc/test_fpscr_rn_builtin_error.c: Likewise.\n\t* gcc.target/powerpc/vec-ternarylogic-10.c: Likewise.", "tree": {"sha": "2dc77ffc5b36719ee7ff5c1b7956be493abe2652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dc77ffc5b36719ee7ff5c1b7956be493abe2652"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/comments", "author": null, "committer": null, "parents": [{"sha": "f544e5efaf2747ee2add3d408cc2f216433ba617", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f544e5efaf2747ee2add3d408cc2f216433ba617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f544e5efaf2747ee2add3d408cc2f216433ba617"}], "stats": {"total": 176, "additions": 89, "deletions": 87}, "files": [{"sha": "d9bd5cacc16729767f6c07cf5965b420baaad45a", "filename": "gcc/config/rs6000/rs6000-call.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -5717,8 +5717,10 @@ rs6000_expand_builtin (tree exp, rtx target, rtx /* subtarget */,\n \t    if (!(TREE_CODE (restr_arg) == INTEGER_CST\n \t\t  && (TREE_INT_CST_LOW (restr_arg) & ~mask) == 0))\n \t      {\n-\t\terror (\"argument %d must be a %d-bit unsigned literal\",\n-\t\t       bifaddr->restr_opnd[i], bifaddr->restr_val1[i]);\n+\t\tunsigned p = (1U << bifaddr->restr_val1[i]) - 1;\n+\t\terror (\"argument %d must be a literal between 0 and %d,\"\n+\t\t       \" inclusive\",\n+\t\t       bifaddr->restr_opnd[i], p);\n \t\treturn CONST0_RTX (mode[0]);\n \t      }\n \t    break;"}, {"sha": "fcf6a9dca79d7086207b500e5ed4d1634fff82dd", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-data-class-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-10.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -13,6 +13,6 @@ test_data_class (__ieee128 *p, const int condition_flag)\n {\n   __ieee128 source = *p;\n \n-  return scalar_test_data_class (source, condition_flag); /* { dg-error \"argument 2 must be a 7-bit unsigned literal\" } */\n+  return scalar_test_data_class (source, condition_flag); /* { dg-error \"argument 2 must be a literal between 0 and 127, inclusive\" } */\n }\n "}, {"sha": "9130c9714bfd89766b733b99b03d3d723a17d330", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-data-class-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-2.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -10,6 +10,6 @@ test_data_class (double *p)\n {\n   double source = *p;\n \n-  return scalar_test_data_class (source, 256);\t/* { dg-error \"argument 2 must be a 7-bit unsigned literal\" } */\n+  return scalar_test_data_class (source, 256);\t/* { dg-error \"argument 2 must be a literal between 0 and 127, inclusive\" } */\n }\n "}, {"sha": "b863bb2bc2748895ece82d148b21de93d159c3d1", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-data-class-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-3.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -10,6 +10,6 @@ test_data_class (float *p)\n {\n   float source = *p;\n \n-  return scalar_test_data_class (source, 256);\t/* { dg-error \"argument 2 must be a 7-bit unsigned literal\" } */\n+  return scalar_test_data_class (source, 256);\t/* { dg-error \"argument 2 must be a literal between 0 and 127, inclusive\" } */\n }\n "}, {"sha": "83ddffa77a362c01def18568f29855ba9689f4a7", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-data-class-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-4.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -10,6 +10,6 @@ test_data_class (double *p, const int condition_flag)\n {\n   double source = *p;\n \n-  return scalar_test_data_class (source, condition_flag); /* { dg-error \"argument 2 must be a 7-bit unsigned literal\" } */\n+  return scalar_test_data_class (source, condition_flag); /* { dg-error \"argument 2 must be a literal between 0 and 127, inclusive\" } */\n }\n "}, {"sha": "101a919c9e4a5a038078e8ed6247cef5b9a20c8e", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-data-class-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-5.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -10,6 +10,6 @@ test_data_class (float *p, const int condition_flag)\n {\n   float source = *p;\n \n-  return scalar_test_data_class (source, condition_flag);\t/* { dg-error \"argument 2 must be a 7-bit unsigned literal\" } */\n+  return scalar_test_data_class (source, condition_flag);\t/* { dg-error \"argument 2 must be a literal between 0 and 127, inclusive\" } */\n }\n "}, {"sha": "f87851c2c5f297733a676cee578a8ecf4b5ac9bf", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-data-class-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-9.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -13,6 +13,6 @@ test_data_class (__ieee128 *p)\n \n   /* IEEE 128-bit floating point operations are only supported\n      on 64-bit targets.  */\n-  return scalar_test_data_class (source, 256);\t/* { dg-error \"argument 2 must be a 7-bit unsigned literal\" } */\n+  return scalar_test_data_class (source, 256);\t/* { dg-error \"argument 2 must be a literal between 0 and 127, inclusive\" } */\n }\n "}, {"sha": "448406c0d477e2260dd3aee0ad25eb883394a2bc", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-test-data-class-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-4.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -9,5 +9,5 @@ get_data_class_flags (__vector float *p)\n {\n   __vector float source = *p;\n \n-  return vec_test_data_class (source, 256);\t/* { dg-error \"argument 2 must be a 7-bit unsigned literal\" } */\n+  return vec_test_data_class (source, 256);\t/* { dg-error \"argument 2 must be a literal between 0 and 127, inclusive\" } */\n }"}, {"sha": "64a52a15439123bd56a0bf34dd2e86700a967723", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-test-data-class-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-5.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -9,5 +9,5 @@ get_data_class_flags (__vector double *p)\n {\n   __vector double source = *p;\n \n-  return vec_test_data_class (source, 256);\t/* { dg-error \"argument 2 must be a 7-bit unsigned literal\" } */\n+  return vec_test_data_class (source, 256);\t/* { dg-error \"argument 2 must be a literal between 0 and 127, inclusive\" } */\n }"}, {"sha": "5f35e0e368a49732b9e64da3644c0896f96ccefd", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-test-data-class-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-6.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -9,5 +9,5 @@ get_data_class_flags (__vector float *p, int condition_flag)\n {\n   __vector float source = *p;\n \n-  return vec_test_data_class (source, condition_flag); /* { dg-error \"argument 2 must be a 7-bit unsigned literal\" } */\n+  return vec_test_data_class (source, condition_flag); /* { dg-error \"argument 2 must be a literal between 0 and 127, inclusive\" } */\n }"}, {"sha": "bda2c6d9db383a5b27ddd222b7ad3372efadd196", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-test-data-class-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-7.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -9,5 +9,5 @@ get_data_class_flags (__vector double *p, int condition_flag)\n {\n   __vector double source = *p;\n \n-  return vec_test_data_class (source, condition_flag); /* { dg-error \"argument 2 must be a 7-bit unsigned literal\" } */\n+  return vec_test_data_class (source, condition_flag); /* { dg-error \"argument 2 must be a literal between 0 and 127, inclusive\" } */\n }"}, {"sha": "4feb391876790c8470a23cee29d1f9fff9d11523", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-12.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,6 +8,6 @@ int doTestBCDSignificance (_Decimal64 *p)\n {\n   _Decimal64 source = *p;\n \n-  return __builtin_dfp_dtstsfi_lt_dd (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_lt_dd (65, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n "}, {"sha": "ef4d6ad707b04c634f7901afa1f35366db577b35", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-14.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,6 +8,6 @@ int doTestBCDSignificance (_Decimal64 *p, unsigned int significance)\n {\n   _Decimal64 source = *p;\n \n-  return __builtin_dfp_dtstsfi_lt_dd (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_lt_dd (significance, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n "}, {"sha": "5a9ab5126fc98b162e922aae4f26710e70d6674d", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-17.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-17.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,7 +8,7 @@ int doTestBCDSignificance (_Decimal128 *p)\n {\n   _Decimal128 source = *p;\n \n-  return __builtin_dfp_dtstsfi_lt_td (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_lt_td (65, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n \n "}, {"sha": "f1918a251c2a854c4c14aec77c56f61e29a99a50", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-19.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,5 +8,5 @@ int doTestBCDSignificance (_Decimal128 *p, unsigned int significance)\n {\n   _Decimal128 source = *p;\n \n-  return __builtin_dfp_dtstsfi_lt_td (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_lt_td (significance, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }"}, {"sha": "b353d63f5a5c8071759835e5cc643bab04c1b5ec", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-2.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,6 +8,6 @@ int doTestBCDSignificance (_Decimal64 *p)\n {\n   _Decimal64 source = *p;\n \n-  return __builtin_dfp_dtstsfi_lt (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_lt (65, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n "}, {"sha": "464dc66d45763806ce4deeffef9158ea98fc514f", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-22.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-22.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,6 +8,6 @@ int doTestBCDSignificance (_Decimal64 *p)\n {\n   _Decimal64 source = *p;\n \n-  return __builtin_dfp_dtstsfi_gt (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_gt (65, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n "}, {"sha": "6e5e07b1c88bdf54b2b5eb20aefd6cfada85209e", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-24.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-24.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,6 +8,6 @@ int doTestBCDSignificance (_Decimal64 *p, unsigned int significance)\n {\n   _Decimal64 source = *p;\n \n-  return __builtin_dfp_dtstsfi_gt (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_gt (significance, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n "}, {"sha": "d8760cefc945a4e9a78fa67a3f699b28b4bb7598", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-27.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-27.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,7 +8,7 @@ int doTestBCDSignificance (_Decimal128 *p)\n {\n   _Decimal128 source = *p;\n \n-  return __builtin_dfp_dtstsfi_gt (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_gt (65, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n \n "}, {"sha": "fed06bbbb6c84f14c1a34a0f34a612b9c5d3cbab", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-29.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-29.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,5 +8,5 @@ int doTestBCDSignificance (_Decimal128 *p, unsigned int significance)\n {\n   _Decimal128 source = *p;\n \n-  return __builtin_dfp_dtstsfi_gt (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_gt (significance, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }"}, {"sha": "868146c8f53ca8289dea25c0d58c9048867b600c", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-32.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,6 +8,6 @@ int doTestBCDSignificance (_Decimal64 *p)\n {\n   _Decimal64 source = *p;\n \n-  return __builtin_dfp_dtstsfi_gt_dd (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_gt_dd (65, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n "}, {"sha": "de174998d218431a6d08b75597570e4dcb1e647b", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-34.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-34.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,6 +8,6 @@ int doTestBCDSignificance (_Decimal64 *p, unsigned int significance)\n {\n   _Decimal64 source = *p;\n \n-  return __builtin_dfp_dtstsfi_gt_dd (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_gt_dd (significance, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n "}, {"sha": "1e5ff356ceb1583a20daa9897e333fdbff3247a0", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-37.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-37.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,7 +8,7 @@ int doTestBCDSignificance (_Decimal128 *p)\n {\n   _Decimal128 source = *p;\n \n-  return __builtin_dfp_dtstsfi_gt_td (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_gt_td (65, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n \n "}, {"sha": "b5f886d861afbc9af750cd57541904927c0b5504", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-39.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-39.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,5 +8,5 @@ int doTestBCDSignificance (_Decimal128 *p, unsigned int significance)\n {\n   _Decimal128 source = *p;\n \n-  return __builtin_dfp_dtstsfi_gt_td (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_gt_td (significance, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }"}, {"sha": "ad840bf5465528a65a63c02e393656acac30b9ba", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-4.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,6 +8,6 @@ int doTestBCDSignificance (_Decimal64 *p, unsigned int significance)\n {\n   _Decimal64 source = *p;\n \n-  return __builtin_dfp_dtstsfi_lt (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_lt (significance, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n "}, {"sha": "586c86f2ab72e2403b346b528e36ff98512e7034", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-42.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-42.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,6 +8,6 @@ int doTestBCDSignificance (_Decimal64 *p)\n {\n   _Decimal64 source = *p;\n \n-  return __builtin_dfp_dtstsfi_eq (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_eq (65, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n "}, {"sha": "dc01b7fc614104c1c6cfc488749f48257f3f9f3c", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-44.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-44.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,6 +8,6 @@ int doTestBCDSignificance (_Decimal64 *p, unsigned int significance)\n {\n   _Decimal64 source = *p;\n \n-  return __builtin_dfp_dtstsfi_eq (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_eq (significance, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n "}, {"sha": "9ff41263531a18cf5fe5830be41ac5a38b37a685", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-47.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-47.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,7 +8,7 @@ int doTestBCDSignificance (_Decimal128 *p)\n {\n   _Decimal128 source = *p;\n \n-  return __builtin_dfp_dtstsfi_eq (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_eq (65, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n \n "}, {"sha": "5040ac87ed6ed44e1e88503e280a66efcee63472", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-49.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-49.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-49.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-49.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,5 +8,5 @@ int doTestBCDSignificance (_Decimal128 *p, unsigned int significance)\n {\n   _Decimal128 source = *p;\n \n-  return __builtin_dfp_dtstsfi_eq (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_eq (significance, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }"}, {"sha": "a79e6b5dbb125d8079fb7c3845e2a88bd9fc2807", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-52.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-52.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-52.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-52.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,6 +8,6 @@ int doTestBCDSignificance (_Decimal64 *p)\n {\n   _Decimal64 source = *p;\n \n-  return __builtin_dfp_dtstsfi_eq_dd (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_eq_dd (65, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n "}, {"sha": "5e9a93fd05edc130f6e41f1aeee121a94d43406e", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-54.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-54.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-54.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-54.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,6 +8,6 @@ int doTestBCDSignificance (_Decimal64 *p, unsigned int significance)\n {\n   _Decimal64 source = *p;\n \n-  return __builtin_dfp_dtstsfi_eq_dd (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_eq_dd (significance, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n "}, {"sha": "ec2abc6499f7b18fef1b47b4b15334cd825bccaa", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-57.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-57.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-57.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-57.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,7 +8,7 @@ int doTestBCDSignificance (_Decimal128 *p)\n {\n   _Decimal128 source = *p;\n \n-  return __builtin_dfp_dtstsfi_eq_td (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_eq_td (65, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n \n "}, {"sha": "6f63d0f831fb6313732e25b11ce29132f16be0e4", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-59.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-59.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-59.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-59.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,5 +8,5 @@ int doTestBCDSignificance (_Decimal128 *p, unsigned int significance)\n {\n   _Decimal128 source = *p;\n \n-  return __builtin_dfp_dtstsfi_eq_td (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_eq_td (significance, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }"}, {"sha": "4786be7bb4887ca932ad2fb9090f4801b2996881", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-62.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-62.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-62.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-62.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,6 +8,6 @@ int doTestBCDSignificance (_Decimal64 *p)\n {\n   _Decimal64 source = *p;\n \n-  return __builtin_dfp_dtstsfi_ov (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_ov (65, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n "}, {"sha": "c406d4d1ca87026e02c1d553e72047df22d534b3", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-64.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,6 +8,6 @@ int doTestBCDSignificance (_Decimal64 *p, unsigned int significance)\n {\n   _Decimal64 source = *p;\n \n-  return __builtin_dfp_dtstsfi_ov (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_ov (significance, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n "}, {"sha": "d7b3b6f01acabe9ae6b21b53de48daf808be1dbf", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-67.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-67.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-67.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-67.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,7 +8,7 @@ int doTestBCDSignificance (_Decimal128 *p)\n {\n   _Decimal128 source = *p;\n \n-  return __builtin_dfp_dtstsfi_ov (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_ov (65, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n \n "}, {"sha": "bc9ced3ceb00d98b6c85fbd1a4d009331fbec4ed", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-69.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-69.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,5 +8,5 @@ int doTestBCDSignificance (_Decimal128 *p, unsigned int significance)\n {\n   _Decimal128 source = *p;\n \n-  return __builtin_dfp_dtstsfi_ov (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_ov (significance, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }"}, {"sha": "dcfe162c832f4dd9dfbf725604787ae1e45db22b", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-7.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,5 +8,5 @@ int doTestBCDSignificance (_Decimal128 *p)\n {\n   _Decimal128 source = *p;\n \n-  return __builtin_dfp_dtstsfi_lt (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_lt (65, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }"}, {"sha": "04d950e3df54785bdc459d2f5b95e75818bdde6a", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-72.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-72.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-72.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-72.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,6 +8,6 @@ int doTestBCDSignificance (_Decimal64 *p)\n {\n   _Decimal64 source = *p;\n \n-  return __builtin_dfp_dtstsfi_ov_dd (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_ov_dd (65, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n "}, {"sha": "369312d84ea30dc5270344308e94eddbf4f2b9d9", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-74.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-74.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-74.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-74.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,6 +8,6 @@ int doTestBCDSignificance (_Decimal64 *p, unsigned int significance)\n {\n   _Decimal64 source = *p;\n \n-  return __builtin_dfp_dtstsfi_ov_dd (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_ov_dd (significance, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n "}, {"sha": "ca6c739a0456d8ed0e4dc5b3a54983627d198a63", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-77.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-77.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-77.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-77.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,7 +8,7 @@ int doTestBCDSignificance (_Decimal128 *p)\n {\n   _Decimal128 source = *p;\n \n-  return __builtin_dfp_dtstsfi_ov_td (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_ov_td (65, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }\n \n "}, {"sha": "9ee60cfe8e2902e66f9a3af4dfc8a6a734267b25", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-79.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-79.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-79.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-79.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,5 +8,5 @@ int doTestBCDSignificance (_Decimal128 *p, unsigned int significance)\n {\n   _Decimal128 source = *p;\n \n-  return __builtin_dfp_dtstsfi_ov_td (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_ov_td (significance, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }"}, {"sha": "9a9ff3899f27474fe329870f8498d0fdc042bc05", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-9.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,5 +8,5 @@ int doTestBCDSignificance (_Decimal128 *p, unsigned int significance)\n {\n   _Decimal128 source = *p;\n \n-  return __builtin_dfp_dtstsfi_lt (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+  return __builtin_dfp_dtstsfi_lt (significance, source);\t/* { dg-error \"argument 1 must be a literal between 0 and 63, inclusive\" } */\n }"}, {"sha": "7198611258fb4d458434246f9ef8c4035832ae8d", "filename": "gcc/testsuite/gcc.target/powerpc/pr80315-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-1.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -10,6 +10,6 @@ main()\n   int mask;\n \n   /* Argument 2 must be 0 or 1.  Argument 3 must be in range 0..15.  */\n-  res = __builtin_crypto_vshasigmaw (test, 1, 0xff); /* { dg-error {argument 3 must be a 4-bit unsigned literal} } */\n+  res = __builtin_crypto_vshasigmaw (test, 1, 0xff); /* { dg-error {argument 3 must be a literal between 0 and 15, inclusive} } */\n   return 0;\n }"}, {"sha": "0f77f775ad38f8dd35e4ffd0f842ea55242f5cf4", "filename": "gcc/testsuite/gcc.target/powerpc/pr80315-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-2.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -10,6 +10,6 @@ main ()\n   int mask;\n \n   /* Argument 2 must be 0 or 1.  Argument 3 must be in range 0..15.  */\n-  res = __builtin_crypto_vshasigmad (test, 1, 0xff); /* { dg-error {argument 3 must be a 4-bit unsigned literal} } */\n+  res = __builtin_crypto_vshasigmad (test, 1, 0xff); /* { dg-error {argument 3 must be a literal between 0 and 15, inclusive} } */\n   return 0;\n }"}, {"sha": "398c512274d6ef45f916ce69798fe5348ad0485d", "filename": "gcc/testsuite/gcc.target/powerpc/pr80315-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-3.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -12,6 +12,6 @@ main ()\n   int mask;\n \n   /* Argument 2 must be 0 or 1.  Argument 3 must be in range 0..15.  */\n-  res = vec_shasigma_be (test, 1, 0xff); /* { dg-error {argument 3 must be a 4-bit unsigned literal} } */\n+  res = vec_shasigma_be (test, 1, 0xff); /* { dg-error {argument 3 must be a literal between 0 and 15, inclusive} } */\n   return res;\n }"}, {"sha": "4326ff64c189a50f49d69149a1c1af9ba0fd541d", "filename": "gcc/testsuite/gcc.target/powerpc/pr80315-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-4.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -12,6 +12,6 @@ main ()\n   int mask;\n \n   /* Argument 2 must be 0 or 1.  Argument 3 must be in range 0..15.  */\n-  res = vec_shasigma_be (test, 1, 0xff); /* { dg-error {argument 3 must be a 4-bit unsigned literal} } */\n+  res = vec_shasigma_be (test, 1, 0xff); /* { dg-error {argument 3 must be a literal between 0 and 15, inclusive} } */\n   return res;\n }"}, {"sha": "40f1c7d2a5cce14ea20cf5d881d1a55b73f7bb5d", "filename": "gcc/testsuite/gcc.target/powerpc/pr82015.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr82015.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr82015.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr82015.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -5,10 +5,10 @@\n \n unsigned long foo_11(__vector __int128_t *p)\n {\n-  return __builtin_unpack_vector_int128(*p, 11); /* { dg-error \"argument 2 must be a 1-bit unsigned literal\" } */\n+  return __builtin_unpack_vector_int128(*p, 11); /* { dg-error \"argument 2 must be a literal between 0 and 1, inclusive\" } */\n }\n \n unsigned long foo_n(__vector __int128_t *p, unsigned long n)\n {\n-  return __builtin_unpack_vector_int128(*p, n);\t/* { dg-error \"argument 2 must be a 1-bit unsigned literal\" } */\n+  return __builtin_unpack_vector_int128(*p, n);\t/* { dg-error \"argument 2 must be a literal between 0 and 1, inclusive\" } */\n }"}, {"sha": "7f9470ee9059d5cb2d774c82a3ed4acacc73d502", "filename": "gcc/testsuite/gcc.target/powerpc/pr91903.c", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr91903.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr91903.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr91903.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -12,62 +12,62 @@ vector signed int retsi;\n \n void test_int(vector signed int a, const int b)\n {\n-\tretf = vec_ctf(a,b); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretf = vec_ctf(a,-1); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretf = vec_ctf(a,-31); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretf = vec_ctf(a,-32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretf = vec_ctf(a,b); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretf = vec_ctf(a,-1); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretf = vec_ctf(a,-31); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretf = vec_ctf(a,-32); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n \tretf = vec_ctf(a,1);\n \tretf = vec_ctf(a,31);\n-\tretf = vec_ctf(a,32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretf = vec_ctf(a,42); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretf = vec_ctf(a,32); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretf = vec_ctf(a,42); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n }\n \n void test_uint(vector unsigned int a, const int b)\n {\n-\tretf = vec_ctf(a,b); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretf = vec_ctf(a,-1); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretf = vec_ctf(a,-31); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretf = vec_ctf(a,-32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretf = vec_ctf(a,b); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretf = vec_ctf(a,-1); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretf = vec_ctf(a,-31); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretf = vec_ctf(a,-32); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n \tretf = vec_ctf(a,1);\n \tretf = vec_ctf(a,31);\n-\tretf = vec_ctf(a,32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretf = vec_ctf(a,42); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretf = vec_ctf(a,32); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretf = vec_ctf(a,42); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n }\n \n void test_longlong(vector signed long long a, const int b,int x)\n {\n-\tretd = vec_ctf(a,b); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\"  } */\n-\tretd = vec_ctf(a,-1); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretd = vec_ctf(a,-31); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretd = vec_ctf(a,-32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretd = vec_ctf(a,b); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\"  } */\n+\tretd = vec_ctf(a,-1); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretd = vec_ctf(a,-31); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretd = vec_ctf(a,-32); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n \tretd = vec_ctf(a,1);\n \tretd = vec_ctf(a,31);\n-\tretd = vec_ctf(a,32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretd = vec_ctf(a,42); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretd = vec_ctf(a,32); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretd = vec_ctf(a,42); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n }\n \n void test_ulonglong(vector unsigned long long a, const int b,int x)\n {\n-\tretd = vec_ctf(a,b); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretd = vec_ctf(a,-1); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretd = vec_ctf(a,-31); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretd = vec_ctf(a,-32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretd = vec_ctf(a,b); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretd = vec_ctf(a,-1); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretd = vec_ctf(a,-31); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretd = vec_ctf(a,-32); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n \tretd = vec_ctf(a,1);\n \tretd = vec_ctf(a,31);\n-\tretd = vec_ctf(a,32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretd = vec_ctf(a,42); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretd = vec_ctf(a,32); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretd = vec_ctf(a,42); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n }\n \n \n void test_cts_1(vector float a, const int b)\n {\n-\tretsi = vec_cts(a,b); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretsi = vec_cts(a,-1); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretsi = vec_cts(a,-31); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretsi = vec_cts(a,-32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretsi = vec_cts(a,b); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretsi = vec_cts(a,-1); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretsi = vec_cts(a,-31); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretsi = vec_cts(a,-32); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n \tretsi = vec_cts(a,1);\n \tretsi = vec_cts(a,31);\n-\tretsi = vec_cts(a,32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n-\tretsi = vec_cts(a,42); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretsi = vec_cts(a,32); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n+\tretsi = vec_cts(a,42); /* { dg-error \"argument 2 must be a literal between 0 and 31, inclusive\" } */\n }\n "}, {"sha": "62152c677ec3310d171147b54659d76881e5a532", "filename": "gcc/testsuite/gcc.target/powerpc/test_fpscr_rn_builtin_error.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftest_fpscr_rn_builtin_error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftest_fpscr_rn_builtin_error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftest_fpscr_rn_builtin_error.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -8,11 +8,11 @@ int main ()\n      int arguments.  The builtins __builtin_set_fpscr_rn() also supports a\n      variable as an argument but can't test variable value at compile time.  */\n \n-  __builtin_mtfsb0(-1);  /* { dg-error \"argument 1 must be a 5-bit unsigned literal\" } */\n-  __builtin_mtfsb0(32);  /* { dg-error \"argument 1 must be a 5-bit unsigned literal\" } */\n+  __builtin_mtfsb0(-1);  /* { dg-error \"argument 1 must be a literal between 0 and 31, inclusive\" } */\n+  __builtin_mtfsb0(32);  /* { dg-error \"argument 1 must be a literal between 0 and 31, inclusive\" } */\n \n-  __builtin_mtfsb1(-1);  /* { dg-error \"argument 1 must be a 5-bit unsigned literal\" } */\n-  __builtin_mtfsb1(32);  /* { dg-error \"argument 1 must be a 5-bit unsigned literal\" } */ \n+  __builtin_mtfsb1(-1);  /* { dg-error \"argument 1 must be a literal between 0 and 31, inclusive\" } */\n+  __builtin_mtfsb1(32);  /* { dg-error \"argument 1 must be a literal between 0 and 31, inclusive\" } */ \n \n   __builtin_set_fpscr_rn(-1);  /* { dg-error \"argument 1 must be a variable or a literal between 0 and 3, inclusive\" } */ \n   __builtin_set_fpscr_rn(4);   /* { dg-error \"argument 1 must be a variable or a literal between 0 and 3, inclusive\" } */ "}, {"sha": "d5ec14cf4baf04c8ad0e505d7193a8154eb48a8f", "filename": "gcc/testsuite/gcc.target/powerpc/vec-ternarylogic-10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b4d225d8cd07c79eea81fb6416e8ad5a07f018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-10.c?ref=a1b4d225d8cd07c79eea81fb6416e8ad5a07f018", "patch": "@@ -28,7 +28,7 @@ doTests00000001 (vector unsigned __int128 a_sources [],\n \t  vector unsigned __int128 b = b_sources [j];\n \t  vector unsigned __int128 c = c_sources [k];\n \t  vector unsigned __int128 result;\n-\t  result = vec_ternarylogic (a, b, c, 0xfff); /* { dg-error \"8-bit unsigned literal\" } */\n+\t  result = vec_ternarylogic (a, b, c, 0xfff); /* { dg-error \"literal between 0 and 255, inclusive\" } */\n \t  vector unsigned __int128 intended = (a & b & c);\n \t  if (!vector_equal (result, intended))\n \t    abort ();\n@@ -47,7 +47,7 @@ doTests11100101 (vector unsigned __int128 a_sources [],\n \t  vector unsigned __int128 b = b_sources [j];\n \t  vector unsigned __int128 c = c_sources [k];\n \t  vector unsigned __int128 result;\n-\t  result = vec_ternarylogic (a, b, c, -1); /* { dg-error \"8-bit unsigned literal\" } */\n+\t  result = vec_ternarylogic (a, b, c, -1); /* { dg-error \"literal between 0 and 255, inclusive\" } */\n \t  vector unsigned __int128 intended = { 0 };\n \t  // Supposed to be a ? c: nand (b,c)\n \t  for (int l = 0; l < 1; l++)\n@@ -80,7 +80,7 @@ doTests11110011 (vector unsigned __int128 a_sources [],\n \t  vector unsigned __int128 b = b_sources [j];\n \t  vector unsigned __int128 c = c_sources [k];\n \t  vector unsigned __int128 result;\n-\t  result = vec_ternarylogic (a, b, c, i);  /* { dg-error \"8-bit unsigned literal\" } */\n+\t  result = vec_ternarylogic (a, b, c, i);  /* { dg-error \"literal between 0 and 255, inclusive\" } */\n \t  vector unsigned __int128 intended = { 0 };\n \t  for (int i = 0; i < 1; i++)\n \t    intended [i] = b [i] | ~(a [i] & c [i]);"}]}