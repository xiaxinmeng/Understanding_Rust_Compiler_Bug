{"sha": "446ba5266e61866204a640e27614e68c793512e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ2YmE1MjY2ZTYxODY2MjA0YTY0MGUyNzYxNGU2OGM3OTM1MTJlNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "1999-05-19T01:54:03Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-05-19T01:54:03Z"}, "message": "* i386.c (output_float_compare): Avoid GNU-C extensions.\n\nFrom-SVN: r27005", "tree": {"sha": "da83ef6ad17e0d4e37f9b6cb0d7fc39a661b094e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da83ef6ad17e0d4e37f9b6cb0d7fc39a661b094e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/446ba5266e61866204a640e27614e68c793512e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/446ba5266e61866204a640e27614e68c793512e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/446ba5266e61866204a640e27614e68c793512e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/446ba5266e61866204a640e27614e68c793512e4/comments", "author": null, "committer": null, "parents": [{"sha": "829fd7e0f5033b32e00ad99a95c797cc72b4a6ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/829fd7e0f5033b32e00ad99a95c797cc72b4a6ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/829fd7e0f5033b32e00ad99a95c797cc72b4a6ea"}], "stats": {"total": 174, "additions": 113, "deletions": 61}, "files": [{"sha": "39f4142e8c0d4320c77a2c5689b6445f9bbb8c8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/446ba5266e61866204a640e27614e68c793512e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/446ba5266e61866204a640e27614e68c793512e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=446ba5266e61866204a640e27614e68c793512e4", "patch": "@@ -1,3 +1,7 @@\n+Wed May 19 02:47:11 1999  Jan Hubicka  (hubicka@freesoft.cz)\n+\n+\t* i386.c (output_float_compare): Avoid GNU-C extensions.\n+\n Wed May 19 00:34:40 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* version.c: Bump to distinguish mainline tree from the"}, {"sha": "3efedb64baa726e2ab66f5018105fd7f654388e5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 109, "deletions": 61, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/446ba5266e61866204a640e27614e68c793512e4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/446ba5266e61866204a640e27614e68c793512e4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=446ba5266e61866204a640e27614e68c793512e4", "patch": "@@ -2995,7 +2995,8 @@ put_jump_code (code, reverse, file)\n      FILE *file;\n {\n   int flags = cc_prev_status.flags;\n-  int ieee = (TARGET_IEEE_FP && (flags & CC_IN_80387));\n+  int ieee = (TARGET_IEEE_FP && (flags & CC_IN_80387)\n+\t      && !(cc_prev_status.flags & CC_FCOMI));\n   const char *suffix;\n \n   if (flags & CC_Z_IN_NOT_C)\n@@ -3760,7 +3761,7 @@ notice_update_cc (exp)\n           if (stack_regs_mentioned_p (SET_SRC (XVECEXP (exp, 0, 0))))\n \t    {\n               cc_status.flags |= CC_IN_80387;\n-\t      if (0 && TARGET_CMOVE && stack_regs_mentioned_p\n+\t      if (TARGET_CMOVE && stack_regs_mentioned_p\n \t\t  (XEXP (SET_SRC (XVECEXP (exp, 0, 0)), 1)))\n \t\tcc_status.flags |= CC_FCOMI;\n \t    }\n@@ -4118,7 +4119,8 @@ output_float_compare (insn, operands)\n   int cc0_set = 1;\n   int i;\n \n-  if (0 && TARGET_CMOVE && STACK_REG_P (operands[1]))\n+  if (TARGET_CMOVE && STACK_REG_P (operands[1])\n+      && STACK_REG_P (operands[0]))\n     {\n       cc_status.flags |= CC_FCOMI;\n       cc_prev_status.flags &= ~CC_TEST_AX;\n@@ -4152,7 +4154,8 @@ output_float_compare (insn, operands)\n \t    {\n \t      output_asm_insn (AS2 (fucomip,%y1,%0), operands);\n \t      output_asm_insn (AS1 (fstp, %y0), operands);\n-\t      cc0_set = 0; \n+\t      if (!TARGET_IEEE_FP)\n+\t\tcc0_set = 0; \n \t    }\n \t  else\n \t    output_asm_insn (\"fucompp\", operands);\n@@ -4163,7 +4166,8 @@ output_float_compare (insn, operands)\n \t    {\n \t      output_asm_insn (AS2 (fcomip, %y1,%0), operands);\n \t      output_asm_insn (AS1 (fstp, %y0), operands);\n-\t      cc0_set = 0; \n+\t      if (!TARGET_IEEE_FP)\n+\t\tcc0_set = 0; \n \t    }\n \t  else\n \t    output_asm_insn (\"fcompp\", operands);\n@@ -4188,7 +4192,8 @@ output_float_compare (insn, operands)\n       if (cc_status.flags & CC_FCOMI)\n \t{\n \t  output_asm_insn (strcat (buf, AS2 (%z1,%y1,%0)), operands);\n-\t  cc0_set = 0; \n+\t  if (!TARGET_IEEE_FP)\n+\t    cc0_set = 0; \n \t}\n       else\n         output_asm_insn (strcat (buf, AS1 (%z1,%y1)), operands);\n@@ -4211,7 +4216,7 @@ output_float_compare (insn, operands)\n           && REGNO (operands[i]) != FIRST_STACK_REG \n           && (!stack_top_dies || REGNO (operands[i]) != FIRST_STACK_REG + 1))\n         {\n-          rtx xexp[i];\n+          rtx xexp[2];\n           xexp[0] = gen_rtx_REG (DFmode,\n \t\t\t\t REGNO (operands[i]) - (stack_top_dies != 0));\n           output_asm_insn (AS1 (fstp, %y0), xexp);\n@@ -4236,17 +4241,19 @@ output_fp_cc0_set (insn)\n   rtx next;\n   enum rtx_code code;\n \n-  xops[0] = gen_rtx_REG (HImode, 0);\n-  output_asm_insn (AS1 (fnsts%W0,%0), xops);\n+  if (!(cc_status.flags & CC_FCOMI))\n+    {\n+      xops[0] = gen_rtx_REG (HImode, 0);\n+      output_asm_insn (AS1 (fnsts%W0,%0), xops);\n+    }\n \n   if (! TARGET_IEEE_FP)\n     {\n       if (!(cc_status.flags & CC_REVERSED))\n         {\n           next = next_cc0_user (insn);\n-\n-          if (GET_CODE (next) == JUMP_INSN\n-              && GET_CODE (PATTERN (next)) == SET\n+  \n+          if (GET_CODE (PATTERN (next)) == SET\n               && SET_DEST (PATTERN (next)) == pc_rtx\n               && GET_CODE (SET_SRC (PATTERN (next))) == IF_THEN_ELSE)\n \t    code = GET_CODE (XEXP (SET_SRC (PATTERN (next)), 0));\n@@ -4271,8 +4278,7 @@ output_fp_cc0_set (insn)\n   if (next == NULL_RTX)\n     abort ();\n \n-  if (GET_CODE (next) == JUMP_INSN\n-      && GET_CODE (PATTERN (next)) == SET\n+  if (GET_CODE (PATTERN (next)) == SET\n       && SET_DEST (PATTERN (next)) == pc_rtx\n       && GET_CODE (SET_SRC (PATTERN (next))) == IF_THEN_ELSE)\n     code = GET_CODE (XEXP (SET_SRC (PATTERN (next)), 0));\n@@ -4295,61 +4301,103 @@ output_fp_cc0_set (insn)\n   else\n     abort ();\n \n-  xops[0] = gen_rtx_REG (QImode, 0);\n+  if (cc_status.flags & CC_FCOMI)\n+    {\n+      /* It is very tricky. We have to do it right. */\n \n-  switch (code)\n+      xops [0] = gen_rtx_REG (QImode, 0);\n+\n+      switch (code)\n+\t{\n+\tcase GT:\n+\tcase GE:\n+\t  break;\n+\n+\tcase LT:\n+\t  output_asm_insn (AS1 (setb,%b0), xops);\n+\t  output_asm_insn (AS1 (setp,%h0), xops);\n+\t  output_asm_insn (AS2 (cmp%B0,%b0,%h0), xops);\n+\t  break;\n+\n+\tcase LE:\n+\t  output_asm_insn (AS1 (setbe,%b0), xops);\n+\t  output_asm_insn (AS1 (setnp,%h0), xops);\n+\t  output_asm_insn (AS2 (xor%B0,%b0,%h0), xops);\n+\t  break;\n+\n+\tcase EQ:\n+\tcase NE:\n+\t  output_asm_insn (AS1 (setne,%b0), xops);\n+\t  output_asm_insn (AS1 (setp,%h0), xops);\n+\t  output_asm_insn (AS2 (or%B0,%b0,%h0), xops);\n+\t  break;\n+\n+\tcase GTU:\n+\tcase LTU:\n+\tcase GEU:\n+\tcase LEU:\n+\tdefault:\n+\t  abort ();\n+\t}\n+    }\n+  else\n     {\n-    case GT:\n-      xops[1] = GEN_INT (0x45);\n-      output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n-      /* je label */\n-      break;\n+      xops[0] = gen_rtx_REG (QImode, 0);\n \n-    case LT:\n-      xops[1] = GEN_INT (0x45);\n-      xops[2] = GEN_INT (0x01);\n-      output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n-      output_asm_insn (AS2 (cmp%B0,%2,%h0), xops);\n-      /* je label */\n-      break;\n+      switch (code)\n+\t{\n+\tcase GT:\n+\t  xops[1] = GEN_INT (0x45);\n+\t  output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n+\t  /* je label */\n+\t  break;\n \n-    case GE:\n-      xops[1] = GEN_INT (0x05);\n-      output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n-      /* je label */\n-      break;\n+\tcase LT:\n+\t  xops[1] = GEN_INT (0x45);\n+\t  xops[2] = GEN_INT (0x01);\n+\t  output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n+\t  output_asm_insn (AS2 (cmp%B0,%2,%h0), xops);\n+\t  /* je label */\n+\t  break;\n \n-    case LE:\n-      xops[1] = GEN_INT (0x45);\n-      xops[2] = GEN_INT (0x40);\n-      output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n-      output_asm_insn (AS1 (dec%B0,%h0), xops);\n-      output_asm_insn (AS2 (cmp%B0,%2,%h0), xops);\n-      /* jb label */\n-      break;\n+\tcase GE:\n+\t  xops[1] = GEN_INT (0x05);\n+\t  output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n+\t  /* je label */\n+\t  break;\n \n-    case EQ:\n-      xops[1] = GEN_INT (0x45);\n-      xops[2] = GEN_INT (0x40);\n-      output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n-      output_asm_insn (AS2 (cmp%B0,%2,%h0), xops);\n-      /* je label */\n-      break;\n+\tcase LE:\n+\t  xops[1] = GEN_INT (0x45);\n+\t  xops[2] = GEN_INT (0x40);\n+\t  output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n+\t  output_asm_insn (AS1 (dec%B0,%h0), xops);\n+\t  output_asm_insn (AS2 (cmp%B0,%2,%h0), xops);\n+\t  /* jb label */\n+\t  break;\n \n-    case NE:\n-      xops[1] = GEN_INT (0x44);\n-      xops[2] = GEN_INT (0x40);\n-      output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n-      output_asm_insn (AS2 (xor%B0,%2,%h0), xops);\n-      /* jne label */\n-      break;\n+\tcase EQ:\n+\t  xops[1] = GEN_INT (0x45);\n+\t  xops[2] = GEN_INT (0x40);\n+\t  output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n+\t  output_asm_insn (AS2 (cmp%B0,%2,%h0), xops);\n+\t  /* je label */\n+\t  break;\n \n-    case GTU:\n-    case LTU:\n-    case GEU:\n-    case LEU:\n-    default:\n-      abort ();\n+\tcase NE:\n+\t  xops[1] = GEN_INT (0x44);\n+\t  xops[2] = GEN_INT (0x40);\n+\t  output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n+\t  output_asm_insn (AS2 (xor%B0,%2,%h0), xops);\n+\t  /* jne label */\n+\t  break;\n+\n+\tcase GTU:\n+\tcase LTU:\n+\tcase GEU:\n+\tcase LEU:\n+\tdefault:\n+\t  abort ();\n+\t}\n     }\n \n   return \"\";"}]}