{"sha": "6ba701c8e99bcf81604a3bf9f69544434edd239e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJhNzAxYzhlOTliY2Y4MTYwNGEzYmY5ZjY5NTQ0NDM0ZWRkMjM5ZQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-06-27T02:50:19Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-06-27T02:50:19Z"}, "message": "builtins.c (expand_builtin_sprintf): Use c_getstr and strlen to obtain the format string instead of using...\n\n\n\t* builtins.c (expand_builtin_sprintf): Use c_getstr and strlen to\n\tobtain the format string instead of using TREE_STRING_POINTER and\n\tTREE_STRING_LENGTH.  Only optimize sprintf(dst,\"%s\",src) when the\n\treturn value is unused or the length of src is a known constant.\n\n\t* gcc.c-torture/execute/string-opt-16.c: Remove test for disabled\n\tsprintf(dst,\"%s\",src) optimization.\n\t* gcc.c-torture/execute/20030626-1.c: New test case.\n\t* gcc.c-torture/execute/20030626-2.c: New test case.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r68555", "tree": {"sha": "0c737ba12698215611e4c39ae5f14fff744af169", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c737ba12698215611e4c39ae5f14fff744af169"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ba701c8e99bcf81604a3bf9f69544434edd239e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba701c8e99bcf81604a3bf9f69544434edd239e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ba701c8e99bcf81604a3bf9f69544434edd239e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba701c8e99bcf81604a3bf9f69544434edd239e/comments", "author": null, "committer": null, "parents": [{"sha": "34cd7ff69817204455c822307f764338e7a97e48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34cd7ff69817204455c822307f764338e7a97e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34cd7ff69817204455c822307f764338e7a97e48"}], "stats": {"total": 94, "additions": 60, "deletions": 34}, "files": [{"sha": "f06e8a6ef66d1aa4864961e1e5677b3d861a6c6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba701c8e99bcf81604a3bf9f69544434edd239e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba701c8e99bcf81604a3bf9f69544434edd239e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ba701c8e99bcf81604a3bf9f69544434edd239e", "patch": "@@ -1,3 +1,11 @@\n+2003-06-26  Roger Sayle  <roger@eyesopen.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* builtins.c (expand_builtin_sprintf): Use c_getstr and strlen to\n+\tobtain the format string instead of using TREE_STRING_POINTER and\n+\tTREE_STRING_LENGTH.  Only optimize sprintf(dst,\"%s\",src) when the\n+\treturn value is unused or the length of src is a known constant.\n+\n 2003-06-26  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/ia64.h (REGISTER_NAMES): R0 is really AP."}, {"sha": "44ecbdedcf2938ac3fcd24eb59b934f3fa0b5f64", "filename": "gcc/builtins.c", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba701c8e99bcf81604a3bf9f69544434edd239e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba701c8e99bcf81604a3bf9f69544434edd239e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6ba701c8e99bcf81604a3bf9f69544434edd239e", "patch": "@@ -4492,8 +4492,8 @@ expand_builtin_cabs (tree arglist, rtx target)\n static rtx\n expand_builtin_sprintf (tree arglist, rtx target, enum machine_mode mode)\n {\n-  tree dest, fmt, stripped;\n-  tree orig_arglist;\n+  tree orig_arglist, dest, fmt;\n+  const char *fmt_str;\n \n   orig_arglist = arglist;\n \n@@ -4512,36 +4512,33 @@ expand_builtin_sprintf (tree arglist, rtx target, enum machine_mode mode)\n   arglist = TREE_CHAIN (arglist);\n \n   /* Check whether the format is a literal string constant.  */\n-  stripped = fmt;\n-  STRIP_NOPS (stripped);\n-  if (stripped && TREE_CODE (stripped) == ADDR_EXPR)\n-    stripped = TREE_OPERAND (stripped, 0);\n-  if (TREE_CODE (stripped) != STRING_CST)\n+  fmt_str = c_getstr (fmt);\n+  if (fmt_str == NULL)\n     return 0;\n \n   /* If the format doesn't contain % args or %%, use strcpy.  */\n-  if (strchr (TREE_STRING_POINTER (stripped), '%') == 0)\n+  if (strchr (fmt_str, '%') == 0)\n     {\n       tree fn = implicit_built_in_decls[BUILT_IN_STRCPY];\n       tree exp;\n \n-      if (arglist || !fn)\n+      if (arglist || ! fn)\n \treturn 0;\n       expand_expr (build_function_call_expr (fn, orig_arglist),\n \t\t   const0_rtx, VOIDmode, EXPAND_NORMAL);\n       if (target == const0_rtx)\n \treturn const0_rtx;\n-      exp = build_int_2 (TREE_STRING_LENGTH (stripped) - 1, 0);\n+      exp = build_int_2 (strlen (fmt_str), 0);\n       exp = fold (build1 (NOP_EXPR, integer_type_node, exp));\n       return expand_expr (exp, target, mode, EXPAND_NORMAL);\n     }\n-  /* If the format is \"%s\", use strcpy and possibly strlen.  */\n-  else if (strcmp (TREE_STRING_POINTER (stripped), \"%s\") == 0)\n+  /* If the format is \"%s\", use strcpy if the result isn't used.  */\n+  else if (strcmp (fmt_str, \"%s\") == 0)\n     {\n-      tree strcpy_fn, strlen_fn, exp, arg;\n-      strcpy_fn = implicit_built_in_decls[BUILT_IN_STRCPY];\n+      tree fn, arg, len;\n+      fn = implicit_built_in_decls[BUILT_IN_STRCPY];\n \n-      if (! strcpy_fn)\n+      if (! fn)\n \treturn 0;\n \n       if (! arglist || TREE_CHAIN (arglist))\n@@ -4552,25 +4549,21 @@ expand_builtin_sprintf (tree arglist, rtx target, enum machine_mode mode)\n \n       if (target != const0_rtx)\n \t{\n-\t  strlen_fn = implicit_built_in_decls[BUILT_IN_STRLEN];\n-\t  if (! strlen_fn)\n+\t  len = c_strlen (arg);\n+\t  if (! len || TREE_CODE (len) != INTEGER_CST)\n \t    return 0;\n-\t  arg = save_expr (arg);\n \t}\n       else\n-\tstrlen_fn = 0;\n+\tlen = NULL_TREE;\n \n       arglist = build_tree_list (NULL_TREE, arg);\n       arglist = tree_cons (NULL_TREE, dest, arglist);\n-      expand_expr (build_function_call_expr (strcpy_fn, arglist),\n+      expand_expr (build_function_call_expr (fn, arglist),\n \t\t   const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n       if (target == const0_rtx)\n \treturn const0_rtx;\n-\n-      exp = build_function_call_expr (strlen_fn, TREE_CHAIN (arglist));\n-      exp = fold (build1 (NOP_EXPR, integer_type_node, exp));\n-      return expand_expr (exp, target, mode, EXPAND_NORMAL);\n+      return expand_expr (len, target, mode, EXPAND_NORMAL);\n     }\n \n   return 0;"}, {"sha": "51bed0425d697591054716abaadbd2a3c46c76b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba701c8e99bcf81604a3bf9f69544434edd239e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba701c8e99bcf81604a3bf9f69544434edd239e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ba701c8e99bcf81604a3bf9f69544434edd239e", "patch": "@@ -1,3 +1,11 @@\n+2003-06-26  Roger Sayle  <roger@eyesopen.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/string-opt-16.c: Remove test for disabled\n+\tsprintf(dst,\"%s\",src) optimization.\n+\t* gcc.c-torture/execute/20030626-1.c: New test case.\n+\t* gcc.c-torture/execute/20030626-2.c: New test case.\n+\n 2003-06-26  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* gcc.c-torture/execute/multi-ix.c: New test."}, {"sha": "8b985f03530cead8aa162938036d93ba30310f3f", "filename": "gcc/testsuite/gcc.c-torture/execute/20030626-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba701c8e99bcf81604a3bf9f69544434edd239e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030626-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba701c8e99bcf81604a3bf9f69544434edd239e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030626-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030626-1.c?ref=6ba701c8e99bcf81604a3bf9f69544434edd239e", "patch": "@@ -0,0 +1,13 @@\n+char buf[10];\n+\n+extern void abort (void);\n+extern int sprintf (char*, const char*, ...);\n+\n+int main()\n+{\n+  int l = sprintf (buf, \"foo\\0bar\");\n+  if (l != 3)\n+    abort ();\n+  return 0;\n+}\n+"}, {"sha": "5483d0cba5471aae7dffd8528bdd26b493b270cc", "filename": "gcc/testsuite/gcc.c-torture/execute/20030626-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba701c8e99bcf81604a3bf9f69544434edd239e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030626-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba701c8e99bcf81604a3bf9f69544434edd239e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030626-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030626-2.c?ref=6ba701c8e99bcf81604a3bf9f69544434edd239e", "patch": "@@ -0,0 +1,14 @@\n+char buf[40];\n+\n+extern int sprintf (char*, const char*, ...);\n+extern void abort (void);\n+\n+int main()\n+{\n+  int i = 0;\n+  int l = sprintf (buf, \"%s\", i++ ? \"string\" : \"other string\");\n+  if (l != sizeof (\"other string\") - 1 || i != 1)\n+    abort ();\n+  return 0;\n+}\n+"}, {"sha": "8556b8f6517015fac07bdf51aca428fee28d19b6", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-16.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba701c8e99bcf81604a3bf9f69544434edd239e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba701c8e99bcf81604a3bf9f69544434edd239e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-16.c?ref=6ba701c8e99bcf81604a3bf9f69544434edd239e", "patch": "@@ -38,10 +38,6 @@ void test5(char *ptr)\n   sprintf(buffer,\"%s\",ptr);\n }\n \n-int test6(char *ptr)\n-{\n-  return sprintf(buffer,\"%s\",ptr);\n-}\n \n int main()\n {\n@@ -72,12 +68,6 @@ int main()\n   if (memcmp(buffer, \"barf\", 5) || buffer[5] != 'A')\n     abort ();\n \n-  memset (buffer, 'A', 32);\n-  if (test6 (\"barf\") != 4)\n-    abort ();\n-  if (memcmp(buffer, \"barf\", 5) || buffer[5] != 'A')\n-    abort ();\n-\n   return 0;\n }\n "}]}