{"sha": "476f28692a80a42632b33b7fb1f0725f81bdbce0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc2ZjI4NjkyYTgwYTQyNjMyYjMzYjdmYjFmMDcyNWY4MWJkYmNlMA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-05-26T01:29:35Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-05-26T01:29:35Z"}, "message": "cpplex.c (maybe_macroexpand): Warn about function-like macros used in non-function context, if -Wtraditional.\n\n\t* cpplex.c (maybe_macroexpand): Warn about function-like\n\tmacros used in non-function context, if -Wtraditional.\n\nFrom-SVN: r34183", "tree": {"sha": "eb55a148a58f6d659d815694823130ccba0a2fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb55a148a58f6d659d815694823130ccba0a2fc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/476f28692a80a42632b33b7fb1f0725f81bdbce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476f28692a80a42632b33b7fb1f0725f81bdbce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/476f28692a80a42632b33b7fb1f0725f81bdbce0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476f28692a80a42632b33b7fb1f0725f81bdbce0/comments", "author": null, "committer": null, "parents": [{"sha": "40aaba2b814b0495d3ef50ccb0b607484c0866e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40aaba2b814b0495d3ef50ccb0b607484c0866e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40aaba2b814b0495d3ef50ccb0b607484c0866e7"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "a0a49c71768d6ee6175686c4c7cf2fef199353bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476f28692a80a42632b33b7fb1f0725f81bdbce0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476f28692a80a42632b33b7fb1f0725f81bdbce0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=476f28692a80a42632b33b7fb1f0725f81bdbce0", "patch": "@@ -1,3 +1,8 @@\n+2000-05-25  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpplex.c (maybe_macroexpand): Warn about function-like\n+\tmacros used in non-function context, if -Wtraditional.\n+\n 2000-05-25  Mark Mitchell  <mark@codesourcery.com>\n \n \t* recog.c (peephole2_optimize): Use INSN_P."}, {"sha": "189333b4ec22c72e4862982b7f84111b7996ca2c", "filename": "gcc/cpplex.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476f28692a80a42632b33b7fb1f0725f81bdbce0/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476f28692a80a42632b33b7fb1f0725f81bdbce0/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=476f28692a80a42632b33b7fb1f0725f81bdbce0", "patch": "@@ -1687,6 +1687,12 @@ maybe_macroexpand (pfile, written)\n \tnot_macro_call:\n \t  if (macbuf_whitespace)\n \t    CPP_PUTC (pfile, ' ');\n+\n+\t  /* K+R treated this as a hard error.  */\n+\t  if (CPP_OPTION (pfile, warn_traditional))\n+\t    cpp_warning (pfile,\n+\t \"traditional C rejects function macro %s in non-function context\",\n+\t\t\t hp->name);\n \t  return 0;\n \t}\n     }"}, {"sha": "783b7bce04d79bd09333bac7cfcbf457f4a3333a", "filename": "gcc/testsuite/gcc.dg/cpp-tradwarn2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476f28692a80a42632b33b7fb1f0725f81bdbce0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-tradwarn2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476f28692a80a42632b33b7fb1f0725f81bdbce0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-tradwarn2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-tradwarn2.c?ref=476f28692a80a42632b33b7fb1f0725f81bdbce0", "patch": "@@ -0,0 +1,14 @@\n+/* K+R rejects use of function-like macros in non-function context.\n+   ANSI C explicitly permits this (the macro is not expanded).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options -Wtraditional } */\n+\n+enum { SIGN_EXTEND = 23 };\n+\n+#define SIGN_EXTEND(v) (((v) < 0) ? -1 : 0)\n+\n+int fun(void)\n+{\n+  return SIGN_EXTEND;\t/* { dg-warning \"in non-function context\" } */\n+}"}]}