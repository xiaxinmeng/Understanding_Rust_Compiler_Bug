{"sha": "96b2e170668673d417e9fabac041027614507eaa", "node_id": "C_kwDOANBUbNoAKDk2YjJlMTcwNjY4NjczZDQxN2U5ZmFiYWMwNDEwMjc2MTQ1MDdlYWE", "commit": {"author": {"name": "Ghjuvan Lacambre", "email": "lacambre@adacore.com", "date": "2022-04-19T08:01:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-30T08:29:00Z"}, "message": "[Ada] Fix new CUDA kernel registration scheme\n\nRemoval of the previous kernel registration scheme unearthed mistakes in\nthe new one, which were:\n- The new kernel registration code relied on the binder expansion phase,\n  which didn't happen because the registration code was already\n  generated by the binder.\n- The kernel handle passed to CUDA_Register_Function was the first eight\n  bytes of the code of the host-side procedure representing the kernel\n  rather than its address.\n\ngcc/ada/\n\n\t* bindgen.adb (Gen_CUDA_Init): Remove code generating CUDA\n\tdefinitions.\n\t(Gen_CUDA_Defs): New function, generating definitions\n\tinitialized by Gen_CUDA_Init.\n\t(Gen_Output_File_Ada): Call Gen_CUDA_Defs instead of\n\tGen_CUDA_Init.\n\t(Gen_Adainit): Call Gen_CUDA_Init.", "tree": {"sha": "caaa249e9c627dc6e6410f2b8250c95a94dc699f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caaa249e9c627dc6e6410f2b8250c95a94dc699f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96b2e170668673d417e9fabac041027614507eaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96b2e170668673d417e9fabac041027614507eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96b2e170668673d417e9fabac041027614507eaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96b2e170668673d417e9fabac041027614507eaa/comments", "author": {"login": "glacambre", "id": 11534587, "node_id": "MDQ6VXNlcjExNTM0NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glacambre", "html_url": "https://github.com/glacambre", "followers_url": "https://api.github.com/users/glacambre/followers", "following_url": "https://api.github.com/users/glacambre/following{/other_user}", "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}", "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions", "organizations_url": "https://api.github.com/users/glacambre/orgs", "repos_url": "https://api.github.com/users/glacambre/repos", "events_url": "https://api.github.com/users/glacambre/events{/privacy}", "received_events_url": "https://api.github.com/users/glacambre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4e04a78bbdd39021c1d643af309a24e48623796", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e04a78bbdd39021c1d643af309a24e48623796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e04a78bbdd39021c1d643af309a24e48623796"}], "stats": {"total": 110, "additions": 77, "deletions": 33}, "files": [{"sha": "c70268d4fcb8435b5f333a9eb4b99a6cd36775db", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 77, "deletions": 33, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b2e170668673d417e9fabac041027614507eaa/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b2e170668673d417e9fabac041027614507eaa/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=96b2e170668673d417e9fabac041027614507eaa", "patch": "@@ -311,8 +311,11 @@ package body Bindgen is\n    procedure Gen_CodePeer_Wrapper;\n    --  For CodePeer, generate wrapper which calls user-defined main subprogram\n \n+   procedure Gen_CUDA_Defs;\n+   --  Generate definitions needed in order to register kernels\n+\n    procedure Gen_CUDA_Init;\n-   --  When CUDA registration code is needed.\n+   --  Generate calls needed in order to register kernels\n \n    procedure Gen_Elab_Calls (Elab_Order : Unit_Id_Array);\n    --  Generate sequence of elaboration calls\n@@ -1115,6 +1118,8 @@ package body Bindgen is\n          WBI (\"\");\n       end if;\n \n+      Gen_CUDA_Init;\n+\n       Gen_Elab_Calls (Elab_Order);\n \n       if not CodePeer_Mode then\n@@ -1221,10 +1226,10 @@ package body Bindgen is\n    end Gen_Bind_Env_String;\n \n    -------------------\n-   -- Gen_CUDA_Init --\n+   -- Gen_CUDA_Defs --\n    -------------------\n \n-   procedure Gen_CUDA_Init is\n+   procedure Gen_CUDA_Defs is\n       Unit_Name : constant String :=\n         Get_Name_String (Units.Table (First_Unit_Entry).Uname);\n       Unit : constant String :=\n@@ -1237,7 +1242,7 @@ package body Bindgen is\n       WBI (\"\");\n       WBI (\"   \");\n \n-      WBI (\"   function CUDA_Register_Function\");\n+      WBI (\"   procedure CUDA_Register_Function\");\n       WBI (\"      (Fat_Binary_Handle : System.Address;\");\n       WBI (\"       Func : System.Address;\");\n       WBI (\"       Kernel_Name : Interfaces.C.Strings.chars_ptr;\");\n@@ -1247,7 +1252,7 @@ package body Bindgen is\n       WBI (\"       Nullptr2 : System.Address;\");\n       WBI (\"       Nullptr3 : System.Address;\");\n       WBI (\"       Nullptr4 : System.Address;\");\n-      WBI (\"       Nullptr5 : System.Address) return Boolean;\");\n+      WBI (\"       Nullptr5 : System.Address);\");\n       WBI (\"   pragma Import\");\n       WBI (\"     (Convention => C,\");\n       WBI (\"      Entity => CUDA_Register_Function,\");\n@@ -1261,8 +1266,8 @@ package body Bindgen is\n       WBI (\"       Entity => CUDA_Register_Fat_Binary,\");\n       WBI (\"       External_Name => \"\"__cudaRegisterFatBinary\"\");\");\n       WBI (\"\");\n-      WBI (\"   function CUDA_Register_Fat_Binary_End\");\n-      WBI (\"     (Fat_Binary : System.Address) return Boolean;\");\n+      WBI (\"   procedure CUDA_Register_Fat_Binary_End\");\n+      WBI (\"     (Fat_Binary : System.Address);\");\n       WBI (\"   pragma Import\");\n       WBI (\"     (Convention => C,\");\n       WBI (\"      Entity => CUDA_Register_Fat_Binary_End,\");\n@@ -1287,8 +1292,7 @@ package body Bindgen is\n       WBI (\"      Fat_Binary'Address,\");\n       WBI (\"      System.Null_Address);\");\n       WBI (\"\");\n-      WBI (\"   Fat_Binary_Handle : System.Address :=\");\n-      WBI (\"     CUDA_Register_Fat_Binary (Wrapper'Address);\");\n+      WBI (\"   Fat_Binary_Handle : System.Address;\");\n       WBI (\"\");\n \n       for K in CUDA_Kernels.First .. CUDA_Kernels.Last loop\n@@ -1300,9 +1304,9 @@ package body Bindgen is\n             --  K_Symbol is a unique identifier used to derive all symbol names\n             --  related to kernel K.\n \n-            Kernel_Addr : constant String := Kernel_Symbol & \"_Addr\";\n-            --  Kernel_Addr is the name of the symbol representing the address\n-            --  of the host-side procedure of the kernel. The address is\n+            Kernel_Proc : constant String := Kernel_Symbol & \"_Proc\";\n+            --  Kernel_Proc is the name of the symbol representing the\n+            --  host-side procedure of the kernel. The address is\n             --  pragma-imported and then used while registering the kernel with\n             --  the CUDA runtime.\n             Kernel_String : constant String := Kernel_Symbol & \"_String\";\n@@ -1315,40 +1319,80 @@ package body Bindgen is\n \n          begin\n             --  Import host-side kernel address.\n-            WBI (\"   \" & Kernel_Addr & \" : constant System.Address;\");\n+            WBI (\"   procedure \" & Kernel_Proc & \";\");\n             WBI (\"   pragma Import\");\n             WBI (\"      (Convention    => C,\");\n-            WBI (\"       Entity        => \" & Kernel_Addr & \",\");\n+            WBI (\"       Entity        => \" & Kernel_Proc & \",\");\n             WBI (\"       External_Name => \"\"\" & Kernel_Name & \"\"\");\");\n             WBI (\"\");\n \n             --  Generate C-string containing name of kernel.\n             WBI\n-              (\"   \" & Kernel_String & \" : Interfaces.C.Strings.Chars_Ptr :=\");\n-            WBI (\"    Interfaces.C.Strings.New_Char_Array (\"\"\"\n-                  & Kernel_Name\n-                  & \"\"\");\");\n+              (\"   \" & Kernel_String & \" : Interfaces.C.Strings.Chars_Ptr;\");\n             WBI (\"\");\n \n+         end;\n+      end loop;\n+\n+      WBI (\"\");\n+   end Gen_CUDA_Defs;\n+\n+   -------------------\n+   -- Gen_CUDA_Init --\n+   -------------------\n+\n+   procedure Gen_CUDA_Init is\n+   begin\n+      if not Enable_CUDA_Expansion then\n+         return;\n+      end if;\n+\n+      WBI (\"      Fat_Binary_Handle :=\");\n+      WBI (\"        CUDA_Register_Fat_Binary (Wrapper'Address);\");\n+\n+      for K in CUDA_Kernels.First .. CUDA_Kernels.Last loop\n+         declare\n+            K_String : constant String := CUDA_Kernel_Id'Image (K);\n+            N : constant String :=\n+              K_String (K_String'First + 1 .. K_String'Last);\n+            Kernel_Symbol : constant String := \"Kernel_\" & N;\n+            --  K_Symbol is a unique identifier used to derive all symbol names\n+            --  related to kernel K.\n+\n+            Kernel_Proc : constant String := Kernel_Symbol & \"_Proc\";\n+            --  Kernel_Proc is the name of the symbol representing the\n+            --  host-side procedure of the kernel. The address is\n+            --  pragma-imported and then used while registering the kernel with\n+            --  the CUDA runtime.\n+            Kernel_String : constant String := Kernel_Symbol & \"_String\";\n+            --  Kernel_String is the name of the C-string containing the name\n+            --  of the kernel. It is used for registering the kernel with the\n+            --  CUDA runtime.\n+            Kernel_Name : constant String :=\n+               Get_Name_String (CUDA_Kernels.Table (K).Kernel_Name);\n+            --  Kernel_Name is the name of the kernel, after package expansion.\n+         begin\n+            WBI (\"      \" & Kernel_String & \" :=\");\n+            WBI (\"        Interfaces.C.Strings.New_Char_Array (\"\"\"\n+                  & Kernel_Name\n+                  & \"\"\");\");\n             --  Generate call to CUDA runtime to register function.\n-            WBI (\"   CUDA_Register\" & N & \" : Boolean :=\");\n-            WBI (\"     CUDA_Register_Function (\");\n-            WBI (\"       Fat_Binary_Handle, \");\n-            WBI (\"       \" & Kernel_Addr & \",\");\n-            WBI (\"       \" & Kernel_String & \",\");\n-            WBI (\"       \" & Kernel_String & \",\");\n-            WBI (\"       -1,\");\n-            WBI (\"       System.Null_Address,\");\n-            WBI (\"       System.Null_Address,\");\n-            WBI (\"       System.Null_Address,\");\n-            WBI (\"       System.Null_Address,\");\n-            WBI (\"       System.Null_Address);\");\n+            WBI (\"      CUDA_Register_Function (\");\n+            WBI (\"        Fat_Binary_Handle, \");\n+            WBI (\"        \" & Kernel_Proc & \"'Address,\");\n+            WBI (\"        \" & Kernel_String & \",\");\n+            WBI (\"        \" & Kernel_String & \",\");\n+            WBI (\"        -1,\");\n+            WBI (\"        System.Null_Address,\");\n+            WBI (\"        System.Null_Address,\");\n+            WBI (\"        System.Null_Address,\");\n+            WBI (\"        System.Null_Address,\");\n+            WBI (\"        System.Null_Address);\");\n             WBI (\"\");\n          end;\n       end loop;\n \n-      WBI (\"   CUDA_End : Boolean := \");\n-      WBI (\"      CUDA_Register_Fat_Binary_End(Fat_Binary_Handle);\");\n+      WBI (\"      CUDA_Register_Fat_Binary_End (Fat_Binary_Handle);\");\n    end Gen_CUDA_Init;\n \n    --------------------------\n@@ -2619,7 +2663,7 @@ package body Bindgen is\n            Get_Main_Name & \"\"\");\");\n       end if;\n \n-      Gen_CUDA_Init;\n+      Gen_CUDA_Defs;\n \n       --  Generate version numbers for units, only if needed. Be very safe on\n       --  the condition."}]}