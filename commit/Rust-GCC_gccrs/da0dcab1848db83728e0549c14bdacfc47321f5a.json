{"sha": "da0dcab1848db83728e0549c14bdacfc47321f5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGEwZGNhYjE4NDhkYjgzNzI4ZTA1NDljMTRiZGFjZmM0NzMyMWY1YQ==", "commit": {"author": {"name": "Dominik Vogt", "email": "vogt@linux.vnet.ibm.com", "date": "2015-12-11T11:16:13Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2015-12-11T11:16:13Z"}, "message": "S/390: Fix warnings in \"*setmem_long...\" patterns.\n\ngcc/ChangeLog\n\n\t* config/s390/s390.c (s390_expand_setmem): Use new expanders.\n\t* config/s390/s390.md (\"*setmem_long\")\n\t(\"*setmem_long_and\", \"*setmem_long_31z\"): Fix warnings.\n\t(\"*setmem_long_and_31z\"): New define_insn.\n\t(\"setmem_long_<P:mode>\"): New expanders.\n\t* (<modesize>): New mode attribute\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.target/s390/md/setmem_long-1.c: New test.\n\nFrom-SVN: r231558", "tree": {"sha": "651c56efb3ae8b56ad29fbea0314ddbc37bc105f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/651c56efb3ae8b56ad29fbea0314ddbc37bc105f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da0dcab1848db83728e0549c14bdacfc47321f5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0dcab1848db83728e0549c14bdacfc47321f5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da0dcab1848db83728e0549c14bdacfc47321f5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0dcab1848db83728e0549c14bdacfc47321f5a/comments", "author": {"login": "vogtd", "id": 9690100, "node_id": "MDQ6VXNlcjk2OTAxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9690100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vogtd", "html_url": "https://github.com/vogtd", "followers_url": "https://api.github.com/users/vogtd/followers", "following_url": "https://api.github.com/users/vogtd/following{/other_user}", "gists_url": "https://api.github.com/users/vogtd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vogtd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vogtd/subscriptions", "organizations_url": "https://api.github.com/users/vogtd/orgs", "repos_url": "https://api.github.com/users/vogtd/repos", "events_url": "https://api.github.com/users/vogtd/events{/privacy}", "received_events_url": "https://api.github.com/users/vogtd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a7dec25ac919dda5b36e15e54116ba17b42e834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a7dec25ac919dda5b36e15e54116ba17b42e834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a7dec25ac919dda5b36e15e54116ba17b42e834"}], "stats": {"total": 126, "additions": 115, "deletions": 11}, "files": [{"sha": "da9e02f247d38c76cf67e68d6a75d16a7294da0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0dcab1848db83728e0549c14bdacfc47321f5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0dcab1848db83728e0549c14bdacfc47321f5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da0dcab1848db83728e0549c14bdacfc47321f5a", "patch": "@@ -1,3 +1,12 @@\n+2015-12-11  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.c (s390_expand_setmem): Use new expanders.\n+\t* config/s390/s390.md (\"*setmem_long\")\n+\t(\"*setmem_long_and\", \"*setmem_long_31z\"): Fix warnings.\n+\t(\"*setmem_long_and_31z\"): New define_insn.\n+\t(\"setmem_long_<P:mode>\"): New expanders.\n+\t* (<modesize>): New mode attribute\n+\t\n 2015-12-11  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* config/s390/s390.md (\"movstr\", \"*movstr\"): Fix warning."}, {"sha": "1695dfbac30d4a91b3d7fa10db4e964e5e041f13", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0dcab1848db83728e0549c14bdacfc47321f5a/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0dcab1848db83728e0549c14bdacfc47321f5a/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=da0dcab1848db83728e0549c14bdacfc47321f5a", "patch": "@@ -5237,7 +5237,12 @@ s390_expand_setmem (rtx dst, rtx len, rtx val)\n   else if (TARGET_MVCLE)\n     {\n       val = force_not_mem (convert_modes (Pmode, QImode, val, 1));\n-      emit_insn (gen_setmem_long (dst, convert_to_mode (Pmode, len, 1), val));\n+      if (TARGET_64BIT)\n+\temit_insn (gen_setmem_long_di (dst, convert_to_mode (Pmode, len, 1),\n+\t\t\t\t       val));\n+      else\n+\temit_insn (gen_setmem_long_si (dst, convert_to_mode (Pmode, len, 1),\n+\t\t\t\t       val));\n     }\n \n   else"}, {"sha": "a1fc96a0adc34029cfc944a9e17be3765ed7776d", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0dcab1848db83728e0549c14bdacfc47321f5a/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0dcab1848db83728e0549c14bdacfc47321f5a/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=da0dcab1848db83728e0549c14bdacfc47321f5a", "patch": "@@ -70,6 +70,9 @@\n    ; Copy CC as is into the lower 2 bits of an integer register\n    UNSPEC_CC_TO_INT\n \n+   ; The right hand side of an setmem\n+   UNSPEC_REPLICATE_BYTE\n+\n    ; GOT/PLT and lt-relative accesses\n    UNSPEC_LTREL_OFFSET\n    UNSPEC_LTREL_BASE\n@@ -727,6 +730,9 @@\n ;; In place of GET_MODE_BITSIZE (<MODE>mode)\n (define_mode_attr bitsize [(DI \"64\") (SI \"32\") (HI \"16\") (QI \"8\")])\n \n+;; In place of GET_MODE_SIZE (<MODE>mode)\n+(define_mode_attr modesize [(DI \"8\") (SI \"4\")])\n+\n ;; Allow return and simple_return to be defined from a single template.\n (define_code_iterator ANY_RETURN [return simple_return])\n \n@@ -3280,12 +3286,12 @@\n \n ; Initialize a block of arbitrary length with (operands[2] % 256).\n \n-(define_expand \"setmem_long\"\n+(define_expand \"setmem_long_<P:mode>\"\n   [(parallel\n     [(clobber (match_dup 1))\n      (set (match_operand:BLK 0 \"memory_operand\" \"\")\n-          (match_operand 2 \"shift_count_or_setmem_operand\" \"\"))\n-     (use (match_operand 1 \"general_operand\" \"\"))\n+\t  (unspec:BLK [(match_operand:P 2 \"shift_count_or_setmem_operand\" \"\")\n+\t\t      (match_dup 4)] UNSPEC_REPLICATE_BYTE))\n      (use (match_dup 3))\n      (clobber (reg:CC CC_REGNUM))])]\n   \"\"\n@@ -3306,13 +3312,17 @@\n   operands[0] = replace_equiv_address_nv (operands[0], addr0);\n   operands[1] = reg0;\n   operands[3] = reg1;\n+  operands[4] = gen_lowpart (Pmode, operands[1]);\n })\n \n+; Patterns for 31 bit + Esa and 64 bit + Zarch.\n+\n (define_insn \"*setmem_long\"\n   [(clobber (match_operand:<DBL> 0 \"register_operand\" \"=d\"))\n    (set (mem:BLK (subreg:P (match_operand:<DBL> 3 \"register_operand\" \"0\") 0))\n-        (match_operand 2 \"shift_count_or_setmem_operand\" \"Y\"))\n-   (use (match_dup 3))\n+        (unspec:BLK [(match_operand:P 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t     (subreg:P (match_dup 3) <modesize>)]\n+\t\t     UNSPEC_REPLICATE_BYTE))\n    (use (match_operand:<DBL> 1 \"register_operand\" \"d\"))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_64BIT || !TARGET_ZARCH\"\n@@ -3323,9 +3333,11 @@\n (define_insn \"*setmem_long_and\"\n   [(clobber (match_operand:<DBL> 0 \"register_operand\" \"=d\"))\n    (set (mem:BLK (subreg:P (match_operand:<DBL> 3 \"register_operand\" \"0\") 0))\n-        (and (match_operand 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t     (match_operand 4 \"const_int_operand\"             \"n\")))\n-   (use (match_dup 3))\n+        (unspec:BLK [(and:P\n+\t\t      (match_operand:P 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t      (match_operand:P 4 \"const_int_operand\"             \"n\"))\n+\t\t    (subreg:P (match_dup 3) <modesize>)]\n+\t\t    UNSPEC_REPLICATE_BYTE))\n    (use (match_operand:<DBL> 1 \"register_operand\" \"d\"))\n    (clobber (reg:CC CC_REGNUM))]\n   \"(TARGET_64BIT || !TARGET_ZARCH) &&\n@@ -3334,18 +3346,36 @@\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"vs\")])\n \n+; Variants for 31 bit + Zarch, necessary because of the odd in-register offsets\n+; of the SImode subregs.\n+\n (define_insn \"*setmem_long_31z\"\n   [(clobber (match_operand:TI 0 \"register_operand\" \"=d\"))\n    (set (mem:BLK (subreg:SI (match_operand:TI 3 \"register_operand\" \"0\") 4))\n-        (match_operand 2 \"shift_count_or_setmem_operand\" \"Y\"))\n-   (use (match_dup 3))\n+        (unspec:BLK [(match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t     (subreg:SI (match_dup 3) 12)] UNSPEC_REPLICATE_BYTE))\n    (use (match_operand:TI 1 \"register_operand\" \"d\"))\n    (clobber (reg:CC CC_REGNUM))]\n   \"!TARGET_64BIT && TARGET_ZARCH\"\n   \"mvcle\\t%0,%1,%Y2\\;jo\\t.-4\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"vs\")])\n \n+(define_insn \"*setmem_long_and_31z\"\n+  [(clobber (match_operand:TI 0 \"register_operand\" \"=d\"))\n+   (set (mem:BLK (subreg:SI (match_operand:TI 3 \"register_operand\" \"0\") 4))\n+        (unspec:BLK [(and:SI\n+\t\t      (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t      (match_operand:SI 4 \"const_int_operand\"             \"n\"))\n+\t\t    (subreg:SI (match_dup 3) 12)] UNSPEC_REPLICATE_BYTE))\n+   (use (match_operand:TI 1 \"register_operand\" \"d\"))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"(!TARGET_64BIT && TARGET_ZARCH) &&\n+   (INTVAL (operands[4]) & 255) == 255\"\n+  \"mvcle\\t%0,%1,%Y2\\;jo\\t.-4\"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"vs\")])\n+\n ;\n ; cmpmemM instruction pattern(s).\n ;"}, {"sha": "283da3bbf2d9e017eca4a0bf469fcc487f6f8656", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0dcab1848db83728e0549c14bdacfc47321f5a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0dcab1848db83728e0549c14bdacfc47321f5a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da0dcab1848db83728e0549c14bdacfc47321f5a", "patch": "@@ -1,3 +1,7 @@\n+2015-12-11  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/md/setmem_long-1.c: New test.\n+\n 2015-12-11  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/md/movstr-1.c: New test."}, {"sha": "933a6985aa8b9f0591f98bee61ad39e1b585bbd9", "filename": "gcc/testsuite/gcc.target/s390/md/setmem_long-1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0dcab1848db83728e0549c14bdacfc47321f5a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fsetmem_long-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0dcab1848db83728e0549c14bdacfc47321f5a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fsetmem_long-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fsetmem_long-1.c?ref=da0dcab1848db83728e0549c14bdacfc47321f5a", "patch": "@@ -0,0 +1,56 @@\n+/* Machine description pattern tests.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-mmvcle -dP -save-temps\" } */\n+\n+__attribute__ ((noinline))\n+void test(char *p, char c, int len)\n+{\n+  __builtin_memset(p, c, len);\n+}\n+\n+__attribute__ ((noinline))\n+void test2(char *p, int c, int len)\n+{\n+  __builtin_memset(p, (char)c, len);\n+}\n+\n+/* Check that the right patterns are used.  */\n+/* { dg-final { scan-assembler-times {c:9 .*{[*]setmem_long_?3?1?z?}} 1 } } */\n+/* { dg-final { scan-assembler-times {c:15 .*{[*]setmem_long_and_?3?1?z?}} 1 { xfail *-*-* } } } */\n+\n+#define LEN 500\n+char buf[LEN + 2];\n+\n+void init_buf(void)\n+{\n+  int i;\n+\n+  buf[0] = 0;\n+  for (i = 1; i <= LEN; i++)\n+    buf[i] = (0x10 + (i & 0x3f));\n+  buf[LEN + 1] = 0x7f;\n+}\n+\n+void validate_buf(char val)\n+{\n+  int i;\n+\n+  if (buf[0] != 0)\n+    __builtin_abort();\n+  for (i = 1; i <= LEN; i++)\n+    if (buf[i] != val)\n+      __builtin_abort();\n+  if (buf[LEN + 1] != 0x7f)\n+    __builtin_abort();\n+}\n+\n+int main(void)\n+{\n+  init_buf();\n+  test(buf + 1, 55, LEN);\n+  validate_buf(55);\n+  init_buf();\n+  test(buf + 1, 66, LEN);\n+  validate_buf(66);\n+}"}]}