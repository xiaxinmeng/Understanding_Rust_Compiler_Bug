{"sha": "b14707c32c79de908de45735e2c5f17e89776563", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE0NzA3YzMyYzc5ZGU5MDhkZTQ1NzM1ZTJjNWYxN2U4OTc3NjU2Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-03T04:50:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-03T04:50:53Z"}, "message": "attribs.c (handle_alias_attribute): Don't call assemble_alias.\n\n        * attribs.c (handle_alias_attribute): Don't call assemble_alias.\n        (handle_visibility_attribute): Don't call assemble_visibility.\n        * toplev.c (rest_of_decl_compilation): Invoke make_decl_rtl even\n        without asmspec.  Invoke assemble_alias when needed.\n        * varasm.c (maybe_assemble_visibility): New.\n        (assemble_start_function, assemble_variable, assemble_alias): Use it.\n\nFrom-SVN: r50237", "tree": {"sha": "bbda082e91221cd2570817b8af1eb6de817d8392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbda082e91221cd2570817b8af1eb6de817d8392"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b14707c32c79de908de45735e2c5f17e89776563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b14707c32c79de908de45735e2c5f17e89776563", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b14707c32c79de908de45735e2c5f17e89776563", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b14707c32c79de908de45735e2c5f17e89776563/comments", "author": null, "committer": null, "parents": [{"sha": "b20032503b0ecc63b4ce05e65fda684b47afef3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20032503b0ecc63b4ce05e65fda684b47afef3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b20032503b0ecc63b4ce05e65fda684b47afef3b"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "410c2cf4e8b614253e7b8b8104822745d8a05da7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14707c32c79de908de45735e2c5f17e89776563/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14707c32c79de908de45735e2c5f17e89776563/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b14707c32c79de908de45735e2c5f17e89776563", "patch": "@@ -1,3 +1,12 @@\n+2002-03-02  Richard Henderson  <rth@redhat.com>\n+\n+\t* attribs.c (handle_alias_attribute): Don't call assemble_alias.\n+\t(handle_visibility_attribute): Don't call assemble_visibility.\n+\t* toplev.c (rest_of_decl_compilation): Invoke make_decl_rtl even\n+\twithout asmspec.  Invoke assemble_alias when needed.\n+\t* varasm.c (maybe_assemble_visibility): New.\n+\t(assemble_start_function, assemble_variable, assemble_alias): Use it.\n+\n 2002-03-02  Richard Henderson  <rth@redhat.com>\n \n \t* varasm.c (make_decl_rtl): Remove call to REDO_SECTION_INFO_P;"}, {"sha": "ca5a10c3dc26538f0582da0b2fd38340c8b00aaa", "filename": "gcc/attribs.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14707c32c79de908de45735e2c5f17e89776563/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14707c32c79de908de45735e2c5f17e89776563/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=b14707c32c79de908de45735e2c5f17e89776563", "patch": "@@ -1054,7 +1054,6 @@ handle_alias_attribute (node, name, args, flags, no_add_attrs)\n \tDECL_INITIAL (decl) = error_mark_node;\n       else\n \tDECL_EXTERNAL (decl) = 0;\n-      assemble_alias (decl, id);\n     }\n   else\n     {\n@@ -1102,8 +1101,6 @@ handle_visibility_attribute (node, name, args, flags, no_add_attrs)\n \t  *no_add_attrs = true;\n \t  return NULL_TREE;\n \t}\n-\n-      assemble_visibility (decl, TREE_STRING_POINTER (id));\n     }\n \n   return NULL_TREE;"}, {"sha": "1767fb405597e140602efddd3e74bc61ba835270", "filename": "gcc/toplev.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14707c32c79de908de45735e2c5f17e89776563/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14707c32c79de908de45735e2c5f17e89776563/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b14707c32c79de908de45735e2c5f17e89776563", "patch": "@@ -2254,24 +2254,41 @@ rest_of_decl_compilation (decl, asmspec, top_level, at_end)\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP, END)\n #endif\n \n+  /* We deferred calling assemble_alias so that we could collect\n+     other attributes such as visibility.  Emit the alias now.  */\n+  {\n+    tree alias;\n+    alias = lookup_attribute (\"alias\", DECL_ATTRIBUTES (decl));\n+    if (alias)\n+      {\n+\talias = TREE_VALUE (TREE_VALUE (alias));\n+\talias = get_identifier (TREE_STRING_POINTER (alias));\n+        assemble_alias (decl, alias);\n+      }\n+  }\n+\n   /* Forward declarations for nested functions are not \"external\",\n      but we need to treat them as if they were.  */\n   if (TREE_STATIC (decl) || DECL_EXTERNAL (decl)\n       || TREE_CODE (decl) == FUNCTION_DECL)\n     {\n       timevar_push (TV_VARCONST);\n-      if (asmspec)\n-\tmake_decl_rtl (decl, asmspec);\n-      /* Don't output anything\n-\t when a tentative file-scope definition is seen.\n-\t But at end of compilation, do output code for them.  */\n+\n+      /* If asmspec non-zero, we may be creating a global register variable.\n+\t If asmspec zero, we may be making sure that ENCODE_SECTION_INFO is\n+\t up-to-date.  */\n+      make_decl_rtl (decl, asmspec);\n+\n+      /* Don't output anything when a tentative file-scope definition\n+\t is seen.  But at end of compilation, do output code for them.  */\n       if (at_end || !DECL_DEFER_OUTPUT (decl))\n \tassemble_variable (decl, top_level, at_end, 0);\n       if (decl == last_assemble_variable_decl)\n \t{\n \t  ASM_FINISH_DECLARE_OBJECT (asm_out_file, decl,\n \t\t\t\t     top_level, at_end);\n \t}\n+\n       timevar_pop (TV_VARCONST);\n     }\n   else if (DECL_REGISTER (decl) && asmspec != 0)"}, {"sha": "187429eb5120cc1d92ce0a1d024e098d25fb0e6f", "filename": "gcc/varasm.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14707c32c79de908de45735e2c5f17e89776563/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14707c32c79de908de45735e2c5f17e89776563/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=b14707c32c79de908de45735e2c5f17e89776563", "patch": "@@ -171,6 +171,7 @@ static void mark_weak_decls\t\tPARAMS ((void *));\n #if defined (ASM_WEAKEN_LABEL) || defined (ASM_WEAKEN_DECL)\n static void remove_from_pending_weak_list\tPARAMS ((const char *));\n #endif\n+static void maybe_assemble_visibility\tPARAMS ((tree));\n static int in_named_entry_eq\t\tPARAMS ((const PTR, const PTR));\n static hashval_t in_named_entry_hash\tPARAMS ((const PTR));\n #ifdef ASM_OUTPUT_BSS\n@@ -1252,6 +1253,8 @@ assemble_start_function (decl, fnname)\n       else\n #endif\n       ASM_GLOBALIZE_LABEL (asm_out_file, fnname);\n+\n+      maybe_assemble_visibility (decl);\n     }\n \n   /* Do any machine/system dependent processing of the function name */\n@@ -1603,6 +1606,9 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n   DECL_ALIGN (decl) = align;\n   set_mem_align (decl_rtl, align);\n \n+  if (TREE_PUBLIC (decl))\n+    maybe_assemble_visibility (decl);\n+\n   /* Handle uninitialized definitions.  */\n \n   if ((DECL_INITIAL (decl) == 0 || DECL_INITIAL (decl) == error_mark_node\n@@ -5181,6 +5187,8 @@ assemble_alias (decl, target)\n       else\n #endif\n \tASM_GLOBALIZE_LABEL (asm_out_file, name);\n+\n+      maybe_assemble_visibility (decl);\n     }\n \n #ifdef ASM_OUTPUT_DEF_FROM_DECLS\n@@ -5225,6 +5233,21 @@ assemble_visibility (decl, visibility_type)\n #endif\n }\n \n+/* A helper function to call assemble_visibility when needed for a decl.  */\n+\n+static void\n+maybe_assemble_visibility (decl)\n+     tree decl;\n+{\n+  tree visibility = lookup_attribute (\"visibility\", DECL_ATTRIBUTES (decl));\n+  if (visibility)\n+    {\n+      const char *type\n+\t= TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (visibility)));\n+      assemble_visibility (decl, type);\n+    }\n+}\n+\n /* Returns 1 if the target configuration supports defining public symbols\n    so that one of them will be chosen at link time instead of generating a\n    multiply-defined symbol error, whether through the use of weak symbols or"}]}