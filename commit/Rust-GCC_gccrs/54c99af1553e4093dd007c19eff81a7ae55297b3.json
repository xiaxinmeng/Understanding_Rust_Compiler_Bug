{"sha": "54c99af1553e4093dd007c19eff81a7ae55297b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRjOTlhZjE1NTNlNDA5M2RkMDA3YzE5ZWZmODFhN2FlNTUyOTdiMw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-20T11:14:35Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-20T11:14:35Z"}, "message": "2003-03-20  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/FileChannelImpl.java\n\t(address): Removed.\n\t(map_address): New member variable.\n\t(length): Make it package private.\n\t(fd): Make it package private.\n\t(buf): Make it package private.\n\t(file_obj): Make it package private.\n\t(FileChannelImpl): New constructor.\n\t(nio_mmap_file): Use RawData instead of long.\n\t(nio_munmap_file): Use RawData instead of long.\n\t(nio_msync): Use RawData instead of long.\n\t(implCloseChannel): New implementation using map_address.\n\t(read): Reformated.\n\t(map): Implemented.\n\t(create_direct_mapped_buffer): Implemented, use RawData, throws\n\tIOException.\n\t(force): Use map_address instead of address.\n\t* gnu/java/nio/MappedByteFileBuffer.java\n\t(address): Removed.\n\t(map_address): New member variable.\n\t(MappedByteFileBuffer): Use map_address instead of address, reformated.\n\t(several methods): Use map_address instead of address, replaced long\n\twith RawData where appropriate.\n\t* gnu/java/nio/natFileChannelImpl.cc\n\t(nio_mmap_file): Replaced long with RawData.\n\t(nio_munmap_file): Replaced long with RawData.\n\t(nio_msync): Replaced long with RawData.\n\t* gnu/java/nio/natMappedByteFileBuffer.cc\n\t(several methods): Replaced long with RawData where appropriate.\n\nFrom-SVN: r64612", "tree": {"sha": "9fe3a88d762e1d449fc098bc9f0bf3f4d473b82f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fe3a88d762e1d449fc098bc9f0bf3f4d473b82f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54c99af1553e4093dd007c19eff81a7ae55297b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c99af1553e4093dd007c19eff81a7ae55297b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54c99af1553e4093dd007c19eff81a7ae55297b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c99af1553e4093dd007c19eff81a7ae55297b3/comments", "author": null, "committer": null, "parents": [{"sha": "111a007d968c210312c47e990086588a6c3e6599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/111a007d968c210312c47e990086588a6c3e6599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/111a007d968c210312c47e990086588a6c3e6599"}], "stats": {"total": 278, "additions": 170, "deletions": 108}, "files": [{"sha": "acc634719e97d84b3570df45314db8cb722dd559", "filename": "libjava/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c99af1553e4093dd007c19eff81a7ae55297b3/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c99af1553e4093dd007c19eff81a7ae55297b3/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=54c99af1553e4093dd007c19eff81a7ae55297b3", "patch": "@@ -1,3 +1,35 @@\n+2003-03-20  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/FileChannelImpl.java\n+\t(address): Removed.\n+\t(map_address): New member variable.\n+\t(length): Make it package private.\n+\t(fd): Make it package private.\n+\t(buf): Make it package private.\n+\t(file_obj): Make it package private.\n+\t(FileChannelImpl): New constructor.\n+\t(nio_mmap_file): Use RawData instead of long.\n+\t(nio_munmap_file): Use RawData instead of long.\n+\t(nio_msync): Use RawData instead of long.\n+\t(implCloseChannel): New implementation using map_address.\n+\t(read): Reformated.\n+\t(map): Implemented.\n+\t(create_direct_mapped_buffer): Implemented, use RawData, throws\n+\tIOException.\n+\t(force): Use map_address instead of address.\n+\t* gnu/java/nio/MappedByteFileBuffer.java\n+\t(address): Removed.\n+\t(map_address): New member variable.\n+\t(MappedByteFileBuffer): Use map_address instead of address, reformated.\n+\t(several methods): Use map_address instead of address, replaced long\n+\twith RawData where appropriate.\n+\t* gnu/java/nio/natFileChannelImpl.cc\n+\t(nio_mmap_file): Replaced long with RawData.\n+\t(nio_munmap_file): Replaced long with RawData.\n+\t(nio_msync): Replaced long with RawData.\n+\t* gnu/java/nio/natMappedByteFileBuffer.cc\n+\t(several methods): Replaced long with RawData where appropriate.\n+\n 2003-03-20  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/InetAddress.java,"}, {"sha": "c233d8210a7239791e54b3955ce31530eca91a11", "filename": "libjava/gnu/java/nio/FileChannelImpl.java", "status": "modified", "additions": 38, "deletions": 32, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c99af1553e4093dd007c19eff81a7ae55297b3/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c99af1553e4093dd007c19eff81a7ae55297b3/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java?ref=54c99af1553e4093dd007c19eff81a7ae55297b3", "patch": "@@ -52,6 +52,7 @@\n import java.nio.channels.NonWritableChannelException;\n import java.nio.channels.ReadableByteChannel;\n import java.nio.channels.WritableByteChannel;\n+import gnu.gcj.RawData;\n \n /**\n  * This file is not user visible !\n@@ -63,11 +64,14 @@\n \n public class FileChannelImpl extends FileChannel\n {\n-  public long address;\n-  public int length;\n-  public FileDescriptor fd;\n-  public MappedByteBuffer buf;\n-  public Object file_obj; // just to keep it live...\n+  // GCJ LOCAL: This variable stores a pointer to the memory\n+  // where the file is mapped.\n+  RawData map_address;\n+  \n+  int length;\n+  FileDescriptor fd;\n+  MappedByteBuffer buf;\n+  Object file_obj; // just to keep it live...\n \n   public FileChannelImpl (FileDescriptor fd, boolean write, Object obj)\n   {\n@@ -80,24 +84,27 @@ public FileChannelImpl (FileDescriptor fd, boolean write, Object obj)\n     this.file_obj = obj;\n   }\n \n+  public FileChannelImpl ()\n+  {\n+    this (new FileDescriptor (-1), true, null);\n+  }\n+\n   private native long implPosition ();\n   private native FileChannel implPosition (long newPosition);\n   private native FileChannel implTruncate (long size);\n   \n-  private native long nio_mmap_file (long pos, long size, int mode);\n-  private native void nio_unmmap_file (long address, int size);\n-  private native void nio_msync (long address, int length);\n+  private native RawData nio_mmap_file (long pos, long size, int mode);\n+  private native void nio_unmmap_file (RawData map_address, int size);\n+  private native void nio_msync (RawData map_address, int length);\n \n   public native long size () throws IOException;\n     \n   protected void implCloseChannel() throws IOException\n   {\n-    // FIXME\n-    \n-    if (address != 0)\n+    if (map_address != null)\n       {\n-        //nio_unmmap_file (fd, address, (int) length);\n-        address = 0;\n+        nio_unmmap_file (map_address, (int) length);\n+        map_address = null;\n       }\n \n     if (file_obj instanceof RandomAccessFile)\n@@ -126,9 +133,9 @@ public int read (ByteBuffer dst) throws IOException\n         throw new EOFException(\"file not mapped\");\n       }\n \n-    for (int i=0; i<s; i++)\n+    for (int i = 0; i < s; i++)\n       {\n-        dst.put( buf.get() );\n+        dst.put (buf.get());\n       }\n \n     return s;\n@@ -154,9 +161,9 @@ public long read (ByteBuffer[] dsts, int offset, int length)\n     long result = 0;\n \n     for (int i = offset; i < offset + length; i++)\n-\t    {\n-        result += write (dsts[i]);\n-\t    }\n+      {\n+        result += write (dsts [i]);\n+      }\n \n     return result;\n   }\n@@ -218,23 +225,22 @@ public MappedByteBuffer map (FileChannel.MapMode mode, long position,\n         || size > Integer.MAX_VALUE)\n       throw new IllegalArgumentException ();\n     \n-//     int cmode = mode.m;\n-//     address = nio_mmap_file (fd, position, size, cmode);\n-//     length = size;\n-//     buf = new MappedByteFileBuffer (this);\n-//     return buf;\n-    return null;\n+    int cmode = mode.m;\n+    map_address = nio_mmap_file (position, size, cmode);\n+    length = (int) size;\n+    buf = new MappedByteFileBuffer (this);\n+    return buf;\n   }\n \n-  static MappedByteBuffer create_direct_mapped_buffer (long address,\n+  static MappedByteBuffer create_direct_mapped_buffer (RawData map_address,\n                                                        long length)\n+    throws IOException\n   {\n-//     FileChannelImpl ch = new FileChannelImpl (-1, null);\n-//     ch.address = address;\n-//     ch.length = (int) length;\n-//     ch.buf = new MappedByteFileBuffer (ch);\n-//     return ch.buf;\t\t\t \n-    return null;\n+    FileChannelImpl ch = new FileChannelImpl ();\n+    ch.map_address = map_address;\n+    ch.length = (int) length;\n+    ch.buf = new MappedByteFileBuffer (ch);\n+    return ch.buf;\t\t\t \n   }\n \n   public long write (ByteBuffer[] srcs)\n@@ -253,7 +259,7 @@ public void force (boolean metaData) throws IOException\n \n     // FIXME: What to do with metaData ?\n     \n-    nio_msync (address, length);\n+    nio_msync (map_address, length);\n   }\n \n   public long transferTo (long position, long count, WritableByteChannel target)"}, {"sha": "ec6c83c5d708013810624e616803892d167eea27", "filename": "libjava/gnu/java/nio/MappedByteFileBuffer.java", "status": "modified", "additions": 73, "deletions": 58, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c99af1553e4093dd007c19eff81a7ae55297b3/libjava%2Fgnu%2Fjava%2Fnio%2FMappedByteFileBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c99af1553e4093dd007c19eff81a7ae55297b3/libjava%2Fgnu%2Fjava%2Fnio%2FMappedByteFileBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FMappedByteFileBuffer.java?ref=54c99af1553e4093dd007c19eff81a7ae55297b3", "patch": "@@ -46,11 +46,12 @@\n import java.nio.ShortBuffer;\n import java.nio.MappedByteBuffer;\n import java.io.IOException;\n+import gnu.gcj.RawData;\n \n final public class MappedByteFileBuffer\n   extends MappedByteBuffer\n {\n-  public long address;\n+  RawData map_address;\n   boolean readOnly;\n   boolean direct;\n   public FileChannelImpl ch;\n@@ -60,13 +61,17 @@ public MappedByteFileBuffer (FileChannelImpl ch) throws IOException\n     super ((int) ch.size (), (int) ch.size (), 0, -1);\n     \n     this.ch = ch;\n-    address = ch.address;\n-    try {\n-      long si = ch.size() / 1;\n-      limit((int)si);\n-    } catch (IOException e) {\n-      System.err.println(\"failed to get size of file-channel's file\");\n-    }\n+    map_address = ch.map_address;\n+    \n+    try\n+      {\n+        long si = ch.size () / 1;\n+        limit ((int) si);\n+      }\n+    catch (IOException e)\n+      {\n+        System.err.println (\"failed to get size of file-channel's file\");\n+      }\n   }\n   \n   public MappedByteFileBuffer (MappedByteFileBuffer b)\n@@ -76,7 +81,7 @@ public MappedByteFileBuffer (MappedByteFileBuffer b)\n     \n     this.readOnly = b.isReadOnly ();\n     this.ch = b.ch;\n-    address = b.address;\n+    map_address = b.map_address;\n     limit (b.limit ());\n   }\n \n@@ -87,65 +92,67 @@ public boolean isReadOnly ()\n   \n   public static native byte nio_read_Byte_file_channel (FileChannelImpl ch,\n                                                         int index, int limit,\n-                                                        long address);\n+                                                        RawData map_address);\n   public static native void nio_write_Byte_file_channel (FileChannelImpl ch,\n                                                          int index, int limit,\n                                                          byte value,\n-                                                         long address);\n+                                                         RawData map_address);\n   public static native short nio_read_Short_file_channel (FileChannelImpl ch,\n                                                           int index, int limit,\n-                                                          long address);\n+                                                          RawData map_address);\n   public static native void nio_write_Short_file_channel (FileChannelImpl ch,\n                                                           int index, int limit,\n                                                           short value,\n-                                                          long address);\n+                                                          RawData map_address);\n   public static native char nio_read_Char_file_channel (FileChannelImpl ch,\n                                                         int index, int limit,\n-                                                        long address);\n+                                                        RawData map_address);\n   public static native void nio_write_Char_file_channel (FileChannelImpl ch,\n                                                          int index, int limit,\n                                                          char value,\n-                                                         long address);\n+                                                         RawData map_address);\n   public static native int nio_read_Int_file_channel (FileChannelImpl ch,\n                                                       int index, int limit,\n-                                                      long address);\n+                                                      RawData map_address);\n   public static native void nio_write_Int_file_channel (FileChannelImpl ch,\n                                                         int index, int limit,\n-                                                        int value, long address);\n+                                                        int value,\n+                                                        RawData map_address);\n   public static native long nio_read_Long_file_channel (FileChannelImpl ch,\n                                                         int index, int limit,\n-                                                        long address);\n+                                                        RawData map_address);\n   public static native void nio_write_Long_file_channel (FileChannelImpl ch,\n                                                          int index, int limit,\n                                                          long value,\n-                                                         long address);\n+                                                         RawData map_address);\n   public static native float nio_read_Float_file_channel (FileChannelImpl ch,\n                                                           int index, int limit,\n-                                                          long address);\n+                                                          RawData map_address);\n   public static native void nio_write_Float_file_channel (FileChannelImpl ch,\n                                                           int index, int limit,\n                                                           float value,\n-                                                          long address);\n-  public static native double nio_read_Double_file_channel (FileChannelImpl ch,\n-                                                            int index, int limit,\n-                                                            long address);\n+                                                          RawData map_address);\n+  public static native double\n+    nio_read_Double_file_channel (FileChannelImpl ch, int index, int limit,\n+                                  RawData map_address);\n   public static native void nio_write_Double_file_channel (FileChannelImpl ch,\n                                                            int index, int limit,\n                                                            double value,\n-                                                           long address);\n+                                                           RawData map_address);\n \n   final public byte get ()\n   {\n     byte a = MappedByteFileBuffer.nio_read_Byte_file_channel (ch, position (),\n-                                                              limit (), address);\n+                                                              limit (),\n+                                                              map_address);\n     position (position () + 1);\n     return a;\n   }\n \n   final public ByteBuffer put (byte b)\n   {\n     MappedByteFileBuffer.nio_write_Byte_file_channel (ch, position (), limit (),\n-                                                      b, address);\n+                                                      b, map_address);\n     position (position () + 1);\n     return this;\n   }\n@@ -154,14 +161,14 @@ final public byte get (int index)\n   {\n     byte a = MappedByteFileBuffer.nio_read_Byte_file_channel (ch, index,\n                                                               limit (),\n-                                                              address);\n+                                                              map_address);\n     return a;\n   }\n \n   final public ByteBuffer put (int index, byte b)\n   {\n     MappedByteFileBuffer.nio_write_Byte_file_channel (ch, index, limit (), b,\n-                                                      address);\n+                                                      map_address);\n     return this;\n   }\n \n@@ -203,27 +210,28 @@ final public ByteBuffer asByteBuffer ()\n   \n   final public byte getByte ()\n   {\n-    byte a = nio_read_Byte_file_channel (ch, position (), limit (), address);\n+    byte a = nio_read_Byte_file_channel (ch, position (), limit (),\n+                                         map_address);\n     position (position () + 1);\n     return a;\n   }\n   \n   final public ByteBuffer putByte (byte value)\n   {\n-    nio_write_Byte_file_channel (ch, position (), limit (), value, address);\n+    nio_write_Byte_file_channel (ch, position (), limit (), value, map_address);\n     position (position () + 1);\n     return this;\n   }\n   \n   final public byte getByte (int index)\n   {\n-    byte a = nio_read_Byte_file_channel (ch, index, limit(), address);\n+    byte a = nio_read_Byte_file_channel (ch, index, limit(), map_address);\n     return a;\n   }\n   \n   final public ByteBuffer putByte (int index, byte value)\n   {\n-    nio_write_Byte_file_channel (ch, index, limit (), value, address);\n+    nio_write_Byte_file_channel (ch, index, limit (), value, map_address);\n     return this;\n   };\n   \n@@ -237,27 +245,28 @@ final public CharBuffer asCharBuffer ()\n \n   final public char getChar ()\n   {\n-    char a = nio_read_Char_file_channel (ch, position (), limit (), address);\n+    char a = nio_read_Char_file_channel (ch, position (), limit (),\n+                                         map_address);\n     position (position () + 1);\n     return a;\n   }\n   \n   final public ByteBuffer putChar (char value)\n   {\n-    nio_write_Char_file_channel (ch, position (), limit (), value, address);\n+    nio_write_Char_file_channel (ch, position (), limit (), value, map_address);\n     position (position () + 1);\n     return this;\n   }\n   \n   final public char getChar (int index)\n   {\n-    char a = nio_read_Char_file_channel (ch, index, limit (), address);\n+    char a = nio_read_Char_file_channel (ch, index, limit (), map_address);\n     return a;\n   }\n   \n   final public ByteBuffer putChar (int index, char value)\n   {\n-    nio_write_Char_file_channel (ch, index, limit (), value, address);\n+    nio_write_Char_file_channel (ch, index, limit (), value, map_address);\n     return this;\n   };\n \n@@ -271,27 +280,29 @@ final public ShortBuffer asShortBuffer ()\n   \n   final public short getShort ()\n   {\n-    short a = nio_read_Short_file_channel (ch, position (), limit (), address);\n+    short a = nio_read_Short_file_channel (ch, position (), limit (),\n+                                           map_address);\n     position (position () + 1);\n     return a;\n   }\n   \n   final public ByteBuffer putShort (short value)\n   {\n-    nio_write_Short_file_channel (ch, position (), limit (), value, address);\n+    nio_write_Short_file_channel (ch, position (), limit (), value,\n+                                  map_address);\n     position (position () + 1);\n     return this;\n   }\n   \n   final public short getShort (int index)\n   {\n-    short a = nio_read_Short_file_channel (ch, index, limit (), address);\n+    short a = nio_read_Short_file_channel (ch, index, limit (), map_address);\n     return a;\n   }\n   \n   final public ByteBuffer putShort (int index, short value)\n   {\n-    nio_write_Short_file_channel (ch, index, limit (), value, address);\n+    nio_write_Short_file_channel (ch, index, limit (), value, map_address);\n     return this;\n   }\n \n@@ -305,28 +316,27 @@ final public IntBuffer asIntBuffer ()\n   \n   final public int getInt ()\n   {\n-    int a = nio_read_Int_file_channel (ch, position (), limit (), address);\n+    int a = nio_read_Int_file_channel (ch, position (), limit (), map_address);\n     position (position () + 1);\n     return a;\n   }\n   \n   final public ByteBuffer putInt (int value)\n   {\n-    nio_write_Int_file_channel (ch, position (), limit (), value, address);\n+    nio_write_Int_file_channel (ch, position (), limit (), value, map_address);\n     position (position () + 1);\n     return this;\n   }\n   \n   final public int getInt (int index)\n   {\n-    int a = nio_read_Int_file_channel (ch, index, limit (),\n-                                                            address);\n+    int a = nio_read_Int_file_channel (ch, index, limit (), map_address);\n     return a;\n   }\n   \n   final public ByteBuffer putInt (int index, int value)\n   {\n-    nio_write_Int_file_channel (ch, index, limit (), value, address);\n+    nio_write_Int_file_channel (ch, index, limit (), value, map_address);\n     return this;\n   }\n \n@@ -340,27 +350,28 @@ final public LongBuffer asLongBuffer ()\n   \n   final public long getLong ()\n   {\n-    long a = nio_read_Long_file_channel (ch, position (), limit (), address);\n+    long a = nio_read_Long_file_channel (ch, position (), limit (),\n+                                         map_address);\n     position (position () + 1);\n     return a;\n   }\n   \n   final public ByteBuffer putLong (long value)\n   {\n-    nio_write_Long_file_channel (ch, position (), limit (), value, address);\n+    nio_write_Long_file_channel (ch, position (), limit (), value, map_address);\n     position (position () + 1);\n     return this;\n   }\n   \n   final public long getLong (int index)\n   {\n-    long a = nio_read_Long_file_channel (ch, index, limit (), address);\n+    long a = nio_read_Long_file_channel (ch, index, limit (), map_address);\n     return a;\n   }\n   \n   final public ByteBuffer putLong (int index, long value)\n   {\n-    nio_write_Long_file_channel (ch, index, limit (), value, address);\n+    nio_write_Long_file_channel (ch, index, limit (), value, map_address);\n     return this;\n   }\n \n@@ -374,27 +385,29 @@ final public FloatBuffer asFloatBuffer ()\n   \n   final public float getFloat ()\n   {\n-    float a = nio_read_Float_file_channel (ch, position (), limit (), address);\n+    float a = nio_read_Float_file_channel (ch, position (), limit (),\n+                                           map_address);\n     position (position () + 1);\n     return a;\n   }\n   \n   final public ByteBuffer putFloat (float value)\n   {\n-    nio_write_Float_file_channel (ch, position (), limit (), value, address);\n+    nio_write_Float_file_channel (ch, position (), limit (), value,\n+                                  map_address);\n     position (position () + 1);\n     return this;\n   }\n   \n   final public float getFloat (int index)\n   {\n-    float a = nio_read_Float_file_channel (ch, index, limit (), address);\n+    float a = nio_read_Float_file_channel (ch, index, limit (), map_address);\n     return a;\n   }\n   \n   final public ByteBuffer putFloat (int index, float value)\n   {\n-    nio_write_Float_file_channel (ch, index, limit (), value, address);\n+    nio_write_Float_file_channel (ch, index, limit (), value, map_address);\n     return this;\n   }\n \n@@ -408,27 +421,29 @@ final public DoubleBuffer asDoubleBuffer ()\n   \n   final public double getDouble ()\n   {\n-    double a = nio_read_Double_file_channel (ch, position (), limit (), address);\n+    double a = nio_read_Double_file_channel (ch, position (), limit (),\n+                                             map_address);\n     position (position () + 1);\n     return a;\n   }\n   \n   final public ByteBuffer putDouble (double value)\n   {\n-    nio_write_Double_file_channel (ch, position (), limit (), value, address);\n+    nio_write_Double_file_channel (ch, position (), limit (), value,\n+                                   map_address);\n     position (position () + 1);\n     return this;\n   }\n   \n   final public double getDouble (int index)\n   {\n-    double a = nio_read_Double_file_channel (ch, index, limit (), address);\n+    double a = nio_read_Double_file_channel (ch, index, limit (), map_address);\n     return a;\n   }\n   \n   final public ByteBuffer putDouble (int index, double value)\n   {\n-    nio_write_Double_file_channel (ch, index, limit (), value, address);\n+    nio_write_Double_file_channel (ch, index, limit (), value, map_address);\n     return this;\n   }\n }"}, {"sha": "9413a77d70081cfbda575c65c4e37bbb8b65911e", "filename": "libjava/gnu/java/nio/natFileChannelImpl.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c99af1553e4093dd007c19eff81a7ae55297b3/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c99af1553e4093dd007c19eff81a7ae55297b3/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc?ref=54c99af1553e4093dd007c19eff81a7ae55297b3", "patch": "@@ -24,6 +24,7 @@ details.  */\n #include <fcntl.h>\n #endif\n \n+#include <gnu/gcj/RawData.h>\n #include <gnu/java/nio/FileChannelImpl.h>\n #include <java/io/FileDescriptor.h>\n #include <java/io/IOException.h>\n@@ -55,20 +56,20 @@ gnu::java::nio::FileChannelImpl::implTruncate (jlong size)\n   return this;\n }\n \n-jlong\n-gnu::java::nio::FileChannelImpl::nio_mmap_file (jlong, jlong, jint)\n+gnu::gcj::RawData*\n+gnu::java::nio::FileChannelImpl::nio_mmap_file (jlong pos, jlong size, jint /*mode*/)\n {\n   throw new ::java::io::IOException (JvNewStringUTF (\"mmap not implemented\"));\n }\n \n void\n-gnu::java::nio::FileChannelImpl::nio_unmmap_file (jlong, jint)\n+gnu::java::nio::FileChannelImpl::nio_unmmap_file (gnu::gcj::RawData* map_address, jint size)\n {\n   throw new ::java::io::IOException (JvNewStringUTF (\"munmap not implemented\"));\n }\n \n void\n-gnu::java::nio::FileChannelImpl::nio_msync (jlong, jint)\n+gnu::java::nio::FileChannelImpl::nio_msync (gnu::gcj::RawData* map_address, jint length)\n {\n   throw new ::java::io::IOException (JvNewStringUTF (\"msync not implemented\"));\n }"}, {"sha": "e64e27c8829b395933d4b4c733037ef4e16508a7", "filename": "libjava/gnu/java/nio/natMappedByteFileBuffer.cc", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c99af1553e4093dd007c19eff81a7ae55297b3/libjava%2Fgnu%2Fjava%2Fnio%2FnatMappedByteFileBuffer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c99af1553e4093dd007c19eff81a7ae55297b3/libjava%2Fgnu%2Fjava%2Fnio%2FnatMappedByteFileBuffer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatMappedByteFileBuffer.cc?ref=54c99af1553e4093dd007c19eff81a7ae55297b3", "patch": "@@ -24,117 +24,125 @@ details.  */\n #include <fcntl.h>\n #endif\n \n+#include <gnu/gcj/RawData.h>\n #include <gnu/java/nio/MappedByteFileBuffer.h>\n #include <java/lang/Error.h>\n \n jbyte\n gnu::java::nio::MappedByteFileBuffer::nio_read_Byte_file_channel\n                                             (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jlong)\n+                                             jint, jint, gnu::gcj::RawData*)\n {\n   throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n }\n \n jchar\n gnu::java::nio::MappedByteFileBuffer::nio_read_Char_file_channel\n                                             (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jlong)\n+                                             jint, jint, gnu::gcj::RawData*)\n {\n   throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n }\n \n jdouble\n gnu::java::nio::MappedByteFileBuffer::nio_read_Double_file_channel\n                                             (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jlong)\n+                                             jint, jint, gnu::gcj::RawData*)\n {\n   throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n }\n \n jfloat\n gnu::java::nio::MappedByteFileBuffer::nio_read_Float_file_channel\n                                             (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jlong)\n+                                             jint, jint, gnu::gcj::RawData*)\n {\n   throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n }\n \n jint\n gnu::java::nio::MappedByteFileBuffer::nio_read_Int_file_channel\n                                             (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jlong)\n+                                             jint, jint, gnu::gcj::RawData*)\n {\n   throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n }\n \n jlong\n gnu::java::nio::MappedByteFileBuffer::nio_read_Long_file_channel\n                                             (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jlong)\n+                                             jint, jint, gnu::gcj::RawData*)\n {\n   throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n }\n \n jshort\n gnu::java::nio::MappedByteFileBuffer::nio_read_Short_file_channel\n                                             (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jlong)\n+                                             jint, jint, gnu::gcj::RawData*)\n {\n   throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n }\n \n void\n gnu::java::nio::MappedByteFileBuffer::nio_write_Byte_file_channel\n                                             (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jbyte, jlong)\n+                                             jint, jint, jbyte,\n+                                             gnu::gcj::RawData*)\n {\n   throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n }\n \n void\n gnu::java::nio::MappedByteFileBuffer::nio_write_Char_file_channel\n                                             (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jchar, jlong)\n+                                             jint, jint, jchar,\n+                                             gnu::gcj::RawData*)\n {\n   throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n }\n \n void\n gnu::java::nio::MappedByteFileBuffer::nio_write_Double_file_channel\n                                             (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jdouble, jlong)\n+                                             jint, jint, jdouble,\n+                                             gnu::gcj::RawData*)\n {\n   throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n }\n \n void\n gnu::java::nio::MappedByteFileBuffer::nio_write_Float_file_channel\n                                             (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jfloat, jlong)\n+                                             jint, jint, jfloat,\n+                                             gnu::gcj::RawData*)\n {\n   throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n }\n \n void\n gnu::java::nio::MappedByteFileBuffer::nio_write_Int_file_channel\n                                             (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jint, jlong)\n+                                             jint, jint, jint,\n+                                             gnu::gcj::RawData*)\n {\n   throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n }\n \n void\n gnu::java::nio::MappedByteFileBuffer::nio_write_Long_file_channel\n                                             (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jlong, jlong)\n+                                             jint, jint, jlong,\n+                                             gnu::gcj::RawData*)\n {\n   throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n }\n \n void\n gnu::java::nio::MappedByteFileBuffer::nio_write_Short_file_channel\n                                             (gnu::java::nio::FileChannelImpl*,\n-                                             jint, jint, jshort, jlong)\n+                                             jint, jint, jshort,\n+                                             gnu::gcj::RawData*)\n {\n   throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n }"}]}