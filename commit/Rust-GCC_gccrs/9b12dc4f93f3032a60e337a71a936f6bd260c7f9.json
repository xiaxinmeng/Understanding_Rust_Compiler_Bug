{"sha": "9b12dc4f93f3032a60e337a71a936f6bd260c7f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIxMmRjNGY5M2YzMDMyYTYwZTMzN2E3MWE5MzZmNmJkMjYwYzdmOQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-03-15T12:39:01Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-03-15T12:39:01Z"}, "message": "re PR rtl-optimization/20291 (combine throws away clobbers before trying to split)\n\n\tPR rtl-optimization/20291\n\t* combine.c (try_combine): If splitting fails, re-try with\n\toriginal combined pattern, i.e. before clobber stripping.\n\nFrom-SVN: r96476", "tree": {"sha": "9ab30e4022c318062d60b24bfd712b5afc52d864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ab30e4022c318062d60b24bfd712b5afc52d864"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b12dc4f93f3032a60e337a71a936f6bd260c7f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b12dc4f93f3032a60e337a71a936f6bd260c7f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b12dc4f93f3032a60e337a71a936f6bd260c7f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b12dc4f93f3032a60e337a71a936f6bd260c7f9/comments", "author": null, "committer": null, "parents": [{"sha": "6baba9bb58232ed672878f28845bdfd9d027c426", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6baba9bb58232ed672878f28845bdfd9d027c426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6baba9bb58232ed672878f28845bdfd9d027c426"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "48e144d72f79b9e83182a021ea75492fb6e398bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b12dc4f93f3032a60e337a71a936f6bd260c7f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b12dc4f93f3032a60e337a71a936f6bd260c7f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b12dc4f93f3032a60e337a71a936f6bd260c7f9", "patch": "@@ -1,3 +1,9 @@\n+2005-03-15  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\tPR rtl-optimization/20291\n+\t* combine.c (try_combine): If splitting fails, re-try with\n+\toriginal combined pattern, i.e. before clobber stripping.\n+\n 2005-03-14  Eric Christopher  <echristo@redhat.com>\n \n \t* config/mips/mips.h (DWARF_CIE_DATA_ALIGNMENT): Change for"}, {"sha": "f97d6c04a4ab77d2cea5b48817d17b52d13f8557", "filename": "gcc/combine.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b12dc4f93f3032a60e337a71a936f6bd260c7f9/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b12dc4f93f3032a60e337a71a936f6bd260c7f9/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=9b12dc4f93f3032a60e337a71a936f6bd260c7f9", "patch": "@@ -1594,6 +1594,7 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n {\n   /* New patterns for I3 and I2, respectively.  */\n   rtx newpat, newi2pat = 0;\n+  rtvec newpat_vec_with_clobbers = 0;\n   int substed_i2 = 0, substed_i1 = 0;\n   /* Indicates need to preserve SET in I1 or I2 in I3 if it is not dead.  */\n   int added_sets_1, added_sets_2;\n@@ -2154,6 +2155,18 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n   /* Note which hard regs this insn has as inputs.  */\n   mark_used_regs_combine (newpat);\n \n+  /* If recog_for_combine fails, it strips existing clobbers.  If we'll\n+     consider splitting this pattern, we might need these clobbers.  */\n+  if (i1 && GET_CODE (newpat) == PARALLEL\n+      && GET_CODE (XVECEXP (newpat, 0, XVECLEN (newpat, 0) - 1)) == CLOBBER)\n+    {\n+      int len = XVECLEN (newpat, 0);\n+\n+      newpat_vec_with_clobbers = rtvec_alloc (len);\n+      for (i = 0; i < len; i++)\n+\tRTVEC_ELT (newpat_vec_with_clobbers, i) = XVECEXP (newpat, 0, i);\n+    }\n+\n   /* Is the result of combination a valid instruction?  */\n   insn_code_number = recog_for_combine (&newpat, i3, &new_i3_notes);\n \n@@ -2281,6 +2294,13 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n \t    }\n \t}\n \n+      /* If recog_for_combine has discarded clobbers, try to use them\n+\t again for the split.  */\n+      if (m_split == 0 && newpat_vec_with_clobbers)\n+\tm_split\n+\t  = split_insns (gen_rtx_PARALLEL (VOIDmode,\n+\t\t\t\t\t   newpat_vec_with_clobbers), i3);\n+\n       if (m_split && NEXT_INSN (m_split) == NULL_RTX)\n \t{\n \t  m_split = PATTERN (m_split);"}]}