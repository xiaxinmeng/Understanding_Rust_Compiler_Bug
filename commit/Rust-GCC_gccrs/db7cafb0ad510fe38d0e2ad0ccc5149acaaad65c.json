{"sha": "db7cafb0ad510fe38d0e2ad0ccc5149acaaad65c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI3Y2FmYjBhZDUxMGZlMzhkMGUyYWQwY2NjNTE0OWFjYWFhZDY1Yw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-07T22:10:34Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-07T22:10:34Z"}, "message": "version.c: Bump for snapshot.\n\n        * version.c: Bump for snapshot.\n\n        * expmed.c (expand_divmod): Make op1_is_pow2 depend on unsignedp\n        for negative constants.  Promote EXACT_DIV_EXPR to TRUNC_DIV_EXPR\n        when op1_is_pow2.\n\n        * final.c (shorten_branches): During first pass, assume worst\n        possible alignment for ADDR_VEC and ADDR_VEC_DIFF insns.\n\n        * Makefile.in (distclean): Remove various things left around\n        by running the testsuite.\n\nFrom-SVN: r15136", "tree": {"sha": "25672ec82aee28c93d020853108c2a4fb25566e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25672ec82aee28c93d020853108c2a4fb25566e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db7cafb0ad510fe38d0e2ad0ccc5149acaaad65c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7cafb0ad510fe38d0e2ad0ccc5149acaaad65c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db7cafb0ad510fe38d0e2ad0ccc5149acaaad65c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7cafb0ad510fe38d0e2ad0ccc5149acaaad65c/comments", "author": null, "committer": null, "parents": [{"sha": "a051ad3aea8f7e346d9ff7a0c921686ed9ae5c33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a051ad3aea8f7e346d9ff7a0c921686ed9ae5c33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a051ad3aea8f7e346d9ff7a0c921686ed9ae5c33"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "bfdb162512fa1bfc1f1228ca35ca56988a7e9777", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7cafb0ad510fe38d0e2ad0ccc5149acaaad65c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7cafb0ad510fe38d0e2ad0ccc5149acaaad65c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db7cafb0ad510fe38d0e2ad0ccc5149acaaad65c", "patch": "@@ -1,3 +1,21 @@\n+Sun Sep  7 14:19:39 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* version.c: Bump for snapshot.\n+\n+Sun Sep  7 14:17:36 1997  Torbjorn Granlund  (tege@pdc.kth.se)\n+\n+\t* expmed.c (expand_divmod): Make op1_is_pow2 depend on unsignedp\n+\tfor negative constants.  Promote EXACT_DIV_EXPR to TRUNC_DIV_EXPR\n+\twhen op1_is_pow2.\n+\n+Sun Sep  7 13:46:46 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+        * final.c (shorten_branches): During first pass, assume worst\n+        possible alignment for ADDR_VEC and ADDR_VEC_DIFF insns.\n+\n+\t* Makefile.in (distclean): Remove various things left around\n+\tby running the testsuite.\n+\n Sun Sep  7 13:16:06 1997  Manfred Hollstein  <manfred@s-direktnet.de>\n \n \t* configure.in (out_file): Emit definition to config.status in order"}, {"sha": "fa3cc490a8c339ec4b591daf3e3e06b81f87e72a", "filename": "gcc/expmed.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7cafb0ad510fe38d0e2ad0ccc5149acaaad65c/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7cafb0ad510fe38d0e2ad0ccc5149acaaad65c/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=db7cafb0ad510fe38d0e2ad0ccc5149acaaad65c", "patch": "@@ -2718,7 +2718,7 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n   op1_is_constant = GET_CODE (op1) == CONST_INT;\n   op1_is_pow2 = (op1_is_constant\n \t\t && ((EXACT_POWER_OF_2_OR_ZERO_P (INTVAL (op1))\n-\t\t      || EXACT_POWER_OF_2_OR_ZERO_P (-INTVAL (op1)))));\n+\t\t      || (! unsignedp && EXACT_POWER_OF_2_OR_ZERO_P (-INTVAL (op1))))));\n \n   /*\n      This is the structure of expand_divmod:\n@@ -2854,6 +2854,8 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \tcode = TRUNC_DIV_EXPR;\n       if (code == FLOOR_MOD_EXPR)\n \tcode = TRUNC_MOD_EXPR;\n+      if (code == EXACT_DIV_EXPR && op1_is_pow2)\n+\tcode = TRUNC_DIV_EXPR;\n     }\n \n   if (op1 != const0_rtx)"}, {"sha": "a7fe94d38cb2ebb83dcc68bfa2680ac8de895efe", "filename": "gcc/final.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7cafb0ad510fe38d0e2ad0ccc5149acaaad65c/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7cafb0ad510fe38d0e2ad0ccc5149acaaad65c/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=db7cafb0ad510fe38d0e2ad0ccc5149acaaad65c", "patch": "@@ -748,9 +748,11 @@ shorten_branches (first)\n \t  insn_lengths[uid] = (XVECLEN (body, GET_CODE (body) == ADDR_DIFF_VEC)\n \t\t\t       * GET_MODE_SIZE (GET_MODE (body)));\n \n-\t  /* Account for possible alignment.  */\n-\t  insn_lengths[uid]\n-\t    += unitsize - (insn_current_address & (unitsize - 1));\n+\t  /* We don't know what address the ADDR_VEC/ADDR_DIFF_VEC will end\n+\t     up at after branch shortening.  As a result, it is impossible\n+\t     to determine how much padding we need at this point.  Therefore,\n+\t     assume worst possible alignment.  */\n+\t  insn_lengths[uid] += unitsize - 1;\n #else\n \t  ;\n #endif"}, {"sha": "c18f3ac7b9ed1a52be897c2138871862a80caaea", "filename": "gcc/version.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7cafb0ad510fe38d0e2ad0ccc5149acaaad65c/gcc%2Fversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7cafb0ad510fe38d0e2ad0ccc5149acaaad65c/gcc%2Fversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fversion.c?ref=db7cafb0ad510fe38d0e2ad0ccc5149acaaad65c", "patch": "@@ -1 +1 @@\n-char *version_string = \"egcs-2.90.05 970904 (gcc2-970802 experimental)\";\n+char *version_string = \"egcs-2.90.06 970907 (gcc2-970802 experimental)\";"}]}