{"sha": "c9fbef12bee8504ff48a45e3c67099af6772857d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlmYmVmMTJiZWU4NTA0ZmY0OGE0NWUzYzY3MDk5YWY2NzcyODU3ZA==", "commit": {"author": {"name": "Andrew Cagney", "email": "cagney@redhat.com", "date": "2003-09-16T01:51:07Z"}, "committer": {"name": "Andrew Cagney", "email": "cagney@gcc.gnu.org", "date": "2003-09-16T01:51:07Z"}, "message": "Index: include/ChangeLog\n2003-09-15  Andrew Cagney  <cagney@redhat.com>\n\n\t* floatformat.h (floatformat_to_double): Make input buffer constant.\n\t(floatformat_from_double, floatformat_is_valid): Ditto.\n\nIndex: libiberty/ChangeLog\n2003-09-15  Andrew Cagney  <cagney@redhat.com>\n\n\t* floatformat.c (get_field): Make \"data\" constant.\n\t(floatformat_is_valid, floatformat_to_double): Make \"from\"\n\tconstant, fix casts.\n\t(floatformat_from_double): Make \"from\" constant.\n\nFrom-SVN: r71422", "tree": {"sha": "5c6e1c9bbf676db99a510a4191f0ac8fbdd92f76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c6e1c9bbf676db99a510a4191f0ac8fbdd92f76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9fbef12bee8504ff48a45e3c67099af6772857d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9fbef12bee8504ff48a45e3c67099af6772857d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9fbef12bee8504ff48a45e3c67099af6772857d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9fbef12bee8504ff48a45e3c67099af6772857d/comments", "author": null, "committer": null, "parents": [{"sha": "602a82f3cfb0d903381a63497fbfa98cf74adeaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/602a82f3cfb0d903381a63497fbfa98cf74adeaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/602a82f3cfb0d903381a63497fbfa98cf74adeaa"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "7d727085fafdc54605ee813eee911d7bd50a7cb3", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fbef12bee8504ff48a45e3c67099af6772857d/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fbef12bee8504ff48a45e3c67099af6772857d/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=c9fbef12bee8504ff48a45e3c67099af6772857d", "patch": "@@ -1,3 +1,8 @@\n+2003-09-15  Andrew Cagney  <cagney@redhat.com>\n+\n+\t* floatformat.h (floatformat_to_double): Make input buffer constant.\n+\t(floatformat_from_double, floatformat_is_valid): Ditto.\n+\t\n 2003-09-15  Andrew Cagney  <cagney@redhat.com>\n \n \t* floatformat.h (struct floatformat): Make \"exp_bias\" signed."}, {"sha": "3d0fd7a87ad8bf2ee1ac2187ac373aceb1d8017b", "filename": "include/floatformat.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fbef12bee8504ff48a45e3c67099af6772857d/include%2Ffloatformat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fbef12bee8504ff48a45e3c67099af6772857d/include%2Ffloatformat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Ffloatformat.h?ref=c9fbef12bee8504ff48a45e3c67099af6772857d", "patch": "@@ -113,18 +113,18 @@ extern const struct floatformat floatformat_ia64_quad_little;\n    Store the double in *TO.  */\n \n extern void\n-floatformat_to_double PARAMS ((const struct floatformat *, char *, double *));\n+floatformat_to_double PARAMS ((const struct floatformat *, const char *, double *));\n \n /* The converse: convert the double *FROM to FMT\n    and store where TO points.  */\n \n extern void\n floatformat_from_double PARAMS ((const struct floatformat *,\n-\t\t\t\t double *, char *));\n+\t\t\t\t const double *, char *));\n \n /* Return non-zero iff the data at FROM is a valid number in format FMT.  */\n \n extern int\n-floatformat_is_valid PARAMS ((const struct floatformat *fmt, char *from));\n+floatformat_is_valid PARAMS ((const struct floatformat *fmt, const char *from));\n \n #endif\t/* defined (FLOATFORMAT_H) */"}, {"sha": "5c4175bbd482f156cfb050d8efe8a433f7e412ed", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fbef12bee8504ff48a45e3c67099af6772857d/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fbef12bee8504ff48a45e3c67099af6772857d/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=c9fbef12bee8504ff48a45e3c67099af6772857d", "patch": "@@ -1,3 +1,10 @@\n+2003-09-15  Andrew Cagney  <cagney@redhat.com>\n+\n+\t* floatformat.c (get_field): Make \"data\" constant.\n+\t(floatformat_is_valid, floatformat_to_double): Make \"from\"\n+\tconstant, fix casts.\n+\t(floatformat_from_double): Make \"from\" constant.\n+\n 2003-09-15  Daniel Jacobowitz  <drow@mvista.com>\n \n \t* floatformat.c (floatformat_is_valid): New function."}, {"sha": "ee87e273415003660696addbb9deb3b63db854ad", "filename": "libiberty/floatformat.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fbef12bee8504ff48a45e3c67099af6772857d/libiberty%2Ffloatformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fbef12bee8504ff48a45e3c67099af6772857d/libiberty%2Ffloatformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffloatformat.c?ref=c9fbef12bee8504ff48a45e3c67099af6772857d", "patch": "@@ -143,7 +143,7 @@ const struct floatformat floatformat_ia64_quad_little =\n   \"floatformat_ia64_quad_little\"\n };\n \f\n-static unsigned long get_field PARAMS ((unsigned char *,\n+static unsigned long get_field PARAMS ((const unsigned char *,\n \t\t\t\t\tenum floatformat_byteorders,\n \t\t\t\t\tunsigned int,\n \t\t\t\t\tunsigned int,\n@@ -153,7 +153,7 @@ static unsigned long get_field PARAMS ((unsigned char *,\n    TOTAL_LEN are the thing we are extracting it from, in byteorder ORDER.  */\n static unsigned long\n get_field (data, order, total_len, start, len)\n-     unsigned char *data;\n+     const unsigned char *data;\n      enum floatformat_byteorders order;\n      unsigned int total_len;\n      unsigned int start;\n@@ -207,10 +207,10 @@ get_field (data, order, total_len, start, len)\n void\n floatformat_to_double (fmt, from, to)\n      const struct floatformat *fmt;\n-     char *from;\n+     const char *from;\n      double *to;\n {\n-  unsigned char *ufrom = (unsigned char *)from;\n+  const unsigned char *ufrom = (const unsigned char *)from;\n   double dto;\n   long exponent;\n   unsigned long mant;\n@@ -331,7 +331,7 @@ put_field (data, order, total_len, start, len, stuff_to_put)\n void\n floatformat_from_double (fmt, from, to)\n      const struct floatformat *fmt;\n-     double *from;\n+     const double *from;\n      char *to;\n {\n   double dfrom;\n@@ -409,7 +409,7 @@ floatformat_from_double (fmt, from, to)\n int\n floatformat_is_valid (fmt, from)\n      const struct floatformat *fmt;\n-     char *from;\n+     const char *from;\n {\n   if (fmt == &floatformat_i387_ext)\n     {\n@@ -419,7 +419,7 @@ floatformat_is_valid (fmt, from)\n \t if the exponent is zero can it be zero, and then it must\n \t be zero.  */\n       unsigned long exponent, int_bit;\n-      unsigned char *ufrom = (unsigned char *) from;\n+      const unsigned char *ufrom = (const unsigned char *) from;\n \n       exponent = get_field (ufrom, fmt->byteorder, fmt->totalsize,\n \t\t\t    fmt->exp_start, fmt->exp_len);"}]}