{"sha": "6fbf987777752819895fc9083c5e3c1f4781399d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZiZjk4Nzc3Nzc1MjgxOTg5NWZjOTA4M2M1ZTNjMWY0NzgxMzk5ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2013-11-10T11:45:42Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-11-10T11:45:42Z"}, "message": "fenv.c: New file.\n\n\t* config/x86/fenv.c: New file.\n\nFrom-SVN: r204634", "tree": {"sha": "508ae2091b5800e0bc096a29cb5b6a326023c485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/508ae2091b5800e0bc096a29cb5b6a326023c485"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fbf987777752819895fc9083c5e3c1f4781399d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fbf987777752819895fc9083c5e3c1f4781399d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fbf987777752819895fc9083c5e3c1f4781399d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fbf987777752819895fc9083c5e3c1f4781399d/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d859c1b8c0dab82f9fae92302d936e6d337c91ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d859c1b8c0dab82f9fae92302d936e6d337c91ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d859c1b8c0dab82f9fae92302d936e6d337c91ac"}], "stats": {"total": 120, "additions": 120, "deletions": 0}, "files": [{"sha": "06aff7feb350f192764f121e300679fca80171e9", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbf987777752819895fc9083c5e3c1f4781399d/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbf987777752819895fc9083c5e3c1f4781399d/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=6fbf987777752819895fc9083c5e3c1f4781399d", "patch": "@@ -1,3 +1,7 @@\n+2013-11-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/x86/fenv.c: New file.\n+\n 2013-11-07  Joseph Myers  <joseph@codesourcery.com>\n \n \t* fenv.c: New file."}, {"sha": "154983e5f45621aef55638ec05d33c5d1b964c74", "filename": "libatomic/config/x86/fenv.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbf987777752819895fc9083c5e3c1f4781399d/libatomic%2Fconfig%2Fx86%2Ffenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbf987777752819895fc9083c5e3c1f4781399d/libatomic%2Fconfig%2Fx86%2Ffenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfig%2Fx86%2Ffenv.c?ref=6fbf987777752819895fc9083c5e3c1f4781399d", "patch": "@@ -0,0 +1,116 @@\n+/* Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+   This file is part of the GNU Atomic Library (libatomic).\n+\n+   Libatomic is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libatomic is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"libatomic_i.h\"\n+\n+#define FE_INVALID\t0x01\n+#define FE_DENORM\t0x02\n+#define FE_DIVBYZERO\t0x04\n+#define FE_OVERFLOW\t0x08\n+#define FE_UNDERFLOW\t0x10\n+#define FE_INEXACT\t0x20\n+\n+struct fenv\n+{\n+  unsigned short int __control_word;\n+  unsigned short int __unused1;\n+  unsigned short int __status_word;\n+  unsigned short int __unused2;\n+  unsigned short int __tags;\n+  unsigned short int __unused3;\n+  unsigned int __eip;\n+  unsigned short int __cs_selector;\n+  unsigned int __opcode:11;\n+  unsigned int __unused4:5;\n+  unsigned int __data_offset;\n+  unsigned short int __data_selector;\n+  unsigned short int __unused5;\n+};\n+\n+/* Raise the supported floating-point exceptions from EXCEPTS.  Other\n+   bits in EXCEPTS are ignored.  */\n+\n+void\n+__atomic_feraiseexcept (int excepts)\n+{\n+  if (excepts & FE_INVALID)\n+    {\n+      float f = 0.0f;\n+#ifdef __x86_64__\n+      volatile float r __attribute__ ((unused));\n+      asm volatile (\"%vdivss\\t{%0, %d0|%d0, %0}\" : \"+x\" (f));\n+      r = f; /* Needed to trigger exception.   */\n+#else\n+      asm volatile (\"fdiv\\t{%y0, %0|%0, %y0}\" : \"+t\" (f));\n+      /* No need for fwait, exception is triggered by emitted fstp.  */\n+#endif\n+    }\n+  if (excepts & FE_DENORM)\n+    {\n+      struct fenv temp;\n+      asm volatile (\"fnstenv\\t%0\" : \"=m\" (temp));\n+      temp.__status_word |= FE_DENORM;\n+      asm volatile (\"fldenv\\t%0\" : : \"m\" (temp));\n+      asm volatile (\"fwait\");\n+    }\n+  if (excepts & FE_DIVBYZERO)\n+    {\n+      float f = 1.0f, g = 0.0f;\n+#ifdef __x86_64__\n+      volatile float r __attribute__ ((unused));\n+      asm volatile (\"%vdivss\\t{%1, %d0|%d0, %1}\" : \"+x\" (f) : \"xm\" (g));\n+      r = f; /* Needed to trigger exception.   */\n+#else\n+      asm volatile (\"fdivs\\t%1\" : \"+t\" (f) : \"m\" (g));\n+      /* No need for fwait, exception is triggered by emitted fstp.  */\n+#endif\n+    }\n+  if (excepts & FE_OVERFLOW)\n+    {\n+      struct fenv temp;\n+      asm volatile (\"fnstenv\\t%0\" : \"=m\" (temp));\n+      temp.__status_word |= FE_OVERFLOW;\n+      asm volatile (\"fldenv\\t%0\" : : \"m\" (temp));\n+      asm volatile (\"fwait\");\n+    }\n+  if (excepts & FE_UNDERFLOW)\n+    {\n+      struct fenv temp;\n+      asm volatile (\"fnstenv\\t%0\" : \"=m\" (temp));\n+      temp.__status_word |= FE_UNDERFLOW;\n+      asm volatile (\"fldenv\\t%0\" : : \"m\" (temp));\n+      asm volatile (\"fwait\");\n+    }\n+  if (excepts & FE_INEXACT)\n+    {\n+      float f = 1.0f, g = 3.0f;\n+#ifdef __x86_64__\n+      volatile float r __attribute__ ((unused));\n+      asm volatile (\"%vdivss\\t{%1, %d0|%d0, %1}\" : \"+x\" (f) : \"xm\" (g));\n+      r = f; /* Needed to trigger exception.   */\n+#else\n+      asm volatile (\"fdivs\\t%1\" : \"+t\" (f) : \"m\" (g));\n+      /* No need for fwait, exception is triggered by emitted fstp.  */\n+#endif\n+    }\n+}"}]}