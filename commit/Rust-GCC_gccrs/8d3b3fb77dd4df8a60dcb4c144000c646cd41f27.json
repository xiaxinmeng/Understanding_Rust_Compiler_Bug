{"sha": "8d3b3fb77dd4df8a60dcb4c144000c646cd41f27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQzYjNmYjc3ZGQ0ZGY4YTYwZGNiNGMxNDQwMDBjNjQ2Y2Q0MWYyNw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2004-03-24T18:27:49Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-03-24T18:27:49Z"}, "message": "invoke.texi (-frename-registers): Add enabled at -O3.\n\n\t* doc/invoke.texi (-frename-registers: Add enabled at -O3.\n\t(-fprofile-values): Add enabled with profile-{generate,use}.\n\t(-fvpt): Same.\n\t(-ftracer): Add enabled with profile-use.\n\t(-funit-at-a-time): Add enabled at -O2,-O3.\n\t(-funroll-loops): Add enabled with profile-use.\n\t(-funswitch-loops): Add enabled with profile-use.  Remove duplicates.\n\t(max-gcse-passes): Mention default.\n\t(max-cse-path-length): Mention default.\n\nFrom-SVN: r79925", "tree": {"sha": "84c142692cf6f41074e23be4f283ffe52b0065af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84c142692cf6f41074e23be4f283ffe52b0065af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d3b3fb77dd4df8a60dcb4c144000c646cd41f27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3b3fb77dd4df8a60dcb4c144000c646cd41f27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d3b3fb77dd4df8a60dcb4c144000c646cd41f27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3b3fb77dd4df8a60dcb4c144000c646cd41f27/comments", "author": null, "committer": null, "parents": [{"sha": "71f9a9d15e0deaa0b6b80f4ad146f0840cb483b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f9a9d15e0deaa0b6b80f4ad146f0840cb483b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71f9a9d15e0deaa0b6b80f4ad146f0840cb483b0"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "74128018385e399edcef8f26123ce3add88edc0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3b3fb77dd4df8a60dcb4c144000c646cd41f27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3b3fb77dd4df8a60dcb4c144000c646cd41f27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d3b3fb77dd4df8a60dcb4c144000c646cd41f27", "patch": "@@ -1,3 +1,15 @@\n+2004-03-24  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* doc/invoke.texi (-frename-registers: Add enabled at -O3.\n+\t(-fprofile-values): Add enabled with profile-{generate,use}.\n+\t(-fvpt): Same.\n+\t(-ftracer): Add enabled with profile-use.\n+\t(-funit-at-a-time): Add enabled at -O2,-O3.\n+\t(-funroll-loops): Add enabled with profile-use.\n+\t(-funswitch-loops): Add enabled with profile-use.  Remove duplicates.\n+\t(max-gcse-passes): Mention default.\n+\t(max-cse-path-length): Mention default.\n+\n 2004-03-24  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* Makefile.in (STRICT2_WARN): Reorder."}, {"sha": "dcd72eb17720bc694d2c2ac856ce333cc7919552", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3b3fb77dd4df8a60dcb4c144000c646cd41f27/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3b3fb77dd4df8a60dcb4c144000c646cd41f27/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8d3b3fb77dd4df8a60dcb4c144000c646cd41f27", "patch": "@@ -4332,6 +4332,8 @@ will most benefit processors with lots of registers.  It can, however,\n make debugging impossible, since variables will no longer stay in\n a ``home register''.\n \n+Enabled at levels @option{-O3}.\n+\n @item -fweb\n @opindex fweb\n Constructs webs as commonly used for register allocation purposes and assign\n@@ -4533,6 +4535,8 @@ With @option{-fbranch-probabilities}, it reads back the data gathered\n from profiling values of expressions and adds @samp{REG_VALUE_PROFILE}\n notes to instructions for their later usage in optimizations.\n \n+Enabled with @option{-profile-generate} and @option{-profile-use}.\n+\n @item -fvpt\n @opindex fvpt\n If combined with @option{-fprofile-arcs}, it instructs the compiler to add\n@@ -4543,6 +4547,8 @@ and actually performs the optimizations based on them.\n Currently the optimizations include specialization of division operation\n using the knowledge about the value of the denominator.\n \n+Enabled with @option{-profile-generate} and @option{-profile-use}.\n+\n @item -fnew-ra\n @opindex fnew-ra\n Use a graph coloring register allocator.  Currently this option is meant\n@@ -4555,12 +4561,16 @@ Perform tail duplication to enlarge superblock size. This transformation\n simplifies the control flow of the function allowing other optimizations to do\n better job.\n \n+Enabled with @option{-profile-use}.\n+\n @item -funit-at-a-time\n @opindex funit-at-a-time\n Parse the whole compilation unit before starting to produce code.\n This allows some extra optimizations to take place but consumes more\n memory.\n \n+Enabled at levels @option{-O2}, @option{-O3}.\n+\n @item -funroll-loops\n @opindex funroll-loops\n Unroll loops whose number of iterations can be determined at compile time or\n@@ -4569,6 +4579,8 @@ upon entry to the loop.  @option{-funroll-loops} implies\n (i.e. complete removal of loops with small constant number of iterations).\n This option makes code larger, and may or may not make it run faster.\n \n+Enabled with @option{-profile-use}.\n+\n @item -funroll-all-loops\n @opindex funroll-all-loops\n Unroll all loops, even if their number of iterations is uncertain when\n@@ -4582,6 +4594,8 @@ Peels the loops for that there is enough information that they do not\n roll much (from profile feedback).  It also turns on complete loop peeling\n (i.e. complete removal of loops with small constant number of iterations).\n \n+Enabled with @option{-profile-use}.\n+\n @item -funswitch-loops\n @opindex funswitch-loops\n Move branches with loop invariant conditions out of the loop, with duplicates\n@@ -4603,16 +4617,6 @@ recognition is based on notes from frontend.  This usually makes programs run mo\n @option{-fold-unroll-all-loops} implies the same options as\n @option{-fold-unroll-loops}.\n \n-@item -funswitch-loops\n-@opindex funswitch-loops\n-Move branches with loop invariant conditions out of the loop, with duplicates\n-of the loop on both branches (modified according to result of the condition).\n-\n-@item -funswitch-loops\n-@opindex funswitch-loops\n-Move branches with loop invariant conditions out of the loop, with duplicates\n-of the loop on both branches (modified according to result of the condition).\n-\n @item -fprefetch-loop-arrays\n @opindex fprefetch-loop-arrays\n If supported by the target machine, generate instructions to prefetch\n@@ -4657,7 +4661,7 @@ threading.\n \n @item -fbtr-bb-exclusive\n @opindex fbtr-bb-exclusive\n-WHen performing branch target register load optimization, don't reuse\n+When performing branch target register load optimization, don't reuse\n branch target registers in within any basic block.\n \n @item --param @var{name}=@var{value}\n@@ -4706,7 +4710,7 @@ optimization.  If more memory than specified is required, the\n optimization will not be done.\n \n @item max-gcse-passes\n-The maximum number of passes of GCSE to run.\n+The maximum number of passes of GCSE to run.  The default is 1.\n \n @item max-pending-list-length\n The maximum number of pending dependencies scheduling will allow\n@@ -4830,7 +4834,7 @@ order to make tracer effective.\n \n @item max-cse-path-length\n \n-Maximum number of basic blocks on path that cse considers.\n+Maximum number of basic blocks on path that cse considers.  The default is 10.\n \n @item ggc-min-expand\n "}]}