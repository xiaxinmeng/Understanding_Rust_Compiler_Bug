{"sha": "970ba719250ec06767e0617658bb92a64fde0f3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcwYmE3MTkyNTBlYzA2NzY3ZTA2MTc2NThiYjkyYTY0ZmRlMGYzZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-12T13:01:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-12T14:30:14Z"}, "message": "libstdc++: Fix errors in <experimental/internet>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/internet (address_v6::any): Avoid using\n\tmemcpy in constexpr function.\n\t(address_v6::loopback): Likewise.\n\t(make_address_v6): Fix missing return statements on error paths.\n\t* include/experimental/io_context: Avoid -Wdangling-else\n\twarning.\n\t* testsuite/experimental/net/internet/address/v4/members.cc:\n\tRemove unused variables.\n\t* testsuite/experimental/net/internet/address/v6/members.cc:\n\tNew test.", "tree": {"sha": "9ab015114797f6715c266a78816f2a8f28661d81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ab015114797f6715c266a78816f2a8f28661d81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/970ba719250ec06767e0617658bb92a64fde0f3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/970ba719250ec06767e0617658bb92a64fde0f3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/970ba719250ec06767e0617658bb92a64fde0f3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/970ba719250ec06767e0617658bb92a64fde0f3f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87eaa3c525eb65775e6d77403b83a273a2397099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87eaa3c525eb65775e6d77403b83a273a2397099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87eaa3c525eb65775e6d77403b83a273a2397099"}], "stats": {"total": 170, "additions": 145, "deletions": 25}, "files": [{"sha": "57831676a29f7dcd9110657578f667e4affbf399", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970ba719250ec06767e0617658bb92a64fde0f3f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970ba719250ec06767e0617658bb92a64fde0f3f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=970ba719250ec06767e0617658bb92a64fde0f3f", "patch": "@@ -354,19 +354,18 @@ namespace ip\n #endif\n \n     // static members:\n+\n     static constexpr address_v6\n     any() noexcept\n     {\n-      address_v6 __addr;\n-      __builtin_memcpy(&__addr._M_bytes, in6addr_any.s6_addr, 16);\n-      return __addr;\n+      return {};\n     }\n \n     static constexpr address_v6\n     loopback() noexcept\n     {\n       address_v6 __addr;\n-      __builtin_memcpy(&__addr._M_bytes, in6addr_loopback.s6_addr, 16);\n+      __addr._M_bytes[15] = 1;\n       return __addr;\n     }\n \n@@ -755,7 +754,10 @@ namespace ip\n \t__str++;\n       }\n     if (__out == std::end(__buf))\n-      __ec = std::make_error_code(std::errc::invalid_argument);\n+      {\n+\t__ec = std::make_error_code(std::errc::invalid_argument);\n+\treturn {};\n+      }\n     else\n       {\n \t*__out = '\\0';\n@@ -790,7 +792,10 @@ namespace ip\n \t__n++;\n       }\n     if (__out == std::end(__buf))\n-      __ec = std::make_error_code(std::errc::invalid_argument);\n+      {\n+\t__ec = std::make_error_code(std::errc::invalid_argument);\n+\treturn {};\n+      }\n     else\n       {\n \t*__out = '\\0';\n@@ -835,7 +840,10 @@ namespace ip\n \t__n++;\n       }\n     if (__out == std::end(__buf))\n-      __ec = std::make_error_code(std::errc::invalid_argument);\n+      {\n+\t__ec = std::make_error_code(std::errc::invalid_argument);\n+\treturn {};\n+      }\n     else\n       {\n \t*__out = '\\0';"}, {"sha": "c82f30cd119cc06f025b5a5c94da2b7a9dbb4d9c", "filename": "libstdc++-v3/include/experimental/io_context", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970ba719250ec06767e0617658bb92a64fde0f3f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fio_context", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970ba719250ec06767e0617658bb92a64fde0f3f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fio_context", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fio_context?ref=970ba719250ec06767e0617658bb92a64fde0f3f", "patch": "@@ -680,10 +680,12 @@ inline namespace v1\n \t    continue;\n \n \t  if (__res == __reactor::_S_timeout)\n-\t    if (__timerq == nullptr)\n-\t      return false;\n-\t    else\n-\t      continue;  // timed out, so restart loop and process the timer\n+\t    {\n+\t      if (__timerq == nullptr)\n+\t\treturn false;\n+\t      else\n+\t\tcontinue;  // timed out, so restart loop and process the timer\n+\t    }\n \n \t  __timerq = nullptr;\n "}, {"sha": "f644c0847ab3128c6a3f2b946421b5f44937b54c", "filename": "libstdc++-v3/testsuite/experimental/net/internet/address/v4/members.cc", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970ba719250ec06767e0617658bb92a64fde0f3f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fmembers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970ba719250ec06767e0617658bb92a64fde0f3f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fmembers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fmembers.cc?ref=970ba719250ec06767e0617658bb92a64fde0f3f", "patch": "@@ -19,15 +19,14 @@\n // { dg-add-options net_ts }\n \n #include <experimental/internet>\n+#include <sstream>\n #include <testsuite_hooks.h>\n \n using std::experimental::net::ip::address_v4;\n \n-void\n+constexpr bool\n test01()\n {\n-  bool test __attribute__((unused)) = false;\n-\n   address_v4 a;\n   VERIFY( a.is_unspecified() );\n \n@@ -39,13 +38,15 @@ test01()\n \n   a = address_v4::broadcast();\n   VERIFY( !a.is_unspecified() );\n+\n+  return true;\n }\n \n-void\n+static_assert(test01(), \"\");\n+\n+constexpr bool\n test02()\n {\n-  bool test __attribute__((unused)) = false;\n-\n   auto a = address_v4::loopback();\n   VERIFY( a.is_loopback() );\n \n@@ -63,13 +64,15 @@ test02()\n \n   a = address_v4::broadcast();\n   VERIFY( !a.is_loopback() );\n+\n+  return true;\n }\n \n-void\n+static_assert(test02(), \"\");\n+\n+constexpr bool\n test03()\n {\n-  bool test __attribute__((unused)) = false;\n-\n   auto a = address_v4{0xE0000001};\n   VERIFY( a.is_multicast() );\n \n@@ -84,13 +87,15 @@ test03()\n \n   a = address_v4{0xDFFFFFFF};\n   VERIFY( !a.is_multicast() );\n+\n+  return true;\n }\n \n+static_assert(test03(), \"\");\n+\n void\n test04()\n {\n-  bool test __attribute__((unused)) = false;\n-\n   VERIFY( address_v4::any().to_string() == \"0.0.0.0\" );\n   VERIFY( address_v4::loopback().to_string() == \"127.0.0.1\" );\n   VERIFY( address_v4::broadcast().to_string() == \"255.255.255.255\" );\n@@ -99,15 +104,12 @@ test04()\n void\n test05()\n {\n-  bool test __attribute__((unused)) = false;\n-\n   std::ostringstream ss;\n   ss << address_v4::any() << ' ' << address_v4::loopback() << ' '\n     << address_v4::broadcast();\n   VERIFY( ss.str() == \"0.0.0.0 127.0.0.1 255.255.255.255\" );\n }\n \n-\n int\n main()\n {"}, {"sha": "506345dc99084fca975740533292b615cee0d52e", "filename": "libstdc++-v3/testsuite/experimental/net/internet/address/v6/members.cc", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970ba719250ec06767e0617658bb92a64fde0f3f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv6%2Fmembers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970ba719250ec06767e0617658bb92a64fde0f3f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv6%2Fmembers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv6%2Fmembers.cc?ref=970ba719250ec06767e0617658bb92a64fde0f3f", "patch": "@@ -0,0 +1,108 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++14 } }\n+// { dg-add-options net_ts }\n+\n+#include <experimental/internet>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+using std::experimental::net::ip::address_v6;\n+\n+constexpr bool\n+test01()\n+{\n+  address_v6 a;\n+  VERIFY( a.is_unspecified() );\n+  VERIFY( !a.is_loopback() );\n+  VERIFY( !a.is_multicast() );\n+  VERIFY( !a.is_link_local() );\n+  VERIFY( !a.is_site_local() );\n+\n+  a = address_v6::any();\n+  VERIFY( a.is_unspecified() );\n+  VERIFY( !a.is_loopback() );\n+  VERIFY( !a.is_multicast() );\n+  VERIFY( !a.is_link_local() );\n+  VERIFY( !a.is_site_local() );\n+\n+  a = address_v6::loopback();\n+  VERIFY( !a.is_unspecified() );\n+  VERIFY( a.is_loopback() );\n+  VERIFY( !a.is_multicast() );\n+  VERIFY( !a.is_link_local() );\n+  VERIFY( !a.is_site_local() );\n+\n+  a = address_v6{address_v6::loopback().to_bytes(), 1};\n+  VERIFY( !a.is_unspecified() );\n+  VERIFY( !a.is_loopback() );\n+  VERIFY( !a.is_multicast() );\n+  VERIFY( !a.is_link_local() );\n+  VERIFY( !a.is_site_local() );\n+\n+  return true;\n+}\n+\n+static_assert(test01(), \"\");\n+\n+constexpr bool\n+test02()\n+{\n+  auto a = address_v6{address_v6::bytes_type{0xFF}};\n+  VERIFY( a.is_multicast() );\n+\n+  a = address_v6{address_v6::bytes_type{0xFF, 0x01}};\n+  VERIFY( a.is_multicast() );\n+\n+  a = address_v6{address_v6::bytes_type{0xFF, 0x00, 0x01}};\n+  VERIFY( a.is_multicast() );\n+\n+  a = address_v6{address_v6::bytes_type{0xFE, 0x80}};\n+  VERIFY( !a.is_multicast() );\n+\n+  a = address_v6{address_v6::bytes_type{0xFE, 0xC0}};\n+  VERIFY( !a.is_multicast() );\n+\n+  return true;\n+}\n+\n+static_assert(test02(), \"\");\n+\n+void\n+test03()\n+{\n+  VERIFY( address_v6::any().to_string() == \"::\" );\n+  VERIFY( address_v6::loopback().to_string() == \"::1\" );\n+}\n+\n+void\n+test04()\n+{\n+  std::ostringstream ss;\n+  ss << address_v6::any() << ' ' << address_v6::loopback();\n+  VERIFY( ss.str() == \":: ::1\" );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}]}