{"sha": "529a6471280e26d5ea558b83aa094ac847dbbec9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI5YTY0NzEyODBlMjZkNWVhNTU4YjgzYWEwOTRhYzg0N2RiYmVjOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-01-06T21:38:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-01-06T21:38:27Z"}, "message": "re PR target/59644 (r206243 miscompiles Linux kernel)\n\n\tPR target/59644\n\t* config/i386/i386.h (struct machine_function): Add\n\tno_drap_save_restore field.\n\t* config/i386/i386.c (ix86_save_reg): Use\n\t!cfun->machine->no_drap_save_restore instead of\n\tcrtl->stack_realign_needed.\n\t(ix86_finalize_stack_realign_flags): Don't clear drap_reg unless\n\tthis function clears frame_pointer_needed.  Set\n\tcfun->machine->no_drap_save_restore if clearing frame_pointer_needed\n\tand DRAP reg is needed.\n\n\t* gcc.target/i386/pr59644.c: New test.\n\nFrom-SVN: r206375", "tree": {"sha": "31db34d335f3bdadd76045327720c59693b2856a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31db34d335f3bdadd76045327720c59693b2856a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/529a6471280e26d5ea558b83aa094ac847dbbec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/529a6471280e26d5ea558b83aa094ac847dbbec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/529a6471280e26d5ea558b83aa094ac847dbbec9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/529a6471280e26d5ea558b83aa094ac847dbbec9/comments", "author": null, "committer": null, "parents": [{"sha": "71d0d50aa3b292a1137dc2e7ed468aff24efdb83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71d0d50aa3b292a1137dc2e7ed468aff24efdb83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71d0d50aa3b292a1137dc2e7ed468aff24efdb83"}], "stats": {"total": 87, "additions": 70, "deletions": 17}, "files": [{"sha": "624c9fb8075e8b5e495746789ccdb4a392321cbf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529a6471280e26d5ea558b83aa094ac847dbbec9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529a6471280e26d5ea558b83aa094ac847dbbec9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=529a6471280e26d5ea558b83aa094ac847dbbec9", "patch": "@@ -1,3 +1,16 @@\n+2014-01-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/59644\n+\t* config/i386/i386.h (struct machine_function): Add\n+\tno_drap_save_restore field.\n+\t* config/i386/i386.c (ix86_save_reg): Use\n+\t!cfun->machine->no_drap_save_restore instead of\n+\tcrtl->stack_realign_needed.\n+\t(ix86_finalize_stack_realign_flags): Don't clear drap_reg unless\n+\tthis function clears frame_pointer_needed.  Set\n+\tcfun->machine->no_drap_save_restore if clearing frame_pointer_needed\n+\tand DRAP reg is needed.\n+\n 2014-01-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/57773"}, {"sha": "32b6418320fba1d28eae31d9d29fd4c34c1f53ef", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529a6471280e26d5ea558b83aa094ac847dbbec9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529a6471280e26d5ea558b83aa094ac847dbbec9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=529a6471280e26d5ea558b83aa094ac847dbbec9", "patch": "@@ -9281,7 +9281,7 @@ ix86_save_reg (unsigned int regno, bool maybe_eh_return)\n \n   if (crtl->drap_reg\n       && regno == REGNO (crtl->drap_reg)\n-      && crtl->stack_realign_needed)\n+      && !cfun->machine->no_drap_save_restore)\n     return true;\n \n   return (df_regs_ever_live_p (regno)\n@@ -10519,18 +10519,6 @@ ix86_finalize_stack_realign_flags (void)\n       return;\n     }\n \n-  /* If drap has been set, but it actually isn't live at the start\n-     of the function and !stack_realign, there is no reason to set it up.  */\n-  if (crtl->drap_reg && !stack_realign)\n-    {\n-      basic_block bb = ENTRY_BLOCK_PTR_FOR_FN (cfun)->next_bb;\n-      if (! REGNO_REG_SET_P (DF_LR_IN (bb), REGNO (crtl->drap_reg)))\n-\t{\n-\t  crtl->drap_reg = NULL_RTX;\n-\t  crtl->need_drap = false;\n-\t}\n-    }\n-\n   /* If the only reason for frame_pointer_needed is that we conservatively\n      assumed stack realignment might be needed, but in the end nothing that\n      needed the stack alignment had been spilled, clear frame_pointer_needed\n@@ -10584,6 +10572,8 @@ ix86_finalize_stack_realign_flags (void)\n \t      crtl->need_drap = false;\n \t    }\n \t}\n+      else\n+\tcfun->machine->no_drap_save_restore = true;\n \n       frame_pointer_needed = false;\n       stack_realign = false;"}, {"sha": "ab7489a0c1b7810b4b5365bcc96bdd7658a0006a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529a6471280e26d5ea558b83aa094ac847dbbec9/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529a6471280e26d5ea558b83aa094ac847dbbec9/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=529a6471280e26d5ea558b83aa094ac847dbbec9", "patch": "@@ -2419,6 +2419,9 @@ struct GTY(()) machine_function {\n      stack below the return address.  */\n   BOOL_BITFIELD static_chain_on_stack : 1;\n \n+  /* If true, it is safe to not save/restore DRAP register.  */\n+  BOOL_BITFIELD no_drap_save_restore : 1;\n+\n   /* During prologue/epilogue generation, the current frame state.\n      Otherwise, the frame state at the end of the prologue.  */\n   struct machine_frame_state fs;"}, {"sha": "99657a9f6d00e704c863c569325d8bd7ad75bff9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529a6471280e26d5ea558b83aa094ac847dbbec9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529a6471280e26d5ea558b83aa094ac847dbbec9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=529a6471280e26d5ea558b83aa094ac847dbbec9", "patch": "@@ -1,19 +1,19 @@\n 2014-01-06  Adam Butcher  <adam@jessamine.co.uk>\n \n \tPR c++/59635\n-\t* cp/lambda.c (maybe_add_lambda_conv_op): Handle marking conversion\n+\t* lambda.c (maybe_add_lambda_conv_op): Handle marking conversion\n \tfunction as unimplemented for generic lambdas with varargs.\n \n \tPR c++/59636\n-\t* cp/parser.c (cp_parser_template_parameter): Early out with\n+\t* parser.c (cp_parser_template_parameter): Early out with\n \terror_mark_node if parameter declaration was not parsed.\n \n \tPR c++/59629\n-\t* cp/parser.c (cp_parser_lambda_expression): Save/reset/restore\n+\t* parser.c (cp_parser_lambda_expression): Save/reset/restore\n \tauto_is_implicit_function_template_parm_p around lambda body.\n \n \tPR c++/59638\n-\t* cp/parser.c (cp_parser_init_declarator): Undo fully implicit\n+\t* parser.c (cp_parser_init_declarator): Undo fully implicit\n \ttemplate parameter list when declarator is not a function.\n \n 2014-01-03  Marc Glisse  <marc.glisse@inria.fr>"}, {"sha": "b5a996f610b6e75d517acfec4c01693661c11cbe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529a6471280e26d5ea558b83aa094ac847dbbec9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529a6471280e26d5ea558b83aa094ac847dbbec9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=529a6471280e26d5ea558b83aa094ac847dbbec9", "patch": "@@ -1,3 +1,8 @@\n+2014-01-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/59644\n+\t* gcc.target/i386/pr59644.c: New test.\n+\n 2014-01-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/57773"}, {"sha": "96006b3e338d7c563123ac0ddc73243da941cf27", "filename": "gcc/testsuite/gcc.target/i386/pr59644.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529a6471280e26d5ea558b83aa094ac847dbbec9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59644.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529a6471280e26d5ea558b83aa094ac847dbbec9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59644.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59644.c?ref=529a6471280e26d5ea558b83aa094ac847dbbec9", "patch": "@@ -0,0 +1,42 @@\n+/* PR target/59644 */\n+/* { dg-do run { target lp64 } } */\n+/* { dg-options \"-O2 -ffreestanding -mno-sse -mpreferred-stack-boundary=3 -maccumulate-outgoing-args -mno-red-zone\" } */\n+\n+/* This test uses __builtin_trap () instead of e.g. abort,\n+   because due to -mpreferred-stack-boundary=3 it should not call\n+   any library function from within main ().  */\n+\n+#include <stdarg.h>\n+\n+__attribute__((noinline, noclone))\n+int\n+bar (int x, int y, int z, int w, const char *fmt, va_list ap)\n+{\n+  if (x != 1 || y != 2 || z != 3 || w != 4)\n+    __builtin_trap ();\n+  if (fmt[0] != 'f' || fmt[1] != 'o' || fmt[2] != 'o' || fmt[3])\n+    __builtin_trap ();\n+  if (va_arg (ap, int) != 5 || va_arg (ap, int) != 6\n+      || va_arg (ap, long long) != 7LL)\n+    __builtin_trap ();\n+  return 9;\n+}\n+\n+__attribute__((noinline, noclone, optimize (\"Os\")))\n+int\n+foo (const char *fmt, ...)\n+{\n+  va_list ap;\n+  va_start (ap, fmt);\n+  int r = bar (1, 2, 3, 4, fmt, ap);\n+  va_end (ap);\n+  return r;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (\"foo\", 5, 6, 7LL) != 9)\n+    __builtin_trap ();\n+  return 0;\n+}"}]}