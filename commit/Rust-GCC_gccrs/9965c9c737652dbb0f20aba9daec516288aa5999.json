{"sha": "9965c9c737652dbb0f20aba9daec516288aa5999", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk2NWM5YzczNzY1MmRiYjBmMjBhYmE5ZGFlYzUxNjI4OGFhNTk5OQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-09T17:39:18Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-09T17:39:18Z"}, "message": "tree-if-conv.c (add_to_dst_predicate_list): Change the second argument to basic_block.\n\n\t* tree-if-conv.c (add_to_dst_predicate_list): Change the\n\tsecond argument to basic_block.\n\t(tree_if_convert_cond_expr): Update call sites.\n\nFrom-SVN: r90353", "tree": {"sha": "c6d32f8fc1c39274c13d9026bb169f14ab11070a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6d32f8fc1c39274c13d9026bb169f14ab11070a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9965c9c737652dbb0f20aba9daec516288aa5999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9965c9c737652dbb0f20aba9daec516288aa5999", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9965c9c737652dbb0f20aba9daec516288aa5999", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9965c9c737652dbb0f20aba9daec516288aa5999/comments", "author": null, "committer": null, "parents": [{"sha": "49995c8ed16aa7c7dcc12cbf201c1d9fc5f54bf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49995c8ed16aa7c7dcc12cbf201c1d9fc5f54bf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49995c8ed16aa7c7dcc12cbf201c1d9fc5f54bf0"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "54cfd16175ef66fce33d2871244059757d612195", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9965c9c737652dbb0f20aba9daec516288aa5999/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9965c9c737652dbb0f20aba9daec516288aa5999/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9965c9c737652dbb0f20aba9daec516288aa5999", "patch": "@@ -1,3 +1,9 @@\n+2004-11-09  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-if-conv.c (add_to_dst_predicate_list): Change the\n+\tsecond argument to basic_block.\n+\t(tree_if_convert_cond_expr): Update call sites.\n+\n 2004-11-09  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* fold-const.c (pedantic_non_lvalue): Make it static."}, {"sha": "53a20b64f7c592f0186605f69258da526d5bb5a9", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9965c9c737652dbb0f20aba9daec516288aa5999/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9965c9c737652dbb0f20aba9daec516288aa5999/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=9965c9c737652dbb0f20aba9daec516288aa5999", "patch": "@@ -114,7 +114,7 @@ static bool if_convertable_stmt_p (struct loop *, basic_block, tree);\n static bool if_convertable_bb_p (struct loop *, basic_block, bool);\n static bool if_convertable_loop_p (struct loop *, bool);\n static void add_to_predicate_list (basic_block, tree);\n-static tree add_to_dst_predicate_list (struct loop * loop, tree, tree, tree,\n+static tree add_to_dst_predicate_list (struct loop * loop, basic_block, tree, tree,\n \t\t\t\t       block_stmt_iterator *);\n static void clean_predicate_lists (struct loop *loop);\n static basic_block find_phi_replacement_condition (basic_block, tree *,\n@@ -271,14 +271,13 @@ static void\n tree_if_convert_cond_expr (struct loop *loop, tree stmt, tree cond,\n \t\t\t   block_stmt_iterator *bsi)\n {\n-  tree then_clause, else_clause, c, c2, new_cond;\n+  tree c, c2, new_cond;\n+  edge true_edge, false_edge;\n   new_cond = NULL_TREE;\n \n   gcc_assert (TREE_CODE (stmt) == COND_EXPR);\n \n   c = TREE_OPERAND (stmt, 0);\n-  then_clause = TREE_OPERAND (stmt, 1);\n-  else_clause = TREE_OPERAND (stmt, 2);\n \n   /* Create temp. for condition.  */\n   if (!is_gimple_condexpr (c))\n@@ -289,10 +288,13 @@ tree_if_convert_cond_expr (struct loop *loop, tree stmt, tree cond,\n       c = TREE_OPERAND (new_stmt, 0);\n     }\n \n+  extract_true_false_edges_from_block (bb_for_stmt (stmt),\n+ \t\t\t\t       &true_edge, &false_edge);\n+\n   /* Add new condition into destination's predicate list.  */\n \n-  /* If 'c' is true then then_clause is reached.  */\n-  new_cond = add_to_dst_predicate_list (loop, then_clause, cond,\n+  /* If 'c' is true then TRUE_EDGE is taken.  */\n+  new_cond = add_to_dst_predicate_list (loop, true_edge->dest, cond,\n \t\t\t\t\tunshare_expr (c), bsi);\n \n   if (!is_gimple_reg(c) && is_gimple_condexpr (c))\n@@ -303,9 +305,9 @@ tree_if_convert_cond_expr (struct loop *loop, tree stmt, tree cond,\n       c = TREE_OPERAND (new_stmt, 0);\n     }\n \n-  /* If 'c' is false then else_clause is reached.  */\n+  /* If 'c' is false then FALSE_EDGE is taken.  */\n   c2 = invert_truthvalue (unshare_expr (c));\n-  add_to_dst_predicate_list (loop, else_clause, cond, c2, bsi);\n+  add_to_dst_predicate_list (loop, false_edge->dest, cond, c2, bsi);\n \n   /* Now this conditional statement is redundant. Remove it.\n      But, do not remove exit condition! Update exit condition\n@@ -620,19 +622,16 @@ add_to_predicate_list (basic_block bb, tree new_cond)\n   bb->aux = cond;\n }\n \n-/* Add condition COND into DST's predicate list.  PREV_COND is\n+/* Add condition COND into BB's predicate list.  PREV_COND is\n    existing condition.  */\n \n static tree\n-add_to_dst_predicate_list (struct loop * loop, tree dst,\n+add_to_dst_predicate_list (struct loop * loop, basic_block bb,\n \t\t\t   tree prev_cond, tree cond,\n \t\t\t   block_stmt_iterator *bsi)\n {\n-  basic_block bb;\n   tree new_cond = NULL_TREE;\n \n-  gcc_assert (TREE_CODE (dst) == GOTO_EXPR);\n-  bb = label_to_block (TREE_OPERAND (dst, 0));\n   if (!flow_bb_inside_loop_p (loop, bb))\n     return NULL_TREE;\n "}]}