{"sha": "d89fa97ff318b1f892e2629c5a249313872a01b1", "node_id": "C_kwDOANBUbNoAKGQ4OWZhOTdmZjMxOGIxZjg5MmUyNjI5YzVhMjQ5MzEzODcyYTAxYjE", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-07-07T10:15:28Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-07-07T13:18:58Z"}, "message": "lto-plugin: use locking only for selected targets\n\nFor now, support locking only for linux targets that are different from\nriscv* where the target depends on libatomic (and fails during\nbootstrap).\n\n\tPR lto/106170\n\nlto-plugin/ChangeLog:\n\n\t* configure.ac: Configure HAVE_PTHREAD_LOCKING.\n\t* lto-plugin.c (LOCK_SECTION): New.\n\t(UNLOCK_SECTION): New.\n\t(claim_file_handler): Use the newly added macros.\n\t(onload): Likewise.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.", "tree": {"sha": "d061779d7e14099d9b23a52eb8d5704d9883fdaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d061779d7e14099d9b23a52eb8d5704d9883fdaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d89fa97ff318b1f892e2629c5a249313872a01b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89fa97ff318b1f892e2629c5a249313872a01b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d89fa97ff318b1f892e2629c5a249313872a01b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89fa97ff318b1f892e2629c5a249313872a01b1/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fc61fc8da9677db862790a6e522f1e2875096a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc61fc8da9677db862790a6e522f1e2875096a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc61fc8da9677db862790a6e522f1e2875096a7"}], "stats": {"total": 71, "additions": 53, "deletions": 18}, "files": [{"sha": "8eb9c8aa47decdb1609657b104081b91bf90f2bb", "filename": "lto-plugin/config.h.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89fa97ff318b1f892e2629c5a249313872a01b1/lto-plugin%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89fa97ff318b1f892e2629c5a249313872a01b1/lto-plugin%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfig.h.in?ref=d89fa97ff318b1f892e2629c5a249313872a01b1", "patch": "@@ -9,8 +9,8 @@\n /* Define to 1 if you have the <memory.h> header file. */\n #undef HAVE_MEMORY_H\n \n-/* Define to 1 if pthread.h is present. */\n-#undef HAVE_PTHREAD_H\n+/* Define if the system provides pthread locking mechanism. */\n+#undef HAVE_PTHREAD_LOCKING\n \n /* Define to 1 if you have the <stdint.h> header file. */\n #undef HAVE_STDINT_H"}, {"sha": "870e49b2e62c1d9c072011b2289e6d61cd6521b6", "filename": "lto-plugin/configure", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89fa97ff318b1f892e2629c5a249313872a01b1/lto-plugin%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89fa97ff318b1f892e2629c5a249313872a01b1/lto-plugin%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure?ref=d89fa97ff318b1f892e2629c5a249313872a01b1", "patch": "@@ -6011,14 +6011,27 @@ fi\n \n \n # Check for thread headers.\n-ac_fn_c_check_header_mongrel \"$LINENO\" \"pthread.h\" \"ac_cv_header_pthread_h\" \"$ac_includes_default\"\n+use_locking=no\n+\n+case $target in\n+  riscv*)\n+    # do not use locking as pthread depends on libatomic\n+    ;;\n+  *-linux*)\n+    use_locking=yes\n+    ;;\n+esac\n+\n+if test x$use_locking = xyes; then\n+  ac_fn_c_check_header_mongrel \"$LINENO\" \"pthread.h\" \"ac_cv_header_pthread_h\" \"$ac_includes_default\"\n if test \"x$ac_cv_header_pthread_h\" = xyes; then :\n \n-$as_echo \"#define HAVE_PTHREAD_H 1\" >>confdefs.h\n+$as_echo \"#define HAVE_PTHREAD_LOCKING 1\" >>confdefs.h\n \n fi\n \n \n+fi\n \n case `pwd` in\n   *\\ * | *\\\t*)\n@@ -12091,7 +12104,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12094 \"configure\"\n+#line 12107 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12197,7 +12210,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12200 \"configure\"\n+#line 12213 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "18eb4f60b0aade3d7fff1b20ff304d187dafc451", "filename": "lto-plugin/configure.ac", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89fa97ff318b1f892e2629c5a249313872a01b1/lto-plugin%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89fa97ff318b1f892e2629c5a249313872a01b1/lto-plugin%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure.ac?ref=d89fa97ff318b1f892e2629c5a249313872a01b1", "patch": "@@ -88,8 +88,21 @@ AM_CONDITIONAL(LTO_PLUGIN_USE_SYMVER_GNU, [test \"x$lto_plugin_use_symver\" = xgnu\n AM_CONDITIONAL(LTO_PLUGIN_USE_SYMVER_SUN, [test \"x$lto_plugin_use_symver\" = xsun])\n \n # Check for thread headers.\n-AC_CHECK_HEADER(pthread.h,\n-  [AC_DEFINE(HAVE_PTHREAD_H, 1, [Define to 1 if pthread.h is present.])])\n+use_locking=no\n+\n+case $target in\n+  riscv*)\n+    # do not use locking as pthread depends on libatomic\n+    ;;\n+  *-linux*)\n+    use_locking=yes\n+    ;;\n+esac\n+\n+if test x$use_locking = xyes; then\n+  AC_CHECK_HEADER(pthread.h,\n+    [AC_DEFINE(HAVE_PTHREAD_LOCKING, 1, [Define if the system provides pthread locking mechanism.])])\n+fi\n \n AM_PROG_LIBTOOL\n ACX_LT_HOST_FLAGS"}, {"sha": "7927dca60a48570bdaeeb74bf38ba1712167eb77", "filename": "lto-plugin/lto-plugin.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89fa97ff318b1f892e2629c5a249313872a01b1/lto-plugin%2Flto-plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89fa97ff318b1f892e2629c5a249313872a01b1/lto-plugin%2Flto-plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Flto-plugin.c?ref=d89fa97ff318b1f892e2629c5a249313872a01b1", "patch": "@@ -40,11 +40,7 @@ along with this program; see the file COPYING3.  If not see\n \n #ifdef HAVE_CONFIG_H\n #include \"config.h\"\n-#if !HAVE_PTHREAD_H\n-#error POSIX threads are mandatory dependency\n #endif\n-#endif\n-\n #if HAVE_STDINT_H\n #include <stdint.h>\n #endif\n@@ -59,7 +55,9 @@ along with this program; see the file COPYING3.  If not see\n #include <unistd.h>\n #include <fcntl.h>\n #include <sys/types.h>\n+#if HAVE_PTHREAD_LOCKING\n #include <pthread.h>\n+#endif\n #ifdef HAVE_SYS_WAIT_H\n #include <sys/wait.h>\n #endif\n@@ -162,9 +160,17 @@ enum symbol_style\n   ss_uscore,\t/* Underscore prefix all symbols.  */\n };\n \n+#if HAVE_PTHREAD_LOCKING\n /* Plug-in mutex.  */\n static pthread_mutex_t plugin_lock;\n \n+#define LOCK_SECTION pthread_mutex_lock (&plugin_lock)\n+#define UNLOCK_SECTION pthread_mutex_unlock (&plugin_lock)\n+#else\n+#define LOCK_SECTION\n+#define UNLOCK_SECTION\n+#endif\n+\n static char *arguments_file_name;\n static ld_plugin_register_claim_file register_claim_file;\n static ld_plugin_register_all_symbols_read register_all_symbols_read;\n@@ -1270,18 +1276,18 @@ claim_file_handler (const struct ld_plugin_input_file *file, int *claimed)\n \t\t\t      lto_file.symtab.syms);\n       check (status == LDPS_OK, LDPL_FATAL, \"could not add symbols\");\n \n-      pthread_mutex_lock (&plugin_lock);\n+      LOCK_SECTION;\n       num_claimed_files++;\n       claimed_files =\n \txrealloc (claimed_files,\n \t\t  num_claimed_files * sizeof (struct plugin_file_info));\n       claimed_files[num_claimed_files - 1] = lto_file;\n-      pthread_mutex_unlock (&plugin_lock);\n+      UNLOCK_SECTION;\n \n       *claimed = 1;\n     }\n \n-  pthread_mutex_lock (&plugin_lock);\n+  LOCK_SECTION;\n   if (offload_files == NULL)\n     {\n       /* Add dummy item to the start of the list.  */\n@@ -1344,14 +1350,15 @@ claim_file_handler (const struct ld_plugin_input_file *file, int *claimed)\n \toffload_files_last_lto = ofld;\n       num_offload_files++;\n     }\n-  pthread_mutex_unlock (&plugin_lock);\n+\n+  UNLOCK_SECTION;\n \n   goto cleanup;\n \n  err:\n-  pthread_mutex_lock (&plugin_lock);\n+  LOCK_SECTION;\n   non_claimed_files++;\n-  pthread_mutex_unlock (&plugin_lock);\n+  UNLOCK_SECTION;\n   free (lto_file.name);\n \n  cleanup:\n@@ -1429,11 +1436,13 @@ onload (struct ld_plugin_tv *tv)\n   struct ld_plugin_tv *p;\n   enum ld_plugin_status status;\n \n+#if HAVE_PTHREAD_LOCKING\n   if (pthread_mutex_init (&plugin_lock, NULL) != 0)\n     {\n       fprintf (stderr, \"mutex init failed\\n\");\n       abort ();\n     }\n+#endif\n \n   p = tv;\n   while (p->tv_tag)"}]}