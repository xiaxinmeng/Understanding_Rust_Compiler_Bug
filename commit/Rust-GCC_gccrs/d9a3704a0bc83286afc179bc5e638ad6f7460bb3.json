{"sha": "d9a3704a0bc83286afc179bc5e638ad6f7460bb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlhMzcwNGEwYmM4MzI4NmFmYzE3OWJjNWU2MzhhZDZmNzQ2MGJiMw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-11-01T22:49:08Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-11-01T22:49:08Z"}, "message": "tree-ssa-propagate.h (ssa_prop_visit_stmt_fn): Remove typedef.\n\n\t* tree-ssa-propagate.h (ssa_prop_visit_stmt_fn): Remove typedef.\n\t(ssa_prop_visit_phi_fn): Likewise.\n\t(class ssa_propagation_engine): New class to provide an interface\n\tinto ssa_propagate.\n\t* tree-ssa-propagate.c (ssa_prop_visit_stmt): Remove file scoped\n\tvariable.\n\t(ssa_prop_visit_phi): Likewise.\n\t(ssa_propagation_engine::simulate_stmt): Moved into class.\n\tCall visit_phi/visit_stmt from the class rather than via\n\tfile scoped static variables.\n\t(ssa_propagation_engine::simulate_block): Moved into class.\n\t(ssa_propagation_engine::process_ssa_edge_worklist): Similarly.\n\t(ssa_propagation_engine::ssa_propagate): Similarly.  No longer\n\tset file scoped statics for the visit_stmt/visit_phi callbacks.\n\t* tree-complex.c (complex_propagate): New class derived from\n\tssa_propagation_engine.\n\t(complex_propagate::visit_stmt): Renamed from complex_visit_stmt.\n\t(complex_propagate::visit_phi): Renamed from complex_visit_phi.\n\t(tree_lower_complex): Call ssa_propagate via the complex_propagate\n\tclass.\n\t* tree-ssa-ccp.c: (ccp_propagate): New class derived from\n\tssa_propagation_engine.\n\t(ccp_propagate::visit_phi): Renamed from ccp_visit_phi_node.\n\t(ccp_propagate::visit_stmt): Renamed from ccp_visit_stmt.\n\t(do_ssa_ccp): Call ssa_propagate from the ccp_propagate class.\n\t* tree-ssa-copy.c (copy_prop): New class derived from\n\tssa_propagation_engine.\n\t(copy_prop::visit_stmt): Renamed from copy_prop_visit_stmt.\n\t(copy_prop::visit_phi): Renamed from copy_prop_visit_phi_node.\n\t(execute_copy_prop): Call ssa_propagate from the copy_prop class.\n\t* tree-vrp.c (vrp_prop): New class derived from ssa_propagation_engine.\n\t(vrp_prop::visit_stmt): Renamed from vrp_visit_stmt.\n\t(vrp_prop::visit_phi): Renamed from vrp_visit_phi_node.\n\t(execute_vrp): Call ssa_propagate from the vrp_prop class.\n\nFrom-SVN: r254329", "tree": {"sha": "1c17c33dc292c5cbbffe76f1b5fe6839e210688b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c17c33dc292c5cbbffe76f1b5fe6839e210688b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9a3704a0bc83286afc179bc5e638ad6f7460bb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a3704a0bc83286afc179bc5e638ad6f7460bb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9a3704a0bc83286afc179bc5e638ad6f7460bb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a3704a0bc83286afc179bc5e638ad6f7460bb3/comments", "author": null, "committer": null, "parents": [{"sha": "efc04f78d8a0efb66d9f767ce26aa7d01d19cb0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc04f78d8a0efb66d9f767ce26aa7d01d19cb0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc04f78d8a0efb66d9f767ce26aa7d01d19cb0c"}], "stats": {"total": 168, "additions": 123, "deletions": 45}, "files": [{"sha": "3cb4b35664f6c56474e5f686427c3fb1eab87086", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a3704a0bc83286afc179bc5e638ad6f7460bb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a3704a0bc83286afc179bc5e638ad6f7460bb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9a3704a0bc83286afc179bc5e638ad6f7460bb3", "patch": "@@ -1,3 +1,40 @@\n+2017-11-01  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-propagate.h (ssa_prop_visit_stmt_fn): Remove typedef.\n+\t(ssa_prop_visit_phi_fn): Likewise.\n+\t(class ssa_propagation_engine): New class to provide an interface\n+\tinto ssa_propagate.\n+\t* tree-ssa-propagate.c (ssa_prop_visit_stmt): Remove file scoped\n+\tvariable.\n+\t(ssa_prop_visit_phi): Likewise.\n+\t(ssa_propagation_engine::simulate_stmt): Moved into class.\n+\tCall visit_phi/visit_stmt from the class rather than via\n+\tfile scoped static variables.\n+\t(ssa_propagation_engine::simulate_block): Moved into class.\n+\t(ssa_propagation_engine::process_ssa_edge_worklist): Similarly.\n+\t(ssa_propagation_engine::ssa_propagate): Similarly.  No longer\n+\tset file scoped statics for the visit_stmt/visit_phi callbacks.\n+\t* tree-complex.c (complex_propagate): New class derived from\n+\tssa_propagation_engine.\n+\t(complex_propagate::visit_stmt): Renamed from complex_visit_stmt.\n+\t(complex_propagate::visit_phi): Renamed from complex_visit_phi.\n+\t(tree_lower_complex): Call ssa_propagate via the complex_propagate\n+\tclass.\n+\t* tree-ssa-ccp.c: (ccp_propagate): New class derived from\n+\tssa_propagation_engine.\n+\t(ccp_propagate::visit_phi): Renamed from ccp_visit_phi_node.\n+\t(ccp_propagate::visit_stmt): Renamed from ccp_visit_stmt.\n+\t(do_ssa_ccp): Call ssa_propagate from the ccp_propagate class.\n+\t* tree-ssa-copy.c (copy_prop): New class derived from\n+\tssa_propagation_engine.\n+\t(copy_prop::visit_stmt): Renamed from copy_prop_visit_stmt.\n+\t(copy_prop::visit_phi): Renamed from copy_prop_visit_phi_node.\n+\t(execute_copy_prop): Call ssa_propagate from the copy_prop class.\n+\t* tree-vrp.c (vrp_prop): New class derived from ssa_propagation_engine.\n+\t(vrp_prop::visit_stmt): Renamed from vrp_visit_stmt.\n+\t(vrp_prop::visit_phi): Renamed from vrp_visit_phi_node.\n+\t(execute_vrp): Call ssa_propagate from the vrp_prop class.\n+\n 2017-11-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/82778"}, {"sha": "e9e7e2ad92f749c26e0da68a9053fdd5dfed2920", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a3704a0bc83286afc179bc5e638ad6f7460bb3/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a3704a0bc83286afc179bc5e638ad6f7460bb3/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=d9a3704a0bc83286afc179bc5e638ad6f7460bb3", "patch": "@@ -60,6 +60,11 @@ typedef int complex_lattice_t;\n \n #define PAIR(a, b)  ((a) << 2 | (b))\n \n+class complex_propagate : public ssa_propagation_engine\n+{\n+  enum ssa_prop_result visit_stmt (gimple *, edge *, tree *) FINAL OVERRIDE;\n+  enum ssa_prop_result visit_phi (gphi *) FINAL OVERRIDE;\n+};\n \n static vec<complex_lattice_t> complex_lattice_values;\n \n@@ -300,9 +305,9 @@ init_dont_simulate_again (void)\n \n /* Evaluate statement STMT against the complex lattice defined above.  */\n \n-static enum ssa_prop_result\n-complex_visit_stmt (gimple *stmt, edge *taken_edge_p ATTRIBUTE_UNUSED,\n-\t\t    tree *result_p)\n+enum ssa_prop_result\n+complex_propagate::visit_stmt (gimple *stmt, edge *taken_edge_p ATTRIBUTE_UNUSED,\n+\t\t\t       tree *result_p)\n {\n   complex_lattice_t new_l, old_l, op1_l, op2_l;\n   unsigned int ver;\n@@ -395,8 +400,8 @@ complex_visit_stmt (gimple *stmt, edge *taken_edge_p ATTRIBUTE_UNUSED,\n \n /* Evaluate a PHI node against the complex lattice defined above.  */\n \n-static enum ssa_prop_result\n-complex_visit_phi (gphi *phi)\n+enum ssa_prop_result\n+complex_propagate::visit_phi (gphi *phi)\n {\n   complex_lattice_t new_l, old_l;\n   unsigned int ver;\n@@ -1673,7 +1678,8 @@ tree_lower_complex (void)\n   complex_lattice_values.safe_grow_cleared (num_ssa_names);\n \n   init_parameter_lattice_values ();\n-  ssa_propagate (complex_visit_stmt, complex_visit_phi);\n+  class complex_propagate complex_propagate;\n+  complex_propagate.ssa_propagate ();\n \n   complex_variable_components = new int_tree_htab_type (10);\n "}, {"sha": "d4b3623d38e3891acabf3b3de628a2f2cd4406f8", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a3704a0bc83286afc179bc5e638ad6f7460bb3/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a3704a0bc83286afc179bc5e638ad6f7460bb3/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=d9a3704a0bc83286afc179bc5e638ad6f7460bb3", "patch": "@@ -171,6 +171,13 @@ struct ccp_prop_value_t {\n     widest_int mask;\n };\n \n+class ccp_propagate : public ssa_propagation_engine\n+{\n+ public:\n+  enum ssa_prop_result visit_stmt (gimple *, edge *, tree *) FINAL OVERRIDE;\n+  enum ssa_prop_result visit_phi (gphi *) FINAL OVERRIDE;\n+};\n+\n /* Array of propagated constant values.  After propagation,\n    CONST_VAL[I].VALUE holds the constant value for SSA_NAME(I).  If\n    the constant is held in an SSA name representing a memory store\n@@ -1064,8 +1071,8 @@ ccp_lattice_meet (ccp_prop_value_t *val1, ccp_prop_value_t *val2)\n    PHI node is determined calling ccp_lattice_meet with all the arguments\n    of the PHI node that are incoming via executable edges.  */\n \n-static enum ssa_prop_result\n-ccp_visit_phi_node (gphi *phi)\n+enum ssa_prop_result\n+ccp_propagate::visit_phi (gphi *phi)\n {\n   unsigned i;\n   ccp_prop_value_t new_val;\n@@ -2378,8 +2385,8 @@ visit_cond_stmt (gimple *stmt, edge *taken_edge_p)\n    value, set *TAKEN_EDGE_P accordingly.  If STMT produces a varying\n    value, return SSA_PROP_VARYING.  */\n \n-static enum ssa_prop_result\n-ccp_visit_stmt (gimple *stmt, edge *taken_edge_p, tree *output_p)\n+enum ssa_prop_result\n+ccp_propagate::visit_stmt (gimple *stmt, edge *taken_edge_p, tree *output_p)\n {\n   tree def;\n   ssa_op_iter iter;\n@@ -2441,7 +2448,8 @@ do_ssa_ccp (bool nonzero_p)\n   calculate_dominance_info (CDI_DOMINATORS);\n \n   ccp_initialize ();\n-  ssa_propagate (ccp_visit_stmt, ccp_visit_phi_node);\n+  class ccp_propagate ccp_propagate;\n+  ccp_propagate.ssa_propagate ();\n   if (ccp_finalize (nonzero_p || flag_ipa_bit_cp))\n     {\n       todo = (TODO_cleanup_cfg | TODO_update_ssa);"}, {"sha": "9db11e2e8b0aa7560ff19f8091bed32a0c07ca5a", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a3704a0bc83286afc179bc5e638ad6f7460bb3/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a3704a0bc83286afc179bc5e638ad6f7460bb3/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=d9a3704a0bc83286afc179bc5e638ad6f7460bb3", "patch": "@@ -68,6 +68,13 @@ struct prop_value_t {\n     tree value;\n };\n \n+class copy_prop : public ssa_propagation_engine\n+{\n+ public:\n+  enum ssa_prop_result visit_stmt (gimple *, edge *, tree *) FINAL OVERRIDE;\n+  enum ssa_prop_result visit_phi (gphi *) FINAL OVERRIDE;\n+};\n+\n static prop_value_t *copy_of;\n static unsigned n_copy_of;\n \n@@ -263,8 +270,8 @@ copy_prop_visit_cond_stmt (gimple *stmt, edge *taken_edge_p)\n    If the new value produced by STMT is varying, return\n    SSA_PROP_VARYING.  */\n \n-static enum ssa_prop_result\n-copy_prop_visit_stmt (gimple *stmt, edge *taken_edge_p, tree *result_p)\n+enum ssa_prop_result\n+copy_prop::visit_stmt (gimple *stmt, edge *taken_edge_p, tree *result_p)\n {\n   enum ssa_prop_result retval;\n \n@@ -317,8 +324,8 @@ copy_prop_visit_stmt (gimple *stmt, edge *taken_edge_p, tree *result_p)\n /* Visit PHI node PHI.  If all the arguments produce the same value,\n    set it to be the value of the LHS of PHI.  */\n \n-static enum ssa_prop_result\n-copy_prop_visit_phi_node (gphi *phi)\n+enum ssa_prop_result\n+copy_prop::visit_phi (gphi *phi)\n {\n   enum ssa_prop_result retval;\n   unsigned i;\n@@ -601,7 +608,8 @@ static unsigned int\n execute_copy_prop (void)\n {\n   init_copy_prop ();\n-  ssa_propagate (copy_prop_visit_stmt, copy_prop_visit_phi_node);\n+  class copy_prop copy_prop;\n+  copy_prop.ssa_propagate ();\n   if (fini_copy_prop ())\n     return TODO_cleanup_cfg;\n   return 0;"}, {"sha": "90df285aa35322ea8054b783cd8d2704b65888e1", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a3704a0bc83286afc179bc5e638ad6f7460bb3/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a3704a0bc83286afc179bc5e638ad6f7460bb3/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=d9a3704a0bc83286afc179bc5e638ad6f7460bb3", "patch": "@@ -108,10 +108,6 @@\n      [3] Advanced Compiler Design and Implementation,\n \t Steven Muchnick, Morgan Kaufmann, 1997, Section 12.6  */\n \n-/* Function pointers used to parameterize the propagation engine.  */\n-static ssa_prop_visit_stmt_fn ssa_prop_visit_stmt;\n-static ssa_prop_visit_phi_fn ssa_prop_visit_phi;\n-\n /* Worklist of control flow edge destinations.  This contains\n    the CFG order number of the blocks so we can iterate in CFG\n    order by visiting in bit-order.  */\n@@ -217,8 +213,8 @@ add_control_edge (edge e)\n \n /* Simulate the execution of STMT and update the work lists accordingly.  */\n \n-static void\n-simulate_stmt (gimple *stmt)\n+void\n+ssa_propagation_engine::simulate_stmt (gimple *stmt)\n {\n   enum ssa_prop_result val = SSA_PROP_NOT_INTERESTING;\n   edge taken_edge = NULL;\n@@ -234,11 +230,11 @@ simulate_stmt (gimple *stmt)\n \n   if (gimple_code (stmt) == GIMPLE_PHI)\n     {\n-      val = ssa_prop_visit_phi (as_a <gphi *> (stmt));\n+      val = visit_phi (as_a <gphi *> (stmt));\n       output_name = gimple_phi_result (stmt);\n     }\n   else\n-    val = ssa_prop_visit_stmt (stmt, &taken_edge, &output_name);\n+    val = visit_stmt (stmt, &taken_edge, &output_name);\n \n   if (val == SSA_PROP_VARYING)\n     {\n@@ -321,8 +317,8 @@ simulate_stmt (gimple *stmt)\n    when an SSA edge is added to it in simulate_stmt.  Return true if a stmt\n    was simulated.  */\n \n-static void\n-process_ssa_edge_worklist ()\n+void\n+ssa_propagation_engine::process_ssa_edge_worklist (void)\n {\n   /* Process the next entry from the worklist.  */\n   unsigned stmt_uid = bitmap_first_set_bit (ssa_edge_worklist);\n@@ -345,8 +341,8 @@ process_ssa_edge_worklist ()\n /* Simulate the execution of BLOCK.  Evaluate the statement associated\n    with each variable reference inside the block.  */\n \n-static void\n-simulate_block (basic_block block)\n+void\n+ssa_propagation_engine::simulate_block (basic_block block)\n {\n   gimple_stmt_iterator gsi;\n \n@@ -781,19 +777,15 @@ update_call_from_tree (gimple_stmt_iterator *si_p, tree expr)\n     return false;\n }\n \n-\n /* Entry point to the propagation engine.\n \n-   VISIT_STMT is called for every statement visited.\n-   VISIT_PHI is called for every PHI node visited.  */\n+   The VISIT_STMT virtual function is called for every statement\n+   visited and the VISIT_PHI virtual function is called for every PHI\n+   node visited.  */\n \n void\n-ssa_propagate (ssa_prop_visit_stmt_fn visit_stmt,\n-\t       ssa_prop_visit_phi_fn visit_phi)\n+ssa_propagation_engine::ssa_propagate (void)\n {\n-  ssa_prop_visit_stmt = visit_stmt;\n-  ssa_prop_visit_phi = visit_phi;\n-\n   ssa_prop_init ();\n \n   /* Iterate until the worklists are empty.  */"}, {"sha": "cff9e537a4ef1d028647c10303b388fe3e71d152", "filename": "gcc/tree-ssa-propagate.h", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a3704a0bc83286afc179bc5e638ad6f7460bb3/gcc%2Ftree-ssa-propagate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a3704a0bc83286afc179bc5e638ad6f7460bb3/gcc%2Ftree-ssa-propagate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.h?ref=d9a3704a0bc83286afc179bc5e638ad6f7460bb3", "patch": "@@ -62,9 +62,6 @@ enum ssa_prop_result {\n \n \n /* Call-back functions used by the value propagation engine.  */\n-typedef enum ssa_prop_result (*ssa_prop_visit_stmt_fn) (gimple *, edge *,\n-\t\t\t\t\t\t\ttree *);\n-typedef enum ssa_prop_result (*ssa_prop_visit_phi_fn) (gphi *);\n typedef bool (*ssa_prop_fold_stmt_fn) (gimple_stmt_iterator *gsi);\n typedef tree (*ssa_prop_get_value_fn) (tree);\n \n@@ -73,7 +70,6 @@ extern bool valid_gimple_rhs_p (tree);\n extern void move_ssa_defining_stmt_for_defs (gimple *, gimple *);\n extern bool update_gimple_call (gimple_stmt_iterator *, tree, int, ...);\n extern bool update_call_from_tree (gimple_stmt_iterator *, tree);\n-extern void ssa_propagate (ssa_prop_visit_stmt_fn, ssa_prop_visit_phi_fn);\n extern bool stmt_makes_single_store (gimple *);\n extern bool substitute_and_fold (ssa_prop_get_value_fn, ssa_prop_fold_stmt_fn);\n extern bool may_propagate_copy (tree, tree);\n@@ -85,4 +81,27 @@ extern void propagate_tree_value (tree *, tree);\n extern void propagate_tree_value_into_stmt (gimple_stmt_iterator *, tree);\n extern bool replace_uses_in (gimple *stmt, ssa_prop_get_value_fn get_value);\n \n+/* Public interface into the SSA propagation engine.  Clients should inherit\n+   from this class and provide their own visitors.  */\n+\n+class ssa_propagation_engine\n+{\n+ public:\n+\n+  /* Main interface into the propagation engine.  */\n+  void ssa_propagate (void);\n+\n+  /* Virtual functions the clients must provide to visit statements\n+     and phi nodes respectively.  */\n+  virtual enum ssa_prop_result visit_stmt (gimple *, edge *, tree *) = 0;\n+  virtual enum ssa_prop_result visit_phi (gphi *) = 0;\n+\n+ private:\n+  /* Internal implementation details.  */\n+  void simulate_stmt (gimple *stmt);\n+  void process_ssa_edge_worklist (void);\n+  void simulate_block (basic_block);\n+\n+};\n+\n #endif /* _TREE_SSA_PROPAGATE_H  */"}, {"sha": "ca5e969dc6aa7aa36b23c5a5e70abc057995407d", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a3704a0bc83286afc179bc5e638ad6f7460bb3/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a3704a0bc83286afc179bc5e638ad6f7460bb3/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=d9a3704a0bc83286afc179bc5e638ad6f7460bb3", "patch": "@@ -8086,6 +8086,13 @@ extract_range_from_stmt (gimple *stmt, edge *taken_edge_p,\n     vrp_visit_switch_stmt (as_a <gswitch *> (stmt), taken_edge_p);\n }\n \n+class vrp_prop : public ssa_propagation_engine\n+{\n+ public:\n+  enum ssa_prop_result visit_stmt (gimple *, edge *, tree *) FINAL OVERRIDE;\n+  enum ssa_prop_result visit_phi (gphi *) FINAL OVERRIDE;\n+};\n+\n /* Evaluate statement STMT.  If the statement produces a useful range,\n    return SSA_PROP_INTERESTING and record the SSA name with the\n    interesting range into *OUTPUT_P.\n@@ -8095,8 +8102,8 @@ extract_range_from_stmt (gimple *stmt, edge *taken_edge_p,\n \n    If STMT produces a varying value, return SSA_PROP_VARYING.  */\n \n-static enum ssa_prop_result\n-vrp_visit_stmt (gimple *stmt, edge *taken_edge_p, tree *output_p)\n+enum ssa_prop_result\n+vrp_prop::visit_stmt (gimple *stmt, edge *taken_edge_p, tree *output_p)\n {\n   value_range vr = VR_INITIALIZER;\n   tree lhs = gimple_get_lhs (stmt);\n@@ -9187,8 +9194,8 @@ extract_range_from_phi_node (gphi *phi, value_range *vr_result)\n    edges.  If a valid value range can be derived from all the incoming\n    value ranges, set a new range for the LHS of PHI.  */\n \n-static enum ssa_prop_result\n-vrp_visit_phi_node (gphi *phi)\n+enum ssa_prop_result\n+vrp_prop::visit_phi (gphi *phi)\n {\n   tree lhs = PHI_RESULT (phi);\n   value_range vr_result = VR_INITIALIZER;\n@@ -11463,7 +11470,8 @@ execute_vrp (bool warn_array_bounds_p)\n \n   vrp_initialize_lattice ();\n   vrp_initialize ();\n-  ssa_propagate (vrp_visit_stmt, vrp_visit_phi_node);\n+  class vrp_prop vrp_prop;\n+  vrp_prop.ssa_propagate ();\n   vrp_finalize (warn_array_bounds_p);\n \n   /* We must identify jump threading opportunities before we release"}]}