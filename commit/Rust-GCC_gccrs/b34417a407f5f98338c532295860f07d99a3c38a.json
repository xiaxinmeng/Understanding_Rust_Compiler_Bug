{"sha": "b34417a407f5f98338c532295860f07d99a3c38a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM0NDE3YTQwN2Y1Zjk4MzM4YzUzMjI5NTg2MGYwN2Q5OWEzYzM4YQ==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2004-02-11T01:55:29Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-02-11T01:55:29Z"}, "message": "c-common.c (vector_size_helper): Remove; call reconstruct_complex_type() instead.\n\n2004-02-10  Ziemowit Laski  <zlaski@apple.com>\n\n\t* c-common.c (vector_size_helper): Remove; call\n\treconstruct_complex_type() instead.\n\t* tree.c (reconstruct_complex_type): New function\n\t(formerly vector_size_helper() in c-common.c).\n\t(make_vector): Make externally visible.\n\t* tree.h (reconstruct_complex_type, make_vector): Add prototypes.\n\nFrom-SVN: r77632", "tree": {"sha": "75520a1a2cd2e58f1ac74770fc79b469c81ab6fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75520a1a2cd2e58f1ac74770fc79b469c81ab6fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b34417a407f5f98338c532295860f07d99a3c38a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b34417a407f5f98338c532295860f07d99a3c38a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b34417a407f5f98338c532295860f07d99a3c38a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b34417a407f5f98338c532295860f07d99a3c38a/comments", "author": null, "committer": null, "parents": [{"sha": "3d2dbfbb308063e87b67d5ba8e36d25d06416c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d2dbfbb308063e87b67d5ba8e36d25d06416c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d2dbfbb308063e87b67d5ba8e36d25d06416c13"}], "stats": {"total": 109, "additions": 59, "deletions": 50}, "files": [{"sha": "90cad63353144c8dbf4383cfe79baac336035bd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b34417a407f5f98338c532295860f07d99a3c38a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b34417a407f5f98338c532295860f07d99a3c38a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b34417a407f5f98338c532295860f07d99a3c38a", "patch": "@@ -1,3 +1,12 @@\n+2004-02-10  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* c-common.c (vector_size_helper): Remove; call\n+\treconstruct_complex_type() instead.\n+\t* tree.c (reconstruct_complex_type): New function\n+\t(formerly vector_size_helper() in c-common.c).\n+\t(make_vector): Make externally visible.\n+\t* tree.h (reconstruct_complex_type, make_vector): Add prototypes.\n+\n 2004-02-10  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300-protos.h: Add a prototype for"}, {"sha": "184f26e89242ebb84d16f041c995499879c421fa", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b34417a407f5f98338c532295860f07d99a3c38a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b34417a407f5f98338c532295860f07d99a3c38a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b34417a407f5f98338c532295860f07d99a3c38a", "patch": "@@ -784,7 +784,6 @@ static tree handle_nothrow_attribute (tree *, tree, tree, int, bool *);\n static tree handle_cleanup_attribute (tree *, tree, tree, int, bool *);\n static tree handle_warn_unused_result_attribute (tree *, tree, tree, int,\n \t\t\t\t\t\t bool *);\n-static tree vector_size_helper (tree, tree);\n \n static void check_function_nonnull (tree, tree);\n static void check_nonnull_arg (void *, tree, unsigned HOST_WIDE_INT);\n@@ -5246,57 +5245,11 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n     }\n \n   /* Build back pointers if needed.  */\n-  *node = vector_size_helper (*node, new_type);\n+  *node = reconstruct_complex_type (*node, new_type);\n \n   return NULL_TREE;\n }\n \n-/* HACK.  GROSS.  This is absolutely disgusting.  I wish there was a\n-   better way.\n-\n-   If we requested a pointer to a vector, build up the pointers that\n-   we stripped off while looking for the inner type.  Similarly for\n-   return values from functions.\n-\n-   The argument \"type\" is the top of the chain, and \"bottom\" is the\n-   new type which we will point to.  */\n-\n-static tree\n-vector_size_helper (tree type, tree bottom)\n-{\n-  tree inner, outer;\n-\n-  if (POINTER_TYPE_P (type))\n-    {\n-      inner = vector_size_helper (TREE_TYPE (type), bottom);\n-      outer = build_pointer_type (inner);\n-    }\n-  else if (TREE_CODE (type) == ARRAY_TYPE)\n-    {\n-      inner = vector_size_helper (TREE_TYPE (type), bottom);\n-      outer = build_array_type (inner, TYPE_DOMAIN (type));\n-    }\n-  else if (TREE_CODE (type) == FUNCTION_TYPE)\n-    {\n-      inner = vector_size_helper (TREE_TYPE (type), bottom);\n-      outer = build_function_type (inner, TYPE_ARG_TYPES (type));\n-    }\n-  else if (TREE_CODE (type) == METHOD_TYPE)\n-    {\n-      inner = vector_size_helper (TREE_TYPE (type), bottom);\n-      outer = build_method_type_directly (TYPE_METHOD_BASETYPE (type),\n-\t\t\t\t\t  inner, \n-\t\t\t\t\t  TYPE_ARG_TYPES (type));\n-    }\n-  else\n-    return bottom;\n-\n-  TREE_READONLY (outer) = TREE_READONLY (type);\n-  TREE_THIS_VOLATILE (outer) = TREE_THIS_VOLATILE (type);\n-\n-  return outer;\n-}\n-\n /* Handle the \"nonnull\" attribute.  */\n static tree\n handle_nonnull_attribute (tree *node, tree name ATTRIBUTE_UNUSED,"}, {"sha": "c02b1004b917b1285c67c153bb658414e75b73a6", "filename": "gcc/tree.c", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b34417a407f5f98338c532295860f07d99a3c38a/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b34417a407f5f98338c532295860f07d99a3c38a/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b34417a407f5f98338c532295860f07d99a3c38a", "patch": "@@ -106,7 +106,6 @@ static int type_hash_eq (const void *, const void *);\n static hashval_t type_hash_hash (const void *);\n static void print_type_hash_statistics (void);\n static void finish_vector_type (tree);\n-static tree make_vector (enum machine_mode, tree, int);\n static int type_hash_marked_p (const void *);\n \n tree global_trees[TI_MAX];\n@@ -5030,10 +5029,56 @@ build_common_tree_nodes_2 (int short_double)\n   V4DF_type_node = make_vector (V4DFmode, double_type_node, 0);\n }\n \n+/* HACK.  GROSS.  This is absolutely disgusting.  I wish there was a\n+   better way.\n+\n+   If we requested a pointer to a vector, build up the pointers that\n+   we stripped off while looking for the inner type.  Similarly for\n+   return values from functions.\n+\n+   The argument TYPE is the top of the chain, and BOTTOM is the\n+   new type which we will point to.  */\n+\n+tree\n+reconstruct_complex_type (tree type, tree bottom)\n+{\n+  tree inner, outer;\n+\n+  if (POINTER_TYPE_P (type))\n+    {\n+      inner = reconstruct_complex_type (TREE_TYPE (type), bottom);\n+      outer = build_pointer_type (inner);\n+    }\n+  else if (TREE_CODE (type) == ARRAY_TYPE)\n+    {\n+      inner = reconstruct_complex_type (TREE_TYPE (type), bottom);\n+      outer = build_array_type (inner, TYPE_DOMAIN (type));\n+    }\n+  else if (TREE_CODE (type) == FUNCTION_TYPE)\n+    {\n+      inner = reconstruct_complex_type (TREE_TYPE (type), bottom);\n+      outer = build_function_type (inner, TYPE_ARG_TYPES (type));\n+    }\n+  else if (TREE_CODE (type) == METHOD_TYPE)\n+    {\n+      inner = reconstruct_complex_type (TREE_TYPE (type), bottom);\n+      outer = build_method_type_directly (TYPE_METHOD_BASETYPE (type),\n+\t\t\t\t\t  inner, \n+\t\t\t\t\t  TYPE_ARG_TYPES (type));\n+    }\n+  else\n+    return bottom;\n+\n+  TREE_READONLY (outer) = TREE_READONLY (type);\n+  TREE_THIS_VOLATILE (outer) = TREE_THIS_VOLATILE (type);\n+\n+  return outer;\n+}\n+\n /* Returns a vector tree node given a vector mode, the inner type, and\n    the signness.  */\n \n-static tree\n+tree\n make_vector (enum machine_mode mode, tree innertype, int unsignedp)\n {\n   tree t;"}, {"sha": "d8bbb86bac53921c6a0457697feb3587e0ec2953", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b34417a407f5f98338c532295860f07d99a3c38a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b34417a407f5f98338c532295860f07d99a3c38a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b34417a407f5f98338c532295860f07d99a3c38a", "patch": "@@ -2852,6 +2852,8 @@ extern void dump_tree_statistics (void);\n extern void expand_function_end (void);\n extern void expand_function_start (tree, int);\n extern void expand_pending_sizes (tree);\n+extern tree make_vector (enum machine_mode, tree, int);\n+extern tree reconstruct_complex_type (tree, tree);\n \n extern int real_onep (tree);\n extern int real_twop (tree);"}]}