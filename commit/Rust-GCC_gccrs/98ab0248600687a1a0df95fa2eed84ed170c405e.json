{"sha": "98ab0248600687a1a0df95fa2eed84ed170c405e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThhYjAyNDg2MDA2ODdhMWEwZGY5NWZhMmVlZDg0ZWQxNzBjNDA1ZQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-06-01T09:30:18Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-06-01T09:30:18Z"}, "message": "In gcc/objc/: 2011-06-01 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/objc/:\n2011-06-01  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc-act.c (objc_decl_method_attributes): Implement nonnull\n\tattribute for Objective-C methods.\n\nIn gcc/testsuite/:\n2011-06-01  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc.dg/attributes/method-nonnull-1.m: New test.\n\t* obj-c++.dg/attributes/method-nonnull-1.mm: New test.\n\nFrom-SVN: r174520", "tree": {"sha": "67f5d2229b320cfa6954f818d7888459b3ef0993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67f5d2229b320cfa6954f818d7888459b3ef0993"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98ab0248600687a1a0df95fa2eed84ed170c405e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ab0248600687a1a0df95fa2eed84ed170c405e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ab0248600687a1a0df95fa2eed84ed170c405e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ab0248600687a1a0df95fa2eed84ed170c405e/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6807da97b7a1d22a82a48844ccacfbdfcb983ada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6807da97b7a1d22a82a48844ccacfbdfcb983ada", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6807da97b7a1d22a82a48844ccacfbdfcb983ada"}], "stats": {"total": 144, "additions": 144, "deletions": 0}, "files": [{"sha": "c52fcc3ff98043b319fc9fcb0b37889c3d95ce36", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ab0248600687a1a0df95fa2eed84ed170c405e/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ab0248600687a1a0df95fa2eed84ed170c405e/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=98ab0248600687a1a0df95fa2eed84ed170c405e", "patch": "@@ -1,3 +1,8 @@\n+2011-06-01  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-act.c (objc_decl_method_attributes): Implement nonnull\n+\tattribute for Objective-C methods.\n+\n 2011-05-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* config-lang.in (gtfiles): Updated order of files to fix building"}, {"sha": "be65a534f1bd0f8fcb774a40a21e041f61eaa98d", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ab0248600687a1a0df95fa2eed84ed170c405e/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ab0248600687a1a0df95fa2eed84ed170c405e/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=98ab0248600687a1a0df95fa2eed84ed170c405e", "patch": "@@ -5042,6 +5042,48 @@ objc_decl_method_attributes (tree *node, tree attributes, int flags)\n \t      filtered_attributes = chainon (filtered_attributes,\n \t\t\t\t\t     new_attribute);\n \t    }\n+\t  else if (is_attribute_p (\"nonnull\", name))\n+\t    {\n+\t      /* We need to fixup all the argument indexes by adding 2\n+\t\t for the two hidden arguments of an Objective-C method\n+\t\t invocation, similat to what we do above for the\n+\t\t \"format\" attribute.  */\n+\t      /* FIXME: This works great in terms of implementing the\n+\t\t functionality, but the warnings that are produced by\n+\t\t nonnull do mention the argument index (while the\n+\t\t format ones don't).  For example, you could get\n+\t\t \"warning: null argument where non-null required\n+\t\t (argument 3)\".  Now in that message, \"argument 3\"\n+\t\t includes the 2 hidden arguments; it would be much\n+\t\t more friendly to call it \"argument 1\", as that would\n+\t\t be consistent with __attribute__ ((nonnnull (1))).\n+\t\t To do this, we'd need to have the C family code that\n+\t\t checks the arguments know about adding/removing 2 to\n+\t\t the argument index ... or alternatively we could\n+\t\t maybe store the \"printable\" argument index in\n+\t\t addition to the actual argument index ?  Some\n+\t\t refactoring is needed to do this elegantly.  */\n+\t      tree new_attribute = copy_node (attribute);\n+\t      tree argument = TREE_VALUE (attribute);\n+\t      while (argument != NULL_TREE)\n+\t\t{\n+\t\t  /* Get the value of the argument and add 2.  */\n+\t\t  tree number = TREE_VALUE (argument);\n+\t\t  if (number\n+\t\t      && TREE_CODE (number) == INTEGER_CST\n+\t\t      && TREE_INT_CST_HIGH (number) == 0\n+\t\t      && TREE_INT_CST_LOW (number) != 0)\n+\t\t    {\n+\t\t      TREE_VALUE (argument)\n+\t\t\t= build_int_cst (integer_type_node,\n+\t\t\t\t\t TREE_INT_CST_LOW (number) + 2);\n+\t\t    }\n+\t\t  argument = TREE_CHAIN (argument);\n+\t\t}\n+\n+\t      filtered_attributes = chainon (filtered_attributes,\n+\t\t\t\t\t     new_attribute);\n+\t    }\n \t  else\n \t    warning (OPT_Wattributes, \"%qE attribute directive ignored\", name);\n \t}"}, {"sha": "3a0371bb4869fdc4c89b23cc1b937c872724b294", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ab0248600687a1a0df95fa2eed84ed170c405e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ab0248600687a1a0df95fa2eed84ed170c405e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98ab0248600687a1a0df95fa2eed84ed170c405e", "patch": "@@ -1,3 +1,8 @@\n+2011-06-01  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/attributes/method-nonnull-1.m: New test.\n+\t* obj-c++.dg/attributes/method-nonnull-1.mm: New test.\t\n+\n 2011-05-31  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "c554894b228e78d66d6d936a89395423be1d333e", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-nonnull-1.mm", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ab0248600687a1a0df95fa2eed84ed170c405e/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-nonnull-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ab0248600687a1a0df95fa2eed84ed170c405e/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-nonnull-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-nonnull-1.mm?ref=98ab0248600687a1a0df95fa2eed84ed170c405e", "patch": "@@ -0,0 +1,46 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, May 2011.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+#include <objc/objc.h>\n+#include <stdlib.h>\n+\n+@interface MyArray\n+{\n+  Class isa;\n+} \n++ (void) addObject: (id)object __attribute__ ((nonnull));\n+- (void) addObject: (id)object __attribute__ ((nonnull));\n+\n++ (void) insertObject: (id)object  atIndex: (size_t)index __attribute__ ((nonnull (1)));\n+- (void) insertObject: (id)object  atIndex: (size_t)index __attribute__ ((nonnull (1)));\n+\n++ (void) insertObject: (id)object  atIndex: (size_t)index  andObject: (id)anotherObject  atIndex: (size_t)anotherIndex __attribute__ ((nonnull (1, 3)));\n+- (void) insertObject: (id)object  atIndex: (size_t)index  andObject: (id)anotherObject  atIndex: (size_t)anotherIndex __attribute__ ((nonnull (1, 3)));\n+\n+/* Test the behaviour with invalid code.  */\n++ (void) removeObject: (id)object __attribute__ ((nonnull (0))); /* { dg-error \"out-of-range\" } */\n+- (void) removeObject: (id)object __attribute__ ((nonnull (0))); /* { dg-error \"out-of-range\" } */\n+\n++ (void) removeObject: (id)object __attribute__ ((nonnull (2))); /* { dg-error \"out-of-range\" } */\n+- (void) removeObject: (id)object __attribute__ ((nonnull (2))); /* { dg-error \"out-of-range\" } */\n+\n++ (void) removeObjectAtIndex: (size_t)object __attribute__ ((nonnull (1))); /* { dg-error \"non-pointer operand\" } */\n+- (void) removeObjectAtIndex: (size_t)object __attribute__ ((nonnull (1))); /* { dg-error \"non-pointer operand\" } */\n+\n++ (void) removeObject: (id)object __attribute__ ((nonnull (MyArray))); /* { dg-error \"\" } */\n+- (void) removeObject: (id)object __attribute__ ((nonnull (MyArray))); /* { dg-error \"\" } */\n+@end\n+\n+void test (MyArray *object)\n+{\n+  [object addObject: object];\n+  [object addObject: nil]; /* { dg-warning \"null argument where non-null required\" } */\n+\n+  [object insertObject: object atIndex: 4];\n+  [object insertObject: nil    atIndex: 4]; /* { dg-warning \"null argument where non-null required\" } */\n+\n+  [object insertObject: object atIndex: 2 andObject: object atIndex: 3];\n+  [object insertObject: nil    atIndex: 2 andObject: object atIndex: 3]; /* { dg-warning \"null argument where non-null required\" } */\n+  [object insertObject: object atIndex: 2 andObject: nil    atIndex: 3]; /* { dg-warning \"null argument where non-null required\" } */\n+}"}, {"sha": "49003242d761723616d81d20c3d091b7e2bf2f52", "filename": "gcc/testsuite/objc.dg/attributes/method-nonnull-1.m", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ab0248600687a1a0df95fa2eed84ed170c405e/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-nonnull-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ab0248600687a1a0df95fa2eed84ed170c405e/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-nonnull-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-nonnull-1.m?ref=98ab0248600687a1a0df95fa2eed84ed170c405e", "patch": "@@ -0,0 +1,46 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, May 2011.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+#include <objc/objc.h>\n+#include <stdlib.h>\n+\n+@interface MyArray\n+{\n+  Class isa;\n+} \n++ (void) addObject: (id)object __attribute__ ((nonnull));\n+- (void) addObject: (id)object __attribute__ ((nonnull));\n+\n++ (void) insertObject: (id)object  atIndex: (size_t)index __attribute__ ((nonnull (1)));\n+- (void) insertObject: (id)object  atIndex: (size_t)index __attribute__ ((nonnull (1)));\n+\n++ (void) insertObject: (id)object  atIndex: (size_t)index  andObject: (id)anotherObject  atIndex: (size_t)anotherIndex __attribute__ ((nonnull (1, 3)));\n+- (void) insertObject: (id)object  atIndex: (size_t)index  andObject: (id)anotherObject  atIndex: (size_t)anotherIndex __attribute__ ((nonnull (1, 3)));\n+\n+/* Test the behaviour with invalid code.  */\n++ (void) removeObject: (id)object __attribute__ ((nonnull (0))); /* { dg-error \"out-of-range\" } */\n+- (void) removeObject: (id)object __attribute__ ((nonnull (0))); /* { dg-error \"out-of-range\" } */\n+\n++ (void) removeObject: (id)object __attribute__ ((nonnull (2))); /* { dg-error \"out-of-range\" } */\n+- (void) removeObject: (id)object __attribute__ ((nonnull (2))); /* { dg-error \"out-of-range\" } */\n+\n++ (void) removeObjectAtIndex: (size_t)object __attribute__ ((nonnull (1))); /* { dg-error \"non-pointer operand\" } */\n+- (void) removeObjectAtIndex: (size_t)object __attribute__ ((nonnull (1))); /* { dg-error \"non-pointer operand\" } */\n+\n++ (void) removeObject: (id)object __attribute__ ((nonnull (MyArray))); /* { dg-error \"invalid operand\" } */\n+- (void) removeObject: (id)object __attribute__ ((nonnull (MyArray))); /* { dg-error \"invalid operand\" } */\n+@end\n+\n+void test (MyArray *object)\n+{\n+  [object addObject: object];\n+  [object addObject: nil]; /* { dg-warning \"null argument where non-null required\" } */\n+\n+  [object insertObject: object atIndex: 4];\n+  [object insertObject: nil    atIndex: 4]; /* { dg-warning \"null argument where non-null required\" } */\n+\n+  [object insertObject: object atIndex: 2 andObject: object atIndex: 3];\n+  [object insertObject: nil    atIndex: 2 andObject: object atIndex: 3]; /* { dg-warning \"null argument where non-null required\" } */\n+  [object insertObject: object atIndex: 2 andObject: nil    atIndex: 3]; /* { dg-warning \"null argument where non-null required\" } */\n+}"}]}