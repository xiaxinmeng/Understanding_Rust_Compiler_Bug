{"sha": "b3728b0e0e28b8cf7a3f4f2fe7bd85f21a722ad3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM3MjhiMGUwZTI4YjhjZjdhM2Y0ZjJmZTdiZDg1ZjIxYTcyMmFkMw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-12-17T02:25:39Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-12-17T02:25:39Z"}, "message": "(nonzero_bits): Ifdef out calls to num_sign_bit_copies.\n\nAdd dummy define/undef for num_sign_bit_copies.\n\nFrom-SVN: r13314", "tree": {"sha": "3af77f2397ce8badc67a08ed1914ea14589f82b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3af77f2397ce8badc67a08ed1914ea14589f82b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3728b0e0e28b8cf7a3f4f2fe7bd85f21a722ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3728b0e0e28b8cf7a3f4f2fe7bd85f21a722ad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3728b0e0e28b8cf7a3f4f2fe7bd85f21a722ad3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3728b0e0e28b8cf7a3f4f2fe7bd85f21a722ad3/comments", "author": null, "committer": null, "parents": [{"sha": "7b1bcb4940fcbb05d359df63900e089120c3addb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b1bcb4940fcbb05d359df63900e089120c3addb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b1bcb4940fcbb05d359df63900e089120c3addb"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "57100b94fce288e7134d5a99f2b3e30445dd8db2", "filename": "gcc/combine.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3728b0e0e28b8cf7a3f4f2fe7bd85f21a722ad3/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3728b0e0e28b8cf7a3f4f2fe7bd85f21a722ad3/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=b3728b0e0e28b8cf7a3f4f2fe7bd85f21a722ad3", "patch": "@@ -7072,6 +7072,13 @@ simplify_and_const_int (x, mode, varop, constop)\n   return x;\n }\n \f\n+/* We let num_sign_bit_copies recur into nonzero_bits as that is useful.\n+   We don't let nonzero_bits recur into num_sign_bit_copies, because that\n+   is less useful.  We can't allow both, because that results in exponential\n+   run time recusion.  There is a nullstone testcase that triggered\n+   this.  This macro avoids accidental uses of num_sign_bit_copies.  */\n+#define num_sign_bit_copies()\n+\n /* Given an expression, X, compute which bits in X can be non-zero.\n    We don't care about bits outside of those defined in MODE.\n \n@@ -7246,18 +7253,26 @@ nonzero_bits (x, mode)\n       break;\n \n     case NEG:\n+#if 0\n+      /* Disabled to avoid exponential mutual recursion between nonzero_bits\n+\t and num_sign_bit_copies.  */\n       if (num_sign_bit_copies (XEXP (x, 0), GET_MODE (x))\n \t  == GET_MODE_BITSIZE (GET_MODE (x)))\n \tnonzero = 1;\n+#endif\n \n       if (GET_MODE_SIZE (GET_MODE (x)) < mode_width)\n \tnonzero |= (GET_MODE_MASK (mode) & ~ GET_MODE_MASK (GET_MODE (x)));\n       break;\n \n     case ABS:\n+#if 0\n+      /* Disabled to avoid exponential mutual recursion between nonzero_bits\n+\t and num_sign_bit_copies.  */\n       if (num_sign_bit_copies (XEXP (x, 0), GET_MODE (x))\n \t  == GET_MODE_BITSIZE (GET_MODE (x)))\n \tnonzero = 1;\n+#endif\n       break;\n \n     case TRUNCATE:\n@@ -7456,6 +7471,9 @@ nonzero_bits (x, mode)\n \n   return nonzero;\n }\n+\n+/* See the macro definition above.  */\n+#undef num_sign_bit_copies\n \f\n /* Return the number of bits at the high-order end of X that are known to\n    be equal to the sign bit.  X will be used in mode MODE; if MODE is"}]}