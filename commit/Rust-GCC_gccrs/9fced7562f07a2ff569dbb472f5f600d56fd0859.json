{"sha": "9fced7562f07a2ff569dbb472f5f600d56fd0859", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZjZWQ3NTYyZjA3YTJmZjU2OWRiYjQ3MmY1ZjYwMGQ1NmZkMDg1OQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2012-02-24T21:16:26Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2012-02-24T21:16:26Z"}, "message": "simulate-thread.gdb: Use return value from simulate_thread_wrapper_other_threads\n\n\n\t* gcc.dg/simulate-thread/simulate-thread.gdb: Use return value from\n\tsimulate_thread_wrapper_other_threads\n\t* gcc.dg/simulate-thread/atomic-load-int128.c (simulate_thread_main):\n\tMove initialization of 'value' to main().\n\t(main): Initialize 'value';\n\t* gcc.dg/simulate-thread/speculative-store.c\n\t(simulate_thread_step_verify): Return 0 when successful.\n\t* gcc.dg/simulate-thread/simulate-thread.h (HOSTILE_THREAD_THRESHOLD):\n\tReduce threshold.\n\t(INSN_COUNT_THRESHOLD): New.  Instruction limit to terminate test.\n\t(simulate_thread_wrapper_other_threads): Return a success/fail value\n\tand issue an error if the instruction count threshold is exceeded.\n\nFrom-SVN: r184564", "tree": {"sha": "a0b3d285254aa38e8077dc9baf77a4aca28fda76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0b3d285254aa38e8077dc9baf77a4aca28fda76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fced7562f07a2ff569dbb472f5f600d56fd0859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fced7562f07a2ff569dbb472f5f600d56fd0859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fced7562f07a2ff569dbb472f5f600d56fd0859", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fced7562f07a2ff569dbb472f5f600d56fd0859/comments", "author": null, "committer": null, "parents": [{"sha": "15498cfa4ee495c125aaf847a77bf1001505178b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15498cfa4ee495c125aaf847a77bf1001505178b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15498cfa4ee495c125aaf847a77bf1001505178b"}], "stats": {"total": 69, "additions": 53, "deletions": 16}, "files": [{"sha": "ec95bcdf13e6ab1244055d4027b928c1c6b36153", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fced7562f07a2ff569dbb472f5f600d56fd0859/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fced7562f07a2ff569dbb472f5f600d56fd0859/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9fced7562f07a2ff569dbb472f5f600d56fd0859", "patch": "@@ -1,3 +1,18 @@\n+2012-02-24  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/simulate-thread/simulate-thread.gdb: Use return value from\n+\tsimulate_thread_wrapper_other_threads\n+\t* gcc.dg/simulate-thread/atomic-load-int128.c (simulate_thread_main):\n+\tMove initialization of 'value' to main().\n+\t(main): Initialize 'value';\n+\t* gcc.dg/simulate-thread/speculative-store.c\n+\t(simulate_thread_step_verify): Return 0 when successful.\n+\t* gcc.dg/simulate-thread/simulate-thread.h (HOSTILE_THREAD_THRESHOLD):\n+\tReduce threshold.\n+\t(INSN_COUNT_THRESHOLD): New.  Instruction limit to terminate test.\n+\t(simulate_thread_wrapper_other_threads): Return a success/fail value\n+\tand issue an error if the instruction count threshold is exceeded.\n+\n 2012-02-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/50580"}, {"sha": "651e76a95a599a65ebf794a2b13dc8da0acc4e58", "filename": "gcc/testsuite/gcc.dg/simulate-thread/atomic-load-int128.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fced7562f07a2ff569dbb472f5f600d56fd0859/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fatomic-load-int128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fced7562f07a2ff569dbb472f5f600d56fd0859/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fatomic-load-int128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fatomic-load-int128.c?ref=9fced7562f07a2ff569dbb472f5f600d56fd0859", "patch": "@@ -105,9 +105,6 @@ void simulate_thread_main()\n {\n   int x;\n \n-  /* Make sure value starts with an atomic value now.  */\n-  __atomic_store_n (&value, ret, __ATOMIC_SEQ_CST);\n-\n   /* Execute loads with value changing at various cyclic values.  */\n   for (table_cycle_size = 16; table_cycle_size > 4 ; table_cycle_size--)\n     {\n@@ -126,6 +123,10 @@ void simulate_thread_main()\n main()\n {\n   fill_table ();\n+\n+  /* Make sure value starts with an atomic value from the table.  */\n+  __atomic_store_n (&value, table[0], __ATOMIC_SEQ_CST);\n+\n   simulate_thread_main ();\n   simulate_thread_done ();\n   return 0;"}, {"sha": "93f60c345cf15f0124b9c97570be02d190fa5241", "filename": "gcc/testsuite/gcc.dg/simulate-thread/simulate-thread.gdb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fced7562f07a2ff569dbb472f5f600d56fd0859/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fsimulate-thread.gdb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fced7562f07a2ff569dbb472f5f600d56fd0859/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fsimulate-thread.gdb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fsimulate-thread.gdb?ref=9fced7562f07a2ff569dbb472f5f600d56fd0859", "patch": "@@ -5,7 +5,7 @@ run\n \n set $ret = 0\n while (simulate_thread_fini != 1) && (! $ret)\n-  call simulate_thread_wrapper_other_threads()\n+  set $ret |= simulate_thread_wrapper_other_threads()\n   stepi\n   set $ret |= simulate_thread_step_verify()\n end"}, {"sha": "22c05084ee74e469c2e6e02f35038ec78b402ea8", "filename": "gcc/testsuite/gcc.dg/simulate-thread/simulate-thread.h", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fced7562f07a2ff569dbb472f5f600d56fd0859/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fsimulate-thread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fced7562f07a2ff569dbb472f5f600d56fd0859/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fsimulate-thread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fsimulate-thread.h?ref=9fced7562f07a2ff569dbb472f5f600d56fd0859", "patch": "@@ -37,7 +37,7 @@ simulate_thread_done ()\n    infinite loop to be avoided.\n \n    If the testcase defines HOSTILE_PAUSE_ERROR, then it will be\n-   considered an RUNTIME FAILURE if the hostile pause is triggered.\n+   considered a RUNTIME FAILURE if the hostile pause is triggered.\n    This will allow to test for guaranteed forward progress routines.\n \n    If the default values for HOSTILE_THREAD_THRESHOLD or\n@@ -50,17 +50,29 @@ simulate_thread_done ()\n    hostile condition is interferring.  */\n \n   \n-/* Define the threshold to start pausing the hostile thread.  */\n+/* Define the threshold instruction count to start pausing the hostile \n+   thread.  To avoid huge potential log files when things are not going well,\n+   set this number very low.  If a test specifically requires that the forward\n+   progress guarantee is made, this number should be raised by the testcase. */\n #if !defined (HOSTILE_THREAD_THRESHOLD)\n-#define HOSTILE_THREAD_THRESHOLD \t500\n+#define HOSTILE_THREAD_THRESHOLD \t50\n #endif\n \n /* Define the length of pause in cycles for the hostile thread to pause to\n-   allow forward progress to be made.  */\n+   allow forward progress to be made.  If this number is too low, a \n+   compare_and_swap loop may not have time to finish, especially on a\n+   128 bit operation. */\n #if !defined (HOSTILE_THREAD_PAUSE)\n #define HOSTILE_THREAD_PAUSE\t20\n #endif\n \n+/* Define the number of instructions which are allowed to be executed before\n+   the testcase is deemed to fail.  This is primarily to avoid huge log files\n+   when a testcase goes into an infinte loop.  */\n+#if !defined (INSN_COUNT_THRESHOLD)\n+#define INSN_COUNT_THRESHOLD\t10000\n+#endif\n+\n void simulate_thread_other_threads (void);\n int simulate_thread_final_verify (void);\n \n@@ -71,26 +83,34 @@ static int simulate_thread_hostile_pause = 0;\n    is reached, the other_thread process is paused for\n    HOSTILE_THREAD_PAUSE cycles before resuming, and the counters start\n    again.  */\n-void\n+int\n simulate_thread_wrapper_other_threads()\n {\n-  static int count = 0;\n-  static int pause = 0;\n+  static int insn_count = 0;\n+  static int hostile_count = 0;\n+  static int hostile_pause = 0;\n+\n+  if (++insn_count >= INSN_COUNT_THRESHOLD)\n+    {\n+      printf (\"FAIL: Testcase exceeded maximum instruction count threshold\\n\");\n+      return 1;\n+    }\n \n-  if (++count >= HOSTILE_THREAD_THRESHOLD)\n+  if (++hostile_count >= HOSTILE_THREAD_THRESHOLD)\n     {\n       if (!simulate_thread_hostile_pause)\n         simulate_thread_hostile_pause = 1;\n \n       /* Count cycles before calling the hostile thread again.  */\n-      if (pause++ < HOSTILE_THREAD_PAUSE)\n-\treturn;\n+      if (hostile_pause++ < HOSTILE_THREAD_PAUSE)\n+\treturn 0;\n \n       /* Reset the pause counter, as well as the thread counter.  */\n-      pause = 0;\n-      count = 0;\n+      hostile_pause = 0;\n+      hostile_count = 0;\n     }\n   simulate_thread_other_threads ();\n+  return 0;\n }\n \n "}, {"sha": "ff9d71e08754c24af9bbf551f0d6851f56ecfbeb", "filename": "gcc/testsuite/gcc.dg/simulate-thread/speculative-store.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fced7562f07a2ff569dbb472f5f600d56fd0859/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fspeculative-store.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fced7562f07a2ff569dbb472f5f600d56fd0859/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fspeculative-store.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fspeculative-store.c?ref=9fced7562f07a2ff569dbb472f5f600d56fd0859", "patch": "@@ -24,6 +24,7 @@ int simulate_thread_step_verify()\n       printf(\"FAIL: global variable was assigned to.  \\n\");\n       return 1;\n     }\n+  return 0;\n }\n \n int simulate_thread_final_verify()"}]}