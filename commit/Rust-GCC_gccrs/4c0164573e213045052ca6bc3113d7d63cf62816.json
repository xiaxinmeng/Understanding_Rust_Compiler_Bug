{"sha": "4c0164573e213045052ca6bc3113d7d63cf62816", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMwMTY0NTczZTIxMzA0NTA1MmNhNmJjMzExM2Q3ZDYzY2Y2MjgxNg==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2019-05-12T08:26:18Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2019-05-12T08:26:18Z"}, "message": "fortran: C++ support for generating C prototypes\n\nWhen generating C prototypes for Fortran procedures with the\n-fc-prototypes and -fc-prototypes-external options, print a snippet\ndefining macros for complex types, and add C++ support by suppressing\nmangling.\n\nfortran/ChangeLog:\n\n2019-05-12  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* dump-parse-tree.c (get_c_type_name): Use macros for complex type\n\tnames.\n\t* parse.c (gfc_parse_file): Define complex macros, add CPP support\n\twhen printing C prototypes.\n\nFrom-SVN: r271106", "tree": {"sha": "99ca3a0763fbd7cf9794ed6e1f3e21c43d3e7968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99ca3a0763fbd7cf9794ed6e1f3e21c43d3e7968"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c0164573e213045052ca6bc3113d7d63cf62816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c0164573e213045052ca6bc3113d7d63cf62816", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c0164573e213045052ca6bc3113d7d63cf62816", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c0164573e213045052ca6bc3113d7d63cf62816/comments", "author": null, "committer": null, "parents": [{"sha": "1fa26ccd67ea2b458f4fb9ba8779c11059353d0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa26ccd67ea2b458f4fb9ba8779c11059353d0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fa26ccd67ea2b458f4fb9ba8779c11059353d0f"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "512e6322f3a2b991d24ba1f4a3a6501b7ac8a2af", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c0164573e213045052ca6bc3113d7d63cf62816/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c0164573e213045052ca6bc3113d7d63cf62816/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4c0164573e213045052ca6bc3113d7d63cf62816", "patch": "@@ -1,3 +1,10 @@\n+2019-05-12  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* dump-parse-tree.c (get_c_type_name): Use macros for complex type\n+\tnames.\n+\t* parse.c (gfc_parse_file): Define complex macros, add CPP support\n+\twhen printing C prototypes.\n+\n 2019-05-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/61968"}, {"sha": "41b2c88265c18872241c3105c9d66837b8f5df4a", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c0164573e213045052ca6bc3113d7d63cf62816/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c0164573e213045052ca6bc3113d7d63cf62816/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=4c0164573e213045052ca6bc3113d7d63cf62816", "patch": "@@ -3143,11 +3143,11 @@ get_c_type_name (gfc_typespec *ts, gfc_array_spec *as, const char **pre,\n \t  else if (strcmp (*type_name, \"size_t\") == 0)\n \t    *type_name = \"ssize_t\";\n \t  else if (strcmp (*type_name, \"float_complex\") == 0)\n-\t    *type_name = \"float complex\";\n+\t    *type_name = \"__GFORTRAN_FLOAT_COMPLEX\";\n \t  else if (strcmp (*type_name, \"double_complex\") == 0)\n-\t    *type_name = \"double complex\";\n+\t    *type_name = \"__GFORTRAN_DOUBLE_COMPLEX\";\n \t  else if (strcmp (*type_name, \"long_double_complex\") == 0)\n-\t    *type_name = \"long double complex\";\n+\t    *type_name = \"__GFORTRAN_LONG_DOUBLE_COMPLEX\";\n \n \t  ret = T_OK;\n \t}\n@@ -3166,11 +3166,11 @@ get_c_type_name (gfc_typespec *ts, gfc_array_spec *as, const char **pre,\n \t\t  else if (strcmp (*type_name, \"size_t\") == 0)\n \t\t    *type_name = \"ssize_t\";\n \t\t  else if (strcmp (*type_name, \"float_complex\") == 0)\n-\t\t    *type_name = \"float complex\";\n+\t\t    *type_name = \"__GFORTRAN_FLOAT_COMPLEX\";\n \t\t  else if (strcmp (*type_name, \"double_complex\") == 0)\n-\t\t    *type_name = \"double complex\";\n+\t\t    *type_name = \"__GFORTRAN_DOUBLE_COMPLEX\";\n \t\t  else if (strcmp (*type_name, \"long_double_complex\") == 0)\n-\t\t    *type_name = \"long double complex\";\n+\t\t    *type_name = \"__GFORTRAN_LONG_DOUBLE_COMPLEX\";\n \n \t\t  ret = T_WARN;\n \t\t  break;"}, {"sha": "155534cd8224d86f9088db0ecdc82dd4df55428e", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c0164573e213045052ca6bc3113d7d63cf62816/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c0164573e213045052ca6bc3113d7d63cf62816/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=4c0164573e213045052ca6bc3113d7d63cf62816", "patch": "@@ -6331,6 +6331,24 @@ gfc_parse_file (void)\n       }\n \n   /* Dump C prototypes.  */\n+  if (flag_c_prototypes || flag_c_prototypes_external)\n+    {\n+      fprintf (stdout,\n+\t       _(\"#include <stddef.h>\\n\"\n+\t\t \"#ifdef __cplusplus\\n\"\n+\t\t \"#include <complex>\\n\"\n+\t\t \"#define __GFORTRAN_FLOAT_COMPLEX std::complex<float>\\n\"\n+\t\t \"#define __GFORTRAN_DOUBLE_COMPLEX std::complex<double>\\n\"\n+\t\t \"#define __GFORTRAN_LONG_DOUBLE_COMPLEX std::complex<long double>\\n\"\n+\t\t \"extern \\\"C\\\" {\\n\"\n+\t\t \"#else\\n\"\n+\t\t \"#define __GFORTRAN_FLOAT_COMPLEX float _Complex\\n\"\n+\t\t \"#define __GFORTRAN_DOUBLE_COMPLEX double _Complex\\n\"\n+\t\t \"#define __GFORTRAN_LONG_DOUBLE_COMPLEX long double _Complex\\n\"\n+\t\t \"#endif\\n\\n\"));\n+    }\n+\n+  /* First dump BIND(C) prototypes.  */\n   if (flag_c_prototypes)\n     {\n       for (gfc_current_ns = gfc_global_ns_list; gfc_current_ns;\n@@ -6342,6 +6360,10 @@ gfc_parse_file (void)\n   if (flag_c_prototypes_external)\n     gfc_dump_external_c_prototypes (stdout);\n \n+  if (flag_c_prototypes || flag_c_prototypes_external)\n+    fprintf (stdout,\n+\t     _(\"\\n#ifdef __cplusplus\\n}\\n#endif\\n\"));\n+\n   /* Do the translation.  */\n   translate_all_program_units (gfc_global_ns_list);\n "}]}