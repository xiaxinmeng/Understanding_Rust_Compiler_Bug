{"sha": "f61c92c3908acaeb636aee8c0271339d3e9ec291", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYxYzkyYzM5MDhhY2FlYjYzNmFlZThjMDI3MTMzOWQzZTllYzI5MQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-04T06:07:39Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-04T06:07:39Z"}, "message": "* config/arc/arc.h, config/fr30/fr30.h\n\t(SETUP_INCOMING_VARARGS): Remove the target-independent\n\tcomments.\n\t* doc/tm.texi: Don't mention deprecated target macros.\n\nFrom-SVN: r77221", "tree": {"sha": "334e29b92fbb30ca06380285dafd0d9c8c5849f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/334e29b92fbb30ca06380285dafd0d9c8c5849f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f61c92c3908acaeb636aee8c0271339d3e9ec291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61c92c3908acaeb636aee8c0271339d3e9ec291", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f61c92c3908acaeb636aee8c0271339d3e9ec291", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61c92c3908acaeb636aee8c0271339d3e9ec291/comments", "author": null, "committer": null, "parents": [{"sha": "c35c17c1a482871691f4056dcc5e5b8b597ad4f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c35c17c1a482871691f4056dcc5e5b8b597ad4f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c35c17c1a482871691f4056dcc5e5b8b597ad4f8"}], "stats": {"total": 68, "additions": 10, "deletions": 58}, "files": [{"sha": "52e98f14f2b143ab8f8007570cfb12352a0a68ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61c92c3908acaeb636aee8c0271339d3e9ec291/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61c92c3908acaeb636aee8c0271339d3e9ec291/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f61c92c3908acaeb636aee8c0271339d3e9ec291", "patch": "@@ -1,3 +1,10 @@\n+2004-02-04  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/arc/arc.h, config/fr30/fr30.h\n+\t(SETUP_INCOMING_VARARGS): Remove the target-independent\n+\tcomments.\n+\t* doc/tm.texi: Don't mention deprecated target macros.\n+\n 2004-02-04  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/fr30/fr30.h (FUNCTION_VALUE): Remove the"}, {"sha": "bd0992c832d41d557b4468a8299a89d2c7c2b36d", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61c92c3908acaeb636aee8c0271339d3e9ec291/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61c92c3908acaeb636aee8c0271339d3e9ec291/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=f61c92c3908acaeb636aee8c0271339d3e9ec291", "patch": "@@ -732,33 +732,6 @@ FUNCTION_ARG_PASS_BY_REFERENCE ((CUM), (MODE), (TYPE), (NAMED))\n  ? PARM_BOUNDARY \\\n  : 2 * PARM_BOUNDARY)\n \n-/* This macro offers an alternative\n-   to using `__builtin_saveregs' and defining the macro\n-   `EXPAND_BUILTIN_SAVEREGS'.  Use it to store the anonymous register\n-   arguments into the stack so that all the arguments appear to have\n-   been passed consecutively on the stack.  Once this is done, you\n-   can use the standard implementation of varargs that works for\n-   machines that pass all their arguments on the stack.\n-\n-   The argument ARGS_SO_FAR is the `CUMULATIVE_ARGS' data structure,\n-   containing the values that obtain after processing of the named\n-   arguments.  The arguments MODE and TYPE describe the last named\n-   argument--its machine mode and its data type as a tree node.\n-\n-   The macro implementation should do two things: first, push onto the\n-   stack all the argument registers *not* used for the named\n-   arguments, and second, store the size of the data thus pushed into\n-   the `int'-valued variable whose name is supplied as the argument\n-   PRETEND_SIZE.  The value that you store here will serve as\n-   additional offset for setting up the stack frame.\n-\n-   If the argument NO_RTL is nonzero, it means that the\n-   arguments of the function are being analyzed for the second time.\n-   This happens for an inline function, which is not actually\n-   compiled until the end of the source file.  The macro\n-   `SETUP_INCOMING_VARARGS' should not generate any instructions in\n-   this case.  */\n-\n #define SETUP_INCOMING_VARARGS(ARGS_SO_FAR, MODE, TYPE, PRETEND_SIZE, NO_RTL) \\\n arc_setup_incoming_varargs(&ARGS_SO_FAR, MODE, TYPE, &PRETEND_SIZE, NO_RTL)\n \f"}, {"sha": "8c9841d9b8305ec366cfddb89f194767022e43c6", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61c92c3908acaeb636aee8c0271339d3e9ec291/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61c92c3908acaeb636aee8c0271339d3e9ec291/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=f61c92c3908acaeb636aee8c0271339d3e9ec291", "patch": "@@ -848,34 +848,6 @@ enum reg_class\n /*}}}*/ \f\n /*{{{  Implementing the VARARGS Macros.  */ \n \n-/* This macro offers an alternative to using `__builtin_saveregs' and defining\n-   the macro `EXPAND_BUILTIN_SAVEREGS'.  Use it to store the anonymous register\n-   arguments into the stack so that all the arguments appear to have been\n-   passed consecutively on the stack.  Once this is done, you can use the\n-   standard implementation of varargs that works for machines that pass all\n-   their arguments on the stack.\n-\n-   The argument ARGS_SO_FAR is the `CUMULATIVE_ARGS' data structure, containing\n-   the values that obtain after processing of the named arguments.  The\n-   arguments MODE and TYPE describe the last named argument--its machine mode\n-   and its data type as a tree node.\n-\n-   The macro implementation should do two things: first, push onto the stack\n-   all the argument registers *not* used for the named arguments, and second,\n-   store the size of the data thus pushed into the `int'-valued variable whose\n-   name is supplied as the argument PRETEND_ARGS_SIZE.  The value that you\n-   store here will serve as additional offset for setting up the stack frame.\n-\n-   Because you must generate code to push the anonymous arguments at compile\n-   time without knowing their data types, `SETUP_INCOMING_VARARGS' is only\n-   useful on machines that have just a single category of argument register and\n-   use it uniformly for all data types.\n-\n-   If the argument SECOND_TIME is nonzero, it means that the arguments of the\n-   function are being analyzed for the second time.  This happens for an inline\n-   function, which is not actually compiled until the end of the source file.\n-   The macro `SETUP_INCOMING_VARARGS' should not generate any instructions in\n-   this case.  */\n #define SETUP_INCOMING_VARARGS(ARGS_SO_FAR, MODE, TYPE, PRETEND_ARGS_SIZE, SECOND_TIME) \\\n   if (! SECOND_TIME) \\\n     fr30_setup_incoming_varargs (ARGS_SO_FAR, MODE, TYPE, & PRETEND_ARGS_SIZE)"}, {"sha": "cb32cc38acd82944b976b532d037ce9cbf7e5d9d", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61c92c3908acaeb636aee8c0271339d3e9ec291/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61c92c3908acaeb636aee8c0271339d3e9ec291/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f61c92c3908acaeb636aee8c0271339d3e9ec291", "patch": "@@ -4398,9 +4398,9 @@ versions of @code{va_start} must use @code{__builtin_saveregs}, unless\n you use @code{SETUP_INCOMING_VARARGS} (see below) instead.\n \n On some machines, @code{__builtin_saveregs} is open-coded under the\n-control of the macro @code{EXPAND_BUILTIN_SAVEREGS}.  On other machines,\n-it calls a routine written in assembler language, found in\n-@file{libgcc2.c}.\n+control of the target hook @code{TARGET_EXPAND_BUILTIN_SAVEREGS}.  On\n+other machines, it calls a routine written in assembler language,\n+found in @file{libgcc2.c}.\n \n Code generated for the call to @code{__builtin_saveregs} appears at the\n beginning of the function, as opposed to where the call to"}]}