{"sha": "a28729836a7f1993a17eeca53a0165c31406b581", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI4NzI5ODM2YTdmMTk5M2ExN2VlY2E1M2EwMTY1YzMxNDA2YjU4MQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-10T08:33:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-10T08:33:57Z"}, "message": "re PR tree-optimization/54027 (possible mis-optimization of signed left shift in c89 mode)\n\n2012-08-10  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/54027\n\t* tree-vrp.c (extract_range_from_binary_expr_1): Merge RSHIFT_EXPR\n\tand LSHIFT_EXPR handling, force -fwrapv for the multiplication used\n\tto handle LSHIFT_EXPR with a constant.\n\n\t* gcc.dg/torture/pr54027.c: New testcase.\n\nFrom-SVN: r190286", "tree": {"sha": "43053999250c5d3d6737bf5f2ad532a3798eb474", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43053999250c5d3d6737bf5f2ad532a3798eb474"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a28729836a7f1993a17eeca53a0165c31406b581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a28729836a7f1993a17eeca53a0165c31406b581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a28729836a7f1993a17eeca53a0165c31406b581", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a28729836a7f1993a17eeca53a0165c31406b581/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "70b5e7dc7356529b557b613c7dee032c9d89d035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b5e7dc7356529b557b613c7dee032c9d89d035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70b5e7dc7356529b557b613c7dee032c9d89d035"}], "stats": {"total": 98, "additions": 55, "deletions": 43}, "files": [{"sha": "f047b141fc710eb0a7932ae06d36a434be496fa5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28729836a7f1993a17eeca53a0165c31406b581/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28729836a7f1993a17eeca53a0165c31406b581/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a28729836a7f1993a17eeca53a0165c31406b581", "patch": "@@ -1,3 +1,10 @@\n+2012-08-10  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54027\n+\t* tree-vrp.c (extract_range_from_binary_expr_1): Merge RSHIFT_EXPR\n+\tand LSHIFT_EXPR handling, force -fwrapv for the multiplication used\n+\tto handle LSHIFT_EXPR with a constant.\n+\n 2012-08-10  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.h (SSA_NAME_VAR): Return NULL_TREE if an IDENTIFIER_NODE"}, {"sha": "55bc89298f53cc1d72cad1f16b6e10db6006b7ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28729836a7f1993a17eeca53a0165c31406b581/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28729836a7f1993a17eeca53a0165c31406b581/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a28729836a7f1993a17eeca53a0165c31406b581", "patch": "@@ -1,3 +1,8 @@\n+2012-08-10  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54027\n+\t* gcc.dg/torture/pr54027.c: New testcase.\n+\n 2012-08-10  Richard Guenther  <rguenther@suse.de>\n \n \t* g++.dg/plugin/selfassign.c: Adjust."}, {"sha": "b5568f4375cbf44429f99a8a2828b350a412a098", "filename": "gcc/testsuite/gcc.dg/torture/pr54027.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28729836a7f1993a17eeca53a0165c31406b581/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr54027.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28729836a7f1993a17eeca53a0165c31406b581/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr54027.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr54027.c?ref=a28729836a7f1993a17eeca53a0165c31406b581", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+\n+int main (void)\n+{\n+  int x = 1;\n+  while (x)\n+    x <<= 1;\n+  return x;\n+}"}, {"sha": "a5b583b66d56b578579f7806556e933fe4877a35", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 34, "deletions": 43, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28729836a7f1993a17eeca53a0165c31406b581/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28729836a7f1993a17eeca53a0165c31406b581/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=a28729836a7f1993a17eeca53a0165c31406b581", "patch": "@@ -2726,57 +2726,48 @@ extract_range_from_binary_expr_1 (value_range_t *vr,\n       extract_range_from_multiplicative_op_1 (vr, code, &vr0, &vr1);\n       return;\n     }\n-  else if (code == RSHIFT_EXPR)\n+  else if (code == RSHIFT_EXPR\n+\t   || code == LSHIFT_EXPR)\n     {\n       /* If we have a RSHIFT_EXPR with any shift values outside [0..prec-1],\n \t then drop to VR_VARYING.  Outside of this range we get undefined\n \t behavior from the shift operation.  We cannot even trust\n \t SHIFT_COUNT_TRUNCATED at this stage, because that applies to rtl\n \t shifts, and the operation at the tree level may be widened.  */\n-      if (vr1.type != VR_RANGE\n-\t  || !value_range_nonnegative_p (&vr1)\n-\t  || TREE_CODE (vr1.max) != INTEGER_CST\n-\t  || compare_tree_int (vr1.max, TYPE_PRECISION (expr_type) - 1) == 1)\n-\t{\n-\t  set_value_range_to_varying (vr);\n-\t  return;\n-\t}\n-\n-      extract_range_from_multiplicative_op_1 (vr, code, &vr0, &vr1);\n-      return;\n-    }\n-  else if (code == LSHIFT_EXPR)\n-    {\n-      /* If we have a LSHIFT_EXPR with any shift values outside [0..prec-1],\n-\t then drop to VR_VARYING.  Outside of this range we get undefined\n-\t behavior from the shift operation.  We cannot even trust\n-\t SHIFT_COUNT_TRUNCATED at this stage, because that applies to rtl\n-\t shifts, and the operation at the tree level may be widened.  */\n-      if (vr1.type != VR_RANGE\n-\t  || !value_range_nonnegative_p (&vr1)\n-\t  || TREE_CODE (vr1.max) != INTEGER_CST\n-\t  || compare_tree_int (vr1.max, TYPE_PRECISION (expr_type) - 1) == 1)\n+      if (range_int_cst_p (&vr1)\n+\t  && compare_tree_int (vr1.min, 0) >= 0\n+\t  && compare_tree_int (vr1.max, TYPE_PRECISION (expr_type)) == -1)\n \t{\n-\t  set_value_range_to_varying (vr);\n-\t  return;\n-\t}\n-\n-      /* We can map shifts by constants to MULT_EXPR handling.  */\n-      if (range_int_cst_singleton_p (&vr1))\n-\t{\n-\t  value_range_t vr1p = VR_INITIALIZER;\n-\t  vr1p.type = VR_RANGE;\n-\t  vr1p.min\n-\t    = double_int_to_tree (expr_type,\n-\t\t\t\t  double_int_lshift (double_int_one,\n-\t\t\t\t\t\t     TREE_INT_CST_LOW (vr1.min),\n-\t\t\t\t\t\t     TYPE_PRECISION (expr_type),\n-\t\t\t\t\t\t     false));\n-\t  vr1p.max = vr1p.min;\n-\t  extract_range_from_multiplicative_op_1 (vr, MULT_EXPR, &vr0, &vr1p);\n-\t  return;\n+\t  if (code == RSHIFT_EXPR)\n+\t    {\n+\t      extract_range_from_multiplicative_op_1 (vr, code, &vr0, &vr1);\n+\t      return;\n+\t    }\n+\t  /* We can map lshifts by constants to MULT_EXPR handling.  */\n+\t  else if (code == LSHIFT_EXPR\n+\t\t   && range_int_cst_singleton_p (&vr1))\n+\t    {\n+\t      bool saved_flag_wrapv;\n+\t      value_range_t vr1p = VR_INITIALIZER;\n+\t      vr1p.type = VR_RANGE;\n+\t      vr1p.min\n+\t\t= double_int_to_tree (expr_type,\n+\t\t\t\t      double_int_lshift\n+\t\t\t\t        (double_int_one,\n+\t\t\t\t\t TREE_INT_CST_LOW (vr1.min),\n+\t\t\t\t\t TYPE_PRECISION (expr_type),\n+\t\t\t\t\t false));\n+\t      vr1p.max = vr1p.min;\n+\t      /* We have to use a wrapping multiply though as signed overflow\n+\t\t on lshifts is implementation defined in C89.  */\n+\t      saved_flag_wrapv = flag_wrapv;\n+\t      flag_wrapv = 1;\n+\t      extract_range_from_binary_expr_1 (vr, MULT_EXPR, expr_type,\n+\t\t\t\t\t\t&vr0, &vr1p);\n+\t      flag_wrapv = saved_flag_wrapv;\n+\t      return;\n+\t    }\n \t}\n-\n       set_value_range_to_varying (vr);\n       return;\n     }"}]}