{"sha": "975b975b29fa2aa9dd562a55006a4cd93421a652", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc1Yjk3NWIyOWZhMmFhOWRkNTYyYTU1MDA2YTRjZDkzNDIxYTY1Mg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-02-13T19:26:24Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-02-13T19:26:24Z"}, "message": "re PR fortran/47569 (gfortran does not detect that the parameters for passing a partial string to a subroutine are incorrect)\n\n2011-02-13  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/47569\n        * interface.c (compare_parameter): Avoid ICE with\n        character components.\n\n2011-02-13  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/argument_checking_13.f90: Update dg-error.\n        * gfortran.dg/argument_checking_17.f90: New.\n\nFrom-SVN: r170110", "tree": {"sha": "7188e003b09e504b9233cc303567e5f11e1e0c8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7188e003b09e504b9233cc303567e5f11e1e0c8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/975b975b29fa2aa9dd562a55006a4cd93421a652", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975b975b29fa2aa9dd562a55006a4cd93421a652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/975b975b29fa2aa9dd562a55006a4cd93421a652", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975b975b29fa2aa9dd562a55006a4cd93421a652/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b79050f02be420f4c76874c0ee799d68c32beb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b79050f02be420f4c76874c0ee799d68c32beb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b79050f02be420f4c76874c0ee799d68c32beb8"}], "stats": {"total": 116, "additions": 88, "deletions": 28}, "files": [{"sha": "1f63accb15913c07f60480792a543b4faa357a6f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975b975b29fa2aa9dd562a55006a4cd93421a652/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975b975b29fa2aa9dd562a55006a4cd93421a652/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=975b975b29fa2aa9dd562a55006a4cd93421a652", "patch": "@@ -1,3 +1,9 @@\n+2011-02-13  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/47569\n+\t* interface.c (compare_parameter): Avoid ICE with\n+\tcharacter components.\n+\n 2011-02-12  Janus Weil  <janus@gcc.gnu.org>\n \n \t* class.c (gfc_build_class_symbol): Reject polymorphic arrays."}, {"sha": "a03bbebb6740eb5e0aecf20ec0d967c021be9cee", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 48, "deletions": 25, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975b975b29fa2aa9dd562a55006a4cd93421a652/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975b975b29fa2aa9dd562a55006a4cd93421a652/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=975b975b29fa2aa9dd562a55006a4cd93421a652", "patch": "@@ -1461,7 +1461,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t\t   int ranks_must_agree, int is_elemental, locus *where)\n {\n   gfc_ref *ref;\n-  bool rank_check;\n+  bool rank_check, is_pointer;\n \n   /* If the formal arg has type BT_VOID, it's to one of the iso_c_binding\n      procs c_f_pointer or c_f_procpointer, and we need to accept most\n@@ -1672,23 +1672,56 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n     return 1;\n \n   /* At this point, we are considering a scalar passed to an array.   This\n-     is valid (cf. F95 12.4.1.1; F2003 12.4.1.2),\n+     is valid (cf. F95 12.4.1.1, F2003 12.4.1.2, and F2008 12.5.2.4),\n      - if the actual argument is (a substring of) an element of a\n-       non-assumed-shape/non-pointer array;\n-     - (F2003) if the actual argument is of type character.  */\n+       non-assumed-shape/non-pointer/non-polymorphic array; or\n+     - (F2003) if the actual argument is of type character of default/c_char\n+       kind.  */\n+\n+  is_pointer = actual->expr_type == EXPR_VARIABLE\n+\t       ? actual->symtree->n.sym->attr.pointer : false;\n \n   for (ref = actual->ref; ref; ref = ref->next)\n-    if (ref->type == REF_ARRAY && ref->u.ar.type == AR_ELEMENT\n-\t&& ref->u.ar.dimen > 0)\n-      break;\n+    {\n+      if (ref->type == REF_COMPONENT)\n+\tis_pointer = ref->u.c.component->attr.pointer;\n+      else if (ref->type == REF_ARRAY && ref->u.ar.type == AR_ELEMENT\n+\t       && ref->u.ar.dimen > 0\n+\t       && (!ref->next \n+\t\t   || (ref->next->type == REF_SUBSTRING && !ref->next->next)))\n+        break;\n+    }\n+\n+  if (actual->ts.type == BT_CLASS && actual->expr_type != EXPR_NULL)\n+    {\n+      if (where)\n+\tgfc_error (\"Polymorphic scalar passed to array dummy argument '%s' \"\n+\t\t   \"at %L\", formal->name, &actual->where);\n+      return 0;\n+    }\n \n-  /* Not an array element.  */\n-  if (formal->ts.type == BT_CHARACTER\n-      && (ref == NULL\n-          || (actual->expr_type == EXPR_VARIABLE\n-\t      && (actual->symtree->n.sym->as->type == AS_ASSUMED_SHAPE\n-\t\t  || actual->symtree->n.sym->attr.pointer))))\n+  if (actual->expr_type != EXPR_NULL && ref && actual->ts.type != BT_CHARACTER\n+      && (is_pointer || ref->u.ar.as->type == AS_ASSUMED_SHAPE))\n     {\n+      if (where)\n+\tgfc_error (\"Element of assumed-shaped or pointer \"\n+\t\t   \"array passed to array dummy argument '%s' at %L\",\n+\t\t   formal->name, &actual->where);\n+      return 0;\n+    }\n+\n+  if (actual->ts.type == BT_CHARACTER && actual->expr_type != EXPR_NULL\n+      && (!ref || is_pointer || ref->u.ar.as->type == AS_ASSUMED_SHAPE))\n+    {\n+      if (formal->ts.kind != 1 && (gfc_option.allow_std & GFC_STD_GNU) == 0)\n+\t{\n+\t  if (where)\n+\t    gfc_error (\"Extension: Scalar non-default-kind, non-C_CHAR-kind \"\n+\t\t       \"CHARACTER actual argument with array dummy argument \"\n+\t\t       \"'%s' at %L\", formal->name, &actual->where);\n+\t  return 0;\n+\t}\n+\n       if (where && (gfc_option.allow_std & GFC_STD_F2003) == 0)\n \t{\n \t  gfc_error (\"Fortran 2003: Scalar CHARACTER actual argument with \"\n@@ -1701,25 +1734,15 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n       else\n \treturn 1;\n     }\n-  else if (ref == NULL && actual->expr_type != EXPR_NULL)\n+\n+  if (ref == NULL && actual->expr_type != EXPR_NULL)\n     {\n       if (where)\n \targument_rank_mismatch (formal->name, &actual->where,\n \t\t\t\tsymbol_rank (formal), actual->rank);\n       return 0;\n     }\n \n-  if (actual->expr_type == EXPR_VARIABLE\n-      && actual->symtree->n.sym->as\n-      && (actual->symtree->n.sym->as->type == AS_ASSUMED_SHAPE\n-\t  || actual->symtree->n.sym->attr.pointer))\n-    {\n-      if (where)\n-\tgfc_error (\"Element of assumed-shaped array passed to dummy \"\n-\t\t   \"argument '%s' at %L\", formal->name, &actual->where);\n-      return 0;\n-    }\n-\n   return 1;\n }\n "}, {"sha": "fb27e998890a8b73d82baa8fe6b41bc490a03505", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975b975b29fa2aa9dd562a55006a4cd93421a652/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975b975b29fa2aa9dd562a55006a4cd93421a652/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=975b975b29fa2aa9dd562a55006a4cd93421a652", "patch": "@@ -1,3 +1,8 @@\n+2011-02-13  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/argument_checking_13.f90: Update dg-error.\n+\t* gfortran.dg/argument_checking_17.f90: New.\n+\n 2011-02-12  Janus Weil  <janus@gcc.gnu.org>\n \n \t* gfortran.dg/allocate_derived_1.f90: Modified as polymorphic arrays"}, {"sha": "b94bbc7ec756e0ba4042cb6bab3836130e39ddae", "filename": "gcc/testsuite/gfortran.dg/argument_checking_13.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975b975b29fa2aa9dd562a55006a4cd93421a652/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975b975b29fa2aa9dd562a55006a4cd93421a652/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_13.f90?ref=975b975b29fa2aa9dd562a55006a4cd93421a652", "patch": "@@ -26,9 +26,9 @@ end subroutine rlv1\n real, allocatable :: deferred(:,:,:)\n real, pointer     :: ptr(:,:,:)\n call rlv1(deferred(1,1,1))         ! valid since contiguous\n-call rlv1(ptr(1,1,1))              ! { dg-error \"Element of assumed-shaped array\" }\n-call rlv1(assumed_sh_dummy(1,1,1)) ! { dg-error \"Element of assumed-shaped array\" }\n-call rlv1(pointer_dummy(1,1,1))    ! { dg-error \"Element of assumed-shaped array\" }\n+call rlv1(ptr(1,1,1))              ! { dg-error \"Element of assumed-shaped or pointer array\" }\n+call rlv1(assumed_sh_dummy(1,1,1)) ! { dg-error \"Element of assumed-shaped or pointer array\" }\n+call rlv1(pointer_dummy(1,1,1))    ! { dg-error \"Element of assumed-shaped or pointer array\" }\n end\n \n subroutine test2(assumed_sh_dummy, pointer_dummy)"}, {"sha": "df8296ba511cd954775e812de0232aafe4f2d2c3", "filename": "gcc/testsuite/gfortran.dg/argument_checking_17.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975b975b29fa2aa9dd562a55006a4cd93421a652/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975b975b29fa2aa9dd562a55006a4cd93421a652/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_17.f90?ref=975b975b29fa2aa9dd562a55006a4cd93421a652", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+!\n+! PR fortran/47569\n+!\n+! Contributed by Jos de Kloe \n+!\n+module teststr\n+  implicit none\n+  integer, parameter :: GRH_SIZE = 20, NMAX = 41624\n+  type strtype\n+    integer   :: size\n+    character :: mdr(NMAX)\n+  end type strtype\n+contains\n+  subroutine sub2(string,str_size)\n+    integer,intent(in)    :: str_size\n+    character,intent(out) :: string(str_size)\n+    string(:) = 'a'\n+  end subroutine sub2\n+  subroutine sub1(a)\n+    type(strtype),intent(inout) :: a\n+    call sub2(a%mdr(GRH_SIZE+1),a%size-GRH_SIZE)\n+  end subroutine sub1\n+end module teststr\n+\n+! { dg-final { cleanup-modules \"teststr\" } }"}]}