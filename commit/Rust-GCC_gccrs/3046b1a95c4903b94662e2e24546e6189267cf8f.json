{"sha": "3046b1a95c4903b94662e2e24546e6189267cf8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA0NmIxYTk1YzQ5MDNiOTQ2NjJlMmUyNDU0NmU2MTg5MjY3Y2Y4Zg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-19T15:16:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-19T15:16:23Z"}, "message": "tree-ssa-forwprop.c (lookup_logical_inverted_value): Remove TRUTH_*_EXPR handling.\n\n2011-07-19  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-forwprop.c (lookup_logical_inverted_value): Remove\n\tTRUTH_*_EXPR handling.\n\t* tree-ssa-operands.c (get_expr_operands): Likewise.\n\t* tree-ssa-pre.c (fully_constant_expression): Likewise.\n\t* tree-ssa-uninit.c (use_pred_not_overlap_with_undef_path_pre):\n\tLikewise.\n\t(is_and_or_or): Likewise.\n\t(is_norm_cond_subset_of): Likewise.\n\nFrom-SVN: r176463", "tree": {"sha": "eec18a2e0fa6d5d61ac7ef3e0f4cd7b59682e4bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eec18a2e0fa6d5d61ac7ef3e0f4cd7b59682e4bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3046b1a95c4903b94662e2e24546e6189267cf8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3046b1a95c4903b94662e2e24546e6189267cf8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3046b1a95c4903b94662e2e24546e6189267cf8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3046b1a95c4903b94662e2e24546e6189267cf8f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d49b6a7b28117095ef6889b5d010687fa52843c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d49b6a7b28117095ef6889b5d010687fa52843c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d49b6a7b28117095ef6889b5d010687fa52843c"}], "stats": {"total": 45, "additions": 19, "deletions": 26}, "files": [{"sha": "1a1fd346af4365bebb457828a9540635be725665", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3046b1a95c4903b94662e2e24546e6189267cf8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3046b1a95c4903b94662e2e24546e6189267cf8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3046b1a95c4903b94662e2e24546e6189267cf8f", "patch": "@@ -1,3 +1,14 @@\n+2011-07-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-forwprop.c (lookup_logical_inverted_value): Remove\n+\tTRUTH_*_EXPR handling.\n+\t* tree-ssa-operands.c (get_expr_operands): Likewise.\n+\t* tree-ssa-pre.c (fully_constant_expression): Likewise.\n+\t* tree-ssa-uninit.c (use_pred_not_overlap_with_undef_path_pre):\n+\tLikewise.\n+\t(is_and_or_or): Likewise.\n+\t(is_norm_cond_subset_of): Likewise.\n+\n 2011-07-19  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.h (fold_build_pointer_plus_loc): New helper function."}, {"sha": "5a40f5e604ebce0334de4a2aa77981d69be52528", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3046b1a95c4903b94662e2e24546e6189267cf8f/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3046b1a95c4903b94662e2e24546e6189267cf8f/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=3046b1a95c4903b94662e2e24546e6189267cf8f", "patch": "@@ -1622,16 +1622,13 @@ lookup_logical_inverted_value (tree name)\n   op2 = NULL_TREE;\n \n   /* Get for EQ_EXPR or BIT_XOR_EXPR operation the second operand.\n-     If CODE isn't an EQ_EXPR, BIT_XOR_EXPR, TRUTH_NOT_EXPR,\n-     or BIT_NOT_EXPR, then return.  */\n+     If CODE isn't an EQ_EXPR, BIT_XOR_EXPR, or BIT_NOT_EXPR, then return.  */\n   if (code == EQ_EXPR || code == NE_EXPR\n       || code == BIT_XOR_EXPR)\n     op2 = gimple_assign_rhs2 (def);\n \n   switch (code)\n     {\n-    case TRUTH_NOT_EXPR:\n-      return op1;\n     case BIT_NOT_EXPR:\n       if (truth_valued_ssa_name (name))\n \treturn op1;"}, {"sha": "995341f0e6986ecfd1b2f001c5c0ddd3ec987957", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3046b1a95c4903b94662e2e24546e6189267cf8f/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3046b1a95c4903b94662e2e24546e6189267cf8f/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=3046b1a95c4903b94662e2e24546e6189267cf8f", "patch": "@@ -968,15 +968,11 @@ get_expr_operands (gimple stmt, tree *expr_p, int flags)\n \tgimple_set_has_volatile_ops (stmt, true);\n       /* FALLTHRU */\n \n-    case TRUTH_NOT_EXPR:\n     case VIEW_CONVERT_EXPR:\n     do_unary:\n       get_expr_operands (stmt, &TREE_OPERAND (expr, 0), flags);\n       return;\n \n-    case TRUTH_AND_EXPR:\n-    case TRUTH_OR_EXPR:\n-    case TRUTH_XOR_EXPR:\n     case COMPOUND_EXPR:\n     case OBJ_TYPE_REF:\n     case ASSERT_EXPR:"}, {"sha": "a50c837db414677463dd83574f722317e5961042", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3046b1a95c4903b94662e2e24546e6189267cf8f/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3046b1a95c4903b94662e2e24546e6189267cf8f/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=3046b1a95c4903b94662e2e24546e6189267cf8f", "patch": "@@ -1150,14 +1150,6 @@ fully_constant_expression (pre_expr e)\n \tvn_nary_op_t nary = PRE_EXPR_NARY (e);\n \tswitch (TREE_CODE_CLASS (nary->opcode))\n \t  {\n-\t  case tcc_expression:\n-\t    if (nary->opcode == TRUTH_NOT_EXPR)\n-\t      goto do_unary;\n-\t    if (nary->opcode != TRUTH_AND_EXPR\n-\t\t&& nary->opcode != TRUTH_OR_EXPR\n-\t\t&& nary->opcode != TRUTH_XOR_EXPR)\n-\t      return e;\n-\t    /* Fallthrough.  */\n \t  case tcc_binary:\n \t  case tcc_comparison:\n \t    {\n@@ -1199,7 +1191,6 @@ fully_constant_expression (pre_expr e)\n \t      return e;\n \t    /* Fallthrough.  */\n \t  case tcc_unary:\n-do_unary:\n \t    {\n \t      /* We have to go from trees to pre exprs to value ids to\n \t\t constants.  */"}, {"sha": "b028588d8ca7438447d7f31d13f3f9853c356a68", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3046b1a95c4903b94662e2e24546e6189267cf8f/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3046b1a95c4903b94662e2e24546e6189267cf8f/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=3046b1a95c4903b94662e2e24546e6189267cf8f", "patch": "@@ -1088,9 +1088,7 @@ use_pred_not_overlap_with_undef_path_pred (\n static inline bool\n is_and_or_or (enum tree_code tc, tree typ)\n {\n-  return (tc == TRUTH_AND_EXPR\n-          || tc == TRUTH_OR_EXPR\n-          || tc == BIT_IOR_EXPR\n+  return (tc == BIT_IOR_EXPR\n           || (tc == BIT_AND_EXPR\n               && (typ == 0 || TREE_CODE (typ) == BOOLEAN_TYPE)));\n }\n@@ -1415,15 +1413,15 @@ is_norm_cond_subset_of (norm_cond_t norm_cond1,\n   code1 = norm_cond1->cond_code;\n   code2 = norm_cond2->cond_code;\n \n-  if (code1 == TRUTH_AND_EXPR || code1 == BIT_AND_EXPR)\n+  if (code1 == BIT_AND_EXPR)\n     {\n       /* Both conditions are AND expressions.  */\n-      if (code2 == TRUTH_AND_EXPR || code2 == BIT_AND_EXPR)\n+      if (code2 == BIT_AND_EXPR)\n         return is_and_set_subset_of (norm_cond1, norm_cond2);\n       /* NORM_COND1 is an AND expression, and NORM_COND2 is an OR\n          expression. In this case, returns true if any subexpression\n          of NORM_COND1 is a subset of any subexpression of NORM_COND2.  */\n-      else if (code2 == TRUTH_OR_EXPR || code2 == BIT_IOR_EXPR)\n+      else if (code2 == BIT_IOR_EXPR)\n         {\n           size_t len1;\n           len1 = VEC_length (gimple, norm_cond1->conds);\n@@ -1444,7 +1442,7 @@ is_norm_cond_subset_of (norm_cond_t norm_cond1,\n         }\n     }\n   /* NORM_COND1 is an OR expression  */\n-  else if (code1 == TRUTH_OR_EXPR || code1 == BIT_IOR_EXPR)\n+  else if (code1 == BIT_IOR_EXPR)\n     {\n       if (code2 != code1)\n         return false;\n@@ -1457,10 +1455,10 @@ is_norm_cond_subset_of (norm_cond_t norm_cond1,\n       gcc_assert (VEC_length (gimple, norm_cond1->conds) == 1);\n       /* Conservatively returns false if NORM_COND1 is non-decomposible\n          and NORM_COND2 is an AND expression.  */\n-      if (code2 == TRUTH_AND_EXPR || code2 == BIT_AND_EXPR)\n+      if (code2 == BIT_AND_EXPR)\n         return false;\n \n-      if (code2 == TRUTH_OR_EXPR || code2 == BIT_IOR_EXPR)\n+      if (code2 == BIT_IOR_EXPR)\n         return is_subset_of_any (VEC_index (gimple, norm_cond1->conds, 0),\n                                  norm_cond1->invert, norm_cond2, false);\n "}]}