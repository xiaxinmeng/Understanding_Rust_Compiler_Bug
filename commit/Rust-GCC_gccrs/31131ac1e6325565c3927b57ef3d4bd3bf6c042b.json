{"sha": "31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzExMzFhYzFlNjMyNTU2NWMzOTI3YjU3ZWYzZDRiZDNiZjZjMDQyYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-10-05T19:11:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-10-05T19:11:18Z"}, "message": "re PR libstdc++/24198 (Remove from the testsuite gnu_char_type (or fix it))\n\n2005-10-05  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/24198\n\t* testsuite/27_io/basic_filebuf/3.cc: Use __gnu_test::pod_ushort\n\tinstead.\n\t* testsuite/27_io/basic_filebuf/seekoff/10132-2.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/seekpos/10132-3.cc: Likewise.\n\t* testsuite/27_io/basic_fstream/3.cc: Likewise; run the test.\n\t* testsuite/27_io/basic_ifstream/3.cc: Likewise; run the test.\n\t* testsuite/27_io/basic_ios/3.cc: Likewise.\n\t* testsuite/27_io/basic_iostream/3.cc: Likewise; run the test.\n\t* testsuite/27_io/basic_istream/3.cc: Likewise; run the test.\n\t* testsuite/27_io/basic_istringstream/3.cc: Likewise; run the test.\n\t* testsuite/27_io/basic_ofstream/3.cc: Likewise; run the test.\n\t* testsuite/27_io/basic_ostream/3.cc: Likewise; run the test.\n\t* testsuite/27_io/basic_ostringstream/3.cc: Likewise; run the test.\n\t* testsuite/27_io/basic_streambuf/3.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/3.cc: Likewise.\n\t* testsuite/27_io/basic_stringstream/3.cc: Likewise; run the test.\n\nFrom-SVN: r105010", "tree": {"sha": "636f0b7969c425b1b7dc52f01559f9713d5fa378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/636f0b7969c425b1b7dc52f01559f9713d5fa378"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/comments", "author": null, "committer": null, "parents": [{"sha": "d3073c70c5db2f657da6185f16662d14e3e32270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3073c70c5db2f657da6185f16662d14e3e32270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3073c70c5db2f657da6185f16662d14e3e32270"}], "stats": {"total": 1403, "additions": 65, "deletions": 1338}, "files": [{"sha": "81d4268594d2e2c391734f452a510b228f5a16d3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "patch": "@@ -1,3 +1,23 @@\n+2005-10-05  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/24198\n+\t* testsuite/27_io/basic_filebuf/3.cc: Use __gnu_test::pod_ushort\n+\tinstead.\n+\t* testsuite/27_io/basic_filebuf/seekoff/10132-2.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/seekpos/10132-3.cc: Likewise.\n+\t* testsuite/27_io/basic_fstream/3.cc: Likewise; run the test.\n+\t* testsuite/27_io/basic_ifstream/3.cc: Likewise; run the test.\n+\t* testsuite/27_io/basic_ios/3.cc: Likewise.\n+\t* testsuite/27_io/basic_iostream/3.cc: Likewise; run the test.\n+\t* testsuite/27_io/basic_istream/3.cc: Likewise; run the test.\n+\t* testsuite/27_io/basic_istringstream/3.cc: Likewise; run the test.\n+\t* testsuite/27_io/basic_ofstream/3.cc: Likewise; run the test.\n+\t* testsuite/27_io/basic_ostream/3.cc: Likewise; run the test.\n+\t* testsuite/27_io/basic_ostringstream/3.cc: Likewise; run the test.\n+\t* testsuite/27_io/basic_streambuf/3.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/3.cc: Likewise.\n+\t* testsuite/27_io/basic_stringstream/3.cc: Likewise; run the test.\n+\n 2005-10-05  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/11729 (DR 280, [Ready])"}, {"sha": "8ead347dc696ea9cd36d5804058f88c76ca02e41", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/3.cc", "status": "modified", "additions": 3, "deletions": 88, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F3.cc?ref=31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "patch": "@@ -1,6 +1,6 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -24,99 +24,14 @@\n \n #include <fstream>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // libstdc++/2020\n // should be able to use custom char_type, custom traits type\n-class gnu_char_type\n-{\n-  unsigned long character;\n-public:\n-  // operator ==\n-  bool\n-  operator==(const gnu_char_type& __lhs) \n-  { return character == __lhs.character; }\n-\n-  // operator <\n-  bool\n-  operator<(const gnu_char_type& __lhs) \n-  { return character < __lhs.character; }\n-\n-  // default ctor\n-  gnu_char_type() { }\n-\n-  // to_char_type\n-  gnu_char_type(const unsigned long& __l) : character(__l) { } \n-\n-  // to_int_type\n-  operator unsigned long() const { return character; }\n-};\n-\n-// char_traits specialization\n-struct gnu_char_traits\n-{\n-  typedef gnu_char_type\tchar_type;\n-  typedef long  \t\tint_type;\n-  typedef std::streamoff \toff_type;\n-  typedef long   \t\tstate_type;\n-  typedef std::fpos<state_type>\tpos_type;\n-  \n-  static void \n-  assign(char_type& __c1, const char_type& __c2) { }\n-  \n-  static bool \n-  eq(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static bool \n-  lt(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static int \n-  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-  { return 0; }\n-  \n-  static size_t\n-  length(const char_type* __s) { return 0; }\n-  \n-  static const char_type* \n-  find(const char_type* __s, size_t __n, const char_type& __a)\n-  { return __s; }\n-  \n-  static char_type* \n-  move(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  copy(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  assign(char_type* __s, size_t __n, char_type __a)\n-  { return __s; }\n-  \n-  static char_type \n-  to_char_type(const int_type& __c)\n-  { return char_type(); }\n-  \n-  static int_type \n-  to_int_type(const char_type& __c)\n-  { return int_type(); }\n-  \n-  static bool \n-  eq_int_type(const int_type& __c1, const int_type& __c2)\n-  { return true; }\n-  \n-  static int_type \n-  eof()\n-  { return int_type(); }\n-  \n-  static int_type \n-  not_eof(const int_type& __c)\n-  { return int_type(); }\n-};\n-\n void test07()\n {\n   bool test __attribute__((unused)) = true;\n-  typedef std::basic_filebuf<gnu_char_type, gnu_char_traits> gnu_filebuf;\n+  typedef std::basic_filebuf<__gnu_test::pod_ushort> gnu_filebuf;\n   \n   try\n     { gnu_filebuf obj; }"}, {"sha": "646276916c96fca1880544803f1bd619a69b7d50", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/10132-2.cc", "status": "modified", "additions": 3, "deletions": 88, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F10132-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F10132-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F10132-2.cc?ref=31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "patch": "@@ -1,6 +1,6 @@\n // 2003-04-24 bkoz\n \n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,98 +23,13 @@\n \n #include <fstream>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // libstdc++/10132, add on\n-class gnu_char_type\n-{\n-  unsigned long character;\n-public:\n-  // operator ==\n-  bool\n-  operator==(const gnu_char_type& __lhs) \n-  { return character == __lhs.character; }\n-\n-  // operator <\n-  bool\n-  operator<(const gnu_char_type& __lhs) \n-  { return character < __lhs.character; }\n-\n-  // default ctor\n-  gnu_char_type() { }\n-\n-  // to_char_type\n-  gnu_char_type(const unsigned long& __l) : character(__l) { } \n-\n-  // to_int_type\n-  operator unsigned long() const { return character; }\n-};\n-\n-// char_traits specialization\n-struct gnu_char_traits\n-{\n-  typedef gnu_char_type\tchar_type;\n-  typedef long  \t\tint_type;\n-  typedef std::streamoff \toff_type;\n-  typedef long   \t\tstate_type;\n-  typedef std::fpos<state_type>\tpos_type;\n-  \n-  static void \n-  assign(char_type& __c1, const char_type& __c2) { }\n-  \n-  static bool \n-  eq(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static bool \n-  lt(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static int \n-  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-  { return 0; }\n-  \n-  static size_t\n-  length(const char_type* __s) { return 0; }\n-  \n-  static const char_type* \n-  find(const char_type* __s, size_t __n, const char_type& __a)\n-  { return __s; }\n-  \n-  static char_type* \n-  move(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  copy(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  assign(char_type* __s, size_t __n, char_type __a)\n-  { return __s; }\n-  \n-  static char_type \n-  to_char_type(const int_type& __c)\n-  { return char_type(); }\n-  \n-  static int_type \n-  to_int_type(const char_type& __c)\n-  { return int_type(); }\n-  \n-  static bool \n-  eq_int_type(const int_type& __c1, const int_type& __c2)\n-  { return true; }\n-  \n-  static int_type \n-  eof()\n-  { return int_type(); }\n-  \n-  static int_type \n-  not_eof(const int_type& __c)\n-  { return int_type(); }\n-};\n-\n void test07()\n {\n   bool test __attribute__((unused)) = true;\n-  typedef std::basic_filebuf<gnu_char_type, gnu_char_traits> gnu_filebuf;\n+  typedef std::basic_filebuf<__gnu_test::pod_ushort> gnu_filebuf;\n   \n   try\n     { "}, {"sha": "7123369212b5edf3fb387298bb26aa28b0559581", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/10132-3.cc", "status": "modified", "additions": 3, "deletions": 88, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F10132-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F10132-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F10132-3.cc?ref=31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "patch": "@@ -1,6 +1,6 @@\n // 2003-04-24 bkoz\n \n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,98 +23,13 @@\n \n #include <fstream>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // libstdc++/10132, add on\n-class gnu_char_type\n-{\n-  unsigned long character;\n-public:\n-  // operator ==\n-  bool\n-  operator==(const gnu_char_type& __lhs) \n-  { return character == __lhs.character; }\n-\n-  // operator <\n-  bool\n-  operator<(const gnu_char_type& __lhs) \n-  { return character < __lhs.character; }\n-\n-  // default ctor\n-  gnu_char_type() { }\n-\n-  // to_char_type\n-  gnu_char_type(const unsigned long& __l) : character(__l) { } \n-\n-  // to_int_type\n-  operator unsigned long() const { return character; }\n-};\n-\n-// char_traits specialization\n-struct gnu_char_traits\n-{\n-  typedef gnu_char_type\tchar_type;\n-  typedef long  \t\tint_type;\n-  typedef std::streamoff \toff_type;\n-  typedef long   \t\tstate_type;\n-  typedef std::fpos<state_type>\tpos_type;\n-  \n-  static void \n-  assign(char_type& __c1, const char_type& __c2) { }\n-  \n-  static bool \n-  eq(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static bool \n-  lt(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static int \n-  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-  { return 0; }\n-  \n-  static size_t\n-  length(const char_type* __s) { return 0; }\n-  \n-  static const char_type* \n-  find(const char_type* __s, size_t __n, const char_type& __a)\n-  { return __s; }\n-  \n-  static char_type* \n-  move(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  copy(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  assign(char_type* __s, size_t __n, char_type __a)\n-  { return __s; }\n-  \n-  static char_type \n-  to_char_type(const int_type& __c)\n-  { return char_type(); }\n-  \n-  static int_type \n-  to_int_type(const char_type& __c)\n-  { return int_type(); }\n-  \n-  static bool \n-  eq_int_type(const int_type& __c1, const int_type& __c2)\n-  { return true; }\n-  \n-  static int_type \n-  eof()\n-  { return int_type(); }\n-  \n-  static int_type \n-  not_eof(const int_type& __c)\n-  { return int_type(); }\n-};\n-\n void test07()\n {\n   bool test __attribute__((unused)) = true;\n-  typedef std::basic_filebuf<gnu_char_type, gnu_char_traits> gnu_filebuf;\n+  typedef std::basic_filebuf<__gnu_test::pod_ushort> gnu_filebuf;\n   \n   try\n     { "}, {"sha": "4b01bd10ef4f1237420e8b2a35854f7cfb32bca8", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/3.cc", "status": "modified", "additions": 3, "deletions": 90, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F3.cc?ref=31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "patch": "@@ -1,6 +1,6 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -24,101 +24,14 @@\n \n #include <fstream>\n #include <testsuite_hooks.h>\n-\n-// { dg-do compile }\n+#include <testsuite_character.h>\n \n // libstdc++/2020\n // should be able to use custom char_type, custom traits type\n-class gnu_char_type\n-{\n-  unsigned long character;\n-public:\n-  // operator ==\n-  bool\n-  operator==(const gnu_char_type& __lhs) \n-  { return character == __lhs.character; }\n-\n-  // operator <\n-  bool\n-  operator<(const gnu_char_type& __lhs) \n-  { return character < __lhs.character; }\n-\n-  // default ctor\n-  gnu_char_type() { }\n-\n-  // to_char_type\n-  gnu_char_type(const unsigned long& __l) : character(__l) { } \n-\n-  // to_int_type\n-  operator unsigned long() const { return character; }\n-};\n-\n-// char_traits specialization\n-struct gnu_char_traits\n-{\n-  typedef gnu_char_type\tchar_type;\n-  typedef long  \t\tint_type;\n-  typedef std::streamoff \toff_type;\n-  typedef long   \t\tstate_type;\n-  typedef std::fpos<state_type>\tpos_type;\n-  \n-  static void \n-  assign(char_type& __c1, const char_type& __c2) { }\n-  \n-  static bool \n-  eq(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static bool \n-  lt(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static int \n-  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-  { return 0; }\n-  \n-  static size_t\n-  length(const char_type* __s) { return 0; }\n-  \n-  static const char_type* \n-  find(const char_type* __s, size_t __n, const char_type& __a)\n-  { return __s; }\n-  \n-  static char_type* \n-  move(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  copy(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  assign(char_type* __s, size_t __n, char_type __a)\n-  { return __s; }\n-  \n-  static char_type \n-  to_char_type(const int_type& __c)\n-  { return char_type(); }\n-  \n-  static int_type \n-  to_int_type(const char_type& __c)\n-  { return int_type(); }\n-  \n-  static bool \n-  eq_int_type(const int_type& __c1, const int_type& __c2)\n-  { return true; }\n-  \n-  static int_type \n-  eof()\n-  { return int_type(); }\n-  \n-  static int_type \n-  not_eof(const int_type& __c)\n-  { return int_type(); }\n-};\n-\n void test07()\n {\n   bool test __attribute__((unused)) = true;\n-  typedef std::basic_fstream<gnu_char_type, gnu_char_traits> gnu_fstr;\n+  typedef std::basic_fstream<__gnu_test::pod_ushort> gnu_fstr;\n \n   try\n     { "}, {"sha": "896e7028c23b569fb7e4e9ea6b756905218b9395", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/3.cc", "status": "modified", "additions": 3, "deletions": 90, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F3.cc?ref=31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "patch": "@@ -1,6 +1,6 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -24,101 +24,14 @@\n \n #include <fstream>\n #include <testsuite_hooks.h>\n-\n-// { dg-do compile }\n+#include <testsuite_character.h>\n \n // libstdc++/2020\n // should be able to use custom char_type, custom traits type\n-class gnu_char_type\n-{\n-  unsigned long character;\n-public:\n-  // operator ==\n-  bool\n-  operator==(const gnu_char_type& __lhs) \n-  { return character == __lhs.character; }\n-\n-  // operator <\n-  bool\n-  operator<(const gnu_char_type& __lhs) \n-  { return character < __lhs.character; }\n-\n-  // default ctor\n-  gnu_char_type() { }\n-\n-  // to_char_type\n-  gnu_char_type(const unsigned long& __l) : character(__l) { } \n-\n-  // to_int_type\n-  operator unsigned long() const { return character; }\n-};\n-\n-// char_traits specialization\n-struct gnu_char_traits\n-{\n-  typedef gnu_char_type\tchar_type;\n-  typedef long  \t\tint_type;\n-  typedef std::streamoff \toff_type;\n-  typedef long   \t\tstate_type;\n-  typedef std::fpos<state_type>\tpos_type;\n-  \n-  static void \n-  assign(char_type& __c1, const char_type& __c2) { }\n-  \n-  static bool \n-  eq(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static bool \n-  lt(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static int \n-  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-  { return 0; }\n-  \n-  static size_t\n-  length(const char_type* __s) { return 0; }\n-  \n-  static const char_type* \n-  find(const char_type* __s, size_t __n, const char_type& __a)\n-  { return __s; }\n-  \n-  static char_type* \n-  move(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  copy(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  assign(char_type* __s, size_t __n, char_type __a)\n-  { return __s; }\n-  \n-  static char_type \n-  to_char_type(const int_type& __c)\n-  { return char_type(); }\n-  \n-  static int_type \n-  to_int_type(const char_type& __c)\n-  { return int_type(); }\n-  \n-  static bool \n-  eq_int_type(const int_type& __c1, const int_type& __c2)\n-  { return true; }\n-  \n-  static int_type \n-  eof()\n-  { return int_type(); }\n-  \n-  static int_type \n-  not_eof(const int_type& __c)\n-  { return int_type(); }\n-};\n-\n void test07()\n {\n   bool test __attribute__((unused)) = true;\n-  typedef std::basic_ifstream<gnu_char_type, gnu_char_traits> gnu_ifstr;\n+  typedef std::basic_ifstream<__gnu_test::pod_ushort> gnu_ifstr;\n \n   try\n     { "}, {"sha": "6b3f7006f45fdc56a149a4cd49b85798ced92ca7", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/3.cc", "status": "modified", "additions": 3, "deletions": 88, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F3.cc?ref=31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "patch": "@@ -1,6 +1,6 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -24,96 +24,11 @@\n \n #include <ios>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // libstdc++/2020\n // should be able to use custom char_type, custom traits type\n-class gnu_char_type\n-{\n-  unsigned long character;\n-public:\n-  // operator ==\n-  bool\n-  operator==(const gnu_char_type& __lhs) \n-  { return character == __lhs.character; }\n-\n-  // operator <\n-  bool\n-  operator<(const gnu_char_type& __lhs) \n-  { return character < __lhs.character; }\n-\n-  // default ctor\n-  gnu_char_type() { }\n-\n-  // to_char_type\n-  gnu_char_type(const unsigned long& __l) : character(__l) { } \n-\n-  // to_int_type\n-  operator unsigned long() const { return character; }\n-};\n-\n-// char_traits specialization\n-struct gnu_char_traits\n-{\n-  typedef gnu_char_type\tchar_type;\n-  typedef long  \t\tint_type;\n-  typedef long \t\tpos_type;\n-  typedef unsigned long \toff_type;\n-  typedef long   \t\tstate_type;\n-  \n-  static void \n-  assign(char_type& __c1, const char_type& __c2) { }\n-  \n-  static bool \n-  eq(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static bool \n-  lt(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static int \n-  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-  { return 0; }\n-  \n-  static size_t\n-  length(const char_type* __s) { return 0; }\n-  \n-  static const char_type* \n-  find(const char_type* __s, size_t __n, const char_type& __a)\n-  { return __s; }\n-  \n-  static char_type* \n-  move(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  copy(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  assign(char_type* __s, size_t __n, char_type __a)\n-  { return __s; }\n-  \n-  static char_type \n-  to_char_type(const int_type& __c)\n-  { return char_type(); }\n-  \n-  static int_type \n-  to_int_type(const char_type& __c)\n-  { return int_type(); }\n-  \n-  static bool \n-  eq_int_type(const int_type& __c1, const int_type& __c2)\n-  { return true; }\n-  \n-  static int_type \n-  eof()\n-  { return int_type(); }\n-  \n-  static int_type \n-  not_eof(const int_type& __c)\n-  { return int_type(); }\n-};\n-\n-class gnu_ios: public std::basic_ios<gnu_char_type, gnu_char_traits>\n+class gnu_ios: public std::basic_ios<__gnu_test::pod_ushort>\n { };\n \n void test07()"}, {"sha": "e0af3ebd3e67194e9d5af0c6e45bec0987b4b5dd", "filename": "libstdc++-v3/testsuite/27_io/basic_iostream/3.cc", "status": "modified", "additions": 3, "deletions": 90, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F3.cc?ref=31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "patch": "@@ -1,6 +1,6 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -24,101 +24,14 @@\n \n #include <iostream>\n #include <testsuite_hooks.h>\n-\n-// { dg-do compile }\n+#include <testsuite_character.h>\n \n // libstdc++/2020\n // should be able to use custom char_type, custom traits type\n-class gnu_char_type\n-{\n-  unsigned long character;\n-public:\n-  // operator ==\n-  bool\n-  operator==(const gnu_char_type& __lhs) \n-  { return character == __lhs.character; }\n-\n-  // operator <\n-  bool\n-  operator<(const gnu_char_type& __lhs) \n-  { return character < __lhs.character; }\n-\n-  // default ctor\n-  gnu_char_type() { }\n-\n-  // to_char_type\n-  gnu_char_type(const unsigned long& __l) : character(__l) { } \n-\n-  // to_int_type\n-  operator unsigned long() const { return character; }\n-};\n-\n-// char_traits specialization\n-struct gnu_char_traits\n-{\n-  typedef gnu_char_type\tchar_type;\n-  typedef long  \t\tint_type;\n-  typedef long \t\tpos_type;\n-  typedef unsigned long \toff_type;\n-  typedef long   \t\tstate_type;\n-  \n-  static void \n-  assign(char_type& __c1, const char_type& __c2) { }\n-  \n-  static bool \n-  eq(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static bool \n-  lt(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static int \n-  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-  { return 0; }\n-  \n-  static size_t\n-  length(const char_type* __s) { return 0; }\n-  \n-  static const char_type* \n-  find(const char_type* __s, size_t __n, const char_type& __a)\n-  { return __s; }\n-  \n-  static char_type* \n-  move(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  copy(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  assign(char_type* __s, size_t __n, char_type __a)\n-  { return __s; }\n-  \n-  static char_type \n-  to_char_type(const int_type& __c)\n-  { return char_type(); }\n-  \n-  static int_type \n-  to_int_type(const char_type& __c)\n-  { return int_type(); }\n-  \n-  static bool \n-  eq_int_type(const int_type& __c1, const int_type& __c2)\n-  { return true; }\n-  \n-  static int_type \n-  eof()\n-  { return int_type(); }\n-  \n-  static int_type \n-  not_eof(const int_type& __c)\n-  { return int_type(); }\n-};\n-\n void test07()\n {\n   bool test __attribute__((unused)) = true;\n-  typedef std::basic_iostream<gnu_char_type, gnu_char_traits> gnu_iostr;\n+  typedef std::basic_iostream<__gnu_test::pod_ushort> gnu_iostr;\n \n   try\n     { "}, {"sha": "a2cadef507cfa89a6109305301dcae2a6c91ede0", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/3.cc", "status": "modified", "additions": 3, "deletions": 90, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F3.cc?ref=31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "patch": "@@ -1,6 +1,6 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -24,101 +24,14 @@\n \n #include <istream>\n #include <testsuite_hooks.h>\n-\n-// { dg-do compile }\n+#include <testsuite_character.h>\n \n // libstdc++/2020\n // should be able to use custom char_type, custom traits type\n-class gnu_char_type\n-{\n-  unsigned long character;\n-public:\n-  // operator ==\n-  bool\n-  operator==(const gnu_char_type& __lhs) \n-  { return character == __lhs.character; }\n-\n-  // operator <\n-  bool\n-  operator<(const gnu_char_type& __lhs) \n-  { return character < __lhs.character; }\n-\n-  // default ctor\n-  gnu_char_type() { }\n-\n-  // to_char_type\n-  gnu_char_type(const unsigned long& __l) : character(__l) { } \n-\n-  // to_int_type\n-  operator unsigned long() const { return character; }\n-};\n-\n-// char_traits specialization\n-struct gnu_char_traits\n-{\n-  typedef gnu_char_type\tchar_type;\n-  typedef long  \t\tint_type;\n-  typedef long \t\tpos_type;\n-  typedef unsigned long \toff_type;\n-  typedef long   \t\tstate_type;\n-  \n-  static void \n-  assign(char_type& __c1, const char_type& __c2) { }\n-  \n-  static bool \n-  eq(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static bool \n-  lt(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static int \n-  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-  { return 0; }\n-  \n-  static size_t\n-  length(const char_type* __s) { return 0; }\n-  \n-  static const char_type* \n-  find(const char_type* __s, size_t __n, const char_type& __a)\n-  { return __s; }\n-  \n-  static char_type* \n-  move(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  copy(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  assign(char_type* __s, size_t __n, char_type __a)\n-  { return __s; }\n-  \n-  static char_type \n-  to_char_type(const int_type& __c)\n-  { return char_type(); }\n-  \n-  static int_type \n-  to_int_type(const char_type& __c)\n-  { return int_type(); }\n-  \n-  static bool \n-  eq_int_type(const int_type& __c1, const int_type& __c2)\n-  { return true; }\n-  \n-  static int_type \n-  eof()\n-  { return int_type(); }\n-  \n-  static int_type \n-  not_eof(const int_type& __c)\n-  { return int_type(); }\n-};\n-\n void test07()\n {\n   bool test __attribute__((unused)) = true;\n-  typedef std::basic_istream<gnu_char_type, gnu_char_traits> gnu_istr;\n+  typedef std::basic_istream<__gnu_test::pod_ushort> gnu_istr;\n \n   try\n     { gnu_istr obj(NULL); }"}, {"sha": "9f5285a7df17ea2396f25db0edb39445e1290d06", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/3.cc", "status": "modified", "additions": 3, "deletions": 90, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F3.cc?ref=31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "patch": "@@ -1,6 +1,6 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -24,101 +24,14 @@\n \n #include <sstream>\n #include <testsuite_hooks.h>\n-\n-// { dg-do compile }\n+#include <testsuite_character.h>\n \n // libstdc++/2020\n // should be able to use custom char_type, custom traits type\n-class gnu_char_type\n-{\n-  unsigned long character;\n-public:\n-  // operator ==\n-  bool\n-  operator==(const gnu_char_type& __lhs) \n-  { return character == __lhs.character; }\n-\n-  // operator <\n-  bool\n-  operator<(const gnu_char_type& __lhs) \n-  { return character < __lhs.character; }\n-\n-  // default ctor\n-  gnu_char_type() { }\n-\n-  // to_char_type\n-  gnu_char_type(const unsigned long& __l) : character(__l) { } \n-\n-  // to_int_type\n-  operator unsigned long() const { return character; }\n-};\n-\n-// char_traits specialization\n-struct gnu_char_traits\n-{\n-  typedef gnu_char_type\tchar_type;\n-  typedef long  \t\tint_type;\n-  typedef long \t\tpos_type;\n-  typedef long \toff_type;\n-  typedef long   \t\tstate_type;\n-  \n-  static void \n-  assign(char_type& __c1, const char_type& __c2) { }\n-  \n-  static bool \n-  eq(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static bool \n-  lt(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static int \n-  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-  { return 0; }\n-  \n-  static size_t\n-  length(const char_type* __s) { return 0; }\n-  \n-  static const char_type* \n-  find(const char_type* __s, size_t __n, const char_type& __a)\n-  { return __s; }\n-  \n-  static char_type* \n-  move(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  copy(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  assign(char_type* __s, size_t __n, char_type __a)\n-  { return __s; }\n-  \n-  static char_type \n-  to_char_type(const int_type& __c)\n-  { return char_type(); }\n-  \n-  static int_type \n-  to_int_type(const char_type& __c)\n-  { return int_type(); }\n-  \n-  static bool \n-  eq_int_type(const int_type& __c1, const int_type& __c2)\n-  { return true; }\n-  \n-  static int_type \n-  eof()\n-  { return int_type(); }\n-  \n-  static int_type \n-  not_eof(const int_type& __c)\n-  { return int_type(); }\n-};\n-\n void test07()\n {\n   bool test __attribute__((unused)) = true;\n-  typedef std::basic_istringstream<gnu_char_type, gnu_char_traits> gnu_isstr;\n+  typedef std::basic_istringstream<__gnu_test::pod_ushort> gnu_isstr;\n \n   try\n     { "}, {"sha": "8ef65088924ba8624e2efb3d613ddd1f8a5a95aa", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/3.cc", "status": "modified", "additions": 3, "deletions": 90, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F3.cc?ref=31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "patch": "@@ -1,6 +1,6 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -24,101 +24,14 @@\n \n #include <fstream>\n #include <testsuite_hooks.h>\n-\n-// { dg-do compile }\n+#include <testsuite_character.h>\n \n // libstdc++/2020\n // should be able to use custom char_type, custom traits type\n-class gnu_char_type\n-{\n-  unsigned long character;\n-public:\n-  // operator ==\n-  bool\n-  operator==(const gnu_char_type& __lhs) \n-  { return character == __lhs.character; }\n-\n-  // operator <\n-  bool\n-  operator<(const gnu_char_type& __lhs) \n-  { return character < __lhs.character; }\n-\n-  // default ctor\n-  gnu_char_type() { }\n-\n-  // to_char_type\n-  gnu_char_type(const unsigned long& __l) : character(__l) { } \n-\n-  // to_int_type\n-  operator unsigned long() const { return character; }\n-};\n-\n-// char_traits specialization\n-struct gnu_char_traits\n-{\n-  typedef gnu_char_type\tchar_type;\n-  typedef long  \t\tint_type;\n-  typedef std::streamoff \toff_type;\n-  typedef long   \t\tstate_type;\n-  typedef std::fpos<state_type>\tpos_type;\n-  \n-  static void \n-  assign(char_type& __c1, const char_type& __c2) { }\n-  \n-  static bool \n-  eq(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static bool \n-  lt(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static int \n-  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-  { return 0; }\n-  \n-  static size_t\n-  length(const char_type* __s) { return 0; }\n-  \n-  static const char_type* \n-  find(const char_type* __s, size_t __n, const char_type& __a)\n-  { return __s; }\n-  \n-  static char_type* \n-  move(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  copy(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  assign(char_type* __s, size_t __n, char_type __a)\n-  { return __s; }\n-  \n-  static char_type \n-  to_char_type(const int_type& __c)\n-  { return char_type(); }\n-  \n-  static int_type \n-  to_int_type(const char_type& __c)\n-  { return int_type(); }\n-  \n-  static bool \n-  eq_int_type(const int_type& __c1, const int_type& __c2)\n-  { return true; }\n-  \n-  static int_type \n-  eof()\n-  { return int_type(); }\n-  \n-  static int_type \n-  not_eof(const int_type& __c)\n-  { return int_type(); }\n-};\n-\n void test07()\n {\n   bool test __attribute__((unused)) = true;\n-  typedef std::basic_ofstream<gnu_char_type, gnu_char_traits> gnu_ofstr;\n+  typedef std::basic_ofstream<__gnu_test::pod_ushort> gnu_ofstr;\n \n   try\n     { "}, {"sha": "517176628f37ddb62bb59701c35004c28e8dc436", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/3.cc", "status": "modified", "additions": 3, "deletions": 90, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F3.cc?ref=31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "patch": "@@ -1,6 +1,6 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -24,101 +24,14 @@\n \n #include <ostream>\n #include <testsuite_hooks.h>\n-\n-// { dg-do compile }\n+#include <testsuite_character.h>\n \n // libstdc++/2020\n // should be able to use custom char_type, custom traits type\n-class gnu_char_type\n-{\n-  unsigned long character;\n-public:\n-  // operator ==\n-  bool\n-  operator==(const gnu_char_type& __lhs) \n-  { return character == __lhs.character; }\n-\n-  // operator <\n-  bool\n-  operator<(const gnu_char_type& __lhs) \n-  { return character < __lhs.character; }\n-\n-  // default ctor\n-  gnu_char_type() { }\n-\n-  // to_char_type\n-  gnu_char_type(const unsigned long& __l) : character(__l) { } \n-\n-  // to_int_type\n-  operator unsigned long() const { return character; }\n-};\n-\n-// char_traits specialization\n-struct gnu_char_traits\n-{\n-  typedef gnu_char_type\tchar_type;\n-  typedef long  \t\tint_type;\n-  typedef long \t\tpos_type;\n-  typedef unsigned long \toff_type;\n-  typedef long   \t\tstate_type;\n-  \n-  static void \n-  assign(char_type& __c1, const char_type& __c2) { }\n-  \n-  static bool \n-  eq(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static bool \n-  lt(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static int \n-  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-  { return 0; }\n-  \n-  static size_t\n-  length(const char_type* __s) { return 0; }\n-  \n-  static const char_type* \n-  find(const char_type* __s, size_t __n, const char_type& __a)\n-  { return __s; }\n-  \n-  static char_type* \n-  move(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  copy(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  assign(char_type* __s, size_t __n, char_type __a)\n-  { return __s; }\n-  \n-  static char_type \n-  to_char_type(const int_type& __c)\n-  { return char_type(); }\n-  \n-  static int_type \n-  to_int_type(const char_type& __c)\n-  { return int_type(); }\n-  \n-  static bool \n-  eq_int_type(const int_type& __c1, const int_type& __c2)\n-  { return true; }\n-  \n-  static int_type \n-  eof()\n-  { return int_type(); }\n-  \n-  static int_type \n-  not_eof(const int_type& __c)\n-  { return int_type(); }\n-};\n-\n void test07()\n {\n   bool test __attribute__((unused)) = true;\n-  typedef std::basic_ostream<gnu_char_type, gnu_char_traits> gnu_ostr;\n+  typedef std::basic_ostream<__gnu_test::pod_ushort> gnu_ostr;\n \n   try\n     { "}, {"sha": "e68ea0eeacd0ff3b091ef15d5a9c5f03630e4ea5", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/3.cc", "status": "modified", "additions": 3, "deletions": 90, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F3.cc?ref=31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "patch": "@@ -1,6 +1,6 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -24,101 +24,14 @@\n \n #include <sstream>\n #include <testsuite_hooks.h>\n-\n-// { dg-do compile }\n+#include <testsuite_character.h>\n \n // libstdc++/2020\n // should be able to use custom char_type, custom traits type\n-class gnu_char_type\n-{\n-  unsigned long character;\n-public:\n-  // operator ==\n-  bool\n-  operator==(const gnu_char_type& __lhs) \n-  { return character == __lhs.character; }\n-\n-  // operator <\n-  bool\n-  operator<(const gnu_char_type& __lhs) \n-  { return character < __lhs.character; }\n-\n-  // default ctor\n-  gnu_char_type() { }\n-\n-  // to_char_type\n-  gnu_char_type(const unsigned long& __l) : character(__l) { } \n-\n-  // to_int_type\n-  operator unsigned long() const { return character; }\n-};\n-\n-// char_traits specialization\n-struct gnu_char_traits\n-{\n-  typedef gnu_char_type\tchar_type;\n-  typedef long  \t\tint_type;\n-  typedef long \t\tpos_type;\n-  typedef long \toff_type;\n-  typedef long   \t\tstate_type;\n-  \n-  static void \n-  assign(char_type& __c1, const char_type& __c2) { }\n-  \n-  static bool \n-  eq(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static bool \n-  lt(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static int \n-  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-  { return 0; }\n-  \n-  static size_t\n-  length(const char_type* __s) { return 0; }\n-  \n-  static const char_type* \n-  find(const char_type* __s, size_t __n, const char_type& __a)\n-  { return __s; }\n-  \n-  static char_type* \n-  move(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  copy(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  assign(char_type* __s, size_t __n, char_type __a)\n-  { return __s; }\n-  \n-  static char_type \n-  to_char_type(const int_type& __c)\n-  { return char_type(); }\n-  \n-  static int_type \n-  to_int_type(const char_type& __c)\n-  { return int_type(); }\n-  \n-  static bool \n-  eq_int_type(const int_type& __c1, const int_type& __c2)\n-  { return true; }\n-  \n-  static int_type \n-  eof()\n-  { return int_type(); }\n-  \n-  static int_type \n-  not_eof(const int_type& __c)\n-  { return int_type(); }\n-};\n-\n void test07()\n {\n   bool test __attribute__((unused)) = true;\n-  typedef std::basic_ostringstream<gnu_char_type, gnu_char_traits> gnu_osstr;\n+  typedef std::basic_ostringstream<__gnu_test::pod_ushort> gnu_osstr;\n \n   try\n     { "}, {"sha": "765ca167d3898500622c10d9555da18315e3e14f", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/3.cc", "status": "modified", "additions": 3, "deletions": 88, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2F3.cc?ref=31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "patch": "@@ -1,6 +1,6 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -24,96 +24,11 @@\n \n #include <fstream>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // libstdc++/2020\n // should be able to use custom char_type, custom traits type\n-class gnu_char_type\n-{\n-  unsigned long character;\n-public:\n-  // operator ==\n-  bool\n-  operator==(const gnu_char_type& __lhs) \n-  { return character == __lhs.character; }\n-\n-  // operator <\n-  bool\n-  operator<(const gnu_char_type& __lhs) \n-  { return character < __lhs.character; }\n-\n-  // default ctor\n-  gnu_char_type() { }\n-\n-  // to_char_type\n-  gnu_char_type(const unsigned long& __l) : character(__l) { } \n-\n-  // to_int_type\n-  operator unsigned long() const { return character; }\n-};\n-\n-// char_traits specialization\n-struct gnu_char_traits\n-{\n-  typedef gnu_char_type\tchar_type;\n-  typedef long  \t\tint_type;\n-  typedef long \t\tpos_type;\n-  typedef unsigned long \toff_type;\n-  typedef long   \t\tstate_type;\n-  \n-  static void \n-  assign(char_type& __c1, const char_type& __c2) { }\n-  \n-  static bool \n-  eq(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static bool \n-  lt(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static int \n-  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-  { return 0; }\n-  \n-  static size_t\n-  length(const char_type* __s) { return 0; }\n-  \n-  static const char_type* \n-  find(const char_type* __s, size_t __n, const char_type& __a)\n-  { return __s; }\n-  \n-  static char_type* \n-  move(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  copy(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  assign(char_type* __s, size_t __n, char_type __a)\n-  { return __s; }\n-  \n-  static char_type \n-  to_char_type(const int_type& __c)\n-  { return char_type(); }\n-  \n-  static int_type \n-  to_int_type(const char_type& __c)\n-  { return int_type(); }\n-  \n-  static bool \n-  eq_int_type(const int_type& __c1, const int_type& __c2)\n-  { return true; }\n-  \n-  static int_type \n-  eof()\n-  { return int_type(); }\n-  \n-  static int_type \n-  not_eof(const int_type& __c)\n-  { return int_type(); }\n-};\n-\n-class gnu_sbuf: public std::basic_streambuf<gnu_char_type, gnu_char_traits>\n+class gnu_sbuf: public std::basic_streambuf<__gnu_test::pod_ushort>\n { };\n \n void test07()"}, {"sha": "ced07b58fae7ec1f79d27b69b21ff91747299f35", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/3.cc", "status": "modified", "additions": 3, "deletions": 88, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F3.cc?ref=31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "patch": "@@ -1,6 +1,6 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -24,99 +24,14 @@\n \n #include <sstream>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // libstdc++/2020\n // should be able to use custom char_type, custom traits type\n-class gnu_char_type\n-{\n-  unsigned long character;\n-public:\n-  // operator ==\n-  bool\n-  operator==(const gnu_char_type& __lhs) \n-  { return character == __lhs.character; }\n-\n-  // operator <\n-  bool\n-  operator<(const gnu_char_type& __lhs) \n-  { return character < __lhs.character; }\n-\n-  // default ctor\n-  gnu_char_type() { }\n-\n-  // to_char_type\n-  gnu_char_type(const unsigned long& __l) : character(__l) { } \n-\n-  // to_int_type\n-  operator unsigned long() const { return character; }\n-};\n-\n-// char_traits specialization\n-struct gnu_char_traits\n-{\n-  typedef gnu_char_type\tchar_type;\n-  typedef long  \t\tint_type;\n-  typedef long \t\tpos_type;\n-  typedef long \toff_type;\n-  typedef long   \t\tstate_type;\n-  \n-  static void \n-  assign(char_type& __c1, const char_type& __c2) { }\n-  \n-  static bool \n-  eq(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static bool \n-  lt(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static int \n-  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-  { return 0; }\n-  \n-  static size_t\n-  length(const char_type* __s) { return 0; }\n-  \n-  static const char_type* \n-  find(const char_type* __s, size_t __n, const char_type& __a)\n-  { return __s; }\n-  \n-  static char_type* \n-  move(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  copy(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  assign(char_type* __s, size_t __n, char_type __a)\n-  { return __s; }\n-  \n-  static char_type \n-  to_char_type(const int_type& __c)\n-  { return char_type(); }\n-  \n-  static int_type \n-  to_int_type(const char_type& __c)\n-  { return int_type(); }\n-  \n-  static bool \n-  eq_int_type(const int_type& __c1, const int_type& __c2)\n-  { return true; }\n-  \n-  static int_type \n-  eof()\n-  { return int_type(); }\n-  \n-  static int_type \n-  not_eof(const int_type& __c)\n-  { return int_type(); }\n-};\n-\n void test07()\n {\n   bool test __attribute__((unused)) = true;\n-  typedef std::basic_stringbuf<gnu_char_type, gnu_char_traits> gnu_ssbuf;\n+  typedef std::basic_stringbuf<__gnu_test::pod_ushort> gnu_ssbuf;\n   \n   try\n     { gnu_ssbuf obj; }"}, {"sha": "d47a67a084589088c60a773da4f9cb6115389276", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/3.cc", "status": "modified", "additions": 3, "deletions": 90, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31131ac1e6325565c3927b57ef3d4bd3bf6c042b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F3.cc?ref=31131ac1e6325565c3927b57ef3d4bd3bf6c042b", "patch": "@@ -1,6 +1,6 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -24,101 +24,14 @@\n \n #include <sstream>\n #include <testsuite_hooks.h>\n-\n-// { dg-do compile }\n+#include <testsuite_character.h>\n \n // libstdc++/2020\n // should be able to use custom char_type, custom traits type\n-class gnu_char_type\n-{\n-  unsigned long character;\n-public:\n-  // operator ==\n-  bool\n-  operator==(const gnu_char_type& __lhs) \n-  { return character == __lhs.character; }\n-\n-  // operator <\n-  bool\n-  operator<(const gnu_char_type& __lhs) \n-  { return character < __lhs.character; }\n-\n-  // default ctor\n-  gnu_char_type() { }\n-\n-  // to_char_type\n-  gnu_char_type(const unsigned long& __l) : character(__l) { } \n-\n-  // to_int_type\n-  operator unsigned long() const { return character; }\n-};\n-\n-// char_traits specialization\n-struct gnu_char_traits\n-{\n-  typedef gnu_char_type\tchar_type;\n-  typedef long  \t\tint_type;\n-  typedef long \t\tpos_type;\n-  typedef long \toff_type;\n-  typedef long   \t\tstate_type;\n-  \n-  static void \n-  assign(char_type& __c1, const char_type& __c2) { }\n-  \n-  static bool \n-  eq(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static bool \n-  lt(const char_type& __c1, const char_type& __c2) { return true; }\n-  \n-  static int \n-  compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-  { return 0; }\n-  \n-  static size_t\n-  length(const char_type* __s) { return 0; }\n-  \n-  static const char_type* \n-  find(const char_type* __s, size_t __n, const char_type& __a)\n-  { return __s; }\n-  \n-  static char_type* \n-  move(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  copy(char_type* __s1, const char_type* __s2, size_t __n)\n-  { return __s1; }\n-  \n-  static char_type* \n-  assign(char_type* __s, size_t __n, char_type __a)\n-  { return __s; }\n-  \n-  static char_type \n-  to_char_type(const int_type& __c)\n-  { return char_type(); }\n-  \n-  static int_type \n-  to_int_type(const char_type& __c)\n-  { return int_type(); }\n-  \n-  static bool \n-  eq_int_type(const int_type& __c1, const int_type& __c2)\n-  { return true; }\n-  \n-  static int_type \n-  eof()\n-  { return int_type(); }\n-  \n-  static int_type \n-  not_eof(const int_type& __c)\n-  { return int_type(); }\n-};\n-\n void test07()\n {\n   bool test __attribute__((unused)) = true;\n-  typedef std::basic_stringstream<gnu_char_type, gnu_char_traits> gnu_sstr;\n+  typedef std::basic_stringstream<__gnu_test::pod_ushort> gnu_sstr;\n \n   try\n     { "}]}