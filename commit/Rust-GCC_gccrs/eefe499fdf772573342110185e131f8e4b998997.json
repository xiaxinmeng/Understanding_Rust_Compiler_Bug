{"sha": "eefe499fdf772573342110185e131f8e4b998997", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVmZTQ5OWZkZjc3MjU3MzM0MjExMDE4NWUxMzFmOGU0Yjk5ODk5Nw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-17T00:16:37Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-17T00:16:37Z"}, "message": "Daily bump.", "tree": {"sha": "f045f2e75f4b58b587fa8c7536c1eeb264804725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f045f2e75f4b58b587fa8c7536c1eeb264804725"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eefe499fdf772573342110185e131f8e4b998997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eefe499fdf772573342110185e131f8e4b998997", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eefe499fdf772573342110185e131f8e4b998997", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eefe499fdf772573342110185e131f8e4b998997/comments", "author": null, "committer": null, "parents": [{"sha": "0b76990a9d75d97b84014e37519086b81824c307", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b76990a9d75d97b84014e37519086b81824c307", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b76990a9d75d97b84014e37519086b81824c307"}], "stats": {"total": 865, "additions": 864, "deletions": 1}, "files": [{"sha": "348bfa522eb021bdf7750c3febdbd67834d7cf33", "filename": "c++tools/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe499fdf772573342110185e131f8e4b998997/c%2B%2Btools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe499fdf772573342110185e131f8e4b998997/c%2B%2Btools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/c%2B%2Btools%2FChangeLog?ref=eefe499fdf772573342110185e131f8e4b998997", "patch": "@@ -1,3 +1,18 @@\n+2020-12-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* Makefile.in (INSTALL): Replace with ...\n+\t(INSTALL_PROGRAM): ... this.\n+\t(INSTALL_STRIP_PROGRAM): New.\n+\t(install-strip): New target.\n+\t(install): Use INSTALL_PROGRAM.\n+\t* configure.ac: Add INSTALL_PROGRAM.\n+\t* configure: Regenerated.\n+\n+2020-12-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* Makefile.in (install): Do not use -p, use mkinstalldirs.\n+\t(clean): Fix typo.\n+\n 2020-12-15  Nathan Sidwell  <nathan@acm.org>\n \n \t* Makefile.in: New."}, {"sha": "823ff97210557d443f573f5198744b36b1a6fae7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 417, "deletions": 0, "changes": 417, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe499fdf772573342110185e131f8e4b998997/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe499fdf772573342110185e131f8e4b998997/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eefe499fdf772573342110185e131f8e4b998997", "patch": "@@ -1,3 +1,420 @@\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* fwprop.c: Rewrite to use the RTL SSA framework.\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* configure.ac: Add rtl-ssa to the list of dependence directories.\n+\t* configure: Regenerate.\n+\t* Makefile.in (rtl-ssa-warn): New variable.\n+\t(OBJS): Add the rtl-ssa object files.\n+\t* emit-rtl.h (rtl_data::ssa): New field.\n+\t* rtl-ssa.h: New file.\n+\t* system.h: Include <functional> when INCLUDE_FUNCTIONAL is defined.\n+\t* rtl-ssa/access-utils.h: Likewise.\n+\t* rtl-ssa/accesses.h: New file.\n+\t* rtl-ssa/accesses.cc: Likewise.\n+\t* rtl-ssa/blocks.h: New file.\n+\t* rtl-ssa/blocks.cc: Likewise.\n+\t* rtl-ssa/change-utils.h: Likewise.\n+\t* rtl-ssa/changes.h: New file.\n+\t* rtl-ssa/changes.cc: Likewise.\n+\t* rtl-ssa/functions.h: New file.\n+\t* rtl-ssa/functions.cc: Likewise.\n+\t* rtl-ssa/insn-utils.h: Likewise.\n+\t* rtl-ssa/insns.h: New file.\n+\t* rtl-ssa/insns.cc: Likewise.\n+\t* rtl-ssa/internals.inl: Likewise.\n+\t* rtl-ssa/is-a.inl: Likewise.\n+\t* rtl-ssa/member-fns.inl: Likewise.\n+\t* rtl-ssa/movement.h: Likewise.\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* doc/rtl.texi (RTL SSA): New node.\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* rtl.h (simple_regno_set): Declare.\n+\t* rtlanal.c (simple_regno_set): New function.\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* rtlanal.h: New file.\n+\t(MEM_REGNO): New constant.\n+\t(rtx_obj_flags): New namespace.\n+\t(rtx_obj_reference, rtx_properties): New classes.\n+\t(growing_rtx_properties, vec_rtx_properties_base): Likewise.\n+\t(vec_rtx_properties): New alias.\n+\t* rtlanal.c: Include it.\n+\t(rtx_properties::try_to_add_reg): New function.\n+\t(rtx_properties::try_to_add_dest): Likewise.\n+\t(rtx_properties::try_to_add_src): Likewise.\n+\t(rtx_properties::try_to_add_pattern): Likewise.\n+\t(rtx_properties::try_to_add_insn): Likewise.\n+\t(vec_rtx_properties_base::grow): Likewise.\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* recog.h (insn_change_watermark): New class.\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* recog.h (insn_propagation): New class.\n+\t* recog.c (insn_propagation::apply_to_mem_1): New function.\n+\t(insn_propagation::apply_to_rvalue_1): Likewise.\n+\t(insn_propagation::apply_to_lvalue_1): Likewise.\n+\t(insn_propagation::apply_to_pattern_1): Likewise.\n+\t(insn_propagation::apply_to_pattern): Likewise.\n+\t(insn_propagation::apply_to_rvalue): Likewise.\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* recog.h (temporarily_undo_changes, redo_changes): Declare.\n+\t* recog.c (temporarily_undone_changes): New variable.\n+\t(validate_change_1, confirm_change_group): Check that it's zero.\n+\t(cancel_changes): Likewise.\n+\t(swap_change, temporarily_undo_changes): New functions.\n+\t(redo_changes): Likewise.\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* recog.h (validate_change_xveclen): Declare.\n+\t* recog.c (change_t::old_len): New field.\n+\t(validate_change_1): Add a new_len parameter.  Conditionally\n+\treplace the XVECLEN of an rtx, avoiding single-element PARALLELs.\n+\t(validate_change_xveclen): New function.\n+\t(cancel_changes): Undo changes made by validate_change_xveclen.\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* rtl.h (simplify_context): New class.\n+\t(simplify_unary_operation, simplify_binary_operation): Use it.\n+\t(simplify_ternary_operation, simplify_relational_operation): Likewise.\n+\t(simplify_subreg, simplify_gen_unary, simplify_gen_binary): Likewise.\n+\t(simplify_gen_ternary, simplify_gen_relational): Likewise.\n+\t(simplify_gen_subreg, lowpart_subreg): Likewise.\n+\t* simplify-rtx.c (simplify_gen_binary): Turn into a member function\n+\tof simplify_context.\n+\t(simplify_gen_unary, simplify_gen_ternary, simplify_gen_relational)\n+\t(simplify_truncation, simplify_unary_operation): Likewise.\n+\t(simplify_unary_operation_1, simplify_byte_swapping_operation)\n+\t(simplify_associative_operation, simplify_logical_relational_operation)\n+\t(simplify_binary_operation, simplify_binary_operation_series)\n+\t(simplify_distributive_operation, simplify_plus_minus): Likewise.\n+\t(simplify_relational_operation, simplify_relational_operation_1)\n+\t(simplify_cond_clz_ctz, simplify_merge_mask): Likewise.\n+\t(simplify_ternary_operation, simplify_subreg, simplify_gen_subreg)\n+\t(lowpart_subreg): Likewise.\n+\t(simplify_binary_operation_1): Likewise.  Test mem_depth when\n+\tdeciding whether the ASHIFT or MULT form is canonical.\n+\t(simplify_merge_mask): Use simplify_context.\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* rtl.h (register_asm_p): Declare.\n+\t* recog.c (verify_changes): Split out the test for whether\n+\ta hard register is a register asm to...\n+\t* rtlanal.c (register_asm_p): ...this new function.\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* print-rtl.h (print_insn_with_notes): Declare.\n+\t* print-rtl.c (print_insn_with_notes): Make non-static\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* cfgrtl.h (update_cfg_for_uncondjump): Declare.\n+\t* combine.c (update_cfg_for_uncondjump): Move to...\n+\t* cfgrtl.c: ...here.\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* vec.h (array_slice): New class.\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* Makefile.in (OBJS): Add splay-tree-utils.o.\n+\t* system.h: Include <array> when INCLUDE_ARRAY is defined.\n+\t* selftest.h (splay_tree_cc_tests): Declare.\n+\t* selftest-run-tests.c (selftest::run_tests): Run splay_tree_cc_tests.\n+\t* splay-tree-utils.h: New file.\n+\t* splay-tree-utils.tcc: Likewise.\n+\t* splay-tree-utils.cc: Likewise.\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* mux-utils.h: New file.\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* obstack-utils.h: New file.\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* iterator-utils.h (derived_iterator): New class.\n+\t(const_derived_container, wrapper_iterator): Likewise.\n+\t(list_iterator): Likewise.\n+\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hard-reg-set.h (global_reg_set): Declare.\n+\t* reginfo.c (global_reg_set): New variable.\n+\t(init_reg_sets_1, globalize_reg): Update it when globalizing\n+\tregisters.\n+\n+2020-12-16  Piotr Kubaj  <pkubaj@FreeBSD.org>\n+\n+\t* config.gcc (powerpc*le-*-freebsd*): Add.\n+\t* configure.ac (powerpc*le-*-freebsd*): Ditto.\n+\t* configure: Regenerate.\n+\t* config/rs6000/freebsd64.h (ASM_SPEC_COMMON): Use ENDIAN_SELECT.\n+\t(DEFAULT_ASM_ENDIAN): Add little endian support.\n+\t(LINK_OS_FREEBSD_SPEC64): Ditto.\n+\n+2020-12-16  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa.c (xtensa_emit_move_sequence): Try to\n+\treplace 'l32r' with 'movi' + 'slli' when optimizing for size.\n+\t* config/xtensa/xtensa.md (movdi): Split loading DI mode constant\n+\tinto register pair into two loads of SI mode constants.\n+\n+2020-12-16  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/arm/arm_mve.h (__arm_vcmulq_rot90_f16):\n+\t(__arm_vcmulq_rot270_f16, _arm_vcmulq_rot180_f16, __arm_vcmulq_f16,\n+\t__arm_vcmulq_rot90_f32, __arm_vcmulq_rot270_f32,\n+\t__arm_vcmulq_rot180_f32, __arm_vcmulq_f32, __arm_vcmlaq_f16,\n+\t__arm_vcmlaq_rot180_f16, __arm_vcmlaq_rot270_f16,\n+\t__arm_vcmlaq_rot90_f16, __arm_vcmlaq_f32, __arm_vcmlaq_rot180_f32,\n+\t__arm_vcmlaq_rot270_f32, __arm_vcmlaq_rot90_f32): Update builtin calls.\n+\t* config/arm/arm_mve_builtins.def (vcmulq_f, vcmulq_rot90_f,\n+\tvcmulq_rot180_f, vcmulq_rot270_f, vcmlaq_f, vcmlaq_rot90_f,\n+\tvcmlaq_rot180_f, vcmlaq_rot270_f): Removed.\n+\t(vcmulq, vcmulq_rot90, vcmulq_rot180, vcmulq_rot270, vcmlaq,\n+\tvcmlaq_rot90, vcmlaq_rot180, vcmlaq_rot270): New.\n+\t* config/arm/iterators.md (mve_rot): Add UNSPEC_VCMLA, UNSPEC_VCMLA90,\n+\tUNSPEC_VCMLA180, UNSPEC_VCMLA270, UNSPEC_VCMUL, UNSPEC_VCMUL90,\n+\tUNSPEC_VCMUL180, UNSPEC_VCMUL270.\n+\t(VCMUL): New.\n+\t* config/arm/mve.md (mve_vcmulq_f<mode, mve_vcmulq_rot180_f<mode>,\n+\tmve_vcmulq_rot270_f<mode>, mve_vcmulq_rot90_f<mode>, mve_vcmlaq_f<mode>,\n+\tmve_vcmlaq_rot180_f<mode>, mve_vcmlaq_rot270_f<mode>,\n+\tmve_vcmlaq_rot90_f<mode>): Removed.\n+\t(mve_vcmlaq<mve_rot><mode>, mve_vcmulq<mve_rot><mode>,\n+\tmve_vcaddq<mve_rot><mode>, cadd<rot><mode>3, mve_vcaddq<mve_rot><mode>):\n+\tNew.\n+\t* config/arm/unspecs.md (UNSPEC_VCMUL90, UNSPEC_VCMUL270, UNSPEC_VCMUL,\n+\tUNSPEC_VCMUL180): New.\n+\t(VCMULQ_F, VCMULQ_ROT180_F, VCMULQ_ROT270_F, VCMULQ_ROT90_F,\n+\tVCMLAQ_F, VCMLAQ_ROT180_F, VCMLAQ_ROT90_F, VCMLAQ_ROT270_F): Removed.\n+\n+2020-12-16  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/arm/arm_mve.h (__arm_vcaddq_rot90_u8, __arm_vcaddq_rot270_u8,\n+\t__arm_vcaddq_rot90_s8, __arm_vcaddq_rot270_s8,\n+\t__arm_vcaddq_rot90_u16, __arm_vcaddq_rot270_u16,\n+\t__arm_vcaddq_rot90_s16, __arm_vcaddq_rot270_s16,\n+\t__arm_vcaddq_rot90_u32, __arm_vcaddq_rot270_u32,\n+\t__arm_vcaddq_rot90_s32, __arm_vcaddq_rot270_s32,\n+\t__arm_vcaddq_rot90_f16, __arm_vcaddq_rot270_f16,\n+\t__arm_vcaddq_rot90_f32, __arm_vcaddq_rot270_f32):  Update builtin calls.\n+\t* config/arm/arm_mve_builtins.def (vcaddq_rot90_u, vcaddq_rot270_u,\n+\tvcaddq_rot90_s, vcaddq_rot270_s, vcaddq_rot90_f, vcaddq_rot270_f):\n+\tRemoved.\n+\t(vcaddq_rot90, vcaddq_rot270): New.\n+\t* config/arm/constraints.md (Dz): Include MVE.\n+\t* config/arm/iterators.md (mve_rot): New.\n+\t(supf): Remove VCADDQ_ROT270_S, VCADDQ_ROT270_U, VCADDQ_ROT90_S,\n+\tVCADDQ_ROT90_U.\n+\t(VCADDQ_ROT270, VCADDQ_ROT90): Removed.\n+\t* config/arm/mve.md (mve_vcaddq_rot270_<supf><mode,\n+\tmve_vcaddq_rot90_<supf><mode>, mve_vcaddq_rot270_f<mode>,\n+\tmve_vcaddq_rot90_f<mode>): Removed.\n+\t(mve_vcaddq<mve_rot><mode>, mve_vcaddq<mve_rot><mode>): New.\n+\t* config/arm/unspecs.md (VCADDQ_ROT270_S, VCADDQ_ROT90_S,\n+\tVCADDQ_ROT270_U, VCADDQ_ROT90_U, VCADDQ_ROT270_F,\n+\tVCADDQ_ROT90_F): Removed.\n+\t* config/arm/vec-common.md (cadd<rot><mode>3): New.\n+\n+2020-12-16  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (cadd<rot><mode>3): New.\n+\t* config/aarch64/iterators.md (SVE2_INT_CADD_OP): New.\n+\t* config/aarch64/aarch64-sve.md (cadd<rot><mode>3): New.\n+\t* config/aarch64/aarch64-sve2.md (cadd<rot><mode>3): New.\n+\n+2020-12-16  Pat Haugen  <pthaugen@linux.ibm.com>\n+\n+\t* config/rs6000/mma.md (*movxo, mma_<vvi4i4i8>, mma_<avvi4i4i8>,\n+\tmma_<vvi4i4i2>, mma_<avvi4i4i2>, mma_<vvi4i4>, mma_<avvi4i4>,\n+\tmma_<pvi4i2>, mma_<apvi4i2>, mma_<vvi4i4i4>, mma_<avvi4i4i4>):\n+\tRemove explicit setting of length attribute.\n+\n+2020-12-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* varasm.c (default_elf_asm_named_section): Always force\n+\tsection flags even for sections with SECTION_LINK_ORDER flag.\n+\n+2020-12-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/98146\n+\t* defaults.h (SUPPORTS_SHF_GNU_RETAIN): New.\n+\t* varasm.c (get_section): Replace HAVE_GAS_SHF_GNU_RETAIN with\n+\tSUPPORTS_SHF_GNU_RETAIN.\n+\t(resolve_unique_section): Likewise.\n+\t(get_variable_section): Likewise.\n+\t(switch_to_section): Likewise.\n+\n+2020-12-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/98146\n+\t* varasm.c (switch_to_section): Warn when a symbol without used\n+\tattribute and a symbol with used attribute are placed in the\n+\tsection with the same name.\n+\n+2020-12-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/98146\n+\t* output.h (switch_to_section): Add a tree argument, default to\n+\tnullptr.\n+\t* varasm.c (get_section): If the SECTION_RETAIN bit doesn't match,\n+\treturn and switch to a new section later.\n+\t(assemble_start_function): Pass decl to switch_to_section.\n+\t(assemble_variable): Likewise.\n+\t(switch_to_section): If the SECTION_RETAIN bit doesn't match,\n+\tswitch to a new section.\n+\n+2020-12-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96239\n+\t* gimple-ssa-store-merging.c (find_bswap_or_nop): Handle a vector\n+\tCONSTRUCTOR.\n+\t(bswap_replace): Likewise.\n+\n+2020-12-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* common.opt: Remove usage of Report.\n+\t* config/aarch64/aarch64.opt: Ditto.\n+\t* config/alpha/alpha.opt: Ditto.\n+\t* config/arc/arc.opt: Ditto.\n+\t* config/arm/arm.opt: Ditto.\n+\t* config/avr/avr.opt: Ditto.\n+\t* config/bfin/bfin.opt: Ditto.\n+\t* config/bpf/bpf.opt: Ditto.\n+\t* config/c6x/c6x.opt: Ditto.\n+\t* config/cr16/cr16.opt: Ditto.\n+\t* config/cris/cris.opt: Ditto.\n+\t* config/cris/elf.opt: Ditto.\n+\t* config/csky/csky.opt: Ditto.\n+\t* config/darwin.opt: Ditto.\n+\t* config/fr30/fr30.opt: Ditto.\n+\t* config/frv/frv.opt: Ditto.\n+\t* config/ft32/ft32.opt: Ditto.\n+\t* config/gcn/gcn.opt: Ditto.\n+\t* config/i386/cygming.opt: Ditto.\n+\t* config/i386/i386.opt: Ditto.\n+\t* config/ia64/ia64.opt: Ditto.\n+\t* config/ia64/ilp32.opt: Ditto.\n+\t* config/linux-android.opt: Ditto.\n+\t* config/linux.opt: Ditto.\n+\t* config/lm32/lm32.opt: Ditto.\n+\t* config/m32r/m32r.opt: Ditto.\n+\t* config/m68k/m68k.opt: Ditto.\n+\t* config/mcore/mcore.opt: Ditto.\n+\t* config/microblaze/microblaze.opt: Ditto.\n+\t* config/mips/mips.opt: Ditto.\n+\t* config/mmix/mmix.opt: Ditto.\n+\t* config/mn10300/mn10300.opt: Ditto.\n+\t* config/moxie/moxie.opt: Ditto.\n+\t* config/msp430/msp430.opt: Ditto.\n+\t* config/nds32/nds32.opt: Ditto.\n+\t* config/nios2/elf.opt: Ditto.\n+\t* config/nios2/nios2.opt: Ditto.\n+\t* config/nvptx/nvptx.opt: Ditto.\n+\t* config/pa/pa.opt: Ditto.\n+\t* config/pdp11/pdp11.opt: Ditto.\n+\t* config/pru/pru.opt: Ditto.\n+\t* config/riscv/riscv.opt: Ditto.\n+\t* config/rl78/rl78.opt: Ditto.\n+\t* config/rs6000/aix64.opt: Ditto.\n+\t* config/rs6000/linux64.opt: Ditto.\n+\t* config/rs6000/rs6000.opt: Ditto.\n+\t* config/rs6000/sysv4.opt: Ditto.\n+\t* config/rx/elf.opt: Ditto.\n+\t* config/rx/rx.opt: Ditto.\n+\t* config/s390/s390.opt: Ditto.\n+\t* config/s390/tpf.opt: Ditto.\n+\t* config/sh/sh.opt: Ditto.\n+\t* config/sol2.opt: Ditto.\n+\t* config/sparc/long-double-switch.opt: Ditto.\n+\t* config/sparc/sparc.opt: Ditto.\n+\t* config/tilegx/tilegx.opt: Ditto.\n+\t* config/tilepro/tilepro.opt: Ditto.\n+\t* config/v850/v850.opt: Ditto.\n+\t* config/visium/visium.opt: Ditto.\n+\t* config/vms/vms.opt: Ditto.\n+\t* config/vxworks.opt: Ditto.\n+\t* config/xtensa/xtensa.opt: Ditto.\n+\n+2020-12-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/options.texi: Remove Report keyword.\n+\t* opt-functions.awk: Print error when Report keyword\n+\tis used.\n+\t* optc-gen.awk: Do not handle Report keyword.\n+\t* opts.h (struct cl_option): Remove cl_report bitfield flag.\n+\n+2020-12-16  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitizer/97868\n+\t* common.opt: Add new warning -Wtsan.\n+\t* doc/invoke.texi: Likewise.\n+\t* tsan.c (instrument_builtin_call): Warn users about unsupported\n+\tstd::atomic_thread_fence.\n+\n+2020-12-16  Martin Liska  <mliska@suse.cz>\n+\n+\tPR rtl-optimization/98271\n+\tPR rtl-optimization/98276\n+\tPR tree-optimization/98279\n+\t* opts-common.c (set_option): Do not allow overflow for integer\n+\targuments.\n+\n+2020-12-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/98272\n+\t* tree-switch-conversion.c (bit_test_cluster::emit): When finding\n+\tout whether the entry test can be merged in the bit test, do the\n+\tcomputation using the type of the index expression.\n+\n+2020-12-16  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_init): Use\n+\tparadoxical subreg instead of zero_extend for QI/HI promotion.\n+\n+2020-12-16  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/66791\n+\t* config/arm/arm_neon.h: Replace calls to __builtin_vcgt* by\n+\t<, > operators in vclt and vcgt intrinsics respectively.\n+\t* config/arm/arm_neon_builtins.def: Remove entry for\n+\tvcgt and vcgtu.\n+\n+2020-12-16  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/66791\n+\t* config/arm/arm_neon.h: Replace calls to __builtin_vneg* by - operator\n+\tin vneg intrinsics.\n+\t* config/arm/arm_neon_builtins.def: Remove entry for vneg.\n+\n+2020-12-16  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/66791\n+\t* config/arm/arm_neon.h: Replace calls to __builtin_vcreate*\n+\tin vcreate intrinsics.\n+\t* config/arm/arm_neon_builtins.def: Remove entry for vcreate.\n+\n 2020-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/96094"}, {"sha": "8030b5ac593c4080545646bf547a7e9fee1c07db", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe499fdf772573342110185e131f8e4b998997/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe499fdf772573342110185e131f8e4b998997/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=eefe499fdf772573342110185e131f8e4b998997", "patch": "@@ -1 +1 @@\n-20201216\n+20201217"}, {"sha": "35d3bfa117c6e4fa494ec5402f77cbe92c72bf44", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe499fdf772573342110185e131f8e4b998997/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe499fdf772573342110185e131f8e4b998997/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=eefe499fdf772573342110185e131f8e4b998997", "patch": "@@ -1,3 +1,121 @@\n+2020-12-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* ali.ads, ali.adb, bindo-writers.adb, lib-writ.adb (Scope):\n+\tRenamed to IS_Scope.\n+\n+2020-12-16  Joffrey Huguet  <huguet@adacore.com>\n+\n+\t* libgnat/a-strfix.ads: Add postconditions and contract cases to\n+\tsubprograms.\n+\n+2020-12-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iterator_Specification): If iterator\n+\tfilter is present, preanalyze filter without expansion.\n+\t(Analyze_Loop_Parameter_Specification): When\n+\tloop_Parameter_Specification is rewritten as\n+\tIterator_Specification, transfer Iterator_Filter if present.\n+\n+2020-12-16  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnat/s-objrea.ads (Object_Arch): Add ARM enum\n+\t* libgnat/s-objrea.adb (Initialize): Add EM_ARM case.\n+\t(Read_Address): Add ARM case to 32bit read.\n+\t* Makefile.rtl: Add trasym units to the runtime for armhf-linux.\n+\n+2020-12-16  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* libgnat/g-expect.adb (Non_Blocking_Spawn): Deallocate elements\n+\ton Arg_List after calling Set_Up_Child_Communications.\n+\n+2020-12-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* par-ch3.adb (P_Modular_Type_Definition): Remove colon from\n+\terror message.\n+\t* sem_ch11.adb (Check_Duplication): Likewise.\n+\t* sem_ch3.adb (Derived_Type_Declaration): Likewise.\n+\n+2020-12-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* par-ch12.adb (P_Formal_Object_Declarations): Refine types to\n+\tPos.\n+\n+2020-12-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* impunit.adb (Not_Impl_Defined_Unit): Fix typo in iteration\n+\tover Non_Imp_File_Names_12 array.\n+\n+2020-12-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch9.adb, sem_warn.adb: Simplify membership test.\n+\n+2020-12-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch6.adb, exp_util.adb, sem_ch4.adb, sem_disp.adb,\n+\tsem_elab.adb: Simplify membership test.\n+\n+2020-12-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-powtab.ads (Maxpow): Use explicit formula in comment.\n+\n+2020-12-16  Philippe Gil  <gil@adacore.com>\n+\n+\t* libgnarl/s-tporft.adb (Register_Foreign_Thread): Set\n+\tGlobal_Task_Lock_Nesting before using allocator.\n+\n+2020-12-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-valrea.adb (Maxexp32): New constant array.\n+\t(Maxexp64): Likewise.\n+\t(Maxexp80): Likewise.\n+\t(Integer_to_Real): New local constants Maxexp and B.\n+\tWhen the exponent is too negative, do the divison in two steps.\n+\n+2020-12-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst\n+\t(Test_Case): Change integer to float literals.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-12-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Add a codefix\n+\tfor extra parentheses around aspect Annotate expression; reject\n+\t\"(null record)\" aggregate and extra parentheses around aspect\n+\tTest_Case expression.\n+\t* sem_prag.adb (Analyze_Pragma): Reject \"null\", \"(null record)\"\n+\tand extra parentheses around pragma Contract_Cases; likewise for\n+\tpragma Subprogram_Variant.\n+\n+2020-12-16  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* adaint.h (__gnat_in_child_after_fork): New flag to express\n+\tchild process side after fork call.\n+\t* adaint.c (__gnat_portable_spawn): Set flag\n+\t__gnat_in_child_after_fork.\n+\t* expect.c (__gnat_expect_fork): Set __gnat_in_child_after_fork\n+\tto one on child side.\n+\t* libgnat/memtrack.adb\n+\t(In_Child_After_Fork): Flag to disable memory tracking.\n+\t(Allow_Trace): New routine defining if memory should be tracked.\n+\t(Alloc, Realloc, Free): Use Allow_Trace in \"if\" condition\n+\tinstead of First_Call.\n+\n+2020-12-16  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-tifiio.adb: Mark body not in SPARK.\n+\t* libgnat/a-tifiio.ads: Mark spec in SPARK.\n+\t* libgnat/a-tifiio__128.adb: Mark body not in SPARK.\n+\n+2020-12-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-valuer.adb (Scan_Decimal_Digits): Tweak overflow test.\n+\t(Scan_Integral_Digits): Likewise.\n+\n+2020-12-16  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-oscons-tmplt.c: Add some OS constants.\n+\n 2020-12-15  Pascal Obry  <obry@adacore.com>\n \n \t* libgnat/g-sercom__linux.adb (Set): Use cfsetospeed and"}, {"sha": "7d599fab6ac60f321c89ca2a9f9d4bc280a6086e", "filename": "gcc/brig/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe499fdf772573342110185e131f8e4b998997/gcc%2Fbrig%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe499fdf772573342110185e131f8e4b998997/gcc%2Fbrig%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2FChangeLog?ref=eefe499fdf772573342110185e131f8e4b998997", "patch": "@@ -1,3 +1,7 @@\n+2020-12-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* lang.opt: Remove usage of Report.\n+\n 2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/97911"}, {"sha": "761086fe85647066d9b3a9b485e00432af74b823", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe499fdf772573342110185e131f8e4b998997/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe499fdf772573342110185e131f8e4b998997/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=eefe499fdf772573342110185e131f8e4b998997", "patch": "@@ -1,3 +1,7 @@\n+2020-12-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* c.opt: Remove usage of Report.\n+\n 2020-12-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/98166"}, {"sha": "b5cf1a7d444839f7d37a9266cb6c23ef6976d09b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe499fdf772573342110185e131f8e4b998997/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe499fdf772573342110185e131f8e4b998997/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=eefe499fdf772573342110185e131f8e4b998997", "patch": "@@ -1,3 +1,14 @@\n+2020-12-16  Martin Uecker  <muecker@gwdg.de>\n+\n+\tPR c/98047\n+\t* c-typeck.c (build_modify_expr): Drop qualifiers.\n+\n+2020-12-16  Martin Uecker  <muecker@gwdg.de>\n+\n+\tPR c/98260\n+\t* c-parser.c (c_parser_expression): Look into\n+\tnop expression when marking expressions as read.\n+\n 2020-12-14  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/98204"}, {"sha": "8778b6ffa3c96bf43992e921793028f0e3b22612", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe499fdf772573342110185e131f8e4b998997/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe499fdf772573342110185e131f8e4b998997/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eefe499fdf772573342110185e131f8e4b998997", "patch": "@@ -1,3 +1,32 @@\n+2020-12-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* mapper-resolver.cc: Remove early include of\n+\tsys/socket.h.  Specify no CODY_NETWORKING instead.\n+\t* module.cc: Specify no CODY_NETWORKING.\n+\n+2020-12-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* parser.c (cp_parser_elaborated_type_specifier): Test\n+\tBOUND_TEMPLATE_TEMPLATE_PARM before checking for instantiation.\n+\n+2020-12-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* module.cc (dumper::push): Clangify offsetof use.\n+\n+2020-12-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* mapper-resolver.cc: #include sys/socket before system.h\n+\tdue to poisoned bcopy use.\n+\n+2020-12-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* module.cc (loc_spans): Make spans a pointer, not inline.\n+\tAdjust all accesses.\n+\n+2020-12-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* mapper-client.cc: Include sys/socket.h before system.h.\n+\n 2020-12-15  Patrick Palka  <ppalka@redhat.com>\n \n \t* pt.c (in_template_function): Inspect cfun->decl instead of"}, {"sha": "0efd16049dca9aeb7d846e6768e8fae6bae4688f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe499fdf772573342110185e131f8e4b998997/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe499fdf772573342110185e131f8e4b998997/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=eefe499fdf772573342110185e131f8e4b998997", "patch": "@@ -1,3 +1,9 @@\n+2020-12-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/98284\n+\t* resolve.c (check_data_variable): Reject DATA elements with the\n+\tALLOCATABLE attribute.\n+\n 2020-12-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/90207"}, {"sha": "ac16f0f2d0b357c124dd899c0d42618db3b3855c", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe499fdf772573342110185e131f8e4b998997/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe499fdf772573342110185e131f8e4b998997/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=eefe499fdf772573342110185e131f8e4b998997", "patch": "@@ -1,3 +1,7 @@\n+2020-12-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* lang.opt: Remove usage of Report.\n+\n 2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/97911"}, {"sha": "fc1837312bcf0117018a771b15c4158e27e81943", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe499fdf772573342110185e131f8e4b998997/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe499fdf772573342110185e131f8e4b998997/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eefe499fdf772573342110185e131f8e4b998997", "patch": "@@ -1,3 +1,92 @@\n+2020-12-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/rtl/x86_64/test-return-const.c.before-fwprop.c: Don't\n+\texpect insn updates to be deferred.\n+\t* gcc.target/aarch64/sve/acle/asm/st4_s8.c: Expect the addition\n+\tto be folded into the address.\n+\t* gcc.target/aarch64/sve/acle/asm/st4_u8.c: Likewise.\n+\n+2020-12-16  Martin Uecker  <muecker@gwdg.de>\n+\n+\tPR c/98047\n+\t* gcc.dg/qual-assign-7.c: New test.\n+\n+2020-12-16  Martin Uecker  <muecker@gwdg.de>\n+\n+\tPR c/98260\n+\t* gcc.dg/unused-9.c: New test.\n+\n+2020-12-16  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\tPR target/98280\n+\t* gcc.target/powerpc/fold-vec-logical-ors-char.c: Adjust count.\n+\t* gcc.target/powerpc/fold-vec-logical-ors-int.c: Adjust count.\n+\t* gcc.target/powerpc/fold-vec-logical-ors-longlong.c: Adjust count.\n+\t* gcc.target/powerpc/fold-vec-logical-ors-short.c: Adjust count.\n+\t* gcc.target/powerpc/fold-vec-logical-other-char.c: Adjust count.\n+\t* gcc.target/powerpc/fold-vec-logical-other-int.c: Adjust count.\n+\t* gcc.target/powerpc/fold-vec-logical-other-longlong.c: Adjust count.\n+\t* gcc.target/powerpc/fold-vec-logical-other-short.c: Adjust count.\n+\n+2020-12-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/template/pr98297.C: New.\n+\n+2020-12-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/98284\n+\t* gfortran.dg/pr98284.f90: New test.\n+\n+2020-12-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/98146\n+\t* lib/target-supports.exp\n+\t(check_effective_target_R_flag_in_section): Also check\n+\tHAVE_INITFINI_ARRAY_SUPPORT != 0.\n+\n+2020-12-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/98146\n+\t* c-c++-common/attr-used-5.c: Updated.\n+\t* c-c++-common/attr-used-6.c: Likewise.\n+\t* c-c++-common/attr-used-7.c: Likewise.\n+\t* c-c++-common/attr-used-8.c: Likewise.\n+\n+2020-12-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/98146\n+\t* c-c++-common/attr-used-5.c: New test.\n+\t* c-c++-common/attr-used-6.c: Likewise.\n+\t* c-c++-common/attr-used-7.c: Likewise.\n+\t* c-c++-common/attr-used-8.c: Likewise.\n+\t* c-c++-common/attr-used-9.c: Likewise.\n+\n+2020-12-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96239\n+\t* gcc.dg/pr96239.c: New test.\n+\n+2020-12-16  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitizer/97868\n+\t* gcc.dg/tsan/atomic-fence.c: New test.\n+\n+2020-12-16  Martin Liska  <mliska@suse.cz>\n+\n+\tPR rtl-optimization/98271\n+\tPR rtl-optimization/98276\n+\tPR tree-optimization/98279\n+\t* gcc.dg/pr98271.c: New test.\n+\n+2020-12-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/pr98272.c: New test.\n+\n+2020-12-16  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/pr96933-1.c: Adjusted to check no rlwinm.\n+\t* gcc.target/powerpc/pr96933-2.c: Likewise.\n+\n 2020-12-15  Marek Polacek  <polacek@redhat.com>\n \n \t* g++.dg/cpp0x/constexpr-52830.C: Remove dg-ice."}, {"sha": "f5aa2deba61fd55b7d7a585c4ae92c3d2c34994c", "filename": "libcody/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe499fdf772573342110185e131f8e4b998997/libcody%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe499fdf772573342110185e131f8e4b998997/libcody%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2FChangeLog?ref=eefe499fdf772573342110185e131f8e4b998997", "patch": "@@ -1,3 +1,30 @@\n+2020-12-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cody.hh: Allow user to set CODY_NETWORKING.\n+\n+2020-12-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac: Compute is_release.\n+\t(NMS_ENABLE_CHECKING): Simplify but not computing ac_assert_checking\n+\tand ac_valgrind_checking the code doesn't use.\n+\t* configure: Regenerated.\n+\n+2020-12-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* internal.hh: Define fallback macros for __has_builtin and\n+\t__has_include. Use __has_builtin for __builtin_FILE and\n+\t__builtin_LINE. Define alias for std::source_location.\n+\n+2020-12-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* configure.ac: Use libcpp's enable-checking code.\n+\t* configure: Rebuilt.\n+\n+2020-12-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config.m4: Replace V+=\"...\" with V=\"$V...\"\n+\t* configure: Rebuilt.\n+\n 2020-12-15  Marek Polacek  <polacek@redhat.com>\n \n \t* buffer.cc (MessageBuffer::Lex): Remove unused variable."}, {"sha": "1b9f37eb88fca3967f914485e02c0b8da271eb6c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe499fdf772573342110185e131f8e4b998997/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe499fdf772573342110185e131f8e4b998997/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=eefe499fdf772573342110185e131f8e4b998997", "patch": "@@ -1,3 +1,137 @@\n+2020-12-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* Makefile.in: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* config/abi/pre/gnu.ver: Make patterns less greedy.\n+\t* config/os/gnu-linux/ldbl-ieee128-extra.ver: New file with patterns\n+\tfor IEEE128 long double symbols.\n+\t* configure: Regenerate.\n+\t* configure.ac: Enable alternative 128-bit long double format on\n+\tpowerpc64*-*-linux*.\n+\t* doc/Makefile.in: Regenerate.\n+\t* fragment.am: Regenerate.\n+\t* include/Makefile.am: Set _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/c++config: Define inline namespace for new long\n+\tdouble symbols. Don't define _GLIBCXX_USE_FLOAT128 when it's the\n+\tsame type as long double.\n+\t* include/bits/locale_classes.h [_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT]\n+\t(locale::_Impl::_M_init_extra_ldbl128): Declare new member function.\n+\t* include/bits/locale_facets.h (_GLIBCXX_NUM_FACETS): Simplify by\n+\tonly counting narrow character facets.\n+\t(_GLIBCXX_NUM_CXX11_FACETS): Likewise.\n+\t(_GLIBCXX_NUM_LBDL_ALT128_FACETS): New.\n+\t[_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT] (num_get::__do_get): Define\n+\tvtable placeholder for __ibm128 long double type.\n+\t[_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && __LONG_DOUBLE_IEEE128__]\n+\t(num_get::__do_get): Declare vtable placeholder for __ibm128 long\n+\tdouble type.\n+\t[_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && __LONG_DOUBLE_IEEE128__]\n+\t(num_put::__do_put): Likewise.\n+\t* include/bits/locale_facets.tcc\n+\t[_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && __LONG_DOUBLE_IEEE128__]\n+\t(num_get::__do_get, num_put::__do_put): Define.\n+\t* include/bits/locale_facets_nonio.h\n+\t[_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && __LONG_DOUBLE_IEEE128__]\n+\t(money_get::__do_get): Declare vtable placeholder for __ibm128 long\n+\tdouble type.\n+\t[_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && __LONG_DOUBLE_IEEE128__]\n+\t(money_put::__do_put): Likewise.\n+\t* include/bits/locale_facets_nonio.tcc\n+\t[_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && __LONG_DOUBLE_IEEE128__]\n+\t(money_get::__do_get, money_put::__do_put): Define.\n+\t* include/ext/numeric_traits.h [_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT]\n+\t(__numeric_traits<__ibm128>, __numeric_traits<__ieee128>): Define.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* po/Makefile.in: Regenerate.\n+\t* python/Makefile.in: Regenerate.\n+\t* src/Makefile.am: Add compatibility-ldbl-alt128.cc and\n+\tcompatibility-ldbl-alt128-cxx11.cc sources and recipes for objects.\n+\t* src/Makefile.in: Regenerate.\n+\t* src/c++11/Makefile.in: Regenerate.\n+\t* src/c++11/compatibility-ldbl-alt128-cxx11.cc: New file defining\n+\tsymbols using the old 128-bit long double format, for the cxx11 ABI.\n+\t* src/c++11/compatibility-ldbl-alt128.cc: Likewise, for the\n+\tgcc4-compatible ABI.\n+\t* src/c++11/compatibility-ldbl-facets-aliases.h: New header for long\n+\tdouble compat aliases.\n+\t* src/c++11/cow-locale_init.cc: Add comment.\n+\t* src/c++11/cxx11-locale-inst.cc: Define C and C_is_char\n+\tunconditionally.\n+\t* src/c++11/cxx11-wlocale-inst.cc: Add sanity check. Include\n+\tlocale-inst.cc directly, not via cxx11-locale-inst.cc.\n+\t* src/c++11/locale-inst-monetary.h: New header for monetary\n+\tcategory instantiations.\n+\t* src/c++11/locale-inst-numeric.h: New header for numeric category\n+\tinstantiations.\n+\t* src/c++11/locale-inst.cc: Include new headers for monetary,\n+\tnumeric, and long double definitions.\n+\t* src/c++11/wlocale-inst.cc: Remove long double compat aliases that\n+\tare defined in new header now.\n+\t* src/c++17/Makefile.am: Use -mabi=ibmlongdouble for\n+\tfloating_from_chars.cc.\n+\t* src/c++17/Makefile.in: Regenerate.\n+\t* src/c++17/floating_from_chars.cc (from_chars_impl): Add\n+\tif-constexpr branch for __ieee128.\n+\t(from_chars): Overload for __ieee128.\n+\t* src/c++20/Makefile.in: Regenerate.\n+\t* src/c++98/Makefile.in: Regenerate.\n+\t* src/c++98/locale_init.cc (num_facets): Adjust calculation.\n+\t(locale::_Impl::_Impl(size_t)): Call _M_init_extra_ldbl128.\n+\t* src/c++98/localename.cc (num_facets): Adjust calculation.\n+\t(locale::_Impl::_Impl(const char*, size_t)): Call\n+\t_M_init_extra_ldbl128.\n+\t* src/filesystem/Makefile.in: Regenerate.\n+\t* testsuite/Makefile.in: Regenerate.\n+\t* testsuite/util/testsuite_abi.cc: Add new symbol versions.\n+\tAllow new symbols to be added to GLIBCXX_IEEE128_3.4.29 and\n+\tCXXABI_IEEE128_1.3.13 too.\n+\t* testsuite/26_numerics/complex/abi_tag.cc: Add u9__ieee128 to\n+\tregex matching expected symbols.\n+\n+2020-12-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/utility: Use __has_builtin without checking if\n+\tit's defined.\n+\n+2020-12-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/c++config: Warn if __STRICT_ANSI__ state is\n+\tinconsistent with __GLIBCXX_TYPE_INT_N_0.\n+\n+2020-12-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96083\n+\t* include/ext/throw_allocator.h: Use __has_builtin to check for\n+\t__builtin_sprintf support, and use std::sprtinf if necessary.\n+\n+2020-12-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98319\n+\t* include/experimental/random: Only define contents for C++14\n+\tand later.\n+\t* include/experimental/source_location: Likewise.\n+\t* include/experimental/utility: Likewise.\n+\t* testsuite/experimental/feat-lib-fund.cc: Include all LFTS\n+\theaders that are present. Allow test to run for all modes.\n+\n+2020-12-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/46447\n+\t* testsuite/performance/29_atomics/atomic_flag.cc: New test.\n+\n+2020-12-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/93151\n+\t* acinclude.m4 (GLIBCXX_CHECK_SYSTEM_ERROR): Remove.\n+\t* configure.ac: Regenerate.\n+\t* config/os/generic/error_constants.h: Test POSIX errno macros\n+\tdirectly, instead of corresponding _GLIBCXX_HAVE_EXXX macros.\n+\t* testsuite/19_diagnostics/headers/system_error/errc_std_c++0x.cc:\n+\tLikewise.\n+\t* testsuite/19_diagnostics/headers/system_error/93151.cc: New\n+\ttest.\n+\n 2020-12-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \tRevert:"}, {"sha": "fce9c79a8c7c625e52426fe56779c8bb58cf9598", "filename": "maintainer-scripts/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe499fdf772573342110185e131f8e4b998997/maintainer-scripts%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe499fdf772573342110185e131f8e4b998997/maintainer-scripts%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2FChangeLog?ref=eefe499fdf772573342110185e131f8e4b998997", "patch": "@@ -1,3 +1,8 @@\n+2020-12-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* update_version_git: Put BASEDIR into /sourceware/snapshot-tmp/gcc\n+\tif it exist.\n+\n 2020-05-29  Martin Liska  <mliska@suse.cz>\n \n \t* bugzilla-close-candidate.py: Fix sorting of branches."}]}