{"sha": "7b93bdde911212694e170bb8063b11a91bbc0bcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I5M2JkZGU5MTEyMTI2OTRlMTcwYmI4MDYzYjExYTkxYmJjMGJjZA==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2012-08-27T14:13:15Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2012-08-27T14:13:15Z"}, "message": "Add interfaces to retrieve random numbers in bulk.\n\n\t* include/bits/random.h (uniform_int_distribution<>): Add __generate\n\tand __generate_impl functions.\n\t(uniform_real_distribution<>): Likewise.\n\t(bernoulli_distribution): Likewise.\n\t(geometric_distribution<>): Likewise.\n\t(negative_binomial_distribution<>): Likewise.\n\t(poisson_distribution<>): Likewise.\n\t(exponential_distribution<>): Likewise.\n\t(normal_distribution<>): Likewise.\n\t(lognormal_distribution<>): Likewise.\n\t(chi_squared_distribution<>): Likewise.\n\t(cauchy_distribution<>): Likewise.\n\t(fisher_f_distribution<>): Likewise.\n\t(student_t_distribution<>): Likewise.\n\t(gamma_distribution<>): Likewise.\n\t(weibull_distribution<>): Likewise.\n\t(extreme_value_distribution<>): Likewise.\n\t(discrete_distribution<>): Likewise.\n\t(piecewise_constant_distribution<>): Likewise.\n\t(piecewise_linear_distribution<>): Likewise.\n\t* include/bits/random.tcc (__detail::_Power_of_2): New function.\n\t(uniform_int_distribution<>::__generate_impl): New function.\n\t(uniform_real_distribution<>::__generate_impl): New function.\n\t(bernoulli_distribution::__generate_impl): New function.\n\t(geometric_distribution<>::__generate_impl): New function.\n\t(negative_binomial_distribution<>::__generate_impl): New function.\n\t(poisson_distribution<>::__generate_impl): New function.\n\t(exponential_distribution<>::__generate_impl): New function.\n\t(normal_distribution<>::__generate_impl): New function.\n\t(lognormal_distribution<>::__generate_impl): New function.\n\t(chi_squared_distribution<>::__generate_impl): New function.\n\t(cauchy_distribution<>::__generate_impl): New function.\n\t(fisher_f_distribution<>::__generate_impl): New function.\n\t(student_t_distribution<>::__generate_impl): New function.\n\t(gamma_distribution<>::__generate_impl): New function.\n\t(weibull_distribution<>::__generate_impl): New function.\n\t(extreme_value_distribution<>::__generate_impl): New function.\n\t(discrete_distribution<>::__generate_impl): New function.\n\t(piecewise_constant_distribution<>::__generate_impl): New function.\n\t(piecewise_linear_distribution<>::__generate_impl): New function.\n\nFrom-SVN: r190712", "tree": {"sha": "ea93e5be32452f97ab3ce4fd1cb9523af003284a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea93e5be32452f97ab3ce4fd1cb9523af003284a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b93bdde911212694e170bb8063b11a91bbc0bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b93bdde911212694e170bb8063b11a91bbc0bcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b93bdde911212694e170bb8063b11a91bbc0bcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b93bdde911212694e170bb8063b11a91bbc0bcd/comments", "author": null, "committer": null, "parents": [{"sha": "b668e41af6d282351a28a46fa8a37c1a7b416687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b668e41af6d282351a28a46fa8a37c1a7b416687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b668e41af6d282351a28a46fa8a37c1a7b416687"}], "stats": {"total": 1282, "additions": 1277, "deletions": 5}, "files": [{"sha": "c2fcddc3bda45dee9a105b41b054ef26ed1bf4f3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b93bdde911212694e170bb8063b11a91bbc0bcd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b93bdde911212694e170bb8063b11a91bbc0bcd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7b93bdde911212694e170bb8063b11a91bbc0bcd", "patch": "@@ -1,4 +1,48 @@\n-012-08-22  Ulrich Drepper  <drepper@gmail.com>\n+2012-08-27  Ulrich Drepper  <drepper@gmail.com>\n+\n+\tAdd interfaces to retrieve random numbers in bulk.\n+\t* include/bits/random.h (uniform_int_distribution<>): Add __generate\n+\tand __generate_impl functions.\n+\t(uniform_real_distribution<>): Likewise.\n+\t(bernoulli_distribution): Likewise.\n+\t(geometric_distribution<>): Likewise.\n+\t(negative_binomial_distribution<>): Likewise.\n+\t(poisson_distribution<>): Likewise.\n+\t(exponential_distribution<>): Likewise.\n+\t(normal_distribution<>): Likewise.\n+\t(lognormal_distribution<>): Likewise.\n+\t(chi_squared_distribution<>): Likewise.\n+\t(cauchy_distribution<>): Likewise.\n+\t(fisher_f_distribution<>): Likewise.\n+\t(student_t_distribution<>): Likewise.\n+\t(gamma_distribution<>): Likewise.\n+\t(weibull_distribution<>): Likewise.\n+\t(extreme_value_distribution<>): Likewise.\n+\t(discrete_distribution<>): Likewise.\n+\t(piecewise_constant_distribution<>): Likewise.\n+\t(piecewise_linear_distribution<>): Likewise.\n+\t* include/bits/random.tcc (__detail::_Power_of_2): New function.\n+\t(uniform_int_distribution<>::__generate_impl): New function.\n+\t(uniform_real_distribution<>::__generate_impl): New function.\n+\t(bernoulli_distribution::__generate_impl): New function.\n+\t(geometric_distribution<>::__generate_impl): New function.\n+\t(negative_binomial_distribution<>::__generate_impl): New function.\n+\t(poisson_distribution<>::__generate_impl): New function.\n+\t(exponential_distribution<>::__generate_impl): New function.\n+\t(normal_distribution<>::__generate_impl): New function.\n+\t(lognormal_distribution<>::__generate_impl): New function.\n+\t(chi_squared_distribution<>::__generate_impl): New function.\n+\t(cauchy_distribution<>::__generate_impl): New function.\n+\t(fisher_f_distribution<>::__generate_impl): New function.\n+\t(student_t_distribution<>::__generate_impl): New function.\n+\t(gamma_distribution<>::__generate_impl): New function.\n+\t(weibull_distribution<>::__generate_impl): New function.\n+\t(extreme_value_distribution<>::__generate_impl): New function.\n+\t(discrete_distribution<>::__generate_impl): New function.\n+\t(piecewise_constant_distribution<>::__generate_impl): New function.\n+\t(piecewise_linear_distribution<>::__generate_impl): New function.\n+\n+2012-08-22  Ulrich Drepper  <drepper@gmail.com>\n \n \t* include/bits/random.h (mersenne_twister_engine): Don't inline\n \tdiscard here.  New member function _M_gen_rand.\n@@ -7,7 +51,7 @@\n \t(mersenne_twister_engine<>::discard): New implementation which\n \tskips in large steps.\n \t(mersenne_twister_engine<>::operator()): Use _M_gen_rand.\n-\t\t\t\t\t\t\t\n+\n 2012-08-26  Marc Glisse  <marc.glisse@inria.fr>\n \t    Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -489,8 +533,8 @@\n \n \tPR c++/53322\n \t* include/bits/stl_algobase.h (lower_bound)\n-    \t(lexicographical_compare): Do not declare unused local typedefs\n-    \there when Concepts are turned off.\n+\t(lexicographical_compare): Do not declare unused local typedefs\n+\there when Concepts are turned off.\n \n 2012-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -2006,7 +2050,7 @@\n \n \tPR libstdc++/52309\n \t* include/bits/hashtable_policy.h (_Equality_base<, true,>::\n-    \t_M_equal(const _Hashtable&)): Compare values with operator==.\n+\t_M_equal(const _Hashtable&)): Compare values with operator==.\n \t* testsuite/23_containers/unordered_set/operators/52309.cc: New.\n \n 2012-02-17  Benjamin Kosnik  <bkoz@redhat.com>"}, {"sha": "6bedc4250fbe1a78f58f513dafd3caf7353a0011", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 627, "deletions": 0, "changes": 627, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b93bdde911212694e170bb8063b11a91bbc0bcd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b93bdde911212694e170bb8063b11a91bbc0bcd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=7b93bdde911212694e170bb8063b11a91bbc0bcd", "patch": "@@ -1782,6 +1782,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+    private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       param_type _M_param;\n     };\n \n@@ -1962,7 +1992,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return (__aurng() * (__p.b() - __p.a())) + __p.a();\n \t}\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       param_type _M_param;\n     };\n \n@@ -2151,6 +2210,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n       /**\n        * @brief Return true if two normal distributions have\n        *        the same parameters and the sequences that would\n@@ -2192,6 +2273,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   std::normal_distribution<_RealType1>& __x);\n \n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       param_type  _M_param;\n       result_type _M_saved;\n       bool        _M_saved_available;\n@@ -2325,6 +2413,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const param_type& __p)\n         { return std::exp(__p.s() * _M_nd(__urng) + __p.m()); }\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n       /**\n        * @brief Return true if two lognormal distributions have\n        *        the same parameters and the sequences that would\n@@ -2367,6 +2477,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   std::lognormal_distribution<_RealType1>& __x);\n \n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       param_type _M_param;\n \n       std::normal_distribution<result_type> _M_nd;\n@@ -2517,6 +2634,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n       /**\n        * @brief Return true if two gamma distributions have the same\n        *        parameters and the sequences that would be generated\n@@ -2558,6 +2697,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   std::gamma_distribution<_RealType1>& __x);\n \n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       param_type _M_param;\n \n       std::normal_distribution<result_type> _M_nd;\n@@ -2681,6 +2827,40 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return 2 * _M_gd(__urng, param_type(__p.n() / 2));\n \t}\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate_impl(__f, __t, __urng, _M_gd.param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ typename std::gamma_distribution<result_type>::param_type\n+\t    __p2(__p.n() / 2);\n+\t  this->__generate_impl(__f, __t, __urng, __p2); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ typename std::gamma_distribution<result_type>::param_type\n+\t    __p2(_M_gd.param());\n+\t  this->__generate_impl(__f, __t, __urng, __p2); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ typename std::gamma_distribution<result_type>::param_type\n+\t    __p2(__p.n() / 2);\n+\t  this->__generate_impl(__f, __t, __urng, __p2); }\n+\n       /**\n        * @brief Return true if two Chi-squared distributions have\n        *        the same parameters and the sequences that would be\n@@ -2722,6 +2902,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   std::chi_squared_distribution<_RealType1>& __x);\n \n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\ttypename std::gamma_distribution<result_type>::param_type&\n+\t\t\t__p);\n+\n       param_type _M_param;\n \n       std::gamma_distribution<result_type> _M_gd;\n@@ -2851,7 +3039,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       param_type _M_param;\n     };\n \n@@ -3033,6 +3250,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  / (_M_gd_y(__urng, param_type(__p.n() / 2)) * m()));\n \t}\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate_impl(__f, __t, __urng); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate_impl(__f, __t, __urng); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n       /**\n        * @brief Return true if two Fisher f distributions have\n        *        the same parameters and the sequences that would\n@@ -3076,6 +3321,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   std::fisher_f_distribution<_RealType1>& __x);\n \n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng);\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       param_type _M_param;\n \n       std::gamma_distribution<result_type> _M_gd_x, _M_gd_y;\n@@ -3206,6 +3464,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return _M_nd(__urng) * std::sqrt(__p.n() / __g);\n         }\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate_impl(__f, __t, __urng); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate_impl(__f, __t, __urng); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n       /**\n        * @brief Return true if two Student t distributions have\n        *        the same parameters and the sequences that would\n@@ -3248,6 +3534,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   std::student_t_distribution<_RealType1>& __x);\n \n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng);\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       param_type _M_param;\n \n       std::normal_distribution<result_type> _M_nd;\n@@ -3389,7 +3687,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn false;\n       }\n \n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      __generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t _UniformRandomNumberGenerator& __urng)\n+      { this->__generate(__f, __t, __urng, this->param()); }\n+\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      __generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t _UniformRandomNumberGenerator& __urng, const param_type& __p)\n+      { this->__generate_impl(__f, __t, __urng, __p); }\n+\n+    template<typename _UniformRandomNumberGenerator>\n+      void\n+      __generate(result_type* __f, result_type* __t,\n+\t\t _UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __p)\n+      { this->__generate_impl(__f, __t, __urng, __p); }\n+\n   private:\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __p);\n+\n     param_type _M_param;\n   };\n \n@@ -3581,6 +3907,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n       /**\n        * @brief Return true if two binomial distributions have\n        *        the same parameters and the sequences that would\n@@ -3628,6 +3976,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   std::binomial_distribution<_IntType1>& __x);\n \n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \t_M_waiting(_UniformRandomNumberGenerator& __urng, _IntType __t);\n@@ -3764,7 +4119,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       param_type _M_param;\n     };\n \n@@ -3937,6 +4321,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate_impl(__f, __t, __urng); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate_impl(__f, __t, __urng); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n       /**\n        * @brief Return true if two negative binomial distributions have\n        *        the same parameters and the sequences that would be\n@@ -3979,6 +4391,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   std::negative_binomial_distribution<_IntType1>& __x);\n \n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng);\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       param_type _M_param;\n \n       std::gamma_distribution<double> _M_gd;\n@@ -4120,6 +4544,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n        /**\n \t* @brief Return true if two Poisson distributions have the same\n \t*        parameters and the sequences that would be generated\n@@ -4165,6 +4611,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   std::poisson_distribution<_IntType1>& __x);\n \n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       param_type _M_param;\n \n       // NB: Unused when _GLIBCXX_USE_C99_MATH_TR1 is undefined.\n@@ -4306,7 +4759,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return -std::log(__aurng()) / __p.lambda();\n \t}\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       param_type _M_param;\n     };\n \n@@ -4481,7 +4963,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       param_type _M_param;\n     };\n \n@@ -4656,7 +5167,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       param_type _M_param;\n     };\n \n@@ -4857,6 +5397,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n       /**\n        * @brief Inserts a %discrete_distribution random number distribution\n        * @p __x into the output stream @p __os.\n@@ -4889,6 +5451,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   std::discrete_distribution<_IntType1>& __x);\n \n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       param_type _M_param;\n     };\n \n@@ -5095,6 +5664,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n       /**\n        * @brief Inserts a %piecewise_constan_distribution random\n        *        number distribution @p __x into the output stream @p __os.\n@@ -5128,6 +5719,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   std::piecewise_constant_distribution<_RealType1>& __x);\n \n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       param_type _M_param;\n     };\n \n@@ -5337,6 +5935,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n       /**\n        * @brief Inserts a %piecewise_linear_distribution random number\n        *        distribution @p __x into the output stream @p __os.\n@@ -5370,6 +5990,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   std::piecewise_linear_distribution<_RealType1>& __x);\n \n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n       param_type _M_param;\n     };\n "}, {"sha": "9ae5e1283ba53495bfd093d58219213978181ca2", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 601, "deletions": 0, "changes": 601, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b93bdde911212694e170bb8063b11a91bbc0bcd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b93bdde911212694e170bb8063b11a91bbc0bcd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=7b93bdde911212694e170bb8063b11a91bbc0bcd", "patch": "@@ -89,6 +89,12 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \treturn __result;\n       }\n \n+    template<typename _Tp>\n+      bool _Power_of_2(_Tp __x)\n+      {\n+\treturn ((__x - 1) & __x) == 0;\n+      };\n+\n   _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n \n@@ -936,6 +942,93 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __ret + __param.a();\n       }\n \n+\n+  template<typename _IntType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      uniform_int_distribution<_IntType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __param)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\ttypedef typename _UniformRandomNumberGenerator::result_type\n+\t  _Gresult_type;\n+\ttypedef typename std::make_unsigned<result_type>::type __utype;\n+\ttypedef typename std::common_type<_Gresult_type, __utype>::type\n+\t  __uctype;\n+\n+\tconst __uctype __urngmin = __urng.min();\n+\tconst __uctype __urngmax = __urng.max();\n+\tconst __uctype __urngrange = __urngmax - __urngmin;\n+\tconst __uctype __urange\n+\t  = __uctype(__param.b()) - __uctype(__param.a());\n+\n+\t__uctype __ret;\n+\n+\tif (__urngrange > __urange)\n+\t  {\n+\t    if (__detail::_Power_of_2(__urngrange + 1)\n+\t\t&& __detail::_Power_of_2(__urange + 1))\n+\t      {\n+\t\twhile (__f != __t)\n+\t\t  {\n+\t\t    __ret = __uctype(__urng()) - __urngmin;\n+\t\t    *__f++ = (__ret & __urange) + __param.a();\n+\t\t  }\n+\t      }\n+\t    else\n+\t      {\n+\t\t// downscaling\n+\t\tconst __uctype __uerange = __urange + 1; // __urange can be zero\n+\t\tconst __uctype __scaling = __urngrange / __uerange;\n+\t\tconst __uctype __past = __uerange * __scaling;\n+\t\twhile (__f != __t)\n+\t\t  {\n+\t\t    do\n+\t\t      __ret = __uctype(__urng()) - __urngmin;\n+\t\t    while (__ret >= __past);\n+\t\t    *__f++ = __ret / __scaling + __param.a();\n+\t\t  }\n+\t      }\n+\t  }\n+\telse if (__urngrange < __urange)\n+\t  {\n+\t    // upscaling\n+\t    /*\n+\t      Note that every value in [0, urange]\n+\t      can be written uniquely as\n+\n+\t      (urngrange + 1) * high + low\n+\n+\t      where\n+\n+\t      high in [0, urange / (urngrange + 1)]\n+\n+\t      and\n+\n+\t      low in [0, urngrange].\n+\t    */\n+\t    __uctype __tmp; // wraparound control\n+\t    while (__f != __t)\n+\t      {\n+\t\tdo\n+\t\t  {\n+\t\t    const __uctype __uerngrange = __urngrange + 1;\n+\t\t    __tmp = (__uerngrange * operator()\n+\t\t\t     (__urng, param_type(0, __urange / __uerngrange)));\n+\t\t    __ret = __tmp + (__uctype(__urng()) - __urngmin);\n+\t\t  }\n+\t\twhile (__ret > __urange || __ret < __tmp);\n+\t\t*__f++ = __ret;\n+\t      }\n+\t  }\n+\telse\n+\t  while (__f != __t)\n+\t    *__f++ = __uctype(__urng()) - __urngmin + __param.a();\n+      }\n+\n   template<typename _IntType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -978,6 +1071,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n \n+  template<typename _RealType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      uniform_real_distribution<_RealType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __p)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\tauto __range = __p.b() - __p.a();\n+\twhile (__f != __t)\n+\t  *__f++ = __aurng() * __range + __p.a();\n+      }\n+\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -1023,6 +1133,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n \n+  template<typename _ForwardIterator,\n+\t   typename _UniformRandomNumberGenerator>\n+    void\n+    std::bernoulli_distribution::\n+    __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t    _UniformRandomNumberGenerator& __urng,\n+\t\t    const param_type& __p)\n+    {\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __detail::_Adaptor<_UniformRandomNumberGenerator, double>\n+\t__aurng(__urng);\n+      auto __limit = __p.p() * (__aurng.max() - __aurng.min());\n+\n+      while (__f != __t)\n+\t*__f++ = (__aurng() - __aurng.min()) < __limit;\n+    }\n+\n   template<typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -1072,6 +1199,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn result_type(__cand + __naf);\n       }\n \n+  template<typename _IntType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      geometric_distribution<_IntType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __param)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\t// About the epsilon thing see this thread:\n+\t// http://gcc.gnu.org/ml/gcc-patches/2006-10/msg00971.html\n+\tconst double __naf =\n+\t  (1 - std::numeric_limits<double>::epsilon()) / 2;\n+\t// The largest _RealType convertible to _IntType.\n+\tconst double __thr =\n+\t  std::numeric_limits<_IntType>::max() + __naf;\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, double>\n+\t  __aurng(__urng);\n+\n+\twhile (__f != __t)\n+\t  {\n+\t    double __cand;\n+\t    do\n+\t      __cand = std::floor(std::log(__aurng()) / __param._M_log_1_p);\n+\t    while (__cand >= __thr);\n+\n+\t    *__f++ = __cand + __naf;\n+\t  }\n+      }\n+\n   template<typename _IntType,\n \t   typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n@@ -1147,6 +1305,47 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __poisson(__urng);\n       }\n \n+  template<typename _IntType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      negative_binomial_distribution<_IntType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\twhile (__f != __t)\n+\t  {\n+\t    const double __y = _M_gd(__urng);\n+\n+\t    // XXX Is the constructor too slow?\n+\t    std::poisson_distribution<result_type> __poisson(__y);\n+\t    *__f++ = __poisson(__urng);\n+\t  }\n+      }\n+\n+  template<typename _IntType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      negative_binomial_distribution<_IntType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __p)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\ttypename std::gamma_distribution<result_type>::param_type\n+\t  __p2(__p.k(), (1.0 - __p.p()) / __p.p());\n+\n+\twhile (__f != __t)\n+\t  {\n+\t    const double __y = _M_gd(__urng, __p2);\n+\n+\t    std::poisson_distribution<result_type> __poisson(__y);\n+\t    *__f++ = __poisson(__urng);\n+\t  }\n+      }\n+\n   template<typename _IntType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -1336,6 +1535,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n       }\n \n+  template<typename _IntType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      poisson_distribution<_IntType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __param)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\t// We could duplicate everything from operator()...\n+\twhile (__f != __t)\n+\t  *__f++ = this->operator()(__urng, __param);\n+      }\n+\n   template<typename _IntType,\n \t   typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n@@ -1584,6 +1798,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __ret;\n       }\n \n+  template<typename _IntType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      binomial_distribution<_IntType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __param)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\t// We could duplicate everything from operator()...\n+\twhile (__f != __t)\n+\t  *__f++ = this->operator()(__urng, __param);\n+      }\n+\n   template<typename _IntType,\n \t   typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n@@ -1633,6 +1862,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n \n+  template<typename _RealType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      std::exponential_distribution<_RealType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __p)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\twhile (__f != __t)\n+\t  *__f++ = -std::log(__aurng()) / __p.lambda();\n+      }\n+\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -1720,6 +1965,66 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __ret;\n       }\n \n+  template<typename _RealType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      normal_distribution<_RealType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __param)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\n+\tif (__f == __t)\n+\t  return;\n+\n+\tif (_M_saved_available)\n+\t  {\n+\t    _M_saved_available = false;\n+\t    *__f++ = _M_saved * __param.stddev() + __param.mean();\n+\n+\t    if (__f == __t)\n+\t      return;\n+\t  }\n+\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\twhile (__f + 1 < __t)\n+\t  {\n+\t    result_type __x, __y, __r2;\n+\t    do\n+\t      {\n+\t\t__x = result_type(2.0) * __aurng() - 1.0;\n+\t\t__y = result_type(2.0) * __aurng() - 1.0;\n+\t\t__r2 = __x * __x + __y * __y;\n+\t      }\n+\t    while (__r2 > 1.0 || __r2 == 0.0);\n+\n+\t    const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);\n+\t    *__f++ = __y * __mult * __param.stddev() + __param.mean();\n+\t    *__f++ = __x * __mult * __param.stddev() + __param.mean();\n+\t  }\n+\n+\tif (__f != __t)\n+\t  {\n+\t    result_type __x, __y, __r2;\n+\t    do\n+\t      {\n+\t\t__x = result_type(2.0) * __aurng() - 1.0;\n+\t\t__y = result_type(2.0) * __aurng() - 1.0;\n+\t\t__r2 = __x * __x + __y * __y;\n+\t      }\n+\t    while (__r2 > 1.0 || __r2 == 0.0);\n+\n+\t    const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);\n+\t    _M_saved = __x * __mult;\n+\t    _M_saved_available = true;\n+\t    *__f = __y * __mult * __param.stddev() + __param.mean();\n+\t  }\n+      }\n+\n   template<typename _RealType>\n     bool\n     operator==(const std::normal_distribution<_RealType>& __d1,\n@@ -1791,6 +2096,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n \n+  template<typename _RealType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      lognormal_distribution<_RealType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __p)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\t  while (__f != __t)\n+\t    *__f++ = std::exp(__p.s() * _M_nd(__urng) + __p.m());\n+      }\n+\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -1837,6 +2156,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n \n+  template<typename _RealType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      std::chi_squared_distribution<_RealType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      typename std::gamma_distribution<result_type>::param_type&\n+\t\t      __p)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\twhile (__f != __t)\n+\t  *__f++ = 2 * _M_gd(__urng, __p);\n+      }\n+\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -1900,6 +2234,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __p.a() + __p.b() * std::tan(__pi * __u);\n       }\n \n+  template<typename _RealType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      cauchy_distribution<_RealType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __p)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\tconst _RealType __pi = 3.1415926535897932384626433832795029L;\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\twhile (__f != __t)\n+\t  {\n+\t    _RealType __u;\n+\t    do\n+\t      __u = __aurng();\n+\t    while (__u == 0.5);\n+\n+\t    *__f++ = __p.a() + __p.b() * std::tan(__pi * __u);\n+\t  }\n+      }\n+\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -1945,6 +2303,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n \n+  template<typename _RealType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      std::fisher_f_distribution<_RealType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\twhile (__f != __t)\n+\t  *__f++ = ((_M_gd_x(__urng) * n()) / (_M_gd_y(__urng) * m()));\n+      }\n+\n+  template<typename _RealType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      std::fisher_f_distribution<_RealType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __p)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\ttypedef typename std::gamma_distribution<result_type>::param_type\n+\t  param_type;\n+\tparam_type __p1(__p.m() / 2);\n+\tparam_type __p2(__p.n() / 2);\n+\twhile (__f != __t)\n+\t  *__f++ = ((_M_gd_x(__urng, __p1) * n())\n+\t\t    / (_M_gd_y(__urng, __p2) * m()));\n+      }\n+\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -1991,6 +2381,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n \n+  template<typename _RealType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      std::student_t_distribution<_RealType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\twhile (__f != __t)\n+\t  *__f++ = _M_nd(__urng) * std::sqrt(n() / _M_gd(__urng));\n+      }\n+\n+  template<typename _RealType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      std::student_t_distribution<_RealType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __p)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\ttypename std::gamma_distribution<result_type>::param_type\n+\t  __p2(__p.n() / 2, 2);\n+\twhile (__f != __t)\n+\t  *__f++ =  _M_nd(__urng) * std::sqrt(__p.n() / _M_gd(__urng, __p2));\n+      }\n+\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -2094,6 +2513,72 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n       }\n \n+  template<typename _RealType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      gamma_distribution<_RealType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __param)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\tresult_type __u, __v, __n;\n+\tconst result_type __a1 = (__param._M_malpha\n+\t\t\t\t  - _RealType(1.0) / _RealType(3.0));\n+\n+\tif (__param.alpha() == __param._M_malpha)\n+\t  while (__f != __t)\n+\t    {\n+\t      do\n+\t\t{\n+\t\t  do\n+\t\t    {\n+\t\t      __n = _M_nd(__urng);\n+\t\t      __v = result_type(1.0) + __param._M_a2 * __n;\n+\t\t    }\n+\t\t  while (__v <= 0.0);\n+\n+\t\t  __v = __v * __v * __v;\n+\t\t  __u = __aurng();\n+\t\t}\n+\t      while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n\n+\t\t     && (std::log(__u) > (0.5 * __n * __n + __a1\n+\t\t\t\t\t  * (1.0 - __v + std::log(__v)))));\n+\n+\t      *__f++ = __a1 * __v * __param.beta();\n+\t    }\n+\telse\n+\t  while (__f != __t)\n+\t    {\n+\t      do\n+\t\t{\n+\t\t  do\n+\t\t    {\n+\t\t      __n = _M_nd(__urng);\n+\t\t      __v = result_type(1.0) + __param._M_a2 * __n;\n+\t\t    }\n+\t\t  while (__v <= 0.0);\n+\n+\t\t  __v = __v * __v * __v;\n+\t\t  __u = __aurng();\n+\t\t}\n+\t      while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n\n+\t\t     && (std::log(__u) > (0.5 * __n * __n + __a1\n+\t\t\t\t\t  * (1.0 - __v + std::log(__v)))));\n+\n+\t      do\n+\t\t__u = __aurng();\n+\t      while (__u == 0.0);\n+\n+\t      *__f++ = (std::pow(__u, result_type(1.0) / __param.alpha())\n+\t\t\t* __a1 * __v * __param.beta());\n+\t    }\n+      }\n+\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -2153,6 +2638,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t  result_type(1) / __p.a());\n       }\n \n+  template<typename _RealType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      weibull_distribution<_RealType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __p)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\tauto inv_a = result_type(1) / __p.a();\n+\n+\twhile (__f != __t)\n+\t  *__f++ = __p.b() * std::pow(-std::log(__aurng()), inv_a);\n+      }\n+\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -2210,6 +2713,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __p.a() - __p.b() * std::log(-std::log(__aurng()));\n       }\n \n+  template<typename _RealType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      extreme_value_distribution<_RealType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __p)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\twhile (__f != __t)\n+\t  *__f++ = __p.a() - __p.b() * std::log(-std::log(__aurng()));\n+      }\n+\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -2315,6 +2835,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __pos - __param._M_cp.begin();\n       }\n \n+  template<typename _IntType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      discrete_distribution<_IntType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __param)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\n+\tif (__param._M_cp.empty())\n+\t  {\n+\t    while (__f != __t)\n+\t      *__f++ = result_type(0);\n+\t    return;\n+\t  }\n+\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, double>\n+\t  __aurng(__urng);\n+\n+\twhile (__f != __t)\n+\t  {\n+\t    const double __p = __aurng();\n+\t    auto __pos = std::lower_bound(__param._M_cp.begin(),\n+\t\t\t\t\t  __param._M_cp.end(), __p);\n+\n+\t    *__f++ = __pos - __param._M_cp.begin();\n+\t  }\n+      }\n+\n   template<typename _IntType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -2490,6 +3041,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __param._M_int[__i] + (__p - __pref) / __param._M_den[__i];\n       }\n \n+  template<typename _RealType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      piecewise_constant_distribution<_RealType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __param)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, double>\n+\t  __aurng(__urng);\n+\n+\tif (__param._M_cp.empty())\n+\t  {\n+\t    while (__f != __t)\n+\t      *__f++ = __aurng();\n+\t    return;\n+\t  }\n+\n+\twhile (__f != __t)\n+\t  {\n+\t    const double __p = __aurng();\n+\n+\t    auto __pos = std::lower_bound(__param._M_cp.begin(),\n+\t\t\t\t\t  __param._M_cp.end(), __p);\n+\t    const size_t __i = __pos - __param._M_cp.begin();\n+\n+\t    const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;\n+\n+\t    *__f++ = (__param._M_int[__i]\n+\t\t      + (__p - __pref) / __param._M_den[__i]);\n+\t  }\n+      }\n+\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -2692,6 +3278,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         return __x;\n       }\n \n+  template<typename _RealType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      piecewise_linear_distribution<_RealType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __param)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\t// We could duplicate everything from operator()...\n+\twhile (__f != __t)\n+\t  *__f++ = this->operator()(__urng, __param);\n+      }\n+\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,"}]}