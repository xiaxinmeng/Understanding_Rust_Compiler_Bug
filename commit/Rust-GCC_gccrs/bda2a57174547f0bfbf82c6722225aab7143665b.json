{"sha": "bda2a57174547f0bfbf82c6722225aab7143665b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRhMmE1NzE3NDU0N2YwYmZiZjgyYzY3MjIyMjVhYWI3MTQzNjY1Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-01-19T13:28:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-01-19T13:28:57Z"}, "message": "m68k-protos.h (valid_mov3q_const): Take a HOST_WIDE_INT and return a bool.\n\ngcc/\n\t* config/m68k/m68k-protos.h (valid_mov3q_const): Take a HOST_WIDE_INT\n\tand return a bool.\n\t(output_move_const_into_data_reg, output_move_simode_const): Delete.\n\t* config/m68k/m68k.c (const_method, const_int_cost): Take a\n\tHOST_WIDE_INT instead of an rtx.\n\t(m68k_rtx_costs): Update call accordingly.\n\t(output_move_const_into_data_reg): Likewise.  Fix formatting.\n\t(valid_mov3q_const): Take a HOST_WIDE_INT instead of an rtx.\n\tReturn a bool.\n\t(output_move_simode_const): Update calls after above changes.\n\tRework to use automatic variables and predicates like MEM_P.\n\t* config/m68k/m68k.md (pushexthisi_const): Update call to\n\tvalid_mov3q_const.\n\nFrom-SVN: r120957", "tree": {"sha": "3520bcd6c8ecb8f6c5f909e743bd8d68872e7112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3520bcd6c8ecb8f6c5f909e743bd8d68872e7112"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bda2a57174547f0bfbf82c6722225aab7143665b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bda2a57174547f0bfbf82c6722225aab7143665b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bda2a57174547f0bfbf82c6722225aab7143665b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bda2a57174547f0bfbf82c6722225aab7143665b/comments", "author": null, "committer": null, "parents": [{"sha": "23e739936ea5245cbf8e46e8c82bd3c881b64422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e739936ea5245cbf8e46e8c82bd3c881b64422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23e739936ea5245cbf8e46e8c82bd3c881b64422"}], "stats": {"total": 112, "additions": 60, "deletions": 52}, "files": [{"sha": "47177baeb56260b92065866ca244b5f923c8556d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda2a57174547f0bfbf82c6722225aab7143665b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda2a57174547f0bfbf82c6722225aab7143665b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bda2a57174547f0bfbf82c6722225aab7143665b", "patch": "@@ -1,3 +1,19 @@\n+2007-01-19  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/m68k/m68k-protos.h (valid_mov3q_const): Take a HOST_WIDE_INT\n+\tand return a bool.\n+\t(output_move_const_into_data_reg, output_move_simode_const): Delete.\n+\t* config/m68k/m68k.c (const_method, const_int_cost): Take a\n+\tHOST_WIDE_INT instead of an rtx.\n+\t(m68k_rtx_costs): Update call accordingly.\n+\t(output_move_const_into_data_reg): Likewise.  Fix formatting.\n+\t(valid_mov3q_const): Take a HOST_WIDE_INT instead of an rtx.\n+\tReturn a bool.\n+\t(output_move_simode_const): Update calls after above changes.\n+\tRework to use automatic variables and predicates like MEM_P.\n+\t* config/m68k/m68k.md (pushexthisi_const): Update call to\n+\tvalid_mov3q_const.\n+\n 2007-01-19  Dirk Mueller  <dmueller@suse.de>\n \n \t* tree-ssa-alias.c (perform_var_substitution): Fix typo"}, {"sha": "14a9e2c1fed68d84cb30a41731ff77c1fc2bcc30", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda2a57174547f0bfbf82c6722225aab7143665b/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda2a57174547f0bfbf82c6722225aab7143665b/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=bda2a57174547f0bfbf82c6722225aab7143665b", "patch": "@@ -22,9 +22,7 @@ Boston, MA 02110-1301, USA.  */\n \n #ifdef RTX_CODE\n extern HOST_WIDE_INT m68k_initial_elimination_offset (int from, int to);\n-extern const char *output_move_const_into_data_reg (rtx *);\n-extern int valid_mov3q_const (rtx);\n-extern const char *output_move_simode_const (rtx *);\n+extern bool valid_mov3q_const (HOST_WIDE_INT);\n extern const char *output_move_simode (rtx *);\n extern const char *output_move_himode (rtx *);\n extern const char *output_move_qimode (rtx *);"}, {"sha": "caa90cd3dcf1e594d4bc4d94ca0bd74ad969b6f9", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 42, "deletions": 48, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda2a57174547f0bfbf82c6722225aab7143665b/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda2a57174547f0bfbf82c6722225aab7143665b/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=bda2a57174547f0bfbf82c6722225aab7143665b", "patch": "@@ -120,7 +120,6 @@ static tree m68k_handle_fndecl_attribute (tree *node, tree name,\n \t\t\t\t\t  bool *no_add_attrs);\n static void m68k_compute_frame_layout (void);\n static bool m68k_save_reg (unsigned int regno, bool interrupt_handler);\n-static int const_int_cost (rtx);\n static bool m68k_rtx_costs (rtx, int, int, int *);\n \f\n \n@@ -1752,17 +1751,15 @@ legitimize_pic_address (rtx orig, enum machine_mode mode ATTRIBUTE_UNUSED,\n \f\n typedef enum { MOVL, SWAP, NEGW, NOTW, NOTB, MOVQ, MVS, MVZ } CONST_METHOD;\n \n-static CONST_METHOD const_method (rtx);\n-\n #define USE_MOVQ(i)\t((unsigned) ((i) + 128) <= 255)\n \n+/* Return the type of move that should be used for integer I.  */\n+\n static CONST_METHOD\n-const_method (rtx constant)\n+const_method (HOST_WIDE_INT i)\n {\n-  int i;\n   unsigned u;\n \n-  i = INTVAL (constant);\n   if (USE_MOVQ (i))\n     return MOVQ;\n \n@@ -1800,10 +1797,12 @@ const_method (rtx constant)\n   return MOVL;\n }\n \n+/* Return the cost of moving constant I into a data register.  */\n+\n static int\n-const_int_cost (rtx constant)\n+const_int_cost (HOST_WIDE_INT i)\n {\n-  switch (const_method (constant))\n+  switch (const_method (i))\n     {\n     case MOVQ:\n       /* Constants between -128 and 127 are cheap due to moveq.  */\n@@ -1833,7 +1832,7 @@ m68k_rtx_costs (rtx x, int code, int outer_code, int *total)\n       if (x == const0_rtx)\n \t*total = 0;\n       else\n-        *total = const_int_cost (x);\n+        *total = const_int_cost (INTVAL (x));\n       return true;\n \n     case CONST:\n@@ -1958,13 +1957,16 @@ m68k_rtx_costs (rtx x, int code, int outer_code, int *total)\n     }\n }\n \n-const char *\n+/* Return an instruction to move CONST_INT OPERANDS[1] into data regsiter\n+   OPERANDS[0].  */\n+\n+static const char *\n output_move_const_into_data_reg (rtx *operands)\n {\n-  int i;\n+  HOST_WIDE_INT i;\n \n   i = INTVAL (operands[1]);\n-  switch (const_method (operands[1]))\n+  switch (const_method (i))\n     {\n     case MVZ:\n       return \"mvzw %1,%0\";\n@@ -1991,63 +1993,55 @@ output_move_const_into_data_reg (rtx *operands)\n \treturn \"moveq %1,%0\\n\\tswap %0\";\n       }\n     case MOVL:\n-\treturn \"move%.l %1,%0\";\n+      return \"move%.l %1,%0\";\n     default:\n-\tgcc_unreachable ();\n+      gcc_unreachable ();\n     }\n }\n \n-/* Return 1 if 'constant' can be represented by\n-   mov3q on a ColdFire V4 core.  */\n-int\n-valid_mov3q_const (rtx constant)\n-{\n-  int i;\n+/* Return true if I can be handled by ISA B's mov3q instruction.  */\n \n-  if (TARGET_ISAB && GET_CODE (constant) == CONST_INT)\n-    {\n-      i = INTVAL (constant);\n-      if (i == -1 || (i >= 1 && i <= 7))\n-\treturn 1;\n-    }\n-  return 0;\n+bool\n+valid_mov3q_const (HOST_WIDE_INT i)\n+{\n+  return TARGET_ISAB && (i == -1 || IN_RANGE (i, 1, 7));\n }\n \n+/* Return an instruction to move CONST_INT OPERANDS[1] into OPERANDS[0].\n+   I is the value of OPERANDS[1].  */\n \n-const char *\n+static const char *\n output_move_simode_const (rtx *operands)\n {\n-  if (operands[1] == const0_rtx\n-      && (DATA_REG_P (operands[0])\n-\t  || GET_CODE (operands[0]) == MEM)\n+  rtx dest;\n+  HOST_WIDE_INT src;\n+\n+  dest = operands[0];\n+  src = INTVAL (operands[1]);\n+  if (src == 0\n+      && (DATA_REG_P (dest) || MEM_P (dest))\n       /* clr insns on 68000 read before writing.  */\n       && ((TARGET_68010 || TARGET_COLDFIRE)\n-\t  || !(GET_CODE (operands[0]) == MEM\n-\t       && MEM_VOLATILE_P (operands[0]))))\n+\t  || !(MEM_P (dest) && MEM_VOLATILE_P (dest))))\n     return \"clr%.l %0\";\n-  else if ((GET_MODE (operands[0]) == SImode)\n-           && valid_mov3q_const (operands[1]))\n+  else if (GET_MODE (dest) == SImode && valid_mov3q_const (src))\n     return \"mov3q%.l %1,%0\";\n-  else if (operands[1] == const0_rtx\n-\t   && ADDRESS_REG_P (operands[0]))\n+  else if (src == 0 && ADDRESS_REG_P (dest))\n     return \"sub%.l %0,%0\";\n-  else if (DATA_REG_P (operands[0]))\n+  else if (DATA_REG_P (dest))\n     return output_move_const_into_data_reg (operands);\n-  else if (ADDRESS_REG_P (operands[0])\n-\t   && INTVAL (operands[1]) < 0x8000\n-\t   && INTVAL (operands[1]) >= -0x8000)\n+  else if (ADDRESS_REG_P (dest) && IN_RANGE (src, -0x8000, 0x7fff))\n     {\n-      if (valid_mov3q_const (operands[1]))\n+      if (valid_mov3q_const (src))\n         return \"mov3q%.l %1,%0\";\n       return \"move%.w %1,%0\";\n     }\n-  else if (GET_CODE (operands[0]) == MEM\n-\t   && GET_CODE (XEXP (operands[0], 0)) == PRE_DEC\n-\t   && REGNO (XEXP (XEXP (operands[0], 0), 0)) == STACK_POINTER_REGNUM\n-\t   && INTVAL (operands[1]) < 0x8000\n-\t   && INTVAL (operands[1]) >= -0x8000)\n+  else if (MEM_P (dest)\n+\t   && GET_CODE (XEXP (dest, 0)) == PRE_DEC\n+\t   && REGNO (XEXP (XEXP (dest, 0), 0)) == STACK_POINTER_REGNUM\n+\t   && IN_RANGE (src, -0x8000, 0x7fff))\n     {\n-      if (valid_mov3q_const (operands[1]))\n+      if (valid_mov3q_const (src))\n         return \"mov3q%.l %1,%-\";\n       return \"pea %a1\";\n     }"}, {"sha": "0768b5a8a2649246b07a759258ed0429a0ed2053", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda2a57174547f0bfbf82c6722225aab7143665b/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda2a57174547f0bfbf82c6722225aab7143665b/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=bda2a57174547f0bfbf82c6722225aab7143665b", "patch": "@@ -579,7 +579,7 @@\n {\n   if (operands[1] == const0_rtx)\n     return \"clr%.l %0\";\n-  if (valid_mov3q_const(operands[1]))\n+  if (valid_mov3q_const (INTVAL (operands[1])))\n     return \"mov3q%.l %1,%-\";\n   return \"pea %a1\";\n })"}]}