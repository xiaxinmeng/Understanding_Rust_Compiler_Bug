{"sha": "db051c243c032dbb327058590bc448edb201a6e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIwNTFjMjQzYzAzMmRiYjMyNzA1ODU5MGJjNDQ4ZWRiMjAxYTZlNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-04-17T17:18:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-17T17:18:20Z"}, "message": "sse.md (vec_extract_lo_<mode><mask_name>): Add (=v, v) alternative and explicit \"memory\" attribute.\n\n\t* config/i386/sse.md (vec_extract_lo_<mode><mask_name>): Add\n\t(=v, v) alternative and explicit \"memory\" attribute.\n\t(vec_extract_lo_<mode><mask_name>): Likewise.  Also add\n\t\"type\", \"prefix\", \"prefix_extra\", \"length_immediate\" and \"mode\"\n\tattributes.\n\t(vec_extract_lo_<mode><mask_name>): Add (=v, v) alternative and use\n\t\"sselog1\" type instead of \"sselog\".\n\t(vec_extract_hi_<mode><mask_name>): Use \"sselog1\" type instead of\n\t\"sselog\".  Remove explicit \"memory\" attribute.\n\t(vec_extract_lo_v32hi): Add (=v, v) alternative and explicit \"memory\",\n\t\"type\", \"prefix\", \"prefix_extra\", \"length_immediate\" and \"mode\"\n\tattributes.\n\t(vec_extract_hi_v32hi): Merge all alternatives into one, use\n\t\"sselog1\" type instead of \"sselog\".  Remove explicit \"memory\"\n\tattribute.\n\t(vec_extract_hi_v16hi): Merge each pair of alternatives into one,\n\tuse \"sselog1\" type instead of \"sselog\".  Remove explicit \"memory\"\n\tattribute.\n\t(vec_extract_lo_v64qi): Add (=v, v) alternative and explicit \"memory\",\n\t\"type\", \"prefix\", \"prefix_extra\", \"length_immediate\" and \"mode\"\n\tattributes.\n\t(vec_extract_hi_v64qi): Merge all alternatives into one, use\n\t\"sselog1\" type instead of \"sselog\".  Remove explicit \"memory\"\n\tattribute.\n\t(vec_extract_hi_v32qi): Merge each pair of alternatives into one,\n\tuse \"sselog1\" type instead of \"sselog\".  Remove explicit \"memory\"\n\tattribute.\n\nFrom-SVN: r259438", "tree": {"sha": "08ebb55f15cb8d92eb7ce977994520279dad7cc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08ebb55f15cb8d92eb7ce977994520279dad7cc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db051c243c032dbb327058590bc448edb201a6e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db051c243c032dbb327058590bc448edb201a6e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db051c243c032dbb327058590bc448edb201a6e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db051c243c032dbb327058590bc448edb201a6e6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fcab9fce57d9f1284f266949c778e3c39cb8db6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcab9fce57d9f1284f266949c778e3c39cb8db6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcab9fce57d9f1284f266949c778e3c39cb8db6e"}], "stats": {"total": 122, "additions": 79, "deletions": 43}, "files": [{"sha": "f98824ec3028ca7d2f9a5758306af9604c00dfa7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db051c243c032dbb327058590bc448edb201a6e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db051c243c032dbb327058590bc448edb201a6e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db051c243c032dbb327058590bc448edb201a6e6", "patch": "@@ -1,5 +1,33 @@\n 2018-04-17  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/sse.md (vec_extract_lo_<mode><mask_name>): Add\n+\t(=v, v) alternative and explicit \"memory\" attribute.\n+\t(vec_extract_lo_<mode><mask_name>): Likewise.  Also add\n+\t\"type\", \"prefix\", \"prefix_extra\", \"length_immediate\" and \"mode\"\n+\tattributes.\n+\t(vec_extract_lo_<mode><mask_name>): Add (=v, v) alternative and use\n+\t\"sselog1\" type instead of \"sselog\".\n+\t(vec_extract_hi_<mode><mask_name>): Use \"sselog1\" type instead of\n+\t\"sselog\".  Remove explicit \"memory\" attribute.\n+\t(vec_extract_lo_v32hi): Add (=v, v) alternative and explicit \"memory\",\n+\t\"type\", \"prefix\", \"prefix_extra\", \"length_immediate\" and \"mode\"\n+\tattributes.\n+\t(vec_extract_hi_v32hi): Merge all alternatives into one, use\n+\t\"sselog1\" type instead of \"sselog\".  Remove explicit \"memory\"\n+\tattribute.\n+\t(vec_extract_hi_v16hi): Merge each pair of alternatives into one,\n+\tuse \"sselog1\" type instead of \"sselog\".  Remove explicit \"memory\"\n+\tattribute.\n+\t(vec_extract_lo_v64qi): Add (=v, v) alternative and explicit \"memory\",\n+\t\"type\", \"prefix\", \"prefix_extra\", \"length_immediate\" and \"mode\"\n+\tattributes.\n+\t(vec_extract_hi_v64qi): Merge all alternatives into one, use\n+\t\"sselog1\" type instead of \"sselog\".  Remove explicit \"memory\"\n+\tattribute.\n+\t(vec_extract_hi_v32qi): Merge each pair of alternatives into one,\n+\tuse \"sselog1\" type instead of \"sselog\".  Remove explicit \"memory\"\n+\tattribute.\n+\n \tPR target/85430\n \t* config/i386/i386.md (*ashlqi3_1_slp): Use alu1 type instead of alu.\n "}, {"sha": "640971d5e12b0505606a6623815a9da508a2e485", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 51, "deletions": 43, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db051c243c032dbb327058590bc448edb201a6e6/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db051c243c032dbb327058590bc448edb201a6e6/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=db051c243c032dbb327058590bc448edb201a6e6", "patch": "@@ -7495,9 +7495,9 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"vec_extract_lo_<mode><mask_name>\"\n-  [(set (match_operand:<ssehalfvecmode> 0 \"<store_mask_predicate>\" \"=<store_mask_constraint>,v\")\n+  [(set (match_operand:<ssehalfvecmode> 0 \"<store_mask_predicate>\" \"=v,<store_mask_constraint>,v\")\n \t(vec_select:<ssehalfvecmode>\n-\t  (match_operand:V8FI 1 \"<store_mask_predicate>\" \"v,<store_mask_constraint>\")\n+\t  (match_operand:V8FI 1 \"<store_mask_predicate>\" \"v,v,<store_mask_constraint>\")\n \t  (parallel [(const_int 0) (const_int 1)\n             (const_int 2) (const_int 3)])))]\n   \"TARGET_AVX512F\n@@ -7511,6 +7511,7 @@\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"memory\" \"none,store,load\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n@@ -7651,10 +7652,10 @@\n })\n \n (define_insn \"vec_extract_lo_<mode><mask_name>\"\n-  [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=v,m\")\n+  [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=v,v,m\")\n \t(vec_select:<ssehalfvecmode>\n \t  (match_operand:V16FI 1 \"<store_mask_predicate>\"\n-\t\t\t\t \"<store_mask_constraint>,v\")\n+\t\t\t\t \"v,<store_mask_constraint>,v\")\n \t  (parallel [(const_int 0) (const_int 1)\n                      (const_int 2) (const_int 3)\n                      (const_int 4) (const_int 5)\n@@ -7670,7 +7671,13 @@\n     return \"vextract<shuffletype>32x8\\t{$0x0, %1, %0<mask_operand2>|%0<mask_operand2>, %1, 0x0}\";\n   else\n     return \"#\";\n-})\n+}\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"memory\" \"none,load,store\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_split\n   [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\")\n@@ -7697,10 +7704,10 @@\n })\n \n (define_insn \"vec_extract_lo_<mode><mask_name>\"\n-  [(set (match_operand:<ssehalfvecmode> 0 \"<store_mask_predicate>\" \"=v,m\")\n+  [(set (match_operand:<ssehalfvecmode> 0 \"<store_mask_predicate>\" \"=v,v,m\")\n \t(vec_select:<ssehalfvecmode>\n \t  (match_operand:VI8F_256 1 \"<store_mask_predicate>\"\n-\t\t\t\t    \"<store_mask_constraint>,v\")\n+\t\t\t\t    \"v,<store_mask_constraint>,v\")\n \t  (parallel [(const_int 0) (const_int 1)])))]\n   \"TARGET_AVX\n    && <mask_avx512vl_condition> && <mask_avx512dq_condition>\n@@ -7711,10 +7718,10 @@\n   else\n     return \"#\";\n }\n-   [(set_attr \"type\" \"sselog\")\n+   [(set_attr \"type\" \"sselog1\")\n     (set_attr \"prefix_extra\" \"1\")\n     (set_attr \"length_immediate\" \"1\")\n-    (set_attr \"memory\" \"none,store\")\n+    (set_attr \"memory\" \"none,load,store\")\n     (set_attr \"prefix\" \"evex\")\n     (set_attr \"mode\" \"XI\")])\n \n@@ -7745,10 +7752,9 @@\n   else\n     return \"vextract<i128>\\t{$0x1, %1, %0|%0, %1, 0x1}\";\n }\n-  [(set_attr \"type\" \"sselog\")\n+  [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"memory\" \"none,store\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n@@ -7854,9 +7860,9 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn_and_split \"vec_extract_lo_v32hi\"\n-  [(set (match_operand:V16HI 0 \"nonimmediate_operand\" \"=v,m\")\n+  [(set (match_operand:V16HI 0 \"nonimmediate_operand\" \"=v,v,m\")\n \t(vec_select:V16HI\n-\t  (match_operand:V32HI 1 \"nonimmediate_operand\" \"vm,v\")\n+\t  (match_operand:V32HI 1 \"nonimmediate_operand\" \"v,m,v\")\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 2) (const_int 3)\n \t\t     (const_int 4) (const_int 5)\n@@ -7886,12 +7892,18 @@\n     operands[0] = lowpart_subreg (V32HImode, operands[0], V16HImode);\n   else\n     operands[1] = gen_lowpart (V16HImode, operands[1]);\n-})\n+}\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"memory\" \"none,load,store\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n \n (define_insn \"vec_extract_hi_v32hi\"\n-  [(set (match_operand:V16HI 0 \"nonimmediate_operand\" \"=v,m\")\n+  [(set (match_operand:V16HI 0 \"nonimmediate_operand\" \"=vm\")\n \t(vec_select:V16HI\n-\t  (match_operand:V32HI 1 \"register_operand\" \"v,v\")\n+\t  (match_operand:V32HI 1 \"register_operand\" \"v\")\n \t  (parallel [(const_int 16) (const_int 17)\n \t\t     (const_int 18) (const_int 19)\n \t\t     (const_int 20) (const_int 21)\n@@ -7902,10 +7914,9 @@\n \t\t     (const_int 30) (const_int 31)])))]\n   \"TARGET_AVX512F\"\n   \"vextracti64x4\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n-  [(set_attr \"type\" \"sselog\")\n+  [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"memory\" \"none,store\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n@@ -7924,33 +7935,29 @@\n   \"operands[1] = gen_lowpart (V8HImode, operands[1]);\")\n \n (define_insn \"vec_extract_hi_v16hi\"\n-  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=x,m,v,m,v,m\")\n+  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=xm,vm,vm\")\n \t(vec_select:V8HI\n-\t  (match_operand:V16HI 1 \"register_operand\" \"x,x,v,v,v,v\")\n+\t  (match_operand:V16HI 1 \"register_operand\" \"x,v,v\")\n \t  (parallel [(const_int 8) (const_int 9)\n \t\t     (const_int 10) (const_int 11)\n \t\t     (const_int 12) (const_int 13)\n \t\t     (const_int 14) (const_int 15)])))]\n   \"TARGET_AVX\"\n   \"@\n-   vextract%~128\\t{$0x1, %1, %0|%0, %1, 0x1}\n    vextract%~128\\t{$0x1, %1, %0|%0, %1, 0x1}\n    vextracti32x4\\t{$0x1, %1, %0|%0, %1, 0x1}\n-   vextracti32x4\\t{$0x1, %1, %0|%0, %1, 0x1}\n-   vextracti32x4\\t{$0x1, %g1, %0|%0, %g1, 0x1}\n    vextracti32x4\\t{$0x1, %g1, %0|%0, %g1, 0x1}\"\n-  [(set_attr \"type\" \"sselog\")\n+  [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"isa\" \"*,*,avx512dq,avx512dq,avx512f,avx512f\")\n-   (set_attr \"memory\" \"none,store,none,store,none,store\")\n-   (set_attr \"prefix\" \"vex,vex,evex,evex,evex,evex\")\n+   (set_attr \"isa\" \"*,avx512dq,avx512f\")\n+   (set_attr \"prefix\" \"vex,evex,evex\")\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn_and_split \"vec_extract_lo_v64qi\"\n-  [(set (match_operand:V32QI 0 \"nonimmediate_operand\" \"=v,m\")\n+  [(set (match_operand:V32QI 0 \"nonimmediate_operand\" \"=v,v,m\")\n \t(vec_select:V32QI\n-\t  (match_operand:V64QI 1 \"nonimmediate_operand\" \"vm,v\")\n+\t  (match_operand:V64QI 1 \"nonimmediate_operand\" \"v,m,v\")\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 2) (const_int 3)\n \t\t     (const_int 4) (const_int 5)\n@@ -7988,12 +7995,18 @@\n     operands[0] = lowpart_subreg (V64QImode, operands[0], V32QImode);\n   else\n     operands[1] = gen_lowpart (V32QImode, operands[1]);\n-})\n+}\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"memory\" \"none,load,store\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n \n (define_insn \"vec_extract_hi_v64qi\"\n-  [(set (match_operand:V32QI 0 \"nonimmediate_operand\" \"=v,m\")\n+  [(set (match_operand:V32QI 0 \"nonimmediate_operand\" \"=vm\")\n \t(vec_select:V32QI\n-\t  (match_operand:V64QI 1 \"register_operand\" \"v,v\")\n+\t  (match_operand:V64QI 1 \"register_operand\" \"v\")\n \t  (parallel [(const_int 32) (const_int 33)\n \t\t     (const_int 34) (const_int 35)\n \t\t     (const_int 36) (const_int 37)\n@@ -8012,10 +8025,9 @@\n \t\t     (const_int 62) (const_int 63)])))]\n   \"TARGET_AVX512F\"\n   \"vextracti64x4\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n-  [(set_attr \"type\" \"sselog\")\n+  [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"memory\" \"none,store\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n@@ -8038,9 +8050,9 @@\n   \"operands[1] = gen_lowpart (V16QImode, operands[1]);\")\n \n (define_insn \"vec_extract_hi_v32qi\"\n-  [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=x,m,v,m,v,m\")\n+  [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=xm,vm,vm\")\n \t(vec_select:V16QI\n-\t  (match_operand:V32QI 1 \"register_operand\" \"x,x,v,v,v,v\")\n+\t  (match_operand:V32QI 1 \"register_operand\" \"x,v,v\")\n \t  (parallel [(const_int 16) (const_int 17)\n \t\t     (const_int 18) (const_int 19)\n \t\t     (const_int 20) (const_int 21)\n@@ -8052,17 +8064,13 @@\n   \"TARGET_AVX\"\n   \"@\n    vextract%~128\\t{$0x1, %1, %0|%0, %1, 0x1}\n-   vextract%~128\\t{$0x1, %1, %0|%0, %1, 0x1}\n-   vextracti32x4\\t{$0x1, %1, %0|%0, %1, 0x1}\n    vextracti32x4\\t{$0x1, %1, %0|%0, %1, 0x1}\n-   vextracti32x4\\t{$0x1, %g1, %0|%0, %g1, 0x1}\n    vextracti32x4\\t{$0x1, %g1, %0|%0, %g1, 0x1}\"\n-  [(set_attr \"type\" \"sselog\")\n+  [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"isa\" \"*,*,avx512dq,avx512dq,avx512f,avx512f\")\n-   (set_attr \"memory\" \"none,store,none,store,none,store\")\n-   (set_attr \"prefix\" \"vex,vex,evex,evex,evex,evex\")\n+   (set_attr \"isa\" \"*,avx512dq,avx512f\")\n+   (set_attr \"prefix\" \"vex,evex,evex\")\n    (set_attr \"mode\" \"OI\")])\n \n ;; Modes handled by vec_extract patterns."}]}