{"sha": "e7c77c4f12100602e078cee454b8d0e7433c2660", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdjNzdjNGYxMjEwMDYwMmUwNzhjZWU0NTRiOGQwZTc0MzNjMjY2MA==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2017-11-09T05:42:43Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2017-11-09T05:42:43Z"}, "message": "Add option to force indirect calls for x86\n\nThis patch adds a -mforce-indirect-call option to force all calls\nor tail calls on x86_64 between functions to indirect. This is similar to the\nlarge code model, but doesn't affect jumps inside functions, so has much\nless run time overhead.\n\nThis is useful with Intel Processor Trace (PT). PT has precise timing\nfor indirect calls/jumps, but not for direct ones. So if we can force\nthem to indirect it allows to time every function relatively accurately\n(minus the overhead of the indirect branch)\n\nWithout this short functions often don't see a timing update and cannot\nbe measured.\n\nThe timing requires at least Skylake or Goldmont based CPUs.\n\nI made it an option. Originally I tried to make it a new code model,\nbut since it can be combined with other code models (medium, pic, kernel\netc.) this turned out to be too many combinations.\n\nFor example with gcc. This first column is a ns time stamp for the\nfunctions.\n\n$ perf record -e intel_pt/noretcomp=1,cyc=1,cyc_thresh=1/u ./cc1 -O3 hello.c\n$ perf script --itrace=cr -F callindent,time,sym,addr --ns  | sed -n 180000,182000p | less\n...\n1184596.432756920:                             build_int_cst                        =>           79c9de c_common_nodes_and_builtins\n1184596.432756921:                             tree_cons                            =>           ee2080 tree_cons\n1184596.432756938:                                 ggc_internal_alloc               =>           80f3e0 ggc_internal_alloc\n1184596.432756951:                                     memset@plt                   =>           598af0 memset@plt\n1184596.432756967:                                     __memset_avx2_unaligned_erms =>           80f605 ggc_internal_alloc\n1184596.432756969:                                 ggc_internal_alloc               =>           ee20a2 tree_cons\n1184596.432756973:                             tree_cons                            =>           79c9f4 c_common_nodes_and_builtins\n1184596.432756974:                             build_int_cst                        =>           ef9a40 build_int_cst\n1184596.432756996:                                 wide_int_to_tree                 =>           ef93a0 wide_int_to_tree\n1184596.432757000:                                     wi::force_to_size            =>           f48f70 wi::force_to_size\n1184596.432757005:                                     canonize                     =>           ef94de wide_int_to_tree\n1184596.432757021:                                     get_int_cst_ext_nunits       =>           ee1960 get_int_cst_ext_nunits\n1184596.432757026:                                     get_int_cst_ext_nunits       =>           ef94fe wide_int_to_tree\n1184596.432757042:                                     tree_int_cst_elt_check       =>           83e310 tree_int_cst_elt_check\n1184596.432757044:                                     tree_int_cst_elt_check       =>           ef9761 wide_int_to_tree\n1184596.432757046:                                 wide_int_to_tree                 =>           ef9a9b build_int_cst\n\ngcc/:\n2017-11-08  Andi Kleen  <ak@linux.intel.com>\n\n\t* config/i386/i386.opt: Add -mforce-indirect-call.\n\t* config/i386/predicates.md: Check for flag_force_indirect_call.\n\t* doc/invoke.texi: Document -mforce-indirect-call\n\ngcc/testsuite/:\n2017-11-08  Andi Kleen  <ak@linux.intel.com>\n\n\t* gcc.target/i386/force-indirect-call-1.c: New test.\n\t* gcc.target/i386/force-indirect-call-2.c: New test.\n\t* gcc.target/i386/force-indirect-call-3.c: New test.\n\nFrom-SVN: r254560", "tree": {"sha": "40f34b96ed4c5a569bb5bdadc2dd7033608299c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40f34b96ed4c5a569bb5bdadc2dd7033608299c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7c77c4f12100602e078cee454b8d0e7433c2660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c77c4f12100602e078cee454b8d0e7433c2660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c77c4f12100602e078cee454b8d0e7433c2660", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c77c4f12100602e078cee454b8d0e7433c2660/comments", "author": null, "committer": null, "parents": [{"sha": "8b74c9cd73c5e86b431afda1126fb97393600983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b74c9cd73c5e86b431afda1126fb97393600983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b74c9cd73c5e86b431afda1126fb97393600983"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "442e5653a4063e7c2a83e8cc14cd29563ffa3f58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c77c4f12100602e078cee454b8d0e7433c2660/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c77c4f12100602e078cee454b8d0e7433c2660/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7c77c4f12100602e078cee454b8d0e7433c2660", "patch": "@@ -1,3 +1,9 @@\n+2017-11-08  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* config/i386/i386.opt: Add -mforce-indirect-call.\n+\t* config/i386/predicates.md: Check for flag_force_indirect_call.\n+\t* doc/invoke.texi: Document -mforce-indirect-call\n+\n 2017-11-08  Kito Cheng  <kito.cheng@gmail.com>\n \n \t* config/riscv/riscv-protos.h (riscv_slow_unaligned_access_p):"}, {"sha": "d2c10ab24d1b799136d81052f9a51a4570574815", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c77c4f12100602e078cee454b8d0e7433c2660/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c77c4f12100602e078cee454b8d0e7433c2660/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=e7c77c4f12100602e078cee454b8d0e7433c2660", "patch": "@@ -977,3 +977,7 @@ mcet-switch\n Target Report Undocumented Var(flag_cet_switch) Init(0)\n Turn on CET instrumentation for switch statements, which use jump table and\n indirect jump.\n+\n+mforce-indirect-call\n+Target Report Var(flag_force_indirect_call) Init(0)\n+Make all function calls indirect."}, {"sha": "c6e6e980959778ba8d248617b592e9fd59ee9533", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c77c4f12100602e078cee454b8d0e7433c2660/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c77c4f12100602e078cee454b8d0e7433c2660/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=e7c77c4f12100602e078cee454b8d0e7433c2660", "patch": "@@ -600,7 +600,8 @@\n (define_predicate \"constant_call_address_operand\"\n   (match_code \"symbol_ref\")\n {\n-  if (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC)\n+  if (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC\n+      || flag_force_indirect_call)\n     return false;\n   if (TARGET_DLLIMPORT_DECL_ATTRIBUTES && SYMBOL_REF_DLLIMPORT_P (op))\n     return false;"}, {"sha": "e897d93070ae320f741aeba4d2490f8366843935", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c77c4f12100602e078cee454b8d0e7433c2660/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c77c4f12100602e078cee454b8d0e7433c2660/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e7c77c4f12100602e078cee454b8d0e7433c2660", "patch": "@@ -1205,7 +1205,7 @@ See RS/6000 and PowerPC Options.\n -msse4a  -m3dnow  -m3dnowa  -mpopcnt  -mabm  -mbmi  -mtbm  -mfma4  -mxop @gol\n -mlzcnt  -mbmi2  -mfxsr  -mxsave  -mxsaveopt  -mrtm  -mlwp  -mmpx  @gol\n -mmwaitx  -mclzero  -mpku  -mthreads @gol\n--mcet -mibt -mshstk @gol\n+-mcet -mibt -mshstk -mforce-indirect-call @gol\n -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mmemcpy-strategy=@var{strategy}  -mmemset-strategy=@var{strategy} @gol\n@@ -26175,6 +26175,12 @@ You can control this behavior for specific functions by\n using the function attributes @code{ms_abi} and @code{sysv_abi}.\n @xref{Function Attributes}.\n \n+@item -mforce-indirect-call\n+@opindex mforce-indirect-call\n+Force all calls to functions to be indirect. This is useful\n+when using Intel Processor Trace where it generates more precise timing\n+information for function calls.\n+\n @item -mcall-ms2sysv-xlogues\n @opindex mcall-ms2sysv-xlogues\n @opindex mno-call-ms2sysv-xlogues"}, {"sha": "73d5f874326e4aeffefb4945667882a600f8e44d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c77c4f12100602e078cee454b8d0e7433c2660/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c77c4f12100602e078cee454b8d0e7433c2660/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e7c77c4f12100602e078cee454b8d0e7433c2660", "patch": "@@ -1,3 +1,9 @@\n+2017-11-08  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* gcc.target/i386/force-indirect-call-1.c: New test.\n+\t* gcc.target/i386/force-indirect-call-2.c: New test.\n+\t* gcc.target/i386/force-indirect-call-3.c: New test.\n+\n 2017-11-08  Steven G. Kargl  <kargl@kgcc.gnu.org>\n \n \tPR Fortran/82841"}, {"sha": "be1be2c879e64b1cfc91f0dc315905bfb881b3e8", "filename": "gcc/testsuite/gcc.target/i386/force-indirect-call-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c77c4f12100602e078cee454b8d0e7433c2660/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fforce-indirect-call-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c77c4f12100602e078cee454b8d0e7433c2660/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fforce-indirect-call-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fforce-indirect-call-1.c?ref=e7c77c4f12100602e078cee454b8d0e7433c2660", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mforce-indirect-call\" } */\n+/* { dg-final { scan-assembler-times \"call\\[ \\\\t\\]+\\\\*%\" 2 } } */\n+/* { dg-final { scan-assembler-times \"jmp\\[ \\\\t\\]+\\\\*%\" 1 } } */\n+int x;\n+int y;\n+\n+void __attribute__((noinline)) f1(void)\n+{\n+\tx++;\n+}\n+\n+static __attribute__((noinline)) void f3(void)\n+{\n+\ty++;\n+}\n+\n+void f2()\n+{\n+\tf1();\n+\tf3();\n+\tf1();\n+}"}, {"sha": "dd0df259ab82067d3bd89375861ad7122d112cf2", "filename": "gcc/testsuite/gcc.target/i386/force-indirect-call-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c77c4f12100602e078cee454b8d0e7433c2660/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fforce-indirect-call-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c77c4f12100602e078cee454b8d0e7433c2660/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fforce-indirect-call-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fforce-indirect-call-2.c?ref=e7c77c4f12100602e078cee454b8d0e7433c2660", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mforce-indirect-call -fPIC\" } */\n+/* { dg-final { scan-assembler-times \"call\\[ \\\\t\\]+\\\\*%\" 2 } } */\n+/* { dg-final { scan-assembler-times \"jmp\\[ \\\\t\\]+\\\\*%\" 1 } } */\n+#include \"force-indirect-call-1.c\""}, {"sha": "28d8c98b7b91171dc180ec0e1e1d4ba8fa2eab83", "filename": "gcc/testsuite/gcc.target/i386/force-indirect-call-3.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c77c4f12100602e078cee454b8d0e7433c2660/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fforce-indirect-call-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c77c4f12100602e078cee454b8d0e7433c2660/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fforce-indirect-call-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fforce-indirect-call-3.c?ref=e7c77c4f12100602e078cee454b8d0e7433c2660", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mforce-indirect-call -mcmodel=medium\" } */\n+/* { dg-final { scan-assembler-times \"call\\[ \\\\t\\]+\\\\*%\" 2 } } */\n+/* { dg-final { scan-assembler-times \"jmp\\[ \\\\t\\]+\\\\*%\" 1 } } */\n+#include \"force-indirect-call-1.c\""}]}