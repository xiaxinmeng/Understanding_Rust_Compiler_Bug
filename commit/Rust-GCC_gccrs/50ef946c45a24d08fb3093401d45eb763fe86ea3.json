{"sha": "50ef946c45a24d08fb3093401d45eb763fe86ea3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBlZjk0NmM0NWEyNGQwOGZiMzA5MzQwMWQ0NWViNzYzZmU4NmVhMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-27T13:26:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-27T13:26:16Z"}, "message": "[multiple changes]\n\n2015-05-27  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_aux.adb: Minor rewording.\n\n2015-05-27  Bob Duff  <duff@adacore.com>\n\n\t* exp_prag.adb (Expand_Pragma_Abort_Defer): Make\n\tpragma Abort_Defer do nothing if Abort_Allowed is False.\n\n2015-05-27  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_ch9.adb, sem_util.adb, sem_util.ads, s-stposu.adb, s-spsufi.ads,\n\tsem_elab.ads, g-comlin.ads, errout.ads, exp_ch6.adb, sem_ch4.adb,\n\topt.ads, s-bignum.adb, output.ads, sem_ch13.adb, erroutc.ads,\n\tsem_disp.ads, exp_ch3.adb: Minor fixes of duplicate words in comments.\n\n2015-05-27  Doug Rupp  <rupp@adacore.com>\n\n\t* adaint.c (__gnat_tmp_name) [vxworks]: Robustify and use for rtp as\n\twell as kernel.\n\n2015-05-27  Pierre-Marie de Rodat  <derodat@adacore.com>\n\n\t* par_sco.adb (Process_Decision): Store sloc to\n\tcondition/pragmas SCOs associations into a temporary table before\n\tmoving them to the SCO_Raw_Hash_Table so that we can back them\n\tout just like we do for SCO entries that are simple decisions\n\tin an expression context.\n\nFrom-SVN: r223754", "tree": {"sha": "245c403c097854f6ab68fac514ca38cc0bb4830e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/245c403c097854f6ab68fac514ca38cc0bb4830e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50ef946c45a24d08fb3093401d45eb763fe86ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50ef946c45a24d08fb3093401d45eb763fe86ea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50ef946c45a24d08fb3093401d45eb763fe86ea3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50ef946c45a24d08fb3093401d45eb763fe86ea3/comments", "author": null, "committer": null, "parents": [{"sha": "99206968a8da4e5342b498f264eb365e11a499c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99206968a8da4e5342b498f264eb365e11a499c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99206968a8da4e5342b498f264eb365e11a499c8"}], "stats": {"total": 239, "additions": 166, "deletions": 73}, "files": [{"sha": "d9fbe97e507f241dfe90d9b4b253c1d3afc6f1ff", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -1,3 +1,32 @@\n+2015-05-27  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_aux.adb: Minor rewording.\n+\n+2015-05-27  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_prag.adb (Expand_Pragma_Abort_Defer): Make\n+\tpragma Abort_Defer do nothing if Abort_Allowed is False.\n+\n+2015-05-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch9.adb, sem_util.adb, sem_util.ads, s-stposu.adb, s-spsufi.ads,\n+\tsem_elab.ads, g-comlin.ads, errout.ads, exp_ch6.adb, sem_ch4.adb,\n+\topt.ads, s-bignum.adb, output.ads, sem_ch13.adb, erroutc.ads,\n+\tsem_disp.ads, exp_ch3.adb: Minor fixes of duplicate words in comments.\n+\n+2015-05-27  Doug Rupp  <rupp@adacore.com>\n+\n+\t* adaint.c (__gnat_tmp_name) [vxworks]: Robustify and use for rtp as\n+\twell as kernel.\n+\n+2015-05-27  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* par_sco.adb (Process_Decision): Store sloc to\n+\tcondition/pragmas SCOs associations into a temporary table before\n+\tmoving them to the SCO_Raw_Hash_Table so that we can back them\n+\tout just like we do for SCO entries that are simple decisions\n+\tin an expression context.\n+\n 2015-05-27  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch6.adb (Process_Formals): A non-private formal type that"}, {"sha": "9d4f051951d86c5aea3448715019f470643c93c7", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -1170,23 +1170,37 @@ __gnat_tmp_name (char *tmp_filename)\n     sprintf (tmp_filename, \"%s/gnat-XXXXXX\", tmpdir);\n \n   close (mkstemp(tmp_filename));\n-#elif defined (__vxworks) && !(defined (__RTP__) || defined (VTHREADS))\n-  int             index;\n-  char *          pos;\n-  ushort_t        t;\n+#elif defined (__vxworks) && !defined (VTHREADS)\n+  int index;\n+  char *pos;\n+  char *savepos;\n   static ushort_t seed = 0; /* used to generate unique name */\n \n-  /* generate unique name */\n+  /* Generate a unique name.  */\n   strcpy (tmp_filename, \"tmp\");\n \n-  /* fill up the name buffer from the last position */\n   index = 5;\n-  pos = tmp_filename + strlen (tmp_filename) + index;\n+  savepos = pos = tmp_filename + strlen (tmp_filename) + index;\n   *pos = '\\0';\n \n-  seed++;\n-  for (t = seed; 0 <= --index; t >>= 3)\n-      *--pos = '0' + (t & 07);\n+  while (1)\n+    {\n+      FILE *f;\n+      ushort_t t;\n+\n+      /* Fill up the name buffer from the last position.  */\n+      seed++;\n+      for (t = seed; 0 <= --index; t >>= 3)\n+        *--pos = '0' + (t & 07);\n+\n+      /* Check to see if its unique, if not bump the seed and try again.  */\n+      f = fopen (tmp_filename, \"r\");\n+      if (f == NULL)\n+        break;\n+      fclose (f);\n+      pos = savepos;\n+      index = 5;\n+    }\n #else\n   tmpnam (tmp_filename);\n #endif"}, {"sha": "35e5a97fd36fc173c9a1f2e9150891efad4955e5", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -837,7 +837,7 @@ package Errout is\n    --  pragma, or the null string if no reason is given. Config is True for the\n    --  configuration pragma case (where there is no requirement for a matching\n    --  OFF pragma). Used is set True to disable the check that the warning\n-   --  actually has has the effect of suppressing a warning.\n+   --  actually has the effect of suppressing a warning.\n \n    procedure Set_Specific_Warning_On\n      (Loc : Source_Ptr;"}, {"sha": "0fcc51ba989f818af73ffe22c6454fde7acd23a5", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -552,7 +552,7 @@ package Erroutc is\n    --  pragma, or the null string if no reason is given. Config is True for the\n    --  configuration pragma case (where there is no requirement for a matching\n    --  OFF pragma). Used is set True to disable the check that the warning\n-   --  actually has has the effect of suppressing a warning.\n+   --  actually has the effect of suppressing a warning.\n \n    procedure Set_Specific_Warning_On\n      (Loc : Source_Ptr;\n@@ -580,7 +580,7 @@ package Erroutc is\n    --  which generates a warning range for the whole source file). This routine\n    --  only deals with the general ON/OFF case, not specific warnings. The\n    --  returned result is No_String if warnings are not suppressed. If warnings\n-   --  are suppressed for the given location, then then corresponding Reason\n+   --  are suppressed for the given location, then corresponding Reason\n    --  parameter from the pragma is returned (or the null string if no Reason\n    --  parameter was present).\n "}, {"sha": "d6783d6b55e56625bc76e2dc08cc657caba35f72", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -5177,7 +5177,7 @@ package body Exp_Ch3 is\n            and then not Is_Value_Type (Typ)\n          then\n             --  Do not initialize the components if No_Default_Initialization\n-            --  applies as the the actual restriction check will occur later\n+            --  applies as the actual restriction check will occur later\n             --  when the object is frozen as it is not known yet whether the\n             --  object is imported or not.\n "}, {"sha": "67caf2f2787556e421e148894ae42b55f14c5d70", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -8992,7 +8992,7 @@ package body Exp_Ch6 is\n          Freeze_Expression (Ptr_Typ_Freeze_Ref);\n       end;\n \n-      --  If the the object is a return object of an enclosing build-in-place\n+      --  If the object is a return object of an enclosing build-in-place\n       --  function, then the implicit build-in-place parameters of the\n       --  enclosing function are simply passed along to the called function.\n       --  (Unfortunately, this won't cover the case of extension aggregates"}, {"sha": "72b83440c20276a50fb20eccb5209bd19ff02df4", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -4284,7 +4284,7 @@ package body Exp_Ch9 is\n             Append (Unprot_Call, Stmts);\n          end if;\n \n-         --  Historical note: Previously, call the the cleanup was inserted\n+         --  Historical note: Previously, call to the cleanup was inserted\n          --  here. This is now done by Build_Protected_Subprogram_Call_Cleanup,\n          --  which is also shared by the 'not Exc_Safe' path.\n \n@@ -12153,7 +12153,7 @@ package body Exp_Ch9 is\n \n    --  3) Ada 2005 (AI-345): When T.E is a dispatching procedure call, there\n    --     is no delay and the triggering statements are executed. We first\n-   --     determine the kind of of the triggering call and then execute a\n+   --     determine the kind of the triggering call and then execute a\n    --     synchronized operation or a direct call.\n \n    --    declare"}, {"sha": "a797f230bbfec0fec94ae9b107dbbfc20c12a253", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 39, "deletions": 29, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -251,41 +251,51 @@ package body Exp_Prag is\n    --    end;\n \n    procedure Expand_Pragma_Abort_Defer (N : Node_Id) is\n-      Loc  : constant Source_Ptr := Sloc (N);\n-      Stm  : Node_Id;\n-      Stms : List_Id;\n-      HSS  : Node_Id;\n-      Blk  : constant Entity_Id :=\n-               New_Internal_Entity (E_Block, Current_Scope, Sloc (N), 'B');\n-      AUD : constant Entity_Id := RTE (RE_Abort_Undefer_Direct);\n-\n    begin\n-      Stms := New_List (Build_Runtime_Call (Loc, RE_Abort_Defer));\n-      loop\n-         Stm := Remove_Next (N);\n-         exit when No (Stm);\n-         Append (Stm, Stms);\n-      end loop;\n+      --  Abort_Defer has no useful effect if Abort's are not allowed\n+\n+      if not Abort_Allowed then\n+         return;\n+      end if;\n+\n+      --  Normal case where abort is possible\n \n-      HSS :=\n-        Make_Handled_Sequence_Of_Statements (Loc,\n-          Statements  => Stms,\n-          At_End_Proc => New_Occurrence_Of (AUD, Loc));\n+      declare\n+         Loc  : constant Source_Ptr := Sloc (N);\n+         Stm  : Node_Id;\n+         Stms : List_Id;\n+         HSS  : Node_Id;\n+         Blk  : constant Entity_Id :=\n+                  New_Internal_Entity (E_Block, Current_Scope, Sloc (N), 'B');\n+         AUD  : constant Entity_Id := RTE (RE_Abort_Undefer_Direct);\n \n-      --  Present the Abort_Undefer_Direct function to the backend so that it\n-      --  can inline the call to the function.\n+      begin\n+         Stms := New_List (Build_Runtime_Call (Loc, RE_Abort_Defer));\n+         loop\n+            Stm := Remove_Next (N);\n+            exit when No (Stm);\n+            Append (Stm, Stms);\n+         end loop;\n \n-      Add_Inlined_Body (AUD, N);\n+         HSS :=\n+           Make_Handled_Sequence_Of_Statements (Loc,\n+             Statements  => Stms,\n+             At_End_Proc => New_Occurrence_Of (AUD, Loc));\n \n-      Rewrite (N,\n-        Make_Block_Statement (Loc,\n-          Handled_Statement_Sequence => HSS));\n+         --  Present the Abort_Undefer_Direct function to the backend so that\n+         --  it can inline the call to the function.\n \n-      Set_Scope (Blk, Current_Scope);\n-      Set_Etype (Blk, Standard_Void_Type);\n-      Set_Identifier (N, New_Occurrence_Of (Blk, Sloc (N)));\n-      Expand_At_End_Handler (HSS, Blk);\n-      Analyze (N);\n+         Add_Inlined_Body (AUD, N);\n+\n+         Rewrite (N,\n+           Make_Block_Statement (Loc, Handled_Statement_Sequence => HSS));\n+\n+         Set_Scope (Blk, Current_Scope);\n+         Set_Etype (Blk, Standard_Void_Type);\n+         Set_Identifier (N, New_Occurrence_Of (Blk, Sloc (N)));\n+         Expand_At_End_Handler (HSS, Blk);\n+         Analyze (N);\n+      end;\n    end Expand_Pragma_Abort_Defer;\n \n    --------------------------"}, {"sha": "283bf47d4ff6c7f4dbbf6f6f2d995456af486534", "filename": "gcc/ada/g-comlin.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fg-comlin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fg-comlin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.ads?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 1999-2014, AdaCore                     --\n+--                     Copyright (C) 1999-2015, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -502,7 +502,7 @@ package GNAT.Command_Line is\n    -- Expansion of command line arguments --\n    -----------------------------------------\n \n-   --  These subprograms take care of of expanding globbing patterns on the\n+   --  These subprograms take care of expanding globbing patterns on the\n    --  command line. On Unix, such expansion is done by the shell before your\n    --  application is called. But on Windows you must do this expansion\n    --  yourself."}, {"sha": "301b5510d593018338aa6bdd956ecd9e1d11e343", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -2144,7 +2144,7 @@ package Opt is\n    ---------------------------\n \n    --  The following array would more reasonably be located in Err_Vars or\n-   --  Errour, but but we put them here to deal with licensing issues (we need\n+   --  Errour, but we put them here to deal with licensing issues (we need\n    --  this to have the GPL exception licensing, since these variables and\n    --  subprograms are accessed from units with this licensing).\n "}, {"sha": "0fe58edeeae6a89a7170ef6706a79daacf875a72", "filename": "gcc/ada/output.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Foutput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Foutput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Foutput.ads?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -60,7 +60,7 @@ package Output is\n    --  Sets subsequent output to call procedure P. If P is null, then the call\n    --  cancels the effect of a previous call, reverting the output to standard\n    --  error or standard output depending on the mode at the time of previous\n-   --  call. Any exception generated by by calls to P is simply propagated to\n+   --  call. Any exception generated by calls to P is simply propagated to\n    --  the caller of the routine causing the write operation.\n \n    procedure Cancel_Special_Output;"}, {"sha": "8593dab63d287a58805c506bcf2fcab6de3c2dcc", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2009-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2009-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -495,6 +495,32 @@ package body Par_SCO is\n       --  table. We use it for backing out a simple decision in an expression\n       --  context that contains only NOT operators.\n \n+      Mark_Hash : Nat;\n+      --  Likewise for the putative SCO_Raw_Hash_Table entries: see below\n+\n+      type Hash_Entry is record\n+         Sloc      : Source_Ptr;\n+         SCO_Index : Nat;\n+      end record;\n+      --  We must register all conditions/pragmas in SCO_Raw_Hash_Table.\n+      --  However we cannot register them in the same time we are adding the\n+      --  corresponding SCO entries to the raw table since we may discard them\n+      --  later on. So instead we put all putative conditions into Hash_Entries\n+      --  (see below) and register them once we are sure we keep them.\n+      --\n+      --  This data structure holds the conditions/pragmas to register in\n+      --  SCO_Raw_Hash_Table.\n+\n+      package Hash_Entries is new Table.Table (\n+        Table_Component_Type => Hash_Entry,\n+        Table_Index_Type     => Nat,\n+        Table_Low_Bound      => 1,\n+        Table_Initial        => 10,\n+        Table_Increment      => 10,\n+        Table_Name           => \"Hash_Entries\");\n+      --  Hold temporarily (i.e. free'd before returning) the Hash_Entry before\n+      --  they are registered in SCO_Raw_Hash_Table.\n+\n       X_Not_Decision : Boolean;\n       --  This flag keeps track of whether a decision sequence in the SCO table\n       --  contains only NOT operators, and is for an expression context (T=X).\n@@ -581,7 +607,7 @@ package body Par_SCO is\n                To   => No_Location,\n                Last => False);\n \n-            SCO_Raw_Hash_Table.Set (Sloc (N), SCO_Raw_Table.Last);\n+            Hash_Entries.Append ((Sloc (N), SCO_Raw_Table.Last));\n \n             Output_Decision_Operand (L);\n             Output_Decision_Operand (Right_Opnd (N));\n@@ -608,7 +634,7 @@ package body Par_SCO is\n             From => FSloc,\n             To   => LSloc,\n             Last => False);\n-         SCO_Raw_Hash_Table.Set (FSloc, SCO_Raw_Table.Last);\n+         Hash_Entries.Append ((FSloc, SCO_Raw_Table.Last));\n       end Output_Element;\n \n       -------------------\n@@ -684,7 +710,7 @@ package body Par_SCO is\n          --  pragma, enter a hash table entry now.\n \n          if T = 'a' then\n-            SCO_Raw_Hash_Table.Set (Loc, SCO_Raw_Table.Last);\n+            Hash_Entries.Append ((Loc, SCO_Raw_Table.Last));\n          end if;\n       end Output_Header;\n \n@@ -736,6 +762,7 @@ package body Par_SCO is\n \n                   X_Not_Decision := T = 'X' and then Nkind (N) = N_Op_Not;\n                   Mark := SCO_Raw_Table.Last;\n+                  Mark_Hash := Hash_Entries.Last;\n                   Output_Header (T);\n \n                   --  Output the decision\n@@ -748,6 +775,7 @@ package body Par_SCO is\n \n                   if X_Not_Decision then\n                      SCO_Raw_Table.Set_Last (Mark);\n+                     Hash_Entries.Set_Last (Mark_Hash);\n \n                   --  Otherwise, set Last in last table entry to mark end\n \n@@ -800,6 +828,8 @@ package body Par_SCO is\n          return;\n       end if;\n \n+      Hash_Entries.Init;\n+\n       --  See if we have simple decision at outer level and if so then\n       --  generate the decision entry for this simple decision. A simple\n       --  decision is a boolean expression (which is not a logical operator\n@@ -817,6 +847,16 @@ package body Par_SCO is\n       end if;\n \n       Traverse (N);\n+\n+      --  Now we have the definitive set of SCO entries, register them in the\n+      --  corresponding hash table.\n+\n+      for I in 1 .. Hash_Entries.Last loop\n+         SCO_Raw_Hash_Table.Set\n+           (Hash_Entries.Table (I).Sloc,\n+            Hash_Entries.Table (I).SCO_Index);\n+      end loop;\n+      Hash_Entries.Free;\n    end Process_Decisions;\n \n    -----------"}, {"sha": "0c20a5b95203fc3e1694ddc51225580e0daf277e", "filename": "gcc/ada/s-bignum.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fs-bignum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fs-bignum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-bignum.adb?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2012-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2012-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -881,7 +881,7 @@ package body System.Bignums is\n \n             --  D3 (continued). Now test if qhat >= b or v2*qhat > (rhat,uj+2):\n             --  if so, decrease qhat by 1, increase rhat by v1, and repeat this\n-            --  test if rhat < b. [The test on v2 determines at at high speed\n+            --  test if rhat < b. [The test on v2 determines at high speed\n             --  most of the cases in which the trial value qhat is one too\n             --  large, and eliminates all cases where qhat is two too large.]\n "}, {"sha": "319ed978f02144a26d2710e7e877bc02dfe5583f", "filename": "gcc/ada/s-spsufi.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fs-spsufi.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fs-spsufi.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-spsufi.ads?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,7 +41,7 @@ package System.Storage_Pools.Subpools.Finalization is\n    procedure Finalize_And_Deallocate (Subpool : in out Subpool_Handle);\n    --  This routine performs the following actions:\n    --    1) Finalize all objects chained on the subpool's master\n-   --    2) Remove the the subpool from the owner's list of subpools\n+   --    2) Remove the subpool from the owner's list of subpools\n    --    3) Deallocate the doubly linked list node associated with the subpool\n    --    4) Call Deallocate_Subpool\n "}, {"sha": "16c875aa6d539b2bc3c96872f13a6834fb423e2c", "filename": "gcc/ada/s-stposu.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fs-stposu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fs-stposu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stposu.adb?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2011-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -541,7 +541,7 @@ package body System.Storage_Pools.Subpools is\n          --  Perform the following actions:\n \n          --    1) Finalize all objects chained on the subpool's master\n-         --    2) Remove the the subpool from the owner's list of subpools\n+         --    2) Remove the subpool from the owner's list of subpools\n          --    3) Deallocate the doubly linked list node associated with the\n          --       subpool.\n          --    4) Call Deallocate_Subpool"}, {"sha": "136c37b834cc4c8911b232755fb7208ee5fef604", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -249,9 +249,9 @@ package body Sem_Aux is\n       --  Call may be on a private type with unknown discriminants, in which\n       --  case Ent is Empty, and as per the spec, we return Empty in this case.\n \n-      --  Historical note: The revious assertion that Ent is a discriminant\n-      --  was overly cautious and prevented application of this function in\n-      --  SPARK applications.\n+      --  Historical note: The assertion in previous versions that Ent is a\n+      --  discriminant was overly cautious and prevented convenient application\n+      --  of this function in the gnatprove context.\n \n       return Ent;\n    end First_Discriminant;"}, {"sha": "8e1501ada821c00fb26af13cef7d0f7486642cd0", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -6496,7 +6496,7 @@ package body Sem_Ch13 is\n          return;\n       end if;\n \n-      --  We know we have a first subtype, now possibly go the the anonymous\n+      --  We know we have a first subtype, now possibly go the anonymous\n       --  base type to determine whether Rectype is a record extension.\n \n       Recdef := Type_Definition (Declaration_Node (Base_Type (Rectype)));\n@@ -8661,7 +8661,7 @@ package body Sem_Ch13 is\n             SId : constant Entity_Id :=\n                     Make_Defining_Identifier (Loc,\n                       Chars => New_External_Name (Chars (Typ), \"Predicate\"));\n-            --  The entity for the the function spec\n+            --  The entity for the function spec\n \n             SIdB : constant Entity_Id :=\n               Make_Defining_Identifier (Loc,\n@@ -8744,7 +8744,7 @@ package body Sem_Ch13 is\n                SId : constant Entity_Id :=\n                  Make_Defining_Identifier (Loc,\n                    Chars => New_External_Name (Chars (Typ), \"PredicateM\"));\n-               --  The entity for the the function spec\n+               --  The entity for the function spec\n \n                SIdB : constant Entity_Id :=\n                  Make_Defining_Identifier (Loc,"}, {"sha": "bbfe118db2d14f2f3bb33f6214b5c03397a3707a", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -3880,7 +3880,7 @@ package body Sem_Ch4 is\n       --    for some X => (if P then Q [else True])\n \n       --  any value for X that makes P False results in the if expression being\n-      --  trivially True, and so also results in the the quantified expression\n+      --  trivially True, and so also results in the quantified expression\n       --  being trivially True.\n \n       if Warn_On_Suspicious_Contract"}, {"sha": "8f91c0264884f07eeacfc1921c78da8de8a5dd70", "filename": "gcc/ada/sem_disp.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fsem_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fsem_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.ads?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -50,7 +50,7 @@ package Sem_Disp is\n    --  Empty we are in the overriding case. If the tagged type associated with\n    --  Subp is a concurrent type (case that occurs when the type is declared in\n    --  a generic because the analysis of generics disables generation of the\n-   --  corresponding record) then this routine does does not add Subp to the\n+   --  corresponding record) then this routine does not add Subp to the\n    --  list of primitive operations but leaves Subp decorated as dispatching\n    --  operation to enable checks associated with the Object.Operation notation\n "}, {"sha": "7fbb2f6873be1d853a9861facfcd6ba70f134590", "filename": "gcc/ada/sem_elab.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fsem_elab.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fsem_elab.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.ads?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1997-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -51,7 +51,7 @@ package Sem_Elab is\n    --  In addition, in SPARK mode, we are checking for a variable reference in\n    --  another package, which requires an explicit Elaborate_All pragma.\n \n-   --  The only references that we need to look at at the outer level are\n+   --  The only references that we need to look at the outer level are\n    --  references that occur in elaboration code. There are two cases. The\n    --  reference can be at the outer level of elaboration code, or it can\n    --  be within another unit, e.g. the elaboration code of a subprogram."}, {"sha": "1a3b411ac761878c361f0ef4d72bfa45f928595b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -16300,7 +16300,7 @@ package body Sem_Util is\n \n    function Policy_In_Effect (Policy : Name_Id) return Name_Id is\n       function Policy_In_List (List : Node_Id) return Name_Id;\n-      --  Determine the the mode of a policy in a N_Pragma list\n+      --  Determine the mode of a policy in a N_Pragma list\n \n       --------------------\n       -- Policy_In_List --"}, {"sha": "3d5debdfccec110622c0eaa473d7aca5d8928ce0", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ef946c45a24d08fb3093401d45eb763fe86ea3/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=50ef946c45a24d08fb3093401d45eb763fe86ea3", "patch": "@@ -455,7 +455,7 @@ package Sem_Util is\n    --  2012 stand-alone object of an anonymous access type, then return the\n    --  static accesssibility level of the object. In that case, the dynamic\n    --  accessibility level of the object may take on values in a range. The low\n-   --  bound of of that range is returned by Type_Access_Level; this function\n+   --  bound of that range is returned by Type_Access_Level; this function\n    --  yields the high bound of that range. Also differs from Type_Access_Level\n    --  in the case of a descendant of a generic formal type (returns Int'Last\n    --  instead of 0)."}]}