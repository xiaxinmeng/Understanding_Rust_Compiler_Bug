{"sha": "687e30d9d74f5c69a54617147ce3433b07ee59ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg3ZTMwZDlkNzRmNWM2OWE1NDYxNzE0N2NlMzQzM2IwN2VlNTljZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-09-17T08:12:12Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-09-17T08:15:38Z"}, "message": "Fix PR rtl-optimization/102306\n\nThis is a duplication of volatile loads introduced during GCC 9 development\nby the 2->2 mechanism of the RTL combiner.  There is already a substantial\nchecking for volatile references in can_combine_p but it implicitly assumes\nthat the combination reduces the number of instructions, which is of course\nnot the case here.  So the fix teaches try_combine to abort the combination\nwhen it is about to make a copy of volatile references to preserve them.\n\ngcc/\n\tPR rtl-optimization/102306\n\t* combine.c (try_combine): Abort the combination if we are about to\n\tduplicate volatile references.\n\ngcc/testsuite/\n\t* gcc.target/sparc/20210917-1.c: New test.", "tree": {"sha": "601e54497c9b1a73c55e40eaf0bb007b196addb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/601e54497c9b1a73c55e40eaf0bb007b196addb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/687e30d9d74f5c69a54617147ce3433b07ee59ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/687e30d9d74f5c69a54617147ce3433b07ee59ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/687e30d9d74f5c69a54617147ce3433b07ee59ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/687e30d9d74f5c69a54617147ce3433b07ee59ce/comments", "author": null, "committer": null, "parents": [{"sha": "a5873aadb6dd749558924eba3e1b4c21755721ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5873aadb6dd749558924eba3e1b4c21755721ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5873aadb6dd749558924eba3e1b4c21755721ba"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "892c834a160ad56cc1c5dd3c57199b2390b382a0", "filename": "gcc/combine.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/687e30d9d74f5c69a54617147ce3433b07ee59ce/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/687e30d9d74f5c69a54617147ce3433b07ee59ce/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=687e30d9d74f5c69a54617147ce3433b07ee59ce", "patch": "@@ -3063,6 +3063,16 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n       return 0;\n     }\n \n+  /* We cannot safely duplicate volatile references in any case.  */\n+\n+  if ((added_sets_2 && volatile_refs_p (PATTERN (i2)))\n+      || (added_sets_1 && volatile_refs_p (PATTERN (i1)))\n+      || (added_sets_0 && volatile_refs_p (PATTERN (i0))))\n+    {\n+      undo_all ();\n+      return 0;\n+    }\n+\n   /* Count how many auto_inc expressions there were in the original insns;\n      we need to have the same number in the resulting patterns.  */\n "}, {"sha": "03e8bc58db9841fbb83003616b34f597de576789", "filename": "gcc/testsuite/gcc.target/sparc/20210917-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/687e30d9d74f5c69a54617147ce3433b07ee59ce/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20210917-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/687e30d9d74f5c69a54617147ce3433b07ee59ce/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20210917-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20210917-1.c?ref=687e30d9d74f5c69a54617147ce3433b07ee59ce", "patch": "@@ -0,0 +1,19 @@\n+/* PR rtl-optimization/102306 */\n+/* Reported by Daniel Cederman <cederman@gaisler.com> */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O -mcpu=v8\" } */\n+\n+extern void foo (void);\n+\n+void test (volatile unsigned char *a) \n+{ \n+  char b = *a;\n+  if (!b)\n+    return;\n+  if (b & 2)\n+    foo ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldub\" 1 } } */"}]}