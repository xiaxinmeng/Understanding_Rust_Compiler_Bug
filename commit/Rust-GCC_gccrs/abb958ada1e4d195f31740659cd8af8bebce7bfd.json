{"sha": "abb958ada1e4d195f31740659cd8af8bebce7bfd", "node_id": "C_kwDOANBUbNoAKGFiYjk1OGFkYTFlNGQxOTVmMzE3NDA2NTljZDhhZjhiZWJjZTdiZmQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-03-06T14:41:59Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-03-14T10:28:38Z"}, "message": "libstdc++: Add assertions to std::mask_array operations [PR62196]\n\nAdd assertions to diagnose incorrect uses of valarray masks.\n\nThe assignment operators of std::mask_array do not have any explicit\npreconditions in the standard, but the assignment operator\nvalarray<T>::operator=(const mask_array<T>&) requires the lengths to\nmatch, so it seems consistent to also require that when the operands are\nreversed.  In support of that interpretation, libstdc++ has undefined\nbehaviour if the right-hand operand has more elements than are selected\nby the mask, and libc++ has undefined behaviour if it has fewer\nelements. Our std::mask_array stores the number of selected elements as\n_M_sz so it's easy to add an assertion that checks it.\n\nFor the valarray::operator[] that takes a valarray<bool> mask,\n[valarray.sub] in the standard says: \"In each case the selected\nelement(s) shall exist.\" This makes it undefined to have a mask that\nrefers to out-of-range elements. We can easily check this too.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/62196\n\t* include/bits/mask_array.h (mask_array): Add assertions to\n\tassignment operators.\n\t* include/std/valarray (valarray::operator[](valarray<bool>)):\n\tAdd assertions.\n\t* testsuite/26_numerics/valarray/mask-1_neg.cc: New test.\n\t* testsuite/26_numerics/valarray/mask-2_neg.cc: New test.\n\t* testsuite/26_numerics/valarray/mask-3_neg.cc: New test.\n\t* testsuite/26_numerics/valarray/mask-4_neg.cc: New test.\n\t* testsuite/26_numerics/valarray/mask-5_neg.cc: New test.\n\t* testsuite/26_numerics/valarray/mask-6_neg.cc: New test.\n\t* testsuite/26_numerics/valarray/mask-7_neg.cc: New test.\n\t* testsuite/26_numerics/valarray/mask-8_neg.cc: New test.\n\t* testsuite/26_numerics/valarray/mask.cc: New test.", "tree": {"sha": "c8933d09406ab6f6ad3dd6711efa5ff14d6290b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8933d09406ab6f6ad3dd6711efa5ff14d6290b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abb958ada1e4d195f31740659cd8af8bebce7bfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abb958ada1e4d195f31740659cd8af8bebce7bfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abb958ada1e4d195f31740659cd8af8bebce7bfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abb958ada1e4d195f31740659cd8af8bebce7bfd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e0c18f60af51f3afd210a2929b853dd02abe996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0c18f60af51f3afd210a2929b853dd02abe996", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e0c18f60af51f3afd210a2929b853dd02abe996"}], "stats": {"total": 205, "additions": 203, "deletions": 2}, "files": [{"sha": "d4112a9d0a3ae06ccea4f720db8b781f77485731", "filename": "libstdc++-v3/include/bits/mask_array.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h?ref=abb958ada1e4d195f31740659cd8af8bebce7bfd", "patch": "@@ -153,6 +153,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline mask_array<_Tp>&\n     mask_array<_Tp>::operator=(const mask_array<_Tp>& __a)\n     {\n+      __glibcxx_assert(__a._M_sz == _M_sz);\n       std::__valarray_copy(__a._M_array, __a._M_mask,\n \t\t\t   _M_sz, _M_array, _M_mask);\n       return *this;\n@@ -166,20 +167,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     inline void\n     mask_array<_Tp>::operator=(const valarray<_Tp>& __v) const\n-    { std::__valarray_copy(_Array<_Tp>(__v), __v.size(), _M_array, _M_mask); }\n+    {\n+      __glibcxx_assert(__v.size() == _M_sz);\n+      std::__valarray_copy(_Array<_Tp>(__v), __v.size(), _M_array, _M_mask);\n+    }\n \n   template<typename _Tp>\n     template<class _Ex>\n       inline void\n       mask_array<_Tp>::operator=(const _Expr<_Ex, _Tp>& __e) const\n-      { std::__valarray_copy(__e, __e.size(), _M_array, _M_mask); }\n+      {\n+\t__glibcxx_assert(__e.size() == _M_sz);\n+\tstd::__valarray_copy(__e, __e.size(), _M_array, _M_mask);\n+      }\n \n #undef _DEFINE_VALARRAY_OPERATOR\n #define _DEFINE_VALARRAY_OPERATOR(_Op, _Name)\t\t\t\t\\\n   template<typename _Tp>\t\t\t\t\t\t\\\n     inline void\t\t\t\t\t\t\t\t\\\n     mask_array<_Tp>::operator _Op##=(const valarray<_Tp>& __v) const\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n+      __glibcxx_assert(__v.size() == _M_sz);\t\t\t\t\\\n       _Array_augmented_##_Name(_M_array, _M_mask,\t\t\t\\\n \t\t\t       _Array<_Tp>(__v), __v.size());\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n@@ -189,6 +197,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       inline void\t\t\t\t\t\t\t\\\n       mask_array<_Tp>::operator _Op##=(const _Expr<_Dom, _Tp>& __e) const\\\n       {\t\t\t\t\t\t\t\t\t\\\n+\t__glibcxx_assert(__e.size() == _M_sz);\t\t\t\t\\\n \t_Array_augmented_##_Name(_M_array, _M_mask, __e, __e.size());   \\\n       }\n "}, {"sha": "504d02b73591150d22a9694cdd51df1c23011e6d", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=abb958ada1e4d195f31740659cd8af8bebce7bfd", "patch": "@@ -893,6 +893,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size_t __e = __m.size();\n       for (size_t __i=0; __i<__e; ++__i)\n \tif (__m[__i]) ++__s;\n+      __glibcxx_assert(__s <= _M_size);\n       return valarray<_Tp>(mask_array<_Tp>(_Array<_Tp>(_M_data), __s,\n \t\t\t\t\t   _Array<bool> (__m)));\n     }\n@@ -905,6 +906,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size_t __e = __m.size();\n       for (size_t __i=0; __i<__e; ++__i)\n \tif (__m[__i]) ++__s;\n+      __glibcxx_assert(__s <= _M_size);\n       return mask_array<_Tp>(_Array<_Tp>(_M_data), __s, _Array<bool>(__m));\n     }\n "}, {"sha": "7ef11736d96251eb1d33da1487e5eb087d1e2ae4", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/mask-1_neg.cc", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-1_neg.cc?ref=abb958ada1e4d195f31740659cd8af8bebce7bfd", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options \"-D_GLIBCXX_ASSERTIONS\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <valarray>\n+\n+int main()\n+{\n+  using std::valarray;\n+\n+  // This is adapted from an example in C++11 [valarray.sub].\n+  // valarray<T> operator[](const valarray<bool>& boolarr) const;\n+\n+  const valarray<char> v0(\"ab\", 2);\n+  const bool vb[] = {false, false, true, true, false, true};\n+  (void) v0[valarray<bool>(vb, 6)]; // aborts, mask has more elements than v0\n+}"}, {"sha": "f380dba17a9304d793ddc3c102761a6cfddc7c8f", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/mask-2_neg.cc", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-2_neg.cc?ref=abb958ada1e4d195f31740659cd8af8bebce7bfd", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options \"-D_GLIBCXX_ASSERTIONS\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <valarray>\n+\n+int main()\n+{\n+  using std::valarray;\n+\n+  // This is adapted from an example in C++11 [valarray.sub].\n+  // mask_array<T> operator[](const valarray<bool>& boolarr);\n+\n+  valarray<char> v0(\"ab\", 2);\n+  const bool vb[] = {false, false, true, true, false, true};\n+  (void) v0[valarray<bool>(vb, 6)]; // aborts, mask has more elements than v0\n+}"}, {"sha": "0b9e6fb366d147b42a16ef8152325733f047f951", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/mask-3_neg.cc", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-3_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-3_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-3_neg.cc?ref=abb958ada1e4d195f31740659cd8af8bebce7bfd", "patch": "@@ -0,0 +1,19 @@\n+// { dg-options \"-D_GLIBCXX_ASSERTIONS\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <valarray>\n+\n+int main()\n+{\n+  using std::valarray;\n+  using std::mask_array;\n+\n+  // This is adapted from an example in C++11 [valarray.sub].\n+  // See also PR libstdc++/62196.\n+\n+  valarray<char> v0(\"abcdefghijklmnop\", 16);\n+  valarray<char> v1(\"ABCD\", 4);\n+  const bool vb[] = {false, false, true, true, false, true};\n+  const mask_array<char> m = v0[valarray<bool>(vb, 6)];\n+  m = v1; // aborts, v1 has more elements than m\n+}"}, {"sha": "b996967f4ce08c88745f5a7b29b9e84b0dfe543f", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/mask-4_neg.cc", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-4_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-4_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-4_neg.cc?ref=abb958ada1e4d195f31740659cd8af8bebce7bfd", "patch": "@@ -0,0 +1,18 @@\n+// { dg-options \"-D_GLIBCXX_ASSERTIONS\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <valarray>\n+\n+int main()\n+{\n+  using std::valarray;\n+  using std::mask_array;\n+\n+  // This is adapted from an example in C++11 [valarray.sub].\n+\n+  valarray<char> v0(\"abcdefghijklmnop\", 16);\n+  valarray<char> v1(\"AB\", 2);\n+  const bool vb[] = {false, false, true, true, false, true};\n+  const mask_array<char> m = v0[valarray<bool>(vb, 6)];\n+  m = v1; // aborts, m has more elements than v1\n+}"}, {"sha": "8e708903b000bedd0a24c722d28554b936ea36aa", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/mask-5_neg.cc", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-5_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-5_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-5_neg.cc?ref=abb958ada1e4d195f31740659cd8af8bebce7bfd", "patch": "@@ -0,0 +1,19 @@\n+// { dg-options \"-D_GLIBCXX_ASSERTIONS\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <valarray>\n+\n+int main()\n+{\n+  using std::valarray;\n+  using std::mask_array;\n+\n+  // This is adapted from an example in C++11 [valarray.sub].\n+\n+  valarray<char> v0(\"abcdef\", 6);\n+  valarray<char> v1(\"ABCDEF\", 6);\n+  const bool vb[] = {false, false, true, true, false, true};\n+  const mask_array<char> m0 = v0[valarray<bool>(vb, 6)];\n+  const mask_array<char> m1 = v1[valarray<bool>(vb, 5)];\n+  m0 = m1; // aborts, m0 has more elements than m1\n+}"}, {"sha": "cded68c45b48a34f59884a263c7adc7e718b23d6", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/mask-6_neg.cc", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-6_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-6_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-6_neg.cc?ref=abb958ada1e4d195f31740659cd8af8bebce7bfd", "patch": "@@ -0,0 +1,19 @@\n+// { dg-options \"-D_GLIBCXX_ASSERTIONS\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <valarray>\n+\n+int main()\n+{\n+  using std::valarray;\n+  using std::mask_array;\n+\n+  // This is adapted from an example in C++11 [valarray.sub].\n+\n+  valarray<char> v0(\"abcdef\", 6);\n+  valarray<char> v1(\"ABCDEF\", 6);\n+  const bool vb[] = {false, false, true, true, false, true};\n+  const mask_array<char> m0 = v0[valarray<bool>(vb, 5)];\n+  const mask_array<char> m1 = v1[valarray<bool>(vb, 6)];\n+  m0 = m1; // aborts, m0 has fewer elements than m1\n+}"}, {"sha": "246977b8a8fc600e55aa1eeeafe8e6aaacfa0073", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/mask-7_neg.cc", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-7_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-7_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-7_neg.cc?ref=abb958ada1e4d195f31740659cd8af8bebce7bfd", "patch": "@@ -0,0 +1,18 @@\n+// { dg-options \"-D_GLIBCXX_ASSERTIONS\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <valarray>\n+\n+int main()\n+{\n+  using std::valarray;\n+  using std::mask_array;\n+\n+  // This is adapted from an example in C++11 [valarray.sub].\n+\n+  valarray<char> v0(\"abcdefghijklmnop\", 16);\n+  valarray<char> v1(\"ABCD\", 4);\n+  const bool vb[] = {false, false, true, true, false, true};\n+  const mask_array<char> m = v0[valarray<bool>(vb, 6)];\n+  m += v1; // aborts, v1 has more elements than m\n+}"}, {"sha": "70f9ea253184465d3ac924d494ed1de7023fec6c", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/mask-8_neg.cc", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-8_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-8_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask-8_neg.cc?ref=abb958ada1e4d195f31740659cd8af8bebce7bfd", "patch": "@@ -0,0 +1,18 @@\n+// { dg-options \"-D_GLIBCXX_ASSERTIONS\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <valarray>\n+\n+int main()\n+{\n+  using std::valarray;\n+  using std::mask_array;\n+\n+  // This is adapted from an example in C++11 [valarray.sub].\n+\n+  valarray<char> v0(\"abcdefghijklmnop\", 16);\n+  valarray<char> v1(\"AB\", 2);\n+  const bool vb[] = {false, false, true, true, false, true};\n+  const mask_array<char> m = v0[valarray<bool>(vb, 6)];\n+  m += v1; // aborts, v1 has more elements than m\n+}"}, {"sha": "cb18701033e188e0b31a3218e7d8df79dff68a74", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/mask.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb958ada1e4d195f31740659cd8af8bebce7bfd/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmask.cc?ref=abb958ada1e4d195f31740659cd8af8bebce7bfd", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-D_GLIBCXX_ASSERTIONS\" }\n+// { dg-do run }\n+\n+#include <valarray>\n+#include <testsuite_hooks.h>\n+\n+using std::valarray;\n+\n+template<typename T>\n+bool equal(const valarray<T>& lhs, const valarray<T>& rhs)\n+{\n+  if (lhs.size() != rhs.size())\n+    return false;\n+  for (unsigned i = 0; i < lhs.size(); ++i)\n+    if (lhs[i] != rhs[i])\n+      return false;\n+  return true;\n+}\n+\n+// Taken from examples in C++11 [valarray.sub].\n+\n+void\n+test01() // valarray<T> operator[](const valarray<bool>& boolarr) const;\n+{\n+  const valarray<char> v0(\"abcdefghijklmnop\", 16);\n+  const bool vb[] = {false, false, true, true, false, true};\n+  valarray<char> v1 = v0[valarray<bool>(vb, 6)];\n+\n+  VERIFY( equal(v1, valarray<char>(\"cdf\", 3)) );\n+}\n+\n+void\n+test02() // mask_array<T> operator[](const valarray<bool>& boolarr);\n+{\n+  valarray<char> v0(\"abcdefghijklmnop\", 16);\n+  valarray<char> v1(\"ABC\", 3);\n+  const bool vb[] = {false, false, true, true, false, true};\n+  v0[valarray<bool>(vb, 6)] = v1;\n+\n+  VERIFY( equal(v0, valarray<char>(\"abABeCghijklmnop\", 16)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}]}