{"sha": "0bd68793921ecf3bb5654252dea3763fd127ab77", "node_id": "C_kwDOANBUbNoAKDBiZDY4NzkzOTIxZWNmM2JiNTY1NDI1MmRlYTM3NjNmZDEyN2FiNzc", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-14T14:15:04Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-14T21:37:59Z"}, "message": "Cleanup --params for backward threader.\n\nThe new backward threader makes some of the --param knobs used to\ncontrol it questionable at best or no longer applicable at worst.\n\nThe fsm-maximum-phi-arguments param is unused and can be removed.\n\nThe max-fsm-thread-length param is block based which is a bit redundant,\nsince we already restrict paths based on instruction estimates.\n\nThe max-fsm-thread-paths restricts the total number of threadable paths\nin a function.  We probably don't need this.  Besides, the forward\nthreader has no such restriction.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi: Remove max-fsm-thread-length,\n\tmax-fsm-thread-paths, and fsm-maximum-phi-arguments.\n\t* params.opt: Same.\n\t* tree-ssa-threadbackward.c (back_threader::back_threader): Remove\n\targument.\n\t(back_threader_registry::back_threader_registry): Same.\n\t(back_threader_profitability::profitable_path_p): Remove\n\tparam_max_fsm_thread-length.\n\t(back_threader_registry::register_path): Remove\n\tm_max_allowable_paths.", "tree": {"sha": "4c58121ffca0be17044780f2151ef6b64cb0a1f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c58121ffca0be17044780f2151ef6b64cb0a1f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bd68793921ecf3bb5654252dea3763fd127ab77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd68793921ecf3bb5654252dea3763fd127ab77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd68793921ecf3bb5654252dea3763fd127ab77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd68793921ecf3bb5654252dea3763fd127ab77/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d71e1be7c3a3e2058d1243e6a090e421c9fd7f85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71e1be7c3a3e2058d1243e6a090e421c9fd7f85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71e1be7c3a3e2058d1243e6a090e421c9fd7f85"}], "stats": {"total": 51, "additions": 3, "deletions": 48}, "files": [{"sha": "0cc8a8edd058ca0c8df48e01184580f40d046201", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd68793921ecf3bb5654252dea3763fd127ab77/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd68793921ecf3bb5654252dea3763fd127ab77/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0bd68793921ecf3bb5654252dea3763fd127ab77", "patch": "@@ -14468,14 +14468,6 @@ Emit instrumentation calls to __tsan_func_entry() and __tsan_func_exit().\n Maximum number of instructions to copy when duplicating blocks on a\n finite state automaton jump thread path.\n \n-@item max-fsm-thread-length\n-Maximum number of basic blocks on a finite state automaton jump thread\n-path.\n-\n-@item max-fsm-thread-paths\n-Maximum number of new jump thread paths to create for a finite state\n-automaton.\n-\n @item parloops-chunk-size\n Chunk size of omp schedule for loops parallelized by parloops.\n \n@@ -14630,10 +14622,6 @@ The maximum depth of recursive inlining for non-inline functions.\n Scale factor to apply to the number of statements in a threading path\n when comparing to the number of (scaled) blocks.\n \n-@item fsm-maximum-phi-arguments\n-Maximum number of arguments a PHI may have before the FSM threader\n-will not try to thread through its block.\n-\n @item uninit-control-dep-attempts\n Maximum number of nested calls to search for control dependencies\n during uninitialized variable analysis."}, {"sha": "06a6fdc9debcfb37ac59a88089a3a70d6a5cc49a", "filename": "gcc/params.opt", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd68793921ecf3bb5654252dea3763fd127ab77/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd68793921ecf3bb5654252dea3763fd127ab77/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=0bd68793921ecf3bb5654252dea3763fd127ab77", "patch": "@@ -173,10 +173,6 @@ Common Joined UInteger Var(param_ranger_logical_depth) Init(6) IntegerRange(1, 9\n Maximum depth of logical expression evaluation ranger will look through when\n evaluating outgoing edge ranges.\n \n--param=fsm-maximum-phi-arguments=\n-Common Joined UInteger Var(param_fsm_maximum_phi_arguments) Init(100) IntegerRange(1, 999999) Param Optimization\n-Maximum number of arguments a PHI may have before the FSM threader will not try to thread through its block.\n-\n -param=fsm-scale-path-blocks=\n Common Joined UInteger Var(param_fsm_scale_path_blocks) Init(3) IntegerRange(1, 10) Param Optimization\n Scale factor to apply to the number of blocks in a threading path when comparing to the number of (scaled) statements.\n@@ -537,18 +533,10 @@ The maximum number of nested indirect inlining performed by early inliner.\n Common Joined UInteger Var(param_max_fields_for_field_sensitive) Param\n Maximum number of fields in a structure before pointer analysis treats the structure as a single variable.\n \n--param=max-fsm-thread-length=\n-Common Joined UInteger Var(param_max_fsm_thread_length) Init(10) IntegerRange(1, 999999) Param Optimization\n-Maximum number of basic blocks on a finite state automaton jump thread path.\n-\n -param=max-fsm-thread-path-insns=\n Common Joined UInteger Var(param_max_fsm_thread_path_insns) Init(100) IntegerRange(1, 999999) Param Optimization\n Maximum number of instructions to copy when duplicating blocks on a finite state automaton jump thread path.\n \n--param=max-fsm-thread-paths=\n-Common Joined UInteger Var(param_max_fsm_thread_paths) Init(50) IntegerRange(1, 999999) Param Optimization\n-Maximum number of new jump thread paths to create for a finite state automaton.\n-\n -param=max-gcse-insertion-ratio=\n Common Joined UInteger Var(param_max_gcse_insertion_ratio) Init(20) Param Optimization\n The maximum ratio of insertions to deletions of expressions in GCSE."}, {"sha": "7c2c1112bee7944ad913c442b5d8e6fb8ea67625", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd68793921ecf3bb5654252dea3763fd127ab77/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd68793921ecf3bb5654252dea3763fd127ab77/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=0bd68793921ecf3bb5654252dea3763fd127ab77", "patch": "@@ -52,12 +52,11 @@ along with GCC; see the file COPYING3.  If not see\n class back_threader_registry\n {\n public:\n-  back_threader_registry (int max_allowable_paths);\n+  back_threader_registry ();\n   bool register_path (const vec<basic_block> &, edge taken);\n   bool thread_through_all_blocks (bool may_peel_loop_headers);\n private:\n   back_jt_path_registry m_lowlevel_registry;\n-  const int m_max_allowable_paths;\n   int m_threaded_paths;\n };\n \n@@ -120,8 +119,7 @@ class back_threader\n const edge back_threader::UNREACHABLE_EDGE = (edge) -1;\n \n back_threader::back_threader (bool speed_p)\n-  : m_registry (param_max_fsm_thread_paths),\n-    m_profit (speed_p),\n+  : m_profit (speed_p),\n     m_solver (m_ranger, /*resolve=*/false)\n {\n   m_last_stmt = NULL;\n@@ -547,8 +545,7 @@ back_threader::debug ()\n   dump (stderr);\n }\n \n-back_threader_registry::back_threader_registry (int max_allowable_paths)\n-  : m_max_allowable_paths (max_allowable_paths)\n+back_threader_registry::back_threader_registry ()\n {\n   m_threaded_paths = 0;\n }\n@@ -594,15 +591,6 @@ back_threader_profitability::profitable_path_p (const vec<basic_block> &m_path,\n   if (m_path.length () <= 1)\n       return false;\n \n-  if (m_path.length () > (unsigned) param_max_fsm_thread_length)\n-    {\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\tfprintf (dump_file, \"  FAIL: Jump-thread path not considered: \"\n-\t\t \"the number of basic blocks on the path \"\n-\t\t \"exceeds PARAM_MAX_FSM_THREAD_LENGTH.\\n\");\n-      return false;\n-    }\n-\n   int n_insns = 0;\n   gimple_stmt_iterator gsi;\n   loop_p loop = m_path[0]->loop_father;\n@@ -885,15 +873,6 @@ bool\n back_threader_registry::register_path (const vec<basic_block> &m_path,\n \t\t\t\t       edge taken_edge)\n {\n-  if (m_threaded_paths > m_max_allowable_paths)\n-    {\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\tfprintf (dump_file, \"  FAIL: Jump-thread path not considered: \"\n-\t\t \"the number of previously recorded paths to \"\n-\t\t \"thread exceeds PARAM_MAX_FSM_THREAD_PATHS.\\n\");\n-      return false;\n-    }\n-\n   vec<jump_thread_edge *> *jump_thread_path\n     = m_lowlevel_registry.allocate_thread_path ();\n "}]}