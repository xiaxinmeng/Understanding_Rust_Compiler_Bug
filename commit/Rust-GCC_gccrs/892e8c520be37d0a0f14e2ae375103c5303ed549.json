{"sha": "892e8c520be37d0a0f14e2ae375103c5303ed549", "node_id": "C_kwDOANBUbNoAKDg5MmU4YzUyMGJlMzdkMGEwZjE0ZTJhZTM3NTEwM2M1MzAzZWQ1NDk", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-08T08:07:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-08T10:58:47Z"}, "message": "tree-optimization/107699 - missed &data._M_elems + _1 != &data._M_elems folding\n\nThe following addresses a missed folding noticed in PR107699 that can\nbe fixed amending the existing &x + a != &x + b pattern to also handle\nthe case of only one side having a pointer plus.  I'm moving the\npatterns next to related simpifications showing there'd be an existing\npattern matching this if it were not gated with an explicit single_use\nconstraint.  Note the new pattern also handles &x.a + a != &x.b, but\nthis hints at some unification / generalization opportunities here.\n\n\tPR tree-optimization/107699\n\t* match.pd (&a !=/== &a.b + c -> (&a - &a.b) !=/== c): New\n\tpattern variant.\n\n\t* gcc.dg/tree-ssa/pr107699.c: New testcase.", "tree": {"sha": "8a8030495b65c9fdd64db3049263cf47e6f32b9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a8030495b65c9fdd64db3049263cf47e6f32b9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/892e8c520be37d0a0f14e2ae375103c5303ed549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892e8c520be37d0a0f14e2ae375103c5303ed549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/892e8c520be37d0a0f14e2ae375103c5303ed549", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892e8c520be37d0a0f14e2ae375103c5303ed549/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4505270128ef70538ea345f292e3eb85a5369eaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4505270128ef70538ea345f292e3eb85a5369eaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4505270128ef70538ea345f292e3eb85a5369eaf"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "127cef9a610029add9ddae217a720116c436acf1", "filename": "gcc/match.pd", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892e8c520be37d0a0f14e2ae375103c5303ed549/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892e8c520be37d0a0f14e2ae375103c5303ed549/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=892e8c520be37d0a0f14e2ae375103c5303ed549", "patch": "@@ -2260,6 +2260,19 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && (CONSTANT_CLASS_P (@1) || (single_use (@2) && single_use (@3))))\n    (op @1 { build_zero_cst (TREE_TYPE (@1)); }))))\n \n+/* (&a + b) !=/== (&a[1] + c) -> (&a[0] - &a[1]) + b !=/== c */\n+(for neeq (ne eq)\n+ (simplify\n+  (neeq:c ADDR_EXPR@0 (pointer_plus ADDR_EXPR@2 @3))\n+   (with { poly_int64 diff; tree inner_type = TREE_TYPE (@3);}\n+    (if (ptr_difference_const (@0, @2, &diff))\n+     (neeq { build_int_cst_type (inner_type, diff); } @3))))\n+ (simplify\n+  (neeq (pointer_plus ADDR_EXPR@0 @1) (pointer_plus ADDR_EXPR@2 @3))\n+   (with { poly_int64 diff; tree inner_type = TREE_TYPE (@1);}\n+    (if (ptr_difference_const (@0, @2, &diff))\n+     (neeq (plus { build_int_cst_type (inner_type, diff); } @1) @3)))))\n+\n /* X - Y < X is the same as Y > 0 when there is no overflow.\n    For equality, this is also true with wrapping overflow.  */\n (for op (simple_comparison)\n@@ -2439,14 +2452,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (if (ptr_difference_const (@0, @2, &diff))\n     (plus { build_int_cst_type (type, diff); } (convert (minus @1 @3))))))\n \n-/* (&a+b) !=/== (&a[1] + c) ->  sizeof(a[0]) + b !=/== c */\n-(for neeq (ne eq)\n- (simplify\n-  (neeq (pointer_plus ADDR_EXPR@0 @1) (pointer_plus ADDR_EXPR@2 @3))\n-   (with { poly_int64 diff; tree inner_type = TREE_TYPE (@1);}\n-    (if (ptr_difference_const (@0, @2, &diff))\n-     (neeq (plus { build_int_cst_type (inner_type, diff); } @1) @3)))))\n-\n /* Canonicalize (T *)(ptr - ptr-cst) to &MEM[ptr + -ptr-cst].  */\n (simplify\n  (convert (pointer_diff @0 INTEGER_CST@1))"}, {"sha": "4bf864dfd72dca3a7bcc3ed24eec286a264eec69", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr107699.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892e8c520be37d0a0f14e2ae375103c5303ed549/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107699.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892e8c520be37d0a0f14e2ae375103c5303ed549/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107699.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107699.c?ref=892e8c520be37d0a0f14e2ae375103c5303ed549", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-forwprop1\" } */\n+\n+struct { int data[16]; } x;\n+\n+int foo (int n)\n+{\n+  int *p = x.data + n;\n+  /* Should simplify this to n * 4 != 0.  */\n+  if ((void *)&x != (void *)p)\n+    return 1;\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \" != 0\" \"forwprop1\" } } */"}]}