{"sha": "5d21c0cbda0c4b109366f51534f328145da4c21f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQyMWMwY2JkYTBjNGIxMDkzNjZmNTE1MzRmMzI4MTQ1ZGE0YzIxZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-29T08:05:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-29T08:05:38Z"}, "message": "openmp: Add shared to parallel for linear on parallel master taskloop simd [PR99928]\n\nI forgot to add default(none) and defaultmap(none) wherever possible on the\ntestcases to make sure none of the required clauses are added implicitly (because\nin that case it doesn't work with these none arguments of those default* clauses\nor works differently with other default* settings.\n\nAnd that revealed we didn't add shared on parallel for linear clause\non parallel master taskloop simd, so this patch fixes that too.\n\n2021-05-29  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/99928\n\t* gimplify.c (gimplify_scan_omp_clauses): For taskloop simd\n\tcombined with parallel, make sure to add shared clause to\n\tparallel for explicit linear clause.\n\n\t* c-c++-common/gomp/pr99928-1.c: Add default(none) to constructs\n\tcombined with parallel, teams or taskloop and defaultmap(none)\n\tto constructs combined with target.\n\t* c-c++-common/gomp/pr99928-2.c: Likewise.\n\t* c-c++-common/gomp/pr99928-3.c: Likewise.\n\t* c-c++-common/gomp/pr99928-4.c: Likewise.\n\t* c-c++-common/gomp/pr99928-5.c: Likewise.\n\t* c-c++-common/gomp/pr99928-6.c: Likewise.\n\t* c-c++-common/gomp/pr99928-7.c: Likewise.\n\t* c-c++-common/gomp/pr99928-8.c: Likewise.\n\t* c-c++-common/gomp/pr99928-9.c: Likewise.\n\t* c-c++-common/gomp/pr99928-10.c: Likewise.\n\t* c-c++-common/gomp/pr99928-13.c: Likewise.\n\t* c-c++-common/gomp/pr99928-14.c: Likewise.", "tree": {"sha": "1a26090fcabc3b541c244cc3d2aaeff051f211ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a26090fcabc3b541c244cc3d2aaeff051f211ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d21c0cbda0c4b109366f51534f328145da4c21f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d21c0cbda0c4b109366f51534f328145da4c21f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d21c0cbda0c4b109366f51534f328145da4c21f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d21c0cbda0c4b109366f51534f328145da4c21f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2364b584552208ce715fa4fd44c510b7e5210d1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2364b584552208ce715fa4fd44c510b7e5210d1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2364b584552208ce715fa4fd44c510b7e5210d1e"}], "stats": {"total": 430, "additions": 216, "deletions": 214}, "files": [{"sha": "3ca29cedad89f06e2afbe758bcc9836c9e4be2fa", "filename": "gcc/gimplify.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=5d21c0cbda0c4b109366f51534f328145da4c21f", "patch": "@@ -9014,6 +9014,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t\t lastprivate and perhaps firstprivate too on the\n \t\t parallel.  Similarly for #pragma omp for simd.  */\n \t      struct gimplify_omp_ctx *octx = outer_ctx;\n+\t      bool taskloop_seen = false;\n \t      decl = NULL_TREE;\n \t      do\n \t\t{\n@@ -9045,11 +9046,12 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t\t  else if (octx\n \t\t\t   && (octx->region_type & ORT_TASK) != 0\n \t\t\t   && octx->combined_loop)\n-\t\t    ;\n+\t\t    taskloop_seen = true;\n \t\t  else if (octx\n \t\t\t   && octx->region_type == ORT_COMBINED_PARALLEL\n-\t\t\t   && ctx->region_type == ORT_WORKSHARE\n-\t\t\t   && octx == outer_ctx)\n+\t\t\t   && ((ctx->region_type == ORT_WORKSHARE\n+\t\t\t\t&& octx == outer_ctx)\n+\t\t\t       || taskloop_seen))\n \t\t    flags = GOVD_SEEN | GOVD_SHARED;\n \t\t  else if (octx\n \t\t\t   && ((octx->region_type & ORT_COMBINED_TEAMS)"}, {"sha": "b4aa8dd61ecd07ec93410d30f697e85d172bdc30", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-1.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-1.c?ref=5d21c0cbda0c4b109366f51534f328145da4c21f", "patch": "@@ -12,14 +12,14 @@ foo (void)\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f00\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f00\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f00\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp distribute parallel for firstprivate (f00)\n+  #pragma omp distribute parallel for firstprivate (f00) default(none)\n   for (int i = 0; i < 64; i++)\n     f00++;\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f01\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f01\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f01\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f01\\\\)\" \"gimple\" } } */\n-  #pragma omp distribute parallel for simd firstprivate (f01)\n+  #pragma omp distribute parallel for simd firstprivate (f01) default(none)\n   for (int i = 0; i < 64; i++)\n     f01++;\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f02\\\\)\" \"gimple\" } } */\n@@ -40,98 +40,98 @@ bar (void)\n     f03++;\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(f04\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(f04\\\\)\" \"gimple\" } } */\n-  #pragma omp master taskloop firstprivate (f04)\n+  #pragma omp master taskloop firstprivate (f04) default(none)\n   for (int i = 0; i < 64; i++)\n     f04++;\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(f05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(f05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f05\\\\)\" \"gimple\" } } */\n-  #pragma omp master taskloop simd firstprivate (f05)\n+  #pragma omp master taskloop simd firstprivate (f05) default(none)\n   for (int i = 0; i < 64; i++)\n     f05++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f06\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f06\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp parallel for firstprivate (f06)\n+  #pragma omp parallel for firstprivate (f06) default(none)\n   for (int i = 0; i < 64; i++)\n     f06++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f07\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f07\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f07\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel for simd firstprivate (f07)\n+  #pragma omp parallel for simd firstprivate (f07) default(none)\n   for (int i = 0; i < 64; i++)\n     f07++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f08\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f08\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f08\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel loop firstprivate (f08)\n+  #pragma omp parallel loop firstprivate (f08) default(none)\n   for (int i = 0; i < 64; i++)\n     f08++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(f09\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel master firstprivate (f09)\n+  #pragma omp parallel master firstprivate (f09) default(none)\n   f09++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(f10\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(f10\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(f10\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop firstprivate (f10)\n+  #pragma omp parallel master taskloop firstprivate (f10) default(none)\n   for (int i = 0; i < 64; i++)\n     f10++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(f11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(f11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(f11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f11\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop simd firstprivate (f11)\n+  #pragma omp parallel master taskloop simd firstprivate (f11) default(none)\n   for (int i = 0; i < 64; i++)\n     f11++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f12\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp sections\\[^\\n\\r]*firstprivate\\\\(f12\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp section \\[^\\n\\r]*firstprivate\\\\(f12\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel sections firstprivate (f12)\n+  #pragma omp parallel sections firstprivate (f12) default(none)\n   {\n     f12++;\n     #pragma omp section\n     f12++;\n   }\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f13\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f13\\\\)\" \"gimple\" } } */\n-  #pragma omp target parallel firstprivate (f13)\n+  #pragma omp target parallel firstprivate (f13) default(none) defaultmap(none)\n   f13++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f14\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f14\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f14\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp target parallel for firstprivate (f14)\n+  #pragma omp target parallel for firstprivate (f14) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     f14++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f15\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f15\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f15\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f15\\\\)\" \"gimple\" } } */\n-  #pragma omp target parallel for simd firstprivate (f15)\n+  #pragma omp target parallel for simd firstprivate (f15) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     f15++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f16\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f16\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f16\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f16\\\\)\" \"gimple\" } } */\n-  #pragma omp target parallel loop firstprivate (f16)\n+  #pragma omp target parallel loop firstprivate (f16) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     f16++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f17\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f17\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams firstprivate (f17)\n+  #pragma omp target teams firstprivate (f17) default(none) defaultmap(none)\n   f17++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f18\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f18\\\\)\" \"gimple\" } } *//* FIXME: This should be on distribute instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f18\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp target teams distribute firstprivate (f18)\n+  #pragma omp target teams distribute firstprivate (f18) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     f18++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f19\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f19\\\\)\" \"gimple\" } } *//* FIXME: This should be on distribute instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f19\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f19\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f19\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp target teams distribute parallel for firstprivate (f19)\n+  #pragma omp target teams distribute parallel for firstprivate (f19) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     f19++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f20\\\\)\" \"gimple\" } } */\n@@ -140,14 +140,14 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f20\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f20\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f20\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute parallel for simd firstprivate (f20)\n+  #pragma omp target teams distribute parallel for simd firstprivate (f20) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     f20++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f21\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f21\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f21\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f21\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute simd firstprivate (f21)\n+  #pragma omp target teams distribute simd firstprivate (f21) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     f21++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f22\\\\)\" \"gimple\" } } */\n@@ -156,51 +156,51 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(f22\\\\)\" \"gimple\" } } *//* NOTE: This is an implementation detail.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f22\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f22\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams loop firstprivate (f22)\n+  #pragma omp target teams loop firstprivate (f22) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     f22++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f23\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f23\\\\)\" \"gimple\" } } */\n-  #pragma omp target simd firstprivate (f23)\n+  #pragma omp target simd firstprivate (f23) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     f23++;\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(f24\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f24\\\\)\" \"gimple\" } } */\n-  #pragma omp taskloop simd firstprivate (f24)\n+  #pragma omp taskloop simd firstprivate (f24) default(none)\n   for (int i = 0; i < 64; i++)\n     f24++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f25\\\\)\" \"gimple\" } } *//* FIXME: This should be on distribute instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f25\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp teams distribute firstprivate (f25)\n+  #pragma omp teams distribute firstprivate (f25) default(none)\n   for (int i = 0; i < 64; i++)\n     f25++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f26\\\\)\" \"gimple\" } } *//* FIXME: This should be on distribute instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f26\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f26\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f26\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp teams distribute parallel for firstprivate (f26)\n+  #pragma omp teams distribute parallel for firstprivate (f26) default(none)\n   for (int i = 0; i < 64; i++)\n     f26++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f27\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f27\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f27\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f27\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f27\\\\)\" \"gimple\" } } */\n-  #pragma omp teams distribute parallel for simd firstprivate (f27)\n+  #pragma omp teams distribute parallel for simd firstprivate (f27) default(none)\n   for (int i = 0; i < 64; i++)\n     f27++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f28\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f28\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f28\\\\)\" \"gimple\" } } */\n-  #pragma omp teams distribute simd firstprivate (f28)\n+  #pragma omp teams distribute simd firstprivate (f28) default(none)\n   for (int i = 0; i < 64; i++)\n     f28++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f29\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f29\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(f29\\\\)\" \"gimple\" } } *//* NOTE: This is an implementation detail.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f29\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f29\\\\)\" \"gimple\" } } */\n-  #pragma omp teams loop firstprivate (f29)\n+  #pragma omp teams loop firstprivate (f29) default(none)\n   for (int i = 0; i < 64; i++)\n     f29++;\n }"}, {"sha": "4366863c5793b1dbcefbca8f4f9bff3ddf206e88", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-10.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-10.c?ref=5d21c0cbda0c4b109366f51534f328145da4c21f", "patch": "@@ -13,14 +13,14 @@ foo (void)\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r00 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r00 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r00 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp distribute parallel for reduction(+:r00[1:2])\n+  #pragma omp distribute parallel for reduction(+:r00[1:2]) default(none)\n   for (int i = 0; i < 64; i++)\n     r00[1]++;\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r01 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r01 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r01 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r01 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp distribute parallel for simd reduction(+:r01[1:3])\n+  #pragma omp distribute parallel for simd reduction(+:r01[1:3]) default(none)\n   for (int i = 0; i < 64; i++)\n     r01[1]++;\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r02 \\\\+ 4\" \"gimple\" } } */\n@@ -43,53 +43,53 @@ bar (void)\n     r03[1]++;\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r04 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r04 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp master taskloop reduction(+:r04[1:6])\n+  #pragma omp master taskloop reduction(+:r04[1:6]) default(none)\n   for (int i = 0; i < 64; i++)\n     r04[1]++;\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r05 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r05 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r05 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp master taskloop simd reduction(+:r05[1:7])\n+  #pragma omp master taskloop simd reduction(+:r05[1:7]) default(none)\n   for (int i = 0; i < 64; i++)\n     r05[1]++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r06 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r06 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp parallel for reduction(+:r06[1:8])\n+  #pragma omp parallel for reduction(+:r06[1:8]) default(none)\n   for (int i = 0; i < 64; i++)\n     r06[1]++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r07 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r07 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r07 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp parallel for simd reduction(+:r07[1:9])\n+  #pragma omp parallel for simd reduction(+:r07[1:9]) default(none)\n   for (int i = 0; i < 64; i++)\n     r07[1]++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(r08\\\\)\" \"gimple\" } } *//* FIXME: Should be shared, but firstprivate is an optimization.  */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r08 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r08 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n-  #pragma omp parallel loop reduction(+:r08[1:10])\n+  #pragma omp parallel loop reduction(+:r08[1:10]) default(none)\n   for (int i = 0; i < 64; i++)\n     r08[1]++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r09 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r09 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp parallel master reduction(+:r09[1:11])\n+  #pragma omp parallel master reduction(+:r09[1:11]) default(none)\n   r09[1]++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(r10\\\\)\" \"gimple\" } } *//* FIXME: Should be shared, but firstprivate is an optimization.  */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r10 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r10 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop reduction(+:r10[1:12])\n+  #pragma omp parallel master taskloop reduction(+:r10[1:12]) default(none)\n   for (int i = 0; i < 64; i++)\n     r10[1]++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(r11\\\\)\" \"gimple\" } } *//* FIXME: Should be shared, but firstprivate is an optimization.  */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r11 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r11 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r11 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop simd reduction(+:r11[1:13])\n+  #pragma omp parallel master taskloop simd reduction(+:r11[1:13]) default(none)\n   for (int i = 0; i < 64; i++)\n     r11[1]++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r12 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on sections instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp sections\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r12 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp section \\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r12 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp parallel sections reduction(+:r12[1:14])\n+  #pragma omp parallel sections reduction(+:r12[1:14]) default(none)\n   {\n     r12[1]++;\n     #pragma omp section\n@@ -99,14 +99,14 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(firstprivate:r13 \\\\\\[pointer assign, bias: 4\\\\\\]\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r13\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r13 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp target parallel reduction(+:r13[1:15])\n+  #pragma omp target parallel reduction(+:r13[1:15]) default(none) defaultmap(none)\n   r13[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:\\\\\\*_\\[0-9]* \\\\\\[len: 64\\\\\\]\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(firstprivate:r14 \\\\\\[pointer assign, bias: 4\\\\\\]\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r14\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r14 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r14 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp target parallel for reduction(+:r14[1:16])\n+  #pragma omp target parallel for reduction(+:r14[1:16]) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r14[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:\\\\\\*_\\[0-9]* \\\\\\[len: 68\\\\\\]\" \"gimple\" } } */\n@@ -115,7 +115,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r15 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r15 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r15 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp target parallel for simd reduction(+:r15[1:17])\n+  #pragma omp target parallel for simd reduction(+:r15[1:17]) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r15[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:\\\\\\*_\\[0-9]* \\\\\\[len: 72\\\\\\]\" \"gimple\" } } */\n@@ -124,21 +124,21 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(r16\\\\)\" \"gimple\" } } *//* FIXME: Should be shared, but firstprivate is an optimization.  */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r16 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r16 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n-  #pragma omp target parallel loop reduction(+:r16[1:18])\n+  #pragma omp target parallel loop reduction(+:r16[1:18]) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r16[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:\\\\\\*_\\[0-9]* \\\\\\[len: 76\\\\\\]\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(firstprivate:r17 \\\\\\[pointer assign, bias: 4\\\\\\]\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r17\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r17 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp target teams reduction(+:r17[1:19])\n+  #pragma omp target teams reduction(+:r17[1:19]) default(none) defaultmap(none)\n   r17[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:\\\\\\*_\\[0-9]* \\\\\\[len: 80\\\\\\]\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(firstprivate:r18 \\\\\\[pointer assign, bias: 4\\\\\\]\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r18\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r18 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r18 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp target teams distribute reduction(+:r18[1:20])\n+  #pragma omp target teams distribute reduction(+:r18[1:20]) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r18[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:\\\\\\*_\\[0-9]* \\\\\\[len: 84\\\\\\]\" \"gimple\" } } */\n@@ -148,7 +148,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r19 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r19 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r19 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp target teams distribute parallel for reduction(+:r19[1:21])\n+  #pragma omp target teams distribute parallel for reduction(+:r19[1:21]) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r19[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:\\\\\\*_\\[0-9]* \\\\\\[len: 88\\\\\\]\" \"gimple\" } } */\n@@ -159,7 +159,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r20 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r20 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r20 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp target teams distribute parallel for simd reduction(+:r20[1:22])\n+  #pragma omp target teams distribute parallel for simd reduction(+:r20[1:22]) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r20[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:\\\\\\*_\\[0-9]* \\\\\\[len: 92\\\\\\]\" \"gimple\" } } */\n@@ -168,7 +168,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r21 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r21 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r21 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp target teams distribute simd reduction(+:r21[1:23])\n+  #pragma omp target teams distribute simd reduction(+:r21[1:23]) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r21[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:\\\\\\*_\\[0-9]* \\\\\\[len: 96\\\\\\]\" \"gimple\" } } */\n@@ -179,53 +179,53 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(r22\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r22 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r22 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n-  #pragma omp target teams loop reduction(+:r22[1:24])\n+  #pragma omp target teams loop reduction(+:r22[1:24]) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r22[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:\\\\\\*_\\[0-9]* \\\\\\[len: 100\\\\\\]\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(firstprivate:r23 \\\\\\[pointer assign, bias: 4\\\\\\]\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r23\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r23 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp target simd reduction(+:r23[1:25])\n+  #pragma omp target simd reduction(+:r23[1:25]) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r23[1]++;\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r24 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r24 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp taskloop simd reduction(+:r24[1:26])\n+  #pragma omp taskloop simd reduction(+:r24[1:26]) default(none)\n   for (int i = 0; i < 64; i++)\n     r24[1]++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r25 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r25 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp teams distribute reduction(+:r25[1:27])\n+  #pragma omp teams distribute reduction(+:r25[1:27]) default(none)\n   for (int i = 0; i < 64; i++)\n     r25[1]++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r26 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r26 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r26 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r26 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp teams distribute parallel for reduction(+:r26[1:28])\n+  #pragma omp teams distribute parallel for reduction(+:r26[1:28]) default(none)\n   for (int i = 0; i < 64; i++)\n     r26[1]++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r27 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r27 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r27 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r27 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r27 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp teams distribute parallel for simd reduction(+:r27[1:29])\n+  #pragma omp teams distribute parallel for simd reduction(+:r27[1:29]) default(none)\n   for (int i = 0; i < 64; i++)\n     r27[1]++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r28 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r28 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r28 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp teams distribute simd reduction(+:r28[1:30])\n+  #pragma omp teams distribute simd reduction(+:r28[1:30]) default(none)\n   for (int i = 0; i < 64; i++)\n     r28[1]++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(r29\\\\)\" \"gimple\" } } *//* FIXME: Should be shared, but firstprivate is an optimization.  */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r29 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(r29\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r29 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*\\\\)r29 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n-  #pragma omp teams loop reduction(+:r29[1:31])\n+  #pragma omp teams loop reduction(+:r29[1:31]) default(none)\n   for (int i = 0; i < 64; i++)\n     r29[1]++;\n }"}, {"sha": "d45417fec8aaa5ea1f50571c6173e00504d8d94a", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-13.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-13.c?ref=5d21c0cbda0c4b109366f51534f328145da4c21f", "patch": "@@ -16,7 +16,7 @@ foo (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j00b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j00b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j00b\\\\)\" \"gimple\" } } */\n-  #pragma omp distribute parallel for simd collapse(2) lastprivate (j00a, j00b)\n+  #pragma omp distribute parallel for simd collapse(2) lastprivate (j00a, j00b) default(none)\n   for (j00a = 0; j00a < 64; j00a++)\n     for (j00b = 0; j00b < 4; j00b++)\n       ;\n@@ -50,7 +50,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j03b\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j03b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j03b\\\\)\" \"gimple\" } } */\n-  #pragma omp master taskloop simd collapse(2) lastprivate (j03a, j03b)\n+  #pragma omp master taskloop simd collapse(2) lastprivate (j03a, j03b) default(none)\n   for (j03a = 0; j03a < 64; j03a++)\n     for (j03b = 0; j03b < 4; j03b++)\n       ;\n@@ -60,7 +60,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j04b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j04b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j04b\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel for simd collapse(2) lastprivate (j04a, j04b)\n+  #pragma omp parallel for simd collapse(2) lastprivate (j04a, j04b) default(none)\n   for (j04a = 0; j04a < 64; j04a++)\n     for (j04b = 0; j04b < 4; j04b++)\n       ;\n@@ -74,7 +74,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j05b\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j05b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j05b\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop simd collapse(2) lastprivate (j05a, j05b)\n+  #pragma omp parallel master taskloop simd collapse(2) lastprivate (j05a, j05b) default(none)\n   for (j05a = 0; j05a < 64; j05a++)\n     for (j05b = 0; j05b < 4; j05b++)\n       ;\n@@ -88,7 +88,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j06b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j06b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j06b\\\\)\" \"gimple\" } } */\n-  #pragma omp target parallel for simd collapse(2) lastprivate (j06a, j06b)\n+  #pragma omp target parallel for simd collapse(2) lastprivate (j06a, j06b) default(none) defaultmap(none)\n   for (j06a = 0; j06a < 64; j06a++)\n     for (j06b = 0; j06b < 4; j06b++)\n       ;\n@@ -98,7 +98,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j07b\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j07b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j07b\\\\)\" \"gimple\" } } */\n-  #pragma omp target simd collapse(2) lastprivate (j07a, j07b)\n+  #pragma omp target simd collapse(2) lastprivate (j07a, j07b) defaultmap(none)\n   for (j07a = 0; j07a < 64; j07a++)\n     for (j07b = 0; j07b < 4; j07b++)\n       ;\n@@ -116,7 +116,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j08b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j08b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j08b\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute parallel for simd collapse(2) lastprivate (j08a, j08b)\n+  #pragma omp target teams distribute parallel for simd collapse(2) lastprivate (j08a, j08b) default(none) defaultmap(none)\n   for (j08a = 0; j08a < 64; j08a++)\n     for (j08b = 0; j08b < 4; j08b++)\n       ;\n@@ -130,7 +130,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j09b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j09b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j09b\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute simd collapse(2) lastprivate (j09a, j09b)\n+  #pragma omp target teams distribute simd collapse(2) lastprivate (j09a, j09b) default(none) defaultmap(none)\n   for (j09a = 0; j09a < 64; j09a++)\n     for (j09b = 0; j09b < 4; j09b++)\n       ;\n@@ -140,7 +140,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j10b\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j10b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j10b\\\\)\" \"gimple\" } } */\n-  #pragma omp taskloop simd collapse(2) lastprivate (j10a, j10b)\n+  #pragma omp taskloop simd collapse(2) lastprivate (j10a, j10b) default(none)\n   for (j10a = 0; j10a < 64; j10a++)\n     for (j10b = 0; j10b < 4; j10b++)\n       ;\n@@ -154,7 +154,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j11b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j11b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j11b\\\\)\" \"gimple\" } } */\n-  #pragma omp teams distribute parallel for simd collapse(2) lastprivate (j11a, j11b)\n+  #pragma omp teams distribute parallel for simd collapse(2) lastprivate (j11a, j11b) default(none)\n   for (j11a = 0; j11a < 64; j11a++)\n     for (j11b = 0; j11b < 4; j11b++)\n       ;\n@@ -164,7 +164,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j12b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j12b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j12b\\\\)\" \"gimple\" } } */\n-  #pragma omp teams distribute simd collapse(2) lastprivate (j12a, j12b)\n+  #pragma omp teams distribute simd collapse(2) lastprivate (j12a, j12b) default(none)\n   for (j12a = 0; j12a < 64; j12a++)\n     for (j12b = 0; j12b < 4; j12b++)\n       ;"}, {"sha": "2df78919de94938ec6d8f6f32a19814ceb115ab3", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-14.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-14.c?ref=5d21c0cbda0c4b109366f51534f328145da4c21f", "patch": "@@ -16,7 +16,7 @@ foo (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j00b\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j00b\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j00b\\\\)\" \"gimple\" } } */\n-  #pragma omp distribute parallel for simd collapse(2)\n+  #pragma omp distribute parallel for simd collapse(2) default(none)\n   for (j00a = 0; j00a < 64; j00a++)\n     for (j00b = 0; j00b < 4; j00b++)\n       ;\n@@ -50,7 +50,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j03b\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j03b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j03b\\\\)\" \"gimple\" } } */\n-  #pragma omp master taskloop simd collapse(2)\n+  #pragma omp master taskloop simd collapse(2) default(none)\n   for (j03a = 0; j03a < 64; j03a++)\n     for (j03b = 0; j03b < 4; j03b++)\n       ;\n@@ -60,7 +60,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j04b\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j04b\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j04b\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel for simd collapse(2)\n+  #pragma omp parallel for simd collapse(2) default(none)\n   for (j04a = 0; j04a < 64; j04a++)\n     for (j04b = 0; j04b < 4; j04b++)\n       ;\n@@ -74,7 +74,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j05b\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j05b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j05b\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop simd collapse(2)\n+  #pragma omp parallel master taskloop simd collapse(2) default(none)\n   for (j05a = 0; j05a < 64; j05a++)\n     for (j05b = 0; j05b < 4; j05b++)\n       ;\n@@ -88,7 +88,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j06b\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j06b\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j06b\\\\)\" \"gimple\" } } */\n-  #pragma omp target parallel for simd collapse(2)\n+  #pragma omp target parallel for simd collapse(2) default(none) defaultmap(none)\n   for (j06a = 0; j06a < 64; j06a++)\n     for (j06b = 0; j06b < 4; j06b++)\n       ;\n@@ -98,7 +98,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j07b\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j07b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j07b\\\\)\" \"gimple\" } } */\n-  #pragma omp target simd collapse(2)\n+  #pragma omp target simd collapse(2) defaultmap(none)\n   for (j07a = 0; j07a < 64; j07a++)\n     for (j07b = 0; j07b < 4; j07b++)\n       ;\n@@ -116,7 +116,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j08b\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j08b\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j08b\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute parallel for simd collapse(2)\n+  #pragma omp target teams distribute parallel for simd collapse(2) default(none) defaultmap(none)\n   for (j08a = 0; j08a < 64; j08a++)\n     for (j08b = 0; j08b < 4; j08b++)\n       ;\n@@ -130,7 +130,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j09b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j09b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j09b\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute simd collapse(2)\n+  #pragma omp target teams distribute simd collapse(2) default(none) defaultmap(none)\n   for (j09a = 0; j09a < 64; j09a++)\n     for (j09b = 0; j09b < 4; j09b++)\n       ;\n@@ -140,7 +140,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j10b\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j10b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j10b\\\\)\" \"gimple\" } } */\n-  #pragma omp taskloop simd collapse(2)\n+  #pragma omp taskloop simd collapse(2) default(none)\n   for (j10a = 0; j10a < 64; j10a++)\n     for (j10b = 0; j10b < 4; j10b++)\n       ;\n@@ -154,7 +154,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j11b\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j11b\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j11b\\\\)\" \"gimple\" } } */\n-  #pragma omp teams distribute parallel for simd collapse(2)\n+  #pragma omp teams distribute parallel for simd collapse(2) default(none)\n   for (j11a = 0; j11a < 64; j11a++)\n     for (j11b = 0; j11b < 4; j11b++)\n       ;\n@@ -164,7 +164,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j12b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j12b\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j12b\\\\)\" \"gimple\" } } */\n-  #pragma omp teams distribute simd collapse(2)\n+  #pragma omp teams distribute simd collapse(2) default(none)\n   for (j12a = 0; j12a < 64; j12a++)\n     for (j12b = 0; j12b < 4; j12b++)\n       ;"}, {"sha": "1af9bd2c4be245636de1dbdf199a8c8a627607f0", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-2.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-2.c?ref=5d21c0cbda0c4b109366f51534f328145da4c21f", "patch": "@@ -11,14 +11,14 @@ foo (void)\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l00\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l00\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l00\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp distribute parallel for lastprivate (l00)\n+  #pragma omp distribute parallel for lastprivate (l00) default(none)\n   for (int i = 0; i < 64; i++)\n     l00 = i;\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l01\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l01\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l01\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l01\\\\)\" \"gimple\" } } */\n-  #pragma omp distribute parallel for simd lastprivate (l01)\n+  #pragma omp distribute parallel for simd lastprivate (l01) default(none)\n   for (int i = 0; i < 64; i++)\n     l01 = i;\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l02\\\\)\" \"gimple\" } } */\n@@ -41,52 +41,52 @@ bar (void)\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l04\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(l04\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l04\\\\)\" \"gimple\" } } */\n-  #pragma omp master taskloop lastprivate (l04)\n+  #pragma omp master taskloop lastprivate (l04) default(none)\n   for (int i = 0; i < 64; i++)\n     l04 = i;\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(l05\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l05\\\\)\" \"gimple\" } } */\n-  #pragma omp master taskloop simd lastprivate (l05)\n+  #pragma omp master taskloop simd lastprivate (l05) default(none)\n   for (int i = 0; i < 64; i++)\n     l05 = i;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l06\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l06\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp parallel for lastprivate (l06)\n+  #pragma omp parallel for lastprivate (l06) default(none)\n   for (int i = 0; i < 64; i++)\n     l06 = i;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l07\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l07\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l07\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel for simd lastprivate (l07)\n+  #pragma omp parallel for simd lastprivate (l07) default(none)\n   for (int i = 0; i < 64; i++)\n     l07 = i;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j00\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j00\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j00\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n-  #pragma omp parallel loop lastprivate (j00)\n+  #pragma omp parallel loop lastprivate (j00) default(none)\n   for (j00 = 0; j00 < 64; j00++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l08\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l08\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(l08\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l08\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop lastprivate (l08)\n+  #pragma omp parallel master taskloop lastprivate (l08) default(none)\n   for (int i = 0; i < 64; i++)\n     l08 = i;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(l09\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l09\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop simd lastprivate (l09)\n+  #pragma omp parallel master taskloop simd lastprivate (l09) default(none)\n   for (int i = 0; i < 64; i++)\n     l09 = i;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l10\\\\)\" \"gimple\" } } *//* FIXME: This should be on sections instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp sections\\[^\\n\\r]*lastprivate\\\\(l10\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp section \\[^\\n\\r]*lastprivate\\\\(l10\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel sections lastprivate (l10)\n+  #pragma omp parallel sections lastprivate (l10) default(none)\n   {\n     l10 = 1;\n     #pragma omp section\n@@ -96,30 +96,30 @@ bar (void)\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l11\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l11\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp target parallel for lastprivate (l11)\n+  #pragma omp target parallel for lastprivate (l11) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     l11 = i;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l12\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l12\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l12\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l12\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l12\\\\)\" \"gimple\" } } */\n-  #pragma omp target parallel for simd lastprivate (l12)\n+  #pragma omp target parallel for simd lastprivate (l12) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     l12 = i;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j01\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j01\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j01\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j01\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j01\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n-  #pragma omp target parallel loop lastprivate (j01)\n+  #pragma omp target parallel loop lastprivate (j01) default(none) defaultmap(none)\n   for (j01 = 0; j01 < 64; j01++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l13\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l13\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l13\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l13\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute lastprivate (l13)\n+  #pragma omp target teams distribute lastprivate (l13) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     l13 = i;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l14\" \"gimple\" } } */\n@@ -128,7 +128,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l14\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l14\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l14\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp target teams distribute parallel for lastprivate (l14)\n+  #pragma omp target teams distribute parallel for lastprivate (l14) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     l14 = i;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l15\" \"gimple\" } } */\n@@ -138,15 +138,15 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l15\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l15\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l15\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute parallel for simd lastprivate (l15)\n+  #pragma omp target teams distribute parallel for simd lastprivate (l15) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     l15 = i;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l16\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l16\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l16\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l16\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l16\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute simd lastprivate (l16)\n+  #pragma omp target teams distribute simd lastprivate (l16) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     l16 = i;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j02\" \"gimple\" } } */\n@@ -156,53 +156,53 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j02\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j02\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j02\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n-  #pragma omp target teams loop lastprivate (j02)\n+  #pragma omp target teams loop lastprivate (j02) default(none) defaultmap(none)\n   for (j02 = 0; j02 < 64; j02++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l17\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l17\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l17\\\\)\" \"gimple\" } } */\n-  #pragma omp target simd lastprivate (l17)\n+  #pragma omp target simd lastprivate (l17) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     l17 = i;\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(l18\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l18\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l18\\\\)\" \"gimple\" } } */\n-  #pragma omp taskloop simd lastprivate (l18)\n+  #pragma omp taskloop simd lastprivate (l18) default(none)\n   for (int i = 0; i < 64; i++)\n     l18 = i;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l19\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l19\\\\)\" \"gimple\" } } */\n-  #pragma omp teams distribute lastprivate (l19)\n+  #pragma omp teams distribute lastprivate (l19) default(none)\n   for (int i = 0; i < 64; i++)\n     l19 = i;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l20\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l20\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l20\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l20\\\\)\" \"gimple\" } } *//* FIXME.  */\n- #pragma omp teams distribute parallel for lastprivate (l20)\n+ #pragma omp teams distribute parallel for lastprivate (l20) default(none)\n   for (int i = 0; i < 64; i++)\n     l20 = i;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l21\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l21\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l21\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l21\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l21\\\\)\" \"gimple\" } } */\n- #pragma omp teams distribute parallel for simd lastprivate (l21)\n+ #pragma omp teams distribute parallel for simd lastprivate (l21) default(none)\n   for (int i = 0; i < 64; i++)\n     l21 = i;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l22\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l22\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l22\\\\)\" \"gimple\" } } */\n-  #pragma omp teams distribute simd lastprivate (l22)\n+  #pragma omp teams distribute simd lastprivate (l22) default(none)\n   for (int i = 0; i < 64; i++)\n     l22 = i;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j03\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j03\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j03\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j03\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j03\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n-  #pragma omp teams loop lastprivate (j03)\n+  #pragma omp teams loop lastprivate (j03) default(none)\n   for (j03 = 0; j03 < 64; j03++)\n     ;\n }"}, {"sha": "8e8cf938ef6c5bd805a922fb5f45601c521ed18f", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-3.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-3.c?ref=5d21c0cbda0c4b109366f51534f328145da4c21f", "patch": "@@ -20,7 +20,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l01\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l01\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l01\\\\)\" \"gimple\" } } */\n-  #pragma omp master taskloop firstprivate (l01) lastprivate (l01)\n+  #pragma omp master taskloop firstprivate (l01) lastprivate (l01) default(none)\n   for (int i = 0; i < 64; i++)\n     l01 = i;\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(l02\\\\)\" \"gimple\" } } */\n@@ -29,14 +29,14 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l02\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l02\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l02\\\\)\" \"gimple\" } } */\n-  #pragma omp master taskloop simd firstprivate (l02) lastprivate (l02)\n+  #pragma omp master taskloop simd firstprivate (l02) lastprivate (l02) default(none)\n   for (int i = 0; i < 64; i++)\n     l02 = i;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(l03\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l03\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(l03\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l03\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp parallel for firstprivate (l03) lastprivate (l03)\n+  #pragma omp parallel for firstprivate (l03) lastprivate (l03) default(none)\n   for (int i = 0; i < 64; i++)\n     l03 = i;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(l04\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n@@ -45,15 +45,15 @@ bar (void)\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l04\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l04\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l04\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel for simd firstprivate (l04) lastprivate (l04)\n+  #pragma omp parallel for simd firstprivate (l04) lastprivate (l04) default(none)\n   for (int i = 0; i < 64; i++)\n     l04 = i;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(l05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l05\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop firstprivate (l05) lastprivate (l05)\n+  #pragma omp parallel master taskloop firstprivate (l05) lastprivate (l05) default(none)\n   for (int i = 0; i < 64; i++)\n     l05 = i;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l06\\\\)\" \"gimple\" } } */\n@@ -63,7 +63,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l06\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l06\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop simd firstprivate (l06) lastprivate (l06)\n+  #pragma omp parallel master taskloop simd firstprivate (l06) lastprivate (l06) default(none)\n   for (int i = 0; i < 64; i++)\n     l06 = i;\n   /* FIXME: OpenMP 5.0/5.1 broken here, conceptually it should be shared on parallel and\n@@ -76,7 +76,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump-not \"omp sections\\[^\\n\\r]*lastprivate\\\\(l07\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp section \\[^\\n\\r]*firstprivate\\\\(l07\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp section \\[^\\n\\r]*lastprivate\\\\(l07\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel sections firstprivate (l07) lastprivate (l07)\n+  #pragma omp parallel sections firstprivate (l07) lastprivate (l07) default(none)\n   {\n     l07 = 1;\n     #pragma omp section\n@@ -88,7 +88,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l08\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(l08\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l08\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp target parallel for firstprivate (l08) lastprivate (l08)\n+  #pragma omp target parallel for firstprivate (l08) lastprivate (l08) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     l08 = i;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l09\" \"gimple\" } } */\n@@ -99,21 +99,21 @@ bar (void)\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l09\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l09\\\\)\" \"gimple\" } } */\n-  #pragma omp target parallel for simd firstprivate (l09) lastprivate (l09)\n+  #pragma omp target parallel for simd firstprivate (l09) lastprivate (l09) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     l09 = i;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l10\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l10\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l10\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l10\\\\)\" \"gimple\" } } */\n-  #pragma omp target simd firstprivate (l10) lastprivate (l10)\n+  #pragma omp target simd firstprivate (l10) lastprivate (l10) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     l10 = i;\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l11\\\\)\" \"gimple\" } } */\n- #pragma omp taskloop simd firstprivate (l11) lastprivate (l11)\n+ #pragma omp taskloop simd firstprivate (l11) lastprivate (l11) default(none)\n   for (int i = 0; i < 64; i++)\n     l11 = i;\n }"}, {"sha": "915a8657b91f5e2e659b263b5984469b57100b40", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-4.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-4.c?ref=5d21c0cbda0c4b109366f51534f328145da4c21f", "patch": "@@ -19,20 +19,20 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l01\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l01\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(l01:1\\\\)\" \"gimple\" } } */\n-  #pragma omp master taskloop simd linear (l01)\n+  #pragma omp master taskloop simd linear (l01) default(none)\n   for (int i = 0; i < 64; i++)\n     l01++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l02\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*linear\\\\(l02:1\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel for linear (l02)\n+  #pragma omp parallel for linear (l02) default(none)\n   for (int i = 0; i < 64; i++)\n     l02++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(l03\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l03\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(l03\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l03\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(l03:1\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel for simd linear (l03)\n+  #pragma omp parallel for simd linear (l03) default(none)\n   for (int i = 0; i < 64; i++)\n     l03++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l04\\\\)\" \"gimple\" } } */\n@@ -41,14 +41,14 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l04\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l04\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(l04:1\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop simd linear (l04)\n+  #pragma omp parallel master taskloop simd linear (l04) default(none)\n   for (int i = 0; i < 64; i++)\n     l04++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l05\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*linear\\\\(l05:1\\\\)\" \"gimple\" } } */\n-  #pragma omp target parallel for linear (l05)\n+  #pragma omp target parallel for linear (l05) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     l05++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l06\" \"gimple\" } } */\n@@ -58,19 +58,19 @@ bar (void)\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l06\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(l06:1\\\\)\" \"gimple\" } } */\n-  #pragma omp target parallel for simd linear (l06)\n+  #pragma omp target parallel for simd linear (l06) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     l06++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l07\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l07\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(l07:1\\\\)\" \"gimple\" } } */\n-  #pragma omp target simd linear (l07)\n+  #pragma omp target simd linear (l07) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     l07++;\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l08\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l08\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(l08:1\\\\)\" \"gimple\" } } */\n-  #pragma omp taskloop simd linear (l08)\n+  #pragma omp taskloop simd linear (l08) default(none)\n   for (int i = 0; i < 64; i++)\n     l08++;\n }"}, {"sha": "26da0ac433a1c6a7f1bc3109af41e448635ff809", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-5.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-5.c?ref=5d21c0cbda0c4b109366f51534f328145da4c21f", "patch": "@@ -12,7 +12,7 @@ foo (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j00\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j00\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j00:1\\\\)\" \"gimple\" } } */\n-  #pragma omp distribute parallel for simd linear (j00)\n+  #pragma omp distribute parallel for simd linear (j00) default(none)\n   for (j00 = 0; j00 < 64; j00++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j01\\\\)\" \"gimple\" } } */\n@@ -35,35 +35,35 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j03\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j03\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j03:1\\\\)\" \"gimple\" } } */\n-  #pragma omp master taskloop simd linear (j03)\n+  #pragma omp master taskloop simd linear (j03) default(none)\n   for (j03 = 0; j03 < 64; j03++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j04\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j04\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j04:1\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel for simd linear (j04)\n+  #pragma omp parallel for simd linear (j04) default(none)\n   for (j04 = 0; j04 < 64; j04++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(j05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j05\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j05:1\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop simd linear (j05)\n+  #pragma omp parallel master taskloop simd linear (j05) default(none)\n   for (j05 = 0; j05 < 64; j05++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j06\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j06\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j06\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j06\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j06:1\\\\)\" \"gimple\" } } */\n-  #pragma omp target parallel for simd linear (j06)\n+  #pragma omp target parallel for simd linear (j06) default(none) defaultmap(none)\n   for (j06 = 0; j06 < 64; j06++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j07\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j07\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j07:1\\\\)\" \"gimple\" } } */\n-  #pragma omp target simd linear (j07)\n+  #pragma omp target simd linear (j07) defaultmap(none)\n   for (j07 = 0; j07 < 64; j07++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j08\" \"gimple\" } } */\n@@ -73,35 +73,35 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j08\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j08\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j08:1\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute parallel for simd linear (j08)\n+  #pragma omp target teams distribute parallel for simd linear (j08) default(none) defaultmap(none)\n   for (j08 = 0; j08 < 64; j08++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j09\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j09:1\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute simd linear (j09)\n+  #pragma omp target teams distribute simd linear (j09) default(none) defaultmap(none)\n   for (j09 = 0; j09 < 64; j09++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j10\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j10\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j10:1\\\\)\" \"gimple\" } } */\n-  #pragma omp taskloop simd linear (j10)\n+  #pragma omp taskloop simd linear (j10) default(none)\n   for (j10 = 0; j10 < 64; j10++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j11\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j11\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j11:1\\\\)\" \"gimple\" } } */\n-  #pragma omp teams distribute parallel for simd linear (j11)\n+  #pragma omp teams distribute parallel for simd linear (j11) default(none)\n   for (j11 = 0; j11 < 64; j11++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j12\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j12\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j12:1\\\\)\" \"gimple\" } } */\n-  #pragma omp teams distribute simd linear (j12)\n+  #pragma omp teams distribute simd linear (j12) default(none)\n   for (j12 = 0; j12 < 64; j12++)\n     ;\n }"}, {"sha": "d37587c13133167b450915a64356efd38b2f7038", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-6.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-6.c?ref=5d21c0cbda0c4b109366f51534f328145da4c21f", "patch": "@@ -12,7 +12,7 @@ foo (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j00\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j00\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j00:1\\\\)\" \"gimple\" } } */\n-  #pragma omp distribute parallel for simd\n+  #pragma omp distribute parallel for simd default(none)\n   for (j00 = 0; j00 < 64; j00++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j01\\\\)\" \"gimple\" } } */\n@@ -35,35 +35,35 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j03\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j03\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j03:1\\\\)\" \"gimple\" } } */\n-  #pragma omp master taskloop simd\n+  #pragma omp master taskloop simd default(none)\n   for (j03 = 0; j03 < 64; j03++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j04\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j04\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j04:1\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel for simd\n+  #pragma omp parallel for simd default(none)\n   for (j04 = 0; j04 < 64; j04++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(j05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j05\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j05:1\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop simd\n+  #pragma omp parallel master taskloop simd default(none)\n   for (j05 = 0; j05 < 64; j05++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j06\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j06\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j06\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j06\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j06:1\\\\)\" \"gimple\" } } */\n-  #pragma omp target parallel for simd\n+  #pragma omp target parallel for simd default(none) defaultmap(none)\n   for (j06 = 0; j06 < 64; j06++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j07\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j07\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j07:1\\\\)\" \"gimple\" } } */\n-  #pragma omp target simd\n+  #pragma omp target simd defaultmap(none)\n   for (j07 = 0; j07 < 64; j07++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j08\" \"gimple\" } } */\n@@ -73,35 +73,35 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j08\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j08\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j08:1\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute parallel for simd\n+  #pragma omp target teams distribute parallel for simd default(none) defaultmap(none)\n   for (j08 = 0; j08 < 64; j08++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j09\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j09:1\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute simd\n+  #pragma omp target teams distribute simd default(none) defaultmap(none)\n   for (j09 = 0; j09 < 64; j09++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j10\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j10\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j10:1\\\\)\" \"gimple\" } } */\n-  #pragma omp taskloop simd\n+  #pragma omp taskloop simd default(none)\n   for (j10 = 0; j10 < 64; j10++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j11\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j11\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j11:1\\\\)\" \"gimple\" } } */\n-  #pragma omp teams distribute parallel for simd\n+  #pragma omp teams distribute parallel for simd default(none)\n   for (j11 = 0; j11 < 64; j11++)\n     ;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j12\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j12\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j12:1\\\\)\" \"gimple\" } } */\n-  #pragma omp teams distribute simd\n+  #pragma omp teams distribute simd default(none)\n   for (j12 = 0; j12 < 64; j12++)\n     ;\n }"}, {"sha": "e6e0e929dd23c0f518b0228f440a9b4cf9080bdd", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-7.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-7.c?ref=5d21c0cbda0c4b109366f51534f328145da4c21f", "patch": "@@ -9,7 +9,7 @@ foo (void)\n   /* { dg-final { scan-tree-dump-not \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j00\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j00\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j00:1\\\\)\" \"gimple\" } } */\n-  #pragma omp distribute parallel for simd\n+  #pragma omp distribute parallel for simd default(none)\n   for (int j00 = 0; j00 < 64; j00++)\n     ;\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j01\\\\)\" \"gimple\" } } */\n@@ -30,20 +30,20 @@ bar (void)\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(j03\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j03\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j03:1\\\\)\" \"gimple\" } } */\n-  #pragma omp master taskloop simd\n+  #pragma omp master taskloop simd default(none)\n   for (int j03 = 0; j03 < 64; j03++)\n     ;\n   /* { dg-final { scan-tree-dump-not \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j04\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j04\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j04:1\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel for simd\n+  #pragma omp parallel for simd default(none)\n   for (int j04 = 0; j04 < 64; j04++)\n     ;\n   /* { dg-final { scan-tree-dump-not \"omp parallel\\[^\\n\\r]*shared\\\\(j05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(j05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j05:1\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop simd\n+  #pragma omp parallel master taskloop simd default(none)\n   for (int j05 = 0; j05 < 64; j05++)\n     ;\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*map\\\\(tofrom:j06\" \"gimple\" } } */\n@@ -52,13 +52,13 @@ bar (void)\n   /* { dg-final { scan-tree-dump-not \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j06\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j06\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j06:1\\\\)\" \"gimple\" } } */\n-  #pragma omp target parallel for simd\n+  #pragma omp target parallel for simd default(none) defaultmap(none)\n   for (int j06 = 0; j06 < 64; j06++)\n     ;\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*map\\\\(tofrom:j07\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j07\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j07:1\\\\)\" \"gimple\" } } */\n-  #pragma omp target simd\n+  #pragma omp target simd defaultmap(none)\n   for (int j07 = 0; j07 < 64; j07++)\n     ;\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*map\\\\(tofrom:j08\" \"gimple\" } } */\n@@ -69,20 +69,20 @@ bar (void)\n   /* { dg-final { scan-tree-dump-not \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j08\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j08\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j08:1\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute parallel for simd\n+  #pragma omp target teams distribute parallel for simd default(none) defaultmap(none)\n   for (int j08 = 0; j08 < 64; j08++)\n     ;\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*map\\\\(tofrom:j09\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp teams\\[^\\n\\r]*shared\\\\(j09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j09:1\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute simd\n+  #pragma omp target teams distribute simd default(none) defaultmap(none)\n   for (int j09 = 0; j09 < 64; j09++)\n     ;\n   /* { dg-final { scan-tree-dump-not \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j10\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j10:1\\\\)\" \"gimple\" } } */\n-  #pragma omp taskloop simd\n+  #pragma omp taskloop simd default(none)\n   for (int j10 = 0; j10 < 64; j10++)\n     ;\n   /* { dg-final { scan-tree-dump-not \"omp teams\\[^\\n\\r]*shared\\\\(j11\\\\)\" \"gimple\" } } */\n@@ -91,13 +91,13 @@ bar (void)\n   /* { dg-final { scan-tree-dump-not \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j11:1\\\\)\" \"gimple\" } } */\n-  #pragma omp teams distribute parallel for simd\n+  #pragma omp teams distribute parallel for simd default(none)\n   for (int j11 = 0; j11 < 64; j11++)\n     ;\n   /* { dg-final { scan-tree-dump-not \"omp teams\\[^\\n\\r]*shared\\\\(j12\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j12\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j12:1\\\\)\" \"gimple\" } } */\n-  #pragma omp teams distribute simd\n+  #pragma omp teams distribute simd default(none)\n   for (int j12 = 0; j12 < 64; j12++)\n     ;\n }"}, {"sha": "ad36f3ede542a3ed82e063b0e124abb04dc61851", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-8.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-8.c?ref=5d21c0cbda0c4b109366f51534f328145da4c21f", "patch": "@@ -12,14 +12,14 @@ foo (void)\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r00\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r00\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r00\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp distribute parallel for reduction(+:r00)\n+  #pragma omp distribute parallel for reduction(+:r00) default(none)\n   for (int i = 0; i < 64; i++)\n     r00++;\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r01\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r01\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r01\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r01\\\\)\" \"gimple\" } } */\n-  #pragma omp distribute parallel for simd reduction(+:r01)\n+  #pragma omp distribute parallel for simd reduction(+:r01) default(none)\n   for (int i = 0; i < 64; i++)\n     r01++;\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r02\\\\)\" \"gimple\" } } */\n@@ -42,53 +42,53 @@ bar (void)\n     r03++;\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:r04\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:r04\\\\)\" \"gimple\" } } */\n-  #pragma omp master taskloop reduction(+:r04)\n+  #pragma omp master taskloop reduction(+:r04) default(none)\n   for (int i = 0; i < 64; i++)\n     r04++;\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:r05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:r05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r05\\\\)\" \"gimple\" } } */\n-  #pragma omp master taskloop simd reduction(+:r05)\n+  #pragma omp master taskloop simd reduction(+:r05) default(none)\n   for (int i = 0; i < 64; i++)\n     r05++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r06\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r06\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp parallel for reduction(+:r06)\n+  #pragma omp parallel for reduction(+:r06) default(none)\n   for (int i = 0; i < 64; i++)\n     r06++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r07\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r07\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r07\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel for simd reduction(+:r07)\n+  #pragma omp parallel for simd reduction(+:r07) default(none)\n   for (int i = 0; i < 64; i++)\n     r07++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r08\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r08\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r08\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n-  #pragma omp parallel loop reduction(+:r08)\n+  #pragma omp parallel loop reduction(+:r08) default(none)\n   for (int i = 0; i < 64; i++)\n     r08++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:r09\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel master reduction(+:r09)\n+  #pragma omp parallel master reduction(+:r09) default(none)\n   r09++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r10\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:r10\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:r10\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop reduction(+:r10)\n+  #pragma omp parallel master taskloop reduction(+:r10) default(none)\n   for (int i = 0; i < 64; i++)\n     r10++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:r11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:r11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r11\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop simd reduction(+:r11)\n+  #pragma omp parallel master taskloop simd reduction(+:r11) default(none)\n   for (int i = 0; i < 64; i++)\n     r11++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r12\\\\)\" \"gimple\" } } *//* FIXME: This should be on sections instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp sections\\[^\\n\\r]*reduction\\\\(\\\\+:r12\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp section \\[^\\n\\r]*reduction\\\\(\\\\+:r12\\\\)\" \"gimple\" } } */\n-  #pragma omp parallel sections reduction(+:r12)\n+  #pragma omp parallel sections reduction(+:r12) default(none)\n   {\n     r12++;\n     #pragma omp section\n@@ -97,41 +97,41 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r13\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r13\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r13\\\\)\" \"gimple\" } } */\n-  #pragma omp target parallel reduction(+:r13)\n+  #pragma omp target parallel reduction(+:r13) default(none) defaultmap(none)\n   r13++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r14\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r14\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r14\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r14\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp target parallel for reduction(+:r14)\n+  #pragma omp target parallel for reduction(+:r14) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r14++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r15\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r15\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r15\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r15\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r15\\\\)\" \"gimple\" } } */\n-  #pragma omp target parallel for simd reduction(+:r15)\n+  #pragma omp target parallel for simd reduction(+:r15) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r15++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r16\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r16\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r16\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r16\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r16\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n-  #pragma omp target parallel loop reduction(+:r16)\n+  #pragma omp target parallel loop reduction(+:r16) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r16++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r17\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r17\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r17\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams reduction(+:r17)\n+  #pragma omp target teams reduction(+:r17) default(none) defaultmap(none)\n   r17++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r18\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r18\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r18\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r18\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute reduction(+:r18)\n+  #pragma omp target teams distribute reduction(+:r18) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r18++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r19\" \"gimple\" } } */\n@@ -140,7 +140,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r19\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r19\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r19\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp target teams distribute parallel for reduction(+:r19)\n+  #pragma omp target teams distribute parallel for reduction(+:r19) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r19++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r20\" \"gimple\" } } */\n@@ -150,15 +150,15 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r20\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r20\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r20\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute parallel for simd reduction(+:r20)\n+  #pragma omp target teams distribute parallel for simd reduction(+:r20) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r20++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r21\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r21\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r21\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r21\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r21\\\\)\" \"gimple\" } } */\n-  #pragma omp target teams distribute simd reduction(+:r21)\n+  #pragma omp target teams distribute simd reduction(+:r21) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r21++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r22\" \"gimple\" } } */\n@@ -168,52 +168,52 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r22\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r22\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r22\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n-  #pragma omp target teams loop reduction(+:r22)\n+  #pragma omp target teams loop reduction(+:r22) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r22++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r23\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r23\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r23\\\\)\" \"gimple\" } } */\n-  #pragma omp target simd reduction(+:r23)\n+  #pragma omp target simd reduction(+:r23) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r23++;\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:r24\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r24\\\\)\" \"gimple\" } } */\n-  #pragma omp taskloop simd reduction(+:r24)\n+  #pragma omp taskloop simd reduction(+:r24) default(none)\n   for (int i = 0; i < 64; i++)\n     r24++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r25\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r25\\\\)\" \"gimple\" } } */\n-  #pragma omp teams distribute reduction(+:r25)\n+  #pragma omp teams distribute reduction(+:r25) default(none)\n   for (int i = 0; i < 64; i++)\n     r25++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r26\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r26\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r26\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r26\\\\)\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp teams distribute parallel for reduction(+:r26)\n+  #pragma omp teams distribute parallel for reduction(+:r26) default(none)\n   for (int i = 0; i < 64; i++)\n     r26++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r27\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r27\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r27\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r27\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r27\\\\)\" \"gimple\" } } */\n-  #pragma omp teams distribute parallel for simd reduction(+:r27)\n+  #pragma omp teams distribute parallel for simd reduction(+:r27) default(none)\n   for (int i = 0; i < 64; i++)\n     r27++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r28\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r28\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r28\\\\)\" \"gimple\" } } */\n-  #pragma omp teams distribute simd reduction(+:r28)\n+  #pragma omp teams distribute simd reduction(+:r28) default(none)\n   for (int i = 0; i < 64; i++)\n     r28++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(r29\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r29\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r29\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r29\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r29\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n-  #pragma omp teams loop reduction(+:r29)\n+  #pragma omp teams loop reduction(+:r29) default(none)\n   for (int i = 0; i < 64; i++)\n     r29++;\n }"}, {"sha": "a7d970ac157dff73cb7f268360a53197841ec4aa", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-9.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d21c0cbda0c4b109366f51534f328145da4c21f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-9.c?ref=5d21c0cbda0c4b109366f51534f328145da4c21f", "patch": "@@ -12,14 +12,14 @@ foo (void)\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r00 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r00 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r00 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp distribute parallel for reduction(+:r00[1:2])\n+  #pragma omp distribute parallel for reduction(+:r00[1:2]) default(none)\n   for (int i = 0; i < 64; i++)\n     r00[1]++;\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r01 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r01 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r01 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r01 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp distribute parallel for simd reduction(+:r01[1:2])\n+  #pragma omp distribute parallel for simd reduction(+:r01[1:2]) default(none)\n   for (int i = 0; i < 64; i++)\n     r01[1]++;\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r02 \\\\+ 4\" \"gimple\" } } */\n@@ -42,53 +42,53 @@ bar (void)\n     r03[1]++;\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r04 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r04 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp master taskloop reduction(+:r04[1:2])\n+  #pragma omp master taskloop reduction(+:r04[1:2]) default(none)\n   for (int i = 0; i < 64; i++)\n     r04[1]++;\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r05 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r05 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r05 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp master taskloop simd reduction(+:r05[1:2])\n+  #pragma omp master taskloop simd reduction(+:r05[1:2]) default(none)\n   for (int i = 0; i < 64; i++)\n     r05[1]++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r06 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r06 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp parallel for reduction(+:r06[1:2])\n+  #pragma omp parallel for reduction(+:r06[1:2]) default(none)\n   for (int i = 0; i < 64; i++)\n     r06[1]++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r07 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r07 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r07 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp parallel for simd reduction(+:r07[1:2])\n+  #pragma omp parallel for simd reduction(+:r07[1:2]) default(none)\n   for (int i = 0; i < 64; i++)\n     r07[1]++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r08\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r08 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r08 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n-  #pragma omp parallel loop reduction(+:r08[1:2])\n+  #pragma omp parallel loop reduction(+:r08[1:2]) default(none)\n   for (int i = 0; i < 64; i++)\n     r08[1]++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r09 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r09 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp parallel master reduction(+:r09[1:2])\n+  #pragma omp parallel master reduction(+:r09[1:2]) default(none)\n   r09[1]++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r10\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r10 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r10 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop reduction(+:r10[1:2])\n+  #pragma omp parallel master taskloop reduction(+:r10[1:2]) default(none)\n   for (int i = 0; i < 64; i++)\n     r10[1]++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r11\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r11 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r11 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r11 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp parallel master taskloop simd reduction(+:r11[1:2])\n+  #pragma omp parallel master taskloop simd reduction(+:r11[1:2]) default(none)\n   for (int i = 0; i < 64; i++)\n     r11[1]++;\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r12 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on sections instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp sections\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r12 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp section \\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r12 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp parallel sections reduction(+:r12[1:2])\n+  #pragma omp parallel sections reduction(+:r12[1:2]) default(none)\n   {\n     r12[1]++;\n     #pragma omp section\n@@ -97,41 +97,41 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r13\\\\\\[1\\\\\\] \\\\\\[len: 8\\\\\\]\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r13\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r13 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp target parallel reduction(+:r13[1:2])\n+  #pragma omp target parallel reduction(+:r13[1:2]) default(none) defaultmap(none)\n   r13[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r14\\\\\\[1\\\\\\] \\\\\\[len: 8\\\\\\]\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r14\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r14 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r14 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp target parallel for reduction(+:r14[1:2])\n+  #pragma omp target parallel for reduction(+:r14[1:2]) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r14[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r15\\\\\\[1\\\\\\] \\\\\\[len: 8\\\\\\]\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r15\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r15 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r15 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r15 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp target parallel for simd reduction(+:r15[1:2])\n+  #pragma omp target parallel for simd reduction(+:r15[1:2]) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r15[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r16\\\\\\[1\\\\\\] \\\\\\[len: 8\\\\\\]\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r16\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r16\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r16 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r16 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n-  #pragma omp target parallel loop reduction(+:r16[1:2])\n+  #pragma omp target parallel loop reduction(+:r16[1:2]) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r16[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r17\\\\\\[1\\\\\\] \\\\\\[len: 8\\\\\\]\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r17\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r17 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp target teams reduction(+:r17[1:2])\n+  #pragma omp target teams reduction(+:r17[1:2]) default(none) defaultmap(none)\n   r17[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r18\\\\\\[1\\\\\\] \\\\\\[len: 8\\\\\\]\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r18\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r18 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r18 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp target teams distribute reduction(+:r18[1:2])\n+  #pragma omp target teams distribute reduction(+:r18[1:2]) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r18[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r19\\\\\\[1\\\\\\] \\\\\\[len: 8\\\\\\]\" \"gimple\" } } */\n@@ -140,7 +140,7 @@ bar (void)\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r19 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r19 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r19 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp target teams distribute parallel for reduction(+:r19[1:2])\n+  #pragma omp target teams distribute parallel for reduction(+:r19[1:2]) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r19[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r20\\\\\\[1\\\\\\] \\\\\\[len: 8\\\\\\]\" \"gimple\" } } */\n@@ -150,15 +150,15 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r20 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r20 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r20 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp target teams distribute parallel for simd reduction(+:r20[1:2])\n+  #pragma omp target teams distribute parallel for simd reduction(+:r20[1:2]) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r20[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r21\\\\\\[1\\\\\\] \\\\\\[len: 8\\\\\\]\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r21\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r21 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r21 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r21 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp target teams distribute simd reduction(+:r21[1:2])\n+  #pragma omp target teams distribute simd reduction(+:r21[1:2]) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r21[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r22\\\\\\[1\\\\\\] \\\\\\[len: 8\\\\\\]\" \"gimple\" } } */\n@@ -168,52 +168,52 @@ bar (void)\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r22\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r22 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r22 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n-  #pragma omp target teams loop reduction(+:r22[1:2])\n+  #pragma omp target teams loop reduction(+:r22[1:2]) default(none) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r22[1]++;\n   /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r23\\\\\\[1\\\\\\] \\\\\\[len: 8\\\\\\]\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r23\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r23 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp target simd reduction(+:r23[1:2])\n+  #pragma omp target simd reduction(+:r23[1:2]) defaultmap(none)\n   for (int i = 0; i < 64; i++)\n     r23[1]++;\n   /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r24 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r24 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp taskloop simd reduction(+:r24[1:2])\n+  #pragma omp taskloop simd reduction(+:r24[1:2]) default(none)\n   for (int i = 0; i < 64; i++)\n     r24[1]++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r25 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r25 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp teams distribute reduction(+:r25[1:2])\n+  #pragma omp teams distribute reduction(+:r25[1:2]) default(none)\n   for (int i = 0; i < 64; i++)\n     r25[1]++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r26 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r26 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r26 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r26 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n-  #pragma omp teams distribute parallel for reduction(+:r26[1:2])\n+  #pragma omp teams distribute parallel for reduction(+:r26[1:2]) default(none)\n   for (int i = 0; i < 64; i++)\n     r26[1]++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r27 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r27 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r27 \\\\+ 4\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r27 \\\\+ 4\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r27 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp teams distribute parallel for simd reduction(+:r27[1:2])\n+  #pragma omp teams distribute parallel for simd reduction(+:r27[1:2]) default(none)\n   for (int i = 0; i < 64; i++)\n     r27[1]++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r28 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r28 \\\\+ 4\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r28 \\\\+ 4\" \"gimple\" } } */\n-  #pragma omp teams distribute simd reduction(+:r28[1:2])\n+  #pragma omp teams distribute simd reduction(+:r28[1:2]) default(none)\n   for (int i = 0; i < 64; i++)\n     r28[1]++;\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(r29\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r29 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r29\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r29 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:MEM\\[^\\n\\r]*&r29 \\\\+ 4\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n-  #pragma omp teams loop reduction(+:r29[1:2])\n+  #pragma omp teams loop reduction(+:r29[1:2]) default(none)\n   for (int i = 0; i < 64; i++)\n     r29[1]++;\n }"}]}