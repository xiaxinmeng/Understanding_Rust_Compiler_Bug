{"sha": "6e1141d738f16417f55f88fdd087a50c71fdf1ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUxMTQxZDczOGYxNjQxN2Y1NWY4OGZkZDA4N2E1MGM3MWZkZjFhZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-05-07T04:12:06Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-05-07T04:12:06Z"}, "message": "mangle.c (globals): Change the type of substitutions to VEC(tree,gc)*.\n\n\t* mangle.c (globals): Change the type of substitutions to\n\tVEC(tree,gc)*.\n\t(dump_substitution_candidates, add_substitution,\n\tfind_substitution, finish_mangling, init_mangle): Use VEC\n\tinstead of VARRAY.\n\nFrom-SVN: r99347", "tree": {"sha": "f7251220380a48a2a63058d9584075b88d462ac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7251220380a48a2a63058d9584075b88d462ac1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e1141d738f16417f55f88fdd087a50c71fdf1ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1141d738f16417f55f88fdd087a50c71fdf1ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e1141d738f16417f55f88fdd087a50c71fdf1ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1141d738f16417f55f88fdd087a50c71fdf1ae/comments", "author": null, "committer": null, "parents": [{"sha": "9857866d53d6675bfad833ac3a0285fd9c2cba87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9857866d53d6675bfad833ac3a0285fd9c2cba87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9857866d53d6675bfad833ac3a0285fd9c2cba87"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "faecf3f01a55bef5a894a4423015135cd5af7ebe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1141d738f16417f55f88fdd087a50c71fdf1ae/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1141d738f16417f55f88fdd087a50c71fdf1ae/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6e1141d738f16417f55f88fdd087a50c71fdf1ae", "patch": "@@ -6,6 +6,12 @@\n \t* name-lookup.h (cp_binding_level): Change the type of\n \tstatic_decls to VEC(tree,gc)*.\n \n+\t* mangle.c (globals): Change the type of substitutions to\n+\tVEC(tree,gc)*.\n+\t(dump_substitution_candidates, add_substitution,\n+\tfind_substitution, finish_mangling, init_mangle): Use VEC\n+\tinstead of VARRAY.\n+\n 2005-05-06  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* decl2.c (spew_debug): Remove."}, {"sha": "0d7f1e2017a21fa7e00de2978c48957549eb9db4", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1141d738f16417f55f88fdd087a50c71fdf1ae/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1141d738f16417f55f88fdd087a50c71fdf1ae/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=6e1141d738f16417f55f88fdd087a50c71fdf1ae", "patch": "@@ -97,7 +97,7 @@ typedef struct globals GTY(())\n {\n   /* An array of the current substitution candidates, in the order\n      we've seen them.  */\n-  varray_type substitutions;\n+  VEC(tree,gc) *substitutions;\n \n   /* The entity that is being mangled.  */\n   tree GTY ((skip)) entity;\n@@ -346,11 +346,11 @@ static void\n dump_substitution_candidates (void)\n {\n   unsigned i;\n+  tree el;\n \n   fprintf (stderr, \"  ++ substitutions  \");\n-  for (i = 0; i < VARRAY_ACTIVE_SIZE (G.substitutions); ++i)\n+  for (i = 0; VEC_iterate (tree, G.substitutions, i, el); ++i)\n     {\n-      tree el = VARRAY_TREE (G.substitutions, i);\n       const char *name = \"???\";\n \n       if (i > 0)\n@@ -414,10 +414,10 @@ add_substitution (tree node)\n   /* Make sure NODE isn't already a candidate.  */\n   {\n     int i;\n-    for (i = VARRAY_ACTIVE_SIZE (G.substitutions); --i >= 0; )\n+    tree candidate;\n+\n+    for (i = 0; VEC_iterate (tree, G.substitutions, i, candidate); i++)\n       {\n-\tconst tree candidate = VARRAY_TREE (G.substitutions, i);\n-\t\n \tgcc_assert (!(DECL_P (node) && node == candidate));\n \tgcc_assert (!(TYPE_P (node) && TYPE_P (candidate) \n \t\t      && same_type_p (node, candidate)));\n@@ -426,7 +426,7 @@ add_substitution (tree node)\n #endif /* ENABLE_CHECKING */\n \n   /* Put the decl onto the varray of substitution candidates.  */\n-  VARRAY_PUSH_TREE (G.substitutions, node);\n+  VEC_safe_push (tree, gc, G.substitutions, node);\n \n   if (DEBUG_MANGLE)\n     dump_substitution_candidates ();\n@@ -529,7 +529,7 @@ static int\n find_substitution (tree node)\n {\n   int i;\n-  const int size = VARRAY_ACTIVE_SIZE (G.substitutions);\n+  const int size = VEC_length (tree, G.substitutions);\n   tree decl;\n   tree type;\n \n@@ -638,7 +638,7 @@ find_substitution (tree node)\n      operation.  */\n   for (i = 0; i < size; ++i)\n     {\n-      tree candidate = VARRAY_TREE (G.substitutions, i);\n+      tree candidate = VEC_index (tree, G.substitutions, i);\n       /* NODE is a matched to a candidate if it's the same decl node or\n \t if it's the same type.  */\n       if (decl == candidate\n@@ -2505,7 +2505,7 @@ finish_mangling (const bool warn)\n \t     G.entity);\n \n   /* Clear all the substitutions.  */\n-  VARRAY_CLEAR (G.substitutions);\n+  VEC_truncate (tree, G.substitutions, 0);\n \n   /* Null-terminate the string.  */\n   write_char ('\\0');\n@@ -2520,7 +2520,7 @@ init_mangle (void)\n {\n   gcc_obstack_init (&name_obstack);\n   name_base = obstack_alloc (&name_obstack, 0);\n-  VARRAY_TREE_INIT (G.substitutions, 1, \"mangling substitutions\");\n+  G.substitutions = NULL;\n \n   /* Cache these identifiers for quick comparison when checking for\n      standard substitutions.  */"}]}