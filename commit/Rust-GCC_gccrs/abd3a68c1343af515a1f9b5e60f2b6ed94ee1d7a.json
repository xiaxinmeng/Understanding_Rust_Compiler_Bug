{"sha": "abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJkM2E2OGMxMzQzYWY1MTVhMWY5YjVlNjBmMmI2ZWQ5NGVlMWQ3YQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-05-24T13:34:37Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-05-24T13:34:37Z"}, "message": "tree-cfg.h (should_remove_lhs_p): New predicate.\n\n\t* tree-cfg.h (should_remove_lhs_p): New predicate.\n\t* cgraph.c (cgraph_edge::redirect_call_stmt_to_callee): Use it.\n\t* gimplify.c (gimplify_modify_expr): Likewise.\n\t* tree-cfg.c (verify_gimple_call): Likewise.\n\t* tree-cfgcleanup.c (fixup_noreturn_call): Likewise.\n\t* gimple-fold.c: Include \"tree-cfg.h\".\n\t(gimple_fold_call): Use should_remove_lhs_p.\n\nFrom-SVN: r236637", "tree": {"sha": "5012ef61f6549f21b9eb5ed7fd9978b9a7d872f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5012ef61f6549f21b9eb5ed7fd9978b9a7d872f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30fd2977745d53f282d1560212e3bea07943a937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30fd2977745d53f282d1560212e3bea07943a937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30fd2977745d53f282d1560212e3bea07943a937"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "8a1e9da14992b8c7b2d741dae0b730edc57670a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a", "patch": "@@ -1,3 +1,13 @@\n+2016-05-24  Marek Polacek  <polacek@redhat.com>\n+\n+\t* tree-cfg.h (should_remove_lhs_p): New predicate.\n+\t* cgraph.c (cgraph_edge::redirect_call_stmt_to_callee): Use it.\n+\t* gimplify.c (gimplify_modify_expr): Likewise.\n+\t* tree-cfg.c (verify_gimple_call): Likewise.\n+\t* tree-cfgcleanup.c (fixup_noreturn_call): Likewise.\n+\t* gimple-fold.c: Include \"tree-cfg.h\".\n+\t(gimple_fold_call): Use should_remove_lhs_p.\n+\n 2016-05-24  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71253"}, {"sha": "1a4f665293d4fcde6ce7f6e05b07895f0f82f8dc", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a", "patch": "@@ -1513,10 +1513,7 @@ cgraph_edge::redirect_call_stmt_to_callee (void)\n     }\n \n   /* If the call becomes noreturn, remove the LHS if possible.  */\n-  if (lhs\n-      && (gimple_call_flags (new_stmt) & ECF_NORETURN)\n-      && TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (lhs))) == INTEGER_CST\n-      && !TREE_ADDRESSABLE (TREE_TYPE (lhs)))\n+  if (gimple_call_noreturn_p (new_stmt) && should_remove_lhs_p (lhs))\n     {\n       if (TREE_CODE (lhs) == SSA_NAME)\n \t{"}, {"sha": "d6657e9079958cc0ebcda332673f7493275042ec", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a", "patch": "@@ -54,6 +54,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"optabs-query.h\"\n #include \"omp-low.h\"\n #include \"ipa-chkp.h\"\n+#include \"tree-cfg.h\"\n \n \n /* Return true when DECL can be referenced from current unit.\n@@ -3052,12 +3053,9 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n \t\t\t  == void_type_node))\n \t\t    gimple_call_set_fntype (stmt, TREE_TYPE (fndecl));\n \t\t  /* If the call becomes noreturn, remove the lhs.  */\n-\t\t  if (lhs\n-\t\t      && (gimple_call_flags (stmt) & ECF_NORETURN)\n+\t\t  if (gimple_call_noreturn_p (stmt)\n \t\t      && (VOID_TYPE_P (TREE_TYPE (gimple_call_fntype (stmt)))\n-\t\t\t  || ((TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (lhs)))\n-\t\t\t       == INTEGER_CST)\n-\t\t\t      && !TREE_ADDRESSABLE (TREE_TYPE (lhs)))))\n+\t\t\t  || should_remove_lhs_p (lhs)))\n \t\t    {\n \t\t      if (TREE_CODE (lhs) == SSA_NAME)\n \t\t\t{"}, {"sha": "e702bc4563ae14c3a415fd68cde3b952186d070d", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a", "patch": "@@ -4873,9 +4873,7 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t    }\n \t}\n       notice_special_calls (call_stmt);\n-      if (!gimple_call_noreturn_p (call_stmt)\n-\t  || TREE_ADDRESSABLE (TREE_TYPE (*to_p))\n-\t  || TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (*to_p))) != INTEGER_CST)\n+      if (!gimple_call_noreturn_p (call_stmt) || !should_remove_lhs_p (*to_p))\n \tgimple_call_set_lhs (call_stmt, *to_p);\n       else if (TREE_CODE (*to_p) == SSA_NAME)\n \t/* The above is somewhat premature, avoid ICEing later for a"}, {"sha": "82f0da6c5815e490eba18c37a90c031e0511a1b5", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a", "patch": "@@ -3385,11 +3385,9 @@ verify_gimple_call (gcall *stmt)\n       return true;\n     }\n \n-  if (lhs\n-      && gimple_call_ctrl_altering_p (stmt)\n+  if (gimple_call_ctrl_altering_p (stmt)\n       && gimple_call_noreturn_p (stmt)\n-      && TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (lhs))) == INTEGER_CST\n-      && !TREE_ADDRESSABLE (TREE_TYPE (lhs)))\n+      && should_remove_lhs_p (lhs))\n     {\n       error (\"LHS in noreturn call\");\n       return true;"}, {"sha": "3e2a1ee98da4b133a3a4391b61ad00440f618a53", "filename": "gcc/tree-cfg.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a/gcc%2Ftree-cfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a/gcc%2Ftree-cfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.h?ref=abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a", "patch": "@@ -108,4 +108,14 @@ extern bool gimple_find_sub_bbs (gimple_seq, gimple_stmt_iterator *);\n extern bool extract_true_false_controlled_edges (basic_block, basic_block,\n \t\t\t\t\t\t edge *, edge *);\n \n+/* Return true if the LHS of a call should be removed.  */\n+\n+inline bool\n+should_remove_lhs_p (tree lhs)\n+{\n+  return (lhs\n+\t  && TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (lhs))) == INTEGER_CST\n+\t  && !TREE_ADDRESSABLE (TREE_TYPE (lhs)));\n+}\n+\n #endif /* _TREE_CFG_H  */"}, {"sha": "4134c383dd999d5f6581fe2ee2263d3dba908d21", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a", "patch": "@@ -604,8 +604,7 @@ fixup_noreturn_call (gimple *stmt)\n      temporaries of variable-sized types is not supported.  Also don't\n      do this with TREE_ADDRESSABLE types, as assign_temp will abort.  */\n   tree lhs = gimple_call_lhs (stmt);\n-  if (lhs && TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (lhs))) == INTEGER_CST\n-      && !TREE_ADDRESSABLE (TREE_TYPE (lhs)))\n+  if (should_remove_lhs_p (lhs))\n     {\n       gimple_call_set_lhs (stmt, NULL_TREE);\n "}]}