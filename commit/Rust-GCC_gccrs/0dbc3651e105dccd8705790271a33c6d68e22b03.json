{"sha": "0dbc3651e105dccd8705790271a33c6d68e22b03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRiYzM2NTFlMTA1ZGNjZDg3MDU3OTAyNzFhMzNjNmQ2OGUyMmIwMw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-11-28T05:29:12Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-11-28T05:29:12Z"}, "message": "rs6000.c (altivec_init_builtins): Make the pointer argument in the prototypes of the following builtins be (const...\n\n\t* config/rs6000/rs6000.c (altivec_init_builtins): Make the\n\tpointer argument in the prototypes of the following builtins\n\tbe (const TYPE *) rather than (TYPE *):\n\t + __builtin_altivec_ld_internal_4sf\n\t + __builtin_altivec_ld_internal_4si\n\t + __builtin_altivec_ld_internal_8hi\n\t + __builtin_altivec_ld_internal_16qi\n\t + __builtin_altivec_lvsl\n\t + __builtin_altivec_lvsr\n\t + __builtin_altivec_lvebx\n\t + __builtin_altivec_lvehx\n\t + __builtin_altivec_lvewx\n\t + __builtin_altivec_lvxl\n\t + __builtin_altivec_lvx\n\t + __builtin_altivec_dst\n\t + __builtin_altivec_dstt\n\t + __builtin_altivec_dstst\n\t + __builtin_altivec_dststt\n\nFrom-SVN: r59596", "tree": {"sha": "4b53ba6aab4d4589a5ca3c4e1f4405b26cfc89e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b53ba6aab4d4589a5ca3c4e1f4405b26cfc89e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dbc3651e105dccd8705790271a33c6d68e22b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dbc3651e105dccd8705790271a33c6d68e22b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dbc3651e105dccd8705790271a33c6d68e22b03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dbc3651e105dccd8705790271a33c6d68e22b03/comments", "author": null, "committer": null, "parents": [{"sha": "d1aed877ee9f7868662f49d9a11bfee9390fd00f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1aed877ee9f7868662f49d9a11bfee9390fd00f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1aed877ee9f7868662f49d9a11bfee9390fd00f"}], "stats": {"total": 131, "additions": 85, "deletions": 46}, "files": [{"sha": "86e69328bcfe85c70d72ed0273554fee10d35f99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbc3651e105dccd8705790271a33c6d68e22b03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbc3651e105dccd8705790271a33c6d68e22b03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0dbc3651e105dccd8705790271a33c6d68e22b03", "patch": "@@ -1,3 +1,24 @@\n+2002-11-27  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* config/rs6000/rs6000.c (altivec_init_builtins): Make the\n+\tpointer argument in the prototypes of the following builtins\n+\tbe (const TYPE *) rather than (TYPE *):\n+\t + __builtin_altivec_ld_internal_4sf\n+\t + __builtin_altivec_ld_internal_4si\n+\t + __builtin_altivec_ld_internal_8hi\n+\t + __builtin_altivec_ld_internal_16qi\n+\t + __builtin_altivec_lvsl\n+\t + __builtin_altivec_lvsr\n+\t + __builtin_altivec_lvebx\n+\t + __builtin_altivec_lvehx\n+\t + __builtin_altivec_lvewx\n+\t + __builtin_altivec_lvxl\n+\t + __builtin_altivec_lvx\n+\t + __builtin_altivec_dst\n+\t + __builtin_altivec_dstt\n+\t + __builtin_altivec_dstst\n+\t + __builtin_altivec_dststt\n+\n 2002-11-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* except.c (default_exception_section): Move variable into the\n@@ -21,8 +42,8 @@\n \n 2002-11-27  Jim Wilson  <wilson@redhat.com>\n \n-        * config/rs6000/spe.md (spu_evsplatfi, spu_evsplati): Swap operands\n-        in output template.\n+\t* config/rs6000/spe.md (spu_evsplatfi, spu_evsplati): Swap operands\n+\tin output template.\n \n 2002-11-27  Casper S. Hornstrup  <chorns@users.sourceforge.net>\n \n@@ -55,11 +76,11 @@ Wed Nov 27 14:45:46 CET 2002  Jan Hubicka  <jh@suse.cz>\n \t* libgcc-std.ver (_Unwind_FindEnclosingFunction): Rename from\n \t_Unwind_Find_Enclosing_Function, export @@GCC_3.3.\n \t* unwind.h (_Unwind_FindEnclosingFunction): Add.\n-\t\n+\n 2002-11-26  Hartmut Penner  <hpenner@de.ibm.com>\n \n-\t* config/s390/s390.c (390_output_constant_pool): Set alignment \n-\tbefore label in 64 bit mode, behind otherwise.  \n+\t* config/s390/s390.c (390_output_constant_pool): Set alignment\n+\tbefore label in 64 bit mode, behind otherwise.\n \n 2002-11-26  Richard Henderson  <rth@redhat.com>\n \n@@ -91,7 +112,7 @@ Wed Nov 27 14:45:46 CET 2002  Jan Hubicka  <jh@suse.cz>\n \t* langhooks-def.h: Update for renames.\n \t* target-def.h: Likewise.\n \t* tree.c (default_comp_type_attributes,\n-\tdefault_set_default_type_attributes, default_insert_attributes, \n+\tdefault_set_default_type_attributes, default_insert_attributes,\n \tdefault_function_attribute_inlinable_p,\n \tdefault_ms_bitfield_layout_p): Remove.\n \t* tree.h: Update.\n@@ -137,7 +158,7 @@ Wed Nov 27 14:45:46 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* config/rs6000/rs6000.h (RS6000_CPU_CPP_ENDIAN_BUILTINS): New.\n \t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Use\n-\tRS6000_CPU_CPP_ENDIAN_BUILTINS.         \n+\tRS6000_CPU_CPP_ENDIAN_BUILTINS.\n \t* config/rs6000/netbsd.h (RS6000_CPU_CPP_ENDIAN_BUILTINS): Redefine.\n \n 2002-11-26  Hartmut Penner  <hpenner@de.ibm.com>\n@@ -153,9 +174,9 @@ Wed Nov 27 14:45:46 CET 2002  Jan Hubicka  <jh@suse.cz>\n \t(s390_emit_prologue, s390_emit_epilogue): Likewise.\n \t(s390_init_machine_status): New function.\n \t(override_options): call s390_init_machine_status.\n-\t* config/s390/s390-protos.h (s390_output_constant_pool): Changed \n+\t* config/s390/s390-protos.h (s390_output_constant_pool): Changed\n \tprototype.\n-\t\n+\n 2002-11-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* varasm.c (output_constant_pool): For pool constants in mergeable\n@@ -309,7 +330,7 @@ Wed Nov 27 14:45:46 CET 2002  Jan Hubicka  <jh@suse.cz>\n 2002-11-24  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config/alpha/netbsd.h (CPP_SUBTARGET_SPEC): Just use\n-\tNETBSD_CPP_SPEC directly. \n+\tNETBSD_CPP_SPEC directly.\n \t(SUBTARGET_EXTRA_SPECS): Remove netbsd_cpp_spec.  Add\n \tnetbsd_endfile_spec.\n \t(ENDFILE_SPEC): Use %(netbsd_endfile_spec).\n@@ -384,7 +405,7 @@ Thu Nov 21 23:52:04 CET 2002  Jan Hubicka  <jH@suse.cz>\n \n \t* i386-protos.h (x86_64_sign_extended_value): Fix prototype.\n \t* i386.c (x86_64_general_operand, x86_64_szext_general_operand,\n-\tx86_64_nonmemory_operand, x86_64_movabs_operand, \n+\tx86_64_nonmemory_operand, x86_64_movabs_operand,\n \tx86_64_szext_nonmemory_operand, x86_64_immediate_operand,\n \tix86_expand_int_movcc): Update call of x86_64_sign_extended_value.\n \t(local_symbolic_operand): Do not care the 64bit limits.\n@@ -442,8 +463,8 @@ Thu Nov 21 23:52:04 CET 2002  Jan Hubicka  <jH@suse.cz>\n \n \t* config/s390/libgcc-libc.ver: Add multilib support.\n \t* config/s390/linux.h (MULTILIB_DEFAULT): Define.\n-\t* config/s390/t-linux64 (MULTILIB_OPTIONS, MULTILIB_DIRNAMES, \n-\tMULTILIB_OSDIRNAMES, LIBGCC, INSTALL_LIBGCC, \n+\t* config/s390/t-linux64 (MULTILIB_OPTIONS, MULTILIB_DIRNAMES,\n+\tMULTILIB_OSDIRNAMES, LIBGCC, INSTALL_LIBGCC,\n \tEXTRA_MULTILIB_PARTS): Define.\n \n 2002-11-21  Richard Earnshaw  <rearnsha@arm.com>"}, {"sha": "5c0ef2f6f305ca0f6f794a05137a91051ae5b3a1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 51, "deletions": 33, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbc3651e105dccd8705790271a33c6d68e22b03/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbc3651e105dccd8705790271a33c6d68e22b03/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0dbc3651e105dccd8705790271a33c6d68e22b03", "patch": "@@ -5445,26 +5445,34 @@ altivec_init_builtins ()\n \n   tree pvoid_type_node = build_pointer_type (void_type_node);\n \n+  tree pcfloat_type_node = build_pointer_type (build_qualified_type (float_type_node, TYPE_QUAL_CONST));\n+  tree pcint_type_node = build_pointer_type (build_qualified_type (integer_type_node, TYPE_QUAL_CONST));\n+  tree pcshort_type_node = build_pointer_type (build_qualified_type (short_integer_type_node, TYPE_QUAL_CONST));\n+  tree pcchar_type_node = build_pointer_type (build_qualified_type (char_type_node, TYPE_QUAL_CONST));\n+\n+  tree pcvoid_type_node = build_pointer_type (build_qualified_type (void_type_node, TYPE_QUAL_CONST));\n+\n   tree int_ftype_int_v4si_v4si\n     = build_function_type_list (integer_type_node,\n \t\t\t\tinteger_type_node, V4SI_type_node,\n \t\t\t\tV4SI_type_node, NULL_TREE);\n-  tree v4sf_ftype_pfloat\n-    = build_function_type_list (V4SF_type_node, pfloat_type_node, NULL_TREE);\n+  tree v4sf_ftype_pcfloat\n+    = build_function_type_list (V4SF_type_node, pcfloat_type_node, NULL_TREE);\n   tree void_ftype_pfloat_v4sf\n     = build_function_type_list (void_type_node,\n \t\t\t\tpfloat_type_node, V4SF_type_node, NULL_TREE);\n-  tree v4si_ftype_pint\n-    = build_function_type_list (V4SI_type_node, pint_type_node, NULL_TREE);  tree void_ftype_pint_v4si\n+  tree v4si_ftype_pcint\n+    = build_function_type_list (V4SI_type_node, pcint_type_node, NULL_TREE);\n+  tree void_ftype_pint_v4si\n     = build_function_type_list (void_type_node,\n \t\t\t\tpint_type_node, V4SI_type_node, NULL_TREE);\n-  tree v8hi_ftype_pshort\n-    = build_function_type_list (V8HI_type_node, pshort_type_node, NULL_TREE);\n+  tree v8hi_ftype_pcshort\n+    = build_function_type_list (V8HI_type_node, pcshort_type_node, NULL_TREE);\n   tree void_ftype_pshort_v8hi\n     = build_function_type_list (void_type_node,\n \t\t\t\tpshort_type_node, V8HI_type_node, NULL_TREE);\n-  tree v16qi_ftype_pchar\n-    = build_function_type_list (V16QI_type_node, pchar_type_node, NULL_TREE);\n+  tree v16qi_ftype_pcchar\n+    = build_function_type_list (V16QI_type_node, pcchar_type_node, NULL_TREE);\n   tree void_ftype_pchar_v16qi\n     = build_function_type_list (void_type_node,\n \t\t\t\tpchar_type_node, V16QI_type_node, NULL_TREE);\n@@ -5476,15 +5484,17 @@ altivec_init_builtins ()\n     = build_function_type (void_type_node, void_list_node);\n   tree void_ftype_qi\n     = build_function_type_list (void_type_node, char_type_node, NULL_TREE);\n-  tree v16qi_ftype_int_pvoid\n+\n+  tree v16qi_ftype_int_pcvoid\n     = build_function_type_list (V16QI_type_node,\n-\t\t\t\tinteger_type_node, pvoid_type_node, NULL_TREE);\n-  tree v8hi_ftype_int_pvoid\n+\t\t\t\tinteger_type_node, pcvoid_type_node, NULL_TREE);\n+  tree v8hi_ftype_int_pcvoid\n     = build_function_type_list (V8HI_type_node,\n-\t\t\t\tinteger_type_node, pvoid_type_node, NULL_TREE);\n-  tree v4si_ftype_int_pvoid\n+\t\t\t\tinteger_type_node, pcvoid_type_node, NULL_TREE);\n+  tree v4si_ftype_int_pcvoid\n     = build_function_type_list (V4SI_type_node,\n-\t\t\t\tinteger_type_node, pvoid_type_node, NULL_TREE);\n+\t\t\t\tinteger_type_node, pcvoid_type_node, NULL_TREE);\n+\n   tree void_ftype_v4si_int_pvoid\n     = build_function_type_list (void_type_node,\n \t\t\t\tV4SI_type_node, integer_type_node,\n@@ -5517,30 +5527,38 @@ altivec_init_builtins ()\n     = build_function_type_list (V16QI_type_node, V16QI_type_node, NULL_TREE);\n   tree v4sf_ftype_v4sf\n     = build_function_type_list (V4SF_type_node, V4SF_type_node, NULL_TREE);\n-  tree void_ftype_pvoid_int_char\n+  tree void_ftype_pcvoid_int_char\n     = build_function_type_list (void_type_node,\n-\t\t\t\tpvoid_type_node, integer_type_node,\n+\t\t\t\tpcvoid_type_node, integer_type_node,\n \t\t\t\tchar_type_node, NULL_TREE);\n-\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_4sf\", v4sf_ftype_pfloat, ALTIVEC_BUILTIN_LD_INTERNAL_4sf);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_4sf\", void_ftype_pfloat_v4sf, ALTIVEC_BUILTIN_ST_INTERNAL_4sf);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_4si\", v4si_ftype_pint, ALTIVEC_BUILTIN_LD_INTERNAL_4si);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_4si\", void_ftype_pint_v4si, ALTIVEC_BUILTIN_ST_INTERNAL_4si);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_8hi\", v8hi_ftype_pshort, ALTIVEC_BUILTIN_LD_INTERNAL_8hi);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_8hi\", void_ftype_pshort_v8hi, ALTIVEC_BUILTIN_ST_INTERNAL_8hi);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_16qi\", v16qi_ftype_pchar, ALTIVEC_BUILTIN_LD_INTERNAL_16qi);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_16qi\", void_ftype_pchar_v16qi, ALTIVEC_BUILTIN_ST_INTERNAL_16qi);\n+  \n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_4sf\", v4sf_ftype_pcfloat,\n+\t       ALTIVEC_BUILTIN_LD_INTERNAL_4sf);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_4sf\", void_ftype_pfloat_v4sf,\n+\t       ALTIVEC_BUILTIN_ST_INTERNAL_4sf);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_4si\", v4si_ftype_pcint,\n+\t       ALTIVEC_BUILTIN_LD_INTERNAL_4si);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_4si\", void_ftype_pint_v4si,\n+\t       ALTIVEC_BUILTIN_ST_INTERNAL_4si);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_8hi\", v8hi_ftype_pcshort,\n+\t       ALTIVEC_BUILTIN_LD_INTERNAL_8hi);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_8hi\", void_ftype_pshort_v8hi,\n+\t       ALTIVEC_BUILTIN_ST_INTERNAL_8hi);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_16qi\", v16qi_ftype_pcchar,\n+\t       ALTIVEC_BUILTIN_LD_INTERNAL_16qi);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_16qi\", void_ftype_pchar_v16qi,\n+\t       ALTIVEC_BUILTIN_ST_INTERNAL_16qi);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_mtvscr\", void_ftype_v4si, ALTIVEC_BUILTIN_MTVSCR);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_mfvscr\", v8hi_ftype_void, ALTIVEC_BUILTIN_MFVSCR);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_dssall\", void_ftype_void, ALTIVEC_BUILTIN_DSSALL);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_dss\", void_ftype_qi, ALTIVEC_BUILTIN_DSS);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvsl\", v16qi_ftype_int_pvoid, ALTIVEC_BUILTIN_LVSL);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvsr\", v16qi_ftype_int_pvoid, ALTIVEC_BUILTIN_LVSR);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvebx\", v16qi_ftype_int_pvoid, ALTIVEC_BUILTIN_LVEBX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvehx\", v8hi_ftype_int_pvoid, ALTIVEC_BUILTIN_LVEHX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvewx\", v4si_ftype_int_pvoid, ALTIVEC_BUILTIN_LVEWX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvxl\", v4si_ftype_int_pvoid, ALTIVEC_BUILTIN_LVXL);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvx\", v4si_ftype_int_pvoid, ALTIVEC_BUILTIN_LVX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvsl\", v16qi_ftype_int_pcvoid, ALTIVEC_BUILTIN_LVSL);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvsr\", v16qi_ftype_int_pcvoid, ALTIVEC_BUILTIN_LVSR);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvebx\", v16qi_ftype_int_pcvoid, ALTIVEC_BUILTIN_LVEBX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvehx\", v8hi_ftype_int_pcvoid, ALTIVEC_BUILTIN_LVEHX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvewx\", v4si_ftype_int_pcvoid, ALTIVEC_BUILTIN_LVEWX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvxl\", v4si_ftype_int_pcvoid, ALTIVEC_BUILTIN_LVXL);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvx\", v4si_ftype_int_pcvoid, ALTIVEC_BUILTIN_LVX);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvx\", void_ftype_v4si_int_pvoid, ALTIVEC_BUILTIN_STVX);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvewx\", void_ftype_v4si_int_pvoid, ALTIVEC_BUILTIN_STVEWX);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvxl\", void_ftype_v4si_int_pvoid, ALTIVEC_BUILTIN_STVXL);\n@@ -5550,7 +5568,7 @@ altivec_init_builtins ()\n   /* Add the DST variants.  */\n   d = (struct builtin_description *) bdesc_dst;\n   for (i = 0; i < ARRAY_SIZE (bdesc_dst); i++, d++)\n-    def_builtin (d->mask, d->name, void_ftype_pvoid_int_char, d->code);\n+    def_builtin (d->mask, d->name, void_ftype_pcvoid_int_char, d->code);\n \n   /* Initialize the predicates.  */\n   dp = (struct builtin_description_predicates *) bdesc_altivec_preds;"}]}