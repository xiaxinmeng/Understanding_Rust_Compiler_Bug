{"sha": "e02965831e0ec57a216cc64e38ebcdb10bc1e77f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAyOTY1ODMxZTBlYzU3YTIxNmNjNjRlMzhlYmNkYjEwYmMxZTc3Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T13:27:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T13:27:37Z"}, "message": "[multiple changes]\n\n2011-08-29  Yannick Moy  <moy@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Allow Test_Case pragma without\n\tRequires/Ensures.\n\t* sem_util.adb (Get_Ensures_From_Test_Case_Pragma,\n\tGet_Requires_From_Test_Case_Pragma): Allow Test_Case pragma without\n\tRequires/Ensures.\n\n2011-08-29  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat1drv.adb (Adjust_Global_Switches): Improve previous change.\n\tAdd comment.\n\n2011-08-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_res.adb: Minor reformatting.\n\nFrom-SVN: r178224", "tree": {"sha": "5b43babbc2f203ca0fd5adddf4678813af119c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b43babbc2f203ca0fd5adddf4678813af119c38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e02965831e0ec57a216cc64e38ebcdb10bc1e77f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02965831e0ec57a216cc64e38ebcdb10bc1e77f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e02965831e0ec57a216cc64e38ebcdb10bc1e77f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02965831e0ec57a216cc64e38ebcdb10bc1e77f/comments", "author": null, "committer": null, "parents": [{"sha": "69794413ec2445eac7298bd4784fbd1cb34efe9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69794413ec2445eac7298bd4784fbd1cb34efe9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69794413ec2445eac7298bd4784fbd1cb34efe9e"}], "stats": {"total": 81, "additions": 52, "deletions": 29}, "files": [{"sha": "d99c28ab75ef5dc0626830d4858a4b8f1c59d20b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02965831e0ec57a216cc64e38ebcdb10bc1e77f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02965831e0ec57a216cc64e38ebcdb10bc1e77f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e02965831e0ec57a216cc64e38ebcdb10bc1e77f", "patch": "@@ -1,3 +1,20 @@\n+2011-08-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Allow Test_Case pragma without\n+\tRequires/Ensures.\n+\t* sem_util.adb (Get_Ensures_From_Test_Case_Pragma,\n+\tGet_Requires_From_Test_Case_Pragma): Allow Test_Case pragma without\n+\tRequires/Ensures.\n+\n+2011-08-29  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Improve previous change.\n+\tAdd comment.\n+\n+2011-08-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_res.adb: Minor reformatting.\n+\n 2011-08-29  Johannes Kanig  <kanig@adacore.com>\n \n \t* exp_ch4.adb (Expand_Quantified_Expression): Do not expand in ALFA"}, {"sha": "6c1292e7b7030fbfb1ad155e8ed2d5b7242965ea", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02965831e0ec57a216cc64e38ebcdb10bc1e77f/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02965831e0ec57a216cc64e38ebcdb10bc1e77f/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=e02965831e0ec57a216cc64e38ebcdb10bc1e77f", "patch": "@@ -351,10 +351,9 @@ procedure Gnat1drv is\n       if Debug_Flag_Dot_XX then\n          Use_Expression_With_Actions := True;\n \n-      --  Debug flag -gnatd.Y and -gnatd.F (Alfa Mode) decisively set usage\n-      --  off\n+      --  Debug flag -gnatd.Y decisively set usage off\n \n-      elsif Debug_Flag_Dot_YY or Debug_Flag_Dot_FF then\n+      elsif Debug_Flag_Dot_YY then\n          Use_Expression_With_Actions := False;\n \n       --  Otherwise this feature is implemented, so we allow its use\n@@ -445,6 +444,17 @@ procedure Gnat1drv is\n \n          Debug_Flag_HH := True;\n \n+         --  Disable Expressions_With_Actions nodes\n+         --  The gnat2why backend does not deal with Expressions_With_Actions\n+         --  in all places (in particular assertions). It is difficult to\n+         --  determine in the frontend which cases are allowed, so we disable\n+         --  Expressions_With_Actions entirely. Even in the cases where\n+         --  gnat2why deals with Expressions_With_Actions, it is easier to\n+         --  deal with the original constructs (quantified, conditional and\n+         --  case expressions) instead of the rewritten ones.\n+\n+         Use_Expression_With_Actions := False;\n+\n          --  Enable assertions and debug pragmas, since they give valuable\n          --  extra information for formal verification.\n "}, {"sha": "081d9aeffef2b403655d309f1ee693c2ce711297", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02965831e0ec57a216cc64e38ebcdb10bc1e77f/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02965831e0ec57a216cc64e38ebcdb10bc1e77f/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=e02965831e0ec57a216cc64e38ebcdb10bc1e77f", "patch": "@@ -13313,7 +13313,7 @@ package body Sem_Prag is\n          when Pragma_Test_Case => Test_Case : declare\n          begin\n             GNAT_Pragma;\n-            Check_At_Least_N_Arguments (3);\n+            Check_At_Least_N_Arguments (2);\n             Check_At_Most_N_Arguments (4);\n             Check_Arg_Order\n                  ((Name_Name, Name_Mode, Name_Requires, Name_Ensures));\n@@ -13326,7 +13326,7 @@ package body Sem_Prag is\n             if Arg_Count = 4 then\n                Check_Identifier (Arg3, Name_Requires);\n                Check_Identifier (Arg4, Name_Ensures);\n-            else\n+            elsif Arg_Count = 3 then\n                Check_Identifier_Is_One_Of (Arg3, Name_Requires, Name_Ensures);\n             end if;\n "}, {"sha": "ab57f46f7e8f13919af54394e55b7852de2db646", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02965831e0ec57a216cc64e38ebcdb10bc1e77f/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02965831e0ec57a216cc64e38ebcdb10bc1e77f/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=e02965831e0ec57a216cc64e38ebcdb10bc1e77f", "patch": "@@ -1685,6 +1685,7 @@ package body Sem_Res is\n       Tsk : Node_Id := Empty;\n \n       function Process_Discr (Nod : Node_Id) return Traverse_Result;\n+      --  Comment needed???\n \n       -------------------\n       -- Process_Discr --\n@@ -1793,9 +1794,8 @@ package body Sem_Res is\n            Make_Explicit_Dereference (Loc,\n              Prefix =>\n                Make_Selected_Component (Loc,\n-                 Prefix => Relocate_Node (Expr),\n-                 Selector_Name =>\n-               New_Occurrence_Of (Disc, Loc))));\n+                 Prefix        => Relocate_Node (Expr),\n+                 Selector_Name => New_Occurrence_Of (Disc, Loc))));\n \n          Set_Etype (Prefix (Expr), Etype (Disc));\n          Set_Etype (Expr, Typ);\n@@ -1819,26 +1819,22 @@ package body Sem_Res is\n \n       procedure Patch_Up_Value (N : Node_Id; Typ : Entity_Id) is\n       begin\n-         if Nkind (N) = N_Integer_Literal\n-           and then Is_Real_Type (Typ)\n-         then\n+         if Nkind (N) = N_Integer_Literal and then Is_Real_Type (Typ) then\n             Rewrite (N,\n               Make_Real_Literal (Sloc (N),\n                 Realval => UR_From_Uint (Intval (N))));\n             Set_Etype (N, Universal_Real);\n             Set_Is_Static_Expression (N);\n \n-         elsif Nkind (N) = N_Real_Literal\n-           and then Is_Integer_Type (Typ)\n-         then\n+         elsif Nkind (N) = N_Real_Literal and then Is_Integer_Type (Typ) then\n             Rewrite (N,\n               Make_Integer_Literal (Sloc (N),\n                 Intval => UR_To_Uint (Realval (N))));\n             Set_Etype (N, Universal_Integer);\n             Set_Is_Static_Expression (N);\n \n          elsif Nkind (N) = N_String_Literal\n-           and then Is_Character_Type (Typ)\n+                 and then Is_Character_Type (Typ)\n          then\n             Set_Character_Literal_Name (Char_Code (Character'Pos ('A')));\n             Rewrite (N,\n@@ -1849,15 +1845,13 @@ package body Sem_Res is\n             Set_Etype (N, Any_Character);\n             Set_Is_Static_Expression (N);\n \n-         elsif Nkind (N) /= N_String_Literal\n-           and then Is_String_Type (Typ)\n-         then\n+         elsif Nkind (N) /= N_String_Literal and then Is_String_Type (Typ) then\n             Rewrite (N,\n               Make_String_Literal (Sloc (N),\n                 Strval => End_String));\n \n          elsif Nkind (N) = N_Range then\n-            Patch_Up_Value (Low_Bound (N), Typ);\n+            Patch_Up_Value (Low_Bound (N),  Typ);\n             Patch_Up_Value (High_Bound (N), Typ);\n          end if;\n       end Patch_Up_Value;\n@@ -1878,7 +1872,7 @@ package body Sem_Res is\n          then\n             Error_Msg_NE (\"ambiguous call to&\", Arg, Name (Arg));\n \n-            --  Could use comments on what is going on here ???\n+            --  Could use comments on what is going on here???\n \n             Get_First_Interp (Name (Arg), I, It);\n             while Present (It.Nam) loop\n@@ -1926,8 +1920,8 @@ package body Sem_Res is\n          return;\n       end if;\n \n-      --  Access attribute on remote subprogram cannot be used for\n-      --  a non-remote access-to-subprogram type.\n+      --  Access attribute on remote subprogram cannot be used for a non-remote\n+      --  access-to-subprogram type.\n \n       if Nkind (N) = N_Attribute_Reference\n         and then (Attribute_Name (N) = Name_Access              or else\n@@ -8095,7 +8089,7 @@ package body Sem_Res is\n       else\n \n          --  In ALFA_Mode, no such magic needs to happen, we just resolve the\n-         --  underlying nodes\n+         --  underlying nodes.\n \n          Resolve (Condition (N), Typ);\n       end if;"}, {"sha": "86c57267b65dcf165e09677b7a20386dbca5d377", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02965831e0ec57a216cc64e38ebcdb10bc1e77f/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02965831e0ec57a216cc64e38ebcdb10bc1e77f/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=e02965831e0ec57a216cc64e38ebcdb10bc1e77f", "patch": "@@ -4274,13 +4274,13 @@ package body Sem_Util is\n \n    function Get_Ensures_From_Test_Case_Pragma (N : Node_Id) return Node_Id is\n       Args : constant List_Id := Pragma_Argument_Associations (N);\n-      Res  : Node_Id;\n+      Res  : Node_Id := Empty;\n \n    begin\n       if List_Length (Args) = 4 then\n          Res := Pick (Args, 4);\n \n-      else\n+      elsif List_Length (Args) = 3 then\n          Res := Pick (Args, 3);\n          if Chars (Res) /= Name_Ensures then\n             Res := Empty;\n@@ -4436,12 +4436,14 @@ package body Sem_Util is\n \n    function Get_Requires_From_Test_Case_Pragma (N : Node_Id) return Node_Id is\n       Args : constant List_Id := Pragma_Argument_Associations (N);\n-      Res  : Node_Id;\n+      Res  : Node_Id := Empty;\n \n    begin\n-      Res := Pick (Args, 3);\n-      if Chars (Res) /= Name_Requires then\n-         Res := Empty;\n+      if List_Length (Args) >= 3 then\n+         Res := Pick (Args, 3);\n+         if Chars (Res) /= Name_Requires then\n+            Res := Empty;\n+         end if;\n       end if;\n \n       return Res;"}]}