{"sha": "b9873b4e2c9a9955789318f4d550147ef9405b07", "node_id": "C_kwDOANBUbNoAKGI5ODczYjRlMmM5YTk5NTU3ODkzMThmNGQ1NTAxNDdlZjk0MDViMDc", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-09-19T11:35:46Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-11-19T19:53:39Z"}, "message": "libgcc, emutls: Allow building weak definitions of the emutls functions.\n\nIn order to better support use of the emulated TLS between objects with\nDSO dependencies and static-linked libgcc, allow a target to make weak\ndefinitions.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\nlibgcc/ChangeLog:\n\n\t* config/t-darwin: Build weak-defined emutls objects.\n\t* emutls.c (__emutls_get_address): Add optional attributes.\n\t(__emutls_register_common): Likewise.\n\t(EMUTLS_ATTR): New.", "tree": {"sha": "ce8181c811d3611cb8161a971846345fc87053b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce8181c811d3611cb8161a971846345fc87053b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9873b4e2c9a9955789318f4d550147ef9405b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9873b4e2c9a9955789318f4d550147ef9405b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9873b4e2c9a9955789318f4d550147ef9405b07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9873b4e2c9a9955789318f4d550147ef9405b07/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7b782d847d8682af9d5d91c0614a880cc2436f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b782d847d8682af9d5d91c0614a880cc2436f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b782d847d8682af9d5d91c0614a880cc2436f1"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "d6f688d66d528c28967ba1132eb719d6dc9d27d3", "filename": "libgcc/config/t-darwin", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9873b4e2c9a9955789318f4d550147ef9405b07/libgcc%2Fconfig%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9873b4e2c9a9955789318f4d550147ef9405b07/libgcc%2Fconfig%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-darwin?ref=b9873b4e2c9a9955789318f4d550147ef9405b07", "patch": "@@ -15,6 +15,19 @@ crttme.o: $(srcdir)/config/darwin-crt-tm.c\n LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/config/unwind-dw2-fde-darwin.c \\\n   $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c\n \n+# Make emutls weak so that we can deal with -static-libgcc, override the\n+#\u00a0hidden visibility when this is present in libgcc_eh.\n+emutls.o: HOST_LIBGCC2_CFLAGS += \\\n+  -DEMUTLS_ATTR='__attribute__((__weak__,__visibility__(\"default\")))'\n+emutls_s.o: HOST_LIBGCC2_CFLAGS += \\\n+  -DEMUTLS_ATTR='__attribute__((__weak__,__visibility__(\"default\")))'\n+\n+# Make the emutls crt as a convenience lib so that it can be linked\n+#\u00a0optionally, use the shared version so that we can link with DSO.\n+libemutls_w.a: emutls_s.o\n+\t$(AR_CREATE_FOR_TARGET) $@ $<\n+\t$(RANLIB_FOR_TARGET) $@\n+\n # Patch to __Unwind_Find_Enclosing_Function for Darwin10.\n d10-uwfef.o: $(srcdir)/config/darwin10-unwind-find-enc-func.c\n \t$(crt_compile) -mmacosx-version-min=10.6 -c $<"}, {"sha": "d553a74728f81175853f5c66a162e892ae79c3ff", "filename": "libgcc/emutls.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9873b4e2c9a9955789318f4d550147ef9405b07/libgcc%2Femutls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9873b4e2c9a9955789318f4d550147ef9405b07/libgcc%2Femutls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Femutls.c?ref=b9873b4e2c9a9955789318f4d550147ef9405b07", "patch": "@@ -50,7 +50,16 @@ struct __emutls_array\n   void **data[];\n };\n \n+/* EMUTLS_ATTR is provided to allow targets to build the emulated tls\n+   routines as weak definitions, for example.\n+   If there is no definition, fall back to the default.  */\n+#ifndef EMUTLS_ATTR\n+#  define EMUTLS_ATTR\n+#endif\n+\n+EMUTLS_ATTR\n void *__emutls_get_address (struct __emutls_object *);\n+EMUTLS_ATTR\n void __emutls_register_common (struct __emutls_object *, word, word, void *);\n \n #ifdef __GTHREADS\n@@ -123,7 +132,11 @@ emutls_alloc (struct __emutls_object *obj)\n   return ret;\n }\n \n-void *\n+/* Despite applying the attribute to the declaration, in this case the mis-\n+   match between the builtin's declaration [void * (*)(void *)] and the\n+   implementation here, causes the decl. attributes to be discarded.  */\n+\n+EMUTLS_ATTR void *\n __emutls_get_address (struct __emutls_object *obj)\n {\n   if (! __gthread_active_p ())\n@@ -187,7 +200,7 @@ __emutls_get_address (struct __emutls_object *obj)\n #endif\n }\n \n-void\n+EMUTLS_ATTR void\n __emutls_register_common (struct __emutls_object *obj,\n \t\t\t  word size, word align, void *templ)\n {"}]}