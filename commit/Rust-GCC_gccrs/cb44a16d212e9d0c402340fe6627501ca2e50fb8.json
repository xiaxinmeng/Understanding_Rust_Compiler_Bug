{"sha": "cb44a16d212e9d0c402340fe6627501ca2e50fb8", "node_id": "C_kwDOANBUbNoAKGNiNDRhMTZkMjEyZTlkMGM0MDIzNDBmZTY2Mjc1MDFjYTJlNTBmYjg", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-08T02:30:24Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T06:44:37Z"}, "message": "RISC-V: Add vadc/vsbc C/C++ API support\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-protos.h (simm5_p): Add vadc/vsbc support.\n\t* config/riscv/riscv-v.cc (simm32_p): Ditto.\n\t* config/riscv/riscv-vector-builtins-bases.cc (class vadc): New class.\n\t(class vsbc): Ditto.\n\t(BASE): Ditto.\n\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n\t* config/riscv/riscv-vector-builtins-functions.def (vadc): Ditto.\n\t(vsbc): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.cc\n\t(struct no_mask_policy_def): Ditto.\n\t(SHAPE): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.h: Ditto.\n\t* config/riscv/riscv-vector-builtins.cc\n\t(rvv_arg_type_info::get_base_vector_type): Add vadc/vsbc support.\n\t(rvv_arg_type_info::get_tree_type): Ditto.\n\t(function_expander::use_exact_insn): Ditto.\n\t* config/riscv/riscv-vector-builtins.h (enum rvv_base_type): Ditto.\n\t(function_base::use_mask_predication_p): New function.\n\t* config/riscv/vector-iterators.md: New iterator.\n\t* config/riscv/vector.md (@pred_adc<mode>): New pattern.\n\t(@pred_sbc<mode>): Ditto.\n\t(@pred_adc<mode>_scalar): Ditto.\n\t(@pred_sbc<mode>_scalar): Ditto.\n\t(*pred_adc<mode>_scalar): Ditto.\n\t(*pred_adc<mode>_extended_scalar): Ditto.\n\t(*pred_sbc<mode>_scalar): Ditto.\n\t(*pred_sbc<mode>_extended_scalar): Ditto.", "tree": {"sha": "95150dfa81f60ad26d09bbf3b369cd59aca9aeb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95150dfa81f60ad26d09bbf3b369cd59aca9aeb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb44a16d212e9d0c402340fe6627501ca2e50fb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb44a16d212e9d0c402340fe6627501ca2e50fb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb44a16d212e9d0c402340fe6627501ca2e50fb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb44a16d212e9d0c402340fe6627501ca2e50fb8/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e620b36cd34b85b0e28c34160245d84bc5acd68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e620b36cd34b85b0e28c34160245d84bc5acd68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e620b36cd34b85b0e28c34160245d84bc5acd68"}], "stats": {"total": 436, "additions": 429, "deletions": 7}, "files": [{"sha": "a4476e6235f4495f4218ae6b99b28d9080c408ab", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=cb44a16d212e9d0c402340fe6627501ca2e50fb8", "patch": "@@ -175,6 +175,7 @@ enum mask_policy get_prefer_mask_policy ();\n rtx get_avl_type_rtx (enum avl_type);\n opt_machine_mode get_vector_mode (scalar_mode, poly_uint64);\n extern bool simm32_p (rtx);\n+extern bool simm5_p (rtx);\n extern bool neg_simm5_p (rtx);\n #ifdef RTX_CODE\n extern bool has_vi_variant_p (rtx_code, rtx);"}, {"sha": "83cb1f8360643bf9dc7ac1cc76a678cdbcc22e52", "filename": "gcc/config/riscv/riscv-v.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-v.cc?ref=cb44a16d212e9d0c402340fe6627501ca2e50fb8", "patch": "@@ -408,7 +408,7 @@ simm32_p (rtx x)\n   return val <= 0x7FFFFFFFULL || val >= 0xFFFFFFFF80000000ULL;\n }\n \n-static bool\n+bool\n simm5_p (rtx x)\n {\n   if (!CONST_INT_P (x))"}, {"sha": "8bf5bb97ca1e9b72c580974809ffec950166893f", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=cb44a16d212e9d0c402340fe6627501ca2e50fb8", "patch": "@@ -296,6 +296,48 @@ class vwcvt : public function_base\n   }\n };\n \n+/* Implements vadc.  */\n+class vadc : public function_base\n+{\n+public:\n+  bool apply_mask_policy_p () const override { return false; }\n+  bool use_mask_predication_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    switch (e.op_info->op)\n+      {\n+      case OP_TYPE_vvm:\n+\treturn e.use_exact_insn (code_for_pred_adc (e.vector_mode ()));\n+      case OP_TYPE_vxm:\n+\treturn e.use_exact_insn (code_for_pred_adc_scalar (e.vector_mode ()));\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  }\n+};\n+\n+/* Implements vsbc.  */\n+class vsbc : public function_base\n+{\n+public:\n+  bool apply_mask_policy_p () const override { return false; }\n+  bool use_mask_predication_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    switch (e.op_info->op)\n+      {\n+      case OP_TYPE_vvm:\n+\treturn e.use_exact_insn (code_for_pred_sbc (e.vector_mode ()));\n+      case OP_TYPE_vxm:\n+\treturn e.use_exact_insn (code_for_pred_sbc_scalar (e.vector_mode ()));\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  }\n+};\n+\n static CONSTEXPR const vsetvl<false> vsetvl_obj;\n static CONSTEXPR const vsetvl<true> vsetvlmax_obj;\n static CONSTEXPR const loadstore<false, LST_UNIT_STRIDE, false> vle_obj;\n@@ -354,6 +396,8 @@ static CONSTEXPR const widen_binop<MULT, ZERO_EXTEND>vwmulu_obj;\n static CONSTEXPR const vwmulsu vwmulsu_obj;\n static CONSTEXPR const vwcvt<SIGN_EXTEND> vwcvt_x_obj;\n static CONSTEXPR const vwcvt<ZERO_EXTEND> vwcvtu_x_obj;\n+static CONSTEXPR const vadc vadc_obj;\n+static CONSTEXPR const vsbc vsbc_obj;\n static CONSTEXPR const binop<SS_PLUS> vsadd_obj;\n static CONSTEXPR const binop<SS_MINUS> vssub_obj;\n static CONSTEXPR const binop<US_PLUS> vsaddu_obj;\n@@ -422,6 +466,8 @@ BASE (vwmulu)\n BASE (vwmulsu)\n BASE (vwcvt_x)\n BASE (vwcvtu_x)\n+BASE (vadc)\n+BASE (vsbc)\n BASE (vsadd)\n BASE (vssub)\n BASE (vsaddu)"}, {"sha": "729c069c1eb5a6a7f900d62a70f6ad179b39966e", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=cb44a16d212e9d0c402340fe6627501ca2e50fb8", "patch": "@@ -82,6 +82,8 @@ extern const function_base *const vwmulu;\n extern const function_base *const vwmulsu;\n extern const function_base *const vwcvt_x;\n extern const function_base *const vwcvtu_x;\n+extern const function_base *const vadc;\n+extern const function_base *const vsbc;\n extern const function_base *const vsadd;\n extern const function_base *const vssub;\n extern const function_base *const vsaddu;"}, {"sha": "3d8db35683b1b8177bcbff8a4abf6aab2d042116", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=cb44a16d212e9d0c402340fe6627501ca2e50fb8", "patch": "@@ -136,6 +136,10 @@ DEF_RVV_FUNCTION (vwaddu, widen_alu, full_preds, u_wwx_ops)\n DEF_RVV_FUNCTION (vwsubu, widen_alu, full_preds, u_wwx_ops)\n DEF_RVV_FUNCTION (vwcvt_x, alu, full_preds, i_x_x_v_ops)\n DEF_RVV_FUNCTION (vwcvtu_x, alu, full_preds, u_x_x_v_ops)\n+DEF_RVV_FUNCTION (vadc, no_mask_policy, tu_preds, iu_vvvm_ops)\n+DEF_RVV_FUNCTION (vsbc, no_mask_policy, tu_preds, iu_vvvm_ops)\n+DEF_RVV_FUNCTION (vadc, no_mask_policy, tu_preds, iu_vvxm_ops)\n+DEF_RVV_FUNCTION (vsbc, no_mask_policy, tu_preds, iu_vvxm_ops)\n /* 12. Vector Fixed-Point Arithmetic Instructions. */\n DEF_RVV_FUNCTION (vsadd, alu, full_preds, i_vvv_ops)\n DEF_RVV_FUNCTION (vssub, alu, full_preds, i_vvv_ops)"}, {"sha": "91870077a0c22c11e865f976057e93fe2d581ebb", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc?ref=cb44a16d212e9d0c402340fe6627501ca2e50fb8", "patch": "@@ -245,11 +245,33 @@ struct widen_alu_def : public build_base\n   }\n };\n \n+/* no_mask_policy_def class. Such instructions belong to this class\n+   doesn't need mask policy.  */\n+struct no_mask_policy_def : public build_base\n+{\n+  char *get_name (function_builder &b, const function_instance &instance,\n+\t\t  bool overloaded_p) const override\n+  {\n+    b.append_base_name (instance.base_name);\n+\n+    if (!overloaded_p)\n+      b.append_name (operand_suffixes[instance.op_info->op]);\n+\n+    /* vop<sew>_<op> --> vop<sew>_<op>_<type>.  */\n+    if (!overloaded_p)\n+      b.append_name (type_suffixes[instance.type.index].vector);\n+\n+    b.append_name (predication_suffixes[instance.pred]);\n+    return b.finish_name ();\n+  }\n+};\n+\n SHAPE(vsetvl, vsetvl)\n SHAPE(vsetvl, vsetvlmax)\n SHAPE(loadstore, loadstore)\n SHAPE(indexed_loadstore, indexed_loadstore)\n SHAPE(alu, alu)\n SHAPE(widen_alu, widen_alu)\n+SHAPE(no_mask_policy, no_mask_policy)\n \n } // end namespace riscv_vector"}, {"sha": "6aadde3df6c072994e8127a383736083b7df358f", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h?ref=cb44a16d212e9d0c402340fe6627501ca2e50fb8", "patch": "@@ -30,6 +30,7 @@ extern const function_shape *const loadstore;\n extern const function_shape *const indexed_loadstore;\n extern const function_shape *const alu;\n extern const function_shape *const widen_alu;\n+extern const function_shape *const no_mask_policy;\n }\n \n } // end namespace riscv_vector"}, {"sha": "0036c81b15d196e45c0e64c6bf2433dd149a02b5", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=cb44a16d212e9d0c402340fe6627501ca2e50fb8", "patch": "@@ -306,6 +306,18 @@ static CONSTEXPR const rvv_arg_type_info vv_args[]\n   = {rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info (RVV_BASE_vector),\n      rvv_arg_type_info_end};\n \n+/* A list of args for vector_type func (vector_type, vector_type, mask_type)\n+ * function.  */\n+static CONSTEXPR const rvv_arg_type_info vvm_args[]\n+  = {rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info (RVV_BASE_vector),\n+     rvv_arg_type_info (RVV_BASE_mask), rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (vector_type, scalar_type, mask_type)\n+ * function.  */\n+static CONSTEXPR const rvv_arg_type_info vxm_args[]\n+  = {rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info (RVV_BASE_scalar),\n+     rvv_arg_type_info (RVV_BASE_mask), rvv_arg_type_info_end};\n+\n /* A list of args for vector_type func (signed vector_type, unsigned\n  * vector_type) function.  */\n static CONSTEXPR const rvv_arg_type_info su_vv_args[]\n@@ -399,6 +411,10 @@ static CONSTEXPR const predication_type_index full_preds[]\n   = {PRED_TYPE_none, PRED_TYPE_m,  PRED_TYPE_tu,  PRED_TYPE_tum,\n      PRED_TYPE_tumu, PRED_TYPE_mu, NUM_PRED_TYPES};\n \n+/* vop/vop_tu will be registered.  */\n+static CONSTEXPR const predication_type_index tu_preds[]\n+  = {PRED_TYPE_none, PRED_TYPE_tu, NUM_PRED_TYPES};\n+\n /* vop/vop_m will be registered.  */\n static CONSTEXPR const predication_type_index none_m_preds[]\n   = {PRED_TYPE_none, PRED_TYPE_m, NUM_PRED_TYPES};\n@@ -538,6 +554,22 @@ static CONSTEXPR const rvv_op_info iu_vvv_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      vv_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type, vector_type,\n+ * mask_type) function registration. */\n+static CONSTEXPR const rvv_op_info iu_vvvm_ops\n+  = {iu_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vvm,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vvm_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, scalar_type,\n+ * mask_type) function registration. */\n+static CONSTEXPR const rvv_op_info iu_vvxm_ops\n+  = {iu_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vxm,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vxm_args /* Args */};\n+\n /* A static operand information for vector_type func (vector_type, vector_type)\n  * function registration. */\n static CONSTEXPR const rvv_op_info i_vvv_ops\n@@ -1086,6 +1118,9 @@ rvv_arg_type_info::get_base_vector_type (tree type) const\n     unsigned_p = true;\n   switch (base_type)\n     {\n+    case RVV_BASE_mask:\n+      inner_mode = E_BImode;\n+      break;\n     case RVV_BASE_uint8_index:\n       inner_mode = E_QImode;\n       unsigned_p = true;\n@@ -1148,7 +1183,8 @@ rvv_arg_type_info::get_base_vector_type (tree type) const\n       if (!vector_type)\n \tcontinue;\n \n-      if (TYPE_UNSIGNED (vector_type) != unsigned_p)\n+      if (GET_MODE_CLASS (TYPE_MODE (vector_type)) != MODE_VECTOR_BOOL\n+\t  && TYPE_UNSIGNED (vector_type) != unsigned_p)\n \tcontinue;\n \n       if (TYPE_MODE (vector_type) == mode.require ())\n@@ -1217,6 +1253,7 @@ rvv_arg_type_info::get_tree_type (vector_type_index type_idx) const\n     case RVV_BASE_quad_trunc_vector:\n     case RVV_BASE_oct_trunc_vector:\n     case RVV_BASE_double_trunc_unsigned_vector:\n+    case RVV_BASE_mask:\n       if (get_base_vector_type (builtin_types[type_idx].vector)\n \t  != NUM_VECTOR_TYPES)\n \treturn builtin_types[get_base_vector_type (\n@@ -1624,10 +1661,13 @@ function_expander::use_exact_insn (insn_code icode)\n   /* Record the offset to get the argument.  */\n   int arg_offset = 0;\n \n-  if (use_real_mask_p (pred))\n-    add_input_operand (arg_offset++);\n-  else\n-    add_all_one_mask_operand (mask_mode);\n+  if (base->use_mask_predication_p ())\n+    {\n+      if (use_real_mask_p (pred))\n+\tadd_input_operand (arg_offset++);\n+      else\n+\tadd_all_one_mask_operand (mask_mode);\n+    }\n \n   /* Store operation doesn't have merge operand.  */\n   if (!function_returns_void_p ())"}, {"sha": "4f78c299e6fc67f9bdcb3aeeecfacf3544a95d51", "filename": "gcc/config/riscv/riscv-vector-builtins.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h?ref=cb44a16d212e9d0c402340fe6627501ca2e50fb8", "patch": "@@ -140,6 +140,7 @@ enum rvv_base_type\n {\n   RVV_BASE_vector,\n   RVV_BASE_scalar,\n+  RVV_BASE_mask,\n   RVV_BASE_unsigned_vector,\n   RVV_BASE_unsigned_scalar,\n   RVV_BASE_vector_ptr,\n@@ -384,6 +385,9 @@ class function_base\n   /* Return true if intrinsic can be overloaded.  */\n   virtual bool can_be_overloaded_p (enum predication_type_index) const;\n \n+  /* Return true if intrinsics use mask predication.  */\n+  virtual bool use_mask_predication_p () const;\n+\n   /* Expand the given call into rtl.  Return the result of the function,\n      or an arbitrary value if the function doesn't return a result.  */\n   virtual rtx expand (function_expander &) const = 0;\n@@ -509,6 +513,14 @@ function_base::apply_mask_policy_p () const\n   return true;\n }\n \n+/* We choose to return true by default since most of the intrinsics use\n+   mask predication.  */\n+inline bool\n+function_base::use_mask_predication_p () const\n+{\n+  return true;\n+}\n+\n /* Since most of intrinsics can be overloaded, we set it true by default.  */\n inline bool\n function_base::can_be_overloaded_p (enum predication_type_index) const"}, {"sha": "c3f3f1b01f80c1d9ca455700ef7cb17e8f313e28", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=cb44a16d212e9d0c402340fe6627501ca2e50fb8", "patch": "@@ -33,6 +33,9 @@\n   UNSPEC_VMULHS\n   UNSPEC_VMULHU\n   UNSPEC_VMULHSU\n+\n+  UNSPEC_VADC\n+  UNSPEC_VSBC\n ])\n \n (define_mode_iterator V ["}, {"sha": "3cd87f8fc6f2dd71bf55964df2bdfddffc0f7377", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 292, "deletions": 1, "changes": 293, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb44a16d212e9d0c402340fe6627501ca2e50fb8/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=cb44a16d212e9d0c402340fe6627501ca2e50fb8", "patch": "@@ -143,7 +143,8 @@\n ;; It is valid for instruction that require sew/lmul ratio.\n (define_attr \"ratio\" \"\"\n   (cond [(eq_attr \"type\" \"vimov,vfmov,vldux,vldox,vstux,vstox,\\\n-\t\t\t  vialu,vshift,vicmp,vimul,vidiv,vsalu,vext,viwalu,viwmul\")\n+\t\t\t  vialu,vshift,vicmp,vimul,vidiv,vsalu,\\\n+\t\t\t  vext,viwalu,viwmul,vicalu\")\n \t   (const_int INVALID_ATTRIBUTE)\n \t (eq_attr \"mode\" \"VNx1QI,VNx1BI\")\n \t   (symbol_ref \"riscv_vector::get_ratio(E_VNx1QImode)\")\n@@ -1171,6 +1172,7 @@\n ;; -------------------------------------------------------------------------------\n ;; Includes:\n ;; - 11.1 Vector Single-Width Integer Add and Subtract\n+;; - 11.4 Vector Integer Add-with-Carry/Subtract-with-Borrow Instructions\n ;; - 11.5 Vector Bitwise Logical Instructions\n ;; - 11.6 Vector Single-Width Bit Shift Instructions\n ;; - 11.9 Vector Integer Min/Max Instructions\n@@ -1938,6 +1940,295 @@\n   [(set_attr \"type\" \"vimul\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; Vector Integer Add-with-Carry / Subtract-with-Borrow Instructions\n+(define_insn \"@pred_adc<mode>\"\n+  [(set (match_operand:VI 0 \"register_operand\"            \"=&vr, &vr\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand 5 \"vector_length_operand\"     \"  rK,  rK\")\n+\t     (match_operand 6 \"const_int_operand\"         \"   i,   i\")\n+\t     (match_operand 7 \"const_int_operand\"         \"   i,   i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI\n+\t     [(plus:VI\n+\t       (match_operand:VI 2 \"register_operand\"     \"  vr,  vr\")\n+\t       (match_operand:VI 3 \"vector_arith_operand\" \"  vr,  vi\"))\n+\t     (match_operand:<VM> 4 \"register_operand\"     \"  vm,  vm\")] UNSPEC_VADC)\n+\t  (match_operand:VI 1 \"vector_merge_operand\"      \" 0vu, 0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vadc.vvm\\t%0,%2,%3,%4\n+   vadc.vim\\t%0,%2,%v3,%4\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n+\n+(define_insn \"@pred_sbc<mode>\"\n+  [(set (match_operand:VI 0 \"register_operand\"            \"=&vr\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand 5 \"vector_length_operand\"     \"  rK\")\n+\t     (match_operand 6 \"const_int_operand\"         \"   i\")\n+\t     (match_operand 7 \"const_int_operand\"         \"   i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI\n+\t     [(minus:VI\n+\t       (match_operand:VI 2 \"register_operand\"     \"  vr\")\n+\t       (match_operand:VI 3 \"register_operand\"     \"  vr\"))\n+\t      (match_operand:<VM> 4 \"register_operand\"    \"  vm\")] UNSPEC_VSBC)\n+\t  (match_operand:VI 1 \"vector_merge_operand\"      \" 0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vsbc.vvm\\t%0,%2,%3,%4\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n+\n+(define_insn \"@pred_adc<mode>_scalar\"\n+  [(set (match_operand:VI_QHS 0 \"register_operand\"        \"=&vr\")\n+\t(if_then_else:VI_QHS\n+\t  (unspec:<VM>\n+\t    [(match_operand 5 \"vector_length_operand\"      \" rK\")\n+\t     (match_operand 6 \"const_int_operand\"          \"  i\")\n+\t     (match_operand 7 \"const_int_operand\"          \"  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI_QHS\n+\t     [(plus:VI_QHS\n+\t       (vec_duplicate:VI_QHS\n+\t         (match_operand:<VEL> 3 \"register_operand\" \"  r\"))\n+\t       (match_operand:VI_QHS 2 \"register_operand\"  \" vr\"))\n+\t     (match_operand:<VM> 4 \"register_operand\"      \" vm\")] UNSPEC_VADC)\n+\t  (match_operand:VI_QHS 1 \"vector_merge_operand\"   \"0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vadc.vxm\\t%0,%2,%3,%4\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n+\n+(define_insn \"@pred_sbc<mode>_scalar\"\n+  [(set (match_operand:VI_QHS 0 \"register_operand\"         \"=&vr\")\n+\t(if_then_else:VI_QHS\n+\t  (unspec:<VM>\n+\t    [(match_operand 5 \"vector_length_operand\"      \"  rK\")\n+\t     (match_operand 6 \"const_int_operand\"          \"   i\")\n+\t     (match_operand 7 \"const_int_operand\"          \"   i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI_QHS\n+\t     [(minus:VI_QHS\n+\t        (match_operand:VI_QHS 2 \"register_operand\" \"  vr\")\n+\t        (vec_duplicate:VI_QHS\n+\t          (match_operand:<VEL> 3 \"reg_or_0_operand\" \" rJ\")))\n+\t      (match_operand:<VM> 4 \"register_operand\"      \" vm\")] UNSPEC_VSBC)\n+\t  (match_operand:VI_QHS 1 \"vector_merge_operand\"   \" 0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vsbc.vxm\\t%0,%2,%z3,%4\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n+\n+(define_expand \"@pred_adc<mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand 5 \"vector_length_operand\")\n+\t     (match_operand 6 \"const_int_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI_D\n+\t     [(plus:VI_D\n+\t        (vec_duplicate:VI_D\n+\t          (match_operand:<VEL> 3 \"reg_or_int_operand\"))\n+\t        (match_operand:VI_D 2 \"register_operand\"))\n+\t      (match_operand:<VM> 4 \"register_operand\")] UNSPEC_VADC)\n+\t  (match_operand:VI_D 1 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+  {\n+    if (riscv_vector::simm5_p (operands[3]))\n+      operands[3] = force_reg (<VEL>mode, operands[3]);\n+    else if (!TARGET_64BIT)\n+      {\n+        rtx v = gen_reg_rtx (<MODE>mode);\n+\n+\tif (riscv_vector::simm32_p (operands[3]))\n+\t  operands[3] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n+\t\tforce_reg (Pmode, operands[3]));\n+        else\n+  \t  {\n+  \t    if (CONST_INT_P (operands[3]))\n+  \t      operands[3] = force_reg (<VEL>mode, operands[3]);\n+\n+  \t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n+  \t  \t\t\t\t    v, operands[3], operands[5],\n+  \t  \t\t\t\t    <VM>mode);\n+  \t    emit_insn (gen_pred_adc<mode> (operands[0], operands[1], operands[2],\n+  \t  \t\t\t\t   v, operands[4], operands[5],\n+  \t  \t\t\t\t   operands[6], operands[7]));\n+  \t    DONE;\n+  \t  }\n+      }\n+    else\n+      operands[3] = force_reg (<VEL>mode, operands[3]);\n+  })\n+\n+(define_insn \"*pred_adc<mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"           \"=&vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand 5 \"vector_length_operand\"       \" rK\")\n+\t     (match_operand 6 \"const_int_operand\"           \"  i\")\n+\t     (match_operand 7 \"const_int_operand\"           \"  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI_D\n+\t     [(plus:VI_D\n+\t        (vec_duplicate:VI_D\n+\t          (match_operand:<VEL> 3 \"register_operand\" \"  r\"))\n+\t        (match_operand:VI_D 2 \"register_operand\"    \" vr\"))\n+\t      (match_operand:<VM> 4 \"register_operand\"      \" vm\")] UNSPEC_VADC)\n+\t  (match_operand:VI_D 1 \"vector_merge_operand\"      \"0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vadc.vxm\\t%0,%2,%3,%4\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n+\n+(define_insn \"*pred_adc<mode>_extended_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"                \"=&vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand 5 \"vector_length_operand\"            \" rK\")\n+\t     (match_operand 6 \"const_int_operand\"                \"  i\")\n+\t     (match_operand 7 \"const_int_operand\"                \"  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI_D\n+\t     [(plus:VI_D\n+\t        (vec_duplicate:VI_D\n+\t          (sign_extend:<VEL>\n+\t            (match_operand:<VSUBEL> 3 \"register_operand\" \"  r\")))\n+\t        (match_operand:VI_D 2 \"register_operand\"         \" vr\"))\n+\t      (match_operand:<VM> 4 \"register_operand\"           \" vm\")] UNSPEC_VADC)\n+\t  (match_operand:VI_D 1 \"vector_merge_operand\"           \"0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vadc.vxm\\t%0,%2,%3,%4\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n+\n+(define_expand \"@pred_sbc<mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand 5 \"vector_length_operand\")\n+\t     (match_operand 6 \"const_int_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI_D\n+\t     [(minus:VI_D\n+\t        (match_operand:VI_D 2 \"register_operand\")\n+\t        (vec_duplicate:VI_D\n+\t          (match_operand:<VEL> 3 \"reg_or_int_operand\")))\n+\t      (match_operand:<VM> 4 \"register_operand\")] UNSPEC_VSBC)\n+\t  (match_operand:VI_D 1 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+  {\n+    if (!TARGET_64BIT)\n+      {\n+        rtx v = gen_reg_rtx (<MODE>mode);\n+\n+\tif (riscv_vector::simm32_p (operands[3]))\n+\t  {\n+\t    if (!rtx_equal_p (operands[3], const0_rtx))\n+\t      operands[3] = force_reg (Pmode, operands[3]);\n+\t    operands[3] = gen_rtx_SIGN_EXTEND (<VEL>mode, operands[3]);\n+\t  }\n+        else\n+  \t  {\n+  \t    if (CONST_INT_P (operands[3]))\n+  \t      operands[3] = force_reg (<VEL>mode, operands[3]);\n+\n+  \t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n+  \t  \t\t\t\t    v, operands[3], operands[5],\n+  \t  \t\t\t\t    <VM>mode);\n+  \t    emit_insn (gen_pred_sbc<mode> (operands[0], operands[1], operands[2],\n+  \t  \t\t\t\t   v, operands[4], operands[5],\n+  \t  \t\t\t\t   operands[6], operands[7]));\n+  \t    DONE;\n+  \t  }\n+      }\n+    else\n+      {\n+\tif (!rtx_equal_p (operands[3], const0_rtx))\n+\t  operands[3] = force_reg (<VEL>mode, operands[3]);\n+      }\n+  })\n+\n+(define_insn \"*pred_sbc<mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"           \"=&vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand 5 \"vector_length_operand\"       \" rK\")\n+\t     (match_operand 6 \"const_int_operand\"           \"  i\")\n+\t     (match_operand 7 \"const_int_operand\"           \"  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI_D\n+\t     [(minus:VI_D\n+\t        (match_operand:VI_D 2 \"register_operand\"    \" vr\")\n+\t        (vec_duplicate:VI_D\n+\t          (match_operand:<VEL> 3 \"reg_or_0_operand\" \" rJ\")))\n+\t      (match_operand:<VM> 4 \"register_operand\"      \" vm\")] UNSPEC_VSBC)\n+\t  (match_operand:VI_D 1 \"vector_merge_operand\"      \"0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vsbc.vxm\\t%0,%2,%z3,%4\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n+\n+(define_insn \"*pred_sbc<mode>_extended_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"                \"=&vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand 5 \"vector_length_operand\"            \" rK\")\n+\t     (match_operand 6 \"const_int_operand\"                \"  i\")\n+\t     (match_operand 7 \"const_int_operand\"                \"  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI_D\n+\t     [(minus:VI_D\n+\t        (match_operand:VI_D 2 \"register_operand\"         \" vr\")\n+\t        (vec_duplicate:VI_D\n+\t          (sign_extend:<VEL>\n+\t            (match_operand:<VSUBEL> 3 \"reg_or_0_operand\" \" rJ\"))))\n+\t      (match_operand:<VM> 4 \"register_operand\"           \" vm\")] UNSPEC_VSBC)\n+\t  (match_operand:VI_D 1 \"vector_merge_operand\"           \"0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vsbc.vxm\\t%0,%2,%z3,%4\"\n+  [(set_attr \"type\" \"vicalu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n+\n ;; -------------------------------------------------------------------------------\n ;; ---- Predicated integer unary operations\n ;; -------------------------------------------------------------------------------"}]}