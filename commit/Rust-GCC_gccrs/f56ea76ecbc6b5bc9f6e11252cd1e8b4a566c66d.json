{"sha": "f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU2ZWE3NmVjYmM2YjViYzlmNmUxMTI1MmNkMWU4YjRhNTY2YzY2ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-10-20T17:53:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-10-20T17:53:10Z"}, "message": "re PR target/78037 (Incorrect code generated at optimization level -O2 for tzcnt and binary and)\n\n\tPR target/78037\n\t* config/i386/bmiintrin.h (__tzcnt_u16): Call __builtin_ia32_tzcnt_u16.\n\t(__tzcnt_u32, _tzcnt_u32): Call __builtin_ia32_tzcnt_u32.\n\t(__tzcnt_u64, _tzcnt_u64): Call __builtin_ia32_tzcnt_u64.\n\t* config/i386/lzcntintrin.h (__lzcnt_u16): Call\n\t__builtin_ia32_lzcnt_u16.\n\t(__lzcnt_u32, _lzcnt_u32): Call __builtin_ia32_lzcnt_u32.\n\t(__lzcnt_u64, _lzcnt_u64): Call __builtin_ia32_lzcnt_u64.\n\t* config/i386/i386.md (UNSPEC_LZCNT, UNSPEC_TZCNT): New unspecs.\n\t(ctz<mode>2, *ctz<mode>2): Use SWI48 mode iterator.\n\t(bmi_tzcnt_<mode>): New expander.\n\t(*bmi_tzcnt_<mode>_falsedep_1): New define_insn_and_split pattern.\n\t(*bmi_tzcnt_<mode>_falsedep, *bmi_tzcnt_<mode>): New insn patterns.\n\t(clz<mode>2_lzcnt, *clz<mode>2_lzcnt): Use SWI48 mode iterator.\n\t(lzcnt_<mode>): New expander.\n\t(*lzcnt_<mode>_falsedep_1): New define_insn_and_split pattern.\n\t(*lzcnt_<mode>_falsedep, *lzcnt_<mode>): New insn patterns.\n\t* config/i386/i386-builtin-types.def (UINT_FTYPE_UINT): New.\n\t(UINT64_FTYPE_UINT64): New.\n\t* config/i386/i386-builtin.def (__builtin_clzs): Remove description.\n\t(__builtin_ia32_lzcnt_u16): New description.\n\t(__builtin_ia32_lzcnt_u32): Ditto.\n\t(__builtin_ia32_lzcnt_u64): Ditto.\n\t(__builtin_ctzs): Remove description.\n\t(__builtin_ia32_tzcnt_u16): New description.\n\t(__builtin_ia32_tzcnt_u32): Ditto.\n\t(__builtin_ia32_tzcnt_u64): Ditto.\n\t* config/i386/i386.c (ix86_expand_args_builtin): Handle\n\tUINT_FTYPE_UINT and UINT64_FTYPE_UINT64.\n\ntestsuite/ChangeLog:\n\n\tPR target/78037\n\t* gcc.target/i386/pr78037.c: New test.\n\nFrom-SVN: r241381", "tree": {"sha": "58bec3b64e32f525f8e43348a9eb8ef5cfbec28f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58bec3b64e32f525f8e43348a9eb8ef5cfbec28f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e23d1bcc4d4b3daf48651d622404c88f9072fe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e23d1bcc4d4b3daf48651d622404c88f9072fe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e23d1bcc4d4b3daf48651d622404c88f9072fe7"}], "stats": {"total": 254, "additions": 226, "deletions": 28}, "files": [{"sha": "7eb9476f52f2cecca89a94fe75cbe27f8b3037c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d", "patch": "@@ -1,3 +1,35 @@\n+2016-10-20 Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/78037\n+\t* config/i386/bmiintrin.h (__tzcnt_u16): Call __builtin_ia32_tzcnt_u16.\n+\t(__tzcnt_u32, _tzcnt_u32): Call __builtin_ia32_tzcnt_u32.\n+\t(__tzcnt_u64, _tzcnt_u64): Call __builtin_ia32_tzcnt_u64.\n+\t* config/i386/lzcntintrin.h (__lzcnt_u16): Call\n+\t__builtin_ia32_lzcnt_u16.\n+\t(__lzcnt_u32, _lzcnt_u32): Call __builtin_ia32_lzcnt_u32.\n+\t(__lzcnt_u64, _lzcnt_u64): Call __builtin_ia32_lzcnt_u64.\n+\t* config/i386/i386.md (UNSPEC_LZCNT, UNSPEC_TZCNT): New unspecs.\n+\t(ctz<mode>2, *ctz<mode>2): Use SWI48 mode iterator.\n+\t(bmi_tzcnt_<mode>): New expander.\n+\t(*bmi_tzcnt_<mode>_falsedep_1): New define_insn_and_split pattern.\n+\t(*bmi_tzcnt_<mode>_falsedep, *bmi_tzcnt_<mode>): New insn patterns.\n+\t(clz<mode>2_lzcnt, *clz<mode>2_lzcnt): Use SWI48 mode iterator.\n+\t(lzcnt_<mode>): New expander.\n+\t(*lzcnt_<mode>_falsedep_1): New define_insn_and_split pattern.\n+\t(*lzcnt_<mode>_falsedep, *lzcnt_<mode>): New insn patterns.\n+\t* config/i386/i386-builtin-types.def (UINT_FTYPE_UINT): New.\n+\t(UINT64_FTYPE_UINT64): New.\n+\t* config/i386/i386-builtin.def (__builtin_clzs): Remove description.\n+\t(__builtin_ia32_lzcnt_u16): New description.\n+\t(__builtin_ia32_lzcnt_u32): Ditto.\n+\t(__builtin_ia32_lzcnt_u64): Ditto.\n+\t(__builtin_ctzs): Remove description.\n+\t(__builtin_ia32_tzcnt_u16): New description.\n+\t(__builtin_ia32_tzcnt_u32): Ditto.\n+\t(__builtin_ia32_tzcnt_u64): Ditto.\n+\t* config/i386/i386.c (ix86_expand_args_builtin): Handle\n+\tUINT_FTYPE_UINT and UINT64_FTYPE_UINT64.\n+\n 2016-10-20  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/78049"}, {"sha": "3ebe6d7d5082f97b2259452524a4dfd6db7dbbeb", "filename": "gcc/config/i386/bmiintrin.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2Fconfig%2Fi386%2Fbmiintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2Fconfig%2Fi386%2Fbmiintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbmiintrin.h?ref=f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d", "patch": "@@ -37,7 +37,7 @@\n extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __tzcnt_u16 (unsigned short __X)\n {\n-  return __builtin_ctzs (__X);\n+  return __builtin_ia32_tzcnt_u16 (__X);\n }\n \n extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -97,13 +97,13 @@ _blsr_u32 (unsigned int __X)\n extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __tzcnt_u32 (unsigned int __X)\n {\n-  return __builtin_ctz (__X);\n+  return __builtin_ia32_tzcnt_u32 (__X);\n }\n \n extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _tzcnt_u32 (unsigned int __X)\n {\n-  return __builtin_ctz (__X);\n+  return __builtin_ia32_tzcnt_u32 (__X);\n }\n \n \n@@ -165,13 +165,13 @@ _blsr_u64 (unsigned long long __X)\n extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __tzcnt_u64 (unsigned long long __X)\n {\n-  return __builtin_ctzll (__X);\n+  return __builtin_ia32_tzcnt_u64 (__X);\n }\n \n extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _tzcnt_u64 (unsigned long long __X)\n {\n-  return __builtin_ctzll (__X);\n+  return __builtin_ia32_tzcnt_u64 (__X);\n }\n \n #endif /* __x86_64__  */"}, {"sha": "b34cfdabd4da4cb60343c37329622144394bbed1", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d", "patch": "@@ -205,9 +205,11 @@ DEF_FUNCTION_TYPE (INT, PCCHAR)\n DEF_FUNCTION_TYPE (INT64, INT64)\n DEF_FUNCTION_TYPE (INT64, V2DF)\n DEF_FUNCTION_TYPE (INT64, V4SF)\n-DEF_FUNCTION_TYPE (UINT64, INT)\n+DEF_FUNCTION_TYPE (UINT, UINT)\n DEF_FUNCTION_TYPE (UINT16, UINT16)\n+DEF_FUNCTION_TYPE (UINT64, INT)\n DEF_FUNCTION_TYPE (UINT64, PUNSIGNED)\n+DEF_FUNCTION_TYPE (UINT64, UINT64)\n DEF_FUNCTION_TYPE (V16QI, PCCHAR)\n DEF_FUNCTION_TYPE (V16QI, V16QI)\n DEF_FUNCTION_TYPE (V2DF, PCDOUBLE)"}, {"sha": "227526bcd7294159236ee4f9e570fa4c33bedfa5", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d", "patch": "@@ -1186,12 +1186,18 @@ BDESC (OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_lshrvv2di, \"__builtin_ia32_psrlv2di\",\n BDESC (OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_lshrvv8si, \"__builtin_ia32_psrlv8si\", IX86_BUILTIN_PSRLVV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI)\n BDESC (OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_lshrvv4si, \"__builtin_ia32_psrlv4si\", IX86_BUILTIN_PSRLVV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI)\n \n-BDESC (OPTION_MASK_ISA_LZCNT, CODE_FOR_clzhi2_lzcnt,   \"__builtin_clzs\",   IX86_BUILTIN_CLZS,    UNKNOWN,     (int) UINT16_FTYPE_UINT16)\n+/* LZCNT */\n+BDESC (OPTION_MASK_ISA_LZCNT, CODE_FOR_lzcnt_hi, \"__builtin_ia32_lzcnt_u16\", IX86_BUILTIN_LZCNT16, UNKNOWN, (int) UINT16_FTYPE_UINT16)\n+BDESC (OPTION_MASK_ISA_LZCNT, CODE_FOR_lzcnt_si, \"__builtin_ia32_lzcnt_u32\", IX86_BUILTIN_LZCNT32, UNKNOWN, (int) UINT_FTYPE_UINT)\n+BDESC (OPTION_MASK_ISA_LZCNT | OPTION_MASK_ISA_64BIT, CODE_FOR_lzcnt_di, \"__builtin_ia32_lzcnt_u64\", IX86_BUILTIN_LZCNT64, UNKNOWN, (int) UINT64_FTYPE_UINT64)\n \n /* BMI */\n BDESC (OPTION_MASK_ISA_BMI, CODE_FOR_bmi_bextr_si, \"__builtin_ia32_bextr_u32\", IX86_BUILTIN_BEXTR32, UNKNOWN, (int) UINT_FTYPE_UINT_UINT)\n BDESC (OPTION_MASK_ISA_BMI | OPTION_MASK_ISA_64BIT, CODE_FOR_bmi_bextr_di, \"__builtin_ia32_bextr_u64\", IX86_BUILTIN_BEXTR64, UNKNOWN, (int) UINT64_FTYPE_UINT64_UINT64)\n-BDESC (OPTION_MASK_ISA_BMI, CODE_FOR_ctzhi2,       \"__builtin_ctzs\",           IX86_BUILTIN_CTZS,    UNKNOWN, (int) UINT16_FTYPE_UINT16)\n+\n+BDESC (OPTION_MASK_ISA_BMI, CODE_FOR_bmi_tzcnt_hi, \"__builtin_ia32_tzcnt_u16\", IX86_BUILTIN_TZCNT16, UNKNOWN, (int) UINT16_FTYPE_UINT16)\n+BDESC (OPTION_MASK_ISA_BMI, CODE_FOR_bmi_tzcnt_si, \"__builtin_ia32_tzcnt_u32\", IX86_BUILTIN_TZCNT32, UNKNOWN, (int) UINT_FTYPE_UINT)\n+BDESC (OPTION_MASK_ISA_BMI | OPTION_MASK_ISA_64BIT, CODE_FOR_bmi_tzcnt_di, \"__builtin_ia32_tzcnt_u64\", IX86_BUILTIN_TZCNT64, UNKNOWN, (int) UINT64_FTYPE_UINT64)\n \n /* TBM */\n BDESC (OPTION_MASK_ISA_TBM, CODE_FOR_tbm_bextri_si, \"__builtin_ia32_bextri_u32\", IX86_BUILTIN_BEXTRI32, UNKNOWN, (int) UINT_FTYPE_UINT_UINT)"}, {"sha": "3e6f8fde127cb1c6998488f63b28aba4725fcfef", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d", "patch": "@@ -34317,8 +34317,10 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case FLOAT128_FTYPE_FLOAT128:\n     case FLOAT_FTYPE_FLOAT:\n     case INT_FTYPE_INT:\n-    case UINT64_FTYPE_INT:\n+    case UINT_FTYPE_UINT:\n     case UINT16_FTYPE_UINT16:\n+    case UINT64_FTYPE_INT:\n+    case UINT64_FTYPE_UINT64:\n     case INT64_FTYPE_INT64:\n     case INT64_FTYPE_V4SF:\n     case INT64_FTYPE_V2DF:"}, {"sha": "6e0348de7bc3ff4a7b1124e2eba58ce930137ce5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 144, "deletions": 14, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d", "patch": "@@ -175,7 +175,11 @@\n   ;; For CRC32 support\n   UNSPEC_CRC32\n \n+  ;; For LZCNT suppoprt\n+  UNSPEC_LZCNT\n+\n   ;; For BMI support\n+  UNSPEC_TZCNT\n   UNSPEC_BEXTR\n \n   ;; For BMI2 support\n@@ -12850,9 +12854,9 @@\n \n (define_expand \"ctz<mode>2\"\n   [(parallel\n-    [(set (match_operand:SWI248 0 \"register_operand\")\n-\t  (ctz:SWI248\n-\t    (match_operand:SWI248 1 \"nonimmediate_operand\")))\n+    [(set (match_operand:SWI48 0 \"register_operand\")\n+\t  (ctz:SWI48\n+\t    (match_operand:SWI48 1 \"nonimmediate_operand\")))\n      (clobber (reg:CC FLAGS_REG))])])\n \n ; False dependency happens when destination is only updated by tzcnt,\n@@ -12900,8 +12904,8 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*ctz<mode>2\"\n-  [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n-\t(ctz:SWI248 (match_operand:SWI248 1 \"nonimmediate_operand\" \"rm\")))\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(ctz:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n {\n@@ -12926,15 +12930,78 @@\n        (const_string \"0\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; Version of tzcnt that is expanded from intrinsics.  This version provides\n+;; operand size as output when source operand is zero. \n+\n+(define_expand \"bmi_tzcnt_<mode>\"\n+  [(parallel\n+    [(set (match_operand:SWI248 0 \"register_operand\")\n+\t  (unspec:SWI248\n+\t    [(match_operand:SWI248 1 \"nonimmediate_operand\")]\n+\t    UNSPEC_TZCNT))\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"TARGET_BMI\")\n+\n+; False dependency happens when destination is only updated by tzcnt,\n+; lzcnt or popcnt.  There is no false dependency when destination is\n+; also used in source.\n+(define_insn_and_split \"*bmi_tzcnt_<mode>_falsedep_1\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(unspec:SWI48\n+\t  [(match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")]\n+\t  UNSPEC_TZCNT))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI\n+   && TARGET_AVOID_FALSE_DEP_FOR_BMI && optimize_function_for_speed_p (cfun)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel\n+    [(set (match_dup 0)\n+\t  (unspec:SWI48 [(match_dup 1)] UNSPEC_TZCNT))\n+     (unspec [(match_dup 0)] UNSPEC_INSN_FALSE_DEP)\n+     (clobber (reg:CC FLAGS_REG))])]\n+{\n+  if (!reg_mentioned_p (operands[0], operands[1]))\n+    ix86_expand_clear (operands[0]);\n+})\n+\n+(define_insn \"*bmi_tzcnt_<mode>_falsedep\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(unspec:SWI48\n+\t  [(match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")]\n+\t  UNSPEC_TZCNT))\n+   (unspec [(match_operand:SWI48 2 \"register_operand\" \"0\")]\n+\t   UNSPEC_INSN_FALSE_DEP)\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI\"\n+  \"tzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*bmi_tzcnt_<mode>\"\n+  [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n+\t(unspec:SWI248\n+\t  [(match_operand:SWI248 1 \"nonimmediate_operand\" \"rm\")]\n+\t  UNSPEC_TZCNT))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI\"\n+  \"tzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_expand \"clz<mode>2\"\n   [(parallel\n-     [(set (match_operand:SWI248 0 \"register_operand\")\n-\t   (minus:SWI248\n+     [(set (match_operand:SWI48 0 \"register_operand\")\n+\t   (minus:SWI48\n \t     (match_dup 2)\n-\t     (clz:SWI248 (match_operand:SWI248 1 \"nonimmediate_operand\"))))\n+\t     (clz:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\"))))\n       (clobber (reg:CC FLAGS_REG))])\n    (parallel\n-     [(set (match_dup 0) (xor:SWI248 (match_dup 0) (match_dup 2)))\n+     [(set (match_dup 0) (xor:SWI48 (match_dup 0) (match_dup 2)))\n       (clobber (reg:CC FLAGS_REG))])]\n   \"\"\n {\n@@ -12948,9 +13015,9 @@\n \n (define_expand \"clz<mode>2_lzcnt\"\n   [(parallel\n-    [(set (match_operand:SWI248 0 \"register_operand\")\n-\t  (clz:SWI248\n-\t    (match_operand:SWI248 1 \"nonimmediate_operand\")))\n+    [(set (match_operand:SWI48 0 \"register_operand\")\n+\t  (clz:SWI48\n+\t    (match_operand:SWI48 1 \"nonimmediate_operand\")))\n      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_LZCNT\")\n \n@@ -12987,15 +13054,78 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*clz<mode>2_lzcnt\"\n-  [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n-\t(clz:SWI248 (match_operand:SWI248 1 \"nonimmediate_operand\" \"rm\")))\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(clz:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_LZCNT\"\n   \"lzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"prefix_rep\" \"1\")\n    (set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; Version of lzcnt that is expanded from intrinsics.  This version provides\n+;; operand size as output when source operand is zero. \n+\n+(define_expand \"lzcnt_<mode>\"\n+  [(parallel\n+    [(set (match_operand:SWI248 0 \"register_operand\")\n+\t  (unspec:SWI248\n+\t    [(match_operand:SWI248 1 \"nonimmediate_operand\")]\n+\t    UNSPEC_LZCNT))\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"TARGET_LZCNT\")\n+\n+; False dependency happens when destination is only updated by tzcnt,\n+; lzcnt or popcnt.  There is no false dependency when destination is\n+; also used in source.\n+(define_insn_and_split \"*lzcnt_<mode>_falsedep_1\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(unspec:SWI48\n+\t  [(match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")]\n+\t  UNSPEC_LZCNT))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_LZCNT\n+   && TARGET_AVOID_FALSE_DEP_FOR_BMI && optimize_function_for_speed_p (cfun)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel\n+    [(set (match_dup 0)\n+\t  (unspec:SWI48 [(match_dup 1)] UNSPEC_LZCNT))\n+     (unspec [(match_dup 0)] UNSPEC_INSN_FALSE_DEP)\n+     (clobber (reg:CC FLAGS_REG))])]\n+{\n+  if (!reg_mentioned_p (operands[0], operands[1]))\n+    ix86_expand_clear (operands[0]);\n+})\n+\n+(define_insn \"*lzcnt_<mode>_falsedep\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(unspec:SWI48\n+\t  [(match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")]\n+\t  UNSPEC_LZCNT))\n+   (unspec [(match_operand:SWI48 2 \"register_operand\" \"0\")]\n+\t   UNSPEC_INSN_FALSE_DEP)\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_LZCNT\"\n+  \"lzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*lzcnt_<mode>\"\n+  [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n+\t(unspec:SWI248\n+\t  [(match_operand:SWI248 1 \"nonimmediate_operand\" \"rm\")]\n+\t  UNSPEC_LZCNT))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_LZCNT\"\n+  \"lzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n ;; BMI instructions.\n (define_insn \"*bmi_andn_<mode>\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")"}, {"sha": "6d9d3b2c0463a87a952a8e1df89143172fb82e2e", "filename": "gcc/config/i386/lzcntintrin.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2Fconfig%2Fi386%2Flzcntintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2Fconfig%2Fi386%2Flzcntintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flzcntintrin.h?ref=f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d", "patch": "@@ -38,32 +38,32 @@\n extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __lzcnt16 (unsigned short __X)\n {\n-  return __builtin_clzs (__X);\n+  return __builtin_ia32_lzcnt_u16 (__X);\n }\n \n extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __lzcnt32 (unsigned int __X)\n {\n-  return __builtin_clz (__X);\n+  return __builtin_ia32_lzcnt_u32 (__X);\n }\n \n extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _lzcnt_u32 (unsigned int __X)\n {\n-  return __builtin_clz (__X);\n+  return __builtin_ia32_lzcnt_u32 (__X);\n }\n \n #ifdef __x86_64__\n extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __lzcnt64 (unsigned long long __X)\n {\n-  return __builtin_clzll (__X);\n+  return __builtin_ia32_lzcnt_u64 (__X);\n }\n \n extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _lzcnt_u64 (unsigned long long __X)\n {\n-  return __builtin_clzll (__X);\n+  return __builtin_ia32_lzcnt_u64 (__X);\n }\n #endif\n "}, {"sha": "eeeda8d8d970a5569631c4d4a0298f9246eea031", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d", "patch": "@@ -1,3 +1,8 @@\n+2016-10-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/78037\n+\t* gcc.target/i386/pr78037.c: New test.\n+\n 2016-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.target/visium/overflow8.c: New."}, {"sha": "d2e66ced7bcab454f923cc74d980679047fff85d", "filename": "gcc/testsuite/gcc.target/i386/pr78037.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78037.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78037.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78037.c?ref=f56ea76ecbc6b5bc9f6e11252cd1e8b4a566c66d", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target bmi } */\n+/* { dg-options \"-O2 -mbmi\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"bmi-check.h\"\n+\n+int\n+__attribute__((noinline, noclone))\n+foo (int x)\n+{\n+  return __tzcnt_u32 (x) & 0x1f;\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  if (foo (0) != 0)\n+    abort ();\n+}"}]}