{"sha": "433d6b398610cadfd7ee1e73165b72b3a6c5009d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMzZDZiMzk4NjEwY2FkZmQ3ZWUxZTczMTY1YjcyYjNhNmM1MDA5ZA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-03-08T22:13:26Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-03-08T22:13:26Z"}, "message": "libgfortran.h (unlikely, likely): Add usage comment.\n\n2014-03-08  Tobias Burnus  <burnus@net-b.de>\n\n        * libgfortran.h (unlikely, likely): Add usage comment.\n\nFrom-SVN: r208434", "tree": {"sha": "10fe31ee5216308d32afd19e85f37d8b50a71391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10fe31ee5216308d32afd19e85f37d8b50a71391"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/433d6b398610cadfd7ee1e73165b72b3a6c5009d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/433d6b398610cadfd7ee1e73165b72b3a6c5009d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/433d6b398610cadfd7ee1e73165b72b3a6c5009d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/433d6b398610cadfd7ee1e73165b72b3a6c5009d/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21d89690699adb7f9737b1bf17d076e21967dd72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d89690699adb7f9737b1bf17d076e21967dd72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21d89690699adb7f9737b1bf17d076e21967dd72"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "c82daa2564fe5e7289ea636e17b49f6da3d51af7", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433d6b398610cadfd7ee1e73165b72b3a6c5009d/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433d6b398610cadfd7ee1e73165b72b3a6c5009d/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=433d6b398610cadfd7ee1e73165b72b3a6c5009d", "patch": "@@ -1,3 +1,7 @@\n+2014-03-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* libgfortran.h (unlikely, likely): Add usage comment.\n+\n 2014-03-08  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \tPR libgfortran/60128"}, {"sha": "0d6f432a24bf1350fd3efa86b8de198e38667ed2", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433d6b398610cadfd7ee1e73165b72b3a6c5009d/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433d6b398610cadfd7ee1e73165b72b3a6c5009d/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=433d6b398610cadfd7ee1e73165b72b3a6c5009d", "patch": "@@ -97,6 +97,16 @@ typedef off_t gfc_offset;\n #define NULL (void *) 0\n #endif\n \n+\n+/* The following macros can be used to annotate conditions which are likely or\n+   unlikely to be true.  Avoid using them when a condition is only slightly\n+   more likely/less unlikely than average to avoid the performance penalties of\n+   branch misprediction. In addition, as __builtin_expect overrides the compiler\n+   heuristic, do not use in conditions where one of the branches ends with a\n+   call to a function with __attribute__((noreturn)): the compiler internal\n+   heuristic will mark this branch as much less likely as unlikely() would\n+   do.  */\n+\n #ifndef __GNUC__\n #define __attribute__(x)\n #define likely(x)       (x)"}]}