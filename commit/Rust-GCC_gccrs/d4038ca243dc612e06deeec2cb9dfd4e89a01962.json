{"sha": "d4038ca243dc612e06deeec2cb9dfd4e89a01962", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQwMzhjYTI0M2RjNjEyZTA2ZGVlZWMyY2I5ZGZkNGU4OWEwMTk2Mg==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2008-11-26T18:51:07Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2008-11-26T18:51:07Z"}, "message": "re PR testsuite/28870 (configuring, over-riding timeout values in testsuite)\n\ngcc/\n\tPR testsuite/28870\n\t* doc/sourcebuild.texi (Test Directives): Add dg-timeout and\n\tdg-timeout-factor.\n\ngcc/testsuite/\n\tPR testsuite/28870\n\t* lib/timeout.exp: New.\n\t* lib/timeout-dg.exp: New.\n\t* lib/gcc-dg.exp: Include new timeout library files.\n\t(dg-test): Unset timeout variables.\n\t* lib/gcc.exp (gcc_target_compile): Set timeout value from new proc.\n\t* lib/g++.exp (g++_target_compile): Ditto.\n\t* lib/gfortran.exp (gfortran_target_compile): Ditto.\n\t* lib/objc.exp (objc_target_compile): Ditto.\n\t* lib/obj-c++.exp (obj-c++_target_compile): Ditto.\n\t* lib/obj-c++.exp (obj-c++_target_compile): Ditto.\n\t* lib/gnat.exp (gnat_target_compile): Ditto.\n\nlibstdc++-v3/\n\tPR testsuite/28870\n\t* testsuite/lib/libstdc++.exp: Include new timeout library files.\n\t(libstdc++_init): Define tool_timeout.\n\t(dg-test): Override DejaGnu proc.\n\t(v3_target_compile): Set timeout value from new proc.\n\t(v3_target_compile_as_c): Ditto.\n\nlibmudflap/\n\tPR testsuite/28870\n\t* testsuite/lib/mfdg.exp (dg-test): Use new timeout support.\n\t(dg-timeout): Remove.\n\t(standard-wait): Remove.\n\t* testsuite/lib/libmudflap.exp: Include new timeout library files.\n\t(libmudflap_target_compile): Set timeout value from new proc.\n\nlibgomp/\n\tPR testsuite/28870\n\t* testsuite/lib/libgomp.exp: Include new timeout library files.\n\t(libgomp_target_compile): Set timeout value from new proc.\n\nFrom-SVN: r142225", "tree": {"sha": "e9424f9335b74670488bd43cc1db6d9816d6b9a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9424f9335b74670488bd43cc1db6d9816d6b9a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4038ca243dc612e06deeec2cb9dfd4e89a01962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4038ca243dc612e06deeec2cb9dfd4e89a01962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4038ca243dc612e06deeec2cb9dfd4e89a01962", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4038ca243dc612e06deeec2cb9dfd4e89a01962/comments", "author": null, "committer": null, "parents": [{"sha": "13fd89472d1fdefb04d2d10a215fd162938773b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13fd89472d1fdefb04d2d10a215fd162938773b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13fd89472d1fdefb04d2d10a215fd162938773b6"}], "stats": {"total": 279, "additions": 244, "deletions": 35}, "files": [{"sha": "ef13776d4f9e80030d94065fa8d3d07e0f23d954", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -1,3 +1,9 @@\n+2008-11-26  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR testsuite/28870\n+\t* doc/sourcebuild.texi (Test Directives): Add dg-timeout and\n+\tdg-timeout-factor.\n+\n 2008-11-26  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sync.md (memory_barrier_nosse): Disable also for"}, {"sha": "672f6d178a3cf582f96822acb3549d5a5783a5eb", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -990,6 +990,26 @@ The target's C99 runtime (both headers and libraries).\n and only then in certain modes.\n @end table\n \n+@item @{ dg-timeout @var{n} [@{target @var{selector} @}] @}\n+Set the time limit for the compilation and for the execution of the test\n+to the specified number of seconds.\n+\n+@item @{ dg-timeout-factor @var{x} [@{ target @var{selector} @}] @}\n+Multiply the normal time limit for compilation and execution of the test\n+by the specified floating-point factor.  The normal timeout limit, in\n+seconds, is found by searching the following in order:\n+\n+@itemize @bullet\n+@item the value defined by an earlier @code{dg-timeout} directive in\n+the test\n+\n+@item variable @var{tool_timeout} defined by the set of tests\n+\n+@item @var{gcc,,timeout} set in the target board\n+\n+@item 300\n+@end itemize\n+\n @item @{ dg-skip-if @var{comment} @{ @var{selector} @} @{ @var{include-opts} @} @{ @var{exclude-opts} @} @}\n Skip the test if the test system is included in @var{selector} and if\n each of the options in @var{include-opts} is in the set of options with"}, {"sha": "89264b21635f584edaa465abc6fb01d828b3535d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -1,3 +1,18 @@\n+2008-11-26  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR testsuite/28870\n+\t* lib/timeout.exp: New.\n+\t* lib/timeout-dg.exp: New.\n+\t* lib/gcc-dg.exp: Include new timeout library files.\n+\t(dg-test): Unset timeout variables.\n+\t* lib/gcc.exp (gcc_target_compile): Set timeout value from new proc.\n+\t* lib/g++.exp (g++_target_compile): Ditto.\n+\t* lib/gfortran.exp (gfortran_target_compile): Ditto.\n+\t* lib/objc.exp (objc_target_compile): Ditto.\n+\t* lib/obj-c++.exp (obj-c++_target_compile): Ditto.\n+\t* lib/obj-c++.exp (obj-c++_target_compile): Ditto.\n+\t* lib/gnat.exp (gnat_target_compile): Ditto.\n+\n 2008-11-26  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/37843"}, {"sha": "09f6e26aef4afa12bf65acf478598725352062fa", "filename": "gcc/testsuite/lib/g++.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -24,6 +24,7 @@\n #\n load_lib prune.exp\n load_lib gcc-defs.exp\n+load_lib timeout.exp\n load_lib target-libpath.exp\n \n #\n@@ -279,6 +280,7 @@ proc g++_target_compile { source dest type options } {\n \n     lappend options \"additional_flags=[libio_include_flags]\"\n     lappend options \"compiler=$GXX_UNDER_TEST\"\n+    lappend options \"timeout=[timeout_value]\"\n \n     set options [concat $gpp_compile_options $options]\n "}, {"sha": "13e0171d650845520f80601639dc563df866fbe5", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -23,6 +23,8 @@ load_lib scanasm.exp\n load_lib scanrtl.exp\n load_lib scantree.exp\n load_lib scanipa.exp\n+load_lib timeout.exp\n+load_lib timeout-dg.exp\n load_lib prune.exp\n load_lib libgloss.exp\n load_lib target-libpath.exp\n@@ -580,12 +582,14 @@ if { [info procs saved-dg-test] == [list] } {\n \t    if [info exists compiler_conditional_xfail_data] {\n \t\tunset compiler_conditional_xfail_data\n \t    }\n+\t    unset_timeout_vars\n \t    error $errmsg $saved_info\n \t}\n \tset additional_files \"\"\n \tset additional_sources \"\"\n \tset additional_prunes \"\"\n \tset shouldfail 0\n+\tunset_timeout_vars\n \tif [info exists compiler_conditional_xfail_data] {\n \t    unset compiler_conditional_xfail_data\n \t}"}, {"sha": "070b966a9a9570ea3b3c584481ebbbcac63cee6e", "filename": "gcc/testsuite/lib/gcc.exp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc.exp?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -29,6 +29,7 @@\n load_lib libgloss.exp\n load_lib prune.exp\n load_lib gcc-defs.exp\n+load_lib timeout.exp\n \n #\n # GCC_UNDER_TEST is the compiler under test.\n@@ -147,9 +148,7 @@ proc gcc_target_compile { source dest type options } {\n     if [info exists TOOL_OPTIONS] {\n \tset options [concat \"{additional_flags=$TOOL_OPTIONS}\" $options]\n     }\n-    if [target_info exists gcc,timeout] {\n-\tlappend options \"timeout=[target_info gcc,timeout]\"\n-    }\n+    lappend options \"timeout=[timeout_value]\"\n     lappend options \"compiler=$GCC_UNDER_TEST\"\n     set options [dg-additional-files-options $options $source]\n     return [target_compile $source $dest $type $options]"}, {"sha": "b0e66d8d3a81a412ec1dd5b6d77677eff6121543", "filename": "gcc/testsuite/lib/gfortran.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgfortran.exp?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -24,6 +24,7 @@\n #\n load_lib prune.exp\n load_lib gcc-defs.exp\n+load_lib timeout.exp\n load_lib target-libpath.exp\n \n #\n@@ -193,6 +194,7 @@ proc gfortran_target_compile { source dest type options } {\n     }\n \n     lappend options \"compiler=$GFORTRAN_UNDER_TEST\"\n+    lappend options \"timeout=[timeout_value]\"\n \n     set options [concat \"$ALWAYS_GFORTRANFLAGS\" $options]\n     set options [dg-additional-files-options $options $source]"}, {"sha": "af120b0610ba5aa91013289ed907496476c23393", "filename": "gcc/testsuite/lib/gnat.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Fgnat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Fgnat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgnat.exp?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -27,6 +27,7 @@\n load_lib libgloss.exp\n load_lib prune.exp\n load_lib gcc-defs.exp\n+load_lib timeout.exp\n \n #\n # GNAT_UNDER_TEST is the compiler under test.\n@@ -131,6 +132,7 @@ proc gnat_target_compile { source dest type options } {\n     set ld_library_path \".:${gnat_libgcc_s_path}\"\n     lappend options \"compiler=$GNAT_UNDER_TEST -q -f\"\n     lappend options \"incdir=${rootme}/ada/rts\"\n+    lappend options \"timeout=[timeout_value]\n \n     if { [target_info needs_status_wrapper]!=\"\" && [info exists gluefile] } {\n \tlappend options \"libs=${gluefile}\""}, {"sha": "502f4a7309477338736c859e338bc38cb63eb3be", "filename": "gcc/testsuite/lib/obj-c++.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -23,6 +23,7 @@\n #\n load_lib prune.exp\n load_lib gcc-defs.exp\n+load_lib timeout.exp\n load_lib target-libpath.exp\n \n #\n@@ -324,6 +325,7 @@ proc obj-c++_target_compile { source dest type options } {\n \n     lappend options \"additional_flags=[libio_include_flags]\"\n     lappend options \"compiler=$OBJCXX_UNDER_TEST\";\n+    lappend options \"timeout=[timeout_value]\"\n \n     set options [concat $gpp_compile_options $options]\n "}, {"sha": "a9c2853430a306cc48294337511b191421bfb180", "filename": "gcc/testsuite/lib/objc.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc.exp?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -28,6 +28,7 @@\n load_lib libgloss.exp\n load_lib prune.exp\n load_lib gcc-defs.exp\n+load_lib timeout.exp\n load_lib target-libpath.exp\n \n #\n@@ -193,6 +194,7 @@ proc objc_target_compile { source dest type options } {\n \tset source [concat \"-x objective-c-header\" $source]\n     }\n     lappend options \"compiler=$OBJC_UNDER_TEST\"\n+    lappend options \"timeout=[timeout_value]\n \n     set_ld_library_path_env_vars\n "}, {"sha": "45de9041cc549440a6f6938281a3266360ff2c73", "filename": "gcc/testsuite/lib/timeout-dg.exp", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Ftimeout-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Ftimeout-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftimeout-dg.exp?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -0,0 +1,49 @@\n+# Copyright (C) 2008 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+#\n+# dg-timeout -- Set the timout limit, in seconds, for a particular test\n+#\n+\n+proc dg-timeout { args } {\n+    global individual_timeout\n+\n+    set args [lreplace $args 0 0]\n+    if { [llength $args] > 1 } {\n+\tif { [dg-process-target [lindex $args 1]] == \"S\" } {\n+\t    set individual_timeout [lindex $args 0]\n+\t}\n+    } else {\n+\tset individual_timeout [lindex $args 0]\n+    }\n+}\n+\n+#\n+# dg-timeout-factor -- Scale the timeout limit for a particular test\n+#\n+\n+proc dg-timeout-factor { args } {\n+    global timeout_factor\n+\n+    set args [lreplace $args 0 0]\n+    if { [llength $args] > 1 } {\n+\tif { [dg-process-target [lindex $args 1]] == \"S\" } {\n+\t    set timeout_factor [lindex $args 0]\n+\t}\n+    } else {\n+\tset timeout_factor [lindex $args 0]\n+    }\n+}"}, {"sha": "b4f4c18c70454802052037b0bc2bc8224b322026", "filename": "gcc/testsuite/lib/timeout.exp", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Ftimeout.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/gcc%2Ftestsuite%2Flib%2Ftimeout.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftimeout.exp?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -0,0 +1,81 @@\n+# Copyright (C) 2008 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+#\n+# unset_timeout_vars -- Unset variables used for timeouts\n+#\n+\n+proc unset_timeout_vars { args } {\n+    global individual_timeout\n+    global timeout_factor\n+\n+    if [info exists individual_timeout] {\n+\tunset individual_timeout\n+    }\n+    if [info exists timeout_factor] {\n+\tunset timeout_factor\n+    }\n+}\n+\n+#\n+# timeout_value -- Return the integer timeout value to use for this test\n+#\n+\n+proc timeout_value { args } {\n+    global tool_timeout\n+    global individual_timeout\n+    global timeout_factor\n+\n+    # Find the current timeout limit, in seconds.\n+    if [info exists individual_timeout] {\n+\tset val $individual_timeout\n+    } elseif [info exists tool_timeout] {\n+\tset val $tool_timeout\n+    } elseif [target_info exists gcc,timeout] {\n+\tset val [target_info gcc,timeout]\n+    } else {\n+\t# This is really, REALLY ugly, but this is the default from\n+\t# remote.exp deep within DejaGnu.\n+\tset val 300\n+    }\n+\n+    # If the test specified a timeout factor, adjust by that.\n+    if [info exists timeout_factor] {\n+\tset val [expr int([expr $val * $timeout_factor])]\n+    }\n+\n+    return $val\n+}\n+\n+#\n+# standard_wait -- Set the timeout value used by DejaGnu\n+#\n+\n+# Override standard_wait from DejaGnu to use timeout value specified by\n+# by the user or by the target board, possibly multiplied by a factor\n+# for a particular test.\n+\n+if { [info procs standard_wait] != [list] \\\n+     && [info procs saved_standard_wait] == [list] } {\n+    rename standard_wait saved_standard_wait\n+    proc standard_wait { dest timeout } {\n+\tset val [timeout_value]\n+\tif { $val != 0 } {\n+\t    set timeout $val\n+\t}\n+\tsaved_standard_wait $dest $timeout\n+    }\n+}"}, {"sha": "0cdfba6d83fabd94db578bf9a747fcd5c5082116", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -1,3 +1,9 @@\n+2008-11-26  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR testsuite/28870\n+\t* testsuite/lib/libgomp.exp: Include new timeout library files.\n+\t(libgomp_target_compile): Set timeout value from new proc.\n+\n 2008-11-13  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR libgomp/37938"}, {"sha": "4e2600ec5f742950112b83d8e9c202b49d5aa543", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -22,6 +22,8 @@ load_gcc_lib target-libpath.exp\n load_gcc_lib wrapper.exp\n load_gcc_lib gcc-defs.exp\n load_gcc_lib torture-options.exp\n+load_gcc_lib timeout.exp\n+load_gcc_lib timeout-dg.exp\n load_gcc_lib gcc-dg.exp\n load_gcc_lib gfortran-dg.exp\n \n@@ -180,6 +182,7 @@ proc libgomp_target_compile { source dest type options } {\n     }\n \n     lappend options \"additional_flags=[libio_include_flags]\"\n+    lappend options \"timeout=[timeout_value]\"\n     lappend options \"compiler=$GCC_UNDER_TEST\"\n \n     set options [concat $libgomp_compile_options $options]"}, {"sha": "c75648e22d366ef1098aa963b84fe7cba99169fa", "filename": "libmudflap/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/libmudflap%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/libmudflap%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2FChangeLog?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -1,3 +1,12 @@\n+2008-11-26  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR testsuite/28870\n+\t* testsuite/lib/mfdg.exp (dg-test): Use new timeout support.\n+\t(dg-timeout): Remove.\n+\t(standard-wait): Remove.\n+\t* testsuite/lib/libmudflap.exp: Include new timeout library files.\n+\t(libmudflap_target_compile): Set timeout value from new proc.\n+\n 2008-11-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/35314"}, {"sha": "1abd783c510f9f70b76fc809bb97389f0098c4be", "filename": "libmudflap/testsuite/lib/libmudflap.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/libmudflap%2Ftestsuite%2Flib%2Flibmudflap.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/libmudflap%2Ftestsuite%2Flib%2Flibmudflap.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flib%2Flibmudflap.exp?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -29,6 +29,8 @@ proc load_gcc_lib { filename } {\n load_lib mfdg.exp\n load_lib libgloss.exp\n load_gcc_lib target-libpath.exp\n+load_gcc_lib timeout.exp\n+load_gcc_lib timeout-dg.exp\n \n proc libmudflap-init { language } {\n     global env\n@@ -213,6 +215,7 @@ proc libmudflap_target_compile { source dest type options } {\n     set cxx_final [concat $cxx_final $libs]\n \n     lappend options \"compiler=$cxx_final\"\n+    lappend options \"timeout=[timeout_value]\"\n \n     # Picks up the freshly-built testsuite library corresponding to the\n     # multilib under test."}, {"sha": "6870299467550c43b8d3c422ac19ca535a9be184", "filename": "libmudflap/testsuite/lib/mfdg.exp", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/libmudflap%2Ftestsuite%2Flib%2Fmfdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/libmudflap%2Ftestsuite%2Flib%2Fmfdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flib%2Fmfdg.exp?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -40,8 +40,7 @@ proc dg-test { args } {\n     set keep 0\n     set i 0\n     set dg-repetitions 1 ;# may be overridden by { dg-repetitions N }\n-    global dg-timeout\n-    set dg-timeout 0 ;# likewise by { dg-timeout N }\n+    unset_timeout_vars\n \n     if { [string index [lindex $args 0] 0] == \"-\" } {\n \tfor { set i 0 } { $i < [llength $args] } { incr i } {\n@@ -347,31 +346,3 @@ proc dg-repetitions { line value } {\n     upvar dg-repetitions repetitions\n     set repetitions $value\n }\n-\n-\n-# \n-# Indicate that this test case is to be run with a short timeout.\n-# The embedded format is \"{ dg-timeout N }\", where N is in seconds.\n-#\n-proc dg-timeout { line value } {\n-    global dg-timeout\n-    set dg-timeout $value\n-}\n-\n-\n-# dejagnu's config/unix.exp hard-codes 300 seconds as the timeout\n-# for any natively run executable.  That's too long for tests run\n-# multiple times and that may possibly hang.  So we override it here\n-# to provide some degree of control.\n-rename standard_wait hooked_standard_wait\n-proc standard_wait { dest timeout } {\n-    global dg-timeout\n-    if {[info exists dg-timeout]} {\n-\tif {${dg-timeout} > 0} {\n-\t    verbose -log \"Overriding timeout = ${dg-timeout}\"\n-\t    set timeout ${dg-timeout}\n-\t}\n-    }\n-\n-    hooked_standard_wait $dest $timeout\n-}"}, {"sha": "a9638027c6df97a68f7ddcf09d554c91b3b29961", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -1,3 +1,12 @@\n+2008-11-26  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR testsuite/28870\n+\t* testsuite/lib/libstdc++.exp: Include new timeout library files.\n+\t(libstdc++_init): Define tool_timeout.\n+\t(dg-test): Override DejaGnu proc.\n+\t(v3_target_compile): Set timeout value from new proc.\n+\t(v3_target_compile_as_c): Ditto.\n+\n 2008-11-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/38244 (cont, debug bits)"}, {"sha": "3b2e18b7b2c74330e3ff6bcb4feb8f456a802af5", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4038ca243dc612e06deeec2cb9dfd4e89a01962/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4038ca243dc612e06deeec2cb9dfd4e89a01962/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=d4038ca243dc612e06deeec2cb9dfd4e89a01962", "patch": "@@ -53,6 +53,8 @@ load_gcc_lib target-supports-dg.exp\n load_lib prune.exp\n load_lib dg-options.exp\n load_gcc_lib target-libpath.exp\n+load_gcc_lib timeout.exp\n+load_gcc_lib timeout-dg.exp\n load_gcc_lib wrapper.exp\n \n # Useful for debugging.  Pass the name of a variable and the verbosity\n@@ -89,6 +91,7 @@ proc libstdc++_init { testfile } {\n     global ld_library_path\n     global target_triplet\n     global flags_file\n+    global tool_timeout\n \n     # We set LC_ALL and LANG to C so that we get the same error\n     # messages as expected.\n@@ -184,6 +187,9 @@ proc libstdc++_init { testfile } {\n \tset compiler [transform \"g++\"]\n     }\n \n+    # Set the default timeout for v3 tests.\n+    set tool_timeout 600\n+\n     # Default settings.\n     set cxx [transform \"g++\"]\n     set cxxflags \"-g -O2 -D_GLIBCXX_ASSERT -fmessage-length=0\"\n@@ -346,6 +352,24 @@ proc libstdc++-dg-test { prog do_what extra_tool_flags } {\n     return [list $comp_output $output_file]\n }\n \n+# Override the DejaGnu dg-test in order to clear flags after a test, as\n+# is done for compiler tests in gcc-dg.exp.\n+\n+if { [info procs saved-dg-test] == [list] } {\n+    rename dg-test saved-dg-test\n+\n+    proc dg-test { args } {\n+\tglobal errorInfo\n+\n+\tif { [ catch { eval saved-dg-test $args } errmsg ] } {\n+\t    set saved_info $errorInfo\n+\t    unset_timeout_vars\n+\t    error $errmsg $saved_info\n+\t}\n+\tunset_timeout_vars\n+    }\n+}\n+\n # True if the library supports wchar_t.\n set v3-wchar_t 0\n \n@@ -389,7 +413,7 @@ proc v3_target_compile { source dest type options } {\n     }\n \n     lappend options \"compiler=$cxx_final\"\n-    lappend options \"timeout=600\"\n+    lappend options \"timeout=[timeout_value]\"\n \n     return [target_compile $source $dest $type $options]\n }\n@@ -455,7 +479,7 @@ proc v3_target_compile_as_c { source dest type options } {\n     set cc_final [concat $cc_final \"$libdir\"]\n \n     lappend options \"compiler=$cc_final\"\n-    lappend options \"timeout=600\"\n+    lappend options \"timeout=[timeout_value]\"\n \n     return [target_compile $source $dest $type $options]\n }"}]}