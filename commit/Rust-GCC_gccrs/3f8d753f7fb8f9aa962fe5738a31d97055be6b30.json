{"sha": "3f8d753f7fb8f9aa962fe5738a31d97055be6b30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4ZDc1M2Y3ZmI4ZjlhYTk2MmZlNTczOGEzMWQ5NzA1NWJlNmIzMA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-06-14T19:33:10Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-06-14T19:33:10Z"}, "message": "re PR target/53568 (SH Target: Add support for bswap built-ins)\n\n\tPR target/53568\n\t* config/sh/sh.md: Add peephole for swapbsi2.\n\t(*swapbisi2_and_shl8, *swapbhisi2): New insns and splits.\n\nFrom-SVN: r188632", "tree": {"sha": "27432742d1ed42888267fe0dac1084e4d325e49a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27432742d1ed42888267fe0dac1084e4d325e49a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f8d753f7fb8f9aa962fe5738a31d97055be6b30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8d753f7fb8f9aa962fe5738a31d97055be6b30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8d753f7fb8f9aa962fe5738a31d97055be6b30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8d753f7fb8f9aa962fe5738a31d97055be6b30/comments", "author": null, "committer": null, "parents": [{"sha": "c5b7018e029f05088b5b639d482a833ae0dd673d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5b7018e029f05088b5b639d482a833ae0dd673d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5b7018e029f05088b5b639d482a833ae0dd673d"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "e9b0007e96ed14f57e91d8c3b5e584fd8519b3ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8d753f7fb8f9aa962fe5738a31d97055be6b30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8d753f7fb8f9aa962fe5738a31d97055be6b30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f8d753f7fb8f9aa962fe5738a31d97055be6b30", "patch": "@@ -1,3 +1,9 @@\n+2012-06-14  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/53568\n+\t* config/sh/sh.md: Add peephole for swapbsi2.\n+\t(*swapbisi2_and_shl8, *swapbhisi2): New insns and splits.\n+\n 2012-06-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*zero_extendsidi2): Mark movd alternatives"}, {"sha": "852f9fd36ea0543ee6397d5d6be636c868639188", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8d753f7fb8f9aa962fe5738a31d97055be6b30/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8d753f7fb8f9aa962fe5738a31d97055be6b30/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=3f8d753f7fb8f9aa962fe5738a31d97055be6b30", "patch": "@@ -4561,6 +4561,81 @@ label:\n   \"swap.b\t%1,%0\"\n   [(set_attr \"type\" \"arith\")])\n \n+;; The *swapbisi2_and_shl8 pattern helps the combine pass simplifying\n+;; partial byte swap expressions such as...\n+;;   ((x & 0xFF) << 8) | ((x >> 8) & 0xFF).\n+;; ...which are currently not handled by the tree optimizers.\n+;; The combine pass will not initially try to combine the full expression,\n+;; but only some sub-expressions.  In such a case the *swapbisi2_and_shl8\n+;; pattern acts as an intermediate pattern that will eventually lead combine\n+;; to the swapbsi2 pattern above.\n+;; As a side effect this also improves code that does (x & 0xFF) << 8\n+;; or (x << 8) & 0xFF00.\n+(define_insn_and_split \"*swapbisi2_and_shl8\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(ior:SI (and:SI (ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\")\n+\t\t\t\t   (const_int 8))\n+\t\t\t(const_int 65280))\n+\t\t(match_operand:SI 2 \"arith_reg_operand\" \"r\")))]\n+  \"TARGET_SH1 && ! reload_in_progress && ! reload_completed\"\n+  \"#\"\n+  \"&& can_create_pseudo_p ()\"\n+  [(const_int 0)]\n+{\n+  rtx tmp0 = gen_reg_rtx (SImode);\n+  rtx tmp1 = gen_reg_rtx (SImode);\n+\n+  emit_insn (gen_zero_extendqisi2 (tmp0, gen_lowpart (QImode, operands[1])));\n+  emit_insn (gen_swapbsi2 (tmp1, tmp0));\n+  emit_insn (gen_iorsi3 (operands[0], tmp1, operands[2]));\n+  DONE;\n+})\n+\n+;; The *swapbhisi2 pattern is, like the *swapbisi2_and_shl8 pattern, another\n+;; intermediate pattern that will help the combine pass arriving at swapbsi2.\n+(define_insn_and_split \"*swapbhisi2\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(ior:SI (and:SI (ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\")\n+\t\t\t\t   (const_int 8))\n+\t\t\t(const_int 65280))\n+\t\t(zero_extract:SI (match_dup 1) (const_int 8) (const_int 8))))]\n+  \"TARGET_SH1 && ! reload_in_progress && ! reload_completed\"\n+  \"#\"\n+  \"&& can_create_pseudo_p ()\"\n+  [(const_int 0)]\n+{\n+  rtx tmp = gen_reg_rtx (SImode);\n+\n+  emit_insn (gen_zero_extendhisi2 (tmp, gen_lowpart (HImode, operands[1])));\n+  emit_insn (gen_swapbsi2 (operands[0], tmp));\n+  DONE;\n+})\n+\n+;; In some cases the swapbsi2 pattern might leave a sequence such as...\n+;;   swap.b  r4,r4\n+;;   mov     r4,r0\n+;;\n+;; which can be simplified to...\n+;;   swap.b  r4,r0\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n+\t(ior:SI (and:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n+\t\t\t(const_int 4294901760))\n+\t\t(ior:SI (and:SI (ashift:SI (match_dup 1) (const_int 8))\n+\t\t\t\t(const_int 65280))\n+\t\t\t(and:SI (ashiftrt:SI (match_dup 1) (const_int 8))\n+\t\t\t\t(const_int 255)))))\n+   (set (match_operand:SI 2 \"arith_reg_dest\" \"\")\n+\t(match_dup 0))]\n+  \"TARGET_SH1 && peep2_reg_dead_p (2, operands[0])\"\n+  [(set (match_dup 2)\n+\t(ior:SI (and:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n+\t\t\t(const_int 4294901760))\n+\t\t(ior:SI (and:SI (ashift:SI (match_dup 1) (const_int 8))\n+\t\t\t\t(const_int 65280))\n+\t\t\t(and:SI (ashiftrt:SI (match_dup 1) (const_int 8))\n+\t\t\t\t(const_int 255)))))])\n+\n \f\n ;; -------------------------------------------------------------------------\n ;; Zero extension instructions"}]}