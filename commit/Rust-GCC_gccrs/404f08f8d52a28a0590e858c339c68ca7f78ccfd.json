{"sha": "404f08f8d52a28a0590e858c339c68ca7f78ccfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA0ZjA4ZjhkNTJhMjhhMDU5MGU4NThjMzM5YzY4Y2E3Zjc4Y2NmZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-05-12T17:34:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-05-12T17:34:28Z"}, "message": "call.c (add_candidates): Distinguish between type(x) and x.operator type().\n\n\t* call.c (add_candidates): Distinguish between type(x) and\n\tx.operator type().\n\t(convert_class_to_reference): Set LOOKUP_NO_CONVERSION.\n\t(build_new_method_call): Give better error for conversion op.\n\nFrom-SVN: r159333", "tree": {"sha": "6f028aa195e1257bca4a73bcbc7579f2af2613ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f028aa195e1257bca4a73bcbc7579f2af2613ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/404f08f8d52a28a0590e858c339c68ca7f78ccfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/404f08f8d52a28a0590e858c339c68ca7f78ccfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/404f08f8d52a28a0590e858c339c68ca7f78ccfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/404f08f8d52a28a0590e858c339c68ca7f78ccfd/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c824000a5b855d454483bee7d32850f161ecdab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c824000a5b855d454483bee7d32850f161ecdab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c824000a5b855d454483bee7d32850f161ecdab"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "3872df21d16c51766e8993fc932cca8cf5507172", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404f08f8d52a28a0590e858c339c68ca7f78ccfd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404f08f8d52a28a0590e858c339c68ca7f78ccfd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=404f08f8d52a28a0590e858c339c68ca7f78ccfd", "patch": "@@ -1,5 +1,10 @@\n 2010-05-12  Jason Merrill  <jason@redhat.com>\n \n+\t* call.c (add_candidates): Distinguish between type(x) and\n+\tx.operator type().\n+\t(convert_class_to_reference): Set LOOKUP_NO_CONVERSION.\n+\t(build_new_method_call): Give better error for conversion op.\n+\n \t* call.c (add_candidates): Add first_arg and return_type parms.\n \tAdd special constructor/conversion op handling.\n \t(convert_class_to_reference): Use it."}, {"sha": "204a6bbcfc13bd0419ed095574c9ca21d7704a17", "filename": "gcc/cp/call.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404f08f8d52a28a0590e858c339c68ca7f78ccfd/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404f08f8d52a28a0590e858c339c68ca7f78ccfd/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=404f08f8d52a28a0590e858c339c68ca7f78ccfd", "patch": "@@ -1053,6 +1053,10 @@ convert_class_to_reference (tree reference_type, tree s, tree expr, int flags)\n \n   t = TREE_TYPE (reference_type);\n \n+  /* We're performing a user-defined conversion to a desired type, so set\n+     this for the benefit of add_candidates.  */\n+  flags |= LOOKUP_NO_CONVERSION;\n+\n   for (; conversions; conversions = TREE_CHAIN (conversions))\n     {\n       tree fns = TREE_VALUE (conversions);\n@@ -4017,7 +4021,12 @@ add_candidates (tree fns, tree first_arg, const VEC(tree,gc) *args,\n   if (DECL_CONV_FN_P (fn))\n     {\n       check_converting = !!(flags & LOOKUP_ONLYCONVERTING);\n-      strict = DEDUCE_CONV;\n+      if (flags & LOOKUP_NO_CONVERSION)\n+\t/* We're doing return_type(x).  */\n+\tstrict = DEDUCE_CONV;\n+      else\n+\t/* We're doing x.operator return_type().  */\n+\tstrict = DEDUCE_EXACT;\n       /* [over.match.funcs] For conversion functions, the function\n \t is considered to be a member of the class of the implicit\n \t object argument for the purpose of defining the type of\n@@ -6318,6 +6327,10 @@ build_new_method_call (tree instance, tree fns, VEC(tree,gc) **args,\n \t{\n \t  if (!COMPLETE_TYPE_P (basetype))\n \t    cxx_incomplete_type_error (instance_ptr, basetype);\n+\t  else if (optype)\n+\t    error (\"no matching function for call to %<%T::operator %T(%A)%#V%>\",\n+\t\t   basetype, optype, build_tree_list_vec (user_args),\n+\t\t   TREE_TYPE (TREE_TYPE (instance_ptr)));\n \t  else\n \t    {\n \t      char *pretty_name;"}, {"sha": "df961e04856f14f4ab0ef67de8c346e036919d76", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404f08f8d52a28a0590e858c339c68ca7f78ccfd/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404f08f8d52a28a0590e858c339c68ca7f78ccfd/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=404f08f8d52a28a0590e858c339c68ca7f78ccfd", "patch": "@@ -4109,8 +4109,8 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };\n    have already generated a temporary, such as reference\n    initialization and the catch parameter.  */\n #define DIRECT_BIND (1 << 4)\n-/* User-defined conversions are not permitted.  (Built-in conversions\n-   are permitted.)  */\n+/* We're performing a user-defined conversion, so more user-defined\n+   conversions are not permitted (only built-in conversions).  */\n #define LOOKUP_NO_CONVERSION (1 << 5)\n /* The user has explicitly called a destructor.  (Therefore, we do\n    not need to check that the object is non-NULL before calling the"}, {"sha": "a431f8af5033ff795f4407cde1e3c40c63e0c445", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404f08f8d52a28a0590e858c339c68ca7f78ccfd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404f08f8d52a28a0590e858c339c68ca7f78ccfd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=404f08f8d52a28a0590e858c339c68ca7f78ccfd", "patch": "@@ -1,5 +1,8 @@\n 2010-05-12  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/template/conv11.C: New.\n+\t* g++.dg/conversion/op1.C: Adjust expected error.\n+\n \t* g++.old-deja/g++.robertl/eb43.C: Prune \"candidates\" messages.\n \n 2010-05-12  H.J. Lu  <hongjiu.lu@intel.com>"}, {"sha": "990cdaa093b7b8fecf0e672382d7fc360f537ccc", "filename": "gcc/testsuite/g++.dg/conversion/op1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404f08f8d52a28a0590e858c339c68ca7f78ccfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404f08f8d52a28a0590e858c339c68ca7f78ccfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop1.C?ref=404f08f8d52a28a0590e858c339c68ca7f78ccfd", "patch": "@@ -6,5 +6,5 @@ class C\n \n int fn (C c) \n { \n-  return C::operator float(c); // { dg-error \"operator U\" }\n+  return C::operator float(c); // { dg-error \"operator float.C\" }\n }"}, {"sha": "846b852f493eef32e63b0db10913a97d8f835929", "filename": "gcc/testsuite/g++.dg/template/conv11.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404f08f8d52a28a0590e858c339c68ca7f78ccfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconv11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404f08f8d52a28a0590e858c339c68ca7f78ccfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconv11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconv11.C?ref=404f08f8d52a28a0590e858c339c68ca7f78ccfd", "patch": "@@ -0,0 +1,10 @@\n+int i;\n+struct A\n+{\n+  template <class T> operator T&() { return i; }\n+};\n+\n+int main()\n+{\n+  A().operator int();\t\t// { dg-error \"operator int\" }\n+}"}]}