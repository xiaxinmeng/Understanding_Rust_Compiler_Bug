{"sha": "5c726f3e42e227fdca32289e99b815988c40481a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM3MjZmM2U0MmUyMjdmZGNhMzIyODllOTliODE1OTg4YzQwNDgxYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-12-12T21:14:54Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-02T08:58:04Z"}, "message": "[Ada] Fix bogus error for clause on derived type with variant part\n\n2020-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch3.adb (Replace_Components): Rename into...\n\t(Replace_Discriminants): ...this.  Replace girder discriminants\n\twith non-girder ones.  Do not replace components.\n\t* sem_ch13.adb (Check_Record_Representation_Clause): Deal with\n\tnon-girder discriminants correctly.", "tree": {"sha": "5c8843917c2e7e69f095333f2d4753a6b36315cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c8843917c2e7e69f095333f2d4753a6b36315cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c726f3e42e227fdca32289e99b815988c40481a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c726f3e42e227fdca32289e99b815988c40481a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c726f3e42e227fdca32289e99b815988c40481a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c726f3e42e227fdca32289e99b815988c40481a/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e386872e9c949297b76172c6a7c703117f8026d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e386872e9c949297b76172c6a7c703117f8026d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e386872e9c949297b76172c6a7c703117f8026d0"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "6287434426eb626acbe7a78ca71891f2a4d5ff52", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c726f3e42e227fdca32289e99b815988c40481a/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c726f3e42e227fdca32289e99b815988c40481a/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=5c726f3e42e227fdca32289e99b815988c40481a", "patch": "@@ -10862,6 +10862,8 @@ package body Sem_Ch13 is\n                   end if;\n \n                   --  Outer level of record definition, check discriminants\n+                  --  but be careful not to flag a non-girder discriminant\n+                  --  and the girder discriminant it renames as overlapping.\n \n                   if Nkind_In (Clist, N_Full_Type_Declaration,\n                                       N_Private_Type_Declaration)\n@@ -10870,7 +10872,9 @@ package body Sem_Ch13 is\n                         C2_Ent :=\n                           First_Discriminant (Defining_Identifier (Clist));\n                         while Present (C2_Ent) loop\n-                           exit when C1_Ent = C2_Ent;\n+                           exit when\n+                             Original_Record_Component (C1_Ent) =\n+                               Original_Record_Component (C2_Ent);\n                            Check_Component_Overlap (C1_Ent, C2_Ent);\n                            Next_Discriminant (C2_Ent);\n                         end loop;"}, {"sha": "f965e8ca6cf4f777c4ee4ff2db33142c3e49d865", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c726f3e42e227fdca32289e99b815988c40481a/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c726f3e42e227fdca32289e99b815988c40481a/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=5c726f3e42e227fdca32289e99b815988c40481a", "patch": "@@ -657,14 +657,22 @@ package body Sem_Ch3 is\n    --  declaration, Prev_T is the original incomplete type, whose full view is\n    --  the record type.\n \n-   procedure Replace_Components (Typ : Entity_Id; Decl : Node_Id);\n-   --  Subsidiary to Build_Derived_Record_Type. For untagged records, we\n-   --  build a copy of the declaration tree of the parent, and we create\n-   --  independently the list of components for the derived type. Semantic\n-   --  information uses the component entities, but record representation\n-   --  clauses are validated on the declaration tree. This procedure replaces\n-   --  discriminants and components in the declaration with those that have\n-   --  been created by Inherit_Components.\n+   procedure Replace_Discriminants (Typ : Entity_Id; Decl : Node_Id);\n+   --  Subsidiary to Build_Derived_Record_Type. For untagged record types, we\n+   --  first create the list of components for the derived type from that of\n+   --  the parent by means of Inherit_Components and then build a copy of the\n+   --  declaration tree of the parent with the help of the mapping returned by\n+   --  Inherit_Components, which will for example by used to validate record\n+   --  representation claused given for the derived type. If the parent type\n+   --  is private and has discriminants, the ancestor discriminants used in the\n+   --  inheritance are that of the private declaration, whereas the ancestor\n+   --  discriminants present in the declaration tree of the parent are that of\n+   --  the full declaration; as a consequence, the remapping done during the\n+   --  copy will leave the references to the ancestor discriminants unchanged\n+   --  in the declaration tree and they need to be fixed up. If the derived\n+   --  type has a known discriminant part, then the remapping done during the\n+   --  copy will only create references to the girder discriminants and they\n+   --  need to be replaced with references to the non-girder discriminants.\n \n    procedure Set_Fixed_Range\n      (E   : Entity_Id;\n@@ -9628,7 +9636,7 @@ package body Sem_Ch3 is\n             Set_Stored_Constraint\n               (Derived_Type, Expand_To_Stored_Constraint (Parent_Type, Discs));\n \n-            Replace_Components (Derived_Type, New_Decl);\n+            Replace_Discriminants (Derived_Type, New_Decl);\n          end if;\n \n          --  Insert the new derived type declaration\n@@ -22292,11 +22300,11 @@ package body Sem_Ch3 is\n       end if;\n    end Record_Type_Definition;\n \n-   ------------------------\n-   -- Replace_Components --\n-   ------------------------\n+   ---------------------------\n+   -- Replace_Discriminants --\n+   ---------------------------\n \n-   procedure Replace_Components (Typ : Entity_Id; Decl : Node_Id) is\n+   procedure Replace_Discriminants (Typ : Entity_Id; Decl : Node_Id) is\n       function Process (N : Node_Id) return Traverse_Result;\n \n       -------------\n@@ -22310,7 +22318,9 @@ package body Sem_Ch3 is\n          if Nkind (N) = N_Discriminant_Specification then\n             Comp := First_Discriminant (Typ);\n             while Present (Comp) loop\n-               if Chars (Comp) = Chars (Defining_Identifier (N)) then\n+               if Original_Record_Component (Comp) = Defining_Identifier (N)\n+                 or else Chars (Comp) = Chars (Defining_Identifier (N))\n+               then\n                   Set_Defining_Identifier (N, Comp);\n                   exit;\n                end if;\n@@ -22321,36 +22331,27 @@ package body Sem_Ch3 is\n          elsif Nkind (N) = N_Variant_Part then\n             Comp := First_Discriminant (Typ);\n             while Present (Comp) loop\n-               if Chars (Comp) = Chars (Name (N)) then\n-                  Set_Entity (Name (N), Comp);\n+               if Original_Record_Component (Comp) = Entity (Name (N))\n+                 or else Chars (Comp) = Chars (Name (N))\n+               then\n+                  Set_Name (N, New_Occurrence_Of (Comp, Sloc (N)));\n                   exit;\n                end if;\n \n                Next_Discriminant (Comp);\n             end loop;\n-\n-         elsif Nkind (N) = N_Component_Declaration then\n-            Comp := First_Component (Typ);\n-            while Present (Comp) loop\n-               if Chars (Comp) = Chars (Defining_Identifier (N)) then\n-                  Set_Defining_Identifier (N, Comp);\n-                  exit;\n-               end if;\n-\n-               Next_Component (Comp);\n-            end loop;\n          end if;\n \n          return OK;\n       end Process;\n \n       procedure Replace is new Traverse_Proc (Process);\n \n-   --  Start of processing for Replace_Components\n+   --  Start of processing for Replace_Discriminants\n \n    begin\n       Replace (Decl);\n-   end Replace_Components;\n+   end Replace_Discriminants;\n \n    -------------------------------\n    -- Set_Completion_Referenced --"}]}