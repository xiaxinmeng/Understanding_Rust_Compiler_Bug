{"sha": "0ee285909bcef729415995e16c68e8713c59996f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVlMjg1OTA5YmNlZjcyOTQxNTk5NWUxNmM2OGU4NzEzYzU5OTk2Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-03-14T08:13:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-14T08:13:09Z"}, "message": "re PR c++/89652 (ICE during constexpr evaluation)\n\n\tPR c++/89652\n\t* constexpr.c (struct constexpr_ctx): Change save_exprs type from\n\thash_set<tree> to vec<tree>.\n\t(cxx_eval_call_expression): Adjust for save_exprs being a vec instead\n\tof hash_set.\n\t(cxx_eval_loop_expr): Likewise.  Truncate the vector after each\n\tremoval of SAVE_EXPRs from values.\n\t(cxx_eval_constant_expression) <case SAVE_EXPR>: Call safe_push\n\tmethod on save_exprs instead of add.\n\n\t* g++.dg/cpp1y/constexpr-89652.C: New test.\n\nFrom-SVN: r269671", "tree": {"sha": "9b58ba70a1a25f6b7a582ab1da5e135537361b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b58ba70a1a25f6b7a582ab1da5e135537361b8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ee285909bcef729415995e16c68e8713c59996f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee285909bcef729415995e16c68e8713c59996f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ee285909bcef729415995e16c68e8713c59996f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee285909bcef729415995e16c68e8713c59996f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7da0bca130c98fa219b81f58da44f5e1222b321a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7da0bca130c98fa219b81f58da44f5e1222b321a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7da0bca130c98fa219b81f58da44f5e1222b321a"}], "stats": {"total": 83, "additions": 70, "deletions": 13}, "files": [{"sha": "7c0b4f47322686b5c9d76561077e26534451d05b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee285909bcef729415995e16c68e8713c59996f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee285909bcef729415995e16c68e8713c59996f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0ee285909bcef729415995e16c68e8713c59996f", "patch": "@@ -1,3 +1,15 @@\n+2019-03-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/89652\n+\t* constexpr.c (struct constexpr_ctx): Change save_exprs type from\n+\thash_set<tree> to vec<tree>.\n+\t(cxx_eval_call_expression): Adjust for save_exprs being a vec instead\n+\tof hash_set.\n+\t(cxx_eval_loop_expr): Likewise.  Truncate the vector after each\n+\tremoval of SAVE_EXPRs from values.\n+\t(cxx_eval_constant_expression) <case SAVE_EXPR>: Call safe_push\n+\tmethod on save_exprs instead of add.\n+\n 2019-03-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/86521 - C++17 copy elision in initialization by constructor."}, {"sha": "68e78d0cece2a619e119f67169a371ce8bf3a999", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee285909bcef729415995e16c68e8713c59996f/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee285909bcef729415995e16c68e8713c59996f/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=0ee285909bcef729415995e16c68e8713c59996f", "patch": "@@ -1024,7 +1024,7 @@ struct constexpr_ctx {\n   hash_map<tree,tree> *values;\n   /* SAVE_EXPRs that we've seen within the current LOOP_EXPR.  NULL if we\n      aren't inside a loop.  */\n-  hash_set<tree> *save_exprs;\n+  vec<tree> *save_exprs;\n   /* The CONSTRUCTOR we're currently building up for an aggregate\n      initializer.  */\n   tree ctor;\n@@ -1831,7 +1831,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t  /* Track the callee's evaluated SAVE_EXPRs so that we can forget\n \t     their values after the call.  */\n \t  constexpr_ctx ctx_with_save_exprs = *ctx;\n-\t  hash_set<tree> save_exprs;\n+\t  auto_vec<tree, 10> save_exprs;\n \t  ctx_with_save_exprs.save_exprs = &save_exprs;\n \t  ctx_with_save_exprs.call = &new_call;\n \n@@ -1862,9 +1862,10 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t    }\n \n \t  /* Forget the saved values of the callee's SAVE_EXPRs.  */\n-\t  for (hash_set<tree>::iterator iter = save_exprs.begin();\n-\t       iter != save_exprs.end(); ++iter)\n-\t    ctx_with_save_exprs.values->remove (*iter);\n+\t  unsigned int i;\n+\t  tree save_expr;\n+\t  FOR_EACH_VEC_ELT (save_exprs, i, save_expr)\n+\t    ctx_with_save_exprs.values->remove (save_expr);\n \n \t  /* Remove the parms/result from the values map.  Is it worth\n \t     bothering to do this when the map itself is only live for\n@@ -4190,7 +4191,7 @@ cxx_eval_loop_expr (const constexpr_ctx *ctx, tree t,\n     default:\n       gcc_unreachable ();\n     }\n-  hash_set<tree> save_exprs;\n+  auto_vec<tree, 10> save_exprs;\n   new_ctx.save_exprs = &save_exprs;\n   do\n     {\n@@ -4234,9 +4235,11 @@ cxx_eval_loop_expr (const constexpr_ctx *ctx, tree t,\n \t}\n \n       /* Forget saved values of SAVE_EXPRs.  */\n-      for (hash_set<tree>::iterator iter = save_exprs.begin();\n-\t   iter != save_exprs.end(); ++iter)\n-\tnew_ctx.values->remove (*iter);\n+      unsigned int i;\n+      tree save_expr;\n+      FOR_EACH_VEC_ELT (save_exprs, i, save_expr)\n+\tnew_ctx.values->remove (save_expr);\n+      save_exprs.truncate (0);\n \n       if (++count >= constexpr_loop_limit)\n \t{\n@@ -4256,9 +4259,10 @@ cxx_eval_loop_expr (const constexpr_ctx *ctx, tree t,\n \t && !*non_constant_p);\n \n   /* Forget saved values of SAVE_EXPRs.  */\n-  for (hash_set<tree>::iterator iter = save_exprs.begin();\n-       iter != save_exprs.end(); ++iter)\n-    new_ctx.values->remove (*iter);\n+  unsigned int i;\n+  tree save_expr;\n+  FOR_EACH_VEC_ELT (save_exprs, i, save_expr)\n+    new_ctx.values->remove (save_expr);\n \n   return NULL_TREE;\n }\n@@ -4616,7 +4620,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t\t    non_constant_p, overflow_p);\n \t  ctx->values->put (t, r);\n \t  if (ctx->save_exprs)\n-\t    ctx->save_exprs->add (t);\n+\t    ctx->save_exprs->safe_push (t);\n \t}\n       break;\n "}, {"sha": "73ac51a8bbde76cdc3e34e4fe24547f3380cfe52", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee285909bcef729415995e16c68e8713c59996f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee285909bcef729415995e16c68e8713c59996f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ee285909bcef729415995e16c68e8713c59996f", "patch": "@@ -1,3 +1,8 @@\n+2019-03-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/89652\n+\t* g++.dg/cpp1y/constexpr-89652.C: New test.\n+\n 2019-03-13  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/87045"}, {"sha": "8d0631e535b480f693d76225cb2fcb8f25f6659a", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-89652.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee285909bcef729415995e16c68e8713c59996f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89652.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee285909bcef729415995e16c68e8713c59996f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89652.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89652.C?ref=0ee285909bcef729415995e16c68e8713c59996f", "patch": "@@ -0,0 +1,36 @@\n+// PR c++/89652\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"\" }\n+\n+template <typename T> constexpr auto foo (T &e) { return e.foo (); }\n+template <typename T> constexpr auto bar (T &e) { return foo (e); }\n+template <typename T, int N> struct A { typedef T a[N]; };\n+template <typename T, unsigned long N> struct B {\n+  typedef T *b;\n+  typename A<T, N>::a d;\n+  constexpr b foo () { return d; }\n+};\n+template <typename> struct C { long m; };\n+struct D { long n; };\n+template <typename, unsigned long> struct E {\n+  B<C<int>, 1>::b p;\n+  constexpr D operator* () { return {p->m}; }\n+  constexpr E operator++ (int) { auto a{*this}; ++p; return a; }\n+};\n+template <typename T, unsigned long N>\n+constexpr bool operator!= (E<T, N> a, E<T, N>) { return a.p; }\n+template <unsigned long N, typename T, unsigned long M>\n+constexpr auto baz (B<T, M> s, B<D, N>)\n+{\n+  B<D, M> t{};\n+  auto q{foo (t)};\n+  using u = E<T, M>;\n+  auto v = u{bar (s)};\n+  auto w = u{};\n+  while (v != w)\n+    *q++ = *v++;\n+  return t;\n+}\n+constexpr auto a = B<C<int>, 5>{};\n+auto b = B<D, 0>{};\n+auto c = baz (a, b);"}]}