{"sha": "4730fa4fadc52d73257e885543b5d60ade9d1d49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDczMGZhNGZhZGM1MmQ3MzI1N2U4ODU1NDNiNWQ2MGFkZTlkMWQ0OQ==", "commit": {"author": {"name": "Gavin Romig-Koch", "email": "gavin@cetus.cygnus.com", "date": "2000-03-08T14:31:10Z"}, "committer": {"name": "Gavin Romig-Koch", "email": "gavin@gcc.gnu.org", "date": "2000-03-08T14:31:10Z"}, "message": "mips.c (mips_expand_prologue): If the last named argument is the vararg marker \"va_list\"...\n\n\t* config/mips/mips.c (mips_expand_prologue): If the last\n\tnamed argument is the vararg marker \"va_list\", treat it as\n\tan unnamed argument.\n\nFrom-SVN: r32421", "tree": {"sha": "4aaa8fa3d3bfdf917d9d68b82872a8376ad83858", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aaa8fa3d3bfdf917d9d68b82872a8376ad83858"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4730fa4fadc52d73257e885543b5d60ade9d1d49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4730fa4fadc52d73257e885543b5d60ade9d1d49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4730fa4fadc52d73257e885543b5d60ade9d1d49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4730fa4fadc52d73257e885543b5d60ade9d1d49/comments", "author": null, "committer": null, "parents": [{"sha": "917d7595c1de40514eb89f8fce27aa8a95dce7cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917d7595c1de40514eb89f8fce27aa8a95dce7cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/917d7595c1de40514eb89f8fce27aa8a95dce7cf"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "d76abafc907f9a893e516d3932dabd1acf737501", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4730fa4fadc52d73257e885543b5d60ade9d1d49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4730fa4fadc52d73257e885543b5d60ade9d1d49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4730fa4fadc52d73257e885543b5d60ade9d1d49", "patch": "@@ -1,3 +1,9 @@\n+2000-03-08  Gavin Romig-Koch  <gavin@cetus.cygnus.com>\n+\n+\t* config/mips/mips.c (mips_expand_prologue): If the last \n+\tnamed argument is the vararg marker \"va_list\", treat it as\n+\tan unnamed argument.\n+\n 2000-03-08  Clinton Popetz  <cpopetz@cygnus.com>\n \n \t* dbxout.c (dbxout_parms): When correcting for promoted "}, {"sha": "dedbe05b9c4100ced12fc4670f97401e78c9d790", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4730fa4fadc52d73257e885543b5d60ade9d1d49/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4730fa4fadc52d73257e885543b5d60ade9d1d49/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=4730fa4fadc52d73257e885543b5d60ade9d1d49", "patch": "@@ -6613,7 +6613,7 @@ mips_expand_prologue ()\n   int regno;\n   HOST_WIDE_INT tsize;\n   rtx tmp_rtx = 0;\n-  const char *arg_name = 0;\n+  int last_arg_is_vararg_marker = 0;\n   tree fndecl = current_function_decl;\n   tree fntype = TREE_TYPE (fndecl);\n   tree fnargs = DECL_ARGUMENTS (fndecl);\n@@ -6637,7 +6637,11 @@ mips_expand_prologue ()\n       fnargs = function_result_decl;\n     }\n \n-  /* Determine the last argument, and get its name.  */\n+  /* For arguments passed in registers, find the register number\n+     of the first argument in the variable part of the argument list,\n+     otherwise GP_ARG_LAST+1.  Note also if the last argument is \n+     the varargs special argument, and treat it as part of the\n+     variable arguments. */\n \n   INIT_CUMULATIVE_ARGS (args_so_far, fntype, NULL_RTX, 0);\n   regno = GP_ARG_FIRST;\n@@ -6656,34 +6660,39 @@ mips_expand_prologue ()\n \n       entry_parm = FUNCTION_ARG (args_so_far, passed_mode, passed_type, 1);\n \n+      FUNCTION_ARG_ADVANCE (args_so_far, passed_mode, passed_type, 1);\n+      next_arg = TREE_CHAIN (cur_arg);\n+\n       if (entry_parm)\n \t{\n-\t  int words;\n-\n-\t  /* passed in a register, so will get homed automatically */\n-\t  if (GET_MODE (entry_parm) == BLKmode)\n-\t    words = (int_size_in_bytes (passed_type) + 3) / 4;\n+\t  if (next_arg == 0\n+\t      && DECL_NAME (cur_arg)\n+\t      && ((0 == strcmp (IDENTIFIER_POINTER (DECL_NAME (cur_arg)),\n+\t\t\t\t\"__builtin_va_alist\"))\n+\t\t  || (0 == strcmp (IDENTIFIER_POINTER (DECL_NAME (cur_arg)),\n+\t\t\t\t   \"va_alist\"))))\n+\t    {\n+\t      last_arg_is_vararg_marker = 1;\n+\t      break;\n+\t    }\n \t  else\n-\t    words = (GET_MODE_SIZE (GET_MODE (entry_parm)) + 3) / 4;\n+\t    {\n+\t      int words;\n+\t  \n+\t      /* passed in a register, so will get homed automatically */\n+\t      if (GET_MODE (entry_parm) == BLKmode)\n+\t\twords = (int_size_in_bytes (passed_type) + 3) / 4;\n+\t      else\n+\t\twords = (GET_MODE_SIZE (GET_MODE (entry_parm)) + 3) / 4;\n \n-\t  regno = REGNO (entry_parm) + words - 1;\n+\t      regno = REGNO (entry_parm) + words - 1;\n+\t    }\n \t}\n       else\n \t{\n \t  regno = GP_ARG_LAST+1;\n \t  break;\n \t}\n-\n-      FUNCTION_ARG_ADVANCE (args_so_far, passed_mode, passed_type, 1);\n-\n-      next_arg = TREE_CHAIN (cur_arg);\n-      if (next_arg == 0)\n-\t{\n-\t  if (DECL_NAME (cur_arg))\n-\t    arg_name = IDENTIFIER_POINTER (DECL_NAME (cur_arg));\n-\n-\t  break;\n-\t}\n     }\n \n   /* In order to pass small structures by value in registers compatibly with\n@@ -6719,11 +6728,7 @@ mips_expand_prologue ()\n       && ((TYPE_ARG_TYPES (fntype) != 0\n \t   && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n \t       != void_type_node))\n-\t  || (arg_name != 0\n-\t      && ((arg_name[0] == '_'\n-\t\t   && strcmp (arg_name, \"__builtin_va_alist\") == 0)\n-\t\t  || (arg_name[0] == 'v'\n-\t\t      && strcmp (arg_name, \"va_alist\") == 0)))))\n+\t  || last_arg_is_vararg_marker))\n     {\n       int offset = (regno - GP_ARG_FIRST) * UNITS_PER_WORD;\n       rtx ptr = stack_pointer_rtx;"}]}