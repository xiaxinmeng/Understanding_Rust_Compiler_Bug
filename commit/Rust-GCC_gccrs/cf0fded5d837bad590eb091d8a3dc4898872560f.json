{"sha": "cf0fded5d837bad590eb091d8a3dc4898872560f", "node_id": "C_kwDOANBUbNoAKGNmMGZkZWQ1ZDgzN2JhZDU5MGViMDkxZDhhM2RjNDg5ODg3MjU2MGY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-15T20:02:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-16T20:47:19Z"}, "message": "libstdc++: Add preprocessor conditions for freestanding [PR106953]\n\nThis adds checks for _GLIBCXX_HOSTED to a number of headers which are\nnot currently installed for freestanding, but need to be for P1642R11\nsupport. For example, <iterator> needs to be installed for C++23\nfreestanding mode, but without stream iterators and streambuf iterators.\nSimilarly, <memory> needs to be installed, but without std::allocator\nand std::shared_ptr. This change disables the non-freestanding parts of\nthose headers.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/106953\n\t* include/backward/auto_ptr.h [!_GLIBCXX_HOSTED]: Do not define\n\tshared_ptr members.\n\t* include/bits/alloc_traits.h [!_GLIBCXX_HOSTED]: Do not declare\n\tstd::allocator_traits<std::allocator<T>> specializations for\n\tfreestanding.\n\t* include/bits/memoryfwd.h [!_GLIBCXX_HOSTED] (allocator): Do\n\tnot declare for freestanding.\n\t* include/bits/stl_algo.h [!_GLIBCXX_HOSTED] (stable_partition):\n\tDo not define for freestanding.\n\t[!_GLIBCXX_HOSTED] (merge, stable_sort): Do not use temporary\n\tbuffers for freestanding.\n\t* include/bits/stl_algobase.h [!_GLIBCXX_HOSTED]: Do not declare\n\tstreambuf iterators and overloaded algorithms using them.\n\t* include/bits/stl_uninitialized.h [!_GLIBCXX_HOSTED]: Do not\n\tdefine specialized overloads for std::allocator.\n\t* include/bits/unique_ptr.h [!_GLIBCXX_HOSTED] (make_unique)\n\t(make_unique_for_overwrite, operator<<): Do not define for\n\tfreestanding.\n\t* include/c_global/cstdlib [!_GLIBCXX_HOSTED] (_Exit): Declare.\n\tUse _GLIBCXX_NOTHROW instead of throw().\n\t* include/debug/assertions.h [!_GLIBCXX_HOSTED]: Ignore\n\t_GLIBCXX_DEBUG for freestanding.\n\t* include/debug/debug.h [!_GLIBCXX_DEBUG]: Likewise.\n\t* include/std/bit [!_GLIBCXX_HOSTED]: Do not use the custom\n\t__int_traits if <ext/numeric_traits.h> is available.\n\t* include/std/functional [!_GLIBCXX_HOSTED]: Do not include\n\theaders that aren't valid for freestanding.\n\t(boyer_moore_searcher, boyer_moore_horspool_searcher): Do not\n\tdefine for freestanding.\n\t* include/std/iterator [!_GLIBCXX_HOSTED]: Do not include\n\theaders that aren't valid for freestanding.\n\t* include/std/memory [!_GLIBCXX_HOSTED]: Likewise.\n\t* include/std/ranges [!_GLIBCXX_HOSTED] (istream_view): Do not\n\tdefine for freestanding.\n\t(views::__detail::__is_basic_string_view) [!_GLIBCXX_HOSTED]:\n\tDo not define partial specialization for freestanding.", "tree": {"sha": "5432be9bb4658aa077cc28353c9ff271a82de82b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5432be9bb4658aa077cc28353c9ff271a82de82b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf0fded5d837bad590eb091d8a3dc4898872560f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0fded5d837bad590eb091d8a3dc4898872560f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0fded5d837bad590eb091d8a3dc4898872560f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0fded5d837bad590eb091d8a3dc4898872560f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f4c37099a9f2415e00e94379c1206b3e9185c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f4c37099a9f2415e00e94379c1206b3e9185c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f4c37099a9f2415e00e94379c1206b3e9185c52"}], "stats": {"total": 166, "additions": 114, "deletions": 52}, "files": [{"sha": "093db5260fc390dc2b27eea40aa6688a946549a1", "filename": "libstdc++-v3/include/backward/auto_ptr.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h?ref=cf0fded5d837bad590eb091d8a3dc4898872560f", "patch": "@@ -300,6 +300,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     } _GLIBCXX11_DEPRECATED;\n \n #if __cplusplus >= 201103L\n+#if _GLIBCXX_HOSTED\n   template<_Lock_policy _Lp>\n   template<typename _Tp>\n     inline\n@@ -325,13 +326,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline\n     shared_ptr<_Tp>::shared_ptr(std::auto_ptr<_Tp1>&& __r)\n     : __shared_ptr<_Tp>(std::move(__r)) { }\n+#endif // HOSTED\n \n   template<typename _Tp, typename _Dp>\n   template<typename _Up, typename>\n     inline\n     unique_ptr<_Tp, _Dp>::unique_ptr(auto_ptr<_Up>&& __u) noexcept\n     : _M_t(__u.release(), deleter_type()) { }\n-#endif\n+#endif // C++11\n \n #pragma GCC diagnostic pop\n "}, {"sha": "507e8f1b6b2dabb84fa818563cd842042ad3a9b1", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=cf0fded5d837bad590eb091d8a3dc4898872560f", "patch": "@@ -33,9 +33,11 @@\n #include <bits/stl_construct.h>\n #include <bits/memoryfwd.h>\n #if __cplusplus >= 201103L\n-# include <bits/allocator.h>\n # include <bits/ptr_traits.h>\n # include <ext/numeric_traits.h>\n+# if _GLIBCXX_HOSTED\n+#  include <bits/allocator.h>\n+# endif\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -402,6 +404,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _S_select(__rhs, 0); }\n     };\n \n+#if _GLIBCXX_HOSTED\n+\n #if __cplusplus > 201703L\n # define __cpp_lib_constexpr_dynamic_alloc 201907L\n #endif\n@@ -660,6 +664,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       select_on_container_copy_construction(const allocator_type& __rhs)\n       { return __rhs; }\n     };\n+#endif\n \n   /// @cond undocumented\n #if __cplusplus < 201703L\n@@ -774,11 +779,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t typename _Alloc::value_type const&>::type\n     { };\n \n+#if _GLIBCXX_HOSTED\n   // std::allocator<_Tp> just requires CopyConstructible\n   template<typename _Tp>\n     struct __is_copy_insertable<allocator<_Tp>>\n     : is_copy_constructible<_Tp>\n     { };\n+#endif\n \n   // true if _Alloc::value_type is MoveInsertable into containers using _Alloc\n   // (might be wrong if _Alloc::construct exists but is not constrained,\n@@ -788,11 +795,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type\n     { };\n \n+#if _GLIBCXX_HOSTED\n   // std::allocator<_Tp> just requires MoveConstructible\n   template<typename _Tp>\n     struct __is_move_insertable<allocator<_Tp>>\n     : is_move_constructible<_Tp>\n     { };\n+#endif\n \n   // Trait to detect Allocator-like types.\n   template<typename _Alloc, typename = void>\n@@ -893,6 +902,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n     }\n \n+#if _GLIBCXX_HOSTED\n   template<typename _ForwardIterator, typename _Tp>\n     _GLIBCXX20_CONSTEXPR\n     inline void\n@@ -901,6 +911,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       _Destroy(__first, __last);\n     }\n+#endif\n   /// @endcond\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "ae164fa7b5ad2af9abff40f371894e69e8970a03", "filename": "libstdc++-v3/include/bits/memoryfwd.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmemoryfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmemoryfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmemoryfwd.h?ref=cf0fded5d837bad590eb091d8a3dc4898872560f", "patch": "@@ -60,11 +60,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n+#if _GLIBCXX_HOSTED\n   template<typename>\n     class allocator;\n \n   template<>\n     class allocator<void>;\n+#endif\n \n #if __cplusplus >= 201103L\n   /// Declare uses_allocator so it can be specialized in `<queue>` etc."}, {"sha": "e63fe66852e33db669c74c8e7cee10fe3a9c7fe0", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=cf0fded5d837bad590eb091d8a3dc4898872560f", "patch": "@@ -59,15 +59,17 @@\n #include <bits/algorithmfwd.h>\n #include <bits/stl_algobase.h>\n #include <bits/stl_heap.h>\n-#include <bits/stl_tempbuf.h>  // for _Temporary_buffer\n #include <bits/predefined_ops.h>\n \n #if __cplusplus >= 201103L\n #include <bits/uniform_int_dist.h>\n #endif\n \n-#if _GLIBCXX_HOSTED && (__cplusplus <= 201103L || _GLIBCXX_USE_DEPRECATED)\n-#include <cstdlib>\t     // for rand\n+#if _GLIBCXX_HOSTED\n+# include <bits/stl_tempbuf.h>  // for _Temporary_buffer\n+# if (__cplusplus <= 201103L || _GLIBCXX_USE_DEPRECATED)\n+#  include <cstdlib>\t     // for rand\n+# endif\n #endif\n \n // See concept_check.h for the __glibcxx_*_requires macros.\n@@ -1492,6 +1494,7 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n \t}\n     }\n \n+#if _GLIBCXX_HOSTED\n   // partition\n \n   /// This is a helper function...\n@@ -1617,6 +1620,7 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n       return std::__stable_partition(__first, __last,\n \t\t\t\t     __gnu_cxx::__ops::__pred_iter(__pred));\n     }\n+#endif // HOSTED\n \n   /// @cond undocumented\n \n@@ -2527,14 +2531,15 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n \t  _ValueType;\n       typedef typename iterator_traits<_BidirectionalIterator>::difference_type\n \t  _DistanceType;\n-      typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;\n \n       if (__first == __middle || __middle == __last)\n \treturn;\n \n       const _DistanceType __len1 = std::distance(__first, __middle);\n       const _DistanceType __len2 = std::distance(__middle, __last);\n \n+#if _GLIBCXX_HOSTED\n+      typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;\n       // __merge_adaptive will use a buffer for the smaller of\n       // [first,middle) and [middle,last).\n       _TmpBuf __buf(__first, std::min(__len1, __len2));\n@@ -2549,6 +2554,10 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n \tstd::__merge_adaptive_resize\n \t  (__first, __middle, __last, __len1, __len2, __buf.begin(),\n \t   _DistanceType(__buf.size()), __comp);\n+#else\n+      std::__merge_without_buffer\n+\t(__first, __middle, __last, __len1, __len2, __comp);\n+#endif\n     }\n \n   /**\n@@ -4585,7 +4594,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t      std::iter_swap(__i, __j);\n \t  }\n     }\n-#endif\n+#endif // HOSTED\n \n   /**\n    *  @brief Shuffle the elements of a sequence using a random number\n@@ -5017,11 +5026,12 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t_ValueType;\n       typedef typename iterator_traits<_RandomAccessIterator>::difference_type\n \t_DistanceType;\n-      typedef _Temporary_buffer<_RandomAccessIterator, _ValueType> _TmpBuf;\n \n       if (__first == __last)\n \treturn;\n \n+#if _GLIBCXX_HOSTED\n+      typedef _Temporary_buffer<_RandomAccessIterator, _ValueType> _TmpBuf;\n       // __stable_sort_adaptive sorts the range in two halves,\n       // so the buffer only needs to fit half the range at once.\n       _TmpBuf __buf(__first, (__last - __first + 1) / 2);\n@@ -5035,6 +5045,9 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       else\n \tstd::__stable_sort_adaptive_resize(__first, __last, __buf.begin(),\n \t\t\t\t\t   _DistanceType(__buf.size()), __comp);\n+#else\n+      std::__inplace_stable_sort(__first, __last, __comp);\n+#endif\n     }\n \n   /**"}, {"sha": "ae898ed37064a568c2ecb6fb92d1ff590236a100", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=cf0fded5d837bad590eb091d8a3dc4898872560f", "patch": "@@ -442,6 +442,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n _GLIBCXX_END_NAMESPACE_CONTAINER\n \n+#if _GLIBCXX_HOSTED\n   // Helpers for streambuf iterators (either istream or ostream).\n   // NB: avoid including <iosfwd>, relatively large.\n   template<typename _CharT>\n@@ -479,6 +480,7 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n \tistreambuf_iterator<_CharT, char_traits<_CharT> >,\n \tistreambuf_iterator<_CharT, char_traits<_CharT> >,\n \t_GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*>);\n+#endif // HOSTED\n \n   template<bool _IsMove, typename _II, typename _OI>\n     _GLIBCXX20_CONSTEXPR\n@@ -574,6 +576,7 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n       return __result;\n     }\n \n+#if _GLIBCXX_HOSTED\n   template<typename _CharT, typename _Size>\n     typename __gnu_cxx::__enable_if<\n       __is_char<_CharT>::__value, _CharT*>::__type\n@@ -587,6 +590,7 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n     __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >, _Size,\n \t       _GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*>,\n \t       bool);\n+#endif\n \n   /**\n    *  @brief Copies the range [first,last) into result."}, {"sha": "0b32074e5e92ff4274e25eda13ec85e61ce452c4", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=cf0fded5d837bad590eb091d8a3dc4898872560f", "patch": "@@ -359,6 +359,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n+#if _GLIBCXX_HOSTED\n   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>\n     _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n@@ -371,6 +372,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n       return std::uninitialized_copy(__first, __last, __result);\n     }\n+#endif\n \n   template<typename _InputIterator, typename _ForwardIterator,\n \t   typename _Allocator>\n@@ -418,6 +420,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n+#if _GLIBCXX_HOSTED\n   template<typename _ForwardIterator, typename _Tp, typename _Tp2>\n     _GLIBCXX20_CONSTEXPR\n     inline void\n@@ -430,6 +433,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n       std::uninitialized_fill(__first, __last, __x);\n     }\n+#endif\n \n   template<typename _ForwardIterator, typename _Size, typename _Tp,\n \t   typename _Allocator>\n@@ -453,6 +457,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n+#if _GLIBCXX_HOSTED\n   template<typename _ForwardIterator, typename _Size, typename _Tp,\n \t   typename _Tp2>\n     _GLIBCXX20_CONSTEXPR\n@@ -466,7 +471,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n       return std::uninitialized_fill_n(__first, __n, __x);\n     }\n-\n+#endif\n \n   // Extensions: __uninitialized_copy_move, __uninitialized_move_copy,\n   // __uninitialized_fill_move, __uninitialized_move_fill.\n@@ -725,13 +730,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n+#if _GLIBCXX_HOSTED\n   template<typename _ForwardIterator, typename _Tp>\n     inline void\n     __uninitialized_default_a(_ForwardIterator __first,\n \t\t\t      _ForwardIterator __last,\n \t\t\t      allocator<_Tp>&)\n     { std::__uninitialized_default(__first, __last); }\n-\n+#endif\n \n   // __uninitialized_default_n_a\n   // Fills [first, first + n) with value_types constructed by the allocator\n@@ -756,6 +762,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n+#if _GLIBCXX_HOSTED\n   // __uninitialized_default_n_a specialization for std::allocator,\n   // which ignores the allocator and value-initializes the elements.\n   template<typename _ForwardIterator, typename _Size, typename _Tp>\n@@ -764,6 +771,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,\n \t\t\t\tallocator<_Tp>&)\n     { return std::__uninitialized_default_n(__first, __n); }\n+#endif\n \n   template<bool _TrivialValueType>\n     struct __uninitialized_default_novalue_1\n@@ -1094,6 +1102,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __cur;\n     }\n \n+#if _GLIBCXX_HOSTED\n   template <typename _Tp, typename _Up>\n     _GLIBCXX20_CONSTEXPR\n     inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>\n@@ -1118,7 +1127,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       return __result + __count;\n     }\n-\n+#endif\n \n   template <typename _InputIterator, typename _ForwardIterator,\n \t    typename _Allocator>\n@@ -1136,7 +1145,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   /// @endcond\n-#endif\n+#endif // C++11\n \n   /// @} group memory\n "}, {"sha": "1086f408374cd1688ab9ab7348ff743850726ada", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=cf0fded5d837bad590eb091d8a3dc4898872560f", "patch": "@@ -36,9 +36,11 @@\n #include <tuple>\n #include <bits/stl_function.h>\n #include <bits/functional_hash.h>\n-#if __cplusplus > 201703L\n+#if __cplusplus >= 202002L\n # include <compare>\n-# include <ostream>\n+# if _GLIBCXX_HOSTED\n+#  include <ostream>\n+# endif\n #endif\n \n #if __cplusplus > 202002L && __cpp_constexpr_dynamic_alloc\n@@ -1031,7 +1033,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       public __uniq_ptr_hash<unique_ptr<_Tp, _Dp>>\n     { };\n \n-#if __cplusplus >= 201402L\n+#if __cplusplus >= 201402L && _GLIBCXX_HOSTED\n #define __cpp_lib_make_unique 201304L\n \n   /// @cond undocumented\n@@ -1131,9 +1133,9 @@ namespace __detail\n     make_unique_for_overwrite(_Args&&...) = delete;\n #endif // C++20\n \n-#endif // C++14\n+#endif // C++14 && HOSTED\n \n-#if __cplusplus > 201703L && __cpp_concepts\n+#if __cplusplus > 201703L && __cpp_concepts && _GLIBCXX_HOSTED\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 2948. unique_ptr does not define operator<< for stream output\n   /// Stream output operator for unique_ptr\n@@ -1148,7 +1150,7 @@ namespace __detail\n       __os << __p.get();\n       return __os;\n     }\n-#endif // C++20\n+#endif // C++20 && HOSTED\n \n   /// @} group pointer_abstractions\n "}, {"sha": "0f7362e263f64e8817d6966dbac73f0c84e0c429", "filename": "libstdc++-v3/include/c_global/cstdlib", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib?ref=cf0fded5d837bad590eb091d8a3dc4898872560f", "patch": "@@ -51,19 +51,23 @@\n \n #define EXIT_SUCCESS 0\n #define EXIT_FAILURE 1\n+#define NULL __null\n \n namespace std\n {\n-  extern \"C\" void abort(void) throw () _GLIBCXX_NORETURN;\n-  extern \"C\" int atexit(void (*)(void)) throw ();\n-  extern \"C\" void exit(int) throw () _GLIBCXX_NORETURN;\n+  extern \"C\" void abort(void) _GLIBCXX_NOTHROW _GLIBCXX_NORETURN;\n+  extern \"C\" int atexit(void (*)(void)) _GLIBCXX_NOTHROW;\n+  extern \"C\" void exit(int) _GLIBCXX_NOTHROW _GLIBCXX_NORETURN;\n #if __cplusplus >= 201103L\n # ifdef _GLIBCXX_HAVE_AT_QUICK_EXIT\n-  extern \"C\" int at_quick_exit(void (*)(void)) throw ();\n+  extern \"C\" int at_quick_exit(void (*)(void)) _GLIBCXX_NOTHROW;\n # endif\n # ifdef _GLIBCXX_HAVE_QUICK_EXIT\n-  extern \"C\" void quick_exit(int) throw() _GLIBCXX_NORETURN;\n+  extern \"C\" void quick_exit(int) _GLIBCXX_NOTHROW_GLIBCXX_NORETURN;\n # endif\n+#if _GLIBCXX_USE_C99_STDLIB\n+  extern \"C\" void _Exit(int) _GLIBCXX_NOTHROW _GLIBCXX_NORETURN;\n+#endif\n #endif\n } // namespace std\n \n@@ -174,7 +178,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO\n   inline ldiv_t\n-  div(long __i, long __j) { return ldiv(__i, __j); }\n+  div(long __i, long __j) _GLIBCXX_NOTHROW { return ldiv(__i, __j); }\n #endif\n \n \n@@ -200,7 +204,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   using ::lldiv_t;\n #endif\n #if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n-  extern \"C\" void (_Exit)(int) throw () _GLIBCXX_NORETURN;\n+  extern \"C\" void (_Exit)(int) _GLIBCXX_NOTHROW _GLIBCXX_NORETURN;\n #endif\n #if !_GLIBCXX_USE_C99_DYNAMIC\n   using ::_Exit;\n@@ -217,11 +221,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n #if _GLIBCXX_USE_C99_LONG_LONG_CHECK || _GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n-  extern \"C\" long long int (atoll)(const char *) throw ();\n+  extern \"C\" long long int (atoll)(const char *) _GLIBCXX_NOTHROW;\n   extern \"C\" long long int\n-    (strtoll)(const char * __restrict, char ** __restrict, int) throw ();\n+    (strtoll)(const char * __restrict, char ** __restrict, int) _GLIBCXX_NOTHROW;\n   extern \"C\" unsigned long long int\n-    (strtoull)(const char * __restrict, char ** __restrict, int) throw ();\n+    (strtoull)(const char * __restrict, char ** __restrict, int) _GLIBCXX_NOTHROW;\n #endif\n #if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n   using ::atoll;"}, {"sha": "c3b5ad01d4fb7eb86f6847565b0bcbb3d1ec3a85", "filename": "libstdc++-v3/include/debug/assertions.h", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fassertions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fassertions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fassertions.h?ref=cf0fded5d837bad590eb091d8a3dc4898872560f", "patch": "@@ -31,14 +31,6 @@\n \n #include <bits/c++config.h>\n \n-#ifndef _GLIBCXX_DEBUG\n-\n-# define _GLIBCXX_DEBUG_ASSERT(_Condition)\n-# define _GLIBCXX_DEBUG_PEDASSERT(_Condition)\n-# define _GLIBCXX_DEBUG_ONLY(_Statement)\n-\n-#endif\n-\n #ifndef _GLIBCXX_ASSERTIONS\n # define __glibcxx_requires_non_empty_range(_First,_Last)\n # define __glibcxx_requires_nonempty()\n@@ -55,7 +47,8 @@\n   __glibcxx_assert(!this->empty())\n #endif\n \n-#ifdef _GLIBCXX_DEBUG\n+#if defined _GLIBCXX_DEBUG && _GLIBCXX_HOSTED\n+\n # define _GLIBCXX_DEBUG_ASSERT(_Condition) __glibcxx_assert(_Condition)\n \n # ifdef _GLIBCXX_DEBUG_PEDANTIC\n@@ -65,6 +58,11 @@\n # endif\n \n # define _GLIBCXX_DEBUG_ONLY(_Statement) _Statement\n+\n+#else\n+# define _GLIBCXX_DEBUG_ASSERT(_Condition)\n+# define _GLIBCXX_DEBUG_PEDASSERT(_Condition)\n+# define _GLIBCXX_DEBUG_ONLY(_Statement)\n #endif\n \n #endif // _GLIBCXX_DEBUG_ASSERTIONS"}, {"sha": "78546d76123b6e310d11b02169a9471a83cc6e1d", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=cf0fded5d837bad590eb091d8a3dc4898872560f", "patch": "@@ -61,7 +61,7 @@ namespace __gnu_debug\n     struct _Safe_iterator;\n }\n \n-#ifndef _GLIBCXX_DEBUG\n+#if ! defined _GLIBCXX_DEBUG || ! _GLIBCXX_HOSTED\n \n # define __glibcxx_requires_cond(_Cond,_Msg)\n # define __glibcxx_requires_valid_range(_First,_Last)"}, {"sha": "2fd80187210a5f11aaaef7f666b270f697af8f07", "filename": "libstdc++-v3/include/std/bit", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit?ref=cf0fded5d837bad590eb091d8a3dc4898872560f", "patch": "@@ -35,7 +35,7 @@\n \n #include <type_traits>\n \n-#if _GLIBCXX_HOSTED\n+#if _GLIBCXX_HOSTED || __has_include(<ext/numeric_traits.h>)\n # include <ext/numeric_traits.h>\n #else\n # include <limits>"}, {"sha": "c4f75880fd8ba6cdba6591408bbe5d56dc3435cc", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=cf0fded5d837bad590eb091d8a3dc4898872560f", "patch": "@@ -56,18 +56,22 @@\n #include <bits/functional_hash.h>\n #include <bits/invoke.h>\n #include <bits/refwrap.h>\t// std::reference_wrapper and _Mem_fn_traits\n-#include <bits/std_function.h>\t// std::function\n-#if __cplusplus > 201402L\n-# include <unordered_map>\n-# include <vector>\n-# include <array>\n-# include <bits/stl_algo.h>\n+#if _GLIBCXX_HOSTED\n+# include <bits/std_function.h>\t// std::function\n+#endif\n+#if __cplusplus >= 201703L\n+# if _GLIBCXX_HOSTED\n+#  include <unordered_map>\n+#  include <vector>\n+#  include <array>\n+# endif\n+# include <bits/stl_algo.h> // std::search\n #endif\n #if __cplusplus > 201703L\n # include <bits/ranges_cmp.h>\n # include <compare>\n #endif\n-#if __cplusplus > 202002L\n+#if __cplusplus > 202002L && _GLIBCXX_HOSTED\n # include <bits/move_only_function.h>\n #endif\n \n@@ -238,7 +242,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @brief Trait that identifies a bind expression.\n-   * \n+   *\n    * Determines if the given type `_Tp` is a function object that\n    * should be treated as a subexpression when evaluating calls to\n    * function objects returned by `std::bind`.\n@@ -1117,6 +1121,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       tuple<_ForwardIterator1, _ForwardIterator1, _BinaryPredicate> _M_m;\n     };\n \n+#if _GLIBCXX_HOSTED\n   template<typename _Key, typename _Tp, typename _Hash, typename _Pred>\n     struct __boyer_moore_map_base\n     {\n@@ -1359,6 +1364,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       return std::make_pair(__last, __last);\n     }\n+#endif // HOSTED\n \n #endif // C++17\n #endif // C++14"}, {"sha": "fb2a47c0dbb2f2ed1fa698c1a918baddb556f25c", "filename": "libstdc++-v3/include/std/iterator", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiterator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiterator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiterator?ref=cf0fded5d837bad590eb091d8a3dc4898872560f", "patch": "@@ -61,8 +61,10 @@\n #include <bits/stl_iterator_base_types.h>\n #include <bits/stl_iterator_base_funcs.h>\n #include <bits/stl_iterator.h>\n-#include <bits/stream_iterator.h>\n-#include <bits/streambuf_iterator.h>\n+#if _GLIBCXX_HOSTED\n+# include <bits/stream_iterator.h>\n+# include <bits/streambuf_iterator.h>\n+#endif\n #include <bits/range_access.h>\n \n #if __cplusplus >= 201402L && ! defined _GLIBCXX_DEBUG // PR libstdc++/70303"}, {"sha": "3eff12108f19bcc465e06402aa3a7c7ee9a389f7", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=cf0fded5d837bad590eb091d8a3dc4898872560f", "patch": "@@ -60,7 +60,10 @@\n  * Smart pointers, etc.\n  */\n \n-#include <bits/allocator.h>\n+#include <bits/memoryfwd.h>\n+#if _GLIBCXX_HOSTED\n+# include <bits/allocator.h>\n+#endif\n #include <bits/stl_construct.h>\n #include <bits/stl_uninitialized.h>\n #include <bits/stl_tempbuf.h>\n@@ -73,8 +76,10 @@\n #  include <bits/alloc_traits.h>\n #  include <debug/debug.h>\n #  include <bits/unique_ptr.h>\n+# if _GLIBCXX_HOSTED\n #  include <bits/shared_ptr.h>\n #  include <bits/shared_ptr_atomic.h>\n+# endif\n #endif\n \n #if __cplusplus < 201103L || _GLIBCXX_USE_DEPRECATED\n@@ -86,7 +91,7 @@\n #  include <bits/uses_allocator_args.h>\n #endif\n \n-#if __cplusplus >= 201103L && __cplusplus <= 202002L\n+#if __cplusplus >= 201103L && __cplusplus <= 202002L && _GLIBCXX_HOSTED\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -133,7 +138,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n #endif // C++11 to C++20\n \n-#if __cplusplus >= 201703L\n+#if __cplusplus >= 201703L && _GLIBCXX_HOSTED\n // Parallel STL algorithms\n # if _PSTL_EXECUTION_POLICIES_DEFINED\n // If <execution> has already been included, pull in implementations"}, {"sha": "c2eacdebe283bec9a5afae9a94b398c1720f33e5", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0fded5d837bad590eb091d8a3dc4898872560f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=cf0fded5d837bad590eb091d8a3dc4898872560f", "patch": "@@ -701,6 +701,7 @@ namespace views\n   inline constexpr _Iota iota{};\n } // namespace views\n \n+#if _GLIBCXX_HOSTED\n   namespace __detail\n   {\n     template<typename _Val, typename _CharT, typename _Traits>\n@@ -804,6 +805,7 @@ namespace views\n   template<typename _Tp>\n     inline constexpr _Istream<_Tp> istream;\n }\n+#endif // HOSTED\n \n   // C++20 24.7 [range.adaptors] Range adaptors\n \n@@ -2234,9 +2236,11 @@ namespace views::__adaptor\n       template<typename _Range>\n \tinline constexpr bool __is_basic_string_view = false;\n \n+#if _GLIBCXX_HOSTED\n       template<typename _CharT, typename _Traits>\n \tinline constexpr bool __is_basic_string_view<basic_string_view<_CharT, _Traits>>\n \t  = true;\n+#endif\n \n       template<typename _Range>\n \tinline constexpr bool __is_subrange = false;"}]}