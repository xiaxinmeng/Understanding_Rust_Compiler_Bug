{"sha": "03b0db0a4e53f8ebbfa884f7791f7afb95e879f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNiMGRiMGE0ZTUzZjhlYmJmYTg4NGY3NzkxZjdhZmI5NWU4NzlmMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenth@gcc.gnu.org", "date": "2005-05-14T12:53:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-05-14T12:53:20Z"}, "message": "fold-const.c (div_if_zero_remainder): New function.\n\n2005-05-14  Richard Guenther  <rguenth@gcc.gnu.org>\n\n\t* fold-const.c (div_if_zero_remainder): New function.\n\t(try_move_mult_to_index): Use it.\n\n\t* g++.dg/tree-ssa/tmmti-2.C: New testcase.\n\nFrom-SVN: r99694", "tree": {"sha": "7cfd487443568edd03b6e0400293030fed80a490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cfd487443568edd03b6e0400293030fed80a490"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03b0db0a4e53f8ebbfa884f7791f7afb95e879f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b0db0a4e53f8ebbfa884f7791f7afb95e879f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03b0db0a4e53f8ebbfa884f7791f7afb95e879f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b0db0a4e53f8ebbfa884f7791f7afb95e879f3/comments", "author": null, "committer": null, "parents": [{"sha": "59ebc70406c4169c19d87835f7ffbd7c15f73ea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ebc70406c4169c19d87835f7ffbd7c15f73ea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59ebc70406c4169c19d87835f7ffbd7c15f73ea6"}], "stats": {"total": 73, "additions": 65, "deletions": 8}, "files": [{"sha": "365ac33f5b39d5569f48d9a9efb1dd8369b25209", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b0db0a4e53f8ebbfa884f7791f7afb95e879f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b0db0a4e53f8ebbfa884f7791f7afb95e879f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03b0db0a4e53f8ebbfa884f7791f7afb95e879f3", "patch": "@@ -1,3 +1,8 @@\n+2005-05-14  Richard Guenther  <rguenth@gcc.gnu.org>\n+\n+\t* fold-const.c (div_if_zero_remainder): New function.\n+\t(try_move_mult_to_index): Use it.\n+\n 2005-05-14  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-eh.c (leh_tf_state): Change the type of dest_array to"}, {"sha": "b19dd85ed66c8429e761b2702d01c3c1a64bd2cc", "filename": "gcc/fold-const.c", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b0db0a4e53f8ebbfa884f7791f7afb95e879f3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b0db0a4e53f8ebbfa884f7791f7afb95e879f3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=03b0db0a4e53f8ebbfa884f7791f7afb95e879f3", "patch": "@@ -831,6 +831,33 @@ div_and_round_double (enum tree_code code, int uns,\n   add_double (lnum_orig, hnum_orig, *lrem, *hrem, lrem, hrem);\n   return overflow;\n }\n+\n+/* If ARG2 divides ARG1 with zero remainder, carries out the division\n+   of type CODE and returns the quotient.\n+   Otherwise returns NULL_TREE.  */\n+\n+static tree\n+div_if_zero_remainder (enum tree_code code, tree arg1, tree arg2)\n+{\n+  unsigned HOST_WIDE_INT int1l, int2l;\n+  HOST_WIDE_INT int1h, int2h;\n+  unsigned HOST_WIDE_INT quol, reml;\n+  HOST_WIDE_INT quoh, remh;\n+  tree type = TREE_TYPE (arg1);\n+  int uns = TYPE_UNSIGNED (type);\n+\n+  int1l = TREE_INT_CST_LOW (arg1);\n+  int1h = TREE_INT_CST_HIGH (arg1);\n+  int2l = TREE_INT_CST_LOW (arg2);\n+  int2h = TREE_INT_CST_HIGH (arg2);\n+\n+  div_and_round_double (code, uns, int1l, int1h, int2l, int2h,\n+\t\t  \t&quol, &quoh, &reml, &remh);\n+  if (remh != 0 || reml != 0)\n+    return NULL_TREE;\n+\n+  return build_int_cst_wide (type, quol, quoh);\n+}\n \f\n /* Return true if built-in mathematical function specified by CODE\n    preserves the sign of it argument, i.e. -f(x) == f(-x).  */\n@@ -6311,6 +6338,10 @@ try_move_mult_to_index (enum tree_code code, tree addr, tree op1)\n     {\n       if (TREE_CODE (ref) == ARRAY_REF)\n \t{\n+\t  itype = TYPE_DOMAIN (TREE_TYPE (TREE_OPERAND (ref, 0)));\n+\t  if (! itype)\n+\t    continue;\n+\n \t  step = array_ref_element_size (ref);\n \t  if (TREE_CODE (step) != INTEGER_CST)\n \t    continue;\n@@ -6323,17 +6354,12 @@ try_move_mult_to_index (enum tree_code code, tree addr, tree op1)\n \t  else\n \t    {\n \t      /* Try if delta is a multiple of step.  */\n-\t      tree mod = int_const_binop (TRUNC_MOD_EXPR, delta, step, 0);\n-\t      if (!integer_zerop (mod))\n+\t      tree tmp = div_if_zero_remainder (EXACT_DIV_EXPR, delta, step);\n+\t      if (! tmp)\n \t\tcontinue;\n-\n-\t      delta = int_const_binop (EXACT_DIV_EXPR, delta, step, 0);\n+\t      delta = tmp;\n \t    }\n \n-\t  itype = TYPE_DOMAIN (TREE_TYPE (TREE_OPERAND (ref, 0)));\n-\t  if (! itype)\n-\t    continue;\n-\n \t  break;\n \t}\n "}, {"sha": "e3897d580c344590a9726ea7fdb97c1e46b22f26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b0db0a4e53f8ebbfa884f7791f7afb95e879f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b0db0a4e53f8ebbfa884f7791f7afb95e879f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03b0db0a4e53f8ebbfa884f7791f7afb95e879f3", "patch": "@@ -1,3 +1,7 @@\n+2005-05-14  Richard Guenther  <rguenth@gcc.gnu.org>\n+\n+\t* g++.dg/tree-ssa/tmmti-2.C: New testcase.\n+\n 2005-05-13  Julian Brown  <julian@codesourcery.com>\n \n \t* gcc.c-torture/execute/20041218-2.c: Add __attribute__((packed))."}, {"sha": "9735adc6c7db3e341a0316cf0a56f1a6910bd35a", "filename": "gcc/testsuite/g++.dg/tree-ssa/tmmti-2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b0db0a4e53f8ebbfa884f7791f7afb95e879f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Ftmmti-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b0db0a4e53f8ebbfa884f7791f7afb95e879f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Ftmmti-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Ftmmti-2.C?ref=03b0db0a4e53f8ebbfa884f7791f7afb95e879f3", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options { -O -fdump-tree-optimized } } */\n+\n+int a[4][8];\n+\n+int foo(int i)\n+{\n+\treturn *(&a[0][0] + i*8); // a[i][0]\n+}\n+\n+struct Foo { double x, y; };\n+\n+Foo b[4];\n+\n+double bar(int i)\n+{\n+\treturn *(&b[0].x + i*2); // b[i].x\n+}\n+\n+/* { dg-final { scan-tree-dump \"a\\\\\\[.*i.*\\\\\\]\\\\\\[0\\\\\\]\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"b\\\\\\[.*i.*\\\\\\].x\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}