{"sha": "f2c4a81cc167ed8a02d0cee69245ec2568b952a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJjNGE4MWNjMTY3ZWQ4YTAyZDBjZWU2OTI0NWVjMjU2OGI5NTJhNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-12T05:49:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-12T05:49:09Z"}, "message": "gsstruct.def (DEFGSSTRUCT): Remove printable-name argument...\n\n* gsstruct.def (DEFGSSTRUCT): Remove printable-name argument; add\n        structure-name and has-tree-operands arguments; update all entries.\n        * gimple.def (DEFGSCODE): Replace 3rd argument with GSS_symbol;\n        update all entries.\n        * gimple.c (gimple_ops_offset_): Use HAS_TREE_OP argument.\n        (gsstruct_code_size): New.\n        (gss_for_code_): New.\n        (gss_for_code): Remove.\n        (gimple_size): Rewrite using gsstruct_code_size.\n        (gimple_statement_structure): Move to gimple.h.\n        * gimple.h (gimple_ops_offset_, gss_for_code_): Declare.\n        (gss_for_code, gimple_statement_structure): New.\n        (gimple_ops): Use new arrays; tidy.\n\nFrom-SVN: r151650", "tree": {"sha": "16db3c5a2f68a392e7e4456ad589c93e08ae5fef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16db3c5a2f68a392e7e4456ad589c93e08ae5fef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2c4a81cc167ed8a02d0cee69245ec2568b952a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2c4a81cc167ed8a02d0cee69245ec2568b952a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2c4a81cc167ed8a02d0cee69245ec2568b952a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2c4a81cc167ed8a02d0cee69245ec2568b952a7/comments", "author": null, "committer": null, "parents": [{"sha": "0a58a0248817f36f04416388f76715b92b714c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a58a0248817f36f04416388f76715b92b714c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a58a0248817f36f04416388f76715b92b714c13"}], "stats": {"total": 332, "additions": 133, "deletions": 199}, "files": [{"sha": "4b2aee5ab3360c9d47e59b4b652ce4f0a6a3c6c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c4a81cc167ed8a02d0cee69245ec2568b952a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c4a81cc167ed8a02d0cee69245ec2568b952a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2c4a81cc167ed8a02d0cee69245ec2568b952a7", "patch": "@@ -1,3 +1,19 @@\n+2009-09-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* gsstruct.def (DEFGSSTRUCT): Remove printable-name argument; add\n+\tstructure-name and has-tree-operands arguments; update all entries.\n+\t* gimple.def (DEFGSCODE): Replace 3rd argument with GSS_symbol;\n+\tupdate all entries.\n+\t* gimple.c (gimple_ops_offset_): Use HAS_TREE_OP argument.\n+\t(gsstruct_code_size): New.\n+\t(gss_for_code_): New.\n+\t(gss_for_code): Remove.\n+\t(gimple_size): Rewrite using gsstruct_code_size.\n+\t(gimple_statement_structure): Move to gimple.h.\n+\t* gimple.h (gimple_ops_offset_, gss_for_code_): Declare.\n+\t(gss_for_code, gimple_statement_structure): New.\n+\t(gimple_ops): Use new arrays; tidy.\n+\n 2009-09-11  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* config/pa/predicates.md (symbolic_operand): Require a CONST symbolic"}, {"sha": "3be6d843fe21d6f587018fdb4cc589728cd9b1da", "filename": "gcc/gimple.c", "status": "modified", "additions": 23, "deletions": 121, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c4a81cc167ed8a02d0cee69245ec2568b952a7/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c4a81cc167ed8a02d0cee69245ec2568b952a7/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=f2c4a81cc167ed8a02d0cee69245ec2568b952a7", "patch": "@@ -35,18 +35,32 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"demangle.h\"\n \n-#define DEFGSCODE(SYM, NAME, STRUCT)\tNAME,\n-const char *const gimple_code_name[] = {\n-#include \"gimple.def\"\n-};\n-#undef DEFGSCODE\n \n-/* All the tuples have their operand vector at the very bottom\n+/* All the tuples have their operand vector (if present) at the very bottom\n    of the structure.  Therefore, the offset required to find the\n    operands vector the size of the structure minus the size of the 1\n    element tree array at the end (see gimple_ops).  */\n-#define DEFGSCODE(SYM, NAME, STRUCT)\t(sizeof (STRUCT) - sizeof (tree)),\n+#define DEFGSSTRUCT(SYM, STRUCT, HAS_TREE_OP) \\\n+\t(HAS_TREE_OP ? sizeof (struct STRUCT) - sizeof (tree) : 0),\n EXPORTED_CONST size_t gimple_ops_offset_[] = {\n+#include \"gsstruct.def\"\n+};\n+#undef DEFGSSTRUCT\n+\n+#define DEFGSSTRUCT(SYM, STRUCT, HAS_TREE_OP) sizeof(struct STRUCT),\n+static const size_t gsstruct_code_size[] = {\n+#include \"gsstruct.def\"\n+};\n+#undef DEFGSSTRUCT\n+\n+#define DEFGSCODE(SYM, NAME, GSSCODE)\tNAME,\n+const char *const gimple_code_name[] = {\n+#include \"gimple.def\"\n+};\n+#undef DEFGSCODE\n+\n+#define DEFGSCODE(SYM, NAME, GSSCODE)\tGSSCODE,\n+EXPORTED_CONST enum gimple_statement_structure_enum gss_for_code_[] = {\n #include \"gimple.def\"\n };\n #undef DEFGSCODE\n@@ -89,118 +103,15 @@ gimple_set_code (gimple g, enum gimple_code code)\n   g->gsbase.code = code;\n }\n \n-\n-/* Return the GSS_* identifier for the given GIMPLE statement CODE.  */\n-\n-static enum gimple_statement_structure_enum\n-gss_for_code (enum gimple_code code)\n-{\n-  switch (code)\n-    {\n-    case GIMPLE_ASSIGN:\n-    case GIMPLE_CALL:\n-    case GIMPLE_RETURN:\t\t\treturn GSS_WITH_MEM_OPS;\n-    case GIMPLE_COND:\n-    case GIMPLE_GOTO:\n-    case GIMPLE_LABEL:\n-    case GIMPLE_DEBUG:\n-    case GIMPLE_SWITCH:\t\t\treturn GSS_WITH_OPS;\n-    case GIMPLE_ASM:\t\t\treturn GSS_ASM;\n-    case GIMPLE_BIND:\t\t\treturn GSS_BIND;\n-    case GIMPLE_CATCH:\t\t\treturn GSS_CATCH;\n-    case GIMPLE_EH_FILTER:\t\treturn GSS_EH_FILTER;\n-    case GIMPLE_NOP:\t\t\treturn GSS_BASE;\n-    case GIMPLE_PHI:\t\t\treturn GSS_PHI;\n-    case GIMPLE_RESX:\t\t\treturn GSS_RESX;\n-    case GIMPLE_TRY:\t\t\treturn GSS_TRY;\n-    case GIMPLE_WITH_CLEANUP_EXPR:\treturn GSS_WCE;\n-    case GIMPLE_OMP_CRITICAL:\t\treturn GSS_OMP_CRITICAL;\n-    case GIMPLE_OMP_FOR:\t\treturn GSS_OMP_FOR;\n-    case GIMPLE_OMP_MASTER:\t\t\n-    case GIMPLE_OMP_ORDERED:\n-    case GIMPLE_OMP_SECTION:\t\treturn GSS_OMP;\n-    case GIMPLE_OMP_RETURN:\n-    case GIMPLE_OMP_SECTIONS_SWITCH:    return GSS_BASE;\n-    case GIMPLE_OMP_CONTINUE:\t\treturn GSS_OMP_CONTINUE;\n-    case GIMPLE_OMP_PARALLEL:\t\treturn GSS_OMP_PARALLEL;\n-    case GIMPLE_OMP_TASK:\t\treturn GSS_OMP_TASK;\n-    case GIMPLE_OMP_SECTIONS:\t\treturn GSS_OMP_SECTIONS;\n-    case GIMPLE_OMP_SINGLE:\t\treturn GSS_OMP_SINGLE;\n-    case GIMPLE_OMP_ATOMIC_LOAD:\treturn GSS_OMP_ATOMIC_LOAD;\n-    case GIMPLE_OMP_ATOMIC_STORE:\treturn GSS_OMP_ATOMIC_STORE;\n-    case GIMPLE_PREDICT:\t\treturn GSS_BASE;\n-    default:\t\t\t\tgcc_unreachable ();\n-    }\n-}\n-\n-\n /* Return the number of bytes needed to hold a GIMPLE statement with\n    code CODE.  */\n \n-static size_t\n+static inline size_t\n gimple_size (enum gimple_code code)\n {\n-  enum gimple_statement_structure_enum gss = gss_for_code (code);\n-\n-  if (gss == GSS_WITH_OPS)\n-    return sizeof (struct gimple_statement_with_ops);\n-  else if (gss == GSS_WITH_MEM_OPS)\n-    return sizeof (struct gimple_statement_with_memory_ops);\n-\n-  switch (code)\n-    {\n-    case GIMPLE_ASM:\n-      return sizeof (struct gimple_statement_asm);\n-    case GIMPLE_NOP:\n-      return sizeof (struct gimple_statement_base);\n-    case GIMPLE_BIND:\n-      return sizeof (struct gimple_statement_bind);\n-    case GIMPLE_CATCH:\n-      return sizeof (struct gimple_statement_catch);\n-    case GIMPLE_EH_FILTER:\n-      return sizeof (struct gimple_statement_eh_filter);\n-    case GIMPLE_TRY:\n-      return sizeof (struct gimple_statement_try);\n-    case GIMPLE_RESX:\n-      return sizeof (struct gimple_statement_resx);\n-    case GIMPLE_OMP_CRITICAL:\n-      return sizeof (struct gimple_statement_omp_critical);\n-    case GIMPLE_OMP_FOR:\n-      return sizeof (struct gimple_statement_omp_for);\n-    case GIMPLE_OMP_PARALLEL:\n-      return sizeof (struct gimple_statement_omp_parallel);\n-    case GIMPLE_OMP_TASK:\n-      return sizeof (struct gimple_statement_omp_task);\n-    case GIMPLE_OMP_SECTION:\n-    case GIMPLE_OMP_MASTER:\n-    case GIMPLE_OMP_ORDERED:\n-      return sizeof (struct gimple_statement_omp);\n-    case GIMPLE_OMP_RETURN:\n-      return sizeof (struct gimple_statement_base);\n-    case GIMPLE_OMP_CONTINUE:\n-      return sizeof (struct gimple_statement_omp_continue);\n-    case GIMPLE_OMP_SECTIONS:\n-      return sizeof (struct gimple_statement_omp_sections);\n-    case GIMPLE_OMP_SECTIONS_SWITCH:\n-      return sizeof (struct gimple_statement_base);\n-    case GIMPLE_OMP_SINGLE:\n-      return sizeof (struct gimple_statement_omp_single);\n-    case GIMPLE_OMP_ATOMIC_LOAD:\n-      return sizeof (struct gimple_statement_omp_atomic_load);\n-    case GIMPLE_OMP_ATOMIC_STORE:\n-      return sizeof (struct gimple_statement_omp_atomic_store);\n-    case GIMPLE_WITH_CLEANUP_EXPR:\n-      return sizeof (struct gimple_statement_wce);\n-    case GIMPLE_PREDICT:\n-      return sizeof (struct gimple_statement_base);\n-    default:\n-      break;\n-    }\n-\n-  gcc_unreachable ();\n+  return gsstruct_code_size[gss_for_code (code)];\n }\n \n-\n /* Allocate memory for a GIMPLE statement with code CODE and NUM_OPS\n    operands.  */\n \n@@ -1103,15 +1014,6 @@ gimple_build_predict (enum br_predictor predictor, enum prediction outcome)\n   return p;\n }\n \n-/* Return which gimple structure is used by T.  The enums here are defined\n-   in gsstruct.def.  */\n-\n-enum gimple_statement_structure_enum\n-gimple_statement_structure (gimple gs)\n-{\n-  return gss_for_code (gimple_code (gs));\n-}\n-\n #if defined ENABLE_GIMPLE_CHECKING\n /* Complain of a gimple type mismatch and die.  */\n "}, {"sha": "1a3f345e106b3ccc1e45bd59fac7fe48f2189608", "filename": "gcc/gimple.def", "status": "modified", "additions": 36, "deletions": 45, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c4a81cc167ed8a02d0cee69245ec2568b952a7/gcc%2Fgimple.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c4a81cc167ed8a02d0cee69245ec2568b952a7/gcc%2Fgimple.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.def?ref=f2c4a81cc167ed8a02d0cee69245ec2568b952a7", "patch": "@@ -20,19 +20,11 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n /* The format of this file is\n-   DEFGSCODE(GIMPLE_symbol, printable name, structure).\n+   DEFGSCODE(GIMPLE_symbol, printable name, GSS_symbol).  */\n \n-   Where symbol is the enumeration name without the ``GIMPLE_''.\n-   The argument STRUCTURE is used to compute offsets into each of the\n-   tuple structures that contain operands.  Since vector operands\n-   are at different offsets depending on the particular structure\n-   used, these offsets are computed at compile time for efficient\n-   lookup at runtime.  See gimple_ops().\n-\n-   If a code does not use operand vectors, STRUCTURE should be NULL.  */\n \n /* Error marker.  This is used in similar ways as ERROR_MARK in tree.def.  */\n-DEFGSCODE(GIMPLE_ERROR_MARK, \"gimple_error_mark\", NULL)\n+DEFGSCODE(GIMPLE_ERROR_MARK, \"gimple_error_mark\", GSS_BASE)\n \n /* IMPORTANT.  Do not rearrange the codes between GIMPLE_COND and\n    GIMPLE_RETURN.  The ordering is exposed by gimple_has_ops calls.\n@@ -51,18 +43,18 @@ DEFGSCODE(GIMPLE_ERROR_MARK, \"gimple_error_mark\", NULL)\n \n    TRUE_LABEL and FALSE_LABEL are the LABEL_DECL nodes used as the\n    jump target for the comparison.  */\n-DEFGSCODE(GIMPLE_COND, \"gimple_cond\", struct gimple_statement_with_ops)\n+DEFGSCODE(GIMPLE_COND, \"gimple_cond\", GSS_WITH_OPS)\n \n /* GIMPLE_DEBUG represents a debug statement.  */\n-DEFGSCODE(GIMPLE_DEBUG, \"gimple_debug\", struct gimple_statement_with_ops)\n+DEFGSCODE(GIMPLE_DEBUG, \"gimple_debug\", GSS_WITH_OPS)\n \n /* GIMPLE_GOTO <TARGET> represents unconditional jumps.\n    TARGET is a LABEL_DECL or an expression node for computed GOTOs.  */\n-DEFGSCODE(GIMPLE_GOTO, \"gimple_goto\", struct gimple_statement_with_ops)\n+DEFGSCODE(GIMPLE_GOTO, \"gimple_goto\", GSS_WITH_OPS)\n \n /* GIMPLE_LABEL <LABEL> represents label statements.  LABEL is a\n    LABEL_DECL representing a jump target.  */\n-DEFGSCODE(GIMPLE_LABEL, \"gimple_label\", struct gimple_statement_with_ops)\n+DEFGSCODE(GIMPLE_LABEL, \"gimple_label\", GSS_WITH_OPS)\n \n /* GIMPLE_SWITCH <INDEX, DEFAULT_LAB, LAB1, ..., LABN> represents the\n    multiway branch:\n@@ -79,7 +71,7 @@ DEFGSCODE(GIMPLE_LABEL, \"gimple_label\", struct gimple_statement_with_ops)\n \n    DEFAULT_LAB, LAB1 ... LABN are the tree nodes representing case labels.\n    They must be CASE_LABEL_EXPR nodes.  */\n-DEFGSCODE(GIMPLE_SWITCH, \"gimple_switch\", struct gimple_statement_with_ops)\n+DEFGSCODE(GIMPLE_SWITCH, \"gimple_switch\", GSS_WITH_OPS)\n \n /* IMPORTANT.\n    \n@@ -106,8 +98,7 @@ DEFGSCODE(GIMPLE_SWITCH, \"gimple_switch\", struct gimple_statement_with_ops)\n    RHS2 is the second operand on the RHS of the assignment.  It must be a tree\n    node accepted by is_gimple_val.  This argument exists only if SUBCODE is\n    of class GIMPLE_BINARY_RHS.  */\n-DEFGSCODE(GIMPLE_ASSIGN, \"gimple_assign\",\n-\t  struct gimple_statement_with_memory_ops)\n+DEFGSCODE(GIMPLE_ASSIGN, \"gimple_assign\", GSS_WITH_MEM_OPS)\n \n /* GIMPLE_ASM <STRING, I1, ..., IN, O1, ... OM, C1, ..., CP>\n    represents inline assembly statements.\n@@ -116,7 +107,7 @@ DEFGSCODE(GIMPLE_ASSIGN, \"gimple_assign\",\n    I1 ... IN are the N input operands.\n    O1 ... OM are the M output operands.\n    C1 ... CP are the P clobber operands.  */\n-DEFGSCODE(GIMPLE_ASM, \"gimple_asm\", struct gimple_statement_asm)\n+DEFGSCODE(GIMPLE_ASM, \"gimple_asm\", GSS_ASM)\n \n /* GIMPLE_CALL <FN, LHS, ARG1, ..., ARGN[, CHAIN]> represents function\n    calls.\n@@ -130,31 +121,29 @@ DEFGSCODE(GIMPLE_ASM, \"gimple_asm\", struct gimple_statement_asm)\n    is_gimple_operand.\n \n     CHAIN is the optional static chain link for nested functions.  */\n-DEFGSCODE(GIMPLE_CALL, \"gimple_call\",\n-\t  struct gimple_statement_with_memory_ops)\n+DEFGSCODE(GIMPLE_CALL, \"gimple_call\", GSS_WITH_MEM_OPS)\n \n /* GIMPLE_RETURN <RETVAL> represents return statements.\n \n    RETVAL is the value to return or NULL.  If a value is returned it\n    must be accepted by is_gimple_operand.  */\n-DEFGSCODE(GIMPLE_RETURN, \"gimple_return\",\n-\t  struct gimple_statement_with_memory_ops)\n+DEFGSCODE(GIMPLE_RETURN, \"gimple_return\", GSS_WITH_MEM_OPS)\n \n /* GIMPLE_BIND <VARS, BLOCK, BODY> represents a lexical scope.\n    VARS is the set of variables declared in that scope.\n    BLOCK is the symbol binding block used for debug information.  \n    BODY is the sequence of statements in the scope.  */\n-DEFGSCODE(GIMPLE_BIND, \"gimple_bind\", NULL)\n+DEFGSCODE(GIMPLE_BIND, \"gimple_bind\", GSS_BIND)\n \n /* GIMPLE_CATCH <TYPES, HANDLER> represents a typed exception handler.\n    TYPES is the type (or list of types) handled.  HANDLER is the\n    sequence of statements that handle these types.  */\n-DEFGSCODE(GIMPLE_CATCH, \"gimple_catch\", NULL)\n+DEFGSCODE(GIMPLE_CATCH, \"gimple_catch\", GSS_CATCH)\n \n /* GIMPLE_EH_FILTER <TYPES, FAILURE> represents an exception\n    specification.  TYPES is a list of allowed types and FAILURE is the\n    sequence of statements to execute on failure.  */\n-DEFGSCODE(GIMPLE_EH_FILTER, \"gimple_eh_filter\", NULL)\n+DEFGSCODE(GIMPLE_EH_FILTER, \"gimple_eh_filter\", GSS_EH_FILTER)\n \n /* GIMPLE_PHI <RESULT, ARG1, ..., ARGN> represents the PHI node\n \n@@ -166,11 +155,11 @@ DEFGSCODE(GIMPLE_EH_FILTER, \"gimple_eh_filter\", NULL)\n    exactly the same as the number of incoming edges to the basic block\n    holding the PHI node.  Every argument is either an SSA name or a\n    tree node of class tcc_constant.  */\n-DEFGSCODE(GIMPLE_PHI, \"gimple_phi\", NULL)\n+DEFGSCODE(GIMPLE_PHI, \"gimple_phi\", GSS_PHI)\n \n /* GIMPLE_RESX <REGION> resumes execution after an exception.\n    REGION is the region number being left.  */\n-DEFGSCODE(GIMPLE_RESX, \"gimple_resx\", NULL)\n+DEFGSCODE(GIMPLE_RESX, \"gimple_resx\", GSS_RESX)\n \n /* GIMPLE_TRY <TRY_KIND, EVAL, CLEANUP>\n    represents a try/catch or a try/finally statement.\n@@ -185,10 +174,10 @@ DEFGSCODE(GIMPLE_RESX, \"gimple_resx\", NULL)\n    GIMPLE_TRY_FINALLY, CLEANUP is always executed after executing EVAL\n    (regardless of whether EVAL finished normally, or jumped out or an\n    exception was thrown).  */\n-DEFGSCODE(GIMPLE_TRY, \"gimple_try\", NULL)\n+DEFGSCODE(GIMPLE_TRY, \"gimple_try\", GSS_TRY)\n \n /* GIMPLE_NOP represents the \"do nothing\" statement.  */\n-DEFGSCODE(GIMPLE_NOP, \"gimple_nop\", NULL)\n+DEFGSCODE(GIMPLE_NOP, \"gimple_nop\", GSS_BASE)\n \n \n /* IMPORTANT.\n@@ -206,20 +195,22 @@ DEFGSCODE(GIMPLE_NOP, \"gimple_nop\", NULL)\n    GIMPLE_OMP_LOAD (tmp, mem)\n    val = some computations involving tmp;\n    GIMPLE_OMP_STORE (val).  */\n-DEFGSCODE(GIMPLE_OMP_ATOMIC_LOAD, \"gimple_omp_atomic_load\", NULL)\n-DEFGSCODE(GIMPLE_OMP_ATOMIC_STORE, \"gimple_omp_atomic_store\", NULL)\n+DEFGSCODE(GIMPLE_OMP_ATOMIC_LOAD, \"gimple_omp_atomic_load\",\n+\t  GSS_OMP_ATOMIC_LOAD)\n+DEFGSCODE(GIMPLE_OMP_ATOMIC_STORE, \"gimple_omp_atomic_store\",\n+\t  GSS_OMP_ATOMIC_STORE)\n \n /* GIMPLE_OMP_CONTINUE marks the location of the loop or sections\n    iteration in partially lowered OpenMP code.  */\n-DEFGSCODE(GIMPLE_OMP_CONTINUE, \"gimple_omp_continue\", NULL)\n+DEFGSCODE(GIMPLE_OMP_CONTINUE, \"gimple_omp_continue\", GSS_OMP_CONTINUE)\n \n /* GIMPLE_OMP_CRITICAL <NAME, BODY> represents\n \n    #pragma omp critical [name]\n \n    NAME is the name given to the critical section.\n    BODY is the sequence of statements that are inside the critical section.  */\n-DEFGSCODE(GIMPLE_OMP_CRITICAL, \"gimple_omp_critical\", NULL)\n+DEFGSCODE(GIMPLE_OMP_CRITICAL, \"gimple_omp_critical\", GSS_OMP_CRITICAL)\n \n /* GIMPLE_OMP_FOR <BODY, CLAUSES, INDEX, INITIAL, FINAL, COND, INCR, PRE_BODY>\n    represents\n@@ -256,15 +247,15 @@ DEFGSCODE(GIMPLE_OMP_CRITICAL, \"gimple_omp_critical\", NULL)\n    expressions that are evaluated without any synchronization.\n    The evaluation order, frequency of evaluation and side-effects are\n    unspecified by the standard.  */\n-DEFGSCODE(GIMPLE_OMP_FOR, \"gimple_omp_for\", NULL)\n+DEFGSCODE(GIMPLE_OMP_FOR, \"gimple_omp_for\", GSS_OMP_FOR)\n \n /* GIMPLE_OMP_MASTER <BODY> represents #pragma omp master.\n    BODY is the sequence of statements to execute in the master section.  */\n-DEFGSCODE(GIMPLE_OMP_MASTER, \"gimple_omp_master\", NULL)\n+DEFGSCODE(GIMPLE_OMP_MASTER, \"gimple_omp_master\", GSS_OMP)\n \n /* GIMPLE_OMP_ORDERED <BODY> represents #pragma omp ordered.\n    BODY is the sequence of statements to execute in the ordered section.  */\n-DEFGSCODE(GIMPLE_OMP_ORDERED, \"gimple_omp_ordered\", NULL)\n+DEFGSCODE(GIMPLE_OMP_ORDERED, \"gimple_omp_ordered\", GSS_OMP)\n \n /* GIMPLE_OMP_PARALLEL <BODY, CLAUSES, CHILD_FN, DATA_ARG> represents\n \n@@ -282,7 +273,7 @@ DEFGSCODE(GIMPLE_OMP_ORDERED, \"gimple_omp_ordered\", NULL)\n    DATA_ARG is a local variable in the parent function containing data\n    to be shared with CHILD_FN.  This is used to implement all the data\n    sharing clauses.  */\n-DEFGSCODE(GIMPLE_OMP_PARALLEL, \"gimple_omp_parallel\", NULL)\n+DEFGSCODE(GIMPLE_OMP_PARALLEL, \"gimple_omp_parallel\", GSS_OMP_PARALLEL)\n \n /* GIMPLE_OMP_TASK <BODY, CLAUSES, CHILD_FN, DATA_ARG, COPY_FN,\n \t\t    ARG_SIZE, ARG_ALIGN> represents\n@@ -308,43 +299,43 @@ DEFGSCODE(GIMPLE_OMP_PARALLEL, \"gimple_omp_parallel\", NULL)\n \n    ARG_SIZE and ARG_ALIGN are the size and alignment of the incoming\n    data area allocated by GOMP_task and passed to CHILD_FN.  */\n-DEFGSCODE(GIMPLE_OMP_TASK, \"gimple_omp_task\", NULL)\n+DEFGSCODE(GIMPLE_OMP_TASK, \"gimple_omp_task\", GSS_OMP_TASK)\n \n /* OMP_RETURN marks the end of an OpenMP directive.  */\n-DEFGSCODE(GIMPLE_OMP_RETURN, \"gimple_omp_return\", NULL)\n+DEFGSCODE(GIMPLE_OMP_RETURN, \"gimple_omp_return\", GSS_BASE)\n \n /* OMP_SECTION <BODY> represents #pragma omp section.\n    BODY is the sequence of statements in the section body.  */\n-DEFGSCODE(GIMPLE_OMP_SECTION, \"gimple_omp_section\", NULL)\n+DEFGSCODE(GIMPLE_OMP_SECTION, \"gimple_omp_section\", GSS_OMP)\n \n /* OMP_SECTIONS <BODY, CLAUSES, CONTROL> represents #pragma omp sections.\n \n    BODY is the sequence of statements in the sections body.\n    CLAUSES is a TREE_LIST node holding the list of associated clauses.\n    CONTROL is a VAR_DECL used for deciding which of the sections\n    to execute.  */\n-DEFGSCODE(GIMPLE_OMP_SECTIONS, \"gimple_omp_sections\", NULL)\n+DEFGSCODE(GIMPLE_OMP_SECTIONS, \"gimple_omp_sections\", GSS_OMP_SECTIONS)\n \n /* GIMPLE_OMP_SECTIONS_SWITCH is a marker placed immediately after\n    OMP_SECTIONS.  It represents the GIMPLE_SWITCH used to decide which\n    branch is taken.  */\n-DEFGSCODE(GIMPLE_OMP_SECTIONS_SWITCH, \"gimple_omp_sections_switch\", NULL)\n+DEFGSCODE(GIMPLE_OMP_SECTIONS_SWITCH, \"gimple_omp_sections_switch\", GSS_BASE)\n \n /* GIMPLE_OMP_SINGLE <BODY, CLAUSES> represents #pragma omp single\n    BODY is the sequence of statements inside the single section.\n    CLAUSES is a TREE_LIST node holding the associated clauses.  */\n-DEFGSCODE(GIMPLE_OMP_SINGLE, \"gimple_omp_single\", NULL)\n+DEFGSCODE(GIMPLE_OMP_SINGLE, \"gimple_omp_single\", GSS_OMP_SINGLE)\n \n /* GIMPLE_PREDICT <PREDICT, OUTCOME> specifies a hint for branch prediction.\n \n    PREDICT is one of the predictors from predict.def.\n \n    OUTCOME is NOT_TAKEN or TAKEN.  */\n-DEFGSCODE(GIMPLE_PREDICT, \"gimple_predict\", NULL)\n+DEFGSCODE(GIMPLE_PREDICT, \"gimple_predict\", GSS_BASE)\n \n /*  This node represents a cleanup expression.  It is ONLY USED INTERNALLY\n     by the gimplifier as a placeholder for cleanups, and its uses will be\n     cleaned up by the time gimplification is done.\n     \n     This tuple should not exist outside of the gimplifier proper.  */\n-DEFGSCODE(GIMPLE_WITH_CLEANUP_EXPR, \"gimple_with_cleanup_expr\", NULL)\n+DEFGSCODE(GIMPLE_WITH_CLEANUP_EXPR, \"gimple_with_cleanup_expr\", GSS_WCE)"}, {"sha": "8ca1f288084e8add491f5a98da61b534704fcca1", "filename": "gcc/gimple.h", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c4a81cc167ed8a02d0cee69245ec2568b952a7/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c4a81cc167ed8a02d0cee69245ec2568b952a7/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=f2c4a81cc167ed8a02d0cee69245ec2568b952a7", "patch": "@@ -714,12 +714,12 @@ struct GTY(()) gimple_statement_omp_atomic_store {\n   tree val;\n };\n \n+#define DEFGSSTRUCT(SYM, STRUCT, HAS_TREE_OP)\tSYM,\n enum gimple_statement_structure_enum {\n-#define DEFGSSTRUCT(SYM, STRING)\tSYM,\n #include \"gsstruct.def\"\n-#undef DEFGSSTRUCT\n     LAST_GSS_ENUM\n };\n+#undef DEFGSSTRUCT\n \n \n /* Define the overall contents of a gimple tuple.  It may be any of the\n@@ -750,6 +750,14 @@ union GTY ((desc (\"gimple_statement_structure (&%h)\"))) gimple_statement_d {\n };\n \n /* In gimple.c.  */\n+\n+/* Offset in bytes to the location of the operand vector.\n+   Zero if there is no operand vector for this tuple structure.  */\n+extern size_t const gimple_ops_offset_[];\n+\n+/* Map GIMPLE codes to GSS codes.  */\n+extern enum gimple_statement_structure_enum const gss_for_code_[];\n+\n gimple gimple_build_return (tree);\n \n gimple gimple_build_assign_stat (tree, tree MEM_STAT_DECL);\n@@ -801,7 +809,6 @@ gimple gimple_build_cdt (tree, tree);\n gimple gimple_build_omp_atomic_load (tree, tree);\n gimple gimple_build_omp_atomic_store (tree);\n gimple gimple_build_predict (enum br_predictor, enum prediction);\n-enum gimple_statement_structure_enum gimple_statement_structure (gimple);\n enum gimple_statement_structure_enum gss_for_assign (enum tree_code);\n void sort_case_labels (VEC(tree,heap) *);\n void gimple_set_body (tree, gimple_seq);\n@@ -1023,6 +1030,25 @@ gimple_code (const_gimple g)\n }\n \n \n+/* Return the GSS code used by a GIMPLE code.  */\n+\n+static inline enum gimple_statement_structure_enum\n+gss_for_code (enum gimple_code code)\n+{\n+  gcc_assert ((unsigned int)code < LAST_AND_UNUSED_GIMPLE_CODE);\n+  return gss_for_code_[code];\n+}\n+\n+\n+/* Return which GSS code is used by GS.  */\n+\n+static inline enum gimple_statement_structure_enum\n+gimple_statement_structure (gimple gs)\n+{\n+  return gss_for_code (gimple_code (gs));\n+}\n+\n+\n /* Return true if statement G has sub-statements.  This is only true for\n    High GIMPLE statements.  */\n \n@@ -1557,16 +1583,15 @@ gimple_set_num_ops (gimple gs, unsigned num_ops)\n static inline tree *\n gimple_ops (gimple gs)\n {\n-  /* Offset in bytes to the location of the operand vector in every\n-     tuple structure.  Defined in gimple.c  */\n-  extern size_t const gimple_ops_offset_[];\n-\n-  if (!gimple_has_ops (gs))\n-    return NULL;\n+  size_t off;\n \n   /* All the tuples have their operand vector at the very bottom\n-     of the structure.  */\n-  return ((tree *) ((char *) gs + gimple_ops_offset_[gimple_code (gs)]));\n+     of the structure.  Note that those structures that do not\n+     have an operand vector have a zero offset.  */\n+  off = gimple_ops_offset_[gimple_statement_structure (gs)];\n+  gcc_assert (off != 0);\n+\n+  return (tree *) ((char *) gs + off);\n }\n \n "}, {"sha": "97875c9e03627886b5fcd2159cb95ed4f52aadc4", "filename": "gcc/gsstruct.def", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c4a81cc167ed8a02d0cee69245ec2568b952a7/gcc%2Fgsstruct.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c4a81cc167ed8a02d0cee69245ec2568b952a7/gcc%2Fgsstruct.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgsstruct.def?ref=f2c4a81cc167ed8a02d0cee69245ec2568b952a7", "patch": "@@ -21,28 +21,28 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n /* The format of this file is\n-   DEFGSSTRUCT(GSS_enumeration value, printable name).\n+   DEFGSSTRUCT(GSS enumeration value, structure name, has-tree-operands).\n    Each enum value should correspond with a single member of the union\n    gimple_statement_d.  */\n \n-DEFGSSTRUCT(GSS_BASE, \"base\")\n-DEFGSSTRUCT(GSS_WITH_OPS, \"with_ops\")\n-DEFGSSTRUCT(GSS_WITH_MEM_OPS, \"with_mem_ops\")\n-DEFGSSTRUCT(GSS_OMP, \"omp\")\n-DEFGSSTRUCT(GSS_BIND, \"bind\")\n-DEFGSSTRUCT(GSS_CATCH, \"catch\")\n-DEFGSSTRUCT(GSS_EH_FILTER, \"eh_filter\")\n-DEFGSSTRUCT(GSS_PHI, \"phi\")\n-DEFGSSTRUCT(GSS_RESX, \"resx\")\n-DEFGSSTRUCT(GSS_TRY, \"try\")\n-DEFGSSTRUCT(GSS_WCE, \"with_cleanup_expression\")\n-DEFGSSTRUCT(GSS_ASM, \"asm\")\n-DEFGSSTRUCT(GSS_OMP_CRITICAL, \"omp_critical\")\n-DEFGSSTRUCT(GSS_OMP_FOR, \"omp_for\")\n-DEFGSSTRUCT(GSS_OMP_PARALLEL, \"omp_parallel\")\n-DEFGSSTRUCT(GSS_OMP_TASK, \"omp_task\")\n-DEFGSSTRUCT(GSS_OMP_SECTIONS, \"sections\")\n-DEFGSSTRUCT(GSS_OMP_SINGLE, \"single\")\n-DEFGSSTRUCT(GSS_OMP_CONTINUE, \"omp_continue\")\n-DEFGSSTRUCT(GSS_OMP_ATOMIC_LOAD, \"omp_atomic_load\")\n-DEFGSSTRUCT(GSS_OMP_ATOMIC_STORE, \"omp_atomic_store\")\n+DEFGSSTRUCT(GSS_BASE, gimple_statement_base, false)\n+DEFGSSTRUCT(GSS_WITH_OPS, gimple_statement_with_ops, true)\n+DEFGSSTRUCT(GSS_WITH_MEM_OPS, gimple_statement_with_memory_ops, true)\n+DEFGSSTRUCT(GSS_ASM, gimple_statement_asm, true)\n+DEFGSSTRUCT(GSS_BIND, gimple_statement_bind, false)\n+DEFGSSTRUCT(GSS_PHI, gimple_statement_phi, false)\n+DEFGSSTRUCT(GSS_TRY, gimple_statement_try, false)\n+DEFGSSTRUCT(GSS_CATCH, gimple_statement_catch, false)\n+DEFGSSTRUCT(GSS_EH_FILTER, gimple_statement_eh_filter, false)\n+DEFGSSTRUCT(GSS_RESX, gimple_statement_resx, false)\n+DEFGSSTRUCT(GSS_WCE, gimple_statement_wce, false)\n+DEFGSSTRUCT(GSS_OMP, gimple_statement_omp, false)\n+DEFGSSTRUCT(GSS_OMP_CRITICAL, gimple_statement_omp_critical, false)\n+DEFGSSTRUCT(GSS_OMP_FOR, gimple_statement_omp_for, false)\n+DEFGSSTRUCT(GSS_OMP_PARALLEL, gimple_statement_omp_parallel, false)\n+DEFGSSTRUCT(GSS_OMP_TASK, gimple_statement_omp_task, false)\n+DEFGSSTRUCT(GSS_OMP_SECTIONS, gimple_statement_omp_sections, false)\n+DEFGSSTRUCT(GSS_OMP_SINGLE, gimple_statement_omp_single, false)\n+DEFGSSTRUCT(GSS_OMP_CONTINUE, gimple_statement_omp_continue, false)\n+DEFGSSTRUCT(GSS_OMP_ATOMIC_LOAD, gimple_statement_omp_atomic_load, false)\n+DEFGSSTRUCT(GSS_OMP_ATOMIC_STORE, gimple_statement_omp_atomic_store, false)"}]}