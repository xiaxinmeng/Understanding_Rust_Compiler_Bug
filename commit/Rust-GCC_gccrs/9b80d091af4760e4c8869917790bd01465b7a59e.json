{"sha": "9b80d091af4760e4c8869917790bd01465b7a59e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI4MGQwOTFhZjQ3NjBlNGM4ODY5OTE3NzkwYmQwMTQ2NWI3YTU5ZQ==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-08-02T14:55:47Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-08-02T14:55:47Z"}, "message": "gimple.c (canonicalize_cond_expr_cond): Handle cast from boolean-type.\n\n\t* gimple.c (canonicalize_cond_expr_cond): Handle cast from\n\tboolean-type.\n\t(ssa_forward_propagate_and_combine): Interprete result of\n\tforward_propagate_comparison.\n\t* gcc/gimple-fold.c (fold_gimple_assign): Add canonicalization for\n\tboolean-typed operands for comparisons.\n\n\t* gcc.dg/tree-ssa/forwprop-15.c: New testcase.\n\nFrom-SVN: r177170", "tree": {"sha": "9ab01933186298e3c020529082506e008ea0077a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ab01933186298e3c020529082506e008ea0077a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b80d091af4760e4c8869917790bd01465b7a59e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b80d091af4760e4c8869917790bd01465b7a59e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b80d091af4760e4c8869917790bd01465b7a59e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b80d091af4760e4c8869917790bd01465b7a59e/comments", "author": null, "committer": null, "parents": [{"sha": "7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "7493d2313b237f6424c3afa2f1031dcf3b243a86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b80d091af4760e4c8869917790bd01465b7a59e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b80d091af4760e4c8869917790bd01465b7a59e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b80d091af4760e4c8869917790bd01465b7a59e", "patch": "@@ -1,3 +1,12 @@\n+2011-08-02  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* gimple.c (canonicalize_cond_expr_cond): Handle cast from\n+\tboolean-type.\n+\t(ssa_forward_propagate_and_combine): Interprete result of\n+\tforward_propagate_comparison.\n+\t* gcc/gimple-fold.c (fold_gimple_assign): Add canonicalization for\n+\tboolean-typed operands for comparisons.\n+\n 2011-08-02  Georg-Johann Lay  <avr@gjlay.de>\n \t\n \t* config/avr/libgcc.S: Gather related function in the"}, {"sha": "cd988b9c1dbe0f4eeefdb1a7a155a5f42a3682f8", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b80d091af4760e4c8869917790bd01465b7a59e/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b80d091af4760e4c8869917790bd01465b7a59e/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=9b80d091af4760e4c8869917790bd01465b7a59e", "patch": "@@ -814,6 +814,47 @@ fold_gimple_assign (gimple_stmt_iterator *si)\n \t\t\t\t\t     gimple_assign_rhs1 (stmt),\n \t\t\t\t\t     gimple_assign_rhs2 (stmt));\n \t}\n+      /* Try to canonicalize for boolean-typed X the comparisons\n+\t X == 0, X == 1, X != 0, and X != 1.  */\n+      else if (gimple_assign_rhs_code (stmt) == EQ_EXPR\n+               || gimple_assign_rhs_code (stmt) == NE_EXPR)\n+        {\n+\t  tree lhs = gimple_assign_lhs (stmt);\n+\t  tree op1 = gimple_assign_rhs1 (stmt);\n+\t  tree op2 = gimple_assign_rhs2 (stmt);\n+\t  tree type = TREE_TYPE (op1);\n+\n+\t  /* Check whether the comparison operands are of the same boolean\n+\t     type as the result type is.\n+\t     Check that second operand is an integer-constant with value\n+\t     one or zero.  */\n+\t  if (TREE_CODE (op2) == INTEGER_CST\n+\t      && (integer_zerop (op2) || integer_onep (op2))\n+\t      && useless_type_conversion_p (TREE_TYPE (lhs), type))\n+\t    {\n+\t      enum tree_code cmp_code = gimple_assign_rhs_code (stmt);\n+\t      bool is_logical_not = false;\n+\n+\t      /* X == 0 and X != 1 is a logical-not.of X\n+\t         X == 1 and X != 0 is X  */\n+\t      if ((cmp_code == EQ_EXPR && integer_zerop (op2))\n+\t          || (cmp_code == NE_EXPR && integer_onep (op2)))\n+\t        is_logical_not = true;\n+\n+\t      if (is_logical_not == false)\n+\t        result = op1;\n+\t      /* Only for one-bit precision typed X the transformation\n+\t         !X -> ~X is valied.  */\n+\t      else if (TYPE_PRECISION (type) == 1)\n+\t\tresult = build1_loc (gimple_location (stmt), BIT_NOT_EXPR,\n+\t\t\t\t     type, op1);\n+\t      /* Otherwise we use !X -> X ^ 1.  */\n+\t      else\n+\t        result = build2_loc (gimple_location (stmt), BIT_XOR_EXPR,\n+\t\t\t\t     type, op1, build_int_cst (type, 1));\n+\t     \n+\t    }\n+\t}\n \n       if (!result)\n         result = fold_binary_loc (loc, subcode,"}, {"sha": "af23c6a3fc987867911bdd0f3883664141ca0d7e", "filename": "gcc/gimple.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b80d091af4760e4c8869917790bd01465b7a59e/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b80d091af4760e4c8869917790bd01465b7a59e/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=9b80d091af4760e4c8869917790bd01465b7a59e", "patch": "@@ -3160,7 +3160,9 @@ canonicalize_cond_expr_cond (tree t)\n {\n   /* Strip conversions around boolean operations.  */\n   if (CONVERT_EXPR_P (t)\n-      && truth_value_p (TREE_CODE (TREE_OPERAND (t, 0))))\n+      && (truth_value_p (TREE_CODE (TREE_OPERAND (t, 0)))\n+          || TREE_CODE (TREE_TYPE (TREE_OPERAND (t, 0)))\n+\t     == BOOLEAN_TYPE))\n     t = TREE_OPERAND (t, 0);\n \n   /* For !x use x == 0.  */"}, {"sha": "103bf569b86ddff130a1a7e82f9b167d2dadc13a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b80d091af4760e4c8869917790bd01465b7a59e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b80d091af4760e4c8869917790bd01465b7a59e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b80d091af4760e4c8869917790bd01465b7a59e", "patch": "@@ -1,3 +1,7 @@\n+2011-08-02  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/forwprop-15.c: New testcase.\n+\n 2011-08-01  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/49932"}, {"sha": "43c63516774f8b08b9c1d665d60af8c5559787a1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-15.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b80d091af4760e4c8869917790bd01465b7a59e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b80d091af4760e4c8869917790bd01465b7a59e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-15.c?ref=9b80d091af4760e4c8869917790bd01465b7a59e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop1\" }  */\n+\n+_Bool\n+foo (_Bool a, _Bool b, _Bool c\n+{\n+  _Bool r1 = a == 0 & b != 0;\n+  _Bool r2 = b != 0 & c == 0;\n+  return (r1 == 0 & r2 == 0);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \" == \" 0 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \" != \" 0 \"forwprop1\" } } */\n+/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "2a56b79a42308b92f708a454d752693affcc26dd", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b80d091af4760e4c8869917790bd01465b7a59e/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b80d091af4760e4c8869917790bd01465b7a59e/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=9b80d091af4760e4c8869917790bd01465b7a59e", "patch": "@@ -468,7 +468,9 @@ forward_propagate_into_comparison (gimple_stmt_iterator *gsi)\n   if (tmp)\n     {\n       gimple_assign_set_rhs_from_tree (gsi, tmp);\n+      fold_stmt_inplace (stmt);\n       update_stmt (stmt);\n+\n       if (TREE_CODE (rhs1) == SSA_NAME)\n \tcfg_changed |= remove_prop_source_from_use (rhs1);\n       if (TREE_CODE (rhs2) == SSA_NAME)\n@@ -2407,7 +2409,8 @@ ssa_forward_propagate_and_combine (void)\n \t    }\n \t  else if (TREE_CODE_CLASS (code) == tcc_comparison)\n \t    {\n-\t      forward_propagate_comparison (stmt);\n+\t      if (forward_propagate_comparison (stmt))\n+\t        cfg_changed = true;\n \t      gsi_next (&gsi);\n \t    }\n \t  else"}]}