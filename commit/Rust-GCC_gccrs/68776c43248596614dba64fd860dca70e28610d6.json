{"sha": "68776c43248596614dba64fd860dca70e28610d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg3NzZjNDMyNDg1OTY2MTRkYmE2NGZkODYwZGNhNzBlMjg2MTBkNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-15T14:53:41Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-15T14:53:41Z"}, "message": "ia64.c, [...]: Fix comment typos.\n\n\t* config/ia64/ia64.c, config/mips/mips.c,\n\tconfig/mmix/mmix-modes.def: Fix comment typos.\n\nFrom-SVN: r77851", "tree": {"sha": "a5a0a5fc2f39e0b57908d85c349291e014905919", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5a0a5fc2f39e0b57908d85c349291e014905919"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68776c43248596614dba64fd860dca70e28610d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68776c43248596614dba64fd860dca70e28610d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68776c43248596614dba64fd860dca70e28610d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68776c43248596614dba64fd860dca70e28610d6/comments", "author": null, "committer": null, "parents": [{"sha": "7501c4e45bd8e7ca6fc36d83dbc4b3ea1772fddc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7501c4e45bd8e7ca6fc36d83dbc4b3ea1772fddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7501c4e45bd8e7ca6fc36d83dbc4b3ea1772fddc"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "6117cd1e22a13bc1a644e04b117e8c26fa38b8b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68776c43248596614dba64fd860dca70e28610d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68776c43248596614dba64fd860dca70e28610d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68776c43248596614dba64fd860dca70e28610d6", "patch": "@@ -1,3 +1,8 @@\n+2004-02-15  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/ia64/ia64.c, config/mips/mips.c,\n+\tconfig/mmix/mmix-modes.def: Fix comment typos.\n+\n 2004-02-15  Roger Sayle  <roger@eyesopen.com>\n \n \t* c-common.h (GET_DIRECTIVE_LINE): Remove unused macro."}, {"sha": "8dcee215b498e1eec1fc3a9aa6dec6eeefc3efa7", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68776c43248596614dba64fd860dca70e28610d6/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68776c43248596614dba64fd860dca70e28610d6/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=68776c43248596614dba64fd860dca70e28610d6", "patch": "@@ -7088,7 +7088,7 @@ bundling (FILE *dump, int verbose, rtx prev_head_insn, rtx tail)\n \t  ia64_emit_insn_before (b, insn);\n \t  b = PREV_INSN (insn);\n \t  insn = b;\n-\t  /* See comment above in analogous place for emiting nops\n+\t  /* See comment above in analogous place for emitting nops\n \t     after the insn.  */\n \t  template0 = template1;\n \t  template1 = -1;\n@@ -7105,7 +7105,7 @@ bundling (FILE *dump, int verbose, rtx prev_head_insn, rtx tail)\n \t    abort ();\n \t  if (pos % 3 == 0)\n \t    {\n-\t      /* See comment above in analogous place for emiting nops\n+\t      /* See comment above in analogous place for emitting nops\n \t\t after the insn.  */\n \t      if (template0 < 0)\n \t\tabort ();"}, {"sha": "9ffa08f0ba87994a2885eb3c26cdc74b6a8c8eb6", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68776c43248596614dba64fd860dca70e28610d6/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68776c43248596614dba64fd860dca70e28610d6/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=68776c43248596614dba64fd860dca70e28610d6", "patch": "@@ -4426,7 +4426,7 @@ mips_get_unaligned_mem (rtx *op, unsigned int width, int bitpos,\n   first = adjust_address (*op, QImode, 0);\n   last = adjust_address (*op, QImode, width / BITS_PER_UNIT - 1);\n \n-  /* Allocate to LEFT and RIGHT according to endiannes.  LEFT should\n+  /* Allocate to LEFT and RIGHT according to endianness.  LEFT should\n      be the upper word and RIGHT the lower word.  */\n   if (TARGET_BIG_ENDIAN)\n     *left = first, *right = last;\n@@ -6008,7 +6008,7 @@ mips_output_aligned_decl_common (FILE *stream, tree decl, const char *name,\n    macros, mark the symbol as written so that mips_file_end won't emit an\n    .extern for it.  STREAM is the output file, NAME is the name of the\n    symbol, INIT_STRING is the string that should be written before the\n-   symbol and FINAL_STRING is the string that shoulbe written after it.\n+   symbol and FINAL_STRING is the string that should be written after it.\n    FINAL_STRING is a printf() format that consumes the remaining arguments.  */\n \n void"}, {"sha": "6681761f8c9bc2ce17b3c7b907071b32b2995523", "filename": "gcc/config/mmix/mmix-modes.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68776c43248596614dba64fd860dca70e28610d6/gcc%2Fconfig%2Fmmix%2Fmmix-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68776c43248596614dba64fd860dca70e28610d6/gcc%2Fconfig%2Fmmix%2Fmmix-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-modes.def?ref=68776c43248596614dba64fd860dca70e28610d6", "patch": "@@ -36,7 +36,7 @@ CC_MODE (CC_UNS);\n \n /* The CC_FP mode is for a non-equality floating-point comparison, using\n    the FCMP or FCMPE insn.  The result is (integer) -1 or 1 for\n-   espectively a < b and a > b, otherwise 0.  */\n+   respectively a < b and a > b, otherwise 0.  */\n CC_MODE (CC_FP);\n \n /* The CC_FPEQ mode is for an equality floating-point comparison, using"}]}