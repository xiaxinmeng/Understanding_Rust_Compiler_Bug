{"sha": "9ff33839fc46e2d3f5ff36870e8000f2f15846e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZmMzM4MzlmYzQ2ZTJkM2Y1ZmYzNjg3MGU4MDAwZjJmMTU4NDZlOQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-06-26T19:04:50Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2019-06-26T19:04:50Z"}, "message": "[PATCH, PPC 2/2] Fix Darwin bootstrap after split of rs6000.c.\n\nTo fix this we need to make the branch islands (or code) visible between\nboth files.  This keeps the generation side in rs6000.c and moves the\noutput routine to rs6000-logue.c, placing a reference to the islands\nvector in rs6000-internal.h.\n\n2019-06-26  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* config/rs6000/rs6000-internal.h (branch_island): New typedef.\n\t(branch_islands): New extern.\n\t* config/rs6000/rs6000-logue.c (macho_branch_islands): Moved from\n\t* config/rs6000/rs6000.c: .. here.\n\nFrom-SVN: r272710", "tree": {"sha": "c9a97bbddd19d19c6117949ca2a6b686cdc1b1c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9a97bbddd19d19c6117949ca2a6b686cdc1b1c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ff33839fc46e2d3f5ff36870e8000f2f15846e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff33839fc46e2d3f5ff36870e8000f2f15846e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ff33839fc46e2d3f5ff36870e8000f2f15846e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff33839fc46e2d3f5ff36870e8000f2f15846e9/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b011221fd1dc2b4a7fd57ea1c98a69223524f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b011221fd1dc2b4a7fd57ea1c98a69223524f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b011221fd1dc2b4a7fd57ea1c98a69223524f54"}], "stats": {"total": 211, "additions": 113, "deletions": 98}, "files": [{"sha": "cdfc9f972d4058ca76b0658261b6cc763d047a2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff33839fc46e2d3f5ff36870e8000f2f15846e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff33839fc46e2d3f5ff36870e8000f2f15846e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ff33839fc46e2d3f5ff36870e8000f2f15846e9", "patch": "@@ -1,3 +1,10 @@\n+2019-06-26  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/rs6000/rs6000-internal.h (branch_island): New typedef.\n+\t(branch_islands): New extern.\n+\t* config/rs6000/rs6000-logue.c (macho_branch_islands): Moved from\n+\t* config/rs6000/rs6000.c: .. here.\n+\n 2019-06-26  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config.gcc (powerpc*-*-linux*): Move target_gtfiles from here.."}, {"sha": "f69fa5d301352780b011f736aa9bb1d9b3325519", "filename": "gcc/config/rs6000/rs6000-internal.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff33839fc46e2d3f5ff36870e8000f2f15846e9/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff33839fc46e2d3f5ff36870e8000f2f15846e9/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h?ref=9ff33839fc46e2d3f5ff36870e8000f2f15846e9", "patch": "@@ -110,5 +110,18 @@ quad_address_offset_p (HOST_WIDE_INT offset)\n   return (IN_RANGE (offset, -32768, 32767) && ((offset) & 0xf) == 0);\n }\n \n+/* Mach-O (Darwin) support for longcalls, emitted from  rs6000-logue.c.  */\n+\n+#if TARGET_MACHO\n+\n+typedef struct branch_island_d {\n+  tree function_name;\n+  tree label_name;\n+  int line_number;\n+ } branch_island;\n+\n+extern vec<branch_island, va_gc> *branch_islands;\n+\n+#endif\n \n #endif"}, {"sha": "3fe623056d2e7c8c5368d23873cd8801e98194c8", "filename": "gcc/config/rs6000/rs6000-logue.c", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff33839fc46e2d3f5ff36870e8000f2f15846e9/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff33839fc46e2d3f5ff36870e8000f2f15846e9/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c?ref=9ff33839fc46e2d3f5ff36870e8000f2f15846e9", "patch": "@@ -48,6 +48,10 @@\n #include \"params.h\"\n #include \"alias.h\"\n #include \"rs6000-internal.h\"\n+#if TARGET_MACHO\n+#include \"gstab.h\"  /* for N_SLINE */\n+#include \"dbxout.h\" /* dbxout_ */\n+#endif\n \n static int rs6000_ra_ever_killed (void);\n static void is_altivec_return_reg (rtx, void *);\n@@ -5061,6 +5065,94 @@ rs6000_emit_epilogue (enum epilogue_type epilogue_type)\n     }\n }\n \n+#if TARGET_MACHO\n+\n+/* Generate far-jump branch islands for everything recorded in\n+   branch_islands.  Invoked immediately after the last instruction of\n+   the epilogue has been emitted; the branch islands must be appended\n+   to, and contiguous with, the function body.  Mach-O stubs are\n+   generated in machopic_output_stub().  */\n+\n+static void\n+macho_branch_islands (void)\n+{\n+  char tmp_buf[512];\n+\n+  while (!vec_safe_is_empty (branch_islands))\n+    {\n+      branch_island *bi = &branch_islands->last ();\n+      const char *label = IDENTIFIER_POINTER (bi->label_name);\n+      const char *name = IDENTIFIER_POINTER (bi->function_name);\n+      char name_buf[512];\n+      /* Cheap copy of the details from the Darwin ASM_OUTPUT_LABELREF().  */\n+      if (name[0] == '*' || name[0] == '&')\n+\tstrcpy (name_buf, name+1);\n+      else\n+\t{\n+\t  name_buf[0] = '_';\n+\t  strcpy (name_buf+1, name);\n+\t}\n+      strcpy (tmp_buf, \"\\n\");\n+      strcat (tmp_buf, label);\n+#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n+      if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n+\tdbxout_stabd (N_SLINE, bi->line_number);\n+#endif /* DBX_DEBUGGING_INFO || XCOFF_DEBUGGING_INFO */\n+      if (flag_pic)\n+\t{\n+\t  if (TARGET_LINK_STACK)\n+\t    {\n+\t      char name[32];\n+\t      get_ppc476_thunk_name (name);\n+\t      strcat (tmp_buf, \":\\n\\tmflr r0\\n\\tbl \");\n+\t      strcat (tmp_buf, name);\n+\t      strcat (tmp_buf, \"\\n\");\n+\t      strcat (tmp_buf, label);\n+\t      strcat (tmp_buf, \"_pic:\\n\\tmflr r11\\n\");\n+\t    }\n+\t  else\n+\t    {\n+\t      strcat (tmp_buf, \":\\n\\tmflr r0\\n\\tbcl 20,31,\");\n+\t      strcat (tmp_buf, label);\n+\t      strcat (tmp_buf, \"_pic\\n\");\n+\t      strcat (tmp_buf, label);\n+\t      strcat (tmp_buf, \"_pic:\\n\\tmflr r11\\n\");\n+\t    }\n+\n+\t  strcat (tmp_buf, \"\\taddis r11,r11,ha16(\");\n+\t  strcat (tmp_buf, name_buf);\n+\t  strcat (tmp_buf, \" - \");\n+\t  strcat (tmp_buf, label);\n+\t  strcat (tmp_buf, \"_pic)\\n\");\n+\n+\t  strcat (tmp_buf, \"\\tmtlr r0\\n\");\n+\n+\t  strcat (tmp_buf, \"\\taddi r12,r11,lo16(\");\n+\t  strcat (tmp_buf, name_buf);\n+\t  strcat (tmp_buf, \" - \");\n+\t  strcat (tmp_buf, label);\n+\t  strcat (tmp_buf, \"_pic)\\n\");\n+\n+\t  strcat (tmp_buf, \"\\tmtctr r12\\n\\tbctr\\n\");\n+\t}\n+      else\n+\t{\n+\t  strcat (tmp_buf, \":\\n\\tlis r12,hi16(\");\n+\t  strcat (tmp_buf, name_buf);\n+\t  strcat (tmp_buf, \")\\n\\tori r12,r12,lo16(\");\n+\t  strcat (tmp_buf, name_buf);\n+\t  strcat (tmp_buf, \")\\n\\tmtctr r12\\n\\tbctr\");\n+\t}\n+      output_asm_insn (tmp_buf, 0);\n+#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n+      if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n+\tdbxout_stabd (N_SLINE, bi->line_number);\n+#endif /* DBX_DEBUGGING_INFO || XCOFF_DEBUGGING_INFO */\n+      branch_islands->pop ();\n+    }\n+}\n+#endif\n+\n /* Write function epilogue.  */\n \n void"}, {"sha": "1837b312f55b4b69f5a6a01b2a1b9b203f3598b8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 98, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff33839fc46e2d3f5ff36870e8000f2f15846e9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff33839fc46e2d3f5ff36870e8000f2f15846e9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9ff33839fc46e2d3f5ff36870e8000f2f15846e9", "patch": "@@ -52,7 +52,6 @@\n #include \"explow.h\"\n #include \"expr.h\"\n #include \"output.h\"\n-#include \"dbxout.h\"\n #include \"common/common-target.h\"\n #include \"langhooks.h\"\n #include \"reload.h\"\n@@ -75,9 +74,6 @@\n #if TARGET_XCOFF\n #include \"xcoffout.h\"  /* get declarations of xcoff_*_section_name */\n #endif\n-#if TARGET_MACHO\n-#include \"gstab.h\"  /* for N_SLINE */\n-#endif\n #include \"case-cfn-macros.h\"\n #include \"ppc-auxv.h\"\n #include \"tree-ssa-propagate.h\"\n@@ -1291,7 +1287,6 @@ static rtx rs6000_legitimize_tls_address (rtx, enum tls_model);\n static rtx rs6000_darwin64_record_arg (CUMULATIVE_ARGS *, const_tree,\n \t\t\t\t       bool, bool);\n #if TARGET_MACHO\n-static void macho_branch_islands (void);\n static tree get_prev_label (tree);\n #endif\n static bool rs6000_mode_dependent_address (const_rtx);\n@@ -27438,14 +27433,7 @@ rs6000_fatal_bad_address (rtx op)\n \n #if TARGET_MACHO\n \n-typedef struct branch_island_d {\n-  tree function_name;\n-  tree label_name;\n-  int line_number;\n-} branch_island;\n-\n-\n-static vec<branch_island, va_gc> *branch_islands;\n+vec<branch_island, va_gc> *branch_islands;\n \n /* Remember to generate a branch island for far calls to the given\n    function.  */\n@@ -27458,91 +27446,6 @@ add_compiler_branch_island (tree label_name, tree function_name,\n   vec_safe_push (branch_islands, bi);\n }\n \n-/* Generate far-jump branch islands for everything recorded in\n-   branch_islands.  Invoked immediately after the last instruction of\n-   the epilogue has been emitted; the branch islands must be appended\n-   to, and contiguous with, the function body.  Mach-O stubs are\n-   generated in machopic_output_stub().  */\n-\n-static void\n-macho_branch_islands (void)\n-{\n-  char tmp_buf[512];\n-\n-  while (!vec_safe_is_empty (branch_islands))\n-    {\n-      branch_island *bi = &branch_islands->last ();\n-      const char *label = IDENTIFIER_POINTER (bi->label_name);\n-      const char *name = IDENTIFIER_POINTER (bi->function_name);\n-      char name_buf[512];\n-      /* Cheap copy of the details from the Darwin ASM_OUTPUT_LABELREF().  */\n-      if (name[0] == '*' || name[0] == '&')\n-\tstrcpy (name_buf, name+1);\n-      else\n-\t{\n-\t  name_buf[0] = '_';\n-\t  strcpy (name_buf+1, name);\n-\t}\n-      strcpy (tmp_buf, \"\\n\");\n-      strcat (tmp_buf, label);\n-#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n-      if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n-\tdbxout_stabd (N_SLINE, bi->line_number);\n-#endif /* DBX_DEBUGGING_INFO || XCOFF_DEBUGGING_INFO */\n-      if (flag_pic)\n-\t{\n-\t  if (TARGET_LINK_STACK)\n-\t    {\n-\t      char name[32];\n-\t      get_ppc476_thunk_name (name);\n-\t      strcat (tmp_buf, \":\\n\\tmflr r0\\n\\tbl \");\n-\t      strcat (tmp_buf, name);\n-\t      strcat (tmp_buf, \"\\n\");\n-\t      strcat (tmp_buf, label);\n-\t      strcat (tmp_buf, \"_pic:\\n\\tmflr r11\\n\");\n-\t    }\n-\t  else\n-\t    {\n-\t      strcat (tmp_buf, \":\\n\\tmflr r0\\n\\tbcl 20,31,\");\n-\t      strcat (tmp_buf, label);\n-\t      strcat (tmp_buf, \"_pic\\n\");\n-\t      strcat (tmp_buf, label);\n-\t      strcat (tmp_buf, \"_pic:\\n\\tmflr r11\\n\");\n-\t    }\n-\n-\t  strcat (tmp_buf, \"\\taddis r11,r11,ha16(\");\n-\t  strcat (tmp_buf, name_buf);\n-\t  strcat (tmp_buf, \" - \");\n-\t  strcat (tmp_buf, label);\n-\t  strcat (tmp_buf, \"_pic)\\n\");\n-\n-\t  strcat (tmp_buf, \"\\tmtlr r0\\n\");\n-\n-\t  strcat (tmp_buf, \"\\taddi r12,r11,lo16(\");\n-\t  strcat (tmp_buf, name_buf);\n-\t  strcat (tmp_buf, \" - \");\n-\t  strcat (tmp_buf, label);\n-\t  strcat (tmp_buf, \"_pic)\\n\");\n-\n-\t  strcat (tmp_buf, \"\\tmtctr r12\\n\\tbctr\\n\");\n-\t}\n-      else\n-\t{\n-\t  strcat (tmp_buf, \":\\n\\tlis r12,hi16(\");\n-\t  strcat (tmp_buf, name_buf);\n-\t  strcat (tmp_buf, \")\\n\\tori r12,r12,lo16(\");\n-\t  strcat (tmp_buf, name_buf);\n-\t  strcat (tmp_buf, \")\\n\\tmtctr r12\\n\\tbctr\");\n-\t}\n-      output_asm_insn (tmp_buf, 0);\n-#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n-      if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n-\tdbxout_stabd (N_SLINE, bi->line_number);\n-#endif /* DBX_DEBUGGING_INFO || XCOFF_DEBUGGING_INFO */\n-      branch_islands->pop ();\n-    }\n-}\n-\n /* NO_PREVIOUS_DEF checks in the link list whether the function name is\n    already there or not.  */\n "}]}