{"sha": "bd9a05594d227cde79a67dc715bd9d82e9c464e9", "node_id": "C_kwDOANBUbNoAKGJkOWEwNTU5NGQyMjdjZGU3OWE2N2RjNzE1YmQ5ZDgyZTljNDY0ZTk", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-09-10T22:47:19Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-10-11T10:49:25Z"}, "message": "amdgcn: vector testsuite tweaks\n\nThe testsuite needs a few tweaks following my patches to add multiple vector\nsizes for amdgcn.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr104464.c: Xfail on amdgcn.\n\t* gcc.dg/signbit-2.c: Likewise.\n\t* gcc.dg/signbit-5.c: Likewise.\n\t* gcc.dg/vect/bb-slp-68.c: Likewise.\n\t* gcc.dg/vect/bb-slp-cond-1.c: Change expectations on amdgcn.\n\t* gcc.dg/vect/bb-slp-subgroups-3.c: Likewise.\n\t* gcc.dg/vect/no-vfa-vect-depend-2.c: Change expectations for multiple\n\tvector sizes.\n\t* gcc.dg/vect/pr33953.c: Likewise.\n\t* gcc.dg/vect/pr65947-12.c: Likewise.\n\t* gcc.dg/vect/pr65947-13.c: Likewise.\n\t* gcc.dg/vect/pr80631-2.c: Likewise.\n\t* gcc.dg/vect/slp-reduc-4.c: Likewise.\n\t* gcc.dg/vect/trapv-vect-reduc-4.c: Likewise.\n\t* lib/target-supports.exp (available_vector_sizes): Add more sizes\n\tfor amdgcn.", "tree": {"sha": "8489d434c9c628e4c5cbd9213a78a0e151808e43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8489d434c9c628e4c5cbd9213a78a0e151808e43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd9a05594d227cde79a67dc715bd9d82e9c464e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9a05594d227cde79a67dc715bd9d82e9c464e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd9a05594d227cde79a67dc715bd9d82e9c464e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9a05594d227cde79a67dc715bd9d82e9c464e9/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf6b5c74a6f1927174091c73aa51401895ef92f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf6b5c74a6f1927174091c73aa51401895ef92f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf6b5c74a6f1927174091c73aa51401895ef92f0"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "d36a28678cb6f52fd3fb3aeb1460ece21e24b458", "filename": "gcc/testsuite/gcc.dg/pr104464.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104464.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104464.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104464.c?ref=bd9a05594d227cde79a67dc715bd9d82e9c464e9", "patch": "@@ -9,3 +9,5 @@ foo(void)\n {\n   f += (F)(f != (F){}[0]);\n }\n+\n+/* { dg-xfail-if \"-fnon-call-exceptions unsupported\" { amdgcn-*-* } } */"}, {"sha": "99a455bc7d7aa3a3e8718c024c540e1b5beeb51e", "filename": "gcc/testsuite/gcc.dg/signbit-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-2.c?ref=bd9a05594d227cde79a67dc715bd9d82e9c464e9", "patch": "@@ -20,6 +20,7 @@ void fun2(int32_t *x, int n)\n       x[i] = (-x[i]) >> 30;\n }\n \n-/* { dg-final { scan-tree-dump {\\s+>\\s+\\{ 0(, 0)+ \\}} optimized { target vect_int } } } */\n+/* Xfail amdgcn where vector truth type is not integer type.  */\n+/* { dg-final { scan-tree-dump {\\s+>\\s+\\{ 0(, 0)+ \\}} optimized { target vect_int xfail amdgcn-*-* } } } */\n /* { dg-final { scan-tree-dump {\\s+>\\s+0} optimized { target { ! vect_int } } } } */\n-/* { dg-final { scan-tree-dump-not {\\s+>>\\s+31} optimized } } */\n+/* { dg-final { scan-tree-dump-not {\\s+>>\\s+31} optimized { xfail amdgcn-*-* } } } */"}, {"sha": "0fad56c0ea85feb5dd59ee5b77f591e8e76934fe", "filename": "gcc/testsuite/gcc.dg/signbit-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-5.c?ref=bd9a05594d227cde79a67dc715bd9d82e9c464e9", "patch": "@@ -4,6 +4,7 @@\n /* This test does not work when the truth type does not match vector type.  */\n /* { dg-additional-options \"-mno-avx512f\" { target { i?86-*-* x86_64-*-* } } } */\n /* { dg-additional-options \"-march=armv8-a\" { target aarch64_sve } } */\n+/* { dg-xfail-run-if \"truth type does not match vector type\" { amdgcn-*-* } } */\n \n \n #include <stdint.h>"}, {"sha": "e7573a14933e7c8d18423db8579d60d8f466839f", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-68.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-68.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-68.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-68.c?ref=bd9a05594d227cde79a67dc715bd9d82e9c464e9", "patch": "@@ -18,5 +18,6 @@ void foo ()\n   x[9] = z[3] + 1.;\n }\n \n-/* We want to have the store group split into 4, 2, 4 when using 32byte vectors.  */\n-/* { dg-final { scan-tree-dump-not \"from scalars\" \"slp2\" } } */\n+/* We want to have the store group split into 4, 2, 4 when using 32byte vectors.\n+   Unfortunately it does not work when 64-byte vectors are available.  */\n+/* { dg-final { scan-tree-dump-not \"from scalars\" \"slp2\" { xfail amdgcn-*-* } } } */"}, {"sha": "1f5c621e5fd8ea46f3d7d78cd0cbbdb686fe92f3", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-cond-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-cond-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-cond-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-cond-1.c?ref=bd9a05594d227cde79a67dc715bd9d82e9c464e9", "patch": "@@ -46,5 +46,6 @@ int main ()\n }\n \n /* { dg-final { scan-tree-dump {(no need for alias check [^\\n]* when VF is 1|no alias between [^\\n]* when [^\\n]* is outside \\(-16, 16\\))} \"vect\" { target vect_element_align } } } */\n-/* { dg-final { scan-tree-dump-times \"loop vectorized\" 1 \"vect\" { target vect_element_align } } } */\n+/* { dg-final { scan-tree-dump-times \"loop vectorized\" 1 \"vect\" { target { vect_element_align && !amdgcn-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"loop vectorized\" 2 \"vect\" { target amdgcn-*-* } } } */\n "}, {"sha": "fb719915db7016fe1922577bc408c64d2433af17", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-subgroups-3.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-subgroups-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-subgroups-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-subgroups-3.c?ref=bd9a05594d227cde79a67dc715bd9d82e9c464e9", "patch": "@@ -42,4 +42,7 @@ main (int argc, char **argv)\n /* Because we disable the cost model, targets with variable-length\n    vectors can end up vectorizing the store to a[0..7] on its own.\n    With the cost model we do something sensible.  */\n-/* { dg-final { scan-tree-dump-times \"optimized: basic block\" 2 \"slp2\" { xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"optimized: basic block\" 2 \"slp2\" { target { ! amdgcn-*-* } xfail vect_variable_length } } } */\n+\n+/* amdgcn can do this in one vector.  */\n+/* { dg-final { scan-tree-dump-times \"optimized: basic block\" 1 \"slp2\" { target amdgcn-*-* } } } */"}, {"sha": "89958378fca009fba6b59509c2ea7f96fa53805b", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-depend-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-2.c?ref=bd9a05594d227cde79a67dc715bd9d82e9c464e9", "patch": "@@ -51,4 +51,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" {xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"dependence distance negative\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"dependence distance negative\" 1 \"vect\" { target { ! vect_multiple_sizes } } } } */\n+/* { dg-final { scan-tree-dump \"dependence distance negative\" \"vect\" { target vect_multiple_sizes } } } */"}, {"sha": "d376cf904b72374ccf81028dbb1ed6ec0894c467", "filename": "gcc/testsuite/gcc.dg/vect/pr33953.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33953.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33953.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33953.c?ref=bd9a05594d227cde79a67dc715bd9d82e9c464e9", "patch": "@@ -29,6 +29,7 @@ void blockmove_NtoN_blend_noremap32 (const UINT32 *srcdata, int srcwidth,\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { ! vect_multiple_sizes } xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump \"vectorizing stmts using SLP\" \"vect\" { target vect_multiple_sizes xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n \n "}, {"sha": "9788eea0f54e0f22617687d52e1305f36731e7ae", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-12.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-12.c?ref=bd9a05594d227cde79a67dc715bd9d82e9c464e9", "patch": "@@ -42,5 +42,6 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 2 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 2 \"vect\" { target { vect_fold_extract_last && { ! vect_multiple_sizes } } } } } */\n+/* { dg-final { scan-tree-dump \"optimizing condition reduction with FOLD_EXTRACT_LAST\" \"vect\" { target { vect_fold_extract_last && vect_multiple_sizes } } } } */\n /* { dg-final { scan-tree-dump-not \"condition expression based on integer induction.\" \"vect\" } } */"}, {"sha": "079b5f91ced188b16f42d690e9df3d8a289d2802", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-13.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-13.c?ref=bd9a05594d227cde79a67dc715bd9d82e9c464e9", "patch": "@@ -44,4 +44,5 @@ main (void)\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 2 \"vect\" { xfail vect_fold_extract_last } } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 2 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 2 \"vect\" { target { vect_fold_extract_last && { ! vect_multiple_sizes } } } } } */\n+/* { dg-final { scan-tree-dump \"optimizing condition reduction with FOLD_EXTRACT_LAST\" \"vect\" { target { vect_fold_extract_last && vect_multiple_sizes } } } } */"}, {"sha": "4e58627517676f73d7ba8cf06a24fdce6b9698dc", "filename": "gcc/testsuite/gcc.dg/vect/pr80631-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr80631-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr80631-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr80631-2.c?ref=bd9a05594d227cde79a67dc715bd9d82e9c464e9", "patch": "@@ -75,4 +75,5 @@ main ()\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 5 \"vect\" { target vect_condition } } } */\n /* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 5 \"vect\" { target vect_condition xfail vect_fold_extract_last } } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 5 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 5 \"vect\" { target { { ! vect_multiple_sizes } && vect_fold_extract_last } } } } */\n+/* { dg-final { scan-tree-dump \"optimizing condition reduction with FOLD_EXTRACT_LAST\" \"vect\" { target { vect_multiple_sizes && vect_fold_extract_last } } } } */"}, {"sha": "15f5c259e980cdea2a6f459062e527dd9dd59b53", "filename": "gcc/testsuite/gcc.dg/vect/slp-reduc-4.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-4.c?ref=bd9a05594d227cde79a67dc715bd9d82e9c464e9", "patch": "@@ -59,6 +59,7 @@ int main (void)\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_int_min_max } } } */\n /* For variable-length SVE, the number of scalar statements in the\n    reduction exceeds the number of elements in a 128-bit granule.  */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { xfail { vect_no_int_min_max || { aarch64_sve && vect_variable_length } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { ! vect_multiple_sizes } xfail { vect_no_int_min_max || { aarch64_sve && vect_variable_length } } } } } */\n+/* { dg-final { scan-tree-dump \"vectorizing stmts using SLP\" \"vect\" { target { vect_multiple_sizes } } } } */\n /* { dg-final { scan-tree-dump-times \"VEC_PERM_EXPR\" 0 \"vect\" { xfail { aarch64_sve && vect_variable_length } } } } */\n "}, {"sha": "24cf1f793c7f15911f7866260dd4e510c48adc1a", "filename": "gcc/testsuite/gcc.dg/vect/trapv-vect-reduc-4.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftrapv-vect-reduc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftrapv-vect-reduc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftrapv-vect-reduc-4.c?ref=bd9a05594d227cde79a67dc715bd9d82e9c464e9", "patch": "@@ -50,6 +50,7 @@ int main (void)\n \n /* We can't handle the first loop with variable-length vectors and so\n    fall back to the fixed-length mininum instead.  */\n-/* { dg-final { scan-tree-dump-times \"Detected reduction\\\\.\" 3 \"vect\" { xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"Detected reduction\\\\.\" 3 \"vect\" { target { ! vect_multiple_sizes } xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump \"Detected reduction\\\\.\" \"vect\" { target vect_multiple_sizes } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { target { ! vect_no_int_min_max } } } } */\n /* { dg-final { scan-tree-dump-times {using an in-order \\(fold-left\\) reduction} 1 \"vect\" } } */"}, {"sha": "fdd88e6a5164c56ef1d875a6bcb84f065d946f79", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9a05594d227cde79a67dc715bd9d82e9c464e9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=bd9a05594d227cde79a67dc715bd9d82e9c464e9", "patch": "@@ -8400,7 +8400,8 @@ proc available_vector_sizes { } {\n     } elseif { [istarget sparc*-*-*] } {\n \tlappend result 64\n     } elseif { [istarget amdgcn*-*-*] } {\n-\tlappend result 4096\n+        # 6 different lane counts, and 4 element sizes\n+\tlappend result 4096 2048 1024 512 256 128 64 32 16 8 4 2\n     } else {\n \t# The traditional default asumption.\n \tlappend result 128"}]}