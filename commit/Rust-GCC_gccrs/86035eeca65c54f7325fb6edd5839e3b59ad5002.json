{"sha": "86035eeca65c54f7325fb6edd5839e3b59ad5002", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYwMzVlZWNhNjVjNTRmNzMyNWZiNmVkZDU4MzllM2I1OWFkNTAwMg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-12-03T21:13:42Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-12-03T21:13:42Z"}, "message": "re PR fortran/37336 ([F03] Finish derived-type finalization)\n\n2012-12-03  Tobias Burnus  <burnus@net-b.de>\n            Janus Weil  <janus@gcc.gnu.org>\n\n        PR fortran/37336\n        * class.c (gfc_is_finalizable): New function.\n        * gfortran.h (gfc_is_finalizable): Its prototype.\n        * module.c (mio_component): Read initializer for vtype's _final.\n        * resolve.c (resolve_fl_derived0): Call gfc_is_finalizable.\n        * trans-expr.c (gfc_vtable_final_get): New function.\n        (conv_parent_component_references): Fix comment.\n        (gfc_conv_variable): Fix for scalar coarray components.\n        * trans-intrinsic.c (conv_intrinsic_move_alloc): For BT_CLASS,\n        pass the BT_CLASS type and not the declared type to\n        gfc_deallocate_scalar_with_status.\n        * trans.h (gfc_vtable_final_get): New prototype.\n\n\nCo-Authored-By: Janus Weil <janus@gcc.gnu.org>\n\nFrom-SVN: r194104", "tree": {"sha": "8da31991a03b702cbf404d3fe909158f795a90d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8da31991a03b702cbf404d3fe909158f795a90d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86035eeca65c54f7325fb6edd5839e3b59ad5002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86035eeca65c54f7325fb6edd5839e3b59ad5002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86035eeca65c54f7325fb6edd5839e3b59ad5002", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86035eeca65c54f7325fb6edd5839e3b59ad5002/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e668eaf774f01c3c8938840576652b0d21ad3ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e668eaf774f01c3c8938840576652b0d21ad3ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e668eaf774f01c3c8938840576652b0d21ad3ca"}], "stats": {"total": 83, "additions": 80, "deletions": 3}, "files": [{"sha": "f6b4fb05c94ae9794c6b666edd65ef44d02e3ed1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86035eeca65c54f7325fb6edd5839e3b59ad5002/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86035eeca65c54f7325fb6edd5839e3b59ad5002/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=86035eeca65c54f7325fb6edd5839e3b59ad5002", "patch": "@@ -1,3 +1,19 @@\n+2012-12-03  Tobias Burnus  <burnus@net-b.de>\n+\t    Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/37336\n+\t* class.c (gfc_is_finalizable): New function.\n+\t* gfortran.h (gfc_is_finalizable): Its prototype.\n+\t* module.c (mio_component): Read initializer for vtype's _final.\n+\t* resolve.c (resolve_fl_derived0): Call gfc_is_finalizable.\n+\t* trans-expr.c (gfc_vtable_final_get): New function.\n+\t(conv_parent_component_references): Fix comment.\n+\t(gfc_conv_variable): Fix for scalar coarray components.\n+\t* trans-intrinsic.c (conv_intrinsic_move_alloc): For BT_CLASS,\n+\tpass the BT_CLASS type and not the declared type to\n+\tgfc_deallocate_scalar_with_status.\n+\t* trans.h (gfc_vtable_final_get): New prototype.\n+\n 2012-12-03  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/55475"}, {"sha": "8a8a54aa9ba71e8f5b9bba85cad0b178cf8a0d4b", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86035eeca65c54f7325fb6edd5839e3b59ad5002/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86035eeca65c54f7325fb6edd5839e3b59ad5002/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=86035eeca65c54f7325fb6edd5839e3b59ad5002", "patch": "@@ -2013,6 +2013,48 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n }\n \n \n+/* Check if a derived type is finalizable. That is the case if it\n+   (1) has a FINAL subroutine or\n+   (2) has a nonpointer nonallocatable component of finalizable type.\n+   If it is finalizable, return an expression containing the\n+   finalization wrapper.  */\n+\n+bool\n+gfc_is_finalizable (gfc_symbol *derived, gfc_expr **final_expr)\n+{\n+  gfc_symbol *vtab;\n+  gfc_component *c;\n+\n+  /* (1) Check for FINAL subroutines.  */\n+  if (derived->f2k_derived && derived->f2k_derived->finalizers)\n+    goto yes;\n+\n+  /* (2) Check for components of finalizable type.  */\n+  for (c = derived->components; c; c = c->next)\n+    if (c->ts.type == BT_DERIVED\n+\t&& !c->attr.pointer && !c->attr.proc_pointer && !c->attr.allocatable\n+\t&& gfc_is_finalizable (c->ts.u.derived, NULL))\n+      goto yes;\n+\n+  return false;\n+\n+yes:\n+  /* Make sure vtab is generated.  */\n+  vtab = gfc_find_derived_vtab (derived);\n+  if (final_expr)\n+    {\n+      /* Return finalizer expression.  */\n+      gfc_component *final;\n+      final = vtab->ts.u.derived->components->next->next->next->next->next;\n+      gcc_assert (strcmp (final->name, \"_final\") == 0);\n+      gcc_assert (final->initializer\n+\t\t  && final->initializer->expr_type != EXPR_NULL);\n+      *final_expr = final->initializer;\n+    }\n+  return true;\n+}\n+\n+\n /* General worker function to find either a type-bound procedure or a\n    type-bound user operator.  */\n "}, {"sha": "bf767b2ac9798e4e94c21c83cf43dd13c2e54472", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86035eeca65c54f7325fb6edd5839e3b59ad5002/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86035eeca65c54f7325fb6edd5839e3b59ad5002/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=86035eeca65c54f7325fb6edd5839e3b59ad5002", "patch": "@@ -2951,6 +2951,7 @@ void gfc_add_class_array_ref (gfc_expr *);\n #define gfc_add_hash_component(e)     gfc_add_component_ref(e,\"_hash\")\n #define gfc_add_size_component(e)     gfc_add_component_ref(e,\"_size\")\n #define gfc_add_def_init_component(e) gfc_add_component_ref(e,\"_def_init\")\n+#define gfc_add_final_component(e)    gfc_add_component_ref(e,\"_final\")\n bool gfc_is_class_array_ref (gfc_expr *, bool *);\n bool gfc_is_class_scalar_expr (gfc_expr *);\n bool gfc_is_class_container_ref (gfc_expr *e);\n@@ -2967,6 +2968,7 @@ gfc_typebound_proc* gfc_find_typebound_intrinsic_op (gfc_symbol*, gfc_try*,\n \t\t\t\t\t\t     gfc_intrinsic_op, bool,\n \t\t\t\t\t\t     locus*);\n gfc_symtree* gfc_get_tbp_symtree (gfc_symtree**, const char*);\n+bool gfc_is_finalizable (gfc_symbol *, gfc_expr **);\n \n #define CLASS_DATA(sym) sym->ts.u.derived->components\n "}, {"sha": "16ea97b72cd25edc4656247d9cc5a8a21672f3bb", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86035eeca65c54f7325fb6edd5839e3b59ad5002/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86035eeca65c54f7325fb6edd5839e3b59ad5002/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=86035eeca65c54f7325fb6edd5839e3b59ad5002", "patch": "@@ -2597,7 +2597,7 @@ mio_component (gfc_component *c, int vtype)\n     c->attr.class_ok = 1;\n   c->attr.access = MIO_NAME (gfc_access) (c->attr.access, access_types); \n \n-  if (!vtype)\n+  if (!vtype || strcmp (c->name, \"_final\") == 0)\n     mio_expr (&c->initializer);\n \n   if (c->attr.proc_pointer)"}, {"sha": "69646dee748d940815196ff2884cc2cfae55050c", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86035eeca65c54f7325fb6edd5839e3b59ad5002/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86035eeca65c54f7325fb6edd5839e3b59ad5002/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=86035eeca65c54f7325fb6edd5839e3b59ad5002", "patch": "@@ -12814,6 +12814,10 @@ resolve_fl_derived0 (gfc_symbol *sym)\n   /* Add derived type to the derived type list.  */\n   add_dt_to_dt_list (sym);\n \n+  /* Check if the type is finalizable. This is done in order to ensure that the\n+     finalization wrapper is generated early enough.  */\n+  gfc_is_finalizable (sym, NULL);\n+\n   return SUCCESS;\n }\n "}, {"sha": "42f6e0cdea5a793187cf5af196cd9a786dac0729", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86035eeca65c54f7325fb6edd5839e3b59ad5002/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86035eeca65c54f7325fb6edd5839e3b59ad5002/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=86035eeca65c54f7325fb6edd5839e3b59ad5002", "patch": "@@ -95,6 +95,7 @@ conv_scalar_to_descriptor (gfc_se *se, tree scalar, symbol_attribute attr)\n #define VTABLE_EXTENDS_FIELD 2\n #define VTABLE_DEF_INIT_FIELD 3\n #define VTABLE_COPY_FIELD 4\n+#define VTABLE_FINAL_FIELD 5\n \n \n tree\n@@ -180,13 +181,21 @@ gfc_vtable_copy_get (tree decl)\n }\n \n \n+tree\n+gfc_vtable_final_get (tree decl)\n+{\n+  return gfc_vtable_field_get (decl, VTABLE_FINAL_FIELD);\n+}\n+\n+\n #undef CLASS_DATA_FIELD\n #undef CLASS_VPTR_FIELD\n #undef VTABLE_HASH_FIELD\n #undef VTABLE_SIZE_FIELD\n #undef VTABLE_EXTENDS_FIELD\n #undef VTABLE_DEF_INIT_FIELD\n #undef VTABLE_COPY_FIELD\n+#undef VTABLE_FINAL_FIELD\n \n \n /* Obtain the vptr of the last class reference in an expression.  */\n@@ -1510,7 +1519,7 @@ conv_parent_component_references (gfc_se * se, gfc_ref * ref)\n   dt = ref->u.c.sym;\n   c = ref->u.c.component;\n \n-  /* Return if the component is not in the parent type.  */\n+  /* Return if the component is in the parent type.  */\n   for (cmp = dt->components; cmp; cmp = cmp->next)\n     if (strcmp (c->name, cmp->name) == 0)\n       return;\n@@ -1714,6 +1723,9 @@ gfc_conv_variable (gfc_se * se, gfc_expr * expr)\n \t    conv_parent_component_references (se, ref);\n \n \t  gfc_conv_component_ref (se, ref);\n+\t  if (!ref->next && ref->u.c.sym->attr.codimension\n+\t      && se->want_pointer && se->descriptor_only)\n+\t    return;\n \n \t  break;\n "}, {"sha": "504a9f3b8fcbd267f74e50e2e5e260392118431f", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86035eeca65c54f7325fb6edd5839e3b59ad5002/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86035eeca65c54f7325fb6edd5839e3b59ad5002/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=86035eeca65c54f7325fb6edd5839e3b59ad5002", "patch": "@@ -7321,7 +7321,7 @@ conv_intrinsic_move_alloc (gfc_code *code)\n \n       /* Deallocate \"to\".  */\n       tmp = gfc_deallocate_scalar_with_status (to_se.expr, NULL_TREE, true,\n-\t\t\t\t\t       to_expr2, to_expr->ts);\n+\t\t\t\t\t       to_expr, to_expr->ts);\n       gfc_add_expr_to_block (&block, tmp);\n \n       /* Assign (_data) pointers.  */"}, {"sha": "177957505735d41dc938ef04402d417276602224", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86035eeca65c54f7325fb6edd5839e3b59ad5002/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86035eeca65c54f7325fb6edd5839e3b59ad5002/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=86035eeca65c54f7325fb6edd5839e3b59ad5002", "patch": "@@ -348,6 +348,7 @@ tree gfc_vtable_size_get (tree);\n tree gfc_vtable_extends_get (tree);\n tree gfc_vtable_def_init_get (tree);\n tree gfc_vtable_copy_get (tree);\n+tree gfc_vtable_final_get (tree);\n tree gfc_get_vptr_from_expr (tree);\n tree gfc_get_class_array_ref (tree, tree);\n tree gfc_copy_class_to_class (tree, tree, tree);"}]}