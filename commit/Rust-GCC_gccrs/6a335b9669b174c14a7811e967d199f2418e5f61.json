{"sha": "6a335b9669b174c14a7811e967d199f2418e5f61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEzMzViOTY2OWIxNzRjMTRhNzgxMWU5NjdkMTk5ZjI0MThlNWY2MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-01-28T23:21:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-01-28T23:21:10Z"}, "message": "re PR c/86125 (missing -Wbuiltin-declaration-mismatch on a mismatched return type)\n\n\tPR c/86125\n\t* c-decl.c (last_fileptr_type): Remove.\n\t(last_structptr_types): New variable.\n\t(match_builtin_function_types): Compare TYPE_MAIN_VARIANT of\n\t{old,new}rettype instead of the types themselves.  Assert\n\tlast_structptr_types array has the same number of elements\n\tas builtin_structptr_types array.  Use TYPE_MAIN_VARIANT for\n\targument oldtype and newtype.  Instead of handling\n\tjust fileptr_type_node specially, handle all builtin_structptr_types\n\tpointer nodes.  Formatting fix.\n\n\t* c-common.c (c_common_nodes_and_builtins): Build type variants for\n\tbuiltin_structptr_types types even for C.\n\n\t* gcc.dg/Wbuiltin-declaration-mismatch-7.c: Guard testcase for\n\tlp64, ilp32 and llp64 only.\n\t(fputs): Use unsigned long long instead of size_t for return type.\n\t(vfprintf, vfscanf): Accept arbitrary target specific type for\n\tva_list.\n\nFrom-SVN: r268348", "tree": {"sha": "85cea92aec24ac255926d31ec171d13aee1f49b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85cea92aec24ac255926d31ec171d13aee1f49b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a335b9669b174c14a7811e967d199f2418e5f61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a335b9669b174c14a7811e967d199f2418e5f61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a335b9669b174c14a7811e967d199f2418e5f61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a335b9669b174c14a7811e967d199f2418e5f61/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab1be99f2b005cb5b8b0b3caac19ab2edb0dd6f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab1be99f2b005cb5b8b0b3caac19ab2edb0dd6f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab1be99f2b005cb5b8b0b3caac19ab2edb0dd6f3"}], "stats": {"total": 146, "additions": 103, "deletions": 43}, "files": [{"sha": "3c55209ef3409ab001df513351e44ef35c7346b5", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a335b9669b174c14a7811e967d199f2418e5f61/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a335b9669b174c14a7811e967d199f2418e5f61/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6a335b9669b174c14a7811e967d199f2418e5f61", "patch": "@@ -1,3 +1,9 @@\n+2019-01-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/86125\n+\t* c-common.c (c_common_nodes_and_builtins): Build type variants for\n+\tbuiltin_structptr_types types even for C.\n+\n 2019-01-28  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* c-warn.c (check_address_or_pointer_of_packed_member): Handle the case"}, {"sha": "d3b5879a2b2ee6cd0c5ec5ad3dbf94dd9afe1f16", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a335b9669b174c14a7811e967d199f2418e5f61/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a335b9669b174c14a7811e967d199f2418e5f61/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=6a335b9669b174c14a7811e967d199f2418e5f61", "patch": "@@ -4296,18 +4296,13 @@ c_common_nodes_and_builtins (void)\n \t\t\t COMPLEX_FLOATN_NX_TYPE_NODE (i)));\n \t}\n \n-  if (c_dialect_cxx ())\n-    {\n-      /* For C++, make fileptr_type_node a distinct void * type until\n-\t FILE type is defined.  Likewise for const struct tm*.  */\n-      for (unsigned i = 0;\n-\t   i < sizeof (builtin_structptr_types)\n-\t       / sizeof (builtin_structptr_type);\n-\t   ++i)\n-\tbuiltin_structptr_types[i].node =\n-\t  build_variant_type_copy (builtin_structptr_types[i].base);\n-\n-    }\n+  /* Make fileptr_type_node a distinct void * type until\n+     FILE type is defined.  Likewise for const struct tm*.  */\n+  for (unsigned i = 0;\n+       i < sizeof (builtin_structptr_types) / sizeof (builtin_structptr_type);\n+       ++i)\n+    builtin_structptr_types[i].node\n+      = build_variant_type_copy (builtin_structptr_types[i].base);\n \n   record_builtin_type (RID_VOID, NULL, void_type_node);\n "}, {"sha": "e6bff9c064b48d344c2cc539eb692ebf8ea39ff3", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a335b9669b174c14a7811e967d199f2418e5f61/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a335b9669b174c14a7811e967d199f2418e5f61/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6a335b9669b174c14a7811e967d199f2418e5f61", "patch": "@@ -1,3 +1,16 @@\n+2019-01-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/86125\n+\t* c-decl.c (last_fileptr_type): Remove.\n+\t(last_structptr_types): New variable.\n+\t(match_builtin_function_types): Compare TYPE_MAIN_VARIANT of\n+\t{old,new}rettype instead of the types themselves.  Assert\n+\tlast_structptr_types array has the same number of elements\n+\tas builtin_structptr_types array.  Use TYPE_MAIN_VARIANT for\n+\targument oldtype and newtype.  Instead of handling\n+\tjust fileptr_type_node specially, handle all builtin_structptr_types\n+\tpointer nodes.  Formatting fix.\n+\n 2019-01-24  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/86125"}, {"sha": "593b34e00470678bb35e8aaf02a1953742daeda2", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 43, "deletions": 27, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a335b9669b174c14a7811e967d199f2418e5f61/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a335b9669b174c14a7811e967d199f2418e5f61/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=6a335b9669b174c14a7811e967d199f2418e5f61", "patch": "@@ -1632,13 +1632,13 @@ c_bind (location_t loc, tree decl, bool is_global)\n }\n \f\n \n-/* Stores the first FILE* argument type (whatever it is) seen in\n-   a declaration of a file I/O built-in.  Subsequent declarations\n-   of such built-ins are expected to refer to it rather than to\n-   fileptr_type_node which is just void* (or to any other type).\n+/* Stores the first FILE*, const struct tm* etc. argument type (whatever it\n+   is) seen in a declaration of a file I/O etc. built-in.  Subsequent\n+   declarations of such built-ins are expected to refer to it rather than to\n+   fileptr_type_node etc. which is just void* (or to any other type).\n    Used only by match_builtin_function_types.  */\n \n-static GTY(()) tree last_fileptr_type;\n+static GTY(()) tree last_structptr_types[6];\n \n /* Subroutine of compare_decls.  Allow harmless mismatches in return\n    and argument types provided that the type modes match.  Set *STRICT\n@@ -1660,13 +1660,18 @@ match_builtin_function_types (tree newtype, tree oldtype,\n   if (TYPE_MODE (oldrettype) != TYPE_MODE (newrettype))\n     return NULL_TREE;\n \n-  if (!comptypes (oldrettype, newrettype))\n+  if (!comptypes (TYPE_MAIN_VARIANT (oldrettype),\n+\t\t  TYPE_MAIN_VARIANT (newrettype)))\n     *strict = oldrettype;\n \n   tree oldargs = TYPE_ARG_TYPES (oldtype);\n   tree newargs = TYPE_ARG_TYPES (newtype);\n   tree tryargs = newargs;\n \n+  gcc_checking_assert ((sizeof (last_structptr_types)\n+\t\t\t/ sizeof (last_structptr_types[0]))\n+\t\t       == (sizeof (builtin_structptr_types)\n+\t\t\t   / sizeof (builtin_structptr_types[0])));\n   for (unsigned i = 1; oldargs || newargs; ++i)\n     {\n       if (!oldargs\n@@ -1675,37 +1680,48 @@ match_builtin_function_types (tree newtype, tree oldtype,\n \t  || !TREE_VALUE (newargs))\n \treturn NULL_TREE;\n \n-      tree oldtype = TREE_VALUE (oldargs);\n-      tree newtype = TREE_VALUE (newargs);\n+      tree oldtype = TYPE_MAIN_VARIANT (TREE_VALUE (oldargs));\n+      tree newtype = TYPE_MAIN_VARIANT (TREE_VALUE (newargs));\n \n       /* Fail for types with incompatible modes/sizes.  */\n       if (TYPE_MODE (TREE_VALUE (oldargs))\n \t  != TYPE_MODE (TREE_VALUE (newargs)))\n \treturn NULL_TREE;\n \n       /* Fail for function and object pointer mismatches.  */\n-      if (FUNCTION_POINTER_TYPE_P (oldtype) != FUNCTION_POINTER_TYPE_P (newtype)\n+      if ((FUNCTION_POINTER_TYPE_P (oldtype)\n+\t   != FUNCTION_POINTER_TYPE_P (newtype))\n \t  || POINTER_TYPE_P (oldtype) != POINTER_TYPE_P (newtype))\n \treturn NULL_TREE;\n \n-      if (oldtype == fileptr_type_node)\n-\t{\n-\t  /* Store the first FILE* argument type (whatever it is), and\n-\t     expect any subsequent declarations of file I/O built-ins\n-\t     to refer to it rather than to fileptr_type_node which is\n-\t     just void*.  */\n-\t  if (last_fileptr_type)\n-\t    {\n-\t      if (!comptypes (last_fileptr_type, newtype))\n-\t\t{\n-\t\t  *argno = i;\n-\t\t  *strict = last_fileptr_type;\n-\t\t}\n-\t    }\n-\t  else\n-\t    last_fileptr_type = newtype;\n-\t}\n-      else if (!*strict && !comptypes (oldtype, newtype))\n+      unsigned j = (sizeof (builtin_structptr_types)\n+\t\t    / sizeof (builtin_structptr_types[0]));\n+      if (POINTER_TYPE_P (oldtype))\n+\tfor (j = 0; j < (sizeof (builtin_structptr_types)\n+\t\t\t / sizeof (builtin_structptr_types[0])); ++j)\n+\t  {\n+\t    if (TREE_VALUE (oldargs) != builtin_structptr_types[j].node)\n+\t      continue;\n+\t    /* Store the first FILE* etc. argument type (whatever it is), and\n+\t       expect any subsequent declarations of file I/O etc. built-ins\n+\t       to refer to it rather than to fileptr_type_node etc. which is\n+\t       just void* (or const void*).  */\n+\t    if (last_structptr_types[j])\n+\t      {\n+\t\tif (!comptypes (last_structptr_types[j], newtype))\n+\t\t  {\n+\t\t    *argno = i;\n+\t\t    *strict = last_structptr_types[j];\n+\t\t  }\n+\t      }\n+\t    else\n+\t      last_structptr_types[j] = newtype;\n+\t    break;\n+\t  }\n+      if (j == (sizeof (builtin_structptr_types)\n+\t\t/ sizeof (builtin_structptr_types[0]))\n+\t  && !*strict\n+\t  && !comptypes (oldtype, newtype))\n \t{\n \t  *argno = i;\n \t  *strict = oldtype;"}, {"sha": "2e97ef3ae463b01005280b14c9e7462b3cda3b93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a335b9669b174c14a7811e967d199f2418e5f61/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a335b9669b174c14a7811e967d199f2418e5f61/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a335b9669b174c14a7811e967d199f2418e5f61", "patch": "@@ -1,3 +1,12 @@\n+2019-01-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/86125\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-7.c: Guard testcase for\n+\tlp64, ilp32 and llp64 only.\n+\t(fputs): Use unsigned long long instead of size_t for return type.\n+\t(vfprintf, vfscanf): Accept arbitrary target specific type for\n+\tva_list.\n+\n 2019-01-28  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/88358 - name wrongly treated as type."}, {"sha": "0c62c61faf3e6c4d913f0b17f234133a8a1f7483", "filename": "gcc/testsuite/gcc.dg/Wbuiltin-declaration-mismatch-11.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a335b9669b174c14a7811e967d199f2418e5f61/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a335b9669b174c14a7811e967d199f2418e5f61/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-11.c?ref=6a335b9669b174c14a7811e967d199f2418e5f61", "patch": "@@ -0,0 +1,21 @@\n+/* PR c/86125 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wbuiltin-declaration-mismatch -Wextra -Wno-ignored-qualifiers\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+struct FILE;\n+struct tm;\n+struct fenv_t;\n+struct fexcept_t;\n+typedef struct FILE FILE;\n+typedef struct fenv_t fenv_t;\n+typedef struct fexcept_t fexcept_t;\n+typedef const int cint;\n+size_t strftime (char *__restrict, const size_t, const char *__restrict,\t/* { dg-bogus \"mismatch in argument 1 type of built-in function\" } */\n+                 const struct tm *__restrict) __attribute__((nothrow));\n+int fprintf (struct FILE *, const char *const, ...);\t\t\t\t/* { dg-bogus \"mismatch in argument 2 type of built-in function\" } */\n+cint putc (int, struct FILE *);\t\t\t\t\t\t\t/* { dg-bogus \"mismatch in return type of built-in function\" } */\n+cint fegetenv (fenv_t *);\t\t\t\t\t\t\t/* { dg-bogus \"mismatch in argument 1 type of built-in function\" } */\n+cint fesetenv (const fenv_t *);\t\t\t\t\t\t\t/* { dg-bogus \"mismatch in return type of built-in function\" } */\n+int fegetexceptflag (fexcept_t *, const int);\t\t\t\t\t/* { dg-bogus \"mismatch in argument 1 type of built-in function\" } */\n+int fesetexceptflag (const fexcept_t *, const int);\t\t\t\t/* { dg-bogus \"mismatch in argument 1 type of built-in function\" } */"}, {"sha": "7f6644edb58efcfe305ad5582012a45c36dd6845", "filename": "gcc/testsuite/gcc.dg/Wbuiltin-declaration-mismatch-7.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a335b9669b174c14a7811e967d199f2418e5f61/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a335b9669b174c14a7811e967d199f2418e5f61/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-7.c?ref=6a335b9669b174c14a7811e967d199f2418e5f61", "patch": "@@ -2,7 +2,7 @@\n    return type\n    Verify that a declaration of vfprintf() with withe the wrong last\n    argument triggers -Wbuiltin-declaration-mismatch even without -Wextra.\n-   { dg-do compile }\n+   { dg-do compile { target { { lp64 || ilp32 } || llp64 } } }\n    { dg-options \"-Wbuiltin-declaration-mismatch\" } */\n \n struct StdioFile;\n@@ -13,14 +13,14 @@ struct StdioFile;\n \n int fprintf (struct StdioFile*, const char*);   /* { dg-warning \"conflicting types for built-in function .fprintf.; expected .int\\\\\\(\\[a-z_\\]+ \\\\\\*, const char \\\\\\*, \\.\\.\\.\\\\\\).\" } */\n \n-int vfprintf (struct StdioFile*, const char*, ...);   /* { dg-warning \"conflicting types for built-in function .vfprintf.; expected .int\\\\\\(\\[a-z_\\]+ \\\\\\*, const char \\\\\\*, \\[a-z_\\]+ \\\\\\*\\\\\\).\" } */\n+int vfprintf (struct StdioFile*, const char*, ...);   /* { dg-warning \"conflicting types for built-in function .vfprintf.; expected .int\\\\\\(\\[a-z_\\]+ \\\\\\*, const char \\\\\\*, \\[^\\n\\r,\\\\\\)\\]+\\\\\\).\" } */\n \n int fputc (char, struct StdioFile*);   /* { dg-warning \"conflicting types for built-in function .fputc.; expected .int\\\\\\(int,  void \\\\\\*\\\\\\).\" } */\n \n-size_t fputs (const char*, struct StdioFile*);   /* { dg-warning \"conflicting types for built-in function .fputs.; expected .int\\\\\\(const char \\\\\\*, \\[a-z_\\]+ \\\\\\*\\\\\\).\" } */\n+unsigned long long fputs (const char*, struct StdioFile*);   /* { dg-warning \"conflicting types for built-in function .fputs.; expected .int\\\\\\(const char \\\\\\*, \\[a-z_\\]+ \\\\\\*\\\\\\).\" } */\n \n int fscanf (struct StdioFile*, const char*, size_t, ...);   /* { dg-warning \"conflicting types for built-in function .fscanf.; expected .int\\\\\\(\\[a-z_\\]+ \\\\\\*, const char \\\\\\*, \\.\\.\\.\\\\\\).\" } */\n \n-int vfscanf (struct StdioFile*, const char*, ...);   /* { dg-warning \"conflicting types for built-in function .vfscanf.; expected .int\\\\\\(\\[a-z_\\]+ \\\\\\*, const char \\\\\\*, \\[a-z_\\]+ \\\\\\*\\\\\\).\" } */\n+int vfscanf (struct StdioFile*, const char*, ...);   /* { dg-warning \"conflicting types for built-in function .vfscanf.; expected .int\\\\\\(\\[a-z_\\]+ \\\\\\*, const char \\\\\\*, \\[^\\n\\r,\\\\\\)\\]+\\\\\\).\" } */\n \n size_t fwrite (const void*, size_t, size_t, struct StdioFile);    /* { dg-warning \"conflicting types for built-in function .fwrite.; expected .\\(long \\)?unsigned int\\\\\\(const void \\\\\\*, \\(long \\)?unsigned int, *\\(long \\)?unsigned int, *\\[a-z_\\]+ \\\\\\*\\\\\\).\" } */"}]}