{"sha": "ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE3NmM2MGExNjYwYWU0NDljMzA3MWQ4NmZmOGE2YzNjZTBhN2FiOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-09-06T04:49:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-09-06T04:49:07Z"}, "message": "method.c (synthesized_method_walk): In constructors, also check subobject destructors.\n\n\t* method.c (synthesized_method_walk): In constructors, also check\n\tsubobject destructors.\n\nFrom-SVN: r163894", "tree": {"sha": "d6d10d6ac7a5494908a3eea84837299d267cc944", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6d10d6ac7a5494908a3eea84837299d267cc944"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "467649eb698b5276610f8509432eb7a5f721c5f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467649eb698b5276610f8509432eb7a5f721c5f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/467649eb698b5276610f8509432eb7a5f721c5f3"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "357464f9c67c8c11e9462af126519599e993d25a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8", "patch": "@@ -1,5 +1,8 @@\n 2010-09-06  Jason Merrill  <jason@redhat.com>\n \n+\t* method.c (synthesized_method_walk): In constructors, also check\n+\tsubobject destructors.\n+\n \t* semantics.c (finish_compound_literal): Always build a\n \tTARGET_EXPR.\n "}, {"sha": "0ec38264062d480e2a157f9c1e6e0398ba3d7b2e", "filename": "gcc/cp/method.c", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8", "patch": "@@ -1052,10 +1052,15 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n   int i, quals, flags;\n   tsubst_flags_t complain;\n   const char *msg;\n+  bool ctor_p;\n+  tree cleanup_spec;\n+  bool cleanup_trivial = true;\n+  bool cleanup_deleted = false;\n \n+  cleanup_spec\n+    = (cxx_dialect >= cxx0x ? noexcept_true_spec : empty_except_spec);\n   if (spec_p)\n-    *spec_p = (cxx_dialect >= cxx0x\n-\t       ? noexcept_true_spec : empty_except_spec);\n+    *spec_p = cleanup_spec;\n \n   if (deleted_p)\n     {\n@@ -1109,6 +1114,7 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n     return;\n #endif\n \n+  ctor_p = false;\n   assign_p = false;\n   check_vdtor = false;\n   switch (sfk)\n@@ -1129,6 +1135,7 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n     case sfk_constructor:\n     case sfk_move_constructor:\n     case sfk_copy_constructor:\n+      ctor_p = true;\n       fnname = complete_ctor_identifier;\n       break;\n \n@@ -1176,7 +1183,16 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n       rval = locate_fn_flags (base_binfo, fnname, argtype, flags, complain);\n \n       process_subob_fn (rval, move_p, spec_p, trivial_p, deleted_p,\n-\t\t\tmsg, BINFO_TYPE (base_binfo));\n+\t\t\tmsg, basetype);\n+      if (ctor_p && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (basetype))\n+\t{\n+\t  /* In a constructor we also need to check the subobject\n+\t     destructors for cleanup of partially constructed objects.  */\n+\t  rval = locate_fn_flags (base_binfo, complete_dtor_identifier,\n+\t\t\t\t  NULL_TREE, flags, complain);\n+\t  process_subob_fn (rval, false, &cleanup_spec, &cleanup_trivial,\n+\t\t\t    &cleanup_deleted, NULL, basetype);\n+\t}\n \n       if (check_vdtor && type_has_virtual_destructor (basetype))\n \t{\n@@ -1186,6 +1202,7 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n \t     to have a null rval (no class-specific op delete).  */\n \t  if (rval && rval == error_mark_node && deleted_p)\n \t    *deleted_p = true;\n+\t  check_vdtor = false;\n \t}\n     }\n \n@@ -1206,12 +1223,20 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n \t       \"or trivial copy constructor\");\n       FOR_EACH_VEC_ELT (tree, vbases, i, base_binfo)\n \t{\n+\t  tree basetype = BINFO_TYPE (base_binfo);\n \t  if (copy_arg_p)\n-\t    argtype = build_stub_type (BINFO_TYPE (base_binfo), quals, move_p);\n+\t    argtype = build_stub_type (basetype, quals, move_p);\n \t  rval = locate_fn_flags (base_binfo, fnname, argtype, flags, complain);\n \n \t  process_subob_fn (rval, move_p, spec_p, trivial_p, deleted_p,\n-\t\t\t    msg, BINFO_TYPE (base_binfo));\n+\t\t\t    msg, basetype);\n+\t  if (ctor_p && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (basetype))\n+\t    {\n+\t      rval = locate_fn_flags (base_binfo, complete_dtor_identifier,\n+\t\t\t\t      NULL_TREE, flags, complain);\n+\t      process_subob_fn (rval, false, &cleanup_spec, &cleanup_trivial,\n+\t\t\t\t&cleanup_deleted, NULL, basetype);\n+\t    }\n \t}\n     }\n   if (!diag)\n@@ -1225,12 +1250,26 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n   walk_field_subobs (TYPE_FIELDS (ctype), fnname, sfk, quals,\n \t\t     copy_arg_p, move_p, assign_p, spec_p, trivial_p,\n \t\t     deleted_p, msg, flags, complain);\n+  if (ctor_p)\n+    walk_field_subobs (TYPE_FIELDS (ctype), complete_dtor_identifier,\n+\t\t       sfk_destructor, TYPE_UNQUALIFIED, false,\n+\t\t       false, false, &cleanup_spec, &cleanup_trivial,\n+\t\t       &cleanup_deleted, NULL, flags, complain);\n \n   pop_scope (scope);\n \n   --cp_unevaluated_operand;\n   --c_inhibit_evaluation_warnings;\n \n+  /* If the constructor isn't trivial, consider the subobject cleanups.  */\n+  if (ctor_p && trivial_p && !*trivial_p)\n+    {\n+      if (deleted_p && cleanup_deleted)\n+\t*deleted_p = true;\n+      if (spec_p)\n+\t*spec_p = merge_exception_specifiers (*spec_p, cleanup_spec);\n+    }\n+\n #ifdef ENABLE_CHECKING\n   /* If we expected this to be trivial but it isn't, then either we're in\n      C++0x mode and this is a copy/move ctor/op= or there's an error.  */"}, {"sha": "e723af418ba9837eadf41a90e3ede2419ee7e8fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8", "patch": "@@ -1,5 +1,7 @@\n 2010-09-06  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/implicit9.C: New.\n+\n \t* g++.dg/cpp0x/initlist43.C: New.\n \n 2010-09-05  Giuseppe Scrivano  <gscrivano@gnu.org>"}, {"sha": "3a6dbc558d9b949d05ab559d2607986133e8fd00", "filename": "gcc/testsuite/g++.dg/cpp0x/implicit9.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit9.C?ref=ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8", "patch": "@@ -0,0 +1,12 @@\n+// Test that private base dtor makes derived ctor deleted\n+// { dg-options -std=c++0x }\n+\n+struct A\n+{\n+  A();\n+private:\n+  ~A();\t\t\t\t// { dg-error \"private\" }\n+};\n+\n+struct B: A { };\t\t// { dg-error \"implicitly deleted|context\" }\n+B * b = new B;\t\t\t// { dg-error \"deleted\" }"}]}