{"sha": "c89844e5d30a5235960a2c627abc9369306fda61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg5ODQ0ZTVkMzBhNTIzNTk2MGEyYzYyN2FiYzkzNjkzMDZmZGE2MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-10-02T19:26:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-10-02T19:26:47Z"}, "message": "Add some hash_map_safe_* functions like vec_safe_*.\n\ngcc/\n\t* hash-map.h (default_hash_map_size): New variable.\n\t(create_ggc): Use it as default argument.\n\t(hash_map_maybe_create, hash_map_safe_get)\n\t(hash_map_safe_get_or_insert, hash_map_safe_put): New fns.\ngcc/cp/\n\t* constexpr.c (maybe_initialize_fundef_copies_table): Remove.\n\t(get_fundef_copy): Use hash_map_safe_get_or_insert.\n\t* cp-objcp-common.c (cp_get_debug_type): Use hash_map_safe_*.\n\t* decl.c (store_decomp_type): Remove.\n\t(cp_finish_decomp): Use hash_map_safe_put.\n\t* init.c (get_nsdmi): Use hash_map_safe_*.\n\t* pt.c (store_defaulted_ttp, lookup_defaulted_ttp): Remove.\n\t(add_defaults_to_ttp): Use hash_map_safe_*.\n\nFrom-SVN: r276484", "tree": {"sha": "49f593d8b44f2a0038aa8a77148c902c63381b29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49f593d8b44f2a0038aa8a77148c902c63381b29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c89844e5d30a5235960a2c627abc9369306fda61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89844e5d30a5235960a2c627abc9369306fda61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c89844e5d30a5235960a2c627abc9369306fda61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89844e5d30a5235960a2c627abc9369306fda61/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d61bff850d13ff103de3c2fb13d5e371996e1a3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d61bff850d13ff103de3c2fb13d5e371996e1a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d61bff850d13ff103de3c2fb13d5e371996e1a3c"}], "stats": {"total": 128, "additions": 76, "deletions": 52}, "files": [{"sha": "c7773c5f59ae959b13c974048c222cabefc5eb00", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c89844e5d30a5235960a2c627abc9369306fda61", "patch": "@@ -1,3 +1,11 @@\n+2019-09-30  Jason Merrill  <jason@redhat.com>\n+\n+\tAdd some hash_map_safe_* functions like vec_safe_*.\n+\t* hash-map.h (default_hash_map_size): New variable.\n+\t(create_ggc): Use it as default argument.\n+\t(hash_map_maybe_create, hash_map_safe_get)\n+\t(hash_map_safe_get_or_insert, hash_map_safe_put): New fns.\n+\n 2019-10-02  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cif-code.def (MAX_INLINE_INSNS_SINGLE_O2_LIMIT,"}, {"sha": "baf01e69ebd3c266a5dabe37696b7fc05a1efabd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c89844e5d30a5235960a2c627abc9369306fda61", "patch": "@@ -1,3 +1,15 @@\n+2019-09-30  Jason Merrill  <jason@redhat.com>\n+\n+\tUse hash_map_safe_* functions.\n+\t* constexpr.c (maybe_initialize_fundef_copies_table): Remove.\n+\t(get_fundef_copy): Use hash_map_safe_get_or_insert.\n+\t* cp-objcp-common.c (cp_get_debug_type): Use hash_map_safe_*.\n+\t* decl.c (store_decomp_type): Remove.\n+\t(cp_finish_decomp): Use hash_map_safe_put.\n+\t* init.c (get_nsdmi): Use hash_map_safe_*.\n+\t* pt.c (store_defaulted_ttp, lookup_defaulted_ttp): Remove.\n+\t(add_defaults_to_ttp): Use hash_map_safe_*.\n+\n 2019-10-02  Richard Biener  <rguenther@suse.de>\n \n \tPR c++/91606"}, {"sha": "06672a2c3b2f51e3c4227a03b1815874610841e1", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=c89844e5d30a5235960a2c627abc9369306fda61", "patch": "@@ -1098,27 +1098,17 @@ maybe_initialize_constexpr_call_table (void)\n \n static GTY(()) hash_map<tree, tree> *fundef_copies_table;\n \n-/* Initialize FUNDEF_COPIES_TABLE if it's not initialized.  */\n-\n-static void\n-maybe_initialize_fundef_copies_table ()\n-{\n-  if (fundef_copies_table == NULL)\n-    fundef_copies_table = hash_map<tree,tree>::create_ggc (101);\n-}\n-\n /* Reuse a copy or create a new unshared copy of the function FUN.\n    Return this copy.  We use a TREE_LIST whose PURPOSE is body, VALUE\n    is parms, TYPE is result.  */\n \n static tree\n get_fundef_copy (constexpr_fundef *fundef)\n {\n-  maybe_initialize_fundef_copies_table ();\n-\n   tree copy;\n   bool existed;\n-  tree *slot = &fundef_copies_table->get_or_insert (fundef->decl, &existed);\n+  tree *slot = &(hash_map_safe_get_or_insert<hm_ggc>\n+\t\t (fundef_copies_table, fundef->decl, &existed, 127));\n \n   if (!existed)\n     {"}, {"sha": "0a72231456bef76549c84272db0ce404e73c472b", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=c89844e5d30a5235960a2c627abc9369306fda61", "patch": "@@ -145,11 +145,9 @@ cp_get_debug_type (const_tree type)\n   if (dtype)\n     {\n       tree ktype = CONST_CAST_TREE (type);\n-      if (debug_type_map == NULL)\n-\tdebug_type_map = tree_cache_map::create_ggc (512);\n-      else if (tree *slot = debug_type_map->get (ktype))\n+      if (tree *slot = hash_map_safe_get (debug_type_map, ktype))\n \treturn *slot;\n-      debug_type_map->put (ktype, dtype);\n+      hash_map_safe_put<hm_ggc> (debug_type_map, ktype, dtype);\n     }\n \n   return dtype;"}, {"sha": "d6cca65ecebae8e35bf7194cf131f4b134caf70a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c89844e5d30a5235960a2c627abc9369306fda61", "patch": "@@ -7704,13 +7704,6 @@ get_tuple_decomp_init (tree decl, unsigned i)\n    based on the actual type of the variable, so store it in a hash table.  */\n \n static GTY((cache)) tree_cache_map *decomp_type_table;\n-static void\n-store_decomp_type (tree v, tree t)\n-{\n-  if (!decomp_type_table)\n-    decomp_type_table = tree_cache_map::create_ggc (13);\n-  decomp_type_table->put (v, t);\n-}\n \n tree\n lookup_decomp_type (tree v)\n@@ -7946,7 +7939,7 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t      goto error_out;\n \t    }\n \t  /* Save the decltype away before reference collapse.  */\n-\t  store_decomp_type (v[i], eltype);\n+\t  hash_map_safe_put<hm_ggc> (decomp_type_table, v[i], eltype);\n \t  eltype = cp_build_reference_type (eltype, !lvalue_p (init));\n \t  TREE_TYPE (v[i]) = eltype;\n \t  layout_decl (v[i], 0);"}, {"sha": "76fa030e927bf0c02e49a6126d9157cd229ef0d3", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=c89844e5d30a5235960a2c627abc9369306fda61", "patch": "@@ -563,10 +563,9 @@ get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n       init = DECL_INITIAL (DECL_TI_TEMPLATE (member));\n       location_t expr_loc\n \t= cp_expr_loc_or_loc (init, DECL_SOURCE_LOCATION (member));\n-      tree *slot;\n       if (TREE_CODE (init) == DEFERRED_PARSE)\n \t/* Unparsed.  */;\n-      else if (nsdmi_inst && (slot = nsdmi_inst->get (member)))\n+      else if (tree *slot = hash_map_safe_get (nsdmi_inst, member))\n \tinit = *slot;\n       /* Check recursive instantiation.  */\n       else if (DECL_INSTANTIATING_NSDMI_P (member))\n@@ -611,11 +610,7 @@ get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n \t  DECL_INSTANTIATING_NSDMI_P (member) = 0;\n \n \t  if (init != error_mark_node)\n-\t    {\n-\t      if (!nsdmi_inst)\n-\t\tnsdmi_inst = tree_cache_map::create_ggc (37);\n-\t      nsdmi_inst->put (member, init);\n-\t    }\n+\t    hash_map_safe_put<hm_ggc> (nsdmi_inst, member, init);\n \n \t  if (pushed)\n \t    {"}, {"sha": "67b3b63cdfe07fee766c394ad8de9f66e04f5920", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c89844e5d30a5235960a2c627abc9369306fda61", "patch": "@@ -7357,30 +7357,15 @@ coerce_template_args_for_ttp (tree templ, tree arglist,\n /* A cache of template template parameters with match-all default\n    arguments.  */\n static GTY((deletable)) hash_map<tree,tree> *defaulted_ttp_cache;\n-static void\n-store_defaulted_ttp (tree v, tree t)\n-{\n-  if (!defaulted_ttp_cache)\n-    defaulted_ttp_cache = hash_map<tree,tree>::create_ggc (13);\n-  defaulted_ttp_cache->put (v, t);\n-}\n-static tree\n-lookup_defaulted_ttp (tree v)\n-{\n-  if (defaulted_ttp_cache)\n-    if (tree *p = defaulted_ttp_cache->get (v))\n-      return *p;\n-  return NULL_TREE;\n-}\n \n /* T is a bound template template-parameter.  Copy its arguments into default\n    arguments of the template template-parameter's template parameters.  */\n \n static tree\n add_defaults_to_ttp (tree otmpl)\n {\n-  if (tree c = lookup_defaulted_ttp (otmpl))\n-    return c;\n+  if (tree *c = hash_map_safe_get (defaulted_ttp_cache, otmpl))\n+    return *c;\n \n   tree ntmpl = copy_node (otmpl);\n \n@@ -7410,7 +7395,7 @@ add_defaults_to_ttp (tree otmpl)\n \t}\n     }\n \n-  store_defaulted_ttp (otmpl, ntmpl);\n+  hash_map_safe_put<hm_ggc> (defaulted_ttp_cache, otmpl, ntmpl);\n   return ntmpl;\n }\n "}, {"sha": "73ce6a1dc664620c0d9900386fac6124ea3d3fe1", "filename": "gcc/hash-map.h", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2Fhash-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2Fhash-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map.h?ref=c89844e5d30a5235960a2c627abc9369306fda61", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n    removed.  Objects of hash_map type are copy-constructible but not\n    assignable.  */\n \n+const size_t default_hash_map_size = 13;\n template<typename KeyId, typename Value,\n \t typename Traits /* = simple_hashmap_traits<default_hash_traits<Key>,\n \t\t\t                            Value> */>\n@@ -129,7 +130,7 @@ class GTY((user)) hash_map\n   };\n \n public:\n-  explicit hash_map (size_t n = 13, bool ggc = false,\n+  explicit hash_map (size_t n = default_hash_map_size, bool ggc = false,\n \t\t     bool sanitize_eq_and_hash = true,\n \t\t     bool gather_mem_stats = GATHER_STATISTICS\n \t\t     CXX_MEM_STAT_INFO)\n@@ -146,7 +147,7 @@ class GTY((user)) hash_map\n \t       HASH_MAP_ORIGIN PASS_MEM_STAT) {}\n \n   /* Create a hash_map in ggc memory.  */\n-  static hash_map *create_ggc (size_t size,\n+  static hash_map *create_ggc (size_t size = default_hash_map_size,\n \t\t\t       bool gather_mem_stats = GATHER_STATISTICS\n \t\t\t       CXX_MEM_STAT_INFO)\n     {\n@@ -326,4 +327,46 @@ gt_pch_nx (hash_map<K, V, H> *h, gt_pointer_operator op, void *cookie)\n   op (&h->m_table.m_entries, cookie);\n }\n \n+enum hm_alloc { hm_heap = false, hm_ggc = true };\n+template<bool ggc, typename K, typename V, typename H>\n+inline hash_map<K,V,H> *\n+hash_map_maybe_create (hash_map<K,V,H> *&h,\n+\t\t       size_t size = default_hash_map_size)\n+{\n+  if (!h)\n+    {\n+      if (ggc)\n+\th = hash_map<K,V,H>::create_ggc (size);\n+      else\n+\th = new hash_map<K,V,H> (size);\n+    }\n+  return h;\n+}\n+\n+/* Like h->get, but handles null h.  */\n+template<typename K, typename V, typename H>\n+inline V*\n+hash_map_safe_get (hash_map<K,V,H> *h, const K& k)\n+{\n+  return h ? h->get (k) : NULL;\n+}\n+\n+/* Like h->get, but handles null h.  */\n+template<bool ggc, typename K, typename V, typename H>\n+inline V&\n+hash_map_safe_get_or_insert (hash_map<K,V,H> *&h, const K& k, bool *e = NULL,\n+\t\t\t     size_t size = default_hash_map_size)\n+{\n+  return hash_map_maybe_create<ggc> (h, size)->get_or_insert (k, e);\n+}\n+\n+/* Like h->put, but handles null h.  */\n+template<bool ggc, typename K, typename V, typename H>\n+inline bool\n+hash_map_safe_put (hash_map<K,V,H> *&h, const K& k, const V& v,\n+\t\t   size_t size = default_hash_map_size)\n+{\n+  return hash_map_maybe_create<ggc> (h, size)->put (k, v);\n+}\n+\n #endif"}, {"sha": "3520c3bb596e74ab9554be6be3b1d824e17dc40e", "filename": "gcc/hash-table.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2Fhash-table.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89844e5d30a5235960a2c627abc9369306fda61/gcc%2Fhash-table.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.c?ref=c89844e5d30a5235960a2c627abc9369306fda61", "patch": "@@ -78,7 +78,7 @@ struct prime_ent const prime_tab[] = {\n unsigned int hash_table_sanitize_eq_limit;\n \n /* The following function returns an index into the above table of the\n-   nearest prime number which is greater than N, and near a power of two. */\n+   nearest prime number which is at least N, and near a power of two. */\n \n unsigned int\n hash_table_higher_prime_index (unsigned long n)"}]}