{"sha": "404fa41fcfba5b0f969e6845f0447a295c73984e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA0ZmE0MWZjZmJhNWIwZjk2OWU2ODQ1ZjA0NDdhMjk1YzczOTg0ZQ==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@gcc.gnu.org", "date": "2019-01-17T07:49:24Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@gcc.gnu.org", "date": "2019-01-17T07:49:24Z"}, "message": "[rs6000] Support more prototypes for vec_ld and vec_st.\n\n2019-01-17  Kewen Lin  <linkw@gcc.gnu.org>\n\ngcc/ChangeLog\n    * doc/extend.texi: Add four new prototypes for vec_ld and seven new\n    prototypes for vec_st.\n    * config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add entries\n    for scalar address type variants of altivec_vec_ld/altivec_vec_st,\n    mainly on signed/unsigned long long and double.\n\ngcc/testsuite/ChangeLog\n    * gcc.target/powerpc/altivec_vld_vst_addr.c: New test.\n\nFrom-SVN: r268007", "tree": {"sha": "1a9cb31a254170663f1b5462fb04c9fbfa613f0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a9cb31a254170663f1b5462fb04c9fbfa613f0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/404fa41fcfba5b0f969e6845f0447a295c73984e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/404fa41fcfba5b0f969e6845f0447a295c73984e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/404fa41fcfba5b0f969e6845f0447a295c73984e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/404fa41fcfba5b0f969e6845f0447a295c73984e/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b00e9be03aa6f95887d0591c88d177f388118534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b00e9be03aa6f95887d0591c88d177f388118534", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b00e9be03aa6f95887d0591c88d177f388118534"}], "stats": {"total": 300, "additions": 300, "deletions": 0}, "files": [{"sha": "6b17531b5511fc87052945ee241787011aa8ff23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404fa41fcfba5b0f969e6845f0447a295c73984e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404fa41fcfba5b0f969e6845f0447a295c73984e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=404fa41fcfba5b0f969e6845f0447a295c73984e", "patch": "@@ -1,3 +1,11 @@\n+2019-01-17  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+\t* doc/extend.texi: Add four new prototypes for vec_ld and seven new\n+\tprototypes for vec_st.\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add entries\n+\tfor scalar address type variants of altivec_vec_ld/altivec_vec_st,\n+\tmainly on signed/unsigned long long and double.\n+\n 2019-01-16  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR target/88861"}, {"sha": "245a92f3befdd7d232dee3f50f4aada6a601ab19", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404fa41fcfba5b0f969e6845f0447a295c73984e/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404fa41fcfba5b0f969e6845f0447a295c73984e/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=404fa41fcfba5b0f969e6845f0447a295c73984e", "patch": "@@ -1531,11 +1531,18 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n \n   { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DF,\n     RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DF,\n+    RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_double, 0 },\n   { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_long_long, 0 },\n   { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_unsigned_long_long, 0 },\n   { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DI,\n     RS6000_BTI_bool_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V4SF,\n@@ -3737,14 +3744,27 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n \n   { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V2DF,\n     RS6000_BTI_void, RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF },\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V2DF,\n+    RS6000_BTI_void, RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_double },\n   { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V2DI,\n     RS6000_BTI_void, RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V2DI,\n+    RS6000_BTI_void, RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_long_long },\n   { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V2DI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V2DI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_unsigned_long_long },\n   { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V2DI,\n     RS6000_BTI_void, RS6000_BTI_bool_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_bool_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V2DI,\n+    RS6000_BTI_void, RS6000_BTI_bool_V2DI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_long_long },\n+  { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V2DI,\n+    RS6000_BTI_void, RS6000_BTI_bool_V2DI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_unsigned_long_long },\n   { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V4SF,\n     RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF },\n   { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V4SF,"}, {"sha": "ebd564891764fbb20106621f5dafef2b52eca9d6", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404fa41fcfba5b0f969e6845f0447a295c73984e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404fa41fcfba5b0f969e6845f0447a295c73984e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=404fa41fcfba5b0f969e6845f0447a295c73984e", "patch": "@@ -18460,6 +18460,10 @@ vector double vec_div (vector double, vector double);\n vector long vec_div (vector long, vector long);\n vector unsigned long vec_div (vector unsigned long, vector unsigned long);\n vector double vec_floor (vector double);\n+vector signed long long vec_ld (int, const vector signed long long *);\n+vector signed long long vec_ld (int, const signed long long *);\n+vector unsigned long long vec_ld (int, const vector unsigned long long *);\n+vector unsigned long long vec_ld (int, const unsigned long long *);\n vector __int128 vec_ld (int, const vector __int128 *);\n vector unsigned __int128 vec_ld (int, const vector unsigned __int128 *);\n vector __int128 vec_ld (int, const __int128 *);\n@@ -18538,6 +18542,13 @@ vector signed long vec_splats (signed long);\n vector unsigned long vec_splats (unsigned long);\n vector float vec_sqrt (vector float);\n vector double vec_sqrt (vector double);\n+void vec_st (vector signed long long, int, vector signed long long *);\n+void vec_st (vector signed long long, int, signed long long *);\n+void vec_st (vector unsigned long long, int, vector unsigned long long *);\n+void vec_st (vector unsigned long long, int, unsigned long long *);\n+void vec_st (vector bool long long, int, vector bool long long *);\n+void vec_st (vector bool long long, int, signed long long *);\n+void vec_st (vector bool long long, int, unsigned long long *);\n void vec_st (vector double, int, vector double *);\n void vec_st (vector double, int, double *);\n vector double vec_sub (vector double, vector double);"}, {"sha": "4f85b1a10efb60fe4cdc965c8e23f1d0a7bc7cac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404fa41fcfba5b0f969e6845f0447a295c73984e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404fa41fcfba5b0f969e6845f0447a295c73984e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=404fa41fcfba5b0f969e6845f0447a295c73984e", "patch": "@@ -1,3 +1,7 @@\n+2019-01-17  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/altivec_vld_vst_addr.c: New test.\n+\n 2019-01-17  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR c++/87768"}, {"sha": "bd248649e5ddeb68b0b13bf92727e1dbe2d8a51e", "filename": "gcc/testsuite/gcc.target/powerpc/altivec_vld_vst_addr.c", "status": "added", "additions": 257, "deletions": 0, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404fa41fcfba5b0f969e6845f0447a295c73984e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec_vld_vst_addr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404fa41fcfba5b0f969e6845f0447a295c73984e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec_vld_vst_addr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec_vld_vst_addr.c?ref=404fa41fcfba5b0f969e6845f0447a295c73984e", "patch": "@@ -0,0 +1,257 @@\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+/* Test vec_ld and vec_st can support both scalar and vector\n+   type address points, the list is:\n+     - address of vector unsigned char/short/int/long long\n+     - address of vector signed char/short/int/long long\n+     - address of vector double/float\n+     - address of unsigned char/short/int/long long\n+     - address of signed char/short/int/long long\n+     - address of double/float */\n+#include <altivec.h>\n+\n+/* Test vec_ld can allow scalar and vector type address. */\n+vector unsigned char\n+test_vld_scalar_uc (const unsigned char *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector unsigned short\n+test_vld_scalar_us (const unsigned short *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector unsigned int\n+test_vld_scalar_ui (const unsigned int *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector unsigned long long\n+test_vld_scalar_ul (const unsigned long long *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector signed char\n+test_vld_scalar_sc (const signed char *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector signed short\n+test_vld_scalar_ss (const signed short *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector signed int\n+test_vld_scalar_si (const signed int *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector signed long long\n+test_vld_scalar_sl (const signed long long *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector unsigned char\n+test_vld_vector_uc (const vector unsigned char *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector unsigned short\n+test_vld_vector_us (const vector unsigned short *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector unsigned int\n+test_vld_vector_ui (const vector unsigned int *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector unsigned long long\n+test_vld_vector_ul (const vector unsigned long long *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector signed char\n+test_vld_vector_sc (const vector signed char *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector signed short\n+test_vld_vector_ss (const vector signed short *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector signed int\n+test_vld_vector_si (const vector signed int *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector signed long long\n+test_vld_vector_sl (const vector signed long long *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector float\n+test_vld_scalar_f (const float *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector double\n+test_vld_scalar_d (const double *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector float\n+test_vld_vector_f (const vector float *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+vector double\n+test_vld_vector_d (const vector double *address)\n+{\n+  return __builtin_vec_ld (0, address);\n+}\n+\n+/* Test vec_st can allow scalar and vector type address. */\n+\n+void\n+test_vst_scalar_uc (vector unsigned char v, unsigned char *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_scalar_us (vector unsigned short v, unsigned short *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_scalar_ui (vector unsigned int v, unsigned int *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_scalar_ul (vector unsigned long long v, unsigned long long *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_scalar_sc (vector signed char v, signed char *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_scalar_ss (vector signed short v, signed short *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_scalar_si (vector signed int v, signed int *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_scalar_sl (vector signed long long v, signed long long *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_vector_uc (vector unsigned char v, vector unsigned char *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_vector_us (vector unsigned short v, vector unsigned short *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_vector_ui (vector unsigned int v, vector unsigned int *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_vector_ul (vector unsigned long long v,\n+\t\t    vector unsigned long long *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_vector_sc (vector signed char v, vector signed char *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_vector_ss (vector signed short v, vector signed short *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_vector_si (vector signed int v, vector signed int *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_vector_sl (vector signed long long v, vector signed long long *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_scalar_f (vector float v, float *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_vector_f (vector float v, vector float *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_scalar_d (vector double v, double *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+\n+void\n+test_vst_vector_d (vector double v, vector double *address)\n+{\n+  __builtin_vec_st (v, 0, address);\n+}\n+"}]}