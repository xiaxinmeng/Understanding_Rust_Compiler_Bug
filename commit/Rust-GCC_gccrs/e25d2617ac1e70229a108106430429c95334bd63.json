{"sha": "e25d2617ac1e70229a108106430429c95334bd63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI1ZDI2MTdhYzFlNzAyMjlhMTA4MTA2NDMwNDI5Yzk1MzM0YmQ2Mw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-06-24T20:12:05Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-06-24T20:12:05Z"}, "message": "basic_string.h (basic_string<>::front()): Add !empty debug check.\n\n2015-06-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/basic_string.h (basic_string<>::front()): Add !empty\n\tdebug check.\n\t(basic_string<>::back()): Likewise.\n\t(basic_string<>::pop_back()): Likewise.\n\nFrom-SVN: r224919", "tree": {"sha": "4cc414e8a8978598d5aaca734f652967c806288c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cc414e8a8978598d5aaca734f652967c806288c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e25d2617ac1e70229a108106430429c95334bd63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e25d2617ac1e70229a108106430429c95334bd63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e25d2617ac1e70229a108106430429c95334bd63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e25d2617ac1e70229a108106430429c95334bd63/comments", "author": null, "committer": null, "parents": [{"sha": "e6d6151387e551d716e5813107bd7e54bd0239e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d6151387e551d716e5813107bd7e54bd0239e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d6151387e551d716e5813107bd7e54bd0239e5"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "47777ac7c498f08a0b491191f0fd7f10a9994401", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25d2617ac1e70229a108106430429c95334bd63/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25d2617ac1e70229a108106430429c95334bd63/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e25d2617ac1e70229a108106430429c95334bd63", "patch": "@@ -1,3 +1,10 @@\n+2015-06-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/basic_string.h (basic_string<>::front()): Add !empty\n+\tdebug check.\n+\t(basic_string<>::back()): Likewise.\n+\t(basic_string<>::pop_back()): Likewise.\n+\n 2015-06-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Adjust"}, {"sha": "923fb83937cc9f3d348b05c30bad4eca88b036d0", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25d2617ac1e70229a108106430429c95334bd63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25d2617ac1e70229a108106430429c95334bd63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=e25d2617ac1e70229a108106430429c95334bd63", "patch": "@@ -39,6 +39,7 @@\n #include <ext/atomicity.h>\n #include <ext/alloc_traits.h>\n #include <debug/debug.h>\n+\n #if __cplusplus >= 201103L\n #include <initializer_list>\n #endif\n@@ -903,31 +904,43 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       reference\n       front() noexcept\n-      { return operator[](0); }\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\treturn operator[](0);\n+      }\n \n       /**\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %string.\n        */\n       const_reference\n       front() const noexcept\n-      { return operator[](0); }\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\treturn operator[](0);\n+      }\n \n       /**\n        *  Returns a read/write reference to the data at the last\n        *  element of the %string.\n        */\n       reference\n       back() noexcept\n-      { return operator[](this->size() - 1); }\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\treturn operator[](this->size() - 1);\n+      }\n \n       /**\n        *  Returns a read-only (constant) reference to the data at the\n        *  last element of the %string.\n        */\n       const_reference\n       back() const noexcept\n-      { return operator[](this->size() - 1); }\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\treturn operator[](this->size() - 1);\n+      }\n #endif\n \n       // Modifiers:\n@@ -1506,7 +1519,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       void\n       pop_back() noexcept\n-      { _M_erase(size()-1, 1); }\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\t_M_erase(size() - 1, 1);\n+      }\n #endif // C++11\n \n       /**\n@@ -3308,31 +3324,43 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        */\n       reference\n       front()\n-      { return operator[](0); }\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\treturn operator[](0);\n+      }\n \n       /**\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %string.\n        */\n       const_reference\n       front() const _GLIBCXX_NOEXCEPT\n-      { return operator[](0); }\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\treturn operator[](0);\n+      }\n \n       /**\n        *  Returns a read/write reference to the data at the last\n        *  element of the %string.\n        */\n       reference\n       back()\n-      { return operator[](this->size() - 1); }\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\treturn operator[](this->size() - 1);\n+      }\n \n       /**\n        *  Returns a read-only (constant) reference to the data at the\n        *  last element of the %string.\n        */\n       const_reference\n       back() const _GLIBCXX_NOEXCEPT\n-      { return operator[](this->size() - 1); }\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\treturn operator[](this->size() - 1);\n+      }\n #endif\n \n       // Modifiers:\n@@ -3819,7 +3847,10 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        */\n       void\n       pop_back() // FIXME C++11: should be noexcept.\n-      { erase(size()-1, 1); }\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\terase(size() - 1, 1);\n+      }\n #endif // C++11\n \n       /**"}]}