{"sha": "9b28cb6f0abed5a65534487ca27487675fa4dc18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIyOGNiNmYwYWJlZDVhNjU1MzQ0ODdjYTI3NDg3Njc1ZmE0ZGMxOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-11-22T10:13:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-11-22T10:13:01Z"}, "message": "re PR middle-end/78445 (ICE in maybe_gen_insn, at optabs.c:7014)\n\n\tPR tree-optimization/78445\n\t* tree-if-conv.c (tree_if_conversion): If any_pred_load_store or\n\tany_complicated_phi, version loop even if flag_tree_loop_if_convert is\n\t1.  Formatting fix.\n\n\t* gcc.dg/pr78445.c: New test.\n\nFrom-SVN: r242689", "tree": {"sha": "cce9bfc0d897a8d181e9aea4792743d8e5746db8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cce9bfc0d897a8d181e9aea4792743d8e5746db8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b28cb6f0abed5a65534487ca27487675fa4dc18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b28cb6f0abed5a65534487ca27487675fa4dc18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b28cb6f0abed5a65534487ca27487675fa4dc18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b28cb6f0abed5a65534487ca27487675fa4dc18/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee8195d985c6ed11902ae7fc65a77d75bdf42403", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee8195d985c6ed11902ae7fc65a77d75bdf42403", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee8195d985c6ed11902ae7fc65a77d75bdf42403"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "c97934882eb2b631cd0ca7981ffbadf1595e422a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b28cb6f0abed5a65534487ca27487675fa4dc18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b28cb6f0abed5a65534487ca27487675fa4dc18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b28cb6f0abed5a65534487ca27487675fa4dc18", "patch": "@@ -1,3 +1,10 @@\n+2016-11-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/78445\n+\t* tree-if-conv.c (tree_if_conversion): If any_pred_load_store or\n+\tany_complicated_phi, version loop even if flag_tree_loop_if_convert is\n+\t1.  Formatting fix.\n+\n 2016-11-22  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/78309"}, {"sha": "125b01f281719cd9ef990e43c65d0d7cbf97e9e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b28cb6f0abed5a65534487ca27487675fa4dc18/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b28cb6f0abed5a65534487ca27487675fa4dc18/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b28cb6f0abed5a65534487ca27487675fa4dc18", "patch": "@@ -1,3 +1,8 @@\n+2016-11-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/78445\n+\t* gcc.dg/pr78445.c: New test.\n+\n 2016-11-22  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \tPR libgfortran/78449 "}, {"sha": "bb5327b9f705b83b305618feacdcf60f3544ccbc", "filename": "gcc/testsuite/gcc.dg/pr78445.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b28cb6f0abed5a65534487ca27487675fa4dc18/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78445.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b28cb6f0abed5a65534487ca27487675fa4dc18/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78445.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78445.c?ref=9b28cb6f0abed5a65534487ca27487675fa4dc18", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/78445 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-loop-if-convert -ftree-vectorize\" } */\n+/* { dg-additional-options \"-mavx2\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+int a;\n+\n+void\n+foo (int x, int *y)\n+{\n+  while (a != 0)\n+    if (x != 0)\n+      {\n+\t*y = a;\n+\tx = *y;\n+      }\n+    else\n+      x = a;\n+}"}, {"sha": "13e12c63e1eae74738924cba35d3a7b3d3a393db", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b28cb6f0abed5a65534487ca27487675fa4dc18/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b28cb6f0abed5a65534487ca27487675fa4dc18/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=9b28cb6f0abed5a65534487ca27487675fa4dc18", "patch": "@@ -2808,15 +2808,20 @@ tree_if_conversion (struct loop *loop)\n     goto cleanup;\n \n   /* Since we have no cost model, always version loops unless the user\n-     specified -ftree-loop-if-convert.  Either version this loop, or if\n-     the pattern is right for outer-loop vectorization, version the\n-     outer loop.  In the latter case we will still if-convert the\n-     original inner loop.  */\n-  if (flag_tree_loop_if_convert != 1\n-      && !version_loop_for_if_conversion\n-      (versionable_outer_loop_p (loop_outer (loop))\n-       ? loop_outer (loop) : loop))\n-    goto cleanup;\n+     specified -ftree-loop-if-convert or unless versioning is required.\n+     Either version this loop, or if the pattern is right for outer-loop\n+     vectorization, version the outer loop.  In the latter case we will\n+     still if-convert the original inner loop.  */\n+  if (any_pred_load_store\n+      || any_complicated_phi\n+      || flag_tree_loop_if_convert != 1)\n+    {\n+      struct loop *vloop\n+\t= (versionable_outer_loop_p (loop_outer (loop))\n+\t   ? loop_outer (loop) : loop);\n+      if (!version_loop_for_if_conversion (vloop))\n+\tgoto cleanup;\n+    }\n \n   /* Now all statements are if-convertible.  Combine all the basic\n      blocks into one huge basic block doing the if-conversion"}]}