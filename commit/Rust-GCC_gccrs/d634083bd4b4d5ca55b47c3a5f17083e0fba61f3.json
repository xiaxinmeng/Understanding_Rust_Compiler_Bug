{"sha": "d634083bd4b4d5ca55b47c3a5f17083e0fba61f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYzNDA4M2JkNGI0ZDVjYTU1YjQ3YzNhNWYxNzA4M2UwZmJhNjFmMw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-02-14T20:59:19Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-02-14T20:59:19Z"}, "message": "make stormy16 use constraints.md\n\n\tmake stormy16 use constraints.md\n\t* config/stormy16/constraints.md: New file.\n\t* config/stormy16/predicates.md (nonimmediate_nonstack_operand):\n\tUse satisfies_constraint_Q and satisfies_constraint_R.\n\t* config/stormy16/stomry16-protos.h (xstormy16_extra_constraint_p):\n\tDelete.\n\t(xstormy16_legitiamte_address_p): Declare.\n\t* config/stormy16/stormy16.h (REG_CLASS_FROM_LETTER): Delete.\n\t(CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n\t(EXTRA_CONSTRAINT): Delete.\n\t* config/stormy16/stormy16.c (xstormy16_legitiamte_address_p):\n\tUn-staticize.\n\t(xstormy16_extra_constraint_p): Delete.\n\nFrom-SVN: r170152", "tree": {"sha": "d8299400e9d59702656cfe7eb88af6219a457784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8299400e9d59702656cfe7eb88af6219a457784"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3/comments", "author": null, "committer": null, "parents": [{"sha": "400a2d24373671cfd8de8c2a2c6d5c788d76b3d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400a2d24373671cfd8de8c2a2c6d5c788d76b3d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/400a2d24373671cfd8de8c2a2c6d5c788d76b3d5"}], "stats": {"total": 233, "additions": 139, "deletions": 94}, "files": [{"sha": "1b1914000ffe447c80e46b2a866faec0f7440322", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d634083bd4b4d5ca55b47c3a5f17083e0fba61f3", "patch": "@@ -1,3 +1,18 @@\n+2011-02-14  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/stormy16/constraints.md: New file.\n+\t* config/stormy16/predicates.md (nonimmediate_nonstack_operand):\n+\tUse satisfies_constraint_Q and satisfies_constraint_R.\n+\t* config/stormy16/stomry16-protos.h (xstormy16_extra_constraint_p):\n+\tDelete.\n+\t(xstormy16_legitiamte_address_p): Declare.\n+\t* config/stormy16/stormy16.h (REG_CLASS_FROM_LETTER): Delete.\n+\t(CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n+\t(EXTRA_CONSTRAINT): Delete.\n+\t* config/stormy16/stormy16.c (xstormy16_legitiamte_address_p):\n+\tUn-staticize.\n+\t(xstormy16_extra_constraint_p): Delete.\n+\n 2011-02-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR tree-optimization/46494"}, {"sha": "5ad17bdbfd907033ebe65284d080010336eaa477", "filename": "gcc/config/stormy16/constraints.md", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3/gcc%2Fconfig%2Fstormy16%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3/gcc%2Fconfig%2Fstormy16%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fconstraints.md?ref=d634083bd4b4d5ca55b47c3a5f17083e0fba61f3", "patch": "@@ -0,0 +1,119 @@\n+;; Constraint definitions for XSTORMY16.\n+;; Copyright (C) 2011 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Register constraints.\n+(define_register_constraint \"a\" \"R0_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"b\" \"R1_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"c\" \"R2_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"d\" \"R8_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"e\" \"EIGHT_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"t\" \"TWO_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"z\" \"ICALL_REGS\"\n+  \"@internal\")\n+\n+;; Integer constraints.\n+(define_constraint \"I\"\n+  \"An integer between 0 and 3.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 0, 3)\")))\n+\n+(define_constraint \"J\"\n+  \"A power of two.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"exact_log2 (ival) != -1\")))\n+\n+(define_constraint \"K\"\n+  \"A power of two when inverted.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"exact_log2 (~ival) != -1\")))\n+\n+(define_constraint \"L\"\n+  \"An 8-bit unsigned integer.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 0, 255)\")))\n+\n+(define_constraint \"M\"\n+  \"An integer between -255 and 0.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -255, 0)\")))\n+\n+(define_constraint \"N\"\n+  \"An integer between -3 and 0.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -3, 0)\")))\n+\n+(define_constraint \"O\"\n+  \"An integer between 1 and 4.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 1, 4)\")))\n+\n+(define_constraint \"P\"\n+  \"An integer between -4 and -1.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -4, -1)\")))\n+\n+;; Extra constraints.\n+(define_constraint \"Q\"\n+  \"A register push operation.\"\n+  (and (match_code \"mem\")\n+       (match_code \"post_inc\" \"0\")\n+       (match_test \"XEXP (XEXP (op, 0), 0) == stack_pointer_rtx\")))\n+\n+(define_constraint \"R\"\n+  \"A register pop operation.\"\n+  (and (match_code \"mem\")\n+       (match_code \"pre_dec\" \"0\")\n+       (match_test \"XEXP (XEXP (op, 0), 0) == stack_pointer_rtx\")))\n+\n+(define_constraint \"S\"\n+  \"An immediate memory address.\"\n+  (and (match_code \"mem\")\n+       (match_code \"const_int\" \"0\")\n+       (match_test \"xstormy16_legitimate_address_p (VOIDmode, XEXP (op, 0), false)\")))\n+\n+(define_constraint \"T\"\n+  \"@internal\"\n+  ;; For Rx; not implemented yet.\n+  (match_test \"0\"))\n+\n+(define_constraint \"U\"\n+  \"An integer not between 2 and 15.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"!IN_RANGE (ival, 2, 15)\")))\n+\n+(define_constraint \"W\"\n+  \"@internal\"\n+  (match_operand 0 \"xstormy16_below100_operand\"))\n+\n+(define_constraint \"Z\"\n+  \"Zero.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 0\")))\n\\ No newline at end of file"}, {"sha": "7270c7fe7a7e0ee847e65ff6b2524f1b937b8e52", "filename": "gcc/config/stormy16/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3/gcc%2Fconfig%2Fstormy16%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3/gcc%2Fconfig%2Fstormy16%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fpredicates.md?ref=d634083bd4b4d5ca55b47c3a5f17083e0fba61f3", "patch": "@@ -140,8 +140,8 @@\n {\n   /* 'Q' is for pushes, 'R' for pops.  */\n   return (nonimmediate_operand (op, mode) \n-\t  && ! xstormy16_extra_constraint_p (op, 'Q')\n-\t  && ! xstormy16_extra_constraint_p (op, 'R'));\n+\t  && ! satisfies_constraint_Q (op)\n+\t  && ! satisfies_constraint_R (op));\n })\n \n (define_predicate \"xstormy16_carry_plus_operand\""}, {"sha": "ad44e154fae52d3a5570c92b16c5d50b80d3a5cc", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=d634083bd4b4d5ca55b47c3a5f17083e0fba61f3", "patch": "@@ -45,7 +45,6 @@ extern void xstormy16_emit_cbranch (enum rtx_code, rtx, rtx, rtx);\n extern char *xstormy16_output_cbranch_hi (rtx, const char *, int, rtx);\n extern char *xstormy16_output_cbranch_si (rtx, const char *, int, rtx);\n extern int xstormy16_mode_dependent_address_p (rtx);\n-extern int xstormy16_extra_constraint_p (rtx, int);\n \n extern void xstormy16_print_operand (FILE *, rtx, int);\n extern void xstormy16_print_operand_address (FILE *, rtx);\n@@ -72,5 +71,6 @@ extern const char * xstormy16_output_shift (enum machine_mode, enum rtx_code,\n \t\t\t\t\t    rtx, rtx, rtx);\n extern int  xstormy16_below100_symbol (rtx, enum machine_mode);\n extern int  xstormy16_splittable_below100_operand (rtx, enum machine_mode);\n+extern bool xstormy16_legitimate_address_p (enum machine_mode, rtx, bool);\n #endif\n "}, {"sha": "e4cd10e27649988502a2a5fd86e16cea4c148a94", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 1, "deletions": 55, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=d634083bd4b4d5ca55b47c3a5f17083e0fba61f3", "patch": "@@ -615,7 +615,7 @@ xstormy16_expand_andqi3 (rtx *operands)\n   && INTVAL (X) + (OFFSET) < 0x8000\t\t\t\t\t \\\n   && (INTVAL (X) + (OFFSET) < 0x100 || INTVAL (X) + (OFFSET) >= 0x7F00))\n \n-static bool\n+bool\n xstormy16_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n \t\t\t\trtx x, bool strict)\n {\n@@ -683,60 +683,6 @@ xstormy16_mode_dependent_address_p (rtx x)\n   return 0;\n }\n \n-/* A C expression that defines the optional machine-dependent constraint\n-   letters (`Q', `R', `S', `T', `U') that can be used to segregate specific\n-   types of operands, usually memory references, for the target machine.\n-   Normally this macro will not be defined.  If it is required for a particular\n-   target machine, it should return 1 if VALUE corresponds to the operand type\n-   represented by the constraint letter C.  If C is not defined as an extra\n-   constraint, the value returned should be 0 regardless of VALUE.  */\n-\n-int\n-xstormy16_extra_constraint_p (rtx x, int c)\n-{\n-  switch (c)\n-    {\n-      /* 'Q' is for pushes.  */\n-    case 'Q':\n-      return (MEM_P (x)\n-\t      && GET_CODE (XEXP (x, 0)) == POST_INC\n-\t      && XEXP (XEXP (x, 0), 0) == stack_pointer_rtx);\n-\n-      /* 'R' is for pops.  */\n-    case 'R':\n-      return (MEM_P (x)\n-\t      && GET_CODE (XEXP (x, 0)) == PRE_DEC\n-\t      && XEXP (XEXP (x, 0), 0) == stack_pointer_rtx);\n-\n-      /* 'S' is for immediate memory addresses.  */\n-    case 'S':\n-      return (MEM_P (x)\n-\t      && CONST_INT_P (XEXP (x, 0))\n-\t      && xstormy16_legitimate_address_p (VOIDmode, XEXP (x, 0), 0));\n-\n-      /* 'T' is for Rx.  */\n-    case 'T':\n-      /* Not implemented yet.  */\n-      return 0;\n-\n-      /* 'U' is for CONST_INT values not between 2 and 15 inclusive,\n-\t for allocating a scratch register for 32-bit shifts.  */\n-    case 'U':\n-      return (CONST_INT_P (x) && (! IN_RANGE (INTVAL (x), 2, 15)));\n-\n-      /* 'Z' is for CONST_INT value zero.  This is for adding zero to\n-\t a register in addhi3, which would otherwise require a carry.  */\n-    case 'Z':\n-      return (CONST_INT_P (x) && (INTVAL (x) == 0));\n-\n-    case 'W':\n-      return xstormy16_below100_operand (x, GET_MODE (x));\n-\n-    default:\n-      return 0;\n-    }\n-}\n-\n int\n short_memory_operand (rtx x, enum machine_mode mode)\n {"}, {"sha": "c92af1dbd8a478f457a9d711fc430b33a2726624", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=d634083bd4b4d5ca55b47c3a5f17083e0fba61f3", "patch": "@@ -225,26 +225,6 @@ enum reg_class\n \n #define INDEX_REG_CLASS GENERAL_REGS\n \n-/*   The following letters are unavailable, due to being used as\n-   constraints:\n-\t'0'..'9'\n-\t'<', '>'\n-\t'E', 'F', 'G', 'H'\n-\t'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P'\n-\t'Q', 'R', 'S', 'T', 'U'\n-\t'V', 'X'\n-\t'g', 'i', 'm', 'n', 'o', 'p', 'r', 's'.  */\n-\n-#define REG_CLASS_FROM_LETTER(CHAR)\t\t\\\n- (  (CHAR) == 'a' ? R0_REGS\t\t\t\\\n-  : (CHAR) == 'b' ? R1_REGS\t\t\t\\\n-  : (CHAR) == 'c' ? R2_REGS\t\t\t\\\n-  : (CHAR) == 'd' ? R8_REGS\t\t\t\\\n-  : (CHAR) == 'e' ? EIGHT_REGS\t\t\t\\\n-  : (CHAR) == 't' ? TWO_REGS\t\t\t\\\n-  : (CHAR) == 'z' ? ICALL_REGS\t\t\t\\\n-  : NO_REGS)\n-\n #define REGNO_OK_FOR_BASE_P(NUM) 1\n \n #define REGNO_OK_FOR_INDEX_P(NUM) REGNO_OK_FOR_BASE_P (NUM)\n@@ -263,22 +243,6 @@ enum reg_class\n #define CLASS_MAX_NREGS(CLASS, MODE) \\\n   ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n-#define CONST_OK_FOR_LETTER_P(VALUE, C)\t\t\t\\\n-  (  (C) == 'I' ? (VALUE) >= 0 && (VALUE) <= 3\t\t\\\n-   : (C) == 'J' ? exact_log2 (VALUE) != -1\t\t\\\n-   : (C) == 'K' ? exact_log2 (~(VALUE)) != -1\t\t\\\n-   : (C) == 'L' ? (VALUE) >= 0 && (VALUE) <= 255\t\\\n-   : (C) == 'M' ? (VALUE) >= -255 && (VALUE) <= 0\t\\\n-   : (C) == 'N' ? (VALUE) >= -3 && (VALUE) <= 0\t\t\\\n-   : (C) == 'O' ? (VALUE) >= 1 && (VALUE) <= 4\t\t\\\n-   : (C) == 'P' ? (VALUE) >= -4 && (VALUE) <= -1\t\\\n-   : 0 )\n-\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C) 0\n-\n-#define EXTRA_CONSTRAINT(VALUE, C) \\\n-  xstormy16_extra_constraint_p (VALUE, C)\n-\n \f\n /* Basic Stack Layout.  */\n "}, {"sha": "3eb74b72e0f4c0f0c9885e6b744de5ba5e7e09fb", "filename": "gcc/config/stormy16/stormy16.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d634083bd4b4d5ca55b47c3a5f17083e0fba61f3/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.md?ref=d634083bd4b4d5ca55b47c3a5f17083e0fba61f3", "patch": "@@ -95,6 +95,7 @@\n \t\t\t(set_attr \"psw_operand\" \"clobber\")])\n \n (include \"predicates.md\")\n+(include \"constraints.md\")\n \f\n ;; ::::::::::::::::::::\n ;; ::"}]}