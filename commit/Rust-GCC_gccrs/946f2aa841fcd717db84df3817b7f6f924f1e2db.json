{"sha": "946f2aa841fcd717db84df3817b7f6f924f1e2db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ2ZjJhYTg0MWZjZDcxN2RiODRkZjM4MTdiN2Y2ZjkyNGYxZTJkYg==", "commit": {"author": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1997-03-21T21:05:54Z"}, "committer": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1997-03-21T21:05:54Z"}, "message": "Formerly cpp.texi.~28~\n\nFrom-SVN: r13759", "tree": {"sha": "7fcbe0f3415df3cfef3f591108f2fc3f2e882400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fcbe0f3415df3cfef3f591108f2fc3f2e882400"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/946f2aa841fcd717db84df3817b7f6f924f1e2db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/946f2aa841fcd717db84df3817b7f6f924f1e2db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/946f2aa841fcd717db84df3817b7f6f924f1e2db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/946f2aa841fcd717db84df3817b7f6f924f1e2db/comments", "author": null, "committer": null, "parents": [{"sha": "6fafc523845cad2882d049bef82d4da7c09739e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fafc523845cad2882d049bef82d4da7c09739e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fafc523845cad2882d049bef82d4da7c09739e5"}], "stats": {"total": 54, "additions": 30, "deletions": 24}, "files": [{"sha": "6d2e77eb78cd59aeb60f7c24f17c5ae546464bd1", "filename": "gcc/cpp.texi", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946f2aa841fcd717db84df3817b7f6f924f1e2db/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946f2aa841fcd717db84df3817b7f6f924f1e2db/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=946f2aa841fcd717db84df3817b7f6f924f1e2db", "patch": "@@ -45,7 +45,7 @@ into another language, under the above conditions for modified versions.\n @titlepage\n @c @finalout\n @title The C Preprocessor\n-@subtitle Last revised July 1992\n+@subtitle Last revised March 1997\n @subtitle for GCC version 2\n @author Richard M. Stallman\n @page\n@@ -54,7 +54,7 @@ This booklet is eventually intended to form the first chapter of a GNU\n C Language manual.\n \n @vskip 0pt plus 1filll\n-Copyright @copyright{} 1987, 1989, 1991, 1992, 1993, 1994, 1995 Free\n+Copyright @copyright{} 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997 Free\n Software Foundation, Inc.\n \n Permission is granted to make and distribute verbatim copies of\n@@ -105,7 +105,7 @@ to inform the compiler of where each source line originally came from.\n \n C preprocessors vary in some details.  This manual discusses the GNU C\n preprocessor, the C Compatible Compiler Preprocessor.  The GNU C\n-preprocessor provides a superset of the features of ANSI Standard C.\n+preprocessor provides a superset of the features of ANSI Standard C@.\n \n ANSI Standard C requires the rejection of many harmless constructs commonly\n used by today's C programs.  Such incompatibility would be inconvenient for\n@@ -115,6 +115,12 @@ options @samp{-trigraphs}, @samp{-undef} and @samp{-pedantic}, but in\n practice the consequences of having strict ANSI Standard C make it\n undesirable to do this.  @xref{Invocation}.\n \n+The C preprocessor is designed for C-like languages; you may run into\n+problems if you apply it to other kinds of languages, because it assumes\n+that it is dealing with C@.  For example, the C preprocessor sometimes\n+outputs extra white space to avoid inadvertent C token concatenation,\n+and this may cause problems with other languages.\n+\n @menu\n * Global Actions::    Actions made uniformly on all input files.\n * Directives::        General syntax of preprocessing directives.\n@@ -490,14 +496,14 @@ names, then inheritance is straightforward: simply write @samp{#include\n Sometimes it is necessary to give the inheriting file the same name as\n the base file.  This is less straightforward.\n \n-For example, suppose an application program uses the system header file\n+For example, suppose an application program uses the system header\n @file{sys/signal.h}, but the version of @file{/usr/include/sys/signal.h}\n on a particular system doesn't do what the application program expects.\n It might be convenient to define a ``local'' version, perhaps under the\n name @file{/usr/local/include/sys/signal.h}, to override or add to the\n one supplied by the system.\n \n-You can do this by using the option @samp{-I.} for compilation, and\n+You can do this by compiling with the option @samp{-I.}, and\n writing a file @file{sys/signal.h} that does what the application\n program expects.  But making this file include the standard\n @file{sys/signal.h} is not so easy---writing @samp{#include\n@@ -521,8 +527,8 @@ file directories @emph{after} the directory in which the current file\n was found.\n \n Suppose you specify @samp{-I /usr/local/include}, and the list of\n-directories to search also includes @file{/usr/include}; and suppose that\n-both directories contain a file named @file{sys/signal.h}.  Ordinary\n+directories to search also includes @file{/usr/include}; and suppose\n+both directories contain @file{sys/signal.h}.  Ordinary\n @samp{#include <sys/signal.h>} finds the file under\n @file{/usr/local/include}.  If that file contains @samp{#include_next\n <sys/signal.h>}, it starts searching after that directory, and finds the\n@@ -671,7 +677,7 @@ values, as it is defined in many C programs:\n @end example\n \n @noindent\n-(This is not the best way to define a ``minimum'' macro in GNU C.\n+(This is not the best way to define a ``minimum'' macro in GNU C@.\n @xref{Side Effects}, for more information.)\n \n To use a macro that expects arguments, you write the name of the macro\n@@ -814,7 +820,7 @@ system-specific macros.\n @cindex standard predefined macros\n \n The standard predefined macros are available with the same meanings\n-regardless of the machine or operating system on which you are using GNU C.\n+regardless of the machine or operating system on which you are using GNU C@.\n Their names all start and end with double underscores.  Those preceding\n @code{__GNUC__} in this table are standardized by ANSI C; the rest are\n GNU C extensions.\n@@ -872,7 +878,7 @@ eight characters and looks like @samp{\"23:59:01\"}.\n @item __STDC__\n @findex __STDC__\n This macro expands to the constant 1, to signify that this is ANSI\n-Standard C.  (Whether that is actually true depends on what C compiler\n+Standard C@.  (Whether that is actually true depends on what C compiler\n will operate on the output from the preprocessor.)\n \n @item __STDC_VERSION__\n@@ -887,7 +893,7 @@ will operate on the output from the preprocessor.\n \n @item __GNUC__\n @findex __GNUC__\n-This macro is defined if and only if this is GNU C.  This macro is\n+This macro is defined if and only if this is GNU C@.  This macro is\n defined only when the entire GNU C compiler is in use; if you invoke the\n preprocessor directly, @samp{__GNUC__} is undefined.  The value\n identifies the major version number of GNU CC (@samp{1} for GNU CC\n@@ -922,7 +928,7 @@ This macro is defined if and only if the @samp{-ansi} switch was\n specified when GNU C was invoked.  Its definition is the null string.\n This macro exists primarily to direct certain GNU header files not to\n define certain traditional Unix constructs which are incompatible with\n-ANSI C.\n+ANSI C@.\n \n @item __BASE_FILE__\n @findex __BASE_FILE__\n@@ -941,7 +947,7 @@ the nesting level is zero.\n @item __VERSION__\n @findex __VERSION__\n This macro expands to a string which describes the version number of\n-GNU C.  The string is normally a sequence of decimal numbers separated\n+GNU C@.  The string is normally a sequence of decimal numbers separated\n by periods, such as @samp{\"2.6.0\"}.  The only reasonable use of this\n macro is to incorporate it into a string constant.\n \n@@ -1240,7 +1246,7 @@ possible to piece together a string constant.  However, two pieces of text\n that don't together form a valid lexical unit cannot be concatenated.  For\n example, concatenation with @samp{x} on one side and @samp{+} on the other\n is not meaningful because those two characters can't fit together in any\n-lexical unit of C.  The ANSI standard says that such attempts at\n+lexical unit of C@.  The ANSI standard says that such attempts at\n concatenation are undefined, but in the GNU C preprocessor it is well\n defined: it puts the @samp{x} and @samp{+} side by side with no particular\n special results.\n@@ -1440,7 +1446,7 @@ Defining the macro as\n @noindent\n provides the desired result.\n \n-However, unintended grouping can result in another way.  Consider\n+Unintended grouping can result in another way.  Consider\n @samp{sizeof ceil_div(1, 2)}.  That has the appearance of a C expression\n that would compute the size of the type of @samp{ceil_div (1, 2)}, but in\n fact it means something very different.  Here is what it expands to:\n@@ -1961,7 +1967,7 @@ practice because it helps people match the @samp{#endif} to the\n corresponding @samp{#if}.  Such comments should always be used, except in\n short conditionals that are not nested.  In fact, you can put anything at\n all after the @samp{#endif} and it will be ignored by the GNU C preprocessor,\n-but only comments are acceptable in ANSI Standard C.\n+but only comments are acceptable in ANSI Standard C@.\n \n @var{expression} is a C expression of integer type, subject to stringent\n restrictions.  It may contain\n@@ -2444,8 +2450,8 @@ rather than a line of output containing just a @samp{#}.  Supposedly\n some old C programs contain such lines.\n \n @findex #pragma\n-The ANSI standard specifies that the @samp{#pragma} directive has an\n-arbitrary, implementation-defined effect.  In the GNU C preprocessor,\n+The ANSI standard specifies that the effect of the @samp{#pragma}\n+directive is implementation-defined.  In the GNU C preprocessor,\n @samp{#pragma} directives are not used, except for @samp{#pragma once}\n (@pxref{Once-Only}).  However, they are left in the preprocessor output,\n so they are available to the compilation pass.\n@@ -2493,7 +2499,7 @@ This indicates returning to a file (after having included another file).\n This indicates that the following text comes from a system header file,\n so certain warnings should be suppressed.\n @item 4\n-This indicates that the following text should be treated as C.\n+This indicates that the following text should be treated as C@.\n @c maybe cross reference NO_IMPLICIT_EXTERN_C\n @end table\n \n@@ -2538,7 +2544,7 @@ output before the expansion of the macro call.\n \n @item -traditional\n @findex -traditional\n-Try to imitate the behavior of old-fashioned C, as opposed to ANSI C.\n+Try to imitate the behavior of old-fashioned C, as opposed to ANSI C@.\n \n @itemize @bullet\n @item\n@@ -2566,17 +2572,17 @@ It considers @samp{1.0e+4} to be three tokens: @samp{1.0e}, @samp{+},\n and @samp{4}.\n \n @item\n-A macro is not suppressed within its own definition, in traditional C.\n+A macro is not suppressed within its own definition, in traditional C@.\n Thus, any macro that is used recursively inevitably causes an error.\n \n @item\n The character @samp{#} has no special meaning within a macro definition\n-in traditional C.\n+in traditional C@.\n \n @item\n In traditional C, the text at the end of a macro expansion can run\n together with the text after the macro call, to produce a single token.\n-(This is impossible in ANSI C.)\n+(This is impossible in ANSI C@.)\n \n @item\n Traditionally, @samp{\\} inside a macro argument suppresses the syntactic\n@@ -2629,7 +2635,7 @@ Requests both @samp{-Wtrigraphs} and @samp{-Wcomment} (but not\n @item -Wtraditional\n @findex -Wtraditional\n Warn about certain constructs that behave differently in traditional and\n-ANSI C.\n+ANSI C@.\n \n @item -I @var{directory}\n @findex -I"}]}