{"sha": "3062335c076f3700185f1f217fe0516d0549f67d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA2MjMzNWMwNzZmMzcwMDE4NWYxZjIxN2ZlMDUxNmQwNTQ5ZjY3ZA==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2006-03-16T02:44:10Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2006-03-16T02:44:10Z"}, "message": "linux-unwind.h (shmedia_fallback_frame_state): Set fs->signal_frame.\n\n\t* config/sh/linux-unwind.h (shmedia_fallback_frame_state): Set\n\tfs->signal_frame.\n\t(sh_fallback_frame_state): Likewise.\n\n\t* include/sh-signal.h (MAKE_THROW_FRAME): Change into empty\n\tmacro.\n\nFrom-SVN: r112122", "tree": {"sha": "f07f90453577dd978a46b2ca2b879b031dab4461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f07f90453577dd978a46b2ca2b879b031dab4461"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3062335c076f3700185f1f217fe0516d0549f67d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3062335c076f3700185f1f217fe0516d0549f67d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3062335c076f3700185f1f217fe0516d0549f67d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3062335c076f3700185f1f217fe0516d0549f67d/comments", "author": null, "committer": null, "parents": [{"sha": "747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b"}], "stats": {"total": 40, "additions": 16, "deletions": 24}, "files": [{"sha": "0ae317083e84ebfbf0361a026ea81a2f692da1da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3062335c076f3700185f1f217fe0516d0549f67d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3062335c076f3700185f1f217fe0516d0549f67d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3062335c076f3700185f1f217fe0516d0549f67d", "patch": "@@ -1,3 +1,9 @@\n+2006-03-16  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/linux-unwind.h (shmedia_fallback_frame_state): Set\n+\tfs->signal_frame.\n+\t(sh_fallback_frame_state): Likewise.\n+\n 2006-03-15  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config.gcc (*-*-darwin*): Don't build crt2.o for all Darwin ports."}, {"sha": "de84a7727623e3c0d9c7e7a02437aaaac0933d5f", "filename": "gcc/config/sh/linux-unwind.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3062335c076f3700185f1f217fe0516d0549f67d/gcc%2Fconfig%2Fsh%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3062335c076f3700185f1f217fe0516d0549f67d/gcc%2Fconfig%2Fsh%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flinux-unwind.h?ref=3062335c076f3700185f1f217fe0516d0549f67d", "patch": "@@ -1,5 +1,5 @@\n /* DWARF2 EH unwinding support for SH Linux.\n-   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -137,6 +137,7 @@ shmedia_fallback_frame_state (struct _Unwind_Context *context,\n   fs->regs.reg[63].loc.offset\n     = (long)&(sc->sc_pc) - new_cfa;\n   fs->retaddr_column = 63;\n+  fs->signal_frame = 1;\n   return _URC_NO_REASON;\n }\n \n@@ -246,6 +247,7 @@ sh_fallback_frame_state (struct _Unwind_Context *context,\n   fs->regs.reg[SH_DWARF_FRAME_PC].loc.offset\n     = (long)&(sc->sc_pc) - new_cfa;\n   fs->retaddr_column = SH_DWARF_FRAME_PC;\n+  fs->signal_frame = 1;\n   return _URC_NO_REASON;\n }\n #endif /* defined (__SH5__) */"}, {"sha": "ac204088ae2cefde0bd369bf9c5fa158b848b761", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3062335c076f3700185f1f217fe0516d0549f67d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3062335c076f3700185f1f217fe0516d0549f67d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3062335c076f3700185f1f217fe0516d0549f67d", "patch": "@@ -1,3 +1,8 @@\n+2006-03-16  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* include/sh-signal.h (MAKE_THROW_FRAME): Change into empty\n+\tmacro.\n+\t\n 2006-03-15  Tom Tromey  <tromey@redhat.com>\n \n \t* testsuite/libjava.jacks/jacks.xfail: Removed"}, {"sha": "3a96ce25fb2d580b539304e2b4b840ae4aec505f", "filename": "libjava/include/sh-signal.h", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3062335c076f3700185f1f217fe0516d0549f67d/libjava%2Finclude%2Fsh-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3062335c076f3700185f1f217fe0516d0549f67d/libjava%2Finclude%2Fsh-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fsh-signal.h?ref=3062335c076f3700185f1f217fe0516d0549f67d", "patch": "@@ -1,7 +1,7 @@\n // sh-signal.h - Catch runtime signals and turn them into exceptions\n // on a SuperH based Linux system.\n \n-/* Copyright (C) 2004  Free Software Foundation\n+/* Copyright (C) 2004, 2006  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -33,28 +33,7 @@ typedef struct _sig_ucontext {\n #define SIGNAL_HANDLER(_name)\t\t\t\t\t\t\\\n   static void _name (int , siginfo_t *, sig_ucontext_t *_uc)\n \n-/* SH either leaves PC pointing at a faulting instruction or the\n-   following instruction, depending on the signal.  SEGV always does\n-   the former, so we adjust the saved PC to point to the following\n-   instruction. This is what the handler in libgcc expects.  */\n-\n-#ifdef __SH5__\n-#define MAKE_THROW_FRAME(_exception)\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    volatile struct sigcontext *_sc = &_uc->uc_mcontext;\t\t\\\n-    _sc->sc_pc += 4;\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-#else\n-#define MAKE_THROW_FRAME(_exception)\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    volatile struct sigcontext *_sc = &_uc->uc_mcontext;\t\t\\\n-    _sc->sc_pc += 2;\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-#endif\n+#define MAKE_THROW_FRAME(_exception)\n \n /* For an explanation why we cannot simply use sigaction to\n    install the handlers, see i386-signal.h.  */"}]}