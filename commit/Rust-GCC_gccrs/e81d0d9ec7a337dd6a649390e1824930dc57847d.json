{"sha": "e81d0d9ec7a337dd6a649390e1824930dc57847d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgxZDBkOWVjN2EzMzdkZDZhNjQ5MzkwZTE4MjQ5MzBkYzU3ODQ3ZA==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-31T09:53:25Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-31T09:53:25Z"}, "message": "[ARM][PATCH]: Add support for MVE ACLE intrinsics polymorphic variants for +mve.fp option.\n\nFor the following MVE ACLE intrinsics, polymorphic variant supports only +mve option, support for +mve.fp is missing.\n\nvabavq_p_s16, vabavq_p_s32, vabavq_p_s8, vabavq_p_u16, vabavq_p_u32, vabavq_p_u8, vabavq_s16, vabavq_s32, vabavq_s8, vabavq_u16, vabavq_u32, vabavq_u8, vaddlvaq_p_s32, vaddlvaq_p_u32, vaddlvaq_s32, vaddlvaq_u32, vaddlvq_p_s32, vaddlvq_p_u32, vaddlvq_u32, vaddvaq_p_s16, vaddvaq_p_s32, vaddvaq_p_s8, vaddvaq_p_u16, vaddvaq_p_u32, vaddvaq_p_u8, vaddvaq_s16, vaddvaq_s32, vaddvaq_s8, vaddvaq_u16, vaddvaq_u32, vaddvaq_u8, vaddvq_p_s16, vaddvq_p_s32, vaddvq_p_s8, vaddvq_p_u16, vaddvq_p_u32, vaddvq_p_u8, vaddvq_s8, vaddvq_u16, vaddvq_u32, vaddvq_u8, vcmpcsq_m_n_u16, vcmpcsq_m_n_u32, vcmpcsq_m_n_u8, vcmpcsq_m_u16, vcmpcsq_m_u32, vcmpcsq_m_u8, vcmpcsq_n_u16, vcmpcsq_n_u32, vcmpcsq_n_u8, vcmpcsq_u16, vcmpcsq_u32, vcmpcsq_u8, vcmpeqq_n_f16, vcmpeqq_n_f32, vcmpgeq_m_n_s16, vcmpgeq_m_n_s32, vcmpgeq_m_n_s8, vcmpgtq_m_n_f16, vcmpgtq_m_n_f32, vcmpgtq_n_f16, vcmpgtq_n_f32, vcmphiq_m_n_u16, vcmphiq_m_n_u32, vcmphiq_m_n_u8, vcmphiq_m_u16, vcmphiq_m_u32, vcmphiq_m_u8, vcmphiq_n_u16, vcmphiq_n_u32, vcmphiq_n_u8, vcmphiq_u16, vcmphiq_u32, vcmphiq_u8, vcmpleq_m_n_f16, vcmpleq_m_n_f32, vcmpleq_n_f16, vcmpleq_n_f32, vcmpltq_m_n_f16, vcmpltq_m_n_f32, vcmpneq_m_n_f16, vcmpneq_m_n_f32, vcmpneq_n_f16, vcmpneq_n_f32, vmaxavq_p_s16, vmaxavq_p_s32, vmaxavq_p_s8, vmaxavq_s16, vmaxavq_s32, vmaxavq_s8, vmaxq_x_s16, vmaxq_x_s32, vmaxq_x_s8, vmaxq_x_u16, vmaxq_x_u32, vmaxq_x_u8, vmaxvq_p_s16, vmaxvq_p_s32, vmaxvq_p_s8, vmaxvq_p_u16, vmaxvq_p_u32, vmaxvq_p_u8, vmaxvq_s16, vmaxvq_s32, vmaxvq_s8, vmaxvq_u16, vmaxvq_u32, vmaxvq_u8, vminavq_p_s16, vminavq_p_s32, vminavq_p_s8, vminavq_s16, vminavq_s32, vminavq_s8, vminq_x_s16, vminq_x_s32, vminq_x_s8, vminq_x_u16, vminq_x_u32, vminq_x_u8, vminvq_p_s16, vminvq_p_s32, vminvq_p_s8, vminvq_p_u16, vminvq_p_u32, vminvq_p_u8, vminvq_s16, vminvq_s32, vminvq_s8, vminvq_u16, vminvq_u32, vminvq_u8, vmladavaq_p_s16, vmladavaq_p_s32, vmladavaq_p_s8, vmladavaq_p_u16, vmladavaq_p_u32, vmladavaq_p_u8, vmladavaq_s16, vmladavaq_s32, vmladavaq_s8, vmladavaq_u16, vmladavaq_u32, vmladavaq_u8, vmladavaxq_s16, vmladavaxq_s32, vmladavaxq_s8, vmladavq_p_s16, vmladavq_p_s32, vmladavq_p_s8, vmladavq_p_u16, vmladavq_p_u32, vmladavq_p_u8, vmladavq_s16, vmladavq_s32, vmladavq_s8, vmladavq_u16, vmladavq_u32, vmladavq_u8, vmladavxq_p_s16, vmladavxq_p_s32, vmladavxq_p_s8, vmladavxq_s16, vmladavxq_s32, vmladavxq_s8, vmlaldavaq_s16, vmlaldavaq_s32, vmlaldavaq_u16, vmlaldavaq_u32, vmlaldavaxq_s16, vmlaldavaxq_s32, vmlaldavq_p_s16, vmlaldavq_p_s32, vmlaldavq_p_u16, vmlaldavq_p_u32, vmlaldavq_s16, vmlaldavq_s32, vmlaldavq_u16, vmlaldavq_u32, vmlaldavxq_p_s16, vmlaldavxq_p_s32, vmlsdavaq_s16, vmlsdavaq_s32, vmlsdavaq_s8, vmlsdavaxq_s16, vmlsdavaxq_s32, vmlsdavaxq_s8, vmlsdavq_p_s16, vmlsdavq_p_s32, vmlsdavq_p_s8, vmlsdavq_s16, vmlsdavq_s32, vmlsdavq_s8, vmlsdavxq_p_s16, vmlsdavxq_p_s32, vmlsdavxq_p_s8, vmlsdavxq_s16, vmlsdavxq_s32, vmlsdavxq_s8, vmlsldavaq_s16, vmlsldavaq_s32, vmlsldavaxq_s16, vmlsldavaxq_s32, vmlsldavq_p_s16, vmlsldavq_p_s32, vmlsldavq_s16, vmlsldavq_s32, vmlsldavxq_p_s16, vmlsldavxq_p_s32, vmlsldavxq_s16, vmlsldavxq_s32, vmovlbq_x_s16, vmovlbq_x_s8, vmovlbq_x_u16, vmovlbq_x_u8, vmovltq_x_s16, vmovltq_x_s8, vmovltq_x_u16, vmovltq_x_u8, vmulhq_x_s16, vmulhq_x_s32, vmulhq_x_s8, vmulhq_x_u16, vmulhq_x_u32, vmulhq_x_u8, vmullbq_int_x_s16, vmullbq_int_x_s32, vmullbq_int_x_s8, vmullbq_int_x_u16, vmullbq_int_x_u32, vmullbq_int_x_u8, vmullbq_poly_x_p16, vmullbq_poly_x_p8, vmulltq_int_x_s16, vmulltq_int_x_s32, vmulltq_int_x_s8, vmulltq_int_x_u16, vmulltq_int_x_u32, vmulltq_int_x_u8, vmulltq_poly_x_p16, vmulltq_poly_x_p8, vrmlaldavhaq_s32, vrmlaldavhaq_u32, vrmlaldavhaxq_s32, vrmlaldavhq_p_s32, vrmlaldavhq_p_u32, vrmlaldavhq_s32, vrmlaldavhq_u32, vrmlaldavhxq_p_s32, vrmlaldavhxq_s32, vrmlsldavhaq_s32, vrmlsldavhaxq_s32, vrmlsldavhq_p_s32, vrmlsldavhq_s32, vrmlsldavhxq_p_s32, vrmlsldavhxq_s32, vstrbq_p_s16, vstrbq_p_s32, vstrbq_p_s8, vstrbq_p_u16, vstrbq_p_u32, vstrbq_p_u8, vstrbq_s16, vstrbq_s32, vstrbq_s8, vstrbq_scatter_offset_p_s16, vstrbq_scatter_offset_p_s32, vstrbq_scatter_offset_p_s8, vstrbq_scatter_offset_p_u16, vstrbq_scatter_offset_p_u32, vstrbq_scatter_offset_p_u8, vstrbq_scatter_offset_s16, vstrbq_scatter_offset_s32, vstrbq_scatter_offset_s8, vstrbq_scatter_offset_u16, vstrbq_scatter_offset_u32, vstrbq_scatter_offset_u8, vstrbq_u16, vstrbq_u32, vstrbq_u8, vstrdq_scatter_base_p_s64, vstrdq_scatter_base_p_u64, vstrdq_scatter_base_s64, vstrdq_scatter_base_u64, vstrdq_scatter_offset_p_s64, vstrdq_scatter_offset_p_u64, vstrdq_scatter_offset_s64, vstrdq_scatter_offset_u64, vstrdq_scatter_shifted_offset_p_s64,\nvstrdq_scatter_shifted_offset_p_u64, vstrdq_scatter_shifted_offset_s64,\nvstrdq_scatter_shifted_offset_u64.\n\nThis patch adds the support for MVE ACLE intrinsics polymorphic variants with +mve.fp option.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-31  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm_mve.h (vaddlvq): Move the polymorphic variant to the\n\tcommon section of both MVE Integer and MVE Floating Point.\n\t(vaddvq): Likewise.\n\t(vaddlvq_p): Likewise.\n\t(vaddvaq): Likewise.\n\t(vaddvq_p): Likewise.\n\t(vcmpcsq): Likewise.\n\t(vmlsdavxq): Likewise.\n\t(vmlsdavq): Likewise.\n\t(vmladavxq): Likewise.\n\t(vmladavq): Likewise.\n\t(vminvq): Likewise.\n\t(vminavq): Likewise.\n\t(vmaxvq): Likewise.\n\t(vmaxavq): Likewise.\n\t(vmlaldavq): Likewise.\n\t(vcmphiq): Likewise.\n\t(vaddlvaq): Likewise.\n\t(vrmlaldavhq): Likewise.\n\t(vrmlaldavhxq): Likewise.\n\t(vrmlsldavhq): Likewise.\n\t(vrmlsldavhxq): Likewise.\n\t(vmlsldavxq): Likewise.\n\t(vmlsldavq): Likewise.\n\t(vabavq): Likewise.\n\t(vrmlaldavhaq): Likewise.\n\t(vcmpgeq_m_n): Likewise.\n\t(vmlsdavxq_p): Likewise.\n\t(vmlsdavq_p): Likewise.\n\t(vmlsdavaxq): Likewise.\n\t(vmlsdavaq): Likewise.\n\t(vaddvaq_p): Likewise.\n\t(vcmpcsq_m_n): Likewise.\n\t(vcmpcsq_m): Likewise.\n\t(vmladavxq_p): Likewise.\n\t(vmladavq_p): Likewise.\n\t(vmladavaxq): Likewise.\n\t(vmladavaq): Likewise.\n\t(vminvq_p): Likewise.\n\t(vminavq_p): Likewise.\n\t(vmaxvq_p): Likewise.\n\t(vmaxavq_p): Likewise.\n\t(vcmphiq_m): Likewise.\n\t(vaddlvaq_p): Likewise.\n\t(vmlaldavaq): Likewise.\n\t(vmlaldavaxq): Likewise.\n\t(vmlaldavq_p): Likewise.\n\t(vmlaldavxq_p): Likewise.\n\t(vmlsldavaq): Likewise.\n\t(vmlsldavaxq): Likewise.\n\t(vmlsldavq_p): Likewise.\n\t(vmlsldavxq_p): Likewise.\n\t(vrmlaldavhaxq): Likewise.\n\t(vrmlaldavhq_p): Likewise.\n\t(vrmlaldavhxq_p): Likewise.\n\t(vrmlsldavhaq): Likewise.\n\t(vrmlsldavhaxq): Likewise.\n\t(vrmlsldavhq_p): Likewise.\n\t(vrmlsldavhxq_p): Likewise.\n\t(vabavq_p): Likewise.\n\t(vmladavaq_p): Likewise.\n\t(vstrbq_scatter_offset): Likewise.\n\t(vstrbq_p): Likewise.\n\t(vstrbq_scatter_offset_p): Likewise.\n\t(vstrdq_scatter_base_p): Likewise.\n\t(vstrdq_scatter_base): Likewise.\n\t(vstrdq_scatter_offset_p): Likewise.\n\t(vstrdq_scatter_offset): Likewise.\n\t(vstrdq_scatter_shifted_offset_p): Likewise.\n\t(vstrdq_scatter_shifted_offset): Likewise.\n\t(vmaxq_x): Likewise.\n\t(vminq_x): Likewise.\n\t(vmovlbq_x): Likewise.\n\t(vmovltq_x): Likewise.\n\t(vmulhq_x): Likewise.\n\t(vmullbq_int_x): Likewise.\n\t(vmullbq_poly_x): Likewise.\n\t(vmulltq_int_x): Likewise.\n\t(vmulltq_poly_x): Likewise.\n\t(vstrbq): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-31  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u16.c: Modify.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f32.c: Likewise.", "tree": {"sha": "a55838284bdde2656d749a39076e03471448f447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a55838284bdde2656d749a39076e03471448f447"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e81d0d9ec7a337dd6a649390e1824930dc57847d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e81d0d9ec7a337dd6a649390e1824930dc57847d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e81d0d9ec7a337dd6a649390e1824930dc57847d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e81d0d9ec7a337dd6a649390e1824930dc57847d/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a27c534794dbe3530acae3427d2c58f937f1b050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27c534794dbe3530acae3427d2c58f937f1b050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a27c534794dbe3530acae3427d2c58f937f1b050"}], "stats": {"total": 1669, "additions": 882, "deletions": 787}, "files": [{"sha": "097a222f66d317fbe290c4923964cc889bb0d5d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -1,3 +1,86 @@\n+2020-03-31  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm_mve.h (vaddlvq): Move the polymorphic variant to the\n+\tcommon section of both MVE Integer and MVE Floating Point.\n+\t(vaddvq): Likewise.\n+\t(vaddlvq_p): Likewise.\n+\t(vaddvaq): Likewise.\n+\t(vaddvq_p): Likewise.\n+\t(vcmpcsq): Likewise.\n+\t(vmlsdavxq): Likewise.\n+\t(vmlsdavq): Likewise.\n+\t(vmladavxq): Likewise.\n+\t(vmladavq): Likewise.\n+\t(vminvq): Likewise.\n+\t(vminavq): Likewise.\n+\t(vmaxvq): Likewise.\n+\t(vmaxavq): Likewise.\n+\t(vmlaldavq): Likewise.\n+\t(vcmphiq): Likewise.\n+\t(vaddlvaq): Likewise.\n+\t(vrmlaldavhq): Likewise.\n+\t(vrmlaldavhxq): Likewise.\n+\t(vrmlsldavhq): Likewise.\n+\t(vrmlsldavhxq): Likewise.\n+\t(vmlsldavxq): Likewise.\n+\t(vmlsldavq): Likewise.\n+\t(vabavq): Likewise.\n+\t(vrmlaldavhaq): Likewise.\n+\t(vcmpgeq_m_n): Likewise.\n+\t(vmlsdavxq_p): Likewise.\n+\t(vmlsdavq_p): Likewise.\n+\t(vmlsdavaxq): Likewise.\n+\t(vmlsdavaq): Likewise.\n+\t(vaddvaq_p): Likewise.\n+\t(vcmpcsq_m_n): Likewise.\n+\t(vcmpcsq_m): Likewise.\n+\t(vmladavxq_p): Likewise.\n+\t(vmladavq_p): Likewise.\n+\t(vmladavaxq): Likewise.\n+\t(vmladavaq): Likewise.\n+\t(vminvq_p): Likewise.\n+\t(vminavq_p): Likewise.\n+\t(vmaxvq_p): Likewise.\n+\t(vmaxavq_p): Likewise.\n+\t(vcmphiq_m): Likewise.\n+\t(vaddlvaq_p): Likewise.\n+\t(vmlaldavaq): Likewise.\n+\t(vmlaldavaxq): Likewise.\n+\t(vmlaldavq_p): Likewise.\n+\t(vmlaldavxq_p): Likewise.\n+\t(vmlsldavaq): Likewise.\n+\t(vmlsldavaxq): Likewise.\n+\t(vmlsldavq_p): Likewise.\n+\t(vmlsldavxq_p): Likewise.\n+\t(vrmlaldavhaxq): Likewise.\n+\t(vrmlaldavhq_p): Likewise.\n+\t(vrmlaldavhxq_p): Likewise.\n+\t(vrmlsldavhaq): Likewise.\n+\t(vrmlsldavhaxq): Likewise.\n+\t(vrmlsldavhq_p): Likewise.\n+\t(vrmlsldavhxq_p): Likewise.\n+\t(vabavq_p): Likewise.\n+\t(vmladavaq_p): Likewise.\n+\t(vstrbq_scatter_offset): Likewise.\n+\t(vstrbq_p): Likewise.\n+\t(vstrbq_scatter_offset_p): Likewise.\n+\t(vstrdq_scatter_base_p): Likewise.\n+\t(vstrdq_scatter_base): Likewise.\n+\t(vstrdq_scatter_offset_p): Likewise.\n+\t(vstrdq_scatter_offset): Likewise.\n+\t(vstrdq_scatter_shifted_offset_p): Likewise.\n+\t(vstrdq_scatter_shifted_offset): Likewise.\n+\t(vmaxq_x): Likewise.\n+\t(vminq_x): Likewise.\n+\t(vmovlbq_x): Likewise.\n+\t(vmovltq_x): Likewise.\n+\t(vmulhq_x): Likewise.\n+\t(vmullbq_int_x): Likewise.\n+\t(vmullbq_poly_x): Likewise.\n+\t(vmulltq_int_x): Likewise.\n+\t(vmulltq_poly_x): Likewise.\n+\t(vstrbq): Likewise.\n+\n 2020-03-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94368"}, {"sha": "03ce0dd7e67bdacb74dcf1855c61075e078efe1b", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 752, "deletions": 765, "changes": 1517, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d"}, {"sha": "b6b87d2b3f1027ff5e219c5e0ccefbe5363bde75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -1,3 +1,28 @@\n+2020-03-31  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u16.c: Modify.\n+\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f32.c: Likewise.\n+\n 2020-03-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94368"}, {"sha": "a1640133012ae11ccd7766e694e0c242a96cb3ab", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u16.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -16,7 +16,7 @@ foo (uint16x8_t a, uint16_t b, mve_pred16_t p)\n mve_pred16_t\n foo1 (uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n-  return vcmpcsq_m_n (a, b, p);\n+  return vcmpcsq_m (a, b, p);\n }\n \n /* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d269ec7e3ab56eaea9e690010705b683b177e02e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u32.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -16,7 +16,7 @@ foo (uint32x4_t a, uint32_t b, mve_pred16_t p)\n mve_pred16_t\n foo1 (uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n-  return vcmpcsq_m_n (a, b, p);\n+  return vcmpcsq_m (a, b, p);\n }\n \n /* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "52c16b3e70f3bc36543fb9e34462fea9d11528a2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u8.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -16,7 +16,7 @@ foo (uint8x16_t a, uint8_t b, mve_pred16_t p)\n mve_pred16_t\n foo1 (uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n-  return vcmpcsq_m_n (a, b, p);\n+  return vcmpcsq_m (a, b, p);\n }\n \n /* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "f97209d2322200e73119b981515fa2821ac819d7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f16.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -15,7 +15,7 @@ foo (float16x8_t a, float16_t b)\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b)\n {\n-  return vcmpeqq_n (a, b);\n+  return vcmpeqq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "c80843288b2a36240bfd378091f1de524133e4b8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f32.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -15,7 +15,7 @@ foo (float32x4_t a, float32_t b)\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b)\n {\n-  return vcmpeqq_n (a, b);\n+  return vcmpeqq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}, {"sha": "c0ad38f6c6f9a9766e454748df11f6f78ddb78dc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s16.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -16,7 +16,7 @@ foo (int16x8_t a, int16_t b, mve_pred16_t p)\n mve_pred16_t\n foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n {\n-  return vcmpgeq_m_n (a, b, p);\n+  return vcmpgeq_m (a, b, p);\n }\n \n /* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "8974ce4d11ae38d3b2e1927e34b8621807511767", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s32.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -16,7 +16,7 @@ foo (int32x4_t a, int32_t b, mve_pred16_t p)\n mve_pred16_t\n foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n {\n-  return vcmpgeq_m_n (a, b, p);\n+  return vcmpgeq_m (a, b, p);\n }\n \n /* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "981aa1b516c0ddbbf1f2e6f8b0f7d1bed8fe4740", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s8.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -16,7 +16,7 @@ foo (int8x16_t a, int8_t b, mve_pred16_t p)\n mve_pred16_t\n foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n {\n-  return vcmpgeq_m_n (a, b, p);\n+  return vcmpgeq_m (a, b, p);\n }\n \n /* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "80c86f65825b0147af859a1337e62c8cf660ef5b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f16.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -16,7 +16,7 @@ foo (float16x8_t a, float16_t b, mve_pred16_t p)\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n-  return vcmpgtq_m_n (a, b, p);\n+  return vcmpgtq_m (a, b, p);\n }\n \n /* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "9b7aaadfe71b2ceee33db3626cd50c9e1c01486c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f32.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -16,7 +16,7 @@ foo (float32x4_t a, float32_t b, mve_pred16_t p)\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n-  return vcmpgtq_m_n (a, b, p);\n+  return vcmpgtq_m (a, b, p);\n }\n \n /* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "98e152cd9991414963bec235a6bfe525c9f52027", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_n_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f16.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -15,7 +15,7 @@ foo (float16x8_t a, float16_t b)\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b)\n {\n-  return vcmpgtq_n (a, b);\n+  return vcmpgtq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "5691e2f9d355ee56b0af350a282481f990884f27", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_n_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f32.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -15,7 +15,7 @@ foo (float32x4_t a, float32_t b)\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b)\n {\n-  return vcmpgtq_n (a, b);\n+  return vcmpgtq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}, {"sha": "42049fd57a41c7a4adeaaff4a9973a6af7ad33ca", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f16.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -16,7 +16,7 @@ foo (float16x8_t a, float16_t b, mve_pred16_t p)\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n-  return vcmpleq_m_n (a, b, p);\n+  return vcmpleq_m (a, b, p);\n }\n \n /* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c68bd4e59001be711012b57a0240af7c5473ddbd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f32.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -16,7 +16,7 @@ foo (float32x4_t a, float32_t b, mve_pred16_t p)\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n-  return vcmpleq_m_n (a, b, p);\n+  return vcmpleq_m (a, b, p);\n }\n \n /* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "3fa3c5e0310b7ccecb7bfeca54bc3c153d88c2f0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_n_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f16.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -15,7 +15,7 @@ foo (float16x8_t a, float16_t b)\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b)\n {\n-  return vcmpleq_n (a, b);\n+  return vcmpleq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "8349de7b68cd07bcbb553e97714648f1f2487524", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_n_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f32.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -15,7 +15,7 @@ foo (float32x4_t a, float32_t b)\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b)\n {\n-  return vcmpleq_n (a, b);\n+  return vcmpleq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}, {"sha": "45d0f51b4d7744869630cf5db9df8f5f023517a6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f16.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -16,7 +16,7 @@ foo (float16x8_t a, float16_t b, mve_pred16_t p)\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n-  return vcmpltq_m_n (a, b, p);\n+  return vcmpltq_m (a, b, p);\n }\n \n /* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "16e37ccaf8d4ad8e11cea3bdae5133bd753a79e5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f32.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -16,7 +16,7 @@ foo (float32x4_t a, float32_t b, mve_pred16_t p)\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n-  return vcmpltq_m_n (a, b, p);\n+  return vcmpltq_m (a, b, p);\n }\n \n /* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c127b3a68f6acc97ba8565ca1565ae3f3791c412", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f16.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -16,7 +16,7 @@ foo (float16x8_t a, float16_t b, mve_pred16_t p)\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n-  return vcmpneq_m_n (a, b, p);\n+  return vcmpneq_m (a, b, p);\n }\n \n /* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a8423d45708d756304ab8c08960373b8ece33ae7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f32.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -16,7 +16,7 @@ foo (float32x4_t a, float32_t b, mve_pred16_t p)\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n-  return vcmpneq_m_n (a, b, p);\n+  return vcmpneq_m (a, b, p);\n }\n \n /* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e9e2a9c7b045e765c9ac861a812050fd5276622b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f16.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -15,7 +15,7 @@ foo (float16x8_t a, float16_t b)\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b)\n {\n-  return vcmpneq_n (a, b);\n+  return vcmpneq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "eb64b17969c893736a444bb82b65126319d8adc7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81d0d9ec7a337dd6a649390e1824930dc57847d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f32.c?ref=e81d0d9ec7a337dd6a649390e1824930dc57847d", "patch": "@@ -15,7 +15,7 @@ foo (float32x4_t a, float32_t b)\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b)\n {\n-  return vcmpneq_n (a, b);\n+  return vcmpneq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}]}