{"sha": "a82c7f05c44811b1824b928b7987596b366b4cae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgyYzdmMDVjNDQ4MTFiMTgyNGI5MjhiNzk4NzU5NmIzNjZiNGNhZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-28T02:18:27Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-28T02:18:27Z"}, "message": "alpha-protos.h (alpha_arg_info_reg_val): Protect with RTX_CODE.\n\n        * config/alpha/alpha-protos.h (alpha_arg_info_reg_val): Protect\n        with RTX_CODE.\n        (alpha_write_linkage): Protect with BUFSIZ.\n        (alpha_need_linkage): Update prototype.\n        * config/alpha/alpha.c (function_arg): Move VMS code here.\n        (alpha_links_base): Remove.\n        (alpha_links): New.\n        (mark_alpha_links_node, mark_alpha_links): New.\n        (alpha_write_one_linkage): New.\n        (alpha_need_linkage): Use a splay tree.  Build the linkage symbol.\n        (alpha_write_linkage): Use splay_tree_foreach.\n        * config/alpha/alpha.md (call_vms): Use alpha_need_linkage\n        to get the linkage symbol.\n        (call_value_vms): Likewise.\n        * config/alpha/elf.h (output_file_directive): Remove decl.\n        (ctors_section, dtors_section): Prototype.\n        (sbss_section, sdata_section): Prototype.\n        * config/alpha/vms.h (FUNCTION_ARG): Remove.\n        (readonly_section, link_section, literals_section): Prototype.\n        (ctors_section, dtors_section): Prototype.\n        (vms_valid_decl_attribute_p): Remove decl.\n        (alpha_arg_type, alpha_arg_info_reg_val): Likewise.\n\nFrom-SVN: r34220", "tree": {"sha": "55bf05435d84dcecce47066c63b078ceac49608c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55bf05435d84dcecce47066c63b078ceac49608c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a82c7f05c44811b1824b928b7987596b366b4cae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a82c7f05c44811b1824b928b7987596b366b4cae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a82c7f05c44811b1824b928b7987596b366b4cae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a82c7f05c44811b1824b928b7987596b366b4cae/comments", "author": null, "committer": null, "parents": [{"sha": "d80eb1e1673b2bf7d7f54b11598dc715ef429f82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80eb1e1673b2bf7d7f54b11598dc715ef429f82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d80eb1e1673b2bf7d7f54b11598dc715ef429f82"}], "stats": {"total": 278, "additions": 146, "deletions": 132}, "files": [{"sha": "842b5ae1ef4d9927d8253a3c2fc561a357fcc0df", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a82c7f05c44811b1824b928b7987596b366b4cae/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a82c7f05c44811b1824b928b7987596b366b4cae/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=a82c7f05c44811b1824b928b7987596b366b4cae", "patch": "@@ -109,11 +109,17 @@ extern int check_float_value PARAMS ((enum machine_mode,\n #ifdef HAVE_MACHINE_MODES\n extern enum avms_arg_type alpha_arg_type PARAMS ((enum machine_mode));\n #endif\n+#ifdef RTX_CODE\n extern rtx alpha_arg_info_reg_val PARAMS ((CUMULATIVE_ARGS));\n+#endif\n+#ifdef BUFSIZ\n extern void alpha_write_linkage PARAMS ((FILE *));\n+#endif\n #endif /* OPEN_VMS */\n \n-extern void alpha_need_linkage PARAMS ((const char *, int));\n+#ifdef RTX_CODE\n+extern rtx alpha_need_linkage PARAMS ((const char *, int));\n+#endif\n \n #ifdef TREE_CODE\n extern tree alpha_build_va_list PARAMS ((void));"}, {"sha": "ed708788d7c37303ef60107b4d2e7147808eff8a", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 126, "deletions": 59, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a82c7f05c44811b1824b928b7987596b366b4cae/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a82c7f05c44811b1824b928b7987596b366b4cae/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=a82c7f05c44811b1824b928b7987596b366b4cae", "patch": "@@ -3722,9 +3722,12 @@ function_arg (cum, mode, type, named)\n      int named ATTRIBUTE_UNUSED;\n {\n   int basereg;\n+  int num_args;\n \n+#ifndef OPEN_VMS\n   if (cum >= 6)\n     return NULL_RTX;\n+  num_args = cum;\n \n   /* VOID is passed as a special flag for \"last argument\".  */\n   if (type == void_type_node)\n@@ -3733,14 +3736,22 @@ function_arg (cum, mode, type, named)\n     return NULL_RTX;\n   else if (FUNCTION_ARG_PASS_BY_REFERENCE (cum, mode, type, named))\n     basereg = 16;\n+#else\n+  if (mode == VOIDmode)\n+    return alpha_arg_info_reg_val (cum);\n+\n+  num_args = cum.num_args;\n+  if (num_args >= 6 || MUST_PASS_IN_STACK (mode, type))\n+    return NULL_RTX;\n+#endif /* OPEN_VMS */\n   else if (TARGET_FPREGS\n \t   && (GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT\n \t       || GET_MODE_CLASS (mode) == MODE_FLOAT))\n     basereg = 32 + 16;\n   else\n     basereg = 16;\n \n-  return gen_rtx_REG (mode, cum + basereg);\n+  return gen_rtx_REG (mode, num_args + basereg);\n }\n \n tree\n@@ -5866,109 +5877,165 @@ alpha_arg_info_reg_val (cum)\n   return GEN_INT (regval);\n }\n \f\n+#include <splay-tree.h>\n+\n /* Structure to collect function names for final output\n    in link section.  */\n \n enum links_kind {KIND_UNUSED, KIND_LOCAL, KIND_EXTERN};\n \n-\n-struct alpha_links {\n-  struct alpha_links *next;\n-  char *name;\n+struct alpha_links\n+{\n+  rtx linkage;\n   enum links_kind kind;\n };\n \n-static struct alpha_links *alpha_links_base = 0;\n+static splay_tree alpha_links;\n+\n+static int mark_alpha_links_node\tPARAMS ((splay_tree_node, void *));\n+static void mark_alpha_links\t\tPARAMS ((void *));\n+static int alpha_write_one_linkage\tPARAMS ((splay_tree_node, void *));\n+\n+/* Protect alpha_links from garbage collection.  */\n+\n+static int\n+mark_alpha_links_node (node, data)\n+     splay_tree_node node;\n+     void *data ATTRIBUTE_UNUSED;\n+{\n+  struct alpha_links *links = (struct alpha_links *) node->value;\n+  ggc_mark_rtx (links->linkage);\n+  return 0;\n+}\n+\n+static void\n+mark_alpha_links (ptr)\n+     void *ptr;\n+{\n+  splay_tree tree = *(splay_tree *) ptr;\n+  splay_tree_foreach (tree, mark_alpha_links_node, NULL);\n+}\n \n /* Make (or fake) .linkage entry for function call.\n \n-   IS_LOCAL is 0 if name is used in call, 1 if name is used in definition.  */\n+   IS_LOCAL is 0 if name is used in call, 1 if name is used in definition.\n \n-void\n+   Return an SYMBOL_REF rtx for the linkage.  */\n+\n+rtx\n alpha_need_linkage (name, is_local)\n     const char *name;\n     int is_local;\n {\n-  rtx x;\n-  struct alpha_links *lptr, *nptr;\n+  splay_tree_node node;\n+  struct alpha_links *al;\n \n   if (name[0] == '*')\n     name++;\n \n-  /* Is this name already defined ?  */\n+  if (alpha_links)\n+    {\n+      /* Is this name already defined?  */\n \n-  for (lptr = alpha_links_base; lptr; lptr = lptr->next)\n-    if (strcmp (lptr->name, name) == 0)\n-      {\n-\tif (is_local)\n-\t  {\n-\t    /* Defined here but external assumed.  */\n-\t    if (lptr->kind == KIND_EXTERN)\n-\t      lptr->kind = KIND_LOCAL;\n-\t  }\n-\telse\n-\t  {\n-\t    /* Used here but unused assumed.  */\n-\t    if (lptr->kind == KIND_UNUSED)\n-\t      lptr->kind = KIND_LOCAL;\n-\t  }\n-\treturn;\n-      }\n+      node = splay_tree_lookup (alpha_links, (splay_tree_key) name);\n+      if (node)\n+\t{\n+\t  al = (struct alpha_links *) node->value;\n+\t  if (is_local)\n+\t    {\n+\t      /* Defined here but external assumed.  */\n+\t      if (al->kind == KIND_EXTERN)\n+\t\tal->kind = KIND_LOCAL;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Used here but unused assumed.  */\n+\t      if (al->kind == KIND_UNUSED)\n+\t\tal->kind = KIND_LOCAL;\n+\t    }\n+\t  return al->linkage;\n+\t}\n+    }\n+  else\n+    {\n+      alpha_links = splay_tree_new ((splay_tree_compare_fn) strcmp, \n+\t\t\t\t    (splay_tree_delete_key_fn) free,\n+\t\t\t\t    (splay_tree_delete_key_fn) free);\n+      ggc_add_root (&alpha_links, 1, 1, mark_alpha_links);\n+    }\n \n-  nptr = (struct alpha_links *) xmalloc (sizeof (struct alpha_links));\n-  nptr->next = alpha_links_base;\n-  nptr->name = xstrdup (name);\n+  al = (struct alpha_links *) xmalloc (sizeof (struct alpha_links));\n+  name = xstrdup (name);\n \n   /* Assume external if no definition.  */\n-  nptr->kind = (is_local ? KIND_UNUSED : KIND_EXTERN);\n+  al->kind = (is_local ? KIND_UNUSED : KIND_EXTERN);\n \n-  /* Ensure we have an IDENTIFIER so assemble_name can mark is used.  */\n+  /* Ensure we have an IDENTIFIER so assemble_name can mark it used.  */\n   get_identifier (name);\n \n-  alpha_links_base = nptr;\n+  /* Construct a SYMBOL_REF for us to call.  */\n+  {\n+    size_t name_len = strlen (name);\n+    char *linksym = ggc_alloc_string (NULL, name_len + 6);\n+\n+    linksym[0] = '$';\n+    memcpy (linksym + 1, name, name_len);\n+    memcpy (linksym + 1 + name_len, \"..lk\", 5);\n+    al->linkage = gen_rtx_SYMBOL_REF (Pmode, linksym);\n+  }\n+\n+  splay_tree_insert (alpha_links, (splay_tree_key) name,\n+\t\t     (splay_tree_value) al);\n \n-  return;\n+  return al->linkage;\n }\n \n+static int\n+alpha_write_one_linkage (node, data)\n+     splay_tree_node node;\n+     void *data;\n+{\n+  const char *name = (const char *) node->key;\n+  struct alpha_links *links = (struct alpha_links *) node->value;\n+  FILE *stream = (FILE *) data;\n+\n+  if (links->kind == KIND_UNUSED\n+      || ! TREE_SYMBOL_REFERENCED (get_identifier (name)))\n+    return 0;\n+\n+  fprintf (stream, \"$%s..lk:\\n\", name);\n+  if (links->kind == KIND_LOCAL)\n+    {\n+      /* Local and used, build linkage pair.  */\n+      fprintf (stream, \"\\t.quad %s..en\\n\", name);\n+      fprintf (stream, \"\\t.quad %s\\n\", name);\n+    }\n+  else\n+    {\n+      /* External and used, request linkage pair.  */\n+      fprintf (stream, \"\\t.linkage %s\\n\", name);\n+    }\n+\n+  return 0;\n+}\n \n void\n alpha_write_linkage (stream)\n     FILE *stream;\n {\n-  struct alpha_links *lptr, *nptr;\n-\n   readonly_section ();\n-\n   fprintf (stream, \"\\t.align 3\\n\");\n-\n-  for (lptr = alpha_links_base; lptr; lptr = nptr)\n-    {\n-      nptr = lptr->next;\n-\n-      if (lptr->kind == KIND_UNUSED\n-\t  || ! TREE_SYMBOL_REFERENCED (get_identifier (lptr->name)))\n-\tcontinue;\n-\n-      fprintf (stream, \"$%s..lk:\\n\", lptr->name);\n-      if (lptr->kind == KIND_LOCAL)   \n-\t{\n-\t  /*  Local and used, build linkage pair.  */\n-\t  fprintf (stream, \"\\t.quad %s..en\\n\", lptr->name);\n-\t  fprintf (stream, \"\\t.quad %s\\n\", lptr->name);\n-\t}\n-      else\n-\t/* External and used, request linkage pair.  */\n-\tfprintf (stream, \"\\t.linkage %s\\n\", lptr->name);\n-    }\n+  splay_tree_foreach (alpha_links, alpha_write_one_linkage, stream);\n }\n \n #else\n \n-void\n+rtx\n alpha_need_linkage (name, is_local)\n      const char *name ATTRIBUTE_UNUSED;\n      int is_local ATTRIBUTE_UNUSED;\n {\n+  return NULL_RTX;\n }\n \n #endif /* OPEN_VMS */"}, {"sha": "dfef1506b0834af6cd1c10ca08b6c3fd7e2cf99d", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a82c7f05c44811b1824b928b7987596b366b4cae/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a82c7f05c44811b1824b928b7987596b366b4cae/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=a82c7f05c44811b1824b928b7987596b366b4cae", "patch": "@@ -3914,32 +3914,16 @@\n   emit_move_insn (gen_rtx_REG (DImode, 25), operands[1]);\n   if (GET_CODE (operands[0]) == SYMBOL_REF)\n     {\n-      extern char *savealloc ();\n-      const char *symbol = XSTR (operands[0], 0);\n-      char *linksym;\n-      rtx linkage;\n-\n-      if (*symbol == '*')\n-\tsymbol++;\n-      linksym = savealloc (strlen (symbol) + 6);\n-\n-      alpha_need_linkage (symbol, 0);\n-\n-      linksym[0] = '$';\n-      strcpy (linksym+1, symbol);\n-      strcat (linksym, \\\"..lk\\\");\n-      linkage = gen_rtx_SYMBOL_REF (Pmode, linksym);\n+      rtx linkage = alpha_need_linkage (XSTR (operands[0], 0), 0);\n \n       emit_move_insn (gen_rtx_REG (Pmode, 26), gen_rtx_MEM (Pmode, linkage));\n-\n       operands[2]\n \t= validize_mem (gen_rtx_MEM (Pmode, plus_constant (linkage, 8)));\n     }\n   else\n     {\n       emit_move_insn (gen_rtx_REG (Pmode, 26),\n \t\t      gen_rtx_MEM (Pmode, plus_constant (operands[0], 8)));\n-\n       operands[2] = operands[0];\n     }\n \n@@ -4035,31 +4019,16 @@\n   emit_move_insn (gen_rtx_REG (DImode, 25), operands[2]);\n   if (GET_CODE (operands[1]) == SYMBOL_REF)\n     {\n-      extern char *savealloc ();\n-      const char *symbol = XSTR (operands[1], 0);\n-      char *linksym;\n-      rtx linkage;\n-\n-      if (*symbol == '*')\n-\tsymbol++;\n-      linksym = savealloc (strlen (symbol) + 6);\n-\n-      alpha_need_linkage (symbol, 0);\n-      linksym[0] = '$';\n-      strcpy (linksym+1, symbol);\n-      strcat (linksym, \\\"..lk\\\");\n-      linkage = gen_rtx_SYMBOL_REF (Pmode, linksym);\n+      rtx linkage = alpha_need_linkage (XSTR (operands[1], 0), 0);\n \n       emit_move_insn (gen_rtx_REG (Pmode, 26), gen_rtx_MEM (Pmode, linkage));\n-\n       operands[3]\n \t= validize_mem (gen_rtx_MEM (Pmode, plus_constant (linkage, 8)));\n     }\n   else\n     {\n       emit_move_insn (gen_rtx_REG (Pmode, 26),\n \t\t      gen_rtx_MEM (Pmode, plus_constant (operands[1], 8)));\n-\n       operands[3] = operands[1];\n     }\n }\")"}, {"sha": "296359796f40bec67c002d45cb79417418479a0b", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a82c7f05c44811b1824b928b7987596b366b4cae/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a82c7f05c44811b1824b928b7987596b366b4cae/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=a82c7f05c44811b1824b928b7987596b366b4cae", "patch": "@@ -66,8 +66,6 @@ do {\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n } while (0)\n \n-extern void output_file_directive ();\n-\n /* Attach a special .ident directive to the end of the file to identify\n    the version of GCC which compiled this code.  The format of the\n    .ident string is patterned after the ones produced by native svr4\n@@ -265,6 +263,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n   SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP)\t\\\n   SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP)\n \n+extern void ctors_section\t\tPARAMS ((void));\n+extern void dtors_section\t\tPARAMS ((void));\n+extern void sbss_section\t\tPARAMS ((void));\n+extern void sdata_section\t\tPARAMS ((void));\n+\n #undef READONLY_DATA_SECTION\n #define READONLY_DATA_SECTION() const_section ()\n \n@@ -282,7 +285,6 @@ const_section ()\t\t\t\t\t\t\\\n }\n \n #define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)\t\\\n-void FN PARAMS ((void));\t\t\t\t\\\n void FN ()\t\t\t\t\t\\\n {\t\t\t\t\t\t\\\n   if (in_section != ENUM)\t\t\t\\"}, {"sha": "923cb2bd48aa426d0a08dc7e640b82967eb32e62", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a82c7f05c44811b1824b928b7987596b366b4cae/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a82c7f05c44811b1824b928b7987596b366b4cae/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=a82c7f05c44811b1824b928b7987596b366b4cae", "patch": "@@ -155,41 +155,6 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n   (CUM).atypes[0] = (CUM).atypes[1] = (CUM).atypes[2] = I64;\t\\\n   (CUM).atypes[3] = (CUM).atypes[4] = (CUM).atypes[5] = I64;\n \n-/* Update the data in CUM to advance over an argument\n-   of mode MODE and data type TYPE.\n-   (TYPE is null for libcalls where that information may not be available.)  */\n-\n-extern enum avms_arg_type alpha_arg_type ();\n-\n-/* Determine where to put an argument to a function.\n-   Value is zero to push the argument on the stack,\n-   or a hard register in which to store the argument.\n-\n-   MODE is the argument's machine mode (or VOIDmode for no more args).\n-   TYPE is the data type of the argument (as a tree).\n-    This is null for libcalls where that information may\n-    not be available.\n-   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n-    the preceding args and about the function being called.\n-   NAMED is nonzero if this argument is a named parameter\n-    (otherwise it is an extra parameter matching an ellipsis).\n-\n-   On Alpha the first 6 words of args are normally in registers\n-   and the rest are pushed.  */\n-\n-extern struct rtx_def *alpha_arg_info_reg_val ();\n-#undef FUNCTION_ARG\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED)\t\\\n-((MODE) == VOIDmode ? alpha_arg_info_reg_val (CUM)\t\t\\\n- : ((CUM.num_args) < 6 && ! MUST_PASS_IN_STACK (MODE, TYPE)\t\\\n-    ? gen_rtx_REG ((MODE),\t\t\t\t\t\\\n-\t\t   ((CUM).num_args + 16\t\t\t\t\\\n-\t\t    + ((TARGET_FPREGS\t\t\t\t\\\n-\t\t\t&& (GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT \\\n-\t\t\t    || GET_MODE_CLASS (MODE) == MODE_FLOAT)) \\\n-\t\t       * 32)))\t\t\t\\\n-    : 0))\n-\n #undef FUNCTION_ARG_ADVANCE\n #define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\t\t\\\n   if (MUST_PASS_IN_STACK (MODE, TYPE))\t\t\t\t\t\\\n@@ -333,6 +298,12 @@ dtors_section ()\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n \n+extern void readonly_section\tPARAMS ((void));\n+extern void link_section\tPARAMS ((void));\n+extern void literals_section\tPARAMS ((void));\n+extern void ctors_section\tPARAMS ((void));\n+extern void dtors_section\tPARAMS ((void));\n+\n #undef ASM_OUTPUT_ADDR_DIFF_ELT\n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) abort ()\n \n@@ -419,7 +390,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, NAME, ARGS) \\\n   (vms_valid_decl_attribute_p (DECL, ATTRIBUTES, NAME, ARGS))\n-extern int vms_valid_decl_attribute_p ();\n \n #undef SDB_DEBUGGING_INFO\n #undef MIPS_DEBUGGING_INFO"}]}