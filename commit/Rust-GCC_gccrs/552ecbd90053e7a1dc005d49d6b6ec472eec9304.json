{"sha": "552ecbd90053e7a1dc005d49d6b6ec472eec9304", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUyZWNiZDkwMDUzZTdhMWRjMDA1ZDQ5ZDZiNmVjNDcyZWVjOTMwNA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2001-06-21T19:37:35Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2001-06-21T19:37:35Z"}, "message": "handle interrupt_handler correctly\n\nFrom-SVN: r43490", "tree": {"sha": "008cdc020db133e80e4f9888a71d25d1b9a8ef12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/008cdc020db133e80e4f9888a71d25d1b9a8ef12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/552ecbd90053e7a1dc005d49d6b6ec472eec9304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552ecbd90053e7a1dc005d49d6b6ec472eec9304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/552ecbd90053e7a1dc005d49d6b6ec472eec9304", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552ecbd90053e7a1dc005d49d6b6ec472eec9304/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5005dee96e83706307df9b24086e6ebb01832479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5005dee96e83706307df9b24086e6ebb01832479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5005dee96e83706307df9b24086e6ebb01832479"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "3b33ab651adc6eba8733040455ae87bc7a354c16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552ecbd90053e7a1dc005d49d6b6ec472eec9304/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552ecbd90053e7a1dc005d49d6b6ec472eec9304/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=552ecbd90053e7a1dc005d49d6b6ec472eec9304", "patch": "@@ -1,3 +1,15 @@\n+2001-06-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* config/sh/sh.md (interrupt_function): Use\n+\tcurrent_function_interrupt.\n+\t(define_delay): Schedule in delay slot if TARGET_SH3, even if it is\n+\tan interrupt function.\n+\n+\t* config/sh/sh.h (current_function_interrupt): Define extern.\n+\n+\t* config/sh/sh.c (current_function_interrupt): New global.\n+\t(sh_expand_prologue): Set current_function_interrupt.\n+\n 2001-06-21  Phil Edwards  <pme@sources.redhat.com>\n \n \t* doc/install.texi:  Add 'c' to list of --enable-languages choices."}, {"sha": "103a52434d609314eff289d0790f731ee6051db2", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552ecbd90053e7a1dc005d49d6b6ec472eec9304/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552ecbd90053e7a1dc005d49d6b6ec472eec9304/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=552ecbd90053e7a1dc005d49d6b6ec472eec9304", "patch": "@@ -43,6 +43,9 @@ int code_for_indirect_jump_scratch = CODE_FOR_indirect_jump_scratch;\n #define MSW (TARGET_LITTLE_ENDIAN ? 1 : 0)\n #define LSW (TARGET_LITTLE_ENDIAN ? 0 : 1)\n \n+/* Set to 1 by expand_prologue() when the function is an interrupt handler.  */\n+int current_function_interrupt;\n+\n /* ??? The pragma interrupt support will not work for SH3.  */\n /* This is set by #pragma interrupt and #pragma trapa, and causes gcc to\n    output code for the next function appropriate for an interrupt handler.  */\n@@ -4009,6 +4012,11 @@ sh_expand_prologue ()\n   int live_regs_mask2;\n   int save_flags = target_flags;\n \n+  current_function_interrupt\n+    = lookup_attribute (\"interrupt_handler\",\n+\t\t\tDECL_MACHINE_ATTRIBUTES (current_function_decl))\n+    != NULL_TREE;\n+\n   /* We have pretend args if we had an object sent partially in registers\n      and partially on the stack, e.g. a large structure.  */\n   output_stack_adjust (-current_function_pretend_args_size,"}, {"sha": "2e9f76e1fee0d2b7875bf3a2e640def333921db2", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552ecbd90053e7a1dc005d49d6b6ec472eec9304/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552ecbd90053e7a1dc005d49d6b6ec472eec9304/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=552ecbd90053e7a1dc005d49d6b6ec472eec9304", "patch": "@@ -2299,6 +2299,10 @@ extern enum mdep_reorg_phase_e mdep_reorg_phase;\n \n extern int pragma_interrupt;\n \n+/* Set when processing a function with interrupt attribute.  */\n+\n+extern int current_function_interrupt;\n+\n /* Set to an RTX containing the address of the stack to switch to\n    for interrupt functions.  */\n extern struct rtx_def *sp_switch;"}, {"sha": "eb3c88b0c613d7c203a5950a1ee86165fe043f3b", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552ecbd90053e7a1dc005d49d6b6ec472eec9304/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552ecbd90053e7a1dc005d49d6b6ec472eec9304/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=552ecbd90053e7a1dc005d49d6b6ec472eec9304", "patch": "@@ -547,7 +547,7 @@\n \t      (const_string \"yes\")))\n \n (define_attr \"interrupt_function\" \"no,yes\"\n-  (const (symbol_ref \"pragma_interrupt\")))\n+  (const (symbol_ref \"current_function_interrupt\")))\n \n (define_attr \"in_delay_slot\" \"yes,no\"\n   (cond [(eq_attr \"type\" \"cbranch\") (const_string \"no\")\n@@ -577,7 +577,9 @@\n \t(ior (and (eq_attr \"interrupt_function\" \"no\")\n \t\t  (eq_attr \"type\" \"!pload,prset\"))\n \t     (and (eq_attr \"interrupt_function\" \"yes\")\n-\t\t  (eq_attr \"hit_stack\" \"no\")))) (nil) (nil)])\n+\t\t  (ior\n+\t\t   (ne (symbol_ref \"TARGET_SH3\") (const_int 0))\n+\t\t   (eq_attr \"hit_stack\" \"no\"))))) (nil) (nil)])\n \n ;; Since a call implicitly uses the PR register, we can't allow\n ;; a PR register store in a jsr delay slot."}]}