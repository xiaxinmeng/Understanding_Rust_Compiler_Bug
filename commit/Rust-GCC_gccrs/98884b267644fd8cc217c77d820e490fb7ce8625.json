{"sha": "98884b267644fd8cc217c77d820e490fb7ce8625", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg4ODRiMjY3NjQ0ZmQ4Y2MyMTdjNzdkODIwZTQ5MGZiN2NlODYyNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-01-31T20:14:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-01-31T20:14:37Z"}, "message": "Allow attributes in parms and casts.\n\n        * parse.y (named_parm): Don't strip attrs.\n        (declmods): Remove 'attributes' production.\n        (nonempty_cv_qualifiers): Accept attributes.\n        (ATTRIBUTE): Give precedence.\n        * decl.c (groktypename): Handle attributes.\n        (grokparms): Likewise.\n\nFrom-SVN: r49373", "tree": {"sha": "d4bc7347ee9719ff88f712317354a13d6e635f2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4bc7347ee9719ff88f712317354a13d6e635f2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98884b267644fd8cc217c77d820e490fb7ce8625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98884b267644fd8cc217c77d820e490fb7ce8625", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98884b267644fd8cc217c77d820e490fb7ce8625", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98884b267644fd8cc217c77d820e490fb7ce8625/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8512bbd75204223137ec839744ac3a1b8f4a0a90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8512bbd75204223137ec839744ac3a1b8f4a0a90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8512bbd75204223137ec839744ac3a1b8f4a0a90"}], "stats": {"total": 79, "additions": 58, "deletions": 21}, "files": [{"sha": "f259c96e13aaa6dc6c71347e1a343cfca41f3548", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98884b267644fd8cc217c77d820e490fb7ce8625/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98884b267644fd8cc217c77d820e490fb7ce8625/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=98884b267644fd8cc217c77d820e490fb7ce8625", "patch": "@@ -1,3 +1,13 @@\n+2002-01-31  Jason Merrill  <jason@redhat.com>\n+\n+\tAllow attributes in parms and casts.\n+\t* parse.y (named_parm): Don't strip attrs.\n+\t(declmods): Remove 'attributes' production.\n+\t(nonempty_cv_qualifiers): Accept attributes.\n+\t(ATTRIBUTE): Give precedence.\n+\t* decl.c (groktypename): Handle attributes.\n+\t(grokparms): Likewise.\n+\n 2002-01-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* decl2.c (cxx_decode_option): Pass 0 as last argument to"}, {"sha": "e5d1a47e3970edad1e062ca47931d2723b1fd6dd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98884b267644fd8cc217c77d820e490fb7ce8625/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98884b267644fd8cc217c77d820e490fb7ce8625/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=98884b267644fd8cc217c77d820e490fb7ce8625", "patch": "@@ -7127,11 +7127,16 @@ tree\n groktypename (typename)\n      tree typename;\n {\n+  tree specs, attrs;\n+  tree type;\n   if (TREE_CODE (typename) != TREE_LIST)\n     return typename;\n-  return grokdeclarator (TREE_VALUE (typename),\n-\t\t\t TREE_PURPOSE (typename),\n-\t\t\t TYPENAME, 0, NULL);\n+  split_specs_attrs (TREE_PURPOSE (typename), &specs, &attrs);\n+  type = grokdeclarator (TREE_VALUE (typename), specs,\n+\t\t\t TYPENAME, 0, &attrs);\n+  if (attrs)\n+    cplus_decl_attributes (&type, attrs, 0);\n+  return type;\n }\n \n /* Decode a declarator in an ordinary declaration or data definition.\n@@ -11997,8 +12002,9 @@ grokparms (first_parm)\n   for (parm = first_parm; parm != NULL_TREE; parm = chain)\n     {\n       tree type = NULL_TREE;\n-      register tree decl = TREE_VALUE (parm);\n+      tree decl = TREE_VALUE (parm);\n       tree init = TREE_PURPOSE (parm);\n+      tree specs, attrs;\n \n       chain = TREE_CHAIN (parm);\n       /* @@ weak defense against parse errors.  */\n@@ -12016,11 +12022,15 @@ grokparms (first_parm)\n       if (parm == void_list_node)\n         break;\n \n-      decl = grokdeclarator (TREE_VALUE (decl), TREE_PURPOSE (decl),\n-\t\t     PARM, init != NULL_TREE, NULL);\n+      split_specs_attrs (TREE_PURPOSE (decl), &specs, &attrs);\n+      decl = grokdeclarator (TREE_VALUE (decl), specs,\n+\t\t\t     PARM, init != NULL_TREE, &attrs);\n       if (! decl || TREE_TYPE (decl) == error_mark_node)\n         continue;\n \n+      if (attrs)\n+\tcplus_decl_attributes (&decl, attrs, 0);\n+\n       type = TREE_TYPE (decl);\n       if (VOID_TYPE_P (type))\n         {"}, {"sha": "7941a89ac01d686dafa6a3124a14a4e8f0931f9b", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98884b267644fd8cc217c77d820e490fb7ce8625/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98884b267644fd8cc217c77d820e490fb7ce8625/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=98884b267644fd8cc217c77d820e490fb7ce8625", "patch": "@@ -301,7 +301,7 @@ cp_parse_init ()\n %nonassoc IF\n %nonassoc ELSE\n \n-%left IDENTIFIER PFUNCNAME TYPENAME SELFNAME PTYPENAME SCSPEC TYPESPEC CV_QUALIFIER ENUM AGGR ELLIPSIS TYPEOF SIGOF OPERATOR NSNAME TYPENAME_KEYWORD\n+%left IDENTIFIER PFUNCNAME TYPENAME SELFNAME PTYPENAME SCSPEC TYPESPEC CV_QUALIFIER ENUM AGGR ELLIPSIS TYPEOF SIGOF OPERATOR NSNAME TYPENAME_KEYWORD ATTRIBUTE\n \n %left '{' ',' ';'\n \n@@ -1938,11 +1938,6 @@ declmods:\n \t\t}\n \t| declmods attributes\n \t\t{ $$.t = hash_tree_cons ($2, NULL_TREE, $1.t); }\n-\t| attributes  %prec EMPTY\n-\t\t{\n-\t\t  $$.t = hash_tree_cons ($1, NULL_TREE, NULL_TREE);\n-\t\t  $$.new_type_flag = 0; $$.lookups = NULL_TREE;\n-\t\t}\n \t;\n \n /* Used instead of declspecs where storage classes are not allowed\n@@ -2819,6 +2814,12 @@ nonempty_cv_qualifiers:\n \t| nonempty_cv_qualifiers CV_QUALIFIER\n \t\t{ $$.t = hash_tree_cons (NULL_TREE, $2, $1.t); \n \t\t  $$.new_type_flag = $1.new_type_flag; }\n+\t| attributes %prec EMPTY\n+\t\t{ $$.t = hash_tree_cons ($1, NULL_TREE, NULL_TREE); \n+\t\t  $$.new_type_flag = 0; }\n+\t| nonempty_cv_qualifiers attributes %prec EMPTY\n+\t\t{ $$.t = hash_tree_cons ($2, NULL_TREE, $1.t); \n+\t\t  $$.new_type_flag = $1.new_type_flag; }\n \t;\n \n /* These rules must follow the rules for function declarations\n@@ -3718,9 +3719,8 @@ named_parm:\n \t/* Here we expand typed_declspecs inline to avoid mis-parsing of\n \t   TYPESPEC IDENTIFIER.  */\n \t  typed_declspecs1 declarator\n-\t\t{ tree specs = strip_attrs ($1.t);\n-\t\t  $$.new_type_flag = $1.new_type_flag;\n-\t\t  $$.t = build_tree_list (specs, $2); }\n+\t\t{ $$.new_type_flag = $1.new_type_flag;\n+\t\t  $$.t = build_tree_list ($1.t, $2); }\n \t| typed_typespecs declarator\n \t\t{ $$.t = build_tree_list ($1.t, $2); \n \t\t  $$.new_type_flag = $1.new_type_flag; }\n@@ -3729,16 +3729,13 @@ named_parm:\n \t\t\t\t\t  $2); \n \t\t  $$.new_type_flag = $1.new_type_flag; }\n \t| typed_declspecs1 absdcl\n-\t\t{ tree specs = strip_attrs ($1.t);\n-\t\t  $$.t = build_tree_list (specs, $2);\n+\t\t{ $$.t = build_tree_list ($1.t, $2);\n \t\t  $$.new_type_flag = $1.new_type_flag; }\n \t| typed_declspecs1  %prec EMPTY\n-\t\t{ tree specs = strip_attrs ($1.t);\n-\t\t  $$.t = build_tree_list (specs, NULL_TREE); \n+\t\t{ $$.t = build_tree_list ($1.t, NULL_TREE); \n \t\t  $$.new_type_flag = $1.new_type_flag; }\n \t| declmods notype_declarator\n-\t\t{ tree specs = strip_attrs ($1.t);\n-\t\t  $$.t = build_tree_list (specs, $2); \n+\t\t{ $$.t = build_tree_list ($1.t, $2); \n \t\t  $$.new_type_flag = 0; }\n \t;\n "}, {"sha": "aabb8d1dcbab709963228751a9b80db9c5bf282e", "filename": "gcc/testsuite/g++.dg/ext/attrib3.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98884b267644fd8cc217c77d820e490fb7ce8625/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98884b267644fd8cc217c77d820e490fb7ce8625/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib3.C?ref=98884b267644fd8cc217c77d820e490fb7ce8625", "patch": "@@ -0,0 +1,20 @@\n+// Test that attributes work in a variety of situations.\n+// { dg-do run }\n+\n+#define attrib __attribute ((mode (QI)))\n+\n+attrib signed int a;\t\t// attributes before type are broken\n+attrib unsigned int b;\n+\n+int foo(attrib int o)\t\t// attribute arguments are broken\n+{\n+  return (sizeof (a) != 1\n+\t  || sizeof (b) != 1\n+\t  || sizeof (o) != 1\n+\t  || sizeof ((attrib signed int) b) != 1);\n+}\n+\n+int main ()\n+{\n+  return foo (42);\n+}"}]}