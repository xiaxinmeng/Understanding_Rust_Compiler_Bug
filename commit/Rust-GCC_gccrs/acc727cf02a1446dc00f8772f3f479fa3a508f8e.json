{"sha": "acc727cf02a1446dc00f8772f3f479fa3a508f8e", "node_id": "C_kwDOANBUbNoAKGFjYzcyN2NmMDJhMTQ0NmRjMDBmODc3MmYzZjQ3OWZhM2E1MDhmOGU", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-12-27T10:13:07Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-12-27T10:13:07Z"}, "message": "rs6000: Rework option -mpowerpc64 handling [PR106680]\n\nPR106680 shows that -m32 -mpowerpc64 is different from\n-mpowerpc64 -m32, this is determined by the way how we\nhandle option powerpc64 in rs6000_handle_option.\n\nSegher pointed out this difference should be taken as\na bug and we should ensure that option powerpc64 is\nindependent of -m32/-m64.  So this patch removes the\nhandlings in rs6000_handle_option and add some necessary\nsupports in rs6000_option_override_internal instead.\n\nWith this patch, if users specify -m{no-,}powerpc64, the\nspecified value is honoured, otherwise, for 64bit it\nalways enables OPTION_MASK_POWERPC64; while for 32bit\nand TARGET_POWERPC64 and OS_MISSING_POWERPC64, it disables\nOPTION_MASK_POWERPC64.\n\nbtw, following Segher's suggestion, I did some tries to warn\nwhen OPTION_MASK_POWERPC64 is set for OS_MISSING_POWERPC64.\nIf warn for the case that powerpc64 is specified explicitly,\nthere are some TCs using -m32 -mpowerpc64 on ppc64-linux,\nthey need some updates, meanwhile the artificial run\nwith \"--target_board=unix'{-m32/-mpowerpc64}'\" will have\nnoisy warnings on ppc64-linux.  If warn for the case that\nit's specified implicitly, they can just be initialized by\nTARGET_DEFAULT (like -m32 on ppc64-linux) or set from the\ngiven cpu mask, we have to special case them and not to warn.\nAs Segher's latest comment, I decide not to warn them and\nkeep it consistent with before.\n\nBootstrapped and regress-tested on:\n  - powerpc64-linux-gnu P7 and P8 {-m64,-m32}\n  - powerpc64le-linux-gnu P9 and P10\n  - powerpc-ibm-aix7.2.0.0 {-maix64,-maix32}\n  - powerpc-darwin9 (with Iain's help)\n\n\tPR target/106680\n\ngcc/ChangeLog:\n\n\t* common/config/rs6000/rs6000-common.cc (rs6000_handle_option): Remove\n\tthe adjustment for option powerpc64 in -m64 handling, and remove the\n\twhole -m32 handling.\n\t* config/rs6000/rs6000.cc (rs6000_option_override_internal): When no\n\texplicit powerpc64 option is provided, enable it for -m64.  For 32 bit\n\tand OS_MISSING_POWERPC64, disable powerpc64 if it's enabled but not\n\tspecified explicitly.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr106680-1.c: New test.\n\t* gcc.target/powerpc/pr106680-2.c: New test.\n\t* gcc.target/powerpc/pr106680-3.c: New test.\n\t* gcc.target/powerpc/pr106680-4.c: New test.\n\n2022-12-27  Kewen Lin  <linkw@linux.ibm.com>\n\t    Iain Sandoe  <iain@sandoe.co.uk>", "tree": {"sha": "056d1cf5537f0950e84218fee25be122c05117c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/056d1cf5537f0950e84218fee25be122c05117c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acc727cf02a1446dc00f8772f3f479fa3a508f8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc727cf02a1446dc00f8772f3f479fa3a508f8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acc727cf02a1446dc00f8772f3f479fa3a508f8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc727cf02a1446dc00f8772f3f479fa3a508f8e/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2acff49fb2962b921bf8b73984b89878b61492c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2acff49fb2962b921bf8b73984b89878b61492c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2acff49fb2962b921bf8b73984b89878b61492c"}], "stats": {"total": 105, "additions": 85, "deletions": 20}, "files": [{"sha": "c76b5c27bb6e267646304e5edbd3215e38efe991", "filename": "gcc/common/config/rs6000/rs6000-common.cc", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc727cf02a1446dc00f8772f3f479fa3a508f8e/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc727cf02a1446dc00f8772f3f479fa3a508f8e/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.cc?ref=acc727cf02a1446dc00f8772f3f479fa3a508f8e", "patch": "@@ -119,19 +119,8 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n #else\n     case OPT_m64:\n #endif\n-      opts->x_rs6000_isa_flags |= OPTION_MASK_POWERPC64;\n       opts->x_rs6000_isa_flags |= (~opts_set->x_rs6000_isa_flags\n \t\t\t\t   & OPTION_MASK_PPC_GFXOPT);\n-      opts_set->x_rs6000_isa_flags |= OPTION_MASK_POWERPC64;\n-      break;\n-\n-#ifdef TARGET_USES_AIX64_OPT\n-    case OPT_maix32:\n-#else\n-    case OPT_m32:\n-#endif\n-      opts->x_rs6000_isa_flags &= ~OPTION_MASK_POWERPC64;\n-      opts_set->x_rs6000_isa_flags |= OPTION_MASK_POWERPC64;\n       break;\n \n     case OPT_mminimal_toc:"}, {"sha": "6ac3adcec6bd390c861235138e1b9b963fb0a70b", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc727cf02a1446dc00f8772f3f479fa3a508f8e/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc727cf02a1446dc00f8772f3f479fa3a508f8e/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=acc727cf02a1446dc00f8772f3f479fa3a508f8e", "patch": "@@ -3645,17 +3645,12 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_pointer_size = 32;\n     }\n \n-  /* Some OSs don't support saving the high part of 64-bit registers on context\n-     switch.  Other OSs don't support saving Altivec registers.  On those OSs,\n-     we don't touch the OPTION_MASK_POWERPC64 or OPTION_MASK_ALTIVEC settings;\n-     if the user wants either, the user must explicitly specify them and we\n-     won't interfere with the user's specification.  */\n+  /* Some OSs don't support saving Altivec registers.  On those OSs, we don't\n+     touch the OPTION_MASK_ALTIVEC settings; if the user wants it, the user\n+     must explicitly specify it and we won't interfere with the user's\n+     specification.  */\n \n   set_masks = POWERPC_MASKS;\n-#ifdef OS_MISSING_POWERPC64\n-  if (OS_MISSING_POWERPC64)\n-    set_masks &= ~OPTION_MASK_POWERPC64;\n-#endif\n #ifdef OS_MISSING_ALTIVEC\n   if (OS_MISSING_ALTIVEC)\n     set_masks &= ~(OPTION_MASK_ALTIVEC | OPTION_MASK_VSX\n@@ -3665,6 +3660,18 @@ rs6000_option_override_internal (bool global_init_p)\n   /* Don't override by the processor default if given explicitly.  */\n   set_masks &= ~rs6000_isa_flags_explicit;\n \n+  /* Without option powerpc64 specified explicitly, we need to ensure\n+     powerpc64 always enabled for 64 bit here, otherwise some following\n+     checks can use unexpected TARGET_POWERPC64 value.  Meanwhile, we\n+     need to ensure set_masks doesn't have OPTION_MASK_POWERPC64 on,\n+     otherwise later processing can clear it.  */\n+  if (!(rs6000_isa_flags_explicit & OPTION_MASK_POWERPC64)\n+      && TARGET_64BIT)\n+    {\n+      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\n+      set_masks &= ~OPTION_MASK_POWERPC64;\n+    }\n+\n   /* Process the -mcpu=<xxx> and -mtune=<xxx> argument.  If the user changed\n      the cpu in a target attribute or pragma, but did not specify a tuning\n      option, use the cpu for the tuning option rather than the option specified\n@@ -3715,6 +3722,18 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_isa_flags |= (flags & ~rs6000_isa_flags_explicit);\n     }\n \n+  /* Don't expect powerpc64 enabled on those OSes with OS_MISSING_POWERPC64,\n+     since they do not save and restore the high half of the GPRs correctly\n+     in all cases.  If the user explicitly specifies it, we won't interfere\n+     with the user's specification.  */\n+#ifdef OS_MISSING_POWERPC64\n+  if (OS_MISSING_POWERPC64\n+      && TARGET_32BIT\n+      && TARGET_POWERPC64\n+      && !(rs6000_isa_flags_explicit & OPTION_MASK_POWERPC64))\n+    rs6000_isa_flags &= ~OPTION_MASK_POWERPC64;\n+#endif\n+\n   if (rs6000_tune_index >= 0)\n     tune_index = rs6000_tune_index;\n   else if (cpu_index >= 0)"}, {"sha": "d624d43230a7a55acc0868110136fd6be9f5f59d", "filename": "gcc/testsuite/gcc.target/powerpc/pr106680-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc727cf02a1446dc00f8772f3f479fa3a508f8e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106680-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc727cf02a1446dc00f8772f3f479fa3a508f8e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106680-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106680-1.c?ref=acc727cf02a1446dc00f8772f3f479fa3a508f8e", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-mno-powerpc64\" } */\n+\n+/* Verify there is an error message about PowerPC64 requirement.  */\n+\n+int foo ()\n+{\n+  return 1;\n+}\n+\n+/* { dg-error \"'-m64' requires a PowerPC64 cpu\" \"PR106680\" { target powerpc*-*-linux* powerpc*-*-freebsd* powerpc-*-rtems* } 0 } */\n+/* { dg-warning \"'-m64' requires PowerPC64 architecture, enabling\" \"PR106680\" { target powerpc*-*-darwin* } 0 } */\n+/* { dg-warning \"'-maix64' requires PowerPC64 architecture remain enabled\" \"PR106680\" { target powerpc*-*-aix* } 0 } */"}, {"sha": "a9ed73726ef0cc433f3b11ef854d08257b639d3d", "filename": "gcc/testsuite/gcc.target/powerpc/pr106680-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc727cf02a1446dc00f8772f3f479fa3a508f8e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106680-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc727cf02a1446dc00f8772f3f479fa3a508f8e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106680-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106680-2.c?ref=acc727cf02a1446dc00f8772f3f479fa3a508f8e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-mno-powerpc64 -m64\" } */\n+\n+/* Verify option -m64 doesn't override option -mno-powerpc64,\n+   and there is an error message about PowerPC64 requirement.  */\n+\n+int foo ()\n+{\n+  return 1;\n+}\n+\n+/* { dg-error \"'-m64' requires a PowerPC64 cpu\" \"PR106680\" { target powerpc*-*-linux* powerpc*-*-freebsd* powerpc-*-rtems* } 0 } */\n+/* { dg-warning \"'-m64' requires PowerPC64 architecture, enabling\" \"PR106680\" { target powerpc*-*-darwin* } 0 } */\n+/* { dg-warning \"'-maix64' requires PowerPC64 architecture remain enabled\" \"PR106680\" { target powerpc*-*-aix* } 0 } */"}, {"sha": "b642d5c7a008d955c5f11c2037698906b10ac090", "filename": "gcc/testsuite/gcc.target/powerpc/pr106680-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc727cf02a1446dc00f8772f3f479fa3a508f8e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106680-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc727cf02a1446dc00f8772f3f479fa3a508f8e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106680-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106680-3.c?ref=acc727cf02a1446dc00f8772f3f479fa3a508f8e", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-m64 -mno-powerpc64\" } */\n+\n+/* Verify there is an error message about PowerPC64 requirement.  */\n+\n+int foo ()\n+{\n+  return 1;\n+}\n+\n+/* { dg-error \"'-m64' requires a PowerPC64 cpu\" \"PR106680\" { target powerpc*-*-linux* powerpc*-*-freebsd* powerpc-*-rtems* } 0 } */\n+/* { dg-warning \"'-m64' requires PowerPC64 architecture, enabling\" \"PR106680\" { target powerpc*-*-darwin* } 0 } */\n+/* { dg-warning \"'-maix64' requires PowerPC64 architecture remain enabled\" \"PR106680\" { target powerpc*-*-aix* } 0 } */"}, {"sha": "7fee48d39f3a2260e654ed9872544766a679acf7", "filename": "gcc/testsuite/gcc.target/powerpc/pr106680-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc727cf02a1446dc00f8772f3f479fa3a508f8e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106680-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc727cf02a1446dc00f8772f3f479fa3a508f8e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106680-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106680-4.c?ref=acc727cf02a1446dc00f8772f3f479fa3a508f8e", "patch": "@@ -0,0 +1,17 @@\n+/* Skip this on aix, otherwise it emits the error message like \"64-bit\n+   computation with 32-bit addressing not yet supported\" on aix.  */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-mpowerpc64 -m32 -O2\" } */\n+\n+/* Verify option -m32 doesn't override option -mpowerpc64.\n+   If option -mpowerpc64 gets overridden, the assembly would\n+   end up with addc and adde.  */\n+/* { dg-final { scan-assembler-not {\\maddc\\M} } } */\n+/* { dg-final { scan-assembler-not {\\madde\\M} } } */\n+/* { dg-final { scan-assembler-times {\\madd\\M} 1 } } */\n+\n+long long foo (long long a, long long b)\n+{\n+  return a+b;\n+}"}]}