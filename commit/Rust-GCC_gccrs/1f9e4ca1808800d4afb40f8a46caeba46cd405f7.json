{"sha": "1f9e4ca1808800d4afb40f8a46caeba46cd405f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY5ZTRjYTE4MDg4MDBkNGFmYjQwZjhhNDZjYWViYTQ2Y2Q0MDVmNw==", "commit": {"author": {"name": "Jie Zhang", "email": "jie.zhang@analog.com", "date": "2007-05-08T11:59:08Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2007-05-08T11:59:08Z"}, "message": "bfin-protos.h (bfin_expand_epilogue): Add a third argument of type bool.\n\n\t* config/bfin/bfin-protos.h (bfin_expand_epilogue): Add a third\n\targument of type bool.\n\t* config/bfin/bfin.c (add_to_reg): Add epilogue_p as a fourth\n\targument. Safely select temporary P register according to it.\n\t(do_link): Change call site of add_to_reg accordingly.\n\t(do_unlink): Add epilogue_p as a fourth argument and pass it\n\tto add_to_reg.\n\t(expand_interrupt_handler_epilogue): Change call of do_unlink\n\taccordingly.\n\t(bfin_expand_prologue): Add a third argument sibcall_p.\n\t* config/bfin/bfin.md (epilogue): Change call of\n\tbfin_expand_epilogue accordingly.\n\t(sibcall_epilogue): Likewise.\n\t(eh_return_internal): Likewise.\n\nFrom-SVN: r124542", "tree": {"sha": "66cb206bc100a8a8cbb1dc898dd1bc50745ab7e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66cb206bc100a8a8cbb1dc898dd1bc50745ab7e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f9e4ca1808800d4afb40f8a46caeba46cd405f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9e4ca1808800d4afb40f8a46caeba46cd405f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f9e4ca1808800d4afb40f8a46caeba46cd405f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9e4ca1808800d4afb40f8a46caeba46cd405f7/comments", "author": {"login": "jiez-adi", "id": 103514486, "node_id": "U_kgDOBiuBdg", "avatar_url": "https://avatars.githubusercontent.com/u/103514486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiez-adi", "html_url": "https://github.com/jiez-adi", "followers_url": "https://api.github.com/users/jiez-adi/followers", "following_url": "https://api.github.com/users/jiez-adi/following{/other_user}", "gists_url": "https://api.github.com/users/jiez-adi/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiez-adi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiez-adi/subscriptions", "organizations_url": "https://api.github.com/users/jiez-adi/orgs", "repos_url": "https://api.github.com/users/jiez-adi/repos", "events_url": "https://api.github.com/users/jiez-adi/events{/privacy}", "received_events_url": "https://api.github.com/users/jiez-adi/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9b43781dbc0c38ea33062cd96825defbcb1ca2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b43781dbc0c38ea33062cd96825defbcb1ca2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9b43781dbc0c38ea33062cd96825defbcb1ca2d"}], "stats": {"total": 95, "additions": 77, "deletions": 18}, "files": [{"sha": "1bddf0f77a6628f5add2b86392810541015ba9c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9e4ca1808800d4afb40f8a46caeba46cd405f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9e4ca1808800d4afb40f8a46caeba46cd405f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f9e4ca1808800d4afb40f8a46caeba46cd405f7", "patch": "@@ -1,3 +1,20 @@\n+2007-05-08  Jie Zhang  <jie.zhang@analog.com>\n+\n+\t* config/bfin/bfin-protos.h (bfin_expand_epilogue): Add a third\n+\targument of type bool.\n+\t* config/bfin/bfin.c (add_to_reg): Add epilogue_p as a fourth\n+\targument. Safely select temporary P register according to it.\n+\t(do_link): Change call site of add_to_reg accordingly.\n+\t(do_unlink): Add epilogue_p as a fourth argument and pass it\n+\tto add_to_reg.\n+\t(expand_interrupt_handler_epilogue): Change call of do_unlink\n+\taccordingly.\n+\t(bfin_expand_prologue): Add a third argument sibcall_p.\n+\t* config/bfin/bfin.md (epilogue): Change call of\n+\tbfin_expand_epilogue accordingly.\n+\t(sibcall_epilogue): Likewise.\n+\t(eh_return_internal): Likewise.\n+\t\t\n 2007-05-08  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/31854"}, {"sha": "2062f77d3883ee2a3c181481b209a0d3343b04a0", "filename": "gcc/config/bfin/bfin-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9e4ca1808800d4afb40f8a46caeba46cd405f7/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9e4ca1808800d4afb40f8a46caeba46cd405f7/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h?ref=1f9e4ca1808800d4afb40f8a46caeba46cd405f7", "patch": "@@ -89,7 +89,7 @@ extern bool bfin_legitimate_address_p (Mmode, rtx, int);\n extern rtx bfin_va_arg (tree, tree);\n \n extern void bfin_expand_prologue (void);\n-extern void bfin_expand_epilogue (int, int);\n+extern void bfin_expand_epilogue (int, int, bool);\n extern int push_multiple_operation (rtx, Mmode);\n extern int pop_multiple_operation (rtx, Mmode);\n extern void output_push_multiple (rtx, rtx *);"}, {"sha": "89931df7c7dde1907dcacf07a5d2e8bc50a1f794", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 56, "deletions": 14, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9e4ca1808800d4afb40f8a46caeba46cd405f7/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9e4ca1808800d4afb40f8a46caeba46cd405f7/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=1f9e4ca1808800d4afb40f8a46caeba46cd405f7", "patch": "@@ -569,12 +569,14 @@ frame_related_constant_load (rtx reg, HOST_WIDE_INT constant, bool related)\n     RTX_FRAME_RELATED_P (insn) = 1;\n }\n \n-/* Generate efficient code to add a value to a P register.  We can use\n-   P1 as a scratch register.  Set RTX_FRAME_RELATED_P on the generated\n-   insns if FRAME is nonzero.  */\n+/* Generate efficient code to add a value to a P register.\n+   Set RTX_FRAME_RELATED_P on the generated insns if FRAME is nonzero.\n+   EPILOGUE_P is zero if this function is called for prologue,\n+   otherwise it's nonzero. And it's less than zero if this is for\n+   sibcall epilogue.  */\n \n static void\n-add_to_reg (rtx reg, HOST_WIDE_INT value, int frame)\n+add_to_reg (rtx reg, HOST_WIDE_INT value, int frame, int epilogue_p)\n {\n   if (value == 0)\n     return;\n@@ -584,9 +586,41 @@ add_to_reg (rtx reg, HOST_WIDE_INT value, int frame)\n      in one instruction.  */\n   if (value > 120 || value < -120)\n     {\n-      rtx tmpreg = gen_rtx_REG (SImode, REG_P1);\n+      rtx tmpreg;\n+      rtx tmpreg2;\n       rtx insn;\n \n+      tmpreg2 = NULL_RTX;\n+\n+      /* For prologue or normal epilogue, P1 can be safely used\n+\t as the temporary register. For sibcall epilogue, we try to find\n+\t a call used P register, which will be restored in epilogue.\n+\t If we cannot find such a P register, we have to use one I register\n+\t to help us.  */\n+\n+      if (epilogue_p >= 0)\n+\ttmpreg = gen_rtx_REG (SImode, REG_P1);\n+      else\n+\t{\n+\t  int i;\n+\t  for (i = REG_P0; i <= REG_P5; i++)\n+\t    if ((regs_ever_live[i] && ! call_used_regs[i])\n+\t\t|| (!TARGET_FDPIC\n+\t\t    && i == PIC_OFFSET_TABLE_REGNUM\n+\t\t    && (current_function_uses_pic_offset_table\n+\t\t\t|| (TARGET_ID_SHARED_LIBRARY\n+\t\t\t    && ! current_function_is_leaf))))\n+\t      break;\n+\t  if (i <= REG_P5)\n+\t    tmpreg = gen_rtx_REG (SImode, i);\n+\t  else\n+\t    {\n+\t      tmpreg = gen_rtx_REG (SImode, REG_P1);\n+\t      tmpreg2 = gen_rtx_REG (SImode, REG_I0);\n+\t      emit_move_insn (tmpreg2, tmpreg);\n+\t    }\n+\t}\n+\n       if (frame)\n \tframe_related_constant_load (tmpreg, value, TRUE);\n       else\n@@ -595,6 +629,9 @@ add_to_reg (rtx reg, HOST_WIDE_INT value, int frame)\n       insn = emit_insn (gen_addsi3 (reg, reg, tmpreg));\n       if (frame)\n \tRTX_FRAME_RELATED_P (insn) = 1;\n+\n+      if (tmpreg2 != NULL_RTX)\n+\temit_move_insn (tmpreg, tmpreg2);\n     }\n   else\n     do\n@@ -702,14 +739,17 @@ do_link (rtx spreg, HOST_WIDE_INT frame_size, bool all)\n \t  rtx insn = emit_insn (pat);\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n-      add_to_reg (spreg, -frame_size, 1);\n+      add_to_reg (spreg, -frame_size, 1, 0);\n     }\n }\n \n-/* Like do_link, but used for epilogues to deallocate the stack frame.  */\n+/* Like do_link, but used for epilogues to deallocate the stack frame.\n+   EPILOGUE_P is zero if this function is called for prologue,\n+   otherwise it's nonzero. And it's less than zero if this is for\n+   sibcall epilogue.  */\n \n static void\n-do_unlink (rtx spreg, HOST_WIDE_INT frame_size, bool all)\n+do_unlink (rtx spreg, HOST_WIDE_INT frame_size, bool all, int epilogue_p)\n {\n   frame_size += arg_area_size ();\n \n@@ -719,7 +759,7 @@ do_unlink (rtx spreg, HOST_WIDE_INT frame_size, bool all)\n     {\n       rtx postinc = gen_rtx_MEM (Pmode, gen_rtx_POST_INC (Pmode, spreg));\n \n-      add_to_reg (spreg, frame_size, 0);\n+      add_to_reg (spreg, frame_size, 0, epilogue_p);\n       if (must_save_fp_p ())\n \t{\n \t  rtx fpreg = gen_rtx_REG (Pmode, REG_FP);\n@@ -842,7 +882,7 @@ expand_interrupt_handler_epilogue (rtx spreg, e_funkind fkind)\n      insns.  */\n   MEM_VOLATILE_P (postinc) = 1;\n \n-  do_unlink (spreg, get_frame_size (), all);\n+  do_unlink (spreg, get_frame_size (), all, 1);\n \n   if (lookup_attribute (\"nesting\", attrs))\n     {\n@@ -968,7 +1008,7 @@ bfin_expand_prologue (void)\n \t{\n \t  if (lim != p2reg)\n \t    emit_move_insn (p2reg, lim);\n-\t  add_to_reg (p2reg, offset, 0);\n+\t  add_to_reg (p2reg, offset, 0, 0);\n \t  lim = p2reg;\n \t}\n       emit_insn (gen_compare_lt (bfin_cc_rtx, spreg, lim));\n@@ -987,21 +1027,23 @@ bfin_expand_prologue (void)\n \n /* Generate RTL for the epilogue of the current function.  NEED_RETURN is zero\n    if this is for a sibcall.  EH_RETURN is nonzero if we're expanding an\n-   eh_return pattern.  */\n+   eh_return pattern. SIBCALL_P is true if this is a sibcall epilogue,\n+   false otherwise.  */\n \n void\n-bfin_expand_epilogue (int need_return, int eh_return)\n+bfin_expand_epilogue (int need_return, int eh_return, bool sibcall_p)\n {\n   rtx spreg = gen_rtx_REG (Pmode, REG_SP);\n   e_funkind fkind = funkind (TREE_TYPE (current_function_decl));\n+  int e = sibcall_p ? -1 : 1;\n \n   if (fkind != SUBROUTINE)\n     {\n       expand_interrupt_handler_epilogue (spreg, fkind);\n       return;\n     }\n \n-  do_unlink (spreg, get_frame_size (), false);\n+  do_unlink (spreg, get_frame_size (), false, e);\n \n   expand_epilogue_reg_restore (spreg, false, false);\n "}, {"sha": "630694a0f9c1302da7f41a2165f71be436afea29", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9e4ca1808800d4afb40f8a46caeba46cd405f7/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9e4ca1808800d4afb40f8a46caeba46cd405f7/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=1f9e4ca1808800d4afb40f8a46caeba46cd405f7", "patch": "@@ -2668,12 +2668,12 @@\n (define_expand \"epilogue\"\n   [(const_int 1)]\n   \"\"\n-  \"bfin_expand_epilogue (1, 0); DONE;\")\n+  \"bfin_expand_epilogue (1, 0, 0); DONE;\")\n \n (define_expand \"sibcall_epilogue\"\n   [(const_int 1)]\n   \"\"\n-  \"bfin_expand_epilogue (0, 0); DONE;\")\n+  \"bfin_expand_epilogue (0, 0, 1); DONE;\")\n \n (define_expand \"eh_return\"\n   [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"\")]\n@@ -2693,7 +2693,7 @@\n   \"#\"\n   \"reload_completed\"\n   [(const_int 1)]\n-  \"bfin_expand_epilogue (1, 1); DONE;\")\n+  \"bfin_expand_epilogue (1, 1, 0); DONE;\")\n \n (define_insn \"link\"\n   [(set (mem:SI (plus:SI (reg:SI REG_SP) (const_int -4))) (reg:SI REG_RETS))"}]}