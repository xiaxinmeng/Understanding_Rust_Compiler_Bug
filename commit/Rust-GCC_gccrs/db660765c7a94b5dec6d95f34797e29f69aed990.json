{"sha": "db660765c7a94b5dec6d95f34797e29f69aed990", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI2NjA3NjVjN2E5NGI1ZGVjNmQ5NWYzNDc5N2UyOWY2OWFlZDk5MA==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-12-11T13:18:32Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-12-11T13:18:32Z"}, "message": "(choose_reload_regs): Don't inherit a reload if the\n\tprevious reload wasn't at least as wide as the current reload.\n\nFrom-SVN: r2864", "tree": {"sha": "7e825ea2d6908df23fbb50fbb104bf7c7fb432b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e825ea2d6908df23fbb50fbb104bf7c7fb432b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db660765c7a94b5dec6d95f34797e29f69aed990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db660765c7a94b5dec6d95f34797e29f69aed990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db660765c7a94b5dec6d95f34797e29f69aed990", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db660765c7a94b5dec6d95f34797e29f69aed990/comments", "author": null, "committer": null, "parents": [{"sha": "d8cfa4ee64a9f661e35b2e1549b0ae85ae5a9888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8cfa4ee64a9f661e35b2e1549b0ae85ae5a9888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8cfa4ee64a9f661e35b2e1549b0ae85ae5a9888"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "261be0540eee7ee7cd787157a220a74b887f2c04", "filename": "gcc/reload1.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db660765c7a94b5dec6d95f34797e29f69aed990/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db660765c7a94b5dec6d95f34797e29f69aed990/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=db660765c7a94b5dec6d95f34797e29f69aed990", "patch": "@@ -4382,13 +4382,20 @@ choose_reload_regs (insn, avoid_return_reg)\n \t  if (inheritance)\n \t    {\n \t      register int regno = -1;\n+\t      enum machine_mode mode;\n \n \t      if (reload_in[r] == 0)\n \t\t;\n \t      else if (GET_CODE (reload_in[r]) == REG)\n-\t\tregno = REGNO (reload_in[r]);\n+\t\t{\n+\t\t  regno = REGNO (reload_in[r]);\n+\t\t  mode = GET_MODE (reload_in[r]);\n+\t\t}\n \t      else if (GET_CODE (reload_in_reg[r]) == REG)\n-\t\tregno = REGNO (reload_in_reg[r]);\n+\t\t{\n+\t\t  regno = REGNO (reload_in_reg[r]);\n+\t\t  mode = GET_MODE (reload_in_reg[r]);\n+\t\t}\n #if 0\n \t      /* This won't work, since REGNO can be a pseudo reg number.\n \t\t Also, it takes much more hair to keep track of all the things\n@@ -4403,6 +4410,8 @@ choose_reload_regs (insn, avoid_return_reg)\n \t\t  i = spill_reg_order[REGNO (reg_last_reload_reg[regno])];\n \n \t\t  if (reg_reloaded_contents[i] == regno\n+\t\t      && (GET_MODE_SIZE (GET_MODE (reg_last_reload_reg[regno]))\n+\t\t\t  >= GET_MODE_SIZE (mode))\n \t\t      && HARD_REGNO_MODE_OK (spill_regs[i], reload_mode[r])\n \t\t      && TEST_HARD_REG_BIT (reg_class_contents[(int) reload_reg_class[r]],\n \t\t\t\t\t    spill_regs[i])"}]}