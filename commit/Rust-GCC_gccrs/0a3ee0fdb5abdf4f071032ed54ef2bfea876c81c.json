{"sha": "0a3ee0fdb5abdf4f071032ed54ef2bfea876c81c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEzZWUwZmRiNWFiZGY0ZjA3MTAzMmVkNTRlZjJiZmVhODc2YzgxYw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2004-10-31T02:10:12Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2004-10-31T02:10:12Z"}, "message": "c-common.c (catenate_strings): New.\n\n        * c-common.c (catenate_strings): New.\n        (c_parse_error): Use it.  Don't over-escape.\ntestsuite/\n        * gcc.dg/20040910-1.c: Adjust regex.\n\nFrom-SVN: r89910", "tree": {"sha": "db4116bd3ccfb5c043412bc6f6fbd74c9d552967", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db4116bd3ccfb5c043412bc6f6fbd74c9d552967"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a3ee0fdb5abdf4f071032ed54ef2bfea876c81c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a3ee0fdb5abdf4f071032ed54ef2bfea876c81c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a3ee0fdb5abdf4f071032ed54ef2bfea876c81c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a3ee0fdb5abdf4f071032ed54ef2bfea876c81c/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b789258287043cbe3b05675d281faf9d4c9e2760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b789258287043cbe3b05675d281faf9d4c9e2760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b789258287043cbe3b05675d281faf9d4c9e2760"}], "stats": {"total": 72, "additions": 60, "deletions": 12}, "files": [{"sha": "05f4e819137b6cce4a8d7700cfb7bcaa4ca61e0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3ee0fdb5abdf4f071032ed54ef2bfea876c81c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3ee0fdb5abdf4f071032ed54ef2bfea876c81c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a3ee0fdb5abdf4f071032ed54ef2bfea876c81c", "patch": "@@ -1,3 +1,8 @@\n+2004-10-30  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-common.c (catenate_strings): New.\n+\t(c_parse_error): Use it.  Don't over-escape.\n+\n 2004-10-30  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.c (calc_live_regs): Declare reg as unsigned and"}, {"sha": "ea8b26c574314d7d4d3009b38fd569c2066f7c7d", "filename": "gcc/c-common.c", "status": "modified", "additions": 50, "deletions": 11, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3ee0fdb5abdf4f071032ed54ef2bfea876c81c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3ee0fdb5abdf4f071032ed54ef2bfea876c81c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=0a3ee0fdb5abdf4f071032ed54ef2bfea876c81c", "patch": "@@ -5479,36 +5479,75 @@ resort_sorted_fields (void *obj,\n \t resort_field_decl_cmp);\n }\n \n+/* Subroutine of c_parse_error.\n+   Return the result of concatenating LHS and RHS. RHS is really\n+   a string literal, its first character is indicated by RHS_START and\n+   RHS_SIZE is its lenght (including the terminating NUL character).\n+\n+   The caller is responsible for deleting the returned pointer.  */\n+\n+static char *\n+catenate_strings (const char *lhs, const char *rhs_start, int rhs_size)\n+{\n+  const int lhs_size = strlen (lhs);\n+  char *result = XNEWVEC (char, lhs_size + rhs_size);\n+  strncpy (result, lhs, lhs_size);\n+  strncpy (result + lhs_size, rhs_start, rhs_size);\n+  return result;\n+}\n+\n /* Issue the error given by MSGID, indicating that it occurred before\n    TOKEN, which had the associated VALUE.  */\n \n void\n c_parse_error (const char *msgid, enum cpp_ttype token, tree value)\n {\n-  const char *string = _(msgid);\n+#define catenate_messages(M1, M2) catenate_strings ((M1), (M2), sizeof (M2))\n+\n+  char *message = NULL;\n \n   if (token == CPP_EOF)\n-    error (\"%s at end of input\", string);\n+    message = catenate_messages (msgid, \" at end of input\");\n   else if (token == CPP_CHAR || token == CPP_WCHAR)\n     {\n       unsigned int val = TREE_INT_CST_LOW (value);\n       const char *const ell = (token == CPP_CHAR) ? \"\" : \"L\";\n       if (val <= UCHAR_MAX && ISGRAPH (val))\n-\terror (\"%s before %s'%c'\", string, ell, val);\n+        message = catenate_messages (msgid, \" before %s'%c'\");\n       else\n-\terror (\"%s before %s'\\\\x%x'\", string, ell, val);\n+        message = catenate_messages (msgid, \" before %s'\\\\x%x'\");\n+\n+      error (message, ell, val);\n+      free (message);\n+      message = NULL;\n     }\n-  else if (token == CPP_STRING\n-\t   || token == CPP_WSTRING)\n-    error (\"%s before string constant\", string);\n+  else if (token == CPP_STRING || token == CPP_WSTRING)\n+    message = catenate_messages (msgid, \" before string constant\");\n   else if (token == CPP_NUMBER)\n-    error (\"%s before numeric constant\", string);\n+    message = catenate_messages (msgid, \" before numeric constant\");\n   else if (token == CPP_NAME)\n-    error (\"%s before \\\"%s\\\"\", string, IDENTIFIER_POINTER (value));\n+    {\n+      message = catenate_messages (msgid, \" before %qs\");\n+      error (message, IDENTIFIER_POINTER (value));\n+      free (message);\n+      message = NULL;\n+    }\n   else if (token < N_TTYPES)\n-    error (\"%s before %qs token\", string, cpp_type2name (token));\n+    {\n+      message = catenate_messages (msgid, \" before %qs token\");\n+      error (message, cpp_type2name (token));\n+      free (message);\n+      message = NULL;\n+    }\n   else\n-    error (\"%s\", string);\n+    error (msgid);\n+\n+  if (message)\n+    {\n+      error (message);\n+      free (message);\n+    }\n+#undef catenate_messages  \n }\n \n /* Walk a gimplified function and warn for functions whose return value is"}, {"sha": "98b107fc85367e8f9dcf89264b90b51adcf38bf6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3ee0fdb5abdf4f071032ed54ef2bfea876c81c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3ee0fdb5abdf4f071032ed54ef2bfea876c81c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a3ee0fdb5abdf4f071032ed54ef2bfea876c81c", "patch": "@@ -1,3 +1,7 @@\n+2004-10-30  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* gcc.dg/20040910-1.c: Adjust regex.\n+\n 2004-10-30  Roger Sayle  <roger@eyesopen.com>\n \n \tPR rtl-optimization/18084"}, {"sha": "10f5fb32662193cc054a3593ab0dd6fc13816c75", "filename": "gcc/testsuite/gcc.dg/20040910-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3ee0fdb5abdf4f071032ed54ef2bfea876c81c/gcc%2Ftestsuite%2Fgcc.dg%2F20040910-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3ee0fdb5abdf4f071032ed54ef2bfea876c81c/gcc%2Ftestsuite%2Fgcc.dg%2F20040910-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040910-1.c?ref=0a3ee0fdb5abdf4f071032ed54ef2bfea876c81c", "patch": "@@ -1,2 +1,2 @@\n /* Tests error recovery for invalid code.  */\n-__attribute__((foo)  int f (){} /* { dg-error \"(parse|syntax) error before \\\"int\\\"\" } */\n+__attribute__((foo)  int f (){} /* { dg-error \"(parse|syntax) error before 'int'\" } */"}]}