{"sha": "9e2f9a7f6adb8e1e4aa575ce0437fc63708847e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUyZjlhN2Y2YWRiOGUxZTRhYTU3NWNlMDQzN2ZjNjM3MDg4NDdlMQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-03-28T22:35:56Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-03-28T22:35:56Z"}, "message": "final.c (LONG_TYPE_SIZE): Define.\n\n\t* final.c (LONG_TYPE_SIZE): Define.\n\t(count_instrumented_arcs): New variable.\n\t(end_final, profile_after_prologue, leaf_function_p): Add support\n\tfor profile_arc_flag.\n\t(add_bb): Only call CC_STATUS_INIT if HAVE_cc0.\n\nFrom-SVN: r13813", "tree": {"sha": "ede6163a4b3d6121c13bbc923041bed2c13bf65e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ede6163a4b3d6121c13bbc923041bed2c13bf65e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e2f9a7f6adb8e1e4aa575ce0437fc63708847e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2f9a7f6adb8e1e4aa575ce0437fc63708847e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2f9a7f6adb8e1e4aa575ce0437fc63708847e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2f9a7f6adb8e1e4aa575ce0437fc63708847e1/comments", "author": null, "committer": null, "parents": [{"sha": "3a95cde86848d42d580eea6b80fd99f31eeb8484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a95cde86848d42d580eea6b80fd99f31eeb8484", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a95cde86848d42d580eea6b80fd99f31eeb8484"}], "stats": {"total": 165, "additions": 108, "deletions": 57}, "files": [{"sha": "47cc2cc6e16279a7f92d27f2c66917143e6d8b5f", "filename": "gcc/final.c", "status": "modified", "additions": 108, "deletions": 57, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f9a7f6adb8e1e4aa575ce0437fc63708847e1/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f9a7f6adb8e1e4aa575ce0437fc63708847e1/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=9e2f9a7f6adb8e1e4aa575ce0437fc63708847e1", "patch": "@@ -1,5 +1,5 @@\n /* Convert RTL to assembler code and output it, for GNU compiler.\n-   Copyright (C) 1987, 88, 89, 92-5, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92-6, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -96,6 +96,10 @@ Boston, MA 02111-1307, USA.  */\n #define INT_TYPE_SIZE BITS_PER_WORD\n #endif\n \n+#ifndef LONG_TYPE_SIZE\n+#define LONG_TYPE_SIZE BITS_PER_WORD\n+#endif\n+\n /* If we aren't using cc0, CC_STATUS_INIT shouldn't exist.  So define a\n    null default for it to save conditionalization later.  */\n #ifndef CC_STATUS_INIT\n@@ -136,6 +140,9 @@ static char *last_filename;\n    used if profile_block_flag is set.  */\n static int count_basic_blocks;\n \n+/* Number of instrumented arcs when profile_arc_flag is set.  */\n+extern int count_instrumented_arcs;\n+\n /* Nonzero while outputting an `asm' with operands.\n    This means that inconsistencies are the user's fault, so don't abort.\n    The precise value is the insn being output, to pass to error_for_asm.  */\n@@ -310,14 +317,21 @@ end_final (filename)\n {\n   int i;\n \n-  if (profile_block_flag)\n+  if (profile_block_flag || profile_arc_flag)\n     {\n       char name[20];\n       int align = exact_log2 (BIGGEST_ALIGNMENT / BITS_PER_UNIT);\n-      int size = (POINTER_SIZE / BITS_PER_UNIT) * count_basic_blocks;\n-      int rounded = size;\n+      int size, rounded;\n       struct bb_list *ptr;\n       struct bb_str *sptr;\n+      int long_bytes = LONG_TYPE_SIZE / BITS_PER_UNIT;\n+      int pointer_bytes = POINTER_SIZE / BITS_PER_UNIT;\n+\n+      if (profile_block_flag)\n+\tsize = long_bytes * count_basic_blocks;\n+      else\n+\tsize = long_bytes * count_instrumented_arcs;\n+      rounded = size;\n \n       rounded += (BIGGEST_ALIGNMENT / BITS_PER_UNIT) - 1;\n       rounded = (rounded / (BIGGEST_ALIGNMENT / BITS_PER_UNIT)\n@@ -345,45 +359,61 @@ end_final (filename)\n \n       ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LPBX\", 0);\n       /* zero word */\n-      assemble_integer (const0_rtx, UNITS_PER_WORD, 1);\n+      assemble_integer (const0_rtx, long_bytes, 1);\n \n       /* address of filename */\n       ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 1);\n-      assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name), UNITS_PER_WORD, 1);\n+      assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name), pointer_bytes, 1);\n \n       /* address of count table */\n       ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 2);\n-      assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name), UNITS_PER_WORD, 1);\n+      assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name), pointer_bytes, 1);\n \n-      /* count of the # of basic blocks */\n-      assemble_integer (GEN_INT (count_basic_blocks), UNITS_PER_WORD, 1);\n+      /* count of the # of basic blocks or # of instrumented arcs */\n+      if (profile_block_flag)\n+\tassemble_integer (GEN_INT (count_basic_blocks), long_bytes, 1);\n+      else\n+\tassemble_integer (GEN_INT (count_instrumented_arcs), long_bytes,\n+\t\t\t  1);\n \n       /* zero word (link field) */\n-      assemble_integer (const0_rtx, UNITS_PER_WORD, 1);\n+      assemble_integer (const0_rtx, pointer_bytes, 1);\n \n       /* address of basic block start address table */\n-      ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 3);\n-      assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name), UNITS_PER_WORD, 1);\n+      if (profile_block_flag)\n+\t{\n+\t  ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 3);\n+\t  assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name), pointer_bytes,\n+\t\t\t    1);\n+\t}\n+      else\n+\tassemble_integer (const0_rtx, pointer_bytes, 1);\n \n       /* byte count for extended structure.  */\n-      assemble_integer (GEN_INT (11 * UNITS_PER_WORD), UNITS_PER_WORD, 1);\n+      assemble_integer (GEN_INT (10 * UNITS_PER_WORD), long_bytes, 1);\n \n       /* address of function name table */\n-      ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 4);\n-      assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name), UNITS_PER_WORD, 1);\n+      if (profile_block_flag)\n+\t{\n+\t  ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 4);\n+\t  assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name), pointer_bytes,\n+\t\t\t    1);\n+\t}\n+      else\n+\tassemble_integer (const0_rtx, pointer_bytes, 1);\n \n       /* address of line number and filename tables if debugging.  */\n-      if (write_symbols != NO_DEBUG)\n+      if (write_symbols != NO_DEBUG && profile_block_flag)\n \t{\n \t  ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 5);\n-\t  assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name), UNITS_PER_WORD, 1);\n+\t  assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name), pointer_bytes, 1);\n \t  ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 6);\n-\t  assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name), UNITS_PER_WORD, 1);\n+\t  assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name), pointer_bytes, 1);\n \t}\n       else\n \t{\n-\t  assemble_integer (const0_rtx, UNITS_PER_WORD, 1);\n-\t  assemble_integer (const0_rtx, UNITS_PER_WORD, 1);\n+\t  assemble_integer (const0_rtx, pointer_bytes, 1);\n+\t  assemble_integer (const0_rtx, pointer_bytes, 1);\n \t}\n \n       /* space for extension ptr (link field) */\n@@ -401,7 +431,10 @@ end_final (filename)\n \tstrcat (data_file, \"/\");\n \tstrcat (data_file, filename);\n \tstrip_off_ending (data_file, len);\n-\tstrcat (data_file, \".d\");\n+\tif (profile_block_flag)\n+\t  strcat (data_file, \".d\");\n+\telse\n+\t  strcat (data_file, \".da\");\n \tassemble_string (data_file, strlen (data_file) + 1);\n       }\n \n@@ -431,77 +464,93 @@ end_final (filename)\n \t}\n \n       /* Output any basic block strings */\n-      readonly_data_section ();\n-      if (sbb_head)\n+      if (profile_block_flag)\n \t{\n-\t  ASM_OUTPUT_ALIGN (asm_out_file, align);\n-\t  for (sptr = sbb_head; sptr != 0; sptr = sptr->next)\n+\t  readonly_data_section ();\n+\t  if (sbb_head)\n \t    {\n-\t      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LPBC\", sptr->label_num);\n-\t      assemble_string (sptr->string, sptr->length);\n+\t      ASM_OUTPUT_ALIGN (asm_out_file, align);\n+\t      for (sptr = sbb_head; sptr != 0; sptr = sptr->next)\n+\t\t{\n+\t\t  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LPBC\",\n+\t\t\t\t\t     sptr->label_num);\n+\t\t  assemble_string (sptr->string, sptr->length);\n+\t\t}\n \t    }\n \t}\n \n       /* Output the table of addresses.  */\n-      /* Realign in new section */\n-      ASM_OUTPUT_ALIGN (asm_out_file, align);\n-      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LPBX\", 3);\n-      for (i = 0; i < count_basic_blocks; i++)\n+      if (profile_block_flag)\n \t{\n-\t  ASM_GENERATE_INTERNAL_LABEL (name, \"LPB\", i);\n-\t  assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name),\n-\t\t\t    UNITS_PER_WORD, 1);\n+\t  /* Realign in new section */\n+\t  ASM_OUTPUT_ALIGN (asm_out_file, align);\n+\t  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LPBX\", 3);\n+\t  for (i = 0; i < count_basic_blocks; i++)\n+\t    {\n+\t      ASM_GENERATE_INTERNAL_LABEL (name, \"LPB\", i);\n+\t      assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name),\n+\t\t\t\tpointer_bytes, 1);\n+\t    }\n \t}\n \n       /* Output the table of function names.  */\n-      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LPBX\", 4);\n-      for ((ptr = bb_head), (i = 0); ptr != 0; (ptr = ptr->next), i++)\n+      if (profile_block_flag)\n \t{\n-\t  if (ptr->func_label_num >= 0)\n+\t  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LPBX\", 4);\n+\t  for ((ptr = bb_head), (i = 0); ptr != 0; (ptr = ptr->next), i++)\n \t    {\n-\t      ASM_GENERATE_INTERNAL_LABEL (name, \"LPBC\", ptr->func_label_num);\n-\t      assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name),\n-\t\t\t\tUNITS_PER_WORD, 1);\n+\t      if (ptr->func_label_num >= 0)\n+\t\t{\n+\t\t  ASM_GENERATE_INTERNAL_LABEL (name, \"LPBC\",\n+\t\t\t\t\t       ptr->func_label_num);\n+\t\t  assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name),\n+\t\t\t\t    pointer_bytes, 1);\n+\t\t}\n+\t      else\n+\t\tassemble_integer (const0_rtx, pointer_bytes, 1);\n \t    }\n-\t  else\n-\t    assemble_integer (const0_rtx, UNITS_PER_WORD, 1);\n-\t}\n \n-      for ( ; i < count_basic_blocks; i++)\n-\tassemble_integer (const0_rtx, UNITS_PER_WORD, 1);\n+\t  for ( ; i < count_basic_blocks; i++)\n+\t    assemble_integer (const0_rtx, pointer_bytes, 1);\n+\t}\n \n-      if (write_symbols != NO_DEBUG)\n+      if (write_symbols != NO_DEBUG && profile_block_flag)\n \t{\n \t  /* Output the table of line numbers.  */\n \t  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LPBX\", 5);\n \t  for ((ptr = bb_head), (i = 0); ptr != 0; (ptr = ptr->next), i++)\n-\t    assemble_integer (GEN_INT (ptr->line_num), UNITS_PER_WORD, 1);\n+\t    assemble_integer (GEN_INT (ptr->line_num), long_bytes, 1);\n \n \t  for ( ; i < count_basic_blocks; i++)\n-\t    assemble_integer (const0_rtx, UNITS_PER_WORD, 1);\n+\t    assemble_integer (const0_rtx, long_bytes, 1);\n \n \t  /* Output the table of file names.  */\n \t  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LPBX\", 6);\n \t  for ((ptr = bb_head), (i = 0); ptr != 0; (ptr = ptr->next), i++)\n \t    {\n \t      if (ptr->file_label_num >= 0)\n \t\t{\n-\t\t  ASM_GENERATE_INTERNAL_LABEL (name, \"LPBC\", ptr->file_label_num);\n+\t\t  ASM_GENERATE_INTERNAL_LABEL (name, \"LPBC\",\n+\t\t\t\t\t       ptr->file_label_num);\n \t\t  assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name),\n-\t\t\t\t    UNITS_PER_WORD, 1);\n+\t\t\t\t    pointer_bytes, 1);\n \t\t}\n \t      else\n-\t\tassemble_integer (const0_rtx, UNITS_PER_WORD, 1);\n+\t\tassemble_integer (const0_rtx, pointer_bytes, 1);\n \t    }\n \n \t  for ( ; i < count_basic_blocks; i++)\n-\t    assemble_integer (const0_rtx, UNITS_PER_WORD, 1);\n+\t    assemble_integer (const0_rtx, pointer_bytes, 1);\n \t}\n \n       /* End with the address of the table of addresses,\n \t so we can find it easily, as the last word in the file's text.  */\n-      ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 3);\n-      assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name), UNITS_PER_WORD, 1);\n+      if (profile_block_flag)\n+\t{\n+\t  ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 3);\n+\t  assemble_integer (gen_rtx (SYMBOL_REF, Pmode, name), pointer_bytes,\n+\t\t\t    1);\n+\t}\n     }\n }\n \n@@ -988,14 +1037,14 @@ static void\n profile_function (file)\n      FILE *file;\n {\n-  int align = MIN (BIGGEST_ALIGNMENT, POINTER_SIZE);\n+  int align = MIN (BIGGEST_ALIGNMENT, LONG_TYPE_SIZE);\n   int sval = current_function_returns_struct;\n   int cxt = current_function_needs_context;\n \n   data_section ();\n   ASM_OUTPUT_ALIGN (file, floor_log2 (align / BITS_PER_UNIT));\n   ASM_OUTPUT_INTERNAL_LABEL (file, \"LP\", profile_label_no);\n-  assemble_integer (const0_rtx, POINTER_SIZE / BITS_PER_UNIT, 1);\n+  assemble_integer (const0_rtx, LONG_TYPE_SIZE / BITS_PER_UNIT, 1);\n \n   text_section ();\n \n@@ -1135,6 +1184,8 @@ add_bb (file)\n      count of times it was entered.  */\n #ifdef BLOCK_PROFILER\n   BLOCK_PROFILER (file, count_basic_blocks);\n+#endif\n+#ifdef HAVE_cc0\n   CC_STATUS_INIT;\n #endif\n \n@@ -3077,7 +3128,7 @@ leaf_function_p ()\n {\n   rtx insn;\n \n-  if (profile_flag || profile_block_flag)\n+  if (profile_flag || profile_block_flag || profile_arc_flag)\n     return 0;\n \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))"}]}