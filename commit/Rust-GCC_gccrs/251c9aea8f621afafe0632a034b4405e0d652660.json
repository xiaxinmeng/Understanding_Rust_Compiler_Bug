{"sha": "251c9aea8f621afafe0632a034b4405e0d652660", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUxYzlhZWE4ZjYyMWFmYWZlMDYzMmEwMzRiNDQwNWUwZDY1MjY2MA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-10-26T14:11:59Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-10-27T07:25:50Z"}, "message": "call_summary: modify cgraph hooks.\n\ngcc/ChangeLog:\n\n\t* symbol-summary.h (function_summary_base::unregister_hooks):\n\tCall disable_insertion_hook and disable_duplication_hook.\n\t(function_summary_base::symtab_insertion): New field.\n\t(function_summary_base::symtab_removal): Likewise.\n\t(function_summary_base::symtab_duplication): Likewise.\n\tRegister hooks in function_summary_base and directly register\n\t(or unregister) hooks.", "tree": {"sha": "1ad2ca88d3ed349c2d7b277f9a51f53dba29d284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ad2ca88d3ed349c2d7b277f9a51f53dba29d284"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/251c9aea8f621afafe0632a034b4405e0d652660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251c9aea8f621afafe0632a034b4405e0d652660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/251c9aea8f621afafe0632a034b4405e0d652660", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251c9aea8f621afafe0632a034b4405e0d652660/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18cb6195fda69ea8ab8b8a5290dd8c9f8d52b0e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18cb6195fda69ea8ab8b8a5290dd8c9f8d52b0e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18cb6195fda69ea8ab8b8a5290dd8c9f8d52b0e6"}], "stats": {"total": 127, "additions": 65, "deletions": 62}, "files": [{"sha": "97106c7c25b1673767e920fd8d477369f25ebc22", "filename": "gcc/symbol-summary.h", "status": "modified", "additions": 65, "deletions": 62, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251c9aea8f621afafe0632a034b4405e0d652660/gcc%2Fsymbol-summary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251c9aea8f621afafe0632a034b4405e0d652660/gcc%2Fsymbol-summary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymbol-summary.h?ref=251c9aea8f621afafe0632a034b4405e0d652660", "patch": "@@ -28,12 +28,22 @@ class function_summary_base\n {\n public:\n   /* Default construction takes SYMTAB as an argument.  */\n-  function_summary_base (symbol_table *symtab CXX_MEM_STAT_INFO):\n-  m_symtab (symtab),\n-  m_insertion_enabled (true),\n-  m_duplication_enabled (true),\n+  function_summary_base (symbol_table *symtab,\n+\t\t\t cgraph_node_hook symtab_insertion,\n+\t\t\t cgraph_node_hook symtab_removal,\n+\t\t\t cgraph_2node_hook symtab_duplication\n+\t\t\t CXX_MEM_STAT_INFO):\n+  m_symtab (symtab), m_symtab_insertion (symtab_insertion),\n+  m_symtab_removal (symtab_removal),\n+  m_symtab_duplication (symtab_duplication),\n+  m_symtab_insertion_hook (NULL), m_symtab_duplication_hook (NULL),\n   m_allocator (\"function summary\" PASS_MEM_STAT)\n-  {}\n+  {\n+    enable_insertion_hook ();\n+    m_symtab_removal_hook\n+      = m_symtab->add_cgraph_removal_hook (m_symtab_removal, this);\n+    enable_duplication_hook ();\n+  }\n \n   /* Basic implementation of insert operation.  */\n   virtual void insert (cgraph_node *, T *)\n@@ -56,25 +66,37 @@ class function_summary_base\n   /* Enable insertion hook invocation.  */\n   void enable_insertion_hook ()\n   {\n-    m_insertion_enabled = true;\n+    if (m_symtab_insertion_hook == NULL)\n+      m_symtab_insertion_hook\n+\t= m_symtab->add_cgraph_insertion_hook (m_symtab_insertion, this);\n   }\n \n   /* Enable insertion hook invocation.  */\n   void disable_insertion_hook ()\n   {\n-    m_insertion_enabled = false;\n+    if (m_symtab_insertion_hook != NULL)\n+      {\n+\tm_symtab->remove_cgraph_insertion_hook (m_symtab_insertion_hook);\n+\tm_symtab_insertion_hook = NULL;\n+      }\n   }\n \n   /* Enable duplication hook invocation.  */\n   void enable_duplication_hook ()\n   {\n-    m_duplication_enabled = true;\n+    if (m_symtab_duplication_hook == NULL)\n+      m_symtab_duplication_hook\n+\t= m_symtab->add_cgraph_duplication_hook (m_symtab_duplication, this);\n   }\n \n   /* Enable duplication hook invocation.  */\n   void disable_duplication_hook ()\n   {\n-    m_duplication_enabled = false;\n+    if (m_symtab_duplication_hook != NULL)\n+      {\n+\tm_symtab->remove_cgraph_duplication_hook (m_symtab_duplication_hook);\n+\tm_symtab_duplication_hook = NULL;\n+      }\n   }\n \n protected:\n@@ -99,19 +121,22 @@ class function_summary_base\n   /* Unregister all call-graph hooks.  */\n   void unregister_hooks ();\n \n+  /* Symbol table the summary is registered to.  */\n+  symbol_table *m_symtab;\n+\n+  /* Insertion function defined by a summary.  */\n+  cgraph_node_hook m_symtab_insertion;\n+  /* Removal function defined by a summary.  */\n+  cgraph_node_hook m_symtab_removal;\n+  /* Duplication function defined by a summary.  */\n+  cgraph_2node_hook m_symtab_duplication;\n+\n   /* Internal summary insertion hook pointer.  */\n   cgraph_node_hook_list *m_symtab_insertion_hook;\n   /* Internal summary removal hook pointer.  */\n   cgraph_node_hook_list *m_symtab_removal_hook;\n   /* Internal summary duplication hook pointer.  */\n   cgraph_2node_hook_list *m_symtab_duplication_hook;\n-  /* Symbol table the summary is registered to.  */\n-  symbol_table *m_symtab;\n-\n-  /* Indicates if insertion hook is enabled.  */\n-  bool m_insertion_enabled;\n-  /* Indicates if duplication hook is enabled.  */\n-  bool m_duplication_enabled;\n \n private:\n   /* Return true when the summary uses GGC memory for allocation.  */\n@@ -125,9 +150,9 @@ template <typename T>\n void\n function_summary_base<T>::unregister_hooks ()\n {\n-  m_symtab->remove_cgraph_insertion_hook (m_symtab_insertion_hook);\n+  disable_insertion_hook ();\n   m_symtab->remove_cgraph_removal_hook (m_symtab_removal_hook);\n-  m_symtab->remove_cgraph_duplication_hook (m_symtab_duplication_hook);\n+  disable_duplication_hook ();\n }\n \n /* We want to pass just pointer types as argument for function_summary\n@@ -242,19 +267,11 @@ class GTY((user)) function_summary <T *>: public function_summary_base<T>\n template <typename T>\n function_summary<T *>::function_summary (symbol_table *symtab, bool ggc\n \t\t\t\t\t MEM_STAT_DECL):\n-  function_summary_base<T> (symtab PASS_MEM_STAT), m_ggc (ggc),\n-  m_map (13, ggc, true, GATHER_STATISTICS PASS_MEM_STAT)\n-{\n-  this->m_symtab_insertion_hook\n-    = this->m_symtab->add_cgraph_insertion_hook (function_summary::symtab_insertion,\n-\t\t\t\t\t\t this);\n-  this->m_symtab_removal_hook\n-    = this->m_symtab->add_cgraph_removal_hook (function_summary::symtab_removal,\n-\t\t\t\t\t       this);\n-  this->m_symtab_duplication_hook\n-    = this->m_symtab->add_cgraph_duplication_hook (function_summary::symtab_duplication,\n-\t\t\t\t\t\t   this);\n-}\n+  function_summary_base<T> (symtab, function_summary::symtab_insertion,\n+\t\t\t    function_summary::symtab_removal,\n+\t\t\t    function_summary::symtab_duplication\n+\t\t\t    PASS_MEM_STAT),\n+  m_ggc (ggc), m_map (13, ggc, true, GATHER_STATISTICS PASS_MEM_STAT) {}\n \n template <typename T>\n function_summary<T *>::~function_summary ()\n@@ -273,9 +290,7 @@ function_summary<T *>::symtab_insertion (cgraph_node *node, void *data)\n {\n   gcc_checking_assert (node->get_uid ());\n   function_summary *summary = (function_summary <T *> *) (data);\n-\n-  if (summary->m_insertion_enabled)\n-    summary->insert (node, summary->get_create (node));\n+  summary->insert (node, summary->get_create (node));\n }\n \n template <typename T>\n@@ -293,13 +308,10 @@ function_summary<T *>::symtab_duplication (cgraph_node *node,\n \t\t\t\t\t   cgraph_node *node2, void *data)\n {\n   function_summary *summary = (function_summary <T *> *) (data);\n-  if (summary->m_duplication_enabled)\n-    {\n-      T *v = summary->get (node);\n+  T *v = summary->get (node);\n \n-      if (v)\n-\tsummary->duplicate (node, node2, v, summary->get_create (node2));\n-    }\n+  if (v)\n+    summary->duplicate (node, node2, v, summary->get_create (node2));\n }\n \n template <typename T>\n@@ -439,19 +451,15 @@ class GTY((user)) fast_function_summary <T *, V>\n };\n \n template <typename T, typename V>\n-fast_function_summary<T *, V>::fast_function_summary (symbol_table *symtab MEM_STAT_DECL):\n-  function_summary_base<T> (symtab PASS_MEM_STAT), m_vector (NULL)\n+fast_function_summary<T *, V>::fast_function_summary (symbol_table *symtab\n+\t\t\t\t\t\t      MEM_STAT_DECL):\n+  function_summary_base<T> (symtab,\n+\t\t\t    fast_function_summary::symtab_insertion,\n+\t\t\t    fast_function_summary::symtab_removal,\n+\t\t\t    fast_function_summary::symtab_duplication\n+\t\t\t    PASS_MEM_STAT), m_vector (NULL)\n {\n   vec_alloc (m_vector, 13 PASS_MEM_STAT);\n-  this->m_symtab_insertion_hook\n-    = this->m_symtab->add_cgraph_insertion_hook (fast_function_summary::symtab_insertion,\n-\t\t\t\t\t\t this);\n-  this->m_symtab_removal_hook\n-    = this->m_symtab->add_cgraph_removal_hook (fast_function_summary::symtab_removal,\n-\t\t\t\t\t       this);\n-  this->m_symtab_duplication_hook\n-    = this->m_symtab->add_cgraph_duplication_hook (fast_function_summary::symtab_duplication,\n-\t\t\t\t\t\t   this);\n }\n \n template <typename T, typename V>\n@@ -472,9 +480,7 @@ fast_function_summary<T *, V>::symtab_insertion (cgraph_node *node, void *data)\n {\n   gcc_checking_assert (node->get_uid ());\n   fast_function_summary *summary = (fast_function_summary <T *, V> *) (data);\n-\n-  if (summary->m_insertion_enabled)\n-    summary->insert (node, summary->get_create (node));\n+  summary->insert (node, summary->get_create (node));\n }\n \n template <typename T, typename V>\n@@ -495,15 +501,12 @@ fast_function_summary<T *, V>::symtab_duplication (cgraph_node *node,\n \t\t\t\t\t\t   void *data)\n {\n   fast_function_summary *summary = (fast_function_summary <T *, V> *) (data);\n-  if (summary->m_duplication_enabled)\n-    {\n-      T *v = summary->get (node);\n+  T *v = summary->get (node);\n \n-      if (v)\n-\t{\n-\t  T *duplicate = summary->get_create (node2);\n-\t  summary->duplicate (node, node2, v, duplicate);\n-\t}\n+  if (v)\n+    {\n+      T *duplicate = summary->get_create (node2);\n+      summary->duplicate (node, node2, v, duplicate);\n     }\n }\n "}]}