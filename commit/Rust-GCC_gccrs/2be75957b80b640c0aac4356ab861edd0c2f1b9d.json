{"sha": "2be75957b80b640c0aac4356ab861edd0c2f1b9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJlNzU5NTdiODBiNjQwYzBhYWM0MzU2YWI4NjFlZGQwYzJmMWI5ZA==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2016-01-14T18:12:43Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2016-01-14T18:12:43Z"}, "message": "Implement TR29124 C++ special Math Functions.\n\n2016-01-14  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\t    Jonathan Wakely  <jwakely@redhat.com>\n\t    Florian Goth <CaptainSifff@gmx.de>\n\n\tImplement TR29124 C++ special Math Functions.\n\t* include/Makefile.am: Add new headers.\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/specfun.h: New.\n\t* include/c_global/cmath: Adjust for both tr1 and tr29124 maths.\n\t* include/tr1/bessel_function.tcc: Ditto.\n\t* include/tr1/beta_function.tcc: Ditto.\n\t* include/tr1/cmath: Ditto.\n\t* include/tr1/ell_integral.tcc: Ditto.\n\t* include/tr1/exp_integral.tcc: Ditto.\n\t* include/tr1/gamma.tcc: Ditto.\n\t* include/tr1/hypergeometric.tcc: Ditto.\n\t* include/tr1/legendre_function.tcc: Ditto.\n\t* include/tr1/modified_bessel_func.tcc: Ditto.\n\t* include/tr1/poly_hermite.tcc: Ditto.\n\t* include/tr1/poly_laguerre.tcc: Ditto.\n\t* include/tr1/riemann_zeta.tcc: Ditto.\n\t* include/tr1/special_function_util.h: Ditto.\n\t* testsuite/ext/special_functions/conf_hyperg: New.\n\t* testsuite/ext/special_functions/conf_hyperg/check_nan.cc: New.\n\t* testsuite/ext/special_functions/conf_hyperg/check_value.cc: New.\n\t* testsuite/ext/special_functions/conf_hyperg/compile.cc: New.\n\t* testsuite/ext/special_functions/hyperg: New.\n\t* testsuite/ext/special_functions/hyperg/check_nan.cc: New.\n\t* testsuite/ext/special_functions/hyperg/check_value.cc: New.\n\t* testsuite/ext/special_functions/hyperg/compile.cc: New.\n\t* testsuite/libstdc++-dg/conformance.exp: Add special_functions directory.\n\t* testsuite/special_functions/01_assoc_laguerre/check_nan.cc: New.\n\t* testsuite/special_functions/01_assoc_laguerre/check_value.cc: New.\n\t* testsuite/special_functions/01_assoc_laguerre/compile.cc: New.\n\t* testsuite/special_functions/01_assoc_laguerre/compile_2.cc: New.\n\t* testsuite/special_functions/02_assoc_legendre/check_nan.cc: New.\n\t* testsuite/special_functions/02_assoc_legendre/check_value.cc: New.\n\t* testsuite/special_functions/02_assoc_legendre/compile.cc: New.\n\t* testsuite/special_functions/02_assoc_legendre/compile_2.cc: New.\n\t* testsuite/special_functions/03_beta/check_nan.cc: New.\n\t* testsuite/special_functions/03_beta/check_value.cc: New.\n\t* testsuite/special_functions/03_beta/compile.cc: New.\n\t* testsuite/special_functions/03_beta/compile_2.cc: New.\n\t* testsuite/special_functions/04_comp_ellint_1/check_nan.cc: New.\n\t* testsuite/special_functions/04_comp_ellint_1/check_value.cc: New.\n\t* testsuite/special_functions/04_comp_ellint_1/compile.cc: New.\n\t* testsuite/special_functions/04_comp_ellint_1/compile_2.cc: New.\n\t* testsuite/special_functions/05_comp_ellint_2/check_nan.cc: New.\n\t* testsuite/special_functions/05_comp_ellint_2/check_value.cc: New.\n\t* testsuite/special_functions/05_comp_ellint_2/compile.cc: New.\n\t* testsuite/special_functions/05_comp_ellint_2/compile_2.cc: New.\n\t* testsuite/special_functions/06_comp_ellint_3/check_nan.cc: New.\n\t* testsuite/special_functions/06_comp_ellint_3/check_value.cc: New.\n\t* testsuite/special_functions/06_comp_ellint_3/compile.cc: New.\n\t* testsuite/special_functions/06_comp_ellint_3/compile_2.cc: New.\n\t* testsuite/special_functions/07_cyl_bessel_i/check_nan.cc: New.\n\t* testsuite/special_functions/07_cyl_bessel_i/check_value.cc: New.\n\t* testsuite/special_functions/07_cyl_bessel_i/compile.cc: New.\n\t* testsuite/special_functions/07_cyl_bessel_i/compile_2.cc: New.\n\t* testsuite/special_functions/07_cyl_bessel_i/pr56216.cc: New.\n\t* testsuite/special_functions/08_cyl_bessel_j/check_nan.cc: New.\n\t* testsuite/special_functions/08_cyl_bessel_j/check_value.cc: New.\n\t* testsuite/special_functions/08_cyl_bessel_j/compile.cc: New.\n\t* testsuite/special_functions/08_cyl_bessel_j/compile_2.cc: New.\n\t* testsuite/special_functions/09_cyl_bessel_k/check_nan.cc: New.\n\t* testsuite/special_functions/09_cyl_bessel_k/check_value.cc: New.\n\t* testsuite/special_functions/09_cyl_bessel_k/compile.cc: New.\n\t* testsuite/special_functions/09_cyl_bessel_k/compile_2.cc: New.\n\t* testsuite/special_functions/10_cyl_neumann/check_nan.cc: New.\n\t* testsuite/special_functions/10_cyl_neumann/check_value.cc: New.\n\t* testsuite/special_functions/10_cyl_neumann/compile.cc: New.\n\t* testsuite/special_functions/10_cyl_neumann/compile_2.cc: New.\n\t* testsuite/special_functions/11_ellint_1/check_nan.cc: New.\n\t* testsuite/special_functions/11_ellint_1/check_value.cc: New.\n\t* testsuite/special_functions/11_ellint_1/compile.cc: New.\n\t* testsuite/special_functions/11_ellint_1/compile_2.cc: New.\n\t* testsuite/special_functions/12_ellint_2/check_nan.cc: New.\n\t* testsuite/special_functions/12_ellint_2/check_value.cc: New.\n\t* testsuite/special_functions/12_ellint_2/compile.cc: New.\n\t* testsuite/special_functions/12_ellint_2/compile_2.cc: New.\n\t* testsuite/special_functions/13_ellint_3/check_nan.cc: New.\n\t* testsuite/special_functions/13_ellint_3/check_value.cc: New.\n\t* testsuite/special_functions/13_ellint_3/compile.cc: New.\n\t* testsuite/special_functions/13_ellint_3/compile_2.cc: New.\n\t* testsuite/special_functions/14_expint/check_nan.cc: New.\n\t* testsuite/special_functions/14_expint/check_value.cc: New.\n\t* testsuite/special_functions/14_expint/compile.cc: New.\n\t* testsuite/special_functions/14_expint/compile_2.cc: New.\n\t* testsuite/special_functions/15_hermite/check_nan.cc: New.\n\t* testsuite/special_functions/15_hermite/check_value.cc: New.\n\t* testsuite/special_functions/15_hermite/compile.cc: New.\n\t* testsuite/special_functions/15_hermite/compile_2.cc: New.\n\t* testsuite/special_functions/16_laguerre/check_nan.cc: New.\n\t* testsuite/special_functions/16_laguerre/check_value.cc: New.\n\t* testsuite/special_functions/16_laguerre/compile.cc: New.\n\t* testsuite/special_functions/16_laguerre/compile_2.cc: New.\n\t* testsuite/special_functions/17_legendre/check_nan.cc: New.\n\t* testsuite/special_functions/17_legendre/check_value.cc: New.\n\t* testsuite/special_functions/17_legendre/compile.cc: New.\n\t* testsuite/special_functions/17_legendre/compile_2.cc: New.\n\t* testsuite/special_functions/18_riemann_zeta/check_nan.cc: New.\n\t* testsuite/special_functions/18_riemann_zeta/check_value.cc: New.\n\t* testsuite/special_functions/18_riemann_zeta/compile.cc: New.\n\t* testsuite/special_functions/18_riemann_zeta/compile_2.cc: New.\n\t* testsuite/special_functions/19_sph_bessel/check_nan.cc: New.\n\t* testsuite/special_functions/19_sph_bessel/check_value.cc: New.\n\t* testsuite/special_functions/19_sph_bessel/compile.cc: New.\n\t* testsuite/special_functions/19_sph_bessel/compile_2.cc: New.\n\t* testsuite/special_functions/20_sph_legendre/check_nan.cc: New.\n\t* testsuite/special_functions/20_sph_legendre/check_value.cc: New.\n\t* testsuite/special_functions/20_sph_legendre/compile.cc: New.\n\t* testsuite/special_functions/20_sph_legendre/compile_2.cc: New.\n\t* testsuite/special_functions/21_sph_neumann/check_nan.cc: New.\n\t* testsuite/special_functions/21_sph_neumann/check_value.cc: New.\n\t* testsuite/special_functions/21_sph_neumann/compile.cc: New.\n\t* testsuite/special_functions/21_sph_neumann/compile_2.cc: New.\n\t* testsuite/util/specfun_testcase.h: New.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/08_cyl_bessel_i/check_value.cc: More testcases.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/09_cyl_bessel_j/check_value.cc: Ditto.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/10_cyl_bessel_k/check_value.cc: Ditto.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/11_cyl_neumann/check_value.cc: Ditto.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/21_sph_bessel/check_value.cc: Ditto.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/23_sph_neumann/check_value.cc: Ditto.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/16_hermite/check_value.cc: New.\n\n\nCo-Authored-By: Florian Goth <CaptainSifff@gmx.de>\nCo-Authored-By: Jonathan Wakely <jwakely@redhat.com>\n\nFrom-SVN: r232377", "tree": {"sha": "0455764930d231084ffd7ab299b1d5fc734f1c33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0455764930d231084ffd7ab299b1d5fc734f1c33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2be75957b80b640c0aac4356ab861edd0c2f1b9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be75957b80b640c0aac4356ab861edd0c2f1b9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be75957b80b640c0aac4356ab861edd0c2f1b9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be75957b80b640c0aac4356ab861edd0c2f1b9d/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00083992a68feb592575464d5be98e281e8a2d8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00083992a68feb592575464d5be98e281e8a2d8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00083992a68feb592575464d5be98e281e8a2d8e"}], "stats": {"total": 50473, "additions": 48208, "deletions": 2265}, "files": [{"sha": "2797b829bb333632e35af3e7593eac8246f8c1ee", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -1,3 +1,128 @@\n+2016-01-14  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\t    Florian Goth <CaptainSifff@gmx.de>\n+\n+\tImplement TR29124 C++ special Math Functions.\n+\t* include/Makefile.am: Add new headers.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/specfun.h: New.\n+\t* include/c_global/cmath: Adjust for both tr1 and tr29124 maths.\n+\t* include/tr1/bessel_function.tcc: Ditto.\n+\t* include/tr1/beta_function.tcc: Ditto.\n+\t* include/tr1/cmath: Ditto.\n+\t* include/tr1/ell_integral.tcc: Ditto.\n+\t* include/tr1/exp_integral.tcc: Ditto.\n+\t* include/tr1/gamma.tcc: Ditto.\n+\t* include/tr1/hypergeometric.tcc: Ditto.\n+\t* include/tr1/legendre_function.tcc: Ditto.\n+\t* include/tr1/modified_bessel_func.tcc: Ditto.\n+\t* include/tr1/poly_hermite.tcc: Ditto.\n+\t* include/tr1/poly_laguerre.tcc: Ditto.\n+\t* include/tr1/riemann_zeta.tcc: Ditto.\n+\t* include/tr1/special_function_util.h: Ditto.\n+\t* testsuite/ext/special_functions/conf_hyperg: New.\n+\t* testsuite/ext/special_functions/conf_hyperg/check_nan.cc: New.\n+\t* testsuite/ext/special_functions/conf_hyperg/check_value.cc: New.\n+\t* testsuite/ext/special_functions/conf_hyperg/compile.cc: New.\n+\t* testsuite/ext/special_functions/hyperg: New.\n+\t* testsuite/ext/special_functions/hyperg/check_nan.cc: New.\n+\t* testsuite/ext/special_functions/hyperg/check_value.cc: New.\n+\t* testsuite/ext/special_functions/hyperg/compile.cc: New.\n+\t* testsuite/libstdc++-dg/conformance.exp: Add special_functions directory.\n+\t* testsuite/special_functions/01_assoc_laguerre/check_nan.cc: New.\n+\t* testsuite/special_functions/01_assoc_laguerre/check_value.cc: New.\n+\t* testsuite/special_functions/01_assoc_laguerre/compile.cc: New.\n+\t* testsuite/special_functions/01_assoc_laguerre/compile_2.cc: New.\n+\t* testsuite/special_functions/02_assoc_legendre/check_nan.cc: New.\n+\t* testsuite/special_functions/02_assoc_legendre/check_value.cc: New.\n+\t* testsuite/special_functions/02_assoc_legendre/compile.cc: New.\n+\t* testsuite/special_functions/02_assoc_legendre/compile_2.cc: New.\n+\t* testsuite/special_functions/03_beta/check_nan.cc: New.\n+\t* testsuite/special_functions/03_beta/check_value.cc: New.\n+\t* testsuite/special_functions/03_beta/compile.cc: New.\n+\t* testsuite/special_functions/03_beta/compile_2.cc: New.\n+\t* testsuite/special_functions/04_comp_ellint_1/check_nan.cc: New.\n+\t* testsuite/special_functions/04_comp_ellint_1/check_value.cc: New.\n+\t* testsuite/special_functions/04_comp_ellint_1/compile.cc: New.\n+\t* testsuite/special_functions/04_comp_ellint_1/compile_2.cc: New.\n+\t* testsuite/special_functions/05_comp_ellint_2/check_nan.cc: New.\n+\t* testsuite/special_functions/05_comp_ellint_2/check_value.cc: New.\n+\t* testsuite/special_functions/05_comp_ellint_2/compile.cc: New.\n+\t* testsuite/special_functions/05_comp_ellint_2/compile_2.cc: New.\n+\t* testsuite/special_functions/06_comp_ellint_3/check_nan.cc: New.\n+\t* testsuite/special_functions/06_comp_ellint_3/check_value.cc: New.\n+\t* testsuite/special_functions/06_comp_ellint_3/compile.cc: New.\n+\t* testsuite/special_functions/06_comp_ellint_3/compile_2.cc: New.\n+\t* testsuite/special_functions/07_cyl_bessel_i/check_nan.cc: New.\n+\t* testsuite/special_functions/07_cyl_bessel_i/check_value.cc: New.\n+\t* testsuite/special_functions/07_cyl_bessel_i/compile.cc: New.\n+\t* testsuite/special_functions/07_cyl_bessel_i/compile_2.cc: New.\n+\t* testsuite/special_functions/07_cyl_bessel_i/pr56216.cc: New.\n+\t* testsuite/special_functions/08_cyl_bessel_j/check_nan.cc: New.\n+\t* testsuite/special_functions/08_cyl_bessel_j/check_value.cc: New.\n+\t* testsuite/special_functions/08_cyl_bessel_j/compile.cc: New.\n+\t* testsuite/special_functions/08_cyl_bessel_j/compile_2.cc: New.\n+\t* testsuite/special_functions/09_cyl_bessel_k/check_nan.cc: New.\n+\t* testsuite/special_functions/09_cyl_bessel_k/check_value.cc: New.\n+\t* testsuite/special_functions/09_cyl_bessel_k/compile.cc: New.\n+\t* testsuite/special_functions/09_cyl_bessel_k/compile_2.cc: New.\n+\t* testsuite/special_functions/10_cyl_neumann/check_nan.cc: New.\n+\t* testsuite/special_functions/10_cyl_neumann/check_value.cc: New.\n+\t* testsuite/special_functions/10_cyl_neumann/compile.cc: New.\n+\t* testsuite/special_functions/10_cyl_neumann/compile_2.cc: New.\n+\t* testsuite/special_functions/11_ellint_1/check_nan.cc: New.\n+\t* testsuite/special_functions/11_ellint_1/check_value.cc: New.\n+\t* testsuite/special_functions/11_ellint_1/compile.cc: New.\n+\t* testsuite/special_functions/11_ellint_1/compile_2.cc: New.\n+\t* testsuite/special_functions/12_ellint_2/check_nan.cc: New.\n+\t* testsuite/special_functions/12_ellint_2/check_value.cc: New.\n+\t* testsuite/special_functions/12_ellint_2/compile.cc: New.\n+\t* testsuite/special_functions/12_ellint_2/compile_2.cc: New.\n+\t* testsuite/special_functions/13_ellint_3/check_nan.cc: New.\n+\t* testsuite/special_functions/13_ellint_3/check_value.cc: New.\n+\t* testsuite/special_functions/13_ellint_3/compile.cc: New.\n+\t* testsuite/special_functions/13_ellint_3/compile_2.cc: New.\n+\t* testsuite/special_functions/14_expint/check_nan.cc: New.\n+\t* testsuite/special_functions/14_expint/check_value.cc: New.\n+\t* testsuite/special_functions/14_expint/compile.cc: New.\n+\t* testsuite/special_functions/14_expint/compile_2.cc: New.\n+\t* testsuite/special_functions/15_hermite/check_nan.cc: New.\n+\t* testsuite/special_functions/15_hermite/check_value.cc: New.\n+\t* testsuite/special_functions/15_hermite/compile.cc: New.\n+\t* testsuite/special_functions/15_hermite/compile_2.cc: New.\n+\t* testsuite/special_functions/16_laguerre/check_nan.cc: New.\n+\t* testsuite/special_functions/16_laguerre/check_value.cc: New.\n+\t* testsuite/special_functions/16_laguerre/compile.cc: New.\n+\t* testsuite/special_functions/16_laguerre/compile_2.cc: New.\n+\t* testsuite/special_functions/17_legendre/check_nan.cc: New.\n+\t* testsuite/special_functions/17_legendre/check_value.cc: New.\n+\t* testsuite/special_functions/17_legendre/compile.cc: New.\n+\t* testsuite/special_functions/17_legendre/compile_2.cc: New.\n+\t* testsuite/special_functions/18_riemann_zeta/check_nan.cc: New.\n+\t* testsuite/special_functions/18_riemann_zeta/check_value.cc: New.\n+\t* testsuite/special_functions/18_riemann_zeta/compile.cc: New.\n+\t* testsuite/special_functions/18_riemann_zeta/compile_2.cc: New.\n+\t* testsuite/special_functions/19_sph_bessel/check_nan.cc: New.\n+\t* testsuite/special_functions/19_sph_bessel/check_value.cc: New.\n+\t* testsuite/special_functions/19_sph_bessel/compile.cc: New.\n+\t* testsuite/special_functions/19_sph_bessel/compile_2.cc: New.\n+\t* testsuite/special_functions/20_sph_legendre/check_nan.cc: New.\n+\t* testsuite/special_functions/20_sph_legendre/check_value.cc: New.\n+\t* testsuite/special_functions/20_sph_legendre/compile.cc: New.\n+\t* testsuite/special_functions/20_sph_legendre/compile_2.cc: New.\n+\t* testsuite/special_functions/21_sph_neumann/check_nan.cc: New.\n+\t* testsuite/special_functions/21_sph_neumann/check_value.cc: New.\n+\t* testsuite/special_functions/21_sph_neumann/compile.cc: New.\n+\t* testsuite/special_functions/21_sph_neumann/compile_2.cc: New.\n+\t* testsuite/util/specfun_testcase.h: New.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/08_cyl_bessel_i/check_value.cc: More testcases.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/09_cyl_bessel_j/check_value.cc: Ditto.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/10_cyl_bessel_k/check_value.cc: Ditto.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/11_cyl_neumann/check_value.cc: Ditto.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/21_sph_bessel/check_value.cc: Ditto.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/23_sph_neumann/check_value.cc: Ditto.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/16_hermite/check_value.cc: New.\n+\n 2016-01-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/48891"}, {"sha": "07dc48a556781682aac5b18088e9692c9e72bfa4", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -120,6 +120,7 @@ bits_headers = \\\n \t${bits_srcdir}/locale_facets_nonio.tcc \\\n \t${bits_srcdir}/localefwd.h \\\n \t${bits_srcdir}/mask_array.h \\\n+\t${bits_srcdir}/specfun.h \\\n \t${bits_srcdir}/memoryfwd.h \\\n \t${bits_srcdir}/move.h \\\n \t${bits_srcdir}/std_mutex.h \\"}, {"sha": "f2fb4daeb05ccc2bc339e44b47cb076b8ff3349f", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -410,6 +410,7 @@ bits_headers = \\\n \t${bits_srcdir}/locale_facets_nonio.tcc \\\n \t${bits_srcdir}/localefwd.h \\\n \t${bits_srcdir}/mask_array.h \\\n+\t${bits_srcdir}/specfun.h \\\n \t${bits_srcdir}/memoryfwd.h \\\n \t${bits_srcdir}/move.h \\\n \t${bits_srcdir}/std_mutex.h \\"}, {"sha": "28c9d30e5be28671eb604f67b94275f47eb17d31", "filename": "libstdc++-v3/include/bits/specfun.h", "status": "added", "additions": 499, "deletions": 0, "changes": 499, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fspecfun.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fspecfun.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fspecfun.h?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,499 @@\n+// Mathematical Special Functions for -*- C++ -*-\n+\n+// Copyright (C) 2006-2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/specfun.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{cmath}\n+ */\n+\n+#ifndef _GLIBCXX_BITS_SPECFUN_H\n+#define _GLIBCXX_BITS_SPECFUN_H 1\n+\n+#pragma GCC visibility push(default)\n+\n+#include <bits/c++config.h>\n+\n+#if __STDCPP_WANT_MATH_SPEC_FUNCS__ == 0\n+# error include <cmath> and define __STDCPP_WANT_MATH_SPEC_FUNCS__\n+#endif\n+\n+#define __STDCPP_MATH_SPEC_FUNCS__ 201003L\n+\n+#include <bits/stl_algobase.h>\n+#include <limits>\n+#include <type_traits>\n+\n+#include <tr1/gamma.tcc>\n+#include <tr1/bessel_function.tcc>\n+#include <tr1/beta_function.tcc>\n+#include <tr1/ell_integral.tcc>\n+#include <tr1/exp_integral.tcc>\n+#include <tr1/hypergeometric.tcc>\n+#include <tr1/legendre_function.tcc>\n+#include <tr1/modified_bessel_func.tcc>\n+#include <tr1/poly_hermite.tcc>\n+#include <tr1/poly_laguerre.tcc>\n+#include <tr1/riemann_zeta.tcc>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /**\n+   * @defgroup mathsf Mathematical Special Functions\n+   * @ingroup numerics\n+   *\n+   * A collection of advanced mathematical special functions,\n+   * defined by ISO/IEC IS 29124.\n+   * @{\n+   */\n+\n+  // Associated Laguerre polynomials\n+\n+  inline float\n+  assoc_laguerref(unsigned int __n, unsigned int __m, float __x)\n+  { return __detail::__assoc_laguerre<float>(__n, __m, __x); }\n+\n+  inline long double\n+  assoc_laguerrel(unsigned int __n, unsigned int __m, long double __x)\n+  { return __detail::__assoc_laguerre<long double>(__n, __m, __x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    assoc_laguerre(unsigned int __n, unsigned int __m, _Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __detail::__assoc_laguerre<__type>(__n, __m, __x);\n+    }\n+\n+  // Associated Legendre functions\n+\n+  inline float\n+  assoc_legendref(unsigned int __l, unsigned int __m, float __x)\n+  { return __detail::__assoc_legendre_p<float>(__l, __m, __x); }\n+\n+  inline long double\n+  assoc_legendrel(unsigned int __l, unsigned int __m, long double __x)\n+  { return __detail::__assoc_legendre_p<long double>(__l, __m, __x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    assoc_legendre(unsigned int __l, unsigned int __m, _Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __detail::__assoc_legendre_p<__type>(__l, __m, __x);\n+    }\n+\n+  // Beta functions\n+\n+  inline float\n+  betaf(float __x, float __y)\n+  { return __detail::__beta<float>(__x, __y); }\n+\n+  inline long double\n+  betal(long double __x, long double __y)\n+  { return __detail::__beta<long double>(__x, __y); }\n+\n+  template<typename _Tpx, typename _Tpy>\n+    inline typename __gnu_cxx::__promote_2<_Tpx, _Tpy>::__type\n+    beta(_Tpx __x, _Tpy __y)\n+    {\n+      typedef typename __gnu_cxx::__promote_2<_Tpx, _Tpy>::__type __type;\n+      return __detail::__beta<__type>(__x, __y);\n+    }\n+\n+  // Complete elliptic integrals of the first kind\n+\n+  inline float\n+  comp_ellint_1f(float __k)\n+  { return __detail::__comp_ellint_1<float>(__k); }\n+\n+  inline long double\n+  comp_ellint_1l(long double __k)\n+  { return __detail::__comp_ellint_1<long double>(__k); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    comp_ellint_1(_Tp __k)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __detail::__comp_ellint_1<__type>(__k);\n+    }\n+\n+  // Complete elliptic integrals of the second kind\n+\n+  inline float\n+  comp_ellint_2f(float __k)\n+  { return __detail::__comp_ellint_2<float>(__k); }\n+\n+  inline long double\n+  comp_ellint_2l(long double __k)\n+  { return __detail::__comp_ellint_2<long double>(__k); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    comp_ellint_2(_Tp __k)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __detail::__comp_ellint_2<__type>(__k);\n+    }\n+\n+  // Complete elliptic integrals of the third kind\n+\n+  inline float\n+  comp_ellint_3f(float __k, float __nu)\n+  { return __detail::__comp_ellint_3<float>(__k, __nu); }\n+\n+  inline long double\n+  comp_ellint_3l(long double __k, long double __nu)\n+  { return __detail::__comp_ellint_3<long double>(__k, __nu); }\n+\n+  template<typename _Tp, typename _Tpn>\n+    inline typename __gnu_cxx::__promote_2<_Tp, _Tpn>::__type\n+    comp_ellint_3(_Tp __k, _Tpn __nu)\n+    {\n+      typedef typename __gnu_cxx::__promote_2<_Tp, _Tpn>::__type __type;\n+      return __detail::__comp_ellint_3<__type>(__k, __nu);\n+    }\n+\n+  // Regular modified cylindrical Bessel functions\n+\n+  inline float\n+  cyl_bessel_if(float __nu, float __x)\n+  { return __detail::__cyl_bessel_i<float>(__nu, __x); }\n+\n+  inline long double\n+  cyl_bessel_il(long double __nu, long double __x)\n+  { return __detail::__cyl_bessel_i<long double>(__nu, __x); }\n+\n+  template<typename _Tpnu, typename _Tp>\n+    inline typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type\n+    cyl_bessel_i(_Tpnu __nu, _Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type __type;\n+      return __detail::__cyl_bessel_i<__type>(__nu, __x);\n+    }\n+\n+  // Cylindrical Bessel functions (of the first kind)\n+\n+  inline float\n+  cyl_bessel_jf(float __nu, float __x)\n+  { return __detail::__cyl_bessel_j<float>(__nu, __x); }\n+\n+  inline long double\n+  cyl_bessel_jl(long double __nu, long double __x)\n+  { return __detail::__cyl_bessel_j<long double>(__nu, __x); }\n+\n+  template<typename _Tpnu, typename _Tp>\n+    inline typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type\n+    cyl_bessel_j(_Tpnu __nu, _Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type __type;\n+      return __detail::__cyl_bessel_j<__type>(__nu, __x);\n+    }\n+\n+  // Irregular modified cylindrical Bessel functions\n+\n+  inline float\n+  cyl_bessel_kf(float __nu, float __x)\n+  { return __detail::__cyl_bessel_k<float>(__nu, __x); }\n+\n+  inline long double\n+  cyl_bessel_kl(long double __nu, long double __x)\n+  { return __detail::__cyl_bessel_k<long double>(__nu, __x); }\n+\n+  template<typename _Tpnu, typename _Tp>\n+    inline typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type\n+    cyl_bessel_k(_Tpnu __nu, _Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type __type;\n+      return __detail::__cyl_bessel_k<__type>(__nu, __x);\n+    }\n+\n+  // Cylindrical Neumann functions\n+\n+  inline float\n+  cyl_neumannf(float __nu, float __x)\n+  { return __detail::__cyl_neumann_n<float>(__nu, __x); }\n+\n+  inline long double\n+  cyl_neumannl(long double __nu, long double __x)\n+  { return __detail::__cyl_neumann_n<long double>(__nu, __x); }\n+\n+  template<typename _Tpnu, typename _Tp>\n+    inline typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type\n+    cyl_neumann(_Tpnu __nu, _Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type __type;\n+      return __detail::__cyl_neumann_n<__type>(__nu, __x);\n+    }\n+\n+  // Incomplete elliptic integrals of the first kind\n+\n+  inline float\n+  ellint_1f(float __k, float __phi)\n+  { return __detail::__ellint_1<float>(__k, __phi); }\n+\n+  inline long double\n+  ellint_1l(long double __k, long double __phi)\n+  { return __detail::__ellint_1<long double>(__k, __phi); }\n+\n+  template<typename _Tp, typename _Tpp>\n+    inline typename __gnu_cxx::__promote_2<_Tp, _Tpp>::__type\n+    ellint_1(_Tp __k, _Tpp __phi)\n+    {\n+      typedef typename __gnu_cxx::__promote_2<_Tp, _Tpp>::__type __type;\n+      return __detail::__ellint_1<__type>(__k, __phi);\n+    }\n+\n+  // Incomplete elliptic integrals of the second kind\n+\n+  inline float\n+  ellint_2f(float __k, float __phi)\n+  { return __detail::__ellint_2<float>(__k, __phi); }\n+\n+  inline long double\n+  ellint_2l(long double __k, long double __phi)\n+  { return __detail::__ellint_2<long double>(__k, __phi); }\n+\n+  template<typename _Tp, typename _Tpp>\n+    inline typename __gnu_cxx::__promote_2<_Tp, _Tpp>::__type\n+    ellint_2(_Tp __k, _Tpp __phi)\n+    {\n+      typedef typename __gnu_cxx::__promote_2<_Tp, _Tpp>::__type __type;\n+      return __detail::__ellint_2<__type>(__k, __phi);\n+    }\n+\n+  // Incomplete elliptic integrals of the third kind\n+\n+  inline float\n+  ellint_3f(float __k, float __nu, float __phi)\n+  { return __detail::__ellint_3<float>(__k, __nu, __phi); }\n+\n+  inline long double\n+  ellint_3l(long double __k, long double __nu, long double __phi)\n+  { return __detail::__ellint_3<long double>(__k, __nu, __phi); }\n+\n+  template<typename _Tp, typename _Tpn, typename _Tpp>\n+    inline typename __gnu_cxx::__promote_3<_Tp, _Tpn, _Tpp>::__type\n+    ellint_3(_Tp __k, _Tpn __nu, _Tpp __phi)\n+    {\n+      typedef typename __gnu_cxx::__promote_3<_Tp, _Tpn, _Tpp>::__type __type;\n+      return __detail::__ellint_3<__type>(__k, __nu, __phi);\n+    }\n+\n+  // Exponential integrals\n+\n+  inline float\n+  expintf(float __x)\n+  { return __detail::__expint<float>(__x); }\n+\n+  inline long double\n+  expintl(long double __x)\n+  { return __detail::__expint<long double>(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    expint(_Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __detail::__expint<__type>(__x);\n+    }\n+\n+  // Hermite polynomials\n+\n+  inline float\n+  hermitef(unsigned int __n, float __x)\n+  { return __detail::__poly_hermite<float>(__n, __x); }\n+\n+  inline long double\n+  hermitel(unsigned int __n, long double __x)\n+  { return __detail::__poly_hermite<long double>(__n, __x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    hermite(unsigned int __n, _Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __detail::__poly_hermite<__type>(__n, __x);\n+    }\n+\n+  // Laguerre polynomials\n+\n+  inline float\n+  laguerref(unsigned int __n, float __x)\n+  { return __detail::__laguerre<float>(__n, __x); }\n+\n+  inline long double\n+  laguerrel(unsigned int __n, long double __x)\n+  { return __detail::__laguerre<long double>(__n, __x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    laguerre(unsigned int __n, _Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __detail::__laguerre<__type>(__n, __x);\n+    }\n+\n+  // Legendre polynomials\n+\n+  inline float\n+  legendref(unsigned int __n, float __x)\n+  { return __detail::__poly_legendre_p<float>(__n, __x); }\n+\n+  inline long double\n+  legendrel(unsigned int __n, long double __x)\n+  { return __detail::__poly_legendre_p<long double>(__n, __x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    legendre(unsigned int __n, _Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __detail::__poly_legendre_p<__type>(__n, __x);\n+    }\n+\n+  // Riemann zeta functions\n+\n+  inline float\n+  riemann_zetaf(float __s)\n+  { return __detail::__riemann_zeta<float>(__s); }\n+\n+  inline long double\n+  riemann_zetal(long double __s)\n+  { return __detail::__riemann_zeta<long double>(__s); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    riemann_zeta(_Tp __s)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __detail::__riemann_zeta<__type>(__s);\n+    }\n+\n+  // Spherical Bessel functions\n+\n+  inline float\n+  sph_besself(unsigned int __n, float __x)\n+  { return __detail::__sph_bessel<float>(__n, __x); }\n+\n+  inline long double\n+  sph_bessell(unsigned int __n, long double __x)\n+  { return __detail::__sph_bessel<long double>(__n, __x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    sph_bessel(unsigned int __n, _Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __detail::__sph_bessel<__type>(__n, __x);\n+    }\n+\n+  // Spherical associated Legendre functions\n+\n+  inline float\n+  sph_legendref(unsigned int __l, unsigned int __m, float __theta)\n+  { return __detail::__sph_legendre<float>(__l, __m, __theta); }\n+\n+  inline long double\n+  sph_legendrel(unsigned int __l, unsigned int __m, long double __theta)\n+  { return __detail::__sph_legendre<long double>(__l, __m, __theta); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    sph_legendre(unsigned int __l, unsigned int __m, _Tp __theta)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __detail::__sph_legendre<__type>(__l, __m, __theta);\n+    }\n+\n+  // Spherical Neumann functions\n+\n+  inline float\n+  sph_neumannf(unsigned int __n, float __x)\n+  { return __detail::__sph_neumann<float>(__n, __x); }\n+\n+  inline long double\n+  sph_neumannl(unsigned int __n, long double __x)\n+  { return __detail::__sph_neumann<long double>(__n, __x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    sph_neumann(unsigned int __n, _Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __detail::__sph_neumann<__type>(__n, __x);\n+    }\n+\n+  // @} group mathsf\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+\n+  // Confluent hypergeometric functions\n+\n+  inline float\n+  conf_hypergf(float __a, float __c, float __x)\n+  { return std::__detail::__conf_hyperg<float>(__a, __c, __x); }\n+\n+  inline long double\n+  conf_hypergl(long double __a, long double __c, long double __x)\n+  { return std::__detail::__conf_hyperg<long double>(__a, __c, __x); }\n+\n+  template<typename _Tpa, typename _Tpc, typename _Tp>\n+    inline typename __gnu_cxx::__promote_3<_Tpa, _Tpc, _Tp>::__type\n+    conf_hyperg(_Tpa __a, _Tpc __c, _Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote_3<_Tpa, _Tpc, _Tp>::__type __type;\n+      return std::__detail::__conf_hyperg<__type>(__a, __c, __x);\n+    }\n+\n+  // Hypergeometric functions\n+\n+  inline float\n+  hypergf(float __a, float __b, float __c, float __x)\n+  { return std::__detail::__hyperg<float>(__a, __b, __c, __x); }\n+\n+  inline long double\n+  hypergl(long double __a, long double __b, long double __c, long double __x)\n+  { return std::__detail::__hyperg<long double>(__a, __b, __c, __x); }\n+\n+  template<typename _Tpa, typename _Tpb, typename _Tpc, typename _Tp>\n+    inline typename __gnu_cxx::__promote_4<_Tpa, _Tpb, _Tpc, _Tp>::__type\n+    hyperg(_Tpa __a, _Tpb __b, _Tpc __c, _Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote_4<_Tpa, _Tpb, _Tpc, _Tp>\n+\t\t::__type __type;\n+      return std::__detail::__hyperg<__type>(__a, __b, __c, __x);\n+    }\n+\n+} // namespace __gnu_cxx\n+\n+#pragma GCC visibility pop\n+\n+#endif // _GLIBCXX_BITS_SPECFUN_H"}, {"sha": "c689b31e5afa18a5cdb42cdd55637159efe1509a", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -1784,4 +1784,8 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #endif // C++11\n \n+#if __STDCPP_WANT_MATH_SPEC_FUNCS__ == 1\n+#  include <bits/specfun.h>\n+#endif\n+\n #endif"}, {"sha": "389440d9d14c6a594ffe07d196ab4d4a6e2f8275", "filename": "libstdc++-v3/include/precompiled/expc++.h", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fexpc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fexpc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fexpc%2B%2B.h?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,57 @@\n+// C++ includes used for precompiling extensions -*- C++ -*-\n+\n+// Copyright (C) 2006-2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file expc++.h\n+ *  This is an implementation file for a precompiled header.\n+ */\n+\n+#if __cplusplus < 201103L\n+#include <bits/extc++.h>\n+#endif\n+\n+#if __cplusplus > 201103L\n+#include <experimental/algorithm>\n+#include <experimental/any>\n+#include <experimental/chrono>\n+#include <experimental/deque>\n+#include <experimental/filesystem>\n+#include <experimental/forward_list>\n+#include <experimental/functional>\n+#include <experimental/iterator>\n+#include <experimental/list>\n+#include <experimental/map>\n+#include <experimental/memory>\n+#include <experimental/numeric>\n+#include <experimental/optional>\n+#include <experimental/ratio>\n+#include <experimental/set>\n+#include <experimental/string>\n+#include <experimental/string_view>\n+#include <experimental/system_error>\n+#include <experimental/tuple>\n+#include <experimental/type_traits>\n+#include <experimental/unordered_map>\n+#include <experimental/unordered_set>\n+#include <experimental/vector>\n+#endif"}, {"sha": "a2655d88b991ae418b2fde67a4269035fd41396e", "filename": "libstdc++-v3/include/tr1/bessel_function.tcc", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -50,8 +50,15 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+#if __STDCPP_WANT_MATH_SPEC_FUNCS__\n+# define _GLIBCXX_MATH_NS ::std\n+#elif defined(_GLIBCXX_TR1_CMATH)\n namespace tr1\n {\n+# define _GLIBCXX_MATH_NS ::std::tr1\n+#else\n+# error do not include this header directly, use <cmath> or <tr1/cmath>\n+#endif\n   // [5.2] Special functions\n \n   // Implementation-space details.\n@@ -90,8 +97,8 @@ namespace tr1\n                   _Tp & __gam1, _Tp & __gam2, _Tp & __gampl, _Tp & __gammi)\n     {\n #if _GLIBCXX_USE_C99_MATH_TR1\n-      __gampl = _Tp(1) / std::tr1::tgamma(_Tp(1) + __mu);\n-      __gammi = _Tp(1) / std::tr1::tgamma(_Tp(1) - __mu);\n+      __gampl = _Tp(1) / _GLIBCXX_MATH_NS::tgamma(_Tp(1) + __mu);\n+      __gammi = _Tp(1) / _GLIBCXX_MATH_NS::tgamma(_Tp(1) - __mu);\n #else\n       __gampl = _Tp(1) / __gamma(_Tp(1) + __mu);\n       __gammi = _Tp(1) / __gamma(_Tp(1) - __mu);\n@@ -306,7 +313,7 @@ namespace tr1\n           const _Tp __gam = (__p - __f) / __q;\n           __Jmu = std::sqrt(__w / ((__p - __f) * __gam + __q));\n #if _GLIBCXX_USE_C99_MATH_TR1\n-          __Jmu = std::tr1::copysign(__Jmu, __Jnul);\n+          __Jmu = _GLIBCXX_MATH_NS::copysign(__Jmu, __Jnul);\n #else\n           if (__Jmu * __Jnul < _Tp(0))\n             __Jmu = -__Jmu;\n@@ -414,7 +421,7 @@ namespace tr1\n       const _Tp __x2 = __x / _Tp(2);\n       _Tp __fact = __nu * std::log(__x2);\n #if _GLIBCXX_USE_C99_MATH_TR1\n-      __fact -= std::tr1::lgamma(__nu + _Tp(1));\n+      __fact -= _GLIBCXX_MATH_NS::lgamma(__nu + _Tp(1));\n #else\n       __fact -= __log_gamma(__nu + _Tp(1));\n #endif\n@@ -621,8 +628,11 @@ namespace tr1\n     }\n \n   _GLIBCXX_END_NAMESPACE_VERSION\n-  } // namespace std::tr1::__detail\n-}\n+  } // namespace __detail\n+#undef _GLIBCXX_MATH_NS\n+#if ! __STDCPP_WANT_MATH_SPEC_FUNCS__ && defined(_GLIBCXX_TR1_CMATH)\n+} // namespace tr1\n+#endif\n }\n \n #endif // _GLIBCXX_TR1_BESSEL_FUNCTION_TCC"}, {"sha": "76f5093cbec5a5878b4128c001bd451152edb5c2", "filename": "libstdc++-v3/include/tr1/beta_function.tcc", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbeta_function.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbeta_function.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbeta_function.tcc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -48,8 +48,15 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+#if __STDCPP_WANT_MATH_SPEC_FUNCS__\n+# define _GLIBCXX_MATH_NS ::std\n+#elif defined(_GLIBCXX_TR1_CMATH)\n namespace tr1\n {\n+# define _GLIBCXX_MATH_NS ::std::tr1\n+#else\n+# error do not include this header directly, use <cmath> or <tr1/cmath>\n+#endif\n   // [5.2] Special functions\n \n   // Implementation-space details.\n@@ -78,15 +85,15 @@ namespace tr1\n #if _GLIBCXX_USE_C99_MATH_TR1\n       if (__x > __y)\n         {\n-          __bet = std::tr1::tgamma(__x)\n-                / std::tr1::tgamma(__x + __y);\n-          __bet *= std::tr1::tgamma(__y);\n+          __bet = _GLIBCXX_MATH_NS::tgamma(__x)\n+                / _GLIBCXX_MATH_NS::tgamma(__x + __y);\n+          __bet *= _GLIBCXX_MATH_NS::tgamma(__y);\n         }\n       else\n         {\n-          __bet = std::tr1::tgamma(__y)\n-                / std::tr1::tgamma(__x + __y);\n-          __bet *= std::tr1::tgamma(__x);\n+          __bet = _GLIBCXX_MATH_NS::tgamma(__y)\n+                / _GLIBCXX_MATH_NS::tgamma(__x + __y);\n+          __bet *= _GLIBCXX_MATH_NS::tgamma(__x);\n         }\n #else\n       if (__x > __y)\n@@ -122,9 +129,9 @@ namespace tr1\n     __beta_lgamma(_Tp __x, _Tp __y)\n     {\n #if _GLIBCXX_USE_C99_MATH_TR1\n-      _Tp __bet = std::tr1::lgamma(__x)\n-                + std::tr1::lgamma(__y)\n-                - std::tr1::lgamma(__x + __y);\n+      _Tp __bet = _GLIBCXX_MATH_NS::lgamma(__x)\n+                + _GLIBCXX_MATH_NS::lgamma(__y)\n+                - _GLIBCXX_MATH_NS::lgamma(__x + __y);\n #else\n       _Tp __bet = __log_gamma(__x)\n                 + __log_gamma(__y)\n@@ -190,8 +197,11 @@ namespace tr1\n     }\n \n   _GLIBCXX_END_NAMESPACE_VERSION\n-  } // namespace std::tr1::__detail\n-}\n+  } // namespace __detail\n+#undef _GLIBCXX_MATH_NS\n+#if ! __STDCPP_WANT_MATH_SPEC_FUNCS__ && defined(_GLIBCXX_TR1_CMATH)\n+} // namespace tr1\n+#endif\n }\n \n #endif // _GLIBCXX_TR1_BETA_FUNCTION_TCC"}, {"sha": "14737e330b22289c0307f640569dbde5de4ad609", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -1086,6 +1086,121 @@ _GLIBCXX_END_NAMESPACE_VERSION\n }\n }\n \n+#if __STDCPP_WANT_MATH_SPEC_FUNCS__\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace tr1\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /**\n+   * @defgroup tr1_math_spec_func Mathematical Special Functions\n+   * @ingroup numerics\n+   *\n+   * A collection of advanced mathematical special functions.\n+   * @{\n+   */\n+\n+  using std::assoc_laguerref;\n+  using std::assoc_laguerrel;\n+  using std::assoc_laguerre;\n+\n+  using std::assoc_legendref;\n+  using std::assoc_legendrel;\n+  using std::assoc_legendre;\n+\n+  using std::betaf;\n+  using std::betal;\n+  using std::beta;\n+\n+  using std::comp_ellint_1f;\n+  using std::comp_ellint_1l;\n+  using std::comp_ellint_1;\n+\n+  using std::comp_ellint_2f;\n+  using std::comp_ellint_2l;\n+  using std::comp_ellint_2;\n+\n+  using std::comp_ellint_3f;\n+  using std::comp_ellint_3l;\n+  using std::comp_ellint_3;\n+\n+  using __gnu_cxx::conf_hypergf;\n+  using __gnu_cxx::conf_hypergl;\n+  using __gnu_cxx::conf_hyperg;\n+\n+  using std::cyl_bessel_if;\n+  using std::cyl_bessel_il;\n+  using std::cyl_bessel_i;\n+\n+  using std::cyl_bessel_jf;\n+  using std::cyl_bessel_jl;\n+  using std::cyl_bessel_j;\n+\n+  using std::cyl_bessel_kf;\n+  using std::cyl_bessel_kl;\n+  using std::cyl_bessel_k;\n+\n+  using std::cyl_neumannf;\n+  using std::cyl_neumannl;\n+  using std::cyl_neumann;\n+\n+  using std::ellint_1f;\n+  using std::ellint_1l;\n+  using std::ellint_1;\n+\n+  using std::ellint_2f;\n+  using std::ellint_2l;\n+  using std::ellint_2;\n+\n+  using std::ellint_3f;\n+  using std::ellint_3l;\n+  using std::ellint_3;\n+\n+  using std::expintf;\n+  using std::expintl;\n+  using std::expint;\n+\n+  using std::hermitef;\n+  using std::hermitel;\n+  using std::hermite;\n+\n+  using __gnu_cxx::hypergf;\n+  using __gnu_cxx::hypergl;\n+  using __gnu_cxx::hyperg;\n+\n+  using std::laguerref;\n+  using std::laguerrel;\n+  using std::laguerre;\n+\n+  using std::legendref;\n+  using std::legendrel;\n+  using std::legendre;\n+\n+  using std::riemann_zetaf;\n+  using std::riemann_zetal;\n+  using std::riemann_zeta;\n+\n+  using std::sph_besself;\n+  using std::sph_bessell;\n+  using std::sph_bessel;\n+\n+  using std::sph_legendref;\n+  using std::sph_legendrel;\n+  using std::sph_legendre;\n+\n+  using std::sph_neumannf;\n+  using std::sph_neumannl;\n+  using std::sph_neumann;\n+\n+  /* @} */ // tr1_math_spec_func\n+_GLIBCXX_END_NAMESPACE_VERSION\n+}\n+}\n+\n+#else // ! __STDCPP_WANT_MATH_SPEC_FUNCS__\n+\n #include <bits/stl_algobase.h>\n #include <limits>\n #include <tr1/type_traits>\n@@ -1513,5 +1628,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n }\n }\n+#endif // __STDCPP_WANT_MATH_SPEC_FUNCS__\n \n #endif // _GLIBCXX_TR1_CMATH"}, {"sha": "9a60ba3b00a5e05b4a56105fc8be28987325b388", "filename": "libstdc++-v3/include/tr1/ell_integral.tcc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -44,8 +44,13 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+#if __STDCPP_WANT_MATH_SPEC_FUNCS__\n+#elif defined(_GLIBCXX_TR1_CMATH)\n namespace tr1\n {\n+#else\n+# error do not include this header directly, use <cmath> or <tr1/cmath>\n+#endif\n   // [5.2] Special functions\n \n   // Implementation-space details.\n@@ -742,8 +747,10 @@ namespace tr1\n     }\n \n   _GLIBCXX_END_NAMESPACE_VERSION\n-  } // namespace std::tr1::__detail\n-}\n+  } // namespace __detail\n+#if ! __STDCPP_WANT_MATH_SPEC_FUNCS__ && defined(_GLIBCXX_TR1_CMATH)\n+} // namespace tr1\n+#endif\n }\n \n #endif // _GLIBCXX_TR1_ELL_INTEGRAL_TCC"}, {"sha": "ee7cdad6d919fbe85da1fa9ec6e5c031ec50d56e", "filename": "libstdc++-v3/include/tr1/exp_integral.tcc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -49,8 +49,13 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+#if __STDCPP_WANT_MATH_SPEC_FUNCS__\n+#elif defined(_GLIBCXX_TR1_CMATH)\n namespace tr1\n {\n+#else\n+# error do not include this header directly, use <cmath> or <tr1/cmath>\n+#endif\n   // [5.2] Special functions\n \n   // Implementation-space details.\n@@ -519,8 +524,10 @@ namespace tr1\n     }\n \n   _GLIBCXX_END_NAMESPACE_VERSION\n-  } // namespace std::tr1::__detail\n-}\n+  } // namespace __detail\n+#if ! __STDCPP_WANT_MATH_SPEC_FUNCS__ && defined(_GLIBCXX_TR1_CMATH)\n+} // namespace tr1\n+#endif\n }\n \n #endif // _GLIBCXX_TR1_EXP_INTEGRAL_TCC"}, {"sha": "2c84b7521a302d9f28e5e91b387a0ae879da9ce2", "filename": "libstdc++-v3/include/tr1/gamma.tcc", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fgamma.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fgamma.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fgamma.tcc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -46,12 +46,19 @@\n #ifndef _GLIBCXX_TR1_GAMMA_TCC\n #define _GLIBCXX_TR1_GAMMA_TCC 1\n \n-#include \"special_function_util.h\"\n+#include <tr1/special_function_util.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+#if __STDCPP_WANT_MATH_SPEC_FUNCS__\n+# define _GLIBCXX_MATH_NS ::std\n+#elif defined(_GLIBCXX_TR1_CMATH)\n namespace tr1\n {\n+# define _GLIBCXX_MATH_NS ::std::tr1\n+#else\n+# error do not include this header directly, use <cmath> or <tr1/cmath>\n+#endif\n   // Implementation-space details.\n   namespace __detail\n   {\n@@ -282,9 +289,9 @@ namespace tr1\n                       = std::numeric_limits<_Tp>::max_exponent10\n                       * std::log(_Tp(10)) - _Tp(1);\n #if _GLIBCXX_USE_C99_MATH_TR1\n-      _Tp __coeff =  std::tr1::lgamma(_Tp(1 + __n))\n-                  - std::tr1::lgamma(_Tp(1 + __k))\n-                  - std::tr1::lgamma(_Tp(1 + __n - __k));\n+      _Tp __coeff =  _GLIBCXX_MATH_NS::lgamma(_Tp(1 + __n))\n+                  - _GLIBCXX_MATH_NS::lgamma(_Tp(1 + __k))\n+                  - _GLIBCXX_MATH_NS::lgamma(_Tp(1 + __n - __k));\n #else\n       _Tp __coeff =  __log_gamma(_Tp(1 + __n))\n                   - __log_gamma(_Tp(1 + __k))\n@@ -449,7 +456,7 @@ namespace tr1\n         {\n           const _Tp __hzeta = __hurwitz_zeta(_Tp(__n + 1), __x);\n #if _GLIBCXX_USE_C99_MATH_TR1\n-          const _Tp __ln_nfact = std::tr1::lgamma(_Tp(__n + 1));\n+          const _Tp __ln_nfact = _GLIBCXX_MATH_NS::lgamma(_Tp(__n + 1));\n #else\n           const _Tp __ln_nfact = __log_gamma(_Tp(__n + 1));\n #endif\n@@ -461,9 +468,12 @@ namespace tr1\n     }\n \n   _GLIBCXX_END_NAMESPACE_VERSION\n-  } // namespace std::tr1::__detail\n-}\n-}\n+  } // namespace __detail\n+#undef _GLIBCXX_MATH_NS\n+#if ! __STDCPP_WANT_MATH_SPEC_FUNCS__ && defined(_GLIBCXX_TR1_CMATH)\n+} // namespace tr1\n+#endif\n+} // namespace std\n \n #endif // _GLIBCXX_TR1_GAMMA_TCC\n "}, {"sha": "77fb78d058b15f7685b38f9645c6bdaeead3a253", "filename": "libstdc++-v3/include/tr1/hypergeometric.tcc", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -43,8 +43,15 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+#if __STDCPP_WANT_MATH_SPEC_FUNCS__\n+# define _GLIBCXX_MATH_NS ::std\n+#elif defined(_GLIBCXX_TR1_CMATH)\n namespace tr1\n {\n+# define _GLIBCXX_MATH_NS ::std::tr1\n+#else\n+# error do not include this header directly, use <cmath> or <tr1/cmath>\n+#endif\n   // [5.2] Special functions\n \n   // Implementation-space details.\n@@ -222,7 +229,7 @@ namespace tr1\n     __conf_hyperg(_Tp __a, _Tp __c, _Tp __x)\n     {\n #if _GLIBCXX_USE_C99_MATH_TR1\n-      const _Tp __c_nint = std::tr1::nearbyint(__c);\n+      const _Tp __c_nint = _GLIBCXX_MATH_NS::nearbyint(__c);\n #else\n       const _Tp __c_nint = static_cast<int>(__c + _Tp(0.5L));\n #endif\n@@ -723,9 +730,9 @@ namespace tr1\n     __hyperg(_Tp __a, _Tp __b, _Tp __c, _Tp __x)\n     {\n #if _GLIBCXX_USE_C99_MATH_TR1\n-      const _Tp __a_nint = std::tr1::nearbyint(__a);\n-      const _Tp __b_nint = std::tr1::nearbyint(__b);\n-      const _Tp __c_nint = std::tr1::nearbyint(__c);\n+      const _Tp __a_nint = _GLIBCXX_MATH_NS::nearbyint(__a);\n+      const _Tp __b_nint = _GLIBCXX_MATH_NS::nearbyint(__b);\n+      const _Tp __c_nint = _GLIBCXX_MATH_NS::nearbyint(__c);\n #else\n       const _Tp __a_nint = static_cast<int>(__a + _Tp(0.5L));\n       const _Tp __b_nint = static_cast<int>(__b + _Tp(0.5L));\n@@ -768,8 +775,11 @@ namespace tr1\n     }\n \n   _GLIBCXX_END_NAMESPACE_VERSION\n-  } // namespace std::tr1::__detail\n-}\n+  } // namespace __detail\n+#undef _GLIBCXX_MATH_NS\n+#if ! __STDCPP_WANT_MATH_SPEC_FUNCS__ && defined(_GLIBCXX_TR1_CMATH)\n+} // namespace tr1\n+#endif\n }\n \n #endif // _GLIBCXX_TR1_HYPERGEOMETRIC_TCC"}, {"sha": "d5f20223b31a300b9c2ae4e53a49c2c635563cb5", "filename": "libstdc++-v3/include/tr1/legendre_function.tcc", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Flegendre_function.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Flegendre_function.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Flegendre_function.tcc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -48,8 +48,15 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+#if __STDCPP_WANT_MATH_SPEC_FUNCS__\n+# define _GLIBCXX_MATH_NS ::std\n+#elif defined(_GLIBCXX_TR1_CMATH)\n namespace tr1\n {\n+# define _GLIBCXX_MATH_NS ::std::tr1\n+#else\n+# error do not include this header directly, use <cmath> or <tr1/cmath>\n+#endif\n   // [5.2] Special functions\n \n   // Implementation-space details.\n@@ -243,14 +250,14 @@ namespace tr1\n           const _Tp __sgn = ( __m % 2 == 1 ? -_Tp(1) : _Tp(1));\n           const _Tp __y_mp1m_factor = __x * std::sqrt(_Tp(2 * __m + 3));\n #if _GLIBCXX_USE_C99_MATH_TR1\n-          const _Tp __lncirc = std::tr1::log1p(-__x * __x);\n+          const _Tp __lncirc = _GLIBCXX_MATH_NS::log1p(-__x * __x);\n #else\n           const _Tp __lncirc = std::log(_Tp(1) - __x * __x);\n #endif\n           //  Gamma(m+1/2) / Gamma(m)\n #if _GLIBCXX_USE_C99_MATH_TR1\n-          const _Tp __lnpoch = std::tr1::lgamma(_Tp(__m + _Tp(0.5L)))\n-                             - std::tr1::lgamma(_Tp(__m));\n+          const _Tp __lnpoch = _GLIBCXX_MATH_NS::lgamma(_Tp(__m + _Tp(0.5L)))\n+                             - _GLIBCXX_MATH_NS::lgamma(_Tp(__m));\n #else\n           const _Tp __lnpoch = __log_gamma(_Tp(__m + _Tp(0.5L)))\n                              - __log_gamma(_Tp(__m));\n@@ -296,8 +303,11 @@ namespace tr1\n     }\n \n   _GLIBCXX_END_NAMESPACE_VERSION\n-  } // namespace std::tr1::__detail\n-}\n+  } // namespace __detail\n+#undef _GLIBCXX_MATH_NS\n+#if ! __STDCPP_WANT_MATH_SPEC_FUNCS__ && defined(_GLIBCXX_TR1_CMATH)\n+} // namespace tr1\n+#endif\n }\n \n #endif // _GLIBCXX_TR1_LEGENDRE_FUNCTION_TCC"}, {"sha": "0162727b34c8a53844d2f25a49498420ab959191", "filename": "libstdc++-v3/include/tr1/modified_bessel_func.tcc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmodified_bessel_func.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmodified_bessel_func.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmodified_bessel_func.tcc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -50,8 +50,13 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+#if __STDCPP_WANT_MATH_SPEC_FUNCS__\n+#elif defined(_GLIBCXX_TR1_CMATH)\n namespace tr1\n {\n+#else\n+# error do not include this header directly, use <cmath> or <tr1/cmath>\n+#endif\n   // [5.2] Special functions\n \n   // Implementation-space details.\n@@ -427,8 +432,10 @@ namespace tr1\n     }\n \n   _GLIBCXX_END_NAMESPACE_VERSION\n-  } // namespace std::tr1::__detail\n-}\n+  } // namespace __detail\n+#if ! __STDCPP_WANT_MATH_SPEC_FUNCS__ && defined(_GLIBCXX_TR1_CMATH)\n+} // namespace tr1\n+#endif\n }\n \n #endif // _GLIBCXX_TR1_MODIFIED_BESSEL_FUNC_TCC"}, {"sha": "a5a6bcbd8d06d372089f448ddcc56242827c2b3d", "filename": "libstdc++-v3/include/tr1/poly_hermite.tcc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_hermite.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_hermite.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_hermite.tcc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -41,8 +41,13 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+#if __STDCPP_WANT_MATH_SPEC_FUNCS__\n+#elif defined(_GLIBCXX_TR1_CMATH)\n namespace tr1\n {\n+#else\n+# error do not include this header directly, use <cmath> or <tr1/cmath>\n+#endif\n   // [5.2] Special functions\n \n   // Implementation-space details.\n@@ -117,8 +122,10 @@ namespace tr1\n     }\n \n   _GLIBCXX_END_NAMESPACE_VERSION\n-  } // namespace std::tr1::__detail\n-}\n+  } // namespace __detail\n+#if ! __STDCPP_WANT_MATH_SPEC_FUNCS__ && defined(_GLIBCXX_TR1_CMATH)\n+} // namespace tr1\n+#endif\n }\n \n #endif // _GLIBCXX_TR1_POLY_HERMITE_TCC"}, {"sha": "6c757e40c111f1970aa695fd0bc8ead5a6623ea4", "filename": "libstdc++-v3/include/tr1/poly_laguerre.tcc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_laguerre.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_laguerre.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_laguerre.tcc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -43,8 +43,15 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+#if __STDCPP_WANT_MATH_SPEC_FUNCS__\n+# define _GLIBCXX_MATH_NS ::std\n+#elif defined(_GLIBCXX_TR1_CMATH)\n namespace tr1\n {\n+# define _GLIBCXX_MATH_NS ::std::tr1\n+#else\n+# error do not include this header directly, use <cmath> or <tr1/cmath>\n+#endif\n   // [5.2] Special functions\n \n   // Implementation-space details.\n@@ -80,8 +87,8 @@ namespace tr1\n                         * __eta * __eta * __cos2th * __sin2th;\n \n #if _GLIBCXX_USE_C99_MATH_TR1\n-      const _Tp __lg_b = std::tr1::lgamma(_Tp(__n) + __b);\n-      const _Tp __lnfact = std::tr1::lgamma(_Tp(__n + 1));\n+      const _Tp __lg_b = _GLIBCXX_MATH_NS::lgamma(_Tp(__n) + __b);\n+      const _Tp __lnfact = _GLIBCXX_MATH_NS::lgamma(_Tp(__n + 1));\n #else\n       const _Tp __lg_b = __log_gamma(_Tp(__n) + __b);\n       const _Tp __lnfact = __log_gamma(_Tp(__n + 1));\n@@ -312,8 +319,11 @@ namespace tr1\n     { return __poly_laguerre<unsigned int, _Tp>(__n, 0, __x); }\n \n   _GLIBCXX_END_NAMESPACE_VERSION\n-  } // namespace std::tr1::__detail\n-}\n+  } // namespace __detail\n+#undef _GLIBCXX_MATH_NS\n+#if ! __STDCPP_WANT_MATH_SPEC_FUNCS__ && defined(_GLIBCXX_TR1_CMATH)\n+} // namespace tr1\n+#endif\n }\n \n #endif // _GLIBCXX_TR1_POLY_LAGUERRE_TCC"}, {"sha": "f411b20e61196a87a73cba652cca1a616eeabaed", "filename": "libstdc++-v3/include/tr1/riemann_zeta.tcc", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Friemann_zeta.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Friemann_zeta.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Friemann_zeta.tcc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -46,8 +46,15 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+#if __STDCPP_WANT_MATH_SPEC_FUNCS__\n+# define _GLIBCXX_MATH_NS ::std\n+#elif defined(_GLIBCXX_TR1_CMATH)\n namespace tr1\n {\n+# define _GLIBCXX_MATH_NS ::std::tr1\n+#else\n+# error do not include this header directly, use <cmath> or <tr1/cmath>\n+#endif\n   // [5.2] Special functions\n \n   // Implementation-space details.\n@@ -163,7 +170,7 @@ namespace tr1\n       if (__s < _Tp(0))\n         {\n #if _GLIBCXX_USE_C99_MATH_TR1\n-          if (std::tr1::fmod(__s,_Tp(2)) == _Tp(0))\n+          if (_GLIBCXX_MATH_NS::fmod(__s,_Tp(2)) == _Tp(0))\n             return _Tp(0);\n           else\n #endif\n@@ -173,7 +180,7 @@ namespace tr1\n                      * __numeric_constants<_Tp>::__pi(), __s)\n                      * std::sin(__numeric_constants<_Tp>::__pi_2() * __s)\n #if _GLIBCXX_USE_C99_MATH_TR1\n-                     * std::exp(std::tr1::lgamma(_Tp(1) - __s))\n+                     * std::exp(_GLIBCXX_MATH_NS::lgamma(_Tp(1) - __s))\n #else\n                      * std::exp(__log_gamma(_Tp(1) - __s))\n #endif\n@@ -192,9 +199,9 @@ namespace tr1\n           for (unsigned int __j = 0; __j <= __i; ++__j)\n             {\n #if _GLIBCXX_USE_C99_MATH_TR1\n-              _Tp __bincoeff =  std::tr1::lgamma(_Tp(1 + __i))\n-                              - std::tr1::lgamma(_Tp(1 + __j))\n-                              - std::tr1::lgamma(_Tp(1 + __i - __j));\n+              _Tp __bincoeff =  _GLIBCXX_MATH_NS::lgamma(_Tp(1 + __i))\n+                              - _GLIBCXX_MATH_NS::lgamma(_Tp(1 + __j))\n+                              - _GLIBCXX_MATH_NS::lgamma(_Tp(1 + __i - __j));\n #else\n               _Tp __bincoeff =  __log_gamma(_Tp(1 + __i))\n                               - __log_gamma(_Tp(1 + __j))\n@@ -297,7 +304,7 @@ namespace tr1\n           __zeta *= std::pow(_Tp(2) * __numeric_constants<_Tp>::__pi(), __s)\n                  * std::sin(__numeric_constants<_Tp>::__pi_2() * __s)\n #if _GLIBCXX_USE_C99_MATH_TR1\n-                 * std::exp(std::tr1::lgamma(_Tp(1) - __s))\n+                 * std::exp(_GLIBCXX_MATH_NS::lgamma(_Tp(1) - __s))\n #else\n                  * std::exp(__log_gamma(_Tp(1) - __s))\n #endif\n@@ -320,7 +327,7 @@ namespace tr1\n                                 * __numeric_constants<_Tp>::__pi(), __s)\n                          * std::sin(__numeric_constants<_Tp>::__pi_2() * __s)\n #if _GLIBCXX_USE_C99_MATH_TR1\n-                             * std::tr1::tgamma(_Tp(1) - __s)\n+                             * _GLIBCXX_MATH_NS::tgamma(_Tp(1) - __s)\n #else\n                              * std::exp(__log_gamma(_Tp(1) - __s))\n #endif\n@@ -375,9 +382,9 @@ namespace tr1\n           for (unsigned int __j = 0; __j <= __i; ++__j)\n             {\n #if _GLIBCXX_USE_C99_MATH_TR1\n-              _Tp __bincoeff =  std::tr1::lgamma(_Tp(1 + __i))\n-                              - std::tr1::lgamma(_Tp(1 + __j))\n-                              - std::tr1::lgamma(_Tp(1 + __i - __j));\n+              _Tp __bincoeff =  _GLIBCXX_MATH_NS::lgamma(_Tp(1 + __i))\n+                              - _GLIBCXX_MATH_NS::lgamma(_Tp(1 + __j))\n+                              - _GLIBCXX_MATH_NS::lgamma(_Tp(1 + __i - __j));\n #else\n               _Tp __bincoeff =  __log_gamma(_Tp(1 + __i))\n                               - __log_gamma(_Tp(1 + __j))\n@@ -426,8 +433,11 @@ namespace tr1\n     { return __hurwitz_zeta_glob(__a, __s); }\n \n   _GLIBCXX_END_NAMESPACE_VERSION\n-  } // namespace std::tr1::__detail\n-}\n+  } // namespace __detail\n+#undef _GLIBCXX_MATH_NS\n+#if ! __STDCPP_WANT_MATH_SPEC_FUNCS__ && defined(_GLIBCXX_TR1_CMATH)\n+} // namespace tr1\n+#endif\n }\n \n #endif // _GLIBCXX_TR1_RIEMANN_ZETA_TCC"}, {"sha": "2b8cf377e4ec0cca6049d94cb82a1993a044abf7", "filename": "libstdc++-v3/include/tr1/special_function_util.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fspecial_function_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fspecial_function_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fspecial_function_util.h?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -38,8 +38,13 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+#if __STDCPP_WANT_MATH_SPEC_FUNCS__\n+#elif defined(_GLIBCXX_TR1_CMATH)\n namespace tr1\n {\n+#else\n+# error do not include this header directly, use <cmath> or <tr1/cmath>\n+#endif\n   namespace __detail\n   {\n   _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -128,7 +133,9 @@ namespace tr1\n \n   _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n-}\n+#if ! __STDCPP_WANT_MATH_SPEC_FUNCS__ && defined(_GLIBCXX_TR1_CMATH)\n+} // namespace tr1\n+#endif\n }\n \n #endif // _GLIBCXX_TR1_SPECIAL_FUNCTION_UTIL_H"}, {"sha": "7119ce74f746144ac5437dae0af7b5124152afec", "filename": "libstdc++-v3/testsuite/ext/special_functions/conf_hyperg/check_nan.cc", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fconf_hyperg%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fconf_hyperg%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fconf_hyperg%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,128 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// conf_hyperg\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float af = std::numeric_limits<float>::quiet_NaN();\n+  double ad = std::numeric_limits<double>::quiet_NaN();\n+  long double al = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float cf = 3.0F;\n+  double cd = 3.0;\n+  long double cl = 3.0L;\n+\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+\n+  float a = __gnu_cxx::conf_hyperg(af, cf, xf);\n+  float b = __gnu_cxx::conf_hypergf(af, cf, xf);\n+  double c = __gnu_cxx::conf_hyperg(ad, cd, xd);\n+  long double d = __gnu_cxx::conf_hyperg(al, cl, xl);\n+  long double e = __gnu_cxx::conf_hypergl(al, cl, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+void\n+test02()\n+{\n+  float af = 2.0F;\n+  double ad = 2.0;\n+  long double al = 2.0L;\n+\n+  float cf = std::numeric_limits<float>::quiet_NaN();\n+  double cd = std::numeric_limits<double>::quiet_NaN();\n+  long double cl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+\n+  float a = __gnu_cxx::conf_hyperg(af, cf, xf);\n+  float b = __gnu_cxx::conf_hypergf(af, cf, xf);\n+  double c = __gnu_cxx::conf_hyperg(ad, cd, xd);\n+  long double d = __gnu_cxx::conf_hyperg(al, cl, xl);\n+  long double e = __gnu_cxx::conf_hypergl(al, cl, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+void\n+test03()\n+{\n+  float af = 2.0F;\n+  double ad = 2.0;\n+  long double al = 2.0L;\n+\n+  float cf = 3.0F;\n+  double cd = 3.0;\n+  long double cl = 3.0L;\n+\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float a = __gnu_cxx::conf_hyperg(af, cf, xf);\n+  float b = __gnu_cxx::conf_hypergf(af, cf, xf);\n+  double c = __gnu_cxx::conf_hyperg(ad, cd, xd);\n+  long double d = __gnu_cxx::conf_hyperg(al, cl, xl);\n+  long double e = __gnu_cxx::conf_hypergl(al, cl, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}\n+"}, {"sha": "276efd6db74eb08945cb00099f3b78ce8f8a5173", "filename": "libstdc++-v3/testsuite/ext/special_functions/conf_hyperg/check_value.cc", "status": "added", "additions": 3710, "deletions": 0, "changes": 3710, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fconf_hyperg%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fconf_hyperg%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fconf_hyperg%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d"}, {"sha": "e811c5c359b41be73933f366d558a09bed567be0", "filename": "libstdc++-v3/testsuite/ext/special_functions/conf_hyperg/compile.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fconf_hyperg%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fconf_hyperg%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fconf_hyperg%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// conf_hyperg\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float af = 2.0F, cf = 3.0F, xf = 0.5F;\n+  double ad = 2.0, cd = 3.0, xd = 0.5;\n+  long double al = 2.0L, cl = 3.0L, xl = 0.5L;\n+\n+  __gnu_cxx::conf_hyperg(af, cf, xf);\n+  __gnu_cxx::conf_hypergf(af, cf, xf);\n+  __gnu_cxx::conf_hyperg(ad, cd, xd);\n+  __gnu_cxx::conf_hyperg(al, cl, xl);\n+  __gnu_cxx::conf_hypergl(al, cl, xl);\n+\n+  return;\n+}\n+"}, {"sha": "ba381ca38034daf5f96b3175dd46d77e6312ed56", "filename": "libstdc++-v3/testsuite/ext/special_functions/hyperg/check_nan.cc", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fhyperg%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fhyperg%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fhyperg%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,176 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// hyperg\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float af = std::numeric_limits<float>::quiet_NaN();\n+  double ad = std::numeric_limits<double>::quiet_NaN();\n+  long double al = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float bf = 10.0F;\n+  double bd = 10.0;\n+  long double bl = 10.0L;\n+\n+  float cf = 3.0F;\n+  double cd = 3.0;\n+  long double cl = 3.0L;\n+\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+\n+  float a = __gnu_cxx::hyperg(af, bf, cf, xf);\n+  float b = __gnu_cxx::hypergf(af, bf, cf, xf);\n+  double c = __gnu_cxx::hyperg(ad, bd, cd, xd);\n+  long double d = __gnu_cxx::hyperg(al, bl, cl, xl);\n+  long double e = __gnu_cxx::hypergl(al, bl, cl, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+void\n+test02()\n+{\n+  float af = 2.0F;\n+  double ad = 2.0;\n+  long double al = 2.0L;\n+\n+  float bf = std::numeric_limits<float>::quiet_NaN();\n+  double bd = std::numeric_limits<double>::quiet_NaN();\n+  long double bl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float cf = 3.0F;\n+  double cd = 3.0;\n+  long double cl = 3.0L;\n+\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+\n+  float a = __gnu_cxx::hyperg(af, bf, cf, xf);\n+  float b = __gnu_cxx::hypergf(af, bf, cf, xf);\n+  double c = __gnu_cxx::hyperg(ad, bd, cd, xd);\n+  long double d = __gnu_cxx::hyperg(al, bl, cl, xl);\n+  long double e = __gnu_cxx::hypergl(al, bl, cl, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+void\n+test03()\n+{\n+  float af = 2.0F;\n+  double ad = 2.0;\n+  long double al = 2.0L;\n+\n+  float bf = 10.0F;\n+  double bd = 10.0;\n+  long double bl = 10.0L;\n+\n+  float cf = std::numeric_limits<float>::quiet_NaN();\n+  double cd = std::numeric_limits<double>::quiet_NaN();\n+  long double cl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+\n+  float a = __gnu_cxx::hyperg(af, bf, cf, xf);\n+  float b = __gnu_cxx::hypergf(af, bf, cf, xf);\n+  double c = __gnu_cxx::hyperg(ad, bd, cd, xd);\n+  long double d = __gnu_cxx::hyperg(al, bl, cl, xl);\n+  long double e = __gnu_cxx::hypergl(al, bl, cl, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+void\n+test04()\n+{\n+  float af = 2.0F;\n+  double ad = 2.0;\n+  long double al = 2.0L;\n+\n+  float bf = 10.0F;\n+  double bd = 10.0;\n+  long double bl = 10.0L;\n+\n+  float cf = 3.0F;\n+  double cd = 3.0;\n+  long double cl = 3.0L;\n+\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float a = __gnu_cxx::hyperg(af, bf, cf, xf);\n+  float b = __gnu_cxx::hypergf(af, bf, cf, xf);\n+  double c = __gnu_cxx::hyperg(ad, bd, cd, xd);\n+  long double d = __gnu_cxx::hyperg(al, bl, cl, xl);\n+  long double e = __gnu_cxx::hypergl(al, bl, cl, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  return 0;\n+}\n+"}, {"sha": "218c07a16fc206eca01b4e45b8ef4f49f2537c30", "filename": "libstdc++-v3/testsuite/ext/special_functions/hyperg/check_value.cc", "status": "added", "additions": 11831, "deletions": 0, "changes": 11831, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fhyperg%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fhyperg%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fhyperg%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d"}, {"sha": "bf76d7861cc3b2afc52f7b93a2b557a5e0486489", "filename": "libstdc++-v3/testsuite/ext/special_functions/hyperg/compile.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fhyperg%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fhyperg%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fhyperg%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// hyperg\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float af = 2.0F, bf = 10.0F, cf = 3.0F, xf = 0.5F;\n+  double ad = 2.0, bd = 10.0, cd = 3.0, xd = 0.5;\n+  long double al = 2.0L, bl = 10.0L, cl = 3.0L, xl = 0.5L;\n+\n+  __gnu_cxx::hyperg(af, bf, cf, xf);\n+  __gnu_cxx::hypergf(af, bf, cf, xf);\n+  __gnu_cxx::hyperg(ad, bd, cd, xd);\n+  __gnu_cxx::hyperg(al, bl, cl, xl);\n+  __gnu_cxx::hypergl(al, bl, cl, xl);\n+\n+  return;\n+}\n+"}, {"sha": "32a38a742bf968b8054bb46f945c76c3cfe24649", "filename": "libstdc++-v3/testsuite/libstdc++-dg/conformance.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fconformance.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fconformance.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fconformance.exp?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -61,6 +61,7 @@ if {[info exists tests_file] && [file exists $tests_file]} {\n     lappend subdirs \"$srcdir/tr2\"\n     lappend subdirs \"$srcdir/decimal\"\n     lappend subdirs \"$srcdir/experimental\"\n+    lappend subdirs \"$srcdir/special_functions\"\n     verbose \"subdirs are $subdirs\"\n \n     # Find all the tests."}, {"sha": "c415ce16596fc4dcec6807c9d892e288c9759246", "filename": "libstdc++-v3/testsuite/special_functions/01_assoc_laguerre/check_nan.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,58 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.1 assoc_laguerre\n+\n+#include <cmath>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+  unsigned int n = 2, m = 1;\n+\n+  float a = std::assoc_laguerre(n, m, xf);\n+  float b = std::assoc_laguerref(n, m, xf);\n+  double c = std::assoc_laguerre(n, m, xd);\n+  long double d = std::assoc_laguerre(n, m, xl);\n+  long double e = std::assoc_laguerrel(n, m, xl);\n+\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "89f317dfaacfef1c48b3a08c832161408b670182", "filename": "libstdc++-v3/testsuite/special_functions/01_assoc_laguerre/check_value.cc", "status": "added", "additions": 2120, "deletions": 0, "changes": 2120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,2120 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  assoc_laguerre\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+\n+// Test data for n=0, m=0.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data001[11] =\n+{\n+  { 1.0000000000000000, 0, 0, \n+\t  0.0000000000000000 },\n+  { 1.0000000000000000, 0, 0, \n+\t  10.000000000000000 },\n+  { 1.0000000000000000, 0, 0, \n+\t  20.000000000000000 },\n+  { 1.0000000000000000, 0, 0, \n+\t  30.000000000000000 },\n+  { 1.0000000000000000, 0, 0, \n+\t  40.000000000000000 },\n+  { 1.0000000000000000, 0, 0, \n+\t  50.000000000000000 },\n+  { 1.0000000000000000, 0, 0, \n+\t  60.000000000000000 },\n+  { 1.0000000000000000, 0, 0, \n+\t  70.000000000000000 },\n+  { 1.0000000000000000, 0, 0, \n+\t  80.000000000000000 },\n+  { 1.0000000000000000, 0, 0, \n+\t  90.000000000000000 },\n+  { 1.0000000000000000, 0, 0, \n+\t  100.00000000000000 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+\n+// Test data for n=0, m=1.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data002[11] =\n+{\n+  { 1.0000000000000000, 0, 1, \n+\t  0.0000000000000000 },\n+  { 1.0000000000000000, 0, 1, \n+\t  10.000000000000000 },\n+  { 1.0000000000000000, 0, 1, \n+\t  20.000000000000000 },\n+  { 1.0000000000000000, 0, 1, \n+\t  30.000000000000000 },\n+  { 1.0000000000000000, 0, 1, \n+\t  40.000000000000000 },\n+  { 1.0000000000000000, 0, 1, \n+\t  50.000000000000000 },\n+  { 1.0000000000000000, 0, 1, \n+\t  60.000000000000000 },\n+  { 1.0000000000000000, 0, 1, \n+\t  70.000000000000000 },\n+  { 1.0000000000000000, 0, 1, \n+\t  80.000000000000000 },\n+  { 1.0000000000000000, 0, 1, \n+\t  90.000000000000000 },\n+  { 1.0000000000000000, 0, 1, \n+\t  100.00000000000000 },\n+};\n+const double toler002 = 2.5000000000000020e-13;\n+\n+// Test data for n=0, m=2.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data003[11] =\n+{\n+  { 1.0000000000000000, 0, 2, \n+\t  0.0000000000000000 },\n+  { 1.0000000000000000, 0, 2, \n+\t  10.000000000000000 },\n+  { 1.0000000000000000, 0, 2, \n+\t  20.000000000000000 },\n+  { 1.0000000000000000, 0, 2, \n+\t  30.000000000000000 },\n+  { 1.0000000000000000, 0, 2, \n+\t  40.000000000000000 },\n+  { 1.0000000000000000, 0, 2, \n+\t  50.000000000000000 },\n+  { 1.0000000000000000, 0, 2, \n+\t  60.000000000000000 },\n+  { 1.0000000000000000, 0, 2, \n+\t  70.000000000000000 },\n+  { 1.0000000000000000, 0, 2, \n+\t  80.000000000000000 },\n+  { 1.0000000000000000, 0, 2, \n+\t  90.000000000000000 },\n+  { 1.0000000000000000, 0, 2, \n+\t  100.00000000000000 },\n+};\n+const double toler003 = 2.5000000000000020e-13;\n+\n+// Test data for n=0, m=5.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data004[11] =\n+{\n+  { 1.0000000000000000, 0, 5, \n+\t  0.0000000000000000 },\n+  { 1.0000000000000000, 0, 5, \n+\t  10.000000000000000 },\n+  { 1.0000000000000000, 0, 5, \n+\t  20.000000000000000 },\n+  { 1.0000000000000000, 0, 5, \n+\t  30.000000000000000 },\n+  { 1.0000000000000000, 0, 5, \n+\t  40.000000000000000 },\n+  { 1.0000000000000000, 0, 5, \n+\t  50.000000000000000 },\n+  { 1.0000000000000000, 0, 5, \n+\t  60.000000000000000 },\n+  { 1.0000000000000000, 0, 5, \n+\t  70.000000000000000 },\n+  { 1.0000000000000000, 0, 5, \n+\t  80.000000000000000 },\n+  { 1.0000000000000000, 0, 5, \n+\t  90.000000000000000 },\n+  { 1.0000000000000000, 0, 5, \n+\t  100.00000000000000 },\n+};\n+const double toler004 = 2.5000000000000020e-13;\n+\n+// Test data for n=0, m=10.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data005[11] =\n+{\n+  { 1.0000000000000000, 0, 10, \n+\t  0.0000000000000000 },\n+  { 1.0000000000000000, 0, 10, \n+\t  10.000000000000000 },\n+  { 1.0000000000000000, 0, 10, \n+\t  20.000000000000000 },\n+  { 1.0000000000000000, 0, 10, \n+\t  30.000000000000000 },\n+  { 1.0000000000000000, 0, 10, \n+\t  40.000000000000000 },\n+  { 1.0000000000000000, 0, 10, \n+\t  50.000000000000000 },\n+  { 1.0000000000000000, 0, 10, \n+\t  60.000000000000000 },\n+  { 1.0000000000000000, 0, 10, \n+\t  70.000000000000000 },\n+  { 1.0000000000000000, 0, 10, \n+\t  80.000000000000000 },\n+  { 1.0000000000000000, 0, 10, \n+\t  90.000000000000000 },\n+  { 1.0000000000000000, 0, 10, \n+\t  100.00000000000000 },\n+};\n+const double toler005 = 2.5000000000000020e-13;\n+\n+// Test data for n=0, m=20.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data006[11] =\n+{\n+  { 1.0000000000000000, 0, 20, \n+\t  0.0000000000000000 },\n+  { 1.0000000000000000, 0, 20, \n+\t  10.000000000000000 },\n+  { 1.0000000000000000, 0, 20, \n+\t  20.000000000000000 },\n+  { 1.0000000000000000, 0, 20, \n+\t  30.000000000000000 },\n+  { 1.0000000000000000, 0, 20, \n+\t  40.000000000000000 },\n+  { 1.0000000000000000, 0, 20, \n+\t  50.000000000000000 },\n+  { 1.0000000000000000, 0, 20, \n+\t  60.000000000000000 },\n+  { 1.0000000000000000, 0, 20, \n+\t  70.000000000000000 },\n+  { 1.0000000000000000, 0, 20, \n+\t  80.000000000000000 },\n+  { 1.0000000000000000, 0, 20, \n+\t  90.000000000000000 },\n+  { 1.0000000000000000, 0, 20, \n+\t  100.00000000000000 },\n+};\n+const double toler006 = 2.5000000000000020e-13;\n+\n+// Test data for n=0, m=50.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data007[11] =\n+{\n+  { 1.0000000000000000, 0, 50, \n+\t  0.0000000000000000 },\n+  { 1.0000000000000000, 0, 50, \n+\t  10.000000000000000 },\n+  { 1.0000000000000000, 0, 50, \n+\t  20.000000000000000 },\n+  { 1.0000000000000000, 0, 50, \n+\t  30.000000000000000 },\n+  { 1.0000000000000000, 0, 50, \n+\t  40.000000000000000 },\n+  { 1.0000000000000000, 0, 50, \n+\t  50.000000000000000 },\n+  { 1.0000000000000000, 0, 50, \n+\t  60.000000000000000 },\n+  { 1.0000000000000000, 0, 50, \n+\t  70.000000000000000 },\n+  { 1.0000000000000000, 0, 50, \n+\t  80.000000000000000 },\n+  { 1.0000000000000000, 0, 50, \n+\t  90.000000000000000 },\n+  { 1.0000000000000000, 0, 50, \n+\t  100.00000000000000 },\n+};\n+const double toler007 = 2.5000000000000020e-13;\n+\n+// Test data for n=0, m=100.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data008[11] =\n+{\n+  { 1.0000000000000000, 0, 100, \n+\t  0.0000000000000000 },\n+  { 1.0000000000000000, 0, 100, \n+\t  10.000000000000000 },\n+  { 1.0000000000000000, 0, 100, \n+\t  20.000000000000000 },\n+  { 1.0000000000000000, 0, 100, \n+\t  30.000000000000000 },\n+  { 1.0000000000000000, 0, 100, \n+\t  40.000000000000000 },\n+  { 1.0000000000000000, 0, 100, \n+\t  50.000000000000000 },\n+  { 1.0000000000000000, 0, 100, \n+\t  60.000000000000000 },\n+  { 1.0000000000000000, 0, 100, \n+\t  70.000000000000000 },\n+  { 1.0000000000000000, 0, 100, \n+\t  80.000000000000000 },\n+  { 1.0000000000000000, 0, 100, \n+\t  90.000000000000000 },\n+  { 1.0000000000000000, 0, 100, \n+\t  100.00000000000000 },\n+};\n+const double toler008 = 2.5000000000000020e-13;\n+\n+// Test data for n=1, m=0.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data009[11] =\n+{\n+  { 1.0000000000000000, 1, 0, \n+\t  0.0000000000000000 },\n+  { -9.0000000000000000, 1, 0, \n+\t  10.000000000000000 },\n+  { -19.000000000000000, 1, 0, \n+\t  20.000000000000000 },\n+  { -29.000000000000000, 1, 0, \n+\t  30.000000000000000 },\n+  { -39.000000000000000, 1, 0, \n+\t  40.000000000000000 },\n+  { -49.000000000000000, 1, 0, \n+\t  50.000000000000000 },\n+  { -59.000000000000000, 1, 0, \n+\t  60.000000000000000 },\n+  { -69.000000000000000, 1, 0, \n+\t  70.000000000000000 },\n+  { -79.000000000000000, 1, 0, \n+\t  80.000000000000000 },\n+  { -89.000000000000000, 1, 0, \n+\t  90.000000000000000 },\n+  { -99.000000000000000, 1, 0, \n+\t  100.00000000000000 },\n+};\n+const double toler009 = 2.5000000000000020e-13;\n+\n+// Test data for n=1, m=1.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data010[11] =\n+{\n+  { 2.0000000000000000, 1, 1, \n+\t  0.0000000000000000 },\n+  { -8.0000000000000000, 1, 1, \n+\t  10.000000000000000 },\n+  { -18.000000000000000, 1, 1, \n+\t  20.000000000000000 },\n+  { -28.000000000000000, 1, 1, \n+\t  30.000000000000000 },\n+  { -38.000000000000000, 1, 1, \n+\t  40.000000000000000 },\n+  { -48.000000000000000, 1, 1, \n+\t  50.000000000000000 },\n+  { -58.000000000000000, 1, 1, \n+\t  60.000000000000000 },\n+  { -68.000000000000000, 1, 1, \n+\t  70.000000000000000 },\n+  { -78.000000000000000, 1, 1, \n+\t  80.000000000000000 },\n+  { -88.000000000000000, 1, 1, \n+\t  90.000000000000000 },\n+  { -98.000000000000000, 1, 1, \n+\t  100.00000000000000 },\n+};\n+const double toler010 = 2.5000000000000020e-13;\n+\n+// Test data for n=1, m=2.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data011[11] =\n+{\n+  { 3.0000000000000000, 1, 2, \n+\t  0.0000000000000000 },\n+  { -7.0000000000000000, 1, 2, \n+\t  10.000000000000000 },\n+  { -17.000000000000000, 1, 2, \n+\t  20.000000000000000 },\n+  { -27.000000000000000, 1, 2, \n+\t  30.000000000000000 },\n+  { -37.000000000000000, 1, 2, \n+\t  40.000000000000000 },\n+  { -47.000000000000000, 1, 2, \n+\t  50.000000000000000 },\n+  { -57.000000000000000, 1, 2, \n+\t  60.000000000000000 },\n+  { -67.000000000000000, 1, 2, \n+\t  70.000000000000000 },\n+  { -77.000000000000000, 1, 2, \n+\t  80.000000000000000 },\n+  { -87.000000000000000, 1, 2, \n+\t  90.000000000000000 },\n+  { -97.000000000000000, 1, 2, \n+\t  100.00000000000000 },\n+};\n+const double toler011 = 2.5000000000000020e-13;\n+\n+// Test data for n=1, m=5.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data012[11] =\n+{\n+  { 6.0000000000000000, 1, 5, \n+\t  0.0000000000000000 },\n+  { -4.0000000000000000, 1, 5, \n+\t  10.000000000000000 },\n+  { -14.000000000000000, 1, 5, \n+\t  20.000000000000000 },\n+  { -24.000000000000000, 1, 5, \n+\t  30.000000000000000 },\n+  { -34.000000000000000, 1, 5, \n+\t  40.000000000000000 },\n+  { -44.000000000000000, 1, 5, \n+\t  50.000000000000000 },\n+  { -54.000000000000000, 1, 5, \n+\t  60.000000000000000 },\n+  { -64.000000000000000, 1, 5, \n+\t  70.000000000000000 },\n+  { -74.000000000000000, 1, 5, \n+\t  80.000000000000000 },\n+  { -84.000000000000000, 1, 5, \n+\t  90.000000000000000 },\n+  { -94.000000000000000, 1, 5, \n+\t  100.00000000000000 },\n+};\n+const double toler012 = 2.5000000000000020e-13;\n+\n+// Test data for n=1, m=10.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data013[11] =\n+{\n+  { 11.000000000000000, 1, 10, \n+\t  0.0000000000000000 },\n+  { 1.0000000000000000, 1, 10, \n+\t  10.000000000000000 },\n+  { -9.0000000000000000, 1, 10, \n+\t  20.000000000000000 },\n+  { -19.000000000000000, 1, 10, \n+\t  30.000000000000000 },\n+  { -29.000000000000000, 1, 10, \n+\t  40.000000000000000 },\n+  { -39.000000000000000, 1, 10, \n+\t  50.000000000000000 },\n+  { -49.000000000000000, 1, 10, \n+\t  60.000000000000000 },\n+  { -59.000000000000000, 1, 10, \n+\t  70.000000000000000 },\n+  { -69.000000000000000, 1, 10, \n+\t  80.000000000000000 },\n+  { -79.000000000000000, 1, 10, \n+\t  90.000000000000000 },\n+  { -89.000000000000000, 1, 10, \n+\t  100.00000000000000 },\n+};\n+const double toler013 = 2.5000000000000020e-13;\n+\n+// Test data for n=1, m=20.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data014[11] =\n+{\n+  { 21.000000000000000, 1, 20, \n+\t  0.0000000000000000 },\n+  { 11.000000000000000, 1, 20, \n+\t  10.000000000000000 },\n+  { 1.0000000000000000, 1, 20, \n+\t  20.000000000000000 },\n+  { -9.0000000000000000, 1, 20, \n+\t  30.000000000000000 },\n+  { -19.000000000000000, 1, 20, \n+\t  40.000000000000000 },\n+  { -29.000000000000000, 1, 20, \n+\t  50.000000000000000 },\n+  { -39.000000000000000, 1, 20, \n+\t  60.000000000000000 },\n+  { -49.000000000000000, 1, 20, \n+\t  70.000000000000000 },\n+  { -59.000000000000000, 1, 20, \n+\t  80.000000000000000 },\n+  { -69.000000000000000, 1, 20, \n+\t  90.000000000000000 },\n+  { -79.000000000000000, 1, 20, \n+\t  100.00000000000000 },\n+};\n+const double toler014 = 2.5000000000000020e-13;\n+\n+// Test data for n=1, m=50.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data015[11] =\n+{\n+  { 51.000000000000000, 1, 50, \n+\t  0.0000000000000000 },\n+  { 41.000000000000000, 1, 50, \n+\t  10.000000000000000 },\n+  { 31.000000000000000, 1, 50, \n+\t  20.000000000000000 },\n+  { 21.000000000000000, 1, 50, \n+\t  30.000000000000000 },\n+  { 11.000000000000000, 1, 50, \n+\t  40.000000000000000 },\n+  { 1.0000000000000000, 1, 50, \n+\t  50.000000000000000 },\n+  { -9.0000000000000000, 1, 50, \n+\t  60.000000000000000 },\n+  { -19.000000000000000, 1, 50, \n+\t  70.000000000000000 },\n+  { -29.000000000000000, 1, 50, \n+\t  80.000000000000000 },\n+  { -39.000000000000000, 1, 50, \n+\t  90.000000000000000 },\n+  { -49.000000000000000, 1, 50, \n+\t  100.00000000000000 },\n+};\n+const double toler015 = 2.5000000000000020e-13;\n+\n+// Test data for n=1, m=100.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data016[11] =\n+{\n+  { 101.00000000000000, 1, 100, \n+\t  0.0000000000000000 },\n+  { 91.000000000000000, 1, 100, \n+\t  10.000000000000000 },\n+  { 81.000000000000000, 1, 100, \n+\t  20.000000000000000 },\n+  { 71.000000000000000, 1, 100, \n+\t  30.000000000000000 },\n+  { 61.000000000000000, 1, 100, \n+\t  40.000000000000000 },\n+  { 51.000000000000000, 1, 100, \n+\t  50.000000000000000 },\n+  { 41.000000000000000, 1, 100, \n+\t  60.000000000000000 },\n+  { 31.000000000000000, 1, 100, \n+\t  70.000000000000000 },\n+  { 21.000000000000000, 1, 100, \n+\t  80.000000000000000 },\n+  { 11.000000000000000, 1, 100, \n+\t  90.000000000000000 },\n+  { 1.0000000000000000, 1, 100, \n+\t  100.00000000000000 },\n+};\n+const double toler016 = 2.5000000000000020e-13;\n+\n+// Test data for n=2, m=0.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data017[11] =\n+{\n+  { 1.0000000000000000, 2, 0, \n+\t  0.0000000000000000 },\n+  { 31.000000000000000, 2, 0, \n+\t  10.000000000000000 },\n+  { 161.00000000000000, 2, 0, \n+\t  20.000000000000000 },\n+  { 391.00000000000000, 2, 0, \n+\t  30.000000000000000 },\n+  { 721.00000000000000, 2, 0, \n+\t  40.000000000000000 },\n+  { 1151.0000000000000, 2, 0, \n+\t  50.000000000000000 },\n+  { 1681.0000000000000, 2, 0, \n+\t  60.000000000000000 },\n+  { 2311.0000000000000, 2, 0, \n+\t  70.000000000000000 },\n+  { 3041.0000000000000, 2, 0, \n+\t  80.000000000000000 },\n+  { 3871.0000000000000, 2, 0, \n+\t  90.000000000000000 },\n+  { 4801.0000000000000, 2, 0, \n+\t  100.00000000000000 },\n+};\n+const double toler017 = 2.5000000000000020e-13;\n+\n+// Test data for n=2, m=1.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data018[11] =\n+{\n+  { 3.0000000000000000, 2, 1, \n+\t  0.0000000000000000 },\n+  { 23.000000000000000, 2, 1, \n+\t  10.000000000000000 },\n+  { 143.00000000000000, 2, 1, \n+\t  20.000000000000000 },\n+  { 363.00000000000000, 2, 1, \n+\t  30.000000000000000 },\n+  { 683.00000000000000, 2, 1, \n+\t  40.000000000000000 },\n+  { 1103.0000000000000, 2, 1, \n+\t  50.000000000000000 },\n+  { 1623.0000000000000, 2, 1, \n+\t  60.000000000000000 },\n+  { 2243.0000000000000, 2, 1, \n+\t  70.000000000000000 },\n+  { 2963.0000000000000, 2, 1, \n+\t  80.000000000000000 },\n+  { 3783.0000000000000, 2, 1, \n+\t  90.000000000000000 },\n+  { 4703.0000000000000, 2, 1, \n+\t  100.00000000000000 },\n+};\n+const double toler018 = 2.5000000000000020e-13;\n+\n+// Test data for n=2, m=2.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data019[11] =\n+{\n+  { 6.0000000000000000, 2, 2, \n+\t  0.0000000000000000 },\n+  { 16.000000000000000, 2, 2, \n+\t  10.000000000000000 },\n+  { 126.00000000000000, 2, 2, \n+\t  20.000000000000000 },\n+  { 336.00000000000000, 2, 2, \n+\t  30.000000000000000 },\n+  { 646.00000000000000, 2, 2, \n+\t  40.000000000000000 },\n+  { 1056.0000000000000, 2, 2, \n+\t  50.000000000000000 },\n+  { 1566.0000000000000, 2, 2, \n+\t  60.000000000000000 },\n+  { 2176.0000000000000, 2, 2, \n+\t  70.000000000000000 },\n+  { 2886.0000000000000, 2, 2, \n+\t  80.000000000000000 },\n+  { 3696.0000000000000, 2, 2, \n+\t  90.000000000000000 },\n+  { 4606.0000000000000, 2, 2, \n+\t  100.00000000000000 },\n+};\n+const double toler019 = 2.5000000000000020e-13;\n+\n+// Test data for n=2, m=5.\n+// max(|f - f_GSL|): 4.5519144009631418e-15\n+// max(|f - f_GSL| / |f_GSL|): 4.5519144009631623e-15\n+const testcase_assoc_laguerre<double>\n+data020[11] =\n+{\n+  { 21.000000000000000, 2, 5, \n+\t  0.0000000000000000 },\n+  { 0.99999999999999545, 2, 5, \n+\t  10.000000000000000 },\n+  { 81.000000000000000, 2, 5, \n+\t  20.000000000000000 },\n+  { 261.00000000000000, 2, 5, \n+\t  30.000000000000000 },\n+  { 541.00000000000000, 2, 5, \n+\t  40.000000000000000 },\n+  { 921.00000000000000, 2, 5, \n+\t  50.000000000000000 },\n+  { 1401.0000000000000, 2, 5, \n+\t  60.000000000000000 },\n+  { 1981.0000000000000, 2, 5, \n+\t  70.000000000000000 },\n+  { 2661.0000000000000, 2, 5, \n+\t  80.000000000000000 },\n+  { 3441.0000000000000, 2, 5, \n+\t  90.000000000000000 },\n+  { 4321.0000000000000, 2, 5, \n+\t  100.00000000000000 },\n+};\n+const double toler020 = 2.5000000000000020e-13;\n+\n+// Test data for n=2, m=10.\n+// max(|f - f_GSL|): 3.5527136788005009e-14\n+// max(|f - f_GSL| / |f_GSL|): 2.4424906541753385e-15\n+const testcase_assoc_laguerre<double>\n+data021[11] =\n+{\n+  { 66.000000000000000, 2, 10, \n+\t  0.0000000000000000 },\n+  { -4.0000000000000098, 2, 10, \n+\t  10.000000000000000 },\n+  { 25.999999999999964, 2, 10, \n+\t  20.000000000000000 },\n+  { 156.00000000000000, 2, 10, \n+\t  30.000000000000000 },\n+  { 386.00000000000000, 2, 10, \n+\t  40.000000000000000 },\n+  { 716.00000000000000, 2, 10, \n+\t  50.000000000000000 },\n+  { 1146.0000000000000, 2, 10, \n+\t  60.000000000000000 },\n+  { 1676.0000000000000, 2, 10, \n+\t  70.000000000000000 },\n+  { 2306.0000000000000, 2, 10, \n+\t  80.000000000000000 },\n+  { 3036.0000000000000, 2, 10, \n+\t  90.000000000000000 },\n+  { 3866.0000000000000, 2, 10, \n+\t  100.00000000000000 },\n+};\n+const double toler021 = 2.5000000000000020e-13;\n+\n+// Test data for n=2, m=20.\n+// max(|f - f_GSL|): 5.6843418860808015e-13\n+// max(|f - f_GSL| / |f_GSL|): 5.9211894646674663e-15\n+const testcase_assoc_laguerre<double>\n+data022[11] =\n+{\n+  { 231.00000000000000, 2, 20, \n+\t  0.0000000000000000 },\n+  { 61.000000000000206, 2, 20, \n+\t  10.000000000000000 },\n+  { -9.0000000000000053, 2, 20, \n+\t  20.000000000000000 },\n+  { 21.000000000000124, 2, 20, \n+\t  30.000000000000000 },\n+  { 151.00000000000057, 2, 20, \n+\t  40.000000000000000 },\n+  { 381.00000000000000, 2, 20, \n+\t  50.000000000000000 },\n+  { 711.00000000000000, 2, 20, \n+\t  60.000000000000000 },\n+  { 1141.0000000000000, 2, 20, \n+\t  70.000000000000000 },\n+  { 1670.9999999999998, 2, 20, \n+\t  80.000000000000000 },\n+  { 2301.0000000000000, 2, 20, \n+\t  90.000000000000000 },\n+  { 3031.0000000000000, 2, 20, \n+\t  100.00000000000000 },\n+};\n+const double toler022 = 5.0000000000000039e-13;\n+\n+// Test data for n=2, m=50.\n+// max(|f - f_GSL|): 3.6379788070917130e-12\n+// max(|f - f_GSL| / |f_GSL|): 1.9243865760169750e-14\n+const testcase_assoc_laguerre<double>\n+data023[11] =\n+{\n+  { 1326.0000000000000, 2, 50, \n+\t  0.0000000000000000 },\n+  { 855.99999999999693, 2, 50, \n+\t  10.000000000000000 },\n+  { 485.99999999999835, 2, 50, \n+\t  20.000000000000000 },\n+  { 215.99999999999937, 2, 50, \n+\t  30.000000000000000 },\n+  { 45.999999999999829, 2, 50, \n+\t  40.000000000000000 },\n+  { -23.999999999999538, 2, 50, \n+\t  50.000000000000000 },\n+  { 6.0000000000001057, 2, 50, \n+\t  60.000000000000000 },\n+  { 135.99999999999963, 2, 50, \n+\t  70.000000000000000 },\n+  { 365.99999999999892, 2, 50, \n+\t  80.000000000000000 },\n+  { 695.99999999999784, 2, 50, \n+\t  90.000000000000000 },\n+  { 1125.9999999999964, 2, 50, \n+\t  100.00000000000000 },\n+};\n+const double toler023 = 1.0000000000000008e-12;\n+\n+// Test data for n=2, m=100.\n+// max(|f - f_GSL|): 6.5483618527650833e-11\n+// max(|f - f_GSL| / |f_GSL|): 1.6416871873157281e-14\n+const testcase_assoc_laguerre<double>\n+data024[11] =\n+{\n+  { 5151.0000000000000, 2, 100, \n+\t  0.0000000000000000 },\n+  { 4181.0000000000655, 2, 100, \n+\t  10.000000000000000 },\n+  { 3311.0000000000518, 2, 100, \n+\t  20.000000000000000 },\n+  { 2541.0000000000400, 2, 100, \n+\t  30.000000000000000 },\n+  { 1871.0000000000291, 2, 100, \n+\t  40.000000000000000 },\n+  { 1301.0000000000207, 2, 100, \n+\t  50.000000000000000 },\n+  { 831.00000000001364, 2, 100, \n+\t  60.000000000000000 },\n+  { 461.00000000000682, 2, 100, \n+\t  70.000000000000000 },\n+  { 191.00000000000250, 2, 100, \n+\t  80.000000000000000 },\n+  { 21.000000000000046, 2, 100, \n+\t  90.000000000000000 },\n+  { -48.999999999999915, 2, 100, \n+\t  100.00000000000000 },\n+};\n+const double toler024 = 1.0000000000000008e-12;\n+\n+// Test data for n=5, m=0.\n+// max(|f - f_GSL|): 7.4505805969238281e-09\n+// max(|f - f_GSL| / |f_GSL|): 1.9501553136894460e-16\n+const testcase_assoc_laguerre<double>\n+data025[11] =\n+{\n+  { 1.0000000000000000, 5, 0, \n+\t  0.0000000000000000 },\n+  { 34.333333333333329, 5, 0, \n+\t  10.000000000000000 },\n+  { -4765.6666666666670, 5, 0, \n+\t  20.000000000000000 },\n+  { -74399.000000000000, 5, 0, \n+\t  30.000000000000000 },\n+  { -418865.66666666663, 5, 0, \n+\t  40.000000000000000 },\n+  { -1498165.6666666665, 5, 0, \n+\t  50.000000000000000 },\n+  { -4122299.0000000000, 5, 0, \n+\t  60.000000000000000 },\n+  { -9551265.6666666679, 5, 0, \n+\t  70.000000000000000 },\n+  { -19595065.666666664, 5, 0, \n+\t  80.000000000000000 },\n+  { -36713699.000000000, 5, 0, \n+\t  90.000000000000000 },\n+  { -64117165.666666664, 5, 0, \n+\t  100.00000000000000 },\n+};\n+const double toler025 = 2.5000000000000020e-13;\n+\n+// Test data for n=5, m=1.\n+// max(|f - f_GSL|): 3.7252902984619141e-09\n+// max(|f - f_GSL| / |f_GSL|): 3.1347473636475015e-16\n+const testcase_assoc_laguerre<double>\n+data026[11] =\n+{\n+  { 6.0000000000000000, 5, 1, \n+\t  0.0000000000000000 },\n+  { 22.666666666666661, 5, 1, \n+\t  10.000000000000000 },\n+  { -2960.6666666666661, 5, 1, \n+\t  20.000000000000000 },\n+  { -58944.000000000000, 5, 1, \n+\t  30.000000000000000 },\n+  { -357927.33333333326, 5, 1, \n+\t  40.000000000000000 },\n+  { -1329910.6666666665, 5, 1, \n+\t  50.000000000000000 },\n+  { -3744894.0000000000, 5, 1, \n+\t  60.000000000000000 },\n+  { -8812877.3333333321, 5, 1, \n+\t  70.000000000000000 },\n+  { -18283860.666666664, 5, 1, \n+\t  80.000000000000000 },\n+  { -34547844.000000000, 5, 1, \n+\t  90.000000000000000 },\n+  { -60734827.333333336, 5, 1, \n+\t  100.00000000000000 },\n+};\n+const double toler026 = 2.5000000000000020e-13;\n+\n+// Test data for n=5, m=2.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_laguerre<double>\n+data027[11] =\n+{\n+  { 21.000000000000000, 5, 2, \n+\t  0.0000000000000000 },\n+  { 4.3333333333333339, 5, 2, \n+\t  10.000000000000000 },\n+  { -1679.0000000000000, 5, 2, \n+\t  20.000000000000000 },\n+  { -46029.000000000000, 5, 2, \n+\t  30.000000000000000 },\n+  { -304045.66666666669, 5, 2, \n+\t  40.000000000000000 },\n+  { -1176729.0000000002, 5, 2, \n+\t  50.000000000000000 },\n+  { -3395079.0000000000, 5, 2, \n+\t  60.000000000000000 },\n+  { -8120095.6666666660, 5, 2, \n+\t  70.000000000000000 },\n+  { -17042778.999999996, 5, 2, \n+\t  80.000000000000000 },\n+  { -32484129.000000000, 5, 2, \n+\t  90.000000000000000 },\n+  { -57495145.666666664, 5, 2, \n+\t  100.00000000000000 },\n+};\n+const double toler027 = 2.5000000000000020e-13;\n+\n+// Test data for n=5, m=5.\n+// max(|f - f_GSL|): 7.4505805969238281e-09\n+// max(|f - f_GSL| / |f_GSL|): 1.7763568394002536e-15\n+const testcase_assoc_laguerre<double>\n+data028[11] =\n+{\n+  { 252.00000000000000, 5, 5, \n+\t  0.0000000000000000 },\n+  { -14.666666666666654, 5, 5, \n+\t  10.000000000000000 },\n+  { 51.999999999999908, 5, 5, \n+\t  20.000000000000000 },\n+  { -19548.000000000000, 5, 5, \n+\t  30.000000000000000 },\n+  { -178814.66666666660, 5, 5, \n+\t  40.000000000000000 },\n+  { -797747.99999999977, 5, 5, \n+\t  50.000000000000000 },\n+  { -2496348.0000000000, 5, 5, \n+\t  60.000000000000000 },\n+  { -6294614.6666666660, 5, 5, \n+\t  70.000000000000000 },\n+  { -13712547.999999996, 5, 5, \n+\t  80.000000000000000 },\n+  { -26870147.999999993, 5, 5, \n+\t  90.000000000000000 },\n+  { -48587414.666666672, 5, 5, \n+\t  100.00000000000000 },\n+};\n+const double toler028 = 2.5000000000000020e-13;\n+\n+// Test data for n=5, m=10.\n+// max(|f - f_GSL|): 7.4505805969238281e-09\n+// max(|f - f_GSL| / |f_GSL|): 1.9556222085140405e-15\n+const testcase_assoc_laguerre<double>\n+data029[11] =\n+{\n+  { 3003.0000000000000, 5, 10, \n+\t  0.0000000000000000 },\n+  { 19.666666666666668, 5, 10, \n+\t  10.000000000000000 },\n+  { 36.333333333333272, 5, 10, \n+\t  20.000000000000000 },\n+  { -1947.0000000000000, 5, 10, \n+\t  30.000000000000000 },\n+  { -60930.333333333314, 5, 10, \n+\t  40.000000000000000 },\n+  { -381913.66666666651, 5, 10, \n+\t  50.000000000000000 },\n+  { -1419897.0000000000, 5, 10, \n+\t  60.000000000000000 },\n+  { -3979880.3333333330, 5, 10, \n+\t  70.000000000000000 },\n+  { -9316863.6666666642, 5, 10, \n+\t  80.000000000000000 },\n+  { -19235847.000000000, 5, 10, \n+\t  90.000000000000000 },\n+  { -36191830.333333328, 5, 10, \n+\t  100.00000000000000 },\n+};\n+const double toler029 = 2.5000000000000020e-13;\n+\n+// Test data for n=5, m=20.\n+// max(|f - f_GSL|): 1.8626451492309570e-09\n+// max(|f - f_GSL| / |f_GSL|): 2.8421709430404088e-15\n+const testcase_assoc_laguerre<double>\n+data030[11] =\n+{\n+  { 53130.000000000000, 5, 20, \n+\t  0.0000000000000000 },\n+  { 1213.3333333333335, 5, 20, \n+\t  10.000000000000000 },\n+  { 129.99999999999963, 5, 20, \n+\t  20.000000000000000 },\n+  { -119.99999999999974, 5, 20, \n+\t  30.000000000000000 },\n+  { 463.33333333333320, 5, 20, \n+\t  40.000000000000000 },\n+  { -48120.000000000015, 5, 20, \n+\t  50.000000000000000 },\n+  { -345870.00000000017, 5, 20, \n+\t  60.000000000000000 },\n+  { -1342786.6666666667, 5, 20, \n+\t  70.000000000000000 },\n+  { -3838870.0000000009, 5, 20, \n+\t  80.000000000000000 },\n+  { -9084120.0000000000, 5, 20, \n+\t  90.000000000000000 },\n+  { -18878536.666666668, 5, 20, \n+\t  100.00000000000000 },\n+};\n+const double toler030 = 2.5000000000000020e-13;\n+\n+// Test data for n=5, m=50.\n+// max(|f - f_GSL|): 5.8207660913467407e-11\n+// max(|f - f_GSL| / |f_GSL|): 8.3212917817998576e-15\n+const testcase_assoc_laguerre<double>\n+data031[11] =\n+{\n+  { 3478761.0000000000, 5, 50, \n+\t  0.0000000000000000 },\n+  { 1154544.3333333335, 5, 50, \n+\t  10.000000000000000 },\n+  { 264661.00000000006, 5, 50, \n+\t  20.000000000000000 },\n+  { 24111.000000000033, 5, 50, \n+\t  30.000000000000000 },\n+  { -2105.6666666666665, 5, 50, \n+\t  40.000000000000000 },\n+  { 1010.9999999999916, 5, 50, \n+\t  50.000000000000000 },\n+  { -1538.9999999999955, 5, 50, \n+\t  60.000000000000000 },\n+  { 5244.3333333333449, 5, 50, \n+\t  70.000000000000000 },\n+  { -13639.000000000011, 5, 50, \n+\t  80.000000000000000 },\n+  { -243189.00000000006, 5, 50, \n+\t  90.000000000000000 },\n+  { -1118405.6666666667, 5, 50, \n+\t  100.00000000000000 },\n+};\n+const double toler031 = 5.0000000000000039e-13;\n+\n+// Test data for n=5, m=100.\n+// max(|f - f_GSL|): 1.4901161193847656e-08\n+// max(|f - f_GSL| / |f_GSL|): 4.3934583843896481e-16\n+const testcase_assoc_laguerre<double>\n+data032[11] =\n+{\n+  { 96560646.000000000, 5, 100, \n+\t  0.0000000000000000 },\n+  { 57264262.666666649, 5, 100, \n+\t  10.000000000000000 },\n+  { 31841379.333333332, 5, 100, \n+\t  20.000000000000000 },\n+  { 16281996.000000000, 5, 100, \n+\t  30.000000000000000 },\n+  { 7426112.6666666670, 5, 100, \n+\t  40.000000000000000 },\n+  { 2863729.3333333330, 5, 100, \n+\t  50.000000000000000 },\n+  { 834846.00000000000, 5, 100, \n+\t  60.000000000000000 },\n+  { 129462.66666666663, 5, 100, \n+\t  70.000000000000000 },\n+  { -12420.666666666668, 5, 100, \n+\t  80.000000000000000 },\n+  { -804.00000000000000, 5, 100, \n+\t  90.000000000000000 },\n+  { 4312.6666666666670, 5, 100, \n+\t  100.00000000000000 },\n+};\n+const double toler032 = 2.5000000000000020e-13;\n+\n+// Test data for n=10, m=0.\n+// max(|f - f_GSL|): 6.1035156250000000e-05\n+// max(|f - f_GSL| / |f_GSL|): 6.1315986390500118e-15\n+const testcase_assoc_laguerre<double>\n+data033[11] =\n+{\n+  { 1.0000000000000000, 10, 0, \n+\t  0.0000000000000000 },\n+  { 27.984126984126977, 10, 0, \n+\t  10.000000000000000 },\n+  { 3227.8077601410932, 10, 0, \n+\t  20.000000000000000 },\n+  { 15129.571428571455, 10, 0, \n+\t  30.000000000000000 },\n+  { 79724066.608465582, 10, 0, \n+\t  40.000000000000000 },\n+  { 2037190065.3738980, 10, 0, \n+\t  50.000000000000000 },\n+  { 21804200401.000000, 10, 0, \n+\t  60.000000000000000 },\n+  { 144688291819.51855, 10, 0, \n+\t  70.000000000000000 },\n+  { 703324772760.08276, 10, 0, \n+\t  80.000000000000000 },\n+  { 2741055412243.8569, 10, 0, \n+\t  90.000000000000000 },\n+  { 9051283795429.5723, 10, 0, \n+\t  100.00000000000000 },\n+};\n+const double toler033 = 5.0000000000000039e-13;\n+\n+// Test data for n=10, m=1.\n+// max(|f - f_GSL|): 0.0019531250000000000\n+// max(|f - f_GSL| / |f_GSL|): 3.2082933888884751e-16\n+const testcase_assoc_laguerre<double>\n+data034[11] =\n+{\n+  { 11.000000000000000, 10, 1, \n+\t  0.0000000000000000 },\n+  { 14.791887125220455, 10, 1, \n+\t  10.000000000000000 },\n+  { 2704.6507936507933, 10, 1, \n+\t  20.000000000000000 },\n+  { -182924.71428571423, 10, 1, \n+\t  30.000000000000000 },\n+  { 48066036.749559075, 10, 1, \n+\t  40.000000000000000 },\n+  { 1486264192.2169311, 10, 1, \n+\t  50.000000000000000 },\n+  { 17239562282.428574, 10, 1, \n+\t  60.000000000000000 },\n+  { 119837491630.13579, 10, 1, \n+\t  70.000000000000000 },\n+  { 600681375251.21167, 10, 1, \n+\t  80.000000000000000 },\n+  { 2392908405632.4287, 10, 1, \n+\t  90.000000000000000 },\n+  { 8033035722509.2373, 10, 1, \n+\t  100.00000000000000 },\n+};\n+const double toler034 = 2.5000000000000020e-13;\n+\n+// Test data for n=10, m=2.\n+// max(|f - f_GSL|): 0.00012207031250000000\n+// max(|f - f_GSL| / |f_GSL|): 3.0884259455918855e-16\n+const testcase_assoc_laguerre<double>\n+data035[11] =\n+{\n+  { 66.000000000000000, 10, 2, \n+\t  0.0000000000000000 },\n+  { -14.511463844797181, 10, 2, \n+\t  10.000000000000000 },\n+  { 1064.5890652557316, 10, 2, \n+\t  20.000000000000000 },\n+  { -194569.71428571429, 10, 2, \n+\t  30.000000000000000 },\n+  { 27343569.350970022, 10, 2, \n+\t  40.000000000000000 },\n+  { 1067807661.6790125, 10, 2, \n+\t  50.000000000000000 },\n+  { 13529451580.285711, 10, 2, \n+\t  60.000000000000000 },\n+  { 98812724224.641937, 10, 2, \n+\t  70.000000000000000 },\n+  { 511482736187.34021, 10, 2, \n+\t  80.000000000000000 },\n+  { 2084478393087.4285, 10, 2, \n+\t  90.000000000000000 },\n+  { 7117724862237.0752, 10, 2, \n+\t  100.00000000000000 },\n+};\n+const double toler035 = 2.5000000000000020e-13;\n+\n+// Test data for n=10, m=5.\n+// max(|f - f_GSL|): 0.0019531250000000000\n+// max(|f - f_GSL| / |f_GSL|): 5.4929549774030811e-15\n+const testcase_assoc_laguerre<double>\n+data036[11] =\n+{\n+  { 3003.0000000000000, 10, 5, \n+\t  0.0000000000000000 },\n+  { 11.641975308642031, 10, 5, \n+\t  10.000000000000000 },\n+  { -1137.5643738977069, 10, 5, \n+\t  20.000000000000000 },\n+  { -9254.1428571428605, 10, 5, \n+\t  30.000000000000000 },\n+  { 2121878.8377425023, 10, 5, \n+\t  40.000000000000000 },\n+  { 352060171.43033499, 10, 5, \n+\t  50.000000000000000 },\n+  { 6212028560.1428576, 10, 5, \n+\t  60.000000000000000 },\n+  { 53782171674.604919, 10, 5, \n+\t  70.000000000000000 },\n+  { 309720255837.56775, 10, 5, \n+\t  80.000000000000000 },\n+  { 1359043035731.5713, 10, 5, \n+\t  90.000000000000000 },\n+  { 4900625954398.9434, 10, 5, \n+\t  100.00000000000000 },\n+};\n+const double toler036 = 5.0000000000000039e-13;\n+\n+// Test data for n=10, m=10.\n+// max(|f - f_GSL|): 0.00048828125000000000\n+// max(|f - f_GSL| / |f_GSL|): 1.2999856205575476e-15\n+const testcase_assoc_laguerre<double>\n+data037[11] =\n+{\n+  { 184756.00000000000, 10, 10, \n+\t  0.0000000000000000 },\n+  { -210.84303350970018, 10, 10, \n+\t  10.000000000000000 },\n+  { 508.38095238095184, 10, 10, \n+\t  20.000000000000000 },\n+  { 2098.8571428571431, 10, 10, \n+\t  30.000000000000000 },\n+  { -536338.88536155177, 10, 10, \n+\t  40.000000000000000 },\n+  { 24865988.804232784, 10, 10, \n+\t  50.000000000000000 },\n+  { 1343756013.1428571, 10, 10, \n+\t  60.000000000000000 },\n+  { 17298791247.358025, 10, 10, \n+\t  70.000000000000000 },\n+  { 124528450897.79892, 10, 10, \n+\t  80.000000000000000 },\n+  { 632674413641.71423, 10, 10, \n+\t  90.000000000000000 },\n+  { 2533008935405.0298, 10, 10, \n+\t  100.00000000000000 },\n+};\n+const double toler037 = 2.5000000000000020e-13;\n+\n+// Test data for n=10, m=20.\n+// max(|f - f_GSL|): 1.1444091796875000e-05\n+// max(|f - f_GSL| / |f_GSL|): 1.3165826881543491e-14\n+const testcase_assoc_laguerre<double>\n+data038[11] =\n+{\n+  { 30045014.999999993, 10, 20, \n+\t  0.0000000000000000 },\n+  { -23087.733686067022, 10, 20, \n+\t  10.000000000000000 },\n+  { 207.23985890652330, 10, 20, \n+\t  20.000000000000000 },\n+  { 1407.8571428571508, 10, 20, \n+\t  30.000000000000000 },\n+  { -44618.156966490322, 10, 20, \n+\t  40.000000000000000 },\n+  { 158690.04409171100, 10, 20, \n+\t  50.000000000000000 },\n+  { -6870413.5714285728, 10, 20, \n+\t  60.000000000000000 },\n+  { 793841351.41975331, 10, 20, \n+\t  70.000000000000000 },\n+  { 13358288958.562618, 10, 20, \n+\t  80.000000000000000 },\n+  { 106073722407.85715, 10, 20, \n+\t  90.000000000000000 },\n+  { 566337213392.42493, 10, 20, \n+\t  100.00000000000000 },\n+};\n+const double toler038 = 1.0000000000000008e-12;\n+\n+// Test data for n=10, m=50.\n+// max(|f - f_GSL|): 1.7881393432617188e-07\n+// max(|f - f_GSL| / |f_GSL|): 1.9220038158581863e-14\n+const testcase_assoc_laguerre<double>\n+data039[11] =\n+{\n+  { 75394027566.000000, 10, 50, \n+\t  0.0000000000000000 },\n+  { 8048106183.3721361, 10, 50, \n+\t  10.000000000000000 },\n+  { 328045023.84832460, 10, 50, \n+\t  20.000000000000000 },\n+  { -2568769.7142857178, 10, 50, \n+\t  30.000000000000000 },\n+  { 6971.9964726631533, 10, 50, \n+\t  40.000000000000000 },\n+  { 136111.41446207993, 10, 50, \n+\t  50.000000000000000 },\n+  { -62462.571428570242, 10, 50, \n+\t  60.000000000000000 },\n+  { -248167.95061728527, 10, 50, \n+\t  70.000000000000000 },\n+  { 1941270.4091710770, 10, 50, \n+\t  80.000000000000000 },\n+  { -8643512.5714285765, 10, 50, \n+\t  90.000000000000000 },\n+  { -140863522.18342152, 10, 50, \n+\t  100.00000000000000 },\n+};\n+const double toler039 = 1.0000000000000008e-12;\n+\n+// Test data for n=10, m=100.\n+// max(|f - f_GSL|): 0.0019531250000000000\n+// max(|f - f_GSL| / |f_GSL|): 8.5796208358610616e-15\n+const testcase_assoc_laguerre<double>\n+data040[11] =\n+{\n+  { 46897636623981.000, 10, 100, \n+\t  0.0000000000000000 },\n+  { 16444031323272.084, 10, 100, \n+\t  10.000000000000000 },\n+  { 5020343986463.5391, 10, 100, \n+\t  20.000000000000000 },\n+  { 1270977490645.2859, 10, 100, \n+\t  30.000000000000000 },\n+  { 244835756822.62262, 10, 100, \n+\t  40.000000000000000 },\n+  { 29786827693.962959, 10, 100, \n+\t  50.000000000000000 },\n+  { 1127612095.2857144, 10, 100, \n+\t  60.000000000000000 },\n+  { -66370555.419753075, 10, 100, \n+\t  70.000000000000000 },\n+  { 10420852.957671870, 10, 100, \n+\t  80.000000000000000 },\n+  { -3373097.5714285718, 10, 100, \n+\t  90.000000000000000 },\n+  { 2065423.6807760145, 10, 100, \n+\t  100.00000000000000 },\n+};\n+const double toler040 = 5.0000000000000039e-13;\n+\n+// Test data for n=20, m=0.\n+// max(|f - f_GSL|): 20.000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 4.7350442720305269e-15\n+const testcase_assoc_laguerre<double>\n+data041[11] =\n+{\n+  { 1.0000000000000000, 20, 0, \n+\t  0.0000000000000000 },\n+  { -11.961333867812119, 20, 0, \n+\t  10.000000000000000 },\n+  { 2829.4728613531743, 20, 0, \n+\t  20.000000000000000 },\n+  { -18439.424502520938, 20, 0, \n+\t  30.000000000000000 },\n+  { 24799805.877530713, 20, 0, \n+\t  40.000000000000000 },\n+  { 7551960453.7672548, 20, 0, \n+\t  50.000000000000000 },\n+  { -1379223608444.9155, 20, 0, \n+\t  60.000000000000000 },\n+  { 165423821874449.94, 20, 0, \n+\t  70.000000000000000 },\n+  { 29500368536981676., 20, 0, \n+\t  80.000000000000000 },\n+  { 1.1292309514432901e+18, 20, 0, \n+\t  90.000000000000000 },\n+  { 2.2061882785931735e+19, 20, 0, \n+\t  100.00000000000000 },\n+};\n+const double toler041 = 2.5000000000000020e-13;\n+\n+// Test data for n=20, m=1.\n+// max(|f - f_GSL|): 8192.0000000000000\n+// max(|f - f_GSL| / |f_GSL|): 2.0583579235866667e-15\n+const testcase_assoc_laguerre<double>\n+data042[11] =\n+{\n+  { 21.000000000000000, 20, 1, \n+\t  0.0000000000000000 },\n+  { 19.900488129734079, 20, 1, \n+\t  10.000000000000000 },\n+  { 2208.0318569557585, 20, 1, \n+\t  20.000000000000000 },\n+  { 263690.96303121914, 20, 1, \n+\t  30.000000000000000 },\n+  { 40667285.630564235, 20, 1, \n+\t  40.000000000000000 },\n+  { 1737442572.8115399, 20, 1, \n+\t  50.000000000000000 },\n+  { -588280953643.28125, 20, 1, \n+\t  60.000000000000000 },\n+  { 45617733778241.328, 20, 1, \n+\t  70.000000000000000 },\n+  { 17293487114876864., 20, 1, \n+\t  80.000000000000000 },\n+  { 7.6219135858585062e+17, 20, 1, \n+\t  90.000000000000000 },\n+  { 1.6037288204336759e+19, 20, 1, \n+\t  100.00000000000000 },\n+};\n+const double toler042 = 2.5000000000000020e-13;\n+\n+// Test data for n=20, m=2.\n+// max(|f - f_GSL|): 6144.0000000000000\n+// max(|f - f_GSL| / |f_GSL|): 9.3068805041852228e-15\n+const testcase_assoc_laguerre<double>\n+data043[11] =\n+{\n+  { 231.00000000000003, 20, 2, \n+\t  0.0000000000000000 },\n+  { 47.009338065112921, 20, 2, \n+\t  10.000000000000000 },\n+  { -652.51305461728589, 20, 2, \n+\t  20.000000000000000 },\n+  { 285388.25895069109, 20, 2, \n+\t  30.000000000000000 },\n+  { 28664069.685624730, 20, 2, \n+\t  40.000000000000000 },\n+  { -1399631966.3144732, 20, 2, \n+\t  50.000000000000000 },\n+  { -115357373248.28194, 20, 2, \n+\t  60.000000000000000 },\n+  { -3357730872975.8750, 20, 2, \n+\t  70.000000000000000 },\n+  { 9765808962855122.0, 20, 2, \n+\t  80.000000000000000 },\n+  { 5.0717292945559181e+17, 20, 2, \n+\t  90.000000000000000 },\n+  { 1.1564665701334456e+19, 20, 2, \n+\t  100.00000000000000 },\n+};\n+const double toler043 = 5.0000000000000039e-13;\n+\n+// Test data for n=20, m=5.\n+// max(|f - f_GSL|): 16.000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 3.5731302592472765e-15\n+const testcase_assoc_laguerre<double>\n+data044[11] =\n+{\n+  { 53130.000000000000, 20, 5, \n+\t  0.0000000000000000 },\n+  { -158.69554500944142, 20, 5, \n+\t  10.000000000000000 },\n+  { 334.08012288038952, 20, 5, \n+\t  20.000000000000000 },\n+  { -198372.47662554163, 20, 5, \n+\t  30.000000000000000 },\n+  { -13627144.088579426, 20, 5, \n+\t  40.000000000000000 },\n+  { -780579985.44731510, 20, 5, \n+\t  50.000000000000000 },\n+  { 116648634237.73535, 20, 5, \n+\t  60.000000000000000 },\n+  { -12347348707739.742, 20, 5, \n+\t  70.000000000000000 },\n+  { 1199516248034090.8, 20, 5, \n+\t  80.000000000000000 },\n+  { 1.3451503195078531e+17, 20, 5, \n+\t  90.000000000000000 },\n+  { 4.1058904276111483e+18, 20, 5, \n+\t  100.00000000000000 },\n+};\n+const double toler044 = 2.5000000000000020e-13;\n+\n+// Test data for n=20, m=10.\n+// max(|f - f_GSL|): 64.000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 1.0709209504860220e-15\n+const testcase_assoc_laguerre<double>\n+data045[11] =\n+{\n+  { 30045015.000000000, 20, 10, \n+\t  0.0000000000000000 },\n+  { -1755.6226861258601, 20, 10, \n+\t  10.000000000000000 },\n+  { -9081.6726644737901, 20, 10, \n+\t  20.000000000000000 },\n+  { 95771.650912113109, 20, 10, \n+\t  30.000000000000000 },\n+  { 5089151.9272779236, 20, 10, \n+\t  40.000000000000000 },\n+  { 97400399.450206712, 20, 10, \n+\t  50.000000000000000 },\n+  { -16009352450.477026, 20, 10, \n+\t  60.000000000000000 },\n+  { 842271286905.01050, 20, 10, \n+\t  70.000000000000000 },\n+  { -79901725466796.938, 20, 10, \n+\t  80.000000000000000 },\n+  { 7944103675858637.0, 20, 10, \n+\t  90.000000000000000 },\n+  { 5.7429821893388288e+17, 20, 10, \n+\t  100.00000000000000 },\n+};\n+const double toler045 = 2.5000000000000020e-13;\n+\n+// Test data for n=20, m=20.\n+// max(|f - f_GSL|): 2.1250000000000000\n+// max(|f - f_GSL| / |f_GSL|): 1.1968937782285294e-14\n+const testcase_assoc_laguerre<double>\n+data046[11] =\n+{\n+  { 137846528819.99994, 20, 20, \n+\t  0.0000000000000000 },\n+  { -136976.49571333229, 20, 20, \n+\t  10.000000000000000 },\n+  { 113878.49908041643, 20, 20, \n+\t  20.000000000000000 },\n+  { -342529.21778796182, 20, 20, \n+\t  30.000000000000000 },\n+  { -350112.66981443466, 20, 20, \n+\t  40.000000000000000 },\n+  { -10791735.172977809, 20, 20, \n+\t  50.000000000000000 },\n+  { -1038073940.0811402, 20, 20, \n+\t  60.000000000000000 },\n+  { 667312550.63616335, 20, 20, \n+\t  70.000000000000000 },\n+  { 741537869902.29028, 20, 20, \n+\t  80.000000000000000 },\n+  { -32378376755737.418, 20, 20, \n+\t  90.000000000000000 },\n+  { -601760332167937.62, 20, 20, \n+\t  100.00000000000000 },\n+};\n+const double toler046 = 1.0000000000000008e-12;\n+\n+// Test data for n=20, m=50.\n+// max(|f - f_GSL|): 0.25000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 1.2103144092558234e-14\n+const testcase_assoc_laguerre<double>\n+data047[11] =\n+{\n+  { 1.6188460366265789e+17, 20, 50, \n+\t  0.0000000000000000 },\n+  { 1599011936804291.5, 20, 50, \n+\t  10.000000000000000 },\n+  { -131273880831.42432, 20, 50, \n+\t  20.000000000000000 },\n+  { -3133213093.6903548, 20, 50, \n+\t  30.000000000000000 },\n+  { -213935628.04985175, 20, 50, \n+\t  40.000000000000000 },\n+  { -47375578.495921060, 20, 50, \n+\t  50.000000000000000 },\n+  { -115731015.14034876, 20, 50, \n+\t  60.000000000000000 },\n+  { -737415147.29420292, 20, 50, \n+\t  70.000000000000000 },\n+  { -2123455626.8621769, 20, 50, \n+\t  80.000000000000000 },\n+  { 29801266858.608929, 20, 50, \n+\t  90.000000000000000 },\n+  { -132886631026.82553, 20, 50, \n+\t  100.00000000000000 },\n+};\n+const double toler047 = 1.0000000000000008e-12;\n+\n+// Test data for n=20, m=100.\n+// max(|f - f_GSL|): 1572864.0000000000\n+// max(|f - f_GSL| / |f_GSL|): 3.6621229371267356e-14\n+const testcase_assoc_laguerre<double>\n+data048[11] =\n+{\n+  { 2.9462227291176643e+22, 20, 100, \n+\t  0.0000000000000000 },\n+  { 3.5777890748701244e+21, 20, 100, \n+\t  10.000000000000000 },\n+  { 3.1584925521456759e+20, 20, 100, \n+\t  20.000000000000000 },\n+  { 1.7389599388424864e+19, 20, 100, \n+\t  30.000000000000000 },\n+  { 4.1401342745980634e+17, 20, 100, \n+\t  40.000000000000000 },\n+  { -79359706102062.594, 20, 100, \n+\t  50.000000000000000 },\n+  { 22736203650743.145, 20, 100, \n+\t  60.000000000000000 },\n+  { 65679006380.095703, 20, 100, \n+\t  70.000000000000000 },\n+  { -236263257610.77792, 20, 100, \n+\t  80.000000000000000 },\n+  { -38072644585.303101, 20, 100, \n+\t  90.000000000000000 },\n+  { 68236474365.173973, 20, 100, \n+\t  100.00000000000000 },\n+};\n+const double toler048 = 2.5000000000000015e-12;\n+\n+// Test data for n=50, m=0.\n+// max(|f - f_GSL|): 196608.00000000000\n+// max(|f - f_GSL| / |f_GSL|): 4.2910775919271532e-15\n+const testcase_assoc_laguerre<double>\n+data049[11] =\n+{\n+  { 1.0000000000000000, 50, 0, \n+\t  0.0000000000000000 },\n+  { 17.534183446338233, 50, 0, \n+\t  10.000000000000000 },\n+  { 980.26961889791028, 50, 0, \n+\t  20.000000000000000 },\n+  { 293000.50735962362, 50, 0, \n+\t  30.000000000000000 },\n+  { -14896937.968694873, 50, 0, \n+\t  40.000000000000000 },\n+  { 2513677852.6916871, 50, 0, \n+\t  50.000000000000000 },\n+  { -883876565337.99219, 50, 0, \n+\t  60.000000000000000 },\n+  { -80967880733583.234, 50, 0, \n+\t  70.000000000000000 },\n+  { -8217471769564841.0, 50, 0, \n+\t  80.000000000000000 },\n+  { -2.1140031308048891e+18, 50, 0, \n+\t  90.000000000000000 },\n+  { -3.9710103487094692e+20, 50, 0, \n+\t  100.00000000000000 },\n+};\n+const double toler049 = 2.5000000000000020e-13;\n+\n+// Test data for n=50, m=1.\n+// max(|f - f_GSL|): 311296.00000000000\n+// max(|f - f_GSL| / |f_GSL|): 4.3113718426975911e-14\n+const testcase_assoc_laguerre<double>\n+data050[11] =\n+{\n+  { 51.000000000000021, 50, 1, \n+\t  0.0000000000000000 },\n+  { 1.4214573271639575, 50, 1, \n+\t  10.000000000000000 },\n+  { -2574.8072295127827, 50, 1, \n+\t  20.000000000000000 },\n+  { 35846.479728359205, 50, 1, \n+\t  30.000000000000000 },\n+  { -48263698.768318526, 50, 1, \n+\t  40.000000000000000 },\n+  { 6161525870.2738533, 50, 1, \n+\t  50.000000000000000 },\n+  { -382655486658.47125, 50, 1, \n+\t  60.000000000000000 },\n+  { -109635579833241.72, 50, 1, \n+\t  70.000000000000000 },\n+  { -14623805817283490., 50, 1, \n+\t  80.000000000000000 },\n+  { -2.0666847190878152e+18, 50, 1, \n+\t  90.000000000000000 },\n+  { -1.4385187953997626e+20, 50, 1, \n+\t  100.00000000000000 },\n+};\n+const double toler050 = 2.5000000000000015e-12;\n+\n+// Test data for n=50, m=2.\n+// max(|f - f_GSL|): 139264.00000000000\n+// max(|f - f_GSL| / |f_GSL|): 2.5437687254653283e-15\n+const testcase_assoc_laguerre<double>\n+data051[11] =\n+{\n+  { 1326.0000000000000, 50, 2, \n+\t  0.0000000000000000 },\n+  { -87.860732516444529, 50, 2, \n+\t  10.000000000000000 },\n+  { -5203.2351191780917, 50, 2, \n+\t  20.000000000000000 },\n+  { -461059.50012538867, 50, 2, \n+\t  30.000000000000000 },\n+  { -30476695.327440590, 50, 2, \n+\t  40.000000000000000 },\n+  { 3720804977.9338136, 50, 2, \n+\t  50.000000000000000 },\n+  { 362262002434.51453, 50, 2, \n+\t  60.000000000000000 },\n+  { -52210917867820.227, 50, 2, \n+\t  70.000000000000000 },\n+  { -9567965136901914.0, 50, 2, \n+\t  80.000000000000000 },\n+  { -8.9171277517712883e+17, 50, 2, \n+\t  90.000000000000000 },\n+  { 5.7231129448806982e+19, 50, 2, \n+\t  100.00000000000000 },\n+};\n+const double toler051 = 2.5000000000000020e-13;\n+\n+// Test data for n=50, m=5.\n+// max(|f - f_GSL|): 81920.000000000000\n+// max(|f - f_GSL| / |f_GSL|): 2.6215979818234617e-15\n+const testcase_assoc_laguerre<double>\n+data052[11] =\n+{\n+  { 3478761.0000000000, 50, 5, \n+\t  0.0000000000000000 },\n+  { 1055.8381917651498, 50, 5, \n+\t  10.000000000000000 },\n+  { 15264.646660345055, 50, 5, \n+\t  20.000000000000000 },\n+  { 1229651.8966600848, 50, 5, \n+\t  30.000000000000000 },\n+  { 39270451.823656842, 50, 5, \n+\t  40.000000000000000 },\n+  { -4424062601.1152029, 50, 5, \n+\t  50.000000000000000 },\n+  { -186017434284.19223, 50, 5, \n+\t  60.000000000000000 },\n+  { 50972853949302.609, 50, 5, \n+\t  70.000000000000000 },\n+  { 6530702754012517.0, 50, 5, \n+\t  80.000000000000000 },\n+  { 6.8387592714678029e+17, 50, 5, \n+\t  90.000000000000000 },\n+  { 3.9198742504338391e+19, 50, 5, \n+\t  100.00000000000000 },\n+};\n+const double toler052 = 2.5000000000000020e-13;\n+\n+// Test data for n=50, m=10.\n+// max(|f - f_GSL|): 192.00000000000000\n+// max(|f - f_GSL| / |f_GSL|): 3.6229303412867937e-15\n+const testcase_assoc_laguerre<double>\n+data053[11] =\n+{\n+  { 75394027565.999985, 50, 10, \n+\t  0.0000000000000000 },\n+  { 91833.924098770178, 50, 10, \n+\t  10.000000000000000 },\n+  { 330501.87929778261, 50, 10, \n+\t  20.000000000000000 },\n+  { 3625088.1635972536, 50, 10, \n+\t  30.000000000000000 },\n+  { 213954727.28632012, 50, 10, \n+\t  40.000000000000000 },\n+  { -9381006937.7517681, 50, 10, \n+\t  50.000000000000000 },\n+  { 535333683777.48615, 50, 10, \n+\t  60.000000000000000 },\n+  { 18824406573722.172, 50, 10, \n+\t  70.000000000000000 },\n+  { -533858276780013.12, 50, 10, \n+\t  80.000000000000000 },\n+  { -52995774666704016., 50, 10, \n+\t  90.000000000000000 },\n+  { 6.0504182862448783e+18, 50, 10, \n+\t  100.00000000000000 },\n+};\n+const double toler053 = 2.5000000000000020e-13;\n+\n+// Test data for n=50, m=20.\n+// max(|f - f_GSL|): 512.00000000000000\n+// max(|f - f_GSL| / |f_GSL|): 9.6616871455409171e-14\n+const testcase_assoc_laguerre<double>\n+data054[11] =\n+{\n+  { 1.6188460366265779e+17, 50, 20, \n+\t  0.0000000000000000 },\n+  { -307637087.25169408, 50, 20, \n+\t  10.000000000000000 },\n+  { 12524651.102974586, 50, 20, \n+\t  20.000000000000000 },\n+  { -315460483.86210561, 50, 20, \n+\t  30.000000000000000 },\n+  { -1889683587.3459988, 50, 20, \n+\t  40.000000000000000 },\n+  { 37457044404.200348, 50, 20, \n+\t  50.000000000000000 },\n+  { -843831858224.71802, 50, 20, \n+\t  60.000000000000000 },\n+  { -92231643172.307495, 50, 20, \n+\t  70.000000000000000 },\n+  { 904211757769501.00, 50, 20, \n+\t  80.000000000000000 },\n+  { 46508193600283272., 50, 20, \n+\t  90.000000000000000 },\n+  { 2.3216887928162719e+18, 50, 20, \n+\t  100.00000000000000 },\n+};\n+const double toler054 = 5.0000000000000029e-12;\n+\n+// Test data for n=50, m=50.\n+// max(|f - f_GSL|): 989855744.00000000\n+// max(|f - f_GSL| / |f_GSL|): 1.1139535389485780e-14\n+const testcase_assoc_laguerre<double>\n+data055[11] =\n+{\n+  { 1.0089134454556417e+29, 50, 50, \n+\t  0.0000000000000000 },\n+  { 1.3822795753070493e+23, 50, 50, \n+\t  10.000000000000000 },\n+  { 95817260381628336., 50, 50, \n+\t  20.000000000000000 },\n+  { -910798580856015.38, 50, 50, \n+\t  30.000000000000000 },\n+  { 50513254049166.922, 50, 50, \n+\t  40.000000000000000 },\n+  { 84159703903348.938, 50, 50, \n+\t  50.000000000000000 },\n+  { -138805244691822.72, 50, 50, \n+\t  60.000000000000000 },\n+  { 181046391269246.25, 50, 50, \n+\t  70.000000000000000 },\n+  { 2086884905317107.5, 50, 50, \n+\t  80.000000000000000 },\n+  { -2765620139862428.0, 50, 50, \n+\t  90.000000000000000 },\n+  { -1.3706751678146290e+17, 50, 50, \n+\t  100.00000000000000 },\n+};\n+const double toler055 = 1.0000000000000008e-12;\n+\n+// Test data for n=50, m=100.\n+// max(|f - f_GSL|): 1.8889465931478581e+22\n+// max(|f - f_GSL| / |f_GSL|): 2.2737143709403468e-14\n+const testcase_assoc_laguerre<double>\n+data056[11] =\n+{\n+  { 2.0128660909731929e+40, 50, 100, \n+\t  0.0000000000000000 },\n+  { 9.3675094807695474e+37, 50, 100, \n+\t  10.000000000000000 },\n+  { 1.3009321481877196e+35, 50, 100, \n+\t  20.000000000000000 },\n+  { 7.3720026893233823e+30, 50, 100, \n+\t  30.000000000000000 },\n+  { -6.0824679079634667e+25, 50, 100, \n+\t  40.000000000000000 },\n+  { -6.0053188793543450e+23, 50, 100, \n+\t  50.000000000000000 },\n+  { 1.4178129287264692e+22, 50, 100, \n+\t  60.000000000000000 },\n+  { -5.4652099341566706e+20, 50, 100, \n+\t  70.000000000000000 },\n+  { -1.0817271759263274e+20, 50, 100, \n+\t  80.000000000000000 },\n+  { 3.8058734007924195e+19, 50, 100, \n+\t  90.000000000000000 },\n+  { 4.7439240848028344e+19, 50, 100, \n+\t  100.00000000000000 },\n+};\n+const double toler056 = 2.5000000000000015e-12;\n+\n+// Test data for n=100, m=0.\n+// max(|f - f_GSL|): 98304.000000000000\n+// max(|f - f_GSL| / |f_GSL|): 3.8776197831393928e-15\n+const testcase_assoc_laguerre<double>\n+data057[11] =\n+{\n+  { 1.0000000000000000, 100, 0, \n+\t  0.0000000000000000 },\n+  { 13.277662844303450, 100, 0, \n+\t  10.000000000000000 },\n+  { 1854.0367283243388, 100, 0, \n+\t  20.000000000000000 },\n+  { 170141.86987046551, 100, 0, \n+\t  30.000000000000000 },\n+  { -7272442.3156006960, 100, 0, \n+\t  40.000000000000000 },\n+  { 4847420871.2690506, 100, 0, \n+\t  50.000000000000000 },\n+  { 693492765740.29688, 100, 0, \n+\t  60.000000000000000 },\n+  { 17125518672239.770, 100, 0, \n+\t  70.000000000000000 },\n+  { -13763178176383768., 100, 0, \n+\t  80.000000000000000 },\n+  { 2.1307220490380173e+18, 100, 0, \n+\t  90.000000000000000 },\n+  { -2.6292260693068916e+20, 100, 0, \n+\t  100.00000000000000 },\n+};\n+const double toler057 = 2.5000000000000020e-13;\n+\n+// Test data for n=100, m=1.\n+// max(|f - f_GSL|): 245760.00000000000\n+// max(|f - f_GSL| / |f_GSL|): 1.4500034612453474e-14\n+const testcase_assoc_laguerre<double>\n+data058[11] =\n+{\n+  { 101.00000000000003, 100, 1, \n+\t  0.0000000000000000 },\n+  { -14.650661983680420, 100, 1, \n+\t  10.000000000000000 },\n+  { 1626.5010939361582, 100, 1, \n+\t  20.000000000000000 },\n+  { 417884.77658268728, 100, 1, \n+\t  30.000000000000000 },\n+  { -55617646.951649837, 100, 1, \n+\t  40.000000000000000 },\n+  { 884829874.26626217, 100, 1, \n+\t  50.000000000000000 },\n+  { 154466082750.32202, 100, 1, \n+\t  60.000000000000000 },\n+  { -101423973484646.00, 100, 1, \n+\t  70.000000000000000 },\n+  { -1388352348671756.8, 100, 1, \n+\t  80.000000000000000 },\n+  { 7.8048705513268582e+17, 100, 1, \n+\t  90.000000000000000 },\n+  { 1.6948925059042755e+19, 100, 1, \n+\t  100.00000000000000 },\n+};\n+const double toler058 = 1.0000000000000008e-12;\n+\n+// Test data for n=100, m=2.\n+// max(|f - f_GSL|): 557056.00000000000\n+// max(|f - f_GSL| / |f_GSL|): 5.1603746667135714e-15\n+const testcase_assoc_laguerre<double>\n+data059[11] =\n+{\n+  { 5151.0000000000055, 100, 2, \n+\t  0.0000000000000000 },\n+  { -150.22012290951324, 100, 2, \n+\t  10.000000000000000 },\n+  { -7655.0593294049449, 100, 2, \n+\t  20.000000000000000 },\n+  { -140996.69276179091, 100, 2, \n+\t  30.000000000000000 },\n+  { -38645171.278549351, 100, 2, \n+\t  40.000000000000000 },\n+  { -8889263688.2118931, 100, 2, \n+\t  50.000000000000000 },\n+  { -1010338971533.3400, 100, 2, \n+\t  60.000000000000000 },\n+  { -127582564332943.91, 100, 2, \n+\t  70.000000000000000 },\n+  { 15970305694654312., 100, 2, \n+\t  80.000000000000000 },\n+  { -1.6019844992862820e+18, 100, 2, \n+\t  90.000000000000000 },\n+  { 2.8267024730962955e+20, 100, 2, \n+\t  100.00000000000000 },\n+};\n+const double toler059 = 5.0000000000000039e-13;\n+\n+// Test data for n=100, m=5.\n+// max(|f - f_GSL|): 393216.00000000000\n+// max(|f - f_GSL| / |f_GSL|): 8.0946565190235238e-15\n+const testcase_assoc_laguerre<double>\n+data060[11] =\n+{\n+  { 96560646.000000030, 100, 5, \n+\t  0.0000000000000000 },\n+  { 2430.6732236677612, 100, 5, \n+\t  10.000000000000000 },\n+  { 111162.32026994647, 100, 5, \n+\t  20.000000000000000 },\n+  { 4036708.2599413628, 100, 5, \n+\t  30.000000000000000 },\n+  { -34055982.664405443, 100, 5, \n+\t  40.000000000000000 },\n+  { 30110688343.562328, 100, 5, \n+\t  50.000000000000000 },\n+  { 2651429940558.2974, 100, 5, \n+\t  60.000000000000000 },\n+  { 192108556058943.09, 100, 5, \n+\t  70.000000000000000 },\n+  { -25410533973455528., 100, 5, \n+\t  80.000000000000000 },\n+  { 2.1072955633564431e+18, 100, 5, \n+\t  90.000000000000000 },\n+  { -2.9434005355877289e+20, 100, 5, \n+\t  100.00000000000000 },\n+};\n+const double toler060 = 5.0000000000000039e-13;\n+\n+// Test data for n=100, m=10.\n+// max(|f - f_GSL|): 155648.00000000000\n+// max(|f - f_GSL| / |f_GSL|): 5.1685581852917721e-15\n+const testcase_assoc_laguerre<double>\n+data061[11] =\n+{\n+  { 46897636623981.039, 100, 10, \n+\t  0.0000000000000000 },\n+  { 529208.11550990329, 100, 10, \n+\t  10.000000000000000 },\n+  { 7402892.1748803817, 100, 10, \n+\t  20.000000000000000 },\n+  { 88369632.083243579, 100, 10, \n+\t  30.000000000000000 },\n+  { 822187797.59096563, 100, 10, \n+\t  40.000000000000000 },\n+  { 180231446033.06866, 100, 10, \n+\t  50.000000000000000 },\n+  { 7922942703798.1309, 100, 10, \n+\t  60.000000000000000 },\n+  { 784424250559042.12, 100, 10, \n+\t  70.000000000000000 },\n+  { -16325634720239370., 100, 10, \n+\t  80.000000000000000 },\n+  { -1.0879588307443162e+18, 100, 10, \n+\t  90.000000000000000 },\n+  { 3.0114394463610642e+19, 100, 10, \n+\t  100.00000000000000 },\n+};\n+const double toler061 = 5.0000000000000039e-13;\n+\n+// Test data for n=100, m=20.\n+// max(|f - f_GSL|): 524288.00000000000\n+// max(|f - f_GSL| / |f_GSL|): 3.7005989410347388e-14\n+const testcase_assoc_laguerre<double>\n+data062[11] =\n+{\n+  { 2.9462227291176614e+22, 100, 20, \n+\t  0.0000000000000000 },\n+  { 313694958939.90405, 100, 20, \n+\t  10.000000000000000 },\n+  { 45396489338.096191, 100, 20, \n+\t  20.000000000000000 },\n+  { -7215826758.0081253, 100, 20, \n+\t  30.000000000000000 },\n+  { 825949194005.88855, 100, 20, \n+\t  40.000000000000000 },\n+  { -2764742119971.0811, 100, 20, \n+\t  50.000000000000000 },\n+  { -219802198273516.03, 100, 20, \n+\t  60.000000000000000 },\n+  { -1699053306145262.0, 100, 20, \n+\t  70.000000000000000 },\n+  { 3.5495709345023846e+17, 100, 20, \n+\t  80.000000000000000 },\n+  { -9.6128675110292419e+18, 100, 20, \n+\t  90.000000000000000 },\n+  { 4.3619868422072212e+20, 100, 20, \n+\t  100.00000000000000 },\n+};\n+const double toler062 = 2.5000000000000015e-12;\n+\n+// Test data for n=100, m=50.\n+// max(|f - f_GSL|): 316659348799488.00\n+// max(|f - f_GSL| / |f_GSL|): 1.1554040570270351e-14\n+const testcase_assoc_laguerre<double>\n+data063[11] =\n+{\n+  { 2.0128660909731931e+40, 100, 50, \n+\t  0.0000000000000000 },\n+  { -4.0151443913473373e+28, 100, 50, \n+\t  10.000000000000000 },\n+  { 3.2199632594551924e+22, 100, 50, \n+\t  20.000000000000000 },\n+  { -2.7568702092659756e+20, 100, 50, \n+\t  30.000000000000000 },\n+  { 7.5553066015421563e+19, 100, 50, \n+\t  40.000000000000000 },\n+  { -2.7651625252387734e+19, 100, 50, \n+\t  50.000000000000000 },\n+  { -5.8963680147283804e+19, 100, 50, \n+\t  60.000000000000000 },\n+  { -1.8082798163033106e+20, 100, 50, \n+\t  70.000000000000000 },\n+  { -3.9044276986817249e+20, 100, 50, \n+\t  80.000000000000000 },\n+  { 6.9926310700401904e+21, 100, 50, \n+\t  90.000000000000000 },\n+  { -5.5727272809923646e+22, 100, 50, \n+\t  100.00000000000000 },\n+};\n+const double toler063 = 1.0000000000000008e-12;\n+\n+// Test data for n=100, m=100.\n+// max(|f - f_GSL|): 2.3819765684465692e+39\n+// max(|f - f_GSL| / |f_GSL|): 1.9897039067343855e-14\n+const testcase_assoc_laguerre<double>\n+data064[11] =\n+{\n+  { 9.0548514656103225e+58, 100, 100, \n+\t  0.0000000000000000 },\n+  { 1.3334078033060556e+54, 100, 100, \n+\t  10.000000000000000 },\n+  { 2.1002639254211340e+46, 100, 100, \n+\t  20.000000000000000 },\n+  { -1.1073158068796292e+39, 100, 100, \n+\t  30.000000000000000 },\n+  { -8.3640937363981346e+35, 100, 100, \n+\t  40.000000000000000 },\n+  { -6.5879339429312686e+32, 100, 100, \n+\t  50.000000000000000 },\n+  { -2.4190645077698771e+30, 100, 100, \n+\t  60.000000000000000 },\n+  { -7.9224960465662171e+29, 100, 100, \n+\t  70.000000000000000 },\n+  { -2.8605772478408694e+29, 100, 100, \n+\t  80.000000000000000 },\n+  { 2.4149589189609957e+28, 100, 100, \n+\t  90.000000000000000 },\n+  { 5.1146476014859021e+28, 100, 100, \n+\t  100.00000000000000 },\n+};\n+const double toler064 = 1.0000000000000008e-12;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_assoc_laguerre<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+  \t {\n+\tconst Tp f = std::assoc_laguerre(data[i].n, data[i].m,\n+\t\t     data[i].x);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  test(data009, toler009);\n+  test(data010, toler010);\n+  test(data011, toler011);\n+  test(data012, toler012);\n+  test(data013, toler013);\n+  test(data014, toler014);\n+  test(data015, toler015);\n+  test(data016, toler016);\n+  test(data017, toler017);\n+  test(data018, toler018);\n+  test(data019, toler019);\n+  test(data020, toler020);\n+  test(data021, toler021);\n+  test(data022, toler022);\n+  test(data023, toler023);\n+  test(data024, toler024);\n+  test(data025, toler025);\n+  test(data026, toler026);\n+  test(data027, toler027);\n+  test(data028, toler028);\n+  test(data029, toler029);\n+  test(data030, toler030);\n+  test(data031, toler031);\n+  test(data032, toler032);\n+  test(data033, toler033);\n+  test(data034, toler034);\n+  test(data035, toler035);\n+  test(data036, toler036);\n+  test(data037, toler037);\n+  test(data038, toler038);\n+  test(data039, toler039);\n+  test(data040, toler040);\n+  test(data041, toler041);\n+  test(data042, toler042);\n+  test(data043, toler043);\n+  test(data044, toler044);\n+  test(data045, toler045);\n+  test(data046, toler046);\n+  test(data047, toler047);\n+  test(data048, toler048);\n+  test(data049, toler049);\n+  test(data050, toler050);\n+  test(data051, toler051);\n+  test(data052, toler052);\n+  test(data053, toler053);\n+  test(data054, toler054);\n+  test(data055, toler055);\n+  test(data056, toler056);\n+  test(data057, toler057);\n+  test(data058, toler058);\n+  test(data059, toler059);\n+  test(data060, toler060);\n+  test(data061, toler061);\n+  test(data062, toler062);\n+  test(data063, toler063);\n+  test(data064, toler064);\n+  return 0;\n+}"}, {"sha": "2214c62fd092a2946b58dc0b2bf4ca3dd187ef28", "filename": "libstdc++-v3/testsuite/special_functions/01_assoc_laguerre/compile.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.1 assoc_laguerre\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+  unsigned int n = 2, m = 1;\n+\n+  std::assoc_laguerre(n, m, xf);\n+  std::assoc_laguerref(n, m, xf);\n+  std::assoc_laguerre(n, m, xd);\n+  std::assoc_laguerre(n, m, xl);\n+  std::assoc_laguerrel(n, m, xl);\n+\n+  return;\n+}"}, {"sha": "b76090895ece9e4981c49750a8c7c9cbbe26b3a9", "filename": "libstdc++-v3/testsuite/special_functions/01_assoc_laguerre/compile_2.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.1 assoc_laguerre\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+  unsigned int n = 2, m = 1;\n+\n+  assoc_laguerre(n, m, xf);\n+  assoc_laguerref(n, m, xf);\n+  assoc_laguerre(n, m, xd);\n+  assoc_laguerre(n, m, xl);\n+  assoc_laguerrel(n, m, xl);\n+\n+  return;\n+}\n+"}, {"sha": "63a8de3c49def2cceb121b8ccd28b12b16f60de3", "filename": "libstdc++-v3/testsuite/special_functions/02_assoc_legendre/check_nan.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,58 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.2 assoc_legendre\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  unsigned int l = 2, m = 1;\n+\n+  float a = std::assoc_legendre(l, m, xf);\n+  float b = std::assoc_legendref(l, m, xf);\n+  double c = std::assoc_legendre(l, m, xd);\n+  long double d = std::assoc_legendre(l, m, xl);\n+  long double e = std::assoc_legendrel(l, m, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "a51420726b149ddda294ea09e720a1c7d7baf8a2", "filename": "libstdc++-v3/testsuite/special_functions/02_assoc_legendre/check_value.cc", "status": "added", "additions": 1944, "deletions": 0, "changes": 1944, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,1944 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  assoc_legendre\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+\n+// Test data for l=0, m=0.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data001[21] =\n+{\n+  { 1.0000000000000000, 0, 0, \n+\t  -1.0000000000000000 },\n+  { 1.0000000000000000, 0, 0, \n+\t  -0.90000000000000002 },\n+  { 1.0000000000000000, 0, 0, \n+\t  -0.80000000000000004 },\n+  { 1.0000000000000000, 0, 0, \n+\t  -0.69999999999999996 },\n+  { 1.0000000000000000, 0, 0, \n+\t  -0.59999999999999998 },\n+  { 1.0000000000000000, 0, 0, \n+\t  -0.50000000000000000 },\n+  { 1.0000000000000000, 0, 0, \n+\t  -0.40000000000000002 },\n+  { 1.0000000000000000, 0, 0, \n+\t  -0.30000000000000004 },\n+  { 1.0000000000000000, 0, 0, \n+\t  -0.19999999999999996 },\n+  { 1.0000000000000000, 0, 0, \n+\t  -0.099999999999999978 },\n+  { 1.0000000000000000, 0, 0, \n+\t  0.0000000000000000 },\n+  { 1.0000000000000000, 0, 0, \n+\t  0.10000000000000009 },\n+  { 1.0000000000000000, 0, 0, \n+\t  0.19999999999999996 },\n+  { 1.0000000000000000, 0, 0, \n+\t  0.30000000000000004 },\n+  { 1.0000000000000000, 0, 0, \n+\t  0.39999999999999991 },\n+  { 1.0000000000000000, 0, 0, \n+\t  0.50000000000000000 },\n+  { 1.0000000000000000, 0, 0, \n+\t  0.60000000000000009 },\n+  { 1.0000000000000000, 0, 0, \n+\t  0.69999999999999996 },\n+  { 1.0000000000000000, 0, 0, \n+\t  0.80000000000000004 },\n+  { 1.0000000000000000, 0, 0, \n+\t  0.89999999999999991 },\n+  { 1.0000000000000000, 0, 0, \n+\t  1.0000000000000000 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+\n+// Test data for l=1, m=0.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data002[21] =\n+{\n+  { -1.0000000000000000, 1, 0, \n+\t  -1.0000000000000000 },\n+  { -0.90000000000000002, 1, 0, \n+\t  -0.90000000000000002 },\n+  { -0.80000000000000004, 1, 0, \n+\t  -0.80000000000000004 },\n+  { -0.69999999999999996, 1, 0, \n+\t  -0.69999999999999996 },\n+  { -0.59999999999999998, 1, 0, \n+\t  -0.59999999999999998 },\n+  { -0.50000000000000000, 1, 0, \n+\t  -0.50000000000000000 },\n+  { -0.40000000000000002, 1, 0, \n+\t  -0.40000000000000002 },\n+  { -0.30000000000000004, 1, 0, \n+\t  -0.30000000000000004 },\n+  { -0.19999999999999996, 1, 0, \n+\t  -0.19999999999999996 },\n+  { -0.099999999999999978, 1, 0, \n+\t  -0.099999999999999978 },\n+  { 0.0000000000000000, 1, 0, \n+\t  0.0000000000000000 },\n+  { 0.10000000000000009, 1, 0, \n+\t  0.10000000000000009 },\n+  { 0.19999999999999996, 1, 0, \n+\t  0.19999999999999996 },\n+  { 0.30000000000000004, 1, 0, \n+\t  0.30000000000000004 },\n+  { 0.39999999999999991, 1, 0, \n+\t  0.39999999999999991 },\n+  { 0.50000000000000000, 1, 0, \n+\t  0.50000000000000000 },\n+  { 0.60000000000000009, 1, 0, \n+\t  0.60000000000000009 },\n+  { 0.69999999999999996, 1, 0, \n+\t  0.69999999999999996 },\n+  { 0.80000000000000004, 1, 0, \n+\t  0.80000000000000004 },\n+  { 0.89999999999999991, 1, 0, \n+\t  0.89999999999999991 },\n+  { 1.0000000000000000, 1, 0, \n+\t  1.0000000000000000 },\n+};\n+const double toler002 = 2.5000000000000020e-13;\n+\n+// Test data for l=1, m=1.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data003[21] =\n+{\n+  { -0.0000000000000000, 1, 1, \n+\t  -1.0000000000000000 },\n+  { -0.43588989435406728, 1, 1, \n+\t  -0.90000000000000002 },\n+  { -0.59999999999999987, 1, 1, \n+\t  -0.80000000000000004 },\n+  { -0.71414284285428509, 1, 1, \n+\t  -0.69999999999999996 },\n+  { -0.80000000000000004, 1, 1, \n+\t  -0.59999999999999998 },\n+  { -0.86602540378443860, 1, 1, \n+\t  -0.50000000000000000 },\n+  { -0.91651513899116799, 1, 1, \n+\t  -0.40000000000000002 },\n+  { -0.95393920141694577, 1, 1, \n+\t  -0.30000000000000004 },\n+  { -0.97979589711327120, 1, 1, \n+\t  -0.19999999999999996 },\n+  { -0.99498743710661997, 1, 1, \n+\t  -0.099999999999999978 },\n+  { -1.0000000000000000, 1, 1, \n+\t  0.0000000000000000 },\n+  { -0.99498743710661997, 1, 1, \n+\t  0.10000000000000009 },\n+  { -0.97979589711327120, 1, 1, \n+\t  0.19999999999999996 },\n+  { -0.95393920141694577, 1, 1, \n+\t  0.30000000000000004 },\n+  { -0.91651513899116799, 1, 1, \n+\t  0.39999999999999991 },\n+  { -0.86602540378443860, 1, 1, \n+\t  0.50000000000000000 },\n+  { -0.79999999999999993, 1, 1, \n+\t  0.60000000000000009 },\n+  { -0.71414284285428509, 1, 1, \n+\t  0.69999999999999996 },\n+  { -0.59999999999999987, 1, 1, \n+\t  0.80000000000000004 },\n+  { -0.43588989435406750, 1, 1, \n+\t  0.89999999999999991 },\n+  { -0.0000000000000000, 1, 1, \n+\t  1.0000000000000000 },\n+};\n+const double toler003 = 2.5000000000000020e-13;\n+\n+// Test data for l=2, m=0.\n+// max(|f - f_GSL|): 1.1102230246251565e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.3877787807814482e-15\n+const testcase_assoc_legendre<double>\n+data004[21] =\n+{\n+  { 1.0000000000000000, 2, 0, \n+\t  -1.0000000000000000 },\n+  { 0.71500000000000008, 2, 0, \n+\t  -0.90000000000000002 },\n+  { 0.46000000000000019, 2, 0, \n+\t  -0.80000000000000004 },\n+  { 0.23499999999999988, 2, 0, \n+\t  -0.69999999999999996 },\n+  { 0.039999999999999925, 2, 0, \n+\t  -0.59999999999999998 },\n+  { -0.12500000000000000, 2, 0, \n+\t  -0.50000000000000000 },\n+  { -0.25999999999999995, 2, 0, \n+\t  -0.40000000000000002 },\n+  { -0.36499999999999999, 2, 0, \n+\t  -0.30000000000000004 },\n+  { -0.44000000000000006, 2, 0, \n+\t  -0.19999999999999996 },\n+  { -0.48499999999999999, 2, 0, \n+\t  -0.099999999999999978 },\n+  { -0.50000000000000000, 2, 0, \n+\t  0.0000000000000000 },\n+  { -0.48499999999999999, 2, 0, \n+\t  0.10000000000000009 },\n+  { -0.44000000000000006, 2, 0, \n+\t  0.19999999999999996 },\n+  { -0.36499999999999999, 2, 0, \n+\t  0.30000000000000004 },\n+  { -0.26000000000000012, 2, 0, \n+\t  0.39999999999999991 },\n+  { -0.12500000000000000, 2, 0, \n+\t  0.50000000000000000 },\n+  { 0.040000000000000147, 2, 0, \n+\t  0.60000000000000009 },\n+  { 0.23499999999999988, 2, 0, \n+\t  0.69999999999999996 },\n+  { 0.46000000000000019, 2, 0, \n+\t  0.80000000000000004 },\n+  { 0.71499999999999986, 2, 0, \n+\t  0.89999999999999991 },\n+  { 1.0000000000000000, 2, 0, \n+\t  1.0000000000000000 },\n+};\n+const double toler004 = 2.5000000000000020e-13;\n+\n+// Test data for l=2, m=1.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data005[21] =\n+{\n+  { 0.0000000000000000, 2, 1, \n+\t  -1.0000000000000000 },\n+  { 1.1769027147559816, 2, 1, \n+\t  -0.90000000000000002 },\n+  { 1.4399999999999999, 2, 1, \n+\t  -0.80000000000000004 },\n+  { 1.4996999699939983, 2, 1, \n+\t  -0.69999999999999996 },\n+  { 1.4399999999999999, 2, 1, \n+\t  -0.59999999999999998 },\n+  { 1.2990381056766580, 2, 1, \n+\t  -0.50000000000000000 },\n+  { 1.0998181667894018, 2, 1, \n+\t  -0.40000000000000002 },\n+  { 0.85854528127525132, 2, 1, \n+\t  -0.30000000000000004 },\n+  { 0.58787753826796263, 2, 1, \n+\t  -0.19999999999999996 },\n+  { 0.29849623113198592, 2, 1, \n+\t  -0.099999999999999978 },\n+  { -0.0000000000000000, 2, 1, \n+\t  0.0000000000000000 },\n+  { -0.29849623113198626, 2, 1, \n+\t  0.10000000000000009 },\n+  { -0.58787753826796263, 2, 1, \n+\t  0.19999999999999996 },\n+  { -0.85854528127525132, 2, 1, \n+\t  0.30000000000000004 },\n+  { -1.0998181667894014, 2, 1, \n+\t  0.39999999999999991 },\n+  { -1.2990381056766580, 2, 1, \n+\t  0.50000000000000000 },\n+  { -1.4400000000000002, 2, 1, \n+\t  0.60000000000000009 },\n+  { -1.4996999699939983, 2, 1, \n+\t  0.69999999999999996 },\n+  { -1.4399999999999999, 2, 1, \n+\t  0.80000000000000004 },\n+  { -1.1769027147559821, 2, 1, \n+\t  0.89999999999999991 },\n+  { -0.0000000000000000, 2, 1, \n+\t  1.0000000000000000 },\n+};\n+const double toler005 = 2.5000000000000020e-13;\n+\n+// Test data for l=2, m=2.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data006[21] =\n+{\n+  { 0.0000000000000000, 2, 2, \n+\t  -1.0000000000000000 },\n+  { 0.56999999999999984, 2, 2, \n+\t  -0.90000000000000002 },\n+  { 1.0799999999999996, 2, 2, \n+\t  -0.80000000000000004 },\n+  { 1.5300000000000005, 2, 2, \n+\t  -0.69999999999999996 },\n+  { 1.9200000000000004, 2, 2, \n+\t  -0.59999999999999998 },\n+  { 2.2500000000000000, 2, 2, \n+\t  -0.50000000000000000 },\n+  { 2.5200000000000000, 2, 2, \n+\t  -0.40000000000000002 },\n+  { 2.7300000000000004, 2, 2, \n+\t  -0.30000000000000004 },\n+  { 2.8799999999999999, 2, 2, \n+\t  -0.19999999999999996 },\n+  { 2.9700000000000002, 2, 2, \n+\t  -0.099999999999999978 },\n+  { 3.0000000000000000, 2, 2, \n+\t  0.0000000000000000 },\n+  { 2.9700000000000002, 2, 2, \n+\t  0.10000000000000009 },\n+  { 2.8799999999999999, 2, 2, \n+\t  0.19999999999999996 },\n+  { 2.7300000000000004, 2, 2, \n+\t  0.30000000000000004 },\n+  { 2.5200000000000000, 2, 2, \n+\t  0.39999999999999991 },\n+  { 2.2500000000000000, 2, 2, \n+\t  0.50000000000000000 },\n+  { 1.9199999999999997, 2, 2, \n+\t  0.60000000000000009 },\n+  { 1.5300000000000005, 2, 2, \n+\t  0.69999999999999996 },\n+  { 1.0799999999999996, 2, 2, \n+\t  0.80000000000000004 },\n+  { 0.57000000000000040, 2, 2, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 2, 2, \n+\t  1.0000000000000000 },\n+};\n+const double toler006 = 2.5000000000000020e-13;\n+\n+// Test data for l=5, m=0.\n+// max(|f - f_GSL|): 2.0122792321330962e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.8911475274404243e-15\n+const testcase_assoc_legendre<double>\n+data007[21] =\n+{\n+  { -1.0000000000000000, 5, 0, \n+\t  -1.0000000000000000 },\n+  { 0.041141250000000087, 5, 0, \n+\t  -0.90000000000000002 },\n+  { 0.39951999999999993, 5, 0, \n+\t  -0.80000000000000004 },\n+  { 0.36519874999999991, 5, 0, \n+\t  -0.69999999999999996 },\n+  { 0.15263999999999994, 5, 0, \n+\t  -0.59999999999999998 },\n+  { -0.089843750000000000, 5, 0, \n+\t  -0.50000000000000000 },\n+  { -0.27063999999999994, 5, 0, \n+\t  -0.40000000000000002 },\n+  { -0.34538625000000001, 5, 0, \n+\t  -0.30000000000000004 },\n+  { -0.30751999999999996, 5, 0, \n+\t  -0.19999999999999996 },\n+  { -0.17882874999999995, 5, 0, \n+\t  -0.099999999999999978 },\n+  { 0.0000000000000000, 5, 0, \n+\t  0.0000000000000000 },\n+  { 0.17882875000000015, 5, 0, \n+\t  0.10000000000000009 },\n+  { 0.30751999999999996, 5, 0, \n+\t  0.19999999999999996 },\n+  { 0.34538625000000001, 5, 0, \n+\t  0.30000000000000004 },\n+  { 0.27064000000000010, 5, 0, \n+\t  0.39999999999999991 },\n+  { 0.089843750000000000, 5, 0, \n+\t  0.50000000000000000 },\n+  { -0.15264000000000016, 5, 0, \n+\t  0.60000000000000009 },\n+  { -0.36519874999999991, 5, 0, \n+\t  0.69999999999999996 },\n+  { -0.39951999999999993, 5, 0, \n+\t  0.80000000000000004 },\n+  { -0.041141250000000261, 5, 0, \n+\t  0.89999999999999991 },\n+  { 1.0000000000000000, 5, 0, \n+\t  1.0000000000000000 },\n+};\n+const double toler007 = 2.5000000000000020e-13;\n+\n+// Test data for l=5, m=1.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data008[21] =\n+{\n+  { 0.0000000000000000, 5, 1, \n+\t  -1.0000000000000000 },\n+  { -2.8099369608350981, 5, 1, \n+\t  -0.90000000000000002 },\n+  { -0.72180000000000089, 5, 1, \n+\t  -0.80000000000000004 },\n+  { 1.0951826834447254, 5, 1, \n+\t  -0.69999999999999996 },\n+  { 1.9775999999999998, 5, 1, \n+\t  -0.59999999999999998 },\n+  { 1.9282596881137892, 5, 1, \n+\t  -0.50000000000000000 },\n+  { 1.2070504380513685, 5, 1, \n+\t  -0.40000000000000002 },\n+  { 0.16079837663884422, 5, 1, \n+\t  -0.30000000000000004 },\n+  { -0.87005875663658538, 5, 1, \n+\t  -0.19999999999999996 },\n+  { -1.6083350053680323, 5, 1, \n+\t  -0.099999999999999978 },\n+  { -1.8750000000000000, 5, 1, \n+\t  0.0000000000000000 },\n+  { -1.6083350053680314, 5, 1, \n+\t  0.10000000000000009 },\n+  { -0.87005875663658538, 5, 1, \n+\t  0.19999999999999996 },\n+  { 0.16079837663884422, 5, 1, \n+\t  0.30000000000000004 },\n+  { 1.2070504380513671, 5, 1, \n+\t  0.39999999999999991 },\n+  { 1.9282596881137892, 5, 1, \n+\t  0.50000000000000000 },\n+  { 1.9775999999999998, 5, 1, \n+\t  0.60000000000000009 },\n+  { 1.0951826834447254, 5, 1, \n+\t  0.69999999999999996 },\n+  { -0.72180000000000089, 5, 1, \n+\t  0.80000000000000004 },\n+  { -2.8099369608350973, 5, 1, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 5, 1, \n+\t  1.0000000000000000 },\n+};\n+const double toler008 = 2.5000000000000020e-13;\n+\n+// Test data for l=5, m=2.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data009[21] =\n+{\n+  { 0.0000000000000000, 5, 2, \n+\t  -1.0000000000000000 },\n+  { -12.837825000000000, 5, 2, \n+\t  -0.90000000000000002 },\n+  { -13.910400000000001, 5, 2, \n+\t  -0.80000000000000004 },\n+  { -8.8089749999999967, 5, 2, \n+\t  -0.69999999999999996 },\n+  { -1.6128000000000000, 5, 2, \n+\t  -0.59999999999999998 },\n+  { 4.9218750000000000, 5, 2, \n+\t  -0.50000000000000000 },\n+  { 9.1728000000000005, 5, 2, \n+\t  -0.40000000000000002 },\n+  { 10.462725000000001, 5, 2, \n+\t  -0.30000000000000004 },\n+  { 8.8703999999999983, 5, 2, \n+\t  -0.19999999999999996 },\n+  { 5.0415749999999990, 5, 2, \n+\t  -0.099999999999999978 },\n+  { -0.0000000000000000, 5, 2, \n+\t  0.0000000000000000 },\n+  { -5.0415750000000044, 5, 2, \n+\t  0.10000000000000009 },\n+  { -8.8703999999999983, 5, 2, \n+\t  0.19999999999999996 },\n+  { -10.462725000000001, 5, 2, \n+\t  0.30000000000000004 },\n+  { -9.1728000000000005, 5, 2, \n+\t  0.39999999999999991 },\n+  { -4.9218750000000000, 5, 2, \n+\t  0.50000000000000000 },\n+  { 1.6128000000000047, 5, 2, \n+\t  0.60000000000000009 },\n+  { 8.8089749999999967, 5, 2, \n+\t  0.69999999999999996 },\n+  { 13.910400000000001, 5, 2, \n+\t  0.80000000000000004 },\n+  { 12.837825000000004, 5, 2, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 5, 2, \n+\t  1.0000000000000000 },\n+};\n+const double toler009 = 2.5000000000000020e-13;\n+\n+// Test data for l=5, m=5.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data010[21] =\n+{\n+  { -0.0000000000000000, 5, 5, \n+\t  -1.0000000000000000 },\n+  { -14.870165800941818, 5, 5, \n+\t  -0.90000000000000002 },\n+  { -73.483199999999925, 5, 5, \n+\t  -0.80000000000000004 },\n+  { -175.53238298794764, 5, 5, \n+\t  -0.69999999999999996 },\n+  { -309.65760000000006, 5, 5, \n+\t  -0.59999999999999998 },\n+  { -460.34662869916559, 5, 5, \n+\t  -0.50000000000000000 },\n+  { -611.12496255819883, 5, 5, \n+\t  -0.40000000000000002 },\n+  { -746.50941479523760, 5, 5, \n+\t  -0.30000000000000004 },\n+  { -853.31600434671316, 5, 5, \n+\t  -0.19999999999999996 },\n+  { -921.55189181724734, 5, 5, \n+\t  -0.099999999999999978 },\n+  { -945.00000000000000, 5, 5, \n+\t  0.0000000000000000 },\n+  { -921.55189181724734, 5, 5, \n+\t  0.10000000000000009 },\n+  { -853.31600434671316, 5, 5, \n+\t  0.19999999999999996 },\n+  { -746.50941479523760, 5, 5, \n+\t  0.30000000000000004 },\n+  { -611.12496255819883, 5, 5, \n+\t  0.39999999999999991 },\n+  { -460.34662869916559, 5, 5, \n+\t  0.50000000000000000 },\n+  { -309.65759999999989, 5, 5, \n+\t  0.60000000000000009 },\n+  { -175.53238298794764, 5, 5, \n+\t  0.69999999999999996 },\n+  { -73.483199999999925, 5, 5, \n+\t  0.80000000000000004 },\n+  { -14.870165800941855, 5, 5, \n+\t  0.89999999999999991 },\n+  { -0.0000000000000000, 5, 5, \n+\t  1.0000000000000000 },\n+};\n+const double toler010 = 2.5000000000000020e-13;\n+\n+// Test data for l=10, m=0.\n+// max(|f - f_GSL|): 2.7755575615628914e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.0547610802636413e-15\n+const testcase_assoc_legendre<double>\n+data011[21] =\n+{\n+  { 1.0000000000000000, 10, 0, \n+\t  -1.0000000000000000 },\n+  { -0.26314561785585960, 10, 0, \n+\t  -0.90000000000000002 },\n+  { 0.30052979560000004, 10, 0, \n+\t  -0.80000000000000004 },\n+  { 0.085805795531640333, 10, 0, \n+\t  -0.69999999999999996 },\n+  { -0.24366274560000001, 10, 0, \n+\t  -0.59999999999999998 },\n+  { -0.18822860717773438, 10, 0, \n+\t  -0.50000000000000000 },\n+  { 0.096839064399999925, 10, 0, \n+\t  -0.40000000000000002 },\n+  { 0.25147634951601561, 10, 0, \n+\t  -0.30000000000000004 },\n+  { 0.12907202559999983, 10, 0, \n+\t  -0.19999999999999996 },\n+  { -0.12212499738710943, 10, 0, \n+\t  -0.099999999999999978 },\n+  { -0.24609375000000000, 10, 0, \n+\t  0.0000000000000000 },\n+  { -0.12212499738710922, 10, 0, \n+\t  0.10000000000000009 },\n+  { 0.12907202559999983, 10, 0, \n+\t  0.19999999999999996 },\n+  { 0.25147634951601561, 10, 0, \n+\t  0.30000000000000004 },\n+  { 0.096839064400000258, 10, 0, \n+\t  0.39999999999999991 },\n+  { -0.18822860717773438, 10, 0, \n+\t  0.50000000000000000 },\n+  { -0.24366274559999984, 10, 0, \n+\t  0.60000000000000009 },\n+  { 0.085805795531640333, 10, 0, \n+\t  0.69999999999999996 },\n+  { 0.30052979560000004, 10, 0, \n+\t  0.80000000000000004 },\n+  { -0.26314561785585899, 10, 0, \n+\t  0.89999999999999991 },\n+  { 1.0000000000000000, 10, 0, \n+\t  1.0000000000000000 },\n+};\n+const double toler011 = 2.5000000000000020e-13;\n+\n+// Test data for l=10, m=1.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data012[21] =\n+{\n+  { -0.0000000000000000, 10, 1, \n+\t  -1.0000000000000000 },\n+  { -3.0438748781479039, 10, 1, \n+\t  -0.90000000000000002 },\n+  { -0.87614260800000254, 10, 1, \n+\t  -0.80000000000000004 },\n+  { 2.9685359952934527, 10, 1, \n+\t  -0.69999999999999996 },\n+  { 1.2511825919999997, 10, 1, \n+\t  -0.59999999999999998 },\n+  { -2.0066877394361260, 10, 1, \n+\t  -0.50000000000000000 },\n+  { -2.4822196173476661, 10, 1, \n+\t  -0.40000000000000002 },\n+  { -0.12309508907433910, 10, 1, \n+\t  -0.30000000000000004 },\n+  { 2.2468221751958413, 10, 1, \n+\t  -0.19999999999999996 },\n+  { 2.2472659777983512, 10, 1, \n+\t  -0.099999999999999978 },\n+  { -0.0000000000000000, 10, 1, \n+\t  0.0000000000000000 },\n+  { -2.2472659777983535, 10, 1, \n+\t  0.10000000000000009 },\n+  { -2.2468221751958413, 10, 1, \n+\t  0.19999999999999996 },\n+  { 0.12309508907433910, 10, 1, \n+\t  0.30000000000000004 },\n+  { 2.4822196173476647, 10, 1, \n+\t  0.39999999999999991 },\n+  { 2.0066877394361260, 10, 1, \n+\t  0.50000000000000000 },\n+  { -1.2511825920000037, 10, 1, \n+\t  0.60000000000000009 },\n+  { -2.9685359952934527, 10, 1, \n+\t  0.69999999999999996 },\n+  { 0.87614260800000254, 10, 1, \n+\t  0.80000000000000004 },\n+  { 3.0438748781479115, 10, 1, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 10, 1, \n+\t  1.0000000000000000 },\n+};\n+const double toler012 = 2.5000000000000020e-13;\n+\n+// Test data for l=10, m=2.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data013[21] =\n+{\n+  { 0.0000000000000000, 10, 2, \n+\t  -1.0000000000000000 },\n+  { 16.376387762496137, 10, 2, \n+\t  -0.90000000000000002 },\n+  { -35.394657804000005, 10, 2, \n+\t  -0.80000000000000004 },\n+  { -3.6191429423788648, 10, 2, \n+\t  -0.69999999999999996 },\n+  { 28.679675904000014, 10, 2, \n+\t  -0.59999999999999998 },\n+  { 18.388023376464844, 10, 2, \n+\t  -0.50000000000000000 },\n+  { -12.818955995999994, 10, 2, \n+\t  -0.40000000000000002 },\n+  { -27.739821675972664, 10, 2, \n+\t  -0.30000000000000004 },\n+  { -13.280661503999987, 10, 2, \n+\t  -0.19999999999999996 },\n+  { 13.885467170308601, 10, 2, \n+\t  -0.099999999999999978 },\n+  { 27.070312500000000, 10, 2, \n+\t  0.0000000000000000 },\n+  { 13.885467170308573, 10, 2, \n+\t  0.10000000000000009 },\n+  { -13.280661503999987, 10, 2, \n+\t  0.19999999999999996 },\n+  { -27.739821675972664, 10, 2, \n+\t  0.30000000000000004 },\n+  { -12.818955996000021, 10, 2, \n+\t  0.39999999999999991 },\n+  { 18.388023376464844, 10, 2, \n+\t  0.50000000000000000 },\n+  { 28.679675904000000, 10, 2, \n+\t  0.60000000000000009 },\n+  { -3.6191429423788648, 10, 2, \n+\t  0.69999999999999996 },\n+  { -35.394657804000005, 10, 2, \n+\t  0.80000000000000004 },\n+  { 16.376387762496009, 10, 2, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 10, 2, \n+\t  1.0000000000000000 },\n+};\n+const double toler013 = 2.5000000000000020e-13;\n+\n+// Test data for l=10, m=5.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data014[21] =\n+{\n+  { 0.0000000000000000, 10, 5, \n+\t  -1.0000000000000000 },\n+  { 21343.618518164680, 10, 5, \n+\t  -0.90000000000000002 },\n+  { 40457.016407807983, 10, 5, \n+\t  -0.80000000000000004 },\n+  { 20321.279317331315, 10, 5, \n+\t  -0.69999999999999996 },\n+  { -14410.820616192004, 10, 5, \n+\t  -0.59999999999999998 },\n+  { -30086.169706116176, 10, 5, \n+\t  -0.50000000000000000 },\n+  { -17177.549337582859, 10, 5, \n+\t  -0.40000000000000002 },\n+  { 9272.5119495412364, 10, 5, \n+\t  -0.30000000000000004 },\n+  { 26591.511184414714, 10, 5, \n+\t  -0.19999999999999996 },\n+  { 21961.951238504211, 10, 5, \n+\t  -0.099999999999999978 },\n+  { -0.0000000000000000, 10, 5, \n+\t  0.0000000000000000 },\n+  { -21961.951238504229, 10, 5, \n+\t  0.10000000000000009 },\n+  { -26591.511184414714, 10, 5, \n+\t  0.19999999999999996 },\n+  { -9272.5119495412364, 10, 5, \n+\t  0.30000000000000004 },\n+  { 17177.549337582834, 10, 5, \n+\t  0.39999999999999991 },\n+  { 30086.169706116176, 10, 5, \n+\t  0.50000000000000000 },\n+  { 14410.820616191972, 10, 5, \n+\t  0.60000000000000009 },\n+  { -20321.279317331315, 10, 5, \n+\t  0.69999999999999996 },\n+  { -40457.016407807983, 10, 5, \n+\t  0.80000000000000004 },\n+  { -21343.618518164694, 10, 5, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 10, 5, \n+\t  1.0000000000000000 },\n+};\n+const double toler014 = 2.5000000000000020e-13;\n+\n+// Test data for l=10, m=10.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data015[21] =\n+{\n+  { 0.0000000000000000, 10, 10, \n+\t  -1.0000000000000000 },\n+  { 162117.40078784220, 10, 10, \n+\t  -0.90000000000000002 },\n+  { 3958896.3481267113, 10, 10, \n+\t  -0.80000000000000004 },\n+  { 22589806.343887307, 10, 10, \n+\t  -0.69999999999999996 },\n+  { 70300999.121633321, 10, 10, \n+\t  -0.59999999999999998 },\n+  { 155370278.54003900, 10, 10, \n+\t  -0.50000000000000000 },\n+  { 273815518.20150518, 10, 10, \n+\t  -0.40000000000000002 },\n+  { 408571989.13158917, 10, 10, \n+\t  -0.30000000000000004 },\n+  { 533848212.07990247, 10, 10, \n+\t  -0.19999999999999996 },\n+  { 622640835.70523083, 10, 10, \n+\t  -0.099999999999999978 },\n+  { 654729075.00000000, 10, 10, \n+\t  0.0000000000000000 },\n+  { 622640835.70523083, 10, 10, \n+\t  0.10000000000000009 },\n+  { 533848212.07990247, 10, 10, \n+\t  0.19999999999999996 },\n+  { 408571989.13158917, 10, 10, \n+\t  0.30000000000000004 },\n+  { 273815518.20150518, 10, 10, \n+\t  0.39999999999999991 },\n+  { 155370278.54003900, 10, 10, \n+\t  0.50000000000000000 },\n+  { 70300999.121633217, 10, 10, \n+\t  0.60000000000000009 },\n+  { 22589806.343887307, 10, 10, \n+\t  0.69999999999999996 },\n+  { 3958896.3481267113, 10, 10, \n+\t  0.80000000000000004 },\n+  { 162117.40078784304, 10, 10, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 10, 10, \n+\t  1.0000000000000000 },\n+};\n+const double toler015 = 2.5000000000000020e-13;\n+\n+// Test data for l=20, m=0.\n+// max(|f - f_GSL|): 3.3306690738754696e-16\n+// max(|f - f_GSL| / |f_GSL|): 2.2307336678138069e-15\n+const testcase_assoc_legendre<double>\n+data016[21] =\n+{\n+  { 1.0000000000000000, 20, 0, \n+\t  -1.0000000000000000 },\n+  { -0.14930823530984835, 20, 0, \n+\t  -0.90000000000000002 },\n+  { 0.22420460541741347, 20, 0, \n+\t  -0.80000000000000004 },\n+  { -0.20457394463834172, 20, 0, \n+\t  -0.69999999999999996 },\n+  { 0.15916752910098109, 20, 0, \n+\t  -0.59999999999999998 },\n+  { -0.048358381067373557, 20, 0, \n+\t  -0.50000000000000000 },\n+  { -0.10159261558628156, 20, 0, \n+\t  -0.40000000000000002 },\n+  { 0.18028715947998042, 20, 0, \n+\t  -0.30000000000000004 },\n+  { -0.098042194344594796, 20, 0, \n+\t  -0.19999999999999996 },\n+  { -0.082077130944527663, 20, 0, \n+\t  -0.099999999999999978 },\n+  { 0.17619705200195312, 20, 0, \n+\t  0.0000000000000000 },\n+  { -0.082077130944528023, 20, 0, \n+\t  0.10000000000000009 },\n+  { -0.098042194344594796, 20, 0, \n+\t  0.19999999999999996 },\n+  { 0.18028715947998042, 20, 0, \n+\t  0.30000000000000004 },\n+  { -0.10159261558628112, 20, 0, \n+\t  0.39999999999999991 },\n+  { -0.048358381067373557, 20, 0, \n+\t  0.50000000000000000 },\n+  { 0.15916752910098075, 20, 0, \n+\t  0.60000000000000009 },\n+  { -0.20457394463834172, 20, 0, \n+\t  0.69999999999999996 },\n+  { 0.22420460541741347, 20, 0, \n+\t  0.80000000000000004 },\n+  { -0.14930823530984924, 20, 0, \n+\t  0.89999999999999991 },\n+  { 1.0000000000000000, 20, 0, \n+\t  1.0000000000000000 },\n+};\n+const double toler016 = 2.5000000000000020e-13;\n+\n+// Test data for l=20, m=1.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data017[21] =\n+{\n+  { 0.0000000000000000, 20, 1, \n+\t  -1.0000000000000000 },\n+  { 4.3838334818220499, 20, 1, \n+\t  -0.90000000000000002 },\n+  { -0.63138296146340844, 20, 1, \n+\t  -0.80000000000000004 },\n+  { 0.72274871413391395, 20, 1, \n+\t  -0.69999999999999996 },\n+  { -2.3203528743824910, 20, 1, \n+\t  -0.59999999999999998 },\n+  { 3.7399919228791405, 20, 1, \n+\t  -0.50000000000000000 },\n+  { -3.1692202279270041, 20, 1, \n+\t  -0.40000000000000002 },\n+  { 0.15804468835344135, 20, 1, \n+\t  -0.30000000000000004 },\n+  { 3.0366182393271171, 20, 1, \n+\t  -0.19999999999999996 },\n+  { -3.2115523815580209, 20, 1, \n+\t  -0.099999999999999978 },\n+  { 0.0000000000000000, 20, 1, \n+\t  0.0000000000000000 },\n+  { 3.2115523815580169, 20, 1, \n+\t  0.10000000000000009 },\n+  { -3.0366182393271171, 20, 1, \n+\t  0.19999999999999996 },\n+  { -0.15804468835344135, 20, 1, \n+\t  0.30000000000000004 },\n+  { 3.1692202279270085, 20, 1, \n+\t  0.39999999999999991 },\n+  { -3.7399919228791405, 20, 1, \n+\t  0.50000000000000000 },\n+  { 2.3203528743824995, 20, 1, \n+\t  0.60000000000000009 },\n+  { -0.72274871413391395, 20, 1, \n+\t  0.69999999999999996 },\n+  { 0.63138296146340844, 20, 1, \n+\t  0.80000000000000004 },\n+  { -4.3838334818220339, 20, 1, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 20, 1, \n+\t  1.0000000000000000 },\n+};\n+const double toler017 = 2.5000000000000020e-13;\n+\n+// Test data for l=20, m=2.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data018[21] =\n+{\n+  { 0.0000000000000000, 20, 2, \n+\t  -1.0000000000000000 },\n+  { 80.812425587310102, 20, 2, \n+\t  -0.90000000000000002 },\n+  { -95.849622172549374, 20, 2, \n+\t  -0.80000000000000004 },\n+  { 87.337927630325510, 20, 2, \n+\t  -0.69999999999999996 },\n+  { -70.330891533985834, 20, 2, \n+\t  -0.59999999999999998 },\n+  { 24.629090735179489, 20, 2, \n+\t  -0.50000000000000000 },\n+  { 39.902576338912425, 20, 2, \n+\t  -0.40000000000000002 },\n+  { -75.621201471396603, 20, 2, \n+\t  -0.30000000000000004 },\n+  { 42.417415829726494, 20, 2, \n+\t  -0.19999999999999996 },\n+  { 33.826848678871293, 20, 2, \n+\t  -0.099999999999999978 },\n+  { -74.002761840820312, 20, 2, \n+\t  0.0000000000000000 },\n+  { 33.826848678871464, 20, 2, \n+\t  0.10000000000000009 },\n+  { 42.417415829726494, 20, 2, \n+\t  0.19999999999999996 },\n+  { -75.621201471396603, 20, 2, \n+\t  0.30000000000000004 },\n+  { 39.902576338912247, 20, 2, \n+\t  0.39999999999999991 },\n+  { 24.629090735179489, 20, 2, \n+\t  0.50000000000000000 },\n+  { -70.330891533985721, 20, 2, \n+\t  0.60000000000000009 },\n+  { 87.337927630325510, 20, 2, \n+\t  0.69999999999999996 },\n+  { -95.849622172549374, 20, 2, \n+\t  0.80000000000000004 },\n+  { 80.812425587310500, 20, 2, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 20, 2, \n+\t  1.0000000000000000 },\n+};\n+const double toler018 = 2.5000000000000020e-13;\n+\n+// Test data for l=20, m=5.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data019[21] =\n+{\n+  { -0.0000000000000000, 20, 5, \n+\t  -1.0000000000000000 },\n+  { -315702.32715134218, 20, 5, \n+\t  -0.90000000000000002 },\n+  { 503060.91484852589, 20, 5, \n+\t  -0.80000000000000004 },\n+  { -298127.28360361955, 20, 5, \n+\t  -0.69999999999999996 },\n+  { -114444.61447464029, 20, 5, \n+\t  -0.59999999999999998 },\n+  { 543428.40914592845, 20, 5, \n+\t  -0.50000000000000000 },\n+  { -613842.07728185470, 20, 5, \n+\t  -0.40000000000000002 },\n+  { 143765.42411270936, 20, 5, \n+\t  -0.30000000000000004 },\n+  { 472600.45321372285, 20, 5, \n+\t  -0.19999999999999996 },\n+  { -563861.76771496492, 20, 5, \n+\t  -0.099999999999999978 },\n+  { 0.0000000000000000, 20, 5, \n+\t  0.0000000000000000 },\n+  { 563861.76771496458, 20, 5, \n+\t  0.10000000000000009 },\n+  { -472600.45321372285, 20, 5, \n+\t  0.19999999999999996 },\n+  { -143765.42411270936, 20, 5, \n+\t  0.30000000000000004 },\n+  { 613842.07728185481, 20, 5, \n+\t  0.39999999999999991 },\n+  { -543428.40914592845, 20, 5, \n+\t  0.50000000000000000 },\n+  { 114444.61447464178, 20, 5, \n+\t  0.60000000000000009 },\n+  { 298127.28360361955, 20, 5, \n+\t  0.69999999999999996 },\n+  { -503060.91484852589, 20, 5, \n+\t  0.80000000000000004 },\n+  { 315702.32715134491, 20, 5, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 20, 5, \n+\t  1.0000000000000000 },\n+};\n+const double toler019 = 2.5000000000000020e-13;\n+\n+// Test data for l=20, m=10.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data020[21] =\n+{\n+  { -0.0000000000000000, 20, 10, \n+\t  -1.0000000000000000 },\n+  { 990017476694.99084, 20, 10, \n+\t  -0.90000000000000002 },\n+  { 2392757933281.0498, 20, 10, \n+\t  -0.80000000000000004 },\n+  { -1548364524949.5808, 20, 10, \n+\t  -0.69999999999999996 },\n+  { -424471915195.05627, 20, 10, \n+\t  -0.59999999999999998 },\n+  { 1744502295946.2073, 20, 10, \n+\t  -0.50000000000000000 },\n+  { -899973487310.55212, 20, 10, \n+\t  -0.40000000000000002 },\n+  { -1092420454297.7161, 20, 10, \n+\t  -0.30000000000000004 },\n+  { 1466609267659.8816, 20, 10, \n+\t  -0.19999999999999996 },\n+  { 356041756390.71674, 20, 10, \n+\t  -0.099999999999999978 },\n+  { -1612052956674.3164, 20, 10, \n+\t  0.0000000000000000 },\n+  { 356041756390.71985, 20, 10, \n+\t  0.10000000000000009 },\n+  { 1466609267659.8816, 20, 10, \n+\t  0.19999999999999996 },\n+  { -1092420454297.7161, 20, 10, \n+\t  0.30000000000000004 },\n+  { -899973487310.55530, 20, 10, \n+\t  0.39999999999999991 },\n+  { 1744502295946.2073, 20, 10, \n+\t  0.50000000000000000 },\n+  { -424471915195.05896, 20, 10, \n+\t  0.60000000000000009 },\n+  { -1548364524949.5808, 20, 10, \n+\t  0.69999999999999996 },\n+  { 2392757933281.0498, 20, 10, \n+\t  0.80000000000000004 },\n+  { 990017476694.99316, 20, 10, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 20, 10, \n+\t  1.0000000000000000 },\n+};\n+const double toler020 = 2.5000000000000020e-13;\n+\n+// Test data for l=20, m=20.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data021[21] =\n+{\n+  { 0.0000000000000000, 20, 20, \n+\t  -1.0000000000000000 },\n+  { 19609049712023808., 20, 20, \n+\t  -0.90000000000000002 },\n+  { 1.1693527616833221e+19, 20, 20, \n+\t  -0.80000000000000004 },\n+  { 3.8073455880620691e+20, 20, 20, \n+\t  -0.69999999999999996 },\n+  { 3.6874002249007927e+21, 20, 20, \n+\t  -0.59999999999999998 },\n+  { 1.8010806978179592e+22, 20, 20, \n+\t  -0.50000000000000000 },\n+  { 5.5938832584012466e+22, 20, 20, \n+\t  -0.40000000000000002 },\n+  { 1.2454734132297811e+23, 20, 20, \n+\t  -0.30000000000000004 },\n+  { 2.1263407800797497e+23, 20, 20, \n+\t  -0.19999999999999996 },\n+  { 2.8924941146976873e+23, 20, 20, \n+\t  -0.099999999999999978 },\n+  { 3.1983098677287775e+23, 20, 20, \n+\t  0.0000000000000000 },\n+  { 2.8924941146976873e+23, 20, 20, \n+\t  0.10000000000000009 },\n+  { 2.1263407800797497e+23, 20, 20, \n+\t  0.19999999999999996 },\n+  { 1.2454734132297811e+23, 20, 20, \n+\t  0.30000000000000004 },\n+  { 5.5938832584012466e+22, 20, 20, \n+\t  0.39999999999999991 },\n+  { 1.8010806978179592e+22, 20, 20, \n+\t  0.50000000000000000 },\n+  { 3.6874002249007807e+21, 20, 20, \n+\t  0.60000000000000009 },\n+  { 3.8073455880620691e+20, 20, 20, \n+\t  0.69999999999999996 },\n+  { 1.1693527616833221e+19, 20, 20, \n+\t  0.80000000000000004 },\n+  { 19609049712024020., 20, 20, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 20, 20, \n+\t  1.0000000000000000 },\n+};\n+const double toler021 = 2.5000000000000020e-13;\n+\n+// Test data for l=50, m=0.\n+// max(|f - f_GSL|): 3.6082248300317588e-16\n+// max(|f - f_GSL| / |f_GSL|): 2.1700196856209138e-15\n+const testcase_assoc_legendre<double>\n+data022[21] =\n+{\n+  { 1.0000000000000000, 50, 0, \n+\t  -1.0000000000000000 },\n+  { -0.17003765994383671, 50, 0, \n+\t  -0.90000000000000002 },\n+  { 0.13879737345093113, 50, 0, \n+\t  -0.80000000000000004 },\n+  { -0.014572731645892852, 50, 0, \n+\t  -0.69999999999999996 },\n+  { -0.058860798844002096, 50, 0, \n+\t  -0.59999999999999998 },\n+  { -0.031059099239609811, 50, 0, \n+\t  -0.50000000000000000 },\n+  { 0.041569033381825375, 50, 0, \n+\t  -0.40000000000000002 },\n+  { 0.10911051574714797, 50, 0, \n+\t  -0.30000000000000004 },\n+  { 0.083432272204197494, 50, 0, \n+\t  -0.19999999999999996 },\n+  { -0.038205812661313600, 50, 0, \n+\t  -0.099999999999999978 },\n+  { -0.11227517265921705, 50, 0, \n+\t  0.0000000000000000 },\n+  { -0.038205812661314155, 50, 0, \n+\t  0.10000000000000009 },\n+  { 0.083432272204197494, 50, 0, \n+\t  0.19999999999999996 },\n+  { 0.10911051574714797, 50, 0, \n+\t  0.30000000000000004 },\n+  { 0.041569033381824674, 50, 0, \n+\t  0.39999999999999991 },\n+  { -0.031059099239609811, 50, 0, \n+\t  0.50000000000000000 },\n+  { -0.058860798844001430, 50, 0, \n+\t  0.60000000000000009 },\n+  { -0.014572731645892852, 50, 0, \n+\t  0.69999999999999996 },\n+  { 0.13879737345093113, 50, 0, \n+\t  0.80000000000000004 },\n+  { -0.17003765994383657, 50, 0, \n+\t  0.89999999999999991 },\n+  { 1.0000000000000000, 50, 0, \n+\t  1.0000000000000000 },\n+};\n+const double toler022 = 2.5000000000000020e-13;\n+\n+// Test data for l=50, m=1.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data023[21] =\n+{\n+  { 0.0000000000000000, 50, 1, \n+\t  -1.0000000000000000 },\n+  { -0.13424149984449490, 50, 1, \n+\t  -0.90000000000000002 },\n+  { 2.2011219672413018, 50, 1, \n+\t  -0.80000000000000004 },\n+  { 6.6622414993232004, 50, 1, \n+\t  -0.69999999999999996 },\n+  { 5.5772846936919249, 50, 1, \n+\t  -0.59999999999999998 },\n+  { 5.8787148815607608, 50, 1, \n+\t  -0.50000000000000000 },\n+  { 5.5473459458633974, 50, 1, \n+\t  -0.40000000000000002 },\n+  { 1.8444956647619930, 50, 1, \n+\t  -0.30000000000000004 },\n+  { -3.8722014306642127, 50, 1, \n+\t  -0.19999999999999996 },\n+  { -5.3488751322285628, 50, 1, \n+\t  -0.099999999999999978 },\n+  { -0.0000000000000000, 50, 1, \n+\t  0.0000000000000000 },\n+  { 5.3488751322285522, 50, 1, \n+\t  0.10000000000000009 },\n+  { 3.8722014306642127, 50, 1, \n+\t  0.19999999999999996 },\n+  { -1.8444956647619930, 50, 1, \n+\t  0.30000000000000004 },\n+  { -5.5473459458634080, 50, 1, \n+\t  0.39999999999999991 },\n+  { -5.8787148815607608, 50, 1, \n+\t  0.50000000000000000 },\n+  { -5.5772846936919453, 50, 1, \n+\t  0.60000000000000009 },\n+  { -6.6622414993232004, 50, 1, \n+\t  0.69999999999999996 },\n+  { -2.2011219672413018, 50, 1, \n+\t  0.80000000000000004 },\n+  { 0.13424149984462019, 50, 1, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 50, 1, \n+\t  1.0000000000000000 },\n+};\n+const double toler023 = 2.5000000000000020e-13;\n+\n+// Test data for l=50, m=2.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data024[21] =\n+{\n+  { 0.0000000000000000, 50, 2, \n+\t  -1.0000000000000000 },\n+  { 433.04168483713511, 50, 2, \n+\t  -0.90000000000000002 },\n+  { -348.06364372056424, 50, 2, \n+\t  -0.80000000000000004 },\n+  { 50.221071418108444, 50, 2, \n+\t  -0.69999999999999996 },\n+  { 158.46096409274352, 50, 2, \n+\t  -0.59999999999999998 },\n+  { 85.988858299721457, 50, 2, \n+\t  -0.50000000000000000 },\n+  { -101.15891460879270, 50, 2, \n+\t  -0.40000000000000002 },\n+  { -277.07168105316617, 50, 2, \n+\t  -0.30000000000000004 },\n+  { -214.33311373510401, 50, 2, \n+\t  -0.19999999999999996 },\n+  { 96.349657930951665, 50, 2, \n+\t  -0.099999999999999978 },\n+  { 286.30169028100346, 50, 2, \n+\t  0.0000000000000000 },\n+  { 96.349657930953242, 50, 2, \n+\t  0.10000000000000009 },\n+  { -214.33311373510401, 50, 2, \n+\t  0.19999999999999996 },\n+  { -277.07168105316617, 50, 2, \n+\t  0.30000000000000004 },\n+  { -101.15891460879088, 50, 2, \n+\t  0.39999999999999991 },\n+  { 85.988858299721457, 50, 2, \n+\t  0.50000000000000000 },\n+  { 158.46096409274153, 50, 2, \n+\t  0.60000000000000009 },\n+  { 50.221071418108444, 50, 2, \n+\t  0.69999999999999996 },\n+  { -348.06364372056424, 50, 2, \n+\t  0.80000000000000004 },\n+  { 433.04168483713374, 50, 2, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 50, 2, \n+\t  1.0000000000000000 },\n+};\n+const double toler024 = 2.5000000000000020e-13;\n+\n+// Test data for l=50, m=5.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data025[21] =\n+{\n+  { -0.0000000000000000, 50, 5, \n+\t  -1.0000000000000000 },\n+  { -27340473.952132829, 50, 5, \n+\t  -0.90000000000000002 },\n+  { 27753716.768532373, 50, 5, \n+\t  -0.80000000000000004 },\n+  { 40808153.913493633, 50, 5, \n+\t  -0.69999999999999996 },\n+  { 32071189.035790090, 50, 5, \n+\t  -0.59999999999999998 },\n+  { 36265736.218529105, 50, 5, \n+\t  -0.50000000000000000 },\n+  { 37089596.700204901, 50, 5, \n+\t  -0.40000000000000002 },\n+  { 14562029.629244499, 50, 5, \n+\t  -0.30000000000000004 },\n+  { -23686895.217517190, 50, 5, \n+\t  -0.19999999999999996 },\n+  { -34878992.965676002, 50, 5, \n+\t  -0.099999999999999978 },\n+  { -0.0000000000000000, 50, 5, \n+\t  0.0000000000000000 },\n+  { 34878992.965675958, 50, 5, \n+\t  0.10000000000000009 },\n+  { 23686895.217517190, 50, 5, \n+\t  0.19999999999999996 },\n+  { -14562029.629244499, 50, 5, \n+\t  0.30000000000000004 },\n+  { -37089596.700204931, 50, 5, \n+\t  0.39999999999999991 },\n+  { -36265736.218529105, 50, 5, \n+\t  0.50000000000000000 },\n+  { -32071189.035790242, 50, 5, \n+\t  0.60000000000000009 },\n+  { -40808153.913493633, 50, 5, \n+\t  0.69999999999999996 },\n+  { -27753716.768532373, 50, 5, \n+\t  0.80000000000000004 },\n+  { 27340473.952133428, 50, 5, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 50, 5, \n+\t  1.0000000000000000 },\n+};\n+const double toler025 = 2.5000000000000020e-13;\n+\n+// Test data for l=50, m=10.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data026[21] =\n+{\n+  { -0.0000000000000000, 50, 10, \n+\t  -1.0000000000000000 },\n+  { -8994661710093155.0, 50, 10, \n+\t  -0.90000000000000002 },\n+  { 932311375306569.62, 50, 10, \n+\t  -0.80000000000000004 },\n+  { 12153535011507012., 50, 10, \n+\t  -0.69999999999999996 },\n+  { 12176690755542240., 50, 10, \n+\t  -0.59999999999999998 },\n+  { 9180035388465754.0, 50, 10, \n+\t  -0.50000000000000000 },\n+  { 889201701866910.38, 50, 10, \n+\t  -0.40000000000000002 },\n+  { -9451384032851604.0, 50, 10, \n+\t  -0.30000000000000004 },\n+  { -9926439446673564.0, 50, 10, \n+\t  -0.19999999999999996 },\n+  { 2794368162749970.5, 50, 10, \n+\t  -0.099999999999999978 },\n+  { 11452238249246346., 50, 10, \n+\t  0.0000000000000000 },\n+  { 2794368162750031.0, 50, 10, \n+\t  0.10000000000000009 },\n+  { -9926439446673564.0, 50, 10, \n+\t  0.19999999999999996 },\n+  { -9451384032851604.0, 50, 10, \n+\t  0.30000000000000004 },\n+  { 889201701866984.00, 50, 10, \n+\t  0.39999999999999991 },\n+  { 9180035388465754.0, 50, 10, \n+\t  0.50000000000000000 },\n+  { 12176690755542214., 50, 10, \n+\t  0.60000000000000009 },\n+  { 12153535011507012., 50, 10, \n+\t  0.69999999999999996 },\n+  { 932311375306569.62, 50, 10, \n+\t  0.80000000000000004 },\n+  { -8994661710093362.0, 50, 10, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 50, 10, \n+\t  1.0000000000000000 },\n+};\n+const double toler026 = 2.5000000000000020e-13;\n+\n+// Test data for l=50, m=20.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data027[21] =\n+{\n+  { 0.0000000000000000, 50, 20, \n+\t  -1.0000000000000000 },\n+  { 1.6630925158645501e+33, 50, 20, \n+\t  -0.90000000000000002 },\n+  { 1.0622676657892052e+33, 50, 20, \n+\t  -0.80000000000000004 },\n+  { 8.6022521164717112e+32, 50, 20, \n+\t  -0.69999999999999996 },\n+  { 4.0860128756808466e+32, 50, 20, \n+\t  -0.59999999999999998 },\n+  { -4.0169860814274459e+32, 50, 20, \n+\t  -0.50000000000000000 },\n+  { -8.2324325279774037e+32, 50, 20, \n+\t  -0.40000000000000002 },\n+  { -4.0054067236243731e+31, 50, 20, \n+\t  -0.30000000000000004 },\n+  { 7.9309266056434309e+32, 50, 20, \n+\t  -0.19999999999999996 },\n+  { 5.4151358290898977e+31, 50, 20, \n+\t  -0.099999999999999978 },\n+  { -7.8735935697332210e+32, 50, 20, \n+\t  0.0000000000000000 },\n+  { 5.4151358290894924e+31, 50, 20, \n+\t  0.10000000000000009 },\n+  { 7.9309266056434309e+32, 50, 20, \n+\t  0.19999999999999996 },\n+  { -4.0054067236243731e+31, 50, 20, \n+\t  0.30000000000000004 },\n+  { -8.2324325279773994e+32, 50, 20, \n+\t  0.39999999999999991 },\n+  { -4.0169860814274459e+32, 50, 20, \n+\t  0.50000000000000000 },\n+  { 4.0860128756807846e+32, 50, 20, \n+\t  0.60000000000000009 },\n+  { 8.6022521164717112e+32, 50, 20, \n+\t  0.69999999999999996 },\n+  { 1.0622676657892052e+33, 50, 20, \n+\t  0.80000000000000004 },\n+  { 1.6630925158645483e+33, 50, 20, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 50, 20, \n+\t  1.0000000000000000 },\n+};\n+const double toler027 = 2.5000000000000020e-13;\n+\n+// Test data for l=50, m=50.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data028[21] =\n+{\n+  { 0.0000000000000000, 50, 50, \n+\t  -1.0000000000000000 },\n+  { 2.5366994974431341e+60, 50, 50, \n+\t  -0.90000000000000002 },\n+  { 2.2028834403101213e+67, 50, 50, \n+\t  -0.80000000000000004 },\n+  { 1.3325496559566651e+71, 50, 50, \n+\t  -0.69999999999999996 },\n+  { 3.8898096431781969e+73, 50, 50, \n+\t  -0.59999999999999998 },\n+  { 2.0509760257037188e+75, 50, 50, \n+\t  -0.50000000000000000 },\n+  { 3.4866724533443283e+76, 50, 50, \n+\t  -0.40000000000000002 },\n+  { 2.5790740224150207e+77, 50, 50, \n+\t  -0.30000000000000004 },\n+  { 9.8222237931680989e+77, 50, 50, \n+\t  -0.19999999999999996 },\n+  { 2.1198682190366617e+78, 50, 50, \n+\t  -0.099999999999999978 },\n+  { 2.7253921397507295e+78, 50, 50, \n+\t  0.0000000000000000 },\n+  { 2.1198682190366617e+78, 50, 50, \n+\t  0.10000000000000009 },\n+  { 9.8222237931680989e+77, 50, 50, \n+\t  0.19999999999999996 },\n+  { 2.5790740224150207e+77, 50, 50, \n+\t  0.30000000000000004 },\n+  { 3.4866724533443283e+76, 50, 50, \n+\t  0.39999999999999991 },\n+  { 2.0509760257037188e+75, 50, 50, \n+\t  0.50000000000000000 },\n+  { 3.8898096431781724e+73, 50, 50, \n+\t  0.60000000000000009 },\n+  { 1.3325496559566651e+71, 50, 50, \n+\t  0.69999999999999996 },\n+  { 2.2028834403101213e+67, 50, 50, \n+\t  0.80000000000000004 },\n+  { 2.5366994974431990e+60, 50, 50, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 50, 50, \n+\t  1.0000000000000000 },\n+};\n+const double toler028 = 2.5000000000000020e-13;\n+\n+// Test data for l=100, m=0.\n+// max(|f - f_GSL|): 3.4694469519536142e-16\n+// max(|f - f_GSL| / |f_GSL|): 6.8214063779431592e-15\n+const testcase_assoc_legendre<double>\n+data029[21] =\n+{\n+  { 1.0000000000000000, 100, 0, \n+\t  -1.0000000000000000 },\n+  { 0.10226582055871893, 100, 0, \n+\t  -0.90000000000000002 },\n+  { 0.050861167913584228, 100, 0, \n+\t  -0.80000000000000004 },\n+  { -0.077132507199778641, 100, 0, \n+\t  -0.69999999999999996 },\n+  { -0.023747023905133141, 100, 0, \n+\t  -0.59999999999999998 },\n+  { -0.060518025961861198, 100, 0, \n+\t  -0.50000000000000000 },\n+  { -0.072258202125684470, 100, 0, \n+\t  -0.40000000000000002 },\n+  { 0.057127392202801566, 100, 0, \n+\t  -0.30000000000000004 },\n+  { 0.014681835355659706, 100, 0, \n+\t  -0.19999999999999996 },\n+  { -0.063895098434750205, 100, 0, \n+\t  -0.099999999999999978 },\n+  { 0.079589237387178727, 100, 0, \n+\t  0.0000000000000000 },\n+  { -0.063895098434749761, 100, 0, \n+\t  0.10000000000000009 },\n+  { 0.014681835355659706, 100, 0, \n+\t  0.19999999999999996 },\n+  { 0.057127392202801566, 100, 0, \n+\t  0.30000000000000004 },\n+  { -0.072258202125685025, 100, 0, \n+\t  0.39999999999999991 },\n+  { -0.060518025961861198, 100, 0, \n+\t  0.50000000000000000 },\n+  { -0.023747023905134217, 100, 0, \n+\t  0.60000000000000009 },\n+  { -0.077132507199778641, 100, 0, \n+\t  0.69999999999999996 },\n+  { 0.050861167913584228, 100, 0, \n+\t  0.80000000000000004 },\n+  { 0.10226582055871711, 100, 0, \n+\t  0.89999999999999991 },\n+  { 1.0000000000000000, 100, 0, \n+\t  1.0000000000000000 },\n+};\n+const double toler029 = 5.0000000000000039e-13;\n+\n+// Test data for l=100, m=1.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data030[21] =\n+{\n+  { -0.0000000000000000, 100, 1, \n+\t  -1.0000000000000000 },\n+  { 6.5200167187780345, 100, 1, \n+\t  -0.90000000000000002 },\n+  { 9.0065170007027486, 100, 1, \n+\t  -0.80000000000000004 },\n+  { -5.4690908541180976, 100, 1, \n+\t  -0.69999999999999996 },\n+  { -8.6275439170430790, 100, 1, \n+\t  -0.59999999999999998 },\n+  { -6.0909031663448454, 100, 1, \n+\t  -0.50000000000000000 },\n+  { 4.1160338699561212, 100, 1, \n+\t  -0.40000000000000002 },\n+  { 5.8491043010758013, 100, 1, \n+\t  -0.30000000000000004 },\n+  { -7.9435138723089826, 100, 1, \n+\t  -0.19999999999999996 },\n+  { 4.7996285823989355, 100, 1, \n+\t  -0.099999999999999978 },\n+  { 0.0000000000000000, 100, 1, \n+\t  0.0000000000000000 },\n+  { -4.7996285823990101, 100, 1, \n+\t  0.10000000000000009 },\n+  { 7.9435138723089826, 100, 1, \n+\t  0.19999999999999996 },\n+  { -5.8491043010758013, 100, 1, \n+\t  0.30000000000000004 },\n+  { -4.1160338699560395, 100, 1, \n+\t  0.39999999999999991 },\n+  { 6.0909031663448454, 100, 1, \n+\t  0.50000000000000000 },\n+  { 8.6275439170430470, 100, 1, \n+\t  0.60000000000000009 },\n+  { 5.4690908541180976, 100, 1, \n+\t  0.69999999999999996 },\n+  { -9.0065170007027486, 100, 1, \n+\t  0.80000000000000004 },\n+  { -6.5200167187783542, 100, 1, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 100, 1, \n+\t  1.0000000000000000 },\n+};\n+const double toler030 = 2.5000000000000020e-13;\n+\n+// Test data for l=100, m=2.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data031[21] =\n+{\n+  { 0.0000000000000000, 100, 2, \n+\t  -1.0000000000000000 },\n+  { -1005.9604880761002, 100, 2, \n+\t  -0.90000000000000002 },\n+  { -489.68041725865947, 100, 2, \n+\t  -0.80000000000000004 },\n+  { 768.31676011669924, 100, 2, \n+\t  -0.69999999999999996 },\n+  { 226.90362556627937, 100, 2, \n+\t  -0.59999999999999998 },\n+  { 604.19889304940341, 100, 2, \n+\t  -0.50000000000000000 },\n+  { 733.40061037838029, 100, 2, \n+\t  -0.40000000000000002 },\n+  { -573.30774483996390, 100, 2, \n+\t  -0.30000000000000004 },\n+  { -151.52946305080880, 100, 2, \n+\t  -0.19999999999999996 },\n+  { 646.30525583587985, 100, 2, \n+\t  -0.099999999999999978 },\n+  { -803.85129761050518, 100, 2, \n+\t  0.0000000000000000 },\n+  { 646.30525583587439, 100, 2, \n+\t  0.10000000000000009 },\n+  { -151.52946305080880, 100, 2, \n+\t  0.19999999999999996 },\n+  { -573.30774483996390, 100, 2, \n+\t  0.30000000000000004 },\n+  { 733.40061037838518, 100, 2, \n+\t  0.39999999999999991 },\n+  { 604.19889304940341, 100, 2, \n+\t  0.50000000000000000 },\n+  { 226.90362556629168, 100, 2, \n+\t  0.60000000000000009 },\n+  { 768.31676011669924, 100, 2, \n+\t  0.69999999999999996 },\n+  { -489.68041725865947, 100, 2, \n+\t  0.80000000000000004 },\n+  { -1005.9604880760779, 100, 2, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 100, 2, \n+\t  1.0000000000000000 },\n+};\n+const double toler031 = 2.5000000000000020e-13;\n+\n+// Test data for l=100, m=5.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data032[21] =\n+{\n+  { 0.0000000000000000, 100, 5, \n+\t  -1.0000000000000000 },\n+  { 900551126.09653807, 100, 5, \n+\t  -0.90000000000000002 },\n+  { 988567431.55756140, 100, 5, \n+\t  -0.80000000000000004 },\n+  { -645646451.90344620, 100, 5, \n+\t  -0.69999999999999996 },\n+  { -897114585.29920685, 100, 5, \n+\t  -0.59999999999999998 },\n+  { -661710744.42483854, 100, 5, \n+\t  -0.50000000000000000 },\n+  { 380163158.51425636, 100, 5, \n+\t  -0.40000000000000002 },\n+  { 617391071.36632574, 100, 5, \n+\t  -0.30000000000000004 },\n+  { -805288801.85509109, 100, 5, \n+\t  -0.19999999999999996 },\n+  { 481041740.16728652, 100, 5, \n+\t  -0.099999999999999978 },\n+  { 0.0000000000000000, 100, 5, \n+\t  0.0000000000000000 },\n+  { -481041740.16729391, 100, 5, \n+\t  0.10000000000000009 },\n+  { 805288801.85509109, 100, 5, \n+\t  0.19999999999999996 },\n+  { -617391071.36632574, 100, 5, \n+\t  0.30000000000000004 },\n+  { -380163158.51424754, 100, 5, \n+\t  0.39999999999999991 },\n+  { 661710744.42483854, 100, 5, \n+\t  0.50000000000000000 },\n+  { 897114585.29920483, 100, 5, \n+\t  0.60000000000000009 },\n+  { 645646451.90344620, 100, 5, \n+\t  0.69999999999999996 },\n+  { -988567431.55756140, 100, 5, \n+\t  0.80000000000000004 },\n+  { -900551126.09655857, 100, 5, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 100, 5, \n+\t  1.0000000000000000 },\n+};\n+const double toler032 = 2.5000000000000020e-13;\n+\n+// Test data for l=100, m=10.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data033[21] =\n+{\n+  { 0.0000000000000000, 100, 10, \n+\t  -1.0000000000000000 },\n+  { 2.5643395957658602e+17, 100, 10, \n+\t  -0.90000000000000002 },\n+  { 1.5778673545673485e+18, 100, 10, \n+\t  -0.80000000000000004 },\n+  { 4.4355048487496801e+18, 100, 10, \n+\t  -0.69999999999999996 },\n+  { -9.5936111659124288e+17, 100, 10, \n+\t  -0.59999999999999998 },\n+  { 4.2387123021963438e+18, 100, 10, \n+\t  -0.50000000000000000 },\n+  { 8.2370834618426542e+18, 100, 10, \n+\t  -0.40000000000000002 },\n+  { -4.9089358388052941e+18, 100, 10, \n+\t  -0.30000000000000004 },\n+  { -2.3468810358091274e+18, 100, 10, \n+\t  -0.19999999999999996 },\n+  { 6.8627855225034568e+18, 100, 10, \n+\t  -0.099999999999999978 },\n+  { -8.2494597181670380e+18, 100, 10, \n+\t  0.0000000000000000 },\n+  { 6.8627855225034056e+18, 100, 10, \n+\t  0.10000000000000009 },\n+  { -2.3468810358091274e+18, 100, 10, \n+\t  0.19999999999999996 },\n+  { -4.9089358388052941e+18, 100, 10, \n+\t  0.30000000000000004 },\n+  { 8.2370834618426767e+18, 100, 10, \n+\t  0.39999999999999991 },\n+  { 4.2387123021963438e+18, 100, 10, \n+\t  0.50000000000000000 },\n+  { -9.5936111659112640e+17, 100, 10, \n+\t  0.60000000000000009 },\n+  { 4.4355048487496801e+18, 100, 10, \n+\t  0.69999999999999996 },\n+  { 1.5778673545673485e+18, 100, 10, \n+\t  0.80000000000000004 },\n+  { 2.5643395957697341e+17, 100, 10, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 100, 10, \n+\t  1.0000000000000000 },\n+};\n+const double toler033 = 2.5000000000000020e-13;\n+\n+// Test data for l=100, m=20.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data034[21] =\n+{\n+  { 0.0000000000000000, 100, 20, \n+\t  -1.0000000000000000 },\n+  { 7.1604344878780134e+37, 100, 20, \n+\t  -0.90000000000000002 },\n+  { -8.3963895116962231e+38, 100, 20, \n+\t  -0.80000000000000004 },\n+  { 7.9022236853110145e+38, 100, 20, \n+\t  -0.69999999999999996 },\n+  { 8.2680005574121013e+38, 100, 20, \n+\t  -0.59999999999999998 },\n+  { 3.0750497039999552e+38, 100, 20, \n+\t  -0.50000000000000000 },\n+  { -7.6120586043843889e+38, 100, 20, \n+\t  -0.40000000000000002 },\n+  { 1.1474496891901797e+38, 100, 20, \n+\t  -0.30000000000000004 },\n+  { 4.3966251307444241e+38, 100, 20, \n+\t  -0.19999999999999996 },\n+  { -7.0503266451702591e+38, 100, 20, \n+\t  -0.099999999999999978 },\n+  { 7.7727439836159581e+38, 100, 20, \n+\t  0.0000000000000000 },\n+  { -7.0503266451702213e+38, 100, 20, \n+\t  0.10000000000000009 },\n+  { 4.3966251307444241e+38, 100, 20, \n+\t  0.19999999999999996 },\n+  { 1.1474496891901797e+38, 100, 20, \n+\t  0.30000000000000004 },\n+  { -7.6120586043843556e+38, 100, 20, \n+\t  0.39999999999999991 },\n+  { 3.0750497039999552e+38, 100, 20, \n+\t  0.50000000000000000 },\n+  { 8.2680005574120394e+38, 100, 20, \n+\t  0.60000000000000009 },\n+  { 7.9022236853110145e+38, 100, 20, \n+\t  0.69999999999999996 },\n+  { -8.3963895116962231e+38, 100, 20, \n+\t  0.80000000000000004 },\n+  { 7.1604344878812652e+37, 100, 20, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 100, 20, \n+\t  1.0000000000000000 },\n+};\n+const double toler034 = 2.5000000000000020e-13;\n+\n+// Test data for l=100, m=50.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data035[21] =\n+{\n+  { 0.0000000000000000, 100, 50, \n+\t  -1.0000000000000000 },\n+  { 9.3231278516893716e+96, 100, 50, \n+\t  -0.90000000000000002 },\n+  { -1.1029797977454281e+98, 100, 50, \n+\t  -0.80000000000000004 },\n+  { 1.8089333903465606e+97, 100, 50, \n+\t  -0.69999999999999996 },\n+  { 5.9364045925669405e+97, 100, 50, \n+\t  -0.59999999999999998 },\n+  { -8.2252620339727118e+97, 100, 50, \n+\t  -0.50000000000000000 },\n+  { 7.1431385093739863e+97, 100, 50, \n+\t  -0.40000000000000002 },\n+  { -3.3520602067479344e+97, 100, 50, \n+\t  -0.30000000000000004 },\n+  { -2.7791149588121382e+97, 100, 50, \n+\t  -0.19999999999999996 },\n+  { 9.0119338550180417e+97, 100, 50, \n+\t  -0.099999999999999978 },\n+  { -1.1712145031578381e+98, 100, 50, \n+\t  0.0000000000000000 },\n+  { 9.0119338550181207e+97, 100, 50, \n+\t  0.10000000000000009 },\n+  { -2.7791149588121382e+97, 100, 50, \n+\t  0.19999999999999996 },\n+  { -3.3520602067479344e+97, 100, 50, \n+\t  0.30000000000000004 },\n+  { 7.1431385093740728e+97, 100, 50, \n+\t  0.39999999999999991 },\n+  { -8.2252620339727118e+97, 100, 50, \n+\t  0.50000000000000000 },\n+  { 5.9364045925668024e+97, 100, 50, \n+\t  0.60000000000000009 },\n+  { 1.8089333903465606e+97, 100, 50, \n+\t  0.69999999999999996 },\n+  { -1.1029797977454281e+98, 100, 50, \n+\t  0.80000000000000004 },\n+  { 9.3231278516894968e+96, 100, 50, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 100, 50, \n+\t  1.0000000000000000 },\n+};\n+const double toler035 = 2.5000000000000020e-13;\n+\n+// Test data for l=100, m=100.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_assoc_legendre<double>\n+data036[21] =\n+{\n+  { 0.0000000000000000, 100, 100, \n+\t  -1.0000000000000000 },\n+  { 5.7751792255758316e+150, 100, 100, \n+\t  -0.90000000000000002 },\n+  { 4.3552236041585515e+164, 100, 100, \n+\t  -0.80000000000000004 },\n+  { 1.5936546850595123e+172, 100, 100, \n+\t  -0.69999999999999996 },\n+  { 1.3579510590289176e+177, 100, 100, \n+\t  -0.59999999999999998 },\n+  { 3.7752749682889513e+180, 100, 100, \n+\t  -0.50000000000000000 },\n+  { 1.0910627330458913e+183, 100, 100, \n+\t  -0.40000000000000002 },\n+  { 5.9697347526822483e+184, 100, 100, \n+\t  -0.30000000000000004 },\n+  { 8.6585879147526714e+185, 100, 100, \n+\t  -0.19999999999999996 },\n+  { 4.0331571908057011e+186, 100, 100, \n+\t  -0.099999999999999978 },\n+  { 6.6663086700729543e+186, 100, 100, \n+\t  0.0000000000000000 },\n+  { 4.0331571908057011e+186, 100, 100, \n+\t  0.10000000000000009 },\n+  { 8.6585879147526714e+185, 100, 100, \n+\t  0.19999999999999996 },\n+  { 5.9697347526822483e+184, 100, 100, \n+\t  0.30000000000000004 },\n+  { 1.0910627330458913e+183, 100, 100, \n+\t  0.39999999999999991 },\n+  { 3.7752749682889513e+180, 100, 100, \n+\t  0.50000000000000000 },\n+  { 1.3579510590289000e+177, 100, 100, \n+\t  0.60000000000000009 },\n+  { 1.5936546850595123e+172, 100, 100, \n+\t  0.69999999999999996 },\n+  { 4.3552236041585515e+164, 100, 100, \n+\t  0.80000000000000004 },\n+  { 5.7751792255761289e+150, 100, 100, \n+\t  0.89999999999999991 },\n+  { 0.0000000000000000, 100, 100, \n+\t  1.0000000000000000 },\n+};\n+const double toler036 = 2.5000000000000020e-13;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_assoc_legendre<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+  \t {\n+\tconst Tp f = std::assoc_legendre(data[i].l, data[i].m,\n+\t\t     data[i].x);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  test(data009, toler009);\n+  test(data010, toler010);\n+  test(data011, toler011);\n+  test(data012, toler012);\n+  test(data013, toler013);\n+  test(data014, toler014);\n+  test(data015, toler015);\n+  test(data016, toler016);\n+  test(data017, toler017);\n+  test(data018, toler018);\n+  test(data019, toler019);\n+  test(data020, toler020);\n+  test(data021, toler021);\n+  test(data022, toler022);\n+  test(data023, toler023);\n+  test(data024, toler024);\n+  test(data025, toler025);\n+  test(data026, toler026);\n+  test(data027, toler027);\n+  test(data028, toler028);\n+  test(data029, toler029);\n+  test(data030, toler030);\n+  test(data031, toler031);\n+  test(data032, toler032);\n+  test(data033, toler033);\n+  test(data034, toler034);\n+  test(data035, toler035);\n+  test(data036, toler036);\n+  return 0;\n+}"}, {"sha": "5c7e6510a4946a881efe6b7212305e997dc1f2bf", "filename": "libstdc++-v3/testsuite/special_functions/02_assoc_legendre/compile.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.2 assoc_legendre\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+  unsigned int l = 2, m = 1;\n+\n+  std::assoc_legendre(l, m, xf);\n+  std::assoc_legendref(l, m, xf);\n+  std::assoc_legendre(l, m, xd);\n+  std::assoc_legendre(l, m, xl);\n+  std::assoc_legendrel(l, m, xl);\n+\n+  return;\n+}\n+"}, {"sha": "7561952e66018036ad331c5dbdc7c1abdd6abd5c", "filename": "libstdc++-v3/testsuite/special_functions/02_assoc_legendre/compile_2.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.2 assoc_legendre\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+  unsigned int l = 2, m = 1;\n+\n+  assoc_legendre(l, m, xf);\n+  assoc_legendref(l, m, xf);\n+  assoc_legendre(l, m, xd);\n+  assoc_legendre(l, m, xl);\n+  assoc_legendrel(l, m, xl);\n+\n+  return;\n+}\n+"}, {"sha": "3dc9f33a898969485d933f2121218c7401977c04", "filename": "libstdc++-v3/testsuite/special_functions/03_beta/check_nan.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,88 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.3 beta\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float yf = 0.0F;\n+  double yd = 0.0;\n+  long double yl = 0.0L;\n+\n+  float a = std::beta(xf, yf);\n+  float b = std::betaf(xf, yf);\n+  double c = std::beta(xd, yd);\n+  long double d = std::beta(xl, yl);\n+  long double e = std::betal(xl, yl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+void\n+test02()\n+{\n+  float xf = 1.0F;\n+  double xd = 1.0;\n+  long double xl = 1.0L;\n+\n+  float yf = std::numeric_limits<float>::quiet_NaN();\n+  double yd = std::numeric_limits<double>::quiet_NaN();\n+  long double yl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float a = std::beta(xf, yf);\n+  float b = std::betaf(xf, yf);\n+  double c = std::beta(xd, yd);\n+  long double d = std::beta(xl, yl);\n+  long double e = std::betal(xl, yl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}\n+"}, {"sha": "9cc0b3528e8524f835d42835c8f7662bf5ce622c", "filename": "libstdc++-v3/testsuite/special_functions/03_beta/check_value.cc", "status": "added", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,271 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  beta\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+\n+// Test data for x=10.000000000000000.\n+// max(|f - f_GSL|): 2.1175823681357508e-21\n+// max(|f - f_GSL| / |f_GSL|): 9.9466182377295583e-14\n+const testcase_beta<double>\n+data001[10] =\n+{\n+  { 1.0825088224469029e-06, 10.000000000000000, 10.000000000000000 },\n+  { 4.9925087406346778e-09, 10.000000000000000, 20.000000000000000 },\n+  { 1.5729567312509485e-10, 10.000000000000000, 30.000000000000000 },\n+  { 1.2168673582561288e-11, 10.000000000000000, 40.000000000000000 },\n+  { 1.5916380099863291e-12, 10.000000000000000, 50.000000000000000 },\n+  { 2.9408957938463963e-13, 10.000000000000000, 60.000000000000000 },\n+  { 6.9411637980691676e-14, 10.000000000000000, 70.000000000000000 },\n+  { 1.9665612972502651e-14, 10.000000000000000, 80.000000000000000 },\n+  { 6.4187824828154399e-15, 10.000000000000000, 90.000000000000000 },\n+  { 2.3455339739604842e-15, 10.000000000000000, 100.00000000000000 },\n+};\n+const double toler001 = 5.0000000000000029e-12;\n+\n+// Test data for x=20.000000000000000.\n+// max(|f - f_GSL|): 1.9025154088719637e-23\n+// max(|f - f_GSL| / |f_GSL|): 3.8107402664859521e-15\n+const testcase_beta<double>\n+data002[10] =\n+{\n+  { 4.9925087406346778e-09, 20.000000000000000, 10.000000000000000 },\n+  { 7.2544445519248436e-13, 20.000000000000000, 20.000000000000000 },\n+  { 1.7681885473062028e-15, 20.000000000000000, 30.000000000000000 },\n+  { 1.7891885039182335e-17, 20.000000000000000, 40.000000000000000 },\n+  { 4.3240677875623635e-19, 20.000000000000000, 50.000000000000000 },\n+  { 1.8857342309689050e-20, 20.000000000000000, 60.000000000000000 },\n+  { 1.2609804003539998e-21, 20.000000000000000, 70.000000000000000 },\n+  { 1.1660809542079041e-22, 20.000000000000000, 80.000000000000000 },\n+  { 1.3907944279729071e-23, 20.000000000000000, 90.000000000000000 },\n+  { 2.0365059099917614e-24, 20.000000000000000, 100.00000000000000 },\n+};\n+const double toler002 = 2.5000000000000020e-13;\n+\n+// Test data for x=30.000000000000000.\n+// max(|f - f_GSL|): 9.0472879497987402e-25\n+// max(|f - f_GSL| / |f_GSL|): 5.7517716603708290e-15\n+const testcase_beta<double>\n+data003[10] =\n+{\n+  { 1.5729567312509485e-10, 30.000000000000000, 10.000000000000000 },\n+  { 1.7681885473062028e-15, 30.000000000000000, 20.000000000000000 },\n+  { 5.6370779640482451e-19, 30.000000000000000, 30.000000000000000 },\n+  { 1.0539424603796547e-21, 30.000000000000000, 40.000000000000000 },\n+  { 6.0118197777273836e-24, 30.000000000000000, 50.000000000000000 },\n+  { 7.4279528553260165e-26, 30.000000000000000, 60.000000000000000 },\n+  { 1.6212207780604767e-27, 30.000000000000000, 70.000000000000000 },\n+  { 5.4783729715317616e-29, 30.000000000000000, 80.000000000000000 },\n+  { 2.6183005659681346e-30, 30.000000000000000, 90.000000000000000 },\n+  { 1.6587948222122229e-31, 30.000000000000000, 100.00000000000000 },\n+};\n+const double toler003 = 5.0000000000000039e-13;\n+\n+// Test data for x=40.000000000000000.\n+// max(|f - f_GSL|): 2.6495628995839168e-25\n+// max(|f - f_GSL| / |f_GSL|): 2.1773637706750213e-14\n+const testcase_beta<double>\n+data004[10] =\n+{\n+  { 1.2168673582561288e-11, 40.000000000000000, 10.000000000000000 },\n+  { 1.7891885039182335e-17, 40.000000000000000, 20.000000000000000 },\n+  { 1.0539424603796547e-21, 40.000000000000000, 30.000000000000000 },\n+  { 4.6508509140090659e-25, 40.000000000000000, 40.000000000000000 },\n+  { 7.5161712118557719e-28, 40.000000000000000, 50.000000000000000 },\n+  { 3.0311331979886071e-30, 40.000000000000000, 60.000000000000000 },\n+  { 2.4175035070466313e-32, 40.000000000000000, 70.000000000000000 },\n+  { 3.2734839142758369e-34, 40.000000000000000, 80.000000000000000 },\n+  { 6.7690629601315579e-36, 40.000000000000000, 90.000000000000000 },\n+  { 1.9797337118812366e-37, 40.000000000000000, 100.00000000000000 },\n+};\n+const double toler004 = 2.5000000000000015e-12;\n+\n+// Test data for x=50.000000000000000.\n+// max(|f - f_GSL|): 2.4603755039546938e-32\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_beta<double>\n+data005[10] =\n+{\n+  { 1.5916380099863291e-12, 50.000000000000000, 10.000000000000000 },\n+  { 4.3240677875623635e-19, 50.000000000000000, 20.000000000000000 },\n+  { 6.0118197777273836e-24, 50.000000000000000, 30.000000000000000 },\n+  { 7.5161712118557719e-28, 50.000000000000000, 40.000000000000000 },\n+  { 3.9646612085674138e-31, 50.000000000000000, 50.000000000000000 },\n+  { 5.8425643906418403e-34, 50.000000000000000, 60.000000000000000 },\n+  { 1.8672362180783552e-36, 50.000000000000000, 70.000000000000000 },\n+  { 1.0939382296458962e-38, 50.000000000000000, 80.000000000000000 },\n+  { 1.0442781609881063e-40, 50.000000000000000, 90.000000000000000 },\n+  { 1.4904121110954370e-42, 50.000000000000000, 100.00000000000000 },\n+};\n+const double toler005 = 2.5000000000000020e-13;\n+\n+// Test data for x=60.000000000000000.\n+// max(|f - f_GSL|): 2.1911400503418824e-26\n+// max(|f - f_GSL| / |f_GSL|): 7.4505871813842522e-14\n+const testcase_beta<double>\n+data006[10] =\n+{\n+  { 2.9408957938463963e-13, 60.000000000000000, 10.000000000000000 },\n+  { 1.8857342309689050e-20, 60.000000000000000, 20.000000000000000 },\n+  { 7.4279528553260165e-26, 60.000000000000000, 30.000000000000000 },\n+  { 3.0311331979886071e-30, 60.000000000000000, 40.000000000000000 },\n+  { 5.8425643906418403e-34, 60.000000000000000, 50.000000000000000 },\n+  { 3.4501231469782229e-37, 60.000000000000000, 60.000000000000000 },\n+  { 4.7706855386086599e-40, 60.000000000000000, 70.000000000000000 },\n+  { 1.2902663809722593e-42, 60.000000000000000, 80.000000000000000 },\n+  { 6.0105571058570508e-45, 60.000000000000000, 90.000000000000000 },\n+  { 4.3922898898347209e-47, 60.000000000000000, 100.00000000000000 },\n+};\n+const double toler006 = 5.0000000000000029e-12;\n+\n+// Test data for x=70.000000000000000.\n+// max(|f - f_GSL|): 6.9041106424942953e-27\n+// max(|f - f_GSL| / |f_GSL|): 9.9466182377295583e-14\n+const testcase_beta<double>\n+data007[10] =\n+{\n+  { 6.9411637980691676e-14, 70.000000000000000, 10.000000000000000 },\n+  { 1.2609804003539998e-21, 70.000000000000000, 20.000000000000000 },\n+  { 1.6212207780604767e-27, 70.000000000000000, 30.000000000000000 },\n+  { 2.4175035070466313e-32, 70.000000000000000, 40.000000000000000 },\n+  { 1.8672362180783552e-36, 70.000000000000000, 50.000000000000000 },\n+  { 4.7706855386086599e-40, 70.000000000000000, 60.000000000000000 },\n+  { 3.0453137143486369e-43, 70.000000000000000, 70.000000000000000 },\n+  { 4.0192274082013779e-46, 70.000000000000000, 80.000000000000000 },\n+  { 9.5865870063501807e-49, 70.000000000000000, 90.000000000000000 },\n+  { 3.7409127305819802e-51, 70.000000000000000, 100.00000000000000 },\n+};\n+const double toler007 = 5.0000000000000029e-12;\n+\n+// Test data for x=80.000000000000000.\n+// max(|f - f_GSL|): 1.6786960063103131e-27\n+// max(|f - f_GSL| / |f_GSL|): 8.5361997546557118e-14\n+const testcase_beta<double>\n+data008[10] =\n+{\n+  { 1.9665612972502651e-14, 80.000000000000000, 10.000000000000000 },\n+  { 1.1660809542079041e-22, 80.000000000000000, 20.000000000000000 },\n+  { 5.4783729715317616e-29, 80.000000000000000, 30.000000000000000 },\n+  { 3.2734839142758369e-34, 80.000000000000000, 40.000000000000000 },\n+  { 1.0939382296458962e-38, 80.000000000000000, 50.000000000000000 },\n+  { 1.2902663809722593e-42, 80.000000000000000, 60.000000000000000 },\n+  { 4.0192274082013779e-46, 80.000000000000000, 70.000000000000000 },\n+  { 2.7160590828669411e-49, 80.000000000000000, 80.000000000000000 },\n+  { 3.4593773902125368e-52, 80.000000000000000, 90.000000000000000 },\n+  { 7.4807039968503468e-55, 80.000000000000000, 100.00000000000000 },\n+};\n+const double toler008 = 5.0000000000000029e-12;\n+\n+// Test data for x=90.000000000000000.\n+// max(|f - f_GSL|): 2.7373473411169110e-28\n+// max(|f - f_GSL| / |f_GSL|): 4.2645896608047095e-14\n+const testcase_beta<double>\n+data009[10] =\n+{\n+  { 6.4187824828154399e-15, 90.000000000000000, 10.000000000000000 },\n+  { 1.3907944279729071e-23, 90.000000000000000, 20.000000000000000 },\n+  { 2.6183005659681346e-30, 90.000000000000000, 30.000000000000000 },\n+  { 6.7690629601315579e-36, 90.000000000000000, 40.000000000000000 },\n+  { 1.0442781609881063e-40, 90.000000000000000, 50.000000000000000 },\n+  { 6.0105571058570508e-45, 90.000000000000000, 60.000000000000000 },\n+  { 9.5865870063501807e-49, 90.000000000000000, 70.000000000000000 },\n+  { 3.4593773902125368e-52, 90.000000000000000, 80.000000000000000 },\n+  { 2.4416737907558032e-55, 90.000000000000000, 90.000000000000000 },\n+  { 3.0238531916564246e-58, 90.000000000000000, 100.00000000000000 },\n+};\n+const double toler009 = 2.5000000000000015e-12;\n+\n+// Test data for x=100.00000000000000.\n+// max(|f - f_GSL|): 1.6960509462251754e-29\n+// max(|f - f_GSL| / |f_GSL|): 7.2309800883478868e-15\n+const testcase_beta<double>\n+data010[10] =\n+{\n+  { 2.3455339739604842e-15, 100.00000000000000, 10.000000000000000 },\n+  { 2.0365059099917614e-24, 100.00000000000000, 20.000000000000000 },\n+  { 1.6587948222122229e-31, 100.00000000000000, 30.000000000000000 },\n+  { 1.9797337118812366e-37, 100.00000000000000, 40.000000000000000 },\n+  { 1.4904121110954370e-42, 100.00000000000000, 50.000000000000000 },\n+  { 4.3922898898347209e-47, 100.00000000000000, 60.000000000000000 },\n+  { 3.7409127305819802e-51, 100.00000000000000, 70.000000000000000 },\n+  { 7.4807039968503468e-55, 100.00000000000000, 80.000000000000000 },\n+  { 3.0238531916564246e-58, 100.00000000000000, 90.000000000000000 },\n+  { 2.2087606931991853e-61, 100.00000000000000, 100.00000000000000 },\n+};\n+const double toler010 = 5.0000000000000039e-13;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_beta<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::beta(data[i].x, data[i].y);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  test(data009, toler009);\n+  test(data010, toler010);\n+  return 0;\n+}"}, {"sha": "eb5e4d02fc3f71df5fd86ecb7abb6564432ea5b5", "filename": "libstdc++-v3/testsuite/special_functions/03_beta/compile.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.3 beta\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F, yf = 0.5F;\n+  double xd = 0.5, yd = 0.5;\n+  long double xl = 0.5L, yl = 0.5L;\n+\n+  std::beta(xf, yf);\n+  std::betaf(xf, yf);\n+  std::beta(xd, yd);\n+  std::beta(xl, yl);\n+  std::betal(xl, yl);\n+\n+  return;\n+}\n+"}, {"sha": "c614e4933b4cfeb48d4a0c16adaa5bd954f205cd", "filename": "libstdc++-v3/testsuite/special_functions/03_beta/compile_2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.3 beta\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F, yf = 0.5F;\n+  double xd = 0.5, yd = 0.5;\n+  long double xl = 0.5L, yl = 0.5L;\n+\n+  beta(xf, yf);\n+  betaf(xf, yf);\n+  beta(xd, yd);\n+  beta(xl, yl);\n+  betal(xl, yl);\n+\n+  return;\n+}\n+"}, {"sha": "33e63c5c400b560f2fed0d6b6e2b1576bf9c8cf8", "filename": "libstdc++-v3/testsuite/special_functions/04_comp_ellint_1/check_nan.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,56 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.4 comp_ellint_1\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float kf = std::numeric_limits<float>::quiet_NaN();\n+  double kd = std::numeric_limits<double>::quiet_NaN();\n+  long double kl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float a = std::comp_ellint_1(kf);\n+  float b = std::comp_ellint_1f(kf);\n+  double c = std::comp_ellint_1(kd);\n+  long double d = std::comp_ellint_1(kl);\n+  long double e = std::comp_ellint_1l(kl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "b2bf414bf0f15e974279b344c6aa759f58818239", "filename": "libstdc++-v3/testsuite/special_functions/04_comp_ellint_1/check_value.cc", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,100 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  comp_ellint_1\n+\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+// Test data.\n+// max(|f - f_GSL|): 6.6613381477509392e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.0617918857203532e-16\n+const testcase_comp_ellint_1<double>\n+data001[19] =\n+{\n+  { 2.2805491384227703, -0.90000000000000002 },\n+  { 1.9953027776647296, -0.80000000000000004 },\n+  { 1.8456939983747236, -0.69999999999999996 },\n+  { 1.7507538029157526, -0.59999999999999998 },\n+  { 1.6857503548125963, -0.50000000000000000 },\n+  { 1.6399998658645112, -0.40000000000000002 },\n+  { 1.6080486199305128, -0.30000000000000004 },\n+  { 1.5868678474541660, -0.19999999999999996 },\n+  { 1.5747455615173562, -0.099999999999999978 },\n+  { 1.5707963267948966, 0.0000000000000000 },\n+  { 1.5747455615173562, 0.10000000000000009 },\n+  { 1.5868678474541660, 0.19999999999999996 },\n+  { 1.6080486199305128, 0.30000000000000004 },\n+  { 1.6399998658645112, 0.39999999999999991 },\n+  { 1.6857503548125963, 0.50000000000000000 },\n+  { 1.7507538029157526, 0.60000000000000009 },\n+  { 1.8456939983747236, 0.69999999999999996 },\n+  { 1.9953027776647296, 0.80000000000000004 },\n+  { 2.2805491384227703, 0.89999999999999991 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_comp_ellint_1<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::comp_ellint_1(data[i].k);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  return 0;\n+}"}, {"sha": "cd95b6b9a97ffd78b979bacac277a965d3bf27e5", "filename": "libstdc++-v3/testsuite/special_functions/04_comp_ellint_1/compile.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.4 comp_ellint_1\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float kf = 0.5F;\n+  double kd = 0.5;\n+  long double kl = 0.5L;\n+\n+  std::comp_ellint_1(kf);\n+  std::comp_ellint_1f(kf);\n+  std::comp_ellint_1(kd);\n+  std::comp_ellint_1(kl);\n+  std::comp_ellint_1l(kl);\n+\n+  return;\n+}\n+"}, {"sha": "08528af471fa56871e666f85ee3db99df6615a68", "filename": "libstdc++-v3/testsuite/special_functions/04_comp_ellint_1/compile_2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.4 comp_ellint_1\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float kf = 0.5F;\n+  double kd = 0.5;\n+  long double kl = 0.5L;\n+\n+  comp_ellint_1(kf);\n+  comp_ellint_1f(kf);\n+  comp_ellint_1(kd);\n+  comp_ellint_1(kl);\n+  comp_ellint_1l(kl);\n+\n+  return;\n+}\n+"}, {"sha": "e4a912f1b054de39cb71975a3f3a1899c96b3c24", "filename": "libstdc++-v3/testsuite/special_functions/05_comp_ellint_2/check_nan.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,56 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.5 comp_ellint_2\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float kf = std::numeric_limits<float>::quiet_NaN();\n+  double kd = std::numeric_limits<double>::quiet_NaN();\n+  long double kl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float a = std::comp_ellint_2(kf);\n+  float b = std::comp_ellint_2f(kf);\n+  double c = std::comp_ellint_2(kd);\n+  long double d = std::comp_ellint_2(kl);\n+  long double e = std::comp_ellint_2l(kl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "649b8e55767efef6ee9e907ef8df761ccda7dfe6", "filename": "libstdc++-v3/testsuite/special_functions/05_comp_ellint_2/check_value.cc", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,100 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  comp_ellint_2\n+\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+// Test data.\n+// max(|f - f_GSL|): 6.6613381477509392e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.4233707954398090e-16\n+const testcase_comp_ellint_2<double>\n+data001[19] =\n+{\n+  { 1.1716970527816140, -0.90000000000000002 },\n+  { 1.2763499431699064, -0.80000000000000004 },\n+  { 1.3556611355719554, -0.69999999999999996 },\n+  { 1.4180833944487241, -0.59999999999999998 },\n+  { 1.4674622093394274, -0.50000000000000000 },\n+  { 1.5059416123600402, -0.40000000000000002 },\n+  { 1.5348334649232491, -0.30000000000000004 },\n+  { 1.5549685462425291, -0.19999999999999996 },\n+  { 1.5668619420216685, -0.099999999999999978 },\n+  { 1.5707963267948966, 0.0000000000000000 },\n+  { 1.5668619420216685, 0.10000000000000009 },\n+  { 1.5549685462425291, 0.19999999999999996 },\n+  { 1.5348334649232491, 0.30000000000000004 },\n+  { 1.5059416123600404, 0.39999999999999991 },\n+  { 1.4674622093394274, 0.50000000000000000 },\n+  { 1.4180833944487241, 0.60000000000000009 },\n+  { 1.3556611355719554, 0.69999999999999996 },\n+  { 1.2763499431699064, 0.80000000000000004 },\n+  { 1.1716970527816144, 0.89999999999999991 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_comp_ellint_2<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::comp_ellint_2(data[i].k);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  return 0;\n+}"}, {"sha": "a00a031c5cb8843c5fb40b27ac54fa35d91421f8", "filename": "libstdc++-v3/testsuite/special_functions/05_comp_ellint_2/compile.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.5 comp_ellint_2\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float kf = 0.5F;\n+  double kd = 0.5;\n+  long double kl = 0.5L;\n+\n+  std::comp_ellint_2(kf);\n+  std::comp_ellint_2f(kf);\n+  std::comp_ellint_2(kd);\n+  std::comp_ellint_2(kl);\n+  std::comp_ellint_2l(kl);\n+\n+  return;\n+}\n+"}, {"sha": "6cbe32d2c9adf4e0022da32fbccb3ac4c4d47b33", "filename": "libstdc++-v3/testsuite/special_functions/05_comp_ellint_2/compile_2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.5 comp_ellint_2\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float kf = 0.5F;\n+  double kd = 0.5;\n+  long double kl = 0.5L;\n+\n+  comp_ellint_2(kf);\n+  comp_ellint_2f(kf);\n+  comp_ellint_2(kd);\n+  comp_ellint_2(kl);\n+  comp_ellint_2l(kl);\n+\n+  return;\n+}\n+"}, {"sha": "0bc697cf554c31bef819dcd8f1d572dc333a6c84", "filename": "libstdc++-v3/testsuite/special_functions/06_comp_ellint_3/check_nan.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,88 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.6 comp_ellint_3\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float kf = std::numeric_limits<float>::quiet_NaN();\n+  double kd = std::numeric_limits<double>::quiet_NaN();\n+  long double kl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float nuf = 0.0F;\n+  double nud = 0.0;\n+  long double nul = 0.0L;\n+\n+  float a = std::comp_ellint_3(kf, nuf);\n+  float b = std::comp_ellint_3f(kf, nuf);\n+  double c = std::comp_ellint_3(kd, nud);\n+  long double d = std::comp_ellint_3(kl, nul);\n+  long double e = std::comp_ellint_3l(kl, nul);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+void\n+test02()\n+{\n+  float kf = 1.0F;\n+  double kd = 1.0;\n+  long double kl = 1.0L;\n+\n+  float nuf = std::numeric_limits<float>::quiet_NaN();\n+  double nud = std::numeric_limits<double>::quiet_NaN();\n+  long double nul = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float a = std::comp_ellint_3(kf, nuf);\n+  float b = std::comp_ellint_3f(kf, nuf);\n+  double c = std::comp_ellint_3(kd, nud);\n+  long double d = std::comp_ellint_3(kl, nul);\n+  long double e = std::comp_ellint_3l(kl, nul);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}\n+"}, {"sha": "694bf42fbd69876928b771fedc8f6fab8888dcbe", "filename": "libstdc++-v3/testsuite/special_functions/06_comp_ellint_3/check_value.cc", "status": "added", "additions": 451, "deletions": 0, "changes": 451, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,451 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  comp_ellint_3\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+\n+// Test data for k=-0.90000000000000002.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 2.6751587294384150e-16\n+const testcase_comp_ellint_3<double>\n+data001[10] =\n+{\n+  { 2.2805491384227703, -0.90000000000000002, 0.0000000000000000 },\n+  { 2.1537868513875287, -0.90000000000000002, 0.10000000000000001 },\n+  { 2.0443194576468890, -0.90000000000000002, 0.20000000000000001 },\n+  { 1.9486280260314426, -0.90000000000000002, 0.29999999999999999 },\n+  { 1.8641114227238349, -0.90000000000000002, 0.40000000000000002 },\n+  { 1.7888013241937861, -0.90000000000000002, 0.50000000000000000 },\n+  { 1.7211781128919523, -0.90000000000000002, 0.59999999999999998 },\n+  { 1.6600480747670940, -0.90000000000000002, 0.69999999999999996 },\n+  { 1.6044591960982202, -0.90000000000000002, 0.80000000000000004 },\n+  { 1.5536420236310946, -0.90000000000000002, 0.90000000000000002 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.80000000000000004.\n+// max(|f - f_GSL|): 2.2204460492503131e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.5960830388244336e-16\n+const testcase_comp_ellint_3<double>\n+data002[10] =\n+{\n+  { 1.9953027776647296, -0.80000000000000004, 0.0000000000000000 },\n+  { 1.8910755418379521, -0.80000000000000004, 0.10000000000000001 },\n+  { 1.8007226661734588, -0.80000000000000004, 0.20000000000000001 },\n+  { 1.7214611048717301, -0.80000000000000004, 0.29999999999999999 },\n+  { 1.6512267838651289, -0.80000000000000004, 0.40000000000000002 },\n+  { 1.5884528947755532, -0.80000000000000004, 0.50000000000000000 },\n+  { 1.5319262547427865, -0.80000000000000004, 0.59999999999999998 },\n+  { 1.4806912324625332, -0.80000000000000004, 0.69999999999999996 },\n+  { 1.4339837018309471, -0.80000000000000004, 0.80000000000000004 },\n+  { 1.3911845406776222, -0.80000000000000004, 0.90000000000000002 },\n+};\n+const double toler002 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.69999999999999996.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.3074070916136724e-16\n+const testcase_comp_ellint_3<double>\n+data003[10] =\n+{\n+  { 1.8456939983747236, -0.69999999999999996, 0.0000000000000000 },\n+  { 1.7528050171757608, -0.69999999999999996, 0.10000000000000001 },\n+  { 1.6721098780092145, -0.69999999999999996, 0.20000000000000001 },\n+  { 1.6011813647733213, -0.69999999999999996, 0.29999999999999999 },\n+  { 1.5382162002954762, -0.69999999999999996, 0.40000000000000002 },\n+  { 1.4818433192178544, -0.69999999999999996, 0.50000000000000000 },\n+  { 1.4309994736080540, -0.69999999999999996, 0.59999999999999998 },\n+  { 1.3848459188329196, -0.69999999999999996, 0.69999999999999996 },\n+  { 1.3427110650397531, -0.69999999999999996, 0.80000000000000004 },\n+  { 1.3040500499695913, -0.69999999999999996, 0.90000000000000002 },\n+};\n+const double toler003 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.59999999999999998.\n+// max(|f - f_GSL|): 6.6613381477509392e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.1891472451898755e-16\n+const testcase_comp_ellint_3<double>\n+data004[10] =\n+{\n+  { 1.7507538029157526, -0.59999999999999998, 0.0000000000000000 },\n+  { 1.6648615773343014, -0.59999999999999998, 0.10000000000000001 },\n+  { 1.5901418016279374, -0.59999999999999998, 0.20000000000000001 },\n+  { 1.5243814243493585, -0.59999999999999998, 0.29999999999999999 },\n+  { 1.4659345278069984, -0.59999999999999998, 0.40000000000000002 },\n+  { 1.4135484285693078, -0.59999999999999998, 0.50000000000000000 },\n+  { 1.3662507535812816, -0.59999999999999998, 0.59999999999999998 },\n+  { 1.3232737468822813, -0.59999999999999998, 0.69999999999999996 },\n+  { 1.2840021261752192, -0.59999999999999998, 0.80000000000000004 },\n+  { 1.2479362973851875, -0.59999999999999998, 0.90000000000000002 },\n+};\n+const double toler004 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.50000000000000000.\n+// max(|f - f_GSL|): 2.2204460492503131e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.7857620325589816e-16\n+const testcase_comp_ellint_3<double>\n+data005[10] =\n+{\n+  { 1.6857503548125963, -0.50000000000000000, 0.0000000000000000 },\n+  { 1.6045524936084892, -0.50000000000000000, 0.10000000000000001 },\n+  { 1.5338490483665983, -0.50000000000000000, 0.20000000000000001 },\n+  { 1.4715681939859637, -0.50000000000000000, 0.29999999999999999 },\n+  { 1.4161679518465340, -0.50000000000000000, 0.40000000000000002 },\n+  { 1.3664739530045971, -0.50000000000000000, 0.50000000000000000 },\n+  { 1.3215740290190876, -0.50000000000000000, 0.59999999999999998 },\n+  { 1.2807475181182502, -0.50000000000000000, 0.69999999999999996 },\n+  { 1.2434165408189539, -0.50000000000000000, 0.80000000000000004 },\n+  { 1.2091116095504744, -0.50000000000000000, 0.90000000000000002 },\n+};\n+const double toler005 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.40000000000000002.\n+// max(|f - f_GSL|): 8.8817841970012523e-16\n+// max(|f - f_GSL| / |f_GSL|): 6.1925080711125793e-16\n+const testcase_comp_ellint_3<double>\n+data006[10] =\n+{\n+  { 1.6399998658645112, -0.40000000000000002, 0.0000000000000000 },\n+  { 1.5620566886683604, -0.40000000000000002, 0.10000000000000001 },\n+  { 1.4941414344266770, -0.40000000000000002, 0.20000000000000001 },\n+  { 1.4342789859950078, -0.40000000000000002, 0.29999999999999999 },\n+  { 1.3809986210732901, -0.40000000000000002, 0.40000000000000002 },\n+  { 1.3331797176377398, -0.40000000000000002, 0.50000000000000000 },\n+  { 1.2899514672527024, -0.40000000000000002, 0.59999999999999998 },\n+  { 1.2506255923253344, -0.40000000000000002, 0.69999999999999996 },\n+  { 1.2146499565727209, -0.40000000000000002, 0.80000000000000004 },\n+  { 1.1815758115929846, -0.40000000000000002, 0.90000000000000002 },\n+};\n+const double toler006 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.30000000000000004.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.8209844149902043e-16\n+const testcase_comp_ellint_3<double>\n+data007[10] =\n+{\n+  { 1.6080486199305128, -0.30000000000000004, 0.0000000000000000 },\n+  { 1.5323534693557528, -0.30000000000000004, 0.10000000000000001 },\n+  { 1.4663658145259877, -0.30000000000000004, 0.20000000000000001 },\n+  { 1.4081767433479091, -0.30000000000000004, 0.29999999999999999 },\n+  { 1.3563643538969763, -0.30000000000000004, 0.40000000000000002 },\n+  { 1.3098448759814962, -0.30000000000000004, 0.50000000000000000 },\n+  { 1.2677758800420669, -0.30000000000000004, 0.59999999999999998 },\n+  { 1.2294913236274982, -0.30000000000000004, 0.69999999999999996 },\n+  { 1.1944567571590048, -0.30000000000000004, 0.80000000000000004 },\n+  { 1.1622376896064914, -0.30000000000000004, 0.90000000000000002 },\n+};\n+const double toler007 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.19999999999999996.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.8637687241174905e-16\n+const testcase_comp_ellint_3<double>\n+data008[10] =\n+{\n+  { 1.5868678474541660, -0.19999999999999996, 0.0000000000000000 },\n+  { 1.5126513474261087, -0.19999999999999996, 0.10000000000000001 },\n+  { 1.4479323932249564, -0.19999999999999996, 0.20000000000000001 },\n+  { 1.3908453514752477, -0.19999999999999996, 0.29999999999999999 },\n+  { 1.3400002519661005, -0.19999999999999996, 0.40000000000000002 },\n+  { 1.2943374404397372, -0.19999999999999996, 0.50000000000000000 },\n+  { 1.2530330675914556, -0.19999999999999996, 0.59999999999999998 },\n+  { 1.2154356555075863, -0.19999999999999996, 0.69999999999999996 },\n+  { 1.1810223448909909, -0.19999999999999996, 0.80000000000000004 },\n+  { 1.1493679916141861, -0.19999999999999996, 0.90000000000000002 },\n+};\n+const double toler008 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.099999999999999978.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.8887517676790089e-16\n+const testcase_comp_ellint_3<double>\n+data009[10] =\n+{\n+  { 1.5747455615173562, -0.099999999999999978, 0.0000000000000000 },\n+  { 1.5013711111199950, -0.099999999999999978, 0.10000000000000001 },\n+  { 1.4373749386463430, -0.099999999999999978, 0.20000000000000001 },\n+  { 1.3809159606704959, -0.099999999999999978, 0.29999999999999999 },\n+  { 1.3306223265207477, -0.099999999999999978, 0.40000000000000002 },\n+  { 1.2854480708580160, -0.099999999999999978, 0.50000000000000000 },\n+  { 1.2445798942989255, -0.099999999999999978, 0.59999999999999998 },\n+  { 1.2073745911083185, -0.099999999999999978, 0.69999999999999996 },\n+  { 1.1733158866987732, -0.099999999999999978, 0.80000000000000004 },\n+  { 1.1419839485283374, -0.099999999999999978, 0.90000000000000002 },\n+};\n+const double toler009 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.0000000000000000.\n+// max(|f - f_GSL|): 2.2204460492503131e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.6725702444488137e-16\n+const testcase_comp_ellint_3<double>\n+data010[10] =\n+{\n+  { 1.5707963267948966, 0.0000000000000000, 0.0000000000000000 },\n+  { 1.4976955329233277, 0.0000000000000000, 0.10000000000000001 },\n+  { 1.4339343023863691, 0.0000000000000000, 0.20000000000000001 },\n+  { 1.3776795151134889, 0.0000000000000000, 0.29999999999999999 },\n+  { 1.3275651989026320, 0.0000000000000000, 0.40000000000000002 },\n+  { 1.2825498301618641, 0.0000000000000000, 0.50000000000000000 },\n+  { 1.2418235332245127, 0.0000000000000000, 0.59999999999999998 },\n+  { 1.2047457872617382, 0.0000000000000000, 0.69999999999999996 },\n+  { 1.1708024551734544, 0.0000000000000000, 0.80000000000000004 },\n+  { 1.1395754288497419, 0.0000000000000000, 0.90000000000000002 },\n+};\n+const double toler010 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.10000000000000009.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.8887517676790089e-16\n+const testcase_comp_ellint_3<double>\n+data011[10] =\n+{\n+  { 1.5747455615173562, 0.10000000000000009, 0.0000000000000000 },\n+  { 1.5013711111199950, 0.10000000000000009, 0.10000000000000001 },\n+  { 1.4373749386463430, 0.10000000000000009, 0.20000000000000001 },\n+  { 1.3809159606704959, 0.10000000000000009, 0.29999999999999999 },\n+  { 1.3306223265207477, 0.10000000000000009, 0.40000000000000002 },\n+  { 1.2854480708580160, 0.10000000000000009, 0.50000000000000000 },\n+  { 1.2445798942989255, 0.10000000000000009, 0.59999999999999998 },\n+  { 1.2073745911083185, 0.10000000000000009, 0.69999999999999996 },\n+  { 1.1733158866987732, 0.10000000000000009, 0.80000000000000004 },\n+  { 1.1419839485283374, 0.10000000000000009, 0.90000000000000002 },\n+};\n+const double toler011 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.19999999999999996.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.8637687241174905e-16\n+const testcase_comp_ellint_3<double>\n+data012[10] =\n+{\n+  { 1.5868678474541660, 0.19999999999999996, 0.0000000000000000 },\n+  { 1.5126513474261087, 0.19999999999999996, 0.10000000000000001 },\n+  { 1.4479323932249564, 0.19999999999999996, 0.20000000000000001 },\n+  { 1.3908453514752477, 0.19999999999999996, 0.29999999999999999 },\n+  { 1.3400002519661005, 0.19999999999999996, 0.40000000000000002 },\n+  { 1.2943374404397372, 0.19999999999999996, 0.50000000000000000 },\n+  { 1.2530330675914556, 0.19999999999999996, 0.59999999999999998 },\n+  { 1.2154356555075863, 0.19999999999999996, 0.69999999999999996 },\n+  { 1.1810223448909909, 0.19999999999999996, 0.80000000000000004 },\n+  { 1.1493679916141861, 0.19999999999999996, 0.90000000000000002 },\n+};\n+const double toler012 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.30000000000000004.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.8209844149902043e-16\n+const testcase_comp_ellint_3<double>\n+data013[10] =\n+{\n+  { 1.6080486199305128, 0.30000000000000004, 0.0000000000000000 },\n+  { 1.5323534693557528, 0.30000000000000004, 0.10000000000000001 },\n+  { 1.4663658145259877, 0.30000000000000004, 0.20000000000000001 },\n+  { 1.4081767433479091, 0.30000000000000004, 0.29999999999999999 },\n+  { 1.3563643538969763, 0.30000000000000004, 0.40000000000000002 },\n+  { 1.3098448759814962, 0.30000000000000004, 0.50000000000000000 },\n+  { 1.2677758800420669, 0.30000000000000004, 0.59999999999999998 },\n+  { 1.2294913236274982, 0.30000000000000004, 0.69999999999999996 },\n+  { 1.1944567571590048, 0.30000000000000004, 0.80000000000000004 },\n+  { 1.1622376896064914, 0.30000000000000004, 0.90000000000000002 },\n+};\n+const double toler013 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.39999999999999991.\n+// max(|f - f_GSL|): 8.8817841970012523e-16\n+// max(|f - f_GSL| / |f_GSL|): 6.1925080711125793e-16\n+const testcase_comp_ellint_3<double>\n+data014[10] =\n+{\n+  { 1.6399998658645112, 0.39999999999999991, 0.0000000000000000 },\n+  { 1.5620566886683604, 0.39999999999999991, 0.10000000000000001 },\n+  { 1.4941414344266770, 0.39999999999999991, 0.20000000000000001 },\n+  { 1.4342789859950078, 0.39999999999999991, 0.29999999999999999 },\n+  { 1.3809986210732901, 0.39999999999999991, 0.40000000000000002 },\n+  { 1.3331797176377398, 0.39999999999999991, 0.50000000000000000 },\n+  { 1.2899514672527024, 0.39999999999999991, 0.59999999999999998 },\n+  { 1.2506255923253344, 0.39999999999999991, 0.69999999999999996 },\n+  { 1.2146499565727209, 0.39999999999999991, 0.80000000000000004 },\n+  { 1.1815758115929846, 0.39999999999999991, 0.90000000000000002 },\n+};\n+const double toler014 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.50000000000000000.\n+// max(|f - f_GSL|): 2.2204460492503131e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.7857620325589816e-16\n+const testcase_comp_ellint_3<double>\n+data015[10] =\n+{\n+  { 1.6857503548125963, 0.50000000000000000, 0.0000000000000000 },\n+  { 1.6045524936084892, 0.50000000000000000, 0.10000000000000001 },\n+  { 1.5338490483665983, 0.50000000000000000, 0.20000000000000001 },\n+  { 1.4715681939859637, 0.50000000000000000, 0.29999999999999999 },\n+  { 1.4161679518465340, 0.50000000000000000, 0.40000000000000002 },\n+  { 1.3664739530045971, 0.50000000000000000, 0.50000000000000000 },\n+  { 1.3215740290190876, 0.50000000000000000, 0.59999999999999998 },\n+  { 1.2807475181182502, 0.50000000000000000, 0.69999999999999996 },\n+  { 1.2434165408189539, 0.50000000000000000, 0.80000000000000004 },\n+  { 1.2091116095504744, 0.50000000000000000, 0.90000000000000002 },\n+};\n+const double toler015 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.60000000000000009.\n+// max(|f - f_GSL|): 6.6613381477509392e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.7124937590522226e-16\n+const testcase_comp_ellint_3<double>\n+data016[10] =\n+{\n+  { 1.7507538029157526, 0.60000000000000009, 0.0000000000000000 },\n+  { 1.6648615773343014, 0.60000000000000009, 0.10000000000000001 },\n+  { 1.5901418016279374, 0.60000000000000009, 0.20000000000000001 },\n+  { 1.5243814243493585, 0.60000000000000009, 0.29999999999999999 },\n+  { 1.4659345278069984, 0.60000000000000009, 0.40000000000000002 },\n+  { 1.4135484285693078, 0.60000000000000009, 0.50000000000000000 },\n+  { 1.3662507535812816, 0.60000000000000009, 0.59999999999999998 },\n+  { 1.3232737468822813, 0.60000000000000009, 0.69999999999999996 },\n+  { 1.2840021261752192, 0.60000000000000009, 0.80000000000000004 },\n+  { 1.2479362973851873, 0.60000000000000009, 0.90000000000000002 },\n+};\n+const double toler016 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.69999999999999996.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.3074070916136724e-16\n+const testcase_comp_ellint_3<double>\n+data017[10] =\n+{\n+  { 1.8456939983747236, 0.69999999999999996, 0.0000000000000000 },\n+  { 1.7528050171757608, 0.69999999999999996, 0.10000000000000001 },\n+  { 1.6721098780092145, 0.69999999999999996, 0.20000000000000001 },\n+  { 1.6011813647733213, 0.69999999999999996, 0.29999999999999999 },\n+  { 1.5382162002954762, 0.69999999999999996, 0.40000000000000002 },\n+  { 1.4818433192178544, 0.69999999999999996, 0.50000000000000000 },\n+  { 1.4309994736080540, 0.69999999999999996, 0.59999999999999998 },\n+  { 1.3848459188329196, 0.69999999999999996, 0.69999999999999996 },\n+  { 1.3427110650397531, 0.69999999999999996, 0.80000000000000004 },\n+  { 1.3040500499695913, 0.69999999999999996, 0.90000000000000002 },\n+};\n+const double toler017 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.80000000000000004.\n+// max(|f - f_GSL|): 2.2204460492503131e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.5960830388244336e-16\n+const testcase_comp_ellint_3<double>\n+data018[10] =\n+{\n+  { 1.9953027776647296, 0.80000000000000004, 0.0000000000000000 },\n+  { 1.8910755418379521, 0.80000000000000004, 0.10000000000000001 },\n+  { 1.8007226661734588, 0.80000000000000004, 0.20000000000000001 },\n+  { 1.7214611048717301, 0.80000000000000004, 0.29999999999999999 },\n+  { 1.6512267838651289, 0.80000000000000004, 0.40000000000000002 },\n+  { 1.5884528947755532, 0.80000000000000004, 0.50000000000000000 },\n+  { 1.5319262547427865, 0.80000000000000004, 0.59999999999999998 },\n+  { 1.4806912324625332, 0.80000000000000004, 0.69999999999999996 },\n+  { 1.4339837018309471, 0.80000000000000004, 0.80000000000000004 },\n+  { 1.3911845406776222, 0.80000000000000004, 0.90000000000000002 },\n+};\n+const double toler018 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.89999999999999991.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 2.6751587294384150e-16\n+const testcase_comp_ellint_3<double>\n+data019[10] =\n+{\n+  { 2.2805491384227703, 0.89999999999999991, 0.0000000000000000 },\n+  { 2.1537868513875287, 0.89999999999999991, 0.10000000000000001 },\n+  { 2.0443194576468895, 0.89999999999999991, 0.20000000000000001 },\n+  { 1.9486280260314426, 0.89999999999999991, 0.29999999999999999 },\n+  { 1.8641114227238351, 0.89999999999999991, 0.40000000000000002 },\n+  { 1.7888013241937863, 0.89999999999999991, 0.50000000000000000 },\n+  { 1.7211781128919525, 0.89999999999999991, 0.59999999999999998 },\n+  { 1.6600480747670940, 0.89999999999999991, 0.69999999999999996 },\n+  { 1.6044591960982202, 0.89999999999999991, 0.80000000000000004 },\n+  { 1.5536420236310948, 0.89999999999999991, 0.90000000000000002 },\n+};\n+const double toler019 = 2.5000000000000020e-13;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_comp_ellint_3<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::comp_ellint_3(data[i].k, data[i].nu);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  test(data009, toler009);\n+  test(data010, toler010);\n+  test(data011, toler011);\n+  test(data012, toler012);\n+  test(data013, toler013);\n+  test(data014, toler014);\n+  test(data015, toler015);\n+  test(data016, toler016);\n+  test(data017, toler017);\n+  test(data018, toler018);\n+  test(data019, toler019);\n+  return 0;\n+}"}, {"sha": "0bd99a65fd32c04419da6a559bc2fd5bce7c2fe9", "filename": "libstdc++-v3/testsuite/special_functions/06_comp_ellint_3/compile.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.6 comp_ellint_3\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float kf = 0.5F, nuf = 0.5F;\n+  double kd = 0.5, nud = 0.5;\n+  long double kl = 0.5L, nul = 0.5L;\n+\n+  std::comp_ellint_3(kf, nuf);\n+  std::comp_ellint_3f(kf, nuf);\n+  std::comp_ellint_3(kd, nud);\n+  std::comp_ellint_3(kl, nul);\n+  std::comp_ellint_3l(kl, nul);\n+\n+  return;\n+}\n+"}, {"sha": "97c4c4c9c755b58a2fe197c3e05236b32ff5cfc2", "filename": "libstdc++-v3/testsuite/special_functions/06_comp_ellint_3/compile_2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.6 comp_ellint_3\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float kf = 0.5F, nuf = 0.5F;\n+  double kd = 0.5, nud = 0.5;\n+  long double kl = 0.5L, nul = 0.5L;\n+\n+  comp_ellint_3(kf, nuf);\n+  comp_ellint_3f(kf, nuf);\n+  comp_ellint_3(kd, nud);\n+  comp_ellint_3(kl, nul);\n+  comp_ellint_3l(kl, nul);\n+\n+  return;\n+}\n+"}, {"sha": "3639d103818dea3eab4d5638a815e5d8ab6ae092", "filename": "libstdc++-v3/testsuite/special_functions/07_cyl_bessel_i/check_nan.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,88 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.7 cyl_bessel_i\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float nuf = 0.0F;\n+  double nud = 0.0;\n+  long double nul = 0.0L;\n+\n+  float a = std::cyl_bessel_i(nuf, xf);\n+  float b = std::cyl_bessel_if(nuf, xf);\n+  double c = std::cyl_bessel_i(nud, xd);\n+  long double d = std::cyl_bessel_i(nul, xl);\n+  long double e = std::cyl_bessel_il(nul, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+void\n+test02()\n+{\n+  float xf = 1.0F;\n+  double xd = 1.0;\n+  long double xl = 1.0L;\n+\n+  float nuf = std::numeric_limits<float>::quiet_NaN();\n+  double nud = std::numeric_limits<double>::quiet_NaN();\n+  long double nul = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float a = std::cyl_bessel_i(nuf, xf);\n+  float b = std::cyl_bessel_if(nuf, xf);\n+  double c = std::cyl_bessel_i(nud, xd);\n+  long double d = std::cyl_bessel_i(nul, xl);\n+  long double e = std::cyl_bessel_il(nul, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}\n+"}, {"sha": "792e0f14cbe3246e5d1f882fa240078d11072e7b", "filename": "libstdc++-v3/testsuite/special_functions/07_cyl_bessel_i/check_value.cc", "status": "added", "additions": 692, "deletions": 0, "changes": 692, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,692 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  cyl_bessel_i\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+\n+// Test data for nu=0.0000000000000000.\n+// max(|f - f_GSL|): 2.8421709430404007e-14\n+// max(|f - f_GSL| / |f_GSL|): 1.3916073135966565e-15\n+const testcase_cyl_bessel_i<double>\n+data001[21] =\n+{\n+  { 1.0000000000000000, 0.0000000000000000, 0.0000000000000000 },\n+  { 1.0156861412236078, 0.0000000000000000, 0.25000000000000000 },\n+  { 1.0634833707413236, 0.0000000000000000, 0.50000000000000000 },\n+  { 1.1456467780440014, 0.0000000000000000, 0.75000000000000000 },\n+  { 1.2660658777520082, 0.0000000000000000, 1.0000000000000000 },\n+  { 1.4304687177218294, 0.0000000000000000, 1.2500000000000000 },\n+  { 1.6467231897728904, 0.0000000000000000, 1.5000000000000000 },\n+  { 1.9252521538585023, 0.0000000000000000, 1.7500000000000000 },\n+  { 2.2795853023360668, 0.0000000000000000, 2.0000000000000000 },\n+  { 2.7270783071907951, 0.0000000000000000, 2.2500000000000000 },\n+  { 3.2898391440501231, 0.0000000000000000, 2.5000000000000000 },\n+  { 3.9959131072376550, 0.0000000000000000, 2.7500000000000000 },\n+  { 4.8807925858650245, 0.0000000000000000, 3.0000000000000000 },\n+  { 5.9893359979395138, 0.0000000000000000, 3.2500000000000000 },\n+  { 7.3782034322254750, 0.0000000000000000, 3.5000000000000000 },\n+  { 9.1189458608445655, 0.0000000000000000, 3.7500000000000000 },\n+  { 11.301921952136325, 0.0000000000000000, 4.0000000000000000 },\n+  { 14.041263683000595, 0.0000000000000000, 4.2500000000000000 },\n+  { 17.481171855609272, 0.0000000000000000, 4.5000000000000000 },\n+  { 21.803898740902120, 0.0000000000000000, 4.7500000000000000 },\n+  { 27.239871823604439, 0.0000000000000000, 5.0000000000000000 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+\n+// Test data for nu=0.33333333333333331.\n+// max(|f - f_GSL|): 1.0658141036401503e-14\n+// max(|f - f_GSL| / |f_GSL|): 1.1056193696204194e-15\n+const testcase_cyl_bessel_i<double>\n+data002[21] =\n+{\n+  { 0.0000000000000000, 0.33333333333333331, 0.0000000000000000 },\n+  { 0.56650686557808660, 0.33333333333333331, 0.25000000000000000 },\n+  { 0.73897315642511863, 0.33333333333333331, 0.50000000000000000 },\n+  { 0.89532320365836804, 0.33333333333333331, 0.75000000000000000 },\n+  { 1.0646313978895285, 0.33333333333333331, 1.0000000000000000 },\n+  { 1.2623776732605250, 0.33333333333333331, 1.2500000000000000 },\n+  { 1.5014290000224382, 0.33333333333333331, 1.5000000000000000 },\n+  { 1.7951195525946044, 0.33333333333333331, 1.7500000000000000 },\n+  { 2.1587825813728614, 0.33333333333333331, 2.0000000000000000 },\n+  { 2.6109134564811405, 0.33333333333333331, 2.2500000000000000 },\n+  { 3.1743242297241938, 0.33333333333333331, 2.5000000000000000 },\n+  { 3.8774551722182107, 0.33333333333333331, 2.7500000000000000 },\n+  { 4.7559569371646946, 0.33333333333333331, 3.0000000000000000 },\n+  { 5.8546499652731825, 0.33333333333333331, 3.2500000000000000 },\n+  { 7.2299798619171147, 0.33333333333333331, 3.5000000000000000 },\n+  { 8.9531114355506318, 0.33333333333333331, 3.7500000000000000 },\n+  { 11.113838389991479, 0.33333333333333331, 4.0000000000000000 },\n+  { 13.825531136529117, 0.33333333333333331, 4.2500000000000000 },\n+  { 17.231403968478318, 0.33333333333333331, 4.5000000000000000 },\n+  { 21.512458099556554, 0.33333333333333331, 4.7500000000000000 },\n+  { 26.897553069268362, 0.33333333333333331, 5.0000000000000000 },\n+};\n+const double toler002 = 2.5000000000000020e-13;\n+\n+// Test data for nu=0.50000000000000000.\n+// max(|f - f_GSL|): 1.4210854715202004e-14\n+// max(|f - f_GSL| / |f_GSL|): 1.2805693909168510e-15\n+const testcase_cyl_bessel_i<double>\n+data003[21] =\n+{\n+  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },\n+  { 0.40311093489975897, 0.50000000000000000, 0.25000000000000000 },\n+  { 0.58799308679041573, 0.50000000000000000, 0.50000000000000000 },\n+  { 0.75761498638991298, 0.50000000000000000, 0.75000000000000000 },\n+  { 0.93767488824548695, 0.50000000000000000, 1.0000000000000000 },\n+  { 1.1432089853159872, 0.50000000000000000, 1.2500000000000000 },\n+  { 1.3871617204034761, 0.50000000000000000, 1.5000000000000000 },\n+  { 1.6830217804556815, 0.50000000000000000, 1.7500000000000000 },\n+  { 2.0462368630890526, 0.50000000000000000, 2.0000000000000000 },\n+  { 2.4953405089360041, 0.50000000000000000, 2.2500000000000000 },\n+  { 3.0530935381967175, 0.50000000000000000, 2.5000000000000000 },\n+  { 3.7477882494879449, 0.50000000000000000, 2.7500000000000000 },\n+  { 4.6148229034075969, 0.50000000000000000, 3.0000000000000000 },\n+  { 5.6986505325335495, 0.50000000000000000, 3.2500000000000000 },\n+  { 7.0552194086911877, 0.50000000000000000, 3.5000000000000000 },\n+  { 8.7550467841188944, 0.50000000000000000, 3.7500000000000000 },\n+  { 10.887101798588422, 0.50000000000000000, 4.0000000000000000 },\n+  { 13.563718712579764, 0.50000000000000000, 4.2500000000000000 },\n+  { 16.926820080158183, 0.50000000000000000, 4.5000000000000000 },\n+  { 21.155804306570005, 0.50000000000000000, 4.7500000000000000 },\n+  { 26.477547497559065, 0.50000000000000000, 5.0000000000000000 },\n+};\n+const double toler003 = 2.5000000000000020e-13;\n+\n+// Test data for nu=0.66666666666666663.\n+// max(|f - f_GSL|): 1.2434497875801753e-14\n+// max(|f - f_GSL| / |f_GSL|): 1.3900778397944649e-15\n+const testcase_cyl_bessel_i<double>\n+data004[21] =\n+{\n+  { 0.0000000000000000, 0.66666666666666663, 0.0000000000000000 },\n+  { 0.27953690613200438, 0.66666666666666663, 0.25000000000000000 },\n+  { 0.45628323113556879, 0.66666666666666663, 0.50000000000000000 },\n+  { 0.62594569838182612, 0.66666666666666663, 0.75000000000000000 },\n+  { 0.80752128860612948, 0.66666666666666663, 1.0000000000000000 },\n+  { 1.0139484513577168, 0.66666666666666663, 1.2500000000000000 },\n+  { 1.2572918396962991, 0.66666666666666663, 1.5000000000000000 },\n+  { 1.5505806938325577, 0.66666666666666663, 1.7500000000000000 },\n+  { 1.9089492968236206, 0.66666666666666663, 2.0000000000000000 },\n+  { 2.3506463490300331, 0.66666666666666663, 2.2500000000000000 },\n+  { 2.8981161894224892, 0.66666666666666663, 2.5000000000000000 },\n+  { 3.5792654911068720, 0.66666666666666663, 2.7500000000000000 },\n+  { 4.4290087213549505, 0.66666666666666663, 3.0000000000000000 },\n+  { 5.4911895720097688, 0.66666666666666663, 3.2500000000000000 },\n+  { 6.8209918044137305, 0.66666666666666663, 3.5000000000000000 },\n+  { 8.4879784249619767, 0.66666666666666663, 3.7500000000000000 },\n+  { 10.579932774013002, 0.66666666666666663, 4.0000000000000000 },\n+  { 13.207720355482458, 0.66666666666666663, 4.2500000000000000 },\n+  { 16.511448404200543, 0.66666666666666663, 4.5000000000000000 },\n+  { 20.668274532832392, 0.66666666666666663, 4.7500000000000000 },\n+  { 25.902310583215122, 0.66666666666666663, 5.0000000000000000 },\n+};\n+const double toler004 = 2.5000000000000020e-13;\n+\n+// Test data for nu=1.0000000000000000.\n+// max(|f - f_GSL|): 3.5527136788005009e-15\n+// max(|f - f_GSL| / |f_GSL|): 2.2031887547040326e-16\n+const testcase_cyl_bessel_i<double>\n+data005[21] =\n+{\n+  { 0.0000000000000000, 1.0000000000000000, 0.0000000000000000 },\n+  { 0.12597910894546793, 1.0000000000000000, 0.25000000000000000 },\n+  { 0.25789430539089631, 1.0000000000000000, 0.50000000000000000 },\n+  { 0.40199246158092228, 1.0000000000000000, 0.75000000000000000 },\n+  { 0.56515910399248503, 1.0000000000000000, 1.0000000000000000 },\n+  { 0.75528141834074725, 1.0000000000000000, 1.2500000000000000 },\n+  { 0.98166642857790720, 1.0000000000000000, 1.5000000000000000 },\n+  { 1.2555375122401731, 1.0000000000000000, 1.7500000000000000 },\n+  { 1.5906368546373291, 1.0000000000000000, 2.0000000000000000 },\n+  { 2.0039674569295931, 1.0000000000000000, 2.2500000000000000 },\n+  { 2.5167162452886984, 1.0000000000000000, 2.5000000000000000 },\n+  { 3.1554101386190028, 1.0000000000000000, 2.7500000000000000 },\n+  { 3.9533702174026097, 1.0000000000000000, 3.0000000000000000 },\n+  { 4.9525461659085490, 1.0000000000000000, 3.2500000000000000 },\n+  { 6.2058349222583642, 1.0000000000000000, 3.5000000000000000 },\n+  { 7.7800152298244161, 1.0000000000000000, 3.7500000000000000 },\n+  { 9.7594651537044488, 1.0000000000000000, 4.0000000000000000 },\n+  { 12.250874667409304, 1.0000000000000000, 4.2500000000000000 },\n+  { 15.389222753735924, 1.0000000000000000, 4.5000000000000000 },\n+  { 19.345361447520226, 1.0000000000000000, 4.7500000000000000 },\n+  { 24.335642142450524, 1.0000000000000000, 5.0000000000000000 },\n+};\n+const double toler005 = 2.5000000000000020e-13;\n+\n+// Test data for nu=2.0000000000000000.\n+// max(|f - f_GSL|): 1.7763568394002505e-15\n+// max(|f - f_GSL| / |f_GSL|): 2.2089187702829171e-16\n+const testcase_cyl_bessel_i<double>\n+data006[21] =\n+{\n+  { 0.0000000000000000, 2.0000000000000000, 0.0000000000000000 },\n+  { 0.0078532696598645167, 2.0000000000000000, 0.25000000000000000 },\n+  { 0.031906149177738249, 2.0000000000000000, 0.50000000000000000 },\n+  { 0.073666880494875436, 2.0000000000000000, 0.75000000000000000 },\n+  { 0.13574766976703831, 2.0000000000000000, 1.0000000000000000 },\n+  { 0.22201844837663415, 2.0000000000000000, 1.2500000000000000 },\n+  { 0.33783461833568068, 2.0000000000000000, 1.5000000000000000 },\n+  { 0.49035213986973319, 2.0000000000000000, 1.7500000000000000 },\n+  { 0.68894844769873831, 2.0000000000000000, 2.0000000000000000 },\n+  { 0.94577390103115722, 2.0000000000000000, 2.2500000000000000 },\n+  { 1.2764661478191643, 2.0000000000000000, 2.5000000000000000 },\n+  { 1.7010693700601991, 2.0000000000000000, 2.7500000000000000 },\n+  { 2.2452124409299512, 2.0000000000000000, 3.0000000000000000 },\n+  { 2.9416152804573357, 2.0000000000000000, 3.2500000000000000 },\n+  { 3.8320120480778415, 2.0000000000000000, 3.5000000000000000 },\n+  { 4.9696044049382113, 2.0000000000000000, 3.7500000000000000 },\n+  { 6.4221893752841046, 2.0000000000000000, 4.0000000000000000 },\n+  { 8.2761461924550552, 2.0000000000000000, 4.2500000000000000 },\n+  { 10.641517298393307, 2.0000000000000000, 4.5000000000000000 },\n+  { 13.658483394577813, 2.0000000000000000, 4.7500000000000000 },\n+  { 17.505614966624233, 2.0000000000000000, 5.0000000000000000 },\n+};\n+const double toler006 = 2.5000000000000020e-13;\n+\n+// Test data for nu=5.0000000000000000.\n+// max(|f - f_GSL|): 8.8817841970012523e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.6610041744866592e-15\n+const testcase_cyl_bessel_i<double>\n+data007[21] =\n+{\n+  { 0.0000000000000000, 5.0000000000000000, 0.0000000000000000 },\n+  { 2.5497616449882785e-07, 5.0000000000000000, 0.25000000000000000 },\n+  { 8.2231713131092646e-06, 5.0000000000000000, 0.50000000000000000 },\n+  { 6.3261122739811725e-05, 5.0000000000000000, 0.75000000000000000 },\n+  { 0.00027146315595697195, 5.0000000000000000, 1.0000000000000000 },\n+  { 0.00084793613616686856, 5.0000000000000000, 1.2500000000000000 },\n+  { 0.0021705595690975554, 5.0000000000000000, 1.5000000000000000 },\n+  { 0.0048504513371845394, 5.0000000000000000, 1.7500000000000000 },\n+  { 0.0098256793231317023, 5.0000000000000000, 2.0000000000000000 },\n+  { 0.018486577941045829, 5.0000000000000000, 2.2500000000000000 },\n+  { 0.032843475172023219, 5.0000000000000000, 2.5000000000000000 },\n+  { 0.055750882754221943, 5.0000000000000000, 2.7500000000000000 },\n+  { 0.091206477661513338, 5.0000000000000000, 3.0000000000000000 },\n+  { 0.14474880546308083, 5.0000000000000000, 3.2500000000000000 },\n+  { 0.22398495470190780, 5.0000000000000000, 3.5000000000000000 },\n+  { 0.33928899170999866, 5.0000000000000000, 3.7500000000000000 },\n+  { 0.50472436311316626, 5.0000000000000000, 4.0000000000000000 },\n+  { 0.73925961816682961, 5.0000000000000000, 4.2500000000000000 },\n+  { 1.0683677743764699, 5.0000000000000000, 4.5000000000000000 },\n+  { 1.5261268693599621, 5.0000000000000000, 4.7500000000000000 },\n+  { 2.1579745473225476, 5.0000000000000000, 5.0000000000000000 },\n+};\n+const double toler007 = 2.5000000000000020e-13;\n+\n+// Test data for nu=10.000000000000000.\n+// max(|f - f_GSL|): 9.5409791178724390e-18\n+// max(|f - f_GSL| / |f_GSL|): 3.9173270279899483e-15\n+const testcase_cyl_bessel_i<double>\n+data008[21] =\n+{\n+  { 0.0000000000000000, 10.000000000000000, 0.0000000000000000 },\n+  { 2.5701232848571186e-16, 10.000000000000000, 0.25000000000000000 },\n+  { 2.6430419258812784e-13, 10.000000000000000, 0.50000000000000000 },\n+  { 1.5349659676120412e-11, 10.000000000000000, 0.75000000000000000 },\n+  { 2.7529480398368732e-10, 10.000000000000000, 1.0000000000000000 },\n+  { 2.5967897782035928e-09, 10.000000000000000, 1.2500000000000000 },\n+  { 1.6330924437799743e-08, 10.000000000000000, 1.5000000000000000 },\n+  { 7.7706676834614093e-08, 10.000000000000000, 1.7500000000000000 },\n+  { 3.0169638793506839e-07, 10.000000000000000, 2.0000000000000000 },\n+  { 1.0034459057774481e-06, 10.000000000000000, 2.2500000000000000 },\n+  { 2.9557436109680578e-06, 10.000000000000000, 2.5000000000000000 },\n+  { 7.8955603774082724e-06, 10.000000000000000, 2.7500000000000000 },\n+  { 1.9464393470612970e-05, 10.000000000000000, 3.0000000000000000 },\n+  { 4.4875369479742435e-05, 10.000000000000000, 3.2500000000000000 },\n+  { 9.7760848514528916e-05, 10.000000000000000, 3.5000000000000000 },\n+  { 0.00020289011210063493, 10.000000000000000, 3.7500000000000000 },\n+  { 0.00040378896132693047, 10.000000000000000, 4.0000000000000000 },\n+  { 0.00077478519551669892, 10.000000000000000, 4.2500000000000000 },\n+  { 0.0014397060684919682, 10.000000000000000, 4.5000000000000000 },\n+  { 0.0026004486016189452, 10.000000000000000, 4.7500000000000000 },\n+  { 0.0045800444191760525, 10.000000000000000, 5.0000000000000000 },\n+};\n+const double toler008 = 2.5000000000000020e-13;\n+\n+// Test data for nu=20.000000000000000.\n+// max(|f - f_GSL|): 2.9080568410067379e-26\n+// max(|f - f_GSL| / |f_GSL|): 2.1318627676504474e-15\n+const testcase_cyl_bessel_i<double>\n+data009[21] =\n+{\n+  { 0.0000000000000000, 20.000000000000000, 0.0000000000000000 },\n+  { 3.5677858077910353e-37, 20.000000000000000, 0.25000000000000000 },\n+  { 3.7494538480790194e-31, 20.000000000000000, 0.50000000000000000 },\n+  { 1.2514356342425337e-27, 20.000000000000000, 0.75000000000000000 },\n+  { 3.9668359858190197e-25, 20.000000000000000, 1.0000000000000000 },\n+  { 3.4637832909868234e-23, 20.000000000000000, 1.2500000000000000 },\n+  { 1.3388331839683472e-21, 20.000000000000000, 1.5000000000000000 },\n+  { 2.9502376732679751e-20, 20.000000000000000, 1.7500000000000000 },\n+  { 4.3105605761095479e-19, 20.000000000000000, 2.0000000000000000 },\n+  { 4.6032451406433059e-18, 20.000000000000000, 2.2500000000000000 },\n+  { 3.8400317244170310e-17, 20.000000000000000, 2.5000000000000000 },\n+  { 2.6239115263043263e-16, 20.000000000000000, 2.7500000000000000 },\n+  { 1.5209660019426689e-15, 20.000000000000000, 3.0000000000000000 },\n+  { 7.6806450728249953e-15, 20.000000000000000, 3.2500000000000000 },\n+  { 3.4495528847222945e-14, 20.000000000000000, 3.5000000000000000 },\n+  { 1.4006589294850672e-13, 20.000000000000000, 3.7500000000000000 },\n+  { 5.2100734221993044e-13, 20.000000000000000, 4.0000000000000000 },\n+  { 1.7946903269488168e-12, 20.000000000000000, 4.2500000000000000 },\n+  { 5.7763830562279683e-12, 20.000000000000000, 4.5000000000000000 },\n+  { 1.7502433074548735e-11, 20.000000000000000, 4.7500000000000000 },\n+  { 5.0242393579718066e-11, 20.000000000000000, 5.0000000000000000 },\n+};\n+const double toler009 = 2.5000000000000020e-13;\n+//  cyl_bessel_i\n+\n+// Test data for nu=0.0000000000000000.\n+// max(|f - f_GSL|): 2.5687255815171641e+28\n+// max(|f - f_GSL| / |f_GSL|): 2.3922901025046178e-14\n+const testcase_cyl_bessel_i<double>\n+data010[21] =\n+{\n+  { 1.0000000000000000, 0.0000000000000000, 0.0000000000000000 },\n+  { 27.239871823604439, 0.0000000000000000, 5.0000000000000000 },\n+  { 2815.7166284662558, 0.0000000000000000, 10.000000000000000 },\n+  { 339649.37329791381, 0.0000000000000000, 15.000000000000000 },\n+  { 43558282.559553474, 0.0000000000000000, 20.000000000000000 },\n+  { 5774560606.4663124, 0.0000000000000000, 25.000000000000000 },\n+  { 781672297823.97925, 0.0000000000000000, 30.000000000000000 },\n+  { 107338818494514.42, 0.0000000000000000, 35.000000000000000 },\n+  { 14894774793419918., 0.0000000000000000, 40.000000000000000 },\n+  { 2.0834140751773164e+18, 0.0000000000000000, 45.000000000000000 },\n+  { 2.9325537838493457e+20, 0.0000000000000000, 50.000000000000000 },\n+  { 4.1487895607332160e+22, 0.0000000000000000, 55.000000000000000 },\n+  { 5.8940770556098216e+24, 0.0000000000000000, 60.000000000000000 },\n+  { 8.4030398456255596e+26, 0.0000000000000000, 65.000000000000000 },\n+  { 1.2015889579125424e+29, 0.0000000000000000, 70.000000000000000 },\n+  { 1.7226390780357976e+31, 0.0000000000000000, 75.000000000000000 },\n+  { 2.4751784043341661e+33, 0.0000000000000000, 80.000000000000000 },\n+  { 3.5634776304081403e+35, 0.0000000000000000, 85.000000000000000 },\n+  { 5.1392383455086475e+37, 0.0000000000000000, 90.000000000000000 },\n+  { 7.4233258618752072e+39, 0.0000000000000000, 95.000000000000000 },\n+  { 1.0737517071310986e+42, 0.0000000000000000, 100.00000000000000 },\n+};\n+const double toler010 = 2.5000000000000015e-12;\n+\n+// Test data for nu=0.33333333333333331.\n+// max(|f - f_GSL|): 1.0831975343747077e+28\n+// max(|f - f_GSL| / |f_GSL|): 1.2017640663876795e-14\n+const testcase_cyl_bessel_i<double>\n+data011[21] =\n+{\n+  { 0.0000000000000000, 0.33333333333333331, 0.0000000000000000 },\n+  { 26.897553069268362, 0.33333333333333331, 5.0000000000000000 },\n+  { 2799.2396097056790, 0.33333333333333331, 10.000000000000000 },\n+  { 338348.63146593666, 0.33333333333333331, 15.000000000000000 },\n+  { 43434263.927938424, 0.33333333333333331, 20.000000000000000 },\n+  { 5761474759.6213636, 0.33333333333333331, 25.000000000000000 },\n+  { 780201111830.30237, 0.33333333333333331, 30.000000000000000 },\n+  { 107166066959051.91, 0.33333333333333331, 35.000000000000000 },\n+  { 14873836574083764., 0.33333333333333331, 40.000000000000000 },\n+  { 2.0808143020217085e+18, 0.33333333333333331, 45.000000000000000 },\n+  { 2.9292639365644226e+20, 0.33333333333333331, 50.000000000000000 },\n+  { 4.1445621624120489e+22, 0.33333333333333331, 55.000000000000000 },\n+  { 5.8885758374365916e+24, 0.33333333333333331, 60.000000000000000 },\n+  { 8.3958047021083955e+26, 0.33333333333333331, 65.000000000000000 },\n+  { 1.2006287819446431e+29, 0.33333333333333331, 70.000000000000000 },\n+  { 1.7213548977150022e+31, 0.33333333333333331, 75.000000000000000 },\n+  { 2.4734492458444449e+33, 0.33333333333333331, 80.000000000000000 },\n+  { 3.5611354547857122e+35, 0.33333333333333331, 85.000000000000000 },\n+  { 5.1360491295551848e+37, 0.33333333333333331, 90.000000000000000 },\n+  { 7.4189629097600431e+39, 0.33333333333333331, 95.000000000000000 },\n+  { 1.0731523308358370e+42, 0.33333333333333331, 100.00000000000000 },\n+};\n+const double toler011 = 1.0000000000000008e-12;\n+\n+// Test data for nu=0.50000000000000000.\n+// max(|f - f_GSL|): 6.9634127209802640e+27\n+// max(|f - f_GSL| / |f_GSL|): 1.1904152155149629e-14\n+const testcase_cyl_bessel_i<double>\n+data012[21] =\n+{\n+  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },\n+  { 26.477547497559065, 0.50000000000000000, 5.0000000000000000 },\n+  { 2778.7846038745711, 0.50000000000000000, 10.000000000000000 },\n+  { 336729.88718706399, 0.50000000000000000, 15.000000000000000 },\n+  { 43279746.272428922, 0.50000000000000000, 20.000000000000000 },\n+  { 5745159748.3464680, 0.50000000000000000, 25.000000000000000 },\n+  { 778366068840.44580, 0.50000000000000000, 30.000000000000000 },\n+  { 106950522408567.66, 0.50000000000000000, 35.000000000000000 },\n+  { 14847705549021962., 0.50000000000000000, 40.000000000000000 },\n+  { 2.0775691824625661e+18, 0.50000000000000000, 45.000000000000000 },\n+  { 2.9251568529912984e+20, 0.50000000000000000, 50.000000000000000 },\n+  { 4.1392840094781220e+22, 0.50000000000000000, 55.000000000000000 },\n+  { 5.8817065760751945e+24, 0.50000000000000000, 60.000000000000000 },\n+  { 8.3867695787277258e+26, 0.50000000000000000, 65.000000000000000 },\n+  { 1.1994296461653203e+29, 0.50000000000000000, 70.000000000000000 },\n+  { 1.7197510246063334e+31, 0.50000000000000000, 75.000000000000000 },\n+  { 2.4712895036230794e+33, 0.50000000000000000, 80.000000000000000 },\n+  { 3.5582099086757769e+35, 0.50000000000000000, 85.000000000000000 },\n+  { 5.1320654031231128e+37, 0.50000000000000000, 90.000000000000000 },\n+  { 7.4135128383495239e+39, 0.50000000000000000, 95.000000000000000 },\n+  { 1.0724035825423179e+42, 0.50000000000000000, 100.00000000000000 },\n+};\n+const double toler012 = 1.0000000000000008e-12;\n+\n+// Test data for nu=0.66666666666666663.\n+// max(|f - f_GSL|): 4.4875326424095035e+27\n+// max(|f - f_GSL| / |f_GSL|): 8.8432218147527708e-15\n+const testcase_cyl_bessel_i<double>\n+data013[21] =\n+{\n+  { 0.0000000000000000, 0.66666666666666663, 0.0000000000000000 },\n+  { 25.902310583215122, 0.66666666666666663, 5.0000000000000000 },\n+  { 2750.4090423459315, 0.66666666666666663, 10.000000000000000 },\n+  { 334476.98138574377, 0.66666666666666663, 15.000000000000000 },\n+  { 43064361.686912313, 0.66666666666666663, 20.000000000000000 },\n+  { 5722397441.9603882, 0.66666666666666663, 25.000000000000000 },\n+  { 775804343498.02661, 0.66666666666666663, 30.000000000000000 },\n+  { 106649495512800.88, 0.66666666666666663, 35.000000000000000 },\n+  { 14811199896983756., 0.66666666666666663, 40.000000000000000 },\n+  { 2.0730345814356961e+18, 0.66666666666666663, 45.000000000000000 },\n+  { 2.9194166755257467e+20, 0.66666666666666663, 50.000000000000000 },\n+  { 4.1319059569935374e+22, 0.66666666666666663, 55.000000000000000 },\n+  { 5.8721031476386222e+24, 0.66666666666666663, 60.000000000000000 },\n+  { 8.3741368248217844e+26, 0.66666666666666663, 65.000000000000000 },\n+  { 1.1977528777008688e+29, 0.66666666666666663, 70.000000000000000 },\n+  { 1.7175081240014333e+31, 0.66666666666666663, 75.000000000000000 },\n+  { 2.4682690458513916e+33, 0.66666666666666663, 80.000000000000000 },\n+  { 3.5541181975850724e+35, 0.66666666666666663, 85.000000000000000 },\n+  { 5.1264933963228892e+37, 0.66666666666666663, 90.000000000000000 },\n+  { 7.4058894880134064e+39, 0.66666666666666663, 95.000000000000000 },\n+  { 1.0713562154788124e+42, 0.66666666666666663, 100.00000000000000 },\n+};\n+const double toler013 = 5.0000000000000039e-13;\n+\n+// Test data for nu=1.0000000000000000.\n+// max(|f - f_GSL|): 5.7254726816948838e+27\n+// max(|f - f_GSL| / |f_GSL|): 7.0819761463168391e-15\n+const testcase_cyl_bessel_i<double>\n+data014[21] =\n+{\n+  { 0.0000000000000000, 1.0000000000000000, 0.0000000000000000 },\n+  { 24.335642142450524, 1.0000000000000000, 5.0000000000000000 },\n+  { 2670.9883037012560, 1.0000000000000000, 10.000000000000000 },\n+  { 328124.92197020649, 1.0000000000000000, 15.000000000000000 },\n+  { 42454973.385127783, 1.0000000000000000, 20.000000000000000 },\n+  { 5657865129.8787022, 1.0000000000000000, 25.000000000000000 },\n+  { 768532038938.95667, 1.0000000000000000, 30.000000000000000 },\n+  { 105794126051896.17, 1.0000000000000000, 35.000000000000000 },\n+  { 14707396163259354., 1.0000000000000000, 40.000000000000000 },\n+  { 2.0601334620815780e+18, 1.0000000000000000, 45.000000000000000 },\n+  { 2.9030785901035638e+20, 1.0000000000000000, 50.000000000000000 },\n+  { 4.1108986452992812e+22, 1.0000000000000000, 55.000000000000000 },\n+  { 5.8447515883904527e+24, 1.0000000000000000, 60.000000000000000 },\n+  { 8.3381485471501302e+26, 1.0000000000000000, 65.000000000000000 },\n+  { 1.1929750788892366e+29, 1.0000000000000000, 70.000000000000000 },\n+  { 1.7111160152965382e+31, 1.0000000000000000, 75.000000000000000 },\n+  { 2.4596595795675343e+33, 1.0000000000000000, 80.000000000000000 },\n+  { 3.5424536064404024e+35, 1.0000000000000000, 85.000000000000000 },\n+  { 5.1106068152566129e+37, 1.0000000000000000, 90.000000000000000 },\n+  { 7.3841518091360182e+39, 1.0000000000000000, 95.000000000000000 },\n+  { 1.0683693903381569e+42, 1.0000000000000000, 100.00000000000000 },\n+};\n+const double toler014 = 5.0000000000000039e-13;\n+\n+// Test data for nu=2.0000000000000000.\n+// max(|f - f_GSL|): 6.3444427013375739e+27\n+// max(|f - f_GSL| / |f_GSL|): 6.0286366727804324e-15\n+const testcase_cyl_bessel_i<double>\n+data015[21] =\n+{\n+  { 0.0000000000000000, 2.0000000000000000, 0.0000000000000000 },\n+  { 17.505614966624233, 2.0000000000000000, 5.0000000000000000 },\n+  { 2281.5189677260046, 2.0000000000000000, 10.000000000000000 },\n+  { 295899.38370188628, 2.0000000000000000, 15.000000000000000 },\n+  { 39312785.221040756, 2.0000000000000000, 20.000000000000000 },\n+  { 5321931396.0760155, 2.0000000000000000, 25.000000000000000 },\n+  { 730436828561.38013, 2.0000000000000000, 30.000000000000000 },\n+  { 101293439862977.19, 2.0000000000000000, 35.000000000000000 },\n+  { 14159404985256922., 2.0000000000000000, 40.000000000000000 },\n+  { 1.9918525879736883e+18, 2.0000000000000000, 45.000000000000000 },\n+  { 2.8164306402451938e+20, 2.0000000000000000, 50.000000000000000 },\n+  { 3.9993023372677540e+22, 2.0000000000000000, 55.000000000000000 },\n+  { 5.6992520026634433e+24, 2.0000000000000000, 60.000000000000000 },\n+  { 8.1464814287900378e+26, 2.0000000000000000, 65.000000000000000 },\n+  { 1.1675039556585663e+29, 2.0000000000000000, 70.000000000000000 },\n+  { 1.6770093176278926e+31, 2.0000000000000000, 75.000000000000000 },\n+  { 2.4136869148449879e+33, 2.0000000000000000, 80.000000000000000 },\n+  { 3.4801257808448186e+35, 2.0000000000000000, 85.000000000000000 },\n+  { 5.0256693051696307e+37, 2.0000000000000000, 90.000000000000000 },\n+  { 7.2678700343145818e+39, 2.0000000000000000, 95.000000000000000 },\n+  { 1.0523843193243042e+42, 2.0000000000000000, 100.00000000000000 },\n+};\n+const double toler015 = 5.0000000000000039e-13;\n+\n+// Test data for nu=5.0000000000000000.\n+// max(|f - f_GSL|): 7.7371252455336267e+26\n+// max(|f - f_GSL| / |f_GSL|): 1.6729319922562276e-15\n+const testcase_cyl_bessel_i<double>\n+data016[21] =\n+{\n+  { 0.0000000000000000, 5.0000000000000000, 0.0000000000000000 },\n+  { 2.1579745473225476, 5.0000000000000000, 5.0000000000000000 },\n+  { 777.18828640326012, 5.0000000000000000, 10.000000000000000 },\n+  { 144572.01120063409, 5.0000000000000000, 15.000000000000000 },\n+  { 23018392.213413671, 5.0000000000000000, 20.000000000000000 },\n+  { 3472466208.7419176, 5.0000000000000000, 25.000000000000000 },\n+  { 512151465476.93494, 5.0000000000000000, 30.000000000000000 },\n+  { 74756743552251.547, 5.0000000000000000, 35.000000000000000 },\n+  { 10858318337624280., 5.0000000000000000, 40.000000000000000 },\n+  { 1.5736087399245911e+18, 5.0000000000000000, 45.000000000000000 },\n+  { 2.2785483079112825e+20, 5.0000000000000000, 50.000000000000000 },\n+  { 3.2989391052963687e+22, 5.0000000000000000, 55.000000000000000 },\n+  { 4.7777652072561732e+24, 5.0000000000000000, 60.000000000000000 },\n+  { 6.9232165147172657e+26, 5.0000000000000000, 65.000000000000000 },\n+  { 1.0038643002095155e+29, 5.0000000000000000, 70.000000000000000 },\n+  { 1.4566328222327073e+31, 5.0000000000000000, 75.000000000000000 },\n+  { 2.1151488565944835e+33, 5.0000000000000000, 80.000000000000000 },\n+  { 3.0735883450768239e+35, 5.0000000000000000, 85.000000000000000 },\n+  { 4.4694790189230327e+37, 5.0000000000000000, 90.000000000000000 },\n+  { 6.5037505570430995e+39, 5.0000000000000000, 95.000000000000000 },\n+  { 9.4700938730355882e+41, 5.0000000000000000, 100.00000000000000 },\n+};\n+const double toler016 = 2.5000000000000020e-13;\n+\n+// Test data for nu=10.000000000000000.\n+// max(|f - f_GSL|): 2.3211375736600880e+26\n+// max(|f - f_GSL| / |f_GSL|): 3.0834307473515225e-15\n+const testcase_cyl_bessel_i<double>\n+data017[21] =\n+{\n+  { 0.0000000000000000, 10.000000000000000, 0.0000000000000000 },\n+  { 0.0045800444191760525, 10.000000000000000, 5.0000000000000000 },\n+  { 21.891706163723381, 10.000000000000000, 10.000000000000000 },\n+  { 12267.475049806462, 10.000000000000000, 15.000000000000000 },\n+  { 3540200.2090195213, 10.000000000000000, 20.000000000000000 },\n+  { 771298871.17072666, 10.000000000000000, 25.000000000000000 },\n+  { 145831809975.96710, 10.000000000000000, 30.000000000000000 },\n+  { 25449470018534.777, 10.000000000000000, 35.000000000000000 },\n+  { 4228469210516757.5, 10.000000000000000, 40.000000000000000 },\n+  { 6.8049404557505165e+17, 10.000000000000000, 45.000000000000000 },\n+  { 1.0715971594776370e+20, 10.000000000000000, 50.000000000000000 },\n+  { 1.6618215752886714e+22, 10.000000000000000, 55.000000000000000 },\n+  { 2.5486246072566784e+24, 10.000000000000000, 60.000000000000000 },\n+  { 3.8764628702155481e+26, 10.000000000000000, 65.000000000000000 },\n+  { 5.8592538145409686e+28, 10.000000000000000, 70.000000000000000 },\n+  { 8.8135370711317444e+30, 10.000000000000000, 75.000000000000000 },\n+  { 1.3207418268325279e+33, 10.000000000000000, 80.000000000000000 },\n+  { 1.9732791360862190e+35, 10.000000000000000, 85.000000000000000 },\n+  { 2.9411893748384672e+37, 10.000000000000000, 90.000000000000000 },\n+  { 4.3754494922439984e+39, 10.000000000000000, 95.000000000000000 },\n+  { 6.4989755247201446e+41, 10.000000000000000, 100.00000000000000 },\n+};\n+const double toler017 = 2.5000000000000020e-13;\n+\n+// Test data for nu=20.000000000000000.\n+// max(|f - f_GSL|): 1.9342813113834067e+25\n+// max(|f - f_GSL| / |f_GSL|): 4.7061265485304859e-15\n+const testcase_cyl_bessel_i<double>\n+data018[21] =\n+{\n+  { 0.0000000000000000, 20.000000000000000, 0.0000000000000000 },\n+  { 5.0242393579718066e-11, 20.000000000000000, 5.0000000000000000 },\n+  { 0.00012507997356449481, 20.000000000000000, 10.000000000000000 },\n+  { 1.6470152535015836, 20.000000000000000, 15.000000000000000 },\n+  { 3188.7503288536154, 20.000000000000000, 20.000000000000000 },\n+  { 2449840.5422952301, 20.000000000000000, 25.000000000000000 },\n+  { 1126985104.4483771, 20.000000000000000, 30.000000000000000 },\n+  { 379617876611.88580, 20.000000000000000, 35.000000000000000 },\n+  { 104459633129479.89, 20.000000000000000, 40.000000000000000 },\n+  { 25039579987216524., 20.000000000000000, 45.000000000000000 },\n+  { 5.4420084027529984e+18, 20.000000000000000, 50.000000000000000 },\n+  { 1.1007498584335495e+21, 20.000000000000000, 55.000000000000000 },\n+  { 2.1091734863057236e+23, 20.000000000000000, 60.000000000000000 },\n+  { 3.8763618091286899e+25, 20.000000000000000, 65.000000000000000 },\n+  { 6.8946130527930870e+27, 20.000000000000000, 70.000000000000000 },\n+  { 1.1946319948836447e+30, 20.000000000000000, 75.000000000000000 },\n+  { 2.0265314377577587e+32, 20.000000000000000, 80.000000000000000 },\n+  { 3.3784665214179985e+34, 20.000000000000000, 85.000000000000000 },\n+  { 5.5516089411796646e+36, 20.000000000000000, 90.000000000000000 },\n+  { 9.0129310795305151e+38, 20.000000000000000, 95.000000000000000 },\n+  { 1.4483461256427176e+41, 20.000000000000000, 100.00000000000000 },\n+};\n+const double toler018 = 2.5000000000000020e-13;\n+\n+// Test data for nu=50.000000000000000.\n+// max(|f - f_GSL|): 4.5452777397620335e+22\n+// max(|f - f_GSL| / |f_GSL|): 6.0191728870880627e-14\n+const testcase_cyl_bessel_i<double>\n+data019[21] =\n+{\n+  { 0.0000000000000000, 50.000000000000000, 0.0000000000000000 },\n+  { 2.9314696468108517e-45, 50.000000000000000, 5.0000000000000000 },\n+  { 4.7568945607268442e-30, 50.000000000000000, 10.000000000000000 },\n+  { 5.5468372730667069e-21, 50.000000000000000, 15.000000000000000 },\n+  { 2.2551205757604056e-14, 50.000000000000000, 20.000000000000000 },\n+  { 4.5344251866130257e-09, 50.000000000000000, 25.000000000000000 },\n+  { 0.00014590106916468940, 50.000000000000000, 30.000000000000000 },\n+  { 1.3965549457254882, 50.000000000000000, 35.000000000000000 },\n+  { 5726.8656631289896, 50.000000000000000, 40.000000000000000 },\n+  { 12672593.113027781, 50.000000000000000, 45.000000000000000 },\n+  { 17650802430.016712, 50.000000000000000, 50.000000000000000 },\n+  { 17220231607789.926, 50.000000000000000, 55.000000000000000 },\n+  { 12704607933652176., 50.000000000000000, 60.000000000000000 },\n+  { 7.4989491942193725e+18, 50.000000000000000, 65.000000000000000 },\n+  { 3.6944034898904922e+21, 50.000000000000000, 70.000000000000000 },\n+  { 1.5691634774370186e+24, 50.000000000000000, 75.000000000000000 },\n+  { 5.8927749458163587e+26, 50.000000000000000, 80.000000000000000 },\n+  { 1.9958849054749339e+29, 50.000000000000000, 85.000000000000000 },\n+  { 6.1946050361781500e+31, 50.000000000000000, 90.000000000000000 },\n+  { 1.7845429728697119e+34, 50.000000000000000, 95.000000000000000 },\n+  { 4.8219580855940819e+36, 50.000000000000000, 100.00000000000000 },\n+};\n+const double toler019 = 5.0000000000000029e-12;\n+\n+// Test data for nu=100.00000000000000.\n+// max(|f - f_GSL|): 186646528.00000000\n+// max(|f - f_GSL| / |f_GSL|): 2.8278213985558577e-13\n+const testcase_cyl_bessel_i<double>\n+data020[21] =\n+{\n+  { 0.0000000000000000, 100.00000000000000, 0.0000000000000000 },\n+  { 7.0935514885313123e-119, 100.00000000000000, 5.0000000000000000 },\n+  { 1.0823442017492018e-88, 100.00000000000000, 10.000000000000000 },\n+  { 5.9887888536468904e-71, 100.00000000000000, 15.000000000000000 },\n+  { 2.8703193216428771e-58, 100.00000000000000, 20.000000000000000 },\n+  { 2.4426896913122370e-48, 100.00000000000000, 25.000000000000000 },\n+  { 3.9476420053334271e-40, 100.00000000000000, 30.000000000000000 },\n+  { 4.2836596180818780e-33, 100.00000000000000, 35.000000000000000 },\n+  { 6.6249380222596129e-27, 100.00000000000000, 40.000000000000000 },\n+  { 2.3702587262788900e-21, 100.00000000000000, 45.000000000000000 },\n+  { 2.7278879470966917e-16, 100.00000000000000, 50.000000000000000 },\n+  { 1.2763258878228082e-11, 100.00000000000000, 55.000000000000000 },\n+  { 2.8832770906491972e-07, 100.00000000000000, 60.000000000000000 },\n+  { 0.0035805902717061227, 100.00000000000000, 65.000000000000000 },\n+  { 27.017219102595387, 100.00000000000000, 70.000000000000000 },\n+  { 134001.44891209516, 100.00000000000000, 75.000000000000000 },\n+  { 465194832.85060996, 100.00000000000000, 80.000000000000000 },\n+  { 1189280653119.4814, 100.00000000000000, 85.000000000000000 },\n+  { 2334119331258728.0, 100.00000000000000, 90.000000000000000 },\n+  { 3.6399223078502436e+18, 100.00000000000000, 95.000000000000000 },\n+  { 4.6415349416162005e+21, 100.00000000000000, 100.00000000000000 },\n+};\n+const double toler020 = 2.5000000000000014e-11;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_cyl_bessel_i<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::cyl_bessel_i(data[i].nu, data[i].x);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  test(data009, toler009);\n+  test(data010, toler010);\n+  test(data011, toler011);\n+  test(data012, toler012);\n+  test(data013, toler013);\n+  test(data014, toler014);\n+  test(data015, toler015);\n+  test(data016, toler016);\n+  test(data017, toler017);\n+  test(data018, toler018);\n+  test(data019, toler019);\n+  test(data020, toler020);\n+  return 0;\n+}"}, {"sha": "1d13223f33b53a5644de27600c48b4ef18a48e3e", "filename": "libstdc++-v3/testsuite/special_functions/07_cyl_bessel_i/compile.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.7 cyl_bessel_i\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+\n+  float nuf = 1.0F / 3.0F, xf = 0.5F;\n+  double nud = 1.0 / 3.0, xd = 0.5;\n+  long double nul = 1.0L / 3.0L, xl = 0.5L;\n+\n+  std::cyl_bessel_i(nuf, xf);\n+  std::cyl_bessel_if(nuf, xf);\n+  std::cyl_bessel_i(nud, xd);\n+  std::cyl_bessel_i(nul, xl);\n+  std::cyl_bessel_il(nul, xl);\n+\n+  return;\n+}\n+"}, {"sha": "6ba5307e958c6574a567e0c0ece6596094a819fe", "filename": "libstdc++-v3/testsuite/special_functions/07_cyl_bessel_i/compile_2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.7 cyl_bessel_i\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float nuf = 1.0F / 3.0F, xf = 0.5F;\n+  double nud = 1.0 / 3.0, xd = 0.5;\n+  long double nul = 1.0L / 3.0L, xl = 0.5L;\n+\n+  cyl_bessel_i(nuf, xf);\n+  cyl_bessel_if(nuf, xf);\n+  cyl_bessel_i(nud, xd);\n+  cyl_bessel_i(nul, xl);\n+  cyl_bessel_il(nul, xl);\n+\n+  return;\n+}\n+"}, {"sha": "31ca8944a1066496e4ea32c60bf2a45bb7d761a5", "filename": "libstdc++-v3/testsuite/special_functions/07_cyl_bessel_i/pr56216.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fpr56216.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fpr56216.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fpr56216.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// PR libstdc++/56216 - Crash of Bessel functions at x==0!\n+\n+#include <testsuite_hooks.h>\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  double j0 = std::cyl_bessel_j(0.0, 0.0);\n+  double i0 = std::cyl_bessel_i(0.0, 0.0);\n+  double j1 = std::cyl_bessel_j(1.0, 0.0);\n+  double i1 = std::cyl_bessel_i(1.0, 0.0);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(j0 == 1.0);\n+  VERIFY(i0 == 1.0);\n+  VERIFY(j1 == 0.0);\n+  VERIFY(i1 == 0.0);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "481a94c5f1f395f43ce7e07b7c1fe657530292c7", "filename": "libstdc++-v3/testsuite/special_functions/08_cyl_bessel_j/check_nan.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,88 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.8 cyl_bessel_j\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float nuf = 0.0F;\n+  double nud = 0.0;\n+  long double nul = 0.0L;\n+\n+  float a = std::cyl_bessel_j(nuf, xf);\n+  float b = std::cyl_bessel_jf(nuf, xf);\n+  double c = std::cyl_bessel_j(nud, xd);\n+  long double d = std::cyl_bessel_j(nul, xl);\n+  long double e = std::cyl_bessel_jl(nul, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+void\n+test02()\n+{\n+  float xf = 1.0F;\n+  double xd = 1.0;\n+  long double xl = 1.0L;\n+\n+  float nuf = std::numeric_limits<float>::quiet_NaN();\n+  double nud = std::numeric_limits<double>::quiet_NaN();\n+  long double nul = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float a = std::cyl_bessel_j(nuf, xf);\n+  float b = std::cyl_bessel_jf(nuf, xf);\n+  double c = std::cyl_bessel_j(nud, xd);\n+  long double d = std::cyl_bessel_j(nul, xl);\n+  long double e = std::cyl_bessel_jl(nul, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}\n+"}, {"sha": "9a6255b6ce9bdd189d69f54152b69a3024666fb8", "filename": "libstdc++-v3/testsuite/special_functions/08_cyl_bessel_j/check_value.cc", "status": "added", "additions": 692, "deletions": 0, "changes": 692, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,692 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  cyl_bessel_j\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+\n+// Test data for nu=0.0000000000000000.\n+// max(|f - f_GSL|): 1.6653345369377348e-16\n+// max(|f - f_GSL| / |f_GSL|): 6.5276306654894409e-16\n+const testcase_cyl_bessel_j<double>\n+data001[21] =\n+{\n+  { 1.0000000000000000, 0.0000000000000000, 0.0000000000000000 },\n+  { 0.98443592929585266, 0.0000000000000000, 0.25000000000000000 },\n+  { 0.93846980724081297, 0.0000000000000000, 0.50000000000000000 },\n+  { 0.86424227516664853, 0.0000000000000000, 0.75000000000000000 },\n+  { 0.76519768655796661, 0.0000000000000000, 1.0000000000000000 },\n+  { 0.64590608527128535, 0.0000000000000000, 1.2500000000000000 },\n+  { 0.51182767173591814, 0.0000000000000000, 1.5000000000000000 },\n+  { 0.36903253018515075, 0.0000000000000000, 1.7500000000000000 },\n+  { 0.22389077914123562, 0.0000000000000000, 2.0000000000000000 },\n+  { 0.082749851288734022, 0.0000000000000000, 2.2500000000000000 },\n+  { -0.048383776468197998, 0.0000000000000000, 2.5000000000000000 },\n+  { -0.16414142780851368, 0.0000000000000000, 2.7500000000000000 },\n+  { -0.26005195490193334, 0.0000000000000000, 3.0000000000000000 },\n+  { -0.33275080217061132, 0.0000000000000000, 3.2500000000000000 },\n+  { -0.38012773998726335, 0.0000000000000000, 3.5000000000000000 },\n+  { -0.40140605493617426, 0.0000000000000000, 3.7500000000000000 },\n+  { -0.39714980986384740, 0.0000000000000000, 4.0000000000000000 },\n+  { -0.36919977029989554, 0.0000000000000000, 4.2500000000000000 },\n+  { -0.32054250898512149, 0.0000000000000000, 4.5000000000000000 },\n+  { -0.25512082749137405, 0.0000000000000000, 4.7500000000000000 },\n+  { -0.17759677131433835, 0.0000000000000000, 5.0000000000000000 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+\n+// Test data for nu=0.33333333333333331.\n+// max(|f - f_GSL|): 7.7715611723760958e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.2121143083098064e-15\n+const testcase_cyl_bessel_j<double>\n+data002[21] =\n+{\n+  { 0.0000000000000000, 0.33333333333333331, 0.0000000000000000 },\n+  { 0.55338359549647709, 0.33333333333333331, 0.25000000000000000 },\n+  { 0.67283082949794537, 0.33333333333333331, 0.50000000000000000 },\n+  { 0.72490863199379008, 0.33333333333333331, 0.75000000000000000 },\n+  { 0.73087640216944760, 0.33333333333333331, 1.0000000000000000 },\n+  { 0.69953374433894455, 0.33333333333333331, 1.2500000000000000 },\n+  { 0.63713263706489176, 0.33333333333333331, 1.5000000000000000 },\n+  { 0.54956352730788460, 0.33333333333333331, 1.7500000000000000 },\n+  { 0.44293981814857586, 0.33333333333333331, 2.0000000000000000 },\n+  { 0.32366988946292502, 0.33333333333333331, 2.2500000000000000 },\n+  { 0.19832093341860796, 0.33333333333333331, 2.5000000000000000 },\n+  { 0.073389637874297489, 0.33333333333333331, 2.7500000000000000 },\n+  { -0.044963820940233351, 0.33333333333333331, 3.0000000000000000 },\n+  { -0.15118395956666372, 0.33333333333333331, 3.2500000000000000 },\n+  { -0.24056593952693625, 0.33333333333333331, 3.5000000000000000 },\n+  { -0.30946094681921288, 0.33333333333333331, 3.7500000000000000 },\n+  { -0.35542737345457609, 0.33333333333333331, 4.0000000000000000 },\n+  { -0.37731852825457068, 0.33333333333333331, 4.2500000000000000 },\n+  { -0.37530189159358079, 0.33333333333333331, 4.5000000000000000 },\n+  { -0.35080916720916927, 0.33333333333333331, 4.7500000000000000 },\n+  { -0.30642046380026405, 0.33333333333333331, 5.0000000000000000 },\n+};\n+const double toler002 = 2.5000000000000020e-13;\n+\n+// Test data for nu=0.50000000000000000.\n+// max(|f - f_GSL|): 7.7715611723760958e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.1959227189513475e-15\n+const testcase_cyl_bessel_j<double>\n+data003[21] =\n+{\n+  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },\n+  { 0.39479959874136972, 0.50000000000000000, 0.25000000000000000 },\n+  { 0.54097378993452760, 0.50000000000000000, 0.50000000000000000 },\n+  { 0.62800587637588623, 0.50000000000000000, 0.75000000000000000 },\n+  { 0.67139670714180244, 0.50000000000000000, 1.0000000000000000 },\n+  { 0.67724253810014312, 0.50000000000000000, 1.2500000000000000 },\n+  { 0.64983807475374655, 0.50000000000000000, 1.5000000000000000 },\n+  { 0.59348525447147382, 0.50000000000000000, 1.7500000000000000 },\n+  { 0.51301613656182721, 0.50000000000000000, 2.0000000000000000 },\n+  { 0.41387506064759982, 0.50000000000000000, 2.2500000000000000 },\n+  { 0.30200490606236535, 0.50000000000000000, 2.5000000000000000 },\n+  { 0.18363332138431521, 0.50000000000000000, 2.7500000000000000 },\n+  { 0.065008182877375753, 0.50000000000000000, 3.0000000000000000 },\n+  { -0.047885729975898544, 0.50000000000000000, 3.2500000000000000 },\n+  { -0.14960456964952620, 0.50000000000000000, 3.5000000000000000 },\n+  { -0.23549801845815513, 0.50000000000000000, 3.7500000000000000 },\n+  { -0.30192051329163944, 0.50000000000000000, 4.0000000000000000 },\n+  { -0.34638850218952444, 0.50000000000000000, 4.2500000000000000 },\n+  { -0.36767487332724025, 0.50000000000000000, 4.5000000000000000 },\n+  { -0.36583563802350400, 0.50000000000000000, 4.7500000000000000 },\n+  { -0.34216798479816180, 0.50000000000000000, 5.0000000000000000 },\n+};\n+const double toler003 = 2.5000000000000020e-13;\n+\n+// Test data for nu=0.66666666666666663.\n+// max(|f - f_GSL|): 7.7715611723760958e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.4163878424300161e-15\n+const testcase_cyl_bessel_j<double>\n+data004[21] =\n+{\n+  { 0.0000000000000000, 0.66666666666666663, 0.0000000000000000 },\n+  { 0.27434438998865135, 0.66666666666666663, 0.25000000000000000 },\n+  { 0.42331075068448321, 0.66666666666666663, 0.50000000000000000 },\n+  { 0.52870551548162792, 0.66666666666666663, 0.75000000000000000 },\n+  { 0.59794997367362801, 0.66666666666666663, 1.0000000000000000 },\n+  { 0.63338726889075891, 0.66666666666666663, 1.2500000000000000 },\n+  { 0.63673234502877385, 0.66666666666666663, 1.5000000000000000 },\n+  { 0.61022230460131899, 0.66666666666666663, 1.7500000000000000 },\n+  { 0.55696967691913712, 0.66666666666666663, 2.0000000000000000 },\n+  { 0.48101276749106114, 0.66666666666666663, 2.2500000000000000 },\n+  { 0.38721242477084306, 0.66666666666666663, 2.5000000000000000 },\n+  { 0.28105724771080542, 0.66666666666666663, 2.7500000000000000 },\n+  { 0.16841218049067044, 0.66666666666666663, 3.0000000000000000 },\n+  { 0.055235893475364915, 0.66666666666666663, 3.2500000000000000 },\n+  { -0.052711584404031925, 0.66666666666666663, 3.5000000000000000 },\n+  { -0.15015178042293029, 0.66666666666666663, 3.7500000000000000 },\n+  { -0.23254408502670390, 0.66666666666666663, 4.0000000000000000 },\n+  { -0.29630067002972543, 0.66666666666666663, 4.2500000000000000 },\n+  { -0.33894810189777724, 0.66666666666666663, 4.5000000000000000 },\n+  { -0.35922706960321099, 0.66666666666666663, 4.7500000000000000 },\n+  { -0.35712533549168868, 0.66666666666666663, 5.0000000000000000 },\n+};\n+const double toler004 = 2.5000000000000020e-13;\n+\n+// Test data for nu=1.0000000000000000.\n+// max(|f - f_GSL|): 2.2204460492503131e-16\n+// max(|f - f_GSL| / |f_GSL|): 6.7783500059747526e-16\n+const testcase_cyl_bessel_j<double>\n+data005[21] =\n+{\n+  { 0.0000000000000000, 1.0000000000000000, 0.0000000000000000 },\n+  { 0.12402597732272694, 1.0000000000000000, 0.25000000000000000 },\n+  { 0.24226845767487390, 1.0000000000000000, 0.50000000000000000 },\n+  { 0.34924360217486222, 1.0000000000000000, 0.75000000000000000 },\n+  { 0.44005058574493355, 1.0000000000000000, 1.0000000000000000 },\n+  { 0.51062326031988059, 1.0000000000000000, 1.2500000000000000 },\n+  { 0.55793650791009952, 1.0000000000000000, 1.5000000000000000 },\n+  { 0.58015619763899240, 1.0000000000000000, 1.7500000000000000 },\n+  { 0.57672480775687363, 1.0000000000000000, 2.0000000000000000 },\n+  { 0.54837835664696011, 1.0000000000000000, 2.2500000000000000 },\n+  { 0.49709410246427416, 1.0000000000000000, 2.5000000000000000 },\n+  { 0.42597230295790256, 1.0000000000000000, 2.7500000000000000 },\n+  { 0.33905895852593648, 1.0000000000000000, 3.0000000000000000 },\n+  { 0.24111968801520400, 1.0000000000000000, 3.2500000000000000 },\n+  { 0.13737752736232706, 1.0000000000000000, 3.5000000000000000 },\n+  { 0.033229349129679724, 1.0000000000000000, 3.7500000000000000 },\n+  { -0.066043328023549230, 1.0000000000000000, 4.0000000000000000 },\n+  { -0.15555319297834286, 1.0000000000000000, 4.2500000000000000 },\n+  { -0.23106043192337070, 1.0000000000000000, 4.5000000000000000 },\n+  { -0.28918679864711044, 1.0000000000000000, 4.7500000000000000 },\n+  { -0.32757913759146529, 1.0000000000000000, 5.0000000000000000 },\n+};\n+const double toler005 = 2.5000000000000020e-13;\n+\n+// Test data for nu=2.0000000000000000.\n+// max(|f - f_GSL|): 5.5511151231257827e-17\n+// max(|f - f_GSL| / |f_GSL|): 2.4155555971238584e-16\n+const testcase_cyl_bessel_j<double>\n+data006[21] =\n+{\n+  { 0.0000000000000000, 2.0000000000000000, 0.0000000000000000 },\n+  { 0.0077718892859626760, 2.0000000000000000, 0.25000000000000000 },\n+  { 0.030604023458682638, 2.0000000000000000, 0.50000000000000000 },\n+  { 0.067073997299650551, 2.0000000000000000, 0.75000000000000000 },\n+  { 0.11490348493190047, 2.0000000000000000, 1.0000000000000000 },\n+  { 0.17109113124052350, 2.0000000000000000, 1.2500000000000000 },\n+  { 0.23208767214421472, 2.0000000000000000, 1.5000000000000000 },\n+  { 0.29400312425941216, 2.0000000000000000, 1.7500000000000000 },\n+  { 0.35283402861563773, 2.0000000000000000, 2.0000000000000000 },\n+  { 0.40469757684189717, 2.0000000000000000, 2.2500000000000000 },\n+  { 0.44605905843961718, 2.0000000000000000, 2.5000000000000000 },\n+  { 0.47393946632335160, 2.0000000000000000, 2.7500000000000000 },\n+  { 0.48609126058589119, 2.0000000000000000, 3.0000000000000000 },\n+  { 0.48113214864150627, 2.0000000000000000, 3.2500000000000000 },\n+  { 0.45862918419430765, 2.0000000000000000, 3.5000000000000000 },\n+  { 0.41912837447200352, 2.0000000000000000, 3.7500000000000000 },\n+  { 0.36412814585207293, 2.0000000000000000, 4.0000000000000000 },\n+  { 0.29599826772185189, 2.0000000000000000, 4.2500000000000000 },\n+  { 0.21784898368584549, 2.0000000000000000, 4.5000000000000000 },\n+  { 0.13335796490311685, 2.0000000000000000, 4.7500000000000000 },\n+  { 0.046565116277751971, 2.0000000000000000, 5.0000000000000000 },\n+};\n+const double toler006 = 2.5000000000000020e-13;\n+\n+// Test data for nu=5.0000000000000000.\n+// max(|f - f_GSL|): 1.3877787807814457e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.4609680807504906e-15\n+const testcase_cyl_bessel_j<double>\n+data007[21] =\n+{\n+  { 0.0000000000000000, 5.0000000000000000, 0.0000000000000000 },\n+  { 2.5365161587472413e-07, 5.0000000000000000, 0.25000000000000000 },\n+  { 8.0536272413574753e-06, 5.0000000000000000, 0.50000000000000000 },\n+  { 6.0364166510576438e-05, 5.0000000000000000, 0.75000000000000000 },\n+  { 0.00024975773021123450, 5.0000000000000000, 1.0000000000000000 },\n+  { 0.00074440885254749821, 5.0000000000000000, 1.2500000000000000 },\n+  { 0.0017994217673606111, 5.0000000000000000, 1.5000000000000000 },\n+  { 0.0037577257273157133, 5.0000000000000000, 1.7500000000000000 },\n+  { 0.0070396297558716842, 5.0000000000000000, 2.0000000000000000 },\n+  { 0.012121078633445751, 5.0000000000000000, 2.2500000000000000 },\n+  { 0.019501625134503223, 5.0000000000000000, 2.5000000000000000 },\n+  { 0.029664058320006174, 5.0000000000000000, 2.7500000000000000 },\n+  { 0.043028434877047578, 5.0000000000000000, 3.0000000000000000 },\n+  { 0.059903888098560426, 5.0000000000000000, 3.2500000000000000 },\n+  { 0.080441986647991792, 5.0000000000000000, 3.5000000000000000 },\n+  { 0.10459554742314070, 5.0000000000000000, 3.7500000000000000 },\n+  { 0.13208665604709827, 5.0000000000000000, 4.0000000000000000 },\n+  { 0.16238721643623680, 5.0000000000000000, 4.2500000000000000 },\n+  { 0.19471465863871368, 5.0000000000000000, 4.5000000000000000 },\n+  { 0.22804452118769436, 5.0000000000000000, 4.7500000000000000 },\n+  { 0.26114054612017007, 5.0000000000000000, 5.0000000000000000 },\n+};\n+const double toler007 = 2.5000000000000020e-13;\n+\n+// Test data for nu=10.000000000000000.\n+// max(|f - f_GSL|): 3.2526065174565133e-18\n+// max(|f - f_GSL| / |f_GSL|): 3.9336732209858561e-15\n+const testcase_cyl_bessel_j<double>\n+data008[21] =\n+{\n+  { 0.0000000000000000, 10.000000000000000, 0.0000000000000000 },\n+  { 2.5628321598050096e-16, 10.000000000000000, 0.25000000000000000 },\n+  { 2.6131773608228023e-13, 10.000000000000000, 0.50000000000000000 },\n+  { 1.4962171311759677e-11, 10.000000000000000, 0.75000000000000000 },\n+  { 2.6306151236874524e-10, 10.000000000000000, 1.0000000000000000 },\n+  { 2.4187548221114514e-09, 10.000000000000000, 1.2500000000000000 },\n+  { 1.4743269078039996e-08, 10.000000000000000, 1.5000000000000000 },\n+  { 6.7608502849897560e-08, 10.000000000000000, 1.7500000000000000 },\n+  { 2.5153862827167358e-07, 10.000000000000000, 2.0000000000000000 },\n+  { 7.9717051583730038e-07, 10.000000000000000, 2.2500000000000000 },\n+  { 2.2247284173983839e-06, 10.000000000000000, 2.5000000000000000 },\n+  { 5.5985475639210430e-06, 10.000000000000000, 2.7500000000000000 },\n+  { 1.2928351645715880e-05, 10.000000000000000, 3.0000000000000000 },\n+  { 2.7761691354244538e-05, 10.000000000000000, 3.2500000000000000 },\n+  { 5.6009495875078844e-05, 10.000000000000000, 3.5000000000000000 },\n+  { 0.00010703761729231951, 10.000000000000000, 3.7500000000000000 },\n+  { 0.00019504055466003446, 10.000000000000000, 4.0000000000000000 },\n+  { 0.00034068888474064193, 10.000000000000000, 4.2500000000000000 },\n+  { 0.00057300977667164505, 10.000000000000000, 4.5000000000000000 },\n+  { 0.00093142172588886810, 10.000000000000000, 4.7500000000000000 },\n+  { 0.0014678026473104744, 10.000000000000000, 5.0000000000000000 },\n+};\n+const double toler008 = 2.5000000000000020e-13;\n+\n+// Test data for nu=20.000000000000000.\n+// max(|f - f_GSL|): 1.9387045606711586e-26\n+// max(|f - f_GSL| / |f_GSL|): 2.1275572270326799e-15\n+const testcase_cyl_bessel_j<double>\n+data009[21] =\n+{\n+  { 0.0000000000000000, 20.000000000000000, 0.0000000000000000 },\n+  { 3.5624805510586969e-37, 20.000000000000000, 0.25000000000000000 },\n+  { 3.7272019617047132e-31, 20.000000000000000, 0.50000000000000000 },\n+  { 1.2347870693633488e-27, 20.000000000000000, 0.75000000000000000 },\n+  { 3.8735030085246562e-25, 20.000000000000000, 1.0000000000000000 },\n+  { 3.3372897667043766e-23, 20.000000000000000, 1.2500000000000000 },\n+  { 1.2689972189332558e-21, 20.000000000000000, 1.5000000000000000 },\n+  { 2.7427715944032989e-20, 20.000000000000000, 1.7500000000000000 },\n+  { 3.9189728050907524e-19, 20.000000000000000, 2.0000000000000000 },\n+  { 4.0805232551365158e-18, 20.000000000000000, 2.2500000000000000 },\n+  { 3.3090793836587786e-17, 20.000000000000000, 2.5000000000000000 },\n+  { 2.1915404680645990e-16, 20.000000000000000, 2.7500000000000000 },\n+  { 1.2275946737992981e-15, 20.000000000000000, 3.0000000000000000 },\n+  { 5.9727663938305382e-15, 20.000000000000000, 3.2500000000000000 },\n+  { 2.5768553102807590e-14, 20.000000000000000, 3.5000000000000000 },\n+  { 1.0021112208287217e-13, 20.000000000000000, 3.7500000000000000 },\n+  { 3.5595116285938516e-13, 20.000000000000000, 4.0000000000000000 },\n+  { 1.1673622958555074e-12, 20.000000000000000, 4.2500000000000000 },\n+  { 3.5665470983611762e-12, 20.000000000000000, 4.5000000000000000 },\n+  { 1.0227564044880958e-11, 20.000000000000000, 4.7500000000000000 },\n+  { 2.7703300521289426e-11, 20.000000000000000, 5.0000000000000000 },\n+};\n+const double toler009 = 2.5000000000000020e-13;\n+//  cyl_bessel_j\n+\n+// Test data for nu=0.0000000000000000.\n+// max(|f - f_GSL|): 7.6709472107694410e-15\n+// max(|f - f_GSL| / |f_GSL|): 4.1048891312746575e-13\n+const testcase_cyl_bessel_j<double>\n+data010[21] =\n+{\n+  { 1.0000000000000000, 0.0000000000000000, 0.0000000000000000 },\n+  { -0.17759677131433835, 0.0000000000000000, 5.0000000000000000 },\n+  { -0.24593576445134835, 0.0000000000000000, 10.000000000000000 },\n+  { -0.014224472826780771, 0.0000000000000000, 15.000000000000000 },\n+  { 0.16702466434058319, 0.0000000000000000, 20.000000000000000 },\n+  { 0.096266783275958154, 0.0000000000000000, 25.000000000000000 },\n+  { -0.086367983581040142, 0.0000000000000000, 30.000000000000000 },\n+  { -0.12684568275631256, 0.0000000000000000, 35.000000000000000 },\n+  { 0.0073668905842374085, 0.0000000000000000, 40.000000000000000 },\n+  { 0.11581867067325631, 0.0000000000000000, 45.000000000000000 },\n+  { 0.055812327669251746, 0.0000000000000000, 50.000000000000000 },\n+  { -0.074548302648236808, 0.0000000000000000, 55.000000000000000 },\n+  { -0.091471804089061859, 0.0000000000000000, 60.000000000000000 },\n+  { 0.018687343227677979, 0.0000000000000000, 65.000000000000000 },\n+  { 0.094908726483013545, 0.0000000000000000, 70.000000000000000 },\n+  { 0.034643913805097008, 0.0000000000000000, 75.000000000000000 },\n+  { -0.069742165512210033, 0.0000000000000000, 80.000000000000000 },\n+  { -0.070940394796273273, 0.0000000000000000, 85.000000000000000 },\n+  { 0.026630016699969526, 0.0000000000000000, 90.000000000000000 },\n+  { 0.081811967783384135, 0.0000000000000000, 95.000000000000000 },\n+  { 0.019985850304223170, 0.0000000000000000, 100.00000000000000 },\n+};\n+const double toler010 = 2.5000000000000014e-11;\n+\n+// Test data for nu=0.33333333333333331.\n+// max(|f - f_GSL|): 7.9311557321659620e-15\n+// max(|f - f_GSL| / |f_GSL|): 4.2444155318123211e-12\n+const testcase_cyl_bessel_j<double>\n+data011[21] =\n+{\n+  { 0.0000000000000000, 0.33333333333333331, 0.0000000000000000 },\n+  { -0.30642046380026405, 0.33333333333333331, 5.0000000000000000 },\n+  { -0.18614516704869571, 0.33333333333333331, 10.000000000000000 },\n+  { 0.089740004221152650, 0.33333333333333331, 15.000000000000000 },\n+  { 0.17606058001293901, 0.33333333333333331, 20.000000000000000 },\n+  { 0.020097162141383233, 0.33333333333333331, 25.000000000000000 },\n+  { -0.13334053387426159, 0.33333333333333331, 30.000000000000000 },\n+  { -0.087118009397765497, 0.33333333333333331, 35.000000000000000 },\n+  { 0.069202942818858179, 0.33333333333333331, 40.000000000000000 },\n+  { 0.11387616964518317, 0.33333333333333331, 45.000000000000000 },\n+  { -0.00057226680771808045, 0.33333333333333331, 50.000000000000000 },\n+  { -0.10331600929280822, 0.33333333333333331, 55.000000000000000 },\n+  { -0.055618147270528003, 0.33333333333333331, 60.000000000000000 },\n+  { 0.064711954014113948, 0.33333333333333331, 65.000000000000000 },\n+  { 0.086879926462481605, 0.33333333333333331, 70.000000000000000 },\n+  { -0.012614484229891068, 0.33333333333333331, 75.000000000000000 },\n+  { -0.088199784400034537, 0.33333333333333331, 80.000000000000000 },\n+  { -0.036703611076564523, 0.33333333333333331, 85.000000000000000 },\n+  { 0.062916286828779547, 0.33333333333333331, 90.000000000000000 },\n+  { 0.069465244416806030, 0.33333333333333331, 95.000000000000000 },\n+  { -0.021271244853702364, 0.33333333333333331, 100.00000000000000 },\n+};\n+const double toler011 = 2.5000000000000017e-10;\n+\n+// Test data for nu=0.50000000000000000.\n+// max(|f - f_GSL|): 7.4246164771807344e-15\n+// max(|f - f_GSL| / |f_GSL|): 3.6725252809051799e-13\n+const testcase_cyl_bessel_j<double>\n+data012[21] =\n+{\n+  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },\n+  { -0.34216798479816180, 0.50000000000000000, 5.0000000000000000 },\n+  { -0.13726373575505049, 0.50000000000000000, 10.000000000000000 },\n+  { 0.13396768882243937, 0.50000000000000000, 15.000000000000000 },\n+  { 0.16288076385502984, 0.50000000000000000, 20.000000000000000 },\n+  { -0.021120283599650493, 0.50000000000000000, 25.000000000000000 },\n+  { -0.14392965337039987, 0.50000000000000000, 30.000000000000000 },\n+  { -0.057747757589458777, 0.50000000000000000, 35.000000000000000 },\n+  { 0.094000962389533649, 0.50000000000000000, 40.000000000000000 },\n+  { 0.10120783324271411, 0.50000000000000000, 45.000000000000000 },\n+  { -0.029605831888924641, 0.50000000000000000, 50.000000000000000 },\n+  { -0.10756039213265806, 0.50000000000000000, 55.000000000000000 },\n+  { -0.031397461182520438, 0.50000000000000000, 60.000000000000000 },\n+  { 0.081827430775628554, 0.50000000000000000, 65.000000000000000 },\n+  { 0.073802429539054554, 0.50000000000000000, 70.000000000000000 },\n+  { -0.035727009681702615, 0.50000000000000000, 75.000000000000000 },\n+  { -0.088661035811765460, 0.50000000000000000, 80.000000000000000 },\n+  { -0.015238065106312516, 0.50000000000000000, 85.000000000000000 },\n+  { 0.075189068550269425, 0.50000000000000000, 90.000000000000000 },\n+  { 0.055932643481494133, 0.50000000000000000, 95.000000000000000 },\n+  { -0.040402132716252127, 0.50000000000000000, 100.00000000000000 },\n+};\n+const double toler012 = 2.5000000000000014e-11;\n+\n+// Test data for nu=0.66666666666666663.\n+// max(|f - f_GSL|): 6.3629657098829284e-15\n+// max(|f - f_GSL| / |f_GSL|): 1.2254869540384518e-12\n+const testcase_cyl_bessel_j<double>\n+data013[21] =\n+{\n+  { 0.0000000000000000, 0.66666666666666663, 0.0000000000000000 },\n+  { -0.35712533549168868, 0.66666666666666663, 5.0000000000000000 },\n+  { -0.080149603304315808, 0.66666666666666663, 10.000000000000000 },\n+  { 0.16918875175798079, 0.66666666666666663, 15.000000000000000 },\n+  { 0.13904826122116531, 0.66666666666666663, 20.000000000000000 },\n+  { -0.060770629698497600, 0.66666666666666663, 25.000000000000000 },\n+  { -0.14489851974205062, 0.66666666666666663, 30.000000000000000 },\n+  { -0.024604880159644394, 0.66666666666666663, 35.000000000000000 },\n+  { 0.11243936464912010, 0.66666666666666663, 40.000000000000000 },\n+  { 0.081776275512525309, 0.66666666666666663, 45.000000000000000 },\n+  { -0.056589908749367777, 0.66666666666666663, 50.000000000000000 },\n+  { -0.10455814523765931, 0.66666666666666663, 55.000000000000000 },\n+  { -0.0051030148548608456, 0.66666666666666663, 60.000000000000000 },\n+  { 0.093398227061639236, 0.66666666666666663, 65.000000000000000 },\n+  { 0.055763883611864913, 0.66666666666666663, 70.000000000000000 },\n+  { -0.056395322915757364, 0.66666666666666663, 75.000000000000000 },\n+  { -0.083131347805783087, 0.66666666666666663, 80.000000000000000 },\n+  { 0.0072315397874096648, 0.66666666666666663, 85.000000000000000 },\n+  { 0.082362798520905250, 0.66666666666666663, 90.000000000000000 },\n+  { 0.038630504403446168, 0.66666666666666663, 95.000000000000000 },\n+  { -0.056778819380529734, 0.66666666666666663, 100.00000000000000 },\n+};\n+const double toler013 = 1.0000000000000006e-10;\n+\n+// Test data for nu=1.0000000000000000.\n+// max(|f - f_GSL|): 7.1435912740724916e-15\n+// max(|f - f_GSL| / |f_GSL|): 1.7857949645087573e-12\n+const testcase_cyl_bessel_j<double>\n+data014[21] =\n+{\n+  { 0.0000000000000000, 1.0000000000000000, 0.0000000000000000 },\n+  { -0.32757913759146529, 1.0000000000000000, 5.0000000000000000 },\n+  { 0.043472746168861459, 1.0000000000000000, 10.000000000000000 },\n+  { 0.20510403861352280, 1.0000000000000000, 15.000000000000000 },\n+  { 0.066833124175850078, 1.0000000000000000, 20.000000000000000 },\n+  { -0.12535024958028990, 1.0000000000000000, 25.000000000000000 },\n+  { -0.11875106261662294, 1.0000000000000000, 30.000000000000000 },\n+  { 0.043990942179625646, 1.0000000000000000, 35.000000000000000 },\n+  { 0.12603831803758500, 1.0000000000000000, 40.000000000000000 },\n+  { 0.028348854376424561, 1.0000000000000000, 45.000000000000000 },\n+  { -0.097511828125175129, 1.0000000000000000, 50.000000000000000 },\n+  { -0.078250038308684711, 1.0000000000000000, 55.000000000000000 },\n+  { 0.046598383758166370, 1.0000000000000000, 60.000000000000000 },\n+  { 0.097330172226126929, 1.0000000000000000, 65.000000000000000 },\n+  { 0.0099877887848385128, 1.0000000000000000, 70.000000000000000 },\n+  { -0.085139995044829081, 1.0000000000000000, 75.000000000000000 },\n+  { -0.056057296675712555, 1.0000000000000000, 80.000000000000000 },\n+  { 0.049151460334891130, 1.0000000000000000, 85.000000000000000 },\n+  { 0.079925646708868092, 1.0000000000000000, 90.000000000000000 },\n+  { -0.0023925612997269283, 1.0000000000000000, 95.000000000000000 },\n+  { -0.077145352014112129, 1.0000000000000000, 100.00000000000000 },\n+};\n+const double toler014 = 1.0000000000000006e-10;\n+\n+// Test data for nu=2.0000000000000000.\n+// max(|f - f_GSL|): 7.6050277186823223e-15\n+// max(|f - f_GSL| / |f_GSL|): 2.0010877493528614e-12\n+const testcase_cyl_bessel_j<double>\n+data015[21] =\n+{\n+  { 0.0000000000000000, 2.0000000000000000, 0.0000000000000000 },\n+  { 0.046565116277751971, 2.0000000000000000, 5.0000000000000000 },\n+  { 0.25463031368512068, 2.0000000000000000, 10.000000000000000 },\n+  { 0.041571677975250486, 2.0000000000000000, 15.000000000000000 },\n+  { -0.16034135192299820, 2.0000000000000000, 20.000000000000000 },\n+  { -0.10629480324238134, 2.0000000000000000, 25.000000000000000 },\n+  { 0.078451246073265299, 2.0000000000000000, 30.000000000000000 },\n+  { 0.12935945088086259, 2.0000000000000000, 35.000000000000000 },\n+  { -0.0010649746823579794, 2.0000000000000000, 40.000000000000000 },\n+  { -0.11455872158985966, 2.0000000000000000, 45.000000000000000 },\n+  { -0.059712800794258863, 2.0000000000000000, 50.000000000000000 },\n+  { 0.071702846709739240, 2.0000000000000000, 55.000000000000000 },\n+  { 0.093025083547667420, 2.0000000000000000, 60.000000000000000 },\n+  { -0.015692568697643128, 2.0000000000000000, 65.000000000000000 },\n+  { -0.094623361089161029, 2.0000000000000000, 70.000000000000000 },\n+  { -0.036914313672959179, 2.0000000000000000, 75.000000000000000 },\n+  { 0.068340733095317172, 2.0000000000000000, 80.000000000000000 },\n+  { 0.072096899745329540, 2.0000000000000000, 85.000000000000000 },\n+  { -0.024853891217550248, 2.0000000000000000, 90.000000000000000 },\n+  { -0.081862337494957332, 2.0000000000000000, 95.000000000000000 },\n+  { -0.021528757344505364, 2.0000000000000000, 100.00000000000000 },\n+};\n+const double toler015 = 2.5000000000000017e-10;\n+\n+// Test data for nu=5.0000000000000000.\n+// max(|f - f_GSL|): 6.8521577301083880e-15\n+// max(|f - f_GSL| / |f_GSL|): 5.6813560677959848e-13\n+const testcase_cyl_bessel_j<double>\n+data016[21] =\n+{\n+  { 0.0000000000000000, 5.0000000000000000, 0.0000000000000000 },\n+  { 0.26114054612017007, 5.0000000000000000, 5.0000000000000000 },\n+  { -0.23406152818679371, 5.0000000000000000, 10.000000000000000 },\n+  { 0.13045613456502966, 5.0000000000000000, 15.000000000000000 },\n+  { 0.15116976798239498, 5.0000000000000000, 20.000000000000000 },\n+  { -0.066007995398422933, 5.0000000000000000, 25.000000000000000 },\n+  { -0.14324029551207709, 5.0000000000000000, 30.000000000000000 },\n+  { -0.0015053072953907251, 5.0000000000000000, 35.000000000000000 },\n+  { 0.12257346597711777, 5.0000000000000000, 40.000000000000000 },\n+  { 0.057984499200954109, 5.0000000000000000, 45.000000000000000 },\n+  { -0.081400247696569616, 5.0000000000000000, 50.000000000000000 },\n+  { -0.092569895786432765, 5.0000000000000000, 55.000000000000000 },\n+  { 0.027454744228344204, 5.0000000000000000, 60.000000000000000 },\n+  { 0.099110527701539025, 5.0000000000000000, 65.000000000000000 },\n+  { 0.026058129823895364, 5.0000000000000000, 70.000000000000000 },\n+  { -0.078523977013751398, 5.0000000000000000, 75.000000000000000 },\n+  { -0.065862349140031584, 5.0000000000000000, 80.000000000000000 },\n+  { 0.038669072284680979, 5.0000000000000000, 85.000000000000000 },\n+  { 0.082759319528415157, 5.0000000000000000, 90.000000000000000 },\n+  { 0.0079423372702472871, 5.0000000000000000, 95.000000000000000 },\n+  { -0.074195736964513898, 5.0000000000000000, 100.00000000000000 },\n+};\n+const double toler016 = 5.0000000000000028e-11;\n+\n+// Test data for nu=10.000000000000000.\n+// max(|f - f_GSL|): 7.2303274478713320e-15\n+// max(|f - f_GSL| / |f_GSL|): 3.6974790630140835e-13\n+const testcase_cyl_bessel_j<double>\n+data017[21] =\n+{\n+  { 0.0000000000000000, 10.000000000000000, 0.0000000000000000 },\n+  { 0.0014678026473104744, 10.000000000000000, 5.0000000000000000 },\n+  { 0.20748610663335865, 10.000000000000000, 10.000000000000000 },\n+  { -0.090071811047659087, 10.000000000000000, 15.000000000000000 },\n+  { 0.18648255802394512, 10.000000000000000, 20.000000000000000 },\n+  { -0.075179843948523312, 10.000000000000000, 25.000000000000000 },\n+  { -0.12987689399858882, 10.000000000000000, 30.000000000000000 },\n+  { 0.063546391343962866, 10.000000000000000, 35.000000000000000 },\n+  { 0.11938336278226094, 10.000000000000000, 40.000000000000000 },\n+  { -0.026971402475010831, 10.000000000000000, 45.000000000000000 },\n+  { -0.11384784914946940, 10.000000000000000, 50.000000000000000 },\n+  { -0.015773790303746080, 10.000000000000000, 55.000000000000000 },\n+  { 0.097177143328071064, 10.000000000000000, 60.000000000000000 },\n+  { 0.054617389951112129, 10.000000000000000, 65.000000000000000 },\n+  { -0.065870338561952013, 10.000000000000000, 70.000000000000000 },\n+  { -0.080417867891894437, 10.000000000000000, 75.000000000000000 },\n+  { 0.024043850978184747, 10.000000000000000, 80.000000000000000 },\n+  { 0.086824832700067869, 10.000000000000000, 85.000000000000000 },\n+  { 0.019554748856312299, 10.000000000000000, 90.000000000000000 },\n+  { -0.072341598669443757, 10.000000000000000, 95.000000000000000 },\n+  { -0.054732176935472096, 10.000000000000000, 100.00000000000000 },\n+};\n+const double toler017 = 2.5000000000000014e-11;\n+\n+// Test data for nu=20.000000000000000.\n+// max(|f - f_GSL|): 7.7177847446208148e-15\n+// max(|f - f_GSL| / |f_GSL|): 1.1191513260854523e-12\n+const testcase_cyl_bessel_j<double>\n+data018[21] =\n+{\n+  { 0.0000000000000000, 20.000000000000000, 0.0000000000000000 },\n+  { 2.7703300521289426e-11, 20.000000000000000, 5.0000000000000000 },\n+  { 1.1513369247813403e-05, 20.000000000000000, 10.000000000000000 },\n+  { 0.0073602340792234934, 20.000000000000000, 15.000000000000000 },\n+  { 0.16474777377532665, 20.000000000000000, 20.000000000000000 },\n+  { 0.051994049228303307, 20.000000000000000, 25.000000000000000 },\n+  { 0.0048310199934040923, 20.000000000000000, 30.000000000000000 },\n+  { -0.10927417397178038, 20.000000000000000, 35.000000000000000 },\n+  { 0.12779393355084889, 20.000000000000000, 40.000000000000000 },\n+  { 0.0047633437900313621, 20.000000000000000, 45.000000000000000 },\n+  { -0.11670435275957974, 20.000000000000000, 50.000000000000000 },\n+  { 0.025389204574566639, 20.000000000000000, 55.000000000000000 },\n+  { 0.10266020557876326, 20.000000000000000, 60.000000000000000 },\n+  { -0.023138582263434154, 20.000000000000000, 65.000000000000000 },\n+  { -0.096058573489952365, 20.000000000000000, 70.000000000000000 },\n+  { 0.0068961047221522270, 20.000000000000000, 75.000000000000000 },\n+  { 0.090565405489918357, 20.000000000000000, 80.000000000000000 },\n+  { 0.015985497599497172, 20.000000000000000, 85.000000000000000 },\n+  { -0.080345344044422534, 20.000000000000000, 90.000000000000000 },\n+  { -0.040253075701614051, 20.000000000000000, 95.000000000000000 },\n+  { 0.062217458498338672, 20.000000000000000, 100.00000000000000 },\n+};\n+const double toler018 = 1.0000000000000006e-10;\n+\n+// Test data for nu=50.000000000000000.\n+// max(|f - f_GSL|): 6.6543992538470320e-15\n+// max(|f - f_GSL| / |f_GSL|): 1.6466369526724007e-13\n+const testcase_cyl_bessel_j<double>\n+data019[21] =\n+{\n+  { 0.0000000000000000, 50.000000000000000, 0.0000000000000000 },\n+  { 2.2942476159525415e-45, 50.000000000000000, 5.0000000000000000 },\n+  { 1.7845136078715964e-30, 50.000000000000000, 10.000000000000000 },\n+  { 6.1060519495338733e-22, 50.000000000000000, 15.000000000000000 },\n+  { 4.4510392847006872e-16, 50.000000000000000, 20.000000000000000 },\n+  { 9.7561594280229808e-12, 50.000000000000000, 25.000000000000000 },\n+  { 2.0581656631564172e-08, 50.000000000000000, 30.000000000000000 },\n+  { 7.6069951699272960e-06, 50.000000000000000, 35.000000000000000 },\n+  { 0.00068185243531768309, 50.000000000000000, 40.000000000000000 },\n+  { 0.017284343240791214, 50.000000000000000, 45.000000000000000 },\n+  { 0.12140902189761507, 50.000000000000000, 50.000000000000000 },\n+  { 0.13594720957176012, 50.000000000000000, 55.000000000000000 },\n+  { -0.13798273148535209, 50.000000000000000, 60.000000000000000 },\n+  { 0.12116217746619409, 50.000000000000000, 65.000000000000000 },\n+  { -0.11394866738787145, 50.000000000000000, 70.000000000000000 },\n+  { 0.094076799581573348, 50.000000000000000, 75.000000000000000 },\n+  { -0.039457764590251347, 50.000000000000000, 80.000000000000000 },\n+  { -0.040412060734136383, 50.000000000000000, 85.000000000000000 },\n+  { 0.090802099838032266, 50.000000000000000, 90.000000000000000 },\n+  { -0.055979156267280165, 50.000000000000000, 95.000000000000000 },\n+  { -0.038698339728525440, 50.000000000000000, 100.00000000000000 },\n+};\n+const double toler019 = 1.0000000000000006e-11;\n+\n+// Test data for nu=100.00000000000000.\n+// max(|f - f_GSL|): 4.8138576458356397e-17\n+// max(|f - f_GSL| / |f_GSL|): 1.0835289187603112e-13\n+const testcase_cyl_bessel_j<double>\n+data020[21] =\n+{\n+  { 0.0000000000000000, 100.00000000000000, 0.0000000000000000 },\n+  { 6.2677893955418763e-119, 100.00000000000000, 5.0000000000000000 },\n+  { 6.5973160641553816e-89, 100.00000000000000, 10.000000000000000 },\n+  { 1.9660095611249536e-71, 100.00000000000000, 15.000000000000000 },\n+  { 3.9617550943362524e-59, 100.00000000000000, 20.000000000000000 },\n+  { 1.1064482655301687e-49, 100.00000000000000, 25.000000000000000 },\n+  { 4.5788015281752354e-42, 100.00000000000000, 30.000000000000000 },\n+  { 9.9210206714732606e-36, 100.00000000000000, 35.000000000000000 },\n+  { 2.3866062996027414e-30, 100.00000000000000, 40.000000000000000 },\n+  { 1.0329791804565538e-25, 100.00000000000000, 45.000000000000000 },\n+  { 1.1159273690838340e-21, 100.00000000000000, 50.000000000000000 },\n+  { 3.7899753451900682e-18, 100.00000000000000, 55.000000000000000 },\n+  { 4.7832744078781205e-15, 100.00000000000000, 60.000000000000000 },\n+  { 2.5375564579490517e-12, 100.00000000000000, 65.000000000000000 },\n+  { 6.1982452141641260e-10, 100.00000000000000, 70.000000000000000 },\n+  { 7.4479005905904457e-08, 100.00000000000000, 75.000000000000000 },\n+  { 4.6065530648234948e-06, 100.00000000000000, 80.000000000000000 },\n+  { 0.00015043869999501765, 100.00000000000000, 85.000000000000000 },\n+  { 0.0026021305819963472, 100.00000000000000, 90.000000000000000 },\n+  { 0.023150768009428030, 100.00000000000000, 95.000000000000000 },\n+  { 0.096366673295861571, 100.00000000000000, 100.00000000000000 },\n+};\n+const double toler020 = 1.0000000000000006e-11;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_cyl_bessel_j<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::cyl_bessel_j(data[i].nu, data[i].x);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  test(data009, toler009);\n+  test(data010, toler010);\n+  test(data011, toler011);\n+  test(data012, toler012);\n+  test(data013, toler013);\n+  test(data014, toler014);\n+  test(data015, toler015);\n+  test(data016, toler016);\n+  test(data017, toler017);\n+  test(data018, toler018);\n+  test(data019, toler019);\n+  test(data020, toler020);\n+  return 0;\n+}"}, {"sha": "336b54ad4b3725f8e437d57469cb5f904b3eb645", "filename": "libstdc++-v3/testsuite/special_functions/08_cyl_bessel_j/compile.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.8 cyl_bessel_j\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float nuf = 1.0F / 3.0F, xf = 0.5F;\n+  double nud = 1.0 / 3.0, xd = 0.5;\n+  long double nul = 1.0L / 3.0L, xl = 0.5L;\n+\n+  std::cyl_bessel_j(nuf, xf);\n+  std::cyl_bessel_jf(nuf, xf);\n+  std::cyl_bessel_j(nud, xd);\n+  std::cyl_bessel_j(nul, xl);\n+  std::cyl_bessel_jl(nul, xl);\n+\n+  return;\n+}\n+"}, {"sha": "a2298dae9b737d30bd4722765f7ed22af4bf629b", "filename": "libstdc++-v3/testsuite/special_functions/08_cyl_bessel_j/compile_2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.8 cyl_bessel_j\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float nuf = 1.0F / 3.0F, xf = 0.5F;\n+  double nud = 1.0 / 3.0, xd = 0.5;\n+  long double nul = 1.0L / 3.0L, xl = 0.5L;\n+\n+  cyl_bessel_j(nuf, xf);\n+  cyl_bessel_jf(nuf, xf);\n+  cyl_bessel_j(nud, xd);\n+  cyl_bessel_j(nul, xl);\n+  cyl_bessel_jl(nul, xl);\n+\n+  return;\n+}\n+"}, {"sha": "48a77478906a98070a1d1dd1082be1192efeab79", "filename": "libstdc++-v3/testsuite/special_functions/09_cyl_bessel_k/check_nan.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F09_cyl_bessel_k%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F09_cyl_bessel_k%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F09_cyl_bessel_k%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,88 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.9 cyl_bessel_k\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float nuf = 0.0F;\n+  double nud = 0.0;\n+  long double nul = 0.0L;\n+\n+  float a = std::cyl_bessel_k(nuf, xf);\n+  float b = std::cyl_bessel_kf(nuf, xf);\n+  double c = std::cyl_bessel_k(nud, xd);\n+  long double d = std::cyl_bessel_k(nul, xl);\n+  long double e = std::cyl_bessel_kl(nul, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+void\n+test02()\n+{\n+  float xf = 1.0F;\n+  double xd = 1.0;\n+  long double xl = 1.0L;\n+\n+  float nuf = std::numeric_limits<float>::quiet_NaN();\n+  double nud = std::numeric_limits<double>::quiet_NaN();\n+  long double nul = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float a = std::cyl_bessel_k(nuf, xf);\n+  float b = std::cyl_bessel_kf(nuf, xf);\n+  double c = std::cyl_bessel_k(nud, xd);\n+  long double d = std::cyl_bessel_k(nul, xl);\n+  long double e = std::cyl_bessel_kl(nul, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}\n+"}, {"sha": "2bd1fa2799326920295b3c0f74cf671d2ccea85f", "filename": "libstdc++-v3/testsuite/special_functions/09_cyl_bessel_k/check_value.cc", "status": "added", "additions": 732, "deletions": 0, "changes": 732, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F09_cyl_bessel_k%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F09_cyl_bessel_k%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F09_cyl_bessel_k%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,732 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  cyl_bessel_k\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+\n+// Test data for nu=0.0000000000000000.\n+// max(|f - f_GSL|): 2.2204460492503131e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.7863051312335036e-16\n+const testcase_cyl_bessel_k<double>\n+data001[20] =\n+{\n+  { 1.5415067512483025, 0.0000000000000000, 0.25000000000000000 },\n+  { 0.92441907122766565, 0.0000000000000000, 0.50000000000000000 },\n+  { 0.61058242211646430, 0.0000000000000000, 0.75000000000000000 },\n+  { 0.42102443824070829, 0.0000000000000000, 1.0000000000000000 },\n+  { 0.29760308908410588, 0.0000000000000000, 1.2500000000000000 },\n+  { 0.21380556264752565, 0.0000000000000000, 1.5000000000000000 },\n+  { 0.15537981238660362, 0.0000000000000000, 1.7500000000000000 },\n+  { 0.11389387274953360, 0.0000000000000000, 2.0000000000000000 },\n+  { 0.084043111974658191, 0.0000000000000000, 2.2500000000000000 },\n+  { 0.062347553200366168, 0.0000000000000000, 2.5000000000000000 },\n+  { 0.046454901308760774, 0.0000000000000000, 2.7500000000000000 },\n+  { 0.034739504386279256, 0.0000000000000000, 3.0000000000000000 },\n+  { 0.026058755255154966, 0.0000000000000000, 3.2500000000000000 },\n+  { 0.019598897170368501, 0.0000000000000000, 3.5000000000000000 },\n+  { 0.014774250877128706, 0.0000000000000000, 3.7500000000000000 },\n+  { 0.011159676085853026, 0.0000000000000000, 4.0000000000000000 },\n+  { 0.0084443877245429649, 0.0000000000000000, 4.2500000000000000 },\n+  { 0.0063998572432339747, 0.0000000000000000, 4.5000000000000000 },\n+  { 0.0048572045578879524, 0.0000000000000000, 4.7500000000000000 },\n+  { 0.0036910983340425947, 0.0000000000000000, 5.0000000000000000 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+\n+// Test data for nu=0.33333333333333331.\n+// max(|f - f_GSL|): 1.3322676295501878e-15\n+// max(|f - f_GSL| / |f_GSL|): 4.3522010494015439e-15\n+const testcase_cyl_bessel_k<double>\n+data002[20] =\n+{\n+  { 1.7144912564234518, 0.33333333333333331, 0.25000000000000000 },\n+  { 0.98903107424672421, 0.33333333333333331, 0.50000000000000000 },\n+  { 0.64216899667282989, 0.33333333333333331, 0.75000000000000000 },\n+  { 0.43843063344153432, 0.33333333333333331, 1.0000000000000000 },\n+  { 0.30788192414945043, 0.33333333333333331, 1.2500000000000000 },\n+  { 0.22015769026776688, 0.33333333333333331, 1.5000000000000000 },\n+  { 0.15943413057311245, 0.33333333333333331, 1.7500000000000000 },\n+  { 0.11654496129616534, 0.33333333333333331, 2.0000000000000000 },\n+  { 0.085809609306439674, 0.33333333333333331, 2.2500000000000000 },\n+  { 0.063542537454733386, 0.33333333333333331, 2.5000000000000000 },\n+  { 0.047273354184795509, 0.33333333333333331, 2.7500000000000000 },\n+  { 0.035305904902162587, 0.33333333333333331, 3.0000000000000000 },\n+  { 0.026454186892773169, 0.33333333333333331, 3.2500000000000000 },\n+  { 0.019877061407943805, 0.33333333333333331, 3.5000000000000000 },\n+  { 0.014971213514760214, 0.33333333333333331, 3.7500000000000000 },\n+  { 0.011299947573672165, 0.33333333333333331, 4.0000000000000000 },\n+  { 0.0085447959546110473, 0.33333333333333331, 4.2500000000000000 },\n+  { 0.0064720581217078237, 0.33333333333333331, 4.5000000000000000 },\n+  { 0.0049093342803275264, 0.33333333333333331, 4.7500000000000000 },\n+  { 0.0037288750960535887, 0.33333333333333331, 5.0000000000000000 },\n+};\n+const double toler002 = 2.5000000000000020e-13;\n+\n+// Test data for nu=0.50000000000000000.\n+// max(|f - f_GSL|): 1.3322676295501878e-15\n+// max(|f - f_GSL| / |f_GSL|): 1.5172850443872369e-15\n+const testcase_cyl_bessel_k<double>\n+data003[20] =\n+{\n+  { 1.9521640631515476, 0.50000000000000000, 0.25000000000000000 },\n+  { 1.0750476034999195, 0.50000000000000000, 0.50000000000000000 },\n+  { 0.68361006034952421, 0.50000000000000000, 0.75000000000000000 },\n+  { 0.46106850444789454, 0.50000000000000000, 1.0000000000000000 },\n+  { 0.32117137397144746, 0.50000000000000000, 1.2500000000000000 },\n+  { 0.22833505222826550, 0.50000000000000000, 1.5000000000000000 },\n+  { 0.16463628997380864, 0.50000000000000000, 1.7500000000000000 },\n+  { 0.11993777196806145, 0.50000000000000000, 2.0000000000000000 },\n+  { 0.088065558803650454, 0.50000000000000000, 2.2500000000000000 },\n+  { 0.065065943154009986, 0.50000000000000000, 2.5000000000000000 },\n+  { 0.048315198301417825, 0.50000000000000000, 2.7500000000000000 },\n+  { 0.036025985131764589, 0.50000000000000000, 3.0000000000000000 },\n+  { 0.026956356532443351, 0.50000000000000000, 3.2500000000000000 },\n+  { 0.020229969578139294, 0.50000000000000000, 3.5000000000000000 },\n+  { 0.015220888252975564, 0.50000000000000000, 3.7500000000000000 },\n+  { 0.011477624576608052, 0.50000000000000000, 4.0000000000000000 },\n+  { 0.0086718932956978342, 0.50000000000000000, 4.2500000000000000 },\n+  { 0.0065633945646345407, 0.50000000000000000, 4.5000000000000000 },\n+  { 0.0049752435421262292, 0.50000000000000000, 4.7500000000000000 },\n+  { 0.0037766133746428825, 0.50000000000000000, 5.0000000000000000 },\n+};\n+const double toler003 = 2.5000000000000020e-13;\n+\n+// Test data for nu=0.66666666666666663.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 8.1483075013172610e-16\n+const testcase_cyl_bessel_k<double>\n+data004[20] =\n+{\n+  { 2.3289060745544101, 0.66666666666666663, 0.25000000000000000 },\n+  { 1.2059304647203353, 0.66666666666666663, 0.50000000000000000 },\n+  { 0.74547232976647215, 0.66666666666666663, 0.75000000000000000 },\n+  { 0.49447506210420827, 0.66666666666666663, 1.0000000000000000 },\n+  { 0.34062994813514252, 0.66666666666666663, 1.2500000000000000 },\n+  { 0.24024045240315581, 0.66666666666666663, 1.5000000000000000 },\n+  { 0.17217716908452310, 0.66666666666666663, 1.7500000000000000 },\n+  { 0.12483892748812841, 0.66666666666666663, 2.0000000000000000 },\n+  { 0.091315296079621050, 0.66666666666666663, 2.2500000000000000 },\n+  { 0.067255322171623361, 0.66666666666666663, 2.5000000000000000 },\n+  { 0.049809546542402224, 0.66666666666666663, 2.7500000000000000 },\n+  { 0.037057074495188531, 0.66666666666666663, 3.0000000000000000 },\n+  { 0.027674365504886729, 0.66666666666666663, 3.2500000000000000 },\n+  { 0.020733915836010912, 0.66666666666666663, 3.5000000000000000 },\n+  { 0.015577015510251332, 0.66666666666666663, 3.7500000000000000 },\n+  { 0.011730801456525336, 0.66666666666666663, 4.0000000000000000 },\n+  { 0.0088528343204658851, 0.66666666666666663, 4.2500000000000000 },\n+  { 0.0066933190915775560, 0.66666666666666663, 4.5000000000000000 },\n+  { 0.0050689292106255480, 0.66666666666666663, 4.7500000000000000 },\n+  { 0.0038444246344968226, 0.66666666666666663, 5.0000000000000000 },\n+};\n+const double toler004 = 2.5000000000000020e-13;\n+\n+// Test data for nu=1.0000000000000000.\n+// max(|f - f_GSL|): 5.5511151231257827e-17\n+// max(|f - f_GSL| / |f_GSL|): 2.7422040631145076e-16\n+const testcase_cyl_bessel_k<double>\n+data005[20] =\n+{\n+  { 3.7470259744407115, 1.0000000000000000, 0.25000000000000000 },\n+  { 1.6564411200033007, 1.0000000000000000, 0.50000000000000000 },\n+  { 0.94958046696214016, 1.0000000000000000, 0.75000000000000000 },\n+  { 0.60190723019723458, 1.0000000000000000, 1.0000000000000000 },\n+  { 0.40212407978419540, 1.0000000000000000, 1.2500000000000000 },\n+  { 0.27738780045684375, 1.0000000000000000, 1.5000000000000000 },\n+  { 0.19547745347439310, 1.0000000000000000, 1.7500000000000000 },\n+  { 0.13986588181652262, 1.0000000000000000, 2.0000000000000000 },\n+  { 0.10121630256832535, 1.0000000000000000, 2.2500000000000000 },\n+  { 0.073890816347747038, 1.0000000000000000, 2.5000000000000000 },\n+  { 0.054318522758919859, 1.0000000000000000, 2.7500000000000000 },\n+  { 0.040156431128194198, 1.0000000000000000, 3.0000000000000000 },\n+  { 0.029825529796040143, 1.0000000000000000, 3.2500000000000000 },\n+  { 0.022239392925923845, 1.0000000000000000, 3.5000000000000000 },\n+  { 0.016638191754688912, 1.0000000000000000, 3.7500000000000000 },\n+  { 0.012483498887268435, 1.0000000000000000, 4.0000000000000000 },\n+  { 0.0093896806560432589, 1.0000000000000000, 4.2500000000000000 },\n+  { 0.0070780949089680901, 1.0000000000000000, 4.5000000000000000 },\n+  { 0.0053459218178228390, 1.0000000000000000, 4.7500000000000000 },\n+  { 0.0040446134454521655, 1.0000000000000000, 5.0000000000000000 },\n+};\n+const double toler005 = 2.5000000000000020e-13;\n+\n+// Test data for nu=2.0000000000000000.\n+// max(|f - f_GSL|): 3.5527136788005009e-15\n+// max(|f - f_GSL| / |f_GSL|): 1.9937716861613039e-16\n+const testcase_cyl_bessel_k<double>\n+data006[20] =\n+{\n+  { 31.517714546773998, 2.0000000000000000, 0.25000000000000000 },\n+  { 7.5501835512408695, 2.0000000000000000, 0.50000000000000000 },\n+  { 3.1427970006821715, 2.0000000000000000, 0.75000000000000000 },\n+  { 1.6248388986351774, 2.0000000000000000, 1.0000000000000000 },\n+  { 0.94100161673881855, 2.0000000000000000, 1.2500000000000000 },\n+  { 0.58365596325665070, 2.0000000000000000, 1.5000000000000000 },\n+  { 0.37878261635733856, 2.0000000000000000, 1.7500000000000000 },\n+  { 0.25375975456605621, 2.0000000000000000, 2.0000000000000000 },\n+  { 0.17401315870205850, 2.0000000000000000, 2.2500000000000000 },\n+  { 0.12146020627856381, 2.0000000000000000, 2.5000000000000000 },\n+  { 0.085959281497066137, 2.0000000000000000, 2.7500000000000000 },\n+  { 0.061510458471742059, 2.0000000000000000, 3.0000000000000000 },\n+  { 0.044412927437333515, 2.0000000000000000, 3.2500000000000000 },\n+  { 0.032307121699467839, 2.0000000000000000, 3.5000000000000000 },\n+  { 0.023647953146296127, 2.0000000000000000, 3.7500000000000000 },\n+  { 0.017401425529487244, 2.0000000000000000, 4.0000000000000000 },\n+  { 0.012863060974445674, 2.0000000000000000, 4.2500000000000000 },\n+  { 0.0095456772027753475, 2.0000000000000000, 4.5000000000000000 },\n+  { 0.0071081190074975690, 2.0000000000000000, 4.7500000000000000 },\n+  { 0.0053089437122234608, 2.0000000000000000, 5.0000000000000000 },\n+};\n+const double toler006 = 2.5000000000000020e-13;\n+\n+// Test data for nu=5.0000000000000000.\n+// max(|f - f_GSL|): 5.8207660913467407e-11\n+// max(|f - f_GSL| / |f_GSL|): 2.4867363835720159e-16\n+const testcase_cyl_bessel_k<double>\n+data007[20] =\n+{\n+  { 391683.98962334893, 5.0000000000000000, 0.25000000000000000 },\n+  { 12097.979476096394, 5.0000000000000000, 0.50000000000000000 },\n+  { 1562.5870339691098, 5.0000000000000000, 0.75000000000000000 },\n+  { 360.96058960124066, 5.0000000000000000, 1.0000000000000000 },\n+  { 114.29321426334016, 5.0000000000000000, 1.2500000000000000 },\n+  { 44.067781159301056, 5.0000000000000000, 1.5000000000000000 },\n+  { 19.426568687730292, 5.0000000000000000, 1.7500000000000000 },\n+  { 9.4310491005964820, 5.0000000000000000, 2.0000000000000000 },\n+  { 4.9221270549918685, 5.0000000000000000, 2.2500000000000000 },\n+  { 2.7168842907865423, 5.0000000000000000, 2.5000000000000000 },\n+  { 1.5677685890536335, 5.0000000000000000, 2.7500000000000000 },\n+  { 0.93777360238680818, 5.0000000000000000, 3.0000000000000000 },\n+  { 0.57775534736785106, 5.0000000000000000, 3.2500000000000000 },\n+  { 0.36482440208451983, 5.0000000000000000, 3.5000000000000000 },\n+  { 0.23520290620082257, 5.0000000000000000, 3.7500000000000000 },\n+  { 0.15434254872599723, 5.0000000000000000, 4.0000000000000000 },\n+  { 0.10283347176876455, 5.0000000000000000, 4.2500000000000000 },\n+  { 0.069423643150881773, 5.0000000000000000, 4.5000000000000000 },\n+  { 0.047410616917942211, 5.0000000000000000, 4.7500000000000000 },\n+  { 0.032706273712031865, 5.0000000000000000, 5.0000000000000000 },\n+};\n+const double toler007 = 2.5000000000000020e-13;\n+\n+// Test data for nu=10.000000000000000.\n+// max(|f - f_GSL|): 6.1035156250000000e-05\n+// max(|f - f_GSL| / |f_GSL|): 7.7998476565326393e-16\n+const testcase_cyl_bessel_k<double>\n+data008[20] =\n+{\n+  { 194481817927839.88, 10.000000000000000, 0.25000000000000000 },\n+  { 188937569319.90030, 10.000000000000000, 0.50000000000000000 },\n+  { 3248187687.8018155, 10.000000000000000, 0.75000000000000000 },\n+  { 180713289.90102941, 10.000000000000000, 1.0000000000000000 },\n+  { 19104425.945252180, 10.000000000000000, 1.2500000000000000 },\n+  { 3027483.5236822353, 10.000000000000000, 1.5000000000000000 },\n+  { 633724.71555087867, 10.000000000000000, 1.7500000000000000 },\n+  { 162482.40397955943, 10.000000000000000, 2.0000000000000000 },\n+  { 48602.446087749791, 10.000000000000000, 2.2500000000000000 },\n+  { 16406.916416341937, 10.000000000000000, 2.5000000000000000 },\n+  { 6104.1720745909606, 10.000000000000000, 2.7500000000000000 },\n+  { 2459.6204220569480, 10.000000000000000, 3.0000000000000000 },\n+  { 1059.2358443703381, 10.000000000000000, 3.2500000000000000 },\n+  { 482.53582096664758, 10.000000000000000, 3.5000000000000000 },\n+  { 230.64249314993776, 10.000000000000000, 3.7500000000000000 },\n+  { 114.91408364049620, 10.000000000000000, 4.0000000000000000 },\n+  { 59.361613632706479, 10.000000000000000, 4.2500000000000000 },\n+  { 31.652958759229868, 10.000000000000000, 4.5000000000000000 },\n+  { 17.357723966417399, 10.000000000000000, 4.7500000000000000 },\n+  { 9.7585628291778121, 10.000000000000000, 5.0000000000000000 },\n+};\n+const double toler008 = 2.5000000000000020e-13;\n+\n+// Test data for nu=20.000000000000000.\n+// max(|f - f_GSL|): 2.7670116110564327e+19\n+// max(|f - f_GSL| / |f_GSL|): 1.2737005853777639e-15\n+const testcase_cyl_bessel_k<double>\n+data009[20] =\n+{\n+  { 7.0065983661641184e+34, 20.000000000000000, 0.25000000000000000 },\n+  { 6.6655498744171593e+28, 20.000000000000000, 0.50000000000000000 },\n+  { 1.9962989615380379e+25, 20.000000000000000, 0.75000000000000000 },\n+  { 6.2943693604245335e+22, 20.000000000000000, 1.0000000000000000 },\n+  { 7.2034511920074182e+20, 20.000000000000000, 1.2500000000000000 },\n+  { 1.8620549984645546e+19, 20.000000000000000, 1.5000000000000000 },\n+  { 8.4415605303952486e+17, 20.000000000000000, 1.7500000000000000 },\n+  { 57708568527002520., 20.000000000000000, 2.0000000000000000 },\n+  { 5396824209986879.0, 20.000000000000000, 2.2500000000000000 },\n+  { 645996884063683.62, 20.000000000000000, 2.5000000000000000 },\n+  { 94387401970996.328, 20.000000000000000, 2.7500000000000000 },\n+  { 16254643952204.371, 20.000000000000000, 3.0000000000000000 },\n+  { 3212694836166.4053, 20.000000000000000, 3.2500000000000000 },\n+  { 713857897923.74072, 20.000000000000000, 3.5000000000000000 },\n+  { 175423421958.35925, 20.000000000000000, 3.7500000000000000 },\n+  { 47050078926.298080, 20.000000000000000, 4.0000000000000000 },\n+  { 13625066095.067503, 20.000000000000000, 4.2500000000000000 },\n+  { 4222179870.6810656, 20.000000000000000, 4.5000000000000000 },\n+  { 1389634112.7516634, 20.000000000000000, 4.7500000000000000 },\n+  { 482700052.06214869, 20.000000000000000, 5.0000000000000000 },\n+};\n+const double toler009 = 2.5000000000000020e-13;\n+\n+// Test data for nu=50.000000000000000.\n+// max(|f - f_GSL|): 3.9111090745622133e+92\n+// max(|f - f_GSL| / |f_GSL|): 3.7220730535457535e-15\n+const testcase_cyl_bessel_k<double>\n+data010[20] =\n+{\n+  { 4.3394604622138714e+107, 50.000000000000000, 0.25000000000000000 },\n+  { 3.8505298918269003e+92, 50.000000000000000, 0.50000000000000000 },\n+  { 6.0292756894842793e+83, 50.000000000000000, 0.75000000000000000 },\n+  { 3.4068968541616991e+77, 50.000000000000000, 1.0000000000000000 },\n+  { 4.8485527365039051e+72, 50.000000000000000, 1.2500000000000000 },\n+  { 5.3091717574907920e+68, 50.000000000000000, 1.5000000000000000 },\n+  { 2.3762245257445824e+65, 50.000000000000000, 1.7500000000000000 },\n+  { 2.9799817396049268e+62, 50.000000000000000, 2.0000000000000000 },\n+  { 8.2079431233488581e+59, 50.000000000000000, 2.2500000000000000 },\n+  { 4.2046528212987503e+57, 50.000000000000000, 2.5000000000000000 },\n+  { 3.5578676911884825e+55, 50.000000000000000, 2.7500000000000000 },\n+  { 4.5559542293221535e+53, 50.000000000000000, 3.0000000000000000 },\n+  { 8.2606735967628997e+51, 50.000000000000000, 3.2500000000000000 },\n+  { 2.0139406747903812e+50, 50.000000000000000, 3.5000000000000000 },\n+  { 6.3368727837484600e+48, 50.000000000000000, 3.7500000000000000 },\n+  { 2.4897317389325753e+47, 50.000000000000000, 4.0000000000000000 },\n+  { 1.1888958173039699e+46, 50.000000000000000, 4.2500000000000000 },\n+  { 6.7472593648148542e+44, 50.000000000000000, 4.5000000000000000 },\n+  { 4.4664266585930700e+43, 50.000000000000000, 4.7500000000000000 },\n+  { 3.3943222434301628e+42, 50.000000000000000, 5.0000000000000000 },\n+};\n+const double toler010 = 2.5000000000000020e-13;\n+\n+// Test data for nu=100.00000000000000.\n+// max(|f - f_GSL|): 8.5970689361151757e+232\n+// max(|f - f_GSL| / |f_GSL|): 9.0457919481999128e-14\n+const testcase_cyl_bessel_k<double>\n+data011[20] =\n+{\n+  { 9.5039428115809898e+245, 100.00000000000000, 0.25000000000000000 },\n+  { 7.4937399313533112e+215, 100.00000000000000, 0.50000000000000000 },\n+  { 1.8417471020730701e+198, 100.00000000000000, 0.75000000000000000 },\n+  { 5.9003331836386410e+185, 100.00000000000000, 1.0000000000000000 },\n+  { 1.2002130935576950e+176, 100.00000000000000, 1.2500000000000000 },\n+  { 1.4467044226487075e+168, 100.00000000000000, 1.5000000000000000 },\n+  { 2.9161498411497642e+161, 100.00000000000000, 1.7500000000000000 },\n+  { 4.6194159776013925e+155, 100.00000000000000, 2.0000000000000000 },\n+  { 3.5332121583541727e+150, 100.00000000000000, 2.2500000000000000 },\n+  { 9.3566097231039940e+145, 100.00000000000000, 2.5000000000000000 },\n+  { 6.7672283615134532e+141, 100.00000000000000, 2.7500000000000000 },\n+  { 1.1219630864949494e+138, 100.00000000000000, 3.0000000000000000 },\n+  { 3.7329723699990903e+134, 100.00000000000000, 3.2500000000000000 },\n+  { 2.2476893883855163e+131, 100.00000000000000, 3.5000000000000000 },\n+  { 2.2564559319883196e+128, 100.00000000000000, 3.7500000000000000 },\n+  { 3.5353340499626455e+125, 100.00000000000000, 4.0000000000000000 },\n+  { 8.1898439213010234e+122, 100.00000000000000, 4.2500000000000000 },\n+  { 2.6823744110726800e+120, 100.00000000000000, 4.5000000000000000 },\n+  { 1.1963963615212274e+118, 100.00000000000000, 4.7500000000000000 },\n+  { 7.0398601930616815e+115, 100.00000000000000, 5.0000000000000000 },\n+};\n+const double toler011 = 5.0000000000000029e-12;\n+//  cyl_bessel_k\n+\n+// Test data for nu=0.0000000000000000.\n+// max(|f - f_GSL|): 4.3368086899420177e-19\n+// max(|f - f_GSL| / |f_GSL|): 1.8009631353873430e-16\n+const testcase_cyl_bessel_k<double>\n+data012[20] =\n+{\n+  { 0.0036910983340425947, 0.0000000000000000, 5.0000000000000000 },\n+  { 1.7780062316167650e-05, 0.0000000000000000, 10.000000000000000 },\n+  { 9.8195364823964333e-08, 0.0000000000000000, 15.000000000000000 },\n+  { 5.7412378153365238e-10, 0.0000000000000000, 20.000000000000000 },\n+  { 3.4641615622131151e-12, 0.0000000000000000, 25.000000000000000 },\n+  { 2.1324774964630566e-14, 0.0000000000000000, 30.000000000000000 },\n+  { 1.3310351491429464e-16, 0.0000000000000000, 35.000000000000000 },\n+  { 8.3928611000995700e-19, 0.0000000000000000, 40.000000000000000 },\n+  { 5.3334561226187247e-21, 0.0000000000000000, 45.000000000000000 },\n+  { 3.4101677497894956e-23, 0.0000000000000000, 50.000000000000000 },\n+  { 2.1913102183534147e-25, 0.0000000000000000, 55.000000000000000 },\n+  { 1.4138978405591074e-27, 0.0000000000000000, 60.000000000000000 },\n+  { 9.1544673210030045e-30, 0.0000000000000000, 65.000000000000000 },\n+  { 5.9446613372925013e-32, 0.0000000000000000, 70.000000000000000 },\n+  { 3.8701170455869113e-34, 0.0000000000000000, 75.000000000000000 },\n+  { 2.5251198425054723e-36, 0.0000000000000000, 80.000000000000000 },\n+  { 1.6507623579783908e-38, 0.0000000000000000, 85.000000000000000 },\n+  { 1.0810242556984256e-40, 0.0000000000000000, 90.000000000000000 },\n+  { 7.0901249699001278e-43, 0.0000000000000000, 95.000000000000000 },\n+  { 4.6566282291759032e-45, 0.0000000000000000, 100.00000000000000 },\n+};\n+const double toler012 = 2.5000000000000020e-13;\n+\n+// Test data for nu=0.33333333333333331.\n+// max(|f - f_GSL|): 1.0339757656912846e-25\n+// max(|f - f_GSL| / |f_GSL|): 1.7960859646361972e-16\n+const testcase_cyl_bessel_k<double>\n+data013[20] =\n+{\n+  { 0.0037288750960535887, 0.33333333333333331, 5.0000000000000000 },\n+  { 1.7874608271055339e-05, 0.33333333333333331, 10.000000000000000 },\n+  { 9.8548341568798317e-08, 0.33333333333333331, 15.000000000000000 },\n+  { 5.7568278247790865e-10, 0.33333333333333331, 20.000000000000000 },\n+  { 3.4717201424907059e-12, 0.33333333333333331, 25.000000000000000 },\n+  { 2.1363664736611189e-14, 0.33333333333333331, 30.000000000000000 },\n+  { 1.3331202314165813e-16, 0.33333333333333331, 35.000000000000000 },\n+  { 8.4043837769480934e-19, 0.33333333333333331, 40.000000000000000 },\n+  { 5.3399731261024948e-21, 0.33333333333333331, 45.000000000000000 },\n+  { 3.4139217813583632e-23, 0.33333333333333331, 50.000000000000000 },\n+  { 2.1935050179185627e-25, 0.33333333333333331, 55.000000000000000 },\n+  { 1.4151968805623662e-27, 0.33333333333333331, 60.000000000000000 },\n+  { 9.1622357217019043e-30, 0.33333333333333331, 65.000000000000000 },\n+  { 5.9493479703461315e-32, 0.33333333333333331, 70.000000000000000 },\n+  { 3.8729660011055947e-34, 0.33333333333333331, 75.000000000000000 },\n+  { 2.5268631828013877e-36, 0.33333333333333331, 80.000000000000000 },\n+  { 1.6518353676138867e-38, 0.33333333333333331, 85.000000000000000 },\n+  { 1.0816880942511494e-40, 0.33333333333333331, 90.000000000000000 },\n+  { 7.0942508599231512e-43, 0.33333333333333331, 95.000000000000000 },\n+  { 4.6592031570213454e-45, 0.33333333333333331, 100.00000000000000 },\n+};\n+const double toler013 = 2.5000000000000020e-13;\n+\n+// Test data for nu=0.50000000000000000.\n+// max(|f - f_GSL|): 1.5046327690525280e-36\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_cyl_bessel_k<double>\n+data014[20] =\n+{\n+  { 0.0037766133746428825, 0.50000000000000000, 5.0000000000000000 },\n+  { 1.7993478093705181e-05, 0.50000000000000000, 10.000000000000000 },\n+  { 9.8991312032877236e-08, 0.50000000000000000, 15.000000000000000 },\n+  { 5.7763739747074450e-10, 0.50000000000000000, 20.000000000000000 },\n+  { 3.4811912768406949e-12, 0.50000000000000000, 25.000000000000000 },\n+  { 2.1412375659560111e-14, 0.50000000000000000, 30.000000000000000 },\n+  { 1.3357311366035824e-16, 0.50000000000000000, 35.000000000000000 },\n+  { 8.4188091949489049e-19, 0.50000000000000000, 40.000000000000000 },\n+  { 5.3481305002517408e-21, 0.50000000000000000, 45.000000000000000 },\n+  { 3.4186200954570754e-23, 0.50000000000000000, 50.000000000000000 },\n+  { 2.1962515908772453e-25, 0.50000000000000000, 55.000000000000000 },\n+  { 1.4168223500353693e-27, 0.50000000000000000, 60.000000000000000 },\n+  { 9.1719554473256892e-30, 0.50000000000000000, 65.000000000000000 },\n+  { 5.9552114337788932e-32, 0.50000000000000000, 70.000000000000000 },\n+  { 3.8765301321409432e-34, 0.50000000000000000, 75.000000000000000 },\n+  { 2.5290440439442910e-36, 0.50000000000000000, 80.000000000000000 },\n+  { 1.6531776067605980e-38, 0.50000000000000000, 85.000000000000000 },\n+  { 1.0825184636529955e-40, 0.50000000000000000, 90.000000000000000 },\n+  { 7.0994115873258822e-43, 0.50000000000000000, 95.000000000000000 },\n+  { 4.6624238126346715e-45, 0.50000000000000000, 100.00000000000000 },\n+};\n+const double toler014 = 2.5000000000000020e-13;\n+\n+// Test data for nu=0.66666666666666663.\n+// max(|f - f_GSL|): 4.3368086899420177e-19\n+// max(|f - f_GSL| / |f_GSL|): 3.5630695000470094e-16\n+const testcase_cyl_bessel_k<double>\n+data015[20] =\n+{\n+  { 0.0038444246344968226, 0.66666666666666663, 5.0000000000000000 },\n+  { 1.8161187569530204e-05, 0.66666666666666663, 10.000000000000000 },\n+  { 9.9614751542305571e-08, 0.66666666666666663, 15.000000000000000 },\n+  { 5.8038484271925811e-10, 0.66666666666666663, 20.000000000000000 },\n+  { 3.4944937498488603e-12, 0.66666666666666663, 25.000000000000000 },\n+  { 2.1480755645577720e-14, 0.66666666666666663, 30.000000000000000 },\n+  { 1.3393949190152161e-16, 0.66666666666666663, 35.000000000000000 },\n+  { 8.4390460553642992e-19, 0.66666666666666663, 40.000000000000000 },\n+  { 5.3595716143622089e-21, 0.66666666666666663, 45.000000000000000 },\n+  { 3.4252085301433749e-23, 0.66666666666666663, 50.000000000000000 },\n+  { 2.2001025377982308e-25, 0.66666666666666663, 55.000000000000000 },\n+  { 1.4191011274172078e-27, 0.66666666666666663, 60.000000000000000 },\n+  { 9.1855803020269763e-30, 0.66666666666666663, 65.000000000000000 },\n+  { 5.9634299472578764e-32, 0.66666666666666663, 70.000000000000000 },\n+  { 3.8815254026478500e-34, 0.66666666666666663, 75.000000000000000 },\n+  { 2.5321003991943851e-36, 0.66666666666666663, 80.000000000000000 },\n+  { 1.6550585670593067e-38, 0.66666666666666663, 85.000000000000000 },\n+  { 1.0836820479428605e-40, 0.66666666666666663, 90.000000000000000 },\n+  { 7.1066428916285356e-43, 0.66666666666666663, 95.000000000000000 },\n+  { 4.6669364587280465e-45, 0.66666666666666663, 100.00000000000000 },\n+};\n+const double toler015 = 2.5000000000000020e-13;\n+\n+// Test data for nu=1.0000000000000000.\n+// max(|f - f_GSL|): 1.0339757656912846e-25\n+// max(|f - f_GSL| / |f_GSL|): 2.9112857291682056e-16\n+const testcase_cyl_bessel_k<double>\n+data016[20] =\n+{\n+  { 0.0040446134454521655, 1.0000000000000000, 5.0000000000000000 },\n+  { 1.8648773453825582e-05, 1.0000000000000000, 10.000000000000000 },\n+  { 1.0141729369762091e-07, 1.0000000000000000, 15.000000000000000 },\n+  { 5.8830579695570384e-10, 1.0000000000000000, 20.000000000000000 },\n+  { 3.5327780731999345e-12, 1.0000000000000000, 25.000000000000000 },\n+  { 2.1677320018915498e-14, 1.0000000000000000, 30.000000000000000 },\n+  { 1.3499178340011053e-16, 1.0000000000000000, 35.000000000000000 },\n+  { 8.4971319548610435e-19, 1.0000000000000000, 40.000000000000000 },\n+  { 5.3923945937225035e-21, 1.0000000000000000, 45.000000000000000 },\n+  { 3.4441022267175555e-23, 1.0000000000000000, 50.000000000000000 },\n+  { 2.2111422716117463e-25, 1.0000000000000000, 55.000000000000000 },\n+  { 1.4256320265171041e-27, 1.0000000000000000, 60.000000000000000 },\n+  { 9.2246195278906156e-30, 1.0000000000000000, 65.000000000000000 },\n+  { 5.9869736739138550e-32, 1.0000000000000000, 70.000000000000000 },\n+  { 3.8958329467421912e-34, 1.0000000000000000, 75.000000000000000 },\n+  { 2.5408531275211708e-36, 1.0000000000000000, 80.000000000000000 },\n+  { 1.6604444948567571e-38, 1.0000000000000000, 85.000000000000000 },\n+  { 1.0870134457498335e-40, 1.0000000000000000, 90.000000000000000 },\n+  { 7.1273442329907240e-43, 1.0000000000000000, 95.000000000000000 },\n+  { 4.6798537356369101e-45, 1.0000000000000000, 100.00000000000000 },\n+};\n+const double toler016 = 2.5000000000000020e-13;\n+\n+// Test data for nu=2.0000000000000000.\n+// max(|f - f_GSL|): 8.6736173798840355e-19\n+// max(|f - f_GSL| / |f_GSL|): 1.6337745981208381e-16\n+const testcase_cyl_bessel_k<double>\n+data017[20] =\n+{\n+  { 0.0053089437122234608, 2.0000000000000000, 5.0000000000000000 },\n+  { 2.1509817006932767e-05, 2.0000000000000000, 10.000000000000000 },\n+  { 1.1171767065031378e-07, 2.0000000000000000, 15.000000000000000 },\n+  { 6.3295436122922281e-10, 2.0000000000000000, 20.000000000000000 },\n+  { 3.7467838080691102e-12, 2.0000000000000000, 25.000000000000000 },\n+  { 2.2769929632558265e-14, 2.0000000000000000, 30.000000000000000 },\n+  { 1.4081733110858665e-16, 2.0000000000000000, 35.000000000000000 },\n+  { 8.8177176978426223e-19, 2.0000000000000000, 40.000000000000000 },\n+  { 5.5731181045619470e-21, 2.0000000000000000, 45.000000000000000 },\n+  { 3.5479318388581979e-23, 2.0000000000000000, 50.000000000000000 },\n+  { 2.2717153918665688e-25, 2.0000000000000000, 55.000000000000000 },\n+  { 1.4614189081096777e-27, 2.0000000000000000, 60.000000000000000 },\n+  { 9.4383017680150234e-30, 2.0000000000000000, 65.000000000000000 },\n+  { 6.1157177279757537e-32, 2.0000000000000000, 70.000000000000000 },\n+  { 3.9740059241667034e-34, 2.0000000000000000, 75.000000000000000 },\n+  { 2.5886411706935015e-36, 2.0000000000000000, 80.000000000000000 },\n+  { 1.6898316402103142e-38, 2.0000000000000000, 85.000000000000000 },\n+  { 1.1051801100484218e-40, 2.0000000000000000, 90.000000000000000 },\n+  { 7.2401743221736176e-43, 2.0000000000000000, 95.000000000000000 },\n+  { 4.7502253038886413e-45, 2.0000000000000000, 100.00000000000000 },\n+};\n+const double toler017 = 2.5000000000000020e-13;\n+\n+// Test data for nu=5.0000000000000000.\n+// max(|f - f_GSL|): 6.9388939039072284e-18\n+// max(|f - f_GSL| / |f_GSL|): 2.3552470349020973e-16\n+const testcase_cyl_bessel_k<double>\n+data018[20] =\n+{\n+  { 0.032706273712031865, 5.0000000000000000, 5.0000000000000000 },\n+  { 5.7541849985312288e-05, 5.0000000000000000, 10.000000000000000 },\n+  { 2.1878261369258224e-07, 5.0000000000000000, 15.000000000000000 },\n+  { 1.0538660139974233e-09, 5.0000000000000000, 20.000000000000000 },\n+  { 5.6485921365284157e-12, 5.0000000000000000, 25.000000000000000 },\n+  { 3.2103335105890266e-14, 5.0000000000000000, 30.000000000000000 },\n+  { 1.8919208406439644e-16, 5.0000000000000000, 35.000000000000000 },\n+  { 1.1423814375953188e-18, 5.0000000000000000, 40.000000000000000 },\n+  { 7.0181216822204101e-21, 5.0000000000000000, 45.000000000000000 },\n+  { 4.3671822541009859e-23, 5.0000000000000000, 50.000000000000000 },\n+  { 2.7444967640357869e-25, 5.0000000000000000, 55.000000000000000 },\n+  { 1.7382232741886986e-27, 5.0000000000000000, 60.000000000000000 },\n+  { 1.1078474298959669e-29, 5.0000000000000000, 65.000000000000000 },\n+  { 7.0974537081794416e-32, 5.0000000000000000, 70.000000000000000 },\n+  { 4.5667269500061064e-34, 5.0000000000000000, 75.000000000000000 },\n+  { 2.9491764420206150e-36, 5.0000000000000000, 80.000000000000000 },\n+  { 1.9105685973117463e-38, 5.0000000000000000, 85.000000000000000 },\n+  { 1.2411034311592645e-40, 5.0000000000000000, 90.000000000000000 },\n+  { 8.0814211331379146e-43, 5.0000000000000000, 95.000000000000000 },\n+  { 5.2732561132929509e-45, 5.0000000000000000, 100.00000000000000 },\n+};\n+const double toler018 = 2.5000000000000020e-13;\n+\n+// Test data for nu=10.000000000000000.\n+// max(|f - f_GSL|): 5.3290705182007514e-15\n+// max(|f - f_GSL| / |f_GSL|): 5.4609173619982130e-16\n+const testcase_cyl_bessel_k<double>\n+data019[20] =\n+{\n+  { 9.7585628291778121, 10.000000000000000, 5.0000000000000000 },\n+  { 0.0016142553003906700, 10.000000000000000, 10.000000000000000 },\n+  { 2.2605303776606435e-06, 10.000000000000000, 15.000000000000000 },\n+  { 6.3162145283215804e-09, 10.000000000000000, 20.000000000000000 },\n+  { 2.4076769602801233e-11, 10.000000000000000, 25.000000000000000 },\n+  { 1.0842816942222975e-13, 10.000000000000000, 30.000000000000000 },\n+  { 5.3976770429777191e-16, 10.000000000000000, 35.000000000000000 },\n+  { 2.8680293113671932e-18, 10.000000000000000, 40.000000000000000 },\n+  { 1.5939871900169600e-20, 10.000000000000000, 45.000000000000000 },\n+  { 9.1509882099879962e-23, 10.000000000000000, 50.000000000000000 },\n+  { 5.3823846249592858e-25, 10.000000000000000, 55.000000000000000 },\n+  { 3.2253408700563144e-27, 10.000000000000000, 60.000000000000000 },\n+  { 1.9613367530075138e-29, 10.000000000000000, 65.000000000000000 },\n+  { 1.2068471495933484e-31, 10.000000000000000, 70.000000000000000 },\n+  { 7.4979152649449644e-34, 10.000000000000000, 75.000000000000000 },\n+  { 4.6957285830490538e-36, 10.000000000000000, 80.000000000000000 },\n+  { 2.9606323347034079e-38, 10.000000000000000, 85.000000000000000 },\n+  { 1.8773542561131613e-40, 10.000000000000000, 90.000000000000000 },\n+  { 1.1962899527846350e-42, 10.000000000000000, 95.000000000000000 },\n+  { 7.6554279773881018e-45, 10.000000000000000, 100.00000000000000 },\n+};\n+const double toler019 = 2.5000000000000020e-13;\n+\n+// Test data for nu=20.000000000000000.\n+// max(|f - f_GSL|): 4.1723251342773438e-07\n+// max(|f - f_GSL| / |f_GSL|): 1.2224656515794909e-15\n+const testcase_cyl_bessel_k<double>\n+data020[20] =\n+{\n+  { 482700052.06214869, 20.000000000000000, 5.0000000000000000 },\n+  { 178.74427820770546, 20.000000000000000, 10.000000000000000 },\n+  { 0.012141257729731143, 20.000000000000000, 15.000000000000000 },\n+  { 5.5431116361258155e-06, 20.000000000000000, 20.000000000000000 },\n+  { 6.3744029330352113e-09, 20.000000000000000, 25.000000000000000 },\n+  { 1.2304516475442478e-11, 20.000000000000000, 30.000000000000000 },\n+  { 3.2673136479809018e-14, 20.000000000000000, 35.000000000000000 },\n+  { 1.0703023799997383e-16, 20.000000000000000, 40.000000000000000 },\n+  { 4.0549953175660457e-19, 20.000000000000000, 45.000000000000000 },\n+  { 1.7061483797220349e-21, 20.000000000000000, 50.000000000000000 },\n+  { 7.7617008115659413e-24, 20.000000000000000, 55.000000000000000 },\n+  { 3.7482954006874720e-26, 20.000000000000000, 60.000000000000000 },\n+  { 1.8966880763956576e-28, 20.000000000000000, 65.000000000000000 },\n+  { 9.9615763479998864e-31, 20.000000000000000, 70.000000000000000 },\n+  { 5.3921623063091066e-33, 20.000000000000000, 75.000000000000000 },\n+  { 2.9920407657642272e-35, 20.000000000000000, 80.000000000000000 },\n+  { 1.6948662723618255e-37, 20.000000000000000, 85.000000000000000 },\n+  { 9.7689149642963042e-40, 20.000000000000000, 90.000000000000000 },\n+  { 5.7143603019220823e-42, 20.000000000000000, 95.000000000000000 },\n+  { 3.3852054148901700e-44, 20.000000000000000, 100.00000000000000 },\n+};\n+const double toler020 = 2.5000000000000020e-13;\n+\n+// Test data for nu=50.000000000000000.\n+// max(|f - f_GSL|): 8.6655802749976619e+27\n+// max(|f - f_GSL| / |f_GSL|): 2.6684549464729312e-15\n+const testcase_cyl_bessel_k<double>\n+data021[20] =\n+{\n+  { 3.3943222434301628e+42, 50.000000000000000, 5.0000000000000000 },\n+  { 2.0613737753892557e+27, 50.000000000000000, 10.000000000000000 },\n+  { 1.7267736974519188e+18, 50.000000000000000, 15.000000000000000 },\n+  { 411711209122.01788, 50.000000000000000, 20.000000000000000 },\n+  { 1972478.7419813874, 50.000000000000000, 25.000000000000000 },\n+  { 58.770686258007267, 50.000000000000000, 30.000000000000000 },\n+  { 0.0058659391182535178, 50.000000000000000, 35.000000000000000 },\n+  { 1.3634854128794101e-06, 50.000000000000000, 40.000000000000000 },\n+  { 5.8652396362160819e-10, 50.000000000000000, 45.000000000000000 },\n+  { 4.0060134766400893e-13, 50.000000000000000, 50.000000000000000 },\n+  { 3.9062324485711016e-16, 50.000000000000000, 55.000000000000000 },\n+  { 5.0389298085176510e-19, 50.000000000000000, 60.000000000000000 },\n+  { 8.1305344250110424e-22, 50.000000000000000, 65.000000000000000 },\n+  { 1.5732816234948991e-24, 50.000000000000000, 70.000000000000000 },\n+  { 3.5349854993874412e-27, 50.000000000000000, 75.000000000000000 },\n+  { 8.9940101003189485e-30, 50.000000000000000, 80.000000000000000 },\n+  { 2.5403205503080723e-32, 50.000000000000000, 85.000000000000000 },\n+  { 7.8397596486715721e-35, 50.000000000000000, 90.000000000000000 },\n+  { 2.6098900651329542e-37, 50.000000000000000, 95.000000000000000 },\n+  { 9.2745226536133258e-40, 50.000000000000000, 100.00000000000000 },\n+};\n+const double toler021 = 2.5000000000000020e-13;\n+\n+// Test data for nu=100.00000000000000.\n+// max(|f - f_GSL|): 3.4996011596528191e+101\n+// max(|f - f_GSL| / |f_GSL|): 4.9711230957426436e-15\n+const testcase_cyl_bessel_k<double>\n+data022[20] =\n+{\n+  { 7.0398601930616815e+115, 100.00000000000000, 5.0000000000000000 },\n+  { 4.5966740842695238e+85, 100.00000000000000, 10.000000000000000 },\n+  { 8.2565552242653946e+67, 100.00000000000000, 15.000000000000000 },\n+  { 1.7081356456876041e+55, 100.00000000000000, 20.000000000000000 },\n+  { 1.9858028128780610e+45, 100.00000000000000, 25.000000000000000 },\n+  { 1.2131584253026677e+37, 100.00000000000000, 30.000000000000000 },\n+  { 1.1016916354696688e+30, 100.00000000000000, 35.000000000000000 },\n+  { 7.0074023297775712e+23, 100.00000000000000, 40.000000000000000 },\n+  { 1.9236643958470894e+18, 100.00000000000000, 45.000000000000000 },\n+  { 16394035276269.250, 100.00000000000000, 50.000000000000000 },\n+  { 343254952.89495474, 100.00000000000000, 55.000000000000000 },\n+  { 14870.012754946298, 100.00000000000000, 60.000000000000000 },\n+  { 1.1708099078572216, 100.00000000000000, 65.000000000000000 },\n+  { 0.00015161193930722313, 100.00000000000000, 70.000000000000000 },\n+  { 2.9850234381623443e-08, 100.00000000000000, 75.000000000000000 },\n+  { 8.3928710724649129e-12, 100.00000000000000, 80.000000000000000 },\n+  { 3.2033435630927732e-15, 100.00000000000000, 85.000000000000000 },\n+  { 1.5922281431788096e-18, 100.00000000000000, 90.000000000000000 },\n+  { 9.9589454577674131e-22, 100.00000000000000, 95.000000000000000 },\n+  { 7.6171296304940840e-25, 100.00000000000000, 100.00000000000000 },\n+};\n+const double toler022 = 2.5000000000000020e-13;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_cyl_bessel_k<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::cyl_bessel_k(data[i].nu, data[i].x);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  test(data009, toler009);\n+  test(data010, toler010);\n+  test(data011, toler011);\n+  test(data012, toler012);\n+  test(data013, toler013);\n+  test(data014, toler014);\n+  test(data015, toler015);\n+  test(data016, toler016);\n+  test(data017, toler017);\n+  test(data018, toler018);\n+  test(data019, toler019);\n+  test(data020, toler020);\n+  test(data021, toler021);\n+  test(data022, toler022);\n+  return 0;\n+}"}, {"sha": "feb42faf75e513079cde661aa77ea22099d04071", "filename": "libstdc++-v3/testsuite/special_functions/09_cyl_bessel_k/compile.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F09_cyl_bessel_k%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F09_cyl_bessel_k%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F09_cyl_bessel_k%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.9 cyl_bessel_k\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float nuf = 1.0F / 3.0F, xf = 0.5F;\n+  double nud = 1.0 / 3.0, xd = 0.5;\n+  long double nul = 1.0L / 3.0L, xl = 0.5L;\n+\n+  std::cyl_bessel_k(nuf, xf);\n+  std::cyl_bessel_kf(nuf, xf);\n+  std::cyl_bessel_k(nud, xd);\n+  std::cyl_bessel_k(nul, xl);\n+  std::cyl_bessel_kl(nul, xl);\n+\n+  return;\n+}\n+"}, {"sha": "c32b4df02bf48a04c1c1a1e10ee7681be20d9716", "filename": "libstdc++-v3/testsuite/special_functions/09_cyl_bessel_k/compile_2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F09_cyl_bessel_k%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F09_cyl_bessel_k%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F09_cyl_bessel_k%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.9 cyl_bessel_k\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float nuf = 1.0F / 3.0F, xf = 0.5F;\n+  double nud = 1.0 / 3.0, xd = 0.5;\n+  long double nul = 1.0L / 3.0L, xl = 0.5L;\n+\n+  cyl_bessel_k(nuf, xf);\n+  cyl_bessel_kf(nuf, xf);\n+  cyl_bessel_k(nud, xd);\n+  cyl_bessel_k(nul, xl);\n+  cyl_bessel_kl(nul, xl);\n+\n+  return;\n+}\n+"}, {"sha": "bb9d927bd62a9d2080491b759ce61dda381f8e3b", "filename": "libstdc++-v3/testsuite/special_functions/10_cyl_neumann/check_nan.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,88 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.10 cyl_neumann\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float nuf = 0.0F;\n+  double nud = 0.0;\n+  long double nul = 0.0L;\n+\n+  float a = std::cyl_neumann(nuf, xf);\n+  float b = std::cyl_neumannf(nuf, xf);\n+  double c = std::cyl_neumann(nud, xd);\n+  long double d = std::cyl_neumann(nul, xl);\n+  long double e = std::cyl_neumannl(nul, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+void\n+test02()\n+{\n+  float xf = 1.0F;\n+  double xd = 1.0;\n+  long double xl = 1.0L;\n+\n+  float nuf = std::numeric_limits<float>::quiet_NaN();\n+  double nud = std::numeric_limits<double>::quiet_NaN();\n+  long double nul = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float a = std::cyl_neumann(nuf, xf);\n+  float b = std::cyl_neumannf(nuf, xf);\n+  double c = std::cyl_neumann(nud, xd);\n+  long double d = std::cyl_neumann(nul, xl);\n+  long double e = std::cyl_neumannl(nul, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}\n+"}, {"sha": "5d320f67e44986b82d40a8018226080cc4966c71", "filename": "libstdc++-v3/testsuite/special_functions/10_cyl_neumann/check_value.cc", "status": "added", "additions": 718, "deletions": 0, "changes": 718, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,718 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  cyl_neumann\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+\n+// Test data for nu=0.0000000000000000.\n+// max(|f - f_GSL|): 1.6653345369377348e-16\n+// max(|f - f_GSL| / |f_GSL|): 2.6623873675138176e-15\n+const testcase_cyl_neumann<double>\n+data001[20] =\n+{\n+  { -0.93157302493005878, 0.0000000000000000, 0.25000000000000000 },\n+  { -0.44451873350670656, 0.0000000000000000, 0.50000000000000000 },\n+  { -0.13717276938577236, 0.0000000000000000, 0.75000000000000000 },\n+  { 0.088256964215676942, 0.0000000000000000, 1.0000000000000000 },\n+  { 0.25821685159454072, 0.0000000000000000, 1.2500000000000000 },\n+  { 0.38244892379775886, 0.0000000000000000, 1.5000000000000000 },\n+  { 0.46549262864690610, 0.0000000000000000, 1.7500000000000000 },\n+  { 0.51037567264974493, 0.0000000000000000, 2.0000000000000000 },\n+  { 0.52006476245727862, 0.0000000000000000, 2.2500000000000000 },\n+  { 0.49807035961523194, 0.0000000000000000, 2.5000000000000000 },\n+  { 0.44865872156913222, 0.0000000000000000, 2.7500000000000000 },\n+  { 0.37685001001279045, 0.0000000000000000, 3.0000000000000000 },\n+  { 0.28828690267308710, 0.0000000000000000, 3.2500000000000000 },\n+  { 0.18902194392082688, 0.0000000000000000, 3.5000000000000000 },\n+  { 0.085256756977362638, 0.0000000000000000, 3.7500000000000000 },\n+  { -0.016940739325064763, 0.0000000000000000, 4.0000000000000000 },\n+  { -0.11191885116160770, 0.0000000000000000, 4.2500000000000000 },\n+  { -0.19470500862950454, 0.0000000000000000, 4.5000000000000000 },\n+  { -0.26123250323497549, 0.0000000000000000, 4.7500000000000000 },\n+  { -0.30851762524903359, 0.0000000000000000, 5.0000000000000000 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+\n+// Test data for nu=0.33333333333333331.\n+// max(|f - f_GSL|): 5.8286708792820718e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.7769445360534625e-14\n+const testcase_cyl_neumann<double>\n+data002[20] =\n+{\n+  { -1.3461842332051077, 0.33333333333333331, 0.25000000000000000 },\n+  { -0.84062782604337771, 0.33333333333333331, 0.50000000000000000 },\n+  { -0.52488281484097077, 0.33333333333333331, 0.75000000000000000 },\n+  { -0.27880164127599205, 0.33333333333333331, 1.0000000000000000 },\n+  { -0.074321349727836453, 0.33333333333333331, 1.2500000000000000 },\n+  { 0.096610087766627981, 0.33333333333333331, 1.5000000000000000 },\n+  { 0.23582564494922068, 0.33333333333333331, 1.7500000000000000 },\n+  { 0.34319996626034494, 0.33333333333333331, 2.0000000000000000 },\n+  { 0.41835668452349323, 0.33333333333333331, 2.2500000000000000 },\n+  { 0.46145947419129157, 0.33333333333333331, 2.5000000000000000 },\n+  { 0.47358926135786023, 0.33333333333333331, 2.7500000000000000 },\n+  { 0.45689303457230640, 0.33333333333333331, 3.0000000000000000 },\n+  { 0.41458485697347386, 0.33333333333333331, 3.2500000000000000 },\n+  { 0.35084133277859947, 0.33333333333333331, 3.5000000000000000 },\n+  { 0.27061914527820891, 0.33333333333333331, 3.7500000000000000 },\n+  { 0.17941676634394862, 0.33333333333333331, 4.0000000000000000 },\n+  { 0.083000434191526043, 0.33333333333333331, 4.2500000000000000 },\n+  { -0.012886361627105348, 0.33333333333333331, 4.5000000000000000 },\n+  { -0.10281143123935124, 0.33333333333333331, 4.7500000000000000 },\n+  { -0.18192321129343850, 0.33333333333333331, 5.0000000000000000 },\n+};\n+const double toler002 = 1.0000000000000008e-12;\n+\n+// Test data for nu=0.50000000000000000.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 5.7217850214577088e-15\n+const testcase_cyl_neumann<double>\n+data003[20] =\n+{\n+  { -1.5461605241060765, 0.50000000000000000, 0.25000000000000000 },\n+  { -0.99024588024340454, 0.50000000000000000, 0.50000000000000000 },\n+  { -0.67411792914454460, 0.50000000000000000, 0.75000000000000000 },\n+  { -0.43109886801837594, 0.50000000000000000, 1.0000000000000000 },\n+  { -0.22502969244466481, 0.50000000000000000, 1.2500000000000000 },\n+  { -0.046083165893097265, 0.50000000000000000, 1.5000000000000000 },\n+  { 0.10750804524368722, 0.50000000000000000, 1.7500000000000000 },\n+  { 0.23478571040624849, 0.50000000000000000, 2.0000000000000000 },\n+  { 0.33414002338271825, 0.50000000000000000, 2.2500000000000000 },\n+  { 0.40427830223905686, 0.50000000000000000, 2.5000000000000000 },\n+  { 0.44472115119490507, 0.50000000000000000, 2.7500000000000000 },\n+  { 0.45604882079463316, 0.50000000000000000, 3.0000000000000000 },\n+  { 0.43998859501924370, 0.50000000000000000, 3.2500000000000000 },\n+  { 0.39938682536304909, 0.50000000000000000, 3.5000000000000000 },\n+  { 0.33809163836693340, 0.50000000000000000, 3.7500000000000000 },\n+  { 0.26076607667717877, 0.50000000000000000, 4.0000000000000000 },\n+  { 0.17264962544644955, 0.50000000000000000, 4.2500000000000000 },\n+  { 0.079285862862978548, 0.50000000000000000, 4.5000000000000000 },\n+  { -0.013765943019498003, 0.50000000000000000, 4.7500000000000000 },\n+  { -0.10121770918510846, 0.50000000000000000, 5.0000000000000000 },\n+};\n+const double toler003 = 5.0000000000000039e-13;\n+\n+// Test data for nu=0.66666666666666663.\n+// max(|f - f_GSL|): 1.4988010832439613e-15\n+// max(|f - f_GSL| / |f_GSL|): 6.3663053018318525e-15\n+const testcase_cyl_neumann<double>\n+data004[20] =\n+{\n+  { -1.8021638417426857, 0.66666666666666663, 0.25000000000000000 },\n+  { -1.1316060101031435, 0.66666666666666663, 0.50000000000000000 },\n+  { -0.80251156358450737, 0.66666666666666663, 0.75000000000000000 },\n+  { -0.56270321497463327, 0.66666666666666663, 1.0000000000000000 },\n+  { -0.36007453643432208, 0.66666666666666663, 1.2500000000000000 },\n+  { -0.18017937469615020, 0.66666666666666663, 1.5000000000000000 },\n+  { -0.019885608758103752, 0.66666666666666663, 1.7500000000000000 },\n+  { 0.11989345361903521, 0.66666666666666663, 2.0000000000000000 },\n+  { 0.23690889836358039, 0.66666666666666663, 2.2500000000000000 },\n+  { 0.32882045742954535, 0.66666666666666663, 2.5000000000000000 },\n+  { 0.39385133784531856, 0.66666666666666663, 2.7500000000000000 },\n+  { 0.43115101690935642, 0.66666666666666663, 3.0000000000000000 },\n+  { 0.44098127351445843, 0.66666666666666663, 3.2500000000000000 },\n+  { 0.42477631413456485, 0.66666666666666663, 3.5000000000000000 },\n+  { 0.38510384155620386, 0.66666666666666663, 3.7500000000000000 },\n+  { 0.32554526794354366, 0.66666666666666663, 4.0000000000000000 },\n+  { 0.25051080073878446, 0.66666666666666663, 4.2500000000000000 },\n+  { 0.16500507211842136, 0.66666666666666663, 4.5000000000000000 },\n+  { 0.074359649728861360, 0.66666666666666663, 4.7500000000000000 },\n+  { -0.016050662643389627, 0.66666666666666663, 5.0000000000000000 },\n+};\n+const double toler004 = 5.0000000000000039e-13;\n+\n+// Test data for nu=1.0000000000000000.\n+// max(|f - f_GSL|): 9.1593399531575415e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.3683879467319323e-14\n+const testcase_cyl_neumann<double>\n+data005[13] =\n+{\n+  { -0.10703243154093699, 1.0000000000000000, 2.0000000000000000 },\n+  { 0.027192057738017056, 1.0000000000000000, 2.2500000000000000 },\n+  { 0.14591813796678599, 1.0000000000000000, 2.5000000000000000 },\n+  { 0.24601900149738354, 1.0000000000000000, 2.7500000000000000 },\n+  { 0.32467442479180003, 1.0000000000000000, 3.0000000000000000 },\n+  { 0.37977777371708382, 1.0000000000000000, 3.2500000000000000 },\n+  { 0.41018841788751170, 1.0000000000000000, 3.5000000000000000 },\n+  { 0.41586877934522715, 1.0000000000000000, 3.7500000000000000 },\n+  { 0.39792571055709991, 1.0000000000000000, 4.0000000000000000 },\n+  { 0.35856889308385076, 1.0000000000000000, 4.2500000000000000 },\n+  { 0.30099732306965449, 1.0000000000000000, 4.5000000000000000 },\n+  { 0.22922559673872217, 1.0000000000000000, 4.7500000000000000 },\n+  { 0.14786314339122700, 1.0000000000000000, 5.0000000000000000 },\n+};\n+const double toler005 = 2.5000000000000015e-12;\n+\n+// Test data for nu=2.0000000000000000.\n+// max(|f - f_GSL|): 6.1062266354383610e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.2540693630135021e-14\n+const testcase_cyl_neumann<double>\n+data006[20] =\n+{\n+  { -20.701268809592200, 2.0000000000000000, 0.25000000000000000 },\n+  { -5.4413708371742668, 2.0000000000000000, 0.50000000000000000 },\n+  { -2.6297460326656559, 2.0000000000000000, 0.75000000000000000 },\n+  { -1.6506826068162548, 2.0000000000000000, 1.0000000000000000 },\n+  { -1.1931993101785539, 2.0000000000000000, 1.2500000000000000 },\n+  { -0.93219375976297369, 2.0000000000000000, 1.5000000000000000 },\n+  { -0.75574746972832973, 2.0000000000000000, 1.7500000000000000 },\n+  { -0.61740810419068193, 2.0000000000000000, 2.0000000000000000 },\n+  { -0.49589404446793012, 2.0000000000000000, 2.2500000000000000 },\n+  { -0.38133584924180314, 2.0000000000000000, 2.5000000000000000 },\n+  { -0.26973581138921693, 2.0000000000000000, 2.7500000000000000 },\n+  { -0.16040039348492377, 2.0000000000000000, 3.0000000000000000 },\n+  { -0.054577503462573951, 2.0000000000000000, 3.2500000000000000 },\n+  { 0.045371437729179787, 2.0000000000000000, 3.5000000000000000 },\n+  { 0.13653992534009185, 2.0000000000000000, 3.7500000000000000 },\n+  { 0.21590359460361472, 2.0000000000000000, 4.0000000000000000 },\n+  { 0.28065715378930217, 2.0000000000000000, 4.2500000000000000 },\n+  { 0.32848159666046206, 2.0000000000000000, 4.5000000000000000 },\n+  { 0.35774854396706901, 2.0000000000000000, 4.7500000000000000 },\n+  { 0.36766288260552438, 2.0000000000000000, 5.0000000000000000 },\n+};\n+const double toler006 = 1.0000000000000008e-12;\n+\n+// Test data for nu=5.0000000000000000.\n+// max(|f - f_GSL|): 8.8817841970012523e-15\n+// max(|f - f_GSL| / |f_GSL|): 1.6846903979704834e-15\n+const testcase_cyl_neumann<double>\n+data007[13] =\n+{\n+  { -9.9359891284819675, 5.0000000000000000, 2.0000000000000000 },\n+  { -5.9446343848076424, 5.0000000000000000, 2.2500000000000000 },\n+  { -3.8301760007407522, 5.0000000000000000, 2.5000000000000000 },\n+  { -2.6287042009459087, 5.0000000000000000, 2.7500000000000000 },\n+  { -1.9059459538286738, 5.0000000000000000, 3.0000000000000000 },\n+  { -1.4498157389142654, 5.0000000000000000, 3.2500000000000000 },\n+  { -1.1494603169763686, 5.0000000000000000, 3.5000000000000000 },\n+  { -0.94343105151431672, 5.0000000000000000, 3.7500000000000000 },\n+  { -0.79585142111419982, 5.0000000000000000, 4.0000000000000000 },\n+  { -0.68479288173907016, 5.0000000000000000, 4.2500000000000000 },\n+  { -0.59631936513587558, 5.0000000000000000, 4.5000000000000000 },\n+  { -0.52130838331747587, 5.0000000000000000, 4.7500000000000000 },\n+  { -0.45369482249110193, 5.0000000000000000, 5.0000000000000000 },\n+};\n+const double toler007 = 2.5000000000000020e-13;\n+\n+// Test data for nu=10.000000000000000.\n+// max(|f - f_GSL|): 2.3841857910156250e-07\n+// max(|f - f_GSL| / |f_GSL|): 1.4991559422183497e-15\n+const testcase_cyl_neumann<double>\n+data008[20] =\n+{\n+  { -124241617095379.48, 10.000000000000000, 0.25000000000000000 },\n+  { -121963623349.56966, 10.000000000000000, 0.50000000000000000 },\n+  { -2133501638.9057348, 10.000000000000000, 0.75000000000000000 },\n+  { -121618014.27868921, 10.000000000000000, 1.0000000000000000 },\n+  { -13265210.158452792, 10.000000000000000, 1.2500000000000000 },\n+  { -2183993.0260864049, 10.000000000000000, 1.5000000000000000 },\n+  { -478274.82386541169, 10.000000000000000, 1.7500000000000000 },\n+  { -129184.54220803917, 10.000000000000000, 2.0000000000000000 },\n+  { -40993.254794381690, 10.000000000000000, 2.2500000000000000 },\n+  { -14782.847716021070, 10.000000000000000, 2.5000000000000000 },\n+  { -5916.5330998776262, 10.000000000000000, 2.7500000000000000 },\n+  { -2582.6071294842995, 10.000000000000000, 3.0000000000000000 },\n+  { -1213.3423564023892, 10.000000000000000, 3.2500000000000000 },\n+  { -607.27437834125760, 10.000000000000000, 3.5000000000000000 },\n+  { -321.17461059752202, 10.000000000000000, 3.7500000000000000 },\n+  { -178.33055590796428, 10.000000000000000, 4.0000000000000000 },\n+  { -103.40496587570090, 10.000000000000000, 4.2500000000000000 },\n+  { -62.345024619781434, 10.000000000000000, 4.5000000000000000 },\n+  { -38.944510430296937, 10.000000000000000, 4.7500000000000000 },\n+  { -25.129110095610095, 10.000000000000000, 5.0000000000000000 },\n+};\n+const double toler008 = 2.5000000000000020e-13;\n+\n+// Test data for nu=20.000000000000000.\n+// max(|f - f_GSL|): 6442450944.0000000\n+// max(|f - f_GSL| / |f_GSL|): 1.6458221996165416e-15\n+const testcase_cyl_neumann<double>\n+data009[20] =\n+{\n+  { -4.4678815064152581e+34, 20.000000000000000, 0.25000000000000000 },\n+  { -4.2714301215659088e+28, 20.000000000000000, 0.50000000000000000 },\n+  { -1.2898357375834223e+25, 20.000000000000000, 0.75000000000000000 },\n+  { -4.1139703148355065e+22, 20.000000000000000, 1.0000000000000000 },\n+  { -4.7783533372148580e+20, 20.000000000000000, 1.2500000000000000 },\n+  { -1.2577301772964241e+19, 20.000000000000000, 1.5000000000000000 },\n+  { -5.8251041176649626e+17, 20.000000000000000, 1.7500000000000000 },\n+  { -40816513889983640., 20.000000000000000, 2.0000000000000000 },\n+  { -3925339868516418.5, 20.000000000000000, 2.2500000000000000 },\n+  { -484776559582090.25, 20.000000000000000, 2.5000000000000000 },\n+  { -73320655044814.469, 20.000000000000000, 2.7500000000000000 },\n+  { -13113540041757.449, 20.000000000000000, 3.0000000000000000 },\n+  { -2700669268882.7139, 20.000000000000000, 3.2500000000000000 },\n+  { -627339518240.21240, 20.000000000000000, 3.5000000000000000 },\n+  { -161695236802.71753, 20.000000000000000, 3.7500000000000000 },\n+  { -45637199262.220100, 20.000000000000000, 4.0000000000000000 },\n+  { -13953299213.925377, 20.000000000000000, 4.2500000000000000 },\n+  { -4580215756.5691023, 20.000000000000000, 4.5000000000000000 },\n+  { -1602110715.5159132, 20.000000000000000, 4.7500000000000000 },\n+  { -593396529.69143200, 20.000000000000000, 5.0000000000000000 },\n+};\n+const double toler009 = 2.5000000000000020e-13;\n+\n+// Test data for nu=50.000000000000000.\n+// max(|f - f_GSL|): 6.4703872001161536e+68\n+// max(|f - f_GSL| / |f_GSL|): 3.7730746786493403e-15\n+const testcase_cyl_neumann<double>\n+data010[20] =\n+{\n+  { -2.7643487471155969e+107, 50.000000000000000, 0.25000000000000000 },\n+  { -2.4575848224461092e+92, 50.000000000000000, 0.50000000000000000 },\n+  { -3.8604508467683829e+83, 50.000000000000000, 0.75000000000000000 },\n+  { -2.1911428126053411e+77, 50.000000000000000, 1.0000000000000000 },\n+  { -3.1362926828833165e+72, 50.000000000000000, 1.2500000000000000 },\n+  { -3.4584216846550566e+68, 50.000000000000000, 1.5000000000000000 },\n+  { -1.5607714080312795e+65, 50.000000000000000, 1.7500000000000000 },\n+  { -1.9761505765184128e+62, 50.000000000000000, 2.0000000000000000 },\n+  { -5.5023640499231188e+59, 50.000000000000000, 2.2500000000000000 },\n+  { -2.8530384545826849e+57, 50.000000000000000, 2.5000000000000000 },\n+  { -2.4467169322684809e+55, 50.000000000000000, 2.7500000000000000 },\n+  { -3.1793891461005181e+53, 50.000000000000000, 3.0000000000000000 },\n+  { -5.8573901231568658e+51, 50.000000000000000, 3.2500000000000000 },\n+  { -1.4528262197760965e+50, 50.000000000000000, 3.5000000000000000 },\n+  { -4.6566569870478635e+48, 50.000000000000000, 3.7500000000000000 },\n+  { -1.8661134361400254e+47, 50.000000000000000, 4.0000000000000000 },\n+  { -9.1005883612255402e+45, 50.000000000000000, 4.2500000000000000 },\n+  { -5.2813777542386141e+44, 50.000000000000000, 4.5000000000000000 },\n+  { -3.5795477722116469e+43, 50.000000000000000, 4.7500000000000000 },\n+  { -2.7888370175838930e+42, 50.000000000000000, 5.0000000000000000 },\n+};\n+const double toler010 = 2.5000000000000020e-13;\n+\n+// Test data for nu=100.00000000000000.\n+// max(|f - f_GSL|): 1.6136484921850493e+233\n+// max(|f - f_GSL| / |f_GSL|): 3.7090973947899002e-13\n+const testcase_cyl_neumann<double>\n+data011[20] =\n+{\n+  { -6.0523080585856754e+245, 100.00000000000000, 0.25000000000000000 },\n+  { -4.7766903780412668e+215, 100.00000000000000, 0.50000000000000000 },\n+  { -1.1758283017660654e+198, 100.00000000000000, 0.75000000000000000 },\n+  { -3.7752878101091316e+185, 100.00000000000000, 1.0000000000000000 },\n+  { -7.7013290730008304e+175, 100.00000000000000, 1.2500000000000000 },\n+  { -9.3152624794288802e+167, 100.00000000000000, 1.5000000000000000 },\n+  { -1.8854163374247264e+161, 100.00000000000000, 1.7500000000000000 },\n+  { -3.0008260488569689e+155, 100.00000000000000, 2.0000000000000000 },\n+  { -2.3075650873777408e+150, 100.00000000000000, 2.2500000000000000 },\n+  { -6.1476258561369381e+145, 100.00000000000000, 2.5000000000000000 },\n+  { -4.4758816234829593e+141, 100.00000000000000, 2.7500000000000000 },\n+  { -7.4747961023547846e+137, 100.00000000000000, 3.0000000000000000 },\n+  { -2.5067022766900123e+134, 100.00000000000000, 3.2500000000000000 },\n+  { -1.5222488313431896e+131, 100.00000000000000, 3.5000000000000000 },\n+  { -1.5422392812241397e+128, 100.00000000000000, 3.7500000000000000 },\n+  { -2.4400857387551062e+125, 100.00000000000000, 4.0000000000000000 },\n+  { -5.7118153392422278e+122, 100.00000000000000, 4.2500000000000000 },\n+  { -1.8915420905194465e+120, 100.00000000000000, 4.5000000000000000 },\n+  { -8.5357945104770158e+117, 100.00000000000000, 4.7500000000000000 },\n+  { -5.0848639160196196e+115, 100.00000000000000, 5.0000000000000000 },\n+};\n+const double toler011 = 2.5000000000000014e-11;\n+//  cyl_neumann\n+\n+// Test data for nu=0.0000000000000000.\n+// max(|f - f_GSL|): 7.1245093158367467e-15\n+// max(|f - f_GSL| / |f_GSL|): 1.5215931554460198e-12\n+const testcase_cyl_neumann<double>\n+data012[20] =\n+{\n+  { -0.30851762524903359, 0.0000000000000000, 5.0000000000000000 },\n+  { 0.055671167283599457, 0.0000000000000000, 10.000000000000000 },\n+  { 0.20546429603891822, 0.0000000000000000, 15.000000000000000 },\n+  { 0.062640596809384053, 0.0000000000000000, 20.000000000000000 },\n+  { -0.12724943226800617, 0.0000000000000000, 25.000000000000000 },\n+  { -0.11729573168666413, 0.0000000000000000, 30.000000000000000 },\n+  { 0.045797987195155689, 0.0000000000000000, 35.000000000000000 },\n+  { 0.12593641705826092, 0.0000000000000000, 40.000000000000000 },\n+  { 0.027060469763313333, 0.0000000000000000, 45.000000000000000 },\n+  { -0.098064995470077118, 0.0000000000000000, 50.000000000000000 },\n+  { -0.077569178730412594, 0.0000000000000000, 55.000000000000000 },\n+  { 0.047358952209449426, 0.0000000000000000, 60.000000000000000 },\n+  { 0.097183557740181920, 0.0000000000000000, 65.000000000000000 },\n+  { 0.0093096664589409992, 0.0000000000000000, 70.000000000000000 },\n+  { -0.085369047647775656, 0.0000000000000000, 75.000000000000000 },\n+  { -0.055620339089770016, 0.0000000000000000, 80.000000000000000 },\n+  { 0.049567884951494251, 0.0000000000000000, 85.000000000000000 },\n+  { 0.079776475854877751, 0.0000000000000000, 90.000000000000000 },\n+  { -0.0028230995861232107, 0.0000000000000000, 95.000000000000000 },\n+  { -0.077244313365083153, 0.0000000000000000, 100.00000000000000 },\n+};\n+const double toler012 = 1.0000000000000006e-10;\n+\n+// Test data for nu=0.33333333333333331.\n+// max(|f - f_GSL|): 6.4392935428259079e-15\n+// max(|f - f_GSL| / |f_GSL|): 4.0229312517518102e-13\n+const testcase_cyl_neumann<double>\n+data013[20] =\n+{\n+  { -0.18192321129343850, 0.33333333333333331, 5.0000000000000000 },\n+  { 0.17020111788268760, 0.33333333333333331, 10.000000000000000 },\n+  { 0.18540507541540796, 0.33333333333333331, 15.000000000000000 },\n+  { -0.028777707635715043, 0.33333333333333331, 20.000000000000000 },\n+  { -0.15829741864944163, 0.33333333333333331, 25.000000000000000 },\n+  { -0.058645772316705209, 0.33333333333333331, 30.000000000000000 },\n+  { 0.10294930308870617, 0.33333333333333331, 35.000000000000000 },\n+  { 0.10547870367098922, 0.33333333333333331, 40.000000000000000 },\n+  { -0.034334228816010816, 0.33333333333333331, 45.000000000000000 },\n+  { -0.11283489933031279, 0.33333333333333331, 50.000000000000000 },\n+  { -0.030007358986895105, 0.33333333333333331, 55.000000000000000 },\n+  { 0.086699173295718121, 0.33333333333333331, 60.000000000000000 },\n+  { 0.074875579668878658, 0.33333333333333331, 65.000000000000000 },\n+  { -0.039323246374552680, 0.33333333333333331, 70.000000000000000 },\n+  { -0.091263539574475236, 0.33333333333333331, 75.000000000000000 },\n+  { -0.013358849535984318, 0.33333333333333331, 80.000000000000000 },\n+  { 0.078373575537830198, 0.33333333333333331, 85.000000000000000 },\n+  { 0.055812482883955940, 0.33333333333333331, 90.000000000000000 },\n+  { -0.043310380106990683, 0.33333333333333331, 95.000000000000000 },\n+  { -0.076900504962136559, 0.33333333333333331, 100.00000000000000 },\n+};\n+const double toler013 = 2.5000000000000014e-11;\n+\n+// Test data for nu=0.50000000000000000.\n+// max(|f - f_GSL|): 6.5988881026157742e-15\n+// max(|f - f_GSL| / |f_GSL|): 6.0282403975230169e-13\n+const testcase_cyl_neumann<double>\n+data014[20] =\n+{\n+  { -0.10121770918510846, 0.50000000000000000, 5.0000000000000000 },\n+  { 0.21170886633139810, 0.50000000000000000, 10.000000000000000 },\n+  { 0.15650551590730855, 0.50000000000000000, 15.000000000000000 },\n+  { -0.072806904785061938, 0.50000000000000000, 20.000000000000000 },\n+  { -0.15817308404205055, 0.50000000000000000, 25.000000000000000 },\n+  { -0.022470290598831138, 0.50000000000000000, 30.000000000000000 },\n+  { 0.12187835265849535, 0.50000000000000000, 35.000000000000000 },\n+  { 0.084138655676395377, 0.50000000000000000, 40.000000000000000 },\n+  { -0.062482641933003201, 0.50000000000000000, 45.000000000000000 },\n+  { -0.10888475635053954, 0.50000000000000000, 50.000000000000000 },\n+  { -0.0023805454010949376, 0.50000000000000000, 55.000000000000000 },\n+  { 0.098104683735037918, 0.50000000000000000, 60.000000000000000 },\n+  { 0.055663470218594434, 0.50000000000000000, 65.000000000000000 },\n+  { -0.060396767883824871, 0.50000000000000000, 70.000000000000000 },\n+  { -0.084922578922046868, 0.50000000000000000, 75.000000000000000 },\n+  { 0.0098472271924441284, 0.50000000000000000, 80.000000000000000 },\n+  { 0.085190643574343625, 0.50000000000000000, 85.000000000000000 },\n+  { 0.037684970437156268, 0.50000000000000000, 90.000000000000000 },\n+  { -0.059772904856097500, 0.50000000000000000, 95.000000000000000 },\n+  { -0.068803091468728109, 0.50000000000000000, 100.00000000000000 },\n+};\n+const double toler014 = 5.0000000000000028e-11;\n+\n+// Test data for nu=0.66666666666666663.\n+// max(|f - f_GSL|): 7.2442052356791464e-15\n+// max(|f - f_GSL| / |f_GSL|): 4.1296144775547441e-13\n+const testcase_cyl_neumann<double>\n+data015[20] =\n+{\n+  { -0.016050662643389627, 0.66666666666666663, 5.0000000000000000 },\n+  { 0.23937232657540733, 0.66666666666666663, 10.000000000000000 },\n+  { 0.11762106604241235, 0.66666666666666663, 15.000000000000000 },\n+  { -0.11182254014899558, 0.66666666666666663, 20.000000000000000 },\n+  { -0.14756582982938804, 0.66666666666666663, 25.000000000000000 },\n+  { 0.015078692908077713, 0.66666666666666663, 30.000000000000000 },\n+  { 0.13260911815705795, 0.66666666666666663, 35.000000000000000 },\n+  { 0.057217565989652698, 0.66666666666666663, 40.000000000000000 },\n+  { -0.086373755152382006, 0.66666666666666663, 45.000000000000000 },\n+  { -0.097624139208051616, 0.66666666666666663, 50.000000000000000 },\n+  { 0.025354902147023392, 0.66666666666666663, 55.000000000000000 },\n+  { 0.10288136476351206, 0.66666666666666663, 60.000000000000000 },\n+  { 0.032728379560128203, 0.66666666666666663, 65.000000000000000 },\n+  { -0.077363672735747818, 0.66666666666666663, 70.000000000000000 },\n+  { -0.072855870458293961, 0.66666666666666663, 75.000000000000000 },\n+  { 0.032358106046953543, 0.66666666666666663, 80.000000000000000 },\n+  { 0.086240651537394228, 0.66666666666666663, 85.000000000000000 },\n+  { 0.017029601697285190, 0.66666666666666663, 90.000000000000000 },\n+  { -0.072173520560584681, 0.66666666666666663, 95.000000000000000 },\n+  { -0.056057339204073887, 0.66666666666666663, 100.00000000000000 },\n+};\n+const double toler015 = 2.5000000000000014e-11;\n+\n+// Test data for nu=1.0000000000000000.\n+// max(|f - f_GSL|): 7.6640083168655337e-15\n+// max(|f - f_GSL| / |f_GSL|): 4.2719333494531163e-13\n+const testcase_cyl_neumann<double>\n+data016[20] =\n+{\n+  { 0.14786314339122700, 1.0000000000000000, 5.0000000000000000 },\n+  { 0.24901542420695386, 1.0000000000000000, 10.000000000000000 },\n+  { 0.021073628036873522, 1.0000000000000000, 15.000000000000000 },\n+  { -0.16551161436252115, 1.0000000000000000, 20.000000000000000 },\n+  { -0.098829964783237412, 1.0000000000000000, 25.000000000000000 },\n+  { 0.084425570661747135, 1.0000000000000000, 30.000000000000000 },\n+  { 0.12751273354559009, 1.0000000000000000, 35.000000000000000 },\n+  { -0.0057935058215497536, 1.0000000000000000, 40.000000000000000 },\n+  { -0.11552517964639945, 1.0000000000000000, 45.000000000000000 },\n+  { -0.056795668562014692, 1.0000000000000000, 50.000000000000000 },\n+  { 0.073846265432577926, 1.0000000000000000, 55.000000000000000 },\n+  { 0.091869609369866892, 1.0000000000000000, 60.000000000000000 },\n+  { -0.017940374275377362, 1.0000000000000000, 65.000000000000000 },\n+  { -0.094844652625716230, 1.0000000000000000, 70.000000000000000 },\n+  { -0.035213785160580421, 1.0000000000000000, 75.000000000000000 },\n+  { 0.069395913784588037, 1.0000000000000000, 80.000000000000000 },\n+  { 0.071233187582749768, 1.0000000000000000, 85.000000000000000 },\n+  { -0.026187238607768244, 1.0000000000000000, 90.000000000000000 },\n+  { -0.081827958724501215, 1.0000000000000000, 95.000000000000000 },\n+  { -0.020372312002759834, 1.0000000000000000, 100.00000000000000 },\n+};\n+const double toler016 = 2.5000000000000014e-11;\n+\n+// Test data for nu=2.0000000000000000.\n+// max(|f - f_GSL|): 7.1193051454088163e-15\n+// max(|f - f_GSL| / |f_GSL|): 3.9371586401654762e-12\n+const testcase_cyl_neumann<double>\n+data017[20] =\n+{\n+  { 0.36766288260552438, 2.0000000000000000, 5.0000000000000000 },\n+  { -0.0058680824422086830, 2.0000000000000000, 10.000000000000000 },\n+  { -0.20265447896733507, 2.0000000000000000, 15.000000000000000 },\n+  { -0.079191758245636165, 2.0000000000000000, 20.000000000000000 },\n+  { 0.11934303508534717, 2.0000000000000000, 25.000000000000000 },\n+  { 0.12292410306411394, 2.0000000000000000, 30.000000000000000 },\n+  { -0.038511545278264829, 2.0000000000000000, 35.000000000000000 },\n+  { -0.12622609234933840, 2.0000000000000000, 40.000000000000000 },\n+  { -0.032194922192042195, 2.0000000000000000, 45.000000000000000 },\n+  { 0.095793168727596537, 2.0000000000000000, 50.000000000000000 },\n+  { 0.080254497473415426, 2.0000000000000000, 55.000000000000000 },\n+  { -0.044296631897120527, 2.0000000000000000, 60.000000000000000 },\n+  { -0.097735569256347382, 2.0000000000000000, 65.000000000000000 },\n+  { -0.012019513676818605, 2.0000000000000000, 70.000000000000000 },\n+  { 0.084430013376826846, 2.0000000000000000, 75.000000000000000 },\n+  { 0.057355236934384719, 2.0000000000000000, 80.000000000000000 },\n+  { -0.047891809949547198, 2.0000000000000000, 85.000000000000000 },\n+  { -0.080358414490605934, 2.0000000000000000, 90.000000000000000 },\n+  { 0.0011004057182389746, 2.0000000000000000, 95.000000000000000 },\n+  { 0.076836867125027963, 2.0000000000000000, 100.00000000000000 },\n+};\n+const double toler017 = 2.5000000000000017e-10;\n+\n+// Test data for nu=5.0000000000000000.\n+// max(|f - f_GSL|): 7.8097792989562098e-15\n+// max(|f - f_GSL| / |f_GSL|): 3.2731037832632215e-11\n+const testcase_cyl_neumann<double>\n+data018[20] =\n+{\n+  { -0.45369482249110193, 5.0000000000000000, 5.0000000000000000 },\n+  { 0.13540304768936234, 5.0000000000000000, 10.000000000000000 },\n+  { 0.16717271575940015, 5.0000000000000000, 15.000000000000000 },\n+  { -0.10003576788953220, 5.0000000000000000, 20.000000000000000 },\n+  { -0.14705799311372267, 5.0000000000000000, 25.000000000000000 },\n+  { 0.031627359289264301, 5.0000000000000000, 30.000000000000000 },\n+  { 0.13554781474770028, 5.0000000000000000, 35.000000000000000 },\n+  { 0.031869448780850247, 5.0000000000000000, 40.000000000000000 },\n+  { -0.10426932700176872, 5.0000000000000000, 45.000000000000000 },\n+  { -0.078548413913081594, 5.0000000000000000, 50.000000000000000 },\n+  { 0.055257033062858375, 5.0000000000000000, 55.000000000000000 },\n+  { 0.099464632840450887, 5.0000000000000000, 60.000000000000000 },\n+  { 0.00023860469499595305, 5.0000000000000000, 65.000000000000000 },\n+  { -0.091861802216406052, 5.0000000000000000, 70.000000000000000 },\n+  { -0.048383671296970042, 5.0000000000000000, 75.000000000000000 },\n+  { 0.060293667104896316, 5.0000000000000000, 80.000000000000000 },\n+  { 0.077506166682733996, 5.0000000000000000, 85.000000000000000 },\n+  { -0.015338764062239767, 5.0000000000000000, 90.000000000000000 },\n+  { -0.081531504045514361, 5.0000000000000000, 95.000000000000000 },\n+  { -0.029480196281661937, 5.0000000000000000, 100.00000000000000 },\n+};\n+const double toler018 = 2.5000000000000013e-09;\n+\n+// Test data for nu=10.000000000000000.\n+// max(|f - f_GSL|): 1.7763568394002505e-14\n+// max(|f - f_GSL| / |f_GSL|): 2.7466153115234563e-12\n+const testcase_cyl_neumann<double>\n+data019[20] =\n+{\n+  { -25.129110095610095, 10.000000000000000, 5.0000000000000000 },\n+  { -0.35981415218340279, 10.000000000000000, 10.000000000000000 },\n+  { 0.21997141360195577, 10.000000000000000, 15.000000000000000 },\n+  { -0.043894653515658105, 10.000000000000000, 20.000000000000000 },\n+  { -0.14871839049980651, 10.000000000000000, 25.000000000000000 },\n+  { 0.075056702122397012, 10.000000000000000, 30.000000000000000 },\n+  { 0.12222473135000546, 10.000000000000000, 35.000000000000000 },\n+  { -0.046723877232677985, 10.000000000000000, 40.000000000000000 },\n+  { -0.11739339009322181, 10.000000000000000, 45.000000000000000 },\n+  { 0.0057238971820535930, 10.000000000000000, 50.000000000000000 },\n+  { 0.10733910125831631, 10.000000000000000, 55.000000000000000 },\n+  { 0.036290350559545478, 10.000000000000000, 60.000000000000000 },\n+  { -0.083239127691715667, 10.000000000000000, 65.000000000000000 },\n+  { -0.069639384138314858, 10.000000000000000, 70.000000000000000 },\n+  { 0.045798335061325066, 10.000000000000000, 75.000000000000000 },\n+  { 0.086269195064844456, 10.000000000000000, 80.000000000000000 },\n+  { -0.0018234674126248740, 10.000000000000000, 85.000000000000000 },\n+  { -0.082067762371231284, 10.000000000000000, 90.000000000000000 },\n+  { -0.038798074754578089, 10.000000000000000, 95.000000000000000 },\n+  { 0.058331574236414913, 10.000000000000000, 100.00000000000000 },\n+};\n+const double toler019 = 2.5000000000000017e-10;\n+\n+// Test data for nu=20.000000000000000.\n+// max(|f - f_GSL|): 7.1525573730468750e-07\n+// max(|f - f_GSL| / |f_GSL|): 1.7017552833615218e-12\n+const testcase_cyl_neumann<double>\n+data020[20] =\n+{\n+  { -593396529.69143200, 20.000000000000000, 5.0000000000000000 },\n+  { -1597.4838482696259, 20.000000000000000, 10.000000000000000 },\n+  { -3.3087330924737621, 20.000000000000000, 15.000000000000000 },\n+  { -0.28548945860020319, 20.000000000000000, 20.000000000000000 },\n+  { 0.19804074776289243, 20.000000000000000, 25.000000000000000 },\n+  { -0.16848153948742683, 20.000000000000000, 30.000000000000000 },\n+  { 0.10102784152594022, 20.000000000000000, 35.000000000000000 },\n+  { 0.045161820565805755, 20.000000000000000, 40.000000000000000 },\n+  { -0.12556489308015448, 20.000000000000000, 45.000000000000000 },\n+  { 0.016442633948115834, 20.000000000000000, 50.000000000000000 },\n+  { 0.10853448778255181, 20.000000000000000, 55.000000000000000 },\n+  { -0.026721408520664701, 20.000000000000000, 60.000000000000000 },\n+  { -0.098780425256324175, 20.000000000000000, 65.000000000000000 },\n+  { 0.016201957786018233, 20.000000000000000, 70.000000000000000 },\n+  { 0.093591198265063721, 20.000000000000000, 75.000000000000000 },\n+  { 0.0040484400737296200, 20.000000000000000, 80.000000000000000 },\n+  { -0.086314929459920531, 20.000000000000000, 85.000000000000000 },\n+  { -0.028274110097231530, 20.000000000000000, 90.000000000000000 },\n+  { 0.072349520791638741, 20.000000000000000, 95.000000000000000 },\n+  { 0.051247973076188474, 20.000000000000000, 100.00000000000000 },\n+};\n+const double toler020 = 1.0000000000000006e-10;\n+\n+// Test data for nu=50.000000000000000.\n+// max(|f - f_GSL|): 1.0522490333925732e+28\n+// max(|f - f_GSL| / |f_GSL|): 2.6658726302692481e-12\n+const testcase_cyl_neumann<double>\n+data021[20] =\n+{\n+  { -2.7888370175838930e+42, 50.000000000000000, 5.0000000000000000 },\n+  { -3.6410665018007421e+27, 50.000000000000000, 10.000000000000000 },\n+  { -1.0929732912175415e+19, 50.000000000000000, 15.000000000000000 },\n+  { -15606426801663.734, 50.000000000000000, 20.000000000000000 },\n+  { -753573251.44662738, 50.000000000000000, 25.000000000000000 },\n+  { -386759.32602734759, 50.000000000000000, 30.000000000000000 },\n+  { -1172.8690492895323, 50.000000000000000, 35.000000000000000 },\n+  { -15.615608873419944, 50.000000000000000, 40.000000000000000 },\n+  { -0.87058346204176895, 50.000000000000000, 45.000000000000000 },\n+  { -0.21031655464397747, 50.000000000000000, 50.000000000000000 },\n+  { 0.093048240412999389, 50.000000000000000, 55.000000000000000 },\n+  { 0.0086417699626744754, 50.000000000000000, 60.000000000000000 },\n+  { -0.025019788459222037, 50.000000000000000, 65.000000000000000 },\n+  { -0.0014815155191909152, 50.000000000000000, 70.000000000000000 },\n+  { 0.050335774732164121, 50.000000000000000, 75.000000000000000 },\n+  { -0.092924250967987232, 50.000000000000000, 80.000000000000000 },\n+  { 0.087332463030205698, 50.000000000000000, 85.000000000000000 },\n+  { -0.016164237701651860, 50.000000000000000, 90.000000000000000 },\n+  { -0.068897613820457934, 50.000000000000000, 95.000000000000000 },\n+  { 0.076505263944803045, 50.000000000000000, 100.00000000000000 },\n+};\n+const double toler021 = 2.5000000000000017e-10;\n+\n+// Test data for nu=100.00000000000000.\n+// max(|f - f_GSL|): 6.3342780989716025e+102\n+// max(|f - f_GSL| / |f_GSL|): 1.2681517765786818e-13\n+const testcase_cyl_neumann<double>\n+data022[20] =\n+{\n+  { -5.0848639160196196e+115, 100.00000000000000, 5.0000000000000000 },\n+  { -4.8491482711800252e+85, 100.00000000000000, 10.000000000000000 },\n+  { -1.6375955323195320e+68, 100.00000000000000, 15.000000000000000 },\n+  { -8.2002648144679126e+55, 100.00000000000000, 20.000000000000000 },\n+  { -2.9712216432562368e+46, 100.00000000000000, 25.000000000000000 },\n+  { -7.2875284708240751e+38, 100.00000000000000, 30.000000000000000 },\n+  { -3.4251079902108953e+32, 100.00000000000000, 35.000000000000000 },\n+  { -1.4552439438101802e+27, 100.00000000000000, 40.000000000000000 },\n+  { -3.4506612476220073e+22, 100.00000000000000, 45.000000000000000 },\n+  { -3.2938001882025953e+18, 100.00000000000000, 50.000000000000000 },\n+  { -1005686182055527.4, 100.00000000000000, 55.000000000000000 },\n+  { -831892881402.11377, 100.00000000000000, 60.000000000000000 },\n+  { -1650863778.0598330, 100.00000000000000, 65.000000000000000 },\n+  { -7192614.1976097794, 100.00000000000000, 70.000000000000000 },\n+  { -64639.072261231595, 100.00000000000000, 75.000000000000000 },\n+  { -1152.5905185698466, 100.00000000000000, 80.000000000000000 },\n+  { -40.250761402101560, 100.00000000000000, 85.000000000000000 },\n+  { -2.8307771387185459, 100.00000000000000, 90.000000000000000 },\n+  { -0.45762200495904848, 100.00000000000000, 95.000000000000000 },\n+  { -0.16692141141757652, 100.00000000000000, 100.00000000000000 },\n+};\n+const double toler022 = 1.0000000000000006e-11;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_cyl_neumann<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::cyl_neumann(data[i].nu, data[i].x);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  test(data009, toler009);\n+  test(data010, toler010);\n+  test(data011, toler011);\n+  test(data012, toler012);\n+  test(data013, toler013);\n+  test(data014, toler014);\n+  test(data015, toler015);\n+  test(data016, toler016);\n+  test(data017, toler017);\n+  test(data018, toler018);\n+  test(data019, toler019);\n+  test(data020, toler020);\n+  test(data021, toler021);\n+  test(data022, toler022);\n+  return 0;\n+}"}, {"sha": "c9a49509e90e2f59c30f4515f55b9a142c87e07f", "filename": "libstdc++-v3/testsuite/special_functions/10_cyl_neumann/compile.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.10 cyl_neumann\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float nuf = 1.0F / 3.0F, xf = 0.5F;\n+  double nud = 1.0 / 3.0, xd = 0.5;\n+  long double nul = 1.0L / 3.0L, xl = 0.5L;\n+\n+  std::cyl_neumann(nuf, xf);\n+  std::cyl_neumannf(nuf, xf);\n+  std::cyl_neumann(nud, xd);\n+  std::cyl_neumann(nul, xl);\n+  std::cyl_neumannl(nul, xl);\n+\n+  return;\n+}\n+"}, {"sha": "4356ca980f3e7cb025f81d1416c39d4c359dab92", "filename": "libstdc++-v3/testsuite/special_functions/10_cyl_neumann/compile_2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.10 cyl_neumann\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float nuf = 1.0F / 3.0F, xf = 0.5F;\n+  double nud = 1.0 / 3.0, xd = 0.5;\n+  long double nul = 1.0L / 3.0L, xl = 0.5L;\n+\n+  cyl_neumann(nuf, xf);\n+  cyl_neumannf(nuf, xf);\n+  cyl_neumann(nud, xd);\n+  cyl_neumann(nul, xl);\n+  cyl_neumannl(nul, xl);\n+\n+  return;\n+}\n+"}, {"sha": "e5150faf090ee251c2c16c7e2d56a5fff110a152", "filename": "libstdc++-v3/testsuite/special_functions/11_ellint_1/check_nan.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F11_ellint_1%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F11_ellint_1%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F11_ellint_1%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,88 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.11 ellint_1\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float kf = std::numeric_limits<float>::quiet_NaN();\n+  double kd = std::numeric_limits<double>::quiet_NaN();\n+  long double kl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float phif = std::atan2(1.0F, 1.0F);\n+  double phid = std::atan2(1.0, 1.0);\n+  long double phil = std::atan2(1.0L, 1.0L);\n+\n+  float a = std::ellint_1(kf, phif);\n+  float b = std::ellint_1f(kf, phif);\n+  double c = std::ellint_1(kd, phid);\n+  long double d = std::ellint_1(kl, phil);\n+  long double e = std::ellint_1l(kl, phil);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+void\n+test02()\n+{\n+  float kf = 0.5F;\n+  double kd = 0.5;\n+  long double kl = 0.5L;\n+\n+  float phif = std::numeric_limits<float>::quiet_NaN();\n+  double phid = std::numeric_limits<double>::quiet_NaN();\n+  long double phil = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float a = std::ellint_1(kf, phif);\n+  float b = std::ellint_1f(kf, phif);\n+  double c = std::ellint_1(kd, phid);\n+  long double d = std::ellint_1(kl, phil);\n+  long double e = std::ellint_1l(kl, phil);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}\n+"}, {"sha": "10bc509e9368fdf169ee52a509414c2f15a4fc74", "filename": "libstdc++-v3/testsuite/special_functions/11_ellint_1/check_value.cc", "status": "added", "additions": 451, "deletions": 0, "changes": 451, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F11_ellint_1%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F11_ellint_1%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F11_ellint_1%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,451 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  ellint_1\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+\n+// Test data for k=-0.90000000000000002.\n+// max(|f - f_GSL|): 6.6613381477509392e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.3381508715713370e-16\n+const testcase_ellint_1<double>\n+data001[10] =\n+{\n+  { 0.0000000000000000, -0.90000000000000002, 0.0000000000000000 },\n+  { 0.17525427376115024, -0.90000000000000002, 0.17453292519943295 },\n+  { 0.35492464591297446, -0.90000000000000002, 0.34906585039886590 },\n+  { 0.54388221416157112, -0.90000000000000002, 0.52359877559829882 },\n+  { 0.74797400423532490, -0.90000000000000002, 0.69813170079773179 },\n+  { 0.97463898451966458, -0.90000000000000002, 0.87266462599716477 },\n+  { 1.2334463254523440, -0.90000000000000002, 1.0471975511965976 },\n+  { 1.5355247765594913, -0.90000000000000002, 1.2217304763960306 },\n+  { 1.8882928567775121, -0.90000000000000002, 1.3962634015954636 },\n+  { 2.2805491384227703, -0.90000000000000002, 1.5707963267948966 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.80000000000000004.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.1175183168766718e-16\n+const testcase_ellint_1<double>\n+data002[10] =\n+{\n+  { 0.0000000000000000, -0.80000000000000004, 0.0000000000000000 },\n+  { 0.17510154241338899, -0.80000000000000004, 0.17453292519943295 },\n+  { 0.35365068839779390, -0.80000000000000004, 0.34906585039886590 },\n+  { 0.53926804409084550, -0.80000000000000004, 0.52359877559829882 },\n+  { 0.73587926028070361, -0.80000000000000004, 0.69813170079773179 },\n+  { 0.94770942970071170, -0.80000000000000004, 0.87266462599716477 },\n+  { 1.1789022995388236, -0.80000000000000004, 1.0471975511965976 },\n+  { 1.4323027881876009, -0.80000000000000004, 1.2217304763960306 },\n+  { 1.7069629739121674, -0.80000000000000004, 1.3962634015954636 },\n+  { 1.9953027776647296, -0.80000000000000004, 1.5707963267948966 },\n+};\n+const double toler002 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.69999999999999996.\n+// max(|f - f_GSL|): 3.3306690738754696e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.5930208052157665e-16\n+const testcase_ellint_1<double>\n+data003[10] =\n+{\n+  { 0.0000000000000000, -0.69999999999999996, 0.0000000000000000 },\n+  { 0.17496737466916723, -0.69999999999999996, 0.17453292519943295 },\n+  { 0.35254687535677925, -0.69999999999999996, 0.34906585039886590 },\n+  { 0.53536740275997119, -0.69999999999999996, 0.52359877559829882 },\n+  { 0.72603797651684454, -0.69999999999999996, 0.69813170079773179 },\n+  { 0.92698296348313458, -0.69999999999999996, 0.87266462599716477 },\n+  { 1.1400447527693316, -0.69999999999999996, 1.0471975511965976 },\n+  { 1.3657668117194073, -0.69999999999999996, 1.2217304763960306 },\n+  { 1.6024686895959159, -0.69999999999999996, 1.3962634015954636 },\n+  { 1.8456939983747236, -0.69999999999999996, 1.5707963267948966 },\n+};\n+const double toler003 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.59999999999999998.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.3664899092028927e-16\n+const testcase_ellint_1<double>\n+data004[10] =\n+{\n+  { 0.0000000000000000, -0.59999999999999998, 0.0000000000000000 },\n+  { 0.17485154362988359, -0.59999999999999998, 0.17453292519943295 },\n+  { 0.35160509865544326, -0.59999999999999998, 0.34906585039886590 },\n+  { 0.53210652578446138, -0.59999999999999998, 0.52359877559829882 },\n+  { 0.71805304664485659, -0.59999999999999998, 0.69813170079773179 },\n+  { 0.91082759030195970, -0.59999999999999998, 0.87266462599716477 },\n+  { 1.1112333229323361, -0.59999999999999998, 1.0471975511965976 },\n+  { 1.3191461190365270, -0.59999999999999998, 1.2217304763960306 },\n+  { 1.5332022105084773, -0.59999999999999998, 1.3962634015954636 },\n+  { 1.7507538029157526, -0.59999999999999998, 1.5707963267948966 },\n+};\n+const double toler004 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.50000000000000000.\n+// max(|f - f_GSL|): 2.2204460492503131e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.1201497220602069e-16\n+const testcase_ellint_1<double>\n+data005[10] =\n+{\n+  { 0.0000000000000000, -0.50000000000000000, 0.0000000000000000 },\n+  { 0.17475385514035785, -0.50000000000000000, 0.17453292519943295 },\n+  { 0.35081868470101585, -0.50000000000000000, 0.34906585039886590 },\n+  { 0.52942862705190574, -0.50000000000000000, 0.52359877559829882 },\n+  { 0.71164727562630314, -0.50000000000000000, 0.69813170079773179 },\n+  { 0.89824523594227768, -0.50000000000000000, 0.87266462599716477 },\n+  { 1.0895506700518851, -0.50000000000000000, 1.0471975511965976 },\n+  { 1.2853005857432931, -0.50000000000000000, 1.2217304763960306 },\n+  { 1.4845545520549484, -0.50000000000000000, 1.3962634015954636 },\n+  { 1.6857503548125963, -0.50000000000000000, 1.5707963267948966 },\n+};\n+const double toler005 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.40000000000000002.\n+// max(|f - f_GSL|): 6.6613381477509392e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.0617918857203532e-16\n+const testcase_ellint_1<double>\n+data006[10] =\n+{\n+  { 0.0000000000000000, -0.40000000000000002, 0.0000000000000000 },\n+  { 0.17467414669441528, -0.40000000000000002, 0.17453292519943295 },\n+  { 0.35018222772483443, -0.40000000000000002, 0.34906585039886590 },\n+  { 0.52729015917508737, -0.40000000000000002, 0.52359877559829882 },\n+  { 0.70662374407341244, -0.40000000000000002, 0.69813170079773179 },\n+  { 0.88859210497602170, -0.40000000000000002, 0.87266462599716477 },\n+  { 1.0733136290471379, -0.40000000000000002, 1.0471975511965976 },\n+  { 1.2605612170157061, -0.40000000000000002, 1.2217304763960306 },\n+  { 1.4497513956433439, -0.40000000000000002, 1.3962634015954636 },\n+  { 1.6399998658645112, -0.40000000000000002, 1.5707963267948966 },\n+};\n+const double toler006 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.30000000000000004.\n+// max(|f - f_GSL|): 8.8817841970012523e-16\n+// max(|f - f_GSL| / |f_GSL|): 6.3361874537309281e-16\n+const testcase_ellint_1<double>\n+data007[10] =\n+{\n+  { 0.0000000000000000, -0.30000000000000004, 0.0000000000000000 },\n+  { 0.17461228653000099, -0.30000000000000004, 0.17453292519943295 },\n+  { 0.34969146102798415, -0.30000000000000004, 0.34906585039886590 },\n+  { 0.52565822873726320, -0.30000000000000004, 0.52359877559829882 },\n+  { 0.70284226512408532, -0.30000000000000004, 0.69813170079773179 },\n+  { 0.88144139195111182, -0.30000000000000004, 0.87266462599716477 },\n+  { 1.0614897067260520, -0.30000000000000004, 1.0471975511965976 },\n+  { 1.2428416824174218, -0.30000000000000004, 1.2217304763960306 },\n+  { 1.4251795877015927, -0.30000000000000004, 1.3962634015954636 },\n+  { 1.6080486199305128, -0.30000000000000004, 1.5707963267948966 },\n+};\n+const double toler007 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.19999999999999996.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.2156475739151676e-16\n+const testcase_ellint_1<double>\n+data008[10] =\n+{\n+  { 0.0000000000000000, -0.19999999999999996, 0.0000000000000000 },\n+  { 0.17456817290292809, -0.19999999999999996, 0.17453292519943295 },\n+  { 0.34934315932086801, -0.19999999999999996, 0.34906585039886590 },\n+  { 0.52450880529443988, -0.19999999999999996, 0.52359877559829882 },\n+  { 0.70020491009844876, -0.19999999999999996, 0.69813170079773179 },\n+  { 0.87651006649967955, -0.19999999999999996, 0.87266462599716477 },\n+  { 1.0534305870298994, -0.19999999999999996, 1.0471975511965976 },\n+  { 1.2308975521670784, -0.19999999999999996, 1.2217304763960306 },\n+  { 1.4087733584990738, -0.19999999999999996, 1.3962634015954636 },\n+  { 1.5868678474541660, -0.19999999999999996, 1.5707963267948966 },\n+};\n+const double toler008 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.099999999999999978.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.1735566504509650e-16\n+const testcase_ellint_1<double>\n+data009[10] =\n+{\n+  { 0.0000000000000000, -0.099999999999999978, 0.0000000000000000 },\n+  { 0.17454173353063659, -0.099999999999999978, 0.17453292519943295 },\n+  { 0.34913506721468091, -0.099999999999999978, 0.34906585039886590 },\n+  { 0.52382550016538942, -0.099999999999999978, 0.52359877559829882 },\n+  { 0.69864700854177020, -0.099999999999999978, 0.69813170079773179 },\n+  { 0.87361792586964870, -0.099999999999999978, 0.87266462599716477 },\n+  { 1.0487386319621683, -0.099999999999999978, 1.0471975511965976 },\n+  { 1.2239913752078757, -0.099999999999999978, 1.2217304763960306 },\n+  { 1.3993423113684049, -0.099999999999999978, 1.3962634015954636 },\n+  { 1.5747455615173562, -0.099999999999999978, 1.5707963267948966 },\n+};\n+const double toler009 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.0000000000000000.\n+// max(|f - f_GSL|): 2.2204460492503131e-16\n+// max(|f - f_GSL| / |f_GSL|): 2.1203697876423452e-16\n+const testcase_ellint_1<double>\n+data010[10] =\n+{\n+  { 0.0000000000000000, 0.0000000000000000, 0.0000000000000000 },\n+  { 0.17453292519943292, 0.0000000000000000, 0.17453292519943295 },\n+  { 0.34906585039886584, 0.0000000000000000, 0.34906585039886590 },\n+  { 0.52359877559829870, 0.0000000000000000, 0.52359877559829882 },\n+  { 0.69813170079773168, 0.0000000000000000, 0.69813170079773179 },\n+  { 0.87266462599716477, 0.0000000000000000, 0.87266462599716477 },\n+  { 1.0471975511965974, 0.0000000000000000, 1.0471975511965976 },\n+  { 1.2217304763960304, 0.0000000000000000, 1.2217304763960306 },\n+  { 1.3962634015954631, 0.0000000000000000, 1.3962634015954636 },\n+  { 1.5707963267948966, 0.0000000000000000, 1.5707963267948966 },\n+};\n+const double toler010 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.10000000000000009.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.1735566504509650e-16\n+const testcase_ellint_1<double>\n+data011[10] =\n+{\n+  { 0.0000000000000000, 0.10000000000000009, 0.0000000000000000 },\n+  { 0.17454173353063659, 0.10000000000000009, 0.17453292519943295 },\n+  { 0.34913506721468091, 0.10000000000000009, 0.34906585039886590 },\n+  { 0.52382550016538942, 0.10000000000000009, 0.52359877559829882 },\n+  { 0.69864700854177020, 0.10000000000000009, 0.69813170079773179 },\n+  { 0.87361792586964870, 0.10000000000000009, 0.87266462599716477 },\n+  { 1.0487386319621683, 0.10000000000000009, 1.0471975511965976 },\n+  { 1.2239913752078757, 0.10000000000000009, 1.2217304763960306 },\n+  { 1.3993423113684049, 0.10000000000000009, 1.3962634015954636 },\n+  { 1.5747455615173562, 0.10000000000000009, 1.5707963267948966 },\n+};\n+const double toler011 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.19999999999999996.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.2156475739151676e-16\n+const testcase_ellint_1<double>\n+data012[10] =\n+{\n+  { 0.0000000000000000, 0.19999999999999996, 0.0000000000000000 },\n+  { 0.17456817290292809, 0.19999999999999996, 0.17453292519943295 },\n+  { 0.34934315932086801, 0.19999999999999996, 0.34906585039886590 },\n+  { 0.52450880529443988, 0.19999999999999996, 0.52359877559829882 },\n+  { 0.70020491009844876, 0.19999999999999996, 0.69813170079773179 },\n+  { 0.87651006649967955, 0.19999999999999996, 0.87266462599716477 },\n+  { 1.0534305870298994, 0.19999999999999996, 1.0471975511965976 },\n+  { 1.2308975521670784, 0.19999999999999996, 1.2217304763960306 },\n+  { 1.4087733584990738, 0.19999999999999996, 1.3962634015954636 },\n+  { 1.5868678474541660, 0.19999999999999996, 1.5707963267948966 },\n+};\n+const double toler012 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.30000000000000004.\n+// max(|f - f_GSL|): 8.8817841970012523e-16\n+// max(|f - f_GSL| / |f_GSL|): 6.3361874537309281e-16\n+const testcase_ellint_1<double>\n+data013[10] =\n+{\n+  { 0.0000000000000000, 0.30000000000000004, 0.0000000000000000 },\n+  { 0.17461228653000099, 0.30000000000000004, 0.17453292519943295 },\n+  { 0.34969146102798415, 0.30000000000000004, 0.34906585039886590 },\n+  { 0.52565822873726320, 0.30000000000000004, 0.52359877559829882 },\n+  { 0.70284226512408532, 0.30000000000000004, 0.69813170079773179 },\n+  { 0.88144139195111182, 0.30000000000000004, 0.87266462599716477 },\n+  { 1.0614897067260520, 0.30000000000000004, 1.0471975511965976 },\n+  { 1.2428416824174218, 0.30000000000000004, 1.2217304763960306 },\n+  { 1.4251795877015927, 0.30000000000000004, 1.3962634015954636 },\n+  { 1.6080486199305128, 0.30000000000000004, 1.5707963267948966 },\n+};\n+const double toler013 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.39999999999999991.\n+// max(|f - f_GSL|): 8.8817841970012523e-16\n+// max(|f - f_GSL| / |f_GSL|): 5.4157225142938039e-16\n+const testcase_ellint_1<double>\n+data014[10] =\n+{\n+  { 0.0000000000000000, 0.39999999999999991, 0.0000000000000000 },\n+  { 0.17467414669441528, 0.39999999999999991, 0.17453292519943295 },\n+  { 0.35018222772483443, 0.39999999999999991, 0.34906585039886590 },\n+  { 0.52729015917508737, 0.39999999999999991, 0.52359877559829882 },\n+  { 0.70662374407341244, 0.39999999999999991, 0.69813170079773179 },\n+  { 0.88859210497602170, 0.39999999999999991, 0.87266462599716477 },\n+  { 1.0733136290471379, 0.39999999999999991, 1.0471975511965976 },\n+  { 1.2605612170157061, 0.39999999999999991, 1.2217304763960306 },\n+  { 1.4497513956433439, 0.39999999999999991, 1.3962634015954636 },\n+  { 1.6399998658645112, 0.39999999999999991, 1.5707963267948966 },\n+};\n+const double toler014 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.50000000000000000.\n+// max(|f - f_GSL|): 2.2204460492503131e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.1201497220602069e-16\n+const testcase_ellint_1<double>\n+data015[10] =\n+{\n+  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },\n+  { 0.17475385514035785, 0.50000000000000000, 0.17453292519943295 },\n+  { 0.35081868470101585, 0.50000000000000000, 0.34906585039886590 },\n+  { 0.52942862705190574, 0.50000000000000000, 0.52359877559829882 },\n+  { 0.71164727562630314, 0.50000000000000000, 0.69813170079773179 },\n+  { 0.89824523594227768, 0.50000000000000000, 0.87266462599716477 },\n+  { 1.0895506700518851, 0.50000000000000000, 1.0471975511965976 },\n+  { 1.2853005857432931, 0.50000000000000000, 1.2217304763960306 },\n+  { 1.4845545520549484, 0.50000000000000000, 1.3962634015954636 },\n+  { 1.6857503548125963, 0.50000000000000000, 1.5707963267948966 },\n+};\n+const double toler015 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.60000000000000009.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.3664899092028927e-16\n+const testcase_ellint_1<double>\n+data016[10] =\n+{\n+  { 0.0000000000000000, 0.60000000000000009, 0.0000000000000000 },\n+  { 0.17485154362988359, 0.60000000000000009, 0.17453292519943295 },\n+  { 0.35160509865544326, 0.60000000000000009, 0.34906585039886590 },\n+  { 0.53210652578446138, 0.60000000000000009, 0.52359877559829882 },\n+  { 0.71805304664485659, 0.60000000000000009, 0.69813170079773179 },\n+  { 0.91082759030195970, 0.60000000000000009, 0.87266462599716477 },\n+  { 1.1112333229323361, 0.60000000000000009, 1.0471975511965976 },\n+  { 1.3191461190365270, 0.60000000000000009, 1.2217304763960306 },\n+  { 1.5332022105084775, 0.60000000000000009, 1.3962634015954636 },\n+  { 1.7507538029157526, 0.60000000000000009, 1.5707963267948966 },\n+};\n+const double toler016 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.69999999999999996.\n+// max(|f - f_GSL|): 3.3306690738754696e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.5930208052157665e-16\n+const testcase_ellint_1<double>\n+data017[10] =\n+{\n+  { 0.0000000000000000, 0.69999999999999996, 0.0000000000000000 },\n+  { 0.17496737466916723, 0.69999999999999996, 0.17453292519943295 },\n+  { 0.35254687535677925, 0.69999999999999996, 0.34906585039886590 },\n+  { 0.53536740275997119, 0.69999999999999996, 0.52359877559829882 },\n+  { 0.72603797651684454, 0.69999999999999996, 0.69813170079773179 },\n+  { 0.92698296348313458, 0.69999999999999996, 0.87266462599716477 },\n+  { 1.1400447527693316, 0.69999999999999996, 1.0471975511965976 },\n+  { 1.3657668117194073, 0.69999999999999996, 1.2217304763960306 },\n+  { 1.6024686895959159, 0.69999999999999996, 1.3962634015954636 },\n+  { 1.8456939983747236, 0.69999999999999996, 1.5707963267948966 },\n+};\n+const double toler017 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.80000000000000004.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.1175183168766718e-16\n+const testcase_ellint_1<double>\n+data018[10] =\n+{\n+  { 0.0000000000000000, 0.80000000000000004, 0.0000000000000000 },\n+  { 0.17510154241338899, 0.80000000000000004, 0.17453292519943295 },\n+  { 0.35365068839779390, 0.80000000000000004, 0.34906585039886590 },\n+  { 0.53926804409084550, 0.80000000000000004, 0.52359877559829882 },\n+  { 0.73587926028070361, 0.80000000000000004, 0.69813170079773179 },\n+  { 0.94770942970071170, 0.80000000000000004, 0.87266462599716477 },\n+  { 1.1789022995388236, 0.80000000000000004, 1.0471975511965976 },\n+  { 1.4323027881876009, 0.80000000000000004, 1.2217304763960306 },\n+  { 1.7069629739121674, 0.80000000000000004, 1.3962634015954636 },\n+  { 1.9953027776647296, 0.80000000000000004, 1.5707963267948966 },\n+};\n+const double toler018 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.89999999999999991.\n+// max(|f - f_GSL|): 8.8817841970012523e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.8945813740035884e-16\n+const testcase_ellint_1<double>\n+data019[10] =\n+{\n+  { 0.0000000000000000, 0.89999999999999991, 0.0000000000000000 },\n+  { 0.17525427376115024, 0.89999999999999991, 0.17453292519943295 },\n+  { 0.35492464591297446, 0.89999999999999991, 0.34906585039886590 },\n+  { 0.54388221416157112, 0.89999999999999991, 0.52359877559829882 },\n+  { 0.74797400423532490, 0.89999999999999991, 0.69813170079773179 },\n+  { 0.97463898451966458, 0.89999999999999991, 0.87266462599716477 },\n+  { 1.2334463254523440, 0.89999999999999991, 1.0471975511965976 },\n+  { 1.5355247765594910, 0.89999999999999991, 1.2217304763960306 },\n+  { 1.8882928567775117, 0.89999999999999991, 1.3962634015954636 },\n+  { 2.2805491384227703, 0.89999999999999991, 1.5707963267948966 },\n+};\n+const double toler019 = 2.5000000000000020e-13;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_ellint_1<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::ellint_1(data[i].k, data[i].phi);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  test(data009, toler009);\n+  test(data010, toler010);\n+  test(data011, toler011);\n+  test(data012, toler012);\n+  test(data013, toler013);\n+  test(data014, toler014);\n+  test(data015, toler015);\n+  test(data016, toler016);\n+  test(data017, toler017);\n+  test(data018, toler018);\n+  test(data019, toler019);\n+  return 0;\n+}"}, {"sha": "f4502691f9e8212e4c4afce454f2d45e6b9ef34f", "filename": "libstdc++-v3/testsuite/special_functions/11_ellint_1/compile.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F11_ellint_1%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F11_ellint_1%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F11_ellint_1%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.11 ellint_1\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float kf = 0.5F, phif = std::atan2(1.0F, 1.0F);\n+  double kd = 0.5, phid = std::atan2(1.0, 1.0);\n+  long double kl = 0.5L, phil = std::atan2(1.0L, 1.0L);\n+\n+  std::ellint_1(kf, phif);\n+  std::ellint_1f(kf, phif);\n+  std::ellint_1(kd, phid);\n+  std::ellint_1(kl, phil);\n+  std::ellint_1l(kl, phil);\n+\n+  return;\n+}\n+"}, {"sha": "2421c9a869283d27c12b6ab8b04af0328a56e5bf", "filename": "libstdc++-v3/testsuite/special_functions/11_ellint_1/compile_2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F11_ellint_1%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F11_ellint_1%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F11_ellint_1%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.11 ellint_1\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float kf = 0.5F, phif = atan2(1.0F, 1.0F);\n+  double kd = 0.5, phid = atan2(1.0, 1.0);\n+  long double kl = 0.5L, phil = atan2(1.0L, 1.0L);\n+\n+  ellint_1(kf, phif);\n+  ellint_1f(kf, phif);\n+  ellint_1(kd, phid);\n+  ellint_1(kl, phil);\n+  ellint_1l(kl, phil);\n+\n+  return;\n+}\n+"}, {"sha": "4878577d5efca09e482f120ed023c3d1939ad6f1", "filename": "libstdc++-v3/testsuite/special_functions/12_ellint_2/check_nan.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F12_ellint_2%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F12_ellint_2%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F12_ellint_2%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,88 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.12 ellint_2\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float kf = std::numeric_limits<float>::quiet_NaN();\n+  double kd = std::numeric_limits<double>::quiet_NaN();\n+  long double kl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float phif = std::atan2(1.0F, 1.0F);\n+  double phid = std::atan2(1.0, 1.0);\n+  long double phil = std::atan2(1.0L, 1.0L);\n+\n+  float a = std::ellint_2(kf, phif);\n+  float b = std::ellint_2f(kf, phif);\n+  double c = std::ellint_2(kd, phid);\n+  long double d = std::ellint_2(kl, phil);\n+  long double e = std::ellint_2l(kl, phil);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+void\n+test02()\n+{\n+  float kf = 0.5F;\n+  double kd = 0.5;\n+  long double kl = 0.5L;\n+\n+  float phif = std::numeric_limits<float>::quiet_NaN();\n+  double phid = std::numeric_limits<double>::quiet_NaN();\n+  long double phil = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float a = std::ellint_2(kf, phif);\n+  float b = std::ellint_2f(kf, phif);\n+  double c = std::ellint_2(kd, phid);\n+  long double d = std::ellint_2(kl, phil);\n+  long double e = std::ellint_2l(kl, phil);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}\n+"}, {"sha": "39f3cc63522a674ab882e88978c1963ecba35076", "filename": "libstdc++-v3/testsuite/special_functions/12_ellint_2/check_value.cc", "status": "added", "additions": 451, "deletions": 0, "changes": 451, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F12_ellint_2%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F12_ellint_2%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F12_ellint_2%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,451 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  ellint_2\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+\n+// Test data for k=-0.90000000000000002.\n+// max(|f - f_GSL|): 6.6613381477509392e-16\n+// max(|f - f_GSL| / |f_GSL|): 6.6116483711056737e-16\n+const testcase_ellint_2<double>\n+data001[10] =\n+{\n+  { 0.0000000000000000, -0.90000000000000002, 0.0000000000000000 },\n+  { 0.17381690606167960, -0.90000000000000002, 0.17453292519943295 },\n+  { 0.34337919186972055, -0.90000000000000002, 0.34906585039886590 },\n+  { 0.50464268659856326, -0.90000000000000002, 0.52359877559829882 },\n+  { 0.65400003842368570, -0.90000000000000002, 0.69813170079773179 },\n+  { 0.78854928419904646, -0.90000000000000002, 0.87266462599716477 },\n+  { 0.90645698626315396, -0.90000000000000002, 1.0471975511965976 },\n+  { 1.0075154899135925, -0.90000000000000002, 1.2217304763960306 },\n+  { 1.0940135583194068, -0.90000000000000002, 1.3962634015954636 },\n+  { 1.1716970527816140, -0.90000000000000002, 1.5707963267948966 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.80000000000000004.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.4793687438660849e-16\n+const testcase_ellint_2<double>\n+data002[10] =\n+{\n+  { 0.0000000000000000, -0.80000000000000004, 0.0000000000000000 },\n+  { 0.17396762274534805, -0.80000000000000004, 0.17453292519943295 },\n+  { 0.34458685226969316, -0.80000000000000004, 0.34906585039886590 },\n+  { 0.50872923654502433, -0.80000000000000004, 0.52359877559829882 },\n+  { 0.66372016539176215, -0.80000000000000004, 0.69813170079773179 },\n+  { 0.80760344410167406, -0.80000000000000004, 0.87266462599716477 },\n+  { 0.93945480372495049, -0.80000000000000004, 1.0471975511965976 },\n+  { 1.0597473310395036, -0.80000000000000004, 1.2217304763960306 },\n+  { 1.1706981862452361, -0.80000000000000004, 1.3962634015954636 },\n+  { 1.2763499431699064, -0.80000000000000004, 1.5707963267948966 },\n+};\n+const double toler002 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.69999999999999996.\n+// max(|f - f_GSL|): 3.3306690738754696e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.0435005012914979e-16\n+const testcase_ellint_2<double>\n+data003[10] =\n+{\n+  { 0.0000000000000000, -0.69999999999999996, 0.0000000000000000 },\n+  { 0.17410041242702542, -0.69999999999999996, 0.17453292519943295 },\n+  { 0.34564605085764760, -0.69999999999999996, 0.34906585039886590 },\n+  { 0.51228495693314646, -0.69999999999999996, 0.52359877559829882 },\n+  { 0.67207654098799530, -0.69999999999999996, 0.69813170079773179 },\n+  { 0.82370932631556515, -0.69999999999999996, 0.87266462599716477 },\n+  { 0.96672313309452795, -0.69999999999999996, 1.0471975511965976 },\n+  { 1.1017090644949503, -0.69999999999999996, 1.2217304763960306 },\n+  { 1.2304180097292914, -0.69999999999999996, 1.3962634015954636 },\n+  { 1.3556611355719554, -0.69999999999999996, 1.5707963267948966 },\n+};\n+const double toler003 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.59999999999999998.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.9101039108874066e-16\n+const testcase_ellint_2<double>\n+data004[10] =\n+{\n+  { 0.0000000000000000, -0.59999999999999998, 0.0000000000000000 },\n+  { 0.17421534919599127, -0.59999999999999998, 0.17453292519943295 },\n+  { 0.34655927787174101, -0.59999999999999998, 0.34906585039886590 },\n+  { 0.51533034538432143, -0.59999999999999998, 0.52359877559829882 },\n+  { 0.67916550597453018, -0.59999999999999998, 0.69813170079773179 },\n+  { 0.83720218180349870, -0.59999999999999998, 0.87266462599716477 },\n+  { 0.98922159354937755, -0.59999999999999998, 1.0471975511965976 },\n+  { 1.1357478470419360, -0.59999999999999998, 1.2217304763960306 },\n+  { 1.2780617372844056, -0.59999999999999998, 1.3962634015954636 },\n+  { 1.4180833944487241, -0.59999999999999998, 1.5707963267948966 },\n+};\n+const double toler004 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.50000000000000000.\n+// max(|f - f_GSL|): 2.2204460492503131e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.2412420886495652e-16\n+const testcase_ellint_2<double>\n+data005[10] =\n+{\n+  { 0.0000000000000000, -0.50000000000000000, 0.0000000000000000 },\n+  { 0.17431249677315910, -0.50000000000000000, 0.17453292519943295 },\n+  { 0.34732862537770803, -0.50000000000000000, 0.34906585039886590 },\n+  { 0.51788193485993794, -0.50000000000000000, 0.52359877559829882 },\n+  { 0.68506022954164536, -0.50000000000000000, 0.69813170079773179 },\n+  { 0.84831662803347196, -0.50000000000000000, 0.87266462599716477 },\n+  { 1.0075555551444717, -0.50000000000000000, 1.0471975511965976 },\n+  { 1.1631768599287300, -0.50000000000000000, 1.2217304763960306 },\n+  { 1.3160584048772543, -0.50000000000000000, 1.3962634015954636 },\n+  { 1.4674622093394274, -0.50000000000000000, 1.5707963267948966 },\n+};\n+const double toler005 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.40000000000000002.\n+// max(|f - f_GSL|): 6.6613381477509392e-16\n+// max(|f - f_GSL| / |f_GSL|): 5.6222658248988364e-16\n+const testcase_ellint_2<double>\n+data006[10] =\n+{\n+  { 0.0000000000000000, -0.40000000000000002, 0.0000000000000000 },\n+  { 0.17439190872481267, -0.40000000000000002, 0.17453292519943295 },\n+  { 0.34795581767099210, -0.40000000000000002, 0.34906585039886590 },\n+  { 0.51995290683804463, -0.40000000000000002, 0.52359877559829882 },\n+  { 0.68981638464431538, -0.40000000000000002, 0.69813170079773179 },\n+  { 0.85722088859936041, -0.40000000000000002, 0.87266462599716477 },\n+  { 1.0221301327876993, -0.40000000000000002, 1.0471975511965976 },\n+  { 1.1848138019818371, -0.40000000000000002, 1.2217304763960306 },\n+  { 1.3458259266501533, -0.40000000000000002, 1.3962634015954636 },\n+  { 1.5059416123600402, -0.40000000000000002, 1.5707963267948966 },\n+};\n+const double toler006 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.30000000000000004.\n+// max(|f - f_GSL|): 8.8817841970012523e-16\n+// max(|f - f_GSL| / |f_GSL|): 6.3860540218057383e-16\n+const testcase_ellint_2<double>\n+data007[10] =\n+{\n+  { 0.0000000000000000, -0.30000000000000004, 0.0000000000000000 },\n+  { 0.17445362864048913, -0.30000000000000004, 0.17453292519943295 },\n+  { 0.34844223535713464, -0.30000000000000004, 0.34906585039886590 },\n+  { 0.52155353877411770, -0.30000000000000004, 0.52359877559829882 },\n+  { 0.69347584418369879, -0.30000000000000004, 0.69813170079773179 },\n+  { 0.86403609928237668, -0.30000000000000004, 0.87266462599716477 },\n+  { 1.0332234514065408, -0.30000000000000004, 1.0471975511965976 },\n+  { 1.2011943182068923, -0.30000000000000004, 1.2217304763960306 },\n+  { 1.3682566113689623, -0.30000000000000004, 1.3962634015954636 },\n+  { 1.5348334649232491, -0.30000000000000004, 1.5707963267948966 },\n+};\n+const double toler007 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.19999999999999996.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.2658819988515356e-16\n+const testcase_ellint_2<double>\n+data008[10] =\n+{\n+  { 0.0000000000000000, -0.19999999999999996, 0.0000000000000000 },\n+  { 0.17449769027652812, -0.19999999999999996, 0.17453292519943295 },\n+  { 0.34878893400762095, -0.19999999999999996, 0.34906585039886590 },\n+  { 0.52269152856057410, -0.19999999999999996, 0.52359877559829882 },\n+  { 0.69606913360157563, -0.19999999999999996, 0.69813170079773179 },\n+  { 0.86884782374863356, -0.19999999999999996, 0.87266462599716477 },\n+  { 1.0410255369689567, -0.19999999999999996, 1.0471975511965976 },\n+  { 1.2126730391631360, -0.19999999999999996, 1.2217304763960306 },\n+  { 1.3839259540325153, -0.19999999999999996, 1.3962634015954636 },\n+  { 1.5549685462425291, -0.19999999999999996, 1.5707963267948966 },\n+};\n+const double toler008 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.099999999999999978.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.1875595485348029e-16\n+const testcase_ellint_2<double>\n+data009[10] =\n+{\n+  { 0.0000000000000000, -0.099999999999999978, 0.0000000000000000 },\n+  { 0.17452411766649939, -0.099999999999999978, 0.17453292519943295 },\n+  { 0.34899665805442404, -0.099999999999999978, 0.34906585039886590 },\n+  { 0.52337222400508776, -0.099999999999999978, 0.52359877559829882 },\n+  { 0.69761705217284864, -0.099999999999999978, 0.69813170079773179 },\n+  { 0.87171309273007491, -0.099999999999999978, 0.87266462599716477 },\n+  { 1.0456602197056326, -0.099999999999999978, 1.0471975511965976 },\n+  { 1.2194762899272025, -0.099999999999999978, 1.2217304763960306 },\n+  { 1.3931950229892744, -0.099999999999999978, 1.3962634015954636 },\n+  { 1.5668619420216685, -0.099999999999999978, 1.5707963267948966 },\n+};\n+const double toler009 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.0000000000000000.\n+// max(|f - f_GSL|): 2.2204460492503131e-16\n+// max(|f - f_GSL| / |f_GSL|): 2.1203697876423452e-16\n+const testcase_ellint_2<double>\n+data010[10] =\n+{\n+  { 0.0000000000000000, 0.0000000000000000, 0.0000000000000000 },\n+  { 0.17453292519943292, 0.0000000000000000, 0.17453292519943295 },\n+  { 0.34906585039886584, 0.0000000000000000, 0.34906585039886590 },\n+  { 0.52359877559829870, 0.0000000000000000, 0.52359877559829882 },\n+  { 0.69813170079773168, 0.0000000000000000, 0.69813170079773179 },\n+  { 0.87266462599716477, 0.0000000000000000, 0.87266462599716477 },\n+  { 1.0471975511965974, 0.0000000000000000, 1.0471975511965976 },\n+  { 1.2217304763960304, 0.0000000000000000, 1.2217304763960306 },\n+  { 1.3962634015954631, 0.0000000000000000, 1.3962634015954636 },\n+  { 1.5707963267948966, 0.0000000000000000, 1.5707963267948966 },\n+};\n+const double toler010 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.10000000000000009.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.1875595485348029e-16\n+const testcase_ellint_2<double>\n+data011[10] =\n+{\n+  { 0.0000000000000000, 0.10000000000000009, 0.0000000000000000 },\n+  { 0.17452411766649939, 0.10000000000000009, 0.17453292519943295 },\n+  { 0.34899665805442404, 0.10000000000000009, 0.34906585039886590 },\n+  { 0.52337222400508776, 0.10000000000000009, 0.52359877559829882 },\n+  { 0.69761705217284864, 0.10000000000000009, 0.69813170079773179 },\n+  { 0.87171309273007491, 0.10000000000000009, 0.87266462599716477 },\n+  { 1.0456602197056326, 0.10000000000000009, 1.0471975511965976 },\n+  { 1.2194762899272025, 0.10000000000000009, 1.2217304763960306 },\n+  { 1.3931950229892744, 0.10000000000000009, 1.3962634015954636 },\n+  { 1.5668619420216685, 0.10000000000000009, 1.5707963267948966 },\n+};\n+const double toler011 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.19999999999999996.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.2658819988515356e-16\n+const testcase_ellint_2<double>\n+data012[10] =\n+{\n+  { 0.0000000000000000, 0.19999999999999996, 0.0000000000000000 },\n+  { 0.17449769027652812, 0.19999999999999996, 0.17453292519943295 },\n+  { 0.34878893400762095, 0.19999999999999996, 0.34906585039886590 },\n+  { 0.52269152856057410, 0.19999999999999996, 0.52359877559829882 },\n+  { 0.69606913360157563, 0.19999999999999996, 0.69813170079773179 },\n+  { 0.86884782374863356, 0.19999999999999996, 0.87266462599716477 },\n+  { 1.0410255369689567, 0.19999999999999996, 1.0471975511965976 },\n+  { 1.2126730391631360, 0.19999999999999996, 1.2217304763960306 },\n+  { 1.3839259540325153, 0.19999999999999996, 1.3962634015954636 },\n+  { 1.5549685462425291, 0.19999999999999996, 1.5707963267948966 },\n+};\n+const double toler012 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.30000000000000004.\n+// max(|f - f_GSL|): 8.8817841970012523e-16\n+// max(|f - f_GSL| / |f_GSL|): 6.3860540218057383e-16\n+const testcase_ellint_2<double>\n+data013[10] =\n+{\n+  { 0.0000000000000000, 0.30000000000000004, 0.0000000000000000 },\n+  { 0.17445362864048913, 0.30000000000000004, 0.17453292519943295 },\n+  { 0.34844223535713464, 0.30000000000000004, 0.34906585039886590 },\n+  { 0.52155353877411770, 0.30000000000000004, 0.52359877559829882 },\n+  { 0.69347584418369879, 0.30000000000000004, 0.69813170079773179 },\n+  { 0.86403609928237668, 0.30000000000000004, 0.87266462599716477 },\n+  { 1.0332234514065408, 0.30000000000000004, 1.0471975511965976 },\n+  { 1.2011943182068923, 0.30000000000000004, 1.2217304763960306 },\n+  { 1.3682566113689623, 0.30000000000000004, 1.3962634015954636 },\n+  { 1.5348334649232491, 0.30000000000000004, 1.5707963267948966 },\n+};\n+const double toler013 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.39999999999999991.\n+// max(|f - f_GSL|): 8.8817841970012523e-16\n+// max(|f - f_GSL| / |f_GSL|): 5.8978277272530773e-16\n+const testcase_ellint_2<double>\n+data014[10] =\n+{\n+  { 0.0000000000000000, 0.39999999999999991, 0.0000000000000000 },\n+  { 0.17439190872481267, 0.39999999999999991, 0.17453292519943295 },\n+  { 0.34795581767099210, 0.39999999999999991, 0.34906585039886590 },\n+  { 0.51995290683804463, 0.39999999999999991, 0.52359877559829882 },\n+  { 0.68981638464431538, 0.39999999999999991, 0.69813170079773179 },\n+  { 0.85722088859936041, 0.39999999999999991, 0.87266462599716477 },\n+  { 1.0221301327876993, 0.39999999999999991, 1.0471975511965976 },\n+  { 1.1848138019818373, 0.39999999999999991, 1.2217304763960306 },\n+  { 1.3458259266501533, 0.39999999999999991, 1.3962634015954636 },\n+  { 1.5059416123600404, 0.39999999999999991, 1.5707963267948966 },\n+};\n+const double toler014 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.50000000000000000.\n+// max(|f - f_GSL|): 2.2204460492503131e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.2412420886495652e-16\n+const testcase_ellint_2<double>\n+data015[10] =\n+{\n+  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },\n+  { 0.17431249677315910, 0.50000000000000000, 0.17453292519943295 },\n+  { 0.34732862537770803, 0.50000000000000000, 0.34906585039886590 },\n+  { 0.51788193485993794, 0.50000000000000000, 0.52359877559829882 },\n+  { 0.68506022954164536, 0.50000000000000000, 0.69813170079773179 },\n+  { 0.84831662803347196, 0.50000000000000000, 0.87266462599716477 },\n+  { 1.0075555551444717, 0.50000000000000000, 1.0471975511965976 },\n+  { 1.1631768599287300, 0.50000000000000000, 1.2217304763960306 },\n+  { 1.3160584048772543, 0.50000000000000000, 1.3962634015954636 },\n+  { 1.4674622093394274, 0.50000000000000000, 1.5707963267948966 },\n+};\n+const double toler015 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.60000000000000009.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.9101039108874066e-16\n+const testcase_ellint_2<double>\n+data016[10] =\n+{\n+  { 0.0000000000000000, 0.60000000000000009, 0.0000000000000000 },\n+  { 0.17421534919599127, 0.60000000000000009, 0.17453292519943295 },\n+  { 0.34655927787174101, 0.60000000000000009, 0.34906585039886590 },\n+  { 0.51533034538432143, 0.60000000000000009, 0.52359877559829882 },\n+  { 0.67916550597453018, 0.60000000000000009, 0.69813170079773179 },\n+  { 0.83720218180349870, 0.60000000000000009, 0.87266462599716477 },\n+  { 0.98922159354937744, 0.60000000000000009, 1.0471975511965976 },\n+  { 1.1357478470419360, 0.60000000000000009, 1.2217304763960306 },\n+  { 1.2780617372844056, 0.60000000000000009, 1.3962634015954636 },\n+  { 1.4180833944487241, 0.60000000000000009, 1.5707963267948966 },\n+};\n+const double toler016 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.69999999999999996.\n+// max(|f - f_GSL|): 3.3306690738754696e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.0435005012914979e-16\n+const testcase_ellint_2<double>\n+data017[10] =\n+{\n+  { 0.0000000000000000, 0.69999999999999996, 0.0000000000000000 },\n+  { 0.17410041242702542, 0.69999999999999996, 0.17453292519943295 },\n+  { 0.34564605085764760, 0.69999999999999996, 0.34906585039886590 },\n+  { 0.51228495693314646, 0.69999999999999996, 0.52359877559829882 },\n+  { 0.67207654098799530, 0.69999999999999996, 0.69813170079773179 },\n+  { 0.82370932631556515, 0.69999999999999996, 0.87266462599716477 },\n+  { 0.96672313309452795, 0.69999999999999996, 1.0471975511965976 },\n+  { 1.1017090644949503, 0.69999999999999996, 1.2217304763960306 },\n+  { 1.2304180097292914, 0.69999999999999996, 1.3962634015954636 },\n+  { 1.3556611355719554, 0.69999999999999996, 1.5707963267948966 },\n+};\n+const double toler017 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.80000000000000004.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.4793687438660849e-16\n+const testcase_ellint_2<double>\n+data018[10] =\n+{\n+  { 0.0000000000000000, 0.80000000000000004, 0.0000000000000000 },\n+  { 0.17396762274534805, 0.80000000000000004, 0.17453292519943295 },\n+  { 0.34458685226969316, 0.80000000000000004, 0.34906585039886590 },\n+  { 0.50872923654502433, 0.80000000000000004, 0.52359877559829882 },\n+  { 0.66372016539176215, 0.80000000000000004, 0.69813170079773179 },\n+  { 0.80760344410167406, 0.80000000000000004, 0.87266462599716477 },\n+  { 0.93945480372495049, 0.80000000000000004, 1.0471975511965976 },\n+  { 1.0597473310395036, 0.80000000000000004, 1.2217304763960306 },\n+  { 1.1706981862452361, 0.80000000000000004, 1.3962634015954636 },\n+  { 1.2763499431699064, 0.80000000000000004, 1.5707963267948966 },\n+};\n+const double toler018 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.89999999999999991.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.7901367831880493e-16\n+const testcase_ellint_2<double>\n+data019[10] =\n+{\n+  { 0.0000000000000000, 0.89999999999999991, 0.0000000000000000 },\n+  { 0.17381690606167960, 0.89999999999999991, 0.17453292519943295 },\n+  { 0.34337919186972055, 0.89999999999999991, 0.34906585039886590 },\n+  { 0.50464268659856326, 0.89999999999999991, 0.52359877559829882 },\n+  { 0.65400003842368570, 0.89999999999999991, 0.69813170079773179 },\n+  { 0.78854928419904657, 0.89999999999999991, 0.87266462599716477 },\n+  { 0.90645698626315407, 0.89999999999999991, 1.0471975511965976 },\n+  { 1.0075154899135930, 0.89999999999999991, 1.2217304763960306 },\n+  { 1.0940135583194071, 0.89999999999999991, 1.3962634015954636 },\n+  { 1.1716970527816144, 0.89999999999999991, 1.5707963267948966 },\n+};\n+const double toler019 = 2.5000000000000020e-13;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_ellint_2<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::ellint_2(data[i].k, data[i].phi);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  test(data009, toler009);\n+  test(data010, toler010);\n+  test(data011, toler011);\n+  test(data012, toler012);\n+  test(data013, toler013);\n+  test(data014, toler014);\n+  test(data015, toler015);\n+  test(data016, toler016);\n+  test(data017, toler017);\n+  test(data018, toler018);\n+  test(data019, toler019);\n+  return 0;\n+}"}, {"sha": "bd3350cd549a7a0c338834c143a1af9240067073", "filename": "libstdc++-v3/testsuite/special_functions/12_ellint_2/compile.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F12_ellint_2%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F12_ellint_2%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F12_ellint_2%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.12 ellint_2\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float kf = 0.5F, phif = std::atan2(1.0F, 1.0F);\n+  double kd = 0.5, phid = std::atan2(1.0, 1.0);\n+  long double kl = 0.5L, phil = std::atan2(1.0L, 1.0L);\n+\n+  std::ellint_2(kf, phif);\n+  std::ellint_2f(kf, phif);\n+  std::ellint_2(kd, phid);\n+  std::ellint_2(kl, phil);\n+  std::ellint_2l(kl, phil);\n+\n+  return;\n+}\n+"}, {"sha": "d3385ad4a85c3cad04a8c7fbf751a87ecebd8837", "filename": "libstdc++-v3/testsuite/special_functions/12_ellint_2/compile_2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F12_ellint_2%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F12_ellint_2%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F12_ellint_2%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.12 ellint_2\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float kf = 0.5F, phif = atan2(1.0F, 1.0F);\n+  double kd = 0.5, phid = atan2(1.0, 1.0);\n+  long double kl = 0.5L, phil = atan2(1.0L, 1.0L);\n+\n+  ellint_2(kf, phif);\n+  ellint_2f(kf, phif);\n+  ellint_2(kd, phid);\n+  ellint_2(kl, phil);\n+  ellint_2l(kl, phil);\n+\n+  return;\n+}\n+"}, {"sha": "a524c37d443957184ee9179ad2aea9cdb9057838", "filename": "libstdc++-v3/testsuite/special_functions/13_ellint_3/check_nan.cc", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,128 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.13 ellint_3\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float kf = std::numeric_limits<float>::quiet_NaN();\n+  double kd = std::numeric_limits<double>::quiet_NaN();\n+  long double kl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float nuf = 0.2F;\n+  double nud = 0.2;\n+  long double nul = 0.2L;\n+\n+  float phif = std::atan2(1.0F, 1.0F);\n+  double phid = std::atan2(1.0, 1.0);\n+  long double phil = std::atan2(1.0L, 1.0L);\n+\n+  float a = std::ellint_3(kf, nuf, phif);\n+  float b = std::ellint_3f(kf, nuf, phif);\n+  double c = std::ellint_3(kd, nud, phid);\n+  long double d = std::ellint_3(kl, nul, phil);\n+  long double e = std::ellint_3l(kl, nul, phil);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+void\n+test02()\n+{\n+  float kf = 0.5F;\n+  double kd = 0.5;\n+  long double kl = 0.5L;\n+\n+  float nuf = std::numeric_limits<float>::quiet_NaN();\n+  double nud = std::numeric_limits<double>::quiet_NaN();\n+  long double nul = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float phif = std::atan2(1.0F, 1.0F);\n+  double phid = std::atan2(1.0, 1.0);\n+  long double phil = std::atan2(1.0L, 1.0L);\n+\n+  float a = std::ellint_3(kf, nuf, phif);\n+  float b = std::ellint_3f(kf, nuf, phif);\n+  double c = std::ellint_3(kd, nud, phid);\n+  long double d = std::ellint_3(kl, nul, phil);\n+  long double e = std::ellint_3l(kl, nul, phil);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+void\n+test03()\n+{\n+  float kf = 0.5F;\n+  double kd = 0.5;\n+  long double kl = 0.5L;\n+\n+  float nuf = 0.2F;\n+  double nud = 0.2;\n+  long double nul = 0.2L;\n+\n+  float phif = std::numeric_limits<float>::quiet_NaN();\n+  double phid = std::numeric_limits<double>::quiet_NaN();\n+  long double phil = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float a = std::ellint_3(kf, nuf, phif);\n+  float b = std::ellint_3f(kf, nuf, phif);\n+  double c = std::ellint_3(kd, nud, phid);\n+  long double d = std::ellint_3(kl, nul, phil);\n+  long double e = std::ellint_3l(kl, nul, phil);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}\n+"}, {"sha": "4332b5fe30e19f5005a83895099a2af96f79af8c", "filename": "libstdc++-v3/testsuite/special_functions/13_ellint_3/check_value.cc", "status": "added", "additions": 5772, "deletions": 0, "changes": 5772, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d"}, {"sha": "02fa02d00f0ba0244d4f6156791b076c9ec9d445", "filename": "libstdc++-v3/testsuite/special_functions/13_ellint_3/compile.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.13 ellint_3\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float kf = 0.5F, nuf = 0.2F, phif = std::atan2(1.0F, 1.0F);\n+  double kd = 0.5, nud = 0.2, phid = std::atan2(1.0, 1.0);\n+  long double kl = 0.5L, nul = 0.2L, phil = std::atan2(1.0L, 1.0L);\n+\n+  std::ellint_3(kf, nuf, phif);\n+  std::ellint_3f(kf, nuf, phif);\n+  std::ellint_3(kd, nud, phid);\n+  std::ellint_3(kl, nul, phil);\n+  std::ellint_3l(kl, nul, phil);\n+\n+  return;\n+}\n+"}, {"sha": "61d1ea6e58b40f96f319d296204cc46081b7ff93", "filename": "libstdc++-v3/testsuite/special_functions/13_ellint_3/compile_2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.13 ellint_3\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float kf = 0.5F, nuf = 0.2F, phif = atan2(1.0F, 1.0F);\n+  double kd = 0.5, nud = 0.2, phid = atan2(1.0, 1.0);\n+  long double kl = 0.5L, nul = 0.2L, phil = atan2(1.0L, 1.0L);\n+\n+  ellint_3(kf, nuf, phif);\n+  ellint_3f(kf, nuf, phif);\n+  ellint_3(kd, nud, phid);\n+  ellint_3(kl, nul, phil);\n+  ellint_3l(kl, nul, phil);\n+\n+  return;\n+}\n+"}, {"sha": "dfb96de510795c7e09046abd9841c5b58d4c8f3e", "filename": "libstdc++-v3/testsuite/special_functions/14_expint/check_nan.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,56 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.14 expint\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float a = std::expint(xf);\n+  float b = std::expintf(xf);\n+  double c = std::expint(xd);\n+  long double d = std::expint(xl);\n+  long double e = std::expintl(xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "dcd943b031673c55b5d2bcbd9e308ba24989bdaf", "filename": "libstdc++-v3/testsuite/special_functions/14_expint/check_value.cc", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,193 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  expint\n+\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+// Test data.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 2.0242558374827411e-15\n+const testcase_expint<double>\n+data001[50] =\n+{\n+  { -3.7832640295504591e-24, -50.000000000000000 },\n+  { -1.0489811642368024e-23, -49.000000000000000 },\n+  { -2.9096641904058423e-23, -48.000000000000000 },\n+  { -8.0741978427258127e-23, -47.000000000000000 },\n+  { -2.2415317597442998e-22, -46.000000000000000 },\n+  { -6.2256908094623848e-22, -45.000000000000000 },\n+  { -1.7299598742816476e-21, -44.000000000000000 },\n+  { -4.8094965569500181e-21, -43.000000000000000 },\n+  { -1.3377908810011775e-20, -42.000000000000000 },\n+  { -3.7231667764599780e-20, -41.000000000000000 },\n+  { -1.0367732614516570e-19, -40.000000000000000 },\n+  { -2.8887793015227007e-19, -39.000000000000000 },\n+  { -8.0541069142907499e-19, -38.000000000000000 },\n+  { -2.2470206975885714e-18, -37.000000000000000 },\n+  { -6.2733390097622421e-18, -36.000000000000000 },\n+  { -1.7527059389947371e-17, -35.000000000000000 },\n+  { -4.9006761183927874e-17, -34.000000000000000 },\n+  { -1.3713843484487468e-16, -33.000000000000000 },\n+  { -3.8409618012250671e-16, -32.000000000000000 },\n+  { -1.0767670386162383e-15, -31.000000000000000 },\n+  { -3.0215520106888124e-15, -30.000000000000000 },\n+  { -8.4877597783535634e-15, -29.000000000000000 },\n+  { -2.3869415119337330e-14, -28.000000000000000 },\n+  { -6.7206374352620390e-14, -27.000000000000000 },\n+  { -1.8946858856749785e-13, -26.000000000000000 },\n+  { -5.3488997553402167e-13, -25.000000000000000 },\n+  { -1.5123058939997059e-12, -24.000000000000000 },\n+  { -4.2826847956656722e-12, -23.000000000000000 },\n+  { -1.2149378956204371e-11, -22.000000000000000 },\n+  { -3.4532012671467559e-11, -21.000000000000000 },\n+  { -9.8355252906498815e-11, -20.000000000000000 },\n+  { -2.8078290970607954e-10, -19.000000000000000 },\n+  { -8.0360903448286769e-10, -18.000000000000000 },\n+  { -2.3064319898216547e-09, -17.000000000000000 },\n+  { -6.6404872494410427e-09, -16.000000000000000 },\n+  { -1.9186278921478670e-08, -15.000000000000000 },\n+  { -5.5656311111451816e-08, -14.000000000000000 },\n+  { -1.6218662188014328e-07, -13.000000000000000 },\n+  { -4.7510818246724931e-07, -12.000000000000000 },\n+  { -1.4003003042474418e-06, -11.000000000000000 },\n+  { -4.1569689296853246e-06, -10.000000000000000 },\n+  { -1.2447354178006272e-05, -9.0000000000000000 },\n+  { -3.7665622843924906e-05, -8.0000000000000000 },\n+  { -0.00011548173161033820, -7.0000000000000000 },\n+  { -0.00036008245216265862, -6.0000000000000000 },\n+  { -0.0011482955912753257, -5.0000000000000000 },\n+  { -0.0037793524098489058, -4.0000000000000000 },\n+  { -0.013048381094197037, -3.0000000000000000 },\n+  { -0.048900510708061125, -2.0000000000000000 },\n+  { -0.21938393439552029, -1.0000000000000000 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+//  expint\n+\n+\n+// Test data.\n+// max(|f - f_GSL|): 2048.0000000000000\n+// max(|f - f_GSL| / |f_GSL|): 1.4993769017626171e-15\n+const testcase_expint<double>\n+data002[50] =\n+{\n+  { 1.8951178163559366, 1.0000000000000000 },\n+  { 4.9542343560018907, 2.0000000000000000 },\n+  { 9.9338325706254160, 3.0000000000000000 },\n+  { 19.630874470056217, 4.0000000000000000 },\n+  { 40.185275355803178, 5.0000000000000000 },\n+  { 85.989762142439204, 6.0000000000000000 },\n+  { 191.50474333550136, 7.0000000000000000 },\n+  { 440.37989953483833, 8.0000000000000000 },\n+  { 1037.8782907170896, 9.0000000000000000 },\n+  { 2492.2289762418782, 10.000000000000000 },\n+  { 6071.4063740986112, 11.000000000000000 },\n+  { 14959.532666397528, 12.000000000000000 },\n+  { 37197.688490689041, 13.000000000000000 },\n+  { 93192.513633965369, 14.000000000000000 },\n+  { 234955.85249076830, 15.000000000000000 },\n+  { 595560.99867083691, 16.000000000000000 },\n+  { 1516637.8940425171, 17.000000000000000 },\n+  { 3877904.3305974435, 18.000000000000000 },\n+  { 9950907.2510468438, 19.000000000000000 },\n+  { 25615652.664056588, 20.000000000000000 },\n+  { 66127186.355484925, 21.000000000000000 },\n+  { 171144671.30036369, 22.000000000000000 },\n+  { 443966369.83027124, 23.000000000000000 },\n+  { 1154115391.8491828, 24.000000000000000 },\n+  { 3005950906.5255494, 25.000000000000000 },\n+  { 7842940991.8981876, 26.000000000000000 },\n+  { 20496497119.880810, 27.000000000000000 },\n+  { 53645118592.314682, 28.000000000000000 },\n+  { 140599195758.40689, 29.000000000000000 },\n+  { 368973209407.27417, 30.000000000000000 },\n+  { 969455575968.39392, 31.000000000000000 },\n+  { 2550043566357.7871, 32.000000000000000 },\n+  { 6714640184076.4971, 33.000000000000000 },\n+  { 17698037244116.266, 34.000000000000000 },\n+  { 46690550144661.602, 35.000000000000000 },\n+  { 123285207991209.75, 36.000000000000000 },\n+  { 325798899867226.50, 37.000000000000000 },\n+  { 861638819996578.75, 38.000000000000000 },\n+  { 2280446200301902.5, 39.000000000000000 },\n+  { 6039718263611242.0, 40.000000000000000 },\n+  { 16006649143245042., 41.000000000000000 },\n+  { 42447960921368504., 42.000000000000000 },\n+  { 1.1263482901669666e+17, 43.000000000000000 },\n+  { 2.9904447186323366e+17, 44.000000000000000 },\n+  { 7.9439160357044531e+17, 45.000000000000000 },\n+  { 2.1113423886478239e+18, 46.000000000000000 },\n+  { 5.6143296808103424e+18, 47.000000000000000 },\n+  { 1.4936302131129930e+19, 48.000000000000000 },\n+  { 3.9754427479037444e+19, 49.000000000000000 },\n+  { 1.0585636897131690e+20, 50.000000000000000 },\n+};\n+const double toler002 = 2.5000000000000020e-13;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_expint<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::expint(data[i].x);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  return 0;\n+}"}, {"sha": "9bbd9536195d9e4547c50bc15377a81e3118c217", "filename": "libstdc++-v3/testsuite/special_functions/14_expint/compile.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.14 expint\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+\n+  std::expint(xf);\n+  std::expintf(xf);\n+  std::expint(xd);\n+  std::expint(xl);\n+  std::expintl(xl);\n+\n+  return;\n+}\n+"}, {"sha": "6b73aadfe3541f28834fa7ce88ef64bb2c204899", "filename": "libstdc++-v3/testsuite/special_functions/14_expint/compile_2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.14 expint\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+\n+  expint(xf);\n+  expintf(xf);\n+  expint(xd);\n+  expint(xl);\n+  expintl(xl);\n+\n+  return;\n+}\n+"}, {"sha": "e6fecef2115def14c0f26ecbb1c0a6fe9b3be564", "filename": "libstdc++-v3/testsuite/special_functions/15_hermite/check_nan.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F15_hermite%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F15_hermite%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F15_hermite%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,58 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.15 hermite\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  unsigned int n = 5;\n+\n+  float a = std::hermite(n, xf);\n+  float b = std::hermitef(n, xf);\n+  double c = std::hermite(n, xd);\n+  long double d = std::hermite(n, xl);\n+  long double e = std::hermitel(n, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "a6b6a3f7a807e38754af84472fbf37b457131f85", "filename": "libstdc++-v3/testsuite/special_functions/15_hermite/check_value.cc", "status": "added", "additions": 1759, "deletions": 0, "changes": 1759, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F15_hermite%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F15_hermite%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F15_hermite%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,1759 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  hermite\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+\n+// Test data for n=0.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_hermite<double>\n+data001[201] =\n+{\n+  { 1.0000000000000000, 0, -10.000000000000000 },\n+  { 1.0000000000000000, 0, -9.9000000000000004 },\n+  { 1.0000000000000000, 0, -9.8000000000000007 },\n+  { 1.0000000000000000, 0, -9.6999999999999993 },\n+  { 1.0000000000000000, 0, -9.5999999999999996 },\n+  { 1.0000000000000000, 0, -9.5000000000000000 },\n+  { 1.0000000000000000, 0, -9.4000000000000004 },\n+  { 1.0000000000000000, 0, -9.3000000000000007 },\n+  { 1.0000000000000000, 0, -9.1999999999999993 },\n+  { 1.0000000000000000, 0, -9.0999999999999996 },\n+  { 1.0000000000000000, 0, -9.0000000000000000 },\n+  { 1.0000000000000000, 0, -8.9000000000000004 },\n+  { 1.0000000000000000, 0, -8.8000000000000007 },\n+  { 1.0000000000000000, 0, -8.6999999999999993 },\n+  { 1.0000000000000000, 0, -8.5999999999999996 },\n+  { 1.0000000000000000, 0, -8.5000000000000000 },\n+  { 1.0000000000000000, 0, -8.4000000000000004 },\n+  { 1.0000000000000000, 0, -8.3000000000000007 },\n+  { 1.0000000000000000, 0, -8.1999999999999993 },\n+  { 1.0000000000000000, 0, -8.0999999999999996 },\n+  { 1.0000000000000000, 0, -8.0000000000000000 },\n+  { 1.0000000000000000, 0, -7.9000000000000004 },\n+  { 1.0000000000000000, 0, -7.7999999999999998 },\n+  { 1.0000000000000000, 0, -7.7000000000000002 },\n+  { 1.0000000000000000, 0, -7.5999999999999996 },\n+  { 1.0000000000000000, 0, -7.5000000000000000 },\n+  { 1.0000000000000000, 0, -7.4000000000000004 },\n+  { 1.0000000000000000, 0, -7.2999999999999998 },\n+  { 1.0000000000000000, 0, -7.2000000000000002 },\n+  { 1.0000000000000000, 0, -7.0999999999999996 },\n+  { 1.0000000000000000, 0, -7.0000000000000000 },\n+  { 1.0000000000000000, 0, -6.9000000000000004 },\n+  { 1.0000000000000000, 0, -6.7999999999999998 },\n+  { 1.0000000000000000, 0, -6.7000000000000002 },\n+  { 1.0000000000000000, 0, -6.5999999999999996 },\n+  { 1.0000000000000000, 0, -6.5000000000000000 },\n+  { 1.0000000000000000, 0, -6.4000000000000004 },\n+  { 1.0000000000000000, 0, -6.2999999999999998 },\n+  { 1.0000000000000000, 0, -6.2000000000000002 },\n+  { 1.0000000000000000, 0, -6.0999999999999996 },\n+  { 1.0000000000000000, 0, -6.0000000000000000 },\n+  { 1.0000000000000000, 0, -5.9000000000000004 },\n+  { 1.0000000000000000, 0, -5.7999999999999998 },\n+  { 1.0000000000000000, 0, -5.7000000000000002 },\n+  { 1.0000000000000000, 0, -5.5999999999999996 },\n+  { 1.0000000000000000, 0, -5.5000000000000000 },\n+  { 1.0000000000000000, 0, -5.4000000000000004 },\n+  { 1.0000000000000000, 0, -5.2999999999999998 },\n+  { 1.0000000000000000, 0, -5.2000000000000002 },\n+  { 1.0000000000000000, 0, -5.0999999999999996 },\n+  { 1.0000000000000000, 0, -5.0000000000000000 },\n+  { 1.0000000000000000, 0, -4.9000000000000004 },\n+  { 1.0000000000000000, 0, -4.7999999999999998 },\n+  { 1.0000000000000000, 0, -4.7000000000000002 },\n+  { 1.0000000000000000, 0, -4.5999999999999996 },\n+  { 1.0000000000000000, 0, -4.5000000000000000 },\n+  { 1.0000000000000000, 0, -4.4000000000000004 },\n+  { 1.0000000000000000, 0, -4.2999999999999998 },\n+  { 1.0000000000000000, 0, -4.2000000000000002 },\n+  { 1.0000000000000000, 0, -4.0999999999999996 },\n+  { 1.0000000000000000, 0, -4.0000000000000000 },\n+  { 1.0000000000000000, 0, -3.9000000000000004 },\n+  { 1.0000000000000000, 0, -3.7999999999999998 },\n+  { 1.0000000000000000, 0, -3.7000000000000002 },\n+  { 1.0000000000000000, 0, -3.5999999999999996 },\n+  { 1.0000000000000000, 0, -3.5000000000000000 },\n+  { 1.0000000000000000, 0, -3.4000000000000004 },\n+  { 1.0000000000000000, 0, -3.2999999999999998 },\n+  { 1.0000000000000000, 0, -3.2000000000000002 },\n+  { 1.0000000000000000, 0, -3.0999999999999996 },\n+  { 1.0000000000000000, 0, -3.0000000000000000 },\n+  { 1.0000000000000000, 0, -2.9000000000000004 },\n+  { 1.0000000000000000, 0, -2.7999999999999998 },\n+  { 1.0000000000000000, 0, -2.7000000000000002 },\n+  { 1.0000000000000000, 0, -2.5999999999999996 },\n+  { 1.0000000000000000, 0, -2.5000000000000000 },\n+  { 1.0000000000000000, 0, -2.4000000000000004 },\n+  { 1.0000000000000000, 0, -2.2999999999999998 },\n+  { 1.0000000000000000, 0, -2.2000000000000002 },\n+  { 1.0000000000000000, 0, -2.0999999999999996 },\n+  { 1.0000000000000000, 0, -2.0000000000000000 },\n+  { 1.0000000000000000, 0, -1.9000000000000004 },\n+  { 1.0000000000000000, 0, -1.8000000000000007 },\n+  { 1.0000000000000000, 0, -1.6999999999999993 },\n+  { 1.0000000000000000, 0, -1.5999999999999996 },\n+  { 1.0000000000000000, 0, -1.5000000000000000 },\n+  { 1.0000000000000000, 0, -1.4000000000000004 },\n+  { 1.0000000000000000, 0, -1.3000000000000007 },\n+  { 1.0000000000000000, 0, -1.1999999999999993 },\n+  { 1.0000000000000000, 0, -1.0999999999999996 },\n+  { 1.0000000000000000, 0, -1.0000000000000000 },\n+  { 1.0000000000000000, 0, -0.90000000000000036 },\n+  { 1.0000000000000000, 0, -0.80000000000000071 },\n+  { 1.0000000000000000, 0, -0.69999999999999929 },\n+  { 1.0000000000000000, 0, -0.59999999999999964 },\n+  { 1.0000000000000000, 0, -0.50000000000000000 },\n+  { 1.0000000000000000, 0, -0.40000000000000036 },\n+  { 1.0000000000000000, 0, -0.30000000000000071 },\n+  { 1.0000000000000000, 0, -0.19999999999999929 },\n+  { 1.0000000000000000, 0, -0.099999999999999645 },\n+  { 1.0000000000000000, 0, 0.0000000000000000 },\n+  { 1.0000000000000000, 0, 0.099999999999999645 },\n+  { 1.0000000000000000, 0, 0.19999999999999929 },\n+  { 1.0000000000000000, 0, 0.30000000000000071 },\n+  { 1.0000000000000000, 0, 0.40000000000000036 },\n+  { 1.0000000000000000, 0, 0.50000000000000000 },\n+  { 1.0000000000000000, 0, 0.59999999999999964 },\n+  { 1.0000000000000000, 0, 0.69999999999999929 },\n+  { 1.0000000000000000, 0, 0.80000000000000071 },\n+  { 1.0000000000000000, 0, 0.90000000000000036 },\n+  { 1.0000000000000000, 0, 1.0000000000000000 },\n+  { 1.0000000000000000, 0, 1.0999999999999996 },\n+  { 1.0000000000000000, 0, 1.1999999999999993 },\n+  { 1.0000000000000000, 0, 1.3000000000000007 },\n+  { 1.0000000000000000, 0, 1.4000000000000004 },\n+  { 1.0000000000000000, 0, 1.5000000000000000 },\n+  { 1.0000000000000000, 0, 1.5999999999999996 },\n+  { 1.0000000000000000, 0, 1.6999999999999993 },\n+  { 1.0000000000000000, 0, 1.8000000000000007 },\n+  { 1.0000000000000000, 0, 1.9000000000000004 },\n+  { 1.0000000000000000, 0, 2.0000000000000000 },\n+  { 1.0000000000000000, 0, 2.0999999999999996 },\n+  { 1.0000000000000000, 0, 2.1999999999999993 },\n+  { 1.0000000000000000, 0, 2.3000000000000007 },\n+  { 1.0000000000000000, 0, 2.4000000000000004 },\n+  { 1.0000000000000000, 0, 2.5000000000000000 },\n+  { 1.0000000000000000, 0, 2.5999999999999996 },\n+  { 1.0000000000000000, 0, 2.6999999999999993 },\n+  { 1.0000000000000000, 0, 2.8000000000000007 },\n+  { 1.0000000000000000, 0, 2.9000000000000004 },\n+  { 1.0000000000000000, 0, 3.0000000000000000 },\n+  { 1.0000000000000000, 0, 3.0999999999999996 },\n+  { 1.0000000000000000, 0, 3.1999999999999993 },\n+  { 1.0000000000000000, 0, 3.3000000000000007 },\n+  { 1.0000000000000000, 0, 3.4000000000000004 },\n+  { 1.0000000000000000, 0, 3.5000000000000000 },\n+  { 1.0000000000000000, 0, 3.5999999999999996 },\n+  { 1.0000000000000000, 0, 3.6999999999999993 },\n+  { 1.0000000000000000, 0, 3.8000000000000007 },\n+  { 1.0000000000000000, 0, 3.9000000000000004 },\n+  { 1.0000000000000000, 0, 4.0000000000000000 },\n+  { 1.0000000000000000, 0, 4.0999999999999996 },\n+  { 1.0000000000000000, 0, 4.1999999999999993 },\n+  { 1.0000000000000000, 0, 4.3000000000000007 },\n+  { 1.0000000000000000, 0, 4.4000000000000004 },\n+  { 1.0000000000000000, 0, 4.5000000000000000 },\n+  { 1.0000000000000000, 0, 4.5999999999999996 },\n+  { 1.0000000000000000, 0, 4.6999999999999993 },\n+  { 1.0000000000000000, 0, 4.8000000000000007 },\n+  { 1.0000000000000000, 0, 4.9000000000000004 },\n+  { 1.0000000000000000, 0, 5.0000000000000000 },\n+  { 1.0000000000000000, 0, 5.0999999999999996 },\n+  { 1.0000000000000000, 0, 5.1999999999999993 },\n+  { 1.0000000000000000, 0, 5.3000000000000007 },\n+  { 1.0000000000000000, 0, 5.4000000000000004 },\n+  { 1.0000000000000000, 0, 5.5000000000000000 },\n+  { 1.0000000000000000, 0, 5.5999999999999996 },\n+  { 1.0000000000000000, 0, 5.6999999999999993 },\n+  { 1.0000000000000000, 0, 5.8000000000000007 },\n+  { 1.0000000000000000, 0, 5.9000000000000004 },\n+  { 1.0000000000000000, 0, 6.0000000000000000 },\n+  { 1.0000000000000000, 0, 6.1000000000000014 },\n+  { 1.0000000000000000, 0, 6.1999999999999993 },\n+  { 1.0000000000000000, 0, 6.3000000000000007 },\n+  { 1.0000000000000000, 0, 6.3999999999999986 },\n+  { 1.0000000000000000, 0, 6.5000000000000000 },\n+  { 1.0000000000000000, 0, 6.6000000000000014 },\n+  { 1.0000000000000000, 0, 6.6999999999999993 },\n+  { 1.0000000000000000, 0, 6.8000000000000007 },\n+  { 1.0000000000000000, 0, 6.8999999999999986 },\n+  { 1.0000000000000000, 0, 7.0000000000000000 },\n+  { 1.0000000000000000, 0, 7.1000000000000014 },\n+  { 1.0000000000000000, 0, 7.1999999999999993 },\n+  { 1.0000000000000000, 0, 7.3000000000000007 },\n+  { 1.0000000000000000, 0, 7.3999999999999986 },\n+  { 1.0000000000000000, 0, 7.5000000000000000 },\n+  { 1.0000000000000000, 0, 7.6000000000000014 },\n+  { 1.0000000000000000, 0, 7.6999999999999993 },\n+  { 1.0000000000000000, 0, 7.8000000000000007 },\n+  { 1.0000000000000000, 0, 7.8999999999999986 },\n+  { 1.0000000000000000, 0, 8.0000000000000000 },\n+  { 1.0000000000000000, 0, 8.1000000000000014 },\n+  { 1.0000000000000000, 0, 8.1999999999999993 },\n+  { 1.0000000000000000, 0, 8.3000000000000007 },\n+  { 1.0000000000000000, 0, 8.3999999999999986 },\n+  { 1.0000000000000000, 0, 8.5000000000000000 },\n+  { 1.0000000000000000, 0, 8.6000000000000014 },\n+  { 1.0000000000000000, 0, 8.6999999999999993 },\n+  { 1.0000000000000000, 0, 8.8000000000000007 },\n+  { 1.0000000000000000, 0, 8.8999999999999986 },\n+  { 1.0000000000000000, 0, 9.0000000000000000 },\n+  { 1.0000000000000000, 0, 9.1000000000000014 },\n+  { 1.0000000000000000, 0, 9.1999999999999993 },\n+  { 1.0000000000000000, 0, 9.3000000000000007 },\n+  { 1.0000000000000000, 0, 9.3999999999999986 },\n+  { 1.0000000000000000, 0, 9.5000000000000000 },\n+  { 1.0000000000000000, 0, 9.6000000000000014 },\n+  { 1.0000000000000000, 0, 9.6999999999999993 },\n+  { 1.0000000000000000, 0, 9.8000000000000007 },\n+  { 1.0000000000000000, 0, 9.8999999999999986 },\n+  { 1.0000000000000000, 0, 10.000000000000000 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+\n+// Test data for n=1.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_hermite<double>\n+data002[201] =\n+{\n+  { -20.000000000000000, 1, -10.000000000000000 },\n+  { -19.800000000000001, 1, -9.9000000000000004 },\n+  { -19.600000000000001, 1, -9.8000000000000007 },\n+  { -19.399999999999999, 1, -9.6999999999999993 },\n+  { -19.199999999999999, 1, -9.5999999999999996 },\n+  { -19.000000000000000, 1, -9.5000000000000000 },\n+  { -18.800000000000001, 1, -9.4000000000000004 },\n+  { -18.600000000000001, 1, -9.3000000000000007 },\n+  { -18.399999999999999, 1, -9.1999999999999993 },\n+  { -18.199999999999999, 1, -9.0999999999999996 },\n+  { -18.000000000000000, 1, -9.0000000000000000 },\n+  { -17.800000000000001, 1, -8.9000000000000004 },\n+  { -17.600000000000001, 1, -8.8000000000000007 },\n+  { -17.399999999999999, 1, -8.6999999999999993 },\n+  { -17.199999999999999, 1, -8.5999999999999996 },\n+  { -17.000000000000000, 1, -8.5000000000000000 },\n+  { -16.800000000000001, 1, -8.4000000000000004 },\n+  { -16.600000000000001, 1, -8.3000000000000007 },\n+  { -16.399999999999999, 1, -8.1999999999999993 },\n+  { -16.199999999999999, 1, -8.0999999999999996 },\n+  { -16.000000000000000, 1, -8.0000000000000000 },\n+  { -15.800000000000001, 1, -7.9000000000000004 },\n+  { -15.600000000000000, 1, -7.7999999999999998 },\n+  { -15.400000000000000, 1, -7.7000000000000002 },\n+  { -15.199999999999999, 1, -7.5999999999999996 },\n+  { -15.000000000000000, 1, -7.5000000000000000 },\n+  { -14.800000000000001, 1, -7.4000000000000004 },\n+  { -14.600000000000000, 1, -7.2999999999999998 },\n+  { -14.400000000000000, 1, -7.2000000000000002 },\n+  { -14.199999999999999, 1, -7.0999999999999996 },\n+  { -14.000000000000000, 1, -7.0000000000000000 },\n+  { -13.800000000000001, 1, -6.9000000000000004 },\n+  { -13.600000000000000, 1, -6.7999999999999998 },\n+  { -13.400000000000000, 1, -6.7000000000000002 },\n+  { -13.199999999999999, 1, -6.5999999999999996 },\n+  { -13.000000000000000, 1, -6.5000000000000000 },\n+  { -12.800000000000001, 1, -6.4000000000000004 },\n+  { -12.600000000000000, 1, -6.2999999999999998 },\n+  { -12.400000000000000, 1, -6.2000000000000002 },\n+  { -12.199999999999999, 1, -6.0999999999999996 },\n+  { -12.000000000000000, 1, -6.0000000000000000 },\n+  { -11.800000000000001, 1, -5.9000000000000004 },\n+  { -11.600000000000000, 1, -5.7999999999999998 },\n+  { -11.400000000000000, 1, -5.7000000000000002 },\n+  { -11.199999999999999, 1, -5.5999999999999996 },\n+  { -11.000000000000000, 1, -5.5000000000000000 },\n+  { -10.800000000000001, 1, -5.4000000000000004 },\n+  { -10.600000000000000, 1, -5.2999999999999998 },\n+  { -10.400000000000000, 1, -5.2000000000000002 },\n+  { -10.199999999999999, 1, -5.0999999999999996 },\n+  { -10.000000000000000, 1, -5.0000000000000000 },\n+  { -9.8000000000000007, 1, -4.9000000000000004 },\n+  { -9.5999999999999996, 1, -4.7999999999999998 },\n+  { -9.4000000000000004, 1, -4.7000000000000002 },\n+  { -9.1999999999999993, 1, -4.5999999999999996 },\n+  { -9.0000000000000000, 1, -4.5000000000000000 },\n+  { -8.8000000000000007, 1, -4.4000000000000004 },\n+  { -8.5999999999999996, 1, -4.2999999999999998 },\n+  { -8.4000000000000004, 1, -4.2000000000000002 },\n+  { -8.1999999999999993, 1, -4.0999999999999996 },\n+  { -8.0000000000000000, 1, -4.0000000000000000 },\n+  { -7.8000000000000007, 1, -3.9000000000000004 },\n+  { -7.5999999999999996, 1, -3.7999999999999998 },\n+  { -7.4000000000000004, 1, -3.7000000000000002 },\n+  { -7.1999999999999993, 1, -3.5999999999999996 },\n+  { -7.0000000000000000, 1, -3.5000000000000000 },\n+  { -6.8000000000000007, 1, -3.4000000000000004 },\n+  { -6.5999999999999996, 1, -3.2999999999999998 },\n+  { -6.4000000000000004, 1, -3.2000000000000002 },\n+  { -6.1999999999999993, 1, -3.0999999999999996 },\n+  { -6.0000000000000000, 1, -3.0000000000000000 },\n+  { -5.8000000000000007, 1, -2.9000000000000004 },\n+  { -5.5999999999999996, 1, -2.7999999999999998 },\n+  { -5.4000000000000004, 1, -2.7000000000000002 },\n+  { -5.1999999999999993, 1, -2.5999999999999996 },\n+  { -5.0000000000000000, 1, -2.5000000000000000 },\n+  { -4.8000000000000007, 1, -2.4000000000000004 },\n+  { -4.5999999999999996, 1, -2.2999999999999998 },\n+  { -4.4000000000000004, 1, -2.2000000000000002 },\n+  { -4.1999999999999993, 1, -2.0999999999999996 },\n+  { -4.0000000000000000, 1, -2.0000000000000000 },\n+  { -3.8000000000000007, 1, -1.9000000000000004 },\n+  { -3.6000000000000014, 1, -1.8000000000000007 },\n+  { -3.3999999999999986, 1, -1.6999999999999993 },\n+  { -3.1999999999999993, 1, -1.5999999999999996 },\n+  { -3.0000000000000000, 1, -1.5000000000000000 },\n+  { -2.8000000000000007, 1, -1.4000000000000004 },\n+  { -2.6000000000000014, 1, -1.3000000000000007 },\n+  { -2.3999999999999986, 1, -1.1999999999999993 },\n+  { -2.1999999999999993, 1, -1.0999999999999996 },\n+  { -2.0000000000000000, 1, -1.0000000000000000 },\n+  { -1.8000000000000007, 1, -0.90000000000000036 },\n+  { -1.6000000000000014, 1, -0.80000000000000071 },\n+  { -1.3999999999999986, 1, -0.69999999999999929 },\n+  { -1.1999999999999993, 1, -0.59999999999999964 },\n+  { -1.0000000000000000, 1, -0.50000000000000000 },\n+  { -0.80000000000000071, 1, -0.40000000000000036 },\n+  { -0.60000000000000142, 1, -0.30000000000000071 },\n+  { -0.39999999999999858, 1, -0.19999999999999929 },\n+  { -0.19999999999999929, 1, -0.099999999999999645 },\n+  { 0.0000000000000000, 1, 0.0000000000000000 },\n+  { 0.19999999999999929, 1, 0.099999999999999645 },\n+  { 0.39999999999999858, 1, 0.19999999999999929 },\n+  { 0.60000000000000142, 1, 0.30000000000000071 },\n+  { 0.80000000000000071, 1, 0.40000000000000036 },\n+  { 1.0000000000000000, 1, 0.50000000000000000 },\n+  { 1.1999999999999993, 1, 0.59999999999999964 },\n+  { 1.3999999999999986, 1, 0.69999999999999929 },\n+  { 1.6000000000000014, 1, 0.80000000000000071 },\n+  { 1.8000000000000007, 1, 0.90000000000000036 },\n+  { 2.0000000000000000, 1, 1.0000000000000000 },\n+  { 2.1999999999999993, 1, 1.0999999999999996 },\n+  { 2.3999999999999986, 1, 1.1999999999999993 },\n+  { 2.6000000000000014, 1, 1.3000000000000007 },\n+  { 2.8000000000000007, 1, 1.4000000000000004 },\n+  { 3.0000000000000000, 1, 1.5000000000000000 },\n+  { 3.1999999999999993, 1, 1.5999999999999996 },\n+  { 3.3999999999999986, 1, 1.6999999999999993 },\n+  { 3.6000000000000014, 1, 1.8000000000000007 },\n+  { 3.8000000000000007, 1, 1.9000000000000004 },\n+  { 4.0000000000000000, 1, 2.0000000000000000 },\n+  { 4.1999999999999993, 1, 2.0999999999999996 },\n+  { 4.3999999999999986, 1, 2.1999999999999993 },\n+  { 4.6000000000000014, 1, 2.3000000000000007 },\n+  { 4.8000000000000007, 1, 2.4000000000000004 },\n+  { 5.0000000000000000, 1, 2.5000000000000000 },\n+  { 5.1999999999999993, 1, 2.5999999999999996 },\n+  { 5.3999999999999986, 1, 2.6999999999999993 },\n+  { 5.6000000000000014, 1, 2.8000000000000007 },\n+  { 5.8000000000000007, 1, 2.9000000000000004 },\n+  { 6.0000000000000000, 1, 3.0000000000000000 },\n+  { 6.1999999999999993, 1, 3.0999999999999996 },\n+  { 6.3999999999999986, 1, 3.1999999999999993 },\n+  { 6.6000000000000014, 1, 3.3000000000000007 },\n+  { 6.8000000000000007, 1, 3.4000000000000004 },\n+  { 7.0000000000000000, 1, 3.5000000000000000 },\n+  { 7.1999999999999993, 1, 3.5999999999999996 },\n+  { 7.3999999999999986, 1, 3.6999999999999993 },\n+  { 7.6000000000000014, 1, 3.8000000000000007 },\n+  { 7.8000000000000007, 1, 3.9000000000000004 },\n+  { 8.0000000000000000, 1, 4.0000000000000000 },\n+  { 8.1999999999999993, 1, 4.0999999999999996 },\n+  { 8.3999999999999986, 1, 4.1999999999999993 },\n+  { 8.6000000000000014, 1, 4.3000000000000007 },\n+  { 8.8000000000000007, 1, 4.4000000000000004 },\n+  { 9.0000000000000000, 1, 4.5000000000000000 },\n+  { 9.1999999999999993, 1, 4.5999999999999996 },\n+  { 9.3999999999999986, 1, 4.6999999999999993 },\n+  { 9.6000000000000014, 1, 4.8000000000000007 },\n+  { 9.8000000000000007, 1, 4.9000000000000004 },\n+  { 10.000000000000000, 1, 5.0000000000000000 },\n+  { 10.199999999999999, 1, 5.0999999999999996 },\n+  { 10.399999999999999, 1, 5.1999999999999993 },\n+  { 10.600000000000001, 1, 5.3000000000000007 },\n+  { 10.800000000000001, 1, 5.4000000000000004 },\n+  { 11.000000000000000, 1, 5.5000000000000000 },\n+  { 11.199999999999999, 1, 5.5999999999999996 },\n+  { 11.399999999999999, 1, 5.6999999999999993 },\n+  { 11.600000000000001, 1, 5.8000000000000007 },\n+  { 11.800000000000001, 1, 5.9000000000000004 },\n+  { 12.000000000000000, 1, 6.0000000000000000 },\n+  { 12.200000000000003, 1, 6.1000000000000014 },\n+  { 12.399999999999999, 1, 6.1999999999999993 },\n+  { 12.600000000000001, 1, 6.3000000000000007 },\n+  { 12.799999999999997, 1, 6.3999999999999986 },\n+  { 13.000000000000000, 1, 6.5000000000000000 },\n+  { 13.200000000000003, 1, 6.6000000000000014 },\n+  { 13.399999999999999, 1, 6.6999999999999993 },\n+  { 13.600000000000001, 1, 6.8000000000000007 },\n+  { 13.799999999999997, 1, 6.8999999999999986 },\n+  { 14.000000000000000, 1, 7.0000000000000000 },\n+  { 14.200000000000003, 1, 7.1000000000000014 },\n+  { 14.399999999999999, 1, 7.1999999999999993 },\n+  { 14.600000000000001, 1, 7.3000000000000007 },\n+  { 14.799999999999997, 1, 7.3999999999999986 },\n+  { 15.000000000000000, 1, 7.5000000000000000 },\n+  { 15.200000000000003, 1, 7.6000000000000014 },\n+  { 15.399999999999999, 1, 7.6999999999999993 },\n+  { 15.600000000000001, 1, 7.8000000000000007 },\n+  { 15.799999999999997, 1, 7.8999999999999986 },\n+  { 16.000000000000000, 1, 8.0000000000000000 },\n+  { 16.200000000000003, 1, 8.1000000000000014 },\n+  { 16.399999999999999, 1, 8.1999999999999993 },\n+  { 16.600000000000001, 1, 8.3000000000000007 },\n+  { 16.799999999999997, 1, 8.3999999999999986 },\n+  { 17.000000000000000, 1, 8.5000000000000000 },\n+  { 17.200000000000003, 1, 8.6000000000000014 },\n+  { 17.399999999999999, 1, 8.6999999999999993 },\n+  { 17.600000000000001, 1, 8.8000000000000007 },\n+  { 17.799999999999997, 1, 8.8999999999999986 },\n+  { 18.000000000000000, 1, 9.0000000000000000 },\n+  { 18.200000000000003, 1, 9.1000000000000014 },\n+  { 18.399999999999999, 1, 9.1999999999999993 },\n+  { 18.600000000000001, 1, 9.3000000000000007 },\n+  { 18.799999999999997, 1, 9.3999999999999986 },\n+  { 19.000000000000000, 1, 9.5000000000000000 },\n+  { 19.200000000000003, 1, 9.6000000000000014 },\n+  { 19.399999999999999, 1, 9.6999999999999993 },\n+  { 19.600000000000001, 1, 9.8000000000000007 },\n+  { 19.799999999999997, 1, 9.8999999999999986 },\n+  { 20.000000000000000, 1, 10.000000000000000 },\n+};\n+const double toler002 = 2.5000000000000020e-13;\n+\n+// Test data for n=2.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_hermite<double>\n+data003[201] =\n+{\n+  { 398.00000000000000, 2, -10.000000000000000 },\n+  { 390.04000000000002, 2, -9.9000000000000004 },\n+  { 382.16000000000008, 2, -9.8000000000000007 },\n+  { 374.35999999999996, 2, -9.6999999999999993 },\n+  { 366.63999999999999, 2, -9.5999999999999996 },\n+  { 359.00000000000000, 2, -9.5000000000000000 },\n+  { 351.44000000000005, 2, -9.4000000000000004 },\n+  { 343.96000000000004, 2, -9.3000000000000007 },\n+  { 336.55999999999995, 2, -9.1999999999999993 },\n+  { 329.23999999999995, 2, -9.0999999999999996 },\n+  { 322.00000000000000, 2, -9.0000000000000000 },\n+  { 314.84000000000003, 2, -8.9000000000000004 },\n+  { 307.76000000000005, 2, -8.8000000000000007 },\n+  { 300.75999999999993, 2, -8.6999999999999993 },\n+  { 293.83999999999997, 2, -8.5999999999999996 },\n+  { 287.00000000000000, 2, -8.5000000000000000 },\n+  { 280.24000000000001, 2, -8.4000000000000004 },\n+  { 273.56000000000006, 2, -8.3000000000000007 },\n+  { 266.95999999999998, 2, -8.1999999999999993 },\n+  { 260.44000000000000, 2, -8.0999999999999996 },\n+  { 254.00000000000000, 2, -8.0000000000000000 },\n+  { 247.64000000000001, 2, -7.9000000000000004 },\n+  { 241.35999999999999, 2, -7.7999999999999998 },\n+  { 235.16000000000003, 2, -7.7000000000000002 },\n+  { 229.03999999999999, 2, -7.5999999999999996 },\n+  { 223.00000000000000, 2, -7.5000000000000000 },\n+  { 217.04000000000002, 2, -7.4000000000000004 },\n+  { 211.16000000000000, 2, -7.2999999999999998 },\n+  { 205.36000000000001, 2, -7.2000000000000002 },\n+  { 199.63999999999999, 2, -7.0999999999999996 },\n+  { 194.00000000000000, 2, -7.0000000000000000 },\n+  { 188.44000000000003, 2, -6.9000000000000004 },\n+  { 182.95999999999998, 2, -6.7999999999999998 },\n+  { 177.56000000000000, 2, -6.7000000000000002 },\n+  { 172.23999999999998, 2, -6.5999999999999996 },\n+  { 167.00000000000000, 2, -6.5000000000000000 },\n+  { 161.84000000000003, 2, -6.4000000000000004 },\n+  { 156.75999999999999, 2, -6.2999999999999998 },\n+  { 151.76000000000002, 2, -6.2000000000000002 },\n+  { 146.83999999999997, 2, -6.0999999999999996 },\n+  { 142.00000000000000, 2, -6.0000000000000000 },\n+  { 137.24000000000001, 2, -5.9000000000000004 },\n+  { 132.56000000000000, 2, -5.7999999999999998 },\n+  { 127.96000000000001, 2, -5.7000000000000002 },\n+  { 123.43999999999998, 2, -5.5999999999999996 },\n+  { 119.00000000000000, 2, -5.5000000000000000 },\n+  { 114.64000000000001, 2, -5.4000000000000004 },\n+  { 110.36000000000000, 2, -5.2999999999999998 },\n+  { 106.16000000000001, 2, -5.2000000000000002 },\n+  { 102.03999999999999, 2, -5.0999999999999996 },\n+  { 98.000000000000000, 2, -5.0000000000000000 },\n+  { 94.040000000000020, 2, -4.9000000000000004 },\n+  { 90.159999999999997, 2, -4.7999999999999998 },\n+  { 86.360000000000014, 2, -4.7000000000000002 },\n+  { 82.639999999999986, 2, -4.5999999999999996 },\n+  { 79.000000000000000, 2, -4.5000000000000000 },\n+  { 75.440000000000012, 2, -4.4000000000000004 },\n+  { 71.959999999999994, 2, -4.2999999999999998 },\n+  { 68.560000000000002, 2, -4.2000000000000002 },\n+  { 65.239999999999995, 2, -4.0999999999999996 },\n+  { 62.000000000000000, 2, -4.0000000000000000 },\n+  { 58.840000000000011, 2, -3.9000000000000004 },\n+  { 55.759999999999998, 2, -3.7999999999999998 },\n+  { 52.760000000000005, 2, -3.7000000000000002 },\n+  { 49.839999999999989, 2, -3.5999999999999996 },\n+  { 47.000000000000000, 2, -3.5000000000000000 },\n+  { 44.240000000000009, 2, -3.4000000000000004 },\n+  { 41.559999999999995, 2, -3.2999999999999998 },\n+  { 38.960000000000008, 2, -3.2000000000000002 },\n+  { 36.439999999999991, 2, -3.0999999999999996 },\n+  { 34.000000000000000, 2, -3.0000000000000000 },\n+  { 31.640000000000008, 2, -2.9000000000000004 },\n+  { 29.359999999999996, 2, -2.7999999999999998 },\n+  { 27.160000000000004, 2, -2.7000000000000002 },\n+  { 25.039999999999992, 2, -2.5999999999999996 },\n+  { 23.000000000000000, 2, -2.5000000000000000 },\n+  { 21.040000000000006, 2, -2.4000000000000004 },\n+  { 19.159999999999997, 2, -2.2999999999999998 },\n+  { 17.360000000000003, 2, -2.2000000000000002 },\n+  { 15.639999999999993, 2, -2.0999999999999996 },\n+  { 14.000000000000000, 2, -2.0000000000000000 },\n+  { 12.440000000000005, 2, -1.9000000000000004 },\n+  { 10.960000000000010, 2, -1.8000000000000007 },\n+  { 9.5599999999999898, 2, -1.6999999999999993 },\n+  { 8.2399999999999949, 2, -1.5999999999999996 },\n+  { 7.0000000000000000, 2, -1.5000000000000000 },\n+  { 5.8400000000000043, 2, -1.4000000000000004 },\n+  { 4.7600000000000078, 2, -1.3000000000000007 },\n+  { 3.7599999999999936, 2, -1.1999999999999993 },\n+  { 2.8399999999999972, 2, -1.0999999999999996 },\n+  { 2.0000000000000000, 2, -1.0000000000000000 },\n+  { 1.2400000000000024, 2, -0.90000000000000036 },\n+  { 0.56000000000000449, 2, -0.80000000000000071 },\n+  { -0.040000000000004032, 2, -0.69999999999999929 },\n+  { -0.56000000000000161, 2, -0.59999999999999964 },\n+  { -1.0000000000000000, 2, -0.50000000000000000 },\n+  { -1.3599999999999990, 2, -0.40000000000000036 },\n+  { -1.6399999999999983, 2, -0.30000000000000071 },\n+  { -1.8400000000000012, 2, -0.19999999999999929 },\n+  { -1.9600000000000002, 2, -0.099999999999999645 },\n+  { -2.0000000000000000, 2, 0.0000000000000000 },\n+  { -1.9600000000000002, 2, 0.099999999999999645 },\n+  { -1.8400000000000012, 2, 0.19999999999999929 },\n+  { -1.6399999999999983, 2, 0.30000000000000071 },\n+  { -1.3599999999999990, 2, 0.40000000000000036 },\n+  { -1.0000000000000000, 2, 0.50000000000000000 },\n+  { -0.56000000000000161, 2, 0.59999999999999964 },\n+  { -0.040000000000004032, 2, 0.69999999999999929 },\n+  { 0.56000000000000449, 2, 0.80000000000000071 },\n+  { 1.2400000000000024, 2, 0.90000000000000036 },\n+  { 2.0000000000000000, 2, 1.0000000000000000 },\n+  { 2.8399999999999972, 2, 1.0999999999999996 },\n+  { 3.7599999999999936, 2, 1.1999999999999993 },\n+  { 4.7600000000000078, 2, 1.3000000000000007 },\n+  { 5.8400000000000043, 2, 1.4000000000000004 },\n+  { 7.0000000000000000, 2, 1.5000000000000000 },\n+  { 8.2399999999999949, 2, 1.5999999999999996 },\n+  { 9.5599999999999898, 2, 1.6999999999999993 },\n+  { 10.960000000000010, 2, 1.8000000000000007 },\n+  { 12.440000000000005, 2, 1.9000000000000004 },\n+  { 14.000000000000000, 2, 2.0000000000000000 },\n+  { 15.639999999999993, 2, 2.0999999999999996 },\n+  { 17.359999999999989, 2, 2.1999999999999993 },\n+  { 19.160000000000014, 2, 2.3000000000000007 },\n+  { 21.040000000000006, 2, 2.4000000000000004 },\n+  { 23.000000000000000, 2, 2.5000000000000000 },\n+  { 25.039999999999992, 2, 2.5999999999999996 },\n+  { 27.159999999999986, 2, 2.6999999999999993 },\n+  { 29.360000000000017, 2, 2.8000000000000007 },\n+  { 31.640000000000008, 2, 2.9000000000000004 },\n+  { 34.000000000000000, 2, 3.0000000000000000 },\n+  { 36.439999999999991, 2, 3.0999999999999996 },\n+  { 38.959999999999980, 2, 3.1999999999999993 },\n+  { 41.560000000000016, 2, 3.3000000000000007 },\n+  { 44.240000000000009, 2, 3.4000000000000004 },\n+  { 47.000000000000000, 2, 3.5000000000000000 },\n+  { 49.839999999999989, 2, 3.5999999999999996 },\n+  { 52.759999999999977, 2, 3.6999999999999993 },\n+  { 55.760000000000019, 2, 3.8000000000000007 },\n+  { 58.840000000000011, 2, 3.9000000000000004 },\n+  { 62.000000000000000, 2, 4.0000000000000000 },\n+  { 65.239999999999995, 2, 4.0999999999999996 },\n+  { 68.559999999999974, 2, 4.1999999999999993 },\n+  { 71.960000000000022, 2, 4.3000000000000007 },\n+  { 75.440000000000012, 2, 4.4000000000000004 },\n+  { 79.000000000000000, 2, 4.5000000000000000 },\n+  { 82.639999999999986, 2, 4.5999999999999996 },\n+  { 86.359999999999971, 2, 4.6999999999999993 },\n+  { 90.160000000000025, 2, 4.8000000000000007 },\n+  { 94.040000000000020, 2, 4.9000000000000004 },\n+  { 98.000000000000000, 2, 5.0000000000000000 },\n+  { 102.03999999999999, 2, 5.0999999999999996 },\n+  { 106.15999999999997, 2, 5.1999999999999993 },\n+  { 110.36000000000003, 2, 5.3000000000000007 },\n+  { 114.64000000000001, 2, 5.4000000000000004 },\n+  { 119.00000000000000, 2, 5.5000000000000000 },\n+  { 123.43999999999998, 2, 5.5999999999999996 },\n+  { 127.95999999999998, 2, 5.6999999999999993 },\n+  { 132.56000000000003, 2, 5.8000000000000007 },\n+  { 137.24000000000001, 2, 5.9000000000000004 },\n+  { 142.00000000000000, 2, 6.0000000000000000 },\n+  { 146.84000000000006, 2, 6.1000000000000014 },\n+  { 151.75999999999996, 2, 6.1999999999999993 },\n+  { 156.76000000000005, 2, 6.3000000000000007 },\n+  { 161.83999999999992, 2, 6.3999999999999986 },\n+  { 167.00000000000000, 2, 6.5000000000000000 },\n+  { 172.24000000000007, 2, 6.6000000000000014 },\n+  { 177.55999999999997, 2, 6.6999999999999993 },\n+  { 182.96000000000004, 2, 6.8000000000000007 },\n+  { 188.43999999999991, 2, 6.8999999999999986 },\n+  { 194.00000000000000, 2, 7.0000000000000000 },\n+  { 199.64000000000007, 2, 7.1000000000000014 },\n+  { 205.35999999999996, 2, 7.1999999999999993 },\n+  { 211.16000000000005, 2, 7.3000000000000007 },\n+  { 217.03999999999991, 2, 7.3999999999999986 },\n+  { 223.00000000000000, 2, 7.5000000000000000 },\n+  { 229.04000000000008, 2, 7.6000000000000014 },\n+  { 235.15999999999997, 2, 7.6999999999999993 },\n+  { 241.36000000000004, 2, 7.8000000000000007 },\n+  { 247.63999999999990, 2, 7.8999999999999986 },\n+  { 254.00000000000000, 2, 8.0000000000000000 },\n+  { 260.44000000000011, 2, 8.1000000000000014 },\n+  { 266.95999999999998, 2, 8.1999999999999993 },\n+  { 273.56000000000006, 2, 8.3000000000000007 },\n+  { 280.23999999999990, 2, 8.3999999999999986 },\n+  { 287.00000000000000, 2, 8.5000000000000000 },\n+  { 293.84000000000009, 2, 8.6000000000000014 },\n+  { 300.75999999999993, 2, 8.6999999999999993 },\n+  { 307.76000000000005, 2, 8.8000000000000007 },\n+  { 314.83999999999992, 2, 8.8999999999999986 },\n+  { 322.00000000000000, 2, 9.0000000000000000 },\n+  { 329.24000000000012, 2, 9.1000000000000014 },\n+  { 336.55999999999995, 2, 9.1999999999999993 },\n+  { 343.96000000000004, 2, 9.3000000000000007 },\n+  { 351.43999999999988, 2, 9.3999999999999986 },\n+  { 359.00000000000000, 2, 9.5000000000000000 },\n+  { 366.64000000000010, 2, 9.6000000000000014 },\n+  { 374.35999999999996, 2, 9.6999999999999993 },\n+  { 382.16000000000008, 2, 9.8000000000000007 },\n+  { 390.03999999999991, 2, 9.8999999999999986 },\n+  { 398.00000000000000, 2, 10.000000000000000 },\n+};\n+const double toler003 = 2.5000000000000020e-13;\n+\n+// Test data for n=5.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_hermite<double>\n+data004[201] =\n+{\n+  { -3041200.0000000000, 5, -10.000000000000000 },\n+  { -2889108.3196800007, 5, -9.9000000000000004 },\n+  { -2743131.8297600015, 5, -9.8000000000000007 },\n+  { -2603085.2022399991, 5, -9.6999999999999993 },\n+  { -2468786.8723199992, 5, -9.5999999999999996 },\n+  { -2340059.0000000000, 5, -9.5000000000000000 },\n+  { -2216727.4316800009, 5, -9.4000000000000004 },\n+  { -2098621.6617600010, 5, -9.3000000000000007 },\n+  { -1985574.7942399993, 5, -9.1999999999999993 },\n+  { -1877423.5043199996, 5, -9.0999999999999996 },\n+  { -1774008.0000000000, 5, -9.0000000000000000 },\n+  { -1675171.9836800008, 5, -8.9000000000000004 },\n+  { -1580762.6137600006, 5, -8.8000000000000007 },\n+  { -1490630.4662399990, 5, -8.6999999999999993 },\n+  { -1404629.4963199999, 5, -8.5999999999999996 },\n+  { -1322617.0000000000, 5, -8.5000000000000000 },\n+  { -1244453.5756800002, 5, -8.4000000000000004 },\n+  { -1170003.0857600006, 5, -8.3000000000000007 },\n+  { -1099132.6182399995, 5, -8.1999999999999993 },\n+  { -1031712.4483199996, 5, -8.0999999999999996 },\n+  { -967616.00000000000, 5, -8.0000000000000000 },\n+  { -906719.80768000009, 5, -7.9000000000000004 },\n+  { -848903.47775999992, 5, -7.7999999999999998 },\n+  { -794049.65024000010, 5, -7.7000000000000002 },\n+  { -742043.96031999995, 5, -7.5999999999999996 },\n+  { -692775.00000000000, 5, -7.5000000000000000 },\n+  { -646134.27968000027, 5, -7.4000000000000004 },\n+  { -602016.18975999986, 5, -7.2999999999999998 },\n+  { -560317.96224000002, 5, -7.2000000000000002 },\n+  { -520939.63231999992, 5, -7.0999999999999996 },\n+  { -483784.00000000000, 5, -7.0000000000000000 },\n+  { -448756.59168000019, 5, -6.9000000000000004 },\n+  { -415765.62176000001, 5, -6.7999999999999998 },\n+  { -384721.95424000005, 5, -6.7000000000000002 },\n+  { -355539.06431999995, 5, -6.5999999999999996 },\n+  { -328133.00000000000, 5, -6.5000000000000000 },\n+  { -302422.34368000011, 5, -6.4000000000000004 },\n+  { -278328.17375999998, 5, -6.2999999999999998 },\n+  { -255774.02624000004, 5, -6.2000000000000002 },\n+  { -234685.85631999990, 5, -6.0999999999999996 },\n+  { -214992.00000000000, 5, -6.0000000000000000 },\n+  { -196623.13568000006, 5, -5.9000000000000004 },\n+  { -179512.24575999999, 5, -5.7999999999999998 },\n+  { -163594.57824000003, 5, -5.7000000000000002 },\n+  { -148807.60831999997, 5, -5.5999999999999996 },\n+  { -135091.00000000000, 5, -5.5000000000000000 },\n+  { -122386.56768000004, 5, -5.4000000000000004 },\n+  { -110638.23776000000, 5, -5.2999999999999998 },\n+  { -99792.010240000047, 5, -5.2000000000000002 },\n+  { -89795.920319999976, 5, -5.0999999999999996 },\n+  { -80600.000000000000, 5, -5.0000000000000000 },\n+  { -72156.239680000028, 5, -4.9000000000000004 },\n+  { -64418.549759999994, 5, -4.7999999999999998 },\n+  { -57342.722240000010, 5, -4.7000000000000002 },\n+  { -50886.392319999970, 5, -4.5999999999999996 },\n+  { -45009.000000000000, 5, -4.5000000000000000 },\n+  { -39671.751680000008, 5, -4.4000000000000004 },\n+  { -34837.581759999986, 5, -4.2999999999999998 },\n+  { -30471.114240000010, 5, -4.2000000000000002 },\n+  { -26538.624319999992, 5, -4.0999999999999996 },\n+  { -23008.000000000000, 5, -4.0000000000000000 },\n+  { -19848.703680000013, 5, -3.9000000000000004 },\n+  { -17031.733759999996, 5, -3.7999999999999998 },\n+  { -14529.586240000001, 5, -3.7000000000000002 },\n+  { -12316.216319999992, 5, -3.5999999999999996 },\n+  { -10367.000000000000, 5, -3.5000000000000000 },\n+  { -8658.6956800000080, 5, -3.4000000000000004 },\n+  { -7169.4057599999960, 5, -3.2999999999999998 },\n+  { -5878.5382400000035, 5, -3.2000000000000002 },\n+  { -4766.7683199999965, 5, -3.0999999999999996 },\n+  { -3816.0000000000000, 5, -3.0000000000000000 },\n+  { -3009.3276800000026, 5, -2.9000000000000004 },\n+  { -2330.9977599999988, 5, -2.7999999999999998 },\n+  { -1766.3702400000002, 5, -2.7000000000000002 },\n+  { -1301.8803199999984, 5, -2.5999999999999996 },\n+  { -925.00000000000000, 5, -2.5000000000000000 },\n+  { -624.19968000000074, 5, -2.4000000000000004 },\n+  { -388.90975999999978, 5, -2.2999999999999998 },\n+  { -209.48224000000022, 5, -2.2000000000000002 },\n+  { -77.152319999999520, 5, -2.0999999999999996 },\n+  { 16.000000000000000, 5, -2.0000000000000000 },\n+  { 77.088319999999840, 5, -1.9000000000000004 },\n+  { 112.45823999999980, 5, -1.8000000000000007 },\n+  { 127.72576000000002, 5, -1.6999999999999993 },\n+  { 127.81567999999996, 5, -1.5999999999999996 },\n+  { 117.00000000000000, 5, -1.5000000000000000 },\n+  { 98.936320000000080, 5, -1.4000000000000004 },\n+  { 76.706240000000179, 5, -1.3000000000000007 },\n+  { 52.853759999999838, 5, -1.1999999999999993 },\n+  { 29.423679999999933, 5, -1.0999999999999996 },\n+  { 8.0000000000000000, 5, -1.0000000000000000 },\n+  { -10.255679999999948, 5, -0.90000000000000036 },\n+  { -24.565759999999916, 5, -0.80000000000000071 },\n+  { -34.498240000000052, 5, -0.69999999999999929 },\n+  { -39.928320000000006, 5, -0.59999999999999964 },\n+  { -41.000000000000000, 5, -0.50000000000000000 },\n+  { -38.087680000000020, 5, -0.40000000000000036 },\n+  { -31.757760000000054, 5, -0.30000000000000071 },\n+  { -22.730239999999931, 5, -0.19999999999999929 },\n+  { -11.840319999999959, 5, -0.099999999999999645 },\n+  { 0.0000000000000000, 5, 0.0000000000000000 },\n+  { 11.840319999999959, 5, 0.099999999999999645 },\n+  { 22.730239999999931, 5, 0.19999999999999929 },\n+  { 31.757760000000054, 5, 0.30000000000000071 },\n+  { 38.087680000000020, 5, 0.40000000000000036 },\n+  { 41.000000000000000, 5, 0.50000000000000000 },\n+  { 39.928320000000006, 5, 0.59999999999999964 },\n+  { 34.498240000000052, 5, 0.69999999999999929 },\n+  { 24.565759999999916, 5, 0.80000000000000071 },\n+  { 10.255679999999948, 5, 0.90000000000000036 },\n+  { -8.0000000000000000, 5, 1.0000000000000000 },\n+  { -29.423679999999933, 5, 1.0999999999999996 },\n+  { -52.853759999999838, 5, 1.1999999999999993 },\n+  { -76.706240000000179, 5, 1.3000000000000007 },\n+  { -98.936320000000080, 5, 1.4000000000000004 },\n+  { -117.00000000000000, 5, 1.5000000000000000 },\n+  { -127.81567999999996, 5, 1.5999999999999996 },\n+  { -127.72576000000002, 5, 1.6999999999999993 },\n+  { -112.45823999999980, 5, 1.8000000000000007 },\n+  { -77.088319999999840, 5, 1.9000000000000004 },\n+  { -16.000000000000000, 5, 2.0000000000000000 },\n+  { 77.152319999999520, 5, 2.0999999999999996 },\n+  { 209.48223999999891, 5, 2.1999999999999993 },\n+  { 388.90976000000148, 5, 2.3000000000000007 },\n+  { 624.19968000000074, 5, 2.4000000000000004 },\n+  { 925.00000000000000, 5, 2.5000000000000000 },\n+  { 1301.8803199999984, 5, 2.5999999999999996 },\n+  { 1766.3702399999963, 5, 2.6999999999999993 },\n+  { 2330.9977600000047, 5, 2.8000000000000007 },\n+  { 3009.3276800000026, 5, 2.9000000000000004 },\n+  { 3816.0000000000000, 5, 3.0000000000000000 },\n+  { 4766.7683199999965, 5, 3.0999999999999996 },\n+  { 5878.5382399999908, 5, 3.1999999999999993 },\n+  { 7169.4057600000087, 5, 3.3000000000000007 },\n+  { 8658.6956800000080, 5, 3.4000000000000004 },\n+  { 10367.000000000000, 5, 3.5000000000000000 },\n+  { 12316.216319999992, 5, 3.5999999999999996 },\n+  { 14529.586239999979, 5, 3.6999999999999993 },\n+  { 17031.733760000021, 5, 3.8000000000000007 },\n+  { 19848.703680000013, 5, 3.9000000000000004 },\n+  { 23008.000000000000, 5, 4.0000000000000000 },\n+  { 26538.624319999992, 5, 4.0999999999999996 },\n+  { 30471.114239999963, 5, 4.1999999999999993 },\n+  { 34837.581760000037, 5, 4.3000000000000007 },\n+  { 39671.751680000008, 5, 4.4000000000000004 },\n+  { 45009.000000000000, 5, 4.5000000000000000 },\n+  { 50886.392319999970, 5, 4.5999999999999996 },\n+  { 57342.722239999952, 5, 4.6999999999999993 },\n+  { 64418.549760000053, 5, 4.8000000000000007 },\n+  { 72156.239680000028, 5, 4.9000000000000004 },\n+  { 80600.000000000000, 5, 5.0000000000000000 },\n+  { 89795.920319999976, 5, 5.0999999999999996 },\n+  { 99792.010239999945, 5, 5.1999999999999993 },\n+  { 110638.23776000006, 5, 5.3000000000000007 },\n+  { 122386.56768000004, 5, 5.4000000000000004 },\n+  { 135091.00000000000, 5, 5.5000000000000000 },\n+  { 148807.60831999997, 5, 5.5999999999999996 },\n+  { 163594.57823999992, 5, 5.6999999999999993 },\n+  { 179512.24576000011, 5, 5.8000000000000007 },\n+  { 196623.13568000006, 5, 5.9000000000000004 },\n+  { 214992.00000000000, 5, 6.0000000000000000 },\n+  { 234685.85632000031, 5, 6.1000000000000014 },\n+  { 255774.02623999983, 5, 6.1999999999999993 },\n+  { 278328.17376000021, 5, 6.3000000000000007 },\n+  { 302422.34367999958, 5, 6.3999999999999986 },\n+  { 328133.00000000000, 5, 6.5000000000000000 },\n+  { 355539.06432000035, 5, 6.6000000000000014 },\n+  { 384721.95423999976, 5, 6.6999999999999993 },\n+  { 415765.62176000018, 5, 6.8000000000000007 },\n+  { 448756.59167999960, 5, 6.8999999999999986 },\n+  { 483784.00000000000, 5, 7.0000000000000000 },\n+  { 520939.63232000044, 5, 7.1000000000000014 },\n+  { 560317.96223999979, 5, 7.1999999999999993 },\n+  { 602016.18976000033, 5, 7.3000000000000007 },\n+  { 646134.27967999945, 5, 7.3999999999999986 },\n+  { 692775.00000000000, 5, 7.5000000000000000 },\n+  { 742043.96032000054, 5, 7.6000000000000014 },\n+  { 794049.65023999964, 5, 7.6999999999999993 },\n+  { 848903.47776000027, 5, 7.8000000000000007 },\n+  { 906719.80767999915, 5, 7.8999999999999986 },\n+  { 967616.00000000000, 5, 8.0000000000000000 },\n+  { 1031712.4483200011, 5, 8.1000000000000014 },\n+  { 1099132.6182399995, 5, 8.1999999999999993 },\n+  { 1170003.0857600006, 5, 8.3000000000000007 },\n+  { 1244453.5756799988, 5, 8.3999999999999986 },\n+  { 1322617.0000000000, 5, 8.5000000000000000 },\n+  { 1404629.4963200013, 5, 8.6000000000000014 },\n+  { 1490630.4662399990, 5, 8.6999999999999993 },\n+  { 1580762.6137600006, 5, 8.8000000000000007 },\n+  { 1675171.9836799989, 5, 8.8999999999999986 },\n+  { 1774008.0000000000, 5, 9.0000000000000000 },\n+  { 1877423.5043200015, 5, 9.1000000000000014 },\n+  { 1985574.7942399993, 5, 9.1999999999999993 },\n+  { 2098621.6617600010, 5, 9.3000000000000007 },\n+  { 2216727.4316799981, 5, 9.3999999999999986 },\n+  { 2340059.0000000000, 5, 9.5000000000000000 },\n+  { 2468786.8723200019, 5, 9.6000000000000014 },\n+  { 2603085.2022399991, 5, 9.6999999999999993 },\n+  { 2743131.8297600015, 5, 9.8000000000000007 },\n+  { 2889108.3196799983, 5, 9.8999999999999986 },\n+  { 3041200.0000000000, 5, 10.000000000000000 },\n+};\n+const double toler004 = 2.5000000000000020e-13;\n+\n+// Test data for n=10.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_hermite<double>\n+data005[201] =\n+{\n+  { 8093278209760.0000, 10, -10.000000000000000 },\n+  { 7282867075495.3066, 10, -9.9000000000000004 },\n+  { 6545846221520.6768, 10, -9.8000000000000007 },\n+  { 5876279006180.6377, 10, -9.6999999999999993 },\n+  { 5268651052510.4668, 10, -9.5999999999999996 },\n+  { 4717844376391.0000, 10, -9.5000000000000000 },\n+  { 4219112842239.1147, 10, -9.4000000000000004 },\n+  { 3768058891466.0469, 10, -9.3000000000000007 },\n+  { 3360611490639.0889, 10, -9.1999999999999993 },\n+  { 2993005247949.7607, 10, -9.0999999999999996 },\n+  { 2661760648224.0000, 10, -9.0000000000000000 },\n+  { 2363665358307.8496, 10, -8.9000000000000004 },\n+  { 2095756556225.3428, 10, -8.8000000000000007 },\n+  { 1855304239034.7983, 10, -8.6999999999999993 },\n+  { 1639795465805.4746, 10, -8.5999999999999996 },\n+  { 1446919493599.0000, 10, -8.5000000000000000 },\n+  { 1274553765769.7463, 10, -8.4000000000000004 },\n+  { 1120750713295.2778, 10, -8.3000000000000007 },\n+  { 983725331213.07190, 10, -8.1999999999999993 },\n+  { 861843493572.90051, 10, -8.0999999999999996 },\n+  { 753610971616.00000, 10, -8.0000000000000000 },\n+  { 657663121163.02454, 10, -7.9000000000000004 },\n+  { 572755206432.81335, 10, -7.7999999999999998 },\n+  { 497753328723.87518, 10, -7.7000000000000002 },\n+  { 431625929570.40063, 10, -7.5999999999999996 },\n+  { 373435839135.00000, 10, -7.5000000000000000 },\n+  { 322332841721.55731, 10, -7.4000000000000004 },\n+  { 277546731384.01782, 10, -7.2999999999999998 },\n+  { 238380831670.89990, 10, -7.2000000000000002 },\n+  { 204205954581.24731, 10, -7.0999999999999996 },\n+  { 174454774816.00000, 10, -7.0000000000000000 },\n+  { 148616596389.67230, 10, -6.9000000000000004 },\n+  { 126232489621.23923, 10, -6.7999999999999998 },\n+  { 106890777450.54663, 10, -6.7000000000000002 },\n+  { 90222850927.787979, 10, -6.5999999999999996 },\n+  { 75899294599.000000, 10, -6.5000000000000000 },\n+  { 63626303360.468109, 10, -6.4000000000000004 },\n+  { 53142373179.806053, 10, -6.2999999999999998 },\n+  { 44215248881.625534, 10, -6.2000000000000002 },\n+  { 36639112971.527679, 10, -6.0999999999999996 },\n+  { 30232000224.000000, 10, -6.0000000000000000 },\n+  { 24833423488.050617, 10, -5.9000000000000004 },\n+  { 20302196869.444584, 10, -5.7999999999999998 },\n+  { 16514443130.579359, 10, -5.7000000000000002 },\n+  { 13361772808.732477, 10, -5.5999999999999996 },\n+  { 10749623191.000000, 10, -5.5000000000000000 },\n+  { 8595745900.0898170, 10, -5.4000000000000004 },\n+  { 6828832439.6160822, 10, -5.2999999999999998 },\n+  { 5387267621.0259018, 10, -5.2000000000000002 },\n+  { 4218001347.1524582, 10, -5.0999999999999996 },\n+  { 3275529760.0000000, 10, -5.0000000000000000 },\n+  { 2520977273.0966806, 10, -4.9000000000000004 },\n+  { 1921271501.9744270, 10, -4.7999999999999998 },\n+  { 1448403580.4203825, 10, -4.7000000000000002 },\n+  { 1078766805.4651456, 10, -4.5999999999999996 },\n+  { 792566991.00000000, 10, -4.5000000000000000 },\n+  { 573298328.81993556, 10, -4.4000000000000004 },\n+  { 407278957.14375639, 10, -4.2999999999999998 },\n+  { 283240820.63788313, 10, -4.2000000000000002 },\n+  { 191968773.03860721, 10, -4.0999999999999996 },\n+  { 125984224.00000000, 10, -4.0000000000000000 },\n+  { 79268966.162877649, 10, -3.9000000000000004 },\n+  { 47025137.016035721, 10, -3.7999999999999998 },\n+  { 25467573.275709353, 10, -3.7000000000000002 },\n+  { 11645103.614666298, 10, -3.5999999999999996 },\n+  { 3287599.0000000000, 10, -3.5000000000000000 },\n+  { -1324140.9798373245, 10, -3.4000000000000004 },\n+  { -3468342.2313268245, 10, -3.2999999999999998 },\n+  { -4074495.5241857050, 10, -3.2000000000000002 },\n+  { -3800107.4878923763, 10, -3.0999999999999996 },\n+  { -3093984.0000000000, 10, -3.0000000000000000 },\n+  { -2247873.5653938209, 10, -2.9000000000000004 },\n+  { -1438117.1978829810, 10, -2.7999999999999998 },\n+  { -758781.93281034287, 10, -2.7000000000000002 },\n+  { -247597.05012469599, 10, -2.5999999999999996 },\n+  { 94135.000000000000, 10, -2.5000000000000000 },\n+  { 286617.47398410190, 10, -2.4000000000000004 },\n+  { 360718.79745525768, 10, -2.2999999999999998 },\n+  { 350419.82826741762, 10, -2.2000000000000002 },\n+  { 287863.09027338214, 10, -2.0999999999999996 },\n+  { 200416.00000000000, 10, -2.0000000000000000 },\n+  { 109249.22783242268, 10, -1.9000000000000004 },\n+  { 29012.094015898125, 10, -1.8000000000000007 },\n+  { -31740.330680422732, 10, -1.6999999999999993 },\n+  { -69648.597834137676, 10, -1.5999999999999996 },\n+  { -85401.000000000000, 10, -1.5000000000000000 },\n+  { -82507.675752857642, 10, -1.4000000000000004 },\n+  { -66123.413033062563, 10, -1.3000000000000007 },\n+  { -42007.465141862223, 10, -1.1999999999999993 },\n+  { -15676.055823257526, 10, -1.0999999999999996 },\n+  { 8224.0000000000000, 10, -1.0000000000000000 },\n+  { 26314.366684262357, 10, -0.90000000000000036 },\n+  { 36668.344916377559, 10, -0.80000000000000071 },\n+  { 38802.826035097583, 10, -0.69999999999999929 },\n+  { 33513.167890022363, 10, -0.59999999999999964 },\n+  { 22591.000000000000, 10, -0.50000000000000000 },\n+  { 8467.6907597824556, 10, -0.40000000000000036 },\n+  { -6173.8524877822965, 10, -0.30000000000000071 },\n+  { -18778.856957542470, 10, -0.19999999999999929 },\n+  { -27256.158950297624, 10, -0.099999999999999645 },\n+  { -30240.000000000000, 10, 0.0000000000000000 },\n+  { -27256.158950297624, 10, 0.099999999999999645 },\n+  { -18778.856957542470, 10, 0.19999999999999929 },\n+  { -6173.8524877822965, 10, 0.30000000000000071 },\n+  { 8467.6907597824556, 10, 0.40000000000000036 },\n+  { 22591.000000000000, 10, 0.50000000000000000 },\n+  { 33513.167890022363, 10, 0.59999999999999964 },\n+  { 38802.826035097583, 10, 0.69999999999999929 },\n+  { 36668.344916377559, 10, 0.80000000000000071 },\n+  { 26314.366684262357, 10, 0.90000000000000036 },\n+  { 8224.0000000000000, 10, 1.0000000000000000 },\n+  { -15676.055823257526, 10, 1.0999999999999996 },\n+  { -42007.465141862223, 10, 1.1999999999999993 },\n+  { -66123.413033062563, 10, 1.3000000000000007 },\n+  { -82507.675752857642, 10, 1.4000000000000004 },\n+  { -85401.000000000000, 10, 1.5000000000000000 },\n+  { -69648.597834137676, 10, 1.5999999999999996 },\n+  { -31740.330680422732, 10, 1.6999999999999993 },\n+  { 29012.094015898125, 10, 1.8000000000000007 },\n+  { 109249.22783242268, 10, 1.9000000000000004 },\n+  { 200416.00000000000, 10, 2.0000000000000000 },\n+  { 287863.09027338214, 10, 2.0999999999999996 },\n+  { 350419.82826741732, 10, 2.1999999999999993 },\n+  { 360718.79745525745, 10, 2.3000000000000007 },\n+  { 286617.47398410190, 10, 2.4000000000000004 },\n+  { 94135.000000000000, 10, 2.5000000000000000 },\n+  { -247597.05012469599, 10, 2.5999999999999996 },\n+  { -758781.93281033845, 10, 2.6999999999999993 },\n+  { -1438117.1978829878, 10, 2.8000000000000007 },\n+  { -2247873.5653938209, 10, 2.9000000000000004 },\n+  { -3093984.0000000000, 10, 3.0000000000000000 },\n+  { -3800107.4878923763, 10, 3.0999999999999996 },\n+  { -4074495.5241857003, 10, 3.1999999999999993 },\n+  { -3468342.2313268133, 10, 3.3000000000000007 },\n+  { -1324140.9798373245, 10, 3.4000000000000004 },\n+  { 3287599.0000000000, 10, 3.5000000000000000 },\n+  { 11645103.614666298, 10, 3.5999999999999996 },\n+  { 25467573.275709212, 10, 3.6999999999999993 },\n+  { 47025137.016035900, 10, 3.8000000000000007 },\n+  { 79268966.162877649, 10, 3.9000000000000004 },\n+  { 125984224.00000000, 10, 4.0000000000000000 },\n+  { 191968773.03860721, 10, 4.0999999999999996 },\n+  { 283240820.63788199, 10, 4.1999999999999993 },\n+  { 407278957.14375770, 10, 4.3000000000000007 },\n+  { 573298328.81993556, 10, 4.4000000000000004 },\n+  { 792566991.00000000, 10, 4.5000000000000000 },\n+  { 1078766805.4651456, 10, 4.5999999999999996 },\n+  { 1448403580.4203794, 10, 4.6999999999999993 },\n+  { 1921271501.9744320, 10, 4.8000000000000007 },\n+  { 2520977273.0966806, 10, 4.9000000000000004 },\n+  { 3275529760.0000000, 10, 5.0000000000000000 },\n+  { 4218001347.1524582, 10, 5.0999999999999996 },\n+  { 5387267621.0258913, 10, 5.1999999999999993 },\n+  { 6828832439.6160927, 10, 5.3000000000000007 },\n+  { 8595745900.0898170, 10, 5.4000000000000004 },\n+  { 10749623191.000000, 10, 5.5000000000000000 },\n+  { 13361772808.732477, 10, 5.5999999999999996 },\n+  { 16514443130.579332, 10, 5.6999999999999993 },\n+  { 20302196869.444618, 10, 5.8000000000000007 },\n+  { 24833423488.050617, 10, 5.9000000000000004 },\n+  { 30232000224.000000, 10, 6.0000000000000000 },\n+  { 36639112971.527824, 10, 6.1000000000000014 },\n+  { 44215248881.625443, 10, 6.1999999999999993 },\n+  { 53142373179.806152, 10, 6.3000000000000007 },\n+  { 63626303360.467911, 10, 6.3999999999999986 },\n+  { 75899294599.000000, 10, 6.5000000000000000 },\n+  { 90222850927.788208, 10, 6.6000000000000014 },\n+  { 106890777450.54652, 10, 6.6999999999999993 },\n+  { 126232489621.23946, 10, 6.8000000000000007 },\n+  { 148616596389.67184, 10, 6.8999999999999986 },\n+  { 174454774816.00000, 10, 7.0000000000000000 },\n+  { 204205954581.24780, 10, 7.1000000000000014 },\n+  { 238380831670.89960, 10, 7.1999999999999993 },\n+  { 277546731384.01831, 10, 7.3000000000000007 },\n+  { 322332841721.55646, 10, 7.3999999999999986 },\n+  { 373435839135.00000, 10, 7.5000000000000000 },\n+  { 431625929570.40161, 10, 7.6000000000000014 },\n+  { 497753328723.87476, 10, 7.6999999999999993 },\n+  { 572755206432.81396, 10, 7.8000000000000007 },\n+  { 657663121163.02307, 10, 7.8999999999999986 },\n+  { 753610971616.00000, 10, 8.0000000000000000 },\n+  { 861843493572.90283, 10, 8.1000000000000014 },\n+  { 983725331213.07190, 10, 8.1999999999999993 },\n+  { 1120750713295.2778, 10, 8.3000000000000007 },\n+  { 1274553765769.7439, 10, 8.3999999999999986 },\n+  { 1446919493599.0000, 10, 8.5000000000000000 },\n+  { 1639795465805.4785, 10, 8.6000000000000014 },\n+  { 1855304239034.7983, 10, 8.6999999999999993 },\n+  { 2095756556225.3428, 10, 8.8000000000000007 },\n+  { 2363665358307.8442, 10, 8.8999999999999986 },\n+  { 2661760648224.0000, 10, 9.0000000000000000 },\n+  { 2993005247949.7671, 10, 9.1000000000000014 },\n+  { 3360611490639.0889, 10, 9.1999999999999993 },\n+  { 3768058891466.0469, 10, 9.3000000000000007 },\n+  { 4219112842239.1055, 10, 9.3999999999999986 },\n+  { 4717844376391.0000, 10, 9.5000000000000000 },\n+  { 5268651052510.4785, 10, 9.6000000000000014 },\n+  { 5876279006180.6377, 10, 9.6999999999999993 },\n+  { 6545846221520.6768, 10, 9.8000000000000007 },\n+  { 7282867075495.2949, 10, 9.8999999999999986 },\n+  { 8093278209760.0000, 10, 10.000000000000000 },\n+};\n+const double toler005 = 2.5000000000000020e-13;\n+\n+// Test data for n=20.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_hermite<double>\n+data006[201] =\n+{\n+  { 3.6536710970888030e+25, 20, -10.000000000000000 },\n+  { 2.9174932703098834e+25, 20, -9.9000000000000004 },\n+  { 2.3228769039548404e+25, 20, -9.8000000000000007 },\n+  { 1.8439144509496016e+25, 20, -9.6999999999999993 },\n+  { 1.4591971834545420e+25, 20, -9.5999999999999996 },\n+  { 1.1510764882450827e+25, 20, -9.5000000000000000 },\n+  { 9.0503941245991605e+24, 20, -9.4000000000000004 },\n+  { 7.0918188910312152e+24, 20, -9.3000000000000007 },\n+  { 5.5376531405202033e+24, 20, -9.1999999999999993 },\n+  { 4.3084410724035914e+24, 20, -9.0999999999999996 },\n+  { 3.3395360269524137e+24, 20, -9.0000000000000000 },\n+  { 2.5784910430831484e+24, 20, -8.9000000000000004 },\n+  { 1.9828824261062853e+24, 20, -8.8000000000000007 },\n+  { 1.5184989558235974e+24, 20, -8.6999999999999993 },\n+  { 1.1578391431515818e+24, 20, -8.5999999999999996 },\n+  { 8.7886740525023878e+23, 20, -8.5000000000000000 },\n+  { 6.6398733801206072e+23, 20, -8.4000000000000004 },\n+  { 4.9919656538201190e+23, 20, -8.3000000000000007 },\n+  { 3.7339306542317994e+23, 20, -8.1999999999999993 },\n+  { 2.7780752653950559e+23, 20, -8.0999999999999996 },\n+  { 2.0554027373991249e+23, 20, -8.0000000000000000 },\n+  { 1.5118471231121695e+23, 20, -7.9000000000000004 },\n+  { 1.1052214218386250e+23, 20, -7.7999999999999998 },\n+  { 8.0275268594719504e+22, 20, -7.7000000000000002 },\n+  { 5.7909832934009042e+22, 20, -7.5999999999999996 },\n+  { 4.1475563998692745e+22, 20, -7.5000000000000000 },\n+  { 2.9479149729249250e+22, 20, -7.4000000000000004 },\n+  { 2.0783192485964573e+22, 20, -7.2999999999999998 },\n+  { 1.4526171451238503e+22, 20, -7.2000000000000002 },\n+  { 1.0059323685871305e+22, 20, -7.0999999999999996 },\n+  { 6.8970965604502329e+21, 20, -7.0000000000000000 },\n+  { 4.6784410379528280e+21, 20, -6.9000000000000004 },\n+  { 3.1367268160419670e+21, 20, -6.7999999999999998 },\n+  { 2.0764831558419748e+21, 20, -6.7000000000000002 },\n+  { 1.3555174744148132e+21, 20, -6.5999999999999996 },\n+  { 8.7124954970091579e+20, 20, -6.5000000000000000 },\n+  { 5.5033278133788108e+20, 20, -6.4000000000000004 },\n+  { 3.4082412197533739e+20, 20, -6.2999999999999998 },\n+  { 2.0631845648712185e+20, 20, -6.2000000000000002 },\n+  { 1.2158762212269028e+20, 20, -6.0999999999999996 },\n+  { 6.9364200641629315e+19, 20, -6.0000000000000000 },\n+  { 3.7990093270095905e+19, 20, -5.9000000000000004 },\n+  { 1.9713403927925858e+19, 20, -5.7999999999999998 },\n+  { 9.4673798488533340e+18, 20, -5.7000000000000002 },\n+  { 4.0046403628787825e+18, 20, -5.5999999999999996 },\n+  { 1.2907686705724293e+18, 20, -5.5000000000000000 },\n+  { 85277679782823936., 20, -5.4000000000000004 },\n+  { -3.4359547179069376e+17, 20, -5.2999999999999998 },\n+  { -4.0970873501577555e+17, 20, -5.2000000000000002 },\n+  { -3.3419585613348250e+17, 20, -5.0999999999999996 },\n+  { -2.2571776716382720e+17, 20, -5.0000000000000000 },\n+  { -1.3051120203565566e+17, 20, -4.9000000000000004 },\n+  { -62555669197021992., 20, -4.7999999999999998 },\n+  { -20974173561010048., 20, -4.7000000000000002 },\n+  { 519073301695656.00, 20, -4.5999999999999996 },\n+  { 8939556693761121.0, 20, -4.5000000000000000 },\n+  { 10070625675125180., 20, -4.4000000000000004 },\n+  { 7940371996960715.0, 20, -4.2999999999999998 },\n+  { 4973623686173568.0, 20, -4.2000000000000002 },\n+  { 2389023282480410.0, 20, -4.0999999999999996 },\n+  { 619678016654336.00, 20, -4.0000000000000000 },\n+  { -339773491011946.00, 20, -3.9000000000000004 },\n+  { -687467334428204.38, 20, -3.7999999999999998 },\n+  { -663019129550482.75, 20, -3.7000000000000002 },\n+  { -469585152350670.25, 20, -3.5999999999999996 },\n+  { -245659781875039.00, 20, -3.5000000000000000 },\n+  { -66042773886778.938, 20, -3.4000000000000004 },\n+  { 43442261337436.312, 20, -3.2999999999999998 },\n+  { 87626632986465.375, 20, -3.2000000000000002 },\n+  { 85786202388511.375, 20, -3.0999999999999996 },\n+  { 59990281399296.000, 20, -3.0000000000000000 },\n+  { 28343496696718.070, 20, -2.9000000000000004 },\n+  { 2296898915036.0859, 20, -2.7999999999999998 },\n+  { -13249381789941.502, 20, -2.7000000000000002 },\n+  { -18328180426561.059, 20, -2.5999999999999996 },\n+  { -15799429886575.000, 20, -2.5000000000000000 },\n+  { -9442592050214.3027, 20, -2.4000000000000004 },\n+  { -2602375356373.2393, 20, -2.2999999999999998 },\n+  { 2521759315047.8428, 20, -2.2000000000000002 },\n+  { 5027779307352.6660, 20, -2.0999999999999996 },\n+  { 5080118660096.0000, 20, -2.0000000000000000 },\n+  { 3490463276000.5425, 20, -1.9000000000000004 },\n+  { 1277254793997.1128, 20, -1.8000000000000007 },\n+  { -682119355279.28784, 20, -1.6999999999999993 },\n+  { -1851544254412.3203, 20, -1.5999999999999996 },\n+  { -2085387081039.0000, 20, -1.5000000000000000 },\n+  { -1559402933581.5054, 20, -1.4000000000000004 },\n+  { -634265763221.87231, 20, -1.3000000000000007 },\n+  { 295481874887.33429, 20, -1.1999999999999993 },\n+  { 924603483429.34241, 20, -1.0999999999999996 },\n+  { 1107214478336.0000, 20, -1.0000000000000000 },\n+  { 867235623835.12463, 20, -0.90000000000000036 },\n+  { 358848462745.15466, 20, -0.80000000000000071 },\n+  { -202944086511.71936, 20, -0.69999999999999929 },\n+  { -617730863561.32617, 20, -0.59999999999999964 },\n+  { -759627879679.00000, 20, -0.50000000000000000 },\n+  { -607451728035.03271, 20, -0.40000000000000036 },\n+  { -240424854484.42111, 20, -0.30000000000000071 },\n+  { 195759209122.61337, 20, -0.19999999999999929 },\n+  { 540334019322.52014, 20, -0.099999999999999645 },\n+  { 670442572800.00000, 20, 0.0000000000000000 },\n+  { 540334019322.52014, 20, 0.099999999999999645 },\n+  { 195759209122.61337, 20, 0.19999999999999929 },\n+  { -240424854484.42111, 20, 0.30000000000000071 },\n+  { -607451728035.03271, 20, 0.40000000000000036 },\n+  { -759627879679.00000, 20, 0.50000000000000000 },\n+  { -617730863561.32617, 20, 0.59999999999999964 },\n+  { -202944086511.71936, 20, 0.69999999999999929 },\n+  { 358848462745.15466, 20, 0.80000000000000071 },\n+  { 867235623835.12463, 20, 0.90000000000000036 },\n+  { 1107214478336.0000, 20, 1.0000000000000000 },\n+  { 924603483429.34241, 20, 1.0999999999999996 },\n+  { 295481874887.33429, 20, 1.1999999999999993 },\n+  { -634265763221.87231, 20, 1.3000000000000007 },\n+  { -1559402933581.5054, 20, 1.4000000000000004 },\n+  { -2085387081039.0000, 20, 1.5000000000000000 },\n+  { -1851544254412.3203, 20, 1.5999999999999996 },\n+  { -682119355279.28784, 20, 1.6999999999999993 },\n+  { 1277254793997.1128, 20, 1.8000000000000007 },\n+  { 3490463276000.5425, 20, 1.9000000000000004 },\n+  { 5080118660096.0000, 20, 2.0000000000000000 },\n+  { 5027779307352.6660, 20, 2.0999999999999996 },\n+  { 2521759315047.8770, 20, 2.1999999999999993 },\n+  { -2602375356373.2969, 20, 2.3000000000000007 },\n+  { -9442592050214.3027, 20, 2.4000000000000004 },\n+  { -15799429886575.000, 20, 2.5000000000000000 },\n+  { -18328180426561.059, 20, 2.5999999999999996 },\n+  { -13249381789941.586, 20, 2.6999999999999993 },\n+  { 2296898915036.2812, 20, 2.8000000000000007 },\n+  { 28343496696718.070, 20, 2.9000000000000004 },\n+  { 59990281399296.000, 20, 3.0000000000000000 },\n+  { 85786202388511.375, 20, 3.0999999999999996 },\n+  { 87626632986465.438, 20, 3.1999999999999993 },\n+  { 43442261337435.672, 20, 3.3000000000000007 },\n+  { -66042773886778.938, 20, 3.4000000000000004 },\n+  { -245659781875039.00, 20, 3.5000000000000000 },\n+  { -469585152350670.25, 20, 3.5999999999999996 },\n+  { -663019129550482.25, 20, 3.6999999999999993 },\n+  { -687467334428203.38, 20, 3.8000000000000007 },\n+  { -339773491011946.00, 20, 3.9000000000000004 },\n+  { 619678016654336.00, 20, 4.0000000000000000 },\n+  { 2389023282480410.0, 20, 4.0999999999999996 },\n+  { 4973623686173539.0, 20, 4.1999999999999993 },\n+  { 7940371996960741.0, 20, 4.3000000000000007 },\n+  { 10070625675125180., 20, 4.4000000000000004 },\n+  { 8939556693761121.0, 20, 4.5000000000000000 },\n+  { 519073301695656.00, 20, 4.5999999999999996 },\n+  { -20974173561009776., 20, 4.6999999999999993 },\n+  { -62555669197022528., 20, 4.8000000000000007 },\n+  { -1.3051120203565566e+17, 20, 4.9000000000000004 },\n+  { -2.2571776716382720e+17, 20, 5.0000000000000000 },\n+  { -3.3419585613348250e+17, 20, 5.0999999999999996 },\n+  { -4.0970873501577562e+17, 20, 5.1999999999999993 },\n+  { -3.4359547179069216e+17, 20, 5.3000000000000007 },\n+  { 85277679782823936., 20, 5.4000000000000004 },\n+  { 1.2907686705724293e+18, 20, 5.5000000000000000 },\n+  { 4.0046403628787825e+18, 20, 5.5999999999999996 },\n+  { 9.4673798488532767e+18, 20, 5.6999999999999993 },\n+  { 1.9713403927925973e+19, 20, 5.8000000000000007 },\n+  { 3.7990093270095905e+19, 20, 5.9000000000000004 },\n+  { 6.9364200641629315e+19, 20, 6.0000000000000000 },\n+  { 1.2158762212269156e+20, 20, 6.1000000000000014 },\n+  { 2.0631845648712086e+20, 20, 6.1999999999999993 },\n+  { 3.4082412197533902e+20, 20, 6.3000000000000007 },\n+  { 5.5033278133787696e+20, 20, 6.3999999999999986 },\n+  { 8.7124954970091579e+20, 20, 6.5000000000000000 },\n+  { 1.3555174744148243e+21, 20, 6.6000000000000014 },\n+  { 2.0764831558419680e+21, 20, 6.6999999999999993 },\n+  { 3.1367268160419775e+21, 20, 6.8000000000000007 },\n+  { 4.6784410379527966e+21, 20, 6.8999999999999986 },\n+  { 6.8970965604502329e+21, 20, 7.0000000000000000 },\n+  { 1.0059323685871368e+22, 20, 7.1000000000000014 },\n+  { 1.4526171451238465e+22, 20, 7.1999999999999993 },\n+  { 2.0783192485964666e+22, 20, 7.3000000000000007 },\n+  { 2.9479149729249048e+22, 20, 7.3999999999999986 },\n+  { 4.1475563998692745e+22, 20, 7.5000000000000000 },\n+  { 5.7909832934009378e+22, 20, 7.6000000000000014 },\n+  { 8.0275268594719286e+22, 20, 7.6999999999999993 },\n+  { 1.1052214218386286e+23, 20, 7.8000000000000007 },\n+  { 1.5118471231121604e+23, 20, 7.8999999999999986 },\n+  { 2.0554027373991249e+23, 20, 8.0000000000000000 },\n+  { 2.7780752653950703e+23, 20, 8.1000000000000014 },\n+  { 3.7339306542317994e+23, 20, 8.1999999999999993 },\n+  { 4.9919656538201190e+23, 20, 8.3000000000000007 },\n+  { 6.6398733801205790e+23, 20, 8.3999999999999986 },\n+  { 8.7886740525023878e+23, 20, 8.5000000000000000 },\n+  { 1.1578391431515869e+24, 20, 8.6000000000000014 },\n+  { 1.5184989558235974e+24, 20, 8.6999999999999993 },\n+  { 1.9828824261062853e+24, 20, 8.8000000000000007 },\n+  { 2.5784910430831355e+24, 20, 8.8999999999999986 },\n+  { 3.3395360269524137e+24, 20, 9.0000000000000000 },\n+  { 4.3084410724036123e+24, 20, 9.1000000000000014 },\n+  { 5.5376531405202033e+24, 20, 9.1999999999999993 },\n+  { 7.0918188910312152e+24, 20, 9.3000000000000007 },\n+  { 9.0503941245991197e+24, 20, 9.3999999999999986 },\n+  { 1.1510764882450827e+25, 20, 9.5000000000000000 },\n+  { 1.4591971834545491e+25, 20, 9.6000000000000014 },\n+  { 1.8439144509496016e+25, 20, 9.6999999999999993 },\n+  { 2.3228769039548404e+25, 20, 9.8000000000000007 },\n+  { 2.9174932703098731e+25, 20, 9.8999999999999986 },\n+  { 3.6536710970888030e+25, 20, 10.000000000000000 },\n+};\n+const double toler006 = 2.5000000000000020e-13;\n+\n+// Test data for n=50.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_hermite<double>\n+data007[201] =\n+{\n+  { 1.3516643049819314e+61, 50, -10.000000000000000 },\n+  { 5.8466703062266110e+60, 50, -9.9000000000000004 },\n+  { 2.4344814863741168e+60, 50, -9.8000000000000007 },\n+  { 9.6739828066585787e+59, 50, -9.6999999999999993 },\n+  { 3.6194312967780128e+59, 50, -9.5999999999999996 },\n+  { 1.2454022521696361e+59, 50, -9.5000000000000000 },\n+  { 3.7546881918013145e+58, 50, -9.4000000000000004 },\n+  { 8.6500158470917270e+57, 50, -9.3000000000000007 },\n+  { 5.3163209769527426e+56, 50, -9.1999999999999993 },\n+  { -9.7863165370930473e+56, 50, -9.0999999999999996 },\n+  { -8.0563930902368911e+56, 50, -9.0000000000000000 },\n+  { -4.3145937406321933e+56, 50, -8.9000000000000004 },\n+  { -1.8210771577645630e+56, 50, -8.8000000000000007 },\n+  { -6.0082225302289557e+55, 50, -8.6999999999999993 },\n+  { -1.2392013720948442e+55, 50, -8.5999999999999996 },\n+  { 1.5935887905806307e+54, 50, -8.5000000000000000 },\n+  { 3.4325365049909381e+54, 50, -8.4000000000000004 },\n+  { 2.2368641272300899e+54, 50, -8.3000000000000007 },\n+  { 1.0009712198862341e+54, 50, -8.1999999999999993 },\n+  { 3.0699480272357337e+53, 50, -8.0999999999999996 },\n+  { 2.9492797132685063e+52, 50, -8.0000000000000000 },\n+  { -3.9982544106300062e+52, 50, -7.9000000000000004 },\n+  { -3.5678031330023779e+52, 50, -7.7999999999999998 },\n+  { -1.8076371748762468e+52, 50, -7.7000000000000002 },\n+  { -5.7887622198708925e+51, 50, -7.5999999999999996 },\n+  { -3.5808467693113330e+50, 50, -7.5000000000000000 },\n+  { 1.0219511166806405e+51, 50, -7.4000000000000004 },\n+  { 8.4241263694549560e+50, 50, -7.2999999999999998 },\n+  { 3.9143899315095369e+50, 50, -7.2000000000000002 },\n+  { 9.3178966245756654e+49, 50, -7.0999999999999996 },\n+  { -2.4714855983436561e+49, 50, -7.0000000000000000 },\n+  { -4.1428217272044600e+49, 50, -6.9000000000000004 },\n+  { -2.4864980414057334e+49, 50, -6.7999999999999998 },\n+  { -8.0684355476447979e+48, 50, -6.7000000000000002 },\n+  { 4.2529238530179841e+47, 50, -6.5999999999999996 },\n+  { 2.4709663739849681e+48, 50, -6.5000000000000000 },\n+  { 1.7500305481204125e+48, 50, -6.4000000000000004 },\n+  { 6.3834558285146007e+47, 50, -6.2999999999999998 },\n+  { -1.1477672402381055e+46, 50, -6.2000000000000002 },\n+  { -1.9304630401841983e+47, 50, -6.0999999999999996 },\n+  { -1.4355266959903589e+47, 50, -6.0000000000000000 },\n+  { -5.1482200905566146e+46, 50, -5.9000000000000004 },\n+  { 4.6577356827463283e+45, 50, -5.7999999999999998 },\n+  { 1.9676012349652066e+46, 50, -5.7000000000000002 },\n+  { 1.3630554018675846e+46, 50, -5.5999999999999996 },\n+  { 4.0920495328093750e+45, 50, -5.5000000000000000 },\n+  { -1.3680638882145392e+45, 50, -5.4000000000000004 },\n+  { -2.4465265559935436e+45, 50, -5.2999999999999998 },\n+  { -1.4270495629649456e+45, 50, -5.2000000000000002 },\n+  { -2.4845518743338381e+44, 50, -5.0999999999999996 },\n+  { 3.1953926721271990e+44, 50, -5.0000000000000000 },\n+  { 3.4169399444879600e+44, 50, -4.9000000000000004 },\n+  { 1.4896819114978755e+44, 50, -4.7999999999999998 },\n+  { -1.3078430866968493e+43, 50, -4.7000000000000002 },\n+  { -6.8449168639700716e+43, 50, -4.5999999999999996 },\n+  { -4.9181639709997461e+43, 50, -4.5000000000000000 },\n+  { -1.1434943490345182e+43, 50, -4.4000000000000004 },\n+  { 1.1214652543461432e+43, 50, -4.2999999999999998 },\n+  { 1.3843548994480608e+43, 50, -4.2000000000000002 },\n+  { 6.3349790205303262e+42, 50, -4.0999999999999996 },\n+  { -9.5599640670553907e+41, 50, -4.0000000000000000 },\n+  { -3.6202558158287927e+42, 50, -3.9000000000000004 },\n+  { -2.5206461734624493e+42, 50, -3.7999999999999998 },\n+  { -3.7818051510732439e+41, 50, -3.7000000000000002 },\n+  { 8.8921371165335050e+41, 50, -3.5999999999999996 },\n+  { 9.2055485763852770e+41, 50, -3.5000000000000000 },\n+  { 3.2535765707283020e+41, 50, -3.4000000000000004 },\n+  { -1.9358941418244578e+41, 50, -3.2999999999999998 },\n+  { -3.3076282847915670e+41, 50, -3.2000000000000002 },\n+  { -1.7764977066639160e+41, 50, -3.0999999999999996 },\n+  { 2.6751882008697154e+40, 50, -3.0000000000000000 },\n+  { 1.2025382369996052e+41, 50, -2.9000000000000004 },\n+  { 8.8383035103557973e+40, 50, -2.7999999999999998 },\n+  { 7.7733606479641769e+39, 50, -2.7000000000000002 },\n+  { -4.4696811758713757e+40, 50, -2.5999999999999996 },\n+  { -4.3715062488963453e+40, 50, -2.5000000000000000 },\n+  { -1.1390080390575289e+40, 50, -2.4000000000000004 },\n+  { 1.6938519751181342e+40, 50, -2.2999999999999998 },\n+  { 2.2284509952956210e+40, 50, -2.2000000000000002 },\n+  { 9.0967994280570531e+39, 50, -2.0999999999999996 },\n+  { -6.4126677997472978e+39, 50, -2.0000000000000000 },\n+  { -1.1926839454034341e+40, 50, -1.9000000000000004 },\n+  { -6.5436654274699114e+39, 50, -1.8000000000000007 },\n+  { 2.2779499542550411e+39, 50, -1.6999999999999993 },\n+  { 6.7720530889699639e+39, 50, -1.5999999999999996 },\n+  { 4.6884851188034300e+39, 50, -1.5000000000000000 },\n+  { -5.9005001052557463e+38, 50, -1.4000000000000004 },\n+  { -4.1028320210430589e+39, 50, -1.3000000000000007 },\n+  { -3.4780049977083965e+39, 50, -1.1999999999999993 },\n+  { -1.3484918476373692e+38, 50, -1.0999999999999996 },\n+  { 2.6586815431645456e+39, 50, -1.0000000000000000 },\n+  { 2.7225429473661429e+39, 50, -0.90000000000000036 },\n+  { 4.7785441024951729e+38, 50, -0.80000000000000071 },\n+  { -1.8416784378790159e+39, 50, -0.69999999999999929 },\n+  { -2.2725918816693132e+39, 50, -0.59999999999999964 },\n+  { -6.7948375014926916e+38, 50, -0.50000000000000000 },\n+  { 1.3581645858905750e+39, 50, -0.40000000000000036 },\n+  { 2.0349661043040497e+39, 50, -0.30000000000000071 },\n+  { 8.5049248815817037e+38, 50, -0.19999999999999929 },\n+  { -1.0564542132990048e+39, 50, -0.099999999999999645 },\n+  { -1.9607814681608194e+39, 50, 0.0000000000000000 },\n+  { -1.0564542132990048e+39, 50, 0.099999999999999645 },\n+  { 8.5049248815817037e+38, 50, 0.19999999999999929 },\n+  { 2.0349661043040497e+39, 50, 0.30000000000000071 },\n+  { 1.3581645858905750e+39, 50, 0.40000000000000036 },\n+  { -6.7948375014926916e+38, 50, 0.50000000000000000 },\n+  { -2.2725918816693132e+39, 50, 0.59999999999999964 },\n+  { -1.8416784378790159e+39, 50, 0.69999999999999929 },\n+  { 4.7785441024951729e+38, 50, 0.80000000000000071 },\n+  { 2.7225429473661429e+39, 50, 0.90000000000000036 },\n+  { 2.6586815431645456e+39, 50, 1.0000000000000000 },\n+  { -1.3484918476373692e+38, 50, 1.0999999999999996 },\n+  { -3.4780049977083965e+39, 50, 1.1999999999999993 },\n+  { -4.1028320210430589e+39, 50, 1.3000000000000007 },\n+  { -5.9005001052557463e+38, 50, 1.4000000000000004 },\n+  { 4.6884851188034300e+39, 50, 1.5000000000000000 },\n+  { 6.7720530889699639e+39, 50, 1.5999999999999996 },\n+  { 2.2779499542550411e+39, 50, 1.6999999999999993 },\n+  { -6.5436654274699114e+39, 50, 1.8000000000000007 },\n+  { -1.1926839454034341e+40, 50, 1.9000000000000004 },\n+  { -6.4126677997472978e+39, 50, 2.0000000000000000 },\n+  { 9.0967994280570531e+39, 50, 2.0999999999999996 },\n+  { 2.2284509952956162e+40, 50, 2.1999999999999993 },\n+  { 1.6938519751181172e+40, 50, 2.3000000000000007 },\n+  { -1.1390080390575289e+40, 50, 2.4000000000000004 },\n+  { -4.3715062488963453e+40, 50, 2.5000000000000000 },\n+  { -4.4696811758713757e+40, 50, 2.5999999999999996 },\n+  { 7.7733606479635628e+39, 50, 2.6999999999999993 },\n+  { 8.8383035103558611e+40, 50, 2.8000000000000007 },\n+  { 1.2025382369996052e+41, 50, 2.9000000000000004 },\n+  { 2.6751882008697154e+40, 50, 3.0000000000000000 },\n+  { -1.7764977066639160e+41, 50, 3.0999999999999996 },\n+  { -3.3076282847915616e+41, 50, 3.1999999999999993 },\n+  { -1.9358941418244260e+41, 50, 3.3000000000000007 },\n+  { 3.2535765707283020e+41, 50, 3.4000000000000004 },\n+  { 9.2055485763852770e+41, 50, 3.5000000000000000 },\n+  { 8.8921371165335050e+41, 50, 3.5999999999999996 },\n+  { -3.7818051510730675e+41, 50, 3.6999999999999993 },\n+  { -2.5206461734624660e+42, 50, 3.8000000000000007 },\n+  { -3.6202558158287927e+42, 50, 3.9000000000000004 },\n+  { -9.5599640670553907e+41, 50, 4.0000000000000000 },\n+  { 6.3349790205303262e+42, 50, 4.0999999999999996 },\n+  { 1.3843548994480566e+43, 50, 4.1999999999999993 },\n+  { 1.1214652543461340e+43, 50, 4.3000000000000007 },\n+  { -1.1434943490345182e+43, 50, 4.4000000000000004 },\n+  { -4.9181639709997461e+43, 50, 4.5000000000000000 },\n+  { -6.8449168639700716e+43, 50, 4.5999999999999996 },\n+  { -1.3078430866969463e+43, 50, 4.6999999999999993 },\n+  { 1.4896819114978953e+44, 50, 4.8000000000000007 },\n+  { 3.4169399444879600e+44, 50, 4.9000000000000004 },\n+  { 3.1953926721271990e+44, 50, 5.0000000000000000 },\n+  { -2.4845518743338381e+44, 50, 5.0999999999999996 },\n+  { -1.4270495629649337e+45, 50, 5.1999999999999993 },\n+  { -2.4465265559935458e+45, 50, 5.3000000000000007 },\n+  { -1.3680638882145392e+45, 50, 5.4000000000000004 },\n+  { 4.0920495328093750e+45, 50, 5.5000000000000000 },\n+  { 1.3630554018675846e+46, 50, 5.5999999999999996 },\n+  { 1.9676012349652081e+46, 50, 5.6999999999999993 },\n+  { 4.6577356827460393e+45, 50, 5.8000000000000007 },\n+  { -5.1482200905566146e+46, 50, 5.9000000000000004 },\n+  { -1.4355266959903589e+47, 50, 6.0000000000000000 },\n+  { -1.9304630401841966e+47, 50, 6.1000000000000014 },\n+  { -1.1477672402384868e+46, 50, 6.1999999999999993 },\n+  { 6.3834558285146981e+47, 50, 6.3000000000000007 },\n+  { 1.7500305481203924e+48, 50, 6.3999999999999986 },\n+  { 2.4709663739849681e+48, 50, 6.5000000000000000 },\n+  { 4.2529238530171793e+47, 50, 6.6000000000000014 },\n+  { -8.0684355476446876e+48, 50, 6.6999999999999993 },\n+  { -2.4864980414057495e+49, 50, 6.8000000000000007 },\n+  { -4.1428217272044496e+49, 50, 6.8999999999999986 },\n+  { -2.4714855983436561e+49, 50, 7.0000000000000000 },\n+  { 9.3178966245760310e+49, 50, 7.1000000000000014 },\n+  { 3.9143899315095070e+50, 50, 7.1999999999999993 },\n+  { 8.4241263694549925e+50, 50, 7.3000000000000007 },\n+  { 1.0219511166806458e+51, 50, 7.3999999999999986 },\n+  { -3.5808467693113330e+50, 50, 7.5000000000000000 },\n+  { -5.7887622198710268e+51, 50, 7.6000000000000014 },\n+  { -1.8076371748762319e+52, 50, 7.6999999999999993 },\n+  { -3.5678031330023971e+52, 50, 7.8000000000000007 },\n+  { -3.9982544106300530e+52, 50, 7.8999999999999986 },\n+  { 2.9492797132685063e+52, 50, 8.0000000000000000 },\n+  { 3.0699480272358086e+53, 50, 8.1000000000000014 },\n+  { 1.0009712198862341e+54, 50, 8.1999999999999993 },\n+  { 2.2368641272300899e+54, 50, 8.3000000000000007 },\n+  { 3.4325365049909340e+54, 50, 8.3999999999999986 },\n+  { 1.5935887905806307e+54, 50, 8.5000000000000000 },\n+  { -1.2392013720948937e+55, 50, 8.6000000000000014 },\n+  { -6.0082225302289557e+55, 50, 8.6999999999999993 },\n+  { -1.8210771577645630e+56, 50, 8.8000000000000007 },\n+  { -4.3145937406321376e+56, 50, 8.8999999999999986 },\n+  { -8.0563930902368911e+56, 50, 9.0000000000000000 },\n+  { -9.7863165370930194e+56, 50, 9.1000000000000014 },\n+  { 5.3163209769527426e+56, 50, 9.1999999999999993 },\n+  { 8.6500158470917270e+57, 50, 9.3000000000000007 },\n+  { 3.7546881918012164e+58, 50, 9.3999999999999986 },\n+  { 1.2454022521696361e+59, 50, 9.5000000000000000 },\n+  { 3.6194312967780793e+59, 50, 9.6000000000000014 },\n+  { 9.6739828066585787e+59, 50, 9.6999999999999993 },\n+  { 2.4344814863741168e+60, 50, 9.8000000000000007 },\n+  { 5.8466703062265247e+60, 50, 9.8999999999999986 },\n+  { 1.3516643049819314e+61, 50, 10.000000000000000 },\n+};\n+const double toler007 = 2.5000000000000020e-13;\n+\n+// Test data for n=100.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_hermite<double>\n+data008[201] =\n+{\n+  { -1.8738689223256612e+115, 100, -10.000000000000000 },\n+  { -4.4232904120311186e+114, 100, -9.9000000000000004 },\n+  { 8.3761676654305186e+113, 100, -9.8000000000000007 },\n+  { 9.4857435427570856e+113, 100, -9.6999999999999993 },\n+  { 2.4904626130429828e+113, 100, -9.5999999999999996 },\n+  { -4.2265051766934789e+112, 100, -9.5000000000000000 },\n+  { -5.3374224541142079e+112, 100, -9.4000000000000004 },\n+  { -1.3977488190034162e+112, 100, -9.3000000000000007 },\n+  { 2.9686037583393142e+111, 100, -9.1999999999999993 },\n+  { 3.3341330166544008e+111, 100, -9.0999999999999996 },\n+  { 7.7294136683043515e+110, 100, -9.0000000000000000 },\n+  { -2.6071876743328352e+110, 100, -8.9000000000000004 },\n+  { -2.2669773300293168e+110, 100, -8.8000000000000007 },\n+  { -3.8930624477368766e+109, 100, -8.6999999999999993 },\n+  { 2.5386102824684956e+109, 100, -8.5999999999999996 },\n+  { 1.6203702280499544e+109, 100, -8.5000000000000000 },\n+  { 1.2481735250539652e+108, 100, -8.4000000000000004 },\n+  { -2.5611278359589723e+108, 100, -8.3000000000000007 },\n+  { -1.1534178973583771e+108, 100, -8.1999999999999993 },\n+  { 8.4932594446954126e+106, 100, -8.0999999999999996 },\n+  { 2.5761505535443451e+107, 100, -8.0000000000000000 },\n+  { 7.3445622927437730e+106, 100, -7.9000000000000004 },\n+  { -2.7252309851017323e+106, 100, -7.7999999999999998 },\n+  { -2.4850432648124068e+106, 100, -7.7000000000000002 },\n+  { -2.7486638813238851e+105, 100, -7.5999999999999996 },\n+  { 4.4772364475394960e+105, 100, -7.5000000000000000 },\n+  { 2.1375121759800508e+105, 100, -7.4000000000000004 },\n+  { -2.9237691057265876e+104, 100, -7.2999999999999998 },\n+  { -5.9348804074874781e+104, 100, -7.2000000000000002 },\n+  { -1.2947583568692734e+104, 100, -7.0999999999999996 },\n+  { 1.0002273523275075e+104, 100, -7.0000000000000000 },\n+  { 6.4900499886057735e+103, 100, -6.9000000000000004 },\n+  { -3.7817730019124298e+102, 100, -6.7999999999999998 },\n+  { -1.7849709684883137e+103, 100, -6.7000000000000002 },\n+  { -4.8039047085580619e+102, 100, -6.5999999999999996 },\n+  { 3.2072472002047670e+102, 100, -6.5000000000000000 },\n+  { 2.3341289432999226e+102, 100, -6.4000000000000004 },\n+  { -1.4587350659146165e+101, 100, -6.2999999999999998 },\n+  { -7.0672139150705532e+101, 100, -6.2000000000000002 },\n+  { -1.8039133351601998e+101, 100, -6.0999999999999996 },\n+  { 1.5170693933260738e+101, 100, -6.0000000000000000 },\n+  { 1.0141407690966954e+101, 100, -5.9000000000000004 },\n+  { -1.5140717605507886e+100, 100, -5.7999999999999998 },\n+  { -3.6379102593330533e+100, 100, -5.7000000000000002 },\n+  { -6.2933057672779134e+99, 100, -5.5999999999999996 },\n+  { 9.9309186425970402e+99, 100, -5.5000000000000000 },\n+  { 5.0935670879056567e+99, 100, -5.4000000000000004 },\n+  { -1.8337906983006129e+99, 100, -5.2999999999999998 },\n+  { -2.3096466887887402e+99, 100, -5.2000000000000002 },\n+  { -4.0259235416602546e+97, 100, -5.0999999999999996 },\n+  { 8.1931937130591466e+98, 100, -5.0000000000000000 },\n+  { 2.5601172475776894e+98, 100, -4.9000000000000004 },\n+  { -2.3193021196802698e+98, 100, -4.7999999999999998 },\n+  { -1.6545238014142802e+98, 100, -4.7000000000000002 },\n+  { 4.2440218943299170e+97, 100, -4.5999999999999996 },\n+  { 7.8073853756187101e+97, 100, -4.5000000000000000 },\n+  { 5.2136163919277588e+96, 100, -4.4000000000000004 },\n+  { -3.0837503404959950e+97, 100, -4.2999999999999998 },\n+  { -1.0988290456447777e+97, 100, -4.2000000000000002 },\n+  { 1.0173847230741884e+97, 100, -4.0999999999999996 },\n+  { 7.7070682747643550e+96, 100, -4.0000000000000000 },\n+  { -2.3947326745293331e+96, 100, -3.9000000000000004 },\n+  { -4.1993887070961596e+96, 100, -3.7999999999999998 },\n+  { -5.5521768050542138e+94, 100, -3.7000000000000002 },\n+  { 1.9852724296241180e+96, 100, -3.5999999999999996 },\n+  { 5.7841213444838915e+95, 100, -3.5000000000000000 },\n+  { -8.2433116644948570e+95, 100, -3.4000000000000004 },\n+  { -5.2035951331058195e+95, 100, -3.2999999999999998 },\n+  { 2.8212012454566057e+95, 100, -3.2000000000000002 },\n+  { 3.5161870090563867e+95, 100, -3.0999999999999996 },\n+  { -5.5084542871196523e+94, 100, -3.0000000000000000 },\n+  { -2.0784160746797610e+95, 100, -2.9000000000000004 },\n+  { -2.6058116248679496e+94, 100, -2.7999999999999998 },\n+  { 1.1147132226581844e+95, 100, -2.7000000000000002 },\n+  { 4.5607706742532875e+94, 100, -2.5999999999999996 },\n+  { -5.3758761713337664e+94, 100, -2.5000000000000000 },\n+  { -4.2303228932575769e+94, 100, -2.4000000000000004 },\n+  { 2.1691501564685499e+94, 100, -2.2999999999999998 },\n+  { 3.2602488340116974e+94, 100, -2.2000000000000002 },\n+  { -5.0527155039787607e+93, 100, -2.0999999999999996 },\n+  { -2.2785574311661325e+94, 100, -2.0000000000000000 },\n+  { -2.8549527653152903e+93, 100, -1.9000000000000004 },\n+  { 1.4787573463714363e+94, 100, -1.8000000000000007 },\n+  { 6.0554070654771248e+93, 100, -1.6999999999999993 },\n+  { -8.8496828346970978e+93, 100, -1.5999999999999996 },\n+  { -6.8402151897169509e+93, 100, -1.5000000000000000 },\n+  { 4.6555468819923166e+93, 100, -1.4000000000000004 },\n+  { 6.4625437128323579e+93, 100, -1.3000000000000007 },\n+  { -1.7820042440391653e+93, 100, -1.1999999999999993 },\n+  { -5.5814393347235886e+93, 100, -1.0999999999999996 },\n+  { -1.4487067293379347e+92, 100, -1.0000000000000000 },\n+  { 4.5268398678911204e+93, 100, -0.90000000000000036 },\n+  { 1.4120762149478435e+93, 100, -0.80000000000000071 },\n+  { -3.4510765981144258e+93, 100, -0.69999999999999929 },\n+  { -2.2242581581553176e+93, 100, -0.59999999999999964 },\n+  { 2.4129827902061037e+93, 100, -0.50000000000000000 },\n+  { 2.7195429139752497e+93, 100, -0.40000000000000036 },\n+  { -1.4235309630836904e+93, 100, -0.30000000000000071 },\n+  { -2.9850618739468043e+93, 100, -0.19999999999999929 },\n+  { 4.7017027479251074e+92, 100, -0.099999999999999645 },\n+  { 3.0685187562549660e+93, 100, 0.0000000000000000 },\n+  { 4.7017027479251074e+92, 100, 0.099999999999999645 },\n+  { -2.9850618739468043e+93, 100, 0.19999999999999929 },\n+  { -1.4235309630836904e+93, 100, 0.30000000000000071 },\n+  { 2.7195429139752497e+93, 100, 0.40000000000000036 },\n+  { 2.4129827902061037e+93, 100, 0.50000000000000000 },\n+  { -2.2242581581553176e+93, 100, 0.59999999999999964 },\n+  { -3.4510765981144258e+93, 100, 0.69999999999999929 },\n+  { 1.4120762149478435e+93, 100, 0.80000000000000071 },\n+  { 4.5268398678911204e+93, 100, 0.90000000000000036 },\n+  { -1.4487067293379347e+92, 100, 1.0000000000000000 },\n+  { -5.5814393347235886e+93, 100, 1.0999999999999996 },\n+  { -1.7820042440391653e+93, 100, 1.1999999999999993 },\n+  { 6.4625437128323579e+93, 100, 1.3000000000000007 },\n+  { 4.6555468819923166e+93, 100, 1.4000000000000004 },\n+  { -6.8402151897169509e+93, 100, 1.5000000000000000 },\n+  { -8.8496828346970978e+93, 100, 1.5999999999999996 },\n+  { 6.0554070654771248e+93, 100, 1.6999999999999993 },\n+  { 1.4787573463714363e+94, 100, 1.8000000000000007 },\n+  { -2.8549527653152903e+93, 100, 1.9000000000000004 },\n+  { -2.2785574311661325e+94, 100, 2.0000000000000000 },\n+  { -5.0527155039787607e+93, 100, 2.0999999999999996 },\n+  { 3.2602488340116774e+94, 100, 2.1999999999999993 },\n+  { 2.1691501564685076e+94, 100, 2.3000000000000007 },\n+  { -4.2303228932575769e+94, 100, 2.4000000000000004 },\n+  { -5.3758761713337664e+94, 100, 2.5000000000000000 },\n+  { 4.5607706742532875e+94, 100, 2.5999999999999996 },\n+  { 1.1147132226581881e+95, 100, 2.6999999999999993 },\n+  { -2.6058116248681564e+94, 100, 2.8000000000000007 },\n+  { -2.0784160746797610e+95, 100, 2.9000000000000004 },\n+  { -5.5084542871196523e+94, 100, 3.0000000000000000 },\n+  { 3.5161870090563867e+95, 100, 3.0999999999999996 },\n+  { 2.8212012454566478e+95, 100, 3.1999999999999993 },\n+  { -5.2035951331058918e+95, 100, 3.3000000000000007 },\n+  { -8.2433116644948570e+95, 100, 3.4000000000000004 },\n+  { 5.7841213444838915e+95, 100, 3.5000000000000000 },\n+  { 1.9852724296241180e+96, 100, 3.5999999999999996 },\n+  { -5.5521768050503009e+94, 100, 3.6999999999999993 },\n+  { -4.1993887070961795e+96, 100, 3.8000000000000007 },\n+  { -2.3947326745293331e+96, 100, 3.9000000000000004 },\n+  { 7.7070682747643550e+96, 100, 4.0000000000000000 },\n+  { 1.0173847230741884e+97, 100, 4.0999999999999996 },\n+  { -1.0988290456447506e+97, 100, 4.1999999999999993 },\n+  { -3.0837503404959957e+97, 100, 4.3000000000000007 },\n+  { 5.2136163919277588e+96, 100, 4.4000000000000004 },\n+  { 7.8073853756187101e+97, 100, 4.5000000000000000 },\n+  { 4.2440218943299170e+97, 100, 4.5999999999999996 },\n+  { -1.6545238014142650e+98, 100, 4.6999999999999993 },\n+  { -2.3193021196802549e+98, 100, 4.8000000000000007 },\n+  { 2.5601172475776894e+98, 100, 4.9000000000000004 },\n+  { 8.1931937130591466e+98, 100, 5.0000000000000000 },\n+  { -4.0259235416602546e+97, 100, 5.0999999999999996 },\n+  { -2.3096466887887237e+99, 100, 5.1999999999999993 },\n+  { -1.8337906983005823e+99, 100, 5.3000000000000007 },\n+  { 5.0935670879056567e+99, 100, 5.4000000000000004 },\n+  { 9.9309186425970402e+99, 100, 5.5000000000000000 },\n+  { -6.2933057672779134e+99, 100, 5.5999999999999996 },\n+  { -3.6379102593330386e+100, 100, 5.6999999999999993 },\n+  { -1.5140717605507249e+100, 100, 5.8000000000000007 },\n+  { 1.0141407690966954e+101, 100, 5.9000000000000004 },\n+  { 1.5170693933260738e+101, 100, 6.0000000000000000 },\n+  { -1.8039133351602961e+101, 100, 6.1000000000000014 },\n+  { -7.0672139150705246e+101, 100, 6.1999999999999993 },\n+  { -1.4587350659144549e+101, 100, 6.3000000000000007 },\n+  { 2.3341289432998748e+102, 100, 6.3999999999999986 },\n+  { 3.2072472002047670e+102, 100, 6.5000000000000000 },\n+  { -4.8039047085582927e+102, 100, 6.6000000000000014 },\n+  { -1.7849709684883083e+103, 100, 6.6999999999999993 },\n+  { -3.7817730019120996e+102, 100, 6.8000000000000007 },\n+  { 6.4900499886056430e+103, 100, 6.8999999999999986 },\n+  { 1.0002273523275075e+104, 100, 7.0000000000000000 },\n+  { -1.2947583568693485e+104, 100, 7.1000000000000014 },\n+  { -5.9348804074874565e+104, 100, 7.1999999999999993 },\n+  { -2.9237691057264679e+104, 100, 7.3000000000000007 },\n+  { 2.1375121759799924e+105, 100, 7.3999999999999986 },\n+  { 4.4772364475394960e+105, 100, 7.5000000000000000 },\n+  { -2.7486638813241244e+105, 100, 7.6000000000000014 },\n+  { -2.4850432648123868e+106, 100, 7.6999999999999993 },\n+  { -2.7252309851017070e+106, 100, 7.8000000000000007 },\n+  { 7.3445622927434568e+106, 100, 7.8999999999999986 },\n+  { 2.5761505535443451e+107, 100, 8.0000000000000000 },\n+  { 8.4932594446944218e+106, 100, 8.1000000000000014 },\n+  { -1.1534178973583771e+108, 100, 8.1999999999999993 },\n+  { -2.5611278359589723e+108, 100, 8.3000000000000007 },\n+  { 1.2481735250538004e+108, 100, 8.3999999999999986 },\n+  { 1.6203702280499544e+109, 100, 8.5000000000000000 },\n+  { 2.5386102824684747e+109, 100, 8.6000000000000014 },\n+  { -3.8930624477368766e+109, 100, 8.6999999999999993 },\n+  { -2.2669773300293168e+110, 100, 8.8000000000000007 },\n+  { -2.6071876743328939e+110, 100, 8.8999999999999986 },\n+  { 7.7294136683043515e+110, 100, 9.0000000000000000 },\n+  { 3.3341330166544429e+111, 100, 9.1000000000000014 },\n+  { 2.9686037583393142e+111, 100, 9.1999999999999993 },\n+  { -1.3977488190034162e+112, 100, 9.3000000000000007 },\n+  { -5.3374224541141370e+112, 100, 9.3999999999999986 },\n+  { -4.2265051766934789e+112, 100, 9.5000000000000000 },\n+  { 2.4904626130430740e+113, 100, 9.6000000000000014 },\n+  { 9.4857435427570856e+113, 100, 9.6999999999999993 },\n+  { 8.3761676654305186e+113, 100, 9.8000000000000007 },\n+  { -4.4232904120309469e+114, 100, 9.8999999999999986 },\n+  { -1.8738689223256612e+115, 100, 10.000000000000000 },\n+};\n+const double toler008 = 2.5000000000000020e-13;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_hermite<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::hermite(data[i].n, data[i].x);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  return 0;\n+}"}, {"sha": "948d907e310b6501ff1eb94f0adb0854d78e8813", "filename": "libstdc++-v3/testsuite/special_functions/15_hermite/compile.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F15_hermite%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F15_hermite%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F15_hermite%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.15 hermite\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float xf = 2.5F;\n+  double xd = 2.5;\n+  long double xl = 2.5L;\n+\n+  unsigned int n = 5;\n+\n+  std::hermite(n, xf);\n+  std::hermitef(n, xf);\n+  std::hermite(n, xd);\n+  std::hermite(n, xl);\n+  std::hermitel(n, xl);\n+\n+  return;\n+}\n+"}, {"sha": "bf6935ea3a91c000b6419ba25b17f5a86c1ad722", "filename": "libstdc++-v3/testsuite/special_functions/15_hermite/compile_2.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F15_hermite%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F15_hermite%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F15_hermite%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.15 hermite\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float xf = 2.5F;\n+  double xd = 2.5;\n+  long double xl = 2.5L;\n+  unsigned int n = 5;\n+\n+  hermite(n, xf);\n+  hermitef(n, xf);\n+  hermite(n, xd);\n+  hermite(n, xl);\n+  hermitel(n, xl);\n+\n+  return;\n+}\n+"}, {"sha": "9ae721c86de77c92caf969daf11f83a58fb0557f", "filename": "libstdc++-v3/testsuite/special_functions/16_laguerre/check_nan.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F16_laguerre%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F16_laguerre%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F16_laguerre%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,58 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.16 laguerre\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  unsigned int n = 2;\n+\n+  float a = std::laguerre(n, xf);\n+  float b = std::laguerref(n, xf);\n+  double c = std::laguerre(n, xd);\n+  long double d = std::laguerre(n, xl);\n+  long double e = std::laguerrel(n, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "82f4872479697cc28c846a5691fe8f878071c7cc", "filename": "libstdc++-v3/testsuite/special_functions/16_laguerre/check_value.cc", "status": "added", "additions": 319, "deletions": 0, "changes": 319, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F16_laguerre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F16_laguerre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F16_laguerre%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,319 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  laguerre\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+\n+// Test data for n=0.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_laguerre<double>\n+data001[21] =\n+{\n+  { 1.0000000000000000, 0, 0.0000000000000000 },\n+  { 1.0000000000000000, 0, 5.0000000000000000 },\n+  { 1.0000000000000000, 0, 10.000000000000000 },\n+  { 1.0000000000000000, 0, 15.000000000000000 },\n+  { 1.0000000000000000, 0, 20.000000000000000 },\n+  { 1.0000000000000000, 0, 25.000000000000000 },\n+  { 1.0000000000000000, 0, 30.000000000000000 },\n+  { 1.0000000000000000, 0, 35.000000000000000 },\n+  { 1.0000000000000000, 0, 40.000000000000000 },\n+  { 1.0000000000000000, 0, 45.000000000000000 },\n+  { 1.0000000000000000, 0, 50.000000000000000 },\n+  { 1.0000000000000000, 0, 55.000000000000000 },\n+  { 1.0000000000000000, 0, 60.000000000000000 },\n+  { 1.0000000000000000, 0, 65.000000000000000 },\n+  { 1.0000000000000000, 0, 70.000000000000000 },\n+  { 1.0000000000000000, 0, 75.000000000000000 },\n+  { 1.0000000000000000, 0, 80.000000000000000 },\n+  { 1.0000000000000000, 0, 85.000000000000000 },\n+  { 1.0000000000000000, 0, 90.000000000000000 },\n+  { 1.0000000000000000, 0, 95.000000000000000 },\n+  { 1.0000000000000000, 0, 100.00000000000000 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+\n+// Test data for n=1.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_laguerre<double>\n+data002[21] =\n+{\n+  { 1.0000000000000000, 1, 0.0000000000000000 },\n+  { -4.0000000000000000, 1, 5.0000000000000000 },\n+  { -9.0000000000000000, 1, 10.000000000000000 },\n+  { -14.000000000000000, 1, 15.000000000000000 },\n+  { -19.000000000000000, 1, 20.000000000000000 },\n+  { -24.000000000000000, 1, 25.000000000000000 },\n+  { -29.000000000000000, 1, 30.000000000000000 },\n+  { -34.000000000000000, 1, 35.000000000000000 },\n+  { -39.000000000000000, 1, 40.000000000000000 },\n+  { -44.000000000000000, 1, 45.000000000000000 },\n+  { -49.000000000000000, 1, 50.000000000000000 },\n+  { -54.000000000000000, 1, 55.000000000000000 },\n+  { -59.000000000000000, 1, 60.000000000000000 },\n+  { -64.000000000000000, 1, 65.000000000000000 },\n+  { -69.000000000000000, 1, 70.000000000000000 },\n+  { -74.000000000000000, 1, 75.000000000000000 },\n+  { -79.000000000000000, 1, 80.000000000000000 },\n+  { -84.000000000000000, 1, 85.000000000000000 },\n+  { -89.000000000000000, 1, 90.000000000000000 },\n+  { -94.000000000000000, 1, 95.000000000000000 },\n+  { -99.000000000000000, 1, 100.00000000000000 },\n+};\n+const double toler002 = 2.5000000000000020e-13;\n+\n+// Test data for n=2.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_laguerre<double>\n+data003[21] =\n+{\n+  { 1.0000000000000000, 2, 0.0000000000000000 },\n+  { 3.5000000000000000, 2, 5.0000000000000000 },\n+  { 31.000000000000000, 2, 10.000000000000000 },\n+  { 83.500000000000000, 2, 15.000000000000000 },\n+  { 161.00000000000000, 2, 20.000000000000000 },\n+  { 263.50000000000000, 2, 25.000000000000000 },\n+  { 391.00000000000000, 2, 30.000000000000000 },\n+  { 543.50000000000000, 2, 35.000000000000000 },\n+  { 721.00000000000000, 2, 40.000000000000000 },\n+  { 923.50000000000000, 2, 45.000000000000000 },\n+  { 1151.0000000000000, 2, 50.000000000000000 },\n+  { 1403.5000000000000, 2, 55.000000000000000 },\n+  { 1681.0000000000000, 2, 60.000000000000000 },\n+  { 1983.5000000000000, 2, 65.000000000000000 },\n+  { 2311.0000000000000, 2, 70.000000000000000 },\n+  { 2663.5000000000000, 2, 75.000000000000000 },\n+  { 3041.0000000000000, 2, 80.000000000000000 },\n+  { 3443.5000000000000, 2, 85.000000000000000 },\n+  { 3871.0000000000000, 2, 90.000000000000000 },\n+  { 4323.5000000000000, 2, 95.000000000000000 },\n+  { 4801.0000000000000, 2, 100.00000000000000 },\n+};\n+const double toler003 = 2.5000000000000020e-13;\n+\n+// Test data for n=5.\n+// max(|f - f_GSL|): 7.4505805969238281e-09\n+// max(|f - f_GSL| / |f_GSL|): 1.9501553136894460e-16\n+const testcase_laguerre<double>\n+data004[21] =\n+{\n+  { 1.0000000000000000, 5, 0.0000000000000000 },\n+  { -3.1666666666666665, 5, 5.0000000000000000 },\n+  { 34.333333333333329, 5, 10.000000000000000 },\n+  { -355.25000000000000, 5, 15.000000000000000 },\n+  { -4765.6666666666670, 5, 20.000000000000000 },\n+  { -23040.666666666664, 5, 25.000000000000000 },\n+  { -74399.000000000000, 5, 30.000000000000000 },\n+  { -190559.41666666663, 5, 35.000000000000000 },\n+  { -418865.66666666663, 5, 40.000000000000000 },\n+  { -825411.50000000000, 5, 45.000000000000000 },\n+  { -1498165.6666666665, 5, 50.000000000000000 },\n+  { -2550096.9166666670, 5, 55.000000000000000 },\n+  { -4122299.0000000000, 5, 60.000000000000000 },\n+  { -6387115.6666666670, 5, 65.000000000000000 },\n+  { -9551265.6666666679, 5, 70.000000000000000 },\n+  { -13858967.750000000, 5, 75.000000000000000 },\n+  { -19595065.666666664, 5, 80.000000000000000 },\n+  { -27088153.166666668, 5, 85.000000000000000 },\n+  { -36713699.000000000, 5, 90.000000000000000 },\n+  { -48897171.916666657, 5, 95.000000000000000 },\n+  { -64117165.666666664, 5, 100.00000000000000 },\n+};\n+const double toler004 = 2.5000000000000020e-13;\n+\n+// Test data for n=10.\n+// max(|f - f_GSL|): 0.0029296875000000000\n+// max(|f - f_GSL| / |f_GSL|): 6.1315986390500118e-15\n+const testcase_laguerre<double>\n+data005[21] =\n+{\n+  { 1.0000000000000000, 10, 0.0000000000000000 },\n+  { 1.7562761794532631, 10, 5.0000000000000000 },\n+  { 27.984126984126977, 10, 10.000000000000000 },\n+  { -237.51841517857147, 10, 15.000000000000000 },\n+  { 3227.8077601410932, 10, 20.000000000000000 },\n+  { -45786.199797453693, 10, 25.000000000000000 },\n+  { 15129.571428571455, 10, 30.000000000000000 },\n+  { 7764800.8179494590, 10, 35.000000000000000 },\n+  { 79724066.608465582, 10, 40.000000000000000 },\n+  { 469865425.65122765, 10, 45.000000000000000 },\n+  { 2037190065.3738980, 10, 50.000000000000000 },\n+  { 7187828002.9825764, 10, 55.000000000000000 },\n+  { 21804200401.000000, 10, 60.000000000000000 },\n+  { 58854343015.616211, 10, 65.000000000000000 },\n+  { 144688291819.51855, 10, 70.000000000000000 },\n+  { 329425241736.70038, 10, 75.000000000000000 },\n+  { 703324772760.08276, 10, 80.000000000000000 },\n+  { 1421627560118.6157, 10, 85.000000000000000 },\n+  { 2741055412243.8569, 10, 90.000000000000000 },\n+  { 5071986977681.8652, 10, 95.000000000000000 },\n+  { 9051283795429.5723, 10, 100.00000000000000 },\n+};\n+const double toler005 = 5.0000000000000039e-13;\n+\n+// Test data for n=20.\n+// max(|f - f_GSL|): 2048.0000000000000\n+// max(|f - f_GSL| / |f_GSL|): 7.1189246999774008e-15\n+const testcase_laguerre<double>\n+data006[21] =\n+{\n+  { 1.0000000000000000, 20, 0.0000000000000000 },\n+  { 2.0202257444769134, 20, 5.0000000000000000 },\n+  { -11.961333867812119, 20, 10.000000000000000 },\n+  { -50.151037960139455, 20, 15.000000000000000 },\n+  { 2829.4728613531743, 20, 20.000000000000000 },\n+  { -11583.947899113540, 20, 25.000000000000000 },\n+  { -18439.424502520938, 20, 30.000000000000000 },\n+  { -38838.223606979285, 20, 35.000000000000000 },\n+  { 24799805.877530713, 20, 40.000000000000000 },\n+  { -673953823.59913278, 20, 45.000000000000000 },\n+  { 7551960453.7672548, 20, 50.000000000000000 },\n+  { 31286508510.614746, 20, 55.000000000000000 },\n+  { -1379223608444.9155, 20, 60.000000000000000 },\n+  { -6692517968212.9717, 20, 65.000000000000000 },\n+  { 165423821874449.94, 20, 70.000000000000000 },\n+  { 3082390018008546.5, 20, 75.000000000000000 },\n+  { 29500368536981676., 20, 80.000000000000000 },\n+  { 2.0353526354974186e+17, 20, 85.000000000000000 },\n+  { 1.1292309514432901e+18, 20, 90.000000000000000 },\n+  { 5.3239262855563100e+18, 20, 95.000000000000000 },\n+  { 2.2061882785931735e+19, 20, 100.00000000000000 },\n+};\n+const double toler006 = 5.0000000000000039e-13;\n+\n+// Test data for n=50.\n+// max(|f - f_GSL|): 196608.00000000000\n+// max(|f - f_GSL| / |f_GSL|): 4.2910775919271532e-15\n+const testcase_laguerre<double>\n+data007[21] =\n+{\n+  { 1.0000000000000000, 50, 0.0000000000000000 },\n+  { 1.4735258819430543, 50, 5.0000000000000000 },\n+  { 17.534183446338233, 50, 10.000000000000000 },\n+  { -195.62436619077380, 50, 15.000000000000000 },\n+  { 980.26961889791028, 50, 20.000000000000000 },\n+  { 24812.277673870878, 50, 25.000000000000000 },\n+  { 293000.50735962362, 50, 30.000000000000000 },\n+  { 2316195.5013375278, 50, 35.000000000000000 },\n+  { -14896937.968694873, 50, 40.000000000000000 },\n+  { -502066598.00813466, 50, 45.000000000000000 },\n+  { 2513677852.6916871, 50, 50.000000000000000 },\n+  { 45129675503.538910, 50, 55.000000000000000 },\n+  { -883876565337.99219, 50, 60.000000000000000 },\n+  { 9361319947203.8418, 50, 65.000000000000000 },\n+  { -80967880733583.234, 50, 70.000000000000000 },\n+  { 717391079438942.62, 50, 75.000000000000000 },\n+  { -8217471769564841.0, 50, 80.000000000000000 },\n+  { 1.2595276229009978e+17, 50, 85.000000000000000 },\n+  { -2.1140031308048891e+18, 50, 90.000000000000000 },\n+  { 3.2438187475835134e+19, 50, 95.000000000000000 },\n+  { -3.9710103487094692e+20, 50, 100.00000000000000 },\n+};\n+const double toler007 = 2.5000000000000020e-13;\n+\n+// Test data for n=100.\n+// max(|f - f_GSL|): 98304.000000000000\n+// max(|f - f_GSL| / |f_GSL|): 3.8776197831393928e-15\n+const testcase_laguerre<double>\n+data008[21] =\n+{\n+  { 1.0000000000000000, 100, 0.0000000000000000 },\n+  { 1.4555271625328801, 100, 5.0000000000000000 },\n+  { 13.277662844303450, 100, 10.000000000000000 },\n+  { 91.737038454342454, 100, 15.000000000000000 },\n+  { 1854.0367283243388, 100, 20.000000000000000 },\n+  { -11281.698886837261, 100, 25.000000000000000 },\n+  { 170141.86987046551, 100, 30.000000000000000 },\n+  { -2950092.7025822806, 100, 35.000000000000000 },\n+  { -7272442.3156006960, 100, 40.000000000000000 },\n+  { 295697471.90876162, 100, 45.000000000000000 },\n+  { 4847420871.2690506, 100, 50.000000000000000 },\n+  { 59406998102.392288, 100, 55.000000000000000 },\n+  { 693492765740.29688, 100, 60.000000000000000 },\n+  { 6606192010150.3154, 100, 65.000000000000000 },\n+  { 17125518672239.770, 100, 70.000000000000000 },\n+  { -870493767065150.12, 100, 75.000000000000000 },\n+  { -13763178176383768., 100, 80.000000000000000 },\n+  { 30667078414479584., 100, 85.000000000000000 },\n+  { 2.1307220490380173e+18, 100, 90.000000000000000 },\n+  { -7.2706523009007821e+18, 100, 95.000000000000000 },\n+  { -2.6292260693068916e+20, 100, 100.00000000000000 },\n+};\n+const double toler008 = 2.5000000000000020e-13;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_laguerre<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::laguerre(data[i].n, data[i].x);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  return 0;\n+}"}, {"sha": "b6636413174a3821af0dc1c20e39f56ebeda93e6", "filename": "libstdc++-v3/testsuite/special_functions/16_laguerre/compile.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F16_laguerre%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F16_laguerre%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F16_laguerre%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.16 laguerre\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+\n+  unsigned int n = 2;\n+\n+  std::laguerre(n, xf);\n+  std::laguerref(n, xf);\n+  std::laguerre(n, xd);\n+  std::laguerre(n, xl);\n+  std::laguerrel(n, xl);\n+\n+  return;\n+}\n+"}, {"sha": "62f1464684f43ff18cfa89390d2b5ab45969e95e", "filename": "libstdc++-v3/testsuite/special_functions/16_laguerre/compile_2.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F16_laguerre%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F16_laguerre%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F16_laguerre%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.16 laguerre\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+  unsigned int n = 2;\n+\n+  laguerre(n, xf);\n+  laguerref(n, xf);\n+  laguerre(n, xd);\n+  laguerre(n, xl);\n+  laguerrel(n, xl);\n+\n+  return;\n+}\n+"}, {"sha": "98a9a30741cead50fad19c46ddb411429045dfac", "filename": "libstdc++-v3/testsuite/special_functions/17_legendre/check_nan.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F17_legendre%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F17_legendre%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F17_legendre%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,59 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.17 legendre\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  unsigned int l = 2;\n+\n+  float a = std::legendre(l, xf);\n+  float b = std::legendref(l, xf);\n+  double c = std::legendre(l, xd);\n+  long double d = std::legendre(l, xl);\n+  long double e = std::legendrel(l, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "58944783928d2cccd64f5fce64add7ee0c30aa05", "filename": "libstdc++-v3/testsuite/special_functions/17_legendre/check_value.cc", "status": "added", "additions": 319, "deletions": 0, "changes": 319, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F17_legendre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F17_legendre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F17_legendre%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,319 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  legendre\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+\n+// Test data for l=0.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_legendre<double>\n+data001[21] =\n+{\n+  { 1.0000000000000000, 0, -1.0000000000000000 },\n+  { 1.0000000000000000, 0, -0.90000000000000002 },\n+  { 1.0000000000000000, 0, -0.80000000000000004 },\n+  { 1.0000000000000000, 0, -0.69999999999999996 },\n+  { 1.0000000000000000, 0, -0.59999999999999998 },\n+  { 1.0000000000000000, 0, -0.50000000000000000 },\n+  { 1.0000000000000000, 0, -0.40000000000000002 },\n+  { 1.0000000000000000, 0, -0.30000000000000004 },\n+  { 1.0000000000000000, 0, -0.19999999999999996 },\n+  { 1.0000000000000000, 0, -0.099999999999999978 },\n+  { 1.0000000000000000, 0, 0.0000000000000000 },\n+  { 1.0000000000000000, 0, 0.10000000000000009 },\n+  { 1.0000000000000000, 0, 0.19999999999999996 },\n+  { 1.0000000000000000, 0, 0.30000000000000004 },\n+  { 1.0000000000000000, 0, 0.39999999999999991 },\n+  { 1.0000000000000000, 0, 0.50000000000000000 },\n+  { 1.0000000000000000, 0, 0.60000000000000009 },\n+  { 1.0000000000000000, 0, 0.69999999999999996 },\n+  { 1.0000000000000000, 0, 0.80000000000000004 },\n+  { 1.0000000000000000, 0, 0.89999999999999991 },\n+  { 1.0000000000000000, 0, 1.0000000000000000 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+\n+// Test data for l=1.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_legendre<double>\n+data002[21] =\n+{\n+  { -1.0000000000000000, 1, -1.0000000000000000 },\n+  { -0.90000000000000002, 1, -0.90000000000000002 },\n+  { -0.80000000000000004, 1, -0.80000000000000004 },\n+  { -0.69999999999999996, 1, -0.69999999999999996 },\n+  { -0.59999999999999998, 1, -0.59999999999999998 },\n+  { -0.50000000000000000, 1, -0.50000000000000000 },\n+  { -0.40000000000000002, 1, -0.40000000000000002 },\n+  { -0.30000000000000004, 1, -0.30000000000000004 },\n+  { -0.19999999999999996, 1, -0.19999999999999996 },\n+  { -0.099999999999999978, 1, -0.099999999999999978 },\n+  { 0.0000000000000000, 1, 0.0000000000000000 },\n+  { 0.10000000000000009, 1, 0.10000000000000009 },\n+  { 0.19999999999999996, 1, 0.19999999999999996 },\n+  { 0.30000000000000004, 1, 0.30000000000000004 },\n+  { 0.39999999999999991, 1, 0.39999999999999991 },\n+  { 0.50000000000000000, 1, 0.50000000000000000 },\n+  { 0.60000000000000009, 1, 0.60000000000000009 },\n+  { 0.69999999999999996, 1, 0.69999999999999996 },\n+  { 0.80000000000000004, 1, 0.80000000000000004 },\n+  { 0.89999999999999991, 1, 0.89999999999999991 },\n+  { 1.0000000000000000, 1, 1.0000000000000000 },\n+};\n+const double toler002 = 2.5000000000000020e-13;\n+\n+// Test data for l=2.\n+// max(|f - f_GSL|): 1.1102230246251565e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.3877787807814482e-15\n+const testcase_legendre<double>\n+data003[21] =\n+{\n+  { 1.0000000000000000, 2, -1.0000000000000000 },\n+  { 0.71500000000000008, 2, -0.90000000000000002 },\n+  { 0.46000000000000019, 2, -0.80000000000000004 },\n+  { 0.23499999999999988, 2, -0.69999999999999996 },\n+  { 0.039999999999999925, 2, -0.59999999999999998 },\n+  { -0.12500000000000000, 2, -0.50000000000000000 },\n+  { -0.25999999999999995, 2, -0.40000000000000002 },\n+  { -0.36499999999999999, 2, -0.30000000000000004 },\n+  { -0.44000000000000006, 2, -0.19999999999999996 },\n+  { -0.48499999999999999, 2, -0.099999999999999978 },\n+  { -0.50000000000000000, 2, 0.0000000000000000 },\n+  { -0.48499999999999999, 2, 0.10000000000000009 },\n+  { -0.44000000000000006, 2, 0.19999999999999996 },\n+  { -0.36499999999999999, 2, 0.30000000000000004 },\n+  { -0.26000000000000012, 2, 0.39999999999999991 },\n+  { -0.12500000000000000, 2, 0.50000000000000000 },\n+  { 0.040000000000000147, 2, 0.60000000000000009 },\n+  { 0.23499999999999988, 2, 0.69999999999999996 },\n+  { 0.46000000000000019, 2, 0.80000000000000004 },\n+  { 0.71499999999999986, 2, 0.89999999999999991 },\n+  { 1.0000000000000000, 2, 1.0000000000000000 },\n+};\n+const double toler003 = 2.5000000000000020e-13;\n+\n+// Test data for l=5.\n+// max(|f - f_GSL|): 2.0122792321330962e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.8911475274404243e-15\n+const testcase_legendre<double>\n+data004[21] =\n+{\n+  { -1.0000000000000000, 5, -1.0000000000000000 },\n+  { 0.041141250000000087, 5, -0.90000000000000002 },\n+  { 0.39951999999999993, 5, -0.80000000000000004 },\n+  { 0.36519874999999991, 5, -0.69999999999999996 },\n+  { 0.15263999999999994, 5, -0.59999999999999998 },\n+  { -0.089843750000000000, 5, -0.50000000000000000 },\n+  { -0.27063999999999994, 5, -0.40000000000000002 },\n+  { -0.34538625000000001, 5, -0.30000000000000004 },\n+  { -0.30751999999999996, 5, -0.19999999999999996 },\n+  { -0.17882874999999995, 5, -0.099999999999999978 },\n+  { 0.0000000000000000, 5, 0.0000000000000000 },\n+  { 0.17882875000000015, 5, 0.10000000000000009 },\n+  { 0.30751999999999996, 5, 0.19999999999999996 },\n+  { 0.34538625000000001, 5, 0.30000000000000004 },\n+  { 0.27064000000000010, 5, 0.39999999999999991 },\n+  { 0.089843750000000000, 5, 0.50000000000000000 },\n+  { -0.15264000000000016, 5, 0.60000000000000009 },\n+  { -0.36519874999999991, 5, 0.69999999999999996 },\n+  { -0.39951999999999993, 5, 0.80000000000000004 },\n+  { -0.041141250000000261, 5, 0.89999999999999991 },\n+  { 1.0000000000000000, 5, 1.0000000000000000 },\n+};\n+const double toler004 = 2.5000000000000020e-13;\n+\n+// Test data for l=10.\n+// max(|f - f_GSL|): 2.7755575615628914e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.0547610802636413e-15\n+const testcase_legendre<double>\n+data005[21] =\n+{\n+  { 1.0000000000000000, 10, -1.0000000000000000 },\n+  { -0.26314561785585960, 10, -0.90000000000000002 },\n+  { 0.30052979560000004, 10, -0.80000000000000004 },\n+  { 0.085805795531640333, 10, -0.69999999999999996 },\n+  { -0.24366274560000001, 10, -0.59999999999999998 },\n+  { -0.18822860717773438, 10, -0.50000000000000000 },\n+  { 0.096839064399999925, 10, -0.40000000000000002 },\n+  { 0.25147634951601561, 10, -0.30000000000000004 },\n+  { 0.12907202559999983, 10, -0.19999999999999996 },\n+  { -0.12212499738710943, 10, -0.099999999999999978 },\n+  { -0.24609375000000000, 10, 0.0000000000000000 },\n+  { -0.12212499738710922, 10, 0.10000000000000009 },\n+  { 0.12907202559999983, 10, 0.19999999999999996 },\n+  { 0.25147634951601561, 10, 0.30000000000000004 },\n+  { 0.096839064400000258, 10, 0.39999999999999991 },\n+  { -0.18822860717773438, 10, 0.50000000000000000 },\n+  { -0.24366274559999984, 10, 0.60000000000000009 },\n+  { 0.085805795531640333, 10, 0.69999999999999996 },\n+  { 0.30052979560000004, 10, 0.80000000000000004 },\n+  { -0.26314561785585899, 10, 0.89999999999999991 },\n+  { 1.0000000000000000, 10, 1.0000000000000000 },\n+};\n+const double toler005 = 2.5000000000000020e-13;\n+\n+// Test data for l=20.\n+// max(|f - f_GSL|): 3.3306690738754696e-16\n+// max(|f - f_GSL| / |f_GSL|): 2.2307336678138069e-15\n+const testcase_legendre<double>\n+data006[21] =\n+{\n+  { 1.0000000000000000, 20, -1.0000000000000000 },\n+  { -0.14930823530984835, 20, -0.90000000000000002 },\n+  { 0.22420460541741347, 20, -0.80000000000000004 },\n+  { -0.20457394463834172, 20, -0.69999999999999996 },\n+  { 0.15916752910098109, 20, -0.59999999999999998 },\n+  { -0.048358381067373557, 20, -0.50000000000000000 },\n+  { -0.10159261558628156, 20, -0.40000000000000002 },\n+  { 0.18028715947998042, 20, -0.30000000000000004 },\n+  { -0.098042194344594796, 20, -0.19999999999999996 },\n+  { -0.082077130944527663, 20, -0.099999999999999978 },\n+  { 0.17619705200195312, 20, 0.0000000000000000 },\n+  { -0.082077130944528023, 20, 0.10000000000000009 },\n+  { -0.098042194344594796, 20, 0.19999999999999996 },\n+  { 0.18028715947998042, 20, 0.30000000000000004 },\n+  { -0.10159261558628112, 20, 0.39999999999999991 },\n+  { -0.048358381067373557, 20, 0.50000000000000000 },\n+  { 0.15916752910098075, 20, 0.60000000000000009 },\n+  { -0.20457394463834172, 20, 0.69999999999999996 },\n+  { 0.22420460541741347, 20, 0.80000000000000004 },\n+  { -0.14930823530984924, 20, 0.89999999999999991 },\n+  { 1.0000000000000000, 20, 1.0000000000000000 },\n+};\n+const double toler006 = 2.5000000000000020e-13;\n+\n+// Test data for l=50.\n+// max(|f - f_GSL|): 3.6082248300317588e-16\n+// max(|f - f_GSL| / |f_GSL|): 2.1700196856209138e-15\n+const testcase_legendre<double>\n+data007[21] =\n+{\n+  { 1.0000000000000000, 50, -1.0000000000000000 },\n+  { -0.17003765994383671, 50, -0.90000000000000002 },\n+  { 0.13879737345093113, 50, -0.80000000000000004 },\n+  { -0.014572731645892852, 50, -0.69999999999999996 },\n+  { -0.058860798844002096, 50, -0.59999999999999998 },\n+  { -0.031059099239609811, 50, -0.50000000000000000 },\n+  { 0.041569033381825375, 50, -0.40000000000000002 },\n+  { 0.10911051574714797, 50, -0.30000000000000004 },\n+  { 0.083432272204197494, 50, -0.19999999999999996 },\n+  { -0.038205812661313600, 50, -0.099999999999999978 },\n+  { -0.11227517265921705, 50, 0.0000000000000000 },\n+  { -0.038205812661314155, 50, 0.10000000000000009 },\n+  { 0.083432272204197494, 50, 0.19999999999999996 },\n+  { 0.10911051574714797, 50, 0.30000000000000004 },\n+  { 0.041569033381824674, 50, 0.39999999999999991 },\n+  { -0.031059099239609811, 50, 0.50000000000000000 },\n+  { -0.058860798844001430, 50, 0.60000000000000009 },\n+  { -0.014572731645892852, 50, 0.69999999999999996 },\n+  { 0.13879737345093113, 50, 0.80000000000000004 },\n+  { -0.17003765994383657, 50, 0.89999999999999991 },\n+  { 1.0000000000000000, 50, 1.0000000000000000 },\n+};\n+const double toler007 = 2.5000000000000020e-13;\n+\n+// Test data for l=100.\n+// max(|f - f_GSL|): 3.4694469519536142e-16\n+// max(|f - f_GSL| / |f_GSL|): 6.8214063779431592e-15\n+const testcase_legendre<double>\n+data008[21] =\n+{\n+  { 1.0000000000000000, 100, -1.0000000000000000 },\n+  { 0.10226582055871893, 100, -0.90000000000000002 },\n+  { 0.050861167913584228, 100, -0.80000000000000004 },\n+  { -0.077132507199778641, 100, -0.69999999999999996 },\n+  { -0.023747023905133141, 100, -0.59999999999999998 },\n+  { -0.060518025961861198, 100, -0.50000000000000000 },\n+  { -0.072258202125684470, 100, -0.40000000000000002 },\n+  { 0.057127392202801566, 100, -0.30000000000000004 },\n+  { 0.014681835355659706, 100, -0.19999999999999996 },\n+  { -0.063895098434750205, 100, -0.099999999999999978 },\n+  { 0.079589237387178727, 100, 0.0000000000000000 },\n+  { -0.063895098434749761, 100, 0.10000000000000009 },\n+  { 0.014681835355659706, 100, 0.19999999999999996 },\n+  { 0.057127392202801566, 100, 0.30000000000000004 },\n+  { -0.072258202125685025, 100, 0.39999999999999991 },\n+  { -0.060518025961861198, 100, 0.50000000000000000 },\n+  { -0.023747023905134217, 100, 0.60000000000000009 },\n+  { -0.077132507199778641, 100, 0.69999999999999996 },\n+  { 0.050861167913584228, 100, 0.80000000000000004 },\n+  { 0.10226582055871711, 100, 0.89999999999999991 },\n+  { 1.0000000000000000, 100, 1.0000000000000000 },\n+};\n+const double toler008 = 5.0000000000000039e-13;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_legendre<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::legendre(data[i].l, data[i].x);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  return 0;\n+}"}, {"sha": "820293a1ba161daad2293087c9398d531f408a4d", "filename": "libstdc++-v3/testsuite/special_functions/17_legendre/compile.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F17_legendre%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F17_legendre%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F17_legendre%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.17 legendre\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+\n+  unsigned int l = 2;\n+\n+  std::legendre(l, xf);\n+  std::legendref(l, xf);\n+  std::legendre(l, xd);\n+  std::legendre(l, xl);\n+  std::legendrel(l, xl);\n+\n+  return;\n+}\n+"}, {"sha": "4c69f9ae07aac14e1f658e0bdf8563b92c2e0a83", "filename": "libstdc++-v3/testsuite/special_functions/17_legendre/compile_2.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F17_legendre%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F17_legendre%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F17_legendre%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.17 legendre\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+  unsigned int l = 2;\n+\n+  legendre(l, xf);\n+  legendref(l, xf);\n+  legendre(l, xd);\n+  legendre(l, xl);\n+  legendrel(l, xl);\n+\n+  return;\n+}\n+"}, {"sha": "59c6791974729bcb903ef909cb6d4d14e58b35c0", "filename": "libstdc++-v3/testsuite/special_functions/18_riemann_zeta/check_nan.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F18_riemann_zeta%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F18_riemann_zeta%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F18_riemann_zeta%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,56 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.18 riemann_zeta\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float a = std::riemann_zeta(xf);\n+  float b = std::riemann_zetaf(xf);\n+  double c = std::riemann_zeta(xd);\n+  long double d = std::riemann_zeta(xl);\n+  long double e = std::riemann_zetal(xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "d6b3171aa6845807f5871e895eadfeb6b95c00ff", "filename": "libstdc++-v3/testsuite/special_functions/18_riemann_zeta/check_value.cc", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F18_riemann_zeta%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F18_riemann_zeta%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F18_riemann_zeta%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,307 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  riemann_zeta\n+\n+// This can take long on simulators, timing out the test.\n+// { dg-options \"-DMAX_ITERATIONS=5\" { target simulator } }\n+\n+#ifndef MAX_ITERATIONS\n+#define MAX_ITERATIONS (sizeof(data001) / sizeof(testcase_riemann_zeta<double>))\n+#endif\n+\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+// Test data.\n+// max(|f - f_GSL|): 8.8817841970012523e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.7349082148991403e-15\n+const testcase_riemann_zeta<double>\n+data001[55] =\n+{\n+  { 0.0000000000000000, -10.000000000000000 },\n+  { -0.0033669820451019579, -9.8000000000000007 },\n+  { -0.0058129517767319039, -9.5999999999999996 },\n+  { -0.0072908732290557004, -9.4000000000000004 },\n+  { -0.0078420910654484442, -9.1999999999999993 },\n+  { -0.0075757575757575803, -9.0000000000000000 },\n+  { -0.0066476555677551898, -8.8000000000000007 },\n+  { -0.0052400095350859429, -8.5999999999999996 },\n+  { -0.0035434308017674959, -8.4000000000000004 },\n+  { -0.0017417330388368585, -8.1999999999999993 },\n+  { 0.0000000000000000, -8.0000000000000000 },\n+  { 0.0015440036789213961, -7.7999999999999998 },\n+  { 0.0027852131086497423, -7.5999999999999996 },\n+  { 0.0036537321227995880, -7.4000000000000004 },\n+  { 0.0041147930817053468, -7.2000000000000002 },\n+  { 0.0041666666666666683, -7.0000000000000000 },\n+  { 0.0038369975032738366, -6.7999999999999998 },\n+  { 0.0031780270571782981, -6.5999999999999996 },\n+  { 0.0022611282027338573, -6.4000000000000004 },\n+  { 0.0011710237049390511, -6.2000000000000002 },\n+  { 0.0000000000000000, -6.0000000000000000 },\n+  { -0.0011576366649881879, -5.7999999999999998 },\n+  { -0.0022106784318564345, -5.5999999999999996 },\n+  { -0.0030755853460586891, -5.4000000000000004 },\n+  { -0.0036804380477934787, -5.2000000000000002 },\n+  { -0.0039682539682539698, -5.0000000000000000 },\n+  { -0.0038996891301999797, -4.7999999999999998 },\n+  { -0.0034551830834302711, -4.5999999999999996 },\n+  { -0.0026366345018725115, -4.4000000000000004 },\n+  { -0.0014687209305056974, -4.2000000000000002 },\n+  { 0.0000000000000000, -4.0000000000000000 },\n+  { 0.0016960463875825202, -3.7999999999999998 },\n+  { 0.0035198355903356747, -3.5999999999999996 },\n+  { 0.0053441503206513421, -3.4000000000000004 },\n+  { 0.0070119720770910540, -3.2000000000000002 },\n+  { 0.0083333333333333350, -3.0000000000000000 },\n+  { 0.0090807294856852811, -2.7999999999999998 },\n+  { 0.0089824623788396681, -2.5999999999999996 },\n+  { 0.0077130239874243630, -2.4000000000000004 },\n+  { 0.0048792123593036068, -2.2000000000000002 },\n+  { 0.0000000000000000, -2.0000000000000000 },\n+  { -0.0075229347765968010, -1.8000000000000007 },\n+  { -0.018448986678963775, -1.5999999999999996 },\n+  { -0.033764987694047593, -1.4000000000000004 },\n+  { -0.054788441243880631, -1.1999999999999993 },\n+  { -0.083333333333333398, -1.0000000000000000 },\n+  { -0.12198707766977103, -0.80000000000000071 },\n+  { -0.17459571193801401, -0.59999999999999964 },\n+  { -0.24716546083171492, -0.40000000000000036 },\n+  { -0.34966628059831484, -0.19999999999999929 },\n+  { -0.49999999999999994, 0.0000000000000000 },\n+  { -0.73392092489633953, 0.19999999999999929 },\n+  { -1.1347977838669825, 0.40000000000000036 },\n+  { -1.9526614482239983, 0.59999999999999964 },\n+  { -4.4375384158955677, 0.80000000000000071 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+//  riemann_zeta\n+\n+// This can take long on simulators, timing out the test.\n+// { dg-options \"-DMAX_ITERATIONS=5\" { target simulator } }\n+\n+#ifndef MAX_ITERATIONS\n+#define MAX_ITERATIONS (sizeof(data001) / sizeof(testcase_riemann_zeta<double>))\n+#endif\n+\n+\n+// Test data.\n+// max(|f - f_GSL|): 2.6645352591003757e-15\n+// max(|f - f_GSL| / |f_GSL|): 1.1657079722157521e-15\n+const testcase_riemann_zeta<double>\n+data002[145] =\n+{\n+  { 5.5915824411777502, 1.2000000000000000 },\n+  { 3.1055472779775792, 1.3999999999999999 },\n+  { 2.2857656656801324, 1.6000000000000001 },\n+  { 1.8822296181028220, 1.8000000000000000 },\n+  { 1.6449340668482275, 2.0000000000000000 },\n+  { 1.4905432565068937, 2.2000000000000002 },\n+  { 1.3833428588407359, 2.3999999999999999 },\n+  { 1.3054778090727803, 2.6000000000000001 },\n+  { 1.2470314223172541, 2.7999999999999998 },\n+  { 1.2020569031595945, 3.0000000000000000 },\n+  { 1.1667733709844674, 3.2000000000000002 },\n+  { 1.1386637757280420, 3.3999999999999999 },\n+  { 1.1159890791233376, 3.6000000000000001 },\n+  { 1.0975105764590047, 3.7999999999999998 },\n+  { 1.0823232337111381, 4.0000000000000000 },\n+  { 1.0697514772338095, 4.2000000000000002 },\n+  { 1.0592817259798355, 4.4000000000000004 },\n+  { 1.0505173825665735, 4.5999999999999996 },\n+  { 1.0431480133351789, 4.7999999999999998 },\n+  { 1.0369277551433700, 5.0000000000000000 },\n+  { 1.0316598766779168, 5.2000000000000002 },\n+  { 1.0271855389203537, 5.4000000000000004 },\n+  { 1.0233754792270300, 5.5999999999999996 },\n+  { 1.0201237683883446, 5.7999999999999998 },\n+  { 1.0173430619844492, 6.0000000000000000 },\n+  { 1.0149609451852233, 6.2000000000000002 },\n+  { 1.0129170887121841, 6.4000000000000004 },\n+  { 1.0111610141542708, 6.5999999999999996 },\n+  { 1.0096503223447120, 6.7999999999999998 },\n+  { 1.0083492773819229, 7.0000000000000000 },\n+  { 1.0072276664807169, 7.2000000000000002 },\n+  { 1.0062598756930512, 7.4000000000000004 },\n+  { 1.0054241359879634, 7.5999999999999996 },\n+  { 1.0047019048164696, 7.7999999999999998 },\n+  { 1.0040773561979444, 8.0000000000000000 },\n+  { 1.0035369583062013, 8.1999999999999993 },\n+  { 1.0030691220374448, 8.4000000000000004 },\n+  { 1.0026639074861505, 8.5999999999999996 },\n+  { 1.0023127779098220, 8.8000000000000007 },\n+  { 1.0020083928260823, 9.0000000000000000 },\n+  { 1.0017444334995897, 9.1999999999999993 },\n+  { 1.0015154553480514, 9.4000000000000004 },\n+  { 1.0013167628052648, 9.5999999999999996 },\n+  { 1.0011443029840295, 9.8000000000000007 },\n+  { 1.0009945751278182, 10.000000000000000 },\n+  { 1.0008645533615086, 10.199999999999999 },\n+  { 1.0007516206744649, 10.400000000000000 },\n+  { 1.0006535124140847, 10.600000000000000 },\n+  { 1.0005682678503411, 10.800000000000001 },\n+  { 1.0004941886041194, 11.000000000000000 },\n+  { 1.0004298029239944, 11.199999999999999 },\n+  { 1.0003738349551168, 11.400000000000000 },\n+  { 1.0003251782761946, 11.600000000000000 },\n+  { 1.0002828730909989, 11.800000000000001 },\n+  { 1.0002460865533080, 12.000000000000000 },\n+  { 1.0002140957818750, 12.199999999999999 },\n+  { 1.0001862731874056, 12.400000000000000 },\n+  { 1.0001620737887460, 12.600000000000000 },\n+  { 1.0001410242422089, 12.800000000000001 },\n+  { 1.0001227133475783, 13.000000000000000 },\n+  { 1.0001067838280169, 13.199999999999999 },\n+  { 1.0000929252097515, 13.400000000000000 },\n+  { 1.0000808676518718, 13.600000000000000 },\n+  { 1.0000703765974504, 13.800000000000001 },\n+  { 1.0000612481350588, 14.000000000000000 },\n+  { 1.0000533049750668, 14.199999999999999 },\n+  { 1.0000463929582293, 14.400000000000000 },\n+  { 1.0000403780253397, 14.600000000000000 },\n+  { 1.0000351435864272, 14.800000000000001 },\n+  { 1.0000305882363070, 15.000000000000000 },\n+  { 1.0000266237704787, 15.199999999999999 },\n+  { 1.0000231734615617, 15.400000000000000 },\n+  { 1.0000201705617975, 15.600000000000000 },\n+  { 1.0000175570017611, 15.800000000000001 },\n+  { 1.0000152822594086, 16.000000000000000 },\n+  { 1.0000133023770337, 16.199999999999999 },\n+  { 1.0000115791066830, 16.399999999999999 },\n+  { 1.0000100791671644, 16.600000000000001 },\n+  { 1.0000087735980010, 16.800000000000001 },\n+  { 1.0000076371976379, 17.000000000000000 },\n+  { 1.0000066480348633, 17.199999999999999 },\n+  { 1.0000057870238734, 17.399999999999999 },\n+  { 1.0000050375546607, 17.600000000000001 },\n+  { 1.0000043851715013, 17.800000000000001 },\n+  { 1.0000038172932648, 18.000000000000000 },\n+  { 1.0000033229700953, 18.199999999999999 },\n+  { 1.0000028926717153, 18.399999999999999 },\n+  { 1.0000025181032419, 18.600000000000001 },\n+  { 1.0000021920449287, 18.800000000000001 },\n+  { 1.0000019082127167, 19.000000000000000 },\n+  { 1.0000016611368951, 19.199999999999999 },\n+  { 1.0000014460565094, 19.399999999999999 },\n+  { 1.0000012588274738, 19.600000000000001 },\n+  { 1.0000010958426055, 19.800000000000001 },\n+  { 1.0000009539620338, 20.000000000000000 },\n+  { 1.0000008304526344, 20.199999999999999 },\n+  { 1.0000007229353187, 20.399999999999999 },\n+  { 1.0000006293391575, 20.600000000000001 },\n+  { 1.0000005478614529, 20.800000000000001 },\n+  { 1.0000004769329869, 21.000000000000000 },\n+  { 1.0000004151877719, 21.199999999999999 },\n+  { 1.0000003614367254, 21.399999999999999 },\n+  { 1.0000003146447527, 21.600000000000001 },\n+  { 1.0000002739108020, 21.800000000000001 },\n+  { 1.0000002384505029, 22.000000000000000 },\n+  { 1.0000002075810521, 22.199999999999999 },\n+  { 1.0000001807080625, 22.399999999999999 },\n+  { 1.0000001573141093, 22.600000000000001 },\n+  { 1.0000001369487659, 22.800000000000001 },\n+  { 1.0000001192199262, 23.000000000000000 },\n+  { 1.0000001037862520, 23.199999999999999 },\n+  { 1.0000000903506006, 23.399999999999999 },\n+  { 1.0000000786543011, 23.600000000000001 },\n+  { 1.0000000684721728, 23.800000000000001 },\n+  { 1.0000000596081891, 24.000000000000000 },\n+  { 1.0000000518917020, 24.199999999999999 },\n+  { 1.0000000451741575, 24.399999999999999 },\n+  { 1.0000000393262332, 24.600000000000001 },\n+  { 1.0000000342353501, 24.800000000000001 },\n+  { 1.0000000298035037, 25.000000000000000 },\n+  { 1.0000000259453767, 25.199999999999999 },\n+  { 1.0000000225866978, 25.399999999999999 },\n+  { 1.0000000196628109, 25.600000000000001 },\n+  { 1.0000000171174297, 25.800000000000001 },\n+  { 1.0000000149015549, 26.000000000000000 },\n+  { 1.0000000129725304, 26.199999999999999 },\n+  { 1.0000000112932221, 26.399999999999999 },\n+  { 1.0000000098313035, 26.600000000000001 },\n+  { 1.0000000085586331, 26.800000000000001 },\n+  { 1.0000000074507118, 27.000000000000000 },\n+  { 1.0000000064862125, 27.199999999999999 },\n+  { 1.0000000056465688, 27.399999999999999 },\n+  { 1.0000000049156179, 27.600000000000001 },\n+  { 1.0000000042792894, 27.800000000000001 },\n+  { 1.0000000037253340, 28.000000000000000 },\n+  { 1.0000000032430887, 28.199999999999999 },\n+  { 1.0000000028232703, 28.399999999999999 },\n+  { 1.0000000024577977, 28.600000000000001 },\n+  { 1.0000000021396356, 28.800000000000001 },\n+  { 1.0000000018626598, 29.000000000000000 },\n+  { 1.0000000016215385, 29.199999999999999 },\n+  { 1.0000000014116306, 29.399999999999999 },\n+  { 1.0000000012288952, 29.600000000000001 },\n+  { 1.0000000010698147, 29.800000000000001 },\n+  { 1.0000000009313275, 30.000000000000000 },\n+};\n+const double toler002 = 2.5000000000000020e-13;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_riemann_zeta<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = MAX_ITERATIONS;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::riemann_zeta(data[i].s);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  return 0;\n+}"}, {"sha": "e655a1e0a9ea42d65d456d6745670431cc1f63e6", "filename": "libstdc++-v3/testsuite/special_functions/18_riemann_zeta/compile.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F18_riemann_zeta%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F18_riemann_zeta%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F18_riemann_zeta%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.18 riemann_zeta\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+\n+  std::riemann_zeta(xf);\n+  std::riemann_zetaf(xf);\n+  std::riemann_zeta(xd);\n+  std::riemann_zeta(xl);\n+  std::riemann_zetal(xl);\n+\n+  return;\n+}\n+"}, {"sha": "2034c411a7fa5aca3ba63f2015167bcbe1265e7d", "filename": "libstdc++-v3/testsuite/special_functions/18_riemann_zeta/compile_2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F18_riemann_zeta%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F18_riemann_zeta%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F18_riemann_zeta%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.18 riemann_zeta\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+\n+  riemann_zeta(xf);\n+  riemann_zetaf(xf);\n+  riemann_zeta(xd);\n+  riemann_zeta(xl);\n+  riemann_zetal(xl);\n+\n+  return;\n+}\n+"}, {"sha": "28a98966bc807b1f8c6d693f462c3feba7eb5f0d", "filename": "libstdc++-v3/testsuite/special_functions/19_sph_bessel/check_nan.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F19_sph_bessel%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F19_sph_bessel%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F19_sph_bessel%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,58 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.19 sph_bessel\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  unsigned int n = 0;\n+\n+  float a = std::sph_bessel(n, xf);\n+  float b = std::sph_besself(n, xf);\n+  double c = std::sph_bessel(n, xd);\n+  long double d = std::sph_bessel(n, xl);\n+  long double e = std::sph_bessell(n, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "6ad21af3a4b921d8d289f51ee446a2bdd3dbc0f1", "filename": "libstdc++-v3/testsuite/special_functions/19_sph_bessel/check_value.cc", "status": "added", "additions": 506, "deletions": 0, "changes": 506, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F19_sph_bessel%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F19_sph_bessel%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F19_sph_bessel%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,506 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  sph_bessel\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+\n+// Test data for n=0.\n+// max(|f - f_GSL|): 3.3306690738754696e-16\n+// max(|f - f_GSL| / |f_GSL|): 2.0843271082049370e-15\n+const testcase_sph_bessel<double>\n+data001[21] =\n+{\n+  { 1.0000000000000000, 0, 0.0000000000000000 },\n+  { 0.98961583701809175, 0, 0.25000000000000000 },\n+  { 0.95885107720840601, 0, 0.50000000000000000 },\n+  { 0.90885168003111216, 0, 0.75000000000000000 },\n+  { 0.84147098480789650, 0, 1.0000000000000000 },\n+  { 0.75918769548446896, 0, 1.2500000000000000 },\n+  { 0.66499665773603633, 0, 1.5000000000000000 },\n+  { 0.56227768392796396, 0, 1.7500000000000000 },\n+  { 0.45464871341284085, 0, 2.0000000000000000 },\n+  { 0.34581030972796500, 0, 2.2500000000000000 },\n+  { 0.23938885764158263, 0, 2.5000000000000000 },\n+  { 0.13878581529175696, 0, 2.7500000000000000 },\n+  { 0.047040002686622402, 0, 3.0000000000000000 },\n+  { -0.033290810624648733, 0, 3.2500000000000000 },\n+  { -0.10022377933989138, 0, 3.5000000000000000 },\n+  { -0.15241635166462500, 0, 3.7500000000000000 },\n+  { -0.18920062382698205, 0, 4.0000000000000000 },\n+  { -0.21058573134790201, 0, 4.2500000000000000 },\n+  { -0.21722891503668823, 0, 4.5000000000000000 },\n+  { -0.21037742925797431, 0, 4.7500000000000000 },\n+  { -0.19178485493262770, 0, 5.0000000000000000 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+\n+// Test data for n=1.\n+// max(|f - f_GSL|): 3.1918911957973251e-16\n+// max(|f - f_GSL| / |f_GSL|): 2.8516043985912409e-14\n+const testcase_sph_bessel<double>\n+data002[21] =\n+{\n+  { 0.0000000000000000, 1, 0.0000000000000000 },\n+  { 0.082813661229788060, 1, 0.25000000000000000 },\n+  { 0.16253703063606650, 1, 0.50000000000000000 },\n+  { 0.23621708154305501, 1, 0.75000000000000000 },\n+  { 0.30116867893975674, 1, 1.0000000000000000 },\n+  { 0.35509226647136022, 1, 1.2500000000000000 },\n+  { 0.39617297071222229, 1, 1.5000000000000000 },\n+  { 0.42315642261568914, 1, 1.7500000000000000 },\n+  { 0.43539777497999166, 1, 2.0000000000000000 },\n+  { 0.43288174775586852, 1, 2.2500000000000000 },\n+  { 0.41621298927540656, 1, 2.5000000000000000 },\n+  { 0.38657752506335291, 1, 2.7500000000000000 },\n+  { 0.34567749976235596, 1, 3.0000000000000000 },\n+  { 0.29564272783258383, 1, 3.2500000000000000 },\n+  { 0.23892368798597285, 1, 3.5000000000000000 },\n+  { 0.17817146817998289, 1, 3.7500000000000000 },\n+  { 0.11611074925915747, 1, 4.0000000000000000 },\n+  { 0.055412178486091958, 1, 4.2500000000000000 },\n+  { -0.0014295812457574522, 1, 4.5000000000000000 },\n+  { -0.052206227820200179, 1, 4.7500000000000000 },\n+  { -0.095089408079170795, 1, 5.0000000000000000 },\n+};\n+const double toler002 = 2.5000000000000015e-12;\n+\n+// Test data for n=2.\n+// max(|f - f_GSL|): 8.3266726846886741e-17\n+// max(|f - f_GSL| / |f_GSL|): 6.5384527054443100e-16\n+const testcase_sph_bessel<double>\n+data003[21] =\n+{\n+  { 0.0000000000000000, 2, 0.0000000000000000 },\n+  { 0.0041480977393611252, 2, 0.25000000000000000 },\n+  { 0.016371106607993412, 2, 0.50000000000000000 },\n+  { 0.036016646141108236, 2, 0.75000000000000000 },\n+  { 0.062035052011373860, 2, 1.0000000000000000 },\n+  { 0.093033744046795624, 2, 1.2500000000000000 },\n+  { 0.12734928368840817, 2, 1.5000000000000000 },\n+  { 0.16313332627036031, 2, 1.7500000000000000 },\n+  { 0.19844794905714661, 2, 2.0000000000000000 },\n+  { 0.23136535394652627, 2, 2.2500000000000000 },\n+  { 0.26006672948890525, 2, 2.5000000000000000 },\n+  { 0.28293512114099162, 2, 2.7500000000000000 },\n+  { 0.29863749707573356, 2, 3.0000000000000000 },\n+  { 0.30619179016241843, 2, 3.2500000000000000 },\n+  { 0.30501551189929671, 2, 3.5000000000000000 },\n+  { 0.29495352620861132, 2, 3.7500000000000000 },\n+  { 0.27628368577135015, 2, 4.0000000000000000 },\n+  { 0.24970021027926106, 2, 4.2500000000000000 },\n+  { 0.21627586087284995, 2, 4.5000000000000000 },\n+  { 0.17740507484521628, 2, 4.7500000000000000 },\n+  { 0.13473121008512520, 2, 5.0000000000000000 },\n+};\n+const double toler003 = 2.5000000000000020e-13;\n+\n+// Test data for n=5.\n+// max(|f - f_GSL|): 9.7144514654701197e-17\n+// max(|f - f_GSL| / |f_GSL|): 2.7459190669103549e-15\n+const testcase_sph_bessel<double>\n+data004[21] =\n+{\n+  { 0.0000000000000000, 5, 0.0000000000000000 },\n+  { 9.3719811237268220e-08, 5, 0.25000000000000000 },\n+  { 2.9774668754574453e-06, 5, 0.50000000000000000 },\n+  { 2.2339447678335762e-05, 5, 0.75000000000000000 },\n+  { 9.2561158611258144e-05, 5, 1.0000000000000000 },\n+  { 0.00027638888920123806, 5, 1.2500000000000000 },\n+  { 0.00066962059628932456, 5, 1.5000000000000000 },\n+  { 0.0014021729022572799, 5, 1.7500000000000000 },\n+  { 0.0026351697702441169, 5, 2.0000000000000000 },\n+  { 0.0045540034750567553, 5, 2.2500000000000000 },\n+  { 0.0073576387377689359, 5, 2.5000000000000000 },\n+  { 0.011244740276407145, 5, 2.7500000000000000 },\n+  { 0.016397480955999105, 5, 3.0000000000000000 },\n+  { 0.022964112474845508, 5, 3.2500000000000000 },\n+  { 0.031041536537391189, 5, 3.5000000000000000 },\n+  { 0.040659189440948935, 5, 3.7500000000000000 },\n+  { 0.051765539757363456, 5, 4.0000000000000000 },\n+  { 0.064218395773425613, 5, 4.2500000000000000 },\n+  { 0.077780030832892866, 5, 4.5000000000000000 },\n+  { 0.092117870593729223, 5, 4.7500000000000000 },\n+  { 0.10681116145650453, 5, 5.0000000000000000 },\n+};\n+const double toler004 = 2.5000000000000020e-13;\n+\n+// Test data for n=10.\n+// max(|f - f_GSL|): 8.6736173798840355e-19\n+// max(|f - f_GSL| / |f_GSL|): 6.7232224139500876e-15\n+const testcase_sph_bessel<double>\n+data005[21] =\n+{\n+  { 0.0000000000000000, 10, 0.0000000000000000 },\n+  { 6.9267427453708468e-17, 10, 0.25000000000000000 },\n+  { 7.0641239636618740e-14, 10, 0.50000000000000000 },\n+  { 4.0459307474109287e-12, 10, 0.75000000000000000 },\n+  { 7.1165526400473096e-11, 10, 1.0000000000000000 },\n+  { 6.5470739530199939e-10, 10, 1.2500000000000000 },\n+  { 3.9934406994836296e-09, 10, 1.5000000000000000 },\n+  { 1.8327719460735247e-08, 10, 1.7500000000000000 },\n+  { 6.8253008649747220e-08, 10, 2.0000000000000000 },\n+  { 2.1653870546846626e-07, 10, 2.2500000000000000 },\n+  { 6.0504362296385381e-07, 10, 2.5000000000000000 },\n+  { 1.5246485352158441e-06, 10, 2.7500000000000000 },\n+  { 3.5260038931752543e-06, 10, 3.0000000000000000 },\n+  { 7.5839040020531456e-06, 10, 3.2500000000000000 },\n+  { 1.5327786999397106e-05, 10, 3.5000000000000000 },\n+  { 2.9348811002317661e-05, 10, 3.7500000000000000 },\n+  { 5.3589865768632612e-05, 10, 4.0000000000000000 },\n+  { 9.3818602410477989e-05, 10, 4.2500000000000000 },\n+  { 0.00015817516371455801, 10, 4.5000000000000000 },\n+  { 0.00025777607369970674, 10, 4.7500000000000000 },\n+  { 0.00040734424424946052, 10, 5.0000000000000000 },\n+};\n+const double toler005 = 5.0000000000000039e-13;\n+\n+// Test data for n=20.\n+// max(|f - f_GSL|): 4.9275407583725281e-26\n+// max(|f - f_GSL| / |f_GSL|): 2.4002866288153026e-14\n+const testcase_sph_bessel<double>\n+data006[21] =\n+{\n+  { 0.0000000000000000, 20, 0.0000000000000000 },\n+  { 6.9307487073399339e-38, 20, 0.25000000000000000 },\n+  { 7.2515880810153944e-32, 20, 0.50000000000000000 },\n+  { 2.4025911398834722e-28, 20, 0.75000000000000000 },\n+  { 7.5377957222368705e-26, 20, 1.0000000000000000 },\n+  { 6.4953439243593413e-24, 20, 1.2500000000000000 },\n+  { 2.4703120390884050e-22, 20, 1.5000000000000000 },\n+  { 5.3404627138297197e-21, 20, 1.7500000000000000 },\n+  { 7.6326411008876072e-20, 20, 2.0000000000000000 },\n+  { 7.9496335952781075e-19, 20, 2.2500000000000000 },\n+  { 6.4488532759578977e-18, 20, 2.5000000000000000 },\n+  { 4.2725223040880135e-17, 20, 2.7500000000000000 },\n+  { 2.3942249272752627e-16, 20, 3.0000000000000000 },\n+  { 1.1654033741499860e-15, 20, 3.2500000000000000 },\n+  { 5.0303402625237510e-15, 20, 3.5000000000000000 },\n+  { 1.9572475798118559e-14, 20, 3.7500000000000000 },\n+  { 6.9559880644906101e-14, 20, 4.0000000000000000 },\n+  { 2.2825949745670935e-13, 20, 4.2500000000000000 },\n+  { 6.9781823021792824e-13, 20, 4.5000000000000000 },\n+  { 2.0024157388665026e-12, 20, 4.7500000000000000 },\n+  { 5.4277267607932098e-12, 20, 5.0000000000000000 },\n+};\n+const double toler006 = 2.5000000000000015e-12;\n+//  sph_bessel\n+\n+// Test data for n=0.\n+// max(|f - f_GSL|): 1.0694570229397016e-15\n+// max(|f - f_GSL| / |f_GSL|): 3.7496052611150890e-13\n+const testcase_sph_bessel<double>\n+data007[21] =\n+{\n+  { 1.0000000000000000, 0, 0.0000000000000000 },\n+  { -0.19178485493262770, 0, 5.0000000000000000 },\n+  { -0.054402111088936979, 0, 10.000000000000000 },\n+  { 0.043352522677141118, 0, 15.000000000000000 },\n+  { 0.045647262536381385, 0, 20.000000000000000 },\n+  { -0.0052940700039109216, 0, 25.000000000000000 },\n+  { -0.032934387469762058, 0, 30.000000000000000 },\n+  { -0.012233790557032886, 0, 35.000000000000000 },\n+  { 0.018627829011983722, 0, 40.000000000000000 },\n+  { 0.018908967211869299, 0, 45.000000000000000 },\n+  { -0.0052474970740785751, 0, 50.000000000000000 },\n+  { -0.018177366788338544, 0, 55.000000000000000 },\n+  { -0.0050801770183702783, 0, 60.000000000000000 },\n+  { 0.012720441222924667, 0, 65.000000000000000 },\n+  { 0.011055581165112701, 0, 70.000000000000000 },\n+  { -0.0051704218054590724, 0, 75.000000000000000 },\n+  { -0.012423608174042190, 0, 80.000000000000000 },\n+  { -0.0020714778817480834, 0, 85.000000000000000 },\n+  { 0.0099332962622284207, 0, 90.000000000000000 },\n+  { 0.0071922285761696946, 0, 95.000000000000000 },\n+  { -0.0050636564110975880, 0, 100.00000000000000 },\n+};\n+const double toler007 = 2.5000000000000014e-11;\n+\n+// Test data for n=1.\n+// max(|f - f_GSL|): 1.0044048925905713e-15\n+// max(|f - f_GSL| / |f_GSL|): 6.5465850130521528e-13\n+const testcase_sph_bessel<double>\n+data008[21] =\n+{\n+  { 0.0000000000000000, 1, 0.0000000000000000 },\n+  { -0.095089408079170795, 1, 5.0000000000000000 },\n+  { 0.078466941798751549, 1, 10.000000000000000 },\n+  { 0.053536029035730827, 1, 15.000000000000000 },\n+  { -0.018121739963850528, 1, 20.000000000000000 },\n+  { -0.039859875274695380, 1, 25.000000000000000 },\n+  { -0.0062395279119115375, 1, 30.000000000000000 },\n+  { 0.025470240415270681, 1, 35.000000000000000 },\n+  { 0.017139147266606140, 1, 40.000000000000000 },\n+  { -0.011253622702352454, 1, 45.000000000000000 },\n+  { -0.019404270511323839, 1, 50.000000000000000 },\n+  { -0.00073280223727807778, 1, 55.000000000000000 },\n+  { 0.015788880056613101, 1, 60.000000000000000 },\n+  { 0.0088488352686322581, 1, 65.000000000000000 },\n+  { -0.0088894803131598157, 1, 70.000000000000000 },\n+  { -0.012358955887069445, 1, 75.000000000000000 },\n+  { 0.0012245454458125673, 1, 80.000000000000000 },\n+  { 0.011556531358968161, 1, 85.000000000000000 },\n+  { 0.0050889656932377614, 1, 90.000000000000000 },\n+  { -0.0076103298149331573, 1, 95.000000000000000 },\n+  { -0.0086738252869878150, 1, 100.00000000000000 },\n+};\n+const double toler008 = 5.0000000000000028e-11;\n+\n+// Test data for n=2.\n+// max(|f - f_GSL|): 1.0772632785815972e-15\n+// max(|f - f_GSL| / |f_GSL|): 3.4761702917932150e-13\n+const testcase_sph_bessel<double>\n+data009[21] =\n+{\n+  { 0.0000000000000000, 2, 0.0000000000000000 },\n+  { 0.13473121008512520, 2, 5.0000000000000000 },\n+  { 0.077942193628562445, 2, 10.000000000000000 },\n+  { -0.032645316869994966, 2, 15.000000000000000 },\n+  { -0.048365523530958965, 2, 20.000000000000000 },\n+  { 0.00051088497094747614, 2, 25.000000000000000 },\n+  { 0.032310434678570907, 2, 30.000000000000000 },\n+  { 0.014416954021198941, 2, 35.000000000000000 },\n+  { -0.017342392966988262, 2, 40.000000000000000 },\n+  { -0.019659208725359461, 2, 45.000000000000000 },\n+  { 0.0040832408433991458, 2, 50.000000000000000 },\n+  { 0.018137395757214285, 2, 55.000000000000000 },\n+  { 0.0058696210212009327, 2, 60.000000000000000 },\n+  { -0.012312033441295490, 2, 65.000000000000000 },\n+  { -0.011436558892819550, 2, 70.000000000000000 },\n+  { 0.0046760635699762939, 2, 75.000000000000000 },\n+  { 0.012469528628260161, 2, 80.000000000000000 },\n+  { 0.0024793554591234306, 2, 85.000000000000000 },\n+  { -0.0097636640724538277, 2, 90.000000000000000 },\n+  { -0.0074325547808517939, 2, 95.000000000000000 },\n+  { 0.0048034416524879537, 2, 100.00000000000000 },\n+};\n+const double toler009 = 2.5000000000000014e-11;\n+\n+// Test data for n=5.\n+// max(|f - f_GSL|): 9.4455693266937146e-16\n+// max(|f - f_GSL| / |f_GSL|): 8.4346477099300519e-13\n+const testcase_sph_bessel<double>\n+data010[21] =\n+{\n+  { 0.0000000000000000, 5, 0.0000000000000000 },\n+  { 0.10681116145650453, 5, 5.0000000000000000 },\n+  { -0.055534511621452155, 5, 10.000000000000000 },\n+  { 0.065968007076521951, 5, 15.000000000000000 },\n+  { 0.016683908063095682, 5, 20.000000000000000 },\n+  { -0.036117795989722382, 5, 25.000000000000000 },\n+  { -0.020504008736827489, 5, 30.000000000000000 },\n+  { 0.018499481206814560, 5, 35.000000000000000 },\n+  { 0.022448773791044995, 5, 40.000000000000000 },\n+  { -0.0048552694845020138, 5, 45.000000000000000 },\n+  { -0.020048300563664877, 5, 50.000000000000000 },\n+  { -0.0052999924455565742, 5, 55.000000000000000 },\n+  { 0.014151556281331407, 5, 60.000000000000000 },\n+  { 0.011354588594416778, 5, 65.000000000000000 },\n+  { -0.0064983781785323573, 5, 70.000000000000000 },\n+  { -0.013089909320064257, 5, 75.000000000000000 },\n+  { -0.00096200450071302446, 5, 80.000000000000000 },\n+  { 0.011048668899130202, 5, 85.000000000000000 },\n+  { 0.0065639581708136037, 5, 90.000000000000000 },\n+  { -0.0064646119368202771, 5, 95.000000000000000 },\n+  { -0.0092901489349075713, 5, 100.00000000000000 },\n+};\n+const double toler010 = 5.0000000000000028e-11;\n+\n+// Test data for n=10.\n+// max(|f - f_GSL|): 1.1999949645069563e-15\n+// max(|f - f_GSL| / |f_GSL|): 2.9533832871668437e-12\n+const testcase_sph_bessel<double>\n+data011[21] =\n+{\n+  { 0.0000000000000000, 10, 0.0000000000000000 },\n+  { 0.00040734424424946052, 10, 5.0000000000000000 },\n+  { 0.064605154492564265, 10, 10.000000000000000 },\n+  { 0.0018969790010883577, 10, 15.000000000000000 },\n+  { 0.039686698644626366, 10, 20.000000000000000 },\n+  { -0.036253285601128581, 10, 25.000000000000000 },\n+  { -0.014529646403897799, 10, 30.000000000000000 },\n+  { 0.026281264603993857, 10, 35.000000000000000 },\n+  { 0.013124803182748323, 10, 40.000000000000000 },\n+  { -0.017600831383728983, 10, 45.000000000000000 },\n+  { -0.015039221463465955, 10, 50.000000000000000 },\n+  { 0.0095256289349167390, 10, 55.000000000000000 },\n+  { 0.015822719394008339, 10, 60.000000000000000 },\n+  { -0.0019391391708249754, 10, 65.000000000000000 },\n+  { -0.014293389028395012, 10, 70.000000000000000 },\n+  { -0.0044210285031696227, 10, 75.000000000000000 },\n+  { 0.010516146958338813, 10, 80.000000000000000 },\n+  { 0.0086736275131325726, 10, 85.000000000000000 },\n+  { -0.0052905066357239322, 10, 90.000000000000000 },\n+  { -0.010258326955210768, 10, 95.000000000000000 },\n+  { -0.00019565785971342414, 10, 100.00000000000000 },\n+};\n+const double toler011 = 2.5000000000000017e-10;\n+\n+// Test data for n=20.\n+// max(|f - f_GSL|): 8.5521867365656590e-16\n+// max(|f - f_GSL| / |f_GSL|): 2.3231623379380350e-13\n+const testcase_sph_bessel<double>\n+data012[21] =\n+{\n+  { 0.0000000000000000, 20, 0.0000000000000000 },\n+  { 5.4277267607932098e-12, 20, 5.0000000000000000 },\n+  { 2.3083719613194670e-06, 20, 10.000000000000000 },\n+  { 0.0015467058510412498, 20, 15.000000000000000 },\n+  { 0.038324851639805160, 20, 20.000000000000000 },\n+  { 0.028500071484154645, 20, 25.000000000000000 },\n+  { -0.014711593353429081, 20, 30.000000000000000 },\n+  { -0.010797653070264229, 20, 35.000000000000000 },\n+  { 0.026535391837540293, 20, 40.000000000000000 },\n+  { -0.011582959134716393, 20, 45.000000000000000 },\n+  { -0.015785029898269291, 20, 50.000000000000000 },\n+  { 0.013885519185862741, 20, 55.000000000000000 },\n+  { 0.011112458964023273, 20, 60.000000000000000 },\n+  { -0.011938384963927568, 20, 65.000000000000000 },\n+  { -0.010117695207156904, 20, 70.000000000000000 },\n+  { 0.0089871214102383232, 20, 75.000000000000000 },\n+  { 0.010400578884991936, 20, 80.000000000000000 },\n+  { -0.0055359020656326700, 20, 85.000000000000000 },\n+  { -0.010639343320787521, 20, 90.000000000000000 },\n+  { 0.0018051661455979529, 20, 95.000000000000000 },\n+  { 0.010107671283873054, 20, 100.00000000000000 },\n+};\n+const double toler012 = 2.5000000000000014e-11;\n+\n+// Test data for n=50.\n+// max(|f - f_GSL|): 9.7377618121785581e-16\n+// max(|f - f_GSL| / |f_GSL|): 2.0735742618499052e-12\n+const testcase_sph_bessel<double>\n+data013[21] =\n+{\n+  { 0.0000000000000000, 50, 0.0000000000000000 },\n+  { 2.8574793504401511e-46, 50, 5.0000000000000000 },\n+  { 2.2306960232186471e-31, 50, 10.000000000000000 },\n+  { 7.6804716640080804e-23, 50, 15.000000000000000 },\n+  { 5.6500807918725220e-17, 50, 20.000000000000000 },\n+  { 1.2540416973758975e-12, 50, 25.000000000000000 },\n+  { 2.6901637185735326e-09, 50, 30.000000000000000 },\n+  { 1.0167148174422245e-06, 50, 35.000000000000000 },\n+  { 9.3949174038179069e-05, 50, 40.000000000000000 },\n+  { 0.0024888927213794561, 50, 45.000000000000000 },\n+  { 0.018829107369282647, 50, 50.000000000000000 },\n+  { 0.026373198438145489, 50, 55.000000000000000 },\n+  { -0.021230978268739001, 50, 60.000000000000000 },\n+  { 0.016539881802291313, 50, 65.000000000000000 },\n+  { -0.015985416061436664, 50, 70.000000000000000 },\n+  { 0.015462548984405590, 50, 75.000000000000000 },\n+  { -0.010638570118081819, 50, 80.000000000000000 },\n+  { 0.00046961239784540793, 50, 85.000000000000000 },\n+  { 0.0096065882189920251, 50, 90.000000000000000 },\n+  { -0.010613873910261154, 50, 95.000000000000000 },\n+  { 0.00057971408822774927, 50, 100.00000000000000 },\n+};\n+const double toler013 = 2.5000000000000017e-10;\n+\n+// Test data for n=100.\n+// max(|f - f_GSL|): 3.1225022567582528e-17\n+// max(|f - f_GSL| / |f_GSL|): 8.7701893132122237e-14\n+const testcase_sph_bessel<double>\n+data014[21] =\n+{\n+  { 0.0000000000000000, 100, 0.0000000000000000 },\n+  { 5.5356503033889938e-120, 100, 5.0000000000000000 },\n+  { 5.8320401820058771e-90, 100, 10.000000000000000 },\n+  { 1.7406387750766626e-72, 100, 15.000000000000000 },\n+  { 3.5152711125317012e-60, 100, 20.000000000000000 },\n+  { 9.8455459353815965e-51, 100, 25.000000000000000 },\n+  { 4.0888596744301583e-43, 100, 30.000000000000000 },\n+  { 8.8975854911133939e-37, 100, 35.000000000000000 },\n+  { 2.1513492547733828e-31, 100, 40.000000000000000 },\n+  { 9.3673586994539108e-27, 100, 45.000000000000000 },\n+  { 1.0190122629310471e-22, 100, 50.000000000000000 },\n+  { 3.4887804977690388e-19, 100, 55.000000000000000 },\n+  { 4.4442883425555593e-16, 100, 60.000000000000000 },\n+  { 2.3832619568710723e-13, 100, 65.000000000000000 },\n+  { 5.8948384175607987e-11, 100, 70.000000000000000 },\n+  { 7.1884446357022277e-09, 100, 75.000000000000000 },\n+  { 4.5247964400095002e-07, 100, 80.000000000000000 },\n+  { 1.5096093228779032e-05, 100, 85.000000000000000 },\n+  { 0.00026825172647807507, 100, 90.000000000000000 },\n+  { 0.0024744308520581117, 100, 95.000000000000000 },\n+  { 0.010880477011438350, 100, 100.00000000000000 },\n+};\n+const double toler014 = 5.0000000000000029e-12;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_sph_bessel<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::sph_bessel(data[i].n, data[i].x);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  test(data009, toler009);\n+  test(data010, toler010);\n+  test(data011, toler011);\n+  test(data012, toler012);\n+  test(data013, toler013);\n+  test(data014, toler014);\n+  return 0;\n+}"}, {"sha": "3ad65a23e998d2d471805cbc3ed146b74ce005d3", "filename": "libstdc++-v3/testsuite/special_functions/19_sph_bessel/compile.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F19_sph_bessel%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F19_sph_bessel%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F19_sph_bessel%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.19 sph_bessel\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+  unsigned int n = 0;\n+\n+  std::sph_bessel(n, xf);\n+  std::sph_besself(n, xf);\n+  std::sph_bessel(n, xd);\n+  std::sph_bessel(n, xl);\n+  std::sph_bessell(n, xl);\n+\n+  return;\n+}\n+"}, {"sha": "86a5d76ea3c490fb8d767badd80e64ad5e3a5c82", "filename": "libstdc++-v3/testsuite/special_functions/19_sph_bessel/compile_2.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F19_sph_bessel%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F19_sph_bessel%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F19_sph_bessel%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.19 sph_bessel\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+  unsigned int n = 0;\n+\n+  sph_bessel(n, xf);\n+  sph_besself(n, xf);\n+  sph_bessel(n, xd);\n+  sph_bessel(n, xl);\n+  sph_bessell(n, xl);\n+\n+  return;\n+}\n+"}, {"sha": "caa7aff820e539b54ef92bc3eb378c645a2b469f", "filename": "libstdc++-v3/testsuite/special_functions/20_sph_legendre/check_nan.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,58 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.20 sph_legendre\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+\n+  float thetaf = std::numeric_limits<float>::quiet_NaN();\n+  double thetad = std::numeric_limits<double>::quiet_NaN();\n+  long double thetal = std::numeric_limits<long double>::quiet_NaN();\n+  unsigned int l = 2, m = 1;\n+\n+  float a = std::sph_legendre(l, m, thetaf);\n+  float b = std::sph_legendref(l, m, thetaf);\n+  double c = std::sph_legendre(l, m, thetad);\n+  long double d = std::sph_legendre(l, m, thetal);\n+  long double e = std::sph_legendrel(l, m, thetal);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "994054a59121d9c2775aab550973d19c6f175653", "filename": "libstdc++-v3/testsuite/special_functions/20_sph_legendre/check_value.cc", "status": "added", "additions": 1944, "deletions": 0, "changes": 1944, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,1944 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  sph_legendre\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+\n+// Test data for l=0, m=0.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_sph_legendre<double>\n+data001[21] =\n+{\n+  { 0.28209479177387814, 0, 0, \n+\t  0.0000000000000000 },\n+  { 0.28209479177387814, 0, 0, \n+\t  0.15707963267948966 },\n+  { 0.28209479177387814, 0, 0, \n+\t  0.31415926535897931 },\n+  { 0.28209479177387814, 0, 0, \n+\t  0.47123889803846897 },\n+  { 0.28209479177387814, 0, 0, \n+\t  0.62831853071795862 },\n+  { 0.28209479177387814, 0, 0, \n+\t  0.78539816339744828 },\n+  { 0.28209479177387814, 0, 0, \n+\t  0.94247779607693793 },\n+  { 0.28209479177387814, 0, 0, \n+\t  1.0995574287564276 },\n+  { 0.28209479177387814, 0, 0, \n+\t  1.2566370614359172 },\n+  { 0.28209479177387814, 0, 0, \n+\t  1.4137166941154069 },\n+  { 0.28209479177387814, 0, 0, \n+\t  1.5707963267948966 },\n+  { 0.28209479177387814, 0, 0, \n+\t  1.7278759594743860 },\n+  { 0.28209479177387814, 0, 0, \n+\t  1.8849555921538759 },\n+  { 0.28209479177387814, 0, 0, \n+\t  2.0420352248333655 },\n+  { 0.28209479177387814, 0, 0, \n+\t  2.1991148575128552 },\n+  { 0.28209479177387814, 0, 0, \n+\t  2.3561944901923448 },\n+  { 0.28209479177387814, 0, 0, \n+\t  2.5132741228718345 },\n+  { 0.28209479177387814, 0, 0, \n+\t  2.6703537555513241 },\n+  { 0.28209479177387814, 0, 0, \n+\t  2.8274333882308138 },\n+  { 0.28209479177387814, 0, 0, \n+\t  2.9845130209103035 },\n+  { 0.28209479177387814, 0, 0, \n+\t  3.1415926535897931 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+\n+// Test data for l=1, m=0.\n+// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+const testcase_sph_legendre<double>\n+data002[21] =\n+{\n+  { 0.48860251190291992, 1, 0, \n+\t  0.0000000000000000 },\n+  { 0.48258700419201100, 1, 0, \n+\t  0.15707963267948966 },\n+  { 0.46468860282345231, 1, 0, \n+\t  0.31415926535897931 },\n+  { 0.43534802584032634, 1, 0, \n+\t  0.47123889803846897 },\n+  { 0.39528773562374975, 1, 0, \n+\t  0.62831853071795862 },\n+  { 0.34549414947133550, 1, 0, \n+\t  0.78539816339744828 },\n+  { 0.28719335072959390, 1, 0, \n+\t  0.94247779607693793 },\n+  { 0.22182089855280449, 1, 0, \n+\t  1.0995574287564276 },\n+  { 0.15098647967228981, 1, 0, \n+\t  1.2566370614359172 },\n+  { 0.076434272566846345, 1, 0, \n+\t  1.4137166941154069 },\n+  { 2.9918275112863369e-17, 1, 0, \n+\t  1.5707963267948966 },\n+  { -0.076434272566846179, 1, 0, \n+\t  1.7278759594743860 },\n+  { -0.15098647967228976, 1, 0, \n+\t  1.8849555921538759 },\n+  { -0.22182089855280443, 1, 0, \n+\t  2.0420352248333655 },\n+  { -0.28719335072959384, 1, 0, \n+\t  2.1991148575128552 },\n+  { -0.34549414947133544, 1, 0, \n+\t  2.3561944901923448 },\n+  { -0.39528773562374969, 1, 0, \n+\t  2.5132741228718345 },\n+  { -0.43534802584032628, 1, 0, \n+\t  2.6703537555513241 },\n+  { -0.46468860282345231, 1, 0, \n+\t  2.8274333882308138 },\n+  { -0.48258700419201095, 1, 0, \n+\t  2.9845130209103035 },\n+  { -0.48860251190291992, 1, 0, \n+\t  3.1415926535897931 },\n+};\n+const double toler002 = 2.5000000000000020e-13;\n+\n+// Test data for l=1, m=1.\n+// max(|f - f_GSL|): 2.2204460492503131e-16\n+// max(|f - f_GSL| / |f_GSL|): 7.7031500691196945e-16\n+const testcase_sph_legendre<double>\n+data003[21] =\n+{\n+  { 0.0000000000000000, 1, 1, \n+\t  0.0000000000000000 },\n+  { -0.054047192447077917, 1, 1, \n+\t  0.15707963267948966 },\n+  { -0.10676356364376104, 1, 1, \n+\t  0.31415926535897931 },\n+  { -0.15685106157558129, 1, 1, \n+\t  0.47123889803846897 },\n+  { -0.20307636581258243, 1, 1, \n+\t  0.62831853071795862 },\n+  { -0.24430125595146007, 1, 1, \n+\t  0.78539816339744828 },\n+  { -0.27951063837942880, 1, 1, \n+\t  0.94247779607693793 },\n+  { -0.30783754124787122, 1, 1, \n+\t  1.0995574287564276 },\n+  { -0.32858446219656556, 1, 1, \n+\t  1.2566370614359172 },\n+  { -0.34124054317667202, 1, 1, \n+\t  1.4137166941154069 },\n+  { -0.34549414947133567, 1, 1, \n+\t  1.5707963267948966 },\n+  { -0.34124054317667202, 1, 1, \n+\t  1.7278759594743860 },\n+  { -0.32858446219656556, 1, 1, \n+\t  1.8849555921538759 },\n+  { -0.30783754124787127, 1, 1, \n+\t  2.0420352248333655 },\n+  { -0.27951063837942880, 1, 1, \n+\t  2.1991148575128552 },\n+  { -0.24430125595146013, 1, 1, \n+\t  2.3561944901923448 },\n+  { -0.20307636581258248, 1, 1, \n+\t  2.5132741228718345 },\n+  { -0.15685106157558140, 1, 1, \n+\t  2.6703537555513241 },\n+  { -0.10676356364376104, 1, 1, \n+\t  2.8274333882308138 },\n+  { -0.054047192447078167, 1, 1, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 1, 1, \n+\t  3.1415926535897931 },\n+};\n+const double toler003 = 2.5000000000000020e-13;\n+\n+// Test data for l=2, m=0.\n+// max(|f - f_GSL|): 5.5511151231257827e-17\n+// max(|f - f_GSL| / |f_GSL|): 3.0159263334953002e-15\n+const testcase_sph_legendre<double>\n+data004[21] =\n+{\n+  { 0.63078313050504009, 2, 0, \n+\t  0.0000000000000000 },\n+  { 0.60762858760316607, 2, 0, \n+\t  0.15707963267948966 },\n+  { 0.54043148688396569, 2, 0, \n+\t  0.31415926535897931 },\n+  { 0.43576954875556589, 2, 0, \n+\t  0.47123889803846897 },\n+  { 0.30388781294457579, 2, 0, \n+\t  0.62831853071795862 },\n+  { 0.15769578262626011, 2, 0, \n+\t  0.78539816339744828 },\n+  { 0.011503752307944235, 2, 0, \n+\t  0.94247779607693793 },\n+  { -0.12037798350304570, 2, 0, \n+\t  1.0995574287564276 },\n+  { -0.22503992163144576, 2, 0, \n+\t  1.2566370614359172 },\n+  { -0.29223702235064597, 2, 0, \n+\t  1.4137166941154069 },\n+  { -0.31539156525252005, 2, 0, \n+\t  1.5707963267948966 },\n+  { -0.29223702235064608, 2, 0, \n+\t  1.7278759594743860 },\n+  { -0.22503992163144584, 2, 0, \n+\t  1.8849555921538759 },\n+  { -0.12037798350304584, 2, 0, \n+\t  2.0420352248333655 },\n+  { 0.011503752307944164, 2, 0, \n+\t  2.1991148575128552 },\n+  { 0.15769578262625994, 2, 0, \n+\t  2.3561944901923448 },\n+  { 0.30388781294457567, 2, 0, \n+\t  2.5132741228718345 },\n+  { 0.43576954875556562, 2, 0, \n+\t  2.6703537555513241 },\n+  { 0.54043148688396569, 2, 0, \n+\t  2.8274333882308138 },\n+  { 0.60762858760316585, 2, 0, \n+\t  2.9845130209103035 },\n+  { 0.63078313050504009, 2, 0, \n+\t  3.1415926535897931 },\n+};\n+const double toler004 = 2.5000000000000020e-13;\n+\n+// Test data for l=2, m=1.\n+// max(|f - f_GSL|): 2.2204460492503131e-16\n+// max(|f - f_GSL| / |f_GSL|): 8.1384221730905279e-16\n+const testcase_sph_legendre<double>\n+data005[21] =\n+{\n+  { 0.0000000000000000, 2, 1, \n+\t  0.0000000000000000 },\n+  { -0.11936529291378727, 2, 1, \n+\t  0.15707963267948966 },\n+  { -0.22704627929027449, 2, 1, \n+\t  0.31415926535897931 },\n+  { -0.31250239392538215, 2, 1, \n+\t  0.47123889803846897 },\n+  { -0.36736859691086526, 2, 1, \n+\t  0.62831853071795862 },\n+  { -0.38627420202318979, 2, 1, \n+\t  0.78539816339744828 },\n+  { -0.36736859691086526, 2, 1, \n+\t  0.94247779607693793 },\n+  { -0.31250239392538226, 2, 1, \n+\t  1.0995574287564276 },\n+  { -0.22704627929027438, 2, 1, \n+\t  1.2566370614359172 },\n+  { -0.11936529291378740, 2, 1, \n+\t  1.4137166941154069 },\n+  { -4.7304946510089748e-17, 2, 1, \n+\t  1.5707963267948966 },\n+  { 0.11936529291378714, 2, 1, \n+\t  1.7278759594743860 },\n+  { 0.22704627929027429, 2, 1, \n+\t  1.8849555921538759 },\n+  { 0.31250239392538220, 2, 1, \n+\t  2.0420352248333655 },\n+  { 0.36736859691086521, 2, 1, \n+\t  2.1991148575128552 },\n+  { 0.38627420202318979, 2, 1, \n+\t  2.3561944901923448 },\n+  { 0.36736859691086526, 2, 1, \n+\t  2.5132741228718345 },\n+  { 0.31250239392538232, 2, 1, \n+\t  2.6703537555513241 },\n+  { 0.22704627929027449, 2, 1, \n+\t  2.8274333882308138 },\n+  { 0.11936529291378781, 2, 1, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 2, 1, \n+\t  3.1415926535897931 },\n+};\n+const double toler005 = 2.5000000000000020e-13;\n+\n+// Test data for l=2, m=2.\n+// max(|f - f_GSL|): 1.6653345369377348e-16\n+// max(|f - f_GSL| / |f_GSL|): 6.2393366429561032e-16\n+const testcase_sph_legendre<double>\n+data006[21] =\n+{\n+  { 0.0000000000000000, 2, 2, \n+\t  0.0000000000000000 },\n+  { 0.0094528025561622549, 2, 2, \n+\t  0.15707963267948966 },\n+  { 0.036885904048903795, 2, 2, \n+\t  0.31415926535897931 },\n+  { 0.079613961366457681, 2, 2, \n+\t  0.47123889803846897 },\n+  { 0.13345445455470123, 2, 2, \n+\t  0.62831853071795862 },\n+  { 0.19313710101159484, 2, 2, \n+\t  0.78539816339744828 },\n+  { 0.25281974746848851, 2, 2, \n+\t  0.94247779607693793 },\n+  { 0.30666024065673209, 2, 2, \n+\t  1.0995574287564276 },\n+  { 0.34938829797428600, 2, 2, \n+\t  1.2566370614359172 },\n+  { 0.37682139946702747, 2, 2, \n+\t  1.4137166941154069 },\n+  { 0.38627420202318979, 2, 2, \n+\t  1.5707963267948966 },\n+  { 0.37682139946702753, 2, 2, \n+\t  1.7278759594743860 },\n+  { 0.34938829797428606, 2, 2, \n+\t  1.8849555921538759 },\n+  { 0.30666024065673209, 2, 2, \n+\t  2.0420352248333655 },\n+  { 0.25281974746848856, 2, 2, \n+\t  2.1991148575128552 },\n+  { 0.19313710101159492, 2, 2, \n+\t  2.3561944901923448 },\n+  { 0.13345445455470126, 2, 2, \n+\t  2.5132741228718345 },\n+  { 0.079613961366457764, 2, 2, \n+\t  2.6703537555513241 },\n+  { 0.036885904048903795, 2, 2, \n+\t  2.8274333882308138 },\n+  { 0.0094528025561623433, 2, 2, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 2, 2, \n+\t  3.1415926535897931 },\n+};\n+const double toler006 = 2.5000000000000020e-13;\n+\n+// Test data for l=5, m=0.\n+// max(|f - f_GSL|): 1.0547118733938987e-15\n+// max(|f - f_GSL| / |f_GSL|): 2.9385557676213648e-15\n+const testcase_sph_legendre<double>\n+data007[21] =\n+{\n+  { 0.93560257962738880, 5, 0, \n+\t  0.0000000000000000 },\n+  { 0.77014422942079963, 5, 0, \n+\t  0.15707963267948966 },\n+  { 0.35892185032365165, 5, 0, \n+\t  0.31415926535897931 },\n+  { -0.090214932090594294, 5, 0, \n+\t  0.47123889803846897 },\n+  { -0.36214460396518883, 5, 0, \n+\t  0.62831853071795862 },\n+  { -0.35145955579226906, 5, 0, \n+\t  0.78539816339744828 },\n+  { -0.11441703594725168, 5, 0, \n+\t  0.94247779607693793 },\n+  { 0.17248966720808107, 5, 0, \n+\t  1.0995574287564276 },\n+  { 0.32128384287200523, 5, 0, \n+\t  1.2566370614359172 },\n+  { 0.24377632246714948, 5, 0, \n+\t  1.4137166941154069 },\n+  { 1.0741712853887702e-16, 5, 0, \n+\t  1.5707963267948966 },\n+  { -0.24377632246714911, 5, 0, \n+\t  1.7278759594743860 },\n+  { -0.32128384287200534, 5, 0, \n+\t  1.8849555921538759 },\n+  { -0.17248966720808132, 5, 0, \n+\t  2.0420352248333655 },\n+  { 0.11441703594725151, 5, 0, \n+\t  2.1991148575128552 },\n+  { 0.35145955579226895, 5, 0, \n+\t  2.3561944901923448 },\n+  { 0.36214460396518905, 5, 0, \n+\t  2.5132741228718345 },\n+  { 0.090214932090594752, 5, 0, \n+\t  2.6703537555513241 },\n+  { -0.35892185032365165, 5, 0, \n+\t  2.8274333882308138 },\n+  { -0.77014422942079852, 5, 0, \n+\t  2.9845130209103035 },\n+  { -0.93560257962738880, 5, 0, \n+\t  3.1415926535897931 },\n+};\n+const double toler007 = 2.5000000000000020e-13;\n+\n+// Test data for l=5, m=1.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.4161260272615034e-15\n+const testcase_sph_legendre<double>\n+data008[21] =\n+{\n+  { 0.0000000000000000, 5, 1, \n+\t  0.0000000000000000 },\n+  { -0.36712373713318258, 5, 1, \n+\t  0.15707963267948966 },\n+  { -0.54610329010534753, 5, 1, \n+\t  0.31415926535897931 },\n+  { -0.45381991493631763, 5, 1, \n+\t  0.47123889803846897 },\n+  { -0.15679720635769961, 5, 1, \n+\t  0.62831853071795862 },\n+  { 0.16985499419838601, 5, 1, \n+\t  0.78539816339744828 },\n+  { 0.34468004499725180, 5, 1, \n+\t  0.94247779607693793 },\n+  { 0.28349471119605985, 5, 1, \n+\t  1.0995574287564276 },\n+  { 0.044286619339675815, 5, 1, \n+\t  1.2566370614359172 },\n+  { -0.21193784177193470, 5, 1, \n+\t  1.4137166941154069 },\n+  { -0.32028164857621527, 5, 1, \n+\t  1.5707963267948966 },\n+  { -0.21193784177193514, 5, 1, \n+\t  1.7278759594743860 },\n+  { 0.044286619339675592, 5, 1, \n+\t  1.8849555921538759 },\n+  { 0.28349471119605968, 5, 1, \n+\t  2.0420352248333655 },\n+  { 0.34468004499725174, 5, 1, \n+\t  2.1991148575128552 },\n+  { 0.16985499419838640, 5, 1, \n+\t  2.3561944901923448 },\n+  { -0.15679720635769906, 5, 1, \n+\t  2.5132741228718345 },\n+  { -0.45381991493631768, 5, 1, \n+\t  2.6703537555513241 },\n+  { -0.54610329010534753, 5, 1, \n+\t  2.8274333882308138 },\n+  { -0.36712373713318402, 5, 1, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 5, 1, \n+\t  3.1415926535897931 },\n+};\n+const double toler008 = 2.5000000000000020e-13;\n+\n+// Test data for l=5, m=2.\n+// max(|f - f_GSL|): 1.6653345369377348e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.0636916515712721e-15\n+const testcase_sph_legendre<double>\n+data009[21] =\n+{\n+  { 0.0000000000000000, 5, 2, \n+\t  0.0000000000000000 },\n+  { 0.078919441745546146, 5, 2, \n+\t  0.15707963267948966 },\n+  { 0.26373799140437987, 5, 2, \n+\t  0.31415926535897931 },\n+  { 0.43002359842080096, 5, 2, \n+\t  0.47123889803846897 },\n+  { 0.45642486439050983, 5, 2, \n+\t  0.62831853071795862 },\n+  { 0.29959604906083293, 5, 2, \n+\t  0.78539816339744828 },\n+  { 0.023781239849532215, 5, 2, \n+\t  0.94247779607693793 },\n+  { -0.23313989334673826, 5, 2, \n+\t  1.0995574287564276 },\n+  { -0.33799912776303714, 5, 2, \n+\t  1.2566370614359172 },\n+  { -0.23964508489529743, 5, 2, \n+\t  1.4137166941154069 },\n+  { -1.0377480524338170e-16, 5, 2, \n+\t  1.5707963267948966 },\n+  { 0.23964508489529704, 5, 2, \n+\t  1.7278759594743860 },\n+  { 0.33799912776303714, 5, 2, \n+\t  1.8849555921538759 },\n+  { 0.23313989334673843, 5, 2, \n+\t  2.0420352248333655 },\n+  { -0.023781239849531916, 5, 2, \n+\t  2.1991148575128552 },\n+  { -0.29959604906083276, 5, 2, \n+\t  2.3561944901923448 },\n+  { -0.45642486439050983, 5, 2, \n+\t  2.5132741228718345 },\n+  { -0.43002359842080118, 5, 2, \n+\t  2.6703537555513241 },\n+  { -0.26373799140437987, 5, 2, \n+\t  2.8274333882308138 },\n+  { -0.078919441745546867, 5, 2, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 5, 2, \n+\t  3.1415926535897931 },\n+};\n+const double toler009 = 2.5000000000000020e-13;\n+\n+// Test data for l=5, m=5.\n+// max(|f - f_GSL|): 1.1102230246251565e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.2617219728402347e-16\n+const testcase_sph_legendre<double>\n+data010[21] =\n+{\n+  { 0.0000000000000000, 5, 5, \n+\t  0.0000000000000000 },\n+  { -4.3481439097909148e-05, 5, 5, \n+\t  0.15707963267948966 },\n+  { -0.0013078367086431812, 5, 5, \n+\t  0.31415926535897931 },\n+  { -0.0089510818191922761, 5, 5, \n+\t  0.47123889803846897 },\n+  { -0.032563803777573896, 5, 5, \n+\t  0.62831853071795862 },\n+  { -0.082047757105021241, 5, 5, \n+\t  0.78539816339744828 },\n+  { -0.16085328164143814, 5, 5, \n+\t  0.94247779607693793 },\n+  { -0.26064303436645381, 5, 5, \n+\t  1.0995574287564276 },\n+  { -0.36113811790820571, 5, 5, \n+\t  1.2566370614359172 },\n+  { -0.43625592459446139, 5, 5, \n+\t  1.4137166941154069 },\n+  { -0.46413220344085809, 5, 5, \n+\t  1.5707963267948966 },\n+  { -0.43625592459446155, 5, 5, \n+\t  1.7278759594743860 },\n+  { -0.36113811790820577, 5, 5, \n+\t  1.8849555921538759 },\n+  { -0.26064303436645386, 5, 5, \n+\t  2.0420352248333655 },\n+  { -0.16085328164143822, 5, 5, \n+\t  2.1991148575128552 },\n+  { -0.082047757105021310, 5, 5, \n+\t  2.3561944901923448 },\n+  { -0.032563803777573910, 5, 5, \n+\t  2.5132741228718345 },\n+  { -0.0089510818191923004, 5, 5, \n+\t  2.6703537555513241 },\n+  { -0.0013078367086431812, 5, 5, \n+\t  2.8274333882308138 },\n+  { -4.3481439097910151e-05, 5, 5, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 5, 5, \n+\t  3.1415926535897931 },\n+};\n+const double toler010 = 2.5000000000000020e-13;\n+\n+// Test data for l=10, m=0.\n+// max(|f - f_GSL|): 9.9920072216264089e-16\n+// max(|f - f_GSL| / |f_GSL|): 2.2266594990531305e-15\n+const testcase_sph_legendre<double>\n+data011[21] =\n+{\n+  { 1.2927207364566027, 10, 0, \n+\t  0.0000000000000000 },\n+  { 0.55288895150522555, 10, 0, \n+\t  0.15707963267948966 },\n+  { -0.44874428379711545, 10, 0, \n+\t  0.31415926535897931 },\n+  { -0.25532095827149687, 10, 0, \n+\t  0.47123889803846897 },\n+  { 0.36625249688013961, 10, 0, \n+\t  0.62831853071795862 },\n+  { 0.14880806329084206, 10, 0, \n+\t  0.78539816339744828 },\n+  { -0.33533356797848757, 10, 0, \n+\t  0.94247779607693793 },\n+  { -0.080639967662335665, 10, 0, \n+\t  1.0995574287564276 },\n+  { 0.32197986450174521, 10, 0, \n+\t  1.2566370614359172 },\n+  { 0.025713542103667848, 10, 0, \n+\t  1.4137166941154069 },\n+  { -0.31813049373736707, 10, 0, \n+\t  1.5707963267948966 },\n+  { 0.025713542103666699, 10, 0, \n+\t  1.7278759594743860 },\n+  { 0.32197986450174543, 10, 0, \n+\t  1.8849555921538759 },\n+  { -0.080639967662335096, 10, 0, \n+\t  2.0420352248333655 },\n+  { -0.33533356797848757, 10, 0, \n+\t  2.1991148575128552 },\n+  { 0.14880806329084156, 10, 0, \n+\t  2.3561944901923448 },\n+  { 0.36625249688013994, 10, 0, \n+\t  2.5132741228718345 },\n+  { -0.25532095827149576, 10, 0, \n+\t  2.6703537555513241 },\n+  { -0.44874428379711545, 10, 0, \n+\t  2.8274333882308138 },\n+  { 0.55288895150522011, 10, 0, \n+\t  2.9845130209103035 },\n+  { 1.2927207364566027, 10, 0, \n+\t  3.1415926535897931 },\n+};\n+const double toler011 = 2.5000000000000020e-13;\n+\n+// Test data for l=10, m=1.\n+// max(|f - f_GSL|): 1.4432899320127035e-15\n+// max(|f - f_GSL| / |f_GSL|): 4.9708436073954521e-15\n+const testcase_sph_legendre<double>\n+data012[21] =\n+{\n+  { 0.0000000000000000, 10, 1, \n+\t  0.0000000000000000 },\n+  { -0.74373723919063894, 10, 1, \n+\t  0.15707963267948966 },\n+  { -0.29035110456209601, 10, 1, \n+\t  0.31415926535897931 },\n+  { 0.42219282075271530, 10, 1, \n+\t  0.47123889803846897 },\n+  { 0.17109256898931269, 10, 1, \n+\t  0.62831853071795862 },\n+  { -0.35583574648544281, 10, 1, \n+\t  0.78539816339744828 },\n+  { -0.10089212303543979, 10, 1, \n+\t  0.94247779607693793 },\n+  { 0.32997652649321085, 10, 1, \n+\t  1.0995574287564276 },\n+  { 0.047416376890032939, 10, 1, \n+\t  1.2566370614359172 },\n+  { -0.31999356750295660, 10, 1, \n+\t  1.4137166941154069 },\n+  { -2.0430664782290766e-16, 10, 1, \n+\t  1.5707963267948966 },\n+  { 0.31999356750295660, 10, 1, \n+\t  1.7278759594743860 },\n+  { -0.047416376890032544, 10, 1, \n+\t  1.8849555921538759 },\n+  { -0.32997652649321091, 10, 1, \n+\t  2.0420352248333655 },\n+  { 0.10089212303543935, 10, 1, \n+\t  2.1991148575128552 },\n+  { 0.35583574648544292, 10, 1, \n+\t  2.3561944901923448 },\n+  { -0.17109256898931161, 10, 1, \n+\t  2.5132741228718345 },\n+  { -0.42219282075271569, 10, 1, \n+\t  2.6703537555513241 },\n+  { 0.29035110456209601, 10, 1, \n+\t  2.8274333882308138 },\n+  { 0.74373723919064050, 10, 1, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 10, 1, \n+\t  3.1415926535897931 },\n+};\n+const double toler012 = 2.5000000000000020e-13;\n+\n+// Test data for l=10, m=2.\n+// max(|f - f_GSL|): 3.3306690738754696e-16\n+// max(|f - f_GSL| / |f_GSL|): 3.3968188217108871e-15\n+const testcase_sph_legendre<double>\n+data013[21] =\n+{\n+  { 0.0000000000000000, 10, 2, \n+\t  0.0000000000000000 },\n+  { 0.34571695599980246, 10, 2, \n+\t  0.15707963267948966 },\n+  { 0.62485535978198059, 10, 2, \n+\t  0.31415926535897931 },\n+  { 0.098210039644716252, 10, 2, \n+\t  0.47123889803846897 },\n+  { -0.41494799233049684, 10, 2, \n+\t  0.62831853071795862 },\n+  { -0.081698973831472732, 10, 2, \n+\t  0.78539816339744828 },\n+  { 0.35253132222271277, 10, 2, \n+\t  0.94247779607693793 },\n+  { 0.049026298555980979, 10, 2, \n+\t  1.0995574287564276 },\n+  { -0.32791246874130792, 10, 2, \n+\t  1.2566370614359172 },\n+  { -0.016196782433946885, 10, 2, \n+\t  1.4137166941154069 },\n+  { 0.32106263400438328, 10, 2, \n+\t  1.5707963267948966 },\n+  { -0.016196782433945761, 10, 2, \n+\t  1.7278759594743860 },\n+  { -0.32791246874130803, 10, 2, \n+\t  1.8849555921538759 },\n+  { 0.049026298555980424, 10, 2, \n+\t  2.0420352248333655 },\n+  { 0.35253132222271266, 10, 2, \n+\t  2.1991148575128552 },\n+  { -0.081698973831472121, 10, 2, \n+\t  2.3561944901923448 },\n+  { -0.41494799233049695, 10, 2, \n+\t  2.5132741228718345 },\n+  { 0.098210039644715197, 10, 2, \n+\t  2.6703537555513241 },\n+  { 0.62485535978198059, 10, 2, \n+\t  2.8274333882308138 },\n+  { 0.34571695599980545, 10, 2, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 10, 2, \n+\t  3.1415926535897931 },\n+};\n+const double toler013 = 2.5000000000000020e-13;\n+\n+// Test data for l=10, m=5.\n+// max(|f - f_GSL|): 3.6082248300317588e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.6350423942234514e-15\n+const testcase_sph_legendre<double>\n+data014[21] =\n+{\n+  { 0.0000000000000000, 10, 5, \n+\t  0.0000000000000000 },\n+  { -0.0030300124052750196, 10, 5, \n+\t  0.15707963267948966 },\n+  { -0.070348585248056802, 10, 5, \n+\t  0.31415926535897931 },\n+  { -0.30055029290703639, 10, 5, \n+\t  0.47123889803846897 },\n+  { -0.49987818144009155, 10, 5, \n+\t  0.62831853071795862 },\n+  { -0.28108771757150108, 10, 5, \n+\t  0.78539816339744828 },\n+  { 0.22068081187249292, 10, 5, \n+\t  0.94247779607693793 },\n+  { 0.33689502212592121, 10, 5, \n+\t  1.0995574287564276 },\n+  { -0.086095515520764110, 10, 5, \n+\t  1.2566370614359172 },\n+  { -0.33935827318511558, 10, 5, \n+\t  1.4137166941154069 },\n+  { -1.9213014340664578e-16, 10, 5, \n+\t  1.5707963267948966 },\n+  { 0.33935827318511552, 10, 5, \n+\t  1.7278759594743860 },\n+  { 0.086095515520764512, 10, 5, \n+\t  1.8849555921538759 },\n+  { -0.33689502212592087, 10, 5, \n+\t  2.0420352248333655 },\n+  { -0.22068081187249344, 10, 5, \n+\t  2.1991148575128552 },\n+  { 0.28108771757150064, 10, 5, \n+\t  2.3561944901923448 },\n+  { 0.49987818144009138, 10, 5, \n+\t  2.5132741228718345 },\n+  { 0.30055029290703672, 10, 5, \n+\t  2.6703537555513241 },\n+  { 0.070348585248056802, 10, 5, \n+\t  2.8274333882308138 },\n+  { 0.0030300124052750873, 10, 5, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 10, 5, \n+\t  3.1415926535897931 },\n+};\n+const double toler014 = 2.5000000000000020e-13;\n+\n+// Test data for l=10, m=10.\n+// max(|f - f_GSL|): 9.9920072216264089e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.9163828344752537e-15\n+const testcase_sph_legendre<double>\n+data015[21] =\n+{\n+  { 0.0000000000000000, 10, 10, \n+\t  0.0000000000000000 },\n+  { 4.7624282733343473e-09, 10, 10, \n+\t  0.15707963267948966 },\n+  { 4.3085156534549772e-06, 10, 10, \n+\t  0.31415926535897931 },\n+  { 0.00020182347649472387, 10, 10, \n+\t  0.47123889803846897 },\n+  { 0.0026711045506511684, 10, 10, \n+\t  0.62831853071795862 },\n+  { 0.016957196623256909, 10, 10, \n+\t  0.78539816339744828 },\n+  { 0.065174916004990341, 10, 10, \n+\t  0.94247779607693793 },\n+  { 0.17112476903017845, 10, 10, \n+\t  1.0995574287564276 },\n+  { 0.32852414199733554, 10, 10, \n+\t  1.2566370614359172 },\n+  { 0.47940582314838287, 10, 10, \n+\t  1.4137166941154069 },\n+  { 0.54263029194422152, 10, 10, \n+\t  1.5707963267948966 },\n+  { 0.47940582314838309, 10, 10, \n+\t  1.7278759594743860 },\n+  { 0.32852414199733571, 10, 10, \n+\t  1.8849555921538759 },\n+  { 0.17112476903017856, 10, 10, \n+\t  2.0420352248333655 },\n+  { 0.065174916004990410, 10, 10, \n+\t  2.1991148575128552 },\n+  { 0.016957196623256943, 10, 10, \n+\t  2.3561944901923448 },\n+  { 0.0026711045506511706, 10, 10, \n+\t  2.5132741228718345 },\n+  { 0.00020182347649472493, 10, 10, \n+\t  2.6703537555513241 },\n+  { 4.3085156534549772e-06, 10, 10, \n+\t  2.8274333882308138 },\n+  { 4.7624282733345673e-09, 10, 10, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 10, 10, \n+\t  3.1415926535897931 },\n+};\n+const double toler015 = 2.5000000000000020e-13;\n+\n+// Test data for l=20, m=0.\n+// max(|f - f_GSL|): 1.2212453270876722e-15\n+// max(|f - f_GSL| / |f_GSL|): 2.1900476331757668e-15\n+const testcase_sph_legendre<double>\n+data016[21] =\n+{\n+  { 1.8062879984608917, 20, 0, \n+\t  0.0000000000000000 },\n+  { -0.58906549291415933, 20, 0, \n+\t  0.15707963267948966 },\n+  { 0.45624611402342408, 20, 0, \n+\t  0.31415926535897931 },\n+  { -0.39955402700466724, 20, 0, \n+\t  0.47123889803846897 },\n+  { 0.36818552901640772, 20, 0, \n+\t  0.62831853071795862 },\n+  { -0.34873131330857743, 20, 0, \n+\t  0.78539816339744828 },\n+  { 0.33600882829186507, 20, 0, \n+\t  0.94247779607693793 },\n+  { -0.32759286308122931, 20, 0, \n+\t  1.0995574287564276 },\n+  { 0.32222458068091325, 20, 0, \n+\t  1.2566370614359172 },\n+  { -0.31922731037135965, 20, 0, \n+\t  1.4137166941154069 },\n+  { 0.31826262039531755, 20, 0, \n+\t  1.5707963267948966 },\n+  { -0.31922731037135987, 20, 0, \n+\t  1.7278759594743860 },\n+  { 0.32222458068091342, 20, 0, \n+\t  1.8849555921538759 },\n+  { -0.32759286308122942, 20, 0, \n+\t  2.0420352248333655 },\n+  { 0.33600882829186518, 20, 0, \n+\t  2.1991148575128552 },\n+  { -0.34873131330857782, 20, 0, \n+\t  2.3561944901923448 },\n+  { 0.36818552901640805, 20, 0, \n+\t  2.5132741228718345 },\n+  { -0.39955402700466824, 20, 0, \n+\t  2.6703537555513241 },\n+  { 0.45624611402342408, 20, 0, \n+\t  2.8274333882308138 },\n+  { -0.58906549291416732, 20, 0, \n+\t  2.9845130209103035 },\n+  { 1.8062879984608917, 20, 0, \n+\t  3.1415926535897931 },\n+};\n+const double toler016 = 2.5000000000000020e-13;\n+\n+// Test data for l=20, m=1.\n+// max(|f - f_GSL|): 2.8310687127941492e-15\n+// max(|f - f_GSL| / |f_GSL|): 9.0837292708194213e-15\n+const testcase_sph_legendre<double>\n+data017[21] =\n+{\n+  { 0.0000000000000000, 20, 1, \n+\t  0.0000000000000000 },\n+  { -0.45905213045060256, 20, 1, \n+\t  0.15707963267948966 },\n+  { 0.31166370423309253, 20, 1, \n+\t  0.31415926535897931 },\n+  { -0.23278757741246778, 20, 1, \n+\t  0.47123889803846897 },\n+  { 0.17937240823504172, 20, 1, \n+\t  0.62831853071795862 },\n+  { -0.13857299972299839, 20, 1, \n+\t  0.78539816339744828 },\n+  { 0.10495324841927722, 20, 1, \n+\t  0.94247779607693793 },\n+  { -0.075707774352163665, 20, 1, \n+\t  1.0995574287564276 },\n+  { 0.049168697683476224, 20, 1, \n+\t  1.2566370614359172 },\n+  { -0.024216050551253303, 20, 1, \n+\t  1.4137166941154069 },\n+  { 3.9938443510694349e-16, 20, 1, \n+\t  1.5707963267948966 },\n+  { 0.024216050551250919, 20, 1, \n+\t  1.7278759594743860 },\n+  { -0.049168697683475482, 20, 1, \n+\t  1.8849555921538759 },\n+  { 0.075707774352163068, 20, 1, \n+\t  2.0420352248333655 },\n+  { -0.10495324841927638, 20, 1, \n+\t  2.1991148575128552 },\n+  { 0.13857299972299741, 20, 1, \n+\t  2.3561944901923448 },\n+  { -0.17937240823503983, 20, 1, \n+\t  2.5132741228718345 },\n+  { 0.23278757741246703, 20, 1, \n+\t  2.6703537555513241 },\n+  { -0.31166370423309253, 20, 1, \n+\t  2.8274333882308138 },\n+  { 0.45905213045059046, 20, 1, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 20, 1, \n+\t  3.1415926535897931 },\n+};\n+const double toler017 = 5.0000000000000039e-13;\n+\n+// Test data for l=20, m=2.\n+// max(|f - f_GSL|): 2.3314683517128287e-15\n+// max(|f - f_GSL| / |f_GSL|): 2.6675898738403374e-15\n+const testcase_sph_legendre<double>\n+data018[21] =\n+{\n+  { 0.0000000000000000, 20, 2, \n+\t  0.0000000000000000 },\n+  { 0.87399805141574394, 20, 2, \n+\t  0.15707963267948966 },\n+  { -0.55116854080895061, 20, 2, \n+\t  0.31415926535897931 },\n+  { 0.44520137308557572, 20, 2, \n+\t  0.47123889803846897 },\n+  { -0.39321637877908228, 20, 2, \n+\t  0.62831853071795862 },\n+  { 0.36312025711350937, 20, 2, \n+\t  0.78539816339744828 },\n+  { -0.34427103004873116, 20, 2, \n+\t  0.94247779607693793 },\n+  { 0.33214917638387642, 20, 2, \n+\t  1.0995574287564276 },\n+  { -0.32455734448839091, 20, 2, \n+\t  1.2566370614359172 },\n+  { 0.32036529628513238, 20, 2, \n+\t  1.4137166941154069 },\n+  { -0.31902310563819986, 20, 2, \n+\t  1.5707963267948966 },\n+  { 0.32036529628513266, 20, 2, \n+\t  1.7278759594743860 },\n+  { -0.32455734448839102, 20, 2, \n+\t  1.8849555921538759 },\n+  { 0.33214917638387659, 20, 2, \n+\t  2.0420352248333655 },\n+  { -0.34427103004873105, 20, 2, \n+\t  2.1991148575128552 },\n+  { 0.36312025711350981, 20, 2, \n+\t  2.3561944901923448 },\n+  { -0.39321637877908278, 20, 2, \n+\t  2.5132741228718345 },\n+  { 0.44520137308557650, 20, 2, \n+\t  2.6703537555513241 },\n+  { -0.55116854080895061, 20, 2, \n+\t  2.8274333882308138 },\n+  { 0.87399805141574527, 20, 2, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 20, 2, \n+\t  3.1415926535897931 },\n+};\n+const double toler018 = 2.5000000000000020e-13;\n+\n+// Test data for l=20, m=5.\n+// max(|f - f_GSL|): 3.5388358909926865e-16\n+// max(|f - f_GSL| / |f_GSL|): 1.2458491381272207e-14\n+const testcase_sph_legendre<double>\n+data019[21] =\n+{\n+  { 0.0000000000000000, 20, 5, \n+\t  0.0000000000000000 },\n+  { -0.10024848623504863, 20, 5, \n+\t  0.15707963267948966 },\n+  { -0.68115361075940484, 20, 5, \n+\t  0.31415926535897931 },\n+  { 0.31774532551156298, 20, 5, \n+\t  0.47123889803846897 },\n+  { -0.16011868165390544, 20, 5, \n+\t  0.62831853071795862 },\n+  { 0.085844143304115578, 20, 5, \n+\t  0.78539816339744828 },\n+  { -0.047467540840864568, 20, 5, \n+\t  0.94247779607693793 },\n+  { 0.026283575189471796, 20, 5, \n+\t  1.0995574287564276 },\n+  { -0.013891104052597688, 20, 5, \n+\t  1.2566370614359172 },\n+  { 0.0059873308239496957, 20, 5, \n+\t  1.4137166941154069 },\n+  { 3.9355286582083095e-16, 20, 5, \n+\t  1.5707963267948966 },\n+  { -0.0059873308239519014, 20, 5, \n+\t  1.7278759594743860 },\n+  { 0.013891104052598547, 20, 5, \n+\t  1.8849555921538759 },\n+  { -0.026283575189472864, 20, 5, \n+\t  2.0420352248333655 },\n+  { 0.047467540840865928, 20, 5, \n+\t  2.1991148575128552 },\n+  { -0.085844143304117007, 20, 5, \n+\t  2.3561944901923448 },\n+  { 0.16011868165390658, 20, 5, \n+\t  2.5132741228718345 },\n+  { -0.31774532551156381, 20, 5, \n+\t  2.6703537555513241 },\n+  { 0.68115361075940484, 20, 5, \n+\t  2.8274333882308138 },\n+  { 0.10024848623505046, 20, 5, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 20, 5, \n+\t  3.1415926535897931 },\n+};\n+const double toler019 = 1.0000000000000008e-12;\n+\n+// Test data for l=20, m=10.\n+// max(|f - f_GSL|): 1.6653345369377348e-15\n+// max(|f - f_GSL| / |f_GSL|): 2.0744116940226714e-14\n+const testcase_sph_legendre<double>\n+data020[21] =\n+{\n+  { 0.0000000000000000, 20, 10, \n+\t  0.0000000000000000 },\n+  { 3.0595797603706485e-05, 20, 10, \n+\t  0.15707963267948966 },\n+  { 0.015924453916397002, 20, 10, \n+\t  0.31415926535897931 },\n+  { 0.26588079118745744, 20, 10, \n+\t  0.47123889803846897 },\n+  { 0.54045081420686869, 20, 10, \n+\t  0.62831853071795862 },\n+  { -0.28215279394285531, 20, 10, \n+\t  0.78539816339744828 },\n+  { 0.0085297337582245884, 20, 10, \n+\t  0.94247779607693793 },\n+  { 0.16930127953533738, 20, 10, \n+\t  1.0995574287564276 },\n+  { -0.27215134048018325, 20, 10, \n+\t  1.2566370614359172 },\n+  { 0.32456597088029526, 20, 10, \n+\t  1.4137166941154069 },\n+  { -0.34057893241353715, 20, 10, \n+\t  1.5707963267948966 },\n+  { 0.32456597088029449, 20, 10, \n+\t  1.7278759594743860 },\n+  { -0.27215134048018291, 20, 10, \n+\t  1.8849555921538759 },\n+  { 0.16930127953533675, 20, 10, \n+\t  2.0420352248333655 },\n+  { 0.0085297337582257438, 20, 10, \n+\t  2.1991148575128552 },\n+  { -0.28215279394285619, 20, 10, \n+\t  2.3561944901923448 },\n+  { 0.54045081420686736, 20, 10, \n+\t  2.5132741228718345 },\n+  { 0.26588079118745828, 20, 10, \n+\t  2.6703537555513241 },\n+  { 0.015924453916397002, 20, 10, \n+\t  2.8274333882308138 },\n+  { 3.0595797603707888e-05, 20, 10, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 20, 10, \n+\t  3.1415926535897931 },\n+};\n+const double toler020 = 2.5000000000000015e-12;\n+\n+// Test data for l=20, m=20.\n+// max(|f - f_GSL|): 3.3306690738754696e-16\n+// max(|f - f_GSL| / |f_GSL|): 8.6795105199201385e-16\n+const testcase_sph_legendre<double>\n+data021[21] =\n+{\n+  { 0.0000000000000000, 20, 20, \n+\t  0.0000000000000000 },\n+  { 4.9264471419246231e-17, 20, 20, \n+\t  0.15707963267948966 },\n+  { 4.0321091681531780e-11, 20, 20, \n+\t  0.31415926535897931 },\n+  { 8.8474944184471664e-08, 20, 20, \n+\t  0.47123889803846897 },\n+  { 1.5497395129387764e-05, 20, 20, \n+\t  0.62831853071795862 },\n+  { 0.00062457564282984495, 20, 20, \n+\t  0.78539816339744828 },\n+  { 0.0092265192458967568, 20, 20, \n+\t  0.94247779607693793 },\n+  { 0.063606673236323297, 20, 20, \n+\t  1.0995574287564276 },\n+  { 0.23442909509776316, 20, 20, \n+\t  1.2566370614359172 },\n+  { 0.49921030481087009, 20, 20, \n+\t  1.4137166941154069 },\n+  { 0.63956545825776223, 20, 20, \n+\t  1.5707963267948966 },\n+  { 0.49921030481087064, 20, 20, \n+\t  1.7278759594743860 },\n+  { 0.23442909509776336, 20, 20, \n+\t  1.8849555921538759 },\n+  { 0.063606673236323380, 20, 20, \n+\t  2.0420352248333655 },\n+  { 0.0092265192458967742, 20, 20, \n+\t  2.1991148575128552 },\n+  { 0.00062457564282984766, 20, 20, \n+\t  2.3561944901923448 },\n+  { 1.5497395129387791e-05, 20, 20, \n+\t  2.5132741228718345 },\n+  { 8.8474944184472617e-08, 20, 20, \n+\t  2.6703537555513241 },\n+  { 4.0321091681531780e-11, 20, 20, \n+\t  2.8274333882308138 },\n+  { 4.9264471419250786e-17, 20, 20, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 20, 20, \n+\t  3.1415926535897931 },\n+};\n+const double toler021 = 2.5000000000000020e-13;\n+\n+// Test data for l=50, m=0.\n+// max(|f - f_GSL|): 4.8849813083506888e-15\n+// max(|f - f_GSL| / |f_GSL|): 9.2046020313085697e-15\n+const testcase_sph_legendre<double>\n+data022[21] =\n+{\n+  { 2.8350175706934717, 50, 0, \n+\t  0.0000000000000000 },\n+  { 0.53157537495174900, 50, 0, \n+\t  0.15707963267948966 },\n+  { -0.46056183476301255, 50, 0, \n+\t  0.31415926535897931 },\n+  { -0.24876032079677909, 50, 0, \n+\t  0.47123889803846897 },\n+  { 0.36926172901532522, 50, 0, \n+\t  0.62831853071795862 },\n+  { 0.14571730283563575, 50, 0, \n+\t  0.78539816339744828 },\n+  { -0.33636199170850806, 50, 0, \n+\t  0.94247779607693793 },\n+  { -0.079132716267091507, 50, 0, \n+\t  1.0995574287564276 },\n+  { 0.32232921941301451, 50, 0, \n+\t  1.2566370614359172 },\n+  { 0.025253991969481544, 50, 0, \n+\t  1.4137166941154069 },\n+  { -0.31830208724152359, 50, 0, \n+\t  1.5707963267948966 },\n+  { 0.025253991969476332, 50, 0, \n+\t  1.7278759594743860 },\n+  { 0.32232921941301479, 50, 0, \n+\t  1.8849555921538759 },\n+  { -0.079132716267088510, 50, 0, \n+\t  2.0420352248333655 },\n+  { -0.33636199170850883, 50, 0, \n+\t  2.1991148575128552 },\n+  { 0.14571730283563347, 50, 0, \n+\t  2.3561944901923448 },\n+  { 0.36926172901532667, 50, 0, \n+\t  2.5132741228718345 },\n+  { -0.24876032079677354, 50, 0, \n+\t  2.6703537555513241 },\n+  { -0.46056183476301255, 50, 0, \n+\t  2.8274333882308138 },\n+  { 0.53157537495172758, 50, 0, \n+\t  2.9845130209103035 },\n+  { 2.8350175706934717, 50, 0, \n+\t  3.1415926535897931 },\n+};\n+const double toler022 = 5.0000000000000039e-13;\n+\n+// Test data for l=50, m=1.\n+// max(|f - f_GSL|): 4.2743586448068527e-15\n+// max(|f - f_GSL| / |f_GSL|): 1.3104848798660735e-14\n+const testcase_sph_legendre<double>\n+data023[21] =\n+{\n+  { 0.0000000000000000, 50, 1, \n+\t  0.0000000000000000 },\n+  { -0.63751752155226260, 50, 1, \n+\t  0.15707963267948966 },\n+  { -0.32616619317604606, 50, 1, \n+\t  0.31415926535897931 },\n+  { 0.40649930826162850, 50, 1, \n+\t  0.47123889803846897 },\n+  { 0.18473991408344057, 50, 1, \n+\t  0.62831853071795862 },\n+  { -0.35083930302013117, 50, 1, \n+\t  0.78539816339744828 },\n+  { -0.10755382110947125, 50, 1, \n+\t  0.94247779607693793 },\n+  { 0.32822568316499900, 50, 1, \n+\t  1.0995574287564276 },\n+  { 0.050286056609797389, 50, 1, \n+\t  1.2566370614359172 },\n+  { -0.31935368562159644, 50, 1, \n+\t  1.4137166941154069 },\n+  { -9.8421602686195941e-16, 50, 1, \n+\t  1.5707963267948966 },\n+  { 0.31935368562159716, 50, 1, \n+\t  1.7278759594743860 },\n+  { -0.050286056609795446, 50, 1, \n+\t  1.8849555921538759 },\n+  { -0.32822568316499912, 50, 1, \n+\t  2.0420352248333655 },\n+  { 0.10755382110946902, 50, 1, \n+\t  2.1991148575128552 },\n+  { 0.35083930302013205, 50, 1, \n+\t  2.3561944901923448 },\n+  { -0.18473991408343635, 50, 1, \n+\t  2.5132741228718345 },\n+  { -0.40649930826163011, 50, 1, \n+\t  2.6703537555513241 },\n+  { 0.32616619317604606, 50, 1, \n+\t  2.8274333882308138 },\n+  { 0.63751752155228247, 50, 1, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 50, 1, \n+\t  3.1415926535897931 },\n+};\n+const double toler023 = 1.0000000000000008e-12;\n+\n+// Test data for l=50, m=2.\n+// max(|f - f_GSL|): 7.5495165674510645e-15\n+// max(|f - f_GSL| / |f_GSL|): 2.0277903864891892e-14\n+const testcase_sph_legendre<double>\n+data024[21] =\n+{\n+  { 0.0000000000000000, 50, 2, \n+\t  0.0000000000000000 },\n+  { -0.37230261163838724, 50, 2, \n+\t  0.15707963267948966 },\n+  { 0.50051599680316194, 50, 2, \n+\t  0.31415926535897931 },\n+  { 0.21724795180329495, 50, 2, \n+\t  0.47123889803846897 },\n+  { -0.37948127307610924, 50, 2, \n+\t  0.62831853071795862 },\n+  { -0.13187372121003396, 50, 2, \n+\t  0.78539816339744828 },\n+  { 0.33959009162400228, 50, 2, \n+\t  0.94247779607693793 },\n+  { 0.072537503112489563, 50, 2, \n+\t  1.0995574287564276 },\n+  { -0.32310306941855266, 50, 2, \n+\t  1.2566370614359172 },\n+  { -0.023259822816436588, 50, 2, \n+\t  1.4137166941154069 },\n+  { 0.31842698506357275, 50, 2, \n+\t  1.5707963267948966 },\n+  { -0.023259822816431196, 50, 2, \n+\t  1.7278759594743860 },\n+  { -0.32310306941855316, 50, 2, \n+\t  1.8849555921538759 },\n+  { 0.072537503112487453, 50, 2, \n+\t  2.0420352248333655 },\n+  { 0.33959009162400267, 50, 2, \n+\t  2.1991148575128552 },\n+  { -0.13187372121003124, 50, 2, \n+\t  2.3561944901923448 },\n+  { -0.37948127307611107, 50, 2, \n+\t  2.5132741228718345 },\n+  { 0.21724795180329090, 50, 2, \n+\t  2.6703537555513241 },\n+  { 0.50051599680316194, 50, 2, \n+\t  2.8274333882308138 },\n+  { -0.37230261163837081, 50, 2, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 50, 2, \n+\t  3.1415926535897931 },\n+};\n+const double toler024 = 2.5000000000000015e-12;\n+\n+// Test data for l=50, m=5.\n+// max(|f - f_GSL|): 4.3021142204224816e-16\n+// max(|f - f_GSL| / |f_GSL|): 8.9548506383410822e-15\n+const testcase_sph_legendre<double>\n+data025[21] =\n+{\n+  { 0.0000000000000000, 50, 5, \n+\t  0.0000000000000000 },\n+  { -0.57750385903193124, 50, 5, \n+\t  0.15707963267948966 },\n+  { 0.077360497065588632, 50, 5, \n+\t  0.31415926535897931 },\n+  { 0.47707267400540226, 50, 5, \n+\t  0.47123889803846897 },\n+  { 0.055370615126630517, 50, 5, \n+\t  0.62831853071795862 },\n+  { -0.37629451847202833, 50, 5, \n+\t  0.78539816339744828 },\n+  { -0.048042277801960784, 50, 5, \n+\t  0.94247779607693793 },\n+  { 0.33619379362228718, 50, 5, \n+\t  1.0995574287564276 },\n+  { 0.025265227185718764, 50, 5, \n+\t  1.2566370614359172 },\n+  { -0.32083679430964535, 50, 5, \n+\t  1.4137166941154069 },\n+  { -9.8189201019751884e-16, 50, 5, \n+\t  1.5707963267948966 },\n+  { 0.32083679430964579, 50, 5, \n+\t  1.7278759594743860 },\n+  { -0.025265227185716790, 50, 5, \n+\t  1.8849555921538759 },\n+  { -0.33619379362228752, 50, 5, \n+\t  2.0420352248333655 },\n+  { 0.048042277801958064, 50, 5, \n+\t  2.1991148575128552 },\n+  { 0.37629451847202872, 50, 5, \n+\t  2.3561944901923448 },\n+  { -0.055370615126626811, 50, 5, \n+\t  2.5132741228718345 },\n+  { -0.47707267400540176, 50, 5, \n+\t  2.6703537555513241 },\n+  { -0.077360497065588632, 50, 5, \n+\t  2.8274333882308138 },\n+  { 0.57750385903191603, 50, 5, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 50, 5, \n+\t  3.1415926535897931 },\n+};\n+const double toler025 = 5.0000000000000039e-13;\n+\n+// Test data for l=50, m=10.\n+// max(|f - f_GSL|): 1.3322676295501878e-15\n+// max(|f - f_GSL| / |f_GSL|): 6.0812430149180488e-15\n+const testcase_sph_legendre<double>\n+data026[21] =\n+{\n+  { 0.0000000000000000, 50, 10, \n+\t  0.0000000000000000 },\n+  { 0.15606941844800776, 50, 10, \n+\t  0.15707963267948966 },\n+  { -0.53748868836814501, 50, 10, \n+\t  0.31415926535897931 },\n+  { -0.49304919025183969, 50, 10, \n+\t  0.47123889803846897 },\n+  { -0.26267582750428364, 50, 10, \n+\t  0.62831853071795862 },\n+  { 0.22058983666314153, 50, 10, \n+\t  0.78539816339744828 },\n+  { 0.32936725160671754, 50, 10, \n+\t  0.94247779607693793 },\n+  { -0.092053311559447959, 50, 10, \n+\t  1.0995574287564276 },\n+  { -0.32542913495935522, 50, 10, \n+\t  1.2566370614359172 },\n+  { 0.025673223789103351, 50, 10, \n+\t  1.4137166941154069 },\n+  { 0.32150019350255743, 50, 10, \n+\t  1.5707963267948966 },\n+  { 0.025673223789108836, 50, 10, \n+\t  1.7278759594743860 },\n+  { -0.32542913495935510, 50, 10, \n+\t  1.8849555921538759 },\n+  { -0.092053311559449819, 50, 10, \n+\t  2.0420352248333655 },\n+  { 0.32936725160671687, 50, 10, \n+\t  2.1991148575128552 },\n+  { 0.22058983666314380, 50, 10, \n+\t  2.3561944901923448 },\n+  { -0.26267582750427920, 50, 10, \n+\t  2.5132741228718345 },\n+  { -0.49304919025184135, 50, 10, \n+\t  2.6703537555513241 },\n+  { -0.53748868836814501, 50, 10, \n+\t  2.8274333882308138 },\n+  { 0.15606941844801256, 50, 10, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 50, 10, \n+\t  3.1415926535897931 },\n+};\n+const double toler026 = 5.0000000000000039e-13;\n+\n+// Test data for l=50, m=20.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 6.0930911637998029e-15\n+const testcase_sph_legendre<double>\n+data027[21] =\n+{\n+  { 0.0000000000000000, 50, 20, \n+\t  0.0000000000000000 },\n+  { 3.0409598712833246e-07, 50, 20, \n+\t  0.15707963267948966 },\n+  { 0.030940518122882274, 50, 20, \n+\t  0.31415926535897931 },\n+  { 0.64134588721659802, 50, 20, \n+\t  0.47123889803846897 },\n+  { 0.29895244392136405, 50, 20, \n+\t  0.62831853071795862 },\n+  { 0.25309324781873871, 50, 20, \n+\t  0.78539816339744828 },\n+  { 0.34368634714931717, 50, 20, \n+\t  0.94247779607693793 },\n+  { 0.33996764360663945, 50, 20, \n+\t  1.0995574287564276 },\n+  { 0.12866267745104024, 50, 20, \n+\t  1.2566370614359172 },\n+  { -0.18201114398922874, 50, 20, \n+\t  1.4137166941154069 },\n+  { -0.33216683431510857, 50, 20, \n+\t  1.5707963267948966 },\n+  { -0.18201114398923302, 50, 20, \n+\t  1.7278759594743860 },\n+  { 0.12866267745103857, 50, 20, \n+\t  1.8849555921538759 },\n+  { 0.33996764360663895, 50, 20, \n+\t  2.0420352248333655 },\n+  { 0.34368634714931812, 50, 20, \n+\t  2.1991148575128552 },\n+  { 0.25309324781874126, 50, 20, \n+\t  2.3561944901923448 },\n+  { 0.29895244392136594, 50, 20, \n+\t  2.5132741228718345 },\n+  { 0.64134588721659869, 50, 20, \n+\t  2.6703537555513241 },\n+  { 0.030940518122882274, 50, 20, \n+\t  2.8274333882308138 },\n+  { 3.0409598712835887e-07, 50, 20, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 50, 20, \n+\t  3.1415926535897931 },\n+};\n+const double toler027 = 5.0000000000000039e-13;\n+\n+// Test data for l=50, m=50.\n+// max(|f - f_GSL|): 1.2323475573339238e-14\n+// max(|f - f_GSL| / |f_GSL|): 1.6099735616249234e-14\n+const testcase_sph_legendre<double>\n+data028[21] =\n+{\n+  { 0.0000000000000000, 50, 50, \n+\t  0.0000000000000000 },\n+  { 4.1649039898151844e-41, 50, 50, \n+\t  0.15707963267948966 },\n+  { 2.5240684647724192e-26, 50, 50, \n+\t  0.31415926535897931 },\n+  { 5.6927376423967334e-18, 50, 50, \n+\t  0.47123889803846897 },\n+  { 2.3116239814797057e-12, 50, 50, \n+\t  0.62831853071795862 },\n+  { 2.3835981241325056e-08, 50, 50, \n+\t  0.78539816339744828 },\n+  { 1.9992410287270356e-05, 50, 50, \n+\t  0.94247779607693793 },\n+  { 0.0024947505670829834, 50, 50, \n+\t  1.0995574287564276 },\n+  { 0.065057774647971231, 50, 50, \n+\t  1.2566370614359172 },\n+  { 0.43050607056732243, 50, 50, \n+\t  1.4137166941154069 },\n+  { 0.79980281171531975, 50, 50, \n+\t  1.5707963267948966 },\n+  { 0.43050607056732360, 50, 50, \n+\t  1.7278759594743860 },\n+  { 0.065057774647971398, 50, 50, \n+\t  1.8849555921538759 },\n+  { 0.0024947505670829899, 50, 50, \n+\t  2.0420352248333655 },\n+  { 1.9992410287270427e-05, 50, 50, \n+\t  2.1991148575128552 },\n+  { 2.3835981241325311e-08, 50, 50, \n+\t  2.3561944901923448 },\n+  { 2.3116239814797222e-12, 50, 50, \n+\t  2.5132741228718345 },\n+  { 5.6927376423968952e-18, 50, 50, \n+\t  2.6703537555513241 },\n+  { 2.5240684647724192e-26, 50, 50, \n+\t  2.8274333882308138 },\n+  { 4.1649039898161316e-41, 50, 50, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 50, 50, \n+\t  3.1415926535897931 },\n+};\n+const double toler028 = 1.0000000000000008e-12;\n+\n+// Test data for l=100, m=0.\n+// max(|f - f_GSL|): 7.5495165674510645e-15\n+// max(|f - f_GSL| / |f_GSL|): 1.2423065089723510e-14\n+const testcase_sph_legendre<double>\n+data029[21] =\n+{\n+  { 3.9993839251484076, 100, 0, \n+\t  0.0000000000000000 },\n+  { -0.60770160285935426, 100, 0, \n+\t  0.15707963267948966 },\n+  { 0.46193027883955923, 100, 0, \n+\t  0.31415926535897931 },\n+  { -0.40218718869815234, 100, 0, \n+\t  0.47123889803846897 },\n+  { 0.36960201406910725, 100, 0, \n+\t  0.62831853071795862 },\n+  { -0.34953726547378389, 100, 0, \n+\t  0.78539816339744828 },\n+  { 0.33646959352497829, 100, 0, \n+\t  0.94247779607693793 },\n+  { -0.32784733067663224, 100, 0, \n+\t  1.0995574287564276 },\n+  { 0.32235624474047969, 100, 0, \n+\t  1.2566370614359172 },\n+  { -0.31929330706601350, 100, 0, \n+\t  1.4137166941154069 },\n+  { 0.31830791662110325, 100, 0, \n+\t  1.5707963267948966 },\n+  { -0.31929330706601405, 100, 0, \n+\t  1.7278759594743860 },\n+  { 0.32235624474048036, 100, 0, \n+\t  1.8849555921538759 },\n+  { -0.32784733067663357, 100, 0, \n+\t  2.0420352248333655 },\n+  { 0.33646959352498013, 100, 0, \n+\t  2.1991148575128552 },\n+  { -0.34953726547378589, 100, 0, \n+\t  2.3561944901923448 },\n+  { 0.36960201406911097, 100, 0, \n+\t  2.5132741228718345 },\n+  { -0.40218718869815723, 100, 0, \n+\t  2.6703537555513241 },\n+  { 0.46193027883955923, 100, 0, \n+\t  2.8274333882308138 },\n+  { -0.60770160285939456, 100, 0, \n+\t  2.9845130209103035 },\n+  { 3.9993839251484076, 100, 0, \n+\t  3.1415926535897931 },\n+};\n+const double toler029 = 1.0000000000000008e-12;\n+\n+// Test data for l=100, m=1.\n+// max(|f - f_GSL|): 4.1078251911130792e-15\n+// max(|f - f_GSL| / |f_GSL|): 1.5162419336330716e-14\n+const testcase_sph_legendre<double>\n+data030[21] =\n+{\n+  { 0.0000000000000000, 100, 1, \n+\t  0.0000000000000000 },\n+  { -0.50851949013719866, 100, 1, \n+\t  0.15707963267948966 },\n+  { 0.33129641402221749, 100, 1, \n+\t  0.31415926535897931 },\n+  { -0.24390405750942512, 100, 1, \n+\t  0.47123889803846897 },\n+  { 0.18659755088414104, 100, 1, \n+\t  0.62831853071795862 },\n+  { -0.14355908970517178, 100, 1, \n+\t  0.78539816339744828 },\n+  { 0.10844906813251107, 100, 1, \n+\t  0.94247779607693793 },\n+  { -0.078100088690857675, 100, 1, \n+\t  1.0995574287564276 },\n+  { 0.050670002998302717, 100, 1, \n+\t  1.2566370614359172 },\n+  { -0.024941251747138900, 100, 1, \n+\t  1.4137166941154069 },\n+  { 1.9587949830851623e-15, 100, 1, \n+\t  1.5707963267948966 },\n+  { 0.024941251747127875, 100, 1, \n+\t  1.7278759594743860 },\n+  { -0.050670002998298824, 100, 1, \n+\t  1.8849555921538759 },\n+  { 0.078100088690853664, 100, 1, \n+\t  2.0420352248333655 },\n+  { -0.10844906813250622, 100, 1, \n+\t  2.1991148575128552 },\n+  { 0.14355908970516626, 100, 1, \n+\t  2.3561944901923448 },\n+  { -0.18659755088413388, 100, 1, \n+\t  2.5132741228718345 },\n+  { 0.24390405750941679, 100, 1, \n+\t  2.6703537555513241 },\n+  { -0.33129641402221749, 100, 1, \n+\t  2.8274333882308138 },\n+  { 0.50851949013714159, 100, 1, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 100, 1, \n+\t  3.1415926535897931 },\n+};\n+const double toler030 = 1.0000000000000008e-12;\n+\n+// Test data for l=100, m=2.\n+// max(|f - f_GSL|): 2.7755575615628914e-15\n+// max(|f - f_GSL| / |f_GSL|): 5.7552022268705475e-15\n+const testcase_sph_legendre<double>\n+data031[21] =\n+{\n+  { 0.0000000000000000, 100, 2, \n+\t  0.0000000000000000 },\n+  { 0.67166274297193962, 100, 2, \n+\t  0.15707963267948966 },\n+  { -0.48226933687995360, 100, 2, \n+\t  0.31415926535897931 },\n+  { 0.41175421895715525, 100, 2, \n+\t  0.47123889803846897 },\n+  { -0.37475021787822438, 100, 2, \n+\t  0.62831853071795862 },\n+  { 0.35242909383605225, 100, 2, \n+\t  0.78539816339744828 },\n+  { -0.33807110409160063, 100, 2, \n+\t  0.94247779607693793 },\n+  { 0.32867180390710077, 100, 2, \n+\t  1.0995574287564276 },\n+  { -0.32271583790278502, 100, 2, \n+\t  1.2566370614359172 },\n+  { 0.31940354677687444, 100, 2, \n+\t  1.4137166941154069 },\n+  { -0.31833943693772526, 100, 2, \n+\t  1.5707963267948966 },\n+  { 0.31940354677687555, 100, 2, \n+\t  1.7278759594743860 },\n+  { -0.32271583790278552, 100, 2, \n+\t  1.8849555921538759 },\n+  { 0.32867180390710193, 100, 2, \n+\t  2.0420352248333655 },\n+  { -0.33807110409160157, 100, 2, \n+\t  2.1991148575128552 },\n+  { 0.35242909383605503, 100, 2, \n+\t  2.3561944901923448 },\n+  { -0.37475021787822776, 100, 2, \n+\t  2.5132741228718345 },\n+  { 0.41175421895716052, 100, 2, \n+\t  2.6703537555513241 },\n+  { -0.48226933687995360, 100, 2, \n+\t  2.8274333882308138 },\n+  { 0.67166274297196660, 100, 2, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 100, 2, \n+\t  3.1415926535897931 },\n+};\n+const double toler031 = 5.0000000000000039e-13;\n+\n+// Test data for l=100, m=5.\n+// max(|f - f_GSL|): 5.9674487573602164e-16\n+// max(|f - f_GSL| / |f_GSL|): 8.4413588189215985e-15\n+const testcase_sph_legendre<double>\n+data032[21] =\n+{\n+  { 0.0000000000000000, 100, 5, \n+\t  0.0000000000000000 },\n+  { 0.062564361105902272, 100, 5, \n+\t  0.15707963267948966 },\n+  { 0.14179554455879767, 100, 5, \n+\t  0.31415926535897931 },\n+  { -0.14356866942905960, 100, 5, \n+\t  0.47123889803846897 },\n+  { 0.12355483388448550, 100, 5, \n+\t  0.62831853071795862 },\n+  { -0.10090029999681642, 100, 5, \n+\t  0.78539816339744828 },\n+  { 0.078905134460230675, 100, 5, \n+\t  0.94247779607693793 },\n+  { -0.058040182398185071, 100, 5, \n+\t  1.0995574287564276 },\n+  { 0.038142759389482424, 100, 5, \n+\t  1.2566370614359172 },\n+  { -0.018906264170660478, 100, 5, \n+\t  1.4137166941154069 },\n+  { 1.9576303042914544e-15, 100, 5, \n+\t  1.5707963267948966 },\n+  { 0.018906264170649455, 100, 5, \n+\t  1.7278759594743860 },\n+  { -0.038142759389478365, 100, 5, \n+\t  1.8849555921538759 },\n+  { 0.058040182398180429, 100, 5, \n+\t  2.0420352248333655 },\n+  { -0.078905134460225707, 100, 5, \n+\t  2.1991148575128552 },\n+  { 0.10090029999681013, 100, 5, \n+\t  2.3561944901923448 },\n+  { -0.12355483388447824, 100, 5, \n+\t  2.5132741228718345 },\n+  { 0.14356866942904906, 100, 5, \n+\t  2.6703537555513241 },\n+  { -0.14179554455879767, 100, 5, \n+\t  2.8274333882308138 },\n+  { -0.062564361105954577, 100, 5, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 100, 5, \n+\t  3.1415926535897931 },\n+};\n+const double toler032 = 5.0000000000000039e-13;\n+\n+// Test data for l=100, m=10.\n+// max(|f - f_GSL|): 1.7763568394002505e-15\n+// max(|f - f_GSL| / |f_GSL|): 4.0853922061744651e-15\n+const testcase_sph_legendre<double>\n+data033[21] =\n+{\n+  { 0.0000000000000000, 100, 10, \n+\t  0.0000000000000000 },\n+  { -0.75366545187996004, 100, 10, \n+\t  0.15707963267948966 },\n+  { -0.35914570017276798, 100, 10, \n+\t  0.31415926535897931 },\n+  { 0.43480692911578295, 100, 10, \n+\t  0.47123889803846897 },\n+  { -0.40862111080315755, 100, 10, \n+\t  0.62831853071795862 },\n+  { 0.37832688692909411, 100, 10, \n+\t  0.78539816339744828 },\n+  { -0.35484056194773445, 100, 10, \n+\t  0.94247779607693793 },\n+  { 0.33821981171196341, 100, 10, \n+\t  1.0995574287564276 },\n+  { -0.32729120767830594, 100, 10, \n+\t  1.2566370614359172 },\n+  { 0.32110336937091438, 100, 10, \n+\t  1.4137166941154069 },\n+  { -0.31910064020036194, 100, 10, \n+\t  1.5707963267948966 },\n+  { 0.32110336937091460, 100, 10, \n+\t  1.7278759594743860 },\n+  { -0.32729120767830605, 100, 10, \n+\t  1.8849555921538759 },\n+  { 0.33821981171196341, 100, 10, \n+\t  2.0420352248333655 },\n+  { -0.35484056194773461, 100, 10, \n+\t  2.1991148575128552 },\n+  { 0.37832688692909372, 100, 10, \n+\t  2.3561944901923448 },\n+  { -0.40862111080315500, 100, 10, \n+\t  2.5132741228718345 },\n+  { 0.43480692911577751, 100, 10, \n+\t  2.6703537555513241 },\n+  { -0.35914570017276798, 100, 10, \n+\t  2.8274333882308138 },\n+  { -0.75366545187997991, 100, 10, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 100, 10, \n+\t  3.1415926535897931 },\n+};\n+const double toler033 = 2.5000000000000020e-13;\n+\n+// Test data for l=100, m=20.\n+// max(|f - f_GSL|): 9.7144514654701197e-16\n+// max(|f - f_GSL| / |f_GSL|): 2.8802569343392205e-14\n+const testcase_sph_legendre<double>\n+data034[21] =\n+{\n+  { 0.0000000000000000, 100, 20, \n+\t  0.0000000000000000 },\n+  { 0.053569660841553700, 100, 20, \n+\t  0.15707963267948966 },\n+  { 0.57154926874732348, 100, 20, \n+\t  0.31415926535897931 },\n+  { 0.47536909969585633, 100, 20, \n+\t  0.47123889803846897 },\n+  { -0.28882554564109075, 100, 20, \n+\t  0.62831853071795862 },\n+  { 0.020116179014043743, 100, 20, \n+\t  0.78539816339744828 },\n+  { 0.14752195931706563, 100, 20, \n+\t  0.94247779607693793 },\n+  { -0.24069428588868366, 100, 20, \n+\t  1.0995574287564276 },\n+  { 0.29031796025014306, 100, 20, \n+\t  1.2566370614359172 },\n+  { -0.31437256851143458, 100, 20, \n+\t  1.4137166941154069 },\n+  { 0.32153954851141792, 100, 20, \n+\t  1.5707963267948966 },\n+  { -0.31437256851143169, 100, 20, \n+\t  1.7278759594743860 },\n+  { 0.29031796025014139, 100, 20, \n+\t  1.8849555921538759 },\n+  { -0.24069428588868083, 100, 20, \n+\t  2.0420352248333655 },\n+  { 0.14752195931706186, 100, 20, \n+\t  2.1991148575128552 },\n+  { 0.020116179014049562, 100, 20, \n+\t  2.3561944901923448 },\n+  { -0.28882554564109575, 100, 20, \n+\t  2.5132741228718345 },\n+  { 0.47536909969585545, 100, 20, \n+\t  2.6703537555513241 },\n+  { 0.57154926874732348, 100, 20, \n+\t  2.8274333882308138 },\n+  { 0.053569660841557079, 100, 20, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 100, 20, \n+\t  3.1415926535897931 },\n+};\n+const double toler034 = 2.5000000000000015e-12;\n+\n+// Test data for l=100, m=50.\n+// max(|f - f_GSL|): 8.3266726846886741e-15\n+// max(|f - f_GSL| / |f_GSL|): 1.8981734972089879e-14\n+const testcase_sph_legendre<double>\n+data035[21] =\n+{\n+  { 0.0000000000000000, 100, 50, \n+\t  0.0000000000000000 },\n+  { 3.3047910392590615e-21, 100, 50, \n+\t  0.15707963267948966 },\n+  { 1.0592655372554981e-07, 100, 50, \n+\t  0.31415926535897931 },\n+  { 0.080418744223952773, 100, 50, \n+\t  0.47123889803846897 },\n+  { -0.56450600580393095, 100, 50, \n+\t  0.62831853071795862 },\n+  { 0.33338739844742110, 100, 50, \n+\t  0.78539816339744828 },\n+  { 0.39741714816514706, 100, 50, \n+\t  0.94247779607693793 },\n+  { 0.35223993750972243, 100, 50, \n+\t  1.0995574287564276 },\n+  { 0.17885891940721577, 100, 50, \n+\t  1.2566370614359172 },\n+  { -0.15341660126461967, 100, 50, \n+\t  1.4137166941154069 },\n+  { -0.34175924303503102, 100, 50, \n+\t  1.5707963267948966 },\n+  { -0.15341660126462869, 100, 50, \n+\t  1.7278759594743860 },\n+  { 0.17885891940721302, 100, 50, \n+\t  1.8849555921538759 },\n+  { 0.35223993750972105, 100, 50, \n+\t  2.0420352248333655 },\n+  { 0.39741714816514595, 100, 50, \n+\t  2.1991148575128552 },\n+  { 0.33338739844741666, 100, 50, \n+\t  2.3561944901923448 },\n+  { -0.56450600580392973, 100, 50, \n+\t  2.5132741228718345 },\n+  { 0.080418744223953911, 100, 50, \n+\t  2.6703537555513241 },\n+  { 1.0592655372554981e-07, 100, 50, \n+\t  2.8274333882308138 },\n+  { 3.3047910392597822e-21, 100, 50, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 100, 50, \n+\t  3.1415926535897931 },\n+};\n+const double toler035 = 1.0000000000000008e-12;\n+\n+// Test data for l=100, m=100.\n+// max(|f - f_GSL|): 2.3314683517128287e-14\n+// max(|f - f_GSL| / |f_GSL|): 2.6593512237122742e-14\n+const testcase_sph_legendre<double>\n+data036[21] =\n+{\n+  { 0.0000000000000000, 100, 100, \n+\t  0.0000000000000000 },\n+  { 2.5744136608862186e-81, 100, 100, \n+\t  0.15707963267948966 },\n+  { 9.4551974868956498e-52, 100, 100, \n+\t  0.31415926535897931 },\n+  { 4.8096190703397596e-35, 100, 100, \n+\t  0.47123889803846897 },\n+  { 7.9305393636342891e-24, 100, 100, \n+\t  0.62831853071795862 },\n+  { 8.4320740610944858e-16, 100, 100, \n+\t  0.78539816339744828 },\n+  { 5.9319660146027522e-10, 100, 100, \n+\t  0.94247779607693793 },\n+  { 9.2368225946797243e-06, 100, 100, \n+\t  1.0995574287564276 },\n+  { 0.0062815489742044095, 100, 100, \n+\t  1.2566370614359172 },\n+  { 0.27505966018176986, 100, 100, \n+\t  1.4137166941154069 },\n+  { 0.94936713998764621, 100, 100, \n+\t  1.5707963267948966 },\n+  { 0.27505966018177130, 100, 100, \n+\t  1.7278759594743860 },\n+  { 0.0062815489742044433, 100, 100, \n+\t  1.8849555921538759 },\n+  { 9.2368225946797734e-06, 100, 100, \n+\t  2.0420352248333655 },\n+  { 5.9319660146027946e-10, 100, 100, \n+\t  2.1991148575128552 },\n+  { 8.4320740610946652e-16, 100, 100, \n+\t  2.3561944901923448 },\n+  { 7.9305393636344023e-24, 100, 100, \n+\t  2.5132741228718345 },\n+  { 4.8096190703400333e-35, 100, 100, \n+\t  2.6703537555513241 },\n+  { 9.4551974868956498e-52, 100, 100, \n+\t  2.8274333882308138 },\n+  { 2.5744136608873895e-81, 100, 100, \n+\t  2.9845130209103035 },\n+  { 0.0000000000000000, 100, 100, \n+\t  3.1415926535897931 },\n+};\n+const double toler036 = 2.5000000000000015e-12;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_sph_legendre<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+  \t {\n+\tconst Tp f = std::sph_legendre(data[i].l, data[i].m,\n+\t\t     data[i].theta);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  test(data009, toler009);\n+  test(data010, toler010);\n+  test(data011, toler011);\n+  test(data012, toler012);\n+  test(data013, toler013);\n+  test(data014, toler014);\n+  test(data015, toler015);\n+  test(data016, toler016);\n+  test(data017, toler017);\n+  test(data018, toler018);\n+  test(data019, toler019);\n+  test(data020, toler020);\n+  test(data021, toler021);\n+  test(data022, toler022);\n+  test(data023, toler023);\n+  test(data024, toler024);\n+  test(data025, toler025);\n+  test(data026, toler026);\n+  test(data027, toler027);\n+  test(data028, toler028);\n+  test(data029, toler029);\n+  test(data030, toler030);\n+  test(data031, toler031);\n+  test(data032, toler032);\n+  test(data033, toler033);\n+  test(data034, toler034);\n+  test(data035, toler035);\n+  test(data036, toler036);\n+  return 0;\n+}"}, {"sha": "a10e090a0a20decd2df2721e1acb5bbcb54aa2c3", "filename": "libstdc++-v3/testsuite/special_functions/20_sph_legendre/compile.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.20 sph_legendre\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float thetaf = 0.5F;\n+  double thetad = 0.5;\n+  long double thetal = 0.5L;\n+  unsigned int l = 2, m = 1;\n+\n+  std::sph_legendre(l, m, thetaf);\n+  std::sph_legendref(l, m, thetaf);\n+  std::sph_legendre(l, m, thetad);\n+  std::sph_legendre(l, m, thetal);\n+  std::sph_legendrel(l, m, thetal);\n+\n+  return;\n+}\n+"}, {"sha": "c82b29e4f4e16279f273483fe6d51775d55191e5", "filename": "libstdc++-v3/testsuite/special_functions/20_sph_legendre/compile_2.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.20 sph_legendre\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float thetaf = 0.5F;\n+  double thetad = 0.5;\n+  long double thetal = 0.5L;\n+  unsigned int l = 2, m = 1;\n+\n+  sph_legendre(l, m, thetaf);\n+  sph_legendref(l, m, thetaf);\n+  sph_legendre(l, m, thetad);\n+  sph_legendre(l, m, thetal);\n+  sph_legendrel(l, m, thetal);\n+\n+  return;\n+}\n+"}, {"sha": "e85a64323c54b892bb2795c0e92733d30ec084cc", "filename": "libstdc++-v3/testsuite/special_functions/21_sph_neumann/check_nan.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F21_sph_neumann%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F21_sph_neumann%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F21_sph_neumann%2Fcheck_nan.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,58 @@\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.21 sph_neumann\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  unsigned int n = 0;\n+\n+  float a = std::sph_neumann(n, xf);\n+  float b = std::sph_neumannf(n, xf);\n+  double c = std::sph_neumann(n, xd);\n+  long double d = std::sph_neumann(n, xl);\n+  long double e = std::sph_neumannl(n, xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "441594f26152669376cab61b4d87985b1e6892e8", "filename": "libstdc++-v3/testsuite/special_functions/21_sph_neumann/check_value.cc", "status": "added", "additions": 552, "deletions": 0, "changes": 552, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F21_sph_neumann%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F21_sph_neumann%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F21_sph_neumann%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,552 @@\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  sph_neumann\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+\n+// Test data for n=0.\n+// max(|f - f_GSL|): 4.4408920985006262e-16\n+// max(|f - f_GSL| / |f_GSL|): 4.8209634107822837e-15\n+const testcase_sph_neumann<double>\n+data001[20] =\n+{\n+  { -3.8756496868425789, 0, 0.25000000000000000 },\n+  { -1.7551651237807455, 0, 0.50000000000000000 },\n+  { -0.97558515849842786, 0, 0.75000000000000000 },\n+  { -0.54030230586813977, 0, 1.0000000000000000 },\n+  { -0.25225788991621495, 0, 1.2500000000000000 },\n+  { -0.047158134445135273, 0, 1.5000000000000000 },\n+  { 0.10185488894256690, 0, 1.7500000000000000 },\n+  { 0.20807341827357120, 0, 2.0000000000000000 },\n+  { 0.27918827676566177, 0, 2.2500000000000000 },\n+  { 0.32045744621877348, 0, 2.5000000000000000 },\n+  { 0.33610995586635040, 0, 2.7500000000000000 },\n+  { 0.32999749886681512, 0, 3.0000000000000000 },\n+  { 0.30588605417862963, 0, 3.2500000000000000 },\n+  { 0.26755905351165610, 0, 3.5000000000000000 },\n+  { 0.21881582862388288, 0, 3.7500000000000000 },\n+  { 0.16341090521590299, 0, 4.0000000000000000 },\n+  { 0.10496176233265714, 0, 4.2500000000000000 },\n+  { 0.046843510984617719, 0, 4.5000000000000000 },\n+  { -0.0079162427132582220, 0, 4.7500000000000000 },\n+  { -0.056732437092645263, 0, 5.0000000000000000 },\n+};\n+const double toler001 = 2.5000000000000020e-13;\n+\n+// Test data for n=1.\n+// max(|f - f_GSL|): 3.5527136788005009e-15\n+// max(|f - f_GSL| / |f_GSL|): 3.7472288263398607e-15\n+const testcase_sph_neumann<double>\n+data002[20] =\n+{\n+  { -16.492214584388407, 1, 0.25000000000000000 },\n+  { -4.4691813247698970, 1, 0.50000000000000000 },\n+  { -2.2096318913623492, 1, 0.75000000000000000 },\n+  { -1.3817732906760363, 1, 1.0000000000000000 },\n+  { -0.96099400741744090, 1, 1.2500000000000000 },\n+  { -0.69643541403279308, 1, 1.5000000000000000 },\n+  { -0.50407489024649721, 1, 1.7500000000000000 },\n+  { -0.35061200427605527, 1, 2.0000000000000000 },\n+  { -0.22172663116544869, 1, 2.2500000000000000 },\n+  { -0.11120587915407318, 1, 2.5000000000000000 },\n+  { -0.016564013158538646, 1, 2.7500000000000000 },\n+  { 0.062959163602315973, 1, 3.0000000000000000 },\n+  { 0.12740959652576553, 1, 3.2500000000000000 },\n+  { 0.17666922320036457, 1, 3.5000000000000000 },\n+  { 0.21076723929766045, 1, 3.7500000000000000 },\n+  { 0.23005335013095779, 1, 4.0000000000000000 },\n+  { 0.23528261660264485, 1, 4.2500000000000000 },\n+  { 0.22763858414438104, 1, 4.5000000000000000 },\n+  { 0.20871085184465679, 1, 4.7500000000000000 },\n+  { 0.18043836751409864, 1, 5.0000000000000000 },\n+};\n+const double toler002 = 2.5000000000000020e-13;\n+\n+// Test data for n=2.\n+// max(|f - f_GSL|): 5.6843418860808015e-14\n+// max(|f - f_GSL| / |f_GSL|): 2.4702749396271158e-15\n+const testcase_sph_neumann<double>\n+data003[20] =\n+{\n+  { -194.03092532581832, 2, 0.25000000000000000 },\n+  { -25.059922824838637, 2, 0.50000000000000000 },\n+  { -7.8629424069509692, 2, 0.75000000000000000 },\n+  { -3.6050175661599688, 2, 1.0000000000000000 },\n+  { -2.0541277278856431, 2, 1.2500000000000000 },\n+  { -1.3457126936204509, 2, 1.5000000000000000 },\n+  { -0.96598327222227631, 2, 1.7500000000000000 },\n+  { -0.73399142468765399, 2, 2.0000000000000000 },\n+  { -0.57482378498626008, 2, 2.2500000000000000 },\n+  { -0.45390450120366133, 2, 2.5000000000000000 },\n+  { -0.35417978840293796, 2, 2.7500000000000000 },\n+  { -0.26703833526449916, 2, 3.0000000000000000 },\n+  { -0.18827719584715374, 2, 3.2500000000000000 },\n+  { -0.11612829076848646, 2, 3.5000000000000000 },\n+  { -0.050202037185754500, 2, 3.7500000000000000 },\n+  { 0.0091291073823153435, 2, 4.0000000000000000 },\n+  { 0.061120084680974532, 2, 4.2500000000000000 },\n+  { 0.10491554511163632, 2, 4.5000000000000000 },\n+  { 0.13973362282567303, 2, 4.7500000000000000 },\n+  { 0.16499545760110443, 2, 5.0000000000000000 },\n+};\n+const double toler003 = 2.5000000000000020e-13;\n+\n+// Test data for n=5.\n+// max(|f - f_GSL|): 4.6566128730773926e-10\n+// max(|f - f_GSL| / |f_GSL|): 6.3451511503162099e-16\n+const testcase_sph_neumann<double>\n+data004[20] =\n+{\n+  { -3884190.0626637731, 5, 0.25000000000000000 },\n+  { -61327.563166980639, 5, 0.50000000000000000 },\n+  { -5478.9529323190836, 5, 0.75000000000000000 },\n+  { -999.44034339223640, 5, 1.0000000000000000 },\n+  { -270.49720502942358, 5, 1.2500000000000000 },\n+  { -94.236110085232468, 5, 1.5000000000000000 },\n+  { -39.182827786584333, 5, 1.7500000000000000 },\n+  { -18.591445311190984, 5, 2.0000000000000000 },\n+  { -9.7821420203182274, 5, 2.2500000000000000 },\n+  { -5.5991001548063233, 5, 2.5000000000000000 },\n+  { -3.4400655233636823, 5, 2.7500000000000000 },\n+  { -2.2470233284653904, 5, 3.0000000000000000 },\n+  { -1.5491439945779160, 5, 3.2500000000000000 },\n+  { -1.1205896325654248, 5, 3.5000000000000000 },\n+  { -0.84592255605194844, 5, 3.7500000000000000 },\n+  { -0.66280126645045878, 5, 4.0000000000000000 },\n+  { -0.53589374436038528, 5, 4.2500000000000000 },\n+  { -0.44430324229090551, 5, 4.5000000000000000 },\n+  { -0.37520157232899892, 5, 4.7500000000000000 },\n+  { -0.32046504674973919, 5, 5.0000000000000000 },\n+};\n+const double toler004 = 2.5000000000000020e-13;\n+\n+// Test data for n=10.\n+// max(|f - f_GSL|): 0.50000000000000000\n+// max(|f - f_GSL| / |f_GSL|): 1.2712694703401436e-15\n+const testcase_sph_neumann<double>\n+data005[20] =\n+{\n+  { -2750653598174213.5, 10, 0.25000000000000000 },\n+  { -1349739281107.0554, 10, 0.50000000000000000 },\n+  { -15733380424.953760, 10, 0.75000000000000000 },\n+  { -672215008.25620842, 10, 1.0000000000000000 },\n+  { -58607405.988679446, 10, 1.2500000000000000 },\n+  { -8032728.8148234813, 10, 1.5000000000000000 },\n+  { -1505955.5720640516, 10, 1.7500000000000000 },\n+  { -355414.72008543846, 10, 2.0000000000000000 },\n+  { -100086.80374425423, 10, 2.2500000000000000 },\n+  { -32423.794085334419, 10, 2.5000000000000000 },\n+  { -11772.863161809979, 10, 2.7500000000000000 },\n+  { -4699.8591888113924, 10, 3.0000000000000000 },\n+  { -2033.0183273853759, 10, 3.2500000000000000 },\n+  { -942.19075028425493, 10, 3.5000000000000000 },\n+  { -463.65206971202474, 10, 3.7500000000000000 },\n+  { -240.53552987988931, 10, 4.0000000000000000 },\n+  { -130.78478404631085, 10, 4.2500000000000000 },\n+  { -74.170665501737531, 10, 4.5000000000000000 },\n+  { -43.698249898184983, 10, 4.7500000000000000 },\n+  { -26.656114405718711, 10, 5.0000000000000000 },\n+};\n+const double toler005 = 2.5000000000000020e-13;\n+\n+// Test data for n=20.\n+// max(|f - f_GSL|): 2.9514790517935283e+20\n+// max(|f - f_GSL| / |f_GSL|): 1.9896573344672978e-15\n+const testcase_sph_neumann<double>\n+data006[20] =\n+{\n+  { -1.4077591402542251e+36, 20, 0.25000000000000000 },\n+  { -6.7288761838234712e+29, 20, 0.50000000000000000 },\n+  { -1.3544611382105945e+26, 20, 0.75000000000000000 },\n+  { -3.2395922185789833e+23, 20, 1.0000000000000000 },\n+  { -3.0096416715953060e+21, 20, 1.2500000000000000 },\n+  { -6.5999646851668173e+19, 20, 1.5000000000000000 },\n+  { -2.6193364753070735e+18, 20, 1.7500000000000000 },\n+  { -1.6054364928152224e+17, 20, 2.0000000000000000 },\n+  { -13719071872797762., 20, 2.2500000000000000 },\n+  { -1524247248298953.8, 20, 2.5000000000000000 },\n+  { -209484650509384.06, 20, 2.7500000000000000 },\n+  { -34327545666696.488, 20, 3.0000000000000000 },\n+  { -6522260876203.3174, 20, 3.2500000000000000 },\n+  { -1406018871897.2307, 20, 3.5000000000000000 },\n+  { -338025193731.78882, 20, 3.7500000000000000 },\n+  { -89381690326.018677, 20, 4.0000000000000000 },\n+  { -25701805899.474934, 20, 4.2500000000000000 },\n+  { -7961859734.2407761, 20, 4.5000000000000000 },\n+  { -2636237230.0850010, 20, 4.7500000000000000 },\n+  { -926795140.30575466, 20, 5.0000000000000000 },\n+};\n+const double toler006 = 2.5000000000000020e-13;\n+\n+// Test data for n=50.\n+// max(|f - f_GSL|): 2.0859248397665138e+93\n+// max(|f - f_GSL| / |f_GSL|): 7.3237119407125301e-14\n+const testcase_sph_neumann<double>\n+data007[20] =\n+{\n+  { -1.3823742808004061e+109, 50, 0.25000000000000000 },\n+  { -6.1447912922121694e+93, 50, 0.50000000000000000 },\n+  { -6.4348494908900529e+84, 50, 0.75000000000000000 },\n+  { -2.7391922846297569e+78, 50, 1.0000000000000000 },\n+  { -3.1365037573299931e+73, 50, 1.2500000000000000 },\n+  { -2.8821098528635756e+69, 50, 1.5000000000000000 },\n+  { -1.1148255024189452e+66, 50, 1.7500000000000000 },\n+  { -1.2350219443670970e+63, 50, 2.0000000000000000 },\n+  { -3.0565226939717125e+60, 50, 2.2500000000000000 },\n+  { -1.4262702131152733e+58, 50, 2.5000000000000000 },\n+  { -1.1118745474840939e+56, 50, 2.7500000000000000 },\n+  { -1.3243260716629126e+54, 50, 3.0000000000000000 },\n+  { -2.2519472094129334e+52, 50, 3.2500000000000000 },\n+  { -5.1861507201100364e+50, 50, 3.5000000000000000 },\n+  { -1.5513212909461383e+49, 50, 3.7500000000000000 },\n+  { -5.8276471407899822e+47, 50, 4.0000000000000000 },\n+  { -2.6745414086542661e+46, 50, 4.2500000000000000 },\n+  { -1.4657308996352322e+45, 50, 4.5000000000000000 },\n+  { -9.4102674366685358e+43, 50, 4.7500000000000000 },\n+  { -6.9641091882698388e+42, 50, 5.0000000000000000 },\n+};\n+const double toler007 = 5.0000000000000029e-12;\n+\n+// Test data for n=100.\n+// max(|f - f_GSL|): 2.4840289476811343e+232\n+// max(|f - f_GSL| / |f_GSL|): 9.0555289224453335e-14\n+const testcase_sph_neumann<double>\n+data008[20] =\n+{\n+  { -4.2856109460516407e+247, 100, 0.25000000000000000 },\n+  { -1.6911720011753781e+217, 100, 0.50000000000000000 },\n+  { -2.7753107402139484e+199, 100, 0.75000000000000000 },\n+  { -6.6830794632586774e+186, 100, 1.0000000000000000 },\n+  { -1.0906342369729277e+177, 100, 1.2500000000000000 },\n+  { -1.0993184254131119e+169, 100, 1.5000000000000000 },\n+  { -1.9071480498141315e+162, 100, 1.7500000000000000 },\n+  { -2.6559558301924957e+156, 100, 2.0000000000000000 },\n+  { -1.8154136926485787e+151, 100, 2.2500000000000000 },\n+  { -4.3527631662111383e+146, 100, 2.5000000000000000 },\n+  { -2.8809537014100589e+142, 100, 2.7500000000000000 },\n+  { -4.4102229953033134e+138, 100, 3.0000000000000000 },\n+  { -1.3651904154045514e+135, 100, 3.2500000000000000 },\n+  { -7.6980749101080730e+131, 100, 3.5000000000000000 },\n+  { -7.2790553499254927e+128, 100, 3.7500000000000000 },\n+  { -1.0796647795893970e+126, 100, 4.0000000000000000 },\n+  { -2.3785795774445298e+123, 100, 4.2500000000000000 },\n+  { -7.4391596631955861e+120, 100, 4.5000000000000000 },\n+  { -3.1802258278279400e+118, 100, 4.7500000000000000 },\n+  { -1.7997139826259740e+116, 100, 5.0000000000000000 },\n+};\n+const double toler008 = 5.0000000000000029e-12;\n+//  sph_neumann\n+\n+// Test data for n=0.\n+// max(|f - f_GSL|): 1.0165479569224090e-15\n+// max(|f - f_GSL| / |f_GSL|): 5.9073915926662418e-13\n+const testcase_sph_neumann<double>\n+data009[20] =\n+{\n+  { -0.056732437092645263, 0, 5.0000000000000000 },\n+  { 0.083907152907645249, 0, 10.000000000000000 },\n+  { 0.050645860857254747, 0, 15.000000000000000 },\n+  { -0.020404103090669597, 0, 20.000000000000000 },\n+  { -0.039648112474538942, 0, 25.000000000000000 },\n+  { -0.0051417149962528020, 0, 30.000000000000000 },\n+  { 0.025819777288328762, 0, 35.000000000000000 },\n+  { 0.016673451541306544, 0, 40.000000000000000 },\n+  { -0.011673821973727327, 0, 45.000000000000000 },\n+  { -0.019299320569842265, 0, 50.000000000000000 },\n+  { -0.00040230465930828606, 0, 55.000000000000000 },\n+  { 0.015873549673585938, 0, 60.000000000000000 },\n+  { 0.0086531361728949541, 0, 65.000000000000000 },\n+  { -0.0090474171869471404, 0, 70.000000000000000 },\n+  { -0.012290016929663325, 0, 75.000000000000000 },\n+  { 0.0013798405479880944, 0, 80.000000000000000 },\n+  { 0.011580901686988727, 0, 85.000000000000000 },\n+  { 0.0049785957347685574, 0, 90.000000000000000 },\n+  { -0.0076860374841559963, 0, 95.000000000000000 },\n+  { -0.0086231887228768404, 0, 100.00000000000000 },\n+};\n+const double toler009 = 5.0000000000000028e-11;\n+\n+// Test data for n=1.\n+// max(|f - f_GSL|): 1.0529771499179219e-15\n+// max(|f - f_GSL| / |f_GSL|): 3.5182047773188613e-13\n+const testcase_sph_neumann<double>\n+data010[20] =\n+{\n+  { 0.18043836751409864, 1, 5.0000000000000000 },\n+  { 0.062792826379701502, 1, 10.000000000000000 },\n+  { -0.039976131953324147, 1, 15.000000000000000 },\n+  { -0.046667467690914864, 1, 20.000000000000000 },\n+  { 0.0037081455049293634, 1, 25.000000000000000 },\n+  { 0.032762996969886965, 1, 30.000000000000000 },\n+  { 0.012971498479556563, 1, 35.000000000000000 },\n+  { -0.018210992723451058, 1, 40.000000000000000 },\n+  { -0.019168385477952129, 1, 45.000000000000000 },\n+  { 0.0048615106626817301, 1, 50.000000000000000 },\n+  { 0.018170052158169303, 1, 55.000000000000000 },\n+  { 0.0053447361795967109, 1, 60.000000000000000 },\n+  { -0.012587316051033977, 1, 65.000000000000000 },\n+  { -0.011184829982069090, 1, 70.000000000000000 },\n+  { 0.0050065549130635621, 1, 75.000000000000000 },\n+  { 0.012440856180892041, 1, 80.000000000000000 },\n+  { 0.0022077237839479508, 1, 85.000000000000000 },\n+  { -0.0098779785318421041, 1, 90.000000000000000 },\n+  { -0.0072731342338976518, 1, 95.000000000000000 },\n+  { 0.0049774245238688201, 1, 100.00000000000000 },\n+};\n+const double toler010 = 2.5000000000000014e-11;\n+\n+// Test data for n=2.\n+// max(|f - f_GSL|): 9.7144514654701197e-16\n+// max(|f - f_GSL| / |f_GSL|): 8.9389761338979581e-13\n+const testcase_sph_neumann<double>\n+data011[20] =\n+{\n+  { 0.16499545760110443, 2, 5.0000000000000000 },\n+  { -0.065069304993734783, 2, 10.000000000000000 },\n+  { -0.058641087247919575, 2, 15.000000000000000 },\n+  { 0.013403982937032370, 2, 20.000000000000000 },\n+  { 0.040093089935130458, 2, 25.000000000000000 },\n+  { 0.0084180146932414986, 2, 30.000000000000000 },\n+  { -0.024707934561509628, 2, 35.000000000000000 },\n+  { -0.018039275995565374, 2, 40.000000000000000 },\n+  { 0.010395929608530518, 2, 45.000000000000000 },\n+  { 0.019591011209603170, 2, 50.000000000000000 },\n+  { 0.0013933984133902479, 2, 55.000000000000000 },\n+  { -0.015606312864606101, 2, 60.000000000000000 },\n+  { -0.0092340892214042153, 2, 65.000000000000000 },\n+  { 0.0085680673305727519, 2, 70.000000000000000 },\n+  { 0.012490279126185866, 2, 75.000000000000000 },\n+  { -0.00091330844120464274, 2, 80.000000000000000 },\n+  { -0.011502982024025860, 2, 85.000000000000000 },\n+  { -0.0053078616858299611, 2, 90.000000000000000 },\n+  { 0.0074563595609802797, 2, 95.000000000000000 },\n+  { 0.0087725114585929052, 2, 100.00000000000000 },\n+};\n+const double toler011 = 5.0000000000000028e-11;\n+\n+// Test data for n=5.\n+// max(|f - f_GSL|): 1.1327744298128550e-15\n+// max(|f - f_GSL| / |f_GSL|): 6.2024335299315527e-13\n+const testcase_sph_neumann<double>\n+data012[20] =\n+{\n+  { -0.32046504674973919, 5, 5.0000000000000000 },\n+  { 0.093833541678691818, 5, 10.000000000000000 },\n+  { 0.020475698281859061, 5, 15.000000000000000 },\n+  { -0.048172347757372780, 5, 20.000000000000000 },\n+  { -0.018309489232548347, 5, 25.000000000000000 },\n+  { 0.026639390496569996, 5, 30.000000000000000 },\n+  { 0.022006038985576210, 5, 35.000000000000000 },\n+  { -0.011268975348057965, 5, 40.000000000000000 },\n+  { -0.021770388372274858, 5, 45.000000000000000 },\n+  { -0.00069711319645853701, 5, 50.000000000000000 },\n+  { 0.017439589450220901, 5, 55.000000000000000 },\n+  { 0.0088699170919343089, 5, 60.000000000000000 },\n+  { -0.010421334444951861, 5, 65.000000000000000 },\n+  { -0.012746769858008553, 5, 70.000000000000000 },\n+  { 0.0026282888028967737, 5, 75.000000000000000 },\n+  { 0.012477658581324189, 5, 80.000000000000000 },\n+  { 0.0040771816818182642, 5, 85.000000000000000 },\n+  { -0.0089777759570579818, 5, 90.000000000000000 },\n+  { -0.0083184557896676149, 5, 95.000000000000000 },\n+  { 0.0037206784862748965, 5, 100.00000000000000 },\n+};\n+const double toler012 = 5.0000000000000028e-11;\n+\n+// Test data for n=10.\n+// max(|f - f_GSL|): 1.0658141036401503e-14\n+// max(|f - f_GSL| / |f_GSL|): 7.3655649039219020e-13\n+const testcase_sph_neumann<double>\n+data013[20] =\n+{\n+  { -26.656114405718711, 10, 5.0000000000000000 },\n+  { -0.17245367208805784, 10, 10.000000000000000 },\n+  { 0.078461689849642580, 10, 15.000000000000000 },\n+  { -0.036843410496289961, 10, 20.000000000000000 },\n+  { -0.021158339301097475, 10, 25.000000000000000 },\n+  { 0.031219591064754939, 10, 30.000000000000000 },\n+  { 0.012840593422414807, 10, 35.000000000000000 },\n+  { -0.021803068636888072, 10, 40.000000000000000 },\n+  { -0.014071636804469044, 10, 45.000000000000000 },\n+  { 0.013524687511158758, 10, 50.000000000000000 },\n+  { 0.015684932653180595, 10, 55.000000000000000 },\n+  { -0.0056356895567262122, 10, 60.000000000000000 },\n+  { -0.015364490270315362, 10, 65.000000000000000 },\n+  { -0.0014525575672261295, 10, 70.000000000000000 },\n+  { 0.012648951699549433, 10, 75.000000000000000 },\n+  { 0.0068571608061120367, 10, 80.000000000000000 },\n+  { -0.0080151152941401460, 10, 85.000000000000000 },\n+  { -0.0098139742219019149, 10, 90.000000000000000 },\n+  { 0.0025002854072314951, 10, 95.000000000000000 },\n+  { 0.010025777373636155, 10, 100.00000000000000 },\n+};\n+const double toler013 = 5.0000000000000028e-11;\n+\n+// Test data for n=20.\n+// max(|f - f_GSL|): 1.0728836059570312e-06\n+// max(|f - f_GSL| / |f_GSL|): 1.0496253232407487e-11\n+const testcase_sph_neumann<double>\n+data014[20] =\n+{\n+  { -926795140.30575466, 20, 5.0000000000000000 },\n+  { -1211.2106053526036, 20, 10.000000000000000 },\n+  { -1.5559965765652175, 20, 15.000000000000000 },\n+  { -0.093401132250914398, 20, 20.000000000000000 },\n+  { 0.044031985675276462, 20, 25.000000000000000 },\n+  { -0.036078033606613907, 20, 30.000000000000000 },\n+  { 0.029828405631319645, 20, 35.000000000000000 },\n+  { -0.0048414810986760759, 20, 40.000000000000000 },\n+  { -0.020504694681516944, 20, 45.000000000000000 },\n+  { 0.013759531302541216, 20, 50.000000000000000 },\n+  { 0.012783038861734196, 20, 55.000000000000000 },\n+  { -0.013117009421906418, 20, 60.000000000000000 },\n+  { -0.010338106075674407, 20, 65.000000000000000 },\n+  { 0.010538610814111244, 20, 70.000000000000000 },\n+  { 0.010200029094273744, 20, 75.000000000000000 },\n+  { -0.0073123450945617122, 20, 80.000000000000000 },\n+  { -0.010581510354950906, 20, 85.000000000000000 },\n+  { 0.0036866374015298723, 20, 90.000000000000000 },\n+  { 0.010498384318338270, 20, 95.000000000000000 },\n+  { 5.6317293788334978e-05, 20, 100.00000000000000 },\n+};\n+const double toler014 = 1.0000000000000007e-09;\n+\n+// Test data for n=50.\n+// max(|f - f_GSL|): 5.1003129618557667e+29\n+// max(|f - f_GSL| / |f_GSL|): 4.9443320929884463e-13\n+const testcase_sph_neumann<double>\n+data015[20] =\n+{\n+  { -6.9641091882698388e+42, 50, 5.0000000000000000 },\n+  { -4.5282272723512023e+27, 50, 10.000000000000000 },\n+  { -9.0004902645887037e+18, 50, 15.000000000000000 },\n+  { -9542541667002.5117, 50, 20.000000000000000 },\n+  { -363518140.71026671, 50, 25.000000000000000 },\n+  { -152551.57233157745, 50, 30.000000000000000 },\n+  { -386.26599186208625, 50, 35.000000000000000 },\n+  { -4.3290507947291035, 50, 40.000000000000000 },\n+  { -0.19968460851503758, 50, 45.000000000000000 },\n+  { -0.041900001504607758, 50, 50.000000000000000 },\n+  { 0.010696040672421902, 50, 55.000000000000000 },\n+  { 0.0078198768555267188, 50, 60.000000000000000 },\n+  { -0.010088474938191242, 50, 65.000000000000000 },\n+  { 0.0062423671279824801, 50, 70.000000000000000 },\n+  { 0.0011284242794941733, 50, 75.000000000000000 },\n+  { -0.0093934266037485562, 50, 80.000000000000000 },\n+  { 0.013108079602843424, 50, 85.000000000000000 },\n+  { -0.0075396607225722626, 50, 90.000000000000000 },\n+  { -0.0042605703552836558, 50, 95.000000000000000 },\n+  { 0.010747822973682470, 50, 100.00000000000000 },\n+};\n+const double toler015 = 2.5000000000000014e-11;\n+\n+// Test data for n=100.\n+// max(|f - f_GSL|): 3.0796490204944808e+102\n+// max(|f - f_GSL| / |f_GSL|): 4.6209003006798690e-14\n+const testcase_sph_neumann<double>\n+data016[20] =\n+{\n+  { -1.7997139826259740e+116, 100, 5.0000000000000000 },\n+  { -8.5732263093296268e+85, 100, 10.000000000000000 },\n+  { -1.9270658593711677e+68, 100, 15.000000000000000 },\n+  { -7.2208893582952385e+55, 100, 20.000000000000000 },\n+  { -2.0868752613007946e+46, 100, 25.000000000000000 },\n+  { -4.2496124023612646e+38, 100, 30.000000000000000 },\n+  { -1.7042898348910271e+32, 100, 35.000000000000000 },\n+  { -6.3021565260724554e+26, 100, 40.000000000000000 },\n+  { -1.3199917400494367e+22, 100, 45.000000000000000 },\n+  { -1.1256928913265988e+18, 100, 50.000000000000000 },\n+  { -309801083340343.25, 100, 55.000000000000000 },\n+  { -232585620046.64737, 100, 60.000000000000000 },\n+  { -421135935.93756074, 100, 65.000000000000000 },\n+  { -1680637.4531202621, 100, 70.000000000000000 },\n+  { -13868.302591128844, 100, 75.000000000000000 },\n+  { -227.24385709173322, 100, 80.000000000000000 },\n+  { -7.2807038787138731, 100, 85.000000000000000 },\n+  { -0.46648154448250878, 100, 90.000000000000000 },\n+  { -0.067270772720654556, 100, 95.000000000000000 },\n+  { -0.022983850491562267, 100, 100.00000000000000 },\n+};\n+const double toler016 = 2.5000000000000015e-12;\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_sph_neumann<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::sph_neumann(data[i].n, data[i].x);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps\n+\t && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  test(data009, toler009);\n+  test(data010, toler010);\n+  test(data011, toler011);\n+  test(data012, toler012);\n+  test(data013, toler013);\n+  test(data014, toler014);\n+  test(data015, toler015);\n+  test(data016, toler016);\n+  return 0;\n+}"}, {"sha": "208b809b5a18e5adf6436c4efe3720ae127f3a8f", "filename": "libstdc++-v3/testsuite/special_functions/21_sph_neumann/compile.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F21_sph_neumann%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F21_sph_neumann%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F21_sph_neumann%2Fcompile.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.21 sph_neumann\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+  unsigned int n = 0;\n+\n+  std::sph_neumann(n, xf);\n+  std::sph_neumannf(n, xf);\n+  std::sph_neumann(n, xd);\n+  std::sph_neumann(n, xl);\n+  std::sph_neumannl(n, xl);\n+\n+  return;\n+}\n+"}, {"sha": "88182199afcf8cfa6278be1c6bafca64b01f03d4", "filename": "libstdc++-v3/testsuite/special_functions/21_sph_neumann/compile_2.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F21_sph_neumann%2Fcompile_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F21_sph_neumann%2Fcompile_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F21_sph_neumann%2Fcompile_2.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.1.21 sph_neumann\n+\n+#include <math.h>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+  unsigned int n = 0;\n+\n+  sph_neumann(n, xf);\n+  sph_neumannf(n, xf);\n+  sph_neumann(n, xd);\n+  sph_neumann(n, xl);\n+  sph_neumannl(n, xl);\n+\n+  return;\n+}\n+"}, {"sha": "93315606cdbec95eaeb40df03a9c2e1bc6fc55ef", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/08_cyl_bessel_i/check_value.cc", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F08_cyl_bessel_i%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F08_cyl_bessel_i%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F08_cyl_bessel_i%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d"}, {"sha": "49dc3edf9a77cc672097e76da922faedaa8c7c41", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/09_cyl_bessel_j/check_value.cc", "status": "modified", "additions": 964, "deletions": 445, "changes": 1409, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F09_cyl_bessel_j%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F09_cyl_bessel_j%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F09_cyl_bessel_j%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d"}, {"sha": "038aa2b2f95580729dfbf77f1e01f34690e62292", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/10_cyl_bessel_k/check_value.cc", "status": "modified", "additions": 961, "deletions": 343, "changes": 1304, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F10_cyl_bessel_k%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F10_cyl_bessel_k%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F10_cyl_bessel_k%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d"}, {"sha": "187bd02312ac8c8c88d45c375f4c3a4dbedd85cc", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/11_cyl_neumann/check_value.cc", "status": "modified", "additions": 1082, "deletions": 478, "changes": 1560, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F11_cyl_neumann%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F11_cyl_neumann%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F11_cyl_neumann%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d"}, {"sha": "b8605d8aea7e6f30981e94f9d188103d6bcb8176", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/16_hermite/check_value.cc", "status": "added", "additions": 1956, "deletions": 0, "changes": 1956, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F16_hermite%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F16_hermite%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F16_hermite%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d"}, {"sha": "b62dc051a5200183f5b3af599ef2183f917e1ed0", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/21_sph_bessel/check_value.cc", "status": "modified", "additions": 646, "deletions": 298, "changes": 944, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F21_sph_bessel%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F21_sph_bessel%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F21_sph_bessel%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d"}, {"sha": "396f15945d1b23ff163aaa5aaa3beea72e806540", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/23_sph_neumann/check_value.cc", "status": "modified", "additions": 718, "deletions": 268, "changes": 986, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F23_sph_neumann%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F23_sph_neumann%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F23_sph_neumann%2Fcheck_value.cc?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d"}, {"sha": "d73b0ab031cc7a6359628870ce0e1094d4efc395", "filename": "libstdc++-v3/testsuite/util/specfun_testcase.h", "status": "added", "additions": 416, "deletions": 0, "changes": 416, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fspecfun_testcase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be75957b80b640c0aac4356ab861edd0c2f1b9d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fspecfun_testcase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fspecfun_testcase.h?ref=2be75957b80b640c0aac4356ab861edd0c2f1b9d"}]}