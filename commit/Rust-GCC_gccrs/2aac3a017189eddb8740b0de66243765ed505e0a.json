{"sha": "2aac3a017189eddb8740b0de66243765ed505e0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFhYzNhMDE3MTg5ZWRkYjg3NDBiMGRlNjYyNDM3NjVlZDUwNWUwYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2007-11-12T21:21:37Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-11-12T21:21:37Z"}, "message": "re PR rtl-optimization/34035 (ICE in calc_dfs_tree with -O2 -fnon-call-exceptions -ffast-math -fno-gcse)\n\n\tPR rtl-optimization/34035\n\t* cse.c (cse_cfg_altered): New global variable.\n\t(cse_jumps_altered): Make boolean.\n\t(recorded_label_ref): Likewise.\n\t(cse_insn): Adjust for above changes.\n\t(cse_extended_basic_block): Likewise.  Set cse_cfg_altered\n\tif dead edges have been purged.\n\t(cse_main): Change return value specification and adjust code.\n\t(rest_of_handle_cse): Adjust for above change.\n\t(rest_of_handle_cse2): Likewise.\n\t* gcse.c (rest_of_handle_gcse): Likewise.\n\nFrom-SVN: r130122", "tree": {"sha": "4e90b09d7ebd094cdf433aeb27f13654901ad0ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e90b09d7ebd094cdf433aeb27f13654901ad0ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aac3a017189eddb8740b0de66243765ed505e0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aac3a017189eddb8740b0de66243765ed505e0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aac3a017189eddb8740b0de66243765ed505e0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aac3a017189eddb8740b0de66243765ed505e0a/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d51fba8ef2918636d8d51389297aa558b235d1ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51fba8ef2918636d8d51389297aa558b235d1ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d51fba8ef2918636d8d51389297aa558b235d1ca"}], "stats": {"total": 129, "additions": 102, "deletions": 27}, "files": [{"sha": "45cf5a2fbbd2333bc440d0b2e54c3935a0e51d58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aac3a017189eddb8740b0de66243765ed505e0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aac3a017189eddb8740b0de66243765ed505e0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2aac3a017189eddb8740b0de66243765ed505e0a", "patch": "@@ -1,3 +1,17 @@\n+2007-11-12  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR rtl-optimization/34035\n+\t* cse.c (cse_cfg_altered): New global variable.\n+\t(cse_jumps_altered): Make boolean.\n+\t(recorded_label_ref): Likewise.\n+\t(cse_insn): Adjust for above changes.\n+\t(cse_extended_basic_block): Likewise.  Set cse_cfg_altered\n+\tif dead edges have been purged.\n+\t(cse_main): Change return value specification and adjust code.\n+\t(rest_of_handle_cse): Adjust for above change.\n+\t(rest_of_handle_cse2): Likewise.\n+\t* gcse.c (rest_of_handle_gcse): Likewise.\n+\n 2007-11-12  Dwarakanath Rajagopal  <dwarak.rajagopal@amd.com>\n \t    Michael Meissner  <michael.meissner@amd.com>\n "}, {"sha": "09f80fe564fda92bb8cbcce4fbf877ebff13f51f", "filename": "gcc/cse.c", "status": "modified", "additions": 41, "deletions": 26, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aac3a017189eddb8740b0de66243765ed505e0a/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aac3a017189eddb8740b0de66243765ed505e0a/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=2aac3a017189eddb8740b0de66243765ed505e0a", "patch": "@@ -348,15 +348,17 @@ static unsigned int cse_reg_info_timestamp;\n \n static HARD_REG_SET hard_regs_in_table;\n \n-/* Nonzero if cse has altered conditional jump insns\n-   in such a way that jump optimization should be redone.  */\n+/* True if CSE has altered the CFG.  */\n+static bool cse_cfg_altered;\n \n-static int cse_jumps_altered;\n+/* True if CSE has altered conditional jump insns in such a way\n+   that jump optimization should be redone.  */\n+static bool cse_jumps_altered;\n \n-/* Nonzero if we put a LABEL_REF into the hash table for an INSN\n-   without a REG_LABEL_OPERAND, we have to rerun jump after CSE to put\n-   in the note.  */\n-static int recorded_label_ref;\n+/* True if we put a LABEL_REF into the hash table for an INSN\n+   without a REG_LABEL_OPERAND, we have to rerun jump after CSE\n+   to put in the note.  */\n+static bool recorded_label_ref;\n \n /* canon_hash stores 1 in do_not_record\n    if it notices a reference to CC0, PC, or some other volatile\n@@ -4761,7 +4763,7 @@ cse_insn (rtx insn, rtx libcall_insn)\n \t\tcontinue;\n \n \t      SET_SRC (sets[i].rtl) = trial;\n-\t      cse_jumps_altered = 1;\n+\t      cse_jumps_altered = true;\n \t      break;\n \t    }\n \n@@ -4987,7 +4989,7 @@ cse_insn (rtx insn, rtx libcall_insn)\n \t{\n \t  /* One less use of the label this insn used to jump to.  */\n \t  delete_insn_and_edges (insn);\n-\t  cse_jumps_altered = 1;\n+\t  cse_jumps_altered = true;\n \t  /* No more processing for this set.  */\n \t  sets[i].rtl = 0;\n \t}\n@@ -5026,10 +5028,8 @@ cse_insn (rtx insn, rtx libcall_insn)\n \t  else\n \t    INSN_CODE (insn) = -1;\n \n-\t  /* Do not bother deleting any unreachable code,\n-\t     let jump/flow do that.  */\n-\n-\t  cse_jumps_altered = 1;\n+\t  /* Do not bother deleting any unreachable code, let jump do it.  */\n+\t  cse_jumps_altered = true;\n \t  sets[i].rtl = 0;\n \t}\n \n@@ -6033,10 +6033,10 @@ cse_extended_basic_block (struct cse_basic_block_data *ebb_data)\n \t    \n \t      /* If we haven't already found an insn where we added a LABEL_REF,\n \t\t check this one.  */\n-\t      if (INSN_P (insn) && ! recorded_label_ref\n+\t      if (INSN_P (insn) && !recorded_label_ref\n \t\t  && for_each_rtx (&PATTERN (insn), check_for_label_ref,\n \t\t\t\t   (void *) insn))\n-\t\trecorded_label_ref = 1;\n+\t\trecorded_label_ref = true;\n \n #ifdef HAVE_cc0\n \t      /* If the previous insn set CC0 and this insn no longer\n@@ -6074,7 +6074,7 @@ cse_extended_basic_block (struct cse_basic_block_data *ebb_data)\n \t the CFG properly inside cse_insn.  So clean up possibly\n \t redundant EH edges here.  */\n       if (flag_non_call_exceptions && have_eh_succ_edges (bb))\n-\tpurge_dead_edges (bb);\n+\tcse_cfg_altered |= purge_dead_edges (bb);\n \n       /* If we changed a conditional jump, we may have terminated\n \t the path we are following.  Check that by verifying that\n@@ -6132,8 +6132,10 @@ cse_extended_basic_block (struct cse_basic_block_data *ebb_data)\n    F is the first instruction.\n    NREGS is one plus the highest pseudo-reg number used in the instruction.\n \n-   Returns 1 if jump_optimize should be redone due to simplifications\n-   in conditional jump instructions.  */\n+   Return 2 if jump optimizations should be redone due to simplifications\n+   in conditional jump instructions.\n+   Return 1 if the CFG should be cleaned up because it has been modified.\n+   Return 0 otherwise.  */\n \n int\n cse_main (rtx f ATTRIBUTE_UNUSED, int nregs)\n@@ -6153,8 +6155,9 @@ cse_main (rtx f ATTRIBUTE_UNUSED, int nregs)\n   ebb_data.path = XNEWVEC (struct branch_path,\n \t\t\t   PARAM_VALUE (PARAM_MAX_CSE_PATH_LENGTH));\n \n-  cse_jumps_altered = 0;\n-  recorded_label_ref = 0;\n+  cse_cfg_altered = false;\n+  cse_jumps_altered = false;\n+  recorded_label_ref = false;\n   constant_pool_entries_cost = 0;\n   constant_pool_entries_regcost = 0;\n   ebb_data.path_size = 0;\n@@ -6216,7 +6219,12 @@ cse_main (rtx f ATTRIBUTE_UNUSED, int nregs)\n   free (rc_order);\n   rtl_hooks = general_rtl_hooks;\n \n-  return cse_jumps_altered || recorded_label_ref;\n+  if (cse_jumps_altered || recorded_label_ref)\n+    return 2;\n+  else if (cse_cfg_altered)\n+    return 1;\n+  else\n+    return 0;\n }\n \f\n /* Called via for_each_rtx to see if an insn is using a LABEL_REF for\n@@ -6948,10 +6956,14 @@ rest_of_handle_cse (void)\n      expecting CSE to be run.  But always rerun it in a cheap mode.  */\n   cse_not_expected = !flag_rerun_cse_after_loop && !flag_gcse;\n \n-  if (tem)\n-    rebuild_jump_labels (get_insns ());\n-\n-  if (tem || optimize > 1)\n+  if (tem == 2)\n+    {\n+      timevar_push (TV_JUMP);\n+      rebuild_jump_labels (get_insns ());\n+      cleanup_cfg (0);\n+      timevar_pop (TV_JUMP);\n+    }\n+  else if (tem == 1 || optimize > 1)\n     cleanup_cfg (0);\n \n   return 0;\n@@ -7003,13 +7015,16 @@ rest_of_handle_cse2 (void)\n \n   delete_trivially_dead_insns (get_insns (), max_reg_num ());\n \n-  if (tem)\n+  if (tem == 2)\n     {\n       timevar_push (TV_JUMP);\n       rebuild_jump_labels (get_insns ());\n       cleanup_cfg (0);\n       timevar_pop (TV_JUMP);\n     }\n+  else if (tem == 1)\n+    cleanup_cfg (0);\n+\n   cse_not_expected = 1;\n   return 0;\n }"}, {"sha": "c5e8c7b44f5c337345664d4c1b972c92b471ab24", "filename": "gcc/gcse.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aac3a017189eddb8740b0de66243765ed505e0a/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aac3a017189eddb8740b0de66243765ed505e0a/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=2aac3a017189eddb8740b0de66243765ed505e0a", "patch": "@@ -6737,13 +6737,15 @@ rest_of_handle_gcse (void)\n \n   /* If gcse or cse altered any jumps, rerun jump optimizations to clean\n      things up.  */\n-  if (tem || tem2)\n+  if (tem || tem2 == 2)\n     {\n       timevar_push (TV_JUMP);\n       rebuild_jump_labels (get_insns ());\n       cleanup_cfg (0);\n       timevar_pop (TV_JUMP);\n     }\n+  else if (tem2 == 1)\n+    cleanup_cfg (0);\n \n   flag_cse_skip_blocks = save_csb;\n   flag_cse_follow_jumps = save_cfj;"}, {"sha": "167d1702ba09f9c3e078b64805cbdae18fdbd854", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aac3a017189eddb8740b0de66243765ed505e0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aac3a017189eddb8740b0de66243765ed505e0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2aac3a017189eddb8740b0de66243765ed505e0a", "patch": "@@ -1,3 +1,7 @@\n+2007-11-12  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* g++.dg/opt/cfg5.C: New test.\n+\n 2007-11-12  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/34070"}, {"sha": "a4bc8eea9d88e084581f31132ad60e541346cdb4", "filename": "gcc/testsuite/g++.dg/opt/cfg5.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aac3a017189eddb8740b0de66243765ed505e0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcfg5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aac3a017189eddb8740b0de66243765ed505e0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcfg5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcfg5.C?ref=2aac3a017189eddb8740b0de66243765ed505e0a", "patch": "@@ -0,0 +1,40 @@\n+/* PR rtl-optimization/34035 */\n+/* Origin: Janis Johnson <janis@gcc.gnu.org> */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fnon-call-exceptions -ffast-math -fno-gcse\" } */\n+\n+class One {\n+public:\n+    One () { e[0] = e[1] = 0.0; }\n+    double e[2];\n+};\n+\n+template <class T>\n+class Two {\n+public:\n+    Two();\n+private:\n+    T *data;\n+    int arraySize;\n+};\n+\n+template <class T>\n+Two<T>::Two() {\n+   data = new T[arraySize];\n+}\n+\n+class Three {\n+protected:\n+  Two<One> data;\n+};\n+\n+class Four : public Three {\n+public:\n+  Four ();\n+  void Foo (int n);\n+};\n+\n+Four :: Four (){\n+   Foo (1);\n+}"}]}