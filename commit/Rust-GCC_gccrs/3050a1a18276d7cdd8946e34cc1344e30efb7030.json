{"sha": "3050a1a18276d7cdd8946e34cc1344e30efb7030", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA1MGExYTE4Mjc2ZDdjZGQ4OTQ2ZTM0Y2MxMzQ0ZTMwZWZiNzAzMA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-05-22T08:28:34Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-05-22T08:37:17Z"}, "message": "[OpenACC privatization] Prune uninteresting/varying diagnostics in 'libgomp.oacc-fortran/privatized-ref-2.f90'\n\nMinor fix-up for my recent commit 11b8286a83289f5b54e813f14ff56d730c3f3185\n\"[OpenACC privatization] Largely extend diagnostics and corresponding testsuite\ncoverage [PR90115]\".\n\n\tlibgomp/\n\tPR testsuite/90115\n\t* testsuite/libgomp.oacc-fortran/privatized-ref-2.f90: Prune\n\tuninteresting/varying diagnostics.\n\nReported-by: Sunil K Pandey <skpandey@sc.intel.com>", "tree": {"sha": "086a9cb00d68f8679b736a768e71b38868d2aeb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/086a9cb00d68f8679b736a768e71b38868d2aeb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3050a1a18276d7cdd8946e34cc1344e30efb7030", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3050a1a18276d7cdd8946e34cc1344e30efb7030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3050a1a18276d7cdd8946e34cc1344e30efb7030", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3050a1a18276d7cdd8946e34cc1344e30efb7030/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e28089157dc5b2631ddbf612b233b9ad6f9c4aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e28089157dc5b2631ddbf612b233b9ad6f9c4aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e28089157dc5b2631ddbf612b233b9ad6f9c4aa"}], "stats": {"total": 9, "additions": 3, "deletions": 6}, "files": [{"sha": "baaee02b82c5f01f8a69b5bb56681fc95da6b5ee", "filename": "libgomp/testsuite/libgomp.oacc-fortran/privatized-ref-2.f90", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3050a1a18276d7cdd8946e34cc1344e30efb7030/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3050a1a18276d7cdd8946e34cc1344e30efb7030/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90?ref=3050a1a18276d7cdd8946e34cc1344e30efb7030", "patch": "@@ -12,6 +12,8 @@\n ! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n ! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n ! for testing/documenting aspects of that functionality.\n+! Prune a few: uninteresting, and varying depending on GCC configuration (data types):\n+! { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} }\n \n ! It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n ! passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n@@ -43,7 +45,6 @@ subroutine foo (array, nn)\n     integer :: array(nn)\n \n     !$acc parallel copyout(array) ! { dg-line l_compute[incr c_compute] }\n-    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     ! { dg-note {variable 'atmp\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     ! { dg-note {variable 'shadow_loopvar\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     ! { dg-note {variable 'offset\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n@@ -65,7 +66,6 @@ subroutine bar (array)\n     integer :: array(:)\n \n     !$acc parallel copyout(array) ! { dg-line l_compute[incr c_compute] }\n-    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     ! { dg-note {variable 'atmp\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     ! { dg-note {variable 'shadow_loopvar\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     ! { dg-note {variable 'offset\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n@@ -92,16 +92,14 @@ subroutine foo_str(str)\n     integer :: i\n     character(len=*) :: str\n \n-    !$acc parallel copyout(str) ! { dg-line l_compute[incr c_compute] }\n-    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    !$acc parallel copyout(str)\n     str = \"abcdefghij\"\n     !$acc loop gang private(str) ! { dg-line l_loop[incr c_loop] }\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'str' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'char\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'char\\.[0-9]+' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'char\\.[0-9]+' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || openacc_nvidia_accel_selected } } } l_loop$c_loop }\n-    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-message {sorry, unimplemented: target cannot support alloca} PR65181 { target openacc_nvidia_accel_selected } l_loop$c_loop }\n     do i = 1, 10\n       str(i:i) = achar(ichar('A') + i)\n@@ -137,7 +135,6 @@ subroutine foobar (scalar)\n     ! { dg-note {variable 'char\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'char\\.[0-9]+' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'char\\.[0-9]+' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || openacc_nvidia_accel_selected } } } l_loop$c_loop }\n-    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     do i = 1, 15\n       scalar(i:i) = achar(ichar('A') + i)\n     end do"}]}