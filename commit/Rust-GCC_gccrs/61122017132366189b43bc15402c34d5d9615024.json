{"sha": "61122017132366189b43bc15402c34d5d9615024", "node_id": "C_kwDOANBUbNoAKDYxMTIyMDE3MTMyMzY2MTg5YjQzYmMxNTQwMmMzNGQ1ZDk2MTUwMjQ", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-31T22:07:24Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-03T06:57:37Z"}, "message": "RISC-V: Add RVV shift.vx C/C++ API support\n\ngcc/ChangeLog:\n\n\t* config/riscv/predicates.md (pmode_reg_or_uimm5_operand): New predicate.\n\t* config/riscv/riscv-vector-builtins-bases.cc: New class.\n\t* config/riscv/riscv-vector-builtins-functions.def (vsll): Ditto.\n\t(vsra): Ditto.\n\t(vsrl): Ditto.\n\t* config/riscv/riscv-vector-builtins.cc: Ditto.\n\t* config/riscv/vector.md (@pred_<optab><mode>_scalar): New pattern.", "tree": {"sha": "43f5f0034ef8bb0edc5af02051e79e3f86ab6aa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43f5f0034ef8bb0edc5af02051e79e3f86ab6aa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61122017132366189b43bc15402c34d5d9615024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61122017132366189b43bc15402c34d5d9615024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61122017132366189b43bc15402c34d5d9615024", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61122017132366189b43bc15402c34d5d9615024/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a37a0cb303da35ee3b20fd25ad1592d03550ac17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37a0cb303da35ee3b20fd25ad1592d03550ac17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a37a0cb303da35ee3b20fd25ad1592d03550ac17"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "895831443e1a2ae110482cee6cde34394c62d093", "filename": "gcc/config/riscv/predicates.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61122017132366189b43bc15402c34d5d9615024/gcc%2Fconfig%2Friscv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61122017132366189b43bc15402c34d5d9615024/gcc%2Fconfig%2Friscv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpredicates.md?ref=61122017132366189b43bc15402c34d5d9615024", "patch": "@@ -301,6 +301,14 @@\n        (and (match_code \"const_vector\")\n             (match_test \"riscv_vector::const_vec_all_same_in_range_p (op, 0, 31)\"))))\n \n+;; pmode_reg_or_uimm5_operand can be used by vsll.vx/vsrl.vx/vsra.vx instructions.\n+;; Since it has the same predicate with vector_length_operand which allows register\n+;; or immediate (0 ~ 31), we define this predicate same as vector_length_operand here.\n+;; We don't use vector_length_operand directly to predicate vsll.vx/vsrl.vx/vsra.vx\n+;; since it may be confusing.\n+(define_special_predicate \"pmode_reg_or_uimm5_operand\"\n+  (match_operand 0 \"vector_length_operand\"))\n+\n (define_special_predicate \"pmode_reg_or_0_operand\"\n   (ior (match_operand 0 \"const_0_operand\")\n        (match_operand 0 \"pmode_register_operand\")))"}, {"sha": "00d357a0d3621d07ccca9125ab9c5f9c08132e5a", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61122017132366189b43bc15402c34d5d9615024/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61122017132366189b43bc15402c34d5d9615024/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=61122017132366189b43bc15402c34d5d9615024", "patch": "@@ -163,7 +163,15 @@ class binop : public function_base\n public:\n   rtx expand (function_expander &e) const override\n   {\n-    return e.use_exact_insn (code_for_pred (CODE, e.vector_mode ()));\n+    switch (e.op_info->op)\n+      {\n+      case OP_TYPE_vx:\n+\treturn e.use_exact_insn (code_for_pred_scalar (CODE, e.vector_mode ()));\n+      case OP_TYPE_vv:\n+\treturn e.use_exact_insn (code_for_pred (CODE, e.vector_mode ()));\n+      default:\n+\tgcc_unreachable ();\n+      }\n   }\n };\n "}, {"sha": "b543946c72eb6ab613b120c0b9954c4114a0d40e", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61122017132366189b43bc15402c34d5d9615024/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61122017132366189b43bc15402c34d5d9615024/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=61122017132366189b43bc15402c34d5d9615024", "patch": "@@ -80,5 +80,8 @@ DEF_RVV_FUNCTION (vdiv, binop, full_preds, iu_vvv_ops)\n DEF_RVV_FUNCTION (vrem, binop, full_preds, iu_vvv_ops)\n DEF_RVV_FUNCTION (vdivu, binop, full_preds, iu_vvv_ops)\n DEF_RVV_FUNCTION (vremu, binop, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vsll, binop, full_preds, iu_shift_vvx_ops)\n+DEF_RVV_FUNCTION (vsra, binop, full_preds, iu_shift_vvx_ops)\n+DEF_RVV_FUNCTION (vsrl, binop, full_preds, iu_shift_vvx_ops)\n \n #undef DEF_RVV_FUNCTION"}, {"sha": "12fea2b3594afc75a2c37a4d1e8ee6b4db38fcf0", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61122017132366189b43bc15402c34d5d9615024/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61122017132366189b43bc15402c34d5d9615024/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=61122017132366189b43bc15402c34d5d9615024", "patch": "@@ -249,6 +249,11 @@ static CONSTEXPR const rvv_arg_type_info shift_vv_args[]\n   = {rvv_arg_type_info (RVV_BASE_vector),\n      rvv_arg_type_info (RVV_BASE_shift_vector), rvv_arg_type_info_end};\n \n+/* A list of args for vector_type func (vector_type, size) function.  */\n+static CONSTEXPR const rvv_arg_type_info vector_size_args[]\n+  = {rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info (RVV_BASE_size),\n+     rvv_arg_type_info_end};\n+\n /* A list of none preds that will be registered for intrinsic functions.  */\n static CONSTEXPR const predication_type_index none_preds[]\n   = {PRED_TYPE_none, NUM_PRED_TYPES};\n@@ -405,6 +410,14 @@ static CONSTEXPR const rvv_op_info iu_shift_vvv_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      shift_vv_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type, size_t)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info iu_shift_vvx_ops\n+  = {iu_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vx,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vector_size_args /* Args */};\n+\n /* A list of all RVV intrinsic functions.  */\n static function_group_info function_groups[] = {\n #define DEF_RVV_FUNCTION(NAME, SHAPE, PREDS, OPS_INFO)                         \\"}, {"sha": "36b0e07728c638844982417c843a606a17dc50e8", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61122017132366189b43bc15402c34d5d9615024/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61122017132366189b43bc15402c34d5d9615024/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=61122017132366189b43bc15402c34d5d9615024", "patch": "@@ -1148,3 +1148,29 @@\n    v<binop_alt2_insn>\\t%0,<binop_alt2_op>%p1\"\n   [(set_attr \"type\" \"<int_binop_insn_type>\")\n    (set_attr \"mode\" \"<MODE>\")])\n+\n+;; vx instructions patterns.\n+;; Note: Unlike vv patterns, we should split them since they are variant.\n+;; For vsll.vx/vsra.vx/vsrl.vx the scalar mode should be Pmode wheras the\n+;; scalar mode is inner mode of the RVV mode for other vx patterns.\n+(define_insn \"@pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI 0 \"register_operand\"             \"=vr,   vr\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \"vmWc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \"   rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"    i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"    i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_shift:VI\n+\t    (match_operand:VI 3 \"register_operand\"         \" vr,   vr\")\n+\t    (match_operand 4 \"pmode_reg_or_uimm5_operand\"  \"  r,    K\"))\n+\t  (match_operand:VI 2 \"vector_merge_operand\"       \"0vu,  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   v<insn>.vx\\t%0,%3,%4%p1\n+   v<insn>.vi\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vshift\")\n+   (set_attr \"mode\" \"<MODE>\")])"}]}