{"sha": "97cb64f052a76046aaf4d3290ef5ceb744f3e779", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdjYjY0ZjA1MmE3NjA0NmFhZjRkMzI5MGVmNWNlYjc0NGYzZTc3OQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2009-07-23T09:10:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-23T09:10:58Z"}, "message": "exp_ch5.adb (Expand_N_Assignment_Statement): Do left-side validity check right away so it does not get skipped for early...\n\n2009-07-23  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch5.adb (Expand_N_Assignment_Statement): Do left-side validity\n\tcheck right away so it does not get skipped for early returns, e.g.\n\tarray assignments.\n\t(Expand_N_Assignment_Statement): Don't propagate Is_Known_Valid to\n\tleft-side unless we really know the value is valid.\n\n\t* errout.adb, exp_ch3.adb, exp_disp.ads, sinfo.ads, exp_disp.adb: Minor\n\treformatting. Minor code reorganization. Add comments.\n\nFrom-SVN: r149978", "tree": {"sha": "02f3bb6519f0b72fab76e98d4fd1dd8cf62ae342", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02f3bb6519f0b72fab76e98d4fd1dd8cf62ae342"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97cb64f052a76046aaf4d3290ef5ceb744f3e779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97cb64f052a76046aaf4d3290ef5ceb744f3e779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97cb64f052a76046aaf4d3290ef5ceb744f3e779", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97cb64f052a76046aaf4d3290ef5ceb744f3e779/comments", "author": null, "committer": null, "parents": [{"sha": "839de535711edea848b1b0ca8a98f3e59e7af4f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839de535711edea848b1b0ca8a98f3e59e7af4f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/839de535711edea848b1b0ca8a98f3e59e7af4f0"}], "stats": {"total": 109, "additions": 83, "deletions": 26}, "files": [{"sha": "b9d9baf15f4830736cfcec326db39cc706dff0fe", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97cb64f052a76046aaf4d3290ef5ceb744f3e779/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97cb64f052a76046aaf4d3290ef5ceb744f3e779/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=97cb64f052a76046aaf4d3290ef5ceb744f3e779", "patch": "@@ -1,3 +1,14 @@\n+2009-07-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): Do left-side validity\n+\tcheck right away so it does not get skipped for early returns, e.g.\n+\tarray assignments.\n+\t(Expand_N_Assignment_Statement): Don't propagate Is_Known_Valid to\n+\tleft-side unless we really know the value is valid.\n+\n+\t* errout.adb, exp_ch3.adb, exp_disp.ads, sinfo.ads, exp_disp.adb: Minor\n+\treformatting. Minor code reorganization. Add comments.\n+\n 2009-07-23  Robert Dewar  <dewar@adacore.com>\n \n \t* get_scos.adb (Skip_EOL): Fix error of mishandling end of line after"}, {"sha": "f05a4ddc69ac280243f6e3069b7ac6b0b604bdcc", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97cb64f052a76046aaf4d3290ef5ceb744f3e779/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97cb64f052a76046aaf4d3290ef5ceb744f3e779/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=97cb64f052a76046aaf4d3290ef5ceb744f3e779", "patch": "@@ -1101,7 +1101,7 @@ package body Errout is\n \n          if No_Warnings (N) or else No_Warnings (E) then\n \n-            --  Disable as well continuation messages, if any.\n+            --  Disable any continuation messages as well\n \n             Last_Killed := True;\n             return;"}, {"sha": "c2b5595adf514568cf86745bbb1ac2c3966b2857", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97cb64f052a76046aaf4d3290ef5ceb744f3e779/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97cb64f052a76046aaf4d3290ef5ceb744f3e779/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=97cb64f052a76046aaf4d3290ef5ceb744f3e779", "patch": "@@ -2322,6 +2322,8 @@ package body Exp_Ch3 is\n                   New_Reference_To\n                     (Node (First_Elmt (Access_Disp_Table (Rec_Type))), Loc)));\n \n+            --  Following code needs a comment ???\n+\n             if Generate_SCIL then\n                Prepend_To (Init_Tags_List,\n                  New_Scil_Node"}, {"sha": "78862661a10a7ce375070799e939329f71e2f80c", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97cb64f052a76046aaf4d3290ef5ceb744f3e779/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97cb64f052a76046aaf4d3290ef5ceb744f3e779/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=97cb64f052a76046aaf4d3290ef5ceb744f3e779", "patch": "@@ -1483,6 +1483,20 @@ package body Exp_Ch5 is\n          return;\n       end if;\n \n+      --  Defend against invalid subscripts on left side if we are in standard\n+      --  validity checking mode. No need to do this if we are checking all\n+      --  subscripts.\n+\n+      --  Note that we do this right away, because there are some early return\n+      --  paths in this procedure, and this is required on all paths.\n+\n+      if Validity_Checks_On\n+        and then Validity_Check_Default\n+        and then not Validity_Check_Subscripts\n+      then\n+         Check_Valid_Lvalue_Subscripts (Lhs);\n+      end if;\n+\n       --  Ada 2005 (AI-327): Handle assignment to priority of protected object\n \n       --  Rewrite an assignment to X'Priority into a run-time call\n@@ -2065,14 +2079,31 @@ package body Exp_Ch5 is\n             --  Here the right side is valid, so it is fine. The case to deal\n             --  with is when the left side is a local variable reference whose\n             --  value is not currently known to be valid. If this is the case,\n-            --  and the assignment appears in an unconditional context, then we\n-            --  can mark the left side as now being valid.\n+            --  and the assignment appears in an unconditional context, then\n+            --  we can mark the left side as now being valid if one of these\n+            --  conditions holds:\n+\n+            --    The expression of the right side has Do_Range_Check set so\n+            --    that we know a range check will be performed. Note that it\n+            --    can be the case that a range check is omitted because we\n+            --    make the assumption that we can assume validity for operands\n+            --    appearing in the right side in determining whether a range\n+            --    check is required\n+\n+            --    The subtype of the right side matches the subtype of the\n+            --    left side. In this case, even though we have not checked\n+            --    the range of the right side, we know it is in range of its\n+            --    subtype if the expression is valid.\n \n             if Is_Local_Variable_Reference (Lhs)\n               and then not Is_Known_Valid (Entity (Lhs))\n               and then In_Unconditional_Context (N)\n             then\n-               Set_Is_Known_Valid (Entity (Lhs), True);\n+               if Do_Range_Check (Rhs)\n+                 or else Etype (Lhs) = Etype (Rhs)\n+               then\n+                  Set_Is_Known_Valid (Entity (Lhs), True);\n+               end if;\n             end if;\n \n          --  Case where right side may be invalid in the sense of the RM\n@@ -2145,17 +2176,6 @@ package body Exp_Ch5 is\n          end if;\n       end if;\n \n-      --  Defend against invalid subscripts on left side if we are in standard\n-      --  validity checking mode. No need to do this if we are checking all\n-      --  subscripts.\n-\n-      if Validity_Checks_On\n-        and then Validity_Check_Default\n-        and then not Validity_Check_Subscripts\n-      then\n-         Check_Valid_Lvalue_Subscripts (Lhs);\n-      end if;\n-\n    exception\n       when RE_Not_Available =>\n          return;"}, {"sha": "5e7003817fceacb1378b84ccb56b3493fe417f87", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97cb64f052a76046aaf4d3290ef5ceb744f3e779/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97cb64f052a76046aaf4d3290ef5ceb744f3e779/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=97cb64f052a76046aaf4d3290ef5ceb744f3e779", "patch": "@@ -643,6 +643,8 @@ package body Exp_Disp is\n          Typ := Non_Limited_View (Typ);\n       end if;\n \n+      --  Comment needed ???\n+\n       if Generate_SCIL then\n          Insert_Action (Call_Node,\n            New_Scil_Node\n@@ -1611,9 +1613,8 @@ package body Exp_Disp is\n \n    function Get_Scil_Node_Kind (Node : Node_Id) return Scil_Node_Kind is\n    begin\n-      pragma Assert (Nkind (Node) = N_Null_Statement\n-        and then Is_Scil_Node (Node));\n-\n+      pragma Assert\n+        (Nkind (Node) = N_Null_Statement and then Is_Scil_Node (Node));\n       return Scil_Node_Kind'Val (UI_To_Int (Scil_Nkind (Node)));\n    end Get_Scil_Node_Kind;\n \n@@ -4242,6 +4243,8 @@ package body Exp_Disp is\n                   New_Reference_To\n                     (RTE (RE_No_Dispatch_Table_Wrapper), Loc)));\n \n+            --  Comment needed ???\n+\n             if Generate_SCIL then\n                Insert_Before (Last (Result),\n                  New_Scil_Node\n@@ -4313,6 +4316,8 @@ package body Exp_Disp is\n                     Constraint => Make_Index_Or_Discriminant_Constraint (Loc,\n                                     Constraints => DT_Constr_List))));\n \n+            --  Comment needed ???\n+\n             if Generate_SCIL then\n                Insert_Before (Last (Result),\n                  New_Scil_Node\n@@ -4347,6 +4352,8 @@ package body Exp_Disp is\n                             (RTE_Record_Component (RE_Prims_Ptr), Loc)),\n                       Attribute_Name => Name_Address))));\n \n+            --  Comment needed ???\n+\n             if Generate_SCIL then\n                Insert_Before (Last (Result),\n                  New_Scil_Node\n@@ -5123,6 +5130,8 @@ package body Exp_Disp is\n                 Expression => Make_Aggregate (Loc,\n                   Expressions => DT_Aggr_List)));\n \n+            --  Comment needed ???\n+\n             if Generate_SCIL then\n                Insert_Before (Last (Result),\n                  New_Scil_Node\n@@ -5437,6 +5446,8 @@ package body Exp_Disp is\n                 Expression => Make_Aggregate (Loc,\n                   Expressions => DT_Aggr_List)));\n \n+            --  Comment needed ???\n+\n             if Generate_SCIL then\n                Insert_Before (Last (Result),\n                  New_Scil_Node\n@@ -6135,6 +6146,8 @@ package body Exp_Disp is\n                             (RTE_Record_Component (RE_Prims_Ptr), Loc)),\n                       Attribute_Name => Name_Address))));\n \n+            --  Comment needed ???\n+\n             if Generate_SCIL then\n                Insert_Before (Last (Result),\n                  New_Scil_Node\n@@ -6178,6 +6191,8 @@ package body Exp_Disp is\n                             (RTE_Record_Component (RE_NDT_Prims_Ptr), Loc)),\n                       Attribute_Name => Name_Address))));\n \n+            --  Comment needed ???\n+\n             if Generate_SCIL then\n                Insert_Before (Last (Result),\n                  New_Scil_Node\n@@ -6400,8 +6415,9 @@ package body Exp_Disp is\n       Res : constant Node_Id := Duplicate_Subexpr (From);\n    begin\n       if Is_Access_Type (Etype (From)) then\n-         return Make_Explicit_Dereference (Sloc (From),\n-                  Prefix => Res);\n+         return\n+           Make_Explicit_Dereference (Sloc (From),\n+             Prefix => Res);\n       else\n          return Res;\n       end if;\n@@ -6417,16 +6433,14 @@ package body Exp_Disp is\n       Entity       : Entity_Id := Empty;\n       Target_Prim  : Entity_Id := Empty) return Node_Id\n    is\n-      New_N : Node_Id;\n-\n+      New_N : constant Node_Id :=\n+                New_Node (N_Null_Statement, Sloc (Related_Node));\n    begin\n-      New_N := New_Node (N_Null_Statement, Sloc (Related_Node));\n       Set_Is_Scil_Node      (New_N);\n       Set_Scil_Nkind        (New_N, UI_From_Int (Scil_Node_Kind'Pos (Nkind)));\n       Set_Scil_Related_Node (New_N, Related_Node);\n       Set_Entity            (New_N, Entity);\n       Set_Scil_Target_Prim  (New_N, Target_Prim);\n-\n       return New_N;\n    end New_Scil_Node;\n "}, {"sha": "05609c3b17f2d0f9e8e8c95466b6bad85f070521", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97cb64f052a76046aaf4d3290ef5ceb744f3e779/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97cb64f052a76046aaf4d3290ef5ceb744f3e779/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=97cb64f052a76046aaf4d3290ef5ceb744f3e779", "patch": "@@ -34,8 +34,10 @@ package Exp_Disp is\n    -- SCIL Node Type Definition --\n    -------------------------------\n \n-   type Scil_Node_Kind is (\n-      Unused,\n+   --  Comment required! ??? What is this type???\n+\n+   type Scil_Node_Kind is\n+     (Unused,\n       IP_Tag_Init,\n       Dispatching_Call,\n       Dispatch_Table_Object_Init,"}, {"sha": "213812dfdc7b09f4dcc7ad555ccdcc1363ec8f69", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97cb64f052a76046aaf4d3290ef5ceb744f3e779/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97cb64f052a76046aaf4d3290ef5ceb744f3e779/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=97cb64f052a76046aaf4d3290ef5ceb744f3e779", "patch": "@@ -3842,6 +3842,12 @@ package Sinfo is\n       --  Entity (Node4-Sem)\n       --  Scil_Target_Prim (Node2-Sem)\n \n+      --  What are the above Scil fields for, and what has this got to do with\n+      --  null statements. MAJOR MISSING DOC HERE ??? All -Sem fields must be\n+      --  individually documented in the list of -Sem fields at the start of\n+      --  Sinfo, and we sure need significant documentation here explaining\n+      --  what on earth is going on with null statements!\n+\n       ----------------\n       -- 5.1  Label --\n       ----------------\n@@ -7234,6 +7240,8 @@ package Sinfo is\n       N_Goto_Statement,\n       N_Loop_Statement,\n       N_Null_Statement,\n+      --  N_Null_Statement now has an Entity field, but is not in N_Has_Entity.\n+      --  Either fix this, or document this peculiar irregularity ???\n       N_Raise_Statement,\n       N_Requeue_Statement,\n       N_Return_Statement, -- renamed as N_Simple_Return_Statement below"}]}