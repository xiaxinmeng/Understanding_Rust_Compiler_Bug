{"sha": "011646f5ef1722cfe07463256378bf7ffd0b1710", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDExNjQ2ZjVlZjE3MjJjZmUwNzQ2MzI1NjM3OGJmN2ZmZDBiMTcxMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-06-24T21:55:32Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-06-24T21:55:32Z"}, "message": "cfglayout.c (block_locators_locs, [...]): Change the type to VEC(int,heap)*.\n\n\t* cfglayout.c (block_locators_locs, line_locators_locs,\n\tline_locators_lines, file_locators_locs): Change the type to\n\tVEC(int,heap)*.\n\t(insn_locators_initialize, change_scope, insn_scope,\n\tlocator_line, insn_line, locator_file): Use VEC instead of\n\tVARRAY.\n\nFrom-SVN: r101297", "tree": {"sha": "5869b613f60c2dd995d74dea198f721ca11bffe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5869b613f60c2dd995d74dea198f721ca11bffe8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/011646f5ef1722cfe07463256378bf7ffd0b1710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/011646f5ef1722cfe07463256378bf7ffd0b1710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/011646f5ef1722cfe07463256378bf7ffd0b1710", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/011646f5ef1722cfe07463256378bf7ffd0b1710/comments", "author": null, "committer": null, "parents": [{"sha": "0620800904747ddbcece61fea155906d3c681e2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0620800904747ddbcece61fea155906d3c681e2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0620800904747ddbcece61fea155906d3c681e2c"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "91815c48bc0fa847ba8e94ba4cd7532937f2bfa5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/011646f5ef1722cfe07463256378bf7ffd0b1710/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/011646f5ef1722cfe07463256378bf7ffd0b1710/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=011646f5ef1722cfe07463256378bf7ffd0b1710", "patch": "@@ -1,3 +1,12 @@\n+2005-06-24  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* cfglayout.c (block_locators_locs, line_locators_locs,\n+\tline_locators_lines, file_locators_locs): Change the type to\n+\tVEC(int,heap)*.\n+\t(insn_locators_initialize, change_scope, insn_scope,\n+\tlocator_line, insn_line, locator_file): Use VEC instead of\n+\tVARRAY.\n+\n 2005-06-24  Jason Merrill  <jason@redhat.com>\n \n \t* tree-nrv.c (tree_nrv): Fix to check assignments to the"}, {"sha": "9c4d76d1ad5583829d861c303efca72bc09b6da3", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/011646f5ef1722cfe07463256378bf7ffd0b1710/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/011646f5ef1722cfe07463256378bf7ffd0b1710/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=011646f5ef1722cfe07463256378bf7ffd0b1710", "patch": "@@ -222,18 +222,21 @@ record_effective_endpoints (void)\n     cfg_layout_function_footer = unlink_insn_chain (cfg_layout_function_footer, get_last_insn ());\n }\n \f\n+DEF_VEC_I(int);\n+DEF_VEC_ALLOC_I(int,heap);\n+\n /* Data structures representing mapping of INSN_LOCATOR into scope blocks, line\n    numbers and files.  In order to be GGC friendly we need to use separate\n    varrays.  This also slightly improve the memory locality in binary search.\n    The _locs array contains locators where the given property change.  The\n    block_locators_blocks contains the scope block that is used for all insn\n    locator greater than corresponding block_locators_locs value and smaller\n    than the following one.  Similarly for the other properties.  */\n-static GTY(()) varray_type block_locators_locs;\n+static VEC(int,heap) *block_locators_locs;\n static GTY(()) VEC(tree,gc) *block_locators_blocks;\n-static GTY(()) varray_type line_locators_locs;\n-static GTY(()) varray_type line_locators_lines;\n-static GTY(()) varray_type file_locators_locs;\n+static VEC(int,heap) *line_locators_locs;\n+static VEC(int,heap) *line_locators_lines;\n+static VEC(int,heap) *file_locators_locs;\n static GTY(()) varray_type file_locators_files;\n int prologue_locator;\n int epilogue_locator;\n@@ -254,11 +257,11 @@ insn_locators_initialize (void)\n \n   prologue_locator = epilogue_locator = 0;\n \n-  VARRAY_INT_INIT (block_locators_locs, 32, \"block_locators_locs\");\n+  block_locators_locs = VEC_alloc (int, heap, 32);\n   block_locators_blocks = VEC_alloc (tree, gc, 32);\n-  VARRAY_INT_INIT (line_locators_locs, 32, \"line_locators_locs\");\n-  VARRAY_INT_INIT (line_locators_lines, 32, \"line_locators_lines\");\n-  VARRAY_INT_INIT (file_locators_locs, 32, \"file_locators_locs\");\n+  line_locators_locs = VEC_alloc (int, heap, 32);\n+  line_locators_lines = VEC_alloc (int, heap, 32);\n+  file_locators_locs = VEC_alloc (int, heap, 32);\n   VARRAY_CHAR_PTR_INIT (file_locators_files, 32, \"file_locators_files\");\n \n   for (insn = get_insns (); insn; insn = next)\n@@ -293,21 +296,21 @@ insn_locators_initialize (void)\n \t  if (last_block != block)\n \t    {\n \t      loc++;\n-\t      VARRAY_PUSH_INT (block_locators_locs, loc);\n+\t      VEC_safe_push (int, heap, block_locators_locs, loc);\n \t      VEC_safe_push (tree, gc, block_locators_blocks, block);\n \t      last_block = block;\n \t    }\n \t  if (last_line_number != line_number)\n \t    {\n \t      loc++;\n-\t      VARRAY_PUSH_INT (line_locators_locs, loc);\n-\t      VARRAY_PUSH_INT (line_locators_lines, line_number);\n+\t      VEC_safe_push (int, heap, line_locators_locs, loc);\n+\t      VEC_safe_push (int, heap, line_locators_lines, line_number);\n \t      last_line_number = line_number;\n \t    }\n \t  if (last_file_name != file_name)\n \t    {\n \t      loc++;\n-\t      VARRAY_PUSH_INT (file_locators_locs, loc);\n+\t      VEC_safe_push (int, heap, file_locators_locs, loc);\n \t      VARRAY_PUSH_CHAR_PTR (file_locators_files, (char *) file_name);\n \t      last_file_name = file_name;\n \t    }\n@@ -402,7 +405,7 @@ change_scope (rtx orig_insn, tree s1, tree s2)\n static tree\n insn_scope (rtx insn)\n {\n-  int max = VARRAY_ACTIVE_SIZE (block_locators_locs);\n+  int max = VEC_length (int, block_locators_locs);\n   int min = 0;\n   int loc = INSN_LOCATOR (insn);\n \n@@ -423,7 +426,7 @@ insn_scope (rtx insn)\n   while (1)\n     {\n       int pos = (min + max) / 2;\n-      int tmp = VARRAY_INT (block_locators_locs, pos);\n+      int tmp = VEC_index (int, block_locators_locs, pos);\n \n       if (tmp <= loc && min != pos)\n \tmin = pos;\n@@ -442,15 +445,15 @@ insn_scope (rtx insn)\n int\n locator_line (int loc)\n {\n-  int max = VARRAY_ACTIVE_SIZE (line_locators_locs);\n+  int max = VEC_length (int, line_locators_locs);\n   int min = 0;\n \n   if (!max || !loc)\n     return 0;\n   while (1)\n     {\n       int pos = (min + max) / 2;\n-      int tmp = VARRAY_INT (line_locators_locs, pos);\n+      int tmp = VEC_index (int, line_locators_locs, pos);\n \n       if (tmp <= loc && min != pos)\n \tmin = pos;\n@@ -462,7 +465,7 @@ locator_line (int loc)\n \t  break;\n \t}\n     }\n-   return VARRAY_INT (line_locators_lines, min);\n+  return VEC_index (int, line_locators_lines, min);\n }\n \n /* Return line number of the statement that produced this insn.  */\n@@ -476,15 +479,15 @@ insn_line (rtx insn)\n const char *\n locator_file (int loc)\n {\n-  int max = VARRAY_ACTIVE_SIZE (file_locators_locs);\n+  int max = VEC_length (int, file_locators_locs);\n   int min = 0;\n \n   if (!max || !loc)\n     return NULL;\n   while (1)\n     {\n       int pos = (min + max) / 2;\n-      int tmp = VARRAY_INT (file_locators_locs, pos);\n+      int tmp = VEC_index (int, file_locators_locs, pos);\n \n       if (tmp <= loc && min != pos)\n \tmin = pos;"}]}