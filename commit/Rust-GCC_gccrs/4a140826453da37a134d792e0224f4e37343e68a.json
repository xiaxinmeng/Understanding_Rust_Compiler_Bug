{"sha": "4a140826453da37a134d792e0224f4e37343e68a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGExNDA4MjY0NTNkYTM3YTEzNGQ3OTJlMDIyNGY0ZTM3MzQzZTY4YQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-08-30T21:49:49Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-08-30T21:49:49Z"}, "message": "compile, runtime: permit anonymous and empty fields in C header\n    \n    Permit putting structs with anonymous and empty fields in the C header\n    file runtime.inc that is used to build the C runtime code.  This is\n    required for upcoming 1.13 support, as the m struct has picked up an\n    anonymous field.\n    \n    Doing this lets the C header contain all the type descriptor structs,\n    so start using those in the C code.  This cuts the number of copies of\n    type descriptor definitions from 3 to 2.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/192343\n\nFrom-SVN: r275227", "tree": {"sha": "04d27dc317f007c64a3954cd2744b89bc7ed0b47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04d27dc317f007c64a3954cd2744b89bc7ed0b47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a140826453da37a134d792e0224f4e37343e68a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a140826453da37a134d792e0224f4e37343e68a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a140826453da37a134d792e0224f4e37343e68a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a140826453da37a134d792e0224f4e37343e68a/comments", "author": null, "committer": null, "parents": [{"sha": "aff0632d4fa0d55b2c830e5dc975242dd246fc87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff0632d4fa0d55b2c830e5dc975242dd246fc87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aff0632d4fa0d55b2c830e5dc975242dd246fc87"}], "stats": {"total": 445, "additions": 109, "deletions": 336}, "files": [{"sha": "e2459733b3dbfa878b549795e832e887c406778a", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a140826453da37a134d792e0224f4e37343e68a/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a140826453da37a134d792e0224f4e37343e68a/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=4a140826453da37a134d792e0224f4e37343e68a", "patch": "@@ -1,4 +1,4 @@\n-db738935c77443840994e5a9f77e619e67a4c43a\n+11fd9208f8545e882f945d3ed86fcc33abf1a61b\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "f8114eceac320e29c4e34e76a64b55616fe87aaf", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a140826453da37a134d792e0224f4e37343e68a/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a140826453da37a134d792e0224f4e37343e68a/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=4a140826453da37a134d792e0224f4e37343e68a", "patch": "@@ -5238,11 +5238,11 @@ Gogo::write_c_header()\n       // package they are mostly types defined by mkrsysinfo.sh based\n       // on the C system header files.  We don't need to translate\n       // types to C and back to Go.  But do accept the special cases\n-      // _defer and _panic.\n+      // _defer, _panic, and _type.\n       std::string name = Gogo::unpack_hidden_name(no->name());\n       if (name[0] == '_'\n \t  && (name[1] < 'A' || name[1] > 'Z')\n-\t  && (name != \"_defer\" && name != \"_panic\"))\n+\t  && (name != \"_defer\" && name != \"_panic\" && name != \"_type\"))\n \tcontinue;\n \n       if (no->is_type() && no->type_value()->struct_type() != NULL)"}, {"sha": "0ada84106f9ba5c263a9601b2b21c2b21b3d6f12", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a140826453da37a134d792e0224f4e37343e68a/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a140826453da37a134d792e0224f4e37343e68a/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=4a140826453da37a134d792e0224f4e37343e68a", "patch": "@@ -6777,8 +6777,6 @@ Struct_type::can_write_to_c_header(\n        p != fields->end();\n        ++p)\n     {\n-      if (p->is_anonymous())\n-\treturn false;\n       if (!this->can_write_type_to_c_header(p->type(), requires, declare))\n \treturn false;\n       if (Gogo::message_name(p->field_name()) == \"_\")\n@@ -6847,6 +6845,9 @@ Struct_type::can_write_type_to_c_header(\n \t  }\n \tif (t->struct_type() != NULL)\n \t  {\n+\t    // We will accept empty struct fields, but not print them.\n+\t    if (t->struct_type()->total_field_count() == 0)\n+\t      return true;\n \t    requires->push_back(no);\n \t    return t->struct_type()->can_write_to_c_header(requires, declare);\n \t  }\n@@ -6871,6 +6872,12 @@ Struct_type::write_to_c_header(std::ostream& os) const\n        p != fields->end();\n        ++p)\n     {\n+      // Skip fields that are empty struct types.  The C code can't\n+      // refer to them anyhow.\n+      if (p->type()->struct_type() != NULL\n+\t  && p->type()->struct_type()->total_field_count() == 0)\n+\tcontinue;\n+\n       os << '\\t';\n       this->write_field_to_c_header(os, p->field_name(), p->type());\n       os << ';' << std::endl;"}, {"sha": "a0cfb38890e7c407cbbe02153df35f5393b9a1c5", "filename": "libgo/go/reflect/makefunc_ffi_c.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fgo%2Freflect%2Fmakefunc_ffi_c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fgo%2Freflect%2Fmakefunc_ffi_c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fmakefunc_ffi_c.c?ref=4a140826453da37a134d792e0224f4e37343e68a", "patch": "@@ -3,7 +3,6 @@\n // license that can be found in the LICENSE file.\n \n #include \"runtime.h\"\n-#include \"go-type.h\"\n \n #ifdef USE_LIBFFI\n "}, {"sha": "24837389f4f5e0991e5bc006dd8c575b4b249541", "filename": "libgo/mkruntimeinc.sh", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fmkruntimeinc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fmkruntimeinc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmkruntimeinc.sh?ref=4a140826453da37a134d792e0224f4e37343e68a", "patch": "@@ -29,6 +29,12 @@ do\n   sed -e '/struct '${TYPE}' {/,/^}/s/^.*$//' runtime.inc.tmp2 > runtime.inc.tmp3;\n   mv runtime.inc.tmp3 runtime.inc.tmp2\n done\n-sed -e 's/sigset/sigset_go/' runtime.inc.tmp2 > ${OUT}\n+sed -e 's/sigset/sigset_go/' runtime.inc.tmp2 > runtime.inc.tmp3\n+mv runtime.inc.tmp3 runtime.inc.tmp2\n+\n+# Make all the fields of type structs const.\n+sed -e '/struct .*type {/,/^}/ s/\t\\(.*;\\)/\tconst \\1/' < runtime.inc.tmp2 > runtime.inc.tmp3\n+mv -f runtime.inc.tmp3 ${OUT}\n+\n rm -f runtime.inc.tmp2 runtime.inc.tmp3\n exit 0"}, {"sha": "a72105833d85ff13049c79544b27d87e62b4de15", "filename": "libgo/runtime/go-construct-map.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fruntime%2Fgo-construct-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fruntime%2Fgo-construct-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-construct-map.c?ref=4a140826453da37a134d792e0224f4e37343e68a", "patch": "@@ -9,20 +9,17 @@\n #include <stdlib.h>\n \n #include \"runtime.h\"\n-#include \"go-type.h\"\n \n-extern void *makemap (const struct __go_map_type *, intgo hint,\n-\t\t      void *)\n+extern void *makemap (const struct maptype *, intgo hint, void *)\n   __asm__ (GOSYM_PREFIX \"runtime.makemap\");\n \n-extern void *mapassign (const struct __go_map_type *, void *hmap,\n-\t\t\tconst void *key)\n+extern void *mapassign (const struct maptype *, void *hmap, const void *key)\n   __asm__ (GOSYM_PREFIX \"runtime.mapassign\");\n \n void *\n-__go_construct_map (const struct __go_map_type *type,\n-\t\t    uintptr_t count, uintptr_t entry_size,\n-\t\t    uintptr_t val_offset, const void *ventries)\n+__go_construct_map (const struct maptype *type, uintptr_t count,\n+\t\t    uintptr_t entry_size, uintptr_t val_offset,\n+\t\t    const void *ventries)\n {\n   void *ret;\n   const unsigned char *entries;\n@@ -35,7 +32,7 @@ __go_construct_map (const struct __go_map_type *type,\n   for (i = 0; i < count; ++i)\n     {\n       p = mapassign (type, ret, entries);\n-      typedmemmove (type->__val_type, p, entries + val_offset);\n+      typedmemmove (type->elem, p, entries + val_offset);\n       entries += entry_size;\n     }\n "}, {"sha": "1d85050472318f701a60411a571c4646edc585ca", "filename": "libgo/runtime/go-fieldtrack.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fruntime%2Fgo-fieldtrack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fruntime%2Fgo-fieldtrack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-fieldtrack.c?ref=4a140826453da37a134d792e0224f4e37343e68a", "patch": "@@ -5,7 +5,6 @@\n    license that can be found in the LICENSE file.  */\n \n #include \"runtime.h\"\n-#include \"go-type.h\"\n \n /* The compiler will track fields that have the tag go:\"track\".  Any\n    function that refers to such a field will call this function with a\n@@ -41,8 +40,7 @@ extern const char __edata[] __attribute__ ((weak));\n extern const char __bss_start[] __attribute__ ((weak));\n #endif\n \n-extern void *mapassign (const struct __go_map_type *, void *hmap,\n-\t\t\tconst void *key)\n+extern void *mapassign (const struct maptype *, void *hmap, const void *key)\n   __asm__ (GOSYM_PREFIX \"runtime.mapassign\");\n \n // The type descriptor for map[string] bool.  */"}, {"sha": "ffae9030420c14d63c51188ad9d104c0cc085c55", "filename": "libgo/runtime/go-reflect-call.c", "status": "modified", "additions": 39, "deletions": 41, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fruntime%2Fgo-reflect-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fruntime%2Fgo-reflect-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-reflect-call.c?ref=4a140826453da37a134d792e0224f4e37343e68a", "patch": "@@ -10,7 +10,6 @@\n \n #include \"runtime.h\"\n #include \"go-assert.h\"\n-#include \"go-type.h\"\n \n #ifdef USE_LIBFFI\n #include \"ffi.h\"\n@@ -22,45 +21,44 @@\n    reflect_call calls a libffi function, which will be compiled\n    without -fsplit-stack, it will always run with a large stack.  */\n \n-static size_t go_results_size (const struct __go_func_type *)\n+static size_t go_results_size (const struct functype *)\n   __attribute__ ((no_split_stack));\n-static void go_set_results (const struct __go_func_type *, unsigned char *,\n-\t\t\t    void **)\n+static void go_set_results (const struct functype *, unsigned char *, void **)\n   __attribute__ ((no_split_stack));\n \n /* Get the total size required for the result parameters of a\n    function.  */\n \n static size_t\n-go_results_size (const struct __go_func_type *func)\n+go_results_size (const struct functype *func)\n {\n   int count;\n-  const struct __go_type_descriptor **types;\n+  const struct _type **types;\n   size_t off;\n   size_t maxalign;\n   int i;\n \n-  count = func->__out.__count;\n+  count = func->out.__count;\n   if (count == 0)\n     return 0;\n \n-  types = (const struct __go_type_descriptor **) func->__out.__values;\n+  types = (const struct _type **) func->out.__values;\n \n   /* A single integer return value is always promoted to a full\n      word.  */\n   if (count == 1)\n     {\n-      switch (types[0]->__code & GO_CODE_MASK)\n+      switch (types[0]->kind & kindMask)\n \t{\n-\tcase GO_BOOL:\n-\tcase GO_INT8:\n-\tcase GO_INT16:\n-\tcase GO_INT32:\n-\tcase GO_UINT8:\n-\tcase GO_UINT16:\n-\tcase GO_UINT32:\n-\tcase GO_INT:\n-\tcase GO_UINT:\n+\tcase kindBool:\n+\tcase kindInt8:\n+\tcase kindInt16:\n+\tcase kindInt32:\n+\tcase kindUint8:\n+\tcase kindUint16:\n+\tcase kindUint32:\n+\tcase kindInt:\n+\tcase kindUint:\n \t  return sizeof (ffi_arg);\n \n \tdefault:\n@@ -74,11 +72,11 @@ go_results_size (const struct __go_func_type *func)\n     {\n       size_t align;\n \n-      align = types[i]->__field_align;\n+      align = types[i]->fieldAlign;\n       if (align > maxalign)\n \tmaxalign = align;\n       off = (off + align - 1) & ~ (align - 1);\n-      off += types[i]->__size;\n+      off += types[i]->size;\n     }\n \n   off = (off + maxalign - 1) & ~ (maxalign - 1);\n@@ -96,35 +94,35 @@ go_results_size (const struct __go_func_type *func)\n    into the addresses in RESULTS.  */\n \n static void\n-go_set_results (const struct __go_func_type *func, unsigned char *call_result,\n+go_set_results (const struct functype *func, unsigned char *call_result,\n \t\tvoid **results)\n {\n   int count;\n-  const struct __go_type_descriptor **types;\n+  const struct _type **types;\n   size_t off;\n   int i;\n \n-  count = func->__out.__count;\n+  count = func->out.__count;\n   if (count == 0)\n     return;\n \n-  types = (const struct __go_type_descriptor **) func->__out.__values;\n+  types = (const struct _type **) func->out.__values;\n \n   /* A single integer return value is always promoted to a full\n      word.  */\n   if (count == 1)\n     {\n-      switch (types[0]->__code & GO_CODE_MASK)\n+      switch (types[0]->kind & kindMask)\n \t{\n-\tcase GO_BOOL:\n-\tcase GO_INT8:\n-\tcase GO_INT16:\n-\tcase GO_INT32:\n-\tcase GO_UINT8:\n-\tcase GO_UINT16:\n-\tcase GO_UINT32:\n-\tcase GO_INT:\n-\tcase GO_UINT:\n+\tcase kindBool:\n+\tcase kindInt8:\n+\tcase kindInt16:\n+\tcase kindInt32:\n+\tcase kindUint8:\n+\tcase kindUint16:\n+\tcase kindUint32:\n+\tcase kindInt:\n+\tcase kindUint:\n \t  {\n \t    union\n \t    {\n@@ -136,7 +134,7 @@ go_set_results (const struct __go_func_type *func, unsigned char *call_result,\n \t    __builtin_memcpy (&u.buf, call_result, sizeof (ffi_arg));\n \t    v = u.v;\n \n-\t    switch (types[0]->__size)\n+\t    switch (types[0]->size)\n \t      {\n \t      case 1:\n \t\t{\n@@ -191,8 +189,8 @@ go_set_results (const struct __go_func_type *func, unsigned char *call_result,\n       size_t align;\n       size_t size;\n \n-      align = types[i]->__field_align;\n-      size = types[i]->__size;\n+      align = types[i]->fieldAlign;\n+      size = types[i]->size;\n       off = (off + align - 1) & ~ (align - 1);\n       __builtin_memcpy (results[i], call_result + off, size);\n       off += size;\n@@ -201,7 +199,7 @@ go_set_results (const struct __go_func_type *func, unsigned char *call_result,\n \n /* The code that converts the Go type to an FFI type is written in Go,\n    so that it can allocate Go heap memory.  */\n-extern void ffiFuncToCIF(const struct __go_func_type*, _Bool, _Bool, ffi_cif*)\n+extern void ffiFuncToCIF(const struct functype*, _Bool, _Bool, ffi_cif*)\n   __asm__ (\"runtime.ffiFuncToCIF\");\n \n /* Call a function.  The type of the function is FUNC_TYPE, and the\n@@ -217,14 +215,14 @@ extern void ffiFuncToCIF(const struct __go_func_type*, _Bool, _Bool, ffi_cif*)\n    regardless of FUNC_TYPE, it is passed as a pointer.  */\n \n void\n-reflect_call (const struct __go_func_type *func_type, FuncVal *func_val,\n+reflect_call (const struct functype *func_type, FuncVal *func_val,\n \t      _Bool is_interface, _Bool is_method, void **params,\n \t      void **results)\n {\n   ffi_cif cif;\n   unsigned char *call_result;\n \n-  __go_assert ((func_type->__common.__code & GO_CODE_MASK) == GO_FUNC);\n+  __go_assert ((func_type->typ.kind & kindMask) == kindFunc);\n   ffiFuncToCIF (func_type, is_interface, is_method, &cif);\n \n   call_result = (unsigned char *) malloc (go_results_size (func_type));\n@@ -243,7 +241,7 @@ reflect_call (const struct __go_func_type *func_type, FuncVal *func_val,\n #else /* !defined(USE_LIBFFI) */\n \n void\n-reflect_call (const struct __go_func_type *func_type __attribute__ ((unused)),\n+reflect_call (const struct functype *func_type __attribute__ ((unused)),\n \t      FuncVal *func_val __attribute__ ((unused)),\n \t      _Bool is_interface __attribute__ ((unused)),\n \t      _Bool is_method __attribute__ ((unused)),"}, {"sha": "1935703acc6012058d64f32a1e49624ce96a3188", "filename": "libgo/runtime/go-type.h", "status": "removed", "additions": 0, "deletions": 229, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff0632d4fa0d55b2c830e5dc975242dd246fc87/libgo%2Fruntime%2Fgo-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff0632d4fa0d55b2c830e5dc975242dd246fc87/libgo%2Fruntime%2Fgo-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-type.h?ref=aff0632d4fa0d55b2c830e5dc975242dd246fc87", "patch": "@@ -1,229 +0,0 @@\n-/* go-type.h -- basic information for a Go type.\n-\n-   Copyright 2009 The Go Authors. All rights reserved.\n-   Use of this source code is governed by a BSD-style\n-   license that can be found in the LICENSE file.  */\n-\n-#ifndef LIBGO_GO_TYPE_H\n-#define LIBGO_GO_TYPE_H\n-\n-#include <stddef.h>\n-#include <stdint.h>\n-\n-#include \"array.h\"\n-\n-struct String;\n-\n-/* Many of the types in this file must match the data structures\n-   generated by the compiler, and must also match the Go types which\n-   appear in go/runtime/type.go and go/reflect/type.go.  */\n-\n-/* Type kinds.  These are used to get the type descriptor to use for\n-   the type itself, when using unsafe.Typeof or unsafe.Reflect.  The\n-   values here must match the values generated by the compiler (the\n-   RUNTIME_TYPE_KIND_xxx values in gcc/go/types.h).  These are macros\n-   rather than an enum to make it easy to change values in the future\n-   and hard to get confused about it.\n-\n-   These correspond to the kind values used by the gc compiler.  */\n-\n-#define GO_BOOL 1\n-#define GO_INT 2\n-#define GO_INT8 3\n-#define GO_INT16 4\n-#define GO_INT32 5\n-#define GO_INT64 6\n-#define GO_UINT 7\n-#define GO_UINT8 8\n-#define GO_UINT16 9\n-#define GO_UINT32 10\n-#define GO_UINT64 11\n-#define GO_UINTPTR 12\n-#define GO_FLOAT32 13\n-#define GO_FLOAT64 14\n-#define GO_COMPLEX64 15\n-#define GO_COMPLEX128 16\n-#define GO_ARRAY 17\n-#define GO_CHAN 18\n-#define GO_FUNC 19\n-#define GO_INTERFACE 20\n-#define GO_MAP 21\n-#define GO_PTR 22\n-#define GO_SLICE 23\n-#define GO_STRING 24\n-#define GO_STRUCT 25\n-#define GO_UNSAFE_POINTER 26\n-\n-#define GO_DIRECT_IFACE (1 << 5)\n-#define GO_GC_PROG (1 << 6)\n-#define GO_NO_POINTERS (1 << 7)\n-\n-#define GO_CODE_MASK 0x1f\n-\n-/* For each Go type the compiler constructs one of these structures.\n-   This is used for type reflection, interfaces, maps, and reference\n-   counting.  */\n-\n-struct __go_type_descriptor\n-{\n-  /* The size in bytes of a value of this type.  Note that all types\n-     in Go have a fixed size.  */\n-  uintptr_t __size;\n-\n-  /* The size of the memory prefix of a value of this type that holds\n-     all pointers.  */\n-  uintptr_t __ptrdata;\n-\n-  /* The type's hash code.  */\n-  uint32_t __hash;\n-\n-  /* The type code for this type, one of the type kind values above.\n-     This is used by unsafe.Reflect and unsafe.Typeof to determine the\n-     type descriptor to return for this type itself.  It is also used\n-     by reflect.toType when mapping to a reflect Type structure.  */\n-  unsigned char __code;\n-\n-  /* The alignment in bytes of a variable with this type.  */\n-  unsigned char __align;\n-\n-  /* The alignment in bytes of a struct field with this type.  */\n-  unsigned char __field_align;\n-\n-  /* This function takes a pointer to a value of this type, and the\n-     size of this type, and returns a hash code.  We pass the size\n-     explicitly becaues it means that we can share a single instance\n-     of this function for various different types.  */\n-  const FuncVal *__hashfn;\n-\n-  /* This function takes two pointers to values of this type, and the\n-     size of this type, and returns whether the values are equal.  */\n-  const FuncVal *__equalfn;\n-\n-  /* The garbage collection data. */\n-  const byte *__gcdata;\n-\n-  /* A string describing this type.  This is only used for\n-     debugging.  */\n-  const struct String *__reflection;\n-\n-  /* A pointer to fields which are only used for some types.  */\n-  const struct __go_uncommon_type *__uncommon;\n-\n-  /* The descriptor for the type which is a pointer to this type.\n-     This may be NULL.  */\n-  const struct __go_type_descriptor *__pointer_to_this;\n-};\n-\n-/* The information we store for each method of a type.  */\n-\n-struct __go_method\n-{\n-  /* The name of the method.  */\n-  const struct String *__name;\n-\n-  /* This is NULL for an exported method, or the name of the package\n-     where it lives.  */\n-  const struct String *__pkg_path;\n-\n-  /* The type of the method, without the receiver.  This will be a\n-     function type.  */\n-  const struct __go_type_descriptor *__mtype;\n-\n-  /* The type of the method, with the receiver.  This will be a\n-     function type.  */\n-  const struct __go_type_descriptor *__type;\n-\n-  /* A pointer to the code which implements the method.  This is\n-     really a function pointer.  */\n-  const void *__function;\n-};\n-\n-/* Additional information that we keep for named types and for types\n-   with methods.  */\n-\n-struct __go_uncommon_type\n-{\n-  /* The name of the type.  */\n-  const struct String *__name;\n-\n-  /* The type's package.  This is NULL for builtin types.  */\n-  const struct String *__pkg_path;\n-\n-  /* The type's methods.  This is an array of struct __go_method.  */\n-  struct __go_open_array __methods;\n-};\n-\n-/* The type descriptor for a function.  */\n-\n-struct __go_func_type\n-{\n-  /* Starts like all other type descriptors.  */\n-  struct __go_type_descriptor __common;\n-\n-  /* Whether this is a varargs function.  If this is true, there will\n-     be at least one parameter.  For \"...\" the last parameter type is\n-     \"interface{}\".  For \"... T\" the last parameter type is \"[]T\".  */\n-  _Bool __dotdotdot;\n-\n-  /* The input parameter types.  This is an array of pointers to\n-     struct __go_type_descriptor.  */\n-  struct __go_open_array __in;\n-\n-  /* The output parameter types.  This is an array of pointers to\n-     struct __go_type_descriptor.  */\n-  struct __go_open_array __out;\n-};\n-\n-/* A map type.  */\n-\n-struct __go_map_type\n-{\n-  /* Starts like all other type descriptors.  */\n-  struct __go_type_descriptor __common;\n-\n-  /* The map key type.  */\n-  const struct __go_type_descriptor *__key_type;\n-\n-  /* The map value type.  */\n-  const struct __go_type_descriptor *__val_type;\n-\n-  /* The map bucket type.  */\n-  const struct __go_type_descriptor *__bucket_type;\n-\n-  /* The map header type.  */\n-  const struct __go_type_descriptor *__hmap_type;\n-\n-  /* The size of the key slot.  */\n-  uint8_t __key_size;\n-\n-  /* Whether to store a pointer to key rather than the key itself.  */\n-  uint8_t __indirect_key;\n-\n-  /* The size of the value slot.  */\n-  uint8_t __value_size;\n-\n-  /* Whether to store a pointer to value rather than the value itself.  */\n-  uint8_t __indirect_value;\n-\n-  /* The size of a bucket.  */\n-  uint16_t __bucket_size;\n-\n-  /* Whether the key type is reflexive--whether k==k for all keys.  */\n-  _Bool __reflexive_key;\n-\n-  /* Whether we should update the key when overwriting an entry.  */\n-  _Bool __need_key_update;\n-};\n-\n-/* A pointer type.  */\n-\n-struct __go_ptr_type\n-{\n-  /* Starts like all other type descriptors.  */\n-  struct __go_type_descriptor __common;\n-\n-  /* The type to which this points.  */\n-  const struct __go_type_descriptor *__element_type;\n-};\n-\n-#endif /* !defined(LIBGO_GO_TYPE_H) */"}, {"sha": "d987acab637d2b437e4dcb6afb05eecb25ad73aa", "filename": "libgo/runtime/go-unsafe-pointer.c", "status": "modified", "additions": 36, "deletions": 33, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fruntime%2Fgo-unsafe-pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fruntime%2Fgo-unsafe-pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unsafe-pointer.c?ref=4a140826453da37a134d792e0224f4e37343e68a", "patch": "@@ -7,14 +7,13 @@\n #include <stddef.h>\n \n #include \"runtime.h\"\n-#include \"go-type.h\"\n \n /* This file provides the type descriptor for the unsafe.Pointer type.\n    The unsafe package is defined by the compiler itself, which means\n    that there is no package to compile to define the type\n    descriptor.  */\n \n-extern const struct __go_type_descriptor unsafe_Pointer\n+extern const struct _type unsafe_Pointer\n   __asm__ (GOSYM_PREFIX \"unsafe.Pointer..d\");\n \n extern const byte unsafe_Pointer_gc[]\n@@ -42,39 +41,41 @@ extern const FuncVal runtime_pointerhash_descriptor\n extern const FuncVal runtime_pointerequal_descriptor\n   __asm__ (GOSYM_PREFIX \"runtime.pointerequal..f\");\n \n-const struct __go_type_descriptor unsafe_Pointer =\n+const struct _type unsafe_Pointer =\n {\n-  /* __size */\n+  /* size */\n   sizeof (void *),\n-  /* __ptrdata */\n+  /* ptrdata */\n   sizeof (void *),\n-  /* __hash */\n+  /* hash */\n   78501163U,\n-  /* __code */\n-  GO_UNSAFE_POINTER | GO_DIRECT_IFACE,\n-  /* __align */\n+  /* kind */\n+  kindUnsafePointer | kindDirectIface,\n+  /* align */\n   __alignof (void *),\n-  /* __field_align */\n+  /* fieldAlign */\n   offsetof (struct field_align, p) - 1,\n-  /* __hashfn */\n+  /* _ */\n+  0,\n+  /* hashfn */\n   &runtime_pointerhash_descriptor,\n-  /* __equalfn */\n+  /* equalfn */\n   &runtime_pointerequal_descriptor,\n-  /* __gcdata */\n+  /* gcdata */\n   unsafe_Pointer_gc,\n-  /* __reflection */\n+  /* _string */\n   &reflection_string,\n-  /* __uncommon */\n+  /* uncommontype */\n   NULL,\n-  /* __pointer_to_this */\n+  /* ptrToThis */\n   NULL\n };\n \n /* We also need the type descriptor for the pointer to unsafe.Pointer,\n    since any package which refers to that type descriptor will expect\n    it to be defined elsewhere.  */\n \n-extern const struct __go_ptr_type pointer_unsafe_Pointer\n+extern const struct ptrtype pointer_unsafe_Pointer\n   __asm__ (GOSYM_PREFIX \"type...1unsafe.Pointer\");\n \n /* The reflection string.  */\n@@ -90,35 +91,37 @@ extern const byte pointer_unsafe_Pointer_gc[]\n \n const byte pointer_unsafe_Pointer_gc[] = { 1 };\n \n-const struct __go_ptr_type pointer_unsafe_Pointer =\n+const struct ptrtype pointer_unsafe_Pointer =\n {\n-  /* __common */\n+  /* type */\n   {\n-    /* __size */\n+    /* size */\n     sizeof (void *),\n-    /* __ptrdata */\n+    /* ptrdata */\n     sizeof (void *),\n-    /* __hash */\n+    /* hash */\n     1256018616U,\n-    /* __code */\n-    GO_PTR | GO_DIRECT_IFACE,\n-    /* __align */\n+    /* kind */\n+    kindPtr | kindDirectIface,\n+    /* align */\n     __alignof (void *),\n-    /* __field_align */\n+    /* fieldAlign */\n     offsetof (struct field_align, p) - 1,\n-    /* __hashfn */\n+    /* _ */\n+    0,\n+    /*_hashfn */\n     &runtime_pointerhash_descriptor,\n-    /* __equalfn */\n+    /* equalfn */\n     &runtime_pointerequal_descriptor,\n-    /* __gcdata */\n+    /* gcdata */\n     pointer_unsafe_Pointer_gc,\n-    /* __reflection */\n+    /* _string */\n     &preflection_string,\n-    /* __uncommon */\n+    /* uncommontype */\n     NULL,\n-    /* __pointer_to_this */\n+    /* ptrToThis */\n     NULL\n   },\n-  /* __element_type */\n+  /* elem */\n   &unsafe_Pointer\n };"}, {"sha": "f0269e8d20b5211302c733fbbae47f173da74a9b", "filename": "libgo/runtime/print.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fruntime%2Fprint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fruntime%2Fprint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fprint.c?ref=4a140826453da37a134d792e0224f4e37343e68a", "patch": "@@ -7,7 +7,6 @@\n #include <stdarg.h>\n #include \"runtime.h\"\n #include \"array.h\"\n-#include \"go-type.h\"\n \n extern void runtime_printlock(void)\n   __asm__(GOSYM_PREFIX \"runtime.printlock\");"}, {"sha": "274ce01c0bf1d5b99c0c4641ba2354dcf41dbf22", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=4a140826453da37a134d792e0224f4e37343e68a", "patch": "@@ -18,7 +18,6 @@\n #include \"runtime.h\"\n #include \"arch.h\"\n #include \"defs.h\"\n-#include \"go-type.h\"\n \n #ifdef USING_SPLIT_STACK\n "}, {"sha": "8ff578ecf82598d827150da76ca5a71a8fb7b8e1", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a140826453da37a134d792e0224f4e37343e68a/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=4a140826453da37a134d792e0224f4e37343e68a", "patch": "@@ -72,14 +72,9 @@ typedef struct\tschedt\t\tSched;\n typedef\tstruct\t__go_open_array\t\tSlice;\n typedef\tstruct\tiface\t\t\tIface;\n typedef\tstruct\teface\t\t\tEface;\n-typedef\tstruct\t__go_type_descriptor\tType;\n typedef\tstruct\t_defer\t\t\tDefer;\n typedef\tstruct\t_panic\t\t\tPanic;\n \n-typedef struct\t__go_ptr_type\t\tPtrType;\n-typedef struct\t__go_func_type\t\tFuncType;\n-typedef struct\t__go_map_type\t\tMapType;\n-\n typedef struct  tracebackg\tTraceback;\n \n typedef struct\tlocation\tLocation;\n@@ -96,6 +91,10 @@ struct FuncVal\n \t// variable-size, fn-specific data here\n };\n \n+// Type structs will be defined by runtime.inc.\n+struct _type;\n+struct functype;\n+\n #include \"array.h\"\n \n // Rename Go types generated by mkrsysinfo.sh from C types, to avoid\n@@ -208,7 +207,6 @@ intgo\truntime_findnull(const byte*)\n \n void\truntime_gogo(G*)\n   __asm__ (GOSYM_PREFIX \"runtime.gogo\");\n-struct __go_func_type;\n void\truntime_args(int32, byte**)\n   __asm__ (GOSYM_PREFIX \"runtime.args\");\n void\truntime_osinit(void)\n@@ -249,7 +247,7 @@ void\truntime_signalstack(byte*, uintptr)\n   __asm__ (GOSYM_PREFIX \"runtime.signalstack\");\n void\truntime_mallocinit(void)\n   __asm__ (GOSYM_PREFIX \"runtime.mallocinit\");\n-void*\truntime_mallocgc(uintptr, const Type*, bool)\n+void*\truntime_mallocgc(uintptr, const struct _type*, bool)\n   __asm__ (GOSYM_PREFIX \"runtime.mallocgc\");\n void*\truntime_sysAlloc(uintptr, uint64*)\n   __asm__ (GOSYM_PREFIX \"runtime.sysAlloc\");\n@@ -366,7 +364,7 @@ void __wrap_rtems_task_variable_add(void **);\n /*\n  * runtime go-called\n  */\n-void reflect_call(const struct __go_func_type *, FuncVal *, _Bool, _Bool,\n+void reflect_call(const struct functype *, FuncVal *, _Bool, _Bool,\n \t\t  void **, void **)\n   __asm__ (GOSYM_PREFIX \"runtime.reflectcall\");\n void runtime_panic(Eface)\n@@ -442,9 +440,7 @@ extern void _cgo_notify_runtime_init_done (void)\n   __asm__ (GOSYM_PREFIX \"runtime._cgo_notify_runtime_init_done\");\n extern _Bool runtime_iscgo;\n extern uintptr __go_end __attribute__ ((weak));\n-extern void *getitab(const struct __go_type_descriptor *,\n-\t\t     const struct __go_type_descriptor *,\n-\t\t     _Bool)\n+extern void *getitab(const struct _type *, const struct _type *, _Bool)\n   __asm__ (GOSYM_PREFIX \"runtime.getitab\");\n \n extern void runtime_cpuinit(void);\n@@ -454,7 +450,7 @@ extern void setIsCgo(void)\n   __asm__ (GOSYM_PREFIX \"runtime.setIsCgo\");\n extern void setSupportAES(bool)\n   __asm__ (GOSYM_PREFIX \"runtime.setSupportAES\");\n-extern void typedmemmove(const Type *, void *, const void *)\n+extern void typedmemmove(const struct _type *, void *, const void *)\n   __asm__ (GOSYM_PREFIX \"runtime.typedmemmove\");\n extern Sched* runtime_getsched(void)\n   __asm__ (GOSYM_PREFIX \"runtime.getsched\");"}]}