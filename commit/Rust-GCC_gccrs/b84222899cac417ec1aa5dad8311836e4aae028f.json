{"sha": "b84222899cac417ec1aa5dad8311836e4aae028f", "node_id": "C_kwDOANBUbNoAKGI4NDIyMjg5OWNhYzQxN2VjMWFhNWRhZDgzMTE4MzZlNGFhZTAyOGY", "commit": {"author": {"name": "Dave", "email": "dme2223@gmail.com", "date": "2022-11-10T05:17:50Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T11:36:45Z"}, "message": "gccrs: add Location to AST::Visibility\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-item.h: Add location member.\n\t* hir/rust-ast-lower.cc (translate_visibility): Pass location argument.\n\t* hir/tree/rust-hir-item.h: Fix constructor to accept Location argument.", "tree": {"sha": "2e52996d37cc202cabc05be54eddb71b6cb7d9a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e52996d37cc202cabc05be54eddb71b6cb7d9a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b84222899cac417ec1aa5dad8311836e4aae028f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b84222899cac417ec1aa5dad8311836e4aae028f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b84222899cac417ec1aa5dad8311836e4aae028f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b84222899cac417ec1aa5dad8311836e4aae028f/comments", "author": {"login": "dme2", "id": 22139936, "node_id": "MDQ6VXNlcjIyMTM5OTM2", "avatar_url": "https://avatars.githubusercontent.com/u/22139936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dme2", "html_url": "https://github.com/dme2", "followers_url": "https://api.github.com/users/dme2/followers", "following_url": "https://api.github.com/users/dme2/following{/other_user}", "gists_url": "https://api.github.com/users/dme2/gists{/gist_id}", "starred_url": "https://api.github.com/users/dme2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dme2/subscriptions", "organizations_url": "https://api.github.com/users/dme2/orgs", "repos_url": "https://api.github.com/users/dme2/repos", "events_url": "https://api.github.com/users/dme2/events{/privacy}", "received_events_url": "https://api.github.com/users/dme2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fc01303604110de368cc115d951efa3d3a1963d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fc01303604110de368cc115d951efa3d3a1963d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fc01303604110de368cc115d951efa3d3a1963d"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "17d11e4de38a99694794845f88a9b668f51d7d6e", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84222899cac417ec1aa5dad8311836e4aae028f/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84222899cac417ec1aa5dad8311836e4aae028f/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=b84222899cac417ec1aa5dad8311836e4aae028f", "patch": "@@ -625,13 +625,15 @@ struct Visibility\n   VisType vis_type;\n   // Only assigned if vis_type is IN_PATH\n   SimplePath in_path;\n+  Location locus;\n \n   // should this store location info?\n \n public:\n   // Creates a Visibility - TODO make constructor protected or private?\n-  Visibility (VisType vis_type, SimplePath in_path)\n-    : vis_type (vis_type), in_path (std::move (in_path))\n+  Visibility (VisType vis_type, SimplePath in_path,\n+\t      Location locus = Location ())\n+    : vis_type (vis_type), in_path (std::move (in_path)), locus (locus)\n   {}\n \n   VisType get_vis_type () const { return vis_type; }\n@@ -648,6 +650,8 @@ struct Visibility\n   // Returns whether visibility is public or not.\n   bool is_public () const { return vis_type != PRIV && !is_error (); }\n \n+  Location get_locus () const { return locus; }\n+\n   // Creates an error visibility.\n   static Visibility create_error ()\n   {\n@@ -672,21 +676,24 @@ struct Visibility\n   static Visibility create_crate (Location crate_tok_location)\n   {\n     return Visibility (PUB_CRATE,\n-\t\t       SimplePath::from_str (\"crate\", crate_tok_location));\n+\t\t       SimplePath::from_str (\"crate\", crate_tok_location),\n+\t\t       crate_tok_location);\n   }\n \n   // Creates a public visibility with self-relative paths\n   static Visibility create_self (Location self_tok_location)\n   {\n     return Visibility (PUB_SELF,\n-\t\t       SimplePath::from_str (\"self\", self_tok_location));\n+\t\t       SimplePath::from_str (\"self\", self_tok_location),\n+\t\t       self_tok_location);\n   }\n \n   // Creates a public visibility with parent module-relative paths\n   static Visibility create_super (Location super_tok_location)\n   {\n     return Visibility (PUB_SUPER,\n-\t\t       SimplePath::from_str (\"super\", super_tok_location));\n+\t\t       SimplePath::from_str (\"super\", super_tok_location),\n+\t\t       super_tok_location);\n   }\n \n   // Creates a private visibility\n@@ -698,7 +705,7 @@ struct Visibility\n   // Creates a public visibility with a given path or whatever.\n   static Visibility create_in_path (SimplePath in_path)\n   {\n-    return Visibility (PUB_IN_PATH, std::move (in_path));\n+    return Visibility (PUB_IN_PATH, std::move (in_path), in_path.get_locus ());\n   }\n \n   std::string as_string () const;"}, {"sha": "2e25be75a5a7ea0c772ead8b7a7226f2392424c8", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84222899cac417ec1aa5dad8311836e4aae028f/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84222899cac417ec1aa5dad8311836e4aae028f/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=b84222899cac417ec1aa5dad8311836e4aae028f", "patch": "@@ -50,7 +50,8 @@ translate_visibility (const AST::Visibility &vis)\n     case AST::Visibility::PUB_SUPER:\n     case AST::Visibility::PUB_IN_PATH:\n       return Visibility (Visibility::VisType::RESTRICTED,\n-\t\t\t ASTLoweringSimplePath::translate (vis.get_path ()));\n+\t\t\t ASTLoweringSimplePath::translate (vis.get_path ()),\n+\t\t\t vis.get_locus ());\n       break;\n     }\n "}, {"sha": "f7bf1f879c8dae4d494a787af839b1e82c5706be", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84222899cac417ec1aa5dad8311836e4aae028f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84222899cac417ec1aa5dad8311836e4aae028f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=b84222899cac417ec1aa5dad8311836e4aae028f", "patch": "@@ -571,13 +571,15 @@ struct Visibility\n private:\n   VisType vis_type;\n   HIR::SimplePath path;\n+  Location locus;\n \n   // should this store location info?\n \n public:\n   Visibility (VisType vis_type,\n-\t      HIR::SimplePath path = HIR::SimplePath::create_empty ())\n-    : vis_type (vis_type), path (std::move (path))\n+\t      HIR::SimplePath path = HIR::SimplePath::create_empty (),\n+\t      Location locus = Location ())\n+    : vis_type (vis_type), path (std::move (path)), locus (locus)\n   {}\n \n   // Returns whether visibility is in an error state."}]}