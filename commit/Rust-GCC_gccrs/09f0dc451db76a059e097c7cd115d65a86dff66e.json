{"sha": "09f0dc451db76a059e097c7cd115d65a86dff66e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlmMGRjNDUxZGI3NmEwNTllMDk3YzdjZDExNWQ2NWE4NmRmZjY2ZQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2009-11-24T10:56:14Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2009-11-24T10:56:14Z"}, "message": "re PR tree-optimization/42154 (Wrong code from (early) SRA)\n\n2009-11-24  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/42154\n\t* tree-sra.c (struct access): Added comments.\n\t(sra_modify_expr): Build references to the old aggregate with\n\tbuild_ref_for_offset instead of reusing access->expr.\n\t(load_assign_lhs_subreplacements): Likewise.\n\n\t* testsuite/gcc.c-torture/execute/pr42154.c: New test.\n\nFrom-SVN: r154493", "tree": {"sha": "0794dd3cad6d264dc0489fcc003758e493444d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0794dd3cad6d264dc0489fcc003758e493444d8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09f0dc451db76a059e097c7cd115d65a86dff66e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09f0dc451db76a059e097c7cd115d65a86dff66e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09f0dc451db76a059e097c7cd115d65a86dff66e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09f0dc451db76a059e097c7cd115d65a86dff66e/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c03662614375d5b608d27a46861229f372f29bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c03662614375d5b608d27a46861229f372f29bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c03662614375d5b608d27a46861229f372f29bf"}], "stats": {"total": 64, "additions": 57, "deletions": 7}, "files": [{"sha": "d05e45663e6f74473583ac3e472366141904be61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09f0dc451db76a059e097c7cd115d65a86dff66e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09f0dc451db76a059e097c7cd115d65a86dff66e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09f0dc451db76a059e097c7cd115d65a86dff66e", "patch": "@@ -1,3 +1,11 @@\n+2009-11-24  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/42154\n+\t* tree-sra.c (struct access): Added comments.\n+\t(sra_modify_expr): Build references to the old aggregate with\n+\tbuild_ref_for_offset instead of reusing access->expr.\n+\t(load_assign_lhs_subreplacements): Likewise.\n+\n 2009-11-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (add<mode>3_carry): Change insn pattern"}, {"sha": "7ad8ae98ede36e9f568fb969678900971e16d197", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09f0dc451db76a059e097c7cd115d65a86dff66e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09f0dc451db76a059e097c7cd115d65a86dff66e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=09f0dc451db76a059e097c7cd115d65a86dff66e", "patch": "@@ -1,3 +1,8 @@\n+2009-11-24  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/42154\n+\t* gcc.c-torture/execute/pr42154.c: New test.\n+\n 2009-11-24  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/42045"}, {"sha": "f78919d5dad908c8ec1a6fd7596ad7b3d0be3af9", "filename": "gcc/testsuite/gcc.c-torture/execute/pr42154.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09f0dc451db76a059e097c7cd115d65a86dff66e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr42154.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09f0dc451db76a059e097c7cd115d65a86dff66e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr42154.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr42154.c?ref=09f0dc451db76a059e097c7cd115d65a86dff66e", "patch": "@@ -0,0 +1,18 @@\n+struct A { char x[1]; };\n+extern void abort (void);\n+void __attribute__((noinline,noclone))\n+foo (struct A a)\n+{\n+  if (a.x[0] != 'a')\n+    abort ();\n+}\n+int main ()\n+{\n+  struct A a;\n+  int i;\n+  for (i = 0; i < 1; ++i)\n+    a.x[i] = 'a';\n+  foo (a);\n+  return 0;\n+}\n+"}, {"sha": "52036851587e95d9547f3714dd39bad87bc7cdd3", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09f0dc451db76a059e097c7cd115d65a86dff66e/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09f0dc451db76a059e097c7cd115d65a86dff66e/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=09f0dc451db76a059e097c7cd115d65a86dff66e", "patch": "@@ -125,7 +125,9 @@ struct access\n   HOST_WIDE_INT size;\n   tree base;\n \n-  /* Expression.  */\n+  /* Expression.  It is context dependent so do not use it to create new\n+     expressions to access the original aggregate.  See PR 42154 for a\n+     testcase.  */\n   tree expr;\n   /* Type.  */\n   tree type;\n@@ -2113,10 +2115,17 @@ sra_modify_expr (tree *expr, gimple_stmt_iterator *gsi, bool write,\n \t gcc.c-torture/compile/20011217-1.c.  */\n       if (!is_gimple_reg_type (type))\n \t{\n-\t  gimple stmt;\n+\t  tree ref = access->base;\n+\t  bool ok;\n+\n+\t  ok = build_ref_for_offset (&ref, TREE_TYPE (ref),\n+\t\t\t\t     access->offset, access->type, false);\n+\t  gcc_assert (ok);\n+\n \t  if (write)\n \t    {\n-\t      tree ref = unshare_expr (access->expr);\n+\t      gimple stmt;\n+\n \t      if (access->grp_partial_lhs)\n \t\tref = force_gimple_operand_gsi (gsi, ref, true, NULL_TREE,\n \t\t\t\t\t\t false, GSI_NEW_STMT);\n@@ -2125,10 +2134,12 @@ sra_modify_expr (tree *expr, gimple_stmt_iterator *gsi, bool write,\n \t    }\n \t  else\n \t    {\n+\t      gimple stmt;\n+\n \t      if (access->grp_partial_lhs)\n \t\trepl = force_gimple_operand_gsi (gsi, repl, true, NULL_TREE,\n \t\t\t\t\t\t true, GSI_SAME_STMT);\n-\t      stmt = gimple_build_assign (unshare_expr (access->expr), repl);\n+\t      stmt = gimple_build_assign (ref, repl);\n \t      gsi_insert_before (gsi, stmt, GSI_SAME_STMT);\n \t    }\n \t}\n@@ -2227,18 +2238,26 @@ load_assign_lhs_subreplacements (struct access *lacc, struct access *top_racc,\n \t    }\n \t  else\n \t    {\n-\t      bool repl_found;\n-\n \t      /* No suitable access on the right hand side, need to load from\n \t\t the aggregate.  See if we have to update it first... */\n \t      if (*refreshed == SRA_UDH_NONE)\n \t\t*refreshed = handle_unscalarized_data_in_subtree (top_racc,\n \t\t\t\t\t\t\t\t  lhs, old_gsi);\n \n \t      if (*refreshed == SRA_UDH_LEFT)\n-\t\trhs = unshare_expr (lacc->expr);\n+\t\t{\n+\t\t  bool repl_found;\n+\n+\t\t  rhs = lacc->base;\n+\t\t  repl_found = build_ref_for_offset (&rhs, TREE_TYPE (rhs),\n+\t\t\t\t\t\t     lacc->offset, lacc->type,\n+\t\t\t\t\t\t     false);\n+\t\t  gcc_assert (repl_found);\n+\t\t}\n \t      else\n \t\t{\n+\t\t  bool repl_found;\n+\n \t\t  rhs = top_racc->base;\n \t\t  repl_found = build_ref_for_offset (&rhs,\n \t\t\t\t\t\t     TREE_TYPE (top_racc->base),"}]}