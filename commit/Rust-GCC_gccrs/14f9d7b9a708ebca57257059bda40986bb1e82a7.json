{"sha": "14f9d7b9a708ebca57257059bda40986bb1e82a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRmOWQ3YjlhNzA4ZWJjYTU3MjU3MDU5YmRhNDA5ODZiYjFlODJhNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-12-14T00:36:11Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-14T23:38:23Z"}, "message": "analyzer: fix dedupe issue seen with CVE-2005-1689\n\nWhilst analyzing the reproducer for detecting CVE-2005-1689\n(krb5-1.4.1's src/lib/krb5/krb/recvauth.c), the analyzer reported\n11 double-free diagnostics on lines of the form:\n\n   krb5_xfree(inbuf.data);\n\nwith no deduplication occcurring.\n\nThe root cause is that the diagnostics each have a COMPONENT_REF for\nthe inbuf.data, but they are different trees, and the de-duplication\nlogic was using pointer equality.\n\nThis patch replaces the pointer equality tests with calls to a new\npending_diagnostic::same_tree_p, implemented using simple_cst_equal.\n\nWith this patch, de-duplication occurs, and only 3 diagnostics are\nreported.  The 11 diagnostics are partitioned into 3 dedupe keys,\n2 with 2 duplicates and 1 with 7 duplicates.\n\ngcc/analyzer/ChangeLog:\n\t* diagnostic-manager.cc (saved_diagnostic::operator==): Move here\n\tfrom header.  Replace pointer equality test on m_var with call to\n\tpending_diagnostic::same_tree_p.\n\t* diagnostic-manager.h (saved_diagnostic::operator==): Move to\n\tdiagnostic-manager.cc.\n\t* pending-diagnostic.cc (pending_diagnostic::same_tree_p): New.\n\t* pending-diagnostic.h (pending_diagnostic::same_tree_p): New.\n\t* sm-file.cc (file_diagnostic::subclass_equal_p): Replace pointer\n\tequality on m_arg with call to pending_diagnostic::same_tree_p.\n\t* sm-malloc.cc (malloc_diagnostic::subclass_equal_p): Likewise.\n\t(possible_null_arg::subclass_equal_p): Likewise.\n\t(null_arg::subclass_equal_p): Likewise.\n\t(free_of_non_heap::subclass_equal_p): Likewise.\n\t* sm-pattern-test.cc (pattern_match::operator==): Likewise.\n\t* sm-sensitive.cc (exposure_through_output_file::operator==):\n\tLikewise.\n\t* sm-taint.cc (tainted_array_index::operator==): Likewise.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/CVE-2005-1689-dedupe-issue.c: New test.", "tree": {"sha": "4589d5e9c89465d4328e8f44dfd9ced286de7547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4589d5e9c89465d4328e8f44dfd9ced286de7547"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14f9d7b9a708ebca57257059bda40986bb1e82a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f9d7b9a708ebca57257059bda40986bb1e82a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14f9d7b9a708ebca57257059bda40986bb1e82a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f9d7b9a708ebca57257059bda40986bb1e82a7/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "000c7a93bdf4040d7d0672fbb9b064eae3d78f5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000c7a93bdf4040d7d0672fbb9b064eae3d78f5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/000c7a93bdf4040d7d0672fbb9b064eae3d78f5d"}], "stats": {"total": 108, "additions": 87, "deletions": 21}, "files": [{"sha": "9afb288266d9187ae407f499c7e00ed7eddc36f3", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=14f9d7b9a708ebca57257059bda40986bb1e82a7", "patch": "@@ -1,3 +1,23 @@\n+2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-manager.cc (saved_diagnostic::operator==): Move here\n+\tfrom header.  Replace pointer equality test on m_var with call to\n+\tpending_diagnostic::same_tree_p.\n+\t* diagnostic-manager.h (saved_diagnostic::operator==): Move to\n+\tdiagnostic-manager.cc.\n+\t* pending-diagnostic.cc (pending_diagnostic::same_tree_p): New.\n+\t* pending-diagnostic.h (pending_diagnostic::same_tree_p): New.\n+\t* sm-file.cc (file_diagnostic::subclass_equal_p): Replace pointer\n+\tequality on m_arg with call to pending_diagnostic::same_tree_p.\n+\t* sm-malloc.cc (malloc_diagnostic::subclass_equal_p): Likewise.\n+\t(possible_null_arg::subclass_equal_p): Likewise.\n+\t(null_arg::subclass_equal_p): Likewise.\n+\t(free_of_non_heap::subclass_equal_p): Likewise.\n+\t* sm-pattern-test.cc (pattern_match::operator==): Likewise.\n+\t* sm-sensitive.cc (exposure_through_output_file::operator==):\n+\tLikewise.\n+\t* sm-taint.cc (tainted_array_index::operator==): Likewise.\n+\n 2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n \n \t* diagnostic-manager.cc (dedupe_winners::add): Add logging"}, {"sha": "ea2ff30b9a0f6308890868aa9a9f8e209439c5f2", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=14f9d7b9a708ebca57257059bda40986bb1e82a7", "patch": "@@ -91,6 +91,20 @@ saved_diagnostic::~saved_diagnostic ()\n   delete m_d;\n }\n \n+bool\n+saved_diagnostic::operator== (const saved_diagnostic &other) const\n+{\n+  return (m_sm == other.m_sm\n+\t  /* We don't compare m_enode.  */\n+\t  && m_snode == other.m_snode\n+\t  && m_stmt == other.m_stmt\n+\t  /* We don't compare m_stmt_finder.  */\n+\t  && pending_diagnostic::same_tree_p (m_var, other.m_var)\n+\t  && m_state == other.m_state\n+\t  && m_d->equal_p (*other.m_d)\n+\t  && m_trailing_eedge == other.m_trailing_eedge);\n+}\n+\n /* class diagnostic_manager.  */\n \n /* diagnostic_manager's ctor.  */"}, {"sha": "c0f13bf8895913a252581446a81dc898f733f8c2", "filename": "gcc/analyzer/diagnostic-manager.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fdiagnostic-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fdiagnostic-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.h?ref=14f9d7b9a708ebca57257059bda40986bb1e82a7", "patch": "@@ -34,18 +34,7 @@ class saved_diagnostic\n \t\t    pending_diagnostic *d);\n   ~saved_diagnostic ();\n \n-  bool operator== (const saved_diagnostic &other) const\n-  {\n-    return (m_sm == other.m_sm\n-\t    /* We don't compare m_enode.  */\n-\t    && m_snode == other.m_snode\n-\t    && m_stmt == other.m_stmt\n-\t    /* We don't compare m_stmt_finder.  */\n-\t    && m_var == other.m_var\n-\t    && m_state == other.m_state\n-\t    && m_d->equal_p (*other.m_d)\n-\t    && m_trailing_eedge == other.m_trailing_eedge);\n-  }\n+  bool operator== (const saved_diagnostic &other) const;\n \n   //private:\n   const state_machine *m_sm;"}, {"sha": "b692c98304f46aa0cba03ac81fd6e73a3927ebb9", "filename": "gcc/analyzer/pending-diagnostic.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fpending-diagnostic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fpending-diagnostic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fpending-diagnostic.cc?ref=14f9d7b9a708ebca57257059bda40986bb1e82a7", "patch": "@@ -67,4 +67,13 @@ evdesc::event_desc::formatted_print (const char *fmt, ...) const\n   return result;\n }\n \n+/* Return true if T1 and T2 are \"the same\" for the purposes of\n+   diagnostic deduplication.  */\n+\n+bool\n+pending_diagnostic::same_tree_p (tree t1, tree t2)\n+{\n+  return simple_cst_equal (t1, t2) == 1;\n+}\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "6132fcfa481c06327d0530571f647c43ff49c039", "filename": "gcc/analyzer/pending-diagnostic.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fpending-diagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fpending-diagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fpending-diagnostic.h?ref=14f9d7b9a708ebca57257059bda40986bb1e82a7", "patch": "@@ -169,6 +169,10 @@ class pending_diagnostic\n      below for a convenience subclass for implementing this.  */\n   virtual bool subclass_equal_p (const pending_diagnostic &other) const = 0;\n \n+  /* Return true if T1 and T2 are \"the same\" for the purposes of\n+     diagnostic deduplication.  */\n+  static bool same_tree_p (tree t1, tree t2);\n+\n   /* For greatest precision-of-wording, the various following \"describe_*\"\n      virtual functions give the pending diagnostic a way to describe events\n      in a diagnostic_path in terms that make sense for that diagnostic."}, {"sha": "375f5220246e0041b3955def0f730d8e56fcbc80", "filename": "gcc/analyzer/sm-file.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fsm-file.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fsm-file.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-file.cc?ref=14f9d7b9a708ebca57257059bda40986bb1e82a7", "patch": "@@ -96,7 +96,7 @@ class file_diagnostic : public pending_diagnostic\n \n   bool subclass_equal_p (const pending_diagnostic &base_other) const OVERRIDE\n   {\n-    return m_arg == ((const file_diagnostic &)base_other).m_arg;\n+    return same_tree_p (m_arg, ((const file_diagnostic &)base_other).m_arg);\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)"}, {"sha": "15fa1c764718ab4929d89345264bfbd4187f5dae", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=14f9d7b9a708ebca57257059bda40986bb1e82a7", "patch": "@@ -102,7 +102,7 @@ class malloc_diagnostic : public pending_diagnostic\n \n   bool subclass_equal_p (const pending_diagnostic &base_other) const OVERRIDE\n   {\n-    return m_arg == ((const malloc_diagnostic &)base_other).m_arg;\n+    return same_tree_p (m_arg, ((const malloc_diagnostic &)base_other).m_arg);\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n@@ -282,7 +282,7 @@ class possible_null_arg : public possible_null\n   {\n     const possible_null_arg &sub_other\n       = (const possible_null_arg &)base_other;\n-    return (m_arg == sub_other.m_arg\n+    return (same_tree_p (m_arg, sub_other.m_arg)\n \t    && m_fndecl == sub_other.m_fndecl\n \t    && m_arg_idx == sub_other.m_arg_idx);\n   }\n@@ -373,7 +373,7 @@ class null_arg : public malloc_diagnostic\n   {\n     const null_arg &sub_other\n       = (const null_arg &)base_other;\n-    return (m_arg == sub_other.m_arg\n+    return (same_tree_p (m_arg, sub_other.m_arg)\n \t    && m_fndecl == sub_other.m_fndecl\n \t    && m_arg_idx == sub_other.m_arg_idx);\n   }\n@@ -499,7 +499,7 @@ class free_of_non_heap : public malloc_diagnostic\n     FINAL OVERRIDE\n   {\n     const free_of_non_heap &other = (const free_of_non_heap &)base_other;\n-    return (m_arg == other.m_arg && m_kind == other.m_kind);\n+    return (same_tree_p (m_arg, other.m_arg) && m_kind == other.m_kind);\n   }\n \n   bool emit (rich_location *rich_loc) FINAL OVERRIDE"}, {"sha": "571e13eb47cde53491028eb1f4facaeaf9908ab3", "filename": "gcc/analyzer/sm-pattern-test.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fsm-pattern-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fsm-pattern-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-pattern-test.cc?ref=14f9d7b9a708ebca57257059bda40986bb1e82a7", "patch": "@@ -78,9 +78,9 @@ class pattern_match : public pending_diagnostic_subclass<pattern_match>\n \n   bool operator== (const pattern_match &other) const\n   {\n-    return (m_lhs == other.m_lhs\n+    return (same_tree_p (m_lhs, other.m_lhs)\n \t    && m_op == other.m_op\n-\t    && m_rhs == other.m_rhs);\n+\t    && same_tree_p (m_rhs, other.m_rhs));\n   }\n \n   bool emit (rich_location *rich_loc) FINAL OVERRIDE"}, {"sha": "16b53e2c9e4ba93f67669fdfaae22470ecb4a66c", "filename": "gcc/analyzer/sm-sensitive.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fsm-sensitive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fsm-sensitive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-sensitive.cc?ref=14f9d7b9a708ebca57257059bda40986bb1e82a7", "patch": "@@ -95,7 +95,7 @@ class exposure_through_output_file\n \n   bool operator== (const exposure_through_output_file &other) const\n   {\n-    return m_arg == other.m_arg;\n+    return same_tree_p (m_arg, other.m_arg);\n   }\n \n   bool emit (rich_location *rich_loc) FINAL OVERRIDE"}, {"sha": "e454407e7af3a8dca387d24a7fe18b83b0919b1c", "filename": "gcc/analyzer/sm-taint.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fsm-taint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Fanalyzer%2Fsm-taint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-taint.cc?ref=14f9d7b9a708ebca57257059bda40986bb1e82a7", "patch": "@@ -100,7 +100,7 @@ class tainted_array_index\n \n   bool operator== (const tainted_array_index &other) const\n   {\n-    return m_arg == other.m_arg;\n+    return same_tree_p (m_arg, other.m_arg);\n   }\n \n   bool emit (rich_location *rich_loc) FINAL OVERRIDE"}, {"sha": "1cdaa810d77a6c4cbccffd283839d9ceb57fe01d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14f9d7b9a708ebca57257059bda40986bb1e82a7", "patch": "@@ -1,3 +1,7 @@\n+2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/CVE-2005-1689-dedupe-issue.c: New test.\n+\n 2020-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR lto/91576"}, {"sha": "941d3b834a1fe9839c54e351326a35a32bdeabdf", "filename": "gcc/testsuite/gcc.dg/analyzer/CVE-2005-1689-dedupe-issue.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2FCVE-2005-1689-dedupe-issue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f9d7b9a708ebca57257059bda40986bb1e82a7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2FCVE-2005-1689-dedupe-issue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2FCVE-2005-1689-dedupe-issue.c?ref=14f9d7b9a708ebca57257059bda40986bb1e82a7", "patch": "@@ -0,0 +1,26 @@\n+#include <stdlib.h>\n+\n+typedef struct _krb5_data {\n+  char *data;\n+} krb5_data;\n+\n+/* Ensure that we de-duplicate the various paths to reach here,\n+   and only emit one diagnostic.  */\n+\n+void\n+recvauth_common(krb5_data inbuf)\n+{\n+  free(inbuf.data);\n+  free(inbuf.data); /* { dg-warning \"double-'free'\" } */\n+  /* { dg-message \"2 duplicates\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+void krb5_recvauth(krb5_data inbuf)\n+{\n+  recvauth_common(inbuf);\n+}\n+\n+void krb5_recvauth_version(krb5_data inbuf)\n+{\n+  recvauth_common(inbuf);\n+}"}]}