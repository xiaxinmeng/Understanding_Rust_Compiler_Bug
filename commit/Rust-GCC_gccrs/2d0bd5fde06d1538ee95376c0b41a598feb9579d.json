{"sha": "2d0bd5fde06d1538ee95376c0b41a598feb9579d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQwYmQ1ZmRlMDZkMTUzOGVlOTUzNzZjMGI0MWE1OThmZWI5NTc5ZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-24T12:13:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-24T12:13:52Z"}, "message": "(expand_inline_function): Avoid creating paradoxical subreg wider than\nBITS_PER_WORD as inlined function result.\n\nFrom-SVN: r12832", "tree": {"sha": "208f1d29cde0e4a846cdbb95d25bc2b9f0695cbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/208f1d29cde0e4a846cdbb95d25bc2b9f0695cbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d0bd5fde06d1538ee95376c0b41a598feb9579d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d0bd5fde06d1538ee95376c0b41a598feb9579d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d0bd5fde06d1538ee95376c0b41a598feb9579d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d0bd5fde06d1538ee95376c0b41a598feb9579d/comments", "author": null, "committer": null, "parents": [{"sha": "f2662b08c72e8b3bdd130409bd553cd4eb85a94b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2662b08c72e8b3bdd130409bd553cd4eb85a94b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2662b08c72e8b3bdd130409bd553cd4eb85a94b"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "1c5a4a7dd636afedcc710809c2e93e8df5bfeb57", "filename": "gcc/integrate.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0bd5fde06d1538ee95376c0b41a598feb9579d/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0bd5fde06d1538ee95376c0b41a598feb9579d/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=2d0bd5fde06d1538ee95376c0b41a598feb9579d", "patch": "@@ -1673,7 +1673,21 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n \t avoid machine mode mismatch when we substitute INLINE_TARGET.\n \t But TARGET is what we will return to the caller.  */\n       if (arriving_mode != departing_mode)\n-\treg_to_map = gen_rtx (SUBREG, arriving_mode, target, 0);\n+\t{\n+\t  /* Avoid creating a paradoxical subreg wider than\n+\t     BITS_PER_WORD, since that is illegal.  */\n+\t  if (GET_MODE_BITSIZE (arriving_mode) > BITS_PER_WORD)\n+\t    {\n+\t      if (!TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (departing_mode),\n+\t\t\t\t\t  GET_MODE_BITSIZE (arriving_mode)))\n+\t\t/* Maybe could be handled by using convert_move () ?  */\n+\t\tabort ();\n+\t      reg_to_map = gen_reg_rtx (arriving_mode);\n+\t      target = gen_lowpart (departing_mode, reg_to_map);\n+\t    }\n+\t  else\n+\t    reg_to_map = gen_rtx (SUBREG, arriving_mode, target, 0);\n+\t}\n       else\n \treg_to_map = target;\n "}]}