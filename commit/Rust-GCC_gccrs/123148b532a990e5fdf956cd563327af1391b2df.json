{"sha": "123148b532a990e5fdf956cd563327af1391b2df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIzMTQ4YjUzMmE5OTBlNWZkZjk1NmNkNTYzMzI3YWYxMzkxYjJkZg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-07-12T14:57:28Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-07-12T14:57:28Z"}, "message": "tm.texi.in (FUNCTION_ARG_PADDING): Mention TARGET_FUNCTION_ARG_ROUND_BOUNDARY.\n\n\t* doc/tm.texi.in (FUNCTION_ARG_PADDING): Mention\n\tTARGET_FUNCTION_ARG_ROUND_BOUNDARY.\n\t(TARGET_FUNCTION_ARG_ROUND_BOUNDARY): Add hook.\n\t* function.c (locate_and_pad_parm): Take it into account.\n\t* target.def (function_arg_round_boundary): New hook.\n\t* targhooks.c (default_function_arg_round_boundary): New function.\n\t* targhooks.h (default_function_arg_round_boundary): Declare.\n\t* doc/tm.texi: Regenerate.\n\nFrom-SVN: r176207", "tree": {"sha": "1836524298f4090e69415cd574678b08885fc75a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1836524298f4090e69415cd574678b08885fc75a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/123148b532a990e5fdf956cd563327af1391b2df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/123148b532a990e5fdf956cd563327af1391b2df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/123148b532a990e5fdf956cd563327af1391b2df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/123148b532a990e5fdf956cd563327af1391b2df/comments", "author": null, "committer": null, "parents": [{"sha": "b7a83ad8eb8282676f1431f288718d08253a2739", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7a83ad8eb8282676f1431f288718d08253a2739", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7a83ad8eb8282676f1431f288718d08253a2739"}], "stats": {"total": 62, "additions": 51, "deletions": 11}, "files": [{"sha": "903c11733d9e5264beb586702ed6b6176d256d99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/123148b532a990e5fdf956cd563327af1391b2df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/123148b532a990e5fdf956cd563327af1391b2df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=123148b532a990e5fdf956cd563327af1391b2df", "patch": "@@ -1,3 +1,14 @@\n+2011-07-12  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* doc/tm.texi.in (FUNCTION_ARG_PADDING): Mention\n+\tTARGET_FUNCTION_ARG_ROUND_BOUNDARY.\n+\t(TARGET_FUNCTION_ARG_ROUND_BOUNDARY): Add hook.\n+\t* function.c (locate_and_pad_parm): Take it into account.\n+\t* target.def (function_arg_round_boundary): New hook.\n+\t* targhooks.c (default_function_arg_round_boundary): New function.\n+\t* targhooks.h (default_function_arg_round_boundary): Declare.\n+\t* doc/tm.texi: Regenerate.\n+\n 2011-07-12  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-copyrename.c (rename_ssa_copies): Zero statistics."}, {"sha": "faf8b6c66f8017c0d349509a3f28a185d7d638d6", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/123148b532a990e5fdf956cd563327af1391b2df/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/123148b532a990e5fdf956cd563327af1391b2df/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=123148b532a990e5fdf956cd563327af1391b2df", "patch": "@@ -4180,9 +4180,9 @@ to pad out an argument with extra space.  The value should be of type\n @code{enum direction}: either @code{upward} to pad above the argument,\n @code{downward} to pad below, or @code{none} to inhibit padding.\n \n-The @emph{amount} of padding is always just enough to reach the next\n-multiple of @code{TARGET_FUNCTION_ARG_BOUNDARY}; this macro does not\n-control it.\n+The @emph{amount} of padding is not controlled by this macro, but by the\n+target hook @code{TARGET_FUNCTION_ARG_ROUND_BOUNDARY}.  It is\n+always just enough to reach the next multiple of that boundary. \n \n This macro has a default definition which is right for most systems.\n For little-endian machines, the default is to pad upward.  For\n@@ -4215,6 +4215,13 @@ with the specified mode and type.  The default hook returns\n @code{PARM_BOUNDARY} for all arguments.\n @end deftypefn\n \n+@deftypefn {Target Hook} {unsigned int} TARGET_FUNCTION_ARG_ROUND_BOUNDARY (enum machine_mode @var{mode}, const_tree @var{type})\n+Normally, the size of an argument is rounded up to @code{PARM_BOUNDARY},\n+which is the default value for this hook.  You can define this hook to\n+return a different value if an argument size must be rounded to a larger\n+value.\n+@end deftypefn\n+\n @defmac FUNCTION_ARG_REGNO_P (@var{regno})\n A C expression that is nonzero if @var{regno} is the number of a hard\n register in which function arguments are sometimes passed.  This does"}, {"sha": "d823faeed538a70e1f95214d65bdf176e3e764c9", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/123148b532a990e5fdf956cd563327af1391b2df/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/123148b532a990e5fdf956cd563327af1391b2df/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=123148b532a990e5fdf956cd563327af1391b2df", "patch": "@@ -4166,9 +4166,9 @@ to pad out an argument with extra space.  The value should be of type\n @code{enum direction}: either @code{upward} to pad above the argument,\n @code{downward} to pad below, or @code{none} to inhibit padding.\n \n-The @emph{amount} of padding is always just enough to reach the next\n-multiple of @code{TARGET_FUNCTION_ARG_BOUNDARY}; this macro does not\n-control it.\n+The @emph{amount} of padding is not controlled by this macro, but by the\n+target hook @code{TARGET_FUNCTION_ARG_ROUND_BOUNDARY}.  It is\n+always just enough to reach the next multiple of that boundary. \n \n This macro has a default definition which is right for most systems.\n For little-endian machines, the default is to pad upward.  For\n@@ -4201,6 +4201,8 @@ with the specified mode and type.  The default hook returns\n @code{PARM_BOUNDARY} for all arguments.\n @end deftypefn\n \n+@hook TARGET_FUNCTION_ARG_ROUND_BOUNDARY\n+\n @defmac FUNCTION_ARG_REGNO_P (@var{regno})\n A C expression that is nonzero if @var{regno} is the number of a hard\n register in which function arguments are sometimes passed.  This does"}, {"sha": "894930f75bb34fa76b55b74728d50ad4a371394e", "filename": "gcc/function.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/123148b532a990e5fdf956cd563327af1391b2df/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/123148b532a990e5fdf956cd563327af1391b2df/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=123148b532a990e5fdf956cd563327af1391b2df", "patch": "@@ -3705,7 +3705,7 @@ locate_and_pad_parm (enum machine_mode passed_mode, tree type, int in_regs,\n {\n   tree sizetree;\n   enum direction where_pad;\n-  unsigned int boundary;\n+  unsigned int boundary, round_boundary;\n   int reg_parm_stack_space = 0;\n   int part_size_in_regs;\n \n@@ -3737,6 +3737,8 @@ locate_and_pad_parm (enum machine_mode passed_mode, tree type, int in_regs,\n     = type ? size_in_bytes (type) : size_int (GET_MODE_SIZE (passed_mode));\n   where_pad = FUNCTION_ARG_PADDING (passed_mode, type);\n   boundary = targetm.calls.function_arg_boundary (passed_mode, type);\n+  round_boundary = targetm.calls.function_arg_round_boundary (passed_mode,\n+\t\t\t\t\t\t\t      type);\n   locate->where_pad = where_pad;\n \n   /* Alignment can't exceed MAX_SUPPORTED_STACK_ALIGNMENT.  */\n@@ -3783,8 +3785,8 @@ locate_and_pad_parm (enum machine_mode passed_mode, tree type, int in_regs,\n     tree s2 = sizetree;\n     if (where_pad != none\n \t&& (!host_integerp (sizetree, 1)\n-\t    || (tree_low_cst (sizetree, 1) * BITS_PER_UNIT) % PARM_BOUNDARY))\n-      s2 = round_up (s2, PARM_BOUNDARY / BITS_PER_UNIT);\n+\t    || (tree_low_cst (sizetree, 1) * BITS_PER_UNIT) % round_boundary))\n+      s2 = round_up (s2, round_boundary / BITS_PER_UNIT);\n     SUB_PARM_SIZE (locate->slot_offset, s2);\n   }\n \n@@ -3836,8 +3838,8 @@ locate_and_pad_parm (enum machine_mode passed_mode, tree type, int in_regs,\n \n   if (where_pad != none\n       && (!host_integerp (sizetree, 1)\n-\t  || (tree_low_cst (sizetree, 1) * BITS_PER_UNIT) % PARM_BOUNDARY))\n-    sizetree = round_up (sizetree, PARM_BOUNDARY / BITS_PER_UNIT);\n+\t  || (tree_low_cst (sizetree, 1) * BITS_PER_UNIT) % round_boundary))\n+    sizetree = round_up (sizetree, round_boundary / BITS_PER_UNIT);\n \n   ADD_PARM_SIZE (locate->size, sizetree);\n "}, {"sha": "9f03ac922ac5678157cb5eeb0dee9bd7df5b1a39", "filename": "gcc/target.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/123148b532a990e5fdf956cd563327af1391b2df/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/123148b532a990e5fdf956cd563327af1391b2df/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=123148b532a990e5fdf956cd563327af1391b2df", "patch": "@@ -2021,6 +2021,15 @@ DEFHOOK\n  unsigned int, (enum machine_mode mode, const_tree type),\n  default_function_arg_boundary)\n \n+DEFHOOK\n+(function_arg_round_boundary,\n+ \"Normally, the size of an argument is rounded up to @code{PARM_BOUNDARY},\\n\\\n+which is the default value for this hook.  You can define this hook to\\n\\\n+return a different value if an argument size must be rounded to a larger\\n\\\n+value.\",\n+ unsigned int, (enum machine_mode mode, const_tree type),\n+ default_function_arg_round_boundary)\n+\n /* Return the diagnostic message string if function without a prototype\n    is not allowed for this 'val' argument; NULL otherwise. */\n DEFHOOK"}, {"sha": "f69b39626a66650b25ff0ab7cf50c6cbc7395ac1", "filename": "gcc/targhooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/123148b532a990e5fdf956cd563327af1391b2df/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/123148b532a990e5fdf956cd563327af1391b2df/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=123148b532a990e5fdf956cd563327af1391b2df", "patch": "@@ -614,6 +614,13 @@ default_function_arg_boundary (enum machine_mode mode ATTRIBUTE_UNUSED,\n   return PARM_BOUNDARY;\n }\n \n+unsigned int\n+default_function_arg_round_boundary (enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t\t     const_tree type ATTRIBUTE_UNUSED)\n+{\n+  return PARM_BOUNDARY;\n+}\n+\n void\n hook_void_bitmap (bitmap regs ATTRIBUTE_UNUSED)\n {"}, {"sha": "62e888445bb6a68983b5e9fad6ec5f81bb4aa909", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/123148b532a990e5fdf956cd563327af1391b2df/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/123148b532a990e5fdf956cd563327af1391b2df/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=123148b532a990e5fdf956cd563327af1391b2df", "patch": "@@ -115,6 +115,8 @@ extern rtx default_function_incoming_arg\n   (cumulative_args_t, enum machine_mode, const_tree, bool);\n extern unsigned int default_function_arg_boundary (enum machine_mode,\n \t\t\t\t\t\t   const_tree);\n+extern unsigned int default_function_arg_round_boundary (enum machine_mode,\n+\t\t\t\t\t\t\t const_tree);\n extern bool hook_bool_const_rtx_commutative_p (const_rtx, int);\n extern rtx default_function_value (const_tree, const_tree, bool);\n extern rtx default_libcall_value (enum machine_mode, const_rtx);"}]}