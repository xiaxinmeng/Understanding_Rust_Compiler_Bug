{"sha": "6e0c46b86aaa38f18e2c0af2a4711bfeaa242498", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUwYzQ2Yjg2YWFhMzhmMThlMmMwYWYyYTQ3MTFiZmVhYTI0MjQ5OA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-14T16:56:29Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-14T17:57:27Z"}, "message": "Trait item consts can have an optional expr\n\nWhen we are checking for trait constants their expression can be optional\nwhich will cause an ICE when ignored.\n\nFixes #471", "tree": {"sha": "5d7acdd2a74a68fe91fe42dd161460a9dd174e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d7acdd2a74a68fe91fe42dd161460a9dd174e95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e0c46b86aaa38f18e2c0af2a4711bfeaa242498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0c46b86aaa38f18e2c0af2a4711bfeaa242498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e0c46b86aaa38f18e2c0af2a4711bfeaa242498", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0c46b86aaa38f18e2c0af2a4711bfeaa242498/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60b1209d64cee3b47cf9b3f5b9da4f74f03a25bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60b1209d64cee3b47cf9b3f5b9da4f74f03a25bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60b1209d64cee3b47cf9b3f5b9da4f74f03a25bb"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "30cab0ed90049b02c7473f69f559f20e120fecb5", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0c46b86aaa38f18e2c0af2a4711bfeaa242498/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0c46b86aaa38f18e2c0af2a4711bfeaa242498/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=6e0c46b86aaa38f18e2c0af2a4711bfeaa242498", "patch": "@@ -3265,10 +3265,12 @@ class TraitItemConst : public TraitItem\n   std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n \n+  bool has_expr () const { return expr != nullptr; }\n+\n   // TODO: is this better? Or is a \"vis_block\" better?\n   std::unique_ptr<Expr> &get_expr ()\n   {\n-    rust_assert (expr != nullptr);\n+    rust_assert (has_expr ());\n     return expr;\n   }\n "}, {"sha": "0714f5d57063aa2d482ca1be33a2c451513ec3d2", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0c46b86aaa38f18e2c0af2a4711bfeaa242498/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0c46b86aaa38f18e2c0af2a4711bfeaa242498/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=6e0c46b86aaa38f18e2c0af2a4711bfeaa242498", "patch": "@@ -168,7 +168,9 @@ class ResolveTraitItems : public ResolverBase\n   void visit (AST::TraitItemConst &constant) override\n   {\n     ResolveType::go (constant.get_type ().get (), constant.get_node_id ());\n-    ResolveExpr::go (constant.get_expr ().get (), constant.get_node_id ());\n+\n+    if (constant.has_expr ())\n+      ResolveExpr::go (constant.get_expr ().get (), constant.get_node_id ());\n \n     // the mutability checker needs to verify for immutable decls the number\n     // of assignments are <1. This marks an implicit assignment"}, {"sha": "acfc02210c338e26f46549ef5a979002c7ca88c2", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0c46b86aaa38f18e2c0af2a4711bfeaa242498/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0c46b86aaa38f18e2c0af2a4711bfeaa242498/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=6e0c46b86aaa38f18e2c0af2a4711bfeaa242498", "patch": "@@ -409,10 +409,14 @@ TraitItemReference::get_type_from_constant (\n   /*const*/ HIR::TraitItemConst &constant) const\n {\n   TyTy::BaseType *type = TypeCheckType::Resolve (constant.get_type ().get ());\n-  TyTy::BaseType *expr\n-    = TypeCheckExpr::Resolve (constant.get_expr ().get (), false);\n+  if (constant.has_expr ())\n+    {\n+      TyTy::BaseType *expr\n+\t= TypeCheckExpr::Resolve (constant.get_expr ().get (), false);\n \n-  return type->unify (expr);\n+      return type->unify (expr);\n+    }\n+  return type;\n }\n \n TyTy::BaseType *"}, {"sha": "a6fe5a34b6f5ffa4259a46b5ba6f35ae2e9ce056", "filename": "gcc/testsuite/rust/compile/torture/traits7.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0c46b86aaa38f18e2c0af2a4711bfeaa242498/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0c46b86aaa38f18e2c0af2a4711bfeaa242498/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits7.rs?ref=6e0c46b86aaa38f18e2c0af2a4711bfeaa242498", "patch": "@@ -0,0 +1,22 @@\n+trait Foo {\n+    const A: i32;\n+    // { dg-warning \"unused name .Foo::A.\" \"\" { target *-*-* } .-1 }\n+\n+    fn test(self);\n+    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n+    // { dg-warning \"unused name .Foo::test.\" \"\" { target *-*-* } .-2 }\n+}\n+\n+struct Bar;\n+impl Foo for Bar {\n+    const A: i32 = 123;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    fn test(self) {}\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}\n+\n+fn main() {\n+    let a = Bar;\n+    a.test();\n+}"}]}