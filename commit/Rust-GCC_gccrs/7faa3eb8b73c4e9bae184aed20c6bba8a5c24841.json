{"sha": "7faa3eb8b73c4e9bae184aed20c6bba8a5c24841", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZhYTNlYjhiNzNjNGU5YmFlMTg0YWVkMjBjNmJiYThhNWMyNDg0MQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2006-01-26T02:56:00Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2006-01-26T02:56:00Z"}, "message": "re PR target/25947 (Unrecognizable insn ICE for readline-5.1 in rl_vi_complete)\n\n\tPR target/25947\n\t* config/cris/cris.c (cris_order_for_addsi3): New function.\n\t* config/cris/cris-protos.h: Prototype it.\n\t* config/cris/cris.md (split for \"move.S1 [rx=rx+i],ry\")\n\t(split for \"move.S1 ry,[rx=rx+i]\", split for \"clear.[bwd] [rx=rx+i]\")\n\t(split for \"mov(s|u).S1 [rx=rx+i],ry\", split for \"op.S1 [rx=rx+i],ry\")\n\t(split for \"op.S1 [rx=rx+i],ry (swapped)\")\n\t(split for \"op(s|u).S1 [rx=rx+i],ry\")\n\t(split for \"op(s|u).S1 [rx=rx+i],ry (swapped, plus or bound)\"):\n\tApply cris_order_for_addsi3 when generating addsi3 insns.\n\nFrom-SVN: r110245", "tree": {"sha": "4e95b3ce27d3e140c98d36d5755a157eb6141710", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e95b3ce27d3e140c98d36d5755a157eb6141710"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7faa3eb8b73c4e9bae184aed20c6bba8a5c24841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7faa3eb8b73c4e9bae184aed20c6bba8a5c24841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7faa3eb8b73c4e9bae184aed20c6bba8a5c24841", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7faa3eb8b73c4e9bae184aed20c6bba8a5c24841/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ec31ce6355795a61cf6a0a4b5a6402da38cc839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec31ce6355795a61cf6a0a4b5a6402da38cc839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ec31ce6355795a61cf6a0a4b5a6402da38cc839"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "2f7e70663fd8710857160250a351db7df15a29be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7faa3eb8b73c4e9bae184aed20c6bba8a5c24841/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7faa3eb8b73c4e9bae184aed20c6bba8a5c24841/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7faa3eb8b73c4e9bae184aed20c6bba8a5c24841", "patch": "@@ -1,3 +1,16 @@\n+2006-01-26  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR target/25947\n+\t* config/cris/cris.c (cris_order_for_addsi3): New function.\n+\t* config/cris/cris-protos.h: Prototype it.\n+\t* config/cris/cris.md (split for \"move.S1 [rx=rx+i],ry\")\n+\t(split for \"move.S1 ry,[rx=rx+i]\", split for \"clear.[bwd] [rx=rx+i]\")\n+\t(split for \"mov(s|u).S1 [rx=rx+i],ry\", split for \"op.S1 [rx=rx+i],ry\")\n+\t(split for \"op.S1 [rx=rx+i],ry (swapped)\")\n+\t(split for \"op(s|u).S1 [rx=rx+i],ry\")\n+\t(split for \"op(s|u).S1 [rx=rx+i],ry (swapped, plus or bound)\"):\n+\tApply cris_order_for_addsi3 when generating addsi3 insns.\n+\n 2006-01-25  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree.h (TREE_RANGE_CHECK): Fix range predicate."}, {"sha": "4fe7de004e404e93738d98e73ff32b42eb6c60a1", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7faa3eb8b73c4e9bae184aed20c6bba8a5c24841/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7faa3eb8b73c4e9bae184aed20c6bba8a5c24841/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=7faa3eb8b73c4e9bae184aed20c6bba8a5c24841", "patch": "@@ -49,6 +49,7 @@ extern int cris_cfun_uses_pic_table (void);\n extern rtx cris_gen_movem_load (rtx, rtx, int);\n extern rtx cris_emit_movem_store (rtx, rtx, int, bool);\n extern void cris_expand_pic_call_address (rtx *);\n+extern void cris_order_for_addsi3 (rtx *, int);\n #endif /* RTX_CODE */\n extern void cris_asm_output_label_ref (FILE *, char *);\n extern void cris_target_asm_named_section (const char *, unsigned int, tree);"}, {"sha": "babeaa3ac6b3d69b966a27d3b17b46cdb7c4113e", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7faa3eb8b73c4e9bae184aed20c6bba8a5c24841/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7faa3eb8b73c4e9bae184aed20c6bba8a5c24841/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=7faa3eb8b73c4e9bae184aed20c6bba8a5c24841", "patch": "@@ -3257,6 +3257,22 @@ cris_expand_pic_call_address (rtx *opp)\n     }\n }\n \n+/* Make sure operands are in the right order for an addsi3 insn as\n+   generated by a define_split.  A MEM as the first operand isn't\n+   recognized by addsi3 after reload.  OPERANDS contains the operands,\n+   with the first at OPERANDS[N] and the second at OPERANDS[N+1].  */\n+\n+void\n+cris_order_for_addsi3 (rtx *operands, int n)\n+{\n+  if (MEM_P (operands[n]))\n+    {\n+      rtx tem = operands[n];\n+      operands[n] = operands[n + 1];\n+      operands[n + 1] = tem;\n+    }\n+}\n+\n /* Use from within code, from e.g. PRINT_OPERAND and\n    PRINT_OPERAND_ADDRESS.  Macros used in output_addr_const need to emit\n    different things depending on whether code operand or constant is"}, {"sha": "1618887cd7a1cd88ddb88a9ca4527b007a8821d8", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7faa3eb8b73c4e9bae184aed20c6bba8a5c24841/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7faa3eb8b73c4e9bae184aed20c6bba8a5c24841/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=7faa3eb8b73c4e9bae184aed20c6bba8a5c24841", "patch": "@@ -3285,7 +3285,10 @@\n     || rtx_equal_p (operands[3], operands[2]))\"\n   [(set (match_dup 3) (plus:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0) (match_dup 4))]\n-  \"operands[4] = replace_equiv_address (operands[5], operands[3]);\")\n+{\n+  operands[4] = replace_equiv_address (operands[5], operands[3]);\n+  cris_order_for_addsi3 (operands, 1);\n+})\n \n ;; move.S1 ry,[rx=rx+rz.S2]\n \n@@ -3325,7 +3328,10 @@\n     || rtx_equal_p (operands[3], operands[1]))\"\n   [(set (match_dup 3) (plus:SI (match_dup 0) (match_dup 1)))\n    (set (match_dup 5) (match_dup 2))]\n-  \"operands[5] = replace_equiv_address (operands[6], operands[3]);\")\n+{\n+  operands[5] = replace_equiv_address (operands[6], operands[3]);\n+  cris_order_for_addsi3 (operands, 0);\n+})\n \n ;; clear.[bwd] [rx=rx+rz.S2]\n \n@@ -3362,7 +3368,7 @@\n     || rtx_equal_p (operands[2], operands[1]))\"\n   [(set (match_dup 2) (plus:SI (match_dup 0) (match_dup 1)))\n    (set (mem:BWD (match_dup 2)) (const_int 0))]\n-  \"\")\n+  \"cris_order_for_addsi3 (operands, 0);\")\n \n ;; mov(s|u).S1 [rx=rx+rz.S2],ry\n \n@@ -3404,7 +3410,10 @@\n     || rtx_equal_p (operands[2], operands[3]))\"\n   [(set (match_dup 3) (plus:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0) (match_op_dup 4 [(match_dup 5)]))]\n-  \"operands[5] = replace_equiv_address (XEXP (operands[4], 0), operands[3]);\")\n+{\n+  operands[5] = replace_equiv_address (XEXP (operands[4], 0), operands[3]);\n+  cris_order_for_addsi3 (operands, 1);\n+})\n \n ;; op.S1 [rx=rx+i],ry\n \n@@ -3424,7 +3433,10 @@\n     || rtx_equal_p (operands[4], operands[3]))\"\n   [(set (match_dup 4) (plus:SI (match_dup 2) (match_dup 3)))\n    (set (match_dup 0) (match_op_dup 5 [(match_dup 1) (match_dup 6)]))]\n-  \"operands[6] = replace_equiv_address (XEXP (operands[5], 1), operands[4]);\")\n+{\n+  operands[6] = replace_equiv_address (XEXP (operands[5], 1), operands[4]);\n+  cris_order_for_addsi3 (operands, 2);\n+})\n \n ;; op.S1 [rx=rx+rz.S2],ry\n \n@@ -3492,7 +3504,10 @@\n     || rtx_equal_p (operands[4], operands[3]))\"\n   [(set (match_dup 4) (plus:SI (match_dup 2) (match_dup 3)))\n    (set (match_dup 0) (match_op_dup 5 [(match_dup 6) (match_dup 1)]))]\n-  \"operands[6] = replace_equiv_address (XEXP (operands[5], 0), operands[4]);\")\n+{\n+  operands[6] = replace_equiv_address (XEXP (operands[5], 0), operands[4]);\n+  cris_order_for_addsi3 (operands, 2);\n+})\n \n ;; op(s|u).S1 [rx=rx+rz.S2],ry\n \n@@ -3543,9 +3558,12 @@\n     || rtx_equal_p (operands[4], operands[3]))\"\n   [(set (match_dup 4) (plus:SI (match_dup 2) (match_dup 3)))\n    (set (match_dup 0) (match_op_dup 5 [(match_dup 1) (match_dup 7)]))]\n-  \"operands[7] = gen_rtx_fmt_e (GET_CODE (operands[6]), GET_MODE (operands[6]),\n-\t\t\t\treplace_equiv_address (XEXP (operands[6], 0),\n-\t\t\t\t\t\t       operands[4]));\")\n+{\n+  operands[7] = gen_rtx_fmt_e (GET_CODE (operands[6]), GET_MODE (operands[6]),\n+\t\t\t       replace_equiv_address (XEXP (operands[6], 0),\n+\t\t\t\t\t\t      operands[4]));\n+  cris_order_for_addsi3 (operands, 2);\n+})\n \n ;; op(s|u).S1 [rx=rx+rz.S2],ry (swapped, plus or bound)\n \n@@ -3594,9 +3612,12 @@\n     || rtx_equal_p (operands[4], operands[3]))\"\n   [(set (match_dup 4) (plus:SI (match_dup 2) (match_dup 3)))\n    (set (match_dup 0) (match_op_dup 6 [(match_dup 7) (match_dup 1)]))]\n-  \"operands[7] = gen_rtx_fmt_e (GET_CODE (operands[5]), GET_MODE (operands[5]),\n-\t\t\t\treplace_equiv_address (XEXP (operands[5], 0),\n-\t\t\t\t\t\t       operands[4]));\")\n+{\n+  operands[7] = gen_rtx_fmt_e (GET_CODE (operands[5]), GET_MODE (operands[5]),\n+\t\t\t       replace_equiv_address (XEXP (operands[5], 0),\n+\t\t\t\t\t\t      operands[4]));\n+  cris_order_for_addsi3 (operands, 2);\n+})\n \f\n ;; Splits for addressing prefixes that have no side-effects, so we can\n ;; fill a delay slot.  Never split if we lose something, though."}]}