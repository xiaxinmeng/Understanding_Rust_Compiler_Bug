{"sha": "a64938091bf13c53cf4dc69eb3c82f8f2f476300", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY0OTM4MDkxYmYxM2M1M2NmNGRjNjllYjNjODJmOGYyZjQ3NjMwMA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-12T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-12T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "457d002781f29f5b5bcfdfc9e4f34f5240cb6187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/457d002781f29f5b5bcfdfc9e4f34f5240cb6187"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a64938091bf13c53cf4dc69eb3c82f8f2f476300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64938091bf13c53cf4dc69eb3c82f8f2f476300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a64938091bf13c53cf4dc69eb3c82f8f2f476300", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64938091bf13c53cf4dc69eb3c82f8f2f476300/comments", "author": null, "committer": null, "parents": [{"sha": "8b7af071b0cd4a6f8d989453ac81a4c3768d6343", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b7af071b0cd4a6f8d989453ac81a4c3768d6343", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b7af071b0cd4a6f8d989453ac81a4c3768d6343"}], "stats": {"total": 185, "additions": 184, "deletions": 1}, "files": [{"sha": "545a44bb586ff309799f3aee23a1c5aeedd84095", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64938091bf13c53cf4dc69eb3c82f8f2f476300/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64938091bf13c53cf4dc69eb3c82f8f2f476300/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a64938091bf13c53cf4dc69eb3c82f8f2f476300", "patch": "@@ -1,3 +1,28 @@\n+2020-08-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/96539\n+\t* expr.c (emit_block_move_hints): Don't copy anything if x and y\n+\tare the same and neither is MEM_VOLATILE_P.\n+\n+2020-08-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/96549\n+\t* tree.c (get_narrower): Use TREE_TYPE (ret) instead of\n+\tTREE_TYPE (win) for COMPOUND_EXPRs.\n+\n+2020-08-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* predict.c (not_loop_guard_equal_edge_p): New function.\n+\t(maybe_predict_edge): New function.\n+\t(predict_paths_for_bb): Use it.\n+\t(predict_paths_leading_to_edge): Use it.\n+\n+2020-08-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* dbgcnt.def (DEBUG_COUNTER): Add ipa_cp_bits.\n+\t* ipa-cp.c (ipcp_store_bits_results): Use it when we store known\n+\tbits for parameters.\n+\n 2020-08-10  Marek Polacek  <polacek@redhat.com>\n \n \t* doc/sourcebuild.texi: Document dg-ice."}, {"sha": "b81f381520c04cb24d451d8cbc86e3c96d207e54", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64938091bf13c53cf4dc69eb3c82f8f2f476300/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64938091bf13c53cf4dc69eb3c82f8f2f476300/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=a64938091bf13c53cf4dc69eb3c82f8f2f476300", "patch": "@@ -1 +1 @@\n-20200811\n+20200812"}, {"sha": "1eaa99f31e6b81bbe5161cdcf6dbb16b150d3fbf", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64938091bf13c53cf4dc69eb3c82f8f2f476300/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64938091bf13c53cf4dc69eb3c82f8f2f476300/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a64938091bf13c53cf4dc69eb3c82f8f2f476300", "patch": "@@ -1,3 +1,10 @@\n+2020-08-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/96545\n+\t* c-common.c (get_atomic_generic_size): Require that first argument's\n+\ttype points to a complete type and use tree_fits_uhwi_p instead of\n+\tjust INTEGER_CST TREE_CODE check for the TYPE_SIZE_UNIT.\n+\n 2020-07-31  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/96003"}, {"sha": "8208f16e92a196daa093fe329ef68fdf3ce0a3c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64938091bf13c53cf4dc69eb3c82f8f2f476300/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64938091bf13c53cf4dc69eb3c82f8f2f476300/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a64938091bf13c53cf4dc69eb3c82f8f2f476300", "patch": "@@ -1,3 +1,71 @@\n+2020-08-11  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* g++.dg/opt/flifetime-dse2.C: Remove AIX xfail.\n+\t* g++.dg/opt/flifetime-dse4.C: Remove AIX xfail.\n+\n+2020-08-11  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.dg/Warray-bounds-46.c: Add missing require-effective-target\n+\tdirective.\n+\t* gcc.dg/Warray-bounds-48.c: Same.\n+\t* gcc.dg/Warray-bounds-50.c: Same.\n+\t* gcc.dg/Wreturn-local-addr-2.c: Same.\n+\t* gcc.dg/Wreturn-local-addr-3.c: Same.\n+\t* gcc.dg/Wreturn-local-addr-4.c: Same.\n+\t* gcc.dg/Wreturn-local-addr-6.c: Same.\n+\t* gcc.dg/Wstack-usage.c: Same.\n+\t* gcc.dg/Wstringop-overflow-15.c: Same.\n+\t* gcc.dg/Wstringop-overflow-23.c: Same.\n+\t* gcc.dg/Wstringop-overflow-25.c: Same.\n+\t* gcc.dg/Wstringop-overflow-27.c: Same.\n+\t* gcc.dg/Wstringop-overflow-39.c: Same.\n+\t* gcc.dg/analyzer/alloca-leak.c: Same.\n+\t* gcc.dg/analyzer/data-model-1.c: Same.\n+\t* gcc.dg/analyzer/data-model-16.c: Same.\n+\t* gcc.dg/analyzer/malloc-1.c: Same.\n+\t* gcc.dg/analyzer/malloc-paths-8.c: Same.\n+\t* gcc.dg/analyzer/pr93546.c: Same.\n+\t* gcc.dg/analyzer/setjmp-1.c: Same.\n+\t* gcc.dg/analyzer/setjmp-2.c: Same.\n+\t* gcc.dg/analyzer/setjmp-3.c: Same.\n+\t* gcc.dg/analyzer/setjmp-4.c: Same.\n+\t* gcc.dg/analyzer/setjmp-5.c: Same.\n+\t* gcc.dg/analyzer/setjmp-6.c: Same.\n+\t* gcc.dg/analyzer/setjmp-7.c: Same.\n+\t* gcc.dg/analyzer/setjmp-7a.c: Same.\n+\t* gcc.dg/analyzer/setjmp-8.c: Same.\n+\t* gcc.dg/analyzer/setjmp-9.c: Same.\n+\t* gcc.dg/analyzer/setjmp-pr93378.c: Same.\n+\t* gcc.dg/gimplefe-44.c: Same.\n+\t* gcc.dg/pr84131.c: Same.\n+\t* gcc.dg/pr93986.c: Same.\n+\t* gcc.dg/pr95133.c: Same.\n+\t* gcc.dg/pr95857.c: Same.\n+\t* gcc.dg/strlenopt-83.c: Same.\n+\t* gcc.dg/strlenopt-84.c: Same.\n+\t* gcc.dg/strlenopt-91.c: Same.\n+\t* gcc.dg/uninit-32.c: Same.\n+\t* gcc.dg/uninit-36.c: Same.\n+\n+2020-08-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/96545\n+\t* c-c++-common/pr96545.c: New test.\n+\n+2020-08-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/96539\n+\t* gcc.target/i386/pr96539.c: New test.\n+\n+2020-08-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/96549\n+\t* gcc.c-torture/execute/pr96549.c: New test.\n+\n+2020-08-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/ipa/ipa-clone-2.c: Lower threshold from 500 to 400.\n+\n 2020-08-10  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/88003"}, {"sha": "b12eb175d4ff05697f2acc17eeaf98454fa1f2d1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64938091bf13c53cf4dc69eb3c82f8f2f476300/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64938091bf13c53cf4dc69eb3c82f8f2f476300/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a64938091bf13c53cf4dc69eb3c82f8f2f476300", "patch": "@@ -1,3 +1,86 @@\n+2020-08-11  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/91620\n+\t* include/bits/forward_list.tcc (forward_list<>::remove): Collect nodes\n+\tto destroy in an intermediate forward_list.\n+\t(forward_list<>::remove_if, forward_list<>::unique): Likewise.\n+\t* include/bits/list.tcc (list<>::remove, list<>::unique): Likewise.\n+\t(list<>::remove_if): Likewise.\n+\t* include/debug/forward_list (forward_list<>::_M_erase_after): Remove.\n+\t(forward_list<>::erase_after): Adapt.\n+\t(forward_list<>::remove, forward_list<>::remove_if): Collect nodes to\n+\tdestroy in an intermediate forward_list.\n+\t(forward_list<>::unique): Likewise.\n+\t* include/debug/list (list<>::remove, list<>::unique): Likewise.\n+\t(list<>::remove_if): Likewise.\n+\t* testsuite/23_containers/forward_list/operations/91620.cc: New test.\n+\t* testsuite/23_containers/list/operations/91620.cc: New test.\n+\n+2020-08-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/30_threads/thread/cons/84535.cc: Use a custom\n+\tnamespace.\n+\t* testsuite/30_threads/thread/cons/lwg2097.cc: Likewise.\n+\n+2020-08-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/89760\n+\t* include/experimental/executor [!_GLIBCXX_HAS_GTHREADS]:\n+\t(execution_context::mutex_type): Define dummy mutex type.\n+\t(system_context): Use execution_context::mutex_type.\n+\t(system_context) [!_GLIBCXX_HAS_GTHREADS]: Define dummy\n+\tthread and condition variable types.\n+\t[!_GLIBCXX_HAS_GTHREADS] (system_context::_M_run()): Do not\n+\tdefine.\n+\t(system_context::_M_post) [!_GLIBCXX_HAS_GTHREADS]: Throw\n+\tan exception when threads aren't available.\n+\t(strand::running_in_this_thread()): Defer to _M_state.\n+\t(strand::_State::running_in_this_thread()): New function.\n+\t(use_future_t): Do not depend on _GLIBCXX_USE_C99_STDINT_TR1.\n+\t* include/experimental/io_context (io_context): Use the\n+\texecution_context::mutex_type alias. Replace stack of thread\n+\tIDs with counter.\n+\t* testsuite/experimental/net/execution_context/use_service.cc:\n+\tEnable test for non-pthread targets.\n+\n+2020-08-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/executor (system_context::a__tag): Make\n+\tdefault constructor explicit.\n+\n+2020-08-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/executor (system_context::_M_run()):\n+\tFix predicate.\n+\t* testsuite/experimental/net/system_context/1.cc: New test.\n+\n+2020-08-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/stop_token: Check _GLIBCXX_HAS_GTHREADS using\n+\t#ifdef instead of #if.\n+\t(stop_token::_S_yield()): Check _GLIBCXX_HAS_GTHREADS before\n+\tusing __gthread_yield.\n+\n+2020-08-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/thread [!_GLIBCXX_HAS_GTHREADS] (this_thread::yield)\n+\t(this_thread::sleep_until): Define.\n+\t[!_GLIBCXX_HAS_GTHREADS] (this_thread::sleep_for): Define. Replace\n+\tuse of __gthread_time_t typedef with timespec.\n+\t* src/c++11/thread.cc [!_GLIBCXX_HAS_GTHREADS] (__sleep_for):\n+\tLikewise.\n+\t* testsuite/30_threads/this_thread/2.cc: Moved to...\n+\t* testsuite/30_threads/this_thread/yield.cc: ...here.\n+\t* testsuite/30_threads/this_thread/3.cc: Moved to...\n+\t* testsuite/30_threads/this_thread/sleep_for-mt.cc: ...here.\n+\t* testsuite/30_threads/this_thread/4.cc: Moved to...\n+\t* testsuite/30_threads/this_thread/sleep_until-mt.cc: ...here.\n+\t* testsuite/30_threads/this_thread/58038.cc: Add\n+\tdg-require-sleep.\n+\t* testsuite/30_threads/this_thread/60421.cc: Likewise.\n+\t* testsuite/30_threads/this_thread/sleep_for.cc: New test.\n+\t* testsuite/30_threads/this_thread/sleep_until.cc: New test.\n+\n 2020-08-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/94681"}]}