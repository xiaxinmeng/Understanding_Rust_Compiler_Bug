{"sha": "f6e926a68941cda00086c3ed29523de0c0980b9f", "node_id": "C_kwDOANBUbNoAKGY2ZTkyNmE2ODk0MWNkYTAwMDg2YzNlZDI5NTIzZGUwYzA5ODBiOWY", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-06T08:58:02Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-07T10:07:31Z"}, "message": "expand: Add stringify macro\n\nAdd the stringify macro expansion as well as some tests.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-macro.cc (builtin_macro_from_string): Add identifier\n\tidentification.\n\t* ast/rust-macro.h (enum class): Add Stringify builtin macro\n\ttype.\n\t* expand/rust-macro-builtins.cc (make_macro_path_str): Add path\n\tfor builtin stringify macro.\n\t(MacroBuiltin::stringify_handler): Add handler for builtin\n\tstringify macro.\n\t* expand/rust-macro-builtins.h: Add stringify handler's\n\tprototype.\n\t* util/rust-hir-map.cc (Mappings::insert_macro_def): Add\n\tstringify handler to builtin hir map.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/stringify.rs: Add a basic test with some text.\n\t* rust/execute/torture/builtin_macro_stringify.rs: Verify the\n\ttext is left as is without any other macro expansion.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "d2261cf70b1d8e5ec43ccc2f1e3b29d6575ca517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2261cf70b1d8e5ec43ccc2f1e3b29d6575ca517"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6e926a68941cda00086c3ed29523de0c0980b9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e926a68941cda00086c3ed29523de0c0980b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6e926a68941cda00086c3ed29523de0c0980b9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e926a68941cda00086c3ed29523de0c0980b9f/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "914b938884f9903681305184534a2e9869760f84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/914b938884f9903681305184534a2e9869760f84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/914b938884f9903681305184534a2e9869760f84"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "cb4bae71ef8b0fd68c00731c2a4542b9db29b75c", "filename": "gcc/rust/ast/rust-macro.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e926a68941cda00086c3ed29523de0c0980b9f/gcc%2Frust%2Fast%2Frust-macro.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e926a68941cda00086c3ed29523de0c0980b9f/gcc%2Frust%2Fast%2Frust-macro.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.cc?ref=f6e926a68941cda00086c3ed29523de0c0980b9f", "patch": "@@ -42,6 +42,9 @@ builtin_macro_from_string (const std::string &identifier)\n   if (identifier == \"include_str\")\n     return BuiltinMacro::IncludeStr;\n \n+  if (identifier == \"stringify\")\n+    return BuiltinMacro::Stringify;\n+\n   if (identifier == \"compile_error\")\n     return BuiltinMacro::CompileError;\n "}, {"sha": "f667a0a57b1ee5f907bd08929f52e8f31b1fa5fd", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e926a68941cda00086c3ed29523de0c0980b9f/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e926a68941cda00086c3ed29523de0c0980b9f/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=f6e926a68941cda00086c3ed29523de0c0980b9f", "patch": "@@ -589,6 +589,7 @@ enum class BuiltinMacro\n   Column,\n   IncludeBytes,\n   IncludeStr,\n+  Stringify,\n   CompileError,\n   Concat,\n   Env,"}, {"sha": "f30c963df35596830d3695fcd5af3c20579e6941", "filename": "gcc/rust/expand/rust-macro-builtins.cc", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e926a68941cda00086c3ed29523de0c0980b9f/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e926a68941cda00086c3ed29523de0c0980b9f/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc?ref=f6e926a68941cda00086c3ed29523de0c0980b9f", "patch": "@@ -58,6 +58,9 @@ make_macro_path_str (AST::BuiltinMacro kind)\n     case AST::BuiltinMacro::IncludeStr:\n       path_str = \"include_str\";\n       break;\n+    case AST::BuiltinMacro::Stringify:\n+      path_str = \"stringify\";\n+      break;\n     case AST::BuiltinMacro::CompileError:\n       path_str = \"compile_error\";\n       break;\n@@ -845,4 +848,34 @@ MacroBuiltin::line_handler (Location invoc_locus, AST::MacroInvocData &)\n   return AST::Fragment ({line_no}, std::move (tok));\n }\n \n+AST::Fragment\n+MacroBuiltin::stringify_handler (Location invoc_locus,\n+\t\t\t\t AST::MacroInvocData &invoc)\n+{\n+  std::string content;\n+  auto invoc_token_tree = invoc.get_delim_tok_tree ();\n+  auto tokens = invoc_token_tree.to_token_stream ();\n+\n+  // Tokens stream includes the first and last delimiter\n+  // which we need to skip.\n+  for (auto token = tokens.cbegin () + 1; token < tokens.cend () - 1; token++)\n+    {\n+      // Rust stringify format has no garantees but the reference compiler\n+      // removes spaces before some tokens depending on the lexer's behavior,\n+      // let's mimick some of those behaviors.\n+      auto token_id = (*token)->get_id ();\n+      if (token_id != RIGHT_PAREN && token_id != EXCLAM\n+\t  && token != tokens.cbegin () + 1)\n+\t{\n+\t  content.push_back (' ');\n+\t}\n+      content += (*token)->as_string ();\n+    }\n+\n+  auto node = AST::SingleASTNode (make_string (invoc_locus, content));\n+  auto token\n+    = make_token (Token::make_string (invoc_locus, std::move (content)));\n+  return AST::Fragment ({node}, std::move (token));\n+} // namespace Rust\n+\n } // namespace Rust"}, {"sha": "ea0f64a96a07359f00d7b77b10e071b9d3e6379f", "filename": "gcc/rust/expand/rust-macro-builtins.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e926a68941cda00086c3ed29523de0c0980b9f/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e926a68941cda00086c3ed29523de0c0980b9f/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h?ref=f6e926a68941cda00086c3ed29523de0c0980b9f", "patch": "@@ -79,6 +79,9 @@ class MacroBuiltin\n   static AST::Fragment include_str_handler (Location invoc_locus,\n \t\t\t\t\t    AST::MacroInvocData &invoc);\n \n+  static AST::Fragment stringify_handler (Location invoc_locus,\n+\t\t\t\t\t  AST::MacroInvocData &invoc);\n+\n   static AST::Fragment compile_error_handler (Location invoc_locus,\n \t\t\t\t\t      AST::MacroInvocData &invoc);\n "}, {"sha": "57c0a3c0d73626e384f5f81ce9ffc42e881d6c56", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e926a68941cda00086c3ed29523de0c0980b9f/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e926a68941cda00086c3ed29523de0c0980b9f/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=f6e926a68941cda00086c3ed29523de0c0980b9f", "patch": "@@ -856,6 +856,7 @@ Mappings::insert_macro_def (AST::MacroRulesDefinition *macro)\n       {\"column\", MacroBuiltin::column_handler},\n       {\"include_bytes\", MacroBuiltin::include_bytes_handler},\n       {\"include_str\", MacroBuiltin::include_str_handler},\n+      {\"stringify\", MacroBuiltin::stringify_handler},\n       {\"compile_error\", MacroBuiltin::compile_error_handler},\n       {\"concat\", MacroBuiltin::concat_handler},\n       {\"env\", MacroBuiltin::env_handler},"}, {"sha": "0350a3cea4d3eee1dd95eca06fc47e184b6cbcfb", "filename": "gcc/testsuite/rust/compile/stringify.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e926a68941cda00086c3ed29523de0c0980b9f/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstringify.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e926a68941cda00086c3ed29523de0c0980b9f/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstringify.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstringify.rs?ref=f6e926a68941cda00086c3ed29523de0c0980b9f", "patch": "@@ -0,0 +1,10 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+fn main() {\n+    let _a = stringify!(sample text with parenthesis () and things! This will become a \"string\".);\n+}"}, {"sha": "e6f4a33299e70888a2970defdcb1f46ed470bbf1", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_stringify.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e926a68941cda00086c3ed29523de0c0980b9f/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_stringify.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e926a68941cda00086c3ed29523de0c0980b9f/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_stringify.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_stringify.rs?ref=f6e926a68941cda00086c3ed29523de0c0980b9f", "patch": "@@ -0,0 +1,34 @@\n+// { dg-output \"a! ()\" }\n+#![feature(rustc_attrs)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+macro_rules! a {\n+    () => {\n+        \" foo\"\n+    };\n+}\n+\n+extern \"C\" {\n+    fn printf(fmt: *const i8, ...);\n+}\n+\n+fn print(s: &str) {\n+    unsafe {\n+        printf(\n+            \"%s\" as *const str as *const i8,\n+            s as *const str as *const i8,\n+        );\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = stringify!(a!());\n+\n+    print(a);\n+\n+    0\n+}"}]}