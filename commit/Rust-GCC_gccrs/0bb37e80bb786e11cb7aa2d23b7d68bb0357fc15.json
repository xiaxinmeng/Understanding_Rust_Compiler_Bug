{"sha": "0bb37e80bb786e11cb7aa2d23b7d68bb0357fc15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJiMzdlODBiYjc4NmUxMWNiN2FhMmQyM2I3ZDY4YmIwMzU3ZmMxNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-04-19T08:13:36Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-04-19T08:19:13Z"}, "message": "Fix another -freorder-blocks-and-partition glitch with Windows SEH\n\nSince GCC 8, the -freorder-blocks-and-partition pass can split a function\ninto hot and cold parts, thus generating 2 FDEs for a single function in\nDWARF for exception purposes and doing an equivalent trick for Windows SEH.\n\nNow the Windows system unwinder does not support arbitrarily large frames\nand there is even a hard limit on the encoding of the CFI, which changes\nthe stack allocation strategy when it is topped and which must be reflected\neverywhere.\n\ngcc/\n\t* config/i386/winnt.c (i386_pe_seh_cold_init): Properly deal with\n\tframes larger than the SEH maximum frame size.\ngcc/testsuite/\n\t* gnat.dg/opt92.adb: New test.", "tree": {"sha": "da29c545d6548ccf4e631d75c3c5c9035bce6e7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da29c545d6548ccf4e631d75c3c5c9035bce6e7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bb37e80bb786e11cb7aa2d23b7d68bb0357fc15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb37e80bb786e11cb7aa2d23b7d68bb0357fc15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bb37e80bb786e11cb7aa2d23b7d68bb0357fc15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb37e80bb786e11cb7aa2d23b7d68bb0357fc15/comments", "author": null, "committer": null, "parents": [{"sha": "d64720a07f611c55e8c815c775a852d650a2e738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d64720a07f611c55e8c815c775a852d650a2e738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d64720a07f611c55e8c815c775a852d650a2e738"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "b66263ad243853435078aee05a55628d4c4a2589", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb37e80bb786e11cb7aa2d23b7d68bb0357fc15/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb37e80bb786e11cb7aa2d23b7d68bb0357fc15/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=0bb37e80bb786e11cb7aa2d23b7d68bb0357fc15", "patch": "@@ -921,15 +921,17 @@ i386_pe_seh_cold_init (FILE *f, const char *name)\n \n   /* In the normal case, the frame pointer is near the bottom of the frame\n      so we can do the full stack allocation and set it afterwards.  There\n-     is an exception when the function accesses prior frames so, in this\n-     case, we need to pre-allocate a small chunk before setting it.  */\n-  if (crtl->accesses_prior_frames)\n-    alloc_offset = seh->cfa_offset;\n-  else\n+     is an exception if the function overflows the SEH maximum frame size\n+     or accesses prior frames so, in this case, we need to pre-allocate a\n+     small chunk of stack before setting it.  */\n+  offset = seh->sp_offset - INCOMING_FRAME_SP_OFFSET;\n+  if (offset < SEH_MAX_FRAME_SIZE && !crtl->accesses_prior_frames)\n     alloc_offset = seh->sp_offset;\n+  else\n+    alloc_offset = MIN (seh->cfa_offset + 240, seh->sp_offset);\n \n   offset = alloc_offset - INCOMING_FRAME_SP_OFFSET;\n-  if (offset > 0 && offset < SEH_MAX_FRAME_SIZE)\n+  if (offset > 0)\n     fprintf (f, \"\\t.seh_stackalloc\\t\" HOST_WIDE_INT_PRINT_DEC \"\\n\", offset);\n \n   for (int regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n@@ -958,7 +960,7 @@ i386_pe_seh_cold_init (FILE *f, const char *name)\n       fprintf (f, \", \" HOST_WIDE_INT_PRINT_DEC \"\\n\", offset);\n     }\n \n-  if (crtl->accesses_prior_frames)\n+  if (alloc_offset != seh->sp_offset)\n     {\n       offset = seh->sp_offset - alloc_offset;\n       if (offset > 0 && offset < SEH_MAX_FRAME_SIZE)"}, {"sha": "f6eb6a034ec54509d543ed6c0e94b938c1c89bf6", "filename": "gcc/testsuite/gnat.dg/opt92.adb", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb37e80bb786e11cb7aa2d23b7d68bb0357fc15/gcc%2Ftestsuite%2Fgnat.dg%2Fopt92.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb37e80bb786e11cb7aa2d23b7d68bb0357fc15/gcc%2Ftestsuite%2Fgnat.dg%2Fopt92.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt92.adb?ref=0bb37e80bb786e11cb7aa2d23b7d68bb0357fc15", "patch": "@@ -0,0 +1,38 @@\n+-- { dg-do compile { target { lp64 || llp64 } } }\n+-- { dg-options \"-O2 -gnatws\" }\n+\n+procedure Main is\n+\n+   subtype Int64 is Long_Long_Integer;\n+\n+   type Arr is array (Int64 range <>) of Boolean;\n+\n+   Pow : constant := 10;\n+\n+   procedure Compute (B : in out Arr) is\n+      Factor : Int64 := 3;\n+      Num    : Int64;\n+   begin\n+      while Factor <= 10 ** (Pow / 2) loop\n+         Num := Factor;\n+         while Num < 10 ** Pow loop\n+            if B (Num) then\n+               Factor := Num;\n+               exit;\n+            end if;\n+            Num := Num + 2;\n+         end loop;\n+         Num := Factor * Factor;\n+         while Num < 10 ** Pow loop\n+            B (Num) := False;\n+            Num        := Num + Factor * 2;\n+         end loop;\n+         Factor := Factor + 2;\n+      end loop;\n+   end;\n+\n+   B : Arr (1 .. 10 ** Pow) := (others => True);\n+\n+begin\n+   Compute (B);   \n+end;"}]}