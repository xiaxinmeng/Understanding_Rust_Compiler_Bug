{"sha": "ee5fd23a481f510528e00f4c988ed0e6a71218c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU1ZmQyM2E0ODFmNTEwNTI4ZTAwZjRjOTg4ZWQwZTZhNzEyMThjMg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-10-27T18:15:38Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-10-27T18:15:38Z"}, "message": "builtins.c (CASE_MATHFN_FLOATN): New helper macro to add cases for math functions that have _Float<N> and...\n\n[gcc]\n2017-10-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* builtins.c (CASE_MATHFN_FLOATN): New helper macro to add cases\n\tfor math functions that have _Float<N> and _Float<N>X variants.\n\t(mathfn_built_in_2): Add support for math functions that have\n\t_Float<N> and _Float<N>X variants.\n\t(DEF_INTERNAL_FLT_FLOATN_FN): New helper macro.\n\t(expand_builtin_mathfn_ternary): Add support for fma with\n\t_Float<N> and _Float<N>X variants.\n\t(expand_builtin): Likewise.\n\t(fold_builtin_3): Likewise.\n\t* builtins.def (DEF_EXT_LIB_FLOATN_NX_BUILTINS): New macro to\n\tcreate math function _Float<N> and _Float<N>X variants as external\n\tlibrary builtins.\n\t(BUILT_IN_COPYSIGN _Float<N> and _Float<N>X variants) Use\n\tDEF_EXT_LIB_FLOATN_NX_BUILTINS to make built-in functions using\n\tthe __builtin_ prefix and if not strict ansi, without the prefix.\n\t(BUILT_IN_FABS _Float<N> and _Float<N>X variants): Likewise.\n\t(BUILT_IN_FMA _Float<N> and _Float<N>X variants): Likewise.\n\t(BUILT_IN_FMAX _Float<N> and _Float<N>X variants): Likewise.\n\t(BUILT_IN_FMIN _Float<N> and _Float<N>X variants): Likewise.\n\t(BUILT_IN_NAN _Float<N> and _Float<N>X variants): Likewise.\n\t(BUILT_IN_SQRT _Float<N> and _Float<N>X variants): Likewise.\n\t* builtin-types.def (BT_FN_FLOAT16_FLOAT16_FLOAT16_FLOAT16): New\n\tfunction signatures for fma _Float<N> and _Float<N>X variants.\n\t(BT_FN_FLOAT32_FLOAT32_FLOAT32_FLOAT32): Likewise.\n\t(BT_FN_FLOAT64_FLOAT64_FLOAT64_FLOAT64): Likewise.\n\t(BT_FN_FLOAT128_FLOAT128_FLOAT128_FLOAT128): Likewise.\n\t(BT_FN_FLOAT32X_FLOAT32X_FLOAT32X_FLOAT32X): Likewise.\n\t(BT_FN_FLOAT64X_FLOAT64X_FLOAT64X_FLOAT64X): Likewise.\n\t(BT_FN_FLOAT128X_FLOAT128X_FLOAT128X_FLOAT128X): Likewise.\n\t* gencfn-macros.c (print_case_cfn): Add support for math functions\n\tthat have _Float<N> and _Float<N>X variants.\n\t(print_define_operator_list): Likewise.\n\t(fltfn_suffixes): Likewise.\n\t(main): Likewise.\n\t* internal-fn.def (DEF_INTERNAL_FLT_FLOATN_FN): New helper macro\n\tfor math functions that have _Float<N> and _Float<N>X variants.\n\t(SQRT): Add support for sqrt, copysign, fmin and fmax _Float<N>\n\tand _Float<N>X variants.\n\t(COPYSIGN): Likewise.\n\t(FMIN): Likewise.\n\t(FMAX): Likewise.\n\t* fold-const.c (tree_call_nonnegative_warnv_p): Add support for\n\tcopysign, fma, fmax, fmin, and sqrt _Float<N> and _Float<N>X\n\tvariants.\n\t(integer_valued_read_call_p): Likewise.\n\t* fold-const-call.c (fold_const_call_ss): Likewise.\n\t(fold_const_call_sss): Add support for copysign, fmin, and fmax\n\t_Float<N> and _Float<N>X variants.\n\t(fold_const_call_ssss): Add support for fma _Float<N> and\n\t_Float<N>X variants.\n\t* gimple-ssa-backprop.c (backprop::process_builtin_call_use): Add\n\tsupport for copysign and fma _Float<N> and _Float<N>X variants.\n\t(backprop::process_builtin_call_use): Likewise.\n\t* tree-call-cdce.c (can_test_argument_range); Add support for\n\tsqrt _Float<N> and _Float<N>X variants.\n\t(edom_only_function): Likewise.\n\t(get_no_error_domain): Likewise.\n\t* tree-ssa-math-opts.c (internal_fn_reciprocal): Likewise.\n\t* tree-ssa-reassoc.c (attempt_builtin_copysign): Add support for\n\tcopysign _Float<N> and _Float<N>X variants.\n\t* config/rs6000/rs6000-builtin.def (SQRTF128): Delete, this is now\n\thandled by machine independent code.\n\t(FMAF128): Likewise.\n\t* doc/cpp.texi (Common Predefined Macros): Document defining\n\t__FP_FAST_FMAF<N> and __FP_FAST_FMAF<N>X if the backend supports\n\tfma _Float<N> and _Float<N>X variants.\n\n[gcc/c]\n2017-10-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* c-decl.c (header_for_builtin_fn): Add support for copysign, fma,\n\tfmax, fmin, and sqrt _Float<N> and _Float<N>X variants.\n\n[gcc/c-family]\n2017-10-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* c-cppbuiltin.c (mode_has_fma): Add support for PowerPC KFmode.\n\t(c_cpp_builtins): If a machine has a fast fma _Float<N> and\n\t_Float<N>X variant, define __FP_FAST_FMA<N> and/or\n\t__FP_FAST_FMA<N>X.\n\n[gcc/testsuite]\n2017-10-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/float128-hw.c: Add support for all 4 FMA\n\tvariants.  Check various conversions to/from float128.  Check\n\tnegation.  Use {\\m...\\M} in the tests.\n\t* gcc.target/powerpc/float128-hw2.c: New test for implicit\n\t_Float128 math functions.\n\t* gcc.target/powerpc/float128-hw3.c: New test for strict ansi mode\n\tnot implicitly adding the _Float128 math functions.\n\t* gcc.target/powerpc/float128-fma2.c: Delete, test is no longer\n\tvalid.\n\t* gcc.target/powerpc/float128-sqrt2.c: Likewise.\n\nFrom-SVN: r254168", "tree": {"sha": "b4520775062aec903a9f6e5ee44e864f4afa4b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4520775062aec903a9f6e5ee44e864f4afa4b97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee5fd23a481f510528e00f4c988ed0e6a71218c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee5fd23a481f510528e00f4c988ed0e6a71218c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee5fd23a481f510528e00f4c988ed0e6a71218c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee5fd23a481f510528e00f4c988ed0e6a71218c2/comments", "author": null, "committer": null, "parents": [{"sha": "3f563e0b55c78c53130d4082da6ba670ec1d9ba5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f563e0b55c78c53130d4082da6ba670ec1d9ba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f563e0b55c78c53130d4082da6ba670ec1d9ba5"}], "stats": {"total": 523, "additions": 454, "deletions": 69}, "files": [{"sha": "1286c91b5909ca77c56ca741749ba3d243a8c974", "filename": "gcc/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -1,3 +1,72 @@\n+2017-10-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* builtins.c (CASE_MATHFN_FLOATN): New helper macro to add cases\n+\tfor math functions that have _Float<N> and _Float<N>X variants.\n+\t(mathfn_built_in_2): Add support for math functions that have\n+\t_Float<N> and _Float<N>X variants.\n+\t(DEF_INTERNAL_FLT_FLOATN_FN): New helper macro.\n+\t(expand_builtin_mathfn_ternary): Add support for fma with\n+\t_Float<N> and _Float<N>X variants.\n+\t(expand_builtin): Likewise.\n+\t(fold_builtin_3): Likewise.\n+\t* builtins.def (DEF_EXT_LIB_FLOATN_NX_BUILTINS): New macro to\n+\tcreate math function _Float<N> and _Float<N>X variants as external\n+\tlibrary builtins.\n+\t(BUILT_IN_COPYSIGN _Float<N> and _Float<N>X variants) Use\n+\tDEF_EXT_LIB_FLOATN_NX_BUILTINS to make built-in functions using\n+\tthe __builtin_ prefix and if not strict ansi, without the prefix.\n+\t(BUILT_IN_FABS _Float<N> and _Float<N>X variants): Likewise.\n+\t(BUILT_IN_FMA _Float<N> and _Float<N>X variants): Likewise.\n+\t(BUILT_IN_FMAX _Float<N> and _Float<N>X variants): Likewise.\n+\t(BUILT_IN_FMIN _Float<N> and _Float<N>X variants): Likewise.\n+\t(BUILT_IN_NAN _Float<N> and _Float<N>X variants): Likewise.\n+\t(BUILT_IN_SQRT _Float<N> and _Float<N>X variants): Likewise.\n+\t* builtin-types.def (BT_FN_FLOAT16_FLOAT16_FLOAT16_FLOAT16): New\n+\tfunction signatures for fma _Float<N> and _Float<N>X variants.\n+\t(BT_FN_FLOAT32_FLOAT32_FLOAT32_FLOAT32): Likewise.\n+\t(BT_FN_FLOAT64_FLOAT64_FLOAT64_FLOAT64): Likewise.\n+\t(BT_FN_FLOAT128_FLOAT128_FLOAT128_FLOAT128): Likewise.\n+\t(BT_FN_FLOAT32X_FLOAT32X_FLOAT32X_FLOAT32X): Likewise.\n+\t(BT_FN_FLOAT64X_FLOAT64X_FLOAT64X_FLOAT64X): Likewise.\n+\t(BT_FN_FLOAT128X_FLOAT128X_FLOAT128X_FLOAT128X): Likewise.\n+\t* gencfn-macros.c (print_case_cfn): Add support for math functions\n+\tthat have _Float<N> and _Float<N>X variants.\n+\t(print_define_operator_list): Likewise.\n+\t(fltfn_suffixes): Likewise.\n+\t(main): Likewise.\n+\t* internal-fn.def (DEF_INTERNAL_FLT_FLOATN_FN): New helper macro\n+\tfor math functions that have _Float<N> and _Float<N>X variants.\n+\t(SQRT): Add support for sqrt, copysign, fmin and fmax _Float<N>\n+\tand _Float<N>X variants.\n+\t(COPYSIGN): Likewise.\n+\t(FMIN): Likewise.\n+\t(FMAX): Likewise.\n+\t* fold-const.c (tree_call_nonnegative_warnv_p): Add support for\n+\tcopysign, fma, fmax, fmin, and sqrt _Float<N> and _Float<N>X\n+\tvariants.\n+\t(integer_valued_read_call_p): Likewise.\n+\t* fold-const-call.c (fold_const_call_ss): Likewise.\n+\t(fold_const_call_sss): Add support for copysign, fmin, and fmax\n+\t_Float<N> and _Float<N>X variants.\n+\t(fold_const_call_ssss): Add support for fma _Float<N> and\n+\t_Float<N>X variants.\n+\t* gimple-ssa-backprop.c (backprop::process_builtin_call_use): Add\n+\tsupport for copysign and fma _Float<N> and _Float<N>X variants.\n+\t(backprop::process_builtin_call_use): Likewise.\n+\t* tree-call-cdce.c (can_test_argument_range); Add support for\n+\tsqrt _Float<N> and _Float<N>X variants.\n+\t(edom_only_function): Likewise.\n+\t(get_no_error_domain): Likewise.\n+\t* tree-ssa-math-opts.c (internal_fn_reciprocal): Likewise.\n+\t* tree-ssa-reassoc.c (attempt_builtin_copysign): Add support for\n+\tcopysign _Float<N> and _Float<N>X variants.\n+\t* config/rs6000/rs6000-builtin.def (SQRTF128): Delete, this is now\n+\thandled by machine independent code.\n+\t(FMAF128): Likewise.\n+\t* doc/cpp.texi (Common Predefined Macros): Document defining\n+\t__FP_FAST_FMAF<N> and __FP_FAST_FMAF<N>X if the backend supports\n+\tfma _Float<N> and _Float<N>X variants.\n+\n 2017-10-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/82692"}, {"sha": "877f2aef424a114c432f7a2f5a62034cf4e7ac6a", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -544,6 +544,20 @@ DEF_FUNCTION_TYPE_3 (BT_FN_DOUBLE_DOUBLE_DOUBLE_DOUBLE,\n \t\t     BT_DOUBLE, BT_DOUBLE, BT_DOUBLE, BT_DOUBLE)\n DEF_FUNCTION_TYPE_3 (BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE,\n \t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_LONGDOUBLE, BT_LONGDOUBLE)\n+DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT16_FLOAT16_FLOAT16_FLOAT16,\n+\t\t     BT_FLOAT16, BT_FLOAT16, BT_FLOAT16, BT_FLOAT16)\n+DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT32_FLOAT32_FLOAT32_FLOAT32,\n+\t\t     BT_FLOAT32, BT_FLOAT32, BT_FLOAT32, BT_FLOAT32)\n+DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT64_FLOAT64_FLOAT64_FLOAT64,\n+\t\t     BT_FLOAT64, BT_FLOAT64, BT_FLOAT64, BT_FLOAT64)\n+DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT128_FLOAT128_FLOAT128_FLOAT128,\n+\t\t     BT_FLOAT128, BT_FLOAT128, BT_FLOAT128, BT_FLOAT128)\n+DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT32X_FLOAT32X_FLOAT32X_FLOAT32X,\n+\t\t     BT_FLOAT32X, BT_FLOAT32X, BT_FLOAT32X, BT_FLOAT32X)\n+DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT64X_FLOAT64X_FLOAT64X_FLOAT64X,\n+\t\t     BT_FLOAT64X, BT_FLOAT64X, BT_FLOAT64X, BT_FLOAT64X)\n+DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT128X_FLOAT128X_FLOAT128X_FLOAT128X,\n+\t\t     BT_FLOAT128X, BT_FLOAT128X, BT_FLOAT128X, BT_FLOAT128X)\n DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT_FLOAT_FLOAT_INTPTR,\n \t\t     BT_FLOAT, BT_FLOAT, BT_FLOAT, BT_INT_PTR)\n DEF_FUNCTION_TYPE_3 (BT_FN_DOUBLE_DOUBLE_DOUBLE_INTPTR,"}, {"sha": "a677705acad17855b0385df50b873fc56db07e87", "filename": "gcc/builtins.c", "status": "modified", "additions": 53, "deletions": 12, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -1816,14 +1816,26 @@ expand_builtin_classify_type (tree exp)\n   return GEN_INT (no_type_class);\n }\n \n-/* This helper macro, meant to be used in mathfn_built_in below,\n-   determines which among a set of three builtin math functions is\n-   appropriate for a given type mode.  The `F' and `L' cases are\n-   automatically generated from the `double' case.  */\n+/* This helper macro, meant to be used in mathfn_built_in below, determines\n+   which among a set of builtin math functions is appropriate for a given type\n+   mode.  The `F' (float) and `L' (long double) are automatically generated\n+   from the 'double' case.  If a function supports the _Float<N> and _Float<N>X\n+   types, there are additional types that are considered with 'F32', 'F64',\n+   'F128', etc. suffixes.  */\n #define CASE_MATHFN(MATHFN) \\\n   CASE_CFN_##MATHFN: \\\n   fcode = BUILT_IN_##MATHFN; fcodef = BUILT_IN_##MATHFN##F ; \\\n   fcodel = BUILT_IN_##MATHFN##L ; break;\n+/* Similar to the above, but also add support for the _Float<N> and _Float<N>X\n+   types.  */\n+#define CASE_MATHFN_FLOATN(MATHFN) \\\n+  CASE_CFN_##MATHFN: \\\n+  fcode = BUILT_IN_##MATHFN; fcodef = BUILT_IN_##MATHFN##F ; \\\n+  fcodel = BUILT_IN_##MATHFN##L ; fcodef16 = BUILT_IN_##MATHFN##F16 ; \\\n+  fcodef32 = BUILT_IN_##MATHFN##F32; fcodef64 = BUILT_IN_##MATHFN##F64 ; \\\n+  fcodef128 = BUILT_IN_##MATHFN##F128 ; fcodef32x = BUILT_IN_##MATHFN##F32X ; \\\n+  fcodef64x = BUILT_IN_##MATHFN##F64X ; fcodef128x = BUILT_IN_##MATHFN##F128X ;\\\n+  break;\n /* Similar to above, but appends _R after any F/L suffix.  */\n #define CASE_MATHFN_REENT(MATHFN) \\\n   case CFN_BUILT_IN_##MATHFN##_R: \\\n@@ -1840,7 +1852,15 @@ expand_builtin_classify_type (tree exp)\n static built_in_function\n mathfn_built_in_2 (tree type, combined_fn fn)\n {\n+  tree mtype;\n   built_in_function fcode, fcodef, fcodel;\n+  built_in_function fcodef16 = END_BUILTINS;\n+  built_in_function fcodef32 = END_BUILTINS;\n+  built_in_function fcodef64 = END_BUILTINS;\n+  built_in_function fcodef128 = END_BUILTINS;\n+  built_in_function fcodef32x = END_BUILTINS;\n+  built_in_function fcodef64x = END_BUILTINS;\n+  built_in_function fcodef128x = END_BUILTINS;\n \n   switch (fn)\n     {\n@@ -1854,7 +1874,7 @@ mathfn_built_in_2 (tree type, combined_fn fn)\n     CASE_MATHFN (CBRT)\n     CASE_MATHFN (CEIL)\n     CASE_MATHFN (CEXPI)\n-    CASE_MATHFN (COPYSIGN)\n+    CASE_MATHFN_FLOATN (COPYSIGN)\n     CASE_MATHFN (COS)\n     CASE_MATHFN (COSH)\n     CASE_MATHFN (DREM)\n@@ -1867,9 +1887,9 @@ mathfn_built_in_2 (tree type, combined_fn fn)\n     CASE_MATHFN (FABS)\n     CASE_MATHFN (FDIM)\n     CASE_MATHFN (FLOOR)\n-    CASE_MATHFN (FMA)\n-    CASE_MATHFN (FMAX)\n-    CASE_MATHFN (FMIN)\n+    CASE_MATHFN_FLOATN (FMA)\n+    CASE_MATHFN_FLOATN (FMAX)\n+    CASE_MATHFN_FLOATN (FMIN)\n     CASE_MATHFN (FMOD)\n     CASE_MATHFN (FREXP)\n     CASE_MATHFN (GAMMA)\n@@ -1923,7 +1943,7 @@ mathfn_built_in_2 (tree type, combined_fn fn)\n     CASE_MATHFN (SIN)\n     CASE_MATHFN (SINCOS)\n     CASE_MATHFN (SINH)\n-    CASE_MATHFN (SQRT)\n+    CASE_MATHFN_FLOATN (SQRT)\n     CASE_MATHFN (TAN)\n     CASE_MATHFN (TANH)\n     CASE_MATHFN (TGAMMA)\n@@ -1936,12 +1956,27 @@ mathfn_built_in_2 (tree type, combined_fn fn)\n       return END_BUILTINS;\n     }\n \n-  if (TYPE_MAIN_VARIANT (type) == double_type_node)\n+  mtype = TYPE_MAIN_VARIANT (type);\n+  if (mtype == double_type_node)\n     return fcode;\n-  else if (TYPE_MAIN_VARIANT (type) == float_type_node)\n+  else if (mtype == float_type_node)\n     return fcodef;\n-  else if (TYPE_MAIN_VARIANT (type) == long_double_type_node)\n+  else if (mtype == long_double_type_node)\n     return fcodel;\n+  else if (mtype == float16_type_node)\n+    return fcodef16;\n+  else if (mtype == float32_type_node)\n+    return fcodef32;\n+  else if (mtype == float64_type_node)\n+    return fcodef64;\n+  else if (mtype == float128_type_node)\n+    return fcodef128;\n+  else if (mtype == float32x_type_node)\n+    return fcodef32x;\n+  else if (mtype == float64x_type_node)\n+    return fcodef64x;\n+  else if (mtype == float128x_type_node)\n+    return fcodef128x;\n   else\n     return END_BUILTINS;\n }\n@@ -1995,6 +2030,9 @@ associated_internal_fn (tree fndecl)\n     {\n #define DEF_INTERNAL_FLT_FN(NAME, FLAGS, OPTAB, TYPE) \\\n     CASE_FLT_FN (BUILT_IN_##NAME): return IFN_##NAME;\n+#define DEF_INTERNAL_FLT_FLOATN_FN(NAME, FLAGS, OPTAB, TYPE) \\\n+    CASE_FLT_FN (BUILT_IN_##NAME): return IFN_##NAME; \\\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_##NAME): return IFN_##NAME;\n #define DEF_INTERNAL_INT_FN(NAME, FLAGS, OPTAB, TYPE) \\\n     CASE_INT_FN (BUILT_IN_##NAME): return IFN_##NAME;\n #include \"internal-fn.def\"\n@@ -2068,6 +2106,7 @@ expand_builtin_mathfn_ternary (tree exp, rtx target, rtx subtarget)\n   switch (DECL_FUNCTION_CODE (fndecl))\n     {\n     CASE_FLT_FN (BUILT_IN_FMA):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_FMA):\n       builtin_optab = fma_optab; break;\n     default:\n       gcc_unreachable ();\n@@ -6567,6 +6606,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n       break;\n \n     CASE_FLT_FN (BUILT_IN_FMA):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_FMA):\n       target = expand_builtin_mathfn_ternary (exp, target, subtarget);\n       if (target)\n \treturn target;\n@@ -8996,6 +9036,7 @@ fold_builtin_3 (location_t loc, tree fndecl,\n       return fold_builtin_sincos (loc, arg0, arg1, arg2);\n \n     CASE_FLT_FN (BUILT_IN_FMA):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_FMA):\n       return fold_builtin_fma (loc, arg0, arg1, arg2, type);\n \n     CASE_FLT_FN (BUILT_IN_REMQUO):"}, {"sha": "1434f07853c5c48dc2b106b00089abdc6aa8d74c", "filename": "gcc/builtins.def", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -128,6 +128,21 @@ along with GCC; see the file COPYING3.  If not see\n   DEF_BUILTIN_CHKP (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE,\t\\\n \t\t    TYPE, true, true, true, ATTRS, false, true)\n \n+/* A set of GCC builtins for _FloatN and _FloatNx types.  TYPE_MACRO is called\n+   with an argument such as FLOAT32 to produce the enum value for the type.  If\n+   we are being fully conformant we ignore the version of these builtins that\n+   does not being with __builtin_.  */\n+#undef DEF_EXT_LIB_FLOATN_NX_BUILTINS\n+#define DEF_EXT_LIB_FLOATN_NX_BUILTINS(ENUM, NAME, TYPE_MACRO, ATTRS)\t\t\\\n+  DEF_EXT_LIB_BUILTIN (ENUM ## F16, NAME \"f16\", TYPE_MACRO (FLOAT16), ATTRS) \\\n+  DEF_EXT_LIB_BUILTIN (ENUM ## F32, NAME \"f32\", TYPE_MACRO (FLOAT32), ATTRS) \\\n+  DEF_EXT_LIB_BUILTIN (ENUM ## F64, NAME \"f64\", TYPE_MACRO (FLOAT64), ATTRS) \\\n+  DEF_EXT_LIB_BUILTIN (ENUM ## F128, NAME \"f128\", TYPE_MACRO (FLOAT128), ATTRS)\\\n+  DEF_EXT_LIB_BUILTIN (ENUM ## F32X, NAME \"f32x\", TYPE_MACRO (FLOAT32X), ATTRS)\\\n+  DEF_EXT_LIB_BUILTIN (ENUM ## F64X, NAME \"f64x\", TYPE_MACRO (FLOAT64X), ATTRS)\\\n+  DEF_EXT_LIB_BUILTIN (ENUM ## F128X, NAME \"f128x\", TYPE_MACRO (FLOAT128X), \\\n+\t\t\tATTRS)\n+\n /* Like DEF_LIB_BUILTIN, except that the function is only a part of\n    the standard in C94 or above.  */\n #undef DEF_C94_BUILTIN\n@@ -324,7 +339,7 @@ DEF_C99_BUILTIN        (BUILT_IN_COPYSIGN, \"copysign\", BT_FN_DOUBLE_DOUBLE_DOUBL\n DEF_C99_BUILTIN        (BUILT_IN_COPYSIGNF, \"copysignf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_COPYSIGNL, \"copysignl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n #define COPYSIGN_TYPE(F) BT_FN_##F##_##F##_##F\n-DEF_GCC_FLOATN_NX_BUILTINS (BUILT_IN_COPYSIGN, \"copysign\", COPYSIGN_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_COPYSIGN, \"copysign\", COPYSIGN_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n #undef COPYSIGN_TYPE\n DEF_LIB_BUILTIN        (BUILT_IN_COS, \"cos\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_COSF, \"cosf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n@@ -357,7 +372,7 @@ DEF_LIB_BUILTIN        (BUILT_IN_FABS, \"fabs\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_N\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FABSF, \"fabsf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FABSL, \"fabsl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n #define FABS_TYPE(F) BT_FN_##F##_##F\n-DEF_GCC_FLOATN_NX_BUILTINS (BUILT_IN_FABS, \"fabs\", FABS_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_FABS, \"fabs\", FABS_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n #undef FABS_TYPE\n DEF_GCC_BUILTIN        (BUILT_IN_FABSD32, \"fabsd32\", BT_FN_DFLOAT32_DFLOAT32, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_FABSD64, \"fabsd64\", BT_FN_DFLOAT64_DFLOAT64, ATTR_CONST_NOTHROW_LEAF_LIST)\n@@ -382,12 +397,21 @@ DEF_C99_C90RES_BUILTIN (BUILT_IN_FLOORL, \"floorl\", BT_FN_LONGDOUBLE_LONGDOUBLE,\n DEF_C99_BUILTIN        (BUILT_IN_FMA, \"fma\", BT_FN_DOUBLE_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_FMAF, \"fmaf\", BT_FN_FLOAT_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_FMAL, \"fmal\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+#define FMA_TYPE(F) BT_FN_##F##_##F##_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_FMA, \"fma\", FMA_TYPE, ATTR_MATHFN_FPROUNDING)\n+#undef FMA_TYPE\n DEF_C99_BUILTIN        (BUILT_IN_FMAX, \"fmax\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_FMAXF, \"fmaxf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_FMAXL, \"fmaxl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#define FMAX_TYPE(F) BT_FN_##F##_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_FMAX, \"fmax\", FMAX_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#undef FMAX_TYPE\n DEF_C99_BUILTIN        (BUILT_IN_FMIN, \"fmin\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_FMINF, \"fminf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_FMINL, \"fminl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#define FMIN_TYPE(F) BT_FN_##F##_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_FMIN, \"fmin\", FMIN_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#undef FMIN_TYPE\n DEF_LIB_BUILTIN        (BUILT_IN_FMOD, \"fmod\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FMODF, \"fmodf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FMODL, \"fmodl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n@@ -495,7 +519,7 @@ DEF_C99_BUILTIN        (BUILT_IN_NAN, \"nan\", BT_FN_DOUBLE_CONST_STRING, ATTR_CON\n DEF_C99_BUILTIN        (BUILT_IN_NANF, \"nanf\", BT_FN_FLOAT_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_C99_BUILTIN        (BUILT_IN_NANL, \"nanl\", BT_FN_LONGDOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n #define NAN_TYPE(F) BT_FN_##F##_CONST_STRING\n-DEF_GCC_FLOATN_NX_BUILTINS (BUILT_IN_NAN, \"nan\", NAN_TYPE, ATTR_CONST_NOTHROW_NONNULL)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_NAN, \"nan\", NAN_TYPE, ATTR_CONST_NOTHROW_NONNULL)\n DEF_GCC_BUILTIN        (BUILT_IN_NAND32, \"nand32\", BT_FN_DFLOAT32_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_GCC_BUILTIN        (BUILT_IN_NAND64, \"nand64\", BT_FN_DFLOAT64_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_GCC_BUILTIN        (BUILT_IN_NAND128, \"nand128\", BT_FN_DFLOAT128_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n@@ -564,6 +588,9 @@ DEF_C99_C90RES_BUILTIN (BUILT_IN_SINL, \"sinl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR\n DEF_LIB_BUILTIN        (BUILT_IN_SQRT, \"sqrt\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_SQRTF, \"sqrtf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_SQRTL, \"sqrtl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#define SQRT_TYPE(F) BT_FN_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_SQRT, \"sqrt\", SQRT_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#undef SQRT_TYPE\n DEF_LIB_BUILTIN        (BUILT_IN_TAN, \"tan\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_TANF, \"tanf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_LIB_BUILTIN        (BUILT_IN_TANH, \"tanh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)"}, {"sha": "e9c62e13495a373bc41030615c71dd9ba0145f46", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -1,3 +1,10 @@\n+2017-10-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* c-cppbuiltin.c (mode_has_fma): Add support for PowerPC KFmode.\n+\t(c_cpp_builtins): If a machine has a fast fma _Float<N> and\n+\t_Float<N>X variant, define __FP_FAST_FMA<N> and/or\n+\t__FP_FAST_FMA<N>X.\n+\n 2017-10-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/82681"}, {"sha": "2ac9616b72f1e48febad4b432157bf3f77769703", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -82,6 +82,11 @@ mode_has_fma (machine_mode mode)\n       return !!HAVE_fmadf4;\n #endif\n \n+#ifdef HAVE_fmakf4\t/* PowerPC if long double != __float128.  */\n+    case E_KFmode:\n+      return !!HAVE_fmakf4;\n+#endif\n+\n #ifdef HAVE_fmaxf4\n     case E_XFmode:\n       return !!HAVE_fmaxf4;\n@@ -1119,7 +1124,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \t       floatn_nx_types[i].extended ? \"X\" : \"\");\n       sprintf (csuffix, \"F%d%s\", floatn_nx_types[i].n,\n \t       floatn_nx_types[i].extended ? \"x\" : \"\");\n-      builtin_define_float_constants (prefix, csuffix, \"%s\", NULL,\n+      builtin_define_float_constants (prefix, csuffix, \"%s\", csuffix,\n \t\t\t\t      FLOATN_NX_TYPE_NODE (i));\n     }\n "}, {"sha": "fe450ec4331e4bc38d8c61d194458856151a54a3", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -1,3 +1,8 @@\n+2017-10-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* c-decl.c (header_for_builtin_fn): Add support for copysign, fma,\n+\tfmax, fmin, and sqrt _Float<N> and _Float<N>X variants.\n+\n 2017-10-25  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/7356"}, {"sha": "78405c856756393b2e02da44c0842eb072a8e8c9", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -3163,6 +3163,7 @@ header_for_builtin_fn (enum built_in_function fcode)\n     CASE_FLT_FN (BUILT_IN_CBRT):\n     CASE_FLT_FN (BUILT_IN_CEIL):\n     CASE_FLT_FN (BUILT_IN_COPYSIGN):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_COPYSIGN):\n     CASE_FLT_FN (BUILT_IN_COS):\n     CASE_FLT_FN (BUILT_IN_COSH):\n     CASE_FLT_FN (BUILT_IN_ERF):\n@@ -3171,11 +3172,15 @@ header_for_builtin_fn (enum built_in_function fcode)\n     CASE_FLT_FN (BUILT_IN_EXP2):\n     CASE_FLT_FN (BUILT_IN_EXPM1):\n     CASE_FLT_FN (BUILT_IN_FABS):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_FABS):\n     CASE_FLT_FN (BUILT_IN_FDIM):\n     CASE_FLT_FN (BUILT_IN_FLOOR):\n     CASE_FLT_FN (BUILT_IN_FMA):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_FMA):\n     CASE_FLT_FN (BUILT_IN_FMAX):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_FMAX):\n     CASE_FLT_FN (BUILT_IN_FMIN):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_FMIN):\n     CASE_FLT_FN (BUILT_IN_FMOD):\n     CASE_FLT_FN (BUILT_IN_FREXP):\n     CASE_FLT_FN (BUILT_IN_HYPOT):\n@@ -3207,6 +3212,7 @@ header_for_builtin_fn (enum built_in_function fcode)\n     CASE_FLT_FN (BUILT_IN_SINH):\n     CASE_FLT_FN (BUILT_IN_SINCOS):\n     CASE_FLT_FN (BUILT_IN_SQRT):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_SQRT):\n     CASE_FLT_FN (BUILT_IN_TAN):\n     CASE_FLT_FN (BUILT_IN_TANH):\n     CASE_FLT_FN (BUILT_IN_TGAMMA):"}, {"sha": "980467522928b62cd195fae0f1b43b892ade8285", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -2374,17 +2374,13 @@ BU_FLOAT128_1 (FABSQ,\t\t\"fabsq\",       CONST, abskf2)\n BU_FLOAT128_2 (COPYSIGNQ,\t\"copysignq\",   CONST, copysignkf3)\n \n /* 1, 2, and 3 argument IEEE 128-bit floating point functions that require ISA\n-   3.0 hardware.  These functions use the new 'f128' suffix.  Eventually the\n-   standard functions should be folded into the common built-in function\n-   handling. */\n-BU_FLOAT128_1_HW (SQRTF128,\t \"sqrtf128\",\t\t   CONST, sqrtkf2)\n+   3.0 hardware.  These functions use the new 'f128' suffix.  */\n BU_FLOAT128_1_HW (SQRTF128_ODD,\t \"sqrtf128_round_to_odd\",  CONST, sqrtkf2_odd)\n BU_FLOAT128_1_HW (TRUNCF128_ODD, \"truncf128_round_to_odd\", CONST, trunckfdf2_odd)\n BU_FLOAT128_2_HW (ADDF128_ODD,\t \"addf128_round_to_odd\",   CONST, addkf3_odd)\n BU_FLOAT128_2_HW (SUBF128_ODD,\t \"subf128_round_to_odd\",   CONST, subkf3_odd)\n BU_FLOAT128_2_HW (MULF128_ODD,\t \"mulf128_round_to_odd\",   CONST, mulkf3_odd)\n BU_FLOAT128_2_HW (DIVF128_ODD,\t \"divf128_round_to_odd\",   CONST, divkf3_odd)\n-BU_FLOAT128_3_HW (FMAF128,\t \"fmaf128\",\t\t   CONST, fmakf4_hw)\n BU_FLOAT128_3_HW (FMAF128_ODD,\t \"fmaf128_round_to_odd\",   CONST, fmakf4_odd)\n \f\n /* 1 argument crypto functions.  */"}, {"sha": "759532d127387a4d21d0ec72f8492a2d415c8e1b", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -2366,6 +2366,21 @@ the include file @file{math.h} can define the macros\n @code{FP_FAST_FMA}, @code{FP_FAST_FMAF}, and @code{FP_FAST_FMAL}\n for compatibility with the 1999 C standard.\n \n+@item __FP_FAST_FMAF16\n+@itemx __FP_FAST_FMAF32\n+@itemx __FP_FAST_FMAF64\n+@itemx __FP_FAST_FMAF128\n+@itemx __FP_FAST_FMAF32X\n+@itemx __FP_FAST_FMAF64X\n+@itemx __FP_FAST_FMAF128X\n+These macros are defined with the value 1 if the backend supports the\n+@code{fma} functions using the additional @code{_Float@var{n}} and\n+@code{_Float@var{n}x} types that are defined in ISO/IEC TS\n+18661-3:2015.  The include file @file{math.h} can define the\n+@code{FP_FAST_FMAF@var{n}} and @code{FP_FAST_FMAF@var{n}x} macros if\n+the user defined @code{__STDC_WANT_IEC_60559_TYPES_EXT__} before\n+including @file{math.h}.\n+\n @item __GCC_IEC_559\n This macro is defined to indicate the intended level of support for\n IEEE 754 (IEC 60559) floating-point arithmetic.  It expands to a"}, {"sha": "f23b1bf28bd468542c880dd06bc887c647e70c75", "filename": "gcc/fold-const-call.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ffold-const-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ffold-const-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const-call.c?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -596,6 +596,7 @@ fold_const_call_ss (real_value *result, combined_fn fn,\n   switch (fn)\n     {\n     CASE_CFN_SQRT:\n+    CASE_CFN_SQRT_FN:\n       return (real_compare (GE_EXPR, arg, &dconst0)\n \t      && do_mpfr_arg1 (result, mpfr_sqrt, arg, format));\n \n@@ -1179,14 +1180,17 @@ fold_const_call_sss (real_value *result, combined_fn fn,\n       return do_mpfr_arg2 (result, mpfr_hypot, arg0, arg1, format);\n \n     CASE_CFN_COPYSIGN:\n+    CASE_CFN_COPYSIGN_FN:\n       *result = *arg0;\n       real_copysign (result, arg1);\n       return true;\n \n     CASE_CFN_FMIN:\n+    CASE_CFN_FMIN_FN:\n       return do_mpfr_arg2 (result, mpfr_min, arg0, arg1, format);\n \n     CASE_CFN_FMAX:\n+    CASE_CFN_FMAX_FN:\n       return do_mpfr_arg2 (result, mpfr_max, arg0, arg1, format);\n \n     CASE_CFN_POW:\n@@ -1473,6 +1477,7 @@ fold_const_call_ssss (real_value *result, combined_fn fn,\n   switch (fn)\n     {\n     CASE_CFN_FMA:\n+    CASE_CFN_FMA_FN:\n       return do_mpfr_arg3 (result, mpfr_fma, arg0, arg1, arg2, format);\n \n     default:"}, {"sha": "1109f5e3bc53f9e9fe238f7d7b4f7914addcafa7", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -12773,6 +12773,7 @@ tree_call_nonnegative_warnv_p (tree type, combined_fn fn, tree arg0, tree arg1,\n       return true;\n \n     CASE_CFN_SQRT:\n+    CASE_CFN_SQRT_FN:\n       /* sqrt(-0.0) is -0.0.  */\n       if (!HONOR_SIGNED_ZEROS (element_mode (type)))\n \treturn true;\n@@ -12817,14 +12818,17 @@ tree_call_nonnegative_warnv_p (tree type, combined_fn fn, tree arg0, tree arg1,\n       return RECURSE (arg0);\n \n     CASE_CFN_FMAX:\n+    CASE_CFN_FMAX_FN:\n       /* True if the 1st OR 2nd arguments are nonnegative.  */\n       return RECURSE (arg0) || RECURSE (arg1);\n \n     CASE_CFN_FMIN:\n+    CASE_CFN_FMIN_FN:\n       /* True if the 1st AND 2nd arguments are nonnegative.  */\n       return RECURSE (arg0) && RECURSE (arg1);\n \n     CASE_CFN_COPYSIGN:\n+    CASE_CFN_COPYSIGN_FN:\n       /* True if the 2nd argument is nonnegative.  */\n       return RECURSE (arg1);\n \n@@ -13323,7 +13327,9 @@ integer_valued_real_call_p (combined_fn fn, tree arg0, tree arg1, int depth)\n       return true;\n \n     CASE_CFN_FMIN:\n+    CASE_CFN_FMIN_FN:\n     CASE_CFN_FMAX:\n+    CASE_CFN_FMAX_FN:\n       return RECURSE (arg0) && RECURSE (arg1);\n \n     default:"}, {"sha": "5b38ac20a4d02d96a3b07f97f4028a474fd99e25", "filename": "gcc/gencfn-macros.c", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fgencfn-macros.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fgencfn-macros.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencfn-macros.c?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -98,11 +98,12 @@ is_group (string_set *builtins, const char *name, const char *const *suffixes)\n \n static void\n print_case_cfn (const char *name, bool internal_p,\n-\t\tconst char *const *suffixes)\n+\t\tconst char *const *suffixes, bool floatn_p)\n {\n-  printf (\"#define CASE_CFN_%s\", name);\n+  const char *floatn = (floatn_p) ? \"_FN\" : \"\";\n+  printf (\"#define CASE_CFN_%s%s\", name, floatn);\n   if (internal_p)\n-    printf (\" \\\\\\n  case CFN_%s\", name);\n+    printf (\" \\\\\\n  case CFN_%s%s\", name, floatn);\n   for (unsigned int i = 0; suffixes[i]; ++i)\n     printf (\"%s \\\\\\n  case CFN_BUILT_IN_%s%s\",\n \t    internal_p || i > 0 ? \":\" : \"\", name, suffixes[i]);\n@@ -115,9 +116,10 @@ print_case_cfn (const char *name, bool internal_p,\n \n static void\n print_define_operator_list (const char *name, bool internal_p,\n-\t\t\t    const char *const *suffixes)\n+\t\t\t    const char *const *suffixes, bool floatn_p)\n {\n-  printf (\"(define_operator_list %s\\n\", name);\n+  const char *floatn = (floatn_p) ? \"_FN\" : \"\";\n+  printf (\"(define_operator_list %s%s\\n\", name, floatn);\n   for (unsigned int i = 0; suffixes[i]; ++i)\n     printf (\"    BUILT_IN_%s%s\\n\", name, suffixes[i]);\n   if (internal_p)\n@@ -148,6 +150,8 @@ const char *const internal_fn_int_names[] = {\n };\n \n static const char *const flt_suffixes[] = { \"F\", \"\", \"L\", NULL };\n+static const char *const fltfn_suffixes[] = { \"F16\", \"F32\", \"F64\", \"F128\",\n+\t\t\t\t\t      \"F32X\", \"F64X\", \"F128X\", NULL };\n static const char *const int_suffixes[] = { \"\", \"L\", \"LL\", \"IMAX\", NULL };\n \n static const char *const *const suffix_lists[] = {\n@@ -200,15 +204,33 @@ main (int argc, char **argv)\n \t{\n \t  const char *root = name + 9;\n \t  for (unsigned int j = 0; suffix_lists[j]; ++j)\n-\t    if (is_group (&builtins, root, suffix_lists[j]))\n-\t      {\n-\t\tbool internal_p = internal_fns.contains (root);\n-\t\tif (type == 'c')\n-\t\t  print_case_cfn (root, internal_p, suffix_lists[j]);\n-\t\telse\n-\t\t  print_define_operator_list (root, internal_p,\n-\t\t\t\t\t      suffix_lists[j]);\n-\t      }\n+\t    {\n+\t      const char *const *const suffix = suffix_lists[j];\n+\n+\t      if (is_group (&builtins, root, suffix))\n+\t\t{\n+\t\t  bool internal_p = internal_fns.contains (root);\n+\n+\t\t  if (type == 'c')\n+\t\t    print_case_cfn (root, internal_p, suffix, false);\n+\t\t  else\n+\t\t    print_define_operator_list (root, internal_p,\n+\t\t\t\t\t\tsuffix, false);\n+\n+\t\t      /* Support the _Float<N> and _Float<N>X math functions if\n+\t\t\t they exist.  We put these out as a separate CFN macro,\n+\t\t\t so code can add support or not as needed.  */\n+\t\t  if (suffix == flt_suffixes\n+\t\t      && is_group (&builtins, root, fltfn_suffixes))\n+\t\t    {\n+\t\t      if (type == 'c')\n+\t\t\tprint_case_cfn (root, false, fltfn_suffixes, true);\n+\t\t      else\n+\t\t\tprint_define_operator_list (root, false, fltfn_suffixes,\n+\t\t\t\t\t\t    true);\n+\t\t    }\n+\t\t}\n+\t    }\n \t}\n     }\n "}, {"sha": "1daa0ceef0ace5c079a4d3a59d1ac7103cb9be8a", "filename": "gcc/gimple-ssa-backprop.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fgimple-ssa-backprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Fgimple-ssa-backprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-backprop.c?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -354,6 +354,7 @@ backprop::process_builtin_call_use (gcall *call, tree rhs, usage_info *info)\n       break;\n \n     CASE_CFN_COPYSIGN:\n+    CASE_CFN_COPYSIGN_FN:\n       /* The sign of the first input is ignored.  */\n       if (rhs != gimple_call_arg (call, 1))\n \tinfo->flags.ignore_sign = true;\n@@ -373,6 +374,7 @@ backprop::process_builtin_call_use (gcall *call, tree rhs, usage_info *info)\n       }\n \n     CASE_CFN_FMA:\n+    CASE_CFN_FMA_FN:\n       /* In X * X + Y, where Y is distinct from X, the sign of X doesn't\n \t matter.  */\n       if (gimple_call_arg (call, 0) == rhs\n@@ -689,6 +691,7 @@ strip_sign_op_1 (tree rhs)\n     switch (gimple_call_combined_fn (call))\n       {\n       CASE_CFN_COPYSIGN:\n+      CASE_CFN_COPYSIGN_FN:\n \treturn gimple_call_arg (call, 0);\n \n       default:"}, {"sha": "dcb276e46320f344195acaebf40740f0c8faa06b", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -80,6 +80,11 @@ along with GCC; see the file COPYING3.  If not see\n   DEF_INTERNAL_OPTAB_FN (NAME, FLAGS, OPTAB, TYPE)\n #endif\n \n+#ifndef DEF_INTERNAL_FLT_FLOATN_FN\n+#define DEF_INTERNAL_FLT_FLOATN_FN(NAME, FLAGS, OPTAB, TYPE) \\\n+  DEF_INTERNAL_FLT_FN (NAME, FLAGS, OPTAB, TYPE)\n+#endif\n+\n #ifndef DEF_INTERNAL_INT_FN\n #define DEF_INTERNAL_INT_FN(NAME, FLAGS, OPTAB, TYPE) \\\n   DEF_INTERNAL_OPTAB_FN (NAME, FLAGS, OPTAB, TYPE)\n@@ -109,7 +114,7 @@ DEF_INTERNAL_FLT_FN (LOG2, ECF_CONST, log2, unary)\n DEF_INTERNAL_FLT_FN (LOGB, ECF_CONST, logb, unary)\n DEF_INTERNAL_FLT_FN (SIGNIFICAND, ECF_CONST, significand, unary)\n DEF_INTERNAL_FLT_FN (SIN, ECF_CONST, sin, unary)\n-DEF_INTERNAL_FLT_FN (SQRT, ECF_CONST, sqrt, unary)\n+DEF_INTERNAL_FLT_FLOATN_FN (SQRT, ECF_CONST, sqrt, unary)\n DEF_INTERNAL_FLT_FN (TAN, ECF_CONST, tan, unary)\n \n /* FP rounding.  */\n@@ -122,13 +127,13 @@ DEF_INTERNAL_FLT_FN (TRUNC, ECF_CONST, btrunc, unary)\n \n /* Binary math functions.  */\n DEF_INTERNAL_FLT_FN (ATAN2, ECF_CONST, atan2, binary)\n-DEF_INTERNAL_FLT_FN (COPYSIGN, ECF_CONST, copysign, binary)\n+DEF_INTERNAL_FLT_FLOATN_FN (COPYSIGN, ECF_CONST, copysign, binary)\n DEF_INTERNAL_FLT_FN (FMOD, ECF_CONST, fmod, binary)\n DEF_INTERNAL_FLT_FN (POW, ECF_CONST, pow, binary)\n DEF_INTERNAL_FLT_FN (REMAINDER, ECF_CONST, remainder, binary)\n DEF_INTERNAL_FLT_FN (SCALB, ECF_CONST, scalb, binary)\n-DEF_INTERNAL_FLT_FN (FMIN, ECF_CONST, fmin, binary)\n-DEF_INTERNAL_FLT_FN (FMAX, ECF_CONST, fmax, binary)\n+DEF_INTERNAL_FLT_FLOATN_FN (FMIN, ECF_CONST, fmin, binary)\n+DEF_INTERNAL_FLT_FLOATN_FN (FMAX, ECF_CONST, fmax, binary)\n DEF_INTERNAL_OPTAB_FN (XORSIGN, ECF_CONST, xorsign, binary)\n \n /* FP scales.  */\n@@ -230,5 +235,6 @@ DEF_INTERNAL_FN (DIVMOD, ECF_CONST | ECF_LEAF, NULL)\n \n #undef DEF_INTERNAL_INT_FN\n #undef DEF_INTERNAL_FLT_FN\n+#undef DEF_INTERNAL_FLT_FLOATN_FN\n #undef DEF_INTERNAL_OPTAB_FN\n #undef DEF_INTERNAL_FN"}, {"sha": "a574aeaef30b18bdb48b0d101ac47f6aebac72ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -1,3 +1,16 @@\n+2017-10-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/float128-hw.c: Add support for all 4 FMA\n+\tvariants.  Check various conversions to/from float128.  Check\n+\tnegation.  Use {\\m...\\M} in the tests.\n+\t* gcc.target/powerpc/float128-hw2.c: New test for implicit\n+\t_Float128 math functions.\n+\t* gcc.target/powerpc/float128-hw3.c: New test for strict ansi mode\n+\tnot implicitly adding the _Float128 math functions.\n+\t* gcc.target/powerpc/float128-fma2.c: Delete, test is no longer\n+\tvalid.\n+\t* gcc.target/powerpc/float128-sqrt2.c: Likewise.\n+\n 2017-10-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/82692"}, {"sha": "e5f15aa2de94aa60abd636ed3b081774f00e5c29", "filename": "gcc/testsuite/gcc.target/powerpc/float128-fma2.c", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f563e0b55c78c53130d4082da6ba670ec1d9ba5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-fma2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f563e0b55c78c53130d4082da6ba670ec1d9ba5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-fma2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-fma2.c?ref=3f563e0b55c78c53130d4082da6ba670ec1d9ba5", "patch": "@@ -1,9 +0,0 @@\n-/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n-/* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mpower9-vector -mno-float128-hardware -O2\" } */\n-\n-__float128\n-xfma (__float128 a, __float128 b, __float128 c)\n-{\n-  return __builtin_fmaf128 (a, b, c); /* { dg-error \"ISA 3.0 IEEE 128-bit\" } */\n-}"}, {"sha": "929c6ddabe0e5e8bce0e29812b806a6274325269", "filename": "gcc/testsuite/gcc.target/powerpc/float128-hw.c", "status": "modified", "additions": 54, "deletions": 12, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw.c?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -2,16 +2,58 @@\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-options \"-mpower9-vector -O2\" } */\n \n-__float128 f128_add (__float128 a, __float128 b) { return a+b; }\n-__float128 f128_sub (__float128 a, __float128 b) { return a-b; }\n-__float128 f128_mul (__float128 a, __float128 b) { return a*b; }\n-__float128 f128_div (__float128 a, __float128 b) { return a/b; }\n-__float128 f128_fma (__float128 a, __float128 b, __float128 c) { return (a*b)+c; }\n-long f128_cmove (__float128 a, __float128 b, long c, long d) { return (a == b) ? c : d; }\n+#ifndef TYPE\n+#define TYPE _Float128\n+#endif\n+\n+/* Test the code generation of the various _Float128 operations.  */\n+TYPE f128_add (TYPE a, TYPE b) { return a+b; }\n+TYPE f128_sub (TYPE a, TYPE b) { return a-b; }\n+TYPE f128_mul (TYPE a, TYPE b) { return a*b; }\n+TYPE f128_div (TYPE a, TYPE b) { return a/b; }\n+TYPE f128_fma (TYPE a, TYPE b, TYPE c) { return (a*b)+c; }\n+TYPE f128_fms (TYPE a, TYPE b, TYPE c) { return (a*b)-c; }\n+TYPE f128_nfma (TYPE a, TYPE b, TYPE c) { return -((a*b)+c); }\n+TYPE f128_nfms (TYPE a, TYPE b, TYPE c) { return -((a*b)-c); }\n+TYPE f128_neg (TYPE a) { return -a; }\n+\n+long f128_cmove (TYPE a, TYPE b, long c, long d) { return (a == b) ? c : d; }\n+\n+double f128_to_double (TYPE a) { return (double)a; }\n+float f128_to_float (TYPE a) { return (float)a; }\n+long f128_to_long (TYPE a) { return (long)a; }\n+unsigned long f128_to_ulong (TYPE a) { return (unsigned long)a; }\n+int f128_to_int (TYPE a) { return (int)a; }\n+unsigned int f128_to_uint (TYPE a) { return (unsigned int)a; }\n+\n+TYPE double_to_f128 (double a) { return (TYPE)a; }\n+TYPE float_to_f128 (float a) { return (TYPE)a; }\n+TYPE long_to_f128 (long a) { return (TYPE)a; }\n+TYPE ulong_to_f128 (unsigned long a) { return (TYPE)a; }\n+TYPE int_to_f128 (int a) { return (TYPE)a; }\n+TYPE uint_to_f128 (unsigned int a) { return (TYPE)a; }\n+\n+/* { dg-final { scan-assembler     {\\mmfvsrd\\M}    } } */\n+/* { dg-final { scan-assembler     {\\mmfvsrwz\\M}   } } */\n+/* { dg-final { scan-assembler     {\\mmtvsrd\\M}    } } */\n+/* { dg-final { scan-assembler     {\\mmtvsrwa\\M}   } } */\n+/* { dg-final { scan-assembler \t   {\\mxscmpuqp\\M}  } } */\n+/* { dg-final { scan-assembler \t   {\\mxscvdpqp\\M}  } } */\n+/* { dg-final { scan-assembler \t   {\\mxscvqpdp\\M}  } } */\n+/* { dg-final { scan-assembler \t   {\\mxscvqpdpo\\M} } } */\n+/* { dg-final { scan-assembler \t   {\\mxscvqpsdz\\M} } } */\n+/* { dg-final { scan-assembler \t   {\\mxscvqpswz\\M} } } */\n+/* { dg-final { scan-assembler \t   {\\mxscvqpudz\\M} } } */\n+/* { dg-final { scan-assembler \t   {\\mxscvqpuwz\\M} } } */\n+/* { dg-final { scan-assembler \t   {\\mxscvsdqp\\M}  } } */\n+/* { dg-final { scan-assembler \t   {\\mxscvudqp\\M}  } } */\n+/* { dg-final { scan-assembler \t   {\\mxsdivqp\\M}   } } */\n+/* { dg-final { scan-assembler \t   {\\mxsmaddqp\\M}  } } */\n+/* { dg-final { scan-assembler \t   {\\mxsmsubqp\\M}  } } */\n+/* { dg-final { scan-assembler \t   {\\mxsmulqp\\M}   } } */\n+/* { dg-final { scan-assembler \t   {\\mxsnegqp\\M}   } } */\n+/* { dg-final { scan-assembler \t   {\\mxsnmaddqp\\M} } } */\n+/* { dg-final { scan-assembler \t   {\\mxsnmsubqp\\M} } } */\n+/* { dg-final { scan-assembler \t   {\\mxssubqp\\M}   } } */\n+/* { dg-final { scan-assembler-not {\\mbl\\M}        } } */\n \n-/* { dg-final { scan-assembler \"xsaddqp\"  } } */\n-/* { dg-final { scan-assembler \"xssubqp\"  } } */\n-/* { dg-final { scan-assembler \"xsmulqp\"  } } */\n-/* { dg-final { scan-assembler \"xsdivqp\"  } } */\n-/* { dg-final { scan-assembler \"xsmaddqp\" } } */\n-/* { dg-final { scan-assembler \"xscmpuqp\" } } */"}, {"sha": "f144360da3cba6fe5fe24d2afa466033eb5e6d37", "filename": "gcc/testsuite/gcc.target/powerpc/float128-hw2.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw2.c?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mpower9-vector -O2 -ffast-math -std=gnu11\" } */\n+\n+/* Test to make sure the compiler handles the standard _Float128 functions that\n+   have hardware support in ISA 3.0/power9.  */\n+\n+#define __STDC_WANT_IEC_60559_TYPES_EXT__ 1\n+\n+#ifndef __FP_FAST_FMAF128\n+#error \"__FP_FAST_FMAF128 should be defined.\"\n+#endif\n+\n+extern _Float128 copysignf128 (_Float128, _Float128);\n+extern _Float128 sqrtf128 (_Float128);\n+extern _Float128 fmaf128 (_Float128, _Float128, _Float128);\n+\n+_Float128\n+do_copysign (_Float128 a, _Float128 b)\n+{\n+  return copysignf128 (a, b);\n+}\n+\n+_Float128\n+do_sqrt (_Float128 a)\n+{\n+  return sqrtf128 (a);\n+}\n+\n+_Float128\n+do_fma (_Float128 a, _Float128 b, _Float128 c)\n+{\n+  return fmaf128 (a, b, c);\n+}\n+\n+_Float128\n+do_fms (_Float128 a, _Float128 b, _Float128 c)\n+{\n+  return fmaf128 (a, b, -c);\n+}\n+\n+_Float128\n+do_nfma (_Float128 a, _Float128 b, _Float128 c)\n+{\n+  return -fmaf128 (a, b, c);\n+}\n+\n+_Float128\n+do_nfms (_Float128 a, _Float128 b, _Float128 c)\n+{\n+  return -fmaf128 (a, b, -c);\n+}\n+\n+/* { dg-final { scan-assembler     {\\mxscpsgnqp\\M} } } */\n+/* { dg-final { scan-assembler     {\\mxssqrtqp\\M}  } } */\n+/* { dg-final { scan-assembler     {\\mxsmaddqp\\M}  } } */\n+/* { dg-final { scan-assembler     {\\mxsmsubqp\\M}  } } */\n+/* { dg-final { scan-assembler     {\\mxsnmaddqp\\M} } } */\n+/* { dg-final { scan-assembler     {\\mxsnmsubqp\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mbl\\M}        } } */"}, {"sha": "e63099dde08d1f9c240648d4f6efe3ce7a79ac4a", "filename": "gcc/testsuite/gcc.target/powerpc/float128-hw3.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw3.c?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mpower9-vector -O2 -ffast-math -std=c11\" } */\n+\n+/* Test to make sure the compiler calls the external function instead of doing\n+   the built-in processing for _Float128 functions that have hardware support\n+   in ISA 3.0/power9 if are in strict standards mode, where the <func>f128 name\n+   is not a synonym for __builtin_<func>f128.  */\n+\n+extern _Float128 copysignf128 (_Float128, _Float128);\n+extern _Float128 sqrtf128 (_Float128);\n+extern _Float128 fmaf128 (_Float128, _Float128, _Float128);\n+\n+_Float128\n+do_copysign (_Float128 a, _Float128 b)\n+{\n+  return copysignf128 (a, b);\n+}\n+\n+_Float128\n+do_sqrt (_Float128 a)\n+{\n+  return sqrtf128 (a);\n+}\n+\n+_Float128\n+do_fma (_Float128 a, _Float128 b, _Float128 c)\n+{\n+  return fmaf128 (a, b, c);\n+}\n+\n+_Float128\n+do_fms (_Float128 a, _Float128 b, _Float128 c)\n+{\n+  return fmaf128 (a, b, -c);\n+}\n+\n+_Float128\n+do_nfma (_Float128 a, _Float128 b, _Float128 c)\n+{\n+  return -fmaf128 (a, b, c);\n+}\n+\n+_Float128\n+do_nfms (_Float128 a, _Float128 b, _Float128 c)\n+{\n+  return -fmaf128 (a, b, -c);\n+}\n+\n+/* { dg-final { scan-assembler-not   {\\mxscpsgnqp\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mxssqrtqp\\M}  } } */\n+/* { dg-final { scan-assembler-not   {\\mxsmaddqp\\M}  } } */\n+/* { dg-final { scan-assembler-not   {\\mxsmsubqp\\M}  } } */\n+/* { dg-final { scan-assembler-not   {\\mxsnmaddqp\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mxsnmsubqp\\M} } } */\n+/* { dg-final { scan-assembler-times {\\mbl\\M} 6      } } */"}, {"sha": "94527ebbd989dd4467c1645f3ea5476050381a29", "filename": "gcc/testsuite/gcc.target/powerpc/float128-sqrt2.c", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f563e0b55c78c53130d4082da6ba670ec1d9ba5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-sqrt2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f563e0b55c78c53130d4082da6ba670ec1d9ba5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-sqrt2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-sqrt2.c?ref=3f563e0b55c78c53130d4082da6ba670ec1d9ba5", "patch": "@@ -1,9 +0,0 @@\n-/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n-/* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mpower9-vector -mno-float128-hardware -O2\" } */\n-\n-__float128\n-xsqrt (__float128 a)\n-{\n-  return __builtin_sqrtf128 (a); /* { dg-error \"ISA 3.0 IEEE 128-bit\" } */\n-}"}, {"sha": "0c8fcf010b06531010404a74a18a2a802b1e0be5", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -314,6 +314,7 @@ can_test_argument_range (gcall *call)\n     CASE_FLT_FN (BUILT_IN_POW10):\n     /* Sqrt.  */\n     CASE_FLT_FN (BUILT_IN_SQRT):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_SQRT):\n       return check_builtin_call (call);\n     /* Special one: two argument pow.  */\n     case BUILT_IN_POW:\n@@ -342,6 +343,7 @@ edom_only_function (gcall *call)\n     CASE_FLT_FN (BUILT_IN_SIGNIFICAND):\n     CASE_FLT_FN (BUILT_IN_SIN):\n     CASE_FLT_FN (BUILT_IN_SQRT):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_SQRT):\n     CASE_FLT_FN (BUILT_IN_FMOD):\n     CASE_FLT_FN (BUILT_IN_REMAINDER):\n       return true;\n@@ -703,6 +705,7 @@ get_no_error_domain (enum built_in_function fnc)\n                          308, true, false);\n     /* sqrt: [0, +inf)  */\n     CASE_FLT_FN (BUILT_IN_SQRT):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_SQRT):\n       return get_domain (0, true, true,\n                          0, false, false);\n     default:"}, {"sha": "a87040a91e17f022a5a19ec4b75a9099e205d9ef", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -515,6 +515,7 @@ internal_fn_reciprocal (gcall *call)\n   switch (gimple_call_combined_fn (call))\n     {\n     CASE_CFN_SQRT:\n+    CASE_CFN_SQRT_FN:\n       ifn = IFN_RSQRT;\n       break;\n "}, {"sha": "5e8cac69d5d588bdef43b89d2e1ea5df6b964aff", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5fd23a481f510528e00f4c988ed0e6a71218c2/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=ee5fd23a481f510528e00f4c988ed0e6a71218c2", "patch": "@@ -5625,6 +5625,7 @@ attempt_builtin_copysign (vec<operand_entry *> *ops)\n \t      switch (gimple_call_combined_fn (old_call))\n \t\t{\n \t\tCASE_CFN_COPYSIGN:\n+\t\tCASE_CFN_COPYSIGN_FN:\n \t\t  arg0 = gimple_call_arg (old_call, 0);\n \t\t  arg1 = gimple_call_arg (old_call, 1);\n \t\t  /* The first argument of copysign must be a constant,"}]}