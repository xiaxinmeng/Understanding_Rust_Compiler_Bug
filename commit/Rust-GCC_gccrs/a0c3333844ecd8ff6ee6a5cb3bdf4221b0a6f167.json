{"sha": "a0c3333844ecd8ff6ee6a5cb3bdf4221b0a6f167", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBjMzMzMzg0NGVjZDhmZjZlZTZhNWNiM2JkZjQyMjFiMGE2ZjE2Nw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-05-22T10:51:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-05-22T10:51:28Z"}, "message": "alias.c (record_component_aliases): New function.\n\n\t* alias.c (record_component_aliases): New function.\n\t* tree.h: Clean up some declarations and comments.\n\t(record_component_aliases): New declaration.\n\t* tree.c (get_alias_set): If type and has alias set, use it.\n\nFrom-SVN: r34078", "tree": {"sha": "5a971ff1a41b82727bc3c9c1a8d6d1a9dacb842f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a971ff1a41b82727bc3c9c1a8d6d1a9dacb842f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0c3333844ecd8ff6ee6a5cb3bdf4221b0a6f167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c3333844ecd8ff6ee6a5cb3bdf4221b0a6f167", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0c3333844ecd8ff6ee6a5cb3bdf4221b0a6f167", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c3333844ecd8ff6ee6a5cb3bdf4221b0a6f167/comments", "author": null, "committer": null, "parents": [{"sha": "0dab8f8aa3ba781aeb8d6b6c49afe51e9dde78fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dab8f8aa3ba781aeb8d6b6c49afe51e9dde78fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dab8f8aa3ba781aeb8d6b6c49afe51e9dde78fa"}], "stats": {"total": 96, "additions": 74, "deletions": 22}, "files": [{"sha": "ea4f5175d7c9713b13ae577aabbefb2b714a2945", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c3333844ecd8ff6ee6a5cb3bdf4221b0a6f167/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c3333844ecd8ff6ee6a5cb3bdf4221b0a6f167/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0c3333844ecd8ff6ee6a5cb3bdf4221b0a6f167", "patch": "@@ -1,3 +1,10 @@\n+Mon May 22 06:57:49 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* alias.c (record_component_aliases): New function.\n+\t* tree.h: Clean up some declarations and comments.\n+\t(record_component_aliases): New declaration.\n+\t* tree.c (get_alias_set): If type and has alias set, use it.\n+\n 2000-05-22  Richard Henderson  <rth@cygnus.com>\n \n \t* simplify-rtx.c (simplify_ternary_operation): Try to simplify"}, {"sha": "9d3ff8bca0e5e02644e90f19cfc2cb3bc31cb036", "filename": "gcc/alias.c", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c3333844ecd8ff6ee6a5cb3bdf4221b0a6f167/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c3333844ecd8ff6ee6a5cb3bdf4221b0a6f167/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=a0c3333844ecd8ff6ee6a5cb3bdf4221b0a6f167", "patch": "@@ -271,8 +271,7 @@ insert_subset_children (node, data)\n    not vice versa.  For example, in C, a store to an `int' can alias a\n    structure containing an `int', but not vice versa.  Here, the\n    structure would be the SUPERSET and `int' the SUBSET.  This\n-   function should be called only once per SUPERSET/SUBSET pair.  At\n-   present any given alias set may only be a subset of one superset.  \n+   function should be called only once per SUPERSET/SUBSET pair. \n \n    It is illegal for SUPERSET to be zero; everything is implicitly a\n    subset of alias set zero.  */\n@@ -317,6 +316,48 @@ record_alias_subset (superset, subset)\n \t\t     (splay_tree_key) subset, 0);\n }\n \n+/* Record that component types of TYPE, if any, are part of that type for\n+   aliasing purposes.  For record types, we only record component types\n+   for fields that are marked addressable.  For array types, we always\n+   record the component types, so the front end should not call this\n+   function if the individual component aren't addressable.  */\n+\n+void\n+record_component_aliases (type)\n+     tree type;\n+{\n+  int superset = get_alias_set (type);\n+  int subset;\n+  tree field;\n+\n+  if (superset == 0)\n+    return;\n+\n+  switch (TREE_CODE (type))\n+    {\n+    case ARRAY_TYPE:\n+    case COMPLEX_TYPE:\n+      subset = get_alias_set (TREE_TYPE (type));\n+      if (subset != 0)\n+\trecord_alias_subset (superset, subset);\n+      break;\n+\n+    case RECORD_TYPE:\n+    case UNION_TYPE:\n+    case QUAL_UNION_TYPE:\n+      for (field = TYPE_FIELDS (type); field != 0; field = TREE_CHAIN (field))\n+\t{\n+\t  subset = get_alias_set (TREE_TYPE (field));\n+\t  if (TREE_ADDRESSABLE (field) && subset != 0 && subset != superset)\n+\t    record_alias_subset (superset, subset);\n+\t}\n+      break;\n+\n+    default:\n+      break;\n+    }\n+}\n+\n /* Inside SRC, the source of a SET, find a base address.  */\n \n static rtx"}, {"sha": "a62e13083042ed4959725cc08d9e1e55479fa896", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c3333844ecd8ff6ee6a5cb3bdf4221b0a6f167/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c3333844ecd8ff6ee6a5cb3bdf4221b0a6f167/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a0c3333844ecd8ff6ee6a5cb3bdf4221b0a6f167", "patch": "@@ -5621,10 +5621,15 @@ int\n get_alias_set (t)\n      tree t;\n {\n+  /* If we're not doing any lanaguage-specific alias analysis, just\n+     assume everything aliases everything else.  */\n   if (! flag_strict_aliasing || lang_get_alias_set == 0)\n-    /* If we're not doing any lanaguage-specific alias analysis, just\n-       assume everything aliases everything else.  */\n     return 0;\n+\n+  /* If this is a type with a known alias set, return it since this must\n+     be the correct thing to do.  */\n+  else if (TYPE_P (t) && TYPE_ALIAS_SET_KNOWN_P (t))\n+    return TYPE_ALIAS_SET (t);\n   else\n     return (*lang_get_alias_set) (t);\n }"}, {"sha": "1257d0adf45c3dc567d5ad4dfaf5713efc4e159f", "filename": "gcc/tree.h", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c3333844ecd8ff6ee6a5cb3bdf4221b0a6f167/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c3333844ecd8ff6ee6a5cb3bdf4221b0a6f167/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a0c3333844ecd8ff6ee6a5cb3bdf4221b0a6f167", "patch": "@@ -2605,18 +2605,17 @@ extern void rest_of_type_compilation PARAMS ((tree, int));\n extern void push_obstacks_nochange PARAMS ((void));\n \n extern void permanent_allocation PARAMS ((int));\n-\n extern void push_momentary PARAMS ((void));\n-\n extern void clear_momentary PARAMS ((void));\n-\n extern void pop_momentary PARAMS ((void));\n-\n extern void end_temporary_allocation PARAMS ((void));\n \n /* Pop the obstack selection stack.  */\n extern void pop_obstacks PARAMS ((void));\n \n+/* In alias.c */\n+void record_component_aliases\t\tPARAMS ((tree));\n+\n /* In tree.c */\n extern int really_constant_p\t\tPARAMS ((tree));\n extern void push_obstacks\t\tPARAMS ((struct obstack *,\n@@ -2654,10 +2653,12 @@ extern void dump_tree_statistics\tPARAMS ((void));\n extern void print_obstack_statistics\tPARAMS ((const char *,\n \t\t\t\t\t\tstruct obstack *));\n #ifdef BUFSIZ\n-extern void print_obstack_name\t\tPARAMS ((char *, FILE *, const char *));\n+extern void print_obstack_name\t\tPARAMS ((char *, FILE *,\n+\t\t\t\t\t\t const char *));\n #endif\n extern void expand_function_end\t\tPARAMS ((const char *, int, int));\n extern void expand_function_start\tPARAMS ((tree, int));\n+\n extern int real_onep\t\t\tPARAMS ((tree));\n extern int real_twop\t\t\tPARAMS ((tree));\n extern void start_identifier_warnings\tPARAMS ((void));\n@@ -2707,8 +2708,10 @@ extern void print_rtl\t\t\tPARAMS ((FILE *, struct rtx_def *));\n /* In print-tree.c */\n extern void debug_tree\t\t\tPARAMS ((tree));\n #ifdef BUFSIZ\n-extern void print_node\t\t\tPARAMS ((FILE *, const char *, tree, int));\n-extern void print_node_brief\t\tPARAMS ((FILE *, const char *, tree, int));\n+extern void print_node\t\t\tPARAMS ((FILE *, const char *, tree,\n+\t\t\t\t\t\t int));\n+extern void print_node_brief\t\tPARAMS ((FILE *, const char *, tree,\n+\t\t\t\t\t\t int));\n extern void indent_to\t\t\tPARAMS ((FILE *, int));\n #endif\n \n@@ -2718,8 +2721,10 @@ extern int apply_args_register_offset\t\tPARAMS ((int));\n extern struct rtx_def *expand_builtin_return_addr\n \tPARAMS ((enum built_in_function, int, struct rtx_def *));\n extern void do_pending_stack_adjust\t\tPARAMS ((void));\n-extern struct rtx_def *expand_assignment\tPARAMS ((tree, tree, int, int));\n-extern struct rtx_def *store_expr\t\tPARAMS ((tree, struct rtx_def *,\n+extern struct rtx_def *expand_assignment\tPARAMS ((tree, tree, int,\n+\t\t\t\t\t\t\t int));\n+extern struct rtx_def *store_expr\t\tPARAMS ((tree,\n+\t\t\t\t\t\t\t struct rtx_def *,\n \t\t\t\t\t\t\tint));\n extern void check_max_integer_computation_mode\tPARAMS ((tree));\n \n@@ -2732,21 +2737,15 @@ extern struct rtx_def *emit_line_note_force\tPARAMS ((const char *, int));\n \n /* In calls.c */\n \n-/* Flags used by special_function_p.  */\n extern int setjmp_call_p\t\tPARAMS ((tree));\n \n-/* In c-typeck.c */\n+/* In front end.  */\n+\n extern int mark_addressable\t\tPARAMS ((tree));\n extern void incomplete_type_error\tPARAMS ((tree, tree));\n-\n-/* In c-lang.c */\n extern void print_lang_statistics\tPARAMS ((void));\n-\n-/* In c-common.c */\n extern tree truthvalue_conversion\tPARAMS ((tree));\n extern void split_specs_attrs\t\tPARAMS ((tree, tree *, tree *));\n-\n-/* In c-decl.c */\n #ifdef BUFSIZ\n extern void print_lang_decl\t\tPARAMS ((FILE *, tree, int));\n extern void print_lang_type\t\tPARAMS ((FILE *, tree, int));\n@@ -2762,7 +2761,7 @@ extern void set_decl_abstract_flags\tPARAMS ((tree, int));\n extern void output_inline_function\tPARAMS ((tree));\n extern void set_decl_origin_self\tPARAMS ((tree));\n \n-/* In c-lex.c */\n+/* In front end.  */\n extern void set_yydebug\t\t\tPARAMS ((int));\n \n /* In stor-layout.c */"}]}