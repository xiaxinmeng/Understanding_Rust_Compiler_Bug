{"sha": "c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJlZmRhMGRlZTA4MmFlM2Y1N2JkYjJjN2IxYWUyZGJmMDdkZGZjZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-04-20T19:30:55Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-04-20T19:30:55Z"}, "message": "trans.c (unchecked_conversion_lhs_nop): New predicate.\n\n\t* gcc-interface/trans.c (unchecked_conversion_lhs_nop): New predicate.\n\t(gnat_to_gnu) <N_Unchecked_Type_Conversion>: Return the expression\n\tif the conversion is on the LHS of an assignment and a no-op.\n\t<all> Do not convert the result to the result type if the Parent\n\tnode is such a conversion.\n\nFrom-SVN: r146450", "tree": {"sha": "44ac2e6e61907d4bb321cf154de1771ed14678cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44ac2e6e61907d4bb321cf154de1771ed14678cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd/comments", "author": null, "committer": null, "parents": [{"sha": "a916d97fc0c647034e9330b00349ad8145bf3157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a916d97fc0c647034e9330b00349ad8145bf3157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a916d97fc0c647034e9330b00349ad8145bf3157"}], "stats": {"total": 123, "additions": 122, "deletions": 1}, "files": [{"sha": "a03636aeeb85599f7f7553e97fe1410aa629922e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd", "patch": "@@ -1,3 +1,11 @@\n+2009-04-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (unchecked_conversion_lhs_nop): New predicate.\n+\t(gnat_to_gnu) <N_Unchecked_Type_Conversion>: Return the expression\n+\tif the conversion is on the LHS of an assignment and a no-op.\n+\t<all> Do not convert the result to the result type if the Parent\n+\tnode is such a conversion.\n+\n 2009-04-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/ada-tree.h (DECL_HAS_REP_P): Delete."}, {"sha": "9558302c02e2c1b8d27d2eb1e269bfd69155a302", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd", "patch": "@@ -3362,6 +3362,43 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n   invalidate_global_renaming_pointers ();\n }\n \f\n+/* Return whether GNAT_NODE, an unchecked type conversion, is on the LHS\n+   of an assignment and a no-op as far as gigi is concerned.  */\n+\n+static bool\n+unchecked_conversion_lhs_nop (Node_Id gnat_node)\n+{\n+  Entity_Id from_type, to_type;\n+\n+  /* The conversion must be on the LHS of an assignment.  Otherwise, even\n+     if the conversion was essentially a no-op, it could de facto ensure\n+     type consistency and this should be preserved.  */\n+  if (!(Nkind (Parent (gnat_node)) == N_Assignment_Statement\n+\t&& Name (Parent (gnat_node)) == gnat_node))\n+    return false;\n+\n+  from_type = Etype (Expression (gnat_node));\n+\n+  /* We're interested in artificial conversions generated by the front-end\n+     to make private types explicit, e.g. in Expand_Assign_Array.  */\n+  if (!Is_Private_Type (from_type))\n+    return false;\n+\n+  from_type = Underlying_Type (from_type);\n+  to_type = Etype (gnat_node);\n+\n+  /* The direct conversion to the underlying type is a no-op.  */\n+  if (to_type == from_type)\n+    return true;\n+\n+  /* For an array type, the conversion to the PAT is a no-op.  */\n+  if (Ekind (from_type) == E_Array_Subtype\n+      && to_type == Packed_Array_Type (from_type))\n+    return true;\n+\n+  return false;\n+}\n+\n /* This function is the driver of the GNAT to GCC tree transformation\n    process.  It is the entry point of the tree transformer.  GNAT_NODE is the\n    root of some GNAT tree.  Return the root of the corresponding GCC tree.\n@@ -4040,6 +4077,14 @@ gnat_to_gnu (Node_Id gnat_node)\n \n     case N_Unchecked_Type_Conversion:\n       gnu_result = gnat_to_gnu (Expression (gnat_node));\n+\n+      /* Skip further processing if the conversion is deemed a no-op.  */\n+      if (unchecked_conversion_lhs_nop (gnat_node))\n+\t{\n+\t  gnu_result_type = TREE_TYPE (gnu_result);\n+\t  break;\n+\t}\n+\n       gnu_result_type = get_unpadded_type (Etype (gnat_node));\n \n       /* If the result is a pointer type, see if we are improperly\n@@ -5292,7 +5337,8 @@ gnat_to_gnu (Node_Id gnat_node)\n        1. If this is the Name of an assignment statement or a parameter of\n \t  a procedure call, return the result almost unmodified since the\n \t  RHS will have to be converted to our type in that case, unless\n-\t  the result type has a simpler size.   Similarly, don't convert\n+\t  the result type has a simpler size.  Likewise if there is just\n+\t  a no-op unchecked conversion in-between.  Similarly, don't convert\n \t  integral types that are the operands of an unchecked conversion\n \t  since we need to ignore those conversions (for 'Valid).\n \n@@ -5315,6 +5361,8 @@ gnat_to_gnu (Node_Id gnat_node)\n   if (Present (Parent (gnat_node))\n       && ((Nkind (Parent (gnat_node)) == N_Assignment_Statement\n \t   && Name (Parent (gnat_node)) == gnat_node)\n+\t  || (Nkind (Parent (gnat_node)) == N_Unchecked_Type_Conversion\n+\t      && unchecked_conversion_lhs_nop (Parent (gnat_node)))\n \t  || (Nkind (Parent (gnat_node)) == N_Procedure_Call_Statement\n \t      && Name (Parent (gnat_node)) != gnat_node)\n \t  || Nkind (Parent (gnat_node)) == N_Parameter_Association"}, {"sha": "8f0516dbdc5b0163d00b5093fcd6f8481ecb87fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd", "patch": "@@ -1,3 +1,8 @@\n+2009-04-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/pack13.ad[sb]: New test.\n+\t* gnat.dg/pack13_pkg.ads: New helper.\n+\n 2009-04-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/discr11.ad[sb]: New test."}, {"sha": "dd9cb09cf7b6051af4738fe652b6d2ef31596f96", "filename": "gcc/testsuite/gnat.dg/pack13.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd/gcc%2Ftestsuite%2Fgnat.dg%2Fpack13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd/gcc%2Ftestsuite%2Fgnat.dg%2Fpack13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack13.adb?ref=c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd", "patch": "@@ -0,0 +1,10 @@\n+-- [ dg-do compile }\n+\n+package body Pack13 is\n+\n+  procedure Set (Myself : Object_Ptr; The_Data : Thirty_Two_Bits.Object) is\n+  begin\n+    Myself.Something.Data_1 := The_Data;\n+  end;\n+\n+end Pack13;"}, {"sha": "1836311e76342f7ce950471b5f5d57881a40de42", "filename": "gcc/testsuite/gnat.dg/pack13.ads", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd/gcc%2Ftestsuite%2Fgnat.dg%2Fpack13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd/gcc%2Ftestsuite%2Fgnat.dg%2Fpack13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack13.ads?ref=c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd", "patch": "@@ -0,0 +1,33 @@\n+with Pack13_Pkg;\n+\n+package Pack13 is\n+\n+  package Four_Bits is new Pack13_Pkg (4);\n+  package Thirty_Two_Bits is new Pack13_Pkg (32);\n+\n+  type Object is private;\n+  type Object_Ptr is access all Object;\n+\n+  procedure Set (Myself : Object_Ptr; The_Data : Thirty_Two_Bits.Object);\n+\n+private\n+\n+  type Some_Record is record\n+    Data_1     : Thirty_Two_Bits.Object;\n+    Data_2     : Thirty_Two_Bits.Object;\n+    Small_Data : Four_Bits.Object;\n+  end record;\n+  for Some_Record use record\n+    Data_1 at 0 range 0 .. 31;\n+    Data_2 at 4 range 0 .. 31;\n+    Small_Data at 8 range 0 .. 3;\n+  end record;\n+\n+  type Object is record\n+    Something : Some_Record;\n+  end record;\n+  for Object use record\n+    Something at 0 range 0 .. 67;\n+  end record;\n+\n+end Pack13;"}, {"sha": "afe8bec8f793499f6d205c259ea7521352f22d99", "filename": "gcc/testsuite/gnat.dg/pack13_pkg.ads", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd/gcc%2Ftestsuite%2Fgnat.dg%2Fpack13_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd/gcc%2Ftestsuite%2Fgnat.dg%2Fpack13_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack13_pkg.ads?ref=c2efda0dee082ae3f57bdb2c7b1ae2dbf07ddfcd", "patch": "@@ -0,0 +1,17 @@\n+generic\n+\n+  Size : Positive;\n+\n+package Pack13_Pkg is\n+\n+  type Object is private;\n+\n+private\n+\n+  type Bit is range 0 .. 1;\n+  for Bit'size use 1;\n+\n+  type Object is array (1 .. Size) of Bit;\n+  pragma Pack (Object);\n+\n+end Pack13_Pkg;"}]}