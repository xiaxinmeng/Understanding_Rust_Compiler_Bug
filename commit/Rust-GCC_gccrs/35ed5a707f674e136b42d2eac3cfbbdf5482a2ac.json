{"sha": "35ed5a707f674e136b42d2eac3cfbbdf5482a2ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVlZDVhNzA3ZjY3NGUxMzZiNDJkMmVhYzNjZmJiZGY1NDgyYTJhYw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-08-21T23:38:47Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-08-21T23:38:47Z"}, "message": "sh.md (cmpeqdi_t, [...]): Convert to multi-line asm output strings.\n\n\t* config/sh/sh.md (cmpeqdi_t, cmpgtdi_t, cmpgedi_t, cmpgeudi_t,\n\tcmpgtudi_t, *movsicc_t_false, *movsicc_t_true, divsi_inv20, negsi_cond,\n\ttruncdihi2, ic_invalidate_line_i, ic_invalidate_line_sh4a,\n\tic_invalidate_line_media, movdf_i4, calli_pcrel, call_valuei,\n\tcall_valuei_pcrel, sibcalli_pcrel, sibcall_compact,\n\tsibcall_valuei_pcrel, sibcall_value_compact, casesi_worker_1,\n\tcasesi_worker_2, bandreg_m2a, borreg_m2a, bxorreg_m2a, sp_switch_1,\n\tsp_switch_2, stack_protect_set_si, stack_protect_set_si_media,\n\tstack_protect_set_di_media, stack_protect_test_si,\n\tstack_protect_test_si_media, stack_protect_test_di_media): Convert to\n\tmulti-line asm output strings.\n\t(divsi_inv_qitable, divsi_inv_hitable): Use single-alternative asm\n\toutput.\n\t(*andsi3_bclr, rotldi3_mextr, rotrdi3_mextr, calli, call_valuei_tbr_rel,\n\tmovml_push_banked, movml_pop_banked, bclr_m2a, bclrmem_m2a, bset_m2a,\n\tbsetmem_m2a, bst_m2a, bld_m2a, bldsign_m2a, bld_reg, *bld_regqi,\n\tband_m2a, bor_m2a, bxor_m2a, mextr_rl, *mextr_lr, ): Use tab char\n\tinstead of '\\\\t'.\n\t(iordi3): Use braced string.\n\t(*movsi_pop): Use tab chars instead of spaces.\n\nFrom-SVN: r190580", "tree": {"sha": "b15ff2326a75829370747f9e30854b5ec9c79b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b15ff2326a75829370747f9e30854b5ec9c79b2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35ed5a707f674e136b42d2eac3cfbbdf5482a2ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35ed5a707f674e136b42d2eac3cfbbdf5482a2ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35ed5a707f674e136b42d2eac3cfbbdf5482a2ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35ed5a707f674e136b42d2eac3cfbbdf5482a2ac/comments", "author": null, "committer": null, "parents": [{"sha": "082ea1dcd5541bcbda512a1ba758997e54e3ae26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/082ea1dcd5541bcbda512a1ba758997e54e3ae26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/082ea1dcd5541bcbda512a1ba758997e54e3ae26"}], "stats": {"total": 485, "additions": 351, "deletions": 134}, "files": [{"sha": "773537a3b4a1c7d94fac6608ffda7fbd5c9dc758", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ed5a707f674e136b42d2eac3cfbbdf5482a2ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ed5a707f674e136b42d2eac3cfbbdf5482a2ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35ed5a707f674e136b42d2eac3cfbbdf5482a2ac", "patch": "@@ -1,3 +1,26 @@\n+2012-08-21  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.md (cmpeqdi_t, cmpgtdi_t, cmpgedi_t, cmpgeudi_t,\n+\tcmpgtudi_t, *movsicc_t_false, *movsicc_t_true, divsi_inv20, negsi_cond,\n+\ttruncdihi2, ic_invalidate_line_i, ic_invalidate_line_sh4a,\n+\tic_invalidate_line_media, movdf_i4, calli_pcrel, call_valuei,\n+\tcall_valuei_pcrel, sibcalli_pcrel, sibcall_compact,\n+\tsibcall_valuei_pcrel, sibcall_value_compact, casesi_worker_1,\n+\tcasesi_worker_2, bandreg_m2a, borreg_m2a, bxorreg_m2a, sp_switch_1,\n+\tsp_switch_2, stack_protect_set_si, stack_protect_set_si_media,\n+\tstack_protect_set_di_media, stack_protect_test_si,\n+\tstack_protect_test_si_media, stack_protect_test_di_media): Convert to\n+\tmulti-line asm output strings.\n+\t(divsi_inv_qitable, divsi_inv_hitable): Use single-alternative asm\n+\toutput.\n+\t(*andsi3_bclr, rotldi3_mextr, rotrdi3_mextr, calli, call_valuei_tbr_rel,\n+\tmovml_push_banked, movml_pop_banked, bclr_m2a, bclrmem_m2a, bset_m2a,\n+\tbsetmem_m2a, bst_m2a, bld_m2a, bldsign_m2a, bld_reg, *bld_regqi,\n+\tband_m2a, bor_m2a, bxor_m2a, mextr_rl, *mextr_lr, ): Use tab char\n+\tinstead of '\\\\t'.\n+\t(iordi3): Use braced string.\n+\t(*movsi_pop): Use tab chars instead of spaces.\n+\n 2012-08-21  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/39423"}, {"sha": "4402df8577778687344f89f3d8f1405f4eba0d1f", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 328, "deletions": 134, "changes": 462, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ed5a707f674e136b42d2eac3cfbbdf5482a2ac/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ed5a707f674e136b42d2eac3cfbbdf5482a2ac/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=35ed5a707f674e136b42d2eac3cfbbdf5482a2ac", "patch": "@@ -541,12 +541,10 @@\n \n ;; On the SH and SH2, the rte instruction reads the return pc from the stack,\n ;; and thus we can't put a pop instruction in its delay slot.\n-;; ??? On the SH3, the rte instruction does not use the stack, so a pop\n+;; On the SH3 and SH4, the rte instruction does not use the stack, so a pop\n ;; instruction can go in the delay slot.\n-\n ;; Since a normal return (rts) implicitly uses the PR register,\n ;; we can't allow PR register loads in an rts delay slot.\n-\n (define_delay\n   (eq_attr \"type\" \"return\")\n   [(and (eq_attr \"in_delay_slot\" \"yes\")\n@@ -1154,9 +1152,21 @@\n \t(eq:SI (match_operand:DI 0 \"arith_reg_operand\" \"r,r\")\n \t       (match_operand:DI 1 \"arith_reg_or_0_operand\" \"N,r\")))]\n   \"TARGET_SH1\"\n-  \"@\n-\ttst\t%S0,%S0\\;bf\t%,Ldi%=\\;tst\t%R0,%R0\\\\n%,Ldi%=:\n-\tcmp/eq\t%S1,%S0\\;bf\t%,Ldi%=\\;cmp/eq\t%R1,%R0\\\\n%,Ldi%=:\"\n+{\n+  static const char* alt[] =\n+  {\n+       \"tst\t%S0,%S0\"\t\"\\n\"\n+    \"\tbf\t0f\"\t\t\"\\n\"\n+    \"\ttst\t%R0,%R0\"\t\"\\n\"\n+    \"0:\",\n+\n+       \"cmp/eq\t%S1,%S0\"\t\"\\n\"\n+    \"\tbf\t0f\"\t\t\"\\n\"\n+    \"\tcmp/eq\t%R1,%R0\"\t\"\\n\"\n+    \"0:\"\n+  };\n+  return alt[which_alternative];\n+}\n   [(set_attr \"length\" \"6\")\n    (set_attr \"type\" \"arith3b\")])\n \n@@ -1189,9 +1199,23 @@\n \t(gt:SI (match_operand:DI 0 \"arith_reg_operand\" \"r,r\")\n \t       (match_operand:DI 1 \"arith_reg_or_0_operand\" \"r,N\")))]\n   \"TARGET_SH2\"\n-  \"@\n-\tcmp/eq\\\\t%S1,%S0\\;bf{.|/}s\\\\t%,Ldi%=\\;cmp/gt\\\\t%S1,%S0\\;cmp/hi\\\\t%R1,%R0\\\\n%,Ldi%=:\n-\ttst\\\\t%S0,%S0\\;bf{.|/}s\\\\t%,Ldi%=\\;cmp/pl\\\\t%S0\\;cmp/hi\\\\t%S0,%R0\\\\n%,Ldi%=:\"\n+{\n+  static const char* alt[] =\n+  {\n+       \"cmp/eq\t%S1,%S0\"\t\"\\n\"\n+    \"\tbf{.|/}s\t0f\"\t\"\\n\"\n+    \"\tcmp/gt\t%S1,%S0\"\t\"\\n\"\n+    \"\tcmp/hi\t%R1,%R0\"\t\"\\n\"\n+    \"0:\",\n+\n+        \"tst\t%S0,%S0\"\t\"\\n\"\n+    \"\tbf{.|/}s\t0f\"\t\"\\n\"\n+    \"\tcmp/pl\t%S0\"\t\t\"\\n\"\n+    \"\tcmp/hi\t%S0,%R0\"\t\"\\n\"\n+    \"0:\"\n+  };\n+  return alt[which_alternative];\n+}\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"arith3\")])\n \n@@ -1200,9 +1224,19 @@\n \t(ge:SI (match_operand:DI 0 \"arith_reg_operand\" \"r,r\")\n \t       (match_operand:DI 1 \"arith_reg_or_0_operand\" \"r,N\")))]\n   \"TARGET_SH2\"\n-  \"@\n-\tcmp/eq\\\\t%S1,%S0\\;bf{.|/}s\\\\t%,Ldi%=\\;cmp/ge\\\\t%S1,%S0\\;cmp/hs\\\\t%R1,%R0\\\\n%,Ldi%=:\n-\tcmp/pz\\\\t%S0\"\n+{\n+  static const char* alt[] =\n+  {\n+       \"cmp/eq\t%S1,%S0\"\t\"\\n\"\n+    \"\tbf{.|/}s\t0f\"\t\"\\n\"\n+    \"\tcmp/ge\t%S1,%S0\"\t\"\\n\"\n+    \"\tcmp/hs\t%R1,%R0\"\t\"\\n\"\n+    \"0:\",\n+\n+       \"cmp/pz\t%S0\"\n+  };\n+  return alt[which_alternative];\n+}\n   [(set_attr \"length\" \"8,2\")\n    (set_attr \"type\" \"arith3,mt_group\")])\n \f\n@@ -1215,7 +1249,13 @@\n \t(geu:SI (match_operand:DI 0 \"arith_reg_operand\" \"r\")\n \t\t(match_operand:DI 1 \"arith_reg_operand\" \"r\")))]\n   \"TARGET_SH2\"\n-  \"cmp/eq\\\\t%S1,%S0\\;bf{.|/}s\\\\t%,Ldi%=\\;cmp/hs\\\\t%S1,%S0\\;cmp/hs\\\\t%R1,%R0\\\\n%,Ldi%=:\"\n+{\n+  return       \"cmp/eq\t%S1,%S0\"\t\"\\n\"\n+\t \"\tbf{.|/}s\t0f\"\t\"\\n\"\n+\t \"\tcmp/hs\t%S1,%S0\"\t\"\\n\"\n+\t \"\tcmp/hs\t%R1,%R0\"\t\"\\n\"\n+\t \"0:\";\n+}\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"arith3\")])\n \n@@ -1224,7 +1264,13 @@\n \t(gtu:SI (match_operand:DI 0 \"arith_reg_operand\" \"r\")\n \t\t(match_operand:DI 1 \"arith_reg_operand\" \"r\")))]\n   \"TARGET_SH2\"\n-  \"cmp/eq\\\\t%S1,%S0\\;bf{.|/}s\\\\t%,Ldi%=\\;cmp/hi\\\\t%S1,%S0\\;cmp/hi\\\\t%R1,%R0\\\\n%,Ldi%=:\"\n+{\n+  return       \"cmp/eq\t%S1,%S0\"\t\"\\n\"\n+\t \"\tbf{.|/}s\t0f\"\t\"\\n\"\n+\t \"\tcmp/hi\t%S1,%S0\"\t\"\\n\"\n+\t \"\tcmp/hi\t%R1,%R0\"\t\"\\n\"\n+\t \"0:\";\n+}\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"arith3\")])\n \n@@ -1276,7 +1322,7 @@\n   \"cmpgtu\t%N1, %N2, %0\"\n   [(set_attr \"type\" \"cmp_media\")])\n \n-; These two patterns are for combine.\n+; This pattern is for combine.\n (define_insn \"*cmpne0sisi_media\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ne:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\") (const_int 0)))]\n@@ -1527,7 +1573,11 @@\n    && (arith_reg_operand (operands[1], SImode)\n        || (immediate_operand (operands[1], SImode)\n \t   && satisfies_constraint_I08 (operands[1])))\"\n-  \"bt\t0f\\;mov\t%1,%0\\\\n0:\"\n+{\n+  return       \"bt\t0f\"\t\"\\n\"\n+\t \"\tmov\t%1,%0\"\t\"\\n\"\n+\t \"0:\";\n+}\n   [(set_attr \"type\" \"mt_group,arith\") ;; poor approximation\n    (set_attr \"length\" \"4\")])\n \n@@ -1540,7 +1590,11 @@\n    && (arith_reg_operand (operands[1], SImode)\n        || (immediate_operand (operands[1], SImode)\n \t   && satisfies_constraint_I08 (operands[1])))\"\n-  \"bf\t0f\\;mov\t%1,%0\\\\n0:\"\n+{\n+  return       \"bf\t0f\"\t\"\\n\"\n+\t \"\tmov\t%1,%0\"\t\"\\n\"\n+\t \"0:\";\n+}\n   [(set_attr \"type\" \"mt_group,arith\") ;; poor approximation\n    (set_attr \"length\" \"4\")])\n \n@@ -2581,8 +2635,7 @@\n \t\t\t\t    (match_operand:DI 2 \"register_operand\" \"r\")]\n \t\t\t UNSPEC_DIV_INV_TABLE)))]\n   \"TARGET_SHMEDIA\"\n-  \"@\n-\tldx.ub\t%1, %2, %0\"\n+  \"ldx.ub\t%1, %2, %0\"\n   [(set_attr \"type\" \"load_media\")\n    (set_attr \"highpart\" \"user\")])\n \n@@ -2593,8 +2646,7 @@\n \t\t\t\t    (match_operand:DI 2 \"register_operand\" \"r\")]\n \t\t\t UNSPEC_DIV_INV_TABLE)))]\n   \"TARGET_SHMEDIA\"\n-  \"@\n-\tldx.w\t%1, %2, %0\"\n+  \"ldx.w\t%1, %2, %0\"\n   [(set_attr \"type\" \"load_media\")\n    (set_attr \"highpart\" \"user\")])\n \n@@ -2924,19 +2976,33 @@ norm32: r25\n label:\n  sub result, round_scratch, result */\n \n-  int likely = TARGET_DIVIDE_INV20L;\n-\n-  if (! likely) output_asm_insn (\"muls.l\\t%2, %1 , %8\", operands);\n-  output_asm_insn (\"muls.l\\t%2, %3, %0\\;xor\\t%12, %5, %7\", operands);\n-  output_asm_insn (likely\n-\t\t   ? \"bge/l\\t%4, %6, %10\\;muls.l\\t%2, %1 , %8\"\n-\t\t   : \"bge/u\\t%4, %6, %10\", operands);\n-  output_asm_insn (\"shari\\t%8, 16, %8\\;muls.l\\t%8, %2, %8\", operands);\n-  if (! likely) output_asm_insn (\"sub\\t%0, %7, %0\", operands);\n-  output_asm_insn (\"shari\\t%3, 14, %9\\;shari\\t%8, 30, %8\", operands);\n-  return (likely\n-\t  ? \"muls.l\\t%8, %9, %8\\;sub\\t%0, %8, %0\\n%11:\\tadd\\t%0, %7, %0\"\n-\t  : \"muls.l\\t%8, %9, %7\\n%11:\\tsub\\t%0, %7, %0\");\n+  const bool likely = TARGET_DIVIDE_INV20L;\n+  if (likely)\n+    return\n+\t       \"muls.l\t%2, %3, %0\"\t\"\\n\"\n+\t\"\txor\t%12, %5, %7\"\t\"\\n\"\n+\t\"\tbge/l\t%4, %6, %10\"\t\"\\n\"\n+\t\"\tmuls.l\t%2, %1, %8\"\t\"\\n\"\n+\t\"\tshari\t%8, 16, %8\"\t\"\\n\"\n+\t\"\tmuls.l\t%8, %2, %8\"\t\"\\n\"\n+\t\"\tshari\t%3, 14, %9\"\t\"\\n\"\n+\t\"\tshari\t%8, 30, %8\"\t\"\\n\"\n+\t\"\tmuls.l\t%8, %9, %8\"\t\"\\n\"\n+\t\"\tsub\t%0, %8, %0\"\t\"\\n\"\n+\t\"%11:\tadd\t%0, %7, %0\";\n+  else\n+    return\n+\t       \"muls.l\t%2, %1, %8\"\t\"\\n\"\n+\t\"\tmuls.l\t%2, %3, %0\"\t\"\\n\"\n+\t\"\txor\t%12, %5, %7\"\t\"\\n\"\n+\t\"\tbge/u\t%4, %6, %10\"\t\"\\n\"\n+\t\"\tshari\t%8, 16, %8\"\t\"\\n\"\n+\t\"\tmuls.l\t%8, %2, %8\"\t\"\\n\"\n+\t\"\tsub\t%0, %7, %0\"\t\"\\n\"\n+\t\"\tshari\t%3, 14, %9\"\t\"\\n\"\n+\t\"\tshari\t%8, 30, %8\"\t\"\\n\"\n+\t\"\tmuls.l\t%8, %9, %7\"\t\"\\n\"\n+\t\"%11:\tsub\t%0, %7, %0\";\n })\n \n (define_insn_and_split \"divsi_inv_fp\"\n@@ -3481,7 +3547,7 @@ label:\n \t(and:SI (match_operand:SI 1 \"arith_reg_operand\" \"%0\")\n \t\t(match_operand:SI 2 \"const_int_operand\" \"Psz\")))]\n   \"TARGET_SH2A && satisfies_constraint_Psz (operands[2])\"\n-  \"bclr\\\\t%W2,%0\"\n+  \"bclr\t%W2,%0\"\n   [(set_attr \"type\" \"arith\")])\n \n (define_insn_and_split \"anddi3\"\n@@ -3552,7 +3618,7 @@ label:\n \t(ior:SI (match_operand:SI 1 \"arith_reg_operand\" \"%0\")\n \t(match_operand:SI 2 \"const_int_operand\" \"Pso\")))]\n   \"TARGET_SH2A && satisfies_constraint_Pso (operands[2])\"\n-  \"bset\\\\t%V2,%0\"\n+  \"bset\t%V2,%0\"\n   [(set_attr \"type\" \"arith\")])\n \n (define_insn \"iordi3\"\n@@ -3672,7 +3738,10 @@ label:\n \t(rotate:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")\n \t\t   (match_operand:HI 2 \"mextr_bit_offset\" \"\")))]\n   \"TARGET_SHMEDIA\"\n-  \"if (! mextr_bit_offset (operands[2], HImode)) FAIL;\")\n+{\n+  if (! mextr_bit_offset (operands[2], HImode))\n+    FAIL;\n+})\n \n (define_insn \"rotldi3_mextr\"\n   [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n@@ -3681,8 +3750,7 @@ label:\n   \"TARGET_SHMEDIA\"\n {\n   static char templ[16];\n-\n-  sprintf (templ, \"mextr%d\\\\t%%1,%%1,%%0\",\n+  sprintf (templ, \"mextr%d\t%%1,%%1,%%0\",\n \t   8 - (int) (INTVAL (operands[2]) >> 3));\n   return templ;\n }\n@@ -3705,8 +3773,7 @@ label:\n   \"TARGET_SHMEDIA\"\n {\n   static char templ[16];\n-\n-  sprintf (templ, \"mextr%d\\\\t%%1,%%1,%%0\", (int) INTVAL (operands[2]) >> 3);\n+  sprintf (templ, \"mextr%d\t%%1,%%1,%%0\", (int) INTVAL (operands[2]) >> 3);\n   return templ;\n }\n   [(set_attr \"type\" \"arith_media\")])\n@@ -4900,9 +4967,19 @@ label:\n \t (match_operand:SI 1 \"arith_reg_operand\" \"0,0\")\n \t (neg:SI (match_operand:SI 2 \"arith_reg_operand\" \"r,r\"))))]\n   \"TARGET_SH1 && TARGET_ZDCBRANCH\"\n-  \"@\n-\tbt\\\\t0f\\;neg\\\\t%2,%0\\\\n0:\n-\tbf\\\\t0f\\;neg\\\\t%2,%0\\\\n0:\"\n+{\n+  static const char* alt[] =\n+  {\n+       \"bt\t0f\"\t\"\\n\"\n+    \"\tneg\t%2,%0\"\t\"\\n\"\n+    \"0:\",\n+\n+       \"bf\t0f\"\t\"\\n\"\n+    \"\tneg\t%2,%0\"\t\"\\n\"\n+    \"0:\"\n+  };\n+  return alt[which_alternative];\n+}\n   \"TARGET_SH1 && ! TARGET_ZDCBRANCH\"\n   [(const_int 0)]\n {\n@@ -5573,9 +5650,16 @@ label:\n   [(set (match_operand:HI 0 \"general_movdst_operand\" \"=?r,m\")\n \t(truncate:HI (match_operand:DI 1 \"register_operand\" \"r,r\")))]\n   \"TARGET_SHMEDIA\"\n-  \"@\n-\tshlli\\\\t%1,48,%0\\;shlri\\\\t%0,48,%0\n-\tst%M0.w\t%m0, %1\"\n+{\n+  static const char* alt[] =\n+  {\n+       \"shlli\t%1,48,%0\"\t\"\\n\"\n+    \"\tshlri\t%0,48,%0\",\n+\n+       \"st%M0.w\t%m0, %1\"\n+  };\n+  return alt[which_alternative];\n+}\n   [(set_attr \"type\"   \"arith_media,store_media\")\n    (set_attr \"length\" \"8,4\")\n    (set (attr \"highpart\")\n@@ -5888,9 +5972,9 @@ label:\n   \"(TARGET_SH1 || TARGET_SH2E || TARGET_SH2A)\n    && ! TARGET_SH3\"\n   \"@\n-   mov.l   %1,%0\n-   lds.l   %1,%0\n-   lds.l   %1,%0\"\n+\tmov.l\t%1,%0\n+\tlds.l\t%1,%0\n+\tlds.l\t%1,%0\"\n   [(set_attr \"type\" \"load_si,mem_mac,pload\")\n    (set_attr \"length\" \"2,2,2\")\n    (set_attr \"in_delay_slot\" \"no,no,no\")])\n@@ -6192,16 +6276,25 @@ label:\n \t\t     UNSPEC_ICACHE)\n    (clobber (match_scratch:SI 2 \"=&r\"))]\n   \"TARGET_HARD_SH4\"\n-  \"ocbwb\\\\t@%0\\;extu.w\\\\t%0,%2\\;or\\\\t%1,%2\\;mov.l\\\\t%0,@%2\"\n+{\n+  return       \"ocbwb\t@%0\"\t\"\\n\"\n+\t \"\textu.w\t%0,%2\"\t\"\\n\"\n+\t \"\tor\t%1,%2\"\t\"\\n\"\n+\t \"\tmov.l\t%0,@%2\";\n+}\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"cwb\")])\n \n (define_insn \"ic_invalidate_line_sh4a\"\n   [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")]\n \t\t    UNSPEC_ICACHE)]\n   \"TARGET_SH4A_ARCH || TARGET_SH4_300\"\n-  \"ocbwb\\\\t@%0\\;synco\\;icbi\\\\t@%0\"\n-  [(set_attr \"length\" \"16\")\n+{\n+  return       \"ocbwb\t@%0\"\t\"\\n\"\n+\t \"\tsynco\"\t\t\"\\n\"\n+\t \"\ticbi\t@%0\";\n+}\n+  [(set_attr \"length\" \"16\")\t;; FIXME: Why 16 and not 6?  Looks like typo.\n    (set_attr \"type\" \"cwb\")])\n \n ;; ??? could make arg 0 an offsettable memory operand to allow to save\n@@ -6210,7 +6303,12 @@ label:\n   [(unspec_volatile [(match_operand 0 \"any_register_operand\" \"r\")]\n \t\t    UNSPEC_ICACHE)]\n   \"TARGET_SHMEDIA\"\n-  \"ocbwb\t%0,0\\;synco\\;icbi\t%0, 0\\;synci\"\n+{\n+  return       \"ocbwb\t%0,0\"\t\"\\n\"\n+\t \"\tsynco\"\t\t\"\\n\"\n+\t \"\ticbi\t%0,0\"\t\"\\n\"\n+\t \"\tsynci\";\n+}\n   [(set_attr \"length\" \"16\")\n    (set_attr \"type\" \"invalidate_line_media\")])\n \n@@ -6934,9 +7032,11 @@ label:\n       if (TARGET_FMOVD)\n \treturn \"fmov\t%1,%0\";\n       else if (REGNO (operands[0]) != REGNO (operands[1]) + 1)\n-\treturn \"fmov\t%R1,%R0\\n\\tfmov\t%S1,%S0\";\n+\treturn         \"fmov\t%R1,%R0\"\t\"\\n\"\n+\t       \"\tfmov\t%S1,%S0\";\n       else\n-\treturn \"fmov\t%S1,%S0\\n\\tfmov\t%R1,%R0\";\n+\treturn         \"fmov\t%S1,%S0\"\t\"\\n\"\n+\t       \"\tfmov\t%R1,%R0\";\n     case 3:\n     case 4:\n       return \"fmov.d\t%1,%0\";\n@@ -8199,9 +8299,9 @@ label:\n   \"TARGET_SH1\"\n {\n   if (TARGET_SH2A && (dbr_sequence_length () == 0))\n-    return \"jsr/n\\\\t@%0\";\n+    return \"jsr/n\t@%0\";\n   else\n-    return \"jsr\\\\t@%0%#\";\n+    return \"jsr\t@%0%#\";\n }\n   [(set_attr \"type\" \"call\")\n    (set (attr \"fp_mode\")\n@@ -8225,7 +8325,7 @@ label:\n   vect_num = sh2a_get_function_vector_number (operands[0]);\n   operands[2] = GEN_INT (vect_num * 4);\n \n-  return \"jsr/n\\\\t@@(%O2,tbr)\";\n+  return \"jsr/n\t@@(%O2,tbr)\";\n }\n   [(set_attr \"type\" \"call\")\n    (set (attr \"fp_mode\")\n@@ -8244,7 +8344,10 @@ label:\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SH2\"\n-  \"bsrf\t%0\\\\n%O2:%#\"\n+{\n+  return       \"bsrf\t%0\"\t\"\\n\"\n+\t \"%O2:%#\";\n+}\n   [(set_attr \"type\" \"call\")\n    (set (attr \"fp_mode\")\n \t(if_then_else (eq_attr \"fpu_single\" \"yes\")\n@@ -8330,9 +8433,9 @@ label:\n   \"TARGET_SH1\"\n {\n   if (TARGET_SH2A && (dbr_sequence_length () == 0))\n-    return \"jsr/n\\\\t@%1\";\n+    return \"jsr/n\t@%1\";\n   else\n-    return \"jsr\\\\t@%1%#\";\n+    return \"jsr\t@%1%#\";\n }\n   [(set_attr \"type\" \"call\")\n    (set (attr \"fp_mode\")\n@@ -8357,7 +8460,7 @@ label:\n   vect_num = sh2a_get_function_vector_number (operands[1]);\n   operands[3] = GEN_INT (vect_num * 4);\n \n-  return \"jsr/n\\\\t@@(%O3,tbr)\";\n+  return \"jsr/n\t@@(%O3,tbr)\";\n }\n   [(set_attr \"type\" \"call\")\n    (set (attr \"fp_mode\")\n@@ -8375,7 +8478,10 @@ label:\n    (use (match_operand 3 \"\" \"\"))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SH2\"\n-  \"bsrf\t%1\\\\n%O3:%#\"\n+{\n+  return       \"bsrf\t%1\"\t\"\\n\"\n+\t \"%O3:%#\";\n+}\n   [(set_attr \"type\" \"call\")\n    (set (attr \"fp_mode\")\n \t(if_then_else (eq_attr \"fpu_single\" \"yes\")\n@@ -8761,7 +8867,10 @@ label:\n    (use (reg:PSI FPSCR_REG))\n    (return)]\n   \"TARGET_SH2\"\n-  \"braf\t%0\\\\n%O2:%#\"\n+{\n+  return       \"braf\t%0\"\t\"\\n\"\n+\t \"%O2:%#\";\n+}\n   [(set_attr \"needs_delay_slot\" \"yes\")\n    (set (attr \"fp_mode\")\n \t(if_then_else (eq_attr \"fpu_single\" \"yes\")\n@@ -8821,9 +8930,16 @@ label:\n    ;; because sibcall_epilogue may clobber MACL_REG.\n    (clobber (reg:SI MACL_REG))]\n   \"TARGET_SHCOMPACT\"\n-  \"@\n-\tjmp\t@%0%#\n-\tjmp\t@%0\\\\n\tsts\t%2, r0\"\n+{\n+  static const char* alt[] =\n+  {\n+       \"jmp\t@%0%#\",\n+\n+       \"jmp\t@%0\"\t\"\\n\"\n+    \"\tsts\t%2,r0\"\n+  };\n+  return alt[which_alternative];\n+}\n   [(set_attr \"needs_delay_slot\" \"yes,no\")\n    (set_attr \"length\" \"2,4\")\n    (set (attr \"fp_mode\") (const_string \"single\"))\n@@ -8958,7 +9074,10 @@ label:\n    (use (reg:PSI FPSCR_REG))\n    (return)]\n   \"TARGET_SH2\"\n-  \"braf\t%1\\\\n%O3:%#\"\n+{\n+  return       \"braf\t%1\"\t\"\\n\"\n+\t \"%O3:%#\";\n+}\n   [(set_attr \"needs_delay_slot\" \"yes\")\n    (set (attr \"fp_mode\")\n \t(if_then_else (eq_attr \"fpu_single\" \"yes\")\n@@ -9006,9 +9125,16 @@ label:\n    ;; because sibcall_epilogue may clobber MACL_REG.\n    (clobber (reg:SI MACL_REG))]\n   \"TARGET_SHCOMPACT\"\n-  \"@\n-\tjmp\t@%1%#\n-\tjmp\t@%1\\\\n\tsts\t%3, r0\"\n+{\n+  static const char* alt[] =\n+  {\n+       \"jmp\t@%1%#\",\n+\n+       \"jmp\t@%1\"\t\"\\n\"\n+    \"\tsts\t%3,r0\"\n+  };\n+  return alt[which_alternative];\n+}\n   [(set_attr \"needs_delay_slot\" \"yes,no\")\n    (set_attr \"length\" \"2,4\")\n    (set (attr \"fp_mode\") (const_string \"single\"))\n@@ -9932,13 +10058,18 @@ label:\n   switch (GET_MODE (diff_vec))\n     {\n     case SImode:\n-      return \"shll2\t%1\\;mov.l\t@(r0,%1),%0\";\n+      return   \"shll2\t%1\"\t\"\\n\"\n+\t     \"\tmov.l\t@(r0,%1),%0\";\n     case HImode:\n-      return \"add\t%1,%1\\;mov.w\t@(r0,%1),%0\";\n+      return   \"add\t%1,%1\"\t\"\\n\"\n+\t     \"\tmov.w\t@(r0,%1),%0\";\n     case QImode:\n       if (ADDR_DIFF_VEC_FLAGS (diff_vec).offset_unsigned)\n-\treturn \"mov.b\t@(r0,%1),%0\\;extu.b\t%0,%0\";\n-      return \"mov.b\t@(r0,%1),%0\";\n+\treturn         \"mov.b\t@(r0,%1),%0\"\t\"\\n\"\n+\t       \"\textu.b\t%0,%0\";\n+      else\n+\treturn \"mov.b\t@(r0,%1),%0\";\n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -9955,29 +10086,33 @@ label:\n   \"TARGET_SH2 && reload_completed && flag_pic\"\n {\n   rtx diff_vec = PATTERN (next_real_insn (operands[2]));\n-  const char *load;\n-\n   gcc_assert (GET_CODE (diff_vec) == ADDR_DIFF_VEC);\n \n   switch (GET_MODE (diff_vec))\n     {\n     case SImode:\n-      output_asm_insn (\"shll2    %1\", operands);\n-      load = \"mov.l\t@(r0,%1),%0\"; break;\n+      return   \"shll2\t%1\"\t\t\"\\n\"\n+\t     \"\tadd\tr0,%1\"\t\t\"\\n\"\n+\t     \"\tmova\t%O3,r0\"\t\t\"\\n\"\n+\t     \"  mov.l\t@(r0,%1),%0\";\n     case HImode:\n-      output_asm_insn (\"add\t%1,%1\", operands);\n-      load = \"mov.w\t@(r0,%1),%0\"; break;\n+      return   \"add\t%1,%1\"\t\t\"\\n\"\n+\t     \"\tadd\tr0,%1\"\t\t\"\\n\"\n+\t     \"\tmova\t%O3,r0\"\t\t\"\\n\"\n+\t     \"\tmov.w\t@(r0,%1),%0\";\n     case QImode:\n       if (ADDR_DIFF_VEC_FLAGS (diff_vec).offset_unsigned)\n-\tload = \"mov.b\t@(r0,%1),%0\\;extu.b\t%0,%0\";\n+\treturn\t       \"add\tr0,%1\"\t\t\"\\n\"\n+\t\t\"\tmova\t%O3,r0\"\t\t\"\\n\"\n+\t\t\"\tmov.b\t@(r0,%1),%0\"\t\"\\n\"\n+\t\t\"\textu.b\t%0,%0\";\n       else\n-\tload = \"mov.b\t@(r0,%1),%0\";\n-      break;\n+\treturn\t       \"add\tr0,%1\"\t\t\"\\n\"\n+\t\t\"\tmova\t%O3,r0\"\t\t\"\\n\"\n+\t\t\"\tmov.b\t@(r0,%1),%0\";\n     default:\n       gcc_unreachable ();\n     }\n-  output_asm_insn (\"add\\tr0,%1\\;mova\\t%O3,r0\\\\n\", operands);\n-  return load;\n }\n   [(set_attr \"length\" \"8\")])\n \n@@ -10261,7 +10396,7 @@ label:\n    (set (mem:SI (plus:SI (match_dup 0) (const_int 4))) (reg:SI R1_REG))\n    (set (mem:SI (plus:SI (match_dup 0) (const_int 0))) (reg:SI R0_REG))]\n   \"TARGET_SH2A && REGNO (operands[0]) == 15\"\n-  \"movml.l\\tr7,@-r15\"\n+  \"movml.l\tr7,@-r15\"\n   [(set_attr \"in_delay_slot\" \"no\")])\n \n (define_insn \"movml_pop_banked\"\n@@ -10276,7 +10411,7 @@ label:\n    (set (reg:SI R6_REG) (mem:SI (plus:SI (match_dup 0) (const_int -8))))\n    (set (reg:SI R7_REG) (mem:SI (plus:SI (match_dup 0) (const_int -4))))]\n   \"TARGET_SH2A && REGNO (operands[0]) == 15\"\n-  \"movml.l\\t@r15+,r7\"\n+  \"movml.l\t@r15+,r7\"\n   [(set_attr \"in_delay_slot\" \"no\")])\n \f\n ;; ------------------------------------------------------------------------\n@@ -12194,8 +12329,8 @@ label:\n \t    (match_dup 0)))]\n   \"TARGET_SH2A && TARGET_BITOPS\"\n   \"@\n-\tbclr.b\\\\t%1,%0\n-\tbclr.b\\\\t%1,@(0,%t0)\"\n+\tbclr.b\t%1,%0\n+\tbclr.b\t%1,@(0,%t0)\"\n [(set_attr \"length\" \"4,4\")])\n \n (define_insn \"bclrmem_m2a\"\n@@ -12204,8 +12339,8 @@ label:\n                 (match_operand:QI 1 \"const_int_operand\" \"Psz,Psz\")))]\n   \"TARGET_SH2A && satisfies_constraint_Psz (operands[1]) && TARGET_BITOPS\"\n   \"@\n-        bclr.b\\\\t%W1,%0\n-        bclr.b\\\\t%W1,@(0,%t0)\"\n+        bclr.b\t%W1,%0\n+        bclr.b\t%W1,@(0,%t0)\"\n   [(set_attr \"length\" \"4,4\")])\n \n ;; Set a bit in a memory location.\n@@ -12217,8 +12352,8 @@ label:\n \t    (match_dup 0)))]\n   \"TARGET_SH2A && TARGET_BITOPS\"\n   \"@\n-\tbset.b\\\\t%1,%0\n-\tbset.b\\\\t%1,@(0,%t0)\"\n+\tbset.b\t%1,%0\n+\tbset.b\t%1,@(0,%t0)\"\n   [(set_attr \"length\" \"4,4\")])\n \n (define_insn \"bsetmem_m2a\"\n@@ -12227,8 +12362,8 @@ label:\n \t\t(match_operand:QI 1 \"const_int_operand\" \"Pso,Pso\")))]\n   \"TARGET_SH2A && satisfies_constraint_Pso (operands[1]) && TARGET_BITOPS\"\n   \"@\n-        bset.b\\\\t%V1,%0\n-        bset.b\\\\t%V1,@(0,%t0)\"\n+        bset.b\t%V1,%0\n+        bset.b\t%V1,@(0,%t0)\"\n   [(set_attr \"length\" \"4,4\")])\n \n ;;; Transfer the contents of the T bit to a specified bit of memory.\n@@ -12244,8 +12379,8 @@ label:\n \t\t(match_dup 0))))]\n   \"TARGET_SH2A && TARGET_BITOPS\"\n   \"@\n-\tbst.b\\\\t%1,%0\n-\tbst.b\\\\t%1,@(0,%t0)\"\n+\tbst.b\t%1,%0\n+\tbst.b\t%1,@(0,%t0)\"\n   [(set_attr \"length\" \"4\")])\n \n ;; Store a specified bit of memory in the T bit.\n@@ -12257,8 +12392,8 @@ label:\n \t    (match_operand 1 \"const_int_operand\" \"K03,K03\")))]\n   \"TARGET_SH2A && TARGET_BITOPS\"\n   \"@\n-\tbld.b\\\\t%1,%0\n-\tbld.b\\\\t%1,@(0,%t0)\"\n+\tbld.b\t%1,%0\n+\tbld.b\t%1,@(0,%t0)\"\n   [(set_attr \"length\" \"4,4\")])\n \n ;; Store a specified bit of memory in the T bit.\n@@ -12270,8 +12405,8 @@ label:\n \t    (match_operand 1 \"const_int_operand\" \"K03,K03\")))]\n   \"TARGET_SH2A && TARGET_BITOPS\"\n   \"@\n-\tbld.b\\\\t%1,%0\n-\tbld.b\\\\t%1,@(0,%t0)\"\n+\tbld.b\t%1,%0\n+\tbld.b\t%1,@(0,%t0)\"\n   [(set_attr \"length\" \"4,4\")])\n \n ;; Store a specified bit of the LSB 8 bits of a register in the T bit.\n@@ -12281,15 +12416,15 @@ label:\n \t\t\t (const_int 1)\n \t\t\t (match_operand 1 \"const_int_operand\" \"K03\")))]\n   \"TARGET_SH2A\"\n-  \"bld\\\\t%1,%0\")\n+  \"bld\t%1,%0\")\n \n (define_insn \"*bld_regqi\"\n   [(set (reg:SI T_REG)\n \t(zero_extract:SI (match_operand:QI 0 \"arith_reg_operand\" \"r\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand 1 \"const_int_operand\" \"K03\")))]\n   \"TARGET_SH2A\"\n-  \"bld\\\\t%1,%0\")\n+  \"bld\t%1,%0\")\n \n ;; Take logical and of a specified bit of memory with the T bit and\n ;; store its result in the T bit.\n@@ -12302,8 +12437,8 @@ label:\n \t\t    (match_operand 1 \"const_int_operand\" \"K03,K03\"))))]\n   \"TARGET_SH2A && TARGET_BITOPS\"\n   \"@\n-\tband.b\\\\t%1,%0\n-\tband.b\\\\t%1,@(0,%t0)\"\n+\tband.b\t%1,%0\n+\tband.b\t%1,@(0,%t0)\"\n   [(set_attr \"length\" \"4,4\")])\n \n (define_insn \"bandreg_m2a\"\n@@ -12314,9 +12449,17 @@ label:\n \t\t    (match_operand 2 \"const_int_operand\" \"K03,K03\"))\n         \t(match_operand:SI 3 \"register_operand\" \"r,r\")))]\n   \"TARGET_SH2A && TARGET_BITOPS\"\n-  \"@\n-\tband.b\\\\t%2,%1\\;movt\\\\t%0\n-\tband.b\\\\t%2,@(0,%t1)\\;movt\\\\t%0\"\n+{\n+  static const char* alt[] =\n+  {\n+       \"band.b\t%2,%1\"\t\t\"\\n\"\n+    \"\tmovt\t%0\",\n+\n+       \"band.b\t%2,@(0,%t1)\"\t\"\\n\"\n+    \"\tmovt\t%0\"\n+  };\n+  return alt[which_alternative];\n+}\n   [(set_attr \"length\" \"6,6\")])\n \n ;; Take logical or of a specified bit of memory with the T bit and\n@@ -12330,8 +12473,8 @@ label:\n \t\t    (match_operand 1 \"const_int_operand\" \"K03,K03\"))))]\n   \"TARGET_SH2A && TARGET_BITOPS\"\n   \"@\n-\tbor.b\\\\t%1,%0\n-\tbor.b\\\\t%1,@(0,%t0)\"\n+\tbor.b\t%1,%0\n+\tbor.b\t%1,@(0,%t0)\"\n   [(set_attr \"length\" \"4,4\")])\n \n (define_insn \"borreg_m2a\"\n@@ -12342,9 +12485,17 @@ label:\n \t\t    (match_operand 2 \"const_int_operand\" \"K03,K03\"))\n \t\t(match_operand:SI 3 \"register_operand\" \"=r,r\")))]\n   \"TARGET_SH2A && TARGET_BITOPS\"\n-  \"@\n-\tbor.b\\\\t%2,%1\\;movt\\\\t%0\n-\tbor.b\\\\t%2,@(0,%t1)\\;movt\\\\t%0\"\n+{\n+  static const char* alt[] =\n+  {\n+       \"bor.b\t%2,%1\"\t\t\"\\n\"\n+    \"\tmovt\t%0\",\n+\n+       \"bor.b\t%2,@(0,%t1)\"\t\"\\n\"\n+    \"\tmovt\t%0\"\n+  };\n+  return alt[which_alternative];\n+}\n   [(set_attr \"length\" \"6,6\")])\n \n ;; Take exclusive or of a specified bit of memory with the T bit and\n@@ -12358,8 +12509,8 @@ label:\n \t\t    (match_operand 1 \"const_int_operand\" \"K03,K03\"))))]\n   \"TARGET_SH2A && TARGET_BITOPS\"\n   \"@\n-\tbxor.b\\\\t%1,%0\n-\tbxor.b\\\\t%1,@(0,%t0)\"\n+\tbxor.b\t%1,%0\n+\tbxor.b\t%1,@(0,%t0)\"\n   [(set_attr \"length\" \"4,4\")])\n \n (define_insn \"bxorreg_m2a\"\n@@ -12370,9 +12521,17 @@ label:\n \t\t    (match_operand 2 \"const_int_operand\" \"K03,K03\"))\n \t\t(match_operand:SI 3 \"register_operand\" \"=r,r\")))]\n   \"TARGET_SH2A && TARGET_BITOPS\"\n-  \"@\n-\tbxor.b\\\\t%2,%1\\;movt\\\\t%0\n-\tbxor.b\\\\t%2,@(0,%t1)\\;movt\\\\t%0\"\n+{\n+  static const char* alt[] =\n+  {\n+       \"bxor.b\t%2,%1\"\t\t\"\\n\"\n+    \"\tmovt\t%0\",\n+\n+       \"bxor.b\t%2,@(0,%t1)\"\t\"\\n\"\n+    \"\tmovt\t%0\"\n+  };\n+  return alt[which_alternative];\n+}\n   [(set_attr \"length\" \"6,6\")])\n \n \f\n@@ -12607,23 +12766,28 @@ label:\n    && reg_unused_after (operands[0], insn)\"\n   \"fmov{.s|}\t@(%0,%1),%2\")\n \n-;; Switch to a new stack with its address in sp_switch (a SYMBOL_REF).  */\n+;; Switch to a new stack with its address in sp_switch (a SYMBOL_REF).\n (define_insn \"sp_switch_1\"\n   [(const_int 1) (match_operand:SI 0 \"symbol_ref_operand\" \"s\")]\n   \"TARGET_SH1\"\n {\n-  output_asm_insn (\"mov.l r0,@-r15\\;mov.l %0,r0\", operands);\n-  output_asm_insn (\"mov.l @r0,r0\\;mov.l r15,@-r0\", operands);\n-  return \"mov r0,r15\";\n+  return       \"mov.l\tr0,@-r15\"\t\"\\n\"\n+\t \"\tmov.l\t%0,r0\"\t\t\"\\n\"\n+\t \"\tmov.l\t@r0,r0\"\t\t\"\\n\"\n+\t \"\tmov.l\tr15,@-r0\"\t\"\\n\"\n+\t \"\tmov\tr0,r15\";\n }\n   [(set_attr \"length\" \"10\")])\n \n ;; Switch back to the original stack for interrupt functions with the\n-;; sp_switch attribute.  */\n+;; sp_switch attribute.\n (define_insn \"sp_switch_2\"\n   [(const_int 2)]\n   \"TARGET_SH1\"\n-  \"mov.l @r15+,r15\\;mov.l @r15+,r0\"\n+{\n+  return       \"mov.l\t@r15+,r15\"\t\"\\n\"\n+\t \"\tmov.l\t@r15+,r0\";\n+}\n   [(set_attr \"length\" \"4\")])\n \n ;; Integer vector moves\n@@ -12980,7 +13144,8 @@ label:\n   \"TARGET_SHMEDIA && INTVAL (operands[3]) + INTVAL (operands[4]) == 64\"\n {\n   static char templ[21];\n-  sprintf (templ, \"mextr%d\\\\t%%N1, %%N2, %%0\", (int) INTVAL (operands[3]) >> 3);\n+  sprintf (templ, \"mextr%d\t%%N1, %%N2, %%0\",\n+\t   (int) INTVAL (operands[3]) >> 3);\n   return templ;\n }\n   [(set_attr \"type\" \"arith_media\")])\n@@ -12994,7 +13159,8 @@ label:\n   \"TARGET_SHMEDIA && INTVAL (operands[3]) + INTVAL (operands[4]) == 64\"\n {\n   static char templ[21];\n-  sprintf (templ, \"mextr%d\\\\t%%N2, %%N1, %%0\", (int) INTVAL (operands[4]) >> 3);\n+  sprintf (templ, \"mextr%d\t%%N2, %%N1, %%0\",\n+\t   (int) INTVAL (operands[4]) >> 3);\n   return templ;\n }\n   [(set_attr \"type\" \"arith_media\")])\n@@ -14505,7 +14671,11 @@ label:\n         (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")] UNSPEC_SP_SET))\n    (set (match_scratch:SI 2 \"=&r\") (const_int 0))]\n   \"!TARGET_SHMEDIA\"\n-  \"mov.l\\t%1, %2\\;mov.l\\t%2, %0\\;mov\\t#0, %2\"\n+{\n+  return       \"mov.l\t%1,%2\"\t\"\\n\"\n+\t \"\tmov.l\t%2,%0\"\t\"\\n\"\n+\t \"\tmov\t#0,%2\";\n+}\n   [(set_attr \"type\" \"other\")\n    (set_attr \"length\" \"6\")])\n \n@@ -14514,7 +14684,11 @@ label:\n         (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")] UNSPEC_SP_SET))\n    (set (match_scratch:SI 2 \"=&r\") (const_int 0))]\n   \"TARGET_SHMEDIA\"\n-  \"ld%M1.l\\t%m1, %2\\;st%M0.l\\t%m0, %2\\;movi\\t0, %2\"\n+{\n+  return       \"ld%M1.l\t%m1,%2\"\t\"\\n\"\n+\t \"\tst%M0.l\t%m0,%2\"\t\"\\n\"\n+\t \"\tmovi\t0,%2\";\n+}\n   [(set_attr \"type\" \"other\")\n    (set_attr \"length\" \"12\")])\n \n@@ -14523,7 +14697,11 @@ label:\n         (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")] UNSPEC_SP_SET))\n    (set (match_scratch:DI 2 \"=&r\") (const_int 0))]\n   \"TARGET_SHMEDIA64\"\n-  \"ld%M1.q\\t%m1, %2\\;st%M0.q\\t%m0, %2\\;movi\\t0, %2\"\n+{\n+  return       \"ld%M1.q\t%m1,%2\"\t\"\\n\"\n+\t \"\tst%M0.q\t%m0,%2\"\t\"\\n\"\n+\t \"\tmovi\t0,%2\";\n+}\n   [(set_attr \"type\" \"other\")\n    (set_attr \"length\" \"12\")])\n \n@@ -14569,7 +14747,13 @@ label:\n   (set (match_scratch:SI 2 \"=&r\") (const_int 0))\n   (set (match_scratch:SI 3 \"=&r\") (const_int 0))]\n   \"!TARGET_SHMEDIA\"\n-  \"mov.l\\t%0, %2\\;mov.l\\t%1, %3\\;cmp/eq\\t%2, %3\\;mov\\t#0, %2\\;mov\\t#0, %3\"\n+{\n+  return       \"mov.l\t%0,%2\"\t\"\\n\"\n+\t \"\tmov.l\t%1,%3\"\t\"\\n\"\n+\t \"\tcmp/eq\t%2,%3\"\t\"\\n\"\n+\t \"\tmov\t#0,%2\"\t\"\\n\"\n+\t \"\tmov\t#0,%3\";\n+}\n   [(set_attr \"type\" \"other\")\n    (set_attr \"length\" \"10\")])\n \n@@ -14580,7 +14764,12 @@ label:\n \t\t   UNSPEC_SP_TEST))\n   (set (match_scratch:SI 3 \"=&r\") (const_int 0))]\n   \"TARGET_SHMEDIA\"\n-  \"ld%M1.l\\t%m1, %0\\;ld%M2.l\\t%m2, %3\\;cmpeq\\t%0, %3, %0\\;movi\\t0, %3\"\n+{\n+  return       \"ld%M1.l\t%m1,%0\"\t\t\"\\n\"\n+\t \"\tld%M2.l\t%m2,%3\"\t\t\"\\n\"\n+\t \"\tcmpeq\t%0,%3,%0\"\t\"\\n\"\n+\t \"\tmovi\t0,%3\";\n+}\n   [(set_attr \"type\" \"other\")\n    (set_attr \"length\" \"16\")])\n \n@@ -14591,7 +14780,12 @@ label:\n \t\t   UNSPEC_SP_TEST))\n   (set (match_scratch:DI 3 \"=&r\") (const_int 0))]\n   \"TARGET_SHMEDIA64\"\n-  \"ld%M1.q\\t%m1, %0\\;ld%M2.q\\t%m2, %3\\;cmpeq\\t%0, %3, %0\\;movi\\t0, %3\"\n+{\n+  return       \"ld%M1.q\t%m1,%0\"\t\t\"\\n\"\n+\t \"\tld%M2.q\t%m2,%3\"\t\t\"\\n\"\n+\t \"\tcmpeq\t%0,%3,%0\"\t\"\\n\"\n+\t \"\tmovi\t0,%3\";\n+}\n   [(set_attr \"type\" \"other\")\n    (set_attr \"length\" \"16\")])\n "}]}