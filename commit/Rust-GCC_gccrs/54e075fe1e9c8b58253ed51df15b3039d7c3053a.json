{"sha": "54e075fe1e9c8b58253ed51df15b3039d7c3053a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRlMDc1ZmUxZTljOGI1ODI1M2VkNTFkZjE1YjMwMzlkN2MzMDUzYQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-09-24T13:26:29Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-09-24T13:26:29Z"}, "message": "re PR tree-optimization/17624 (ICE: SSA corruption (another one))\n\n2004-09-24  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR tree-opt/17624\n        * tree-ssa-forwprop.c (record_single_argument_cond_exprs):\n        Reject if any of the operands occur in an abnormal PHI.\n\nFrom-SVN: r88032", "tree": {"sha": "58c2501c3ecaa6e0b9dc6365590dbe4096a9f698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58c2501c3ecaa6e0b9dc6365590dbe4096a9f698"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54e075fe1e9c8b58253ed51df15b3039d7c3053a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e075fe1e9c8b58253ed51df15b3039d7c3053a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e075fe1e9c8b58253ed51df15b3039d7c3053a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e075fe1e9c8b58253ed51df15b3039d7c3053a/comments", "author": null, "committer": null, "parents": [{"sha": "7e53ab66059c0faf5afb746ddee5da9a14b8b43e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e53ab66059c0faf5afb746ddee5da9a14b8b43e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e53ab66059c0faf5afb746ddee5da9a14b8b43e"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "aac77b4166fb7276eaf17ec28be9f9a90ff5912e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e075fe1e9c8b58253ed51df15b3039d7c3053a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e075fe1e9c8b58253ed51df15b3039d7c3053a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54e075fe1e9c8b58253ed51df15b3039d7c3053a", "patch": "@@ -1,3 +1,9 @@\n+2004-09-24  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR tree-opt/17624\n+\t* tree-ssa-forwprop.c (record_single_argument_cond_exprs):\n+\tReject if any of the operands occur in an abnormal PHI.\n+\n 2004-09-24  Andreas Schwab  <schwab@suse.de>\n \n \t* tree-ssa-dom.c (record_range): Fix violation of strict aliasing"}, {"sha": "cbf1fdec578407cc7308f0dc96cdb47cb6f8cb1e", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e075fe1e9c8b58253ed51df15b3039d7c3053a/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e075fe1e9c8b58253ed51df15b3039d7c3053a/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=54e075fe1e9c8b58253ed51df15b3039d7c3053a", "patch": "@@ -212,6 +212,11 @@ record_single_argument_cond_exprs (varray_type cond_worklist,\n \t\t\t  || !CONSTANT_CLASS_P (op1)\n \t\t\t  || !INTEGRAL_TYPE_P (TREE_TYPE (op1)))\n \t\t\tcontinue;\n+\t\t      \n+\t\t      /* Don't propagate if the first operand occurs in\n+\t\t         an abnormal PHI.  */\n+\t\t      if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op0))\n+\t\t        continue;\n \t\t    }\n \n \t\t  /* These cases require comparisons of a naked SSA_NAME or\n@@ -235,6 +240,18 @@ record_single_argument_cond_exprs (varray_type cond_worklist,\n \t\t\t      || (TREE_CODE (op1) != SSA_NAME\n \t\t\t\t  && !is_gimple_min_invariant (op1)))\n \t\t\t    continue;\n+\t\t      \n+\t\t\t  /* Don't propagate if the first operand occurs in\n+\t\t\t     an abnormal PHI.  */\n+\t\t\t  if (TREE_CODE (op0) == SSA_NAME\n+\t\t\t      && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op0))\n+\t\t\t    continue;\n+\t\t      \n+\t\t\t  /* Don't propagate if the second operand occurs in\n+\t\t\t     an abnormal PHI.  */\n+\t\t\t  if (TREE_CODE (op1) == SSA_NAME\n+\t\t\t      && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op1))\n+\t\t\t    continue;\n \t\t        }\n \n \t\t      /* If TEST_VAR is set from a TRUTH_NOT_EXPR, then it\n@@ -247,6 +264,12 @@ record_single_argument_cond_exprs (varray_type cond_worklist,\n \t\t\t  if (TREE_CODE (def_rhs) != SSA_NAME\n \t\t\t      && !is_gimple_min_invariant (def_rhs))\n \t\t\t    continue;\n+\t\t      \n+\t\t\t  /* Don't propagate if the operand occurs in\n+\t\t\t     an abnormal PHI.  */\n+\t\t\t  if (TREE_CODE (def_rhs) == SSA_NAME\n+\t\t\t      && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (def_rhs))\n+\t\t\t    continue;\n \t\t\t}\n \n \t\t      /* If TEST_VAR was set from a cast of an integer type\n@@ -268,6 +291,13 @@ record_single_argument_cond_exprs (varray_type cond_worklist,\n \t\t\t    ;\n \t\t\t  else\n \t\t\t    continue;\n+\t\t      \n+\t\t\t  /* Don't propagate if the operand occurs in\n+\t\t\t     an abnormal PHI.  */\n+\t\t\t  if (TREE_CODE (TREE_OPERAND (def_rhs, 0)) == SSA_NAME\n+\t\t\t      && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (TREE_OPERAND\n+\t\t\t\t\t                          (def_rhs, 0)))\n+\t\t\t    continue;\n \t\t\t}\n \t\t      else\n \t\t\tcontinue;"}]}