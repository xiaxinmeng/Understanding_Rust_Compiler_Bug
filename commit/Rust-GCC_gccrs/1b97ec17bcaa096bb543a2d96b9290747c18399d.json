{"sha": "1b97ec17bcaa096bb543a2d96b9290747c18399d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI5N2VjMTdiY2FhMDk2YmI1NDNhMmQ5NmI5MjkwNzQ3YzE4Mzk5ZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-07-21T03:27:51Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-07-21T03:27:51Z"}, "message": "chrono: (system_clock::is_steady): Update to N3291 from is_monotonic.\n\n2011-07-20  Benjamin Kosnik  <bkoz@redhat.com>\n\t    Daniel Krugler  <daniel.kruegler@googlemail.com>\n\n\t* include/std/chrono: (system_clock::is_steady): Update to N3291\n\tfrom is_monotonic.\n\t(time_point): Add constexpr to nonmember arithmetic operators.\n\t* src/chrono.cc: Modify for above.\n\t* src/compatibility-c++0x.cc: Same.\n\t* testsuite/20_util/time_point/nonmember/constexpr.cc: New.\n\t* testsuite/20_util/time_point/1.cc: Modify.\n\t* testsuite/20_util/system_clock/constexpr_data.cc: Modify.\n\t* testsuite/20_util/system_clock/1.cc: Modify.\n\t* testsuite/20_util/monotonic_clock/constexpr_data.cc: Move to...\n\t* testsuite/20_util/steady_clock/constexpr_data.cc: ...here.\n\t* testsuite/30_threads/condition_variable/members/2.cc: Modify.\n\t* testsuite/30_threads/condition_variable_any/members/2.cc: Modify.\n\nFrom-SVN: r176549", "tree": {"sha": "f3fdc8718eaf6ac83f14016d727102242e79634b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3fdc8718eaf6ac83f14016d727102242e79634b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b97ec17bcaa096bb543a2d96b9290747c18399d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b97ec17bcaa096bb543a2d96b9290747c18399d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b97ec17bcaa096bb543a2d96b9290747c18399d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b97ec17bcaa096bb543a2d96b9290747c18399d/comments", "author": null, "committer": null, "parents": [{"sha": "e56925329cb52516dae15ec334ffd89592ad555e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e56925329cb52516dae15ec334ffd89592ad555e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e56925329cb52516dae15ec334ffd89592ad555e"}], "stats": {"total": 159, "additions": 122, "deletions": 37}, "files": [{"sha": "ec1897ca4cd7a459d103fa74d05de6bf97e9ac79", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1b97ec17bcaa096bb543a2d96b9290747c18399d", "patch": "@@ -1,3 +1,20 @@\n+2011-07-20  Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Daniel Krugler  <daniel.kruegler@googlemail.com>\n+\n+\t* include/std/chrono: (system_clock::is_steady): Update to N3291\n+\tfrom is_monotonic.\n+\t(time_point): Add constexpr to nonmember arithmetic operators.\n+\t* src/chrono.cc: Modify for above.\n+\t* src/compatibility-c++0x.cc: Same.\n+\t* testsuite/20_util/time_point/nonmember/constexpr.cc: New.\n+\t* testsuite/20_util/time_point/1.cc: Modify.\n+\t* testsuite/20_util/system_clock/constexpr_data.cc: Modify.\n+\t* testsuite/20_util/system_clock/1.cc: Modify.\n+\t* testsuite/20_util/monotonic_clock/constexpr_data.cc: Move to...\n+\t* testsuite/20_util/steady_clock/constexpr_data.cc: ...here.\n+\t* testsuite/30_threads/condition_variable/members/2.cc: Modify.\n+\t* testsuite/30_threads/condition_variable_any/members/2.cc: Modify.\n+\n 2011-07-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/system_error: Use noexcept.\n@@ -1544,7 +1561,7 @@\n 2011-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/tuple (tuple<>::operator=(tuple&&)): Specify as\n-        noexcept.\n+\tnoexcept.\n \t(__get_helper): Likewise.\n \t(_Head_base<>::_M_head, _Tuple_impl<>::_M_head, _M_tail): Likewise.\n \t* include/bits/move.h (swap): Likewise.\n@@ -2237,8 +2254,8 @@\n \n 2011-03-31  Jeffrey Yasskin  <jyasskin@google.com>\n \n-        * libsupc++/exception_ptr.h: Forward-declare std::type_info.\n-        * libsupc++/nested_exception.h (__throw_with_nested): Remove a\n+\t* libsupc++/exception_ptr.h: Forward-declare std::type_info.\n+\t* libsupc++/nested_exception.h (__throw_with_nested): Remove a\n \tredundant default argument from std::__throw_with_nested.\n \n 2011-03-31  Paolo Carlini  <paolo.carlini@oracle.com>"}, {"sha": "f64fd6e1e7b14bb930408eb272a94e2445c8e073", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=1b97ec17bcaa096bb543a2d96b9290747c18399d", "patch": "@@ -585,35 +585,45 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n     template<typename _Clock, typename _Dur1,\n \t     typename _Rep2, typename _Period2>\n-      inline time_point<_Clock,\n+      inline constexpr time_point<_Clock,\n \ttypename common_type<_Dur1, duration<_Rep2, _Period2>>::type>\n       operator+(const time_point<_Clock, _Dur1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       {\n \ttypedef duration<_Rep2, _Period2>\t\t\t__dur2;\n \ttypedef typename common_type<_Dur1,__dur2>::type\t__ct;\n \ttypedef time_point<_Clock, __ct> \t\t\t__time_point;\n-\treturn __time_point(__lhs) += __rhs;\n+\treturn __time_point(__lhs.time_since_epoch() + __rhs);\n       }\n \n     template<typename _Rep1, typename _Period1,\n \t     typename _Clock, typename _Dur2>\n-      inline time_point<_Clock,\n+      inline constexpr time_point<_Clock,\n \ttypename common_type<duration<_Rep1, _Period1>, _Dur2>::type>\n       operator+(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst time_point<_Clock, _Dur2>& __rhs)\n-      { return __rhs + __lhs; }\n+      { \n+\ttypedef duration<_Rep1, _Period1>\t\t\t__dur1;\n+\ttypedef typename common_type<__dur1,_Dur2>::type\t__ct;\n+\ttypedef time_point<_Clock, __ct> \t\t\t__time_point;\n+\treturn __time_point(__rhs.time_since_epoch() + __lhs); \n+      }\n \n     template<typename _Clock, typename _Dur1,\n \t     typename _Rep2, typename _Period2>\n-      inline time_point<_Clock,\n+      inline constexpr time_point<_Clock,\n \ttypename common_type<_Dur1, duration<_Rep2, _Period2>>::type>\n       operator-(const time_point<_Clock, _Dur1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n-      { return __lhs + (-__rhs); }\n+      { \n+\ttypedef duration<_Rep2, _Period2>\t\t\t__dur2;\n+\ttypedef typename common_type<_Dur1,__dur2>::type\t__ct;\n+\ttypedef time_point<_Clock, __ct> \t\t\t__time_point;\n+\treturn __time_point(__lhs.time_since_epoch() -__rhs); \n+      }\n \n     template<typename _Clock, typename _Dur1, typename _Dur2>\n-      inline typename common_type<_Dur1, _Dur2>::type\n+      inline constexpr typename common_type<_Dur1, _Dur2>::type\n       operator-(const time_point<_Clock, _Dur1>& __lhs,\n \t\tconst time_point<_Clock, _Dur2>& __rhs)\n       { return __lhs.time_since_epoch() - __rhs.time_since_epoch(); }\n@@ -673,7 +683,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \t\t    < system_clock::duration::zero(),\n \t\t    \"a clock's minimum duration cannot be less than its epoch\");\n \n-      static constexpr bool is_monotonic = false;\n+      static constexpr bool is_steady = false;\n \n       static time_point\n       now() throw ();\n@@ -696,21 +706,21 @@ _GLIBCXX_END_NAMESPACE_VERSION\n     };\n \n #ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n-    /// monotonic_clock\n-    struct monotonic_clock\n+    /// steady_clock\n+    struct steady_clock\n     {\n       typedef chrono::nanoseconds \t\t\t\tduration;\n       typedef duration::rep\t  \t\t\t\trep;\n       typedef duration::period\t  \t\t\t\tperiod;\n-      typedef chrono::time_point<monotonic_clock, duration> \ttime_point;\n+      typedef chrono::time_point<steady_clock, duration> \ttime_point;\n \n-      static constexpr bool is_monotonic = true;\n+      static constexpr bool is_steady = true;\n \n       static time_point\n       now();\n     };\n #else\n-    typedef system_clock monotonic_clock;\n+    typedef system_clock steady_clock;\n #endif\n \n     typedef system_clock high_resolution_clock;"}, {"sha": "07c932a1ad8a13cf46e27cf4c9792be6431729ca", "filename": "libstdc++-v3/src/chrono.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc?ref=1b97ec17bcaa096bb543a2d96b9290747c18399d", "patch": "@@ -39,7 +39,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n   {\n   _GLIBCXX_BEGIN_NAMESPACE_VERSION\n  \n-   constexpr bool system_clock::is_monotonic;\n+    constexpr bool system_clock::is_steady;\n \n     system_clock::time_point\n     system_clock::now() throw ()\n@@ -63,10 +63,10 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     }\n     \n #ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n-    constexpr bool monotonic_clock::is_monotonic;\n+    constexpr bool steady_clock::is_steady;\n     \n-    monotonic_clock::time_point\n-    monotonic_clock::now()\n+    steady_clock::time_point\n+    steady_clock::now()\n     {\n       timespec tp;\n       // -EINVAL, -EFAULT"}, {"sha": "c5e1db092a57858a54b68c06a7d1736532c1bd8e", "filename": "libstdc++-v3/src/compatibility-c++0x.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc?ref=1b97ec17bcaa096bb543a2d96b9290747c18399d", "patch": "@@ -1,6 +1,6 @@\n // Compatibility symbols for previous versions, C++0x bits -*- C++ -*-\n \n-// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -81,4 +81,17 @@ namespace std _GLIBCXX_VISIBILITY(default)\n       const size_t __tmp = std::_Hash_impl::hash(__e._M_value);\n       return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp);\n     }\n+\n+\n+  // gcc-4.7.0\n+  // <chrono> changes is_monotonic to is_steady.\n+  namespace chrono\n+  {\n+    struct system_clock\n+    {\n+      static constexpr bool is_monotonic = false;\n+    };\n+    constexpr bool system_clock::is_monotonic;\n+  } // namespace chrono\n }\n+"}, {"sha": "2b497cfa35bf6e7da7c0dc1f84ee537160355327", "filename": "libstdc++-v3/testsuite/20_util/steady_clock/constexpr_data.cc", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fsteady_clock%2Fconstexpr_data.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fsteady_clock%2Fconstexpr_data.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fsteady_clock%2Fconstexpr_data.cc?ref=1b97ec17bcaa096bb543a2d96b9290747c18399d", "patch": "@@ -34,7 +34,7 @@ namespace __gnu_test\n \t  void __constraint()\n \t  {\n \t    constexpr auto v1 __attribute__((unused))\n-\t      = _Ttesttype::is_monotonic;\n+\t      = _Ttesttype::is_steady;\n \t  }\n \t};\n \n@@ -47,6 +47,6 @@ namespace __gnu_test\n int main()\n {\n   __gnu_test::constexpr_member_data test;\n-  test.operator()<std::chrono::monotonic_clock>();\n+  test.operator()<std::chrono::steady_clock>();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/20_util/monotonic_clock/constexpr_data.cc"}, {"sha": "77426e90ce16ae155de8da6e74aa68da9b3bf764", "filename": "libstdc++-v3/testsuite/20_util/system_clock/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fsystem_clock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fsystem_clock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fsystem_clock%2F1.cc?ref=1b97ec17bcaa096bb543a2d96b9290747c18399d", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-require-cstdint \"\" }\n \n-// Copyright (C) 2008, 2009, 2010 Free Software Foundation\n+// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,8 +29,8 @@ main()\n   using namespace std::chrono;\n \n   system_clock::time_point t1 = system_clock::now();\n-  bool is_monotonic = system_clock::is_monotonic;\n-  is_monotonic = is_monotonic; // suppress unused warning\n+  bool is_steady = system_clock::is_steady;\n+  is_steady = is_steady; // suppress unused warning\n   std::time_t t2 = system_clock::to_time_t(t1);\n   system_clock::time_point t3 = system_clock::from_time_t(t2);\n   t3 = t3; // suppress unused warning"}, {"sha": "8312f53659290162494f60622f8e207240ff0727", "filename": "libstdc++-v3/testsuite/20_util/system_clock/constexpr_data.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fsystem_clock%2Fconstexpr_data.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fsystem_clock%2Fconstexpr_data.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fsystem_clock%2Fconstexpr_data.cc?ref=1b97ec17bcaa096bb543a2d96b9290747c18399d", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,7 +34,7 @@ namespace __gnu_test\n \t  void __constraint()\n \t  {\n \t    constexpr auto v1 __attribute__((unused))\n-\t      = _Ttesttype::is_monotonic;\n+\t      = _Ttesttype::is_steady;\n \t  }\n \t};\n "}, {"sha": "11a6ac49525a57a350c429cb22ef7c8365e1ce47", "filename": "libstdc++-v3/testsuite/20_util/time_point/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2F1.cc?ref=1b97ec17bcaa096bb543a2d96b9290747c18399d", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-require-cstdint \"\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation\n+// Copyright (C) 2008, 2009, 2011 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,8 +33,8 @@ test01()\n   time_point<system_clock> t1;\n   VERIFY(t1.time_since_epoch() == system_clock::duration::zero());\n \n-  time_point<monotonic_clock> t2;\n-  VERIFY(t2.time_since_epoch() == monotonic_clock::duration::zero());\n+  time_point<steady_clock> t2;\n+  VERIFY(t2.time_since_epoch() == steady_clock::duration::zero());\n \n   time_point<high_resolution_clock> t3;\n   VERIFY(t3.time_since_epoch() == high_resolution_clock::duration::zero());"}, {"sha": "37b39f431336eb10f492ae95a78235be40615a0f", "filename": "libstdc++-v3/testsuite/20_util/time_point/nonmember/constexpr.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Fnonmember%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Fnonmember%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Fnonmember%2Fconstexpr.cc?ref=1b97ec17bcaa096bb543a2d96b9290747c18399d", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::chrono;\n+  \n+  typedef time_point<system_clock> time_type;\n+\n+  constexpr time_type t1(seconds(1));\n+  constexpr time_type t2(seconds(30));\n+  constexpr time_type t3(seconds(60));\n+  \n+  constexpr duration<int> d0(12);\n+  constexpr duration<int> d1(3);\n+\n+  constexpr auto r1 = t1 + d0;\n+  constexpr auto r2 = d1 + t2;\n+\n+  constexpr auto r3 = t1 - d0;\n+  constexpr auto r4 = t2 - t3;\n+\n+  return 0;\n+}"}, {"sha": "0938bc463280c66f32cb5ffb77d7386a356ee3b9", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/members/2.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc?ref=1b97ec17bcaa096bb543a2d96b9290747c18399d", "patch": "@@ -5,7 +5,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,10 +38,10 @@ void test01()\n       std::mutex m;\n       std::unique_lock<std::mutex> l(m);\n \n-      auto then = std::chrono::monotonic_clock::now();\n+      auto then = std::chrono::steady_clock::now();\n       std::cv_status result = c1.wait_until(l, then + ms);\n       VERIFY( result == std::cv_status::timeout );\n-      VERIFY( (std::chrono::monotonic_clock::now() - then) >= ms );\n+      VERIFY( (std::chrono::steady_clock::now() - then) >= ms );\n       VERIFY( l.owns_lock() );\n     }\n   catch (const std::system_error& e)"}, {"sha": "3ad13a379285f594f324ad83947492ca82804e38", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/members/2.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b97ec17bcaa096bb543a2d96b9290747c18399d/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc?ref=1b97ec17bcaa096bb543a2d96b9290747c18399d", "patch": "@@ -5,7 +5,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -63,10 +63,10 @@ void test01()\n       Mutex m;\n       m.lock();\n \n-      auto then = std::chrono::monotonic_clock::now();\n+      auto then = std::chrono::steady_clock::now();\n       std::cv_status result = c1.wait_until(m, then + ms);\n       VERIFY( result == std::cv_status::timeout );\n-      VERIFY( (std::chrono::monotonic_clock::now() - then) >= ms );\n+      VERIFY( (std::chrono::steady_clock::now() - then) >= ms );\n       VERIFY( m.locked );\n     }\n   catch (const std::system_error& e)"}]}