{"sha": "d3c56bc88f4542e61ffba49b4af8ea1ef0681468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNjNTZiYzg4ZjQ1NDJlNjFmZmJhNDliNGFmOGVhMWVmMDY4MTQ2OA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-12-02T01:03:11Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-12-02T01:03:11Z"}, "message": "Makefile.in, [...]: Fix comment typos.\n\n\t* Makefile.in, mingw32.h, trans.c: Fix comment typos.\n\t* gnat_rm.texi, gnat_ugn.texi: Follow spelling conventions.\n\tFix typos.\n\nFrom-SVN: r119437", "tree": {"sha": "df34e13b6c73eb3b40912ce1df26563acc7cfc41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df34e13b6c73eb3b40912ce1df26563acc7cfc41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3c56bc88f4542e61ffba49b4af8ea1ef0681468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3c56bc88f4542e61ffba49b4af8ea1ef0681468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3c56bc88f4542e61ffba49b4af8ea1ef0681468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3c56bc88f4542e61ffba49b4af8ea1ef0681468/comments", "author": null, "committer": null, "parents": [{"sha": "aba7b40d6785483831ee5968a66bc51c4ee82ae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aba7b40d6785483831ee5968a66bc51c4ee82ae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aba7b40d6785483831ee5968a66bc51c4ee82ae1"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "08cb9de96acbbb9d9c359591da4fd10edb02d487", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3c56bc88f4542e61ffba49b4af8ea1ef0681468/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3c56bc88f4542e61ffba49b4af8ea1ef0681468/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d3c56bc88f4542e61ffba49b4af8ea1ef0681468", "patch": "@@ -1,3 +1,9 @@\n+2006-12-02  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* Makefile.in, mingw32.h, trans.c: Fix comment typos.\n+\t* gnat_rm.texi, gnat_ugn.texi: Follow spelling conventions.\n+\tFix typos.\n+\n 2006-11-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/27936"}, {"sha": "760d42582ec5bdba4a49bc6734cb07a991ce6111", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3c56bc88f4542e61ffba49b4af8ea1ef0681468/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3c56bc88f4542e61ffba49b4af8ea1ef0681468/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=d3c56bc88f4542e61ffba49b4af8ea1ef0681468", "patch": "@@ -1428,7 +1428,7 @@ ifneq ($(EH_MECHANISM),)\n endif\n \n # Use the Ada 2005 version of Ada.Exceptions by default, unless specified\n-# explicitely already. The base files (a-except.ad?) are used only for building\n+# explicitly already. The base files (a-except.ad?) are used only for building\n # the compiler and other basic tools.\n # These base versions lack Ada 2005 additions which would cause bootstrap\n # problems if included in the compiler and other basic tools."}, {"sha": "fad7e14652e75495351c47599deaeba7352d9efb", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3c56bc88f4542e61ffba49b4af8ea1ef0681468/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3c56bc88f4542e61ffba49b4af8ea1ef0681468/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=d3c56bc88f4542e61ffba49b4af8ea1ef0681468", "patch": "@@ -5136,7 +5136,7 @@ prefix) provides the same value as @code{System.Storage_Unit}.\n @findex Stub_Type\n @noindent\n The GNAT implementation of remote access-to-classwide types is\n-organised as described in AARM section E.4 (20.t): a value of an RACW type\n+organized as described in AARM section E.4 (20.t): a value of an RACW type\n (designating a remote object) is represented as a normal access\n value, pointing to a \"stub\" object which in turn contains the\n necessary information to contact the designated remote object. A\n@@ -10522,7 +10522,7 @@ when one of these values is read, any nonzero value is treated as True.\n For 64-bit OpenVMS systems, access types (other than those for unconstrained\n arrays) are 64-bits long. An exception to this rule is for the case of\n C-convention access types where there is no explicit size clause present (or\n-inheritied for derived types). In this case, GNAT chooses to make these\n+inherited for derived types). In this case, GNAT chooses to make these\n pointers 32-bits, which provides an easier path for migration of 32-bit legacy\n code. size clause specifying 64-bits must be used to obtain a 64-bit pointer.\n \n@@ -11754,7 +11754,7 @@ is only used for wide characters with a code greater than @code{16#FF#}.\n \n Note that brackets coding is not normally used in the context of\n Wide_Text_IO or Wide_Wide_Text_IO, since it is really just designed as\n-a portable way of encoding source files. In the contect of Wide_Text_IO\n+a portable way of encoding source files. In the context of Wide_Text_IO\n or Wide_Wide_Text_IO, it can only be used if the file does not contain\n any instance of the left bracket character other than to encode wide\n character values using the brackets encoding method. In practice it is"}, {"sha": "214369a37bd08dcf64c5b014fb6418a4c2d38565", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3c56bc88f4542e61ffba49b4af8ea1ef0681468/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3c56bc88f4542e61ffba49b4af8ea1ef0681468/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=d3c56bc88f4542e61ffba49b4af8ea1ef0681468", "patch": "@@ -4674,7 +4674,7 @@ A range in a @code{for} loop that is known to be null or might be null\n @noindent\n The following section lists compiler switches that are available\n to control the handling of warning messages. It is also possible\n-to excercise much finer control over what warnings are issued and\n+to exercise much finer control over what warnings are issued and\n suppressed using the GNAT pragma Warnings, which is documented\n in the GNAT Reference manual.\n "}, {"sha": "7b6353178e3d9eb20735bcdd3d8404ef4c62ef21", "filename": "gcc/ada/mingw32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3c56bc88f4542e61ffba49b4af8ea1ef0681468/gcc%2Fada%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3c56bc88f4542e61ffba49b4af8ea1ef0681468/gcc%2Fada%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmingw32.h?ref=d3c56bc88f4542e61ffba49b4af8ea1ef0681468", "patch": "@@ -48,7 +48,7 @@\n \n #else\n \n-/*  Older MingW versions have no defintion for _tfreopen, add it here to have a\n+/*  Older MingW versions have no definition for _tfreopen, add it here to have a\n     proper build without unicode support.  */\n #ifndef _tfreopen\n #define _tfreopen   freopen"}, {"sha": "7b9c260ff6b11ad76e97ad8a8108b58bc75fc9c7", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3c56bc88f4542e61ffba49b4af8ea1ef0681468/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3c56bc88f4542e61ffba49b4af8ea1ef0681468/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=d3c56bc88f4542e61ffba49b4af8ea1ef0681468", "patch": "@@ -1199,7 +1199,7 @@ Case_Statement_to_gnu (Node_Id gnat_node)\n \n          /* If the case value is a subtype that raises Constraint_Error at\n              run-time because of a wrong bound, then gnu_low or gnu_high\n-             is not transtaleted into an INTEGER_CST.  In such a case, we need\n+             is not translated into an INTEGER_CST.  In such a case, we need\n              to ensure that the when statement is not added in the tree,\n              otherwise it will crash the gimplifier.  */\n          if ((!gnu_low || TREE_CODE (gnu_low) == INTEGER_CST)"}]}