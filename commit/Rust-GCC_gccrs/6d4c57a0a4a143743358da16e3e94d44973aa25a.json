{"sha": "6d4c57a0a4a143743358da16e3e94d44973aa25a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ0YzU3YTBhNGExNDM3NDMzNThkYTE2ZTNlOTRkNDQ5NzNhYTI1YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-03-26T18:16:26Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-03-26T18:16:26Z"}, "message": "re PR c++/5682 (ICE in build_secondary_vtable)\n\ncp:\n\tPR c++/5682\n\t* cp-tree.h (BINFO_PRIMARY_P): Explain meaning better.\n\t(dfs_skip_nonprimary_vbases_unmarkedp): Remove.\n\t(dfs_skip_nonprimary_vbases_markedp): Remove.\n\t* search.c (get_shared_vbase_if_not_primary): Remove.\n\t(dfs_skip_nonprimary_vbases_unmarkedp): Remove.\n\t(dfs_skip_nonprimary_vbases_markedp): Remove.\n\t(dfs_unmarked_real_bases_queue_p): Just get the canonical binfo.\n\t(dfs_marked_real_bases_queue_p): Likewise.\ntestsuite:\n\t* g++.dg/abi/vbase9.C: New test.\n\nFrom-SVN: r51392", "tree": {"sha": "2a62c5e916d31c46a8eeb77e76610fc30280ce11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a62c5e916d31c46a8eeb77e76610fc30280ce11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d4c57a0a4a143743358da16e3e94d44973aa25a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4c57a0a4a143743358da16e3e94d44973aa25a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d4c57a0a4a143743358da16e3e94d44973aa25a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4c57a0a4a143743358da16e3e94d44973aa25a/comments", "author": null, "committer": null, "parents": [{"sha": "fc4a714bd5fc4dc144eef41ac38797f30cd8b416", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc4a714bd5fc4dc144eef41ac38797f30cd8b416", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc4a714bd5fc4dc144eef41ac38797f30cd8b416"}], "stats": {"total": 142, "additions": 69, "deletions": 73}, "files": [{"sha": "6f31ebd82d55fe57e40d4387af870a581fef4d00", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4c57a0a4a143743358da16e3e94d44973aa25a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4c57a0a4a143743358da16e3e94d44973aa25a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6d4c57a0a4a143743358da16e3e94d44973aa25a", "patch": "@@ -1,3 +1,15 @@\n+2002-03-26  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/5682\n+\t* cp-tree.h (BINFO_PRIMARY_P): Explain meaning better.\n+\t(dfs_skip_nonprimary_vbases_unmarkedp): Remove.\n+\t(dfs_skip_nonprimary_vbases_markedp): Remove.\n+\t* search.c (get_shared_vbase_if_not_primary): Remove.\n+\t(dfs_skip_nonprimary_vbases_unmarkedp): Remove.\n+\t(dfs_skip_nonprimary_vbases_markedp): Remove.\n+\t(dfs_unmarked_real_bases_queue_p): Just get the canonical binfo.\n+\t(dfs_marked_real_bases_queue_p): Likewise.\n+\n 2002-03-26  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cp-lang.c (LANG_HOOKS_MARK_TREE): Redefine."}, {"sha": "783d38246862f422c861475803225d477ee682a5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4c57a0a4a143743358da16e3e94d44973aa25a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4c57a0a4a143743358da16e3e94d44973aa25a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6d4c57a0a4a143743358da16e3e94d44973aa25a", "patch": "@@ -1638,12 +1638,10 @@ struct lang_type\n #define SET_BINFO_PUSHDECLS_MARKED(NODE) SET_BINFO_VTABLE_PATH_MARKED (NODE)\n #define CLEAR_BINFO_PUSHDECLS_MARKED(NODE) CLEAR_BINFO_VTABLE_PATH_MARKED (NODE)\n \n-/* Nonzero if this BINFO is a primary base class.\n+/* Nonzero if this BINFO is a primary base class.  Note, this can be\n+   set for non-canononical virtual bases. For a virtual primary base\n+   you might also need to check whether it is canonical.  */\n \n-   In the TYPE_BINFO hierarchy, this flag is never set for a base\n-   class of a non-primary virtual base.  This flag is only valid for\n-   paths (given by BINFO_INHERITANCE_CHAIN) that really exist in the\n-   final object.  */\n #define BINFO_PRIMARY_P(NODE) \\\n   (BINFO_PRIMARY_BASE_OF (NODE) != NULL_TREE)\n \n@@ -4116,8 +4114,6 @@ extern tree dfs_walk_real                      PARAMS ((tree,\n extern tree dfs_unmark                          PARAMS ((tree, void *));\n extern tree markedp                             PARAMS ((tree, void *));\n extern tree unmarkedp                           PARAMS ((tree, void *));\n-extern tree dfs_skip_nonprimary_vbases_unmarkedp PARAMS ((tree, void *));\n-extern tree dfs_skip_nonprimary_vbases_markedp  PARAMS ((tree, void *));\n extern tree dfs_unmarked_real_bases_queue_p     PARAMS ((tree, void *));\n extern tree dfs_marked_real_bases_queue_p       PARAMS ((tree, void *));\n extern tree dfs_skip_vbases                     PARAMS ((tree, void *));"}, {"sha": "6e8ac11a038fd22e73f40119268d6679c9fa4d5a", "filename": "gcc/cp/search.c", "status": "modified", "additions": 21, "deletions": 66, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4c57a0a4a143743358da16e3e94d44973aa25a/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4c57a0a4a143743358da16e3e94d44973aa25a/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=6d4c57a0a4a143743358da16e3e94d44973aa25a", "patch": "@@ -127,7 +127,6 @@ static int protected_accessible_p PARAMS ((tree, tree, tree));\n static int friend_accessible_p PARAMS ((tree, tree, tree));\n static void setup_class_bindings PARAMS ((tree, int));\n static int template_self_reference_p PARAMS ((tree, tree));\n-static tree get_shared_vbase_if_not_primary PARAMS ((tree, void *));\n static tree dfs_find_vbase_instance PARAMS ((tree, void *));\n static tree dfs_get_pure_virtuals PARAMS ((tree, void *));\n static tree dfs_build_inheritance_graph_order PARAMS ((tree, void *));\n@@ -1950,81 +1949,30 @@ look_for_overrides_r (type, fndecl)\n   return look_for_overrides (type, fndecl);\n }\n \n-/* A queue function for dfs_walk that skips any nonprimary virtual\n-   bases and any already marked bases.  */\n+/* A queue function to use with dfs_walk that only walks into\n+   canonical bases.  DATA should be the type of the complete object,\n+   or a TREE_LIST whose TREE_PURPOSE is the type of the complete\n+   object.  By using this function as a queue function, you will walk\n+   over exactly those BINFOs that actually exist in the complete\n+   object, including those for virtual base classes.  If you\n+   SET_BINFO_MARKED for each binfo you process, you are further\n+   guaranteed that you will walk into each virtual base class exactly\n+   once.  */\n \n tree\n-dfs_skip_nonprimary_vbases_unmarkedp (binfo, data)\n-     tree binfo;\n-     void *data ATTRIBUTE_UNUSED;\n-{\n-  if (TREE_VIA_VIRTUAL (binfo) && !BINFO_PRIMARY_P (binfo))\n-    /* This is a non-primary virtual base.  Skip it.  */\n-    return NULL_TREE;\n-\n-  return unmarkedp (binfo, NULL);\n-}\n-\n-/* A queue function for dfs_walk that skips any nonprimary virtual\n-   bases and any unmarked bases.  */\n-\n-tree\n-dfs_skip_nonprimary_vbases_markedp (binfo, data)\n-     tree binfo;\n-     void *data ATTRIBUTE_UNUSED;\n-{\n-  if (TREE_VIA_VIRTUAL (binfo) && !BINFO_PRIMARY_P (binfo))\n-    /* This is a non-primary virtual base.  Skip it.  */\n-    return NULL_TREE;\n-\n-  return markedp (binfo, NULL);\n-}\n-\n-/* If BINFO is a non-primary virtual baseclass (in the hierarchy\n-   dominated by TYPE), and no primary copy appears anywhere in the\n-   hierarchy, return the shared copy.  If a primary copy appears\n-   elsewhere, return NULL_TREE.  Otherwise, return BINFO itself; it is\n-   either a non-virtual base or a primary virtual base.  */\n-\n-static tree\n-get_shared_vbase_if_not_primary (binfo, data)\n+dfs_unmarked_real_bases_queue_p (binfo, data)\n      tree binfo;\n      void *data;\n {\n-  if (TREE_VIA_VIRTUAL (binfo) && !BINFO_PRIMARY_P (binfo))\n+  if (TREE_VIA_VIRTUAL (binfo))\n     {\n       tree type = (tree) data;\n \n       if (TREE_CODE (type) == TREE_LIST)\n \ttype = TREE_PURPOSE (type);\n-\n-      /* This is a non-primary virtual base.  If there is no primary\n-\t version, get the shared version.  */\n       binfo = binfo_for_vbase (BINFO_TYPE (binfo), type);\n-      if (BINFO_PRIMARY_P (binfo))\n-\treturn NULL_TREE;\n     }\n-\n-  return binfo;\n-}\n-\n-/* A queue function to use with dfs_walk that prevents travel into any\n-   nonprimary virtual base, or its baseclasses.  DATA should be the\n-   type of the complete object, or a TREE_LIST whose TREE_PURPOSE is\n-   the type of the complete object.  By using this function as a queue\n-   function, you will walk over exactly those BINFOs that actually\n-   exist in the complete object, including those for virtual base\n-   classes.  If you SET_BINFO_MARKED for each binfo you process, you\n-   are further guaranteed that you will walk into each virtual base\n-   class exactly once.  */\n-\n-tree\n-dfs_unmarked_real_bases_queue_p (binfo, data)\n-     tree binfo;\n-     void *data;\n-{\n-  binfo = get_shared_vbase_if_not_primary (binfo, data); \n-  return binfo ? unmarkedp (binfo, NULL) : NULL_TREE;\n+  return unmarkedp (binfo, NULL);\n }\n \n /* Like dfs_unmarked_real_bases_queue_p but walks only into things\n@@ -2035,8 +1983,15 @@ dfs_marked_real_bases_queue_p (binfo, data)\n      tree binfo;\n      void *data;\n {\n-  binfo = get_shared_vbase_if_not_primary (binfo, data); \n-  return binfo ? markedp (binfo, NULL) : NULL_TREE;\n+  if (TREE_VIA_VIRTUAL (binfo))\n+    {\n+      tree type = (tree) data;\n+\n+      if (TREE_CODE (type) == TREE_LIST)\n+\ttype = TREE_PURPOSE (type);\n+      binfo = binfo_for_vbase (BINFO_TYPE (binfo), type);\n+    }\n+  return markedp (binfo, NULL);\n }\n \n /* A queue function that skips all virtual bases (and their "}, {"sha": "f78d27e9d14ef045ee16cfc2f5ae3f5fafd2b8fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4c57a0a4a143743358da16e3e94d44973aa25a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4c57a0a4a143743358da16e3e94d44973aa25a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d4c57a0a4a143743358da16e3e94d44973aa25a", "patch": "@@ -1,3 +1,7 @@\n+2002-03-26  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/abi/vbase9.C: New test.\n+\n 2002-03-26  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* gcc.dg/arm-asm.c: New test."}, {"sha": "4a0540d06f5956bf1ff3746cd1756075bfaf51c4", "filename": "gcc/testsuite/g++.dg/abi/vbase9.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4c57a0a4a143743358da16e3e94d44973aa25a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4c57a0a4a143743358da16e3e94d44973aa25a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase9.C?ref=6d4c57a0a4a143743358da16e3e94d44973aa25a", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 17 Mar 2002 <nathan@codesourcery.com>\n+// Origin: Jakub Jelinek <jakub@redhat.com>\n+\n+// PR 5681. ICE in build_secondary_vtable\n+\n+struct A {\n+  virtual int f1 ();\n+};\n+\n+struct B : virtual A {};\n+\n+struct C {\n+  virtual int f2 ();\n+};\n+\n+struct E : A {};\n+\n+struct D : E,  B {};\n+\n+struct F : virtual D {};\n+\n+struct G : virtual F,  C {};\n+\n+struct H : virtual F {};\n+\n+struct I : G,  H {};"}]}