{"sha": "0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJmYzlhNjRjM2IxNjdhOGQzZjFiOWIxYWIwY2FjZWQzMGNhNTU0ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T08:52:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T08:52:00Z"}, "message": "[multiple changes]\n\n2011-08-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* get_scos.adb: Ignore chaining indicators not currently supported\n\tby Ada.\n\n2011-08-29  Arnaud Charlet  <charlet@adacore.com>\n\n\t* system.ads: Minor editing.\n\n2011-08-29  Arnaud Charlet  <charlet@adacore.com>\n\n\t* bindgen.adb (Gen_Elab_Calls): Generate calls to subp'Elab_Subp_Body in\n\tCodePeer mode.\n\t* sem_attr.ads, sem_attr.adb, exp_Attr.adb, sem_ch6.adb: Add handling of\n\tAttribute_Elab_Subp_Body.\n\t* snames.ads-tmpl (Attribute_Elab_Subp_Body, Name_Elab_Subp_Body): New.\n\t* sem_util.adb: Update comments.\n\nFrom-SVN: r178165", "tree": {"sha": "180057e9ba8d4c3cf2672fb0566a3983b4975d40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/180057e9ba8d4c3cf2672fb0566a3983b4975d40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/comments", "author": null, "committer": null, "parents": [{"sha": "828d4cf0c9778ede598a93b89924485aa5833772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828d4cf0c9778ede598a93b89924485aa5833772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828d4cf0c9778ede598a93b89924485aa5833772"}], "stats": {"total": 103, "additions": 81, "deletions": 22}, "files": [{"sha": "e888daba69c47f230a6952a8c1f6a7cc425d2ba8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e", "patch": "@@ -1,3 +1,21 @@\n+2011-08-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* get_scos.adb: Ignore chaining indicators not currently supported\n+\tby Ada.\n+\n+2011-08-29  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* system.ads: Minor editing.\n+\n+2011-08-29  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* bindgen.adb (Gen_Elab_Calls): Generate calls to subp'Elab_Subp_Body in\n+\tCodePeer mode.\n+\t* sem_attr.ads, sem_attr.adb, exp_Attr.adb, sem_ch6.adb: Add handling of\n+\tAttribute_Elab_Subp_Body.\n+\t* snames.ads-tmpl (Attribute_Elab_Subp_Body, Name_Elab_Subp_Body): New.\n+\t* sem_util.adb: Update comments.\n+\n 2011-08-29  Thomas Quinot  <quinot@adacore.com>\n \n \t* par_sco.adb, scos.adb, scos.ads, put_scos.adb, get_scos.adb: Record"}, {"sha": "6e0d5bdef36dfdc02bef6f8bcf907cb3bf0ffd6b", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e", "patch": "@@ -984,7 +984,12 @@ package body Bindgen is\n \n             --  Case of no elaboration code\n \n-            elsif U.No_Elab then\n+            elsif U.No_Elab\n+              and then (not CodePeer_Mode\n+                        or else U.Utype = Is_Spec\n+                        or else U.Utype = Is_Spec_Only\n+                        or else U.Unit_Kind /= 's')\n+            then\n \n                --  The only case in which we have to do something is if this\n                --  is a body, with a separate spec, where the separate spec\n@@ -1019,10 +1024,7 @@ package body Bindgen is\n             --  The uname_E increment is skipped if this is a separate spec,\n             --  since it will be done when we process the body.\n \n-            --  Ignore subprograms in CodePeer mode, since no useful\n-            --  elaboration subprogram is needed by CodePeer.\n-\n-            elsif U.Unit_Kind /= 's' or else not CodePeer_Mode then\n+            else\n                Check_Elab_Flag :=\n                  not CodePeer_Mode\n                    and then (Force_Checking_Of_Elaboration_Flags\n@@ -1055,12 +1057,18 @@ package body Bindgen is\n                   if Name_Buffer (Name_Len) = 's' then\n                      Name_Buffer (Name_Len - 1 .. Name_Len + 8) :=\n                        \"'elab_spec\";\n+                     Name_Len := Name_Len + 8;\n+\n+                  elsif U.Unit_Kind = 's' and CodePeer_Mode then\n+                     Name_Buffer (Name_Len - 1 .. Name_Len + 13) :=\n+                       \"'elab_subp_body\";\n+                     Name_Len := Name_Len + 13;\n+\n                   else\n                      Name_Buffer (Name_Len - 1 .. Name_Len + 8) :=\n                        \"'elab_body\";\n+                     Name_Len := Name_Len + 8;\n                   end if;\n-\n-                  Name_Len := Name_Len + 8;\n                end if;\n \n                Set_Casing (U.Icasing);"}, {"sha": "21703d8df6830709d69b30692d25d9cca130f732", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e", "patch": "@@ -1813,13 +1813,14 @@ package body Exp_Attr is\n       --  and then the Elab_Body/Spec attribute is replaced by a reference\n       --  to this defining identifier.\n \n-      when Attribute_Elab_Body |\n-           Attribute_Elab_Spec =>\n+      when Attribute_Elab_Body      |\n+           Attribute_Elab_Subp_Body |\n+           Attribute_Elab_Spec      =>\n \n          --  Leave attribute unexpanded in CodePeer mode: the gnat2scil\n          --  back-end knows how to handle this attribute directly.\n \n-         if CodePeer_Mode then\n+         if CodePeer_Mode or else Id = Attribute_Elab_Subp_Body then\n             return;\n          end if;\n "}, {"sha": "43c27b570a74e54e914dfe8a0337374ca5bdf2d3", "filename": "gcc/ada/get_scos.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fget_scos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fget_scos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_scos.adb?ref=0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e", "patch": "@@ -387,6 +387,18 @@ begin\n                elsif C = ' ' then\n                   Skip_Spaces;\n \n+               elsif C = 'T' or else C = 'F' then\n+\n+                  --  Chaining indicator: skip for now???\n+\n+                  declare\n+                     Loc1, Loc2 : Source_Location;\n+                     pragma Unreferenced (Loc1, Loc2);\n+                  begin\n+                     Skipc;\n+                     Get_Source_Location_Range (Loc1, Loc2);\n+                  end;\n+\n                else\n                   raise Data_Error;\n                end if;"}, {"sha": "12fce9508f9a0901f2de9a1e08397584c1fc4a6c", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e", "patch": "@@ -1945,6 +1945,8 @@ package body Sem_Attr is\n            and then\n          Aname /= Name_Elab_Spec\n            and then\n+         Aname /= Name_Elab_Subp_Body\n+           and then\n          Aname /= Name_UET_Address\n            and then\n          Aname /= Name_Enabled\n@@ -3014,7 +3016,10 @@ package body Sem_Attr is\n \n       --  Also handles processing for Elab_Spec\n \n-      when Attribute_Elab_Body | Attribute_Elab_Spec =>\n+      when Attribute_Elab_Body      |\n+           Attribute_Elab_Spec      |\n+           Attribute_Elab_Subp_Body =>\n+\n          Check_E0;\n          Check_Unit_Name (P);\n          Set_Etype (N, Standard_Void_Type);\n@@ -7712,6 +7717,7 @@ package body Sem_Attr is\n            Attribute_Elaborated               |\n            Attribute_Elab_Body                |\n            Attribute_Elab_Spec                |\n+           Attribute_Elab_Subp_Body           |\n            Attribute_Enabled                  |\n            Attribute_External_Tag             |\n            Attribute_Fast_Math                |"}, {"sha": "0e8561ae729595bfbd11cc9e2f9a0eafdb10b56f", "filename": "gcc/ada/sem_attr.ads", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fsem_attr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fsem_attr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.ads?ref=0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -172,6 +172,17 @@ package Sem_Attr is\n       --  Ada code, e.g. if it is necessary to do selective reelaboration to\n       --  fix some error.\n \n+      --------------------\n+      -- Elab_Subp_Body --\n+      --------------------\n+\n+      Attribute_Elab_Subp_Body => True,\n+      --  This attribute can only be applied to a library level subprogram\n+      --  name and is only relevant in CodePeer mode. It returns the entity\n+      --  for the corresponding elaboration procedure for elaborating the body\n+      --  of the referenced subprogram unit. This is used in the main generated\n+      --  elaboration procedure by the binder in CodePeer mode only.\n+\n       ---------------\n       -- Elab_Spec --\n       ---------------"}, {"sha": "f4934547ad08f8f45850ec1f801c43532698e49b", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e", "patch": "@@ -1156,11 +1156,12 @@ package body Sem_Ch6 is\n          end loop;\n       end if;\n \n-      --  Special processing for Elab_Spec and Elab_Body calls\n+      --  Special processing for Elab_Spec, Elab_Body and Elab_Subp_Body calls\n \n       if Nkind (P) = N_Attribute_Reference\n         and then (Attribute_Name (P) = Name_Elab_Spec\n-                   or else Attribute_Name (P) = Name_Elab_Body)\n+                   or else Attribute_Name (P) = Name_Elab_Body\n+                   or else Attribute_Name (P) = Name_Elab_Subp_Body)\n       then\n          if Present (Actuals) then\n             Error_Msg_N"}, {"sha": "9c8d9c5b18145459013412603f2ff5d5e6a28c78", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e", "patch": "@@ -7584,9 +7584,9 @@ package body Sem_Util is\n \n    begin\n       --  Verify that prefix is analyzed and has the proper form. Note that\n-      --  the attributes Elab_Spec, Elab_Body, and UET_Address, which also\n-      --  produce the address of an entity, do not analyze their prefix\n-      --  because they denote entities that are not necessarily visible.\n+      --  the attributes Elab_Spec, Elab_Body, Elab_Subp_Body and UET_Address,\n+      --  which also produce the address of an entity, do not analyze their\n+      --  prefix because they denote entities that are not necessarily visible.\n       --  Neither of them can apply to a protected type.\n \n       return Ada_Version >= Ada_2005"}, {"sha": "6df207703ac57330e6dd86acaba70726d2bb819f", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e", "patch": "@@ -882,6 +882,7 @@ package Snames is\n    First_Entity_Attribute_Name         : constant Name_Id := N + $;\n    Name_Elab_Body                      : constant Name_Id := N + $; -- GNAT\n    Name_Elab_Spec                      : constant Name_Id := N + $; -- GNAT\n+   Name_Elab_Subp_Body                 : constant Name_Id := N + $; -- GNAT\n    Name_Storage_Pool                   : constant Name_Id := N + $;\n \n    --  These attributes are the ones that return types\n@@ -1414,6 +1415,7 @@ package Snames is\n \n       Attribute_Elab_Body,\n       Attribute_Elab_Spec,\n+      Attribute_Elab_Subp_Body,\n       Attribute_Storage_Pool,\n \n       --  Type attributes"}, {"sha": "437afbc9a59c7f599b7a4bf80a630c02e98eb895", "filename": "gcc/ada/system.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fsystem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e/gcc%2Fada%2Fsystem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem.ads?ref=0bfc9a64c3b167a8d3f1b9b1ab0caced30ca554e", "patch": "@@ -123,11 +123,11 @@ private\n    -- System Implementation Parameters --\n    --------------------------------------\n \n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n+   --  These parameters provide information about the target that is used by\n+   --  the compiler. They are in the private part of System, where they can be\n+   --  accessed using the special circuitry in the Targparm unit whose source\n+   --  should be consulted for more detailed descriptions of the individual\n+   --  switch values.\n \n    --  This version of system.ads is used only for building the compiler.\n    --  We really ought to use the proper target system (i.e. the one that"}]}