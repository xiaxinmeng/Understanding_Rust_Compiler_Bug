{"sha": "611b7b5aeef385b464df9d8ed8bfd5aeb5038b28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjExYjdiNWFlZWYzODViNDY0ZGY5ZDhlZDhiZmQ1YWViNTAzOGIyOA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2009-10-08T07:01:02Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2009-10-08T07:01:02Z"}, "message": "mn10300.h (CONSTANT_ADDRESS_P): Do not allow CONST_DOUBLEs.\n\n        * config/mn10300/mn10300.h (CONSTANT_ADDRESS_P): Do not allow\n        CONST_DOUBLEs.\n\nFrom-SVN: r152551", "tree": {"sha": "209e1d750841276c7e458759766c3c3277dd4510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/209e1d750841276c7e458759766c3c3277dd4510"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/611b7b5aeef385b464df9d8ed8bfd5aeb5038b28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/611b7b5aeef385b464df9d8ed8bfd5aeb5038b28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/611b7b5aeef385b464df9d8ed8bfd5aeb5038b28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/611b7b5aeef385b464df9d8ed8bfd5aeb5038b28/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c93ed23858a4d0ed6a63f9a75fba798b048e8c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c93ed23858a4d0ed6a63f9a75fba798b048e8c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c93ed23858a4d0ed6a63f9a75fba798b048e8c3"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "70b28616c7250adb43664fd3df1c63aaaa6f60ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/611b7b5aeef385b464df9d8ed8bfd5aeb5038b28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/611b7b5aeef385b464df9d8ed8bfd5aeb5038b28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=611b7b5aeef385b464df9d8ed8bfd5aeb5038b28", "patch": "@@ -1,3 +1,8 @@\n+2009-10-08  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/mn10300/mn10300.h (CONSTANT_ADDRESS_P): Do not allow\n+\tCONST_DOUBLEs.\n+\n 2009-10-08  Andreas Tobler  <a.tobler@schweiz.org>\n \n \tPR bootstrap/37739"}, {"sha": "6c0f461700f56071196acad4195dc558865392b4", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/611b7b5aeef385b464df9d8ed8bfd5aeb5038b28/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/611b7b5aeef385b464df9d8ed8bfd5aeb5038b28/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=611b7b5aeef385b464df9d8ed8bfd5aeb5038b28", "patch": "@@ -620,7 +620,7 @@ struct cum_arg {int nbytes; };\n \f\n /* 1 if X is an rtx for a constant that is a valid address.  */\n \n-#define CONSTANT_ADDRESS_P(X)   CONSTANT_P (X)\n+#define CONSTANT_ADDRESS_P(X)   (CONSTANT_P (X) && GET_CODE (X) != CONST_DOUBLE)\n \n /* Maximum number of registers that can appear in a valid memory address.  */\n "}]}