{"sha": "741ac903839251f16d331f4d1c11f444eaec684f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQxYWM5MDM4MzkyNTFmMTZkMzMxZjRkMWMxMWY0NDRlYWVjNjg0Zg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-07-25T19:06:06Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-07-25T19:06:06Z"}, "message": "c-common.c (fname_as_string, [...]): Constify.\n\n\t* c-common.c (fname_as_string, c_type_hash): Constify.\n\t* c-typeck.c (free_all_tagged_tu_seen_up_to): Likewise.\n\t* cgraph.c (edge_hash, edge_eq): Likewise.\n\t* dwarf2out.c (decl_die_table_eq, decl_loc_table_eq): Likewise.\n\t* emit-rtl.c (mem_attrs_htab_eq, reg_attrs_htab_hash,\n\treg_attrs_htab_eq): Likewise.\n\t* except.c (t2r_eq, t2r_hash, ttypes_filter_eq, ehl_hash, ehl_eq):\n\tLikewise.\n\t* genautomata.c (const_reserv_sets_t, const_unit_decl_t,\n\tconst_decl_t, const_state_t, const_automata_list_el_t): New.\n\t(first_out_arc, DECL_UNIT, DECL_BYPASS, DECL_AUTOMATON, DECL_EXCL,\n\tDECL_PRESENCE, DECL_ABSENCE, DECL_RESERV, DECL_INSN_RESERV,\n\tautomaton_decl_hash, automaton_decl_eq_p, insn_decl_hash,\n\tinsn_decl_eq_p, decl_hash, decl_eq_p, alt_state_cmp,\n\treserv_sets_cmp, reserv_sets_eq, state_hash, state_eq_p,\n\tautomata_list_hash, automata_list_eq_p, compare_states_for_equiv,\n\tcompare_max_occ_cycle_nums, out_state_arcs_num,\n\tcompare_transition_els_num, units_cmp, state_reservs_cmp):\n\tConstify.\n\t* genmodes.c (cmp_modes): Likewise.\n\t* ggc-common.c (saving_htab_hash, saving_htab_eq): Likewise.\n\t* gimplify.c (compare_case_labels): Likewise.\n\t* ipa-type-escape.c (get_name_of_type, type_brand_s): Likewise.\n\t* loop-unroll.c (si_info_hash, ve_info_hash): Likewise.\n\t* matrix-reorg.c (mtt_info_hash): Likewise.\n\t* postreload-gcse.c (hash_expr_for_htab, expr_equiv_p): Likewise.\n\t* rtl-factoring.c (const_p_hash_bucket, const_p_hash_elem): New.\n\t(htab_hash_bucket, htab_hash_elem): Constify.\n\t* tree-browser.c (TB_parent_eq): Likewise.\n\t* tree-scalar-evolution.c (hash_scev_info): Likewise.\n\t* tree-ssa-alias.c (sort_tags_by_id): Likewise.\n\t* tree-ssa-coalesce.c (const_coalesce_pair_p): New.\n\t(coalesce_pair_map_hash, coalesce_pair_map_eq, compare_pairs):\n\tConstify.\n\t* tree-ssa-dom.c (avail_expr_hash, avail_expr_eq): Likewise.\n\t* tree-ssa-pre.c (const_expr_pred_trans_t): New.\n\t(expr_pred_trans_hash, expr_pred_trans_eq): Constify.\n\t* tree-ssa-sccvn.c (const_vn_binary_op_t, const_vn_unary_op_t,\n\tconst_vn_phi_t, const_vn_reference_op_t, const_vn_reference_t):\n\tNew.\n\t(vn_reference_op_eq, vn_reference_hash, vn_reference_eq,\n\tvn_unary_op_hash, vn_unary_op_eq, vn_binary_op_hash,\n\tvn_binary_op_eq, vn_phi_hash, vn_phi_eq): Constify.\n\t* tree-ssa-threadupdate.c (redirection_data_hash,\n\tredirection_data_eq): Likewise. \n\t* tree-ssa-uncprop.c (equiv_hash, equiv_eq): Likewise.\n\t* tree-ssa.c (var_ann_eq): Likewise.\n\t* tree-vrp.c (compare_case_labels): Likewise.\n\t* tree.c (int_cst_hash_hash, int_cst_hash_eq,\n\ttree_map_base_marked_p, type_hash_marked_p, tree_check_failed,\n\ttree_not_check_failed, tree_class_check_failed,\n\ttree_range_check_failed, tree_not_class_check_failed,\n\tomp_clause_check_failed, omp_clause_range_check_failed,\n\ttree_contains_struct_check_failed, tree_operand_check_failed):\n\tLikewise. \n\t* tree.h (tree_contains_struct_check_failed, tree_check_failed,\n\ttree_not_check_failed, tree_class_check_failed,\n\ttree_range_check_failed, tree_not_class_check_failed,\n\ttree_operand_check_failed, omp_clause_operand_check_failed,\n\ttree_operand_length): Likewise. \n\t* var-tracking.c (const_variable): New.\n\t(variable_htab_hash, variable_htab_eq): Constify.\n\t* varasm.c (const_desc_hash): Likewise.\n\ncp:\n\t* decl.c (typename_hash, typename_compare): Constify.\n\t* mangle.c (hash_type, compare_type): Likewise.\n\t* pt.c (eq_local_specializations, hash_local_specialization):\n\tLikewise.\n\t* tree.c (cplus_array_hash, cplus_array_compare, list_hash_eq,\n\tlist_hash): Likewise.\n\t* typeck2.c (pat_compare): Likewise.\n\nfortran:\n\t* gfortran.h (generate_isocbinding_symbol): Constify.\n\t* symbol.c (gen_special_c_interop_ptr, gen_cptr_param,\n\tgenerate_isocbinding_symbol): Likewise.\n\njava:\n\t* class.c (java_treetreehash_hash, java_treetreehash_compare):\n\tConstify. \n\t* expr.c (type_assertion_eq): Likewise.\n\t* jcf-io.c (compare_path): Likewise.\n\t* jcf-parse.c (cmpstringp): Likewise.\n\t* verify-impl.c (get_one_type, compute_argument_types,\n\tcompute_return_type): Likewise. \n\nobjc:\n\t* objc-act.c (volatilized_hash, volatilized_eq, string_hash,\n\tstring_eq): Constify.\n\nFrom-SVN: r126925", "tree": {"sha": "376f2dafdfe0716aa1dd01defc992cc04d880df7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/376f2dafdfe0716aa1dd01defc992cc04d880df7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/741ac903839251f16d331f4d1c11f444eaec684f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/741ac903839251f16d331f4d1c11f444eaec684f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/741ac903839251f16d331f4d1c11f444eaec684f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/741ac903839251f16d331f4d1c11f444eaec684f/comments", "author": null, "committer": null, "parents": [{"sha": "39f86293e53c0869d6a17ba386c41beed76b9de4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f86293e53c0869d6a17ba386c41beed76b9de4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39f86293e53c0869d6a17ba386c41beed76b9de4"}], "stats": {"total": 563, "additions": 340, "deletions": 223}, "files": [{"sha": "6b01c6a3f179f964829cac19940b478d822b176a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -1,3 +1,69 @@\n+2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-common.c (fname_as_string, c_type_hash): Constify.\n+\t* c-typeck.c (free_all_tagged_tu_seen_up_to): Likewise.\n+\t* cgraph.c (edge_hash, edge_eq): Likewise.\n+\t* dwarf2out.c (decl_die_table_eq, decl_loc_table_eq): Likewise.\n+\t* emit-rtl.c (mem_attrs_htab_eq, reg_attrs_htab_hash,\n+\treg_attrs_htab_eq): Likewise.\n+\t* except.c (t2r_eq, t2r_hash, ttypes_filter_eq, ehl_hash, ehl_eq):\n+\tLikewise.\n+\t* genautomata.c (const_reserv_sets_t, const_unit_decl_t,\n+\tconst_decl_t, const_state_t, const_automata_list_el_t): New.\n+\t(first_out_arc, DECL_UNIT, DECL_BYPASS, DECL_AUTOMATON, DECL_EXCL,\n+\tDECL_PRESENCE, DECL_ABSENCE, DECL_RESERV, DECL_INSN_RESERV,\n+\tautomaton_decl_hash, automaton_decl_eq_p, insn_decl_hash,\n+\tinsn_decl_eq_p, decl_hash, decl_eq_p, alt_state_cmp,\n+\treserv_sets_cmp, reserv_sets_eq, state_hash, state_eq_p,\n+\tautomata_list_hash, automata_list_eq_p, compare_states_for_equiv,\n+\tcompare_max_occ_cycle_nums, out_state_arcs_num,\n+\tcompare_transition_els_num, units_cmp, state_reservs_cmp):\n+\tConstify.\n+\t* genmodes.c (cmp_modes): Likewise.\n+\t* ggc-common.c (saving_htab_hash, saving_htab_eq): Likewise.\n+\t* gimplify.c (compare_case_labels): Likewise.\n+\t* ipa-type-escape.c (get_name_of_type, type_brand_s): Likewise.\n+\t* loop-unroll.c (si_info_hash, ve_info_hash): Likewise.\n+\t* matrix-reorg.c (mtt_info_hash): Likewise.\n+\t* postreload-gcse.c (hash_expr_for_htab, expr_equiv_p): Likewise.\n+\t* rtl-factoring.c (const_p_hash_bucket, const_p_hash_elem): New.\n+\t(htab_hash_bucket, htab_hash_elem): Constify.\n+\t* tree-browser.c (TB_parent_eq): Likewise.\n+\t* tree-scalar-evolution.c (hash_scev_info): Likewise.\n+\t* tree-ssa-alias.c (sort_tags_by_id): Likewise.\n+\t* tree-ssa-coalesce.c (const_coalesce_pair_p): New.\n+\t(coalesce_pair_map_hash, coalesce_pair_map_eq, compare_pairs):\n+\tConstify.\n+\t* tree-ssa-dom.c (avail_expr_hash, avail_expr_eq): Likewise.\n+\t* tree-ssa-pre.c (const_expr_pred_trans_t): New.\n+\t(expr_pred_trans_hash, expr_pred_trans_eq): Constify.\n+\t* tree-ssa-sccvn.c (const_vn_binary_op_t, const_vn_unary_op_t,\n+\tconst_vn_phi_t, const_vn_reference_op_t, const_vn_reference_t):\n+\tNew.\n+\t(vn_reference_op_eq, vn_reference_hash, vn_reference_eq,\n+\tvn_unary_op_hash, vn_unary_op_eq, vn_binary_op_hash,\n+\tvn_binary_op_eq, vn_phi_hash, vn_phi_eq): Constify.\n+\t* tree-ssa-threadupdate.c (redirection_data_hash,\n+\tredirection_data_eq): Likewise. \n+\t* tree-ssa-uncprop.c (equiv_hash, equiv_eq): Likewise.\n+\t* tree-ssa.c (var_ann_eq): Likewise.\n+\t* tree-vrp.c (compare_case_labels): Likewise.\n+\t* tree.c (int_cst_hash_hash, int_cst_hash_eq,\n+\ttree_map_base_marked_p, type_hash_marked_p, tree_check_failed,\n+\ttree_not_check_failed, tree_class_check_failed,\n+\ttree_range_check_failed, tree_not_class_check_failed,\n+\tomp_clause_check_failed, omp_clause_range_check_failed,\n+\ttree_contains_struct_check_failed, tree_operand_check_failed):\n+\tLikewise. \n+\t* tree.h (tree_contains_struct_check_failed, tree_check_failed,\n+\ttree_not_check_failed, tree_class_check_failed,\n+\ttree_range_check_failed, tree_not_class_check_failed,\n+\ttree_operand_check_failed, omp_clause_operand_check_failed,\n+\ttree_operand_length): Likewise. \n+\t* var-tracking.c (const_variable): New.\n+\t(variable_htab_hash, variable_htab_eq): Constify.\n+\t* varasm.c (const_desc_hash): Likewise.\n+\n 2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* expr.c (handled_component_p): Constify."}, {"sha": "764a50f011e90a5f5e4f7290c34f83edbb75c1fe", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -780,7 +780,7 @@ fname_as_string (int pretty_p)\n       if (cpp_interpret_string (parse_in, &strname, 1, &cstr, false))\n \t{\n \t  XDELETEVEC (namep);\n-\t  return (char *) cstr.text;\n+\t  return (const char *) cstr.text;\n \t}\n     }\n   else\n@@ -3011,7 +3011,7 @@ c_type_hash (const void *p)\n {\n   int i = 0;\n   int shift, size;\n-  tree t = (tree) p;\n+  const_tree const t = (const_tree) p;\n   tree t2;\n   switch (TREE_CODE (t))\n     {"}, {"sha": "cb1f23b4643008fa091fda28d3e1a39953ab5260", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -1024,8 +1024,8 @@ free_all_tagged_tu_seen_up_to (const struct tagged_tu_seen_cache *tu_til)\n   const struct tagged_tu_seen_cache *tu = tagged_tu_seen_base;\n   while (tu != tu_til)\n     {\n-      const struct tagged_tu_seen_cache *tu1\n-\t= (const struct tagged_tu_seen_cache*)tu;\n+      const struct tagged_tu_seen_cache *const tu1\n+\t= (const struct tagged_tu_seen_cache *) tu;\n       tu = tu1->next;\n       free ((void *)tu1);\n     }"}, {"sha": "422f4425e060e214d63ff92743df4d24475f9bdc", "filename": "gcc/cgraph.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -246,15 +246,15 @@ cgraph_node_for_asm (tree asmname)\n static hashval_t\n edge_hash (const void *x)\n {\n-  return htab_hash_pointer (((struct cgraph_edge *) x)->call_stmt);\n+  return htab_hash_pointer (((const struct cgraph_edge *) x)->call_stmt);\n }\n \n /* Return nonzero if decl_id of die_struct X is the same as UID of decl *Y.  */\n \n static int\n edge_eq (const void *x, const void *y)\n {\n-  return ((struct cgraph_edge *) x)->call_stmt == y;\n+  return ((const struct cgraph_edge *) x)->call_stmt == y;\n }\n \n /* Return callgraph edge representing CALL_EXPR statement.  */"}, {"sha": "cc423ede4ed74de4ca3681fe00aa5f1a35c55b66", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -1,3 +1,13 @@\n+2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* decl.c (typename_hash, typename_compare): Constify.\n+\t* mangle.c (hash_type, compare_type): Likewise.\n+\t* pt.c (eq_local_specializations, hash_local_specialization):\n+\tLikewise.\n+\t* tree.c (cplus_array_hash, cplus_array_compare, list_hash_eq,\n+\tlist_hash): Likewise.\n+\t* typeck2.c (pat_compare): Likewise.\n+\n 2007-07-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* method.c (implicitly_declare_fn): Increase alignment if member"}, {"sha": "3262a310ca3295ac784d4d08a8b25feba88c40e2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -2716,7 +2716,7 @@ static hashval_t\n typename_hash (const void* k)\n {\n   hashval_t hash;\n-  tree t = (tree) k;\n+  const_tree const t = (const_tree) k;\n \n   hash = (htab_hash_pointer (TYPE_CONTEXT (t))\n \t  ^ htab_hash_pointer (DECL_NAME (TYPE_NAME (t))));\n@@ -2738,11 +2738,8 @@ typedef struct typename_info {\n static int\n typename_compare (const void * k1, const void * k2)\n {\n-  tree t1;\n-  const typename_info *t2;\n-\n-  t1 = (tree) k1;\n-  t2 = (const typename_info *) k2;\n+  const_tree const t1 = (const_tree) k1;\n+  const typename_info *const t2 = (const typename_info *) k2;\n \n   return (DECL_NAME (TYPE_NAME (t1)) == t2->name\n \t  && TYPE_CONTEXT (t1) == t2->scope"}, {"sha": "d708a2bf1f75561abc78e85c4102b294f4af937f", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -2836,15 +2836,15 @@ static GTY ((param_is (union tree_node))) htab_t conv_type_names;\n static hashval_t\n hash_type (const void *val)\n {\n-  return (hashval_t) TYPE_UID (TREE_TYPE ((tree) val));\n+  return (hashval_t) TYPE_UID (TREE_TYPE ((const_tree) val));\n }\n \n /* Compare VAL1 (a node in the table) with VAL2 (a TYPE).  */\n \n static int\n compare_type (const void *val1, const void *val2)\n {\n-  return TREE_TYPE ((tree) val1) == (tree) val2;\n+  return TREE_TYPE ((const_tree) val1) == (const_tree) val2;\n }\n \n /* Return an identifier for the mangled unqualified name for a"}, {"sha": "fc5af163e1c291bdf966a8d34abe64d6fd868d97", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -1302,15 +1302,15 @@ reregister_specialization (tree spec, tree tmpl, tree new_spec)\n static int\n eq_local_specializations (const void *p1, const void *p2)\n {\n-  return TREE_VALUE ((tree) p1) == (tree) p2;\n+  return TREE_VALUE ((const_tree) p1) == (const_tree) p2;\n }\n \n /* Hash P1, an entry in the local specializations table.  */\n \n static hashval_t\n hash_local_specialization (const void* p1)\n {\n-  return htab_hash_pointer (TREE_VALUE ((tree) p1));\n+  return htab_hash_pointer (TREE_VALUE ((const_tree) p1));\n }\n \n /* Like register_specialization, but for local declarations.  We are"}, {"sha": "772df4cd8f84aa47d72adafd2d3c8283f9e18fc4", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -489,7 +489,7 @@ static hashval_t\n cplus_array_hash (const void* k)\n {\n   hashval_t hash;\n-  tree t = (tree) k;\n+  const_tree const t = (const_tree) k;\n \n   hash = (htab_hash_pointer (TREE_TYPE (t))\n \t  ^ htab_hash_pointer (TYPE_DOMAIN (t)));\n@@ -508,8 +508,8 @@ typedef struct cplus_array_info {\n static int\n cplus_array_compare (const void * k1, const void * k2)\n {\n-  tree t1 = (tree) k1;\n-  const cplus_array_info *t2 = (const cplus_array_info*) k2;\n+  const_tree const t1 = (const_tree) k1;\n+  const cplus_array_info *const t2 = (const cplus_array_info*) k2;\n \n   if (!comptypes (TREE_TYPE (t1), t2->type, COMPARE_STRUCTURAL))\n     return 0;\n@@ -967,8 +967,8 @@ struct list_proxy\n static int\n list_hash_eq (const void* entry, const void* data)\n {\n-  tree t = (tree) entry;\n-  struct list_proxy *proxy = (struct list_proxy *) data;\n+  const_tree const t = (const_tree) entry;\n+  const struct list_proxy *const proxy = (const struct list_proxy *) data;\n \n   return (TREE_VALUE (t) == proxy->value\n \t  && TREE_PURPOSE (t) == proxy->purpose\n@@ -1003,7 +1003,7 @@ list_hash_pieces (tree purpose, tree value, tree chain)\n static hashval_t\n list_hash (const void* p)\n {\n-  tree t = (tree) p;\n+  const_tree const t = (const_tree) p;\n   return list_hash_pieces (TREE_PURPOSE (t),\n \t\t\t   TREE_VALUE (t),\n \t\t\t   TREE_CHAIN (t));"}, {"sha": "10f410c8ea863635334069252fc2ae0f4dde05e2", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -149,9 +149,9 @@ pat_calc_hash (const void* val)\n static int\n pat_compare (const void* val1, const void* val2)\n {\n-  const struct pending_abstract_type *pat1 =\n+  const struct pending_abstract_type *const pat1 =\n      (const struct pending_abstract_type *) val1;\n-  tree type2 = (tree)val2;\n+  const_tree const type2 = (const_tree)val2;\n \n   return (pat1->type == type2);\n }"}, {"sha": "6134a9bf26a86080b68a543739336e601730b78a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -5694,7 +5694,7 @@ decl_die_table_hash (const void *x)\n static int\n decl_die_table_eq (const void *x, const void *y)\n {\n-  return (((const_dw_die_ref) x)->decl_id == DECL_UID ((const tree) y));\n+  return (((const_dw_die_ref) x)->decl_id == DECL_UID ((const_tree) y));\n }\n \n /* Return the DIE associated with a given declaration.  */\n@@ -5719,7 +5719,7 @@ decl_loc_table_hash (const void *x)\n static int\n decl_loc_table_eq (const void *x, const void *y)\n {\n-  return (((const var_loc_list *) x)->decl_id == DECL_UID ((const tree) y));\n+  return (((const var_loc_list *) x)->decl_id == DECL_UID ((const_tree) y));\n }\n \n /* Return the var_loc list associated with a given declaration.  */"}, {"sha": "e9aebe1b3329728d9005eaf8025d82dc68d02ee2", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -263,8 +263,8 @@ mem_attrs_htab_hash (const void *x)\n static int\n mem_attrs_htab_eq (const void *x, const void *y)\n {\n-  mem_attrs *p = (mem_attrs *) x;\n-  mem_attrs *q = (mem_attrs *) y;\n+  const mem_attrs *const p = (const mem_attrs *) x;\n+  const mem_attrs *const q = (const mem_attrs *) y;\n \n   return (p->alias == q->alias && p->offset == q->offset\n \t  && p->size == q->size && p->align == q->align\n@@ -315,7 +315,7 @@ get_mem_attrs (HOST_WIDE_INT alias, tree expr, rtx offset, rtx size,\n static hashval_t\n reg_attrs_htab_hash (const void *x)\n {\n-  reg_attrs *p = (reg_attrs *) x;\n+  const reg_attrs *const p = (const reg_attrs *) x;\n \n   return ((p->offset * 1000) ^ (long) p->decl);\n }\n@@ -327,8 +327,8 @@ reg_attrs_htab_hash (const void *x)\n static int\n reg_attrs_htab_eq (const void *x, const void *y)\n {\n-  reg_attrs *p = (reg_attrs *) x;\n-  reg_attrs *q = (reg_attrs *) y;\n+  const reg_attrs *const p = (const reg_attrs *) x;\n+  const reg_attrs *const q = (const reg_attrs *) y;\n \n   return (p->decl == q->decl && p->offset == q->offset);\n }"}, {"sha": "7451e51c265613fb924df5d1cb1992e569f42483", "filename": "gcc/except.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -1129,16 +1129,16 @@ eh_region_outermost (struct function *ifun, int region_a, int region_b)\n static int\n t2r_eq (const void *pentry, const void *pdata)\n {\n-  tree entry = (tree) pentry;\n-  tree data = (tree) pdata;\n+  const_tree const entry = (const_tree) pentry;\n+  const_tree const data = (const_tree) pdata;\n \n   return TREE_PURPOSE (entry) == data;\n }\n \n static hashval_t\n t2r_hash (const void *pentry)\n {\n-  tree entry = (tree) pentry;\n+  const_tree const entry = (const_tree) pentry;\n   return TREE_HASH (TREE_PURPOSE (entry));\n }\n \n@@ -1183,8 +1183,9 @@ struct ttypes_filter GTY(())\n static int\n ttypes_filter_eq (const void *pentry, const void *pdata)\n {\n-  const struct ttypes_filter *entry = (const struct ttypes_filter *) pentry;\n-  tree data = (tree) pdata;\n+  const struct ttypes_filter *const entry\n+    = (const struct ttypes_filter *) pentry;\n+  const_tree const data = (const_tree) pdata;\n \n   return entry->t == data;\n }\n@@ -2131,7 +2132,8 @@ finish_eh_generation (void)\n static hashval_t\n ehl_hash (const void *pentry)\n {\n-  struct ehl_map_entry *entry = (struct ehl_map_entry *) pentry;\n+  const struct ehl_map_entry *const entry\n+    = (const struct ehl_map_entry *) pentry;\n \n   /* 2^32 * ((sqrt(5) - 1) / 2) */\n   const hashval_t scaled_golden_ratio = 0x9e3779b9;\n@@ -2141,8 +2143,10 @@ ehl_hash (const void *pentry)\n static int\n ehl_eq (const void *pentry, const void *pdata)\n {\n-  struct ehl_map_entry *entry = (struct ehl_map_entry *) pentry;\n-  struct ehl_map_entry *data = (struct ehl_map_entry *) pdata;\n+  const struct ehl_map_entry *const entry\n+    = (const struct ehl_map_entry *) pentry;\n+  const struct ehl_map_entry *const data\n+    = (const struct ehl_map_entry *) pdata;\n \n   return entry->label == data->label;\n }"}, {"sha": "cb7cae7968fc727f1ad2a79f16044255b0b61b20", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -1,3 +1,9 @@\n+2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gfortran.h (generate_isocbinding_symbol): Constify.\n+\t* symbol.c (gen_special_c_interop_ptr, gen_cptr_param,\n+\tgenerate_isocbinding_symbol): Likewise.\n+\n 2007-07-24 Paul Thomas <pault@gcc.gnu.org>\n \n \tPR fortran/31205"}, {"sha": "a0b79e55402d9237cb54ecd1042714ceff5f21f4", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -2137,7 +2137,7 @@ try verify_c_interop_param (gfc_symbol *);\n try verify_bind_c_sym (gfc_symbol *, gfc_typespec *, int, gfc_common_head *);\n try verify_bind_c_derived_type (gfc_symbol *);\n try verify_com_block_vars_c_interop (gfc_common_head *);\n-void generate_isocbinding_symbol (const char *, iso_c_binding_symbol, char *);\n+void generate_isocbinding_symbol (const char *, iso_c_binding_symbol, const char *);\n gfc_symbol *get_iso_c_sym (gfc_symbol *, char *, char *, int);\n int gfc_get_sym_tree (const char *, gfc_namespace *, gfc_symtree **);\n int gfc_get_ha_symbol (const char *, gfc_symbol **);"}, {"sha": "3674b31cd321a865710020cf06617265ca02eee5", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -3235,7 +3235,7 @@ gen_special_c_interop_ptr (int ptr_id, const char *ptr_name,\n          current ns.  */\n       generate_isocbinding_symbol (module_name, ptr_id == ISOCBINDING_NULL_PTR \n                                    ? ISOCBINDING_PTR : ISOCBINDING_FUNPTR,\n-                                   (char *) (ptr_id == ISOCBINDING_NULL_PTR \n+                                   (const char *) (ptr_id == ISOCBINDING_NULL_PTR \n \t\t\t\t   ? \"_gfortran_iso_c_binding_c_ptr\"\n \t\t\t\t   : \"_gfortran_iso_c_binding_c_funptr\"));\n \n@@ -3356,10 +3356,10 @@ gen_cptr_param (gfc_formal_arglist **head,\n          trying to use one of the iso_c_binding functions that need it.  */\n       if (iso_c_sym_id == ISOCBINDING_F_PROCPOINTER)\n \tgenerate_isocbinding_symbol (module_name, ISOCBINDING_FUNPTR,\n-\t\t\t\t     (char *)c_ptr_type);\n+\t\t\t\t     (const char *)c_ptr_type);\n       else\n \tgenerate_isocbinding_symbol (module_name, ISOCBINDING_PTR,\n-\t\t\t\t     (char *)c_ptr_type);\n+\t\t\t\t     (const char *)c_ptr_type);\n \n       gfc_get_ha_symbol (c_ptr_type, &(c_ptr_sym));\n     }\n@@ -3579,9 +3579,9 @@ build_formal_args (gfc_symbol *new_proc_sym,\n \n void\n generate_isocbinding_symbol (const char *mod_name, iso_c_binding_symbol s,\n-\t\t\t     char *local_name)\n+\t\t\t     const char *local_name)\n {\n-  char *name = (local_name && local_name[0]) ? local_name\n+  const char *const name = (local_name && local_name[0]) ? local_name\n \t\t\t\t\t     : c_interop_kinds_table[s].name;\n   gfc_symtree *tmp_symtree = NULL;\n   gfc_symbol *tmp_sym = NULL;\n@@ -3803,7 +3803,7 @@ generate_isocbinding_symbol (const char *mod_name, iso_c_binding_symbol s,\n                     generate_isocbinding_symbol\n \t\t      (mod_name, s == ISOCBINDING_FUNLOC\n \t\t\t\t ? ISOCBINDING_FUNPTR : ISOCBINDING_PTR,\n-\t\t       (char *)(s == ISOCBINDING_FUNLOC\n+\t\t       (const char *)(s == ISOCBINDING_FUNLOC\n                                 ? \"_gfortran_iso_c_binding_c_funptr\"\n \t\t\t\t: \"_gfortran_iso_c_binding_c_ptr\"));\n                     tmp_sym->ts.derived ="}, {"sha": "979fad602ec8f1db7ba23fa79018a21252f6988f", "filename": "gcc/genautomata.c", "status": "modified", "additions": 67, "deletions": 62, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -130,6 +130,7 @@ typedef unsigned HOST_WIDE_INT set_el_t;\n /* Reservations of function units are represented by value of the following\n    type.  */\n typedef set_el_t *reserv_sets_t;\n+typedef const set_el_t *const_reserv_sets_t;\n \n /* The following structure describes a ticker.  */\n struct ticker\n@@ -182,17 +183,21 @@ struct state_ainsn_table;\n \n /* The following typedefs are for brevity.  */\n typedef struct unit_decl *unit_decl_t;\n+typedef const struct unit_decl *const_unit_decl_t;\n typedef struct decl *decl_t;\n+typedef const struct decl *const_decl_t;\n typedef struct regexp *regexp_t;\n typedef struct unit_set_el *unit_set_el_t;\n typedef struct pattern_set_el *pattern_set_el_t;\n typedef struct pattern_reserv *pattern_reserv_t;\n typedef struct alt_state *alt_state_t;\n typedef struct state *state_t;\n+typedef const struct state *const_state_t;\n typedef struct arc *arc_t;\n typedef struct ainsn *ainsn_t;\n typedef struct automaton *automaton_t;\n typedef struct automata_list_el *automata_list_el_t;\n+typedef const struct automata_list_el *const_automata_list_el_t;\n typedef struct state_ainsn_table *state_ainsn_table_t;\n \n /* Undefined position.  */\n@@ -228,7 +233,7 @@ static int check_presence_pattern_sets (reserv_sets_t,\n \t\t\t\t\treserv_sets_t, int);\n static int check_absence_pattern_sets  (reserv_sets_t, reserv_sets_t,\n \t\t\t\t\tint);\n-static arc_t first_out_arc             (state_t);\n+static arc_t first_out_arc             (const_state_t);\n static arc_t next_out_arc              (arc_t);\n \n \f\n@@ -873,56 +878,56 @@ struct state_ainsn_table\n #if defined ENABLE_CHECKING && (GCC_VERSION >= 2007)\n \n #define DECL_UNIT(d) __extension__\t\t\t\t\t\\\n-(({ struct decl *const _decl = (d);\t\t\t\t\t\\\n+(({ __typeof (d) const _decl = (d);\t\t\t\t\t\\\n      if (_decl->mode != dm_unit)\t\t\t\t\t\\\n        decl_mode_check_failed (_decl->mode, \"dm_unit\",\t\t\t\\\n \t\t\t       __FILE__, __LINE__, __FUNCTION__);\t\\\n      &(_decl)->decl.unit; }))\n \n #define DECL_BYPASS(d) __extension__\t\t\t\t\t\\\n-(({ struct decl *const _decl = (d);\t\t\t\t\t\\\n+(({ __typeof (d) const _decl = (d);\t\t\t\t\t\\\n      if (_decl->mode != dm_bypass)\t\t\t\t\t\\\n        decl_mode_check_failed (_decl->mode, \"dm_bypass\",\t\t\\\n \t\t\t       __FILE__, __LINE__, __FUNCTION__);\t\\\n      &(_decl)->decl.bypass; }))\n \n #define DECL_AUTOMATON(d) __extension__\t\t\t\t\t\\\n-(({ struct decl *const _decl = (d);\t\t\t\t\t\\\n+(({ __typeof (d) const _decl = (d);\t\t\t\t\t\\\n      if (_decl->mode != dm_automaton)\t\t\t\t\t\\\n        decl_mode_check_failed (_decl->mode, \"dm_automaton\",\t\t\\\n \t\t\t       __FILE__, __LINE__, __FUNCTION__);\t\\\n      &(_decl)->decl.automaton; }))\n \n #define DECL_EXCL(d) __extension__\t\t\t\t\t\\\n-(({ struct decl *const _decl = (d);\t\t\t\t\t\\\n+(({ __typeof (d) const _decl = (d);\t\t\t\t\t\\\n      if (_decl->mode != dm_excl)\t\t\t\t\t\\\n        decl_mode_check_failed (_decl->mode, \"dm_excl\",\t\t\t\\\n \t\t\t       __FILE__, __LINE__, __FUNCTION__);\t\\\n      &(_decl)->decl.excl; }))\n \n #define DECL_PRESENCE(d) __extension__\t\t\t\t\t\\\n-(({ struct decl *const _decl = (d);\t\t\t\t\t\\\n+(({ __typeof (d) const _decl = (d);\t\t\t\t\t\\\n      if (_decl->mode != dm_presence)\t\t\t\t\t\\\n        decl_mode_check_failed (_decl->mode, \"dm_presence\",\t\t\\\n \t\t\t       __FILE__, __LINE__, __FUNCTION__);\t\\\n      &(_decl)->decl.presence; }))\n \n #define DECL_ABSENCE(d) __extension__\t\t\t\t\t\\\n-(({ struct decl *const _decl = (d);\t\t\t\t\t\\\n+(({ __typeof (d) const _decl = (d);\t\t\t\t\t\\\n      if (_decl->mode != dm_absence)\t\t\t\t\t\\\n        decl_mode_check_failed (_decl->mode, \"dm_absence\",\t\t\\\n \t\t\t       __FILE__, __LINE__, __FUNCTION__);\t\\\n      &(_decl)->decl.absence; }))\n \n #define DECL_RESERV(d) __extension__\t\t\t\t\t\\\n-(({ struct decl *const _decl = (d);\t\t\t\t\t\\\n+(({ __typeof (d) const _decl = (d);\t\t\t\t\t\\\n      if (_decl->mode != dm_reserv)\t\t\t\t\t\\\n        decl_mode_check_failed (_decl->mode, \"dm_reserv\",\t\t\\\n \t\t\t       __FILE__, __LINE__, __FUNCTION__);\t\\\n      &(_decl)->decl.reserv; }))\n \n #define DECL_INSN_RESERV(d) __extension__\t\t\t\t\\\n-(({ struct decl *const _decl = (d);\t\t\t\t\t\\\n+(({ __typeof (d) const _decl = (d);\t\t\t\t\t\\\n      if (_decl->mode != dm_insn_reserv)\t\t\t\t\t\\\n        decl_mode_check_failed (_decl->mode, \"dm_insn_reserv\",\t\t\\\n \t\t\t       __FILE__, __LINE__, __FUNCTION__);\t\\\n@@ -1737,7 +1742,7 @@ string_hash (const char *string)\n static hashval_t\n automaton_decl_hash (const void *automaton_decl)\n {\n-  const decl_t decl = (decl_t) automaton_decl;\n+  const_decl_t const decl = (const_decl_t) automaton_decl;\n \n   gcc_assert (decl->mode != dm_automaton\n \t      || DECL_AUTOMATON (decl)->name);\n@@ -1752,8 +1757,8 @@ static int\n automaton_decl_eq_p (const void* automaton_decl_1,\n \t\t     const void* automaton_decl_2)\n {\n-  const decl_t decl1 = (decl_t) automaton_decl_1;\n-  const decl_t decl2 = (decl_t) automaton_decl_2;\n+  const_decl_t const decl1 = (const_decl_t) automaton_decl_1;\n+  const_decl_t const decl2 = (const_decl_t) automaton_decl_2;\n \n   gcc_assert (decl1->mode == dm_automaton\n \t      && DECL_AUTOMATON (decl1)->name\n@@ -1838,7 +1843,7 @@ finish_automaton_decl_table (void)\n static hashval_t\n insn_decl_hash (const void *insn_decl)\n {\n-  const decl_t decl = (decl_t) insn_decl;\n+  const_decl_t const decl = (const_decl_t) insn_decl;\n \n   gcc_assert (decl->mode == dm_insn_reserv\n \t      && DECL_INSN_RESERV (decl)->name);\n@@ -1851,8 +1856,8 @@ insn_decl_hash (const void *insn_decl)\n static int\n insn_decl_eq_p (const void *insn_decl_1, const void *insn_decl_2)\n {\n-  const decl_t decl1 = (decl_t) insn_decl_1;\n-  const decl_t decl2 = (decl_t) insn_decl_2;\n+  const_decl_t const decl1 = (const_decl_t) insn_decl_1;\n+  const_decl_t const decl2 = (const_decl_t) insn_decl_2;\n \n   gcc_assert (decl1->mode == dm_insn_reserv\n \t      && DECL_INSN_RESERV (decl1)->name\n@@ -1936,7 +1941,7 @@ finish_insn_decl_table (void)\n static hashval_t\n decl_hash (const void *decl)\n {\n-  const decl_t d = (const decl_t) decl;\n+  const_decl_t const d = (const_decl_t) decl;\n \n   gcc_assert ((d->mode == dm_unit && DECL_UNIT (d)->name)\n \t      || (d->mode == dm_reserv && DECL_RESERV (d)->name));\n@@ -1950,8 +1955,8 @@ decl_hash (const void *decl)\n static int\n decl_eq_p (const void *decl_1, const void *decl_2)\n {\n-  const decl_t d1 = (const decl_t) decl_1;\n-  const decl_t d2 = (const decl_t) decl_2;\n+  const_decl_t const d1 = (const_decl_t) decl_1;\n+  const_decl_t const d2 = (const_decl_t) decl_2;\n \n   gcc_assert ((d1->mode == dm_unit && DECL_UNIT (d1)->name)\n \t      || (d1->mode == dm_reserv && DECL_RESERV (d1)->name));\n@@ -3182,11 +3187,11 @@ free_alt_states (alt_state_t alt_states_list)\n static int\n alt_state_cmp (const void *alt_state_ptr_1, const void *alt_state_ptr_2)\n {\n-  if ((*(alt_state_t *) alt_state_ptr_1)->state->unique_num\n-      == (*(alt_state_t *) alt_state_ptr_2)->state->unique_num)\n+  if ((*(const alt_state_t *) alt_state_ptr_1)->state->unique_num\n+      == (*(const alt_state_t *) alt_state_ptr_2)->state->unique_num)\n     return 0;\n-  else if ((*(alt_state_t *) alt_state_ptr_1)->state->unique_num\n-\t   < (*(alt_state_t *) alt_state_ptr_2)->state->unique_num)\n+  else if ((*(const alt_state_t *) alt_state_ptr_1)->state->unique_num\n+\t   < (*(const alt_state_t *) alt_state_ptr_2)->state->unique_num)\n     return -1;\n   else\n     return 1;\n@@ -3376,11 +3381,11 @@ reserv_sets_hash_value (reserv_sets_t reservs)\n \n /* Comparison of given reservation sets.  */\n static int\n-reserv_sets_cmp (reserv_sets_t reservs_1, reserv_sets_t reservs_2)\n+reserv_sets_cmp (const_reserv_sets_t reservs_1, const_reserv_sets_t reservs_2)\n {\n   int reservs_num;\n-  set_el_t *reserv_ptr_1;\n-  set_el_t *reserv_ptr_2;\n+  const set_el_t *reserv_ptr_1;\n+  const set_el_t *reserv_ptr_2;\n \n   gcc_assert (reservs_1 && reservs_2);\n   reservs_num = els_in_reservs;\n@@ -3402,7 +3407,7 @@ reserv_sets_cmp (reserv_sets_t reservs_1, reserv_sets_t reservs_2)\n \n /* The function checks equality of the reservation sets.  */\n static int\n-reserv_sets_eq (reserv_sets_t reservs_1, reserv_sets_t reservs_2)\n+reserv_sets_eq (const_reserv_sets_t reservs_1, const_reserv_sets_t reservs_2)\n {\n   return reserv_sets_cmp (reservs_1, reservs_2) == 0;\n }\n@@ -3654,12 +3659,12 @@ state_hash (const void *state)\n   unsigned int hash_value;\n   alt_state_t alt_state;\n \n-  if (((state_t) state)->component_states == NULL)\n-    hash_value = reserv_sets_hash_value (((state_t) state)->reservs);\n+  if (((const_state_t) state)->component_states == NULL)\n+    hash_value = reserv_sets_hash_value (((const_state_t) state)->reservs);\n   else\n     {\n       hash_value = 0;\n-      for (alt_state = ((state_t) state)->component_states;\n+      for (alt_state = ((const_state_t) state)->component_states;\n            alt_state != NULL;\n            alt_state = alt_state->next_sorted_alt_state)\n         hash_value = (((hash_value >> (sizeof (unsigned) - 1) * CHAR_BIT)\n@@ -3668,7 +3673,7 @@ state_hash (const void *state)\n     }\n   hash_value = (((hash_value >> (sizeof (unsigned) - 1) * CHAR_BIT)\n                  | (hash_value << CHAR_BIT))\n-                + ((state_t) state)->automaton->automaton_order_num);\n+                + ((const_state_t) state)->automaton->automaton_order_num);\n   return hash_value;\n }\n \n@@ -3679,17 +3684,17 @@ state_eq_p (const void *state_1, const void *state_2)\n   alt_state_t alt_state_1;\n   alt_state_t alt_state_2;\n \n-  if (((state_t) state_1)->automaton != ((state_t) state_2)->automaton)\n+  if (((const_state_t) state_1)->automaton != ((const_state_t) state_2)->automaton)\n     return 0;\n-  else if (((state_t) state_1)->component_states == NULL\n-           && ((state_t) state_2)->component_states == NULL)\n-    return reserv_sets_eq (((state_t) state_1)->reservs,\n-\t\t\t   ((state_t) state_2)->reservs);\n-  else if (((state_t) state_1)->component_states != NULL\n-           && ((state_t) state_2)->component_states != NULL)\n-    {\n-      for (alt_state_1 = ((state_t) state_1)->component_states,\n-           alt_state_2 = ((state_t) state_2)->component_states;\n+  else if (((const_state_t) state_1)->component_states == NULL\n+           && ((const_state_t) state_2)->component_states == NULL)\n+    return reserv_sets_eq (((const_state_t) state_1)->reservs,\n+\t\t\t   ((const_state_t) state_2)->reservs);\n+  else if (((const_state_t) state_1)->component_states != NULL\n+           && ((const_state_t) state_2)->component_states != NULL)\n+    {\n+      for (alt_state_1 = ((const_state_t) state_1)->component_states,\n+           alt_state_2 = ((const_state_t) state_2)->component_states;\n            alt_state_1 != NULL && alt_state_2 != NULL;\n            alt_state_1 = alt_state_1->next_sorted_alt_state,\n \t   alt_state_2 = alt_state_2->next_sorted_alt_state)\n@@ -3908,7 +3913,7 @@ add_arc (state_t from_state, state_t to_state, ainsn_t ainsn)\n \n /* The function returns the first arc starting from STATE.  */\n static arc_t\n-first_out_arc (state_t state)\n+first_out_arc (const_state_t state)\n {\n   return state->first_out_arc;\n }\n@@ -3997,10 +4002,10 @@ static hashval_t\n automata_list_hash (const void *automata_list)\n {\n   unsigned int hash_value;\n-  automata_list_el_t curr_automata_list_el;\n+  const_automata_list_el_t curr_automata_list_el;\n \n   hash_value = 0;\n-  for (curr_automata_list_el = (automata_list_el_t) automata_list;\n+  for (curr_automata_list_el = (const_automata_list_el_t) automata_list;\n        curr_automata_list_el != NULL;\n        curr_automata_list_el = curr_automata_list_el->next_automata_list_el)\n     hash_value = (((hash_value >> (sizeof (unsigned) - 1) * CHAR_BIT)\n@@ -4013,11 +4018,11 @@ automata_list_hash (const void *automata_list)\n static int\n automata_list_eq_p (const void *automata_list_1, const void *automata_list_2)\n {\n-  automata_list_el_t automata_list_el_1;\n-  automata_list_el_t automata_list_el_2;\n+  const_automata_list_el_t automata_list_el_1;\n+  const_automata_list_el_t automata_list_el_2;\n \n-  for (automata_list_el_1 = (automata_list_el_t) automata_list_1,\n-\t automata_list_el_2 = (automata_list_el_t) automata_list_2;\n+  for (automata_list_el_1 = (const_automata_list_el_t) automata_list_1,\n+\t automata_list_el_2 = (const_automata_list_el_t) automata_list_2;\n        automata_list_el_1 != NULL && automata_list_el_2 != NULL;\n        automata_list_el_1 = automata_list_el_1->next_automata_list_el,\n \t automata_list_el_2 = automata_list_el_2->next_automata_list_el)\n@@ -5717,8 +5722,8 @@ static int\n compare_states_for_equiv (const void *state_ptr_1,\n \t\t\t  const void *state_ptr_2)\n {\n-  state_t s1 = *(state_t *)state_ptr_1;\n-  state_t s2 = *(state_t *)state_ptr_2;\n+  const_state_t const s1 = *(const_state_t const*)state_ptr_1;\n+  const_state_t const s2 = *(const_state_t const*)state_ptr_2;\n   unsigned int sz, si;\n   if (s1->num_out_arcs < s2->num_out_arcs)\n     return -1;\n@@ -6313,11 +6318,11 @@ static int\n compare_max_occ_cycle_nums (const void *unit_decl_1,\n \t\t\t    const void *unit_decl_2)\n {\n-  if ((DECL_UNIT (*(decl_t *) unit_decl_1)->max_occ_cycle_num)\n-      < (DECL_UNIT (*(decl_t *) unit_decl_2)->max_occ_cycle_num))\n+  if ((DECL_UNIT (*(const_decl_t const*) unit_decl_1)->max_occ_cycle_num)\n+      < (DECL_UNIT (*(const_decl_t const*) unit_decl_2)->max_occ_cycle_num))\n     return 1;\n-  else if ((DECL_UNIT (*(decl_t *) unit_decl_1)->max_occ_cycle_num)\n-\t   == (DECL_UNIT (*(decl_t *) unit_decl_2)->max_occ_cycle_num))\n+  else if ((DECL_UNIT (*(const_decl_t const*) unit_decl_1)->max_occ_cycle_num)\n+\t   == (DECL_UNIT (*(const_decl_t const*) unit_decl_2)->max_occ_cycle_num))\n     return 0;\n   else\n     return -1;\n@@ -7226,7 +7231,7 @@ add_vect (state_ainsn_table_t tab, int vect_num, vla_hwint_t vect)\n \n /* Return number of out arcs of STATE.  */\n static int\n-out_state_arcs_num (state_t state)\n+out_state_arcs_num (const_state_t state)\n {\n   int result;\n   arc_t arc;\n@@ -7246,11 +7251,11 @@ static int\n compare_transition_els_num (const void *state_ptr_1,\n \t\t\t    const void *state_ptr_2)\n {\n-  int transition_els_num_1;\n-  int transition_els_num_2;\n+  const int transition_els_num_1\n+    = out_state_arcs_num (*(const_state_t const*) state_ptr_1);\n+  const int transition_els_num_2\n+    = out_state_arcs_num (*(const_state_t const*) state_ptr_2);\n \n-  transition_els_num_1 = out_state_arcs_num (*(state_t *) state_ptr_1);\n-  transition_els_num_2 = out_state_arcs_num (*(state_t *) state_ptr_2);\n   if (transition_els_num_1 < transition_els_num_2)\n     return 1;\n   else if (transition_els_num_1 == transition_els_num_2)\n@@ -8238,8 +8243,8 @@ output_print_reservation_func (void)\n static int\n units_cmp (const void *unit1, const void *unit2)\n {\n-  const unit_decl_t u1 = *(unit_decl_t *) unit1;\n-  const unit_decl_t u2 = *(unit_decl_t *) unit2;\n+  const_unit_decl_t const u1 = *(const_unit_decl_t const*) unit1;\n+  const_unit_decl_t const u2 = *(const_unit_decl_t const*) unit2;\n \n   return strcmp (u1->name, u2->name);\n }\n@@ -8641,8 +8646,8 @@ output_state_arcs (state_t state)\n static int\n state_reservs_cmp (const void *reservs_ptr_1, const void *reservs_ptr_2)\n {\n-  return reserv_sets_cmp (*(reserv_sets_t *) reservs_ptr_1,\n-                          *(reserv_sets_t *) reservs_ptr_2);\n+  return reserv_sets_cmp (*(const_reserv_sets_t const*) reservs_ptr_1,\n+                          *(const_reserv_sets_t const*) reservs_ptr_2);\n }\n \n /* The following function is used for sorting possible cpu unit"}, {"sha": "956191e8ec4636c4146f8cab25c3147ade81d671", "filename": "gcc/genmodes.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -740,8 +740,8 @@ create_modes (void)\n static int\n cmp_modes (const void *a, const void *b)\n {\n-  struct mode_data *m = *(struct mode_data **)a;\n-  struct mode_data *n = *(struct mode_data **)b;\n+  const struct mode_data *const m = *(const struct mode_data *const*)a;\n+  const struct mode_data *const n = *(const struct mode_data *const*)b;\n \n   if (m->bytesize > n->bytesize)\n     return 1;"}, {"sha": "c1eabb3453fa1bed27e47b37a94eccd4a0df7582", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -305,13 +305,13 @@ gt_pch_note_reorder (void *obj, void *note_ptr_cookie,\n static hashval_t\n saving_htab_hash (const void *p)\n {\n-  return POINTER_HASH (((struct ptr_data *)p)->obj);\n+  return POINTER_HASH (((const struct ptr_data *)p)->obj);\n }\n \n static int\n saving_htab_eq (const void *p1, const void *p2)\n {\n-  return ((struct ptr_data *)p1)->obj == p2;\n+  return ((const struct ptr_data *)p1)->obj == p2;\n }\n \n /* Handy state for the traversal functions.  */"}, {"sha": "47191429e72ed23c341518f5a18ec908d64cc29b", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -1335,8 +1335,8 @@ gimplify_loop_expr (tree *expr_p, tree *pre_p)\n static int\n compare_case_labels (const void *p1, const void *p2)\n {\n-  tree case1 = *(tree *)p1;\n-  tree case2 = *(tree *)p2;\n+  const_tree const case1 = *(const_tree const*)p1;\n+  const_tree const case2 = *(const_tree const*)p2;\n \n   return tree_int_cst_compare (CASE_LOW (case1), CASE_LOW (case2));\n }"}, {"sha": "0a4464dd9ae93def6e048fcb3f5efa4979ecc192", "filename": "gcc/ipa-type-escape.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fipa-type-escape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fipa-type-escape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -140,14 +140,14 @@ static unsigned int look_for_casts (tree lhs ATTRIBUTE_UNUSED, tree);\n static bool is_cast_from_non_pointer (tree, tree, void *);\n \n /* Get the name of TYPE or return the string \"<UNNAMED>\".  */\n-static char*\n+static const char*\n get_name_of_type (tree type)\n {\n   tree name = TYPE_NAME (type);\n   \n   if (!name)\n     /* Unnamed type, do what you like here.  */\n-    return (char*)\"<UNNAMED>\";\n+    return \"<UNNAMED>\";\n   \n   /* It will be a TYPE_DECL in the case of a typedef, otherwise, an\n      identifier_node */\n@@ -157,20 +157,20 @@ get_name_of_type (tree type)\n \t  IDENTIFIER_NODE.  (Some decls, most often labels, may have\n \t  zero as the DECL_NAME).  */\n       if (DECL_NAME (name))\n-\treturn (char*)IDENTIFIER_POINTER (DECL_NAME (name));\n+\treturn IDENTIFIER_POINTER (DECL_NAME (name));\n       else\n \t/* Unnamed type, do what you like here.  */\n-\treturn (char*)\"<UNNAMED>\";\n+\treturn \"<UNNAMED>\";\n     }\n   else if (TREE_CODE (name) == IDENTIFIER_NODE)\n-    return (char*)IDENTIFIER_POINTER (name);\n+    return IDENTIFIER_POINTER (name);\n   else \n-    return (char*)\"<UNNAMED>\";\n+    return \"<UNNAMED>\";\n }\n \n struct type_brand_s \n {\n-  char* name;\n+  const char* name;\n   int seq;\n };\n "}, {"sha": "fab3bab5aa4b6924c745a9572ffb297d65bbaa0f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -1,3 +1,13 @@\n+2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* class.c (java_treetreehash_hash, java_treetreehash_compare):\n+\tConstify. \n+\t* expr.c (type_assertion_eq): Likewise.\n+\t* jcf-io.c (compare_path): Likewise.\n+\t* jcf-parse.c (cmpstringp): Likewise.\n+\t* verify-impl.c (get_one_type, compute_argument_types,\n+\tcompute_return_type): Likewise. \n+\n 2007-07-16  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \tPR target/32462"}, {"sha": "97d9ba12941e4bcc7f61243408d11581318ab503", "filename": "gcc/java/class.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -3048,15 +3048,17 @@ static int java_treetreehash_compare (const void *, const void *);\n static hashval_t\n java_treetreehash_hash (const void *k_p)\n {\n-  struct treetreehash_entry *k = (struct treetreehash_entry *) k_p;\n+  const struct treetreehash_entry *const k\n+    = (const struct treetreehash_entry *) k_p;\n   return JAVA_TREEHASHHASH_H (k->key);\n }\n \n static int\n java_treetreehash_compare (const void * k1_p, const void * k2_p)\n {\n-  struct treetreehash_entry * k1 = (struct treetreehash_entry *) k1_p;\n-  tree k2 = (tree) k2_p;\n+  const struct treetreehash_entry *const k1\n+    = (const struct treetreehash_entry *) k1_p;\n+  const_tree const k2 = (const_tree) k2_p;\n   return (k1->key == k2);\n }\n "}, {"sha": "db15062da4be25f005a16fcaad7f98e72057c695", "filename": "gcc/java/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -419,8 +419,8 @@ pop_type (tree type)\n static int\n type_assertion_eq (const void * k1_p, const void * k2_p)\n {\n-  type_assertion k1 = *(type_assertion *)k1_p;\n-  type_assertion k2 = *(type_assertion *)k2_p;\n+  const type_assertion k1 = *(const type_assertion *)k1_p;\n+  const type_assertion k2 = *(const type_assertion *)k2_p;\n   return (k1.assertion_code == k2.assertion_code\n           && k1.op1 == k2.op1\n \t  && k1.op2 == k2.op2);"}, {"sha": "3a5018ac7285a7aff52facb556ef1942c85a6ca7", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -293,7 +293,7 @@ static int\n compare_path (const void *key, const void *entry)\n {\n   return strcmp ((const char *) key, \n-\t\t (*((const struct dirent **) entry))->d_name);\n+\t\t (*((const struct dirent *const*) entry))->d_name);\n }\n \n /* Returns nonzero if ENTRY names a .java or .class file.  */"}, {"sha": "196a7e9913822dde704f2d1d033161e9cc674c20", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -166,7 +166,7 @@ cmpstringp (const void *p1, const void *p2)\n      pointers to char\", but strcmp() arguments are \"pointers\n      to char\", hence the following cast plus dereference */\n \n-  return strcmp(*(char **) p1, *(char **) p2);\n+  return strcmp(*(const char *const*) p1, *(const char *const*) p2);\n }\n \n /* Create an array of strings, one for each source file that we've"}, {"sha": "1efcf686503e878e6f0307c823bf61f1ec38df33", "filename": "gcc/java/verify-impl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fjava%2Fverify-impl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fjava%2Fverify-impl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify-impl.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -2078,8 +2078,8 @@ check_method_constant (int index, bool is_interface,\n \t\t\t\t method_name, method_signature);\n }\n \n-static char *\n-get_one_type (char *p, type *t)\n+static const char *\n+get_one_type (const char *p, type *t)\n {\n   const char *start = p;\n   vfy_jclass k;\n@@ -2131,7 +2131,7 @@ static void\n compute_argument_types (vfy_string signature, type *types)\n {\n   int i;\n-  char *p = (char *) vfy_string_bytes (signature);\n+  const char *p = vfy_string_bytes (signature);\n \n   /* Skip `('.  */\n   ++p;\n@@ -2144,7 +2144,7 @@ compute_argument_types (vfy_string signature, type *types)\n static type\n compute_return_type (vfy_string signature)\n {\n-  char *p = (char *) vfy_string_bytes (signature);\n+  const char *p = vfy_string_bytes (signature);\n   type t;\n   while (*p != ')')\n     ++p;"}, {"sha": "09d938550c9875bd7c179ced9c2f23feff0789d4", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -1484,7 +1484,7 @@ unroll_loop_stupid (struct loop *loop)\n static hashval_t\n si_info_hash (const void *ivts)\n {\n-  return (hashval_t) INSN_UID (((struct iv_to_split *) ivts)->insn);\n+  return (hashval_t) INSN_UID (((const struct iv_to_split *) ivts)->insn);\n }\n \n /* An equality functions for information about insns to split.  */\n@@ -1503,7 +1503,7 @@ si_info_eq (const void *ivts1, const void *ivts2)\n static hashval_t\n ve_info_hash (const void *ves)\n {\n-  return (hashval_t) INSN_UID (((struct var_to_expand *) ves)->insn);\n+  return (hashval_t) INSN_UID (((const struct var_to_expand *) ves)->insn);\n }\n \n /* Return true if IVTS1 and IVTS2 (which are really both of type "}, {"sha": "174dd71028db4d59d9fc34e23e087dfdd0964ede", "filename": "gcc/matrix-reorg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fmatrix-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fmatrix-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatrix-reorg.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -390,7 +390,7 @@ static htab_t matrices_to_reorg = NULL;\n static hashval_t\n mtt_info_hash (const void *mtt)\n {\n-  return htab_hash_pointer (((struct matrix_info *) mtt)->decl);\n+  return htab_hash_pointer (((const struct matrix_info *) mtt)->decl);\n }\n \n /* Return true if MTT1 and MTT2 (which are really both of type"}, {"sha": "fdcec9d37ac3fa6e0cbd804a4b3092ec10651220", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -1,3 +1,8 @@\n+2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* objc-act.c (volatilized_hash, volatilized_eq, string_hash,\n+\tstring_eq): Constify.\n+\n 2007-04-04  Stuart Hastings  <stuart@apple.com>\n \n \tPR 31281"}, {"sha": "3f0d6deea51c95e81e217697efa7aae620f21aa8", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -1321,16 +1321,16 @@ objc_xref_basetypes (tree ref, tree basetype)\n static hashval_t\n volatilized_hash (const void *ptr)\n {\n-  tree typ = ((struct volatilized_type *)ptr)->type;\n+  const_tree const typ = ((const struct volatilized_type *)ptr)->type;\n \n   return htab_hash_pointer(typ);\n }\n \n static int\n volatilized_eq (const void *ptr1, const void *ptr2)\n {\n-  tree typ1 = ((struct volatilized_type *)ptr1)->type;\n-  tree typ2 = ((struct volatilized_type *)ptr2)->type;\n+  const_tree const typ1 = ((const struct volatilized_type *)ptr1)->type;\n+  const_tree const typ2 = ((const struct volatilized_type *)ptr2)->type;\n \n   return typ1 == typ2;\n }\n@@ -1856,7 +1856,7 @@ my_build_string_pointer (int len, const char *str)\n static hashval_t\n string_hash (const void *ptr)\n {\n-  tree str = ((struct string_descriptor *)ptr)->literal;\n+  const_tree const str = ((const struct string_descriptor *)ptr)->literal;\n   const unsigned char *p = (const unsigned char *) TREE_STRING_POINTER (str);\n   int i, len = TREE_STRING_LENGTH (str);\n   hashval_t h = len;\n@@ -1870,8 +1870,8 @@ string_hash (const void *ptr)\n static int\n string_eq (const void *ptr1, const void *ptr2)\n {\n-  tree str1 = ((struct string_descriptor *)ptr1)->literal;\n-  tree str2 = ((struct string_descriptor *)ptr2)->literal;\n+  const_tree const str1 = ((const struct string_descriptor *)ptr1)->literal;\n+  const_tree const str2 = ((const struct string_descriptor *)ptr2)->literal;\n   int len1 = TREE_STRING_LENGTH (str1);\n \n   return (len1 == TREE_STRING_LENGTH (str2)"}, {"sha": "338afc7328a0c04203ea99b70edaf6cc40cfe802", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -297,7 +297,7 @@ hash_expr (rtx x, int *do_not_record_p)\n static hashval_t\n hash_expr_for_htab (const void *expp)\n {\n-  struct expr *exp = (struct expr *) expp;\n+  const struct expr *const exp = (const struct expr *) expp;\n   return exp->hash;\n }\n \n@@ -307,8 +307,8 @@ hash_expr_for_htab (const void *expp)\n static int\n expr_equiv_p (const void *exp1p, const void *exp2p)\n {\n-  struct expr *exp1 = (struct expr *) exp1p;\n-  struct expr *exp2 = (struct expr *) exp2p;\n+  const struct expr *const exp1 = (const struct expr *) exp1p;\n+  const struct expr *const exp2 = (const struct expr *) exp2p;\n   int equiv_p = exp_equiv_p (exp1->expr, exp2->expr, 0, true);\n   \n   gcc_assert (!equiv_p || exp1->hash == exp2->hash);"}, {"sha": "0b58d8d38968e35937ac2a7893f83ac89f463a23", "filename": "gcc/rtl-factoring.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Frtl-factoring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Frtl-factoring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-factoring.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -238,6 +238,7 @@ typedef struct hash_bucket_def\n   /* List of sequence candidates.  */\n   htab_t seq_candidates;\n } *p_hash_bucket;\n+typedef const struct hash_bucket_def *const_p_hash_bucket;\n \n /* Contains the last insn of the sequence, and its index value.  */\n typedef struct hash_elem_def\n@@ -251,6 +252,7 @@ typedef struct hash_elem_def\n   /* The cached length of the insn.  */\n   int length;\n } *p_hash_elem;\n+typedef const struct hash_elem_def *const_p_hash_elem;\n \n /* The list of same sequence candidates.  */\n static htab_t hash_buckets;\n@@ -1205,7 +1207,7 @@ dump_best_pattern_seq (int iter)\n static unsigned int\n htab_hash_bucket (const void *p)\n {\n-  p_hash_bucket bucket = (p_hash_bucket) p;\n+  const_p_hash_bucket bucket = (const_p_hash_bucket) p;\n   return bucket->hash;\n }\n \n@@ -1235,7 +1237,7 @@ htab_del_bucket (void *p)\n static unsigned int\n htab_hash_elem (const void *p)\n {\n-  p_hash_elem elem = (p_hash_elem) p;\n+  const_p_hash_elem elem = (const_p_hash_elem) p;\n   return htab_hash_pointer (elem->insn);\n }\n "}, {"sha": "ab2657ed653b143ffc9dac8ede6e4328ef6c54bc", "filename": "gcc/tree-browser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-browser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-browser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-browser.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -751,8 +751,8 @@ store_child_info (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n static int\n TB_parent_eq (const void *p1, const void *p2)\n {\n-  const_tree node = (const_tree)p2;\n-  tree parent = (tree) p1;\n+  const_tree const node = (const_tree)p2;\n+  const_tree const parent = (const_tree) p1;\n \n   if (p1 == NULL || p2 == NULL)\n     return 0;"}, {"sha": "66fbb90e525ee0ca57c44d9f682451559b38d9a5", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -307,7 +307,7 @@ new_scev_info_str (tree var)\n static hashval_t\n hash_scev_info (const void *elt)\n {\n-  return SSA_NAME_VERSION (((struct scev_info_str *) elt)->var);\n+  return SSA_NAME_VERSION (((const struct scev_info_str *) elt)->var);\n }\n \n /* Compares database elements E1 and E2.  */"}, {"sha": "3829d1e24aaae86a43c818c6f1a07df2a0a70a21", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -309,8 +309,8 @@ mark_non_addressable (tree var)\n static int\n sort_tags_by_id (const void *pa, const void *pb)\n {\n-  tree a = *(tree *)pa;\n-  tree b = *(tree *)pb;\n+  const_tree const a = *(const_tree const *)pa;\n+  const_tree const b = *(const_tree const *)pb;\n  \n   return DECL_UID (a) - DECL_UID (b);\n }"}, {"sha": "d50417f1463c13f8cd7f49e9ea8f1fd558aeda0d", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -48,6 +48,7 @@ typedef struct coalesce_pair\n   int second_element;\n   int cost;\n } * coalesce_pair_p;\n+typedef const struct coalesce_pair *const_coalesce_pair_p;\n \n typedef struct cost_one_pair_d\n {\n@@ -174,8 +175,8 @@ pop_best_coalesce (coalesce_list_p cl, int *p1, int *p2)\n static unsigned int \n coalesce_pair_map_hash (const void *pair)\n {\n-  hashval_t a = (hashval_t)(((coalesce_pair_p)pair)->first_element);\n-  hashval_t b = (hashval_t)(((coalesce_pair_p)pair)->second_element);\n+  hashval_t a = (hashval_t)(((const_coalesce_pair_p)pair)->first_element);\n+  hashval_t b = (hashval_t)(((const_coalesce_pair_p)pair)->second_element);\n \n   return COALESCE_HASH_FN (a,b);\n }\n@@ -187,8 +188,8 @@ coalesce_pair_map_hash (const void *pair)\n static int \n coalesce_pair_map_eq (const void *pair1, const void *pair2)\n {\n-  coalesce_pair_p p1 = (coalesce_pair_p) pair1;\n-  coalesce_pair_p p2 = (coalesce_pair_p) pair2;\n+  const_coalesce_pair_p const p1 = (const_coalesce_pair_p) pair1;\n+  const_coalesce_pair_p const p2 = (const_coalesce_pair_p) pair2;\n \n   return (p1->first_element == p2->first_element\n \t  && p1->second_element == p2->second_element);\n@@ -314,7 +315,8 @@ add_coalesce (coalesce_list_p cl, int p1, int p2,\n static int \n compare_pairs (const void *p1, const void *p2)\n {\n-  return (*(coalesce_pair_p *)p1)->cost - (*(coalesce_pair_p *)p2)->cost;\n+  return (*(const_coalesce_pair_p const*)p1)->cost\n+    - (*(const_coalesce_pair_p const*)p2)->cost;\n }\n \n "}, {"sha": "fc70fb459dfda326e7c2fb7b79aa9eab2c4685db", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -1997,8 +1997,8 @@ lookup_avail_expr (tree stmt, bool insert)\n static hashval_t\n avail_expr_hash (const void *p)\n {\n-  tree stmt = ((struct expr_hash_elt *)p)->stmt;\n-  tree rhs = ((struct expr_hash_elt *)p)->rhs;\n+  tree stmt = ((const struct expr_hash_elt *)p)->stmt;\n+  tree rhs = ((const struct expr_hash_elt *)p)->rhs;\n   tree vuse;\n   ssa_op_iter iter;\n   hashval_t val = 0;\n@@ -2033,10 +2033,10 @@ real_avail_expr_hash (const void *p)\n static int\n avail_expr_eq (const void *p1, const void *p2)\n {\n-  tree stmt1 = ((struct expr_hash_elt *)p1)->stmt;\n-  tree rhs1 = ((struct expr_hash_elt *)p1)->rhs;\n-  tree stmt2 = ((struct expr_hash_elt *)p2)->stmt;\n-  tree rhs2 = ((struct expr_hash_elt *)p2)->rhs;\n+  tree stmt1 = ((const struct expr_hash_elt *)p1)->stmt;\n+  tree rhs1 = ((const struct expr_hash_elt *)p1)->rhs;\n+  tree stmt2 = ((const struct expr_hash_elt *)p2)->stmt;\n+  tree rhs2 = ((const struct expr_hash_elt *)p2)->rhs;\n \n   /* If they are the same physical expression, return true.  */\n   if (rhs1 == rhs2 && stmt1 == stmt2)\n@@ -2052,8 +2052,8 @@ avail_expr_eq (const void *p1, const void *p2)\n       && operand_equal_p (rhs1, rhs2, OEP_PURE_SAME))\n     {\n       bool ret = compare_ssa_operands_equal (stmt1, stmt2, SSA_OP_VUSE);\n-      gcc_assert (!ret || ((struct expr_hash_elt *)p1)->hash\n-\t\t  == ((struct expr_hash_elt *)p2)->hash);\n+      gcc_assert (!ret || ((const struct expr_hash_elt *)p1)->hash\n+\t\t  == ((const struct expr_hash_elt *)p2)->hash);\n       return ret;\n     }\n "}, {"sha": "ffa5453a222d723af632665452f466e9c8d45a19", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -445,13 +445,14 @@ typedef struct expr_pred_trans_d\n      speed reasons.  */\n   hashval_t hashcode;\n } *expr_pred_trans_t;\n+typedef const struct expr_pred_trans_d *const_expr_pred_trans_t;\n \n /* Return the hash value for a phi translation table entry.  */\n \n static hashval_t\n expr_pred_trans_hash (const void *p)\n {\n-  const expr_pred_trans_t ve = (expr_pred_trans_t) p;\n+  const_expr_pred_trans_t const ve = (const_expr_pred_trans_t) p;\n   return ve->hashcode;\n }\n \n@@ -461,8 +462,8 @@ expr_pred_trans_hash (const void *p)\n static int\n expr_pred_trans_eq (const void *p1, const void *p2)\n {\n-  const expr_pred_trans_t ve1 = (expr_pred_trans_t) p1;\n-  const expr_pred_trans_t ve2 = (expr_pred_trans_t) p2;\n+  const_expr_pred_trans_t const ve1 = (const_expr_pred_trans_t) p1;\n+  const_expr_pred_trans_t const ve2 = (const_expr_pred_trans_t) p2;\n   basic_block b1 = ve1->pred;\n   basic_block b2 = ve2->pred;\n   int i;"}, {"sha": "145db955964d13b07a4192765132f093a137d219", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -131,6 +131,7 @@ typedef struct vn_binary_op_s\n   hashval_t hashcode;\n   tree result;\n } *vn_binary_op_t;\n+typedef const struct vn_binary_op_s *const_vn_binary_op_t;\n \n /* Unary operations in the hashtable consist of a single operand, an\n    opcode, and a type.  Result is the value number of the operation,\n@@ -144,6 +145,7 @@ typedef struct vn_unary_op_s\n   hashval_t hashcode;\n   tree result;\n } *vn_unary_op_t;\n+typedef const struct vn_unary_op_s *const_vn_unary_op_t;\n \n /* Phi nodes in the hashtable consist of their non-VN_TOP phi\n    arguments, and the basic block the phi is in. Result is the value\n@@ -158,6 +160,7 @@ typedef struct vn_phi_s\n   hashval_t hashcode;\n   tree result;\n } *vn_phi_t;\n+typedef const struct vn_phi_s *const_vn_phi_t;\n \n /* Reference operands only exist in reference operations structures.\n    They consist of an opcode, type, and some number of operands.  For\n@@ -174,6 +177,7 @@ typedef struct vn_reference_op_struct\n   tree op2;\n } vn_reference_op_s;\n typedef vn_reference_op_s *vn_reference_op_t;\n+typedef const vn_reference_op_s *const_vn_reference_op_t;\n \n DEF_VEC_O(vn_reference_op_s);\n DEF_VEC_ALLOC_O(vn_reference_op_s, heap);\n@@ -193,6 +197,7 @@ typedef struct vn_reference_s\n   hashval_t hashcode;\n   tree result;\n } *vn_reference_t;\n+typedef const struct vn_reference_s *const_vn_reference_t;\n \n /* Valid hashtables storing information we have proven to be\n    correct.  */\n@@ -281,8 +286,8 @@ VN_INFO_GET (tree name)\n static int\n vn_reference_op_eq (const void *p1, const void *p2)\n {\n-  const vn_reference_op_t vro1 = (vn_reference_op_t) p1;\n-  const vn_reference_op_t vro2 = (vn_reference_op_t) p2;\n+  const_vn_reference_op_t const vro1 = (const_vn_reference_op_t) p1;\n+  const_vn_reference_op_t const vro2 = (const_vn_reference_op_t) p2;\n   return vro1->opcode == vro2->opcode\n     && vro1->type == vro2->type\n     && expressions_equal_p (vro1->op0, vro2->op0)\n@@ -305,7 +310,7 @@ vn_reference_op_compute_hash (const vn_reference_op_t vro1)\n static hashval_t\n vn_reference_hash (const void *p1)\n {\n-  const vn_reference_t vr1 = (vn_reference_t) p1;\n+  const_vn_reference_t const vr1 = (const_vn_reference_t) p1;\n   return vr1->hashcode;\n }\n \n@@ -337,8 +342,8 @@ vn_reference_eq (const void *p1, const void *p2)\n   int i;\n   vn_reference_op_t vro;\n \n-  const vn_reference_t vr1 = (vn_reference_t) p1;\n-  const vn_reference_t vr2 = (vn_reference_t) p2;\n+  const_vn_reference_t const vr1 = (const_vn_reference_t) p1;\n+  const_vn_reference_t const vr2 = (const_vn_reference_t) p2;\n \n   if (vr1->vuses == vr2->vuses\n       && vr1->operands == vr2->operands)\n@@ -694,7 +699,7 @@ vn_reference_insert (tree op, tree result, VEC (tree, gc) *vuses)\n static hashval_t\n vn_unary_op_hash (const void *p1)\n {\n-  const vn_unary_op_t vuo1 = (vn_unary_op_t) p1;\n+  const_vn_unary_op_t const vuo1 = (const_vn_unary_op_t) p1;\n   return vuo1->hashcode;\n }\n \n@@ -711,8 +716,8 @@ vn_unary_op_compute_hash (const vn_unary_op_t vuo1)\n static int\n vn_unary_op_eq (const void *p1, const void *p2)\n {\n-  const vn_unary_op_t vuo1 = (vn_unary_op_t) p1;\n-  const vn_unary_op_t vuo2 = (vn_unary_op_t) p2;\n+  const_vn_unary_op_t const vuo1 = (const_vn_unary_op_t) p1;\n+  const_vn_unary_op_t const vuo2 = (const_vn_unary_op_t) p2;\n   return vuo1->opcode == vuo2->opcode\n     && vuo1->type == vuo2->type\n     && expressions_equal_p (vuo1->op0, vuo2->op0);\n@@ -781,7 +786,7 @@ vn_binary_op_compute_hash (const vn_binary_op_t vbo1)\n static hashval_t\n vn_binary_op_hash (const void *p1)\n {\n-  const vn_binary_op_t vbo1 = (vn_binary_op_t) p1;\n+  const_vn_binary_op_t const vbo1 = (const_vn_binary_op_t) p1;\n   return vbo1->hashcode;\n }\n \n@@ -791,8 +796,8 @@ vn_binary_op_hash (const void *p1)\n static int\n vn_binary_op_eq (const void *p1, const void *p2)\n {\n-  const vn_binary_op_t vbo1 = (vn_binary_op_t) p1;\n-  const vn_binary_op_t vbo2 = (vn_binary_op_t) p2;\n+  const_vn_binary_op_t const vbo1 = (const_vn_binary_op_t) p1;\n+  const_vn_binary_op_t const vbo2 = (const_vn_binary_op_t) p2;\n   return vbo1->opcode == vbo2->opcode\n     && vbo1->type == vbo2->type\n     && expressions_equal_p (vbo1->op0, vbo2->op0)\n@@ -897,7 +902,7 @@ vn_phi_compute_hash (vn_phi_t vp1)\n static hashval_t\n vn_phi_hash (const void *p1)\n {\n-  const vn_phi_t vp1 = (vn_phi_t) p1;\n+  const_vn_phi_t const vp1 = (const_vn_phi_t) p1;\n   return vp1->hashcode;\n }\n \n@@ -906,8 +911,8 @@ vn_phi_hash (const void *p1)\n static int\n vn_phi_eq (const void *p1, const void *p2)\n {\n-  const vn_phi_t vp1 = (vn_phi_t) p1;\n-  const vn_phi_t vp2 = (vn_phi_t) p2;\n+  const_vn_phi_t const vp1 = (const_vn_phi_t) p1;\n+  const_vn_phi_t const vp2 = (const_vn_phi_t) p2;\n \n   if (vp1->block == vp2->block)\n     {"}, {"sha": "1a3bad74ab47cb90799359bc93d844c75956bf5a", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -223,15 +223,15 @@ create_block_for_threading (basic_block bb, struct redirection_data *rd)\n static hashval_t\n redirection_data_hash (const void *p)\n {\n-  edge e = ((struct redirection_data *)p)->outgoing_edge;\n+  edge e = ((const struct redirection_data *)p)->outgoing_edge;\n   return e->dest->index;\n }\n \n static int\n redirection_data_eq (const void *p1, const void *p2)\n {\n-  edge e1 = ((struct redirection_data *)p1)->outgoing_edge;\n-  edge e2 = ((struct redirection_data *)p2)->outgoing_edge;\n+  edge e1 = ((const struct redirection_data *)p1)->outgoing_edge;\n+  edge e2 = ((const struct redirection_data *)p2)->outgoing_edge;\n \n   return e1 == e2;\n }"}, {"sha": "f502a2e04c9c68f35ed89f1f242d7e4e1d0bb2a6", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -316,15 +316,15 @@ static void uncprop_into_successor_phis (struct dom_walk_data *, basic_block);\n static hashval_t\n equiv_hash (const void *p)\n {\n-  tree value = ((struct equiv_hash_elt *)p)->value;\n+  tree const value = ((const struct equiv_hash_elt *)p)->value;\n   return iterative_hash_expr (value, 0);\n }\n \n static int\n equiv_eq (const void *p1, const void *p2)\n {\n-  tree value1 = ((struct equiv_hash_elt *)p1)->value;\n-  tree value2 = ((struct equiv_hash_elt *)p2)->value;\n+  tree value1 = ((const struct equiv_hash_elt *)p1)->value;\n+  tree value2 = ((const struct equiv_hash_elt *)p2)->value;\n \n   return operand_equal_p (value1, value2, 0);\n }"}, {"sha": "0075cd4b8e0e7c3ba17f22d43affae43fc70d652", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -781,7 +781,7 @@ static int\n var_ann_eq (const void *va, const void *vb)\n {\n   const struct static_var_ann_d *a = (const struct static_var_ann_d *) va;\n-  tree b = (tree) vb;\n+  const_tree const b = (const_tree) vb;\n   return (a->uid == DECL_UID (b));\n }\n "}, {"sha": "9c2272a5f61ce9bc6827f361ea424953505be41d", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -3843,8 +3843,8 @@ find_conditional_asserts (basic_block bb, tree last)\n static int\n compare_case_labels (const void *p1, const void *p2)\n {\n-  tree case1 = *(tree *)p1;\n-  tree case2 = *(tree *)p2;\n+  const_tree const case1 = *(const_tree const*)p1;\n+  const_tree const case2 = *(const_tree const*)p2;\n   unsigned int uid1 = DECL_UID (CASE_LABEL (case1));\n   unsigned int uid2 = DECL_UID (CASE_LABEL (case2));\n "}, {"sha": "2bd45b7e959a628d7f2cdd2ffcaff0659c074ba3", "filename": "gcc/tree.c", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -811,7 +811,7 @@ build_int_cst_wide_type (tree type,\n static hashval_t\n int_cst_hash_hash (const void *x)\n {\n-  tree t = (tree) x;\n+  const_tree const t = (const_tree) x;\n \n   return (TREE_INT_CST_HIGH (t) ^ TREE_INT_CST_LOW (t)\n \t  ^ htab_hash_pointer (TREE_TYPE (t)));\n@@ -823,8 +823,8 @@ int_cst_hash_hash (const void *x)\n static int\n int_cst_hash_eq (const void *x, const void *y)\n {\n-  tree xt = (tree) x;\n-  tree yt = (tree) y;\n+  const_tree const xt = (const_tree) x;\n+  const_tree const yt = (const_tree) y;\n \n   return (TREE_TYPE (xt) == TREE_TYPE (yt)\n \t  && TREE_INT_CST_HIGH (xt) == TREE_INT_CST_HIGH (yt)\n@@ -4263,7 +4263,7 @@ tree_map_base_hash (const void *item)\n int\n tree_map_base_marked_p (const void *p)\n {\n-  return ggc_marked_p (((struct tree_map_base *) p)->from);\n+  return ggc_marked_p (((const struct tree_map_base *) p)->from);\n }\n \n unsigned int\n@@ -4686,7 +4686,7 @@ type_hash_canon (unsigned int hashcode, tree type)\n static int\n type_hash_marked_p (const void *p)\n {\n-  tree type = ((struct type_hash *) p)->type;\n+  const_tree const type = ((const struct type_hash *) p)->type;\n \n   return ggc_marked_p (type) || TYPE_SYMTAB_POINTER (type);\n }\n@@ -6707,11 +6707,11 @@ get_file_function_name (const char *type)\n    are of the caller.  */\n \n void\n-tree_check_failed (const tree node, const char *file,\n+tree_check_failed (const_tree node, const char *file,\n \t\t   int line, const char *function, ...)\n {\n   va_list args;\n-  char *buffer;\n+  const char *buffer;\n   unsigned length = 0;\n   int code;\n \n@@ -6721,23 +6721,24 @@ tree_check_failed (const tree node, const char *file,\n   va_end (args);\n   if (length)\n     {\n+      char *tmp;\n       va_start (args, function);\n       length += strlen (\"expected \");\n-      buffer = alloca (length);\n+      buffer = tmp = alloca (length);\n       length = 0;\n       while ((code = va_arg (args, int)))\n \t{\n \t  const char *prefix = length ? \" or \" : \"expected \";\n \t  \n-\t  strcpy (buffer + length, prefix);\n+\t  strcpy (tmp + length, prefix);\n \t  length += strlen (prefix);\n-\t  strcpy (buffer + length, tree_code_name[code]);\n+\t  strcpy (tmp + length, tree_code_name[code]);\n \t  length += strlen (tree_code_name[code]);\n \t}\n       va_end (args);\n     }\n   else\n-    buffer = (char *)\"unexpected node\";\n+    buffer = \"unexpected node\";\n \n   internal_error (\"tree check: %s, have %s in %s, at %s:%d\",\n \t\t  buffer, tree_code_name[TREE_CODE (node)],\n@@ -6749,7 +6750,7 @@ tree_check_failed (const tree node, const char *file,\n    the caller.  */\n \n void\n-tree_not_check_failed (const tree node, const char *file,\n+tree_not_check_failed (const_tree node, const char *file,\n \t\t       int line, const char *function, ...)\n {\n   va_list args;\n@@ -6785,7 +6786,7 @@ tree_not_check_failed (const tree node, const char *file,\n    code, given in CL.  */\n \n void\n-tree_class_check_failed (const tree node, const enum tree_code_class cl,\n+tree_class_check_failed (const_tree node, const enum tree_code_class cl,\n \t\t\t const char *file, int line, const char *function)\n {\n   internal_error\n@@ -6799,7 +6800,7 @@ tree_class_check_failed (const tree node, const enum tree_code_class cl,\n    dozen codes, use the knowledge that they're all sequential.  */\n \n void\n-tree_range_check_failed (const tree node, const char *file, int line,\n+tree_range_check_failed (const_tree node, const char *file, int line,\n \t\t\t const char *function, enum tree_code c1,\n \t\t\t enum tree_code c2)\n {\n@@ -6834,7 +6835,7 @@ tree_range_check_failed (const tree node, const char *file, int line,\n    not have the specified code, given in CL.  */\n \n void\n-tree_not_class_check_failed (const tree node, const enum tree_code_class cl,\n+tree_not_class_check_failed (const_tree node, const enum tree_code_class cl,\n \t\t\t     const char *file, int line, const char *function)\n {\n   internal_error\n@@ -6848,7 +6849,7 @@ tree_not_class_check_failed (const tree node, const enum tree_code_class cl,\n /* Similar to tree_check_failed but applied to OMP_CLAUSE codes.  */\n \n void\n-omp_clause_check_failed (const tree node, const char *file, int line,\n+omp_clause_check_failed (const_tree node, const char *file, int line,\n                          const char *function, enum omp_clause_code code)\n {\n   internal_error (\"tree check: expected omp_clause %s, have %s in %s, at %s:%d\",\n@@ -6860,7 +6861,7 @@ omp_clause_check_failed (const tree node, const char *file, int line,\n /* Similar to tree_range_check_failed but applied to OMP_CLAUSE codes.  */\n \n void\n-omp_clause_range_check_failed (const tree node, const char *file, int line,\n+omp_clause_range_check_failed (const_tree node, const char *file, int line,\n \t\t\t       const char *function, enum omp_clause_code c1,\n \t\t\t       enum omp_clause_code c2)\n {\n@@ -6905,7 +6906,7 @@ static const char *ts_enum_names[] = {\n    whether CODE contains the tree structure identified by EN.  */\n \n void\n-tree_contains_struct_check_failed (const tree node, \n+tree_contains_struct_check_failed (const_tree node, \n \t\t\t\t   const enum tree_node_structure_enum en,\n \t\t\t\t   const char *file, int line, \n \t\t\t\t   const char *function)\n@@ -6945,7 +6946,7 @@ phi_node_elt_check_failed (int idx, int len, const char *file, int line,\n    vector of an expression node EXP.  */\n \n void\n-tree_operand_check_failed (int idx, tree exp, const char *file,\n+tree_operand_check_failed (int idx, const_tree exp, const char *file,\n \t\t\t   int line, const char *function)\n {\n   int code = TREE_CODE (exp);"}, {"sha": "393898e0849c55b28cacc3bb8845de835609136a", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -856,22 +856,22 @@ enum tree_node_structure_enum {\n       gcc_unreachable ();\t\t\t\t\t\\\n     &__t->common.type; }))\n \n-extern void tree_contains_struct_check_failed (const tree,\n+extern void tree_contains_struct_check_failed (const_tree,\n \t\t\t\t\t       const enum tree_node_structure_enum,\n \t\t\t\t\t       const char *, int, const char *)\n   ATTRIBUTE_NORETURN;\n \n-extern void tree_check_failed (const tree, const char *, int, const char *,\n+extern void tree_check_failed (const_tree, const char *, int, const char *,\n \t\t\t       ...) ATTRIBUTE_NORETURN;\n-extern void tree_not_check_failed (const tree, const char *, int, const char *,\n+extern void tree_not_check_failed (const_tree, const char *, int, const char *,\n \t\t\t\t   ...) ATTRIBUTE_NORETURN;\n-extern void tree_class_check_failed (const tree, const enum tree_code_class,\n+extern void tree_class_check_failed (const_tree, const enum tree_code_class,\n \t\t\t\t     const char *, int, const char *)\n     ATTRIBUTE_NORETURN;\n-extern void tree_range_check_failed (const tree, const char *, int,\n+extern void tree_range_check_failed (const_tree, const char *, int,\n \t\t\t\t     const char *, enum tree_code,\n \t\t\t\t     enum tree_code);\n-extern void tree_not_class_check_failed (const tree,\n+extern void tree_not_class_check_failed (const_tree,\n \t\t\t\t\t const enum tree_code_class,\n \t\t\t\t\t const char *, int, const char *)\n     ATTRIBUTE_NORETURN;\n@@ -881,16 +881,16 @@ extern void tree_vec_elt_check_failed (int, int, const char *,\n extern void phi_node_elt_check_failed (int, int, const char *,\n \t\t\t\t       int, const char *)\n     ATTRIBUTE_NORETURN;\n-extern void tree_operand_check_failed (int, tree,\n+extern void tree_operand_check_failed (int, const_tree,\n \t\t\t\t       const char *, int, const char *)\n     ATTRIBUTE_NORETURN;\n-extern void omp_clause_check_failed (const tree, const char *, int,\n+extern void omp_clause_check_failed (const_tree, const char *, int,\n \t\t\t\t     const char *, enum omp_clause_code)\n     ATTRIBUTE_NORETURN;\n extern void omp_clause_operand_check_failed (int, const_tree, const char *,\n \t\t\t\t             int, const char *)\n     ATTRIBUTE_NORETURN;\n-extern void omp_clause_range_check_failed (const tree, const char *, int,\n+extern void omp_clause_range_check_failed (const_tree, const char *, int,\n \t\t\t       const char *, enum omp_clause_code,\n \t\t\t       enum omp_clause_code)\n     ATTRIBUTE_NORETURN;\n@@ -4929,7 +4929,7 @@ void init_inline_once (void);\n    tcc_vl_exp nodes like CALL_EXPRs, this is stored in the node itself,\n    otherwise it is looked up from the node's code.  */\n static inline int\n-tree_operand_length (tree node)\n+tree_operand_length (const_tree node)\n {\n   if (VL_EXP_CLASS_P (node))\n     return VL_EXP_OPERAND_LENGTH (node);"}, {"sha": "53671f5523953083a6ea031241338ab7eb0afd45", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -258,6 +258,7 @@ typedef struct variable_def\n   /* The variable parts.  */\n   variable_part var_part[MAX_VAR_PARTS];\n } *variable;\n+typedef const struct variable_def *const_variable;\n \n /* Hash function for DECL for VARIABLE_HTAB.  */\n #define VARIABLE_HASH_VAL(decl) (DECL_UID (decl))\n@@ -601,7 +602,7 @@ adjust_stack_reference (rtx mem, HOST_WIDE_INT adjustment)\n static hashval_t\n variable_htab_hash (const void *x)\n {\n-  const variable v = (const variable) x;\n+  const_variable const v = (const_variable) x;\n \n   return (VARIABLE_HASH_VAL (v->decl));\n }\n@@ -611,8 +612,8 @@ variable_htab_hash (const void *x)\n static int\n variable_htab_eq (const void *x, const void *y)\n {\n-  const variable v = (const variable) x;\n-  const tree decl = (const tree) y;\n+  const_variable const v = (const_variable) x;\n+  const_tree const decl = (const_tree) y;\n \n   return (VARIABLE_HASH_VAL (v->decl) == VARIABLE_HASH_VAL (decl));\n }"}, {"sha": "a897687cbedbd9d9a61e93d5789d5bbe5bfd84e4", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ac903839251f16d331f4d1c11f444eaec684f/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=741ac903839251f16d331f4d1c11f444eaec684f", "patch": "@@ -2734,7 +2734,7 @@ static void maybe_output_constant_def_contents (struct constant_descriptor_tree\n static hashval_t\n const_desc_hash (const void *ptr)\n {\n-  return ((struct constant_descriptor_tree *)ptr)->hash;\n+  return ((const struct constant_descriptor_tree *)ptr)->hash;\n }\n \n static hashval_t"}]}