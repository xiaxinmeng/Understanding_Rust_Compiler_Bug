{"sha": "3fd0723f0a388817def293e606a99bfbf3a4ced4", "node_id": "C_kwDOANBUbNoAKDNmZDA3MjNmMGEzODg4MTdkZWYyOTNlNjA2YTk5YmZiZjNhNGNlZDQ", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-10-26T05:07:31Z"}, "committer": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-11-04T06:41:30Z"}, "message": "i386: Auto vectorize sdot_prod, usdot_prod with VNNI instruction.\n\nAVX512VNNI/AVXVNNI has vpdpwssd for HImode, vpdpbusd for QImode, so\nAdjust HImode sdot_prod expander and add QImode usdot_prod expander\nto enhance vectorization for dotprod.\n\ngcc/ChangeLog:\n\n\t* config/i386/sse.md (VI2_AVX512VNNIBW): New mode iterator.\n\t(VI1_AVX512VNNI): Likewise.\n\t(SDOT_VPDP_SUF): New mode_attr.\n\t(VI1SI): Likewise.\n\t(vi1si): Likewise.\n\t(sdot_prod<mode>): Use VI2_AVX512F iterator, expand to\n\tvpdpwssd when VNNI targets available.\n\t(usdot_prod<mode>): New expander for vector QImode.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/vnni-auto-vectorize-1.c: New test.\n\t* gcc.target/i386/vnni-auto-vectorize-2.c: Ditto.", "tree": {"sha": "a31682307d152b6b773ab258f623fa0f0caa8383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a31682307d152b6b773ab258f623fa0f0caa8383"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fd0723f0a388817def293e606a99bfbf3a4ced4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd0723f0a388817def293e606a99bfbf3a4ced4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd0723f0a388817def293e606a99bfbf3a4ced4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd0723f0a388817def293e606a99bfbf3a4ced4/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fcc22dae70af4202fe83b9ecb642fd6333464a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcc22dae70af4202fe83b9ecb642fd6333464a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fcc22dae70af4202fe83b9ecb642fd6333464a2"}], "stats": {"total": 166, "additions": 158, "deletions": 8}, "files": [{"sha": "22435e5d036830af0b5393b6ea3132f7233024a6", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 56, "deletions": 8, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd0723f0a388817def293e606a99bfbf3a4ced4/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd0723f0a388817def293e606a99bfbf3a4ced4/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3fd0723f0a388817def293e606a99bfbf3a4ced4", "patch": "@@ -500,6 +500,9 @@\n (define_mode_iterator VI1_AVX512F\n   [(V64QI \"TARGET_AVX512F\") (V32QI \"TARGET_AVX\") V16QI])\n \n+(define_mode_iterator VI1_AVX512VNNI\n+  [(V64QI \"TARGET_AVX512VNNI\") (V32QI \"TARGET_AVX2\") V16QI])\n+\n (define_mode_iterator VI12_256_512_AVX512VL\n   [V64QI (V32QI \"TARGET_AVX512VL\")\n    V32HI (V16HI \"TARGET_AVX512VL\")])\n@@ -510,6 +513,10 @@\n (define_mode_iterator VI2_AVX512F\n   [(V32HI \"TARGET_AVX512F\") (V16HI \"TARGET_AVX2\") V8HI])\n \n+(define_mode_iterator VI2_AVX512VNNIBW\n+  [(V32HI \"TARGET_AVX512BW || TARGET_AVX512VNNI\")\n+   (V16HI \"TARGET_AVX2\") V8HI])\n+\n (define_mode_iterator VI4_AVX\n   [(V8SI \"TARGET_AVX\") V4SI])\n \n@@ -14798,19 +14805,37 @@\n (define_mode_attr SDOT_PMADD_SUF\n   [(V32HI \"512v32hi\") (V16HI \"\") (V8HI \"\")])\n \n+(define_mode_attr SDOT_VPDP_SUF\n+  [(V32HI \"v16si\") (V16HI \"v8si\") (V8HI \"v4si\")])\n+\n (define_expand \"sdot_prod<mode>\"\n   [(match_operand:<sseunpackmode> 0 \"register_operand\")\n-   (match_operand:VI2_AVX2 1 \"register_operand\")\n-   (match_operand:VI2_AVX2 2 \"register_operand\")\n+   (match_operand:VI2_AVX512VNNIBW 1 \"register_operand\")\n+   (match_operand:VI2_AVX512VNNIBW 2 \"register_operand\")\n    (match_operand:<sseunpackmode> 3 \"register_operand\")]\n   \"TARGET_SSE2\"\n {\n-  rtx t = gen_reg_rtx (<sseunpackmode>mode);\n-  emit_insn (gen_<sse2_avx2>_pmaddwd<SDOT_PMADD_SUF> (t, operands[1], operands[2]));\n-  emit_insn (gen_rtx_SET (operands[0],\n-\t\t\t  gen_rtx_PLUS (<sseunpackmode>mode,\n-\t\t\t\t\toperands[3], t)));\n-  DONE;\n+  /* Try with vnni instructions.  */\n+  if ((<MODE_SIZE> == 64 && TARGET_AVX512VNNI)\n+      || (<MODE_SIZE> < 64\n+\t  && ((TARGET_AVX512VNNI && TARGET_AVX512VL) || TARGET_AVXVNNI)))\n+    {\n+      operands[1] = lowpart_subreg (<sseunpackmode>mode, operands[1], <MODE>mode);\n+      operands[2] = lowpart_subreg (<sseunpackmode>mode, operands[2], <MODE>mode);\n+      emit_insn (gen_rtx_SET (operands[0], operands[3]));\n+      emit_insn (gen_vpdpwssd_<SDOT_VPDP_SUF> (operands[0], operands[3],\n+\t\t\t\t\t       operands[1], operands[2]));\n+    }\n+    /* Otherwise use pmaddwd + paddd.  */\n+    else\n+    {\n+      rtx t = gen_reg_rtx (<sseunpackmode>mode);\n+      emit_insn (gen_<sse2_avx2>_pmaddwd<SDOT_PMADD_SUF> (t, operands[1], operands[2]));\n+      emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t      gen_rtx_PLUS (<sseunpackmode>mode,\n+\t\t\t\t\t    operands[3], t)));\n+    }\n+    DONE;\n })\n \n ;; Normally we use widen_mul_even/odd, but combine can't quite get it all\n@@ -27065,6 +27090,29 @@\n    [(set_attr (\"prefix\") (\"evex\"))\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_mode_attr VI1SI\n+ [(V64QI \"V16SI\") (V32QI \"V8SI\") (V16QI \"V4SI\")])\n+\n+(define_mode_attr vi1si\n+ [(V64QI \"v16si\") (V32QI \"v8si\") (V16QI \"v4si\")])\n+\n+(define_expand \"usdot_prod<mode>\"\n+  [(match_operand:<VI1SI> 0 \"register_operand\")\n+   (match_operand:VI1_AVX512VNNI 1 \"register_operand\")\n+   (match_operand:VI1_AVX512VNNI 2 \"register_operand\")\n+   (match_operand:<VI1SI> 3 \"register_operand\")]\n+  \"(<MODE_SIZE> == 64\n+    ||((TARGET_AVX512VNNI && TARGET_AVX512VL)\n+\t    || TARGET_AVXVNNI))\"\n+{\n+  operands[1] = lowpart_subreg (<VI1SI>mode, operands[1], <MODE>mode);\n+  operands[2] = lowpart_subreg (<VI1SI>mode, operands[2], <MODE>mode);\n+  emit_insn (gen_rtx_SET (operands[0], operands[3]));\n+  emit_insn (gen_vpdpbusd_<vi1si> (operands[0], operands[3],\n+\t\t\t\t  operands[1], operands[2]));\n+  DONE;\n+})\n+\n (define_insn \"vpdpbusd_v16si\"\n   [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n \t(unspec:V16SI"}, {"sha": "844f37ddfc1f76dee823f1e5512137e5049d485a", "filename": "gcc/testsuite/gcc.target/i386/vnni-auto-vectorize-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd0723f0a388817def293e606a99bfbf3a4ced4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvnni-auto-vectorize-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd0723f0a388817def293e606a99bfbf3a4ced4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvnni-auto-vectorize-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvnni-auto-vectorize-1.c?ref=3fd0723f0a388817def293e606a99bfbf3a4ced4", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */                                     \n+/* { dg-options \"-mavx512f -mavx512vnni -mavx512vl -O2\" } */\n+\n+/* { dg-final { scan-assembler \"vpdpwssd\\t\" } } */\n+/* { dg-final { scan-assembler \"vpdpbusd\\t\" } } */\n+/* { dg-final { scan-assembler-not \"vpmaddwd\\t\" } } */\n+\n+int __attribute__((noinline, noclone, optimize(\"tree-vectorize\")))\n+sdot_prod_hi (short * restrict a, short * restrict b,\n+\t      int c, int n)\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    {\n+      c += ((int) a[i] * (int) b[i]);\n+    }\n+  return c;\n+}\n+\n+int __attribute__((noinline, noclone, optimize(\"tree-vectorize\")))\n+usdot_prod_qi (unsigned char * restrict a, char *restrict b,\n+\t       int c, int n)\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    {\n+      c += ((int) a[i] * (int) b[i]);\n+    }\n+  return c;\n+}"}, {"sha": "dc8047d56442624e21fbd886b912402cce2abc57", "filename": "gcc/testsuite/gcc.target/i386/vnni-auto-vectorize-2.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd0723f0a388817def293e606a99bfbf3a4ced4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvnni-auto-vectorize-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd0723f0a388817def293e606a99bfbf3a4ced4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvnni-auto-vectorize-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvnni-auto-vectorize-2.c?ref=3fd0723f0a388817def293e606a99bfbf3a4ced4", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vnni -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vnni } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+static void vnni_test (void);\n+#define DO_TEST vnni_test\n+#define AVX512VNNI\n+#define AVX512VL\n+#include \"avx512f-check.h\"\n+#include \"vnni-auto-vectorize-1.c\"\n+\n+#define N 256\n+unsigned char a_u8[N];\n+char b_i8[N];\n+short a_i16[N], b_i16[N];\n+int i8_exp, i8_ref, i16_exp, i16_ref;\n+\n+int __attribute__((noinline, noclone, optimize(\"no-tree-vectorize\")))\n+sdot_prod_hi_scalar (short * restrict a, short * restrict b,\n+\t\t     int c, int n)\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    {\n+      c += ((int) a[i] * (int) b[i]);\n+    }\n+  return c;\n+}\n+\n+int __attribute__((noinline, noclone, optimize(\"no-tree-vectorize\")))\n+usdot_prod_qi_scalar (unsigned char * restrict a, char *restrict b,\n+\t       int c, int n)\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    {\n+      c += ((int) a[i] * (int) b[i]);\n+    }\n+  return c;\n+}\n+\n+void init()\n+{\n+  int i;\n+\n+  i8_exp = i8_ref = 127;\n+  i16_exp = i16_ref = 65535;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      a_u8[i] = (i + 3) % 256;\n+      b_i8[i] = (i + 1) % 128; \n+      a_i16[i] = i * 2;\n+      b_i16[i] = -i + 2;\n+    }\n+}\n+\n+static void vnni_test()\n+{\n+  init ();\n+  i16_exp = sdot_prod_hi (a_i16, b_i16, i16_exp, N);\n+  i16_ref = sdot_prod_hi_scalar (a_i16, b_i16, i16_ref, N);\n+  if (i16_exp != i16_ref)\n+    abort ();\n+\n+  init ();\n+  i8_exp = usdot_prod_qi (a_u8, b_i8, i8_exp, N);\n+  i8_ref = usdot_prod_qi_scalar (a_u8, b_i8, i8_ref, N);\n+  if (i8_exp != i8_ref)\n+    abort ();\n+}"}]}