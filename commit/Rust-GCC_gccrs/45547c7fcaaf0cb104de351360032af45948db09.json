{"sha": "45547c7fcaaf0cb104de351360032af45948db09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU1NDdjN2ZjYWFmMGNiMTA0ZGUzNTEzNjAwMzJhZjQ1OTQ4ZGIwOQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-09-21T20:47:04Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-09-21T20:47:04Z"}, "message": "re PR objc/23710 (objc front-end should not \"abort\" after erroring out about method definition not in class context)\n\nPR objc/23710\nIn gcc/:\n        * c-family/c-common.h (objc_start_method_definition): Return bool\n        instead of void.\n        * c-family/stub-objc.c (objc_start_method_definition): Return bool\n        instead of void.\n        * c-parser.c (c_parser_objc_method_definition): Check the return\n        value of objc_start_method_definition and if false is returned,\n        parse the method definition but emit no code.\nIn gcc/objc/:\n        * objc-act.c (objc_start_method_definition): Do not abort upon a\n        'method definition not in @implementation context' error.  Return\n        'false' instead.\nIn gcc/testsuite/:\n       * objc.dg/invalid-method-1.m: New.\n\nFrom-SVN: r164497", "tree": {"sha": "c7e866e855504d34b4f13d9b926527820acd5180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7e866e855504d34b4f13d9b926527820acd5180"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45547c7fcaaf0cb104de351360032af45948db09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45547c7fcaaf0cb104de351360032af45948db09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45547c7fcaaf0cb104de351360032af45948db09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45547c7fcaaf0cb104de351360032af45948db09/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec5e67bf4f176448bfb868599cefb583110301f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5e67bf4f176448bfb868599cefb583110301f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec5e67bf4f176448bfb868599cefb583110301f1"}], "stats": {"total": 74, "additions": 66, "deletions": 8}, "files": [{"sha": "8ae530e99498897f6125d175b4416046fad53b64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45547c7fcaaf0cb104de351360032af45948db09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45547c7fcaaf0cb104de351360032af45948db09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45547c7fcaaf0cb104de351360032af45948db09", "patch": "@@ -7,6 +7,17 @@\n \tstatic.\n \t(TTARGET_ASM_OUTPUT_ADDR_CONST_EXTRA): Define.\n \n+2010-09-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/23710\n+\t* c-family/c-common.h (objc_start_method_definition): Return bool\n+\tinstead of void.\n+\t* c-family/stub-objc.c (objc_start_method_definition): Return bool\n+\tinstead of void.\n+\t* c-parser.c (c_parser_objc_method_definition): Check the return\n+\tvalue of objc_start_method_definition and if false is returned,\n+\tparse the method definition but emit no code.\n+\t\n 2010-09-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR objc/25965"}, {"sha": "de72c192edfcc3a9bfe87ccd154606114ed250ae", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45547c7fcaaf0cb104de351360032af45948db09/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45547c7fcaaf0cb104de351360032af45948db09/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=45547c7fcaaf0cb104de351360032af45948db09", "patch": "@@ -976,7 +976,7 @@ extern void objc_set_visibility (int);\n extern void objc_set_method_type (enum tree_code);\n extern tree objc_build_method_signature (tree, tree, tree, bool);\n extern void objc_add_method_declaration (tree);\n-extern void objc_start_method_definition (tree);\n+extern bool objc_start_method_definition (tree);\n extern void objc_finish_method_definition (tree);\n extern void objc_add_instance_variable (tree);\n extern tree objc_build_keyword_decl (tree, tree, tree);"}, {"sha": "0ce1feffb41a570c96ff293bf4e1100178aa12d4", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45547c7fcaaf0cb104de351360032af45948db09/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45547c7fcaaf0cb104de351360032af45948db09/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=45547c7fcaaf0cb104de351360032af45948db09", "patch": "@@ -184,9 +184,10 @@ objc_add_method_declaration (tree ARG_UNUSED (signature))\n {\n }\n \n-void\n+bool\n objc_start_method_definition (tree ARG_UNUSED (signature))\n {\n+  return true;\n }\n \n void"}, {"sha": "b1e6eb2ee08b4436e99967b9d86e56359a821b04", "filename": "gcc/c-parser.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45547c7fcaaf0cb104de351360032af45948db09/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45547c7fcaaf0cb104de351360032af45948db09/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=45547c7fcaaf0cb104de351360032af45948db09", "patch": "@@ -6597,9 +6597,19 @@ c_parser_objc_method_definition (c_parser *parser)\n       return;\n     }\n   parser->objc_pq_context = false;\n-  objc_start_method_definition (decl);\n-  add_stmt (c_parser_compound_statement (parser));\n-  objc_finish_method_definition (current_function_decl);\n+  if (objc_start_method_definition (decl))\n+    {\n+      add_stmt (c_parser_compound_statement (parser));\n+      objc_finish_method_definition (current_function_decl);\n+    }\n+  else\n+    {\n+      /* This code is executed when we find a method definition\n+\t outside of an @implementation context.  Parse the method (to\n+\t keep going) but do not emit any code.\n+      */\n+      c_parser_compound_statement (parser);\n+    }\n }\n \n /* Parse an objc-methodprotolist."}, {"sha": "8d5490e52826aa479eb292f1f4c5332519c1c623", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45547c7fcaaf0cb104de351360032af45948db09/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45547c7fcaaf0cb104de351360032af45948db09/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=45547c7fcaaf0cb104de351360032af45948db09", "patch": "@@ -1,3 +1,10 @@\n+2010-09-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/23710\n+\t* objc-act.c (objc_start_method_definition): Do not abort upon a\n+\t'method definition not in @implementation context' error.  Return\n+\t'false' instead.\n+\n 2010-09-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR objc/25965"}, {"sha": "55e50f411f8245d5206d23ad9a2b0b4ec2de861f", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45547c7fcaaf0cb104de351360032af45948db09/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45547c7fcaaf0cb104de351360032af45948db09/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=45547c7fcaaf0cb104de351360032af45948db09", "patch": "@@ -777,18 +777,30 @@ void\n objc_add_method_declaration (tree decl)\n {\n   if (!objc_interface_context)\n-    fatal_error (\"method declaration not in @interface context\");\n+    {\n+      /* PS: At the moment, due to how the parser works, it should be\n+\t impossible to get here.  But it's good to have the check in\n+\t case the parser changes.\n+      */\n+      fatal_error (\"method declaration not in @interface context\");\n+    }\n \n   objc_add_method (objc_interface_context,\n \t\t   decl,\n \t\t   objc_inherit_code == CLASS_METHOD_DECL);\n }\n \n-void\n+/* Return 'true' if the method definition could be started, and\n+   'false' if not (because we are outside an @implementation context).\n+*/\n+bool\n objc_start_method_definition (tree decl)\n {\n   if (!objc_implementation_context)\n-    fatal_error (\"method definition not in @implementation context\");\n+    {\n+      error (\"method definition not in @implementation context\");\n+      return false;\n+    }\n \n #ifndef OBJCPLUS\n   /* Indicate no valid break/continue context by setting these variables\n@@ -801,6 +813,7 @@ objc_start_method_definition (tree decl)\n \t\t   decl,\n \t\t   objc_inherit_code == CLASS_METHOD_DECL);\n   start_method_def (decl);\n+  return true;\n }\n \n void"}, {"sha": "101d68470e2c5f805258a9a277ab970d9b975d86", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45547c7fcaaf0cb104de351360032af45948db09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45547c7fcaaf0cb104de351360032af45948db09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45547c7fcaaf0cb104de351360032af45948db09", "patch": "@@ -9,6 +9,11 @@\n \targuments checks. Update temporary counts.\n \t* gfortran.dg/transpose_optimization_1.f90: New.\n \n+2010-09-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/23710\n+\t* objc.dg/invalid-method-1.m: New.\n+\n 2010-09-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tMerge from 'apple/trunk' branch on FSF servers."}, {"sha": "78eae2c5815e2055fc603700ace7dcd4d489d0f5", "filename": "gcc/testsuite/objc.dg/invalid-method-1.m", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45547c7fcaaf0cb104de351360032af45948db09/gcc%2Ftestsuite%2Fobjc.dg%2Finvalid-method-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45547c7fcaaf0cb104de351360032af45948db09/gcc%2Ftestsuite%2Fobjc.dg%2Finvalid-method-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Finvalid-method-1.m?ref=45547c7fcaaf0cb104de351360032af45948db09", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* Test that we keep compiling if a method definition is found outside\n+   of an @implementation context.\n+*/\n+\n++ (void)C { } /* { dg-error \"method definition not in @implementation context\" } */\n+\n+/* We have another error here to test that the compiler is still going and\n+   finding errors in the rest of the code.\n+*/\n+@compatibility_alias class1 class2; /* { dg-warning \"annot find class\" } */"}]}