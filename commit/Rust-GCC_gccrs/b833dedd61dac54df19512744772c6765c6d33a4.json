{"sha": "b833dedd61dac54df19512744772c6765c6d33a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgzM2RlZGQ2MWRhYzU0ZGYxOTUxMjc0NDc3MmM2NzY1YzZkMzNhNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-01-27T16:59:31Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-01-27T16:59:31Z"}, "message": "re PR ipa/64282 (ICE in gimple_get_virt_method_for_vtable, at gimple-fold.c:5635)\n\n\n\tPR ipa/64282\n\t* gimple-fold.c (gimple_get_virt_method_for_vtable): Remove assert\n\ton vtable being vtable.\n\t* g++.dg/torture/pr64282.C: New testcase.\n\nFrom-SVN: r220177", "tree": {"sha": "3e002e77ee8eed2f26642b856fa34952144d14f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e002e77ee8eed2f26642b856fa34952144d14f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b833dedd61dac54df19512744772c6765c6d33a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b833dedd61dac54df19512744772c6765c6d33a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b833dedd61dac54df19512744772c6765c6d33a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b833dedd61dac54df19512744772c6765c6d33a4/comments", "author": null, "committer": null, "parents": [{"sha": "e24ca886a81b5754e75c734c6dc140fdf5524131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24ca886a81b5754e75c734c6dc140fdf5524131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e24ca886a81b5754e75c734c6dc140fdf5524131"}], "stats": {"total": 113, "additions": 112, "deletions": 1}, "files": [{"sha": "03097cf2a3fbb39aa69bbaad76385cc9a9451025", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b833dedd61dac54df19512744772c6765c6d33a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b833dedd61dac54df19512744772c6765c6d33a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b833dedd61dac54df19512744772c6765c6d33a4", "patch": "@@ -1,3 +1,9 @@\n+2015-01-27  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/64282\n+\t* gimple-fold.c (gimple_get_virt_method_for_vtable): Remove assert\n+\ton vtable being vtable.\n+\n 2015-01-27  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n         * doc/extend.texi: s/390: Update documentation of hotpatch attribute."}, {"sha": "3015901d8c1f1fb73db12396bab4081e7335c508", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b833dedd61dac54df19512744772c6765c6d33a4/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b833dedd61dac54df19512744772c6765c6d33a4/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=b833dedd61dac54df19512744772c6765c6d33a4", "patch": "@@ -5649,7 +5649,6 @@ gimple_get_virt_method_for_vtable (HOST_WIDE_INT token,\n   if (TREE_CODE (v) != VAR_DECL\n       || !DECL_VIRTUAL_P (v))\n     {\n-      gcc_assert (in_lto_p);\n       /* Pass down that we lost track of the target.  */\n       if (can_refer)\n \t*can_refer = false;"}, {"sha": "c8170c1525d139d8edddb9de207cf1eaf46f1000", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b833dedd61dac54df19512744772c6765c6d33a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b833dedd61dac54df19512744772c6765c6d33a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b833dedd61dac54df19512744772c6765c6d33a4", "patch": "@@ -1,3 +1,8 @@\n+2015-01-27  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/64282\n+\t* g++.dg/torture/pr64282.C: New testcase.\n+\n 2015-01-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/store-pair-1.c: Update scan-assembler to check"}, {"sha": "48429884e9f4ab3d492895c395cdd9f5d7885229", "filename": "gcc/testsuite/g++.dg/torture/pr64282.C", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b833dedd61dac54df19512744772c6765c6d33a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64282.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b833dedd61dac54df19512744772c6765c6d33a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64282.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64282.C?ref=b833dedd61dac54df19512744772c6765c6d33a4", "patch": "@@ -0,0 +1,101 @@\n+// { dg-do compile }\n+template <class _T1> struct A\n+{\n+  _T1 first;\n+};\n+struct B\n+{\n+  int operator!=(B);\n+};\n+template <typename _Tp> struct C\n+{\n+  C (B);\n+  _Tp operator*();\n+  int operator!=(C);\n+};\n+template <typename _Tp> class D\n+{\n+public:\n+  typedef C<_Tp> const_iterator;\n+  const_iterator m_fn1 () const;\n+  B m_fn2 ();\n+  void m_fn3 ();\n+};\n+class F\n+{\n+  struct G\n+  {\n+    static G &\n+    m_fn5 ()\n+    {\n+      void fn1 ();\n+      return *reinterpret_cast<G *> (fn1);\n+    }\n+    int *\n+    m_fn6 ()\n+    {\n+      return reinterpret_cast<int *> (this);\n+    }\n+  };\n+  struct _Alloc_hider\n+  {\n+    _Alloc_hider (int *p1, int) : _M_p (p1) {}\n+    int *_M_p;\n+  } _M_dataplus;\n+  G &\n+  m_fn4 ()\n+  {\n+    return G::m_fn5 ();\n+  }\n+public:\n+  F () : _M_dataplus (m_fn4 ().m_fn6 (), 0) {}\n+};\n+class H\n+{\n+  void m_fn7 (const F &, bool &);\n+  bool m_fn8 (const D<F> &, const F &, F &);\n+};\n+typedef A<int> CandPair;\n+class I\n+{\n+public:\n+  virtual void m_fn9 (const F &, bool, D<CandPair> &);\n+};\n+class J : I\n+{\n+public:\n+  void m_fn9 (const F &, bool, D<CandPair> &);\n+};\n+D<I *> c;\n+void\n+J::m_fn9 (const F &, bool, D<CandPair> &)\n+{\n+  D<int> a;\n+  for (B b; b != a.m_fn2 ();)\n+    ;\n+}\n+inline void\n+fn2 (F p1, int, int, J *p4, D<CandPair>)\n+{\n+  D<CandPair> d;\n+  d.m_fn3 ();\n+  p4->m_fn9 (p1, 0, d);\n+  for (D<I *>::const_iterator e = c.m_fn1 (); e != c.m_fn2 ();)\n+    (*e)->m_fn9 (p1, 0, d);\n+}\n+void\n+H::m_fn7 (const F &, bool &)\n+{\n+  A<F> f;\n+  D<F> g;\n+  F h;\n+  m_fn8 (g, f.first, h);\n+}\n+bool\n+H::m_fn8 (const D<F> &p1, const F &, F &)\n+{\n+  F i;\n+  p1.m_fn1 ();\n+  D<CandPair> j;\n+  fn2 (i, 0, 0, 0, j);\n+}"}]}