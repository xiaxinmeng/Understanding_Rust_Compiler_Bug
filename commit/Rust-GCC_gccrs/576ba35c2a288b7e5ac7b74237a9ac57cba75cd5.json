{"sha": "576ba35c2a288b7e5ac7b74237a9ac57cba75cd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc2YmEzNWMyYTI4OGI3ZTVhYzdiNzQyMzdhOWFjNTdjYmE3NWNkNQ==", "commit": {"author": {"name": "Pitchumani Sivanupandi", "email": "pitchumani.s@atmel.com", "date": "2014-04-05T05:51:59Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2014-04-05T05:51:59Z"}, "message": "avr-arch.h (avr_mcu_t): Add dev_attribute field to have device specific ISA/ feature information.\n\n\t* config/avr/avr-arch.h (avr_mcu_t): Add dev_attribute field to have device\n\tspecific ISA/ feature information. Remove short_sp and errata_skip ds.\n\tAdd avr_device_specific_features enum to have device specific info.\n\t* config/avr/avr-c.c (avr_cpu_cpp_builtins): use dev_attribute to check\n\terrata_skip. Add __AVR_ISA_RMW__ builtin macro if RMW ISA available.\n\t* config/avr/avr-devices.c (avr_mcu_types): Update AVR_MCU macro for\n\tupdated device specific info.\n\t* config/avr/avr-mcus.def: Merge device specific details to\n\tdev_attribute field.\n\t* config/avr/avr.c (avr_2word_insn_p): use dev_attribute field to check\n\terrata_skip.\n\t* config/avr/avr.h (AVR_HAVE_8BIT_SP): same for short sp info.\n\t* config/avr/driver-avr.c (avr_device_to_as): Pass -mrmw option to\n\tassembler if RMW isa supported by current device.\n\t* config/avr/genmultilib.awk: Update as device info structure changed.\n\t* doc/invoke.texi: Add info for __AVR_ISA_RMW__ builtin macro\n\n\t* gcc.target/avr/dev-specific-rmw.c: New test.\n\nFrom-SVN: r209141", "tree": {"sha": "6e7a211179a89dbdd6aa090f3a144347029c7a11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e7a211179a89dbdd6aa090f3a144347029c7a11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/comments", "author": null, "committer": null, "parents": [{"sha": "ebc047a210e17c5facf31ff11eddaac9db4d4a95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebc047a210e17c5facf31ff11eddaac9db4d4a95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebc047a210e17c5facf31ff11eddaac9db4d4a95"}], "stats": {"total": 659, "additions": 361, "deletions": 298}, "files": [{"sha": "da2eff779380d6a8ebd5d02fa0071d14f0c5509a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=576ba35c2a288b7e5ac7b74237a9ac57cba75cd5", "patch": "@@ -1,3 +1,22 @@\n+2014-04-05  Pitchumani Sivanupandi  <Pitchumani.S@atmel.com>\n+\n+\t* config/avr/avr-arch.h (avr_mcu_t): Add dev_attribute field to have device\n+\tspecific ISA/ feature information. Remove short_sp and errata_skip ds.\n+\tAdd avr_device_specific_features enum to have device specific info.\n+\t* config/avr/avr-c.c (avr_cpu_cpp_builtins): use dev_attribute to check\n+\terrata_skip. Add __AVR_ISA_RMW__ builtin macro if RMW ISA available.\n+\t* config/avr/avr-devices.c (avr_mcu_types): Update AVR_MCU macro for\n+\tupdated device specific info.\n+\t* config/avr/avr-mcus.def: Merge device specific details to\n+\tdev_attribute field.\n+\t* config/avr/avr.c (avr_2word_insn_p): use dev_attribute field to check\n+\terrata_skip.\n+\t* config/avr/avr.h (AVR_HAVE_8BIT_SP): same for short sp info.\n+\t* config/avr/driver-avr.c (avr_device_to_as): Pass -mrmw option to\n+\tassembler if RMW isa supported by current device.\n+\t* config/avr/genmultilib.awk: Update as device info structure changed.\n+\t* doc/invoke.texi: Add info for __AVR_ISA_RMW__ builtin macro\n+\n 2014-04-04  Cong Hou  <congh@google.com>\n \n \tPR tree-optimization/60656\n@@ -33,7 +52,7 @@\n \tsymtab_remove_unreachable_nodes): Drop bodies of always inline\n \tafter early inlining.\n \t(symtab_remove_unreachable_nodes): Remove always_inline attribute.\n-\t\n+\n 2014-04-04  Jakub Jelinek  <jakub@redhat.com>\n \tRamana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n "}, {"sha": "b3c7cc0855e82c7ff359e62ef39d3c0cb1b4baae", "filename": "gcc/config/avr/avr-arch.h", "status": "modified", "additions": 39, "deletions": 23, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Favr-arch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Favr-arch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-arch.h?ref=576ba35c2a288b7e5ac7b74237a9ac57cba75cd5", "patch": "@@ -100,32 +100,12 @@ typedef struct\n   /* Index in avr_arch_types[].  */\n   enum avr_arch arch;\n \n+  /* device specific feature */\n+  int dev_attribute;\n+\n   /* Must lie outside user's namespace.  NULL == no macro.  */\n   const char *const macro;\n \n-  /* Stack pointer have 8 bits width.  */\n-  int short_sp;\n-\n-  /* Some AVR devices have a core erratum when skipping a 2-word instruction.\n-     Skip instructions are:  SBRC, SBRS, SBIC, SBIS, CPSE.\n-     Problems will occur with return address is IRQ executes during the\n-     skip sequence.\n-\n-     A support ticket from Atmel returned the following information:\n-\n-         Subject: (ATTicket:644469) On AVR skip-bug core Erratum\n-         From: avr@atmel.com                    Date: 2011-07-27\n-         (Please keep the subject when replying to this mail)\n-\n-         This errata exists only in AT90S8515 and ATmega103 devices.\n-\n-         For information please refer the following respective errata links\n-            http://www.atmel.com/dyn/resources/prod_documents/doc2494.pdf\n-            http://www.atmel.com/dyn/resources/prod_documents/doc1436.pdf  */\n-\n-  /* Core Erratum:  Must not skip 2-word instruction.  */\n-  int errata_skip;\n-\n   /* Start of data section.  */\n   int data_section_start;\n \n@@ -136,6 +116,42 @@ typedef struct\n   const char *const library_name;\n } avr_mcu_t;\n \n+/* AVR device specific features.\n+\n+AVR_ISA_RMW\n+  Only few avr devices have Read-Modify-Write (RMW) instructions\n+  (XCH, LAC, LAS and LAT)\n+\n+AVR_SHORT_SP\n+  Stack Pointer has only 8 bit width.\n+  The device / multilib has an 8-bit stack pointer (no SPH).\n+\n+AVR_ERRATA_SKIP\n+  Some AVR devices have a core erratum when skipping a 2-word instruction.\n+  Skip instructions are:  SBRC, SBRS, SBIC, SBIS, CPSE.\n+  Problems will occur with return address is IRQ executes during the\n+  skip sequence.\n+\n+  A support ticket from Atmel returned the following information:\n+\n+     Subject: (ATTicket:644469) On AVR skip-bug core Erratum\n+     From: avr@atmel.com                    Date: 2011-07-27\n+     (Please keep the subject when replying to this mail)\n+\n+     This errata exists only in AT90S8515 and ATmega103 devices.\n+\n+     For information please refer the following respective errata links\n+       http://www.atmel.com/dyn/resources/prod_documents/doc2494.pdf\n+       http://www.atmel.com/dyn/resources/prod_documents/doc1436.pdf  */\n+\n+enum avr_device_specific_features\n+{\n+  AVR_ISA_NONE,\n+  AVR_ISA_RMW     = 0x1, /* device has RMW instructions. */\n+  AVR_SHORT_SP    = 0x2, /* Stack Pointer has 8 bits width. */\n+  AVR_ERRATA_SKIP = 0x4  /* device has a core erratum. */\n+};\n+\n /* Map architecture to its texinfo string.  */\n \n typedef struct"}, {"sha": "c6a2f1f94718f1a5069390e4ca248ca37dbcb1e3", "filename": "gcc/config/avr/avr-c.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Favr-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Favr-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-c.c?ref=576ba35c2a288b7e5ac7b74237a9ac57cba75cd5", "patch": "@@ -347,14 +347,17 @@ avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n   if (TARGET_NO_INTERRUPTS)\n     cpp_define (pfile, \"__NO_INTERRUPTS__\");\n \n-  if (avr_current_device->errata_skip)\n+  if (avr_current_device->dev_attribute & AVR_ERRATA_SKIP)\n     {\n       cpp_define (pfile, \"__AVR_ERRATA_SKIP__\");\n \n       if (avr_current_arch->have_jmp_call)\n         cpp_define (pfile, \"__AVR_ERRATA_SKIP_JMP_CALL__\");\n     }\n \n+  if (avr_current_device->dev_attribute & AVR_ISA_RMW)\n+    cpp_define (pfile, \"__AVR_ISA_RMW__\");\n+\n   cpp_define_formatted (pfile, \"__AVR_SFR_OFFSET__=0x%x\",\n                         avr_current_arch->sfr_offset);\n "}, {"sha": "2485cad65c40c157d2c350e22ab2379e1761b88e", "filename": "gcc/config/avr/avr-devices.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Favr-devices.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Favr-devices.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-devices.c?ref=576ba35c2a288b7e5ac7b74237a9ac57cba75cd5", "patch": "@@ -104,11 +104,11 @@ avr_texinfo[] =\n const avr_mcu_t\n avr_mcu_types[] =\n {\n-#define AVR_MCU(NAME, ARCH, MACRO, SP8, ERR_SKIP, DATA_SEC, N_FLASH, LIBNAME)\\\n-  { NAME, ARCH, MACRO, SP8, ERR_SKIP, DATA_SEC, N_FLASH, LIBNAME },\n+#define AVR_MCU(NAME, ARCH, DEV_ATTRIBUTE, MACRO, DATA_SEC, N_FLASH, LIBNAME)\\\n+  { NAME, ARCH, DEV_ATTRIBUTE, MACRO, DATA_SEC, N_FLASH, LIBNAME },\n #include \"avr-mcus.def\"\n #undef AVR_MCU\n     /* End of list.  */\n-  { NULL, ARCH_UNKNOWN, NULL, 0, 0, 0, 0, NULL }\n+  { NULL, ARCH_UNKNOWN, AVR_ISA_NONE, NULL, 0, 0, NULL }\n };\n "}, {"sha": "3cf2fcd41945c46452b0fccb566c64b40d9ce2f9", "filename": "gcc/config/avr/avr-mcus.def", "status": "modified", "additions": 258, "deletions": 261, "changes": 519, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Favr-mcus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Favr-mcus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-mcus.def?ref=576ba35c2a288b7e5ac7b74237a9ac57cba75cd5", "patch": "@@ -33,291 +33,288 @@\n \n    Before including this file, define a macro:\n \n-   AVR_MCU (NAME, ARCH, MACRO, SHORT_SP, ERRATA_SKIP, DATA_SEC, N_FLASH,\n-            LIBRARY_NAME)\n+   AVR_MCU (NAME, ARCH, DEV_ATTRIBUTE, MACRO, DATA_SEC, N_FLASH, LIBRARY_NAME)\n \n    where the arguments are the fields of avr_mcu_t:\n    \n-       NAME         Accept -mmcu=<NAME>\n+       NAME          Accept -mmcu=<NAME>\n \n-       ARCH         Specifies the multilib variant together with SHORT_SP\n+       ARCH          Specifies the multilib variant together with SHORT_SP\n \n-       MACRO        If NULL, this is a core and not a device.  If non-NULL,\n-                    supply respective built-in macro.\n+       DEV_ATTRIBUTE Specifies the device specific features\n+                     - additional ISA, short SP, errata skip etc.,\n \n-       SHORT_SP     The device / multilib has an 8-bit stack pointer (no SPH).\n+       MACRO         If NULL, this is a core and not a device.  If non-NULL,\n+                     supply respective built-in macro.\n \n-       ERRATA_SKIP  Apply work-around for the \"skip 32-bit instruction\"\n-                    silicon bug:  Don't skip 32-bit instrctions.\n+       DATA_SEC      First address of SRAM, used in  -Tdata=  by the driver.\n \n-       DATA_SEC     First address of SRAM, used in  -Tdata=  by the driver.\n+       N_FLASH       Number of 64 KiB flash segments, rounded up.\n \n-       N_FLASH      Number of 64 KiB flash segments, rounded up.\n-\n-       LIBRARY_NAME Used by the driver to linke startup code from avr-libc\n-                    as of  crt<LIBRARY_NAME>.o\n+       LIBRARY_NAME  Used by the driver to linke startup code from avr-libc\n+                     as of  crt<LIBRARY_NAME>.o\n \n    \"avr2\" must be first for the \"0\" default to work as intended.  */\n \n /* Classic, <= 8K.  */\n-AVR_MCU (\"avr2\",                 ARCH_AVR2, NULL,                        0, 1, 0x0060, 6, \"s8515\")\n-AVR_MCU (\"at90s2313\",            ARCH_AVR2, \"__AVR_AT90S2313__\",         1, 0, 0x0060, 1, \"s2313\")\n-AVR_MCU (\"at90s2323\",            ARCH_AVR2, \"__AVR_AT90S2323__\",         1, 0, 0x0060, 1, \"s2323\")\n-AVR_MCU (\"at90s2333\",            ARCH_AVR2, \"__AVR_AT90S2333__\",         1, 0, 0x0060, 1, \"s2333\")\n-AVR_MCU (\"at90s2343\",            ARCH_AVR2, \"__AVR_AT90S2343__\",         1, 0, 0x0060, 1, \"s2343\")\n-AVR_MCU (\"attiny22\",             ARCH_AVR2, \"__AVR_ATtiny22__\",          1, 0, 0x0060, 1, \"tn22\")\n-AVR_MCU (\"attiny26\",             ARCH_AVR2, \"__AVR_ATtiny26__\",          1, 0, 0x0060, 1, \"tn26\")\n-AVR_MCU (\"at90s4414\",            ARCH_AVR2, \"__AVR_AT90S4414__\",         0, 0, 0x0060, 1, \"s4414\")\n-AVR_MCU (\"at90s4433\",            ARCH_AVR2, \"__AVR_AT90S4433__\",         1, 0, 0x0060, 1, \"s4433\")\n-AVR_MCU (\"at90s4434\",            ARCH_AVR2, \"__AVR_AT90S4434__\",         0, 0, 0x0060, 1, \"s4434\")\n-AVR_MCU (\"at90s8515\",            ARCH_AVR2, \"__AVR_AT90S8515__\",         0, 1, 0x0060, 1, \"s8515\")\n-AVR_MCU (\"at90c8534\",            ARCH_AVR2, \"__AVR_AT90C8534__\",         0, 0, 0x0060, 1, \"c8534\")\n-AVR_MCU (\"at90s8535\",            ARCH_AVR2, \"__AVR_AT90S8535__\",         0, 0, 0x0060, 1, \"s8535\")\n+AVR_MCU (\"avr2\",                 ARCH_AVR2, AVR_ERRATA_SKIP, NULL,                     0x0060, 6, \"s8515\")\n+AVR_MCU (\"at90s2313\",            ARCH_AVR2, AVR_SHORT_SP, \"__AVR_AT90S2313__\",         0x0060, 1, \"s2313\")\n+AVR_MCU (\"at90s2323\",            ARCH_AVR2, AVR_SHORT_SP, \"__AVR_AT90S2323__\",         0x0060, 1, \"s2323\")\n+AVR_MCU (\"at90s2333\",            ARCH_AVR2, AVR_SHORT_SP, \"__AVR_AT90S2333__\",         0x0060, 1, \"s2333\")\n+AVR_MCU (\"at90s2343\",            ARCH_AVR2, AVR_SHORT_SP, \"__AVR_AT90S2343__\",         0x0060, 1, \"s2343\")\n+AVR_MCU (\"attiny22\",             ARCH_AVR2, AVR_SHORT_SP, \"__AVR_ATtiny22__\",          0x0060, 1, \"tn22\")\n+AVR_MCU (\"attiny26\",             ARCH_AVR2, AVR_SHORT_SP, \"__AVR_ATtiny26__\",          0x0060, 1, \"tn26\")\n+AVR_MCU (\"at90s4414\",            ARCH_AVR2, AVR_ISA_NONE, \"__AVR_AT90S4414__\",         0x0060, 1, \"s4414\")\n+AVR_MCU (\"at90s4433\",            ARCH_AVR2, AVR_SHORT_SP, \"__AVR_AT90S4433__\",         0x0060, 1, \"s4433\")\n+AVR_MCU (\"at90s4434\",            ARCH_AVR2, AVR_ISA_NONE, \"__AVR_AT90S4434__\",         0x0060, 1, \"s4434\")\n+AVR_MCU (\"at90s8515\",            ARCH_AVR2, AVR_ERRATA_SKIP, \"__AVR_AT90S8515__\",      0x0060, 1, \"s8515\")\n+AVR_MCU (\"at90c8534\",            ARCH_AVR2, AVR_ISA_NONE, \"__AVR_AT90C8534__\",         0x0060, 1, \"c8534\")\n+AVR_MCU (\"at90s8535\",            ARCH_AVR2, AVR_ISA_NONE, \"__AVR_AT90S8535__\",         0x0060, 1, \"s8535\")\n /* Classic + MOVW, <= 8K.  */\n-AVR_MCU (\"avr25\",                ARCH_AVR25, NULL,                       0, 0, 0x0060, 1, \"tn85\")\n-AVR_MCU (\"ata6289\",              ARCH_AVR25, \"__AVR_ATA6289__\",          0, 0, 0x0100, 1, \"a6289\")\n-AVR_MCU (\"ata5272\",              ARCH_AVR25, \"__AVR_ATA5272__\",          0, 0, 0x0100, 1, \"a5272\")\n-AVR_MCU (\"attiny13\",             ARCH_AVR25, \"__AVR_ATtiny13__\",         1, 0, 0x0060, 1, \"tn13\")\n-AVR_MCU (\"attiny13a\",            ARCH_AVR25, \"__AVR_ATtiny13A__\",        1, 0, 0x0060, 1, \"tn13a\")\n-AVR_MCU (\"attiny2313\",           ARCH_AVR25, \"__AVR_ATtiny2313__\",       1, 0, 0x0060, 1, \"tn2313\")\n-AVR_MCU (\"attiny2313a\",          ARCH_AVR25, \"__AVR_ATtiny2313A__\",      1, 0, 0x0060, 1, \"tn2313a\")\n-AVR_MCU (\"attiny24\",             ARCH_AVR25, \"__AVR_ATtiny24__\",         1, 0, 0x0060, 1, \"tn24\")\n-AVR_MCU (\"attiny24a\",            ARCH_AVR25, \"__AVR_ATtiny24A__\",        1, 0, 0x0060, 1, \"tn24a\")\n-AVR_MCU (\"attiny4313\",           ARCH_AVR25, \"__AVR_ATtiny4313__\",       0, 0, 0x0060, 1, \"tn4313\")\n-AVR_MCU (\"attiny44\",             ARCH_AVR25, \"__AVR_ATtiny44__\",         0, 0, 0x0060, 1, \"tn44\")\n-AVR_MCU (\"attiny44a\",            ARCH_AVR25, \"__AVR_ATtiny44A__\",        0, 0, 0x0060, 1, \"tn44a\")\n-AVR_MCU (\"attiny84\",             ARCH_AVR25, \"__AVR_ATtiny84__\",         0, 0, 0x0060, 1, \"tn84\")\n-AVR_MCU (\"attiny84a\",            ARCH_AVR25, \"__AVR_ATtiny84A__\",        0, 0, 0x0060, 1, \"tn84\")\n-AVR_MCU (\"attiny25\",             ARCH_AVR25, \"__AVR_ATtiny25__\",         1, 0, 0x0060, 1, \"tn25\")\n-AVR_MCU (\"attiny45\",             ARCH_AVR25, \"__AVR_ATtiny45__\",         0, 0, 0x0060, 1, \"tn45\")\n-AVR_MCU (\"attiny85\",             ARCH_AVR25, \"__AVR_ATtiny85__\",         0, 0, 0x0060, 1, \"tn85\")\n-AVR_MCU (\"attiny261\",            ARCH_AVR25, \"__AVR_ATtiny261__\",        1, 0, 0x0060, 1, \"tn261\")\n-AVR_MCU (\"attiny261a\",           ARCH_AVR25, \"__AVR_ATtiny261A__\",       1, 0, 0x0060, 1, \"tn261a\")\n-AVR_MCU (\"attiny461\",            ARCH_AVR25, \"__AVR_ATtiny461__\",        0, 0, 0x0060, 1, \"tn461\")\n-AVR_MCU (\"attiny461a\",           ARCH_AVR25, \"__AVR_ATtiny461A__\",       0, 0, 0x0060, 1, \"tn461a\")\n-AVR_MCU (\"attiny861\",            ARCH_AVR25, \"__AVR_ATtiny861__\",        0, 0, 0x0060, 1, \"tn861\")\n-AVR_MCU (\"attiny861a\",           ARCH_AVR25, \"__AVR_ATtiny861A__\",       0, 0, 0x0060, 1, \"tn861a\")\n-AVR_MCU (\"attiny43u\",            ARCH_AVR25, \"__AVR_ATtiny43U__\",        0, 0, 0x0060, 1, \"tn43u\")\n-AVR_MCU (\"attiny87\",             ARCH_AVR25, \"__AVR_ATtiny87__\",         0, 0, 0x0100, 1, \"tn87\")\n-AVR_MCU (\"attiny48\",             ARCH_AVR25, \"__AVR_ATtiny48__\",         0, 0, 0x0100, 1, \"tn48\")\n-AVR_MCU (\"attiny88\",             ARCH_AVR25, \"__AVR_ATtiny88__\",         0, 0, 0x0100, 1, \"tn88\")\n-AVR_MCU (\"at86rf401\",            ARCH_AVR25, \"__AVR_AT86RF401__\",        0, 0, 0x0060, 1, \"86401\")\n+AVR_MCU (\"avr25\",                ARCH_AVR25, AVR_ISA_NONE, NULL,                       0x0060, 1, \"tn85\")\n+AVR_MCU (\"ata6289\",              ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATA6289__\",          0x0100, 1, \"a6289\")\n+AVR_MCU (\"ata5272\",              ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATA5272__\",          0x0100, 1, \"a5272\")\n+AVR_MCU (\"attiny13\",             ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny13__\",         0x0060, 1, \"tn13\")\n+AVR_MCU (\"attiny13a\",            ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny13A__\",        0x0060, 1, \"tn13a\")\n+AVR_MCU (\"attiny2313\",           ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny2313__\",       0x0060, 1, \"tn2313\")\n+AVR_MCU (\"attiny2313a\",          ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny2313A__\",      0x0060, 1, \"tn2313a\")\n+AVR_MCU (\"attiny24\",             ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny24__\",         0x0060, 1, \"tn24\")\n+AVR_MCU (\"attiny24a\",            ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny24A__\",        0x0060, 1, \"tn24a\")\n+AVR_MCU (\"attiny4313\",           ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny4313__\",       0x0060, 1, \"tn4313\")\n+AVR_MCU (\"attiny44\",             ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny44__\",         0x0060, 1, \"tn44\")\n+AVR_MCU (\"attiny44a\",            ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny44A__\",        0x0060, 1, \"tn44a\")\n+AVR_MCU (\"attiny84\",             ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny84__\",         0x0060, 1, \"tn84\")\n+AVR_MCU (\"attiny84a\",            ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny84A__\",        0x0060, 1, \"tn84\")\n+AVR_MCU (\"attiny25\",             ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny25__\",         0x0060, 1, \"tn25\")\n+AVR_MCU (\"attiny45\",             ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny45__\",         0x0060, 1, \"tn45\")\n+AVR_MCU (\"attiny85\",             ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny85__\",         0x0060, 1, \"tn85\")\n+AVR_MCU (\"attiny261\",            ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny261__\",        0x0060, 1, \"tn261\")\n+AVR_MCU (\"attiny261a\",           ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny261A__\",       0x0060, 1, \"tn261a\")\n+AVR_MCU (\"attiny461\",            ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny461__\",        0x0060, 1, \"tn461\")\n+AVR_MCU (\"attiny461a\",           ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny461A__\",       0x0060, 1, \"tn461a\")\n+AVR_MCU (\"attiny861\",            ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny861__\",        0x0060, 1, \"tn861\")\n+AVR_MCU (\"attiny861a\",           ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny861A__\",       0x0060, 1, \"tn861a\")\n+AVR_MCU (\"attiny43u\",            ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny43U__\",        0x0060, 1, \"tn43u\")\n+AVR_MCU (\"attiny87\",             ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny87__\",         0x0100, 1, \"tn87\")\n+AVR_MCU (\"attiny48\",             ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny48__\",         0x0100, 1, \"tn48\")\n+AVR_MCU (\"attiny88\",             ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny88__\",         0x0100, 1, \"tn88\")\n+AVR_MCU (\"at86rf401\",            ARCH_AVR25, AVR_ISA_NONE, \"__AVR_AT86RF401__\",        0x0060, 1, \"86401\")\n /* Classic, > 8K, <= 64K.  */\n-AVR_MCU (\"avr3\",                 ARCH_AVR3, NULL,                        0, 0, 0x0060, 1, \"43355\")\n-AVR_MCU (\"at43usb355\",           ARCH_AVR3, \"__AVR_AT43USB355__\",        0, 0, 0x0060, 1, \"43355\")\n-AVR_MCU (\"at76c711\",             ARCH_AVR3, \"__AVR_AT76C711__\",          0, 0, 0x0060, 1, \"76711\")\n+AVR_MCU (\"avr3\",                 ARCH_AVR3, AVR_ISA_NONE, NULL,                        0x0060, 1, \"43355\")\n+AVR_MCU (\"at43usb355\",           ARCH_AVR3, AVR_ISA_NONE, \"__AVR_AT43USB355__\",        0x0060, 1, \"43355\")\n+AVR_MCU (\"at76c711\",             ARCH_AVR3, AVR_ISA_NONE, \"__AVR_AT76C711__\",          0x0060, 1, \"76711\")\n /* Classic, == 128K.  */\n-AVR_MCU (\"avr31\",                ARCH_AVR31, NULL,                       0, 1, 0x0060, 2, \"m103\")\n-AVR_MCU (\"atmega103\",            ARCH_AVR31, \"__AVR_ATmega103__\",        0, 1, 0x0060, 2, \"m103\")\n-AVR_MCU (\"at43usb320\",           ARCH_AVR31, \"__AVR_AT43USB320__\",       0, 0, 0x0060, 2, \"43320\")\n+AVR_MCU (\"avr31\",                ARCH_AVR31, AVR_ERRATA_SKIP, NULL,                    0x0060, 2, \"m103\")\n+AVR_MCU (\"atmega103\",            ARCH_AVR31, AVR_ERRATA_SKIP, \"__AVR_ATmega103__\",     0x0060, 2, \"m103\")\n+AVR_MCU (\"at43usb320\",           ARCH_AVR31, AVR_ISA_NONE, \"__AVR_AT43USB320__\",       0x0060, 2, \"43320\")\n /* Classic + MOVW + JMP/CALL.  */\n-AVR_MCU (\"avr35\",                ARCH_AVR35, NULL,                       0, 0, 0x0100, 1, \"usb162\")\n-AVR_MCU (\"ata5505\",              ARCH_AVR35, \"__AVR_ATA5505__\",          0, 0, 0x0100, 1, \"a5505\")\n-AVR_MCU (\"at90usb82\",            ARCH_AVR35, \"__AVR_AT90USB82__\",        0, 0, 0x0100, 1, \"usb82\")\n-AVR_MCU (\"at90usb162\",           ARCH_AVR35, \"__AVR_AT90USB162__\",       0, 0, 0x0100, 1, \"usb162\")\n-AVR_MCU (\"atmega8u2\",            ARCH_AVR35, \"__AVR_ATmega8U2__\",        0, 0, 0x0100, 1, \"m8u2\")\n-AVR_MCU (\"atmega16u2\",           ARCH_AVR35, \"__AVR_ATmega16U2__\",       0, 0, 0x0100, 1, \"m16u2\")\n-AVR_MCU (\"atmega32u2\",           ARCH_AVR35, \"__AVR_ATmega32U2__\",       0, 0, 0x0100, 1, \"m32u2\")\n-AVR_MCU (\"attiny167\",            ARCH_AVR35, \"__AVR_ATtiny167__\",        0, 0, 0x0100, 1, \"tn167\")\n-AVR_MCU (\"attiny1634\",           ARCH_AVR35, \"__AVR_ATtiny1634__\",       0, 0, 0x0100, 1, \"tn1634\")\n+AVR_MCU (\"avr35\",                ARCH_AVR35, AVR_ISA_NONE, NULL,                       0x0100, 1, \"usb162\")\n+AVR_MCU (\"ata5505\",              ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATA5505__\",          0x0100, 1, \"a5505\")\n+AVR_MCU (\"at90usb82\",            ARCH_AVR35, AVR_ISA_NONE, \"__AVR_AT90USB82__\",        0x0100, 1, \"usb82\")\n+AVR_MCU (\"at90usb162\",           ARCH_AVR35, AVR_ISA_NONE, \"__AVR_AT90USB162__\",       0x0100, 1, \"usb162\")\n+AVR_MCU (\"atmega8u2\",            ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATmega8U2__\",        0x0100, 1, \"m8u2\")\n+AVR_MCU (\"atmega16u2\",           ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATmega16U2__\",       0x0100, 1, \"m16u2\")\n+AVR_MCU (\"atmega32u2\",           ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATmega32U2__\",       0x0100, 1, \"m32u2\")\n+AVR_MCU (\"attiny167\",            ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATtiny167__\",        0x0100, 1, \"tn167\")\n+AVR_MCU (\"attiny1634\",           ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATtiny1634__\",       0x0100, 1, \"tn1634\")\n /* Enhanced, <= 8K.  */\n-AVR_MCU (\"avr4\",                 ARCH_AVR4, NULL,                        0, 0, 0x0060, 1, \"m8\")\n-AVR_MCU (\"ata6285\",              ARCH_AVR4, \"__AVR_ATA6285__\",           0, 0, 0x0100, 1, \"a6285\")\n-AVR_MCU (\"ata6286\",              ARCH_AVR4, \"__AVR_ATA6286__\",           0, 0, 0x0100, 1, \"a6286\")\n-AVR_MCU (\"atmega8\",              ARCH_AVR4, \"__AVR_ATmega8__\",           0, 0, 0x0060, 1, \"m8\")\n-AVR_MCU (\"atmega8a\",             ARCH_AVR4, \"__AVR_ATmega8A__\",          0, 0, 0x0060, 1, \"m8a\")\n-AVR_MCU (\"atmega48\",             ARCH_AVR4, \"__AVR_ATmega48__\",          0, 0, 0x0100, 1, \"m48\")\n-AVR_MCU (\"atmega48a\",            ARCH_AVR4, \"__AVR_ATmega48A__\",         0, 0, 0x0100, 1, \"m48a\")\n-AVR_MCU (\"atmega48p\",            ARCH_AVR4, \"__AVR_ATmega48P__\",         0, 0, 0x0100, 1, \"m48p\")\n-AVR_MCU (\"atmega48pa\",           ARCH_AVR4, \"__AVR_ATmega48PA__\",        0, 0, 0x0100, 1, \"m48pa\")\n-AVR_MCU (\"atmega88\",             ARCH_AVR4, \"__AVR_ATmega88__\",          0, 0, 0x0100, 1, \"m88\")\n-AVR_MCU (\"atmega88a\",            ARCH_AVR4, \"__AVR_ATmega88A__\",         0, 0, 0x0100, 1, \"m88a\")\n-AVR_MCU (\"atmega88p\",            ARCH_AVR4, \"__AVR_ATmega88P__\",         0, 0, 0x0100, 1, \"m88p\")\n-AVR_MCU (\"atmega88pa\",           ARCH_AVR4, \"__AVR_ATmega88PA__\",        0, 0, 0x0100, 1, \"m88pa\")\n-AVR_MCU (\"atmega8515\",           ARCH_AVR4, \"__AVR_ATmega8515__\",        0, 0, 0x0060, 1, \"m8515\")\n-AVR_MCU (\"atmega8535\",           ARCH_AVR4, \"__AVR_ATmega8535__\",        0, 0, 0x0060, 1, \"m8535\")\n-AVR_MCU (\"atmega8hva\",           ARCH_AVR4, \"__AVR_ATmega8HVA__\",        0, 0, 0x0100, 1, \"m8hva\")\n-AVR_MCU (\"at90pwm1\",             ARCH_AVR4, \"__AVR_AT90PWM1__\",          0, 0, 0x0100, 1, \"90pwm1\")\n-AVR_MCU (\"at90pwm2\",             ARCH_AVR4, \"__AVR_AT90PWM2__\",          0, 0, 0x0100, 1, \"90pwm2\")\n-AVR_MCU (\"at90pwm2b\",            ARCH_AVR4, \"__AVR_AT90PWM2B__\",         0, 0, 0x0100, 1, \"90pwm2b\")\n-AVR_MCU (\"at90pwm3\",             ARCH_AVR4, \"__AVR_AT90PWM3__\",          0, 0, 0x0100, 1, \"90pwm3\")\n-AVR_MCU (\"at90pwm3b\",            ARCH_AVR4, \"__AVR_AT90PWM3B__\",         0, 0, 0x0100, 1, \"90pwm3b\")\n-AVR_MCU (\"at90pwm81\",            ARCH_AVR4, \"__AVR_AT90PWM81__\",         0, 0, 0x0100, 1, \"90pwm81\")\n+AVR_MCU (\"avr4\",                 ARCH_AVR4, AVR_ISA_NONE,  NULL,                       0x0060, 1, \"m8\")\n+AVR_MCU (\"ata6285\",              ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATA6285__\",          0x0100, 1, \"a6285\")\n+AVR_MCU (\"ata6286\",              ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATA6286__\",          0x0100, 1, \"a6286\")\n+AVR_MCU (\"atmega8\",              ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega8__\",          0x0060, 1, \"m8\")\n+AVR_MCU (\"atmega8a\",             ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega8A__\",         0x0060, 1, \"m8a\")\n+AVR_MCU (\"atmega48\",             ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega48__\",         0x0100, 1, \"m48\")\n+AVR_MCU (\"atmega48a\",            ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega48A__\",        0x0100, 1, \"m48a\")\n+AVR_MCU (\"atmega48p\",            ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega48P__\",        0x0100, 1, \"m48p\")\n+AVR_MCU (\"atmega48pa\",           ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega48PA__\",       0x0100, 1, \"m48pa\")\n+AVR_MCU (\"atmega88\",             ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega88__\",         0x0100, 1, \"m88\")\n+AVR_MCU (\"atmega88a\",            ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega88A__\",        0x0100, 1, \"m88a\")\n+AVR_MCU (\"atmega88p\",            ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega88P__\",        0x0100, 1, \"m88p\")\n+AVR_MCU (\"atmega88pa\",           ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega88PA__\",       0x0100, 1, \"m88pa\")\n+AVR_MCU (\"atmega8515\",           ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega8515__\",       0x0060, 1, \"m8515\")\n+AVR_MCU (\"atmega8535\",           ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega8535__\",       0x0060, 1, \"m8535\")\n+AVR_MCU (\"atmega8hva\",           ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega8HVA__\",       0x0100, 1, \"m8hva\")\n+AVR_MCU (\"at90pwm1\",             ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM1__\",         0x0100, 1, \"90pwm1\")\n+AVR_MCU (\"at90pwm2\",             ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM2__\",         0x0100, 1, \"90pwm2\")\n+AVR_MCU (\"at90pwm2b\",            ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM2B__\",        0x0100, 1, \"90pwm2b\")\n+AVR_MCU (\"at90pwm3\",             ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM3__\",         0x0100, 1, \"90pwm3\")\n+AVR_MCU (\"at90pwm3b\",            ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM3B__\",        0x0100, 1, \"90pwm3b\")\n+AVR_MCU (\"at90pwm81\",            ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM81__\",        0x0100, 1, \"90pwm81\")\n /* Enhanced, > 8K, <= 64K.  */\n-AVR_MCU (\"avr5\",                 ARCH_AVR5, NULL,                        0, 0, 0x0060, 1, \"m16\")\n-AVR_MCU (\"ata5790\",              ARCH_AVR5, \"__AVR_ATA5790__\",           0, 0, 0x0100, 1, \"a5790\")\n-AVR_MCU (\"ata5790n\",             ARCH_AVR5, \"__AVR_ATA5790N__\",          0, 0, 0x0100, 1, \"a5790n\")\n-AVR_MCU (\"ata5795\",              ARCH_AVR5, \"__AVR_ATA5795__\",           0, 0, 0x0100, 1, \"a5795\")\n-AVR_MCU (\"atmega16\",             ARCH_AVR5, \"__AVR_ATmega16__\",          0, 0, 0x0060, 1, \"m16\")\n-AVR_MCU (\"atmega16a\",            ARCH_AVR5, \"__AVR_ATmega16A__\",         0, 0, 0x0060, 1, \"m16a\")\n-AVR_MCU (\"atmega161\",            ARCH_AVR5, \"__AVR_ATmega161__\",         0, 0, 0x0060, 1, \"m161\")\n-AVR_MCU (\"atmega162\",            ARCH_AVR5, \"__AVR_ATmega162__\",         0, 0, 0x0100, 1, \"m162\")\n-AVR_MCU (\"atmega163\",            ARCH_AVR5, \"__AVR_ATmega163__\",         0, 0, 0x0060, 1, \"m163\")\n-AVR_MCU (\"atmega164a\",           ARCH_AVR5, \"__AVR_ATmega164A__\",        0, 0, 0x0100, 1, \"m164a\")\n-AVR_MCU (\"atmega164p\",           ARCH_AVR5, \"__AVR_ATmega164P__\",        0, 0, 0x0100, 1, \"m164p\")\n-AVR_MCU (\"atmega164pa\",          ARCH_AVR5, \"__AVR_ATmega164PA__\",       0, 0, 0x0100, 1, \"m164pa\")\n-AVR_MCU (\"atmega165\",            ARCH_AVR5, \"__AVR_ATmega165__\",         0, 0, 0x0100, 1, \"m165\")\n-AVR_MCU (\"atmega165a\",           ARCH_AVR5, \"__AVR_ATmega165A__\",        0, 0, 0x0100, 1, \"m165a\")\n-AVR_MCU (\"atmega165p\",           ARCH_AVR5, \"__AVR_ATmega165P__\",        0, 0, 0x0100, 1, \"m165p\")\n-AVR_MCU (\"atmega165pa\",          ARCH_AVR5, \"__AVR_ATmega165PA__\",       0, 0, 0x0100, 1, \"m165pa\")\n-AVR_MCU (\"atmega168\",            ARCH_AVR5, \"__AVR_ATmega168__\",         0, 0, 0x0100, 1, \"m168\")\n-AVR_MCU (\"atmega168a\",           ARCH_AVR5, \"__AVR_ATmega168A__\",        0, 0, 0x0100, 1, \"m168a\")\n-AVR_MCU (\"atmega168p\",           ARCH_AVR5, \"__AVR_ATmega168P__\",        0, 0, 0x0100, 1, \"m168p\")\n-AVR_MCU (\"atmega168pa\",          ARCH_AVR5, \"__AVR_ATmega168PA__\",       0, 0, 0x0100, 1, \"m168pa\")\n-AVR_MCU (\"atmega169\",            ARCH_AVR5, \"__AVR_ATmega169__\",         0, 0, 0x0100, 1, \"m169\")\n-AVR_MCU (\"atmega169a\",           ARCH_AVR5, \"__AVR_ATmega169A__\",        0, 0, 0x0100, 1, \"m169a\")\n-AVR_MCU (\"atmega169p\",           ARCH_AVR5, \"__AVR_ATmega169P__\",        0, 0, 0x0100, 1, \"m169p\")\n-AVR_MCU (\"atmega169pa\",          ARCH_AVR5, \"__AVR_ATmega169PA__\",       0, 0, 0x0100, 1, \"m169pa\")\n-AVR_MCU (\"atmega16hvb\",          ARCH_AVR5, \"__AVR_ATmega16HVB__\",       0, 0, 0x0100, 1, \"m16hvb\")\n-AVR_MCU (\"atmega16hvbrevb\",      ARCH_AVR5, \"__AVR_ATmega16HVBREVB__\",   0, 0, 0x0100, 1, \"m16hvbrevb\")\n-AVR_MCU (\"atmega16m1\",           ARCH_AVR5, \"__AVR_ATmega16M1__\",        0, 0, 0x0100, 1, \"m16m1\")\n-AVR_MCU (\"atmega16u4\",           ARCH_AVR5, \"__AVR_ATmega16U4__\",        0, 0, 0x0100, 1, \"m16u4\")\n-AVR_MCU (\"atmega26hvg\",          ARCH_AVR5, \"__AVR_ATmega26HVG__\",       0, 0, 0x0100, 1, \"m26hvg\")\n-AVR_MCU (\"atmega32a\",            ARCH_AVR5, \"__AVR_ATmega32A__\",         0, 0, 0x0060, 1, \"m32a\")\n-AVR_MCU (\"atmega32\",             ARCH_AVR5, \"__AVR_ATmega32__\",          0, 0, 0x0060, 1, \"m32\")\n-AVR_MCU (\"atmega323\",            ARCH_AVR5, \"__AVR_ATmega323__\",         0, 0, 0x0060, 1, \"m323\")\n-AVR_MCU (\"atmega324a\",           ARCH_AVR5, \"__AVR_ATmega324A__\",        0, 0, 0x0100, 1, \"m324a\")\n-AVR_MCU (\"atmega324p\",           ARCH_AVR5, \"__AVR_ATmega324P__\",        0, 0, 0x0100, 1, \"m324p\")\n-AVR_MCU (\"atmega324pa\",          ARCH_AVR5, \"__AVR_ATmega324PA__\",       0, 0, 0x0100, 1, \"m324pa\")\n-AVR_MCU (\"atmega325\",            ARCH_AVR5, \"__AVR_ATmega325__\",         0, 0, 0x0100, 1, \"m325\")\n-AVR_MCU (\"atmega325a\",           ARCH_AVR5, \"__AVR_ATmega325A__\",        0, 0, 0x0100, 1, \"m325a\")\n-AVR_MCU (\"atmega325p\",           ARCH_AVR5, \"__AVR_ATmega325P__\",        0, 0, 0x0100, 1, \"m325p\")\n-AVR_MCU (\"atmega3250\",           ARCH_AVR5, \"__AVR_ATmega3250__\",        0, 0, 0x0100, 1, \"m3250\")\n-AVR_MCU (\"atmega3250a\",          ARCH_AVR5, \"__AVR_ATmega3250A__\",       0, 0, 0x0100, 1, \"m3250a\")\n-AVR_MCU (\"atmega3250p\",          ARCH_AVR5, \"__AVR_ATmega3250P__\",       0, 0, 0x0100, 1, \"m3250p\")\n-AVR_MCU (\"atmega3250pa\",         ARCH_AVR5, \"__AVR_ATmega3250PA__\",      0, 0, 0x0100, 1, \"m3250pa\")\n-AVR_MCU (\"atmega328\",            ARCH_AVR5, \"__AVR_ATmega328__\",         0, 0, 0x0100, 1, \"m328\")\n-AVR_MCU (\"atmega328p\",           ARCH_AVR5, \"__AVR_ATmega328P__\",        0, 0, 0x0100, 1, \"m328p\")\n-AVR_MCU (\"atmega329\",            ARCH_AVR5, \"__AVR_ATmega329__\",         0, 0, 0x0100, 1, \"m329\")\n-AVR_MCU (\"atmega329a\",           ARCH_AVR5, \"__AVR_ATmega329A__\",        0, 0, 0x0100, 1, \"m329a\")\n-AVR_MCU (\"atmega329p\",           ARCH_AVR5, \"__AVR_ATmega329P__\",        0, 0, 0x0100, 1, \"m329p\")\n-AVR_MCU (\"atmega329pa\",          ARCH_AVR5, \"__AVR_ATmega329PA__\",       0, 0, 0x0100, 1, \"m329pa\")\n-AVR_MCU (\"atmega3290\",           ARCH_AVR5, \"__AVR_ATmega3290__\",        0, 0, 0x0100, 1, \"m3290\")\n-AVR_MCU (\"atmega3290a\",          ARCH_AVR5, \"__AVR_ATmega3290A__\",       0, 0, 0x0100, 1, \"m3290a\")\n-AVR_MCU (\"atmega3290p\",          ARCH_AVR5, \"__AVR_ATmega3290P__\",       0, 0, 0x0100, 1, \"m3290p\")\n-AVR_MCU (\"atmega3290pa\",         ARCH_AVR5, \"__AVR_ATmega3290PA__\",      0, 0, 0x0100, 1, \"m3290pa\")\n-AVR_MCU (\"atmega32c1\",           ARCH_AVR5, \"__AVR_ATmega32C1__\",        0, 0, 0x0100, 1, \"m32c1\")\n-AVR_MCU (\"atmega32m1\",           ARCH_AVR5, \"__AVR_ATmega32M1__\",        0, 0, 0x0100, 1, \"m32m1\")\n-AVR_MCU (\"atmega32u4\",           ARCH_AVR5, \"__AVR_ATmega32U4__\",        0, 0, 0x0100, 1, \"m32u4\")\n-AVR_MCU (\"atmega32u6\",           ARCH_AVR5, \"__AVR_ATmega32U6__\",        0, 0, 0x0100, 1, \"m32u6\")\n-AVR_MCU (\"atmega406\",            ARCH_AVR5, \"__AVR_ATmega406__\",         0, 0, 0x0100, 1, \"m406\")\n-AVR_MCU (\"atmega64\",             ARCH_AVR5, \"__AVR_ATmega64__\",          0, 0, 0x0100, 1, \"m64\")\n-AVR_MCU (\"atmega64a\",            ARCH_AVR5, \"__AVR_ATmega64A__\",         0, 0, 0x0100, 1, \"m64a\")\n-AVR_MCU (\"atmega640\",            ARCH_AVR5, \"__AVR_ATmega640__\",         0, 0, 0x0200, 1, \"m640\")\n-AVR_MCU (\"atmega644\",            ARCH_AVR5, \"__AVR_ATmega644__\",         0, 0, 0x0100, 1, \"m644\")\n-AVR_MCU (\"atmega644a\",           ARCH_AVR5, \"__AVR_ATmega644A__\",        0, 0, 0x0100, 1, \"m644a\")\n-AVR_MCU (\"atmega644p\",           ARCH_AVR5, \"__AVR_ATmega644P__\",        0, 0, 0x0100, 1, \"m644p\")\n-AVR_MCU (\"atmega644pa\",          ARCH_AVR5, \"__AVR_ATmega644PA__\",       0, 0, 0x0100, 1, \"m644pa\")\n-AVR_MCU (\"atmega645\",            ARCH_AVR5, \"__AVR_ATmega645__\",         0, 0, 0x0100, 1, \"m645\")\n-AVR_MCU (\"atmega645a\",           ARCH_AVR5, \"__AVR_ATmega645A__\",        0, 0, 0x0100, 1, \"m645a\")\n-AVR_MCU (\"atmega645p\",           ARCH_AVR5, \"__AVR_ATmega645P__\",        0, 0, 0x0100, 1, \"m645p\")\n-AVR_MCU (\"atmega6450\",           ARCH_AVR5, \"__AVR_ATmega6450__\",        0, 0, 0x0100, 1, \"m6450\")\n-AVR_MCU (\"atmega6450a\",          ARCH_AVR5, \"__AVR_ATmega6450A__\",       0, 0, 0x0100, 1, \"m6450a\")\n-AVR_MCU (\"atmega6450p\",          ARCH_AVR5, \"__AVR_ATmega6450P__\",       0, 0, 0x0100, 1, \"m6450p\")\n-AVR_MCU (\"atmega649\",            ARCH_AVR5, \"__AVR_ATmega649__\",         0, 0, 0x0100, 1, \"m649\")\n-AVR_MCU (\"atmega649a\",           ARCH_AVR5, \"__AVR_ATmega649A__\",        0, 0, 0x0100, 1, \"m649a\")\n-AVR_MCU (\"atmega649p\",           ARCH_AVR5, \"__AVR_ATmega649P__\",        0, 0, 0x0100, 1, \"m649p\")\n-AVR_MCU (\"atmega6490\",           ARCH_AVR5, \"__AVR_ATmega6490__\",        0, 0, 0x0100, 1, \"m6490\")\n-AVR_MCU (\"atmega16hva\",          ARCH_AVR5, \"__AVR_ATmega16HVA__\",       0, 0, 0x0100, 1, \"m16hva\")\n-AVR_MCU (\"atmega16hva2\",         ARCH_AVR5, \"__AVR_ATmega16HVA2__\",      0, 0, 0x0100, 1, \"m16hva2\")\n-AVR_MCU (\"atmega32hvb\",          ARCH_AVR5, \"__AVR_ATmega32HVB__\",       0, 0, 0x0100, 1, \"m32hvb\")\n-AVR_MCU (\"atmega6490a\",          ARCH_AVR5, \"__AVR_ATmega6490A__\",       0, 0, 0x0100, 1, \"m6490a\")\n-AVR_MCU (\"atmega6490p\",          ARCH_AVR5, \"__AVR_ATmega6490P__\",       0, 0, 0x0100, 1, \"m6490p\")\n-AVR_MCU (\"atmega64c1\",           ARCH_AVR5, \"__AVR_ATmega64C1__\",        0, 0, 0x0100, 1, \"m64c1\")\n-AVR_MCU (\"atmega64m1\",           ARCH_AVR5, \"__AVR_ATmega64M1__\",        0, 0, 0x0100, 1, \"m64m1\")\n-AVR_MCU (\"atmega64hve\",          ARCH_AVR5, \"__AVR_ATmega64HVE__\",       0, 0, 0x0100, 1, \"m64hve\")\n-AVR_MCU (\"atmega64rfa2\",         ARCH_AVR5, \"__AVR_ATmega64RFA2__\",      0, 0, 0x0200, 1, \"m64rfa2\")\n-AVR_MCU (\"atmega64rfr2\",         ARCH_AVR5, \"__AVR_ATmega64RFR2__\",      0, 0, 0x0200, 1, \"m64rfr2\")\n-AVR_MCU (\"atmega32hvbrevb\",      ARCH_AVR5, \"__AVR_ATmega32HVBREVB__\",   0, 0, 0x0100, 1, \"m32hvbrevb\")\n-AVR_MCU (\"atmega48hvf\",          ARCH_AVR5, \"__AVR_ATmega48HVF__\",       0, 0, 0x0100, 1, \"m48hvf\")\n-AVR_MCU (\"at90can32\",            ARCH_AVR5, \"__AVR_AT90CAN32__\",         0, 0, 0x0100, 1, \"can32\")\n-AVR_MCU (\"at90can64\",            ARCH_AVR5, \"__AVR_AT90CAN64__\",         0, 0, 0x0100, 1, \"can64\")\n-AVR_MCU (\"at90pwm161\",           ARCH_AVR5, \"__AVR_AT90PWM161__\",        0, 0, 0x0100, 1, \"90pwm161\")\n-AVR_MCU (\"at90pwm216\",           ARCH_AVR5, \"__AVR_AT90PWM216__\",        0, 0, 0x0100, 1, \"90pwm216\")\n-AVR_MCU (\"at90pwm316\",           ARCH_AVR5, \"__AVR_AT90PWM316__\",        0, 0, 0x0100, 1, \"90pwm316\")\n-AVR_MCU (\"at90scr100\",           ARCH_AVR5, \"__AVR_AT90SCR100__\",        0, 0, 0x0100, 1, \"90scr100\")\n-AVR_MCU (\"at90usb646\",           ARCH_AVR5, \"__AVR_AT90USB646__\",        0, 0, 0x0100, 1, \"usb646\")\n-AVR_MCU (\"at90usb647\",           ARCH_AVR5, \"__AVR_AT90USB647__\",        0, 0, 0x0100, 1, \"usb647\")\n-AVR_MCU (\"at94k\",                ARCH_AVR5, \"__AVR_AT94K__\",             0, 0, 0x0060, 1, \"at94k\")\n-AVR_MCU (\"m3000\",                ARCH_AVR5, \"__AVR_M3000__\",             0, 0, 0x1000, 1, \"m3000\")\n+AVR_MCU (\"avr5\",                 ARCH_AVR5, AVR_ISA_NONE, NULL,                        0x0060, 1, \"m16\")\n+AVR_MCU (\"ata5790\",              ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA5790__\",           0x0100, 1, \"a5790\")\n+AVR_MCU (\"ata5790n\",             ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA5790N__\",          0x0100, 1, \"a5790n\")\n+AVR_MCU (\"ata5795\",              ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA5795__\",           0x0100, 1, \"a5795\")\n+AVR_MCU (\"atmega16\",             ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16__\",          0x0060, 1, \"m16\")\n+AVR_MCU (\"atmega16a\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16A__\",         0x0060, 1, \"m16a\")\n+AVR_MCU (\"atmega161\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega161__\",         0x0060, 1, \"m161\")\n+AVR_MCU (\"atmega162\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega162__\",         0x0100, 1, \"m162\")\n+AVR_MCU (\"atmega163\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega163__\",         0x0060, 1, \"m163\")\n+AVR_MCU (\"atmega164a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega164A__\",        0x0100, 1, \"m164a\")\n+AVR_MCU (\"atmega164p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega164P__\",        0x0100, 1, \"m164p\")\n+AVR_MCU (\"atmega164pa\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega164PA__\",       0x0100, 1, \"m164pa\")\n+AVR_MCU (\"atmega165\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega165__\",         0x0100, 1, \"m165\")\n+AVR_MCU (\"atmega165a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega165A__\",        0x0100, 1, \"m165a\")\n+AVR_MCU (\"atmega165p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega165P__\",        0x0100, 1, \"m165p\")\n+AVR_MCU (\"atmega165pa\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega165PA__\",       0x0100, 1, \"m165pa\")\n+AVR_MCU (\"atmega168\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega168__\",         0x0100, 1, \"m168\")\n+AVR_MCU (\"atmega168a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega168A__\",        0x0100, 1, \"m168a\")\n+AVR_MCU (\"atmega168p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega168P__\",        0x0100, 1, \"m168p\")\n+AVR_MCU (\"atmega168pa\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega168PA__\",       0x0100, 1, \"m168pa\")\n+AVR_MCU (\"atmega169\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega169__\",         0x0100, 1, \"m169\")\n+AVR_MCU (\"atmega169a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega169A__\",        0x0100, 1, \"m169a\")\n+AVR_MCU (\"atmega169p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega169P__\",        0x0100, 1, \"m169p\")\n+AVR_MCU (\"atmega169pa\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega169PA__\",       0x0100, 1, \"m169pa\")\n+AVR_MCU (\"atmega16hvb\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16HVB__\",       0x0100, 1, \"m16hvb\")\n+AVR_MCU (\"atmega16hvbrevb\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16HVBREVB__\",   0x0100, 1, \"m16hvbrevb\")\n+AVR_MCU (\"atmega16m1\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16M1__\",        0x0100, 1, \"m16m1\")\n+AVR_MCU (\"atmega16u4\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16U4__\",        0x0100, 1, \"m16u4\")\n+AVR_MCU (\"atmega26hvg\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega26HVG__\",       0x0100, 1, \"m26hvg\")\n+AVR_MCU (\"atmega32a\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32A__\",         0x0060, 1, \"m32a\")\n+AVR_MCU (\"atmega32\",             ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32__\",          0x0060, 1, \"m32\")\n+AVR_MCU (\"atmega323\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega323__\",         0x0060, 1, \"m323\")\n+AVR_MCU (\"atmega324a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega324A__\",        0x0100, 1, \"m324a\")\n+AVR_MCU (\"atmega324p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega324P__\",        0x0100, 1, \"m324p\")\n+AVR_MCU (\"atmega324pa\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega324PA__\",       0x0100, 1, \"m324pa\")\n+AVR_MCU (\"atmega325\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega325__\",         0x0100, 1, \"m325\")\n+AVR_MCU (\"atmega325a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega325A__\",        0x0100, 1, \"m325a\")\n+AVR_MCU (\"atmega325p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega325P__\",        0x0100, 1, \"m325p\")\n+AVR_MCU (\"atmega3250\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3250__\",        0x0100, 1, \"m3250\")\n+AVR_MCU (\"atmega3250a\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3250A__\",       0x0100, 1, \"m3250a\")\n+AVR_MCU (\"atmega3250p\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3250P__\",       0x0100, 1, \"m3250p\")\n+AVR_MCU (\"atmega3250pa\",         ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3250PA__\",      0x0100, 1, \"m3250pa\")\n+AVR_MCU (\"atmega328\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega328__\",         0x0100, 1, \"m328\")\n+AVR_MCU (\"atmega328p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega328P__\",        0x0100, 1, \"m328p\")\n+AVR_MCU (\"atmega329\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega329__\",         0x0100, 1, \"m329\")\n+AVR_MCU (\"atmega329a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega329A__\",        0x0100, 1, \"m329a\")\n+AVR_MCU (\"atmega329p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega329P__\",        0x0100, 1, \"m329p\")\n+AVR_MCU (\"atmega329pa\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega329PA__\",       0x0100, 1, \"m329pa\")\n+AVR_MCU (\"atmega3290\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3290__\",        0x0100, 1, \"m3290\")\n+AVR_MCU (\"atmega3290a\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3290A__\",       0x0100, 1, \"m3290a\")\n+AVR_MCU (\"atmega3290p\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3290P__\",       0x0100, 1, \"m3290p\")\n+AVR_MCU (\"atmega3290pa\",         ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3290PA__\",      0x0100, 1, \"m3290pa\")\n+AVR_MCU (\"atmega32c1\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32C1__\",        0x0100, 1, \"m32c1\")\n+AVR_MCU (\"atmega32m1\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32M1__\",        0x0100, 1, \"m32m1\")\n+AVR_MCU (\"atmega32u4\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32U4__\",        0x0100, 1, \"m32u4\")\n+AVR_MCU (\"atmega32u6\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32U6__\",        0x0100, 1, \"m32u6\")\n+AVR_MCU (\"atmega406\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega406__\",         0x0100, 1, \"m406\")\n+AVR_MCU (\"atmega64\",             ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64__\",          0x0100, 1, \"m64\")\n+AVR_MCU (\"atmega64a\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64A__\",         0x0100, 1, \"m64a\")\n+AVR_MCU (\"atmega640\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega640__\",         0x0200, 1, \"m640\")\n+AVR_MCU (\"atmega644\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega644__\",         0x0100, 1, \"m644\")\n+AVR_MCU (\"atmega644a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega644A__\",        0x0100, 1, \"m644a\")\n+AVR_MCU (\"atmega644p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega644P__\",        0x0100, 1, \"m644p\")\n+AVR_MCU (\"atmega644pa\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega644PA__\",       0x0100, 1, \"m644pa\")\n+AVR_MCU (\"atmega645\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega645__\",         0x0100, 1, \"m645\")\n+AVR_MCU (\"atmega645a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega645A__\",        0x0100, 1, \"m645a\")\n+AVR_MCU (\"atmega645p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega645P__\",        0x0100, 1, \"m645p\")\n+AVR_MCU (\"atmega6450\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6450__\",        0x0100, 1, \"m6450\")\n+AVR_MCU (\"atmega6450a\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6450A__\",       0x0100, 1, \"m6450a\")\n+AVR_MCU (\"atmega6450p\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6450P__\",       0x0100, 1, \"m6450p\")\n+AVR_MCU (\"atmega649\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega649__\",         0x0100, 1, \"m649\")\n+AVR_MCU (\"atmega649a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega649A__\",        0x0100, 1, \"m649a\")\n+AVR_MCU (\"atmega649p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega649P__\",        0x0100, 1, \"m649p\")\n+AVR_MCU (\"atmega6490\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6490__\",        0x0100, 1, \"m6490\")\n+AVR_MCU (\"atmega16hva\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16HVA__\",       0x0100, 1, \"m16hva\")\n+AVR_MCU (\"atmega16hva2\",         ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16HVA2__\",      0x0100, 1, \"m16hva2\")\n+AVR_MCU (\"atmega32hvb\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32HVB__\",       0x0100, 1, \"m32hvb\")\n+AVR_MCU (\"atmega6490a\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6490A__\",       0x0100, 1, \"m6490a\")\n+AVR_MCU (\"atmega6490p\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6490P__\",       0x0100, 1, \"m6490p\")\n+AVR_MCU (\"atmega64c1\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64C1__\",        0x0100, 1, \"m64c1\")\n+AVR_MCU (\"atmega64m1\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64M1__\",        0x0100, 1, \"m64m1\")\n+AVR_MCU (\"atmega64hve\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64HVE__\",       0x0100, 1, \"m64hve\")\n+AVR_MCU (\"atmega64rfa2\",         ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64RFA2__\",      0x0200, 1, \"m64rfa2\")\n+AVR_MCU (\"atmega64rfr2\",         ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64RFR2__\",      0x0200, 1, \"m64rfr2\")\n+AVR_MCU (\"atmega32hvbrevb\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32HVBREVB__\",   0x0100, 1, \"m32hvbrevb\")\n+AVR_MCU (\"atmega48hvf\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega48HVF__\",       0x0100, 1, \"m48hvf\")\n+AVR_MCU (\"at90can32\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90CAN32__\",         0x0100, 1, \"can32\")\n+AVR_MCU (\"at90can64\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90CAN64__\",         0x0100, 1, \"can64\")\n+AVR_MCU (\"at90pwm161\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90PWM161__\",        0x0100, 1, \"90pwm161\")\n+AVR_MCU (\"at90pwm216\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90PWM216__\",        0x0100, 1, \"90pwm216\")\n+AVR_MCU (\"at90pwm316\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90PWM316__\",        0x0100, 1, \"90pwm316\")\n+AVR_MCU (\"at90scr100\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90SCR100__\",        0x0100, 1, \"90scr100\")\n+AVR_MCU (\"at90usb646\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90USB646__\",        0x0100, 1, \"usb646\")\n+AVR_MCU (\"at90usb647\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90USB647__\",        0x0100, 1, \"usb647\")\n+AVR_MCU (\"at94k\",                ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT94K__\",             0x0060, 1, \"at94k\")\n+AVR_MCU (\"m3000\",                ARCH_AVR5, AVR_ISA_NONE, \"__AVR_M3000__\",             0x1000, 1, \"m3000\")\n /* Enhanced, == 128K.  */\n-AVR_MCU (\"avr51\",                ARCH_AVR51, NULL,                       0, 0, 0x0100, 2, \"m128\")\n-AVR_MCU (\"atmega128\",            ARCH_AVR51, \"__AVR_ATmega128__\",        0, 0, 0x0100, 2, \"m128\")\n-AVR_MCU (\"atmega128a\",           ARCH_AVR51, \"__AVR_ATmega128A__\",       0, 0, 0x0100, 2, \"m128a\")\n-AVR_MCU (\"atmega1280\",           ARCH_AVR51, \"__AVR_ATmega1280__\",       0, 0, 0x0200, 2, \"m1280\")\n-AVR_MCU (\"atmega1281\",           ARCH_AVR51, \"__AVR_ATmega1281__\",       0, 0, 0x0200, 2, \"m1281\")\n-AVR_MCU (\"atmega1284\",           ARCH_AVR51, \"__AVR_ATmega1284__\",       0, 0, 0x0100, 2, \"m1284\")\n-AVR_MCU (\"atmega1284p\",          ARCH_AVR51, \"__AVR_ATmega1284P__\",      0, 0, 0x0100, 2, \"m1284p\")\n-AVR_MCU (\"atmega128rfa1\",        ARCH_AVR51, \"__AVR_ATmega128RFA1__\",    0, 0, 0x0200, 2, \"m128rfa1\")\n-AVR_MCU (\"at90can128\",           ARCH_AVR51, \"__AVR_AT90CAN128__\",       0, 0, 0x0100, 2, \"can128\")\n-AVR_MCU (\"at90usb1286\",          ARCH_AVR51, \"__AVR_AT90USB1286__\",      0, 0, 0x0100, 2, \"usb1286\")\n-AVR_MCU (\"at90usb1287\",          ARCH_AVR51, \"__AVR_AT90USB1287__\",      0, 0, 0x0100, 2, \"usb1287\")\n+AVR_MCU (\"avr51\",                ARCH_AVR51, AVR_ISA_NONE, NULL,                       0x0100, 2, \"m128\")\n+AVR_MCU (\"atmega128\",            ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega128__\",        0x0100, 2, \"m128\")\n+AVR_MCU (\"atmega128a\",           ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega128A__\",       0x0100, 2, \"m128a\")\n+AVR_MCU (\"atmega1280\",           ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega1280__\",       0x0200, 2, \"m1280\")\n+AVR_MCU (\"atmega1281\",           ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega1281__\",       0x0200, 2, \"m1281\")\n+AVR_MCU (\"atmega1284\",           ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega1284__\",       0x0100, 2, \"m1284\")\n+AVR_MCU (\"atmega1284p\",          ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega1284P__\",      0x0100, 2, \"m1284p\")\n+AVR_MCU (\"atmega128rfa1\",        ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega128RFA1__\",    0x0200, 2, \"m128rfa1\")\n+AVR_MCU (\"at90can128\",           ARCH_AVR51, AVR_ISA_NONE, \"__AVR_AT90CAN128__\",       0x0100, 2, \"can128\")\n+AVR_MCU (\"at90usb1286\",          ARCH_AVR51, AVR_ISA_NONE, \"__AVR_AT90USB1286__\",      0x0100, 2, \"usb1286\")\n+AVR_MCU (\"at90usb1287\",          ARCH_AVR51, AVR_ISA_NONE, \"__AVR_AT90USB1287__\",      0x0100, 2, \"usb1287\")\n /* 3-Byte PC.  */\n-AVR_MCU (\"avr6\",                 ARCH_AVR6, NULL,                        0, 0, 0x0200, 4, \"m2561\")\n-AVR_MCU (\"atmega2560\",           ARCH_AVR6, \"__AVR_ATmega2560__\",        0, 0, 0x0200, 4, \"m2560\")\n-AVR_MCU (\"atmega2561\",           ARCH_AVR6, \"__AVR_ATmega2561__\",        0, 0, 0x0200, 4, \"m2561\")\n+AVR_MCU (\"avr6\",                 ARCH_AVR6, AVR_ISA_NONE, NULL,                        0x0200, 4, \"m2561\")\n+AVR_MCU (\"atmega2560\",           ARCH_AVR6, AVR_ISA_NONE, \"__AVR_ATmega2560__\",        0x0200, 4, \"m2560\")\n+AVR_MCU (\"atmega2561\",           ARCH_AVR6, AVR_ISA_NONE, \"__AVR_ATmega2561__\",        0x0200, 4, \"m2561\")\n /* Xmega, 16K <= Flash < 64K, RAM <= 64K */\n-AVR_MCU (\"avrxmega2\",        ARCH_AVRXMEGA2, NULL,                       0, 0, 0x2000, 1, \"x32a4\")\n-AVR_MCU (\"atxmega16a4\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega16A4__\",      0, 0, 0x2000, 1, \"x16a4\")\n-AVR_MCU (\"atxmega16d4\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega16D4__\",      0, 0, 0x2000, 1, \"x16d4\")\n-AVR_MCU (\"atxmega32a4\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega32A4__\",      0, 0, 0x2000, 1, \"x32a4\")\n-AVR_MCU (\"atxmega32d4\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega32D4__\",      0, 0, 0x2000, 1, \"x32d4\")\n-AVR_MCU (\"atxmega32x1\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega32X1__\",      0, 0, 0x2000, 1, \"x32x1\")\n-AVR_MCU (\"atmxt112sl\",       ARCH_AVRXMEGA2, \"__AVR_ATMXT112SL__\",       0, 0, 0x2000, 1, \"mxt112sl\")\n-AVR_MCU (\"atmxt224\",         ARCH_AVRXMEGA2, \"__AVR_ATMXT224__\",         0, 0, 0x2000, 1, \"mxt224\")\n-AVR_MCU (\"atmxt224e\",        ARCH_AVRXMEGA2, \"__AVR_ATMXT224E__\",        0, 0, 0x2000, 1, \"mxt224e\")\n-AVR_MCU (\"atmxt336s\",        ARCH_AVRXMEGA2, \"__AVR_ATMXT336S__\",        0, 0, 0x2000, 1, \"mxt336s\")\n-AVR_MCU (\"atxmega16a4u\",     ARCH_AVRXMEGA2, \"__AVR_ATxmega16A4U__\",     0, 0, 0x2000, 1, \"x16a4u\")\n-AVR_MCU (\"atxmega16c4\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega16C4__\",      0, 0, 0x2000, 1, \"x16c4\")\n-AVR_MCU (\"atxmega32a4u\",     ARCH_AVRXMEGA2, \"__AVR_ATxmega32A4U__\",     0, 0, 0x2000, 1, \"x32a4u\")\n-AVR_MCU (\"atxmega32c4\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega32C4__\",      0, 0, 0x2000, 1, \"x32c4\")\n-AVR_MCU (\"atxmega32e5\",      ARCH_AVRXMEGA2, \"__AVR_ATxmega32E5__\",      0, 0, 0x2000, 1, \"x32e5\")\n+AVR_MCU (\"avrxmega2\",        ARCH_AVRXMEGA2, AVR_ISA_NONE, NULL,                       0x2000, 1, \"x32a4\")\n+AVR_MCU (\"atxmega16a4\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega16A4__\",      0x2000, 1, \"x16a4\")\n+AVR_MCU (\"atxmega16d4\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega16D4__\",      0x2000, 1, \"x16d4\")\n+AVR_MCU (\"atxmega32a4\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega32A4__\",      0x2000, 1, \"x32a4\")\n+AVR_MCU (\"atxmega32d4\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega32D4__\",      0x2000, 1, \"x32d4\")\n+AVR_MCU (\"atxmega32x1\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega32X1__\",      0x2000, 1, \"x32x1\")\n+AVR_MCU (\"atmxt112sl\",       ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATMXT112SL__\",       0x2000, 1, \"mxt112sl\")\n+AVR_MCU (\"atmxt224\",         ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATMXT224__\",         0x2000, 1, \"mxt224\")\n+AVR_MCU (\"atmxt224e\",        ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATMXT224E__\",        0x2000, 1, \"mxt224e\")\n+AVR_MCU (\"atmxt336s\",        ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATMXT336S__\",        0x2000, 1, \"mxt336s\")\n+AVR_MCU (\"atxmega16a4u\",     ARCH_AVRXMEGA2, AVR_ISA_RMW,  \"__AVR_ATxmega16A4U__\",     0x2000, 1, \"x16a4u\")\n+AVR_MCU (\"atxmega16c4\",      ARCH_AVRXMEGA2, AVR_ISA_RMW,  \"__AVR_ATxmega16C4__\",      0x2000, 1, \"x16c4\")\n+AVR_MCU (\"atxmega32a4u\",     ARCH_AVRXMEGA2, AVR_ISA_RMW,  \"__AVR_ATxmega32A4U__\",     0x2000, 1, \"x32a4u\")\n+AVR_MCU (\"atxmega32c4\",      ARCH_AVRXMEGA2, AVR_ISA_RMW,  \"__AVR_ATxmega32C4__\",      0x2000, 1, \"x32c4\")\n+AVR_MCU (\"atxmega32e5\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega32E5__\",      0x2000, 1, \"x32e5\")\n /* Xmega, 64K < Flash <= 128K, RAM <= 64K */\n-AVR_MCU (\"avrxmega4\",        ARCH_AVRXMEGA4, NULL,                       0, 0, 0x2000, 2, \"x64a4\")\n-AVR_MCU (\"atxmega64a3\",      ARCH_AVRXMEGA4, \"__AVR_ATxmega64A3__\",      0, 0, 0x2000, 2, \"x64a3\")\n-AVR_MCU (\"atxmega64d3\",      ARCH_AVRXMEGA4, \"__AVR_ATxmega64D3__\",      0, 0, 0x2000, 2, \"x64d3\")\n-AVR_MCU (\"atxmega64a3u\",     ARCH_AVRXMEGA4, \"__AVR_ATxmega64A3U__\",     0, 0, 0x2000, 2, \"x64a3u\")\n-AVR_MCU (\"atxmega64a4u\",     ARCH_AVRXMEGA4, \"__AVR_ATxmega64A4U__\",     0, 0, 0x2000, 2, \"x64a4u\")\n-AVR_MCU (\"atxmega64b1\",      ARCH_AVRXMEGA4, \"__AVR_ATxmega64B1__\",      0, 0, 0x2000, 2, \"x64b1\")\n-AVR_MCU (\"atxmega64b3\",      ARCH_AVRXMEGA4, \"__AVR_ATxmega64B3__\",      0, 0, 0x2000, 2, \"x64b3\")\n-AVR_MCU (\"atxmega64c3\",      ARCH_AVRXMEGA4, \"__AVR_ATxmega64C3__\",      0, 0, 0x2000, 2, \"x64c3\")\n-AVR_MCU (\"atxmega64d4\",      ARCH_AVRXMEGA4, \"__AVR_ATxmega64D4__\",      0, 0, 0x2000, 2, \"x64d4\")\n+AVR_MCU (\"avrxmega4\",        ARCH_AVRXMEGA4, AVR_ISA_NONE, NULL,                       0x2000, 2, \"x64a4\")\n+AVR_MCU (\"atxmega64a3\",      ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_ATxmega64A3__\",      0x2000, 2, \"x64a3\")\n+AVR_MCU (\"atxmega64d3\",      ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_ATxmega64D3__\",      0x2000, 2, \"x64d3\")\n+AVR_MCU (\"atxmega64a3u\",     ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64A3U__\",     0x2000, 2, \"x64a3u\")\n+AVR_MCU (\"atxmega64a4u\",     ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64A4U__\",     0x2000, 2, \"x64a4u\")\n+AVR_MCU (\"atxmega64b1\",      ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64B1__\",      0x2000, 2, \"x64b1\")\n+AVR_MCU (\"atxmega64b3\",      ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64B3__\",      0x2000, 2, \"x64b3\")\n+AVR_MCU (\"atxmega64c3\",      ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64C3__\",      0x2000, 2, \"x64c3\")\n+AVR_MCU (\"atxmega64d4\",      ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_ATxmega64D4__\",      0x2000, 2, \"x64d4\")\n /* Xmega, 64K < Flash <= 128K, RAM > 64K */\n-AVR_MCU (\"avrxmega5\",        ARCH_AVRXMEGA5, NULL,                       0, 0, 0x2000, 2, \"x64a1\")\n-AVR_MCU (\"atxmega64a1\",      ARCH_AVRXMEGA5, \"__AVR_ATxmega64A1__\",      0, 0, 0x2000, 2, \"x64a1\")\n-AVR_MCU (\"atxmega64a1u\",     ARCH_AVRXMEGA5, \"__AVR_ATxmega64A1U__\",     0, 0, 0x2000, 2, \"x64a1u\")\n+AVR_MCU (\"avrxmega5\",        ARCH_AVRXMEGA5, AVR_ISA_NONE, NULL,                       0x2000, 2, \"x64a1\")\n+AVR_MCU (\"atxmega64a1\",      ARCH_AVRXMEGA5, AVR_ISA_NONE, \"__AVR_ATxmega64A1__\",      0x2000, 2, \"x64a1\")\n+AVR_MCU (\"atxmega64a1u\",     ARCH_AVRXMEGA5, AVR_ISA_RMW,  \"__AVR_ATxmega64A1U__\",     0x2000, 2, \"x64a1u\")\n /* Xmega, 128K < Flash, RAM <= 64K */\n-AVR_MCU (\"avrxmega6\",        ARCH_AVRXMEGA6, NULL,                       0, 0, 0x2000, 6, \"x128a3\")\n-AVR_MCU (\"atxmega128a3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega128A3__\",     0, 0, 0x2000, 3, \"x128a3\")\n-AVR_MCU (\"atxmega128d3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega128D3__\",     0, 0, 0x2000, 3, \"x128d3\")\n-AVR_MCU (\"atxmega192a3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega192A3__\",     0, 0, 0x2000, 4, \"x192a3\")\n-AVR_MCU (\"atxmega192d3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega192D3__\",     0, 0, 0x2000, 4, \"x192d3\")\n-AVR_MCU (\"atxmega256a3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega256A3__\",     0, 0, 0x2000, 5, \"x256a3\")\n-AVR_MCU (\"atxmega256a3b\",    ARCH_AVRXMEGA6, \"__AVR_ATxmega256A3B__\",    0, 0, 0x2000, 5, \"x256a3b\")\n-AVR_MCU (\"atxmega256a3bu\",   ARCH_AVRXMEGA6, \"__AVR_ATxmega256A3BU__\",   0, 0, 0x2000, 5, \"x256a3bu\")\n-AVR_MCU (\"atxmega256d3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega256D3__\",     0, 0, 0x2000, 5, \"x256d3\")\n-AVR_MCU (\"atxmega128a3u\",    ARCH_AVRXMEGA6, \"__AVR_ATxmega128A3U__\",    0, 0, 0x2000, 3, \"x128a3u\")\n-AVR_MCU (\"atxmega128b1\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega128B1__\",     0, 0, 0x2000, 3, \"x128b1\")\n-AVR_MCU (\"atxmega128b3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega128B3__\",     0, 0, 0x2000, 3, \"x128b3\")\n-AVR_MCU (\"atxmega128c3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega128C3__\",     0, 0, 0x2000, 3, \"x128c3\")\n-AVR_MCU (\"atxmega128d4\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega128D4__\",     0, 0, 0x2000, 3, \"x128d4\")\n-AVR_MCU (\"atmxt540s\",        ARCH_AVRXMEGA6, \"__AVR_ATMXT540S__\",        0, 0, 0x2000, 2, \"mxt540s\")\n-AVR_MCU (\"atmxt540sreva\",    ARCH_AVRXMEGA6, \"__AVR_ATMXT540SREVA__\",    0, 0, 0x2000, 2, \"mxt540sreva\")\n-AVR_MCU (\"atxmega192a3u\",    ARCH_AVRXMEGA6, \"__AVR_ATxmega192A3U__\",    0, 0, 0x2000, 4, \"x192a3u\")\n-AVR_MCU (\"atxmega192c3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega192C3__\",     0, 0, 0x2000, 4, \"x192c3\")\n-AVR_MCU (\"atxmega256a3u\",    ARCH_AVRXMEGA6, \"__AVR_ATxmega256A3U__\",    0, 0, 0x2000, 5, \"x256a3u\")\n-AVR_MCU (\"atxmega256c3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega256C3__\",     0, 0, 0x2000, 5, \"x256c3\")\n-AVR_MCU (\"atxmega384c3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega384C3__\",     0, 0, 0x2000, 6, \"x384c3\")\n-AVR_MCU (\"atxmega384d3\",     ARCH_AVRXMEGA6, \"__AVR_ATxmega384D3__\",     0, 0, 0x2000, 6, \"x384d3\")\n+AVR_MCU (\"avrxmega6\",        ARCH_AVRXMEGA6, AVR_ISA_NONE, NULL,                       0x2000, 6, \"x128a3\")\n+AVR_MCU (\"atxmega128a3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega128A3__\",     0x2000, 3, \"x128a3\")\n+AVR_MCU (\"atxmega128d3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega128D3__\",     0x2000, 3, \"x128d3\")\n+AVR_MCU (\"atxmega192a3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega192A3__\",     0x2000, 4, \"x192a3\")\n+AVR_MCU (\"atxmega192d3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega192D3__\",     0x2000, 4, \"x192d3\")\n+AVR_MCU (\"atxmega256a3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega256A3__\",     0x2000, 5, \"x256a3\")\n+AVR_MCU (\"atxmega256a3b\",    ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega256A3B__\",    0x2000, 5, \"x256a3b\")\n+AVR_MCU (\"atxmega256a3bu\",   ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega258A3BU__\",   0x2000, 5, \"x256a3bu\")\n+AVR_MCU (\"atxmega256d3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega256D3__\",     0x2000, 5, \"x256d3\")\n+AVR_MCU (\"atxmega128a3u\",    ARCH_AVRXMEGA6, AVR_ISA_RMW, \"__AVR_ATxmega128A3U__\",    0x2000, 3, \"x128a3u\")\n+AVR_MCU (\"atxmega128b1\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega128B1__\",     0x2000, 3, \"x128b1\")\n+AVR_MCU (\"atxmega128b3\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega128B3__\",     0x2000, 3, \"x128b3\")\n+AVR_MCU (\"atxmega128c3\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega128C3__\",     0x2000, 3, \"x128c3\")\n+AVR_MCU (\"atxmega128d4\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega128D4__\",     0x2000, 3, \"x128d4\")\n+AVR_MCU (\"atmxt540s\",        ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATMXT540S__\",        0x2000, 2, \"mxt540s\")\n+AVR_MCU (\"atmxt540sreva\",    ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATMXT540SREVA__\",    0x2000, 2, \"mxt540sreva\")\n+AVR_MCU (\"atxmega192a3u\",    ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega192A3U__\",    0x2000, 4, \"x192a3u\")\n+AVR_MCU (\"atxmega192c3\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega192C3__\",     0x2000, 4, \"x192c3\")\n+AVR_MCU (\"atxmega256a3u\",    ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega256A3U__\",    0x2000, 5, \"x256a3u\")\n+AVR_MCU (\"atxmega256c3\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega256C3__\",     0x2000, 5, \"x256c3\")\n+AVR_MCU (\"atxmega384c3\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega384C3__\",     0x2000, 6, \"x384c3\")\n+AVR_MCU (\"atxmega384d3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega384D3__\",     0x2000, 6, \"x384d3\")\n /* Xmega, 128K < Flash, RAM > 64K RAM.  */\n-AVR_MCU (\"avrxmega7\",        ARCH_AVRXMEGA7, NULL,                       0, 0, 0x2000, 3, \"x128a1\")\n-AVR_MCU (\"atxmega128a1\",     ARCH_AVRXMEGA7, \"__AVR_ATxmega128A1__\",     0, 0, 0x2000, 3, \"x128a1\")\n-AVR_MCU (\"atxmega128a1u\",    ARCH_AVRXMEGA7, \"__AVR_ATxmega128A1U__\",    0, 0, 0x2000, 3, \"x128a1u\")\n-AVR_MCU (\"atxmega128a4u\",    ARCH_AVRXMEGA7, \"__AVR_ATxmega128A4U__\",    0, 0, 0x2000, 3, \"x128a4u\")\n+AVR_MCU (\"avrxmega7\",        ARCH_AVRXMEGA7, AVR_ISA_NONE, NULL,                       0x2000, 3, \"x128a1\")\n+AVR_MCU (\"atxmega128a1\",     ARCH_AVRXMEGA7, AVR_ISA_NONE, \"__AVR_ATxmega128A1__\",     0x2000, 3, \"x128a1\")\n+AVR_MCU (\"atxmega128a1u\",    ARCH_AVRXMEGA7, AVR_ISA_RMW,  \"__AVR_ATxmega128A1U__\",    0x2000, 3, \"x128a1u\")\n+AVR_MCU (\"atxmega128a4u\",    ARCH_AVRXMEGA7, AVR_ISA_RMW,  \"__AVR_ATxmega128A4U__\",    0x2000, 3, \"x128a4u\")\n /* Assembler only.  */\n-AVR_MCU (\"avr1\",                 ARCH_AVR1, NULL,                        0, 0, 0x0060, 1, \"s1200\")\n-AVR_MCU (\"at90s1200\",            ARCH_AVR1, \"__AVR_AT90S1200__\",         0, 0, 0x0060, 1, \"s1200\")\n-AVR_MCU (\"attiny11\",             ARCH_AVR1, \"__AVR_ATtiny11__\",          0, 0, 0x0060, 1, \"tn11\")\n-AVR_MCU (\"attiny12\",             ARCH_AVR1, \"__AVR_ATtiny12__\",          0, 0, 0x0060, 1, \"tn12\")\n-AVR_MCU (\"attiny15\",             ARCH_AVR1, \"__AVR_ATtiny15__\",          0, 0, 0x0060, 1, \"tn15\")\n-AVR_MCU (\"attiny28\",             ARCH_AVR1, \"__AVR_ATtiny28__\",          0, 0, 0x0060, 1, \"tn28\")\n+AVR_MCU (\"avr1\",                 ARCH_AVR1, AVR_ISA_NONE, NULL,                        0x0060, 1, \"s1200\")\n+AVR_MCU (\"at90s1200\",            ARCH_AVR1, AVR_ISA_NONE, \"__AVR_AT90S1200__\",         0x0060, 1, \"s1200\")\n+AVR_MCU (\"attiny11\",             ARCH_AVR1, AVR_ISA_NONE, \"__AVR_ATtiny11__\",          0x0060, 1, \"tn11\")\n+AVR_MCU (\"attiny12\",             ARCH_AVR1, AVR_ISA_NONE, \"__AVR_ATtiny12__\",          0x0060, 1, \"tn12\")\n+AVR_MCU (\"attiny15\",             ARCH_AVR1, AVR_ISA_NONE, \"__AVR_ATtiny15__\",          0x0060, 1, \"tn15\")\n+AVR_MCU (\"attiny28\",             ARCH_AVR1, AVR_ISA_NONE, \"__AVR_ATtiny28__\",          0x0060, 1, \"tn28\")"}, {"sha": "99644ec927d02fdedf086b0c51f2c4527beaee8b", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=576ba35c2a288b7e5ac7b74237a9ac57cba75cd5", "patch": "@@ -10120,7 +10120,7 @@ test_hard_reg_class (enum reg_class rclass, rtx x)\n static bool\n avr_2word_insn_p (rtx insn)\n {\n-  if (avr_current_device->errata_skip\n+  if ((avr_current_device->dev_attribute & AVR_ERRATA_SKIP)\n       || !insn\n       || 2 != get_attr_length (insn))\n     {"}, {"sha": "78434ec5e0d7095eb5d26cc55d6a505c844c93b4", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=576ba35c2a288b7e5ac7b74237a9ac57cba75cd5", "patch": "@@ -88,8 +88,9 @@ enum\n    __AVR_HAVE_8BIT_SP__ and __AVR_HAVE_16BIT_SP__.  During multilib generation\n    there is always __AVR_SP8__ == __AVR_HAVE_8BIT_SP__.  */\n \n-#define AVR_HAVE_8BIT_SP                                                \\\n-  (avr_current_device->short_sp || TARGET_TINY_STACK || avr_sp8)\n+#define AVR_HAVE_8BIT_SP                                 \\\n+  ((avr_current_device->dev_attribute & AVR_SHORT_SP) || \\\n+   TARGET_TINY_STACK || avr_sp8)\n \n #define AVR_HAVE_SPH (!avr_sp8)\n "}, {"sha": "d7baa4a8383d6dbf835bbcbb6a135c568fce405b", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=576ba35c2a288b7e5ac7b74237a9ac57cba75cd5", "patch": "@@ -5342,7 +5342,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"!AVR_HAVE_JMP_CALL\n-   || !avr_current_device->errata_skip\"\n+   || !(avr_current_device->dev_attribute & AVR_ERRATA_SKIP)\"\n   {\n     if (operands[2] == CONST0_RTX (<MODE>mode))\n       operands[2] = zero_reg_rtx;"}, {"sha": "76c8b398064f9fb207b880e55dd5fd904b0638b7", "filename": "gcc/config/avr/driver-avr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Fdriver-avr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Fdriver-avr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fdriver-avr.c?ref=576ba35c2a288b7e5ac7b74237a9ac57cba75cd5", "patch": "@@ -59,8 +59,8 @@ avr_device_to_as (int argc, const char **argv)\n   avr_set_current_device (argv[0]);\n \n   return concat (\"-mmcu=\", avr_current_arch->arch_name,\n-                 avr_current_device->errata_skip ? \"\" : \" -mno-skip-bug\",\n-                 NULL);\n+    avr_current_device->dev_attribute & AVR_ERRATA_SKIP ? \"\" : \" -mno-skip-bug\",\n+    avr_current_device->dev_attribute & AVR_ISA_RMW ? \" -mrmw\" : \"\", NULL);\n }\n \n /* Returns command line parameters to pass to ld.  */\n@@ -144,7 +144,7 @@ avr_device_to_sp8 (int argc, const char **argv)\n           || avr_current_device->arch == ARCH_AVR25))\n     return \"\";\n \n-  return avr_current_device->short_sp\n+  return (avr_current_device->dev_attribute & AVR_SHORT_SP)\n     ? \"-msp8\"\n     : \"%<msp8\";\n }"}, {"sha": "1dfeabbee49356ee721a84ec2926cb198ae0682a", "filename": "gcc/config/avr/genmultilib.awk", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Fgenmultilib.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Fconfig%2Favr%2Fgenmultilib.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fgenmultilib.awk?ref=576ba35c2a288b7e5ac7b74237a9ac57cba75cd5", "patch": "@@ -86,7 +86,7 @@ BEGIN {\n     name = $2\n     gsub (\"\\\"\", \"\", name)\n \n-    if ($4 == \"NULL\")\n+    if ($5 == \"NULL\")\n     {\n \tcore = name\n \n@@ -106,7 +106,17 @@ BEGIN {\n     if (core == \"avr1\")\n \tnext\n \n-    tiny_stack[name]  = $5\n+    # split device specific feature list\n+    n = split($4,dev_attribute,\"|\")\n+\n+    # set tiny_stack false by default\n+    tiny_stack[name] = 0\n+    for (i=1; i <= n; i++)\n+      if (dev_attribute[i] == \"AVR_SHORT_SP\") {\n+        tiny_stack[name]  = 1\n+        break\n+      }\n+\n     mcu[n_mcu] = name\n     n_mcu++\n     option[name]      = \"mmcu=\" name"}, {"sha": "0fff71c01922fd62888a70715c24674d25a2d550", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=576ba35c2a288b7e5ac7b74237a9ac57cba75cd5", "patch": "@@ -1,3 +1,7 @@\n+2014-05-04 Pitchumani Sivanupandi  <Pitchumani.S@atmel.com>\n+\n+\t* gcc.target/avr/dev-specific-rmw.c: New test.\n+\n 2014-04-04  Cong Hou  <congh@google.com>\n \n \tPR tree-optimization/60656"}, {"sha": "0a8393e4966fefcba9749ad592ebc3251df103f1", "filename": "gcc/testsuite/gcc.target/avr/dev-specific-rmw.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fdev-specific-rmw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576ba35c2a288b7e5ac7b74237a9ac57cba75cd5/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fdev-specific-rmw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fdev-specific-rmw.c?ref=576ba35c2a288b7e5ac7b74237a9ac57cba75cd5", "patch": "@@ -0,0 +1,13 @@\n+/* Verify that rmw instructions supported */\n+/* { dg-do assemble } */\n+\n+int main()\n+{\n+  #ifdef __AVR_ISA_RMW__\n+    __asm(\"xch Z, r12\");\n+    __asm(\"las Z, r12\");\n+    __asm(\"lac Z, r12\");\n+    __asm(\"lat Z, r12\");\n+  #endif\n+  return 0;\n+}"}]}