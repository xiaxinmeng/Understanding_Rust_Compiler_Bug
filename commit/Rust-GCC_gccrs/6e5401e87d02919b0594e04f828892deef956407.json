{"sha": "6e5401e87d02919b0594e04f828892deef956407", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU1NDAxZTg3ZDAyOTE5YjA1OTRlMDRmODI4ODkyZGVlZjk1NjQwNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-08-23T21:47:03Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-08-24T12:46:17Z"}, "message": "x86: Broadcast from integer to a pseudo vector register\n\nBroadcast from integer to a pseudo vector register instead of a hard\nvector register to allow LRA to remove redundant move instruction after\nbroadcast.\n\ngcc/\n\n\tPR target/102021\n\t* config/i386/i386-expand.c (ix86_expand_vector_move): Broadcast\n\tfrom integer to a pseudo vector register.\n\ngcc/testsuite/\n\n\tPR target/102021\n\t* gcc.target/i386/pr100865-10b.c: Expect vzeroupper.\n\t* gcc.target/i386/pr100865-4b.c: Likewise.\n\t* gcc.target/i386/pr100865-6b.c: Expect vmovdqu and vzeroupper.\n\t* gcc.target/i386/pr100865-7b.c: Likewise.\n\t* gcc.target/i386/pr102021.c: New test.", "tree": {"sha": "61bb08cb5cb7cf673b06d88197955b4899c6e608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61bb08cb5cb7cf673b06d88197955b4899c6e608"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e5401e87d02919b0594e04f828892deef956407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5401e87d02919b0594e04f828892deef956407", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5401e87d02919b0594e04f828892deef956407", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5401e87d02919b0594e04f828892deef956407/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9216ee6d1195d48388f825cf1b072e570129cbbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9216ee6d1195d48388f825cf1b072e570129cbbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9216ee6d1195d48388f825cf1b072e570129cbbe"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "2500dbfa7fb9d76869e7853bf302da5627c9be43", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5401e87d02919b0594e04f828892deef956407/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5401e87d02919b0594e04f828892deef956407/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=6e5401e87d02919b0594e04f828892deef956407", "patch": "@@ -579,19 +579,10 @@ ix86_expand_vector_move (machine_mode mode, rtx operands[])\n \t{\n \t  /* Broadcast to XMM/YMM/ZMM register from an integer\n \t     constant or scalar mem.  */\n-\t  /* Hard registers are used for 2 purposes:\n-\t     1. Prevent stack realignment when the original code\n-\t     doesn't use vector registers, which is the same for\n-\t     memcpy and memset.\n-\t     2. Prevent combine to convert constant broadcast to\n-\t     load from constant pool.  */\n-\t  op1 = ix86_gen_scratch_sse_rtx (mode);\n+\t  op1 = gen_reg_rtx (mode);\n \t  if (FLOAT_MODE_P (mode)\n \t      || (!TARGET_64BIT && GET_MODE_INNER (mode) == DImode))\n-\t    {\n-\t      first = force_const_mem (GET_MODE_INNER (mode), first);\n-\t      op1 = gen_reg_rtx (mode);\n-\t    }\n+\t    first = force_const_mem (GET_MODE_INNER (mode), first);\n \t  bool ok = ix86_expand_vector_init_duplicate (false, mode,\n \t\t\t\t\t\t       op1, first);\n \t  gcc_assert (ok);"}, {"sha": "e5616d8d258791514788239663b78c7f93078c25", "filename": "gcc/testsuite/gcc.target/i386/pr100865-10b.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5401e87d02919b0594e04f828892deef956407/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-10b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5401e87d02919b0594e04f828892deef956407/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-10b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-10b.c?ref=6e5401e87d02919b0594e04f828892deef956407", "patch": "@@ -5,4 +5,3 @@\n \n /* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %ymm\\[0-9\\]+\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu8\\[\\\\t \\]%ymm\\[0-9\\]+, \" 8 } } */\n-/* { dg-final { scan-assembler-not \"vzeroupper\" } } */"}, {"sha": "6d9cb91b8e9bf48e55a7139b2817f85a53ec4676", "filename": "gcc/testsuite/gcc.target/i386/pr100865-4b.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5401e87d02919b0594e04f828892deef956407/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5401e87d02919b0594e04f828892deef956407/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4b.c?ref=6e5401e87d02919b0594e04f828892deef956407", "patch": "@@ -5,7 +5,6 @@\n \n /* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %ymm\\[0-9\\]+\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu8\\[\\\\t \\]%ymm\\[0-9\\]+, \" 2 } } */\n-/* { dg-final { scan-assembler-times \"vzeroupper\" 1 { target ia32 } } } */\n-/* { dg-final { scan-assembler-not \"vzeroupper\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vzeroupper\" 1 } } */\n /* { dg-final { scan-assembler-not \"vpbroadcastb\\[\\\\t \\]+%xmm\\[0-9\\]+, %ymm\\[0-9\\]+\" } } */\n /* { dg-final { scan-assembler-not \"vmovdqa\" } } */"}, {"sha": "9588249cb02c7234e92db20e6e661c1a6b2d3754", "filename": "gcc/testsuite/gcc.target/i386/pr100865-6b.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5401e87d02919b0594e04f828892deef956407/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5401e87d02919b0594e04f828892deef956407/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6b.c?ref=6e5401e87d02919b0594e04f828892deef956407", "patch": "@@ -4,9 +4,7 @@\n #include \"pr100865-6a.c\"\n \n /* { dg-final { scan-assembler-times \"vpbroadcastd\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %ymm\\[0-9\\]+\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%ymm\\[0-9\\]+, \" 8 { target ia32 } } } */\n-/* { dg-final { scan-assembler-times \"vmovdqu32\\[\\\\t \\]%ymm\\[0-9\\]+, \" 8 { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"vzeroupper\" 1 { target ia32 } } } */\n-/* { dg-final { scan-assembler-not \"vzeroupper\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%ymm\\[0-9\\]+, \" 8 } } */\n+/* { dg-final { scan-assembler-times \"vzeroupper\" 1 } } */\n /* { dg-final { scan-assembler-not \"vpbroadcastd\\[\\\\t \\]+%xmm\\[0-9\\]+, %ymm\\[0-9\\]+\" } } */\n /* { dg-final { scan-assembler-not \"vmovdqa\" } } */"}, {"sha": "3b20c6805213eaa8e7a908cf3461bea17f00e388", "filename": "gcc/testsuite/gcc.target/i386/pr100865-7b.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5401e87d02919b0594e04f828892deef956407/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-7b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5401e87d02919b0594e04f828892deef956407/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-7b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-7b.c?ref=6e5401e87d02919b0594e04f828892deef956407", "patch": "@@ -5,8 +5,6 @@\n \n /* { dg-final { scan-assembler-times \"vpbroadcastq\\[\\\\t \\]+%r\\[^\\n\\]*, %ymm\\[0-9\\]+\" 1 { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-times \"vpbroadcastq\\[\\\\t \\]+\\[^\\n\\]*, %ymm\\[0-9\\]+\" 1 { target ia32 } } } */\n-/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%ymm\\[0-9\\]+, \" 16 { target ia32 } } } */\n-/* { dg-final { scan-assembler-times \"vmovdqu64\\[\\\\t \\]%ymm\\[0-9\\]+, \" 16 { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"vzeroupper\" 1 { target ia32 } } } */\n-/* { dg-final { scan-assembler-not \"vzeroupper\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%ymm\\[0-9\\]+, \" 16 } } */\n+/* { dg-final { scan-assembler-times \"vzeroupper\" 1 } } */\n /* { dg-final { scan-assembler-not \"vmovdqa\" } } */"}, {"sha": "6db3f57dc761f422c6df6a23272304927f08c783", "filename": "gcc/testsuite/gcc.target/i386/pr102021.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5401e87d02919b0594e04f828892deef956407/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102021.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5401e87d02919b0594e04f828892deef956407/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102021.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102021.c?ref=6e5401e87d02919b0594e04f828892deef956407", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=skylake-avx512\" } */\n+\n+#include<immintrin.h>\n+\n+__m256i\n+foo ()\n+{\n+  return _mm256_set1_epi16 (12);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\\[\\\\t \\]+%r\\[^\\n\\]*, %ymm\\[0-9\\]+\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\\[\\\\t \\]+\\[^\\n\\]*, %ymm\\[0-9\\]+\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\" } } */\n+/* { dg-final { scan-assembler-not \"vzeroupper\" } } */"}]}