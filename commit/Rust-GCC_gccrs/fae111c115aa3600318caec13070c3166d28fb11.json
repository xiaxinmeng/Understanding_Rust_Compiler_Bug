{"sha": "fae111c115aa3600318caec13070c3166d28fb11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFlMTExYzExNWFhMzYwMDMxOGNhZWMxMzA3MGMzMTY2ZDI4ZmIxMQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-09-08T18:57:32Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-09-08T18:57:32Z"}, "message": "* fold-const.c (operand_equal_p): Clarify documentation.\n\nFrom-SVN: r71214", "tree": {"sha": "6c1bd00354a27f7741f4fc070bef38a17e4f1531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c1bd00354a27f7741f4fc070bef38a17e4f1531"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fae111c115aa3600318caec13070c3166d28fb11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae111c115aa3600318caec13070c3166d28fb11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fae111c115aa3600318caec13070c3166d28fb11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae111c115aa3600318caec13070c3166d28fb11/comments", "author": null, "committer": null, "parents": [{"sha": "fa531100f1956d00ec74cc4df7d6d5cbc510058e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa531100f1956d00ec74cc4df7d6d5cbc510058e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa531100f1956d00ec74cc4df7d6d5cbc510058e"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "1c8268104dab6006d32d2bb559a20d2e863218cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae111c115aa3600318caec13070c3166d28fb11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae111c115aa3600318caec13070c3166d28fb11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fae111c115aa3600318caec13070c3166d28fb11", "patch": "@@ -1,3 +1,7 @@\n+2003-09-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (operand_equal_p): Clarify documentation.\n+\n 2003-09-08  Richard Henderson  <rth@redhat.com>\n \n \t* c-decl.c (c_expand_body_1): Push and pop function context here."}, {"sha": "d5b98fe488dec65ef837ded2b610812302b7f043", "filename": "gcc/fold-const.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae111c115aa3600318caec13070c3166d28fb11/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae111c115aa3600318caec13070c3166d28fb11/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=fae111c115aa3600318caec13070c3166d28fb11", "patch": "@@ -1822,13 +1822,27 @@ truth_value_p (enum tree_code code)\n \t  || code == TRUTH_XOR_EXPR || code == TRUTH_NOT_EXPR);\n }\n \f\n-/* Return nonzero if two operands are necessarily equal.\n+/* Return nonzero if two operands (typically of the same tree node)\n+   are necessarily equal.  If either argument has side-effects this\n+   function returns zero.\n+\n    If ONLY_CONST is nonzero, only return nonzero for constants.\n    This function tests whether the operands are indistinguishable;\n    it does not test whether they are equal using C's == operation.\n    The distinction is important for IEEE floating point, because\n    (1) -0.0 and 0.0 are distinguishable, but -0.0==0.0, and\n-   (2) two NaNs may be indistinguishable, but NaN!=NaN.  */\n+   (2) two NaNs may be indistinguishable, but NaN!=NaN.\n+\n+   If ONLY_CONST is zero, a VAR_DECL is considered equal to itself\n+   even though it may hold multiple values during a function.\n+   This is because a GCC tree node guarantees that nothing else is\n+   executed between the evaluation of its \"operands\" (which may often\n+   be evaluated in arbitrary order).  Hence if the operands themselves\n+   don't side-effect, the VAR_DECLs, PARM_DECLs etc... must hold the\n+   same value in each operand/subexpression.  Hence a zero value for\n+   ONLY_CONST assumes isochronic (or instantaneous) tree equivalence.\n+   If comparing arbitrary expression trees, such as from different\n+   statements, ONLY_CONST must usually be non-zero.  */\n \n int\n operand_equal_p (tree arg0, tree arg1, int only_const)"}]}