{"sha": "ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIzYTZkZDZlMjlhZDdjOGVjYjlkODAzZDc2NmU4MjJjYTFiNTNlNQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-05-19T11:30:30Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-05-19T11:30:30Z"}, "message": "Warning fixes:\n\n        * class.c (build_utf8_ref): Initialize variable `field'.\n        * decl.c (init_decl_processing): Initialize variable `field'.\n        * expr.c (build_known_method_ref): Mark parameters `method_type',\n        `method_signature' and `arg_list' with ATTRIBUTE_UNUSED.\n        (process_jvm_instruction): Likewise for parameter `length'.\n        * jvspec.c (lang_specific_driver): Mark variables `saw_math',\n        `saw_libc', `saw_gc', `saw_threadlib' and `saw_libgcj' with\n        ATTRIBUTE_UNUSED.\n        * parse.y (maybe_generate_clinit): Remove unused variable\n        `has_non_primitive_fields'.\n        (find_in_imports_on_demand): Initialize variables `node_to_use'\n        and `cl'.\n        (patch_binop): Likewise for variable `prom_type'.\n        (patch_unaryop): Likewise for variable `prom_type'.\n        * verify.c (verify_jvm_instructions): Likewise for variable `last'.\n        * xref.c (xref_table): Add missing initializer.\n\nFrom-SVN: r27030", "tree": {"sha": "4e5d6e7f6a6dd08188264e0f4697b82e42936912", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e5d6e7f6a6dd08188264e0f4697b82e42936912"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/comments", "author": null, "committer": null, "parents": [{"sha": "c472cdfd0ada0472b158067c2fe17c7dbcc20743", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c472cdfd0ada0472b158067c2fe17c7dbcc20743", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c472cdfd0ada0472b158067c2fe17c7dbcc20743"}], "stats": {"total": 76, "additions": 50, "deletions": 26}, "files": [{"sha": "d3cb63372ca925530d47514954b60982df28520c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5", "patch": "@@ -1,3 +1,28 @@\n+1999-05-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* class.c (build_utf8_ref): Initialize variable `field'.\n+\n+\t* decl.c (init_decl_processing): Initialize variable `field'.\n+\n+\t* expr.c (build_known_method_ref): Mark parameters `method_type',\n+\t`method_signature' and `arg_list' with ATTRIBUTE_UNUSED.\n+\t(process_jvm_instruction): Likewise for parameter `length'.\n+\n+\t* jvspec.c (lang_specific_driver): Mark variables `saw_math',\n+\t`saw_libc', `saw_gc', `saw_threadlib' and `saw_libgcj' with\n+\tATTRIBUTE_UNUSED.\n+\n+\t* parse.y (maybe_generate_clinit): Remove unused variable\n+\t`has_non_primitive_fields'.\n+\t(find_in_imports_on_demand): Initialize variables `node_to_use'\n+\tand `cl'.\n+\t(patch_binop): Likewise for variable `prom_type'.\n+\t(patch_unaryop): Likewise for variable `prom_type'.\n+\n+\t* verify.c (verify_jvm_instructions): Likewise for variable `last'.\n+\n+\t* xref.c (xref_table): Add missing initializer.\n+\n 1999-05-14  Tom Tromey  <tromey@cygnus.com>\n \n \t* java-except.h (struct eh_range): Removed unused `next' member.\n@@ -70,13 +95,13 @@ Thu May 13 13:23:38 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \t* xref.h (xref_get_data): New function, declared.\n \t(XREF_GET_DATA): Use xref_get_data.\n \t\n-1999-05-13  Kaveh R. Ghazi  <ghazi@snafu.rutgers.edu>\n+1999-05-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n         * gjavah.c (print_include): Cast the result of `strlen' to int\n         when comparing against a signed value.\n         (add_namelet): Likewise.\n \n-1999-05-12  Kaveh R. Ghazi  <ghazi@snafu.rutgers.edu>\n+1999-05-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* expr.c (expand_invoke): Mark parameter `nargs' with\n \tATTRIBUTE_UNUSED."}, {"sha": "4fea18d197fc6958632ee6b8ec2f81b82d3251c8", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5", "patch": "@@ -559,7 +559,7 @@ build_utf8_ref (name)\n   int name_len = IDENTIFIER_LENGTH(name);\n   char buf[60];\n   char *buf_ptr;\n-  tree ctype, field, str_type, cinit, string;\n+  tree ctype, field = NULL_TREE, str_type, cinit, string;\n   static int utf8_count = 0;\n   int name_hash;\n   tree ref = IDENTIFIER_UTF8_REF (name);"}, {"sha": "de03e5fd007f5f6d49a9316f8e21d0dad5474ea9", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5", "patch": "@@ -432,7 +432,7 @@ void\n init_decl_processing ()\n {\n   register tree endlink;\n-  tree field;\n+  tree field = NULL_TREE;\n   tree t;\n \n   current_function_decl = NULL;"}, {"sha": "79d0b7bd67f931863e113582da3894ac1cbcca38", "filename": "gcc/java/expr.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5", "patch": "@@ -1431,7 +1431,8 @@ tree dtable_ident = NULL_TREE;\n \n tree\n build_known_method_ref (method, method_type, self_type, method_signature, arg_list)\n-     tree method, method_type, self_type, method_signature, arg_list;\n+     tree method, method_type ATTRIBUTE_UNUSED, self_type,\n+          method_signature ATTRIBUTE_UNUSED, arg_list ATTRIBUTE_UNUSED;\n {\n   tree func;\n   if (is_compiled_class (self_type))\n@@ -2230,7 +2231,7 @@ int\n process_jvm_instruction (PC, byte_ops, length)\n      int PC;\n      unsigned char* byte_ops;\n-     long length;\n+     long length ATTRIBUTE_UNUSED;\n { \n   const char *opname; /* Temporary ??? */\n   int oldpc = PC; /* PC at instruction start. */"}, {"sha": "815ff3fd8bce27e1458ed1943e38761378dabdd1", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5", "patch": "@@ -145,19 +145,19 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n   int saw_speclang = 0;\n \n   /* \"-lm\" or \"-lmath\" if it appears on the command line.  */\n-  char *saw_math = 0;\n+  char *saw_math ATTRIBUTE_UNUSED = 0;\n \n   /* \"-lc\" if it appears on the command line.  */\n-  char *saw_libc = 0;\n+  char *saw_libc ATTRIBUTE_UNUSED = 0;\n \n   /* \"-lgcjgc\" if it appears on the command line.  */\n-  char *saw_gc = 0;\n+  char *saw_gc ATTRIBUTE_UNUSED = 0;\n \n   /* Saw `-l' option for the thread library.  */\n-  char *saw_threadlib = 0;\n+  char *saw_threadlib ATTRIBUTE_UNUSED = 0;\n \n   /* Saw `-lgcj' on command line.  */\n-  int saw_libgcj = 0;\n+  int saw_libgcj ATTRIBUTE_UNUSED = 0;\n \n   /* Saw -C or -o option, respectively. */\n   int saw_C = 0;"}, {"sha": "5895910acb8dd66cfff7625d6fc496a2eefc5706", "filename": "gcc/java/parse.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5", "patch": "@@ -2211,7 +2211,7 @@ static const short yycheck[] = {     3,\n #define YYPURE 1\n \n /* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */\n-#line 3 \"/usr/lib/bison.simple\"\n+#line 3 \"/usr/local/gnu/share/bison.simple\"\n \n /* Skeleton output parser for bison,\n    Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.\n@@ -2404,7 +2404,7 @@ __yy_memcpy (char *to, char *from, int count)\n #endif\n #endif\n \f\n-#line 196 \"/usr/lib/bison.simple\"\n+#line 196 \"/usr/local/gnu/share/bison.simple\"\n \n /* The user can define YYPARSE_PARAM as the name of an argument to be passed\n    into yyparse.  The argument should have type void *.\n@@ -4690,7 +4690,7 @@ case 495:\n     break;}\n }\n    /* the action file gets copied in in place of this dollarsign */\n-#line 498 \"/usr/lib/bison.simple\"\n+#line 498 \"/usr/local/gnu/share/bison.simple\"\n \f\n   yyvsp -= yylen;\n   yyssp -= yylen;\n@@ -5850,7 +5850,6 @@ static void\n maybe_generate_clinit ()\n {\n   tree mdecl, c;\n-  int has_non_primitive_fields = 0;\n \n   if (!ctxp->static_initialized || java_error_count)\n     return;\n@@ -7735,9 +7734,9 @@ static int\n find_in_imports_on_demand (class_type)\n      tree class_type;\n {\n-  tree node, import, node_to_use;\n+  tree node, import, node_to_use = NULL_TREE;\n   int seen_once = -1;\n-  tree cl;\n+  tree cl = NULL_TREE;\n \n   for (import = ctxp->import_demand_list; import; import = TREE_CHAIN (import))\n     {\n@@ -11811,7 +11810,7 @@ patch_binop (node, wfl_op1, wfl_op2)\n   tree op2 = TREE_OPERAND (node, 1);\n   tree op1_type = TREE_TYPE (op1);\n   tree op2_type = TREE_TYPE (op2);\n-  tree prom_type;\n+  tree prom_type = NULL_TREE;\n   int code = TREE_CODE (node);\n \n   /* If 1, tell the routine that we have to return error_mark_node\n@@ -12437,7 +12436,7 @@ patch_unaryop (node, wfl_op)\n {\n   tree op = TREE_OPERAND (node, 0);\n   tree op_type = TREE_TYPE (op);\n-  tree prom_type, value, decl;\n+  tree prom_type = NULL_TREE, value, decl;\n   int code = TREE_CODE (node);\n   int error_found = 0;\n "}, {"sha": "a6f598ea2d63fb2ddf3531b88165bda783f2e7dd", "filename": "gcc/java/parse.y", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5", "patch": "@@ -3265,7 +3265,6 @@ static void\n maybe_generate_clinit ()\n {\n   tree mdecl, c;\n-  int has_non_primitive_fields = 0;\n \n   if (!ctxp->static_initialized || java_error_count)\n     return;\n@@ -5150,9 +5149,9 @@ static int\n find_in_imports_on_demand (class_type)\n      tree class_type;\n {\n-  tree node, import, node_to_use;\n+  tree node, import, node_to_use = NULL_TREE;\n   int seen_once = -1;\n-  tree cl;\n+  tree cl = NULL_TREE;\n \n   for (import = ctxp->import_demand_list; import; import = TREE_CHAIN (import))\n     {\n@@ -9226,7 +9225,7 @@ patch_binop (node, wfl_op1, wfl_op2)\n   tree op2 = TREE_OPERAND (node, 1);\n   tree op1_type = TREE_TYPE (op1);\n   tree op2_type = TREE_TYPE (op2);\n-  tree prom_type;\n+  tree prom_type = NULL_TREE;\n   int code = TREE_CODE (node);\n \n   /* If 1, tell the routine that we have to return error_mark_node\n@@ -9852,7 +9851,7 @@ patch_unaryop (node, wfl_op)\n {\n   tree op = TREE_OPERAND (node, 0);\n   tree op_type = TREE_TYPE (op);\n-  tree prom_type, value, decl;\n+  tree prom_type = NULL_TREE, value, decl;\n   int code = TREE_CODE (node);\n   int error_found = 0;\n "}, {"sha": "df3dcac2d82e4050b7278cccd4a5aa0e81c5dc4e", "filename": "gcc/java/verify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5", "patch": "@@ -1039,7 +1039,7 @@ verify_jvm_instructions (jcf, byte_ops, length)\n \n \tcase OPCODE_lookupswitch:\n \t  {\n-\t    jint npairs, last, not_registered = 1;\n+\t    jint npairs, last = 0, not_registered = 1;\n \n \t    pop_type (int_type_node);\n \t    while (PC%4)"}, {"sha": "8fd5180481997a7bf77084e08b653a9b7b4181b2", "filename": "gcc/java/xref.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2Fxref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5/gcc%2Fjava%2Fxref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fxref.c?ref=ab3a6dd6e29ad7c8ecb9d803d766e822ca1b53e5", "patch": "@@ -35,7 +35,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n \n static xref_flag_table xref_table [] = {\n-  {NULL, NULL, NULL},\n+  {NULL, NULL, NULL, NULL},\n };\n \n /* Decode an xref flag value. Return 0 if the flag wasn't found. */"}]}