{"sha": "282efe1c41e928262612d9c6291805a21f50906f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgyZWZlMWM0MWU5MjgyNjI2MTJkOWM2MjkxODA1YTIxZjUwOTA2Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-09-30T08:21:27Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-09-30T08:21:27Z"}, "message": "unwind-dw2.c (_Unwind_GetGR): Honor DWARF_ZERO_REG.\n\n        * unwind-dw2.c (_Unwind_GetGR): Honor DWARF_ZERO_REG.\n        * doc/tm.texi (DWARF_ZERO_REG): New.\n        * config/alpha/alpha.c (alpha_sa_mask, alpha_expand_prologue,\n        alpha_expand_epilogue): Revert 2003-09-30 change to store zero.\n        * config/alpha/alpha.h (DWARF_ZERO_REG): New.\n\nFrom-SVN: r88331", "tree": {"sha": "b68f70cabfd53a484ae0dea743781e11afb3cfd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b68f70cabfd53a484ae0dea743781e11afb3cfd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/282efe1c41e928262612d9c6291805a21f50906f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/282efe1c41e928262612d9c6291805a21f50906f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/282efe1c41e928262612d9c6291805a21f50906f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/282efe1c41e928262612d9c6291805a21f50906f/comments", "author": null, "committer": null, "parents": [{"sha": "de39930392eda3a8a298e70d07f997eba84c5afe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de39930392eda3a8a298e70d07f997eba84c5afe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de39930392eda3a8a298e70d07f997eba84c5afe"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "7dfe5e8a92092cdb3aac766cb8032a110008e8d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282efe1c41e928262612d9c6291805a21f50906f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282efe1c41e928262612d9c6291805a21f50906f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=282efe1c41e928262612d9c6291805a21f50906f", "patch": "@@ -1,3 +1,12 @@\n+2004-09-29  Richard Henderson  <rth@redhat.com>\n+\n+\t* unwind-dw2.c (_Unwind_GetGR): Honor DWARF_ZERO_REG.\n+\t* doc/tm.texi (DWARF_ZERO_REG): New.\n+\n+\t* config/alpha/alpha.c (alpha_sa_mask, alpha_expand_prologue,\n+\talpha_expand_epilogue): Revert 2003-09-30 change to store zero.\n+\t* config/alpha/alpha.h (DWARF_ZERO_REG): New.\n+\n 2004-09-29  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* builtins.c (expand_builtin_strlen): Do not call emit_move_insn"}, {"sha": "b1de390bc5331a89c8e8beb1d2d26e2557043418", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282efe1c41e928262612d9c6291805a21f50906f/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282efe1c41e928262612d9c6291805a21f50906f/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=282efe1c41e928262612d9c6291805a21f50906f", "patch": "@@ -5924,11 +5924,6 @@ alpha_sa_mask (unsigned long *imaskP, unsigned long *fmaskP)\n \t    break;\n \t  imask |= 1UL << regno;\n \t}\n-\n-      /* Glibc likes to use $31 as an unwind stopper for crt0.  To\n-\t avoid hackery in unwind-dw2.c, we need to actively store a\n-\t zero in the prologue of _Unwind_RaiseException et al.  */\n-      imask |= 1UL << 31;\n     }\n \n   /* If any register spilled, then spill the return address also.  */\n@@ -6451,14 +6446,6 @@ alpha_expand_prologue (void)\n \t    reg_offset += 8;\n \t  }\n \n-      /* Store a zero if requested for unwinding.  */\n-      if (imask & (1UL << 31))\n-\t{\n-\t  emit_frame_store_1 (const0_rtx, sa_reg, sa_bias, reg_offset,\n-\t\t\t      gen_rtx_REG (Pmode, 31));\n-\t  reg_offset += 8;\n-\t}\n-\n       for (i = 0; i < 31; i++)\n \tif (fmask & (1UL << i))\n \t  {\n@@ -6876,9 +6863,6 @@ alpha_expand_epilogue (void)\n \t    reg_offset += 8;\n \t  }\n \n-      if (imask & (1UL << 31))\n-\treg_offset += 8;\n-\n       for (i = 0; i < 31; ++i)\n \tif (fmask & (1UL << i))\n \t  {"}, {"sha": "fe3cedcb520b2cb377094a4be0e5059a5cb97398", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282efe1c41e928262612d9c6291805a21f50906f/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282efe1c41e928262612d9c6291805a21f50906f/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=282efe1c41e928262612d9c6291805a21f50906f", "patch": "@@ -1183,6 +1183,7 @@ do {\t\t\t\t\t\t\\\n #define INCOMING_RETURN_ADDR_RTX  gen_rtx_REG (Pmode, 26)\n #define DWARF_FRAME_RETURN_COLUMN DWARF_FRAME_REGNUM (26)\n #define DWARF_ALT_FRAME_RETURN_COLUMN DWARF_FRAME_REGNUM (64)\n+#define DWARF_ZERO_REG 31\n \n /* Describe how we implement __builtin_eh_return.  */\n #define EH_RETURN_DATA_REGNO(N)\t((N) < 4 ? (N) + 16 : INVALID_REGNUM)"}, {"sha": "f72713cee67521c3a1d7b59b08761fb34270c3ce", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282efe1c41e928262612d9c6291805a21f50906f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282efe1c41e928262612d9c6291805a21f50906f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=282efe1c41e928262612d9c6291805a21f50906f", "patch": "@@ -2974,6 +2974,14 @@ general register, but an alternate column needs to be used for\n signal frames.\n @end defmac\n \n+@defmac DWARF_ZERO_REG\n+A C expression whose value is an integer giving a DWARF 2 register\n+number that is considered to always have the value zero.  This should\n+only be defined if the target has an architected zero register, and\n+someone decided it was a good idea to use that register number to\n+terminate the stack backtrace.  New ports should avoid this.\n+@end defmac\n+\n @defmac INCOMING_FRAME_SP_OFFSET\n A C expression whose value is an integer giving the offset, in bytes,\n from the value of the stack pointer register to the top of the stack"}, {"sha": "baa4481c7471c4e287570d9b734e2f00319a033a", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282efe1c41e928262612d9c6291805a21f50906f/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282efe1c41e928262612d9c6291805a21f50906f/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=282efe1c41e928262612d9c6291805a21f50906f", "patch": "@@ -125,6 +125,11 @@ _Unwind_GetGR (struct _Unwind_Context *context, int index)\n   int size;\n   void *ptr;\n \n+#ifdef DWARF_ZERO_REG\n+  if (index == DWARF_ZERO_REG)\n+    return 0;\n+#endif\n+\n   index = DWARF_REG_TO_UNWIND_COLUMN (index);\n   if (index >= (int) sizeof(dwarf_reg_size_table))\n     abort ();"}]}