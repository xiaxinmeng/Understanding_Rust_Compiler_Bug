{"sha": "657730879110d20c9aa1de4f085a99e0ef6127de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU3NzMwODc5MTEwZDIwYzlhYTFkZTRmMDg1YTk5ZTBlZjYxMjdkZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-05-24T21:52:12Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-05-24T21:52:12Z"}, "message": "var-tracking.c (compute_cfa_pointer): Adjust head comment.\n\n\t* var-tracking.c (compute_cfa_pointer): Adjust head comment.\n\t(vt_initialize): Set PROLOGUE_BB unconditionally.\n\tAdd block comment about CFA_BASE_RTX machinery.\n\tReset FP_CFA_OFFSET to -1 on all invalid paths.\n\tCall vt_init_cfa_base only if FP_CFA_OFFSET isn't equal to -1.\n\nFrom-SVN: r174146", "tree": {"sha": "767bba708d86dadbf1bca3d7fae97b4c60aa4a11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/767bba708d86dadbf1bca3d7fae97b4c60aa4a11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/657730879110d20c9aa1de4f085a99e0ef6127de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/657730879110d20c9aa1de4f085a99e0ef6127de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/657730879110d20c9aa1de4f085a99e0ef6127de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/657730879110d20c9aa1de4f085a99e0ef6127de/comments", "author": null, "committer": null, "parents": [{"sha": "dd761d3aaf5724add090d6638191fa56f122782c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd761d3aaf5724add090d6638191fa56f122782c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd761d3aaf5724add090d6638191fa56f122782c"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "f98e134216c66d4685f2a9cdfe88808f68997a17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657730879110d20c9aa1de4f085a99e0ef6127de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657730879110d20c9aa1de4f085a99e0ef6127de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=657730879110d20c9aa1de4f085a99e0ef6127de", "patch": "@@ -1,3 +1,11 @@\n+2011-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* var-tracking.c (compute_cfa_pointer): Adjust head comment.\n+\t(vt_initialize): Set PROLOGUE_BB unconditionally.\n+\tAdd block comment about CFA_BASE_RTX machinery.\n+\tReset FP_CFA_OFFSET to -1 on all invalid paths.\n+\tCall vt_init_cfa_base only if FP_CFA_OFFSET isn't equal to -1.\n+\n 2011-05-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR objc/48187"}, {"sha": "5e7c2fc15dc3ba34e32301a2f4be9cc0eb40e0a6", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657730879110d20c9aa1de4f085a99e0ef6127de/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657730879110d20c9aa1de4f085a99e0ef6127de/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=657730879110d20c9aa1de4f085a99e0ef6127de", "patch": "@@ -705,7 +705,8 @@ vt_stack_adjustments (void)\n static rtx cfa_base_rtx;\n static HOST_WIDE_INT cfa_base_offset;\n \n-/* Compute a CFA-based value for the stack pointer.  */\n+/* Compute a CFA-based value for an ADJUSTMENT made to stack_pointer_rtx\n+   or hard_frame_pointer_rtx.  */\n \n static inline rtx\n compute_cfa_pointer (HOST_WIDE_INT adjustment)\n@@ -8664,7 +8665,7 @@ vt_init_cfa_base (void)\n static bool\n vt_initialize (void)\n {\n-  basic_block bb, prologue_bb = NULL;\n+  basic_block bb, prologue_bb = single_succ (ENTRY_BLOCK_PTR);\n   HOST_WIDE_INT fp_cfa_offset = -1;\n \n   alloc_aux_for_blocks (sizeof (struct variable_tracking_info_def));\n@@ -8722,6 +8723,16 @@ vt_initialize (void)\n \n   CLEAR_HARD_REG_SET (argument_reg_set);\n \n+  /* In order to factor out the adjustments made to the stack pointer or to\n+     the hard frame pointer and thus be able to use DW_OP_fbreg operations\n+     instead of individual location lists, we're going to rewrite MEMs based\n+     on them into MEMs based on the CFA by de-eliminating stack_pointer_rtx\n+     or hard_frame_pointer_rtx to the virtual CFA pointer frame_pointer_rtx\n+     resp. arg_pointer_rtx.  We can do this either when there is no frame\n+     pointer in the function and stack adjustments are consistent for all\n+     basic blocks or when there is a frame pointer and no stack realignment.\n+     But we first have to check that frame_pointer_rtx resp. arg_pointer_rtx\n+     has been eliminated.  */\n   if (!frame_pointer_needed)\n     {\n       rtx reg, elim;\n@@ -8764,10 +8775,11 @@ vt_initialize (void)\n \t    }\n \t  if (elim != hard_frame_pointer_rtx)\n \t    fp_cfa_offset = -1;\n-\t  else\n-\t    prologue_bb = single_succ (ENTRY_BLOCK_PTR);\n \t}\n+      else\n+\tfp_cfa_offset = -1;\n     }\n+\n   if (frame_pointer_needed)\n     {\n       rtx insn;\n@@ -8868,6 +8880,7 @@ vt_initialize (void)\n \t\t    }\n \n \t\t  if (bb == prologue_bb\n+\t\t      && fp_cfa_offset != -1\n \t\t      && hard_frame_pointer_adjustment == -1\n \t\t      && RTX_FRAME_RELATED_P (insn)\n \t\t      && fp_setter (insn))"}]}