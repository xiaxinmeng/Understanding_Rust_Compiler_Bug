{"sha": "46db415941fcc2edcfdb7d9de4480484ce28b76f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZkYjQxNTk0MWZjYzJlZGNmZGI3ZDlkZTQ0ODA0ODRjZTI4Yjc2Zg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-10-17T11:56:21Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-10-17T11:56:21Z"}, "message": "re PR libstdc++/28514 (libstdc++ vs. anonymous namespaces)\n\n2006-10-17  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/28514 \n\t* include/bits/cpp_type_traits.h (__detail): Uglify namespace.\n\t* include/ext/rope: Remove global-scope anonymous namespace, use\n\tnested __detail. Fixup resulting formatting issues.\n\t* include/ext/ropeimpl.h: Same.\n\t* include/tr1/hashtable_policy.h: Remove anonymous namespace\n\tnesting for __detail.\n\t* include/tr1/random: Revert anonymous namespace to nested\n\t__detail namespace.\n\t* include/tr1/random.tcc: Same.\n\t* src/ext-inst.cc: Fixups for above.\n\nFrom-SVN: r117824", "tree": {"sha": "85502d16217ebc971d63c61ffa4e0143fa5ed212", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85502d16217ebc971d63c61ffa4e0143fa5ed212"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46db415941fcc2edcfdb7d9de4480484ce28b76f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46db415941fcc2edcfdb7d9de4480484ce28b76f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46db415941fcc2edcfdb7d9de4480484ce28b76f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46db415941fcc2edcfdb7d9de4480484ce28b76f/comments", "author": null, "committer": null, "parents": [{"sha": "e4fd3c844119075907e31d9f0179e7be661dbe95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4fd3c844119075907e31d9f0179e7be661dbe95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4fd3c844119075907e31d9f0179e7be661dbe95"}], "stats": {"total": 382, "additions": 191, "deletions": 191}, "files": [{"sha": "fb2e68d134815aceb5da6e3a889d34d1d960679a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46db415941fcc2edcfdb7d9de4480484ce28b76f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46db415941fcc2edcfdb7d9de4480484ce28b76f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=46db415941fcc2edcfdb7d9de4480484ce28b76f", "patch": "@@ -1,3 +1,17 @@\n+2006-10-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/28514 \n+\t* include/bits/cpp_type_traits.h (__detail): Uglify namespace.\n+\t* include/ext/rope: Remove global-scope anonymous namespace, use\n+\tnested __detail. Fixup resulting formatting issues.\n+\t* include/ext/ropeimpl.h: Same.\n+\t* include/tr1/hashtable_policy.h: Remove anonymous namespace\n+\tnesting for __detail.\n+\t* include/tr1/random: Revert anonymous namespace to nested\n+\t__detail namespace.\n+\t* include/tr1/random.tcc: Same.\n+\t* src/ext-inst.cc: Fixups for above.\n+\n 2006-10-16  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* include/Makefile.am (tr1_headers): Add new tuple_defs.h."}, {"sha": "3132334578eb3bc18179780b0d05ee27a40fb80e", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46db415941fcc2edcfdb7d9de4480484ce28b76f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46db415941fcc2edcfdb7d9de4480484ce28b76f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=46db415941fcc2edcfdb7d9de4480484ce28b76f", "patch": "@@ -83,7 +83,7 @@ struct __false_type { };\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-namespace detail\n+namespace __detail\n {\n   // NB: g++ can not compile these if declared within the class\n   // __is_pod itself.\n@@ -94,7 +94,7 @@ namespace detail\n   __one __test_type(int _Tp::*);\n   template<typename _Tp>\n   __two& __test_type(...);\n-} // namespace detail\n+} // namespace __detail\n \n   template<bool>\n     struct __truth_type\n@@ -346,8 +346,8 @@ namespace detail\n     {\n       enum\n \t{\n-\t  __value = (sizeof(detail::__test_type<_Tp>(0))\n-\t\t     != sizeof(detail::__one))\n+\t  __value = (sizeof(__detail::__test_type<_Tp>(0))\n+\t\t     != sizeof(__detail::__one))\n \t};\n     };\n "}, {"sha": "0cfd21e44625eece26eae24ccb10874387f3909f", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 75, "deletions": 78, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46db415941fcc2edcfdb7d9de4480484ce28b76f/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46db415941fcc2edcfdb7d9de4480484ce28b76f/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=46db415941fcc2edcfdb7d9de4480484ce28b76f", "patch": "@@ -67,14 +67,14 @@\n \n #include <ext/memory> // For uninitialized_copy_n\n \n-namespace \n-{\n-  enum { _S_max_rope_depth = 45 };\n-  enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};\n-} // anonymous namespace\n-\n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n+  namespace __detail\n+  {\n+    enum { _S_max_rope_depth = 45 };\n+    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};\n+  } // namespace __detail\n+\n   using std::size_t;\n   using std::ptrdiff_t;\n   using std::allocator;\n@@ -138,7 +138,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     class char_producer\n     {\n     public:\n-      virtual ~char_producer() {};\n+      virtual ~char_producer() { };\n \n       virtual void\n       operator()(size_t __start_pos, size_t __len,\n@@ -302,7 +302,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // compile-time would do.  Hence this should all be private\n       // for now.\n       // The symmetry with char_producer is accidental and temporary.\n-      virtual ~_Rope_char_consumer() {};\n+      virtual ~_Rope_char_consumer() { };\n   \n       virtual bool\n       operator()(const _CharT* __buffer, size_t __len) = 0;\n@@ -535,7 +535,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       { return *static_cast<const _Alloc*>(this); }\n \n       _Rope_rep_base(size_t __size, const allocator_type&)\n-      : _M_size(__size) {}\n+      : _M_size(__size) { }\n \n       size_t _M_size;\n \n@@ -558,7 +558,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n # endif\n     {\n     public:\n-      _Tag _M_tag:8;\n+      __detail::_Tag _M_tag:8;\n       bool _M_is_balanced:8;\n       unsigned char _M_depth;\n       __GC_CONST _CharT* _M_c_string;\n@@ -574,7 +574,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n       using _Rope_rep_base<_CharT, _Alloc>::get_allocator;\n \n-      _Rope_RopeRep(_Tag __t, int __d, bool __b, size_t __size,\n+      _Rope_RopeRep(__detail::_Tag __t, int __d, bool __b, size_t __size,\n \t\t    allocator_type __a)\n       : _Rope_rep_base<_CharT, _Alloc>(__size, __a),\n #ifndef __GC\n@@ -592,7 +592,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n #endif\n #ifdef __GC\n       void\n-      _M_incr () {}\n+      _M_incr () { }\n #endif\n       static void\n       _S_free_string(__GC_CONST _CharT*, size_t __len,\n@@ -640,11 +640,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  __t->_M_free_tree();\n       }\n #   else /* __GC */\n-      void _M_unref_nonnil() {}\n-      void _M_ref_nonnil() {}\n-      static void _S_unref(_Rope_RopeRep*) {}\n-      static void _S_ref(_Rope_RopeRep*) {}\n-      static void _S_free_if_unref(_Rope_RopeRep*) {}\n+      void _M_unref_nonnil() { }\n+      void _M_ref_nonnil() { }\n+      static void _S_unref(_Rope_RopeRep*) { }\n+      static void _S_ref(_Rope_RopeRep*) { }\n+      static void _S_free_if_unref(_Rope_RopeRep*) { }\n #   endif\n protected:\n       _Rope_RopeRep&\n@@ -691,7 +691,7 @@ protected:\n \n       _Rope_RopeLeaf(__GC_CONST _CharT* __d, size_t __size,\n \t\t     allocator_type __a)\n-      : _Rope_RopeRep<_CharT, _Alloc>(_S_leaf, 0, true,\n+      : _Rope_RopeRep<_CharT, _Alloc>(__detail::_S_leaf, 0, true,\n \t\t\t\t      __size, __a), _M_data(__d)\n       {\n         if (_S_is_basic_char_type((_CharT *)0))\n@@ -733,7 +733,7 @@ protected:\n       _Rope_RopeConcatenation(_Rope_RopeRep<_CharT, _Alloc>* __l,\n \t\t\t      _Rope_RopeRep<_CharT, _Alloc>* __r,\n \t\t\t      allocator_type __a)\n-\t: _Rope_RopeRep<_CharT, _Alloc>(::_S_concat,\n+\t: _Rope_RopeRep<_CharT, _Alloc>(__detail::_S_concat,\n \t\t\t\t      std::max(__l->_M_depth,\n \t\t\t\t\t       __r->_M_depth) + 1,\n \t\t\t\t      false,\n@@ -781,7 +781,7 @@ protected:\n \n       _Rope_RopeFunction(char_producer<_CharT>* __f, size_t __size,\n                         bool __d, allocator_type __a)\n-      : _Rope_RopeRep<_CharT, _Alloc>(::_S_function, 0, true, __size, __a)\n+      : _Rope_RopeRep<_CharT, _Alloc>(__detail::_S_function, 0, true, __size, __a)\n \t, _M_fn(__f)\n #ifndef __GC\n \t, _M_delete_when_done(__d)\n@@ -832,15 +832,15 @@ protected:\n       {\n         switch(_M_base->_M_tag)\n \t  {\n-\t  case ::_S_function:\n-\t  case ::_S_substringfn:\n+\t  case __detail::_S_function:\n+\t  case __detail::_S_substringfn:\n \t    {\n \t      char_producer<_CharT>* __fn =\n \t\t((_Rope_RopeFunction<_CharT,_Alloc>*)_M_base)->_M_fn;\n \t      (*__fn)(__start_pos + _M_start, __req_len, __buffer);\n \t    }\n \t    break;\n-\t  case ::_S_leaf:\n+\t  case __detail::_S_leaf:\n \t    {\n \t      __GC_CONST _CharT* __s =\n \t\t((_Rope_RopeLeaf<_CharT,_Alloc>*)_M_base)->_M_data;\n@@ -864,7 +864,7 @@ protected:\n #ifndef __GC\n \t_M_base->_M_ref_nonnil();\n #endif\n-        this->_M_tag = ::_S_substringfn;\n+        this->_M_tag = __detail::_S_substringfn;\n       }\n     virtual ~_Rope_RopeSubstring() throw()\n       {\n@@ -893,12 +893,12 @@ protected:\n       ~_Rope_self_destruct_ptr()\n       { _Rope_RopeRep<_CharT, _Alloc>::_S_unref(_M_ptr); }\n #ifdef __EXCEPTIONS\n-      _Rope_self_destruct_ptr() : _M_ptr(0) {};\n+      _Rope_self_destruct_ptr() : _M_ptr(0) { };\n #else\n-      _Rope_self_destruct_ptr() {};\n+      _Rope_self_destruct_ptr() { };\n #endif\n       _Rope_self_destruct_ptr(_Rope_RopeRep<_CharT, _Alloc>* __p)\n-      : _M_ptr(__p) {}\n+      : _M_ptr(__p) { }\n     \n       _Rope_RopeRep<_CharT, _Alloc>&\n       operator*()\n@@ -941,18 +941,18 @@ protected:\n       _My_rope* _M_root;     // The whole rope.\n     public:\n       _Rope_char_ref_proxy(_My_rope* __r, size_t __p)\n-      :  _M_pos(__p), _M_current(), _M_current_valid(false), _M_root(__r) {}\n+      :  _M_pos(__p), _M_current(), _M_current_valid(false), _M_root(__r) { }\n \n       _Rope_char_ref_proxy(const _Rope_char_ref_proxy& __x)\n-      : _M_pos(__x._M_pos), _M_current(__x._M_current), _M_current_valid(false), \n-\t_M_root(__x._M_root) {}\n+      : _M_pos(__x._M_pos), _M_current(__x._M_current), \n+\t_M_current_valid(false), _M_root(__x._M_root) { }\n \n       // Don't preserve cache if the reference can outlive the\n       // expression.  We claim that's not possible without calling\n       // a copy constructor or generating reference to a proxy\n       // reference.  We declare the latter to have undefined semantics.\n       _Rope_char_ref_proxy(_My_rope* __r, size_t __p, _CharT __c)\n-      : _M_pos(__p), _M_current(__c), _M_current_valid(true), _M_root(__r) {}\n+      : _M_pos(__p), _M_current(__c), _M_current_valid(true), _M_root(__r) { }\n \n       inline operator _CharT () const;\n \n@@ -985,12 +985,12 @@ protected:\n       rope<_CharT,_Alloc>* _M_root;     // The whole rope.\n     public:\n       _Rope_char_ptr_proxy(const _Rope_char_ref_proxy<_CharT,_Alloc>& __x)\n-      : _M_pos(__x._M_pos), _M_root(__x._M_root) {}\n+      : _M_pos(__x._M_pos), _M_root(__x._M_root) { }\n \n       _Rope_char_ptr_proxy(const _Rope_char_ptr_proxy& __x)\n-      : _M_pos(__x._M_pos), _M_root(__x._M_root) {}\n+      : _M_pos(__x._M_pos), _M_root(__x._M_root) { }\n \n-      _Rope_char_ptr_proxy() {}\n+      _Rope_char_ptr_proxy() { }\n       \n       _Rope_char_ptr_proxy(_CharT* __x)\n       : _M_root(0), _M_pos(0) { }\n@@ -1074,10 +1074,10 @@ protected:\n       static void _S_setcache_for_incr(_Rope_iterator_base& __x);\n                                         // As above, but assumes path\n                                         // cache is valid for previous posn.\n-      _Rope_iterator_base() {}\n+      _Rope_iterator_base() { }\n \n       _Rope_iterator_base(_RopeRep* __root, size_t __pos)\n-      : _M_current_pos(__pos), _M_root(__root), _M_buf_ptr(0) {}\n+      : _M_current_pos(__pos), _M_root(__root), _M_buf_ptr(0) { }\n \n       void _M_incr(size_t __n);\n       void _M_decr(size_t __n);\n@@ -1114,15 +1114,15 @@ protected:\n       : _Rope_iterator_base<_CharT, _Alloc>(const_cast<_RopeRep*>(__root),\n \t\t\t\t\t    __pos)\n                    // Only nonconst iterators modify root ref count\n-      {}\n+      { }\n   public:\n       typedef _CharT reference;   // Really a value.  Returning a reference\n                                   // Would be a mess, since it would have\n                                   // to be included in refcount.\n       typedef const _CharT* pointer;\n \n     public:\n-      _Rope_const_iterator() {};\n+      _Rope_const_iterator() { };\n \n       _Rope_const_iterator(const _Rope_const_iterator& __x)\n       : _Rope_iterator_base<_CharT,_Alloc>(__x) { }\n@@ -1267,13 +1267,13 @@ protected:\n     protected:\n       typedef typename _Rope_iterator_base<_CharT, _Alloc>::_RopeRep _RopeRep;\n       rope<_CharT, _Alloc>* _M_root_rope;\n-        // root is treated as a cached version of this,\n-        // and is used to detect changes to the underlying\n-        // rope.\n-        // Root is included in the reference count.\n-        // This is necessary so that we can detect changes reliably.\n-        // Unfortunately, it requires careful bookkeeping for the\n-        // nonGC case.\n+\n+      // root is treated as a cached version of this, and is used to\n+      // detect changes to the underlying rope.\n+\n+      // Root is included in the reference count.  This is necessary\n+      // so that we can detect changes reliably.  Unfortunately, it\n+      // requires careful bookkeeping for the nonGC case.\n       _Rope_iterator(rope<_CharT, _Alloc>* __r, size_t __pos)\n       : _Rope_iterator_base<_CharT, _Alloc>(__r->_M_tree_ptr, __pos),\n         _M_root_rope(__r)\n@@ -1287,7 +1287,6 @@ protected:\n       typedef _Rope_char_ref_proxy<_CharT, _Alloc>  reference;\n       typedef _Rope_char_ref_proxy<_CharT, _Alloc>* pointer;\n \n-    public:\n       rope<_CharT, _Alloc>&\n       container()\n       { return *_M_root_rope; }\n@@ -1450,9 +1449,9 @@ protected:\n       // The one in _Base may not be visible due to template rules.\n \n       _Rope_base(_RopeRep* __t, const allocator_type&)\n-      : _M_tree_ptr(__t) {}\n+      : _M_tree_ptr(__t) { }\n \n-      _Rope_base(const allocator_type&) {}\n+      _Rope_base(const allocator_type&) { }\n \n       // The only data member of a rope:\n       _RopeRep *_M_tree_ptr;\n@@ -1554,8 +1553,8 @@ protected:\n       { _RopeRep::_S_ref(__t); }\n \n #else /* __GC */\n-      static void _S_unref(_RopeRep*) {}\n-      static void _S_ref(_RopeRep*) {}\n+      static void _S_unref(_RopeRep*) { }\n+      static void _S_ref(_RopeRep*) { }\n #endif\n \n #ifdef __GC\n@@ -1711,7 +1710,7 @@ protected:\n \t\t\t\t_CharT* __buffer);\n \n       static const unsigned long\n-      _S_min_len[::_S_max_rope_depth + 1];\n+      _S_min_len[__detail::_S_max_rope_depth + 1];\n       \n       static bool\n       _S_is_balanced(_RopeRep* __r)\n@@ -1818,9 +1817,9 @@ protected:\n \t   const allocator_type& __a = allocator_type());\n \n       rope(const allocator_type& __a = allocator_type())\n-      : _Base(0, __a) {}\n+      : _Base(0, __a) { }\n \n-        // Construct a rope from a function that can compute its members\n+      // Construct a rope from a function that can compute its members\n       rope(char_producer<_CharT> *__fn, size_t __len, bool __delete_fn,\n \t   const allocator_type& __a = allocator_type())\n       : _Base(__a)\n@@ -1866,9 +1865,8 @@ protected:\n       pop_back()\n       {\n \t_RopeRep* __old = this->_M_tree_ptr;\n-\tthis->_M_tree_ptr =\n-\t  _S_substring(this->_M_tree_ptr,\n-\t\t       0, this->_M_tree_ptr->_M_size - 1);\n+\tthis->_M_tree_ptr = _S_substring(this->_M_tree_ptr,\n+\t\t\t\t\t 0, this->_M_tree_ptr->_M_size - 1);\n \t_S_unref(__old);\n       }\n \n@@ -1961,7 +1959,7 @@ protected:\n       {\n \tif (0 == this->_M_tree_ptr)\n \t  return;\n-\tif (::_S_leaf == this->_M_tree_ptr->_M_tag &&\n+\tif (__detail::_S_leaf == this->_M_tree_ptr->_M_tag &&\n \t    ((_RopeLeaf*)this->_M_tree_ptr)->_M_data ==\n \t    this->_M_tree_ptr->_M_c_string)\n \t  {\n@@ -2013,7 +2011,7 @@ protected:\n       size_type\n       max_size() const\n       {\n-\treturn _S_min_len[int(::_S_max_rope_depth) - 1] - 1;\n+\treturn _S_min_len[int(__detail::_S_max_rope_depth) - 1] - 1;\n \t//  Guarantees that the result can be sufficirntly\n \t//  balanced.  Longer ropes will probably still work,\n \t//  but it's harder to make guarantees.\n@@ -2049,12 +2047,13 @@ protected:\n       template<class _CharT2, class _Alloc2>\n         friend rope<_CharT2, _Alloc2>\n         operator+(const rope<_CharT2, _Alloc2>& __left, _CharT2 __right);\n-        // The symmetric cases are intentionally omitted, since they're presumed\n-        // to be less common, and we don't handle them as well.\n \n-        // The following should really be templatized.\n-        // The first argument should be an input iterator or\n-        // forward iterator with value_type _CharT.\n+      // The symmetric cases are intentionally omitted, since they're\n+      // presumed to be less common, and we don't handle them as well.\n+\n+      // The following should really be templatized.  The first\n+      // argument should be an input iterator or forward iterator with\n+      // value_type _CharT.\n       rope&\n       append(const _CharT* __iter, size_t __n)\n       {\n@@ -2576,9 +2575,9 @@ protected:\n \treturn (*this)[__pos];\n       }\n       \n-      void resize(size_type __n, _CharT __c) {}\n-      void resize(size_type __n) {}\n-      void reserve(size_type __res_arg = 0) {}\n+      void resize(size_type __n, _CharT __c) { }\n+      void resize(size_type __n) { }\n+      void reserve(size_type __res_arg = 0) { }\n       \n       size_type\n       capacity() const\n@@ -2747,21 +2746,21 @@ protected:\n \t\t\t\t\t    __x._M_current_pos + __n); }\n \n   template <class _CharT, class _Alloc>\n-    inline _Rope_iterator<_CharT,_Alloc>\n+    inline _Rope_iterator<_CharT, _Alloc>\n     operator+(ptrdiff_t __n, const _Rope_iterator<_CharT, _Alloc>& __x)\n     { return _Rope_iterator<_CharT, _Alloc>(__x._M_root_rope,\n \t\t\t\t\t    __x._M_current_pos + __n); }\n \n   template <class _CharT, class _Alloc>\n-    inline rope<_CharT,_Alloc>\n+    inline rope<_CharT, _Alloc>\n     operator+(const rope<_CharT, _Alloc>& __left,\n \t      const rope<_CharT, _Alloc>& __right)\n     {\n-      return rope<_CharT, _Alloc>(rope<_CharT, _Alloc>::\n-\t\t\t\t  _S_concat(__left._M_tree_ptr,\n-\t\t\t\t\t    __right._M_tree_ptr));\n       // Inlining this should make it possible to keep __left and\n       // __right in registers.\n+      typedef rope<_CharT, _Alloc> rope_type;\n+      return rope_type(rope_type::_S_concat(__left._M_tree_ptr, \n+\t\t\t\t\t    __right._M_tree_ptr));\n     }\n \n   template <class _CharT, class _Alloc>\n@@ -2778,9 +2777,9 @@ protected:\n     operator+(const rope<_CharT, _Alloc>& __left,\n \t      const _CharT* __right)\n     {\n-      size_t __rlen = rope<_CharT,_Alloc>::_S_char_ptr_len(__right);\n-      return rope<_CharT, _Alloc>(rope<_CharT, _Alloc>::\n-\t\t\t\t  _S_concat_char_iter(__left._M_tree_ptr,\n+      typedef rope<_CharT, _Alloc> rope_type;\n+      size_t __rlen = rope_type::_S_char_ptr_len(__right);\n+      return rope_type(rope_type::_S_concat_char_iter(__left._M_tree_ptr,\n \t\t\t\t\t\t      __right, __rlen));\n     }\n \n@@ -2797,8 +2796,8 @@ protected:\n     inline rope<_CharT, _Alloc>\n     operator+(const rope<_CharT, _Alloc>& __left, _CharT __right)\n     {\n-      return rope<_CharT, _Alloc>(rope<_CharT, _Alloc>::\n-\t\t\t\t  _S_concat_char_iter(__left._M_tree_ptr,\n+      typedef rope<_CharT, _Alloc> rope_type;\n+      return rope_type(rope_type::_S_concat_char_iter(__left._M_tree_ptr,\n \t\t\t\t\t\t      &__right, 1));\n     }\n \n@@ -2887,7 +2886,6 @@ protected:\n       operator()(const crope& __str) const\n       {\n \tsize_t __size = __str.size();\n-\t\n \tif (0 == __size)\n \t  return 0;\n \treturn 13 * __str[0] + 5 * __str[__size - 1] + __size;\n@@ -2902,7 +2900,6 @@ protected:\n       operator()(const wrope& __str) const\n       {\n \tsize_t __size = __str.size();\n-\t\n \tif (0 == __size)\n \t  return 0;\n \treturn 13 * __str[0] + 5 * __str[__size - 1] + __size;"}, {"sha": "bbe6b9970bfaeb798398220d71f1dac6f4c70b10", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46db415941fcc2edcfdb7d9de4480484ce28b76f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46db415941fcc2edcfdb7d9de4480484ce28b76f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=46db415941fcc2edcfdb7d9de4480484ce28b76f", "patch": "@@ -78,13 +78,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n       switch(__leaf->_M_tag)\n \t{\n-\tcase ::_S_leaf:\n+\tcase __detail::_S_leaf:\n \t  __x._M_buf_start = ((_Rope_RopeLeaf<_CharT, _Alloc>*)__leaf)->_M_data;\n \t  __x._M_buf_ptr = __x._M_buf_start + (__pos - __leaf_pos);\n \t  __x._M_buf_end = __x._M_buf_start + __leaf->_M_size;\n \t  break;\n-\tcase ::_S_function:\n-\tcase ::_S_substringfn:\n+\tcase __detail::_S_function:\n+\tcase __detail::_S_substringfn:\n \t  {\n \t    size_t __len = _S_iterator_buf_len;\n \t    size_t __buf_start_pos = __leaf_pos;\n@@ -117,7 +117,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     _Rope_iterator_base<_CharT, _Alloc>::\n     _S_setcache(_Rope_iterator_base<_CharT, _Alloc>& __x)\n     {\n-      const _RopeRep* __path[int(::_S_max_rope_depth) + 1];\n+      const _RopeRep* __path[int(__detail::_S_max_rope_depth) + 1];\n       const _RopeRep* __curr_rope;\n       int __curr_depth = -1;  /* index into path    */\n       size_t __curr_start_pos = 0;\n@@ -147,12 +147,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  __path[__curr_depth] = __curr_rope;\n \t  switch(__curr_rope->_M_tag)\n \t    {\n-\t    case ::_S_leaf:\n-\t    case ::_S_function:\n-\t    case ::_S_substringfn:\n+\t    case __detail::_S_leaf:\n+\t    case __detail::_S_function:\n+\t    case __detail::_S_substringfn:\n \t      __x._M_leaf_pos = __curr_start_pos;\n \t      goto done;\n-\t    case ::_S_concat:\n+\t    case __detail::_S_concat:\n \t      {\n \t\t_Rope_RopeConcatenation<_CharT, _Alloc>* __c =\n \t\t  (_Rope_RopeConcatenation<_CharT, _Alloc>*)__curr_rope;\n@@ -234,7 +234,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       __current_node = __c->_M_right;\n       __x._M_path_end[++__current_index] = __current_node;\n       __dirns |= 1;\n-      while (::_S_concat == __current_node->_M_tag)\n+      while (__detail::_S_concat == __current_node->_M_tag)\n \t{\n \t  ++__current_index;\n \t  if (int(_S_path_cache_len) == __current_index)\n@@ -378,15 +378,15 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     {\n       switch(_M_tag)\n \t{\n-\tcase ::_S_leaf:\n+\tcase __detail::_S_leaf:\n \t  {\n \t    _Rope_RopeLeaf<_CharT, _Alloc>* __l\n \t      = (_Rope_RopeLeaf<_CharT, _Alloc>*)this;\n \t    __l->_Rope_RopeLeaf<_CharT, _Alloc>::~_Rope_RopeLeaf();\n \t    _L_deallocate(__l, 1);\n \t    break;\n \t  }\n-\tcase ::_S_concat:\n+\tcase __detail::_S_concat:\n \t  {\n \t    _Rope_RopeConcatenation<_CharT,_Alloc>* __c\n \t      = (_Rope_RopeConcatenation<_CharT, _Alloc>*)this;\n@@ -395,15 +395,15 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    _C_deallocate(__c, 1);\n \t    break;\n \t  }\n-\tcase ::_S_function:\n+\tcase __detail::_S_function:\n \t  {\n \t    _Rope_RopeFunction<_CharT, _Alloc>* __f\n \t      = (_Rope_RopeFunction<_CharT, _Alloc>*)this;\n \t    __f->_Rope_RopeFunction<_CharT, _Alloc>::~_Rope_RopeFunction();\n \t    _F_deallocate(__f, 1);\n \t    break;\n \t  }\n-\tcase ::_S_substringfn:\n+\tcase __detail::_S_substringfn:\n \t  {\n \t    _Rope_RopeSubstring<_CharT, _Alloc>* __ss =\n \t      (_Rope_RopeSubstring<_CharT, _Alloc>*)this;\n@@ -503,7 +503,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       \n       if (__depth > 20\n \t  && (__result->_M_size < 1000\n-\t      || __depth > size_t(::_S_max_rope_depth)))\n+\t      || __depth > size_t(__detail::_S_max_rope_depth)))\n \t{\n \t  _RopeRep* __balanced;\n \n@@ -541,14 +541,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       if (0 == __r)\n \treturn __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen,\n \t\t\t\t\t\t__r->get_allocator());\n-      if (__r->_M_tag == ::_S_leaf\n+      if (__r->_M_tag == __detail::_S_leaf\n \t  && __r->_M_size + __slen <= size_t(_S_copy_max))\n \t{\n \t  __result = _S_leaf_concat_char_iter((_RopeLeaf*)__r, __s, __slen);\n \t  return __result;\n \t}\n-      if (::_S_concat == __r->_M_tag\n-\t  && ::_S_leaf == ((_RopeConcatenation*) __r)->_M_right->_M_tag)\n+      if (__detail::_S_concat == __r->_M_tag\n+\t  && __detail::_S_leaf == ((_RopeConcatenation*) __r)->_M_right->_M_tag)\n \t{\n \t  _RopeLeaf* __right =\n \t    (_RopeLeaf* )(((_RopeConcatenation* )__r)->_M_right);\n@@ -605,17 +605,17 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  return __r;\n \t}\n       if (__orig_size + __slen <= size_t(_S_copy_max)\n-\t  && ::_S_leaf == __r->_M_tag)\n+\t  && __detail::_S_leaf == __r->_M_tag)\n \t{\n \t  __result = _S_destr_leaf_concat_char_iter((_RopeLeaf*)__r, __s, \n \t\t\t\t\t\t    __slen);\n \t  return __result;\n \t}\n-      if (::_S_concat == __r->_M_tag)\n+      if (__detail::_S_concat == __r->_M_tag)\n \t{\n \t  _RopeLeaf* __right = (_RopeLeaf*)(((_RopeConcatenation*)\n \t\t\t\t\t     __r)->_M_right);\n-\t  if (::_S_leaf == __right->_M_tag\n+\t  if (__detail::_S_leaf == __right->_M_tag\n \t      && __right->_M_size + __slen <= size_t(_S_copy_max))\n \t    {\n \t      _RopeRep* __new_right =\n@@ -665,17 +665,17 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  __left->_M_ref_nonnil();\n \t  return __left;\n \t}\n-      if (::_S_leaf == __right->_M_tag)\n+      if (__detail::_S_leaf == __right->_M_tag)\n \t{\n-\t  if (::_S_leaf == __left->_M_tag)\n+\t  if (__detail::_S_leaf == __left->_M_tag)\n \t    {\n \t      if (__right->_M_size + __left->_M_size <= size_t(_S_copy_max))\n \t\treturn _S_leaf_concat_char_iter((_RopeLeaf*)__left,\n \t\t\t\t\t\t((_RopeLeaf*)__right)->_M_data,\n \t\t\t\t\t\t__right->_M_size);\n \t    }\n-\t  else if (::_S_concat == __left->_M_tag\n-\t\t   && ::_S_leaf == ((_RopeConcatenation*)\n+\t  else if (__detail::_S_concat == __left->_M_tag\n+\t\t   && __detail::_S_leaf == ((_RopeConcatenation*)\n \t\t\t\t\t\t   __left)->_M_right->_M_tag)\n \t    {\n \t      _RopeLeaf* __leftright =\n@@ -740,7 +740,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n       switch(__base->_M_tag)\n \t{\n-\tcase ::_S_concat:\n+\tcase __detail::_S_concat:\n \t    {\n \t      _RopeConcatenation* __c = (_RopeConcatenation*)__base;\n \t      _RopeRep* __left = __c->_M_left;\n@@ -762,7 +762,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t      __result = _S_concat(__left_result, __right_result);\n \t      return __result;\n \t    }\n-\tcase ::_S_leaf:\n+\tcase __detail::_S_leaf:\n \t  {\n \t    _RopeLeaf* __l = (_RopeLeaf*)__base;\n \t    _RopeLeaf* __result;\n@@ -786,7 +786,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n #endif\n \t    return __result;\n \t  }\n-\tcase ::_S_substringfn:\n+\tcase __detail::_S_substringfn:\n \t  // Avoid introducing multiple layers of substring nodes.\n \t  {\n \t    _RopeSubstring* __old = (_RopeSubstring*)__base;\n@@ -805,7 +805,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t\n \t      } // *** else fall through: ***\n \t  }\n-\tcase ::_S_function:\n+\tcase __detail::_S_function:\n \t  {\n \t    _RopeFunction* __f = (_RopeFunction*)__base;\n \t    _CharT* __section;\n@@ -930,7 +930,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \treturn true;\n       switch(__r->_M_tag)\n \t{\n-\tcase ::_S_concat:\n+\tcase __detail::_S_concat:\n \t  {\n \t    _RopeConcatenation* __conc = (_RopeConcatenation*)__r;\n \t    _RopeRep* __left =  __conc->_M_left;\n@@ -952,13 +952,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t      }\n \t  }\n \t  return true;\n-\tcase ::_S_leaf:\n+\tcase __detail::_S_leaf:\n \t  {\n \t    _RopeLeaf* __l = (_RopeLeaf*)__r;\n \t    return __c(__l->_M_data + __begin, __end - __begin);\n \t  }\n-\tcase ::_S_function:\n-\tcase ::_S_substringfn:\n+\tcase __detail::_S_function:\n+\tcase __detail::_S_substringfn:\n \t    {\n \t      _RopeFunction* __f = (_RopeFunction*)__r;\n \t      size_t __len = __end - __begin;\n@@ -1081,21 +1081,21 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \treturn __buffer;\n       switch(__r->_M_tag)\n \t{\n-\tcase ::_S_concat:\n+\tcase __detail::_S_concat:\n \t  {\n \t    _RopeConcatenation* __c = (_RopeConcatenation*)__r;\n \t    _RopeRep* __left = __c->_M_left;\n \t    _RopeRep* __right = __c->_M_right;\n \t    _CharT* __rest = _S_flatten(__left, __buffer);\n \t    return _S_flatten(__right, __rest);\n \t  }\n-\tcase ::_S_leaf:\n+\tcase __detail::_S_leaf:\n \t  {\n \t    _RopeLeaf* __l = (_RopeLeaf*)__r;\n \t    return copy_n(__l->_M_data, __l->_M_size, __buffer).second;\n \t  }\n-\tcase ::_S_function:\n-\tcase ::_S_substringfn:\n+\tcase __detail::_S_function:\n+\tcase __detail::_S_substringfn:\n \t  // We don't yet do anything with substring nodes.\n \t  // This needs to be fixed before ropefiles will work well.\n \t  {\n@@ -1147,13 +1147,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  \n \t  switch (__r->_M_tag)\n \t    {\n-\t    case ::_S_leaf:\n+\t    case __detail::_S_leaf:\n \t      __kind = \"Leaf\";\n \t      break;\n-\t    case ::_S_function:\n+\t    case __detail::_S_function:\n \t      __kind = \"Function\";\n \t      break;\n-\t    case ::_S_substringfn:\n+\t    case __detail::_S_substringfn:\n \t      __kind = \"Function representing substring\";\n \t      break;\n \t    default:\n@@ -1186,7 +1186,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   template <class _CharT, class _Alloc>\n     const unsigned long\n     rope<_CharT, _Alloc>::\n-    _S_min_len[int(::_S_max_rope_depth) + 1] = {\n+    _S_min_len[int(__detail::_S_max_rope_depth) + 1] = {\n       /* 0 */1, /* 1 */2, /* 2 */3, /* 3 */5, /* 4 */8, /* 5 */13, /* 6 */21,\n       /* 7 */34, /* 8 */55, /* 9 */89, /* 10 */144, /* 11 */233, /* 12 */377,\n       /* 13 */610, /* 14 */987, /* 15 */1597, /* 16 */2584, /* 17 */4181,\n@@ -1205,7 +1205,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     rope<_CharT, _Alloc>::\n     _S_balance(_RopeRep* __r)\n     {\n-      _RopeRep* __forest[int(::_S_max_rope_depth) + 1];\n+      _RopeRep* __forest[int(__detail::_S_max_rope_depth) + 1];\n       _RopeRep* __result = 0;\n       int __i;\n       // Invariant:\n@@ -1214,12 +1214,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // __forest[__i]._M_depth = __i\n       // References from forest are included in refcount.\n       \n-      for (__i = 0; __i <= int(::_S_max_rope_depth); ++__i)\n+      for (__i = 0; __i <= int(__detail::_S_max_rope_depth); ++__i)\n \t__forest[__i] = 0;\n       try\n \t{\n \t  _S_add_to_forest(__r, __forest);\n-\t  for (__i = 0; __i <= int(::_S_max_rope_depth); ++__i)\n+\t  for (__i = 0; __i <= int(__detail::_S_max_rope_depth); ++__i)\n \t    if (0 != __forest[__i])\n \t      {\n #ifndef __GC\n@@ -1234,12 +1234,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t}\n       catch(...)\n \t{\n-\t  for(__i = 0; __i <= int(::_S_max_rope_depth); __i++)\n+\t  for(__i = 0; __i <= int(__detail::_S_max_rope_depth); __i++)\n \t    _S_unref(__forest[__i]);\n \t  __throw_exception_again;\n \t}\n       \n-      if (__result->_M_depth > int(::_S_max_rope_depth))\n+      if (__result->_M_depth > int(__detail::_S_max_rope_depth))\n \t__throw_length_error(__N(\"rope::_S_balance\"));\n       return(__result);\n     }\n@@ -1307,7 +1307,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t      __forest[__i]->_M_unref_nonnil();\n \t      __forest[__i] = 0;\n \t    }\n-\t  if (__i == int(::_S_max_rope_depth)\n+\t  if (__i == int(__detail::_S_max_rope_depth)\n \t      || __insertee->_M_size < _S_min_len[__i+1])\n \t    {\n \t      __forest[__i] = __insertee;\n@@ -1330,7 +1330,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t{\n \t  switch(__r->_M_tag)\n \t    {\n-\t    case ::_S_concat:\n+\t    case __detail::_S_concat:\n \t      {\n \t\t_RopeConcatenation* __c = (_RopeConcatenation*)__r;\n \t\t_RopeRep* __left = __c->_M_left;\n@@ -1345,13 +1345,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t  __r = __left;\n \t      }\n \t      break;\n-\t    case ::_S_leaf:\n+\t    case __detail::_S_leaf:\n \t      {\n \t\t_RopeLeaf* __l = (_RopeLeaf*)__r;\n \t\treturn __l->_M_data[__i];\n \t      }\n-\t    case ::_S_function:\n-\t    case ::_S_substringfn:\n+\t    case __detail::_S_function:\n+\t    case __detail::_S_substringfn:\n \t      {\n \t\t_RopeFunction* __f = (_RopeFunction*)__r;\n \t\t_CharT __result;\n@@ -1371,7 +1371,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     rope<_CharT, _Alloc>::\n     _S_fetch_ptr(_RopeRep* __r, size_type __i)\n     {\n-      _RopeRep* __clrstack[::_S_max_rope_depth];\n+      _RopeRep* __clrstack[__detail::_S_max_rope_depth];\n       size_t __csptr = 0;\n       \n       for(;;)\n@@ -1380,7 +1380,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    return 0;\n \t  switch(__r->_M_tag)\n \t    {\n-\t    case ::_S_concat:\n+\t    case __detail::_S_concat:\n \t      {\n \t\t_RopeConcatenation* __c = (_RopeConcatenation*)__r;\n \t\t_RopeRep* __left = __c->_M_left;\n@@ -1397,7 +1397,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t  __r = __left;\n \t      }\n \t      break;\n-\t    case ::_S_leaf:\n+\t    case __detail::_S_leaf:\n \t      {\n \t\t_RopeLeaf* __l = (_RopeLeaf*)__r;\n \t\tif (__l->_M_c_string != __l->_M_data && __l->_M_c_string != 0)\n@@ -1411,8 +1411,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t  }\n \t\treturn __l->_M_data + __i;\n \t      }\n-\t    case ::_S_function:\n-\t    case ::_S_substringfn:\n+\t    case __detail::_S_function:\n+\t    case __detail::_S_substringfn:\n \t      return 0;\n \t    }\n \t}\n@@ -1437,10 +1437,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \treturn -1;\n       __left_len = __left->_M_size;\n       __right_len = __right->_M_size;\n-      if (::_S_leaf == __left->_M_tag)\n+      if (__detail::_S_leaf == __left->_M_tag)\n \t{\n \t  _RopeLeaf* __l = (_RopeLeaf*) __left;\n-\t  if (::_S_leaf == __right->_M_tag)\n+\t  if (__detail::_S_leaf == __right->_M_tag)\n \t    {\n \t      _RopeLeaf* __r = (_RopeLeaf*) __right;\n \t      return lexicographical_compare_3way(__l->_M_data,\n@@ -1461,7 +1461,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t{\n \t  const_iterator __lstart(__left, 0);\n \t  const_iterator __lend(__left, __left_len);\n-\t  if (::_S_leaf == __right->_M_tag)\n+\t  if (__detail::_S_leaf == __right->_M_tag)\n \t    {\n \t      _RopeLeaf* __r = (_RopeLeaf*) __right;\n \t      return lexicographical_compare_3way(__lstart, __lend,\n@@ -1637,7 +1637,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  return _S_empty_c_str;\n \t}\n       __GC_CONST _CharT* __old_c_string = this->_M_tree_ptr->_M_c_string;\n-      if (::_S_leaf == this->_M_tree_ptr->_M_tag\n+      if (__detail::_S_leaf == this->_M_tree_ptr->_M_tag\n \t  && 0 != __old_c_string)\n \treturn(__old_c_string);\n       size_t __s = size();"}, {"sha": "3f9317f565bf926cf14f9009da6727e5c2a81f49", "filename": "libstdc++-v3/include/tr1/hashtable_policy.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46db415941fcc2edcfdb7d9de4480484ce28b76f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46db415941fcc2edcfdb7d9de4480484ce28b76f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h?ref=46db415941fcc2edcfdb7d9de4480484ce28b76f", "patch": "@@ -42,8 +42,6 @@ namespace std\n { \n _GLIBCXX_BEGIN_NAMESPACE(tr1)\n namespace __detail\n-{\n-namespace \n {\n   // Helper function: return distance(first, last) for forward\n   // iterators, or 0 for input iterators.\n@@ -168,7 +166,6 @@ namespace\n       (unsigned long)18446744073709551557ull,\n       (unsigned long)18446744073709551557ull\n     };\n-} // anonymous namespace\n \n   // Auxiliary types used for all instantiations of _Hashtable: nodes\n   // and iterators."}, {"sha": "9d1aa840e015328ead318999d6d425a5770499ad", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46db415941fcc2edcfdb7d9de4480484ce28b76f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46db415941fcc2edcfdb7d9de4480484ce28b76f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=46db415941fcc2edcfdb7d9de4480484ce28b76f", "patch": "@@ -62,7 +62,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n   /*\n    * Implementation-space details.\n    */\n-  namespace\n+  namespace __detail\n   {\n     template<typename _UIntType, int __w, \n \t     bool = __w < std::numeric_limits<_UIntType>::digits>\n@@ -85,7 +85,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n     typedef __gnu_cxx::__conditional_type<(sizeof(unsigned) == 4),\n \t\t    unsigned, unsigned long>::__type _UInt32Type;\n-  } // anonymous namespace\n \n     /*\n      * An adaptor class for converting the output of any Generator into\n@@ -158,7 +157,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t    / result_type(_M_g.max() - _M_g.min());\n       \treturn __return_value;\n       }\n-\n+  } // namespace __detail\n \n   /**\n    * Produces random numbers on a given disribution function using a un uniform\n@@ -176,15 +175,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n     public:\n       typedef _Engine                                engine_type;\n-      typedef _Adaptor<_Engine, _Dist>               engine_value_type;\n+      typedef __detail::_Adaptor<_Engine, _Dist>     engine_value_type;\n       typedef _Dist                                  distribution_type;\n       typedef typename _Dist::result_type            result_type;\n \n       // tr1:5.1.1 table 5.1 requirement\n       typedef typename __gnu_cxx::__enable_if<\n \tis_arithmetic<result_type>::value, result_type>::__type _IsValidType;\n \n-    public:\n       /**\n        * Constructs a variate generator with the uniform random number\n        * generator @p __eng for the random distribution @p __dist.\n@@ -360,7 +358,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        */\n       result_type\n       min() const\n-      { return (__mod<_UIntType, 1, 0, __m>(__c) == 0) ? 1 : 0; }\n+      { return (__detail::__mod<_UIntType, 1, 0, __m>(__c) == 0) ? 1 : 0; }\n \n       /**\n        * Gets the largest possible value in the output range.\n@@ -448,7 +446,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n         void\n         seed(_Gen& __g, false_type);\n \n-    private:\n       _UIntType _M_x;\n     };\n \n@@ -542,7 +539,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n       result_type\n       max() const\n-      { return _Shift<_UIntType, __w>::__value - 1; }\n+      { return __detail::_Shift<_UIntType, __w>::__value - 1; }\n \n       result_type\n       operator()();\n@@ -625,7 +622,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n         void\n         seed(_Gen& __g, false_type);\n \n-    private:\n       _UIntType _M_x[state_size];\n       int       _M_p;\n     };\n@@ -682,7 +678,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       static const int      long_lag  = __r;\n       static const int      short_lag = __s;\n \n-    public:\n       /**\n        * Constructs a default-initialized % subtract_with_carry random number\n        * generator.\n@@ -826,7 +821,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n         void\n         seed(_Gen& __g, false_type);\n \n-    private:\n       typedef typename __gnu_cxx::__add_unsigned<_IntType>::__type _UIntType;\n \n       _UIntType  _M_x[long_lag];\n@@ -857,7 +851,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       static const int      long_lag  = __r;\n       static const int      short_lag = __s;\n \n-    public:\n       /**\n        * Constructs a default-initialized % subtract_with_carry_01 random\n        * number generator.\n@@ -1011,12 +1004,12 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n         void\n         seed(_Gen& __g, false_type);\n \n-    private:\n       void\n       _M_initialize_npows();\n \n       static const int __n = (__w + 31) / 32;\n \n+      typedef __detail::_UInt32Type _UInt32Type;\n       _UInt32Type  _M_x[long_lag][__n];\n       _RealType    _M_npows[__n];\n       _UInt32Type  _M_carry;"}, {"sha": "ba43ac8edce48b7f31de55bcf7701340ee55a620", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46db415941fcc2edcfdb7d9de4480484ce28b76f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46db415941fcc2edcfdb7d9de4480484ce28b76f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=46db415941fcc2edcfdb7d9de4480484ce28b76f", "patch": "@@ -34,7 +34,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n   /*\n    * (Further) implementation-space details.\n    */\n-  namespace\n+  namespace __detail\n   {\n     // General case for x = (ax + c) mod m -- use Schrage's algorithm to avoid\n     // integer overflow.\n@@ -86,8 +86,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t__calc(_Tp __x)\n \t{ return __a * __x + __c; }\n       };\n-  } // anonymous namespace\n-\n+  } // namespace __detail\n \n   /**\n    * Seeds the LCR with integral value @p __x0, adjusted so that the \n@@ -98,11 +97,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     linear_congruential<_UIntType, __a, __c, __m>::\n     seed(unsigned long __x0)\n     {\n-      if ((__mod<_UIntType, 1, 0, __m>(__c) == 0)\n-\t  && (__mod<_UIntType, 1, 0, __m>(__x0) == 0))\n-\t_M_x = __mod<_UIntType, 1, 0, __m>(1);\n+      if ((__detail::__mod<_UIntType, 1, 0, __m>(__c) == 0)\n+\t  && (__detail::__mod<_UIntType, 1, 0, __m>(__x0) == 0))\n+\t_M_x = __detail::__mod<_UIntType, 1, 0, __m>(1);\n       else\n-\t_M_x = __mod<_UIntType, 1, 0, __m>(__x0);\n+\t_M_x = __detail::__mod<_UIntType, 1, 0, __m>(__x0);\n     }\n \n   /**\n@@ -115,11 +114,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       seed(_Gen& __g, false_type)\n       {\n \t_UIntType __x0 = __g();\n-\tif ((__mod<_UIntType, 1, 0, __m>(__c) == 0)\n-\t    && (__mod<_UIntType, 1, 0, __m>(__x0) == 0))\n-\t  _M_x = __mod<_UIntType, 1, 0, __m>(1);\n+\tif ((__detail::__mod<_UIntType, 1, 0, __m>(__c) == 0)\n+\t    && (__detail::__mod<_UIntType, 1, 0, __m>(__x0) == 0))\n+\t  _M_x = __detail::__mod<_UIntType, 1, 0, __m>(1);\n \telse\n-\t  _M_x = __mod<_UIntType, 1, 0, __m>(__x0);\n+\t  _M_x = __detail::__mod<_UIntType, 1, 0, __m>(__x0);\n       }\n \n   /**\n@@ -130,7 +129,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     linear_congruential<_UIntType, __a, __c, __m>::\n     operator()()\n     {\n-      _M_x = __mod<_UIntType, __a, __c, __m>(_M_x);\n+      _M_x = __detail::__mod<_UIntType, __a, __c, __m>(_M_x);\n       return _M_x;\n     }\n \n@@ -177,17 +176,17 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t     __b, __t, __c, __l>::\n     seed(unsigned long __value)\n     {\n-      _M_x[0] = __mod<_UIntType, 1, 0,\n-\t_Shift<_UIntType, __w>::__value>(__value);\n+      _M_x[0] = __detail::__mod<_UIntType, 1, 0,\n+\t__detail::_Shift<_UIntType, __w>::__value>(__value);\n \n       for (int __i = 1; __i < state_size; ++__i)\n \t{\n \t  _UIntType __x = _M_x[__i - 1];\n \t  __x ^= __x >> (__w - 2);\n \t  __x *= 1812433253ul;\n \t  __x += __i;\n-\t  _M_x[__i] = __mod<_UIntType, 1, 0,\n-\t    _Shift<_UIntType, __w>::__value>(__x);\t  \n+\t  _M_x[__i] = __detail::__mod<_UIntType, 1, 0,\n+\t    __detail::_Shift<_UIntType, __w>::__value>(__x);\t  \n \t}\n       _M_p = state_size;\n     }\n@@ -202,8 +201,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       seed(_Gen& __gen, false_type)\n       {\n \tfor (int __i = 0; __i < state_size; ++__i)\n-\t  _M_x[__i] = __mod<_UIntType, 1, 0,\n-\t    _Shift<_UIntType, __w>::__value>(__gen());\n+\t  _M_x[__i] = __detail::__mod<_UIntType, 1, 0,\n+\t    __detail::_Shift<_UIntType, __w>::__value>(__gen());\n \t_M_p = state_size;\n       }\n \n@@ -313,7 +312,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t__lcg(__value);\n \n       for (int __i = 0; __i < long_lag; ++__i)\n-\t_M_x[__i] = __mod<_UIntType, 1, 0, modulus>(__lcg());\n+\t_M_x[__i] = __detail::__mod<_UIntType, 1, 0, modulus>(__lcg());\n \n       _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n       _M_p = 0;\n@@ -333,10 +332,10 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t    _UIntType __factor = 1;\n \t    for (int __j = 0; __j < __n; ++__j)\n \t      {\n-\t\t__tmp += __mod<_UInt32Type, 1, 0, 0>(__gen()) * __factor;\n-\t\t__factor *= _Shift<_UIntType, 32>::__value;\n+\t\t__tmp += __detail::__mod<__detail::_UInt32Type, 1, 0, 0>(__gen()) * __factor;\n+\t\t__factor *= __detail::_Shift<_UIntType, 32>::__value;\n \t      }\n-\t    _M_x[__i] = __mod<_UIntType, 1, 0, modulus>(__tmp);\n+\t    _M_x[__i] = __detail::__mod<_UIntType, 1, 0, modulus>(__tmp);\n \t  }\n \t_M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n \t_M_p = 0;\n@@ -453,9 +452,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \tfor (int __i = 0; __i < long_lag; ++__i)\n \t  {\n \t    for (int __j = 0; __j < __n - 1; ++__j)\n-\t      _M_x[__i][__j] = __mod<_UInt32Type, 1, 0, 0>(__gen());\n-\t    _M_x[__i][__n - 1] = __mod<_UInt32Type, 1, 0,\n-\t      _Shift<_UInt32Type, __w % 32>::__value>(__gen());\n+\t      _M_x[__i][__j] = __detail::__mod<_UInt32Type, 1, 0, 0>(__gen());\n+\t    _M_x[__i][__n - 1] = __detail::__mod<_UInt32Type, 1, 0,\n+\t      __detail::_Shift<_UInt32Type, __w % 32>::__value>(__gen());\n \t  }\n \n \t_M_carry = 1;\n@@ -498,8 +497,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       else\n \t__new_carry = 1;\n       \n-      _M_x[_M_p][__n - 1] = __mod<_UInt32Type, 1, 0,\n-\t_Shift<_UInt32Type, __w % 32>::__value>\n+      _M_x[_M_p][__n - 1] = __detail::__mod<_UInt32Type, 1, 0,\n+\t__detail::_Shift<_UInt32Type, __w % 32>::__value>\n \t(_M_x[__ps][__n - 1] - _M_x[_M_p][__n - 1] - _M_carry);\n       _M_carry = __new_carry;\n \n@@ -623,11 +622,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n       const result_type __m1 =\n \tstd::min(result_type(_M_b1.max() - _M_b1.min()),\n-\t\t _Shift<result_type, __w - __s1>::__value - 1);\n+\t\t __detail::_Shift<result_type, __w - __s1>::__value - 1);\n \n       const result_type __m2 =\n \tstd::min(result_type(_M_b2.max() - _M_b2.min()),\n-\t\t _Shift<result_type, __w - __s2>::__value - 1);\n+\t\t __detail::_Shift<result_type, __w - __s2>::__value - 1);\n \n       // NB: In TR1 s1 is not required to be >= s2.\n       if (__s1 < __s2)"}, {"sha": "7f98b415b4ad5cba1da9d3d8de67a7c1895c3938", "filename": "libstdc++-v3/src/ext-inst.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46db415941fcc2edcfdb7d9de4480484ce28b76f/libstdc%2B%2B-v3%2Fsrc%2Fext-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46db415941fcc2edcfdb7d9de4480484ce28b76f/libstdc%2B%2B-v3%2Fsrc%2Fext-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fext-inst.cc?ref=46db415941fcc2edcfdb7d9de4480484ce28b76f", "patch": "@@ -34,13 +34,13 @@\n #include <ext/rope>\n #include <ext/stdio_filebuf.h>\n \n-namespace\n-{\n-  const int min_len = _S_max_rope_depth + 1;\n-}\n-\n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n+  namespace\n+  {\n+    const int min_len = __detail::_S_max_rope_depth + 1;\n+  }\n+\n   template\n     const unsigned long \n     rope<char, std::allocator<char> >::_S_min_len[min_len];"}]}