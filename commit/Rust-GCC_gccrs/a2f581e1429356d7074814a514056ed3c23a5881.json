{"sha": "a2f581e1429356d7074814a514056ed3c23a5881", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJmNTgxZTE0MjkzNTZkNzA3NDgxNGE1MTQwNTZlZDNjMjNhNTg4MQ==", "commit": {"author": {"name": "Yury Gribov", "email": "y.gribov@samsung.com", "date": "2014-09-01T07:47:37Z"}, "committer": {"name": "Yury Gribov", "email": "ygribov@gcc.gnu.org", "date": "2014-09-01T07:47:37Z"}, "message": "re PR sanitizer/61897 (sanitizer internal compiler error: in build2_stat, at tree.c:4160)\n\n2014-09-01  Yury Gribov  <y.gribov@samsung.com>\n\n\tPR sanitizer/61897\n\tPR sanitizer/62140\n\ngcc/\n\t* asan.c (asan_mem_ref_get_end): Handle non-ptroff_t lengths.\n\t(build_check_stmt): Likewise.\n\t(instrument_strlen_call): Likewise.\n\t(asan_expand_check_ifn): Likewise and fix types.\n\t(maybe_cast_to_ptrmode): New function.\n\ngcc/testsuite/\n\t* c-c++-common/asan/pr62140-1.c: New test.\n\t* c-c++-common/asan/pr62140-2.c: New test.\n\nFrom-SVN: r214777", "tree": {"sha": "03f4cfc0b4933a158e870ba0e3add2a325c72047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03f4cfc0b4933a158e870ba0e3add2a325c72047"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2f581e1429356d7074814a514056ed3c23a5881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f581e1429356d7074814a514056ed3c23a5881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2f581e1429356d7074814a514056ed3c23a5881", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f581e1429356d7074814a514056ed3c23a5881/comments", "author": null, "committer": null, "parents": [{"sha": "4d9a2d95593e250a6dbd11be7f271ffb743028cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d9a2d95593e250a6dbd11be7f271ffb743028cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d9a2d95593e250a6dbd11be7f271ffb743028cf"}], "stats": {"total": 107, "additions": 86, "deletions": 21}, "files": [{"sha": "ad06e2dd09b289a3e4854df41f42684965c97b20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f581e1429356d7074814a514056ed3c23a5881/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f581e1429356d7074814a514056ed3c23a5881/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2f581e1429356d7074814a514056ed3c23a5881", "patch": "@@ -1,3 +1,13 @@\n+2014-09-01  Yury Gribov  <y.gribov@samsung.com>\n+\n+\tPR sanitizer/61897\n+\tPR sanitizer/62140\n+\t* asan.c (asan_mem_ref_get_end): Handle non-ptroff_t lengths.\n+\t(build_check_stmt): Likewise.\n+\t(instrument_strlen_call): Likewise.\n+\t(asan_expand_check_ifn): Likewise and fix types.\n+\t(maybe_cast_to_ptrmode): New function.\n+\n 2014-09-01  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \n \t* config/mcore/mcore.c (try_constant_tricks): Fix declaration."}, {"sha": "4ed9344bc9e059e4ed4d85b8856181bec0176972", "filename": "gcc/asan.c", "status": "modified", "additions": 48, "deletions": 21, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f581e1429356d7074814a514056ed3c23a5881/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f581e1429356d7074814a514056ed3c23a5881/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=a2f581e1429356d7074814a514056ed3c23a5881", "patch": "@@ -318,6 +318,9 @@ asan_mem_ref_get_end (tree start, tree len)\n   if (len == NULL_TREE || integer_zerop (len))\n     return start;\n \n+  if (!ptrofftype_p (len))\n+    len = convert_to_ptrofftype (len);\n+\n   return fold_build2 (POINTER_PLUS_EXPR, TREE_TYPE (start), start, len);\n }\n \n@@ -1556,6 +1559,27 @@ maybe_create_ssa_name (location_t loc, tree base, gimple_stmt_iterator *iter,\n   return gimple_assign_lhs (g);\n }\n \n+/* LEN can already have necessary size and precision;\n+   in that case, do not create a new variable.  */\n+\n+tree\n+maybe_cast_to_ptrmode (location_t loc, tree len, gimple_stmt_iterator *iter,\n+\t\t       bool before_p)\n+{\n+  if (ptrofftype_p (len))\n+    return len;\n+  gimple g\n+    = gimple_build_assign_with_ops (NOP_EXPR,\n+\t\t\t\t    make_ssa_name (pointer_sized_int_node, NULL),\n+\t\t\t\t    len, NULL);\n+  gimple_set_location (g, loc);\n+  if (before_p)\n+    gsi_insert_before (iter, g, GSI_SAME_STMT);\n+  else\n+    gsi_insert_after (iter, g, GSI_NEW_STMT);\n+  return gimple_assign_lhs (g);\n+}\n+\n /* Instrument the memory access instruction BASE.  Insert new\n    statements before or after ITER.\n \n@@ -1601,7 +1625,10 @@ build_check_stmt (location_t loc, tree base, tree len,\n   base = maybe_create_ssa_name (loc, base, &gsi, before_p);\n \n   if (len)\n-    len = unshare_expr (len);\n+    {\n+      len = unshare_expr (len);\n+      len = maybe_cast_to_ptrmode (loc, len, iter, before_p);\n+    }\n   else\n     {\n       gcc_assert (size_in_bytes != -1);\n@@ -1807,6 +1834,7 @@ instrument_mem_region_access (tree base, tree len,\n static bool\n instrument_strlen_call (gimple_stmt_iterator *iter)\n {\n+  gimple g;\n   gimple call = gsi_stmt (*iter);\n   gcc_assert (is_gimple_call (call));\n \n@@ -1815,6 +1843,8 @@ instrument_strlen_call (gimple_stmt_iterator *iter)\n \t      && DECL_BUILT_IN_CLASS (callee) == BUILT_IN_NORMAL\n \t      && DECL_FUNCTION_CODE (callee) == BUILT_IN_STRLEN);\n \n+  location_t loc = gimple_location (call);\n+\n   tree len = gimple_call_lhs (call);\n   if (len == NULL)\n     /* Some passes might clear the return value of the strlen call;\n@@ -1823,28 +1853,28 @@ instrument_strlen_call (gimple_stmt_iterator *iter)\n     return false;\n   gcc_assert (INTEGRAL_TYPE_P (TREE_TYPE (len)));\n \n-  location_t loc = gimple_location (call);\n+  len = maybe_cast_to_ptrmode (loc, len, iter, /*before_p*/false);\n+\n   tree str_arg = gimple_call_arg (call, 0);\n   bool start_instrumented = has_mem_ref_been_instrumented (str_arg, 1);\n \n   tree cptr_type = build_pointer_type (char_type_node);\n-  gimple str_arg_ssa =\n-    gimple_build_assign_with_ops (NOP_EXPR,\n-\t\t\t\t  make_ssa_name (cptr_type, NULL),\n-\t\t\t\t  str_arg, NULL);\n-  gimple_set_location (str_arg_ssa, loc);\n-  gsi_insert_before (iter, str_arg_ssa, GSI_SAME_STMT);\n-\n-  build_check_stmt (loc, gimple_assign_lhs (str_arg_ssa), NULL_TREE, 1, iter,\n+  g = gimple_build_assign_with_ops (NOP_EXPR,\n+\t\t\t\t    make_ssa_name (cptr_type, NULL),\n+\t\t\t\t    str_arg, NULL);\n+  gimple_set_location (g, loc);\n+  gsi_insert_before (iter, g, GSI_SAME_STMT);\n+  str_arg = gimple_assign_lhs (g);\n+\n+  build_check_stmt (loc, str_arg, NULL_TREE, 1, iter,\n \t\t    /*is_non_zero_len*/true, /*before_p=*/true,\n \t\t    /*is_store=*/false, /*is_scalar_access*/true, /*align*/0,\n \t\t    start_instrumented, start_instrumented);\n \n-  gimple g =\n-    gimple_build_assign_with_ops (POINTER_PLUS_EXPR,\n-\t\t\t\t  make_ssa_name (cptr_type, NULL),\n-\t\t\t\t  gimple_assign_lhs (str_arg_ssa),\n-\t\t\t\t  len);\n+  g = gimple_build_assign_with_ops (POINTER_PLUS_EXPR,\n+\t\t\t\t    make_ssa_name (cptr_type, NULL),\n+\t\t\t\t    str_arg,\n+\t\t\t\t    len);\n   gimple_set_location (g, loc);\n   gsi_insert_after (iter, g, GSI_NEW_STMT);\n \n@@ -2473,9 +2503,6 @@ asan_expand_check_ifn (gimple_stmt_iterator *iter, bool use_calls)\n \n   HOST_WIDE_INT real_size_in_bytes = size_in_bytes == -1 ? 1 : size_in_bytes;\n \n-  tree uintptr_type\n-    = build_nonstandard_integer_type (TYPE_PRECISION (TREE_TYPE (base)), 1);\n-\n   tree shadow_ptr_type = shadow_ptr_types[real_size_in_bytes == 16 ? 1 : 0];\n   tree shadow_type = TREE_TYPE (shadow_ptr_type);\n \n@@ -2569,14 +2596,14 @@ asan_expand_check_ifn (gimple_stmt_iterator *iter, bool use_calls)\n       if (size_in_bytes == -1 && !end_instrumented)\n \t{\n \t  g = gimple_build_assign_with_ops (MINUS_EXPR,\n-\t\t\t\t\t    make_ssa_name (uintptr_type, NULL),\n+\t\t\t\t\t    make_ssa_name (pointer_sized_int_node, NULL),\n \t\t\t\t\t    len,\n-\t\t\t\t\t    build_int_cst (uintptr_type, 1));\n+\t\t\t\t\t    build_int_cst (pointer_sized_int_node, 1));\n \t  gimple_set_location (g, loc);\n \t  gsi_insert_after (&gsi, g, GSI_NEW_STMT);\n \t  tree last = gimple_assign_lhs (g);\n \t  g = gimple_build_assign_with_ops (PLUS_EXPR,\n-\t\t\t\t\t    make_ssa_name (uintptr_type, NULL),\n+\t\t\t\t\t    make_ssa_name (pointer_sized_int_node, NULL),\n \t\t\t\t\t    base_addr,\n \t\t\t\t\t    last);\n \t  gimple_set_location (g, loc);"}, {"sha": "44bedd84ecd2b3bc6ba9501608d9e71b7670cf03", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f581e1429356d7074814a514056ed3c23a5881/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f581e1429356d7074814a514056ed3c23a5881/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a2f581e1429356d7074814a514056ed3c23a5881", "patch": "@@ -1,3 +1,10 @@\n+2014-09-01  Yury Gribov  <y.gribov@samsung.com>\n+\n+\tPR sanitizer/61897\n+\tPR sanitizer/62140\n+\t* c-c++-common/asan/pr62140-1.c: New test.\n+\t* c-c++-common/asan/pr62140-2.c: New test.\n+\n 2014-08-31  Fritz Reese  <Reese-Fritz@zai.com>\n \t    Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "f0b026de2a3f51978f8837876923ca0068b5e640", "filename": "gcc/testsuite/c-c++-common/asan/pr62140-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f581e1429356d7074814a514056ed3c23a5881/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr62140-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f581e1429356d7074814a514056ed3c23a5881/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr62140-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr62140-1.c?ref=a2f581e1429356d7074814a514056ed3c23a5881", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-w -fpermissive\" } */\n+\n+int memcmp (const void *p, const void *q, int len);\n+\n+int f (int *p, int *q, int len)\n+{\n+    return memcmp (p, q, len);\n+}\n+"}, {"sha": "0bb2563abac7df1556cb0469cc8fc8a6bb8544ac", "filename": "gcc/testsuite/c-c++-common/asan/pr62140-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f581e1429356d7074814a514056ed3c23a5881/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr62140-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f581e1429356d7074814a514056ed3c23a5881/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr62140-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr62140-2.c?ref=a2f581e1429356d7074814a514056ed3c23a5881", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-w -fpermissive\" } */\n+\n+int strlen (const char *p);\n+\n+int f (char *p)\n+{\n+    int x = strlen (p);\n+    return x;\n+}\n+"}]}