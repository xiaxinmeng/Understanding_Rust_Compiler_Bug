{"sha": "4086ef7d8979cf55a8908a3a100f2c2b9377f295", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA4NmVmN2Q4OTc5Y2Y1NWE4OTA4YTNhMTAwZjJjMmI5Mzc3ZjI5NQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-06-16T18:38:28Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-16T18:38:28Z"}, "message": "* pt.c (tsubst_baselink): Fix & clarify formatting.\n\nFrom-SVN: r249273", "tree": {"sha": "732d31e367106ba57271b7f1846458734a3b8e2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/732d31e367106ba57271b7f1846458734a3b8e2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4086ef7d8979cf55a8908a3a100f2c2b9377f295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4086ef7d8979cf55a8908a3a100f2c2b9377f295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4086ef7d8979cf55a8908a3a100f2c2b9377f295", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4086ef7d8979cf55a8908a3a100f2c2b9377f295/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "56960fd6d17aa4dcec9e8e261389337374cc738f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56960fd6d17aa4dcec9e8e261389337374cc738f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56960fd6d17aa4dcec9e8e261389337374cc738f"}], "stats": {"total": 150, "additions": 74, "deletions": 76}, "files": [{"sha": "ce1e8d09c77b8029b8f5f62d0f6c4a2daa0729bd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4086ef7d8979cf55a8908a3a100f2c2b9377f295/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4086ef7d8979cf55a8908a3a100f2c2b9377f295/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4086ef7d8979cf55a8908a3a100f2c2b9377f295", "patch": "@@ -1,5 +1,7 @@\n 2017-06-16  Nathan Sidwell  <nathan@acm.org>\n \n+\t* pt.c (tsubst_baselink): Fix & clarify formatting.\n+\n \t* cp-tree.h (build_this_parm, cp_build_parm_decl,\n \tbuild_artificial_parm): Add FN parm.\n \t* decl.c (start_cleanup_fn): Adjust."}, {"sha": "3dad0fc67417708d4525d6186b9d200bbbc254b1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 72, "deletions": 76, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4086ef7d8979cf55a8908a3a100f2c2b9377f295/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4086ef7d8979cf55a8908a3a100f2c2b9377f295/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4086ef7d8979cf55a8908a3a100f2c2b9377f295", "patch": "@@ -14215,93 +14215,89 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     }\n }\n \n-/* Like tsubst_expr for a BASELINK.  OBJECT_TYPE, if non-NULL, is the\n-   type of the expression on the left-hand side of the \".\" or \"->\"\n-   operator.  */\n+/* tsubst a BASELINK.  OBJECT_TYPE, if non-NULL, is the type of the\n+   expression on the left-hand side of the \".\" or \"->\" operator.  A\n+   baselink indicates a function from a base class.  Both the\n+   BASELINK_ACCESS_BINFO and the base class referenced may indicate\n+   bases of the template class, rather than the instantiated class.\n+   In addition, lookups that were not ambiguous before may be\n+   ambiguous now.  Therefore, we perform the lookup again.  */\n \n static tree\n tsubst_baselink (tree baselink, tree object_type,\n \t\t tree args, tsubst_flags_t complain, tree in_decl)\n {\n-    tree name;\n-    tree qualifying_scope;\n-    tree fns;\n-    tree optype;\n-    tree template_args = 0;\n-    bool template_id_p = false;\n-    bool qualified = BASELINK_QUALIFIED_P (baselink);\n-\n-    /* A baselink indicates a function from a base class.  Both the\n-       BASELINK_ACCESS_BINFO and the base class referenced may\n-       indicate bases of the template class, rather than the\n-       instantiated class.  In addition, lookups that were not\n-       ambiguous before may be ambiguous now.  Therefore, we perform\n-       the lookup again.  */\n-    qualifying_scope = BINFO_TYPE (BASELINK_ACCESS_BINFO (baselink));\n-    qualifying_scope = tsubst (qualifying_scope, args,\n-\t\t\t       complain, in_decl);\n-    fns = BASELINK_FUNCTIONS (baselink);\n-    optype = tsubst (BASELINK_OPTYPE (baselink), args, complain, in_decl);\n-    if (TREE_CODE (fns) == TEMPLATE_ID_EXPR)\n-      {\n-\ttemplate_id_p = true;\n-\ttemplate_args = TREE_OPERAND (fns, 1);\n-\tfns = TREE_OPERAND (fns, 0);\n-\tif (template_args)\n-\t  template_args = tsubst_template_args (template_args, args,\n-\t\t\t\t\t\tcomplain, in_decl);\n-      }\n-    name = OVL_NAME (fns);\n-    if (IDENTIFIER_TYPENAME_P (name))\n-      name = mangle_conv_op_name_for_type (optype);\n-    baselink = lookup_fnfields (qualifying_scope, name, /*protect=*/1);\n-    if (!baselink)\n-      {\n-\tif (constructor_name_p (name, qualifying_scope))\n-\t  {\n-\t    if (complain & tf_error)\n-\t      error (\"cannot call constructor %<%T::%D%> directly\",\n-\t\t     qualifying_scope, name);\n-\t  }\n-\treturn error_mark_node;\n-      }\n+  bool qualified = BASELINK_QUALIFIED_P (baselink);\n+\n+  tree qualifying_scope = BINFO_TYPE (BASELINK_ACCESS_BINFO (baselink));\n+  qualifying_scope = tsubst (qualifying_scope, args, complain, in_decl);\n+\n+  tree optype = BASELINK_OPTYPE (baselink);\n+  optype = tsubst (optype, args, complain, in_decl);\n+\n+  tree template_args = NULL_TREE;\n+  bool template_id_p = false;\n+  tree fns = BASELINK_FUNCTIONS (baselink);\n+  if (TREE_CODE (fns) == TEMPLATE_ID_EXPR)\n+    {\n+      template_id_p = true;\n+      template_args = TREE_OPERAND (fns, 1);\n+      fns = TREE_OPERAND (fns, 0);\n+      if (template_args)\n+\ttemplate_args = tsubst_template_args (template_args, args,\n+\t\t\t\t\t      complain, in_decl);\n+    }\n \n-    /* If lookup found a single function, mark it as used at this\n-       point.  (If it lookup found multiple functions the one selected\n-       later by overload resolution will be marked as used at that\n-       point.)  */\n-    if (BASELINK_P (baselink))\n-      fns = BASELINK_FUNCTIONS (baselink);\n-    if (!template_id_p && !really_overloaded_fn (fns)\n-\t&& !mark_used (OVL_FIRST (fns), complain) && !(complain & tf_error))\n+  tree name = OVL_NAME (fns);\n+  if (IDENTIFIER_TYPENAME_P (name))\n+    name = mangle_conv_op_name_for_type (optype);\n+\n+  baselink = lookup_fnfields (qualifying_scope, name, /*protect=*/1);\n+  if (!baselink)\n+    {\n+      if ((complain & tf_error) && constructor_name_p (name, qualifying_scope))\n+\terror (\"cannot call constructor %<%T::%D%> directly\",\n+\t       qualifying_scope, name);\n       return error_mark_node;\n+    }\n+\n+  /* If lookup found a single function, mark it as used at this point.\n+     (If it lookup found multiple functions the one selected later by\n+     overload resolution will be marked as used at that point.)  */\n+  if (BASELINK_P (baselink))\n+    fns = BASELINK_FUNCTIONS (baselink);\n+  if (!template_id_p && !really_overloaded_fn (fns)\n+      && !mark_used (OVL_FIRST (fns), complain) && !(complain & tf_error))\n+    return error_mark_node;\n \n-    /* Add back the template arguments, if present.  */\n-    if (BASELINK_P (baselink) && template_id_p)\n-      BASELINK_FUNCTIONS (baselink)\n-\t= build2 (TEMPLATE_ID_EXPR,\n-\t\t  unknown_type_node,\n-\t\t  BASELINK_FUNCTIONS (baselink),\n-\t\t  template_args);\n-    /* Update the conversion operator type.  */\n-    if (BASELINK_P (baselink))\n+  if (BASELINK_P (baselink))\n+    {\n+      /* Add back the template arguments, if present.  */\n+      if (template_id_p)\n+\tBASELINK_FUNCTIONS (baselink)\n+\t  = build2 (TEMPLATE_ID_EXPR, unknown_type_node,\n+\t\t    BASELINK_FUNCTIONS (baselink), template_args);\n+\n+      /* Update the conversion operator type.  */\n       BASELINK_OPTYPE (baselink) = optype;\n+    }\n \n-    if (!object_type)\n-      object_type = current_class_type;\n+  if (!object_type)\n+    object_type = current_class_type;\n \n-    if (qualified || name == complete_dtor_identifier)\n-      {\n-\tbaselink = adjust_result_of_qualified_name_lookup (baselink,\n-\t\t\t\t\t\t\t   qualifying_scope,\n-\t\t\t\t\t\t\t   object_type);\n-\tif (!qualified)\n-\t  /* We need to call adjust_result_of_qualified_name_lookup in case the\n-\t     destructor names a base class, but we unset BASELINK_QUALIFIED_P\n-\t     so that we still get virtual function binding.  */\n-\t  BASELINK_QUALIFIED_P (baselink) = false;\n-      }\n-    return baselink;\n+  if (qualified || name == complete_dtor_identifier)\n+    {\n+      baselink = adjust_result_of_qualified_name_lookup (baselink,\n+\t\t\t\t\t\t\t qualifying_scope,\n+\t\t\t\t\t\t\t object_type);\n+      if (!qualified)\n+\t/* We need to call adjust_result_of_qualified_name_lookup in case the\n+\t   destructor names a base class, but we unset BASELINK_QUALIFIED_P\n+\t   so that we still get virtual function binding.  */\n+\tBASELINK_QUALIFIED_P (baselink) = false;\n+    }\n+\n+  return baselink;\n }\n \n /* Like tsubst_expr for a SCOPE_REF, given by QUALIFIED_ID.  DONE is"}]}