{"sha": "59045273cc648e354ba72f9188f69927f00802e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkwNDUyNzNjYzY0OGUzNTRiYTcyZjkxODhmNjk5MjdmMDA4MDJlMg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-07-09T16:45:40Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-07-09T16:47:55Z"}, "message": "Improvement to signed division of integer constant on x86_64.\n\nThis patch tweaks the way GCC handles 32-bit integer division on\nx86_64, when the numerator is constant.  Currently the function\n\nint foo (int x) {\n  return 100/x;\n}\n\ngenerates the code:\nfoo:\tmovl    $100, %eax\n        cltd\n        idivl   %edi\n        ret\n\nwhere the sign-extension instruction \"cltd\" creates a long\ndependency chain, as it depends on the \"mov\" before it, and\nis depended upon by \"idivl\" after it.\n\nWith this patch, GCC now matches both icc and LLVM and uses\nan xor instead, generating:\nfoo:\txorl    %edx, %edx\n        movl    $100, %eax\n        idivl   %edi\n        ret\n\nMicrobenchmarking confirms that this is faster on Intel\nprocessors (Kaby lake), and no worse on AMD processors (Zen2),\nwhich agrees with intuition, but oddly disagrees with the\nllvm-mca cycle count prediction on godbolt.org.\n\nThe tricky bit is that this sign-extension instruction is only\nproduced by late (postreload) splitting, and unfortunately none\nof the subsequent passes (e.g. cprop_hardreg) is able to\npropagate and simplify its constant argument.  The solution\nhere is to introduce a define_insn_and_split that allows the\nconstant numerator operand to be captured (by combine) and\nthen split into an optimal form after reload.\n\nThe above microbenchmarking also shows that eliminating the\nsign extension of negative values (using movl $-1,%edx) is also\na performance improvement, as performed by icc but not by LLVM.\nBoth the xor and movl sign-extensions are larger than cltd,\nso this transformation is prevented for -Os.\n\n2021-07-09  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\t* config/i386/i386.md (*divmodsi4_const): Optimize SImode\n\tdivmod of a constant numerator with new define_insn_and_split.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/divmod-9.c: New test case.", "tree": {"sha": "19690437120a0584f9c2f461ea3e767541334e63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19690437120a0584f9c2f461ea3e767541334e63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59045273cc648e354ba72f9188f69927f00802e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59045273cc648e354ba72f9188f69927f00802e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59045273cc648e354ba72f9188f69927f00802e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59045273cc648e354ba72f9188f69927f00802e2/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d5db79a61af150cba48612c9fbc3267262adb93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5db79a61af150cba48612c9fbc3267262adb93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d5db79a61af150cba48612c9fbc3267262adb93"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "8b809c49fe0475352326a69669a30e18a30855fb", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59045273cc648e354ba72f9188f69927f00802e2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59045273cc648e354ba72f9188f69927f00802e2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=59045273cc648e354ba72f9188f69927f00802e2", "patch": "@@ -8385,7 +8385,7 @@\n \t\t   (ashiftrt:SWIM248 (match_dup 4) (match_dup 5)))\n \t      (clobber (reg:CC FLAGS_REG))])\n    (parallel [(set (match_dup 0)\n-\t           (div:SWIM248 (match_dup 2) (match_dup 3)))\n+\t\t   (div:SWIM248 (match_dup 2) (match_dup 3)))\n \t      (set (match_dup 1)\n \t\t   (mod:SWIM248 (match_dup 2) (match_dup 3)))\n \t      (use (match_dup 1))\n@@ -8661,6 +8661,31 @@\n   [(set_attr \"type\" \"idiv\")\n    (set_attr \"mode\" \"SI\")])\n \n+;; Avoid sign-extension (using cdq) for constant numerators.\n+(define_insn_and_split \"*divmodsi4_const\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&a\")\n+\t(div:SI (match_operand:SI 2 \"const_int_operand\" \"n\")\n+\t\t(match_operand:SI 3 \"nonimmediate_operand\" \"rm\")))\n+   (set (match_operand:SI 1 \"register_operand\" \"=&d\")\n+\t(mod:SI (match_dup 2) (match_dup 3)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"!optimize_function_for_size_p (cfun)\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup 0) (match_dup 2))\n+   (set (match_dup 1) (match_dup 4))\n+   (parallel [(set (match_dup 0)\n+\t\t   (div:SI (match_dup 0) (match_dup 3)))\n+\t      (set (match_dup 1)\n+\t\t   (mod:SI (match_dup 0) (match_dup 3)))\n+\t      (use (match_dup 1))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  operands[4] = INTVAL (operands[2]) < 0 ? constm1_rtx : const0_rtx;\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_expand \"divmodqi4\"\n   [(parallel [(set (match_operand:QI 0 \"register_operand\")\n \t\t   (div:QI"}, {"sha": "1515e6970e28e047cba2022d9b2cca9ce5e39cd5", "filename": "gcc/testsuite/gcc.target/i386/divmod-9.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59045273cc648e354ba72f9188f69927f00802e2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59045273cc648e354ba72f9188f69927f00802e2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-9.c?ref=59045273cc648e354ba72f9188f69927f00802e2", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int foo (int x)\n+{\n+  return 100/x;\n+}\n+\n+int bar(int x)\n+{\n+  return -100/x;\n+}\n+/* { dg-final { scan-assembler-not \"(cltd|cdq)\" } } */\n+"}]}