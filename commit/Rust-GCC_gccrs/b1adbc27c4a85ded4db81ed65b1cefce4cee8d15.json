{"sha": "b1adbc27c4a85ded4db81ed65b1cefce4cee8d15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFhZGJjMjdjNGE4NWRlZDRkYjgxZWQ2NWIxY2VmY2U0Y2VlOGQxNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-11-27T00:11:28Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-11-28T15:01:41Z"}, "message": "compiler: avoid follow-on errors for bad types\n\nMark bad types as erroneous, to avoid generating further errors.\n\nThis required some code using array types to check for errors.\n\nFor https://golang.org/issue/19880\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/273626", "tree": {"sha": "43770b3d503fd73e08fa5647f8a892d4c4ba6b54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43770b3d503fd73e08fa5647f8a892d4c4ba6b54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1adbc27c4a85ded4db81ed65b1cefce4cee8d15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1adbc27c4a85ded4db81ed65b1cefce4cee8d15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1adbc27c4a85ded4db81ed65b1cefce4cee8d15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1adbc27c4a85ded4db81ed65b1cefce4cee8d15/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "822ea13e499db20af2080b48fc3bb530e429bb8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/822ea13e499db20af2080b48fc3bb530e429bb8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/822ea13e499db20af2080b48fc3bb530e429bb8d"}], "stats": {"total": 111, "additions": 95, "deletions": 16}, "files": [{"sha": "46959070e854a93de7aefd12b58e32c59f403a65", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1adbc27c4a85ded4db81ed65b1cefce4cee8d15/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1adbc27c4a85ded4db81ed65b1cefce4cee8d15/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=b1adbc27c4a85ded4db81ed65b1cefce4cee8d15", "patch": "@@ -1,4 +1,4 @@\n-66669bb6cae475eda6666a94f6ff4f616ffa77d7\n+16ab9b001c214cf831bc52a7bca5a2d18e9e4f3c\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "dc7399ebb3a4d5bc293e59f1bcda8a26e597ca90", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1adbc27c4a85ded4db81ed65b1cefce4cee8d15/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1adbc27c4a85ded4db81ed65b1cefce4cee8d15/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=b1adbc27c4a85ded4db81ed65b1cefce4cee8d15", "patch": "@@ -15303,9 +15303,22 @@ Array_construction_expression::do_is_static_initializer() const\n void\n Array_construction_expression::do_determine_type(const Type_context*)\n {\n+  if (this->is_error_expression())\n+    {\n+      go_assert(saw_errors());\n+      return;\n+    }\n+\n   if (this->vals() == NULL)\n     return;\n-  Type_context subcontext(this->type_->array_type()->element_type(), false);\n+  Array_type* at = this->type_->array_type();\n+  if (at == NULL || at->is_error() || at->element_type()->is_error())\n+    {\n+      go_assert(saw_errors());\n+      this->set_is_error();\n+      return;\n+    }\n+  Type_context subcontext(at->element_type(), false);\n   for (Expression_list::const_iterator pv = this->vals()->begin();\n        pv != this->vals()->end();\n        ++pv)\n@@ -15320,10 +15333,22 @@ Array_construction_expression::do_determine_type(const Type_context*)\n void\n Array_construction_expression::do_check_types(Gogo*)\n {\n+  if (this->is_error_expression())\n+    {\n+      go_assert(saw_errors());\n+      return;\n+    }\n+\n   if (this->vals() == NULL)\n     return;\n \n   Array_type* at = this->type_->array_type();\n+  if (at == NULL || at->is_error() || at->element_type()->is_error())\n+    {\n+      go_assert(saw_errors());\n+      this->set_is_error();\n+      return;\n+    }\n   int i = 0;\n   Type* element_type = at->element_type();\n   for (Expression_list::const_iterator pv = this->vals()->begin();\n@@ -15348,6 +15373,12 @@ Expression*\n Array_construction_expression::do_flatten(Gogo*, Named_object*,\n \t\t\t\t\t   Statement_inserter* inserter)\n {\n+  if (this->is_error_expression())\n+    {\n+      go_assert(saw_errors());\n+      return this;\n+    }\n+\n   if (this->vals() == NULL)\n     return this;\n \n@@ -15384,6 +15415,12 @@ Array_construction_expression::do_flatten(Gogo*, Named_object*,\n void\n Array_construction_expression::do_add_conversions()\n {\n+  if (this->is_error_expression())\n+    {\n+      go_assert(saw_errors());\n+      return;\n+    }\n+\n   if (this->vals() == NULL)\n     return;\n "}, {"sha": "286ecc16366f29bf22797943ffe4934adfecc89c", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1adbc27c4a85ded4db81ed65b1cefce4cee8d15/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1adbc27c4a85ded4db81ed65b1cefce4cee8d15/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=b1adbc27c4a85ded4db81ed65b1cefce4cee8d15", "patch": "@@ -261,6 +261,15 @@ Type::is_error_type() const\n     }\n }\n \n+// Note that this type is an error.  This is called by children when\n+// they discover an error during the verify_types pass.\n+\n+void\n+Type::set_is_error()\n+{\n+  this->classification_ = TYPE_ERROR;\n+}\n+\n // If this is a pointer type, return the type to which it points.\n // Otherwise, return NULL.\n \n@@ -5871,13 +5880,15 @@ Struct_type::do_verify()\n \t    {\n \t      go_error_at(p->location(), \"embedded type may not be a pointer\");\n \t      p->set_type(Type::make_error_type());\n+\t      this->set_is_error();\n \t    }\n \t  else if (t->points_to() != NULL\n \t\t   && t->points_to()->interface_type() != NULL)\n \t    {\n \t      go_error_at(p->location(),\n \t\t       \"embedded type may not be pointer to interface\");\n \t      p->set_type(Type::make_error_type());\n+\t      this->set_is_error();\n \t    }\n \t}\n     }\n@@ -7236,6 +7247,13 @@ Array_type::verify_length()\n   Type_context context(Type::lookup_integer_type(\"int\"), false);\n   this->length_->determine_type(&context);\n \n+  if (this->length_->is_error_expression()\n+      || this->length_->type()->is_error())\n+    {\n+      go_assert(saw_errors());\n+      return false;\n+    }\n+\n   if (!this->length_->is_constant())\n     {\n       go_error_at(this->length_->location(), \"array bound is not constant\");\n@@ -7310,7 +7328,10 @@ Array_type::do_verify()\n   if (this->element_type()->is_error_type())\n     return false;\n   if (!this->verify_length())\n-    this->length_ = Expression::make_error(this->length_->location());\n+    {\n+      this->length_ = Expression::make_error(this->length_->location());\n+      this->set_is_error();\n+    }\n   return true;\n }\n \n@@ -8125,11 +8146,20 @@ Map_type::do_verify()\n {\n   // The runtime support uses \"map[void]void\".\n   if (!this->key_type_->is_comparable() && !this->key_type_->is_void_type())\n-    go_error_at(this->location_, \"invalid map key type\");\n+    {\n+      go_error_at(this->location_, \"invalid map key type\");\n+      this->set_is_error();\n+    }\n   if (!this->key_type_->in_heap())\n-    go_error_at(this->location_, \"go:notinheap map key not allowed\");\n+    {\n+      go_error_at(this->location_, \"go:notinheap map key not allowed\");\n+      this->set_is_error();\n+    }\n   if (!this->val_type_->in_heap())\n-    go_error_at(this->location_, \"go:notinheap map value not allowed\");\n+    {\n+      go_error_at(this->location_, \"go:notinheap map value not allowed\");\n+      this->set_is_error();\n+    }\n   return true;\n }\n \n@@ -8660,8 +8690,11 @@ Channel_type::do_verify()\n   // We have no location for this error, but this is not something the\n   // ordinary user will see.\n   if (!this->element_type_->in_heap())\n-    go_error_at(Linemap::unknown_location(),\n-\t\t\"chan of go:notinheap type not allowed\");\n+    {\n+      go_error_at(Linemap::unknown_location(),\n+\t\t  \"chan of go:notinheap type not allowed\");\n+      this->set_is_error();\n+    }\n   return true;\n }\n "}, {"sha": "d0970295d755be75e1335affab89ca41af3e7691", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1adbc27c4a85ded4db81ed65b1cefce4cee8d15/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1adbc27c4a85ded4db81ed65b1cefce4cee8d15/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=b1adbc27c4a85ded4db81ed65b1cefce4cee8d15", "patch": "@@ -1141,6 +1141,10 @@ class Type\n   virtual void\n   do_export(Export*) const;\n \n+  // For children to call when they detect that they are in error.\n+  void\n+  set_is_error();\n+\n   // Return whether a method expects a pointer as the receiver.\n   static bool\n   method_expects_pointer(const Named_object*);"}, {"sha": "458fb972b20958484e89e011c97a7c179097c14c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug255.go", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1adbc27c4a85ded4db81ed65b1cefce4cee8d15/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug255.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1adbc27c4a85ded4db81ed65b1cefce4cee8d15/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug255.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug255.go?ref=b1adbc27c4a85ded4db81ed65b1cefce4cee8d15", "patch": "@@ -1,15 +1,20 @@\n // errorcheck\n \n-// Copyright 2010 The Go Authors.  All rights reserved.\n+// Copyright 2010 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n package main\n \n-var a [10]int\t// ok\n-var b [1e1]int\t// ok\n-var c [1.5]int\t// ERROR \"truncated\"\n-var d [\"abc\"]int\t// ERROR \"invalid array bound|not numeric\"\n-var e [nil]int\t// ERROR \"invalid array bound|not numeric\"\n-var f [e]int\t// ERROR \"invalid array bound|not constant\"\n-var g [1<<65]int\t// ERROR \"array bound is too large|overflows\"\n+var a [10]int      // ok\n+var b [1e1]int     // ok\n+var c [1.5]int     // ERROR \"truncated\"\n+var d [\"abc\"]int   // ERROR \"invalid array bound|not numeric\"\n+var e [nil]int     // ERROR \"use of untyped nil|invalid array bound|not numeric\"\n+var f [e]int       // ok: error already reported for e\n+var g [1 << 65]int // ERROR \"array bound is too large|overflows\"\n+var h [len(a)]int  // ok\n+\n+func ff() string\n+\n+var i [len([1]string{ff()})]int // ERROR \"non-constant array bound|not constant\""}]}