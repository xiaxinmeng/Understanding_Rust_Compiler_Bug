{"sha": "18d5f9820c77f9d84ec379117bef8ed18bcc3ba8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThkNWY5ODIwYzc3ZjlkODRlYzM3OTExN2JlZjhlZDE4YmNjM2JhOA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-03-28T17:45:57Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-03-28T17:45:57Z"}, "message": "re PR c/14734 (Error recovery problem with undeclared array bounds)\n\n\t* c-decl.c: Verify that C_SIZEOF_STRUCT_LANG_IDENTIFIER is correct.\n\t(struct c_binding, struct c_scope): Add chain_next\n\tattributes to GTY markers.\n\t(struct lang_identifier, struct lang_tree_node): Define\n\there...\n\t* c-tree.h: ... not here.  No longer need to declare struct\n\tc_binding either.  Do define C_SIZEOF_STRUCT_LANG_IDENTIFIER.\n\t* c-lang.c, objc/objc-lang.c: Set LANG_HOOKS_IDENTIFIER_SIZE\n\tto C_SIZEOF_STRUCT_LANG_IDENTIFIER.\n\n\tPR 14734, 11944\n\t* c-decl.c (get_parm_info): If error_mark_node is encountered\n\tin the bindings chain, unbind and discard it; don't abort.\n\t* testsuite/gcc.dg/noncompile/undeclared-2.c: New test.\n\nFrom-SVN: r80042", "tree": {"sha": "e95abdb07c80f3f34dfb27ad9081ce47469bc52a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e95abdb07c80f3f34dfb27ad9081ce47469bc52a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8/comments", "author": null, "committer": null, "parents": [{"sha": "f26e5597f0272d7e4e20fe2c3728a064276f6ab0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26e5597f0272d7e4e20fe2c3728a064276f6ab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f26e5597f0272d7e4e20fe2c3728a064276f6ab0"}], "stats": {"total": 120, "additions": 77, "deletions": 43}, "files": [{"sha": "ea7988319bf73adcaede2a6449ea0752f35341e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18d5f9820c77f9d84ec379117bef8ed18bcc3ba8", "patch": "@@ -1,8 +1,24 @@\n+2004-03-28  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-decl.c: Verify that C_SIZEOF_STRUCT_LANG_IDENTIFIER is correct.\n+\t(struct c_binding, struct c_scope): Add chain_next\n+\tattributes to GTY markers.\n+\t(struct lang_identifier, struct lang_tree_node): Define\n+\there...\n+\t* c-tree.h: ... not here.  No longer need to declare struct\n+\tc_binding either.  Do define C_SIZEOF_STRUCT_LANG_IDENTIFIER.\n+\t* c-lang.c, objc/objc-lang.c: Set LANG_HOOKS_IDENTIFIER_SIZE\n+\tto C_SIZEOF_STRUCT_LANG_IDENTIFIER.\n+\n+\tPR 14734, 11944\n+\t* c-decl.c (get_parm_info): If error_mark_node is encountered\n+\tin the bindings chain, unbind and discard it; don't abort.\n+\n 2004-03-28  Olga Golovonevsky <olga@il.ibm.com>\n-            Dorit Naishlos <dorit@il.ibm.com>\n+\t    Dorit Naishlos <dorit@il.ibm.com>\n \n-        * config/rs6000/altivec.md: (andvv16qi3, andv8hi3, one_cmplv16qi2,\n-        one_cmplv8hi2, one_cmplv4si2, iorv16qi3, iorv8hi3,): New modelling.\n+\t* config/rs6000/altivec.md: (andvv16qi3, andv8hi3, one_cmplv16qi2,\n+\tone_cmplv8hi2, one_cmplv4si2, iorv16qi3, iorv8hi3,): New modelling.\n \n 2004-03-28  Stephane Carrez  <stcarrez@nerim.fr>\n \n@@ -63,10 +79,10 @@\n \t  with TYPE_ORIG_SIZE_TYPE.\n \n 2004-03-25  Aldy Hernandez  <aldyh@redhat.com>\n- \n-        PR 14219\n-        * c-typeck.c (build_binary_op): Do not allow comparisons of\n-        vectors.\n+\n+\tPR 14219\n+\t* c-typeck.c (build_binary_op): Do not allow comparisons of\n+\tvectors.\n \n 2004-03-26  James A. Morrison  <ja2morri@uwaterloo.ca>\n \n@@ -90,8 +106,8 @@\n 2004-03-25  Richard Henderson  <rth@redhat.com>\n \n \tPR 11527\n-        * c-typeck.c (pop_init_level): Emit pending init elements earlier\n-        rather than later.\n+\t* c-typeck.c (pop_init_level): Emit pending init elements earlier\n+\trather than later.\n \n 2004-03-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n "}, {"sha": "05bc8beb59ad6b68676effbfd2010a779a337b2d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=18d5f9820c77f9d84ec379117bef8ed18bcc3ba8", "patch": "@@ -160,7 +160,7 @@ bool c_override_global_bindings_to_false;\n    suppress further errors about that identifier in the current\n    function.  */\n \n-struct c_binding GTY(())\n+struct c_binding GTY((chain_next (\"%h.prev\")))\n {\n   tree decl;\t\t\t/* the decl bound */\n   tree id;\t\t\t/* the identifier it's bound to */\n@@ -184,6 +184,34 @@ struct c_binding GTY(())\n #define I_LABEL_DECL(node) \\\n  (I_LABEL_BINDING(node) ? I_LABEL_BINDING(node)->decl : 0)\n \n+/* Each C symbol points to three linked lists of c_binding structures.\n+   These describe the values of the identifier in the three different\n+   namespaces defined by the language.  */\n+\n+struct lang_identifier GTY(())\n+{\n+  struct c_common_identifier common_id;\n+  struct c_binding *symbol_binding; /* vars, funcs, constants, typedefs */\n+  struct c_binding *tag_binding;    /* struct/union/enum tags */\n+  struct c_binding *label_binding;  /* labels */\n+};\n+\n+/* Validate c-lang.c's assumptions.  */\n+extern char C_SIZEOF_STRUCT_LANG_IDENTIFIER_isnt_accurate\n+[(sizeof(struct lang_identifier) == C_SIZEOF_STRUCT_LANG_IDENTIFIER) ? 1 : -1];\n+\n+/* The resulting tree type.  */\n+\n+union lang_tree_node\n+  GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n+       chain_next (\"TREE_CODE (&%h.generic) == INTEGER_TYPE ? (union lang_tree_node *)TYPE_NEXT_VARIANT (&%h.generic) : (union lang_tree_node *)TREE_CHAIN (&%h.generic)\")))\n+{\n+  union tree_node GTY ((tag (\"0\"),\n+\t\t\tdesc (\"tree_node_structure (&%h)\")))\n+    generic;\n+  struct lang_identifier GTY ((tag (\"1\"))) identifier;\n+};\n+\n /* Each c_scope structure describes the complete contents of one\n    scope.  Four scopes are distinguished specially: the innermost or\n    current scope, the innermost function scope, the file scope (always\n@@ -229,7 +257,7 @@ struct c_binding GTY(())\n    pop_scope relies on this.  */\n \n \n-struct c_scope GTY(())\n+struct c_scope GTY((chain_next (\"%h.outer\")))\n {\n   /* The scope containing this one.  */\n   struct c_scope *outer;\n@@ -4811,23 +4839,26 @@ get_parm_info (bool ellipsis)\n \t     and TYPE_DECLs appear here when we have an embedded struct\n \t     or union.  No warnings for this - we already warned about the\n \t     type itself.  */\n+\t  TREE_CHAIN (decl) = others;\n+\t  others = decl;\n+\t  /* fall through */\n+\n+\tcase ERROR_MARK:\n+\t  /* error_mark_node appears here when we have an undeclared\n+\t     variable.  Just throw it away.  */\n \t  if (b->id)\n \t    {\n #ifdef ENABLE_CHECKING\n \t      if (I_SYMBOL_BINDING (b->id) != b) abort ();\n #endif\n \t      I_SYMBOL_BINDING (b->id) = b->shadowed;\n \t    }\n-\n-\t  TREE_CHAIN (decl) = others;\n-\t  others = decl;\n \t  break;\n \n \t  /* Other things that might be encountered.  */\n \tcase LABEL_DECL:\n \tcase FUNCTION_DECL:\n \tcase VAR_DECL:\n-\tcase ERROR_MARK:\n \tdefault:\n \t  abort ();\n \t}"}, {"sha": "93dc4052916c78fd47effb058762abfa435804dc", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=18d5f9820c77f9d84ec379117bef8ed18bcc3ba8", "patch": "@@ -41,6 +41,8 @@ enum c_language_kind c_language = clk_c;\n \n #undef LANG_HOOKS_NAME\n #define LANG_HOOKS_NAME \"GNU C\"\n+#undef LANG_HOOKS_IDENTIFIER_SIZE\n+#define LANG_HOOKS_IDENTIFIER_SIZE C_SIZEOF_STRUCT_LANG_IDENTIFIER\n #undef LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT c_objc_common_init\n #undef LANG_HOOKS_FINISH"}, {"sha": "01f86e999f248b37dccff4b7384e01241f7da957", "filename": "gcc/c-tree.h", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=18d5f9820c77f9d84ec379117bef8ed18bcc3ba8", "patch": "@@ -24,34 +24,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #include \"c-common.h\"\n \n-/* Each C symbol points to three linked lists of c_binding structures.\n-   These describe the values of the identifier in the three different\n-   namespaces defined by the language.  The contents of these lists\n-   are private to c-decl.c.  */\n-\n-struct c_binding;\n-\n-/* Language-dependent contents of an identifier.  */\n-\n-struct lang_identifier GTY(())\n-{\n-  struct c_common_identifier common_id;\n-  struct c_binding *symbol_binding; /* vars, funcs, constants, typedefs */\n-  struct c_binding *tag_binding;    /* struct/union/enum tags */\n-  struct c_binding *label_binding;  /* labels */\n-};\n-\n-/* The resulting tree type.  */\n-\n-union lang_tree_node\n-  GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n-       chain_next (\"TREE_CODE (&%h.generic) == INTEGER_TYPE ? (union lang_tree_node *)TYPE_NEXT_VARIANT (&%h.generic) : (union lang_tree_node *)TREE_CHAIN (&%h.generic)\")))\n-{\n-  union tree_node GTY ((tag (\"0\"),\n-\t\t\tdesc (\"tree_node_structure (&%h)\")))\n-    generic;\n-  struct lang_identifier GTY ((tag (\"1\"))) identifier;\n-};\n+/* struct lang_identifier is private to c-decl.c, but langhooks.c needs to\n+   know how big it is.  This is sanity-checked in c-decl.c.  */\n+#define C_SIZEOF_STRUCT_LANG_IDENTIFIER \\\n+  (sizeof (struct c_common_identifier) + 3 * sizeof (void *))\n \n /* Language-specific declaration information.  */\n "}, {"sha": "2853ded31c8999738971f4959e360e3173132e72", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=18d5f9820c77f9d84ec379117bef8ed18bcc3ba8", "patch": "@@ -35,6 +35,8 @@ enum c_language_kind c_language = clk_objc;\n \n #undef LANG_HOOKS_NAME\n #define LANG_HOOKS_NAME \"GNU Objective-C\"\n+#undef LANG_HOOKS_IDENTIFIER_SIZE\n+#define LANG_HOOKS_IDENTIFIER_SIZE C_SIZEOF_STRUCT_LANG_IDENTIFIER\n #undef LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT objc_init\n #undef LANG_HOOKS_FINISH"}, {"sha": "96a962568fe2644bba9331bdf7f53a53f6ff4d8d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18d5f9820c77f9d84ec379117bef8ed18bcc3ba8", "patch": "@@ -1,3 +1,7 @@\n+2004-03-28  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* gcc.dg/noncompile/undeclared-2.c: New test.\n+\n 2004-03-28  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.dg/940409-1.c: Remove XFAIL."}, {"sha": "36cd0eaf175abce63ca9f37d955c11f32793edb3", "filename": "gcc/testsuite/gcc.dg/noncompile/undeclared-2.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fundeclared-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5f9820c77f9d84ec379117bef8ed18bcc3ba8/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fundeclared-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fundeclared-2.c?ref=18d5f9820c77f9d84ec379117bef8ed18bcc3ba8", "patch": "@@ -0,0 +1,3 @@\n+/* Invalid, but should not ICE.  PRs 11944, 14734.  */\n+\n+void foo(const int[i]);  /* { dg-error \"undeclared|for each\" } */"}]}