{"sha": "31c85c78b1a99acc017177f21ac497ec243a8028", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFjODVjNzhiMWE5OWFjYzAxNzE3N2YyMWFjNDk3ZWMyNDNhODAyOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-17T22:10:33Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-17T22:10:33Z"}, "message": "(fold_rtx, case SUBREG): If paradoxical SUBREG of a constant, return\nthe constant.\n\nFrom-SVN: r5346", "tree": {"sha": "9bdc7d502577b727def0ab39f3ffa85025869075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bdc7d502577b727def0ab39f3ffa85025869075"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31c85c78b1a99acc017177f21ac497ec243a8028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31c85c78b1a99acc017177f21ac497ec243a8028", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31c85c78b1a99acc017177f21ac497ec243a8028", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31c85c78b1a99acc017177f21ac497ec243a8028/comments", "author": null, "committer": null, "parents": [{"sha": "c1719013cf972ac1af92e6e23c1d3017d047a43a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1719013cf972ac1af92e6e23c1d3017d047a43a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1719013cf972ac1af92e6e23c1d3017d047a43a"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "dd98146ffa8c469b1367757b565aae920551277b", "filename": "gcc/cse.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31c85c78b1a99acc017177f21ac497ec243a8028/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31c85c78b1a99acc017177f21ac497ec243a8028/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=31c85c78b1a99acc017177f21ac497ec243a8028", "patch": "@@ -4582,7 +4582,9 @@ fold_rtx (x, insn)\n \t extra bits would have.  However, if the operand is equivalent\n \t to a SUBREG whose operand is the same as our mode, and all the\n \t modes are within a word, we can just use the inner operand\n-\t because these SUBREGs just say how to treat the register.  */\n+\t because these SUBREGs just say how to treat the register.\n+\n+\t Similarly if we find an integer constant.  */\n \n       if (GET_MODE_SIZE (mode) > GET_MODE_SIZE (GET_MODE (SUBREG_REG (x))))\n \t{\n@@ -4593,9 +4595,13 @@ fold_rtx (x, insn)\n \t      && GET_MODE_SIZE (imode) <= UNITS_PER_WORD\n \t      && (elt = lookup (SUBREG_REG (x), HASH (SUBREG_REG (x), imode),\n \t\t\t\timode)) != 0)\n-\t    {\n-\t      for (elt = elt->first_same_value;\n-\t\t   elt; elt = elt->next_same_value)\n+\t    for (elt = elt->first_same_value;\n+\t\t elt; elt = elt->next_same_value)\n+\t      {\n+\t\tif (CONSTANT_P (elt->exp)\n+\t\t    && GET_MODE (elt->exp) == VOIDmode)\n+\t\t  return elt->exp;\n+\n \t\tif (GET_CODE (elt->exp) == SUBREG\n \t\t    && GET_MODE (SUBREG_REG (elt->exp)) == mode\n \t\t    && exp_equiv_p (elt->exp, elt->exp, 1, 0))"}]}