{"sha": "0f0b2faf47c360bc60e429fb7b558c25aabc99eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYwYjJmYWY0N2MzNjBiYzYwZTQyOWZiN2I1NThjMjVhYWJjOTllYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-02-04T08:37:50Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-02-04T08:37:50Z"}, "message": "typeinfo (__GXX_MERGED_TYPEINFO_NAMES): New macro.\n\n\t* libsupc++/typeinfo (__GXX_MERGED_TYPEINFO_NAMES): New macro.\n\t* libsupc++/tinfo.cc (std::typeinfo::operator==): Use strcmp\n\twhenever !__GXX_MERGED_TYPEINFO_NAMES.\n\t* libsupc++/tinfo2.cc (std::typeinfo::before): Likewise.\n\nFrom-SVN: r39438", "tree": {"sha": "7af25095acaf0a18ebaa6c173b4065e24a93b9a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7af25095acaf0a18ebaa6c173b4065e24a93b9a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f0b2faf47c360bc60e429fb7b558c25aabc99eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f0b2faf47c360bc60e429fb7b558c25aabc99eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f0b2faf47c360bc60e429fb7b558c25aabc99eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f0b2faf47c360bc60e429fb7b558c25aabc99eb/comments", "author": null, "committer": null, "parents": [{"sha": "97458258b8e196f88ba17d4ed985aece3ec5675c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97458258b8e196f88ba17d4ed985aece3ec5675c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97458258b8e196f88ba17d4ed985aece3ec5675c"}], "stats": {"total": 68, "additions": 49, "deletions": 19}, "files": [{"sha": "f0c035acfc31ceb9d9ef996fd4813021bd12ccc5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f0b2faf47c360bc60e429fb7b558c25aabc99eb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f0b2faf47c360bc60e429fb7b558c25aabc99eb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0f0b2faf47c360bc60e429fb7b558c25aabc99eb", "patch": "@@ -1,3 +1,10 @@\n+2001-02-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* libsupc++/typeinfo (__GXX_MERGED_TYPEINFO_NAMES): New macro.\n+\t* libsupc++/tinfo.cc (std::typeinfo::operator==): Use strcmp\n+\twhenever !__GXX_MERGED_TYPEINFO_NAMES.\n+\t* libsupc++/tinfo2.cc (std::typeinfo::before): Likewise.\n+\n 2001-02-03  Alexandre Oliva  <aoliva@redhat.com>\n             Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n "}, {"sha": "fefc815e759bbe70d6ab81325a0c53f0efb2e063", "filename": "libstdc++-v3/libsupc++/tinfo.cc", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f0b2faf47c360bc60e429fb7b558c25aabc99eb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f0b2faf47c360bc60e429fb7b558c25aabc99eb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc?ref=0f0b2faf47c360bc60e429fb7b558c25aabc99eb", "patch": "@@ -41,6 +41,17 @@ std::type_info::\n ~type_info ()\n { }\n \n+#if !__GXX_MERGED_TYPEINFO_NAMES\n+\n+// We can't rely on common symbols being shared between shared objects.\n+bool std::type_info::\n+operator== (const std::type_info& arg) const\n+{\n+  return (&arg == this) || (__builtin_strcmp (name (), arg.name ()) == 0);\n+}\n+\n+#endif\n+\n #if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n // original (old) abi\n \n@@ -64,13 +75,6 @@ convert_to_base (void *addr, bool is_virtual, myint32 offset)\n \n }\n \n-// We can't rely on common symbols being shared between shared objects.\n-bool std::type_info::\n-operator== (const std::type_info& arg) const\n-{\n-  return (&arg == this) || (__builtin_strcmp (name (), arg.name ()) == 0);\n-}\n-\n extern \"C\" void\n __rtti_class (void *addr, const char *name,\n \t      const __class_type_info::base_info *bl, std::size_t bn)"}, {"sha": "53e0fdf2784ffc48b7045df1779ea6e4fe3e2b35", "filename": "libstdc++-v3/libsupc++/tinfo2.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f0b2faf47c360bc60e429fb7b558c25aabc99eb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f0b2faf47c360bc60e429fb7b558c25aabc99eb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc?ref=0f0b2faf47c360bc60e429fb7b558c25aabc99eb", "patch": "@@ -1,5 +1,5 @@\n // Methods for type_info for -*- C++ -*- Run Time Type Identification.\n-// Copyright (C) 1994, 1996, 1997, 1998, 1999, 2000 Free Software Foundation\n+// Copyright (C) 1994, 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation\n \n // This file is part of GNU CC.\n \n@@ -36,13 +36,18 @@ extern \"C\" void abort ();\n \n using std::type_info;\n \n-#if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n+#if !__GXX_MERGED_TYPEINFO_NAMES\n+\n bool\n type_info::before (const type_info &arg) const\n {\n   return __builtin_strcmp (name (), arg.name ()) < 0;\n }\n \n+#endif\n+\n+#if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n+\n // type info for pointer type.\n \n struct __pointer_type_info : public type_info {"}, {"sha": "949c6d81e2fdf25d41210aac6747a1d4df22e04b", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f0b2faf47c360bc60e429fb7b558c25aabc99eb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f0b2faf47c360bc60e429fb7b558c25aabc99eb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=0f0b2faf47c360bc60e429fb7b558c25aabc99eb", "patch": "@@ -48,6 +48,19 @@ namespace __cxxabiv1\n } // namespace __cxxabiv1\n #endif\n \n+\n+#if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n+  // In the old ABI, typeinfo name strings were not merged.\n+  #define __GXX_MERGED_TYPEINFO_NAMES 0\n+#elif !__GXX_WEAK__\n+  // If weak symbols are not supported, they are still not merged.\n+  #define __GXX_MERGED_TYPEINFO_NAMES 0\n+#else\n+  // In the new ABI, on platforms that support weak symbols, they are\n+  // merged.\n+  #define __GXX_MERGED_TYPEINFO_NAMES 1\n+#endif\n+\n namespace std \n {\n   class type_info \n@@ -73,28 +86,29 @@ namespace std\n   public:\n     // the public interface\n #if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n-    // In old abi, there can be multiple instances of a type_info\n-    // object for one type. Uniqueness must use the _name value, not\n-    // object address.\n-    bool before(const type_info& arg) const;\n     const char* name() const\n     { return __name; }\n-    bool operator==(const type_info& __arg) const;\n-    bool operator!=(const type_info& __arg) const\n-    { return !operator==(__arg); }\n+#else\n+    const char* name() const\n+    { return __name; }\n+#endif\n \n+#if !__GXX_MERGED_TYPEINFO_NAMES\n+    bool before(const type_info& arg) const;\n+    // In old abi, or when weak symbols are not supported, there can\n+    // be multiple instances of a type_info object for one\n+    // type. Uniqueness must use the _name value, not object address.\n+    bool operator==(const type_info& __arg) const;\n #else\n     // In new abi we can rely on type_info's NTBS being unique,\n     // and therefore address comparisons are sufficient.\n     bool before(const type_info& __arg) const\n     { return __name < __arg.__name; }\n-    const char* name() const\n-    { return __name; }\n     bool operator==(const type_info& __arg) const\n     { return __name == __arg.__name; }\n+#endif\n     bool operator!=(const type_info& __arg) const\n     { return !operator==(__arg); }\n-#endif\n     \n     // the internal interface\n #if defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100"}]}