{"sha": "d58008d23d073916471ca95587b5fcd090675243", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU4MDA4ZDIzZDA3MzkxNjQ3MWNhOTU1ODdiNWZjZDA5MDY3NTI0Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-09-26T09:17:31Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-09-26T09:17:31Z"}, "message": "[Ada] Preparation for new description of interface thunks\n\nThis adjusts and exposes a couple of functions of the front-end used for the\ngeneration of interface thunks so as to make them callable from gigi.  This\nalso propagates the debug info setting from the targets to the thunks so as\nto make stepping into primitives work better in the debugger.\n\n2018-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_disp.adb (Expand_Interface_Conversion): Use Present test.\n\t(Expand_Interface_Thunk): Propagate debug info setting from\n\ttarget.\n\t* exp_util.ads (Find_Interface_Tag): Adjust comment.\n\t* exp_util.adb (Find_Interface_Tag): Remove assertions of\n\tsuccess.\n\t* sem_util.adb (Is_Variable_Size_Record): Only look at\n\tcomponents and robustify the implementation.\n\t* fe.h (Find_Interface_Tag): Declare.\n\t(Is_Variable_Size_Record): Likewise.\n\nFrom-SVN: r264614", "tree": {"sha": "98693b59c277e460cb5d6139ddef18edb966839f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98693b59c277e460cb5d6139ddef18edb966839f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d58008d23d073916471ca95587b5fcd090675243", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58008d23d073916471ca95587b5fcd090675243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d58008d23d073916471ca95587b5fcd090675243", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58008d23d073916471ca95587b5fcd090675243/comments", "author": null, "committer": null, "parents": [{"sha": "52ba224d888aead9a9f00ce04b14200f2f4ef8a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ba224d888aead9a9f00ce04b14200f2f4ef8a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52ba224d888aead9a9f00ce04b14200f2f4ef8a5"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "08087d97fc1f708b55fa2415f5e5fc4010172032", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58008d23d073916471ca95587b5fcd090675243/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58008d23d073916471ca95587b5fcd090675243/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d58008d23d073916471ca95587b5fcd090675243", "patch": "@@ -1,3 +1,16 @@\n+2018-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_disp.adb (Expand_Interface_Conversion): Use Present test.\n+\t(Expand_Interface_Thunk): Propagate debug info setting from\n+\ttarget.\n+\t* exp_util.ads (Find_Interface_Tag): Adjust comment.\n+\t* exp_util.adb (Find_Interface_Tag): Remove assertions of\n+\tsuccess.\n+\t* sem_util.adb (Is_Variable_Size_Record): Only look at\n+\tcomponents and robustify the implementation.\n+\t* fe.h (Find_Interface_Tag): Declare.\n+\t(Is_Variable_Size_Record): Likewise.\n+\n 2018-09-26  Thomas Quinot  <quinot@adacore.com>\n \n \t* exp_util.adb (Make_CW_Equivalent_Type): Propagate bit order"}, {"sha": "cf7ce4986a8148e426a931b5dd242ba5885568f2", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58008d23d073916471ca95587b5fcd090675243/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58008d23d073916471ca95587b5fcd090675243/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=d58008d23d073916471ca95587b5fcd090675243", "patch": "@@ -1454,7 +1454,7 @@ package body Exp_Disp is\n       end if;\n \n       Iface_Tag := Find_Interface_Tag (Operand_Typ, Iface_Typ);\n-      pragma Assert (Iface_Tag /= Empty);\n+      pragma Assert (Present (Iface_Tag));\n \n       --  Keep separate access types to interfaces because one internal\n       --  function is used to handle the null value (see following comments)\n@@ -2046,6 +2046,7 @@ package body Exp_Disp is\n       Set_Ekind (Thunk_Id, Ekind (Prim));\n       Set_Is_Thunk (Thunk_Id);\n       Set_Convention (Thunk_Id, Convention (Prim));\n+      Set_Needs_Debug_Info (Thunk_Id, Needs_Debug_Info (Target));\n       Set_Thunk_Entity (Thunk_Id, Target);\n \n       --  Procedure case"}, {"sha": "183797cd9f9edd8875a1ea4de7fd60162caaeeb4", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58008d23d073916471ca95587b5fcd090675243/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58008d23d073916471ca95587b5fcd090675243/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=d58008d23d073916471ca95587b5fcd090675243", "patch": "@@ -5529,7 +5529,6 @@ package body Exp_Util is\n          then\n             --  Skip the tag associated with the primary table\n \n-            pragma Assert (Etype (First_Tag_Component (Typ)) = RTE (RE_Tag));\n             AI_Tag := Next_Tag_Component (First_Tag_Component (Typ));\n             pragma Assert (Present (AI_Tag));\n \n@@ -5590,14 +5589,12 @@ package body Exp_Util is\n       --  primary dispatch table.\n \n       if Is_Ancestor (Iface, Typ, Use_Full_View => True) then\n-         pragma Assert (Etype (First_Tag_Component (Typ)) = RTE (RE_Tag));\n          return First_Tag_Component (Typ);\n \n       --  Otherwise we need to search for its associated tag component\n \n       else\n          Find_Tag (Typ);\n-         pragma Assert (Found);\n          return AI_Tag;\n       end if;\n    end Find_Interface_Tag;"}, {"sha": "b5e2a7bbe146f526d0fda244c9801a3437c6312f", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58008d23d073916471ca95587b5fcd090675243/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58008d23d073916471ca95587b5fcd090675243/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=d58008d23d073916471ca95587b5fcd090675243", "patch": "@@ -585,8 +585,9 @@ package Exp_Util is\n    function Find_Interface_Tag\n      (T     : Entity_Id;\n       Iface : Entity_Id) return Entity_Id;\n-   --  Ada 2005 (AI-251): Given a type T implementing the interface Iface,\n-   --  return the record component containing the tag of Iface.\n+   --  Ada 2005 (AI-251): Given a type T and an interface Iface, return the\n+   --  record component containing the tag of Iface if T implements Iface or\n+   --  Empty if it does not.\n \n    function Find_Prim_Op (T : Entity_Id; Name : Name_Id) return Entity_Id;\n    --  Find the first primitive operation of a tagged type T with name Name."}, {"sha": "7c3204467dc3aa66576ece617bdede436f87ecff", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58008d23d073916471ca95587b5fcd090675243/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58008d23d073916471ca95587b5fcd090675243/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=d58008d23d073916471ca95587b5fcd090675243", "patch": "@@ -159,8 +159,10 @@ extern void Get_External_Name\t(Entity_Id, Boolean, String_Pointer);\n /* exp_util: */\n \n #define Is_Fully_Repped_Tagged_Type exp_util__is_fully_repped_tagged_type\n+#define Find_Interface_Tag exp_util__find_interface_tag\n \n extern Boolean Is_Fully_Repped_Tagged_Type      (Entity_Id);\n+extern Entity_Id Find_Interface_Tag\t\t(Entity_Id, Entity_Id);\n \n /* lib: */\n \n@@ -269,12 +271,14 @@ extern Boolean Is_OK_Static_Subtype\t(Entity_Id);\n #define Defining_Entity\t\t\tsem_util__defining_entity\n #define First_Actual\t\t\tsem_util__first_actual\n #define Next_Actual\t\t\tsem_util__next_actual\n+#define Is_Variable_Size_Record \tsem_util__is_variable_size_record\n #define Requires_Transient_Scope\tsem_util__requires_transient_scope\n \n extern Entity_Id Defining_Entity\t(Node_Id);\n extern Node_Id First_Actual\t\t(Node_Id);\n extern Node_Id Next_Actual\t\t(Node_Id);\n-extern Boolean Requires_Transient_Scope (Entity_Id);\n+extern Boolean Is_Variable_Size_Record \t(Entity_Id Id);\n+extern Boolean Requires_Transient_Scope\t(Entity_Id);\n \n /* sinfo: */\n "}, {"sha": "7235c96a8d781e9141aa1f65d1ece18531366f62", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58008d23d073916471ca95587b5fcd090675243/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58008d23d073916471ca95587b5fcd090675243/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=d58008d23d073916471ca95587b5fcd090675243", "patch": "@@ -17714,9 +17714,9 @@ package body Sem_Util is\n    begin\n       pragma Assert (Is_Record_Type (E));\n \n-      Comp := First_Entity (E);\n+      Comp := First_Component (E);\n       while Present (Comp) loop\n-         Comp_Typ := Etype (Comp);\n+         Comp_Typ := Underlying_Type (Etype (Comp));\n \n          --  Recursive call if the record type has discriminants\n \n@@ -17732,7 +17732,7 @@ package body Sem_Util is\n             return True;\n          end if;\n \n-         Next_Entity (Comp);\n+         Next_Component (Comp);\n       end loop;\n \n       return False;"}]}