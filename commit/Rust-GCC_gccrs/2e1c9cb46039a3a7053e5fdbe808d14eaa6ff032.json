{"sha": "2e1c9cb46039a3a7053e5fdbe808d14eaa6ff032", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUxYzljYjQ2MDM5YTNhNzA1M2U1ZmRiZTgwOGQxNGVhYTZmZjAzMg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2008-05-23T14:33:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-23T14:33:46Z"}, "message": "gnat_ugn.texi (Calling Conventions): Document that the Intrinsic convention also allows access to named compiler...\n\n2008-05-23  Olivier Hainque  <hainque@adacore.com>\n\n\t* gnat_ugn.texi (Calling Conventions): Document that the Intrinsic\n\tconvention also allows access to named compiler built-in subprograms\n\tsuch as the GCC __builtin family.\n\nFrom-SVN: r135812", "tree": {"sha": "e9bee70f966063770eecf8d78dcc0f79e0b9c449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9bee70f966063770eecf8d78dcc0f79e0b9c449"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e1c9cb46039a3a7053e5fdbe808d14eaa6ff032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e1c9cb46039a3a7053e5fdbe808d14eaa6ff032", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e1c9cb46039a3a7053e5fdbe808d14eaa6ff032", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e1c9cb46039a3a7053e5fdbe808d14eaa6ff032/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bfc157d52c26ce692eaf52c4cdbbf4b148198c9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfc157d52c26ce692eaf52c4cdbbf4b148198c9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfc157d52c26ce692eaf52c4cdbbf4b148198c9e"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "ed5cec7d0496bed0bf35da4057f02b887be6133f", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1c9cb46039a3a7053e5fdbe808d14eaa6ff032/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1c9cb46039a3a7053e5fdbe808d14eaa6ff032/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=2e1c9cb46039a3a7053e5fdbe808d14eaa6ff032", "patch": "@@ -2855,9 +2855,8 @@ This applies to an intrinsic operation, as defined in the Ada\n Reference Manual. If a pragma Import (Intrinsic) applies to a subprogram,\n this means that the body of the subprogram is provided by the compiler itself,\n usually by means of an efficient code sequence, and that the user does not\n-supply an explicit body for it. In an application program, the pragma can\n-only be applied to the following two sets of names, which the GNAT compiler\n-recognizes.\n+supply an explicit body for it. In an application program, the pragma may\n+be applied to the following sets of names:\n \n @itemize @bullet\n @item\n@@ -2868,7 +2867,9 @@ first one must be a signed integer type or a modular type with a binary\n modulus, and the second parameter must be of type Natural.\n The return type must be the same as the type of the first argument. The size\n of this type can only be 8, 16, 32, or 64.\n-@item binary arithmetic operators: ``+'', ``-'', ``*'', ``/''\n+\n+@item\n+Binary arithmetic operators: ``+'', ``-'', ``*'', ``/''\n The corresponding operator declaration must have parameters and result type\n that have the same root numeric type (for example, all three are long_float\n types). This simplifies the definition of operations that use type checking\n@@ -2888,7 +2889,24 @@ This common idiom is often programmed with a generic definition and an\n explicit body. The pragma makes it simpler to introduce such declarations.\n It incurs no overhead in compilation time or code size, because it is\n implemented as a single machine instruction.\n+\n+@item\n+General subprogram entities, to bind an Ada subprogram declaration to\n+a compiler builtin by name with back-ends where such interfaces are\n+available. A typical example is the set of ``__builtin'' functions\n+exposed by the GCC back-end, as in the following example:\n+\n+@smallexample @c ada\n+   function builtin_sqrt (F : Float) return Float;\n+   pragma Import (Intrinsic, builtin_sqrt, \"__builtin_sqrtf\");\n+@end smallexample\n+\n+Most of the GCC builtins are accessible this way, and as for other\n+import conventions (e.g. C), it is the user's responsibility to ensure\n+that the Ada subprogram profile matches the underlying builtin\n+expectations.\n @end itemize\n+\n @noindent\n \n @ifset unw"}]}