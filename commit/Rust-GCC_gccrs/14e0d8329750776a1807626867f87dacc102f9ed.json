{"sha": "14e0d8329750776a1807626867f87dacc102f9ed", "node_id": "C_kwDOANBUbNoAKDE0ZTBkODMyOTc1MDc3NmExODA3NjI2ODY3Zjg3ZGFjYzEwMmY5ZWQ", "commit": {"author": {"name": "Cl\u00e9ment Chigot", "email": "clement.chigot@atos.net", "date": "2021-05-06T14:08:15Z"}, "committer": {"name": "Cl\u00e9ment Chigot", "email": "clement.chigot@atos.net", "date": "2022-01-12T15:59:47Z"}, "message": "aix: handle 64bit inodes for include directories\n\nOn AIX, stat will store inodes in 32bit even when using LARGE_FILES.\nIf the inode is larger, it will return -1 in st_ino.\nThus, in incpath.c when comparing include directories, if several\nof them have 64bit inodes, they will be considered as duplicated.\n\ngcc/ChangeLog:\n2022-01-12  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n\n\t* configure.ac: Check sizeof ino_t and dev_t.\n\t(HOST_STAT_FOR_64BIT_INODES): New AC_DEFINE to provide stat\n\tsyscall being able to handle 64bit inodes.\n\t* config.in: Regenerate.\n\t* configure: Regenerate.\n\t* incpath.c (HOST_STAT_FOR_64BIT_INODES): New define.\n\t(remove_duplicates): Use it.\n\nlibcpp/ChangeLog:\n2022-01-12  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n\n\t* configure.ac: Check sizeof ino_t and dev_t.\n\t* config.in: Regenerate.\n\t* configure: Regenerate.\n\t* include/cpplib.h (INO_T_CPP): Change for AIX.\n\t(DEV_T_CPP): New macro.\n\t(struct cpp_dir): Use it.", "tree": {"sha": "00e766cd37adf3fed25f88ea34bebfd9981aa488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00e766cd37adf3fed25f88ea34bebfd9981aa488"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14e0d8329750776a1807626867f87dacc102f9ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e0d8329750776a1807626867f87dacc102f9ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e0d8329750776a1807626867f87dacc102f9ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e0d8329750776a1807626867f87dacc102f9ed/comments", "author": null, "committer": null, "parents": [{"sha": "75845d584f490c294d40908168e5721adc38145d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75845d584f490c294d40908168e5721adc38145d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75845d584f490c294d40908168e5721adc38145d"}], "stats": {"total": 203, "additions": 198, "deletions": 5}, "files": [{"sha": "64c27c9cfac99ecf0fc98119b537300b30796d0c", "filename": "gcc/config.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e0d8329750776a1807626867f87dacc102f9ed/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e0d8329750776a1807626867f87dacc102f9ed/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=14e0d8329750776a1807626867f87dacc102f9ed", "patch": "@@ -2372,6 +2372,18 @@\n #endif\n \n \n+/* The size of `dev_t', as computed by sizeof. */\n+#ifndef USED_FOR_TARGET\n+#undef SIZEOF_DEV_T\n+#endif\n+\n+\n+/* The size of `ino_t', as computed by sizeof. */\n+#ifndef USED_FOR_TARGET\n+#undef SIZEOF_INO_T\n+#endif\n+\n+\n /* The size of `int', as computed by sizeof. */\n #ifndef USED_FOR_TARGET\n #undef SIZEOF_INT"}, {"sha": "d19059e13cca87d1f124b77eb78c82605faa99a4", "filename": "gcc/configure", "status": "modified", "additions": 81, "deletions": 2, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e0d8329750776a1807626867f87dacc102f9ed/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e0d8329750776a1807626867f87dacc102f9ed/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=14e0d8329750776a1807626867f87dacc102f9ed", "patch": "@@ -6302,6 +6302,85 @@ rm -rf conftest*\n \n fi\n \n+# The cast to long int works around a bug in the HP C Compiler\n+# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects\n+# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.\n+# This bug is HP SR number 8606223364.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking size of ino_t\" >&5\n+$as_echo_n \"checking size of ino_t... \" >&6; }\n+if ${ac_cv_sizeof_ino_t+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if ac_fn_cxx_compute_int \"$LINENO\" \"(long int) (sizeof (ino_t))\" \"ac_cv_sizeof_ino_t\"        \"$ac_includes_default\"; then :\n+\n+else\n+  if test \"$ac_cv_type_ino_t\" = yes; then\n+     { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error 77 \"cannot compute sizeof (ino_t)\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+   else\n+     ac_cv_sizeof_ino_t=0\n+   fi\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof_ino_t\" >&5\n+$as_echo \"$ac_cv_sizeof_ino_t\" >&6; }\n+\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define SIZEOF_INO_T $ac_cv_sizeof_ino_t\n+_ACEOF\n+\n+\n+# The cast to long int works around a bug in the HP C Compiler\n+# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects\n+# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.\n+# This bug is HP SR number 8606223364.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking size of dev_t\" >&5\n+$as_echo_n \"checking size of dev_t... \" >&6; }\n+if ${ac_cv_sizeof_dev_t+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if ac_fn_cxx_compute_int \"$LINENO\" \"(long int) (sizeof (dev_t))\" \"ac_cv_sizeof_dev_t\"        \"$ac_includes_default\"; then :\n+\n+else\n+  if test \"$ac_cv_type_dev_t\" = yes; then\n+     { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error 77 \"cannot compute sizeof (dev_t)\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+   else\n+     ac_cv_sizeof_dev_t=0\n+   fi\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof_dev_t\" >&5\n+$as_echo \"$ac_cv_sizeof_dev_t\" >&6; }\n+\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define SIZEOF_DEV_T $ac_cv_sizeof_dev_t\n+_ACEOF\n+\n+\n+\n+# Select the right stat being able to handle 64bit inodes, if needed.\n+if test \"$enable_largefile\" != no; then\n+  case \"$host, $build\" in\n+    *-*-aix*,*|*,*-*-aix*)\n+      if test \"$ac_cv_sizeof_ino_t\" == \"4\" -a \"$ac_cv_sizeof_dev_t\" == 4; then\n+\n+$as_echo \"#define HOST_STAT_FOR_64BIT_INODES stat64x\" >>confdefs.h\n+\n+      fi;;\n+  esac\n+fi\n+\n \n # sizeof(char) is 1 by definition.\n # The cast to long int works around a bug in the HP C Compiler\n@@ -19561,7 +19640,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19564 \"configure\"\n+#line 19643 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19667,7 +19746,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19670 \"configure\"\n+#line 19749 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "f2cd2f877505a278060f627c86c874068bd94718", "filename": "gcc/configure.ac", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e0d8329750776a1807626867f87dacc102f9ed/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e0d8329750776a1807626867f87dacc102f9ed/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=14e0d8329750776a1807626867f87dacc102f9ed", "patch": "@@ -465,6 +465,20 @@ AC_PROG_CPP\n AC_C_INLINE\n \n AC_SYS_LARGEFILE\n+AC_CHECK_SIZEOF(ino_t)\n+AC_CHECK_SIZEOF(dev_t)\n+\n+# Select the right stat being able to handle 64bit inodes, if needed.\n+if test \"$enable_largefile\" != no; then\n+  case \"$host, $build\" in\n+    *-*-aix*,*|*,*-*-aix*)\n+      if test \"$ac_cv_sizeof_ino_t\" == \"4\" -a \"$ac_cv_sizeof_dev_t\" == 4; then\n+\tAC_DEFINE(HOST_STAT_FOR_64BIT_INODES, stat64x,\n+\t  [Define which stat syscall is able to handle 64bit indodes.])\n+      fi;;\n+  esac\n+fi\n+\n \n # sizeof(char) is 1 by definition.\n AC_CHECK_SIZEOF(void *)"}, {"sha": "12b16074f242f94283dad3ed5daee630d29db66e", "filename": "gcc/incpath.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e0d8329750776a1807626867f87dacc102f9ed/gcc%2Fincpath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e0d8329750776a1807626867f87dacc102f9ed/gcc%2Fincpath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fincpath.c?ref=14e0d8329750776a1807626867f87dacc102f9ed", "patch": "@@ -44,6 +44,10 @@\n #define DIRS_EQ(A, B) (!filename_cmp ((A)->canonical_name, (B)->canonical_name))\n #endif\n \n+#ifndef HOST_STAT_FOR_64BIT_INODES\n+#define HOST_STAT_FOR_64BIT_INODES stat\n+#endif\n+\n static const char dir_separator_str[] = { DIR_SEPARATOR, 0 };\n \n static void add_env_var_paths (const char *, incpath_kind);\n@@ -246,15 +250,15 @@ remove_duplicates (cpp_reader *pfile, struct cpp_dir *head,\n \t\t   int verbose)\n {\n   struct cpp_dir **pcur, *tmp, *cur;\n-  struct stat st;\n+  struct HOST_STAT_FOR_64BIT_INODES st;\n \n   for (pcur = &head; *pcur; )\n     {\n       int reason = REASON_QUIET;\n \n       cur = *pcur;\n \n-      if (stat (cur->name, &st))\n+      if (HOST_STAT_FOR_64BIT_INODES (cur->name, &st))\n \t{\n \t  /* Dirs that don't exist or have denied permissions are \n \t     silently ignored, unless verbose.  */"}, {"sha": "9983aee5912468b60585444180f40bc873ffd024", "filename": "libcpp/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e0d8329750776a1807626867f87dacc102f9ed/libcpp%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e0d8329750776a1807626867f87dacc102f9ed/libcpp%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfig.in?ref=14e0d8329750776a1807626867f87dacc102f9ed", "patch": "@@ -258,6 +258,12 @@\n /* Define to the version of this package. */\n #undef PACKAGE_VERSION\n \n+/* The size of `dev_t', as computed by sizeof. */\n+#undef SIZEOF_DEV_T\n+\n+/* The size of `ino_t', as computed by sizeof. */\n+#undef SIZEOF_INO_T\n+\n /* The size of `int', as computed by sizeof. */\n #undef SIZEOF_INT\n "}, {"sha": "751453902157878087f8f0a4e745d9f809e4e025", "filename": "libcpp/configure", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e0d8329750776a1807626867f87dacc102f9ed/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e0d8329750776a1807626867f87dacc102f9ed/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=14e0d8329750776a1807626867f87dacc102f9ed", "patch": "@@ -6644,6 +6644,73 @@ $as_echo \"#define HAVE_UCHAR 1\" >>confdefs.h\n \n fi\n \n+# The cast to long int works around a bug in the HP C Compiler\n+# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects\n+# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.\n+# This bug is HP SR number 8606223364.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking size of ino_t\" >&5\n+$as_echo_n \"checking size of ino_t... \" >&6; }\n+if ${ac_cv_sizeof_ino_t+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if ac_fn_c_compute_int \"$LINENO\" \"(long int) (sizeof (ino_t))\" \"ac_cv_sizeof_ino_t\"        \"$ac_includes_default\"; then :\n+\n+else\n+  if test \"$ac_cv_type_ino_t\" = yes; then\n+     { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error 77 \"cannot compute sizeof (ino_t)\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+   else\n+     ac_cv_sizeof_ino_t=0\n+   fi\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof_ino_t\" >&5\n+$as_echo \"$ac_cv_sizeof_ino_t\" >&6; }\n+\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define SIZEOF_INO_T $ac_cv_sizeof_ino_t\n+_ACEOF\n+\n+\n+# The cast to long int works around a bug in the HP C Compiler\n+# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects\n+# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.\n+# This bug is HP SR number 8606223364.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking size of dev_t\" >&5\n+$as_echo_n \"checking size of dev_t... \" >&6; }\n+if ${ac_cv_sizeof_dev_t+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if ac_fn_c_compute_int \"$LINENO\" \"(long int) (sizeof (dev_t))\" \"ac_cv_sizeof_dev_t\"        \"$ac_includes_default\"; then :\n+\n+else\n+  if test \"$ac_cv_type_dev_t\" = yes; then\n+     { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error 77 \"cannot compute sizeof (dev_t)\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+   else\n+     ac_cv_sizeof_dev_t=0\n+   fi\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof_dev_t\" >&5\n+$as_echo \"$ac_cv_sizeof_dev_t\" >&6; }\n+\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define SIZEOF_DEV_T $ac_cv_sizeof_dev_t\n+_ACEOF\n+\n+\n+\n # g++ on Solaris 10+ defines _XOPEN_SOURCE=600, which exposes a different\n # iconv() prototype.\n ac_ext=cpp"}, {"sha": "9b6042518e52ab653dbb0f3ae0e4387909b002f6", "filename": "libcpp/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e0d8329750776a1807626867f87dacc102f9ed/libcpp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e0d8329750776a1807626867f87dacc102f9ed/libcpp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure.ac?ref=14e0d8329750776a1807626867f87dacc102f9ed", "patch": "@@ -103,6 +103,9 @@ if test $ac_cv_type_uchar = yes; then\n   [Define if <sys/types.h> defines \\`uchar'.])\n fi\n \n+AC_CHECK_SIZEOF(ino_t)\n+AC_CHECK_SIZEOF(dev_t)\n+\n # g++ on Solaris 10+ defines _XOPEN_SOURCE=600, which exposes a different\n # iconv() prototype.\n AC_LANG_PUSH([C++])"}, {"sha": "ebf6fccc010c0a6e82dcfd09f99d2d063dfee995", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e0d8329750776a1807626867f87dacc102f9ed/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e0d8329750776a1807626867f87dacc102f9ed/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=14e0d8329750776a1807626867f87dacc102f9ed", "patch": "@@ -752,10 +752,18 @@ struct cpp_callbacks\n \n #ifdef VMS\n #define INO_T_CPP ino_t ino[3]\n+#elif defined (_AIX) && SIZEOF_INO_T == 4\n+#define INO_T_CPP ino64_t ino\n #else\n #define INO_T_CPP ino_t ino\n #endif\n \n+#if defined (_AIX) && SIZEOF_DEV_T == 4\n+#define DEV_T_CPP dev64_t dev\n+#else\n+#define DEV_T_CPP dev_t dev\n+#endif\n+\n /* Chain of directories to look for include files in.  */\n struct cpp_dir\n {\n@@ -790,7 +798,7 @@ struct cpp_dir\n   /* The C front end uses these to recognize duplicated\n      directories in the search path.  */\n   INO_T_CPP;\n-  dev_t dev;\n+  DEV_T_CPP;\n };\n \n /* The kind of the cpp_macro.  */"}]}