{"sha": "ee4dad31004ae7b3e74a35e4dd102f2c4aa267d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU0ZGFkMzEwMDRhZTdiM2U3NGEzNWU0ZGQxMDJmMmM0YWEyNjdkNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-11-14T00:01:18Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-11-14T00:01:18Z"}, "message": "Oops, killed too much.\n\nFrom-SVN: r23653", "tree": {"sha": "0082019c5bfaee3cff131f291b219b30d5792b6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0082019c5bfaee3cff131f291b219b30d5792b6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee4dad31004ae7b3e74a35e4dd102f2c4aa267d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4dad31004ae7b3e74a35e4dd102f2c4aa267d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee4dad31004ae7b3e74a35e4dd102f2c4aa267d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4dad31004ae7b3e74a35e4dd102f2c4aa267d6/comments", "author": null, "committer": null, "parents": [{"sha": "40b80dad5af1b99132354844af58fcec900db537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b80dad5af1b99132354844af58fcec900db537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40b80dad5af1b99132354844af58fcec900db537"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "80f22083bc42d6aa2577498fe2da2f4d3de27a70", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4dad31004ae7b3e74a35e4dd102f2c4aa267d6/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4dad31004ae7b3e74a35e4dd102f2c4aa267d6/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=ee4dad31004ae7b3e74a35e4dd102f2c4aa267d6", "patch": "@@ -604,6 +604,95 @@\n    s%2addq %1,%3,%0\n    s%2subq %1,%n3,%0\")\n \n+;; These variants of the above insns can occur if the third operand\n+;; is the frame pointer.  This is a kludge, but there doesn't\n+;; seem to be a way around it.  Only recognize them while reloading.\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"some_operand\" \"=&r\")\n+\t(plus:DI (plus:DI (match_operand:DI 1 \"some_operand\" \"r\")\n+\t\t\t  (match_operand:DI 2 \"some_operand\" \"r\"))\n+\t\t (match_operand:DI 3 \"some_operand\" \"rIOKL\")))]\n+  \"reload_in_progress\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(plus:DI (plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t\t  (match_operand:DI 2 \"register_operand\" \"\"))\n+\t\t (match_operand:DI 3 \"add_operand\" \"\")))]\n+  \"reload_completed\"\n+  [(set (match_dup 0) (plus:DI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0) (plus:DI (match_dup 0) (match_dup 3)))]\n+  \"\")\n+\t\t\t\t\t   \n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"some_operand\" \"=&r\")\n+\t(plus:SI (plus:SI (mult:SI (match_operand:SI 1 \"some_operand\" \"rJ\")\n+\t\t\t\t   (match_operand:SI 2 \"const48_operand\" \"I\"))\n+\t\t\t  (match_operand:SI 3 \"some_operand\" \"r\"))\n+\t\t (match_operand:SI 4 \"some_operand\" \"rIOKL\")))]\n+  \"reload_in_progress\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n+\t(plus:SI (plus:SI (mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"\")\n+\t\t\t\t   (match_operand:SI 2 \"const48_operand\" \"\"))\n+\t\t\t  (match_operand:SI 3 \"register_operand\" \"\"))\n+\t\t (match_operand:SI 4 \"add_operand\" \"rIOKL\")))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+\t(plus:SI (mult:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n+   (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 4)))]\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"some_operand\" \"=&r\")\n+\t(sign_extend:DI\n+\t (plus:SI (plus:SI\n+\t\t   (mult:SI (match_operand:SI 1 \"some_operand\" \"rJ\")\n+\t\t\t    (match_operand:SI 2 \"const48_operand\" \"I\"))\n+\t\t   (match_operand:SI 3 \"some_operand\" \"r\"))\n+\t\t  (match_operand:SI 4 \"some_operand\" \"rIOKL\"))))]\n+  \"reload_in_progress\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(sign_extend:DI\n+\t (plus:SI (plus:SI\n+\t\t   (mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"\")\n+\t\t\t    (match_operand:SI 2 \"const48_operand\" \"\"))\n+\t\t   (match_operand:SI 3 \"register_operand\" \"\"))\n+\t\t  (match_operand:SI 4 \"add_operand\" \"\"))))]\n+  \"reload_completed\"\n+  [(set (match_dup 5)\n+\t(plus:SI (mult:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n+   (set (match_dup 0) (sign_extend:DI (plus:SI (match_dup 5) (match_dup 4))))]\n+  \"operands[5] = gen_lowpart (SImode, operands[0]);\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"some_operand\" \"=&r\")\n+\t(plus:DI (plus:DI (mult:DI (match_operand:DI 1 \"some_operand\" \"rJ\")\n+\t\t\t\t   (match_operand:DI 2 \"const48_operand\" \"I\"))\n+\t\t\t  (match_operand:DI 3 \"some_operand\" \"r\"))\n+\t\t (match_operand:DI 4 \"some_operand\" \"rIOKL\")))]\n+  \"reload_in_progress\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"=\")\n+\t(plus:DI (plus:DI (mult:DI (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+\t\t\t\t   (match_operand:DI 2 \"const48_operand\" \"\"))\n+\t\t\t  (match_operand:DI 3 \"register_operand\" \"\"))\n+\t\t (match_operand:DI 4 \"add_operand\" \"\")))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+\t(plus:DI (mult:DI (match_dup 1) (match_dup 2)) (match_dup 3)))\n+   (set (match_dup 0) (plus:DI (match_dup 0) (match_dup 4)))]\n+  \"\")\n+\n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (match_operand:SI 1 \"reg_or_8bit_operand\" \"rI\")))]"}]}