{"sha": "cff72485b1d5682a0c55f45b6e6f023c98739862", "node_id": "C_kwDOANBUbNoAKGNmZjcyNDg1YjFkNTY4MmEwYzU1ZjQ1YjZlNmYwMjNjOTg3Mzk4NjI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-14T00:16:48Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-14T00:16:48Z"}, "message": "Daily bump.", "tree": {"sha": "25dde967ad89e19164dd45e1f52b7c8a07dc314a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25dde967ad89e19164dd45e1f52b7c8a07dc314a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cff72485b1d5682a0c55f45b6e6f023c98739862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff72485b1d5682a0c55f45b6e6f023c98739862", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cff72485b1d5682a0c55f45b6e6f023c98739862", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff72485b1d5682a0c55f45b6e6f023c98739862/comments", "author": null, "committer": null, "parents": [{"sha": "86a15b266a7284f3aa1b12494a475f31416b981d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86a15b266a7284f3aa1b12494a475f31416b981d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86a15b266a7284f3aa1b12494a475f31416b981d"}], "stats": {"total": 329, "additions": 328, "deletions": 1}, "files": [{"sha": "b759cf452a8cd6ad836d03e36a1b34c5210e1aed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff72485b1d5682a0c55f45b6e6f023c98739862/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff72485b1d5682a0c55f45b6e6f023c98739862/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cff72485b1d5682a0c55f45b6e6f023c98739862", "patch": "@@ -1,3 +1,41 @@\n+2022-07-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc (operator_lt::fold_range): Use nonzero bits.\n+\n+2022-07-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (irange::copy_to_legacy): Set nonzero mask.\n+\t(irange::legacy_intersect): Clear nonzero mask.\n+\t(irange::legacy_union): Same.\n+\t(irange::invert): Same.\n+\n+2022-07-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-dom.h (record_temporary_equivalences): Remove.\n+\t* tree-ssa-dom.cc (dom_jt_state::m_blocks_on_stack): New.\n+\t(dom_jt_state::get_blocks_on_stack): Likewise.\n+\t(dom_opt_dom_walker::dom_opt_dom_walker): Take dom_jt_state.\n+\t(back_propagate_equivalences): Remove dominator bitmap\n+\tcompute and instead use passed in m_blocks_on_stack.\n+\t(record_temporary_equivalences): Likewise.\n+\t(record_equivalences_from_incoming_edge): Likewise.\n+\t(dom_opt_dom_walker::before_dom_children): Maintain and\n+\tpass down blocks on stack.\n+\t(dom_opt_dom_walker::after_dom_children): Likewise.\n+\n+2022-07-13  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.cc\n+\t(aarch64_general_gimple_fold_builtin): Add fixup for invalid GIMPLE.\n+\n+2022-07-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106249\n+\t* tree-ssa-loop-manip.cc (tree_transform_and_unroll_loop):\n+\tOnly verify LC SSA of the new_loop if we created it.\n+\tUse TODO_update_ssa_nophi for the SSA update after versioning\n+\tthe loop.\n+\n 2022-07-12  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* range-op.cc (unsigned_singleton_p): Remove."}, {"sha": "56754ca716d6546557dc0a07cc8ac9d2f3586dde", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff72485b1d5682a0c55f45b6e6f023c98739862/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff72485b1d5682a0c55f45b6e6f023c98739862/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=cff72485b1d5682a0c55f45b6e6f023c98739862", "patch": "@@ -1 +1 @@\n-20220713\n+20220714"}, {"sha": "2469db44a6d431adbb1a7c757fb2ada85db2a15d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff72485b1d5682a0c55f45b6e6f023c98739862/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff72485b1d5682a0c55f45b6e6f023c98739862/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cff72485b1d5682a0c55f45b6e6f023c98739862", "patch": "@@ -1,3 +1,243 @@\n+2022-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.cc (gnat_to_gnu) <N_Assignment_Statement>: Fix\n+\ta couple of minor issues in the commentary.\n+\n+2022-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.cc (gigi): Report a violation of No_Dependence\n+\ton System.Stack_Checking if Stack_Check_Probes_On_Target is not set\n+\tand -fstack-check is specified.\n+\t(build_binary_op_trapv): Report violatiosn of No_Dependence on both\n+\tSystem.Arith_64 and System.Arith_128.\n+\t(add_decl_expr): If an initialized variable, report a violation of\n+\tNo_Dependence on System.Memory_Copy for large aggregate types.\n+\t(gnat_to_gnu) <N_Op_Eq>: Report a violation\n+\tof No_Dependence on System.Memory_Compare for large aggregate types.\n+\t<N_Assignment_Statement>! Report a violation of No_Dependence on\n+\tSystem.Memory_Set, System.Memory_Move or else System.Memory_Copy for\n+\tlarge aggregate types.\n+\t* gcc-interface/utils2.cc (maybe_wrap_malloc): Report a violation of\n+\tNo_Dependence on System.Memory.\n+\t(maybe_wrap_free): Add GNAT_NODE parameter and report a violation of\n+\tNo_Dependence on System.Memory.\n+\t(build_call_alloc_dealloc): Adjust call to maybe_wrap_free.\n+\n+2022-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity): Do not set the debug\n+\ttype for vector types.\n+\n+2022-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Access_Subtype>:\n+\tUndo questionable renaming.\n+\n+2022-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.cc (Gigi_Cloned_Subtype): Handle private case.\n+\n+2022-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.cc (gigi): Add one more leading underscore to\n+\tname of stack checking function.\n+\n+2022-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.cc (Gigi_Cloned_Subtype): New function.\n+\t(gnat_to_gnu_entity) <E_Signed_Integer_Subtype>: Call it to get the\n+\tcloned subtype, if any.\n+\t<E_Floating_Point_Subtype>: Likewise.\n+\t<E_Array_Subtype>: Likewise.\n+\t<E_Record_Subtype>: Likewise.\n+\t<E_Access_Subtype>: Likewise.\n+\tDeal with all cloned subtypes on the main path.\n+\n+2022-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Access_Subtype>: Do\n+\tnot reuse the TYPE_DECL of the base type.\n+\n+2022-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.cc (gnat_pushdecl): Build DECL_ORIGINAL_TYPE\n+\tonly for pointer types.\n+\n+2022-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils2.cc (build_binary_op) <EQ_EXPR>: Also accept\n+\tpointer-to-function types that are not variant of each other.\n+\n+2022-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.cc (unchecked_convert): Also pad in most cases\n+\tif the source is not a scalar type but the destination is.\n+\n+2022-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Array_Type>: Save\n+\tand restore the alias set of the dummy pointer-to-array type.\n+\n+2022-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* snames.ads-tmpl (Name_Memory_Compare): New package name.\n+\t(Name_Memory_Copy): Likewise.\n+\t(Name_Memory_Move): Likewise.\n+\t(Name_Memory_Set): Likewise.\n+\n+2022-07-13  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch13.adb (Check_And_Resolve_Storage_Model_Type_Argument):\n+\tCall the System.Case_Util.To_Mixed procedure rather than the\n+\tfunction, to avoid bootstrap problems.\n+\n+2022-07-13  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* aspects.ads (Aspect_Argument): Change the association for\n+\tAspect_Storage_Model_Type from Expression to\n+\tOptional_Expression.\n+\t* exp_util.ads (Find_Storage_Op): Update comment to indicate\n+\tthat Empty can be returned in the case where a storage-model\n+\toperation is defaulted.\n+\t* exp_util.adb (Find_Storage_Op): Allow the function to return\n+\tEmpty in Storage_Model_Type case rather than raising\n+\tProgram_Error, so that Procedure_To_Call fields in N_Allocator\n+\tand N_Free_Statement nodes will be set to Empty in the defaulted\n+\tnative storage-model case.\n+\t* sem_ch13.adb: Add with and use of System.Case_Util (and\n+\treformat context_clause).\n+\t(Check_Aspect_At_Freeze_Point): Return with no action for a\n+\tStorage_Model_Type aspect with no expression (fully-defaulted\n+\tnative memory-model case).\n+\t(Resolve_Storage_Model_Type_Argument): If an Address_Type has\n+\tnot been explicitly specified, then set Addr_Type to denote type\n+\tSystem.Address.\n+\t(Validate_Storage_Model_Type_Aspect): Return immediately in the\n+\tcase where the aspect has no Expression (fully-defaulted native\n+\tmemory-model case).  No longer issue an error when Address_Type\n+\tisn't specified, and instead use type System.Address as the\n+\tdefault address type. When the address type is\n+\tSystem.Address (whether specified or defaulted), no longer issue\n+\terrors for any other \"subaspects\" that aren't specified, since\n+\tin that case those are allowed to default as well. Remove ???\n+\tcomment about needing to check for duplicates, which is now\n+\taddressed.\n+\t(Check_And_Resolve_Storage_Model_Type_Argument): New procedure\n+\tto check that an association for a storage-model subaspect in\n+\tthe aggregate has not been specified earlier in the aggregate,\n+\tand to then resolve the expression of the association and save\n+\tthe resolved entity. Called by\n+\tValidate_Storage_Model_Type_Aspect.\n+\t* sem_util.ads (Storage_Model_Support): Update comments on specs\n+\tof the functions Get_Storage_Model_Type_Entity,\n+\tStorage_Model_Address_Type, and Storage_Model_Null_Address to\n+\tindicate the behavior when the address type is System.Address\n+\t(the native memory-model case).\n+\t* sem_util.adb\n+\t(Storage_Model_Support.Get_Storage_Model_Type_Entity): Suppress\n+\tthe search for the given subaspect name (Nam) when the\n+\tStorage_Model_Type aspect is fully defaulted (i.e., no\n+\tExpression is present) and simply return. In cases where the\n+\tsearch is done, but no association that matches Nam is found,\n+\treturn System.Address for the Name_Address_Type case, return\n+\tSystem.Null_Address for the Name_Null_Address case, and return\n+\tEmpty for all other cases.\n+\n+2022-07-13  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Relocate_Expression): New routine with code that\n+\tpreviously was only applied to Pre and Post aspects.\n+\t(Analyze_Aspect_Specifications): Apply the above routine to\n+\tother aspects, in particular to aspects Address, Attach_Handler,\n+\tPredicate and Interrupt_Priority.\n+\n+2022-07-13  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* inline.adb (Build_Body_To_Inline): Instead of manipulating the\n+\tFull_Analysis flag, use the Inside_A_Generic flag (which is\n+\tconveniently manipulated by Start_Generic/End_Generic, together\n+\twith Expander_Active).\n+\t* sem_attr.adb (Analyze_Attribute_Old_Result): Adapt comment and\n+\tassertion to different flag that is set while building\n+\tbody-to-inline.\n+\n+2022-07-13  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* doc/gnat_rm/security_hardening_features.rst: Clarify the need\n+\tfor choices after -fzero-call-used-regs and -fstrub.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-07-13  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Recognize a generated subtype\n+\twith Ghost pragma for generic instantiations.\n+\n+2022-07-13  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-aridou.adb (Lemma_Mult_Div, Lemma_Powers): New\n+\tlemmas.\n+\t(Prove_Sign_Quotient): New local lemma.\n+\t(Prove_Signs): Expand definition of Big_R and Big_Q in the\n+\tpostcondition. Add intermediate assertions.\n+\t(Double_Divide): Call new lemma.\n+\t(Lemma_Div_Eq): Provide body for proving lemma.\n+\t(Lemma_Powers_Of_2, Lemma_Shift_Without_Drop,\n+\tProve_Dividend_Scaling, Prove_Multiplication, Prove_Z_Low): Call\n+\tlemmas, add intermediate assertions.\n+\n+2022-07-13  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* inline.adb (Has_Single_Return): Add guard for the subsequent\n+\tcall to Expression.\n+\n+2022-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Set Acts_As_Spec\n+\tearlier if the body is not the completion of a declaration.\n+\t(Check_Untagged_Equality): Deal with subprogram bodies that are\n+\tnot the completion of a declaration and make sure that they are\n+\tnot flagged when they cause the freezing of the type themselves.\n+\tGive a warning on the freezing point of the type in more cases.\n+\t* sem_res.adb (Resolve_Equality_Op): Revert latest change.\n+\n+2022-07-13  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-arit32.adb (Scaled_Divide32): Add an assertion, move\n+\tthe call of Prove_Sign_R around.\n+\n+2022-07-13  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_If_Expression): Test for compile time\n+\tknown bounds when handling slices.\n+\n+2022-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.ads (Integer_Type_For): Mention Small_Integer_Type_For.\n+\t(Small_Integer_Type_For): Mention Integer_Type_For.\n+\n+2022-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Equality_Op): Make sure that the user-defined\n+\toperator of an untagged record type is declared ahead of an instance\n+\tbefore using it to resolve the equality operator in the instance.\n+\n+2022-07-13  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_N_Extended_Return_Statement): Add default\n+\tinitialization for Stmts.\n+\t* sem_ch12.adb (Analyze_Associations): Add default\n+\tinitialization for Match.\n+\t* libgnat/a-ztenau.adb (Scan_Enum_Lit): Remove duplicated\n+\tboolean test.\n+\t* libgnat/g-spipat.adb (XMatch): Combine duplicated cases.\n+\n+2022-07-13  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* par-prag.adb (Check_Arg_Count): Change parameter type from Int\n+\tto Nat, because this parameter is compared to Arg_Count variable\n+\twhich is of type Nat. Also, it wouldn't make sense to check for\n+\tnegative number of pragma arguments.\n+\n 2022-07-12  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* exp_ch11.adb (Expand_N_Exception_Declaration): Sync comment"}, {"sha": "aa317e867bec2f4f9b59213d39d159b164bd954f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff72485b1d5682a0c55f45b6e6f023c98739862/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff72485b1d5682a0c55f45b6e6f023c98739862/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cff72485b1d5682a0c55f45b6e6f023c98739862", "patch": "@@ -1,3 +1,22 @@\n+2022-07-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/105912\n+\t* pt.cc (tsubst_copy_and_build) <case CALL_EXPR>: Guard against\n+\tNULL_TREE extract_call_expr result.\n+\n+2022-07-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/105842\n+\t* constraint.cc (satisfy_declaration_constraints): Refine early\n+\texit test for argument dependence.\n+\t* cp-tree.h (uses_outer_template_parms_in_constraints): Declare.\n+\t* pt.cc (template_class_depth): Handle TI_TEMPLATE being a\n+\tFIELD_DECL.\n+\t(usse_outer_template_parms): Factor out constraint dependence\n+\ttest into ...\n+\t(uses_outer_template_parms_in_constraints): ... here.\n+\t(type_dependent_expression_p): Use it for FUNCTION_DECL.\n+\n 2022-07-07  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/105956"}, {"sha": "97b9f5f6f04df91f39a29d20d620db00d7e65bac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff72485b1d5682a0c55f45b6e6f023c98739862/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff72485b1d5682a0c55f45b6e6f023c98739862/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cff72485b1d5682a0c55f45b6e6f023c98739862", "patch": "@@ -1,3 +1,27 @@\n+2022-07-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/105912\n+\t* g++.dg/cpp2a/consteval31.C: New test.\n+\n+2022-07-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/105842\n+\t* g++.dg/cpp2a/concepts-memtmpl6.C: New test.\n+\n+2022-07-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* g++.dg/ipa/pure-const-3.C: Adjust.\n+\t* gcc.dg/pr102983.c: Adjust.\n+\n+2022-07-13  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/ignored_return_1.c: New test.\n+\n+2022-07-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106249\n+\t* gcc.dg/pr106249.c: New testcase.\n+\n 2022-07-12  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/106049"}, {"sha": "fe02298eb2accb2058e9773dfc84e96283f885e0", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff72485b1d5682a0c55f45b6e6f023c98739862/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff72485b1d5682a0c55f45b6e6f023c98739862/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=cff72485b1d5682a0c55f45b6e6f023c98739862", "patch": "@@ -1,3 +1,9 @@\n+2022-07-13  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR preprocessor/106272\n+\t* include/line-map.h (class label_text): Don't std::move in a return\n+\tstatement.\n+\n 2022-07-10  Lewis Hyatt  <lhyatt@gmail.com>\n \n \tPR preprocessor/97498"}]}