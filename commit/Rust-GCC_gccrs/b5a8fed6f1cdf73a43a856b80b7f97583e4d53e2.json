{"sha": "b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVhOGZlZDZmMWNkZjczYTQzYTg1NmI4MGI3Zjk3NTgzZTRkNTNlMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-05-19T13:31:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-05-19T13:31:36Z"}, "message": "tuple (get): Implement N3670.\n\n\t* include/std/tuple (get): Implement N3670.\n\t* include/std/utility (get): Likewise.\n\t* testsuite/20_util/pair/get.cc: Move to ...\n\t* testsuite/20_util/pair/astuple/get.cc: Here.\n\t* testsuite/20_util/pair/astuple/astuple.cc: New.\n\t* testsuite/20_util/pair/astuple/constexpr_get.cc: New.\n\t* testsuite/20_util/pair/astuple/constexpr_get_by_type.cc: New.\n\t* testsuite/20_util/pair/astuple/get_by_type.cc: New.\n\t* testsuite/20_util/pair/astuple/get_by_type_neg.cc: New.\n\t* testsuite/20_util/pair/astuple/get_neg.cc: New.\n\t* testsuite/20_util/tuple/element_access/constexpr_get_by_type.cc: New.\n\t* testsuite/20_util/tuple/element_access/get2_by_type.cc: New.\n\t* testsuite/20_util/tuple/element_access/get_by_type.cc: New.\n\nFrom-SVN: r199082", "tree": {"sha": "2f81fad09a8b6e3a2822f5aa8d49226859e91639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f81fad09a8b6e3a2822f5aa8d49226859e91639"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeb71f0cf5d046c110ed1d2f17468124025d6f42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb71f0cf5d046c110ed1d2f17468124025d6f42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeb71f0cf5d046c110ed1d2f17468124025d6f42"}], "stats": {"total": 380, "additions": 379, "deletions": 1}, "files": [{"sha": "3c1e7a97906290ebba80990f985976625a555228", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2", "patch": "@@ -1,3 +1,19 @@\n+2013-05-19  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/tuple (get): Implement N3670.\n+\t* include/std/utility (get): Likewise.\n+\t* testsuite/20_util/pair/get.cc: Move to ...\n+\t* testsuite/20_util/pair/astuple/get.cc: Here.\n+\t* testsuite/20_util/pair/astuple/astuple.cc: New.\n+\t* testsuite/20_util/pair/astuple/constexpr_get.cc: New.\n+\t* testsuite/20_util/pair/astuple/constexpr_get_by_type.cc: New.\n+\t* testsuite/20_util/pair/astuple/get_by_type.cc: New.\n+\t* testsuite/20_util/pair/astuple/get_by_type_neg.cc: New.\n+\t* testsuite/20_util/pair/astuple/get_neg.cc: New.\n+\t* testsuite/20_util/tuple/element_access/constexpr_get_by_type.cc: New.\n+\t* testsuite/20_util/tuple/element_access/get2_by_type.cc: New.\n+\t* testsuite/20_util/tuple/element_access/get_by_type.cc: New.\n+\n 2013-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* Revert last commit."}, {"sha": "69f5bd1f72f42b24219482c9c42f5a313ead4ce2", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2", "patch": "@@ -772,6 +772,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return std::forward<typename tuple_element<__i,\n \ttuple<_Elements...>>::type&&>(get<__i>(__t)); }\n \n+#if __cplusplus > 201103L\n+  template<typename _Head, size_t __i, typename... _Tail>\n+    constexpr typename __add_ref<_Head>::type\n+    __get_helper2(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept\n+    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }\n+\n+  template<typename _Head, size_t __i, typename... _Tail>\n+    constexpr typename __add_c_ref<_Head>::type\n+    __get_helper2(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept\n+    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }\n+\n+  template <typename _Tp, typename... _Types>\n+    constexpr _Tp&\n+    get(tuple<_Types...>& __t) noexcept\n+    { return __get_helper2<_Tp>(__t); }\n+\n+  template <typename _Tp, typename... _Types>\n+    constexpr _Tp&&\n+    get(tuple<_Types...>&& __t) noexcept\n+    { return std::move(__get_helper2<_Tp>(__t)); }\n+\n+  template <typename _Tp, typename... _Types>\n+    constexpr const _Tp&\n+    get(const tuple<_Types...>& __t) noexcept\n+    { return __get_helper2<_Tp>(__t); }\n+#endif\n+\n   // This class helps construct the various comparison operations on tuples\n   template<std::size_t __check_equal_size, std::size_t __i, std::size_t __j,\n \t   typename _Tp, typename _Up>"}, {"sha": "ad30ad7a9a3e969a7f4ad8a9e505b3ff843cf0f3", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2", "patch": "@@ -153,8 +153,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __pair_get<_Int>::__const_get(__in); }\n \n #if __cplusplus > 201103L\n+  template <typename _Tp, typename _Up>\n+    constexpr _Tp&\n+    get(pair<_Tp, _Up>& __p) noexcept\n+    { return __p.first; }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr const _Tp&\n+    get(const pair<_Tp, _Up>& __p) noexcept\n+    { return __p.first; }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr _Tp&&\n+    get(pair<_Tp, _Up>&& __p) noexcept\n+    { return std::move(__p.first); }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr _Tp&\n+    get(pair<_Up, _Tp>& __p) noexcept\n+    { return __p.second; }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr const _Tp&\n+    get(const pair<_Up, _Tp>& __p) noexcept\n+    { return __p.second; }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr _Tp&&\n+    get(pair<_Up, _Tp>&& __p) noexcept\n+    { return std::move(__p.second); }\n+\n   /// Assign @p __new_val to @p __obj and return its previous value.\n-  template <class _Tp, class _Up = _Tp>\n+  template <typename _Tp, typename _Up = _Tp>\n     inline _Tp\n     exchange(_Tp& __obj, _Up&& __new_val)\n     {"}, {"sha": "32c22b884eba087702ab471ff30fe51aa93c54ac", "filename": "libstdc++-v3/testsuite/20_util/pair/astuple/astuple.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fastuple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fastuple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fastuple.cc?ref=b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+#include <type_traits>\n+\n+typedef std::pair<int, long> test_type;\n+\n+static_assert( std::tuple_size<test_type>::value == 2, \"size is 2\" );\n+\n+template<std::size_t N, typename T>\n+  using Tuple_elt = typename std::tuple_element<N, T>::type;\n+\n+using std::is_same;\n+\n+static_assert( is_same<Tuple_elt<0, test_type>, test_type::first_type>::value,\n+               \"first type is int\" );\n+\n+static_assert( is_same<Tuple_elt<1, test_type>, test_type::second_type>::value,\n+               \"second type is long\" );"}, {"sha": "d01dcc5eecb4dd4c1f194f62290b7374849a989d", "filename": "libstdc++-v3/testsuite/20_util/pair/astuple/constexpr_get.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fconstexpr_get.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fconstexpr_get.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fconstexpr_get.cc?ref=b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2", "patch": "@@ -0,0 +1,34 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Tuple-like access to pair\n+\n+#include <utility>\n+\n+std::pair<int, char> p;\n+const std::pair<int, char> cp;\n+\n+constexpr const int& cri = std::get<0>(cp);\n+constexpr int&  ri = std::get<0>(p);\n+constexpr int&& rri = std::get<0>(std::move(p));\n+\n+constexpr const char& crc = std::get<1>(cp);\n+constexpr char&  rc = std::get<1>(p);\n+constexpr char&& rrc = std::get<1>(std::move(p));"}, {"sha": "1b18dab988d67728e47759b248d8d248b07c87f6", "filename": "libstdc++-v3/testsuite/20_util/pair/astuple/constexpr_get_by_type.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fconstexpr_get_by_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fconstexpr_get_by_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fconstexpr_get_by_type.cc?ref=b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2", "patch": "@@ -0,0 +1,34 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Tuple-like access to pair\n+\n+#include <utility>\n+\n+std::pair<int, char> p;\n+const std::pair<int, char> cp;\n+\n+constexpr const int& cri = std::get<int>(cp);\n+constexpr int&  ri = std::get<int>(p);\n+constexpr int&& rri = std::get<int>(std::move(p));\n+\n+constexpr const char& crc = std::get<char>(cp);\n+constexpr char&  rc = std::get<char>(p);\n+constexpr char&& rrc = std::get<char>(std::move(p));"}, {"sha": "0ff807a3a1489b044162d0b37e2145b7c69a0bf9", "filename": "libstdc++-v3/testsuite/20_util/pair/astuple/get.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget.cc?ref=b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2", "previous_filename": "libstdc++-v3/testsuite/20_util/pair/get.cc"}, {"sha": "dd26d2d911371b0fbcb80913c7a0ca7b1c344821", "filename": "libstdc++-v3/testsuite/20_util/pair/astuple/get_by_type.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget_by_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget_by_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget_by_type.cc?ref=b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+\n+void test01()\n+{\n+  std::pair<float, int> p;\n+\n+  float&& pfirst __attribute__((unused)) = std::get<float>(std::move(p));\n+  int&&  psecond __attribute__((unused)) = std::get<int>(std::move(p));\n+}"}, {"sha": "4f7f414001452a2190a303810a5825af99fbddc0", "filename": "libstdc++-v3/testsuite/20_util/pair/astuple/get_by_type_neg.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget_by_type_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget_by_type_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget_by_type_neg.cc?ref=b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+\n+void test01()\n+{\n+  std::pair<int, int> p;\n+\n+  std::get<int>(p);  // { dg-error \"ambiguous\" }\n+}"}, {"sha": "95fe4579227fb7c0ee70c22acda68174c14e7e76", "filename": "libstdc++-v3/testsuite/20_util/pair/astuple/get_neg.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget_neg.cc?ref=b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+\n+void test01()\n+{\n+  std::pair<int, int> p;\n+\n+  std::get<2>(p);  // { dg-error \"no matching function\" }\n+}\n+\n+// { dg-prune-output \"tuple_element<2\" }"}, {"sha": "9d0239a4855d01b22c6cb0fd9957e791f9a7f1e0", "filename": "libstdc++-v3/testsuite/20_util/tuple/element_access/constexpr_get_by_type.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fconstexpr_get_by_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fconstexpr_get_by_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fconstexpr_get_by_type.cc?ref=b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Tuple\n+\n+#include <tuple>\n+\n+std::tuple<long, int, const int, long> ti;\n+const std::tuple<long, int, const int, long> cti;\n+\n+constexpr const int& cri = std::get<int>(cti);\n+constexpr int&  ri = std::get<int>(ti);\n+constexpr int&& rri = std::get<int>(std::move(ti));"}, {"sha": "dbe5f5430b93881568428c9bd4c4eeaf92ebf11c", "filename": "libstdc++-v3/testsuite/20_util/tuple/element_access/get2_by_type.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget2_by_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget2_by_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget2_by_type.cc?ref=b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+\n+void test01()\n+{\n+  std::tuple<int> t1;\n+\n+  int&&   t1one __attribute__((unused)) = std::get<int>(std::move(t1));\n+\n+  std::tuple<float, int> t2;\n+\n+  float&& t2one __attribute__((unused)) = std::get<0>(std::move(t2));\n+  int&&   t2two __attribute__((unused)) = std::get<int>(std::move(t2));\n+\n+  std::tuple<short, int, double> t3;\n+\n+  short&&  t3one __attribute__((unused)) = std::get<short>(std::move(t3));\n+  int&&    t3two __attribute__((unused)) = std::get<int>(std::move(t3));\n+  double&& t3thr __attribute__((unused)) = std::get<double>(std::move(t3));\n+}"}, {"sha": "5bd15d97891f67579c94144a14453c9d1a1fda1f", "filename": "libstdc++-v3/testsuite/20_util/tuple/element_access/get_by_type.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_by_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_by_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_by_type.cc?ref=b5a8fed6f1cdf73a43a856b80b7f97583e4d53e2", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Tuple\n+\n+#include <tuple>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+int\n+main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int j=1;\n+  const int k=2;\n+  tuple<int,int &,const int&> a(0,j,k);\n+  const tuple<int,int &,const int&> b(1,j,k);\n+  VERIFY(get<int>(a)==0 && get<int&>(a)==1 && get<const int&>(a)==2);\n+  get<0>(a)=3;\n+  get<1>(a)=4;\n+  VERIFY(get<int>(a)==3 && get<int&>(a)==4);\n+  VERIFY(j==4);\n+  get<1>(b)=5;\n+  VERIFY(get<int>(b)==1 && get<int&>(b)==5 && get<const int&>(b)==2);\n+  VERIFY(j==5);\n+}"}]}