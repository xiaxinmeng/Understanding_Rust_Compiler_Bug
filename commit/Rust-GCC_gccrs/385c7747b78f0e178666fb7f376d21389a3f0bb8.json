{"sha": "385c7747b78f0e178666fb7f376d21389a3f0bb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg1Yzc3NDdiNzhmMGUxNzg2NjZmYjdmMzc2ZDIxMzg5YTNmMGJiOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-06-13T21:34:07Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-06-13T21:34:07Z"}, "message": "i386-builtin-types.def (INT_FTYPE_FLOAT128): New function type.\n\n\t* config/i386/i386-builtin-types.def (INT_FTYPE_FLOAT128):\n\tNew function type.\n\t* config/i386/i386.c (enum ix86_builtins) [IX86_BUILTIN_SIGNBITQ]: New.\n\t(ix86_init_builtins): Add __builtin_signbitq function.\n\t(ix86_expand_args_builtin): Handle INT_FTYPE_FLOAT128.\n\t(ix86_expand_builtin): Handle IX86_BUILTIN_SIGNBITQ.\n\t* config/i386/i386.md (signbittf2): New expander.\n\t* config/i386/sse.md (ptesttf2): New insn pattern.\n\t* doc/extend.texi (x86 Built-in Functions): Document\n\t__builtin_signbitq.\n\nlibgcc/ChangeLog:\n\n\t* config.host (i[34567]86-*-* | x86_64-*-*): Always include\n\ti386/${host_address}/t-softfp in tmake_file.\n\t* config/i386/32/t-softfp: Update comment for __builtin_copysignq.\n\t* config/i386/32/tf-signs.c: Add __signbittf2 fallback function.\n\t* config/i386/64/t-softfp: New file.\n\t* config/i386/64/tf-signs.c: Ditto.\n\t* config/i386/libgcc-bsd.ver: Add __signbittf2.\n\t* config/i386/libgcc-glibc.ver: Ditto.\n\t* config/i386/libgcc-sol2.ver: Ditto.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/float128-3.c: New test.\n\t* gcc.target/i386/quad-sse4.c: Ditto.\n\t* gcc.target/i386/quad-sse.c: Use -msse instead of -msse2.\n\tUpdate scan strings.\n\nFrom-SVN: r237415", "tree": {"sha": "c7b6909eb3ebaf242aa655314fa820d26e2c5b3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7b6909eb3ebaf242aa655314fa820d26e2c5b3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/385c7747b78f0e178666fb7f376d21389a3f0bb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/385c7747b78f0e178666fb7f376d21389a3f0bb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/385c7747b78f0e178666fb7f376d21389a3f0bb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/385c7747b78f0e178666fb7f376d21389a3f0bb8/comments", "author": null, "committer": null, "parents": [{"sha": "85ecd05c26d107921b166374dd77c40a393312c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ecd05c26d107921b166374dd77c40a393312c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85ecd05c26d107921b166374dd77c40a393312c8"}], "stats": {"total": 241, "additions": 216, "deletions": 25}, "files": [{"sha": "5e62a97dcff4cf930d82e6cba98718de80b0fbc2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -1,3 +1,16 @@\n+2016-06-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-builtin-types.def (INT_FTYPE_FLOAT128):\n+\tNew function type.\n+\t* config/i386/i386.c (enum ix86_builtins) [IX86_BUILTIN_SIGNBITQ]: New.\n+\t(ix86_init_builtins): Add __builtin_signbitq function.\n+\t(ix86_expand_args_builtin): Handle INT_FTYPE_FLOAT128.\n+\t(ix86_expand_builtin): Handle IX86_BUILTIN_SIGNBITQ.\n+\t* config/i386/i386.md (signbittf2): New expander.\n+\t* config/i386/sse.md (ptesttf2): New insn pattern.\n+\t* doc/extend.texi (x86 Built-in Functions): Document\n+\t__builtin_signbitq.\n+\n 2016-06-13  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR bootstrap/71481\n@@ -201,8 +214,9 @@\n \t* config/i386/i386.c (enum ix86_builtins) [IX86_BUILTIN_NANQ]: New.\n \t[IX86_BUILTIN_NANSQ]: Ditto.\n \t(ix86_fold_builtin): Handle IX86_BUILTIN_NANQ and IX86_BUILTIN_NANSQ.\n-\t(ix86_init_builtin_types) Declare const_string_type_node.\n-\tAdd __builtin_nanq and __builtin_nansq builtin functions.\n+\t(ix86_init_builtin_types): Declare const_string_type_node.\n+\t(ix86_init_builtins): Add __builtin_nanq and __builtin_nansq\n+\tbuiltin functions.\n \t(ix86_expand_builtin): Handle IX86_BUILTIN_NANQ and IX86_BUILTIN_NANSQ.\n \t* doc/extend.texi (x86 Built-in Functions): Document\n \t__builtin_nanq and __builtin_nansq."}, {"sha": "dba9ecb28e1f36ee169cd7abec73215b0338176a", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -202,6 +202,7 @@ DEF_FUNCTION_TYPE (INT, V8QI)\n DEF_FUNCTION_TYPE (INT, V8SF)\n DEF_FUNCTION_TYPE (INT, V32QI)\n DEF_FUNCTION_TYPE (INT, PCCHAR)\n+DEF_FUNCTION_TYPE (INT, FLOAT128)\n DEF_FUNCTION_TYPE (INT64, INT64)\n DEF_FUNCTION_TYPE (INT64, V2DF)\n DEF_FUNCTION_TYPE (INT64, V4SF)"}, {"sha": "4e52d93914157966935fbd33428d87a70e2c95ee", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -32722,6 +32722,7 @@ enum ix86_builtins\n   IX86_BUILTIN_NANSQ,\n   IX86_BUILTIN_FABSQ,\n   IX86_BUILTIN_COPYSIGNQ,\n+  IX86_BUILTIN_SIGNBITQ,\n \n   /* Vectorizer support builtins.  */\n   IX86_BUILTIN_CPYSGNPS,\n@@ -33983,6 +33984,8 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_mulv2siv2di3, \"__builtin_ia32_pmuldq128\", IX86_BUILTIN_PMULDQ128, UNKNOWN, (int) V2DI_FTYPE_V4SI_V4SI },\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_mulv4si3, \"__builtin_ia32_pmulld128\", IX86_BUILTIN_PMULLD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n \n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_signbittf2, 0, IX86_BUILTIN_SIGNBITQ, UNKNOWN, (int) INT_FTYPE_FLOAT128 },\n+\n   /* SSE4.1 */\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_roundpd\", IX86_BUILTIN_ROUNDPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_INT },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_roundps\", IX86_BUILTIN_ROUNDPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_INT },\n@@ -38299,6 +38302,13 @@ ix86_init_builtins (void)\n   TREE_READONLY (decl) = 1;\n   ix86_builtins[(int) IX86_BUILTIN_COPYSIGNQ] = decl;\n \n+  ftype = ix86_get_builtin_func_type (INT_FTYPE_FLOAT128);\n+  decl = add_builtin_function (\"__builtin_signbitq\", ftype,\n+\t\t\t       IX86_BUILTIN_SIGNBITQ, BUILT_IN_MD,\n+\t\t\t       \"__signbittf2\", NULL_TREE);\n+  TREE_READONLY (decl) = 1;\n+  ix86_builtins[(int) IX86_BUILTIN_SIGNBITQ] = decl;\n+\n   ix86_init_tm_builtins ();\n   ix86_init_mmx_sse_builtins ();\n   ix86_init_mpx_builtins ();\n@@ -39128,6 +39138,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case INT_FTYPE_V4SF:\n     case INT_FTYPE_V2DF:\n     case INT_FTYPE_V32QI:\n+    case INT_FTYPE_FLOAT128:\n     case V16QI_FTYPE_V16QI:\n     case V8SI_FTYPE_V8SF:\n     case V8SI_FTYPE_V4SI:\n@@ -42638,16 +42649,26 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n        i < ARRAY_SIZE (bdesc_args);\n        i++, d++)\n     if (d->code == fcode)\n-      switch (fcode)\n-\t{\n-\tcase IX86_BUILTIN_FABSQ:\n-\tcase IX86_BUILTIN_COPYSIGNQ:\n-\t  if (!TARGET_SSE)\n-\t    /* Emit a normal call if SSE isn't available.  */\n-\t    return expand_call (exp, target, ignore);\n-\tdefault:\n-\t  return ix86_expand_args_builtin (d, exp, target);\n-\t}\n+      {\n+\tswitch (fcode)\n+\t  {\n+\t  case IX86_BUILTIN_FABSQ:\n+\t  case IX86_BUILTIN_COPYSIGNQ:\n+\t    if (!TARGET_SSE)\n+\t      /* Emit a normal call if SSE isn't available.  */\n+\t      return expand_call (exp, target, ignore);\n+\t    break;\n+\t  case IX86_BUILTIN_SIGNBITQ:\n+\t    if (!TARGET_SSE4_1)\n+\t      /* Emit a normal call if SSE4_1 isn't available.  */\n+\t      return expand_call (exp, target, ignore);\n+\t    break;\n+\t  default:\n+\t    break;\n+\t  }\n+\n+\treturn ix86_expand_args_builtin (d, exp, target);\n+      }\n \n   for (i = 0, d = bdesc_comi; i < ARRAY_SIZE (bdesc_comi); i++, d++)\n     if (d->code == fcode)"}, {"sha": "e69a7e44267711cd1a58e1786e215a77f5b2ff8a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -16198,6 +16198,22 @@\n   DONE;\n })\n \n+(define_expand \"signbittf2\"\n+  [(use (match_operand:SI 0 \"register_operand\"))\n+   (use (match_operand:TF 1 \"register_operand\"))]\n+  \"TARGET_SSE4_1\"\n+{\n+  rtx mask = ix86_build_signbit_mask (TFmode, 0, 0);\n+  rtx scratch = gen_reg_rtx (QImode);\n+\n+  emit_insn (gen_ptesttf2 (operands[1], mask));\n+  ix86_expand_setcc (scratch, NE,\n+\t\t     gen_rtx_REG (CCZmode, FLAGS_REG), const0_rtx);\n+\n+  emit_insn (gen_zero_extendqisi2 (operands[0], scratch));\n+  DONE;\n+})\n+\n (define_expand \"signbitxf2\"\n   [(use (match_operand:SI 0 \"register_operand\"))\n    (use (match_operand:XF 1 \"register_operand\"))]"}, {"sha": "6056ddc2ee53d5c9d82d56bc6be6241a738b05cf", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -15212,6 +15212,19 @@\n      (const_string \"*\")))\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"ptesttf2\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(unspec:CC [(match_operand:TF 0 \"register_operand\" \"Yr, *x, x\")\n+\t\t    (match_operand:TF 1 \"vector_operand\" \"YrBm, *xBm, xm\")]\n+\t\t   UNSPEC_PTEST))]\n+  \"TARGET_SSE4_1\"\n+  \"%vptest\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssecomi\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn \"<sse4_1>_round<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:VF_128_256 0 \"register_operand\" \"=Yr,*x,x\")\n \t(unspec:VF_128_256"}, {"sha": "859f6847fda06f56e8674909a52ed5820eac7e05", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -18480,6 +18480,7 @@ of them implement the function that is part of the name.\n @smallexample\n __float128 __builtin_fabsq (__float128)\n __float128 __builtin_copysignq (__float128, __float128)\n+int __builtin_signbitq (__float128)\n @end smallexample\n \n The following built-in functions are always available."}, {"sha": "d77a5eabca8fd4029b4b177060e6be0e66b25703", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -1,3 +1,10 @@\n+2016-06-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/float128-3.c: New test.\n+\t* gcc.target/i386/quad-sse4.c: Ditto.\n+\t* gcc.target/i386/quad-sse.c: Use -msse instead of -msse2.\n+\tUpdate scan strings.\n+\n 2016-06-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/71498"}, {"sha": "99bcd4906e8618328fd9d42986dede18a7cfbd0e", "filename": "gcc/testsuite/gcc.target/i386/float128-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat128-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat128-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat128-3.c?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+\n+#include \"sse4_1-check.h\"\n+\n+extern void abort (void);\n+\n+static void\n+sse4_1_test (void)\n+{\n+  static volatile __float128 a;\n+\n+  a = -1.2q;\n+  if (!__builtin_signbitq (a))\n+    abort ();\n+\n+  a = 1.2q;\n+  if (__builtin_signbitq (a))\n+    abort ();\n+}"}, {"sha": "cd09bd17db5017315274bce7124003e9be0594a1", "filename": "gcc/testsuite/gcc.target/i386/quad-sse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fquad-sse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fquad-sse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fquad-sse.c?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-options \"-O2 -msse\" } */\n \n __float128 x, y;\n \n@@ -18,4 +18,4 @@ __float128 test_3(void)\n   return __builtin_copysignq (x, y);\n }\n \n-/* { dg-final { scan-assembler-not \"call.*(neg|fabs|copysign)\" } } */\n+/* { dg-final { scan-assembler-not \"neg|fabs|copysign\" } } */"}, {"sha": "a08ea27afed49afd34038287dd4ed919cf322284", "filename": "gcc/testsuite/gcc.target/i386/quad-sse4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fquad-sse4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fquad-sse4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fquad-sse4.c?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+__float128 x;\n+\n+int __test_1(void)\n+{\n+  return __builtin_signbitq (x);\n+}\n+\n+/* { dg-final { scan-assembler-not \"signbit\" } } */"}, {"sha": "557a041f71a6db31f512b452086eb90e63c80064", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -1,3 +1,15 @@\n+2016-06-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config.host (i[34567]86-*-* | x86_64-*-*): Always include\n+\ti386/${host_address}/t-softfp in tmake_file.\n+\t* config/i386/32/t-softfp: Update comment for __builtin_copysignq.\n+\t* config/i386/32/tf-signs.c: Add __signbittf2 fallback function.\n+\t* config/i386/64/t-softfp: New file.\n+\t* config/i386/64/tf-signs.c: Ditto.\n+\t* config/i386/libgcc-bsd.ver: Add __signbittf2.\n+\t* config/i386/libgcc-glibc.ver: Ditto.\n+\t* config/i386/libgcc-sol2.ver: Ditto.\n+\n 2016-06-05  Aaron Conole  <aconole@redhat.com>\n \t    Nathan Sidwell  <nathan@acm.org>\n \n@@ -30,7 +42,7 @@\n \n 2016-05-19  Sandra Loosemore  <sandra@codesourcery.com>\n \n-\t* config.host [x86_64-*-cygwin*]: Handle tmake_eh_file for mixed \n+\t* config.host [x86_64-*-cygwin*]: Handle tmake_eh_file for mixed\n \tdw2/seh configuration.\n \t[x86_64-*-mingw*]: Likewise.\n \n@@ -104,7 +116,7 @@\n \n 2016-03-28  James Bowman  <james.bowman@ftdichip.com>\n \n-        * libgcc/config/ft32/lib1funcs.S (*divsi3, *modsi3): New.\n+\t* libgcc/config/ft32/lib1funcs.S (*divsi3, *modsi3): New.\n \n 2016-03-22  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n@@ -519,7 +531,7 @@\n \n 2015-10-02  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n-        * config/i386/cpuinfo.c (processor_features): Add\n+\t* config/i386/cpuinfo.c (processor_features): Add\n \tFEATURE_AVX512VBMI and FEATURE_AVX512VBMI.\n \n 2015-09-28  Joseph Myers  <joseph@codesourcery.com>\n@@ -884,10 +896,10 @@\n \n 2015-05-15  Martin Galvan  <martin.galvan@tallertechnologies.com>\n \n-        * config/arm/lib1funcs.S (CFI_START_FUNCTION, CFI_END_FUNCTION):\n-        New macros.\n-        * config/arm/ieee754-df.S: Add CFI directives.\n-        * config/arm/ieee754-sf.S: Add CFI directives.\n+\t* config/arm/lib1funcs.S (CFI_START_FUNCTION, CFI_END_FUNCTION):\n+\tNew macros.\n+\t* config/arm/ieee754-df.S: Add CFI directives.\n+\t* config/arm/ieee754-sf.S: Add CFI directives.\n \n 2015-05-13  Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "0cd688ddd69087e4293a5a77022e07ed128a1b39", "filename": "libgcc/config.host", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -1361,9 +1361,7 @@ i[34567]86-*-darwin* | x86_64-*-darwin* | \\\n   i[34567]86-*-freebsd* | x86_64-*-freebsd* | \\\n   i[34567]86-*-openbsd* | x86_64-*-openbsd*)\n   \ttmake_file=\"${tmake_file} t-softfp-tf\"\n-\tif test \"${host_address}\" = 32; then\n-\t\ttmake_file=\"${tmake_file} i386/${host_address}/t-softfp\"\n-\tfi\n+\ttmake_file=\"${tmake_file} i386/${host_address}/t-softfp\"\n \ttmake_file=\"${tmake_file} i386/t-softfp t-softfp\"\n \t;;\n esac"}, {"sha": "f27e7e64c220311c9bf217aaa574176f379fb1d0", "filename": "libgcc/config/i386/32/t-softfp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2Fconfig%2Fi386%2F32%2Ft-softfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2Fconfig%2Fi386%2F32%2Ft-softfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2F32%2Ft-softfp?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -1,5 +1,6 @@\n # Omit TImode functions\n softfp_int_modes := si di\n \n-# Provide fallbacks for __builtin_copysignq and __builtin_fabsq.\n+# Provide fallbacks for __builtin_copysignq, __builtin_fabsq\n+# and __builtin_signbitq.\n LIB2ADD += $(srcdir)/config/i386/32/tf-signs.c"}, {"sha": "d74c86a72820750e4ba5f49bc68ebbf8d616bab8", "filename": "libgcc/config/i386/32/tf-signs.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2Fconfig%2Fi386%2F32%2Ftf-signs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2Fconfig%2Fi386%2F32%2Ftf-signs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2F32%2Ftf-signs.c?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -37,6 +37,7 @@ union _FP_UNION_Q\n \n __float128 __copysigntf3 (__float128, __float128);\n __float128 __fabstf2 (__float128);\n+int __signbittf2 (__float128);\n \n __float128\n __copysigntf3 (__float128 a, __float128 b)\n@@ -60,3 +61,13 @@ __fabstf2 (__float128 a)\n \n   return A.flt;\n }\n+\n+int\n+__signbittf2 (__float128 a)\n+{\n+  union _FP_UNION_Q A;\n+\n+  A.flt = a;\n+\n+  return A.bits.sign;\n+}"}, {"sha": "f159f74fe501826c9d7270fd4b78d2c0c7ac452d", "filename": "libgcc/config/i386/64/t-softfp", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2Fconfig%2Fi386%2F64%2Ft-softfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2Fconfig%2Fi386%2F64%2Ft-softfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2F64%2Ft-softfp?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -0,0 +1,2 @@\n+# Provide fallbacks for __builtin_signbitq\n+LIB2ADD += $(srcdir)/config/i386/64/tf-signs.c"}, {"sha": "29dfaef09a4af31f47bbe6fdf0ca793af9c5788d", "filename": "libgcc/config/i386/64/tf-signs.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2Fconfig%2Fi386%2F64%2Ftf-signs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2Fconfig%2Fi386%2F64%2Ftf-signs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2F64%2Ftf-signs.c?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -0,0 +1,46 @@\n+/* Copyright (C) 2016 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+union _FP_UNION_Q\n+{\n+   __float128 flt;\n+   struct \n+   {\n+      unsigned long long frac0 : 64;\n+      unsigned long long frac1 : 48;\n+      unsigned exp : 15;\n+      unsigned sign : 1;\n+   } bits __attribute__((packed));\n+};\n+\n+int __signbittf3 (__float128);\n+\n+int\n+__signbittf2 (__float128 a)\n+{\n+  union _FP_UNION_Q A;\n+\n+  A.flt = a;\n+\n+  return A.bits.sign;\n+}"}, {"sha": "c89f87ec26663dfcf3ca2db4f5b39de5f116be9a", "filename": "libgcc/config/i386/libgcc-bsd.ver", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2Fconfig%2Fi386%2Flibgcc-bsd.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2Fconfig%2Fi386%2Flibgcc-bsd.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Flibgcc-bsd.ver?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -111,3 +111,7 @@ GCC_4.8.0 {\n   __cpu_model\n   __cpu_indicator_init\n }\n+\n+GCC_7.0.0 {\n+  __signbittf2\n+}"}, {"sha": "6f664dc3f56d3d5a417096bff62674a75d85fa2a", "filename": "libgcc/config/i386/libgcc-glibc.ver", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2Fconfig%2Fi386%2Flibgcc-glibc.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2Fconfig%2Fi386%2Flibgcc-glibc.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Flibgcc-glibc.ver?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -152,6 +152,10 @@ GCC_4.8.0 {\n   __cpu_model\n   __cpu_indicator_init\n }\n+\n+GCC_7.0.0 {\n+  __signbittf2\n+}\n %else\n GCC_4.4.0 {\n   __addtf3\n@@ -193,4 +197,8 @@ GCC_4.8.0 {\n   __cpu_model\n   __cpu_indicator_init\n }\n+\n+GCC_7.0.0 {\n+  __signbittf2\n+}\n %endif"}, {"sha": "185b424d4b848e552f5b81b2088505c8c8e3c089", "filename": "libgcc/config/i386/libgcc-sol2.ver", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2Fconfig%2Fi386%2Flibgcc-sol2.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385c7747b78f0e178666fb7f376d21389a3f0bb8/libgcc%2Fconfig%2Fi386%2Flibgcc-sol2.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Flibgcc-sol2.ver?ref=385c7747b78f0e178666fb7f376d21389a3f0bb8", "patch": "@@ -111,3 +111,7 @@ GCC_4.8.0 {\n   __cpu_model\n   __cpu_indicator_init\n }\n+\n+GCC_7.0.0 {\n+  __signbittf2\n+}"}]}