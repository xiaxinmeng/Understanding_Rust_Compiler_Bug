{"sha": "e2ae1407d3a0429fada6ff23f38ebf96bd62bd73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJhZTE0MDdkM2EwNDI5ZmFkYTZmZjIzZjM4ZWJmOTZiZDYyYmQ3Mw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-05-28T17:56:58Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-05-28T17:56:58Z"}, "message": "check.c, [...]: Fix comment typos.\n\n\t* check.c, expr.c, resolve.c, trans-common.c,\n\ttrans-intrinsic.c, trans-stmt.c, trans-types.c: Fix comment typos.\n\nFrom-SVN: r114170", "tree": {"sha": "1d6fbca31fbb7ea3c1d9f05ad47314e85c20179f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d6fbca31fbb7ea3c1d9f05ad47314e85c20179f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73/comments", "author": null, "committer": null, "parents": [{"sha": "ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "f264b29651a4f04974f136ad1cc31b0d83c45912", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e2ae1407d3a0429fada6ff23f38ebf96bd62bd73", "patch": "@@ -1,3 +1,8 @@\n+2006-05-28  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* check.c, expr.c, resolve.c, trans-common.c,\n+\ttrans-intrinsic.c, trans-stmt.c, trans-types.c: Fix comment typos.\n+\n 2006-05-27  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/19777"}, {"sha": "c68e59c1cf8df54c3f5a98e0fef66aad94817fe2", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=e2ae1407d3a0429fada6ff23f38ebf96bd62bd73", "patch": "@@ -1052,7 +1052,7 @@ gfc_check_ichar_iachar (gfc_expr * c)\n       if (!ref)\n \t{\n           /* Check that the argument is length one.  Non-constant lengths\n-\t     can't be checked here, so assume thay are ok.  */\n+\t     can't be checked here, so assume they are ok.  */\n \t  if (c->ts.cl && c->ts.cl->length)\n \t    {\n \t      /* If we already have a length for this expression then use it.  */"}, {"sha": "84dcf68fbf9c5ceb08cd8202468b817fba9f8d99", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=e2ae1407d3a0429fada6ff23f38ebf96bd62bd73", "patch": "@@ -1879,7 +1879,7 @@ gfc_check_assign (gfc_expr * lvalue, gfc_expr * rvalue, int conform)\n       if (sym->attr.use_assoc)\n \tbad_proc = true;\n \n-      /* (ii) The assignement is in the main program; or  */\n+      /* (ii) The assignment is in the main program; or  */\n       if (gfc_current_ns->proc_name->attr.is_main_program)\n \tbad_proc = true;\n "}, {"sha": "c662947fb160ca4209fc4b811c332a4e3742af7c", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=e2ae1407d3a0429fada6ff23f38ebf96bd62bd73", "patch": "@@ -4946,7 +4946,7 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n \t}\n     }\n \n-  /* An external symbol may not have an intializer because it is taken to be\n+  /* An external symbol may not have an initializer because it is taken to be\n      a procedure.  */\n   if (sym->attr.external && sym->value)\n     {"}, {"sha": "856eeeb51f19ef4f0dd25ed21210c372d05fe911", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=e2ae1407d3a0429fada6ff23f38ebf96bd62bd73", "patch": "@@ -84,7 +84,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n    a diagonal matrix in the matrix formulation.\n  \n    Each segment is described by a chain of segment_info structures.  Each\n-   segment_info structure describes the extents of a single varible within\n+   segment_info structure describes the extents of a single variable within\n    the segment.  This list is maintained in the order the elements are\n    positioned withing the segment.  If two elements have the same starting\n    offset the smaller will come first.  If they also have the same size their"}, {"sha": "9575a318c7ad4401ecc52b45e28d89d5d971c133", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=e2ae1407d3a0429fada6ff23f38ebf96bd62bd73", "patch": "@@ -329,7 +329,7 @@ build_fix_expr (stmtblock_t * pblock, tree arg, tree type,\n /* Round a real value using the specified rounding mode.\n    We use a temporary integer of that same kind size as the result.\n    Values larger than those that can be represented by this kind are\n-   unchanged, as thay will not be accurate enough to represent the\n+   unchanged, as they will not be accurate enough to represent the\n    rounding.\n     huge = HUGE (KIND (a))\n     aint (a) = ((a > huge) || (a < -huge)) ? a : (real)(int)a"}, {"sha": "562e6f1462b983a1b50640fc7db6e9e61fcb64fc", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=e2ae1407d3a0429fada6ff23f38ebf96bd62bd73", "patch": "@@ -1150,7 +1150,7 @@ gfc_trans_integer_select (gfc_code * code)\n \t\t    internal representation of CASE(N).\n \n \t\t In the first and second case, we need to set a value for\n-\t\t high.  In the thirth case, we don't because the GCC middle\n+\t\t high.  In the third case, we don't because the GCC middle\n \t\t end represents a single case value by just letting high be\n \t\t a NULL_TREE.  We can't do that because we need to be able\n \t\t to represent unbounded cases.  */"}, {"sha": "7c481505d207ff91974cb74074199237b0130137", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ae1407d3a0429fada6ff23f38ebf96bd62bd73/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=e2ae1407d3a0429fada6ff23f38ebf96bd62bd73", "patch": "@@ -1721,7 +1721,7 @@ gfc_get_function_type (gfc_symbol * sym)\n \t     this code was bad, except that it would give incorrect results.\n \n \t     Contained procedures could pass by value as these are never\n-\t     used without an explicit interface, and connot be passed as\n+\t     used without an explicit interface, and cannot be passed as\n \t     actual parameters for a dummy procedure.  */\n \t  if (arg->ts.type == BT_CHARACTER)\n             nstr++;"}]}