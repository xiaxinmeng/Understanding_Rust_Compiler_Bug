{"sha": "699c914ac9882aa4435d4e5c6cb259cbb37d4645", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk5YzkxNGFjOTg4MmFhNDQzNWQ0ZTVjNmNiMjU5Y2JiMzdkNDY0NQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2004-08-19T00:43:03Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2004-08-19T00:43:03Z"}, "message": "invoke.texi (-mfix-and-continue): Add support for fast turn around debugging.\n\n\t* doc/invoke.texi (-mfix-and-continue): Add support for\n\tfast turn around debugging.\n\t(-ffix-and-continue): Likewise.\n\t(-mindirect-data): Likewise.\n\t(-findirect-data): Likewise.\n\t* config/darwin.c (TARGET_FIX_AND_CONTINUE): Likewise.\n\t(indirect_data): Likewise.\n\t(machopic_data_defined_p): Likewise.\n\t(machopic_output_indirection): Likewise.\n\t(darwin_encode_section_info): Likewise.\n\t(darwin_fix_and_continue): Likewise.\n\t(darwin_fix_and_continue_switch): Likewise.\n\t* config/darwin.h (MACHO_SYMBOL_STATIC): Likewise.\n\t* config/rs6000/darwin.h (SUBTARGET_OVERRIDE_OPTIONS): Likewise.\n\t(SUBTARGET_OPTION_TRANSLATE_TABLE): Likewise.\n\t(SUBTARGET_OPTIONS): Likewise.\n\t(darwin_fix_and_continue): Likewise.\n\t(darwin_fix_and_continue_switch): Likewise.\n\t(TARGET_FIX_AND_CONTINUE): Likewise.\n\t* config/rs6000.c (rs6000_emit_prologue): Likewise.\n\nFrom-SVN: r86229", "tree": {"sha": "ea5d03b0aaee03b493d57579a2aa9286740b2ad3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea5d03b0aaee03b493d57579a2aa9286740b2ad3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/699c914ac9882aa4435d4e5c6cb259cbb37d4645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/699c914ac9882aa4435d4e5c6cb259cbb37d4645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/699c914ac9882aa4435d4e5c6cb259cbb37d4645", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/699c914ac9882aa4435d4e5c6cb259cbb37d4645/comments", "author": null, "committer": null, "parents": [{"sha": "bd454efdcf81282b006932fa7bcf8e8bc9968052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd454efdcf81282b006932fa7bcf8e8bc9968052", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd454efdcf81282b006932fa7bcf8e8bc9968052"}], "stats": {"total": 220, "additions": 207, "deletions": 13}, "files": [{"sha": "3336545a1cf9bce66ffcb77424e4b305ce843a43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699c914ac9882aa4435d4e5c6cb259cbb37d4645/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699c914ac9882aa4435d4e5c6cb259cbb37d4645/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=699c914ac9882aa4435d4e5c6cb259cbb37d4645", "patch": "@@ -1,4 +1,27 @@\n-2004-09-19  Steven Bosscher  <stevenb@suse.de>\n+2004-08-18  Mike Stump  <mrs@apple.com>\n+\n+\t* doc/invoke.texi (-mfix-and-continue): Add support for\n+\tfast turn around debugging.\n+\t(-ffix-and-continue): Likewise.\n+\t(-mindirect-data): Likewise.\n+\t(-findirect-data): Likewise.\n+\t* config/darwin.c (TARGET_FIX_AND_CONTINUE): Likewise.\n+\t(indirect_data): Likewise.\n+\t(machopic_data_defined_p): Likewise.\n+\t(machopic_output_indirection): Likewise.\n+\t(darwin_encode_section_info): Likewise.\n+\t(darwin_fix_and_continue): Likewise.\n+\t(darwin_fix_and_continue_switch): Likewise.\n+\t* config/darwin.h (MACHO_SYMBOL_STATIC): Likewise.\n+\t* config/rs6000/darwin.h (SUBTARGET_OVERRIDE_OPTIONS): Likewise.\n+\t(SUBTARGET_OPTION_TRANSLATE_TABLE): Likewise.\n+\t(SUBTARGET_OPTIONS): Likewise.\n+\t(darwin_fix_and_continue): Likewise.\n+\t(darwin_fix_and_continue_switch): Likewise.\n+\t(TARGET_FIX_AND_CONTINUE): Likewise.\n+\t* config/rs6000.c (rs6000_emit_prologue): Likewise.\n+\n+2004-08-19  Steven Bosscher  <stevenb@suse.de>\n \n \t* basic-block.h (struct edge_def): Remove crossing_edge.\n \t(EDGE_CROSSING): New define."}, {"sha": "d34dcfe411d05388f3a5dbbbc9765be5dc103f4c", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 104, "deletions": 3, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699c914ac9882aa4435d4e5c6cb259cbb37d4645/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699c914ac9882aa4435d4e5c6cb259cbb37d4645/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=699c914ac9882aa4435d4e5c6cb259cbb37d4645", "patch": "@@ -44,6 +44,37 @@ Boston, MA 02111-1307, USA.  */\n #include \"errors.h\"\n #include \"hashtab.h\"\n \n+/* Darwin supports a feature called fix-and-continue, which is used\n+   for rapid turn around debugging.  When code is compiled with the\n+   -mfix-and-continue flag, two changes are made to the generated code\n+   that allow the system to do things that it would normally not be\n+   able to do easily.  These changes allow gdb to load in\n+   recompilation of a translation unit that has been changed into a\n+   running program and replace existing functions and methods of that\n+   translation unit with with versions of those functions and methods\n+   from the newly compiled translation unit.  The new functions access\n+   the existing static data from the old translation unit, if the data\n+   existed in the unit to be replaced, and from the new translation\n+   unit, for new data.\n+\n+   The changes are to insert 4 nops at the beginning of all functions\n+   and to use indirection to get at static duration data.  The 4 nops\n+   are required by consumers of the generated code.  Currently, gdb\n+   uses this to patch in a jump to the overriding function, this\n+   allows all uses of the old name to forward to the replacement,\n+   including existing function poiinters and virtual methods.  See\n+   rs6000_emit_prologue for the code that handles the nop insertions.\n+ \n+   The added indirection allows gdb to redirect accesses to static\n+   duration data from the newly loaded translation unit to the\n+   existing data, if any.  @code{static} data is special and is\n+   handled by setting the second word in the .non_lazy_symbol_pointer\n+   data structure to the address of the data.  See indirect_data for\n+   the code that handles the extra indirection, and\n+   machopic_output_indirection and its use of MACHO_SYMBOL_STATIC for\n+   the code that handles @code{static} data indirection.  */\n+\n+\n /* Nonzero if the user passes the -mone-byte-bool switch, which forces\n    sizeof(bool) to be 1. */\n const char *darwin_one_byte_bool = 0;\n@@ -90,9 +121,51 @@ machopic_classify_symbol (rtx sym_ref)\n \t    ? MACHOPIC_UNDEFINED_FUNCTION : MACHOPIC_UNDEFINED_DATA);\n }\n \n+#ifndef TARGET_FIX_AND_CONTINUE\n+#define TARGET_FIX_AND_CONTINUE 0\n+#endif\n+\n+/* Indicate when fix-and-continue style code generation is being used\n+   and when a reference to data should be indirected so that it can be\n+   rebound in a new translation unit to refernce the original instance\n+   of that data.  Symbol names that are for code generation local to\n+   the translation unit are bound to the new translation unit;\n+   currently this means symbols that begin with L or _OBJC_;\n+   otherwise, we indicate that an indirect reference should be made to\n+   permit the runtime to rebind new instances of the translation unit\n+   to the original instance of the data.  */\n+\n+static int\n+indirect_data (rtx sym_ref)\n+{\n+  int lprefix;\n+  const char *name;\n+\n+  /* If we aren't generating fix-and-continue code, don't do anything special.  */\n+  if (TARGET_FIX_AND_CONTINUE == 0)\n+    return 0;\n+\n+  /* Otherwise, all symbol except symbols that begin with L or _OBJC_\n+     are indirected.  Symbols that begin with L and _OBJC_ are always\n+     bound to the current translation unit as they are used for\n+     generated local data of the translation unit.  */\n+\n+  name = XSTR (sym_ref, 0);\n+\n+  lprefix = (((name[0] == '*' || name[0] == '&')\n+              && (name[1] == 'L' || (name[1] == '\"' && name[2] == 'L')))\n+             || (strncmp (name, \"_OBJC_\", 6)));\n+\n+  return ! lprefix;\n+}\n+\n+\n static int\n machopic_data_defined_p (rtx sym_ref)\n {\n+  if (indirect_data (sym_ref))\n+    return 0;\n+\n   switch (machopic_classify_symbol (sym_ref))\n     {\n     case MACHOPIC_DEFINED_DATA:\n@@ -799,7 +872,8 @@ machopic_output_indirection (void **slot, void *data)\n \n       machopic_output_stub (asm_out_file, sym, stub);    \n     }\n-  else if (machopic_symbol_defined_p (symbol))\n+  else if (! indirect_data (symbol)\n+\t   && machopic_symbol_defined_p (symbol))\n     {\n       data_section ();\n       assemble_align (GET_MODE_ALIGNMENT (Pmode));\n@@ -810,6 +884,8 @@ machopic_output_indirection (void **slot, void *data)\n     }\n   else\n     {\n+      rtx init = const0_rtx;\n+\n       machopic_nl_symbol_ptr_section ();\n       assemble_name (asm_out_file, ptr_name);\n       fprintf (asm_out_file, \":\\n\");\n@@ -818,7 +894,18 @@ machopic_output_indirection (void **slot, void *data)\n       assemble_name (asm_out_file, sym_name);\n       fprintf (asm_out_file, \"\\n\");\n       \n-      assemble_integer (const0_rtx, GET_MODE_SIZE (Pmode),\n+      /* Variables that are marked with MACHO_SYMBOL_STATIC need to\n+\t have their symbol name instead of 0 in the second entry of\n+\t the non-lazy symbol pointer data structure when they are\n+\t defined.  This allows the runtime to rebind newer instances\n+\t of the translation unit with the original instance of the\n+\t data.  */\n+\n+      if ((SYMBOL_REF_FLAGS (symbol) & MACHO_SYMBOL_STATIC)\n+\t  && machopic_symbol_defined_p (symbol))\n+\tinit = gen_rtx_SYMBOL_REF (Pmode, sym_name);\n+\n+      assemble_integer (init, GET_MODE_SIZE (Pmode),\n \t\t\tGET_MODE_ALIGNMENT (Pmode), 1);\n     }\n   \n@@ -829,7 +916,7 @@ void\n machopic_finish (FILE *asm_out_file)\n {\n   if (machopic_indirections)\n-    htab_traverse_noresize (machopic_indirections, \n+    htab_traverse_noresize (machopic_indirections,\n \t\t\t    machopic_output_indirection,\n \t\t\t    asm_out_file);\n }\n@@ -887,6 +974,11 @@ darwin_encode_section_info (tree decl, rtx rtl, int first ATTRIBUTE_UNUSED)\n \t  || (!DECL_COMMON (decl) && DECL_INITIAL (decl)\n \t      && DECL_INITIAL (decl) != error_mark_node)))\n     SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_FLAG_DEFINED;\n+\n+  if (TREE_CODE (decl) == VAR_DECL\n+      && indirect_data (sym_ref)\n+      && ! TREE_PUBLIC (decl))\n+    SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_STATIC;\n }\n \n void\n@@ -1258,4 +1350,13 @@ darwin_file_end (void)\n   fprintf (asm_out_file, \"\\t.subsections_via_symbols\\n\");\n }\n \n+/* True, iff we're generating fast turn around debugging code.  When\n+   true, we arrange for function prologues to start with 4 nops so\n+   that gdb may insert code to redirect them, and for data to accessed\n+   indirectly.  The runtime uses this indirection to forward\n+   references for data to the original instance of that data.  */\n+\n+int darwin_fix_and_continue;\n+const char *darwin_fix_and_continue_switch;\n+\n #include \"gt-darwin.h\""}, {"sha": "cd37567215e2bd79d7ff8b9cec5629cb42db6cd9", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699c914ac9882aa4435d4e5c6cb259cbb37d4645/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699c914ac9882aa4435d4e5c6cb259cbb37d4645/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=699c914ac9882aa4435d4e5c6cb259cbb37d4645", "patch": "@@ -812,9 +812,17 @@ objc_section_init (void)\t\t\t\\\n /* Set on a symbol with SYMBOL_FLAG_FUNCTION or\n    MACHO_SYMBOL_FLAG_VARIABLE to indicate that the function or\n    variable has been defined in this translation unit.  */\n+\n #define MACHO_SYMBOL_FLAG_VARIABLE (SYMBOL_FLAG_MACH_DEP)\n #define MACHO_SYMBOL_FLAG_DEFINED ((SYMBOL_FLAG_MACH_DEP) << 1)\n \n+/* Set on a symbol to indicate when fix-and-continue style code\n+   generation is being used and the symbol refers to a static symbol\n+   that should be rebound from new instances of a translation unit to\n+   the original instance of the data.  */\n+\n+#define MACHO_SYMBOL_STATIC ((SYMBOL_FLAG_MACH_DEP) << 2)\n+\n /* Symbolic names for various things we might know about a symbol.  */\n \n enum machopic_addr_class {"}, {"sha": "f1d5e7658639dc447fa62b2d12a7fcaca86d2757", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699c914ac9882aa4435d4e5c6cb259cbb37d4645/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699c914ac9882aa4435d4e5c6cb259cbb37d4645/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=699c914ac9882aa4435d4e5c6cb259cbb37d4645", "patch": "@@ -94,6 +94,17 @@ do {\t\t\t\t\t\t\t\t\t\\\n         /* Darwin doesn't support -fpic.  */\t\t\t\t\\\n         warning (\"-fpic is not supported; -fPIC assumed\");\t\t\\\n         flag_pic = 2;\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    /* Handle -mfix-and-continue.  */\t\t\t\t\t\\\n+    if (darwin_fix_and_continue_switch)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tconst char *base = darwin_fix_and_continue_switch;\t\t\\\n+\twhile (base[-1] != 'm') base--;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (*darwin_fix_and_continue_switch != '\\0')\t\t\t\\\n+\t  error (\"invalid option `%s'\", base);\t\t\t\t\\\n+\tdarwin_fix_and_continue = (base[0] != 'n');\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n@@ -134,11 +145,16 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define SUBTARGET_EXTRA_SPECS\t\t\t\\\n   { \"darwin_arch\", \"ppc\" },\n \n-/* The \"-faltivec\" option should have been called \"-maltivec\" all along.  */\n+/* The \"-faltivec\" option should have been called \"-maltivec\" all\n+   along.  -ffix-and-continue and -findirect-data is for compatibility\n+   for old compilers.  */\n+\n #define SUBTARGET_OPTION_TRANSLATE_TABLE\t\t\t\t\\\n-  { \"-faltivec\", \"-maltivec -include altivec.h\" },\t\\\n-  { \"-fno-altivec\", \"-mno-altivec\" },\t\\\n-  { \"-Waltivec-long-deprecated\",\t\"-mwarn-altivec-long\" }, \\\n+  { \"-ffix-and-continue\", \"-mfix-and-continue\" },\t\t\t\\\n+  { \"-findirect-data\", \"-mfix-and-continue\" },\t\t\t\t\\\n+  { \"-faltivec\", \"-maltivec -include altivec.h\" },\t\t\t\\\n+  { \"-fno-altivec\", \"-mno-altivec\" },\t\t\t\t\t\\\n+  { \"-Waltivec-long-deprecated\",\t\"-mwarn-altivec-long\" },\t\\\n   { \"-Wno-altivec-long-deprecated\", \"-mno-warn-altivec-long\" }\n \n /* Make both r2 and r3 available for allocation.  */\n@@ -364,3 +380,21 @@ extern const char *darwin_one_byte_bool;\n   }\n \n #define HAS_MD_FALLBACK_FRAME_STATE_FOR 1\n+\n+#undef SUBTARGET_OPTIONS\n+#define\tSUBTARGET_OPTIONS \\\n+  {\"fix-and-continue\", &darwin_fix_and_continue_switch,\t\t\t\\\n+   N_(\"Generate code suitable for fast turn around debugging\"), 0},\t\\\n+  {\"no-fix-and-continue\", &darwin_fix_and_continue_switch,\t\t\\\n+   N_(\"Don't generate code suitable for fast turn around debugging\"), 0}\n+\n+extern int darwin_fix_and_continue;\n+extern const char *darwin_fix_and_continue_switch;\n+\n+/* True, iff we're generating fast turn around debugging code.  When\n+   true, we arrange for function prologues to start with 4 nops so\n+   that gdb may insert code to redirect them, and for data to accessed\n+   indirectly.  The runtime uses this indirection to forward\n+   references for data to the original instance of that data.  */\n+\n+#define TARGET_FIX_AND_CONTINUE (darwin_fix_and_continue)"}, {"sha": "f9792ecdadcb120a3f1070f85e958438b9bf96ed", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699c914ac9882aa4435d4e5c6cb259cbb37d4645/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699c914ac9882aa4435d4e5c6cb259cbb37d4645/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=699c914ac9882aa4435d4e5c6cb259cbb37d4645", "patch": "@@ -12863,6 +12863,10 @@ gen_frame_mem_offset (enum machine_mode mode, rtx reg, int offset)\n   return gen_rtx_MEM (mode, gen_rtx_PLUS (Pmode, reg, offset_rtx));\n }\n \n+#ifndef TARGET_FIX_AND_CONTINUE\n+#define TARGET_FIX_AND_CONTINUE 0\n+#endif\n+\n /* Emit function prologue as insns.  */\n \n void\n@@ -12880,11 +12884,24 @@ rs6000_emit_prologue (void)\n   int using_store_multiple;\n   HOST_WIDE_INT sp_offset = 0;\n   \n-   if (TARGET_SPE_ABI && info->spe_64bit_regs_used != 0)\n-     {\n-       reg_mode = V2SImode;\n-       reg_size = 8;\n-     }\n+  if (TARGET_FIX_AND_CONTINUE)\n+    {\n+      /* gdb on darwin arranges to forward a function from the old\n+\t address by modifying the first 4 instructions of the function\n+\t to branch to the overriding function.  This is necessary to\n+\t permit function pointers that point to the old function to\n+\t actually forward to the new function.  */\n+      emit_insn (gen_nop ());\n+      emit_insn (gen_nop ());\n+      emit_insn (gen_nop ());\n+      emit_insn (gen_nop ());\n+    }\n+\n+  if (TARGET_SPE_ABI && info->spe_64bit_regs_used != 0)\n+    {\n+      reg_mode = V2SImode;\n+      reg_size = 8;\n+    }\n \n   using_store_multiple = (TARGET_MULTIPLE && ! TARGET_POWERPC64\n \t\t\t  && (!TARGET_SPE_ABI"}, {"sha": "72f0af871f2a9536310c08a9b3d168152f9e5307", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699c914ac9882aa4435d4e5c6cb259cbb37d4645/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699c914ac9882aa4435d4e5c6cb259cbb37d4645/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=699c914ac9882aa4435d4e5c6cb259cbb37d4645", "patch": "@@ -7010,6 +7010,17 @@ without that switch.  Using this switch may require recompiling all\n other modules in a program, including system libraries.  Use this \n switch to conform to a non-default data model.\n \n+@item -mfix-and-continue\n+@itemx -ffix-and-continue\n+@itemx -findirect-data\n+@opindex mfix-and-continue\n+@opindex ffix-and-continue\n+@opindex findirect-data\n+Generate code suitable for fast turn around development.  Needed to\n+enable gdb to dynamically load @code{.o} files into already running\n+programs.  @option{-findirect-data} and @option{-ffix-and-continue}\n+are provided for backwards compatibility.\n+\n @item -all_load\n @opindex all_load\n Loads all members of static archive libraries."}]}