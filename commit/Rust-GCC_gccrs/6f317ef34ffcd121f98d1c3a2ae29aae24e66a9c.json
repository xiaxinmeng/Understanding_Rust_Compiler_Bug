{"sha": "6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYzMTdlZjM0ZmZjZDEyMWY5OGQxYzNhMmFlMjlhYWUyNGU2NmE5Yw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-12-29T09:07:56Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-12-29T09:07:56Z"}, "message": "darwin-tramp.asm: Fix comment formatting.\n\n\t* config/rs6000/darwin-tramp.asm: Fix comment formatting.\n\t* config/rs6000/freebsd.h: Likewise.\n\t* config/rs6000/rs6000.c: Likewise.\n\t* config/sh/sh.c: Likewise.\n\t* config/sh/sh.h: Likewise.\n\nFrom-SVN: r48362", "tree": {"sha": "845651078ae4ffcd866d86aa00a6be6d7f14a33f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/845651078ae4ffcd866d86aa00a6be6d7f14a33f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c/comments", "author": null, "committer": null, "parents": [{"sha": "fac510512c0102c8e62c2054605db6572b62ed1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fac510512c0102c8e62c2054605db6572b62ed1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fac510512c0102c8e62c2054605db6572b62ed1c"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "5142b439cce8be90177e67467cab351133f4f87a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c", "patch": "@@ -1,3 +1,11 @@\n+2001-12-29  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/rs6000/darwin-tramp.asm: Fix comment formatting.\n+\t* config/rs6000/freebsd.h: Likewise.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\t* config/sh/sh.c: Likewise.\n+\t* config/sh/sh.h: Likewise.\n+\n 2001-12-28  Stan Shebs  <shebs@apple.com>\n \n \t* objc/objc-act.c (build_module_descriptor): Make sure the init"}, {"sha": "02c7be67e6fe501dc13a24e281abc71cf7c603f0", "filename": "gcc/config/rs6000/darwin-tramp.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c/gcc%2Fconfig%2Frs6000%2Fdarwin-tramp.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c/gcc%2Fconfig%2Frs6000%2Fdarwin-tramp.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-tramp.asm?ref=6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c", "patch": "@@ -33,7 +33,7 @@\n  *  executable file might be covered by the GNU General Public License.\n  */ \n \n-/* Set up trampolines. */\n+/* Set up trampolines.  */\n \n .text\n \t.align\t2"}, {"sha": "e4b9fc52fc0b52f4b7a946e07619d3ce7c1661c7", "filename": "gcc/config/rs6000/freebsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c/gcc%2Fconfig%2Frs6000%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c/gcc%2Fconfig%2Frs6000%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffreebsd.h?ref=6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c", "patch": "@@ -18,7 +18,7 @@ You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n-/* Override the defaults, which exist to force the proper definition. */\n+/* Override the defaults, which exist to force the proper definition.  */\n \n #undef\tCPP_OS_DEFAULT_SPEC\n #define CPP_OS_DEFAULT_SPEC \"%(cpp_os_freebsd)\""}, {"sha": "2b3587c1050927669d494f1b0867d8664a416b2a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c", "patch": "@@ -722,7 +722,7 @@ xer_operand (op, mode)\n }\n \n /* Return 1 if OP is a signed 8-bit constant.  Int multiplication\n-   by such constants completes more quickly. */\n+   by such constants completes more quickly.  */\n \n int\n s8bit_cint_operand (op, mode)\n@@ -1813,7 +1813,7 @@ rs6000_legitimize_reload_address (x, mode, opnum, type, ind_levels, win)\n       && GET_CODE (XEXP (XEXP (XEXP (x, 1), 0), 1)) == SYMBOL_REF)\n     {\n       /* Result of previous invocation of this function on Darwin\n-\t floating point constant. */\n+\t floating point constant.  */\n       push_reload (XEXP (x, 0), NULL_RTX, &XEXP (x, 0), NULL,\n \t\tBASE_REG_CLASS, Pmode, VOIDmode, 0, 0,\n \t\topnum, (enum reload_type)type);\n@@ -3982,7 +3982,7 @@ altivec_init_builtins (void)\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_16qi\", v16qi_ftype_pchar, ALTIVEC_BUILTIN_LD_INTERNAL_16qi);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_16qi\", void_ftype_pchar_v16qi, ALTIVEC_BUILTIN_ST_INTERNAL_16qi);\n \n-  /* Add the simple ternary operators. */\n+  /* Add the simple ternary operators.  */\n   d = (struct builtin_description *) bdesc_3arg;\n   for (i = 0; i < sizeof (bdesc_3arg) / sizeof *d; i++, d++)\n     {\n@@ -4280,7 +4280,7 @@ expand_block_move (operands)\n     return 1;\n \n   /* store_one_arg depends on expand_block_move to handle at least the size of\n-     reg_parm_stack_space. */\t\n+     reg_parm_stack_space.  */\t\n   if (bytes > (TARGET_POWERPC64 ? 64 : 32))\n     return 0;\n "}, {"sha": "bc8e3146d01d452f17fcb5a17c3bf8db1260bcf7", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c", "patch": "@@ -80,7 +80,7 @@ int pragma_nosave_low_regs;\n    sh_expand_prologue.  */\n int current_function_anonymous_args;\n \n-/* Global variables for machine-dependent things. */\n+/* Global variables for machine-dependent things.  */\n \n /* Which cpu are we scheduling for.  */\n enum processor_type sh_cpu;\n@@ -1455,7 +1455,7 @@ shl_and_kind (left_rtx, mask_rtx, attrp)\n \t      continue;\n \t    }\n \t  /* ??? Could try to put zero extend into initial right shift,\n-\t     or even shift a bit left before the right shift. */\n+\t     or even shift a bit left before the right shift.  */\n \t  /* Determine value of first part of left shift, to get to the\n \t     zero extend cut-off point.  */\n \t  first = width - exact_log2 (lsb2) + right;\n@@ -3236,7 +3236,7 @@ machine_dependent_reorg (first)\n \t\t entirely reliable around libcalls;\n \t\t newlib/libm/math/e_pow.c is a test case.  Sometimes\n \t\t an insn will appear in LOG_LINKS even though it is\n-\t\t not the most recent insn which sets the register. */\n+\t\t not the most recent insn which sets the register.  */\n \n \t      if (foundinsn\n \t\t  && (scanset\n@@ -3846,7 +3846,7 @@ output_stack_adjust (size, reg, temp)\n \temit_insn (gen_addsi3 (reg, reg, GEN_INT (size)));\n       /* Try to do it with two partial adjustments; however, we must make\n \t sure that the stack is properly aligned at all times, in case\n-\t an interrupt occurs between the two partial adjustments. */\n+\t an interrupt occurs between the two partial adjustments.  */\n       else if (CONST_OK_FOR_I (size / 2 & -4)\n \t       && CONST_OK_FOR_I (size - (size / 2 & -4)))\n \t{\n@@ -4082,7 +4082,7 @@ sh_expand_prologue ()\n   extra_push = 0;\n \n   /* This is set by SETUP_VARARGS to indicate that this is a varargs\n-     routine.  Clear it here so that the next function isn't affected. */\n+     routine.  Clear it here so that the next function isn't affected.  */\n   if (current_function_anonymous_args)\n     {\n       current_function_anonymous_args = 0;\n@@ -4268,7 +4268,7 @@ sh_builtin_saveregs ()\n   int bufsize, regno;\n   HOST_WIDE_INT alias_set;\n \n-  /* Allocate block of memory for the regs. */\n+  /* Allocate block of memory for the regs.  */\n   /* ??? If n_intregs + n_floatregs == 0, should we allocate at least 1 byte?\n      Or can assign_stack_local accept a 0 SIZE argument?  */\n   bufsize = (n_intregs * UNITS_PER_WORD) + (n_floatregs * UNITS_PER_WORD);\n@@ -5509,7 +5509,7 @@ nonpic_symbol_mentioned_p (x)\n }\n \n /* Convert a non-PIC address in `orig' to a PIC address using @GOT or\n-   @GOTOFF in `reg'. */\n+   @GOTOFF in `reg'.  */\n rtx\n legitimize_pic_address (orig, mode, reg)\n      rtx orig;"}, {"sha": "8ef12cb3d7c22a378b70c1a7933285bbb90b3182", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=6f317ef34ffcd121f98d1c3a2ae29aae24e66a9c", "patch": "@@ -164,10 +164,10 @@ extern int target_flags;\n /* Nonzero if we should generate code using type 3E insns.  */\n #define TARGET_SH3E (target_flags & SH3E_BIT)\n \n-/* Nonzero if the cache line size is 32. */\n+/* Nonzero if the cache line size is 32.  */\n #define TARGET_CACHE32 (target_flags & HARD_SH4_BIT)\n \n-/* Nonzero if we schedule for a superscalar implementation. */\n+/* Nonzero if we schedule for a superscalar implementation.  */\n #define TARGET_SUPERSCALAR (target_flags & HARD_SH4_BIT)\n \n /* Nonzero if the target has separate instruction and data caches.  */\n@@ -430,7 +430,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    && GET_CODE (PREV_INSN (A_LABEL)) == INSN\t\t\t\t\\\n    && GET_CODE (PATTERN (PREV_INSN (A_LABEL))) == UNSPEC_VOLATILE\t\\\n    && XINT (PATTERN (PREV_INSN (A_LABEL)), 1) == UNSPECV_ALIGN)\t\t\\\n-   /* explicit alignment insn in constant tables. */\t\t\t\\\n+   /* explicit alignment insn in constant tables.  */\t\t\t\\\n   ? INTVAL (XVECEXP (PATTERN (PREV_INSN (A_LABEL)), 0, 0))\t\t\\\n   : 0)\n \n@@ -998,7 +998,7 @@ extern const enum reg_class reg_class_from_letter[];\n   ((TYPE) != 0\t\t\t\t\t\t\\\n    && (TREE_CODE (TYPE_SIZE (TYPE)) != INTEGER_CST\t\\\n        || TREE_ADDRESSABLE (TYPE)))\n-/* Some subroutine macros specific to this machine. */\n+/* Some subroutine macros specific to this machine.  */\n \n #define BASE_RETURN_VALUE_REG(MODE) \\\n   ((TARGET_SH3E && ((MODE) == SFmode))\t\t\t\\\n@@ -1046,7 +1046,7 @@ extern const enum reg_class reg_class_from_letter[];\n #define LIBCALL_VALUE(MODE) \\\n   gen_rtx_REG ((MODE), BASE_RETURN_VALUE_REG (MODE));\n \n-/* 1 if N is a possible register number for a function value. */\n+/* 1 if N is a possible register number for a function value.  */\n #define FUNCTION_VALUE_REGNO_P(REGNO) \\\n   ((REGNO) == FIRST_RET_REG || (TARGET_SH3E && (REGNO) == FIRST_FP_RET_REG))\n \n@@ -1134,7 +1134,7 @@ struct sh_args {\n \t  : ROUND_ADVANCE (GET_MODE_SIZE (MODE)))))\n \n /* Return boolean indicating arg of mode MODE will be passed in a reg.\n-   This macro is only used in this file. */\n+   This macro is only used in this file.  */\n \n #define PASS_IN_REG_P(CUM, MODE, TYPE) \\\n   (((TYPE) == 0 \\\n@@ -1642,7 +1642,7 @@ extern int current_function_anonymous_args;\n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table.\n-   Do not define this if the table should contain absolute addresses. */\n+   Do not define this if the table should contain absolute addresses.  */\n #define CASE_VECTOR_PC_RELATIVE 1\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n@@ -1916,7 +1916,7 @@ while (0)\n    specified as the number of bits.\n \n    Try to use function `asm_output_aligned_bss' defined in file\n-   `varasm.c' when defining this macro. */\n+   `varasm.c' when defining this macro.  */\n #ifndef ASM_OUTPUT_ALIGNED_BSS\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n@@ -2021,11 +2021,11 @@ extern char fp_reg_names[][5];\n    assemble_name ((STREAM), (NAME)),\t\t\\\n    fputc ('\\n', (STREAM)))\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n #define USER_LABEL_PREFIX \"_\"\n \n-/* The prefix to add to an internally generated label. */\n+/* The prefix to add to an internally generated label.  */\n \n #define LOCAL_LABEL_PREFIX \"\"\n "}]}