{"sha": "d38a30c995c5d7abf7112f68c56a6f70d1e94019", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM4YTMwYzk5NWM1ZDdhYmY3MTEyZjY4YzU2YTZmNzBkMWU5NDAxOQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-03-26T16:59:23Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-03-26T16:59:23Z"}, "message": "combine.c (try_combine): Use memcpy, not bcopy.\n\n\t* combine.c (try_combine): Use memcpy, not bcopy.\n\n\t* genattrtab.c (expand_units): Likewise.\n\nFrom-SVN: r40849", "tree": {"sha": "4e43f480ff38b940c69fd4080f409f62252f2d57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e43f480ff38b940c69fd4080f409f62252f2d57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d38a30c995c5d7abf7112f68c56a6f70d1e94019", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38a30c995c5d7abf7112f68c56a6f70d1e94019", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d38a30c995c5d7abf7112f68c56a6f70d1e94019", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38a30c995c5d7abf7112f68c56a6f70d1e94019/comments", "author": null, "committer": null, "parents": [{"sha": "cc2e591b48e51df008d4e09d1f67f1195f8cbeb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc2e591b48e51df008d4e09d1f67f1195f8cbeb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc2e591b48e51df008d4e09d1f67f1195f8cbeb5"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "200f0426559af92d08b6036214066959c536500f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a30c995c5d7abf7112f68c56a6f70d1e94019/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a30c995c5d7abf7112f68c56a6f70d1e94019/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d38a30c995c5d7abf7112f68c56a6f70d1e94019", "patch": "@@ -1,3 +1,9 @@\n+2001-03-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* combine.c (try_combine): Use memcpy, not bcopy.\n+\n+\t* genattrtab.c (expand_units): Likewise.\n+\n Mon Mar 26 15:55:08 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (push mem DI peep2): New."}, {"sha": "4a148b9ce7ab97f4798e8154c63c3f344fe0f6fb", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a30c995c5d7abf7112f68c56a6f70d1e94019/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a30c995c5d7abf7112f68c56a6f70d1e94019/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=d38a30c995c5d7abf7112f68c56a6f70d1e94019", "patch": "@@ -1998,8 +1998,8 @@ try_combine (i3, i2, i1, new_direct_jump_p)\n \t  rtvec old = XVEC (newpat, 0);\n \t  total_sets = XVECLEN (newpat, 0) + added_sets_1 + added_sets_2;\n \t  newpat = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (total_sets));\n-\t  bcopy ((char *) &old->elem[0], (char *) XVEC (newpat, 0)->elem,\n-\t\t sizeof (old->elem[0]) * old->num_elem);\n+\t  memcpy (XVEC (newpat, 0)->elem, &old->elem[0],\n+\t\t  sizeof (old->elem[0]) * old->num_elem);\n \t}\n       else\n \t{"}, {"sha": "b749e97013e085c7a7b1fb08845530c6e4ef40a7", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a30c995c5d7abf7112f68c56a6f70d1e94019/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a30c995c5d7abf7112f68c56a6f70d1e94019/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=d38a30c995c5d7abf7112f68c56a6f70d1e94019", "patch": "@@ -2010,8 +2010,8 @@ expand_units ()\n \t    * sizeof (struct function_unit_op *));\n \n   for (unit = units, i = 0; unit; i += unit->num_opclasses, unit = unit->next)\n-    bcopy ((char *) unit_ops[unit->num], (char *) &op_array[i],\n-\t   unit->num_opclasses * sizeof (struct function_unit_op *));\n+    memcpy (&op_array[i], unit_ops[unit->num],\n+\t    unit->num_opclasses * sizeof (struct function_unit_op *));\n \n   /* Compute the ready cost function for each unit by computing the\n      condition for each non-default value.  */"}]}