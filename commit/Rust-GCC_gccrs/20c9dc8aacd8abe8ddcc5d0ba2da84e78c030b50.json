{"sha": "20c9dc8aacd8abe8ddcc5d0ba2da84e78c030b50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBjOWRjOGFhY2Q4YWJlOGRkY2M1ZDBiYTJkYTg0ZTc4YzAzMGI1MA==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-07-15T14:53:28Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-07-15T14:53:28Z"}, "message": "re PR libfortran/15234 (libgfortran doesn't compile on Tru64 UNIX V4.0F)\n\n PR fortran/15234\n* trans-array.c gfc_trans_g77_array,\ngfc_trans_dummy_array_bias): Don't call gfc_trans_string_init\nfor assumed length characters.\n(gfc_conv_expr_descriptor): Set se->string_length if dealing\nwith a character expression.\n(gfc_cvonv_array_parameter): Pass string length when passing\ncharacter array according to g77 conventions.\n\nFrom-SVN: r84752", "tree": {"sha": "54f96d6b707d2be4133c619d8edf4b68d3546d14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54f96d6b707d2be4133c619d8edf4b68d3546d14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20c9dc8aacd8abe8ddcc5d0ba2da84e78c030b50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20c9dc8aacd8abe8ddcc5d0ba2da84e78c030b50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20c9dc8aacd8abe8ddcc5d0ba2da84e78c030b50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20c9dc8aacd8abe8ddcc5d0ba2da84e78c030b50/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a12baf9804e13ecbb01d643bef9f227816aa236f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a12baf9804e13ecbb01d643bef9f227816aa236f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a12baf9804e13ecbb01d643bef9f227816aa236f"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "687eeab4449db2ad69a089c19c4d0ff78ef7e347", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20c9dc8aacd8abe8ddcc5d0ba2da84e78c030b50/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20c9dc8aacd8abe8ddcc5d0ba2da84e78c030b50/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=20c9dc8aacd8abe8ddcc5d0ba2da84e78c030b50", "patch": "@@ -1,3 +1,14 @@\n+2004-07-15  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+ \tPR fortran/15234\n+\t* trans-array.c gfc_trans_g77_array,\n+\tgfc_trans_dummy_array_bias): Don't call gfc_trans_string_init\n+\tfor assumed length characters.\n+\t(gfc_conv_expr_descriptor): Set se->string_length if dealing\n+\twith a character expression.\n+\t(gfc_cvonv_array_parameter): Pass string length when passing\n+\tcharacter array according to g77 conventions.\n+\n 2004-07-12  Paul Brook  <paul@codesourcery.com>\n \n \t* expr.c (gfc_check_assign_symbol): Handle pointer assignments."}, {"sha": "7ba677ea82ce363ab2d300a2165733beed64b7f6", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20c9dc8aacd8abe8ddcc5d0ba2da84e78c030b50/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20c9dc8aacd8abe8ddcc5d0ba2da84e78c030b50/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=20c9dc8aacd8abe8ddcc5d0ba2da84e78c030b50", "patch": "@@ -2947,7 +2947,7 @@ gfc_trans_g77_array (gfc_symbol * sym, tree body)\n   gfc_start_block (&block);\n \n   if (sym->ts.type == BT_CHARACTER\n-      && !INTEGER_CST_P (sym->ts.cl->backend_decl))\n+      && TREE_CODE (sym->ts.cl->backend_decl) == VAR_DECL)\n     gfc_trans_init_string_length (sym->ts.cl, &block);\n \n   /* Evaluate the bounds of the array.  */\n@@ -3026,7 +3026,7 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc, tree body)\n   gfc_start_block (&block);\n \n   if (sym->ts.type == BT_CHARACTER\n-      && !INTEGER_CST_P (sym->ts.cl->backend_decl))\n+      && TREE_CODE (sym->ts.cl->backend_decl) == VAR_DECL)\n     gfc_trans_init_string_length (sym->ts.cl, &block);\n \n   checkparm = (sym->as->type == AS_EXPLICIT && flag_bounds_check);\n@@ -3359,6 +3359,8 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n \t    {\n \t      se->expr = desc;\n \t    }\n+\t  if (expr->ts.type == BT_CHARACTER)\n+\t    se->string_length = expr->symtree->n.sym->ts.cl->backend_decl;\n \t  return;\n \t}\n     }\n@@ -3390,7 +3392,12 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n       loop.temp_ss->type = GFC_SS_TEMP;\n       loop.temp_ss->next = gfc_ss_terminator;\n       loop.temp_ss->data.temp.type = gfc_typenode_for_spec (&expr->ts);\n-      loop.temp_ss->data.temp.string_length = NULL;\n+      /* Which can hold our string, if present.  */\n+      if (expr->ts.type == BT_CHARACTER)\n+\tse->string_length = loop.temp_ss->data.temp.string_length\n+\t  = TYPE_SIZE_UNIT (loop.temp_ss->data.temp.type);\n+      else\n+\tloop.temp_ss->data.temp.string_length = NULL;\n       loop.temp_ss->data.temp.dimen = loop.dimen;\n       gfc_add_ss_to_loop (&loop, loop.temp_ss);\n     }\n@@ -3451,6 +3458,10 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n       tree to;\n       tree base;\n \n+      /* set the string_length for a character array.  */\n+      if (expr->ts.type == BT_CHARACTER)\n+\tse->string_length = expr->symtree->n.sym->ts.cl->backend_decl;\n+\n       /* Otherwise make a new descriptor and point it at the section we\n          want.  The loop variable limits will be the limits of the section.\n        */\n@@ -3625,6 +3636,8 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77)\n     {\n       sym = expr->symtree->n.sym;\n       tmp = gfc_get_symbol_decl (sym);\n+      if (sym->ts.type == BT_CHARACTER)\n+\tse->string_length = sym->ts.cl->backend_decl;\n       if (!sym->attr.pointer && sym->as->type != AS_ASSUMED_SHAPE \n           && !sym->attr.allocatable)\n         {"}]}