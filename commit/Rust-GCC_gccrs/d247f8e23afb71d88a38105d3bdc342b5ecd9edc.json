{"sha": "d247f8e23afb71d88a38105d3bdc342b5ecd9edc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI0N2Y4ZTIzYWZiNzFkODhhMzgxMDVkM2JkYzM0MmI1ZWNkOWVkYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-04-19T12:13:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-04-19T12:13:04Z"}, "message": "gimple-walk.h (struct walk_stmt_info): Add stmt member.\n\n2016-04-19  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-walk.h (struct walk_stmt_info): Add stmt member.\n\t* gimple-walk.c (walk_gimple_op): Initialize it.\n\t(walk_gimple_asm): Set wi->is_lhs before each callback invocation.\n\t* tree-inline.c (remap_gimple_op_r): Set SSA_NAME_DEF_STMT when\n\tremapping SSA names of defs.\n\t(copy_bb): Remove walk over all SSA defs and SSA_NAME_DEF_STMT\n\tadjustment.\n\nFrom-SVN: r235190", "tree": {"sha": "221ac9b3dfe9da860699b5550f4d105eeac0c368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/221ac9b3dfe9da860699b5550f4d105eeac0c368"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d247f8e23afb71d88a38105d3bdc342b5ecd9edc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d247f8e23afb71d88a38105d3bdc342b5ecd9edc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d247f8e23afb71d88a38105d3bdc342b5ecd9edc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d247f8e23afb71d88a38105d3bdc342b5ecd9edc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "987b67f17c8759c47f83732b9336fbe0795d2baf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/987b67f17c8759c47f83732b9336fbe0795d2baf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/987b67f17c8759c47f83732b9336fbe0795d2baf"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "39bbca2e1c8fc8a8faa9d1259da39cee1314b71a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d247f8e23afb71d88a38105d3bdc342b5ecd9edc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d247f8e23afb71d88a38105d3bdc342b5ecd9edc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d247f8e23afb71d88a38105d3bdc342b5ecd9edc", "patch": "@@ -1,3 +1,13 @@\n+2016-04-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-walk.h (struct walk_stmt_info): Add stmt member.\n+\t* gimple-walk.c (walk_gimple_op): Initialize it.\n+\t(walk_gimple_asm): Set wi->is_lhs before each callback invocation.\n+\t* tree-inline.c (remap_gimple_op_r): Set SSA_NAME_DEF_STMT when\n+\tremapping SSA names of defs.\n+\t(copy_bb): Remove walk over all SSA defs and SSA_NAME_DEF_STMT\n+\tadjustment.\n+\n 2016-04-18  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR middle-end/70689"}, {"sha": "be501c5cecbd9f666d2cf92bacc4cae7d0fc49ff", "filename": "gcc/gimple-walk.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d247f8e23afb71d88a38105d3bdc342b5ecd9edc/gcc%2Fgimple-walk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d247f8e23afb71d88a38105d3bdc342b5ecd9edc/gcc%2Fgimple-walk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-walk.c?ref=d247f8e23afb71d88a38105d3bdc342b5ecd9edc", "patch": "@@ -100,9 +100,6 @@ walk_gimple_asm (gasm *stmt, walk_tree_fn callback_op,\n   noutputs = gimple_asm_noutputs (stmt);\n   oconstraints = (const char **) alloca ((noutputs) * sizeof (const char *));\n \n-  if (wi)\n-    wi->is_lhs = true;\n-\n   for (i = 0; i < noutputs; i++)\n     {\n       op = gimple_asm_output_op (stmt, i);\n@@ -114,6 +111,8 @@ walk_gimple_asm (gasm *stmt, walk_tree_fn callback_op,\n \t\t\t\t       &allows_reg, &is_inout))\n \t    wi->val_only = (allows_reg || !allows_mem);\n \t}\n+      if (wi)\n+\twi->is_lhs = true;\n       ret = walk_tree (&TREE_VALUE (op), callback_op, wi, NULL);\n       if (ret)\n \treturn ret;\n@@ -182,6 +181,9 @@ walk_gimple_op (gimple *stmt, walk_tree_fn callback_op,\n   unsigned i;\n   tree ret = NULL_TREE;\n \n+  if (wi)\n+    wi->stmt = stmt;\n+\n   switch (gimple_code (stmt))\n     {\n     case GIMPLE_ASSIGN:"}, {"sha": "3ef868a647ff519ca1c97cff400bfbfbd171c449", "filename": "gcc/gimple-walk.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d247f8e23afb71d88a38105d3bdc342b5ecd9edc/gcc%2Fgimple-walk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d247f8e23afb71d88a38105d3bdc342b5ecd9edc/gcc%2Fgimple-walk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-walk.h?ref=d247f8e23afb71d88a38105d3bdc342b5ecd9edc", "patch": "@@ -28,6 +28,7 @@ struct walk_stmt_info\n {\n   /* Points to the current statement being walked.  */\n   gimple_stmt_iterator gsi;\n+  gimple *stmt;\n \n   /* Additional data that the callback functions may want to carry\n      through the recursion.  */"}, {"sha": "015a9074b787a0e39f6b23efb99ff16b00de45c9", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d247f8e23afb71d88a38105d3bdc342b5ecd9edc/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d247f8e23afb71d88a38105d3bdc342b5ecd9edc/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=d247f8e23afb71d88a38105d3bdc342b5ecd9edc", "patch": "@@ -863,10 +863,16 @@ remap_gimple_op_r (tree *tp, int *walk_subtrees, void *data)\n   copy_body_data *id = (copy_body_data *) wi_p->info;\n   tree fn = id->src_fn;\n \n+  /* For recursive invocations this is no longer the LHS itself.  */\n+  bool is_lhs = wi_p->is_lhs;\n+  wi_p->is_lhs = false;\n+\n   if (TREE_CODE (*tp) == SSA_NAME)\n     {\n       *tp = remap_ssa_name (*tp, id);\n       *walk_subtrees = 0;\n+      if (is_lhs)\n+\tSSA_NAME_DEF_STMT (*tp) = wi_p->stmt;\n       return NULL;\n     }\n   else if (auto_var_in_fn_p (*tp, fn))\n@@ -2095,16 +2101,6 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale,\n \t  maybe_duplicate_eh_stmt_fn (cfun, stmt, id->src_cfun, orig_stmt,\n \t\t\t\t      id->eh_map, id->eh_lp_nr);\n \n-\t  if (gimple_in_ssa_p (cfun) && !is_gimple_debug (stmt))\n-\t    {\n-\t      ssa_op_iter i;\n-\t      tree def;\n-\n-\t      FOR_EACH_SSA_TREE_OPERAND (def, stmt, i, SSA_OP_DEF)\n-\t\tif (TREE_CODE (def) == SSA_NAME)\n-\t\t  SSA_NAME_DEF_STMT (def) = stmt;\n-\t    }\n-\n \t  gsi_next (&copy_gsi);\n \t}\n       while (!gsi_end_p (copy_gsi));"}]}