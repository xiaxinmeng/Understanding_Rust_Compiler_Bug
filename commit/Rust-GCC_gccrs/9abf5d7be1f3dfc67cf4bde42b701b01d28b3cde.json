{"sha": "9abf5d7be1f3dfc67cf4bde42b701b01d28b3cde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFiZjVkN2JlMWYzZGZjNjdjZjRiZGU0MmI3MDFiMDFkMjhiM2NkZQ==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2010-03-19T15:58:37Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2010-03-19T15:58:37Z"}, "message": "re PR target/43399 (bootstrap failure in stage1)\n\nFix PR target/43399\n\n2010-03-19  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n       PR target/43399\n       * config/arm/arm.c (emit_multi_reg_push): Update comments.\n       Use PRE_MODIFY instead of PRE_DEC.\n       (emit_sfm): Use PRE_MODIFY instead of PRE_DEC.\n       (vfp_emit_fstmd): Likewise.\n\nFrom-SVN: r157574", "tree": {"sha": "f2326eae6c089889b268ed39f524d1ce1d47fd7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2326eae6c089889b268ed39f524d1ce1d47fd7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9abf5d7be1f3dfc67cf4bde42b701b01d28b3cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9abf5d7be1f3dfc67cf4bde42b701b01d28b3cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9abf5d7be1f3dfc67cf4bde42b701b01d28b3cde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9abf5d7be1f3dfc67cf4bde42b701b01d28b3cde/comments", "author": null, "committer": null, "parents": [{"sha": "73489878b694718a15b8c38b2edd8fa6efa0e78b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73489878b694718a15b8c38b2edd8fa6efa0e78b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73489878b694718a15b8c38b2edd8fa6efa0e78b"}], "stats": {"total": 80, "additions": 56, "deletions": 24}, "files": [{"sha": "2c449aaf7dc60e6956d06b2dc2fb077136853af7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9abf5d7be1f3dfc67cf4bde42b701b01d28b3cde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9abf5d7be1f3dfc67cf4bde42b701b01d28b3cde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9abf5d7be1f3dfc67cf4bde42b701b01d28b3cde", "patch": "@@ -1,3 +1,11 @@\n+2010-03-19  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\tPR target/43399\n+\t* config/arm/arm.c (emit_multi_reg_push): Update comments.\n+\tUse PRE_MODIFY instead of PRE_DEC.\n+\t(emit_sfm): Use PRE_MODIFY instead of PRE_DEC.\n+\t(vfp_emit_fstmd): Likewise.\n+\n 2010-03-19  Michael Matz  <matz@suse.de>\n \n \tPR target/43305"}, {"sha": "864d3aff56b5a60fbc5cdc27f195e18c77e0ec2c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 48, "deletions": 24, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9abf5d7be1f3dfc67cf4bde42b701b01d28b3cde/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9abf5d7be1f3dfc67cf4bde42b701b01d28b3cde/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9abf5d7be1f3dfc67cf4bde42b701b01d28b3cde", "patch": "@@ -11655,9 +11655,14 @@ vfp_emit_fstmd (int base_reg, int count)\n \n   XVECEXP (par, 0, 0)\n     = gen_rtx_SET (VOIDmode,\n-\t\t   gen_frame_mem (BLKmode,\n-\t\t\t\t  gen_rtx_PRE_DEC (BLKmode,\n-\t\t\t\t\t\t   stack_pointer_rtx)),\n+\t\t   gen_frame_mem\n+\t\t   (BLKmode,\n+\t\t    gen_rtx_PRE_MODIFY (Pmode,\n+\t\t\t\t\tstack_pointer_rtx,\n+\t\t\t\t\tplus_constant\n+\t\t\t\t\t(stack_pointer_rtx,\n+\t\t\t\t\t - (count * 8)))\n+\t\t    ),\n \t\t   gen_rtx_UNSPEC (BLKmode,\n \t\t\t\t   gen_rtvec (1, reg),\n \t\t\t\t   UNSPEC_PUSH_MULT));\n@@ -13910,16 +13915,17 @@ emit_multi_reg_push (unsigned long mask)\n \n   /* For the body of the insn we are going to generate an UNSPEC in\n      parallel with several USEs.  This allows the insn to be recognized\n-     by the push_multi pattern in the arm.md file.  The insn looks\n-     something like this:\n+     by the push_multi pattern in the arm.md file.\n+\n+     The body of the insn looks something like this:\n \n        (parallel [\n-           (set (mem:BLK (pre_dec:BLK (reg:SI sp)))\n+           (set (mem:BLK (pre_modify:SI (reg:SI sp)\n+\t                                (const_int:SI <num>)))\n \t        (unspec:BLK [(reg:SI r4)] UNSPEC_PUSH_MULT))\n-           (use (reg:SI 11 fp))\n-           (use (reg:SI 12 ip))\n-           (use (reg:SI 14 lr))\n-           (use (reg:SI 15 pc))\n+           (use (reg:SI XX))\n+           (use (reg:SI YY))\n+\t   ...\n         ])\n \n      For the frame note however, we try to be more explicit and actually\n@@ -13932,13 +13938,20 @@ emit_multi_reg_push (unsigned long mask)\n       (sequence [\n            (set (reg:SI sp) (plus:SI (reg:SI sp) (const_int -20)))\n            (set (mem:SI (reg:SI sp)) (reg:SI r4))\n-           (set (mem:SI (plus:SI (reg:SI sp) (const_int 4))) (reg:SI fp))\n-           (set (mem:SI (plus:SI (reg:SI sp) (const_int 8))) (reg:SI ip))\n-           (set (mem:SI (plus:SI (reg:SI sp) (const_int 12))) (reg:SI lr))\n+           (set (mem:SI (plus:SI (reg:SI sp) (const_int 4))) (reg:SI XX))\n+           (set (mem:SI (plus:SI (reg:SI sp) (const_int 8))) (reg:SI YY))\n+\t   ...\n         ])\n \n-      This sequence is used both by the code to support stack unwinding for\n-      exceptions handlers and the code to generate dwarf2 frame debugging.  */\n+     FIXME:: In an ideal world the PRE_MODIFY would not exist and\n+     instead we'd have a parallel expression detailing all\n+     the stores to the various memory addresses so that debug\n+     information is more up-to-date. Remember however while writing\n+     this to take care of the constraints with the push instruction.\n+\n+     Note also that this has to be taken care of for the VFP registers.\n+\n+     For more see PR43399.  */\n \n   par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (num_regs));\n   dwarf = gen_rtx_SEQUENCE (VOIDmode, rtvec_alloc (num_dwarf_regs + 1));\n@@ -13952,9 +13965,14 @@ emit_multi_reg_push (unsigned long mask)\n \n \t  XVECEXP (par, 0, 0)\n \t    = gen_rtx_SET (VOIDmode,\n-\t\t\t   gen_frame_mem (BLKmode,\n-\t\t\t\t\t  gen_rtx_PRE_DEC (BLKmode,\n-\t\t\t\t\t\t\t   stack_pointer_rtx)),\n+\t\t\t   gen_frame_mem\n+\t\t\t   (BLKmode,\n+\t\t\t    gen_rtx_PRE_MODIFY (Pmode,\n+\t\t\t\t\t\tstack_pointer_rtx,\n+\t\t\t\t\t\tplus_constant\n+\t\t\t\t\t\t(stack_pointer_rtx,\n+\t\t\t\t\t\t -4 * num_regs))\n+\t\t\t    ),\n \t\t\t   gen_rtx_UNSPEC (BLKmode,\n \t\t\t\t\t   gen_rtvec (1, reg),\n \t\t\t\t\t   UNSPEC_PUSH_MULT));\n@@ -13985,9 +14003,10 @@ emit_multi_reg_push (unsigned long mask)\n \t    {\n \t      tmp\n \t\t= gen_rtx_SET (VOIDmode,\n-\t\t\t       gen_frame_mem (SImode,\n-\t\t\t\t\t      plus_constant (stack_pointer_rtx,\n-\t\t\t\t\t\t\t     4 * j)),\n+\t\t\t       gen_frame_mem\n+\t\t\t       (SImode,\n+\t\t\t\tplus_constant (stack_pointer_rtx,\n+\t\t\t\t\t       4 * j)),\n \t\t\t       reg);\n \t      RTX_FRAME_RELATED_P (tmp) = 1;\n \t      XVECEXP (dwarf, 0, dwarf_par_index++) = tmp;\n@@ -14039,9 +14058,14 @@ emit_sfm (int base_reg, int count)\n \n   XVECEXP (par, 0, 0)\n     = gen_rtx_SET (VOIDmode,\n-\t\t   gen_frame_mem (BLKmode,\n-\t\t\t\t  gen_rtx_PRE_DEC (BLKmode,\n-\t\t\t\t\t\t   stack_pointer_rtx)),\n+\t\t   gen_frame_mem\n+\t\t   (BLKmode,\n+\t\t    gen_rtx_PRE_MODIFY (Pmode,\n+\t\t\t\t\tstack_pointer_rtx,\n+\t\t\t\t\tplus_constant\n+\t\t\t\t\t(stack_pointer_rtx,\n+\t\t\t\t\t -12 * count))\n+\t\t    ),\n \t\t   gen_rtx_UNSPEC (BLKmode,\n \t\t\t\t   gen_rtvec (1, reg),\n \t\t\t\t   UNSPEC_PUSH_MULT));"}]}