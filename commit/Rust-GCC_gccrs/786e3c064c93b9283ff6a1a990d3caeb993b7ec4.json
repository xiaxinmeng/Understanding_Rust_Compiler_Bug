{"sha": "786e3c064c93b9283ff6a1a990d3caeb993b7ec4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg2ZTNjMDY0YzkzYjkyODNmZjZhMWE5OTBkM2NhZWI5OTNiN2VjNA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2016-01-19T14:09:49Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-01-19T14:09:49Z"}, "message": "[PATCH 2/4] Add support for float CCMP\n\n    2015-01-19  Wilco Dijkstra  <wdijkstr@arm.com>\n\n    gcc/\n        * ccmp.c (ccmp_candidate_p): Remove integer-only restriction.\n        * config/aarch64/aarch64.md (fccmp<mode>): New pattern.\n        (fccmpe<mode>): Likewise.\n        (fcmp): Rename to fcmp and globalize pattern.\n        (fcmpe): Likewise.\n        * config/aarch64/aarch64.c (aarch64_gen_ccmp_first): Add FP support.\n        (aarch64_gen_ccmp_next): Add FP support.\n\n    gcc/testsuite/\n\n        * gcc.target/aarch64/ccmp_1.c: New testcase.\n\nFrom-SVN: r232563", "tree": {"sha": "8f182bac4e4477d6579407330483b873df3787df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f182bac4e4477d6579407330483b873df3787df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/786e3c064c93b9283ff6a1a990d3caeb993b7ec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786e3c064c93b9283ff6a1a990d3caeb993b7ec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/786e3c064c93b9283ff6a1a990d3caeb993b7ec4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786e3c064c93b9283ff6a1a990d3caeb993b7ec4/comments", "author": null, "committer": null, "parents": [{"sha": "1e2970064a996338c20f55b4b900ac678d0ceb94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2970064a996338c20f55b4b900ac678d0ceb94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2970064a996338c20f55b4b900ac678d0ceb94"}], "stats": {"total": 162, "additions": 154, "deletions": 8}, "files": [{"sha": "319bb92b2b89a17039c9a6eb2339d494a53c2925", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786e3c064c93b9283ff6a1a990d3caeb993b7ec4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786e3c064c93b9283ff6a1a990d3caeb993b7ec4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=786e3c064c93b9283ff6a1a990d3caeb993b7ec4", "patch": "@@ -1,5 +1,15 @@\n 2016-01-19  Wilco Dijkstra  <wdijkstr@arm.com>\n \n+\t* ccmp.c (ccmp_candidate_p): Remove integer-only restriction.\n+\t* config/aarch64/aarch64.md (fccmp<mode>): New pattern.\n+\t(fccmpe<mode>): Likewise.\n+\t(fcmp): Rename to fcmp and globalize pattern.\n+\t(fcmpe): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_gen_ccmp_first): Add FP support.\n+\t(aarch64_gen_ccmp_next): Add FP support.\n+\n+2015-01-19  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n \t* target.def (gen_ccmp_first): Update documentation.\n \t(gen_ccmp_next): Likewise.\n \t* doc/tm.texi (gen_ccmp_first): Update documentation."}, {"sha": "a393d3546f3b453408ccbb3cfd6907f647a3ed86", "filename": "gcc/ccmp.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786e3c064c93b9283ff6a1a990d3caeb993b7ec4/gcc%2Fccmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786e3c064c93b9283ff6a1a990d3caeb993b7ec4/gcc%2Fccmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fccmp.c?ref=786e3c064c93b9283ff6a1a990d3caeb993b7ec4", "patch": "@@ -96,12 +96,6 @@ ccmp_candidate_p (gimple *g)\n       || gimple_bb (gs0) != gimple_bb (g))\n     return false;\n \n-  if (!(INTEGRAL_TYPE_P (TREE_TYPE (gimple_assign_rhs1 (gs0)))\n-       || POINTER_TYPE_P (TREE_TYPE (gimple_assign_rhs1 (gs0))))\n-      || !(INTEGRAL_TYPE_P (TREE_TYPE (gimple_assign_rhs1 (gs1)))\n-\t   || POINTER_TYPE_P (TREE_TYPE (gimple_assign_rhs1 (gs1)))))\n-    return false;\n-\n   tcode0 = gimple_assign_rhs_code (gs0);\n   tcode1 = gimple_assign_rhs_code (gs1);\n   if (TREE_CODE_CLASS (tcode0) == tcc_comparison"}, {"sha": "9e9b424622164eecdd8aae1919efe48f2cbf210e", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786e3c064c93b9283ff6a1a990d3caeb993b7ec4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786e3c064c93b9283ff6a1a990d3caeb993b7ec4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=786e3c064c93b9283ff6a1a990d3caeb993b7ec4", "patch": "@@ -12964,6 +12964,18 @@ aarch64_gen_ccmp_first (rtx *prep_seq, rtx *gen_seq,\n       icode = CODE_FOR_cmpdi;\n       break;\n \n+    case SFmode:\n+      cmp_mode = SFmode;\n+      cc_mode = aarch64_select_cc_mode ((rtx_code) code, op0, op1);\n+      icode = cc_mode == CCFPEmode ? CODE_FOR_fcmpesf : CODE_FOR_fcmpsf;\n+      break;\n+\n+    case DFmode:\n+      cmp_mode = DFmode;\n+      cc_mode = aarch64_select_cc_mode ((rtx_code) code, op0, op1);\n+      icode = cc_mode == CCFPEmode ? CODE_FOR_fcmpedf : CODE_FOR_fcmpdf;\n+      break;\n+\n     default:\n       end_sequence ();\n       return NULL_RTX;\n@@ -13027,6 +13039,18 @@ aarch64_gen_ccmp_next (rtx *prep_seq, rtx *gen_seq, rtx prev, int cmp_code,\n       icode = CODE_FOR_ccmpdi;\n       break;\n \n+    case SFmode:\n+      cmp_mode = SFmode;\n+      cc_mode = aarch64_select_cc_mode ((rtx_code) cmp_code, op0, op1);\n+      icode = cc_mode == CCFPEmode ? CODE_FOR_fccmpesf : CODE_FOR_fccmpsf;\n+      break;\n+\n+    case DFmode:\n+      cmp_mode = DFmode;\n+      cc_mode = aarch64_select_cc_mode ((rtx_code) cmp_code, op0, op1);\n+      icode = cc_mode == CCFPEmode ? CODE_FOR_fccmpedf : CODE_FOR_fccmpdf;\n+      break;\n+\n     default:\n       end_sequence ();\n       return NULL_RTX;"}, {"sha": "2f543aab9676d222d83472993eaca0a49b2ab0f0", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786e3c064c93b9283ff6a1a990d3caeb993b7ec4/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786e3c064c93b9283ff6a1a990d3caeb993b7ec4/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=786e3c064c93b9283ff6a1a990d3caeb993b7ec4", "patch": "@@ -289,6 +289,36 @@\n   [(set_attr \"type\" \"alus_sreg,alus_imm,alus_imm\")]\n )\n \n+(define_insn \"fccmp<mode>\"\n+  [(set (match_operand:CCFP 1 \"cc_register\" \"\")\n+\t(if_then_else:CCFP\n+\t  (match_operator 4 \"aarch64_comparison_operator\"\n+\t   [(match_operand 0 \"cc_register\" \"\")\n+\t    (const_int 0)])\n+\t  (compare:CCFP\n+\t    (match_operand:GPF 2 \"register_operand\" \"w\")\n+\t    (match_operand:GPF 3 \"register_operand\" \"w\"))\n+\t  (match_operand 5 \"immediate_operand\")))]\n+  \"TARGET_FLOAT\"\n+  \"fccmp\\\\t%<s>2, %<s>3, %k5, %m4\"\n+  [(set_attr \"type\" \"fcmp<s>\")]\n+)\n+\n+(define_insn \"fccmpe<mode>\"\n+  [(set (match_operand:CCFPE 1 \"cc_register\" \"\")\n+\t (if_then_else:CCFPE\n+\t  (match_operator 4 \"aarch64_comparison_operator\"\n+\t   [(match_operand 0 \"cc_register\" \"\")\n+\t  (const_int 0)])\n+\t   (compare:CCFPE\n+\t    (match_operand:GPF 2 \"register_operand\" \"w\")\n+\t    (match_operand:GPF 3 \"register_operand\" \"w\"))\n+\t  (match_operand 5 \"immediate_operand\")))]\n+  \"TARGET_FLOAT\"\n+  \"fccmpe\\\\t%<s>2, %<s>3, %k5, %m4\"\n+  [(set_attr \"type\" \"fcmp<s>\")]\n+)\n+\n ;; Expansion of signed mod by a power of 2 using CSNEG.\n ;; For x0 % n where n is a power of 2 produce:\n ;; negs   x1, x0\n@@ -2852,7 +2882,7 @@\n   [(set_attr \"type\" \"alus_sreg,alus_imm,alus_imm\")]\n )\n \n-(define_insn \"*cmp<mode>\"\n+(define_insn \"fcmp<mode>\"\n   [(set (reg:CCFP CC_REGNUM)\n         (compare:CCFP (match_operand:GPF 0 \"register_operand\" \"w,w\")\n \t\t      (match_operand:GPF 1 \"aarch64_fp_compare_operand\" \"Y,w\")))]\n@@ -2863,7 +2893,7 @@\n   [(set_attr \"type\" \"fcmp<s>\")]\n )\n \n-(define_insn \"*cmpe<mode>\"\n+(define_insn \"fcmpe<mode>\"\n   [(set (reg:CCFPE CC_REGNUM)\n         (compare:CCFPE (match_operand:GPF 0 \"register_operand\" \"w,w\")\n \t\t       (match_operand:GPF 1 \"aarch64_fp_compare_operand\" \"Y,w\")))]"}, {"sha": "cd38389af8e0bae62ead3108cd63a03dc1d32070", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786e3c064c93b9283ff6a1a990d3caeb993b7ec4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786e3c064c93b9283ff6a1a990d3caeb993b7ec4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=786e3c064c93b9283ff6a1a990d3caeb993b7ec4", "patch": "@@ -1,3 +1,7 @@\n+2015-01-19  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc.target/aarch64/ccmp_1.c: New testcase.\n+\n 2016-01-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/68586"}, {"sha": "ef077e0f711b0412193d6521b81b89f84a127ee6", "filename": "gcc/testsuite/gcc.target/aarch64/ccmp_1.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786e3c064c93b9283ff6a1a990d3caeb993b7ec4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fccmp_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786e3c064c93b9283ff6a1a990d3caeb993b7ec4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fccmp_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fccmp_1.c?ref=786e3c064c93b9283ff6a1a990d3caeb993b7ec4", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+f1 (int a)\n+{\n+  return a == 17 || a == 32;\n+}\n+\n+int\n+f2 (int a)\n+{\n+  return a == 33 || a == 18;\n+}\n+\n+int\n+f3 (int a, int b)\n+{\n+  return a == 19 && b == 34;\n+}\n+\n+int\n+f4 (int a, int b)\n+{\n+  return a == 35 && b == 20;\n+}\n+\n+int\n+f5 (int a)\n+{\n+  return a == 0 || a == 5;\n+}\n+\n+int\n+f6 (int a)\n+{\n+  return a == 6 || a == 0;\n+}\n+\n+int\n+f7 (int a, int b)\n+{\n+  return a == 0 && b == 7;\n+}\n+\n+int\n+f8 (int a, int b)\n+{\n+  return a == 9 && b == 0;\n+}\n+\n+int\n+f9 (float a, float b)\n+{\n+  return a < 0.0f && a > b;\n+}\n+\n+int\n+f10 (float a, float b)\n+{\n+  return a == b || b == 0.0f;\n+}\n+\n+int\n+f11 (double a, int b)\n+{\n+  return a < 0.0f && b == 30;\n+}\n+\n+int\n+f12 (double a, int b)\n+{\n+  return b == 31 || a == 0.0f;\n+}\n+\n+int\n+f13 (int a, int b)\n+{\n+  a += b;\n+  return a == 3 || a == 0;\n+}\n+\n+/* { dg-final { scan-assembler \"fccmp\\t\" } } */\n+/* { dg-final { scan-assembler \"fccmpe\\t\" } } */"}]}