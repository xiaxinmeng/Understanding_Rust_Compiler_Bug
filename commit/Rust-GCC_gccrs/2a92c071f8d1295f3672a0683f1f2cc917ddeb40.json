{"sha": "2a92c071f8d1295f3672a0683f1f2cc917ddeb40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE5MmMwNzFmOGQxMjk1ZjM2NzJhMDY4M2YxZjJjYzkxN2RkZWI0MA==", "commit": {"author": {"name": "Graham Stott", "email": "grahams@rcp.co.uk", "date": "1998-10-09T16:08:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-10-09T16:08:51Z"}, "message": "flow.c (print_rtl_with_bb): Changed type of in_bb_p to match use.\n\nFri Oct  9 16:03:19 1998  Graham  <grahams@rcp.co.uk>\n        * flow.c (print_rtl_with_bb): Changed type of in_bb_p to match use.\n        * gcc.c (add_preprocessor_option): Correct typo when allocating\n        memory, sizeof() argument had one too many `*'.\n        (add_assembler_option): Likewise.\n        (add_linker_option): Likewise.\n        * gcov.c (output_data): Likewise.\n        * local-alloc.c (memref_used_between_p): Likewise.\n        (update_equiv_regs): Likewise.\n        * loop.c (strength_reduce): Likewise.\n        * reg-stack.c (record_asm_reg_life): Likewise.\n        (subst_asm_stack_reg): Likewise.\n        * reorg.c (dbr_schedule): Likewise.\n\nFrom-SVN: r22964", "tree": {"sha": "e24dc2e8c37807b8a57f438eb8d0c3954a1a2ece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e24dc2e8c37807b8a57f438eb8d0c3954a1a2ece"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a92c071f8d1295f3672a0683f1f2cc917ddeb40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a92c071f8d1295f3672a0683f1f2cc917ddeb40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a92c071f8d1295f3672a0683f1f2cc917ddeb40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a92c071f8d1295f3672a0683f1f2cc917ddeb40/comments", "author": null, "committer": null, "parents": [{"sha": "dc2ede84e6be8d3bac83fd0f3433c1ab71965d2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc2ede84e6be8d3bac83fd0f3433c1ab71965d2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc2ede84e6be8d3bac83fd0f3433c1ab71965d2a"}], "stats": {"total": 62, "additions": 39, "deletions": 23}, "files": [{"sha": "7f05ff0f154d5e60dff56408e25d58071388de7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a92c071f8d1295f3672a0683f1f2cc917ddeb40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a92c071f8d1295f3672a0683f1f2cc917ddeb40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a92c071f8d1295f3672a0683f1f2cc917ddeb40", "patch": "@@ -1,3 +1,18 @@\n+Fri Oct  9 16:03:19 1998  Graham  <grahams@rcp.co.uk>\n+\n+\t* flow.c (print_rtl_with_bb): Changed type of in_bb_p to match use.\n+\t* gcc.c (add_preprocessor_option): Correct typo when allocating\n+\tmemory, sizeof() argument had one too many `*'.\n+\t(add_assembler_option): Likewise.\n+\t(add_linker_option): Likewise.\n+\t* gcov.c (output_data): Likewise.\n+\t* local-alloc.c (memref_used_between_p): Likewise.\n+\t(update_equiv_regs): Likewise.\n+\t* loop.c (strength_reduce): Likewise.\n+\t* reg-stack.c (record_asm_reg_life): Likewise.\n+\t(subst_asm_stack_reg): Likewise.\n+\t* reorg.c (dbr_schedule): Likewise.\n+\n Fri Oct  9 15:57:51 1998  Bernd Schmidt <crux@Pool.Informatik.RWTH-Aachen.DE>\n \n \t* flow.c (life_analysis_1): Break out some functions."}, {"sha": "038c5d718825409d70ca2cede6e3845dad584b93", "filename": "gcc/flow.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a92c071f8d1295f3672a0683f1f2cc917ddeb40/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a92c071f8d1295f3672a0683f1f2cc917ddeb40/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=2a92c071f8d1295f3672a0683f1f2cc917ddeb40", "patch": "@@ -3274,7 +3274,8 @@ print_rtl_with_bb (outf, rtx_first)\n       int max_uid = get_max_uid ();\n       int *start = (int *) alloca (max_uid * sizeof (int));\n       int *end = (int *) alloca (max_uid * sizeof (int));\n-      char *in_bb_p = (char *) alloca (max_uid * sizeof (enum bb_state));\n+      enum bb_state *in_bb_p = (enum bb_state *)\n+\talloca (max_uid * sizeof (enum bb_state));\n \n       for (i = 0; i < max_uid; i++)\n \t{"}, {"sha": "3dc6518256d5780e4eaf58e9beff3ac80a77cf59", "filename": "gcc/gcc.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a92c071f8d1295f3672a0683f1f2cc917ddeb40/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a92c071f8d1295f3672a0683f1f2cc917ddeb40/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=2a92c071f8d1295f3672a0683f1f2cc917ddeb40", "patch": "@@ -2522,11 +2522,11 @@ add_preprocessor_option (option, len)\n \t\t\t\t\t\t\t\t\t\n   if (! preprocessor_options)\t\t\t\t\t\t\n     preprocessor_options\t\t\t\t\t\t\t\n-      = (char **) xmalloc (n_preprocessor_options * sizeof (char **));\t\n+      = (char **) xmalloc (n_preprocessor_options * sizeof (char *));\t\n   else\t\t\t\t\t\t\t\t\t\n     preprocessor_options\t\t\t\t\t\t\t\n       = (char **) xrealloc (preprocessor_options,\t\t\t\t\n-\t\t\t    n_preprocessor_options * sizeof (char **));\t\n+\t\t\t    n_preprocessor_options * sizeof (char *));\t\n   \t\t\t\t\t\t\t\t\t\n   preprocessor_options [n_preprocessor_options - 1] = save_string (option, len);  \n }\n@@ -2540,11 +2540,11 @@ add_assembler_option (option, len)\n \t\t\t\t\t\t\t\t\t\n   if (! assembler_options)\t\t\t\t\t\t\n     assembler_options\t\t\t\t\t\t\t\n-      = (char **) xmalloc (n_assembler_options * sizeof (char **));\t\n+      = (char **) xmalloc (n_assembler_options * sizeof (char *));\t\n   else\t\t\t\t\t\t\t\t\t\n     assembler_options\t\t\t\t\t\t\t\n       = (char **) xrealloc (assembler_options,\t\t\t\t\n-\t\t\t    n_assembler_options * sizeof (char **));\t\n+\t\t\t    n_assembler_options * sizeof (char *));\t\n   \t\t\t\t\t\t\t\t\t\n   assembler_options [n_assembler_options - 1] = save_string (option, len);  \n }\n@@ -2558,11 +2558,11 @@ add_linker_option (option, len)\n \t\t\t\t\t\t\t\t\t\n   if (! linker_options)\t\t\t\t\t\t\n     linker_options\t\t\t\t\t\t\t\n-      = (char **) xmalloc (n_linker_options * sizeof (char **));\t\n+      = (char **) xmalloc (n_linker_options * sizeof (char *));\t\n   else\t\t\t\t\t\t\t\t\t\n     linker_options\t\t\t\t\t\t\t\n       = (char **) xrealloc (linker_options,\t\t\t\t\n-\t\t\t    n_linker_options * sizeof (char **));\t\n+\t\t\t    n_linker_options * sizeof (char *));\t\n   \t\t\t\t\t\t\t\t\t\n   linker_options [n_linker_options - 1] = save_string (option, len);  \n }"}, {"sha": "501c81befb5b65dc970a877ddb7c938d0ae4e464", "filename": "gcc/gcov.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a92c071f8d1295f3672a0683f1f2cc917ddeb40/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a92c071f8d1295f3672a0683f1f2cc917ddeb40/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=2a92c071f8d1295f3672a0683f1f2cc917ddeb40", "patch": "@@ -997,10 +997,10 @@ output_data ()\n       bzero (line_exists, s_ptr->maxlineno);\n       if (output_branch_probs)\n \t{\n-\t  branch_probs = (struct arcdata **) xmalloc (sizeof (struct arcdata **)\n+\t  branch_probs = (struct arcdata **) xmalloc (sizeof (struct arcdata *)\n \t\t\t\t\t\t      * s_ptr->maxlineno);\n \t  bzero ((char *) branch_probs, \n-\t\t sizeof (struct arcdata **) * s_ptr->maxlineno);\n+\t\t sizeof (struct arcdata *) * s_ptr->maxlineno);\n \t}\n       \n       /* There will be a zero at the beginning of the bb info, before the"}, {"sha": "462755fda42c130887eaab9e6e474a907a0d2678", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a92c071f8d1295f3672a0683f1f2cc917ddeb40/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a92c071f8d1295f3672a0683f1f2cc917ddeb40/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=2a92c071f8d1295f3672a0683f1f2cc917ddeb40", "patch": "@@ -633,18 +633,18 @@ memref_used_between_p (memref, start, end)\n static void\n update_equiv_regs ()\n {\n-  rtx *reg_equiv_init_insn = (rtx *) alloca (max_regno * sizeof (rtx *));\n+  rtx *reg_equiv_init_insn = (rtx *) alloca (max_regno * sizeof (rtx));\n   /* Set when an attempt should be made to replace a register with the\n      associated reg_equiv_replacement entry at the end of this function.  */\n   char *reg_equiv_replace\n     = (char *) alloca (max_regno * sizeof *reg_equiv_replace);\n   rtx insn;\n   int block, depth;\n \n-  reg_equiv_replacement = (rtx *) alloca (max_regno * sizeof (rtx *));\n+  reg_equiv_replacement = (rtx *) alloca (max_regno * sizeof (rtx));\n \n-  bzero ((char *) reg_equiv_init_insn, max_regno * sizeof (rtx *));\n-  bzero ((char *) reg_equiv_replacement, max_regno * sizeof (rtx *));\n+  bzero ((char *) reg_equiv_init_insn, max_regno * sizeof (rtx));\n+  bzero ((char *) reg_equiv_replacement, max_regno * sizeof (rtx));\n   bzero ((char *) reg_equiv_replace, max_regno * sizeof *reg_equiv_replace);\n \n   init_alias_analysis ();"}, {"sha": "aa398eb8573ce1928475f394282f3200f1c4c264", "filename": "gcc/loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a92c071f8d1295f3672a0683f1f2cc917ddeb40/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a92c071f8d1295f3672a0683f1f2cc917ddeb40/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=2a92c071f8d1295f3672a0683f1f2cc917ddeb40", "patch": "@@ -3573,8 +3573,8 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n   int loop_depth = 0;\n \n   reg_iv_type = (enum iv_mode *) alloca (max_reg_before_loop\n-\t\t\t\t\t * sizeof (enum iv_mode *));\n-  bzero ((char *) reg_iv_type, max_reg_before_loop * sizeof (enum iv_mode *));\n+\t\t\t\t\t * sizeof (enum iv_mode));\n+  bzero ((char *) reg_iv_type, max_reg_before_loop * sizeof (enum iv_mode));\n   reg_iv_info = (struct induction **)\n     alloca (max_reg_before_loop * sizeof (struct induction *));\n   bzero ((char *) reg_iv_info, (max_reg_before_loop"}, {"sha": "b8fc938f19f3f6600fb7418a20ffb3f2aa093a33", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a92c071f8d1295f3672a0683f1f2cc917ddeb40/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a92c071f8d1295f3672a0683f1f2cc917ddeb40/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=2a92c071f8d1295f3672a0683f1f2cc917ddeb40", "patch": "@@ -921,10 +921,10 @@ record_asm_reg_life (insn, regstack, operands, constraints,\n   int malformed_asm = 0;\n   rtx body = PATTERN (insn);\n \n-  int *operand_matches = (int *) alloca (n_operands * sizeof (int *));\n+  int *operand_matches = (int *) alloca (n_operands * sizeof (int));\n \n   enum reg_class *operand_class \n-    = (enum reg_class *) alloca (n_operands * sizeof (enum reg_class *));\n+    = (enum reg_class *) alloca (n_operands * sizeof (enum reg_class));\n \n   int reg_used_as_output[FIRST_PSEUDO_REGISTER];\n   int implicitly_dies[FIRST_PSEUDO_REGISTER];\n@@ -950,7 +950,7 @@ record_asm_reg_life (insn, regstack, operands, constraints,\n \n   if (GET_CODE (body) == PARALLEL)\n     {\n-      clobber_reg = (rtx *) alloca (XVECLEN (body, 0) * sizeof (rtx *));\n+      clobber_reg = (rtx *) alloca (XVECLEN (body, 0) * sizeof (rtx));\n \n       for (i = 0; i < XVECLEN (body, 0); i++)\n \tif (GET_CODE (XVECEXP (body, 0, i)) == CLOBBER)\n@@ -2443,9 +2443,9 @@ subst_asm_stack_regs (insn, regstack, operands, operands_loc, constraints,\n   int first_input = n_outputs;\n   rtx body = PATTERN (insn);\n \n-  int *operand_matches = (int *) alloca (n_operands * sizeof (int *));\n+  int *operand_matches = (int *) alloca (n_operands * sizeof (int));\n   enum reg_class *operand_class \n-    = (enum reg_class *) alloca (n_operands * sizeof (enum reg_class *));\n+    = (enum reg_class *) alloca (n_operands * sizeof (enum reg_class));\n \n   rtx *note_reg;\t\t/* Array of note contents */\n   rtx **note_loc;\t\t/* Address of REG field of each note */\n@@ -2517,8 +2517,8 @@ subst_asm_stack_regs (insn, regstack, operands, operands_loc, constraints,\n \n   if (GET_CODE (body) == PARALLEL)\n     {\n-      clobber_reg = (rtx *) alloca (XVECLEN (body, 0) * sizeof (rtx *));\n-      clobber_loc = (rtx **) alloca (XVECLEN (body, 0) * sizeof (rtx **));\n+      clobber_reg = (rtx *) alloca (XVECLEN (body, 0) * sizeof (rtx));\n+      clobber_loc = (rtx **) alloca (XVECLEN (body, 0) * sizeof (rtx *));\n \n       for (i = 0; i < XVECLEN (body, 0); i++)\n \tif (GET_CODE (XVECEXP (body, 0, i)) == CLOBBER)"}, {"sha": "007d92eca3de48bd68a35b1d44dd3792ccdcfad4", "filename": "gcc/reorg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a92c071f8d1295f3672a0683f1f2cc917ddeb40/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a92c071f8d1295f3672a0683f1f2cc917ddeb40/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=2a92c071f8d1295f3672a0683f1f2cc917ddeb40", "patch": "@@ -4547,7 +4547,7 @@ dbr_schedule (first, file)\n \tepilogue_insn = insn;\n     }\n \n-  uid_to_ruid = (int *) alloca ((max_uid + 1) * sizeof (int *));\n+  uid_to_ruid = (int *) alloca ((max_uid + 1) * sizeof (int));\n   for (i = 0, insn = first; insn; i++, insn = NEXT_INSN (insn))\n     uid_to_ruid[INSN_UID (insn)] = i;\n   "}]}