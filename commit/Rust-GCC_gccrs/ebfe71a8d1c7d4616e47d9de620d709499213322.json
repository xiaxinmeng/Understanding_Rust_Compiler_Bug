{"sha": "ebfe71a8d1c7d4616e47d9de620d709499213322", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJmZTcxYThkMWM3ZDQ2MTZlNDdkOWRlNjIwZDcwOTQ5OTIxMzMyMg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2000-05-10T22:29:27Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-05-10T22:29:27Z"}, "message": "Do not bias REG_N_REFS by loop_depth when optimising for size.\n\nFrom-SVN: r33833", "tree": {"sha": "71bff9cc342616febb50293f425ececfecdf1c5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71bff9cc342616febb50293f425ececfecdf1c5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebfe71a8d1c7d4616e47d9de620d709499213322", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebfe71a8d1c7d4616e47d9de620d709499213322", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebfe71a8d1c7d4616e47d9de620d709499213322", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebfe71a8d1c7d4616e47d9de620d709499213322/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "402823c45e9aa790ccbe0e4ce1cac4acdebe02a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "3bb68a30971bd08cb32962cb6088c5428f696445", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfe71a8d1c7d4616e47d9de620d709499213322/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfe71a8d1c7d4616e47d9de620d709499213322/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebfe71a8d1c7d4616e47d9de620d709499213322", "patch": "@@ -1,3 +1,10 @@\n+2000-05-10  Nick Clifton  <nickc@redhat.com>\n+\n+\t* flow.c (find_auto_inc): Do not bias REG_N_REFS by loop_depth\n+\twhen optimising for size.\n+\t(mark_used_regs:) Ditto.\n+\t(try_pre_increment_1): Ditto.\n+\n 2000-05-10  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cppexp.c (lex): Use %.*s to print non-NUL-terminated string."}, {"sha": "1bea9c2959feac95b34f1881eb9d09fedce45d98", "filename": "gcc/flow.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfe71a8d1c7d4616e47d9de620d709499213322/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfe71a8d1c7d4616e47d9de620d709499213322/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=ebfe71a8d1c7d4616e47d9de620d709499213322", "patch": "@@ -4854,7 +4854,8 @@ find_auto_inc (pbi, x, insn)\n \t      /* Count an extra reference to the reg.  When a reg is\n \t\t incremented, spilling it is worse, so we want to make\n \t\t that less likely.  */\n-\t      REG_N_REFS (regno) += pbi->bb->loop_depth + 1;\n+\t      REG_N_REFS (regno) += (optimize_size ? 1\n+\t\t\t\t     : pbi->bb->loop_depth + 1);\n \n \t      /* Count the increment as a setting of the register,\n \t\t even though it isn't a SET in rtl.  */\n@@ -4935,7 +4936,8 @@ mark_used_reg (pbi, reg, cond, insn)\n \t    REG_BASIC_BLOCK (regno) = REG_BLOCK_GLOBAL;\n \n \t  /* Count (weighted) number of uses of each reg.  */\n-\t  REG_N_REFS (regno) += pbi->bb->loop_depth + 1;\n+\t  REG_N_REFS (regno) += (optimize_size ? 1\n+\t\t\t\t : pbi->bb->loop_depth + 1);\n \t}\n     }\n \n@@ -5353,7 +5355,8 @@ try_pre_increment_1 (pbi, insn)\n \t less likely.  */\n       if (regno >= FIRST_PSEUDO_REGISTER)\n \t{\n-\t  REG_N_REFS (regno) += pbi->bb->loop_depth + 1;\n+\t  REG_N_REFS (regno) += (optimize_size ? 1\n+\t\t\t\t : pbi->bb->loop_depth + 1);\n \t  REG_N_SETS (regno)++;\n \t}\n       return 1;"}]}