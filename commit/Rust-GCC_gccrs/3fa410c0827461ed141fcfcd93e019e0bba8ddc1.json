{"sha": "3fa410c0827461ed141fcfcd93e019e0bba8ddc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZhNDEwYzA4Mjc0NjFlZDE0MWZjZmNkOTNlMDE5ZTBiYmE4ZGRjMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-07-19T18:08:07Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-07-19T18:08:07Z"}, "message": "re PR regression/81331 (missed Eh delivery in partitioned function)\n\n\n\tPR middle-end/81331\n\t* except.c (maybe_add_nop_after_section_switch): New function.\n\t(execute): Use it.\n\nFrom-SVN: r250358", "tree": {"sha": "caec1faeaa7e4230fd366d412fd901f86cb81ae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caec1faeaa7e4230fd366d412fd901f86cb81ae1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fa410c0827461ed141fcfcd93e019e0bba8ddc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa410c0827461ed141fcfcd93e019e0bba8ddc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa410c0827461ed141fcfcd93e019e0bba8ddc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa410c0827461ed141fcfcd93e019e0bba8ddc1/comments", "author": null, "committer": null, "parents": [{"sha": "57c51668eefc148c91e68dcec298f0615b52e38a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c51668eefc148c91e68dcec298f0615b52e38a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57c51668eefc148c91e68dcec298f0615b52e38a"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "44b3ba9a54b5102839dcf7627a1feb40ab0dd1b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa410c0827461ed141fcfcd93e019e0bba8ddc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa410c0827461ed141fcfcd93e019e0bba8ddc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fa410c0827461ed141fcfcd93e019e0bba8ddc1", "patch": "@@ -1,3 +1,9 @@\n+2017-07-19  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR middle-end/81331\n+\t* except.c (maybe_add_nop_after_section_switch): New function.\n+\t(execute): Use it.\n+\n 2017-07-19  Tom de Vries  <tom@codesourcery.com>\n \n \t* gimple.h (gimple_phi_set_arg): Make assert more strict."}, {"sha": "c77d42cdfeedb820cb2421eeb6cfa7b4cb903ad9", "filename": "gcc/except.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa410c0827461ed141fcfcd93e019e0bba8ddc1/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa410c0827461ed141fcfcd93e019e0bba8ddc1/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=3fa410c0827461ed141fcfcd93e019e0bba8ddc1", "patch": "@@ -2444,6 +2444,61 @@ emit_note_eh_region_end (rtx_insn *insn)\n   return emit_note_after (NOTE_INSN_EH_REGION_END, insn);\n }\n \n+/* Add NOP after NOTE_INSN_SWITCH_TEXT_SECTIONS when the cold section starts\n+   with landing pad.\n+   With landing pad being at offset 0 from the start label of the section\n+   we would miss EH delivery because 0 is special and means no landing pad.  */\n+\n+static bool\n+maybe_add_nop_after_section_switch (void)\n+{\n+  if (!crtl->uses_eh_lsda\n+      || !crtl->eh.call_site_record_v[1])\n+    return false;\n+  int n = vec_safe_length (crtl->eh.call_site_record_v[1]);\n+  hash_set<rtx_insn *> visited;\n+\n+  for (int i = 0; i < n; ++i)\n+    {\n+      struct call_site_record_d *cs\n+\t = (*crtl->eh.call_site_record_v[1])[i];\n+      if (cs->landing_pad)\n+\t{\n+\t  rtx_insn *insn = as_a <rtx_insn *> (cs->landing_pad);\n+\t  while (true)\n+\t    {\n+\t      /* Landing pads have LABEL_PRESERVE_P flag set.  This check make\n+\t\t sure that we do not walk past landing pad visited earlier\n+\t\t which would result in possible quadratic behaviour.  */\n+\t      if (LABEL_P (insn) && LABEL_PRESERVE_P (insn)\n+\t\t  && visited.add (insn))\n+\t\tbreak;\n+\n+\t      /* Conservatively assume that ASM insn may be empty.  We have\n+\t\t now way to tell what they contain.  */\n+\t      if (active_insn_p (insn)\n+\t\t  && GET_CODE (PATTERN (insn)) != ASM_INPUT\n+\t\t  && GET_CODE (PATTERN (insn)) != ASM_OPERANDS)\n+\t\tbreak;\n+\n+\t      /* If we reached the start of hot section, then NOP will be\n+\t\t needed.  */\n+\t      if (GET_CODE (insn) == NOTE\n+\t\t  && NOTE_KIND (insn) == NOTE_INSN_SWITCH_TEXT_SECTIONS)\n+\t\t{\n+\t\t  emit_insn_after (gen_nop (), insn);\n+\t\t  break;\n+\t\t}\n+\n+\t      /* We visit only labels from cold section.  We should never hit\n+\t\t begining of the insn stream here.  */\n+\t      insn = PREV_INSN (insn);\n+\t    }\n+\t}\n+    }\n+  return false;\n+}\n+\n /* Turn REG_EH_REGION notes back into NOTE_INSN_EH_REGION notes.\n    The new note numbers will not refer to region numbers, but\n    instead to call site entries.  */\n@@ -2631,6 +2686,7 @@ class pass_convert_to_eh_region_ranges : public rtl_opt_pass\n   virtual bool gate (function *);\n   virtual unsigned int execute (function *)\n     {\n+      maybe_add_nop_after_section_switch ();\n       return convert_to_eh_region_ranges ();\n     }\n "}]}