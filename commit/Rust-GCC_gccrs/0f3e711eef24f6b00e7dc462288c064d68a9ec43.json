{"sha": "0f3e711eef24f6b00e7dc462288c064d68a9ec43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYzZTcxMWVlZjI0ZjZiMDBlN2RjNDYyMjg4YzA2NGQ2OGE5ZWM0Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-01-08T16:14:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-01-08T16:14:49Z"}, "message": "configure.ac (--enable-linux-futex): Add new configure option.\n\nlibstdc++-v3/\n\t* configure.ac (--enable-linux-futex): Add new configure option.\n\t(HAVE_LINUX_FUTEX): New AC_DEFINE.\n\t* Makefile.in: Rebuilt.\n\t* aclocal.m4: Rebuilt.\n\t* configure: Rebuilt.\n\t* config.h.in: Rebuilt.\n\t* config/cpu/generic/cxxabi_tweaks.h (_GLIBCXX_GUARD_BIT,\n\t_GLIBCXX_GUARD_PENDING_BIT, _GLIBCXX_GUARD_WAITING_BIT): Define.\n\t* config/cpu/arm/cxxabi_tweaks.h (_GLIBCXX_GUARD_BIT,\n\t_GLIBCXX_GUARD_PENDING_BIT, _GLIBCXX_GUARD_WAITING_BIT): Define.\n\t* libsupc++/guard.cc: Include climits and syscall.h.\n\t(_GLIBCXX_USE_FUTEX): Define if futex syscall and atomic builtins\n\tare supported.\n\t(_GLIBCXX_FUTEX_WAIT, _GLIBCXX_FUTEX_WAKE): Likewise.\n\t(__guard_test_bit): New static inline.\n\t(__cxa_guard_acquire, __cxa_guard_release, __cxa_guard_abort): Use\n\tatomic builtins and futex syscall if _GLIBCXX_USE_FUTEX.\nconfig/\n\t* futex.m4: New file.\nlibgomp/\n\t* configure.ac: Move futex checking into ../config/futex.m4.\n\t* configure: Rebuilt.\n\t* aclocal.m4: Rebuilt.\n\t* Makefile.in: Rebuilt.\n\n\t* configure.tgt: Rename have_tls to gcc_cv_have_tls to match\n\t2007-10-15 ../config/tls.m4 change.\n\nFrom-SVN: r131399", "tree": {"sha": "8424b6e62d8e9172cc8b7a69773bcbcc62b63024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8424b6e62d8e9172cc8b7a69773bcbcc62b63024"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f3e711eef24f6b00e7dc462288c064d68a9ec43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f3e711eef24f6b00e7dc462288c064d68a9ec43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f3e711eef24f6b00e7dc462288c064d68a9ec43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f3e711eef24f6b00e7dc462288c064d68a9ec43/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c90eee444ccd2d39ac22b55e0b6516d842590bfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c90eee444ccd2d39ac22b55e0b6516d842590bfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c90eee444ccd2d39ac22b55e0b6516d842590bfb"}], "stats": {"total": 582, "additions": 486, "deletions": 96}, "files": [{"sha": "8343f066a866814446e25622b2f1f42996afa834", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3e711eef24f6b00e7dc462288c064d68a9ec43/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3e711eef24f6b00e7dc462288c064d68a9ec43/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=0f3e711eef24f6b00e7dc462288c064d68a9ec43", "patch": "@@ -1,3 +1,7 @@\n+2008-01-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* futex.m4: New file.\n+\n 2007-12-06  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* mt-sde (CFLAGS_FOR_TARGET, CXXFLAGS_FOR_TARGET): Use +=, not =."}, {"sha": "e95144dd16ae1056556478929ea8a3c9849568f2", "filename": "config/futex.m4", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3e711eef24f6b00e7dc462288c064d68a9ec43/config%2Ffutex.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3e711eef24f6b00e7dc462288c064d68a9ec43/config%2Ffutex.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Ffutex.m4?ref=0f3e711eef24f6b00e7dc462288c064d68a9ec43", "patch": "@@ -0,0 +1,64 @@\n+dnl ----------------------------------------------------------------------\n+dnl This whole bit snagged from libgomp.\n+\n+dnl\n+dnl GCC_LINUX_FUTEX\n+dnl    (SHELL-CODE_HANDLER)\n+dnl\n+AC_DEFUN([GCC_LINUX_FUTEX],[dnl\n+GCC_ENABLE(linux-futex,default, ,[use the Linux futex system call],\n+\t   permit yes|no|default)\n+case \"$target\" in\n+  *-linux*)\n+    case \"$enable_linux_futex\" in\n+      default)\n+\t# If headers don't have gettid/futex syscalls definition, then\n+\t# default to no, otherwise there will be compile time failures.\n+\t# Otherwise, default to yes.  If we don't detect we are\n+\t# compiled/linked against NPTL and not cross-compiling, check\n+\t# if programs are run by default against NPTL and if not, issue\n+\t# a warning.\n+\tenable_linux_futex=no\n+\tAC_LINK_IFELSE(\n+\t [AC_LANG_PROGRAM(\n+\t  [#include <sys/syscall.h>\n+\t   int lk;],\n+\t  [syscall (SYS_gettid); syscall (SYS_futex, &lk, 0, 0, 0);])],\n+\t  [save_LIBS=\"$LIBS\"\n+\t   LIBS=\"-lpthread $LIBS\"\n+\t   AC_LINK_IFELSE(\n+\t   [AC_LANG_PROGRAM(\n+\t    [#ifndef _GNU_SOURCE\n+\t     #define _GNU_SOURCE 1\n+\t     #endif\n+\t     #include <pthread.h>\n+\t     pthread_t th; void *status;],\n+\t    [pthread_tryjoin_np (th, &status);])],[enable_linux_futex=yes],\n+\t    [if test x$cross_compiling = xno; then\n+\t       if getconf GNU_LIBPTHREAD_VERSION 2>/dev/null \\\n+\t\t  | LC_ALL=C grep -i NPTL > /dev/null 2>/dev/null; then :; else\n+\t\t AC_MSG_WARN([The kernel might not support futex or gettid syscalls.\n+If so, please configure with --disable-linux-futex])\n+\t       fi\n+\t     fi\n+\t     enable_linux_futex=yes])\n+\t   LIBS=\"$save_LIBS\"])\n+\t;;\n+      yes)\n+\tAC_LINK_IFELSE(\n+\t [AC_LANG_PROGRAM(\n+\t  [#include <sys/syscall.h>\n+\t   int lk;],\n+\t  [syscall (SYS_gettid); syscall (SYS_futex, &lk, 0, 0, 0);])],[],\n+\t  [AC_MSG_ERROR([SYS_gettid and SYS_futex required for --enable-linux-futex])])\n+\t;;\n+    esac\n+    ;;\n+  *)\n+    enable_linux_futex=no\n+    ;;\n+esac\n+if test x$enable_linux_futex = xyes; then\n+  $1\n+fi\n+])"}, {"sha": "cf698662bdf346f7510a6327b892abfdf5567bf8", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=0f3e711eef24f6b00e7dc462288c064d68a9ec43", "patch": "@@ -1,3 +1,13 @@\n+2008-01-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac: Move futex checking into ../config/futex.m4.\n+\t* configure: Rebuilt.\n+\t* aclocal.m4: Rebuilt.\n+\t* Makefile.in: Rebuilt.\n+\n+\t* configure.tgt: Rename have_tls to gcc_cv_have_tls to match\n+\t2007-10-15 ../config/tls.m4 change.\n+\n 2007-12-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/34513"}, {"sha": "6ba3dcc9a280003a8e4e5622dbeb5b96619402f8", "filename": "libgomp/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libgomp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libgomp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FMakefile.in?ref=0f3e711eef24f6b00e7dc462288c064d68a9ec43", "patch": "@@ -55,7 +55,8 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/lead-dot.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/stdint.m4 \\\n-\t$(top_srcdir)/../config/tls.m4 $(top_srcdir)/../ltoptions.m4 \\\n+\t$(top_srcdir)/../config/tls.m4 \\\n+\t$(top_srcdir)/../config/futex.m4 $(top_srcdir)/../ltoptions.m4 \\\n \t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n \t$(top_srcdir)/../lt~obsolete.m4 $(top_srcdir)/acinclude.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/configure.ac"}, {"sha": "1746f2559496dd4e7deba3724a1e091bc503b760", "filename": "libgomp/aclocal.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libgomp%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libgomp%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Faclocal.m4?ref=0f3e711eef24f6b00e7dc462288c064d68a9ec43", "patch": "@@ -863,6 +863,7 @@ m4_include([../config/lead-dot.m4])\n m4_include([../config/multi.m4])\n m4_include([../config/stdint.m4])\n m4_include([../config/tls.m4])\n+m4_include([../config/futex.m4])\n m4_include([../ltoptions.m4])\n m4_include([../ltsugar.m4])\n m4_include([../ltversion.m4])"}, {"sha": "391a81946f4e6c1d4777530f88a53ad5e417235f", "filename": "libgomp/configure", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=0f3e711eef24f6b00e7dc462288c064d68a9ec43", "patch": "@@ -1003,8 +1003,6 @@ Optional Features:\n   --enable-version-specific-runtime-libs\n                           Specify that runtime libraries should be installed\n                           in a compiler-specific directory [default=no]\n-  --enable-linux-futex    Use the Linux futex system call\n-                          [default=default]\n   --enable-generated-files-in-srcdir\n                           put copies of generated files in source dir intended\n                           for creating source tarballs for users without\n@@ -1021,6 +1019,8 @@ Optional Features:\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n   --enable-maintainer-mode  enable make rules and dependencies not useful\n \t\t\t  (and sometimes confusing) to the casual installer\n+  --enable-linux-futex    use the Linux futex system call\n+                          [default=default]\n   --enable-tls            Use thread-local storage [default=yes]\n   --enable-symvers=STYLE  enables symbol versioning of the shared library\n                           [default=yes]\n@@ -1518,26 +1518,6 @@ fi;\n echo \"$as_me:$LINENO: result: $enable_version_specific_runtime_libs\" >&5\n echo \"${ECHO_T}$enable_version_specific_runtime_libs\" >&6\n \n-echo \"$as_me:$LINENO: checking for --enable-linux-futex\" >&5\n-echo $ECHO_N \"checking for --enable-linux-futex... $ECHO_C\" >&6\n- # Check whether --enable-linux-futex or --disable-linux-futex was given.\n-if test \"${enable_linux_futex+set}\" = set; then\n-  enableval=\"$enable_linux_futex\"\n-\n-      case \"$enableval\" in\n-       yes|no|default) ;;\n-       *) { { echo \"$as_me:$LINENO: error: Unknown argument to enable/disable linux-futex\" >&5\n-echo \"$as_me: error: Unknown argument to enable/disable linux-futex\" >&2;}\n-   { (exit 1); exit 1; }; } ;;\n-                          esac\n-\n-else\n-  enable_linux_futex=default\n-fi;\n-\n-echo \"$as_me:$LINENO: result: $enable_linux_futex\" >&5\n-echo \"${ECHO_T}$enable_linux_futex\" >&6\n-\n # We would like our source tree to be readonly. However when releases or\n # pre-releases are generated, the flex/bison generated files as well as the\n # various formats of manuals need to be included along with the rest of the\n@@ -16661,6 +16641,24 @@ cat >>confdefs.h <<\\_ACEOF\n _ACEOF\n \n     ;;\n+esac\n+\n+ # Check whether --enable-linux-futex or --disable-linux-futex was given.\n+if test \"${enable_linux_futex+set}\" = set; then\n+  enableval=\"$enable_linux_futex\"\n+\n+      case \"$enableval\" in\n+       yes|no|default) ;;\n+       *) { { echo \"$as_me:$LINENO: error: Unknown argument to enable/disable linux-futex\" >&5\n+echo \"$as_me: error: Unknown argument to enable/disable linux-futex\" >&2;}\n+   { (exit 1); exit 1; }; } ;;\n+                          esac\n+\n+else\n+  enable_linux_futex=default\n+fi;\n+\n+case \"$target\" in\n   *-linux*)\n     case \"$enable_linux_futex\" in\n       default)\n@@ -16709,7 +16707,9 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n   ac_status=$?\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); }; }; then\n-  cat >conftest.$ac_ext <<_ACEOF\n+  save_LIBS=\"$LIBS\"\n+\t   LIBS=\"-lpthread $LIBS\"\n+\t   cat >conftest.$ac_ext <<_ACEOF\n /* confdefs.h.  */\n _ACEOF\n cat confdefs.h >>conftest.$ac_ext\n@@ -16757,7 +16757,7 @@ sed 's/^/| /' conftest.$ac_ext >&5\n \n if test x$cross_compiling = xno; then\n \t       if getconf GNU_LIBPTHREAD_VERSION 2>/dev/null \\\n-\t\t  | LC_ALL=C grep -i NPTL > /dev/null 2>/dev/null; then\n+\t\t  | LC_ALL=C grep -i NPTL > /dev/null 2>/dev/null; then :; else\n \t\t { echo \"$as_me:$LINENO: WARNING: The kernel might not support futex or gettid syscalls.\n If so, please configure with --disable-linux-futex\" >&5\n echo \"$as_me: WARNING: The kernel might not support futex or gettid syscalls.\n@@ -16768,6 +16768,7 @@ If so, please configure with --disable-linux-futex\" >&2;}\n fi\n rm -f conftest.err conftest.$ac_objext \\\n       conftest$ac_exeext conftest.$ac_ext\n+\t   LIBS=\"$save_LIBS\"\n else\n   echo \"$as_me: failed program was:\" >&5\n sed 's/^/| /' conftest.$ac_ext >&5\n@@ -16776,7 +16777,7 @@ fi\n rm -f conftest.err conftest.$ac_objext \\\n       conftest$ac_exeext conftest.$ac_ext\n \t;;\n-      yes)\n+        yes)\n \tcat >conftest.$ac_ext <<_ACEOF\n /* confdefs.h.  */\n _ACEOF\n@@ -16829,7 +16830,14 @@ rm -f conftest.err conftest.$ac_objext \\\n \t;;\n     esac\n     ;;\n+  *)\n+    enable_linux_futex=no\n+    ;;\n esac\n+if test x$enable_linux_futex = xyes; then\n+  :\n+fi\n+\n \n # Check for pthread_{,attr_}[sg]etaffinity_np.\n cat >conftest.$ac_ext <<_ACEOF"}, {"sha": "0cda749d593bd3809fa3808bb5174fdd76cc9c70", "filename": "libgomp/configure.ac", "status": "modified", "additions": 2, "deletions": 48, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libgomp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libgomp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.ac?ref=0f3e711eef24f6b00e7dc462288c064d68a9ec43", "patch": "@@ -15,12 +15,6 @@ LIBGOMP_ENABLE(version-specific-runtime-libs, no, ,\n    permit yes|no)\n AC_MSG_RESULT($enable_version_specific_runtime_libs)\n \n-AC_MSG_CHECKING([for --enable-linux-futex])\n-LIBGOMP_ENABLE(linux-futex, default, ,\n-  [Use the Linux futex system call],\n-  permit yes|no|default)\n-AC_MSG_RESULT($enable_linux_futex)\n-\n # We would like our source tree to be readonly. However when releases or\n # pre-releases are generated, the flex/bison generated files as well as the\n # various formats of manuals need to be included along with the rest of the\n@@ -192,50 +186,10 @@ case \"$host\" in\n     AC_DEFINE(HAVE_BROKEN_POSIX_SEMAPHORES, 1,\n \tDefine if the POSIX Semaphores do not work on your system.)\n     ;;\n-  *-linux*)\n-    case \"$enable_linux_futex\" in\n-      default)\n-\t# If headers don't have gettid/futex syscalls definition, then\n-\t# default to no, otherwise there will be compile time failures.\n-\t# Otherwise, default to yes.  If we don't detect we are\n-\t# compiled/linked against NPTL and not cross-compiling, check\n-\t# if programs are run by default against NPTL and if not, issue\n-\t# a warning.\n-\tenable_linux_futex=no\n-\tAC_LINK_IFELSE(\n-\t [AC_LANG_PROGRAM(\n-\t  [#include <sys/syscall.h>\n-\t   int lk;],\n-\t  [syscall (SYS_gettid); syscall (SYS_futex, &lk, 0, 0, 0);])],\n-\t  [AC_LINK_IFELSE(\n-\t   [AC_LANG_PROGRAM(\n-\t    [#ifndef _GNU_SOURCE\n-\t     #define _GNU_SOURCE 1\n-\t     #endif\n-\t     #include <pthread.h>\n-\t     pthread_t th; void *status;],\n-\t    [pthread_tryjoin_np (th, &status);])],[enable_linux_futex=yes],\n-\t    [if test x$cross_compiling = xno; then\n-\t       if getconf GNU_LIBPTHREAD_VERSION 2>/dev/null \\\n-\t\t  | LC_ALL=C grep -i NPTL > /dev/null 2>/dev/null; then\n-\t\t AC_MSG_WARN([The kernel might not support futex or gettid syscalls.\n-If so, please configure with --disable-linux-futex])\n-\t       fi\n-\t     fi\n-\t     enable_linux_futex=yes])])\n-\t;;\n-      yes)\n-\tAC_LINK_IFELSE(\n-\t [AC_LANG_PROGRAM(\n-\t  [#include <sys/syscall.h>\n-\t   int lk;],\n-\t  [syscall (SYS_gettid); syscall (SYS_futex, &lk, 0, 0, 0);])],[],\n-\t  [AC_MSG_ERROR([SYS_gettid and SYS_futex required for --enable-linux-futex])])\n-\t;;\n-    esac\n-    ;;\n esac\n \n+GCC_LINUX_FUTEX(:)\n+\n # Check for pthread_{,attr_}[sg]etaffinity_np.\n AC_LINK_IFELSE(\n  [AC_LANG_PROGRAM("}, {"sha": "68115abf71d57f0b42f36cb9fcea2d48686df8fc", "filename": "libgomp/configure.tgt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libgomp%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libgomp%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.tgt?ref=0f3e711eef24f6b00e7dc462288c064d68a9ec43", "patch": "@@ -11,7 +11,7 @@\n #  XLDFLAGS\t\tAdd extra link flags to use.\n \n # Optimize TLS usage by avoiding the overhead of dynamic allocation.\n-if test $have_tls = yes ; then\n+if test $gcc_cv_have_tls = yes ; then\n   case \"${target}\" in\n \n     *-*-linux*)"}, {"sha": "a5b54c46608e4a4cc90cb3da6ca923298590b371", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0f3e711eef24f6b00e7dc462288c064d68a9ec43", "patch": "@@ -1,3 +1,23 @@\n+2008-01-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac (--enable-linux-futex): Add new configure option.\n+\t(HAVE_LINUX_FUTEX): New AC_DEFINE.\n+\t* Makefile.in: Rebuilt.\n+\t* aclocal.m4: Rebuilt.\n+\t* configure: Rebuilt.\n+\t* config.h.in: Rebuilt.\n+\t* config/cpu/generic/cxxabi_tweaks.h (_GLIBCXX_GUARD_BIT,\n+\t_GLIBCXX_GUARD_PENDING_BIT, _GLIBCXX_GUARD_WAITING_BIT): Define.\n+\t* config/cpu/arm/cxxabi_tweaks.h (_GLIBCXX_GUARD_BIT,\n+\t_GLIBCXX_GUARD_PENDING_BIT, _GLIBCXX_GUARD_WAITING_BIT): Define.\n+\t* libsupc++/guard.cc: Include climits and syscall.h.\n+\t(_GLIBCXX_USE_FUTEX): Define if futex syscall and atomic builtins\n+\tare supported.\n+\t(_GLIBCXX_FUTEX_WAIT, _GLIBCXX_FUTEX_WAKE): Likewise.\n+\t(__guard_test_bit): New static inline.\n+\t(__cxa_guard_acquire, __cxa_guard_release, __cxa_guard_abort): Use\n+\tatomic builtins and futex syscall if _GLIBCXX_USE_FUTEX.\n+\n 2008-01-07  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/34680"}, {"sha": "75241af5f5d6dd124397b83020654f084ee3ea89", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=0f3e711eef24f6b00e7dc462288c064d68a9ec43", "patch": "@@ -54,6 +54,7 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n+\t$(top_srcdir)/../config/futex.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n \t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n \t$(top_srcdir)/crossconfig.m4 $(top_srcdir)/linkage.m4 \\"}, {"sha": "02b6b899cd5ff993d6a63d23727668672cdc0d11", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=0f3e711eef24f6b00e7dc462288c064d68a9ec43", "patch": "@@ -589,6 +589,7 @@ m4_include([../config/lib-prefix.m4])\n m4_include([../config/multi.m4])\n m4_include([../config/no-executables.m4])\n m4_include([../config/unwind_ipinfo.m4])\n+m4_include([../config/futex.m4])\n m4_include([../libtool.m4])\n m4_include([../ltoptions.m4])\n m4_include([../ltsugar.m4])"}, {"sha": "f25ab541dff4fe95ba2ab1b822d4928ca6b2dc68", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=0f3e711eef24f6b00e7dc462288c064d68a9ec43", "patch": "@@ -232,6 +232,9 @@\n /* Only used in build directory testsuite_hooks.h. */\n #undef HAVE_LIMIT_VMEM\n \n+/* Define if futex syscall is available. */\n+#undef HAVE_LINUX_FUTEX\n+\n /* Define to 1 if you have the <locale.h> header file. */\n #undef HAVE_LOCALE_H\n "}, {"sha": "b6b88e41431ed9026b9e9ed9d19b3d7e46868671", "filename": "libstdc++-v3/config/cpu/arm/cxxabi_tweaks.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fcxxabi_tweaks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fcxxabi_tweaks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fcxxabi_tweaks.h?ref=0f3e711eef24f6b00e7dc462288c064d68a9ec43", "patch": "@@ -1,6 +1,6 @@\n // Control various target specific ABI tweaks.  ARM version.\n \n-// Copyright (C) 2004, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2006, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -46,6 +46,9 @@ namespace __cxxabiv1\n   // guard variable.  */\n #define _GLIBCXX_GUARD_TEST(x) ((*(x) & 1) != 0)\n #define _GLIBCXX_GUARD_SET(x) *(x) = 1\n+#define _GLIBCXX_GUARD_BIT 1\n+#define _GLIBCXX_GUARD_PENDING_BIT __guard_test_bit (1, 1)\n+#define _GLIBCXX_GUARD_WAITING_BIT __guard_test_bit (2, 1)\n   typedef int __guard;\n \n   // We also want the element size in array cookies.\n@@ -62,6 +65,9 @@ namespace __cxxabiv1\n   // The generic ABI uses the first byte of a 64-bit guard variable.\n #define _GLIBCXX_GUARD_TEST(x) (*(char *) (x) != 0)\n #define _GLIBCXX_GUARD_SET(x) *(char *) (x) = 1\n+#define _GLIBCXX_GUARD_BIT __guard_test_bit (0, 1)\n+#define _GLIBCXX_GUARD_PENDING_BIT __guard_test_bit (1, 1)\n+#define _GLIBCXX_GUARD_WAITING_BIT __guard_test_bit (2, 1)\n   __extension__ typedef int __guard __attribute__((mode (__DI__)));\n \n   // __cxa_vec_ctor has void return type."}, {"sha": "2859e83c9be89e139686992e5eaffdafa9ec63e7", "filename": "libstdc++-v3/config/cpu/generic/cxxabi_tweaks.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fcxxabi_tweaks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fcxxabi_tweaks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fcxxabi_tweaks.h?ref=0f3e711eef24f6b00e7dc462288c064d68a9ec43", "patch": "@@ -1,6 +1,6 @@\n // Control various target specific ABI tweaks.  Generic version.\n \n-// Copyright (C) 2004, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2006, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,6 +44,9 @@ namespace __cxxabiv1\n   // The generic ABI uses the first byte of a 64-bit guard variable.\n #define _GLIBCXX_GUARD_TEST(x) (*(char *) (x) != 0)\n #define _GLIBCXX_GUARD_SET(x) *(char *) (x) = 1\n+#define _GLIBCXX_GUARD_BIT __guard_test_bit (0, 1)\n+#define _GLIBCXX_GUARD_PENDING_BIT __guard_test_bit (1, 1)\n+#define _GLIBCXX_GUARD_WAITING_BIT __guard_test_bit (2, 1)\n   __extension__ typedef int __guard __attribute__((mode (__DI__)));\n \n   // __cxa_vec_ctor has void return type."}, {"sha": "403b8183bbe6af8e7ede6397380d377e4d10142f", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=0f3e711eef24f6b00e7dc462288c064d68a9ec43", "patch": "@@ -1053,6 +1053,8 @@ Optional Features:\n                           memory [default=no]\n   --enable-tls            Use thread-local storage [default=yes]\n   --disable-rpath         do not hardcode runtime library paths\n+  --enable-linux-futex    use the Linux futex system call\n+                          [default=default]\n   --enable-symvers=STYLE  enables symbol versioning of the shared library\n                           [default=yes]\n   --enable-visibility     enables visibility safe usage [default=yes]\n@@ -114116,8 +114118,222 @@ _ACEOF\n #define HAVE_GETIPINFO 1\n _ACEOF\n \n+fi\n+\n+ # Check whether --enable-linux-futex or --disable-linux-futex was given.\n+if test \"${enable_linux_futex+set}\" = set; then\n+  enableval=\"$enable_linux_futex\"\n+\n+      case \"$enableval\" in\n+       yes|no|default) ;;\n+       *) { { echo \"$as_me:$LINENO: error: Unknown argument to enable/disable linux-futex\" >&5\n+echo \"$as_me: error: Unknown argument to enable/disable linux-futex\" >&2;}\n+   { (exit 1); exit 1; }; } ;;\n+                          esac\n+\n+else\n+  enable_linux_futex=default\n+fi;\n+\n+case \"$target\" in\n+  *-linux*)\n+    case \"$enable_linux_futex\" in\n+      default)\n+\t# If headers don't have gettid/futex syscalls definition, then\n+\t# default to no, otherwise there will be compile time failures.\n+\t# Otherwise, default to yes.  If we don't detect we are\n+\t# compiled/linked against NPTL and not cross-compiling, check\n+\t# if programs are run by default against NPTL and if not, issue\n+\t# a warning.\n+\tenable_linux_futex=no\n+\tif test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <sys/syscall.h>\n+\t   int lk;\n+int\n+main ()\n+{\n+syscall (SYS_gettid); syscall (SYS_futex, &lk, 0, 0, 0);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  save_LIBS=\"$LIBS\"\n+\t   LIBS=\"-lpthread $LIBS\"\n+\t   if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#ifndef _GNU_SOURCE\n+\t     #define _GNU_SOURCE 1\n+\t     #endif\n+\t     #include <pthread.h>\n+\t     pthread_t th; void *status;\n+int\n+main ()\n+{\n+pthread_tryjoin_np (th, &status);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  enable_linux_futex=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n \n+if test x$cross_compiling = xno; then\n+\t       if getconf GNU_LIBPTHREAD_VERSION 2>/dev/null \\\n+\t\t  | LC_ALL=C grep -i NPTL > /dev/null 2>/dev/null; then :; else\n+\t\t { echo \"$as_me:$LINENO: WARNING: The kernel might not support futex or gettid syscalls.\n+If so, please configure with --disable-linux-futex\" >&5\n+echo \"$as_me: WARNING: The kernel might not support futex or gettid syscalls.\n+If so, please configure with --disable-linux-futex\" >&2;}\n+\t       fi\n+\t     fi\n+\t     enable_linux_futex=yes\n fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+\t   LIBS=\"$save_LIBS\"\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+\t;;\n+        yes)\n+\tif test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <sys/syscall.h>\n+\t   int lk;\n+int\n+main ()\n+{\n+syscall (SYS_gettid); syscall (SYS_futex, &lk, 0, 0, 0);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  :\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+{ { echo \"$as_me:$LINENO: error: SYS_gettid and SYS_futex required for --enable-linux-futex\" >&5\n+echo \"$as_me: error: SYS_gettid and SYS_futex required for --enable-linux-futex\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+\t;;\n+    esac\n+    ;;\n+  *)\n+    enable_linux_futex=no\n+    ;;\n+esac\n+if test x$enable_linux_futex = xyes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_LINUX_FUTEX 1\n+_ACEOF\n+\n+fi\n+\n \n # This depends on GLIBCXX CHECK_LINKER_FEATURES, but without it assumes no.\n "}, {"sha": "3411b97afc8bbb2543625e3cc7521492b4321542", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=0f3e711eef24f6b00e7dc462288c064d68a9ec43", "patch": "@@ -295,9 +295,10 @@ else\n \n   # Assume we have _Unwind_GetIPInfo for cross-compiles.\n   AC_DEFINE(HAVE_GETIPINFO)\n-\n fi\n \n+GCC_LINUX_FUTEX([AC_DEFINE(HAVE_LINUX_FUTEX, 1, [Define if futex syscall is available.])])\n+\n # This depends on GLIBCXX CHECK_LINKER_FEATURES, but without it assumes no.\n GLIBCXX_ENABLE_SYMVERS([yes])\n GLIBCXX_ENABLE_VISIBILITY([yes])"}, {"sha": "e4665773ca2613c4692a2ee01e5b7a20e1aa94f5", "filename": "libstdc++-v3/libsupc++/guard.cc", "status": "modified", "additions": 115, "deletions": 18, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3e711eef24f6b00e7dc462288c064d68a9ec43/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc?ref=0f3e711eef24f6b00e7dc462288c064d68a9ec43", "patch": "@@ -35,12 +35,21 @@\n #include <new>\n #include <ext/atomicity.h>\n #include <ext/concurrence.h>\n+#if defined(__GTHREADS) && defined(__GTHREAD_HAS_COND) \\\n+    && defined(_GLIBCXX_ATOMIC_BUILTINS) && defined(_GLIBCXX_HAVE_LINUX_FUTEX)\n+# include <climits>\n+# include <syscall.h>\n+# define _GLIBCXX_USE_FUTEX\n+# define _GLIBCXX_FUTEX_WAIT 0\n+# define _GLIBCXX_FUTEX_WAKE 1\n+#endif\n \n // The IA64/generic ABI uses the first byte of the guard variable.\n // The ARM EABI uses the least significant bit.\n \n // Thread-safe static local initialization support.\n #ifdef __GTHREADS\n+# ifndef _GLIBCXX_USE_FUTEX\n namespace\n {\n   // A single mutex controlling all static initializations.\n@@ -75,8 +84,9 @@ namespace\n     }\n   };\n }\n+# endif\n \n-#ifdef __GTHREAD_HAS_COND\n+# if defined(__GTHREAD_HAS_COND) && !defined(_GLIBCXX_USE_FUTEX)\n namespace\n {\n   // A single conditional variable controlling all static initializations.\n@@ -98,34 +108,34 @@ namespace\n     return *static_cond;\n   }\n }\n-#endif\n+# endif\n \n-#ifndef _GLIBCXX_GUARD_TEST_AND_ACQUIRE\n+# ifndef _GLIBCXX_GUARD_TEST_AND_ACQUIRE\n inline bool\n __test_and_acquire (__cxxabiv1::__guard *g)\n {\n   bool b = _GLIBCXX_GUARD_TEST (g);\n   _GLIBCXX_READ_MEM_BARRIER;\n   return b;\n }\n-#define _GLIBCXX_GUARD_TEST_AND_ACQUIRE(G) __test_and_acquire (G)\n-#endif\n+#  define _GLIBCXX_GUARD_TEST_AND_ACQUIRE(G) __test_and_acquire (G)\n+# endif\n \n-#ifndef _GLIBCXX_GUARD_SET_AND_RELEASE\n+# ifndef _GLIBCXX_GUARD_SET_AND_RELEASE\n inline void\n __set_and_release (__cxxabiv1::__guard *g)\n {\n   _GLIBCXX_WRITE_MEM_BARRIER;\n   _GLIBCXX_GUARD_SET (g);\n }\n-#define _GLIBCXX_GUARD_SET_AND_RELEASE(G) __set_and_release (G)\n-#endif\n+#  define _GLIBCXX_GUARD_SET_AND_RELEASE(G) __set_and_release (G)\n+# endif\n \n #else /* !__GTHREADS */\n \n-#undef _GLIBCXX_GUARD_TEST_AND_ACQUIRE\n-#undef _GLIBCXX_GUARD_SET_AND_RELEASE\n-#define _GLIBCXX_GUARD_SET_AND_RELEASE(G) _GLIBCXX_GUARD_SET (G)\n+# undef _GLIBCXX_GUARD_TEST_AND_ACQUIRE\n+# undef _GLIBCXX_GUARD_SET_AND_RELEASE\n+# define _GLIBCXX_GUARD_SET_AND_RELEASE(G) _GLIBCXX_GUARD_SET (G)\n \n #endif /* __GTHREADS */\n \n@@ -176,8 +186,35 @@ namespace __gnu_cxx\n // headers define a symbol __GTHREAD_HAS_COND for platforms that support POSIX\n // like conditional variables. For platforms that do not support conditional\n // variables, we need to fall back to the old code.\n+\n+// If _GLIBCXX_USE_FUTEX, no global mutex or conditional variable is used,\n+// only atomic operations are used together with futex syscall.\n+// Valid values of the first integer in guard are:\n+// 0\t\t\t\t  No thread encountered the guarded init\n+//\t\t\t\t  yet or it has been aborted.\n+// _GLIBCXX_GUARD_BIT\t\t  The guarded static var has been successfully\n+//\t\t\t\t  initialized.\n+// _GLIBCXX_GUARD_PENDING_BIT\t  The guarded static var is being initialized\n+//\t\t\t\t  and no other thread is waiting for its\n+//\t\t\t\t  initialization.\n+// (_GLIBCXX_GUARD_PENDING_BIT    The guarded static var is being initialized\n+//  | _GLIBCXX_GUARD_WAITING_BIT) and some other threads are waiting until\n+//\t\t\t\t  it is initialized.\n+\n namespace __cxxabiv1 \n {\n+#ifdef _GLIBCXX_USE_FUTEX\n+  namespace\n+  {\n+    static inline int __guard_test_bit (const int __byte, const int __val)\n+    {\n+      union { int __i; char __c[sizeof (int)]; } __u = { 0 };\n+      __u.__c[__byte] = __val;\n+      return __u.__i;\n+    }\n+  }\n+#endif\n+\n   static inline int\n   init_in_progress_flag(__guard* g)\n   { return ((char *)g)[1]; }\n@@ -207,7 +244,7 @@ namespace __cxxabiv1\n       return 0;\n \n     if (init_in_progress_flag(g))\n-\tthrow_recursive_init_exception();\n+      throw_recursive_init_exception();\n \n     set_init_in_progress_flag(g, 1);\n     return 1;\n@@ -223,14 +260,46 @@ namespace __cxxabiv1\n     if (_GLIBCXX_GUARD_TEST_AND_ACQUIRE (g))\n       return 0;\n \n+# ifdef _GLIBCXX_USE_FUTEX\n+    // If __sync_* and futex syscall are supported, don't use any global\n+    // mutex.\n+    if (__gthread_active_p ())\n+      {\n+\tint *gi = (int *) (void *) g;\n+\tconst int guard_bit = _GLIBCXX_GUARD_BIT;\n+\tconst int pending_bit = _GLIBCXX_GUARD_PENDING_BIT;\n+\tconst int waiting_bit = _GLIBCXX_GUARD_WAITING_BIT;\n+\n+\twhile (1)\n+\t  {\n+\t    int old = __sync_val_compare_and_swap (gi, 0, pending_bit);\n+\t    if (old == 0)\n+\t      return 1;\t// This thread should do the initialization.\n+\n+\t    if (old == guard_bit)\n+\t      return 0;\t// Already initialized.\n+\n+\t    if (old == pending_bit)\n+\t      {\n+\t\tint newv = old | waiting_bit;\n+\t\tif (__sync_val_compare_and_swap (gi, old, newv) != old)\n+\t\t  continue;\n+\n+\t\told = newv;\n+\t      }\n+\n+\t    syscall (SYS_futex, gi, _GLIBCXX_FUTEX_WAIT, old, 0);\n+\t  }\n+      }\n+# else\n     if (__gthread_active_p ())\n       {\n \tmutex_wrapper mw;\n \n \twhile (1)\t// When this loop is executing, mutex is locked.\n \t  {\n-#ifdef __GTHREAD_HAS_COND\n-\t    // The static is allready initialized.\n+#  ifdef __GTHREAD_HAS_COND\n+\t    // The static is already initialized.\n \t    if (_GLIBCXX_GUARD_TEST(g))\n \t      return 0;\t// The mutex will be unlocked via wrapper\n \n@@ -247,7 +316,7 @@ namespace __cxxabiv1\n \t\tset_init_in_progress_flag(g, 1);\n \t\treturn 1; // The mutex will be unlocked via wrapper.\n \t      }\n-#else\n+#  else\n \t    // This provides compatibility with older systems not supporting\n \t    // POSIX like conditional variables.\n \t    if (acquire(g))\n@@ -256,9 +325,10 @@ namespace __cxxabiv1\n \t\treturn 1; // The mutex still locked.\n \t      }\n \t    return 0; // The mutex will be unlocked via wrapper.\n-#endif\n+#  endif\n \t  }\n       }\n+# endif\n #endif\n \n     return acquire (g);\n@@ -267,7 +337,20 @@ namespace __cxxabiv1\n   extern \"C\"\n   void __cxa_guard_abort (__guard *g)\n   {\n-#ifdef __GTHREAD_HAS_COND\n+#ifdef _GLIBCXX_USE_FUTEX\n+    // If __sync_* and futex syscall are supported, don't use any global\n+    // mutex.\n+    if (__gthread_active_p ())\n+      {\n+\tint *gi = (int *) (void *) g;\n+\tconst int waiting_bit = _GLIBCXX_GUARD_WAITING_BIT;\n+\tint old = __sync_lock_test_and_set (gi, 0);\n+\n+\tif ((old & waiting_bit) != 0)\n+\t  syscall (SYS_futex, gi, _GLIBCXX_FUTEX_WAKE, INT_MAX);\n+\treturn;\n+      }\n+#elif defined(__GTHREAD_HAS_COND)\n     if (__gthread_active_p())\n       {\t\n \tmutex_wrapper mw;\n@@ -293,7 +376,21 @@ namespace __cxxabiv1\n   extern \"C\"\n   void __cxa_guard_release (__guard *g)\n   {\n-#ifdef __GTHREAD_HAS_COND\n+#ifdef _GLIBCXX_USE_FUTEX\n+    // If __sync_* and futex syscall are supported, don't use any global\n+    // mutex.\n+    if (__gthread_active_p ())\n+      {\n+\tint *gi = (int *) (void *) g;\n+\tconst int guard_bit = _GLIBCXX_GUARD_BIT;\n+\tconst int waiting_bit = _GLIBCXX_GUARD_WAITING_BIT;\n+\tint old = __sync_lock_test_and_set (gi, guard_bit);\n+\n+\tif ((old & waiting_bit) != 0)\n+\t  syscall (SYS_futex, gi, _GLIBCXX_FUTEX_WAKE, INT_MAX);\n+\treturn;\n+      }\n+#elif defined(__GTHREAD_HAS_COND)\n     if (__gthread_active_p())\n       {\n \tmutex_wrapper mw;"}]}