{"sha": "a07b8f4fb756484893b5612cbe9410970dc76db9", "node_id": "C_kwDOANBUbNoAKGEwN2I4ZjRmYjc1NjQ4NDg5M2I1NjEyY2JlOTQxMDk3MGRjNzZkYjk", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-11T21:31:51Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-12T14:37:27Z"}, "message": "OpenACC 'kernels' decomposition: resolve wrong-code cases unless manually making certain variables addressable [PR100280, PR104892]\n\nCurrently in OpenACC 'kernels' decomposition, there is special handling of\n'GOMP_MAP_FORCE_TOFROM', documented to be done to avoid \"internal compiler\nerrors in later passes\".  For performance reasons, the current repetitive\nto/from device copying for every region is not ideal, compared to using\n'present' clauses, as done for almost all other 'GOMP_MAP_*'.  Also, the\ncurrent special handling (incomplete, evidently) is the reason for the PR104892\nmisbehavior.  For PR100280 etc. we've resolved all such known ICEs -- removing\nthe special handling for 'GOMP_MAP_FORCE_TOFROM' now resolves PR104892.\n\n\tPR middle-end/100280\n\tPR middle-end/104892\n\tgcc/\n\t* omp-oacc-kernels-decompose.cc (omp_oacc_kernels_decompose_1):\n\tRemove special handling of 'GOMP_MAP_FORCE_TOFROM'.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/kernels-decompose-2.c: Adjust.\n\t* c-c++-common/goacc/kernels-decompose-pr100400-1-1.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-pr100400-1-2.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-pr100400-1-3.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-pr100400-1-4.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-pr104061-1-1.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-pr104061-1-2.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-pr104061-1-3.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-pr104061-1-4.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-pr104132-1.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-pr104133-1.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-pr104774-1.c: Likewise.\n\t* gfortran.dg/goacc/classify-kernels.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-decompose-2.f95: Likewise.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/declare-vla.c: Adjust.\n\t* testsuite/libgomp.oacc-c-c++-common/default-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-reduction-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: Likewise.\n\t* testsuite/libgomp.oacc-fortran/asyncwait-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-reduction-1.f90:\n\tLikewise.", "tree": {"sha": "cb2dc031e84f0a6000d23acc6fa6a7681cc3ae12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb2dc031e84f0a6000d23acc6fa6a7681cc3ae12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a07b8f4fb756484893b5612cbe9410970dc76db9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a07b8f4fb756484893b5612cbe9410970dc76db9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a07b8f4fb756484893b5612cbe9410970dc76db9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a07b8f4fb756484893b5612cbe9410970dc76db9/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "535afbd959bc72de85fca36ba6417f075cca1018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535afbd959bc72de85fca36ba6417f075cca1018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/535afbd959bc72de85fca36ba6417f075cca1018"}], "stats": {"total": 165, "additions": 120, "deletions": 45}, "files": [{"sha": "4386787ba3c5c1e4315fb269c0fb692836891b4e", "filename": "gcc/omp-oacc-kernels-decompose.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Fomp-oacc-kernels-decompose.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Fomp-oacc-kernels-decompose.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-oacc-kernels-decompose.cc?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -1505,7 +1505,6 @@ omp_oacc_kernels_decompose_1 (gimple *kernels_stmt)\n \n \t    case GOMP_MAP_POINTER:\n \t    case GOMP_MAP_TO_PSET:\n-\t    case GOMP_MAP_FORCE_TOFROM:\n \t    case GOMP_MAP_FIRSTPRIVATE_POINTER:\n \t    case GOMP_MAP_FIRSTPRIVATE_REFERENCE:\n \t      /* ??? Copying these map kinds leads to internal compiler"}, {"sha": "3ce9490f02f9d9a17431ef0faee0d48d1196c372", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-2.c", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-2.c?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -46,7 +46,13 @@ main ()\n   int a[N], b[N], c[N];\n \n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n-    /* { dg-note {variable 'x\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'z' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'z' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'y' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'y' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'x' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'x' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'x\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n   {\n     /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n     x = 0;\n@@ -58,6 +64,8 @@ main ()\n   {\n     int i;\n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'i' made addressable} {} { target *-*-* } l_compute$c_compute } */\n     /* { dg-optimized {assigned OpenACC gang loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n   /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n   for (i = 0; i < N; i++)\n@@ -66,16 +74,16 @@ main ()\n \n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n   /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } l_compute$c_compute } */\n-  /* { dg-note {OpenACC 'kernels' decomposition: variable 'i' declared in block requested to be made addressable} {} { target *-*-* } l_compute$c_compute } */\n-  /* { dg-note {variable 'i' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'i' declared in block requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'i' made addressable} {} { target *-*-* } l_compute$c_compute } */\n   /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute$c_compute } */\n   {\n     int i;\n   }\n \n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n-  /* { dg-note {OpenACC 'kernels' decomposition: variable 'i' declared in block requested to be made addressable} {} { target *-*-* } l_compute$c_compute } */\n-  /* { dg-note {variable 'i' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'i' declared in block requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'i' made addressable} {} { target *-*-* } l_compute$c_compute } */\n   /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute$c_compute } */\n   /* { dg-optimized {assigned OpenACC gang loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n   /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n@@ -90,7 +98,9 @@ main ()\n   for (int i = 0; i < N; i++)\n     b[i] = a[N - i - 1];\n \n-#pragma acc kernels\n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'z' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'z' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n   {\n #pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */\n     /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i$c_loop_i } */\n@@ -129,6 +139,8 @@ main ()\n   }\n \n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'y' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'y' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n   /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n   /*TODO What does this mean?\n     TODO { dg-optimized \"assigned OpenACC worker vector loop parallelism\" \"\" { target *-*-* } l_compute$c_compute } */\n@@ -166,6 +178,8 @@ main ()\n   }\n \n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'y' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'y' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n   /* { dg-bogus \"warning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'kernels'\" { xfail *-*-* } l_compute$c_compute } */\n   {\n     y = f_g (a[5]); /* { dg-line l_part[incr c_part] } */\n@@ -182,7 +196,11 @@ main ()\n       b[j] = y + f_w (c[j]); /* { dg-optimized \"assigned OpenACC worker vector loop parallelism\" } */\n   }\n \n-#pragma acc kernels\n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'z' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'z' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'y' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'y' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n   {\n     /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n     y = 3;"}, {"sha": "57cb1a8cb87a01895f65eb0179d4a24a1163f408", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr100400-1-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-1.c?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -13,6 +13,8 @@ void\n foo (void)\n {\n #pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'p' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute1 }\n+     { dg-note {variable 'p' made addressable} {} { target *-*-* } l_compute1 } */\n   /* { dg-note {variable 'c' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute1 } */\n   /* { dg-note {variable 'c\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute1 } */\n   {"}, {"sha": "a643f109bf14910fc85dee1a5088dfae0ba74bff", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr100400-1-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-2.c?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -18,6 +18,8 @@ foo (void)\n {\n   /* { dg-bogus {sorry, unimplemented: 'gimple_debug' not yet supported} TODO { xfail *-*-* } .+1 } */\n #pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'p' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute1 }\n+     { dg-note {variable 'p' made addressable} {} { target *-*-* xfail c++ } l_compute1 } */\n   /* { dg-note {variable 'c' declared in block is candidate for adjusting OpenACC privatization level} {} { xfail *-*-* } l_compute1 } */\n   /* { dg-note {variable 'c\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail *-*-* } l_compute1 } */\n   {"}, {"sha": "9779f1036f601b95d57404368039a38621a41e8e", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr100400-1-3.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-3.c?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -20,6 +20,8 @@ foo (void)\n {\n   /* { dg-bogus {sorry, unimplemented: 'gimple_debug' not yet supported} {} { target *-*-* } .+1 } suppressed via '-fcompare-debug'.  */\n #pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'p' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute1 }\n+     { dg-note {variable 'p' made addressable} {} { target *-*-* } l_compute1 } */\n   /* { dg-note {variable 'c' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute1 } */\n   /* { dg-note {variable 'c\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute1 } */\n   {"}, {"sha": "2feabf3c7d6697d2a9f8bf273ff6f9014f003189", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr100400-1-4.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-4.c?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -18,6 +18,8 @@ foo (void)\n {\n   /* { dg-bogus {sorry, unimplemented: 'gimple_debug' not yet supported} {} { target *-*-* } .+1 } suppressed via '-fcompare-debug'.  */\n #pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'p' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute1 }\n+     { dg-note {variable 'p' made addressable} {} { target *-*-* xfail c++ } l_compute1 } */\n   /* { dg-note {variable 'c' declared in block is candidate for adjusting OpenACC privatization level} {} { xfail c++ } l_compute1 } */\n   /* { dg-note {variable 'c\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail c++ } l_compute1 } */\n   {"}, {"sha": "aa0fca7b6ed94026ae745da9322eda85c689311f", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104061-1-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-1.c?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -15,6 +15,8 @@ void\n foo (void)\n {\n #pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'arr_0' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute1 }\n+     { dg-note {variable 'arr_0' made addressable} {} { target *-*-* } l_compute1 } */\n   /* { dg-note {variable 'arr_0\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute1 } */\n   {\n     int k;"}, {"sha": "4d7cbb04f4b233442b9c19992bd3955b0df7f065", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104061-1-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-2.c?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -16,6 +16,8 @@ foo (void)\n {\n   /* { dg-bogus {sorry, unimplemented: 'gimple_debug' not yet supported} TODO { xfail *-*-* } .+1 } */\n #pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'arr_0' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute1 }\n+     { dg-note {variable 'arr_0' made addressable} {} { target *-*-* } l_compute1 } */\n   /* { dg-bogus {note: OpenACC 'kernels' decomposition: variable 'k' declared in block requested to be made addressable} {w/ debug} { xfail *-*-* } l_compute1 } */\n   /* { dg-bogus {note: variable 'k' made addressable} {w/ debug} { xfail *-*-* } l_compute1 } */\n   /* { dg-note {variable 'arr_0\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail *-*-* } l_compute1 } */"}, {"sha": "70c2ac5b5312bab3a6e10dc8edd71cf215e99db3", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104061-1-3.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-3.c?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -17,6 +17,8 @@ foo (void)\n {\n   /* { dg-bogus {sorry, unimplemented: 'gimple_debug' not yet supported} {} { target *-*-* } .+1 } suppressed via '-fcompare-debug'.  */\n #pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'arr_0' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute1 }\n+     { dg-note {variable 'arr_0' made addressable} {} { target *-*-* } l_compute1 } */\n   /* { dg-bogus {note: OpenACC 'kernels' decomposition: variable 'k' declared in block requested to be made addressable} {w/ debug} { xfail *-*-* } l_compute1 } */\n   /* { dg-bogus {note: variable 'k' made addressable} {w/ debug} { xfail *-*-* } l_compute1 } */\n   /* { dg-bogus {note: variable 'k' declared in block is candidate for adjusting OpenACC privatization level} {w/ debug} { xfail *-*-* } l_compute1 } */"}, {"sha": "d1cc1a97c9f0b1a9c2bf70d82d87a1876309eaa6", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104061-1-4.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-4.c?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -17,6 +17,8 @@ foo (void)\n {\n   /* { dg-bogus {sorry, unimplemented: 'gimple_debug' not yet supported} {} { target *-*-* } .+1 } suppressed via '-fcompare-debug'.  */\n #pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'arr_0' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute1 }\n+     { dg-note {variable 'arr_0' made addressable} {} { target *-*-* } l_compute1 } */\n   /* { dg-bogus {note: OpenACC 'kernels' decomposition: variable 'k' declared in block requested to be made addressable} {w/ debug} { xfail *-*-* } l_compute1 } */\n   /* { dg-bogus {note: variable 'k' made addressable} {w/ debug} { xfail *-*-* } l_compute1 } */\n   /* { dg-bogus {note: variable 'k' declared in block is candidate for adjusting OpenACC privatization level} {w/ debug} { xfail *-*-* } l_compute1 } */"}, {"sha": "2a663e0ea19a7390cc17d737ffc29a7900fb561d", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104132-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104132-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104132-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104132-1.c?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -12,6 +12,8 @@ void\n foo (void)\n {\n #pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'arr_0' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute1 }\n+     { dg-note {variable 'arr_0' made addressable} {} { target *-*-* } l_compute1 } */\n   /* { dg-note {OpenACC 'kernels' decomposition: variable 'k' declared in block requested to be made addressable} {} { target *-*-* } l_compute1 } */\n   /* { dg-note {variable 'k' made addressable} {} { target *-*-* } l_compute1 } */\n   /* { dg-note {variable 'k' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute1 } */"}, {"sha": "2724e22a550569c2830c2c123d793351e4bb3587", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104133-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104133-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104133-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104133-1.c?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -12,6 +12,8 @@ void\n foo (void)\n {\n #pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'arr_0' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute1 }\n+     { dg-note {variable 'arr_0' made addressable} {} { target *-*-* } l_compute1 } */\n   /* { dg-note {OpenACC 'kernels' decomposition: variable 'k' declared in block requested to be made addressable} {} { target *-*-* } l_compute1 } */\n   /* { dg-note {variable 'k' made addressable} {} { target *-*-* } l_compute1 } */\n   /* { dg-note {variable 'k' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute1 } */"}, {"sha": "3ef0c897bcda5534514b27035528695b78cf07b6", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104774-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104774-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104774-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104774-1.c?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -12,6 +12,8 @@ void\n foo (void)\n {\n #pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'arr_0' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute1 }\n+     { dg-note {variable 'arr_0' made addressable} {} { target *-*-* } l_compute1 } */\n   /* { dg-note {OpenACC 'kernels' decomposition: variable 'k' declared in block requested to be made addressable} {} { target *-*-* } l_compute1 } */\n   /* { dg-note {variable 'k' made addressable} {} { target *-*-* } l_compute1 } */\n   /* { dg-note {variable 'k' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute1 } */"}, {"sha": "2ed6cdb6115726ce15904d89cb7439379fc24fe9", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels.f95", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -21,6 +21,8 @@ program main\n   call setup(a, b)\n \n   !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-line l_compute1 }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute1 } */\n+  !   { dg-note {variable 'i' made addressable} {} { target *-*-* } l_compute1 } */\n   ! { dg-optimized {assigned OpenACC gang loop parallelism} {} { target *-*-* } l_compute1 }\n   ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 }\n   do i = 0, n - 1"}, {"sha": "f6228b97944034aafb34acb6f1baa787f0efbae5", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-decompose-2.f95", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-decompose-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-decompose-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-decompose-2.f95?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -40,7 +40,15 @@ program main\n   integer, parameter :: N = 10\n   integer :: a(N), b(N), c(N)\n \n-  !$acc kernels\n+  !$acc kernels ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'z' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'z' made addressable} {} { target *-*-* } l_compute$c_compute }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'y_l' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'y_l' made addressable} {} { target *-*-* } l_compute$c_compute }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'y' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'y' made addressable} {} { target *-*-* } l_compute$c_compute }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'x' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'x' made addressable} {} { target *-*-* } l_compute$c_compute }\n   ! { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 }\n   x = 0\n   y = 0\n@@ -51,6 +59,8 @@ program main\n   !$acc end kernels\n \n   !$acc kernels ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'i' made addressable} {} { target *-*-* } l_compute$c_compute }\n   ! { dg-optimized {assigned OpenACC gang loop parallelism} {} { target *-*-* } l_compute$c_compute }\n   ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 }\n   do i = 1, N\n@@ -66,7 +76,9 @@ program main\n      b(i) = a(N - i + 1)\n   end do\n \n-  !$acc kernels\n+  !$acc kernels ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'z' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'z' already made addressable} {} { target *-*-* } l_compute$c_compute }\n   !$acc loop ! { dg-line l_loop_i[incr c_loop_i] }\n   ! { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i$c_loop_i }\n   ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i }\n@@ -104,6 +116,8 @@ program main\n   !$acc end kernels\n \n   !$acc kernels ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'y' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'y' already made addressable} {} { target *-*-* } l_compute$c_compute }\n   !TODO What does this mean?\n   !TODO { dg-optimized \"assigned OpenACC worker vector loop parallelism\" \"\" { target *-*-* } l_compute$c_compute }\n   !$acc loop independent ! { dg-line l_loop_i[incr c_loop_i] }\n@@ -141,6 +155,8 @@ program main\n   !$acc end kernels\n \n   !$acc kernels ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'y' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'y' already made addressable} {} { target *-*-* } l_compute$c_compute }\n   ! { dg-bogus \"\\[Ww\\]arning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'kernels'\" { xfail *-*-* } l_compute$c_compute }\n   y = f_g (a(5)) ! { dg-line l_part[incr c_part] }\n   !TODO If such a construct is placed in its own part (like it is, here), can't this actually use gang paralelism, instead of \"gang-single\"?\n@@ -156,7 +172,11 @@ program main\n   end do\n   !$acc end kernels\n \n-  !$acc kernels\n+  !$acc kernels ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'z' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'z' already made addressable} {} { target *-*-* } l_compute$c_compute }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'y' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'y' already made addressable} {} { target *-*-* } l_compute$c_compute }\n   ! { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 }\n   y = 3\n "}, {"sha": "cf423d60327412e6ac9a1ac425bb70fec9a6d244", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/declare-vla.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla.c?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -33,6 +33,10 @@ f (void)\n     A[i] = -i;\n \n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'i' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'N' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'N' made addressable} {} { target *-*-* } l_compute$c_compute } */\n   /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target { ! __OPTIMIZE__ } } l_compute$c_compute }\n      { dg-optimized {assigned OpenACC gang loop parallelism} {} { target __OPTIMIZE__ } l_compute$c_compute } */\n   /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */"}, {"sha": "9a504384c69d8c9e2e1061f3c405a5b59b41cf9f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/default-1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdefault-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdefault-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdefault-1.c?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -65,8 +65,6 @@ int test_parallel ()\n int test_kernels ()\n {\n   int val = 2;\n-  /*TODO <https://gcc.gnu.org/PR104892> */\n-  (volatile int *) &val;\n   int ary[32];\n   int ondev = 0;\n \n@@ -75,8 +73,9 @@ int test_kernels ()\n \n   /* val defaults to copy, ary defaults to copy.  */\n #pragma acc kernels copy(ondev) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'val' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'val' made addressable} {} { target *-*-* } l_compute$c_compute } */\n   /* { dg-note {variable 'ondev\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n-  /* { dg-note {variable 'val\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n   {\n     /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n     ondev = acc_on_device (acc_device_not_host);"}, {"sha": "763f697deecad0c0b942665576ad985e4af55b80", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -29,15 +29,19 @@ static int g2;\n static void f1 ()\n {\n   int a = 0;\n-  /*TODO <https://gcc.gnu.org/PR104892> */\n-  (volatile int *) &a;\n #define N 123\n   int b[N] = { 0 };\n   unsigned long long f1;\n-  /*TODO <https://gcc.gnu.org/PR104892> */\n-  (volatile void *) &f1;\n \n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'f1' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'f1' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'a' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'a' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'g2' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'g2' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'g1' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'g1' made addressable} {} { target *-*-* } l_compute$c_compute } */\n   {\n     /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n     int c = 234;\n@@ -84,14 +88,12 @@ static void f1 ()\n \n       /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n       f1 = 1;\n-      /* { dg-note {variable 'f1\\.1' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n #pragma acc loop /* { dg-line l_loop_c[incr c_loop_c] } */\n       /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_c$c_loop_c } */\n       /* { dg-note {variable 'c' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_c$c_loop_c } */\n       /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_c$c_loop_c } */\n       for (c = 20; c > 0; --c)\n \tf1 *= c;\n-\t/* { dg-note {variable 'f1\\.2' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n \n       {\n \t/* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n@@ -109,7 +111,6 @@ static void f1 ()\n \t{\n \t  /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n \t  if (f2 != f1)\n-\t    /* { dg-note {variable 'f1\\.3' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target { ! __OPTIMIZE__ } } l_compute$c_compute } */\n \t    __builtin_abort ();\n \n \t  /* As this is still in the preceding 'parloops' part:\n@@ -133,7 +134,6 @@ static void f1 ()\n \t/* As this is still in the preceding 'parloops' part:\n \t   { dg-bogus {note: beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n \tif (f2 != f1)\n-\t  /* { dg-note {variable 'f1\\.4' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target { ! __OPTIMIZE__ } } l_compute$c_compute } */\n \t  __builtin_abort ();\n       }\n "}, {"sha": "3da1a495411279ba4ea992b90322a68e5759d7a2", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-reduction-1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-reduction-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-reduction-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-reduction-1.c?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -19,11 +19,10 @@ int\n main ()\n {\n   int i, red = 0;\n-  /*TODO <https://gcc.gnu.org/PR104892> */\n-  (volatile int *) &red;\n \n #pragma acc kernels /* { dg-line l_compute1 } */\n-  /* { dg-note {variable 'red\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute1 } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'red' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute1 }\n+     { dg-note {variable 'red' made addressable} {} { target *-*-* } l_compute1 } */\n   {\n #pragma acc loop reduction (+:red) /* { dg-line l_loop_i1 } */\n     /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i1 } */"}, {"sha": "b1cfe37df8aaa9c9df063e2e25fdc89c53de7ca9", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-dims.c", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -642,14 +642,21 @@ int main ()\n      kernels.  */\n   {\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n-    /*TODO <https://gcc.gnu.org/PR104892> */\n-    (volatile int *) &gangs_min, &gangs_max, &workers_min, &workers_max, &vectors_min, &vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n-    /* { dg-note {variable 'gangs_max\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n-    /* { dg-note {variable 'workers_max\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n-    /* { dg-note {variable 'vectors_max\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'vectors_max' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'vectors_max' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'vectors_min' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'vectors_min' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'workers_max' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'workers_max' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'workers_min' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'workers_min' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'gangs_max' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'gangs_max' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'gangs_min' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'gangs_min' made addressable} {} { target *-*-* } l_compute$c_compute } */\n     {\n #pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */ \\\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n@@ -682,17 +689,24 @@ int main ()\n #define WORKERS 5\n #define VECTORS 13\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n-    /*TODO <https://gcc.gnu.org/PR104892> */\n-    (volatile int *) &gangs_min, &gangs_max, &workers_min, &workers_max, &vectors_min, &vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */ \\\n   num_gangs (gangs) \\\n   num_workers (WORKERS) \\\n   vector_length (VECTORS)\n-    /* { dg-note {variable 'gangs_max\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n-    /* { dg-note {variable 'workers_max\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n-    /* { dg-note {variable 'vectors_max\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'vectors_max' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'vectors_max' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'vectors_min' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'vectors_min' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'workers_max' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'workers_max' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'workers_min' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'workers_min' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'gangs_max' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'gangs_max' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'gangs_min' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'gangs_min' made addressable} {} { target *-*-* } l_compute$c_compute } */\n     {\n #pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */ \\\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)"}, {"sha": "6e4e447699dc43923fa72ee3c1cf7c20829ad935", "filename": "libgomp/testsuite/libgomp.oacc-fortran/asyncwait-1.f90", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fasyncwait-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fasyncwait-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fasyncwait-1.f90?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -219,6 +219,8 @@ program asyncwait\n   !$acc data copy (a(1:N)) copy (b(1:N)) copy (c(1:N)) copy (d(1:N))\n \n   !$acc kernels async (1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'i' made addressable} {} { target *-*-* } l_compute$c_compute } */\n   ! { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target *-*-* } l_compute$c_compute }\n   ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 }\n   do i = 1, N\n@@ -227,6 +229,8 @@ program asyncwait\n   !$acc end kernels\n \n   !$acc kernels async (1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n   ! { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target *-*-* } l_compute$c_compute }\n   ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 }\n   do i = 1, N\n@@ -263,6 +267,8 @@ program asyncwait\n   !$acc data copy (a(1:N), b(1:N), c(1:N), d(1:N), e(1:N))\n \n   !$acc kernels async (1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n   ! { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target *-*-* } l_compute$c_compute }\n   ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 }\n   do i = 1, N"}, {"sha": "0688dd8ae0d76f239ac57013b211c9293a6149a0", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-reduction-1.f90", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07b8f4fb756484893b5612cbe9410970dc76db9/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-reduction-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07b8f4fb756484893b5612cbe9410970dc76db9/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-reduction-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-reduction-1.f90?ref=a07b8f4fb756484893b5612cbe9410970dc76db9", "patch": "@@ -15,13 +15,12 @@\n program reduction\n   integer, parameter     :: n = 20\n   integer                :: i, red\n-  !TODO <https://gcc.gnu.org/PR104892>\n-  call make_addressable (red)\n \n   red = 0\n \n   !$acc kernels ! { dg-line l_compute1 } */\n-  ! { dg-note {variable 'red\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute1 }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'red' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute1 }\n+  !   { dg-note {variable 'red' made addressable} {} { target *-*-* } l_compute1 }\n   !$acc loop reduction (+:red) ! { dg-line l_loop_i1 }\n   ! { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i1 }\n   ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i1 }\n@@ -32,11 +31,4 @@ program reduction\n   !$acc end kernels\n \n   if (red .ne. n) stop 1\n-\n-contains\n-\n-  subroutine make_addressable (v)\n-    integer :: v ! by reference\n-  end subroutine make_addressable\n-\n end program reduction"}]}