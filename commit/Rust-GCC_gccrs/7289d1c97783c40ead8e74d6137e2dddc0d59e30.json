{"sha": "7289d1c97783c40ead8e74d6137e2dddc0d59e30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI4OWQxYzk3NzgzYzQwZWFkOGU3NGQ2MTM3ZTJkZGRjMGQ1OWUzMA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2013-12-18T22:00:53Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2013-12-18T22:00:53Z"}, "message": "re PR fortran/59493 ([OOP] ICE: Segfault on Class(*) pointer association)\n\n2013-12-18  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/59493\n\t* gfortran.h (gfc_find_intrinsic_vtab): Removed prototype.\n\t(gfc_find_vtab): New prototype.\n\t* class.c (gfc_find_intrinsic_vtab): Rename to 'find_intrinsic_vtab' and\n\tmake static. Minor modifications.\n\t(gfc_find_vtab): New function.\n\t(gfc_class_initializer): Use new function 'gfc_find_vtab'.\n\t* check.c (gfc_check_move_alloc): Ditto.\n\t* expr.c (gfc_check_pointer_assign): Ditto.\n\t* interface.c (compare_actual_formal): Ditto.\n\t* resolve.c (resolve_allocate_expr, resolve_select_type): Ditto.\n\t* trans-expr.c (gfc_conv_intrinsic_to_class, gfc_trans_class_assign):\n\tDitto.\n\t* trans-intrinsic.c (conv_intrinsic_move_alloc): Ditto.\n\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n\nFrom-SVN: r206101", "tree": {"sha": "192e21ebbdbdd80b1285dd235fa974713a3cb89a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/192e21ebbdbdd80b1285dd235fa974713a3cb89a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7289d1c97783c40ead8e74d6137e2dddc0d59e30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7289d1c97783c40ead8e74d6137e2dddc0d59e30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7289d1c97783c40ead8e74d6137e2dddc0d59e30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7289d1c97783c40ead8e74d6137e2dddc0d59e30/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f00f3b679e86ce80311dbeaa514ff488634f9245", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f00f3b679e86ce80311dbeaa514ff488634f9245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f00f3b679e86ce80311dbeaa514ff488634f9245"}], "stats": {"total": 138, "additions": 69, "deletions": 69}, "files": [{"sha": "2a1e1972e70f2fcefa2ce0abba52a3635e8ac42d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7289d1c97783c40ead8e74d6137e2dddc0d59e30", "patch": "@@ -1,3 +1,21 @@\n+2013-12-18  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59493\n+\t* gfortran.h (gfc_find_intrinsic_vtab): Removed prototype.\n+\t(gfc_find_vtab): New prototype.\n+\t* class.c (gfc_find_intrinsic_vtab): Rename to 'find_intrinsic_vtab' and\n+\tmake static. Minor modifications.\n+\t(gfc_find_vtab): New function.\n+\t(gfc_class_initializer): Use new function 'gfc_find_vtab'.\n+\t* check.c (gfc_check_move_alloc): Ditto.\n+\t* expr.c (gfc_check_pointer_assign): Ditto.\n+\t* interface.c (compare_actual_formal): Ditto.\n+\t* resolve.c (resolve_allocate_expr, resolve_select_type): Ditto.\n+\t* trans-expr.c (gfc_conv_intrinsic_to_class, gfc_trans_class_assign):\n+\tDitto.\n+\t* trans-intrinsic.c (conv_intrinsic_move_alloc): Ditto.\n+\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n+\n 2013-12-16  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/54949"}, {"sha": "0064761e17087c2e230d25d0e9a1c7c26c2178ca", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=7289d1c97783c40ead8e74d6137e2dddc0d59e30", "patch": "@@ -2858,12 +2858,7 @@ gfc_check_move_alloc (gfc_expr *from, gfc_expr *to)\n \n   /* CLASS arguments: Make sure the vtab of from is present.  */\n   if (to->ts.type == BT_CLASS && !UNLIMITED_POLY (from))\n-    {\n-      if (from->ts.type == BT_CLASS || from->ts.type == BT_DERIVED)\n-\tgfc_find_derived_vtab (from->ts.u.derived);\n-      else\n-\tgfc_find_intrinsic_vtab (&from->ts);\n-    }\n+    gfc_find_vtab (&from->ts);\n \n   return true;\n }"}, {"sha": "5c3a4ec37fb4020ac6ab3fd7870ed41531396a01", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=7289d1c97783c40ead8e74d6137e2dddc0d59e30", "patch": "@@ -423,18 +423,11 @@ gfc_class_initializer (gfc_typespec *ts, gfc_expr *init_expr)\n   gfc_expr *init;\n   gfc_component *comp;\n   gfc_symbol *vtab = NULL;\n-  bool is_unlimited_polymorphic;\n \n-  is_unlimited_polymorphic = ts->u.derived\n-      && ts->u.derived->components->ts.u.derived\n-      && ts->u.derived->components->ts.u.derived->attr.unlimited_polymorphic;\n-\n-  if (is_unlimited_polymorphic && init_expr)\n-    vtab = gfc_find_intrinsic_vtab (&ts->u.derived->components->ts);\n-  else if (init_expr && init_expr->expr_type != EXPR_NULL)\n-    vtab = gfc_find_derived_vtab (init_expr->ts.u.derived);\n+  if (init_expr && init_expr->expr_type != EXPR_NULL)\n+    vtab = gfc_find_vtab (&init_expr->ts);\n   else\n-    vtab = gfc_find_derived_vtab (ts->u.derived);\n+    vtab = gfc_find_vtab (ts);\n \n   init = gfc_get_structure_constructor_expr (ts->type, ts->kind,\n \t\t\t\t\t     &ts->u.derived->declared_at);\n@@ -2403,39 +2396,34 @@ gfc_is_finalizable (gfc_symbol *derived, gfc_expr **final_expr)\n \n \n /* Find (or generate) the symbol for an intrinsic type's vtab.  This is\n-   need to support unlimited polymorphism.  */\n+   needed to support unlimited polymorphism.  */\n \n-gfc_symbol *\n-gfc_find_intrinsic_vtab (gfc_typespec *ts)\n+static gfc_symbol *\n+find_intrinsic_vtab (gfc_typespec *ts)\n {\n   gfc_namespace *ns;\n   gfc_symbol *vtab = NULL, *vtype = NULL, *found_sym = NULL;\n   gfc_symbol *copy = NULL, *src = NULL, *dst = NULL;\n   int charlen = 0;\n \n-  if (ts->type == BT_CHARACTER && ts->deferred)\n+  if (ts->type == BT_CHARACTER)\n     {\n-      gfc_error (\"TODO: Deferred character length variable at %C cannot \"\n-\t\t \"yet be associated with unlimited polymorphic entities\");\n-      return NULL;\n+      if (ts->deferred)\n+\t{\n+\t  gfc_error (\"TODO: Deferred character length variable at %C cannot \"\n+\t\t     \"yet be associated with unlimited polymorphic entities\");\n+\t  return NULL;\n+\t}\n+      else if (ts->u.cl && ts->u.cl->length\n+\t       && ts->u.cl->length->expr_type == EXPR_CONSTANT)\n+\tcharlen = mpz_get_si (ts->u.cl->length->value.integer);\n     }\n \n-  if (ts->type == BT_UNKNOWN)\n-    return NULL;\n-\n-  /* Sometimes the typespec is passed from a single call.  */\n-  if (ts->type == BT_DERIVED || ts->type == BT_CLASS)\n-    return gfc_find_derived_vtab (ts->u.derived);\n-\n   /* Find the top-level namespace.  */\n   for (ns = gfc_current_ns; ns; ns = ns->parent)\n     if (!ns->parent)\n       break;\n \n-  if (ts->type == BT_CHARACTER && ts->u.cl && ts->u.cl->length\n-      && ts->u.cl->length->expr_type == EXPR_CONSTANT)\n-    charlen = mpz_get_si (ts->u.cl->length->value.integer);\n-\n   if (ns)\n     {\n       char name[GFC_MAX_SYMBOL_LEN+1], tname[GFC_MAX_SYMBOL_LEN+1];\n@@ -2636,6 +2624,25 @@ gfc_find_intrinsic_vtab (gfc_typespec *ts)\n }\n \n \n+/*  Find (or generate) a vtab for an arbitrary type (derived or intrinsic).  */\n+\n+gfc_symbol *\n+gfc_find_vtab (gfc_typespec *ts)\n+{\n+  switch (ts->type)\n+    {\n+    case BT_UNKNOWN:\n+      return NULL;\n+    case BT_DERIVED:\n+      return gfc_find_derived_vtab (ts->u.derived);\n+    case BT_CLASS:\n+      return gfc_find_derived_vtab (ts->u.derived->components->ts.u.derived);\n+    default:\n+      return find_intrinsic_vtab (ts);\n+    }\n+}\n+\n+\n /* General worker function to find either a type-bound procedure or a\n    type-bound user operator.  */\n "}, {"sha": "00a4beff62b60c8bd71f0cf1efedc213a3b2475e", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=7289d1c97783c40ead8e74d6137e2dddc0d59e30", "patch": "@@ -3618,11 +3618,9 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n       return false;\n     }\n \n-    /* Make sure the vtab is present.  */\n-  if (lvalue->ts.type == BT_CLASS && rvalue->ts.type == BT_DERIVED)\n-    gfc_find_derived_vtab (rvalue->ts.u.derived);\n-  else if (UNLIMITED_POLY (lvalue) && !UNLIMITED_POLY (rvalue))\n-    gfc_find_intrinsic_vtab (&rvalue->ts);\n+  /* Make sure the vtab is present.  */\n+  if (lvalue->ts.type == BT_CLASS && !UNLIMITED_POLY (rvalue))\n+    gfc_find_vtab (&rvalue->ts);\n \n   /* Check rank remapping.  */\n   if (rank_remap)"}, {"sha": "03d9136d01bf8109a25901d805f3e0e8f50f1bc5", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=7289d1c97783c40ead8e74d6137e2dddc0d59e30", "patch": "@@ -2990,7 +2990,7 @@ unsigned int gfc_hash_value (gfc_symbol *);\n bool gfc_build_class_symbol (gfc_typespec *, symbol_attribute *,\n \t\t\t\tgfc_array_spec **, bool);\n gfc_symbol *gfc_find_derived_vtab (gfc_symbol *);\n-gfc_symbol *gfc_find_intrinsic_vtab (gfc_typespec *);\n+gfc_symbol *gfc_find_vtab (gfc_typespec *);\n gfc_symtree* gfc_find_typebound_proc (gfc_symbol*, bool*,\n \t\t\t\t      const char*, bool, locus*);\n gfc_symtree* gfc_find_typebound_user_op (gfc_symbol*, bool*,"}, {"sha": "243b0f12150e27f657a98d58980ea480a969bdf8", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=7289d1c97783c40ead8e74d6137e2dddc0d59e30", "patch": "@@ -2606,7 +2606,7 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n       if (UNLIMITED_POLY (f->sym)\n \t  && a->expr->ts.type != BT_DERIVED\n \t  && a->expr->ts.type != BT_CLASS)\n-\tgfc_find_intrinsic_vtab (&a->expr->ts);\n+\tgfc_find_vtab (&a->expr->ts);\n \n       if (a->expr->expr_type == EXPR_NULL\n \t  && ((f->sym->ts.type != BT_CLASS && !f->sym->attr.pointer"}, {"sha": "57e6cbb979ed72108cab1fbd4b782d9ef75dfc6a", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=7289d1c97783c40ead8e74d6137e2dddc0d59e30", "patch": "@@ -6930,10 +6930,7 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n \n       gcc_assert (ts);\n \n-      if (ts->type == BT_CLASS || ts->type == BT_DERIVED)\n-        gfc_find_derived_vtab (ts->u.derived);\n-      else\n-        gfc_find_intrinsic_vtab (ts);\n+      gfc_find_vtab (ts);\n \n       if (dimension)\n \te = gfc_expr_to_initialize (e);\n@@ -8054,7 +8051,7 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n \t  gfc_symbol *ivtab;\n \t  gfc_expr *e;\n \n-\t  ivtab = gfc_find_intrinsic_vtab (&c->ts);\n+\t  ivtab = gfc_find_vtab (&c->ts);\n \t  gcc_assert (ivtab && CLASS_DATA (ivtab)->initializer);\n \t  e = CLASS_DATA (ivtab)->initializer;\n \t  c->low = c->high = gfc_copy_expr (e);"}, {"sha": "d6498ae607a8d29fa6a3f271ff6fc3cdcd23da13", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=7289d1c97783c40ead8e74d6137e2dddc0d59e30", "patch": "@@ -558,7 +558,7 @@ gfc_conv_intrinsic_to_class (gfc_se *parmse, gfc_expr *e,\n   /* Set the vptr.  */\n   ctree =  gfc_class_vptr_get (var);\n \n-  vtab = gfc_find_intrinsic_vtab (&e->ts);\n+  vtab = gfc_find_vtab (&e->ts);\n   gcc_assert (vtab);\n   tmp = gfc_build_addr_expr (NULL_TREE, gfc_get_symbol_decl (vtab));\n   gfc_add_modify (&parmse->pre, ctree,\n@@ -1015,12 +1015,10 @@ gfc_trans_class_assign (gfc_expr *expr1, gfc_expr *expr2, gfc_exec_op op)\n  \t  goto assign_vptr;\n \t}\n \n-      if (expr2->ts.type == BT_DERIVED)\n-\tvtab = gfc_find_derived_vtab (expr2->ts.u.derived);\n-      else if (expr2->expr_type == EXPR_NULL)\n-\tvtab = gfc_find_derived_vtab (expr1->ts.u.derived);\n+      if (expr2->expr_type == EXPR_NULL)\n+\tvtab = gfc_find_vtab (&expr1->ts);\n       else\n-\tvtab = gfc_find_intrinsic_vtab (&expr2->ts);\n+\tvtab = gfc_find_vtab (&expr2->ts);\n       gcc_assert (vtab);\n \n       rhs = gfc_get_expr ();"}, {"sha": "1f5d6154befafc6d7c2821791a692bf74c526481", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=7289d1c97783c40ead8e74d6137e2dddc0d59e30", "patch": "@@ -7657,10 +7657,7 @@ conv_intrinsic_move_alloc (gfc_code *code)\n \t    }\n \t  else\n \t    {\n-\t      if (from_expr->ts.type != BT_DERIVED)\n-\t\tvtab = gfc_find_intrinsic_vtab (&from_expr->ts);\n-\t      else\n-\t\tvtab = gfc_find_derived_vtab (from_expr->ts.u.derived);\n+\t      vtab = gfc_find_vtab (&from_expr->ts);\n \t      gcc_assert (vtab);\n \t      tmp = gfc_build_addr_expr (NULL_TREE, gfc_get_symbol_decl (vtab));\n \t      gfc_add_modify_loc (input_location, &block, to_se.expr,\n@@ -7714,10 +7711,7 @@ conv_intrinsic_move_alloc (gfc_code *code)\n \t}\n       else\n \t{\n-\t  if (from_expr->ts.type != BT_DERIVED)\n-\t    vtab = gfc_find_intrinsic_vtab (&from_expr->ts);\n-\t  else\n-\t    vtab = gfc_find_derived_vtab (from_expr->ts.u.derived);\n+\t  vtab = gfc_find_vtab (&from_expr->ts);\n \t  gcc_assert (vtab);\n \t  tmp = gfc_build_addr_expr (NULL_TREE, gfc_get_symbol_decl (vtab));\n \t  gfc_add_modify_loc (input_location, &block, to_se.expr,"}, {"sha": "51d037e90f9acbe90f0664b356898fb1092ab0d6", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7289d1c97783c40ead8e74d6137e2dddc0d59e30/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=7289d1c97783c40ead8e74d6137e2dddc0d59e30", "patch": "@@ -5144,10 +5144,7 @@ gfc_trans_allocate (gfc_code * code)\n \n \t      if (ts->type == BT_DERIVED || UNLIMITED_POLY (e))\n \t\t{\n-\t\t  if (ts->type == BT_DERIVED)\n-\t\t  vtab = gfc_find_derived_vtab (ts->u.derived);\n-\t\t  else\n-\t\t    vtab = gfc_find_intrinsic_vtab (ts);\n+\t\t  vtab = gfc_find_vtab (ts);\n \t\t  gcc_assert (vtab);\n \t\t  gfc_init_se (&lse, NULL);\n \t\t  lse.want_pointer = 1;\n@@ -5232,12 +5229,8 @@ gfc_trans_allocate (gfc_code * code)\n \t\t  ppc = gfc_copy_expr (rhs);\n \t\t  gfc_add_vptr_component (ppc);\n \t\t}\n-\t      else if (rhs->ts.type == BT_DERIVED)\n-\t\tppc = gfc_lval_expr_from_sym\n-\t\t\t\t(gfc_find_derived_vtab (rhs->ts.u.derived));\n \t      else\n-\t\tppc = gfc_lval_expr_from_sym\n-\t\t\t\t(gfc_find_intrinsic_vtab (&rhs->ts));\n+\t\tppc = gfc_lval_expr_from_sym (gfc_find_vtab (&rhs->ts));\n \t      gfc_add_component_ref (ppc, \"_copy\");\n \n \t      ppc_code = gfc_get_code (EXEC_CALL);"}]}