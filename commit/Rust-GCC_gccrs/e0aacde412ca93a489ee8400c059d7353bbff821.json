{"sha": "e0aacde412ca93a489ee8400c059d7353bbff821", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBhYWNkZTQxMmNhOTNhNDg5ZWU4NDAwYzA1OWQ3MzUzYmJmZjgyMQ==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-08-18T10:45:23Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-08-18T10:45:23Z"}, "message": "gcc/\n\t* config/i386/i386.c\n\t(ix86_expand_special_args_builtin): Handle avx512vl_storev8sf_mask,\n\tavx512vl_storev8si_mask, avx512vl_storev4df_mask, avx512vl_storev4di_mask,\n\tavx512vl_storev4sf_mask, avx512vl_storev4si_mask, avx512vl_storev2df_mask,\n\tavx512vl_storev2di_mask, avx512vl_loadv8sf_mask, avx512vl_loadv8si_mask,\n\tavx512vl_loadv4df_mask, avx512vl_loadv4di_mask, avx512vl_loadv4sf_mask,\n\tavx512vl_loadv4si_mask, avx512vl_loadv2df_mask,\tavx512vl_loadv2di_mask,\n\tavx512bw_loadv64qi_mask, avx512vl_loadv32qi_mask, avx512vl_loadv16qi_mask,\n\tavx512bw_loadv32hi_mask, avx512vl_loadv16hi_mask, avx512vl_loadv8hi_mask.\n\t* config/i386/i386.md (define_mode_attr ssemodesuffix): Allow V32HI mode.\n\t* config/i386/sse.md\n\t(define_mode_iterator VMOVE): Allow V4TI mode.\n\t(define_mode_iterator V_AVX512VL): New.\n\t(define_mode_iterator V): New handling for AVX512VL.\n\t(define_insn \"avx512f_load<mode>_mask\"): Delete.\n\t(define_insn \"<avx512>_load<mode>_mask\"): New.\n\t(define_insn \"avx512f_store<mode>_mask\"): Delete.\n\t(define_insn \"<avx512>_store<mode>_mask\"): New.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r214087", "tree": {"sha": "96e507a878d0019ce24e0d5cb26b4ce55b5019a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96e507a878d0019ce24e0d5cb26b4ce55b5019a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0aacde412ca93a489ee8400c059d7353bbff821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0aacde412ca93a489ee8400c059d7353bbff821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0aacde412ca93a489ee8400c059d7353bbff821", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0aacde412ca93a489ee8400c059d7353bbff821/comments", "author": null, "committer": null, "parents": [{"sha": "87d1d65af7ebef1ca7240bbd25f3cd6873b1455a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d1d65af7ebef1ca7240bbd25f3cd6873b1455a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87d1d65af7ebef1ca7240bbd25f3cd6873b1455a"}], "stats": {"total": 131, "additions": 109, "deletions": 22}, "files": [{"sha": "814a4285897375d0d7ead289dd02db7ab411bec0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0aacde412ca93a489ee8400c059d7353bbff821/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0aacde412ca93a489ee8400c059d7353bbff821/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0aacde412ca93a489ee8400c059d7353bbff821", "patch": "@@ -1,3 +1,32 @@\n+2014-08-18  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/i386.c\n+\t(ix86_expand_special_args_builtin): Handle avx512vl_storev8sf_mask,\n+\tavx512vl_storev8si_mask, avx512vl_storev4df_mask, avx512vl_storev4di_mask,\n+\tavx512vl_storev4sf_mask, avx512vl_storev4si_mask, avx512vl_storev2df_mask,\n+\tavx512vl_storev2di_mask, avx512vl_loadv8sf_mask, avx512vl_loadv8si_mask,\n+\tavx512vl_loadv4df_mask, avx512vl_loadv4di_mask, avx512vl_loadv4sf_mask,\n+\tavx512vl_loadv4si_mask, avx512vl_loadv2df_mask,\tavx512vl_loadv2di_mask,\n+\tavx512bw_loadv64qi_mask, avx512vl_loadv32qi_mask, avx512vl_loadv16qi_mask,\n+\tavx512bw_loadv32hi_mask, avx512vl_loadv16hi_mask, avx512vl_loadv8hi_mask.\n+\t* config/i386/i386.md (define_mode_attr ssemodesuffix): Allow V32HI mode.\n+\t* config/i386/sse.md\n+\t(define_mode_iterator VMOVE): Allow V4TI mode.\n+\t(define_mode_iterator V_AVX512VL): New.\n+\t(define_mode_iterator V): New handling for AVX512VL.\n+\t(define_insn \"avx512f_load<mode>_mask\"): Delete.\n+\t(define_insn \"<avx512>_load<mode>_mask\"): New.\n+\t(define_insn \"avx512f_store<mode>_mask\"): Delete.\n+\t(define_insn \"<avx512>_store<mode>_mask\"): New.\n+\n+\n 2014-08-18  Yury Gribov  <y.gribov@samsung.com>\n \n \tPR sanitizer/62089"}, {"sha": "de2f4494e5d4de6d377feb76c83fab1259721cb2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0aacde412ca93a489ee8400c059d7353bbff821/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0aacde412ca93a489ee8400c059d7353bbff821/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e0aacde412ca93a489ee8400c059d7353bbff821", "patch": "@@ -34738,6 +34738,14 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \tcase CODE_FOR_avx512f_storev16si_mask:\n \tcase CODE_FOR_avx512f_storev8df_mask:\n \tcase CODE_FOR_avx512f_storev8di_mask:\n+\tcase CODE_FOR_avx512vl_storev8sf_mask:\n+\tcase CODE_FOR_avx512vl_storev8si_mask:\n+\tcase CODE_FOR_avx512vl_storev4df_mask:\n+\tcase CODE_FOR_avx512vl_storev4di_mask:\n+\tcase CODE_FOR_avx512vl_storev4sf_mask:\n+\tcase CODE_FOR_avx512vl_storev4si_mask:\n+\tcase CODE_FOR_avx512vl_storev2df_mask:\n+\tcase CODE_FOR_avx512vl_storev2di_mask:\n \t  aligned_mem = true;\n \t  break;\n \tdefault:\n@@ -34781,6 +34789,20 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \tcase CODE_FOR_avx512f_loadv16si_mask:\n \tcase CODE_FOR_avx512f_loadv8df_mask:\n \tcase CODE_FOR_avx512f_loadv8di_mask:\n+\tcase CODE_FOR_avx512vl_loadv8sf_mask:\n+\tcase CODE_FOR_avx512vl_loadv8si_mask:\n+\tcase CODE_FOR_avx512vl_loadv4df_mask:\n+\tcase CODE_FOR_avx512vl_loadv4di_mask:\n+\tcase CODE_FOR_avx512vl_loadv4sf_mask:\n+\tcase CODE_FOR_avx512vl_loadv4si_mask:\n+\tcase CODE_FOR_avx512vl_loadv2df_mask:\n+\tcase CODE_FOR_avx512vl_loadv2di_mask:\n+\tcase CODE_FOR_avx512bw_loadv64qi_mask:\n+\tcase CODE_FOR_avx512vl_loadv32qi_mask:\n+\tcase CODE_FOR_avx512vl_loadv16qi_mask:\n+\tcase CODE_FOR_avx512bw_loadv32hi_mask:\n+\tcase CODE_FOR_avx512vl_loadv16hi_mask:\n+\tcase CODE_FOR_avx512vl_loadv8hi_mask:\n \t  aligned_mem = true;\n \t  break;\n \tdefault:"}, {"sha": "b8ce6c0b39c6e82f34a6baad66881ae66cab8440", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0aacde412ca93a489ee8400c059d7353bbff821/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0aacde412ca93a489ee8400c059d7353bbff821/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e0aacde412ca93a489ee8400c059d7353bbff821", "patch": "@@ -1054,7 +1054,7 @@\n    (V4SF \"ps\") (V2DF \"pd\")\n    (V16QI \"b\") (V8HI \"w\") (V4SI \"d\") (V2DI \"q\")\n    (V32QI \"b\") (V16HI \"w\") (V8SI \"d\") (V4DI \"q\")\n-   (V64QI \"b\") (V16SI \"d\") (V8DI \"q\")])\n+   (V64QI \"b\") (V32HI \"w\") (V16SI \"d\") (V8DI \"q\")])\n \n ;; SSE vector suffix for floating point modes\n (define_mode_attr ssevecmodesuffix [(SF \"ps\") (DF \"pd\")])"}, {"sha": "ac3ed10cf4727b807e19a59dd8c3cde1dde59dec", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 57, "deletions": 21, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0aacde412ca93a489ee8400c059d7353bbff821/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0aacde412ca93a489ee8400c059d7353bbff821/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e0aacde412ca93a489ee8400c059d7353bbff821", "patch": "@@ -146,10 +146,21 @@\n    (V32HI \"TARGET_AVX512F\") (V16HI \"TARGET_AVX\") V8HI\n    (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n    (V8DI \"TARGET_AVX512F\")  (V4DI \"TARGET_AVX\") V2DI\n-   (V2TI \"TARGET_AVX\") V1TI\n+   (V4TI \"TARGET_AVX512BW\") (V2TI \"TARGET_AVX\") V1TI\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\")  (V4DF \"TARGET_AVX\") V2DF])\n \n+;; All AVX512VL vector modes\n+(define_mode_iterator V_AVX512VL\n+  [(V64QI \"TARGET_AVX512BW\") (V32QI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n+   (V16QI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n+   (V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n+   (V8HI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n+   (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX512VL\")  (V4SI \"TARGET_AVX512VL\")\n+   (V8DI \"TARGET_AVX512F\")  (V4DI \"TARGET_AVX512VL\")  (V2DI \"TARGET_AVX512VL\")\n+   (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX512VL\")  (V4SF \"TARGET_AVX512VL\")\n+   (V8DF \"TARGET_AVX512F\")  (V4DF \"TARGET_AVX512VL\")  (V2DF \"TARGET_AVX512VL\")])\n+\n ;; All vector modes\n (define_mode_iterator V\n   [(V32QI \"TARGET_AVX\") V16QI\n@@ -707,12 +718,10 @@\n     case 2:\n       /* There is no evex-encoded vmov* for sizes smaller than 64-bytes\n \t in avx512f, so we need to use workarounds, to access sse registers\n-\t 16-31, which are evex-only.  */\n-      if (TARGET_AVX512F && <MODE_SIZE> < 64\n-\t  && ((REG_P (operands[0])\n-\t       && EXT_REX_SSE_REGNO_P (REGNO (operands[0])))\n-\t      || (REG_P (operands[1])\n-\t\t  && EXT_REX_SSE_REGNO_P (REGNO (operands[1])))))\n+\t 16-31, which are evex-only. In avx512vl we don't need workarounds.  */\n+      if (TARGET_AVX512F && GET_MODE_SIZE (<MODE>mode) < 64 && !TARGET_AVX512VL\n+\t  && ((REG_P (operands[0]) && EXT_REX_SSE_REGNO_P (REGNO (operands[0])))\n+\t      || (REG_P (operands[1]) && EXT_REX_SSE_REGNO_P (REGNO (operands[1])))))\n \t{\n \t  if (memory_operand (operands[0], <MODE>mode))\n \t    {\n@@ -776,9 +785,11 @@\n \t  if (TARGET_AVX\n \t      && (misaligned_operand (operands[0], <MODE>mode)\n \t\t  || misaligned_operand (operands[1], <MODE>mode)))\n-\t    return \"vmovdqu\\t{%1, %0|%0, %1}\";\n+\t    return TARGET_AVX512VL ? \"vmovdqu64\\t{%1, %0|%0, %1}\"\n+\t\t\t\t   : \"vmovdqu\\t{%1, %0|%0, %1}\";\n \t  else\n-\t    return \"%vmovdqa\\t{%1, %0|%0, %1}\";\n+\t    return TARGET_AVX512VL ? \"vmovdqa64\\t{%1, %0|%0, %1}\"\n+\t\t\t\t   : \"%vmovdqa\\t{%1, %0|%0, %1}\";\n \tcase MODE_XI:\n \t  if (misaligned_operand (operands[0], <MODE>mode)\n \t      || misaligned_operand (operands[1], <MODE>mode))\n@@ -812,25 +823,37 @@\n \t      ]\n \t      (const_string \"<sseinsnmode>\")))])\n \n-(define_insn \"avx512f_load<mode>_mask\"\n-  [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VI48F_512\n-\t  (match_operand:VI48F_512 1 \"nonimmediate_operand\" \"v,m\")\n-\t  (match_operand:VI48F_512 2 \"vector_move_operand\" \"0C,0C\")\n+(define_insn \"<avx512>_load<mode>_mask\"\n+  [(set (match_operand:V_AVX512VL 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:V_AVX512VL\n+\t  (match_operand:V_AVX512VL 1 \"nonimmediate_operand\" \"v,m\")\n+\t  (match_operand:V_AVX512VL 2 \"vector_move_operand\" \"0C,0C\")\n \t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")))]\n   \"TARGET_AVX512F\"\n {\n   switch (MODE_<sseinsnmode>)\n     {\n     case MODE_V8DF:\n+    case MODE_V4DF:\n+    case MODE_V2DF:\n     case MODE_V16SF:\n+    case MODE_V8SF:\n+    case MODE_V4SF:\n       if (misaligned_operand (operands[1], <MODE>mode))\n \treturn \"vmovu<ssemodesuffix>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\";\n       return \"vmova<ssemodesuffix>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\";\n     default:\n-      if (misaligned_operand (operands[1], <MODE>mode))\n+      /* There is no vmovdqa8/16 use vmovdqu8/16 instead.  */\n+      if (<MODE>mode == V64QImode\n+\t  || <MODE>mode == V32QImode\n+\t  || <MODE>mode == V16QImode\n+\t  || <MODE>mode == V32HImode\n+\t  || <MODE>mode == V16HImode\n+\t  || <MODE>mode == V8HImode\n+\t  || misaligned_operand (operands[1], <MODE>mode))\n \treturn \"vmovdqu<ssescalarsize>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\";\n-      return \"vmovdqa<ssescalarsize>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\";\n+      else\n+\treturn \"vmovdqa<ssescalarsize>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\";\n     }\n }\n   [(set_attr \"type\" \"ssemov\")\n@@ -850,21 +873,34 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"avx512f_store<mode>_mask\"\n-  [(set (match_operand:VI48F_512 0 \"memory_operand\" \"=m\")\n-\t(vec_merge:VI48F_512\n-\t  (match_operand:VI48F_512 1 \"register_operand\" \"v\")\n+(define_insn \"<avx512>_store<mode>_mask\"\n+  [(set (match_operand:V_AVX512VL 0 \"memory_operand\" \"=m\")\n+\t(vec_merge:V_AVX512VL\n+\t  (match_operand:V_AVX512VL 1 \"register_operand\" \"v\")\n \t  (match_dup 0)\n \t  (match_operand:<avx512fmaskmode> 2 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n {\n   switch (MODE_<sseinsnmode>)\n     {\n     case MODE_V8DF:\n+    case MODE_V4DF:\n+    case MODE_V2DF:\n     case MODE_V16SF:\n+    case MODE_V8SF:\n+    case MODE_V4SF:\n       return \"vmova<ssemodesuffix>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\";\n     default:\n-      return \"vmovdqa<ssescalarsize>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\";\n+      /* There is no vmovdqa8/16 use vmovdqu8/16 instead.  */\n+      if (<MODE>mode == V64QImode\n+\t  || <MODE>mode == V32QImode\n+\t  || <MODE>mode == V16QImode\n+\t  || <MODE>mode == V32HImode\n+\t  || <MODE>mode == V16HImode\n+\t  || <MODE>mode == V8HImode)\n+\treturn \"vmovdqu<ssescalarsize>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\";\n+      else\n+\treturn \"vmovdqa<ssescalarsize>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\";\n     }\n }\n   [(set_attr \"type\" \"ssemov\")"}]}