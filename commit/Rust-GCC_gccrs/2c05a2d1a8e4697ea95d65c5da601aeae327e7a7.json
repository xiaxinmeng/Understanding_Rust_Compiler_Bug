{"sha": "2c05a2d1a8e4697ea95d65c5da601aeae327e7a7", "node_id": "C_kwDOANBUbNoAKDJjMDVhMmQxYThlNDY5N2VhOTVkNjVjNWRhNjAxYWVhZTMyN2U3YTc", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-05-17T17:41:56Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-05-17T22:03:54Z"}, "message": "c: use CONST_DECL for enumerators in TYPE_VALUES\n\nThe C and C++ FEs differ in TYPE_VALUES for an enum type: an entry in\nthe list in the C++ FE has a CONST_DECL in the TREE_VALUE, but the C FE\nhas only the numerical value of the CONST_DECL there.  This has caused\nme some trouble in my PR105497 patch.  Using a CONST_DECL is preferable\nbecause a CONST_DECL can track more information (e.g., attributes), and\nyou can always get the value simply by looking at its DECL_INITIAL.\n\nThis turned out to be a trivial change.  One place in godump.cc had to be\nadjusted.  I'm not changing the CONST_DECL check in c_do_switch_warnings\nbecause I'll be changing it soon in my next patch.  I didn't see any other\nchecks that this patch makes redundant.\n\ngcc/c/ChangeLog:\n\n\t* c-decl.cc (finish_enum): Store the CONST_DECL into TREE_VALUE, not\n\tits value.\n\ngcc/ChangeLog:\n\n\t* godump.cc (go_output_typedef): Use the DECL_INITIAL of the TREE_VALUE.", "tree": {"sha": "3263d3608a51b0ce0bd2f5bb44f5836ff76a20da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3263d3608a51b0ce0bd2f5bb44f5836ff76a20da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c05a2d1a8e4697ea95d65c5da601aeae327e7a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c05a2d1a8e4697ea95d65c5da601aeae327e7a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c05a2d1a8e4697ea95d65c5da601aeae327e7a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c05a2d1a8e4697ea95d65c5da601aeae327e7a7/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ee68beee709e48fce85b8892ff9985acc6a91a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee68beee709e48fce85b8892ff9985acc6a91a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee68beee709e48fce85b8892ff9985acc6a91a8"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "83655548fc4587e6f20bc6c17a58eb8315580efc", "filename": "gcc/c/c-decl.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c05a2d1a8e4697ea95d65c5da601aeae327e7a7/gcc%2Fc%2Fc-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c05a2d1a8e4697ea95d65c5da601aeae327e7a7/gcc%2Fc%2Fc-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.cc?ref=2c05a2d1a8e4697ea95d65c5da601aeae327e7a7", "patch": "@@ -9253,7 +9253,9 @@ finish_enum (tree enumtype, tree values, tree attributes)\n \n \t  DECL_INITIAL (enu) = ini;\n \t  TREE_PURPOSE (pair) = DECL_NAME (enu);\n-\t  TREE_VALUE (pair) = ini;\n+\t  /* To match the C++ FE, store the CONST_DECL rather than just its\n+\t     value.  */\n+\t  TREE_VALUE (pair) = enu;\n \t}\n \n       TYPE_VALUES (enumtype) = values;"}, {"sha": "c0f52bbd0f20bcb233cdf5e35421e1d26f48e419", "filename": "gcc/godump.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c05a2d1a8e4697ea95d65c5da601aeae327e7a7/gcc%2Fgodump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c05a2d1a8e4697ea95d65c5da601aeae327e7a7/gcc%2Fgodump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.cc?ref=2c05a2d1a8e4697ea95d65c5da601aeae327e7a7", "patch": "@@ -1114,6 +1114,7 @@ go_output_typedef (class godump_container *container, tree decl)\n \t  struct macro_hash_value *mhval;\n \t  void **slot;\n \t  char buf[WIDE_INT_PRINT_BUFFER_SIZE];\n+\t  tree value = DECL_INITIAL (TREE_VALUE (element));\n \n \t  name = IDENTIFIER_POINTER (TREE_PURPOSE (element));\n \n@@ -1127,12 +1128,12 @@ go_output_typedef (class godump_container *container, tree decl)\n \t  if (*slot != NULL)\n \t    macro_hash_del (*slot);\n \n-\t  if (tree_fits_shwi_p (TREE_VALUE (element)))\n+\t  if (tree_fits_shwi_p (value))\n \t    snprintf (buf, sizeof buf, HOST_WIDE_INT_PRINT_DEC,\n-\t\t     tree_to_shwi (TREE_VALUE (element)));\n-\t  else if (tree_fits_uhwi_p (TREE_VALUE (element)))\n+\t\t     tree_to_shwi (value));\n+\t  else if (tree_fits_uhwi_p (value))\n \t    snprintf (buf, sizeof buf, HOST_WIDE_INT_PRINT_UNSIGNED,\n-\t\t      tree_to_uhwi (TREE_VALUE (element)));\n+\t\t      tree_to_uhwi (value));\n \t  else\n \t    print_hex (wi::to_wide (element), buf);\n "}]}