{"sha": "d9ca49d580e2cba9bce7c1b5aba24bdfc55d874d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDljYTQ5ZDU4MGUyY2JhOWJjZTdjMWI1YWJhMjRiZGZjNTVkODc0ZA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-05-27T21:52:26Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-05-27T21:52:26Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1103", "tree": {"sha": "37d512ab34029e30cc023fe6d0cf248c977e18ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37d512ab34029e30cc023fe6d0cf248c977e18ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9ca49d580e2cba9bce7c1b5aba24bdfc55d874d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ca49d580e2cba9bce7c1b5aba24bdfc55d874d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9ca49d580e2cba9bce7c1b5aba24bdfc55d874d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ca49d580e2cba9bce7c1b5aba24bdfc55d874d/comments", "author": null, "committer": null, "parents": [{"sha": "7d349561dce7b638d2088c3b243069e576058dff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d349561dce7b638d2088c3b243069e576058dff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d349561dce7b638d2088c3b243069e576058dff"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "0a633665c41343530dc300cac3091182aa571e06", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ca49d580e2cba9bce7c1b5aba24bdfc55d874d/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ca49d580e2cba9bce7c1b5aba24bdfc55d874d/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=d9ca49d580e2cba9bce7c1b5aba24bdfc55d874d", "patch": "@@ -809,7 +809,7 @@ i960_function_name_declare (file, name, fndecl)\n   /* Even if nobody uses extra parms, can't have leafroc or tail calls if\n      argblock, because argblock uses g14 implicitly.  */\n \n-  if (current_function_args_size > 48)\n+  if (current_function_args_size != 0)\n     {\n       tail_call_ok = 0;\n       leaf_proc_ok = 0;\n@@ -1165,7 +1165,7 @@ i960_function_epilogue (file, size)\n \n   /* Must clear g14 on return.  */\n \n-  if (current_function_args_size > 48)\n+  if (current_function_args_size != 0)\n     fprintf (file, \"\\tmov\t0,g14\\n\");\n \n   fprintf (file, \"\\tret\\n\");\n@@ -1221,7 +1221,7 @@ i960_output_ret_insn (insn)\n       return lbuf;\n     }\n \n-  if (current_function_args_size > 48)\n+  if (current_function_args_size != 0)\n     output_asm_insn (\"mov\t0,g14\", 0);\n \n   if (i960_leaf_ret_reg >= 0)\n@@ -2135,7 +2135,7 @@ i960_reg_parm_stack_space (fndecl)\n \n   /* Otherwise, we have an arg block if the current function has more than\n      48 bytes of parameters.  */\n-  if (current_function_args_size > 48)\n+  if (current_function_args_size != 0)\n     return 48;\n   else\n     return 0;\n@@ -2195,7 +2195,7 @@ i960_expand_call (first_operand, second_operand, target)\n \t function call.  If the current function has no argument block,\n \t then g14 is zero before and after the call.  */\n \n-      if (current_function_args_size > 48)\n+      if (current_function_args_size != 0)\n \t{\n \t  start_sequence ();\n \t  seq_stack = sequence_stack;\n@@ -2209,7 +2209,7 @@ i960_expand_call (first_operand, second_operand, target)\n \t}\n     }\n \n-  if (current_function_args_size > 48)\n+  if (current_function_args_size != 0)\n     frob_g14 = 1;\n \n   if (GET_CODE (second_operand) != CONST_INT || INTVAL (second_operand) > 48)"}, {"sha": "3e69891f288e7211ed40187c2838c7077a1048ae", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ca49d580e2cba9bce7c1b5aba24bdfc55d874d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ca49d580e2cba9bce7c1b5aba24bdfc55d874d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=d9ca49d580e2cba9bce7c1b5aba24bdfc55d874d", "patch": "@@ -38,6 +38,12 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #define CC1_SPEC \"%{sun4:} %{target:}\"\n \n+#if 0\n+/* Sparc ABI says that long double is 4 words.\n+   ??? This doesn't work yet.  */\n+#define LONG_DOUBLE_TYPE_SIZE 128\n+#endif\n+\n #define PTRDIFF_TYPE \"int\"\n #define SIZE_TYPE \"int\"\n #define WCHAR_TYPE \"short unsigned int\"\n@@ -239,11 +245,10 @@ extern int target_flags;\n    and are not available for the register allocator.\n    0 is used for the condition code and not to represent %g0, which is\n    hardwired to 0, so reg 0 is *not* fixed.\n-   2 and 3 are free to use as temporaries.\n-   4 through 7 are expected to become usefully defined in the future.\n-   Your milage may vary.  */\n+   g1 through g4 are free to use as temporaries.\n+   g5 through g7 are reserved for the operating system.  */\n #define FIXED_REGISTERS  \\\n- {0, 0, 0, 0, 1, 1, 1, 1,\t\\\n+ {0, 0, 0, 0, 0, 1, 1, 1,\t\\\n   0, 0, 0, 0, 0, 0, 1, 0,\t\\\n   0, 0, 0, 0, 0, 0, 0, 0,\t\\\n   0, 0, 0, 0, 0, 0, 1, 1,\t\\\n@@ -361,6 +366,12 @@ extern int leaf_function;\n #define INITIALIZE_PIC initialize_pic ()\n #define FINALIZE_PIC finalize_pic ()\n \n+/* Sparc ABI says that quad-precision floats and all structures are returned\n+   in memory.  */\n+#define RETURN_IN_MEMORY(TYPE)\t\\\n+  (TREE_CODE (TYPE) == RECORD_TYPE || TREE_CODE (TYPE) == UNION_TYPE\t\\\n+   || TYPE_MODE (TYPE) == TFmode)\n+\n /* Functions which return large structures get the address\n    to place the wanted value at offset 64 from the frame.\n    Must reserve 64 bytes for the in and local registers.  */\n@@ -726,10 +737,12 @@ extern char leaf_reg_backmap[];\n    ? (NPARM_REGS - ROUND_REG ((CUM), (MODE)))\t\t\t\t\\\n    : 0)\n \n-/* The SPARC ABI stipulates passing struct arguments (of any size)\n-   by invisible reference.  */\n+/* The SPARC ABI stipulates passing struct arguments (of any size) and\n+   quad-precision floats by invisible reference.  */\n #define FUNCTION_ARG_PASS_BY_REFERENCE(CUM, MODE, TYPE, NAMED)\t\t\\\n-  (TYPE && (TREE_CODE (TYPE) == RECORD_TYPE || TREE_CODE (TYPE) == UNION_TYPE))\n+  ((TYPE && (TREE_CODE (TYPE) == RECORD_TYPE\t\t\t\t\\\n+\t    || TREE_CODE (TYPE) == UNION_TYPE))\t\t\t\t\\\n+   || (MODE == TFmode))\n \n /* If defined, a C expression that gives the alignment boundary, in\n    bits, of an argument with the specified mode and type.  If it is"}, {"sha": "11070e0acc702e5a5293f62c06c8ac40914dc66d", "filename": "gcc/function.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ca49d580e2cba9bce7c1b5aba24bdfc55d874d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ca49d580e2cba9bce7c1b5aba24bdfc55d874d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=d9ca49d580e2cba9bce7c1b5aba24bdfc55d874d", "patch": "@@ -2686,9 +2686,16 @@ assign_parms (fndecl, second_time)\n \t to indicate there is no preallocated stack slot for the parm.  */\n \n       if (entry_parm == stack_parm\n-#ifdef REG_PARM_STACK_SPACE\n+#if defined (REG_PARM_STACK_SPACE) && ! defined (MAYBE_REG_PARM_STACK_SPACE)\n \t  /* On some machines, even if a parm value arrives in a register\n-\t     there is still an (uninitialized) stack slot allocated for it.  */\n+\t     there is still an (uninitialized) stack slot allocated for it.\n+\n+\t     ??? When MAYBE_REG_PARM_STACK_SPACE is defined, we can't tell\n+\t     whether this parameter already has a stack slot allocated,\n+\t     because an arg block exists only if current_function_args_size\n+\t     is larger than some threshhold, and we haven't calculated that\n+\t     yet.  So, for now, we just assume that stack slots never exist\n+\t     in this case.  */\n \t  || REG_PARM_STACK_SPACE (fndecl) > 0\n #endif\n \t  )"}]}