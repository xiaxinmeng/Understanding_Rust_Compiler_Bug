{"sha": "786e51648bd9a6880339329380751809fb97cd6d", "node_id": "C_kwDOANBUbNoAKDc4NmU1MTY0OGJkOWE2ODgwMzM5MzI5MzgwNzUxODA5ZmI5N2NkNmQ", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2022-07-22T11:18:14Z"}, "committer": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2022-07-22T11:18:14Z"}, "message": "libsanitizer: Fix Solaris 11.3 compilation [PR105531]\n\nThe libsanitizer build has been broken on Solaris 11.3 by the latest\nimport.  An upstream patch to fix this has now been committed:\n\n\t[sanitizer_common] Support Solaris < 11.4 in GetStaticTlsBoundary\n        https://reviews.llvm.org/D120059\n\nI'd like to cherry-pick it into libsanitizer, too.\n\nBootstrapped without regressions on sparc-sun-solaris2.11,\ni386-pc-solaris2.11 (both Solaris 11.3 and 11.4), and\nx86_64-pc-linux-gnu.\n\n2022-07-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n\n\tlibsanitizer:\n\tPR sanitizer/105531\n\t* sanitizer_common/sanitizer_linux_libcdep.cpp,\n\tsanitizer_common/sanitizer_solaris.h:: Cherry-pick\n\tllvm-project revision 3776db9a4fd2080d23d6a5f52e405eea44558761.", "tree": {"sha": "43146d3b02f4f8558d303d7f03d065448dca42c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43146d3b02f4f8558d303d7f03d065448dca42c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/786e51648bd9a6880339329380751809fb97cd6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786e51648bd9a6880339329380751809fb97cd6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/786e51648bd9a6880339329380751809fb97cd6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786e51648bd9a6880339329380751809fb97cd6d/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03c0b06420b7d9331c61d1958834ca0d269ee6f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03c0b06420b7d9331c61d1958834ca0d269ee6f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03c0b06420b7d9331c61d1958834ca0d269ee6f1"}], "stats": {"total": 100, "additions": 91, "deletions": 9}, "files": [{"sha": "6dd27402ac98d79964fc61b436433a91987ab3ee", "filename": "libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cpp", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786e51648bd9a6880339329380751809fb97cd6d/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786e51648bd9a6880339329380751809fb97cd6d/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cpp?ref=786e51648bd9a6880339329380751809fb97cd6d", "patch": "@@ -27,6 +27,7 @@\n #include \"sanitizer_linux.h\"\n #include \"sanitizer_placement_new.h\"\n #include \"sanitizer_procmaps.h\"\n+#include \"sanitizer_solaris.h\"\n \n #if SANITIZER_NETBSD\n #define _RTLD_SOURCE  // for __lwp_gettcb_fast() / __lwp_getprivate_fast()\n@@ -62,6 +63,7 @@\n #endif\n \n #if SANITIZER_SOLARIS\n+#include <stddef.h>\n #include <stdlib.h>\n #include <thread.h>\n #endif\n@@ -350,27 +352,51 @@ static uptr TlsGetOffset(uptr ti_module, uptr ti_offset) {\n extern \"C\" void *__tls_get_addr(size_t *);\n #endif\n \n+static size_t main_tls_modid;\n+\n static int CollectStaticTlsBlocks(struct dl_phdr_info *info, size_t size,\n                                   void *data) {\n-  if (!info->dlpi_tls_modid)\n+  size_t tls_modid;\n+#if SANITIZER_SOLARIS\n+  // dlpi_tls_modid is only available since Solaris 11.4 SRU 10.  Use\n+  // dlinfo(RTLD_DI_LINKMAP) instead which works on all of Solaris 11.3,\n+  // 11.4, and Illumos.  The tlsmodid of the executable was changed to 1 in\n+  // 11.4 to match other implementations.\n+  if (size >= offsetof(dl_phdr_info_test, dlpi_tls_modid))\n+    main_tls_modid = 1;\n+  else\n+    main_tls_modid = 0;\n+  g_use_dlpi_tls_data = 0;\n+  Rt_map *map;\n+  dlinfo(RTLD_SELF, RTLD_DI_LINKMAP, &map);\n+  tls_modid = map->rt_tlsmodid;\n+#else\n+  main_tls_modid = 1;\n+  tls_modid = info->dlpi_tls_modid;\n+#endif\n+\n+  if (tls_modid < main_tls_modid)\n     return 0;\n-  uptr begin = (uptr)info->dlpi_tls_data;\n+  uptr begin;\n+#if !SANITIZER_SOLARIS\n+  begin = (uptr)info->dlpi_tls_data;\n+#endif\n   if (!g_use_dlpi_tls_data) {\n     // Call __tls_get_addr as a fallback. This forces TLS allocation on glibc\n     // and FreeBSD.\n #ifdef __s390__\n     begin = (uptr)__builtin_thread_pointer() +\n-            TlsGetOffset(info->dlpi_tls_modid, 0);\n+            TlsGetOffset(tls_modid, 0);\n #else\n-    size_t mod_and_off[2] = {info->dlpi_tls_modid, 0};\n+    size_t mod_and_off[2] = {tls_modid, 0};\n     begin = (uptr)__tls_get_addr(mod_and_off);\n #endif\n   }\n   for (unsigned i = 0; i != info->dlpi_phnum; ++i)\n     if (info->dlpi_phdr[i].p_type == PT_TLS) {\n       static_cast<InternalMmapVector<TlsBlock> *>(data)->push_back(\n           TlsBlock{begin, begin + info->dlpi_phdr[i].p_memsz,\n-                   info->dlpi_phdr[i].p_align, info->dlpi_tls_modid});\n+                   info->dlpi_phdr[i].p_align, tls_modid});\n       break;\n     }\n   return 0;\n@@ -382,11 +408,11 @@ __attribute__((unused)) static void GetStaticTlsBoundary(uptr *addr, uptr *size,\n   dl_iterate_phdr(CollectStaticTlsBlocks, &ranges);\n   uptr len = ranges.size();\n   Sort(ranges.begin(), len);\n-  // Find the range with tls_modid=1. For glibc, because libc.so uses PT_TLS,\n-  // this module is guaranteed to exist and is one of the initially loaded\n-  // modules.\n+  // Find the range with tls_modid == main_tls_modid. For glibc, because\n+  // libc.so uses PT_TLS, this module is guaranteed to exist and is one of\n+  // the initially loaded modules.\n   uptr one = 0;\n-  while (one != len && ranges[one].tls_modid != 1) ++one;\n+  while (one != len && ranges[one].tls_modid != main_tls_modid) ++one;\n   if (one == len) {\n     // This may happen with musl if no module uses PT_TLS.\n     *addr = 0;"}, {"sha": "2a21693efbf13b0f92159ac1dc8349419d03f5b3", "filename": "libsanitizer/sanitizer_common/sanitizer_solaris.h", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786e51648bd9a6880339329380751809fb97cd6d/libsanitizer%2Fsanitizer_common%2Fsanitizer_solaris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786e51648bd9a6880339329380751809fb97cd6d/libsanitizer%2Fsanitizer_common%2Fsanitizer_solaris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_solaris.h?ref=786e51648bd9a6880339329380751809fb97cd6d", "patch": "@@ -0,0 +1,56 @@\n+//===-- sanitizer_solaris.h -------------------------------------*- C++ -*-===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+//\n+// This file is a part of Sanitizer runtime. It contains Solaris-specific\n+// definitions.\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#ifndef SANITIZER_SOLARIS_H\n+#define SANITIZER_SOLARIS_H\n+\n+#include \"sanitizer_internal_defs.h\"\n+\n+#if SANITIZER_SOLARIS\n+\n+#include <link.h>\n+\n+namespace __sanitizer {\n+\n+// Beginning of declaration from OpenSolaris/Illumos\n+// $SRC/cmd/sgs/include/rtld.h.\n+struct Rt_map {\n+  Link_map rt_public;\n+  const char *rt_pathname;\n+  ulong_t rt_padstart;\n+  ulong_t rt_padimlen;\n+  ulong_t rt_msize;\n+  uint_t rt_flags;\n+  uint_t rt_flags1;\n+  ulong_t rt_tlsmodid;\n+};\n+\n+// Structure matching the Solaris 11.4 struct dl_phdr_info used to determine\n+// presence of dlpi_tls_modid field at runtime.  Cf. Solaris 11.4\n+// dl_iterate_phdr(3C), Example 2.\n+struct dl_phdr_info_test {\n+  ElfW(Addr) dlpi_addr;\n+  const char *dlpi_name;\n+  const ElfW(Phdr) * dlpi_phdr;\n+  ElfW(Half) dlpi_phnum;\n+  u_longlong_t dlpi_adds;\n+  u_longlong_t dlpi_subs;\n+  size_t dlpi_tls_modid;\n+  void *dlpi_tls_data;\n+};\n+\n+}  // namespace __sanitizer\n+\n+#endif  // SANITIZER_SOLARIS\n+\n+#endif  // SANITIZER_SOLARIS_H"}]}