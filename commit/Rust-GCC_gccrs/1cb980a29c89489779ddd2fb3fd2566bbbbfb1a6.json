{"sha": "1cb980a29c89489779ddd2fb3fd2566bbbbfb1a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNiOTgwYTI5Yzg5NDg5Nzc5ZGRkMmZiM2ZkMjU2NmJiYmJmYjFhNg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2010-05-28T08:57:16Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2010-05-28T08:57:16Z"}, "message": "re PR target/44266 (stack frame lacks parameter save area)\n\n\tPR target/44266\n\t* config/rs6000/rs6000.c (rs6000_legitimize_tls_address): Use\n\temit_library_call machinery to set up __tls_get_addr calls.\n\nFrom-SVN: r159963", "tree": {"sha": "f1fa777bac3ab4f742f22a94c3670192f7af8847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1fa777bac3ab4f742f22a94c3670192f7af8847"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cb980a29c89489779ddd2fb3fd2566bbbbfb1a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb980a29c89489779ddd2fb3fd2566bbbbfb1a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb980a29c89489779ddd2fb3fd2566bbbbfb1a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb980a29c89489779ddd2fb3fd2566bbbbfb1a6/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b247e88a784d604835b026339919d7d8cb59ca56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b247e88a784d604835b026339919d7d8cb59ca56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b247e88a784d604835b026339919d7d8cb59ca56"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "268e0ca26fad28bfa7871d5e3e122663f834c051", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb980a29c89489779ddd2fb3fd2566bbbbfb1a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb980a29c89489779ddd2fb3fd2566bbbbfb1a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cb980a29c89489779ddd2fb3fd2566bbbbfb1a6", "patch": "@@ -1,3 +1,9 @@\n+2010-05-28  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/44266\n+\t* config/rs6000/rs6000.c (rs6000_legitimize_tls_address): Use\n+\temit_library_call machinery to set up __tls_get_addr calls.\n+\n 2010-05-28  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.md (movqi): Fix typo ('*' -> '#')."}, {"sha": "58b6c44cb5a24679429d7dda6332f9ad9566e9ed", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb980a29c89489779ddd2fb3fd2566bbbbfb1a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb980a29c89489779ddd2fb3fd2566bbbbfb1a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=1cb980a29c89489779ddd2fb3fd2566bbbbfb1a6", "patch": "@@ -5397,7 +5397,7 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n     }\n   else\n     {\n-      rtx r3, got, tga, tmp1, tmp2, eqv;\n+      rtx r3, got, tga, tmp1, tmp2, call_insn;\n \n       /* We currently use relocations like @got@tlsgd for tls, which\n \t means the linker will handle allocation of tls entries, placing\n@@ -5441,6 +5441,7 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t{\n \t  r3 = gen_rtx_REG (Pmode, 3);\n \t  tga = rs6000_tls_get_addr ();\n+\t  emit_library_call_value (tga, dest, LCT_CONST, Pmode, 1, r3, Pmode);\n \n \t  if (DEFAULT_ABI == ABI_AIX && TARGET_64BIT)\n \t    insn = gen_tls_gd_aix64 (r3, got, addr, tga, const0_rtx);\n@@ -5450,21 +5451,18 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t    insn = gen_tls_gd_sysvsi (r3, got, addr, tga, const0_rtx);\n \t  else\n \t    gcc_unreachable ();\n-\n-\t  start_sequence ();\n-\t  insn = emit_call_insn (insn);\n-\t  RTL_CONST_CALL_P (insn) = 1;\n-\t  use_reg (&CALL_INSN_FUNCTION_USAGE (insn), r3);\n+\t  call_insn = last_call_insn ();\n+\t  PATTERN (call_insn) = insn;\n \t  if (DEFAULT_ABI == ABI_V4 && TARGET_SECURE_PLT && flag_pic)\n-\t    use_reg (&CALL_INSN_FUNCTION_USAGE (insn), pic_offset_table_rtx);\n-\t  insn = get_insns ();\n-\t  end_sequence ();\n-\t  emit_libcall_block (insn, dest, r3, addr);\n+\t    use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn),\n+\t\t     pic_offset_table_rtx);\n \t}\n       else if (model == TLS_MODEL_LOCAL_DYNAMIC)\n \t{\n \t  r3 = gen_rtx_REG (Pmode, 3);\n \t  tga = rs6000_tls_get_addr ();\n+\t  tmp1 = gen_reg_rtx (Pmode);\n+\t  emit_library_call_value (tga, tmp1, LCT_CONST, Pmode, 1, r3, Pmode);\n \n \t  if (DEFAULT_ABI == ABI_AIX && TARGET_64BIT)\n \t    insn = gen_tls_ld_aix64 (r3, got, tga, const0_rtx);\n@@ -5474,19 +5472,12 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t    insn = gen_tls_ld_sysvsi (r3, got, tga, const0_rtx);\n \t  else\n \t    gcc_unreachable ();\n-\n-\t  start_sequence ();\n-\t  insn = emit_call_insn (insn);\n-\t  RTL_CONST_CALL_P (insn) = 1;\n-\t  use_reg (&CALL_INSN_FUNCTION_USAGE (insn), r3);\n+\t  call_insn = last_call_insn ();\n+\t  PATTERN (call_insn) = insn;\n \t  if (DEFAULT_ABI == ABI_V4 && TARGET_SECURE_PLT && flag_pic)\n-\t    use_reg (&CALL_INSN_FUNCTION_USAGE (insn), pic_offset_table_rtx);\n-\t  insn = get_insns ();\n-\t  end_sequence ();\n-\t  tmp1 = gen_reg_rtx (Pmode);\n-\t  eqv = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, const0_rtx),\n-\t\t\t\tUNSPEC_TLSLD);\n-\t  emit_libcall_block (insn, tmp1, r3, eqv);\n+\t    use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn),\n+\t\t     pic_offset_table_rtx);\n+\n \t  if (rs6000_tls_size == 16)\n \t    {\n \t      if (TARGET_64BIT)"}]}