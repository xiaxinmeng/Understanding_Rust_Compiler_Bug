{"sha": "9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU5NGE3ZmM1YWI3NzA5MjhiOWU2YTJiNzRlMjkyZDM1YjRjOTRkYQ==", "commit": {"author": {"name": "Matthew Gretton-Dann", "email": "matthew.gretton-dann@arm.com", "date": "2012-06-25T16:30:53Z"}, "committer": {"name": "Matthew Gretton-Dann", "email": "mgretton@gcc.gnu.org", "date": "2012-06-25T16:30:53Z"}, "message": "arm.h (TARGET_CPU_CPP_BUILTINS): Add new built-ins.\n\n2012-05-25  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n            James Greenhalgh  <james.greenhalgh@arm.com>\n\t* gcc/config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): Add new built-ins.\n\t(TARGET_FMA): New macro.\n\t(TARGET_ARM_QBIT, TARGET_ARM_SAT): Likewise.\n\t(TARGET_ARM_ARCH): Likewise.\n\t(TARGET_ARM_ARCH_ISA_THUMB): Likewise.\n\t(TARGET_V6M, TARGET_V7M): Likewise.\n\t(TARGET_ARM_ARCH_PROFILE): Likewise.\n\t(TARGET_ARM_FEATURE_LDREX): Likewise.\n\t(TARGET_ARM_FP, TARGET_NEON_FP): Likewise.\n\t(ARM_MIN_ENUM_SIZE): Likewise.\n\t* gcc/config/arm/arm.c (arm_file_start): Refactor appropriately.\n\t(base_architecture): New enumeration.\n\t(arm_base_arch): New global variable.\n\t(processors): Add field base_arch.\n\t(ARM_ARCH, ARM_CORE): Adjust accordingly.\n\t(arm_option_override): Add initialization of arm_base_arch.\n\t* gcc/doc/cpp.texi (system-specific predefined macros.): Change.\n\t* gcc/testsuite/gcc.target/arm/ftest-support-arm.h New testcase.\n\t* gcc/testsuite/gcc.target/arm/ftest-support-thumb.h Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-support.h Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv4-arm.c: Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv4t-arm.c: Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv4t-thumb.c: Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv5t-arm.c Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv5t-thumb.c Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv5te-arm.c: Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv5te-thumb.c: Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv6-arm.c Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv6-thumb.c Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv6k-arm.c Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv6k-thumb.c Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv6m-thumb.c: Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv6t2-arm.c: Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv6t2-thumb.c: Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv6z-arm.c: Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv6z-thumb.c: Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv7a-arm.c Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv7a-thumb.c Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv7m-thumb.c: Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv7em-thumb.c: Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv7r-arm.c Likewise.\n\t* gcc/testsuite/gcc.target/arm/ftest-armv7r-thumb.c Likewise.\n\t* gcc/testsuite/lib/target-supports.exp\n\t(check_effective_target_arm_arch_FUNC): Add support for more\n\tarchitectures.\n\t(add_options_for_arm_arch_FUNC): Likewise.\n\t(check_effective_target_arm_arch_FUNC_multilib): New functions.\n\nCo-Authored-By: James Greenhalgh <james.greenhalgh@arm.com>\n\nFrom-SVN: r188946", "tree": {"sha": "0026d4a6c28abfd39e7c570714efb1913bb50200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0026d4a6c28abfd39e7c570714efb1913bb50200"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/comments", "author": {"login": "matt-gretton-dann", "id": 53790742, "node_id": "MDQ6VXNlcjUzNzkwNzQy", "avatar_url": "https://avatars.githubusercontent.com/u/53790742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matt-gretton-dann", "html_url": "https://github.com/matt-gretton-dann", "followers_url": "https://api.github.com/users/matt-gretton-dann/followers", "following_url": "https://api.github.com/users/matt-gretton-dann/following{/other_user}", "gists_url": "https://api.github.com/users/matt-gretton-dann/gists{/gist_id}", "starred_url": "https://api.github.com/users/matt-gretton-dann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matt-gretton-dann/subscriptions", "organizations_url": "https://api.github.com/users/matt-gretton-dann/orgs", "repos_url": "https://api.github.com/users/matt-gretton-dann/repos", "events_url": "https://api.github.com/users/matt-gretton-dann/events{/privacy}", "received_events_url": "https://api.github.com/users/matt-gretton-dann/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25bab91e017eb1d6d93117f3da96fa9b43703190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25bab91e017eb1d6d93117f3da96fa9b43703190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25bab91e017eb1d6d93117f3da96fa9b43703190"}], "stats": {"total": 688, "additions": 679, "deletions": 9}, "files": [{"sha": "59109d5c424396160fc966462650beb63eda2084", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -1,3 +1,24 @@\n+2012-06-25  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n+            James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): Add new built-ins.\n+\t(TARGET_FMA): New macro.\n+\t(TARGET_ARM_QBIT, TARGET_ARM_SAT): Likewise.\n+\t(TARGET_ARM_ARCH): Likewise.\n+\t(TARGET_ARM_ARCH_ISA_THUMB): Likewise.\n+\t(TARGET_V6M, TARGET_V7M): Likewise.\n+\t(TARGET_ARM_ARCH_PROFILE): Likewise.\n+\t(TARGET_ARM_FEATURE_LDREX): Likewise.\n+\t(TARGET_ARM_FP, TARGET_NEON_FP): Likewise.\n+\t(ARM_MIN_ENUM_SIZE): Likewise.\n+\t* config/arm/arm.c (arm_file_start): Refactor appropriately.\n+\t(base_architecture): New enumeration.\n+\t(arm_base_arch): New global variable.\n+\t(processors): Add field base_arch.\n+\t(ARM_ARCH, ARM_CORE): Adjust accordingly.\n+\t(arm_option_override): Add initialization of arm_base_arch.\n+\t* doc/cpp.texi (system-specific predefined macros.): Change.\n+\n 2012-06-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/53759"}, {"sha": "a385e304a36d1539c307bfc1344b3145fb19a93c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -717,6 +717,10 @@ static unsigned long insn_flags = 0;\n    be used.  */\n static unsigned long tune_flags = 0;\n \n+/* The highest ARM architecture version supported by the\n+   target.  */\n+enum base_architecture arm_base_arch = BASE_ARCH_0;\n+\n /* The following are used in the arm.md file as equivalents to bits\n    in the above two flag variables.  */\n \n@@ -854,6 +858,7 @@ struct processors\n   const char *const name;\n   enum processor_type core;\n   const char *arch;\n+  enum base_architecture base_arch;\n   const unsigned long flags;\n   const struct tune_params *const tune;\n };\n@@ -989,10 +994,11 @@ static const struct processors all_cores[] =\n {\n   /* ARM Cores */\n #define ARM_CORE(NAME, IDENT, ARCH, FLAGS, COSTS) \\\n-  {NAME, IDENT, #ARCH, FLAGS | FL_FOR_ARCH##ARCH, &arm_##COSTS##_tune},\n+  {NAME, IDENT, #ARCH, BASE_ARCH_##ARCH,\t  \\\n+    FLAGS | FL_FOR_ARCH##ARCH, &arm_##COSTS##_tune},\n #include \"arm-cores.def\"\n #undef ARM_CORE\n-  {NULL, arm_none, NULL, 0, NULL}\n+  {NULL, arm_none, NULL, BASE_ARCH_0, 0, NULL}\n };\n \n static const struct processors all_architectures[] =\n@@ -1002,10 +1008,10 @@ static const struct processors all_architectures[] =\n      from the core.  */\n \n #define ARM_ARCH(NAME, CORE, ARCH, FLAGS) \\\n-  {NAME, CORE, #ARCH, FLAGS, NULL},\n+  {NAME, CORE, #ARCH, BASE_ARCH_##ARCH, FLAGS, NULL},\n #include \"arm-arches.def\"\n #undef ARM_ARCH\n-  {NULL, arm_none, NULL, 0 , NULL}\n+  {NULL, arm_none, NULL, BASE_ARCH_0, 0, NULL}\n };\n \n \n@@ -1621,6 +1627,7 @@ arm_option_override (void)\n \n   sprintf (arm_arch_name, \"__ARM_ARCH_%s__\", arm_selected_cpu->arch);\n   insn_flags = arm_selected_cpu->flags;\n+  arm_base_arch = arm_selected_cpu->base_arch;\n \n   arm_tune = arm_selected_tune->core;\n   tune_flags = arm_selected_tune->flags;"}, {"sha": "b83f341f6a93271e1bd1c7835f4109925df59260", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 140, "deletions": 2, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -47,20 +47,52 @@ extern char arm_arch_name[];\n     {\t\t\t\t\t\t\t\\\n \tif (TARGET_DSP_MULTIPLY)\t\t\t\\\n \t   builtin_define (\"__ARM_FEATURE_DSP\");\t\\\n+        if (TARGET_ARM_QBIT)\t\t\t\t\\\n+           builtin_define (\"__ARM_FEATURE_QBIT\");\t\\\n+        if (TARGET_ARM_SAT)\t\t\t\t\\\n+           builtin_define (\"__ARM_FEATURE_SAT\");\t\\\n \tif (unaligned_access)\t\t\t\t\\\n \t  builtin_define (\"__ARM_FEATURE_UNALIGNED\");\t\\\n+\tif (TARGET_ARM_FEATURE_LDREX)\t\t\t\t\\\n+\t  builtin_define_with_int_value (\t\t\t\\\n+\t    \"__ARM_FEATURE_LDREX\", TARGET_ARM_FEATURE_LDREX);\t\\\n+\tif ((TARGET_ARM_ARCH >= 5 && !TARGET_THUMB)\t\t\\\n+\t     || TARGET_ARM_ARCH_ISA_THUMB >=2)\t\t\t\\\n+\t  builtin_define (\"__ARM_FEATURE_CLZ\");\t\t\t\\\n+\tif (TARGET_INT_SIMD)\t\t\t\t\t\\\n+\t  builtin_define (\"__ARM_FEATURE_SIMD32\");\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+\tbuiltin_define_with_int_value (\t\t\t\t\\\n+\t  \"__ARM_SIZEOF_MINIMAL_ENUM\",\t\t\t\t\\\n+\t  flag_short_enums ? 1 : 4);\t\t\t\t\\\n+\tbuiltin_define_with_int_value (\t\t\t\t\\\n+\t  \"__ARM_SIZEOF_WCHAR_T\", WCHAR_TYPE_SIZE);\t\t\\\n+\tif (TARGET_ARM_ARCH_PROFILE)\t\t\t\t\\\n+\t  builtin_define_with_int_value (\t\t\t\\\n+\t    \"__ARM_ARCH_PROFILE\", TARGET_ARM_ARCH_PROFILE);\t\\\n+\t\t\t\t\t\t\t\t\\\n \t/* Define __arm__ even when in thumb mode, for\t\\\n \t   consistency with armcc.  */\t\t\t\\\n \tbuiltin_define (\"__arm__\");\t\t\t\\\n+\tif (TARGET_ARM_ARCH)\t\t\t\t\\\n+\t  builtin_define_with_int_value (\t\t\\\n+\t    \"__ARM_ARCH\", TARGET_ARM_ARCH);\t\t\\\n+\tif (arm_arch_notm)\t\t\t\t\\\n+\t  builtin_define (\"__ARM_ARCH_ISA_ARM\");\t\\\n \tbuiltin_define (\"__APCS_32__\");\t\t\t\\\n \tif (TARGET_THUMB)\t\t\t\t\\\n \t  builtin_define (\"__thumb__\");\t\t\t\\\n \tif (TARGET_THUMB2)\t\t\t\t\\\n \t  builtin_define (\"__thumb2__\");\t\t\\\n+\tif (TARGET_ARM_ARCH_ISA_THUMB)\t\t\t\\\n+\t  builtin_define_with_int_value (\t\t\\\n+\t    \"__ARM_ARCH_ISA_THUMB\",\t\t\t\\\n+\t    TARGET_ARM_ARCH_ISA_THUMB);\t\t\t\\\n \t\t\t\t\t\t\t\\\n \tif (TARGET_BIG_END)\t\t\t\t\\\n \t  {\t\t\t\t\t\t\\\n \t    builtin_define (\"__ARMEB__\");\t\t\\\n+\t    builtin_define (\"__ARM_BIG_ENDIAN\");\t\\\n \t    if (TARGET_THUMB)\t\t\t\t\\\n \t      builtin_define (\"__THUMBEB__\");\t\t\\\n \t    if (TARGET_LITTLE_WORDS)\t\t\t\\\n@@ -79,8 +111,24 @@ extern char arm_arch_name[];\n \tif (TARGET_VFP)\t\t\t\t\t\\\n \t  builtin_define (\"__VFP_FP__\");\t\t\\\n \t\t\t\t\t\t\t\\\n+\tif (TARGET_ARM_FP)\t\t\t\t\\\n+\t  builtin_define_with_int_value (\t\t\\\n+\t    \"__ARM_FP\", TARGET_ARM_FP);\t\t\t\\\n+\tif (arm_fp16_format == ARM_FP16_FORMAT_IEEE)\t\t\\\n+\t  builtin_define (\"__ARM_FP16_FORMAT_IEEE\");\t\t\\\n+\tif (arm_fp16_format == ARM_FP16_FORMAT_ALTERNATIVE)\t\\\n+\t  builtin_define (\"__ARM_FP16_FORMAT_ALTERNATIVE\");\t\\\n+        if (TARGET_FMA)\t\t\t\t\t\\\n+          builtin_define (\"__ARM_FEATURE_FMA\");\t\t\\\n+\t\t\t\t\t\t\t\\\n \tif (TARGET_NEON)\t\t\t\t\\\n-\t  builtin_define (\"__ARM_NEON__\");\t\t\\\n+\t  {\t\t\t\t\t\t\\\n+\t    builtin_define (\"__ARM_NEON__\");\t\t\\\n+\t    builtin_define (\"__ARM_NEON\");\t\t\\\n+\t  }\t\t\t\t\t\t\\\n+\tif (TARGET_NEON_FP)\t\t\t\t\\\n+\t  builtin_define_with_int_value (\t\t\\\n+\t    \"__ARM_NEON_FP\", TARGET_NEON_FP);\t\t\\\n \t\t\t\t\t\t\t\\\n \t/* Add a define for interworking.\t\t\\\n \t   Needed when building libgcc.a.  */\t\t\\\n@@ -96,7 +144,10 @@ extern char arm_arch_name[];\n \tif (arm_arch_xscale)\t\t\t\t\\\n \t  builtin_define (\"__XSCALE__\");\t\t\\\n \tif (arm_arch_iwmmxt)\t\t\t\t\\\n-\t  builtin_define (\"__IWMMXT__\");\t\t\\\n+          {\t\t\t\t\t\t\\\n+\t    builtin_define (\"__IWMMXT__\");\t\t\\\n+\t    builtin_define (\"__ARM_WMMX\");\t\t\\\n+\t  }\t\t\t\t\t\t\\\n \tif (arm_arch_iwmmxt2)\t\t\t\t\\\n \t  builtin_define (\"__IWMMXT2__\");\t\t\\\n \tif (TARGET_AAPCS_BASED)\t\t\t\t\\\n@@ -248,13 +299,22 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n /* FPU supports VFP half-precision floating-point.  */\n #define TARGET_FP16 (TARGET_VFP && arm_fpu_desc->fp16)\n \n+/* FPU supports fused-multiply-add operations.  */\n+#define TARGET_FMA (TARGET_VFP && arm_fpu_desc->rev >= 4)\n+\n /* FPU supports Neon instructions.  The setting of this macro gets\n    revealed via __ARM_NEON__ so we add extra guards upon TARGET_32BIT\n    and TARGET_HARD_FLOAT to ensure that NEON instructions are\n    available.  */\n #define TARGET_NEON (TARGET_32BIT && TARGET_HARD_FLOAT \\\n \t\t     && TARGET_VFP && arm_fpu_desc->neon)\n \n+/* Q-bit is present.  */\n+#define TARGET_ARM_QBIT \\\n+  (TARGET_32BIT && arm_arch5e && (arm_arch_notm || arm_arch7))\n+/* Saturation operation, e.g. SSAT.  */\n+#define TARGET_ARM_SAT \\\n+  (TARGET_32BIT && arm_arch6 && (arm_arch_notm || arm_arch7))\n /* \"DSP\" multiply instructions, eg. SMULxy.  */\n #define TARGET_DSP_MULTIPLY \\\n   (TARGET_32BIT && arm_arch5e && (arm_arch_notm || arm_arch7em))\n@@ -366,6 +426,39 @@ extern int arm_fpu_attr;\n #define ARM_DEFAULT_ABI ARM_ABI_APCS\n #endif\n \n+/* Map each of the micro-architecture variants to their corresponding\n+   major architecture revision.  */\n+\n+enum base_architecture\n+{\n+  BASE_ARCH_0 = 0,\n+  BASE_ARCH_2 = 2,\n+  BASE_ARCH_3 = 3,\n+  BASE_ARCH_3M = 3,\n+  BASE_ARCH_4 = 4,\n+  BASE_ARCH_4T = 4,\n+  BASE_ARCH_5 = 5,\n+  BASE_ARCH_5E = 5,\n+  BASE_ARCH_5T = 5,\n+  BASE_ARCH_5TE = 5,\n+  BASE_ARCH_5TEJ = 5,\n+  BASE_ARCH_6 = 6,\n+  BASE_ARCH_6J = 6,\n+  BASE_ARCH_6ZK = 6,\n+  BASE_ARCH_6K = 6,\n+  BASE_ARCH_6T2 = 6,\n+  BASE_ARCH_6M = 6,\n+  BASE_ARCH_6Z = 6,\n+  BASE_ARCH_7 = 7,\n+  BASE_ARCH_7A = 7,\n+  BASE_ARCH_7R = 7,\n+  BASE_ARCH_7M = 7,\n+  BASE_ARCH_7EM = 7\n+};\n+\n+/* The major revision number of the ARM Architecture implemented by the target.  */\n+extern enum base_architecture arm_base_arch;\n+\n /* Nonzero if this chip supports the ARM Architecture 3M extensions.  */\n extern int arm_arch3m;\n \n@@ -2183,6 +2276,51 @@ extern int making_const_table;\n #define NEED_INDICATE_EXEC_STACK\t0\n #endif\n \n+#define TARGET_ARM_ARCH\t\\\n+  (arm_base_arch)\t\\\n+\n+#define TARGET_ARM_V6M (!arm_arch_notm && !arm_arch_thumb2)\n+#define TARGET_ARM_V7M (!arm_arch_notm && arm_arch_thumb2)\n+\n+/* The highest Thumb instruction set version supported by the chip.  */\n+#define TARGET_ARM_ARCH_ISA_THUMB \t\t\\\n+  (arm_arch_thumb2 ? 2\t\t\t\t\\\n+\t           : ((TARGET_ARM_ARCH >= 5 || arm_arch4t) ? 1 : 0))\n+\n+/* Expands to an upper-case char of the target's architectural\n+   profile.  */\n+#define TARGET_ARM_ARCH_PROFILE\t\t\t\t\\\n+  (!arm_arch_notm\t\t\t\t\t\\\n+    ? 'M'\t\t\t\t\t\t\\\n+    : (arm_arch7\t\t\t\t\t\\\n+      ? (strlen (arm_arch_name) >=3\t\t\t\\\n+\t? (arm_arch_name[strlen (arm_arch_name) - 3])\t\\\n+      \t: 0)\t\t\t\t\t\t\\\n+      : 0))\n+\n+/* Bit-field indicating what size LDREX/STREX loads/stores are available.\n+   Bit 0 for bytes, up to bit 3 for double-words.  */\n+#define TARGET_ARM_FEATURE_LDREX\t\t\t\t\\\n+  ((TARGET_HAVE_LDREX ? 4 : 0)\t\t\t\t\t\\\n+   | (TARGET_HAVE_LDREXBH ? 3 : 0)\t\t\t\t\\\n+   | (TARGET_HAVE_LDREXD ? 8 : 0))\n+\n+/* Set as a bit mask indicating the available widths of hardware floating\n+   point types.  Where bit 1 indicates 16-bit support, bit 2 indicates\n+   32-bit support, bit 3 indicates 64-bit support.  */\n+#define TARGET_ARM_FP\t\t\t\\\n+  (TARGET_VFP_SINGLE ? 4\t\t\\\n+  \t\t     : (TARGET_VFP_DOUBLE ? (TARGET_FP16 ? 14 : 12) : 0))\n+\n+\n+/* Set as a bit mask indicating the available widths of floating point\n+   types for hardware NEON floating point.  This is the same as\n+   TARGET_ARM_FP without the 64-bit bit set.  */\n+#ifdef TARGET_NEON\n+#define TARGET_NEON_FP\t\t\\\n+  (TARGET_ARM_FP & (0xff ^ 0x08))\n+#endif\n+\n /* The maximum number of parallel loads or stores we support in an ldm/stm\n    instruction.  */\n #define MAX_LDM_STM_OPS 4"}, {"sha": "508f4473bde8baed090ee7ea112870727e7f7b44", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -2397,7 +2397,7 @@ type of system and machine is in use.  They are obviously different on\n each target supported by GCC@.  This manual, being for all systems and\n machines, cannot tell you what their names are, but you can use\n @command{cpp -dM} to see them all.  @xref{Invocation}.  All system-specific\n-predefined macros expand to the constant 1, so you can test them with\n+predefined macros expand to a constant value, so you can test them with\n either @samp{#ifdef} or @samp{#if}.\n \n The C standard requires that all system-specific macros be part of the"}, {"sha": "4b5b80c15daa8d80f987dd03f35827d5b8c5b937", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -1,3 +1,37 @@\n+2012-06-25  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n+            James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/arm/ftest-support-arm.h New testcase.\n+\t* gcc.target/arm/ftest-support-thumb.h Likewise.\n+\t* gcc.target/arm/ftest-support.h Likewise.\n+\t* gcc.target/arm/ftest-armv4-arm.c: Likewise.\n+\t* gcc.target/arm/ftest-armv4t-arm.c: Likewise.\n+\t* gcc.target/arm/ftest-armv4t-thumb.c: Likewise.\n+\t* gcc.target/arm/ftest-armv5t-arm.c Likewise.\n+\t* gcc.target/arm/ftest-armv5t-thumb.c Likewise.\n+\t* gcc.target/arm/ftest-armv5te-arm.c: Likewise.\n+\t* gcc.target/arm/ftest-armv5te-thumb.c: Likewise.\n+\t* gcc.target/arm/ftest-armv6-arm.c Likewise.\n+\t* gcc.target/arm/ftest-armv6-thumb.c Likewise.\n+\t* gcc.target/arm/ftest-armv6k-arm.c Likewise.\n+\t* gcc.target/arm/ftest-armv6k-thumb.c Likewise.\n+\t* gcc.target/arm/ftest-armv6m-thumb.c: Likewise.\n+\t* gcc.target/arm/ftest-armv6t2-arm.c: Likewise.\n+\t* gcc.target/arm/ftest-armv6t2-thumb.c: Likewise.\n+\t* gcc.target/arm/ftest-armv6z-arm.c: Likewise.\n+\t* gcc.target/arm/ftest-armv6z-thumb.c: Likewise.\n+\t* gcc.target/arm/ftest-armv7a-arm.c Likewise.\n+\t* gcc.target/arm/ftest-armv7a-thumb.c Likewise.\n+\t* gcc.target/arm/ftest-armv7m-thumb.c: Likewise.\n+\t* gcc.target/arm/ftest-armv7em-thumb.c: Likewise.\n+\t* gcc.target/arm/ftest-armv7r-arm.c Likewise.\n+\t* gcc.target/arm/ftest-armv7r-thumb.c Likewise.\n+\t* gcc/testsuite/lib/target-supports.exp\n+\t(check_effective_target_arm_arch_FUNC): Add support for more\n+\tarchitectures.\n+\t(add_options_for_arm_arch_FUNC): Likewise.\n+\t(check_effective_target_arm_arch_FUNC_multilib): New functions.\n+\n 2012-06-25  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/53202"}, {"sha": "acaf72e235cbee7484beb4d1557d5ca306cb2d03", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv4-arm.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv4-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv4-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv4-arm.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_nothumb } */\n+/* { dg-require-effective-target arm_arch_v4_multilib } */\n+/* { dg-options \"-marm\" } */\n+/* { dg-add-options arm_arch_v4 } */\n+\n+#include \"ftest-support-arm.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V4);\n+}\n+"}, {"sha": "7af6167e542882a1450c7a0ad48aed5df2328edb", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv4t-arm.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv4t-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv4t-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv4t-arm.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_nothumb } */\n+/* { dg-require-effective-target arm_arch_v4t_multilib } */\n+/* { dg-options \"-marm\" } */\n+/* { dg-add-options arm_arch_v4t } */\n+\n+#include \"ftest-support-arm.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V4T);\n+}\n+"}, {"sha": "1e6a2dac8ce0656ae63e52ffe16bcb112bc48876", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv4t-thumb.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv4t-thumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv4t-thumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv4t-thumb.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_eabi } */\n+/* { dg-require-effective-target arm_arch_v4t_multilib } */\n+/* { dg-options \"-mthumb\" } */\n+/* { dg-add-options arm_arch_v4t } */\n+\n+#include \"ftest-support-thumb.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V4T);\n+}\n+"}, {"sha": "cc7fc711dd96beb0217ddd8be3c50226b6c628a5", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv5t-arm.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv5t-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv5t-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv5t-arm.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_nothumb } */\n+/* { dg-require-effective-target arm_arch_v5t_multilib } */\n+/* { dg-options \"-marm\" } */\n+/* { dg-add-options arm_arch_v5t } */\n+\n+#include \"ftest-support-arm.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V5T);\n+}\n+"}, {"sha": "b2b4727db773c05dcadc95a7b23c7477966b1fc7", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv5t-thumb.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv5t-thumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv5t-thumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv5t-thumb.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_eabi } */\n+/* { dg-require-effective-target arm_arch_v5t_multilib } */\n+/* { dg-options \"-mthumb\" } */\n+/* { dg-add-options arm_arch_v5t } */\n+\n+#include \"ftest-support-thumb.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V5T);\n+}\n+"}, {"sha": "7595e19f232eea6f13b39e1776fcc3d6fed11bcb", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv5te-arm.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv5te-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv5te-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv5te-arm.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_nothumb } */\n+/* { dg-require-effective-target arm_arch_v5te_multilib } */\n+/* { dg-options \"-marm\" } */\n+/* { dg-add-options arm_arch_v5te } */\n+\n+#include \"ftest-support-arm.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V5TE);\n+}\n+"}, {"sha": "a18ea520ff5816b8d7ea7557bcd1324007c6718c", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv5te-thumb.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv5te-thumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv5te-thumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv5te-thumb.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_eabi } */\n+/* { dg-require-effective-target arm_arch_v5te_multilib } */\n+/* { dg-options \"-mthumb\" } */\n+/* { dg-add-options arm_arch_v5te } */\n+\n+#include \"ftest-support-thumb.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V5TE);\n+}\n+"}, {"sha": "465d1874d3d3d8956ec802b6806c2f87d2cb5f94", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv6-arm.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6-arm.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_nothumb } */\n+/* { dg-require-effective-target arm_arch_v6_multilib } */\n+/* { dg-options \"-marm\" } */\n+/* { dg-add-options arm_arch_v6 } */\n+\n+#include \"ftest-support-arm.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V6);\n+}\n+"}, {"sha": "0445587321bbaf19ce987f568212ca7e97e51cd5", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv6-thumb.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6-thumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6-thumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6-thumb.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_eabi } */\n+/* { dg-require-effective-target arm_arch_v6_multilib } */\n+/* { dg-options \"-mthumb\" } */\n+/* { dg-add-options arm_arch_v6 } */\n+\n+#include \"ftest-support-thumb.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V6);\n+}\n+"}, {"sha": "c059b7776b495919de729ca51bb5a6841e561f13", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv6k-arm.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6k-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6k-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6k-arm.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_nothumb } */\n+/* { dg-require-effective-target arm_arch_v6k_multilib } */\n+/* { dg-options \"-marm\" } */\n+/* { dg-add-options arm_arch_v6k } */\n+\n+#include \"ftest-support-arm.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V6K);\n+}\n+"}, {"sha": "8f19587cd45342c0290959d1df6f3f220bfe2982", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv6k-thumb.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6k-thumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6k-thumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6k-thumb.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_eabi } */\n+/* { dg-require-effective-target arm_arch_v6k_multilib } */\n+/* { dg-options \"-mthumb\" } */\n+/* { dg-add-options arm_arch_v6k } */\n+\n+#include \"ftest-support-thumb.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V6K);\n+}\n+"}, {"sha": "1042761eb33c5593d5c96df2833283ed92176c84", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv6m-thumb.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6m-thumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6m-thumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6m-thumb.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_eabi } */\n+/* { dg-require-effective-target arm_arch_v6m_multilib } */\n+/* { dg-options \"-mthumb\" } */\n+/* { dg-add-options arm_arch_v6m } */\n+\n+#include \"ftest-support-thumb.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V6M);\n+}\n+"}, {"sha": "5f7f8749a92a0ba77fd4d59e646b7376e9ee4f0a", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv6t2-arm.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6t2-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6t2-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6t2-arm.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_nothumb } */\n+/* { dg-require-effective-target arm_arch_v6t2_multilib } */\n+/* { dg-options \"-marm\" } */\n+/* { dg-add-options arm_arch_v6t2 } */\n+\n+#include \"ftest-support-arm.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V6T2);\n+}\n+"}, {"sha": "e3695c451749f905e2a4af831c4251f23ebfdb44", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv6t2-thumb.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6t2-thumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6t2-thumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6t2-thumb.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_eabi } */\n+/* { dg-require-effective-target arm_arch_v6t2_multilib } */\n+/* { dg-options \"-mthumb\" } */\n+/* { dg-add-options arm_arch_v6t2 } */\n+\n+#include \"ftest-support-thumb.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V6T2);\n+}\n+"}, {"sha": "079789021b501ef368b5ff5300a75eb05f469dcd", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv6z-arm.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6z-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6z-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6z-arm.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_nothumb } */\n+/* { dg-require-effective-target arm_arch_v6z_multilib } */\n+/* { dg-options \"-marm\" } */\n+/* { dg-add-options arm_arch_v6z } */\n+\n+#include \"ftest-support-arm.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V6Z);\n+}\n+"}, {"sha": "c5a2e4918ef30fa5c89352558539e1bd3c492b54", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv6z-thumb.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6z-thumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6z-thumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv6z-thumb.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_eabi } */\n+/* { dg-require-effective-target arm_arch_v6z_multilib } */\n+/* { dg-options \"-mthumb\" } */\n+/* { dg-add-options arm_arch_v6z } */\n+\n+#include \"ftest-support-thumb.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V6Z);\n+}\n+"}, {"sha": "e84559a8bd5d3ea992eccbaa2c83e7cacd04841f", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv7a-arm.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7a-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7a-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7a-arm.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_nothumb } */\n+/* { dg-require-effective-target arm_arch_v7a_multilib } */\n+/* { dg-options \"-marm\" } */\n+/* { dg-add-options arm_arch_v7a } */\n+\n+#include \"ftest-support-arm.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V7A);\n+}\n+"}, {"sha": "ad9b4e3cd17a2ef35998d27de62d428552a41285", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv7a-thumb.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7a-thumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7a-thumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7a-thumb.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_eabi } */\n+/* { dg-require-effective-target arm_arch_v7a_multilib } */\n+/* { dg-options \"-mthumb\" } */\n+/* { dg-add-options arm_arch_v7a } */\n+\n+#include \"ftest-support-thumb.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V7A);\n+}\n+"}, {"sha": "7ef921010b5ecf083e5beb6efbbdb1789999b113", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv7em-thumb.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7em-thumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7em-thumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7em-thumb.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_eabi } */\n+/* { dg-require-effective-target arm_arch_v7em_multilib } */\n+/* { dg-options \"-mthumb\" } */\n+/* { dg-add-options arm_arch_v7em } */\n+\n+#include \"ftest-support-thumb.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V7EM);\n+}\n+"}, {"sha": "8bf875eb9510164c8168f7d758ca58f1019ec102", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv7m-thumb.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7m-thumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7m-thumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7m-thumb.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_eabi } */\n+/* { dg-require-effective-target arm_arch_v7m_multilib } */\n+/* { dg-options \"-mthumb\" } */\n+/* { dg-add-options arm_arch_v7m } */\n+\n+#include \"ftest-support-thumb.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V7M);\n+}\n+"}, {"sha": "44225644c6af342e14bb21ef45509d24836f758a", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv7r-arm.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7r-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7r-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7r-arm.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_nothumb } */\n+/* { dg-require-effective-target arm_arch_v7r_multilib } */\n+/* { dg-options \"-marm\" } */\n+/* { dg-add-options arm_arch_v7r } */\n+\n+#include \"ftest-support-arm.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V7R);\n+}\n+"}, {"sha": "da866e4ab7ab6599e9c1f634d56fde5015540a98", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv7r-thumb.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7r-thumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7r-thumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7r-thumb.c?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_eabi } */\n+/* { dg-require-effective-target arm_arch_v7r_multilib } */\n+/* { dg-options \"-mthumb\" } */\n+/* { dg-add-options arm_arch_v7r } */\n+\n+#include \"ftest-support-thumb.h\"\n+\n+int\n+main (void)\n+{\n+  return ftest (ARCH_V7R);\n+}\n+"}, {"sha": "512d50e83648d523b7dda26ad3f1ec7d773b0069", "filename": "gcc/testsuite/gcc.target/arm/ftest-support-arm.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support-arm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support-arm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support-arm.h?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,29 @@\n+#include \"ftest-support.h\"\n+\n+  /*Feature matrix layout:\n+    __ARM_ARCH\n+    __ARM_ARCH_ISA_ARM\n+    __ARM_ARCH_ISA_THUMB\n+    __ARM_ARCH_PROFILE\n+    __ARM_FEATURE_UNALIGNED\n+    __ARM_FEATURE_LDREX\n+    __ARM_FEATURE_CLZ\n+    __ARM_FEATURE_DSP\n+    __ARM_FEATURE_SIMD32\n+    __ARM_FEATURE_QBIT\n+    __ARM_FEATURE_SAT\n+  */\n+int feature_matrix[ARCH_COUNT][NUM_FEATURES] =\n+  {{4, 1, 0, 0,   0, 0,  0, 0, 0, 0, 0},  /* ARCH_V4.  */\n+   {4, 1, 1, 0,   0, 0,  0, 0, 0, 0, 0},  /* ARCH_V4T.  */\n+   {5, 1, 1, 0,   0, 0,  1, 0, 0, 0, 0},  /* ARCH_V5T.  */\n+   {5, 1, 1, 0,   0, 0,  1, 1, 0, 1, 0},  /* ARCH_V5TE.  */\n+   {6, 1, 1, 0,   1, 4,  1, 1, 1, 1, 1},  /* ARCH_V6.  */\n+   {6, 1, 1, 0,   1, 15, 1, 1, 1, 1, 1},  /* ARCH_V6K.  */\n+   {6, 1, 2, 0,   1, 4,  1, 1, 1, 1, 1},  /* ARCH_V6T2.  */\n+   {6, 1, 1, 0,   1, 4,  1, 1, 1, 1, 1},  /* ARCH_V6Z.  */\n+   {6, 0, 1, 'M', 0, 0,  1, 0, 0, 0, 0},  /* ARCH_V6M.  */\n+   {7, 1, 2, 'A', 1, 15, 1, 1, 1, 1, 1},  /* ARCH_V7A.  */\n+   {7, 1, 2, 'R', 1, 15, 1, 1, 1, 1, 1},  /* ARCH_V7R.  */\n+   {7, 0, 2, 'M', 1, 7,  1, 0, 0, 1, 1},  /* ARCH_V7M.  */\n+   {7, 0, 2, 'M', 1, 7,  1, 1, 0, 1, 1}}; /* ARCH_V7EM.  */"}, {"sha": "99918310e30c0e162e14b1b8bd355248c19d2515", "filename": "gcc/testsuite/gcc.target/arm/ftest-support-thumb.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support-thumb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support-thumb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support-thumb.h?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,29 @@\n+#include \"ftest-support.h\"\n+\n+  /*Feature matrix layout:\n+    __ARM_ARCH\n+    __ARM_ARCH_ISA_ARM\n+    __ARM_ARCH_ISA_THUMB\n+    __ARM_ARCH_PROFILE\n+    __ARM_FEATURE_UNALIGNED\n+    __ARM_FEATURE_LDREX\n+    __ARM_FEATURE_CLZ\n+    __ARM_FEATURE_DSP\n+    __ARM_FEATURE_SIMD32\n+    __ARM_FEATURE_QBIT\n+    __ARM_FEATURE_SAT\n+  */\n+int feature_matrix[ARCH_COUNT][NUM_FEATURES] =\n+  {{4, 1, 0, 0,   0, 0,  0, 0, 0, 0, 0},  /* ARCH_V4.  */\n+   {4, 1, 1, 0,   0, 0,  0, 0, 0, 0, 0},  /* ARCH_V4T.  */\n+   {5, 1, 1, 0,   0, 0,  0, 0, 0, 0, 0},  /* ARCH_V5T.  */\n+   {5, 1, 1, 0,   0, 0,  0, 0, 0, 0, 0},  /* ARCH_V5TE.  */\n+   {6, 1, 1, 0,   1, 0,  0, 0, 0, 0, 0},  /* ARCH_V6.  */\n+   {6, 1, 1, 0,   1, 0,  0, 0, 0, 0, 0},  /* ARCH_V6K.  */\n+   {6, 1, 2, 0,   1, 0,  1, 1, 1, 1, 1},  /* ARCH_V6T2.  */\n+   {6, 1, 1, 0,   1, 0,  0, 0, 0, 0, 0},  /* ARCH_V6Z.  */\n+   {6, 0, 1, 'M', 0, 0,  0, 0, 0, 0, 0},  /* ARCH_V6M.  */\n+   {7, 1, 2, 'A', 1, 15, 1, 1, 1, 1, 1},  /* ARCH_V7A.  */\n+   {7, 1, 2, 'R', 1, 15, 1, 1, 1, 1, 1},  /* ARCH_V7R.  */\n+   {7, 0, 2, 'M', 1, 7,  1, 0, 0, 1, 1},  /* ARCH_V7M.  */\n+   {7, 0, 2, 'M', 1, 7,  1, 1, 1, 1, 1}}; /* ARCH_V7EM.  */"}, {"sha": "c5f98105b7834fa00a61d8698768079017ae48d0", "filename": "gcc/testsuite/gcc.target/arm/ftest-support.h", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-support.h?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -0,0 +1,83 @@\n+#if 0\n+#define INTERNAL_DEBUG 1\n+#endif\n+\n+#ifdef INTERNAL_DEBUG\n+#include <stdio.h>\n+#endif\n+\n+extern void abort (void);\n+\n+enum architecture {\n+  ARCH_V4 = 0,\n+  ARCH_V4T,\n+  ARCH_V5T,\n+  ARCH_V5TE,\n+  ARCH_V6,\n+  ARCH_V6K,\n+  ARCH_V6T2,\n+  ARCH_V6Z,\n+  ARCH_V6M,\n+  ARCH_V7A,\n+  ARCH_V7R,\n+  ARCH_V7M,\n+  ARCH_V7EM,\n+  ARCH_COUNT\n+};\n+\n+#define NUM_FEATURES 11\n+int feature_matrix[ARCH_COUNT][NUM_FEATURES];\n+\n+int\n+ftest (int arch)\n+{\n+  int features[NUM_FEATURES] = {0};\n+  int y;\n+\n+  for (y = 0; y < NUM_FEATURES; ++y)\n+    features[y] = 0;\n+\n+#ifdef __ARM_ARCH\n+  features[0] = __ARM_ARCH;\n+#endif\n+#ifdef __ARM_ARCH_ISA_ARM\n+  features[1] = __ARM_ARCH_ISA_ARM;\n+#endif\n+#ifdef __ARM_ARCH_ISA_THUMB\n+  features[2] = __ARM_ARCH_ISA_THUMB;\n+#endif\n+#ifdef __ARM_ARCH_PROFILE\n+  features[3] = __ARM_ARCH_PROFILE;\n+#endif\n+#ifdef __ARM_FEATURE_UNALIGNED\n+  features[4] = __ARM_FEATURE_UNALIGNED;\n+#endif\n+#ifdef __ARM_FEATURE_LDREX\n+  features[5] = __ARM_FEATURE_LDREX;\n+#endif\n+#ifdef __ARM_FEATURE_CLZ\n+  features[6] = __ARM_FEATURE_CLZ;\n+#endif\n+#ifdef __ARM_FEATURE_DSP\n+  features[7] = __ARM_FEATURE_DSP;\n+#endif\n+#ifdef __ARM_FEATURE_SIMD32\n+  features[8] = __ARM_FEATURE_SIMD32;\n+#endif\n+#ifdef __ARM_FEATURE_QBIT\n+  features[9] = __ARM_FEATURE_QBIT;\n+#endif\n+#ifdef __ARM_FEATURE_SAT\n+  features[10] = __ARM_FEATURE_SAT;\n+#endif\n+  for (y = 0; y < NUM_FEATURES; ++y)\n+    if (feature_matrix[arch][y] != features[y])\n+      {\n+#ifdef INTERNAL_DEBUG\n+\tprintf (\"%d, %d, %d, %d\\n\", arch, y, feature_matrix[arch][y], features[y]);\n+#endif\n+        abort ();\n+      }\n+  return 0;\n+}\n+"}, {"sha": "bc5baa76622d9ed09f6eba7ecb25fbd69766f26d", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94a7fc5ab770928b9e6a2b74e292d35b4c94da/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=9e94a7fc5ab770928b9e6a2b74e292d35b4c94da", "patch": "@@ -2169,10 +2169,21 @@ proc check_effective_target_arm_fp16_ok { } {\n # (Thumb in particular - but others may be added in the future)\n # Usage: /* { dg-require-effective-target arm_arch_v5_ok } */\n #        /* { dg-add-options arm_arch_v5 } */\n-foreach { armfunc armflag armdef } { v5 \"-march=armv5 -marm\" __ARM_ARCH_5__\n+#\t /* { dg-require-effective-target arm_arch_v5_multilib } */\n+foreach { armfunc armflag armdef } { v4 \"-march=armv4 -marm\" __ARM_ARCH_4__\n+\t\t\t\t     v4t \"-march=armv4t\" __ARM_ARCH_4T__\n+\t\t\t\t     v5 \"-march=armv5 -marm\" __ARM_ARCH_5__\n+\t\t\t\t     v5t \"-march=armv5t\" __ARM_ARCH_5T__\n+\t\t\t\t     v5te \"-march=armv5te\" __ARM_ARCH_5TE__\n \t\t\t\t     v6 \"-march=armv6\" __ARM_ARCH_6__\n \t\t\t\t     v6k \"-march=armv6k\" __ARM_ARCH_6K__\n-\t\t\t\t     v7a \"-march=armv7-a\" __ARM_ARCH_7A__ } {\n+\t\t\t\t     v6t2 \"-march=armv6t2\" __ARM_ARCH_6T2__\n+\t\t\t\t     v6z \"-march=armv6z\" __ARM_ARCH_6Z__\n+\t\t\t\t     v6m \"-march=armv6-m -mthumb\" __ARM_ARCH_6M__\n+\t\t\t\t     v7a \"-march=armv7-a\" __ARM_ARCH_7A__\n+\t\t\t\t     v7r \"-march=armv7-r\" __ARM_ARCH_7R__\n+\t\t\t\t     v7m \"-march=armv7-m -mthumb\" __ARM_ARCH_7M__\n+\t\t\t\t     v7em \"-march=armv7e-m -mthumb\" __ARM_ARCH_7EM__ } {\n     eval [string map [list FUNC $armfunc FLAG $armflag DEF $armdef ] {\n \tproc check_effective_target_arm_arch_FUNC_ok { } {\n \t    if { [ string match \"*-marm*\" \"FLAG\" ] &&\n@@ -2189,6 +2200,16 @@ foreach { armfunc armflag armdef } { v5 \"-march=armv5 -marm\" __ARM_ARCH_5__\n \tproc add_options_for_arm_arch_FUNC { flags } {\n \t    return \"$flags FLAG\"\n \t}\n+\n+\tproc check_effective_target_arm_arch_FUNC_multilib { } {\n+\t    return [check_runtime arm_arch_FUNC_multilib {\n+\t\tint\n+\t\tmain (void)\n+\t\t{\n+\t\t    return 0;\n+\t\t}\n+\t    } [add_options_for_arm_arch_FUNC \"\"]]\n+        }\n     }]\n }\n "}]}