{"sha": "9a5a1e278f91fd7e67fdfbdb8d2f2f72dd566c99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE1YTFlMjc4ZjkxZmQ3ZTY3ZmRmYmRiOGQyZjJmNzJkZDU2NmM5OQ==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@linux.ibm.com", "date": "2021-03-03T23:54:30Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@linux.ibm.com", "date": "2021-03-03T23:54:30Z"}, "message": "Update size attribute for Power10.\n\n2021-03-03  Pat Haugen  <pthaugen@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/dfp.md (extendddtd2, trunctddd2, *cmp<mode>_internal1,\n\tfloatditd2, ftrunc<mode>2, fix<mode>di2, dfp_ddedpd_<mode>,\n\tdfp_denbcd_<mode>, dfp_dxex_<mode>, dfp_diex_<mode>,\n\t*dfp_sgnfcnc_<mode>, dfp_dscli_<mode>, dfp_dscri_<mode>): Update size\n\tattribute for Power10.\n\t* config/rs6000/mma.md (*movoo): Likewise.\n\t* config/rs6000/rs6000.md (define_attr \"size\"): Add 256.\n\t(define_mode_attr bits): Add DD/TD modes.\n\t* config/rs6000/sync.md (load_quadpti, store_quadpti, load_lockedpti,\n\tstore_conditionalpti): Update size attribute for Power10.", "tree": {"sha": "e2dcec84698edd3bdb3737ed47b49dfc715064d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2dcec84698edd3bdb3737ed47b49dfc715064d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a5a1e278f91fd7e67fdfbdb8d2f2f72dd566c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a5a1e278f91fd7e67fdfbdb8d2f2f72dd566c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a5a1e278f91fd7e67fdfbdb8d2f2f72dd566c99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a5a1e278f91fd7e67fdfbdb8d2f2f72dd566c99/comments", "author": null, "committer": null, "parents": [{"sha": "c390c5df71bbc95627c8e5e649a3161091239fd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c390c5df71bbc95627c8e5e649a3161091239fd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c390c5df71bbc95627c8e5e649a3161091239fd9"}], "stats": {"total": 49, "additions": 34, "deletions": 15}, "files": [{"sha": "026be5d48a683fede7f0bfdac8a83d96f6bc0b62", "filename": "gcc/config/rs6000/dfp.md", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5a1e278f91fd7e67fdfbdb8d2f2f72dd566c99/gcc%2Fconfig%2Frs6000%2Fdfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5a1e278f91fd7e67fdfbdb8d2f2f72dd566c99/gcc%2Fconfig%2Frs6000%2Fdfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdfp.md?ref=9a5a1e278f91fd7e67fdfbdb8d2f2f72dd566c99", "patch": "@@ -139,7 +139,8 @@\n \t(float_extend:TD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"dctqpq %0,%1\"\n-  [(set_attr \"type\" \"dfp\")])\n+  [(set_attr \"type\" \"dfp\")\n+   (set_attr \"size\" \"128\")])\n \n ;; The result of drdpq is an even/odd register pair with the converted\n ;; value in the even register and zero in the odd register.\n@@ -153,6 +154,7 @@\n   \"TARGET_DFP\"\n   \"drdpq %2,%1\\;fmr %0,%2\"\n   [(set_attr \"type\" \"dfp\")\n+   (set_attr \"size\" \"128\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"trunctdsd2\"\n@@ -206,7 +208,8 @@\n \t\t      (match_operand:DDTD 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"dcmpu<q> %0,%1,%2\"\n-  [(set_attr \"type\" \"dfp\")])\n+  [(set_attr \"type\" \"dfp\")\n+   (set_attr \"size\" \"<bits>\")])\n \n (define_insn \"floatdidd2\"\n   [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n@@ -220,7 +223,8 @@\n \t(float:TD (match_operand:DI 1 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"dcffixq %0,%1\"\n-  [(set_attr \"type\" \"dfp\")])\n+  [(set_attr \"type\" \"dfp\")\n+   (set_attr \"size\" \"128\")])\n \n ;; Convert a decimal64/128 to a decimal64/128 whose value is an integer.\n ;; This is the first stage of converting it to an integer type.\n@@ -230,7 +234,8 @@\n \t(fix:DDTD (match_operand:DDTD 1 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"drintn<q>. 0,%0,%1,1\"\n-  [(set_attr \"type\" \"dfp\")])\n+  [(set_attr \"type\" \"dfp\")\n+   (set_attr \"size\" \"<bits>\")])\n \n ;; Convert a decimal64/128 whose value is an integer to an actual integer.\n ;; This is the second stage of converting decimal float to integer type.\n@@ -240,7 +245,8 @@\n \t(fix:DI (match_operand:DDTD 1 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"dctfix<q> %0,%1\"\n-  [(set_attr \"type\" \"dfp\")])\n+  [(set_attr \"type\" \"dfp\")\n+   (set_attr \"size\" \"<bits>\")])\n \f\n ;; Decimal builtin support\n \n@@ -262,7 +268,8 @@\n \t\t     UNSPEC_DDEDPD))]\n   \"TARGET_DFP\"\n   \"ddedpd<q> %1,%0,%2\"\n-  [(set_attr \"type\" \"dfp\")])\n+  [(set_attr \"type\" \"dfp\")\n+   (set_attr \"size\" \"<bits>\")])\n \n (define_insn \"dfp_denbcd_<mode>\"\n   [(set (match_operand:DDTD 0 \"gpc_reg_operand\" \"=d\")\n@@ -271,7 +278,8 @@\n \t\t     UNSPEC_DENBCD))]\n   \"TARGET_DFP\"\n   \"denbcd<q> %1,%0,%2\"\n-  [(set_attr \"type\" \"dfp\")])\n+  [(set_attr \"type\" \"dfp\")\n+   (set_attr \"size\" \"<bits>\")])\n \n (define_insn \"dfp_denbcd_v16qi_inst\"\n   [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n@@ -301,7 +309,8 @@\n \t\t   UNSPEC_DXEX))]\n   \"TARGET_DFP\"\n   \"dxex<q> %0,%1\"\n-  [(set_attr \"type\" \"dfp\")])\n+  [(set_attr \"type\" \"dfp\")\n+   (set_attr \"size\" \"<bits>\")])\n \n (define_insn \"dfp_diex_<mode>\"\n   [(set (match_operand:DDTD 0 \"gpc_reg_operand\" \"=d\")\n@@ -310,7 +319,8 @@\n \t\t     UNSPEC_DXEX))]\n   \"TARGET_DFP\"\n   \"diex<q> %0,%1,%2\"\n-  [(set_attr \"type\" \"dfp\")])\n+  [(set_attr \"type\" \"dfp\")\n+   (set_attr \"size\" \"<bits>\")])\n \n (define_expand \"dfptstsfi_<code>_<mode>\"\n   [(set (match_dup 3)\n@@ -349,7 +359,8 @@\n     operands[1] = GEN_INT (63);\n   return \"dtstsfi<q> %0,%1,%2\";\n }\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"size\" \"<bits>\")])\n \n (define_insn \"dfp_dscli_<mode>\"\n   [(set (match_operand:DDTD 0 \"gpc_reg_operand\" \"=d\")\n@@ -358,7 +369,8 @@\n \t\t     UNSPEC_DSCLI))]\n   \"TARGET_DFP\"\n   \"dscli<q> %0,%1,%2\"\n-  [(set_attr \"type\" \"dfp\")])\n+  [(set_attr \"type\" \"dfp\")\n+   (set_attr \"size\" \"<bits>\")])\n \n (define_insn \"dfp_dscri_<mode>\"\n   [(set (match_operand:DDTD 0 \"gpc_reg_operand\" \"=d\")\n@@ -367,4 +379,5 @@\n \t\t     UNSPEC_DSCRI))]\n   \"TARGET_DFP\"\n   \"dscri<q> %0,%1,%2\"\n-  [(set_attr \"type\" \"dfp\")])\n+  [(set_attr \"type\" \"dfp\")\n+   (set_attr \"size\" \"<bits>\")])"}, {"sha": "a00d3a3de2644d012c0696ee8971acbdc2cf6230", "filename": "gcc/config/rs6000/mma.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5a1e278f91fd7e67fdfbdb8d2f2f72dd566c99/gcc%2Fconfig%2Frs6000%2Fmma.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5a1e278f91fd7e67fdfbdb8d2f2f72dd566c99/gcc%2Fconfig%2Frs6000%2Fmma.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmma.md?ref=9a5a1e278f91fd7e67fdfbdb8d2f2f72dd566c99", "patch": "@@ -288,6 +288,7 @@\n   DONE;\n }\n   [(set_attr \"type\" \"vecload,vecstore,veclogical\")\n+   (set_attr \"size\" \"256\")\n    (set_attr \"length\" \"*,*,8\")])\n \n \f"}, {"sha": "c0d7b1aff96801acea581c026c06c9be0b4a8cbd", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5a1e278f91fd7e67fdfbdb8d2f2f72dd566c99/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5a1e278f91fd7e67fdfbdb8d2f2f72dd566c99/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=9a5a1e278f91fd7e67fdfbdb8d2f2f72dd566c99", "patch": "@@ -209,7 +209,7 @@\n \n ;; What data size does this instruction work on?\n ;; This is used for insert, mul and others as necessary.\n-(define_attr \"size\" \"8,16,32,64,128\" (const_string \"32\"))\n+(define_attr \"size\" \"8,16,32,64,128,256\" (const_string \"32\"))\n \n ;; What is the insn_cost for this insn?  The target hook can still override\n ;; this.  For optimizing for size the \"length\" attribute is used instead.\n@@ -675,6 +675,7 @@\n ;; How many bits (per element) in this mode?\n (define_mode_attr bits [(QI \"8\") (HI \"16\") (SI \"32\") (DI \"64\")\n \t\t\t\t\t   (SF \"32\") (DF \"64\")\n+\t\t\t\t\t\t     (DD \"64\") (TD \"128\")\n \t\t\t\t\t   (V4SI \"32\") (V2DI \"64\")])\n \n ; DImode bits"}, {"sha": "40629dd9eec7655c0c7034e55a5d1d3ee7a4457f", "filename": "gcc/config/rs6000/sync.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5a1e278f91fd7e67fdfbdb8d2f2f72dd566c99/gcc%2Fconfig%2Frs6000%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5a1e278f91fd7e67fdfbdb8d2f2f72dd566c99/gcc%2Fconfig%2Frs6000%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsync.md?ref=9a5a1e278f91fd7e67fdfbdb8d2f2f72dd566c99", "patch": "@@ -131,6 +131,7 @@\n    && !reg_mentioned_p (operands[0], operands[1])\"\n   \"lq %0,%1\"\n   [(set_attr \"type\" \"load\")\n+   (set_attr \"size\" \"128\")\n    (set (attr \"prefixed\") (if_then_else (match_test \"TARGET_PREFIXED\")\n \t\t\t\t\t(const_string \"yes\")\n \t\t\t\t\t(const_string \"no\")))])\n@@ -205,6 +206,7 @@\n   \"TARGET_SYNC_TI\"\n   \"stq %1,%0\"\n   [(set_attr \"type\" \"store\")\n+   (set_attr \"size\" \"128\")\n    (set (attr \"prefixed\") (if_then_else (match_test \"TARGET_PREFIXED\")\n \t\t\t\t\t(const_string \"yes\")\n \t\t\t\t\t(const_string \"no\")))])\n@@ -333,7 +335,8 @@\n    && !reg_mentioned_p (operands[0], operands[1])\n    && quad_int_reg_operand (operands[0], PTImode)\"\n   \"lqarx %0,%y1\"\n-  [(set_attr \"type\" \"load_l\")])\n+  [(set_attr \"type\" \"load_l\")\n+   (set_attr \"size\" \"128\")])\n \n (define_insn \"store_conditional<mode>\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n@@ -394,7 +397,8 @@\n \t(match_operand:PTI 2 \"quad_int_reg_operand\" \"r\"))]\n   \"TARGET_SYNC_TI && quad_int_reg_operand (operands[2], PTImode)\"\n   \"stqcx. %2,%y1\"\n-  [(set_attr \"type\" \"store_c\")])\n+  [(set_attr \"type\" \"store_c\")\n+   (set_attr \"size\" \"128\")])\n \n (define_expand \"atomic_compare_and_swap<mode>\"\n   [(match_operand:SI 0 \"int_reg_operand\")\t\t;; bool out"}]}