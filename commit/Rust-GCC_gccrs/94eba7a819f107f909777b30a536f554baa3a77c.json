{"sha": "94eba7a819f107f909777b30a536f554baa3a77c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRlYmE3YTgxOWYxMDdmOTA5Nzc3YjMwYTUzNmY1NTRiYWEzYTc3Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2012-10-31T08:00:24Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-10-31T08:00:24Z"}, "message": "expmed.c (store_bit_field_1): Use OP_MODE to check whether an insv pattern is available.\n\ngcc/\n\t* expmed.c (store_bit_field_1): Use OP_MODE to check whether an\n\tinsv pattern is available.  Remove redundant checks for OP_MODE\n\tbeing MAX_MACHINE_MODE.\n\t(extract_bit_field_1): Remove redundant checks for EXT_MODE being\n\tMAX_MACHINE_MODE.\n\nFrom-SVN: r193022", "tree": {"sha": "aaba5f374433398062553a429cc64d8b2659e75f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aaba5f374433398062553a429cc64d8b2659e75f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94eba7a819f107f909777b30a536f554baa3a77c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94eba7a819f107f909777b30a536f554baa3a77c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94eba7a819f107f909777b30a536f554baa3a77c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94eba7a819f107f909777b30a536f554baa3a77c/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7682c22c3a1c4460f882186ee6b992d458ca81c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7682c22c3a1c4460f882186ee6b992d458ca81c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7682c22c3a1c4460f882186ee6b992d458ca81c6"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "3e088023fbc71112c1dc206daad39aeb25460bc4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94eba7a819f107f909777b30a536f554baa3a77c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94eba7a819f107f909777b30a536f554baa3a77c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94eba7a819f107f909777b30a536f554baa3a77c", "patch": "@@ -1,3 +1,11 @@\n+2012-10-31  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* expmed.c (store_bit_field_1): Use OP_MODE to check whether an\n+\tinsv pattern is available.  Remove redundant checks for OP_MODE\n+\tbeing MAX_MACHINE_MODE.\n+\t(extract_bit_field_1): Remove redundant checks for EXT_MODE being\n+\tMAX_MACHINE_MODE.\n+\n 2012-10-31  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* expmed.c (store_bit_field_1): Remove test for BLKmode values."}, {"sha": "f6b3d6c1c8945877b5b7a2c2f3896c309025d104", "filename": "gcc/expmed.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94eba7a819f107f909777b30a536f554baa3a77c/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94eba7a819f107f909777b30a536f554baa3a77c/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=94eba7a819f107f909777b30a536f554baa3a77c", "patch": "@@ -669,7 +669,7 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n      in a word.  */\n \n   enum machine_mode op_mode = mode_for_extraction (EP_insv, 3);\n-  if (HAVE_insv\n+  if (op_mode != MAX_MACHINE_MODE\n       && bitsize > 0\n       && GET_MODE_BITSIZE (op_mode) >= bitsize\n       /* Do not use insv for volatile bitfields when\n@@ -788,7 +788,7 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \n   /* If OP0 is a memory, try copying it to a register and seeing if a\n      cheap register alternative is available.  */\n-  if (HAVE_insv && MEM_P (op0))\n+  if (op_mode != MAX_MACHINE_MODE && MEM_P (op0))\n     {\n       enum machine_mode bestmode;\n       unsigned HOST_WIDE_INT maxbits = MAX_FIXED_MODE_SIZE;\n@@ -803,13 +803,10 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \n       if (GET_MODE (op0) == BLKmode\n \t  || GET_MODE_BITSIZE (GET_MODE (op0)) > maxbits\n-\t  || (op_mode != MAX_MACHINE_MODE\n-\t      && GET_MODE_SIZE (GET_MODE (op0)) > GET_MODE_SIZE (op_mode)))\n+\t  || GET_MODE_SIZE (GET_MODE (op0)) > GET_MODE_SIZE (op_mode))\n \tbestmode = get_best_mode (bitsize, bitnum,\n \t\t\t\t  bitregion_start, bitregion_end,\n-\t\t\t\t  MEM_ALIGN (op0),\n-\t\t\t\t  (op_mode == MAX_MACHINE_MODE\n-\t\t\t\t   ? VOIDmode : op_mode),\n+\t\t\t\t  MEM_ALIGN (op0), op_mode,\n \t\t\t\t  MEM_VOLATILE_P (op0));\n       else\n \tbestmode = GET_MODE (op0);\n@@ -1597,12 +1594,9 @@ extract_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \t smallest mode containing the field.  */\n \n       if (GET_MODE (op0) == BLKmode\n-\t  || (ext_mode != MAX_MACHINE_MODE\n-\t      && GET_MODE_SIZE (GET_MODE (op0)) > GET_MODE_SIZE (ext_mode)))\n+\t  || GET_MODE_SIZE (GET_MODE (op0)) > GET_MODE_SIZE (ext_mode))\n \tbestmode = get_best_mode (bitsize, bitnum, 0, 0, MEM_ALIGN (op0),\n-\t\t\t\t  (ext_mode == MAX_MACHINE_MODE\n-\t\t\t\t   ? VOIDmode : ext_mode),\n-\t\t\t\t  MEM_VOLATILE_P (op0));\n+\t\t\t\t  ext_mode, MEM_VOLATILE_P (op0));\n       else\n \tbestmode = GET_MODE (op0);\n "}]}