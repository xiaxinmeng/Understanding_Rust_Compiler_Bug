{"sha": "6eeabb09a66d8c47f387da7882f86780da50cdd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVlYWJiMDlhNjZkOGM0N2YzODdkYTc4ODJmODY3ODBkYTUwY2RkOA==", "commit": {"author": {"name": "Peter Soetens", "email": "peter.soetens@mech.kuleuven.ac.be", "date": "2003-02-06T08:10:47Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-02-06T08:10:47Z"}, "message": "basic_file_libio.h: Fixups.\n\n\n2003-02-06  Peter Soetens  <peter.soetens@mech.kuleuven.ac.be>\n\n\t* config/io/basic_file_libio.h: Fixups.\n\t* config/io/c_io_libio.h: Same.\n\t* libio/Makefile.am: Same.\n\t* libio/Makefile.in: Regenerated.\n\nFrom-SVN: r62475", "tree": {"sha": "69d5137cfb16e8568f123a2a6adabb45ef5ab7de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69d5137cfb16e8568f123a2a6adabb45ef5ab7de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eeabb09a66d8c47f387da7882f86780da50cdd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eeabb09a66d8c47f387da7882f86780da50cdd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eeabb09a66d8c47f387da7882f86780da50cdd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eeabb09a66d8c47f387da7882f86780da50cdd8/comments", "author": null, "committer": null, "parents": [{"sha": "e61c8e230ac099c617f5daf275ab7c020935237c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61c8e230ac099c617f5daf275ab7c020935237c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e61c8e230ac099c617f5daf275ab7c020935237c"}], "stats": {"total": 223, "additions": 156, "deletions": 67}, "files": [{"sha": "0dc7487e9a00b6651ccd1f4afd1d777d03138d09", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6eeabb09a66d8c47f387da7882f86780da50cdd8", "patch": "@@ -1,3 +1,10 @@\n+2003-02-06  Peter Soetens  <peter.soetens@mech.kuleuven.ac.be>\n+\n+\t* config/io/basic_file_libio.h: Fixups.\n+\t* config/io/c_io_libio.h: Same.\n+\t* libio/Makefile.am: Same.\n+\t* libio/Makefile.in: Regenerated.\n+\t\n 2003-02-06  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/22_locale/codecvt/encoding/wchar_t/1.cc (test01):"}, {"sha": "21db5c915bc8e34c738a1c4ba91eb16e0f8d7b87", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=6eeabb09a66d8c47f387da7882f86780da50cdd8", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation"}, {"sha": "959ecf948d0c97784ea6c09caefbd5d9a690b76a", "filename": "libstdc++-v3/config/io/basic_file_libio.h", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_libio.h?ref=6eeabb09a66d8c47f387da7882f86780da50cdd8", "patch": "@@ -1,6 +1,6 @@\n // Wrapper of C-language FILE struct -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -54,7 +54,7 @@ namespace std\n   // and detailed description of the whole object-layout,\n   // vtable-swapping, sordid history of this hack.\n   template<typename _CharT>\n-    struct __basic_file_base: public __c_file_type\n+    struct __basic_file_base: public __c_file\n     {\n       virtual \n       ~__basic_file_base() { };\n@@ -123,7 +123,7 @@ namespace std\n     class __basic_file: public __basic_file_base<_CharT>\n     {\n # ifdef _GLIBCPP_USE_WCHAR_T\n-      __c_wfile_type\t_M_wfile;\n+      __c_wfile\t_M_wfile;\n # endif\n \n     public:\n@@ -140,11 +140,14 @@ namespace std\n       // Used for opening the standard streams, cin, cout, cerr, clog,\n       // and their wide-stream equivalents. Instead of calling open, it\n       // just sets\n-      //  - for libio:  __c_file_type->_fileno and the respective _flags bits\n+      //  - for libio:  __c_file->_fileno and the respective _flags bits\n       //  - for stdio:  _M_cfile = __file and some internal flags\n       // and returns.\n       __basic_file*\n-      sys_open(__c_file_type* __file, ios_base::openmode __mode);\n+      sys_open(__c_file* __file, ios_base::openmode __mode);\n+\n+      __basic_file*\n+      sys_open(int __fd, ios_base::openmode __mode, bool __del);\n \n       _CharT\n       sys_getc();\n@@ -156,7 +159,7 @@ namespace std\n       close(); \n \n       bool \n-      is_open();\n+      is_open() const;\n \n       int \n       fd();\n@@ -180,26 +183,26 @@ namespace std\n       virtual int \n       pbackfail(int __c);\n \n-      // A complex \"write\" function that sets all of __c_file_type's\n+      // A complex \"write\" function that sets all of __c_file's\n       // pointers and associated data members correctly and manages its\n       // relation to the external byte sequence.\n       virtual streamsize \n       xsputn(const _CharT* __s, streamsize __n);\n \n-      // A complex \"read\" function that sets all of __c_file_type's\n+      // A complex \"read\" function that sets all of __c_file's\n       // pointers and associated data members correctly and manages its\n       // relation to the external byte sequence.\n       virtual streamsize \n       xsgetn(_CharT* __s, streamsize __n);\n \n-      // A complex \"seekoff\" function that sets all of __c_file_type's\n+      // A complex \"seekoff\" function that sets all of __c_file's\n       // pointers and associated data members correctly and manages its\n       // relation to the external byte sequence.\n       virtual streamoff\n       seekoff(streamoff __off, ios_base::seekdir __way,\n \t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n \n-      // A complex \"seekpos\" function that sets all of __c_file_type's\n+      // A complex \"seekpos\" function that sets all of __c_file's\n       // pointers and associated data members correctly and manages its\n       // relation to the external byte sequence.\n       virtual streamoff\n@@ -217,19 +220,19 @@ namespace std\n \n       // A simple read function for the external byte sequence, that\n       // does no mucking around with or setting of the pointers or flags\n-      // in __c_file_type.\n+      // in __c_file.\n       virtual streamsize \n       sys_read(_CharT* __s, streamsize __n);\n \n       // A simple write function for the external byte sequence, that\n       // does no mucking around with or setting of the pointers or flags\n-      // in __c_file_type.\n+      // in __c_file.\n       virtual streamsize \n       sys_write(const _CharT* __s, streamsize __n);\n \n       // A simple seek function for the external byte sequence, that\n       // does no mucking around with or setting of the pointers or flags\n-      // in __c_file_type.\n+      // in __c_file.\n       virtual streamoff\n       sys_seek(streamoff __off, ios_base::seekdir __way);\n \n@@ -394,7 +397,7 @@ namespace std\n   \n   template<typename _CharT>\n     __basic_file<_CharT>*\n-    __basic_file<_CharT>::sys_open(__c_file_type* __f, \n+    __basic_file<_CharT>::sys_open(__c_file* __f, \n \t\t\t\t   ios_base::openmode __mode) \n     {\n       __basic_file* __ret = NULL;\n@@ -418,6 +421,33 @@ namespace std\n       return __ret;\n     }\n   \n+  template<typename _CharT>\n+  __basic_file<_CharT>*\n+  __basic_file<_CharT>::sys_open(int __fd, ios_base::openmode __mode, \n+\t\t\t       bool __del) \n+  {\n+    __basic_file* __ret = NULL;\n+    int __p_mode = 0;\n+    int __rw_mode = 0;\n+    char __c_mode[4];\n+\n+#if 0    \n+#error copy from basic_file_stdio.h will make no sense\n+    _M_open_mode(__mode, __p_mode, __rw_mode, __c_mode);\n+    if (!this->is_open() && (_M_cfile = fdopen(__fd, __c_mode)))\n+      {\n+\t// Iff __del is true, then close will fclose the fd.\n+\t_M_cfile_created = __del;\n+\n+\tif (__fd == 0)\n+\t  setvbuf(_M_cfile, reinterpret_cast<char*>(NULL), _IONBF, 0);\n+\n+\t__ret = this;\n+      }\n+#endif\n+    return __ret;\n+  }\n+\n   template<typename _CharT>\n     __basic_file<_CharT>* \n     __basic_file<_CharT>::open(const char* __name, ios_base::openmode __mode, \n@@ -431,7 +461,7 @@ namespace std\n       _M_open_mode(__mode, __p_mode, __rw_mode, __c_mode);\n       if (!_IO_file_is_open(this))\n \t{\n-\t  __c_file_type* __f;\n+\t  __c_file* __f;\n \t  __f = _IO_file_open(this, __name, __p_mode, __prot, __rw_mode, 0);\n \t  __ret = __f ? this: NULL;\n \t}\n@@ -440,7 +470,7 @@ namespace std\n   \n   template<typename _CharT>\n     bool \n-    __basic_file<_CharT>::is_open() { return _fileno >= 0; }\n+    __basic_file<_CharT>::is_open() const { return _fileno >= 0; }\n   \n   template<typename _CharT>\n     __basic_file<_CharT>* "}, {"sha": "81c87315c2da49bf30181bef4bbd44f02b37a4e1", "filename": "libstdc++-v3/config/io/c_io_libio.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_libio.h?ref=6eeabb09a66d8c47f387da7882f86780da50cdd8", "patch": "@@ -1,6 +1,6 @@\n // underlying io library  -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -55,8 +55,8 @@ namespace std\n #endif\n \n // from basic_file.h\n-  typedef _IO_FILE \t__c_file_type;\n-  typedef _IO_wide_data __c_wfile_type;\n+  typedef _IO_FILE \t__c_file;\n+  typedef _IO_wide_data __c_wfile;\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   extern \"C\" _IO_codecvt __c_libio_codecvt;"}, {"sha": "3f56290a05438157bf1e5a8e5f5f7f434504c6e5", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=6eeabb09a66d8c47f387da7882f86780da50cdd8", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation"}, {"sha": "903ca8d8ae60e180dd0d36214cd1fd9a30010fcc", "filename": "libstdc++-v3/libio/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.am?ref=6eeabb09a66d8c47f387da7882f86780da50cdd8", "patch": "@@ -45,7 +45,7 @@ libio_headers = \\\n \n if GLIBCPP_NEED_LIBIO\n LIBIO_SRCS = \\\n-\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \\\n+\tfiledoalloc.c genops.c fileops.c stdfiles.c \\\n \tiofclose.c iofopen.c \n else\n LIBIO_SRCS ="}, {"sha": "4dd5b80f3890cec95303dd5202565717ce158efc", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=6eeabb09a66d8c47f387da7882f86780da50cdd8", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -161,7 +161,7 @@ libio_headers = \\\n         libio.h libioP.h iolibio.h\n \n @GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n-@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \\\n+@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c \\\n @GLIBCPP_NEED_LIBIO_TRUE@\tiofclose.c iofopen.c \n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n @GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n@@ -184,31 +184,29 @@ LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n libio_la_LDFLAGS = \n libio_la_LIBADD = \n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@libio_la_OBJECTS =  \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@filedoalloc.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@genops.lo fileops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@stdfiles.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@c_codecvt.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@iofclose.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@iofopen.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@wfiledoalloc.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@wfileops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@wgenops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@iofwide.lo\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@libio_la_OBJECTS =  \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@wfiledoalloc.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@wfileops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@wgenops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@iofwide.lo\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@libio_la_OBJECTS =  \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@filedoalloc.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@genops.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@fileops.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@stdfiles.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@c_codecvt.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@iofclose.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@iofopen.lo\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@libio_la_OBJECTS = \n+@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_WLIBIO_FALSE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_WLIBIO_FALSE@filedoalloc.lo \\\n+@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_WLIBIO_FALSE@genops.lo \\\n+@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_WLIBIO_FALSE@fileops.lo \\\n+@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_WLIBIO_FALSE@stdfiles.lo \\\n+@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_WLIBIO_FALSE@iofclose.lo \\\n+@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_WLIBIO_FALSE@iofopen.lo\n+@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_WLIBIO_TRUE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_WLIBIO_TRUE@filedoalloc.lo \\\n+@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_WLIBIO_TRUE@genops.lo fileops.lo \\\n+@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_WLIBIO_TRUE@stdfiles.lo \\\n+@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_WLIBIO_TRUE@iofclose.lo \\\n+@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_WLIBIO_TRUE@iofopen.lo \\\n+@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_WLIBIO_TRUE@wfiledoalloc.lo \\\n+@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_WLIBIO_TRUE@wfileops.lo \\\n+@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_WLIBIO_TRUE@wgenops.lo \\\n+@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_WLIBIO_TRUE@iofwide.lo\n+@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_WLIBIO_TRUE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_WLIBIO_TRUE@wfiledoalloc.lo \\\n+@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_WLIBIO_TRUE@wfileops.lo \\\n+@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_WLIBIO_TRUE@wgenops.lo \\\n+@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_WLIBIO_TRUE@iofwide.lo\n+@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_WLIBIO_FALSE@libio_la_OBJECTS = \n CFLAGS = @CFLAGS@\n COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)"}, {"sha": "658627dd8c277e5c43ef8533c2aa3682b7354ed5", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=6eeabb09a66d8c47f387da7882f86780da50cdd8", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation"}, {"sha": "0f02a9870567f08d2cb04f8839d1c260b0ca499d", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=6eeabb09a66d8c47f387da7882f86780da50cdd8", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation"}, {"sha": "a97c28b9c855d10b7e5bdeaf733d214de264da72", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=6eeabb09a66d8c47f387da7882f86780da50cdd8", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation"}, {"sha": "168c55310e1e8e0567a04f5a14ba1af488e590b9", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 68, "deletions": 14, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=6eeabb09a66d8c47f387da7882f86780da50cdd8", "patch": "@@ -146,7 +146,7 @@ glibcpp_builddir = @glibcpp_builddir@\n toolexecdir = @glibcpp_toolexecdir@\n toolexeclibdir = @glibcpp_toolexeclibdir@\n toolexeclib_LTLIBRARIES = libstdc++.la\n-@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@version_arg = -Wl,--version-script=libstdc++-symbol.ver\n+@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@version_arg = @GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@-Wl,--version-script=libstdc++-symbol.ver\n @GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE@version_arg = \n \n # Compile flags that should be constant throughout the build, both for\n@@ -155,11 +155,13 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n \n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n-CONFIG_CXXFLAGS =  \t@SECTION_FLAGS@ @EXTRA_CXX_FLAGS@\n+CONFIG_CXXFLAGS = \\\n+\t@SECTION_FLAGS@ @EXTRA_CXX_FLAGS@\n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -169,33 +171,78 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t$(GLIBCPP_INCLUDES) \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t$(GLIBCPP_INCLUDES) \\\n+\t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n+\t$(TOPLEVEL_INCLUDES)\n \n \n # Source files linked in via configuration/make substitution for a\n # particular target.\n-target_sources =  \tcodecvt_members.cc \tcollate_members.cc \tctype_members.cc \tmessages_members.cc \tmonetary_members.cc \tnumeric_members.cc \ttime_members.cc\n+target_sources = \\\n+\tcodecvt_members.cc \\\n+\tcollate_members.cc \\\n+\tctype_members.cc \\\n+\tmessages_members.cc \\\n+\tmonetary_members.cc \\\n+\tnumeric_members.cc \\\n+\ttime_members.cc\n \n \n # Source files linked in via configuration/make substitution for a\n # particular target, but with ad hoc naming rules.\n-target_sources_extra =  \tbasic_file.cc \tc++locale.cc \n+target_sources_extra = \\\n+\tbasic_file.cc \\\n+\tc++locale.cc \n \n \n # Sources present in the src directory.\n-sources =  \tcodecvt.cc \tcomplex_io.cc \tconcept-inst.cc \tctype.cc \text-inst.cc \tfstream.cc \tfstream-inst.cc \tfunctexcept.cc \tglobals.cc \tio-inst.cc \tios.cc \tistream-inst.cc \tlimits.cc \tlocale.cc \tlocale-inst.cc \tlocalename.cc \tmisc-inst.cc \tostream-inst.cc \tsstream-inst.cc \tstdexcept.cc \tstl-inst.cc \tstreambuf-inst.cc \tstring-inst.cc \tstrstream.cc \tvalarray-inst.cc \twstring-inst.cc \t${target_sources} \t${target_sources_extra}\n+sources = \\\n+\tcodecvt.cc \\\n+\tcomplex_io.cc \\\n+\tconcept-inst.cc \\\n+\tctype.cc \\\n+\text-inst.cc \\\n+\tfstream.cc \\\n+\tfstream-inst.cc \\\n+\tfunctexcept.cc \\\n+\tglobals.cc \\\n+\tio-inst.cc \\\n+\tios.cc \\\n+\tistream-inst.cc \\\n+\tlimits.cc \\\n+\tlocale.cc \\\n+\tlocale-inst.cc \\\n+\tlocalename.cc \\\n+\tmisc-inst.cc \\\n+\tostream-inst.cc \\\n+\tsstream-inst.cc \\\n+\tstdexcept.cc \\\n+\tstl-inst.cc \\\n+\tstreambuf-inst.cc \\\n+\tstring-inst.cc \\\n+\tstrstream.cc \\\n+\tvalarray-inst.cc \\\n+\twstring-inst.cc \\\n+\t${target_sources} \\\n+\t${target_sources_extra}\n \n \n VPATH = $(top_srcdir)/src:$(top_srcdir)\n \n libstdc___la_SOURCES = $(sources)\n \n-libstdc___la_LIBADD =  \t$(top_builddir)/libmath/libmath.la @libio_la@ \t$(top_builddir)/libsupc++/libsupc++convenience.la\n+libstdc___la_LIBADD = \\\n+\t$(top_builddir)/libmath/libmath.la @libio_la@ \\\n+\t$(top_builddir)/libsupc++/libsupc++convenience.la\n \n \n libstdc___la_DEPENDENCIES = libstdc++-symbol.ver $(libstdc___la_LIBADD)\n \n-libstdc___la_LDFLAGS =  \t-version-info @libtool_VERSION@ ${version_arg} \t-lm @LIBUNWIND_FLAG@ \n+libstdc___la_LDFLAGS = \\\n+\t-version-info @libtool_VERSION@ ${version_arg} \\\n+\t-lm @LIBUNWIND_FLAG@ \n \n \n # Use special rules for the deprecated source files so that they find\n@@ -207,7 +254,12 @@ GLIBCPP_INCLUDE_DIR = @glibcpp_builddir@/include\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. \n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS)  \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS)  \n \n \n # libstdc++ libtool notes\n@@ -228,7 +280,8 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -237,7 +290,8 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \\\n+\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n \n debugdir = debug\n@@ -267,7 +321,7 @@ DIST_COMMON =  Makefile.am Makefile.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n SOURCES = $(libstdc___la_SOURCES)\n OBJECTS = $(libstdc___la_OBJECTS)\n@@ -379,7 +433,7 @@ TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)\n \t  awk '    { files[$$0] = 1; } \\\n \t       END { for (i in files) print i; }'`; \\\n \ttest -z \"$(ETAGS_ARGS)$$unique$(LISP)$$tags\" \\\n-\t  || (cd $(srcdir) && etags -o $$here/TAGS $(ETAGS_ARGS) $$tags  $$unique $(LISP))\n+\t  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)\n \n mostlyclean-tags:\n "}, {"sha": "21e416b42095845e1c4b8141e232fbf24ef9e5d4", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeabb09a66d8c47f387da7882f86780da50cdd8/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=6eeabb09a66d8c47f387da7882f86780da50cdd8", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation"}]}