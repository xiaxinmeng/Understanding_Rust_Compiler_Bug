{"sha": "9a91a21f2a05da796a1b0f3a04bbb9f1834698bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE5MWEyMWYyYTA1ZGE3OTZhMWIwZjNhMDRiYmI5ZjE4MzQ2OThiZg==", "commit": {"author": {"name": "Adrian Straetling", "email": "straetling@de.ibm.com", "date": "2005-05-09T17:18:00Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-05-09T17:18:00Z"}, "message": "s390.md: (\"DSI\", \"SCOND\"): New mode macros.\n\n2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n\n\t* config/s390/s390.md: (\"DSI\", \"SCOND\"): New mode\n\tmacros.\n\t(\"E\", \"g\"): New mode attributes.\n\t(\"*adddi3_alc_cc\", \"*addsi3_alc_cc\"): Merge.\n\t(\"*adddi3_alc\", \"*addsi3_alc\"): Merge.\n\t(\"*subdi3_slb_cc\", \"*subsi3_slb_cc\"): Merge.\n\t(\"*subdi3_slb\", \"*subsi3_slb\"): Merge.\n\t(\"adddicc\", \"addsicc\"): Merge.\n\t(\"*sconddi\", \"*scondsi\"): Merge.\n\t(\"*sconddi_neg\", \"*scondsi_neg\"): Merge.\n\t(\"sltu\", \"sgtu\", \"sleu\", \"sgeu\"): Merge.\n\t(\"negdi2\", \"negsi2\"): Extract expander pattern from\n\t\"negsi2\" and merge with \"negdi2\".\n\t(\"*negdi2\"): Merge with instruction pattern of \"negsi2\".\n\t(\"*negdi2_cc\", \"*negsi2_cc\"): Merge.\n\t(\"*negdi2_cconly\", \"*negsi2_cconly\"): Merge.\n\t(\"rotldi3\", \"rotlsi3\"): Merge.\n\nFrom-SVN: r99454", "tree": {"sha": "a1bf2d1f4b8ca3d8045113b13c83e704882deae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1bf2d1f4b8ca3d8045113b13c83e704882deae7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a91a21f2a05da796a1b0f3a04bbb9f1834698bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a91a21f2a05da796a1b0f3a04bbb9f1834698bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a91a21f2a05da796a1b0f3a04bbb9f1834698bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a91a21f2a05da796a1b0f3a04bbb9f1834698bf/comments", "author": null, "committer": null, "parents": [{"sha": "f6ee577c077d4ebbff25b653b86f59bdbd3a134d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ee577c077d4ebbff25b653b86f59bdbd3a134d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6ee577c077d4ebbff25b653b86f59bdbd3a134d"}], "stats": {"total": 475, "additions": 145, "deletions": 330}, "files": [{"sha": "319c022071834664e0eb144e92b827c437e57546", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a91a21f2a05da796a1b0f3a04bbb9f1834698bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a91a21f2a05da796a1b0f3a04bbb9f1834698bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a91a21f2a05da796a1b0f3a04bbb9f1834698bf", "patch": "@@ -1,3 +1,23 @@\n+2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n+\n+\t* config/s390/s390.md: (\"DSI\", \"SCOND\"): New mode \n+\tmacros.\n+\t(\"E\", \"g\"): New mode attributes.\n+\t(\"*adddi3_alc_cc\", \"*addsi3_alc_cc\"): Merge.\n+\t(\"*adddi3_alc\", \"*addsi3_alc\"): Merge.\n+\t(\"*subdi3_slb_cc\", \"*subsi3_slb_cc\"): Merge.\n+\t(\"*subdi3_slb\", \"*subsi3_slb\"): Merge.\n+\t(\"adddicc\", \"addsicc\"): Merge.\n+\t(\"*sconddi\", \"*scondsi\"): Merge.\n+\t(\"*sconddi_neg\", \"*scondsi_neg\"): Merge.\n+\t(\"sltu\", \"sgtu\", \"sleu\", \"sgeu\"): Merge.\n+\t(\"negdi2\", \"negsi2\"): Extract expander pattern from\n+\t\"negsi2\" and merge with \"negdi2\".\n+\t(\"*negdi2\"): Merge with instruction pattern of \"negsi2\".\n+\t(\"*negdi2_cc\", \"*negsi2_cc\"): Merge.\n+\t(\"*negdi2_cconly\", \"*negsi2_cconly\"): Merge.\n+\t(\"rotldi3\", \"rotlsi3\"): Merge.\n+\n 2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n \n \t* config/s390/s390.md: (\"hc\"): New mode attribute."}, {"sha": "65577215645459fbd9c5065e25c268463c3e83da", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 125, "deletions": 330, "changes": 455, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a91a21f2a05da796a1b0f3a04bbb9f1834698bf/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a91a21f2a05da796a1b0f3a04bbb9f1834698bf/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=9a91a21f2a05da796a1b0f3a04bbb9f1834698bf", "patch": "@@ -235,9 +235,10 @@\n \n ;; Macros\n \n-;; This mode macro allows 31-bit and 64-bit GPR patterns to be generated\n+;; These mode macros allow 31-bit and 64-bit GPR patterns to be generated\n ;; from the same template.\n (define_mode_macro GPR [(DI \"TARGET_64BIT\") SI])\n+(define_mode_macro DSI [DI SI])\n \n ;; This mode macro allows :P to be used for patterns that operate on\n ;; pointer-sized quantities.  Exactly one of the two alternatives will match.\n@@ -255,6 +256,17 @@\n (define_code_macro COMPARE [eq ne gt gtu lt ltu ge geu le leu unordered \n \t\t            ordered uneq unlt ungt unle unge ltgt])\n \n+;; This macro allows to unify all 'sCOND' patterns.\n+(define_code_macro SCOND [ltu gtu leu geu])\n+\n+\n+;; This attribute handles differences in the instruction 'type' and will result\n+;; in \"RRE\" for DImode and \"RR\" for SImode.\n+(define_mode_attr E [(DI \"E\") (SI \"\")])\n+\n+;; In GPR templates, a string like \"lc<g>r\" will expand to \"lcgr\" in DImode\n+;; and \"lcr\" in SImode.\n+(define_mode_attr g [(DI \"g\") (SI \"\")])\n \n ;; ICM mask required to load MODE value into the highest subreg\n ;; of a SImode register.\n@@ -4091,137 +4103,68 @@\n ;;\n \n ;\n-; adddicc instruction pattern(s).\n+; add(di|si)cc instruction pattern(s).\n ;\n \n-(define_insn \"*adddi3_alc_cc\"\n+(define_insn \"*add<mode>3_alc_cc\"\n   [(set (reg 33)\n         (compare\n-          (plus:DI (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n-                            (match_operand:DI 2 \"general_operand\" \"d,m\"))\n-                   (match_operand:DI 3 \"s390_alc_comparison\" \"\"))\n+          (plus:GPR (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,0\")\n+                              (match_operand:GPR 2 \"general_operand\" \"d,m\"))\n+                    (match_operand:GPR 3 \"s390_alc_comparison\" \"\"))\n           (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (plus:DI (plus:DI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"s390_match_ccmode (insn, CCLmode) && TARGET_64BIT\"\n-  \"@\n-   alcgr\\t%0,%2\n-   alcg\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n-\n-(define_insn \"*adddi3_alc\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (plus:DI (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n-                          (match_operand:DI 2 \"general_operand\" \"d,m\"))\n-                 (match_operand:DI 3 \"s390_alc_comparison\" \"\")))\n-   (clobber (reg:CC 33))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   alcgr\\t%0,%2\n-   alcg\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n-\n-(define_insn \"*subdi3_slb_cc\"\n-  [(set (reg 33)\n-        (compare\n-          (minus:DI (minus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,0\")\n-                              (match_operand:DI 2 \"general_operand\" \"d,m\"))\n-                    (match_operand:DI 3 \"s390_slb_comparison\" \"\"))\n-          (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (minus:DI (minus:DI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"s390_match_ccmode (insn, CCLmode) && TARGET_64BIT\"\n-  \"@\n-   slbgr\\t%0,%2\n-   slbg\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n-\n-(define_insn \"*subdi3_slb\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (minus:DI (minus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,0\")\n-                            (match_operand:DI 2 \"general_operand\" \"d,m\"))\n-                  (match_operand:DI 3 \"s390_slb_comparison\" \"\")))\n-   (clobber (reg:CC 33))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   slbgr\\t%0,%2\n-   slbg\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n-\n-(define_expand \"adddicc\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand 1 \"comparison_operator\" \"\")\n-   (match_operand:DI 2 \"register_operand\" \"\")\n-   (match_operand:DI 3 \"const_int_operand\" \"\")]\n-  \"TARGET_64BIT\"\n-  \"if (!s390_expand_addcc (GET_CODE (operands[1]), \n-\t\t\t   s390_compare_op0, s390_compare_op1, \n-\t\t\t   operands[0], operands[2], \n-\t\t\t   operands[3])) FAIL; DONE;\")\n-\n-;\n-; addsicc instruction pattern(s).\n-;\n-\n-(define_insn \"*addsi3_alc_cc\"\n-  [(set (reg 33)\n-        (compare\n-          (plus:SI (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n-                            (match_operand:SI 2 \"general_operand\" \"d,m\"))\n-                   (match_operand:SI 3 \"s390_alc_comparison\" \"\"))\n-          (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (plus:SI (plus:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n+   (set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n+        (plus:GPR (plus:GPR (match_dup 1) (match_dup 2)) (match_dup 3)))]\n   \"s390_match_ccmode (insn, CCLmode) && TARGET_CPU_ZARCH\"\n   \"@\n-   alcr\\t%0,%2\n-   alc\\t%0,%2\"\n+   alc<g>r\\t%0,%2\n+   alc<g>\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RRE,RXY\")])\n \n-(define_insn \"*addsi3_alc\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (plus:SI (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n-                          (match_operand:SI 2 \"general_operand\" \"d,m\"))\n-                 (match_operand:SI 3 \"s390_alc_comparison\" \"\")))\n+(define_insn \"*add<mode>3_alc\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n+        (plus:GPR (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,0\")\n+                            (match_operand:GPR 2 \"general_operand\" \"d,m\"))\n+                  (match_operand:GPR 3 \"s390_alc_comparison\" \"\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_CPU_ZARCH\"\n   \"@\n-   alcr\\t%0,%2\n-   alc\\t%0,%2\"\n+   alc<g>r\\t%0,%2\n+   alc<g>\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RRE,RXY\")])\n \n-(define_insn \"*subsi3_slb_cc\"\n+(define_insn \"*sub<mode>3_slb_cc\"\n   [(set (reg 33)\n         (compare\n-          (minus:SI (minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n-                              (match_operand:SI 2 \"general_operand\" \"d,m\"))\n-                    (match_operand:SI 3 \"s390_slb_comparison\" \"\"))\n+          (minus:GPR (minus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"0,0\")\n+                                (match_operand:GPR 2 \"general_operand\" \"d,m\"))\n+                     (match_operand:GPR 3 \"s390_slb_comparison\" \"\"))\n           (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (minus:SI (minus:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n+   (set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n+        (minus:GPR (minus:GPR (match_dup 1) (match_dup 2)) (match_dup 3)))]\n   \"s390_match_ccmode (insn, CCLmode) && TARGET_CPU_ZARCH\"\n   \"@\n-   slbr\\t%0,%2\n-   slb\\t%0,%2\"\n+   slb<g>r\\t%0,%2\n+   slb<g>\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RRE,RXY\")])\n \n-(define_insn \"*subsi3_slb\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (minus:SI (minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n-                            (match_operand:SI 2 \"general_operand\" \"d,m\"))\n-                  (match_operand:SI 3 \"s390_slb_comparison\" \"\")))\n+(define_insn \"*sub<mode>3_slb\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n+        (minus:GPR (minus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"0,0\")\n+                              (match_operand:GPR 2 \"general_operand\" \"d,m\"))\n+                   (match_operand:GPR 3 \"s390_slb_comparison\" \"\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_CPU_ZARCH\"\n   \"@\n-   slbr\\t%0,%2\n-   slb\\t%0,%2\"\n+   slb<g>r\\t%0,%2\n+   slb<g>\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RRE,RXY\")])\n \n-(define_expand \"addsicc\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\n+(define_expand \"add<mode>cc\"\n+  [(match_operand:GPR 0 \"register_operand\" \"\")\n    (match_operand 1 \"comparison_operator\" \"\")\n-   (match_operand:SI 2 \"register_operand\" \"\")\n-   (match_operand:SI 3 \"const_int_operand\" \"\")]\n+   (match_operand:GPR 2 \"register_operand\" \"\")\n+   (match_operand:GPR 3 \"const_int_operand\" \"\")]\n   \"TARGET_CPU_ZARCH\"\n   \"if (!s390_expand_addcc (GET_CODE (operands[1]), \n \t\t\t   s390_compare_op0, s390_compare_op1, \n@@ -4232,90 +4175,44 @@\n ; scond instruction pattern(s).\n ;\n \n-(define_insn_and_split \"*sconddi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&d\")\n-        (match_operand:DI 1 \"s390_alc_comparison\" \"\"))\n-   (clobber (reg:CC 33))]\n-  \"TARGET_64BIT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0) (const_int 0))\n-   (parallel\n-    [(set (match_dup 0) (plus:DI (plus:DI (match_dup 0) (match_dup 0))\n-                                 (match_dup 1)))\n-     (clobber (reg:CC 33))])]\n-  \"\")\n-\n-(define_insn_and_split \"*scondsi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n-        (match_operand:SI 1 \"s390_alc_comparison\" \"\"))\n+(define_insn_and_split \"*scond<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d\")\n+        (match_operand:GPR 1 \"s390_alc_comparison\" \"\"))\n    (clobber (reg:CC 33))]\n   \"TARGET_CPU_ZARCH\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0) (const_int 0))\n    (parallel\n-    [(set (match_dup 0) (plus:SI (plus:SI (match_dup 0) (match_dup 0))\n-                                 (match_dup 1)))\n-     (clobber (reg:CC 33))])]\n-  \"\")\n-\n-(define_insn_and_split \"*sconddi_neg\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&d\")\n-        (match_operand:DI 1 \"s390_slb_comparison\" \"\"))\n-   (clobber (reg:CC 33))]\n-  \"TARGET_64BIT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0) (const_int 0))\n-   (parallel\n-    [(set (match_dup 0) (minus:DI (minus:DI (match_dup 0) (match_dup 0))\n+    [(set (match_dup 0) (plus:GPR (plus:GPR (match_dup 0) (match_dup 0))\n                                   (match_dup 1)))\n-     (clobber (reg:CC 33))])\n-   (parallel\n-    [(set (match_dup 0) (neg:DI (match_dup 0)))\n      (clobber (reg:CC 33))])]\n   \"\")\n \n-(define_insn_and_split \"*scondsi_neg\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n-        (match_operand:SI 1 \"s390_slb_comparison\" \"\"))\n+(define_insn_and_split \"*scond<mode>_neg\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d\")\n+        (match_operand:GPR 1 \"s390_slb_comparison\" \"\"))\n    (clobber (reg:CC 33))]\n   \"TARGET_CPU_ZARCH\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0) (const_int 0))\n    (parallel\n-    [(set (match_dup 0) (minus:SI (minus:SI (match_dup 0) (match_dup 0))\n-                                  (match_dup 1)))\n+    [(set (match_dup 0) (minus:GPR (minus:GPR (match_dup 0) (match_dup 0))\n+                                   (match_dup 1)))\n      (clobber (reg:CC 33))])\n    (parallel\n-    [(set (match_dup 0) (neg:SI (match_dup 0)))\n+    [(set (match_dup 0) (neg:GPR (match_dup 0)))\n      (clobber (reg:CC 33))])]\n   \"\")\n \n-(define_expand \"sltu\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")]\n-  \"TARGET_CPU_ZARCH\"\n-  \"if (!s390_expand_addcc (LTU, s390_compare_op0, s390_compare_op1,\n-\t\t\t   operands[0], const0_rtx, const1_rtx)) FAIL; DONE;\")\n-\n-(define_expand \"sgtu\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")]\n-  \"TARGET_CPU_ZARCH\"\n-  \"if (!s390_expand_addcc (GTU, s390_compare_op0, s390_compare_op1,\n-\t\t\t   operands[0], const0_rtx, const1_rtx)) FAIL; DONE;\")\n-\n-(define_expand \"sleu\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")]\n-  \"TARGET_CPU_ZARCH\"\n-  \"if (!s390_expand_addcc (LEU, s390_compare_op0, s390_compare_op1,\n-\t\t\t   operands[0], const0_rtx, const1_rtx)) FAIL; DONE;\")\n \n-(define_expand \"sgeu\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")]\n+(define_expand \"s<code>\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(SCOND (match_dup 0)\n+\t       (match_dup 0)))]\n   \"TARGET_CPU_ZARCH\"\n-  \"if (!s390_expand_addcc (GEU, s390_compare_op0, s390_compare_op1,\n+  \"if (!s390_expand_addcc (<CODE>, s390_compare_op0, s390_compare_op1,\n \t\t\t   operands[0], const0_rtx, const1_rtx)) FAIL; DONE;\")\n \n \n@@ -5897,13 +5794,13 @@\n ;;\n \n ;\n-; negdi2 instruction pattern(s).\n+; neg(di|si)2 instruction pattern(s).\n ;\n \n-(define_expand \"negdi2\"\n+(define_expand \"neg<mode>2\"\n   [(parallel\n-    [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-          (neg:DI (match_operand:DI 1 \"register_operand\" \"d\")))\n+    [(set (match_operand:DSI 0 \"register_operand\" \"=d\")\n+          (neg:DSI (match_operand:DSI 1 \"register_operand\" \"d\")))\n      (clobber (reg:CC 33))])]\n   \"\"\n   \"\")\n@@ -5928,32 +5825,32 @@\n   \"lcgfr\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")])\n \n-(define_insn \"*negdi2_cc\"\n+(define_insn \"*neg<mode>2_cc\"\n   [(set (reg 33)\n-        (compare (neg:DI (match_operand:DI 1 \"register_operand\" \"d\"))\n+        (compare (neg:GPR (match_operand:GPR 1 \"register_operand\" \"d\"))\n                  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (neg:DI (match_dup 1)))]\n-  \"TARGET_64BIT && s390_match_ccmode (insn, CCAmode)\"\n-  \"lcgr\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RRE\")])\n+   (set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (neg:GPR (match_dup 1)))]\n+  \"s390_match_ccmode (insn, CCAmode)\"\n+  \"lc<g>r\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RR<E>\")])\n   \n-(define_insn \"*negdi2_cconly\"\n+(define_insn \"*neg<mode>2_cconly\"\n   [(set (reg 33)\n-        (compare (neg:DI (match_operand:DI 1 \"register_operand\" \"d\"))\n+        (compare (neg:GPR (match_operand:GPR 1 \"register_operand\" \"d\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:DI 0 \"=d\"))]\n-  \"TARGET_64BIT && s390_match_ccmode (insn, CCAmode)\"\n-  \"lcgr\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RRE\")])\n+   (clobber (match_scratch:GPR 0 \"=d\"))]\n+  \"s390_match_ccmode (insn, CCAmode)\"\n+  \"lc<g>r\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RR<E>\")])\n   \n-(define_insn \"*negdi2_64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (neg:DI (match_operand:DI 1 \"register_operand\" \"d\")))\n+(define_insn \"*neg<mode>2\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (neg:GPR (match_operand:GPR 1 \"register_operand\" \"d\")))\n    (clobber (reg:CC 33))]\n-  \"TARGET_64BIT\"\n-  \"lcgr\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RRE\")])\n+  \"\"\n+  \"lc<g>r\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RR<E>\")])\n \n (define_insn_and_split \"*negdi2_31\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n@@ -5983,37 +5880,6 @@\n    operands[5] = operand_subword (operands[1], 1, 0, DImode);\n    operands[6] = gen_label_rtx ();\")\n \n-;\n-; negsi2 instruction pattern(s).\n-;\n-\n-(define_insn \"*negsi2_cc\"\n-  [(set (reg 33)\n-        (compare (neg:SI (match_operand:SI 1 \"register_operand\" \"d\"))\n-                 (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (neg:SI (match_dup 1)))]\n-  \"s390_match_ccmode (insn, CCAmode)\"\n-  \"lcr\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR\")])\n-  \n-(define_insn \"*negsi2_cconly\"\n-  [(set (reg 33)\n-        (compare (neg:SI (match_operand:SI 1 \"register_operand\" \"d\"))\n-                 (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=d\"))]\n-  \"s390_match_ccmode (insn, CCAmode)\"\n-  \"lcr\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR\")])\n-  \n-(define_insn \"negsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (neg:SI (match_operand:SI 1 \"register_operand\" \"d\")))\n-   (clobber (reg:CC 33))]\n-  \"\"\n-  \"lcr\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR\")])\n-\n ;\n ; negdf2 instruction pattern(s).\n ;\n@@ -6122,7 +5988,7 @@\n ;;\n \n ;\n-; absdi2 instruction pattern(s).\n+; abs(di|si)2 instruction pattern(s).\n ;\n \n (define_insn \"*absdi2_sign_cc\"\n@@ -6145,63 +6011,32 @@\n   \"lpgfr\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")])\n \n-(define_insn \"*absdi2_cc\"\n-  [(set (reg 33)\n-        (compare (abs:DI (match_operand:DI 1 \"register_operand\" \"d\"))\n-                 (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (abs:DI (match_dup 1)))]\n-  \"TARGET_64BIT && s390_match_ccmode (insn, CCAmode)\"\n-  \"lpgr\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RRE\")])\n-  \n-(define_insn \"*absdi2_cconly\"\n-  [(set (reg 33)\n-        (compare (abs:DI (match_operand:DI 1 \"register_operand\" \"d\"))\n-                 (const_int 0)))\n-   (clobber (match_scratch:DI 0 \"=d\"))]\n-  \"TARGET_64BIT && s390_match_ccmode (insn, CCAmode)\"\n-  \"lpgr\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RRE\")])\n-  \n-(define_insn \"absdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (abs:DI (match_operand:DI 1 \"register_operand\" \"d\")))\n-   (clobber (reg:CC 33))]\n-  \"TARGET_64BIT\"\n-  \"lpgr\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RRE\")])\n-\n-;\n-; abssi2 instruction pattern(s).\n-;\n-\n-(define_insn \"*abssi2_cc\"\n+(define_insn \"*abs<mode>2_cc\"\n   [(set (reg 33)\n-        (compare (abs:SI (match_operand:SI 1 \"register_operand\" \"d\"))\n+        (compare (abs:GPR (match_operand:DI 1 \"register_operand\" \"d\"))\n                  (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (abs:SI (match_dup 1)))]\n+   (set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (abs:GPR (match_dup 1)))]\n   \"s390_match_ccmode (insn, CCAmode)\"\n-  \"lpr\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR\")])\n+  \"lp<g>r\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RR<E>\")])\n   \n-(define_insn \"*abssi2_cconly\"\n+(define_insn \"*abs<mode>2_cconly\"\n   [(set (reg 33)\n-        (compare (abs:SI (match_operand:SI 1 \"register_operand\" \"d\"))\n+        (compare (abs:GPR (match_operand:GPR 1 \"register_operand\" \"d\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=d\"))]\n+   (clobber (match_scratch:GPR 0 \"=d\"))]\n   \"s390_match_ccmode (insn, CCAmode)\"\n-  \"lpr\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR\")])\n+  \"lp<g>r\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RR<E>\")])\n   \n-(define_insn \"abssi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (abs:SI (match_operand:SI 1 \"register_operand\" \"d\")))\n+(define_insn \"abs<mode>2\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (abs:GPR (match_operand:GPR 1 \"register_operand\" \"d\")))\n    (clobber (reg:CC 33))]\n   \"\"\n-  \"lpr\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR\")])\n+  \"lp<g>r\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RR<E>\")])\n \n ;\n ; absdf2 instruction pattern(s).\n@@ -6334,59 +6169,32 @@\n   \"lngfr\\t%0,%1\"\n   [(set_attr \"op_type\" \"RRE\")])\n \n-(define_insn \"*negabsdi2_cc\"\n-  [(set (reg 33)\n-        (compare (neg:DI (abs:DI (match_operand:DI 1 \"register_operand\" \"d\")))\n-                 (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (neg:DI (abs:DI (match_dup 1))))]\n-  \"TARGET_64BIT && s390_match_ccmode (insn, CCAmode)\"\n-  \"lngr\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RRE\")])\n-  \n-(define_insn \"*negabsdi2_cconly\"\n-  [(set (reg 33)\n-        (compare (neg:DI (abs:DI (match_operand:DI 1 \"register_operand\" \"d\")))\n-                 (const_int 0)))\n-   (clobber (match_scratch:DI 0 \"=d\"))]\n-  \"TARGET_64BIT && s390_match_ccmode (insn, CCAmode)\"\n-  \"lngr\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RRE\")])\n-  \n-(define_insn \"*negabsdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(neg:DI (abs:DI (match_operand:DI 1 \"register_operand\" \"d\"))))\n-   (clobber (reg:CC 33))]\n-  \"TARGET_64BIT\"\n-  \"lngr\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RRE\")])\n-\n-(define_insn \"*negabssi2_cc\"\n+(define_insn \"*negabs<mode>2_cc\"\n   [(set (reg 33)\n-        (compare (neg:SI (abs:SI (match_operand:SI 1 \"register_operand\" \"d\")))\n+        (compare (neg:GPR (abs:GPR (match_operand:GPR 1 \"register_operand\" \"d\")))\n                  (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (neg:SI (abs:SI (match_dup 1))))]\n+   (set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (neg:GPR (abs:GPR (match_dup 1))))]\n   \"s390_match_ccmode (insn, CCAmode)\"\n-  \"lnr\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR\")])\n+  \"ln<g>r\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RR<E>\")])\n   \n-(define_insn \"*negabssi2_cconly\"\n+(define_insn \"*negabs<mode>2_cconly\"\n   [(set (reg 33)\n-        (compare (neg:SI (abs:SI (match_operand:SI 1 \"register_operand\" \"d\")))\n+        (compare (neg:GPR (abs:GPR (match_operand:GPR 1 \"register_operand\" \"d\")))\n                  (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=d\"))]\n+   (clobber (match_scratch:GPR 0 \"=d\"))]\n   \"s390_match_ccmode (insn, CCAmode)\"\n-  \"lnr\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR\")])\n+  \"ln<g>r\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RR<E>\")])\n   \n-(define_insn \"*negabssi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(neg:SI (abs:SI (match_operand:SI 1 \"register_operand\" \"d\"))))\n+(define_insn \"*negabs<mode>2\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(neg:GPR (abs:GPR (match_operand:GPR 1 \"register_operand\" \"d\"))))\n    (clobber (reg:CC 33))]\n   \"\"\n-  \"lnr\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RR\")])\n+  \"ln<g>r\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RR<E>\")])\n \n ;\n ; Floating point\n@@ -6507,28 +6315,15 @@\n ;;\n \n ;\n-; rotldi3 instruction pattern(s).\n-;\n-\n-(define_insn \"rotldi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(rotate:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t   (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n-  \"TARGET_64BIT\"\n-  \"rllg\\t%0,%1,%Y2\"\n-  [(set_attr \"op_type\"  \"RSE\")\n-   (set_attr \"atype\"    \"reg\")])\n-\n-;\n-; rotlsi3 instruction pattern(s).\n+; rotl(di|si)3 instruction pattern(s).\n ;\n \n-(define_insn \"rotlsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(rotate:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t   (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n+(define_insn \"rotl<mode>3\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(rotate:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t    (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n   \"TARGET_CPU_ZARCH\"\n-  \"rll\\t%0,%1,%Y2\"\n+  \"rll<g>\\t%0,%1,%Y2\"\n   [(set_attr \"op_type\"  \"RSE\")\n    (set_attr \"atype\"    \"reg\")])\n "}]}