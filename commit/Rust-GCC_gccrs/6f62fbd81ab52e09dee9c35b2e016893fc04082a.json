{"sha": "6f62fbd81ab52e09dee9c35b2e016893fc04082a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY2MmZiZDgxYWI1MmUwOWRlZTljMzViMmUwMTY4OTNmYzA0MDgyYQ==", "commit": {"author": {"name": "Jerry Quinn", "email": "jlquinn@optonline.net", "date": "2003-03-09T04:19:52Z"}, "committer": {"name": "Jerry Quinn", "email": "jlquinn@gcc.gnu.org", "date": "2003-03-09T04:19:52Z"}, "message": "re PR libstdc++/9561 (ostream inserters rethrow exception of wrong type)\n\n2003-03-08  Jerry Quinn  <jlquinn@optonline.net>\n\n\tPR libstdc++/9561\n\t* include/bits/basic_ios.h (_M_setstate): New.\n\t* include/bits/ostream.tcc (operator<<): Use it.\n\t* include/bits/istream.tcc (operator>>): Use it.\n\t* include/std/std_ostream.h (operator<<): Make friends.\n\t* include/std/std_istream.h (operator>>): Make friends.\n\t* testsuite/27_io/ostream_exception.cc,\n\ttestsuite/27_io/istream_exception.cc: New tests.\n\nFrom-SVN: r64021", "tree": {"sha": "f8374771f18cc2f7254a2fc57e9a9f3f757b5c1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8374771f18cc2f7254a2fc57e9a9f3f757b5c1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f62fbd81ab52e09dee9c35b2e016893fc04082a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f62fbd81ab52e09dee9c35b2e016893fc04082a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f62fbd81ab52e09dee9c35b2e016893fc04082a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f62fbd81ab52e09dee9c35b2e016893fc04082a/comments", "author": {"login": "jlquinn", "id": 826841, "node_id": "MDQ6VXNlcjgyNjg0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/826841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlquinn", "html_url": "https://github.com/jlquinn", "followers_url": "https://api.github.com/users/jlquinn/followers", "following_url": "https://api.github.com/users/jlquinn/following{/other_user}", "gists_url": "https://api.github.com/users/jlquinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlquinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlquinn/subscriptions", "organizations_url": "https://api.github.com/users/jlquinn/orgs", "repos_url": "https://api.github.com/users/jlquinn/repos", "events_url": "https://api.github.com/users/jlquinn/events{/privacy}", "received_events_url": "https://api.github.com/users/jlquinn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f4ebda3297c76529829f827ac7b8d17b74d044c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f4ebda3297c76529829f827ac7b8d17b74d044c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f4ebda3297c76529829f827ac7b8d17b74d044c"}], "stats": {"total": 268, "additions": 223, "deletions": 45}, "files": [{"sha": "81ac17ed5d26dfca63b1ffd6cacfc5e7316428f1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f62fbd81ab52e09dee9c35b2e016893fc04082a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f62fbd81ab52e09dee9c35b2e016893fc04082a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6f62fbd81ab52e09dee9c35b2e016893fc04082a", "patch": "@@ -1,3 +1,14 @@\n+2003-03-08  Jerry Quinn  <jlquinn@optonline.net>\n+\n+\tPR libstdc++/9561\n+\t* include/bits/basic_ios.h (_M_setstate): New.\n+\t* include/bits/ostream.tcc (operator<<): Use it.\n+\t* include/bits/istream.tcc (operator>>): Use it.\n+\t* include/std/std_ostream.h (operator<<): Make friends.\n+\t* include/std/std_istream.h (operator>>): Make friends.\n+\t* testsuite/27_io/ostream_exception.cc,\n+\ttestsuite/27_io/istream_exception.cc: New tests.\n+\n 2003-03-08  Benjamin Kosnik  <bkoz@redhat.com>\t\n \n \t* include/bits/locale_facets.tcc: Fix typo."}, {"sha": "03b54b7198be56534223aab598a6d929611833cd", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f62fbd81ab52e09dee9c35b2e016893fc04082a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f62fbd81ab52e09dee9c35b2e016893fc04082a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=6f62fbd81ab52e09dee9c35b2e016893fc04082a", "patch": "@@ -441,6 +441,11 @@ namespace std\n \n       void\n       _M_cache_locale(const locale& __loc);\n+\n+      // Internal state setter that won't throw, only set the state bits.\n+      // Used to guarantee we don't throw when setting badbit.\n+      void\n+      _M_setstate(iostate __state) { _M_streambuf_state |= __state; }\n     };\n } // namespace std\n "}, {"sha": "68295b4c9f3ebbe11507015832fdb2a9bead42e0", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f62fbd81ab52e09dee9c35b2e016893fc04082a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f62fbd81ab52e09dee9c35b2e016893fc04082a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=6f62fbd81ab52e09dee9c35b2e016893fc04082a", "patch": "@@ -122,7 +122,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -159,7 +159,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -186,7 +186,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -223,7 +223,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -250,7 +250,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -277,7 +277,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -304,7 +304,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -332,7 +332,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t      __throw_exception_again;\n \t    }\n@@ -359,7 +359,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -387,7 +387,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -414,7 +414,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -441,7 +441,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -468,7 +468,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -499,7 +499,7 @@ namespace std\n \t     {\n \t       // 27.6.2.5.1 Common requirements.\n \t       // Turn this on without causing an ios::failure to be thrown.\n-\t       this->setstate(ios_base::badbit);\n+\t       this->_M_setstate(ios_base::badbit);\n \t       if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t __throw_exception_again;\n \t     }\n@@ -531,7 +531,7 @@ namespace std\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -565,7 +565,7 @@ namespace std\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -604,7 +604,7 @@ namespace std\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -647,7 +647,7 @@ namespace std\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -698,7 +698,7 @@ namespace std\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -739,7 +739,7 @@ namespace std\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -763,7 +763,7 @@ namespace std\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -790,7 +790,7 @@ namespace std\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -826,7 +826,7 @@ namespace std\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -856,7 +856,7 @@ namespace std\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -887,7 +887,7 @@ namespace std\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -922,7 +922,7 @@ namespace std\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -998,7 +998,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      __in.setstate(ios_base::badbit);\n+\t      __in._M_setstate(ios_base::badbit);\n \t      if ((__in.exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -1055,7 +1055,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      __in.setstate(ios_base::badbit);\n+\t      __in._M_setstate(ios_base::badbit);\n \t      if ((__in.exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }"}, {"sha": "64b37a4882671d80e234db6ecb2187b985663bf5", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f62fbd81ab52e09dee9c35b2e016893fc04082a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f62fbd81ab52e09dee9c35b2e016893fc04082a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=6f62fbd81ab52e09dee9c35b2e016893fc04082a", "patch": "@@ -70,7 +70,7 @@ namespace std\n \t    {\n \t      // 27.6.2.5.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -92,7 +92,7 @@ namespace std\n \t    {\n \t      // 27.6.2.5.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -114,7 +114,7 @@ namespace std\n \t    {\n \t      // 27.6.2.5.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -138,7 +138,7 @@ namespace std\n \t    {\n \t      // 27.6.2.5.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -166,7 +166,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -205,7 +205,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -231,7 +231,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -272,7 +272,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -298,7 +298,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -325,7 +325,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -351,7 +351,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -377,7 +377,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->setstate(ios_base::badbit);\n+\t      this->_M_setstate(ios_base::badbit);\n \t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -499,7 +499,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      __out.setstate(ios_base::badbit);\n+\t      __out._M_setstate(ios_base::badbit);\n \t      if ((__out.exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -535,7 +535,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      __out.setstate(ios_base::badbit);\n+\t      __out._M_setstate(ios_base::badbit);\n \t      if ((__out.exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -570,7 +570,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      __out.setstate(ios_base::badbit);\n+\t      __out._M_setstate(ios_base::badbit);\n \t      if ((__out.exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -619,7 +619,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      __out.setstate(ios_base::badbit);\n+\t      __out._M_setstate(ios_base::badbit);\n \t      if ((__out.exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }\n@@ -658,7 +658,7 @@ namespace std\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n-\t      __out.setstate(ios_base::badbit);\n+\t      __out._M_setstate(ios_base::badbit);\n \t      if ((__out.exceptions() & ios_base::badbit) != 0)\n \t\t__throw_exception_again;\n \t    }"}, {"sha": "fa97f72209399d0ec9b892d96262d4f6b012be77", "filename": "libstdc++-v3/include/std/std_istream.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f62fbd81ab52e09dee9c35b2e016893fc04082a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f62fbd81ab52e09dee9c35b2e016893fc04082a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h?ref=6f62fbd81ab52e09dee9c35b2e016893fc04082a", "patch": "@@ -73,6 +73,14 @@ namespace std\n       typedef num_get<_CharT, __istreambuf_iter>        __numget_type;\n       typedef ctype<_CharT>           \t\t\t__ctype_type;\n \n+      template<typename _CharT2, typename _Traits2>\n+        friend basic_istream<_CharT2, _Traits2>&\n+        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2&);\n+ \n+      template<typename _CharT2, typename _Traits2>\n+        friend basic_istream<_CharT2, _Traits2>&\n+        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);\n+ \n     protected:\n       // Data Members:\n       /**"}, {"sha": "103b3fd729997f33f720d2c10e64fe0a9e6dcaba", "filename": "libstdc++-v3/include/std/std_ostream.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f62fbd81ab52e09dee9c35b2e016893fc04082a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f62fbd81ab52e09dee9c35b2e016893fc04082a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h?ref=6f62fbd81ab52e09dee9c35b2e016893fc04082a", "patch": "@@ -73,6 +73,26 @@ namespace std\n       typedef num_put<_CharT, __ostreambuf_iter>        __numput_type;\n       typedef ctype<_CharT>           \t\t\t__ctype_type;\n \n+      template<typename _CharT2, typename _Traits2>\n+        friend basic_ostream<_CharT2, _Traits2>&\n+        operator<<(basic_ostream<_CharT2, _Traits2>&, _CharT2);\n+ \n+      template<typename _Traits2>\n+        friend basic_ostream<char, _Traits2>&\n+        operator<<(basic_ostream<char, _Traits2>&, char);\n+ \n+      template<typename _CharT2, typename _Traits2>\n+        friend basic_ostream<_CharT2, _Traits2>&\n+        operator<<(basic_ostream<_CharT2, _Traits2>&, const _CharT2*);\n+ \n+      template<typename _Traits2>\n+        friend basic_ostream<char, _Traits2>&\n+        operator<<(basic_ostream<char, _Traits2>&, const char*);\n+ \n+      template<typename _CharT2, typename _Traits2>\n+        friend basic_ostream<_CharT2, _Traits2>&\n+        operator<<(basic_ostream<_CharT2, _Traits2>&, const char*);\n+\n       // [27.6.2.2] constructor/destructor\n       /**\n        *  @brief  Base constructor."}, {"sha": "2c3b1217f2aa6e02800bf2ad77db0a8c798d4ff7", "filename": "libstdc++-v3/testsuite/27_io/istream_exception.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f62fbd81ab52e09dee9c35b2e016893fc04082a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_exception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f62fbd81ab52e09dee9c35b2e016893fc04082a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_exception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_exception.cc?ref=6f62fbd81ab52e09dee9c35b2e016893fc04082a", "patch": "@@ -0,0 +1,68 @@\n+// 2003-03-08  Jerry Quinn  <jlquinn@optonline.net>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <istream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9561\n+struct foobar: std::exception { };\n+\n+struct buf: std::streambuf\n+{\n+    virtual int_type underflow () {\n+        throw foobar ();\n+        return -1;\n+    }\n+    virtual int_type uflow () {\n+        throw foobar ();\n+        return -1;\n+    }\n+};\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  buf b;\n+  std::istream strm (&b);\n+  strm.exceptions (std::ios::badbit);\n+  int i = 0;\n+\n+  try {\n+    i = strm.get();\n+  }\n+  catch (foobar) {\n+    // strm should throw foobar and not do anything else\n+    VERIFY(strm.bad());\n+  }\n+  catch (...) {\n+    VERIFY(false);\n+  }\n+\n+  VERIFY(i == 0);\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8c2b3407056724c8ea760b7f3583008b4dd3da2f", "filename": "libstdc++-v3/testsuite/27_io/ostream_exception.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f62fbd81ab52e09dee9c35b2e016893fc04082a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_exception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f62fbd81ab52e09dee9c35b2e016893fc04082a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_exception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_exception.cc?ref=6f62fbd81ab52e09dee9c35b2e016893fc04082a", "patch": "@@ -0,0 +1,66 @@\n+// 2003-03-08  Jerry Quinn  <jlquinn@optonline.net>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9561\n+struct foobar: std::exception { };\n+\n+struct buf: std::streambuf\n+{\n+    virtual int_type overflow (int_type) {\n+        throw foobar ();\n+        return -1;\n+    }\n+};\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  buf b;\n+  std::ostream strm (&b);\n+  strm.exceptions (std::ios::badbit);\n+\n+  try {\n+    strm << std::endl;\n+  }\n+  catch (foobar) {\n+    // strm should throw foobar and not do anything else\n+    VERIFY(strm.bad());\n+    return;\n+  }\n+  catch (...) {\n+    VERIFY(false);\n+    return;\n+  }\n+\n+  VERIFY(false);\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}