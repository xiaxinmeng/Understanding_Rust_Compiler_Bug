{"sha": "0a4288d92e5c080b448db4041091aea932b44980", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE0Mjg4ZDkyZTVjMDgwYjQ0OGRiNDA0MTA5MWFlYTkzMmI0NDk4MA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-02-14T09:58:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-02-14T09:58:57Z"}, "message": "re PR tree-optimization/26258 (Wrong alias information for struct addresses in PHIs)\n\n2006-02-14  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/26258\n\t* tree-ssa-structalias.c (find_func_aliases): Handle aggregates\n\tin PHI argument processing.\n\n\t* gcc.dg/torture/pr26258.c: New testcase.\n\nFrom-SVN: r110963", "tree": {"sha": "3a082476ee7a2b29e659feef49b9952c45987e90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a082476ee7a2b29e659feef49b9952c45987e90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a4288d92e5c080b448db4041091aea932b44980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4288d92e5c080b448db4041091aea932b44980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a4288d92e5c080b448db4041091aea932b44980", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4288d92e5c080b448db4041091aea932b44980/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1f8db0c36b50bc14d1287d04804bd51fca076cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f8db0c36b50bc14d1287d04804bd51fca076cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1f8db0c36b50bc14d1287d04804bd51fca076cb"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "2811d2e9d7104e50bf62a480408aad5f27badf94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4288d92e5c080b448db4041091aea932b44980/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4288d92e5c080b448db4041091aea932b44980/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a4288d92e5c080b448db4041091aea932b44980", "patch": "@@ -1,3 +1,9 @@\n+2006-02-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/26258\n+\t* tree-ssa-structalias.c (find_func_aliases): Handle aggregates\n+\tin PHI argument processing.\n+\n 2006-02-13  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* simplify-rtx.c (simplify_unary_operation_1) <TRUNCATE>: Return"}, {"sha": "daac3ab2eea0d7b063d572ae1f5ba2a21381f38b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4288d92e5c080b448db4041091aea932b44980/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4288d92e5c080b448db4041091aea932b44980/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a4288d92e5c080b448db4041091aea932b44980", "patch": "@@ -1,3 +1,8 @@\n+2006-02-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/26258\n+\t* gcc.dg/torture/pr26258.c: New testcase.\n+\n 2006-02-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/26246"}, {"sha": "e9acd55cc30e0e947ee51169b8a894f0b108c2f7", "filename": "gcc/testsuite/gcc.dg/torture/pr26258.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4288d92e5c080b448db4041091aea932b44980/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26258.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4288d92e5c080b448db4041091aea932b44980/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26258.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26258.c?ref=0a4288d92e5c080b448db4041091aea932b44980", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+\n+extern void abort(void);\n+\n+typedef struct Foo { int a; int b; }  Foo;\n+\n+Foo foo(Foo first, Foo last, _Bool ret_first)\n+{\n+  Foo t;\n+  Foo *t1 = (ret_first ? &first : &last);\n+  first.a = 2;\n+  last.b = 3;\n+  t.a = t1->a;\n+  t.b = t1->b;\n+  t.a += first.a;\n+  t.b += last.b;\n+  return t;\n+}\n+\n+int main()\n+{\n+  Foo first = (Foo){1, 2};\n+  Foo last = (Foo){3, 4};\n+  Foo ret = foo(first, last, 0);\n+  if (ret.b != 6)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "2ddbe0f7ff7ada39794202c0fb8a1fa1e12d55ad", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4288d92e5c080b448db4041091aea932b44980/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4288d92e5c080b448db4041091aea932b44980/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=0a4288d92e5c080b448db4041091aea932b44980", "patch": "@@ -3239,7 +3239,33 @@ find_func_aliases (tree origt)\n \t  get_constraint_for (PHI_RESULT (t), &lhsc);\n \t  for (i = 0; i < PHI_NUM_ARGS (t); i++)\n \t    { \n+\t      tree rhstype;\n+\t      tree strippedrhs = PHI_ARG_DEF (t, i);\n+\n+\t      STRIP_NOPS (strippedrhs);\n+\t      rhstype = TREE_TYPE (strippedrhs);\n \t      get_constraint_for (PHI_ARG_DEF (t, i), &rhsc);\n+\n+\t      if (TREE_CODE (strippedrhs) == ADDR_EXPR\n+\t\t && AGGREGATE_TYPE_P (TREE_TYPE (rhstype))\n+\t\t && VEC_length (ce_s, rhsc) == 1)\n+\t\t{\n+\t\t  struct constraint_expr *origrhs;\n+\t\t  varinfo_t origvar;\n+\t\t  struct constraint_expr tmp;\n+\n+\t\t  gcc_assert (VEC_length (ce_s, rhsc) == 1);\n+\t\t  origrhs = VEC_last (ce_s, rhsc);\n+\t\t  tmp = *origrhs;\n+\t\t  VEC_pop (ce_s, rhsc);\n+\t\t  origvar = get_varinfo (origrhs->var);\n+\t\t  for (; origvar; origvar = origvar->next)\n+\t\t    {\n+\t\t      tmp.var = origvar->id;\n+\t\t      VEC_safe_push (ce_s, heap, rhsc, &tmp);\n+\t\t    }\n+\t\t}\n+\n \t      for (j = 0; VEC_iterate (ce_s, lhsc, j, c); j++)\n \t\t{\n \t\t  struct constraint_expr *c2;"}]}