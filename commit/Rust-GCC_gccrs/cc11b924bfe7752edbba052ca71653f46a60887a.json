{"sha": "cc11b924bfe7752edbba052ca71653f46a60887a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MxMWI5MjRiZmU3NzUyZWRiYmEwNTJjYTcxNjUzZjQ2YTYwODg3YQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-07-09T16:16:01Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-07-14T12:14:31Z"}, "message": "x86: Don't enable UINTR in 32-bit mode\n\nUINTR is available only in 64-bit mode.  Since the codegen target is\nunknown when the the gcc driver is processing -march=native, to properly\nhandle UINTR for -march=native:\n\n1. Pass \"arch [32|64]\" and \"tune [32|64]\" to host_detect_local_cpu to\nindicate 32-bit and 64-bit codegen.\n2. Change ix86_option_override_internal to enable UINTR only in 64-bit\nmode for -march=CPU when PTA_CPU includes PTA_UINTR.\n\ngcc/\n\n\tPR target/101395\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Check\n\t\"arch [32|64]\" and \"tune [32|64]\" for 32-bit and 64-bit codegen.\n\tEnable UINTR only for 64-bit codegen.\n\t* config/i386/i386-options.c\n\t(ix86_option_override_internal::DEF_PTA): Skip PTA_UINTR if not\n\tin 64-bit mode.\n\t* config/i386/i386.h (ARCH_ARG): New.\n\t(CC1_CPU_SPEC): Pass \"[arch|tune] 32\" for 32-bit codegen and\n\t\"[arch|tune] 64\" for 64-bit codegen.\n\ngcc/testsuite/\n\n\tPR target/101395\n\t* gcc.target/i386/pr101395-1.c: New test.\n\t* gcc.target/i386/pr101395-2.c: Likewise.\n\t* gcc.target/i386/pr101395-3.c: Likewise.", "tree": {"sha": "99567aef1bd6acfdfb8ae6fa5587d8c752a280a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99567aef1bd6acfdfb8ae6fa5587d8c752a280a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc11b924bfe7752edbba052ca71653f46a60887a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc11b924bfe7752edbba052ca71653f46a60887a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc11b924bfe7752edbba052ca71653f46a60887a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc11b924bfe7752edbba052ca71653f46a60887a/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9c2ce1dae270d8d5dc261a57a21f96a1da5ea2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c2ce1dae270d8d5dc261a57a21f96a1da5ea2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9c2ce1dae270d8d5dc261a57a21f96a1da5ea2d"}], "stats": {"total": 73, "additions": 64, "deletions": 9}, "files": [{"sha": "f844a168ddb6c064f51a559745bda39a56d2657e", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc11b924bfe7752edbba052ca71653f46a60887a/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc11b924bfe7752edbba052ca71653f46a60887a/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=cc11b924bfe7752edbba052ca71653f46a60887a", "patch": "@@ -370,9 +370,9 @@ detect_caches_intel (bool xeon_mp, unsigned max_level,\n }\n \n /* This will be called by the spec parser in gcc.c when it sees\n-   a %:local_cpu_detect(args) construct.  Currently it will be called\n-   with either \"arch\" or \"tune\" as argument depending on if -march=native\n-   or -mtune=native is to be substituted.\n+   a %:local_cpu_detect(args) construct.  Currently it will be\n+   called with either \"arch [32|64]\" or \"tune [32|64]\" as argument\n+   depending on if -march=native or -mtune=native is to be substituted.\n \n    It returns a string containing new command line parameters to be\n    put at the place of the above two options, depending on what CPU\n@@ -401,14 +401,23 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \n   unsigned int l2sizekb = 0;\n \n-  if (argc < 1)\n+  if (argc < 2)\n     return NULL;\n \n   arch = !strcmp (argv[0], \"arch\");\n \n   if (!arch && strcmp (argv[0], \"tune\"))\n     return NULL;\n \n+  bool codegen_x86_64;\n+\n+  if (!strcmp (argv[1], \"32\"))\n+    codegen_x86_64 = false;\n+  else if (!strcmp (argv[1], \"64\"))\n+    codegen_x86_64 = true;\n+  else\n+    return NULL;\n+\n   struct __processor_model cpu_model = { };\n   struct __processor_model2 cpu_model2 = { };\n   unsigned int cpu_features2[SIZE_OF_CPU_FEATURES] = { };\n@@ -804,8 +813,12 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \tif (isa_names_table[i].option)\n \t  {\n \t    if (has_feature (isa_names_table[i].feature))\n-\t      options = concat (options, \" \",\n-\t\t\t\tisa_names_table[i].option, NULL);\n+\t      {\n+\t\tif (codegen_x86_64\n+\t\t    || isa_names_table[i].feature != FEATURE_UINTR)\n+\t\t  options = concat (options, \" \",\n+\t\t\t\t    isa_names_table[i].option, NULL);\n+\t      }\n \t    else\n \t      options = concat (options, neg_option,\n \t\t\t\tisa_names_table[i].option + 2, NULL);"}, {"sha": "7cba655595e07bade21e8f774bd5c0f4a5d97a4f", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc11b924bfe7752edbba052ca71653f46a60887a/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc11b924bfe7752edbba052ca71653f46a60887a/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=cc11b924bfe7752edbba052ca71653f46a60887a", "patch": "@@ -2109,6 +2109,7 @@ ix86_option_override_internal (bool main_args_p,\n #define DEF_PTA(NAME) \\\n \tif (((processor_alias_table[i].flags & PTA_ ## NAME) != 0) \\\n \t    && PTA_ ## NAME != PTA_64BIT \\\n+\t    && (TARGET_64BIT || PTA_ ## NAME != PTA_UINTR) \\\n \t    && !TARGET_EXPLICIT_ ## NAME ## _P (opts)) \\\n \t  SET_TARGET_ ## NAME (opts);\n #include \"i386-isa.def\""}, {"sha": "324e8a952d9d224c7cd2a17b9600873131b06b96", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc11b924bfe7752edbba052ca71653f46a60887a/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc11b924bfe7752edbba052ca71653f46a60887a/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=cc11b924bfe7752edbba052ca71653f46a60887a", "patch": "@@ -576,10 +576,11 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #ifndef HAVE_LOCAL_CPU_DETECT\n #define CC1_CPU_SPEC CC1_CPU_SPEC_1\n #else\n+#define ARCH_ARG \"%{\" OPT_ARCH64 \":64;:32}\"\n #define CC1_CPU_SPEC CC1_CPU_SPEC_1 \\\n-\"%{march=native:%>march=native %:local_cpu_detect(arch) \\\n-  %{!mtune=*:%>mtune=native %:local_cpu_detect(tune)}} \\\n-%{mtune=native:%>mtune=native %:local_cpu_detect(tune)}\"\n+\"%{march=native:%>march=native %:local_cpu_detect(arch \" ARCH_ARG \") \\\n+  %{!mtune=*:%>mtune=native %:local_cpu_detect(tune \" ARCH_ARG \")}} \\\n+%{mtune=native:%>mtune=native %:local_cpu_detect(tune \" ARCH_ARG \")}\"\n #endif\n #endif\n \f"}, {"sha": "74c8bfe891a8aaebcc776278b20c4e59d434736e", "filename": "gcc/testsuite/gcc.target/i386/pr101395-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc11b924bfe7752edbba052ca71653f46a60887a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101395-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc11b924bfe7752edbba052ca71653f46a60887a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101395-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101395-1.c?ref=cc11b924bfe7752edbba052ca71653f46a60887a", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=sapphirerapids\" } */\n+\n+#ifdef __x86_64__\n+# ifndef __UINTR__\n+#  error UINTR is not enabled for Sapphirerapids\n+# endif\n+#else\n+# ifdef __UINTR__\n+#  error UINTR is not usable in 32-bit mode\n+# endif\n+#endif"}, {"sha": "f2b677f8c805a4d191af9ce88e8ea63734b4d33a", "filename": "gcc/testsuite/gcc.target/i386/pr101395-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc11b924bfe7752edbba052ca71653f46a60887a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101395-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc11b924bfe7752edbba052ca71653f46a60887a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101395-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101395-2.c?ref=cc11b924bfe7752edbba052ca71653f46a60887a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -march=native\" } */\n+\n+int\n+main ()\n+{\n+  if (__builtin_cpu_supports (\"uintr\"))\n+    {\n+#ifdef __x86_64__\n+# ifndef __UINTR__\n+      __builtin_abort ();\n+# endif\n+#else\n+# ifdef __UINTR__\n+      __builtin_abort ();\n+# endif\n+#endif\n+      return 0;\n+    }\n+\n+  return 0;\n+}"}, {"sha": "bc6ab423c93f06b57fbb76ee5b32d3abda3108e5", "filename": "gcc/testsuite/gcc.target/i386/pr101395-3.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc11b924bfe7752edbba052ca71653f46a60887a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101395-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc11b924bfe7752edbba052ca71653f46a60887a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101395-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101395-3.c?ref=cc11b924bfe7752edbba052ca71653f46a60887a", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=native -mno-uintr\" } */\n+\n+#ifdef __UINTR__\n+# error UINTR should be disabled\n+#endif"}]}