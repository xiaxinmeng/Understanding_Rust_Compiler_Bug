{"sha": "daade2060caf31a11154d926d4927717564a7a46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFhZGUyMDYwY2FmMzFhMTExNTRkOTI2ZDQ5Mjc3MTc1NjRhN2E0Ng==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-04-14T12:07:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-14T12:07:57Z"}, "message": "tree.h (get_object_alignment_1): Declare.\n\n2011-04-14  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.h (get_object_alignment_1): Declare.\n\t* builtins.c (get_object_alignment_1): Split out worker from ...\n\t(get_object_alignment): ... here.\n\t* fold-const.c (get_pointer_modulus_and_residue): Use\n\tget_object_alignment_1.\n\n\t* gcc.dg/fold-bitand-4.c: Move ...\n\t* c-c++-common/fold-bitand-4.c: ... here.  Adjust slightly.\n\nFrom-SVN: r172424", "tree": {"sha": "8d1c24f7892e87a4ef9d15d2ffc7a8758db7b114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d1c24f7892e87a4ef9d15d2ffc7a8758db7b114"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daade2060caf31a11154d926d4927717564a7a46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daade2060caf31a11154d926d4927717564a7a46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daade2060caf31a11154d926d4927717564a7a46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daade2060caf31a11154d926d4927717564a7a46/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "920e81727482ab7c10dd4cadf78e7ff052644762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/920e81727482ab7c10dd4cadf78e7ff052644762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/920e81727482ab7c10dd4cadf78e7ff052644762"}], "stats": {"total": 77, "additions": 42, "deletions": 35}, "files": [{"sha": "6165fdd21e4684551cde23239a1e14eba472cc92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daade2060caf31a11154d926d4927717564a7a46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daade2060caf31a11154d926d4927717564a7a46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=daade2060caf31a11154d926d4927717564a7a46", "patch": "@@ -1,3 +1,11 @@\n+2011-04-14  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.h (get_object_alignment_1): Declare.\n+\t* builtins.c (get_object_alignment_1): Split out worker from ...\n+\t(get_object_alignment): ... here.\n+\t* fold-const.c (get_pointer_modulus_and_residue): Use\n+\tget_object_alignment_1.\n+\n 2011-04-14  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-vectorizer.h (vect_create_data_ref_ptr): Add an extra"}, {"sha": "81f7ec6bdc194de80bdb4bcf072966e28294c0be", "filename": "gcc/builtins.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daade2060caf31a11154d926d4927717564a7a46/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daade2060caf31a11154d926d4927717564a7a46/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=daade2060caf31a11154d926d4927717564a7a46", "patch": "@@ -268,7 +268,7 @@ called_as_built_in (tree node)\n    Don't return more than MAX_ALIGN no matter what.  */\n \n unsigned int\n-get_object_alignment (tree exp, unsigned int max_align)\n+get_object_alignment_1 (tree exp, unsigned HOST_WIDE_INT *bitposp)\n {\n   HOST_WIDE_INT bitsize, bitpos;\n   tree offset;\n@@ -320,8 +320,7 @@ get_object_alignment (tree exp, unsigned int max_align)\n \t  align = MAX (pi->align * BITS_PER_UNIT, align);\n \t}\n       else if (TREE_CODE (addr) == ADDR_EXPR)\n-\talign = MAX (align, get_object_alignment (TREE_OPERAND (addr, 0),\n-\t\t\t\t\t\t  max_align));\n+\talign = MAX (align, get_object_alignment (TREE_OPERAND (addr, 0), ~0U));\n       bitpos += mem_ref_offset (exp).low * BITS_PER_UNIT;\n     }\n   else if (TREE_CODE (exp) == TARGET_MEM_REF)\n@@ -345,8 +344,7 @@ get_object_alignment (tree exp, unsigned int max_align)\n \t  align = MAX (pi->align * BITS_PER_UNIT, align);\n \t}\n       else if (TREE_CODE (addr) == ADDR_EXPR)\n-\talign = MAX (align, get_object_alignment (TREE_OPERAND (addr, 0),\n-\t\t\t\t\t\t  max_align));\n+\talign = MAX (align, get_object_alignment (TREE_OPERAND (addr, 0), ~0U));\n       if (TMR_OFFSET (exp))\n \tbitpos += TREE_INT_CST_LOW (TMR_OFFSET (exp)) * BITS_PER_UNIT;\n       if (TMR_INDEX (exp) && TMR_STEP (exp))\n@@ -364,7 +362,7 @@ get_object_alignment (tree exp, unsigned int max_align)\n \n   /* If there is a non-constant offset part extract the maximum\n      alignment that can prevail.  */\n-  inner = max_align;\n+  inner = ~0U;\n   while (offset)\n     {\n       tree next_offset;\n@@ -411,6 +409,21 @@ get_object_alignment (tree exp, unsigned int max_align)\n   align = MIN (align, inner);\n   bitpos = bitpos & (align - 1);\n \n+  *bitposp = bitpos;\n+  return align;\n+}\n+\n+/* Return the alignment in bits of EXP, an object.\n+   Don't return more than MAX_ALIGN no matter what.  */\n+\n+unsigned int\n+get_object_alignment (tree exp, unsigned int max_align)\n+{\n+  unsigned HOST_WIDE_INT bitpos = 0;\n+  unsigned int align;\n+\n+  align = get_object_alignment_1 (exp, &bitpos);\n+\n   /* align and bitpos now specify known low bits of the pointer.\n      ptr & (align - 1) == bitpos.  */\n "}, {"sha": "8d543c4080fb33ac28304939661ba6c5a0642cd8", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 27, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daade2060caf31a11154d926d4927717564a7a46/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daade2060caf31a11154d926d4927717564a7a46/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=daade2060caf31a11154d926d4927717564a7a46", "patch": "@@ -9230,30 +9230,10 @@ get_pointer_modulus_and_residue (tree expr, unsigned HOST_WIDE_INT *residue,\n   code = TREE_CODE (expr);\n   if (code == ADDR_EXPR)\n     {\n-      expr = TREE_OPERAND (expr, 0);\n-      if (handled_component_p (expr))\n-\t{\n-\t  HOST_WIDE_INT bitsize, bitpos;\n-\t  tree offset;\n-\t  enum machine_mode mode;\n-\t  int unsignedp, volatilep;\n-\n-\t  expr = get_inner_reference (expr, &bitsize, &bitpos, &offset,\n-\t\t\t\t      &mode, &unsignedp, &volatilep, false);\n-\t  *residue = bitpos / BITS_PER_UNIT;\n-\t  if (offset)\n-\t    {\n-\t      if (TREE_CODE (offset) == INTEGER_CST)\n-\t\t*residue += TREE_INT_CST_LOW (offset);\n-\t      else\n-\t\t/* We don't handle more complicated offset expressions.  */\n-\t\treturn 1;\n-\t    }\n-\t}\n-\n-      if (DECL_P (expr)\n-\t  && (allow_func_align || TREE_CODE (expr) != FUNCTION_DECL))\n-\treturn DECL_ALIGN_UNIT (expr);\n+      unsigned int bitalign;\n+      bitalign = get_object_alignment_1 (TREE_OPERAND (expr, 0), residue);\n+      *residue /= BITS_PER_UNIT;\n+      return bitalign / BITS_PER_UNIT;\n     }\n   else if (code == POINTER_PLUS_EXPR)\n     {\n@@ -9298,9 +9278,9 @@ get_pointer_modulus_and_residue (tree expr, unsigned HOST_WIDE_INT *residue,\n \t}\n     }\n \n-    /* If we get here, we were unable to determine anything useful about the\n-       expression.  */\n-    return 1;\n+  /* If we get here, we were unable to determine anything useful about the\n+     expression.  */\n+  return 1;\n }\n \n "}, {"sha": "62c4a6c0397065157599a28237f95dddb3c9f2b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daade2060caf31a11154d926d4927717564a7a46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daade2060caf31a11154d926d4927717564a7a46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=daade2060caf31a11154d926d4927717564a7a46", "patch": "@@ -1,3 +1,8 @@\n+2011-04-14  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/fold-bitand-4.c: Move ...\n+\t* c-c++-common/fold-bitand-4.c: ... here.  Adjust slightly.\n+\n 2011-04-14  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* gcc.target/avr/trivial.c: Fix line endings. Make PROGMEM"}, {"sha": "f4bfe2fcfe21912016779e98ad4dfcd34100c3b6", "filename": "gcc/testsuite/c-c++-common/fold-bitand-4.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daade2060caf31a11154d926d4927717564a7a46/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffold-bitand-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daade2060caf31a11154d926d4927717564a7a46/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffold-bitand-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffold-bitand-4.c?ref=daade2060caf31a11154d926d4927717564a7a46", "patch": "@@ -38,8 +38,8 @@ int f5 (int i)\n   return 3 & (__SIZE_TYPE__)&c16[i];\n }\n \n-/* { dg-final { scan-tree-dump-times \"return 12\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return \\[^\\n0-9\\]*12;\" 1 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"\\& 15\" 1 \"original\" } } */\n-/* { dg-final { scan-tree-dump-times \"return 0\" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return \\[^\\n0-9\\]*0;\" 2 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"\\& 7\" 1 \"original\" } } */\n /* { dg-final { cleanup-tree-dump \"original\" } } */", "previous_filename": "gcc/testsuite/gcc.dg/fold-bitand-4.c"}, {"sha": "99a55f0bfbad4e7346a79e919e4b7bada0dbb4fa", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daade2060caf31a11154d926d4927717564a7a46/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daade2060caf31a11154d926d4927717564a7a46/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=daade2060caf31a11154d926d4927717564a7a46", "patch": "@@ -5224,6 +5224,7 @@ extern bool can_trust_pointer_alignment (void);\n extern unsigned int get_pointer_alignment (tree, unsigned int);\n extern bool is_builtin_name (const char *);\n extern bool is_builtin_fn (tree);\n+extern unsigned int get_object_alignment_1 (tree, unsigned HOST_WIDE_INT *);\n extern unsigned int get_object_alignment (tree, unsigned int);\n extern tree fold_call_stmt (gimple, bool);\n extern tree gimple_fold_builtin_snprintf_chk (gimple, tree, enum built_in_function);"}]}