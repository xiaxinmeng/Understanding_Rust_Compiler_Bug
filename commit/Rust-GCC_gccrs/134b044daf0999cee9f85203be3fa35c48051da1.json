{"sha": "134b044daf0999cee9f85203be3fa35c48051da1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM0YjA0NGRhZjA5OTljZWU5Zjg1MjAzYmUzZmEzNWM0ODA1MWRhMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-07-05T07:50:31Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-07-05T07:50:31Z"}, "message": "target-insns.def (prefetch): New targetm instruction pattern.\n\ngcc/\n\t* target-insns.def (prefetch): New targetm instruction pattern.\n\t* tree-ssa-loop-prefetch.c: Include targeth.\n\t(tree_ssa_prefetch_arrays): Use prefetch targetm pattern instead\n\tof HAVE_*/gen_* interface.\n\t* builtins.c (expand_builtin_prefetch): Likewise.\n\t* toplev.c (process_options): Likewise.\n\nFrom-SVN: r225424", "tree": {"sha": "2ead129b539b876961452bf5f3dd621395a14b87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ead129b539b876961452bf5f3dd621395a14b87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/134b044daf0999cee9f85203be3fa35c48051da1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134b044daf0999cee9f85203be3fa35c48051da1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/134b044daf0999cee9f85203be3fa35c48051da1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134b044daf0999cee9f85203be3fa35c48051da1/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43c7dca8816e84a7b2d6caa10bed3c0a3c0c7e8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43c7dca8816e84a7b2d6caa10bed3c0a3c0c7e8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43c7dca8816e84a7b2d6caa10bed3c0a3c0c7e8e"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "2129526aece6a8c233e4caae83ee4b04d621a704", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134b044daf0999cee9f85203be3fa35c48051da1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134b044daf0999cee9f85203be3fa35c48051da1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=134b044daf0999cee9f85203be3fa35c48051da1", "patch": "@@ -1,3 +1,12 @@\n+2015-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target-insns.def (prefetch): New targetm instruction pattern.\n+\t* tree-ssa-loop-prefetch.c: Include targeth.\n+\t(tree_ssa_prefetch_arrays): Use prefetch targetm pattern instead\n+\tof HAVE_*/gen_* interface.\n+\t* builtins.c (expand_builtin_prefetch): Likewise.\n+\t* toplev.c (process_options): Likewise.\n+\n 2015-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target-insns.def (untyped_call, untyped_return): New targetm"}, {"sha": "b98bb066eb1f5c9c08674210f37453589dd8e8b4", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134b044daf0999cee9f85203be3fa35c48051da1/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134b044daf0999cee9f85203be3fa35c48051da1/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=134b044daf0999cee9f85203be3fa35c48051da1", "patch": "@@ -1282,18 +1282,16 @@ expand_builtin_prefetch (tree exp)\n       op2 = const0_rtx;\n     }\n \n-#ifdef HAVE_prefetch\n-  if (HAVE_prefetch)\n+  if (targetm.have_prefetch ())\n     {\n       struct expand_operand ops[3];\n \n       create_address_operand (&ops[0], op0);\n       create_integer_operand (&ops[1], INTVAL (op1));\n       create_integer_operand (&ops[2], INTVAL (op2));\n-      if (maybe_expand_insn (CODE_FOR_prefetch, 3, ops))\n+      if (maybe_expand_insn (targetm.code_for_prefetch, 3, ops))\n \treturn;\n     }\n-#endif\n \n   /* Don't do anything with direct references to volatile memory, but\n      generate code to handle other side effects.  */"}, {"sha": "45a700822f131ccd12ab36e3a6ee314df69ef68a", "filename": "gcc/target-insns.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134b044daf0999cee9f85203be3fa35c48051da1/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134b044daf0999cee9f85203be3fa35c48051da1/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=134b044daf0999cee9f85203be3fa35c48051da1", "patch": "@@ -44,6 +44,7 @@ DEF_TARGET_INSN (mem_thread_fence, (rtx x0))\n DEF_TARGET_INSN (memory_barrier, (void))\n DEF_TARGET_INSN (nonlocal_goto, (rtx x0, rtx x1, rtx x2, rtx x3))\n DEF_TARGET_INSN (nonlocal_goto_receiver, (void))\n+DEF_TARGET_INSN (prefetch, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (prologue, (void))\n DEF_TARGET_INSN (return, (void))\n DEF_TARGET_INSN (sibcall_epilogue, (void))"}, {"sha": "3d943a078162a1b4286da6ce61c57669d3887d5d", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134b044daf0999cee9f85203be3fa35c48051da1/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134b044daf0999cee9f85203be3fa35c48051da1/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=134b044daf0999cee9f85203be3fa35c48051da1", "patch": "@@ -1571,19 +1571,16 @@ process_options (void)\n \t}\n     }\n \n-#ifndef HAVE_prefetch\n-  if (flag_prefetch_loop_arrays > 0)\n+  if (flag_prefetch_loop_arrays > 0 && !targetm.code_for_prefetch)\n     {\n       warning (0, \"-fprefetch-loop-arrays not supported for this target\");\n       flag_prefetch_loop_arrays = 0;\n     }\n-#else\n-  if (flag_prefetch_loop_arrays > 0 && !HAVE_prefetch)\n+  else if (flag_prefetch_loop_arrays > 0 && !targetm.have_prefetch ())\n     {\n       warning (0, \"-fprefetch-loop-arrays not supported for this target (try -march switches)\");\n       flag_prefetch_loop_arrays = 0;\n     }\n-#endif\n \n   /* This combination of options isn't handled for i386 targets and doesn't\n      make much sense anyway, so don't allow it.  */"}, {"sha": "441e4a9d1f0c65f1749c78d8b0d496e11c4762c9", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134b044daf0999cee9f85203be3fa35c48051da1/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134b044daf0999cee9f85203be3fa35c48051da1/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=134b044daf0999cee9f85203be3fa35c48051da1", "patch": "@@ -57,6 +57,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"tree-inline.h\"\n #include \"tree-data-ref.h\"\n+#include \"target.h\"\n \n \n /* FIXME: Needed for optabs, but this should all be moved to a TBD interface\n@@ -216,10 +217,6 @@ along with GCC; see the file COPYING3.  If not see\n #define ACCEPTABLE_MISS_RATE 50\n #endif\n \n-#ifndef HAVE_prefetch\n-#define HAVE_prefetch 0\n-#endif\n-\n #define L1_CACHE_SIZE_BYTES ((unsigned) (L1_CACHE_SIZE * 1024))\n #define L2_CACHE_SIZE_BYTES ((unsigned) (L2_CACHE_SIZE * 1024))\n \n@@ -1954,11 +1951,11 @@ tree_ssa_prefetch_arrays (void)\n   bool unrolled = false;\n   int todo_flags = 0;\n \n-  if (!HAVE_prefetch\n+  if (!targetm.have_prefetch ()\n       /* It is possible to ask compiler for say -mtune=i486 -march=pentium4.\n \t -mtune=i486 causes us having PREFETCH_BLOCK 0, since this is part\n \t of processor costs and i486 does not have prefetch, but\n-\t -march=pentium4 causes HAVE_prefetch to be true.  Ugh.  */\n+\t -march=pentium4 causes targetm.have_prefetch to be true.  Ugh.  */\n       || PREFETCH_BLOCK == 0)\n     return 0;\n "}]}