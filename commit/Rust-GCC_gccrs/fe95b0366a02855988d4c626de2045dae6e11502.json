{"sha": "fe95b0366a02855988d4c626de2045dae6e11502", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU5NWIwMzY2YTAyODU1OTg4ZDRjNjI2ZGUyMDQ1ZGFlNmUxMTUwMg==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2015-06-30T12:58:48Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2015-06-30T12:58:48Z"}, "message": "Implement N4197 - Adding u8 character literals\n\n\n\nlibcpp:\n\n2015-06-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement N4197 - Adding u8 character literals\n\t* include/cpplib.h (UTF8CHAR, UTF8CHAR_USERDEF): New cpp tokens;\n\t(struct cpp_options): Add utf8_char_literals.\n\t* init.c (struct lang_flags): Add utf8_char_literals;\n\t(struct lang_flags lang_defaults): Add column for utf8_char_literals.\n\t* macro.c (stringify_arg()): Treat CPP_UTF8CHAR token; \n\t* expr.c (cpp_userdef_char_remove_type(), cpp_userdef_char_add_type()):\n\tTreat CPP_UTF8CHAR_USERDEF, CPP_UTF8CHAR tokens;\n\t(cpp_userdef_char_p()): Treat CPP_UTF8CHAR_USERDEF token;\n\t(eval_token(), _cpp_parse_expr()): Treat CPP_UTF8CHAR token.\n\t* lex.c (lex_string(), _cpp_lex_direct()): Include CPP_UTF8CHAR tokens.\n\t* charset.c (converter_for_type(), cpp_interpret_charconst()):\n\tTreat CPP_UTF8CHAR token.\n\n\ngcc/c-family:\n\n2015-06-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement N4197 - Adding u8 character literals\n\t* c-family/c-ada-spec.c (print_ada_macros()): Treat CPP_UTF8CHAR\n\tlike CPP_CHAR.\n\t* c-family/c-common.c (c_parse_error()): print CPP_UTF8CHAR\n\tand CPP_UTF8CHAR_USERDEF tokens.\n\t* c-family/c-lex.c (c_lex_with_flags()): Treat CPP_UTF8CHAR_USERDEF\n\tand CPP_UTF8CHAR tokens; (lex_charconst()): Treat CPP_UTF8CHAR token.\n\n\ngcc/cp:\n\n2015-06-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement N4197 - Adding u8 character literals\n\t* parser.c (cp_parser_primary_expression()): Treat CPP_UTF8CHAR\n\tand CPP_UTF8CHAR_USERDEF tokens;\n\t(cp_parser_parenthesized_expression_list()): Treat CPP_UTF8CHAR token.\n\n\ngcc/testsuite:\n\n2015-06-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement N4197 - Adding u8 character literals\n\t* g++.dg/cpp1z/utf8.C: New.\n\t* g++.dg/cpp1z/utf8-neg.C: New.\n\t* g++.dg/cpp1z/udlit-utf8char.C: New.\n\nFrom-SVN: r225185", "tree": {"sha": "8b22f058594c24d03fcb8f25908876f4764a4e03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b22f058594c24d03fcb8f25908876f4764a4e03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe95b0366a02855988d4c626de2045dae6e11502", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe95b0366a02855988d4c626de2045dae6e11502", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe95b0366a02855988d4c626de2045dae6e11502", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe95b0366a02855988d4c626de2045dae6e11502/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b00d9211625c18148d3bacdc53c9f527557d063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b00d9211625c18148d3bacdc53c9f527557d063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b00d9211625c18148d3bacdc53c9f527557d063"}], "stats": {"total": 153, "additions": 127, "deletions": 26}, "files": [{"sha": "66ae6a8ab45a44955f7078787bb3df3fde7d968e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fe95b0366a02855988d4c626de2045dae6e11502", "patch": "@@ -1,3 +1,13 @@\n+2015-06-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement N4197 - Adding u8 character literals\n+\t* c-family/c-ada-spec.c (print_ada_macros()): Treat CPP_UTF8CHAR\n+\tlike CPP_CHAR.\n+\t* c-family/c-common.c (c_parse_error()): print CPP_UTF8CHAR\n+\tand CPP_UTF8CHAR_USERDEF tokens.\n+\t* c-family/c-lex.c (c_lex_with_flags()): Treat CPP_UTF8CHAR_USERDEF\n+\tand CPP_UTF8CHAR tokens; (lex_charconst()): Treat CPP_UTF8CHAR token.\n+\n 2015-06-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR fortran/66605"}, {"sha": "41d612fc46754c577257b2f6cb779d7b2cc927c8", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=fe95b0366a02855988d4c626de2045dae6e11502", "patch": "@@ -249,6 +249,7 @@ print_ada_macros (pretty_printer *pp, cpp_hashnode **macros, int max_ada_macros)\n \t\t  case CPP_WCHAR:\n \t\t  case CPP_CHAR16:\n \t\t  case CPP_CHAR32:\n+\t\t  case CPP_UTF8CHAR:\n \t\t  case CPP_NAME:\n \t\t  case CPP_STRING:\n \t\t  case CPP_NUMBER:"}, {"sha": "835fc2ce19023ac8b87abd52c3a5d2bbe4cfacc5", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=fe95b0366a02855988d4c626de2045dae6e11502", "patch": "@@ -10256,7 +10256,8 @@ c_parse_error (const char *gmsgid, enum cpp_ttype token_type,\n   else if (token_type == CPP_CHAR\n \t   || token_type == CPP_WCHAR\n \t   || token_type == CPP_CHAR16\n-\t   || token_type == CPP_CHAR32)\n+\t   || token_type == CPP_CHAR32\n+\t   || token_type == CPP_UTF8CHAR)\n     {\n       unsigned int val = TREE_INT_CST_LOW (value);\n       const char *prefix;\n@@ -10275,6 +10276,9 @@ c_parse_error (const char *gmsgid, enum cpp_ttype token_type,\n \tcase CPP_CHAR32:\n \t  prefix = \"U\";\n \t  break;\n+\tcase CPP_UTF8CHAR:\n+\t  prefix = \"u8\";\n+\t  break;\n         }\n \n       if (val <= UCHAR_MAX && ISGRAPH (val))\n@@ -10289,7 +10293,8 @@ c_parse_error (const char *gmsgid, enum cpp_ttype token_type,\n   else if (token_type == CPP_CHAR_USERDEF\n \t   || token_type == CPP_WCHAR_USERDEF\n \t   || token_type == CPP_CHAR16_USERDEF\n-\t   || token_type == CPP_CHAR32_USERDEF)\n+\t   || token_type == CPP_CHAR32_USERDEF\n+\t   || token_type == CPP_UTF8CHAR_USERDEF)\n     message = catenate_messages (gmsgid,\n \t\t\t\t \" before user-defined character literal\");\n   else if (token_type == CPP_STRING_USERDEF"}, {"sha": "aa5d6e2313f600ed624dbcbdbe288c1577ff6e9f", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=fe95b0366a02855988d4c626de2045dae6e11502", "patch": "@@ -536,6 +536,7 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n     case CPP_WCHAR_USERDEF:\n     case CPP_CHAR16_USERDEF:\n     case CPP_CHAR32_USERDEF:\n+    case CPP_UTF8CHAR_USERDEF:\n       {\n \ttree literal;\n \tcpp_token temp_tok = *tok;\n@@ -553,6 +554,7 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n     case CPP_WCHAR:\n     case CPP_CHAR16:\n     case CPP_CHAR32:\n+    case CPP_UTF8CHAR:\n       *value = lex_charconst (tok);\n       break;\n \n@@ -1250,6 +1252,8 @@ lex_charconst (const cpp_token *token)\n     type = char32_type_node;\n   else if (token->type == CPP_CHAR16)\n     type = char16_type_node;\n+  else if (token->type == CPP_UTF8CHAR)\n+    type = char_type_node;\n   /* In C, a character constant has type 'int'.\n      In C++ 'char', but multi-char charconsts have type 'int'.  */\n   else if (!c_dialect_cxx () || chars_seen > 1)"}, {"sha": "04fb007f8e705aaf50e12e5f9308939a7497e6cd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fe95b0366a02855988d4c626de2045dae6e11502", "patch": "@@ -1,3 +1,10 @@\n+2015-06-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement N4197 - Adding u8 character literals\n+\t* parser.c (cp_parser_primary_expression()): Treat CPP_UTF8CHAR\n+\tand CPP_UTF8CHAR_USERDEF tokens;\n+\t(cp_parser_parenthesized_expression_list()): Treat CPP_UTF8CHAR token.\n+\n 2015-06-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/65977"}, {"sha": "bb3d636eee1327d052d30dd75a510de77455ad35", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=fe95b0366a02855988d4c626de2045dae6e11502", "patch": "@@ -4284,6 +4284,7 @@ cp_parser_primary_expression (cp_parser *parser,\n     case CPP_CHAR16:\n     case CPP_CHAR32:\n     case CPP_WCHAR:\n+    case CPP_UTF8CHAR:\n     case CPP_NUMBER:\n     case CPP_PREPARSED_EXPR:\n       if (TREE_CODE (token->u.value) == USERDEF_LITERAL)\n@@ -4345,6 +4346,7 @@ cp_parser_primary_expression (cp_parser *parser,\n     case CPP_CHAR16_USERDEF:\n     case CPP_CHAR32_USERDEF:\n     case CPP_WCHAR_USERDEF:\n+    case CPP_UTF8CHAR_USERDEF:\n       return cp_parser_userdef_char_literal (parser);\n \n     case CPP_STRING:\n@@ -6887,6 +6889,7 @@ cp_parser_parenthesized_expression_list (cp_parser* parser,\n \t\t  case CPP_WCHAR:\n \t\t  case CPP_CHAR16:\n \t\t  case CPP_CHAR32:\n+\t\t  case CPP_UTF8CHAR:\n \t\t    /* If a parameter is literal zero alone, remember it\n \t\t       for -Wmemset-transposed-args warning.  */\n \t\t    if (integer_zerop (tok->u.value)"}, {"sha": "f766b0dcbb63cb0be192dfdbba6e45f8232c27bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe95b0366a02855988d4c626de2045dae6e11502", "patch": "@@ -1,3 +1,10 @@\n+2015-06-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement N4197 - Adding u8 character literals\n+\t* g++.dg/cpp1z/utf8.C: New.\n+\t* g++.dg/cpp1z/utf8-neg.C: New.\n+\t* g++.dg/cpp1z/udlit-utf8char.C: New.\n+\n 2015-06-30  Marek Polacek  <polacek@redhat.com>\n \n \t* gcc.dg/fold-ior-2.c (fn4): Swap operands."}, {"sha": "fb9cdf18fd21d05000702665a73f6e646d6209b4", "filename": "gcc/testsuite/g++.dg/cpp1z/udlit-utf8char.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fudlit-utf8char.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fudlit-utf8char.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fudlit-utf8char.C?ref=fe95b0366a02855988d4c626de2045dae6e11502", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++1z\" }\n+\n+constexpr int\n+operator\"\"_foo(char c)\n+{ return c * 100; }\n+\n+auto cc = u8'8'_foo;"}, {"sha": "339f0e3c0294a7d8939c592196c50fd62c0e4cf9", "filename": "gcc/testsuite/g++.dg/cpp1z/utf8-neg.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Futf8-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Futf8-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Futf8-neg.C?ref=fe95b0366a02855988d4c626de2045dae6e11502", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c++1z\" } */\n+\n+const static char c0 = u8'';\t\t// { dg-error \"empty character\" }\n+const static char c1 = u8'ab';  \t// { dg-warning \"multi-character character constant\" }\n+const static char c2 = u8'\\u0124';\t// { dg-warning \"multi-character character constant\" }\n+const static char c3 = u8'\\U00064321';  // { dg-warning \"multi-character character constant\" }"}, {"sha": "52816f8591835b5ac0bca5792d6f1d09872e4c99", "filename": "gcc/testsuite/g++.dg/cpp1z/utf8.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Futf8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe95b0366a02855988d4c626de2045dae6e11502/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Futf8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Futf8.C?ref=fe95b0366a02855988d4c626de2045dae6e11502", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++1z\" }\n+\n+#include <cassert>\n+#include <experimental/type_traits>\n+\n+auto c = 'c';\n+auto u8c = u8'c';\n+\n+static_assert(std::experimental::is_same_v<decltype(u8c), decltype(c)>, \"\");\n+\n+auto u8s = u8\"c\";\n+auto x = u8s[0];\n+\n+static_assert(std::experimental::is_same_v<decltype(u8c), decltype(x)>, \"\");"}, {"sha": "4e2980222b357048458f73569c86aa943e8aea36", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe95b0366a02855988d4c626de2045dae6e11502/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe95b0366a02855988d4c626de2045dae6e11502/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=fe95b0366a02855988d4c626de2045dae6e11502", "patch": "@@ -1,3 +1,19 @@\n+2015-06-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement N4197 - Adding u8 character literals\n+\t* include/cpplib.h (UTF8CHAR, UTF8CHAR_USERDEF): New cpp tokens;\n+\t(struct cpp_options): Add utf8_char_literals.\n+\t* init.c (struct lang_flags): Add utf8_char_literals;\n+\t(struct lang_flags lang_defaults): Add column for utf8_char_literals.\n+\t* macro.c (stringify_arg()): Treat CPP_UTF8CHAR token; \n+\t* expr.c (cpp_userdef_char_remove_type(), cpp_userdef_char_add_type()):\n+\tTreat CPP_UTF8CHAR_USERDEF, CPP_UTF8CHAR tokens;\n+\t(cpp_userdef_char_p()): Treat CPP_UTF8CHAR_USERDEF token;\n+\t(eval_token(), _cpp_parse_expr()): Treat CPP_UTF8CHAR token.\n+\t* lex.c (lex_string(), _cpp_lex_direct()): Include CPP_UTF8CHAR tokens.\n+\t* charset.c (converter_for_type(), cpp_interpret_charconst()):\n+\tTreat CPP_UTF8CHAR token.\n+\n 2015-06-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* lex.c (search_line_sse42) [__GCC_ASM_FLAG_OUTPUTS__]: New main"}, {"sha": "8e92bc65f90097cb9770bca0c4539087fc94d2d7", "filename": "libcpp/charset.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe95b0366a02855988d4c626de2045dae6e11502/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe95b0366a02855988d4c626de2045dae6e11502/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=fe95b0366a02855988d4c626de2045dae6e11502", "patch": "@@ -1355,6 +1355,7 @@ converter_for_type (cpp_reader *pfile, enum cpp_ttype type)\n     {\n     default:\n \treturn pfile->narrow_cset_desc;\n+    case CPP_UTF8CHAR:\n     case CPP_UTF8STRING:\n \treturn pfile->utf8_cset_desc;\n     case CPP_CHAR16:\n@@ -1611,11 +1612,12 @@ cpp_interpret_charconst (cpp_reader *pfile, const cpp_token *token,\n \t\t\t unsigned int *pchars_seen, int *unsignedp)\n {\n   cpp_string str = { 0, 0 };\n-  bool wide = (token->type != CPP_CHAR);\n+  bool wide = (token->type != CPP_CHAR && token->type != CPP_UTF8CHAR);\n+  int u8 = 2 * int(token->type == CPP_UTF8CHAR);\n   cppchar_t result;\n \n-  /* an empty constant will appear as L'', u'', U'' or '' */\n-  if (token->val.str.len == (size_t) (2 + wide))\n+  /* An empty constant will appear as L'', u'', U'', u8'', or '' */\n+  if (token->val.str.len == (size_t) (2 + wide + u8))\n     {\n       cpp_error (pfile, CPP_DL_ERROR, \"empty character constant\");\n       return 0;"}, {"sha": "3dc5c0bf238907b8164754b3ad4d0d815ff0ab71", "filename": "libcpp/expr.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe95b0366a02855988d4c626de2045dae6e11502/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe95b0366a02855988d4c626de2045dae6e11502/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=fe95b0366a02855988d4c626de2045dae6e11502", "patch": "@@ -307,6 +307,8 @@ cpp_userdef_char_remove_type (enum cpp_ttype type)\n     return CPP_CHAR16;\n   else if (type == CPP_CHAR32_USERDEF)\n     return CPP_CHAR32;\n+  else if (type == CPP_UTF8CHAR_USERDEF)\n+    return CPP_UTF8CHAR;\n   else\n     return type;\n }\n@@ -325,6 +327,8 @@ cpp_userdef_char_add_type (enum cpp_ttype type)\n     return CPP_CHAR16_USERDEF;\n   else if (type == CPP_CHAR32)\n     return CPP_CHAR32_USERDEF;\n+  else if (type == CPP_UTF8CHAR)\n+    return CPP_UTF8CHAR_USERDEF;\n   else\n     return type;\n }\n@@ -350,7 +354,8 @@ cpp_userdef_char_p (enum cpp_ttype type)\n   if (type == CPP_CHAR_USERDEF\n    || type == CPP_WCHAR_USERDEF\n    || type == CPP_CHAR16_USERDEF\n-   || type == CPP_CHAR32_USERDEF)\n+   || type == CPP_CHAR32_USERDEF\n+   || type == CPP_UTF8CHAR_USERDEF)\n     return true;\n   else\n     return false;\n@@ -1029,6 +1034,7 @@ eval_token (cpp_reader *pfile, const cpp_token *token,\n     case CPP_CHAR:\n     case CPP_CHAR16:\n     case CPP_CHAR32:\n+    case CPP_UTF8CHAR:\n       {\n \tcppchar_t cc = cpp_interpret_charconst (pfile, token,\n \t\t\t\t\t\t&temp, &unsignedp);\n@@ -1214,6 +1220,7 @@ _cpp_parse_expr (cpp_reader *pfile, bool is_if)\n \tcase CPP_WCHAR:\n \tcase CPP_CHAR16:\n \tcase CPP_CHAR32:\n+\tcase CPP_UTF8CHAR:\n \tcase CPP_NAME:\n \tcase CPP_HASH:\n \t  if (!want_value)"}, {"sha": "5eaea6b60d79c6d6dcbee76d63b00e916cfdf21f", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe95b0366a02855988d4c626de2045dae6e11502/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe95b0366a02855988d4c626de2045dae6e11502/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=fe95b0366a02855988d4c626de2045dae6e11502", "patch": "@@ -119,6 +119,7 @@ struct _cpp_file;\n   TK(WCHAR,\t\tLITERAL) /* L'char' */\t\t\t\t\\\n   TK(CHAR16,\t\tLITERAL) /* u'char' */\t\t\t\t\\\n   TK(CHAR32,\t\tLITERAL) /* U'char' */\t\t\t\t\\\n+  TK(UTF8CHAR,\t\tLITERAL) /* u8'char' */\t\t\t\t\\\n   TK(OTHER,\t\tLITERAL) /* stray punctuation */\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   TK(STRING,\t\tLITERAL) /* \"string\" */\t\t\t\t\\\n@@ -133,6 +134,7 @@ struct _cpp_file;\n   TK(WCHAR_USERDEF,\tLITERAL) /* L'char'_suffix - C++-0x */\t\t\\\n   TK(CHAR16_USERDEF,\tLITERAL) /* u'char'_suffix - C++-0x */\t\t\\\n   TK(CHAR32_USERDEF,\tLITERAL) /* U'char'_suffix - C++-0x */\t\t\\\n+  TK(UTF8CHAR_USERDEF,\tLITERAL) /* u8'char'_suffix - C++-0x */\t\t\\\n   TK(STRING_USERDEF,\tLITERAL) /* \"string\"_suffix - C++-0x */\t\t\\\n   TK(WSTRING_USERDEF,\tLITERAL) /* L\"string\"_suffix - C++-0x */\t\\\n   TK(STRING16_USERDEF,\tLITERAL) /* u\"string\"_suffix - C++-0x */\t\\\n@@ -339,6 +341,9 @@ struct cpp_options\n   /* Nonzero means process u/U prefix literals (UTF-16/32).  */\n   unsigned char uliterals;\n \n+  /* Nonzero means process u8 prefixed character literals (UTF-8).  */\n+  unsigned char utf8_char_literals;\n+\n   /* Nonzero means process r/R raw strings.  If this is set, uliterals\n      must be set as well.  */\n   unsigned char rliterals;"}, {"sha": "2d5626fd9ab770e22a6f5e87155a19d6978e2489", "filename": "libcpp/init.c", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe95b0366a02855988d4c626de2045dae6e11502/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe95b0366a02855988d4c626de2045dae6e11502/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=fe95b0366a02855988d4c626de2045dae6e11502", "patch": "@@ -90,26 +90,27 @@ struct lang_flags\n   char binary_constants;\n   char digit_separators;\n   char trigraphs;\n+  char utf8_char_literals;\n };\n \n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig */\n-  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0 },\n-  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0 },\n-  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0 },\n-  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1 },\n-  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1 },\n-  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1 },\n-  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1 },\n-  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0 },\n-  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1 },\n-  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0 },\n-  /* CXX11    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1 },\n-  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0 },\n-  /* CXX14    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1 },\n-  /* GNUCXX1Z */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0 },\n-  /* CXX1Z    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0 },\n-  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0 }\n+{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig u8chlit */\n+  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0 },\n+  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0 },\n+  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0 },\n+  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0 },\n+  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0 },\n+  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0 },\n+  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0 },\n+  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0 },\n+  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0 },\n+  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0 },\n+  /* CXX11    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1,   0 },\n+  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   0 },\n+  /* CXX14    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1,   0 },\n+  /* GNUCXX1Z */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1 },\n+  /* CXX1Z    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1 },\n+  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0 }\n };\n \n /* Sets internal flags correctly for a given language.  */\n@@ -133,6 +134,7 @@ cpp_set_lang (cpp_reader *pfile, enum c_lang lang)\n   CPP_OPTION (pfile, binary_constants)\t\t = l->binary_constants;\n   CPP_OPTION (pfile, digit_separators)\t\t = l->digit_separators;\n   CPP_OPTION (pfile, trigraphs)\t\t\t = l->trigraphs;\n+  CPP_OPTION (pfile, utf8_char_literals)\t = l->utf8_char_literals;\n }\n \n /* Initialize library global state.  */"}, {"sha": "8f2bdc80e117214adf733200434f8e906bf92da7", "filename": "libcpp/lex.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe95b0366a02855988d4c626de2045dae6e11502/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe95b0366a02855988d4c626de2045dae6e11502/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=fe95b0366a02855988d4c626de2045dae6e11502", "patch": "@@ -1858,7 +1858,8 @@ lex_string (cpp_reader *pfile, cpp_token *token, const uchar *base)\n   else if (terminator == '\\'')\n     type = (*base == 'L' ? CPP_WCHAR :\n \t    *base == 'U' ? CPP_CHAR32 :\n-\t    *base == 'u' ? CPP_CHAR16 : CPP_CHAR);\n+\t    *base == 'u' ? (base[1] == '8' ? CPP_UTF8CHAR : CPP_CHAR16)\n+\t\t\t : CPP_CHAR);\n   else\n     terminator = '>', type = CPP_HEADER_NAME;\n \n@@ -2403,7 +2404,8 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t\t  && CPP_OPTION (pfile, rliterals))\n \t      || (*buffer->cur == '8'\n \t\t  && c == 'u'\n-\t\t  && (buffer->cur[1] == '\"'\n+\t\t  && ((buffer->cur[1] == '\"' || (buffer->cur[1] == '\\''\n+\t\t\t\t&& CPP_OPTION (pfile, utf8_char_literals)))\n \t\t      || (buffer->cur[1] == 'R' && buffer->cur[2] == '\"'\n \t\t\t  && CPP_OPTION (pfile, rliterals)))))\n \t    {"}, {"sha": "786c21beba37279f40cbd7161991d624adde68fd", "filename": "libcpp/macro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe95b0366a02855988d4c626de2045dae6e11502/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe95b0366a02855988d4c626de2045dae6e11502/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=fe95b0366a02855988d4c626de2045dae6e11502", "patch": "@@ -531,7 +531,7 @@ stringify_arg (cpp_reader *pfile, macro_arg *arg)\n \t\t   || token->type == CPP_WSTRING || token->type == CPP_WCHAR\n \t\t   || token->type == CPP_STRING32 || token->type == CPP_CHAR32\n \t\t   || token->type == CPP_STRING16 || token->type == CPP_CHAR16\n-\t\t   || token->type == CPP_UTF8STRING\n+\t\t   || token->type == CPP_UTF8STRING || token->type == CPP_UTF8CHAR\n \t\t   || cpp_userdef_string_p (token->type)\n \t\t   || cpp_userdef_char_p (token->type));\n "}]}