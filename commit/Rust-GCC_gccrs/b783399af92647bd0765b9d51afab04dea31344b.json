{"sha": "b783399af92647bd0765b9d51afab04dea31344b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc4MzM5OWFmOTI2NDdiZDA3NjViOWQ1MWFmYWIwNGRlYTMxMzQ0Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-06-16T09:13:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-06-16T09:13:28Z"}, "message": "re PR sanitizer/81094 (-fsanitize=object-size does not instrument aggregate call arguments)\n\n\tPR sanitizer/81094\n\t* ubsan.c (instrument_null): Add T argument, use it instead\n\tof computing it based on IS_LHS.\n\t(instrument_object_size): Likewise.\n\t(pass_ubsan::execute): Adjust instrument_null and\n\tinstrument_object_size callers to pass gimple_get_lhs or\n\tgimple_assign_rhs1 result to it.  Use instrument_null instead of\n\tcalling get_base_address and instrument_mem_ref.  Handle\n\taggregate call arguments for object-size sanitization.\n\n\t* c-c++-common/ubsan/object-size-11.c: New test.\n\nFrom-SVN: r249239", "tree": {"sha": "ba56515e1806cecd997677de49a2ab9d1d38b78a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba56515e1806cecd997677de49a2ab9d1d38b78a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b783399af92647bd0765b9d51afab04dea31344b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b783399af92647bd0765b9d51afab04dea31344b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b783399af92647bd0765b9d51afab04dea31344b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b783399af92647bd0765b9d51afab04dea31344b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ec3c9c841aea8b492aa2fc0db5d3c734b643725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ec3c9c841aea8b492aa2fc0db5d3c734b643725", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ec3c9c841aea8b492aa2fc0db5d3c734b643725"}], "stats": {"total": 102, "additions": 89, "deletions": 13}, "files": [{"sha": "d6f2d7240d41d81fd1db09581ef30a0cb933d48e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b783399af92647bd0765b9d51afab04dea31344b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b783399af92647bd0765b9d51afab04dea31344b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b783399af92647bd0765b9d51afab04dea31344b", "patch": "@@ -1,3 +1,15 @@\n+2017-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/81094\n+\t* ubsan.c (instrument_null): Add T argument, use it instead\n+\tof computing it based on IS_LHS.\n+\t(instrument_object_size): Likewise.\n+\t(pass_ubsan::execute): Adjust instrument_null and\n+\tinstrument_object_size callers to pass gimple_get_lhs or\n+\tgimple_assign_rhs1 result to it.  Use instrument_null instead of\n+\tcalling get_base_address and instrument_mem_ref.  Handle\n+\taggregate call arguments for object-size sanitization.\n+\n 2017-06-16  Yury Gribov  <tetra2005@gmail.com>\n \n \tPR tree-optimization/81089"}, {"sha": "2257edc786453dc1fda5430cb7c9eff5ebe8001b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b783399af92647bd0765b9d51afab04dea31344b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b783399af92647bd0765b9d51afab04dea31344b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b783399af92647bd0765b9d51afab04dea31344b", "patch": "@@ -1,3 +1,8 @@\n+2017-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/81094\n+\t* c-c++-common/ubsan/object-size-11.c: New test.\n+\n 2017-06-15  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/80560"}, {"sha": "866c7ed4086e5b93e2c4e63ed1333ab369cc4c81", "filename": "gcc/testsuite/c-c++-common/ubsan/object-size-11.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b783399af92647bd0765b9d51afab04dea31344b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fobject-size-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b783399af92647bd0765b9d51afab04dea31344b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fobject-size-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fobject-size-11.c?ref=b783399af92647bd0765b9d51afab04dea31344b", "patch": "@@ -0,0 +1,53 @@\n+/* PR sanitizer/81094 */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O2\" } } */\n+/* { dg-options \"-fsanitize=object-size\" } */\n+\n+#define N 20\n+\n+struct S { int i; };\n+\n+__attribute__((noinline, noclone)) void\n+f0 (struct S s)\n+{\n+  asm volatile (\"\" : : \"r\" (s.i) : \"memory\");\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f1 (int i)\n+{\n+  char *orig;\n+  struct S *p;\n+  orig = (char *) __builtin_calloc (N, sizeof (struct S));\n+  p = (struct S *) orig;\n+  f0 (*(p + i));\n+  f0 (p[i]);\n+  p++;\n+  f0 (p[i - 1]);\n+  f0 (*(p + i - 1));\n+  __builtin_free (orig);\n+}\n+\n+/* { dg-output \"load of address \\[^\\n\\r]* with insufficient space for an object of type 'struct S'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*note: pointer points here\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\\\^\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*load of address \\[^\\n\\r]* with insufficient space for an object of type 'struct S'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*note: pointer points here\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\\\^\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*load of address \\[^\\n\\r]* with insufficient space for an object of type 'struct S'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*note: pointer points here\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\\\^\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*load of address \\[^\\n\\r]* with insufficient space for an object of type 'struct S'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*note: pointer points here\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\\\^\" } */\n+\n+int\n+main ()\n+{\n+  f1 (N);\n+  return 0;\n+}"}, {"sha": "52ba5b586bda1130889ee874c1eb539a143ef540", "filename": "gcc/ubsan.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b783399af92647bd0765b9d51afab04dea31344b/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b783399af92647bd0765b9d51afab04dea31344b/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=b783399af92647bd0765b9d51afab04dea31344b", "patch": "@@ -1204,10 +1204,8 @@ instrument_mem_ref (tree mem, tree base, gimple_stmt_iterator *iter,\n /* Perform the pointer instrumentation.  */\n \n static void\n-instrument_null (gimple_stmt_iterator gsi, bool is_lhs)\n+instrument_null (gimple_stmt_iterator gsi, tree t, bool is_lhs)\n {\n-  gimple *stmt = gsi_stmt (gsi);\n-  tree t = is_lhs ? gimple_get_lhs (stmt) : gimple_assign_rhs1 (stmt);\n   /* Handle also e.g. &s->i.  */\n   if (TREE_CODE (t) == ADDR_EXPR)\n     t = TREE_OPERAND (t, 0);\n@@ -1754,11 +1752,10 @@ instrument_nonnull_return (gimple_stmt_iterator *gsi)\n    points to an out-of-bounds location.  */\n \n static void\n-instrument_object_size (gimple_stmt_iterator *gsi, bool is_lhs)\n+instrument_object_size (gimple_stmt_iterator *gsi, tree t, bool is_lhs)\n {\n   gimple *stmt = gsi_stmt (*gsi);\n   location_t loc = gimple_location (stmt);\n-  tree t = is_lhs ? gimple_get_lhs (stmt) : gimple_assign_rhs1 (stmt);\n   tree type;\n   tree index = NULL_TREE;\n   HOST_WIDE_INT size_in_bytes;\n@@ -1989,9 +1986,9 @@ pass_ubsan::execute (function *fun)\n \t  if (sanitize_flags_p (SANITIZE_NULL | SANITIZE_ALIGNMENT, fun->decl))\n \t    {\n \t      if (gimple_store_p (stmt))\n-\t\tinstrument_null (gsi, true);\n+\t\tinstrument_null (gsi, gimple_get_lhs (stmt), true);\n \t      if (gimple_assign_single_p (stmt))\n-\t\tinstrument_null (gsi, false);\n+\t\tinstrument_null (gsi, gimple_assign_rhs1 (stmt), false);\n \t      if (is_gimple_call (stmt))\n \t\t{\n \t\t  unsigned args_num = gimple_call_num_args (stmt);\n@@ -2000,10 +1997,7 @@ pass_ubsan::execute (function *fun)\n \t\t      tree arg = gimple_call_arg (stmt, i);\n \t\t      if (is_gimple_reg (arg) || is_gimple_min_invariant (arg))\n \t\t\tcontinue;\n-\t\t      tree base = get_base_address (arg);\n-\t\t      if (TREE_CODE (base) == MEM_REF\n-\t\t\t  && TREE_CODE (TREE_OPERAND (base, 0)) == SSA_NAME)\n-\t\t\tinstrument_mem_ref (arg, base, &gsi, false);\n+\t\t      instrument_null (gsi, arg, false);\n \t\t    }\n \t\t}\n \t    }\n@@ -2033,9 +2027,21 @@ pass_ubsan::execute (function *fun)\n \t  if (sanitize_flags_p (SANITIZE_OBJECT_SIZE, fun->decl))\n \t    {\n \t      if (gimple_store_p (stmt))\n-\t\tinstrument_object_size (&gsi, true);\n+\t\tinstrument_object_size (&gsi, gimple_get_lhs (stmt), true);\n \t      if (gimple_assign_load_p (stmt))\n-\t\tinstrument_object_size (&gsi, false);\n+\t\tinstrument_object_size (&gsi, gimple_assign_rhs1 (stmt),\n+\t\t\t\t\tfalse);\n+\t      if (is_gimple_call (stmt))\n+\t\t{\n+\t\t  unsigned args_num = gimple_call_num_args (stmt);\n+\t\t  for (unsigned i = 0; i < args_num; ++i)\n+\t\t    {\n+\t\t      tree arg = gimple_call_arg (stmt, i);\n+\t\t      if (is_gimple_reg (arg) || is_gimple_min_invariant (arg))\n+\t\t\tcontinue;\n+\t\t      instrument_object_size (&gsi, arg, false);\n+\t\t    }\n+\t\t}\n \t    }\n \n \t  gsi_next (&gsi);"}]}