{"sha": "272325bd6abba598a8f125dab36b626acb648b03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcyMzI1YmQ2YWJiYTU5OGE4ZjEyNWRhYjM2YjYyNmFjYjY0OGIwMw==", "commit": {"author": {"name": "Wei Mi", "email": "wmi@google.com", "date": "2014-05-08T16:44:52Z"}, "committer": {"name": "Wei Mi", "email": "wmi@gcc.gnu.org", "date": "2014-05-08T16:44:52Z"}, "message": "re PR target/58066 (__tls_get_addr is called with misaligned stack on x86-64)\n\ngcc/\n2014-05-08  Wei Mi  <wmi@google.com>\n\n\tPR target/58066\n\t* config/i386/i386.c (ix86_compute_frame_layout):\n\tUpdate preferred_stack_boundary for call, expanded from\n\ttls descriptor.\n\t* config/i386/i386.md:\n\t(*tls_global_dynamic_32_gnu): Update RTX to depend on\n\tSP register.\n\t(*tls_local_dynamic_base_32_gnu): Ditto.\n\t(*tls_local_dynamic_32_once): Ditto.\n\t(tls_global_dynamic_64_<mode>): Set\n\tix86_tls_descriptor_calls_expanded_in_cfun.\n\t(tls_local_dynamic_base_64_<mode>): Ditto.\n\t(tls_global_dynamic_32): Set\n\tix86_tls_descriptor_calls_expanded_in_cfun. Update RTX\n\tto depend on SP register.\n\t(tls_local_dynamic_base_32): Ditto.\n\ngcc/testsuite/\n2014-05-08  Wei Mi  <wmi@google.com>\n\n\tPR target/58066\n\t* gcc.target/i386/pr58066.c: New test.\n\nFrom-SVN: r210222", "tree": {"sha": "21dc9c071aef142dd9b238437c5e8dad5565959f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21dc9c071aef142dd9b238437c5e8dad5565959f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/272325bd6abba598a8f125dab36b626acb648b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272325bd6abba598a8f125dab36b626acb648b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/272325bd6abba598a8f125dab36b626acb648b03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272325bd6abba598a8f125dab36b626acb648b03/comments", "author": {"login": "wmi-11", "id": 59629650, "node_id": "MDQ6VXNlcjU5NjI5NjUw", "avatar_url": "https://avatars.githubusercontent.com/u/59629650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wmi-11", "html_url": "https://github.com/wmi-11", "followers_url": "https://api.github.com/users/wmi-11/followers", "following_url": "https://api.github.com/users/wmi-11/following{/other_user}", "gists_url": "https://api.github.com/users/wmi-11/gists{/gist_id}", "starred_url": "https://api.github.com/users/wmi-11/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wmi-11/subscriptions", "organizations_url": "https://api.github.com/users/wmi-11/orgs", "repos_url": "https://api.github.com/users/wmi-11/repos", "events_url": "https://api.github.com/users/wmi-11/events{/privacy}", "received_events_url": "https://api.github.com/users/wmi-11/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60c52f66f737d28bc9049b18d32bbc2b66ccb519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c52f66f737d28bc9049b18d32bbc2b66ccb519", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60c52f66f737d28bc9049b18d32bbc2b66ccb519"}], "stats": {"total": 96, "additions": 80, "deletions": 16}, "files": [{"sha": "38c03f5abc71075ec122ec39be4cce3caa3bda78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272325bd6abba598a8f125dab36b626acb648b03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272325bd6abba598a8f125dab36b626acb648b03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=272325bd6abba598a8f125dab36b626acb648b03", "patch": "@@ -1,3 +1,22 @@\n+2014-05-08  Wei Mi  <wmi@google.com>\n+\n+\tPR target/58066\n+\t* config/i386/i386.c (ix86_compute_frame_layout):\n+\tUpdate preferred_stack_boundary for call, expanded from\n+\ttls descriptor.\n+\t* config/i386/i386.md:\n+\t(*tls_global_dynamic_32_gnu): Update RTX to depend on\n+\tSP register.\n+\t(*tls_local_dynamic_base_32_gnu): Ditto.\n+\t(*tls_local_dynamic_32_once): Ditto.\n+\t(tls_global_dynamic_64_<mode>): Set\n+\tix86_tls_descriptor_calls_expanded_in_cfun.\n+\t(tls_local_dynamic_base_64_<mode>): Ditto.\n+\t(tls_global_dynamic_32): Set\n+\tix86_tls_descriptor_calls_expanded_in_cfun. Update RTX\n+\tto depend on SP register.\n+\t(tls_local_dynamic_base_32): Ditto.\n+\n 2014-05-08  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/arm_neon.h: Update comment."}, {"sha": "3a342fb528f4bea86dad6e85ab211d68aba4f121", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272325bd6abba598a8f125dab36b626acb648b03/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272325bd6abba598a8f125dab36b626acb648b03/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=272325bd6abba598a8f125dab36b626acb648b03", "patch": "@@ -9486,20 +9486,30 @@ ix86_compute_frame_layout (struct ix86_frame *frame)\n   frame->nregs = ix86_nsaved_regs ();\n   frame->nsseregs = ix86_nsaved_sseregs ();\n \n-  stack_alignment_needed = crtl->stack_alignment_needed / BITS_PER_UNIT;\n-  preferred_alignment = crtl->preferred_stack_boundary / BITS_PER_UNIT;\n-\n   /* 64-bit MS ABI seem to require stack alignment to be always 16 except for\n      function prologues and leaf.  */\n-  if ((TARGET_64BIT_MS_ABI && preferred_alignment < 16)\n+  if ((TARGET_64BIT_MS_ABI && crtl->preferred_stack_boundary < 128)\n       && (!crtl->is_leaf || cfun->calls_alloca != 0\n           || ix86_current_function_calls_tls_descriptor))\n     {\n-      preferred_alignment = 16;\n-      stack_alignment_needed = 16;\n       crtl->preferred_stack_boundary = 128;\n       crtl->stack_alignment_needed = 128;\n     }\n+  /* preferred_stack_boundary is never updated for call\n+     expanded from tls descriptor. Update it here. We don't update it in\n+     expand stage because according to the comments before\n+     ix86_current_function_calls_tls_descriptor, tls calls may be optimized\n+     away.  */\n+  else if (ix86_current_function_calls_tls_descriptor\n+\t   && crtl->preferred_stack_boundary < PREFERRED_STACK_BOUNDARY)\n+    {\n+      crtl->preferred_stack_boundary = PREFERRED_STACK_BOUNDARY;\n+      if (crtl->stack_alignment_needed < PREFERRED_STACK_BOUNDARY)\n+\tcrtl->stack_alignment_needed = PREFERRED_STACK_BOUNDARY;\n+    }\n+\n+  stack_alignment_needed = crtl->stack_alignment_needed / BITS_PER_UNIT;\n+  preferred_alignment = crtl->preferred_stack_boundary / BITS_PER_UNIT;\n \n   gcc_assert (!size || stack_alignment_needed);\n   gcc_assert (preferred_alignment >= STACK_BOUNDARY / BITS_PER_UNIT);"}, {"sha": "30dafec52cfc6dc273fbed394c5af23d544d5ded", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272325bd6abba598a8f125dab36b626acb648b03/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272325bd6abba598a8f125dab36b626acb648b03/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=272325bd6abba598a8f125dab36b626acb648b03", "patch": "@@ -12530,7 +12530,8 @@\n \t(unspec:SI\n \t [(match_operand:SI 1 \"register_operand\" \"b\")\n \t  (match_operand 2 \"tls_symbolic_operand\")\n-\t  (match_operand 3 \"constant_call_address_operand\" \"z\")]\n+\t  (match_operand 3 \"constant_call_address_operand\" \"z\")\n+\t  (reg:SI SP_REG)]\n \t UNSPEC_TLS_GD))\n    (clobber (match_scratch:SI 4 \"=d\"))\n    (clobber (match_scratch:SI 5 \"=c\"))\n@@ -12555,11 +12556,14 @@\n     [(set (match_operand:SI 0 \"register_operand\")\n \t  (unspec:SI [(match_operand:SI 2 \"register_operand\")\n \t\t      (match_operand 1 \"tls_symbolic_operand\")\n-\t\t      (match_operand 3 \"constant_call_address_operand\")]\n+\t\t      (match_operand 3 \"constant_call_address_operand\")\n+\t\t      (reg:SI SP_REG)]\n \t\t     UNSPEC_TLS_GD))\n      (clobber (match_scratch:SI 4))\n      (clobber (match_scratch:SI 5))\n-     (clobber (reg:CC FLAGS_REG))])])\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"\"\n+  \"ix86_tls_descriptor_calls_expanded_in_cfun = true;\")\n \n (define_insn \"*tls_global_dynamic_64_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=a\")\n@@ -12614,13 +12618,15 @@\n \t   (const_int 0)))\n      (unspec:P [(match_operand 1 \"tls_symbolic_operand\")]\n \t       UNSPEC_TLS_GD)])]\n-  \"TARGET_64BIT\")\n+  \"TARGET_64BIT\"\n+  \"ix86_tls_descriptor_calls_expanded_in_cfun = true;\")\n \n (define_insn \"*tls_local_dynamic_base_32_gnu\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(unspec:SI\n \t [(match_operand:SI 1 \"register_operand\" \"b\")\n-\t  (match_operand 2 \"constant_call_address_operand\" \"z\")]\n+\t  (match_operand 2 \"constant_call_address_operand\" \"z\")\n+\t  (reg:SI SP_REG)]\n \t UNSPEC_TLS_LD_BASE))\n    (clobber (match_scratch:SI 3 \"=d\"))\n    (clobber (match_scratch:SI 4 \"=c\"))\n@@ -12646,11 +12652,14 @@\n      [(set (match_operand:SI 0 \"register_operand\")\n \t   (unspec:SI\n \t    [(match_operand:SI 1 \"register_operand\")\n-\t     (match_operand 2 \"constant_call_address_operand\")]\n+\t     (match_operand 2 \"constant_call_address_operand\")\n+\t     (reg:SI SP_REG)]\n \t    UNSPEC_TLS_LD_BASE))\n       (clobber (match_scratch:SI 3))\n       (clobber (match_scratch:SI 4))\n-      (clobber (reg:CC FLAGS_REG))])])\n+      (clobber (reg:CC FLAGS_REG))])]\n+  \"\"\n+  \"ix86_tls_descriptor_calls_expanded_in_cfun = true;\")\n \n (define_insn \"*tls_local_dynamic_base_64_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=a\")\n@@ -12697,7 +12706,8 @@\n \t    (mem:QI (match_operand 1))\n \t    (const_int 0)))\n       (unspec:P [(const_int 0)] UNSPEC_TLS_LD_BASE)])]\n-  \"TARGET_64BIT\")\n+  \"TARGET_64BIT\"\n+  \"ix86_tls_descriptor_calls_expanded_in_cfun = true;\")\n \n ;; Local dynamic of a single variable is a lose.  Show combine how\n ;; to convert that back to global dynamic.\n@@ -12706,7 +12716,8 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(plus:SI\n \t (unspec:SI [(match_operand:SI 1 \"register_operand\" \"b\")\n-\t\t     (match_operand 2 \"constant_call_address_operand\" \"z\")]\n+\t\t     (match_operand 2 \"constant_call_address_operand\" \"z\")\n+\t\t     (reg:SI SP_REG)]\n \t\t    UNSPEC_TLS_LD_BASE)\n \t (const:SI (unspec:SI\n \t\t    [(match_operand 3 \"tls_symbolic_operand\")]\n@@ -12719,7 +12730,8 @@\n   \"\"\n   [(parallel\n      [(set (match_dup 0)\n-\t   (unspec:SI [(match_dup 1) (match_dup 3) (match_dup 2)]\n+\t   (unspec:SI [(match_dup 1) (match_dup 3) (match_dup 2)\n+\t\t       (reg:SI SP_REG)]\n \t\t      UNSPEC_TLS_GD))\n       (clobber (match_dup 4))\n       (clobber (match_dup 5))"}, {"sha": "f5132d80293b6ffc26d6d5324ef868f6e6889a02", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272325bd6abba598a8f125dab36b626acb648b03/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272325bd6abba598a8f125dab36b626acb648b03/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=272325bd6abba598a8f125dab36b626acb648b03", "patch": "@@ -1,3 +1,8 @@\n+2014-05-08  Wei Mi  <wmi@google.com>\n+\n+\tPR target/58066\n+\t* gcc.target/i386/pr58066.c: New test.\n+\n 2014-05-08  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.target/i386/avx256-unaligned-load-2.c,"}, {"sha": "142e21dbaaa40ba6b1d1bf4427a3248bd6bfc80c", "filename": "gcc/testsuite/gcc.target/i386/pr58066.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272325bd6abba598a8f125dab36b626acb648b03/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr58066.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272325bd6abba598a8f125dab36b626acb648b03/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr58066.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr58066.c?ref=272325bd6abba598a8f125dab36b626acb648b03", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fPIC -O2\" } */\n+\n+/* Check whether the stack frame starting addresses of tls expanded calls\n+   in foo and goo are 16bytes aligned.  */\n+static __thread char ccc1;\n+void* foo()\n+{\n+ return &ccc1;\n+}\n+\n+__thread char ccc2;\n+void* goo()\n+{\n+ return &ccc2;\n+}\n+\n+/* { dg-final { scan-assembler-times \".cfi_def_cfa_offset 16\" 2 } } */"}]}