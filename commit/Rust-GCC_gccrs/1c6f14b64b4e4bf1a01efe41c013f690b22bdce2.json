{"sha": "1c6f14b64b4e4bf1a01efe41c013f690b22bdce2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM2ZjE0YjY0YjRlNGJmMWEwMWVmZTQxYzAxM2Y2OTBiMjJiZGNlMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-07-10T09:01:43Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-10T09:01:43Z"}, "message": "[Ada] GNAT RM: add note about debuggers for Scalar_Storage_Order\n\n2019-07-10  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_attributes.rst\n\t(Scalar_Storage_Order): Minor tweaks.  Add note about debuggers.\n\t* gnat_rm.texi: Regenerate.\n\nFrom-SVN: r273337", "tree": {"sha": "d70cb66533a81f13ad8d1135d6c7da83870d9ea1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d70cb66533a81f13ad8d1135d6c7da83870d9ea1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c6f14b64b4e4bf1a01efe41c013f690b22bdce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c6f14b64b4e4bf1a01efe41c013f690b22bdce2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c6f14b64b4e4bf1a01efe41c013f690b22bdce2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c6f14b64b4e4bf1a01efe41c013f690b22bdce2/comments", "author": null, "committer": null, "parents": [{"sha": "5b4ce2a0360a79751107c245c2e44c0932835164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b4ce2a0360a79751107c245c2e44c0932835164", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b4ce2a0360a79751107c245c2e44c0932835164"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "e870be4cc00552a949497386120eadaa320fbb75", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6f14b64b4e4bf1a01efe41c013f690b22bdce2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6f14b64b4e4bf1a01efe41c013f690b22bdce2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1c6f14b64b4e4bf1a01efe41c013f690b22bdce2", "patch": "@@ -1,3 +1,9 @@\n+2019-07-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_attributes.rst\n+\t(Scalar_Storage_Order): Minor tweaks.  Add note about debuggers.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2019-07-10  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch4.adb (Expand_N_Case_Expression): Mark the generated"}, {"sha": "c75d9948ae8f29269b49d998f6ae1fd1cc04074b", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_attributes.rst", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6f14b64b4e4bf1a01efe41c013f690b22bdce2/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6f14b64b4e4bf1a01efe41c013f690b22bdce2/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst?ref=1c6f14b64b4e4bf1a01efe41c013f690b22bdce2", "patch": "@@ -967,8 +967,8 @@ of the use of this feature:\n      --  the former is used.\n \n \n-Other properties are as for standard representation attribute ``Bit_Order``,\n-as defined by Ada RM 13.5.3(4). The default is ``System.Default_Bit_Order``.\n+Other properties are as for the standard representation attribute ``Bit_Order``\n+defined by Ada RM 13.5.3(4). The default is ``System.Default_Bit_Order``.\n \n For a record type ``T``, if ``T'Scalar_Storage_Order`` is\n specified explicitly, it shall be equal to ``T'Bit_Order``. Note:\n@@ -978,8 +978,8 @@ specified explicitly and set to the same value.\n \n Derived types inherit an explicitly set scalar storage order from their parent\n types. This may be overridden for the derived type by giving an explicit scalar\n-storage order for the derived type. For a record extension, the derived type\n-must have the same scalar storage order as the parent type.\n+storage order for it. However, for a record extension, the derived type must\n+have the same scalar storage order as the parent type.\n \n A component of a record type that is itself a record or an array and that does\n not start and end on a byte boundary must have have the same scalar storage\n@@ -1018,15 +1018,18 @@ inheritance in the case of a derived type), then the default is normally\n the native ordering of the target, but this default can be overridden using\n pragma ``Default_Scalar_Storage_Order``.\n \n-Note that if a component of ``T`` is itself of a record or array type,\n-the specfied ``Scalar_Storage_Order`` does *not* apply to that nested type:\n-an explicit attribute definition clause must be provided for the component\n-type as well if desired.\n+If a component of ``T`` is itself of a record or array type, the specfied\n+``Scalar_Storage_Order`` does *not* apply to that nested type: an explicit\n+attribute definition clause must be provided for the component type as well\n+if desired.\n \n Note that the scalar storage order only affects the in-memory data\n representation. It has no effect on the representation used by stream\n attributes.\n \n+Note that debuggers may be unable to display the correct value of scalar\n+components of a type for which the opposite storage order is specified.\n+\n .. _Attribute_Simple_Storage_Pool:\n \n Attribute Simple_Storage_Pool"}, {"sha": "597752fb1c19670ede05d9c42a83405ed661d3e8", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6f14b64b4e4bf1a01efe41c013f690b22bdce2/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6f14b64b4e4bf1a01efe41c013f690b22bdce2/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=1c6f14b64b4e4bf1a01efe41c013f690b22bdce2", "patch": "@@ -11270,8 +11270,8 @@ for Date'Scalar_Storage_Order use System.High_Order_First;\n --  the former is used.\n @end example\n \n-Other properties are as for standard representation attribute @code{Bit_Order},\n-as defined by Ada RM 13.5.3(4). The default is @code{System.Default_Bit_Order}.\n+Other properties are as for the standard representation attribute @code{Bit_Order}\n+defined by Ada RM 13.5.3(4). The default is @code{System.Default_Bit_Order}.\n \n For a record type @code{T}, if @code{T'Scalar_Storage_Order} is\n specified explicitly, it shall be equal to @code{T'Bit_Order}. Note:\n@@ -11281,8 +11281,8 @@ specified explicitly and set to the same value.\n \n Derived types inherit an explicitly set scalar storage order from their parent\n types. This may be overridden for the derived type by giving an explicit scalar\n-storage order for the derived type. For a record extension, the derived type\n-must have the same scalar storage order as the parent type.\n+storage order for it. However, for a record extension, the derived type must\n+have the same scalar storage order as the parent type.\n \n A component of a record type that is itself a record or an array and that does\n not start and end on a byte boundary must have have the same scalar storage\n@@ -11332,15 +11332,18 @@ inheritance in the case of a derived type), then the default is normally\n the native ordering of the target, but this default can be overridden using\n pragma @code{Default_Scalar_Storage_Order}.\n \n-Note that if a component of @code{T} is itself of a record or array type,\n-the specfied @code{Scalar_Storage_Order} does @emph{not} apply to that nested type:\n-an explicit attribute definition clause must be provided for the component\n-type as well if desired.\n+If a component of @code{T} is itself of a record or array type, the specfied\n+@code{Scalar_Storage_Order} does @emph{not} apply to that nested type: an explicit\n+attribute definition clause must be provided for the component type as well\n+if desired.\n \n Note that the scalar storage order only affects the in-memory data\n representation. It has no effect on the representation used by stream\n attributes.\n \n+Note that debuggers may be unable to display the correct value of scalar\n+components of a type for which the opposite storage order is specified.\n+\n @node Attribute Simple_Storage_Pool,Attribute Small,Attribute Scalar_Storage_Order,Implementation Defined Attributes\n @anchor{gnat_rm/implementation_defined_attributes attribute-simple-storage-pool}@anchor{e7}@anchor{gnat_rm/implementation_defined_attributes id5}@anchor{19c}\n @section Attribute Simple_Storage_Pool"}]}