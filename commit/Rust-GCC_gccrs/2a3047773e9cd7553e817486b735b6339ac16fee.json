{"sha": "2a3047773e9cd7553e817486b735b6339ac16fee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEzMDQ3NzczZTljZDc1NTNlODE3NDg2YjczNWI2MzM5YWMxNmZlZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-11-18T20:11:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-11-18T20:11:32Z"}, "message": "Support GGC finalizers with PCH.\n\n\t* ggc-page.c (ggc_globals): Change finalizers and vec_finalizers\n\tto be vecs of vecs.\n\t(add_finalizer): Split out from ggc_internal_alloc.\n\t(ggc_handle_finalizers): Run finalizers for the current depth.\n\t(init_ggc, ggc_pch_read): Reserve space for finalizers.\n\nFrom-SVN: r230564", "tree": {"sha": "f50900d81b1f54d09522bff2e91eb373ca2c9544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f50900d81b1f54d09522bff2e91eb373ca2c9544"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a3047773e9cd7553e817486b735b6339ac16fee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a3047773e9cd7553e817486b735b6339ac16fee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a3047773e9cd7553e817486b735b6339ac16fee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a3047773e9cd7553e817486b735b6339ac16fee/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "231f6e0927960bb95e8670e536888902116dd293", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231f6e0927960bb95e8670e536888902116dd293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/231f6e0927960bb95e8670e536888902116dd293"}], "stats": {"total": 101, "additions": 70, "deletions": 31}, "files": [{"sha": "635de672c9786253ee972c661e2120653da6c1f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3047773e9cd7553e817486b735b6339ac16fee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3047773e9cd7553e817486b735b6339ac16fee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a3047773e9cd7553e817486b735b6339ac16fee", "patch": "@@ -1,3 +1,11 @@\n+2015-11-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* ggc-page.c (ggc_globals): Change finalizers and vec_finalizers\n+\tto be vecs of vecs.\n+\t(add_finalizer): Split out from ggc_internal_alloc.\n+\t(ggc_handle_finalizers): Run finalizers for the current depth.\n+\t(init_ggc, ggc_pch_read): Reserve space for finalizers.\n+\n 2015-11-18  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR target/68410"}, {"sha": "1a285f33f8936abe677ea33cf9c6eef6d338d6ad", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 62, "deletions": 31, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3047773e9cd7553e817486b735b6339ac16fee/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3047773e9cd7553e817486b735b6339ac16fee/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=2a3047773e9cd7553e817486b735b6339ac16fee", "patch": "@@ -361,7 +361,7 @@ class vec_finalizer\n   void (*m_function)(void *);\n   size_t m_object_size;\n   size_t m_n_objects;\n-  };\n+};\n \n #ifdef ENABLE_GC_ALWAYS_COLLECT\n /* List of free objects to be verified as actually free on the\n@@ -456,11 +456,11 @@ static struct ggc_globals\n      better runtime data access pattern.  */\n   unsigned long **save_in_use;\n \n-  /* Finalizers for single objects.  */\n-  vec<finalizer> finalizers;\n+  /* Finalizers for single objects.  The first index is collection_depth.  */\n+  vec<vec<finalizer> > finalizers;\n \n   /* Finalizers for vectors of objects.  */\n-  vec<vec_finalizer> vec_finalizers;\n+  vec<vec<vec_finalizer> > vec_finalizers;\n \n #ifdef ENABLE_GC_ALWAYS_COLLECT\n   /* List of free objects to be verified as actually free on the\n@@ -1240,6 +1240,25 @@ ggc_round_alloc_size (size_t requested_size)\n   return size;\n }\n \n+/* Push a finalizer onto the appropriate vec.  */\n+\n+static void\n+add_finalizer (void *result, void (*f)(void *), size_t s, size_t n)\n+{\n+  if (f == NULL)\n+    /* No finalizer.  */;\n+  else if (n == 1)\n+    {\n+      finalizer fin (result, f);\n+      G.finalizers[G.context_depth].safe_push (fin);\n+    }\n+  else\n+    {\n+      vec_finalizer fin (reinterpret_cast<uintptr_t> (result), f, s, n);\n+      G.vec_finalizers[G.context_depth].safe_push (fin);\n+    }\n+}\n+\n /* Allocate a chunk of memory of SIZE bytes.  Its contents are undefined.  */\n \n void *\n@@ -1387,11 +1406,8 @@ ggc_internal_alloc (size_t size, void (*f)(void *), size_t s, size_t n\n   /* For timevar statistics.  */\n   timevar_ggc_mem_total += object_size;\n \n-  if (f && n == 1)\n-    G.finalizers.safe_push (finalizer (result, f));\n-  else if (f)\n-    G.vec_finalizers.safe_push\n-      (vec_finalizer (reinterpret_cast<uintptr_t> (result), f, s, n));\n+  if (f)\n+    add_finalizer (result, f, s, n);\n \n   if (GATHER_STATISTICS)\n     {\n@@ -1788,6 +1804,11 @@ init_ggc (void)\n   G.by_depth_max = INITIAL_PTE_COUNT;\n   G.by_depth = XNEWVEC (page_entry *, G.by_depth_max);\n   G.save_in_use = XNEWVEC (unsigned long *, G.by_depth_max);\n+\n+  /* Allocate space for the depth 0 finalizers.  */\n+  G.finalizers.safe_push (vNULL);\n+  G.vec_finalizers.safe_push (vNULL);\n+  gcc_assert (G.finalizers.length() == 1);\n }\n \n /* Merge the SAVE_IN_USE_P and IN_USE_P arrays in P so that IN_USE_P\n@@ -1875,36 +1896,42 @@ clear_marks (void)\n static void\n ggc_handle_finalizers ()\n {\n-  if (G.context_depth != 0)\n-    return;\n-\n-  unsigned length = G.finalizers.length ();\n-  for (unsigned int i = 0; i < length;)\n+  unsigned dlen = G.finalizers.length();\n+  for (unsigned d = G.context_depth; d < dlen; ++d)\n     {\n-      finalizer &f = G.finalizers[i];\n-      if (!ggc_marked_p (f.addr ()))\n+      vec<finalizer> &v = G.finalizers[d];\n+      unsigned length = v.length ();\n+      for (unsigned int i = 0; i < length;)\n \t{\n-\t  f.call ();\n-\t  G.finalizers.unordered_remove (i);\n-\t  length--;\n+\t  finalizer &f = v[i];\n+\t  if (!ggc_marked_p (f.addr ()))\n+\t    {\n+\t      f.call ();\n+\t      v.unordered_remove (i);\n+\t      length--;\n+\t    }\n+\t  else\n+\t    i++;\n \t}\n-      else\n-\ti++;\n     }\n \n-\n-  length = G.vec_finalizers.length ();\n-  for (unsigned int i = 0; i < length;)\n+  gcc_assert (dlen == G.vec_finalizers.length());\n+  for (unsigned d = G.context_depth; d < dlen; ++d)\n     {\n-      vec_finalizer &f = G.vec_finalizers[i];\n-      if (!ggc_marked_p (f.addr ()))\n+      vec<vec_finalizer> &vv = G.vec_finalizers[d];\n+      unsigned length = vv.length ();\n+      for (unsigned int i = 0; i < length;)\n \t{\n-\t  f.call ();\n-\t  G.vec_finalizers.unordered_remove (i);\n-\t  length--;\n+\t  vec_finalizer &f = vv[i];\n+\t  if (!ggc_marked_p (f.addr ()))\n+\t    {\n+\t      f.call ();\n+\t      vv.unordered_remove (i);\n+\t      length--;\n+\t    }\n+\t  else\n+\t    i++;\n \t}\n-      else\n-\ti++;\n     }\n }\n \n@@ -2545,6 +2572,10 @@ ggc_pch_read (FILE *f, void *addr)\n      pages to be 1 too.  PCH pages will have depth 0.  */\n   gcc_assert (!G.context_depth);\n   G.context_depth = 1;\n+  /* Allocate space for the depth 1 finalizers.  */\n+  G.finalizers.safe_push (vNULL);\n+  G.vec_finalizers.safe_push (vNULL);\n+  gcc_assert (G.finalizers.length() == 2);\n   for (i = 0; i < NUM_ORDERS; i++)\n     {\n       page_entry *p;"}]}