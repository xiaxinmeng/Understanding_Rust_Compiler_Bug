{"sha": "3384321048639e88793a2324b87af1bbd1cf8eea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM4NDMyMTA0ODYzOWU4ODc5M2EyMzI0Yjg3YWYxYmJkMWNmOGVlYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-11-03T17:54:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-11-03T17:54:59Z"}, "message": "algo.h: Do not use default arguments in function template redeclarations (definitions).\n\n2014-11-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/parallel/algo.h: Do not use default arguments in function\n\ttemplate redeclarations (definitions).\n\nFrom-SVN: r217050", "tree": {"sha": "01ef6aed3a49c8ddd903d27216d4a028579cdca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01ef6aed3a49c8ddd903d27216d4a028579cdca9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3384321048639e88793a2324b87af1bbd1cf8eea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3384321048639e88793a2324b87af1bbd1cf8eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3384321048639e88793a2324b87af1bbd1cf8eea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3384321048639e88793a2324b87af1bbd1cf8eea/comments", "author": null, "committer": null, "parents": [{"sha": "24606f71372c26547b9c75754402e6508a21bd20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24606f71372c26547b9c75754402e6508a21bd20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24606f71372c26547b9c75754402e6508a21bd20"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "c3545bf7d65b9c9d2ca6f8680c561ee1d9bd1ec2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3384321048639e88793a2324b87af1bbd1cf8eea/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3384321048639e88793a2324b87af1bbd1cf8eea/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3384321048639e88793a2324b87af1bbd1cf8eea", "patch": "@@ -1,3 +1,8 @@\n+2014-11-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/parallel/algo.h: Do not use default arguments in function\n+\ttemplate redeclarations (definitions).\n+\n 2014-11-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/57898"}, {"sha": "4608487dd6aa21d402728e97241f1a5180ef3937", "filename": "libstdc++-v3/include/parallel/algo.h", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3384321048639e88793a2324b87af1bbd1cf8eea/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3384321048639e88793a2324b87af1bbd1cf8eea/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h?ref=3384321048639e88793a2324b87af1bbd1cf8eea", "patch": "@@ -81,9 +81,8 @@ namespace __parallel\n   template<typename _RAIter, typename _Function>\n     _Function\n     __for_each_switch(_RAIter __begin, _RAIter __end, \n-                    _Function __f, random_access_iterator_tag, \n-                    __gnu_parallel::_Parallelism __parallelism_tag\n-                    = __gnu_parallel::parallel_balanced)\n+                    _Function __f, random_access_iterator_tag,\n+                    __gnu_parallel::_Parallelism __parallelism_tag)\n     {\n       if (_GLIBCXX_PARALLEL_CONDITION(\n             static_cast<__gnu_parallel::_SequenceIndex>(__end - __begin)\n@@ -896,8 +895,7 @@ namespace __parallel\n     typename iterator_traits<_RAIter>::difference_type\n     __count_switch(_RAIter __begin, _RAIter __end, \n                  const _Tp& __value, random_access_iterator_tag, \n-                 __gnu_parallel::_Parallelism __parallelism_tag \n-                 = __gnu_parallel::parallel_unbalanced)\n+                 __gnu_parallel::_Parallelism __parallelism_tag)\n     {\n       typedef iterator_traits<_RAIter> _TraitsType;\n       typedef typename _TraitsType::value_type _ValueType;\n@@ -966,8 +964,7 @@ namespace __parallel\n     typename iterator_traits<_RAIter>::difference_type\n     __count_if_switch(_RAIter __begin, _RAIter __end, \n                     _Predicate __pred, random_access_iterator_tag,\n-                    __gnu_parallel::_Parallelism __parallelism_tag\n-                    = __gnu_parallel::parallel_unbalanced)\n+                    __gnu_parallel::_Parallelism __parallelism_tag)\n     {\n       typedef iterator_traits<_RAIter> _TraitsType;\n       typedef typename _TraitsType::value_type _ValueType;\n@@ -1225,8 +1222,7 @@ namespace __parallel\n     __transform1_switch(_RAIter1 __begin, _RAIter1 __end,\n                       _RAIter2 __result, _UnaryOperation __unary_op,\n                       random_access_iterator_tag, random_access_iterator_tag,\n-                      __gnu_parallel::_Parallelism __parallelism_tag\n-                      = __gnu_parallel::parallel_balanced)\n+                      __gnu_parallel::_Parallelism __parallelism_tag)\n     {\n       if (_GLIBCXX_PARALLEL_CONDITION(\n             static_cast<__gnu_parallel::_SequenceIndex>(__end - __begin)\n@@ -1315,8 +1311,7 @@ namespace __parallel\n                       _RAIter3 __result, _BinaryOperation __binary_op,\n                       random_access_iterator_tag, random_access_iterator_tag,\n                       random_access_iterator_tag,\n-                      __gnu_parallel::_Parallelism __parallelism_tag \n-                      = __gnu_parallel::parallel_balanced)\n+                      __gnu_parallel::_Parallelism __parallelism_tag)\n     {\n       if (_GLIBCXX_PARALLEL_CONDITION(\n             (__end1 - __begin1) >=\n@@ -1422,8 +1417,7 @@ namespace __parallel\n     __replace_switch(_RAIter __begin, _RAIter __end, \n                    const _Tp& __old_value, const _Tp& __new_value, \n                    random_access_iterator_tag, \n-                   __gnu_parallel::_Parallelism __parallelism_tag\n-                   = __gnu_parallel::parallel_balanced)\n+                   __gnu_parallel::_Parallelism __parallelism_tag)\n     {\n       // XXX parallel version is where?\n       replace(__begin, __end, __old_value, __new_value, \n@@ -1478,8 +1472,7 @@ namespace __parallel\n     __replace_if_switch(_RAIter __begin, _RAIter __end,\n                       _Predicate __pred, const _Tp& __new_value,\n                       random_access_iterator_tag,\n-                      __gnu_parallel::_Parallelism __parallelism_tag\n-                      = __gnu_parallel::parallel_balanced)\n+                      __gnu_parallel::_Parallelism __parallelism_tag)\n     {\n       if (_GLIBCXX_PARALLEL_CONDITION(\n             static_cast<__gnu_parallel::_SequenceIndex>(__end - __begin)\n@@ -1544,8 +1537,7 @@ namespace __parallel\n     void\n     __generate_switch(_RAIter __begin, _RAIter __end,\n                     _Generator __gen, random_access_iterator_tag, \n-                    __gnu_parallel::_Parallelism __parallelism_tag\n-                    = __gnu_parallel::parallel_balanced)\n+                    __gnu_parallel::_Parallelism __parallelism_tag)\n     {\n       if (_GLIBCXX_PARALLEL_CONDITION(\n             static_cast<__gnu_parallel::_SequenceIndex>(__end - __begin)\n@@ -1608,8 +1600,7 @@ namespace __parallel\n     inline _RAIter\n     __generate_n_switch(_RAIter __begin, _Size __n, _Generator __gen, \n                       random_access_iterator_tag, \n-                      __gnu_parallel::_Parallelism __parallelism_tag\n-                      = __gnu_parallel::parallel_balanced)\n+                      __gnu_parallel::_Parallelism __parallelism_tag)\n     {\n       // XXX parallel version is where?\n       return generate_n(__begin, __n, __gen, __gnu_parallel::sequential_tag());\n@@ -2204,8 +2195,7 @@ namespace __parallel\n     _RAIter\n     __max_element_switch(_RAIter __begin, _RAIter __end, \n                        _Compare __comp, random_access_iterator_tag, \n-                       __gnu_parallel::_Parallelism __parallelism_tag\n-                       = __gnu_parallel::parallel_balanced)\n+\t\t\t __gnu_parallel::_Parallelism __parallelism_tag)\n     {\n       if (_GLIBCXX_PARALLEL_CONDITION(\n             static_cast<__gnu_parallel::_SequenceIndex>(__end - __begin)\n@@ -2296,8 +2286,7 @@ namespace __parallel\n     _RAIter\n     __min_element_switch(_RAIter __begin, _RAIter __end, \n                        _Compare __comp, random_access_iterator_tag, \n-                       __gnu_parallel::_Parallelism __parallelism_tag\n-                       = __gnu_parallel::parallel_balanced)\n+                       __gnu_parallel::_Parallelism __parallelism_tag)\n     {\n       if (_GLIBCXX_PARALLEL_CONDITION(\n             static_cast<__gnu_parallel::_SequenceIndex>(__end - __begin)"}]}