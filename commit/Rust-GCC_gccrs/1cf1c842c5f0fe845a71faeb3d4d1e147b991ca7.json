{"sha": "1cf1c842c5f0fe845a71faeb3d4d1e147b991ca7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNmMWM4NDJjNWYwZmU4NDVhNzFmYWViM2Q0ZDFlMTQ3Yjk5MWNhNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-04-16T13:01:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-04-16T13:01:17Z"}, "message": "tree.cc (_Rb_tree_increment, [...]): Mark nothrow; update uses of _Rb_tree_rotate_left, _Rb_tree_rotate_right.\n\n\t* tree.cc (_Rb_tree_increment, _Rb_tree_decrement,\n\t_Rb_tree_rebalance_for_erase, _Rb_tree_black_count): Mark nothrow;\n\tupdate uses of _Rb_tree_rotate_left, _Rb_tree_rotate_right.\n\t(_Rb_tree_rotate_left, _Rb_tree_rotate_right): Make wrapper and break\n\tout body to ...\n\t(local_Rb_tree_rotate_left, local_Rb_tree_rotate_right): New static\n\tfunctions.\n\t* stl_tree.h (_Rb_tree_increment, _Rb_tree_decrement,\n\t_Rb_tree_insert_and_rebalance, _Rb_tree_rebalance_for_erase,\n\t_Rb_tree_black_count): Mark nothrow.\n\nFrom-SVN: r146184", "tree": {"sha": "3957557c749781c39055c0aabf9408728f5b8ef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3957557c749781c39055c0aabf9408728f5b8ef7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cf1c842c5f0fe845a71faeb3d4d1e147b991ca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cf1c842c5f0fe845a71faeb3d4d1e147b991ca7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cf1c842c5f0fe845a71faeb3d4d1e147b991ca7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cf1c842c5f0fe845a71faeb3d4d1e147b991ca7/comments", "author": null, "committer": null, "parents": [{"sha": "41fd0f9b8037dba308b6ed075468a333708da228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41fd0f9b8037dba308b6ed075468a333708da228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41fd0f9b8037dba308b6ed075468a333708da228"}], "stats": {"total": 91, "additions": 62, "deletions": 29}, "files": [{"sha": "cf43d2ba8f085f096c866eb3e89e0640d5590eb4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf1c842c5f0fe845a71faeb3d4d1e147b991ca7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf1c842c5f0fe845a71faeb3d4d1e147b991ca7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1cf1c842c5f0fe845a71faeb3d4d1e147b991ca7", "patch": "@@ -1,3 +1,16 @@\n+2009-04-16  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree.cc (_Rb_tree_increment, _Rb_tree_decrement,\n+\t_Rb_tree_rebalance_for_erase, _Rb_tree_black_count): Mark nothrow;\n+\tupdate uses of _Rb_tree_rotate_left, _Rb_tree_rotate_right.\n+\t(_Rb_tree_rotate_left, _Rb_tree_rotate_right): Make wrapper and break\n+\tout body to ...\n+\t(local_Rb_tree_rotate_left, local_Rb_tree_rotate_right): New static\n+\tfunctions.\n+\t* stl_tree.h (_Rb_tree_increment, _Rb_tree_decrement,\n+\t_Rb_tree_insert_and_rebalance, _Rb_tree_rebalance_for_erase,\n+\t_Rb_tree_black_count): Mark nothrow.\n+\n 2009-04-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/forward_list.h: Remove default std::allocator<_Tp>"}, {"sha": "a1274e7a11ec66758015ad752621bf9483b12a34", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf1c842c5f0fe845a71faeb3d4d1e147b991ca7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf1c842c5f0fe845a71faeb3d4d1e147b991ca7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=1cf1c842c5f0fe845a71faeb3d4d1e147b991ca7", "patch": "@@ -138,16 +138,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   _Rb_tree_node_base*\n-  _Rb_tree_increment(_Rb_tree_node_base* __x);\n+  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();\n \n   const _Rb_tree_node_base*\n-  _Rb_tree_increment(const _Rb_tree_node_base* __x);\n+  _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();\n \n   _Rb_tree_node_base*\n-  _Rb_tree_decrement(_Rb_tree_node_base* __x);\n+  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();\n \n   const _Rb_tree_node_base*\n-  _Rb_tree_decrement(const _Rb_tree_node_base* __x);\n+  _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();\n \n   template<typename _Tp>\n     struct _Rb_tree_iterator\n@@ -310,11 +310,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   _Rb_tree_insert_and_rebalance(const bool __insert_left,\n                                 _Rb_tree_node_base* __x,\n                                 _Rb_tree_node_base* __p,\n-                                _Rb_tree_node_base& __header);\n+                                _Rb_tree_node_base& __header) throw ();\n \n   _Rb_tree_node_base*\n   _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,\n-\t\t\t       _Rb_tree_node_base& __header);\n+\t\t\t       _Rb_tree_node_base& __header) throw ();\n \n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n@@ -1450,7 +1450,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   unsigned int\n   _Rb_tree_black_count(const _Rb_tree_node_base* __node,\n-                       const _Rb_tree_node_base* __root);\n+                       const _Rb_tree_node_base* __root) throw ();\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>"}, {"sha": "b5f229f4da5529bacaecd0f8909ac07e6a20caf1", "filename": "libstdc++-v3/src/tree.cc", "status": "modified", "additions": 42, "deletions": 22, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf1c842c5f0fe845a71faeb3d4d1e147b991ca7/libstdc%2B%2B-v3%2Fsrc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf1c842c5f0fe845a71faeb3d4d1e147b991ca7/libstdc%2B%2B-v3%2Fsrc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ftree.cc?ref=1cf1c842c5f0fe845a71faeb3d4d1e147b991ca7", "patch": "@@ -55,7 +55,7 @@\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   _Rb_tree_node_base*\n-  _Rb_tree_increment(_Rb_tree_node_base* __x)\n+  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ()\n   {\n     if (__x->_M_right != 0) \n       {\n@@ -78,13 +78,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n \n   const _Rb_tree_node_base*\n-  _Rb_tree_increment(const _Rb_tree_node_base* __x)\n+  _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ()\n   {\n     return _Rb_tree_increment(const_cast<_Rb_tree_node_base*>(__x));\n   }\n \n   _Rb_tree_node_base*\n-  _Rb_tree_decrement(_Rb_tree_node_base* __x)\n+  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ()\n   {\n     if (__x->_M_color == _S_red \n         && __x->_M_parent->_M_parent == __x)\n@@ -110,14 +110,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n \n   const _Rb_tree_node_base*\n-  _Rb_tree_decrement(const _Rb_tree_node_base* __x)\n+  _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ()\n   {\n     return _Rb_tree_decrement(const_cast<_Rb_tree_node_base*>(__x));\n   }\n \n-  void \n-  _Rb_tree_rotate_left(_Rb_tree_node_base* const __x, \n-\t\t       _Rb_tree_node_base*& __root)\n+  static void \n+  local_Rb_tree_rotate_left(_Rb_tree_node_base* const __x, \n+\t\t             _Rb_tree_node_base*& __root)\n   {\n     _Rb_tree_node_base* const __y = __x->_M_right;\n \n@@ -136,9 +136,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     __x->_M_parent = __y;\n   }\n \n+  /* Static keyword was missing on _Rb_tree_rotate_left.\n+     Export the symbol for backward compatibility until\n+     next ABI change.  */\n   void \n-  _Rb_tree_rotate_right(_Rb_tree_node_base* const __x, \n-\t\t\t_Rb_tree_node_base*& __root)\n+  _Rb_tree_rotate_left(_Rb_tree_node_base* const __x, \n+\t\t       _Rb_tree_node_base*& __root)\n+  {\n+    local_Rb_tree_rotate_left (__x, __root);\n+  }\n+\n+  static void \n+  local_Rb_tree_rotate_right(_Rb_tree_node_base* const __x, \n+\t\t\t     _Rb_tree_node_base*& __root)\n   {\n     _Rb_tree_node_base* const __y = __x->_M_left;\n \n@@ -157,11 +167,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     __x->_M_parent = __y;\n   }\n \n+  /* Static keyword was missing on _Rb_tree_rotate_right\n+     Export the symbol for backward compatibility until\n+     next ABI change.  */\n+  void \n+  _Rb_tree_rotate_right(_Rb_tree_node_base* const __x, \n+\t\t\t_Rb_tree_node_base*& __root)\n+  {\n+    local_Rb_tree_rotate_right (__x, __root);\n+  }\n+\n   void \n   _Rb_tree_insert_and_rebalance(const bool          __insert_left,\n                                 _Rb_tree_node_base* __x,\n                                 _Rb_tree_node_base* __p,\n-                                _Rb_tree_node_base& __header)\n+                                _Rb_tree_node_base& __header) throw ()\n   {\n     _Rb_tree_node_base *& __root = __header._M_parent;\n \n@@ -215,11 +235,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\tif (__x == __x->_M_parent->_M_right) \n \t\t  {\n \t\t    __x = __x->_M_parent;\n-\t\t    _Rb_tree_rotate_left(__x, __root);\n+\t\t    local_Rb_tree_rotate_left(__x, __root);\n \t\t  }\n \t\t__x->_M_parent->_M_color = _S_black;\n \t\t__xpp->_M_color = _S_red;\n-\t\t_Rb_tree_rotate_right(__xpp, __root);\n+\t\tlocal_Rb_tree_rotate_right(__xpp, __root);\n \t      }\n \t  }\n \telse \n@@ -237,11 +257,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\tif (__x == __x->_M_parent->_M_left) \n \t\t  {\n \t\t    __x = __x->_M_parent;\n-\t\t    _Rb_tree_rotate_right(__x, __root);\n+\t\t    local_Rb_tree_rotate_right(__x, __root);\n \t\t  }\n \t\t__x->_M_parent->_M_color = _S_black;\n \t\t__xpp->_M_color = _S_red;\n-\t\t_Rb_tree_rotate_left(__xpp, __root);\n+\t\tlocal_Rb_tree_rotate_left(__xpp, __root);\n \t      }\n \t  }\n       }\n@@ -250,7 +270,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   _Rb_tree_node_base*\n   _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z, \n-\t\t\t       _Rb_tree_node_base& __header)\n+\t\t\t       _Rb_tree_node_base& __header) throw ()\n   {\n     _Rb_tree_node_base *& __root = __header._M_parent;\n     _Rb_tree_node_base *& __leftmost = __header._M_left;\n@@ -337,7 +357,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t{\n \t\t  __w->_M_color = _S_black;\n \t\t  __x_parent->_M_color = _S_red;\n-\t\t  _Rb_tree_rotate_left(__x_parent, __root);\n+\t\t  local_Rb_tree_rotate_left(__x_parent, __root);\n \t\t  __w = __x_parent->_M_right;\n \t\t}\n \t      if ((__w->_M_left == 0 || \n@@ -356,14 +376,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t    {\n \t\t      __w->_M_left->_M_color = _S_black;\n \t\t      __w->_M_color = _S_red;\n-\t\t      _Rb_tree_rotate_right(__w, __root);\n+\t\t      local_Rb_tree_rotate_right(__w, __root);\n \t\t      __w = __x_parent->_M_right;\n \t\t    }\n \t\t  __w->_M_color = __x_parent->_M_color;\n \t\t  __x_parent->_M_color = _S_black;\n \t\t  if (__w->_M_right) \n \t\t    __w->_M_right->_M_color = _S_black;\n-\t\t  _Rb_tree_rotate_left(__x_parent, __root);\n+\t\t  local_Rb_tree_rotate_left(__x_parent, __root);\n \t\t  break;\n \t\t}\n \t    } \n@@ -375,7 +395,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t{\n \t\t  __w->_M_color = _S_black;\n \t\t  __x_parent->_M_color = _S_red;\n-\t\t  _Rb_tree_rotate_right(__x_parent, __root);\n+\t\t  local_Rb_tree_rotate_right(__x_parent, __root);\n \t\t  __w = __x_parent->_M_left;\n \t\t}\n \t      if ((__w->_M_right == 0 || \n@@ -393,14 +413,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t    {\n \t\t      __w->_M_right->_M_color = _S_black;\n \t\t      __w->_M_color = _S_red;\n-\t\t      _Rb_tree_rotate_left(__w, __root);\n+\t\t      local_Rb_tree_rotate_left(__w, __root);\n \t\t      __w = __x_parent->_M_left;\n \t\t    }\n \t\t  __w->_M_color = __x_parent->_M_color;\n \t\t  __x_parent->_M_color = _S_black;\n \t\t  if (__w->_M_left) \n \t\t    __w->_M_left->_M_color = _S_black;\n-\t\t  _Rb_tree_rotate_right(__x_parent, __root);\n+\t\t  local_Rb_tree_rotate_right(__x_parent, __root);\n \t\t  break;\n \t\t}\n \t    }\n@@ -411,7 +431,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   unsigned int\n   _Rb_tree_black_count(const _Rb_tree_node_base* __node,\n-                       const _Rb_tree_node_base* __root)\n+                       const _Rb_tree_node_base* __root) throw ()\n   {\n     if (__node == 0)\n       return 0;"}]}