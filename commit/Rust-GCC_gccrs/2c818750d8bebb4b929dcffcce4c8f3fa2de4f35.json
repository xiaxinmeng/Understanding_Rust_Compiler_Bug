{"sha": "2c818750d8bebb4b929dcffcce4c8f3fa2de4f35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM4MTg3NTBkOGJlYmI0YjkyOWRjZmZjY2U0YzhmM2ZhMmRlNGYzNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-09-22T10:05:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-09-22T10:05:34Z"}, "message": "sese.c: Include cfganal.h.\n\n2017-09-22  Richard Biener  <rguenther@suse.de>\n\n\t* sese.c: Include cfganal.h.\n\t(if_region_set_false_region): Remove.\n\t(create_if_region_on_edge): Likewise.\n\t(move_sese_in_condition): Re-implement without destroying\n\tdominators.\n\nFrom-SVN: r253092", "tree": {"sha": "47fca7b4a2d2a3a7ada354b49eb11c844fb15c8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47fca7b4a2d2a3a7ada354b49eb11c844fb15c8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c818750d8bebb4b929dcffcce4c8f3fa2de4f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c818750d8bebb4b929dcffcce4c8f3fa2de4f35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c818750d8bebb4b929dcffcce4c8f3fa2de4f35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c818750d8bebb4b929dcffcce4c8f3fa2de4f35/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed3a22e73cbb100c62ab067d3ac81ccac4513f56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3a22e73cbb100c62ab067d3ac81ccac4513f56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed3a22e73cbb100c62ab067d3ac81ccac4513f56"}], "stats": {"total": 136, "additions": 35, "deletions": 101}, "files": [{"sha": "aa55e18557fd32c534c8adb9f3def4036f2b0ddd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c818750d8bebb4b929dcffcce4c8f3fa2de4f35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c818750d8bebb4b929dcffcce4c8f3fa2de4f35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c818750d8bebb4b929dcffcce4c8f3fa2de4f35", "patch": "@@ -1,3 +1,11 @@\n+2017-09-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* sese.c: Include cfganal.h.\n+\t(if_region_set_false_region): Remove.\n+\t(create_if_region_on_edge): Likewise.\n+\t(move_sese_in_condition): Re-implement without destroying\n+\tdominators.\n+\n 2017-09-22  Richard Biener  <rguenther@suse.de>\n \n \t* graphite-isl-ast-to-gimple.c (translate_pending_phi_nodes):"}, {"sha": "b4a37f75c096057781dd95b45bf58e97b9e684ea", "filename": "gcc/sese.c", "status": "modified", "additions": 27, "deletions": 101, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c818750d8bebb4b929dcffcce4c8f3fa2de4f35/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c818750d8bebb4b929dcffcce4c8f3fa2de4f35/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=2c818750d8bebb4b929dcffcce4c8f3fa2de4f35", "patch": "@@ -40,8 +40,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"tree-data-ref.h\"\n #include \"tree-scalar-evolution.h\"\n-#include \"sese.h\"\n #include \"tree-ssa-propagate.h\"\n+#include \"cfganal.h\"\n+#include \"sese.h\"\n \n /* For a USE in BB, if BB is outside REGION, mark the USE in the\n    LIVEOUTS set.  */\n@@ -333,99 +334,6 @@ get_false_edge_from_guard_bb (basic_block bb)\n   return NULL;\n }\n \n-/* Sets the false region of an IF_REGION to REGION.  */\n-\n-static void\n-if_region_set_false_region (ifsese if_region, sese_info_p region)\n-{\n-  free_dominance_info (CDI_DOMINATORS);\n-\n-  basic_block condition = if_region_get_condition_block (if_region);\n-  edge false_edge = get_false_edge_from_guard_bb (condition);\n-  basic_block dummy = false_edge->dest;\n-  edge entry_region = region->region.entry;\n-  edge exit_region = region->region.exit;\n-  basic_block before_region = entry_region->src;\n-  basic_block last_in_region = exit_region->src;\n-  hashval_t hash = htab_hash_pointer (exit_region);\n-  loop_exit **slot\n-    = current_loops->exits->find_slot_with_hash (exit_region, hash, NO_INSERT);\n-  bool latch_p\n-    = exit_region->dest->loop_father->latch == exit_region->src;\n-\n-  entry_region->flags = false_edge->flags;\n-  false_edge->flags = exit_region->flags;\n-\n-  redirect_edge_pred (entry_region, condition);\n-  redirect_edge_pred (exit_region, before_region);\n-  redirect_edge_pred (false_edge, last_in_region);\n-  redirect_edge_succ (false_edge, single_succ (dummy));\n-  delete_basic_block (dummy);\n-\n-  exit_region->flags = EDGE_FALLTHRU;\n-\n-  region->region.exit = false_edge;\n-\n-  free (if_region->false_region);\n-  if_region->false_region = region;\n-\n-  if (slot)\n-    {\n-      struct loop_exit *loop_exit = ggc_cleared_alloc<struct loop_exit> ();\n-\n-      memcpy (loop_exit, *((struct loop_exit **) slot),\n-\t      sizeof (struct loop_exit));\n-      current_loops->exits->clear_slot (slot);\n-\n-      hashval_t hash = htab_hash_pointer (false_edge);\n-      slot = current_loops->exits->find_slot_with_hash (false_edge, hash,\n-\t\t\t\t\t\t\tINSERT);\n-      loop_exit->e = false_edge;\n-      *slot = loop_exit;\n-      false_edge->src->loop_father->exits->next = loop_exit;\n-    }\n-  if (latch_p)\n-    exit_region->dest->loop_father->latch = before_region;\n-\n-  calculate_dominance_info (CDI_DOMINATORS);\n-}\n-\n-/* Creates an IFSESE with CONDITION on edge ENTRY.  */\n-\n-static ifsese\n-create_if_region_on_edge (edge entry, tree condition)\n-{\n-  edge e;\n-  edge_iterator ei;\n-  sese_info_p sese_region = XNEW (struct sese_info_t);\n-  sese_info_p true_region = XNEW (struct sese_info_t);\n-  sese_info_p false_region = XNEW (struct sese_info_t);\n-  ifsese if_region = XNEW (struct ifsese_s);\n-  edge exit = create_empty_if_region_on_edge (entry, condition);\n-\n-  if_region->region = sese_region;\n-  if_region->region->region.entry = entry;\n-  if_region->region->region.exit = exit;\n-\n-  FOR_EACH_EDGE (e, ei, entry->dest->succs)\n-    {\n-      if (e->flags & EDGE_TRUE_VALUE)\n-\t{\n-\t  true_region->region.entry = e;\n-\t  true_region->region.exit = single_succ_edge (e->dest);\n-\t  if_region->true_region = true_region;\n-\t}\n-      else if (e->flags & EDGE_FALSE_VALUE)\n-\t{\n-\t  false_region->region.entry = e;\n-\t  false_region->region.exit = single_succ_edge (e->dest);\n-\t  if_region->false_region = false_region;\n-\t}\n-    }\n-\n-  return if_region;\n-}\n-\n /* Moves REGION in a condition expression:\n    | if (1)\n    |   ;\n@@ -436,14 +344,32 @@ create_if_region_on_edge (edge entry, tree condition)\n ifsese\n move_sese_in_condition (sese_info_p region)\n {\n-  gcc_assert (! dom_info_available_p (cfun, CDI_POST_DOMINATORS));\n+  basic_block region_entry_dest = region->region.entry->dest;\n   basic_block pred_block = split_edge (region->region.entry);\n-  ifsese if_region;\n-\n-  region->region.entry = single_succ_edge (pred_block);\n-  if_region = create_if_region_on_edge (single_pred_edge (pred_block),\n-\t\t\t\t\tinteger_one_node);\n-  if_region_set_false_region (if_region, region);\n+  basic_block merge_block = split_edge (region->region.exit);\n+\n+  edge true_edge = make_edge (pred_block, merge_block, EDGE_TRUE_VALUE);\n+  edge false_edge = find_edge (pred_block, region_entry_dest);\n+  false_edge->flags &= ~EDGE_FALLTHRU;\n+  false_edge->flags |= EDGE_FALSE_VALUE;\n+  gimple_stmt_iterator gsi = gsi_last_bb (pred_block);\n+  gcond *cond = gimple_build_cond (NE_EXPR, integer_one_node, integer_zero_node,\n+\t\t\t\t   NULL_TREE, NULL_TREE);\n+  gsi_insert_after (&gsi, cond, GSI_CONTINUE_LINKING);\n+  if (dom_info_available_p (CDI_DOMINATORS))\n+    set_immediate_dominator (CDI_DOMINATORS, merge_block, pred_block);\n+\n+  ifsese if_region = XNEW (ifsese_s);\n+  if_region->region = XCNEW (sese_info_t);\n+  if_region->true_region = XCNEW (sese_info_t);\n+  if_region->false_region = XCNEW (sese_info_t);\n+  if_region->region->region.entry = single_pred_edge (pred_block);\n+  if_region->region->region.exit = single_succ_edge (merge_block);\n+  if_region->false_region->region.entry = false_edge;\n+  if_region->false_region->region.exit = region->region.exit;\n+  if_region->true_region->region.entry = true_edge;\n+  if_region->true_region->region.exit\n+    = single_succ_edge (split_edge (true_edge));\n \n   return if_region;\n }"}]}