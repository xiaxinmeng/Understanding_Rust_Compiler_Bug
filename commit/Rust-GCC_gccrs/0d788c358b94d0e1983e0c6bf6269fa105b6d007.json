{"sha": "0d788c358b94d0e1983e0c6bf6269fa105b6d007", "node_id": "C_kwDOANBUbNoAKDBkNzg4YzM1OGI5NGQwZTE5ODNlMGM2YmY2MjY5ZmExMDViNmQwMDc", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-10-08T07:21:44Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-10-09T01:26:43Z"}, "message": "Refine movhfcc.\n\nFor AVX512-FP16, HFmode only supports vcmpsh whose dest is mask\nregister, so for movhfcc, it's\n\nvcmpsh op2, op1, %k1\nvmovsh op1, op2{%k1}\nmov op2, dest\n\ngcc/ChangeLog:\n\n\tPR target/102639\n\t* config/i386/i386-expand.c (ix86_valid_mask_cmp_mode): Handle\n\tHFmode.\n\t(ix86_use_mask_cmp_p): Ditto.\n\t(ix86_expand_sse_movcc): Ditto.\n\t* config/i386/i386.md (setcc_hf_mask): New define_insn.\n\t(movhf_mask): Ditto.\n\t(UNSPEC_MOVCC_MASK): New unspec.\n\t* config/i386/sse.md (UNSPEC_PCMP): Move to i386.md.\n\ngcc/testsuite/ChangeLog:\n\t* g++.target/i386/pr102639.C: New test.", "tree": {"sha": "0391350a980a9a32c3b14aefc6fb65c287cc3e70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0391350a980a9a32c3b14aefc6fb65c287cc3e70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d788c358b94d0e1983e0c6bf6269fa105b6d007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d788c358b94d0e1983e0c6bf6269fa105b6d007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d788c358b94d0e1983e0c6bf6269fa105b6d007", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d788c358b94d0e1983e0c6bf6269fa105b6d007/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce6eec392647046167e7dfecd3dfdd07012b8931", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce6eec392647046167e7dfecd3dfdd07012b8931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce6eec392647046167e7dfecd3dfdd07012b8931"}], "stats": {"total": 73, "additions": 67, "deletions": 6}, "files": [{"sha": "c0924a59efb2cd8b90a120d7e2d4044d040fa8c4", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d788c358b94d0e1983e0c6bf6269fa105b6d007/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d788c358b94d0e1983e0c6bf6269fa105b6d007/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=0d788c358b94d0e1983e0c6bf6269fa105b6d007", "patch": "@@ -3613,6 +3613,10 @@ ix86_valid_mask_cmp_mode (machine_mode mode)\n   if (TARGET_XOP && !TARGET_AVX512F)\n     return false;\n \n+  /* HFmode only supports vcmpsh whose dest is mask register.  */\n+  if (TARGET_AVX512FP16 && mode == HFmode)\n+    return true;\n+\n   /* AVX512F is needed for mask operation.  */\n   if (!(TARGET_AVX512F && VECTOR_MODE_P (mode)))\n     return false;\n@@ -3634,7 +3638,9 @@ ix86_use_mask_cmp_p (machine_mode mode, machine_mode cmp_mode,\n {\n   int vector_size = GET_MODE_SIZE (mode);\n \n-  if (vector_size < 16)\n+  if (cmp_mode == HFmode)\n+    return true;\n+  else if (vector_size < 16)\n     return false;\n   else if (vector_size == 64)\n     return true;\n@@ -3750,7 +3756,7 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n       && GET_MODE_CLASS (cmpmode) == MODE_INT)\n     {\n       gcc_assert (ix86_valid_mask_cmp_mode (mode));\n-      /* Using vector move with mask register.  */\n+      /* Using scalar/vector move with mask register.  */\n       cmp = force_reg (cmpmode, cmp);\n       /* Optimize for mask zero.  */\n       op_true = (op_true != CONST0_RTX (mode)\n@@ -3769,8 +3775,13 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n \t  std::swap (op_true, op_false);\n \t}\n \n-      rtx vec_merge = gen_rtx_VEC_MERGE (mode, op_true, op_false, cmp);\n-      emit_insn (gen_rtx_SET (dest, vec_merge));\n+      if (mode == HFmode)\n+\temit_insn (gen_movhf_mask (dest, op_true, op_false, cmp));\n+      else\n+\t{\n+\t  rtx vec_merge = gen_rtx_VEC_MERGE (mode, op_true, op_false, cmp);\n+\t  emit_insn (gen_rtx_SET (dest, vec_merge));\n+\t}\n       return;\n     }\n   else if (vector_all_ones_operand (op_true, mode)"}, {"sha": "c7ae4ac5fbcbcd3c31f6603a5092bbf0a9035398", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d788c358b94d0e1983e0c6bf6269fa105b6d007/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d788c358b94d0e1983e0c6bf6269fa105b6d007/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0d788c358b94d0e1983e0c6bf6269fa105b6d007", "patch": "@@ -117,6 +117,7 @@\n   ;; For SSE/MMX support:\n   UNSPEC_FIX_NOTRUNC\n   UNSPEC_MASKMOV\n+  UNSPEC_MOVCC_MASK\n   UNSPEC_MOVMSK\n   UNSPEC_BLENDV\n   UNSPEC_PSHUFB\n@@ -125,8 +126,9 @@\n   UNSPEC_RSQRT\n   UNSPEC_PSADBW\n \n-  ;; For AVX512F support\n+  ;; For AVX/AVX512F support\n   UNSPEC_SCALEF\n+  UNSPEC_PCMP\n \n   ;; Generic math support\n   UNSPEC_IEEE_MIN\t; not commutative\n@@ -13608,6 +13610,20 @@\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"setcc_hf_mask\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=k\")\n+\t(unspec:QI\n+\t  [(match_operand:HF 1 \"register_operand\" \"v\")\n+\t   (match_operand:HF 2 \"nonimmediate_operand\" \"vm\")\n+\t   (match_operand:SI 3 \"const_0_to_31_operand\" \"n\")]\n+\t  UNSPEC_PCMP))]\n+  \"TARGET_AVX512FP16\"\n+  \"vcmpsh\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"HF\")])\n+\n \f\n ;; Basic conditional jump instructions.\n \n@@ -19841,6 +19857,22 @@\n   operands[9] = replace_rtx (operands[6], operands[0], operands[1], true);\n })\n \n+(define_insn \"movhf_mask\"\n+  [(set (match_operand:HF 0 \"nonimmediate_operand\" \"=v,m,v\")\n+\t(unspec:HF\n+\t  [(match_operand:HF 1 \"nonimmediate_operand\" \"m,v,v\")\n+\t   (match_operand:HF 2 \"nonimm_or_0_operand\" \"0C,0C,0C\")\n+\t   (match_operand:QI 3 \"register_operand\" \"Yk,Yk,Yk\")]\n+\t  UNSPEC_MOVCC_MASK))]\n+  \"TARGET_AVX512FP16\"\n+  \"@\n+   vmovsh\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\n+   vmovsh\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\n+   vmovsh\\t{%d1, %0%{%3%}%N2|%0%{%3%}%N2, %d1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"HF\")])\n+\n (define_expand \"movhfcc\"\n   [(set (match_operand:HF 0 \"register_operand\")\n \t(if_then_else:HF"}, {"sha": "a3c4a3f1e62b2ad9fe3ac0615562d8a10c49a79b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d788c358b94d0e1983e0c6bf6269fa105b6d007/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d788c358b94d0e1983e0c6bf6269fa105b6d007/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=0d788c358b94d0e1983e0c6bf6269fa105b6d007", "patch": "@@ -67,7 +67,6 @@\n   UNSPEC_PCLMUL\n \n   ;; For AVX support\n-  UNSPEC_PCMP\n   UNSPEC_VPERMIL\n   UNSPEC_VPERMIL2\n   UNSPEC_VPERMIL2F128"}, {"sha": "f094e4d1b43facdf98f6f8fa102b2447f74ca03c", "filename": "gcc/testsuite/g++.target/i386/pr102639.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d788c358b94d0e1983e0c6bf6269fa105b6d007/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr102639.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d788c358b94d0e1983e0c6bf6269fa105b6d007/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr102639.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr102639.C?ref=0d788c358b94d0e1983e0c6bf6269fa105b6d007", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/102639 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=c++14 -mavx512fp16\" } */\n+/* { dg-final { scan-assembler-times \"vminsh\" 1 } } */\n+\n+typedef _Float16 v16hf __attribute__((vector_size(2)));\n+v16hf vcond_v16hfv16hfge_b, vcond_v16hfv16hfge_c, vcond_v16hfv16hfge_d,\n+    __attribute__vcond_v16hfv16hfge_a;\n+v16hf __attribute__vcond_v16hfv16hfge() {\n+  return __attribute__vcond_v16hfv16hfge_a >= vcond_v16hfv16hfge_b\n+             ? vcond_v16hfv16hfge_c\n+             : vcond_v16hfv16hfge_d;\n+}\n+\n+v16hf __attribute__vcond_v16hfv16hfmax() {\n+  return __attribute__vcond_v16hfv16hfge_a < vcond_v16hfv16hfge_b\n+             ? __attribute__vcond_v16hfv16hfge_a\n+             : vcond_v16hfv16hfge_b;\n+}"}]}