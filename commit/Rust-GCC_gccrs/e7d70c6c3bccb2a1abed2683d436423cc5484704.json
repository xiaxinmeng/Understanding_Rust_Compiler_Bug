{"sha": "e7d70c6c3bccb2a1abed2683d436423cc5484704", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdkNzBjNmMzYmNjYjJhMWFiZWQyNjgzZDQzNjQyM2NjNTQ4NDcwNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-05-02T11:24:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-05-02T11:24:52Z"}, "message": "re PR tree-optimization/80549 (wrong code at -O2 and -O3 in both 32-bit and 64-bit modes on x86_64-linux-gnu (executable does not terminate))\n\n2017-05-02  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/80549\n\t* tree-cfgcleanup.c (mfb_keep_latches): New helper.\n\t(cleanup_tree_cfg_noloop): Create forwarders to known loop\n\theaders if they do not have a preheader.\n\n\t* gcc.dg/torture/pr80549.c: New testcase.\n\nFrom-SVN: r247486", "tree": {"sha": "e56c29c23fc33760f44125bb7e3dfbcb3cb8fffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e56c29c23fc33760f44125bb7e3dfbcb3cb8fffa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7d70c6c3bccb2a1abed2683d436423cc5484704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7d70c6c3bccb2a1abed2683d436423cc5484704", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7d70c6c3bccb2a1abed2683d436423cc5484704", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7d70c6c3bccb2a1abed2683d436423cc5484704/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51956afe2766a248dc0c876f4140d7a79009cf5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51956afe2766a248dc0c876f4140d7a79009cf5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51956afe2766a248dc0c876f4140d7a79009cf5a"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "5cbb7e77679ed7c2269f5f63e2cdeeed14920794", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7d70c6c3bccb2a1abed2683d436423cc5484704/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7d70c6c3bccb2a1abed2683d436423cc5484704/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7d70c6c3bccb2a1abed2683d436423cc5484704", "patch": "@@ -1,3 +1,10 @@\n+2017-05-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80549\n+\t* tree-cfgcleanup.c (mfb_keep_latches): New helper.\n+\t(cleanup_tree_cfg_noloop): Create forwarders to known loop\n+\theaders if they do not have a preheader.\n+\n 2017-05-02  Martin Liska  <mliska@suse.cz>\n \n \tPR other/80589"}, {"sha": "5c4b7dfdeaf39e318d1130be2a4393eedf222857", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7d70c6c3bccb2a1abed2683d436423cc5484704/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7d70c6c3bccb2a1abed2683d436423cc5484704/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e7d70c6c3bccb2a1abed2683d436423cc5484704", "patch": "@@ -1,3 +1,8 @@\n+2017-05-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80549\n+\t* gcc.dg/torture/pr80549.c: New testcase.\n+\n 2017-05-02  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* gcc.dg/pr78138.c: Use __SIZE_TYPE__ instead of"}, {"sha": "64ace5906ea7e33736e8240b37e408db8f6e3919", "filename": "gcc/testsuite/gcc.dg/torture/pr80549.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7d70c6c3bccb2a1abed2683d436423cc5484704/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80549.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7d70c6c3bccb2a1abed2683d436423cc5484704/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80549.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80549.c?ref=e7d70c6c3bccb2a1abed2683d436423cc5484704", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+\n+signed char a, b;\n+int c;\n+short d;\n+void fn1(int p1)\n+{\n+  short e = 4;\n+  int f;\n+  d = 0;\n+  for (; d <= 0; d++)\n+    e = 0;\n+  if (e)\n+    goto L1;\n+L2:\n+  if (p1) {\n+      a = 9;\n+      for (; a; ++a) {\n+\t  f = 5;\n+\t  for (; f != 32; ++f)\n+\t    c = 8;\n+L1:\n+\t  if (b)\n+\t    goto L2;\n+      }\n+  }\n+}\n+\n+int main()\n+{\n+  fn1(1);\n+  return 0;\n+}"}, {"sha": "94a172fa98e494efeb552c9903e7c456f16e31d4", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7d70c6c3bccb2a1abed2683d436423cc5484704/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7d70c6c3bccb2a1abed2683d436423cc5484704/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=e7d70c6c3bccb2a1abed2683d436423cc5484704", "patch": "@@ -739,6 +739,11 @@ cleanup_tree_cfg_1 (void)\n   return retval;\n }\n \n+static bool\n+mfb_keep_latches (edge e)\n+{\n+  return ! dominated_by_p (CDI_DOMINATORS, e->src, e->dest);\n+}\n \n /* Remove unreachable blocks and other miscellaneous clean up work.\n    Return true if the flowgraph was modified, false otherwise.  */\n@@ -766,6 +771,64 @@ cleanup_tree_cfg_noloop (void)\n       changed = false;\n     }\n \n+  /* Ensure that we have single entries into loop headers.  Otherwise\n+     if one of the entries is becoming a latch due to CFG cleanup\n+     (from formerly being part of an irreducible region) then we mess\n+     up loop fixup and associate the old loop with a different region\n+     which makes niter upper bounds invalid.  See for example PR80549.\n+     This needs to be done before we remove trivially dead edges as\n+     we need to capture the dominance state before the pending transform.  */\n+  if (current_loops)\n+    {\n+      loop_p loop;\n+      unsigned i;\n+      FOR_EACH_VEC_ELT (*get_loops (cfun), i, loop)\n+\tif (loop && loop->header)\n+\t  {\n+\t    basic_block bb = loop->header;\n+\t    edge_iterator ei;\n+\t    edge e;\n+\t    bool found_latch = false;\n+\t    bool any_abnormal = false;\n+\t    unsigned n = 0;\n+\t    /* We are only interested in preserving existing loops, but\n+\t       we need to check whether they are still real and of course\n+\t       if we need to add a preheader at all.  */\n+\t    FOR_EACH_EDGE (e, ei, bb->preds)\n+\t      {\n+\t\tif (e->flags & EDGE_ABNORMAL)\n+\t\t  {\n+\t\t    any_abnormal = true;\n+\t\t    break;\n+\t\t  }\n+\t\tif (dominated_by_p (CDI_DOMINATORS, e->src, bb))\n+\t\t  {\n+\t\t    found_latch = true;\n+\t\t    continue;\n+\t\t  }\n+\t\tn++;\n+\t      }\n+\t    /* If we have more than one entry to the loop header\n+\t       create a forwarder.  */\n+\t    if (found_latch && ! any_abnormal && n > 1)\n+\t      {\n+\t\tedge fallthru = make_forwarder_block (bb, mfb_keep_latches,\n+\t\t\t\t\t\t      NULL);\n+\t\tloop->header = fallthru->dest;\n+\t\tif (! loops_state_satisfies_p (LOOPS_NEED_FIXUP))\n+\t\t  {\n+\t\t    /* The loop updating from the CFG hook is incomplete\n+\t\t       when we have multiple latches, fixup manually.  */\n+\t\t    remove_bb_from_loops (fallthru->src);\n+\t\t    loop_p cloop = loop;\n+\t\t    FOR_EACH_EDGE (e, ei, fallthru->src->preds)\n+\t\t      cloop = find_common_loop (cloop, e->src->loop_father);\n+\t\t    add_bb_to_loop (fallthru->src, cloop);\n+\t\t  }\n+\t      }\n+\t  }\n+    }\n+\n   changed |= cleanup_tree_cfg_1 ();\n \n   gcc_assert (dom_info_available_p (CDI_DOMINATORS));"}]}