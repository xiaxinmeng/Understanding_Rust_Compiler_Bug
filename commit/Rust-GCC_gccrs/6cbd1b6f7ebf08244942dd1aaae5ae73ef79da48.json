{"sha": "6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNiZDFiNmY3ZWJmMDgyNDQ5NDJkZDFhYWFlNWFlNzNlZjc5ZGE0OA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-10-02T13:35:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-10-02T13:35:49Z"}, "message": "New Language: Ada\n\nFrom-SVN: r45950", "tree": {"sha": "8039778417b2122e974910f3074427072e0ef202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8039778417b2122e974910f3074427072e0ef202"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/comments", "author": null, "committer": null, "parents": [{"sha": "644eddaac53831b51967cea591f0bdf3b5e770a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/644eddaac53831b51967cea591f0bdf3b5e770a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/644eddaac53831b51967cea591f0bdf3b5e770a7"}], "stats": {"total": 5880, "additions": 5880, "deletions": 0}, "files": [{"sha": "2b122b67f158a6e5c12bb2d668bfa2df50ec4f9e", "filename": "gcc/ada/1aexcept.adb", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F1aexcept.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F1aexcept.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F1aexcept.adb?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,51 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                       A D A . E X C E P T I O N S                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.1 $\n+--                                                                          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body Ada.Exceptions is\n+\n+   procedure Last_Chance_Handler (Msg : System.Address; Line : Integer);\n+   pragma Import (C, Last_Chance_Handler, \"__gnat_last_chance_handler\");\n+   pragma No_Return (Last_Chance_Handler);\n+\n+   ---------------------\n+   -- Raise_Exception --\n+   ---------------------\n+\n+   procedure Raise_Exception (E : Exception_Id; Message : String := \"\") is\n+   begin\n+      Last_Chance_Handler (Message'Address, 0);\n+   end Raise_Exception;\n+\n+end Ada.Exceptions;"}, {"sha": "72815160475d0572a9a8423573cd8d9158c68b33", "filename": "gcc/ada/1aexcept.ads", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F1aexcept.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F1aexcept.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F1aexcept.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,68 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                       A D A . E X C E P T I O N S                        --\n+--                   (Version for No Exception Handlers)                    --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.1 $\n+--                                                                          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This version is for use when the restriction No_Exception_Handlers\n+--  is enabled.\n+\n+with System;\n+\n+package Ada.Exceptions is\n+\n+   type Exception_Id is private;\n+\n+   Null_Id : constant Exception_Id;\n+\n+   procedure Raise_Exception (E : Exception_Id; Message : String := \"\");\n+   --  Unconditionally call __gnat_last_chance_handler.\n+   --  Message should be a null terminated string.\n+   pragma No_Return (Raise_Exception);\n+\n+private\n+\n+   ------------------\n+   -- Exception_Id --\n+   ------------------\n+\n+   type Exception_Id is new System.Address;\n+   Null_Id : constant Exception_Id := Exception_Id (System.Null_Address);\n+\n+   pragma Inline_Always (Raise_Exception);\n+\n+end Ada.Exceptions;"}, {"sha": "df8828a3d8e448f1b7a2030387a35597a2ca5fa4", "filename": "gcc/ada/1ic.ads", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F1ic.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F1ic.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F1ic.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,85 @@\n+-----------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                         I N T E R F A C E S . C                          --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.1 $\n+--                                                                          --\n+-- This specification is adapted from the Ada Reference Manual for use with --\n+-- GNAT  Hi Integrity Edition.  In accordance  with the  copyright of  that --\n+-- document,  you can  freely copy and modify this specification,  provided --\n+-- that if you  redistribute a modified version,  any changes that you have --\n+-- made are clearly indicated.                                              --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This version contains only the type definitions for standard interfacing\n+--  with C. All functions have been removed from the original spec.\n+\n+package Interfaces.C is\n+pragma Pure (C);\n+\n+   --  Declaration's based on C's <limits.h>\n+\n+   CHAR_BIT  : constant := 8;\n+   SCHAR_MIN : constant := -128;\n+   SCHAR_MAX : constant := 127;\n+   UCHAR_MAX : constant := 255;\n+\n+   --  Signed and Unsigned Integers. Note that in GNAT, we have ensured that\n+   --  the standard predefined Ada types correspond to the standard C types\n+\n+   type int   is new Integer;\n+   type short is new Short_Integer;\n+   type long  is new Long_Integer;\n+\n+   type signed_char is range SCHAR_MIN .. SCHAR_MAX;\n+   for signed_char'Size use CHAR_BIT;\n+\n+   type unsigned       is mod 2 ** int'Size;\n+   type unsigned_short is mod 2 ** short'Size;\n+   type unsigned_long  is mod 2 ** long'Size;\n+\n+   type unsigned_char is mod (UCHAR_MAX + 1);\n+   for unsigned_char'Size use CHAR_BIT;\n+\n+   subtype plain_char is unsigned_char;\n+\n+   type ptrdiff_t is\n+     range -(2 ** (Standard'Address_Size - 1)) ..\n+           +(2 ** (Standard'Address_Size - 1) - 1);\n+\n+   type size_t is mod 2 ** Standard'Address_Size;\n+\n+   --  Floating-Point\n+\n+   type C_float     is new Float;\n+   type double      is new Standard.Long_Float;\n+   type long_double is new Standard.Long_Long_Float;\n+\n+   ----------------------------\n+   -- Characters and Strings --\n+   ----------------------------\n+\n+   type char is new Character;\n+\n+   nul : constant char := char'First;\n+\n+   type char_array is array (size_t range <>) of aliased char;\n+   for char_array'Component_Size use CHAR_BIT;\n+\n+   ------------------------------------\n+   -- Wide Character and Wide String --\n+   ------------------------------------\n+\n+   type wchar_t is new Wide_Character;\n+   for wchar_t'Size use Standard'Wchar_T_Size;\n+\n+   wide_nul : constant wchar_t := wchar_t'First;\n+\n+   type wchar_array is array (size_t range <>) of aliased wchar_t;\n+\n+end Interfaces.C;"}, {"sha": "b0b4838d6b8f6656b931b0b1c6c0b56285182b85", "filename": "gcc/ada/31soccon.ads", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F31soccon.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F31soccon.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F31soccon.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,115 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--               G N A T . S O C K E T S . C O N S T A N T S                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.1 $\n+--                                                                          --\n+--              Copyright (C) 2001 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the version for UnixWare\n+\n+package GNAT.Sockets.Constants is\n+\n+   --  Families\n+\n+   AF_INET              : constant :=                2;\n+   AF_INET6             : constant :=               27;\n+\n+   --  Modes\n+\n+   SOCK_STREAM          : constant :=                2;\n+   SOCK_DGRAM           : constant :=                1;\n+\n+   --  Socket Errors\n+\n+   EBADF                : constant :=                9;\n+   ENOTSOCK             : constant :=               95;\n+   ENOTCONN             : constant :=              134;\n+   ENOBUFS              : constant :=              132;\n+   EOPNOTSUPP           : constant :=              122;\n+   EFAULT               : constant :=               14;\n+   EWOULDBLOCK          : constant :=               11;\n+   EADDRNOTAVAIL        : constant :=              126;\n+   EMSGSIZE             : constant :=               97;\n+   EADDRINUSE           : constant :=              125;\n+   EINVAL               : constant :=               22;\n+   EACCES               : constant :=               13;\n+   EAFNOSUPPORT         : constant :=              124;\n+   EISCONN              : constant :=              133;\n+   ETIMEDOUT            : constant :=              145;\n+   ECONNREFUSED         : constant :=              146;\n+   ENETUNREACH          : constant :=              128;\n+   EALREADY             : constant :=              149;\n+   EINPROGRESS          : constant :=              150;\n+   ENOPROTOOPT          : constant :=               99;\n+   EPROTONOSUPPORT      : constant :=              120;\n+   EINTR                : constant :=                4;\n+   EIO                  : constant :=                5;\n+   ESOCKTNOSUPPORT      : constant :=              121;\n+\n+   --  Host Errors\n+\n+   HOST_NOT_FOUND       : constant :=                1;\n+   TRY_AGAIN            : constant :=                2;\n+   NO_ADDRESS           : constant :=                4;\n+   NO_RECOVERY          : constant :=                3;\n+\n+   --  Control Flags\n+\n+   FIONBIO              : constant :=      -2147195266;\n+   FIONREAD             : constant :=       1074030207;\n+\n+   --  Shutdown Modes\n+\n+   SHUT_RD              : constant :=                0;\n+   SHUT_WR              : constant :=                1;\n+   SHUT_RDWR            : constant :=                2;\n+\n+   --  Protocol Levels\n+\n+   SOL_SOCKET           : constant :=            65535;\n+   IPPROTO_IP           : constant :=                0;\n+   IPPROTO_UDP          : constant :=               17;\n+   IPPROTO_TCP          : constant :=                6;\n+\n+   --  Socket Options\n+\n+   TCP_NODELAY          : constant :=                1;\n+   SO_SNDBUF            : constant :=             4097;\n+   SO_RCVBUF            : constant :=             4098;\n+   SO_REUSEADDR         : constant :=                4;\n+   SO_KEEPALIVE         : constant :=                8;\n+   SO_LINGER            : constant :=              128;\n+   SO_ERROR             : constant :=             4103;\n+   SO_BROADCAST         : constant :=               32;\n+   IP_ADD_MEMBERSHIP    : constant :=               11;\n+   IP_DROP_MEMBERSHIP   : constant :=               12;\n+   IP_MULTICAST_TTL     : constant :=               16;\n+   IP_MULTICAST_LOOP    : constant :=               10;\n+end GNAT.Sockets.Constants;"}, {"sha": "3966ec3b7b0e2e76ebad144c238f10f8660a227d", "filename": "gcc/ada/31soliop.ads", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F31soliop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F31soliop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F31soliop.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,44 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--          G N A T . S O C K E T S . L I N K E R _ O P T I O N S           --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.1 $\n+--                                                                          --\n+--              Copyright (C) 2001 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package GNAT.Sockets.Linker_Options is\n+\n+   --  This is the UnixWare version of this package.\n+\n+private\n+\n+   pragma Linker_Options (\"-lnsl\");\n+   pragma Linker_Options (\"-lsocket\");\n+\n+end GNAT.Sockets.Linker_Options;"}, {"sha": "3e4620ba363a09dcd0fa22ec42b533eb882b8538", "filename": "gcc/ada/3asoccon.ads", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3asoccon.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3asoccon.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F3asoccon.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,115 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--               G N A T . S O C K E T S . C O N S T A N T S                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $\n+--                                                                          --\n+--              Copyright (C) 2001 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the version for OSF\n+\n+package GNAT.Sockets.Constants is\n+\n+   --  Families\n+\n+   AF_INET              : constant :=                2;\n+   AF_INET6             : constant :=               26;\n+\n+   --  Modes\n+\n+   SOCK_STREAM          : constant :=                1;\n+   SOCK_DGRAM           : constant :=                2;\n+\n+   --  Socket Errors\n+\n+   EBADF                : constant :=                9;\n+   ENOTSOCK             : constant :=               38;\n+   ENOTCONN             : constant :=               57;\n+   ENOBUFS              : constant :=               55;\n+   EOPNOTSUPP           : constant :=               45;\n+   EFAULT               : constant :=               14;\n+   EWOULDBLOCK          : constant :=               35;\n+   EADDRNOTAVAIL        : constant :=               49;\n+   EMSGSIZE             : constant :=               40;\n+   EADDRINUSE           : constant :=               48;\n+   EINVAL               : constant :=               22;\n+   EACCES               : constant :=               13;\n+   EAFNOSUPPORT         : constant :=               47;\n+   EISCONN              : constant :=               56;\n+   ETIMEDOUT            : constant :=               60;\n+   ECONNREFUSED         : constant :=               61;\n+   ENETUNREACH          : constant :=               51;\n+   EALREADY             : constant :=               37;\n+   EINPROGRESS          : constant :=               36;\n+   ENOPROTOOPT          : constant :=               42;\n+   EPROTONOSUPPORT      : constant :=               43;\n+   EINTR                : constant :=                4;\n+   EIO                  : constant :=                5;\n+   ESOCKTNOSUPPORT      : constant :=               44;\n+\n+   --  Host Errors\n+\n+   HOST_NOT_FOUND       : constant :=                1;\n+   TRY_AGAIN            : constant :=                2;\n+   NO_ADDRESS           : constant :=                4;\n+   NO_RECOVERY          : constant :=                3;\n+\n+   --  Control Flags\n+\n+   FIONBIO              : constant :=      -2147195266;\n+   FIONREAD             : constant :=       1074030207;\n+\n+   --  Shutdown Modes\n+\n+   SHUT_RD              : constant :=                0;\n+   SHUT_WR              : constant :=                1;\n+   SHUT_RDWR            : constant :=                2;\n+\n+   --  Protocol Levels\n+\n+   SOL_SOCKET           : constant :=            65535;\n+   IPPROTO_IP           : constant :=                0;\n+   IPPROTO_UDP          : constant :=               17;\n+   IPPROTO_TCP          : constant :=                6;\n+\n+   --  Socket Options\n+\n+   TCP_NODELAY          : constant :=                1;\n+   SO_SNDBUF            : constant :=             4097;\n+   SO_RCVBUF            : constant :=             4098;\n+   SO_REUSEADDR         : constant :=                4;\n+   SO_KEEPALIVE         : constant :=                8;\n+   SO_LINGER            : constant :=              128;\n+   SO_ERROR             : constant :=             4103;\n+   SO_BROADCAST         : constant :=               32;\n+   IP_ADD_MEMBERSHIP    : constant :=               12;\n+   IP_DROP_MEMBERSHIP   : constant :=               13;\n+   IP_MULTICAST_TTL     : constant :=               10;\n+   IP_MULTICAST_LOOP    : constant :=               11;\n+end GNAT.Sockets.Constants;"}, {"sha": "7ca4b8b5e7856fdfcb9dd4c212bfbf58fbbeabef", "filename": "gcc/ada/3bsoccon.ads", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3bsoccon.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3bsoccon.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F3bsoccon.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,115 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--               G N A T . S O C K E T S . C O N S T A N T S                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $\n+--                                                                          --\n+--              Copyright (C) 2001 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the version for AIX\n+\n+package GNAT.Sockets.Constants is\n+\n+   --  Families\n+\n+   AF_INET              : constant :=                2;\n+   AF_INET6             : constant :=               24;\n+\n+   --  Modes\n+\n+   SOCK_STREAM          : constant :=                1;\n+   SOCK_DGRAM           : constant :=                2;\n+\n+   --  Socket Errors\n+\n+   EBADF                : constant :=                9;\n+   ENOTSOCK             : constant :=               57;\n+   ENOTCONN             : constant :=               76;\n+   ENOBUFS              : constant :=               74;\n+   EOPNOTSUPP           : constant :=               64;\n+   EFAULT               : constant :=               14;\n+   EWOULDBLOCK          : constant :=               11;\n+   EADDRNOTAVAIL        : constant :=               68;\n+   EMSGSIZE             : constant :=               59;\n+   EADDRINUSE           : constant :=               67;\n+   EINVAL               : constant :=               22;\n+   EACCES               : constant :=               13;\n+   EAFNOSUPPORT         : constant :=               66;\n+   EISCONN              : constant :=               75;\n+   ETIMEDOUT            : constant :=               78;\n+   ECONNREFUSED         : constant :=               79;\n+   ENETUNREACH          : constant :=               70;\n+   EALREADY             : constant :=               56;\n+   EINPROGRESS          : constant :=               55;\n+   ENOPROTOOPT          : constant :=               61;\n+   EPROTONOSUPPORT      : constant :=               62;\n+   EINTR                : constant :=                4;\n+   EIO                  : constant :=                5;\n+   ESOCKTNOSUPPORT      : constant :=               63;\n+\n+   --  Host Errors\n+\n+   HOST_NOT_FOUND       : constant :=                1;\n+   TRY_AGAIN            : constant :=                2;\n+   NO_ADDRESS           : constant :=                4;\n+   NO_RECOVERY          : constant :=                3;\n+\n+   --  Control Flags\n+\n+   FIONBIO              : constant :=      -2147195266;\n+   FIONREAD             : constant :=       1074030207;\n+\n+   --  Shutdown Modes\n+\n+   SHUT_RD              : constant :=                0;\n+   SHUT_WR              : constant :=                1;\n+   SHUT_RDWR            : constant :=                2;\n+\n+   --  Protocol Levels\n+\n+   SOL_SOCKET           : constant :=            65535;\n+   IPPROTO_IP           : constant :=                0;\n+   IPPROTO_UDP          : constant :=               17;\n+   IPPROTO_TCP          : constant :=                6;\n+\n+   --  Socket Options\n+\n+   TCP_NODELAY          : constant :=                1;\n+   SO_SNDBUF            : constant :=             4097;\n+   SO_RCVBUF            : constant :=             4098;\n+   SO_REUSEADDR         : constant :=                4;\n+   SO_KEEPALIVE         : constant :=                8;\n+   SO_LINGER            : constant :=              128;\n+   SO_ERROR             : constant :=             4103;\n+   SO_BROADCAST         : constant :=               32;\n+   IP_ADD_MEMBERSHIP    : constant :=               12;\n+   IP_DROP_MEMBERSHIP   : constant :=               13;\n+   IP_MULTICAST_TTL     : constant :=               10;\n+   IP_MULTICAST_LOOP    : constant :=               11;\n+end GNAT.Sockets.Constants;"}, {"sha": "12c3f53edf39128c8059cb770f0c57539ba1f1eb", "filename": "gcc/ada/3gsoccon.ads", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3gsoccon.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3gsoccon.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F3gsoccon.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,115 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--               G N A T . S O C K E T S . C O N S T A N T S                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--              Copyright (C) 2001 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the version for SGI\n+\n+package GNAT.Sockets.Constants is\n+\n+   --  Families\n+\n+   AF_INET              : constant :=                2;\n+   AF_INET6             : constant :=               24;\n+\n+   --  Modes\n+\n+   SOCK_STREAM          : constant :=                2;\n+   SOCK_DGRAM           : constant :=                1;\n+\n+   --  Socket Errors\n+\n+   EBADF                : constant :=                9;\n+   ENOTSOCK             : constant :=               95;\n+   ENOTCONN             : constant :=              134;\n+   ENOBUFS              : constant :=              132;\n+   EOPNOTSUPP           : constant :=              122;\n+   EFAULT               : constant :=               14;\n+   EWOULDBLOCK          : constant :=               11;\n+   EADDRNOTAVAIL        : constant :=              126;\n+   EMSGSIZE             : constant :=               97;\n+   EADDRINUSE           : constant :=              125;\n+   EINVAL               : constant :=               22;\n+   EACCES               : constant :=               13;\n+   EAFNOSUPPORT         : constant :=              124;\n+   EISCONN              : constant :=              133;\n+   ETIMEDOUT            : constant :=              145;\n+   ECONNREFUSED         : constant :=              146;\n+   ENETUNREACH          : constant :=              128;\n+   EALREADY             : constant :=              149;\n+   EINPROGRESS          : constant :=              150;\n+   ENOPROTOOPT          : constant :=               99;\n+   EPROTONOSUPPORT      : constant :=              120;\n+   EINTR                : constant :=                4;\n+   EIO                  : constant :=                5;\n+   ESOCKTNOSUPPORT      : constant :=              121;\n+\n+   --  Host Errors\n+\n+   HOST_NOT_FOUND       : constant :=                1;\n+   TRY_AGAIN            : constant :=                2;\n+   NO_ADDRESS           : constant :=                4;\n+   NO_RECOVERY          : constant :=                3;\n+\n+   --  Control Flags\n+\n+   FIONBIO              : constant :=      -2147195266;\n+   FIONREAD             : constant :=       1074030207;\n+\n+   --  Shutdown Modes\n+\n+   SHUT_RD              : constant :=                0;\n+   SHUT_WR              : constant :=                1;\n+   SHUT_RDWR            : constant :=                2;\n+\n+   --  Protocol Levels\n+\n+   SOL_SOCKET           : constant :=            65535;\n+   IPPROTO_IP           : constant :=                0;\n+   IPPROTO_UDP          : constant :=               17;\n+   IPPROTO_TCP          : constant :=                6;\n+\n+   --  Socket Options\n+\n+   TCP_NODELAY          : constant :=                1;\n+   SO_SNDBUF            : constant :=             4097;\n+   SO_RCVBUF            : constant :=             4098;\n+   SO_REUSEADDR         : constant :=                4;\n+   SO_KEEPALIVE         : constant :=                8;\n+   SO_LINGER            : constant :=              128;\n+   SO_ERROR             : constant :=             4103;\n+   SO_BROADCAST         : constant :=               32;\n+   IP_ADD_MEMBERSHIP    : constant :=               23;\n+   IP_DROP_MEMBERSHIP   : constant :=               24;\n+   IP_MULTICAST_TTL     : constant :=               21;\n+   IP_MULTICAST_LOOP    : constant :=               22;\n+end GNAT.Sockets.Constants;"}, {"sha": "889a26d2ea092f7b22a848fcba0b5279756d9f75", "filename": "gcc/ada/3hsoccon.ads", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3hsoccon.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3hsoccon.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F3hsoccon.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,115 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--               G N A T . S O C K E T S . C O N S T A N T S                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $\n+--                                                                          --\n+--              Copyright (C) 2001 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the version for HP/UX\n+\n+package GNAT.Sockets.Constants is\n+\n+   --  Families\n+\n+   AF_INET              : constant :=                2;\n+   AF_INET6             : constant :=               -1;\n+\n+   --  Modes\n+\n+   SOCK_STREAM          : constant :=                1;\n+   SOCK_DGRAM           : constant :=                2;\n+\n+   --  Socket Errors\n+\n+   EBADF                : constant :=                9;\n+   ENOTSOCK             : constant :=              216;\n+   ENOTCONN             : constant :=              235;\n+   ENOBUFS              : constant :=              233;\n+   EOPNOTSUPP           : constant :=              223;\n+   EFAULT               : constant :=               14;\n+   EWOULDBLOCK          : constant :=              246;\n+   EADDRNOTAVAIL        : constant :=              227;\n+   EMSGSIZE             : constant :=              218;\n+   EADDRINUSE           : constant :=              226;\n+   EINVAL               : constant :=               22;\n+   EACCES               : constant :=               13;\n+   EAFNOSUPPORT         : constant :=              225;\n+   EISCONN              : constant :=              234;\n+   ETIMEDOUT            : constant :=              238;\n+   ECONNREFUSED         : constant :=              239;\n+   ENETUNREACH          : constant :=              229;\n+   EALREADY             : constant :=              244;\n+   EINPROGRESS          : constant :=              245;\n+   ENOPROTOOPT          : constant :=              220;\n+   EPROTONOSUPPORT      : constant :=              221;\n+   EINTR                : constant :=                4;\n+   EIO                  : constant :=                5;\n+   ESOCKTNOSUPPORT      : constant :=              222;\n+\n+   --  Host Errors\n+\n+   HOST_NOT_FOUND       : constant :=                1;\n+   TRY_AGAIN            : constant :=                2;\n+   NO_ADDRESS           : constant :=                4;\n+   NO_RECOVERY          : constant :=                3;\n+\n+   --  Control Flags\n+\n+   FIONBIO              : constant :=      -2147195266;\n+   FIONREAD             : constant :=       1074030207;\n+\n+   --  Shutdown Modes\n+\n+   SHUT_RD              : constant :=                0;\n+   SHUT_WR              : constant :=                1;\n+   SHUT_RDWR            : constant :=                2;\n+\n+   --  Protocol Levels\n+\n+   SOL_SOCKET           : constant :=            65535;\n+   IPPROTO_IP           : constant :=                0;\n+   IPPROTO_UDP          : constant :=               17;\n+   IPPROTO_TCP          : constant :=                6;\n+\n+   --  Socket Options\n+\n+   TCP_NODELAY          : constant :=                1;\n+   SO_SNDBUF            : constant :=             4097;\n+   SO_RCVBUF            : constant :=             4098;\n+   SO_REUSEADDR         : constant :=                4;\n+   SO_KEEPALIVE         : constant :=                8;\n+   SO_LINGER            : constant :=              128;\n+   SO_ERROR             : constant :=             4103;\n+   SO_BROADCAST         : constant :=               32;\n+   IP_ADD_MEMBERSHIP    : constant :=                5;\n+   IP_DROP_MEMBERSHIP   : constant :=                6;\n+   IP_MULTICAST_TTL     : constant :=                3;\n+   IP_MULTICAST_LOOP    : constant :=                4;\n+end GNAT.Sockets.Constants;"}, {"sha": "331d1fe7243c3dac87e043b401bfaeaa99aae3b5", "filename": "gcc/ada/3ssoccon.ads", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3ssoccon.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3ssoccon.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F3ssoccon.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,115 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--               G N A T . S O C K E T S . C O N S T A N T S                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.7 $\n+--                                                                          --\n+--              Copyright (C) 2001 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the version for Solaris\n+\n+package GNAT.Sockets.Constants is\n+\n+   --  Families\n+\n+   AF_INET              : constant :=                2;\n+   AF_INET6             : constant :=               26;\n+\n+   --  Modes\n+\n+   SOCK_STREAM          : constant :=                2;\n+   SOCK_DGRAM           : constant :=                1;\n+\n+   --  Socket Errors\n+\n+   EBADF                : constant :=                9;\n+   ENOTSOCK             : constant :=               95;\n+   ENOTCONN             : constant :=              134;\n+   ENOBUFS              : constant :=              132;\n+   EOPNOTSUPP           : constant :=              122;\n+   EFAULT               : constant :=               14;\n+   EWOULDBLOCK          : constant :=               11;\n+   EADDRNOTAVAIL        : constant :=              126;\n+   EMSGSIZE             : constant :=               97;\n+   EADDRINUSE           : constant :=              125;\n+   EINVAL               : constant :=               22;\n+   EACCES               : constant :=               13;\n+   EAFNOSUPPORT         : constant :=              124;\n+   EISCONN              : constant :=              133;\n+   ETIMEDOUT            : constant :=              145;\n+   ECONNREFUSED         : constant :=              146;\n+   ENETUNREACH          : constant :=              128;\n+   EALREADY             : constant :=              149;\n+   EINPROGRESS          : constant :=              150;\n+   ENOPROTOOPT          : constant :=               99;\n+   EPROTONOSUPPORT      : constant :=              120;\n+   EINTR                : constant :=                4;\n+   EIO                  : constant :=                5;\n+   ESOCKTNOSUPPORT      : constant :=              121;\n+\n+   --  Host Errors\n+\n+   HOST_NOT_FOUND       : constant :=                1;\n+   TRY_AGAIN            : constant :=                2;\n+   NO_ADDRESS           : constant :=                4;\n+   NO_RECOVERY          : constant :=                3;\n+\n+   --  Control Flags\n+\n+   FIONBIO              : constant :=      -2147195266;\n+   FIONREAD             : constant :=       1074030207;\n+\n+   --  Shutdown Modes\n+\n+   SHUT_RD              : constant :=                0;\n+   SHUT_WR              : constant :=                1;\n+   SHUT_RDWR            : constant :=                2;\n+\n+   --  Protocol Levels\n+\n+   SOL_SOCKET           : constant :=            65535;\n+   IPPROTO_IP           : constant :=                0;\n+   IPPROTO_UDP          : constant :=               17;\n+   IPPROTO_TCP          : constant :=                6;\n+\n+   --  Socket Options\n+\n+   TCP_NODELAY          : constant :=                1;\n+   SO_SNDBUF            : constant :=             4097;\n+   SO_RCVBUF            : constant :=             4098;\n+   SO_REUSEADDR         : constant :=                4;\n+   SO_KEEPALIVE         : constant :=                8;\n+   SO_LINGER            : constant :=              128;\n+   SO_ERROR             : constant :=             4103;\n+   SO_BROADCAST         : constant :=               32;\n+   IP_ADD_MEMBERSHIP    : constant :=               19;\n+   IP_DROP_MEMBERSHIP   : constant :=               20;\n+   IP_MULTICAST_TTL     : constant :=               17;\n+   IP_MULTICAST_LOOP    : constant :=               18;\n+end GNAT.Sockets.Constants;"}, {"sha": "e8c502683b8c1f95ba0d255e4b8f2c23ef74fc17", "filename": "gcc/ada/3ssoliop.ads", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3ssoliop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3ssoliop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F3ssoliop.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,44 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--          G N A T . S O C K E T S . L I N K E R _ O P T I O N S           --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.1 $\n+--                                                                          --\n+--              Copyright (C) 2001 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package GNAT.Sockets.Linker_Options is\n+\n+   --  This is the Solaris version of this package.\n+\n+private\n+\n+   pragma Linker_Options (\"-lnsl\");\n+   pragma Linker_Options (\"-lsocket\");\n+\n+end GNAT.Sockets.Linker_Options;"}, {"sha": "38bf70a31777a36845c4505662ff45aad1c00b86", "filename": "gcc/ada/3wsoccon.ads", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3wsoccon.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3wsoccon.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F3wsoccon.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,136 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--               G N A T . S O C K E T S . C O N S T A N T S                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.11 $\n+--                                                                          --\n+--              Copyright (C) 2001 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the version for MINGW32 NT\n+\n+package GNAT.Sockets.Constants is\n+\n+   --  Families\n+\n+   AF_INET              : constant :=                2;\n+   AF_INET6             : constant :=                3;\n+\n+   --  Modes\n+\n+   SOCK_STREAM          : constant :=                1;\n+   SOCK_DGRAM           : constant :=                2;\n+\n+   --  Socket Errors\n+\n+   EINTR                : constant :=            10004;\n+   EBADF                : constant :=            10009;\n+   EACCES               : constant :=            10013;\n+   EFAULT               : constant :=            10014;\n+   EINVAL               : constant :=            10022;\n+   EMFILE               : constant :=            10024;\n+   EWOULDBLOCK          : constant :=            10035;\n+   EINPROGRESS          : constant :=            10036;\n+   EALREADY             : constant :=            10037;\n+   ENOTSOCK             : constant :=            10038;\n+   EDESTADDRREQ         : constant :=            10039;\n+   EMSGSIZE             : constant :=            10040;\n+   EPROTOTYPE           : constant :=            10041;\n+   ENOPROTOOPT          : constant :=            10042;\n+   EPROTONOSUPPORT      : constant :=            10043;\n+   ESOCKTNOSUPPORT      : constant :=            10044;\n+   EOPNOTSUPP           : constant :=            10045;\n+   EPFNOSUPPORT         : constant :=            10046;\n+   EAFNOSUPPORT         : constant :=            10047;\n+   EADDRINUSE           : constant :=            10048;\n+   EADDRNOTAVAIL        : constant :=            10049;\n+   ENETDOWN             : constant :=            10050;\n+   ENETUNREACH          : constant :=            10051;\n+   ENETRESET            : constant :=            10052;\n+   ECONNABORTED         : constant :=            10053;\n+   ECONNRESET           : constant :=            10054;\n+   ENOBUFS              : constant :=            10055;\n+   EISCONN              : constant :=            10056;\n+   ENOTCONN             : constant :=            10057;\n+   ESHUTDOWN            : constant :=            10058;\n+   ETOOMANYREFS         : constant :=            10059;\n+   ETIMEDOUT            : constant :=            10060;\n+   ECONNREFUSED         : constant :=            10061;\n+   ELOOP                : constant :=            10062;\n+   ENAMETOOLONG         : constant :=            10063;\n+   EHOSTDOWN            : constant :=            10064;\n+   EHOSTUNREACH         : constant :=            10065;\n+   SYSNOTREADY          : constant :=            10091;\n+   VERNOTSUPPORTED      : constant :=            10092;\n+   NOTINITIALISED       : constant :=            10093;\n+   EDISCON              : constant :=            10101;\n+\n+   --  Host Errors\n+\n+   HOST_NOT_FOUND       : constant :=            11001;\n+   TRY_AGAIN            : constant :=            11002;\n+   NO_RECOVERY          : constant :=            11003;\n+   NO_ADDRESS           : constant :=            11004;\n+   NO_DATA              : constant :=            11004;\n+\n+   EIO                  : constant :=            10101;\n+\n+   --  Control Flags\n+\n+   FIONBIO              : constant :=      -2147195266;\n+   FIONREAD             : constant :=       1074030207;\n+\n+   --  Shutdown Modes\n+\n+   SHUT_RD              : constant :=                0;\n+   SHUT_WR              : constant :=                1;\n+   SHUT_RDWR            : constant :=                2;\n+\n+   --  Protocol Levels\n+\n+   SOL_SOCKET           : constant :=            65535;\n+   IPPROTO_IP           : constant :=                0;\n+   IPPROTO_UDP          : constant :=               17;\n+   IPPROTO_TCP          : constant :=                6;\n+\n+   --  Socket Options\n+\n+   TCP_NODELAY          : constant :=                1;\n+   SO_SNDBUF            : constant :=             4097;\n+   SO_RCVBUF            : constant :=             4098;\n+   SO_REUSEADDR         : constant :=                4;\n+   SO_KEEPALIVE         : constant :=                8;\n+   SO_LINGER            : constant :=              128;\n+   SO_ERROR             : constant :=             4103;\n+   SO_BROADCAST         : constant :=               32;\n+   IP_ADD_MEMBERSHIP    : constant :=                5;\n+   IP_DROP_MEMBERSHIP   : constant :=                6;\n+   IP_MULTICAST_TTL     : constant :=                3;\n+   IP_MULTICAST_LOOP    : constant :=                4;\n+\n+end GNAT.Sockets.Constants;"}, {"sha": "ebbe8413feb556024e5109cee208c4d78bc9a848", "filename": "gcc/ada/3wsocthi.adb", "status": "added", "additions": 318, "deletions": 0, "changes": 318, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3wsocthi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3wsocthi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F3wsocthi.adb?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,318 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                    G N A T . S O C K E T S . T H I N                     --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $\n+--                                                                          --\n+--              Copyright (C) 2001 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This version is for NT.\n+\n+package body GNAT.Sockets.Thin is\n+\n+   use type C.unsigned;\n+\n+   WSAData_Dummy : array (1 .. 512) of C.int;\n+\n+   WS_Version  : constant := 16#0101#;\n+   Initialized : Boolean := False;\n+\n+   -----------\n+   -- Clear --\n+   -----------\n+\n+   procedure Clear\n+     (Item   : in out Fd_Set;\n+      Socket : C.int)\n+   is\n+   begin\n+      for J in 1 .. Item.fd_count loop\n+         if Item.fd_array (J) = Socket then\n+            Item.fd_array (J .. Item.fd_count - 1) :=\n+              Item.fd_array (J + 1 .. Item.fd_count);\n+            Item.fd_count := Item.fd_count - 1;\n+            exit;\n+         end if;\n+      end loop;\n+   end Clear;\n+\n+   -----------\n+   -- Empty --\n+   -----------\n+\n+   procedure Empty  (Item : in out Fd_Set) is\n+   begin\n+      Item := Null_Fd_Set;\n+   end Empty;\n+\n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize is\n+   begin\n+      if Initialized then\n+         WSACleanup;\n+         Initialized := False;\n+      end if;\n+   end Finalize;\n+\n+   --------------\n+   -- Is_Empty --\n+   --------------\n+\n+   function Is_Empty (Item : Fd_Set) return Boolean is\n+   begin\n+      return Item.fd_count = 0;\n+   end Is_Empty;\n+\n+   ------------\n+   -- Is_Set --\n+   ------------\n+\n+   function Is_Set (Item : Fd_Set; Socket : C.int) return Boolean is\n+   begin\n+      for J in 1 .. Item.fd_count loop\n+         if Item.fd_array (J) = Socket then\n+            return True;\n+         end if;\n+      end loop;\n+\n+      return False;\n+   end Is_Set;\n+\n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize (Process_Blocking_IO : Boolean := False) is\n+      Return_Value : Interfaces.C.int;\n+\n+   begin\n+      if not Initialized then\n+         Return_Value := WSAStartup (WS_Version, WSAData_Dummy'Address);\n+         pragma Assert (Interfaces.C.\"=\" (Return_Value, 0));\n+         Initialized := True;\n+      end if;\n+   end Initialize;\n+\n+   ---------\n+   -- Max --\n+   ---------\n+\n+   function Max (Item : Fd_Set) return C.int is\n+      L : C.int := 0;\n+\n+   begin\n+      for J in 1 .. Item.fd_count loop\n+         if Item.fd_array (J) > L then\n+            L := Item.fd_array (J);\n+         end if;\n+      end loop;\n+\n+      return L;\n+   end Max;\n+\n+   ---------\n+   -- Set --\n+   ---------\n+\n+   procedure Set (Item : in out Fd_Set; Socket : in C.int) is\n+   begin\n+      Item.fd_count := Item.fd_count + 1;\n+      Item.fd_array (Item.fd_count) := Socket;\n+   end Set;\n+\n+   --------------------------\n+   -- Socket_Error_Message --\n+   --------------------------\n+\n+   function Socket_Error_Message (Errno : Integer) return String is\n+      use GNAT.Sockets.Constants;\n+\n+   begin\n+      case Errno is\n+         when EINTR =>\n+            return \"Interrupted system call\";\n+\n+         when EBADF =>\n+            return \"Bad file number\";\n+\n+         when EACCES =>\n+            return \"Permission denied\";\n+\n+         when EFAULT =>\n+            return \"Bad address\";\n+\n+         when EINVAL =>\n+            return \"Invalid argument\";\n+\n+         when EMFILE =>\n+            return \"Too many open files\";\n+\n+         when EWOULDBLOCK =>\n+            return \"Operation would block\";\n+\n+         when EINPROGRESS =>\n+            return \"Operation now in progress. This error is \"\n+              & \"returned if any Windows Sockets API \"\n+              & \"function is called while a blocking \"\n+              & \"function is in progress\";\n+\n+         when EALREADY =>\n+            return \"Operation already in progress\";\n+\n+         when ENOTSOCK =>\n+            return \"Socket operation on nonsocket\";\n+\n+         when EDESTADDRREQ =>\n+            return \"Destination address required\";\n+\n+         when EMSGSIZE =>\n+            return \"Message too long\";\n+\n+         when EPROTOTYPE =>\n+            return \"Protocol wrong type for socket\";\n+\n+         when ENOPROTOOPT =>\n+            return \"Protocol not available\";\n+\n+         when EPROTONOSUPPORT =>\n+            return \"Protocol not supported\";\n+\n+         when ESOCKTNOSUPPORT =>\n+            return \"Socket type not supported\";\n+\n+         when EOPNOTSUPP =>\n+            return \"Operation not supported on socket\";\n+\n+         when EPFNOSUPPORT =>\n+            return \"Protocol family not supported\";\n+\n+         when EAFNOSUPPORT =>\n+            return \"Address family not supported by protocol family\";\n+\n+         when EADDRINUSE =>\n+            return \"Address already in use\";\n+\n+         when EADDRNOTAVAIL =>\n+            return \"Cannot assign requested address\";\n+\n+         when ENETDOWN =>\n+            return \"Network is down. This error may be \"\n+              & \"reported at any time if the Windows \"\n+              & \"Sockets implementation detects an \"\n+              & \"underlying failure\";\n+\n+         when ENETUNREACH =>\n+            return \"Network is unreachable\";\n+\n+         when ENETRESET =>\n+            return \"Network dropped connection on reset\";\n+\n+         when ECONNABORTED =>\n+            return \"Software caused connection abort\";\n+\n+         when ECONNRESET =>\n+            return \"Connection reset by peer\";\n+\n+         when ENOBUFS =>\n+            return \"No buffer space available\";\n+\n+         when EISCONN  =>\n+            return \"Socket is already connected\";\n+\n+         when ENOTCONN =>\n+            return \"Socket is not connected\";\n+\n+         when ESHUTDOWN =>\n+            return \"Cannot send after socket shutdown\";\n+\n+         when ETOOMANYREFS =>\n+            return \"Too many references: cannot splice\";\n+\n+         when ETIMEDOUT =>\n+            return \"Connection timed out\";\n+\n+         when ECONNREFUSED =>\n+            return \"Connection refused\";\n+\n+         when ELOOP =>\n+            return \"Too many levels of symbolic links\";\n+\n+         when ENAMETOOLONG =>\n+            return \"File name too long\";\n+\n+         when EHOSTDOWN =>\n+            return \"Host is down\";\n+\n+         when EHOSTUNREACH =>\n+            return \"No route to host\";\n+\n+         when SYSNOTREADY =>\n+            return \"Returned by WSAStartup(), indicating that \"\n+              & \"the network subsystem is unusable\";\n+\n+         when VERNOTSUPPORTED =>\n+            return \"Returned by WSAStartup(), indicating that \"\n+              & \"the Windows Sockets DLL cannot support this application\";\n+\n+         when NOTINITIALISED =>\n+            return \"Winsock not initialized. This message is \"\n+              & \"returned by any function except WSAStartup(), \"\n+              & \"indicating that a successful WSAStartup() has \"\n+              & \"not yet been performed\";\n+\n+         when EDISCON =>\n+            return \"Disconnect\";\n+\n+         when HOST_NOT_FOUND =>\n+            return \"Host not found. This message indicates \"\n+              & \"that the key (name, address, and so on) was not found\";\n+\n+         when TRY_AGAIN =>\n+            return \"Nonauthoritative host not found. This error may \"\n+              & \"suggest that the name service itself is not functioning\";\n+\n+         when NO_RECOVERY =>\n+            return \"Nonrecoverable error. This error may suggest that the \"\n+              & \"name service itself is not functioning\";\n+\n+         when NO_DATA =>\n+            return \"Valid name, no data record of requested type. \"\n+              & \"This error indicates that the key (name, address, \"\n+              & \"and so on) was not found.\";\n+\n+         when others =>\n+            return \"Unknown system error\";\n+\n+      end case;\n+   end Socket_Error_Message;\n+\n+end GNAT.Sockets.Thin;"}, {"sha": "06fbce05c2886dbc2bbe7367df873f8590931346", "filename": "gcc/ada/3wsocthi.ads", "status": "added", "additions": 363, "deletions": 0, "changes": 363, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3wsocthi.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3wsocthi.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F3wsocthi.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,363 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                    G N A T . S O C K E T S . T H I N                     --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.16 $\n+--                                                                          --\n+--              Copyright (C) 2001 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This version is for NT.\n+\n+with Interfaces.C.Pointers;\n+with Interfaces.C.Strings;\n+\n+with GNAT.Sockets.Constants;\n+\n+with System;\n+\n+package GNAT.Sockets.Thin is\n+\n+   --  ??? far more comments required ???\n+\n+   package C renames Interfaces.C;\n+\n+   use type C.int;\n+   --  So that we can declare the Failure constant below.\n+\n+   Success : constant C.int :=  0;\n+   Failure : constant C.int := -1;\n+\n+   function Socket_Errno return Integer;\n+   --  Returns last socket error number.\n+\n+   function Socket_Error_Message (Errno : Integer) return String;\n+   --  Returns the error message string for the error number Errno. If\n+   --  Errno is not known it returns \"Unknown system error\".\n+\n+   type Socket_Fd_Array is array (C.unsigned range 1 .. 64) of C.int;\n+   pragma Convention (C, Socket_Fd_Array);\n+\n+   type Fd_Set is record\n+      fd_count : C.unsigned;\n+      fd_array : Socket_Fd_Array;\n+   end record;\n+   pragma Convention (C, Fd_Set);\n+\n+   Null_Fd_Set : constant Fd_Set := (0, (others => 0));\n+\n+   type Fd_Set_Access is access all Fd_Set;\n+   pragma Convention (C, Fd_Set_Access);\n+\n+   type Timeval_Unit is new C.long;\n+   pragma Convention (C, Timeval_Unit);\n+\n+   type Timeval is record\n+      Tv_Sec  : Timeval_Unit;\n+      Tv_Usec : Timeval_Unit;\n+   end record;\n+   pragma Convention (C, Timeval);\n+\n+   type Timeval_Access is access all Timeval;\n+   pragma Convention (C, Timeval_Access);\n+\n+   Immediat : constant Timeval := (0, 0);\n+\n+   type Int_Access is access all C.int;\n+   pragma Convention (C, Int_Access);\n+   --  Access to C integers\n+\n+   type Chars_Ptr_Array is array (C.size_t range <>) of\n+     aliased C.Strings.chars_ptr;\n+\n+   package Chars_Ptr_Pointers is\n+      new C.Pointers (C.size_t, C.Strings.chars_ptr, Chars_Ptr_Array,\n+                    C.Strings.Null_Ptr);\n+   --  Arrays of C (char *)\n+\n+   type In_Addr is record\n+      S_B1, S_B2, S_B3, S_B4 : C.unsigned_char;\n+   end record;\n+   pragma Convention (C, In_Addr);\n+   --  Internet address\n+\n+   type In_Addr_Access is access all In_Addr;\n+   pragma Convention (C, In_Addr_Access);\n+   --  Access to internet address\n+\n+   Inaddr_Any : aliased constant In_Addr := (others => 0);\n+   --  Any internet address (all the interfaces)\n+\n+   type In_Addr_Access_Array is array (C.size_t range <>)\n+     of aliased In_Addr_Access;\n+   pragma Convention (C, In_Addr_Access_Array);\n+   package In_Addr_Access_Pointers is\n+     new C.Pointers (C.size_t, In_Addr_Access, In_Addr_Access_Array, null);\n+   --  Array of internet addresses\n+\n+   type Sockaddr is record\n+      Sa_Family : C.unsigned_short;\n+      Sa_Data   : C.char_array (1 .. 14);\n+   end record;\n+   pragma Convention (C, Sockaddr);\n+   --  Socket address\n+\n+   type Sockaddr_Access is access all Sockaddr;\n+   pragma Convention (C, Sockaddr_Access);\n+   --  Access to socket address\n+\n+   type Sockaddr_In is record\n+      Sin_Family : C.unsigned_short      := Constants.AF_INET;\n+      Sin_Port   : C.unsigned_short      := 0;\n+      Sin_Addr   : In_Addr               := Inaddr_Any;\n+      Sin_Zero   : C.char_array (1 .. 8) := (others => C.char'Val (0));\n+   end record;\n+   pragma Convention (C, Sockaddr_In);\n+   --  Internet socket address\n+\n+   type Sockaddr_In_Access is access all Sockaddr_In;\n+   pragma Convention (C, Sockaddr_In_Access);\n+   --  Access to internet socket address\n+\n+   type Hostent is record\n+      H_Name      : C.Strings.chars_ptr;\n+      H_Aliases   : Chars_Ptr_Pointers.Pointer;\n+      H_Addrtype  : C.short;\n+      H_Length    : C.short;\n+      H_Addr_List : In_Addr_Access_Pointers.Pointer;\n+   end record;\n+   pragma Convention (C, Hostent);\n+   --  Host entry\n+\n+   type Hostent_Access is access all Hostent;\n+   pragma Convention (C, Hostent_Access);\n+   --  Access to host entry\n+\n+   type Two_Int is array (0 .. 1) of C.int;\n+   pragma Convention (C, Two_Int);\n+   --  Used with pipe()\n+\n+   function C_Accept\n+     (S       : C.int;\n+      Addr    : System.Address;\n+      Addrlen : access C.int)\n+      return    C.int;\n+\n+   function C_Bind\n+     (S       : C.int;\n+      Name    : System.Address;\n+      Namelen : C.int)\n+      return    C.int;\n+\n+   function C_Close\n+     (Fd  : C.int)\n+     return C.int;\n+\n+   function C_Connect\n+     (S       : C.int;\n+      Name    : System.Address;\n+      Namelen : C.int)\n+      return    C.int;\n+\n+   function C_Gethostbyaddr\n+     (Addr     : System.Address;\n+      Length   : C.int;\n+      Typ      : C.int)\n+      return     Hostent_Access;\n+\n+   function C_Gethostbyname\n+     (Name : C.char_array)\n+      return Hostent_Access;\n+\n+   function C_Gethostname\n+     (Name    : System.Address;\n+      Namelen : C.int)\n+      return    C.int;\n+\n+   function C_Getpeername\n+     (S       : C.int;\n+      Name    : System.Address;\n+      Namelen : access C.int)\n+      return    C.int;\n+\n+   function C_Getsockname\n+     (S       : C.int;\n+      Name    : System.Address;\n+      Namelen : access C.int)\n+      return    C.int;\n+\n+   function C_Getsockopt\n+     (S       : C.int;\n+      Level   : C.int;\n+      Optname : C.int;\n+      Optval  : System.Address;\n+      Optlen  : access C.int)\n+      return    C.int;\n+\n+   function C_Inet_Addr\n+     (Cp   : C.Strings.chars_ptr)\n+      return C.int;\n+\n+   function C_Ioctl\n+     (S    : C.int;\n+      Req  : C.int;\n+      Arg  : Int_Access)\n+      return C.int;\n+\n+   function C_Listen\n+     (S, Backlog : C.int)\n+      return       C.int;\n+\n+   function C_Read\n+     (Fildes : C.int;\n+      Buf    : System.Address;\n+      Nbyte  : C.int)\n+      return   C.int;\n+\n+   function C_Recv\n+     (S     : C.int;\n+      Buf   : System.Address;\n+      Len   : C.int;\n+      Flags : C.int)\n+      return  C.int;\n+\n+   function C_Recvfrom\n+     (S       : C.int;\n+      Buf     : System.Address;\n+      Len     : C.int;\n+      Flags   : C.int;\n+      From    : Sockaddr_In_Access;\n+      Fromlen : access C.int)\n+      return    C.int;\n+\n+   function C_Select\n+     (Nfds      : C.int;\n+      Readfds   : Fd_Set_Access;\n+      Writefds  : Fd_Set_Access;\n+      Exceptfds : Fd_Set_Access;\n+      Timeout   : Timeval_Access)\n+      return      C.int;\n+\n+   function C_Send\n+     (S     : C.int;\n+      Buf   : System.Address;\n+      Len   : C.int;\n+      Flags : C.int)\n+      return  C.int;\n+\n+   function C_Sendto\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Len   : C.int;\n+      Flags : C.int;\n+      To    : Sockaddr_In_Access;\n+      Tolen : C.int)\n+      return  C.int;\n+\n+   function C_Setsockopt\n+     (S       : C.int;\n+      Level   : C.int;\n+      Optname : C.int;\n+      Optval  : System.Address;\n+      Optlen  : C.int)\n+      return    C.int;\n+\n+   function C_Shutdown\n+     (S    : C.int;\n+      How  : C.int)\n+      return C.int;\n+\n+   function C_Socket\n+     (Domain   : C.int;\n+      Typ      : C.int;\n+      Protocol : C.int)\n+      return     C.int;\n+\n+   function C_Strerror\n+     (Errnum : C.int)\n+      return   C.Strings.chars_ptr;\n+\n+   function C_System\n+     (Command : System.Address)\n+      return    C.int;\n+\n+   function C_Write\n+     (Fildes : C.int;\n+      Buf    : System.Address;\n+      Nbyte  : C.int)\n+      return   C.int;\n+\n+   function WSAStartup\n+     (WS_Version     : Interfaces.C.int;\n+      WSADataAddress : System.Address)\n+      return           Interfaces.C.int;\n+\n+   procedure WSACleanup;\n+\n+   procedure Clear    (Item : in out Fd_Set; Socket : in C.int);\n+   procedure Empty    (Item : in out Fd_Set);\n+   function  Is_Empty (Item : Fd_Set) return Boolean;\n+   function  Is_Set   (Item : Fd_Set; Socket : C.int) return Boolean;\n+   function  Max      (Item : Fd_Set) return C.int;\n+   procedure Set      (Item : in out Fd_Set; Socket : in C.int);\n+\n+   procedure Finalize;\n+   procedure Initialize (Process_Blocking_IO : Boolean := False);\n+\n+private\n+\n+   pragma Import (Stdcall, C_Accept, \"accept\");\n+   pragma Import (Stdcall, C_Bind, \"bind\");\n+   pragma Import (Stdcall, C_Close, \"closesocket\");\n+   pragma Import (Stdcall, C_Connect, \"connect\");\n+   pragma Import (Stdcall, C_Gethostbyaddr, \"gethostbyaddr\");\n+   pragma Import (Stdcall, C_Gethostbyname, \"gethostbyname\");\n+   pragma Import (Stdcall, C_Gethostname, \"gethostname\");\n+   pragma Import (Stdcall, C_Getpeername, \"getpeername\");\n+   pragma Import (Stdcall, C_Getsockname, \"getsockname\");\n+   pragma Import (Stdcall, C_Getsockopt, \"getsockopt\");\n+   pragma Import (Stdcall, C_Inet_Addr, \"inet_addr\");\n+   pragma Import (Stdcall, C_Ioctl, \"ioctlsocket\");\n+   pragma Import (Stdcall, C_Listen, \"listen\");\n+   pragma Import (C, C_Read, \"_read\");\n+   pragma Import (Stdcall, C_Recv, \"recv\");\n+   pragma Import (Stdcall, C_Recvfrom, \"recvfrom\");\n+   pragma Import (Stdcall, C_Select, \"select\");\n+   pragma Import (Stdcall, C_Send, \"send\");\n+   pragma Import (Stdcall, C_Sendto, \"sendto\");\n+   pragma Import (Stdcall, C_Setsockopt, \"setsockopt\");\n+   pragma Import (Stdcall, C_Shutdown, \"shutdown\");\n+   pragma Import (Stdcall, C_Socket, \"socket\");\n+   pragma Import (C, C_Strerror, \"strerror\");\n+   pragma Import (C, C_System, \"_system\");\n+   pragma Import (C, C_Write, \"_write\");\n+   pragma Import (Stdcall, Socket_Errno, \"WSAGetLastError\");\n+   pragma Import (Stdcall, WSAStartup, \"WSAStartup\");\n+   pragma Import (Stdcall, WSACleanup, \"WSACleanup\");\n+\n+end GNAT.Sockets.Thin;"}, {"sha": "fc3e1031124c4449c4190af375c9a231123c49c1", "filename": "gcc/ada/3wsoliop.ads", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3wsoliop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F3wsoliop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F3wsoliop.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,43 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--          G N A T . S O C K E T S . L I N K E R _ O P T I O N S           --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.1 $\n+--                                                                          --\n+--              Copyright (C) 2001 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package GNAT.Sockets.Linker_Options is\n+\n+   --  Windows NT version of this package\n+\n+private\n+\n+   pragma Linker_Options (\"-lwsock32\");\n+\n+end GNAT.Sockets.Linker_Options;"}, {"sha": "8442cc8dc88015f8ac5fb7b4c551a44cea1a0106", "filename": "gcc/ada/41intnam.ads", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F41intnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F41intnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F41intnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,168 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.2 $\n+--                                                                          --\n+--          Copyright (C) 1991-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is a SCO UnixWare version of this package.\n+--\n+--  The following signals are reserved by the run time:\n+--\n+--  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGTRAP, SIGABRT, SIGINT,\n+--  SIGWAITING, SIGLWP, SIGTTIN, SIGTTOU, SIGTSTP, SIGPROF, SIGSTOP, SIGKILL\n+--\n+--  The pragma Unreserve_All_Interrupts affects the following signal(s):\n+--\n+--  SIGINT: made available for Ada handler\n+--  SIGILL, SIGBUS, SIGSEGV: disconnected from runtime exception mapping\n+\n+with System.OS_Interface;\n+--  used for names of interrupts\n+\n+package Ada.Interrupts.Names is\n+\n+   --  Beware that the mapping of names to signals may be\n+   --  many-to-one. There may be aliases.\n+\n+   SIGHUP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGHUP;      --  hangup\n+\n+   SIGINT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+\n+   SIGQUIT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n+\n+   SIGILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+\n+   SIGTRAP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTRAP;     --  trace trap (not reset)\n+\n+   SIGIOT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGIOT;      --  IOT instruction\n+\n+   SIGABRT : constant Interrupt_ID := --  used by abort,\n+     System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n+\n+   SIGEMT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGEMT;      --  EMT instruction\n+\n+   SIGFPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFPE;      --  floating point exception\n+\n+   SIGKILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n+\n+   SIGBUS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGBUS;      --  bus error\n+\n+   SIGSEGV : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+\n+   SIGSYS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSYS;      --  bad argument to system call\n+\n+   SIGPIPE : constant Interrupt_ID := --  write on a pipe with\n+     System.OS_Interface.SIGPIPE;     --  no one to read it\n+\n+   SIGALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGALRM;     --  alarm clock\n+\n+   SIGTERM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+\n+   SIGUSR1 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR1;     --  user defined signal 1\n+\n+   SIGUSR2 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR2;     --  user defined signal 2\n+\n+   SIGCLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCLD;      --  child status change\n+\n+   SIGCHLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCHLD;     --  4.3BSD's/POSIX name for SIGCLD\n+\n+   SIGPWR : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPWR;      --  power-fail restart\n+\n+   SIGWINCH : constant Interrupt_ID :=\n+     System.OS_Interface.SIGWINCH;    --  window size change\n+\n+   SIGURG : constant Interrupt_ID :=\n+     System.OS_Interface.SIGURG;      --  urgent condition on IO channel\n+\n+   SIGPOLL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPOLL;     --  pollable event occurred\n+\n+   SIGIO : constant Interrupt_ID :=   --  input/output possible,\n+     System.OS_Interface.SIGIO;       --  SIGPOLL alias (Solaris)\n+\n+   SIGSTOP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSTOP;     --  stop (cannot be caught or ignored)\n+\n+   SIGTSTP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTSTP;     --  user stop requested from tty\n+\n+   SIGCONT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCONT;     --  stopped process has been continued\n+\n+   SIGTTIN : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTIN;     --  background tty read attempted\n+\n+   SIGTTOU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTOU;     --  background tty write attempted\n+\n+   SIGVTALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGVTALRM;   --  virtual timer expired\n+\n+   SIGPROF : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPROF;     --  profiling timer expired\n+\n+   SIGXCPU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXCPU;     --  CPU time limit exceeded\n+\n+   SIGXFSZ : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXFSZ;     --  filesize limit exceeded\n+\n+   SIGWAITING : constant Interrupt_ID :=\n+     System.OS_Interface.SIGWAITING;  --  process's lwps blocked (Solaris)\n+\n+   SIGLWP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGLWP;      --  used by thread library (Solaris)\n+\n+   SIGAIO : constant Interrupt_ID :=\n+     System.OS_Interface.SIGAIO;      --  Asynchronous I/O signal\n+\n+end Ada.Interrupts.Names;"}, {"sha": "6e35c55cf29f1c6f0c54109da900a8dd4823b4bb", "filename": "gcc/ada/42intnam.ads", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F42intnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F42intnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F42intnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,169 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.2 $\n+--                                                                          --\n+--          Copyright (C) 1991-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is a LynxOS version of this package.\n+--\n+--  The following signals are reserved by the run time:\n+--\n+--  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGTRAP, SIGABRT, SIGINT,\n+--  SIGWAITING, SIGLWP, SIGTTIN, SIGTTOU, SIGTSTP, SIGPROF, SIGSTOP, SIGKILL\n+--\n+--  The pragma Unreserve_All_Interrupts affects the following signal(s):\n+--\n+--  SIGINT: made available for Ada handler\n+--  SIGILL, SIGBUS, SIGSEGV: disconnected from runtime exception mapping\n+\n+with System.OS_Interface;\n+--  used for names of interrupts\n+\n+package Ada.Interrupts.Names is\n+\n+   --  Beware that the mapping of names to signals may be\n+   --  many-to-one. There may be aliases.\n+\n+   SIGHUP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGHUP;      --  hangup\n+\n+   SIGINT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+\n+   SIGQUIT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n+\n+   SIGILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+\n+   SIGTRAP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTRAP;     --  trace trap (not reset)\n+\n+   SIGBRK : constant Interrupt_ID :=\n+     System.OS_Interface.SIGBRK;      --  break\n+\n+   SIGIOT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGIOT;      --  IOT instruction\n+\n+   SIGABRT : constant Interrupt_ID := --  used by abort,\n+     System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n+\n+   SIGCORE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCORE;     --  kill with core dump\n+\n+   SIGEMT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGEMT;      --  EMT instruction\n+\n+   SIGFPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFPE;      --  floating point exception\n+\n+   SIGKILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n+\n+   SIGBUS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGBUS;      --  bus error\n+\n+   SIGSEGV : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+\n+   SIGSYS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSYS;      --  bad argument to system call\n+\n+   SIGPIPE : constant Interrupt_ID := --  write on a pipe with\n+     System.OS_Interface.SIGPIPE;     --  no one to read it\n+\n+   SIGALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGALRM;     --  alarm clock\n+\n+   SIGTERM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+\n+   SIGURG : constant Interrupt_ID :=\n+     System.OS_Interface.SIGURG;      --  urgent condition on IO channel\n+\n+   SIGSTOP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSTOP;     --  stop (cannot be caught or ignored)\n+\n+   SIGTSTP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTSTP;     --  user stop requested from tty\n+\n+   SIGCONT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCONT;     --  stopped process has been continued\n+\n+   SIGCLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCLD;      --  child status change\n+\n+   SIGCHLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCHLD;     --  4.3BSD's/POSIX name for SIGCLD\n+\n+   SIGTTIN : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTIN;     --  background tty read attempted\n+\n+   SIGTTOU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTOU;     --  background tty write attempted\n+\n+   SIGPOLL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPOLL;     --  pollable event occurred\n+\n+   SIGIO : constant Interrupt_ID :=   --  input/output possible,\n+     System.OS_Interface.SIGIO;       --  SIGPOLL alias (Solaris)\n+\n+   SIGXCPU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXCPU;     --  CPU time limit exceeded\n+\n+   SIGXFSZ : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXFSZ;     --  filesize limit exceeded\n+\n+   SIGVTALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGVTALRM;   --  virtual timer expired\n+\n+   SIGPROF : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPROF;     --  profiling timer expired\n+\n+   SIGWINCH : constant Interrupt_ID :=\n+     System.OS_Interface.SIGWINCH;    --  window size change\n+\n+   SIGLOST : constant Interrupt_ID :=\n+     System.OS_Interface.SIGLOST;     --  SUN 4.1 compatibility\n+\n+   SIGUSR1 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR1;     --  user defined signal 1\n+\n+   SIGUSR2 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR2;     --  user defined signal 2\n+\n+   SIGPRIO : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPRIO;\n+   --  sent to a process with its priority\n+   --  or group is changed\n+end Ada.Interrupts.Names;"}, {"sha": "b882bcb6abb58e9dc7860b18b5353acd7dfa043c", "filename": "gcc/ada/4aintnam.ads", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4aintnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4aintnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4aintnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,155 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.4 $                             --\n+--                                                                          --\n+--          Copyright (C) 1991-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the DEC Unix 4.0 version of this package.\n+--\n+--  The following signals are reserved by the run time:\n+--\n+--  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGABRT, SIGTRAP, SIGINT, SIGALRM,\n+--  SIGSTOP, SIGKILL\n+--\n+--  The pragma Unreserve_All_Interrupts affects the following signal(s):\n+--\n+--  SIGINT: made available for Ada handler\n+--  SIGILL, SIGBUS, SIGSEGV: disconnected from runtime exception mapping\n+\n+with System.OS_Interface;\n+--  used for names of interrupts\n+\n+package Ada.Interrupts.Names is\n+\n+   --  Beware that the mapping of names to signals may be\n+   --  many-to-one.  There may be aliases.  Also, for all\n+   --  signal names that are not supported on the current system\n+   --  the value of the corresponding constant will be zero.\n+\n+   SIGHUP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGHUP;      --  hangup\n+\n+   SIGINT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+\n+   SIGQUIT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n+\n+   SIGILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+\n+   SIGTRAP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTRAP;     --  trace trap (not reset)\n+\n+   SIGIOT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGIOT;      --  IOT instruction\n+\n+   SIGABRT : constant Interrupt_ID := --  used by abort,\n+     System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n+\n+   SIGEMT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGEMT;      --  EMT instruction\n+\n+   SIGFPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFPE;      --  floating point exception\n+\n+   SIGKILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n+\n+   SIGBUS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGBUS;      --  bus error\n+\n+   SIGSEGV : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+\n+   SIGSYS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSYS;      --  bad argument to system call\n+\n+   SIGPIPE : constant Interrupt_ID := --  write on a pipe with\n+     System.OS_Interface.SIGPIPE;     --  no one to read it\n+\n+   SIGALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGALRM;     --  alarm clock\n+\n+   SIGTERM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+\n+   SIGUSR1 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR1;     --  user defined signal 1\n+\n+   SIGUSR2 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR2;     --  user defined signal 2\n+\n+   SIGCHLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCHLD;     --  4.3BSD's/POSIX name for SIGCLD\n+\n+   SIGWINCH : constant Interrupt_ID :=\n+     System.OS_Interface.SIGWINCH;    --  window size change\n+\n+   SIGURG : constant Interrupt_ID :=\n+     System.OS_Interface.SIGURG;      --  urgent condition on IO channel\n+\n+   SIGPOLL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPOLL;     --  pollable event occurred\n+\n+   SIGIO : constant Interrupt_ID :=   --  input/output possible,\n+     System.OS_Interface.SIGIO;       --  SIGPOLL alias (Solaris)\n+\n+   SIGSTOP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSTOP;     --  stop (cannot be caught or ignored)\n+\n+   SIGTSTP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTSTP;     --  user stop requested from tty\n+\n+   SIGCONT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCONT;     --  stopped process has been continued\n+\n+   SIGTTIN : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTIN;     --  background tty read attempted\n+\n+   SIGTTOU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTOU;     --  background tty write attempted\n+\n+   SIGVTALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGVTALRM;   --  virtual timer expired\n+\n+   SIGPROF : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPROF;     --  profiling timer expired\n+\n+   SIGXCPU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXCPU;     --  CPU time limit exceeded\n+\n+   SIGXFSZ : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXFSZ;     --  filesize limit exceeded\n+\n+end Ada.Interrupts.Names;"}, {"sha": "2fd50469848537f7ee3c2b158e60ed552b7e0409", "filename": "gcc/ada/4cintnam.ads", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4cintnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4cintnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4cintnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,205 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.4 $                             --\n+--                                                                          --\n+--           Copyright (C) 1991-2001 Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is a AIX version of this package.\n+--\n+--  The following signals are reserved by the run time (native threads):\n+--\n+--  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGABRT, SIGTRAP, SIGINT, SIGTERM,\n+--  SIGSTOP, SIGKILL\n+--\n+--  The following signals are reserved by the run time (FSU threads):\n+--\n+--  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGABRT, SIGTRAP, SIGINT, SIGALRM,\n+--  SIGWAITING, SIGSTOP, SIGKILL\n+--\n+--  The pragma Unreserve_All_Interrupts affects the following signal(s):\n+--\n+--  SIGINT: made available for Ada handler\n+--  SIGILL, SIGBUS, SIGSEGV: disconnected from runtime exception mapping\n+\n+--  This target-dependent package spec contains names of interrupts\n+--  supported by the local system.\n+\n+with System.OS_Interface;\n+--  used for names of interrupts\n+\n+package Ada.Interrupts.Names is\n+\n+   --  Beware that the mapping of names to signals may be\n+   --  many-to-one.  There may be aliases.  Also, for all\n+   --  signal names that are not supported on the current system\n+   --  the value of the corresponding constant will be zero.\n+\n+   SIGHUP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGHUP;      --  hangup\n+\n+   SIGINT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+\n+   SIGQUIT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n+\n+   SIGILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+\n+   SIGTRAP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTRAP;     --  trace trap (not reset)\n+\n+   SIGIOT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGIOT;      --  IOT instruction\n+\n+   SIGABRT : constant Interrupt_ID := --  used by abort,\n+     System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n+\n+   SIGEMT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGEMT;      --  EMT instruction\n+\n+   SIGFPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFPE;      --  floating point exception\n+\n+   SIGKILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n+\n+   SIGBUS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGBUS;      --  bus error\n+\n+   SIGSEGV : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+\n+   SIGSYS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSYS;      --  bad argument to system call\n+\n+   SIGPIPE : constant Interrupt_ID := --  write on a pipe with\n+     System.OS_Interface.SIGPIPE;     --  no one to read it\n+\n+   SIGALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGALRM;     --  alarm clock\n+\n+   SIGTERM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+\n+   SIGUSR1 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR1;     --  user defined signal 1\n+\n+   SIGUSR2 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR2;     --  user defined signal 2\n+\n+   SIGCLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCLD;      --  child status change\n+\n+   SIGCHLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCHLD;     --  4.3BSD's/POSIX name for SIGCLD\n+\n+   SIGPWR : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPWR;        --  power-fail restart\n+\n+   SIGWINCH : constant Interrupt_ID :=\n+     System.OS_Interface.SIGWINCH;    --  window size change\n+\n+   SIGURG : constant Interrupt_ID :=\n+     System.OS_Interface.SIGURG;      --  urgent condition on IO channel\n+\n+   SIGPOLL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPOLL;     --  pollable event occurred\n+\n+   SIGIO : constant Interrupt_ID :=   --  input/output possible,\n+     System.OS_Interface.SIGIO;       --  SIGPOLL alias (Solaris)\n+\n+   SIGSTOP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSTOP;     --  stop (cannot be caught or ignored)\n+\n+   SIGTSTP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTSTP;     --  user stop requested from tty\n+\n+   SIGCONT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCONT;     --  stopped process has been continued\n+\n+   SIGTTIN : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTIN;     --  background tty read attempted\n+\n+   SIGTTOU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTOU;     --  background tty write attempted\n+\n+   SIGVTALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGVTALRM;   --  virtual timer expired\n+\n+   SIGPROF : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPROF;     --  profiling timer expired\n+\n+   SIGXCPU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXCPU;     --  CPU time limit exceeded\n+\n+   SIGXFSZ : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXFSZ;     --  filesize limit exceeded\n+\n+   SIGMSG : constant Interrupt_ID :=\n+     System.OS_Interface.SIGMSG;      -- input data is in the ring buffer\n+\n+   SIGDANGER : constant Interrupt_ID :=\n+     System.OS_Interface.SIGDANGER;   -- system crash imminent;\n+\n+   SIGMIGRATE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGMIGRATE;  -- migrate process\n+\n+   SIGPRE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPRE;      -- programming exception\n+\n+   SIGVIRT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGVIRT;     -- AIX virtual time alarm\n+\n+   SIGALRM1 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGALRM1;    -- m:n condition variables\n+\n+   SIGWAITING : constant Interrupt_ID :=\n+     System.OS_Interface.SIGWAITING;  --  m:n scheduling\n+\n+   SIGKAP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGKAP;      -- keep alive poll from native keyboard\n+\n+   SIGGRANT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGGRANT;    -- monitor mode granted\n+\n+   SIGRETRACT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGRETRACT;  -- monitor mode should be relinguished\n+\n+   SIGSOUND : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSOUND;    -- sound control has completed\n+\n+   SIGSAK : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSAK;      -- secure attention key\n+\n+end Ada.Interrupts.Names;"}, {"sha": "7904e9f8c97ded8f4a7a0a6646fd280c069c6828", "filename": "gcc/ada/4dintnam.ads", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4dintnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4dintnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4dintnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,101 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.4 $                             --\n+--                                                                          --\n+--             Copyright (C) 1991-2001 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is a DOS/DJGPPv2 (FSU THREAD) version of this package.\n+--\n+--  The following signals are reserved by the run time:\n+--\n+--  SIGFPE, SIGILL, SIGSEGV, SIGABRT, SIGTRAP, SIGINT, SIGALRM\n+--  SIGSTOP, SIGKILL\n+--\n+--  The pragma Unreserve_All_Interrupts affects the following signal(s):\n+--\n+--  SIGINT: Made available for Ada handler\n+--  SIGILL, SIGBUS, SIGSEGV: disconnected from runtime exception mapping\n+\n+--  This target-dependent package spec contains names of interrupts\n+--  supported by the local system.\n+\n+with System.OS_Interface;\n+--  used for names of interrupts\n+\n+package Ada.Interrupts.Names is\n+\n+   --  Beware that the mapping of names to signals may be\n+   --  many-to-one.  There may be aliases.  Also, for all\n+   --  signal names that are not supported on the current system\n+   --  the value of the corresponding constant will be zero.\n+\n+   SIGHUP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGHUP;      --  hangup\n+\n+   SIGINT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+\n+   SIGQUIT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n+\n+   SIGILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+\n+   SIGABRT : constant Interrupt_ID := --  used by abort,\n+     System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n+\n+   SIGFPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFPE;      --  floating point exception\n+\n+   SIGKILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n+\n+   SIGSEGV : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+\n+   SIGPIPE : constant Interrupt_ID := --  write on a pipe with\n+     System.OS_Interface.SIGPIPE;     --  no one to read it\n+\n+   SIGALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGALRM;     --  alarm clock\n+\n+   SIGTERM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+\n+   SIGUSR1 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR1;     --  user defined signal 1\n+\n+   SIGUSR2 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR2;     --  user defined signal 2\n+\n+end Ada.Interrupts.Names;"}, {"sha": "4e0ca4f0d2b0026c9355eacdd604a4a7f6bcdd51", "filename": "gcc/ada/4gintnam.ads", "status": "added", "additions": 199, "deletions": 0, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4gintnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4gintnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4gintnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,199 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                 GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS              --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.5 $                             --\n+--                                                                          --\n+--             Copyright (C) 1997-2001, Florida State University            --\n+--                                                                          --\n+-- GNARL is free software; you can redistribute it  and/or modify it  under --\n+-- terms  of  the  GNU  Library General Public License  as published by the --\n+-- Free Software  Foundation;  either version 2, or (at  your  option)  any --\n+-- later  version.  GNARL is distributed  in the hope that  it will be use- --\n+-- ful, but  WITHOUT ANY WARRANTY;   without even the  implied  warranty of --\n+-- MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Gen- --\n+-- eral Library Public License  for more details.  You should have received --\n+-- a  copy of the GNU Library General Public License along with GNARL;  see --\n+-- file COPYING.LIB.  If not,  write to the  Free Software Foundation,  675 --\n+-- Mass Ave, Cambridge, MA 02139, USA.                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the Irix version of this package\n+--\n+--  The following signals are reserved by the run time (Athread library):\n+--\n+--  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGTRAP, SIGSTOP, SIGKILL\n+--\n+--  The following signals are reserved by the run time (Pthread library):\n+--\n+--  SIGTSTP, SIGILL, SIGTRAP, SIGEMT, SIGFPE, SIGBUS, SIGSTOP, SIGKILL,\n+--  SIGSEGV, SIGSYS, SIGXCPU, SIGXFSZ, SIGPROF, SIGPTINTR, SIGPTRESCHED,\n+--  SIGABRT, SIGINT\n+--\n+--  The pragma Unreserve_All_Interrupts affects the following signal\n+--  (Pthread library):\n+--\n+--  SIGINT: made available for Ada handler\n+--  SIGILL, SIGBUS, SIGSEGV: disconnected from runtime exception mapping\n+\n+--  This target-dependent package spec contains names of interrupts\n+--  supported by the local system.\n+\n+with System.OS_Interface;\n+--  used for names of interrupts\n+\n+package Ada.Interrupts.Names is\n+\n+   --  Beware that the mapping of names to signals may be\n+   --  many-to-one.  There may be aliases.  Also, for all\n+   --  signal names that are not supported on the current system\n+   --  the value of the corresponding constant will be zero.\n+\n+   SIGHUP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGHUP;      --  hangup\n+\n+   SIGINT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+\n+   SIGQUIT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n+\n+   SIGILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+\n+   SIGTRAP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTRAP;     --  trace trap (not reset)\n+\n+   SIGIOT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGIOT;      --  IOT instruction\n+\n+   SIGABRT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGABRT;     --  used by abort, replace SIGIOT in the\n+   --                                     future\n+\n+   SIGEMT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGEMT;      --  EMT instruction\n+\n+   SIGFPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFPE;      --  floating point exception\n+\n+   SIGKILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n+\n+   SIGBUS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGBUS;      --  bus error\n+\n+   SIGSEGV : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+\n+   SIGSYS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSYS;      --  bad argument to system call\n+\n+   SIGPIPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPIPE;     --  write on pipe with no one to read it\n+\n+   SIGALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGALRM;     --  alarm clock\n+\n+   SIGTERM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+\n+   SIGUSR1 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR1;     --  user defined signal 1\n+\n+   SIGUSR2 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR2;     --  user defined signal 2\n+\n+   SIGCLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCLD;      --  alias for SIGCHLD\n+\n+   SIGCHLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCHLD;     --  child status change\n+\n+   SIGPWR : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPWR;      --  power-fail restart\n+\n+   SIGWINCH : constant Interrupt_ID :=\n+     System.OS_Interface.SIGWINCH;    --  window size change\n+\n+   SIGURG : constant Interrupt_ID :=\n+     System.OS_Interface.SIGURG;      --  urgent condition on IO channel\n+\n+   SIGPOLL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPOLL;     --  pollable event occurred\n+\n+   SIGIO : constant Interrupt_ID :=\n+     System.OS_Interface.SIGIO;       --  I/O possible (Solaris SIGPOLL alias)\n+\n+   SIGSTOP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSTOP;     --  stop (cannot be caught or ignored)\n+\n+   SIGTSTP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTSTP;     --  user stop requested from tty\n+\n+   SIGCONT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCONT;     --  stopped process has been continued\n+\n+   SIGTTIN : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTIN;     --  background tty read attempted\n+\n+   SIGTTOU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTOU;     --  background tty write attempted\n+\n+   SIGVTALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGVTALRM;   --  virtual timer expired\n+\n+   SIGPROF : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPROF;     --  profiling timer expired\n+\n+   SIGXCPU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXCPU;     --  CPU time limit exceeded\n+\n+   SIGXFSZ : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXFSZ;     --  filesize limit exceeded\n+\n+   SIGK32 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGK32;      --  reserved for kernel (IRIX)\n+\n+   SIGCKPT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCKPT;     --  Checkpoint warning\n+\n+   SIGRESTART : constant Interrupt_ID :=\n+     System.OS_Interface.SIGRESTART;  --  Restart warning\n+\n+   SIGUME : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUME;      --  Uncorrectable memory error\n+\n+   --  Signals defined for Posix 1003.1c.\n+\n+   SIGPTINTR : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPTINTR;    --  Pthread Interrupt Signal\n+\n+   SIGPTRESCHED : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPTRESCHED; --  Pthread Rescheduling Signal\n+\n+   --  Posix 1003.1b signals\n+\n+   SIGRTMIN : constant Interrupt_ID :=\n+     System.OS_Interface.SIGRTMIN;    --  Posix 1003.1b signals\n+\n+   SIGRTMAX : constant Interrupt_ID :=\n+     System.OS_Interface.SIGRTMAX;    --  Posix 1003.1b signals\n+\n+end Ada.Interrupts.Names;"}, {"sha": "54b90618f906824077734b6e4603a64d36235309", "filename": "gcc/ada/4hexcpol.adb", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4hexcpol.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4hexcpol.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4hexcpol.adb?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,69 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . E X C E P T I O N S . P O L L                  --\n+--       (version supporting asynchronous abort test and time slicing)      --\n+--                                                                          --\n+--                                  B o d y                                 --\n+--                                                                          --\n+--                             $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-2000, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This version is for targets that do not support per-thread asynchronous\n+--  signals or that do not handle async timers properly. On such targets, we\n+--  require compilation with the -gnatP switch that activates periodic polling.\n+--  Then in the body of the polling routine we test for asynchronous abort and\n+--  yield periodically.\n+\n+--  HP-UX and SCO currently use this file\n+\n+with System.Soft_Links;\n+--  used for Check_Abort_Status\n+\n+separate (Ada.Exceptions)\n+\n+----------\n+-- Poll --\n+----------\n+\n+procedure Poll is\n+begin\n+   if Counter = 10000 then\n+      Counter := 0;\n+      delay 0.0;\n+   else\n+      Counter := Counter + 1;\n+   end if;\n+\n+   --  Test for asynchronous abort on each poll\n+\n+   if System.Soft_Links.Check_Abort_Status.all /= 0 then\n+      raise Standard'Abort_Signal;\n+   end if;\n+end Poll;"}, {"sha": "f224b9d6031406db7979c8f10306f863780a472d", "filename": "gcc/ada/4hintnam.ads", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4hintnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4hintnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4hintnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,158 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.5 $                             --\n+--                                                                          --\n+--             Copyright (C) 1991-2001, Florida State University            --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is a HP-UX version of this package.\n+--\n+--  The following signals are reserved by the run time:\n+--\n+--  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGTRAP, SIGTERM, SIGABRT, SIGINT,\n+--  SIGALRM, SIGSTOP, SIGKILL\n+--\n+--  The pragma Unreserve_All_Interrupts affects the following signal(s):\n+--\n+--  SIGINT: made available for Ada handler\n+--  SIGILL, SIGBUS, SIGSEGV: disconnected from runtime exception mapping\n+\n+--  This target-dependent package spec contains names of interrupts\n+--  supported by the local system.\n+\n+with System.OS_Interface;\n+--  used for names of interrupts\n+\n+package Ada.Interrupts.Names is\n+\n+   --  Beware that the mapping of names to signals may be\n+   --  many-to-one.  There may be aliases.  Also, for all\n+   --  signal names that are not supported on the current system\n+   --  the value of the corresponding constant will be zero.\n+\n+   SIGHUP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGHUP;      --  hangup\n+\n+   SIGINT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+\n+   SIGQUIT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n+\n+   SIGILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+\n+   SIGTRAP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTRAP;     --  trace trap (not reset)\n+\n+   SIGIOT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGIOT;      --  IOT instruction\n+\n+   SIGABRT : constant Interrupt_ID := --  used by abort,\n+     System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n+\n+   SIGEMT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGEMT;      --  EMT instruction\n+\n+   SIGFPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFPE;      --  floating point exception\n+\n+   SIGKILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n+\n+   SIGBUS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGBUS;      --  bus error\n+\n+   SIGSEGV : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+\n+   SIGSYS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSYS;      --  bad argument to system call\n+\n+   SIGPIPE : constant Interrupt_ID := --  write on a pipe with\n+     System.OS_Interface.SIGPIPE;     --  no one to read it\n+\n+   SIGALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGALRM;     --  alarm clock\n+\n+   SIGTERM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+\n+   SIGUSR1 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR1;     --  user defined signal 1\n+\n+   SIGUSR2 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR2;     --  user defined signal 2\n+\n+   SIGCLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCLD;      --  child status change\n+\n+   SIGCHLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCHLD;     --  4.3BSD's/POSIX name for SIGCLD\n+\n+   SIGWINCH : constant Interrupt_ID :=\n+     System.OS_Interface.SIGWINCH;    --  window size change\n+\n+   SIGURG : constant Interrupt_ID :=\n+     System.OS_Interface.SIGURG;      --  urgent condition on IO channel\n+\n+   SIGPOLL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPOLL;     --  pollable event occurred\n+\n+   SIGIO : constant Interrupt_ID :=   --  input/output possible,\n+     System.OS_Interface.SIGIO;       --  SIGPOLL alias\n+\n+   SIGSTOP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSTOP;     --  stop (cannot be caught or ignored)\n+\n+   SIGTSTP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTSTP;     --  user stop requested from tty\n+\n+   SIGCONT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCONT;     --  stopped process has been continued\n+\n+   SIGTTIN : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTIN;     --  background tty read attempted\n+\n+   SIGTTOU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTOU;     --  background tty write attempted\n+\n+   SIGVTALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGVTALRM;   --  virtual timer expired\n+\n+   SIGPROF : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPROF;     --  profiling timer expired\n+\n+   SIGPWR : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPWR;      --  power-fail restart\n+\n+end Ada.Interrupts.Names;"}, {"sha": "997cfa3048cec199c13d11007b38c30a34497312", "filename": "gcc/ada/4lintnam.ads", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4lintnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4lintnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4lintnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,172 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.5 $                             --\n+--                                                                          --\n+--           Copyright (C) 1991-2001 Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is a Linux version of this package.\n+--\n+--  The following signals are reserved by the run time (FSU threads):\n+--\n+--  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGTRAP, SIGABRT, SIGINT,\n+--  SIGALRM, SIGVTALRM, SIGUNUSED, SIGSTOP, SIGKILL\n+--\n+--  The following signals are reserved by the run time (LinuxThreads):\n+--\n+--  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGTRAP, SIGABRT, SIGINT,\n+--  SIGUSR1, SIGUSR2, SIGVTALRM, SIGUNUSED, SIGSTOP, SIGKILL\n+--\n+--  The pragma Unreserve_All_Interrupts affects the following signal(s):\n+--\n+--  SIGINT: made available for Ada handler\n+--  SIGILL, SIGBUS, SIGSEGV: disconnected from runtime exception mapping\n+\n+--  This target-dependent package spec contains names of interrupts\n+--  supported by the local system.\n+\n+with System.OS_Interface;\n+--  used for names of interrupts\n+\n+package Ada.Interrupts.Names is\n+\n+   --  Beware that the mapping of names to signals may be\n+   --  many-to-one.  There may be aliases.  Also, for all\n+   --  signal names that are not supported on the current system\n+   --  the value of the corresponding constant will be zero.\n+\n+   SIGHUP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGHUP;      --  hangup\n+\n+   SIGINT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+\n+   SIGQUIT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n+\n+   SIGILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+\n+   SIGTRAP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTRAP;     --  trace trap (not reset)\n+\n+   SIGIOT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGIOT;      --  IOT instruction\n+\n+   SIGABRT : constant Interrupt_ID := --  used by abort,\n+     System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n+\n+   SIGFPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFPE;      --  floating point exception\n+\n+   SIGKILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n+\n+   SIGBUS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGBUS;      --  bus error\n+\n+   SIGSEGV : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+\n+   SIGPIPE : constant Interrupt_ID := --  write on a pipe with\n+     System.OS_Interface.SIGPIPE;     --  no one to read it\n+\n+   SIGALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGALRM;     --  alarm clock\n+\n+   SIGTERM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+\n+   SIGUSR1 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR1;     --  user defined signal 1\n+\n+   SIGUSR2 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR2;     --  user defined signal 2\n+\n+   SIGCLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCLD;      --  child status change\n+\n+   SIGCHLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCHLD;     --  4.3BSD's/POSIX name for SIGCLD\n+\n+   SIGWINCH : constant Interrupt_ID :=\n+     System.OS_Interface.SIGWINCH;    --  window size change\n+\n+   SIGURG : constant Interrupt_ID :=\n+     System.OS_Interface.SIGURG;      --  urgent condition on IO channel\n+\n+   SIGPOLL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPOLL;     --  pollable event occurred\n+\n+   SIGIO : constant Interrupt_ID :=   --  input/output possible,\n+     System.OS_Interface.SIGIO;       --  SIGPOLL alias (Solaris)\n+\n+   SIGSTOP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSTOP;     --  stop (cannot be caught or ignored)\n+\n+   SIGTSTP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTSTP;     --  user stop requested from tty\n+\n+   SIGCONT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCONT;     --  stopped process has been continued\n+\n+   SIGTTIN : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTIN;     --  background tty read attempted\n+\n+   SIGTTOU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTOU;     --  background tty write attempted\n+\n+   SIGVTALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGVTALRM;   --  virtual timer expired\n+\n+   SIGPROF : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPROF;     --  profiling timer expired\n+\n+   SIGXCPU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXCPU;     --  CPU time limit exceeded\n+\n+   SIGXFSZ : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXFSZ;     --  filesize limit exceeded\n+\n+   SIGUNUSED : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUNUSED;     --  unused signal\n+\n+   SIGSTKFLT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSTKFLT;     --  stack fault on coprocessor\n+\n+   SIGLOST : constant Interrupt_ID :=\n+     System.OS_Interface.SIGLOST;       --  Linux alias for SIGIO\n+\n+   SIGPWR : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPWR;        --  Power failure\n+\n+end Ada.Interrupts.Names;"}, {"sha": "5ecb26e7da2d5d697f83a848d22160a9ecd10e6c", "filename": "gcc/ada/4mintnam.ads", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4mintnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4mintnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4mintnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,149 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.4 $                             --\n+--                                                                          --\n+--          Copyright (C) 1996-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is a Machten version of this package.\n+--\n+--  The following signals are reserved by the run time:\n+--\n+--  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGTRAP, SIGABRT, SIGINT,\n+--  SIGALRM, SIGEMT, SIGCHLD, SIGSTOP, SIGKILL\n+--\n+--  The pragma Unreserve_All_Interrupts affects the following signal(s):\n+--\n+--  SIGINT: made available for Ada handlers\n+--  SIGILL, SIGBUS, SIGSEGV: disconnected from runtime exception mapping\n+\n+--  This target-dependent package spec contains names of interrupts\n+--  supported by the local system.\n+\n+with System.OS_Interface;\n+--  used for names of interrupts\n+\n+package Ada.Interrupts.Names is\n+\n+   --  Beware that the mapping of names to signals may be\n+   --  many-to-one.  There may be aliases.  Also, for all\n+   --  signal names that are not supported on the current system\n+   --  the value of the corresponding constant will be zero.\n+\n+   SIGHUP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGHUP;      --  hangup\n+\n+   SIGINT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+\n+   SIGQUIT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n+\n+   SIGILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+\n+   SIGTRAP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTRAP;     --  trace trap (not reset)\n+\n+   SIGABRT : constant Interrupt_ID := --  used by abort,\n+     System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n+\n+   SIGIOT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGIOT;      --  IOT instruction\n+\n+   SIGBUS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGBUS;      --  bus error\n+\n+   SIGFPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFPE;      --  floating point exception\n+\n+   SIGKILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n+\n+   SIGUSR1 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR1;     --  user defined signal 1\n+\n+   SIGSEGV : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+\n+   SIGUSR2 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR2;     --  user defined signal 2\n+\n+   SIGPIPE : constant Interrupt_ID := --  write on a pipe with\n+     System.OS_Interface.SIGPIPE;     --  no one to read it\n+\n+   SIGALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGALRM;     --  alarm clock\n+\n+   SIGTERM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+\n+   SIGCHLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCHLD;     --  4.3BSD's/POSIX name for SIGCLD\n+\n+   SIGCONT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCONT;     --  stopped process has been continued\n+\n+   SIGSTOP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSTOP;     --  stop (cannot be caught or ignored)\n+\n+   SIGTSTP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTSTP;     --  user stop requested from tty\n+\n+   SIGTTIN : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTIN;     --  background tty read attempted\n+\n+   SIGTTOU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTOU;     --  background tty write attempted\n+\n+   SIGURG : constant Interrupt_ID :=\n+     System.OS_Interface.SIGURG;      --  urgent condition on IO channel\n+\n+   SIGXCPU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXCPU;     --  CPU time limit exceeded\n+\n+   SIGXFSZ : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXFSZ;     --  filesize limit exceeded\n+\n+   SIGVTALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGVTALRM;   --  virtual timer expired\n+\n+   SIGPROF : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPROF;     --  profiling timer expired\n+\n+   SIGWINCH : constant Interrupt_ID :=\n+     System.OS_Interface.SIGWINCH;    --  window size change\n+\n+   SIGIO : constant Interrupt_ID :=   --  input/output possible,\n+     System.OS_Interface.SIGIO;\n+\n+end Ada.Interrupts.Names;"}, {"sha": "f494bdef09c0eb27cdb9a6b382676e5c7fe796c2", "filename": "gcc/ada/4nintnam.ads", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4nintnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4nintnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4nintnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,51 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                 GNU ADA RUNTIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                           (No Tasking Version)                           --\n+--                                                                          --\n+--                             $Revision: 1.2 $                             --\n+--                                                                          --\n+--    Copyright (C) 1991,92,93,94,95,1996 Free Software Foundation, Inc.    --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  The standard implementation of this spec contains only dummy interrupt\n+--  names. These dummy entries permit checking out code for correctness of\n+--  semantics, even if interrupts are not supported.\n+\n+--  For specific implementations that fully support interrupts, this package\n+--  spec is replaced by an implementation dependent version that defines the\n+--  interrupts available on the system.\n+\n+package Ada.Interrupts.Names is\n+\n+   DUMMY_INTERRUPT_1 : constant Interrupt_ID := 1;\n+   DUMMY_INTERRUPT_2 : constant Interrupt_ID := 2;\n+\n+end Ada.Interrupts.Names;"}, {"sha": "6638395d0e75f64bce9de32f761876eaa0dd697e", "filename": "gcc/ada/4ointnam.ads", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4ointnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4ointnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4ointnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,45 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                 GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS              --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.4 $                             --\n+--                                                                          --\n+--            Copyright (C) 1991-1997 Florida State University              --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is an OS/2 version of this package.\n+\n+--  This target-dependent package spec contains names of interrupts\n+--  supported by the local system.\n+\n+--  This is a stub, for systems that do not support interrupts (or signals)\n+\n+package Ada.Interrupts.Names is\n+end Ada.Interrupts.Names;"}, {"sha": "30921968674df78493f22fec3868f8fac6f8a689", "filename": "gcc/ada/4onumaux.ads", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4onumaux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4onumaux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4onumaux.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,94 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                     A D A . N U M E R I C S . A U X                      --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                       (C Library Version for x86)                        --\n+--                                                                          --\n+--                            $Revision: 1.11 $                             --\n+--                                                                          --\n+--          Copyright (C) 1992-1998 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides the basic computational interface for the generic\n+--  elementary functions. The C library version interfaces with the routines\n+--  in the C mathematical library, and is thus quite portable, although it may\n+--  not necessarily meet the requirements for accuracy in the numerics annex.\n+--  One advantage of using this package is that it will interface directly to\n+--  hardware instructions, such as the those provided on the Intel x86.\n+\n+--  Note: there are two versions of this package. One using the 80-bit x86\n+--  long double format (which is this version), and one using 64-bit IEEE\n+--  double (see file a-numaux.ads).\n+\n+package Ada.Numerics.Aux is\n+pragma Pure (Aux);\n+\n+   pragma Linker_Options (\"-lm\");\n+\n+   type Double is digits 18;\n+\n+   function Sin (X : Double) return Double;\n+   pragma Import (C, Sin, \"sinl\");\n+\n+   function Cos (X : Double) return Double;\n+   pragma Import (C, Cos, \"cosl\");\n+\n+   function Tan (X : Double) return Double;\n+   pragma Import (C, Tan, \"tanl\");\n+\n+   function Exp (X : Double) return Double;\n+   pragma Import (C, Exp, \"expl\");\n+\n+   function Sqrt (X : Double) return Double;\n+   pragma Import (C, Sqrt, \"sqrtl\");\n+\n+   function Log (X : Double) return Double;\n+   pragma Import (C, Log, \"logl\");\n+\n+   function Acos (X : Double) return Double;\n+   pragma Import (C, Acos, \"acosl\");\n+\n+   function Asin (X : Double) return Double;\n+   pragma Import (C, Asin, \"asinl\");\n+\n+   function Atan (X : Double) return Double;\n+   pragma Import (C, Atan, \"atanl\");\n+\n+   function Sinh (X : Double) return Double;\n+   pragma Import (C, Sinh, \"sinhl\");\n+\n+   function Cosh (X : Double) return Double;\n+   pragma Import (C, Cosh, \"coshl\");\n+\n+   function Tanh (X : Double) return Double;\n+   pragma Import (C, Tanh, \"tanhl\");\n+\n+   function Pow (X, Y : Double) return Double;\n+   pragma Import (C, Pow, \"powl\");\n+\n+end Ada.Numerics.Aux;"}, {"sha": "f640d49978c0f34ae39ed0c0b9a3803a3497016f", "filename": "gcc/ada/4pintnam.ads", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4pintnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4pintnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4pintnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,158 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.4 $                             --\n+--                                                                          --\n+--           Copyright (C) 1991-2001 Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is a OpenNT (FSU THREAD) version of this package.\n+--\n+--  The following signals are reserved by the run time:\n+--\n+--  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGTRAP, SIGABRT, SIGINT,\n+--  SIGALRM, SIGVTALRM, SIGSTOP, SIGKILL\n+--\n+--  The pragma Unreserve_All_Interrupts affects the following signal(s):\n+--\n+--  SIGINT: made available for Ada handlers\n+--  SIGILL, SIGBUS, SIGSEGV: disconnected from runtime exception mapping\n+\n+--  This target-dependent package spec contains names of interrupts\n+--  supported by the local system.\n+\n+with System.OS_Interface;\n+--  used for names of interrupts\n+\n+package Ada.Interrupts.Names is\n+\n+   --  Beware that the mapping of names to signals may be\n+   --  many-to-one.  There may be aliases.  Also, for all\n+   --  signal names that are not supported on the current system\n+   --  the value of the corresponding constant will be zero.\n+\n+   SIGHUP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGHUP;      --  hangup\n+\n+   SIGINT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+\n+   SIGQUIT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n+\n+   SIGILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+\n+   SIGTRAP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTRAP;     --  trace trap (not reset)\n+\n+   SIGIOT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGIOT;      --  IOT instruction\n+\n+   SIGABRT : constant Interrupt_ID := --  used by abort,\n+     System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n+\n+   SIGFPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFPE;      --  floating point exception\n+\n+   SIGKILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n+\n+   SIGBUS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGBUS;      --  bus error\n+\n+   SIGSEGV : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+\n+   SIGSYS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSYS;      --  bad argument to system call\n+\n+   SIGPIPE : constant Interrupt_ID := --  write on a pipe with\n+     System.OS_Interface.SIGPIPE;     --  no one to read it\n+\n+   SIGALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGALRM;     --  alarm clock\n+\n+   SIGTERM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+\n+   SIGUSR1 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR1;     --  user defined signal 1\n+\n+   SIGUSR2 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR2;     --  user defined signal 2\n+\n+   SIGCLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCLD;      --  child status change\n+\n+   SIGCHLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCHLD;     --  4.3BSD's/POSIX name for SIGCLD\n+\n+   SIGWINCH : constant Interrupt_ID :=\n+     System.OS_Interface.SIGWINCH;    --  window size change\n+\n+   SIGURG : constant Interrupt_ID :=\n+     System.OS_Interface.SIGURG;      --  urgent condition on IO channel\n+\n+   SIGPOLL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPOLL;     --  pollable event occurred\n+\n+   SIGIO : constant Interrupt_ID :=   --  input/output possible,\n+     System.OS_Interface.SIGIO;       --  SIGPOLL alias (Solaris)\n+\n+   SIGSTOP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSTOP;     --  stop (cannot be caught or ignored)\n+\n+   SIGTSTP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTSTP;     --  user stop requested from tty\n+\n+   SIGCONT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCONT;     --  stopped process has been continued\n+\n+   SIGTTIN : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTIN;     --  background tty read attempted\n+\n+   SIGTTOU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTOU;     --  background tty write attempted\n+\n+   SIGVTALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGVTALRM;   --  virtual timer expired\n+\n+   SIGPROF : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPROF;     --  profiling timer expired\n+\n+   SIGXCPU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXCPU;     --  CPU time limit exceeded\n+\n+   SIGXFSZ : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXFSZ;     --  filesize limit exceeded\n+\n+end Ada.Interrupts.Names;"}, {"sha": "53173a28dbc912b02bedf13abf4996f306a38295", "filename": "gcc/ada/4rintnam.ads", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4rintnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4rintnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4rintnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,120 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.5 $                             --\n+--                                                                          --\n+--             Copyright (C) 1991-2001 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+-- The GNARL files that were developed for RTEMS are maintained by  On-Line --\n+-- Applications Research Corporation (http://www.oarcorp.com)  in  coopera- --\n+-- tion with Ada Core Technologies Inc. and Florida State University.       --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is a RTEMS version of this package\n+--\n+--  The following signals are reserved by the run time:\n+--\n+--  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGTRAP, SIGABRT, SIGINT,\n+--  SIGALRM, SIGEMT, SIGKILL\n+--\n+--  The pragma Unreserve_All_Interrupts affects the following signal(s):\n+--\n+--  SIGINT: made available for Ada handlers\n+--  SIGILL, SIGBUS, SIGSEGV: disconnected from runtime exception mapping\n+\n+--  This target-dependent package spec contains names of interrupts\n+--  supported by the local system.\n+\n+with System.OS_Interface;\n+--  used for names of interrupts\n+\n+package Ada.Interrupts.Names is\n+\n+   --  Beware that the mapping of names to signals may be\n+   --  many-to-one.  There may be aliases.  Also, for all\n+   --  signal names that are not supported on the current system\n+   --  the value of the corresponding constant will be zero.\n+\n+   SIGHUP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGHUP;      --  hangup\n+\n+   SIGINT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+\n+   SIGQUIT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n+\n+   SIGILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+\n+   SIGTRAP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTRAP;     --  trace trap (not reset)\n+\n+   SIGIOT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGIOT;      --  IOT instruction\n+\n+   SIGABRT : constant Interrupt_ID := --  used by abort,\n+     System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n+\n+   SIGEMT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGEMT;      --  EMT instruction\n+\n+   SIGFPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFPE;      --  floating point exception\n+\n+   SIGKILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n+\n+   SIGBUS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGBUS;      --  bus error\n+\n+   SIGSEGV : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+\n+   SIGSYS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSYS;      --  bad argument to system call\n+\n+   SIGPIPE : constant Interrupt_ID := --  write on a pipe with\n+     System.OS_Interface.SIGPIPE;     --  no one to read it\n+\n+   SIGALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGALRM;     --  alarm clock\n+\n+   SIGTERM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+\n+   SIGUSR1 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR1;     --  user defined signal 1\n+\n+   SIGUSR2 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR2;     --  user defined signal 2\n+\n+end Ada.Interrupts.Names;"}, {"sha": "b66aa038947b4ccdf4db945b805e0ca9556ae9b4", "filename": "gcc/ada/4sintnam.ads", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4sintnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4sintnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4sintnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,183 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.7 $                             --\n+--                                                                          --\n+--             Copyright (C) 1991-2001 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is a Solaris version of this package.\n+--\n+--  The following signals are reserved by the run time (native threads):\n+--\n+--  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGTRAP, SIGABRT, SIGINT,\n+--  SIGLWP, SIGWAITING, SIGCANCEL, SIGSTOP, SIGKILL\n+--\n+--  The following signals are reserved by the run time (FSU threads):\n+--\n+--  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGTRAP, SIGTERM, SIGABRT, SIGINT,\n+--  SIGLWP, SIGALRM, SIGVTALRM, SIGAITING, SIGSTOP, SIGKILL\n+--\n+--  The pragma Unreserve_All_Interrupts affects the following signal(s):\n+--\n+--  SIGINT: made available for Ada handlers\n+--  SIGILL, SIGBUS, SIGSEGV: disconnected from runtime exception mapping\n+\n+with System.OS_Interface;\n+--  used for names of interrupts\n+\n+package Ada.Interrupts.Names is\n+\n+   --  Beware that the mapping of names to signals may be\n+   --  many-to-one.  There may be aliases.  Also, for all\n+   --  signal names that are not supported on the current system\n+   --  the value of the corresponding constant will be zero.\n+\n+   SIGHUP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGHUP;      --  hangup\n+\n+   SIGINT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+\n+   SIGQUIT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n+\n+   SIGILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+\n+   SIGTRAP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTRAP;     --  trace trap (not reset)\n+\n+   SIGIOT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGIOT;      --  IOT instruction\n+\n+   SIGABRT : constant Interrupt_ID := --  used by abort,\n+     System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n+\n+   SIGEMT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGEMT;      --  EMT instruction\n+\n+   SIGFPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFPE;      --  floating point exception\n+\n+   SIGKILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n+\n+   SIGBUS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGBUS;      --  bus error\n+\n+   SIGSEGV : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+\n+   SIGSYS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSYS;      --  bad argument to system call\n+\n+   SIGPIPE : constant Interrupt_ID := --  write on a pipe with\n+     System.OS_Interface.SIGPIPE;     --  no one to read it\n+\n+   SIGALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGALRM;     --  alarm clock\n+\n+   SIGTERM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+\n+   SIGUSR1 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR1;     --  user defined signal 1\n+\n+   SIGUSR2 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR2;     --  user defined signal 2\n+\n+   SIGCLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCLD;      --  child status change\n+\n+   SIGCHLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCHLD;     --  4.3BSD's/POSIX name for SIGCLD\n+\n+   SIGWINCH : constant Interrupt_ID :=\n+     System.OS_Interface.SIGWINCH;    --  window size change\n+\n+   SIGURG : constant Interrupt_ID :=\n+     System.OS_Interface.SIGURG;      --  urgent condition on IO channel\n+\n+   SIGPOLL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPOLL;     --  pollable event occurred\n+\n+   SIGIO : constant Interrupt_ID :=   --  input/output possible,\n+     System.OS_Interface.SIGIO;       --  SIGPOLL alias (Solaris)\n+\n+   SIGSTOP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSTOP;     --  stop (cannot be caught or ignored)\n+\n+   SIGTSTP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTSTP;     --  user stop requested from tty\n+\n+   SIGCONT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCONT;     --  stopped process has been continued\n+\n+   SIGTTIN : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTIN;     --  background tty read attempted\n+\n+   SIGTTOU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTOU;     --  background tty write attempted\n+\n+   SIGVTALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGVTALRM;   --  virtual timer expired\n+\n+   SIGPROF : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPROF;     --  profiling timer expired\n+\n+   SIGXCPU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXCPU;     --  CPU time limit exceeded\n+\n+   SIGXFSZ : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXFSZ;     --  filesize limit exceeded\n+\n+   SIGPWR : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPWR;      --  power-fail restart\n+\n+   SIGWAITING : constant Interrupt_ID :=\n+     System.OS_Interface.SIGWAITING;  --  process's lwps blocked (Solaris)\n+\n+   SIGLWP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGLWP;      --  used by thread library (Solaris)\n+\n+   SIGFREEZE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFREEZE;   --  used by CPR (Solaris)\n+\n+--  what is CPR????\n+\n+   SIGTHAW : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTHAW;     --  used by CPR (Solaris)\n+\n+   SIGCANCEL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCANCEL;     --  used for thread cancel (Solaris)\n+\n+end Ada.Interrupts.Names;"}, {"sha": "80d354c896c9015e3389e9d0891384333a034567", "filename": "gcc/ada/4uintnam.ads", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4uintnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4uintnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4uintnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,158 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.7 $                             --\n+--                                                                          --\n+--             Copyright (C) 1991-2001 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is a Sun OS (FSU THREADS) version of this package.\n+--\n+--  The following signals are reserved by the run time:\n+--\n+--  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGTRAP, SIGABRT, SIGINT,\n+--  SIGALRM, SIGEMT, SIGCHLD, SIGSTOP, SIGKILL\n+--\n+--  The pragma Unreserve_All_Interrupts affects the following signal(s):\n+--\n+--  SIGINT: made available for Ada handlers\n+--  SIGILL, SIGBUS, SIGSEGV: disconnected from runtime exception mapping\n+\n+with System.OS_Interface;\n+--  used for names of interrupts\n+\n+package Ada.Interrupts.Names is\n+\n+   --  Beware that the mapping of names to signals may be\n+   --  many-to-one.  There may be aliases.  Also, for all\n+   --  signal names that are not supported on the current system\n+   --  the value of the corresponding constant will be zero.\n+\n+   SIGHUP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGHUP;      --  hangup\n+\n+   SIGINT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+\n+   SIGQUIT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n+\n+   SIGILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+\n+   SIGTRAP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTRAP;     --  trace trap (not reset)\n+\n+   SIGIOT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGIOT;      --  IOT instruction\n+\n+   SIGABRT : constant Interrupt_ID := --  used by abort,\n+     System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n+\n+   SIGEMT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGEMT;      --  EMT instruction\n+\n+   SIGFPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFPE;      --  floating point exception\n+\n+   SIGKILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n+\n+   SIGBUS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGBUS;      --  bus error\n+\n+   SIGSEGV : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+\n+   SIGSYS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSYS;      --  bad argument to system call\n+\n+   SIGPIPE : constant Interrupt_ID := --  write on a pipe with\n+     System.OS_Interface.SIGPIPE;     --  no one to read it\n+\n+   SIGALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGALRM;     --  alarm clock\n+\n+   SIGTERM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+\n+   SIGUSR1 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR1;     --  user defined signal 1\n+\n+   SIGUSR2 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR2;     --  user defined signal 2\n+\n+   SIGCLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCLD;      --  child status change\n+\n+   SIGCHLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCHLD;     --  4.3BSD's/POSIX name for SIGCLD\n+\n+   SIGWINCH : constant Interrupt_ID :=\n+     System.OS_Interface.SIGWINCH;    --  window size change\n+\n+   SIGURG : constant Interrupt_ID :=\n+     System.OS_Interface.SIGURG;      --  urgent condition on IO channel\n+\n+   SIGPOLL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPOLL;     --  pollable event occurred\n+\n+   SIGIO : constant Interrupt_ID :=   --  input/output possible,\n+     System.OS_Interface.SIGIO;       --  SIGPOLL alias (Solaris)\n+\n+   SIGSTOP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSTOP;     --  stop (cannot be caught or ignored)\n+\n+   SIGTSTP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTSTP;     --  user stop requested from tty\n+\n+   SIGCONT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCONT;     --  stopped process has been continued\n+\n+   SIGTTIN : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTIN;     --  background tty read attempted\n+\n+   SIGTTOU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTOU;     --  background tty write attempted\n+\n+   SIGVTALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGVTALRM;   --  virtual timer expired\n+\n+   SIGPROF : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPROF;     --  profiling timer expired\n+\n+   SIGXCPU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXCPU;     --  CPU time limit exceeded\n+\n+   SIGXFSZ : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXFSZ;     --  filesize limit exceeded\n+\n+end Ada.Interrupts.Names;"}, {"sha": "ac3bd2d55b7e845ae0f62f5b9294e25c53298552", "filename": "gcc/ada/4vcaldel.adb", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4vcaldel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4vcaldel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4vcaldel.adb?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,101 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . C A L E N D A R . D E L A Y S                  --\n+--                                                                          --\n+--                                  B o d y                                 --\n+--                                                                          --\n+--                             $Revision: 1.18 $\n+--                                                                          --\n+--             Copyright (C) 1991-2000 Florida State University             --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the Alpha/VMS version.\n+\n+with System.OS_Primitives;\n+--  Used for Max_Sensible_Delay\n+\n+with System.Soft_Links;\n+--  Used for Timed_Delay\n+\n+package body Ada.Calendar.Delays is\n+\n+   package OSP renames System.OS_Primitives;\n+   package TSL renames System.Soft_Links;\n+\n+   use type TSL.Timed_Delay_Call;\n+\n+   ---------------\n+   -- Delay_For --\n+   ---------------\n+\n+   procedure Delay_For (D : Duration) is\n+   begin\n+      TSL.Timed_Delay.all\n+        (Duration'Min (D, OSP.Max_Sensible_Delay), OSP.Relative);\n+   end Delay_For;\n+\n+   -----------------\n+   -- Delay_Until --\n+   -----------------\n+\n+   procedure Delay_Until (T : Time) is\n+   begin\n+      TSL.Timed_Delay.all (To_Duration (T), OSP.Absolute_Calendar);\n+   end Delay_Until;\n+\n+   -----------------\n+   -- To_Duration --\n+   -----------------\n+\n+   function To_Duration (T : Time) return Duration is\n+   begin\n+      return OSP.To_Duration (OSP.OS_Time (T), OSP.Absolute_Calendar);\n+   end To_Duration;\n+\n+   --------------------\n+   -- Timed_Delay_NT --\n+   --------------------\n+\n+   procedure Timed_Delay_NT (Time : Duration; Mode : Integer);\n+\n+   procedure Timed_Delay_NT (Time : Duration; Mode : Integer) is\n+   begin\n+      OSP.Timed_Delay (Time, Mode);\n+   end Timed_Delay_NT;\n+\n+begin\n+   --  Set up the Timed_Delay soft link to the non tasking version if it has\n+   --  not been already set.\n+   --  If tasking is present, Timed_Delay has already set this soft link, or\n+   --  this will be overriden during the elaboration of\n+   --  System.Tasking.Initialization\n+\n+   if TSL.Timed_Delay = null then\n+      TSL.Timed_Delay := Timed_Delay_NT'Access;\n+   end if;\n+end Ada.Calendar.Delays;"}, {"sha": "0c29f6025480b002201088b95ea6520b684426f6", "filename": "gcc/ada/4vcalend.adb", "status": "added", "additions": 373, "deletions": 0, "changes": 373, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4vcalend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4vcalend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4vcalend.adb?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,373 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                         A D A . C A L E N D A R                          --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.19 $\n+--                                                                          --\n+--            Copyright (C) 1992-2000 Free Software Foundation, Inc.        --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the Alpha/VMS version.\n+\n+with System.Aux_DEC; use System.Aux_DEC;\n+\n+package body Ada.Calendar is\n+\n+   ------------------------------\n+   -- Use of Pragma Unsuppress --\n+   ------------------------------\n+\n+   --  This implementation of Calendar takes advantage of the permission in\n+   --  Ada 95 of using arithmetic overflow checks to check for out of bounds\n+   --  time values. This means that we must catch the constraint error that\n+   --  results from arithmetic overflow, so we use pragma Unsuppress to make\n+   --  sure that overflow is enabled, using software overflow checking if\n+   --  necessary. That way, compiling Calendar with options to suppress this\n+   --  checking will not affect its correctness.\n+\n+   ------------------------\n+   -- Local Declarations --\n+   ------------------------\n+\n+   Ada_Year_Min : constant := 1901;\n+   Ada_Year_Max : constant := 2099;\n+\n+   --  Some basic constants used throughout\n+\n+   Days_In_Month : constant array (Month_Number) of Day_Number :=\n+                     (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);\n+\n+   function To_Relative_Time (D : Duration) return Time;\n+\n+   function To_Relative_Time (D : Duration) return Time is\n+   begin\n+      return Time (Long_Integer'Integer_Value (D) / 100);\n+   end To_Relative_Time;\n+\n+   ---------\n+   -- \"+\" --\n+   ---------\n+\n+   function \"+\" (Left : Time; Right : Duration) return Time is\n+      pragma Unsuppress (Overflow_Check);\n+   begin\n+      return (Left + To_Relative_Time (Right));\n+\n+   exception\n+      when Constraint_Error =>\n+         raise Time_Error;\n+   end \"+\";\n+\n+   function \"+\" (Left : Duration; Right : Time) return Time is\n+      pragma Unsuppress (Overflow_Check);\n+   begin\n+      return (To_Relative_Time (Left) + Right);\n+\n+   exception\n+      when Constraint_Error =>\n+         raise Time_Error;\n+   end \"+\";\n+\n+   ---------\n+   -- \"-\" --\n+   ---------\n+\n+   function \"-\" (Left : Time; Right : Duration)  return Time is\n+      pragma Unsuppress (Overflow_Check);\n+   begin\n+      return Left - To_Relative_Time (Right);\n+\n+   exception\n+      when Constraint_Error =>\n+         raise Time_Error;\n+   end \"-\";\n+\n+   function \"-\" (Left : Time; Right : Time) return Duration is\n+      pragma Unsuppress (Overflow_Check);\n+   begin\n+      return Duration'Fixed_Value\n+        ((Long_Integer (Left) - Long_Integer (Right)) * 100);\n+\n+   exception\n+      when Constraint_Error =>\n+         raise Time_Error;\n+   end \"-\";\n+\n+   ---------\n+   -- \"<\" --\n+   ---------\n+\n+   function \"<\" (Left, Right : Time) return Boolean is\n+   begin\n+      return Long_Integer (Left) < Long_Integer (Right);\n+   end \"<\";\n+\n+   ----------\n+   -- \"<=\" --\n+   ----------\n+\n+   function \"<=\" (Left, Right : Time) return Boolean is\n+   begin\n+      return Long_Integer (Left) <= Long_Integer (Right);\n+   end \"<=\";\n+\n+   ---------\n+   -- \">\" --\n+   ---------\n+\n+   function \">\" (Left, Right : Time) return Boolean is\n+   begin\n+      return Long_Integer (Left) > Long_Integer (Right);\n+   end \">\";\n+\n+   ----------\n+   -- \">=\" --\n+   ----------\n+\n+   function \">=\" (Left, Right : Time) return Boolean is\n+   begin\n+      return Long_Integer (Left) >= Long_Integer (Right);\n+   end \">=\";\n+\n+   -----------\n+   -- Clock --\n+   -----------\n+\n+   --  The Ada.Calendar.Clock function gets the time.\n+   --  Note that on other targets a soft-link is used to get a different clock\n+   --  depending whether tasking is used or not. On VMS this isn't needed\n+   --  since all clock calls end up using SYS$GETTIM, so call the\n+   --  OS_Primitives version for efficiency.\n+\n+   function Clock return Time is\n+   begin\n+      return Time (OSP.OS_Clock);\n+   end Clock;\n+\n+   ---------\n+   -- Day --\n+   ---------\n+\n+   function Day (Date : Time) return Day_Number is\n+      DY : Year_Number;\n+      DM : Month_Number;\n+      DD : Day_Number;\n+      DS : Day_Duration;\n+\n+   begin\n+      Split (Date, DY, DM, DD, DS);\n+      return DD;\n+   end Day;\n+\n+   -----------\n+   -- Month --\n+   -----------\n+\n+   function Month (Date : Time) return Month_Number is\n+      DY : Year_Number;\n+      DM : Month_Number;\n+      DD : Day_Number;\n+      DS : Day_Duration;\n+\n+   begin\n+      Split (Date, DY, DM, DD, DS);\n+      return DM;\n+   end Month;\n+\n+   -------------\n+   -- Seconds --\n+   -------------\n+\n+   function Seconds (Date : Time) return Day_Duration is\n+      DY : Year_Number;\n+      DM : Month_Number;\n+      DD : Day_Number;\n+      DS : Day_Duration;\n+\n+   begin\n+      Split (Date, DY, DM, DD, DS);\n+      return DS;\n+   end Seconds;\n+\n+   -----------\n+   -- Split --\n+   -----------\n+\n+   procedure Split\n+     (Date    : Time;\n+      Year    : out Year_Number;\n+      Month   : out Month_Number;\n+      Day     : out Day_Number;\n+      Seconds : out Day_Duration)\n+   is\n+      procedure Numtim (\n+        Status : out Unsigned_Longword;\n+        Timbuf : out Unsigned_Word_Array;\n+        Timadr : in  Time);\n+\n+      pragma Interface (External, Numtim);\n+\n+      pragma Import_Valued_Procedure (Numtim, \"SYS$NUMTIM\",\n+        (Unsigned_Longword, Unsigned_Word_Array, Time),\n+        (Value, Reference, Reference));\n+\n+      Status   : Unsigned_Longword;\n+      Timbuf   : Unsigned_Word_Array (1 .. 7);\n+\n+   begin\n+      Numtim (Status, Timbuf, Date);\n+\n+      if Status mod 2 /= 1\n+        or else Timbuf (1) not in Ada_Year_Min .. Ada_Year_Max\n+      then\n+         raise Time_Error;\n+      end if;\n+\n+      Seconds\n+        := Day_Duration (Timbuf (6) + 60 * (Timbuf (5) + 60 * Timbuf (4)))\n+           + Day_Duration (Timbuf (7)) / 100.0;\n+      Day       := Integer (Timbuf (3));\n+      Month     := Integer (Timbuf (2));\n+      Year      := Integer (Timbuf (1));\n+   end Split;\n+\n+   -------------\n+   -- Time_Of --\n+   -------------\n+\n+   function Time_Of\n+     (Year    : Year_Number;\n+      Month   : Month_Number;\n+      Day     : Day_Number;\n+      Seconds : Day_Duration := 0.0)\n+      return    Time\n+   is\n+\n+      procedure Cvt_Vectim (\n+        Status         : out Unsigned_Longword;\n+        Input_Time     : in  Unsigned_Word_Array;\n+        Resultant_Time : out Time);\n+\n+      pragma Interface (External, Cvt_Vectim);\n+\n+      pragma Import_Valued_Procedure (Cvt_Vectim, \"LIB$CVT_VECTIM\",\n+        (Unsigned_Longword, Unsigned_Word_Array, Time),\n+        (Value, Reference, Reference));\n+\n+      Status      : Unsigned_Longword;\n+      Timbuf      : Unsigned_Word_Array (1 .. 7);\n+      Date        : Time;\n+      Int_Secs    : Integer;\n+      Day_Hack    : Boolean := False;\n+   begin\n+      --  The following checks are redundant with respect to the constraint\n+      --  error checks that should normally be made on parameters, but we\n+      --  decide to raise Constraint_Error in any case if bad values come\n+      --  in (as a result of checks being off in the caller, or for other\n+      --  erroneous or bounded error cases).\n+\n+      if        not Year   'Valid\n+        or else not Month  'Valid\n+        or else not Day    'Valid\n+        or else not Seconds'Valid\n+      then\n+         raise Constraint_Error;\n+      end if;\n+\n+      --  Truncate seconds value by subtracting 0.5 and rounding,\n+      --  but be careful with 0.0 since that will give -1.0 unless\n+      --  it is treated specially.\n+\n+      if Seconds > 0.0 then\n+         Int_Secs := Integer (Seconds - 0.5);\n+      else\n+         Int_Secs := Integer (Seconds);\n+      end if;\n+\n+      --  Cvt_Vectim barfs on the largest Day_Duration, so trick it by\n+      --  setting it to zero and then adding the difference after conversion.\n+\n+      if Int_Secs = 86_400 then\n+         Int_Secs := 0;\n+         Day_Hack := True;\n+         Timbuf (7) := 0;\n+      else\n+         Timbuf (7) := Unsigned_Word\n+          (100.0 * Duration (Seconds - Day_Duration (Int_Secs)));\n+         --  Cvt_Vectim accurate only to within .01 seconds\n+      end if;\n+\n+      --  Similar hack needed for 86399 and 100/100ths, since that gets\n+      --  treated as 86400 (largest Day_Duration). This can happen because\n+      --  Duration has more accuracy than VMS system time conversion calls\n+      --  can handle.\n+\n+      if Int_Secs = 86_399 and then Timbuf (7) = 100 then\n+         Int_Secs := 0;\n+         Day_Hack := True;\n+         Timbuf (7) := 0;\n+      end if;\n+\n+      Timbuf (6) := Unsigned_Word (Int_Secs mod 60);\n+      Timbuf (5) := Unsigned_Word ((Int_Secs / 60) mod 60);\n+      Timbuf (4) := Unsigned_Word (Int_Secs / 3600);\n+      Timbuf (3) := Unsigned_Word (Day);\n+      Timbuf (2) := Unsigned_Word (Month);\n+      Timbuf (1) := Unsigned_Word (Year);\n+\n+      Cvt_Vectim (Status, Timbuf, Date);\n+\n+      if Status mod 2 /= 1 then\n+         raise Time_Error;\n+      end if;\n+\n+      if Day_Hack then\n+         Date := Date + 10_000_000 * 86_400;\n+      end if;\n+\n+      return Date;\n+\n+   end Time_Of;\n+\n+   ----------\n+   -- Year --\n+   ----------\n+\n+   function Year (Date : Time) return Year_Number is\n+      DY : Year_Number;\n+      DM : Month_Number;\n+      DD : Day_Number;\n+      DS : Day_Duration;\n+\n+   begin\n+      Split (Date, DY, DM, DD, DS);\n+      return DY;\n+   end Year;\n+\n+end Ada.Calendar;"}, {"sha": "3d6b7362791b48342823fe59c3f5a131b39bf689", "filename": "gcc/ada/4vcalend.ads", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4vcalend.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4vcalend.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4vcalend.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,101 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                         A D A . C A L E N D A R                          --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.3 $                              --\n+--                                                                          --\n+-- This specification is adapted from the Ada Reference Manual for use with --\n+-- GNAT.  In accordance with the copyright of that document, you can freely --\n+-- copy and modify this specification,  provided that if you redistribute a --\n+-- modified version,  any changes that you have made are clearly indicated. --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the Alpha/VMS version.\n+\n+with System.OS_Primitives;\n+package Ada.Calendar is\n+\n+   package OSP renames System.OS_Primitives;\n+\n+   type Time is private;\n+\n+   --  Declarations representing limits of allowed local time values. Note that\n+   --  these do NOT constrain the possible stored values of time which may well\n+   --  permit a larger range of times (this is explicitly allowed in Ada 95).\n+\n+   subtype Year_Number  is Integer range 1901 .. 2099;\n+   subtype Month_Number is Integer range 1 .. 12;\n+   subtype Day_Number   is Integer range 1 .. 31;\n+\n+   subtype Day_Duration is Duration range 0.0 .. 86_400.0;\n+\n+   function Clock return Time;\n+\n+   function Year    (Date : Time) return Year_Number;\n+   function Month   (Date : Time) return Month_Number;\n+   function Day     (Date : Time) return Day_Number;\n+   function Seconds (Date : Time) return Day_Duration;\n+\n+   procedure Split\n+     (Date    : Time;\n+      Year    : out Year_Number;\n+      Month   : out Month_Number;\n+      Day     : out Day_Number;\n+      Seconds : out Day_Duration);\n+\n+   function Time_Of\n+     (Year    : Year_Number;\n+      Month   : Month_Number;\n+      Day     : Day_Number;\n+      Seconds : Day_Duration := 0.0)\n+      return    Time;\n+\n+   function \"+\" (Left : Time;     Right : Duration) return Time;\n+   function \"+\" (Left : Duration; Right : Time)     return Time;\n+   function \"-\" (Left : Time;     Right : Duration) return Time;\n+   function \"-\" (Left : Time;     Right : Time)     return Duration;\n+\n+   function \"<\"  (Left, Right : Time) return Boolean;\n+   function \"<=\" (Left, Right : Time) return Boolean;\n+   function \">\"  (Left, Right : Time) return Boolean;\n+   function \">=\" (Left, Right : Time) return Boolean;\n+\n+   Time_Error : exception;\n+\n+private\n+\n+   pragma Inline (Clock);\n+\n+   pragma Inline (Year);\n+   pragma Inline (Month);\n+   pragma Inline (Day);\n+\n+   pragma Inline (\"+\");\n+   pragma Inline (\"-\");\n+\n+   pragma Inline (\"<\");\n+   pragma Inline (\"<=\");\n+   pragma Inline (\">\");\n+   pragma Inline (\">=\");\n+\n+   --  Time is represented as the number of 100-nanosecond (ns) units offset\n+   --  from the system base date and time, which is 00:00 o'clock,\n+   --  November 17, 1858 (the Smithsonian base date and time for the\n+   --  astronomic calendar).\n+\n+   --  The time value stored is typically a GMT value, as provided in standard\n+   --  Unix environments. If this is the case then Split and Time_Of perform\n+   --  required conversions to and from local times.\n+\n+   type Time is new OSP.OS_Time;\n+\n+   --  Notwithstanding this definition, Time is not quite the same as OS_Time.\n+   --  Relative Time is positive, whereas relative OS_Time is negative,\n+   --  but this declaration makes for easier conversion.\n+\n+end Ada.Calendar;"}, {"sha": "9c1df02dd7c9736c824233c8fd4890bc7db88495", "filename": "gcc/ada/4vintnam.ads", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4vintnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4vintnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4vintnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,80 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.5 $                             --\n+--                                                                          --\n+--          Copyright (C) 1991-2000 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is a OpenVMS/Alpha version of this package.\n+--\n+--  This target-dependent package spec contains names of interrupts\n+--  supported by the local system.\n+\n+with System.OS_Interface;\n+package Ada.Interrupts.Names is\n+\n+   package OS renames System.OS_Interface;\n+\n+   Interrupt_ID_0   : constant Interrupt_ID := OS.Interrupt_ID_0;\n+   Interrupt_ID_1   : constant Interrupt_ID := OS.Interrupt_ID_1;\n+   Interrupt_ID_2   : constant Interrupt_ID := OS.Interrupt_ID_2;\n+   Interrupt_ID_3   : constant Interrupt_ID := OS.Interrupt_ID_3;\n+   Interrupt_ID_4   : constant Interrupt_ID := OS.Interrupt_ID_4;\n+   Interrupt_ID_5   : constant Interrupt_ID := OS.Interrupt_ID_5;\n+   Interrupt_ID_6   : constant Interrupt_ID := OS.Interrupt_ID_6;\n+   Interrupt_ID_7   : constant Interrupt_ID := OS.Interrupt_ID_7;\n+   Interrupt_ID_8   : constant Interrupt_ID := OS.Interrupt_ID_8;\n+   Interrupt_ID_9   : constant Interrupt_ID := OS.Interrupt_ID_9;\n+   Interrupt_ID_10  : constant Interrupt_ID := OS.Interrupt_ID_10;\n+   Interrupt_ID_11  : constant Interrupt_ID := OS.Interrupt_ID_11;\n+   Interrupt_ID_12  : constant Interrupt_ID := OS.Interrupt_ID_12;\n+   Interrupt_ID_13  : constant Interrupt_ID := OS.Interrupt_ID_13;\n+   Interrupt_ID_14  : constant Interrupt_ID := OS.Interrupt_ID_14;\n+   Interrupt_ID_15  : constant Interrupt_ID := OS.Interrupt_ID_15;\n+   Interrupt_ID_16  : constant Interrupt_ID := OS.Interrupt_ID_16;\n+   Interrupt_ID_17  : constant Interrupt_ID := OS.Interrupt_ID_17;\n+   Interrupt_ID_18  : constant Interrupt_ID := OS.Interrupt_ID_18;\n+   Interrupt_ID_19  : constant Interrupt_ID := OS.Interrupt_ID_19;\n+   Interrupt_ID_20  : constant Interrupt_ID := OS.Interrupt_ID_20;\n+   Interrupt_ID_21  : constant Interrupt_ID := OS.Interrupt_ID_21;\n+   Interrupt_ID_22  : constant Interrupt_ID := OS.Interrupt_ID_22;\n+   Interrupt_ID_23  : constant Interrupt_ID := OS.Interrupt_ID_23;\n+   Interrupt_ID_24  : constant Interrupt_ID := OS.Interrupt_ID_24;\n+   Interrupt_ID_25  : constant Interrupt_ID := OS.Interrupt_ID_25;\n+   Interrupt_ID_26  : constant Interrupt_ID := OS.Interrupt_ID_26;\n+   Interrupt_ID_27  : constant Interrupt_ID := OS.Interrupt_ID_27;\n+   Interrupt_ID_28  : constant Interrupt_ID := OS.Interrupt_ID_28;\n+   Interrupt_ID_29  : constant Interrupt_ID := OS.Interrupt_ID_29;\n+   Interrupt_ID_30  : constant Interrupt_ID := OS.Interrupt_ID_30;\n+   Interrupt_ID_31  : constant Interrupt_ID := OS.Interrupt_ID_31;\n+\n+end Ada.Interrupts.Names;"}, {"sha": "b6a6bf718dcb141f9e4b4d74bcba289e69e3afe7", "filename": "gcc/ada/4wcalend.adb", "status": "added", "additions": 396, "deletions": 0, "changes": 396, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4wcalend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4wcalend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4wcalend.adb?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,396 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                         A D A . C A L E N D A R                          --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.14 $\n+--                                                                          --\n+--            Copyright (C) 1997-2001 Free Software Foundation, Inc.        --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the Windows NT/95 version.\n+\n+with System.OS_Primitives;\n+--  used for Clock\n+\n+with System.OS_Interface;\n+\n+package body Ada.Calendar is\n+\n+   use System.OS_Interface;\n+\n+   ------------------------------\n+   -- Use of Pragma Unsuppress --\n+   ------------------------------\n+\n+   --  This implementation of Calendar takes advantage of the permission in\n+   --  Ada 95 of using arithmetic overflow checks to check for out of bounds\n+   --  time values. This means that we must catch the constraint error that\n+   --  results from arithmetic overflow, so we use pragma Unsuppress to make\n+   --  sure that overflow is enabled, using software overflow checking if\n+   --  necessary. That way, compiling Calendar with options to suppress this\n+   --  checking will not affect its correctness.\n+\n+   ------------------------\n+   -- Local Declarations --\n+   ------------------------\n+\n+   Ada_Year_Min : constant := 1901;\n+   Ada_Year_Max : constant := 2099;\n+\n+   --  Win32 time constants\n+\n+   epoch_1970     : constant := 16#19D_B1DE_D53E_8000#; -- win32 UTC epoch\n+   system_time_ns : constant := 100;                    -- 100 ns per tick\n+   Sec_Unit       : constant := 10#1#E9;\n+\n+   ---------\n+   -- \"+\" --\n+   ---------\n+\n+   function \"+\" (Left : Time; Right : Duration) return Time is\n+      pragma Unsuppress (Overflow_Check);\n+   begin\n+      return (Left + Time (Right));\n+\n+   exception\n+      when Constraint_Error =>\n+         raise Time_Error;\n+   end \"+\";\n+\n+   function \"+\" (Left : Duration; Right : Time) return Time is\n+      pragma Unsuppress (Overflow_Check);\n+   begin\n+      return (Time (Left) + Right);\n+\n+   exception\n+      when Constraint_Error =>\n+         raise Time_Error;\n+   end \"+\";\n+\n+   ---------\n+   -- \"-\" --\n+   ---------\n+\n+   function \"-\" (Left : Time; Right : Duration)  return Time is\n+      pragma Unsuppress (Overflow_Check);\n+   begin\n+      return Left - Time (Right);\n+\n+   exception\n+      when Constraint_Error =>\n+         raise Time_Error;\n+   end \"-\";\n+\n+   function \"-\" (Left : Time; Right : Time) return Duration is\n+      pragma Unsuppress (Overflow_Check);\n+   begin\n+      return Duration (Left) - Duration (Right);\n+\n+   exception\n+      when Constraint_Error =>\n+         raise Time_Error;\n+   end \"-\";\n+\n+   ---------\n+   -- \"<\" --\n+   ---------\n+\n+   function \"<\" (Left, Right : Time) return Boolean is\n+   begin\n+      return Duration (Left) < Duration (Right);\n+   end \"<\";\n+\n+   ----------\n+   -- \"<=\" --\n+   ----------\n+\n+   function \"<=\" (Left, Right : Time) return Boolean is\n+   begin\n+      return Duration (Left) <= Duration (Right);\n+   end \"<=\";\n+\n+   ---------\n+   -- \">\" --\n+   ---------\n+\n+   function \">\" (Left, Right : Time) return Boolean is\n+   begin\n+      return Duration (Left) > Duration (Right);\n+   end \">\";\n+\n+   ----------\n+   -- \">=\" --\n+   ----------\n+\n+   function \">=\" (Left, Right : Time) return Boolean is\n+   begin\n+      return Duration (Left) >= Duration (Right);\n+   end \">=\";\n+\n+   -----------\n+   -- Clock --\n+   -----------\n+\n+   --  The Ada.Calendar.Clock function gets the time from the soft links\n+   --  interface which will call the appropriate function depending wether\n+   --  tasking is involved or not.\n+\n+   function Clock return Time is\n+   begin\n+      return Time (System.OS_Primitives.Clock);\n+   end Clock;\n+\n+   ---------\n+   -- Day --\n+   ---------\n+\n+   function Day (Date : Time) return Day_Number is\n+      DY : Year_Number;\n+      DM : Month_Number;\n+      DD : Day_Number;\n+      DS : Day_Duration;\n+\n+   begin\n+      Split (Date, DY, DM, DD, DS);\n+      return DD;\n+   end Day;\n+\n+   -----------\n+   -- Month --\n+   -----------\n+\n+   function Month (Date : Time) return Month_Number is\n+      DY : Year_Number;\n+      DM : Month_Number;\n+      DD : Day_Number;\n+      DS : Day_Duration;\n+\n+   begin\n+      Split (Date, DY, DM, DD, DS);\n+      return DM;\n+   end Month;\n+\n+   -------------\n+   -- Seconds --\n+   -------------\n+\n+   function Seconds (Date : Time) return Day_Duration is\n+      DY : Year_Number;\n+      DM : Month_Number;\n+      DD : Day_Number;\n+      DS : Day_Duration;\n+\n+   begin\n+      Split (Date, DY, DM, DD, DS);\n+      return DS;\n+   end Seconds;\n+\n+   -----------\n+   -- Split --\n+   -----------\n+\n+   procedure Split\n+     (Date    : Time;\n+      Year    : out Year_Number;\n+      Month   : out Month_Number;\n+      Day     : out Day_Number;\n+      Seconds : out Day_Duration)\n+   is\n+\n+      Date_Int    : aliased Long_Long_Integer;\n+      Date_Loc    : aliased Long_Long_Integer;\n+      Timbuf      : aliased SYSTEMTIME;\n+      Int_Date    : Long_Long_Integer;\n+      Sub_Seconds : Duration;\n+\n+   begin\n+      --  We take the sub-seconds (decimal part) of Date and this is added\n+      --  to compute the Seconds. This way we keep the precision of the\n+      --  high-precision clock that was lost with the Win32 API calls\n+      --  below.\n+\n+      if Date < 0.0 then\n+\n+         --  this is a Date before Epoch (January 1st, 1970)\n+\n+         Sub_Seconds := Duration (Date) -\n+           Duration (Long_Long_Integer (Date + Duration'(0.5)));\n+\n+         Int_Date := Long_Long_Integer (Date - Sub_Seconds);\n+\n+         --  For Date = -86400.1 we are 2 days before Epoch at 0.1 seconds\n+         --  from day 1 before Epoch. It means that it is 23h 59m 59.9s.\n+         --  here we adjust for that.\n+\n+         if Sub_Seconds < 0.0 then\n+            Int_Date    := Int_Date - 1;\n+            Sub_Seconds := 1.0 + Sub_Seconds;\n+         end if;\n+\n+      else\n+\n+         --  this is a Date after Epoch (January 1st, 1970)\n+\n+         Sub_Seconds := Duration (Date) -\n+           Duration (Long_Long_Integer (Date - Duration'(0.5)));\n+\n+         Int_Date := Long_Long_Integer (Date - Sub_Seconds);\n+\n+      end if;\n+\n+      --  Date_Int is the number of seconds from Epoch.\n+\n+      Date_Int := Long_Long_Integer\n+        (Int_Date * Sec_Unit / system_time_ns) + epoch_1970;\n+\n+      if not FileTimeToLocalFileTime (Date_Int'Access, Date_Loc'Access) then\n+         raise Time_Error;\n+      end if;\n+\n+      if not FileTimeToSystemTime (Date_Loc'Access, Timbuf'Access) then\n+         raise Time_Error;\n+      end if;\n+\n+      if Timbuf.wYear not in Ada_Year_Min .. Ada_Year_Max then\n+         raise Time_Error;\n+      end if;\n+\n+      Seconds :=\n+        Duration (Timbuf.wHour) * 3_600.0 +\n+        Duration (Timbuf.wMinute) * 60.0 +\n+        Duration (Timbuf.wSecond) +\n+        Sub_Seconds;\n+\n+      Day       := Integer (Timbuf.wDay);\n+      Month     := Integer (Timbuf.wMonth);\n+      Year      := Integer (Timbuf.wYear);\n+   end Split;\n+\n+   -------------\n+   -- Time_Of --\n+   -------------\n+\n+   function Time_Of\n+     (Year    : Year_Number;\n+      Month   : Month_Number;\n+      Day     : Day_Number;\n+      Seconds : Day_Duration := 0.0)\n+      return    Time\n+   is\n+\n+      Timbuf      : aliased SYSTEMTIME;\n+      Now         : aliased Long_Long_Integer;\n+      Loc         : aliased Long_Long_Integer;\n+      Int_Secs    : Integer;\n+      Secs        : Integer;\n+      Add_One_Day : Boolean := False;\n+      Date        : Time;\n+\n+   begin\n+      --  The following checks are redundant with respect to the constraint\n+      --  error checks that should normally be made on parameters, but we\n+      --  decide to raise Constraint_Error in any case if bad values come\n+      --  in (as a result of checks being off in the caller, or for other\n+      --  erroneous or bounded error cases).\n+\n+      if        not Year   'Valid\n+        or else not Month  'Valid\n+        or else not Day    'Valid\n+        or else not Seconds'Valid\n+      then\n+         raise Constraint_Error;\n+      end if;\n+\n+      if Seconds = 0.0 then\n+         Int_Secs := 0;\n+      else\n+         Int_Secs := Integer (Seconds - 0.5);\n+      end if;\n+\n+      --  Timbuf.wMillisec is to keep the msec. We can't use that because the\n+      --  high-resolution clock has a precision of 1 Microsecond.\n+      --  Anyway the sub-seconds part is not needed to compute the number\n+      --  of seconds in UTC.\n+\n+      if Int_Secs = 86_400 then\n+         Secs := 0;\n+         Add_One_Day := True;\n+      else\n+         Secs := Int_Secs;\n+      end if;\n+\n+      Timbuf.wMilliseconds := 0;\n+      Timbuf.wSecond       := WORD (Secs mod 60);\n+      Timbuf.wMinute       := WORD ((Secs / 60) mod 60);\n+      Timbuf.wHour         := WORD (Secs / 3600);\n+      Timbuf.wDay          := WORD (Day);\n+      Timbuf.wMonth        := WORD (Month);\n+      Timbuf.wYear         := WORD (Year);\n+\n+      if not SystemTimeToFileTime (Timbuf'Access, Loc'Access) then\n+         raise Time_Error;\n+      end if;\n+\n+      if not LocalFileTimeToFileTime (Loc'Access, Now'Access) then\n+         raise Time_Error;\n+      end if;\n+\n+      --  Here we have the UTC now translate UTC to Epoch time (UNIX style\n+      --  time based on 1 january 1970) and add there the sub-seconds part.\n+\n+      declare\n+         Sub_Sec  : Duration := Seconds - Duration (Int_Secs);\n+      begin\n+         Date := Time ((Now - epoch_1970) * system_time_ns / Sec_Unit) +\n+           Sub_Sec;\n+      end;\n+\n+      if Add_One_Day then\n+         Date := Date + Duration (86400.0);\n+      end if;\n+\n+      return Date;\n+   end Time_Of;\n+\n+   ----------\n+   -- Year --\n+   ----------\n+\n+   function Year (Date : Time) return Year_Number is\n+      DY : Year_Number;\n+      DM : Month_Number;\n+      DD : Day_Number;\n+      DS : Day_Duration;\n+\n+   begin\n+      Split (Date, DY, DM, DD, DS);\n+      return DY;\n+   end Year;\n+\n+end Ada.Calendar;"}, {"sha": "3a56defb11f71239ad5094c497f9cc83fa74b580", "filename": "gcc/ada/4wexcpol.adb", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4wexcpol.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4wexcpol.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4wexcpol.adb?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,61 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . E X C E P T I O N S . P O L L                  --\n+--                (version supporting asynchronous abort test)              --\n+--                                                                          --\n+--                                  B o d y                                 --\n+--                                                                          --\n+--                             $Revision: 1.9 $\n+--                                                                          --\n+--          Copyright (C) 1992-2000, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This version is for targets that do not support per-thread asynchronous\n+--  signals. On such targets, we require compilation with the -gnatP switch\n+--  that activates periodic polling. Then in the body of the polling routine\n+--  we test for asynchronous abort.\n+\n+--  NT, OS/2, HPUX/DCE and SCO currently use this file\n+\n+with System.Soft_Links;\n+--  used for Check_Abort_Status\n+\n+separate (Ada.Exceptions)\n+\n+----------\n+-- Poll --\n+----------\n+\n+procedure Poll is\n+begin\n+   --  Test for asynchronous abort on each poll\n+\n+   if System.Soft_Links.Check_Abort_Status.all /= 0 then\n+      raise Standard'Abort_Signal;\n+   end if;\n+end Poll;"}, {"sha": "e1cc02cc8da5f660284e6db06a7a9cdbf1b2bfa5", "filename": "gcc/ada/4wintnam.ads", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4wintnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4wintnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4wintnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,70 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.3 $                             --\n+--                                                                          --\n+--          Copyright (C) 1997-1998 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is a NT (native) version of this package.\n+\n+--  This target-dependent package spec contains names of interrupts\n+--  supported by the local system.\n+\n+with System.OS_Interface;\n+--  used for names of interrupts\n+\n+package Ada.Interrupts.Names is\n+\n+   --  Beware that the mapping of names to signals may be\n+   --  many-to-one.  There may be aliases.  Also, for all\n+   --  signal names that are not supported on the current system\n+   --  the value of the corresponding constant will be zero.\n+\n+   SIGINT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+\n+   SIGILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+\n+   SIGABRT : constant Interrupt_ID := --  used by abort,\n+     System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n+\n+   SIGFPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFPE;      --  floating point exception\n+\n+   SIGSEGV : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+\n+   SIGTERM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+\n+end Ada.Interrupts.Names;"}, {"sha": "7bb4192aee021cf26406f78f14aab13b3dc0030f", "filename": "gcc/ada/4zintnam.ads", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4zintnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4zintnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4zintnam.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,191 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                 GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS              --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.3 $                             --\n+--                                                                          --\n+--           Copyright (C) 1991-2001 Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the VxWorks version of this package.\n+--\n+--  The following signals are reserved by the run time:\n+--\n+--  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGABRT\n+--\n+--  The pragma Unreserve_All_Interrupts affects the following signal(s):\n+--\n+--  none\n+\n+--  This target-dependent package spec contains names of interrupts\n+--  supported by the local system.\n+\n+with System.OS_Interface;\n+with System.VxWorks;\n+\n+package Ada.Interrupts.Names is\n+\n+   subtype Hardware_Interrupts is Interrupt_ID\n+     range Interrupt_ID'First .. System.OS_Interface.Max_HW_Interrupt;\n+   --  Range of values that can be used for hardware interrupts.\n+\n+   --  The following constants can be used for software interrupts mapped to\n+   --  user-level signals:\n+\n+   SIGHUP : constant Interrupt_ID;\n+   --  hangup\n+\n+   SIGINT : constant Interrupt_ID;\n+   --  interrupt\n+\n+   SIGQUIT : constant Interrupt_ID;\n+   --  quit\n+\n+   SIGILL : constant Interrupt_ID;\n+   --  illegal instruction (not reset)\n+\n+   SIGTRAP : constant Interrupt_ID;\n+   --  trace trap (not reset)\n+\n+   SIGIOT : constant Interrupt_ID;\n+   --  IOT instruction\n+\n+   SIGABRT : constant Interrupt_ID;\n+   --  used by abort, replace SIGIOT\n+\n+   SIGEMT : constant Interrupt_ID;\n+   --  EMT instruction\n+\n+   SIGFPE : constant Interrupt_ID;\n+   --  floating point exception\n+\n+   SIGKILL : constant Interrupt_ID;\n+   --  kill (cannot be caught or ignored)\n+\n+   SIGBUS : constant Interrupt_ID;\n+   --  bus error\n+\n+   SIGSEGV : constant Interrupt_ID;\n+   --  segmentation violation\n+\n+   SIGSYS : constant Interrupt_ID;\n+   --  bad argument to system call\n+\n+   SIGPIPE : constant Interrupt_ID;\n+   --  no one to read it\n+\n+   SIGALRM : constant Interrupt_ID;\n+   --  alarm clock\n+\n+   SIGTERM : constant Interrupt_ID;\n+   --  software termination signal from kill\n+\n+   SIGURG : constant Interrupt_ID;\n+   --  urgent condition on IO channel\n+\n+   SIGSTOP : constant Interrupt_ID;\n+   --  stop (cannot be caught or ignored)\n+\n+   SIGTSTP : constant Interrupt_ID;\n+   --  user stop requested from tty\n+\n+   SIGCONT : constant Interrupt_ID;\n+   --  stopped process has been continued\n+\n+   SIGCHLD : constant Interrupt_ID;\n+   --  child status change\n+\n+   SIGTTIN : constant Interrupt_ID;\n+   --  background tty read attempted\n+\n+   SIGTTOU : constant Interrupt_ID;\n+   --  background tty write attempted\n+\n+   SIGIO : constant Interrupt_ID;\n+   --  input/output possible,\n+\n+   SIGXCPU : constant Interrupt_ID;\n+   --  CPU time limit exceeded\n+\n+   SIGXFSZ : constant Interrupt_ID;\n+   --  filesize limit exceeded\n+\n+   SIGVTALRM : constant Interrupt_ID;\n+   --  virtual timer expired\n+\n+   SIGPROF : constant Interrupt_ID;\n+   --  profiling timer expired\n+\n+   SIGWINCH : constant Interrupt_ID;\n+   --  window size change\n+\n+   SIGUSR1 : constant Interrupt_ID;\n+   --  user defined signal 1\n+\n+   SIGUSR2 : constant Interrupt_ID;\n+   --  user defined signal 2\n+\n+private\n+\n+   Signal_Base : constant := System.VxWorks.Num_HW_Interrupts;\n+\n+   SIGHUP     : constant Interrupt_ID :=  1 + Signal_Base;\n+   SIGINT     : constant Interrupt_ID :=  2 + Signal_Base;\n+   SIGQUIT    : constant Interrupt_ID :=  3 + Signal_Base;\n+   SIGILL     : constant Interrupt_ID :=  4 + Signal_Base;\n+   SIGTRAP    : constant Interrupt_ID :=  5 + Signal_Base;\n+   SIGIOT     : constant Interrupt_ID :=  6 + Signal_Base;\n+   SIGABRT    : constant Interrupt_ID :=  6 + Signal_Base;\n+   SIGEMT     : constant Interrupt_ID :=  7 + Signal_Base;\n+   SIGFPE     : constant Interrupt_ID :=  8 + Signal_Base;\n+   SIGKILL    : constant Interrupt_ID :=  9 + Signal_Base;\n+   SIGBUS     : constant Interrupt_ID := 10 + Signal_Base;\n+   SIGSEGV    : constant Interrupt_ID := 11 + Signal_Base;\n+   SIGSYS     : constant Interrupt_ID := 12 + Signal_Base;\n+   SIGPIPE    : constant Interrupt_ID := 13 + Signal_Base;\n+   SIGALRM    : constant Interrupt_ID := 14 + Signal_Base;\n+   SIGTERM    : constant Interrupt_ID := 15 + Signal_Base;\n+   SIGURG     : constant Interrupt_ID := 16 + Signal_Base;\n+   SIGSTOP    : constant Interrupt_ID := 17 + Signal_Base;\n+   SIGTSTP    : constant Interrupt_ID := 18 + Signal_Base;\n+   SIGCONT    : constant Interrupt_ID := 19 + Signal_Base;\n+   SIGCHLD    : constant Interrupt_ID := 20 + Signal_Base;\n+   SIGTTIN    : constant Interrupt_ID := 21 + Signal_Base;\n+   SIGTTOU    : constant Interrupt_ID := 22 + Signal_Base;\n+   SIGIO      : constant Interrupt_ID := 23 + Signal_Base;\n+   SIGXCPU    : constant Interrupt_ID := 24 + Signal_Base;\n+   SIGXFSZ    : constant Interrupt_ID := 25 + Signal_Base;\n+   SIGVTALRM  : constant Interrupt_ID := 26 + Signal_Base;\n+   SIGPROF    : constant Interrupt_ID := 27 + Signal_Base;\n+   SIGWINCH   : constant Interrupt_ID := 28 + Signal_Base;\n+   SIGUSR1    : constant Interrupt_ID := 30 + Signal_Base;\n+   SIGUSR2    : constant Interrupt_ID := 31 + Signal_Base;\n+\n+end Ada.Interrupts.Names;"}, {"sha": "33540f353886435c910301795e38c86d611032cd", "filename": "gcc/ada/4znumaux.ads", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4znumaux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4znumaux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4znumaux.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,99 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                     A D A . N U M E R I C S . A U X                      --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                       (C Library Version, VxWorks)                       --\n+--                                                                          --\n+--                            $Revision: 1.1 $                             --\n+--                                                                          --\n+--          Copyright (C) 1992-1998 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides the basic computational interface for the generic\n+--  elementary functions. The C library version interfaces with the routines\n+--  in the C mathematical library, and is thus quite portable, although it may\n+--  not necessarily meet the requirements for accuracy in the numerics annex.\n+--  One advantage of using this package is that it will interface directly to\n+--  hardware instructions, such as the those provided on the Intel x86.\n+\n+--  Note: there are two versions of this package. One using the normal IEEE\n+--  64-bit double format (which is this version), and one using 80-bit x86\n+--  long double (see file 4onumaux.ads).\n+\n+package Ada.Numerics.Aux is\n+pragma Pure (Aux);\n+\n+   --  This version omits the pragma linker_options (\"-lm\") since there is\n+   --  no libm.a library for VxWorks.\n+\n+   type Double is digits 15;\n+   pragma Float_Representation (IEEE_Float, Double);\n+   --  Type Double is the type used to call the C routines. Note that this\n+   --  is IEEE format even when running on VMS with Vax_Float representation\n+   --  since we use the IEEE version of the C library with VMS.\n+\n+   function Sin (X : Double) return Double;\n+   pragma Import (C, Sin, \"sin\");\n+\n+   function Cos (X : Double) return Double;\n+   pragma Import (C, Cos, \"cos\");\n+\n+   function Tan (X : Double) return Double;\n+   pragma Import (C, Tan, \"tan\");\n+\n+   function Exp (X : Double) return Double;\n+   pragma Import (C, Exp, \"exp\");\n+\n+   function Sqrt (X : Double) return Double;\n+   pragma Import (C, Sqrt, \"sqrt\");\n+\n+   function Log (X : Double) return Double;\n+   pragma Import (C, Log, \"log\");\n+\n+   function Acos (X : Double) return Double;\n+   pragma Import (C, Acos, \"acos\");\n+\n+   function Asin (X : Double) return Double;\n+   pragma Import (C, Asin, \"asin\");\n+\n+   function Atan (X : Double) return Double;\n+   pragma Import (C, Atan, \"atan\");\n+\n+   function Sinh (X : Double) return Double;\n+   pragma Import (C, Sinh, \"sinh\");\n+\n+   function Cosh (X : Double) return Double;\n+   pragma Import (C, Cosh, \"cosh\");\n+\n+   function Tanh (X : Double) return Double;\n+   pragma Import (C, Tanh, \"tanh\");\n+\n+   function Pow (X, Y : Double) return Double;\n+   pragma Import (C, Pow, \"pow\");\n+\n+end Ada.Numerics.Aux;"}, {"sha": "2bc02353aceb76361fa7a2be741e158bc971786c", "filename": "gcc/ada/4zsytaco.adb", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4zsytaco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4zsytaco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4zsytaco.adb?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,142 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--         A D A . S Y N C H R O N O U S _ T A S K _ C O N T R O L          --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.1 $\n+--                                                                          --\n+--            Copyright (C) 1992-2001 Free Software Foundation, Inc.        --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Interfaces.C;\n+package body Ada.Synchronous_Task_Control is\n+   use System.OS_Interface;\n+   use type Interfaces.C.int;\n+\n+   -------------------\n+   -- Current_State --\n+   -------------------\n+\n+   function Current_State (S : Suspension_Object) return Boolean is\n+      St     : STATUS;\n+      Result : Boolean := False;\n+\n+   begin\n+      --  Determine state by attempting to take the semaphore with\n+      --  a 0 timeout value.  Status = OK indicates the semaphore was\n+      --  full, so reset it to the full state.\n+\n+      St := semTake (S.Sema, NO_WAIT);\n+\n+      if St = OK then\n+         --  Took the semaphore. Reset semaphore state to FULL\n+         Result := True;\n+         St := semGive (S.Sema);\n+      end if;\n+\n+      return Result;\n+   end Current_State;\n+\n+   ---------------\n+   -- Set_False --\n+   ---------------\n+\n+   procedure Set_False (S : in out Suspension_Object) is\n+      St : STATUS;\n+   begin\n+      --  Need to get the semaphore into the \"empty\" state.\n+      --  On return, this task will have made the semaphore\n+      --  empty (St = OK) or have left it empty.\n+      St := semTake (S.Sema, NO_WAIT);\n+   end Set_False;\n+\n+   --------------\n+   -- Set_True --\n+   --------------\n+\n+   procedure Set_True (S : in out Suspension_Object) is\n+      St : STATUS;\n+   begin\n+      St := semGive (S.Sema);\n+   end Set_True;\n+\n+   ------------------------\n+   -- Suspend_Until_True --\n+   ------------------------\n+\n+   procedure Suspend_Until_True (S : in out Suspension_Object) is\n+      St : STATUS;\n+\n+      --  Declare local exception so the mutex can still be reset\n+      --  to full if Program_Error is raised\n+\n+      Task_Already_Pending : exception;\n+   begin\n+      --  Determine whether another task is pending on the suspension\n+      --  object. Should never be called from an ISR. Therefore semTake can\n+      --  be called on the mutex\n+      St := semTake (S.Mutex, NO_WAIT);\n+\n+      if St = OK then\n+         --  Wait for suspension object\n+\n+         St := semTake (S.Sema, WAIT_FOREVER);\n+         St := semGive (S.Mutex);\n+\n+      else\n+         --  Another task is pending on the suspension object\n+\n+         raise Task_Already_Pending;\n+      end if;\n+   exception\n+      when Task_Already_Pending =>\n+         raise Program_Error;\n+      when others =>\n+         St := semGive (S.Mutex);\n+         raise;\n+   end Suspend_Until_True;\n+\n+   procedure Initialize (S : in out Suspension_Object) is\n+   begin\n+      S.Sema := semBCreate (SEM_Q_FIFO, SEM_EMPTY);\n+\n+      --  Use simpler binary semaphore instead of VxWorks\n+      --  mutual exclusion semaphore, because we don't need\n+      --  the fancier semantics and their overhead.\n+\n+      S.Mutex := semBCreate (SEM_Q_FIFO, SEM_FULL);\n+   end Initialize;\n+\n+   procedure Finalize (S : in out Suspension_Object) is\n+      St : STATUS;\n+   begin\n+      St := semDelete (S.Sema);\n+      St := semDelete (S.Mutex);\n+   end Finalize;\n+\n+end Ada.Synchronous_Task_Control;"}, {"sha": "a3eb0aabf2a4babe63bd3bfd0a05f1fe73303bea", "filename": "gcc/ada/4zsytaco.ads", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4zsytaco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48/gcc%2Fada%2F4zsytaco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F4zsytaco.ads?ref=6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "patch": "@@ -0,0 +1,70 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--         A D A . S Y N C H R O N O U S _ T A S K _ C O N T R O L          --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.1 $\n+--                                                                          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.OS_Interface;\n+with Ada.Finalization;\n+package Ada.Synchronous_Task_Control is\n+\n+   type Suspension_Object is limited private;\n+\n+   procedure Set_True (S : in out Suspension_Object);\n+\n+   procedure Set_False (S : in out Suspension_Object);\n+\n+   function Current_State (S : Suspension_Object) return Boolean;\n+\n+   procedure Suspend_Until_True (S : in out Suspension_Object);\n+\n+private\n+\n+   procedure Initialize (S : in out Suspension_Object);\n+\n+   procedure Finalize (S : in out Suspension_Object);\n+\n+   --  Implement with a VxWorks binary semaphore. A second semaphore\n+   --  is used to avoid a race condition related to the implementation of\n+   --  the STC requirement to raise Program_Error when Suspend_Until_True is\n+   --  called with a task already pending on the suspension object\n+\n+   type Suspension_Object is new Ada.Finalization.Controlled with record\n+      Sema  : System.OS_Interface.SEM_ID;\n+      Mutex : System.OS_Interface.SEM_ID;\n+   end record;\n+\n+end Ada.Synchronous_Task_Control;"}]}