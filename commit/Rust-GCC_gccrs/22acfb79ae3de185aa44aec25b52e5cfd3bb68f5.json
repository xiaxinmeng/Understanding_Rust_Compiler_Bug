{"sha": "22acfb79ae3de185aa44aec25b52e5cfd3bb68f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJhY2ZiNzlhZTNkZTE4NWFhNDRhZWMyNWI1MmU1Y2ZkM2JiNjhmNQ==", "commit": {"author": {"name": "Niels M\u00f6ller", "email": "nisse@lysator.liu.se", "date": "1999-10-13T07:27:10Z"}, "committer": {"name": "Martin v. L\u00f6wis", "email": "loewis@gcc.gnu.org", "date": "1999-10-13T07:27:10Z"}, "message": "* extend.texi (Function Names): Document types of function names.\n\nFrom-SVN: r29938", "tree": {"sha": "16b907780db30e558492ed204cbf25a88e0fec9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16b907780db30e558492ed204cbf25a88e0fec9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22acfb79ae3de185aa44aec25b52e5cfd3bb68f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22acfb79ae3de185aa44aec25b52e5cfd3bb68f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22acfb79ae3de185aa44aec25b52e5cfd3bb68f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22acfb79ae3de185aa44aec25b52e5cfd3bb68f5/comments", "author": {"login": "niels-moller", "id": 26724124, "node_id": "MDQ6VXNlcjI2NzI0MTI0", "avatar_url": "https://avatars.githubusercontent.com/u/26724124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niels-moller", "html_url": "https://github.com/niels-moller", "followers_url": "https://api.github.com/users/niels-moller/followers", "following_url": "https://api.github.com/users/niels-moller/following{/other_user}", "gists_url": "https://api.github.com/users/niels-moller/gists{/gist_id}", "starred_url": "https://api.github.com/users/niels-moller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niels-moller/subscriptions", "organizations_url": "https://api.github.com/users/niels-moller/orgs", "repos_url": "https://api.github.com/users/niels-moller/repos", "events_url": "https://api.github.com/users/niels-moller/events{/privacy}", "received_events_url": "https://api.github.com/users/niels-moller/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f22ec2e647946e4fb3988319416580ad8f906ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f22ec2e647946e4fb3988319416580ad8f906ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f22ec2e647946e4fb3988319416580ad8f906ce"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "f3c1655169a048aeb3d90424f7298353b7c77e40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22acfb79ae3de185aa44aec25b52e5cfd3bb68f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22acfb79ae3de185aa44aec25b52e5cfd3bb68f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22acfb79ae3de185aa44aec25b52e5cfd3bb68f5", "patch": "@@ -1,3 +1,7 @@\n+Wed Oct 13 09:25:03 1999  Niels M\ufffdller <nisse@lysator.liu.se>\n+\n+\t* extend.texi (Function Names): Document types of function names.\n+\n Wed Oct 13 00:45:04 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* reload1.c (reload_reg_free_for_value_p):  RELOAD_OTHER reloads with"}, {"sha": "7cdd3d657bf91d78a8cd87c006094c830ef9cf79", "filename": "gcc/extend.texi", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22acfb79ae3de185aa44aec25b52e5cfd3bb68f5/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22acfb79ae3de185aa44aec25b52e5cfd3bb68f5/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=22acfb79ae3de185aa44aec25b52e5cfd3bb68f5", "patch": "@@ -2999,10 +2999,11 @@ This extension is not supported by GNU C++.\n @node Function Names\n @section Function Names as Strings\n \n-GNU CC predefines two string variables to be the name of the current function.\n-The variable @code{__FUNCTION__} is the name of the function as it appears\n-in the source.  The variable @code{__PRETTY_FUNCTION__} is the name of\n-the function pretty printed in a language specific fashion.\n+GNU CC predefines two magic identifiers to hold the name of the current\n+function. The identifier @code{__FUNCTION__} holds the name of the function\n+as it appears in the source. The identifier @code{__PRETTY_FUNCTION__}\n+holds the name of the function pretty printed in a language specific\n+fashion.\n \n These names are always the same in a C function, but in a C++ function\n they may be different.  For example, this program:\n@@ -3038,11 +3039,43 @@ __FUNCTION__ = sub\n __PRETTY_FUNCTION__ = int  a::sub (int)\n @end smallexample\n \n-These names are not macros: they are predefined string variables.\n-For example, @samp{#ifdef __FUNCTION__} does not have any special\n+The compiler automagically replaces the identifiers with a string\n+literal containing the appropriate name. Thus, they are neither\n+preprocessor macros, like @code{__FILE__} and @code{__LINE__}, nor\n+variables. This means that they catenate with other string literals, and\n+that they can be used to initialize char arrays. For example\n+\n+@smallexample\n+char here[] = \"Function \" __FUNCTION__ \" in \" __FILE__;\n+@end smallexample\n+\n+On the other hand, @samp{#ifdef __FUNCTION__} does not have any special\n meaning inside a function, since the preprocessor does not do anything\n special with the identifier @code{__FUNCTION__}.\n \n+GNU CC also supports the magic word @code{__func__}, defined by the\n+draft standard for C-99:\n+\n+@display\n+The identifier @code{__func__} is implicitly declared by the translator\n+as if, immediately following the opening brace of each function\n+definition, the declaration\n+\n+@smallexample\n+static const char __func__[] = \"function-name\";\n+@end smallexample\n+\n+appeared, where function-name is the name of the lexically-enclosing\n+function. This name is the unadorned name of the function.\n+@end display\n+\n+By this definition, @code{__func__} is a variable, not a string literal.\n+In particular, @code{__func__} does not catenate with other string\n+literals.\n+\n+In @code{C++}, @code{__FUNCTION__} and @code{__PRETTY_FUNCTION__} are\n+variables, declared in the same way as @code{__func__}.\n+\n @node Return Address\n @section Getting the Return or Frame Address of a Function\n "}]}