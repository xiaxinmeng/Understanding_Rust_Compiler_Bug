{"sha": "9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFhNTMzNTBjM2JhMTAzZDY3MjhiMmVjZDE2MGY0MWFlYmI2ZjY4YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-08-22T18:07:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-08-22T18:07:55Z"}, "message": "random (class subtract_with_carry_01): Add.\n\n2006-08-22  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/random (class subtract_with_carry_01): Add.\n\t* include/tr1/random.tcc (subtract_with_carry_01<>::\n\tseed(unsigned long), subtract_with_carry_01<>::\n\tseed(_Gen&, false_type), subtract_with_carry_01<>::\n\toperator(), operator<<(std::basic_ostream<>&, const\n\tsubtract_with_carry_01<>&), operator>>(std::basic_istream<>&,\n\tsubtract_with_carry_01<>&)): Define.\n\t* testsuite/tr1/5_numerical_facilities/random/ranlux3_01.cc:\n\tNew.\n\t* testsuite/tr1/5_numerical_facilities/random/ranlux4_01.cc:\n\tLikewise.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tsubtract_with_carry_01/cons/seed1.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tsubtract_with_carry_01/cons/seed2.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tsubtract_with_carry_01/cons/default.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tsubtract_with_carry_01/cons/gen1.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tsubtract_with_carry_01/requirements/typedefs.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tsubtract_with_carry_01/operators/equal.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tsubtract_with_carry_01/operators/not_equal.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tsubtract_with_carry_01/operators/serialize.cc: Likewise.\n\n\t* docs/html/ext/howto.html: Add two implemented TR1 issues.\n\n\t* include/tr1/random.tcc (struct _To_Unsigned_Type): Move...\n\t* include/tr1/random: ... here.\n\t(class subtract_with_carry): Use it everywhere.\n\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tsubtract_with_carry/cons/seed1.cc: Qualify 1 as 1UL.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tsubtract_with_carry/cons/seed2.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tsubtract_with_carry/cons/default.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tsubtract_with_carry/cons/gen1.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tsubtract_with_carry/requirements/typedefs.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tsubtract_with_carry/operators/equal.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tsubtract_with_carry/operators/not_equal.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tsubtract_with_carry/operators/serialize.cc: Likewise.\n\nFrom-SVN: r116327", "tree": {"sha": "679adf62a0a441d998be29fc26947adef42bb8b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/679adf62a0a441d998be29fc26947adef42bb8b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/comments", "author": null, "committer": null, "parents": [{"sha": "8a613caeb327ae1500e1382f7d679d42fad07a63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a613caeb327ae1500e1382f7d679d42fad07a63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a613caeb327ae1500e1382f7d679d42fad07a63"}], "stats": {"total": 978, "additions": 914, "deletions": 64}, "files": [{"sha": "b3fac3ed50430f38eaca7dec133ff6bef46cf025", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -1,3 +1,56 @@\n+2006-08-22  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/random (class subtract_with_carry_01): Add.\n+\t* include/tr1/random.tcc (subtract_with_carry_01<>::\n+\tseed(unsigned long), subtract_with_carry_01<>::\n+\tseed(_Gen&, false_type), subtract_with_carry_01<>::\n+\toperator(), operator<<(std::basic_ostream<>&, const\n+\tsubtract_with_carry_01<>&), operator>>(std::basic_istream<>&,\n+\tsubtract_with_carry_01<>&)): Define.\n+\t* testsuite/tr1/5_numerical_facilities/random/ranlux3_01.cc:\n+\tNew.\n+\t* testsuite/tr1/5_numerical_facilities/random/ranlux4_01.cc:\n+\tLikewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tsubtract_with_carry_01/cons/seed1.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tsubtract_with_carry_01/cons/seed2.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tsubtract_with_carry_01/cons/default.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tsubtract_with_carry_01/cons/gen1.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tsubtract_with_carry_01/requirements/typedefs.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tsubtract_with_carry_01/operators/equal.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tsubtract_with_carry_01/operators/not_equal.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tsubtract_with_carry_01/operators/serialize.cc: Likewise.\n+\n+\t* docs/html/ext/howto.html: Add two implemented TR1 issues.\n+\n+\t* include/tr1/random.tcc (struct _To_Unsigned_Type): Move...\n+\t* include/tr1/random: ... here.\n+\t(class subtract_with_carry): Use it everywhere.\n+\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tsubtract_with_carry/cons/seed1.cc: Qualify 1 as 1UL.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tsubtract_with_carry/cons/seed2.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tsubtract_with_carry/cons/default.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tsubtract_with_carry/cons/gen1.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tsubtract_with_carry/requirements/typedefs.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tsubtract_with_carry/operators/equal.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tsubtract_with_carry/operators/not_equal.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tsubtract_with_carry/operators/serialize.cc: Likewise.\n+\n 2006-08-20  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/random (gamma_distribution<>::_M_initialize,"}, {"sha": "7a9e4ef15a6118dfbac633b16d9bb5b1eae585f4", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -574,6 +574,18 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n         <code>at(const key_type&amp;)</code> to <code>std::map</code>.\n     </dd>\n \n+    <dt><a href=\"lwg-defects.html#508\">508</a>:\n+        <em>Bad parameters for ranlux64_base_01</em>\n+    </dt>\n+    <dd>Fix the parameters.\n+    </dd>\n+\n+    <dt><a href=\"lwg-active.html#512\">512</a>:\n+        <em>Seeding subtract_with_carry_01 from a single unsigned long</em>\n+    </dt>\n+    <dd>Construct a <code>linear_congruential</code> engine and seed with it.\n+    </dd>\n+\n     <dt><a href=\"lwg-active.html#538\">538</a>:\n         <em>DR 538. 241 again: Does unique_copy() require CopyConstructible\n \t    and Assignable?</em>"}, {"sha": "41e010a8a48bfe0f067fdec23b062caab529b82d", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 248, "deletions": 16, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -85,6 +85,31 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     template<typename _UIntType, int __w>\n       struct _Shift<_UIntType, __w, true>\n       { static const _UIntType __value = _UIntType(1) << __w; };\n+\n+    template<typename _ValueT>\n+      struct _To_Unsigned_Type\n+      { typedef _ValueT _Type; };\n+\n+    template<>\n+      struct _To_Unsigned_Type<short>\n+      { typedef unsigned short _Type; };\n+\n+    template<>\n+      struct _To_Unsigned_Type<int>\n+      { typedef unsigned int _Type; };\n+\n+    template<>\n+      struct _To_Unsigned_Type<long>\n+      { typedef unsigned long _Type; };\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+    template<>\n+      struct _To_Unsigned_Type<long long>\n+      { typedef unsigned long long _Type; };\n+#endif\n+\n+    typedef _Select<(sizeof(unsigned) == 4),\n+\t\t    unsigned, unsigned long>::_Type _UInt32Type;\n   } // anonymous namespace\n \n     /*\n@@ -673,7 +698,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * type large enough to store values up to m.\"\n    *\n    * @if maint\n-   * @var _M_x     The state of te generator.  This is a ring buffer.\n+   * @var _M_x     The state of the generator.  This is a ring buffer.\n    * @var _M_carry The carry.\n    * @var _M_p     Current index of x(i - r).\n    * @endif\n@@ -724,8 +749,10 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       { this->seed(__value); }\n \n       /**\n-       * Constructs a % subtract_with_carry random number generator seeded from\n-       * the PAD iterated by [__first, last).\n+       * Constructs a %subtract_with_carry random number generator engine\n+       * seeded from the generator function @p __g.\n+       *\n+       * @param __g The seed generator function.\n        */\n       template<class _Gen>\n         subtract_with_carry(_Gen& __g)\n@@ -734,10 +761,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       /**\n        * Seeds the initial state @f$ x_0 @f$ of the random number generator.\n        *\n-       * @note This implementation follows the tr1 specification but will\n-       * obviously not work correctly on all platforms, since it has hardcoded\n-       * values that may overflow ints on some platforms.\n-       *\n        * N1688[4.19] modifies this as follows.\n        * If @p __value == 0, sets value to 19780503.  In any case, with a linear\n        * congruential generator lcg(i) having parameters @f$ m_{lcg} =\n@@ -854,12 +877,209 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n         seed(_Gen& __g, false_type);\n \n     private:\n-      int         _M_p;\n-      result_type _M_x[long_lag];\n-      result_type _M_carry;\n+      typedef typename _To_Unsigned_Type<_IntType>::_Type _UIntType;\n+\n+      _UIntType  _M_x[long_lag];\n+      _UIntType  _M_carry;\n+      int        _M_p;\n     };\n \n \n+  /**\n+   * @brief The Marsaglia-Zaman generator (floats version).\n+   *\n+   * @if maint\n+   * @var _M_x     The state of the generator.  This is a ring buffer.\n+   * @var _M_carry The carry.\n+   * @var _M_p     Current index of x(i - r).\n+   * @var _M_npows Precomputed negative powers of 2.   \n+   * @endif\n+   */\n+  template<typename _RealType, int __w, int __s, int __r>\n+    class subtract_with_carry_01;\n+\n+  template<typename _RealType, int __w, int __s, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const subtract_with_carry_01<_RealType, __w, __s, __r>& __x);\n+\n+  template<typename _RealType, int __w, int __s, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       subtract_with_carry_01<_RealType, __w, __s, __r>& __x);\n+\n+  template<typename _RealType, int __w, int __s, int __r>\n+    class subtract_with_carry_01\n+    {\n+    public:\n+      /** The type of the generated random value. */\n+      typedef _RealType result_type;\n+      \n+      // parameter values\n+      static const int      word_size = __w;\n+      static const int      long_lag  = __r;\n+      static const int      short_lag = __s;\n+\n+    public:\n+      /**\n+       * Constructs a default-initialized % subtract_with_carry_01 random\n+       * number generator.\n+       */\n+      subtract_with_carry_01()\n+      { this->seed(); }\n+\n+      /**\n+       * Constructs an explicitly seeded % subtract_with_carry_01 random number\n+       * generator.\n+       */\n+      explicit\n+      subtract_with_carry_01(unsigned long __value)\n+      { this->seed(__value); }\n+\n+      /**\n+       * Constructs a % subtract_with_carry_01 random number generator engine\n+       * seeded from the generator function @p __g.\n+       *\n+       * @param __g The seed generator function.\n+       */\n+      template<class _Gen>\n+        subtract_with_carry_01(_Gen& __g)\n+        { this->seed(__g); }\n+\n+      /**\n+       * Seeds the initial state @f$ x_0 @f$ of the random number generator.\n+       */\n+      void\n+      seed(unsigned long __value = 19780503);\n+\n+      /**\n+       * Seeds the initial state @f$ x_0 @f$ of the % subtract_with_carry_01\n+       * random number generator.\n+       */\n+      template<class _Gen>\n+        void\n+        seed(_Gen& __g)\n+        { seed(__g, typename is_fundamental<_Gen>::type()); }\n+\n+      /**\n+       * Gets the minimum value of the range of random floats\n+       * returned by this generator.\n+       */\n+      result_type\n+      min() const\n+      { return 0.0; }\n+\n+      /**\n+       * Gets the maximum value of the range of random floats\n+       * returned by this generator.\n+       */\n+      result_type\n+      max() const\n+      { return 1.0; }\n+\n+      /**\n+       * Gets the next random number in the sequence.\n+       */\n+      result_type\n+      operator()();\n+\n+      /**\n+       * Compares two % subtract_with_carry_01 random number generator objects\n+       * of the same type for equality.\n+       *\n+       * @param __lhs A % subtract_with_carry_01 random number generator object.\n+       * @param __rhs Another % subtract_with_carry_01 random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are equal, false otherwise.\n+       */\n+      friend bool\n+      operator==(const subtract_with_carry_01& __lhs,\n+\t\t const subtract_with_carry_01& __rhs)\n+      {\n+\tfor (int __i = 0; __i < long_lag; ++__i)\n+\t  if (!std::equal(__lhs._M_x[__i], __lhs._M_x[__i] + __n,\n+\t\t\t  __rhs._M_x[__i]))\n+\t    return false;\n+\treturn true;\n+      }\n+\n+      /**\n+       * Compares two % subtract_with_carry_01 random number generator objects\n+       * of the same type for inequality.\n+       *\n+       * @param __lhs A % subtract_with_carry_01 random number generator object.\n+       * @param __rhs Another % subtract_with_carry_01 random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are not equal, false otherwise.\n+       */\n+      friend bool\n+      operator!=(const subtract_with_carry_01& __lhs,\n+\t\t const subtract_with_carry_01& __rhs)\n+      { return !(__lhs == __rhs); }\n+\n+      /**\n+       * Inserts the current state of a % subtract_with_carry_01 random number\n+       * generator engine @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A % subtract_with_carry_01 random number generator engine.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, int __w1, int __s1, int __r1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const subtract_with_carry_01<_RealType1, __w1, __s1,\n+\t\t   __r1>& __x);\n+\n+      /**\n+       * Extracts the current state of a % subtract_with_carry_01 random number\n+       * generator engine @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A % subtract_with_carry_01 random number generator engine.\n+       *\n+       * @returns The input stream with the state of @p __x extracted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, int __w1, int __s1, int __r1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   subtract_with_carry_01<_RealType1, __w1, __s1, __r1>& __x);\n+\n+    private:\n+      template<class _Gen>\n+        void\n+        seed(_Gen& __g, true_type)\n+        { return seed(static_cast<unsigned long>(__g)); }\n+\n+      template<class _Gen>\n+        void\n+        seed(_Gen& __g, false_type);\n+\n+    private:\n+      static const int __n = (__w + 31) / 32;\n+\n+      _UInt32Type  _M_x[long_lag][__n];\n+      _RealType    _M_npows[__n];\n+      _UInt32Type  _M_carry;\n+      int          _M_p;\n+    };\n+\n+  typedef subtract_with_carry_01<float, 24, 10, 24>   ranlux_base_01;\n+\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 508. Bad parameters for ranlux64_base_01.\n+  typedef subtract_with_carry_01<double, 48, 5, 12> ranlux64_base_01;  \n+\n+\n   /**\n    * Produces random numbers from some base engine by discarding blocks of\n    * data.\n@@ -927,7 +1147,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       : _M_b(__s), _M_n(0) { }\n \n       /**\n-       * Generator constructs a %discard_block engine.\n+       * Generator construct a %discard_block engine.\n        *\n        * @param __g A seed generator function.\n        */\n@@ -1056,7 +1276,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * James's luxury-level-3 integer adaptation of Luescher's generator.\n    */\n   typedef discard_block<\n-    subtract_with_carry<unsigned long, (1 << 24), 10, 24>,\n+    subtract_with_carry<unsigned long, (1UL << 24), 10, 24>,\n       223,\n       24\n       > ranlux3;\n@@ -1065,11 +1285,23 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * James's luxury-level-4 integer adaptation of Luescher's generator.\n    */\n   typedef discard_block<\n-    subtract_with_carry<unsigned long, (1 << 24), 10, 24>,\n+    subtract_with_carry<unsigned long, (1UL << 24), 10, 24>,\n       389,\n       24\n       > ranlux4;\n \n+  typedef discard_block<\n+    subtract_with_carry_01<float, 24, 10, 24>,\n+      223,\n+      24\n+      > ranlux3_01;\n+\n+  typedef discard_block<\n+    subtract_with_carry_01<float, 24, 10, 24>,\n+      389,\n+      24\n+      > ranlux4_01;\n+\n \n   /**\n    * A random number generator adaptor class that combines two random number\n@@ -1863,14 +2095,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       // NB: Unused when _GLIBCXX_USE_C99_MATH_TR1 is undefined.\n       normal_distribution<_RealType> _M_nd;\n \n-      _IntType  _M_t;\n-      _RealType _M_p;\n-\n       _RealType _M_q;\n #if _GLIBCXX_USE_C99_MATH_TR1\n       _RealType _M_d1, _M_d2, _M_s1, _M_s2, _M_c,\n \t        _M_a1, _M_a123, _M_s, _M_lf, _M_lp1p;\n #endif\n+      _RealType _M_p;\n+      _IntType  _M_t;\n+\n       bool      _M_easy;\n     };\n "}, {"sha": "2880aad580e762d3ccb2da5ced837f0e232aa895", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 137, "deletions": 37, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -32,7 +32,7 @@ namespace std\n _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n   /*\n-   * Implementation-space details.\n+   * (Further) implementation-space details.\n    */\n   namespace\n   {\n@@ -101,29 +101,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \tstatic const std::streamsize __value =\n \t  2 + std::numeric_limits<_RealType>::digits * 3010/10000;\n       };\n-\n-    template<typename _ValueT>\n-      struct _To_Unsigned_Type\n-      { typedef _ValueT _Type; };\n-\n-    template<>\n-      struct _To_Unsigned_Type<short>\n-      { typedef unsigned short _Type; };\n-\n-    template<>\n-      struct _To_Unsigned_Type<int>\n-      { typedef unsigned int _Type; };\n-\n-    template<>\n-      struct _To_Unsigned_Type<long>\n-      { typedef unsigned long _Type; };\n-\n-#ifdef _GLIBCXX_USE_LONG_LONG\n-    template<>\n-      struct _To_Unsigned_Type<long long>\n-      { typedef unsigned long long _Type; };\n-#endif\n-\n   } // anonymous namespace\n \n \n@@ -376,7 +353,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t__lcg(__value);\n \n       for (int __i = 0; __i < long_lag; ++__i)\n-\t_M_x[__i] = __mod<_IntType, 1, 0, modulus>(__lcg());\n+\t_M_x[__i] = __mod<_UIntType, 1, 0, modulus>(__lcg());\n \n       _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n       _M_p = 0;\n@@ -388,22 +365,15 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       subtract_with_carry<_IntType, __m, __s, __r>::\n       seed(_Gen& __gen, false_type)\n       {\n-\tconst int __n = (std::numeric_limits<_IntType>::digits + 31) / 32;\n-\n-\ttypedef typename _Select<(sizeof(unsigned) == 4),\n-\t  unsigned, unsigned long>::_Type _UInt32Type;\n-\n-\ttypedef typename _To_Unsigned_Type<_IntType>::_Type\n-\t  _UIntType;\n+\tconst int __n = (std::numeric_limits<_UIntType>::digits + 31) / 32;\n \n \tfor (int __i = 0; __i < long_lag; ++__i)\n \t  {\n \t    _UIntType __tmp = 0;\n \t    _UIntType __factor = 1;\n \t    for (int __j = 0; __j < __n; ++__j)\n \t      {\n-\t\t__tmp += (__mod<_UInt32Type, 1, 0, 0>(__gen())\n-\t\t\t  * __factor);\n+\t\t__tmp += __mod<_UInt32Type, 1, 0, 0>(__gen()) * __factor;\n \t\t__factor *= _Shift<_UIntType, 32>::__value;\n \t      }\n \t    _M_x[__i] = __mod<_UIntType, 1, 0, modulus>(__tmp);\n@@ -423,7 +393,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t__ps += long_lag;\n \n       // Calculate new x(i) without overflow or division.\n-      _IntType __xi;\n+      // NB: Thanks to the requirements for _IntType, _M_x[_M_p] + _M_carry\n+      // cannot overflow.\n+      _UIntType __xi;\n       if (_M_x[__ps] >= _M_x[_M_p] + _M_carry)\n \t{\n \t  __xi = _M_x[__ps] - _M_x[_M_p] - _M_carry;\n@@ -434,10 +406,10 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t  __xi = modulus - _M_x[_M_p] - _M_carry + _M_x[__ps];\n \t  _M_carry = 1;\n \t}\n-      _M_x[_M_p++] = __xi;\n+      _M_x[_M_p] = __xi;\n \n       // Adjust current index to loop around in ring buffer.\n-      if (_M_p >= long_lag)\n+      if (++_M_p >= long_lag)\n \t_M_p = 0;\n \n       return __xi;\n@@ -483,6 +455,134 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     }\n \n \n+  template<typename _RealType, int __w, int __s, int __r>\n+    void\n+    subtract_with_carry_01<_RealType, __w, __s, __r>::\n+    seed(unsigned long __value)\n+    {\n+      if (__value == 0)\n+\t__value = 19780503;\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 512. Seeding subtract_with_carry_01 from a single unsigned long.\n+      std::tr1::linear_congruential<unsigned long, 40014, 0, 2147483563>\n+\t__lcg(__value);\n+\n+      this->seed(__lcg);\n+    }\n+\n+  template<typename _RealType, int __w, int __s, int __r>\n+    template<class _Gen>\n+      void\n+      subtract_with_carry_01<_RealType, __w, __s, __r>::\n+      seed(_Gen& __gen, false_type)\n+      {\n+\tfor (int __i = 0; __i < long_lag; ++__i)\n+\t  {\n+\t    for (int __j = 0; __j < __n - 1; ++__j)\n+\t      _M_x[__i][__j] = __mod<_UInt32Type, 1, 0, 0>(__gen());\n+\t    _M_x[__i][__n - 1] = __mod<_UInt32Type, 1, 0,\n+\t      _Shift<_UInt32Type, __w % 32>::__value>(__gen());\n+\t  }\n+\t_M_carry = (_M_x[long_lag - 1][0] == 0) ? 1 : 0;\n+\t_M_p = 0;\n+\n+\t// Initialize the array holding the negative powers of 2.\n+\tfor (int __j = 0; __j < __n; ++__j)\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\t  _M_npows[__j] = std::tr1::ldexp(_RealType(1), -__w + __j * 32);\n+#else\n+\t  _M_npows[__j] = std::pow(_RealType(2), -__w + __j * 32);\n+#endif\n+      }\n+\n+  template<typename _RealType, int __w, int __s, int __r>\n+    typename subtract_with_carry_01<_RealType, __w, __s, __r>::result_type\n+    subtract_with_carry_01<_RealType, __w, __s, __r>::\n+    operator()()\n+    {\n+      // Derive short lag index from current index.\n+      int __ps = _M_p - short_lag;\n+      if (__ps < 0)\n+\t__ps += long_lag;\n+\n+      _UInt32Type __new_carry;\n+      for (int __j = 0; __j < __n - 1; ++__j)\n+\t{\n+\t  if (_M_x[__ps][__j] > _M_x[_M_p][__j]\n+\t      || (_M_x[__ps][__j] == _M_x[_M_p][__j] && _M_carry == 0))\n+\t    __new_carry = 0;\n+\t  else\n+\t    __new_carry = 1;\n+\n+\t  _M_x[_M_p][__j] = _M_x[__ps][__j] - _M_x[_M_p][__j] - _M_carry;\n+\t  _M_carry = __new_carry;\n+\t}\n+\n+      if (_M_x[__ps][__n - 1] > _M_x[_M_p][__n - 1]\n+\t  || (_M_x[__ps][__n - 1] == _M_x[_M_p][__n - 1] && _M_carry == 0))\n+\t__new_carry = 0;\n+      else\n+\t__new_carry = 1;\n+      \n+      _M_x[_M_p][__n - 1] = __mod<_UInt32Type, 1, 0,\n+\t_Shift<_UInt32Type, __w % 32>::__value>\n+\t(_M_x[__ps][__n - 1] - _M_x[_M_p][__n - 1] - _M_carry);\n+      _M_carry = __new_carry;\n+\n+      result_type __ret = 0.0;\n+      for (int __j = 0; __j < __n; ++__j)\n+\t__ret += _M_x[_M_p][__j] * _M_npows[__j];\n+\n+      // Adjust current index to loop around in ring buffer.\n+      if (++_M_p >= long_lag)\n+\t_M_p = 0;\n+\n+      return __ret;\n+    }\n+\n+  template<typename _RealType, int __w, int __s, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const subtract_with_carry_01<_RealType, __w, __s, __r>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(std::ios_base::dec | std::ios_base::fixed\n+\t\t | std::ios_base::left);\n+      __os.fill(__space);\n+\n+      for (int __i = 0; __i < __r; ++__i)\n+\tfor (int __j = 0; __j < __x.__n; ++__j)\n+\t  __os << __x._M_x[__i][__j] << __space;\n+      __os << __x._M_carry;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, int __w, int __s, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       subtract_with_carry_01<_RealType, __w, __s, __r>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(std::ios_base::dec | std::ios_base::skipws);\n+\n+      for (int __i = 0; __i < __r; ++__i)\n+\tfor (int __j = 0; __j < __x.__n; ++__j)\n+\t  __is >> __x._M_x[__i][__j];\n+      __is >> __x._M_carry;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n   template<class _UniformRandomNumberGenerator, int __p, int __r>\n     typename discard_block<_UniformRandomNumberGenerator,\n \t\t\t   __p, __r>::result_type"}, {"sha": "fc9cb3dd7a640311010d4a4604b6e6a0302f7a4f", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/ranlux3_01.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux3_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux3_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux3_01.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -0,0 +1,48 @@\n+// 2006-08-22  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.5 Engines with predefined parameters\n+// 5.1.5 [3]\n+\n+#include <iostream>\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::tr1::ranlux3_01 a;\n+  for (int i = 0; i < 9999; ++i)\n+    a();\n+\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+  VERIFY( a() == 5957620 * std::tr1::ldexp(float(1), -24) );\n+#else\n+  VERIFY( a() == 5957620 * std::pow(float(2), -24) );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "861edd4c101857a116b6b49eb8e8c9c91a6bad95", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/ranlux4_01.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux4_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux4_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux4_01.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -0,0 +1,47 @@\n+// 2006-08-22  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.5 Engines with predefined parameters\n+// 5.1.5 [3]\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::tr1::ranlux4_01 a;\n+  for (int i = 0; i < 9999; ++i)\n+    a();\n+\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+  VERIFY( a() == 8587295 * std::tr1::ldexp(float(1), -24) );\n+#else\n+  VERIFY( a() == 8587295 * std::pow(float(2), -24) );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "466354124fcf4abe36964e19c21905ac52b1e610", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/cons/default.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fdefault.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -30,7 +30,7 @@ test01()\n   bool test __attribute__((unused)) = true;\n   using namespace std::tr1;\n \n-  subtract_with_carry<unsigned long, (1 << 24), 10, 24> x;\n+  subtract_with_carry<unsigned long, (1UL << 24), 10, 24> x;\n   VERIFY( x.min() == 0 );\n   VERIFY( x.max() == ((1<<24)-1) );\n   VERIFY( x() == 15039276 );"}, {"sha": "cacde1b8e36d58a51bdafdb43a90c915c7efaf9b", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/cons/gen1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fgen1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fgen1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fgen1.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -38,7 +38,7 @@ test01()\n   bool test __attribute__((unused)) = true;\n   using namespace std::tr1;\n \n-  subtract_with_carry<unsigned long, (1 << 24), 10, 24> x(gen);\n+  subtract_with_carry<unsigned long, (1UL << 24), 10, 24> x(gen);\n   VERIFY( x.min() == 0 );\n   VERIFY( x.max() == ((1 << 24) - 1) );\n }"}, {"sha": "c17452c19a2c027877476e9391c4d0c74a88d8e5", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/cons/seed1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed1.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -30,7 +30,7 @@ test01()\n   using namespace std::tr1;\n \n   unsigned long seed = 2;\n-  subtract_with_carry<unsigned long, (1 << 24), 10, 24> x(seed);\n+  subtract_with_carry<unsigned long, (1UL << 24), 10, 24> x(seed);\n }\n \n int main()"}, {"sha": "f0ab7ef6cea1c5d11b21a07a916e80c03172fff1", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/cons/seed2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed2.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -31,7 +31,7 @@ test01()\n   using namespace std::tr1;\n \n   double seed = 2.0;\n-  subtract_with_carry<unsigned long, (1 << 24), 10, 24> x(seed);\n+  subtract_with_carry<unsigned long, (1UL << 24), 10, 24> x(seed);\n }\n \n int main()"}, {"sha": "f59fd00287f4f8a7b47802c40f4b68de04921dd9", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/operators/equal.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fequal.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -30,8 +30,8 @@ test01()\n   bool test __attribute__((unused)) = true;\n   using namespace std::tr1;\n \n-  subtract_with_carry<unsigned long, (1 << 24), 10, 24> u;\n-  subtract_with_carry<unsigned long, (1 << 24), 10, 24> v;\n+  subtract_with_carry<unsigned long, (1UL << 24), 10, 24> u;\n+  subtract_with_carry<unsigned long, (1UL << 24), 10, 24> v;\n \n   VERIFY( u == v );\n   "}, {"sha": "4b4efe0aff8bb3b1ad71645d8370c1f2f3af5435", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/operators/not_equal.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fnot_equal.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -30,8 +30,8 @@ test01()\n   bool test __attribute__((unused)) = true;\n   using namespace std::tr1;\n \n-  subtract_with_carry<unsigned long, (1 << 24), 10, 24> u(1);\n-  subtract_with_carry<unsigned long, (1 << 24), 10, 24> v(2);\n+  subtract_with_carry<unsigned long, (1UL << 24), 10, 24> u(1);\n+  subtract_with_carry<unsigned long, (1UL << 24), 10, 24> v(2);\n   \n   VERIFY( u != v );\n }"}, {"sha": "34badc14946db6bbbb7ac3df43738bab029aa8ac", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/operators/serialize.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fserialize.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -32,8 +32,8 @@ test01()\n   using std::tr1::subtract_with_carry;\n \n   std::stringstream str;\n-  subtract_with_carry<unsigned long, (1 << 24), 10, 24> u;\n-  subtract_with_carry<unsigned long, (1 << 24), 10, 24> v;\n+  subtract_with_carry<unsigned long, (1UL << 24), 10, 24> u;\n+  subtract_with_carry<unsigned long, (1UL << 24), 10, 24> v;\n   \n   u(); // advance\n   str << u;"}, {"sha": "e02b5cc13c587dbfdb421fc4c71718bd7de0ec6b", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/requirements/typedefs.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Frequirements%2Ftypedefs.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -28,7 +28,8 @@\n void\n test01()\n {\n-  typedef std::tr1::subtract_with_carry<long, 8, 2, 4> test_type;\n+  typedef std::tr1::subtract_with_carry<unsigned long, (1UL << 24), 10, 24>\n+    test_type;\n \n   typedef test_type::result_type result_type;\n }"}, {"sha": "adf0c1ac60d4643ed6ae2a0e3af31a19456338dd", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/cons/default.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fdefault.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -0,0 +1,48 @@\n+// 2006-08-22  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.4 class template subtract_with_carry_01 [tr.rand.eng.sub1]\n+// 5.1.1 Table 16 line 1 default ctor\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+  subtract_with_carry_01<float, 24, 10, 24> x;\n+  VERIFY( x.min() == 0.0 );\n+  VERIFY( x.max() == 1.0 );\n+\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+  VERIFY( x() == 15039276 * std::tr1::ldexp(float(1), -24) );\n+#else\n+  VERIFY( x() == 15039276 * std::pow(float(2), -24) );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0a95397c51871f23cfc69f0665326c960158402c", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/cons/gen1.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fgen1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fgen1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fgen1.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -0,0 +1,50 @@\n+// 2006-08-22  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.4 class template subtract_with_carry_01 [tr.rand.eng.sub1]\n+// 5.1.1 Table 16 line 3 Gen ctor\n+\n+#include <ctime>\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+// a not untypical initialization function\n+unsigned long\n+gen()\n+{\n+  return std::time(0);\n+}\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+  subtract_with_carry_01<float, 24, 10, 24> x(gen);\n+  VERIFY( x.min() == 0.0 );\n+  VERIFY( x.max() == 1.0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "62da61705a8f4d016215bb83cc3adee569b826cb", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/cons/seed1.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fseed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fseed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fseed1.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -0,0 +1,40 @@\n+// 2006-08-22  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.4 class template subtract_with_carry_01 [tr.rand.eng.sub1]\n+// 5.1.1 Table 16 line 2 seed ctor\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  unsigned long seed = 2;\n+  subtract_with_carry_01<float, 24, 10, 24> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5efb6ba1152c7fd600a6e4cd8c45268f81ca0313", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/cons/seed2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fseed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fseed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fseed2.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -0,0 +1,41 @@\n+// 2006-08-22  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.4 class template subtract_with_carry_01 [tr.rand.eng.sub1]\n+// 5.1.1 Table 16 line 2 seed ctor\n+// 5.1.1 (4) point 2: Gen is a fundamental type.\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  double seed = 2.0;\n+  subtract_with_carry_01<float, 24, 10, 24> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "509a91cd8fe48d41911c597b6336498be0347830", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/operators/equal.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fequal.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -0,0 +1,50 @@\n+// 2006-08-22  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.4 class template subtract_with_carry_01 [tr.rand.eng.sub1]\n+// 5.1.1 Table 16\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+  subtract_with_carry_01<float, 24, 10, 24> u;\n+  subtract_with_carry_01<float, 24, 10, 24> v;\n+\n+  VERIFY( u == v );\n+  \n+  for (int i = 0; i < 100; ++i)\n+    {\n+      u();\n+      v();\n+    }\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6bf7b2cee7ea4c4b9e972a51b2ec47d6ad562f6d", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/operators/not_equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fnot_equal.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -0,0 +1,43 @@\n+// 2006-08-22  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.4 class template subtract_with_carry_01 [tr.rand.eng.sub1]\n+// 5.1.1 Table 16\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+  subtract_with_carry_01<float, 24, 10, 24> u(1);\n+  subtract_with_carry_01<float, 24, 10, 24> v(2);\n+  \n+  VERIFY( u != v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "23d9004f3d2ffc11c60ceef7f8527c1838e4e7d8", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/operators/serialize.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fserialize.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -0,0 +1,51 @@\n+// 2006-08-22  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.4 class template subtract_with_carry_01 [tr.rand.eng.sub1]\n+// 5.1.1 Table 16\n+\n+#include <sstream>\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::subtract_with_carry_01;\n+\n+  std::stringstream str;\n+  subtract_with_carry_01<float, 24, 10, 24> u;\n+  subtract_with_carry_01<float, 24, 10, 24> v;\n+  \n+  u(); // advance\n+  str << u;\n+  \n+  VERIFY( u != v );\n+  \n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "21f91e5290011d0ca49da634b9f40b8b859d653a", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/requirements/typedefs.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa53350c3ba103d6728b2ecd160f41aebb6f68a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Frequirements%2Ftypedefs.cc?ref=9aa53350c3ba103d6728b2ecd160f41aebb6f68a", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+//\n+// 2006-08-22  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.4 Class template subtract_with_carry_01\n+// 5.1.1 [1] Table 15\n+\n+#include <tr1/random>\n+\n+void\n+test01()\n+{\n+  typedef std::tr1::subtract_with_carry_01<float, 24, 10, 24> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}]}