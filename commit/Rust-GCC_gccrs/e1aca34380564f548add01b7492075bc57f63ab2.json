{"sha": "e1aca34380564f548add01b7492075bc57f63ab2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFhY2EzNDM4MDU2NGY1NDhhZGQwMWI3NDkyMDc1YmM1N2Y2M2FiMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-22T15:13:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-22T15:13:23Z"}, "message": "[multiple changes]\n\n2009-07-22  Ed Falis  <falis@adacore.com>\n\n\t* s-vxwext-kernel.adb, s-vxwext-kernel.ads: Replace use of taskStop\n\twith taskSuspend.\n\n2009-07-22  Arnaud Charlet  <charlet@adacore.com>\n\n\t* adadecode.c: Make this file compilable outside of GCC.\n\n2009-07-22  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-socket.adb, g-socket.ads (Check_Selector): Make sure that\n\t(partially) default-initialized socket sets are handled properly by\n\tclearing their Set component.\n\n2009-07-22  Bob Duff  <duff@adacore.com>\n\n\t* gnat_ugn.texi: Clarify the -gnatVx (validity checking) switches.\n\nFrom-SVN: r149939", "tree": {"sha": "65d7f0e739dcdf60e4b2300d57a90316c6f89435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65d7f0e739dcdf60e4b2300d57a90316c6f89435"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1aca34380564f548add01b7492075bc57f63ab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1aca34380564f548add01b7492075bc57f63ab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1aca34380564f548add01b7492075bc57f63ab2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1aca34380564f548add01b7492075bc57f63ab2/comments", "author": null, "committer": null, "parents": [{"sha": "74462a6a0cf7e28d57e83bd65484ade52316665a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74462a6a0cf7e28d57e83bd65484ade52316665a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74462a6a0cf7e28d57e83bd65484ade52316665a"}], "stats": {"total": 156, "additions": 109, "deletions": 47}, "files": [{"sha": "2b9884461c1ddb0c224f974ff3b5f7e3cf268804", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1aca34380564f548add01b7492075bc57f63ab2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1aca34380564f548add01b7492075bc57f63ab2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e1aca34380564f548add01b7492075bc57f63ab2", "patch": "@@ -1,3 +1,22 @@\n+2009-07-22  Ed Falis  <falis@adacore.com>\n+\n+\t* s-vxwext-kernel.adb, s-vxwext-kernel.ads: Replace use of taskStop\n+\twith taskSuspend.\n+\n+2009-07-22  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* adadecode.c: Make this file compilable outside of GCC.\n+\n+2009-07-22  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-socket.adb, g-socket.ads (Check_Selector): Make sure that\n+\t(partially) default-initialized socket sets are handled properly by\n+\tclearing their Set component.\n+\n+2009-07-22  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat_ugn.texi: Clarify the -gnatVx (validity checking) switches.\n+\n 2009-07-22  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_ugn.texi: Minor reformatting"}, {"sha": "86216fcfe7d0cc9407ac82d3ad131377beac42c8", "filename": "gcc/ada/adadecode.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1aca34380564f548add01b7492075bc57f63ab2/gcc%2Fada%2Fadadecode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1aca34380564f548add01b7492075bc57f63ab2/gcc%2Fada%2Fadadecode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadadecode.c?ref=e1aca34380564f548add01b7492075bc57f63ab2", "patch": "@@ -33,6 +33,7 @@\n #include \"config.h\"\n #include \"system.h\"\n #else\n+#include <string.h>\n #include <stdio.h>\n #include <ctype.h>\n #define ISDIGIT(c) isdigit(c)\n@@ -324,6 +325,7 @@ __gnat_decode (const char *coded_name, char *ada_name, int verbose)\n     }\n }\n \n+#ifdef IN_GCC\n char *\n ada_demangle (const char *coded_name)\n {\n@@ -332,6 +334,7 @@ ada_demangle (const char *coded_name)\n   __gnat_decode (coded_name, ada_name, 0);\n   return xstrdup (ada_name);\n }\n+#endif\n \n void\n get_encoding (const char *coded_name, char *encoding)"}, {"sha": "c002054395c0b6d1cd14040ec6391a7b30c6d700", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1aca34380564f548add01b7492075bc57f63ab2/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1aca34380564f548add01b7492075bc57f63ab2/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=e1aca34380564f548add01b7492075bc57f63ab2", "patch": "@@ -56,10 +56,6 @@ package body GNAT.Sockets is\n \n    ENOERROR : constant := 0;\n \n-   Empty_Socket_Set : Socket_Set_Type;\n-   --  Variable set in Initialize, and then used internally to provide an\n-   --  initial value for Socket_Set_Type objects.\n-\n    Netdb_Buffer_Size : constant := SOSC.Need_Netdb_Buffer * 1024;\n    --  The network database functions gethostbyname, gethostbyaddr,\n    --  getservbyname and getservbyport can either be guaranteed task safe by\n@@ -264,6 +260,11 @@ package body GNAT.Sockets is\n    procedure Initialize (X : in out Sockets_Library_Controller);\n    procedure Finalize   (X : in out Sockets_Library_Controller);\n \n+   procedure Normalize_Empty_Socket_Set (S : in out Socket_Set_Type);\n+   --  If S is the empty set (detected by Last = No_Socket), make sure its\n+   --  fd_set component is actually cleared. Note that the case where it is\n+   --  not can occur for an uninitialized Socket_Set_Type object.\n+\n    ---------\n    -- \"+\" --\n    ---------\n@@ -452,7 +453,7 @@ package body GNAT.Sockets is\n       Status       : out Selector_Status;\n       Timeout      : Selector_Duration := Forever)\n    is\n-      E_Socket_Set : Socket_Set_Type := Empty_Socket_Set;\n+      E_Socket_Set : Socket_Set_Type;\n    begin\n       Check_Selector\n         (Selector, R_Socket_Set, W_Socket_Set, E_Socket_Set, Status, Timeout);\n@@ -496,6 +497,12 @@ package body GNAT.Sockets is\n                                     C.int (W_Socket_Set.Last)),\n                                     C.int (E_Socket_Set.Last));\n \n+      --  Zero out fd_set for empty Socket_Set_Type objects\n+\n+      Normalize_Empty_Socket_Set (R_Socket_Set);\n+      Normalize_Empty_Socket_Set (W_Socket_Set);\n+      Normalize_Empty_Socket_Set (E_Socket_Set);\n+\n       Res :=\n         C_Select\n          (Last + 1,\n@@ -705,7 +712,7 @@ package body GNAT.Sockets is\n \n    procedure Copy\n      (Source : Socket_Set_Type;\n-      Target : in out Socket_Set_Type)\n+      Target : out Socket_Set_Type)\n    is\n    begin\n       Target := Source;\n@@ -760,7 +767,7 @@ package body GNAT.Sockets is\n    -- Empty --\n    -----------\n \n-   procedure Empty  (Item : in out Socket_Set_Type) is\n+   procedure Empty (Item : out Socket_Set_Type) is\n    begin\n       Reset_Socket_Set (Item.Set'Access);\n       Item.Last := No_Socket;\n@@ -1282,10 +1289,6 @@ package body GNAT.Sockets is\n       pragma Unreferenced (X);\n \n    begin\n-      --  Initialization operation for the GNAT.Sockets package\n-\n-      Empty_Socket_Set.Last := No_Socket;\n-      Reset_Socket_Set (Empty_Socket_Set.Set'Access);\n       Thin.Initialize;\n    end Initialize;\n \n@@ -1408,6 +1411,17 @@ package body GNAT.Sockets is\n       end if;\n    end Narrow;\n \n+   --------------------------------\n+   -- Normalize_Empty_Socket_Set --\n+   --------------------------------\n+\n+   procedure Normalize_Empty_Socket_Set (S : in out Socket_Set_Type) is\n+   begin\n+      if S.Last = No_Socket then\n+         Reset_Socket_Set (S.Set'Access);\n+      end if;\n+   end Normalize_Empty_Socket_Set;\n+\n    -------------------\n    -- Official_Name --\n    -------------------\n@@ -1445,7 +1459,6 @@ package body GNAT.Sockets is\n \n       R_Fd_Set : Socket_Set_Type;\n       W_Fd_Set : Socket_Set_Type;\n-      --  Socket sets, empty at elaboration\n \n    begin\n       --  Create selector if not provided by the user\n@@ -1470,14 +1483,6 @@ package body GNAT.Sockets is\n \n       Check_Selector (S.all, R_Fd_Set, W_Fd_Set, Status, Timeout);\n \n-      --  Cleanup actions (required in all cases to avoid memory leaks)\n-\n-      if For_Read then\n-         Empty (R_Fd_Set);\n-      else\n-         Empty (W_Fd_Set);\n-      end if;\n-\n       if Selector = null then\n          Close_Selector (S.all);\n       end if;\n@@ -1796,8 +1801,10 @@ package body GNAT.Sockets is\n \n       if Id = Socket_Error_Id then\n          return Resolve_Error (Val);\n+\n       elsif Id = Host_Error_Id then\n          return Resolve_Error (Val, False);\n+\n       else\n          return Cannot_Resolve_Error;\n       end if;"}, {"sha": "a260d903b4c2583d03e00fdaee5d10a2f1b207ba", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1aca34380564f548add01b7492075bc57f63ab2/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1aca34380564f548add01b7492075bc57f63ab2/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=e1aca34380564f548add01b7492075bc57f63ab2", "patch": "@@ -1010,18 +1010,20 @@ package GNAT.Sockets is\n \n    type Socket_Set_Type is limited private;\n    --  This type allows to manipulate sets of sockets. It allows to wait for\n-   --  events on multiple endpoints at one time.\n+   --  events on multiple endpoints at one time. This type has default\n+   --  initialization, and the default value is the empty set.\n+   --\n    --  Note: This type used to contain a pointer to dynamically allocated\n    --  storage, but this is not the case anymore, and no special precautions\n    --  are required to avoid memory leaks.\n \n    procedure Clear (Item : in out Socket_Set_Type; Socket : Socket_Type);\n    --  Remove Socket from Item\n \n-   procedure Copy  (Source : Socket_Set_Type; Target : in out Socket_Set_Type);\n+   procedure Copy (Source : Socket_Set_Type; Target : out Socket_Set_Type);\n    --  Copy Source into Target as Socket_Set_Type is limited private\n \n-   procedure Empty (Item : in out Socket_Set_Type);\n+   procedure Empty (Item : out Socket_Set_Type);\n    --  Remove all Sockets from Item\n \n    procedure Get (Item : in out Socket_Set_Type; Socket : out Socket_Type);\n@@ -1141,7 +1143,12 @@ private\n \n    type Socket_Set_Type is record\n       Last : Socket_Type := No_Socket;\n+      --  Highest socket in set. Last = No_Socket denotes an empty set (which\n+      --  is the default initial value).\n+\n       Set  : aliased Fd_Set;\n+      --  Underlying socket set. Note that the contents of this component is\n+      --  undefined if Last = No_Socket.\n    end record;\n \n    subtype Inet_Addr_Comp_Type is Natural range 0 .. 255;\n@@ -1188,9 +1195,7 @@ private\n \n    subtype Name_Index is Natural range 1 .. Max_Name_Length;\n \n-   type Name_Type\n-     (Length : Name_Index := Max_Name_Length)\n-   is record\n+   type Name_Type (Length : Name_Index := Max_Name_Length) is record\n       Name : String (1 .. Length);\n    end record;\n    --  We need fixed strings to avoid access types in host entry type"}, {"sha": "f5e9ac3906b4ed415bc07a27ce7f0f6a436390b7", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1aca34380564f548add01b7492075bc57f63ab2/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1aca34380564f548add01b7492075bc57f63ab2/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=e1aca34380564f548add01b7492075bc57f63ab2", "patch": "@@ -4084,7 +4084,8 @@ Generate brief messages to @file{stderr} even if verbose mode set.\n \n @item -gnatB\n @cindex @option{-gnatB} (@command{gcc})\n-Assume no invalid (bad) values except for 'Valid attribute use.\n+Assume no invalid (bad) values except for 'Valid attribute use\n+(@pxref{Validity Checking}).\n \n @item -gnatc\n @cindex @option{-gnatc} (@command{gcc})\n@@ -4327,8 +4328,7 @@ Verbose mode. Full error output with source lines to @file{stdout}.\n \n @item -gnatV\n @cindex @option{-gnatV} (@command{gcc})\n-Control level of validity checking. See separate section describing\n-this feature.\n+Control level of validity checking (@pxref{Validity Checking}).\n \n @item ^-gnatw@var{xxx}^/WARNINGS=(@var{option}@r{[},@dots{}@r{]})^\n @cindex @option{^-gnatw^/WARNINGS^} (@command{gcc})\n@@ -4586,7 +4586,7 @@ as warning mode modifiers (see description of @option{-gnatw}).\n @item\n Once a ``V'' appears in the string (that is a use of the @option{-gnatV}\n switch), then all further characters in the switch are interpreted\n-as validity checking options (see description of @option{-gnatV}).\n+as validity checking options (@pxref{Validity Checking}).\n @end ifclear\n @end itemize\n \n@@ -5854,35 +5854,52 @@ file. Note that this doesn't include traceback information.\n @findex Validity Checking\n \n @noindent\n-The Ada Reference Manual has specific requirements for checking\n-for invalid values. In particular, RM 13.9.1 requires that the\n-evaluation of invalid values (for example from unchecked conversions),\n-not result in erroneous execution. In GNAT, the result of such an\n-evaluation in normal default mode is to either use the value\n-unmodified, or to raise Constraint_Error in those cases where use\n-of the unmodified value would cause erroneous execution. The cases\n-where unmodified values might lead to erroneous execution are case\n-statements (where a wild jump might result from an invalid value),\n-and subscripts on the left hand side (where memory corruption could\n-occur as a result of an invalid value).\n+The Ada Reference Manual defines the concept of invalid values (see\n+RM 13.9.1). The primary source of invalid values is uninitialized\n+variables. A scalar variable that is left uninitialized may contain\n+an invalid value; the concept of invalid does not apply to access or\n+composite types.\n+\n+It is an error to read an invalid value, but the RM does not require\n+run-time checks to detect such errors, except for some minimal\n+checking to prevent erroneous execution (i.e. unpredictable\n+behavior). This corresponds to the @option{-gnatVd} switch below,\n+which is the default. For example, by default, if the expression of a\n+case statement is invalid, it will raise Constraint_Error rather than\n+causing a wild jump, and if an array index on the left-hand side of an\n+assignment is invalid, it will raise Constraint_Error rather than\n+overwriting an arbitrary memory location.\n+\n+The @option{-gnatVa} may be used to enable additional validity checks,\n+which are not required by the RM. These checks are often very\n+expensive (which is why the RM does not require them). These checks\n+are useful in tracking down uninitialized variables, but they are\n+not usually recommended for production builds.\n+\n+The other @option{-gnatV^@var{x}^^} switches below allow finer-grained\n+control; you can enable whichever validity checks you desire. However,\n+for most debugging purposes, @option{-gnatVa} is sufficient, and the\n+default @option{-gnatVd} (i.e. standard Ada behavior) is usually\n+sufficient for non-debugging use.\n \n The @option{-gnatB} switch tells the compiler to assume that all\n values are valid (that is, within their declared subtype range)\n except in the context of a use of the Valid attribute. This means\n the compiler can generate more efficient code, since the range\n-of values is better known at compile time.\n+of values is better known at compile time. However, an uninitialized\n+variable can cause wild jumps and memory corruption in this mode.\n \n-The @option{-gnatV^@var{x}^^} switch allows more control over the validity\n-checking mode.\n+The @option{-gnatV^@var{x}^^} switch allows control over the validity\n+checking mode as described below.\n @ifclear vms\n The @code{x} argument is a string of letters that\n indicate validity checks that are performed or not performed in addition\n-to the default checks described above.\n+to the default checks required by Ada as described above.\n @end ifclear\n @ifset vms\n The options allowed for this qualifier\n indicate validity checks that are performed or not performed in addition\n-to the default checks described above.\n+to the default checks required by Ada as described above.\n @end ifset\n \n @table @option"}, {"sha": "d43edf15429360a0c41b773b21c719c560a67486", "filename": "gcc/ada/s-vxwext-kernel.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1aca34380564f548add01b7492075bc57f63ab2/gcc%2Fada%2Fs-vxwext-kernel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1aca34380564f548add01b7492075bc57f63ab2/gcc%2Fada%2Fs-vxwext-kernel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vxwext-kernel.adb?ref=e1aca34380564f548add01b7492075bc57f63ab2", "patch": "@@ -75,4 +75,15 @@ package body System.VxWorks.Ext is\n       return ERROR;\n    end taskCpuAffinitySet;\n \n+   --------------\n+   -- taskStop --\n+   --------------\n+\n+   function Task_Stop (tid : t_id) return int is\n+      function taskStop (tid : t_id) return int;\n+      pragma Import (C, taskStop, \"taskStop\");\n+   begin\n+      return taskStop (tid);\n+   end Task_Stop;\n+\n end System.VxWorks.Ext;"}, {"sha": "e450285ecbcb1e6fa92948c514f1c27984b3ffe4", "filename": "gcc/ada/s-vxwext-kernel.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1aca34380564f548add01b7492075bc57f63ab2/gcc%2Fada%2Fs-vxwext-kernel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1aca34380564f548add01b7492075bc57f63ab2/gcc%2Fada%2Fs-vxwext-kernel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vxwext-kernel.ads?ref=e1aca34380564f548add01b7492075bc57f63ab2", "patch": "@@ -70,7 +70,7 @@ package System.VxWorks.Ext is\n    pragma Import (C, Task_Cont, \"taskCont\");\n \n    function Task_Stop (tid : t_id) return int;\n-   pragma Import (C, Task_Stop, \"taskStop\");\n+   pragma Convention (C, Task_Stop);\n \n    function kill (pid : t_id; sig : int) return int;\n    pragma Import (C, kill, \"kill\");"}]}