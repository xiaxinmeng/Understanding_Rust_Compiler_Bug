{"sha": "53fbaf5abfd0a8f6ad5f214e32e0c44b92727e12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNmYmFmNWFiZmQwYThmNmFkNWYyMTRlMzJlMGM0NGI5MjcyN2UxMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-29T14:08:56Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-29T14:08:56Z"}, "message": "Initial revision\n\nFrom-SVN: r10206", "tree": {"sha": "8ac81d4946f5cdd005debd366e6ad9f009ba3321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ac81d4946f5cdd005debd366e6ad9f009ba3321"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53fbaf5abfd0a8f6ad5f214e32e0c44b92727e12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53fbaf5abfd0a8f6ad5f214e32e0c44b92727e12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53fbaf5abfd0a8f6ad5f214e32e0c44b92727e12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53fbaf5abfd0a8f6ad5f214e32e0c44b92727e12/comments", "author": null, "committer": null, "parents": [{"sha": "e093ee61ed3b107f01d71a837f284ab8267e5bbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e093ee61ed3b107f01d71a837f284ab8267e5bbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e093ee61ed3b107f01d71a837f284ab8267e5bbb"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "6293da64cf20170135f05f783e03a3bdb263381d", "filename": "gcc/config/pdp11/2bsd.h", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53fbaf5abfd0a8f6ad5f214e32e0c44b92727e12/gcc%2Fconfig%2Fpdp11%2F2bsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53fbaf5abfd0a8f6ad5f214e32e0c44b92727e12/gcc%2Fconfig%2Fpdp11%2F2bsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2F2bsd.h?ref=53fbaf5abfd0a8f6ad5f214e32e0c44b92727e12", "patch": "@@ -0,0 +1,88 @@\n+/* Definitions of target machine for GNU compiler, for a PDP with 2BSD\n+   Copyright (C) 1995 Free Software Foundation, Inc.\n+   Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 1, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"pdp11/pdp11.h\"\n+\n+/* This macro generates the assembly code for function entry. */\n+#undef FUNCTION_PROLOGUE\n+#define FUNCTION_PROLOGUE(FILE, SIZE) \\\n+do {\t\t\t\t\t\t\t\t\t\\\n+fprintf(FILE, \"\\tjsr\tr5, csv\\n\");\t\t\t\t\t\\\n+if ((SIZE) != 0)\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    fprintf(FILE, \"\\t/*abuse empty parameter slot for locals!*/\\n\");\t\\\n+    if ((SIZE) > 2)\t\t\t\t\t\t\t\\\n+      fprintf(FILE, \"\\tsub $%d, sp\\n\", (SIZE)-2);\t\t\t\\\n+  };\t\t\t\t\t\t\t\t\t\\\n+} while (0)\n+\n+/* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n+   the stack pointer does not matter.  The value is tested only in\n+   functions that have frame pointers.\n+   No definition is equivalent to always zero.  */\n+\n+#undef EXIT_IGNORE_STACK\n+#define EXIT_IGNORE_STACK\t1\n+\n+/* This macro generates the assembly code for function exit,\n+   on machines that need it.  If FUNCTION_EPILOGUE is not defined\n+   then individual return instructions are generated for each\n+   return statement.  Args are same as for FUNCTION_PROLOGUE.\n+*/\n+\n+#undef FUNCTION_EPILOGUE\n+#define FUNCTION_EPILOGUE(FILE, SIZE) \\\n+do {                                                                    \\\n+fprintf(FILE, \"\\t/* SP ignored by cret? */\\n\");     \t\t\t\\\n+fprintf(FILE, \"\\tjmp cret\\n\");                                    \t\\\n+} while (0)\n+\n+#undef INITIAL_FRAME_POINTER_OFFSET  \n+#define INITIAL_FRAME_POINTER_OFFSET(DEPTH_VAR)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int offset, regno;\t\t      \t\t\t\t\\\n+  offset = get_frame_size();\t\t\t\t\t\\\n+  offset = (offset <= 2)? 0: (offset -2);\t\t\t\\\n+  (DEPTH_VAR) = offset+10;\t\t\t\t\t\t\\\n+}   \n+\n+/* Value should be nonzero if functions must have frame pointers.\n+   Zero means the frame pointer need not be set up (and parms\n+   may be accessed via the stack pointer) in functions that seem suitable.\n+   This is computed in `reload', in reload1.c.\n+  */\n+\n+#undef FRAME_POINTER_REQUIRED \n+#define FRAME_POINTER_REQUIRED 1\n+\n+/* Offset within stack frame to start allocating local variables at.\n+   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n+   first local allocated.  Otherwise, it is the offset to the BEGINNING\n+   of the first local allocated.  */\n+#undef STARTING_FRAME_OFFSET\n+#define STARTING_FRAME_OFFSET -8\n+\n+\n+#undef ASM_DECLARE_FUNCTION_NAME\n+#define ASM_DECLARE_FUNCTION_NAME(STREAM, NAME, DECL)\t\\\n+do {\t\t\t\t\t\t\t\\\n+ASM_OUTPUT_LABEL (STREAM, NAME);\t\t\t\\\n+fprintf (STREAM, \"~~%s:\\n\", NAME); \t\t\t\\\n+} while (0)"}]}