{"sha": "871dab3eb671316f422c7f71463f60b410693de2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcxZGFiM2ViNjcxMzE2ZjQyMmM3ZjcxNDYzZjYwYjQxMDY5M2RlMg==", "commit": {"author": {"name": "Bruce Korb", "email": "bkorb@gnu.org", "date": "2003-01-04T21:17:01Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2003-01-04T21:17:01Z"}, "message": "When wrapping files, guard with both the fix name and the file name\n\nFrom-SVN: r60893", "tree": {"sha": "8468a1f3256ba026a11fec3a375c39664a9a67c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8468a1f3256ba026a11fec3a375c39664a9a67c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/871dab3eb671316f422c7f71463f60b410693de2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/871dab3eb671316f422c7f71463f60b410693de2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/871dab3eb671316f422c7f71463f60b410693de2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/871dab3eb671316f422c7f71463f60b410693de2/comments", "author": {"login": "brkorb", "id": 1242936, "node_id": "MDQ6VXNlcjEyNDI5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1242936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brkorb", "html_url": "https://github.com/brkorb", "followers_url": "https://api.github.com/users/brkorb/followers", "following_url": "https://api.github.com/users/brkorb/following{/other_user}", "gists_url": "https://api.github.com/users/brkorb/gists{/gist_id}", "starred_url": "https://api.github.com/users/brkorb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brkorb/subscriptions", "organizations_url": "https://api.github.com/users/brkorb/orgs", "repos_url": "https://api.github.com/users/brkorb/repos", "events_url": "https://api.github.com/users/brkorb/events{/privacy}", "received_events_url": "https://api.github.com/users/brkorb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35d434edd9dcf9eb613c65ad3ed05c73a9a08bcd"}], "stats": {"total": 113, "additions": 57, "deletions": 56}, "files": [{"sha": "3de1fc84ad962788ea7e93ff8e12a98f8c3e1b9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871dab3eb671316f422c7f71463f60b410693de2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871dab3eb671316f422c7f71463f60b410693de2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=871dab3eb671316f422c7f71463f60b410693de2", "patch": "@@ -1,3 +1,8 @@\n+2003-01-04  Bruce Korb  <bkorb@gnu.org>\n+\n+\t* fixinc/fixfixes.c(wrap_fix): the wrapper guard must be a function\n+\tof *both* the file name and the fix name.\n+\n 2002-01-04  John David Anglin  <dave.anglin@nrc.ca>\n \n \t* config.gcc (hppa*64*-*-hpux11*): Define extra_parts.  Don't use"}, {"sha": "9c775b55425666528df5be73a926c9897ba6afd0", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871dab3eb671316f422c7f71463f60b410693de2/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871dab3eb671316f422c7f71463f60b410693de2/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=871dab3eb671316f422c7f71463f60b410693de2", "patch": "@@ -597,47 +597,44 @@ FIX_PROC_HEAD( wrap_fix )\n   tSCC   z_no_wrap_pat[] = \"^#if.*__need_\";\n   static regex_t no_wrapping_re; /* assume zeroed data */\n \n-  char   z_fixname[ 64 ];\n-  tCC*   pz_src  = p_fixd->fix_name;\n-  tCC*   pz_name = z_fixname;\n-  char*  pz_dst  = z_fixname;\n-  int    do_end  = 0;\n-  size_t len     = 0;\n-  IGNORE_ARG(filname);\n+  tCC*   pz_name = NULL;\n \n   if (no_wrapping_re.allocated == 0)\n     compile_re( z_no_wrap_pat, &no_wrapping_re, 0, \"no-wrap pattern\",\n                 \"wrap-fix\" );\n \n-  for (;;) {\n-    char ch = *pz_src++;\n-\n-    if (ch == NUL) {\n-      *pz_dst++ = ch;\n-      break;\n-    } else if (! ISALNUM (ch)) {\n-      *pz_dst++ = '_';\n-    } else {\n-      *pz_dst++ = TOUPPER (ch);\n-    }\n-\n-    if (++len >= sizeof( z_fixname )) {\n-      void* p = xmalloc( len + strlen( pz_src ) + 1 );\n-      memcpy( p, (void*)z_fixname, len );\n-      pz_name = (tCC*)p;\n-      pz_dst  = (char*)pz_name + len;\n-    }\n-  }\n-\n   /*\n    *  IF we do *not* match the no-wrap re, then we have a double negative.\n    *  A double negative means YES.\n    */\n-  if (regexec (&no_wrapping_re, text, 0, NULL, 0) != 0)\n+  if (regexec( &no_wrapping_re, text, 0, NULL, 0 ) != 0)\n     {\n-      printf( \"#ifndef FIXINC_%s_CHECK\\n\", pz_name );\n-      printf( \"#define FIXINC_%s_CHECK 1\\n\\n\", pz_name );\n-      do_end = 1;\n+      /*\n+       *  A single file can get wrapped more than once by different fixes.\n+       *  A single fix can wrap multiple files.  Therefore, guard with\n+       *  *both* the fix name and the file name.\n+       */\n+      size_t ln = strlen( filname ) + strlen( p_fixd->fix_name ) + 14;\n+      char*  pz = xmalloc( ln );\n+      pz_name = pz;\n+      sprintf( pz, \"FIXINC_WRAP_%s-%s\", filname, p_fixd->fix_name );\n+\n+      for (pz += 12; 1; pz++) {\n+        char ch = *pz;\n+\n+        if (ch == NUL)\n+          break;\n+\n+        if (! ISALNUM( ch )) {\n+          *pz = '_';\n+        }\n+        else {\n+          *pz = TOUPPER( ch );\n+        }\n+      }\n+\n+      printf( \"#ifndef %s\\n\", pz_name );\n+      printf( \"#define %s 1\\n\\n\", pz_name );\n     }\n \n   if (p_fixd->patch_args[1] == (tCC*)NULL)\n@@ -650,11 +647,10 @@ FIX_PROC_HEAD( wrap_fix )\n       fputs( p_fixd->patch_args[2], stdout );\n   }\n \n-  if (do_end != 0)\n-    printf( \"\\n#endif  /* FIXINC_%s_CHECK */\\n\", pz_name );\n-\n-  if (pz_name != z_fixname)\n+  if (pz_name != NULL) {\n+    printf( \"\\n#endif  /* %s */\\n\", pz_name );\n     free( (void*)pz_name );\n+  }\n }\n \n "}, {"sha": "2642cbe49c4bf1fe969adb46a2f9f9752f48254a", "filename": "gcc/fixinc/tests/base/assert.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871dab3eb671316f422c7f71463f60b410693de2/gcc%2Ffixinc%2Ftests%2Fbase%2Fassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871dab3eb671316f422c7f71463f60b410693de2/gcc%2Ffixinc%2Ftests%2Fbase%2Fassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fassert.h?ref=871dab3eb671316f422c7f71463f60b410693de2", "patch": "@@ -7,14 +7,14 @@\n     This had to be done to correct non-standard usages in the\n     original, manufacturer supplied header file.  */\n \n-#ifndef FIXINC_BROKEN_ASSERT_STDLIB_CHECK\n-#define FIXINC_BROKEN_ASSERT_STDLIB_CHECK 1\n+#ifndef FIXINC_WRAP_ASSERT_H_BROKEN_ASSERT_STDLIB\n+#define FIXINC_WRAP_ASSERT_H_BROKEN_ASSERT_STDLIB 1\n \n #ifdef __cplusplus\n #include <stdlib.h>\n #endif\n-#ifndef FIXINC_BROKEN_ASSERT_STDIO_CHECK\n-#define FIXINC_BROKEN_ASSERT_STDIO_CHECK 1\n+#ifndef FIXINC_WRAP_ASSERT_H_BROKEN_ASSERT_STDIO\n+#define FIXINC_WRAP_ASSERT_H_BROKEN_ASSERT_STDIO 1\n \n #include <stdio.h>\n \n@@ -38,6 +38,6 @@ extern FILE* stderr;\n extern void exit ( int );\n #endif  /* BROKEN_ASSERT_STDLIB_CHECK */\n \n-#endif  /* FIXINC_BROKEN_ASSERT_STDIO_CHECK */\n+#endif  /* FIXINC_WRAP_ASSERT_H_BROKEN_ASSERT_STDIO */\n \n-#endif  /* FIXINC_BROKEN_ASSERT_STDLIB_CHECK */\n+#endif  /* FIXINC_WRAP_ASSERT_H_BROKEN_ASSERT_STDLIB */"}, {"sha": "dd29057fc54b56eb9a264399b7d6099016cee22c", "filename": "gcc/fixinc/tests/base/math.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871dab3eb671316f422c7f71463f60b410693de2/gcc%2Ffixinc%2Ftests%2Fbase%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871dab3eb671316f422c7f71463f60b410693de2/gcc%2Ffixinc%2Ftests%2Fbase%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fmath.h?ref=871dab3eb671316f422c7f71463f60b410693de2", "patch": "@@ -7,12 +7,12 @@\n     This had to be done to correct non-standard usages in the\n     original, manufacturer supplied header file.  */\n \n-#ifndef FIXINC_SUNOS_MATHERR_DECL_CHECK\n-#define FIXINC_SUNOS_MATHERR_DECL_CHECK 1\n+#ifndef FIXINC_WRAP_MATH_H_SUNOS_MATHERR_DECL\n+#define FIXINC_WRAP_MATH_H_SUNOS_MATHERR_DECL 1\n \n struct exception;\n-#ifndef FIXINC_MATH_EXCEPTION_CHECK\n-#define FIXINC_MATH_EXCEPTION_CHECK 1\n+#ifndef FIXINC_WRAP_MATH_H_MATH_EXCEPTION\n+#define FIXINC_WRAP_MATH_H_MATH_EXCEPTION 1\n \n #ifdef __cplusplus\n #define exception __math_exception\n@@ -122,6 +122,6 @@ extern double atof(const char *__nptr);\n #undef exception\n #endif\n \n-#endif  /* FIXINC_MATH_EXCEPTION_CHECK */\n+#endif  /* FIXINC_WRAP_MATH_H_MATH_EXCEPTION */\n \n-#endif  /* FIXINC_SUNOS_MATHERR_DECL_CHECK */\n+#endif  /* FIXINC_WRAP_MATH_H_SUNOS_MATHERR_DECL */"}, {"sha": "bfa929fb6663dd6bbdc671f853c36dcb34aaf4b8", "filename": "gcc/fixinc/tests/base/stdio.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871dab3eb671316f422c7f71463f60b410693de2/gcc%2Ffixinc%2Ftests%2Fbase%2Fstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871dab3eb671316f422c7f71463f60b410693de2/gcc%2Ffixinc%2Ftests%2Fbase%2Fstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fstdio.h?ref=871dab3eb671316f422c7f71463f60b410693de2", "patch": "@@ -7,8 +7,8 @@\n     This had to be done to correct non-standard usages in the\n     original, manufacturer supplied header file.  */\n \n-#ifndef FIXINC_STDIO_STDARG_H_CHECK\n-#define FIXINC_STDIO_STDARG_H_CHECK 1\n+#ifndef FIXINC_WRAP_STDIO_H_STDIO_STDARG_H\n+#define FIXINC_WRAP_STDIO_H_STDIO_STDARG_H 1\n \n #define __need___va_list\n #include <stdarg.h>\n@@ -80,4 +80,4 @@ extern char *tempnam( const char *, const char *);\n void f (char * __restrict__ x);\n #endif  /* UNICOSMK_RESTRICT_CHECK */\n \n-#endif  /* FIXINC_STDIO_STDARG_H_CHECK */\n+#endif  /* FIXINC_WRAP_STDIO_H_STDIO_STDARG_H */"}, {"sha": "36ca0b4c0f1729548c171a6b381e28fb6210684f", "filename": "gcc/fixinc/tests/base/strings.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871dab3eb671316f422c7f71463f60b410693de2/gcc%2Ffixinc%2Ftests%2Fbase%2Fstrings.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871dab3eb671316f422c7f71463f60b410693de2/gcc%2Ffixinc%2Ftests%2Fbase%2Fstrings.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fstrings.h?ref=871dab3eb671316f422c7f71463f60b410693de2", "patch": "@@ -7,8 +7,8 @@\n     This had to be done to correct non-standard usages in the\n     original, manufacturer supplied header file.  */\n \n-#ifndef FIXINC_ULTRIX_STRINGS_CHECK\n-#define FIXINC_ULTRIX_STRINGS_CHECK 1\n+#ifndef FIXINC_WRAP_STRINGS_H_ULTRIX_STRINGS\n+#define FIXINC_WRAP_STRINGS_H_ULTRIX_STRINGS 1\n \n \n \n@@ -22,4 +22,4 @@\n \n #endif  /* ULTRIX_STRINGS_CHECK */\n \n-#endif  /* FIXINC_ULTRIX_STRINGS_CHECK */\n+#endif  /* FIXINC_WRAP_STRINGS_H_ULTRIX_STRINGS */"}, {"sha": "8fa2fb18c2a5f0dcf65d8edad376e9eb2cbef3be", "filename": "gcc/fixinc/tests/base/sys/mman.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871dab3eb671316f422c7f71463f60b410693de2/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fmman.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871dab3eb671316f422c7f71463f60b410693de2/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fmman.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fmman.h?ref=871dab3eb671316f422c7f71463f60b410693de2", "patch": "@@ -7,8 +7,8 @@\n     This had to be done to correct non-standard usages in the\n     original, manufacturer supplied header file.  */\n \n-#ifndef FIXINC_CXX_UNREADY_CHECK\n-#define FIXINC_CXX_UNREADY_CHECK 1\n+#ifndef FIXINC_WRAP_SYS_MMAN_H_CXX_UNREADY\n+#define FIXINC_WRAP_SYS_MMAN_H_CXX_UNREADY 1\n \n #ifdef __cplusplus\n extern \"C\" {\n@@ -22,4 +22,4 @@ extern void* malloc( size_t );\n }\n #endif\n \n-#endif  /* FIXINC_CXX_UNREADY_CHECK */\n+#endif  /* FIXINC_WRAP_SYS_MMAN_H_CXX_UNREADY */"}]}