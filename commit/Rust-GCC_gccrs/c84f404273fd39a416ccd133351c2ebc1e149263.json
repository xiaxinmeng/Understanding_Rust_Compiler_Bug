{"sha": "c84f404273fd39a416ccd133351c2ebc1e149263", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg0ZjQwNDI3M2ZkMzlhNDE2Y2NkMTMzMzUxYzJlYmMxZTE0OTI2Mw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-11-23T23:18:02Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-11-23T23:18:02Z"}, "message": "i386.md (add<mode>3_carry): Change insn pattern to expander.\n\n        * config/i386/i386.md (add<mode>3_carry): Change insn pattern\n        to expander.\n        (sub<mode>3_carry): Ditto.\n        (x86_mov<mode>cc_0_m1): Ditto.\n        (*add<mode>3_carry): New insn pattern. Use VOIDmode match_operator\n        for ix86_carry_flag_operator operator predicate.\n        (*sub<mode>3_carry): Ditto.\n        (*x86_mov<mode>cc_0_m1): Ditto.\n        (*addsi3_carry_zext): Use VOIDmode match_operator for\n        ix86_carry_flag_operator operator predicate.\n        (*subsi3_carry_zext): Ditto.\n        (*x86_mov<mode>cc_0_m1_s): Ditto.\n        (*x86_mov<mode>cc_0_m1_neg): Ditto.\n        * config/i386/predocates.md (ix86_carry_flag_operator): Do not\n        check operator sub-expressions for FLAGS_REG and const0_rtx.\n        * config/i386/i386.c (*ix86_gen_sub3_carry): Update prototype.\n        (ix86_expand_int_movcc): Update calls to gen_x86_mov{si,di}cc_0_m1.\n        (ix86_expand_int_addcc): Update calls to\n        gen_{add,sub}{qi,hi,si,di}3_carry.  Do not set mode of compare_op.\n        (ix86_expand_strlensi_unroll_1): Update calls to ix86_gen_sub3_carry.\n        Do not set mode of compare operation.\n\nFrom-SVN: r154480", "tree": {"sha": "7910538784945948c823d33036662da20ca864ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7910538784945948c823d33036662da20ca864ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c84f404273fd39a416ccd133351c2ebc1e149263", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c84f404273fd39a416ccd133351c2ebc1e149263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c84f404273fd39a416ccd133351c2ebc1e149263", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c84f404273fd39a416ccd133351c2ebc1e149263/comments", "author": null, "committer": null, "parents": [{"sha": "ecd883d4830ab5300ab1f18d76627990184519df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd883d4830ab5300ab1f18d76627990184519df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecd883d4830ab5300ab1f18d76627990184519df"}], "stats": {"total": 165, "additions": 119, "deletions": 46}, "files": [{"sha": "8ed02bd787e9a17cc6686c06ebc0c19914f6b48f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84f404273fd39a416ccd133351c2ebc1e149263/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84f404273fd39a416ccd133351c2ebc1e149263/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c84f404273fd39a416ccd133351c2ebc1e149263", "patch": "@@ -1,3 +1,27 @@\n+2009-11-24  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (add<mode>3_carry): Change insn pattern\n+\tto expander.\n+\t(sub<mode>3_carry): Ditto.\n+\t(x86_mov<mode>cc_0_m1): Ditto.\n+\t(*add<mode>3_carry): New insn pattern.  Use VOIDmode match_operator\n+\tfor ix86_carry_flag_operator operator predicate.\n+\t(*sub<mode>3_carry): Ditto.\n+\t(*x86_mov<mode>cc_0_m1): Ditto.\n+\t(*addsi3_carry_zext): Use VOIDmode match_operator for\n+\tix86_carry_flag_operator operator predicate.\n+\t(*subsi3_carry_zext): Ditto.\n+\t(*x86_mov<mode>cc_0_m1_s): Ditto.\n+\t(*x86_mov<mode>cc_0_m1_neg): Ditto.\n+\t* config/i386/predocates.md (ix86_carry_flag_operator): Do not\n+\tcheck operator sub-expressions for FLAGS_REG and const0_rtx.\n+\t* config/i386/i386.c (*ix86_gen_sub3_carry): Update prototype.\n+\t(ix86_expand_int_movcc): Update calls to gen_x86_mov{si,di}cc_0_m1.\n+\t(ix86_expand_int_addcc): Update calls to\n+\tgen_{add,sub}{qi,hi,si,di}3_carry.  Do not set mode of compare_op.\n+\t(ix86_expand_strlensi_unroll_1): Update calls to ix86_gen_sub3_carry.\n+\tDo not set mode of compare operation.\n+\n 2009-11-23  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/42151\n@@ -98,8 +122,7 @@\n \t(mips_mulsidi3_gen_fn): Declare new function.\n \t* config/mips/mips.c (mips_mulsidi3_gen_fn): New function.\n \t* config/mips/mips.md (<u>mulsidi3): Change condition to use\n-\tmips_mulsidi3_gen_fn.  Use mips_mulsidi3_gen_fn to generate the\n-\tinsn.\n+\tmips_mulsidi3_gen_fn.  Use mips_mulsidi3_gen_fn to generate the insn.\n \t(<u>mulsidi3_64bit): Don't match for ISA_HAS_DMUL3.\n \t(mulsidi3_64bit_dmul): New define_insn.\n \n@@ -190,7 +213,7 @@\n \t(INT8_TYPE, INT16_TYPE, INT32_TYPE, INT64_TYPE): Define.\n \t(UINT8_TYPE, UINT16_TYPE, UINT32_TYPE, UINT64_TYPE): Define.\n \t(INT_LEAST8_TYPE, INT_LEAST16_TYPE, INT_LEAST32_TYPE,\n-\t(INT_LEAST64_TYPE): Define.\n+\tINT_LEAST64_TYPE): Define.\n \t(UINT_LEAST8_TYPE, UINT_LEAST16_TYPE, UINT_LEAST32_TYPE,\n \tUINT_LEAST64_TYPE): Define.\n \t(INT_FAST8_TYPE, INT_FAST16_TYPE, INT_FAST32_TYPE,\n@@ -210,11 +233,10 @@\n \t* dwarf2out.c (get_context_die): Take TYPE_MAIN_VARIANT.\n \n 2009-11-19  Basile Starynkevitch  <basile@starynkevitch.net>\n-            Rafael Avila de Espindola  <espindola@google.com>\n+\t    Rafael Avila de Espindola  <espindola@google.com>\n \n \t* doc/plugins.texi (Plugin initialization): Added advices for\n-\tretrieving the version of GCC at plugin compilation and loading\n-\ttimes.\n+\tretrieving the version of GCC at plugin compilation and loading times.\n \n 2009-11-19  Basile Starynkevitch  <basile@starynkevitch.net>\n \n@@ -261,11 +283,10 @@\n \n 2009-11-18  Daniel Jacobowitz  <dan@codesourcery.com>\n \n-\t* config/arm/neon-docgen.ml (analyze_shape_elt): Handle\n-\tAlternatives.\n+\t* config/arm/neon-docgen.ml (analyze_shape_elt): Handle alternatives.\n \n 2009-11-18  Paul Brook  <paul@codesourcery.com>\n-\tDaniel Jacobowitz  <dan@codesourcery.com>\n+\t    Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* config/arm/arm.c (FL_ARCH7EM, FL_FOR_ARCH7EM): Define.\n \t(arm_arch7em): New variable.\n@@ -315,14 +336,13 @@\n 2009-11-18  Shujing Zhao  <pearly.zhao@oracle.com>\n \t\n \tPR middle-end/22201\n-\t* params.def (PARAM_INLINE_UNIT_GROWTH)\n-\tPARAM_IPCP_UNIT_GROWTH)\n+\t* params.def (PARAM_INLINE_UNIT_GROWTH, PARAM_IPCP_UNIT_GROWTH)\n \t(PARAM_EARLY_INLINING_INSNS, PARAM_IRA_MAX_LOOPS_NUM)\n \t(PARAM_IRA_MAX_CONFLICT_TABLE_SIZE)\n \t(PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP)\n \t(PARAM_MIN_INSN_TO_PREFETCH_RATIO)\n \t(PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO)\n-\tPARAM_IPA_SRA_PTR_GROWTH_FACTOR): Uppercase the\tfirst letter of the\n+\t(PARAM_IPA_SRA_PTR_GROWTH_FACTOR): Uppercase the first letter of the\n \tdescription string.\n \n 2009-11-18  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "4310e49cfbca612027b3a642ed57b0a501ad40b6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84f404273fd39a416ccd133351c2ebc1e149263/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84f404273fd39a416ccd133351c2ebc1e149263/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c84f404273fd39a416ccd133351c2ebc1e149263", "patch": "@@ -1808,7 +1808,7 @@ static rtx (*ix86_gen_leave) (void);\n static rtx (*ix86_gen_pop1) (rtx);\n static rtx (*ix86_gen_add3) (rtx, rtx, rtx);\n static rtx (*ix86_gen_sub3) (rtx, rtx, rtx);\n-static rtx (*ix86_gen_sub3_carry) (rtx, rtx, rtx, rtx);\n+static rtx (*ix86_gen_sub3_carry) (rtx, rtx, rtx, rtx, rtx);\n static rtx (*ix86_gen_one_cmpl2) (rtx, rtx);\n static rtx (*ix86_gen_monitor) (rtx, rtx, rtx);\n static rtx (*ix86_gen_andsp) (rtx, rtx, rtx);\n@@ -15404,15 +15404,20 @@ ix86_expand_int_movcc (rtx operands[])\n \n           if (!sign_bit_compare_p)\n \t    {\n+\t      rtx flags;\n+\t      rtx (*insn)(rtx, rtx, rtx);\n \t      bool fpcmp = false;\n \n \t      compare_code = GET_CODE (compare_op);\n \n-\t      if (GET_MODE (XEXP (compare_op, 0)) == CCFPmode\n-\t\t  || GET_MODE (XEXP (compare_op, 0)) == CCFPUmode)\n+\t      flags = XEXP (compare_op, 0);\n+\n+\t      if (GET_MODE (flags) == CCFPmode\n+\t\t  || GET_MODE (flags) == CCFPUmode)\n \t\t{\n \t\t  fpcmp = true;\n-\t\t  compare_code = ix86_fp_compare_code_to_integer (compare_code);\n+\t\t  compare_code\n+\t\t    = ix86_fp_compare_code_to_integer (compare_code);\n \t\t}\n \n \t      /* To simplify rest of code, restrict to the GEU case.  */\n@@ -15431,7 +15436,8 @@ ix86_expand_int_movcc (rtx operands[])\n \t\t\t      reverse_condition_maybe_unordered\n \t\t\t        (GET_CODE (compare_op)));\n \t\t  else\n-\t\t    PUT_CODE (compare_op, reverse_condition (GET_CODE (compare_op)));\n+\t\t    PUT_CODE (compare_op,\n+\t\t\t      reverse_condition (GET_CODE (compare_op)));\n \t\t}\n \t      diff = ct - cf;\n \n@@ -15440,10 +15446,11 @@ ix86_expand_int_movcc (rtx operands[])\n \t\ttmp = gen_reg_rtx (mode);\n \n \t      if (mode == DImode)\n-\t\temit_insn (gen_x86_movdicc_0_m1 (tmp, compare_op));\n+\t\tinsn = gen_x86_movdicc_0_m1;\n \t      else\n-\t\temit_insn (gen_x86_movsicc_0_m1 (gen_lowpart (SImode, tmp),\n-\t\t\t\t\t\t compare_op));\n+\t\tinsn = gen_x86_movsicc_0_m1;\n+\n+\t      emit_insn (insn (tmp, flags, compare_op));\n \t    }\n \t  else\n \t    {\n@@ -16377,11 +16384,12 @@ int\n ix86_expand_int_addcc (rtx operands[])\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n-  rtx (*insn)(rtx, rtx, rtx, rtx);\n+  rtx flags;\n+  rtx (*insn)(rtx, rtx, rtx, rtx, rtx);\n   rtx compare_op;\n   rtx val = const0_rtx;\n   bool fpcmp = false;\n-  enum machine_mode mode = GET_MODE (operands[0]);\n+  enum machine_mode mode;\n \n   ix86_compare_op0 = XEXP (operands[1], 0);\n   ix86_compare_op1 = XEXP (operands[1], 1);\n@@ -16393,8 +16401,10 @@ ix86_expand_int_addcc (rtx operands[])\n      return 0;\n   code = GET_CODE (compare_op);\n \n-  if (GET_MODE (XEXP (compare_op, 0)) == CCFPmode\n-      || GET_MODE (XEXP (compare_op, 0)) == CCFPUmode)\n+  flags = XEXP (compare_op, 0);\n+\n+  if (GET_MODE (flags) == CCFPmode\n+      || GET_MODE (flags) == CCFPUmode)\n     {\n       fpcmp = true;\n       code = ix86_fp_compare_code_to_integer (code);\n@@ -16410,12 +16420,13 @@ ix86_expand_int_addcc (rtx operands[])\n       else\n \tPUT_CODE (compare_op, reverse_condition (GET_CODE (compare_op)));\n     }\n-  PUT_MODE (compare_op, mode);\n+\n+  mode = GET_MODE (operands[0]);\n \n   /* Construct either adc or sbb insn.  */\n   if ((code == LTU) == (operands[3] == constm1_rtx))\n     {\n-      switch (GET_MODE (operands[0]))\n+      switch (mode)\n \t{\n \t  case QImode:\n \t    insn = gen_subqi3_carry;\n@@ -16435,7 +16446,7 @@ ix86_expand_int_addcc (rtx operands[])\n     }\n   else\n     {\n-      switch (GET_MODE (operands[0]))\n+      switch (mode)\n \t{\n \t  case QImode:\n \t    insn = gen_addqi3_carry;\n@@ -16453,7 +16464,7 @@ ix86_expand_int_addcc (rtx operands[])\n \t    gcc_unreachable ();\n \t}\n     }\n-  emit_insn (insn (operands[0], operands[2], val, compare_op));\n+  emit_insn (insn (operands[0], operands[2], val, flags, compare_op));\n \n   return 1; /* DONE */\n }\n@@ -18986,7 +18997,6 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n \t\t\t       gen_rtx_IF_THEN_ELSE (Pmode, tmp,\n \t\t\t\t\t\t     reg2,\n \t\t\t\t\t\t     out)));\n-\n     }\n   else\n     {\n@@ -19013,8 +19023,9 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n   /* Avoid branch in fixing the byte.  */\n   tmpreg = gen_lowpart (QImode, tmpreg);\n   emit_insn (gen_addqi3_cc (tmpreg, tmpreg, tmpreg));\n-  cmp = gen_rtx_LTU (Pmode, gen_rtx_REG (CCmode, FLAGS_REG), const0_rtx);\n-  emit_insn ((*ix86_gen_sub3_carry) (out, out, GEN_INT (3), cmp));\n+  tmp = gen_rtx_REG (CCmode, FLAGS_REG);\n+  cmp = gen_rtx_LTU (VOIDmode, tmp, const0_rtx);\n+  emit_insn ((*ix86_gen_sub3_carry) (out, out, GEN_INT (3), tmp, cmp));\n \n   emit_label (end_0_label);\n }"}, {"sha": "d31d6a27f3fcdf2c9bc2ff60ff1d0ac7d453dc26", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 57, "deletions": 10, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84f404273fd39a416ccd133351c2ebc1e149263/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84f404273fd39a416ccd133351c2ebc1e149263/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c84f404273fd39a416ccd133351c2ebc1e149263", "patch": "@@ -5915,10 +5915,24 @@\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"split_<dwi> (&operands[0], 3, &operands[0], &operands[3]);\")\n \n-(define_insn \"add<mode>3_carry\"\n+(define_expand \"add<mode>3_carry\"\n+  [(parallel\n+    [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"\")\n+\t  (plus:SWI\n+\t    (plus:SWI (match_operator:SWI 4 \"ix86_carry_flag_operator\"\n+\t\t       [(match_operand 3 \"flags_reg_operand\" \"\")\n+\t\t\t(const_int 0)])\n+\t\t      (match_operand:SWI 1 \"nonimmediate_operand\" \"\"))\n+\t    (match_operand:SWI 2 \"<general_operand>\" \"\")))\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n+  \"\")\n+\n+(define_insn \"*add<mode>3_carry\"\n   [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n \t(plus:SWI\n-\t  (plus:SWI (match_operand:SWI 3 \"ix86_carry_flag_operator\" \"\")\n+\t  (plus:SWI (match_operator 3 \"ix86_carry_flag_operator\"\n+\t\t     [(reg FLAGS_REG) (const_int 0)])\n \t\t    (match_operand:SWI 1 \"nonimmediate_operand\" \"%0,0\"))\n \t  (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -5933,7 +5947,8 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n \t  (plus:SI\n-\t    (plus:SI (match_operand:SI 3 \"ix86_carry_flag_operator\" \"\")\n+\t    (plus:SI (match_operator 3 \"ix86_carry_flag_operator\"\n+\t\t      [(reg FLAGS_REG) (const_int 0)])\n \t\t     (match_operand:SI 1 \"nonimmediate_operand\" \"%0\"))\n \t  (match_operand:SI 2 \"general_operand\" \"g\"))))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -7440,12 +7455,27 @@\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"split_<dwi> (&operands[0], 3, &operands[0], &operands[3]);\")\n \n-(define_insn \"sub<mode>3_carry\"\n+(define_expand \"sub<mode>3_carry\"\n+  [(parallel\n+    [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"\")\n+\t    (minus:SWI\n+\t      (match_operand:SWI 1 \"nonimmediate_operand\" \"\")\n+\t      (plus:SWI\n+\t\t(match_operator:SWI 4 \"ix86_carry_flag_operator\"\n+\t\t [(match_operand 3 \"flags_reg_operand\" \"\")\n+\t\t  (const_int 0)])\n+\t\t(match_operand:SWI 2 \"<general_operand>\" \"\"))))\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\"\n+  \"\")\n+\n+(define_insn \"*sub<mode>3_carry\"\n   [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n \t  (minus:SWI\n \t    (match_operand:SWI 1 \"nonimmediate_operand\" \"0,0\")\n \t    (plus:SWI\n-\t      (match_operand:SWI 3 \"ix86_carry_flag_operator\" \"\")\n+\t      (match_operator 3 \"ix86_carry_flag_operator\"\n+\t       [(reg FLAGS_REG) (const_int 0)])\n \t      (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\"\n@@ -7459,7 +7489,8 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t  (zero_extend:DI\n \t    (minus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t      (plus:SI (match_operand:SI 3 \"ix86_carry_flag_operator\" \"\")\n+\t      (plus:SI (match_operator 3 \"ix86_carry_flag_operator\"\n+\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t (match_operand:SI 2 \"general_operand\" \"g\")))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (MINUS, SImode, operands)\"\n@@ -19277,9 +19308,23 @@\n ;; the register first winds up with `sbbl $0,reg', which is also weird.\n ;; So just document what we're doing explicitly.\n \n-(define_insn \"x86_mov<mode>cc_0_m1\"\n+(define_expand \"x86_mov<mode>cc_0_m1\"\n+  [(parallel\n+    [(set (match_operand:SWI48 0 \"register_operand\" \"\")\n+\t  (if_then_else:SWI48\n+\t    (match_operator:SWI48 2 \"ix86_carry_flag_operator\"\n+\t     [(match_operand 1 \"flags_reg_operand\" \"\")\n+\t      (const_int 0)])\n+\t    (const_int -1)\n+\t    (const_int 0)))\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*x86_mov<mode>cc_0_m1\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-\t(if_then_else:SWI48 (match_operand 1 \"ix86_carry_flag_operator\" \"\")\n+\t(if_then_else:SWI48 (match_operator 1 \"ix86_carry_flag_operator\"\n+\t\t\t     [(reg FLAGS_REG) (const_int 0)])\n \t  (const_int -1)\n \t  (const_int 0)))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -19297,7 +19342,8 @@\n \n (define_insn \"*x86_mov<mode>cc_0_m1_se\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-\t(sign_extract:SWI48 (match_operand 1 \"ix86_carry_flag_operator\" \"\")\n+\t(sign_extract:SWI48 (match_operator 1 \"ix86_carry_flag_operator\"\n+\t\t\t     [(reg FLAGS_REG) (const_int 0)])\n \t\t\t    (const_int 1)\n \t\t\t    (const_int 0)))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -19313,7 +19359,8 @@\n \n (define_insn \"*x86_mov<mode>cc_0_m1_neg\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-\t(neg:SWI48 (match_operand 1 \"ix86_carry_flag_operator\" \"\")))]\n+\t(neg:SWI48 (match_operator 1 \"ix86_carry_flag_operator\"\n+\t\t    [(reg FLAGS_REG) (const_int 0)])))]\n   \"\"\n   \"sbb{<imodesuffix>}\\t%0, %0\"\n   [(set_attr \"type\" \"alu\")"}, {"sha": "74d2f9633d3297ff489dcfa27526c153c6640913", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84f404273fd39a416ccd133351c2ebc1e149263/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84f404273fd39a416ccd133351c2ebc1e149263/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=c84f404273fd39a416ccd133351c2ebc1e149263", "patch": "@@ -1056,11 +1056,6 @@\n   enum machine_mode inmode = GET_MODE (XEXP (op, 0));\n   enum rtx_code code = GET_CODE (op);\n \n-  if (!REG_P (XEXP (op, 0))\n-      || REGNO (XEXP (op, 0)) != FLAGS_REG\n-      || XEXP (op, 1) != const0_rtx)\n-    return 0;\n-\n   if (inmode == CCFPmode || inmode == CCFPUmode)\n     {\n       if (!ix86_trivial_fp_comparison_operator (op, mode))"}]}