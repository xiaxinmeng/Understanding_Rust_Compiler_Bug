{"sha": "2fecaef4af7206fbae14906000e8c81007514706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZlY2FlZjRhZjcyMDZmYmFlMTQ5MDYwMDBlOGM4MTAwNzUxNDcwNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-06-06T16:59:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-06-06T16:59:55Z"}, "message": "[multiple changes]\n\n2005-06-06  Paolo Carlini  <pcarlini@suse.de>\n\n        Port from libstdcxx_so_7-branch:\n\t2004-09-24  Paolo Carlini  <pcarlini@suse.de>\n\t\t    Jonathan Wakely  <redi@gcc.gnu.org>\n\n\t* include/bits/stl_list.h (list::list(size_type, value_type,\n\tconst allocator_type&): Implement according to the letter of the\n\tstandard, i.e., don't use two overloads, not equivalent in case\n\tof non default constructible T.\n\t(list::resize(size_type, const value_type&)): Fix the signature:\n\taccording to the standard the second argument is by value; also,\n\tdon't use two overloads.\n\t* include/bits/list.tcc (list::resize(size_type, const value_type&)):\n\tAdjust consistently the signature.\n\t* include/bits/stl_deque.h (deque::deque(size_type, value_type,\n\tconst allocator_type&)): Likewise.\n\t(deque::resize(size_type, const value_type&)): Likewise.\n\t* include/bits/stl_vector.h (vector::vector(size_type, value_type,\n\tconst allocator_type&)): Likewise.\n\t(vector::resize(size_type, const value_type&)): Likewise.\n\t* testsuite/testsuite_hooks.h: Add NonDefaultConstructible test type.\n\t* testsuite/23_containers/deque/explicit_instantiation/2.cc: New.\n\t* testsuite/23_containers/list/explicit_instantiation/2.cc: New.\n\t* testsuite/23_containers/map/explicit_instantiation/2.cc: New.\n\t* testsuite/23_containers/multimap/explicit_instantiation/2.cc: New.\n\t* testsuite/23_containers/multiset/explicit_instantiation/2.cc: New.\n\t* testsuite/23_containers/set/explicit_instantiation/2.cc: New.\n\t* testsuite/23_containers/vector/explicit_instantiation/2.cc: New.\n\n\t* include/bits/deque.tcc: Minor formatting fix.\n\nFrom-SVN: r100668", "tree": {"sha": "135c01c04b56fa8a36110efaa5e5b5d8c1be6e9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/135c01c04b56fa8a36110efaa5e5b5d8c1be6e9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fecaef4af7206fbae14906000e8c81007514706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fecaef4af7206fbae14906000e8c81007514706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fecaef4af7206fbae14906000e8c81007514706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fecaef4af7206fbae14906000e8c81007514706/comments", "author": null, "committer": null, "parents": [{"sha": "1651a990f79d932c591ae20035536d7b4449f6f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1651a990f79d932c591ae20035536d7b4449f6f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1651a990f79d932c591ae20035536d7b4449f6f4"}], "stats": {"total": 403, "additions": 312, "deletions": 91}, "files": [{"sha": "3a91b0019e0dfbd56944e8d966c5a268be417f49", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2fecaef4af7206fbae14906000e8c81007514706", "patch": "@@ -1,3 +1,35 @@\n+2005-06-06  Paolo Carlini  <pcarlini@suse.de>\n+\n+        Port from libstdcxx_so_7-branch:\n+\t2004-09-24  Paolo Carlini  <pcarlini@suse.de>\n+\t\t    Jonathan Wakely  <redi@gcc.gnu.org>\n+\n+\t* include/bits/stl_list.h (list::list(size_type, value_type,\n+\tconst allocator_type&): Implement according to the letter of the\n+\tstandard, i.e., don't use two overloads, not equivalent in case\n+\tof non default constructible T.\n+\t(list::resize(size_type, const value_type&)): Fix the signature:\n+\taccording to the standard the second argument is by value; also,\n+\tdon't use two overloads.\n+\t* include/bits/list.tcc (list::resize(size_type, const value_type&)):\n+\tAdjust consistently the signature.\n+\t* include/bits/stl_deque.h (deque::deque(size_type, value_type,\n+\tconst allocator_type&)): Likewise.\n+\t(deque::resize(size_type, const value_type&)): Likewise.\n+\t* include/bits/stl_vector.h (vector::vector(size_type, value_type,\n+\tconst allocator_type&)): Likewise.\n+\t(vector::resize(size_type, const value_type&)): Likewise.\n+\t* testsuite/testsuite_hooks.h: Add NonDefaultConstructible test type.\n+\t* testsuite/23_containers/deque/explicit_instantiation/2.cc: New.\n+\t* testsuite/23_containers/list/explicit_instantiation/2.cc: New.\n+\t* testsuite/23_containers/map/explicit_instantiation/2.cc: New.\n+\t* testsuite/23_containers/multimap/explicit_instantiation/2.cc: New.\n+\t* testsuite/23_containers/multiset/explicit_instantiation/2.cc: New.\n+\t* testsuite/23_containers/set/explicit_instantiation/2.cc: New.\n+\t* testsuite/23_containers/vector/explicit_instantiation/2.cc: New.\n+\n+\t* include/bits/deque.tcc: Minor formatting fix.\n+\n 2005-06-06  Peter Doerfler  <doerfler@techinfo.rwth-aachen.de>\n \n \t* include/bits/stl_function.h: ... and another one."}, {"sha": "e69c79a4f34aea4021439d87b1617ecd69ae645c", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=2fecaef4af7206fbae14906000e8c81007514706", "patch": "@@ -201,9 +201,9 @@ namespace _GLIBCXX_STD\n   template <typename _Tp, class _Alloc>\n     template <typename _InputIterator>\n       void\n-      deque<_Tp, _Alloc>\n-      ::_M_assign_aux(_InputIterator __first, _InputIterator __last,\n-\t\t      std::input_iterator_tag)\n+      deque<_Tp, _Alloc>::\n+      _M_assign_aux(_InputIterator __first, _InputIterator __last,\n+\t\t    std::input_iterator_tag)\n       {\n         iterator __cur = begin();\n         for (; __first != __last && __cur != end(); ++__cur, ++__first)"}, {"sha": "d65f73c0beec6e5522f7c03d575f30b7ed078db6", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=2fecaef4af7206fbae14906000e8c81007514706", "patch": "@@ -1,6 +1,6 @@\n // List implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -102,7 +102,7 @@ namespace _GLIBCXX_STD\n   template<typename _Tp, typename _Alloc>\n     void\n     list<_Tp, _Alloc>::\n-    resize(size_type __new_size, const value_type& __x)\n+    resize(size_type __new_size, value_type __x)\n     {\n       iterator __i = begin();\n       size_type __len = 0;"}, {"sha": "5a20b657a5fb3c50f447490dfe44df574d24a4db", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=2fecaef4af7206fbae14906000e8c81007514706", "patch": "@@ -669,23 +669,12 @@ namespace _GLIBCXX_STD\n        *\n        *  This constructor fills the %deque with @a n copies of @a value.\n        */\n-      deque(size_type __n, const value_type& __value,\n+      explicit\n+      deque(size_type __n, const value_type& __value = value_type(),\n \t    const allocator_type& __a = allocator_type())\n       : _Base(__a, __n)\n       { _M_fill_initialize(__value); }\n \n-      /**\n-       *  @brief  Create a %deque with default elements.\n-       *  @param  n  The number of elements to initially create.\n-       *\n-       *  This constructor fills the %deque with @a n copies of a\n-       *  default-constructed element.\n-       */\n-      explicit\n-      deque(size_type __n)\n-      : _Base(allocator_type(), __n)\n-      { _M_fill_initialize(value_type()); }\n-\n       /**\n        *  @brief  %Deque copy constructor.\n        *  @param  x  A %deque of identical element and allocator types.\n@@ -874,7 +863,7 @@ namespace _GLIBCXX_STD\n        *  data.\n        */\n       void\n-      resize(size_type __new_size, const value_type& __x)\n+      resize(size_type __new_size, value_type __x = value_type())\n       {\n \tconst size_type __len = size();\n \tif (__new_size < __len)\n@@ -883,19 +872,6 @@ namespace _GLIBCXX_STD\n \t  insert(this->_M_impl._M_finish, __new_size - __len, __x);\n       }\n \n-      /**\n-       *  @brief  Resizes the %deque to the specified number of elements.\n-       *  @param  new_size  Number of elements the %deque should contain.\n-       *\n-       *  This function will resize the %deque to the specified number\n-       *  of elements.  If the number is smaller than the %deque's\n-       *  current size the %deque is truncated, otherwise the %deque\n-       *  is extended and new elements are default-constructed.\n-       */\n-      void\n-      resize(size_type new_size)\n-      { resize(new_size, value_type()); }\n-\n       /**\n        *  Returns true if the %deque is empty.  (Thus begin() would\n        *  equal end().)"}, {"sha": "e17ec2b46068156b4ae50f2814f24804c215da4e", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=2fecaef4af7206fbae14906000e8c81007514706", "patch": "@@ -472,23 +472,12 @@ namespace _GLIBCXX_STD\n        *\n        *  This constructor fills the %list with @a n copies of @a value.\n        */\n-      list(size_type __n, const value_type& __value,\n+      explicit\n+      list(size_type __n, const value_type& __value = value_type(),\n \t   const allocator_type& __a = allocator_type())\n       : _Base(__a)\n       { this->insert(begin(), __n, __value); }\n \n-      /**\n-       *  @brief  Create a %list with default elements.\n-       *  @param  n  The number of elements to initially create.\n-       *\n-       *  This constructor fills the %list with @a n copies of a\n-       *  default-constructed element.\n-       */\n-      explicit\n-      list(size_type __n)\n-      : _Base(allocator_type())\n-      { this->insert(begin(), __n, value_type()); }\n-\n       /**\n        *  @brief  %List copy constructor.\n        *  @param  x  A %list of identical element and allocator types.\n@@ -679,20 +668,7 @@ namespace _GLIBCXX_STD\n        *  extended and new elements are populated with given data.\n        */\n       void\n-      resize(size_type __new_size, const value_type& __x);\n-\n-      /**\n-       *  @brief  Resizes the %list to the specified number of elements.\n-       *  @param  new_size  Number of elements the %list should contain.\n-       *\n-       *  This function will resize the %list to the specified number of\n-       *  elements.  If the number is smaller than the %list's current\n-       *  size the %list is truncated, otherwise the %list is extended\n-       *  and new elements are default-constructed.\n-       */\n-      void\n-      resize(size_type __new_size)\n-      { this->resize(__new_size, value_type()); }\n+      resize(size_type __new_size, value_type __x = value_type());\n \n       // element access\n       /**"}, {"sha": "06b94017c010d1a717bb4cff7dda9e21c5a27d46", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 3, "deletions": 32, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=2fecaef4af7206fbae14906000e8c81007514706", "patch": "@@ -206,7 +206,8 @@ namespace _GLIBCXX_STD\n        *\n        *  This constructor fills the %vector with @a n copies of @a value.\n        */\n-      vector(size_type __n, const value_type& __value,\n+      explicit\n+      vector(size_type __n, const value_type& __value = value_type(),\n \t     const allocator_type& __a = allocator_type())\n       : _Base(__n, __a)\n       {\n@@ -215,22 +216,6 @@ namespace _GLIBCXX_STD\n \tthis->_M_impl._M_finish = this->_M_impl._M_start + __n;\n       }\n \n-      /**\n-       *  @brief  Create a %vector with default elements.\n-       *  @param  n  The number of elements to initially create.\n-       *\n-       *  This constructor fills the %vector with @a n copies of a\n-       *  default-constructed element.\n-       */\n-      explicit\n-      vector(size_type __n)\n-      : _Base(__n, allocator_type())\n-      {\n-\tstd::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, value_type(),\n-\t\t\t\t      _M_get_Tp_allocator());\n-\tthis->_M_impl._M_finish = this->_M_impl._M_start + __n;\t\n-      }\n-\n       /**\n        *  @brief  %Vector copy constructor.\n        *  @param  x  A %vector of identical element and allocator types.\n@@ -429,28 +414,14 @@ namespace _GLIBCXX_STD\n        *  given data.\n        */\n       void\n-      resize(size_type __new_size, const value_type& __x)\n+      resize(size_type __new_size, value_type __x = value_type())\n       {\n \tif (__new_size < size())\n \t  erase(begin() + __new_size, end());\n \telse\n \t  insert(end(), __new_size - size(), __x);\n       }\n \n-      /**\n-       *  @brief  Resizes the %vector to the specified number of elements.\n-       *  @param  new_size  Number of elements the %vector should contain.\n-       *\n-       *  This function will resize the %vector to the specified\n-       *  number of elements.  If the number is smaller than the\n-       *  %vector's current size the %vector is truncated, otherwise\n-       *  the %vector is extended and new elements are\n-       *  default-constructed.\n-       */\n-      void\n-      resize(size_type __new_size)\n-      { resize(__new_size, value_type()); }\n-\n       /**\n        *  Returns the total number of elements that the %vector can\n        *  hold before needing to allocate more memory."}, {"sha": "7084ff746a0e8b5a521d4d431f08188bf99c7e52", "filename": "libstdc++-v3/testsuite/23_containers/deque/explicit_instantiation/2.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fexplicit_instantiation%2F2.cc?ref=2fecaef4af7206fbae14906000e8c81007514706", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <deque>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+template class std::deque<__gnu_test::NonDefaultConstructible>;"}, {"sha": "66d3934f4275bf681bc9a2df1c47714f1428acb8", "filename": "libstdc++-v3/testsuite/23_containers/list/explicit_instantiation/2.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fexplicit_instantiation%2F2.cc?ref=2fecaef4af7206fbae14906000e8c81007514706", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+template class std::list<__gnu_test::NonDefaultConstructible>;"}, {"sha": "8c3c744f0809a8a38eb70689851f31fbbabd45c4", "filename": "libstdc++-v3/testsuite/23_containers/map/explicit_instantiation/2.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fexplicit_instantiation%2F2.cc?ref=2fecaef4af7206fbae14906000e8c81007514706", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+// N.B. We cannot instantiate with T == NonDefaultConstructible\n+// because of 23.3.1.2.\n+template class std::map<__gnu_test::NonDefaultConstructible, double>;"}, {"sha": "46181ef3e25ba5d87e34860662a95fc725d5d93b", "filename": "libstdc++-v3/testsuite/23_containers/multimap/explicit_instantiation/2.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fexplicit_instantiation%2F2.cc?ref=2fecaef4af7206fbae14906000e8c81007514706", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+template class std::multimap<__gnu_test::NonDefaultConstructible,\n+\t\t\t     __gnu_test::NonDefaultConstructible>;"}, {"sha": "0f5f3080aa4e1cff91028e06632c7707d684943d", "filename": "libstdc++-v3/testsuite/23_containers/multiset/explicit_instantiation/2.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fexplicit_instantiation%2F2.cc?ref=2fecaef4af7206fbae14906000e8c81007514706", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+template class std::multiset<__gnu_test::NonDefaultConstructible>;"}, {"sha": "418c80e554346ed22fdb8ba379734a1b2fff0c43", "filename": "libstdc++-v3/testsuite/23_containers/set/explicit_instantiation/2.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fexplicit_instantiation%2F2.cc?ref=2fecaef4af7206fbae14906000e8c81007514706", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+template class std::set<__gnu_test::NonDefaultConstructible>;"}, {"sha": "7020d42ebb014155ec4bcc3e022450498cafbc95", "filename": "libstdc++-v3/testsuite/23_containers/vector/explicit_instantiation/2.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fexplicit_instantiation%2F2.cc?ref=2fecaef4af7206fbae14906000e8c81007514706", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+template class std::vector<__gnu_test::NonDefaultConstructible>;"}, {"sha": "fc05186d400db95074f21df5b210d3e476bdc47b", "filename": "libstdc++-v3/testsuite/testsuite_hooks.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fecaef4af7206fbae14906000e8c81007514706/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h?ref=2fecaef4af7206fbae14906000e8c81007514706", "patch": "@@ -160,6 +160,24 @@ namespace __gnu_test\n   void \n   run_tests_wrapped_env(const char*, const char*, const func_callback&);\n \n+\n+  // For containers (23.1/3).\n+  struct NonDefaultConstructible\n+  {\n+    NonDefaultConstructible(int) { }\n+  };\n+ \n+  inline bool\n+  operator==(const NonDefaultConstructible& lhs,\n+\t     const NonDefaultConstructible& rhs)\n+  { return false; }\n+\n+  inline bool\n+  operator<(const NonDefaultConstructible& lhs,\n+\t    const NonDefaultConstructible& rhs)\n+  { return false; }\n+\n+\n   // Counting.\n   struct counter\n   {"}]}