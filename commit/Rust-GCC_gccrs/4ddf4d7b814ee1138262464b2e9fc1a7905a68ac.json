{"sha": "4ddf4d7b814ee1138262464b2e9fc1a7905a68ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRkZjRkN2I4MTRlZTExMzgyNjI0NjRiMmU5ZmMxYTc5MDVhNjhhYw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-04-08T04:17:59Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-04-08T04:17:59Z"}, "message": "* gcc.dg/compare2.c: New test.\n\nFrom-SVN: r33016", "tree": {"sha": "a1ade09a7f91fca297e5787fe7c9edda46228dd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1ade09a7f91fca297e5787fe7c9edda46228dd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ddf4d7b814ee1138262464b2e9fc1a7905a68ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ddf4d7b814ee1138262464b2e9fc1a7905a68ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ddf4d7b814ee1138262464b2e9fc1a7905a68ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ddf4d7b814ee1138262464b2e9fc1a7905a68ac/comments", "author": null, "committer": null, "parents": [{"sha": "65232ce9152e7299f6d7195d8953cfb8f0acd1fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65232ce9152e7299f6d7195d8953cfb8f0acd1fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65232ce9152e7299f6d7195d8953cfb8f0acd1fb"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "f31f1afb0c0b8ed4b22c9ab3e14a27977f862bf5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ddf4d7b814ee1138262464b2e9fc1a7905a68ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ddf4d7b814ee1138262464b2e9fc1a7905a68ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ddf4d7b814ee1138262464b2e9fc1a7905a68ac", "patch": "@@ -1,3 +1,7 @@\n+2000-04-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/compare2.c: New test.\n+\n 2000-04-08  Neil Booth  <NeilB@earthling.net>\n \t\n \t* gcc.dg/cpp-nullchar.c: New test."}, {"sha": "0625eb9c3f65f10ef2637e65ff167dcb162877e3", "filename": "gcc/testsuite/gcc.dg/compare2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ddf4d7b814ee1138262464b2e9fc1a7905a68ac/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ddf4d7b814ee1138262464b2e9fc1a7905a68ac/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare2.c?ref=4ddf4d7b814ee1138262464b2e9fc1a7905a68ac", "patch": "@@ -0,0 +1,58 @@\n+/* Test for a bogus warning on comparison between signed and unsigned.\n+   This was inspired by code in gcc. */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wsign-compare\" } */\n+\n+int tf = 1;\n+\n+void f(int x, unsigned int y)\n+{\n+  /* ?: branches are constants.  */\n+  x > (tf?64:128); /* { dg-bogus \"signed and unsigned\" \"case 1\" } */\n+  y > (tf?64:128); /* { dg-bogus \"signed and unsigned\" \"case 2\" } */\n+\n+  /* ?: branches are (recursively) constants.  */\n+  x > (tf?64:(tf?128:256)); /* { dg-bogus \"signed and unsigned\" \"case 3\" } */\n+  y > (tf?64:(tf?128:256)); /* { dg-bogus \"signed and unsigned\" \"case 4\" } */\n+\n+  /* ?: branches are signed constants.  */\n+  x > (tf?64:-1); /* { dg-bogus \"signed and unsigned\" \"case 5\" } */\n+  y > (tf?64:-1); /* { dg-warning \"signed and unsigned\" \"case 6\" } */\n+\n+  /* ?: branches are (recursively) signed constants.  */\n+  x > (tf?64:(tf?128:-1)); /* { dg-bogus \"signed and unsigned\" \"case 7\" } */\n+  y > (tf?64:(tf?128:-1)); /* { dg-warning \"signed and unsigned\" \"case 8\" } */\n+\n+  /* Statement expression.  */\n+  x > ({tf; 64;}); /* { dg-bogus \"signed and unsigned\" \"case 9\" } */\n+  y > ({tf; 64;}); /* { dg-bogus \"signed and unsigned\" \"case 10\" } */\n+\n+  /* Statement expression with recursive ?: .  */\n+  x > ({tf; tf?64:(tf?128:256);}); /* { dg-bogus \"signed and unsigned\" \"case 11\" } */\n+  y > ({tf; tf?64:(tf?128:256);}); /* { dg-bogus \"signed and unsigned\" \"case 12\" } */\n+\n+  /* Statement expression with signed ?:.  */\n+  x > ({tf; tf?64:-1;}); /* { dg-bogus \"signed and unsigned\" \"case 13\" } */\n+  y > ({tf; tf?64:-1;}); /* { dg-warning \"signed and unsigned\" \"case 14\" } */\n+\n+  /* Statement expression with recursive signed ?:.  */\n+  x > ({tf; tf?64:(tf?128:-1);}); /* { dg-bogus \"signed and unsigned\" \"case 15\" } */\n+  y > ({tf; tf?64:(tf?128:-1);}); /* { dg-warning \"signed and unsigned\" \"case 16\" } */\n+\n+  /* ?: branches are constants.  */\n+  tf ? x : (tf?64:32); /* { dg-bogus \"conditional expression\" \"case 17\" } */\n+  tf ? y : (tf?64:32); /* { dg-bogus \"conditional expression\" \"case 18\" } */\n+\n+  /* ?: branches are signed constants.  */\n+  tf ? x : (tf?64:-1); /* { dg-bogus \"conditional expression\" \"case 19\" } */\n+  tf ? y : (tf?64:-1); /* { dg-warning \"conditional expression\" \"case 20\" } */\n+\n+  /* ?: branches are (recursively) constants.  */\n+  tf ? x : (tf?64:(tf?128:256)); /* { dg-bogus \"conditional expression\" \"case 21\" } */\n+  tf ? y : (tf?64:(tf?128:256)); /* { dg-bogus \"conditional expression\" \"case 22\" } */\n+\n+  /* ?: branches are (recursively) signed constants.  */\n+  tf ? x : (tf?64:(tf?128:-1)); /* { dg-bogus \"conditional expression\" \"case 23\" } */\n+  tf ? y : (tf?64:(tf?128:-1)); /* { dg-warning \"conditional expression\" \"case 24\" } */\n+}"}]}