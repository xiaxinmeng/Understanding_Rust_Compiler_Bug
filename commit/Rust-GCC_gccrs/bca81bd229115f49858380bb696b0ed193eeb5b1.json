{"sha": "bca81bd229115f49858380bb696b0ed193eeb5b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNhODFiZDIyOTExNWY0OTg1ODM4MGJiNjk2YjBlZDE5M2VlYjViMQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2018-10-29T15:07:47Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2018-10-29T15:07:47Z"}, "message": "Extract VXWORKS_NET_LIBS_RTP from VXWORKS_LIBS_RTP\n\n2018-10-29  Olivier Hainque  <hainque@adacore.com>\n\n\t* VXWORKS_NET_LIBS_RTP: New macro, network part of VXWORKS_LIBS_RTP.\n\nFrom-SVN: r265595", "tree": {"sha": "2cc42c866e34d660131b077f8ea86993a2b6d471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cc42c866e34d660131b077f8ea86993a2b6d471"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bca81bd229115f49858380bb696b0ed193eeb5b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca81bd229115f49858380bb696b0ed193eeb5b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bca81bd229115f49858380bb696b0ed193eeb5b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca81bd229115f49858380bb696b0ed193eeb5b1/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b727799d4ebf8de4955033fb288f416a265bb7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b727799d4ebf8de4955033fb288f416a265bb7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b727799d4ebf8de4955033fb288f416a265bb7f"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "735bb897a9929f6f217844939ad0c8487761bc3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca81bd229115f49858380bb696b0ed193eeb5b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca81bd229115f49858380bb696b0ed193eeb5b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bca81bd229115f49858380bb696b0ed193eeb5b1", "patch": "@@ -1,3 +1,7 @@\n+2018-10-29  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* VXWORKS_NET_LIBS_RTP: New macro, network part of VXWORKS_LIBS_RTP.\n+\n 2018-10-29  Olivier Hainque  <hainque@adacore.com>\n \n \t* config/vxworks.h (VXWORKS_PERSONALITY): New VxWorks"}, {"sha": "2c4c79643de4cd01adf960b621b65c02eee78e67", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca81bd229115f49858380bb696b0ed193eeb5b1/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca81bd229115f49858380bb696b0ed193eeb5b1/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=bca81bd229115f49858380bb696b0ed193eeb5b1", "patch": "@@ -69,13 +69,19 @@ along with GCC; see the file COPYING3.  If not see\n    libgcc.a that we need to use e.g. to satisfy references to __init and\n    __fini.  We still want our libgcc to prevail for symbols it would provide\n    (e.g. register save entry points), so re-place it here between libraries\n-   that might reference it and libc_internal.  Also, some versions of VxWorks\n-   rely on explicit extra libraries for system calls.  */\n+   that might reference it and libc_internal.\n+\n+   In addition, some versions of VxWorks rely on explicit extra libraries for\n+   system calls and the set of base network libraries of common use varies\n+   across architectures.  The default settings defined here might be redefined\n+   by target specific port configuration files.  */\n \n #define VXWORKS_SYSCALL_LIBS_RTP\n \n+#define VXWORKS_NET_LIBS_RTP \"-lnet -ldsi\"\n+\n #define VXWORKS_LIBS_RTP \\\n-  VXWORKS_SYSCALL_LIBS_RTP \" -lnet -ldsi -lc -lgcc -lc_internal\"\n+  VXWORKS_SYSCALL_LIBS_RTP \" \" VXWORKS_NET_LIBS_RTP \" -lc -lgcc -lc_internal\"\n \n /* On Vx6 and previous, the libraries to pick up depends on the architecture,\n    so cannot be defined for all archs at once.  On Vx7, a VSB is always needed"}]}