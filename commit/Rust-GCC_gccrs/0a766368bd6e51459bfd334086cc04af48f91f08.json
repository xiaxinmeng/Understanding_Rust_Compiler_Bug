{"sha": "0a766368bd6e51459bfd334086cc04af48f91f08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE3NjYzNjhiZDZlNTE0NTliZmQzMzQwODZjYzA0YWY0OGY5MWYwOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-06-04T21:21:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-06-04T21:21:13Z"}, "message": "Implement noexcept operator (5.3.7)\n\n\tImplement noexcept operator (5.3.7)\n\t* c-common.c (c_common_reswords): Add noexcept.\n\t* c-common.h (enum rid): Add RID_NOEXCEPT.\ncp/\n\t* cp-tree.def (NOEXCEPT_EXPR): New.\n\t* except.c (check_noexcept_r, finish_noexcept_expr): New.\n\t* cp-tree.h: Declare finish_noexcept_expr.\n\t* parser.c (cp_parser_unary_expression): Parse noexcept-expression.\n\t* pt.c (tsubst_copy_and_build): And tsubst it.\n\t(type_dependent_expression_p): Handle it.\n\t(value_dependent_expression_p): Handle it.\n\nFrom-SVN: r160297", "tree": {"sha": "d5300c246ce3ea5275af264865375de418f7963e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5300c246ce3ea5275af264865375de418f7963e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a766368bd6e51459bfd334086cc04af48f91f08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a766368bd6e51459bfd334086cc04af48f91f08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a766368bd6e51459bfd334086cc04af48f91f08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a766368bd6e51459bfd334086cc04af48f91f08/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726"}], "stats": {"total": 221, "additions": 220, "deletions": 1}, "files": [{"sha": "7d65c74b9f1fe00910dae161778052b32d98784c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a766368bd6e51459bfd334086cc04af48f91f08", "patch": "@@ -1,3 +1,9 @@\n+2010-06-03  Jason Merrill  <jason@redhat.com>\n+\n+\tImplement noexcept operator (5.3.7)\n+\t* c-common.c (c_common_reswords): Add noexcept.\n+\t* c-common.h (enum rid): Add RID_NOEXCEPT.\n+\n 2010-06-04  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/darwin-driver.c (darwin_default_min_version): Use"}, {"sha": "1c511183529b0da6bbe0ac52e4318e067cbe3e33", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=0a766368bd6e51459bfd334086cc04af48f91f08", "patch": "@@ -661,6 +661,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"mutable\",\t\tRID_MUTABLE,\tD_CXXONLY | D_CXXWARN },\n   { \"namespace\",\tRID_NAMESPACE,\tD_CXXONLY | D_CXXWARN },\n   { \"new\",\t\tRID_NEW,\tD_CXXONLY | D_CXXWARN },\n+  { \"noexcept\",\t\tRID_NOEXCEPT,\tD_CXXONLY | D_CXX0X | D_CXXWARN },\n   { \"nullptr\",\t\tRID_NULLPTR,\tD_CXXONLY | D_CXX0X | D_CXXWARN },\n   { \"operator\",\t\tRID_OPERATOR,\tD_CXXONLY | D_CXXWARN },\n   { \"private\",\t\tRID_PRIVATE,\tD_CXX_OBJC | D_CXXWARN },"}, {"sha": "289d70c6be231f267554395f78bdc3cffbaaa6a0", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=0a766368bd6e51459bfd334086cc04af48f91f08", "patch": "@@ -125,7 +125,7 @@ enum rid\n   RID_IS_UNION,\n \n   /* C++0x */\n-  RID_CONSTEXPR, RID_DECLTYPE, RID_NULLPTR, RID_STATIC_ASSERT,\n+  RID_CONSTEXPR, RID_DECLTYPE, RID_NOEXCEPT, RID_NULLPTR, RID_STATIC_ASSERT,\n \n   /* Objective-C */\n   RID_AT_ENCODE,   RID_AT_END,"}, {"sha": "0c11af7d32cf030a143254fc56b3b856cb66ec05", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0a766368bd6e51459bfd334086cc04af48f91f08", "patch": "@@ -1,5 +1,14 @@\n 2010-06-04  Jason Merrill  <jason@redhat.com>\n \n+\tImplement noexcept operator (5.3.7)\n+\t* cp-tree.def (NOEXCEPT_EXPR): New.\n+\t* except.c (check_noexcept_r, finish_noexcept_expr): New.\n+\t* cp-tree.h: Declare finish_noexcept_expr.\n+\t* parser.c (cp_parser_unary_expression): Parse noexcept-expression.\n+\t* pt.c (tsubst_copy_and_build): And tsubst it.\n+\t(type_dependent_expression_p): Handle it.\n+\t(value_dependent_expression_p): Handle it.\n+\n \t* call.c (build_conditional_expr): Never fold in unevaluated context.\n \t* tree.c (build_aggr_init_expr): Propagate TREE_NOTHROW.\n \t* semantics.c (simplify_aggr_init_expr): Likewise."}, {"sha": "b77350fffa8e518ba44c10c3028a522d2922a31c", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=0a766368bd6e51459bfd334086cc04af48f91f08", "patch": "@@ -247,6 +247,7 @@ DEFTREECODE (STATIC_CAST_EXPR, \"static_cast_expr\", tcc_unary, 1)\n DEFTREECODE (DYNAMIC_CAST_EXPR, \"dynamic_cast_expr\", tcc_unary, 1)\n DEFTREECODE (DOTSTAR_EXPR, \"dotstar_expr\", tcc_expression, 2)\n DEFTREECODE (TYPEID_EXPR, \"typeid_expr\", tcc_expression, 1)\n+DEFTREECODE (NOEXCEPT_EXPR, \"noexcept_expr\", tcc_unary, 1)\n \n /* A placeholder for an expression that is not type-dependent, but\n    does occur in a template.  When an expression that is not"}, {"sha": "e48e4690c028f68ef4218fcd4e3f1cf30343935c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0a766368bd6e51459bfd334086cc04af48f91f08", "patch": "@@ -4820,6 +4820,7 @@ extern tree build_exc_ptr\t\t\t(void);\n extern tree build_throw\t\t\t\t(tree);\n extern int nothrow_libfn_p\t\t\t(const_tree);\n extern void check_handlers\t\t\t(tree);\n+extern tree finish_noexcept_expr\t\t(tree);\n extern void choose_personality_routine\t\t(enum languages);\n extern tree eh_type_info\t\t\t(tree);\n extern tree begin_eh_spec_block\t\t\t(void);"}, {"sha": "76731f44702a79e11f84d12385f4b407e7e72523", "filename": "gcc/cp/except.c", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=0a766368bd6e51459bfd334086cc04af48f91f08", "patch": "@@ -998,3 +998,67 @@ check_handlers (tree handlers)\n \t  check_handlers_1 (handler, i);\n       }\n }\n+\n+/* walk_tree helper for finish_noexcept_expr.  Returns non-null if the\n+   expression *TP causes the noexcept operator to evaluate to false.\n+\n+   5.3.7 [expr.noexcept]: The result of the noexcept operator is false if\n+   in a potentially-evaluated context the expression would contain\n+   * a potentially evaluated call to a function, member function,\n+     function pointer, or member function pointer that does not have a\n+     non-throwing exception-specification (15.4),\n+   * a potentially evaluated throw-expression (15.1),\n+   * a potentially evaluated dynamic_cast expression dynamic_cast<T>(v),\n+     where T is a reference type, that requires a run-time check (5.2.7), or\n+   * a potentially evaluated typeid expression (5.2.8) applied to a glvalue\n+     expression whose type is a polymorphic class type (10.3).  */\n+\n+static tree\n+check_noexcept_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n+\t\t  void *data ATTRIBUTE_UNUSED)\n+{\n+  tree t = *tp;\n+  enum tree_code code = TREE_CODE (t);\n+  if (code == CALL_EXPR\n+      || code == AGGR_INIT_EXPR)\n+    {\n+      /* We can only use the exception specification of the called function\n+\t for determining the value of a noexcept expression; we can't use\n+\t TREE_NOTHROW, as it might have a different value in another\n+\t translation unit, creating ODR problems.\n+\n+         We could use TREE_NOTHROW (t) for !TREE_PUBLIC fns, though... */\n+      tree fn = (code == AGGR_INIT_EXPR\n+\t\t ? AGGR_INIT_EXPR_FN (t) : CALL_EXPR_FN (t));\n+      if (TREE_CODE (fn) == ADDR_EXPR)\n+\t{\n+\t  /* We do use TREE_NOTHROW for ABI internals like __dynamic_cast,\n+\t     and for C library functions known not to throw.  */\n+\t  tree fn2 = TREE_OPERAND (fn, 0);\n+\t  if (TREE_CODE (fn2) == FUNCTION_DECL\n+\t      && DECL_EXTERN_C_P (fn2)\n+\t      && (DECL_ARTIFICIAL (fn2)\n+\t\t  || nothrow_libfn_p (fn2)))\n+\t    return TREE_NOTHROW (fn2) ? NULL_TREE : t;\n+\t}\n+      fn = TREE_TYPE (TREE_TYPE (fn));\n+      if (!TYPE_NOTHROW_P (fn))\n+\treturn t;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Evaluate noexcept ( EXPR ).  */\n+\n+tree\n+finish_noexcept_expr (tree expr)\n+{\n+  if (processing_template_decl)\n+    return build_min (NOEXCEPT_EXPR, boolean_type_node, expr);\n+\n+  if (cp_walk_tree_without_duplicates (&expr, check_noexcept_r, 0))\n+    return boolean_false_node;\n+  else\n+    return boolean_true_node;\n+}"}, {"sha": "32e86e911661cf2047b0f8a3e1426ee1c4a1db4c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0a766368bd6e51459bfd334086cc04af48f91f08", "patch": "@@ -5841,6 +5841,51 @@ cp_parser_unary_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t  }\n \t  break;\n \n+\tcase RID_NOEXCEPT:\n+\t  {\n+\t    tree expr;\n+\t    const char *saved_message;\n+\t    bool saved_integral_constant_expression_p;\n+\t    bool saved_non_integral_constant_expression_p;\n+\t    bool saved_greater_than_is_operator_p;\n+\n+\t    cp_lexer_consume_token (parser->lexer);\n+\t    cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN);\n+\n+\t    saved_message = parser->type_definition_forbidden_message;\n+\t    parser->type_definition_forbidden_message\n+\t      = G_(\"types may not be defined in %<noexcept%> expressions\");\n+\n+\t    saved_integral_constant_expression_p\n+\t      = parser->integral_constant_expression_p;\n+\t    saved_non_integral_constant_expression_p\n+\t      = parser->non_integral_constant_expression_p;\n+\t    parser->integral_constant_expression_p = false;\n+\n+\t    saved_greater_than_is_operator_p\n+\t      = parser->greater_than_is_operator_p;\n+\t    parser->greater_than_is_operator_p = true;\n+\n+\t    ++cp_unevaluated_operand;\n+\t    ++c_inhibit_evaluation_warnings;\n+\t    expr = cp_parser_expression (parser, false, NULL);\n+\t    --c_inhibit_evaluation_warnings;\n+\t    --cp_unevaluated_operand;\n+\n+\t    parser->greater_than_is_operator_p\n+\t      = saved_greater_than_is_operator_p;\n+\n+\t    parser->integral_constant_expression_p\n+\t      = saved_integral_constant_expression_p;\n+\t    parser->non_integral_constant_expression_p\n+\t      = saved_non_integral_constant_expression_p;\n+\n+\t    parser->type_definition_forbidden_message = saved_message;\n+\n+\t    cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n+\t    return finish_noexcept_expr (expr);\n+\t  }\n+\n \tdefault:\n \t  break;\n \t}"}, {"sha": "0d58035e271faa2d29f378024a5e3bb8f48e56a2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0a766368bd6e51459bfd334086cc04af48f91f08", "patch": "@@ -12245,6 +12245,17 @@ tsubst_copy_and_build (tree t,\n \treturn cxx_sizeof_or_alignof_expr (op1, TREE_CODE (t), \n                                            complain & tf_error);\n \n+    case NOEXCEPT_EXPR:\n+      op1 = TREE_OPERAND (t, 0);\n+      ++cp_unevaluated_operand;\n+      ++c_inhibit_evaluation_warnings;\n+      op1 = tsubst_copy_and_build (op1, args, complain, in_decl,\n+\t\t\t\t   /*function_p=*/false,\n+\t\t\t\t   /*integral_constant_expression_p=*/false);\n+      --cp_unevaluated_operand;\n+      --c_inhibit_evaluation_warnings;\n+      return finish_noexcept_expr (op1);\n+\n     case MODOP_EXPR:\n       {\n \ttree r = build_x_modify_expr\n@@ -17577,6 +17588,7 @@ value_dependent_expression_p (tree expression)\n         return true;\n       else if (TYPE_P (expression))\n \treturn dependent_type_p (expression);\n+    case NOEXCEPT_EXPR:\n       return type_dependent_expression_p (expression);\n \n     case SCOPE_REF:\n@@ -17680,6 +17692,7 @@ type_dependent_expression_p (tree expression)\n   if (TREE_CODE (expression) == PSEUDO_DTOR_EXPR\n       || TREE_CODE (expression) == SIZEOF_EXPR\n       || TREE_CODE (expression) == ALIGNOF_EXPR\n+      || TREE_CODE (expression) == NOEXCEPT_EXPR\n       || TREE_CODE (expression) == TRAIT_EXPR\n       || TREE_CODE (expression) == TYPEID_EXPR\n       || TREE_CODE (expression) == DELETE_EXPR"}, {"sha": "3eb8e2d84cce39c52b29a53998c66298987b9d05", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a766368bd6e51459bfd334086cc04af48f91f08", "patch": "@@ -1,3 +1,7 @@\n+2010-06-04  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/noexcept01.C: New.\n+\n 2010-06-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/44412"}, {"sha": "e3341d85be8f19327f77866863430268ab20ecf2", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept01.C", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a766368bd6e51459bfd334086cc04af48f91f08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept01.C?ref=0a766368bd6e51459bfd334086cc04af48f91f08", "patch": "@@ -0,0 +1,75 @@\n+// Test for noexcept-expression\n+// { dg-options \"-std=c++0x -O2\" }\n+\n+#include <typeinfo>\n+\n+#define SA(X) static_assert(X, #X)\n+\n+void f();\n+void g() throw();\n+SA(noexcept(g()));\n+SA(!noexcept(f()));\n+SA(!noexcept(throw 1));\n+SA(noexcept(42));\n+\n+struct A\n+{\n+  virtual ~A();\n+};\n+\n+struct B: public A\n+{\n+  virtual ~B();\n+};\n+\n+A* ap;\n+\n+struct C { };\n+C* cp;\n+\n+SA (noexcept (dynamic_cast<B*>(ap)));\n+SA (!noexcept (dynamic_cast<B&>(*ap)));\n+SA (!noexcept (typeid (*ap)));\n+SA (noexcept (typeid (*cp)));\n+\n+SA (!noexcept (true ? 1 : throw 1));\n+SA (!noexcept (true || true ? 1 : throw 1));\n+\n+SA (noexcept (C()));\n+\n+struct D\n+{\n+  D() throw();\n+};\n+\n+SA (noexcept (D()));\n+\n+struct E\n+{\n+  E() throw();\n+  ~E();\n+};\n+\n+SA (!noexcept (E()));\n+\n+struct F\n+{\n+  virtual void f();\n+};\n+\n+SA (noexcept (F()));\n+\n+template <class T, bool b>\n+void tf()\n+{\n+  SA (noexcept (T()) == b);\n+}\n+\n+template void tf<int,true>();\n+template void tf<E, false>();\n+\n+// Make sure that noexcept uses the declared exception-specification, not\n+// any knowledge we might have about whether or not the function really\n+// throws.\n+void h() { }\n+SA(!noexcept(h()));"}]}