{"sha": "04a2cf3fd65c21e9099edea462c22446fa72d398", "node_id": "C_kwDOANBUbNoAKDA0YTJjZjNmZDY1YzIxZTkwOTllZGVhNDYyYzIyNDQ2ZmE3MmQzOTg", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-28T00:16:39Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-28T00:16:39Z"}, "message": "Daily bump.", "tree": {"sha": "1a77fa45af978aef4b76861797812d5d1c12016d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a77fa45af978aef4b76861797812d5d1c12016d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04a2cf3fd65c21e9099edea462c22446fa72d398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a2cf3fd65c21e9099edea462c22446fa72d398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a2cf3fd65c21e9099edea462c22446fa72d398", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a2cf3fd65c21e9099edea462c22446fa72d398/comments", "author": null, "committer": null, "parents": [{"sha": "b0b1d8d5d90d7c499e2733e8d01ba8b73217f332", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b1d8d5d90d7c499e2733e8d01ba8b73217f332", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0b1d8d5d90d7c499e2733e8d01ba8b73217f332"}], "stats": {"total": 278, "additions": 277, "deletions": 1}, "files": [{"sha": "c68f4cd4d64af92cce6cabfd30ef39dc51a7794b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a2cf3fd65c21e9099edea462c22446fa72d398/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a2cf3fd65c21e9099edea462c22446fa72d398/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04a2cf3fd65c21e9099edea462c22446fa72d398", "patch": "@@ -1,3 +1,97 @@\n+2021-10-27  Saagar Jha  <saagar@saagarjha.com>\n+\n+\t* config.gcc: Adjust for Darwin21.\n+\t* config/darwin-c.c (macosx_version_as_macro): Likewise.\n+\t* config/darwin-driver.c (validate_macosx_version_min):\n+\tLikewise.\n+\t(darwin_find_version_from_kernel): Likewise.\n+\n+2021-10-27  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc\n+\t(path_range_query::range_defined_in_block): Call killing_def.\n+\n+2021-10-27  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-fold.cc (fold_using_range::range_of_range_op): Dump\n+\toperands as well as relation.\n+\t* gimple-range-path.cc\n+\t(path_range_query::compute_ranges_in_block): Compute PHI relations\n+\tfirst.  Compute outgoing relations at the end.\n+\t(path_range_query::compute_ranges): Remove call to compute_relations.\n+\t(path_range_query::compute_relations): Remove.\n+\t(path_range_query::maybe_register_phi_relation): New.\n+\t(path_range_query::compute_phi_relations): Abstract out\n+\tregistering one PHI relation to...\n+\t(path_range_query::compute_outgoing_relations): ...here.\n+\t* gimple-range-path.h (class path_range_query): Remove\n+\tcompute_relations.\n+\tAdd maybe_register_phi_relation.\n+\n+2021-10-27  Aldy Hernandez  <aldyh@redhat.com>\n+\t    Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* value-relation.cc (path_oracle::killing_def): Kill second\n+\torder relations.\n+\n+2021-10-27  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-cp.c (good_cloning_opportunity_p): Decide whether to use\n+\tprofile feedback depending on their local availability.\n+\n+2021-10-27  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* params.opt (param_ipa_cp_profile_count_base): New parameter.\n+\t* doc/invoke.texi (Optimize Options): Add entry for\n+\tipa-cp-profile-count-base.\n+\t* ipa-cp.c (max_count): Replace with base_count, replace all\n+\toccurrences too, unless otherwise stated.\n+\t(ipcp_cloning_candidate_p): identify mostly-directly called\n+\tfunctions based on their counts, not max_count.\n+\t(compare_edge_profile_counts): New function.\n+\t(ipcp_propagate_stage): Instead of setting max_count, find the\n+\tappropriate edge count in a sorted vector of counts of eligible\n+\tedges and make it the base_count.\n+\n+2021-10-27  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-cp.c (struct caller_statistics): New fields rec_count_sum,\n+\tn_nonrec_calls and itself, document all fields.\n+\t(init_caller_stats): Initialize the above new fields.\n+\t(gather_caller_stats): Gather self-recursive counts and calls number.\n+\t(get_info_about_necessary_edges): Gather counts of self-recursive and\n+\tother edges bringing in the requested value separately.\n+\t(dump_profile_updates): Rework to dump info about a single node only.\n+\t(lenient_count_portion_handling): New function.\n+\t(struct gather_other_count_struct): New type.\n+\t(gather_count_of_non_rec_edges): New function.\n+\t(struct desc_incoming_count_struct): New type.\n+\t(analyze_clone_icoming_counts): New function.\n+\t(adjust_clone_incoming_counts): Likewise.\n+\t(update_counts_for_self_gen_clones): Likewise.\n+\t(update_profiling_info): Rewritten.\n+\t(update_specialized_profile): Adjust call to dump_profile_updates.\n+\t(create_specialized_node): Do not update profiling info.\n+\t(decide_about_value): New parameter self_gen_clones, either push new\n+\tclones into it or updat their profile counts.  For self-recursively\n+\tgenerated values, use a portion of the node count instead of count\n+\tfrom self-recursive edges to estimate goodness.\n+\t(decide_whether_version_node): Gather clones for self-generated values\n+\tin a new vector, update their profiles at once at the end.\n+\n+2021-10-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.c (vect_transform_loops): New function,\n+\tsplit out from ...\n+\t(try_vectorize_loop_1): ... here.  Simplify as epilogues\n+\tare now fully handled in the split part.\n+\n+2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-expand.c (expand_omp_for_init_counts): Handle non-rectangular\n+\titerators with pointer types.\n+\t(expand_omp_for_init_vars, extract_omp_for_update_vars): Likewise.\n+\n 2021-10-26  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/102238"}, {"sha": "0549f2720577f05087984ca12f8106cc3efd1725", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a2cf3fd65c21e9099edea462c22446fa72d398/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a2cf3fd65c21e9099edea462c22446fa72d398/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=04a2cf3fd65c21e9099edea462c22446fa72d398", "patch": "@@ -1 +1 @@\n-20211027\n+20211028"}, {"sha": "18ba338c591b34dab7ff48b7d2e2c87030a91a22", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a2cf3fd65c21e9099edea462c22446fa72d398/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a2cf3fd65c21e9099edea462c22446fa72d398/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=04a2cf3fd65c21e9099edea462c22446fa72d398", "patch": "@@ -1,3 +1,21 @@\n+2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-omp.c (c_omp_check_loop_iv_r): Don't clear 3rd bit for\n+\tPOINTER_PLUS_EXPR.\n+\t(c_omp_check_nonrect_loop_iv): Handle POINTER_PLUS_EXPR.\n+\t(c_omp_check_loop_iv): Set kind even if the iterator is non-integral.\n+\n+2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102854\n+\t* c-common.h (c_omp_check_loop_iv_exprs): Add enum tree_code argument.\n+\t* c-omp.c (c_omp_check_loop_iv_r): For trees other than decls,\n+\tTREE_VEC, PLUS_EXPR, MINUS_EXPR, MULT_EXPR, POINTER_PLUS_EXPR or\n+\tconversions temporarily clear the 3rd bit from d->kind while walking\n+\tsubtrees.\n+\t(c_omp_check_loop_iv_exprs): Add CODE argument.  Or in 4 into data.kind\n+\tif possibly non-rectangular.\n+\n 2021-10-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/64888"}, {"sha": "9bb19f22406afa6e7718f1bacebfe3fc76b0ebba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a2cf3fd65c21e9099edea462c22446fa72d398/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a2cf3fd65c21e9099edea462c22446fa72d398/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=04a2cf3fd65c21e9099edea462c22446fa72d398", "patch": "@@ -1,3 +1,34 @@\n+2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102854\n+\t* semantics.c (handle_omp_for_class_iterator,\n+\tfinish_omp_for): Adjust c_omp_check_loop_iv_exprs caller.\n+\n+2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102753\n+\t* constexpr.c (cxx_eval_outermost_constant_expr): Perform\n+\tfind_immediate_fndecl discovery if is_consteval or\n+\tin_immediate_context () rather than if is_consteval, t != r\n+\tand not in immediate function's body.\n+\n+2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102753\n+\t* cp-tree.h (saved_scope): Document that consteval_if_p member\n+\tis also set while processing immediate invocation.\n+\t(in_immediate_context): Declare.\n+\t* call.c (in_immediate_context): New function.\n+\t(immediate_invocation_p): Use it.\n+\t(struct in_consteval_if_p_temp_override): New class.\n+\t(build_over_call): Temporarily set in_consteval_if_p for processing\n+\timmediate invocation arguments.\n+\t* typeck.c (cp_build_addr_expr_1): Diagnose taking address of\n+\tan immediate method.  Use t instead of TREE_OPERAND (arg, 1).\n+\tUse in_immediate_context function.\n+\t* constexpr.c (find_immediate_fndecl): Handle PTRMEM_CST\n+\twhich refers to immediate function decl.\n+\n 2021-10-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/102617"}, {"sha": "70a4aa56c5ffa96402b81fea9336fc85e519ac20", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a2cf3fd65c21e9099edea462c22446fa72d398/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a2cf3fd65c21e9099edea462c22446fa72d398/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=04a2cf3fd65c21e9099edea462c22446fa72d398", "patch": "@@ -1,3 +1,70 @@\n+2021-10-27  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* intrinsic.h (gfc_check_sum, gfc_resolve_atan2d, gfc_resolve_kill,\n+\tgfc_resolve_kill_sub): Delete declaration.\n+\n+2021-10-27  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* trans-types.h (gfc_convert_function_code): Delete.\n+\n+2021-10-27  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* trans-stmt.h (gfc_trans_deallocate_array): Delete.\n+\n+2021-10-27  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* trans-array.c (gfc_trans_scalarized_loop_end): Make static.\n+\t* trans-array.h (gfc_trans_scalarized_loop_end,\n+\tgfc_conv_tmp_ref, gfc_conv_array_transpose): Delete declaration.\n+\n+2021-10-27  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* constructor.c (gfc_constructor_get_base): Make static.\n+\t(gfc_constructor_expr_foreach, gfc_constructor_swap): Delete.\n+\t* constructor.h (gfc_constructor_get_base): Remove declaration.\n+\t(gfc_constructor_expr_foreach, gfc_constructor_swap): Delete.\n+\n+2021-10-27  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* decl.c (gfc_match_old_kind_spec, set_com_block_bind_c,\n+\tset_verify_bind_c_sym, set_verify_bind_c_com_block,\n+\tget_bind_c_idents, gfc_match_suffix, gfc_get_type_attr_spec,\n+\tcheck_extended_derived_type): Make static.\n+\t(gfc_match_gcc_unroll): Add comment.\n+\t* match.c (gfc_match_small_int_expr): Delete definition.\n+\t* match.h (gfc_match_small_int_expr): Delete declaration.\n+\t(gfc_match_name_C, gfc_match_old_kind_spec, set_com_block_bind_c,\n+\tset_verify_bind_c_sym, set_verify_bind_c_com_block,\n+\tget_bind_c_idents, gfc_match_suffix,\n+\tgfc_get_type_attr_spec): Delete declaration.\n+\n+2021-10-27  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* expr.c (is_non_empty_structure_constructor): Make static.\n+\t* gfortran.h (gfc_check_any_c_kind): Delete.\n+\t* match.c (gfc_match_label): Make static.\n+\t* match.h (gfc_match_label): Delete declaration.\n+\t* scanner.c (file_changes_cur, file_changes_count,\n+\tfile_changes_allocated): Make static.\n+\t* trans-expr.c (gfc_get_character_len): Make static.\n+\t(gfc_class_len_or_zero_get): Make static.\n+\t(VTAB_GET_FIELD_GEN): Undefine.\n+\t(gfc_get_class_array_ref): Make static.\n+\t(gfc_finish_interface_mapping): Make static.\n+\t* trans-types.c (gfc_check_any_c_kind): Delete.\n+\t(pfunc_type_node, dtype_type_node, gfc_get_ppc_type): Make static.\n+\t* trans-types.h (gfc_get_ppc_type): Delete declaration.\n+\t* trans.c (gfc_msg_wrong_return): Delete.\n+\t* trans.h (gfc_class_len_or_zero_get, gfc_class_vtab_extends_get,\n+\tgfc_vptr_extends_get, gfc_get_class_array_ref, gfc_get_character_len,\n+\tgfc_finish_interface_mapping, gfc_msg_wrong_return,\n+\tgfc_get_function_decl): Delete declaration.\n+\n+2021-10-27  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* trans-stmt.c (gfc_trans_select_rank_cases): Fix condition\n+\tfor allocatables/pointers.\n+\n 2021-10-26  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/102956"}, {"sha": "b69666d2fa0b1d882778e06184f639d88e55a5cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a2cf3fd65c21e9099edea462c22446fa72d398/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a2cf3fd65c21e9099edea462c22446fa72d398/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04a2cf3fd65c21e9099edea462c22446fa72d398", "patch": "@@ -1,3 +1,44 @@\n+2021-10-27  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/Warray-bounds-90.c: Fix a typo.\n+\n+2021-10-27  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/PR93963.f90: Extend testcase by scan-tree-dump test.\n+\n+2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/102897\n+\t* gcc.dg/pr102897.c: Add -Wno-psabi to dg-options.\n+\n+2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/loop-8.c: New test.\n+\t* c-c++-common/gomp/loop-9.c: New test.\n+\n+2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102854\n+\t* g++.dg/gomp/loop-3.C: Don't expect some errors.\n+\t* g++.dg/gomp/loop-7.C: New test.\n+\n+2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102753\n+\t* g++.dg/cpp2a/consteval7.C: Expect diagnostics on quux.\n+\t* g++.dg/cpp2a/consteval24.C: New test.\n+\t* g++.dg/cpp23/consteval-if12.C: New test.\n+\n+2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102753\n+\t* g++.dg/cpp2a/consteval13.C: Don't expect errors.\n+\t* g++.dg/cpp2a/consteval20.C: New test.\n+\t* g++.dg/cpp2a/consteval21.C: New test.\n+\t* g++.dg/cpp2a/consteval22.C: New test.\n+\t* g++.dg/cpp2a/consteval23.C: New test.\n+\t* g++.dg/cpp23/consteval-if11.C: New test.\n+\n 2021-10-26  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/102238"}, {"sha": "4550672684e208a11cc13557eaf01dea2a1ea99b", "filename": "libffi/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a2cf3fd65c21e9099edea462c22446fa72d398/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a2cf3fd65c21e9099edea462c22446fa72d398/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=04a2cf3fd65c21e9099edea462c22446fa72d398", "patch": "@@ -1,3 +1,7 @@\n+2021-10-27  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* LOCAL_PATCHES: Add commit 90454a90082.\n+\n 2021-10-25  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* src/powerpc/linux64.S: Enable AltiVec insns."}, {"sha": "37774451f68cff13388552b15a9bb7d91c3f4d2f", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a2cf3fd65c21e9099edea462c22446fa72d398/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a2cf3fd65c21e9099edea462c22446fa72d398/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=04a2cf3fd65c21e9099edea462c22446fa72d398", "patch": "@@ -1,3 +1,14 @@\n+2021-10-27  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config.host (hppa*64*-*-linux*): Don't add pa/t-linux to\n+\ttmake_file.\n+\t* config/pa/linux-atomic.c: Define u8, u16 and u64 types.\n+\tUse them in FETCH_AND_OP_2, OP_AND_FETCH_2, COMPARE_AND_SWAP_2,\n+\tSYNC_LOCK_TEST_AND_SET_2 and SYNC_LOCK_RELEASE_1 macros.\n+\t* config/pa/t-linux64 (LIB1ASMSRC): New define.\n+\t(LIB1ASMFUNCS): Revise.\n+\t(HOST_LIBGCC2_CFLAGS): Add \"-DLINUX=1\".\n+\n 2021-10-22  Stafford Horne  <shorne@gmail.com>\n \n \t* config/or1k/sfp-machine.h (_FP_TININESS_AFTER_ROUNDING):"}, {"sha": "123d2536cbefd1ce535dce3c2da5da7f4f7aab50", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a2cf3fd65c21e9099edea462c22446fa72d398/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a2cf3fd65c21e9099edea462c22446fa72d398/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=04a2cf3fd65c21e9099edea462c22446fa72d398", "patch": "@@ -1,3 +1,13 @@\n+2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgomp.texi (OpenMP 5.0): Mention that Non-rectangular loop nests\n+\taren't implemented for Fortran yet.\n+\n+2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c/loop-26.c: New test.\n+\t* testsuite/libgomp.c/loop-27.c: New test.\n+\n 2021-10-25  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR testsuite/102910"}]}