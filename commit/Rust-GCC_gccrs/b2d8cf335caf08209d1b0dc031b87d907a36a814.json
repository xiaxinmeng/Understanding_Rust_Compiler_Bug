{"sha": "b2d8cf335caf08209d1b0dc031b87d907a36a814", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJkOGNmMzM1Y2FmMDgyMDlkMWIwZGMwMzFiODdkOTA3YTM2YTgxNA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-05-31T19:01:37Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-05-31T19:01:37Z"}, "message": "Add -mabi=n32 support.\n\n(ABI_64BIT): Delete.\n(TARGET_OPTIONS, INITIAL_ELIMINATION_OFFSET, GO_IF_LEGITIMATE_ADDRESS,\nCONSTANT_ADDRESS_P, LEGITIMATE_CONSTANT_P, LEGITIMIZE_ADDRESS,\nASM_OUTPUT_ADDR_DIFF_ELT): Modify.\n(enum mips_abi_type, SUBTARGET_TARGET_OPTIONS): Define.\n(mips_abi, mips_abi_string): Declare.\n\nFrom-SVN: r12131", "tree": {"sha": "33a7c8ab7afa912f904d20d042316a3512158ed2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33a7c8ab7afa912f904d20d042316a3512158ed2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2d8cf335caf08209d1b0dc031b87d907a36a814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2d8cf335caf08209d1b0dc031b87d907a36a814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2d8cf335caf08209d1b0dc031b87d907a36a814", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2d8cf335caf08209d1b0dc031b87d907a36a814/comments", "author": null, "committer": null, "parents": [{"sha": "694aa3f2a28d53464aaddee011f1652793ae222e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/694aa3f2a28d53464aaddee011f1652793ae222e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/694aa3f2a28d53464aaddee011f1652793ae222e"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "037836e0984009cc4157fe0e11718a4b9b113d35", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2d8cf335caf08209d1b0dc031b87d907a36a814/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2d8cf335caf08209d1b0dc031b87d907a36a814/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=b2d8cf335caf08209d1b0dc031b87d907a36a814", "patch": "@@ -74,6 +74,22 @@ enum processor_type {\n /* Recast the cpu class to be the cpu attribute.  */\n #define mips_cpu_attr ((enum attr_cpu)mips_cpu)\n \n+/* Which ABI to use.  This is only used by the Irix 6 port currently.  */\n+\n+enum mips_abi_type {\n+  ABI_32,\n+  ABI_N32,\n+  ABI_64\n+};\n+\n+#ifndef MIPS_ABI_DEFAULT\n+/* We define this away so that there is no extra runtime cost if the target\n+   doesn't support multiple ABIs.  */\n+#define mips_abi ABI_32\n+#else\n+extern enum mips_abi_type mips_abi;\n+#endif\n+\n /* Whether to emit abicalls code sequences or not.  */\n \n enum mips_abicalls_type {\n@@ -119,6 +135,7 @@ extern enum mips_abicalls_type mips_abicalls;/* for svr4 abi pic calls */\n extern int mips_isa;\t\t\t/* architectural level */\n extern char *mips_cpu_string;\t\t/* for -mcpu=<xxx> */\n extern char *mips_isa_string;\t\t/* for -mips{1,2,3,4} */\n+extern char *mips_abi_string;\t\t/* for -misa={32,n32,64} */\n extern int dslots_load_total;\t\t/* total # load related delay slots */\n extern int dslots_load_filled;\t\t/* # filled load delay slots */\n extern int dslots_jump_total;\t\t/* total # jump related delay slots */\n@@ -450,10 +467,14 @@ extern char\t       *mktemp ();\n \n #define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n+  SUBTARGET_TARGET_OPTIONS\t\t\t\t\t\t\\\n   { \"cpu=\",\t&mips_cpu_string\t},\t\t\t\t\\\n   { \"ips\",\t&mips_isa_string\t}\t\t\t\t\\\n }\n \n+/* This is meant to be redefined in the host dependent files.  */\n+#define SUBTARGET_TARGET_OPTIONS\n+\n /* Macros to decide whether certain features are available or not,\n    depending on the instruction set architecture level.  */\n \n@@ -530,7 +551,7 @@ do\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n \n-/* This is meant to be redefined in the host dependent files */\n+/* This is meant to be redefined in the host dependent files.  */\n #define SUBTARGET_CONDITIONAL_REGISTER_USAGE\n \n /* Show we can debug even without a frame pointer.  */\n@@ -1635,10 +1656,6 @@ extern enum reg_class\tmips_secondary_reload_class ();\n \f\n /* Stack layout; function entry, exit and calling.  */\n \n-/* Don't enable support for the 64 bit ABI calling convention.\n-   Some embedded code depends on the old 64 bit calling convention.  */\n-#define ABI_64BIT 0\n-\n /* Define this if pushing a word on the stack\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n@@ -1790,7 +1807,7 @@ extern struct mips_frame_info current_frame_info;\n \t    && ((TO) == FRAME_POINTER_REGNUM\t\t\t\t \\\n \t\t|| (TO) == STACK_POINTER_REGNUM))\t\t\t \\\n     (OFFSET) = (current_frame_info.total_size\t\t\t\t \\\n-\t\t- (ABI_64BIT && mips_isa >= 3\t\t\t\t \\\n+\t\t- (mips_abi != ABI_32\t\t\t\t\t \\\n \t\t   ? current_function_pretend_args_size\t\t\t \\\n \t\t   : 0));\t\t\t\t\t\t \\\n   else if ((FROM) == RETURN_ADDRESS_POINTER_REGNUM\t\t\t \\\n@@ -2371,7 +2388,7 @@ typedef struct mips_args {\n           /* ??? Reject combining an address with a register for the MIPS  \\\n \t     64 bit ABI, because the SGI assembler can not handle this.  */ \\\n \t  if (!TARGET_DEBUG_A_MODE\t\t\t\t\t\\\n-\t      && ! ABI_64BIT\t\t\t\t\t\t\\\n+\t      && mips_abi == ABI_32\t\t\t\t\t\\\n \t      && CONSTANT_ADDRESS_P (xplus1)\t\t\t\t\\\n \t      && (!TARGET_EMBEDDED_PIC\t\t\t\t\t\\\n \t\t  || code1 != CONST\t\t\t\t\t\\\n@@ -2400,7 +2417,7 @@ typedef struct mips_args {\n     || GET_CODE (X) == CONST_INT || GET_CODE (X) == HIGH\t\t\\\n     || (GET_CODE (X) == CONST\t\t\t\t\t\t\\\n \t&& ! (flag_pic && pic_address_needs_scratch (X))\t\t\\\n-\t&& ! ABI_64BIT))\t\t\t\t\t\t\\\n+\t&& mips_abi == ABI_32))\t\t\t\t\t\t\\\n    && (!HALF_PIC_P () || !HALF_PIC_ADDRESS_P (X)))\n \n /* Define this, so that when PIC, reload won't try to reload invalid\n@@ -2419,7 +2436,7 @@ typedef struct mips_args {\n #define LEGITIMATE_CONSTANT_P(X)\t\t\t\t\t\\\n   ((GET_CODE (X) != CONST_DOUBLE\t\t\t\t\t\\\n     || mips_const_double_ok (X, GET_MODE (X)))\t\t\t\t\\\n-   && ! (GET_CODE (X) == CONST && ABI_64BIT))\n+   && ! (GET_CODE (X) == CONST && mips_abi != ABI_32))\n \n /* A C compound statement that attempts to replace X with a valid\n    memory address for an operand of mode MODE.  WIN will be a C\n@@ -2473,7 +2490,7 @@ typedef struct mips_args {\n   if (GET_CODE (xinsn) == CONST\t\t\t\t\t\t\\\n       && ((flag_pic && pic_address_needs_scratch (xinsn))\t\t\\\n \t  /* ??? SGI's Irix 6 assembler can't handle CONST.  */\t\t\\\n-\t  || ABI_64BIT))\t\t\t\t\t\t\\\n+\t  || mips_abi != ABI_32))\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rtx ptr_reg = gen_reg_rtx (Pmode);\t\t\t\t\\\n       rtx constant = XEXP (XEXP (xinsn, 0), 1);\t\t\t\t\\\n@@ -3594,15 +3611,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n     fprintf (STREAM, \"\\t%s\\t%sL%d-%sLS%d\\n\",\t\t\t\t\\\n \t     TARGET_LONG64 ? \".dword\" : \".word\",\t\t\t\\\n \t     LOCAL_LABEL_PREFIX, VALUE, LOCAL_LABEL_PREFIX, REL);\t\\\n-  else if (! ABI_64BIT)\t\t\t\t\t\t\t\\\n+  else if (mips_abi == ABI_32)\t\t\t\t\t\t\\\n     fprintf (STREAM, \"\\t%s\\t%sL%d\\n\",\t\t\t\t\t\\\n \t     TARGET_LONG64 ? \".gpdword\" : \".gpword\",\t\t\t\\\n \t     LOCAL_LABEL_PREFIX, VALUE);\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n-    /* ??? Why does this one use . and not LOCAL_LABEL_PREFIX?  */\t\\\n-    fprintf (STREAM, \"\\t%s\\t.L%d\\n\",\t\t\t\t\t\\\n+    fprintf (STREAM, \"\\t%s\\t%sL%d\\n\",\t\t\t\t\t\\\n \t     TARGET_LONG64 ? \".dword\" : \".word\",\t\t\t\\\n-\t     VALUE);\t\t\t\t\t\t\t\\\n+\t     LOCAL_LABEL_PREFIX, VALUE);\t\t\t\t\\\n } while (0)\n \n /* When generating embedded PIC code we want to put the jump table in"}]}