{"sha": "fbe9af5042f7c09bc00c105ef1a30ac7149171e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJlOWFmNTA0MmY3YzA5YmMwMGMxMDVlZjFhMzBhYzcxNDkxNzFlNA==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2018-10-01T13:03:31Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2018-10-01T13:03:31Z"}, "message": "Set default values for stack-clash and do basic validation in back-end.\n\n\nThis patch enforces that the default guard size for stack-clash protection for\nAArch64 be 64KB unless the user has overriden it via configure in which case\nthe user value is used as long as that value is within the valid range.\n\nIt also does some basic validation to ensure that the guard size is only 4KB or\n64KB and also enforces that for aarch64 the stack-clash probing interval is\nequal to the guard size.\n\ngcc/\n\n\tPR target/86486\n\t* config/aarch64/aarch64.c (aarch64_override_options_internal):\n\tAdd validation for stack-clash parameters and set defaults.\n\nFrom-SVN: r264753", "tree": {"sha": "ff7274453dc6ffacd117f066e0a1eebb7e81e800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff7274453dc6ffacd117f066e0a1eebb7e81e800"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbe9af5042f7c09bc00c105ef1a30ac7149171e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe9af5042f7c09bc00c105ef1a30ac7149171e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe9af5042f7c09bc00c105ef1a30ac7149171e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe9af5042f7c09bc00c105ef1a30ac7149171e4/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "630b1e3a187dc843958e8966345da6191226b8e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630b1e3a187dc843958e8966345da6191226b8e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630b1e3a187dc843958e8966345da6191226b8e2"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "0eafc63fb697651a0fa3fce47d499500cb2b3c4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe9af5042f7c09bc00c105ef1a30ac7149171e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe9af5042f7c09bc00c105ef1a30ac7149171e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbe9af5042f7c09bc00c105ef1a30ac7149171e4", "patch": "@@ -1,3 +1,9 @@\n+2018-10-01  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/86486\n+\t* config/aarch64/aarch64.c (aarch64_override_options_internal):\n+\tAdd validation for stack-clash parameters and set defaults.\n+\n 2018-10-01  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR target/86486"}, {"sha": "fc42354959008eb98184ace6e1141c73a9192082", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe9af5042f7c09bc00c105ef1a30ac7149171e4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe9af5042f7c09bc00c105ef1a30ac7149171e4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=fbe9af5042f7c09bc00c105ef1a30ac7149171e4", "patch": "@@ -10992,6 +10992,37 @@ aarch64_override_options_internal (struct gcc_options *opts)\n \t\t\t opts->x_param_values,\n \t\t\t global_options_set.x_param_values);\n \n+  /* If the user hasn't changed it via configure then set the default to 64 KB\n+     for the backend.  */\n+  maybe_set_param_value (PARAM_STACK_CLASH_PROTECTION_GUARD_SIZE,\n+\t\t\t DEFAULT_STK_CLASH_GUARD_SIZE == 0\n+\t\t\t   ? 16 : DEFAULT_STK_CLASH_GUARD_SIZE,\n+\t\t\t opts->x_param_values,\n+\t\t\t global_options_set.x_param_values);\n+\n+  /* Validate the guard size.  */\n+  int guard_size = PARAM_VALUE (PARAM_STACK_CLASH_PROTECTION_GUARD_SIZE);\n+  if (guard_size != 12 && guard_size != 16)\n+    error (\"only values 12 (4 KB) and 16 (64 KB) are supported for guard \"\n+\t   \"size.  Given value %d (%llu KB) is out of range.\",\n+\t   guard_size, (1ULL << guard_size) / 1024ULL);\n+\n+  /* Enforce that interval is the same size as size so the mid-end does the\n+     right thing.  */\n+  maybe_set_param_value (PARAM_STACK_CLASH_PROTECTION_PROBE_INTERVAL,\n+\t\t\t guard_size,\n+\t\t\t opts->x_param_values,\n+\t\t\t global_options_set.x_param_values);\n+\n+  /* The maybe_set calls won't update the value if the user has explicitly set\n+     one.  Which means we need to validate that probing interval and guard size\n+     are equal.  */\n+  int probe_interval\n+    = PARAM_VALUE (PARAM_STACK_CLASH_PROTECTION_PROBE_INTERVAL);\n+  if (guard_size != probe_interval)\n+    error (\"stack clash guard size '%d' must be equal to probing interval \"\n+\t   \"'%d'\", guard_size, probe_interval);\n+\n   /* Enable sw prefetching at specified optimization level for\n      CPUS that have prefetch.  Lower optimization level threshold by 1\n      when profiling is enabled.  */"}]}