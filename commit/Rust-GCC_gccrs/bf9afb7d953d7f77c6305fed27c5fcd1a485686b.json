{"sha": "bf9afb7d953d7f77c6305fed27c5fcd1a485686b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY5YWZiN2Q5NTNkN2Y3N2M2MzA1ZmVkMjdjNWZjZDFhNDg1Njg2Yg==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2010-09-17T17:51:43Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2010-09-17T17:51:43Z"}, "message": "rx.c (valid_psw_flag): New.\n\n* config/rx/rx.c (valid_psw_flag): New.\n(rx_expand_builtin): Call it for setpsw/clrpsw.\n(rx_expand_builtin_mvtipl): Pass an integer to IN_RANGE, not an\nRTX.\n* config/rx/rx.md (bitclr): Don't mark the output as early-clobber.\n(bitclr_in_memory): Likewise.\n(clrspw, setpsw, mvfc, mvtc, mvtipl): Make volatile.\n\nFrom-SVN: r164376", "tree": {"sha": "2261f24044404d72b7b8641faff82d36013f228d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2261f24044404d72b7b8641faff82d36013f228d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf9afb7d953d7f77c6305fed27c5fcd1a485686b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf9afb7d953d7f77c6305fed27c5fcd1a485686b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf9afb7d953d7f77c6305fed27c5fcd1a485686b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf9afb7d953d7f77c6305fed27c5fcd1a485686b/comments", "author": null, "committer": null, "parents": [{"sha": "765c3e8f08dbd7208f348e5d318ed2dc8042275b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765c3e8f08dbd7208f348e5d318ed2dc8042275b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/765c3e8f08dbd7208f348e5d318ed2dc8042275b"}], "stats": {"total": 66, "additions": 54, "deletions": 12}, "files": [{"sha": "cb1bbd1fbbc0883310acf5b9b20f6798afa29903", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9afb7d953d7f77c6305fed27c5fcd1a485686b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9afb7d953d7f77c6305fed27c5fcd1a485686b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf9afb7d953d7f77c6305fed27c5fcd1a485686b", "patch": "@@ -1,3 +1,16 @@\n+2010-09-17  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/rx/rx.c (rx_print_operand): If __builtin_rx_setpsw() is\n+\tpassed an invalid value, print an error instead of ICEing.\n+\t(valid_psw_flag): New.\n+\t(rx_expand_builtin): Call it for setpsw/clrpsw.\n+\t(rx_expand_builtin_mvtipl): Pass an integer to IN_RANGE, not an\n+\tRTX.\n+\n+\t* config/rx/rx.md (bitclr): Don't mark the output as early-clobber.\n+\t(bitclr_in_memory): Likewise.\n+\t(clrspw, setpsw, mvfc, mvtc, mvtipl): Make volatile.\n+\n 2010-09-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/45678"}, {"sha": "a932eb5bef0a31ba8dc17e2d2362af9e388dc2dd", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9afb7d953d7f77c6305fed27c5fcd1a485686b/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9afb7d953d7f77c6305fed27c5fcd1a485686b/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=bf9afb7d953d7f77c6305fed27c5fcd1a485686b", "patch": "@@ -1905,7 +1905,7 @@ rx_expand_builtin_mvtipl (rtx arg)\n   if (rx_cpu_type == RX610)\n     return NULL_RTX;\n \n-  if (! CONST_INT_P (arg) || ! IN_RANGE (arg, 0, (1 << 4) - 1))\n+  if (! CONST_INT_P (arg) || ! IN_RANGE (INTVAL (arg), 0, (1 << 4) - 1))\n     return NULL_RTX;\n \n   emit_insn (gen_mvtipl (arg));\n@@ -1974,6 +1974,31 @@ rx_expand_builtin_round (rtx arg, rtx target)\n   return target;\n }\n \n+static int\n+valid_psw_flag (rtx op, char *which)\n+{\n+  static int mvtc_inform_done = 0;\n+\n+  if (GET_CODE (op) == CONST_INT)\n+    switch (INTVAL (op))\n+      {\n+      case 0: case 'c': case 'C':\n+      case 1: case 'z': case 'Z':\n+      case 2: case 's': case 'S':\n+      case 3: case 'o': case 'O':\n+      case 8: case 'i': case 'I':\n+      case 9: case 'u': case 'U':\n+\treturn 1;\n+      }\n+\n+  error (\"__builtin_rx_%s takes 'C', 'Z', 'S', 'O', 'I', or 'U'\", which);\n+  if (!mvtc_inform_done)\n+    error (\"use __builtin_rx_mvtc (0, ... ) to write arbitrary values to PSW\");\n+  mvtc_inform_done = 1;\n+\n+  return 0;\n+}\n+\n static rtx\n rx_expand_builtin (tree exp,\n \t\t   rtx target,\n@@ -1989,10 +2014,14 @@ rx_expand_builtin (tree exp,\n   switch (fcode)\n     {\n     case RX_BUILTIN_BRK:     emit_insn (gen_brk ()); return NULL_RTX;\n-    case RX_BUILTIN_CLRPSW:  return rx_expand_void_builtin_1_arg\n-\t(op, gen_clrpsw, false);\n-    case RX_BUILTIN_SETPSW:  return rx_expand_void_builtin_1_arg\n-\t(op, gen_setpsw, false);\n+    case RX_BUILTIN_CLRPSW:\n+      if (!valid_psw_flag (op, \"clrpsw\"))\n+\treturn NULL_RTX;\n+      return rx_expand_void_builtin_1_arg (op, gen_clrpsw, false);\n+    case RX_BUILTIN_SETPSW:\n+      if (!valid_psw_flag (op, \"setpsw\"))\n+\treturn NULL_RTX;\n+      return rx_expand_void_builtin_1_arg (op, gen_setpsw, false);\n     case RX_BUILTIN_INT:     return rx_expand_void_builtin_1_arg\n \t(op, gen_int, false);\n     case RX_BUILTIN_MACHI:   return rx_expand_builtin_mac (exp, gen_machi);"}, {"sha": "e0271d663227522c7cd0a7f09fdc8ecdcb47b025", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9afb7d953d7f77c6305fed27c5fcd1a485686b/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9afb7d953d7f77c6305fed27c5fcd1a485686b/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=bf9afb7d953d7f77c6305fed27c5fcd1a485686b", "patch": "@@ -1369,7 +1369,7 @@\n )\n \n (define_insn \"bitclr\"\n-  [(set:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n+  [(set:SI (match_operand:SI 0 \"register_operand\" \"=r\")\n \t   (and:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t   (not:SI (ashift:SI (const_int 1)\n \t\t\t\t      (match_operand:SI 2 \"nonmemory_operand\" \"ri\")))))]\n@@ -1379,7 +1379,7 @@\n )\n \n (define_insn \"bitclr_in_memory\"\n-  [(set:QI (match_operand:QI 0 \"memory_operand\" \"+m\")\n+  [(set:QI (match_operand:QI 0 \"memory_operand\" \"=m\")\n \t   (and:QI (match_operand:QI 1 \"memory_operand\" \"0\")\n \t\t   (not:QI (ashift:QI (const_int 1)\n \t\t\t\t      (match_operand:QI 2 \"nonmemory_operand\" \"ri\")))))]\n@@ -1803,7 +1803,7 @@\n \n ;; Clear Processor Status Word\n (define_insn \"clrpsw\"\n-  [(unspec:SI [(match_operand:SI 0 \"immediate_operand\" \"i\")]\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"i\")]\n \t      UNSPEC_BUILTIN_CLRPSW)\n    (clobber (reg:CC CC_REG))]\n   \"\"\n@@ -1813,7 +1813,7 @@\n \n ;; Set Processor Status Word\n (define_insn \"setpsw\"\n-  [(unspec:SI [(match_operand:SI 0 \"immediate_operand\" \"i\")]\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"i\")]\n \t      UNSPEC_BUILTIN_SETPSW)\n    (clobber (reg:CC CC_REG))]\n   \"\"\n@@ -1824,7 +1824,7 @@\n ;; Move from control register\n (define_insn \"mvfc\"\n   [(set (match_operand:SI             0 \"register_operand\" \"=r\")\n-\t(unspec:SI [(match_operand:SI 1 \"immediate_operand\" \"i\")]\n+\t(unspec_volatile:SI [(match_operand:SI 1 \"immediate_operand\" \"i\")]\n \t\t   UNSPEC_BUILTIN_MVFC))]\n   \"\"\n   \"mvfc\\t%C1, %0\"\n@@ -1833,7 +1833,7 @@\n \n ;; Move to control register\n (define_insn \"mvtc\"\n-  [(unspec:SI [(match_operand:SI 0 \"immediate_operand\" \"i,i\")\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"i,i\")\n \t       (match_operand:SI 1 \"nonmemory_operand\" \"r,i\")]\n \t      UNSPEC_BUILTIN_MVTC)]\n   \"\"\n@@ -1848,7 +1848,7 @@\n \n ;; Move to interrupt priority level\n (define_insn \"mvtipl\"\n-  [(unspec:SI [(match_operand:SI 0 \"immediate_operand\" \"Uint04\")]\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"Uint04\")]\n \t      UNSPEC_BUILTIN_MVTIPL)]\n   \"\"\n   \"mvtipl\\t%0\""}]}