{"sha": "67c4d1c7addc88c2d133731cf81ffad7d50fa8b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdjNGQxYzdhZGRjODhjMmQxMzM3MzFjZjgxZmZhZDdkNTBmYThiOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-12-07T09:48:06Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-12-07T09:48:06Z"}, "message": "Fix internal error on library-level type extended locally\n\nThe compiler aborts on the local extension of a tagged type declared\nat library level, with a progenitor given by an interface type having\na primitive that is a homograph of a primitive of the tagged type.\n\ngcc/ada/ChangeLog:\n\t* gcc-interface/trans.c (maybe_make_gnu_thunk): Return false if the\n\ttarget is local and thunk and target do not have the same context.", "tree": {"sha": "ef65a492ce3d80d8aeb7316514183dc173300441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef65a492ce3d80d8aeb7316514183dc173300441"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67c4d1c7addc88c2d133731cf81ffad7d50fa8b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c4d1c7addc88c2d133731cf81ffad7d50fa8b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67c4d1c7addc88c2d133731cf81ffad7d50fa8b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c4d1c7addc88c2d133731cf81ffad7d50fa8b9/comments", "author": null, "committer": null, "parents": [{"sha": "6a1e04b2f0c28d46e193d30aac00a32ba850bf0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a1e04b2f0c28d46e193d30aac00a32ba850bf0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a1e04b2f0c28d46e193d30aac00a32ba850bf0a"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "4ab26d3e2dd7889f4b4d9a8542ffb7739138cb77", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c4d1c7addc88c2d133731cf81ffad7d50fa8b9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c4d1c7addc88c2d133731cf81ffad7d50fa8b9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=67c4d1c7addc88c2d133731cf81ffad7d50fa8b9", "patch": "@@ -10730,8 +10730,11 @@ maybe_make_gnu_thunk (Entity_Id gnat_thunk, tree gnu_thunk)\n \n   tree gnu_target = gnat_to_gnu_entity (gnat_target, NULL_TREE, false);\n \n-  /* Thunk and target must have the same nesting level, if any.  */\n-  gcc_assert (DECL_CONTEXT (gnu_thunk) == DECL_CONTEXT (gnu_target));\n+  /* If the target is local, then thunk and target must have the same context\n+     because cgraph_node::expand_thunk can only forward the static chain.  */\n+  if (DECL_STATIC_CHAIN (gnu_target)\n+      && DECL_CONTEXT (gnu_thunk) != DECL_CONTEXT (gnu_target))\n+    return false;\n \n   /* If the target returns by invisible reference and is external, apply the\n      same transformation as Subprogram_Body_to_gnu here.  */"}]}