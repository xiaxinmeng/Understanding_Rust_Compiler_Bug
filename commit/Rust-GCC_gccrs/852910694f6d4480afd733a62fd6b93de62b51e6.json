{"sha": "852910694f6d4480afd733a62fd6b93de62b51e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUyOTEwNjk0ZjZkNDQ4MGFmZDczM2E2MmZkNmI5M2RlNjJiNTFlNg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-08-05T00:38:31Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-08-05T00:38:31Z"}, "message": "c-common.c (c_stddef_cpp_builtins): Define __INTMAX_TYPE__ and __UINTMAX_TYPE__.\n\n\t* c-common.c (c_stddef_cpp_builtins): Define __INTMAX_TYPE__ and\n\t__UINTMAX_TYPE__.\n\t* c-cppbuiltin.c (builtin_define_stdint_macros): New.  Define\n\t__INTMAX_MAX__.\n\t(c_cpp_builtins): Call it.\n\t* doc/cpp.texi: Update.\n\ntestsuite:\n\t* gcc.c-torture/execute/builtins/abs-2.c,\n\tgcc.c-torture/execute/builtins/abs-3.c,\n\tgcc.c-torture/execute/builtins/lib/abs.c, gcc.dg/format/format.h,\n\tgcc.dg/torture/builtin-attr-1.c: Use predefined macros for\n\tintmax_t, uintmax_t and their limits.\n\t* gcc.dg/intmax_t-1.c: New test.\n\nFrom-SVN: r85588", "tree": {"sha": "06690c205a19e52eb65cb0ac2b6391e8c47bc57c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06690c205a19e52eb65cb0ac2b6391e8c47bc57c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/852910694f6d4480afd733a62fd6b93de62b51e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852910694f6d4480afd733a62fd6b93de62b51e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852910694f6d4480afd733a62fd6b93de62b51e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852910694f6d4480afd733a62fd6b93de62b51e6/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a05b7c5dad390be66339c575ea4623dfb55cf57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a05b7c5dad390be66339c575ea4623dfb55cf57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a05b7c5dad390be66339c575ea4623dfb55cf57"}], "stats": {"total": 157, "additions": 80, "deletions": 77}, "files": [{"sha": "761abf8218bffe0f432de9de731877255062d0d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=852910694f6d4480afd733a62fd6b93de62b51e6", "patch": "@@ -1,3 +1,12 @@\n+2004-08-05  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* c-common.c (c_stddef_cpp_builtins): Define __INTMAX_TYPE__ and\n+\t__UINTMAX_TYPE__.\n+\t* c-cppbuiltin.c (builtin_define_stdint_macros): New.  Define\n+\t__INTMAX_MAX__.\n+\t(c_cpp_builtins): Call it.\n+\t* doc/cpp.texi: Update.\n+\n 2004-08-04  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (rs6000_rtx_costs): LABEL_REFs are zero"}, {"sha": "b0f23a2c1a3f4679e531e58d9bd7715695758580", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=852910694f6d4480afd733a62fd6b93de62b51e6", "patch": "@@ -3883,6 +3883,8 @@ c_stddef_cpp_builtins(void)\n   builtin_define_with_value (\"__PTRDIFF_TYPE__\", PTRDIFF_TYPE, 0);\n   builtin_define_with_value (\"__WCHAR_TYPE__\", MODIFIED_WCHAR_TYPE, 0);\n   builtin_define_with_value (\"__WINT_TYPE__\", WINT_TYPE, 0);\n+  builtin_define_with_value (\"__INTMAX_TYPE__\", INTMAX_TYPE, 0);\n+  builtin_define_with_value (\"__UINTMAX_TYPE__\", UINTMAX_TYPE, 0);\n }\n \n static void"}, {"sha": "f6a1805f0b8425f3f0b80e5292bc863495b205b6", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=852910694f6d4480afd733a62fd6b93de62b51e6", "patch": "@@ -54,6 +54,7 @@ static void builtin_define_with_int_value (const char *, HOST_WIDE_INT);\n static void builtin_define_with_hex_fp_value (const char *, tree,\n \t\t\t\t\t      int, const char *,\n \t\t\t\t\t      const char *);\n+static void builtin_define_stdint_macros (void);\n static void builtin_define_type_max (const char *, tree, int);\n static void builtin_define_type_precision (const char *, tree);\n static void builtin_define_float_constants (const char *, const char *,\n@@ -293,6 +294,23 @@ define__GNUC__ (void)\n     abort ();\n }\n \n+/* Define macros used by <stdint.h>.  Currently only defines limits\n+   for intmax_t, used by the testsuite.  */\n+static void\n+builtin_define_stdint_macros (void)\n+{\n+  int intmax_long;\n+  if (intmax_type_node == long_long_integer_type_node)\n+    intmax_long = 2;\n+  else if (intmax_type_node == long_integer_type_node)\n+    intmax_long = 1;\n+  else if (intmax_type_node == integer_type_node)\n+    intmax_long = 0;\n+  else\n+    abort ();\n+  builtin_define_type_max (\"__INTMAX_MAX__\", intmax_type_node, intmax_long);\n+}\n+\n /* Hook that registers front end and target-specific built-ins.  */\n void\n c_cpp_builtins (cpp_reader *pfile)\n@@ -354,6 +372,9 @@ c_cpp_builtins (cpp_reader *pfile)\n \n   builtin_define_type_precision (\"__CHAR_BIT__\", char_type_node);\n \n+  /* stdint.h (eventually) and the testsuite need to know these.  */\n+  builtin_define_stdint_macros ();\n+\n   /* float.h needs to know these.  */\n \n   builtin_define_with_int_value (\"__FLT_EVAL_METHOD__\","}, {"sha": "c047c570f71b09da38e7fb78ab6f2fc153c04f35", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=852910694f6d4480afd733a62fd6b93de62b51e6", "patch": "@@ -2053,8 +2053,11 @@ OSF/rose @option{-mno-underscores} option).\n @itemx __PTRDIFF_TYPE__\n @itemx __WCHAR_TYPE__\n @itemx __WINT_TYPE__\n+@itemx __INTMAX_TYPE__\n+@itemx __UINTMAX_TYPE__\n These macros are defined to the correct underlying types for the\n-@code{size_t}, @code{ptrdiff_t}, @code{wchar_t}, and @code{wint_t}\n+@code{size_t}, @code{ptrdiff_t}, @code{wchar_t}, @code{wint_t},\n+@code{intmax_t}, and @code{uintmax_t}\n typedefs, respectively.  They exist to make the standard header files\n @file{stddef.h} and @file{wchar.h} work correctly.  You should not use\n these macros directly; instead, include the appropriate headers and use\n@@ -2072,9 +2075,11 @@ this macro directly; instead, include the appropriate headers.\n @itemx __INT_MAX__\n @itemx __LONG_MAX__\n @itemx __LONG_LONG_MAX__\n+@itemx __INTMAX_MAX__\n Defined to the maximum value of the @code{signed char}, @code{wchar_t},\n @code{signed short},\n-@code{signed int}, @code{signed long}, and @code{signed long long} types\n+@code{signed int}, @code{signed long}, @code{signed long long}, and\n+@code{intmax_t} types\n respectively.  They exist to make the standard header given numerical limits\n work correctly.  You should not use these macros directly; instead, include\n the appropriate headers."}, {"sha": "c42117a238a4f3da210f156cbd8a38933a28a04a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=852910694f6d4480afd733a62fd6b93de62b51e6", "patch": "@@ -1,3 +1,12 @@\n+2004-08-05  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* gcc.c-torture/execute/builtins/abs-2.c,\n+\tgcc.c-torture/execute/builtins/abs-3.c,\n+\tgcc.c-torture/execute/builtins/lib/abs.c, gcc.dg/format/format.h,\n+\tgcc.dg/torture/builtin-attr-1.c: Use predefined macros for\n+\tintmax_t, uintmax_t and their limits.\n+\t* gcc.dg/intmax_t-1.c: New test.\n+\n 2004-08-04  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \t* g++.dg/tc1/dr147.C: Add reference to PR."}, {"sha": "c13c4556eca8e35fb2e38ed76c70836801f72cd8", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/abs-2.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-2.c?ref=852910694f6d4480afd733a62fd6b93de62b51e6", "patch": "@@ -1,20 +1,9 @@\n /* Test for builtin abs, labs, llabs, imaxabs.  */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n \n-/* These next definitions are kludges.  When GCC has a <stdint.h> it\n-   should be used.\n-*/\n #include <limits.h>\n-#if INT_MAX == __LONG_LONG_MAX__\n-typedef int intmax_t;\n-#define INTMAX_MAX INT_MAX\n-#elif LONG_MAX == __LONG_LONG_MAX__\n-typedef long intmax_t;\n-#define INTMAX_MAX LONG_MAX\n-#else\n-typedef long long intmax_t;\n-#define INTMAX_MAX __LONG_LONG_MAX__\n-#endif\n+typedef __INTMAX_TYPE__ intmax_t;\n+#define INTMAX_MAX __INTMAX_MAX__\n \n extern int abs (int);\n extern long labs (long);"}, {"sha": "cb0d89eb0eff86937501b3ee592e4d34d522bfc6", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/abs-3.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-3.c?ref=852910694f6d4480afd733a62fd6b93de62b51e6", "patch": "@@ -1,20 +1,9 @@\n /* Test for builtin abs, labs, llabs, imaxabs.  Test for __builtin versions. */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n \n-/* These next definitions are kludges.  When GCC has a <stdint.h> it\n-   should be used.\n-*/\n #include <limits.h>\n-#if INT_MAX == __LONG_LONG_MAX__\n-typedef int intmax_t;\n-#define INTMAX_MAX INT_MAX\n-#elif LONG_MAX == __LONG_LONG_MAX__\n-typedef long intmax_t;\n-#define INTMAX_MAX LONG_MAX\n-#else\n-typedef long long intmax_t;\n-#define INTMAX_MAX __LONG_LONG_MAX__\n-#endif\n+typedef __INTMAX_TYPE__ intmax_t;\n+#define INTMAX_MAX __INTMAX_MAX__\n \n extern void abort (void);\n extern void link_error (void);"}, {"sha": "590ded7892b10c71186176e12744be85d0820760", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/abs.c", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fabs.c?ref=852910694f6d4480afd733a62fd6b93de62b51e6", "patch": "@@ -6,20 +6,7 @@ extern void abort (void);\n #define ABORT_INSIDE_MAIN do { } while (0)\n #endif\n \n-/* These next definitions are kludges.  When GCC has a <stdint.h> it\n-   should be used.\n-*/\n-#include <limits.h>\n-#if INT_MAX == __LONG_LONG_MAX__\n-typedef int intmax_t;\n-#define INTMAX_MAX INT_MAX\n-#elif LONG_MAX == __LONG_LONG_MAX__\n-typedef long intmax_t;\n-#define INTMAX_MAX LONG_MAX\n-#else\n-typedef long long intmax_t;\n-#define INTMAX_MAX __LONG_LONG_MAX__\n-#endif\n+typedef __INTMAX_TYPE__ intmax_t;\n \n int\n abs (int x)"}, {"sha": "0ded1e0382a3d721ecc989c5a634f3b707e9df13", "filename": "gcc/testsuite/gcc.dg/format/format.h", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.h?ref=852910694f6d4480afd733a62fd6b93de62b51e6", "patch": "@@ -28,31 +28,8 @@ __extension__ typedef unsigned long long int ullong;\n typedef llong quad_t;\n typedef ullong u_quad_t;\n \n-/* This next definition is a kludge.  When GCC has a <stdint.h> it\n-   should be used.\n-*/\n-/* (T *) if E is zero, (void *) otherwise.  */\n-#define type_if_not(T, E) __typeof__(0 ? (T *)0 : (void *)(E))\n-\n-/* (T *) if E is nonzero, (void *) otherwise.  */\n-#define type_if(T, E) type_if_not(T, !(E))\n-\n-/* Combine pointer types, all but one (void *).  */\n-#define type_comb2(T1, T2) __typeof__(0 ? (T1)0 : (T2)0)\n-#define type_comb3(T1, T2, T3) type_comb2(T1, type_comb2(T2, T3))\n-\n-#define maybe_int_ptr type_if(int, sizeof(int) == sizeof(llong))\n-#define maybe_uint_ptr type_if(unsigned int, sizeof(unsigned int) == sizeof(ullong))\n-#define maybe_long_ptr type_if(long, sizeof(long) == sizeof(llong) && sizeof(long) > sizeof(int))\n-#define maybe_ulong_ptr type_if(unsigned long, sizeof(unsigned long) == sizeof(ullong) && sizeof(unsigned long) > sizeof(unsigned int))\n-#define maybe_long_long_ptr type_if(llong, sizeof(llong) > sizeof(long))\n-#define maybe_ulong_long_ptr type_if(ullong, sizeof(ullong) > sizeof(unsigned long))\n-\n-#define intmax_type_ptr type_comb3(maybe_int_ptr, maybe_long_ptr, maybe_long_long_ptr)\n-#define uintmax_type_ptr type_comb3(maybe_uint_ptr, maybe_ulong_ptr, maybe_ulong_long_ptr)\n-\n-typedef __typeof__(*((intmax_type_ptr)0)) intmax_t;\n-typedef __typeof__(*((uintmax_type_ptr)0)) uintmax_t;\n+__extension__ typedef __INTMAX_TYPE__ intmax_t;\n+__extension__ typedef __UINTMAX_TYPE__ uintmax_t;\n \n #if __STDC_VERSION__ < 199901L\n #define restrict /* \"restrict\" not in old C standard.  */"}, {"sha": "799d00cfdbc36155465076e6c54d76865c2cb8ad", "filename": "gcc/testsuite/gcc.dg/intmax_t-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Ftestsuite%2Fgcc.dg%2Fintmax_t-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Ftestsuite%2Fgcc.dg%2Fintmax_t-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fintmax_t-1.c?ref=852910694f6d4480afd733a62fd6b93de62b51e6", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+/* Compile with -Wall to get a warning if built-in and system intmax_t don't\n+   match.  */\n+\n+#include <inttypes.h>\n+\n+__INTMAX_TYPE__ __im_t__;\n+__UINTMAX_TYPE__ __uim_t__;\n+intmax_t *im_t_p;\n+uintmax_t *uim_t_p;\n+\n+void\n+imt (void)\n+{\n+  im_t_p = &__im_t__;\n+}\n+\n+void\n+uimt (void)\n+{\n+  uim_t_p = &__uim_t__;\n+}"}, {"sha": "21830214edb07e621f92160e8f4fadaa7801ccf3", "filename": "gcc/testsuite/gcc.dg/torture/builtin-attr-1.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c?ref=852910694f6d4480afd733a62fd6b93de62b51e6", "patch": "@@ -404,16 +404,7 @@ CPTEST1 (csqrt)\n CPTEST1 (ctan)\n CPTEST1 (ctanh)\n \n-/* These next definitions are kludges.  When GCC has a <stdint.h> it\n-   should be used.\n-*/\n-#if __INT_MAX__ == __LONG_LONG_MAX__\n-typedef int intmax_t;\n-#elif __LONG_MAX__ == __LONG_LONG_MAX__\n-typedef long intmax_t;\n-#else\n-typedef long long intmax_t;\n-#endif\n+typedef __INTMAX_TYPE__ intmax_t;\n \n /* Various other const builtins.  */\n TEST1         (abs, int, int)"}]}