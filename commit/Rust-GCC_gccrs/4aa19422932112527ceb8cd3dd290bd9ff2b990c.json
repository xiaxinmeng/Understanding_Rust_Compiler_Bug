{"sha": "4aa19422932112527ceb8cd3dd290bd9ff2b990c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFhMTk0MjI5MzIxMTI1MjdjZWI4Y2QzZGQyOTBiZDlmZjJiOTkwYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2014-10-25T00:23:17Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2014-10-25T00:23:17Z"}, "message": "Only allow e500 double in SPE_SIMD_REGNO_P registers.\n\nrs6000_hard_regno_nregs_internal allows SPE vectors in single\nregisters satisfying SPE_SIMD_REGNO_P (i.e. register numbers 0 to\n31).  However, the corresponding test for e500 double treats all\nregisters as being able to store a 64-bit value, rather than just\nthose GPRs.\n\nLogically this inconsistency is wrong; in addition, it causes problems\nunwinding from signal handlers.  linux-unwind.h uses\nARG_POINTER_REGNUM as a place to store the return address from a\nsignal handler, but this logic in rs6000_hard_regno_nregs_internal\nresults in that being considered an 8-byte register, resulting in\nassertion failures.\n(<https://gcc.gnu.org/ml/gcc-patches/2014-09/msg02625.html> first\nneeds to be applied for unwinding to work in general on e500.)  This\npatch makes rs6000_hard_regno_nregs_internal handle the e500 double\ncase consistently with SPE vectors.\n\nTested with no regressions with cross to powerpc-linux-gnuspe (given\nthe aforementioned patch applied).  Failures of signal handling\nunwinding tests such as gcc.dg/cleanup-{8,9,10,11}.c are fixed by this\npatch.\n\n\t* config/rs6000/rs6000.c (rs6000_hard_regno_nregs_internal): Do\n\tnot allow e500 double in registers not satisyfing\n\tSPE_SIMD_REGNO_P.\n\nFrom-SVN: r216688", "tree": {"sha": "bacbecc9cfbc5d3479e0391be8141bb23aa5588e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bacbecc9cfbc5d3479e0391be8141bb23aa5588e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4aa19422932112527ceb8cd3dd290bd9ff2b990c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa19422932112527ceb8cd3dd290bd9ff2b990c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aa19422932112527ceb8cd3dd290bd9ff2b990c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa19422932112527ceb8cd3dd290bd9ff2b990c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d80c2beaf7d6f117fa52486f1006faec559fe1d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80c2beaf7d6f117fa52486f1006faec559fe1d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d80c2beaf7d6f117fa52486f1006faec559fe1d2"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "2b94c2b40a6e77d05fadd36ad307bec40c2f1b23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa19422932112527ceb8cd3dd290bd9ff2b990c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa19422932112527ceb8cd3dd290bd9ff2b990c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4aa19422932112527ceb8cd3dd290bd9ff2b990c", "patch": "@@ -1,3 +1,9 @@\n+2014-10-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_hard_regno_nregs_internal): Do\n+\tnot allow e500 double in registers not satisyfing\n+\tSPE_SIMD_REGNO_P.\n+\n 2014-10-24  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* dwarf2out.c (declare_in_namespace): Only emit external"}, {"sha": "a5e5bcf1fef169a161a73d7c13097b992aa5ca69", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa19422932112527ceb8cd3dd290bd9ff2b990c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa19422932112527ceb8cd3dd290bd9ff2b990c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4aa19422932112527ceb8cd3dd290bd9ff2b990c", "patch": "@@ -1721,7 +1721,7 @@ rs6000_hard_regno_nregs_internal (int regno, enum machine_mode mode)\n      SCmode so as to pass the value correctly in a pair of\n      registers.  */\n   else if (TARGET_E500_DOUBLE && FLOAT_MODE_P (mode) && mode != SCmode\n-\t   && !DECIMAL_FLOAT_MODE_P (mode))\n+\t   && !DECIMAL_FLOAT_MODE_P (mode) && SPE_SIMD_REGNO_P (regno))\n     reg_size = UNITS_PER_FP_WORD;\n \n   else"}]}