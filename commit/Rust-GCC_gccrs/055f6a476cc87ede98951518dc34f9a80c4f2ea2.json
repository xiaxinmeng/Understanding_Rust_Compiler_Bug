{"sha": "055f6a476cc87ede98951518dc34f9a80c4f2ea2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU1ZjZhNDc2Y2M4N2VkZTk4OTUxNTE4ZGMzNGY5YTgwYzRmMmVhMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-03-03T01:23:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-03T01:23:07Z"}, "message": "functional_hash.h (_Fnv_hash_base<>::hash): Change to template.\n\n2010-03-02  Paolo Carlini  <paolo.carlini@oracle.com>  \n\n\t* include/bits/functional_hash.h (_Fnv_hash_base<>::hash): Change\n\tto template.\n\t* include/tr1/functional_hash.h (_Fnv_hash_base<>::hash): Likewise.\n\t* include/bits/vector.tcc (hash): Adjust.\n\t* include/bits/basic_string.h (hash): Likewise.\n\t* include/std/bitset (hash): Likewise.\n\t* src/hash-string-aux.cc (hash): Likewise.\n\nFrom-SVN: r157185", "tree": {"sha": "3329226f144f6bdb710d63d9991072e85c273791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3329226f144f6bdb710d63d9991072e85c273791"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/055f6a476cc87ede98951518dc34f9a80c4f2ea2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/055f6a476cc87ede98951518dc34f9a80c4f2ea2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/055f6a476cc87ede98951518dc34f9a80c4f2ea2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/055f6a476cc87ede98951518dc34f9a80c4f2ea2/comments", "author": null, "committer": null, "parents": [{"sha": "273e719b286e24b5ae64983b7890f2d6af711955", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/273e719b286e24b5ae64983b7890f2d6af711955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/273e719b286e24b5ae64983b7890f2d6af711955"}], "stats": {"total": 206, "additions": 105, "deletions": 101}, "files": [{"sha": "f8c19e4d3aa05d55de305999d55aeff3543c284b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/055f6a476cc87ede98951518dc34f9a80c4f2ea2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/055f6a476cc87ede98951518dc34f9a80c4f2ea2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=055f6a476cc87ede98951518dc34f9a80c4f2ea2", "patch": "@@ -1,3 +1,13 @@\n+2010-03-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/functional_hash.h (_Fnv_hash_base<>::hash): Change\n+\tto template.\n+\t* include/tr1/functional_hash.h (_Fnv_hash_base<>::hash): Likewise.\n+\t* include/bits/vector.tcc (hash): Adjust.\n+\t* include/bits/basic_string.h (hash): Likewise.\n+\t* include/std/bitset (hash): Likewise.\n+\t* src/hash-string-aux.cc (hash): Likewise.\n+\n 2010-03-02  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/mutex (lock_guard::lock_guard): Do not lock mutex when"}, {"sha": "312d4ed6cb6a9bfa0eb72af707945bdf851f892b", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/055f6a476cc87ede98951518dc34f9a80c4f2ea2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/055f6a476cc87ede98951518dc34f9a80c4f2ea2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=055f6a476cc87ede98951518dc34f9a80c4f2ea2", "patch": "@@ -2898,10 +2898,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       size_t\n       operator()(const wstring& __s) const\n-      {\n-\tconst char* __p = reinterpret_cast<const char*>(__s.data());\n-\treturn std::_Fnv_hash::hash(__p, __s.length() * sizeof(wchar_t));\n-      }\n+      { return std::_Fnv_hash::hash(__s.data(),\n+\t\t\t\t    __s.length() * sizeof(wchar_t)); }\n     };\n #endif\n #endif /* _GLIBCXX_COMPATIBILITY_CXX0X */\n@@ -2914,10 +2912,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       size_t\n       operator()(const u16string& __s) const\n-      {\n-\tconst char* __p = reinterpret_cast<const char*>(__s.data());\n-\treturn std::_Fnv_hash::hash(__p, __s.length() * sizeof(char16_t));\n-      }\n+      { return std::_Fnv_hash::hash(__s.data(),\n+\t\t\t\t    __s.length() * sizeof(char16_t)); }\n     };\n \n   /// std::hash specialization for u32string.\n@@ -2927,10 +2923,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       size_t\n       operator()(const u32string& __s) const\n-      {\n-\tconst char* __p = reinterpret_cast<const char*>(__s.data());\n-\treturn std::_Fnv_hash::hash(__p, __s.length() * sizeof(char32_t));\n-      }\n+      { return std::_Fnv_hash::hash(__s.data(),\n+\t\t\t\t    __s.length() * sizeof(char32_t)); }\n     };\n #endif\n "}, {"sha": "aaa05aad689c13147fbf282461602bbd7b94f47b", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/055f6a476cc87ede98951518dc34f9a80c4f2ea2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/055f6a476cc87ede98951518dc34f9a80c4f2ea2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=055f6a476cc87ede98951518dc34f9a80c4f2ea2", "patch": "@@ -122,45 +122,51 @@ namespace std\n   template<size_t>\n     struct _Fnv_hash_base\n     {\n-      static size_t\n-      hash(const char* __first, size_t __length, size_t __hash = 0)\n-      {\n-\tfor (; __length; --__length)\n-\t  __hash = (__hash * 131) + *__first++;\n-\treturn __hash;\n-      }\n+      template<typename _Tp>\n+        static size_t\n+        hash(const _Tp* __ptr, size_t __clength, size_t __hash = 0)\n+        {\n+\t  const char* __cptr = reinterpret_cast<const char*>(__ptr);\n+\t  for (; __clength; --__clength)\n+\t    __hash = (__hash * 131) + *__cptr++;\n+\t  return __hash;\n+\t}\n     };\n \n   template<>\n     struct _Fnv_hash_base<4>\n     {\n-      static size_t\n-      hash(const char* __first, size_t __length,\n-\t   size_t __hash = static_cast<size_t>(2166136261UL))\n-      {\n-\tfor (; __length; --__length)\n-\t  {\n-\t    __hash ^= static_cast<size_t>(*__first++);\n-\t    __hash *= static_cast<size_t>(16777619UL);\n-\t  }\n-\treturn __hash;\n-      }\n+      template<typename _Tp>\n+        static size_t\n+        hash(const _Tp* __ptr, size_t __clength,\n+\t     size_t __hash = static_cast<size_t>(2166136261UL))\n+        {\n+\t  const char* __cptr = reinterpret_cast<const char*>(__ptr);\n+\t  for (; __clength; --__clength)\n+\t    {\n+\t      __hash ^= static_cast<size_t>(*__cptr++);\n+\t      __hash *= static_cast<size_t>(16777619UL);\n+\t    }\n+\t  return __hash;\n+\t}\n     };\n   \n   template<>\n     struct _Fnv_hash_base<8>\n     {\n-      static size_t\n-      hash(const char* __first, size_t __length,\n-\t   size_t __hash = static_cast<size_t>(14695981039346656037ULL))\n-      {\n-\tfor (; __length; --__length)\n-\t  {\n-\t    __hash ^= static_cast<size_t>(*__first++);\n-\t    __hash *= static_cast<size_t>(1099511628211ULL);\n-\t  }\n-\treturn __hash;\n-      }\n+      template<typename _Tp>\n+        static size_t\n+        hash(const _Tp* __ptr, size_t __clength,\n+\t     size_t __hash = static_cast<size_t>(14695981039346656037ULL))\n+        {\n+\t  const char* __cptr = reinterpret_cast<const char*>(__ptr);\n+\t  for (; __clength; --__clength)\n+\t    {\n+\t      __hash ^= static_cast<size_t>(*__cptr++);\n+\t      __hash *= static_cast<size_t>(1099511628211ULL);\n+\t    }\n+\t  return __hash;\n+\t}\n     };\n \n     struct _Fnv_hash\n@@ -171,14 +177,12 @@ namespace std\n       template<typename _Tp>\n         static size_t\n         hash(const _Tp& __val)\n-        { return hash(reinterpret_cast<const char*>(&__val),\n-\t\t      sizeof(__val)); }\n+        { return hash(&__val, sizeof(__val)); }\n \n       template<typename _Tp>\n         static size_t\n         __hash_combine(const _Tp& __val, size_t __hash)\n-        { return hash(reinterpret_cast<const char*>(&__val),\n-\t\t      sizeof(__val), __hash); }\n+        { return hash(&__val, sizeof(__val), __hash); }\n     };\n \n   /// Specialization for float.\n@@ -201,7 +205,7 @@ namespace std\n \n   /// Specialization for long double.\n   template<>\n-    size_t\n+    _GLIBCXX_PURE size_t\n     hash<long double>::operator()(long double __val) const;\n \n   // @} group hashes"}, {"sha": "e10979310489c40deaee2898535c6c780ac2d607", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/055f6a476cc87ede98951518dc34f9a80c4f2ea2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/055f6a476cc87ede98951518dc34f9a80c4f2ea2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=055f6a476cc87ede98951518dc34f9a80c4f2ea2", "patch": "@@ -694,10 +694,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       const size_t __words = __b.size() / _S_word_bit;\n       if (__words)\n \t{\n-\t  const char* __data\n-\t    = reinterpret_cast<const char*>(__b._M_impl._M_start._M_p);\n-\t  const size_t __size = __words * sizeof(_Bit_type);\n-\t  __hash = std::_Fnv_hash::hash(__data, __size);\n+\t  const size_t __clength = __words * sizeof(_Bit_type);\n+\t  __hash = std::_Fnv_hash::hash(__b._M_impl._M_start._M_p, __clength);\n \t}\n \n       const size_t __extrabits = __b.size() % _S_word_bit;\n@@ -706,13 +704,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  _Bit_type __hiword = *__b._M_impl._M_finish._M_p;\n \t  __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);\n \n-\t  const char* __data = reinterpret_cast<const char*>(&__hiword);\n-\t  const size_t __size\n+\t  const size_t __clength\n \t    = (__extrabits + __CHAR_BIT__ - 1) / __CHAR_BIT__;\n \t  if (__words)\n-\t    __hash = std::_Fnv_hash::hash(__data, __size, __hash);\n+\t    __hash = std::_Fnv_hash::hash(&__hiword, __clength, __hash);\n \t  else\n-\t    __hash = std::_Fnv_hash::hash(__data, __size);\n+\t    __hash = std::_Fnv_hash::hash(&__hiword, __clength);\n \t}\n \n       return __hash;"}, {"sha": "b23b51a78fed40dd5990f306b06c69fbcfbf7f03", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/055f6a476cc87ede98951518dc34f9a80c4f2ea2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/055f6a476cc87ede98951518dc34f9a80c4f2ea2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=055f6a476cc87ede98951518dc34f9a80c4f2ea2", "patch": "@@ -115,9 +115,9 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       { return _M_w[_S_whichword(__pos)]; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      const char*\n+      const _WordT*\n       _M_getdata() const\n-      { return reinterpret_cast<const char*>(_M_w); }\n+      { return _M_w; }\n #endif\n \n       _WordT&\n@@ -406,9 +406,9 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       { return _M_w; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      const char*\n+      const _WordT*\n       _M_getdata() const\n-      { return reinterpret_cast<const char*>(&_M_w); }\n+      { return &_M_w; }\n #endif\n \n       _WordT&\n@@ -1501,8 +1501,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       size_t\n       operator()(const _GLIBCXX_STD_D::bitset<_Nb>& __b) const\n       {\n-\tconst size_t __size = (_Nb + __CHAR_BIT__ - 1) / __CHAR_BIT__;\n-\treturn std::_Fnv_hash::hash(__b._M_getdata(), __size);\n+\tconst size_t __clength = (_Nb + __CHAR_BIT__ - 1) / __CHAR_BIT__;\n+\treturn std::_Fnv_hash::hash(__b._M_getdata(), __clength);\n       }\n     };\n "}, {"sha": "9ea483e3e38eec2b490e0beffc5b39fa276340f5", "filename": "libstdc++-v3/include/tr1/functional_hash.h", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/055f6a476cc87ede98951518dc34f9a80c4f2ea2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/055f6a476cc87ede98951518dc34f9a80c4f2ea2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h?ref=055f6a476cc87ede98951518dc34f9a80c4f2ea2", "patch": "@@ -85,47 +85,53 @@ namespace tr1\n   template<size_t>\n     struct _Fnv_hash_base\n     {\n-      static size_t\n-      hash(const char* __first, size_t __length)\n-      {\n-\tsize_t __result = 0;\n-\tfor (; __length > 0; --__length)\n-\t  __result = (__result * 131) + *__first++;\n-\treturn __result;\n-      }\n+      template<typename _Tp>\n+        static size_t\n+        hash(const _Tp* __ptr, size_t __clength)\n+        {\n+\t  size_t __result = 0;\n+\t  const char* __cptr = reinterpret_cast<const char*>(__ptr);\n+\t  for (; __clength; --__clength)\n+\t    __result = (__result * 131) + *__cptr++;\n+\t  return __result;\n+\t}\n     };\n \n   template<>\n     struct _Fnv_hash_base<4>\n     {\n-      static size_t\n-      hash(const char* __first, size_t __length)\n-      {\n-\tsize_t __result = static_cast<size_t>(2166136261UL);\n-\tfor (; __length > 0; --__length)\n-\t  {\n-\t    __result ^= static_cast<size_t>(*__first++);\n-\t    __result *= static_cast<size_t>(16777619UL);\n-\t  }\n-\treturn __result;\n-      }\n+      template<typename _Tp>\n+        static size_t\n+        hash(const _Tp* __ptr, size_t __clength)\n+        {\n+\t  size_t __result = static_cast<size_t>(2166136261UL);\n+\t  const char* __cptr = reinterpret_cast<const char*>(__ptr);\n+\t  for (; __clength; --__clength)\n+\t    {\n+\t      __result ^= static_cast<size_t>(*__cptr++);\n+\t      __result *= static_cast<size_t>(16777619UL);\n+\t    }\n+\t  return __result;\n+\t}\n     };\n   \n   template<>\n     struct _Fnv_hash_base<8>\n     {\n-      static size_t\n-      hash(const char* __first, size_t __length)\n-      {\n-\tsize_t __result =\n-\t  static_cast<size_t>(14695981039346656037ULL);\n-\tfor (; __length > 0; --__length)\n-\t  {\n-\t    __result ^= static_cast<size_t>(*__first++);\n-\t    __result *= static_cast<size_t>(1099511628211ULL);\n-\t  }\n-\treturn __result;\n-      }\n+      template<typename _Tp>\n+        static size_t\n+        hash(const _Tp* __ptr, size_t __clength)\n+        {\n+\t  size_t __result\n+\t    = static_cast<size_t>(14695981039346656037ULL);\n+\t  const char* __cptr = reinterpret_cast<const char*>(__ptr);\n+\t  for (; __clength; --__clength)\n+\t    {\n+\t      __result ^= static_cast<size_t>(*__cptr++);\n+\t      __result *= static_cast<size_t>(1099511628211ULL);\n+\t    }\n+\t  return __result;\n+\t}\n     };\n \n   struct _Fnv_hash\n@@ -136,8 +142,7 @@ namespace tr1\n     template<typename _Tp>\n       static size_t\n       hash(const _Tp& __val)\n-      { return hash(reinterpret_cast<const char*>(&__val),\n-\t\t    sizeof(__val)); }\n+      { return hash(&__val, sizeof(__val)); }\n   };\n \n   /// Explicit specializations for float."}, {"sha": "711d7f41c9d314b7c8ad4d0f345828106fa5c318", "filename": "libstdc++-v3/src/hash-string-aux.cc", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/055f6a476cc87ede98951518dc34f9a80c4f2ea2/libstdc%2B%2B-v3%2Fsrc%2Fhash-string-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/055f6a476cc87ede98951518dc34f9a80c4f2ea2/libstdc%2B%2B-v3%2Fsrc%2Fhash-string-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash-string-aux.cc?ref=055f6a476cc87ede98951518dc34f9a80c4f2ea2", "patch": "@@ -37,18 +37,12 @@\n   template<>\n     size_t\n     hash<wstring>::operator()(wstring __s) const\n-    {\n-      const char* __p = reinterpret_cast<const char*>(__s.data());\n-      return _Fnv_hash::hash(__p, __s.length() * sizeof(wchar_t));\n-    }\n+    { return _Fnv_hash::hash(__s.data(), __s.length() * sizeof(wchar_t)); }\n \n   template<>\n     size_t\n     hash<const wstring&>::operator()(const wstring& __s) const\n-    {\n-      const char* __p = reinterpret_cast<const char*>(__s.data());\n-      return _Fnv_hash::hash(__p, __s.length() * sizeof(wchar_t));\n-    }\n+    { return _Fnv_hash::hash(__s.data(), __s.length() * sizeof(wchar_t)); }\n #endif\n \n #endif"}]}