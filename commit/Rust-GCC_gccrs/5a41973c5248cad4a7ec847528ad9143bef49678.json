{"sha": "5a41973c5248cad4a7ec847528ad9143bef49678", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE0MTk3M2M1MjQ4Y2FkNGE3ZWM4NDc1MjhhZDkxNDNiZWY0OTY3OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-03-19T08:54:37Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-03-19T08:54:37Z"}, "message": "avr.c (avr_init_stack, [...]): Make static.\n\n\t* config/avr/avr.c (avr_init_stack, avr_mcu_name): Make static.\n\t(TARGET_HANDLE_OPTION): Override default.\n\t(avr_handle_option): New function.\n\t* config/avr/avr.h (MASK_ALL_DEBUG, MASK_ORDER_1, MASK_INSN_SIZE_DUMP)\n\t(MASK_ORDER_2, MASK_NO_TABLEJUMP, MASK_INT8, MASK_NO_INTERRUPTS)\n\t(MASK_CALL_PROLOGUES, MASK_TINY_STACK, MASK_SHORT_CALLS)\n\t(TARGET_ORDER_1, TARGET_ORDER_2, TARGET_INT8, TARGET_NO_INTERRUPTS)\n\t(TARGET_INSN_SIZE_DUMP, TARGET_CALL_PROLOGUES, TARGET_TINY_STACK)\n\t(TARGET_NO_TABLEJUMP, TARGET_SHORT_CALLS, TARGET_ALL_DEBUG)\n\t(TARGET_SWITCHES, avr_init_stack, avr_mcu_name)\n\t(TARGET_OPTIONS): Delete.\n\t* config/avr/avr.opt: New file.\n\nFrom-SVN: r96719", "tree": {"sha": "7a399644607ffc6f2575a321c9226c7affad1845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a399644607ffc6f2575a321c9226c7affad1845"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a41973c5248cad4a7ec847528ad9143bef49678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a41973c5248cad4a7ec847528ad9143bef49678", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a41973c5248cad4a7ec847528ad9143bef49678", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a41973c5248cad4a7ec847528ad9143bef49678/comments", "author": null, "committer": null, "parents": [{"sha": "0eb971bd259728516731359bf8a4ac39512a0c30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb971bd259728516731359bf8a4ac39512a0c30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eb971bd259728516731359bf8a4ac39512a0c30"}], "stats": {"total": 158, "additions": 105, "deletions": 53}, "files": [{"sha": "c6f64c141f4210e19ec6a697062ba04d7f0883cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a41973c5248cad4a7ec847528ad9143bef49678/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a41973c5248cad4a7ec847528ad9143bef49678/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a41973c5248cad4a7ec847528ad9143bef49678", "patch": "@@ -1,3 +1,18 @@\n+2005-03-19  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/avr/avr.c (avr_init_stack, avr_mcu_name): Make static.\n+\t(TARGET_HANDLE_OPTION): Override default.\n+\t(avr_handle_option): New function.\n+\t* config/avr/avr.h (MASK_ALL_DEBUG, MASK_ORDER_1, MASK_INSN_SIZE_DUMP)\n+\t(MASK_ORDER_2, MASK_NO_TABLEJUMP, MASK_INT8, MASK_NO_INTERRUPTS)\n+\t(MASK_CALL_PROLOGUES, MASK_TINY_STACK, MASK_SHORT_CALLS)\n+\t(TARGET_ORDER_1, TARGET_ORDER_2, TARGET_INT8, TARGET_NO_INTERRUPTS)\n+\t(TARGET_INSN_SIZE_DUMP, TARGET_CALL_PROLOGUES, TARGET_TINY_STACK)\n+\t(TARGET_NO_TABLEJUMP, TARGET_SHORT_CALLS, TARGET_ALL_DEBUG)\n+\t(TARGET_SWITCHES, avr_init_stack, avr_mcu_name)\n+\t(TARGET_OPTIONS): Delete.\n+\t* config/avr/avr.opt: New file.\n+\n 2005-03-18  James E Wilson  <wilson@specifixinc.com>\n \n \tPR c++/19769"}, {"sha": "4d1a9ce0f1f6dd9b32eebc2664b4640c9d766d04", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a41973c5248cad4a7ec847528ad9143bef49678/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a41973c5248cad4a7ec847528ad9143bef49678/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=5a41973c5248cad4a7ec847528ad9143bef49678", "patch": "@@ -48,6 +48,7 @@\n /* Maximal allowed offset for an address in the LD command */\n #define MAX_LD_OFFSET(MODE) (64 - (signed)GET_MODE_SIZE (MODE))\n \n+static bool avr_handle_option (size_t, const char *, int);\n static int avr_naked_function_p (tree);\n static int interrupt_function_p (tree);\n static int signal_function_p (tree);\n@@ -111,10 +112,10 @@ static int epilogue_size;\n static int jump_tables_size;\n \n /* Initial stack value specified by the `-minit-stack=' option */\n-const char *avr_init_stack = \"__stack\";\n+static const char *avr_init_stack = \"__stack\";\n \n /* Default MCU name */\n-const char *avr_mcu_name = \"avr2\";\n+static const char *avr_mcu_name = \"avr2\";\n \n /* Preprocessor macros to define depending on MCU type.  */\n const char *avr_base_arch_macro;\n@@ -244,6 +245,8 @@ int avr_case_values_threshold = 30000;\n #define TARGET_ATTRIBUTE_TABLE avr_attribute_table\n #undef TARGET_ASM_FUNCTION_RODATA_SECTION\n #define TARGET_ASM_FUNCTION_RODATA_SECTION default_no_function_rodata_section\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION avr_handle_option\n #undef TARGET_INSERT_ATTRIBUTES\n #define TARGET_INSERT_ATTRIBUTES avr_insert_attributes\n #undef TARGET_SECTION_TYPE_FLAGS\n@@ -263,6 +266,26 @@ int avr_case_values_threshold = 30000;\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+avr_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+{\n+  switch (code)\n+    {\n+    case OPT_minit_stack_:\n+      avr_init_stack = arg;\n+      return true;\n+\n+    case OPT_mmcu_:\n+      avr_mcu_name = arg;\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n void\n avr_override_options (void)\n {"}, {"sha": "e0a9c75dcad44db824faf9d6ec20b9da6b98bf94", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a41973c5248cad4a7ec847528ad9143bef49678/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a41973c5248cad4a7ec847528ad9143bef49678/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=5a41973c5248cad4a7ec847528ad9143bef49678", "patch": "@@ -42,53 +42,6 @@ Boston, MA 02111-1307, USA.  */\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-/* This declaration should be present.  */\n-extern int target_flags;\n-\n-#define MASK_ALL_DEBUG\t\t0x00000FE0\n-#define MASK_ORDER_1\t\t0x00001000\n-#define MASK_INSN_SIZE_DUMP\t0x00002000\n-#define MASK_ORDER_2\t\t0x00004000\n-#define MASK_NO_TABLEJUMP\t0x00008000\n-#define MASK_INT8\t\t0x00010000\n-#define MASK_NO_INTERRUPTS\t0x00020000\n-#define MASK_CALL_PROLOGUES\t0x00040000\n-#define MASK_TINY_STACK\t\t0x00080000\n-#define MASK_SHORT_CALLS\t0x00100000\n-\n-#define TARGET_ORDER_1\t\t(target_flags & MASK_ORDER_1)\n-#define TARGET_ORDER_2\t\t(target_flags & MASK_ORDER_2)\n-#define TARGET_INT8\t\t(target_flags & MASK_INT8)\n-#define TARGET_NO_INTERRUPTS\t(target_flags & MASK_NO_INTERRUPTS)\n-#define TARGET_INSN_SIZE_DUMP\t(target_flags & MASK_INSN_SIZE_DUMP)\n-#define TARGET_CALL_PROLOGUES\t(target_flags & MASK_CALL_PROLOGUES)\n-#define TARGET_TINY_STACK\t(target_flags & MASK_TINY_STACK)\n-#define TARGET_NO_TABLEJUMP\t(target_flags & MASK_NO_TABLEJUMP)\n-#define TARGET_SHORT_CALLS\t(target_flags & MASK_SHORT_CALLS)\n-#define TARGET_ALL_DEBUG\t(target_flags & MASK_ALL_DEBUG)\n-\n-#define TARGET_SWITCHES {\t\t\t\t\t\t\\\n-  { \"order1\", MASK_ORDER_1, NULL },\t\t\t\t\t\\\n-  { \"order2\", MASK_ORDER_2, NULL },\t\t\t\t\t\\\n-  { \"int8\", MASK_INT8, N_(\"Assume int to be 8 bit integer\") },\t\t\\\n-  { \"no-interrupts\", MASK_NO_INTERRUPTS,\t\t\t\t\\\n-    N_(\"Change the stack pointer without disabling interrupts\") },\t\\\n-  { \"call-prologues\", MASK_CALL_PROLOGUES,\t\t\t\t\\\n-    N_(\"Use subroutines for function prologue/epilogue\") },\t\t\\\n-  { \"tiny-stack\", MASK_TINY_STACK,\t\t\t\t\t\\\n-    N_(\"Change only the low 8 bits of the stack pointer\") },\t\t\\\n-  { \"no-tablejump\", MASK_NO_TABLEJUMP,\t\t\t\t\t\\\n-    N_(\"Do not generate tablejump insns\") },\t\t\t\t\\\n-  { \"short-calls\", MASK_SHORT_CALLS,\t\t\t\t\t\\\n-    N_(\"Use rjmp/rcall (limited range) on >8K devices\") },\t\t\\\n-  { \"size\", MASK_INSN_SIZE_DUMP,\t\t\t\t\t\\\n-    N_(\"Output instruction sizes to the asm file\") },\t\t\t\\\n-  { \"deb\", MASK_ALL_DEBUG, NULL },\t\t\t\t\t\\\n-  { \"\", 0, NULL } }\n-\n-extern const char *avr_init_stack;\n-extern const char *avr_mcu_name;\n-\n extern const char *avr_base_arch_macro;\n extern const char *avr_extra_arch_macro;\n extern int avr_mega_p;\n@@ -98,10 +51,6 @@ extern int avr_asm_only_p;\n #define AVR_MEGA (avr_mega_p && !TARGET_SHORT_CALLS)\n #define AVR_ENHANCED (avr_enhanced_p)\n \n-#define TARGET_OPTIONS {\t\t\t\t\t\t      \\\n- { \"init-stack=\", &avr_init_stack, N_(\"Specify the initial stack address\"), 0}, \\\n- { \"mcu=\", &avr_mcu_name, N_(\"Specify the MCU name\"), 0} }\n-\n #define TARGET_VERSION fprintf (stderr, \" (GNU assembler syntax)\");\n \n #define OVERRIDE_OPTIONS avr_override_options ()"}, {"sha": "8d40f926907395bc52b79e1962a9306f7290db4e", "filename": "gcc/config/avr/avr.opt", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a41973c5248cad4a7ec847528ad9143bef49678/gcc%2Fconfig%2Favr%2Favr.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a41973c5248cad4a7ec847528ad9143bef49678/gcc%2Fconfig%2Favr%2Favr.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.opt?ref=5a41973c5248cad4a7ec847528ad9143bef49678", "patch": "@@ -0,0 +1,65 @@\n+; Options for the ATMEL AVR port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+mcall-prologues\n+Target Report Mask(CALL_PROLOGUES)\n+Use subroutines for function prologues and epilogues\n+\n+mmcu=\n+Target RejectNegative Joined\n+-mmcu=MCU\tSelect the target MCU\n+\n+mdeb\n+Target Report Undocumented Mask(ALL_DEBUG)\n+\n+minit-stack=\n+Target RejectNegative Joined\n+-minit-stack=STACK\tUse STACK as the initial value of the stack pointer\n+\n+mint8\n+Target Report Mask(INT8)\n+Use an 8-bit 'int' type\n+\n+mno-interrupts\n+Target Report RejectNegative Mask(NO_INTERRUPTS)\n+Change the stack pointer without disabling interrupts\n+\n+mno-tablejump\n+Target Report RejectNegative Mask(NO_TABLEJUMP)\n+Do not generate tablejump insns\n+\n+morder1\n+Target Report Undocumented Mask(ORDER_1)\n+\n+morder2\n+Target Report Undocumented Mask(ORDER_2)\n+\n+mshort-calls\n+Target Report Mask(SHORT_CALLS)\n+Use rjmp/rcall (limited range) on >8K devices\n+\n+msize\n+Target Report Mask(INSN_SIZE_DUMP)\n+Output instruction sizes to the asm file\n+\n+mtiny-stack\n+Target Report Mask(TINY_STACK)\n+Change only the low 8 bits of the stack pointer"}]}