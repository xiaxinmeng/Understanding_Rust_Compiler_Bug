{"sha": "a25f5b28d740a5ae7a81608e0b10df94f110d7a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI1ZjViMjhkNzQwYTVhZTdhODE2MDhlMGIxMGRmOTRmMTEwZDdhNQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2016-10-12T14:25:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-10-12T14:25:05Z"}, "message": "sem_prag.adb (Analyze_Refined_Depends_In_Decl_Part): Adapt checking for optional refinement of abstract state with partial visible...\n\n2016-10-12  Yannick Moy  <moy@adacore.com>\n\n\t* sem_prag.adb (Analyze_Refined_Depends_In_Decl_Part): Adapt checking\n\tfor optional refinement of abstract state with partial\n\tvisible refinement.\n\t(Analyze_Refined_Global_In_Decl_Part): Adapt checking for optional\n\trefinement of abstract state with partial visible refinement. Implement\n\tnew rules in SPARK RM 7.2.4 related to optional refinement.\n\tAlso fix the missing detection of missing items.\n\nFrom-SVN: r241050", "tree": {"sha": "2b7f61eec493d13b54ba56730c8b4c5e4f19a1ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b7f61eec493d13b54ba56730c8b4c5e4f19a1ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a25f5b28d740a5ae7a81608e0b10df94f110d7a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25f5b28d740a5ae7a81608e0b10df94f110d7a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a25f5b28d740a5ae7a81608e0b10df94f110d7a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25f5b28d740a5ae7a81608e0b10df94f110d7a5/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b42c03538d0c0ce1c37e85855b6c18238fb1463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b42c03538d0c0ce1c37e85855b6c18238fb1463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b42c03538d0c0ce1c37e85855b6c18238fb1463"}], "stats": {"total": 319, "additions": 254, "deletions": 65}, "files": [{"sha": "efbe1d274a4a5565ec62afb624e1a1b665232222", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25f5b28d740a5ae7a81608e0b10df94f110d7a5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25f5b28d740a5ae7a81608e0b10df94f110d7a5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a25f5b28d740a5ae7a81608e0b10df94f110d7a5", "patch": "@@ -1,3 +1,13 @@\n+2016-10-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Refined_Depends_In_Decl_Part): Adapt checking\n+\tfor optional refinement of abstract state with partial\n+\tvisible refinement.\n+\t(Analyze_Refined_Global_In_Decl_Part): Adapt checking for optional\n+\trefinement of abstract state with partial visible refinement. Implement\n+\tnew rules in SPARK RM 7.2.4 related to optional refinement.\n+\tAlso fix the missing detection of missing items.\n+\n 2016-10-12  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* einfo.adb Add new usage for Elist29 and Node35."}, {"sha": "3b0c6c667fb42764dc22533337dd4f5953389405", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 244, "deletions": 65, "changes": 309, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25f5b28d740a5ae7a81608e0b10df94f110d7a5/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25f5b28d740a5ae7a81608e0b10df94f110d7a5/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a25f5b28d740a5ae7a81608e0b10df94f110d7a5", "patch": "@@ -23811,7 +23811,8 @@ package body Sem_Prag is\n                      Matched := True;\n \n                   --  An abstract state with visible non-null refinement\n-                  --  matches one of its constituents.\n+                  --  matches one of its constituents, or itself for an\n+                  --  abstract state with partial visible refinement.\n \n                   elsif Has_Non_Null_Visible_Refinement (Dep_Item_Id) then\n                      if Is_Entity_Name (Ref_Item) then\n@@ -23826,6 +23827,12 @@ package body Sem_Prag is\n                         then\n                            Record_Item (Dep_Item_Id);\n                            Matched := True;\n+\n+                        elsif not Has_Visible_Refinement (Dep_Item_Id)\n+                          and then Ref_Item_Id = Dep_Item_Id\n+                        then\n+                           Record_Item (Dep_Item_Id);\n+                           Matched := True;\n                         end if;\n                      end if;\n \n@@ -24050,17 +24057,17 @@ package body Sem_Prag is\n \n       procedure Check_Output_States is\n          procedure Check_Constituent_Usage (State_Id : Entity_Id);\n-         --  Determine whether all constituents of state State_Id with visible\n-         --  refinement are used as outputs in pragma Refined_Depends. Emit an\n-         --  error if this is not the case.\n+         --  Determine whether all constituents of state State_Id with full\n+         --  visible refinement are used as outputs in pragma Refined_Depends.\n+         --  Emit an error if this is not the case.\n \n          -----------------------------\n          -- Check_Constituent_Usage --\n          -----------------------------\n \n          procedure Check_Constituent_Usage (State_Id : Entity_Id) is\n             Constits     : constant Elist_Id :=\n-                             Partial_Refinement_Constituents (State_Id);\n+                             Refinement_Constituents (State_Id);\n             Constit_Elmt : Elmt_Id;\n             Constit_Id   : Entity_Id;\n             Posted       : Boolean := False;\n@@ -24147,7 +24154,9 @@ package body Sem_Prag is\n                   --  Ensure that all of the constituents are utilized as\n                   --  outputs in pragma Refined_Depends.\n \n-                  elsif Has_Non_Null_Visible_Refinement (Item_Id) then\n+                  elsif Has_Visible_Refinement (Item_Id)\n+                    and then Has_Non_Null_Visible_Refinement (Item_Id)\n+                  then\n                      Check_Constituent_Usage (Item_Id);\n                   end if;\n                end if;\n@@ -24540,7 +24549,14 @@ package body Sem_Prag is\n       --  The entity of the subprogram subject to pragma Refined_Global\n \n       States : Elist_Id := No_Elist;\n-      --  A list of all states with visible refinement found in pragma Global\n+      --  A list of all states with full or partial visible refinement found in\n+      --  pragma Global.\n+\n+      Repeat_Items : Elist_Id := No_Elist;\n+      --  A list of all global items without full visible refinement found\n+      --  in pragma Global. These states should be repeated in the global\n+      --  refinement (SPARK RM 7.2.4(3c)) unless they have a partial visible\n+      --  refinement, in which case they may be repeated (SPARK RM 7.2.4(3d)).\n \n       procedure Check_In_Out_States;\n       --  Determine whether the corresponding Global pragma mentions In_Out\n@@ -24587,9 +24603,10 @@ package body Sem_Prag is\n       --  and separate them in lists In_Items, In_Out_Items, Out_Items and\n       --  Proof_In_Items. Flags Has_In_State, Has_In_Out_State, Has_Out_State\n       --  and Has_Proof_In_State are set when there is at least one abstract\n-      --  state with visible refinement available in the corresponding mode.\n-      --  Flag Has_Null_State is set when at least state has a null refinement.\n-      --  Mode enotes the current global mode in effect.\n+      --  state with full or partial visible refinement available in the\n+      --  corresponding mode. Flag Has_Null_State is set when at least state\n+      --  has a null refinement. Mode denotes the current global mode in\n+      --  effect.\n \n       function Present_Then_Remove\n         (List : Elist_Id;\n@@ -24598,10 +24615,18 @@ package body Sem_Prag is\n       --  remove it from List. This routine is used to strip lists In_Constits,\n       --  In_Out_Constits and Out_Constits of valid constituents.\n \n+      procedure Present_Then_Remove (List : Elist_Id; Item : Entity_Id);\n+      --  Same as function Present_Then_Remove, but do not report presence of\n+      --  Item in List.\n+\n       procedure Report_Extra_Constituents;\n       --  Emit an error for each constituent found in lists In_Constits,\n       --  In_Out_Constits and Out_Constits.\n \n+      procedure Report_Missing_Items;\n+      --  Emit an error for each global item not repeated found in list\n+      --  Repeat_Items.\n+\n       -------------------------\n       -- Check_In_Out_States --\n       -------------------------\n@@ -24690,15 +24715,24 @@ package body Sem_Prag is\n                      N, State_Id);\n                end if;\n \n-            --  The state lacks a completion\n+            --  The state lacks a completion. When full refinement is\n+            --  visible, always emit an error (SPARK RM 7.2.4(3a)). When only\n+            --  partial refinement is visible, emit an error if the abstract\n+            --  state itself is not utilized (SPARK RM 7.2.4(3d)). In the\n+            --  case where both are utilized, an error will be issued in\n+            --  Check_State_And_Constituent_Use.\n \n             elsif not Input_Seen\n-              and not In_Out_Seen\n-              and not Output_Seen\n-              and not Proof_In_Seen\n+              and then not In_Out_Seen\n+              and then not Output_Seen\n+              and then not Proof_In_Seen\n             then\n-               SPARK_Msg_NE\n-                 (\"missing global refinement of state &\", N, State_Id);\n+               if Has_Visible_Refinement (State_Id)\n+                 or else Contains (Repeat_Items, State_Id)\n+               then\n+                  SPARK_Msg_NE\n+                    (\"missing global refinement of state &\", N, State_Id);\n+               end if;\n \n             --  Otherwise the state has a malformed completion where at least\n             --  one of the constituents has a different mode.\n@@ -24752,9 +24786,10 @@ package body Sem_Prag is\n       procedure Check_Input_States is\n          procedure Check_Constituent_Usage (State_Id : Entity_Id);\n          --  Determine whether at least one constituent of state State_Id with\n-         --  visible refinement is used and has mode Input. Ensure that the\n-         --  remaining constituents do not have In_Out or Output modes. Emit an\n-         --  error if this is not the case (SPARK RM 7.2.4(5)).\n+         --  full or partial visible refinement is used and has mode Input.\n+         --  Ensure that the remaining constituents do not have In_Out or\n+         --  Output modes. Emit an error if this is not the case (SPARK RM\n+         --  7.2.4(5)).\n \n          -----------------------------\n          -- Check_Constituent_Usage --\n@@ -24801,9 +24836,18 @@ package body Sem_Prag is\n                end loop;\n             end if;\n \n-            --  Not one of the constituents appeared as Input\n+            --  Not one of the constituents appeared as Input. When full\n+            --  refinement is visible, always emit an error (SPARK RM\n+            --  7.2.4(3a)). When only partial refinement is visible, emit an\n+            --  error if the abstract state itself is not utilized (SPARK RM\n+            --  7.2.4(3d)). In the case where both are utilized, an error will\n+            --  be issued in Check_State_And_Constituent_Use.\n \n-            if not In_Seen then\n+            if not In_Seen\n+              and then (Has_Visible_Refinement (State_Id)\n+                          or else\n+                        Contains (Repeat_Items, State_Id))\n+            then\n                SPARK_Msg_NE\n                  (\"global refinement of state & must include at least one \"\n                   & \"constituent of mode `Input`\", N, State_Id);\n@@ -24832,8 +24876,11 @@ package body Sem_Prag is\n             while Present (Item_Elmt) loop\n                Item_Id := Node (Item_Elmt);\n \n-               --  Ensure that at least one of the constituents is utilized and\n-               --  is of mode Input.\n+               --  When full refinement is visible, ensure that at least one of\n+               --  the constituents is utilized and is of mode Input. When only\n+               --  partial refinement is visible, ensure that either one of\n+               --  the constituents is utilized and is of mode Input, or the\n+               --  abstract state is repeated and no constituent is utilized.\n \n                if Ekind (Item_Id) = E_Abstract_State\n                  and then Has_Non_Null_Visible_Refinement (Item_Id)\n@@ -24852,9 +24899,9 @@ package body Sem_Prag is\n \n       procedure Check_Output_States is\n          procedure Check_Constituent_Usage (State_Id : Entity_Id);\n-         --  Determine whether all constituents of state State_Id with visible\n-         --  refinement are used and have mode Output. Emit an error if this is\n-         --  not the case (SPARK RM 7.2.4(5)).\n+         --  Determine whether all constituents of state State_Id with full\n+         --  visible refinement are used and have mode Output. Emit an error\n+         --  if this is not the case (SPARK RM 7.2.4(5)).\n \n          -----------------------------\n          -- Check_Constituent_Usage --\n@@ -24865,6 +24912,8 @@ package body Sem_Prag is\n                              Partial_Refinement_Constituents (State_Id);\n             Constit_Elmt : Elmt_Id;\n             Constit_Id   : Entity_Id;\n+            Only_Partial : constant Boolean :=\n+                             not Has_Visible_Refinement (State_Id);\n             Posted       : Boolean := False;\n \n          begin\n@@ -24873,7 +24922,27 @@ package body Sem_Prag is\n                while Present (Constit_Elmt) loop\n                   Constit_Id := Node (Constit_Elmt);\n \n-                  if Present_Then_Remove (Out_Constits, Constit_Id) then\n+                  --  Issue an error when a constituent of State_Id is\n+                  --  utilized, and State_Id has only partial visible\n+                  --  refinement (SPARK RM 7.2.4(3d)).\n+\n+                  if Only_Partial then\n+                     if Present_Then_Remove (Out_Constits, Constit_Id)\n+                       or else Present_Then_Remove (In_Constits, Constit_Id)\n+                       or else\n+                         Present_Then_Remove (In_Out_Constits, Constit_Id)\n+                       or else\n+                         Present_Then_Remove (Proof_In_Constits, Constit_Id)\n+                     then\n+                        Error_Msg_Name_1 := Chars (State_Id);\n+                        SPARK_Msg_NE\n+                          (\"constituent & of state % cannot be used in \"\n+                           & \"global refinement\", N, Constit_Id);\n+                        Error_Msg_Name_1 := Chars (State_Id);\n+                        SPARK_Msg_N (\"\\use state % instead\", N);\n+                     end if;\n+\n+                  elsif Present_Then_Remove (Out_Constits, Constit_Id) then\n                      null;\n \n                   --  The constituent appears in the global refinement, but has\n@@ -24930,8 +24999,10 @@ package body Sem_Prag is\n             while Present (Item_Elmt) loop\n                Item_Id := Node (Item_Elmt);\n \n-               --  Ensure that all of the constituents are utilized and they\n-               --  have mode Output.\n+               --  When full refinement is visible, ensure that all of the\n+               --  constituents are utilized and they have mode Output.\n+               --  When only partial refinement is visible, ensure that\n+               --  no constituent is utilized.\n \n                if Ekind (Item_Id) = E_Abstract_State\n                  and then Has_Non_Null_Visible_Refinement (Item_Id)\n@@ -24951,9 +25022,10 @@ package body Sem_Prag is\n       procedure Check_Proof_In_States is\n          procedure Check_Constituent_Usage (State_Id : Entity_Id);\n          --  Determine whether at least one constituent of state State_Id with\n-         --  visible refinement is used and has mode Proof_In. Ensure that the\n-         --  remaining constituents do not have Input, In_Out or Output modes.\n-         --  Emit an error of this is not the case (SPARK RM 7.2.4(5)).\n+         --  full or partial visible refinement is used and has mode Proof_In.\n+         --  Ensure that the remaining constituents do not have Input, In_Out\n+         --  or Output modes. Emit an error of this is not the case (SPARK RM\n+         --  7.2.4(5)).\n \n          -----------------------------\n          -- Check_Constituent_Usage --\n@@ -24994,9 +25066,18 @@ package body Sem_Prag is\n                end loop;\n             end if;\n \n-            --  Not one of the constituents appeared as Proof_In\n+            --  Not one of the constituents appeared as Proof_In. When\n+            --  full refinement is visible, always emit an error (SPARK RM\n+            --  7.2.4(3a)). When only partial refinement is visible, emit an\n+            --  error if the abstract state itself is not utilized (SPARK RM\n+            --  7.2.4(3d)). In the case where both are utilized, an error will\n+            --  be issued in Check_State_And_Constituent_Use.\n \n-            if not Proof_In_Seen then\n+            if not Proof_In_Seen\n+              and then (Has_Visible_Refinement (State_Id)\n+                          or else\n+                        Contains (Repeat_Items, State_Id))\n+            then\n                SPARK_Msg_NE\n                  (\"global refinement of state & must include at least one \"\n                   & \"constituent of mode `Proof_In`\", N, State_Id);\n@@ -25025,8 +25106,11 @@ package body Sem_Prag is\n             while Present (Item_Elmt) loop\n                Item_Id := Node (Item_Elmt);\n \n-               --  Ensure that at least one of the constituents is utilized and\n-               --  is of mode Proof_In\n+               --  Ensure that at least one of the constituents is utilized\n+               --  and is of mode Proof_In. When only partial refinement is\n+               --  visible, ensure that either one of the constituents is\n+               --  utilized and is of mode Proof_In, or the abstract state\n+               --  is repeated and no constituent is utilized.\n \n                if Ekind (Item_Id) = E_Abstract_State\n                  and then Has_Non_Null_Visible_Refinement (Item_Id)\n@@ -25081,23 +25165,37 @@ package body Sem_Prag is\n                SPARK_Msg_N (\"\\expected mode %, found mode %\", Item);\n             end Inconsistent_Mode_Error;\n \n+            Enc_State : Entity_Id := Empty;\n+            --  Encapsulating state for constituent, Empty otherwise\n+\n          --  Start of processing for Check_Refined_Global_Item\n \n          begin\n+            if Ekind_In (Item_Id, E_Abstract_State, E_Constant, E_Variable)\n+            then\n+               Enc_State := Encapsulating_State (Item_Id);\n+            end if;\n+\n             --  When the state or object acts as a constituent of another\n             --  state with a visible refinement, collect it for the state\n             --  completeness checks performed later on. Note that the item\n             --  acts as a constituent only when the encapsulating state is\n             --  present in pragma Global.\n \n-            if Ekind_In (Item_Id, E_Abstract_State, E_Constant, E_Variable)\n-             and then Present (Encapsulating_State (Item_Id))\n-             and then\n-               (Has_Visible_Refinement (Encapsulating_State (Item_Id))\n-                  or else\n-                Has_Partial_Visible_Refinement (Encapsulating_State (Item_Id)))\n-             and then Contains (States, Encapsulating_State (Item_Id))\n+            if Present (Enc_State)\n+              and then (Has_Visible_Refinement (Enc_State)\n+                          or else\n+                        Has_Partial_Visible_Refinement (Enc_State))\n+              and then Contains (States, Enc_State)\n             then\n+               --  If the state has only partial visible refinement, remove it\n+               --  from the list of items that should be repeated from pragma\n+               --  Global.\n+\n+               if not Has_Visible_Refinement (Enc_State) then\n+                  Present_Then_Remove (Repeat_Items, Enc_State);\n+               end if;\n+\n                if Global_Mode = Name_Input then\n                   Append_New_Elmt (Item_Id, In_Constits);\n \n@@ -25112,31 +25210,37 @@ package body Sem_Prag is\n                end if;\n \n             --  When not a constituent, ensure that both occurrences of the\n-            --  item in pragmas Global and Refined_Global match.\n+            --  item in pragmas Global and Refined_Global match. Also remove\n+            --  it when present from the list of items that should be repeated\n+            --  from pragma Global.\n \n-            elsif Contains (In_Items, Item_Id) then\n-               if Global_Mode /= Name_Input then\n-                  Inconsistent_Mode_Error (Name_Input);\n-               end if;\n+            else\n+               Present_Then_Remove (Repeat_Items, Item_Id);\n \n-            elsif Contains (In_Out_Items, Item_Id) then\n-               if Global_Mode /= Name_In_Out then\n-                  Inconsistent_Mode_Error (Name_In_Out);\n-               end if;\n+               if Contains (In_Items, Item_Id) then\n+                  if Global_Mode /= Name_Input then\n+                     Inconsistent_Mode_Error (Name_Input);\n+                  end if;\n \n-            elsif Contains (Out_Items, Item_Id) then\n-               if Global_Mode /= Name_Output then\n-                  Inconsistent_Mode_Error (Name_Output);\n-               end if;\n+               elsif Contains (In_Out_Items, Item_Id) then\n+                  if Global_Mode /= Name_In_Out then\n+                     Inconsistent_Mode_Error (Name_In_Out);\n+                  end if;\n \n-            elsif Contains (Proof_In_Items, Item_Id) then\n-               null;\n+               elsif Contains (Out_Items, Item_Id) then\n+                  if Global_Mode /= Name_Output then\n+                     Inconsistent_Mode_Error (Name_Output);\n+                  end if;\n+\n+               elsif Contains (Proof_In_Items, Item_Id) then\n+                  null;\n \n-            --  The item does not appear in the corresponding Global pragma,\n-            --  it must be an extra (SPARK RM 7.2.4(3)).\n+               --  The item does not appear in the corresponding Global pragma,\n+               --  it must be an extra (SPARK RM 7.2.4(3)).\n \n-            else\n-               SPARK_Msg_NE (\"extra global item &\", Item, Item_Id);\n+               else\n+                  SPARK_Msg_NE (\"extra global item &\", Item, Item_Id);\n+               end if;\n             end if;\n          end Check_Refined_Global_Item;\n \n@@ -25255,6 +25359,16 @@ package body Sem_Prag is\n                end if;\n             end if;\n \n+            --  Record global items without full visible refinement found in\n+            --  pragma Global, which should (SPARK RM 7.2.4(3c)) or may (SPARK\n+            --  RM 7.2.4(3d)) be repeated in the global refinement.\n+\n+            if Ekind (Item_Id) /= E_Abstract_State\n+              or else not Has_Visible_Refinement (Item_Id)\n+            then\n+               Append_New_Elmt (Item_Id, Repeat_Items);\n+            end if;\n+\n             --  Add the item to the proper list\n \n             if Item_Mode = Name_Input then\n@@ -25354,6 +25468,12 @@ package body Sem_Prag is\n          return False;\n       end Present_Then_Remove;\n \n+      procedure Present_Then_Remove (List : Elist_Id; Item : Entity_Id) is\n+         Ignore : Boolean;\n+      begin\n+         Ignore := Present_Then_Remove (List, Item);\n+      end Present_Then_Remove;\n+\n       -------------------------------\n       -- Report_Extra_Constituents --\n       -------------------------------\n@@ -25396,11 +25516,38 @@ package body Sem_Prag is\n          end if;\n       end Report_Extra_Constituents;\n \n+      --------------------------\n+      -- Report_Missing_Items --\n+      --------------------------\n+\n+      procedure Report_Missing_Items is\n+         Item_Elmt : Elmt_Id;\n+         Item_Id   : Entity_Id;\n+      begin\n+         --  Do not perform this check in an instance because it was already\n+         --  performed successfully in the generic template.\n+\n+         if Is_Generic_Instance (Spec_Id) then\n+            null;\n+\n+         else\n+            if Present (Repeat_Items) then\n+               Item_Elmt := First_Elmt (Repeat_Items);\n+               while Present (Item_Elmt) loop\n+                  Item_Id := Node (Item_Elmt);\n+                  SPARK_Msg_NE (\"missing global item &\", N, Item_Id);\n+                  Next_Elmt (Item_Elmt);\n+               end loop;\n+            end if;\n+         end if;\n+      end Report_Missing_Items;\n+\n       --  Local variables\n \n-      Body_Decl : constant Node_Id := Find_Related_Declaration_Or_Body (N);\n-      Errors    : constant Nat     := Serious_Errors_Detected;\n-      Items     : Node_Id;\n+      Body_Decl  : constant Node_Id := Find_Related_Declaration_Or_Body (N);\n+      Errors     : constant Nat     := Serious_Errors_Detected;\n+      Items      : Node_Id;\n+      No_Constit : Boolean;\n \n    --  Start of processing for Analyze_Refined_Global_In_Decl_Part\n \n@@ -25499,6 +25646,15 @@ package body Sem_Prag is\n          Check_Refined_Global_List (Items);\n       end if;\n \n+      --  Store the information that no constituent is used in the global\n+      --  refinement, prior to calling checking procedures which remove items\n+      --  from the list of constituents.\n+\n+      No_Constit := No (In_Constits)\n+        and then No (In_Out_Constits)\n+        and then No (Out_Constits)\n+        and then No (Proof_In_Constits);\n+\n       --  For Input states with visible refinement, at least one constituent\n       --  must be used as an Input in the global refinement.\n \n@@ -25534,6 +25690,29 @@ package body Sem_Prag is\n          Report_Extra_Constituents;\n       end if;\n \n+      --  Emit errors for all items in Global that are not repeated in the\n+      --  global refinement and for which there is no full visible refinement\n+      --  and, in the case of states with partial visible refinement, no\n+      --  constituent is mentioned in the global refinement.\n+\n+      if Serious_Errors_Detected = Errors then\n+         Report_Missing_Items;\n+      end if;\n+\n+      --  Emit an error if no constituent is used in the global refinement\n+      --  (SPARK RM 7.2.4(3f)). Emit this error last, in case a more precise\n+      --  one may be issued by the checking procedures. Do not perform this\n+      --  check in an instance because it was already performed successfully\n+      --  in the generic template.\n+\n+      if Serious_Errors_Detected = Errors\n+        and then not Is_Generic_Instance (Spec_Id)\n+        and then not Has_Null_State\n+        and then No_Constit\n+      then\n+         SPARK_Msg_N (\"missing refinement\", N);\n+      end if;\n+\n       <<Leave>>\n       Set_Is_Analyzed_Pragma (N);\n    end Analyze_Refined_Global_In_Decl_Part;"}]}