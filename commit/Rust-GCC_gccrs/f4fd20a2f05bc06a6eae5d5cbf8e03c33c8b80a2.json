{"sha": "f4fd20a2f05bc06a6eae5d5cbf8e03c33c8b80a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRmZDIwYTJmMDViYzA2YTZlYWU1ZDVjYmY4ZTAzYzMzYzhiODBhMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-12-22T09:51:02Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-12-22T09:51:02Z"}, "message": "re PR debug/60756 (var-tracking selects wrong registers)\n\n\tPR debug/60756\n\t* var-tracking.c (tracked_record_parameter_p): New predicate.\n\t(track_expr_p): Invoke it.\n\t(add_stores): Likewise.\n\nFrom-SVN: r231897", "tree": {"sha": "e31cc101816fc0810e2d00b51db56206319e5674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e31cc101816fc0810e2d00b51db56206319e5674"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4fd20a2f05bc06a6eae5d5cbf8e03c33c8b80a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4fd20a2f05bc06a6eae5d5cbf8e03c33c8b80a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4fd20a2f05bc06a6eae5d5cbf8e03c33c8b80a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4fd20a2f05bc06a6eae5d5cbf8e03c33c8b80a2/comments", "author": null, "committer": null, "parents": [{"sha": "102a9b43207e6fb7d427e23382a1f9b148829b34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/102a9b43207e6fb7d427e23382a1f9b148829b34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/102a9b43207e6fb7d427e23382a1f9b148829b34"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "da6b92345d73f5241ecca4acf3a168f890be9519", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4fd20a2f05bc06a6eae5d5cbf8e03c33c8b80a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4fd20a2f05bc06a6eae5d5cbf8e03c33c8b80a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4fd20a2f05bc06a6eae5d5cbf8e03c33c8b80a2", "patch": "@@ -1,3 +1,10 @@\n+2015-12-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR debug/60756\n+\t* var-tracking.c (tracked_record_parameter_p): New predicate.\n+\t(track_expr_p): Invoke it.\n+\t(add_stores): Likewise.\n+\n 2015-12-21  Jeff Law  <law@redhat.com>\n \n \t* dbgcnt.def (dom_unreachable_edges): New debug counter."}, {"sha": "a5cca2b06d2cc420dece596646fc679d05418e3e", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4fd20a2f05bc06a6eae5d5cbf8e03c33c8b80a2/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4fd20a2f05bc06a6eae5d5cbf8e03c33c8b80a2/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=f4fd20a2f05bc06a6eae5d5cbf8e03c33c8b80a2", "patch": "@@ -5020,6 +5020,27 @@ dataflow_set_destroy (dataflow_set *set)\n   set->vars = NULL;\n }\n \n+/* Return true if T is a tracked parameter with non-degenerate record type.  */\n+\n+static bool\n+tracked_record_parameter_p (tree t)\n+{\n+  if (TREE_CODE (t) != PARM_DECL)\n+    return false;\n+\n+  if (DECL_MODE (t) == BLKmode)\n+    return false;\n+\n+  tree type = TREE_TYPE (t);\n+  if (TREE_CODE (type) != RECORD_TYPE)\n+    return false;\n+\n+  if (DECL_CHAIN (TYPE_FIELDS (type)) == NULL_TREE)\n+    return false;\n+\n+  return true;\n+}\n+\n /* Shall EXPR be tracked?  */\n \n static bool\n@@ -5064,11 +5085,9 @@ track_expr_p (tree expr, bool need_rtl)\n \t\t\t\t\t   &maxsize, &reverse);\n \t      if (!DECL_P (innerdecl)\n \t\t  || DECL_IGNORED_P (innerdecl)\n-\t\t  /* Do not track declarations for parts of tracked parameters\n-\t\t     since we want to track them as a whole instead.  */\n-\t\t  || (TREE_CODE (innerdecl) == PARM_DECL\n-\t\t      && DECL_MODE (innerdecl) != BLKmode\n-\t\t      && TREE_CODE (TREE_TYPE (innerdecl)) != UNION_TYPE)\n+\t\t  /* Do not track declarations for parts of tracked record\n+\t\t     parameters since we want to track them as a whole.  */\n+\t\t  || tracked_record_parameter_p (innerdecl)\n \t\t  || TREE_STATIC (innerdecl)\n \t\t  || bitsize <= 0\n \t\t  || bitpos + bitsize > 256\n@@ -5928,18 +5947,11 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n   resolve = preserve = !cselib_preserved_value_p (v);\n \n   /* We cannot track values for multiple-part variables, so we track only\n-     locations for tracked parameters passed either by invisible reference\n-     or directly in multiple locations.  */\n+     locations for tracked record parameters.  */\n   if (track_p\n       && REG_P (loc)\n       && REG_EXPR (loc)\n-      && TREE_CODE (REG_EXPR (loc)) == PARM_DECL\n-      && DECL_MODE (REG_EXPR (loc)) != BLKmode\n-      && TREE_CODE (TREE_TYPE (REG_EXPR (loc))) != UNION_TYPE\n-      && ((MEM_P (DECL_INCOMING_RTL (REG_EXPR (loc)))\n-\t   && XEXP (DECL_INCOMING_RTL (REG_EXPR (loc)), 0) != arg_pointer_rtx)\n-          || (GET_CODE (DECL_INCOMING_RTL (REG_EXPR (loc))) == PARALLEL\n-\t      && XVECLEN (DECL_INCOMING_RTL (REG_EXPR (loc)), 0) > 1)))\n+      && tracked_record_parameter_p (REG_EXPR (loc)))\n     {\n       /* Although we don't use the value here, it could be used later by the\n \t mere virtue of its existence as the operand of the reverse operation"}]}