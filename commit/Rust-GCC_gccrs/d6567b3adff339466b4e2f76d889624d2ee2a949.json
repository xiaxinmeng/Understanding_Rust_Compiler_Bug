{"sha": "d6567b3adff339466b4e2f76d889624d2ee2a949", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY1NjdiM2FkZmYzMzk0NjZiNGUyZjc2ZDg4OTYyNGQyZWUyYTk0OQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2002-12-12T02:44:02Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2002-12-12T02:44:02Z"}, "message": "pa.h (BIGGEST_ALIGNMENT): Change 32-bit value to 64 bits.\n\n\t* pa.h (BIGGEST_ALIGNMENT): Change 32-bit value to 64 bits.\n\t(MAX_PARM_BOUNDARY, STACK_BOUNDARY): Express in terms of\n\tBIGGEST_ALIGNMENT.\n\t(PREFERRED_STACK_BOUNDARY): Express in terms of STACK_BOUNDARY.\n\t(FUNCTION_BOUNDARY): Express in terms of BITS_PER_WORD.\n\nFrom-SVN: r60056", "tree": {"sha": "e5b1fdd7a7c1bd0ca9ec810f776f3162a8a5b93f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5b1fdd7a7c1bd0ca9ec810f776f3162a8a5b93f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6567b3adff339466b4e2f76d889624d2ee2a949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6567b3adff339466b4e2f76d889624d2ee2a949", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6567b3adff339466b4e2f76d889624d2ee2a949", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6567b3adff339466b4e2f76d889624d2ee2a949/comments", "author": null, "committer": null, "parents": [{"sha": "355bd14f09c16c8a468e2d578c24efdff04d1e8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/355bd14f09c16c8a468e2d578c24efdff04d1e8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/355bd14f09c16c8a468e2d578c24efdff04d1e8e"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "878a422fb846a896205ae751334f58be31dfd6d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6567b3adff339466b4e2f76d889624d2ee2a949/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6567b3adff339466b4e2f76d889624d2ee2a949/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6567b3adff339466b4e2f76d889624d2ee2a949", "patch": "@@ -1,3 +1,11 @@\n+2002-12-11  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* pa.h (BIGGEST_ALIGNMENT): Change 32-bit value to 64 bits.\n+\t(MAX_PARM_BOUNDARY, STACK_BOUNDARY): Express in terms of\n+\tBIGGEST_ALIGNMENT.\n+\t(PREFERRED_STACK_BOUNDARY): Express in terms of STACK_BOUNDARY.\n+\t(FUNCTION_BOUNDARY): Express in terms of BITS_PER_WORD.\n+\n 2002-12-11  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* doc/invoke.texi: Correct dump file names."}, {"sha": "860b7590d9837358671b31ffc6e921c9be3ac54c", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6567b3adff339466b4e2f76d889624d2ee2a949/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6567b3adff339466b4e2f76d889624d2ee2a949/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=d6567b3adff339466b4e2f76d889624d2ee2a949", "patch": "@@ -451,19 +451,19 @@ do {\t\t\t\t\t\t\t\t\\\n \n /* Largest alignment required for any stack parameter, in bits.\n    Don't define this if it is equal to PARM_BOUNDARY */\n-#define MAX_PARM_BOUNDARY (2 * PARM_BOUNDARY)\n+#define MAX_PARM_BOUNDARY BIGGEST_ALIGNMENT\n \n /* Boundary (in *bits*) on which stack pointer is always aligned;\n    certain optimizations in combine depend on this.\n \n-   GCC for the PA always rounds its stacks to a 512bit boundary,\n-   but that happens late in the compilation process.  */\n-#define STACK_BOUNDARY (TARGET_64BIT ? 128 : 64)\n+   GCC for the PA always rounds its stacks to a 8 * STACK_BOUNDARY\n+   boundary, but that happens late in the compilation process.  */\n+#define STACK_BOUNDARY BIGGEST_ALIGNMENT\n \n-#define PREFERRED_STACK_BOUNDARY 512\n+#define PREFERRED_STACK_BOUNDARY (8 * STACK_BOUNDARY)\n \n /* Allocation boundary (in *bits*) for the code of a function.  */\n-#define FUNCTION_BOUNDARY (TARGET_64BIT ? 64 : 32)\n+#define FUNCTION_BOUNDARY BITS_PER_WORD\n \n /* Alignment of field after `int : 0' in a structure.  */\n #define EMPTY_FIELD_BOUNDARY 32\n@@ -474,9 +474,8 @@ do {\t\t\t\t\t\t\t\t\\\n /* A bit-field declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n-/* No data type wants to be aligned rounder than this.  This is set\n-   to 128 bits to allow for lock semaphores in the stack frame.*/\n-#define BIGGEST_ALIGNMENT 128\n+/* No data type wants to be aligned rounder than this.  */\n+#define BIGGEST_ALIGNMENT (2 * BITS_PER_WORD)\n \n /* Get around hp-ux assembler bug, and make strcpy of constants fast.  */\n #define CONSTANT_ALIGNMENT(CODE, TYPEALIGN) \\\n@@ -488,7 +487,6 @@ do {\t\t\t\t\t\t\t\t\\\n    && TYPE_MODE (TREE_TYPE (TYPE)) == QImode\t\\\n    && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n \n-\n /* Set this nonzero if move instructions will actually fail to work\n    when given unaligned data.  */\n #define STRICT_ALIGNMENT 1"}]}