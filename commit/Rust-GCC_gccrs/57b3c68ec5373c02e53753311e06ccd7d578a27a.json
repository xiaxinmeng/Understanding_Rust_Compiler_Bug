{"sha": "57b3c68ec5373c02e53753311e06ccd7d578a27a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdiM2M2OGVjNTM3M2MwMmU1Mzc1MzMxMWUwNmNjZDdkNTc4YTI3YQ==", "commit": {"author": {"name": "Anthony Green", "email": "green@redhat.com", "date": "2005-12-19T02:54:19Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2005-12-19T02:54:19Z"}, "message": "natPlainDatagramSocketImplPosix.cc (getLocalAddress): New helper function.\n\n2005-12-18  Anthony Green  <green@redhat.com>\n\n\t* gnu/java/net/natPlainDatagramSocketImplPosix.cc (getLocalAddress): \n\tNew helper function.\n\t(setOption): Use getLocalAddress.  Don't downcast value to\n\tInetAddress.\n\t(getOption): Use getLocalAddress.\n\nFrom-SVN: r108779", "tree": {"sha": "78939120b04d55c91fb9bf7e42be7c1023a6ae3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78939120b04d55c91fb9bf7e42be7c1023a6ae3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57b3c68ec5373c02e53753311e06ccd7d578a27a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b3c68ec5373c02e53753311e06ccd7d578a27a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b3c68ec5373c02e53753311e06ccd7d578a27a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b3c68ec5373c02e53753311e06ccd7d578a27a/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f988a24784b7e921c76fcb39e0416d4ef122b441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f988a24784b7e921c76fcb39e0416d4ef122b441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f988a24784b7e921c76fcb39e0416d4ef122b441"}], "stats": {"total": 96, "additions": 47, "deletions": 49}, "files": [{"sha": "e3d2b03f2317f524e2f20d626e4c76e782fc71f8", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b3c68ec5373c02e53753311e06ccd7d578a27a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b3c68ec5373c02e53753311e06ccd7d578a27a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=57b3c68ec5373c02e53753311e06ccd7d578a27a", "patch": "@@ -1,3 +1,11 @@\n+2005-12-18  Anthony Green  <green@redhat.com>\n+\n+\t* gnu/java/net/natPlainDatagramSocketImplPosix.cc (getLocalAddress): \n+\tNew helper function.\n+\t(setOption): Use getLocalAddress.  Don't downcast value to\n+\tInetAddress.\n+\t(getOption): Use getLocalAddress.\n+\n 2005-12-16  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/Class.java (getPackage): Get package from"}, {"sha": "ada5fd160c5eed47bf2d36494b21e572a08ea82e", "filename": "libjava/gnu/java/net/natPlainDatagramSocketImplPosix.cc", "status": "modified", "additions": 39, "deletions": 49, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b3c68ec5373c02e53753311e06ccd7d578a27a/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b3c68ec5373c02e53753311e06ccd7d578a27a/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc?ref=57b3c68ec5373c02e53753311e06ccd7d578a27a", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2003  Free Software Foundation\n+/* Copyright (C) 2003, 2005  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -485,6 +485,38 @@ gnu::java::net::PlainDatagramSocketImpl::mcastGrp (::java::net::InetAddress *ine\n   throw new ::java::io::IOException (JvNewStringUTF (strerr));\n }\n \n+// Helper function to get the InetAddress for a given socket (file\n+// descriptor).\n+static ::java::net::InetAddress *\n+getLocalAddress (int native_fd)\n+{\n+  jbyteArray laddr;\n+  union SockAddr u;\n+  socklen_t addrlen = sizeof(u);\n+\n+  if (::getsockname (native_fd, (sockaddr*) &u, &addrlen) != 0)\n+    {\n+      char* strerr = strerror (errno);\n+      throw new ::java::net::SocketException (JvNewStringUTF (strerr));\n+    }\n+  if (u.address.sin_family == AF_INET)\n+    {\n+      laddr = JvNewByteArray (4);\n+      memcpy (elements (laddr), &u.address.sin_addr, 4);\n+    }\n+#ifdef HAVE_INET6\n+  else if (u.address.sin_family == AF_INET6)\n+    {\n+      laddr = JvNewByteArray (16);\n+      memcpy (elements (laddr), &u.address6.sin6_addr, 16);\n+    }\n+#endif\n+  else\n+    throw new ::java::net::SocketException (JvNewStringUTF (\"invalid family\"));\n+\n+  return new ::java::net::InetAddress (laddr, NULL);\n+}\n+\n void\n gnu::java::net::PlainDatagramSocketImpl::setOption (jint optID,\n                                                     ::java::lang::Object *value)\n@@ -605,8 +637,10 @@ gnu::java::net::PlainDatagramSocketImpl::setOption (jint optID,\n         return;\n \t\n       case _Jv_IP_MULTICAST_LOOP_ :\n-\thaddress = ((::java::net::InetAddress *) value)->addr;\n-\tlen = haddress->length;\n+\t// cache the local address\n+\tif (localAddress == NULL)\n+\t  localAddress = getLocalAddress (native_fd);\n+\tlen = localAddress->addr->length;\n \tif (len == 4)\n \t  {\n \t    level = IPPROTO_IP;\n@@ -650,8 +684,6 @@ gnu::java::net::PlainDatagramSocketImpl::getOption (jint optID)\n {\n   int val;\n   socklen_t val_len = sizeof(val);\n-  union SockAddr u;\n-  socklen_t addrlen = sizeof(u);\n   int level, opname;\n \n   switch (optID)\n@@ -697,27 +729,7 @@ gnu::java::net::PlainDatagramSocketImpl::getOption (jint optID)\n       case _Jv_SO_BINDADDR_:\n \t// cache the local address\n \tif (localAddress == NULL)\n-\t  {\t\n-\t    jbyteArray laddr;\n-\t    if (::getsockname (native_fd, (sockaddr*) &u, &addrlen) != 0)\n-\t      goto error;\n-\t    if (u.address.sin_family == AF_INET)\n-\t      {\n-\t\tladdr = JvNewByteArray (4);\n-\t\tmemcpy (elements (laddr), &u.address.sin_addr, 4);\n-\t      }\n-#ifdef HAVE_INET6\n-            else if (u.address.sin_family == AF_INET6)\n-\t      {\n-\t\tladdr = JvNewByteArray (16);\n-\t\tmemcpy (elements (laddr), &u.address6.sin6_addr, 16);\n-\t      }\n-#endif\n-\t    else\n-\t      throw new ::java::net::SocketException (\n-\t\t\t      JvNewStringUTF (\"invalid family\"));\n-\t    localAddress = new ::java::net::InetAddress (laddr, NULL);\n-\t  }\n+\t  localAddress = getLocalAddress (native_fd);\n \treturn localAddress;  \n \tbreak;\n       case _Jv_SO_REUSEADDR_ :\n@@ -761,29 +773,7 @@ gnu::java::net::PlainDatagramSocketImpl::getOption (jint optID)\n \t\n       case _Jv_IP_MULTICAST_LOOP_ :\n \t// cache the local address\n-\tif (localAddress == NULL)\n-\t  {\t\n-\t    jbyteArray laddr;\n-\t    if (::getsockname (native_fd, (sockaddr*) &u, &addrlen) != 0)\n-\t      goto error;\n-\t    if (u.address.sin_family == AF_INET)\n-\t      {\n-\t\tladdr = JvNewByteArray (4);\n-\t\tmemcpy (elements (laddr), &u.address.sin_addr, 4);\n-\t      }\n-#ifdef HAVE_INET6\n-            else if (u.address.sin_family == AF_INET6)\n-\t      {\n-\t\tladdr = JvNewByteArray (16);\n-\t\tmemcpy (elements (laddr), &u.address6.sin6_addr, 16);\n-\t      }\n-#endif\n-\t    else\n-\t      throw new ::java::net::SocketException (\n-\t\t\t      JvNewStringUTF (\"invalid family\"));\n-\t    localAddress = new ::java::net::InetAddress (laddr, NULL);\n-\t    \n-\t  }\n+\tlocalAddress = getLocalAddress (native_fd);\n \tif (localAddress->addr->length == 4) \n \t  {\n \t    level = IPPROTO_IP;"}]}