{"sha": "83d502cf40077b7115c8e6342218186223a42474", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNkNTAyY2Y0MDA3N2I3MTE1YzhlNjM0MjIxODE4NjIyM2E0MjQ3NA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-10-12T18:48:59Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-10-12T18:48:59Z"}, "message": "profile-count.c (safe_scale_64bit): Fix GCC4.x path.\n\n\n\t* profile-count.c (safe_scale_64bit): Fix GCC4.x path.\n\t(profile_probability): Set max_probability\n\tto (uint32_t) 1 << (n_bits - 2) and update accessors to avoid overlfows\n\tin temporaries.\n\t* profile-count.c (profile_probability::differs_from_p): Do not\n\trely on max_probaiblity == 10000\n\n\t* gcc.dg/predict-13.c: Update template for probaility change.\n\t* gcc.dg/predict-8.c: Likewise.\n\nFrom-SVN: r253692", "tree": {"sha": "af470e3cd4226d18bee47f5dc8c2f23cb9ac0e07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af470e3cd4226d18bee47f5dc8c2f23cb9ac0e07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83d502cf40077b7115c8e6342218186223a42474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83d502cf40077b7115c8e6342218186223a42474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83d502cf40077b7115c8e6342218186223a42474", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83d502cf40077b7115c8e6342218186223a42474/comments", "author": null, "committer": null, "parents": [{"sha": "8b48488fbe122c3fa56be84fd048846207466eb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b48488fbe122c3fa56be84fd048846207466eb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b48488fbe122c3fa56be84fd048846207466eb0"}], "stats": {"total": 74, "additions": 49, "deletions": 25}, "files": [{"sha": "92cdc5f0c9a9942aa9aee420c458aa1c7d3c695b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83d502cf40077b7115c8e6342218186223a42474/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83d502cf40077b7115c8e6342218186223a42474/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83d502cf40077b7115c8e6342218186223a42474", "patch": "@@ -1,3 +1,12 @@\n+2017-10-12  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* profile-count.h (safe_scale_64bit): Fix GCC4.x path.\n+\t(profile_probability): Set max_probability\n+\tto (uint32_t) 1 << (n_bits - 2) and update accessors to avoid overlfows\n+\tin temporaries.\n+\t* profile-count.c (profile_probability::differs_from_p): Do not\n+\trely on max_probaiblity == 10000\n+\n 2017-10-12  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dse.c (valid_ao_ref_for_dse): Reject ao_refs with"}, {"sha": "44ceaed2d66140d32a4d1c7ccb7c2c961a21871a", "filename": "gcc/profile-count.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83d502cf40077b7115c8e6342218186223a42474/gcc%2Fprofile-count.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83d502cf40077b7115c8e6342218186223a42474/gcc%2Fprofile-count.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.c?ref=83d502cf40077b7115c8e6342218186223a42474", "patch": "@@ -147,12 +147,12 @@ profile_probability::differs_from_p (profile_probability other) const\n {\n   if (!initialized_p () || !other.initialized_p ())\n     return false;\n-  if ((uint64_t)m_val - (uint64_t)other.m_val < 10\n-      || (uint64_t)other.m_val - (uint64_t)m_val < 10)\n+  if ((uint64_t)m_val - (uint64_t)other.m_val < max_probability / 1000\n+      || (uint64_t)other.m_val - (uint64_t)max_probability < 1000)\n     return false;\n   if (!other.m_val)\n     return true;\n-  int64_t ratio = m_val * 100 / other.m_val;\n+  int64_t ratio = (int64_t)m_val * 100 / other.m_val;\n   return ratio < 99 || ratio > 101;\n }\n "}, {"sha": "4546e199f24016b25311e06f7475352ea57852ee", "filename": "gcc/profile-count.h", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83d502cf40077b7115c8e6342218186223a42474/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83d502cf40077b7115c8e6342218186223a42474/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=83d502cf40077b7115c8e6342218186223a42474", "patch": "@@ -67,7 +67,10 @@ safe_scale_64bit (uint64_t a, uint64_t b, uint64_t c, uint64_t *res)\n   if (a < ((uint64_t)1 << 31)\n       && b < ((uint64_t)1 << 31)\n       && c < ((uint64_t)1 << 31))\n-    return (a * b + (c / 2)) / c;\n+    {\n+      *res = (a * b + (c / 2)) / c;\n+      return true;\n+    }\n #endif\n   return slow_safe_scale_64bit (a, b, c, res);\n }\n@@ -111,11 +114,10 @@ safe_scale_64bit (uint64_t a, uint64_t b, uint64_t c, uint64_t *res)\n \n class GTY((user)) profile_probability\n {\n-  /* For now use values in range 0...REG_BR_PROB_BASE.  Later we can use full\n-     precision of 30 bits available.  */\n-\n   static const int n_bits = 30;\n-  static const uint32_t max_probability = REG_BR_PROB_BASE;\n+  /* We can technically use ((uint32_t) 1 << (n_bits - 1)) - 2 but that\n+     will lead to harder multiplication sequences.  */\n+  static const uint32_t max_probability = (uint32_t) 1 << (n_bits - 2);\n   static const uint32_t uninitialized_probability\n \t\t = ((uint32_t) 1 << (n_bits - 1)) - 1;\n \n@@ -210,14 +212,14 @@ class GTY((user)) profile_probability\n     {\n       profile_probability ret;\n       gcc_checking_assert (v >= 0 && v <= REG_BR_PROB_BASE);\n-      ret.m_val = RDIV (v * max_probability, REG_BR_PROB_BASE);\n+      ret.m_val = RDIV (v * (uint64_t) max_probability, REG_BR_PROB_BASE);\n       ret.m_quality = profile_guessed;\n       return ret;\n     }\n   int to_reg_br_prob_base () const\n     {\n       gcc_checking_assert (initialized_p ());\n-      return RDIV (m_val * REG_BR_PROB_BASE, max_probability);\n+      return RDIV (m_val * (uint64_t) REG_BR_PROB_BASE, max_probability);\n     }\n \n   /* Conversion to and from RTL representation of profile probabilities.  */\n@@ -246,7 +248,12 @@ class GTY((user)) profile_probability\n       if (val1 > val2)\n \tret.m_val = max_probability;\n       else\n-\tret.m_val = RDIV (val1 * max_probability, val2);\n+\t{\n+\t  uint64_t tmp;\n+\t  safe_scale_64bit (val1, max_probability, val2, &tmp);\n+\t  gcc_checking_assert (tmp <= max_probability);\n+\t  ret.m_val = tmp;\n+\t}\n       ret.m_quality = profile_precise;\n       return ret;\n     }\n@@ -443,8 +450,9 @@ class GTY((user)) profile_probability\n       if (!initialized_p ())\n \treturn profile_probability::uninitialized ();\n       profile_probability ret;\n-      ret.m_val = MIN (RDIV (m_val * num, den),\n-\t\t       max_probability);\n+      uint64_t tmp;\n+      safe_scale_64bit (m_val, num, den, &tmp);\n+      ret.m_val = MIN (tmp, max_probability);\n       ret.m_quality = MIN (m_quality, profile_adjusted);\n       return ret;\n     }\n@@ -482,7 +490,7 @@ class GTY((user)) profile_probability\n       if (m_val == uninitialized_probability)\n \treturn m_quality == profile_guessed;\n       else\n-\treturn m_val <= REG_BR_PROB_BASE;\n+\treturn m_val <= max_probability;\n     }\n \n   /* Comparsions are three-state and conservative.  False is returned if\n@@ -781,8 +789,10 @@ class GTY(()) profile_count\n       if (!initialized_p ())\n \treturn profile_count::uninitialized ();\n       profile_count ret;\n-      ret.m_val = RDIV (m_val * prob.m_val,\n-\t\t\tprofile_probability::max_probability);\n+      uint64_t tmp;\n+      safe_scale_64bit (m_val, prob.m_val, profile_probability::max_probability,\n+\t\t\t&tmp);\n+      ret.m_val = tmp;\n       ret.m_quality = MIN (m_quality, prob.m_quality);\n       return ret;\n     }\n@@ -794,11 +804,11 @@ class GTY(()) profile_count\n       if (!initialized_p ())\n \treturn profile_count::uninitialized ();\n       profile_count ret;\n+      uint64_t tmp;\n+\n       gcc_checking_assert (num >= 0 && den > 0);\n-      /* FIXME: shrink wrapping violates this sanity check.  */\n-      gcc_checking_assert ((num <= REG_BR_PROB_BASE\n-\t\t\t    || den <= REG_BR_PROB_BASE) || 1);\n-      ret.m_val = RDIV (m_val * num, den);\n+      safe_scale_64bit (m_val, num, den, &tmp);\n+      ret.m_val = MIN (tmp, max_count);\n       ret.m_quality = MIN (m_quality, profile_adjusted);\n       return ret;\n     }"}, {"sha": "c8043641a4b02efe0e015b09c6e5c68faabe3431", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83d502cf40077b7115c8e6342218186223a42474/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83d502cf40077b7115c8e6342218186223a42474/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83d502cf40077b7115c8e6342218186223a42474", "patch": "@@ -1,3 +1,8 @@\n+2017-10-12  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/predict-13.c: Update template for probaility change.\n+\t* gcc.dg/predict-8.c: Likewise.\n+\n 2017-10-12  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-c++-common/cilk-plus/AN/parser_errors.c: Update expected"}, {"sha": "71b16f80be2c17dad5c3482b5ae44c849e8310e7", "filename": "gcc/testsuite/gcc.dg/ipa/inlinehint-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83d502cf40077b7115c8e6342218186223a42474/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finlinehint-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83d502cf40077b7115c8e6342218186223a42474/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finlinehint-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finlinehint-4.c?ref=83d502cf40077b7115c8e6342218186223a42474", "patch": "@@ -35,5 +35,5 @@ test (int i)\n     lookup (9 * i);\n }\n /* { dg-final { scan-ipa-dump \"Wrapper penalty\"  \"inline\"  } } */\n-/* { dg-final { scan-ipa-dump-not \"Inlining lookup_slow to lookup\"  \"inline\"  } } */\n-/* { dg-final { scan-ipa-dump \"Inlining lookup to test\"  \"inline\"  } } */\n+/* { dg-final { scan-ipa-dump-not \"Inlined lookup_slow into lookup\"  \"inline\"  } } */\n+/* { dg-final { scan-ipa-dump \"Inlined lookup into test\"  \"inline\"  } } */"}, {"sha": "385be9e138901a0cd215a6245ff60da0d5d5ad42", "filename": "gcc/testsuite/gcc.dg/predict-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83d502cf40077b7115c8e6342218186223a42474/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83d502cf40077b7115c8e6342218186223a42474/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-13.c?ref=83d502cf40077b7115c8e6342218186223a42474", "patch": "@@ -21,4 +21,4 @@ int main(int argc, char **argv)\n }\n \n /* { dg-final { scan-tree-dump-times \"combined heuristics of edge\\[^:\\]*: 33.3%\" 3 \"profile_estimate\"} } */\n-/* { dg-final { scan-tree-dump-times \"combined heuristics of edge\\[^:\\]*: 0.0%\" 2 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"combined heuristics of edge\\[^:\\]*: 0.1%\" 2 \"profile_estimate\"} } */"}, {"sha": "fa975b3d95f9711dcda74541ce4353a15d5b6d1f", "filename": "gcc/testsuite/gcc.dg/predict-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83d502cf40077b7115c8e6342218186223a42474/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83d502cf40077b7115c8e6342218186223a42474/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-8.c?ref=83d502cf40077b7115c8e6342218186223a42474", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { i?86-*-* x86_64-*-* } } } */\n-/* { dg-options \"-O2 -fdump-rtl-expand\" } */\n+/* { dg-options \"-O2 -fdump-rtl-expand-details-blocks\" } */\n \n int foo(float a, float b) {\n   if (a == b)\n@@ -8,4 +8,4 @@ int foo(float a, float b) {\n     return 2;\n }\n \n-/* { dg-final { scan-rtl-dump-times \"REG_BR_PROB 400 \" 1 \"expand\"} } */\n+/* { dg-final { scan-rtl-dump-times \"99.0. .guessed\" 2 \"expand\"} } */"}]}