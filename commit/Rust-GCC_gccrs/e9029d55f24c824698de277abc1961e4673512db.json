{"sha": "e9029d55f24c824698de277abc1961e4673512db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkwMjlkNTVmMjRjODI0Njk4ZGUyNzdhYmMxOTYxZTQ2NzM1MTJkYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-04T09:03:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-04T09:03:18Z"}, "message": "PR libstdc++/86398 fix std::is_trivially_constructible regression\n\nThe intrinsic doesn't check for allowed conversions between scalar\ntypes, so restore the std::is_constructible check.\n\nAlso make some trivial whitespace changes.\n\n\tPR libstdc++/86398\n\t* include/std/type_traits (is_trivially_constructible): Check\n\tis_constructible before __is_trivially_constructible.\n\t* testsuite/20_util/is_trivially_constructible/value.cc: Add more\n\ttests, including negative cases.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Use\n\tzero for dg-error lineno.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\nFrom-SVN: r262379", "tree": {"sha": "8ed81f56279a8f78b37a8d052c88e432d1a44e8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ed81f56279a8f78b37a8d052c88e432d1a44e8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9029d55f24c824698de277abc1961e4673512db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9029d55f24c824698de277abc1961e4673512db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9029d55f24c824698de277abc1961e4673512db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9029d55f24c824698de277abc1961e4673512db/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90fc44ecfa4741a055ec3d35722e2624c2231f98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90fc44ecfa4741a055ec3d35722e2624c2231f98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90fc44ecfa4741a055ec3d35722e2624c2231f98"}], "stats": {"total": 174, "additions": 100, "deletions": 74}, "files": [{"sha": "fa92b4bb489d71489772d6453b0b53b7be920809", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9029d55f24c824698de277abc1961e4673512db/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9029d55f24c824698de277abc1961e4673512db/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e9029d55f24c824698de277abc1961e4673512db", "patch": "@@ -1,5 +1,15 @@\n 2018-07-04  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/86398\n+\t* include/std/type_traits (is_trivially_constructible): Check\n+\tis_constructible before __is_trivially_constructible.\n+\t* testsuite/20_util/is_trivially_constructible/value.cc: Add more\n+\ttests, including negative cases.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Use\n+\tzero for dg-error lineno.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\n \t* include/std/bit (__rotl, __rotr): Avoid branch.\n \t(_If_is_unsigned_integer): Use remove_cv_t.\n \t* testsuite/26_numerics/bit/bitops.count/popcount.cc: New."}, {"sha": "4df82bf6d8c292cde173e9a53fc9e2556d0a66a4", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9029d55f24c824698de277abc1961e4673512db/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9029d55f24c824698de277abc1961e4673512db/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=e9029d55f24c824698de277abc1961e4673512db", "patch": "@@ -1136,7 +1136,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_trivially_constructible\n   template<typename _Tp, typename... _Args>\n     struct is_trivially_constructible\n-    : public __bool_constant<__is_trivially_constructible(_Tp, _Args...)>\n+    : public __and_<is_constructible<_Tp, _Args...>, __bool_constant<\n+\t\t      __is_trivially_constructible(_Tp, _Args...)>>::type\n     { };\n \n   /// is_trivially_default_constructible\n@@ -1159,21 +1160,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp>\n     struct __is_implicitly_default_constructible_impl\n-      : public __do_is_implicitly_default_constructible_impl\n-  {\n-    typedef decltype(__test(declval<_Tp>())) type;\n-  };\n+    : public __do_is_implicitly_default_constructible_impl\n+    {\n+      typedef decltype(__test(declval<_Tp>())) type;\n+    };\n \n   template<typename _Tp>\n     struct __is_implicitly_default_constructible_safe\n-      : public __is_implicitly_default_constructible_impl<_Tp>::type\n-  { };\n+    : public __is_implicitly_default_constructible_impl<_Tp>::type\n+    { };\n \n   template <typename _Tp>\n     struct __is_implicitly_default_constructible\n-      : public __and_<is_default_constructible<_Tp>,\n-                      __is_implicitly_default_constructible_safe<_Tp>>\n-  { };\n+    : public __and_<is_default_constructible<_Tp>,\n+\t\t    __is_implicitly_default_constructible_safe<_Tp>>\n+    { };\n \n   /// is_trivially_copy_constructible\n "}, {"sha": "f260c2a7927bb69dbcbae3be3b7557c3ae5d6523", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_constructible/value.cc", "status": "modified", "additions": 77, "deletions": 61, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9029d55f24c824698de277abc1961e4673512db/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9029d55f24c824698de277abc1961e4673512db/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_constructible%2Fvalue.cc?ref=e9029d55f24c824698de277abc1961e4673512db", "patch": "@@ -44,124 +44,140 @@ void test01()\n   using std::is_trivially_constructible;\n   using namespace __gnu_test;\n \n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tint>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tint, int>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tint, int&>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tint, int&&>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tint, const int&>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n+\t\tint, void*>(false), \"PR 86398\");\n+  static_assert(test_property<is_trivially_constructible,\n+\t\tint, int*>(false), \"PR 86398\");\n+  static_assert(test_property<is_trivially_constructible,\n+\t\tint, const int*>(false), \"PR 86398\");\n+  static_assert(test_property<is_trivially_constructible,\n+\t\tint*, void*>(false), \"PR 86398\");\n+  static_assert(test_property<is_trivially_constructible,\n+\t\tint*, const int*>(false), \"PR 86398\");\n+  static_assert(test_property<is_trivially_constructible,\n+\t\tint&, const int>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible,\n+\t\tconst int&, int>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible,\n+\t\tconst int&, int&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible,\n+\t\tconst int*, int*>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible,\n \t\tPolymorphicClass>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tPolymorphicClass, PolymorphicClass>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tPolymorphicClass, PolymorphicClass&>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tPolymorphicClass, PolymorphicClass&&>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tPolymorphicClass, const PolymorphicClass&>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tTType>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tTType, TType>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tTType, TType&>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tTType, TType&&>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tTType, const TType&>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tTType, int, int>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tPODType>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tPODType, PODType>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tPODType, PODType&>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tPODType, PODType&&>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tPODType, const PODType&>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tPODType, int, int>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tNType>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tSLType>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tLType>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tLType, int>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tconstruct::DelDef>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tconstruct::Abstract>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tconstruct::Ellipsis>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tconstruct::DelEllipsis>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tconstruct::Any>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tconstruct::DelCopy>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tconstruct::DelCopy, const construct::DelCopy&>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tconstruct::DelDtor>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tconstruct::Nontrivial>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tconstruct::UnusualCopy>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tCopyConsOnlyType>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tCopyConsOnlyType, CopyConsOnlyType>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tCopyConsOnlyType, CopyConsOnlyType&>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tCopyConsOnlyType, CopyConsOnlyType&&>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tCopyConsOnlyType, const CopyConsOnlyType&>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tMoveConsOnlyType>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tMoveConsOnlyType, MoveConsOnlyType>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tMoveConsOnlyType, MoveConsOnlyType&>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tMoveConsOnlyType, MoveConsOnlyType&&>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tMoveConsOnlyType, const MoveConsOnlyType&>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tClassType, DerivedType>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tClassType, DerivedType&>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tClassType, DerivedType&&>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tClassType, const DerivedType&>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tHasTemplateCCtor>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tHasTemplateCCtor, HasTemplateCCtor>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tHasTemplateCCtor, const HasTemplateCCtor&>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tMoveOnly>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tMoveOnly, MoveOnly>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tMoveOnly, MoveOnly&>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tMoveOnly, MoveOnly&&>(true), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tMoveOnly, const MoveOnly&>(false), \"\");\n-  static_assert(test_property<is_trivially_constructible, \n+  static_assert(test_property<is_trivially_constructible,\n \t\tMoveOnly2>(false), \"\");\n-\n-\n }"}, {"sha": "53cdf61f4967847b4d93cf82ff637c069792dd02", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9029d55f24c824698de277abc1961e4673512db/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9029d55f24c824698de277abc1961e4673512db/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=e9029d55f24c824698de277abc1961e4673512db", "patch": "@@ -47,4 +47,4 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 39 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 41 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1825 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 0 }"}, {"sha": "ec5b6111127d952feb34b31a6371d1c8b4331427", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9029d55f24c824698de277abc1961e4673512db/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9029d55f24c824698de277abc1961e4673512db/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=e9029d55f24c824698de277abc1961e4673512db", "patch": "@@ -47,5 +47,4 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 39 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 41 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1708 }\n-\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 0 }"}]}