{"sha": "31575896b2380fea53d76e24c2f811d4209253ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE1NzU4OTZiMjM4MGZlYTUzZDc2ZTI0YzJmODExZDQyMDkyNTNhZQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2015-06-23T08:17:23Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2015-06-23T08:17:23Z"}, "message": "[nvptx] gcc/testsuite/gcc.target/nvptx/\n\nWe don't claim to support \"K&R C\" for nvptx, but needed this corresponding\nfunctionality (\"incomplete prototypes\") to support the Fortran\nlibgomp/openacc_lib.h file.\n\n\tgcc/testsuite/\n\t* gcc.target/nvptx/nvptx.exp: New file.\n\t* gcc.target/nvptx/proto-1.c: Likewise.\n\nFrom-SVN: r224822", "tree": {"sha": "e350ee4fe9096390884d41b15c52965fa6a54a43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e350ee4fe9096390884d41b15c52965fa6a54a43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31575896b2380fea53d76e24c2f811d4209253ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31575896b2380fea53d76e24c2f811d4209253ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31575896b2380fea53d76e24c2f811d4209253ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31575896b2380fea53d76e24c2f811d4209253ae/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9180d0e87bdf87b77934e2b4b8e17c8656581bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9180d0e87bdf87b77934e2b4b8e17c8656581bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9180d0e87bdf87b77934e2b4b8e17c8656581bb"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "f17ae0db623a2a13d2e61ecf85393fc1a7bc5889", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31575896b2380fea53d76e24c2f811d4209253ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31575896b2380fea53d76e24c2f811d4209253ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31575896b2380fea53d76e24c2f811d4209253ae", "patch": "@@ -1,3 +1,8 @@\n+2015-06-23  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gcc.target/nvptx/nvptx.exp: New file.\n+\t* gcc.target/nvptx/proto-1.c: Likewise.\n+\n 2015-06-23  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/66449"}, {"sha": "402c8d14a2203b7b66f47341e2742389371b83bd", "filename": "gcc/testsuite/gcc.target/nvptx/nvptx.exp", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31575896b2380fea53d76e24c2f811d4209253ae/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fnvptx.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31575896b2380fea53d76e24c2f811d4209253ae/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fnvptx.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fnvptx.exp?ref=31575896b2380fea53d76e24c2f811d4209253ae", "patch": "@@ -0,0 +1,42 @@\n+# Specific regression driver for nvptx.\n+# Copyright (C) 2015 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't a nvptx target.\n+if ![istarget nvptx*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "5f7735928fed0fb2f1b6030bf8b6c8d9942b2e80", "filename": "gcc/testsuite/gcc.target/nvptx/proto-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31575896b2380fea53d76e24c2f811d4209253ae/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fproto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31575896b2380fea53d76e24c2f811d4209253ae/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fproto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fproto-1.c?ref=31575896b2380fea53d76e24c2f811d4209253ae", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+int f(void)\n+{\n+  const int dev = 4;\n+\n+  /* Check that without an explicit prototype, we deduce from call site the\n+     signature for the (mandatory in PTX) prototype.  */\n+  /* extern int acc_on_device_(int *); */\n+  /* { dg-final { scan-assembler-not \"\\\\\\.callprototype\" } } */\n+  /* { dg-final { scan-assembler \"\\\\\\.extern \\\\\\.func \\\\\\(\\[^,\\n\\r\\]+\\\\\\)acc_on_device_ \\\\\\(\\[^,\\n\\r\\]+\\\\\\);\" } } */\n+  return !acc_on_device_(&dev);\n+}"}]}