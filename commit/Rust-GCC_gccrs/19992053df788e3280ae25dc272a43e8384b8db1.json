{"sha": "19992053df788e3280ae25dc272a43e8384b8db1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk5OTIwNTNkZjc4OGUzMjgwYWUyNWRjMjcyYTQzZTgzODRiOGRiMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-23T17:03:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-23T17:03:41Z"}, "message": "[multiple changes]\n\n2014-01-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_util.adb (Make_Invqriant_Call): If type of expression is\n\ta private extension, get invariant from base type.\n\n2014-01-23  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.adb, sem_attr.adb: Minor reformatting.\n\n2014-01-23  Robert Dewar  <dewar@adacore.com>\n\n\t* opt.adb (Save_Opt_Config_Switches): Save SPARK_Mode_Pragma\n\t(Restore_Opt_Config_Switches): Restore SPARK_Mode_Pragma.\n\t* sem.adb (Semantics): Remove save/restore of\n\tSPARK_Mode[_Pragma]. Not needed since already done in\n\tSave/Restore_Opt_Config_Switches.\n\n2014-01-23  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi, einfo.adb, einfo.ads, sem_prag.adb, gnat_ugn.texi,\n\tfreeze.adb, repinfo.adb, aspects.adb, aspects.ads, sem_ch13.adb:\n\tLinker_Section enhancements.\n\nFrom-SVN: r206992", "tree": {"sha": "f698d9e3c90e8f644532770d9a43ebd40def33db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f698d9e3c90e8f644532770d9a43ebd40def33db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19992053df788e3280ae25dc272a43e8384b8db1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19992053df788e3280ae25dc272a43e8384b8db1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19992053df788e3280ae25dc272a43e8384b8db1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19992053df788e3280ae25dc272a43e8384b8db1/comments", "author": null, "committer": null, "parents": [{"sha": "40f14e9f103d3bcd1216304919b568dd48e471bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f14e9f103d3bcd1216304919b568dd48e471bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f14e9f103d3bcd1216304919b568dd48e471bc"}], "stats": {"total": 423, "additions": 318, "deletions": 105}, "files": [{"sha": "ae2480e7ad60aafc5b1a442b8f1d3c09099ebbcd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=19992053df788e3280ae25dc272a43e8384b8db1", "patch": "@@ -1,3 +1,26 @@\n+2014-01-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.adb (Make_Invqriant_Call): If type of expression is\n+\ta private extension, get invariant from base type.\n+\n+2014-01-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.adb, sem_attr.adb: Minor reformatting.\n+\n+2014-01-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* opt.adb (Save_Opt_Config_Switches): Save SPARK_Mode_Pragma\n+\t(Restore_Opt_Config_Switches): Restore SPARK_Mode_Pragma.\n+\t* sem.adb (Semantics): Remove save/restore of\n+\tSPARK_Mode[_Pragma]. Not needed since already done in\n+\tSave/Restore_Opt_Config_Switches.\n+\n+2014-01-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi, einfo.adb, einfo.ads, sem_prag.adb, gnat_ugn.texi,\n+\tfreeze.adb, repinfo.adb, aspects.adb, aspects.ads, sem_ch13.adb:\n+\tLinker_Section enhancements.\n+\n 2014-01-23  Tristan Gingold  <gingold@adacore.com>\n \n \t* gnat_rm.texi: Minor editing."}, {"sha": "e3ff78d0bc08ef8b165541699197283d40e146f5", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=19992053df788e3280ae25dc272a43e8384b8db1", "patch": "@@ -516,6 +516,7 @@ package body Aspects is\n     Aspect_Invariant                    => Aspect_Invariant,\n     Aspect_Iterator_Element             => Aspect_Iterator_Element,\n     Aspect_Link_Name                    => Aspect_Link_Name,\n+    Aspect_Linker_Section               => Aspect_Linker_Section,\n     Aspect_Lock_Free                    => Aspect_Lock_Free,\n     Aspect_Machine_Radix                => Aspect_Machine_Radix,\n     Aspect_No_Return                    => Aspect_No_Return,"}, {"sha": "5b76f6a6562f58c41a26a50fd4b128a96810097b", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=19992053df788e3280ae25dc272a43e8384b8db1", "patch": "@@ -103,6 +103,7 @@ package Aspects is\n       Aspect_Invariant,                     -- GNAT\n       Aspect_Iterator_Element,\n       Aspect_Link_Name,\n+      Aspect_Linker_Section,                -- GNAT\n       Aspect_Machine_Radix,\n       Aspect_Object_Size,                   -- GNAT\n       Aspect_Output,\n@@ -325,6 +326,7 @@ package Aspects is\n       Aspect_Invariant               => Expression,\n       Aspect_Iterator_Element        => Name,\n       Aspect_Link_Name               => Expression,\n+      Aspect_Linker_Section          => Expression,\n       Aspect_Machine_Radix           => Expression,\n       Aspect_Object_Size             => Expression,\n       Aspect_Output                  => Name,\n@@ -420,6 +422,7 @@ package Aspects is\n       Aspect_Invariant                    => Name_Invariant,\n       Aspect_Iterator_Element             => Name_Iterator_Element,\n       Aspect_Link_Name                    => Name_Link_Name,\n+      Aspect_Linker_Section               => Name_Linker_Section,\n       Aspect_Lock_Free                    => Name_Lock_Free,\n       Aspect_Machine_Radix                => Name_Machine_Radix,\n       Aspect_No_Return                    => Name_No_Return,\n@@ -624,6 +627,7 @@ package Aspects is\n       Aspect_Invariant                    => Always_Delay,\n       Aspect_Iterator_Element             => Always_Delay,\n       Aspect_Link_Name                    => Always_Delay,\n+      Aspect_Linker_Section               => Always_Delay,\n       Aspect_Lock_Free                    => Always_Delay,\n       Aspect_No_Return                    => Always_Delay,\n       Aspect_Output                       => Always_Delay,"}, {"sha": "e0700595f841df147cfaeb8387eec24181326ed0", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=19992053df788e3280ae25dc272a43e8384b8db1", "patch": "@@ -249,6 +249,7 @@ package body Einfo is\n \n    --    SPARK_Pragma                    Node32\n \n+   --    Linker_Section_Pragma           Node33\n    --    SPARK_Aux_Pragma                Node33\n \n    --    Contract                        Node34\n@@ -2387,6 +2388,13 @@ package body Einfo is\n       return Node23 (Id);\n    end Limited_View;\n \n+   function Linker_Section_Pragma (Id : E) return N is\n+   begin\n+      pragma Assert\n+        (Is_Type (Id) or else Is_Object (Id) or else Is_Subprogram (Id));\n+      return Node33 (Id);\n+   end Linker_Section_Pragma;\n+\n    function Lit_Indexes (Id : E) return E is\n    begin\n       pragma Assert (Is_Enumeration_Type (Id));\n@@ -5095,6 +5103,14 @@ package body Einfo is\n       Set_Node23 (Id, V);\n    end Set_Limited_View;\n \n+   procedure Set_Linker_Section_Pragma (Id : E; V : N) is\n+   begin\n+      pragma Assert (Is_Type (Id)\n+        or else Ekind_In (Id, E_Constant, E_Variable)\n+        or else Is_Subprogram (Id));\n+      Set_Node33 (Id, V);\n+   end Set_Linker_Section_Pragma;\n+\n    procedure Set_Lit_Indexes (Id : E; V : E) is\n    begin\n       pragma Assert (Is_Enumeration_Type (Id) and then Root_Type (Id) = Id);\n@@ -9453,6 +9469,12 @@ package body Einfo is\n               E_Package_Body                               =>\n             Write_Str (\"SPARK_Aux_Pragma\");\n \n+         when E_Constant                                   |\n+              E_Variable                                   |\n+              Subprogram_Kind                              |\n+              Type_Kind                                    =>\n+            Write_Str (\"Linker_Section_Pragma\");\n+\n          when others                                       =>\n             Write_Str (\"Field33??\");\n       end case;"}, {"sha": "e43107bda0a50f23caa931a6fb6b0730fb6d708e", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=19992053df788e3280ae25dc272a43e8384b8db1", "patch": "@@ -1299,6 +1299,10 @@ package Einfo is\n --       If any of these items are present, then the flag Has_Gigi_Rep_Item is\n --       set, indicating that Gigi should search the chain.\n --\n+--       Note that in the case of Linker_Section, this is set only for objects,\n+--       and only for transitional use until the new Linker_Section_Pragma\n+--       field is properly processed by the back end.\n+--\n --       Other representation items are included in the chain so that error\n --       messages can easily locate the relevant nodes for posting errors.\n --       Note in particular that size clauses are defined only for this\n@@ -1564,6 +1568,10 @@ package Einfo is\n --       If this flag is set, then Gigi should scan the rep item chain to\n --       process any of these items that appear. At least one such item will\n --       be present.\n+--\n+--       Note that in the case of Linker_Section, this is set only for objects,\n+--       and only for transitional use until the new Linker_Section_Pragma\n+--       field is properly processed by the back end.\n \n --    Has_Homonym (Flag56)\n --       Defined in all entities. Set if an entity has a homonym in the same\n@@ -3055,7 +3063,14 @@ package Einfo is\n --       fide package with the limited-view list through the first_entity and\n --       first_private attributes. The elements of this list are the shadow\n --       entities created for the types and local packages that are declared\n---       in a package appearing in a limited_with clause (Ada 2005: AI-50217)\n+--       in a package appearing in a limited_with clause (Ada 2005: AI-50217).\n+\n+--    Linker_Section_Pragma (Node33)\n+--       Present in constant, variable, type and subprogram entities. Points\n+--       to a linker section pragma that applies to the entity, or is Empty if\n+--       no such pragma applies. Note that for constants and variables, this\n+--       field may be set as a result of a linker section pragma applied to the\n+--       type of the object.\n \n --    Lit_Indexes (Node15)\n --       Defined in enumeration types and subtypes. Non-empty only for the\n@@ -3906,9 +3921,9 @@ package Einfo is\n --       or a copy of the low bound of the index base type if not.\n \n --    Subprograms_For_Type (Node29)\n---       Defined in all type entities, and in subprogram entities. This is used\n---       to hold a list of subprogram entities for subprograms associated with\n---       the type, linked through the Subprogram_List field of the subprogram\n+--       Defined in all type and subprogram entities. This is used to hold\n+--       a list of subprogram entities for subprograms associated with the\n+--       type, linked through the Subprograms_For_Type field of the subprogram\n --       entity. Basically this is a way of multiplexing the single field to\n --       hold more than one entity (since we ran out of space in some type\n --       entities). This is currently used for Invariant_Procedure and also\n@@ -5067,6 +5082,7 @@ package Einfo is\n    --    Related_Expression                  (Node24)\n    --    Current_Use_Clause                  (Node27)\n    --    Subprograms_For_Type                (Node29)\n+   --    Linker_Section_Pragma               (Node33)\n \n    --    Depends_On_Private                  (Flag14)\n    --    Discard_Names                       (Flag88)\n@@ -5301,6 +5317,7 @@ package Einfo is\n    --    Interface_Name                      (Node21)   (constants only)\n    --    Related_Type                        (Node27)   (constants only)\n    --    Initialization_Statements           (Node28)\n+   --    Linker_Section_Pragma               (Node33)\n    --    Has_Alignment_Clause                (Flag46)\n    --    Has_Atomic_Components               (Flag86)\n    --    Has_Biased_Representation           (Flag139)\n@@ -5480,6 +5497,7 @@ package Einfo is\n    --    Corresponding_Equality              (Node30)   (implicit /= only)\n    --    Thunk_Entity                        (Node31)   (thunk case only)\n    --    SPARK_Pragma                        (Node32)\n+   --    Linker_Section_Pragma               (Node33)\n    --    Contract                            (Node34)\n    --    Body_Needed_For_SAL                 (Flag40)\n    --    Elaboration_Entity_Required         (Flag174)\n@@ -5633,6 +5651,7 @@ package Einfo is\n    --    Last_Entity                         (Node20)\n    --    Overridden_Operation                (Node26)\n    --    Subprograms_For_Type                (Node29)\n+   --    Linker_Section_Pragma               (Node33)\n    --    Contract                            (Node34)\n    --    Has_Invariants                      (Flag232)\n    --    Has_Postconditions                  (Flag240)\n@@ -5767,6 +5786,7 @@ package Einfo is\n    --    Static_Initialization               (Node30)   (init_proc only)\n    --    Thunk_Entity                        (Node31)   (thunk case only)\n    --    SPARK_Pragma                        (Node32)\n+   --    Linker_Section_Pragma               (Node33)\n    --    Contract                            (Node34)\n    --    Body_Needed_For_SAL                 (Flag40)\n    --    Delay_Cleanups                      (Flag114)\n@@ -6001,6 +6021,7 @@ package Einfo is\n    --    Last_Assignment                     (Node26)\n    --    Related_Type                        (Node27)\n    --    Initialization_Statements           (Node28)\n+   --    Linker_Section_Pragma               (Node33)\n    --    Contract                            (Node34)\n    --    Has_Alignment_Clause                (Flag46)\n    --    Has_Atomic_Components               (Flag86)\n@@ -6566,6 +6587,7 @@ package Einfo is\n    function Last_Assignment                     (Id : E) return N;\n    function Last_Entity                         (Id : E) return E;\n    function Limited_View                        (Id : E) return E;\n+   function Linker_Section_Pragma               (Id : E) return N;\n    function Lit_Indexes                         (Id : E) return E;\n    function Lit_Strings                         (Id : E) return E;\n    function Low_Bound_Tested                    (Id : E) return B;\n@@ -7192,6 +7214,7 @@ package Einfo is\n    procedure Set_Last_Assignment                 (Id : E; V : N);\n    procedure Set_Last_Entity                     (Id : E; V : E);\n    procedure Set_Limited_View                    (Id : E; V : E);\n+   procedure Set_Linker_Section_Pragma           (Id : E; V : N);\n    procedure Set_Lit_Indexes                     (Id : E; V : E);\n    procedure Set_Lit_Strings                     (Id : E; V : E);\n    procedure Set_Low_Bound_Tested                (Id : E; V : B := True);\n@@ -7960,6 +7983,7 @@ package Einfo is\n    pragma Inline (Last_Assignment);\n    pragma Inline (Last_Entity);\n    pragma Inline (Limited_View);\n+   pragma Inline (Linker_Section_Pragma);\n    pragma Inline (Lit_Indexes);\n    pragma Inline (Lit_Strings);\n    pragma Inline (Low_Bound_Tested);\n@@ -8386,6 +8410,7 @@ package Einfo is\n    pragma Inline (Set_Last_Assignment);\n    pragma Inline (Set_Last_Entity);\n    pragma Inline (Set_Limited_View);\n+   pragma Inline (Set_Linker_Section_Pragma);\n    pragma Inline (Set_Lit_Indexes);\n    pragma Inline (Set_Lit_Strings);\n    pragma Inline (Set_Low_Bound_Tested);"}, {"sha": "f9a5818537afefe8a6db7c1afc1a674a79629ac0", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=19992053df788e3280ae25dc272a43e8384b8db1", "patch": "@@ -5566,11 +5566,12 @@ package body Exp_Util is\n       Typ := Etype (Expr);\n \n       --  Subtypes may be subject to invariants coming from their respective\n-      --  base types.\n+      --  base types. The subtype may be fully or partially private.\n \n       if Ekind_In (Typ, E_Array_Subtype,\n                         E_Private_Subtype,\n-                        E_Record_Subtype)\n+                        E_Record_Subtype,\n+                        E_Record_Subtype_With_Private)\n       then\n          Typ := Base_Type (Typ);\n       end if;"}, {"sha": "952ea3f7c719cffe9e841d3f66077a330e22a65c", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=19992053df788e3280ae25dc272a43e8384b8db1", "patch": "@@ -2283,7 +2283,6 @@ package body Freeze is\n                   --  Start of processing for Alias_Atomic_Check\n \n                begin\n-\n                   --  If object size of component type isn't known, we cannot\n                   --  be sure so we defer to the back end.\n \n@@ -4046,6 +4045,19 @@ package body Freeze is\n                   Set_Is_Public (E);\n                end if;\n \n+               --  For source objects that are not Imported and are library\n+               --  level, if no linker section pragma was given inherit the\n+               --  appropriate linker section from the corresponding type.\n+\n+               if Comes_From_Source (E)\n+                 and then not Is_Imported (E)\n+                 and then Is_Library_Level_Entity (E)\n+                 and then No (Linker_Section_Pragma (E))\n+               then\n+                  Set_Linker_Section_Pragma\n+                    (E, Linker_Section_Pragma (Etype (E)));\n+               end if;\n+\n                --  For convention C objects of an enumeration type, warn if\n                --  the size is not integer size and no explicit size given.\n                --  Skip warning for Boolean, and Character, assume programmer"}, {"sha": "210ed23fe632870491325d271226b6bfd56c8fac", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=19992053df788e3280ae25dc272a43e8384b8db1", "patch": "@@ -294,6 +294,7 @@ Implementation Defined Aspects\n * Aspect Initializes::\n * Aspect Inline_Always::\n * Aspect Invariant::\n+* Aspect Linker_Section::\n * Aspect Object_Size::\n * Aspect Persistent_BSS::\n * Aspect Predicate::\n@@ -4249,12 +4250,30 @@ pragma Linker_Section (\n @end smallexample\n \n @noindent\n-@var{LOCAL_NAME} must refer to an object that is\n+@var{LOCAL_NAME} must refer to an object, type, or subprogram that is\n declared at the library level. This pragma specifies the name of the\n linker section for the given entity. It is equivalent to\n @code{__attribute__((section))} in GNU C and causes @var{LOCAL_NAME} to\n be placed in the @var{static_string_EXPRESSION} section of the\n executable (assuming the linker doesn't rename the section).\n+GNAT also provides an implementation defined aspect of the same name.\n+\n+In the case of specifying this aspect for a type, the effect is to\n+specify the corresponding for all library level objects of the type which\n+do not have an explicit linker section set. Note that this only applies to\n+whole objects, not to components of composite objects.\n+\n+In the case of a subprogram, the linker section applies to all previously\n+declared matching overloaded subprograms in the current declarative part\n+which do not already have a linker section assigned. The linker section\n+aspect is useful in this case for specifying different linker sections\n+for different elements of such an overloaded set.\n+\n+Note that an empty string specifies that no linker section is specified.\n+This is not quite the same as omitting the pragma or aspect, since it\n+can be used to specify that one element of an overloaded set of subprograms\n+has the default linker section, or that one object of a type for which a\n+linker section is specified should has the default linker section.\n \n The compiler normally places library-level entities in standard sections\n depending on the class: procedures and functions generally go in the\n@@ -4283,6 +4302,12 @@ package IO_Card is\n   Port_B : Integer;\n   pragma Volatile (Port_B);\n   pragma Linker_Section (Port_B, \".bss.port_b\");\n+\n+  type Port_Type is new Integer with Linker_Section => \".bss\";\n+  PA : Port_Type with Linker_Section => \".bss.PA\";\n+  PB : Port_Type; --  ends up in linker section \".bss\"\n+\n+  procedure Q with Linker_Section => \"Qsection\";\n end IO_Card;\n @end smallexample\n \n@@ -7631,6 +7656,7 @@ clause.\n * Aspect Initializes::\n * Aspect Inline_Always::\n * Aspect Invariant::\n+* Aspect Linker_Section::\n * Aspect Lock_Free::\n * Aspect Object_Size::\n * Aspect Persistent_BSS::\n@@ -7824,6 +7850,12 @@ This aspect is equivalent to pragma @code{Invariant}. It is a\n synonym for the language defined aspect @code{Type_Invariant} except\n that it is separately controllable using pragma @code{Assertion_Policy}.\n \n+@node Aspect Linker_Section\n+@unnumberedsec Aspect Linker_Section\n+@findex Linker_Section\n+@noindent\n+This aspect is equivalent to an @code{Linker_Section} pragma.\n+\n @node Aspect Lock_Free\n @unnumberedsec Aspect Lock_Free\n @findex Lock_Free"}, {"sha": "11286ef0766cbb0e43ce572de76a00f019b27cba", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=19992053df788e3280ae25dc272a43e8384b8db1", "patch": "@@ -7430,7 +7430,12 @@ the @option{-gnatR} switch). For @option{-gnatR1} (which is the default,\n so @option{-gnatR} with no parameter has the same effect), size and alignment\n information is listed for declared array and record types. For\n @option{-gnatR2}, size and alignment information is listed for all\n-declared types and objects. Finally @option{-gnatR3} includes symbolic\n+declared types and objects. The @code{Linker_Section} is also listed for any\n+entity for which the @code{Linker_Section} is set explicitly or implicitly (the\n+latter case occurs for objects of a type for which a @code{Linker_Section}\n+is set).\n+\n+Finally @option{-gnatR3} includes symbolic\n expressions for values that are computed at run time for\n variant records. These symbolic expressions have a mostly obvious\n format with #n being used to represent the value of the n'th"}, {"sha": "20ecb4f5dea3cda93bf146c48459c56125d517af", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=19992053df788e3280ae25dc272a43e8384b8db1", "patch": "@@ -100,6 +100,7 @@ package body Opt is\n       Polling_Required               := Save.Polling_Required;\n       Short_Descriptors              := Save.Short_Descriptors;\n       SPARK_Mode                     := Save.SPARK_Mode;\n+      SPARK_Mode_Pragma              := Save.SPARK_Mode_Pragma;\n       Use_VADS_Size                  := Save.Use_VADS_Size;\n \n       --  Update consistently the value of Init_Or_Norm_Scalars. The value of\n@@ -137,6 +138,7 @@ package body Opt is\n       Save.Polling_Required               := Polling_Required;\n       Save.Short_Descriptors              := Short_Descriptors;\n       Save.SPARK_Mode                     := SPARK_Mode;\n+      Save.SPARK_Mode_Pragma              := SPARK_Mode_Pragma;\n       Save.Use_VADS_Size                  := Use_VADS_Size;\n    end Save_Opt_Config_Switches;\n "}, {"sha": "11b92e62c38a27c3193cc112aa893e2922bdb0af", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 64, "deletions": 28, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=19992053df788e3280ae25dc272a43e8384b8db1", "patch": "@@ -36,13 +36,15 @@ with Debug;   use Debug;\n with Einfo;   use Einfo;\n with Lib;     use Lib;\n with Namet;   use Namet;\n+with Nlists;  use Nlists;\n with Opt;     use Opt;\n with Output;  use Output;\n with Sem_Aux; use Sem_Aux;\n with Sinfo;   use Sinfo;\n with Sinput;  use Sinput;\n with Snames;  use Snames;\n with Stand;   use Stand;\n+with Stringt; use Stringt;\n with Table;   use Table;\n with Uname;   use Uname;\n with Urealp;  use Urealp;\n@@ -147,6 +149,10 @@ package body Repinfo is\n    procedure List_Array_Info (Ent : Entity_Id; Bytes_Big_Endian : Boolean);\n    --  List representation info for array type Ent\n \n+   procedure List_Linker_Section (Ent : Entity_Id);\n+   --  List linker section for Ent (caller has checked that Ent is an entity\n+   --  for which the Linker_Section_Pragma field is defined).\n+\n    procedure List_Mechanisms (Ent : Entity_Id);\n    --  List mechanism information for parameters of Ent, which is subprogram,\n    --  subprogram type, or an entry or entry family.\n@@ -352,8 +358,8 @@ package body Repinfo is\n \n          if List_Representation_Info_Mechanisms\n            and then (Is_Subprogram (Ent)\n-                       or else Ekind (Ent) = E_Entry\n-                       or else Ekind (Ent) = E_Entry_Family)\n+                      or else Ekind (Ent) = E_Entry\n+                      or else Ekind (Ent) = E_Entry_Family)\n          then\n             Need_Blank_Line := True;\n             List_Mechanisms (Ent);\n@@ -374,13 +380,16 @@ package body Repinfo is\n                               and then Present (Full_View (E))))\n               or else Debug_Flag_AA\n             then\n-               if Is_Subprogram (E)\n-                       or else\n-                     Ekind (E) = E_Entry\n-                       or else\n-                     Ekind (E) = E_Entry_Family\n-                       or else\n-                     Ekind (E) = E_Subprogram_Type\n+               if Is_Subprogram (E) then\n+                  List_Linker_Section (E);\n+\n+                  if List_Representation_Info_Mechanisms then\n+                     List_Mechanisms (E);\n+                  end if;\n+\n+               elsif Ekind_In (E, E_Entry,\n+                                  E_Entry_Family,\n+                                  E_Subprogram_Type)\n                then\n                   if List_Representation_Info_Mechanisms then\n                      List_Mechanisms (E);\n@@ -391,24 +400,28 @@ package body Repinfo is\n                      List_Record_Info (E, Bytes_Big_Endian);\n                   end if;\n \n+                  List_Linker_Section (E);\n+\n                elsif Is_Array_Type (E) then\n                   if List_Representation_Info >= 1 then\n                      List_Array_Info (E, Bytes_Big_Endian);\n                   end if;\n \n+                  List_Linker_Section (E);\n+\n                elsif Is_Type (E) then\n                   if List_Representation_Info >= 2 then\n                      List_Type_Info (E);\n+                     List_Linker_Section (E);\n                   end if;\n \n-               elsif Ekind (E) = E_Variable\n-                       or else\n-                     Ekind (E) = E_Constant\n-                       or else\n-                     Ekind (E) = E_Loop_Parameter\n-                       or else\n-                     Is_Formal (E)\n-               then\n+               elsif Ekind_In (E, E_Variable, E_Constant) then\n+                  if List_Representation_Info >= 2 then\n+                     List_Object_Info (E);\n+                     List_Linker_Section (E);\n+                  end if;\n+\n+               elsif Ekind (E) = E_Loop_Parameter or else Is_Formal (E) then\n                   if List_Representation_Info >= 2 then\n                      List_Object_Info (E);\n                   end if;\n@@ -425,17 +438,12 @@ package body Repinfo is\n \n                --  Recurse into bodies\n \n-               elsif Ekind (E) = E_Protected_Type\n-                       or else\n-                     Ekind (E) = E_Task_Type\n-                       or else\n-                     Ekind (E) = E_Subprogram_Body\n-                       or else\n-                     Ekind (E) = E_Package_Body\n-                       or else\n-                     Ekind (E) = E_Task_Body\n-                       or else\n-                     Ekind (E) = E_Protected_Body\n+               elsif Ekind_In (E, E_Protected_Type,\n+                                  E_Task_Type,\n+                                  E_Subprogram_Body,\n+                                  E_Package_Body,\n+                                  E_Task_Body,\n+                                  E_Protected_Body)\n                then\n                   List_Entities (E, Bytes_Big_Endian);\n \n@@ -633,6 +641,34 @@ package body Repinfo is\n       end if;\n    end List_GCC_Expression;\n \n+   -------------------------\n+   -- List_Linker_Section --\n+   -------------------------\n+\n+   procedure List_Linker_Section (Ent : Entity_Id) is\n+      Arg : Node_Id;\n+\n+   begin\n+      if Present (Linker_Section_Pragma (Ent)) then\n+         Write_Str (\"pragma Linker_Section (\");\n+         List_Name (Ent);\n+         Write_Str (\", \"\"\");\n+\n+         Arg :=\n+           Last (Pragma_Argument_Associations (Linker_Section_Pragma (Ent)));\n+\n+         if Nkind (Arg) = N_Pragma_Argument_Association then\n+            Arg := Expression (Arg);\n+         end if;\n+\n+         pragma Assert (Nkind (Arg) = N_String_Literal);\n+         String_To_Name_Buffer (Strval (Arg));\n+         Write_Str (Name_Buffer (1 .. Name_Len));\n+         Write_Str (\"\"\");\");\n+         Write_Eol;\n+      end if;\n+   end List_Linker_Section;\n+\n    ---------------------\n    -- List_Mechanisms --\n    ---------------------"}, {"sha": "b6eb3fe4b1ee748f75cdad66e3f60f59c117727a", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=19992053df788e3280ae25dc272a43e8384b8db1", "patch": "@@ -1311,8 +1311,6 @@ package body Sem is\n       S_Inside_A_Generic  : constant Boolean          := Inside_A_Generic;\n       S_Outer_Gen_Scope   : constant Entity_Id        := Outer_Generic_Scope;\n       S_Style_Check       : constant Boolean          := Style_Check;\n-      S_SPARK_Mode        : constant SPARK_Mode_Type  := SPARK_Mode;\n-      S_SPARK_Mode_Pragma : constant Node_Id          := SPARK_Mode_Pragma;\n \n       Generic_Main : constant Boolean :=\n                        Nkind (Unit (Cunit (Main_Unit)))\n@@ -1512,8 +1510,6 @@ package body Sem is\n       Inside_A_Generic     := S_Inside_A_Generic;\n       Outer_Generic_Scope  := S_Outer_Gen_Scope;\n       Style_Check          := S_Style_Check;\n-      SPARK_Mode           := S_SPARK_Mode;\n-      SPARK_Mode_Pragma    := S_SPARK_Mode_Pragma;\n \n       Restore_Opt_Config_Switches (Save_Config_Switches);\n "}, {"sha": "1ce0d83429ebb08dbb8aa554f52813263d1f7d3c", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=19992053df788e3280ae25dc272a43e8384b8db1", "patch": "@@ -4525,8 +4525,9 @@ package body Sem_Attr is\n            and then Is_Potentially_Unevaluated (N)\n            and then not Is_Entity_Name (P)\n          then\n-            Error_Msg_N (\"prefix that is potentially unevaluated must \"\n-               & \"denote an entity\", N);\n+            Error_Msg_N\n+              (\"prefix that is potentially unevaluated must denote an entity\",\n+               N);\n          end if;\n \n          --  The attribute appears within a pre/postcondition, but refers to"}, {"sha": "9c1c6984b42746b8596929fb2174721b648e2e85", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=19992053df788e3280ae25dc272a43e8384b8db1", "patch": "@@ -1633,10 +1633,11 @@ package body Sem_Ch13 is\n                --  referring to the entity, and the second argument is the\n                --  aspect definition expression.\n \n-               --  Suppress/Unsuppress\n+               --  Linker_Section/Suppress/Unsuppress\n \n-               when Aspect_Suppress   |\n-                    Aspect_Unsuppress =>\n+               when Aspect_Linker_Section |\n+                    Aspect_Suppress       |\n+                    Aspect_Unsuppress     =>\n \n                   Make_Aitem_Pragma\n                     (Pragma_Argument_Associations => New_List (\n@@ -7941,6 +7942,9 @@ package body Sem_Ch13 is\n               Aspect_Value_Size     =>\n             T := Any_Integer;\n \n+         when Aspect_Linker_Section =>\n+            T := Standard_String;\n+\n          when Aspect_Synchronization =>\n             return;\n "}, {"sha": "cffae57dfc2d9467171240fc4ffb7128a0a24e26", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 65, "deletions": 17, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=19992053df788e3280ae25dc272a43e8384b8db1", "patch": "@@ -15545,7 +15545,11 @@ package body Sem_Prag is\n          --      [Entity  =>]  LOCAL_NAME\n          --      [Section =>]  static_string_EXPRESSION);\n \n-         when Pragma_Linker_Section =>\n+         when Pragma_Linker_Section => Linker_Section : declare\n+            Arg : Node_Id;\n+            Ent : Entity_Id;\n+\n+         begin\n             GNAT_Pragma;\n             Check_Arg_Order ((Name_Entity, Name_Section));\n             Check_Arg_Count (2);\n@@ -15554,25 +15558,69 @@ package body Sem_Prag is\n             Check_Arg_Is_Library_Level_Local_Name (Arg1);\n             Check_Arg_Is_Static_Expression (Arg2, Standard_String);\n \n-            --  This pragma applies to objects and types\n+            --  Check kind of entity\n \n-            if not Is_Object (Entity (Get_Pragma_Arg (Arg1)))\n-              and then not Is_Type (Entity (Get_Pragma_Arg (Arg1)))\n-            then\n-               Error_Pragma_Arg\n-                 (\"pragma% applies only to objects and types\", Arg1);\n-            end if;\n+            Arg := Get_Pragma_Arg (Arg1);\n+            Ent := Entity (Arg);\n \n-            --  The only processing required is to link this item on to the\n-            --  list of rep items for the given entity. This is accomplished\n-            --  by the call to Rep_Item_Too_Late (when no error is detected\n-            --  and False is returned).\n+            case Ekind (Ent) is\n \n-            if Rep_Item_Too_Late (Entity (Get_Pragma_Arg (Arg1)), N) then\n-               return;\n-            else\n-               Set_Has_Gigi_Rep_Item (Entity (Get_Pragma_Arg (Arg1)));\n-            end if;\n+               --  Objects (constants and variables)\n+\n+               when E_Constant | E_Variable =>\n+                  Set_Linker_Section_Pragma (Ent, N);\n+\n+                  --  For now, for objects, we also link onto the rep item\n+                  --  chain and set the gigi rep item flag. This is here for\n+                  --  transition purposes only. When the processing for the\n+                  --  Linker_Section_Pragma field is completed, this can be\n+                  --  removed, since it will no longer be used.\n+\n+                  --  This is accomplished by the call to Rep_Item_Too_Late\n+                  --  (when no error is detected and False is returned).\n+\n+                  if not Rep_Item_Too_Late (Ent, N) then\n+                     Set_Has_Gigi_Rep_Item (Ent);\n+                  end if;\n+\n+               --  Types\n+\n+               when Type_Kind =>\n+                  Set_Linker_Section_Pragma (Ent, N);\n+\n+               --  Subprograms\n+\n+               when Subprogram_Kind =>\n+\n+                  --  Aspect case, entity already set\n+\n+                  if From_Aspect_Specification (N) then\n+                     Set_Linker_Section_Pragma\n+                       (Entity (Corresponding_Aspect (N)), N);\n+\n+                  --  Pragma case, we must climb the homonym chain, but skip\n+                  --  any for which the linker section is already set.\n+\n+                  else\n+                     loop\n+                        if No (Linker_Section_Pragma (Ent)) then\n+                           Set_Linker_Section_Pragma (Ent, N);\n+                        end if;\n+\n+                        Ent := Homonym (Ent);\n+                        exit when No (Ent)\n+                          or else Scope (Ent) /= Current_Scope;\n+                     end loop;\n+                  end if;\n+\n+               --  All other cases are illegal\n+\n+               when others =>\n+                  Error_Pragma_Arg\n+                    (\"pragma% applies only to objects, subprograms, and types\",\n+                     Arg1);\n+            end case;\n+         end Linker_Section;\n \n          ----------\n          -- List --"}, {"sha": "be59c9bd19738e997c5bd16cd7620501dbcc664c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 43, "deletions": 42, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19992053df788e3280ae25dc272a43e8384b8db1/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=19992053df788e3280ae25dc272a43e8384b8db1", "patch": "@@ -10249,48 +10249,6 @@ package body Sem_Util is\n       end if;\n    end Is_Partially_Initialized_Type;\n \n-   --------------------------------\n-   -- Is_Potentially_Unevaluated --\n-   --------------------------------\n-\n-   function Is_Potentially_Unevaluated (N : Node_Id) return Boolean is\n-      Par  : Node_Id;\n-      Expr : Node_Id;\n-\n-   begin\n-      Expr := N;\n-      Par  := Parent (N);\n-      while not Nkind_In (Par, N_If_Expression,\n-                                N_Case_Expression,\n-                                N_And_Then,\n-                                N_Or_Else,\n-                                N_In,\n-                                N_Not_In)\n-      loop\n-         Expr := Par;\n-         Par  := Parent (Par);\n-         if Nkind (Par) not in N_Subexpr then\n-            return False;\n-         end if;\n-      end loop;\n-\n-      if Nkind (Par) = N_If_Expression then\n-         return Is_Elsif (Par) or else Expr /= First (Expressions (Par));\n-\n-      elsif Nkind (Par) = N_Case_Expression then\n-         return Expr /= Expression (Par);\n-\n-      elsif Nkind_In (Par, N_And_Then, N_Or_Else) then\n-         return Expr = Right_Opnd (Par);\n-\n-      elsif Nkind_In (Par, N_In, N_Not_In) then\n-         return Expr /= Left_Opnd (Par);\n-\n-      else\n-         return False;\n-      end if;\n-   end Is_Potentially_Unevaluated;\n-\n    ------------------------------------\n    -- Is_Potentially_Persistent_Type --\n    ------------------------------------\n@@ -10355,6 +10313,49 @@ package body Sem_Util is\n       end if;\n    end Is_Potentially_Persistent_Type;\n \n+   --------------------------------\n+   -- Is_Potentially_Unevaluated --\n+   --------------------------------\n+\n+   function Is_Potentially_Unevaluated (N : Node_Id) return Boolean is\n+      Par  : Node_Id;\n+      Expr : Node_Id;\n+\n+   begin\n+      Expr := N;\n+      Par  := Parent (N);\n+      while not Nkind_In (Par, N_If_Expression,\n+                                N_Case_Expression,\n+                                N_And_Then,\n+                                N_Or_Else,\n+                                N_In,\n+                                N_Not_In)\n+      loop\n+         Expr := Par;\n+         Par  := Parent (Par);\n+\n+         if Nkind (Par) not in N_Subexpr then\n+            return False;\n+         end if;\n+      end loop;\n+\n+      if Nkind (Par) = N_If_Expression then\n+         return Is_Elsif (Par) or else Expr /= First (Expressions (Par));\n+\n+      elsif Nkind (Par) = N_Case_Expression then\n+         return Expr /= Expression (Par);\n+\n+      elsif Nkind_In (Par, N_And_Then, N_Or_Else) then\n+         return Expr = Right_Opnd (Par);\n+\n+      elsif Nkind_In (Par, N_In, N_Not_In) then\n+         return Expr /= Left_Opnd (Par);\n+\n+      else\n+         return False;\n+      end if;\n+   end Is_Potentially_Unevaluated;\n+\n    ---------------------------------\n    -- Is_Protected_Self_Reference --\n    ---------------------------------"}]}