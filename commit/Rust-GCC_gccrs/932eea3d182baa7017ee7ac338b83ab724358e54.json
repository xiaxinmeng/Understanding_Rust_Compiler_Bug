{"sha": "932eea3d182baa7017ee7ac338b83ab724358e54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMyZWVhM2QxODJiYWE3MDE3ZWU3YWMzMzhiODNhYjcyNDM1OGU1NA==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2007-02-14T14:10:57Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2007-02-14T14:10:57Z"}, "message": "re PR tree-optimization/30771 (ice for legal code with -O2 -ftree-vectorize)\n\n         PR tree-optimization/30771\n        * tree-vect-analyze.c (vect_determine_vectorization_factor): Traverse\n        also phi nodes.\n        (vect_analyze_operations): Induction phis can now be marked as\n        used_in_loop.\n        (vect_mark_stmts_to_be_vectorized): No special treatment for phis.\n        Update documentation accordingly.\n\nFrom-SVN: r121950", "tree": {"sha": "21a29435b70d038c1f84bb78ca627b719c30686a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21a29435b70d038c1f84bb78ca627b719c30686a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/932eea3d182baa7017ee7ac338b83ab724358e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/932eea3d182baa7017ee7ac338b83ab724358e54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/932eea3d182baa7017ee7ac338b83ab724358e54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/932eea3d182baa7017ee7ac338b83ab724358e54/comments", "author": null, "committer": null, "parents": [{"sha": "09201a09808cf389bab6bb457024306cf7d00c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09201a09808cf389bab6bb457024306cf7d00c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09201a09808cf389bab6bb457024306cf7d00c3c"}], "stats": {"total": 127, "additions": 100, "deletions": 27}, "files": [{"sha": "d31ed46d46ab2485f75c4eff98a098b7ab2095db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932eea3d182baa7017ee7ac338b83ab724358e54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932eea3d182baa7017ee7ac338b83ab724358e54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=932eea3d182baa7017ee7ac338b83ab724358e54", "patch": "@@ -1,3 +1,13 @@\n+2007-12-14  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\t PR tree-optimization/30771\n+\t* tree-vect-analyze.c (vect_determine_vectorization_factor): Traverse\n+\talso phi nodes.\n+\t(vect_analyze_operations): Induction phis can now be marked as\n+\tused_in_loop.\n+\t(vect_mark_stmts_to_be_vectorized): No special treatment for phis.\n+\tUpdate documentation accordingly.\n+\n 2007-02-14  Nick Clifton  <nickc@redhat.com>\n \n \t* builtin-types.def (DEF_FUNCTION_TYPE_x): Do not imply that at"}, {"sha": "26a584b842b537b1deaeada02dd07738c83316cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932eea3d182baa7017ee7ac338b83ab724358e54/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932eea3d182baa7017ee7ac338b83ab724358e54/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=932eea3d182baa7017ee7ac338b83ab724358e54", "patch": "@@ -1,3 +1,8 @@\n+2007-02-14  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/30771\n+\t* gcc.dg/vect/pr30771.c: New test.\n+\n 2007-02-13  Ian Lance Taylor  <iant@google.com>\n \n \t* gcc.dg/Wstrict-overflow-1.c: New test."}, {"sha": "9371f96d918b42213a87ae4455e8b690c6588a54", "filename": "gcc/testsuite/gcc.dg/vect/pr30771.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932eea3d182baa7017ee7ac338b83ab724358e54/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr30771.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932eea3d182baa7017ee7ac338b83ab724358e54/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr30771.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr30771.c?ref=932eea3d182baa7017ee7ac338b83ab724358e54", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+\n+int a[128];\n+\n+int\n+main()\n+{\n+  short i;\n+\n+  for (i=0; i<64; i++){\n+    a[i] = (int)i;\n+  }\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "6c72ce42289af4fa88a778929dca021716ef820a", "filename": "gcc/tree-vect-analyze.c", "status": "modified", "additions": 67, "deletions": 27, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932eea3d182baa7017ee7ac338b83ab724358e54/gcc%2Ftree-vect-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932eea3d182baa7017ee7ac338b83ab724358e54/gcc%2Ftree-vect-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-analyze.c?ref=932eea3d182baa7017ee7ac338b83ab724358e54", "patch": "@@ -97,8 +97,12 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n   int nbbs = loop->num_nodes;\n   block_stmt_iterator si;\n   unsigned int vectorization_factor = 0;\n-  int i;\n   tree scalar_type;\n+  tree phi;\n+  tree vectype;\n+  unsigned int nunits;\n+  stmt_vec_info stmt_info;\n+  int i;\n \n   if (vect_print_dump_info (REPORT_DETAILS))\n     fprintf (vect_dump, \"=== vect_determine_vectorization_factor ===\");\n@@ -107,12 +111,67 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n     {\n       basic_block bb = bbs[i];\n \n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n+\t{\n+\t  stmt_info = vinfo_for_stmt (phi);\n+\t  if (vect_print_dump_info (REPORT_DETAILS))\n+\t    {\n+\t      fprintf (vect_dump, \"==> examining phi: \");\n+\t      print_generic_expr (vect_dump, phi, TDF_SLIM);\n+\t    }\n+\n+\t  gcc_assert (stmt_info);\n+\n+\t  /* Two cases of \"relevant\" phis: those that define an \n+\t     induction that is used in the loop, and those that\n+\t     define a reduction.  */\n+\t  if ((STMT_VINFO_RELEVANT (stmt_info) == vect_used_in_loop\n+\t       && STMT_VINFO_DEF_TYPE (stmt_info) == vect_induction_def)\n+\t      || (STMT_VINFO_RELEVANT (stmt_info) == vect_used_by_reduction\n+\t\t  && STMT_VINFO_DEF_TYPE (stmt_info) == vect_reduction_def))\n+            {\n+\t      gcc_assert (!STMT_VINFO_VECTYPE (stmt_info));\n+              scalar_type = TREE_TYPE (PHI_RESULT (phi));\n+\n+\t      if (vect_print_dump_info (REPORT_DETAILS))\n+\t\t{\n+\t\t  fprintf (vect_dump, \"get vectype for scalar type:  \");\n+\t\t  print_generic_expr (vect_dump, scalar_type, TDF_SLIM);\n+\t\t}\n+\n+\t      vectype = get_vectype_for_scalar_type (scalar_type);\n+\t      if (!vectype)\n+\t\t{\n+\t\t  if (vect_print_dump_info (REPORT_UNVECTORIZED_LOOPS))\n+\t\t    {\n+\t\t      fprintf (vect_dump,\n+\t\t               \"not vectorized: unsupported data-type \");\n+\t\t      print_generic_expr (vect_dump, scalar_type, TDF_SLIM);\n+\t\t    }\n+\t\t  return false;\n+\t\t}\n+\t      STMT_VINFO_VECTYPE (stmt_info) = vectype;\n+\n+\t      if (vect_print_dump_info (REPORT_DETAILS))\n+\t\t{\n+\t\t  fprintf (vect_dump, \"vectype: \");\n+\t\t  print_generic_expr (vect_dump, vectype, TDF_SLIM);\n+\t\t}\n+\n+\t      nunits = TYPE_VECTOR_SUBPARTS (vectype);\n+\t      if (vect_print_dump_info (REPORT_DETAILS))\n+\t\tfprintf (vect_dump, \"nunits = %d\", nunits);\n+\n+\t      if (!vectorization_factor\n+\t\t  || (nunits > vectorization_factor))\n+\t\tvectorization_factor = nunits;\n+\t    }\n+\t}\n+\n       for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))\n         {\n \t  tree stmt = bsi_stmt (si);\n-\t  unsigned int nunits;\n-\t  stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n-\t  tree vectype;\n+\t  stmt_info = vinfo_for_stmt (stmt);\n \n \t  if (vect_print_dump_info (REPORT_DETAILS))\n \t    {\n@@ -269,10 +328,11 @@ vect_analyze_operations (loop_vec_info loop_vinfo)\n \t    return false;\n \t  }\n \n-\t  if (STMT_VINFO_RELEVANT_P (stmt_info))\n+\t  if (STMT_VINFO_RELEVANT (stmt_info) == vect_used_in_loop\n+\t      && STMT_VINFO_DEF_TYPE (stmt_info) != vect_induction_def)\n \t    {\n \t      /* Most likely a reduction-like computation that is used\n-\t         in the loop.  */\n+\t\t in the loop.  */\n \t      if (vect_print_dump_info (REPORT_UNVECTORIZED_LOOPS))\n \t        fprintf (vect_dump, \"not vectorized: unsupported pattern.\");\n  \t     return false;\n@@ -2235,17 +2295,7 @@ vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo)\n \n \t (case 2)\n            If STMT has been identified as defining a reduction variable, then\n-\t   we have two cases:\n-\t   (case 2.1)\n-\t     The last use of STMT is the reduction-variable, which is defined\n-\t     by a loop-header-phi. We don't want to mark the phi as live or\n-\t     relevant (because it does not need to be vectorized, it is handled\n-             as part of the vectorization of the reduction), so in this case we\n-\t     skip the call to vect_mark_relevant.\n-\t   (case 2.2)\n-\t     The rest of the uses of STMT are defined in the loop body. For\n-             the def_stmt of these uses we want to set liveness/relevance\n-             as follows:\n+           we want to set liveness/relevance as follows:\n                STMT_VINFO_LIVE_P (DEF_STMT_info) <-- false\n                STMT_VINFO_RELEVANT (DEF_STMT_info) <-- vect_used_by_reduction\n              because even though STMT is classified as live (since it defines a\n@@ -2297,16 +2347,6 @@ vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo)\n \t  bb = bb_for_stmt (def_stmt);\n \t  if (!flow_bb_inside_loop_p (loop, bb))\n \t    continue;\n-\n-\t  /* case 2.1: the reduction-use does not mark the defining-phi\n-\t     as relevant.  */\n-\t  if (STMT_VINFO_DEF_TYPE (stmt_vinfo) == vect_reduction_def\n-\t      && TREE_CODE (def_stmt) == PHI_NODE)\n-\t    continue;\n-\n-\t  if (dt == vect_induction_def && TREE_CODE (def_stmt) == PHI_NODE)\n-\t    continue;\n-\n \t  vect_mark_relevant (&worklist, def_stmt, relevant, live_p);\n \t}\n     }\t\t\t\t/* while worklist */"}]}