{"sha": "35c95658180e67503f9de96567ab4d6e71b10a6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVjOTU2NTgxODBlNjc1MDNmOWRlOTY1NjdhYjRkNmU3MWIxMGE2ZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2017-07-09T18:25:49Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2017-07-09T18:25:49Z"}, "message": "x86: Use DRAP only if there are outgoing arguments on stack\n\nSince DRAP is needed only if there are outgoing arguments on stack, we\nshould track outgoing arguments on stack and avoid setting need_drap to\ntrue when there are no outgoing arguments on stack.\n\ngcc/\n\n\tPR target/81313\n\t* config/i386/i386.c (ix86_function_arg_advance): Set\n\toutgoing_args_on_stack to true if there are outgoing arguments\n\ton stack.\n\t(ix86_function_arg): Likewise.\n\t(ix86_get_drap_rtx): Use DRAP only if there are outgoing\n\targuments on stack and ACCUMULATE_OUTGOING_ARGS is false.\n\t* config/i386/i386.h (machine_function): Add\n\toutgoing_args_on_stack.\n\ngcc/testsuite/\n\n\tPR target/81313\n\t* gcc.target/i386/pr81313-1.c: New test.\n\t* gcc.target/i386/pr81313-2.c: Likewise.\n\t* gcc.target/i386/pr81313-3.c: Likewise.\n\t* gcc.target/i386/pr81313-4.c: Likewise.\n\t* gcc.target/i386/pr81313-5.c: Likewise.\n\nFrom-SVN: r250084", "tree": {"sha": "958a5f65c985b55904f9ac79c387b66910f49bfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/958a5f65c985b55904f9ac79c387b66910f49bfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35c95658180e67503f9de96567ab4d6e71b10a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c95658180e67503f9de96567ab4d6e71b10a6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35c95658180e67503f9de96567ab4d6e71b10a6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c95658180e67503f9de96567ab4d6e71b10a6e/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4669526d7eee93bc6c5b54b6accf98b384f36f56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4669526d7eee93bc6c5b54b6accf98b384f36f56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4669526d7eee93bc6c5b54b6accf98b384f36f56"}], "stats": {"total": 102, "additions": 100, "deletions": 2}, "files": [{"sha": "2a0c6d6e00784444bd3cab1edd1fdf58add33ebd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35c95658180e67503f9de96567ab4d6e71b10a6e", "patch": "@@ -1,3 +1,15 @@\n+2017-07-09  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/81313\n+\t* config/i386/i386.c (ix86_function_arg_advance): Set\n+\toutgoing_args_on_stack to true if there are outgoing arguments\n+\ton stack.\n+\t(ix86_function_arg): Likewise.\n+\t(ix86_get_drap_rtx): Use DRAP only if there are outgoing\n+\targuments on stack and ACCUMULATE_OUTGOING_ARGS is false.\n+\t* config/i386/i386.h (machine_function): Add\n+\toutgoing_args_on_stack.\n+\n 2017-07-09  Krister Walfridsson  <krister.walfridsson@gmail.com>\n \n \t* config.gcc (*-*-netbsd*): Remove check for NetBSD versions not"}, {"sha": "42e0ddaca56e5896722620653c302a85e6fb795d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=35c95658180e67503f9de96567ab4d6e71b10a6e", "patch": "@@ -10143,7 +10143,13 @@ ix86_function_arg_advance (cumulative_args_t cum_v, machine_mode mode,\n   /* For pointers passed in memory we expect bounds passed in Bounds\n      Table.  */\n   if (!nregs)\n-    cum->bnds_in_bt = chkp_type_bounds_count (type);\n+    {\n+      /* Track if there are outgoing arguments on stack.  */\n+      if (cum->caller)\n+\tcfun->machine->outgoing_args_on_stack = true;\n+\n+      cum->bnds_in_bt = chkp_type_bounds_count (type);\n+    }\n }\n \n /* Define where to put the arguments to a function.\n@@ -10473,6 +10479,10 @@ ix86_function_arg (cumulative_args_t cum_v, machine_mode omode,\n   else\n     arg = function_arg_32 (cum, mode, omode, type, bytes, words);\n \n+  /* Track if there are outgoing arguments on stack.  */\n+  if (arg == NULL_RTX && cum->caller)\n+    cfun->machine->outgoing_args_on_stack = true;\n+\n   return arg;\n }\n \n@@ -13646,7 +13656,11 @@ ix86_update_stack_boundary (void)\n static rtx\n ix86_get_drap_rtx (void)\n {\n-  if (ix86_force_drap || !ACCUMULATE_OUTGOING_ARGS)\n+  /* We must use DRAP if there are outgoing arguments on stack and\n+     ACCUMULATE_OUTGOING_ARGS is false.  */\n+  if (ix86_force_drap\n+      || (cfun->machine->outgoing_args_on_stack\n+\t  && !ACCUMULATE_OUTGOING_ARGS))\n     crtl->need_drap = true;\n \n   if (stack_realign_drap)"}, {"sha": "a2ae9b4e24295dbdc2e7e856a2cdc2f7ef09e4a3", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=35c95658180e67503f9de96567ab4d6e71b10a6e", "patch": "@@ -2657,6 +2657,9 @@ struct GTY(()) machine_function {\n      frame pointer.) */\n   unsigned int call_ms2sysv_extra_regs:3;\n \n+  /* Nonzero if the function places outgoing arguments on stack.  */\n+  BOOL_BITFIELD outgoing_args_on_stack : 1;\n+\n   /* During prologue/epilogue generation, the current frame state.\n      Otherwise, the frame state at the end of the prologue.  */\n   struct machine_frame_state fs;"}, {"sha": "d13db2dbc0dffd33649e8e9e1a000ab1e3046cd4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35c95658180e67503f9de96567ab4d6e71b10a6e", "patch": "@@ -1,3 +1,12 @@\n+2017-07-09  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/81313\n+\t* gcc.target/i386/pr81313-1.c: New test.\n+\t* gcc.target/i386/pr81313-2.c: Likewise.\n+\t* gcc.target/i386/pr81313-3.c: Likewise.\n+\t* gcc.target/i386/pr81313-4.c: Likewise.\n+\t* gcc.target/i386/pr81313-5.c: Likewise.\n+\n 2017-07-08  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* gnat.dg/vect15.ads (Sarray): Increase range to 1 .. 5."}, {"sha": "f7650035cacbdc868434daa50a433db1db85223b", "filename": "gcc/testsuite/gcc.target/i386/pr81313-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81313-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81313-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81313-1.c?ref=35c95658180e67503f9de96567ab4d6e71b10a6e", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-accumulate-outgoing-args -mincoming-stack-boundary=4 -mpreferred-stack-boundary=6\" } */\n+\n+extern void foo (void);\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+}\n+\n+/* { dg-final { scan-assembler-not \"lea\\[lq\\]?\\[\\\\t \\]*\\[0-9\\]*\\\\(%\\[er\\]sp\\\\)\" } } */"}, {"sha": "2cdc645dbccb39ce1a678ca40a7062deaa290c92", "filename": "gcc/testsuite/gcc.target/i386/pr81313-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81313-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81313-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81313-2.c?ref=35c95658180e67503f9de96567ab4d6e71b10a6e", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -mno-accumulate-outgoing-args -mincoming-stack-boundary=4 -mpreferred-stack-boundary=6 -mno-iamcu\" } */\n+\n+extern void foo (int, int, int);\n+\n+void\n+bar (void)\n+{\n+  foo (1, 2, 3);\n+}\n+\n+/* { dg-final { scan-assembler \"lea\\[l\\]?\\[\\\\t \\]*\\[0-9\\]*\\\\(%esp\\\\)\" } } */"}, {"sha": "9c1b232661676c0f08c248ef47d89a2986cc2a13", "filename": "gcc/testsuite/gcc.target/i386/pr81313-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81313-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81313-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81313-3.c?ref=35c95658180e67503f9de96567ab4d6e71b10a6e", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -mno-accumulate-outgoing-args -mincoming-stack-boundary=4 -mpreferred-stack-boundary=6\" } */\n+\n+extern void foo (int, int, int) __attribute__ ((regparm(3)));\n+\n+void\n+bar (int i1, int i2, int i3, int i4)\n+{\n+  foo (i1, i2, i3);\n+}\n+\n+/* { dg-final { scan-assembler-not \"lea\\[l\\]?\\[\\\\t \\]*\\[0-9\\]*\\\\(%esp\\\\)\" } } */"}, {"sha": "bad0b3c27db2b2d1b3f5c5b2d53e274030ea4c78", "filename": "gcc/testsuite/gcc.target/i386/pr81313-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81313-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81313-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81313-4.c?ref=35c95658180e67503f9de96567ab4d6e71b10a6e", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-accumulate-outgoing-args -mincoming-stack-boundary=4 -mpreferred-stack-boundary=6\" } */\n+\n+extern void foo (int, int, int, int, int, int, int);\n+\n+void\n+bar (void)\n+{\n+  foo (1, 2, 3, 4, 5, 6, 7);\n+}\n+\n+/* { dg-final { scan-assembler \"lea\\[lq\\]?\\[\\\\t \\]*\\[0-9\\]*\\\\(%\\[er\\]sp\\\\)\" } } */"}, {"sha": "51a543ca57ebc88c79194f9f8899f2913decdf52", "filename": "gcc/testsuite/gcc.target/i386/pr81313-5.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81313-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c95658180e67503f9de96567ab4d6e71b10a6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81313-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81313-5.c?ref=35c95658180e67503f9de96567ab4d6e71b10a6e", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-accumulate-outgoing-args -mincoming-stack-boundary=4 -mpreferred-stack-boundary=6\" } */\n+\n+extern void foo (int, int, int, int, int, int);\n+\n+void\n+bar (int i1, int i2, int i3, int i4, int i5, int i6, int i7)\n+{\n+  foo (i1, i2, i3, i4, i5, i6);\n+}\n+\n+/* { dg-final { scan-assembler-not \"lea\\[lq\\]?\\[\\\\t \\]*\\[0-9\\]*\\\\(%\\[er\\]sp\\\\)\" } } */"}]}