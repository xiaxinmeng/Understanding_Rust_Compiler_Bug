{"sha": "024a85aeb6a912811d917f737eaad39140c2fb0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI0YTg1YWViNmE5MTI4MTFkOTE3ZjczN2VhYWQzOTE0MGMyZmIwYw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2007-01-24T12:03:38Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2007-01-24T12:03:38Z"}, "message": "c-cppbuiltin.c (builtin_define_type_sizeof): New function.\n\n2007-01-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* c-cppbuiltin.c (builtin_define_type_sizeof): New function.\n\t(c_cpp_builtins): New builtin macros: __SIZEOF_INT__, __SIZEOF_LONG__,\n\t__SIZEOF_LONG_LONG__, __SIZEOF_SHORT__, __SIZEOF_POINTER__,\n\t__SIZEOF_FLOAT__, __SIZEOF_DOUBLE__, __SIZEOF_LONG_DOUBLE__,\n\t__SIZEOF_SIZE_T__, __SIZEOF_WCHAR_T__, __SIZEOF_WINT_T__ and\n\t__SIZEOF_PTRDIFF_T__.\n\t* doc/cpp.texi: Documentation for the new builtin macros added.\n\n2007-01-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* gcc.c-torture/compile/sizeof-macros-1.c: New testcase.\n\nFrom-SVN: r121107", "tree": {"sha": "06f74328e5fa1bec8c013b5ce2683658b5237193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06f74328e5fa1bec8c013b5ce2683658b5237193"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/024a85aeb6a912811d917f737eaad39140c2fb0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/024a85aeb6a912811d917f737eaad39140c2fb0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/024a85aeb6a912811d917f737eaad39140c2fb0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/024a85aeb6a912811d917f737eaad39140c2fb0c/comments", "author": null, "committer": null, "parents": [{"sha": "9db27449884f6c83ff2862450620ca979b541427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9db27449884f6c83ff2862450620ca979b541427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9db27449884f6c83ff2862450620ca979b541427"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "0f5964196cef0741497c17c7253299dbab2b77c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/024a85aeb6a912811d917f737eaad39140c2fb0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/024a85aeb6a912811d917f737eaad39140c2fb0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=024a85aeb6a912811d917f737eaad39140c2fb0c", "patch": "@@ -1,3 +1,13 @@\n+2007-01-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* c-cppbuiltin.c (builtin_define_type_sizeof): New function.\n+\t(c_cpp_builtins): New builtin macros: __SIZEOF_INT__, __SIZEOF_LONG__,\n+\t__SIZEOF_LONG_LONG__, __SIZEOF_SHORT__, __SIZEOF_POINTER__,\n+\t__SIZEOF_FLOAT__, __SIZEOF_DOUBLE__, __SIZEOF_LONG_DOUBLE__,\n+\t__SIZEOF_SIZE_T__, __SIZEOF_WCHAR_T__, __SIZEOF_WINT_T__ and\n+\t__SIZEOF_PTRDIFF_T__.\n+\t* doc/cpp.texi: Documentation for the new builtin macros added.\n+\n 2007-01-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (tanxf2, tan<mode>2, atan<mode>2, log<mode>2,"}, {"sha": "729cb0b7ed97f337b42cc1da20c0382f1d0e7ee3", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/024a85aeb6a912811d917f737eaad39140c2fb0c/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/024a85aeb6a912811d917f737eaad39140c2fb0c/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=024a85aeb6a912811d917f737eaad39140c2fb0c", "patch": "@@ -58,6 +58,7 @@ static void builtin_define_with_hex_fp_value (const char *, tree,\n static void builtin_define_stdint_macros (void);\n static void builtin_define_type_max (const char *, tree, int);\n static void builtin_define_type_precision (const char *, tree);\n+static void builtin_define_type_sizeof (const char *, tree);\n static void builtin_define_float_constants (const char *, \n \t\t\t\t\t    const char *,\n \t\t\t\t\t    const char *,\n@@ -71,6 +72,14 @@ builtin_define_type_precision (const char *name, tree type)\n   builtin_define_with_int_value (name, TYPE_PRECISION (type));\n }\n \n+/* Define NAME with value TYPE size_unit.  */\n+static void\n+builtin_define_type_sizeof (const char *name, tree type)\n+{\n+  builtin_define_with_int_value (name,\n+\t\t\t\t tree_low_cst (TYPE_SIZE_UNIT (type), 1));\n+}\n+\n /* Define the float.h constants for TYPE using NAME_PREFIX, FP_SUFFIX,\n    and FP_CAST. */\n static void\n@@ -549,6 +558,24 @@ c_cpp_builtins (cpp_reader *pfile)\n   if (flag_openmp)\n     cpp_define (pfile, \"_OPENMP=200505\");\n \n+  builtin_define_type_sizeof (\"__SIZEOF_INT__\", integer_type_node);\n+  builtin_define_type_sizeof (\"__SIZEOF_LONG__\", long_integer_type_node);\n+  builtin_define_type_sizeof (\"__SIZEOF_LONG_LONG__\",\n+\t\t\t      long_long_integer_type_node);\n+  builtin_define_type_sizeof (\"__SIZEOF_SHORT__\", short_integer_type_node);\n+  builtin_define_type_sizeof (\"__SIZEOF_FLOAT__\", float_type_node);\n+  builtin_define_type_sizeof (\"__SIZEOF_DOUBLE__\", double_type_node);\n+  builtin_define_type_sizeof (\"__SIZEOF_LONG_DOUBLE__\", long_double_type_node);\n+  builtin_define_type_sizeof (\"__SIZEOF_SIZE_T__\", size_type_node);\n+  builtin_define_type_sizeof (\"__SIZEOF_WCHAR_T__\", wchar_type_node);\n+  builtin_define_type_sizeof (\"__SIZEOF_WINT_T__\", wint_type_node);\n+  builtin_define_type_sizeof (\"__SIZEOF_PTRDIFF_T__\",\n+\t\t\t      unsigned_ptrdiff_type_node);\n+  /* ptr_type_node can't be used here since ptr_mode is only set when\n+     toplev calls backend_init which is not done with -E switch.  */\n+  builtin_define_with_int_value (\"__SIZEOF_POINTER__\",\n+\t\t\t\t POINTER_SIZE / BITS_PER_UNIT);\n+\n   /* A straightforward target hook doesn't work, because of problems\n      linking that hook's body when part of non-C front ends.  */\n # define preprocessing_asm_p() (cpp_get_options (pfile)->lang == CLK_ASM)"}, {"sha": "90ff2304f7b757769b9613dc1857bef2a5bfa5d5", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/024a85aeb6a912811d917f737eaad39140c2fb0c/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/024a85aeb6a912811d917f737eaad39140c2fb0c/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=024a85aeb6a912811d917f737eaad39140c2fb0c", "patch": "@@ -2079,6 +2079,23 @@ respectively.  They exist to make the standard header given numerical limits\n work correctly.  You should not use these macros directly; instead, include\n the appropriate headers.\n \n+@item __SIZEOF_INT__\n+@itemx __SIZEOF_LONG__\n+@itemx __SIZEOF_LONG_LONG__\n+@itemx __SIZEOF_SHORT__\n+@itemx __SIZEOF_POINTER__\n+@itemx __SIZEOF_FLOAT__\n+@itemx __SIZEOF_DOUBLE__\n+@itemx __SIZEOF_LONG_DOUBLE__\n+@itemx __SIZEOF_SIZE_T__\n+@itemx __SIZEOF_WCHAR_T__\n+@itemx __SIZEOF_WINT_T__\n+@itemx __SIZEOF_PTRDIFF_T__\n+Defined to the number of bytes of the C standard data types: @code{int},\n+@code{long}, @code{long long}, @code{short}, @code{void *}, @code{float},\n+@code{double}, @code{long double}, @code{size_t}, @code{wchar_t}, @code{wint_t}\n+and @code{ptrdiff_t}.\n+\n @item __DEPRECATED\n This macro is defined, with value 1, when compiling a C++ source file\n with warnings about deprecated constructs enabled.  These warnings are"}, {"sha": "65fbbfb829570eb9717b156e34c7a2de0e266e2d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/024a85aeb6a912811d917f737eaad39140c2fb0c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/024a85aeb6a912811d917f737eaad39140c2fb0c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=024a85aeb6a912811d917f737eaad39140c2fb0c", "patch": "@@ -1,3 +1,7 @@\n+2007-01-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* gcc.c-torture/compile/sizeof-macros-1.c: New testcase.\n+\n 2007-01-23  Andrew Pinski  <pinskia@gmail.com>\n \n \tPR objc/27438"}, {"sha": "80618cc8dccd4e40eba492931cba992b5d61034c", "filename": "gcc/testsuite/gcc.c-torture/compile/sizeof-macros-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/024a85aeb6a912811d917f737eaad39140c2fb0c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsizeof-macros-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/024a85aeb6a912811d917f737eaad39140c2fb0c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsizeof-macros-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsizeof-macros-1.c?ref=024a85aeb6a912811d917f737eaad39140c2fb0c", "patch": "@@ -0,0 +1,15 @@\n+/* This checks the gcc builtin macros defined to the byte\n+   sizes of C standard types.  */\n+\n+int a[sizeof(int) == __SIZEOF_INT__ ? 1 : -1];\n+int b[sizeof(long) == __SIZEOF_LONG__ ? 1 : -1];\n+int c[sizeof(long long) == __SIZEOF_LONG_LONG__ ? 1 : -1];\n+int d[sizeof(short) == __SIZEOF_SHORT__ ? 1 : -1];\n+int e[sizeof(void *) == __SIZEOF_POINTER__ ? 1 : -1];\n+int f[sizeof(float) == __SIZEOF_FLOAT__ ? 1 : -1];\n+int g[sizeof(double) == __SIZEOF_DOUBLE__ ? 1 : -1];\n+int h[sizeof(long double) == __SIZEOF_LONG_DOUBLE__ ? 1 : -1];\n+int i[sizeof(__SIZE_TYPE__) == __SIZEOF_SIZE_T__ ? 1 : -1];\n+int j[sizeof(__WCHAR_TYPE__) == __SIZEOF_WCHAR_T__ ? 1 : -1];\n+int k[sizeof(__WINT_TYPE__) == __SIZEOF_WINT_T__ ? 1 : -1];\n+int l[sizeof(__PTRDIFF_TYPE__) == __SIZEOF_PTRDIFF_T__ ? 1 : -1];"}]}