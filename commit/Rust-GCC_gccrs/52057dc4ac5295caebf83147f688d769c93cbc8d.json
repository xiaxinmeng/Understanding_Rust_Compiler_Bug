{"sha": "52057dc4ac5295caebf83147f688d769c93cbc8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIwNTdkYzRhYzUyOTVjYWViZjgzMTQ3ZjY4OGQ3NjljOTNjYmM4ZA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-06-29T13:36:35Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-06-29T13:36:35Z"}, "message": "[arm] Avoid STRD with odd register for TARGET_ARM in output_move_double\n\nIn this testcase the user forces an odd register as the starting reg for a DFmode value.\nThe output_move_double function tries to store that using an STRD instruction.\nBut for TARGET_ARM the starting register of an STRD must be an even one.\nThis is always the case with compiler-allocated registers for DFmode values, but the\ninline assembly forced our hand here.\n\nThis patch  restricts the STRD-emitting logic in output_move_double to not avoid\nodd-numbered source registers in STRD.\nI'm not a fan of the whole function, we should be exposing a lot of the logic in there\nto RTL rather than at the final output stage, but that would need to be fixed separately.\n\n\t* config/arm/arm.c (output_move_double): Don't allow STRD instructions\n\tif starting source register is not even.\n\n\t* gcc.target/arm/arm-soft-strd-even.c: New test.\n\nFrom-SVN: r262250", "tree": {"sha": "95dfcfdded0b4e95879b33b300ba999cb847f437", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95dfcfdded0b4e95879b33b300ba999cb847f437"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52057dc4ac5295caebf83147f688d769c93cbc8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52057dc4ac5295caebf83147f688d769c93cbc8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52057dc4ac5295caebf83147f688d769c93cbc8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52057dc4ac5295caebf83147f688d769c93cbc8d/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b33aa7209ed570864189dba4c070565ea4a1554b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33aa7209ed570864189dba4c070565ea4a1554b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b33aa7209ed570864189dba4c070565ea4a1554b"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "a76fea967828ee21a6b653af926790ac2859b8b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52057dc4ac5295caebf83147f688d769c93cbc8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52057dc4ac5295caebf83147f688d769c93cbc8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52057dc4ac5295caebf83147f688d769c93cbc8d", "patch": "@@ -1,3 +1,8 @@\n+2018-06-29  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm.c (output_move_double): Don't allow STRD instructions\n+\tif starting source register is not even.\n+\n 2018-06-29  Martin Liska  <mliska@suse.cz>\n \n         PR tree-optimization/86263"}, {"sha": "f1a99588bab663e93640431de074a9f93680fa0c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52057dc4ac5295caebf83147f688d769c93cbc8d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52057dc4ac5295caebf83147f688d769c93cbc8d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=52057dc4ac5295caebf83147f688d769c93cbc8d", "patch": "@@ -18463,28 +18463,34 @@ output_move_double (rtx *operands, bool emit, int *count)\n       gcc_assert ((REGNO (operands[1]) != IP_REGNUM)\n                   || (TARGET_ARM && TARGET_LDRD));\n \n+      /* For TARGET_ARM the first source register of an STRD\n+\t must be even.  This is usually the case for double-word\n+\t values but user assembly constraints can force an odd\n+\t starting register.  */\n+      bool allow_strd = TARGET_LDRD\n+\t\t\t && !(TARGET_ARM && (REGNO (operands[1]) & 1) == 1);\n       switch (GET_CODE (XEXP (operands[0], 0)))\n         {\n \tcase REG:\n \t  if (emit)\n \t    {\n-\t      if (TARGET_LDRD)\n+\t      if (allow_strd)\n \t\toutput_asm_insn (\"strd%?\\t%1, [%m0]\", operands);\n \t      else\n \t\toutput_asm_insn (\"stm%?\\t%m0, %M1\", operands);\n \t    }\n \t  break;\n \n         case PRE_INC:\n-\t  gcc_assert (TARGET_LDRD);\n+\t  gcc_assert (allow_strd);\n \t  if (emit)\n \t    output_asm_insn (\"strd%?\\t%1, [%m0, #8]!\", operands);\n \t  break;\n \n         case PRE_DEC:\n \t  if (emit)\n \t    {\n-\t      if (TARGET_LDRD)\n+\t      if (allow_strd)\n \t\toutput_asm_insn (\"strd%?\\t%1, [%m0, #-8]!\", operands);\n \t      else\n \t\toutput_asm_insn (\"stmdb%?\\t%m0!, %M1\", operands);\n@@ -18494,15 +18500,15 @@ output_move_double (rtx *operands, bool emit, int *count)\n         case POST_INC:\n \t  if (emit)\n \t    {\n-\t      if (TARGET_LDRD)\n+\t      if (allow_strd)\n \t\toutput_asm_insn (\"strd%?\\t%1, [%m0], #8\", operands);\n \t      else\n \t\toutput_asm_insn (\"stm%?\\t%m0!, %M1\", operands);\n \t    }\n \t  break;\n \n         case POST_DEC:\n-\t  gcc_assert (TARGET_LDRD);\n+\t  gcc_assert (allow_strd);\n \t  if (emit)\n \t    output_asm_insn (\"strd%?\\t%1, [%m0], #-8\", operands);\n \t  break;\n@@ -18513,8 +18519,8 @@ output_move_double (rtx *operands, bool emit, int *count)\n \t  otherops[1] = XEXP (XEXP (XEXP (operands[0], 0), 1), 0);\n \t  otherops[2] = XEXP (XEXP (XEXP (operands[0], 0), 1), 1);\n \n-\t  /* IWMMXT allows offsets larger than ldrd can handle,\n-\t     fix these up with a pair of ldr.  */\n+\t  /* IWMMXT allows offsets larger than strd can handle,\n+\t     fix these up with a pair of str.  */\n \t  if (!TARGET_THUMB2\n \t      && CONST_INT_P (otherops[2])\n \t      && (INTVAL(otherops[2]) <= -256\n@@ -18579,7 +18585,7 @@ output_move_double (rtx *operands, bool emit, int *count)\n \t\t  return \"\";\n \t\t}\n \t    }\n-\t  if (TARGET_LDRD\n+\t  if (allow_strd\n \t      && (REG_P (otherops[2])\n \t\t  || TARGET_THUMB2\n \t\t  || (CONST_INT_P (otherops[2])"}, {"sha": "9072c6d5dd638714e2aa85d7ab3e587876017f28", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52057dc4ac5295caebf83147f688d769c93cbc8d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52057dc4ac5295caebf83147f688d769c93cbc8d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52057dc4ac5295caebf83147f688d769c93cbc8d", "patch": "@@ -1,3 +1,7 @@\n+2018-06-29  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/arm/arm-soft-strd-even.c: New test.\n+\n 2018-06-29  Tom de Vries  <tdevries@suse.de>\n \n \t* gcc.dg/guality/pr45882.c (foo): Add line number var for breakpoint"}, {"sha": "fb7317c8718229f5a6a01a6ce2a734edb466c151", "filename": "gcc/testsuite/gcc.target/arm/arm-soft-strd-even.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52057dc4ac5295caebf83147f688d769c93cbc8d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farm-soft-strd-even.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52057dc4ac5295caebf83147f688d769c93cbc8d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farm-soft-strd-even.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farm-soft-strd-even.c?ref=52057dc4ac5295caebf83147f688d769c93cbc8d", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_arm_ok } */\n+/* { dg-options \"-O2 -marm -mfloat-abi=soft\" } */\n+\n+/* Check that we don't try to emit STRD in ARM state with\n+   odd starting register.  */\n+\n+struct S {\n+  double M0;\n+} __attribute((aligned)) __attribute((packed));\n+\n+void bar(void *);\n+\n+void foo(int x, struct S y) {\n+  asm(\"\" : : : \"r1\", \"r8\", \"r7\", \"r4\");\n+  y.M0 ?: bar(0);\n+  bar(__builtin_alloca(8));\n+}"}]}