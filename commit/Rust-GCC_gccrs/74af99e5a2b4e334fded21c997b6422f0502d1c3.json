{"sha": "74af99e5a2b4e334fded21c997b6422f0502d1c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRhZjk5ZTVhMmI0ZTMzNGZkZWQyMWM5OTdiNjQyMmYwNTAyZDFjMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2002-11-15T08:06:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2002-11-15T08:06:35Z"}, "message": "re PR libstdc++/8399 (sync_with_stdio(false) breaks unformatted input)\n\n2002-11-15  Paolo Carlini  <pcarlini@unitus.it>\n\t    Loren J. Rittle  <ljrittle@acm.org>\n\n\tPR libstdc++/8399\n\t* acinclude.m4\n\t(GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1): New macro to\n\tcheck for unistd.h functions.\n\t(GLIBCPP_CHECK_UNISTD_SUPPORT): New macro, check for isatty\n\tin unistd.h.\n\t* configure.in: Call here.\n\t* src/ios.cc (ios_base::Init::_S_ios_create(bool)):\n\tUse _GLIBCPP_HAVE_ISATTY: ifdef, in case of interactive\n\tinput __in_size = 1 even when sync_with_stdio is false;\n\totherwise fall back to __in_size = 1.\n\t* aclocal.m4: Regenerate.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\nCo-Authored-By: Loren J. Rittle <ljrittle@acm.org>\n\nFrom-SVN: r59118", "tree": {"sha": "a5b34ca6b5f3cae8764d0aeaf4a20d6f55e91277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5b34ca6b5f3cae8764d0aeaf4a20d6f55e91277"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74af99e5a2b4e334fded21c997b6422f0502d1c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74af99e5a2b4e334fded21c997b6422f0502d1c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74af99e5a2b4e334fded21c997b6422f0502d1c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74af99e5a2b4e334fded21c997b6422f0502d1c3/comments", "author": null, "committer": null, "parents": [{"sha": "90024bdce00c22606c92ecb32070db2986c51ad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90024bdce00c22606c92ecb32070db2986c51ad6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90024bdce00c22606c92ecb32070db2986c51ad6"}], "stats": {"total": 2834, "additions": 1518, "deletions": 1316}, "files": [{"sha": "c604d25c91e0b5cf9c4c34d4ab6240bc05a2473d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74af99e5a2b4e334fded21c997b6422f0502d1c3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74af99e5a2b4e334fded21c997b6422f0502d1c3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=74af99e5a2b4e334fded21c997b6422f0502d1c3", "patch": "@@ -1,3 +1,21 @@\n+2002-11-15  Paolo Carlini  <pcarlini@unitus.it>\n+            Loren J. Rittle  <ljrittle@acm.org>\n+\n+\tPR libstdc++/8399\n+\t* acinclude.m4\n+\t(GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1): New macro to\n+\tcheck for unistd.h functions.\n+\t(GLIBCPP_CHECK_UNISTD_SUPPORT): New macro, check for isatty\n+\tin unistd.h.\n+\t* configure.in: Call here.\n+\t* src/ios.cc (ios_base::Init::_S_ios_create(bool)):\n+\tUse _GLIBCPP_HAVE_ISATTY: ifdef, in case of interactive\n+\tinput __in_size = 1 even when sync_with_stdio is false;\n+\totherwise fall back to __in_size = 1.\n+\t* aclocal.m4: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\n 2002-11-13  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* acconfig.h (HAVE_DRAND48): Add."}, {"sha": "017731f41cbfb7938628acc3f3b252c8cb799377", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74af99e5a2b4e334fded21c997b6422f0502d1c3/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74af99e5a2b4e334fded21c997b6422f0502d1c3/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=74af99e5a2b4e334fded21c997b6422f0502d1c3", "patch": "@@ -591,6 +591,33 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3, [\n   fi\n ])\n \n+dnl\n+dnl Check to see if the (unistd function) argument passed is\n+dnl 1) declared when using the c++ compiler\n+dnl 2) has \"C\" linkage\n+dnl\n+dnl argument 1 is name of function to check\n+dnl\n+dnl ASSUMES argument is a function with ONE parameter\n+dnl\n+dnl GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1\n+AC_DEFUN(GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1, [\n+  AC_MSG_CHECKING([for $1 declaration])\n+  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+      AC_LANG_SAVE\n+      AC_LANG_CPLUSPLUS\n+      AC_TRY_COMPILE([#include <unistd.h>], \n+                     [ $1(0);], \n+                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+      AC_LANG_RESTORE\n+    ])\n+  fi\n+  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n+  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n+    AC_CHECK_FUNCS($1)    \n+  fi\n+])\n \n dnl\n dnl Because the builtins are picky picky picky about the arguments they take, \n@@ -702,9 +729,8 @@ AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT, [\n   fi\n ])\n \n-\n dnl\n-dnl Check to see what the underlying c library \n+dnl Check to see what the underlying c library is like\n dnl These checks need to do two things: \n dnl 1) make sure the name is declared when using the c++ compiler\n dnl 2) make sure the name has \"C\" linkage\n@@ -727,6 +753,25 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_SUPPORT, [\n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n ])\n \n+dnl\n+dnl Check to see what the underlying c library is like\n+dnl These checks need to do two things: \n+dnl 1) make sure the name is declared when using the c++ compiler\n+dnl 2) make sure the name has \"C\" linkage\n+dnl This might seem like overkill but experience has shown that it's not...\n+dnl\n+dnl Define HAVE_ISATTY if \"isatty\" is declared and links\n+dnl\n+dnl GLIBCPP_CHECK_UNISTD_SUPPORT\n+AC_DEFUN(GLIBCPP_CHECK_UNISTD_SUPPORT, [\n+  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS='-fno-builtins -D_GNU_SOURCE'\n+\n+  GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1(isatty)\n+  \n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+])\n \n dnl\n dnl Check to see what the underlying c library or math library is like."}, {"sha": "f1ef3ab4f2bcb07f5736db73636eb1b55a1a24b1", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 81, "deletions": 31, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74af99e5a2b4e334fded21c997b6422f0502d1c3/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74af99e5a2b4e334fded21c997b6422f0502d1c3/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=74af99e5a2b4e334fded21c997b6422f0502d1c3", "patch": "@@ -1,4 +1,4 @@\n-dnl aclocal.m4 generated automatically by aclocal 1.4-p5\n+dnl aclocal.m4 generated automatically by aclocal 1.4-p6\n \n dnl Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n dnl This file is free software; the Free Software Foundation\n@@ -603,6 +603,33 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3, [\n   fi\n ])\n \n+dnl\n+dnl Check to see if the (unistd function) argument passed is\n+dnl 1) declared when using the c++ compiler\n+dnl 2) has \"C\" linkage\n+dnl\n+dnl argument 1 is name of function to check\n+dnl\n+dnl ASSUMES argument is a function with ONE parameter\n+dnl\n+dnl GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1\n+AC_DEFUN(GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1, [\n+  AC_MSG_CHECKING([for $1 declaration])\n+  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+      AC_LANG_SAVE\n+      AC_LANG_CPLUSPLUS\n+      AC_TRY_COMPILE([#include <unistd.h>], \n+                     [ $1(0);], \n+                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+      AC_LANG_RESTORE\n+    ])\n+  fi\n+  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n+  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n+    AC_CHECK_FUNCS($1)    \n+  fi\n+])\n \n dnl\n dnl Because the builtins are picky picky picky about the arguments they take, \n@@ -714,9 +741,8 @@ AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT, [\n   fi\n ])\n \n-\n dnl\n-dnl Check to see what the underlying c library \n+dnl Check to see what the underlying c library is like\n dnl These checks need to do two things: \n dnl 1) make sure the name is declared when using the c++ compiler\n dnl 2) make sure the name has \"C\" linkage\n@@ -739,6 +765,25 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_SUPPORT, [\n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n ])\n \n+dnl\n+dnl Check to see what the underlying c library is like\n+dnl These checks need to do two things: \n+dnl 1) make sure the name is declared when using the c++ compiler\n+dnl 2) make sure the name has \"C\" linkage\n+dnl This might seem like overkill but experience has shown that it's not...\n+dnl\n+dnl Define HAVE_ISATTY if \"isatty\" is declared and links\n+dnl\n+dnl GLIBCPP_CHECK_UNISTD_SUPPORT\n+AC_DEFUN(GLIBCPP_CHECK_UNISTD_SUPPORT, [\n+  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS='-fno-builtins -D_GNU_SOURCE'\n+\n+  GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1(isatty)\n+  \n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+])\n \n dnl\n dnl Check to see what the underlying c library or math library is like.\n@@ -2217,31 +2262,6 @@ AC_MSG_RESULT($enable_symvers)\n ])\n \n \n-# isc-posix.m4 serial 1 (gettext-0.10.40)\n-dnl Copyright (C) 1995-2002 Free Software Foundation, Inc.\n-dnl This file is free software, distributed under the terms of the GNU\n-dnl General Public License.  As a special exception to the GNU General\n-dnl Public License, this file may be distributed as part of a program\n-dnl that contains a configuration script generated by Autoconf, under\n-dnl the same distribution terms as the rest of that program.\n-\n-# This test replaces the one in autoconf.\n-# Currently this macro should have the same name as the autoconf macro\n-# because gettext's gettext.m4 (distributed in the automake package)\n-# still uses it.  Otherwise, the use in gettext.m4 makes autoheader\n-# give these diagnostics:\n-#   configure.in:556: AC_TRY_COMPILE was called before AC_ISC_POSIX\n-#   configure.in:556: AC_TRY_RUN was called before AC_ISC_POSIX\n-\n-undefine([AC_ISC_POSIX])\n-\n-AC_DEFUN([AC_ISC_POSIX],\n-  [\n-    dnl This test replaces the obsolescent AC_ISC_POSIX kludge.\n-    AC_CHECK_LIB(cposix, strerror, [LIBS=\"$LIBS -lcposix\"])\n-  ]\n-)\n-\n # Add --enable-maintainer-mode option to configure.\n # From Jim Meyering\n \n@@ -2285,7 +2305,8 @@ dnl Usage:\n dnl AM_INIT_AUTOMAKE(package,version, [no-define])\n \n AC_DEFUN([AM_INIT_AUTOMAKE],\n-[AC_REQUIRE([AC_PROG_INSTALL])\n+[AC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl\n+AC_REQUIRE([AC_PROG_INSTALL])\n PACKAGE=[$1]\n AC_SUBST(PACKAGE)\n VERSION=[$2]\n@@ -2301,13 +2322,42 @@ AC_REQUIRE([AM_SANITY_CHECK])\n AC_REQUIRE([AC_ARG_PROGRAM])\n dnl FIXME This is truly gross.\n missing_dir=`cd $ac_aux_dir && pwd`\n-AM_MISSING_PROG(ACLOCAL, aclocal, $missing_dir)\n+AM_MISSING_PROG(ACLOCAL, aclocal-${am__api_version}, $missing_dir)\n AM_MISSING_PROG(AUTOCONF, autoconf, $missing_dir)\n-AM_MISSING_PROG(AUTOMAKE, automake, $missing_dir)\n+AM_MISSING_PROG(AUTOMAKE, automake-${am__api_version}, $missing_dir)\n AM_MISSING_PROG(AUTOHEADER, autoheader, $missing_dir)\n AM_MISSING_PROG(MAKEINFO, makeinfo, $missing_dir)\n AC_REQUIRE([AC_PROG_MAKE_SET])])\n \n+# Copyright 2002  Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+\n+# AM_AUTOMAKE_VERSION(VERSION)\n+# ----------------------------\n+# Automake X.Y traces this macro to ensure aclocal.m4 has been\n+# generated from the m4 files accompanying Automake X.Y.\n+AC_DEFUN([AM_AUTOMAKE_VERSION],[am__api_version=\"1.4\"])\n+\n+# AM_SET_CURRENT_AUTOMAKE_VERSION\n+# -------------------------------\n+# Call AM_AUTOMAKE_VERSION so it can be traced.\n+# This function is AC_REQUIREd by AC_INIT_AUTOMAKE.\n+AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n+\t [AM_AUTOMAKE_VERSION([1.4-p6])])\n+\n #\n # Check to make sure that the build environment is sane.\n #"}, {"sha": "c3bc4b989feb819e24d790c8b093e5007d17ffa5", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74af99e5a2b4e334fded21c997b6422f0502d1c3/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74af99e5a2b4e334fded21c997b6422f0502d1c3/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=74af99e5a2b4e334fded21c997b6422f0502d1c3", "patch": "@@ -3,6 +3,9 @@\n /* Define if you have a working `mmap' system call.  */\n #undef HAVE_MMAP\n \n+/* Define if you need to in order for stat and other things to work.  */\n+#undef _POSIX_SOURCE\n+\n // Define if GCC supports weak symbols.\n #undef _GLIBCPP_SUPPORTS_WEAK\n \n@@ -461,6 +464,9 @@\n /* Define if you have the iconv_open function.  */\n #undef HAVE_ICONV_OPEN\n \n+/* Define if you have the isatty function.  */\n+#undef HAVE_ISATTY\n+\n /* Define if you have the isinf function.  */\n #undef HAVE_ISINF\n "}, {"sha": "c7ad76eaa85b68fbc7289f94cb14c6e1bfebe22d", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1360, "deletions": 1282, "changes": 2642, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74af99e5a2b4e334fded21c997b6422f0502d1c3/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74af99e5a2b4e334fded21c997b6422f0502d1c3/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=74af99e5a2b4e334fded21c997b6422f0502d1c3"}, {"sha": "50b2e89a762b299d2c05e70fc56f1c5ba659072e", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74af99e5a2b4e334fded21c997b6422f0502d1c3/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74af99e5a2b4e334fded21c997b6422f0502d1c3/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=74af99e5a2b4e334fded21c997b6422f0502d1c3", "patch": "@@ -397,6 +397,7 @@ else\n   GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n   GLIBCPP_CHECK_WCHAR_T_SUPPORT\n   GLIBCPP_CHECK_STDLIB_SUPPORT\n+  GLIBCPP_CHECK_UNISTD_SUPPORT\n   AC_LC_MESSAGES\n \n   AC_TRY_COMPILE(["}, {"sha": "dac3a9ff92f673c723d88ea4c7333a8e45f999e9", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74af99e5a2b4e334fded21c997b6422f0502d1c3/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74af99e5a2b4e334fded21c997b6422f0502d1c3/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=74af99e5a2b4e334fded21c997b6422f0502d1c3", "patch": "@@ -157,7 +157,11 @@ namespace std\n   ios_base::Init::_S_ios_create(bool __sync)\n   {\n     int __out_size = __sync ? 0 : static_cast<int>(BUFSIZ);\n-    int __in_size = __sync ? 1 : static_cast<int>(BUFSIZ);\n+#ifdef _GLIBCPP_HAVE_ISATTY\n+    int __in_size = (__sync || isatty (0)) ? 1 : static_cast<int>(BUFSIZ);\n+#else\n+    int __in_size = 1;\n+#endif\n \n     // NB: The file globals.cc creates the four standard files\n     // with NULL buffers. At this point, we swap out the dummy NULL"}]}