{"sha": "ed6a1ff9879de13a0458ff31a3cb50db7a207881", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ2YTFmZjk4NzlkZTEzYTA0NThmZjMxYTNjYjUwZGI3YTIwNzg4MQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-06-12T07:09:52Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-06-12T07:09:52Z"}, "message": "re PR rtl-optimization/50749 (Auto-inc-dec does not find subsequent contiguous mem accesses)\n\n\tPR target/50749\n\t* gcc.target/sh/pr50749-sf-postinc-2.c: New.\n\t* gcc.target/sh/pr50749-sf-postinc-4.c: New.\n\t* gcc.target/sh/pr50749-qihisi-postinc-2.c: New.\n\t* gcc.target/sh/pr50749-qihisi-postinc-4.c: New.\n\t* gcc.target/sh/pr50749-sf-predec-2.c: New.\n\t* gcc.target/sh/pr50749-sf-predec-4.c: New.\n\t* gcc.target/sh/pr50749-qihisi-predec-1.c: New.\n\t* gcc.target/sh/pr50749-qihisi-predec-3.c: New.\n\t* gcc.target/sh/pr50749-sf-postinc-1.c: New.\n\t* gcc.target/sh/pr50749-sf-postinc-3.c: New.\n\t* gcc.target/sh/pr50749-qihisi-postinc-1.c: New.\n\t* gcc.target/sh/pr50749-qihisi-postinc-3.c: New.\n\t* gcc.target/sh/pr50749-sf-predec-1.c: New.\n\t* gcc.target/sh/pr50749-sf-predec-3.c: New.\n\t* gcc.target/sh/pr50749-qihisi-predec-2.c: New.\n\t* gcc.target/sh/pr50749-qihisi-predec-4.c: New.\n\nFrom-SVN: r188426", "tree": {"sha": "420fa2c057a0d92c301c81ca255658291b6934f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/420fa2c057a0d92c301c81ca255658291b6934f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed6a1ff9879de13a0458ff31a3cb50db7a207881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed6a1ff9879de13a0458ff31a3cb50db7a207881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed6a1ff9879de13a0458ff31a3cb50db7a207881", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed6a1ff9879de13a0458ff31a3cb50db7a207881/comments", "author": null, "committer": null, "parents": [{"sha": "2b8088e7c8f383aaec2391f8a8da4e1c1559e4fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8088e7c8f383aaec2391f8a8da4e1c1559e4fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b8088e7c8f383aaec2391f8a8da4e1c1559e4fc"}], "stats": {"total": 524, "additions": 524, "deletions": 0}, "files": [{"sha": "04725bd3c660a5b2e3dae42aebda24d6e599958e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed6a1ff9879de13a0458ff31a3cb50db7a207881", "patch": "@@ -1,3 +1,23 @@\n+2012-06-12  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/50749\n+\t* gcc.target/sh/pr50749-sf-postinc-2.c: New.\n+\t* gcc.target/sh/pr50749-sf-postinc-4.c: New.\n+\t* gcc.target/sh/pr50749-qihisi-postinc-2.c: New.\n+\t* gcc.target/sh/pr50749-qihisi-postinc-4.c: New.\n+\t* gcc.target/sh/pr50749-sf-predec-2.c: New.\n+\t* gcc.target/sh/pr50749-sf-predec-4.c: New.\n+\t* gcc.target/sh/pr50749-qihisi-predec-1.c: New.\n+\t* gcc.target/sh/pr50749-qihisi-predec-3.c: New.\n+\t* gcc.target/sh/pr50749-sf-postinc-1.c: New.\n+\t* gcc.target/sh/pr50749-sf-postinc-3.c: New.\n+\t* gcc.target/sh/pr50749-qihisi-postinc-1.c: New.\n+\t* gcc.target/sh/pr50749-qihisi-postinc-3.c: New.\n+\t* gcc.target/sh/pr50749-sf-predec-1.c: New.\n+\t* gcc.target/sh/pr50749-sf-predec-3.c: New.\n+\t* gcc.target/sh/pr50749-qihisi-predec-2.c: New.\n+\t* gcc.target/sh/pr50749-qihisi-predec-4.c: New.\n+\n 2012-06-11  Sriraman Tallam  <tmsriram@google.com>\n \n \t* gcc.target/i386/builtin_target.c (vendor_signatures): New enum."}, {"sha": "8852b8f87f2ba1c7b60bc7d7bea940f472340103", "filename": "gcc/testsuite/gcc.target/sh/pr50749-qihisi-postinc-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-1.c?ref=ed6a1ff9879de13a0458ff31a3cb50db7a207881", "patch": "@@ -0,0 +1,34 @@\n+/* PR target/50749: Verify that post-increment addressing is generated.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"mov.b\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"mov.w\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"mov.l\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 1 } } */\n+\n+char*\n+test_func_00 (char* p, int* x)\n+{\n+  int r = 0;\n+  r += *p++;\n+  *x = r;\n+  return p;\n+}\n+\n+short*\n+test_func_01 (short* p, int* x)\n+{\n+  int r = 0;\n+  r += *p++;\n+  *x = r;\n+  return p;\n+}\n+\n+int*\n+test_func_02 (int* p, int* x)\n+{\n+  int r = 0;\n+  r += *p++;\n+  *x = r;\n+  return p;\n+}\n+"}, {"sha": "b101e8d04c85eb8ffc336d3815f9fbafa311fb51", "filename": "gcc/testsuite/gcc.target/sh/pr50749-qihisi-postinc-2.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-2.c?ref=ed6a1ff9879de13a0458ff31a3cb50db7a207881", "patch": "@@ -0,0 +1,70 @@\n+/* PR target/50749: Verify that subsequent post-increment addressings\n+   are generated.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"mov.b\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 5 { xfail *-*-*} } } */\n+/* { dg-final { scan-assembler-times \"mov.w\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 5 { xfail *-*-*} } } */\n+/* { dg-final { scan-assembler-times \"mov.l\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 5 { xfail *-*-*} } } */\n+\n+char*\n+test_func_00 (char* p, int* x)\n+{\n+  int r = 0;\n+  r += *p++;\n+  r += *p++;\n+  *x = r;\n+  return p;\n+}\n+\n+char*\n+test_func_01 (char* p, int* x)\n+{\n+  int r = 0;\n+  r += *p++;\n+  r += *p++;\n+  r += *p++;\n+  *x = r;\n+  return p;\n+}\n+\n+short*\n+test_func_02 (short* p, int* x)\n+{\n+  int r = 0;\n+  r += *p++;\n+  r += *p++;\n+  *x = r;\n+  return p;\n+}\n+\n+short*\n+test_func_03 (short* p, int* x)\n+{\n+  int r = 0;\n+  r += *p++;\n+  r += *p++;\n+  r += *p++;\n+  *x = r;\n+  return p;\n+}\n+\n+int*\n+test_func_04 (int* p, int* x)\n+{\n+  int r = 0;\n+  r += *p++;\n+  r += *p++;\n+  *x = r;\n+  return p;\n+}\n+\n+int*\n+test_func_05 (int* p, int* x)\n+{\n+  int r = 0;\n+  r += *p++;\n+  r += *p++;\n+  r += *p++;\n+  *x = r;\n+  return p;\n+}"}, {"sha": "99f16b60c184b7cebb3598903470d4823f8981e6", "filename": "gcc/testsuite/gcc.target/sh/pr50749-qihisi-postinc-3.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-3.c?ref=ed6a1ff9879de13a0458ff31a3cb50db7a207881", "patch": "@@ -0,0 +1,40 @@\n+/* PR target/50749: Verify that post-increment addressing is generated\n+   inside a loop.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"mov.b\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"mov.w\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"mov.l\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 1 } } */\n+\n+int\n+test_func_00 (char* p, int c)\n+{\n+  int r = 0;\n+  do\n+  {\n+    r += *p++;\n+  } while (--c);\n+  return r;\n+}\n+\n+int\n+test_func_01 (short* p, int c)\n+{\n+  int r = 0;\n+  do\n+  {\n+    r += *p++;\n+  } while (--c);\n+  return r;\n+}\n+\n+int\n+test_func_02 (int* p, int c)\n+{\n+  int r = 0;\n+  do\n+  {\n+    r += *p++;\n+  } while (--c);\n+  return r;\n+}"}, {"sha": "01050c602699289adedd8745f22ef498daf73aaa", "filename": "gcc/testsuite/gcc.target/sh/pr50749-qihisi-postinc-4.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-postinc-4.c?ref=ed6a1ff9879de13a0458ff31a3cb50db7a207881", "patch": "@@ -0,0 +1,46 @@\n+/* PR target/50749: Verify that post-increment addressing is generated\n+   inside a loop.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"mov.b\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 3 { xfail *-*-*} } } */\n+/* { dg-final { scan-assembler-times \"mov.w\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 3 { xfail *-*-*} } } */\n+/* { dg-final { scan-assembler-times \"mov.l\\t@r\\[0-9]\\+\\\\+,r\\[0-9]\\+\" 3 { xfail *-*-*} } } */\n+\n+int\n+test_func_00 (char* p, int c)\n+{\n+  int r = 0;\n+  do\n+  {\n+    r += *p++;\n+    r += *p++;\n+    r += *p++;\n+  } while (--c);\n+  return r;\n+}\n+\n+int\n+test_func_01 (short* p, int c)\n+{\n+  int r = 0;\n+  do\n+  {\n+    r += *p++;\n+    r += *p++;\n+    r += *p++;\n+  } while (--c);\n+  return r;\n+}\n+\n+int\n+test_func_02 (int* p, int c)\n+{\n+  int r = 0;\n+  do\n+  {\n+    r += *p++;\n+    r += *p++;\n+    r += *p++;\n+  } while (--c);\n+  return r;\n+}"}, {"sha": "5f816e91cbba311734ea8bcf0824ab7b2ce9fa4b", "filename": "gcc/testsuite/gcc.target/sh/pr50749-qihisi-predec-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-1.c?ref=ed6a1ff9879de13a0458ff31a3cb50db7a207881", "patch": "@@ -0,0 +1,28 @@\n+/* PR target/50749: Verify that pre-decrement addressing is generated.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"mov.b\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 1 { xfail *-*-*} } } */\n+/* { dg-final { scan-assembler-times \"mov.w\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 1 { xfail *-*-*} } } */\n+/* { dg-final { scan-assembler-times \"mov.l\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 1 { xfail *-*-*} } } */\n+\n+char*\n+test_func_00 (char* p, int c)\n+{\n+  *--p = (char)c;\n+  return p;\n+}\n+\n+short*\n+test_func_01 (short* p, int c)\n+{\n+  *--p = (short)c;\n+  return p;\n+}\n+\n+int*\n+test_func_02 (int* p, int c)\n+{\n+  *--p = c;\n+  return p;\n+}\n+"}, {"sha": "73e19f378e6b2425bde32082d8a475dcb390d980", "filename": "gcc/testsuite/gcc.target/sh/pr50749-qihisi-predec-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-2.c?ref=ed6a1ff9879de13a0458ff31a3cb50db7a207881", "patch": "@@ -0,0 +1,58 @@\n+/* PR target/50749: Verify that subsequent pre-decrement addressings\n+   are generated.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"mov.b\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 5 { xfail *-*-*} } } */\n+/* { dg-final { scan-assembler-times \"mov.w\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 5 { xfail *-*-*} } } */\n+/* { dg-final { scan-assembler-times \"mov.l\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 5 { xfail *-*-*} } } */\n+\n+char*\n+test_func_00 (char* p, int c)\n+{\n+  *--p = (char)c;\n+  *--p = (char)c;\n+  return p;\n+}\n+\n+char*\n+test_func_01 (char* p, int c)\n+{\n+  *--p = (char)c;\n+  *--p = (char)c;\n+  *--p = (char)c;\n+  return p;\n+}\n+\n+short*\n+test_func_02 (short* p, int c)\n+{\n+  *--p = (short)c;\n+  *--p = (short)c;\n+  return p;\n+}\n+\n+short*\n+test_func_03 (short* p, int c)\n+{\n+  *--p = (short)c;\n+  *--p = (short)c;\n+  *--p = (short)c;\n+  return p;\n+}\n+\n+int*\n+test_func_04 (int* p, int c)\n+{\n+  *--p = c;\n+  *--p = c;\n+  return p;\n+}\n+\n+int*\n+test_func_05 (int* p, int c)\n+{\n+  *--p = c;\n+  *--p = c;\n+  *--p = c;\n+  return p;\n+}"}, {"sha": "f242bf3782705ff691f2f36e8c5d6604a1b1c159", "filename": "gcc/testsuite/gcc.target/sh/pr50749-qihisi-predec-3.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-3.c?ref=ed6a1ff9879de13a0458ff31a3cb50db7a207881", "patch": "@@ -0,0 +1,37 @@\n+/* PR target/50749: Verify that pre-decrement addressing is generated\n+   inside a loop.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"mov.b\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"mov.w\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"mov.l\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 1 } } */\n+\n+char*\n+test_func_00 (char* p, int c, int x)\n+{\n+  do\n+  {\n+    *--p = (char)x;\n+  } while (--c);\n+  return p;\n+}\n+\n+short*\n+test_func_01 (short* p, int c, int x)\n+{\n+  do\n+  {\n+    *--p = (short)x;\n+  } while (--c);\n+  return p;\n+}\n+\n+int*\n+test_func_02 (int* p, int c, int x)\n+{\n+  do\n+  {\n+    *--p = x;\n+  } while (--c);\n+  return p;\n+}"}, {"sha": "24601ca6bff3a4d0f9fe16244096b11faf84b328", "filename": "gcc/testsuite/gcc.target/sh/pr50749-qihisi-predec-4.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-qihisi-predec-4.c?ref=ed6a1ff9879de13a0458ff31a3cb50db7a207881", "patch": "@@ -0,0 +1,43 @@\n+/* PR target/50749: Verify that pre-decrement addressing is generated\n+   inside a loop.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"mov.b\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 3 { xfail *-*-*} } } */\n+/* { dg-final { scan-assembler-times \"mov.w\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 3 { xfail *-*-*} } } */\n+/* { dg-final { scan-assembler-times \"mov.l\\tr\\[0-9]\\+,@-r\\[0-9]\\+\" 3 { xfail *-*-*} } } */\n+\n+char*\n+test_func_00 (char* p, int c, int x)\n+{\n+  do\n+  {\n+    *--p = (char)x;\n+    *--p = (char)x;\n+    *--p = (char)x;\n+  } while (--c);\n+  return p;\n+}\n+\n+short*\n+test_func_01 (short* p, int c, int x)\n+{\n+  do\n+  {\n+    *--p = (short)x;\n+    *--p = (short)x;\n+    *--p = (short)x;\n+  } while (--c);\n+  return p;\n+}\n+\n+int*\n+test_func_02 (int* p, int c, int x)\n+{\n+  do\n+  {\n+    *--p = x;\n+    *--p = x;\n+    *--p = x;\n+  } while (--c);\n+  return p;\n+}"}, {"sha": "9408461f1a7c04d639349d580f29dff48bb7f3a5", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-postinc-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-1.c?ref=ed6a1ff9879de13a0458ff31a3cb50db7a207881", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/50749: Verify that post-increment addressing is generated.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"fmov.s\\t@r\\[0-9]\\+\\\\+,fr\\[0-9]\\+\" 1 } } */\n+\n+float*\n+test_func_00 (float* p, float* x)\n+{\n+  float r = 0;\n+  r += *p++;\n+  *x = r;\n+  return p;\n+}\n+"}, {"sha": "b40becd33170cc38481cb27e6534e62a8055e55c", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-postinc-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-2.c?ref=ed6a1ff9879de13a0458ff31a3cb50db7a207881", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/50749: Verify that subsequent post-increment addressings\n+   are generated.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"fmov.s\\t@r\\[0-9]\\+\\\\+,fr\\[0-9]\\+\" 5 { xfail *-*-*} } } */\n+\n+float*\n+test_func_00 (float* p, float* x)\n+{\n+  float r = 0;\n+  r += *p++;\n+  r += *p++;\n+  *x = r;\n+  return p;\n+}\n+\n+float*\n+test_func_01 (float* p, float* x)\n+{\n+  float r = 0;\n+  r += *p++;\n+  r += *p++;\n+  r += *p++;\n+  *x = r;\n+  return p;\n+}"}, {"sha": "ebc965191261ac460774b38bf21a15e9e3a2a9fb", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-postinc-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-3.c?ref=ed6a1ff9879de13a0458ff31a3cb50db7a207881", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/50749: Verify that post-increment addressing is generated\n+   inside a loop.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"fmov.s\\t@r\\[0-9]\\+\\\\+,fr\\[0-9]\\+\" 1 } } */\n+\n+float\n+test_func_00 (float* p, int c)\n+{\n+  float r = 0;\n+  do\n+  {\n+    r += *p++;\n+  } while (--c);\n+  return r;\n+}"}, {"sha": "66d29f0a4407b14cff6604a74bdcb37a658060d5", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-postinc-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-4.c?ref=ed6a1ff9879de13a0458ff31a3cb50db7a207881", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/50749: Verify that post-increment addressing is generated\n+   inside a loop.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"fmov.s\\t@r\\[0-9]\\+\\\\+,fr\\[0-9]\\+\" 3 { xfail *-*-*} } } */\n+\n+float\n+test_func_00 (float* p, int c)\n+{\n+  float r = 0;\n+  do\n+  {\n+    r += *p++;\n+    r += *p++;\n+    r += *p++;\n+  } while (--c);\n+  return r;\n+}"}, {"sha": "bd4e2cb9fbb5b37f00cf3e6ecbe5a57c1e3dffd9", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-predec-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-1.c?ref=ed6a1ff9879de13a0458ff31a3cb50db7a207881", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/50749: Verify that pre-decrement addressing is generated.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"fmov.s\\tfr\\[0-9]\\+,@-r\\[0-9]\\+\" 1 } } */\n+\n+float*\n+test_func_00 (float* p, float c)\n+{\n+  *--p = c;\n+  return p;\n+}\n+"}, {"sha": "96d9a6c183e9b07794677c9f647dbf714dc9144f", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-predec-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-2.c?ref=ed6a1ff9879de13a0458ff31a3cb50db7a207881", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/50749: Verify that subsequent pre-decrement addressings\n+   are generated.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"fmov.s\\tfr\\[0-9]\\+,@-r\\[0-9]\\+\" 5 { xfail *-*-*} } } */\n+\n+float*\n+test_func_00 (float* p, float c)\n+{\n+  *--p = c;\n+  *--p = c;\n+  return p;\n+}\n+\n+float*\n+test_func_01 (float* p, float c)\n+{\n+  *--p = c;\n+  *--p = c;\n+  *--p = c;\n+  return p;\n+}"}, {"sha": "d1996a243148ace28db48bf52e9eea7b694d757d", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-predec-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-3.c?ref=ed6a1ff9879de13a0458ff31a3cb50db7a207881", "patch": "@@ -0,0 +1,16 @@\n+/* PR target/50749: Verify that pre-decrement addressing is generated\n+   inside a loop.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"fmov.s\\tfr\\[0-9]\\+,@-r\\[0-9]\\+\" 1 } } */\n+\n+float*\n+test_func_00 (float* p, int c, float x)\n+{\n+  do\n+  {\n+    *--p = x;\n+  } while (--c);\n+  return p;\n+}"}, {"sha": "6d7b90534dc1078f9292bd364739417ad9734145", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-predec-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6a1ff9879de13a0458ff31a3cb50db7a207881/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-4.c?ref=ed6a1ff9879de13a0458ff31a3cb50db7a207881", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/50749: Verify that pre-decrement addressing is generated\n+   inside a loop.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"fmov.s\\tfr\\[0-9]\\+,@-r\\[0-9]\\+\" 3 { xfail *-*-*} } } */\n+\n+float*\n+test_func_00 (float* p, int c, float x)\n+{\n+  do\n+  {\n+    *--p = x;\n+    *--p = x;\n+    *--p = x;\n+  } while (--c);\n+  return p;\n+}"}]}