{"sha": "216090cc0fb7dc4de5fa9176860c845d5646c6b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE2MDkwY2MwZmI3ZGM0ZGU1ZmE5MTc2ODYwYzg0NWQ1NjQ2YzZiNw==", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2019-02-05T22:11:04Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2019-02-05T22:11:04Z"}, "message": "libgccjit: introduce gcc_jit_context_add_driver_option\n\ngcc/jit/ChangeLog:\n2019-02-05  Andrea Corallo <andrea.corallo@arm.com>\n\n\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_11): New ABI tag.\n\t* docs/topics/contexts.rst (Additional driver options): New\n\tsection.\n\t* jit-playback.c (invoke_driver): Add call to append_driver_options.\n\t* jit-recording.c: Within namespace gcc::jit...\n\t(recording::context::~context): Free the optnames within\n\tm_driver_options.\n\t(recording::context::add_driver_option): New method.\n\t(recording::context::append_driver_options): New method.\n\t(recording::context::dump_reproducer_to_file): Add driver\n\toptions.\n\t* jit-recording.h: Within namespace gcc::jit...\n\t(recording::context::add_driver_option): New method.\n\t(recording::context::append_driver_options): New method.\n\t(recording::context::m_driver_options): New field.\n\t* libgccjit++.h (gccjit::context::add_driver_option): New\n\tmethod.\n\t* libgccjit.c (gcc_jit_context_add_driver_option): New API\n\tentrypoint.\n\t* libgccjit.h (gcc_jit_context_add_driver_option): New API\n\tentrypoint.\n\t(LIBGCCJIT_HAVE_gcc_jit_context_add_driver_option): New\n\tmacro.\n\t* libgccjit.map (LIBGCCJIT_ABI_11): New ABI tag.\n\ngcc/testsuite/ChangeLog:\n2019-02-05  Andrea Corallo <andrea.corallo@arm.com>\n\n\t* jit.dg/add-driver-options-testlib.c: Add support file for\n\ttest-add-driver-options.c testcase.\n\t* jit.dg/all-non-failing-tests.h: Add note about\n\ttest-add-driver-options.c\n\t* jit.dg/jit.exp (jit-dg-test): Update to support\n\tadd-driver-options-testlib.c compilation.\n\t* jit.dg/test-add-driver-options.c: New testcase.\n\nFrom-SVN: r268563", "tree": {"sha": "d96fc32551e87c9cf55bc83adb77634a87c64af6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d96fc32551e87c9cf55bc83adb77634a87c64af6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/216090cc0fb7dc4de5fa9176860c845d5646c6b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/216090cc0fb7dc4de5fa9176860c845d5646c6b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/216090cc0fb7dc4de5fa9176860c845d5646c6b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/216090cc0fb7dc4de5fa9176860c845d5646c6b7/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6fc4ecbc55bbf1995513102bba88a934b51a146b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fc4ecbc55bbf1995513102bba88a934b51a146b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fc4ecbc55bbf1995513102bba88a934b51a146b"}], "stats": {"total": 270, "additions": 269, "deletions": 1}, "files": [{"sha": "c57c99a1a4f4a5925e97a8e484039d737a690cd5", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=216090cc0fb7dc4de5fa9176860c845d5646c6b7", "patch": "@@ -1,3 +1,30 @@\n+2019-02-05  Andrea Corallo <andrea.corallo@arm.com>\n+\n+\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_11): New ABI tag.\n+\t* docs/topics/contexts.rst (Additional driver options): New\n+\tsection.\n+\t* jit-playback.c (invoke_driver): Add call to append_driver_options.\n+\t* jit-recording.c: Within namespace gcc::jit...\n+\t(recording::context::~context): Free the optnames within\n+\tm_driver_options.\n+\t(recording::context::add_driver_option): New method.\n+\t(recording::context::append_driver_options): New method.\n+\t(recording::context::dump_reproducer_to_file): Add driver\n+\toptions.\n+\t* jit-recording.h: Within namespace gcc::jit...\n+\t(recording::context::add_driver_option): New method.\n+\t(recording::context::append_driver_options): New method.\n+\t(recording::context::m_driver_options): New field.\n+\t* libgccjit++.h (gccjit::context::add_driver_option): New\n+\tmethod.\n+\t* libgccjit.c (gcc_jit_context_add_driver_option): New API\n+\tentrypoint.\n+\t* libgccjit.h (gcc_jit_context_add_driver_option): New API\n+\tentrypoint.\n+\t(LIBGCCJIT_HAVE_gcc_jit_context_add_driver_option): New\n+\tmacro.\n+\t* libgccjit.map (LIBGCCJIT_ABI_11): New ABI tag.\n+\n 2019-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "abefa56f37d032b814d814c75ee228ca576a364c", "filename": "gcc/jit/docs/topics/compatibility.rst", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst?ref=216090cc0fb7dc4de5fa9176860c845d5646c6b7", "patch": "@@ -168,6 +168,12 @@ entrypoints:\n \n ``LIBGCCJIT_ABI_10``\n --------------------\n-\n ``LIBGCCJIT_ABI_10`` covers the addition of\n :func:`gcc_jit_context_new_rvalue_from_vector`\n+\n+.. _LIBGCCJIT_ABI_11:\n+\n+``LIBGCCJIT_ABI_11``\n+--------------------\n+``LIBGCCJIT_ABI_11`` covers the addition of\n+:func:`gcc_jit_context_add_driver_option`"}, {"sha": "2f8aeb7acdc733e976805cc067d88b663c0883e0", "filename": "gcc/jit/docs/topics/contexts.rst", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst?ref=216090cc0fb7dc4de5fa9176860c845d5646c6b7", "patch": "@@ -546,3 +546,36 @@ Additional command-line options\n    .. code-block:: c\n \n       #ifdef LIBGCCJIT_HAVE_gcc_jit_context_add_command_line_option\n+\n+.. function:: void gcc_jit_context_add_driver_option (gcc_jit_context *ctxt,\\\n+\t\t\t\t\t\t      const char *optname)\n+\n+   Add an arbitrary gcc driver option to the context, for use by\n+   :func:`gcc_jit_context_compile` and\n+   :func:`gcc_jit_context_compile_to_file`.\n+\n+   The parameter ``optname`` must be non-NULL.  The underlying buffer is\n+   copied, so that it does not need to outlive the call.\n+\n+   Extra options added by `gcc_jit_context_add_driver_option` are\n+   applied *after* all other options potentially overriding them.\n+   Options from parent contexts are inherited by child contexts; options\n+   from the parent are applied *before* those from the child.\n+\n+   For example:\n+\n+   .. code-block:: c\n+\n+      gcc_jit_context_add_driver_option (ctxt, \"-lm\");\n+      gcc_jit_context_add_driver_option (ctxt, \"-fuse-linker-plugin\");\n+\n+   Note that only some options are likely to be meaningful; there is no\n+   \"frontend\" within libgccjit, so typically only those affecting\n+   assembler and linker are likely to be useful.\n+\n+   This entrypoint was added in :ref:`LIBGCCJIT_ABI_11`; you can test for\n+   its presence using\n+\n+   .. code-block:: c\n+\n+      #ifdef LIBGCCJIT_HAVE_gcc_jit_context_add_driver_option"}, {"sha": "b74495c58b2cca694a54b3d13bd4df3c40156cd0", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=216090cc0fb7dc4de5fa9176860c845d5646c6b7", "patch": "@@ -2459,6 +2459,10 @@ invoke_driver (const char *ctxt_progname,\n   if (0)\n     ADD_ARG (\"-v\");\n \n+  /* Add any user-provided driver extra options.  */\n+\n+  m_recording_ctxt->append_driver_options (&argvec);\n+\n #undef ADD_ARG\n \n   /* pex_one's error-handling requires pname to be non-NULL.  */"}, {"sha": "8ffd0d452b2d89ebb1236370de900415eb805fe3", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=216090cc0fb7dc4de5fa9176860c845d5646c6b7", "patch": "@@ -616,6 +616,8 @@ recording::context::~context ()\n   char *optname;\n   FOR_EACH_VEC_ELT (m_command_line_options, i, optname)\n     free (optname);\n+  FOR_EACH_VEC_ELT (m_driver_options, i, optname)\n+    free (optname);\n \n   if (m_builtins_manager)\n     delete m_builtins_manager;\n@@ -1307,6 +1309,31 @@ recording::context::append_command_line_options (vec <char *> *argvec)\n     argvec->safe_push (xstrdup (optname));\n }\n \n+/* Add the given optname to this context's list of extra driver options.  */\n+\n+void\n+recording::context::add_driver_option (const char *optname)\n+{\n+  m_driver_options.safe_push (xstrdup (optname));\n+}\n+\n+/* Add any user-provided driver options, starting with any from\n+   parent contexts.\n+   Called by playback::context::invoke_driver.  */\n+\n+void\n+recording::context::append_driver_options (auto_string_vec *argvec)\n+{\n+  if (m_parent_ctxt)\n+    m_parent_ctxt->append_driver_options (argvec);\n+\n+  int i;\n+  char *optname;\n+\n+  FOR_EACH_VEC_ELT (m_driver_options, i, optname)\n+    argvec->safe_push (xstrdup (optname));\n+}\n+\n /* Add the given dumpname/out_ptr pair to this context's list of requested\n    dumps.\n \n@@ -1799,6 +1826,17 @@ recording::context::dump_reproducer_to_file (const char *path)\n \t\t     optname);\n \t}\n \n+      if (!m_driver_options.is_empty ())\n+\t{\n+\t  int i;\n+\t  char *optname;\n+\t  r.write (\"  /* User-provided driver options.  */\\n\");\n+\t  FOR_EACH_VEC_ELT (m_driver_options, i, optname)\n+\t    r.write (\"  gcc_jit_context_add_driver_option (%s, \\\"%s\\\");\\n\",\n+\t\t     r.get_identifier (contexts[ctxt_idx]),\n+\t\t     optname);\n+\t}\n+\n       if (m_requested_dumps.length ())\n \t{\n \t  r.write (\"  /* Requested dumps.  */\\n\");"}, {"sha": "b9f2250802fb3eea5d2532594ec69ad1f9ba7e14", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=216090cc0fb7dc4de5fa9176860c845d5646c6b7", "patch": "@@ -217,6 +217,12 @@ class context : public log_user\n   void\n   append_command_line_options (vec <char *> *argvec);\n \n+  void\n+  add_driver_option (const char *optname);\n+\n+  void\n+  append_driver_options (auto_string_vec *argvec);\n+\n   void\n   enable_dump (const char *dumpname,\n \t       char **out_ptr);\n@@ -317,6 +323,7 @@ class context : public log_user\n   bool m_bool_options[GCC_JIT_NUM_BOOL_OPTIONS];\n   bool m_inner_bool_options[NUM_INNER_BOOL_OPTIONS];\n   auto_vec <char *> m_command_line_options;\n+  auto_vec <char *> m_driver_options;\n \n   /* Dumpfiles that were requested via gcc_jit_context_enable_dump.  */\n   auto_vec<requested_dump> m_requested_dumps;"}, {"sha": "55aebcac4f54017f4d20ec789014714a67f665bb", "filename": "gcc/jit/libgccjit++.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Flibgccjit%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Flibgccjit%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit%2B%2B.h?ref=216090cc0fb7dc4de5fa9176860c845d5646c6b7", "patch": "@@ -127,6 +127,7 @@ namespace gccjit\n     void set_bool_use_external_driver (int bool_value);\n \n     void add_command_line_option (const char *optname);\n+    void add_driver_option (const char *optname);\n \n     void set_timer (gccjit::timer t);\n     gccjit::timer get_timer () const;\n@@ -686,6 +687,12 @@ context::add_command_line_option (const char *optname)\n   gcc_jit_context_add_command_line_option (m_inner_ctxt, optname);\n }\n \n+inline void\n+context::add_driver_option (const char *optname)\n+{\n+  gcc_jit_context_add_driver_option (m_inner_ctxt, optname);\n+}\n+\n inline void\n context::set_timer (gccjit::timer t)\n {"}, {"sha": "e4f17f8b35082bcb203c49d4ac0686924c2b4aa5", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=216090cc0fb7dc4de5fa9176860c845d5646c6b7", "patch": "@@ -2642,6 +2642,25 @@ gcc_jit_context_add_command_line_option (gcc_jit_context *ctxt,\n   ctxt->add_command_line_option (optname);\n }\n \n+/* Public entrypoint.  See description in libgccjit.h.\n+\n+   The real work is done by the\n+   gcc::jit::recording::context::add_driver_option method in\n+   jit-recording.c.  */\n+\n+void\n+gcc_jit_context_add_driver_option (gcc_jit_context *ctxt,\n+\t\t\t\t   const char *optname)\n+{\n+  RETURN_IF_FAIL (ctxt, NULL, NULL, \"NULL context\");\n+  JIT_LOG_FUNC (ctxt->get_logger ());\n+  RETURN_IF_FAIL (optname, ctxt, NULL, \"NULL optname\");\n+  if (ctxt->get_logger ())\n+    ctxt->get_logger ()->log (\"optname: %s\", optname);\n+\n+  ctxt->add_driver_option (optname);\n+}\n+\n /* Public entrypoint.  See description in libgccjit.h.\n \n    After error-checking, the real work is done by the"}, {"sha": "beeb747ca8fc210d2347bc28f0338d37b59103d7", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=216090cc0fb7dc4de5fa9176860c845d5646c6b7", "patch": "@@ -325,6 +325,28 @@ gcc_jit_context_add_command_line_option (gcc_jit_context *ctxt,\n \n #define LIBGCCJIT_HAVE_gcc_jit_context_add_command_line_option\n \n+/* Add an arbitrary gcc driver option to the context.\n+   The context takes a copy of the string, so the\n+   (const char *) optname is not needed anymore after the call\n+   returns.\n+\n+   Note that only some options are likely to be meaningful; there is no\n+   \"frontend\" within libgccjit, so typically only those affecting\n+   assembler and linker are likely to be useful.\n+\n+   This entrypoint was added in LIBGCCJIT_ABI_11; you can test for\n+   its presence using\n+   #ifdef LIBGCCJIT_HAVE_gcc_jit_context_add_driver_option\n+*/\n+extern void\n+gcc_jit_context_add_driver_option (gcc_jit_context *ctxt,\n+\t\t\t\t   const char *optname);\n+\n+/* Pre-canned feature-test macro for detecting the presence of\n+   gcc_jit_context_add_driver_option within libgccjit.h.  */\n+\n+#define LIBGCCJIT_HAVE_gcc_jit_context_add_driver_option\n+\n /* Compile the context to in-memory machine code.\n \n    This can be called more that once on a given context,"}, {"sha": "16f5253ab23f4a35c7b2ae3742714ffd2aa7586b", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=216090cc0fb7dc4de5fa9176860c845d5646c6b7", "patch": "@@ -170,3 +170,8 @@ LIBGCCJIT_ABI_10 {\n   global:\n     gcc_jit_context_new_rvalue_from_vector;\n } LIBGCCJIT_ABI_9;\n+\n+LIBGCCJIT_ABI_11 {\n+  global:\n+    gcc_jit_context_add_driver_option;\n+} LIBGCCJIT_ABI_10;\n\\ No newline at end of file"}, {"sha": "616741669fa4ad38a47b0af113fb31d5b3a0845f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=216090cc0fb7dc4de5fa9176860c845d5646c6b7", "patch": "@@ -1,3 +1,13 @@\n+2019-02-05  Andrea Corallo <andrea.corallo@arm.com>\n+\n+\t* jit.dg/add-driver-options-testlib.c: Add support file for\n+\ttest-add-driver-options.c testcase.\n+\t* jit.dg/all-non-failing-tests.h: Add note about\n+\ttest-add-driver-options.c\n+\t* jit.dg/jit.exp (jit-dg-test): Update to support\n+\tadd-driver-options-testlib.c compilation.\n+\t* jit.dg/test-add-driver-options.c: New testcase.\n+\n 2019-02-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/11304"}, {"sha": "1757bb130ba368498e8d417c06a4bd5f7f2f7b8d", "filename": "gcc/testsuite/jit.dg/add-driver-options-testlib.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Ftestsuite%2Fjit.dg%2Fadd-driver-options-testlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Ftestsuite%2Fjit.dg%2Fadd-driver-options-testlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fadd-driver-options-testlib.c?ref=216090cc0fb7dc4de5fa9176860c845d5646c6b7", "patch": "@@ -0,0 +1,6 @@\n+/* Used by test-add-driver-options.c */\n+\n+extern int callee_function (void)\n+{\n+  return 1978;\n+}"}, {"sha": "9a10418b308cf7aa9944b697d74ea50c52dfc56e", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=216090cc0fb7dc4de5fa9176860c845d5646c6b7", "patch": "@@ -22,6 +22,9 @@\n #undef create_code\n #undef verify_code\n \n+/* test-add-driver-options.c: We don't use this one, since the extra options\n+   affect the whole context.  */\n+\n /* test-alignment.c */\n #define create_code create_code_alignment\n #define verify_code verify_code_alignment"}, {"sha": "13e8ab4dbfe7f657f5bf90c1c8c36ea5c006a365", "filename": "gcc/testsuite/jit.dg/jit.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp?ref=216090cc0fb7dc4de5fa9176860c845d5646c6b7", "patch": "@@ -379,6 +379,19 @@ proc jit-dg-test { prog do_what extra_tool_flags } {\n \tappend extra_tool_flags \" -lpthread\"\n     }\n \n+    # test-add-driver-options.c needs a shared library built from\n+    # add-driver-options-testlib.c\n+    if {[string match \"*test-add-driver-options.c\" $prog]} {\n+\tglobal srcdir\n+\tglobal subdir\n+\n+\tset comp_output [gcc_target_compile \\\n+\t\t\t     $srcdir/$subdir/add-driver-options-testlib.c \\\n+\t\t\t     \"libadd-driver-options-testlib.so\" \\\n+\t\t\t     \"executable\" \\\n+\t\t\t     \"additional_flags=-fPIC additional_flags=-shared\"]\n+    }\n+\n     # Any test case that uses jit-verify-output-file-was-created\n     # needs to call jit-setup-compile-to-file here.\n     # (is there a better way to handle setup/finish pairs in dg?)"}, {"sha": "74ac168d24d1584d1a0d12433492cff89300d773", "filename": "gcc/testsuite/jit.dg/test-add-driver-options.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Ftestsuite%2Fjit.dg%2Ftest-add-driver-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216090cc0fb7dc4de5fa9176860c845d5646c6b7/gcc%2Ftestsuite%2Fjit.dg%2Ftest-add-driver-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-add-driver-options.c?ref=216090cc0fb7dc4de5fa9176860c845d5646c6b7", "patch": "@@ -0,0 +1,68 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"libgccjit.h\"\n+#include \"harness.h\"\n+\n+#ifndef LIBGCCJIT_HAVE_gcc_jit_context_add_driver_option\n+#error LIBGCCJIT_HAVE_gcc_jit_context_add_driver_option was not defined\n+#endif\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+\n+  gcc_jit_context_add_driver_option (ctxt, \"-L./\");\n+  gcc_jit_context_add_driver_option (ctxt, \"-ladd-driver-options-testlib\");\n+\n+  /* Let's try to inject the equivalent of:\n+\n+      int caller_function (void)\n+      {\n+        return callee_function ();\n+      }\n+  */\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+\n+  gcc_jit_function *caller_func =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+                                  GCC_JIT_FUNCTION_EXPORTED,\n+                                  int_type,\n+                                  \"caller_function\",\n+                                  0, NULL,\n+                                  0);\n+\n+  gcc_jit_block *block =\n+    gcc_jit_function_new_block (caller_func, NULL);\n+\n+  gcc_jit_function *callee_func =\n+    gcc_jit_context_new_function(ctxt, NULL,\n+\t\t\t\t GCC_JIT_FUNCTION_IMPORTED,\n+\t\t\t\t int_type,\n+\t\t\t\t \"callee_function\",\n+\t\t\t\t 0, NULL,\n+\t\t\t\t 1);\n+\n+  gcc_jit_block_end_with_return (block, NULL,\n+\t\t\t\t gcc_jit_context_new_call(ctxt,\n+\t\t\t\t\t\t\t  NULL,\n+\t\t\t\t\t\t\t  callee_func,\n+\t\t\t\t\t\t\t  0,\n+\t\t\t\t\t\t\t  0));\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  typedef int (*my_caller_fn_type) (void);\n+\n+  CHECK_NON_NULL (result);\n+  my_caller_fn_type callee_function_ptr =\n+    (my_caller_fn_type)gcc_jit_result_get_code (result, \"callee_function\");\n+  CHECK_NON_NULL (callee_function_ptr);\n+\n+  int res = callee_function_ptr ();\n+\n+  CHECK_VALUE (res, 1978);\n+}"}]}