{"sha": "c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "node_id": "C_kwDOANBUbNoAKGM2NWQzYzdmOWRhZGUxODgyNmQxYTI4ZDcxYjk4YzdjZGMzZTQzMDA", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-03-10T14:09:40Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-03-10T14:09:40Z"}, "message": "analyzer: add notes to write-to-const/string from access attr [PR104793]\n\nThe previous patch extended\n  -Wanalyzer-write-to-const\n  -Wanalyzer-write-to-string-literal\nto make use of __attribute__ ((access, ....), but the results could be\ninscrutable.\n\nThis patch adds notes to such diagnostics to give the user a reason for\nwhy the analyzer is complaining.\n\nExample output:\n\ntest.c: In function 'main':\ntest.c:15:13: warning: write to string literal [-Wanalyzer-write-to-string-literal]\n   15 |         if (getrandom((char *)test, sizeof(buf), GRND_RANDOM))\n      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  'main': event 1\n    |\n    |   15 |         if (getrandom((char *)test, sizeof(buf), GRND_RANDOM))\n    |      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    |      |             |\n    |      |             (1) write to string literal here\n    |\ntest.c:3:5: note: parameter 1 of 'getrandom' marked with attribute 'access (write_only, 1, 2)'\n    3 | int getrandom (void *__buffer, size_t __length,\n      |     ^~~~~~~~~\n\nUnfortunately we don't have location information for the attributes\nthemselves, just the function declaration, and there doesn't seem to be\na good way of getting at the location of the individual parameters from\nthe middle end (the C and C++ FEs both have get_fndecl_argument_location,\nbut the implementations are different).\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/104793\n\t* analyzer.h (class pending_note): New forward decl.\n\t* diagnostic-manager.cc (saved_diagnostic::saved_diagnostic):\n\tInitialize m_notes.\n\t(saved_diagnostic::operator==): Compare m_notes.\n\t(saved_diagnostic::add_note): New.\n\t(saved_diagnostic::emit_any_notes): New.\n\t(diagnostic_manager::add_note): New.\n\t(diagnostic_manager::emit_saved_diagnostic): Call emit_any_notes\n\tafter emitting the warning.\n\t* diagnostic-manager.h (saved_diagnostic::add_note): New decl.\n\t(saved_diagnostic::emit_any_notes): New decl.\n\t(saved_diagnostic::m_notes): New field.\n\t(diagnostic_manager::add_note): New decl.\n\t* engine.cc (impl_region_model_context::add_note): New.\n\t* exploded-graph.h (impl_region_model_context::add_note): New\n\tdecl.\n\t* pending-diagnostic.h (class pending_note): New.\n\t(class pending_note_subclass): New template.\n\t* region-model.cc (class reason_attr_access): New.\n\t(check_external_function_for_access_attr): Add class\n\tannotating_ctxt and use it when checking region.\n\t(noop_region_model_context::add_note): New.\n\t* region-model.h (region_model_context::add_note): New vfunc.\n\t(noop_region_model_context::add_note): New decl.\n\t(class region_model_context_decorator): New.\n\t(class note_adding_context): New.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/104793\n\t* gcc.dg/analyzer/write-to-const-2.c: Add dg-message directives\n\tfor expected notes.\n\t* gcc.dg/analyzer/write-to-function-1.c: Likewise.\n\t* gcc.dg/analyzer/write-to-string-literal-2.c: Likewise.\n\t* gcc.dg/analyzer/write-to-string-literal-3.c: Likewise.\n\t* gcc.dg/analyzer/write-to-string-literal-4.c: Likewise.\n\t* gcc.dg/analyzer/write-to-string-literal-5.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "de9791b5c6f3de21db9842e3e5f3a0010693068e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de9791b5c6f3de21db9842e3e5f3a0010693068e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6eaf90c64f91553c8002f6ee401785a8bc6f94c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6eaf90c64f91553c8002f6ee401785a8bc6f94c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6eaf90c64f91553c8002f6ee401785a8bc6f94c"}], "stats": {"total": 377, "additions": 362, "deletions": 15}, "files": [{"sha": "223ab7075f3700487bfaa0af603d0786160e638e", "filename": "gcc/analyzer/analyzer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Fanalyzer%2Fanalyzer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Fanalyzer%2Fanalyzer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.h?ref=c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "patch": "@@ -85,6 +85,7 @@ class bounded_ranges;\n class bounded_ranges_manager;\n \n class pending_diagnostic;\n+class pending_note;\n class state_change_event;\n class checker_path;\n class extrinsic_state;"}, {"sha": "561bb18cee0aa88131551471526f644cd71dcca9", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "patch": "@@ -629,7 +629,8 @@ saved_diagnostic::saved_diagnostic (const state_machine *sm,\n   m_var (var), m_sval (sval), m_state (state),\n   m_d (d), m_trailing_eedge (NULL),\n   m_idx (idx),\n-  m_best_epath (NULL), m_problem (NULL)\n+  m_best_epath (NULL), m_problem (NULL),\n+  m_notes ()\n {\n   gcc_assert (m_stmt || m_stmt_finder);\n \n@@ -651,6 +652,11 @@ saved_diagnostic::~saved_diagnostic ()\n bool\n saved_diagnostic::operator== (const saved_diagnostic &other) const\n {\n+  if (m_notes.length () != other.m_notes.length ())\n+    return false;\n+  for (unsigned i = 0; i < m_notes.length (); i++)\n+    if (!m_notes[i]->equal_p (*other.m_notes[i]))\n+      return false;\n   return (m_sm == other.m_sm\n \t  /* We don't compare m_enode.  */\n \t  && m_snode == other.m_snode\n@@ -662,6 +668,15 @@ saved_diagnostic::operator== (const saved_diagnostic &other) const\n \t  && m_trailing_eedge == other.m_trailing_eedge);\n }\n \n+/* Add PN to this diagnostic, taking ownership of it.  */\n+\n+void\n+saved_diagnostic::add_note (pending_note *pn)\n+{\n+  gcc_assert (pn);\n+  m_notes.safe_push (pn);\n+}\n+\n /* Return a new json::object of the form\n    {\"sm\": optional str,\n     \"enode\": int,\n@@ -697,6 +712,7 @@ saved_diagnostic::to_json () const\n      exploded_edge *m_trailing_eedge;\n      enum status m_status;\n      feasibility_problem *m_problem;\n+     auto_delete_vec <pending_note> m_notes;\n   */\n \n   return sd_obj;\n@@ -769,6 +785,15 @@ saved_diagnostic::supercedes_p (const saved_diagnostic &other) const\n   return m_d->supercedes_p (*other.m_d);\n }\n \n+/* Emit any pending notes owned by this diagnostic.  */\n+\n+void\n+saved_diagnostic::emit_any_notes () const\n+{\n+  for (auto pn : m_notes)\n+    pn->emit ();\n+}\n+\n /* State for building a checker_path from a particular exploded_path.\n    In particular, this precomputes reachability information: the set of\n    source enodes for which a path be found to the diagnostic enode.  */\n@@ -875,6 +900,20 @@ diagnostic_manager::add_diagnostic (exploded_node *enode,\n   add_diagnostic (NULL, enode, snode, stmt, finder, NULL_TREE, NULL, 0, d);\n }\n \n+/* Add PN to the most recent saved_diagnostic.  */\n+\n+void\n+diagnostic_manager::add_note (pending_note *pn)\n+{\n+  LOG_FUNC (get_logger ());\n+  gcc_assert (pn);\n+\n+  /* Get most recent saved_diagnostic.  */\n+  gcc_assert (m_saved_diagnostics.length () > 0);\n+  saved_diagnostic *sd = m_saved_diagnostics[m_saved_diagnostics.length () - 1];\n+  sd->add_note (pn);\n+}\n+\n /* Return a new json::object of the form\n    {\"diagnostics\"  : [obj for saved_diagnostic]}.  */\n \n@@ -1240,6 +1279,8 @@ diagnostic_manager::emit_saved_diagnostic (const exploded_graph &eg,\n   auto_cfun sentinel (sd.m_snode->m_fun);\n   if (sd.m_d->emit (&rich_loc))\n     {\n+      sd.emit_any_notes ();\n+\n       unsigned num_dupes = sd.get_num_dupes ();\n       if (flag_analyzer_show_duplicate_count && num_dupes > 0)\n \tinform_n (loc, num_dupes,"}, {"sha": "e9a568fd7689cd091e09ea6c3985129e0d867c0c", "filename": "gcc/analyzer/diagnostic-manager.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Fanalyzer%2Fdiagnostic-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Fanalyzer%2Fdiagnostic-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.h?ref=c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "patch": "@@ -42,6 +42,8 @@ class saved_diagnostic\n \n   bool operator== (const saved_diagnostic &other) const;\n \n+  void add_note (pending_note *pn);\n+\n   json::object *to_json () const;\n \n   const feasibility_problem *get_feasibility_problem () const\n@@ -60,6 +62,8 @@ class saved_diagnostic\n \n   bool supercedes_p (const saved_diagnostic &other) const;\n \n+  void emit_any_notes () const;\n+\n   //private:\n   const state_machine *m_sm;\n   const exploded_node *m_enode;\n@@ -80,6 +84,7 @@ class saved_diagnostic\n   feasibility_problem *m_problem; // owned\n \n   auto_vec<const saved_diagnostic *> m_duplicates;\n+  auto_delete_vec <pending_note> m_notes;\n };\n \n class path_builder;\n@@ -116,6 +121,8 @@ class diagnostic_manager : public log_user\n \t\t       stmt_finder *finder,\n \t\t       pending_diagnostic *d);\n \n+  void add_note (pending_note *pn);\n+\n   void emit_saved_diagnostics (const exploded_graph &eg);\n \n   void emit_saved_diagnostic (const exploded_graph &eg,"}, {"sha": "92dadea7cb620b537417ec4492e1b96dd72509bc", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "patch": "@@ -142,6 +142,16 @@ impl_region_model_context::warn (pending_diagnostic *d)\n     }\n }\n \n+void\n+impl_region_model_context::add_note (pending_note *pn)\n+{\n+  LOG_FUNC (get_logger ());\n+  if (m_eg)\n+    m_eg->get_diagnostic_manager ().add_note (pn);\n+  else\n+    delete pn;\n+}\n+\n void\n impl_region_model_context::on_svalue_leak (const svalue *sval)\n "}, {"sha": "af0ab8d42c82182fe94017cea33f4f5ab03193ec", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "patch": "@@ -48,6 +48,7 @@ class impl_region_model_context : public region_model_context\n \t\t\t     logger *logger = NULL);\n \n   bool warn (pending_diagnostic *d) FINAL OVERRIDE;\n+  void add_note (pending_note *pn) FINAL OVERRIDE;\n   void on_svalue_leak (const svalue *) OVERRIDE;\n   void on_liveness_change (const svalue_set &live_svalues,\n \t\t\t   const region_model *model) FINAL OVERRIDE;"}, {"sha": "0a438fddb26a6c9e66c7bd3e22307c83fd4f51ce", "filename": "gcc/analyzer/pending-diagnostic.h", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Fanalyzer%2Fpending-diagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Fanalyzer%2Fpending-diagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fpending-diagnostic.h?ref=c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "patch": "@@ -329,6 +329,49 @@ class pending_diagnostic_subclass : public pending_diagnostic\n   }\n };\n \n+/* An abstract base class for capturing additional notes that are to be\n+   emitted with a diagnostic.  */\n+\n+class pending_note\n+{\n+public:\n+  virtual ~pending_note () {}\n+\n+  /* Hand-coded RTTI: get an ID for the subclass.  */\n+  virtual const char *get_kind () const = 0;\n+\n+  /* Vfunc for emitting the note.  */\n+  virtual void emit () const = 0;\n+\n+  bool equal_p (const pending_note &other) const\n+  {\n+    /* Check for pointer equality on the IDs from get_kind.  */\n+    if (get_kind () != other.get_kind ())\n+      return false;\n+    /* Call vfunc now we know they have the same ID: */\n+    return subclass_equal_p (other);\n+  }\n+\n+  /* A vfunc for testing for equality, where we've already\n+     checked they have the same ID.  See pending_note_subclass\n+     below for a convenience subclass for implementing this.  */\n+  virtual bool subclass_equal_p (const pending_note &other) const = 0;\n+};\n+\n+/* Analogous to pending_diagnostic_subclass, but for pending_note.  */\n+\n+template <class Subclass>\n+class pending_note_subclass : public pending_note\n+{\n+ public:\n+  bool subclass_equal_p (const pending_note &base_other) const\n+    FINAL OVERRIDE\n+  {\n+    const Subclass &other = (const Subclass &)base_other;\n+    return *(const Subclass*)this == other;\n+  }\n+};\n+\n } // namespace ana\n \n #endif /* GCC_ANALYZER_PENDING_DIAGNOSTIC_H */"}, {"sha": "6406627db90f81fd68b99acaa49e88f8e6229853", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 70, "deletions": 3, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "patch": "@@ -1583,6 +1583,41 @@ region_model::purge_state_involving (const svalue *sval,\n     ctxt->purge_state_involving (sval);\n }\n \n+/* A pending_note subclass for adding a note about an\n+   __attribute__((access, ...)) to a diagnostic.  */\n+\n+class reason_attr_access : public pending_note_subclass<reason_attr_access>\n+{\n+public:\n+  reason_attr_access (tree callee_fndecl, const attr_access &access)\n+  : m_callee_fndecl (callee_fndecl),\n+    m_ptr_argno (access.ptrarg),\n+    m_access_str (TREE_STRING_POINTER (access.to_external_string ()))\n+  {\n+  }\n+\n+  const char *get_kind () const FINAL OVERRIDE { return \"reason_attr_access\"; }\n+\n+  void emit () const\n+  {\n+    inform (DECL_SOURCE_LOCATION (m_callee_fndecl),\n+\t    \"parameter %i of %qD marked with attribute %qs\",\n+\t    m_ptr_argno + 1, m_callee_fndecl, m_access_str);\n+  }\n+\n+  bool operator== (const reason_attr_access &other) const\n+  {\n+    return (m_callee_fndecl == other.m_callee_fndecl\n+\t    && m_ptr_argno == other.m_ptr_argno\n+\t    && !strcmp (m_access_str, other.m_access_str));\n+  }\n+\n+private:\n+  tree m_callee_fndecl;\n+  unsigned m_ptr_argno;\n+  const char *m_access_str;\n+};\n+\n /* Check CALL a call to external function CALLEE_FNDECL based on\n    any __attribute__ ((access, ....) on the latter, complaining to\n    CTXT about any issues.\n@@ -1629,10 +1664,36 @@ check_external_function_for_access_attr (const gcall *call,\n       if (access->mode == access_write_only\n \t  || access->mode == access_read_write)\n \t{\n+\t  /* Subclass of decorated_region_model_context that\n+\t     adds a note about the attr access to any saved diagnostics.  */\n+\t  class annotating_ctxt : public note_adding_context\n+\t  {\n+\t  public:\n+\t    annotating_ctxt (tree callee_fndecl,\n+\t\t\t     const attr_access &access,\n+\t\t\t     region_model_context *ctxt)\n+\t    : note_adding_context (ctxt),\n+\t      m_callee_fndecl (callee_fndecl),\n+\t      m_access (access)\n+\t    {\n+\t    }\n+\t    pending_note *make_note () FINAL OVERRIDE\n+\t    {\n+\t      return new reason_attr_access (m_callee_fndecl, m_access);\n+\t    }\n+\t  private:\n+\t    tree m_callee_fndecl;\n+\t    const attr_access &m_access;\n+\t  };\n+\n+\t  /* Use this ctxt below so that any diagnostics get the\n+\t     note added to them.  */\n+\t  annotating_ctxt my_ctxt (callee_fndecl, *access, ctxt);\n+\n \t  tree ptr_tree = gimple_call_arg (call, access->ptrarg);\n-\t  const svalue *ptr_sval = get_rvalue (ptr_tree, ctxt);\n-\t  const region *reg = deref_rvalue (ptr_sval, ptr_tree, ctxt);\n-\t  check_region_for_write (reg, ctxt);\n+\t  const svalue *ptr_sval = get_rvalue (ptr_tree, &my_ctxt);\n+\t  const region *reg = deref_rvalue (ptr_sval, ptr_tree, &my_ctxt);\n+\t  check_region_for_write (reg, &my_ctxt);\n \t  /* We don't use the size arg for now.  */\n \t}\n     }\n@@ -4148,6 +4209,12 @@ region_model::unset_dynamic_extents (const region *reg)\n \n /* class noop_region_model_context : public region_model_context.  */\n \n+void\n+noop_region_model_context::add_note (pending_note *pn)\n+{\n+  delete pn;\n+}\n+\n void\n noop_region_model_context::bifurcate (custom_edge_info *info)\n {"}, {"sha": "4ee8a765e72f9aa8e8231091f5bbae1d309a3754", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "patch": "@@ -881,6 +881,10 @@ class region_model_context\n      Return true if the diagnostic was stored, or false if it was deleted.  */\n   virtual bool warn (pending_diagnostic *d) = 0;\n \n+  /* Hook for clients to add a note to the last previously stored pending diagnostic.\n+     Takes ownership of the pending_node (or deletes it).  */\n+  virtual void add_note (pending_note *pn) = 0;\n+\n   /* Hook for clients to be notified when an SVAL that was reachable\n      in a previous state is no longer live, so that clients can emit warnings\n      about leaks.  */\n@@ -954,6 +958,7 @@ class noop_region_model_context : public region_model_context\n {\n public:\n   bool warn (pending_diagnostic *) OVERRIDE { return false; }\n+  void add_note (pending_note *pn) OVERRIDE;\n   void on_svalue_leak (const svalue *) OVERRIDE {}\n   void on_liveness_change (const svalue_set &,\n \t\t\t   const region_model *) OVERRIDE {}\n@@ -1020,6 +1025,147 @@ class tentative_region_model_context : public noop_region_model_context\n   int m_num_unexpected_codes;\n };\n \n+/* Subclass of region_model_context that wraps another context, allowing\n+   for extra code to be added to the various hooks.  */\n+\n+class region_model_context_decorator : public region_model_context\n+{\n+ public:\n+  bool warn (pending_diagnostic *d) OVERRIDE\n+  {\n+    return m_inner->warn (d);\n+  }\n+\n+  void add_note (pending_note *pn) OVERRIDE\n+  {\n+    m_inner->add_note (pn);\n+  }\n+\n+  void on_svalue_leak (const svalue *sval) OVERRIDE\n+  {\n+    m_inner->on_svalue_leak (sval);\n+  }\n+\n+  void on_liveness_change (const svalue_set &live_svalues,\n+\t\t\t   const region_model *model) OVERRIDE\n+  {\n+    m_inner->on_liveness_change (live_svalues, model);\n+  }\n+\n+  logger *get_logger () OVERRIDE\n+  {\n+    return m_inner->get_logger ();\n+  }\n+\n+  void on_condition (const svalue *lhs,\n+\t\t     enum tree_code op,\n+\t\t     const svalue *rhs) OVERRIDE\n+  {\n+    m_inner->on_condition (lhs, op, rhs);\n+  }\n+\n+  void on_unknown_change (const svalue *sval, bool is_mutable) OVERRIDE\n+  {\n+    m_inner->on_unknown_change (sval, is_mutable);\n+  }\n+\n+  void on_phi (const gphi *phi, tree rhs) OVERRIDE\n+  {\n+    m_inner->on_phi (phi, rhs);\n+  }\n+\n+  void on_unexpected_tree_code (tree t,\n+\t\t\t\tconst dump_location_t &loc) OVERRIDE\n+  {\n+    m_inner->on_unexpected_tree_code (t, loc);\n+  }\n+\n+  void on_escaped_function (tree fndecl) OVERRIDE\n+  {\n+    m_inner->on_escaped_function (fndecl);\n+  }\n+\n+  uncertainty_t *get_uncertainty () OVERRIDE\n+  {\n+    return m_inner->get_uncertainty ();\n+  }\n+\n+  void purge_state_involving (const svalue *sval) OVERRIDE\n+  {\n+    m_inner->purge_state_involving (sval);\n+  }\n+\n+  void bifurcate (custom_edge_info *info) OVERRIDE\n+  {\n+    m_inner->bifurcate (info);\n+  }\n+\n+  void terminate_path () OVERRIDE\n+  {\n+    m_inner->terminate_path ();\n+  }\n+\n+  const extrinsic_state *get_ext_state () const OVERRIDE\n+  {\n+    return m_inner->get_ext_state ();\n+  }\n+\n+  bool get_malloc_map (sm_state_map **out_smap,\n+\t\t       const state_machine **out_sm,\n+\t\t       unsigned *out_sm_idx) OVERRIDE\n+  {\n+    return m_inner->get_malloc_map (out_smap, out_sm, out_sm_idx);\n+  }\n+\n+  bool get_taint_map (sm_state_map **out_smap,\n+\t\t      const state_machine **out_sm,\n+\t\t      unsigned *out_sm_idx) OVERRIDE\n+  {\n+    return m_inner->get_taint_map (out_smap, out_sm, out_sm_idx);\n+  }\n+\n+  const gimple *get_stmt () const OVERRIDE\n+  {\n+    return m_inner->get_stmt ();\n+  }\n+\n+protected:\n+  region_model_context_decorator (region_model_context *inner)\n+  : m_inner (inner)\n+  {\n+    gcc_assert (m_inner);\n+  }\n+\n+  region_model_context *m_inner;\n+};\n+\n+/* Subclass of region_model_context_decorator that adds a note\n+   when saving diagnostics.  */\n+\n+class note_adding_context : public region_model_context_decorator\n+{\n+public:\n+  bool warn (pending_diagnostic *d) OVERRIDE\n+  {\n+    if (m_inner->warn (d))\n+      {\n+\tadd_note (make_note ());\n+\treturn true;\n+      }\n+    else\n+      return false;\n+  }\n+\n+  /* Hook to make the new note.  */\n+  virtual pending_note *make_note () = 0;\n+\n+protected:\n+  note_adding_context (region_model_context *inner)\n+  : region_model_context_decorator (inner)\n+  {\n+  }\n+};\n+\n /* A bundle of data for use when attempting to merge two region_model\n    instances to make a third.  */\n "}, {"sha": "bd9f3c667ee11b740f7ccc1807912e3411d428a9", "filename": "gcc/testsuite/gcc.dg/analyzer/write-to-const-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-const-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-const-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-const-2.c?ref=c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "patch": "@@ -2,17 +2,17 @@ typedef __SIZE_TYPE__ size_t;\n \n void read_only (void *)\n   __attribute__ ((access (read_only, 1)));\n-void write_only (void *)\n+void write_only (void *) /* { dg-message \"parameter 1 of 'write_only' marked with attribute 'access \\\\(write_only, 1\\\\)'\" } */\n   __attribute__ ((access (write_only, 1)));\n-void read_write (void *)\n+void read_write (void *) /* { dg-message \"parameter 1 of 'read_write' marked with attribute 'access \\\\(read_write, 1\\\\)'\" } */\n   __attribute__ ((access (read_write, 1)));\n void none (void *)\n   __attribute__ ((access (none, 1)));\n void read_only_with_size (void *, size_t)\n   __attribute__ ((access (read_only, 1, 2)));\n-void write_only_with_size (void *, size_t)\n+void write_only_with_size (void *, size_t) /* { dg-message \"parameter 1 of 'write_only_with_size' marked with attribute 'access \\\\(write_only, 1, 2\\\\)'\" } */\n   __attribute__ ((access (write_only, 1, 2)));\n-void read_write_with_size (void *, size_t)\n+void read_write_with_size (void *, size_t) /* { dg-message \"parameter 1 of 'read_write_with_size' marked with attribute 'access \\\\(read_write, 1, 2\\\\)'\" } */\n   __attribute__ ((access (read_write, 1, 2)));\n void none_with_size (void *, size_t)\n   __attribute__ ((access (none, 1, 2)));"}, {"sha": "c1bece632ce4b705e30102c66860623a91aeb3ed", "filename": "gcc/testsuite/gcc.dg/analyzer/write-to-function-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-function-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-function-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-function-1.c?ref=c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "patch": "@@ -1,6 +1,6 @@\n typedef __SIZE_TYPE__ size_t;\n \n-int getrandom (void *__buffer, size_t __length,\n+int getrandom (void *__buffer, size_t __length, /* { dg-message \"parameter 1 of 'getrandom' marked with attribute 'access \\\\(write_only, 1, 2\\\\)'\" } */\n \t       unsigned int __flags)\n   __attribute__ ((access (__write_only__, 1, 2)));\n "}, {"sha": "657ada64cea53705991c4dc42ec9a5c21623da2c", "filename": "gcc/testsuite/gcc.dg/analyzer/write-to-string-literal-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-2.c?ref=c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "patch": "@@ -1,6 +1,6 @@\n typedef __SIZE_TYPE__ size_t;\n \n-int getrandom (void *__buffer, size_t __length,\n+int getrandom (void *__buffer, size_t __length, /* { dg-message \"parameter 1 of 'getrandom' marked with attribute 'access \\\\(write_only, 1, 2\\\\)'\" } */\n \t       unsigned int __flags)\n   __attribute__ ((access (__write_only__, 1, 2)));\n "}, {"sha": "9d5d07d4d196933fefc7b6a1b252e07e1837cc72", "filename": "gcc/testsuite/gcc.dg/analyzer/write-to-string-literal-3.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-3.c?ref=c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "patch": "@@ -2,17 +2,17 @@ typedef __SIZE_TYPE__ size_t;\n \n void read_only (void *)\n   __attribute__ ((access (read_only, 1)));\n-void write_only (void *)\n+void write_only (void *) /* { dg-message \"parameter 1 of 'write_only' marked with attribute 'access \\\\(write_only, 1\\\\)'\" } */\n   __attribute__ ((access (write_only, 1)));\n-void read_write (void *)\n+void read_write (void *) /* { dg-message \"parameter 1 of 'read_write' marked with attribute 'access \\\\(read_write, 1\\\\)'\" } */\n   __attribute__ ((access (read_write, 1)));\n void none (void *)\n   __attribute__ ((access (none, 1)));\n void read_only_with_size (void *, size_t)\n   __attribute__ ((access (read_only, 1, 2)));\n-void write_only_with_size (void *, size_t)\n+void write_only_with_size (void *, size_t) /* { dg-message \"parameter 1 of 'write_only_with_size' marked with attribute 'access \\\\(write_only, 1, 2\\\\)'\" } */\n   __attribute__ ((access (write_only, 1, 2)));\n-void read_write_with_size (void *, size_t)\n+void read_write_with_size (void *, size_t) /* { dg-message \"parameter 1 of 'read_write_with_size' marked with attribute 'access \\\\(read_write, 1, 2\\\\)'\" } */\n   __attribute__ ((access (read_write, 1, 2)));\n void none_with_size (void *, size_t)\n   __attribute__ ((access (none, 1, 2)));"}, {"sha": "a8f600f81a3862cfe96892182425b1bd84860a89", "filename": "gcc/testsuite/gcc.dg/analyzer/write-to-string-literal-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-4.c?ref=c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "patch": "@@ -1,6 +1,6 @@\n typedef __SIZE_TYPE__ size_t;\n \n-int getrandom (void *__buffer, size_t __length,\n+int getrandom (void *__buffer, size_t __length, /* { dg-message \"parameter 1 of 'getrandom' marked with attribute 'access \\\\(write_only, 1, 2\\\\)'\" } */\n \t       unsigned int __flags)\n   __attribute__ ((access (__write_only__, 1, 2)));\n "}, {"sha": "b7ac4659012c238f5585af8d43d5e9caead6ab4d", "filename": "gcc/testsuite/gcc.dg/analyzer/write-to-string-literal-5.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65d3c7f9dade18826d1a28d71b98c7cdc3e4300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-5.c?ref=c65d3c7f9dade18826d1a28d71b98c7cdc3e4300", "patch": "@@ -0,0 +1,31 @@\n+/* Verify that deduplication of -Wanalyzer-write-to-string-literal (and their\n+   notes) works.  */\n+\n+/* { dg-additional-options \"-fanalyzer-show-duplicate-count\" } */\n+\n+#include \"analyzer-decls.h\"\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+int getrandom (void *__buffer, size_t __length, /* { dg-message \"parameter 1 of 'getrandom' marked with attribute 'access \\\\(write_only, 1, 2\\\\)'\" } */\n+\t       unsigned int __flags)\n+  __attribute__ ((access (__write_only__, 1, 2)));\n+\n+#define GRND_RANDOM 0x02\n+\n+void *test (int flag)\n+{\n+  char *ptr;\n+  if (flag)\n+    ptr = __builtin_malloc (1024);\n+  else\n+    ptr = __builtin_alloca (1024);\n+\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n+\n+  if (getrandom((char *)\"foo\", 3, GRND_RANDOM)) /* { dg-warning \"write to string literal\" \"warning\" } */\n+    /* { dg-message \"1 duplicate\" \"dup\" { target *-*-* } .-1 } */\n+    __builtin_printf(\"ok\\n\");\n+\n+  return ptr;\n+}"}]}