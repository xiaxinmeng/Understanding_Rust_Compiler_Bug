{"sha": "64f761e4ac8df02994074fede3948c91f61115be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRmNzYxZTRhYzhkZjAyOTk0MDc0ZmVkZTM5NDhjOTFmNjExMTViZQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-02T00:16:26Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-02T00:16:26Z"}, "message": "Daily bump.", "tree": {"sha": "0abda11be8e7766a61bc5108dc4e74c4954f91e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0abda11be8e7766a61bc5108dc4e74c4954f91e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64f761e4ac8df02994074fede3948c91f61115be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f761e4ac8df02994074fede3948c91f61115be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64f761e4ac8df02994074fede3948c91f61115be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f761e4ac8df02994074fede3948c91f61115be/comments", "author": null, "committer": null, "parents": [{"sha": "34127f4adaf6ed8d39ee1a65aaef7f62dd67c5a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34127f4adaf6ed8d39ee1a65aaef7f62dd67c5a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34127f4adaf6ed8d39ee1a65aaef7f62dd67c5a9"}], "stats": {"total": 360, "additions": 359, "deletions": 1}, "files": [{"sha": "a7f05f93e0e5a7f4e999c51444414b31c01953c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f761e4ac8df02994074fede3948c91f61115be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f761e4ac8df02994074fede3948c91f61115be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64f761e4ac8df02994074fede3948c91f61115be", "patch": "@@ -1,3 +1,110 @@\n+2020-07-01  Pip Cet  <pipcet@gmail.com>\n+\n+\t* spellcheck.c (test_data): Add problematic strings.\n+\t(test_metric_conditions): Don't test the triangle inequality\n+\tcondition, which our distance function does not satisfy.\n+\n+2020-07-01  Omar Tahir  <omar.tahir@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_asm_trampoline_template): Always\n+\tgenerate a BTI instruction.\n+\n+2020-07-01  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/94882\n+\t* match.pd (x & y) - (x | y) - 1 -> ~(x ^ y): New simplification.\n+\n+2020-07-01  Jeff Law  <law@redhat.com>\n+\n+\t* config/m68k/m68k.c (m68k_output_btst): Drop \"register\" keyword.\n+\t(emit_move_sequence, output_iorsi3, output_xorsi3): Likewise.\n+\n+2020-07-01  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (aarch64_builtins): Add enums\n+\tfor 64bits fpsr/fpcr getter setters builtin variants.\n+\t(aarch64_init_fpsr_fpcr_builtins): New function.\n+\t(aarch64_general_init_builtins): Modify to make use of the later.\n+\t(aarch64_expand_fpsr_fpcr_setter): New function.\n+\t(aarch64_general_expand_builtin): Modify to make use of the later.\n+\t* config/aarch64/aarch64.md (@aarch64_set_<fpscr_name><GPI:mode>)\n+\t(@aarch64_get_<fpscr_name><GPI:mode>): New patterns replacing and\n+\tgeneralizing 'get_fpcr', 'set_fpsr'.\n+\t* config/aarch64/iterators.md (GET_FPSCR, SET_FPSCR): New int\n+\titerators.\n+\t(fpscr_name): New int attribute.\n+\t* doc/extend.texi (__builtin_aarch64_get_fpcr64)\n+\t(__builtin_aarch64_set_fpcr64, __builtin_aarch64_get_fpsr64)\n+\t(__builtin_aarch64_set_fpsr64): Add into AArch64 Built-in\n+\tFunctions.\n+\n+2020-07-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcov.c (print_usage): Avoid trailing space for -j option.\n+\n+2020-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95839\n+\t* tree-vect-slp.c (vect_slp_tree_uniform_p): Pre-existing\n+\tvectors are not uniform.\n+\t(vect_build_slp_tree_1): Handle BIT_FIELD_REFs of\n+\tvector registers.\n+\t(vect_build_slp_tree_2): For groups of lane extracts\n+\tfrom a vector register generate a permute node\n+\twith a special child representing the pre-existing vector.\n+\t(vect_prologue_cost_for_slp): Pre-existing vectors cost nothing.\n+\t(vect_slp_analyze_node_operations): Use SLP_TREE_LANES.\n+\t(vectorizable_slp_permutation): Do not generate or cost identity\n+\tpermutes.\n+\t(vect_schedule_slp_instance): Handle pre-existing vector\n+\tthat are function arguments.\n+\n+2020-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* system.h (INCLUDE_ISL): New guarded include.\n+\t* graphite-dependences.c: Use it.\n+\t* graphite-isl-ast-to-gimple.c: Likewise.\n+\t* graphite-optimize-isl.c: Likewise.\n+\t* graphite-poly.c: Likewise.\n+\t* graphite-scop-detection.c: Likewise.\n+\t* graphite-sese-to-poly.c: Likewise.\n+\t* graphite.c: Likewise.\n+\t* graphite.h: Drop the includes here.\n+\n+2020-07-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcov.c (print_usage): Shorted option description for -j\n+\toption.\n+\n+2020-07-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/gcov.texi: Rename 2 options.\n+\t* gcov.c (print_usage): Rename -i,--json-format to\n+\t-j,--json-format and -j,--human-readable to -H,--human-readable.\n+\t(process_args): Fix up parsing.  Document obsolete options and\n+\thow are they changed.\n+\n+2020-07-01  Jeff Law  <law@redhat.com>\n+\n+\t* config/pa/pa.c (pa_emit_move_sequence): Drop register keyword.\n+\t(pa_output_ascii): Likewise.\n+\n+2020-07-01  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.c (riscv_subset_t): New field\n+\tadded.\n+\t(riscv_subset_list::parsing_subset_version): Add parameter for\n+\tindicate explicitly version, and handle explicitly version.\n+\t(riscv_subset_list::handle_implied_ext): Ditto.\n+\t(riscv_subset_list::add): Ditto.\n+\t(riscv_subset_t::riscv_subset_t): Init new field.\n+\t(riscv_subset_list::to_string): Always output version info if version\n+\texplicitly specified.\n+\t(riscv_subset_list::parsing_subset_version): Handle explicitly\n+\tarch version.\n+\t(riscv_subset_list::parse_std_ext): Ditto.\n+\t(riscv_subset_list::parse_multiletter_ext): Ditto.\n+\n 2020-06-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR target/92789"}, {"sha": "d5b9f0ff5dbce0396e2a1ee3e4d0a86628d45eef", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f761e4ac8df02994074fede3948c91f61115be/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f761e4ac8df02994074fede3948c91f61115be/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=64f761e4ac8df02994074fede3948c91f61115be", "patch": "@@ -1 +1 @@\n-20200701\n+20200702"}, {"sha": "79d0d82335c2f0b2ecac6f2ca40545d01b28416a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f761e4ac8df02994074fede3948c91f61115be/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f761e4ac8df02994074fede3948c91f61115be/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=64f761e4ac8df02994074fede3948c91f61115be", "patch": "@@ -1,3 +1,15 @@\n+2020-07-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* class.c (copy_fndecl_with_name): Add additional predicate args, do\n+\tnot deduce them locally.\n+\t(copy_operator_fn): Adjust copy_fndecl_with_name call.\n+\t(build_clone): Add vtt and inherited predicate args.  Pass through\n+\tto copy_fndecl_with_name call.\n+\t(build_cdtor_clones): Likewise, pass through to build_clone as\n+\tneeded.\n+\t(build_cdtor): Determine vtt and inherited here.\n+\t* cp-tree.h (DECL_NEEDS_CTT_PARM_P): Delete.\n+\n 2020-06-30  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (copy_fndecl_with_name): Rename to ..."}, {"sha": "76397f2f71f70e849463d197d328ffd66183918d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f761e4ac8df02994074fede3948c91f61115be/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f761e4ac8df02994074fede3948c91f61115be/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=64f761e4ac8df02994074fede3948c91f61115be", "patch": "@@ -1,3 +1,65 @@\n+2020-07-01  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* check.c (gfc_invalid_boz): Fix bootstrap. Revert\n+\tMark hint for translation using _().\n+\n+2020-07-01  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/52279\n+\t* arith.c (reduce_binary_aa): Mark for translation the string\n+\tparameter to gfc_check_conformance with G_().\n+\t* check.c (gfc_invalid_boz): Mark hint for translation using\n+\t_().  (gfc_check_achar): Mark for translation the message\n+\tparameter to gfc_invalid_boz using G_().  (gfc_check_char):\n+\tMark for translation the message parameter to gfc_invalid_boz\n+\tusing G_().  (gfc_check_complex): Mark for translation the\n+\tmessage parameter to gfc_invalid_boz using G_().\n+\t(gfc_check_float): Mark for translation the message\n+\tparameter to gfc_invalid_boz using G_().  (check_rest): Mark\n+\tfor translation the string parameter to gfc_check_conformance\n+\twith _().  (gfc_check_minloc_maxloc): Mark for translation\n+\tthe string parameter to gfc_check_conformance with _().\n+\t(gfc_check_findloc): Mark for translation the string parameter\n+\tto gfc_check_conformance with _().  (check_reduction): Mark\n+\tfor translation the string parameter to gfc_check_conformance\n+\twith _().  (gfc_check_pack): Mark for translation the string\n+\tparameter to gfc_check_conformance with _().\n+\t* decl.c (match_old_style_init): Mark for translation the\n+\tmessage parameter to gfc_invalid_boz using G_().\n+\t* expr.c (gfc_check_assign): Mark for translation the string\n+\tparameter to gfc_check_conformance with _().\n+\t* intrinsic.c (check_specific): Mark for translation the string\n+\tparameter to gfc_check_conformance with _().\n+\t(gfc_check_intrinsic_standard): Mark symstd_msg strings for\n+\ttranslation using G_(). No need to mark symstd_msg for\n+\ttranslation in call to gfc_warning or when setting symstd.\n+\t* io.c (check_open_constraints):  Mark strings for translation\n+\tusing G_() in all calls to warn_or_error.  (match_io_element):\n+\tMark for translation the message parameter to gfc_invalid_boz\n+\tusing G_().\n+\t* primary.c (match_boz_constant): Mark for translation the\n+\tmessage parameter to gfc_invalid_boz using G_().\n+\t* resolve.c (resolve_elemental_actual):  Mark for translation\n+\tthe string parameter to gfc_check_conformance with _().\n+\t(resolve_operator):  Mark for translation the string parameter\n+\tto gfc_check_conformance with _().  Mark translation strings\n+\tassigned to msg using G_() for use in a call to cfg_warning.\n+\n+2020-07-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/95446\n+\t* resolve.c (resolve_elemental_actual): Add code to check for\n+\tnon-optional argument of the same rank.  Revise warning message\n+\tto refer to the Fortran 2018 standard.\n+\n+2020-07-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/95829\n+\t* decl.c (gfc_match_decl_type_spec): Compare with \"* ) \" instead\n+\tof \"*)\".\n+\n 2020-06-30  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/88379"}, {"sha": "7ec646a901d4204b441d2d3b63dc12d0327790f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f761e4ac8df02994074fede3948c91f61115be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f761e4ac8df02994074fede3948c91f61115be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=64f761e4ac8df02994074fede3948c91f61115be", "patch": "@@ -1,3 +1,164 @@\n+2020-07-01  Omar Tahir  <omar.tahir@arm.com>\n+\n+\t* gcc.target/aarch64/bti-4.c: New test.\n+\n+2020-07-01  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/94882\n+\t* gcc.dg/tree-ssa/pr94882.c: New test.\n+\t* gcc.dg/tree-ssa/pr94882-1.c: New test.\n+\t* gcc.dg/tree-ssa/pr94882-2.c: New test.\n+\t* gcc.dg/tree-ssa/pr94882-3.c: New test.\n+\n+2020-07-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR testsuite/96014\n+\t* g++.dg/analyzer/pr94028.C: Make operator new non-throwing so\n+\tthat the compiler doesn't implicitly mark it as returning\n+\tnon-null.\n+\n+2020-07-01  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gfortran.dg/pr95690.f90: Adjust dg-error line number.\n+\n+2020-07-01  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/direct-move-double1.c: Require lp64.\n+\t* gcc.target/powerpc/direct-move-float1.c: Same.\n+\t* gcc.target/powerpc/direct-move-float3.c: Same.\n+\t* gcc.target/powerpc/direct-move-vint1.c: Same.\n+\t* gcc.target/powerpc/vsx-vector-5.c: Same.\n+\t* gcc.target/powerpc/vsx-vector-6.p7.c: Same.\n+\t* gcc.target/powerpc/vsx-vector-6.p8.c: Same.\n+\t* gcc.target/powerpc/vsx-vector-6.p9.c: Same.\n+\n+2020-07-01  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/aarch64/get_fpcr64_1.c: New test.\n+\t* gcc.target/aarch64/set_fpcr64_1.c: New test.\n+\t* gcc.target/aarch64/get_fpsr64_1.c: New test.\n+\t* gcc.target/aarch64/set_fpsr64_1.c: New test.\n+\n+2020-07-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/95446\n+\t* gfortran.dg/elemental_optional_args_6.f90: Remove check\n+\tfor warnings that were erroneously output.\n+\t* gfortran.dg/pr95446.f90: New test.\n+\n+2020-07-01  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/94743\n+\t* gcc.target/arm/handler-align.c: Add -mgeneral-regs-only.\n+\n+2020-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95839\n+\t* gcc.dg/vect/bb-slp-pr95839-2.c: New testcase.\n+\n+2020-07-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/gcov/loop.C: Use -H option instead of -j option.\n+\n+2020-07-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/95829\n+\t* gfortran.dg/pr95829.f90: New test.\n+\n+2020-07-01  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/94743\n+\t* gcc.target/arm/pr94743-1-hard.c: Add missing quotes in expected\n+\twarning.\n+\t* gcc.target/arm/pr94743-1-softfp.c: Likewise.\n+\n+2020-07-01  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.target/riscv/attribute-13.c: New.\n+\n+2020-07-01  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/direct-move-double1.c: Remove lp64 requirement.\n+\t* gcc.target/powerpc/direct-move-double2.c: Same.\n+\t* gcc.target/powerpc/direct-move-float1.c: Same.\n+\t* gcc.target/powerpc/direct-move-float2.c: Same.\n+\t* gcc.target/powerpc/direct-move-float3.c: Same.\n+\t* gcc.target/powerpc/direct-move-vint1.c: Same.\n+\t* gcc.target/powerpc/direct-move-vint2.c: Same.\n+\t* gcc.target/powerpc/direct-move-long1.c: Remove linux requirement..\n+\t* gcc.target/powerpc/direct-move-long2.c: Same.\n+\n+2020-07-01  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/20030218-1.c: Delete.\n+\t* gcc.target/powerpc/20030505.c: Delete.\n+\t* gcc.target/powerpc/20081204-1.c: Delete.\n+\t* gcc.target/powerpc/bcd-1.c: Remove dg-skip-if SPE.\n+\t* gcc.target/powerpc/bcd-2.c: Same.\n+\t* gcc.target/powerpc/bcd-3.c: Same.\n+\t* gcc.target/powerpc/direct-move-double1.c: Same.\n+\t* gcc.target/powerpc/direct-move-double2.c: Same.\n+\t* gcc.target/powerpc/direct-move-float1.c: Same.\n+\t* gcc.target/powerpc/direct-move-float2.c: Same.\n+\t* gcc.target/powerpc/direct-move-float3.c: Same.\n+\t* gcc.target/powerpc/direct-move-long1.c: Same.\n+\t* gcc.target/powerpc/direct-move-long2.c: Same.\n+\t* gcc.target/powerpc/direct-move-vint1.c: Same.\n+\t* gcc.target/powerpc/direct-move-vint2.c: Same.\n+\t* gcc.target/powerpc/extend-divide-1.c: Same.\n+\t* gcc.target/powerpc/extend-divide-2.c: Same.\n+\t* gcc.target/powerpc/pack01.c: Same.\n+\t* gcc.target/powerpc/pack02.c: Same.\n+\t* gcc.target/powerpc/pack03.c: Same.\n+\t* gcc.target/powerpc/pr52457.c: Same.\n+\t* gcc.target/powerpc/pr88845.c: Same.\n+\t* gcc.target/powerpc/quad-atomic.c: Same.\n+\t* gcc.target/powerpc/recip-6.c: Same.\n+\t* gcc.target/powerpc/recip-7.c: Same.\n+\n+2020-07-01  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/p8vector-int128-1.c: Require int128 not lp64.\n+\t* gcc.target/powerpc/p8vector-int128-2.c: Same.\n+\n+2020-07-01  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/pr90763.c: Adjust requirements.\n+\t* gcc.target/powerpc/vsx-vector-1.c: Same.\n+\t* gcc.target/powerpc/vsx-vector-2.c: Same.\n+\t* gcc.target/powerpc/vsx-vector-3.c: Same.\n+\t* gcc.target/powerpc/vsx-vector-4.c: Same.\n+\t* gcc.target/powerpc/vsx-vector-5.c: Same.\n+\t* gcc.target/powerpc/vsx-vector-6.p7.c: Same.\n+\t* gcc.target/powerpc/vsx-vector-6.p8.c: Same.\n+\t* gcc.target/powerpc/vsx-vector-6.p9.c: Same.\n+\t* gcc.target/powerpc/vsx-vector-abss.c: Same.\n+\t* gcc.target/powerpc/vsx-vectorize-1.c: Same.\n+\t* gcc.target/powerpc/vsx-vectorize-2.c: Same.\n+\t* gcc.target/powerpc/vsx-vectorize-3.c: Same.\n+\t* gcc.target/powerpc/vsx-vectorize-4.c: Same.\n+\t* gcc.target/powerpc/vsx-vectorize-5.c: Same.\n+\t* gcc.target/powerpc/vsx-vectorize-6.c: Same.\n+\t* gcc.target/powerpc/vsx-vectorize-7.c: Same.\n+\t* gcc.target/powerpc/vsx-vectorize-8.c: Same.\n+\n+2020-07-01  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/ppc-spe.c: Delete.\n+\t* gcc.target/powerpc/ppc-spe64-1.c: Delete.\n+\t* gcc.target/powerpc/pr60102.c: Delete.\n+\t* gcc.target/powerpc/pr60158.c: Delete.\n+\t* gcc.target/powerpc/pr60735.c: Delete.\n+\t* gcc.target/powerpc/pr78458.c: Delete.\n+\t* gcc.target/powerpc/pr80343.c: Delete.\n+\t* gcc.target/powerpc/spe-evmerge.c: Delete.\n+\t* gcc.target/powerpc/spe-small-data-1.c: Delete.\n+\t* gcc.target/powerpc/spe-small-data-2.c: Delete.\n+\t* gcc.target/powerpc/spe-unwind-1.c: Delete.\n+\t* gcc.target/powerpc/spe-vector-memcpy.c: Delete.\n+\t* gcc.target/powerpc/spe-vector-memset.c: Delete.\n+\t* gcc.target/powerpc/spe1.c: Delete.\n+\n 2020-06-30  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gcc.target/powerpc/builtins-2-p9-runnable.c: lp64 to int128."}, {"sha": "7806a527b40d8e2e30ac0651b487dbd82f7c3d7a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f761e4ac8df02994074fede3948c91f61115be/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f761e4ac8df02994074fede3948c91f61115be/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=64f761e4ac8df02994074fede3948c91f61115be", "patch": "@@ -1,3 +1,19 @@\n+2020-07-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/94627\n+\t* include/bits/regex.h (operator==, operator!=): Remove noexcept\n+\tequality comparisons for match_results.\n+\t* testsuite/28_regex/match_results/94627.cc: New test.\n+\n+2020-07-01  Martin Sebor  <msebor@redhat.com>\n+\n+\t* testsuite/21_strings/basic_string_view/cons/char/nonnull.cc: Adjust\n+\ttext of expected warning.\n+\t* testsuite/21_strings/basic_string_view/cons/wchar_t/nonnull.cc: Same.\n+\t* testsuite/21_strings/basic_string_view/operations/compare/char/nonnull.cc: Same.\n+\t* testsuite/21_strings/basic_string_view/operations/find/char/nonnull.cc: Same.\n+\t* testsuite/21_strings/basic_string_view/operations/rfind/char/nonnull.cc: Same.\n+\n 2020-06-29  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tRevert:"}]}