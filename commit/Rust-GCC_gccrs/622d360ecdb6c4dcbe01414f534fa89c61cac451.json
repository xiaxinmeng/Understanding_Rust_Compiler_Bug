{"sha": "622d360ecdb6c4dcbe01414f534fa89c61cac451", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIyZDM2MGVjZGI2YzRkY2JlMDE0MTRmNTM0ZmE4OWM2MWNhYzQ1MQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-05-04T09:53:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-05-04T09:53:28Z"}, "message": "re PR tree-optimization/43949 (bogus warning: array subscript is above array bounds)\n\n2010-05-04  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/43949\n\t* tree-vrp.c (extract_range_from_binary_expr): Only handle\n\tTRUNC_MOD_EXPR.\n\nFrom-SVN: r159020", "tree": {"sha": "ae0c7d98a7e2d25014cb2b82e8242f20d67a00dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae0c7d98a7e2d25014cb2b82e8242f20d67a00dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/622d360ecdb6c4dcbe01414f534fa89c61cac451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/622d360ecdb6c4dcbe01414f534fa89c61cac451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/622d360ecdb6c4dcbe01414f534fa89c61cac451", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/622d360ecdb6c4dcbe01414f534fa89c61cac451/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f857e9a46ef3bfbf8e1a42aec86d7033ad343d87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f857e9a46ef3bfbf8e1a42aec86d7033ad343d87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f857e9a46ef3bfbf8e1a42aec86d7033ad343d87"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "4195d9dd66693ae3cd49d63e4c21ce6af5842f1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d360ecdb6c4dcbe01414f534fa89c61cac451/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d360ecdb6c4dcbe01414f534fa89c61cac451/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=622d360ecdb6c4dcbe01414f534fa89c61cac451", "patch": "@@ -1,3 +1,9 @@\n+2010-05-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43949\n+\t* tree-vrp.c (extract_range_from_binary_expr): Only handle\n+\tTRUNC_MOD_EXPR.\n+\n 2010-04-26  Jason Merrill  <jason@redhat.com>\n \n \t* c.opt (-fstrict-enums): New."}, {"sha": "8cac4dfc45a03b0a1dabedd944c71030ccf29d1b", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d360ecdb6c4dcbe01414f534fa89c61cac451/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d360ecdb6c4dcbe01414f534fa89c61cac451/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=622d360ecdb6c4dcbe01414f534fa89c61cac451", "patch": "@@ -2084,9 +2084,6 @@ extract_range_from_binary_expr (value_range_t *vr,\n       && code != EXACT_DIV_EXPR\n       && code != ROUND_DIV_EXPR\n       && code != TRUNC_MOD_EXPR\n-      && code != FLOOR_MOD_EXPR\n-      && code != CEIL_MOD_EXPR\n-      && code != ROUND_MOD_EXPR\n       && code != RSHIFT_EXPR\n       && code != MIN_EXPR\n       && code != MAX_EXPR\n@@ -2156,9 +2153,6 @@ extract_range_from_binary_expr (value_range_t *vr,\n       && code != EXACT_DIV_EXPR\n       && code != ROUND_DIV_EXPR\n       && code != TRUNC_MOD_EXPR\n-      && code != FLOOR_MOD_EXPR\n-      && code != CEIL_MOD_EXPR\n-      && code != ROUND_MOD_EXPR\n       && (vr0.type == VR_VARYING\n \t  || vr1.type == VR_VARYING\n \t  || vr0.type != vr1.type\n@@ -2509,27 +2503,30 @@ extract_range_from_binary_expr (value_range_t *vr,\n \t    }\n \t}\n     }\n-  else if (code == TRUNC_MOD_EXPR\n-\t   || code == FLOOR_MOD_EXPR\n-\t   || code == CEIL_MOD_EXPR\n-\t   || code == ROUND_MOD_EXPR)\n+  else if (code == TRUNC_MOD_EXPR)\n     {\n       bool sop = false;\n-      if (vr0.type == VR_ANTI_RANGE\n-\t  || vr1.type != VR_RANGE\n+      if (vr1.type != VR_RANGE\n \t  || symbolic_range_p (&vr1)\n-\t  || range_includes_zero_p (&vr1))\n+\t  || range_includes_zero_p (&vr1)\n+\t  || vrp_val_is_min (vr1.min))\n \t{\n \t  set_value_range_to_varying (vr);\n \t  return;\n \t}\n       type = VR_RANGE;\n-      max = int_const_binop (MINUS_EXPR, vr1.max, integer_one_node, 0);\n-      if (vrp_expr_computes_nonnegative (op0, &sop)\n-\t  && vrp_expr_computes_nonnegative (op1, &sop) && !sop)\n-\tmin = build_int_cst (TREE_TYPE (vr1.max), 0);\n+      /* Compute MAX <|vr1.min|, |vr1.max|> - 1.  */\n+      max = fold_unary_to_constant (ABS_EXPR, TREE_TYPE (vr1.min), vr1.min);\n+      if (tree_int_cst_lt (max, vr1.max))\n+\tmax = vr1.max;\n+      max = int_const_binop (MINUS_EXPR, max, integer_one_node, 0);\n+      /* If the dividend is non-negative the modulus will be\n+\t non-negative as well.  */\n+      if (TYPE_UNSIGNED (TREE_TYPE (max))\n+\t  || (vrp_expr_computes_nonnegative (op0, &sop) && !sop))\n+\tmin = build_int_cst (TREE_TYPE (max), 0);\n       else\n-\tmin = fold_unary (NEGATE_EXPR, TREE_TYPE (max), max);\n+\tmin = fold_unary_to_constant (NEGATE_EXPR, TREE_TYPE (max), max);\n     }\n   else if (code == MINUS_EXPR)\n     {"}]}