{"sha": "87fdf7fff070b1fb0ed2dea21cfee8c5aa42429d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdmZGY3ZmZmMDcwYjFmYjBlZDJkZWEyMWNmZWU4YzVhYTQyNDI5ZA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@cygnus.com", "date": "1999-09-21T18:54:34Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "1999-09-21T18:54:34Z"}, "message": "flow.c (remove_edge): New function to remove an edge from the flow graph.\n\n\nTue Sep 21 14:51:23 EDT 1999  Andrew MacLeod  <amacleod@cygnus.com>\n\n\t* flow.c (remove_edge): New function to remove an edge from the\n\tflow graph.\n\t(remove_fake_successors): New function to remove fake successor edges.\n\t(remove_fake_edges): New function to remove all fake edges from the\n\tflow graph.\n\t(add_fake_exit_edges): New function to add fake edges from all blocks\n\twith no successors to the exit block.\n\t* basic-block.h (remove_fake_edges, add_fake_exit_edges): Add\n\tprototypes for new functions.\n\nFrom-SVN: r29555", "tree": {"sha": "75565f4ad0e032e4ec78cb746454629a09affecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75565f4ad0e032e4ec78cb746454629a09affecf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87fdf7fff070b1fb0ed2dea21cfee8c5aa42429d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87fdf7fff070b1fb0ed2dea21cfee8c5aa42429d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87fdf7fff070b1fb0ed2dea21cfee8c5aa42429d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87fdf7fff070b1fb0ed2dea21cfee8c5aa42429d/comments", "author": null, "committer": null, "parents": [{"sha": "04fc632494526aa562e2c99664ec5d5027ada07b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04fc632494526aa562e2c99664ec5d5027ada07b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04fc632494526aa562e2c99664ec5d5027ada07b"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "2dc37e854468fac77ee6e6f7e4c6c2447120f6b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fdf7fff070b1fb0ed2dea21cfee8c5aa42429d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fdf7fff070b1fb0ed2dea21cfee8c5aa42429d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87fdf7fff070b1fb0ed2dea21cfee8c5aa42429d", "patch": "@@ -1,3 +1,15 @@\n+Tue Sep 21 14:51:23 EDT 1999  Andrew MacLeod  <amacleod@cygnus.com>\n+\n+\t* flow.c (remove_edge): New function to remove an edge from the \n+\tflow graph.\n+\t(remove_fake_successors): New function to remove fake successor edges.\n+\t(remove_fake_edges): New function to remove all fake edges from the\n+\tflow graph.\n+\t(add_fake_exit_edges): New function to add fake edges from all blocks\n+\twith no successors to the exit block.\n+\t* basic-block.h (remove_fake_edges, add_fake_exit_edges): Add \n+\tprototypes for new functions.\n+\n Tue Sep 21 14:49:53 EDT 1999  Andrew MacLeod  <amacleod@cygnus.com>\n \n \t* config/mips/elf64.h (ASM_OUTPUT_CONSTRUCTOR, ASM_OUTPUT_DESTRUCTOR):"}, {"sha": "26b509cccf72f5b0166eaba95f06db0a318faf6d", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fdf7fff070b1fb0ed2dea21cfee8c5aa42429d/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fdf7fff070b1fb0ed2dea21cfee8c5aa42429d/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=87fdf7fff070b1fb0ed2dea21cfee8c5aa42429d", "patch": "@@ -244,6 +244,8 @@ extern void free_basic_block_vars\tPROTO ((int));\n extern basic_block split_edge\t\tPROTO ((edge));\n extern void insert_insn_on_edge\t\tPROTO ((rtx, edge));\n extern void commit_edge_insertions\tPROTO ((void));\n+extern void remove_fake_edges\t\tPROTO ((void));\n+extern void add_fake_exit_edges\t\tPROTO ((void));\n \n /* This structure maintains an edge list vector.  */\n struct edge_list "}, {"sha": "d47612b5d6b6159ae578c7b76f450ac1f3136aae", "filename": "gcc/flow.c", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fdf7fff070b1fb0ed2dea21cfee8c5aa42429d/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fdf7fff070b1fb0ed2dea21cfee8c5aa42429d/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=87fdf7fff070b1fb0ed2dea21cfee8c5aa42429d", "patch": "@@ -6751,3 +6751,87 @@ find_edge_index (edge_list, pred, succ)\n   return (EDGE_INDEX_NO_EDGE);\n }\n \n+/* This function will remove an edge from the flow graph.  */\n+static void\n+remove_edge (e)\n+     edge e;\n+{\n+  edge last_pred = NULL;\n+  edge last_succ = NULL;\n+  edge tmp;\n+  basic_block src, dest;\n+  src = e->src;\n+  dest = e->dest;\n+  for (tmp = src->succ; tmp && tmp != e; tmp = tmp->succ_next)\n+    last_succ = tmp;\n+\n+  if (!tmp)\n+    abort ();\n+  if (last_succ)\n+    last_succ->succ_next = e->succ_next;\n+  else\n+    src->succ = e->succ_next;\n+\n+  for (tmp = dest->pred; tmp && tmp != e; tmp = tmp->pred_next)\n+    last_pred = tmp;\n+\n+  if (!tmp)\n+    abort ();\n+  if (last_pred)\n+    last_pred->pred_next = e->pred_next;\n+  else\n+    dest->pred = e->pred_next;\n+\n+  free (e);\n+\n+}\n+\n+/* This routine will remove any fake successor edges for a basic block.\n+   When the edge is removed, it is also removed from whatever predecessor\n+   list it is in.  */\n+static void\n+remove_fake_successors (bb)\n+     basic_block bb;\n+{\n+  edge e;\n+  for (e = bb->succ; e ; )\n+    {\n+      edge tmp = e;\n+      e = e->succ_next;\n+      if ((tmp->flags & EDGE_FAKE) == EDGE_FAKE)\n+\tremove_edge (tmp);\n+    }\n+}\n+\n+/* This routine will remove all fake edges from the flow graph.  If\n+   we remove all fake successors, it will automatically remove all\n+   fake predecessors.  */\n+void\n+remove_fake_edges ()\n+{\n+  int x;\n+  edge e;\n+  basic_block bb;\n+\n+  for (x = 0; x < n_basic_blocks; x++)\n+    {\n+      edge tmp, last = NULL;\n+      bb = BASIC_BLOCK (x);\n+      remove_fake_successors (bb);\n+    }\n+  /* we've handled all successors except the entry block's.  */\n+  remove_fake_successors (ENTRY_BLOCK_PTR);\n+}\n+\n+/* This functions will add a fake edge between any block which has no\n+   successors, and the exit block. Some data flow equations require these\n+   edges to exist.  */\n+void\n+add_fake_exit_edges ()\n+{\n+  int x;\n+\n+  for (x = 0; x < n_basic_blocks; x++)\n+    if (BASIC_BLOCK (x)->succ == NULL)\n+      make_edge (BASIC_BLOCK (x), EXIT_BLOCK_PTR, EDGE_FAKE);\n+}"}]}