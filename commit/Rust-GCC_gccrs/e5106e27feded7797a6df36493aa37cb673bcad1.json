{"sha": "e5106e27feded7797a6df36493aa37cb673bcad1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUxMDZlMjdmZWRlZDc3OTdhNmRmMzY0OTNhYTM3Y2I2NzNiY2FkMQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-09-07T16:56:23Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-09-07T16:56:23Z"}, "message": "Move class substring_loc from c-family into gcc\n\ngcc/ChangeLog:\n\t* Makefile.in (OBJS): Add substring-locations.o.\n\t* langhooks-def.h (class substring_loc): New forward decl.\n\t(lhd_get_substring_location): New decl.\n\t(LANG_HOOKS_GET_SUBSTRING_LOCATION): New macro.\n\t(LANG_HOOKS_INITIALIZER): Add LANG_HOOKS_GET_SUBSTRING_LOCATION.\n\t* langhooks.c (lhd_get_substring_location): New function.\n\t* langhooks.h (class substring_loc): New forward decl.\n\t(struct lang_hooks): Add field get_substring_location.\n\t* substring-locations.c: New file, taking definition of\n\tformat_warning_va and format_warning_at_substring from\n\tc-family/c-format.c, making them non-static.\n\t* substring-locations.h (class substring_loc): Move class here\n\tfrom c-family/c-common.h.  Add and rewrite comments.\n\t(format_warning_va): New decl.\n\t(format_warning_at_substring): New decl.\n\t(get_source_location_for_substring): Add comment.\n\ngcc/c-family/ChangeLog:\n\t* c-common.c (get_cpp_ttype_from_string_type): Handle being passed\n\ta POINTER_TYPE.\n\t(substring_loc::get_location): Move to substring-locations.c,\n\tkeeping implementation as...\n\t(c_get_substring_location): New function, from the above, reworked\n\tto use accessors rather than member lookup.\n\t* c-common.h (class substring_loc): Move to substring-locations.h,\n\treplacing with a forward decl.\n\t(c_get_substring_location): New decl.\n\t* c-format.c: Include \"substring-locations.h\".\n\t(format_warning_va): Move to substring-locations.c.\n\t(format_warning_at_substring): Likewise.\n\ngcc/c/ChangeLog:\n\t* c-lang.c (LANG_HOOKS_GET_SUBSTRING_LOCATION): Use\n\tc_get_substring_location for this new langhook.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/diagnostic_plugin_test_string_literals.c: Include\n\t\"substring-locations.h\".\n\nFrom-SVN: r240028", "tree": {"sha": "bcfb76c5cbb7225eaaa830c5addd7d9df3bc60ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcfb76c5cbb7225eaaa830c5addd7d9df3bc60ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5106e27feded7797a6df36493aa37cb673bcad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5106e27feded7797a6df36493aa37cb673bcad1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5106e27feded7797a6df36493aa37cb673bcad1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5106e27feded7797a6df36493aa37cb673bcad1/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7100c1f253908708185aa9878bb147cef986279e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7100c1f253908708185aa9878bb147cef986279e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7100c1f253908708185aa9878bb147cef986279e"}], "stats": {"total": 552, "additions": 356, "deletions": 196}, "files": [{"sha": "f31907a88248e058b9e5d160c919d937e18ef10c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5106e27feded7797a6df36493aa37cb673bcad1", "patch": "@@ -1,3 +1,22 @@\n+2016-09-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add substring-locations.o.\n+\t* langhooks-def.h (class substring_loc): New forward decl.\n+\t(lhd_get_substring_location): New decl.\n+\t(LANG_HOOKS_GET_SUBSTRING_LOCATION): New macro.\n+\t(LANG_HOOKS_INITIALIZER): Add LANG_HOOKS_GET_SUBSTRING_LOCATION.\n+\t* langhooks.c (lhd_get_substring_location): New function.\n+\t* langhooks.h (class substring_loc): New forward decl.\n+\t(struct lang_hooks): Add field get_substring_location.\n+\t* substring-locations.c: New file, taking definition of\n+\tformat_warning_va and format_warning_at_substring from\n+\tc-family/c-format.c, making them non-static.\n+\t* substring-locations.h (class substring_loc): Move class here\n+\tfrom c-family/c-common.h.  Add and rewrite comments.\n+\t(format_warning_va): New decl.\n+\t(format_warning_at_substring): New decl.\n+\t(get_source_location_for_substring): Add comment.\n+\n 2016-09-07  Eric Gallager  <egall@gwmail.gwu.edu>\n \n \t* config/i386/i386.c: Add 'U' suffix to processor feature bits"}, {"sha": "332c85e2fb2e7e23283414c8abd9d72303a5cfba", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e5106e27feded7797a6df36493aa37cb673bcad1", "patch": "@@ -1443,6 +1443,7 @@ OBJS = \\\n \tstore-motion.o \\\n \tstreamer-hooks.o \\\n \tstringpool.o \\\n+\tsubstring-locations.o \\\n \ttarget-globals.o \\\n \ttarghooks.o \\\n \ttimevar.o \\"}, {"sha": "a3902f3027a844165eeb04c46477dabdc05ccee6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e5106e27feded7797a6df36493aa37cb673bcad1", "patch": "@@ -1,3 +1,18 @@\n+2016-09-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-common.c (get_cpp_ttype_from_string_type): Handle being passed\n+\ta POINTER_TYPE.\n+\t(substring_loc::get_location): Move to substring-locations.c,\n+\tkeeping implementation as...\n+\t(c_get_substring_location): New function, from the above, reworked\n+\tto use accessors rather than member lookup.\n+\t* c-common.h (class substring_loc): Move to substring-locations.h,\n+\treplacing with a forward decl.\n+\t(c_get_substring_location): New decl.\n+\t* c-format.c: Include \"substring-locations.h\".\n+\t(format_warning_va): Move to substring-locations.c.\n+\t(format_warning_at_substring): Likewise.\n+\n 2016-09-06 Martin Sebor  <msebor@redhat.com>\n \n \tPR c/77336"}, {"sha": "656f639767db5e5d4b75af20f8f122949a368a77", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=e5106e27feded7797a6df36493aa37cb673bcad1", "patch": "@@ -1122,6 +1122,9 @@ static enum cpp_ttype\n get_cpp_ttype_from_string_type (tree string_type)\n {\n   gcc_assert (string_type);\n+  if (TREE_CODE (string_type) == POINTER_TYPE)\n+    string_type = TREE_TYPE (string_type);\n+\n   if (TREE_CODE (string_type) != ARRAY_TYPE)\n     return CPP_OTHER;\n \n@@ -1148,23 +1151,23 @@ get_cpp_ttype_from_string_type (tree string_type)\n \n GTY(()) string_concat_db *g_string_concat_db;\n \n-/* Attempt to determine the source location of the substring.\n-   If successful, return NULL and write the source location to *OUT_LOC.\n-   Otherwise return an error message.  Error messages are intended\n-   for GCC developers (to help debugging) rather than for end-users.  */\n+/* Implementation of LANG_HOOKS_GET_SUBSTRING_LOCATION.  */\n \n const char *\n-substring_loc::get_location (location_t *out_loc) const\n+c_get_substring_location (const substring_loc &substr_loc,\n+\t\t\t  location_t *out_loc)\n {\n-  gcc_assert (out_loc);\n-\n-  enum cpp_ttype tok_type = get_cpp_ttype_from_string_type (m_string_type);\n+  enum cpp_ttype tok_type\n+    = get_cpp_ttype_from_string_type (substr_loc.get_string_type ());\n   if (tok_type == CPP_OTHER)\n     return \"unrecognized string type\";\n \n   return get_source_location_for_substring (parse_in, g_string_concat_db,\n-\t\t\t\t\t    m_fmt_string_loc, tok_type,\n-\t\t\t\t\t    m_caret_idx, m_start_idx, m_end_idx,\n+\t\t\t\t\t    substr_loc.get_fmt_string_loc (),\n+\t\t\t\t\t    tok_type,\n+\t\t\t\t\t    substr_loc.get_caret_idx (),\n+\t\t\t\t\t    substr_loc.get_start_idx (),\n+\t\t\t\t\t    substr_loc.get_end_idx (),\n \t\t\t\t\t    out_loc);\n }\n "}, {"sha": "1d923c90de41aeb3d5308393278c4b6f049fdd1b", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=e5106e27feded7797a6df36493aa37cb673bcad1", "patch": "@@ -1132,35 +1132,9 @@ extern const char *cb_get_suggestion (cpp_reader *, const char *,\n \n extern GTY(()) string_concat_db *g_string_concat_db;\n \n-/* libcpp can calculate location information about a range of characters\n-   within a string literal, but doing so is non-trivial.\n-\n-   This class encapsulates such a source location, so that it can be\n-   passed around (e.g. within c-format.c).  It is effectively a deferred\n-   call into libcpp.  If needed by a diagnostic, the actual source_range\n-   can be calculated by calling the get_range method.  */\n-\n-class substring_loc\n-{\n- public:\n-  substring_loc (location_t fmt_string_loc, tree string_type,\n-\t\t int caret_idx, int start_idx, int end_idx)\n-  : m_fmt_string_loc (fmt_string_loc), m_string_type (string_type),\n-    m_caret_idx (caret_idx), m_start_idx (start_idx), m_end_idx (end_idx) {}\n-\n-  void set_caret_index (int caret_idx) { m_caret_idx = caret_idx; }\n-\n-  const char *get_location (location_t *out_loc) const;\n-\n-  location_t get_fmt_string_loc () const { return m_fmt_string_loc; }\n-\n- private:\n-  location_t m_fmt_string_loc;\n-  tree m_string_type;\n-  int m_caret_idx;\n-  int m_start_idx;\n-  int m_end_idx;\n-};\n+class substring_loc;\n+extern const char *c_get_substring_location (const substring_loc &substr_loc,\n+\t\t\t\t\t     location_t *out_loc);\n \n /* In c-gimplify.c  */\n extern void c_genericize (tree);"}, {"sha": "09d514ec594c00d4fa82e4ae9f3011189eb204f4", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 1, "deletions": 156, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=e5106e27feded7797a6df36493aa37cb673bcad1", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"c-format.h\"\n #include \"diagnostic.h\"\n+#include \"substring-locations.h\"\n #include \"selftest.h\"\n #include \"builtins.h\"\n \n@@ -68,162 +69,6 @@ static int first_target_format_type;\n static const char *format_name (int format_num);\n static int format_flags (int format_num);\n \n-/* Emit a warning governed by option OPT, using GMSGID as the format\n-   string and AP as its arguments.\n-\n-   Attempt to obtain precise location information within a string\n-   literal from FMT_LOC.\n-\n-   Case 1: if substring location is available, and is within the range of\n-   the format string itself, the primary location of the\n-   diagnostic is the substring range obtained from FMT_LOC, with the\n-   caret at the *end* of the substring range.\n-\n-   For example:\n-\n-     test.c:90:10: warning: problem with '%i' here [-Wformat=]\n-     printf (\"hello %i\", msg);\n-                    ~^\n-\n-   Case 2: if the substring location is available, but is not within\n-   the range of the format string, the primary location is that of the\n-   format string, and an note is emitted showing the substring location.\n-\n-   For example:\n-     test.c:90:10: warning: problem with '%i' here [-Wformat=]\n-     printf(\"hello \" INT_FMT \" world\", msg);\n-            ^~~~~~~~~~~~~~~~~~~~~~~~~\n-     test.c:19: note: format string is defined here\n-     #define INT_FMT \"%i\"\n-                      ~^\n-\n-   Case 3: if precise substring information is unavailable, the primary\n-   location is that of the whole string passed to FMT_LOC's constructor.\n-   For example:\n-\n-     test.c:90:10: warning: problem with '%i' here [-Wformat=]\n-     printf(fmt, msg);\n-            ^~~\n-\n-   For each of cases 1-3, if param_range is non-NULL, then it is used\n-   as a secondary range within the warning.  For example, here it\n-   is used with case 1:\n-\n-     test.c:90:16: warning: '%s' here but arg 2 has 'long' type [-Wformat=]\n-     printf (\"foo %s bar\", long_i + long_j);\n-                  ~^       ~~~~~~~~~~~~~~~\n-\n-   and here with case 2:\n-\n-     test.c:90:16: warning: '%s' here but arg 2 has 'long' type [-Wformat=]\n-     printf (\"foo \" STR_FMT \" bar\", long_i + long_j);\n-             ^~~~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~\n-     test.c:89:16: note: format string is defined here\n-     #define STR_FMT \"%s\"\n-                      ~^\n-\n-   and with case 3:\n-\n-     test.c:90:10: warning: '%i' here, but arg 2 is \"const char *' [-Wformat=]\n-     printf(fmt, msg);\n-            ^~~  ~~~\n-\n-   If CORRECTED_SUBSTRING is non-NULL, use it for cases 1 and 2 to provide\n-   a fix-it hint, suggesting that it should replace the text within the\n-   substring range.  For example:\n-\n-     test.c:90:10: warning: problem with '%i' here [-Wformat=]\n-     printf (\"hello %i\", msg);\n-                    ~^\n-                    %s\n-\n-   Return true if a warning was emitted, false otherwise.  */\n-\n-ATTRIBUTE_GCC_DIAG (5,0)\n-static bool\n-format_warning_va (const substring_loc &fmt_loc, source_range *param_range,\n-\t\t   const char *corrected_substring,\n-\t\t   int opt, const char *gmsgid, va_list *ap)\n-{\n-  bool substring_within_range = false;\n-  location_t primary_loc;\n-  location_t fmt_substring_loc = UNKNOWN_LOCATION;\n-  source_range fmt_loc_range\n-    = get_range_from_loc (line_table, fmt_loc.get_fmt_string_loc ());\n-  const char *err = fmt_loc.get_location (&fmt_substring_loc);\n-  source_range fmt_substring_range\n-    = get_range_from_loc (line_table, fmt_substring_loc);\n-  if (err)\n-    /* Case 3: unable to get substring location.  */\n-    primary_loc = fmt_loc.get_fmt_string_loc ();\n-  else\n-    {\n-      if (fmt_substring_range.m_start >= fmt_loc_range.m_start\n-\t  && fmt_substring_range.m_finish <= fmt_loc_range.m_finish)\n-\t/* Case 1.  */\n-\t{\n-\t  substring_within_range = true;\n-\t  primary_loc = fmt_substring_loc;\n-\t}\n-      else\n-\t/* Case 2.  */\n-\t{\n-\t  substring_within_range = false;\n-\t  primary_loc = fmt_loc.get_fmt_string_loc ();\n-\t}\n-    }\n-\n-  rich_location richloc (line_table, primary_loc);\n-\n-  if (param_range)\n-    {\n-      location_t param_loc = make_location (param_range->m_start,\n-\t\t\t\t\t    param_range->m_start,\n-\t\t\t\t\t    param_range->m_finish);\n-      richloc.add_range (param_loc, false);\n-    }\n-\n-  if (!err && corrected_substring && substring_within_range)\n-    richloc.add_fixit_replace (fmt_substring_range, corrected_substring);\n-\n-  diagnostic_info diagnostic;\n-  diagnostic_set_info (&diagnostic, gmsgid, ap, &richloc, DK_WARNING);\n-  diagnostic.option_index = opt;\n-  bool warned = report_diagnostic (&diagnostic);\n-\n-  if (!err && fmt_substring_loc && !substring_within_range)\n-    /* Case 2.  */\n-    if (warned)\n-      {\n-\trich_location substring_richloc (line_table, fmt_substring_loc);\n-\tif (corrected_substring)\n-\t  substring_richloc.add_fixit_replace (fmt_substring_range,\n-\t\t\t\t\t       corrected_substring);\n-\tinform_at_rich_loc (&substring_richloc,\n-\t\t\t    \"format string is defined here\");\n-      }\n-\n-  return warned;\n-}\n-\n-/* Variadic call to format_warning_va.  */\n-\n-ATTRIBUTE_GCC_DIAG (5,0)\n-static bool\n-format_warning_at_substring (const substring_loc &fmt_loc,\n-\t\t\t     source_range *param_range,\n-\t\t\t     const char *corrected_substring,\n-\t\t\t     int opt, const char *gmsgid, ...)\n-{\n-  va_list ap;\n-  va_start (ap, gmsgid);\n-  bool warned = format_warning_va (fmt_loc, param_range, corrected_substring,\n-\t\t\t\t   opt, gmsgid, &ap);\n-  va_end (ap);\n-\n-  return warned;\n-}\n-\n /* Emit a warning as per format_warning_va, but construct the substring_loc\n    for the character at offset (CHAR_IDX - 1) within a string constant\n    FORMAT_STRING_CST at FMT_STRING_LOC.  */"}, {"sha": "a647263841123d5a21735480641049e73176896e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e5106e27feded7797a6df36493aa37cb673bcad1", "patch": "@@ -1,3 +1,8 @@\n+2016-09-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-lang.c (LANG_HOOKS_GET_SUBSTRING_LOCATION): Use\n+\tc_get_substring_location for this new langhook.\n+\n 2016-09-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/65467"}, {"sha": "b4096d064ee05c66d243855edb21be3e43f49ec9", "filename": "gcc/c/c-lang.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Fc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Fc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-lang.c?ref=e5106e27feded7797a6df36493aa37cb673bcad1", "patch": "@@ -43,6 +43,9 @@ enum c_language_kind c_language = clk_c;\n #define LANG_HOOKS_RUN_LANG_SELFTESTS selftest::run_c_tests\n #endif /* #if CHECKING_P */\n \n+#undef LANG_HOOKS_GET_SUBSTRING_LOCATION\n+#define LANG_HOOKS_GET_SUBSTRING_LOCATION c_get_substring_location\n+\n /* Each front end provides its own lang hook initializer.  */\n struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n "}, {"sha": "cf5f91da1252873580df2d5dc67a7caad2f56b46", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=e5106e27feded7797a6df36493aa37cb673bcad1", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hooks.h\"\n \n struct diagnostic_info;\n+class substring_loc;\n \n /* Note to creators of new hooks:\n \n@@ -81,6 +82,9 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n \t\t\t\t\t       tree);\n extern bool lhd_omp_mappable_type (tree);\n \n+extern const char *lhd_get_substring_location (const substring_loc &,\n+\t\t\t\t\t       location_t *out_loc);\n+\n #define LANG_HOOKS_NAME\t\t\t\"GNU unknown\"\n #define LANG_HOOKS_IDENTIFIER_SIZE\tsizeof (struct lang_identifier)\n #define LANG_HOOKS_INIT\t\t\thook_bool_void_false\n@@ -121,6 +125,7 @@ extern bool lhd_omp_mappable_type (tree);\n #define LANG_HOOKS_EH_USE_CXA_END_CLEANUP\tfalse\n #define LANG_HOOKS_DEEP_UNSHARING\tfalse\n #define LANG_HOOKS_RUN_LANG_SELFTESTS   lhd_do_nothing\n+#define LANG_HOOKS_GET_SUBSTRING_LOCATION lhd_get_substring_location\n \n /* Attribute hooks.  */\n #define LANG_HOOKS_ATTRIBUTE_TABLE\t\tNULL\n@@ -323,7 +328,8 @@ extern void lhd_end_section (void);\n   LANG_HOOKS_BLOCK_MAY_FALLTHRU, \\\n   LANG_HOOKS_EH_USE_CXA_END_CLEANUP, \\\n   LANG_HOOKS_DEEP_UNSHARING, \\\n-  LANG_HOOKS_RUN_LANG_SELFTESTS \\\n+  LANG_HOOKS_RUN_LANG_SELFTESTS, \\\n+  LANG_HOOKS_GET_SUBSTRING_LOCATION \\\n }\n \n #endif /* GCC_LANG_HOOKS_DEF_H */"}, {"sha": "538d9f9271084d9b1f407a21dabb145ee73fde89", "filename": "gcc/langhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=e5106e27feded7797a6df36493aa37cb673bcad1", "patch": "@@ -693,6 +693,14 @@ lhd_enum_underlying_base_type (const_tree enum_type)\n \t\t\t\t\t TYPE_UNSIGNED (enum_type));\n }\n \n+/* Default implementation of LANG_HOOKS_GET_SUBSTRING_LOCATION.  */\n+\n+const char *\n+lhd_get_substring_location (const substring_loc &, location_t *)\n+{\n+  return \"unimplemented\";\n+}\n+\n /* Returns true if the current lang_hooks represents the GNU C frontend.  */\n \n bool"}, {"sha": "c109c8c7e150c48e385d585ded155fd54d294f25", "filename": "gcc/langhooks.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=e5106e27feded7797a6df36493aa37cb673bcad1", "patch": "@@ -34,6 +34,8 @@ typedef void (*lang_print_tree_hook) (FILE *, tree, int indent);\n enum classify_record\n   { RECORD_IS_STRUCT, RECORD_IS_CLASS, RECORD_IS_INTERFACE };\n \n+class substring_loc;\n+\n /* The following hooks are documented in langhooks.c.  Must not be\n    NULL.  */\n \n@@ -513,6 +515,13 @@ struct lang_hooks\n   /* Run all lang-specific selftests.  */\n   void (*run_lang_selftests) (void);\n \n+  /* Attempt to determine the source location of the substring.\n+     If successful, return NULL and write the source location to *OUT_LOC.\n+     Otherwise return an error message.  Error messages are intended\n+     for GCC developers (to help debugging) rather than for end-users.  */\n+  const char *(*get_substring_location) (const substring_loc &,\n+\t\t\t\t\t location_t *out_loc);\n+\n   /* Whenever you add entries here, make sure you adjust langhooks-def.h\n      and langhooks.c accordingly.  */\n };"}, {"sha": "60bf1b0941729ce14dd239503621e0f3b1c36407", "filename": "gcc/substring-locations.c", "status": "added", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Fsubstring-locations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Fsubstring-locations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsubstring-locations.c?ref=e5106e27feded7797a6df36493aa37cb673bcad1", "patch": "@@ -0,0 +1,195 @@\n+/* Source locations within string literals.\n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic.h\"\n+#include \"cpplib.h\"\n+#include \"tree.h\"\n+#include \"langhooks.h\"\n+#include \"substring-locations.h\"\n+\n+/* Emit a warning governed by option OPT, using GMSGID as the format\n+   string and AP as its arguments.\n+\n+   Attempt to obtain precise location information within a string\n+   literal from FMT_LOC.\n+\n+   Case 1: if substring location is available, and is within the range of\n+   the format string itself, the primary location of the\n+   diagnostic is the substring range obtained from FMT_LOC, with the\n+   caret at the *end* of the substring range.\n+\n+   For example:\n+\n+     test.c:90:10: warning: problem with '%i' here [-Wformat=]\n+     printf (\"hello %i\", msg);\n+                    ~^\n+\n+   Case 2: if the substring location is available, but is not within\n+   the range of the format string, the primary location is that of the\n+   format string, and an note is emitted showing the substring location.\n+\n+   For example:\n+     test.c:90:10: warning: problem with '%i' here [-Wformat=]\n+     printf(\"hello \" INT_FMT \" world\", msg);\n+            ^~~~~~~~~~~~~~~~~~~~~~~~~\n+     test.c:19: note: format string is defined here\n+     #define INT_FMT \"%i\"\n+                      ~^\n+\n+   Case 3: if precise substring information is unavailable, the primary\n+   location is that of the whole string passed to FMT_LOC's constructor.\n+   For example:\n+\n+     test.c:90:10: warning: problem with '%i' here [-Wformat=]\n+     printf(fmt, msg);\n+            ^~~\n+\n+   For each of cases 1-3, if param_range is non-NULL, then it is used\n+   as a secondary range within the warning.  For example, here it\n+   is used with case 1:\n+\n+     test.c:90:16: warning: '%s' here but arg 2 has 'long' type [-Wformat=]\n+     printf (\"foo %s bar\", long_i + long_j);\n+                  ~^       ~~~~~~~~~~~~~~~\n+\n+   and here with case 2:\n+\n+     test.c:90:16: warning: '%s' here but arg 2 has 'long' type [-Wformat=]\n+     printf (\"foo \" STR_FMT \" bar\", long_i + long_j);\n+             ^~~~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~\n+     test.c:89:16: note: format string is defined here\n+     #define STR_FMT \"%s\"\n+                      ~^\n+\n+   and with case 3:\n+\n+     test.c:90:10: warning: '%i' here, but arg 2 is \"const char *' [-Wformat=]\n+     printf(fmt, msg);\n+            ^~~  ~~~\n+\n+   If CORRECTED_SUBSTRING is non-NULL, use it for cases 1 and 2 to provide\n+   a fix-it hint, suggesting that it should replace the text within the\n+   substring range.  For example:\n+\n+     test.c:90:10: warning: problem with '%i' here [-Wformat=]\n+     printf (\"hello %i\", msg);\n+                    ~^\n+                    %s\n+\n+   Return true if a warning was emitted, false otherwise.  */\n+\n+ATTRIBUTE_GCC_DIAG (5,0)\n+bool\n+format_warning_va (const substring_loc &fmt_loc,\n+\t\t   const source_range *param_range,\n+\t\t   const char *corrected_substring,\n+\t\t   int opt, const char *gmsgid, va_list *ap)\n+{\n+  bool substring_within_range = false;\n+  location_t primary_loc;\n+  location_t fmt_substring_loc = UNKNOWN_LOCATION;\n+  source_range fmt_loc_range\n+    = get_range_from_loc (line_table, fmt_loc.get_fmt_string_loc ());\n+  const char *err = fmt_loc.get_location (&fmt_substring_loc);\n+  source_range fmt_substring_range\n+    = get_range_from_loc (line_table, fmt_substring_loc);\n+  if (err)\n+    /* Case 3: unable to get substring location.  */\n+    primary_loc = fmt_loc.get_fmt_string_loc ();\n+  else\n+    {\n+      if (fmt_substring_range.m_start >= fmt_loc_range.m_start\n+\t  && fmt_substring_range.m_finish <= fmt_loc_range.m_finish)\n+\t/* Case 1.  */\n+\t{\n+\t  substring_within_range = true;\n+\t  primary_loc = fmt_substring_loc;\n+\t}\n+      else\n+\t/* Case 2.  */\n+\t{\n+\t  substring_within_range = false;\n+\t  primary_loc = fmt_loc.get_fmt_string_loc ();\n+\t}\n+    }\n+\n+  rich_location richloc (line_table, primary_loc);\n+\n+  if (param_range)\n+    {\n+      location_t param_loc = make_location (param_range->m_start,\n+\t\t\t\t\t    param_range->m_start,\n+\t\t\t\t\t    param_range->m_finish);\n+      richloc.add_range (param_loc, false);\n+    }\n+\n+  if (!err && corrected_substring && substring_within_range)\n+    richloc.add_fixit_replace (fmt_substring_range, corrected_substring);\n+\n+  diagnostic_info diagnostic;\n+  diagnostic_set_info (&diagnostic, gmsgid, ap, &richloc, DK_WARNING);\n+  diagnostic.option_index = opt;\n+  bool warned = report_diagnostic (&diagnostic);\n+\n+  if (!err && fmt_substring_loc && !substring_within_range)\n+    /* Case 2.  */\n+    if (warned)\n+      {\n+\trich_location substring_richloc (line_table, fmt_substring_loc);\n+\tif (corrected_substring)\n+\t  substring_richloc.add_fixit_replace (fmt_substring_range,\n+\t\t\t\t\t       corrected_substring);\n+\tinform_at_rich_loc (&substring_richloc,\n+\t\t\t    \"format string is defined here\");\n+      }\n+\n+  return warned;\n+}\n+\n+/* Variadic call to format_warning_va.  */\n+\n+bool\n+format_warning_at_substring (const substring_loc &fmt_loc,\n+\t\t\t     const source_range *param_range,\n+\t\t\t     const char *corrected_substring,\n+\t\t\t     int opt, const char *gmsgid, ...)\n+{\n+  va_list ap;\n+  va_start (ap, gmsgid);\n+  bool warned = format_warning_va (fmt_loc, param_range, corrected_substring,\n+\t\t\t\t   opt, gmsgid, &ap);\n+  va_end (ap);\n+\n+  return warned;\n+}\n+\n+/* Attempt to determine the source location of the substring.\n+   If successful, return NULL and write the source location to *OUT_LOC.\n+   Otherwise return an error message.  Error messages are intended\n+   for GCC developers (to help debugging) rather than for end-users.  */\n+\n+const char *\n+substring_loc::get_location (location_t *out_loc) const\n+{\n+  gcc_assert (out_loc);\n+  return lang_hooks.get_substring_location (*this, out_loc);\n+}"}, {"sha": "f8788c9b3c4d8fc6c9efe70dce6e16911676b98b", "filename": "gcc/substring-locations.h", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Fsubstring-locations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Fsubstring-locations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsubstring-locations.h?ref=e5106e27feded7797a6df36493aa37cb673bcad1", "patch": "@@ -20,6 +20,77 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_SUBSTRING_LOCATIONS_H\n #define GCC_SUBSTRING_LOCATIONS_H\n \n+/* The substring_loc class encapsulates information on the source location\n+   of a range of characters within a STRING_CST.\n+\n+   If needed by a diagnostic, the actual location_t of the substring_loc\n+   can be calculated by calling its get_location method.  This calls a\n+   langhook, since this is inherently frontend-specific.  For the C family\n+   of frontends, it calls back into libcpp to reparse the strings.  This\n+   gets the location information \"on demand\", rather than storing the\n+   location information in the initial lex for every string.  Thus the\n+   substring_loc can also be thought of as a deferred call into libcpp,\n+   to allow the non-trivial work of reparsing the string to be delayed\n+   until we actually need it (to emit a diagnostic for a particular range\n+   of characters).\n+\n+   substring_loc::get_location returns NULL if it succeeds, or an\n+   error message if it fails.  Error messages are intended for GCC\n+   developers (to help debugging) rather than for end-users.\n+\n+   The easiest way to use a substring_loc is via the format_warning_* APIs,\n+   which gracefully handle failure of substring_loc::get_location by using\n+   the location of the string as a whole if substring-information is\n+   unavailable.  */\n+\n+class substring_loc\n+{\n+ public:\n+  /* Constructor.  FMT_STRING_LOC is the location of the string as\n+     a whole.  STRING_TYPE is the type of the string.  It should be an\n+     ARRAY_TYPE of INTEGER_TYPE, or a POINTER_TYPE to such an ARRAY_TYPE.\n+     CARET_IDX, START_IDX, and END_IDX are offsets from the start\n+     of the string data.  */\n+  substring_loc (location_t fmt_string_loc, tree string_type,\n+\t\t int caret_idx, int start_idx, int end_idx)\n+  : m_fmt_string_loc (fmt_string_loc), m_string_type (string_type),\n+    m_caret_idx (caret_idx), m_start_idx (start_idx), m_end_idx (end_idx) {}\n+\n+  void set_caret_index (int caret_idx) { m_caret_idx = caret_idx; }\n+\n+  const char *get_location (location_t *out_loc) const;\n+\n+  location_t get_fmt_string_loc () const { return m_fmt_string_loc; }\n+  tree get_string_type () const { return m_string_type; }\n+  int get_caret_idx () const { return m_caret_idx; }\n+  int get_start_idx () const { return m_start_idx; }\n+  int get_end_idx () const { return m_end_idx; }\n+\n+ private:\n+  location_t m_fmt_string_loc;\n+  tree m_string_type;\n+  int m_caret_idx;\n+  int m_start_idx;\n+  int m_end_idx;\n+};\n+\n+/* Functions for emitting a warning about a format string.  */\n+\n+extern bool format_warning_va (const substring_loc &fmt_loc,\n+\t\t\t       const source_range *param_range,\n+\t\t\t       const char *corrected_substring,\n+\t\t\t       int opt, const char *gmsgid, va_list *ap)\n+  ATTRIBUTE_GCC_DIAG (5,0);\n+\n+extern bool format_warning_at_substring (const substring_loc &fmt_loc,\n+\t\t\t\t\t const source_range *param_range,\n+\t\t\t\t\t const char *corrected_substring,\n+\t\t\t\t\t int opt, const char *gmsgid, ...)\n+  ATTRIBUTE_GCC_DIAG (5,0);\n+\n+/* Implementation detail, for use when implementing\n+   LANG_HOOKS_GET_SUBSTRING_LOCATION.  */\n+\n extern const char *get_source_location_for_substring (cpp_reader *pfile,\n \t\t\t\t\t\t      string_concat_db *concats,\n \t\t\t\t\t\t      location_t strloc,"}, {"sha": "2867c1ec27f159ffab9e107dc6f1653311e0324e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e5106e27feded7797a6df36493aa37cb673bcad1", "patch": "@@ -1,3 +1,8 @@\n+2016-09-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/diagnostic_plugin_test_string_literals.c: Include\n+\t\"substring-locations.h\".\n+\n 2016-09-07  Richard Biener  <rguenther@suse.de>\n \n \tPR c/77450"}, {"sha": "99a504dc541566cd003f6f9295f0b9e9338e5d8a", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_string_literals.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_string_literals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5106e27feded7797a6df36493aa37cb673bcad1/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_string_literals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_string_literals.c?ref=e5106e27feded7797a6df36493aa37cb673bcad1", "patch": "@@ -33,6 +33,7 @@\n #include \"print-tree.h\"\n #include \"cpplib.h\"\n #include \"c-family/c-pragma.h\"\n+#include \"substring-locations.h\"\n \n int plugin_is_GPL_compatible;\n "}]}