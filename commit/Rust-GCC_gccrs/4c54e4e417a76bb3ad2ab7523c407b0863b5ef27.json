{"sha": "4c54e4e417a76bb3ad2ab7523c407b0863b5ef27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM1NGU0ZTQxN2E3NmJiM2FkMmFiNzUyM2M0MDdiMDg2M2I1ZWYyNw==", "commit": {"author": {"name": "Ian Dall", "email": "ian@sibyl.beware.dropbear.id.au", "date": "2000-01-27T19:20:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-01-27T19:20:51Z"}, "message": "ns32k update from Ian Dall and Hans-Peter Nilsson.\n\nCo-Authored-By: Hans-Peter Nilsson <hp@bitrange.com>\n\nFrom-SVN: r31648", "tree": {"sha": "920a3c0412552a45ac73432167c62a3796bedccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/920a3c0412552a45ac73432167c62a3796bedccf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27/comments", "author": null, "committer": null, "parents": [{"sha": "f85cedde612919b640d9bc1643645aef994cb4a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f85cedde612919b640d9bc1643645aef994cb4a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f85cedde612919b640d9bc1643645aef994cb4a0"}], "stats": {"total": 1043, "additions": 546, "deletions": 497}, "files": [{"sha": "332922211be0efbd4a3e001583965c56b1d074a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c54e4e417a76bb3ad2ab7523c407b0863b5ef27", "patch": "@@ -1,3 +1,51 @@\n+2000-01-27  Ian Dall  <ian@sibyl.beware.dropbear.id.au>\n+\t    Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* ns32k/xm-ns32k.h (memcpy, memset, memcmp): Delete.\n+\tRemove redundant include of xm-ns32k.h.\n+\t* ns32k/xm-genix.h (memcpy, memset, memcmp): Add definitions.\n+\tRemove redundant include of xm-ns32k.h.\n+\t* ns32k/xm-netbsd.h (memcpy, memset, memcmp): No longer undefine.\n+\tRemove redundant include of xm-ns32k.h.\n+\t* ns32k/netbsd.h (TARGET_DEFAULT): Enable multiply-add instructions.\n+\n+\t* ns32k/ns32k.h: Update comment on multiply-add instructions.\n+ \t(TARGET_SWITCHES): Add documentation strings.\n+\t(DWARF_FRAME_REGNUM): Override default definition.\n+\t(REG_CLASS_CONTENTS): Add comments.\n+\t(SUBSET_P): Format to reduce line length.\n+\t(SMALL_REGISTER_CLASSES): Make a run time option.\n+\t(GO_IF_NONINDEXED_ADDRESS): Reformat.\n+\t(GO_IF_LEGITIMATE_ADDRESS): Ensure that cfun is non NULL before\n+ \tdereferencing it. Braces to avoid \"ambiguous else\" were misplaced.\n+\t(regclass_map): fix typo in comment.\n+\t* ns32k/ns32k.c: Add spaces before parentheses for consistant style.\n+\tPrefer gen_rtx_FOO(...) to gen_rtx(FOO,...).\n+\t(trace, reg_or_mem_operand): Delete, unused function.\n+\t(calc_address_cost): Small offsets are cheaper than large ones.\n+\t(expand_block_move): Generate more efficient code when bytes is a\n+ \tknown at compile time.\n+\t* ns32k/ns32k.md: Alternate constraints for multiply-add instructions.\n+\t(udivmodsi4, udivmodhi4, udivmodqi4): Use nonimmediate_operand\n+ \tinstead of reg_or_mem_operand.  Use VOIDmode for load or push\n+ \teffective address.\n+\t\n+\t* ns32k/ns32k.md: Use nonimmediate_operand or stricter for outputs,\n+\tnot general_operand.  Similarly use \"=rm\" or stricter, not \"=g\".\n+\tFor input operands, use stricter constraints than \"g\" if not\n+\tgeneral_operand.  Similarly use stricter predicate than\n+\t\"general_operand\" when stricter constraints than \"g\" are present,\n+\texcept for matching constraints.\n+\t(movstrsi): Use \"memory_operand\" for operands 0 and 1.\n+\t(truncsiqi2, truncsihi2, trunchiqi2): Remove.\n+\t(udivmoddisi4_internal): Use nonimmediate_operand for operand 0,\n+\tnot reg_or_mem_operand.\n+\t(udivmoddisi4): Ditto.\n+\tUse nonimmediate_operand for operand 1, not reg_or_mem_operand.\n+\tUse nonimmediate_operand for operand 3, not register_operand.\n+\t(udivmoddiqi4_internal): Use register_operand for operand 1, not\n+\treg_or_mem_operand.\n+\n 2000-01-27  Fred Fish  <fnf@be.com>\n \n \t* gthr-posix.h: Fix typo; compatibily -> compatibility."}, {"sha": "22042b70a29e64ce8b7ebb2154cff59c072511de", "filename": "gcc/config/ns32k/netbsd.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fnetbsd.h?ref=4c54e4e417a76bb3ad2ab7523c407b0863b5ef27", "patch": "@@ -25,9 +25,10 @@ Boston, MA 02111-1307, USA.\n /* Compile for the floating point unit & 32532 by default;\n    Don't assume SB is zero;\n    Don't use bitfield instructions;\n-   FPU is 32381; */\n+   FPU is 32381;\n+   Use multiply-add instructions */\n \n-#define TARGET_DEFAULT (1 + 24 + 32 + 64 + 256)\n+#define TARGET_DEFAULT (1 + 24 + 32 + 64 + 256 + 512)\n \n /* 32-bit alignment for efficiency */\n \n@@ -110,4 +111,3 @@ Boston, MA 02111-1307, USA.\n /* Until they use ELF or something that handles dwarf2 unwinds\n    and initialization stuff better.  */\n #define DWARF2_UNWIND_INFO 0\n-"}, {"sha": "1d583e22b1c3d631f88aed4428d00ed8985f8149", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 149, "deletions": 147, "changes": 296, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=4c54e4e417a76bb3ad2ab7523c407b0863b5ef27", "patch": "@@ -69,9 +69,9 @@ hard_regno_mode_ok (regno, mode)\n      int regno;\n      enum machine_mode mode;\n {\n-  int size = GET_MODE_UNIT_SIZE(mode);\n+  int size = GET_MODE_UNIT_SIZE (mode);\n \n-  if (FLOAT_MODE_P(mode))\n+  if (FLOAT_MODE_P (mode))\n     {\n       if (size == UNITS_PER_WORD && regno < L1_REGNUM)\n \treturn 1;\n@@ -90,34 +90,34 @@ hard_regno_mode_ok (regno, mode)\n   return 0;\n }\n \n-int register_move_cost(CLASS1, CLASS2)\n+int register_move_cost (CLASS1, CLASS2)\n      enum reg_class CLASS1;\n      enum reg_class CLASS2;\n {\n   if (CLASS1 == NO_REGS || CLASS2 == NO_REGS)\n     return 2;\n-  if((SUBSET_P(CLASS1, FP_REGS) && !SUBSET_P(CLASS2, FP_REGS))\n-   || (!SUBSET_P(CLASS1, FP_REGS) && SUBSET_P(CLASS2, FP_REGS)))\n+  if ((SUBSET_P (CLASS1, FP_REGS) && !SUBSET_P (CLASS2, FP_REGS))\n+   || (!SUBSET_P (CLASS1, FP_REGS) && SUBSET_P (CLASS2, FP_REGS)))\n     return 8;\n-  if (((CLASS1) == STACK_POINTER_REG && !SUBSET_P(CLASS2,GENERAL_REGS))\n-      || ((CLASS2) == STACK_POINTER_REG && !SUBSET_P(CLASS1,GENERAL_REGS)))\n+  if (((CLASS1) == STACK_POINTER_REG && !SUBSET_P (CLASS2,GENERAL_REGS))\n+      || ((CLASS2) == STACK_POINTER_REG && !SUBSET_P (CLASS1,GENERAL_REGS)))\n     return 6;\n-  if (((CLASS1) == FRAME_POINTER_REG && !SUBSET_P(CLASS2,GENERAL_REGS))\n-      || ((CLASS2) == FRAME_POINTER_REG && !SUBSET_P(CLASS1,GENERAL_REGS)))\n+  if (((CLASS1) == FRAME_POINTER_REG && !SUBSET_P (CLASS2,GENERAL_REGS))\n+      || ((CLASS2) == FRAME_POINTER_REG && !SUBSET_P (CLASS1,GENERAL_REGS)))\n     return 6;\n   return 2;\n }\n \n #if 0\n /* We made the insn definitions copy from floating point to general\n   registers via the stack. */\n-int secondary_memory_needed(CLASS1, CLASS2, M)\n+int secondary_memory_needed (CLASS1, CLASS2, M)\n      enum reg_class CLASS1;\n      enum reg_class CLASS2;\n      enum machine_mode M;\n {\n-  int ret = ((SUBSET_P(CLASS1, FP_REGS) && !SUBSET_P(CLASS2, FP_REGS))\n-   || (!SUBSET_P(CLASS1, FP_REGS) && SUBSET_P(CLASS2, FP_REGS)));\n+  int ret = ((SUBSET_P (CLASS1, FP_REGS) && !SUBSET_P (CLASS2, FP_REGS))\n+   || (!SUBSET_P (CLASS1, FP_REGS) && SUBSET_P (CLASS2, FP_REGS)));\n   return ret;\n }\n #endif\n@@ -133,28 +133,34 @@ calc_address_cost (operand)\n {\n   int i;\n   int cost = 0;\n-  \n   if (GET_CODE (operand) == MEM)\n     cost += 3;\n   if (GET_CODE (operand) == MULT)\n     cost += 2;\n-#if 0\n-  if (GET_CODE (operand) == REG)\n-    cost += 1;\t\t\t/* not really, but the documentation\n-\t\t\t\t   says different amount of registers\n-\t\t\t\t   shouldn't return the same costs */\n-#endif\n   switch (GET_CODE (operand))\n     {\n     case REG:\n-    case CONST:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case SYMBOL_REF:\n-    case LABEL_REF:\n+      cost += 1;\n+      break;\n     case POST_DEC:\n     case PRE_DEC:\n       break;\n+    case CONST_INT:\n+      if (INTVAL (operand) <= 7 && INTVAL (operand) >= -8)\n+\tbreak;\n+      if (INTVAL (operand) < 0x2000 && INTVAL (operand) >= -0x2000)\n+\t{\n+\t  cost +=1;\n+\t  break;\n+\t}\n+    case CONST:\n+    case LABEL_REF:\n+    case SYMBOL_REF:\n+      cost +=3;\n+      break;\n+    case CONST_DOUBLE:\n+      cost += 5;\n+      break;\n     case MEM:\n       cost += calc_address_cost (XEXP (operand, 0));\n       break;\n@@ -196,6 +202,7 @@ secondary_reload_class (class, mode, in)\n /* The expression to be build is BASE[INDEX:SCALE].  To recognize this,\n    scale must be converted from an exponent (from ASHIFT) to a\n    multiplier (for MULT). */\n+\n static rtx\n gen_indexed_expr (base, index, scale)\n      rtx base, index, scale;\n@@ -212,20 +219,6 @@ gen_indexed_expr (base, index, scale)\n   return addr;\n }\n \n-/* Return 1 if OP is a valid operand of mode MODE.  This\n-   predicate rejects operands which do not have a mode\n-   (such as CONST_INT which are VOIDmode).  */\n-int\n-reg_or_mem_operand (op, mode)\n-     register rtx op;\n-     enum machine_mode mode;\n-{\n-  return (GET_MODE (op) == mode\n-\t  && (GET_CODE (op) == REG\n-\t      || GET_CODE (op) == SUBREG\n-\t      || GET_CODE (op) == MEM));\n-}\n-\n \f\n /* Split one or more DImode RTL references into pairs of SImode\n    references.  The RTL can be REG, offsettable MEM, integer constant, or\n@@ -256,7 +249,7 @@ split_di (operands, num, lo_half, hi_half)\n \t  hi_half[num] = adj_offsettable_operand (operands[num], 4);\n \t}\n       else\n-\tabort();\n+\tabort ();\n     }\n }\n \f\n@@ -414,29 +407,29 @@ output_move_double (operands)\n    operands[3] is the alignment.  */\n \n static void\n-move_tail(operands, bytes, offset)\n+move_tail (operands, bytes, offset)\n      rtx operands[];\n      int bytes;\n      int offset;\n {\n   if (bytes & 2)\n     {\n       rtx src, dest;\n-      dest = change_address(operands[0], HImode,\n-\t\t\t    plus_constant(XEXP(operands[0], 0), offset));\n-      src = change_address(operands[1], HImode,\n-\t\t\t   plus_constant(XEXP(operands[1], 0), offset));\n-      emit_move_insn(dest, src);\n+      dest = change_address (operands[0], HImode,\n+\t\t\t    plus_constant (XEXP (operands[0], 0), offset));\n+      src = change_address (operands[1], HImode,\n+\t\t\t   plus_constant (XEXP (operands[1], 0), offset));\n+      emit_move_insn (dest, src);\n       offset += 2;\n     }\n   if (bytes & 1)\n     {\n       rtx src, dest;\n-      dest = change_address(operands[0], QImode,\n-\t\t\t    plus_constant(XEXP(operands[0], 0), offset));\n-      src = change_address(operands[1], QImode,\n-\t\t\t   plus_constant(XEXP(operands[1], 0), offset));\n-      emit_move_insn(dest, src);\n+      dest = change_address (operands[0], QImode,\n+\t\t\t    plus_constant (XEXP (operands[0], 0), offset));\n+      src = change_address (operands[1], QImode,\n+\t\t\t   plus_constant (XEXP (operands[1], 0), offset));\n+      emit_move_insn (dest, src);\n     }\n }\n \n@@ -449,9 +442,9 @@ expand_block_move (operands)\n   int constp\t= (GET_CODE (bytes_rtx) == CONST_INT);\n   int bytes\t= (constp ? INTVAL (bytes_rtx) : 0);\n   int align\t= INTVAL (align_rtx);\n-  rtx src_reg = gen_rtx(REG, Pmode, 1);\n-  rtx dest_reg = gen_rtx(REG, Pmode, 2);\n-  rtx count_reg = gen_rtx(REG, SImode, 0);\n+  rtx src_reg = gen_rtx_REG (Pmode, 1);\n+  rtx dest_reg = gen_rtx_REG (Pmode, 2);\n+  rtx count_reg = gen_rtx_REG (SImode, 0);\n \n   if (constp && bytes <= 0)\n     return;\n@@ -460,46 +453,48 @@ expand_block_move (operands)\n     {\n       int words = bytes >> 2;\n       if (words)\n-      {\n-\tif (words < 3 || flag_unroll_loops)\n-\t  {\n-\t    int offset = 0;\n-\t    for (; words; words--, offset += 4)\n-\t      {\n-\t\trtx src, dest;\n-\t\tdest = change_address(operands[0], SImode,\n-\t\t\t\t      plus_constant(XEXP(operands[0], 0), offset));\n-\t\tsrc = change_address(operands[1], SImode,\n-\t\t\t\t     plus_constant(XEXP(operands[1], 0), offset));\n-\t\temit_move_insn(dest, src);\n-\t      }\n-\t  }\n-\telse\n-\t  {\n-\t    /* Use movmd. It is slower than multiple movd's but more\n-\t       compact. It is also slower than movsd for large copies\n-\t       but causes less registers reloading so is better than movsd\n-\t       for small copies. */\n-\t    rtx src, dest;\n-\t    dest = copy_addr_to_reg (XEXP(operands[0], 0));\n-\t    src = copy_addr_to_reg (XEXP(operands[1], 0));\n+\t{\n+\t  if (words < 3 || flag_unroll_loops)\n+\t    {\n+\t      int offset = 0;\n+\t      for (; words; words--, offset += 4)\n+\t\t{\n+\t\t  rtx src, dest;\n+\t\t  dest = change_address (operands[0], SImode,\n+\t\t\t\t\tplus_constant (XEXP (operands[0], 0), offset));\n+\t\t  src = change_address (operands[1], SImode,\n+\t\t\t\t       plus_constant (XEXP (operands[1], 0), offset));\n+\t\t  emit_move_insn (dest, src);\n+\t\t}\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Use movmd. It is slower than multiple movd's but more\n+\t\t compact. It is also slower than movsd for large copies\n+\t\t but causes less registers reloading so is better than movsd\n+\t\t for small copies. */\n+\t      rtx src, dest;\n+\t      dest = copy_addr_to_reg (XEXP (operands[0], 0));\n+\t      src = copy_addr_to_reg (XEXP (operands[1], 0));\n \t    \n-\t    emit_insn(gen_movstrsi2(dest, src, GEN_INT(words)));\n-\t  }\n-      }\n-      move_tail(operands, bytes & 3, bytes & ~3);\n+\t      emit_insn (gen_movstrsi2(dest, src, GEN_INT (words)));\n+\t    }\n+\t}\n+      move_tail (operands, bytes & 3, bytes & ~3);\n       return;\n     }\n \n   if (align > UNITS_PER_WORD)\n     align = UNITS_PER_WORD;\n \n   /* Move the address into scratch registers.  */\n-  emit_insn(gen_rtx(CLOBBER, VOIDmode, dest_reg));\n-  emit_move_insn(dest_reg, XEXP (operands[0], 0));\n-  emit_insn(gen_rtx(CLOBBER, VOIDmode, src_reg));\n-  emit_move_insn(src_reg, XEXP (operands[1], 0));\n-  emit_insn(gen_rtx(CLOBBER, VOIDmode, count_reg));\n+  emit_insn (gen_rtx_CLOBBER (VOIDmode, dest_reg));\n+  emit_move_insn (dest_reg, XEXP (operands[0], 0));\n+  operands[0] = gen_rtx_MEM (SImode, dest_reg);\n+  emit_insn (gen_rtx_CLOBBER (VOIDmode, src_reg));\n+  emit_move_insn (src_reg, XEXP (operands[1], 0));\n+  operands[1] = gen_rtx_MEM (SImode, src_reg);\n+  emit_insn (gen_rtx_CLOBBER (VOIDmode, count_reg));\n \n   if (constp && (align == UNITS_PER_WORD || bytes < MAX_UNALIGNED_COPY))\n     {\n@@ -508,20 +503,27 @@ expand_block_move (operands)\n        */\n       if (bytes >> 2)\n \t{\n-\t  emit_move_insn(count_reg, GEN_INT(bytes >> 2));\n-\t  emit_insn(gen_movstrsi1 (GEN_INT(4)));\n+\t  emit_move_insn (count_reg, GEN_INT (bytes >> 2));\n+\t  emit_insn (gen_movstrsi1 (GEN_INT (4)));\n \t}\n       /* insns to copy rest */\n-      move_tail(operands, bytes & 3, bytes & ~3);\n+      move_tail (operands, bytes & 3, 0);\n     }\n   else if (align == UNITS_PER_WORD)\n     {\n       /* insns to copy by words */\n-      emit_insn(gen_lshrsi3 (count_reg, bytes_rtx, GEN_INT(2)));\n-      emit_insn(gen_movstrsi1 (GEN_INT(4)));\n-      /* insns to copy rest */\n-      emit_insn(gen_andsi3 (count_reg, bytes_rtx, GEN_INT(3)));\n-      emit_insn(gen_movstrsi1 (const1_rtx));\n+      emit_insn (gen_lshrsi3 (count_reg, bytes_rtx, GEN_INT (2)));\n+      emit_insn (gen_movstrsi1 (GEN_INT (4)));\n+      if (constp)\n+\t{\n+\t  move_tail (operands, bytes & 3, 0);\n+\t}\n+      else\n+\t{\n+\t  /* insns to copy rest */\n+\t  emit_insn (gen_andsi3 (count_reg, bytes_rtx, GEN_INT (3)));\n+\t  emit_insn (gen_movstrsi1 (const1_rtx));\n+\t}\n     }\n   else\n     {\n@@ -531,32 +533,32 @@ expand_block_move (operands)\n       rtx aligned_label = gen_label_rtx ();\n       rtx bytes_reg;\n \n-      bytes_reg = copy_to_mode_reg(SImode, bytes_rtx);\n+      bytes_reg = copy_to_mode_reg (SImode, bytes_rtx);\n       if (!constp)\n \t{\n \t  /* Emit insns to test and skip over the alignment if it is\n \t   * not worth it. This doubles as a test to ensure that the alignment\n \t   * operation can't copy too many bytes\n \t   */\n-\t  emit_insn(gen_cmpsi (bytes_reg, GEN_INT(MAX_UNALIGNED_COPY)));\n+\t  emit_insn (gen_cmpsi (bytes_reg, GEN_INT (MAX_UNALIGNED_COPY)));\n \t  emit_jump_insn (gen_blt (aligned_label));\n \t}\n \n       /* Emit insns to do alignment at run time */\n-      emit_insn(gen_negsi2 (count_reg, src_reg));\n-      emit_insn(gen_andsi3 (count_reg, count_reg, GEN_INT(3)));\n-      emit_insn(gen_subsi3 (bytes_reg, bytes_reg, count_reg));\n-      emit_insn(gen_movstrsi1 (const1_rtx));\n+      emit_insn (gen_negsi2 (count_reg, src_reg));\n+      emit_insn (gen_andsi3 (count_reg, count_reg, GEN_INT (3)));\n+      emit_insn (gen_subsi3 (bytes_reg, bytes_reg, count_reg));\n+      emit_insn (gen_movstrsi1 (const1_rtx));\n       if (!constp)\n \temit_label (aligned_label);\n \n       /* insns to copy by words */\n-      emit_insn (gen_lshrsi3 (count_reg, bytes_reg, GEN_INT(2)));\n-      emit_insn(gen_movstrsi1 (GEN_INT(4)));\n+      emit_insn (gen_lshrsi3 (count_reg, bytes_reg, GEN_INT (2)));\n+      emit_insn (gen_movstrsi1 (GEN_INT (4)));\n \n       /* insns to copy rest */\n-      emit_insn (gen_andsi3 (count_reg, bytes_reg, GEN_INT(3)));\n-      emit_insn(gen_movstrsi1 (const1_rtx));    \n+      emit_insn (gen_andsi3 (count_reg, bytes_reg, GEN_INT (3)));\n+      emit_insn (gen_movstrsi1 (const1_rtx));\n     }\n }\n \f\n@@ -759,7 +761,7 @@ print_operand (file, x, code)\n \t{ \n \t  union { double d; int i[2]; } u;\n \t  u.i[0] = CONST_DOUBLE_LOW (x); u.i[1] = CONST_DOUBLE_HIGH (x);\n-\t  PUT_IMMEDIATE_PREFIX(file);\n+\t  PUT_IMMEDIATE_PREFIX (file);\n #ifdef SEQUENT_ASM\n \t  /* Sequent likes its floating point constants as integers */\n \t  fprintf (file, \"0Dx%08x%08x\", u.i[1], u.i[0]);\n@@ -798,10 +800,10 @@ print_operand (file, x, code)\n           && GET_CODE (x) == CONST\n           && symbolic_reference_mentioned_p (x))\n         {\n-\t  fprintf(stderr, \"illegal constant for pic-mode: \\n\");\n-\t  print_rtl(stderr, x);\n-          fprintf(stderr, \"\\nGET_CODE (x) == %d, CONST == %d, symbolic_reference_mentioned_p (x) == %d\\n\",\n-\t\t  GET_CODE (x), CONST, symbolic_reference_mentioned_p(x));\n+\t  fprintf (stderr, \"illegal constant for pic-mode: \\n\");\n+\t  print_rtl (stderr, x);\n+          fprintf (stderr, \"\\nGET_CODE (x) == %d, CONST == %d, symbolic_reference_mentioned_p (x) == %d\\n\",\n+\t\t  GET_CODE (x), CONST, symbolic_reference_mentioned_p (x));\n \t  abort ();\n \t}\n       else if (flag_pic\n@@ -1025,7 +1027,7 @@ print_operand_address (file, addr)\n \tfprintf (file, \"(sb))\");\n         break;\n       case MEM:\n-\taddr = XEXP(base,0);\n+\taddr = XEXP (base,0);\n \tbase = NULL;\n \toffset = NULL;\n \twhile (addr != NULL)\n@@ -1127,46 +1129,46 @@ output_shift_insn (operands)\n   if (GET_CODE (operands[2]) == CONST_INT\n       && INTVAL (operands[2]) > 0\n       && INTVAL (operands[2]) <= 3)\n-  {\n-    if (GET_CODE (operands[0]) == REG)\n-      {\n-\tif (GET_CODE (operands[1]) == REG)\n-\t  {\n-\t    if (REGNO (operands[0]) == REGNO (operands[1]))\n-\t      {\n-\t\tif (operands[2] == const1_rtx)\n-\t\t  return \"addd %0,%0\";\n-\t\telse if (INTVAL (operands[2]) == 2)\n-\t\t  return \"addd %0,%0\\n\\taddd %0,%0\";\n-\t      }\n-\t    if (operands[2] == const1_rtx)\n-\t      return \"movd %1,%0\\n\\taddd %0,%0\";\n+    {\n+      if (GET_CODE (operands[0]) == REG)\n+\t{\n+\t  if (GET_CODE (operands[1]) == REG)\n+\t    {\n+\t      if (REGNO (operands[0]) == REGNO (operands[1]))\n+\t\t{\n+\t\t  if (operands[2] == const1_rtx)\n+\t\t    return \"addd %0,%0\";\n+\t\t  else if (INTVAL (operands[2]) == 2)\n+\t\t    return \"addd %0,%0\\n\\taddd %0,%0\";\n+\t\t}\n+\t      if (operands[2] == const1_rtx)\n+\t\treturn \"movd %1,%0\\n\\taddd %0,%0\";\n \t    \n-\t    operands[1] = gen_indexed_expr (const0_rtx, operands[1], operands[2]);\n-\t    return \"addr %a1,%0\";\n-\t  }\n-\tif (operands[2] == const1_rtx)\n-\t  return \"movd %1,%0\\n\\taddd %0,%0\";\n-      }\n-    else if (GET_CODE (operands[1]) == REG)\n-      {\n-\toperands[1] = gen_indexed_expr (const0_rtx, operands[1], operands[2]);\n-\treturn \"addr %a1,%0\";\n-      }\n-    else if (INTVAL (operands[2]) == 1\n-\t     && GET_CODE (operands[1]) == MEM\n-\t     && rtx_equal_p (operands [0], operands[1]))\n-      {\n-\trtx temp = XEXP (operands[1], 0);\n+\t      operands[1] = gen_indexed_expr (const0_rtx, operands[1], operands[2]);\n+\t      return \"addr %a1,%0\";\n+\t    }\n+\t  if (operands[2] == const1_rtx)\n+\t    return \"movd %1,%0\\n\\taddd %0,%0\";\n+\t}\n+      else if (GET_CODE (operands[1]) == REG)\n+\t{\n+\t  operands[1] = gen_indexed_expr (const0_rtx, operands[1], operands[2]);\n+\t  return \"addr %a1,%0\";\n+\t}\n+      else if (INTVAL (operands[2]) == 1\n+\t       && GET_CODE (operands[1]) == MEM\n+\t       && rtx_equal_p (operands [0], operands[1]))\n+\t{\n+\t  rtx temp = XEXP (operands[1], 0);\n \t\n-\tif (GET_CODE (temp) == REG\n-\t    || (GET_CODE (temp) == PLUS\n-\t\t&& GET_CODE (XEXP (temp, 0)) == REG\n-\t\t&& GET_CODE (XEXP (temp, 1)) == CONST_INT))\n-\t  return \"addd %0,%0\";\n-      }\n-    else return \"ashd %2,%0\";\n-  }\n+\t  if (GET_CODE (temp) == REG\n+\t      || (GET_CODE (temp) == PLUS\n+\t\t  && GET_CODE (XEXP (temp, 0)) == REG\n+\t\t  && GET_CODE (XEXP (temp, 1)) == CONST_INT))\n+\t    return \"addd %0,%0\";\n+\t}\n+      else return \"ashd %2,%0\";\n+    }\n   return \"ashd %2,%0\";\n }\n "}, {"sha": "92a35dab19c608f8af1cbdc9bf11ea884e42ffc7", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 63, "deletions": 50, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=4c54e4e417a76bb3ad2ab7523c407b0863b5ef27", "patch": "@@ -66,13 +66,8 @@ extern int target_flags;\n #define TARGET_32081 (target_flags & 1)\n #define TARGET_32381 (target_flags & 256)\n \n-/* The use of multiply-add instructions is optional because it can\n- * cause an abort due to being unable to find a spill register. The\n- * main problem is that the multiply-add instructions require f0 and\n- * f0 is not available for spilling because it is \"explicitly\n- * mentioned\" in the rtl for function return values. This can be fixed\n- * by defining SMALL_REGISTER_CLASSES, but that causes worse code for\n- * the (more common) integer case. We really need better reload code.\n+/* The use of multiply-add instructions is optional because there may\n+ * be cases where it produces worse code.\n  */\n \n #define TARGET_MULT_ADD (target_flags & 512)\n@@ -103,27 +98,29 @@ extern int target_flags;\n    where VALUE is the bits to set or minus the bits to clear.\n    An empty string NAME is used to identify the default VALUE.  */\n \n-#define TARGET_SWITCHES\t\t\t\t\\\n-  { { \"32081\", 1},\t\t\t\t\\\n-    { \"soft-float\", -257},\t\t\t\\\n-    { \"rtd\", 2},\t\t\t\t\\\n-    { \"nortd\", -2},\t\t\t\t\\\n-    { \"regparm\", 4},\t\t\t\t\\\n-    { \"noregparm\", -4},\t\t\t\t\\\n-    { \"32532\", 24},\t\t\t\t\\\n-    { \"32332\", -8},\t\t\t\t\\\n-    { \"32332\", 16},\t\t\t\t\\\n-    { \"32032\", -24},\t\t\t\t\\\n-    { \"sb\", -32},\t\t\t\t\\\n-    { \"nosb\", 32},\t\t\t\t\\\n-    { \"bitfield\", -64},\t\t\t\t\\\n-    { \"nobitfield\", 64},\t\t\t\\\n-    { \"himem\", 128},\t\t\t\t\\\n-    { \"nohimem\", -128},\t\t\t\t\\\n-    { \"32381\", 256},\t\t\t\t\\\n-    { \"mult-add\", 512},\t\t\t\t\\\n-    { \"nomult-add\", -512},            \t\t\\\n-    { \"\", TARGET_DEFAULT}}\n+#define TARGET_SWITCHES\t\t\t\t\t\t\t      \\\n+  { { \"32081\", 1, \"Use hardware fp\"},\t\t\t\t\t      \\\n+    { \"soft-float\", -257, \"Don't use hardware fp\"},\t\t\t      \\\n+    { \"rtd\", 2, \"Alternative calling convention\"},\t\t\t      \\\n+    { \"nortd\", -2, \"Use normal calling convention\"},\t\t\t      \\\n+    { \"regparm\", 4, \"Pass some arguments in registers\"},\t\t      \\\n+    { \"noregparm\", -4, \"Pass all arguments on stack\"},\t\t\t      \\\n+    { \"32532\", 24, \"Optimize for 32532 cpu\"},\t\t\t\t      \\\n+    { \"32332\", 16, \"Optimize for 32332 cpu\"},\t\t\t\t      \\\n+    { \"32332\", -8, 0},\t\t\t\t\t\t\t      \\\n+    { \"32032\", -24, \"Optimize for 32032\"},\t\t\t\t      \\\n+    { \"sb\", -32, \"Register sb is zero. Use for absolute addressing\"},\t      \\\n+    { \"nosb\", 32, \"Do not use register sb\"},\t\t\t\t      \\\n+    { \"bitfield\", -64, \"Do not use bitfield instructions\"},\t\t      \\\n+    { \"nobitfield\", 64, \"Use bitfield instructions\"},\t\t\t      \\\n+    { \"himem\", 128, \"Generate code for high memory\"},\t\t\t      \\\n+    { \"nohimem\", -128, \"Generate code for low memory\"},\t\t\t      \\\n+    { \"32381\", 256, \"32381 fpu\"},\t\t\t\t\t      \\\n+    { \"mult-add\", 512, \"Use multiply-accumulate fp instructions\"},\t      \\\n+    { \"nomult-add\", -512, \"Do not use multiply-accumulate fp instructions\" }, \\\n+    { \"src\", 1024, \"\\\"Small register classes\\\" kludge\"},\t\t      \\\n+    { \"nosrc\", -1024, \"No \\\"Small register classes\\\" kludge\"},\t\t      \\\n+    { \"\", TARGET_DEFAULT, 0}}\n \n /* TARGET_DEFAULT is defined in encore.h, pc532.h, etc.  */\n \n@@ -304,6 +301,11 @@ while (0)\n    : (REGNO) == FRAME_POINTER_REGNUM? 17 \\\n    : 16)\n \n+/* dwarf2out.c can't understand the funny DBX register numbering.\n+ * We use dwarf2out.c for exception handling even though we use DBX\n+ * for debugging\n+ */\n+#define DWARF_FRAME_REGNUM(REGNO) (REGNO)\n \n \n \n@@ -408,13 +410,23 @@ enum reg_class\n    This is an initializer for a vector of HARD_REG_SET\n    of length N_REG_CLASSES.  */\n \n-#define REG_CLASS_CONTENTS {{0}, {0x00ff}, {0x100}, {0x300}, {0xff00}, \\\n-                            {0xffff00}, {0xffffff}, {0x1000000}, {0x2000000}, \\\n-                            {0x30000ff}, {0x3ffffff} }\n-\n-#define SUBSET_P(CLASS1, CLASS2) \\\n-   ((ns32k_reg_class_contents[CLASS1][0] & ~ns32k_reg_class_contents[CLASS2][0]) \\\n-     == 0)\n+#define REG_CLASS_CONTENTS\t\t\t\t\\\n+\t{{0},\t\t\t/* NO_REGS */\t\t\\\n+\t {0x00ff},\t\t/* GENERAL_REGS */\t\\\n+\t {0x100},\t\t/* FLOAT_REG0 */\t\\\n+\t {0x300},\t\t/* LONG_FLOAT_REG0 */\t\\\n+\t {0xff00},\t\t/* FLOAT_REGS */\t\\\n+         {0xffff00},\t\t/* FP_REGS */\t\t\\\n+         {0xffffff},\t\t/* GEN_AND_FP_REGS */\t\\\n+         {0x1000000},\t\t/* FRAME_POINTER_REG */\t\\\n+         {0x2000000},\t\t/* STACK_POINTER_REG */\t\\\n+         {0x30000ff},\t\t/* GEN_AND_MEM_REGS */\t\\\n+\t {0x3ffffff}\t\t/* ALL_REGS */\t\t\\\n+\t}\n+\n+#define SUBSET_P(CLASS1, CLASS2)\t\t\t\\\n+   ((ns32k_reg_class_contents[CLASS1][0]\t\t\\\n+     & ~ns32k_reg_class_contents[CLASS2][0]) == 0)\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing\n@@ -1036,10 +1048,10 @@ __transfer_from_trampoline ()\t\t\\\n      secondary_memory_needed(CLASS1, CLASS2, M)\n #endif\n \n-/* SMALL_REGISTER_CLASSES is true only if we have said we are using the\n- * multiply-add instructions.\n- */\n-#define SMALL_REGISTER_CLASSES (target_flags & 512)\n+/* SMALL_REGISTER_CLASSES is a run time option. This should no longer\n+   be necessay and should go when we have confidence that we won't run\n+   out of spill registers */\n+#define SMALL_REGISTER_CLASSES (target_flags & 1024)\n \n /* A C expression whose value is nonzero if pseudos that have been\n    assigned to registers of class CLASS would likely be spilled\n@@ -1144,13 +1156,14 @@ __transfer_from_trampoline ()\t\t\\\n \n /* Go to ADDR if X is a valid address not using indexing.\n    (This much is the easy part.)  */\n-#define GO_IF_NONINDEXED_ADDRESS(X, ADDR)  \\\n-{ if (INDIRECTABLE_1_ADDRESS_P (X)) goto ADDR;\t\t\t\t\\\n-  if (INDIRECTABLE_2_ADDRESS_P (X)) goto ADDR;\t\t\t\t\\\n-  if (GET_CODE (X) == PLUS)\t\t\t\t\t\t\\\n-    if (CONSTANT_ADDRESS_NO_LABEL_P (XEXP (X, 1)))\t\t\t\\\n-      if (INDIRECTABLE_2_ADDRESS_P (XEXP (X, 0)))\t\t\t\\\n-\tgoto ADDR;\t\t\t\t\t\t\t\\\n+#define GO_IF_NONINDEXED_ADDRESS(X, ADDR)\t\t\\\n+{ \t\t\t\t\t\t\t\\\n+  if (INDIRECTABLE_1_ADDRESS_P (X)) goto ADDR;\t\t\\\n+  if (INDIRECTABLE_2_ADDRESS_P (X)) goto ADDR;\t\t\\\n+  if (GET_CODE (X) == PLUS)\t\t\t\t\\\n+    if (CONSTANT_ADDRESS_NO_LABEL_P (XEXP (X, 1)))\t\\\n+      if (INDIRECTABLE_2_ADDRESS_P (XEXP (X, 0)))\t\\\n+\tgoto ADDR;\t\t\t\t\t\\\n }\n \n /* Go to ADDR if X is a valid address not using indexing.\n@@ -1189,11 +1202,11 @@ __transfer_from_trampoline ()\t\t\\\n    ((xfoo2 < 4 && xfoo2 != 2) || xfoo2 == 7))\n \n /* Note that xfoo0, xfoo1, xfoo2 are used in some of the submacros above.  */\n-#define GO_IF_LEGITIMATE_ADDRESS(MODE, X, ADDR) \\\n+#define GO_IF_LEGITIMATE_ADDRESS(MODE, X, ADDR)\t\t\t\t\\\n { register rtx xfooy, xfoo0, xfoo1;\t\t\t\t\t\\\n   unsigned xfoo2;\t\t\t\t\t\t\t\\\n   xfooy = X;\t\t\t\t\t\t\t\t\\\n-  if (flag_pic && ! current_function_uses_pic_offset_table\t\t\\\n+  if (flag_pic && cfun && ! current_function_uses_pic_offset_table\t\\\n       && global_symbolic_reference_mentioned_p (X, 1))\t\t\t\\\n     current_function_uses_pic_offset_table = 1;\t\t\t\t\\\n   GO_IF_NONINDEXED_ADDRESS (xfooy, ADDR);\t\t\t\t\\\n@@ -1212,8 +1225,8 @@ __transfer_from_trampoline ()\t\t\\\n   else if (GET_CODE (xfooy) == PRE_DEC)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (REGNO (XEXP (xfooy, 0)) == STACK_POINTER_REGNUM) goto ADDR;\t\\\n+      else abort ();\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-  else abort ();\t\t\t\t\t\t\t\\\n }\n \n /* Try machine-dependent ways of modifying an illegitimate address\n@@ -1679,7 +1692,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n extern unsigned int ns32k_reg_class_contents[N_REG_CLASSES][1];\n extern const char *const ns32k_out_reg_names[];\n-extern enum reg_class regclass_map[];\t\t/* smalled class containing REGNO */\n+extern enum reg_class regclass_map[];\t\t/* smallest class containing REGNO */\n \n /*\n Local variables:"}, {"sha": "94511e9a74d69bc1891388c0deeee4076f0742bd", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 279, "deletions": 286, "changes": 565, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=4c54e4e417a76bb3ad2ab7523c407b0863b5ef27", "patch": "@@ -53,6 +53,13 @@\n ;; but with the proper definition of LEGITIMATE_PIC_OPERAND (ns32k.h)\n ;; this is unnecessary.\n ;;\n+\n+;; It seems that in current CVS (2000-01-11), at least with\n+;; libgcc2.a, that register allocation gets worse when changing\n+;; \"general_operand\" \"0\" to \"nonimmediate_operand\" \"0\" (and\n+;; similar \"0\"-containing constraints), if operand 0 is (e.g.)\n+;; \"nonimmediate_operand\" \"=rm\".  Revisit and test later.\n+\n (define_insn \"tstsi\"\n   [(set (cc0)\n \t(match_operand:SI 0 \"nonimmediate_operand\" \"rm\"))]\n@@ -64,7 +71,7 @@\n \n (define_insn \"tsthi\"\n   [(set (cc0)\n-\t(match_operand:HI 0 \"nonimmediate_operand\" \"g\"))]\n+\t(match_operand:HI 0 \"nonimmediate_operand\" \"rm\"))]\n   \"\"\n   \"*\n { cc_status.flags |= CC_REVERSED;\n@@ -73,7 +80,7 @@\n \n (define_insn \"tstqi\"\n   [(set (cc0)\n-\t(match_operand:QI 0 \"nonimmediate_operand\" \"g\"))]\n+\t(match_operand:QI 0 \"nonimmediate_operand\" \"rm\"))]\n   \"\"\n   \"*\n { cc_status.flags |= CC_REVERSED;\n@@ -209,7 +216,7 @@\n ;; in practice, though the stack slots used are not available for\n ;; optimization.\n (define_insn \"movdf\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=lg<\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=lrm<\")\n \t(match_operand:DF 1 \"general_operand\" \"lFg\"))]\n   \"\"\n   \"*\n@@ -243,7 +250,7 @@\n }\")\n \n (define_insn \"movsf\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=fg<\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=frm<\")\n \t(match_operand:SF 1 \"general_operand\" \"fFg\"))]\n   \"\"\n   \"*\n@@ -292,7 +299,7 @@\n   \"movmd %1,%0,4\")\n \n (define_insn \"movdi\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=g<,*f,g\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm<,*f,rm\")\n \t(match_operand:DI 1 \"general_operand\" \"gF,g,*f\"))]\n   \"\"\n   \"*\n@@ -333,7 +340,7 @@\n   \"lprd sp,%0\")\n \n (define_insn \"movsi\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<,g<,*f,g,x\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<,rm<,*f,rm,x\")\n \t(match_operand:SI 1 \"general_operand\" \"g,?xy,g,*f,rmn\"))]\n   \"\"\n   \"*\n@@ -425,7 +432,7 @@\n }\")\n \n (define_insn \"movhi\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<,*f,g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<,*f,rm\")\n \t(match_operand:HI 1 \"general_operand\" \"g,g,*f\"))]\n   \"\"\n   \"*\n@@ -459,7 +466,7 @@\n }\")\n \n (define_insn \"movstricthi\"\n-  [(set (strict_low_part (match_operand:HI 0 \"general_operand\" \"+r\"))\n+  [(set (strict_low_part (match_operand:HI 0 \"register_operand\" \"+r\"))\n \t(match_operand:HI 1 \"general_operand\" \"g\"))]\n   \"\"\n   \"*\n@@ -471,7 +478,7 @@\n }\")\n \n (define_insn \"movqi\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<,*f,g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<,*f,rm\")\n \t(match_operand:QI 1 \"general_operand\" \"g,g,*f\"))]\n   \"\"\n   \"*\n@@ -504,7 +511,7 @@\n }\")\n \n (define_insn \"movstrictqi\"\n-  [(set (strict_low_part (match_operand:QI 0 \"general_operand\" \"+r\"))\n+  [(set (strict_low_part (match_operand:QI 0 \"register_operand\" \"+r\"))\n \t(match_operand:QI 1 \"general_operand\" \"g\"))]\n   \"\"\n   \"*\n@@ -527,8 +534,8 @@\n ;; which can be used to generate more complex code.\n \n (define_expand \"movstrsi\"\n-  [(parallel [(set (match_operand:BLK 0 \"general_operand\" \"\")\n-\t\t   (match_operand:BLK 1 \"general_operand\" \"\"))\n+  [(parallel [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n+\t\t   (match_operand:BLK 1 \"memory_operand\" \"\"))\n \t      (use (match_operand:SI 2 \"general_operand\" \"\"))\n \t      (use (match_operand:SI 3 \"const_int_operand\" \"\"))])]\n   \"\"\n@@ -566,8 +573,8 @@\n   }\")\n \n (define_insn \"movstrsi2\"\n-  [(set (mem:BLK (match_operand:SI 0 \"address_operand\" \"g\"))\n-\t(mem:BLK (match_operand:SI 1 \"address_operand\" \"g\")))\n+  [(set (mem:BLK (match_operand:SI 0 \"address_operand\" \"p\"))\n+\t(mem:BLK (match_operand:SI 1 \"address_operand\" \"p\")))\n    (use (match_operand 2 \"immediate_operand\" \"i\"))]\n   \"\"\n   \"movmd %a1,%a0,%2\")\n@@ -577,69 +584,51 @@\n ;; Those for integer source operand\n ;; are ordered widest source type first.\n \n-(define_insn \"truncsiqi2\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n-\t(truncate:QI (match_operand:SI 1 \"nonimmediate_operand\" \"g\")))]\n-  \"\"\n-  \"movb %1,%0\")\n-\n-(define_insn \"truncsihi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n-\t(truncate:HI (match_operand:SI 1 \"nonimmediate_operand\" \"g\")))]\n-  \"\"\n-  \"movw %1,%0\")\n-\n-(define_insn \"trunchiqi2\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n-\t(truncate:QI (match_operand:HI 1 \"nonimmediate_operand\" \"g\")))]\n-  \"\"\n-  \"movb %1,%0\")\n-\n (define_insn \"extendhisi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n-\t(sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"g\")))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"rm\")))]\n   \"\"\n   \"movxwd %1,%0\")\n \n (define_insn \"extendqihi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n-\t(sign_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"g\")))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(sign_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"rm\")))]\n   \"\"\n   \"movxbw %1,%0\")\n \n (define_insn \"extendqisi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n-\t(sign_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"g\")))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(sign_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"rm\")))]\n   \"\"\n   \"movxbd %1,%0\")\n \n (define_insn \"extendsfdf2\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=lm<\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=lm<\")\n \t(float_extend:DF (match_operand:SF 1 \"general_operand\" \"fmF\")))]\n   \"TARGET_32081\"\n   \"movfl %1,%0\")\n \n (define_insn \"truncdfsf2\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=fm<\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=fm<\")\n \t(float_truncate:SF (match_operand:DF 1 \"general_operand\" \"lmF\")))]\n   \"TARGET_32081\"\n   \"movlf %1,%0\")\n \n (define_insn \"zero_extendhisi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n-\t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"g\")))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"rm\")))]\n   \"\"\n   \"movzwd %1,%0\")\n \n (define_insn \"zero_extendqihi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n-\t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"g\")))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"rm\")))]\n   \"\"\n   \"movzbw %1,%0\")\n \n (define_insn \"zero_extendqisi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n-\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"g\")))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"rm\")))]\n   \"\"\n   \"movzbd %1,%0\")\n \f\n@@ -655,210 +644,214 @@\n ;; A register must be used to perform the conversion.\n \n (define_insn \"floatsisf2\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=fm<\")\n-\t(float:SF (match_operand:SI 1 \"general_operand\" \"rm\")))]\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=fm<\")\n+\t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))]\n   \"TARGET_32081\"\n   \"movdf %1,%0\")\n \n (define_insn \"floatsidf2\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=lm<\")\n-\t(float:DF (match_operand:SI 1 \"general_operand\" \"rm\")))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=lm<\")\n+\t(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))]\n   \"TARGET_32081\"\n   \"movdl %1,%0\")\n \n (define_insn \"floathisf2\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=fm<\")\n-\t(float:SF (match_operand:HI 1 \"general_operand\" \"rm\")))]\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=fm<\")\n+\t(float:SF (match_operand:HI 1 \"nonimmediate_operand\" \"rm\")))]\n   \"TARGET_32081\"\n   \"movwf %1,%0\")\n \n (define_insn \"floathidf2\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=lm<\")\n-\t(float:DF (match_operand:HI 1 \"general_operand\" \"rm\")))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=lm<\")\n+\t(float:DF (match_operand:HI 1 \"nonimmediate_operand\" \"rm\")))]\n   \"TARGET_32081\"\n   \"movwl %1,%0\")\n \n (define_insn \"floatqisf2\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=fm<\")\n-\t(float:SF (match_operand:QI 1 \"general_operand\" \"rm\")))]\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=fm<\")\n+\t(float:SF (match_operand:QI 1 \"nonimmediate_operand\" \"rm\")))]\n   \"TARGET_32081\"\n   \"movbf %1,%0\")\n \n ; Some assemblers warn that this insn doesn't work.\n ; Maybe they know something we don't.\n ;(define_insn \"floatqidf2\"\n-;  [(set (match_operand:DF 0 \"general_operand\" \"=lm<\")\n-;\t(float:DF (match_operand:QI 1 \"general_operand\" \"rm\")))]\n+;  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=lm<\")\n+;\t(float:DF (match_operand:QI 1 \"nonimmediate_operand\" \"rm\")))]\n ;  \"TARGET_32081\"\n ;  \"movbl %1,%0\")\n \f\n ;; Float-to-fix conversion insns.\n ;; The sequent compiler always generates \"trunc\" insns.\n \n (define_insn \"fixsfqi2\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n-\t(fix:QI (fix:SF (match_operand:SF 1 \"general_operand\" \"fm\"))))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(fix:QI (fix:SF (match_operand:SF 1 \"nonimmediate_operand\" \"fm\"))))]\n   \"TARGET_32081\"\n   \"truncfb %1,%0\")\n \n (define_insn \"fixsfhi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n-\t(fix:HI (fix:SF (match_operand:SF 1 \"general_operand\" \"fm\"))))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(fix:HI (fix:SF (match_operand:SF 1 \"nonimmediate_operand\" \"fm\"))))]\n   \"TARGET_32081\"\n   \"truncfw %1,%0\")\n \n (define_insn \"fixsfsi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n-\t(fix:SI (fix:SF (match_operand:SF 1 \"general_operand\" \"fm\"))))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(fix:SI (fix:SF (match_operand:SF 1 \"nonimmediate_operand\" \"fm\"))))]\n   \"TARGET_32081\"\n   \"truncfd %1,%0\")\n \n (define_insn \"fixdfqi2\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n-\t(fix:QI (fix:DF (match_operand:DF 1 \"general_operand\" \"lm\"))))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(fix:QI (fix:DF (match_operand:DF 1 \"nonimmediate_operand\" \"lm\"))))]\n   \"TARGET_32081\"\n   \"trunclb %1,%0\")\n \n (define_insn \"fixdfhi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n-\t(fix:HI (fix:DF (match_operand:DF 1 \"general_operand\" \"lm\"))))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(fix:HI (fix:DF (match_operand:DF 1 \"nonimmediate_operand\" \"lm\"))))]\n   \"TARGET_32081\"\n   \"trunclw %1,%0\")\n \n (define_insn \"fixdfsi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n-\t(fix:SI (fix:DF (match_operand:DF 1 \"general_operand\" \"lm\"))))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(fix:SI (fix:DF (match_operand:DF 1 \"nonimmediate_operand\" \"lm\"))))]\n   \"TARGET_32081\"\n   \"truncld %1,%0\")\n \n ;; Unsigned\n \n (define_insn \"fixunssfqi2\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n-\t(unsigned_fix:QI (fix:SF (match_operand:SF 1 \"general_operand\" \"fm\"))))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(unsigned_fix:QI (fix:SF (match_operand:SF 1 \"nonimmediate_operand\" \"fm\"))))]\n   \"TARGET_32081\"\n   \"truncfb %1,%0\")\n \n (define_insn \"fixunssfhi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n-\t(unsigned_fix:HI (fix:SF (match_operand:SF 1 \"general_operand\" \"fm\"))))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(unsigned_fix:HI (fix:SF (match_operand:SF 1 \"nonimmediate_operand\" \"fm\"))))]\n   \"TARGET_32081\"\n   \"truncfw %1,%0\")\n \n (define_insn \"fixunssfsi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n-\t(unsigned_fix:SI (fix:SF (match_operand:SF 1 \"general_operand\" \"fm\"))))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(unsigned_fix:SI (fix:SF (match_operand:SF 1 \"nonimmediate_operand\" \"fm\"))))]\n   \"TARGET_32081\"\n   \"truncfd %1,%0\")\n \n (define_insn \"fixunsdfqi2\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n-\t(unsigned_fix:QI (fix:DF (match_operand:DF 1 \"general_operand\" \"lm\"))))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(unsigned_fix:QI (fix:DF (match_operand:DF 1 \"nonimmediate_operand\" \"lm\"))))]\n   \"TARGET_32081\"\n   \"trunclb %1,%0\")\n \n (define_insn \"fixunsdfhi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n-\t(unsigned_fix:HI (fix:DF (match_operand:DF 1 \"general_operand\" \"lm\"))))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(unsigned_fix:HI (fix:DF (match_operand:DF 1 \"nonimmediate_operand\" \"lm\"))))]\n   \"TARGET_32081\"\n   \"trunclw %1,%0\")\n \n (define_insn \"fixunsdfsi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n-\t(unsigned_fix:SI (fix:DF (match_operand:DF 1 \"general_operand\" \"lm\"))))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(unsigned_fix:SI (fix:DF (match_operand:DF 1 \"nonimmediate_operand\" \"lm\"))))]\n   \"TARGET_32081\"\n   \"truncld %1,%0\")\n \n ;;; These are not yet used by GCC\n (define_insn \"fix_truncsfqi2\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n-\t(fix:QI (match_operand:SF 1 \"general_operand\" \"fm\")))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(fix:QI (match_operand:SF 1 \"nonimmediate_operand\" \"fm\")))]\n   \"TARGET_32081\"\n   \"truncfb %1,%0\")\n \n (define_insn \"fix_truncsfhi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n-\t(fix:HI (match_operand:SF 1 \"general_operand\" \"fm\")))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(fix:HI (match_operand:SF 1 \"nonimmediate_operand\" \"fm\")))]\n   \"TARGET_32081\"\n   \"truncfw %1,%0\")\n \n (define_insn \"fix_truncsfsi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n-\t(fix:SI (match_operand:SF 1 \"general_operand\" \"fm\")))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(fix:SI (match_operand:SF 1 \"nonimmediate_operand\" \"fm\")))]\n   \"TARGET_32081\"\n   \"truncfd %1,%0\")\n \n (define_insn \"fix_truncdfqi2\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n-\t(fix:QI (match_operand:DF 1 \"general_operand\" \"lm\")))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(fix:QI (match_operand:DF 1 \"nonimmediate_operand\" \"lm\")))]\n   \"TARGET_32081\"\n   \"trunclb %1,%0\")\n \n (define_insn \"fix_truncdfhi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n-\t(fix:HI (match_operand:DF 1 \"general_operand\" \"lm\")))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(fix:HI (match_operand:DF 1 \"nonimmediate_operand\" \"lm\")))]\n   \"TARGET_32081\"\n   \"trunclw %1,%0\")\n \n (define_insn \"fix_truncdfsi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n-\t(fix:SI (match_operand:DF 1 \"general_operand\" \"lm\")))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n+\t(fix:SI (match_operand:DF 1 \"nonimmediate_operand\" \"lm\")))]\n   \"TARGET_32081\"\n   \"truncld %1,%0\")\n \f\n ;; Multiply-add instructions\n (define_insn \"\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=v,v\")\n-\t(plus:DF (mult:DF (match_operand:DF 1 \"general_operand\" \"%lmF,0\")\n-\t\t          (match_operand:DF 2 \"general_operand\" \"lmF,lmF\"))\n-                 (match_operand:DF 3 \"general_operand\" \"0,lmF\")))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=v,v,lm\")\n+\t(plus:DF (mult:DF (match_operand:DF 1 \"general_operand\" \"%lmF,0,0\")\n+\t\t          (match_operand:DF 2 \"general_operand\" \"lmF,lmF,lmF\"))\n+                 (match_operand:DF 3 \"general_operand\" \"0,lmF,lmF\")))]\n   \"TARGET_MULT_ADD\"\n   \"@\n    dotl %1,%2\n-   polyl %2,%3\")\n+   polyl %2,%3\n+   mull %2,%0\\;addl %3,%0\")\n \n (define_insn \"\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=u,u\")\n-\t(plus:SF (mult:SF (match_operand:SF 1 \"general_operand\" \"%fmF,0\")\n-\t\t          (match_operand:SF 2 \"general_operand\" \"fmF,fmF\"))\n-                 (match_operand:SF 3 \"general_operand\" \"0,fmF\")))]\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=u,u,fm\")\n+\t(plus:SF (mult:SF (match_operand:SF 1 \"general_operand\" \"%fmF,0,0\")\n+\t\t          (match_operand:SF 2 \"general_operand\" \"fmF,fmF,fmF\"))\n+                 (match_operand:SF 3 \"general_operand\" \"0,fmF,fmF\")))]\n   \"TARGET_MULT_ADD\"\n   \"@\n    dotf %1,%2\n-   polyf %2,%3\")\n+   polyf %2,%3\n+   mulf %2,%0\\;addf %3,%0\")\n \n \n ;; Multiply-sub instructions\n (define_insn \"\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=v\")\n-\t(minus:DF (mult:DF (match_operand:DF 1 \"general_operand\" \"%lmF\")\n-\t\t          (match_operand:DF 2 \"general_operand\" \"lmF\"))\n-                 (match_operand:DF 3 \"general_operand\" \"0\")))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=v,lm\")\n+\t(minus:DF (mult:DF (match_operand:DF 1 \"general_operand\" \"%lmF,0\")\n+\t\t          (match_operand:DF 2 \"general_operand\" \"lmF,lmF\"))\n+                 (match_operand:DF 3 \"general_operand\" \"lmF,lmF\")))]\n   \"TARGET_MULT_ADD\"\n   \"@\n-   negl %0,%0\\;dotl %1,%2\")\n+   negl %3,%0\\;dotl %1,%2\n+   mull %2,%0\\;subl %3,%0\")\n \n (define_insn \"\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=u\")\n-\t(minus:SF (mult:SF (match_operand:SF 1 \"general_operand\" \"%fmF\")\n-\t\t          (match_operand:SF 2 \"general_operand\" \"fmF\"))\n-                 (match_operand:SF 3 \"general_operand\" \"0\")))]\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=u,fm\")\n+\t(minus:SF (mult:SF (match_operand:SF 1 \"general_operand\" \"%fmF,0\")\n+\t\t          (match_operand:SF 2 \"general_operand\" \"fmF,fmF\"))\n+                 (match_operand:SF 3 \"general_operand\" \"fmF,fmF\")))]\n   \"TARGET_MULT_ADD\"\n   \"@\n-   negf %0,%0\\;dotf %1,%2\")\n+   negf %3,%0\\;dotf %1,%2\n+   mulf %2,%0\\;subf %3,%0\")\n \n ;;- All kinds of add instructions.\n \n (define_insn \"adddf3\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=lm\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=lm\")\n \t(plus:DF (match_operand:DF 1 \"general_operand\" \"%0\")\n \t\t (match_operand:DF 2 \"general_operand\" \"lmF\")))]\n   \"TARGET_32081\"\n   \"addl %2,%0\")\n \n \n (define_insn \"addsf3\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=fm\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=fm\")\n \t(plus:SF (match_operand:SF 1 \"general_operand\" \"%0\")\n \t\t (match_operand:SF 2 \"general_operand\" \"fmF\")))]\n   \"TARGET_32081\"\n@@ -890,21 +883,21 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(plus:SI (reg:SI 24)\n \t\t (match_operand:SI 1 \"immediate_operand\" \"i\")))]\n   \"GET_CODE (operands[1]) == CONST_INT\"\n   \"addr %c1(fp),%0\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(plus:SI (reg:SI 25)\n \t\t (match_operand:SI 1 \"immediate_operand\" \"i\")))]\n   \"GET_CODE (operands[1]) == CONST_INT\"\n   \"addr %c1(sp),%0\")\n \n (define_insn \"adddi3\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=ro\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=ro\")\n \t(plus:DI (match_operand:DI 1 \"general_operand\" \"%0\")\n \t\t (match_operand:DI 2 \"general_operand\" \"ron\")))]\n   \"\"\n@@ -946,7 +939,7 @@\n \n ;; See Note 1\n (define_insn \"addsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g,=g&<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,=rm&<\")\n \t(plus:SI (match_operand:SI 1 \"general_operand\" \"%0,r\")\n \t\t (match_operand:SI 2 \"general_operand\" \"g,i\")))]\n   \"\"\n@@ -984,7 +977,7 @@\n }\")\n \n (define_insn \"addhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(plus:HI (match_operand:HI 1 \"general_operand\" \"%0\")\n \t\t (match_operand:HI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -999,7 +992,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (strict_low_part (match_operand:HI 0 \"general_operand\" \"=r\"))\n+  [(set (strict_low_part (match_operand:HI 0 \"register_operand\" \"=r\"))\n \t(plus:HI (match_operand:HI 1 \"general_operand\" \"0\")\n \t\t (match_operand:HI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1012,7 +1005,7 @@\n }\")\n \n (define_insn \"addqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(plus:QI (match_operand:QI 1 \"general_operand\" \"%0\")\n \t\t (match_operand:QI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1027,7 +1020,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (strict_low_part (match_operand:QI 0 \"general_operand\" \"=r\"))\n+  [(set (strict_low_part (match_operand:QI 0 \"register_operand\" \"=r\"))\n \t(plus:QI (match_operand:QI 1 \"general_operand\" \"0\")\n \t\t (match_operand:QI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1042,14 +1035,14 @@\n ;;- All kinds of subtract instructions.\n \n (define_insn \"subdf3\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=lm\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=lm\")\n \t(minus:DF (match_operand:DF 1 \"general_operand\" \"0\")\n \t\t  (match_operand:DF 2 \"general_operand\" \"lmF\")))]\n   \"TARGET_32081\"\n   \"subl %2,%0\")\n \n (define_insn \"subsf3\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=fm\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=fm\")\n \t(minus:SF (match_operand:SF 1 \"general_operand\" \"0\")\n \t\t  (match_operand:SF 2 \"general_operand\" \"fmF\")))]\n   \"TARGET_32081\"\n@@ -1069,7 +1062,7 @@\n }\")\n \n (define_insn \"subdi3\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=ro\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=ro\")\n \t(minus:DI (match_operand:DI 1 \"general_operand\" \"0\")\n \t\t  (match_operand:DI 2 \"general_operand\" \"ron\")))]\n   \"\"\n@@ -1110,7 +1103,7 @@\n }\")\n \n (define_insn \"subsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(minus:SI (match_operand:SI 1 \"general_operand\" \"0\")\n \t\t  (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1126,7 +1119,7 @@\n }\")\n \n (define_insn \"subhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(minus:HI (match_operand:HI 1 \"general_operand\" \"0\")\n \t\t  (match_operand:HI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1142,7 +1135,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (strict_low_part (match_operand:HI 0 \"general_operand\" \"=r\"))\n+  [(set (strict_low_part (match_operand:HI 0 \"register_operand\" \"=r\"))\n \t(minus:HI (match_operand:HI 1 \"general_operand\" \"0\")\n \t\t  (match_operand:HI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1155,7 +1148,7 @@\n }\")\n \n (define_insn \"subqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(minus:QI (match_operand:QI 1 \"general_operand\" \"0\")\n \t\t  (match_operand:QI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1171,7 +1164,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (strict_low_part (match_operand:QI 0 \"general_operand\" \"=r\"))\n+  [(set (strict_low_part (match_operand:QI 0 \"register_operand\" \"=r\"))\n \t(minus:QI (match_operand:QI 1 \"general_operand\" \"0\")\n \t\t  (match_operand:QI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1186,57 +1179,57 @@\n ;;- Multiply instructions.\n \n (define_insn \"muldf3\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=lm\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=lm\")\n \t(mult:DF (match_operand:DF 1 \"general_operand\" \"%0\")\n \t\t (match_operand:DF 2 \"general_operand\" \"lmF\")))]\n   \"TARGET_32081\"\n   \"mull %2,%0\")\n \n (define_insn \"mulsf3\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=fm\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=fm\")\n \t(mult:SF (match_operand:SF 1 \"general_operand\" \"%0\")\n \t\t (match_operand:SF 2 \"general_operand\" \"fmF\")))]\n   \"TARGET_32081\"\n   \"mulf %2,%0\")\n \n ;; See note 1\n (define_insn \"mulsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(mult:SI (match_operand:SI 1 \"general_operand\" \"%0\")\n \t\t (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n   \"muld %2,%0\")\n \n (define_insn \"mulhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(mult:HI (match_operand:HI 1 \"general_operand\" \"%0\")\n \t\t (match_operand:HI 2 \"general_operand\" \"g\")))]\n   \"\"\n   \"mulw %2,%0\")\n \n (define_insn \"mulqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(mult:QI (match_operand:QI 1 \"general_operand\" \"%0\")\n \t\t (match_operand:QI 2 \"general_operand\" \"g\")))]\n   \"\"\n   \"mulb %2,%0\")\n \n (define_insn \"umulsidi3\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(mult:DI (zero_extend:DI\n \t\t  (match_operand:SI 1 \"nonimmediate_operand\" \"0\"))\n \t\t (zero_extend:DI\n-\t\t  (match_operand:SI 2 \"nonimmediate_operand\" \"g\"))))]\n+\t\t  (match_operand:SI 2 \"nonimmediate_operand\" \"rm\"))))]\n   \"\"\n   \"meid %2,%0\")\n \f\n ;; divmod insns: We can only do the unsigned case.\n (define_expand \"udivmodsi4\"\n   [(parallel\n-  [(set (match_operand:SI 0 \"reg_or_mem_operand\" \"\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(udiv:SI (match_operand:SI 1 \"general_operand\" \"\")\n \t\t     (match_operand:SI 2 \"general_operand\" \"\")))\n-   (set (match_operand:SI 3 \"reg_or_mem_operand\" \"\")\n+   (set (match_operand:SI 3 \"nonimmediate_operand\" \"\")\n \t(umod:SI (match_dup 1) (match_dup 2)))])]\n   \"\"\n   \"\n@@ -1272,19 +1265,19 @@\n ;; below. This udivmoddisi4_internal never matches anything and is only\n ;; ever used when explicitly emitted by a define_expand.\n (define_insn \"udivmoddisi4_internal\"\n-  [(set (match_operand:DI 0 \"reg_or_mem_operand\" \"=rm\")\n-        (unspec:DI [(match_operand:DI 1 \"reg_or_mem_operand\" \"0\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n+        (unspec:DI [(match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n                     (match_operand:SI 2 \"general_operand\" \"g\")] 0))]\n   \"\"\n   \"deid %2,%0\")\n \n ;; Retain this insn which *does* have a pattern indicating what it does,\n ;; just in case the compiler is smart enough to recognize a substitution.\n (define_insn \"udivmoddisi4\"\n-  [(set (subreg:SI (match_operand:DI 0 \"register_operand\" \"=rm\") 1)\n-\t(truncate:SI (udiv:DI (match_operand:DI 1 \"reg_or_mem_operand\" \"0\")\n-\t\t (zero_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"g\")))))\n-   (set (subreg:SI (match_operand:DI 3 \"register_operand\" \"=0\") 0)\n+  [(set (subreg:SI (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\") 1)\n+\t(truncate:SI (udiv:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n+\t\t (zero_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))))\n+   (set (subreg:SI (match_operand:DI 3 \"nonimmediate_operand\" \"=0\") 0)\n \t(truncate:SI (umod:DI (match_dup 1) (zero_extend:DI (match_dup 2)))))]\n   \"\"\n   \"deid %2,%0\")\n@@ -1297,10 +1290,10 @@\n \n (define_expand \"udivmodhi4\"\n   [(parallel\n-  [(set (match_operand:HI 0 \"reg_or_mem_operand\" \"\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t(udiv:HI (match_operand:HI 1 \"general_operand\" \"\")\n \t\t     (match_operand:HI 2 \"general_operand\" \"\")))\n-   (set (match_operand:HI 3 \"reg_or_mem_operand\" \"\")\n+   (set (match_operand:HI 3 \"nonimmediate_operand\" \"\")\n \t(umod:HI (match_dup 1) (match_dup 2)))])]\n   \"\"\n   \"\n@@ -1345,19 +1338,19 @@\n \n (define_insn \"udivmoddihi4\"\n   [(set (subreg:HI (match_operand:DI 0 \"register_operand\" \"=r\") 1)\n-\t(truncate:HI (udiv:DI (match_operand:DI 1 \"reg_or_mem_operand\" \"0\")\n-\t\t (zero_extend:DI (match_operand:HI 2 \"nonimmediate_operand\" \"g\")))))\n+\t(truncate:HI (udiv:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t (zero_extend:DI (match_operand:HI 2 \"nonimmediate_operand\" \"rm\")))))\n    (set (subreg:HI (match_operand:DI 3 \"register_operand\" \"=0\") 0)\n \t(truncate:HI (umod:DI (match_dup 1) (zero_extend:DI (match_dup 2)))))]\n   \"\"\n   \"deiw %2,%0\")\n \n (define_expand \"udivmodqi4\"\n   [(parallel\n-  [(set (match_operand:QI 0 \"reg_or_mem_operand\" \"\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t(udiv:QI (match_operand:QI 1 \"general_operand\" \"\")\n \t\t     (match_operand:QI 2 \"general_operand\" \"\")))\n-   (set (match_operand:QI 3 \"reg_or_mem_operand\" \"\")\n+   (set (match_operand:QI 3 \"nonimmediate_operand\" \"\")\n \t(umod:QI (match_dup 1) (match_dup 2)))])]\n   \"\"\n   \"\n@@ -1395,15 +1388,15 @@\n ;; way to do this, so just restrict operand 0 and 1 to be in registers.\n (define_insn \"udivmoddiqi4_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (unspec:DI [(match_operand:DI 1 \"reg_or_mem_operand\" \"0\")\n+        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"0\")\n                     (match_operand:QI 2 \"general_operand\" \"g\")] 0))]\n   \"\"\n   \"deib %2,%0\")\n \n (define_insn \"udivmoddiqi4\"\n   [(set (subreg:QI (match_operand:DI 0 \"register_operand\" \"=r\") 1)\n-\t(truncate:QI (udiv:DI (match_operand:DI 1 \"reg_or_mem_operand\" \"0\")\n-\t\t (zero_extend:DI (match_operand:QI 2 \"nonimmediate_operand\" \"g\")))))\n+\t(truncate:QI (udiv:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t (zero_extend:DI (match_operand:QI 2 \"nonimmediate_operand\" \"rm\")))))\n    (set (subreg:QI (match_operand:DI 3 \"register_operand\" \"=0\") 0)\n \t(truncate:QI (umod:DI (match_dup 1) (zero_extend:DI (match_dup 2)))))]\n   \"\"\n@@ -1412,36 +1405,36 @@\n ;;- Divide instructions.\n \n (define_insn \"divdf3\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=lm\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=lm\")\n \t(div:DF (match_operand:DF 1 \"general_operand\" \"0\")\n \t\t(match_operand:DF 2 \"general_operand\" \"lmF\")))]\n   \"TARGET_32081\"\n   \"divl %2,%0\")\n \n (define_insn \"divsf3\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=fm\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=fm\")\n \t(div:SF (match_operand:SF 1 \"general_operand\" \"0\")\n \t\t(match_operand:SF 2 \"general_operand\" \"fmF\")))]\n   \"TARGET_32081\"\n   \"divf %2,%0\")\n \n ;; See note 1\n (define_insn \"divsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(div:SI (match_operand:SI 1 \"general_operand\" \"0\")\n \t\t(match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n   \"quod %2,%0\")\n \n (define_insn \"divhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(div:HI (match_operand:HI 1 \"general_operand\" \"0\")\n \t\t(match_operand:HI 2 \"general_operand\" \"g\")))]\n   \"\"\n   \"quow %2,%0\")\n \n (define_insn \"divqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(div:QI (match_operand:QI 1 \"general_operand\" \"0\")\n \t\t(match_operand:QI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1451,21 +1444,21 @@\n \n ;; See note 1\n (define_insn \"modsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(mod:SI (match_operand:SI 1 \"general_operand\" \"0\")\n \t\t(match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n   \"remd %2,%0\")\n \n (define_insn \"modhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(mod:HI (match_operand:HI 1 \"general_operand\" \"0\")\n \t\t(match_operand:HI 2 \"general_operand\" \"g\")))]\n   \"\"\n   \"remw %2,%0\")\n \n (define_insn \"modqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(mod:QI (match_operand:QI 1 \"general_operand\" \"0\")\n \t\t(match_operand:QI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1476,7 +1469,7 @@\n \n ;; See note 1\n (define_insn \"andsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(and:SI (match_operand:SI 1 \"general_operand\" \"%0\")\n \t\t(match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1509,7 +1502,7 @@\n }\")\n \n (define_insn \"andhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(and:HI (match_operand:HI 1 \"general_operand\" \"%0\")\n \t\t(match_operand:HI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1530,29 +1523,29 @@\n }\")\n \n (define_insn \"andqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(and:QI (match_operand:QI 1 \"general_operand\" \"%0\")\n \t\t(match_operand:QI 2 \"general_operand\" \"g\")))]\n   \"\"\n   \"andb %2,%0\")\n \n ;; See note 1\n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(and:SI (not:SI (match_operand:SI 1 \"general_operand\" \"g\"))\n \t\t(match_operand:SI 2 \"general_operand\" \"0\")))]\n   \"\"\n   \"bicd %1,%0\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(and:HI (not:HI (match_operand:HI 1 \"general_operand\" \"g\"))\n \t\t(match_operand:HI 2 \"general_operand\" \"0\")))]\n   \"\"\n   \"bicw %1,%0\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(and:QI (not:QI (match_operand:QI 1 \"general_operand\" \"g\"))\n \t\t(match_operand:QI 2 \"general_operand\" \"0\")))]\n   \"\"\n@@ -1562,7 +1555,7 @@\n \n ;; See note 1\n (define_insn \"iorsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ior:SI (match_operand:SI 1 \"general_operand\" \"%0\")\n \t\t(match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1578,7 +1571,7 @@\n }\")\n \n (define_insn \"iorhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ior:HI (match_operand:HI 1 \"general_operand\" \"%0\")\n \t\t(match_operand:HI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1591,7 +1584,7 @@\n }\")\n \n (define_insn \"iorqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ior:QI (match_operand:QI 1 \"general_operand\" \"%0\")\n \t\t(match_operand:QI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1601,7 +1594,7 @@\n \n ;; See note 1\n (define_insn \"xorsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(xor:SI (match_operand:SI 1 \"general_operand\" \"%0\")\n \t\t(match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1617,7 +1610,7 @@\n }\")\n \n (define_insn \"xorhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(xor:HI (match_operand:HI 1 \"general_operand\" \"%0\")\n \t\t(match_operand:HI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1630,27 +1623,27 @@\n }\")\n \n (define_insn \"xorqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(xor:QI (match_operand:QI 1 \"general_operand\" \"%0\")\n \t\t(match_operand:QI 2 \"general_operand\" \"g\")))]\n   \"\"\n   \"xorb %2,%0\")\n \f\n (define_insn \"negdf2\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=lm<\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=lm<\")\n \t(neg:DF (match_operand:DF 1 \"general_operand\" \"lmF\")))]\n   \"TARGET_32081\"\n   \"negl %1,%0\")\n \n (define_insn \"negsf2\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=fm<\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=fm<\")\n \t(neg:SF (match_operand:SF 1 \"general_operand\" \"fmF\")))]\n   \"TARGET_32081\"\n   \"negf %1,%0\")\n \n (define_insn \"negdi2\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=ro\")\n-\t(neg:DI (match_operand:DI 1 \"general_operand\" \"ro\")))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=ro\")\n+\t(neg:DI (match_operand:DI 1 \"nonimmediate_operand\" \"ro\")))]\n   \"\"\n   \"*\n {\n@@ -1678,38 +1671,38 @@\n \n ;; See note 1\n (define_insn \"negsi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(neg:SI (match_operand:SI 1 \"general_operand\" \"g\")))]\n   \"\"\n   \"negd %1,%0\")\n \n (define_insn \"neghi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(neg:HI (match_operand:HI 1 \"general_operand\" \"g\")))]\n   \"\"\n   \"negw %1,%0\")\n \n (define_insn \"negqi2\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(neg:QI (match_operand:QI 1 \"general_operand\" \"g\")))]\n   \"\"\n   \"negb %1,%0\")\n \f\n ;; See note 1\n (define_insn \"one_cmplsi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(not:SI (match_operand:SI 1 \"general_operand\" \"g\")))]\n   \"\"\n   \"comd %1,%0\")\n \n (define_insn \"one_cmplhi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(not:HI (match_operand:HI 1 \"general_operand\" \"g\")))]\n   \"\"\n   \"comw %1,%0\")\n \n (define_insn \"one_cmplqi2\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(not:QI (match_operand:QI 1 \"general_operand\" \"g\")))]\n   \"\"\n   \"comb %1,%0\")\n@@ -1723,7 +1716,7 @@\n ;; alternative 0 never matches on the 32532\n ;; See note 1\n (define_insn \"ashlsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g,g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm\")\n \t(ashift:SI (match_operand:SI 1 \"general_operand\" \"r,0\")\n \t\t   (match_operand:SI 2 \"general_operand\" \"I,g\")))]\n   \"\"\n@@ -1735,7 +1728,7 @@\n }\")\n \n (define_insn \"ashlhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:HI (match_operand:HI 1 \"general_operand\" \"0\")\n \t\t   (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1754,7 +1747,7 @@\n }\")\n \n (define_insn \"ashlqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:QI (match_operand:QI 1 \"general_operand\" \"0\")\n \t\t   (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1774,7 +1767,7 @@\n \n ;; Arithmetic right shift on the 32k works by negating the shift count.\n (define_expand \"ashrsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:SI (match_operand:SI 1 \"general_operand\" \"g\")\n \t\t     (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1785,21 +1778,21 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:SI (match_operand:SI 1 \"general_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"\"\n   \"ashd %n2,%0\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:SI (match_operand:SI 1 \"general_operand\" \"0\")\n-\t\t     (neg:SI (match_operand:SI 2 \"general_operand\" \"r\"))))]\n+\t\t     (neg:SI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"ashd %2,%0\")\n \n (define_expand \"ashrhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:HI (match_operand:HI 1 \"general_operand\" \"g\")\n \t\t     (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1810,21 +1803,21 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:HI (match_operand:HI 1 \"general_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"\"\n   \"ashw %n2,%0\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:HI (match_operand:HI 1 \"general_operand\" \"0\")\n-\t\t     (neg:SI (match_operand:SI 2 \"general_operand\" \"r\"))))]\n+\t\t     (neg:SI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"ashw %2,%0\")\n \n (define_expand \"ashrqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:QI (match_operand:QI 1 \"general_operand\" \"g\")\n \t\t     (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1835,24 +1828,24 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:QI (match_operand:QI 1 \"general_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"\"\n   \"ashb %n2,%0\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:QI (match_operand:QI 1 \"general_operand\" \"0\")\n-\t\t     (neg:SI (match_operand:SI 2 \"general_operand\" \"r\"))))]\n+\t\t     (neg:SI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"ashb %2,%0\")\n \n ;; logical shift instructions\n \n ;; Logical right shift on the 32k works by negating the shift count.\n (define_expand \"lshrsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:SI (match_operand:SI 1 \"general_operand\" \"g\")\n \t\t     (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1863,21 +1856,21 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:SI (match_operand:SI 1 \"general_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"\"\n   \"lshd %n2,%0\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:SI (match_operand:SI 1 \"general_operand\" \"0\")\n-\t\t     (neg:SI (match_operand:SI 2 \"general_operand\" \"r\"))))]\n+\t\t     (neg:SI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"lshd %2,%0\")\n \n (define_expand \"lshrhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:HI (match_operand:HI 1 \"general_operand\" \"g\")\n \t\t     (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1888,21 +1881,21 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:HI (match_operand:HI 1 \"general_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"\"\n   \"lshw %n2,%0\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:HI (match_operand:HI 1 \"general_operand\" \"0\")\n-\t\t     (neg:SI (match_operand:SI 2 \"general_operand\" \"r\"))))]\n+\t\t     (neg:SI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"lshw %2,%0\")\n \n (define_expand \"lshrqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:QI (match_operand:QI 1 \"general_operand\" \"g\")\n \t\t     (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1913,46 +1906,46 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:QI (match_operand:QI 1 \"general_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"\"\n   \"lshb %n2,%0\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:QI (match_operand:QI 1 \"general_operand\" \"0\")\n-\t\t     (neg:SI (match_operand:SI 2 \"general_operand\" \"r\"))))]\n+\t\t     (neg:SI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"lshb %2,%0\")\n \n ;; Rotate instructions\n \n ;; See note 1\n (define_insn \"rotlsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotate:SI (match_operand:SI 1 \"general_operand\" \"0\")\n \t\t   (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n   \"rotd %2,%0\")\n \n (define_insn \"rotlhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotate:HI (match_operand:HI 1 \"general_operand\" \"0\")\n \t\t   (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n   \"rotw %2,%0\")\n \n (define_insn \"rotlqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotate:QI (match_operand:QI 1 \"general_operand\" \"0\")\n \t\t   (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n   \"rotb %2,%0\")\n \n ;; Right rotate on the 32k works by negating the shift count.\n (define_expand \"rotrsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotatert:SI (match_operand:SI 1 \"general_operand\" \"g\")\n \t\t     (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1963,21 +1956,21 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotatert:SI (match_operand:SI 1 \"general_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"\"\n   \"rotd %n2,%0\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotatert:SI (match_operand:SI 1 \"general_operand\" \"0\")\n-\t\t     (neg:SI (match_operand:SI 2 \"general_operand\" \"r\"))))]\n+\t\t     (neg:SI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"rotd %2,%0\")\n \n (define_expand \"rotrhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotatert:HI (match_operand:HI 1 \"general_operand\" \"g\")\n \t\t     (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1988,21 +1981,21 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotatert:HI (match_operand:HI 1 \"general_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"\"\n   \"rotw %n2,%0\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotatert:HI (match_operand:HI 1 \"general_operand\" \"0\")\n-\t\t     (neg:SI (match_operand:SI 2 \"general_operand\" \"r\"))))]\n+\t\t     (neg:SI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"rotw %2,%0\")\n \n (define_expand \"rotrqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotatert:QI (match_operand:QI 1 \"general_operand\" \"g\")\n \t\t     (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n@@ -2013,16 +2006,16 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotatert:QI (match_operand:QI 1 \"general_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"\"\n   \"rotb %n2,%0\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotatert:QI (match_operand:QI 1 \"general_operand\" \"0\")\n-\t\t     (neg:SI (match_operand:SI 2 \"general_operand\" \"r\"))))]\n+\t\t     (neg:SI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"rotb %2,%0\")\n \f\n@@ -2031,7 +2024,7 @@\n ;; because we don't want pushl $1 turned into pushad 1.\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(match_operand:QI 1 \"address_operand\" \"p\"))]\n   \"\"\n   \"*\n@@ -2075,7 +2068,7 @@\n \n ;; See note 1\n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"general_operand\" \"+g\")\n+  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+rm\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand:SI 1 \"general_operand\" \"g\"))\n \t(const_int 1))]\n@@ -2084,7 +2077,7 @@\n \n ;; See note 1\n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"general_operand\" \"+g\")\n+  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+rm\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand:SI 1 \"general_operand\" \"g\"))\n \t(const_int 0))]\n@@ -2093,7 +2086,7 @@\n \n ;; See note 1\n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"+g\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"+rm\")\n \t(xor:SI (ashift:SI (const_int 1)\n \t\t\t   (match_operand:SI 1 \"general_operand\" \"g\"))\n \t\t(match_dup 0)))]\n@@ -2102,7 +2095,7 @@\n \n ;; See note 1\n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(xor:QI (subreg:QI\n \t\t (ashift:SI (const_int 1)\n \t\t\t    (match_operand:QI 1 \"general_operand\" \"g\")) 0)\n@@ -2114,7 +2107,7 @@\n \n (define_insn \"\"\n   [(set (cc0)\n-\t(zero_extract (match_operand:SI 0 \"general_operand\" \"rm\")\n+\t(zero_extract (match_operand:SI 0 \"nonimmediate_operand\" \"rm\")\n \t\t      (const_int 1)\n \t\t      (match_operand:SI 1 \"general_operand\" \"g\")))]\n   \"\"\n@@ -2137,7 +2130,7 @@\n ;; enough on the 32532 that such hacks are not needed.\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=ro\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=ro\")\n \t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\")\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"i\")))]\n@@ -2189,10 +2182,10 @@\n ;; to allow/disallow the use of these instructions.\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"g\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\")\n-\t\t\t (match_operand:SI 3 \"general_operand\" \"rK\")))]\n+\t\t\t (match_operand:SI 3 \"nonmemory_operand\" \"rK\")))]\n   \"TARGET_BITFIELD\"\n   \"*\n { if (GET_CODE (operands[3]) == CONST_INT)\n@@ -2201,10 +2194,10 @@\n }\")\n \n (define_insn \"extzv\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(zero_extract:SI (match_operand:QI 1 \"general_operand\" \"g\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\")\n-\t\t\t (match_operand:SI 3 \"general_operand\" \"rK\")))]\n+\t\t\t (match_operand:SI 3 \"nonmemory_operand\" \"rK\")))]\n   \"TARGET_BITFIELD\"\n   \"*\n { if (GET_CODE (operands[3]) == CONST_INT)\n@@ -2215,8 +2208,8 @@\n (define_insn \"\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"memory_operand\" \"+o\")\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"rn\"))\n-\t(match_operand:SI 3 \"general_operand\" \"rm\"))]\n+\t\t\t (match_operand:SI 2 \"nonmemory_operand\" \"rn\"))\n+\t(match_operand:SI 3 \"nonimmediate_operand\" \"rm\"))]\n   \"TARGET_BITFIELD\"\n   \"*\n { if (GET_CODE (operands[2]) == CONST_INT)\n@@ -2240,12 +2233,12 @@\n (define_insn \"\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"rK\"))\n-\t(match_operand:SI 3 \"general_operand\" \"rm\"))]\n+\t\t\t (match_operand:SI 2 \"nonmemory_operand\" \"rK\"))\n+\t(match_operand:SI 3 \"nonimmediate_operand\" \"rm\"))]\n   \"TARGET_BITFIELD\"\n   \"*\n { if (GET_CODE (operands[2]) == CONST_INT)\n-  {\n+  {  \n     if (INTVAL (operands[1]) <= 8)\n       return \\\"inssb %3,%0,%2,%1\\\";\n     else if (INTVAL (operands[1]) <= 16)\n@@ -2257,10 +2250,10 @@\n }\")\n \n (define_insn \"insv\"\n-  [(set (zero_extract:SI (match_operand:QI 0 \"general_operand\" \"+g\")\n+  [(set (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"+rm\")\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"rK\"))\n-\t(match_operand:SI 3 \"general_operand\" \"rm\"))]\n+\t\t\t (match_operand:SI 2 \"nonmemory_operand\" \"rK\"))\n+\t(match_operand:SI 3 \"nonimmediate_operand\" \"rm\"))]\n   \"TARGET_BITFIELD\"\n   \"*\n { if (GET_CODE (operands[2]) == CONST_INT)\n@@ -2492,7 +2485,7 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (ne (match_operand:SI 0 \"general_operand\" \"+g\")\n+\t (ne (match_operand:SI 0 \"nonimmediate_operand\" \"+rm\")\n \t     (match_operand:SI 1 \"const_int_operand\" \"i\"))\n \t (label_ref (match_operand 2 \"\" \"\"))\n \t (pc)))\n@@ -2505,7 +2498,7 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (ne (match_operand:SI 0 \"general_operand\" \"+g\")\n+\t (ne (match_operand:SI 0 \"nonimmediate_operand\" \"+rm\")\n \t     (match_operand:SI 1 \"const_int_operand\" \"i\"))\n \t (label_ref (match_operand 2 \"\" \"\"))\n \t (pc)))\n@@ -2636,32 +2629,32 @@\n   \"ret 0\")\n \n (define_insn \"abssf2\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=fm<\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=fm<\")\n \t(abs:SF (match_operand:SF 1 \"general_operand\" \"fmF\")))]\n   \"TARGET_32081\"\n   \"absf %1,%0\")\n \n (define_insn \"absdf2\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=lm<\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=lm<\")\n \t(abs:DF (match_operand:DF 1 \"general_operand\" \"lmF\")))]\n   \"TARGET_32081\"\n   \"absl %1,%0\")\n \n ;; See note 1\n (define_insn \"abssi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(abs:SI (match_operand:SI 1 \"general_operand\" \"g\")))]\n   \"\"\n   \"absd %1,%0\")\n \n (define_insn \"abshi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(abs:HI (match_operand:HI 1 \"general_operand\" \"g\")))]\n   \"\"\n   \"absw %1,%0\")\n \n (define_insn \"absqi2\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(abs:QI (match_operand:QI 1 \"general_operand\" \"g\")))]\n   \"\"\n   \"absb %1,%0\")\n@@ -2690,7 +2683,7 @@\n \n ;; Scondi instructions\n (define_insn \"seq\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(eq:SI (cc0) (const_int 0)))]\n   \"\"\n   \"*\n@@ -2702,7 +2695,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(eq:HI (cc0) (const_int 0)))]\n   \"\"\n   \"*\n@@ -2714,7 +2707,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(eq:QI (cc0) (const_int 0)))]\n   \"\"\n   \"*\n@@ -2726,7 +2719,7 @@\n }\")\n \n (define_insn \"sne\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(ne:SI (cc0) (const_int 0)))]\n   \"\"\n   \"*\n@@ -2738,7 +2731,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(ne:HI (cc0) (const_int 0)))]\n   \"\"\n   \"*\n@@ -2750,7 +2743,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(ne:QI (cc0) (const_int 0)))]\n   \"\"\n   \"*\n@@ -2762,153 +2755,153 @@\n }\")\n \n (define_insn \"sgt\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(gt:SI (cc0) (const_int 0)))]\n   \"\"\n   \"sgtd %0\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(gt:HI (cc0) (const_int 0)))]\n   \"\"\n   \"sgtw %0\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(gt:QI (cc0) (const_int 0)))]\n   \"\"\n   \"sgtb %0\")\n \n (define_insn \"sgtu\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(gtu:SI (cc0) (const_int 0)))]\n   \"\"\n   \"shid %0\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(gtu:HI (cc0) (const_int 0)))]\n   \"\"\n   \"shiw %0\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(gtu:QI (cc0) (const_int 0)))]\n   \"\"\n   \"shib %0\")\n \n (define_insn \"slt\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(lt:SI (cc0) (const_int 0)))]\n   \"\"\n   \"sltd %0\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(lt:HI (cc0) (const_int 0)))]\n   \"\"\n   \"sltw %0\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(lt:QI (cc0) (const_int 0)))]\n   \"\"\n   \"sltb %0\")\n \n (define_insn \"sltu\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(ltu:SI (cc0) (const_int 0)))]\n   \"\"\n   \"slod %0\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(ltu:HI (cc0) (const_int 0)))]\n   \"\"\n   \"slow %0\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(ltu:QI (cc0) (const_int 0)))]\n   \"\"\n   \"slob %0\")\n \n (define_insn \"sge\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(ge:SI (cc0) (const_int 0)))]\n   \"\"\n   \"sged %0\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(ge:HI (cc0) (const_int 0)))]\n   \"\"\n   \"sgew %0\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(ge:QI (cc0) (const_int 0)))]\n   \"\"\n   \"sgeb %0\")\n \n (define_insn \"sgeu\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(geu:SI (cc0) (const_int 0)))]\n   \"\"\n   \"shsd %0\")  \n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(geu:HI (cc0) (const_int 0)))]\n   \"\"\n   \"shsw %0\")  \n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(geu:QI (cc0) (const_int 0)))]\n   \"\"\n   \"shsb %0\")  \n \n (define_insn \"sle\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(le:SI (cc0) (const_int 0)))]\n   \"\"\n   \"sled %0\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(le:HI (cc0) (const_int 0)))]\n   \"\"\n   \"slew %0\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(le:QI (cc0) (const_int 0)))]\n   \"\"\n   \"sleb %0\")\n \n (define_insn \"sleu\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(leu:SI (cc0) (const_int 0)))]\n   \"\"\n   \"slsd %0\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(leu:HI (cc0) (const_int 0)))]\n   \"\"\n   \"slsw %0\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g<\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm<\")\n \t(leu:QI (cc0) (const_int 0)))]\n   \"\"\n   \"slsb %0\")\n \f\n ;; ffs instructions\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=ro\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=ro\")\n \t(minus:SI \n \t\t(plus:SI (ffs:SI (zero_extract:SI \n \t\t\t\t(match_operand:SI 1 \"general_operand\" \"g\") \n@@ -2920,7 +2913,7 @@\n   \"ffsd %1,%0; bfc 1f; addqd %$-1,%0; 1:\")\n \n (define_expand \"ffssi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\") (const_int 0))\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\") (const_int 0))\n    (set (match_dup 0)\n \t(minus:SI \n \t\t(plus:SI (ffs:SI (zero_extract:SI "}, {"sha": "6749fee2e5d5d4aa44c27a0d7d8427ecc18ac519", "filename": "gcc/config/ns32k/xm-genix.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27/gcc%2Fconfig%2Fns32k%2Fxm-genix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27/gcc%2Fconfig%2Fns32k%2Fxm-genix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fxm-genix.h?ref=4c54e4e417a76bb3ad2ab7523c407b0863b5ef27", "patch": "@@ -1,5 +1,7 @@\n /* Config file for ns32k running system V.  */\n \n-#include \"ns32k/xm-ns32k.h\"\n+#define memcpy(src,dst,len) bcopy ((dst),(src),(len))\n+#define memset gcc_memset\n+#define memcmp(left,right,len) bcmp ((left),(right),(len))\n \n #define USG"}, {"sha": "676b64aa137ff1e5c06e1077ccfd48b79ac8afe4", "filename": "gcc/config/ns32k/xm-netbsd.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27/gcc%2Fconfig%2Fns32k%2Fxm-netbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27/gcc%2Fconfig%2Fns32k%2Fxm-netbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fxm-netbsd.h?ref=4c54e4e417a76bb3ad2ab7523c407b0863b5ef27", "patch": "@@ -1,8 +1,3 @@\n /* Configuration for GCC for ns32k running NetBSD as host.  */\n \n-#include <ns32k/xm-ns32k.h>\n-\n-/* ns32k/xm-ns32k.h defines these macros, but we don't need them */\n-#undef memcmp\n-#undef memcpy\n-#undef memset\n+/* Nothing needs to be done */"}, {"sha": "3d1d7ac8fc11ab855669794a34db2e5ae1e761c8", "filename": "gcc/config/ns32k/xm-ns32k.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27/gcc%2Fconfig%2Fns32k%2Fxm-ns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c54e4e417a76bb3ad2ab7523c407b0863b5ef27/gcc%2Fconfig%2Fns32k%2Fxm-ns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fxm-ns32k.h?ref=4c54e4e417a76bb3ad2ab7523c407b0863b5ef27", "patch": "@@ -36,7 +36,3 @@ Boston, MA 02111-1307, USA.  */\n /* Arguments to use with `exit'.  */\n #define SUCCESS_EXIT_CODE 0\n #define FATAL_EXIT_CODE 33\n- \n-#define memcpy(src,dst,len) bcopy ((dst),(src),(len))\n-#define memset gcc_memset\n-#define memcmp(left,right,len) bcmp ((left),(right),(len))"}]}