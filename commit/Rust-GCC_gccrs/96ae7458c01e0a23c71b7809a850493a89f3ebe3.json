{"sha": "96ae7458c01e0a23c71b7809a850493a89f3ebe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZhZTc0NThjMDFlMGEyM2M3MWI3ODA5YTg1MDQ5M2E4OWYzZWJlMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-07-11T16:57:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-07-11T16:57:25Z"}, "message": "re PR debug/49676 (inefficiency: DW_AT_GNU_call_site_value calculates everything << 32)\n\n\tPR debug/49676\n\t* dwarf2out.c (int_shift_loc_descriptor): New function.\n\t(int_loc_descriptor): If shorter, emit i as\n\t(i >> shift), shift, DW_OP_shl for suitable shift value.\n\tSimilarly, try to optimize large negative values using\n\tDW_OP_neg of a positive value if shorter.\n\t(size_of_int_shift_loc_descriptor): New function.\n\t(size_of_int_loc_descriptor): Adjust to match int_loc_descriptor\n\tchanges.\n\t(mem_loc_descriptor) <case CONST_INT>: Emit zero-extended constants\n\tthat fit into DWARF2_ADDR_SIZE bytes as int_loc_descriptor +\n\tDW_OP_GNU_convert instead of DW_OP_GNU_const_type if the former\n\tis shorter.\n\t(resolve_addr_in_expr): Optimize DW_OP_plus_uconst with a large\n\taddend as added DW_OP_plus if it is shorter.\n\n\t* gcc.dg/guality/csttest.c: New test.\n\nFrom-SVN: r176167", "tree": {"sha": "755f987ded70868d77d0a6f6d647ab846363e287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/755f987ded70868d77d0a6f6d647ab846363e287"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96ae7458c01e0a23c71b7809a850493a89f3ebe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ae7458c01e0a23c71b7809a850493a89f3ebe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96ae7458c01e0a23c71b7809a850493a89f3ebe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ae7458c01e0a23c71b7809a850493a89f3ebe3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "932ebb945fca9b847e2a8db42eb868191a1a56a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/932ebb945fca9b847e2a8db42eb868191a1a56a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/932ebb945fca9b847e2a8db42eb868191a1a56a9"}], "stats": {"total": 256, "additions": 243, "deletions": 13}, "files": [{"sha": "4552b3df3d70d83799a9a22395190177956c48ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ae7458c01e0a23c71b7809a850493a89f3ebe3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ae7458c01e0a23c71b7809a850493a89f3ebe3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96ae7458c01e0a23c71b7809a850493a89f3ebe3", "patch": "@@ -1,3 +1,21 @@\n+2011-07-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/49676\n+\t* dwarf2out.c (int_shift_loc_descriptor): New function.\n+\t(int_loc_descriptor): If shorter, emit i as\n+\t(i >> shift), shift, DW_OP_shl for suitable shift value.\n+\tSimilarly, try to optimize large negative values using\n+\tDW_OP_neg of a positive value if shorter.\n+\t(size_of_int_shift_loc_descriptor): New function.\n+\t(size_of_int_loc_descriptor): Adjust to match int_loc_descriptor\n+\tchanges.\n+\t(mem_loc_descriptor) <case CONST_INT>: Emit zero-extended constants\n+\tthat fit into DWARF2_ADDR_SIZE bytes as int_loc_descriptor +\n+\tDW_OP_GNU_convert instead of DW_OP_GNU_const_type if the former\n+\tis shorter.\n+\t(resolve_addr_in_expr): Optimize DW_OP_plus_uconst with a large\n+\taddend as added DW_OP_plus if it is shorter.\n+\n 2011-07-11  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/i386/sol2.h [!USE_GLD] (CTORS_SECTION_ASM_OP): Define."}, {"sha": "f9a1e70e58010af8e9199bebab9b3b289611bd19", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 159, "deletions": 13, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ae7458c01e0a23c71b7809a850493a89f3ebe3/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ae7458c01e0a23c71b7809a850493a89f3ebe3/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=96ae7458c01e0a23c71b7809a850493a89f3ebe3", "patch": "@@ -10135,6 +10135,21 @@ multiple_reg_loc_descriptor (rtx rtl, rtx regs,\n   return loc_result;\n }\n \n+static unsigned long size_of_int_loc_descriptor (HOST_WIDE_INT);\n+\n+/* Return a location descriptor that designates a constant i,\n+   as a compound operation from constant (i >> shift), constant shift\n+   and DW_OP_shl.  */\n+\n+static dw_loc_descr_ref\n+int_shift_loc_descriptor (HOST_WIDE_INT i, int shift)\n+{\n+  dw_loc_descr_ref ret = int_loc_descriptor (i >> shift);\n+  add_loc_descr (&ret, int_loc_descriptor (shift));\n+  add_loc_descr (&ret, new_loc_descr (DW_OP_shl, 0, 0));\n+  return ret;\n+}\n+\n /* Return a location descriptor that designates a constant.  */\n \n static dw_loc_descr_ref\n@@ -10146,15 +10161,45 @@ int_loc_descriptor (HOST_WIDE_INT i)\n      defaulting to the LEB encoding.  */\n   if (i >= 0)\n     {\n+      int clz = clz_hwi (i);\n+      int ctz = ctz_hwi (i);\n       if (i <= 31)\n \top = (enum dwarf_location_atom) (DW_OP_lit0 + i);\n       else if (i <= 0xff)\n \top = DW_OP_const1u;\n       else if (i <= 0xffff)\n \top = DW_OP_const2u;\n-      else if (HOST_BITS_PER_WIDE_INT == 32\n-\t       || i <= 0xffffffff)\n+      else if (clz + ctz >= HOST_BITS_PER_WIDE_INT - 5\n+\t       && clz + 5 + 255 >= HOST_BITS_PER_WIDE_INT)\n+\t/* DW_OP_litX DW_OP_litY DW_OP_shl takes just 3 bytes and\n+\t   DW_OP_litX DW_OP_const1u Y DW_OP_shl takes just 4 bytes,\n+\t   while DW_OP_const4u is 5 bytes.  */\n+\treturn int_shift_loc_descriptor (i, HOST_BITS_PER_WIDE_INT - clz - 5);\n+      else if (clz + ctz >= HOST_BITS_PER_WIDE_INT - 8\n+\t       && clz + 8 + 31 >= HOST_BITS_PER_WIDE_INT)\n+\t/* DW_OP_const1u X DW_OP_litY DW_OP_shl takes just 4 bytes,\n+\t   while DW_OP_const4u is 5 bytes.  */\n+\treturn int_shift_loc_descriptor (i, HOST_BITS_PER_WIDE_INT - clz - 8);\n+      else if (HOST_BITS_PER_WIDE_INT == 32 || i <= 0xffffffff)\n \top = DW_OP_const4u;\n+      else if (clz + ctz >= HOST_BITS_PER_WIDE_INT - 8\n+\t       && clz + 8 + 255 >= HOST_BITS_PER_WIDE_INT)\n+\t/* DW_OP_const1u X DW_OP_const1u Y DW_OP_shl takes just 5 bytes,\n+\t   while DW_OP_constu of constant >= 0x100000000 takes at least\n+\t   6 bytes.  */\n+\treturn int_shift_loc_descriptor (i, HOST_BITS_PER_WIDE_INT - clz - 8);\n+      else if (clz + ctz >= HOST_BITS_PER_WIDE_INT - 16\n+\t       && clz + 16 + (size_of_uleb128 (i) > 5 ? 255 : 31)\n+\t\t  >= HOST_BITS_PER_WIDE_INT)\n+\t/* DW_OP_const2u X DW_OP_litY DW_OP_shl takes just 5 bytes,\n+\t   DW_OP_const2u X DW_OP_const1u Y DW_OP_shl takes 6 bytes,\n+\t   while DW_OP_constu takes in this case at least 6 bytes.  */\n+\treturn int_shift_loc_descriptor (i, HOST_BITS_PER_WIDE_INT - clz - 16);\n+      else if (clz + ctz >= HOST_BITS_PER_WIDE_INT - 32\n+\t       && clz + 32 + 31 >= HOST_BITS_PER_WIDE_INT\n+\t       && size_of_uleb128 (i) > 6)\n+\t/* DW_OP_const4u X DW_OP_litY DW_OP_shl takes just 7 bytes.  */\n+\treturn int_shift_loc_descriptor (i, HOST_BITS_PER_WIDE_INT - clz - 32);\n       else\n \top = DW_OP_constu;\n     }\n@@ -10164,47 +10209,116 @@ int_loc_descriptor (HOST_WIDE_INT i)\n \top = DW_OP_const1s;\n       else if (i >= -0x8000)\n \top = DW_OP_const2s;\n-      else if (HOST_BITS_PER_WIDE_INT == 32\n-\t       || i >= -0x80000000)\n-\top = DW_OP_const4s;\n+      else if (HOST_BITS_PER_WIDE_INT == 32 || i >= -0x80000000)\n+\t{\n+\t  if (size_of_int_loc_descriptor (i) < 5)\n+\t    {\n+\t      dw_loc_descr_ref ret = int_loc_descriptor (-i);\n+\t      add_loc_descr (&ret, new_loc_descr (DW_OP_neg, 0, 0));\n+\t      return ret;\n+\t    }\n+\t  op = DW_OP_const4s;\n+\t}\n       else\n-\top = DW_OP_consts;\n+\t{\n+\t  if (size_of_int_loc_descriptor (i)\n+\t      < (unsigned long) 1 + size_of_sleb128 (i))\n+\t    {\n+\t      dw_loc_descr_ref ret = int_loc_descriptor (-i);\n+\t      add_loc_descr (&ret, new_loc_descr (DW_OP_neg, 0, 0));\n+\t      return ret;\n+\t    }\n+\t  op = DW_OP_consts;\n+\t}\n     }\n \n   return new_loc_descr (op, i, 0);\n }\n \n+/* Return size_of_locs (int_shift_loc_descriptor (i, shift))\n+   without actually allocating it.  */\n+\n+static unsigned long\n+size_of_int_shift_loc_descriptor (HOST_WIDE_INT i, int shift)\n+{\n+  return size_of_int_loc_descriptor (i >> shift)\n+\t + size_of_int_loc_descriptor (shift)\n+\t + 1;\n+}\n+\n /* Return size_of_locs (int_loc_descriptor (i)) without\n    actually allocating it.  */\n \n static unsigned long\n size_of_int_loc_descriptor (HOST_WIDE_INT i)\n {\n+  unsigned long s;\n+\n   if (i >= 0)\n     {\n+      int clz, ctz;\n       if (i <= 31)\n \treturn 1;\n       else if (i <= 0xff)\n \treturn 2;\n       else if (i <= 0xffff)\n \treturn 3;\n-      else if (HOST_BITS_PER_WIDE_INT == 32\n-\t       || i <= 0xffffffff)\n+      clz = clz_hwi (i);\n+      ctz = ctz_hwi (i);\n+      if (clz + ctz >= HOST_BITS_PER_WIDE_INT - 5\n+\t  && clz + 5 + 255 >= HOST_BITS_PER_WIDE_INT)\n+\treturn size_of_int_shift_loc_descriptor (i, HOST_BITS_PER_WIDE_INT\n+\t\t\t\t\t\t    - clz - 5);\n+      else if (clz + ctz >= HOST_BITS_PER_WIDE_INT - 8\n+\t       && clz + 8 + 31 >= HOST_BITS_PER_WIDE_INT)\n+\treturn size_of_int_shift_loc_descriptor (i, HOST_BITS_PER_WIDE_INT\n+\t\t\t\t\t\t    - clz - 8);\n+      else if (HOST_BITS_PER_WIDE_INT == 32 || i <= 0xffffffff)\n \treturn 5;\n+      s = size_of_uleb128 ((unsigned HOST_WIDE_INT) i);\n+      if (clz + ctz >= HOST_BITS_PER_WIDE_INT - 8\n+\t  && clz + 8 + 255 >= HOST_BITS_PER_WIDE_INT)\n+\treturn size_of_int_shift_loc_descriptor (i, HOST_BITS_PER_WIDE_INT\n+\t\t\t\t\t\t    - clz - 8);\n+      else if (clz + ctz >= HOST_BITS_PER_WIDE_INT - 16\n+\t       && clz + 16 + (s > 5 ? 255 : 31) >= HOST_BITS_PER_WIDE_INT)\n+\treturn size_of_int_shift_loc_descriptor (i, HOST_BITS_PER_WIDE_INT\n+\t\t\t\t\t\t    - clz - 16);\n+      else if (clz + ctz >= HOST_BITS_PER_WIDE_INT - 32\n+\t       && clz + 32 + 31 >= HOST_BITS_PER_WIDE_INT\n+\t       && s > 6)\n+\treturn size_of_int_shift_loc_descriptor (i, HOST_BITS_PER_WIDE_INT\n+\t\t\t\t\t\t    - clz - 32);\n       else\n-\treturn 1 + size_of_uleb128 ((unsigned HOST_WIDE_INT) i);\n+\treturn 1 + s;\n     }\n   else\n     {\n       if (i >= -0x80)\n \treturn 2;\n       else if (i >= -0x8000)\n \treturn 3;\n-      else if (HOST_BITS_PER_WIDE_INT == 32\n-\t       || i >= -0x80000000)\n-\treturn 5;\n+      else if (HOST_BITS_PER_WIDE_INT == 32 || i >= -0x80000000)\n+\t{\n+\t  if (-(unsigned HOST_WIDE_INT) i != (unsigned HOST_WIDE_INT) i)\n+\t    {\n+\t      s = size_of_int_loc_descriptor (-i) + 1;\n+\t      if (s < 5)\n+\t\treturn s;\n+\t    }\n+\t  return 5;\n+\t}\n       else\n-\treturn 1 + size_of_sleb128 (i);\n+\t{\n+\t  unsigned long r = 1 + size_of_sleb128 (i);\n+\t  if (-(unsigned HOST_WIDE_INT) i != (unsigned HOST_WIDE_INT) i)\n+\t    {\n+\t      s = size_of_int_loc_descriptor (-i) + 1;\n+\t      if (s < r)\n+\t\treturn s;\n+\t    }\n+\t  return r;\n+\t}\n     }\n }\n \n@@ -11818,8 +11932,27 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n \t      || GET_MODE_BITSIZE (mode) == 2 * HOST_BITS_PER_WIDE_INT))\n \t{\n \t  dw_die_ref type_die = base_type_for_mode (mode, 1);\n+\t  enum machine_mode amode;\n \t  if (type_die == NULL)\n \t    return NULL;\n+\t  amode = mode_for_size (DWARF2_ADDR_SIZE * BITS_PER_UNIT,\n+\t\t\t\t MODE_INT, 0);\n+\t  if (INTVAL (rtl) >= 0\n+\t      && amode != BLKmode\n+\t      && trunc_int_for_mode (INTVAL (rtl), amode) == INTVAL (rtl)\n+\t      /* const DW_OP_GNU_convert <XXX> vs.\n+\t\t DW_OP_GNU_const_type <XXX, 1, const>.  */\n+\t      && size_of_int_loc_descriptor (INTVAL (rtl)) + 1 + 1\n+\t\t < (unsigned long) 1 + 1 + 1 + GET_MODE_SIZE (mode))\n+\t    {\n+\t      mem_loc_result = int_loc_descriptor (INTVAL (rtl));\n+\t      op0 = new_loc_descr (DW_OP_GNU_convert, 0, 0);\n+\t      op0->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n+\t      op0->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n+\t      op0->dw_loc_oprnd1.v.val_die_ref.external = 0;\n+\t      add_loc_descr (&mem_loc_result, op0);\n+\t      return mem_loc_result;\n+\t    }\n \t  mem_loc_result = new_loc_descr (DW_OP_GNU_const_type, 0,\n \t\t\t\t\t  INTVAL (rtl));\n \t  mem_loc_result->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n@@ -20962,6 +21095,19 @@ resolve_addr_in_expr (dw_loc_descr_ref loc)\n \t    && resolve_one_addr (&loc->dw_loc_oprnd1.v.val_addr, NULL))\n \t  return false;\n \tbreak;\n+      case DW_OP_plus_uconst:\n+\tif (size_of_loc_descr (loc)\n+\t    > size_of_int_loc_descriptor (loc->dw_loc_oprnd1.v.val_unsigned)\n+\t      + 1\n+\t    && loc->dw_loc_oprnd1.v.val_unsigned > 0)\n+\t  {\n+\t    dw_loc_descr_ref repl\n+\t      = int_loc_descriptor (loc->dw_loc_oprnd1.v.val_unsigned);\n+\t    add_loc_descr (&repl, new_loc_descr (DW_OP_plus, 0, 0));\n+\t    add_loc_descr (&repl, loc->dw_loc_next);\n+\t    *loc = *repl;\n+\t  }\n+\tbreak;\n       case DW_OP_implicit_value:\n \tif (loc->dw_loc_oprnd2.val_class == dw_val_class_addr\n \t    && resolve_one_addr (&loc->dw_loc_oprnd2.v.val_addr, NULL))"}, {"sha": "6c76e33b934f5f2305b5e63eeacae35c782a33ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ae7458c01e0a23c71b7809a850493a89f3ebe3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ae7458c01e0a23c71b7809a850493a89f3ebe3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96ae7458c01e0a23c71b7809a850493a89f3ebe3", "patch": "@@ -1,5 +1,8 @@\n 2011-07-11  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/49676\n+\t* gcc.dg/guality/csttest.c: New test.\n+\n \tPR fortran/49698\n \t* gfortran.dg/pr49698.f90: New test.\n "}, {"sha": "4480c715e35f78716eae73f647af4c645868edb9", "filename": "gcc/testsuite/gcc.dg/guality/csttest.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ae7458c01e0a23c71b7809a850493a89f3ebe3/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fcsttest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ae7458c01e0a23c71b7809a850493a89f3ebe3/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fcsttest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fcsttest.c?ref=96ae7458c01e0a23c71b7809a850493a89f3ebe3", "patch": "@@ -0,0 +1,63 @@\n+/* PR debug/49676 */\n+/* { dg-do run { target lp64 } } */\n+/* { dg-options \"-g\" } */\n+\n+volatile int v;\n+\n+__attribute__((noinline, noclone))\n+unsigned long long\n+foo (unsigned long long x)\n+{\n+  unsigned long long a = x * (0x17ULL << 31);\t/* { dg-final { gdb-test 29 \"a\" \"(0x17ULL << 31)\" } } */\n+  unsigned long long b = x * (0x7ULL << 33);\t/* { dg-final { gdb-test 29 \"b\" \"(0x7ULL << 33)\" } } */\n+  unsigned long long c = x * (0x1ULL << 35);\t/* { dg-final { gdb-test 29 \"c\" \"(0x1ULL << 35)\" } } */\n+  unsigned long long d = x * (0x17ULL << 15);\t/* { dg-final { gdb-test 29 \"d\" \"(0x17ULL << 15)\" } } */\n+  unsigned long long e = x * (0x17ULL << 50);\t/* { dg-final { gdb-test 29 \"e\" \"(0x17ULL << 50)\" } } */\n+  unsigned long long f = x * (0x37ULL << 31);\t/* { dg-final { gdb-test 29 \"f\" \"(0x37ULL << 31)\" } } */\n+  unsigned long long g = x * (0x37ULL << 50);\t/* { dg-final { gdb-test 29 \"g\" \"(0x37ULL << 50)\" } } */\n+  unsigned long long h = x * (0x1efULL << 33);\t/* { dg-final { gdb-test 29 \"h\" \"(0x1efULL << 33)\" } } */\n+  unsigned long long i = x * (0x1efULL << 50);\t/* { dg-final { gdb-test 29 \"i\" \"(0x1efULL << 50)\" } } */\n+  unsigned long long j = x * -(0x17ULL << 31);\t/* { dg-final { gdb-test 29 \"j\" \"-(0x17ULL << 31)\" } } */\n+  unsigned long long k = x * -(0x7ULL << 33);\t/* { dg-final { gdb-test 29 \"k\" \"-(0x7ULL << 33)\" } } */\n+  unsigned long long l = x * -(0x1ULL << 35);\t/* { dg-final { gdb-test 29 \"l\" \"-(0x1ULL << 35)\" } } */\n+  unsigned long long m = x * -(0x17ULL << 15);\t/* { dg-final { gdb-test 29 \"m\" \"-(0x17ULL << 15)\" } } */\n+  unsigned long long n = x * -(0x17ULL << 50);\t/* { dg-final { gdb-test 29 \"n\" \"-(0x17ULL << 50)\" } } */\n+  unsigned long long o = x * -(0x37ULL << 31);\t/* { dg-final { gdb-test 29 \"o\" \"-(0x37ULL << 31)\" } } */\n+  unsigned long long p = x * -(0x37ULL << 50);\t/* { dg-final { gdb-test 29 \"p\" \"-(0x37ULL << 50)\" } } */\n+  unsigned long long q = x * -(0x1efULL << 33);\t/* { dg-final { gdb-test 29 \"q\" \"-(0x1efULL << 33)\" } } */\n+  unsigned long long r = x * -(0x1efULL << 50);\t/* { dg-final { gdb-test 29 \"r\" \"-(0x1efULL << 50)\" } } */\n+  v++;\n+  return x;\n+}\n+\n+__attribute__((noinline, noclone))\n+unsigned long long\n+bar (unsigned long long x)\n+{\n+  unsigned long long a = (x & 255) + (0x17ULL << 31);\t/* { dg-final { gdb-test 55 \"a\" \"(0x17ULL << 31)\" } } */\n+  unsigned long long b = (x & 255) + (0x7ULL << 33);\t/* { dg-final { gdb-test 55 \"b\" \"(0x7ULL << 33)\" } } */\n+  unsigned long long c = (x & 255) + (0x1ULL << 35);\t/* { dg-final { gdb-test 55 \"c\" \"(0x1ULL << 35)\" } } */\n+  unsigned long long d = (x & 255) + (0x17ULL << 15);\t/* { dg-final { gdb-test 55 \"d\" \"(0x17ULL << 15)\" } } */\n+  unsigned long long e = (x & 255) + (0x17ULL << 50);\t/* { dg-final { gdb-test 55 \"e\" \"(0x17ULL << 50)\" } } */\n+  unsigned long long f = (x & 255) + (0x37ULL << 31);\t/* { dg-final { gdb-test 55 \"f\" \"(0x37ULL << 31)\" } } */\n+  unsigned long long g = (x & 255) + (0x37ULL << 50);\t/* { dg-final { gdb-test 55 \"g\" \"(0x37ULL << 50)\" } } */\n+  unsigned long long h = (x & 255) + (0x1efULL << 33);\t/* { dg-final { gdb-test 55 \"h\" \"(0x1efULL << 33)\" } } */\n+  unsigned long long i = (x & 255) + (0x1efULL << 50);\t/* { dg-final { gdb-test 55 \"i\" \"(0x1efULL << 50)\" } } */\n+  unsigned long long j = (x & 255) + -(0x17ULL << 31);\t/* { dg-final { gdb-test 55 \"j\" \"-(0x17ULL << 31)\" } } */\n+  unsigned long long k = (x & 255) + -(0x7ULL << 33);\t/* { dg-final { gdb-test 55 \"k\" \"-(0x7ULL << 33)\" } } */\n+  unsigned long long l = (x & 255) + -(0x1ULL << 35);\t/* { dg-final { gdb-test 55 \"l\" \"-(0x1ULL << 35)\" } } */\n+  unsigned long long m = (x & 255) + -(0x17ULL << 15);\t/* { dg-final { gdb-test 55 \"m\" \"-(0x17ULL << 15)\" } } */\n+  unsigned long long n = (x & 255) + -(0x17ULL << 50);\t/* { dg-final { gdb-test 55 \"n\" \"-(0x17ULL << 50)\" } } */\n+  unsigned long long o = (x & 255) + -(0x37ULL << 31);\t/* { dg-final { gdb-test 55 \"o\" \"-(0x37ULL << 31)\" } } */\n+  unsigned long long p = (x & 255) + -(0x37ULL << 50);\t/* { dg-final { gdb-test 55 \"p\" \"-(0x37ULL << 50)\" } } */\n+  unsigned long long q = (x & 255) + -(0x1efULL << 33);\t/* { dg-final { gdb-test 55 \"q\" \"-(0x1efULL << 33)\" } } */\n+  unsigned long long r = (x & 255) + -(0x1efULL << 50);\t/* { dg-final { gdb-test 55 \"r\" \"-(0x1efULL << 50)\" } } */\n+  v++;\n+  return x;\n+}\n+\n+int\n+main ()\n+{\n+  return foo (1) + bar (256) - 257;\n+}"}]}