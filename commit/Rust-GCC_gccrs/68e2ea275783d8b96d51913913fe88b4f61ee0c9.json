{"sha": "68e2ea275783d8b96d51913913fe88b4f61ee0c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhlMmVhMjc1NzgzZDhiOTZkNTE5MTM5MTNmZTg4YjRmNjFlZTBjOQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2006-02-15T09:32:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:32:12Z"}, "message": "ali-util.adb (Get_File_Checksum): Update to account for change in profile of Initialize_Scanner.\n\n2006-02-13  Thomas Quinot  <quinot@adacore.com>\n\t    Vincent Celier  <celier@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\n\t* ali-util.adb (Get_File_Checksum): Update to account for change in\n\tprofile of Initialize_Scanner.\n\n\t* gprep.adb (Gnatprep): Update to account for change in profile of\n\tInitialize_Scanner.\n\t(Process_One_File): Same.\n\n\t* lib.adb (Get_Code_Or_Source_Unit): New subprogram factoring the\n\tcommon code between Get_Code_Unit and Get_Source_Unit. Reimplement\n\tthat behaviour using the new Unit information recorded in the source\n\tfiles table, rather than going through all units every time.\n\t(Get_Code_Unit): Reimplement in terms of Get_Code_Or_Source_Unit.\n\t(Get_Source_Unit): Same.\n\n\t* prepcomp.adb (Parse_Preprocessing_Data_File): Update to account for\n\tchange in profile of Initialize_Scanner.\n\t(Prepare_To_Preprocess): Same.\n\n\t* lib.ads: Fix typo in comment (templace -> template).\n\n\t* prj-part.adb (Parse_Single_Project): Update to account for change in\n\tprofile of Initialize_Scanner.\n\n\t* scn.adb (Initialize_Scanner): Account for change in profile of\n\tScng.Initialize_Scanner: set Current_Source_Unit in Scn instead of Scng.\n\tAlso record the association of the given Source_File_Index to the\n\tcorresponding Unit_Number_Type.\n\n\t* scng.ads, scng.adb (Initialize_Scanner.Set_Reserved): Remove\n\tprocedure.\n\t(Initialize_Scanner): Call Scans.Initialize_Ada_Keywords.\n\tRemove Unit formal for generic scanner: this formal\n\tis only relevant to Scn (the scanner instance used to parse Ada source\n\tfiles), not to other instances. Update comment accordingly.\n\t(Scan): Use new function Snames.Is_Keyword_Name.\n\n\t* sinfo-cn.adb: Fix typo in comment.\n\n\t* sinput.adb (Unit, Set_Unit): Accessors for new source file attribute\n\tUnit.\n\n\t* sinput.ads (Source_File_Record): New component Unit, used to capture\n\tthe unit identifier (if any) associated to a source file.\n\n\t* sinput-c.adb, sinput-l.adb (Load_File): Initialize new component\n\tUnit in Source_File_Record.\n\n\t* sinput-p.adb (Source_File_Is_Subunit): Update to account for change\n\tin profile of Initialize_Scanner.\n\n\t* scans.adb (Initialize_Ada_Keywords): New procedure\n\n\t* scans.ads (Initialize_Ada_Keywords): New procedure to initialize the\n\tAda keywords in the Namet table, without the need to call\n\tInitialize_Scanner.\n\n\t* snames.adb: Add pragma Ada_2005 (synonym for Ada_05)\n\t(Is_Keyword_Name): New function\n\n\t* snames.ads: Add subtype Configuration_Pragma_Names\n\tAdd pragma Ada_2005 (synonym for Ada_05)\n\t(Is_Keyword_Name): New function\n\n\t* snames.h: Add pragma Ada_2005 (synonym for Ada_05)\n\nFrom-SVN: r111032", "tree": {"sha": "d3b7db1cb334e3cd4b6396c5d647f032daea89f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3b7db1cb334e3cd4b6396c5d647f032daea89f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68e2ea275783d8b96d51913913fe88b4f61ee0c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e2ea275783d8b96d51913913fe88b4f61ee0c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e2ea275783d8b96d51913913fe88b4f61ee0c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e2ea275783d8b96d51913913fe88b4f61ee0c9/comments", "author": null, "committer": null, "parents": [{"sha": "6f301919dc530893fa43e994531ff347f955000a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f301919dc530893fa43e994531ff347f955000a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f301919dc530893fa43e994531ff347f955000a"}], "stats": {"total": 2119, "additions": 1093, "deletions": 1026}, "files": [{"sha": "a3369772d126bd038f16b9b7adb842b5b684da9b", "filename": "gcc/ada/ali-util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fali-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fali-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali-util.adb?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -154,7 +154,7 @@ package body ALI.Util is\n          return Checksum_Error;\n       end if;\n \n-      Scanner.Initialize_Scanner (Types.No_Unit, Source_Index);\n+      Scanner.Initialize_Scanner (Source_Index);\n \n       --  Make sure that the project language reserved words are not\n       --  recognized as reserved words, but as identifiers. The byte info for"}, {"sha": "3a3e2825962c413dd95cfddae8363535ba4e6ed8", "filename": "gcc/ada/gprep.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fgprep.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fgprep.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgprep.adb?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -27,7 +27,7 @@\n with Csets;\n with Err_Vars; use Err_Vars;\n with Errutil;\n-with Gnatvsn;\n+with Gnatvsn;  use Gnatvsn;\n with Namet;    use Namet;\n with Opt;\n with Osint;    use Osint;\n@@ -137,7 +137,9 @@ package body GPrep is\n    begin\n       if not Copyright_Displayed then\n          Write_Line (\"GNAT Preprocessor \" & Gnatvsn.Gnat_Version_String);\n-         Write_Line (\"Copyright 1996-2005, Free Software Foundation, Inc.\");\n+         Write_Line (\"Copyright 1996-\" &\n+                     Current_Year &\n+                     \", Free Software Foundation, Inc.\");\n          Copyright_Displayed := True;\n       end if;\n    end Display_Copyright;\n@@ -241,7 +243,7 @@ package body GPrep is\n                      \"\"\"\");\n             end if;\n \n-            Scanner.Initialize_Scanner (No_Unit, Deffile);\n+            Scanner.Initialize_Scanner (Deffile);\n \n             Prep.Parse_Def_File;\n          end;\n@@ -502,7 +504,7 @@ package body GPrep is\n \n          Sinput.Main_Source_File := Infile;\n \n-         Scanner.Initialize_Scanner (No_Unit, Infile);\n+         Scanner.Initialize_Scanner (Infile);\n \n          --  Output the SFN pragma if asked to\n "}, {"sha": "420f9693b3d9df903159ccb172a76b469fa15b7d", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 43, "deletions": 41, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -66,6 +66,12 @@ package body Lib is\n    --  Used by In_Same_Extended_Unit and Earlier_In_Extended_Unit. Returns\n    --  value as described above.\n \n+   function Get_Code_Or_Source_Unit\n+     (S                : Source_Ptr;\n+      Unwind_Instances : Boolean) return Unit_Number_Type;\n+   --  Common code for Get_Code_Unit (get unit of instantiation for location)\n+   --  and Get_Source_Unit (get unit of template for location).\n+\n    --------------------------------------------\n    -- Access Functions for Unit Table Fields --\n    --------------------------------------------\n@@ -486,34 +492,56 @@ package body Lib is\n       end if;\n    end Generic_Separately_Compiled;\n \n-   -------------------\n-   -- Get_Code_Unit --\n-   -------------------\n+   -----------------------------\n+   -- Get_Code_Or_Source_Unit --\n+   -----------------------------\n \n-   function Get_Code_Unit (S : Source_Ptr) return Unit_Number_Type is\n+   function Get_Code_Or_Source_Unit\n+     (S                : Source_Ptr;\n+      Unwind_Instances : Boolean) return Unit_Number_Type\n+   is\n    begin\n       --  Search table unless we have No_Location, which can happen if the\n       --  relevant location has not been set yet. Happens for example when\n       --  we obtain Sloc (Cunit (Main_Unit)) before it is set.\n \n       if S /= No_Location then\n          declare\n-            Source_File : constant Source_File_Index :=\n-                            Get_Source_File_Index (Top_Level_Location (S));\n+            Source_File : Source_File_Index;\n+            Source_Unit : Unit_Number_Type;\n \n          begin\n-            for U in Units.First .. Units.Last loop\n-               if Source_Index (U) = Source_File then\n-                  return U;\n-               end if;\n-            end loop;\n+            Source_File := Get_Source_File_Index (S);\n+\n+            if Unwind_Instances then\n+               while Template (Source_File) /= No_Source_File loop\n+                  Source_File := Template (Source_File);\n+               end loop;\n+            end if;\n+\n+            Source_Unit := Unit (Source_File);\n+\n+            if Source_Unit /= No_Unit then\n+               return Source_Unit;\n+            end if;\n          end;\n       end if;\n \n-      --  If S was No_Location, or was not in the table, we must be in the\n-      --  main source unit (and the value has not been placed in the table yet)\n+      --  If S was No_Location, or was not in the table, we must be in the main\n+      --  source unit (and the value has not been placed in the table yet),\n+      --  or in one of the configuration pragma files.\n \n       return Main_Unit;\n+   end Get_Code_Or_Source_Unit;\n+\n+   -------------------\n+   -- Get_Code_Unit --\n+   -------------------\n+\n+   function Get_Code_Unit (S : Source_Ptr) return Unit_Number_Type is\n+   begin\n+      return Get_Code_Or_Source_Unit (Top_Level_Location (S),\n+        Unwind_Instances => False);\n    end Get_Code_Unit;\n \n    function Get_Code_Unit (N : Node_Or_Entity_Id) return Unit_Number_Type is\n@@ -579,33 +607,7 @@ package body Lib is\n \n    function Get_Source_Unit (S : Source_Ptr) return Unit_Number_Type is\n    begin\n-      --  Search table unless we have No_Location, which can happen if the\n-      --  relevant location has not been set yet. Happens for example when\n-      --  we obtain Sloc (Cunit (Main_Unit)) before it is set.\n-\n-      if S /= No_Location then\n-         declare\n-            Source_File : Source_File_Index :=\n-                            Get_Source_File_Index (Top_Level_Location (S));\n-\n-         begin\n-            Source_File := Get_Source_File_Index (S);\n-            while Template (Source_File) /= No_Source_File loop\n-               Source_File := Template (Source_File);\n-            end loop;\n-\n-            for U in Units.First .. Units.Last loop\n-               if Source_Index (U) = Source_File then\n-                  return U;\n-               end if;\n-            end loop;\n-         end;\n-      end if;\n-\n-      --  If S was No_Location, or was not in the table, we must be in the\n-      --  main source unit (and the value has not got put into the table yet)\n-\n-      return Main_Unit;\n+      return Get_Code_Or_Source_Unit (S, Unwind_Instances => True);\n    end Get_Source_Unit;\n \n    function Get_Source_Unit (N : Node_Or_Entity_Id) return Unit_Number_Type is"}, {"sha": "e02555ade650f0db654e14bb71538a1eeeb6019f", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -424,10 +424,10 @@ package Lib is\n    --  Return unit number of file identified by given source pointer value.\n    --  This call must always succeed, since any valid source pointer value\n    --  belongs to some previously loaded module. If the given source pointer\n-   --  value is within an instantiation, this function returns the unit\n-   --  number of the templace, i.e. the unit containing the source code\n-   --  corresponding to the given Source_Ptr value. The version taking\n-   --  a Node_Id argument, N, simply applies the function to Sloc (N).\n+   --  value is within an instantiation, this function returns the unit number\n+   --  of the template, i.e. the unit containing the source code corresponding\n+   --  to the given Source_Ptr value. The version taking a Node_Id argument, N,\n+   --  simply applies the function to Sloc (N).\n \n    function Get_Code_Unit (N : Node_Or_Entity_Id) return Unit_Number_Type;\n    pragma Inline (Get_Code_Unit);"}, {"sha": "7fd1984cc55e2c49e2341356446113cb0a1c3b44", "filename": "gcc/ada/prepcomp.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fprepcomp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fprepcomp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprepcomp.adb?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -248,8 +248,7 @@ package body Prepcomp is\n \n       --  Initialize the sanner and set its behavior for a processing data file\n \n-      Scn.Scanner.Initialize_Scanner\n-        (No_Unit, Source_Index_Of_Preproc_Data_File);\n+      Scn.Scanner.Initialize_Scanner (Source_Index_Of_Preproc_Data_File);\n       Scn.Scanner.Set_End_Of_Line_As_Token (True);\n       Scn.Scanner.Reset_Special_Characters;\n \n@@ -676,7 +675,7 @@ package body Prepcomp is\n \n             --  Initialize the scanner and process the definition file\n \n-            Scn.Scanner.Initialize_Scanner (No_Unit, Deffile);\n+            Scn.Scanner.Initialize_Scanner (Deffile);\n             Prep.Parse_Def_File;\n \n             --  Reset the behaviour of the scanner to the default"}, {"sha": "8e9f963390aa50919a8b6125de5c767441ee6624", "filename": "gcc/ada/prj-part.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fprj-part.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fprj-part.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-part.adb?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1040,7 +1040,7 @@ package body Prj.Part is\n          return;\n       end if;\n \n-      Prj.Err.Scanner.Initialize_Scanner (Types.No_Unit, Source_Index);\n+      Prj.Err.Scanner.Initialize_Scanner (Source_Index);\n       Tree.Reset_State;\n       Scan (In_Tree);\n "}, {"sha": "a22fdfd99d02bdcf350d4afd8709453c57e60074", "filename": "gcc/ada/scans.adb", "status": "modified", "additions": 111, "deletions": 2, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fscans.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fscans.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.adb?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,13 +31,122 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Namet;  use Namet;\n+with Snames; use Snames;\n+\n package body Scans is\n \n+   -----------------------------\n+   -- Initialize_Ada_Keywords --\n+   -----------------------------\n+\n+   procedure Initialize_Ada_Keywords is\n+      procedure Set_Reserved (N : Name_Id; T : Token_Type);\n+      pragma Inline (Set_Reserved);\n+      --  Set given name as a reserved word (T is the corresponding token)\n+\n+      ------------------\n+      -- Set_Reserved --\n+      ------------------\n+\n+      procedure Set_Reserved (N : Name_Id; T : Token_Type) is\n+      begin\n+         --  Set up Token_Type values in Names table entries for reserved\n+         --  words. We use the Pos value of the Token_Type value. Note that\n+         --  Is_Keyword_Name relies on the fact that Token_Type'Val (0) is not\n+         --  a reserved word!\n+\n+         Set_Name_Table_Byte (N, Token_Type'Pos (T));\n+      end Set_Reserved;\n+\n+   --  Start of processing for Initialize_Ada_Keywords\n+\n+   begin\n+      --  Establish reserved words\n+\n+      Set_Reserved (Name_Abort,     Tok_Abort);\n+      Set_Reserved (Name_Abs,       Tok_Abs);\n+      Set_Reserved (Name_Abstract,  Tok_Abstract);\n+      Set_Reserved (Name_Accept,    Tok_Accept);\n+      Set_Reserved (Name_Access,    Tok_Access);\n+      Set_Reserved (Name_And,       Tok_And);\n+      Set_Reserved (Name_Aliased,   Tok_Aliased);\n+      Set_Reserved (Name_All,       Tok_All);\n+      Set_Reserved (Name_Array,     Tok_Array);\n+      Set_Reserved (Name_At,        Tok_At);\n+      Set_Reserved (Name_Begin,     Tok_Begin);\n+      Set_Reserved (Name_Body,      Tok_Body);\n+      Set_Reserved (Name_Case,      Tok_Case);\n+      Set_Reserved (Name_Constant,  Tok_Constant);\n+      Set_Reserved (Name_Declare,   Tok_Declare);\n+      Set_Reserved (Name_Delay,     Tok_Delay);\n+      Set_Reserved (Name_Delta,     Tok_Delta);\n+      Set_Reserved (Name_Digits,    Tok_Digits);\n+      Set_Reserved (Name_Do,        Tok_Do);\n+      Set_Reserved (Name_Else,      Tok_Else);\n+      Set_Reserved (Name_Elsif,     Tok_Elsif);\n+      Set_Reserved (Name_End,       Tok_End);\n+      Set_Reserved (Name_Entry,     Tok_Entry);\n+      Set_Reserved (Name_Exception, Tok_Exception);\n+      Set_Reserved (Name_Exit,      Tok_Exit);\n+      Set_Reserved (Name_For,       Tok_For);\n+      Set_Reserved (Name_Function,  Tok_Function);\n+      Set_Reserved (Name_Generic,   Tok_Generic);\n+      Set_Reserved (Name_Goto,      Tok_Goto);\n+      Set_Reserved (Name_If,        Tok_If);\n+      Set_Reserved (Name_In,        Tok_In);\n+      Set_Reserved (Name_Is,        Tok_Is);\n+      Set_Reserved (Name_Limited,   Tok_Limited);\n+      Set_Reserved (Name_Loop,      Tok_Loop);\n+      Set_Reserved (Name_Mod,       Tok_Mod);\n+      Set_Reserved (Name_New,       Tok_New);\n+      Set_Reserved (Name_Not,       Tok_Not);\n+      Set_Reserved (Name_Null,      Tok_Null);\n+      Set_Reserved (Name_Of,        Tok_Of);\n+      Set_Reserved (Name_Or,        Tok_Or);\n+      Set_Reserved (Name_Others,    Tok_Others);\n+      Set_Reserved (Name_Out,       Tok_Out);\n+      Set_Reserved (Name_Package,   Tok_Package);\n+      Set_Reserved (Name_Pragma,    Tok_Pragma);\n+      Set_Reserved (Name_Private,   Tok_Private);\n+      Set_Reserved (Name_Procedure, Tok_Procedure);\n+      Set_Reserved (Name_Protected, Tok_Protected);\n+      Set_Reserved (Name_Raise,     Tok_Raise);\n+      Set_Reserved (Name_Range,     Tok_Range);\n+      Set_Reserved (Name_Record,    Tok_Record);\n+      Set_Reserved (Name_Rem,       Tok_Rem);\n+      Set_Reserved (Name_Renames,   Tok_Renames);\n+      Set_Reserved (Name_Requeue,   Tok_Requeue);\n+      Set_Reserved (Name_Return,    Tok_Return);\n+      Set_Reserved (Name_Reverse,   Tok_Reverse);\n+      Set_Reserved (Name_Select,    Tok_Select);\n+      Set_Reserved (Name_Separate,  Tok_Separate);\n+      Set_Reserved (Name_Subtype,   Tok_Subtype);\n+      Set_Reserved (Name_Tagged,    Tok_Tagged);\n+      Set_Reserved (Name_Task,      Tok_Task);\n+      Set_Reserved (Name_Terminate, Tok_Terminate);\n+      Set_Reserved (Name_Then,      Tok_Then);\n+      Set_Reserved (Name_Type,      Tok_Type);\n+      Set_Reserved (Name_Until,     Tok_Until);\n+      Set_Reserved (Name_Use,       Tok_Use);\n+      Set_Reserved (Name_When,      Tok_When);\n+      Set_Reserved (Name_While,     Tok_While);\n+      Set_Reserved (Name_With,      Tok_With);\n+      Set_Reserved (Name_Xor,       Tok_Xor);\n+\n+      --  Ada 2005 reserved words\n+\n+      Set_Reserved (Name_Interface,     Tok_Interface);\n+      Set_Reserved (Name_Overriding,    Tok_Overriding);\n+      Set_Reserved (Name_Synchronized,  Tok_Synchronized);\n+\n+   end Initialize_Ada_Keywords;\n+\n    ------------------------\n    -- Restore_Scan_State --\n    ------------------------\n \n-   procedure Restore_Scan_State (Saved_State : in Saved_Scan_State) is\n+   procedure Restore_Scan_State (Saved_State : Saved_Scan_State) is\n    begin\n       Scan_Ptr                 := Saved_State.Save_Scan_Ptr;\n       Token                    := Saved_State.Save_Token;"}, {"sha": "694a603d7021af7cc40a63746f5097abf33ffdad", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 121, "deletions": 116, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -46,9 +46,9 @@ package Scans is\n    --  The class column in this table indicates the token classes which\n    --  apply to the token, as defined by subsquent subtype declarations.\n \n-   --  Note: the coding in SCN depends on the fact that the first entry in\n-   --  this type declaration is *not* for a reserved word. For details on\n-   --  why there is this requirement, see Scn.Initialize_Scanner.\n+   --  Note: Namet.Is_Keyword_Name depends on the fact that the first entry in\n+   --  this type declaration is *not* for a reserved word. For details on why\n+   --  there is this requirement, see Scans.Initialize_Ada_Keywords.\n \n    type Token_Type is (\n \n@@ -223,117 +223,122 @@ package Scans is\n    --  The following subtype declarations group the token types into classes.\n    --  These are used for class tests in the parser.\n \n-      subtype Token_Class_Numeric_Literal is\n-        Token_Type range Tok_Integer_Literal .. Tok_Real_Literal;\n-      --  Numeric literal\n-\n-      subtype Token_Class_Literal is\n-        Token_Type range Tok_Integer_Literal .. Tok_Operator_Symbol;\n-      --  Literal\n-\n-      subtype Token_Class_Lit_Or_Name is\n-        Token_Type range Tok_Integer_Literal .. Tok_Identifier;\n-\n-      subtype Token_Class_Binary_Addop is\n-        Token_Type range Tok_Ampersand .. Tok_Plus;\n-      --  Binary adding operator (& + -)\n-\n-      subtype Token_Class_Unary_Addop is\n-        Token_Type range Tok_Minus .. Tok_Plus;\n-      --  Unary adding operator (+ -)\n-\n-      subtype Token_Class_Mulop is\n-        Token_Type range Tok_Asterisk .. Tok_Slash;\n-      --  Multiplying operator\n-\n-      subtype Token_Class_Logop is\n-        Token_Type range Tok_And .. Tok_Xor;\n-      --  Logical operator (and, or, xor)\n-\n-      subtype Token_Class_Relop is\n-        Token_Type range Tok_Less .. Tok_Box;\n-      --  Relational operator (= /= < <= > >= not, in plus <> to catch misuse\n-      --  of Pascal style not equal operator).\n-\n-      subtype Token_Class_Name is\n-        Token_Type range Tok_Char_Literal .. Tok_Identifier;\n-      --  First token of name (4.1),\n-      --    (identifier, char literal, operator symbol)\n-\n-      subtype Token_Class_Desig is\n-        Token_Type range Tok_Operator_Symbol .. Tok_Identifier;\n-      --  Token which can be a Designator (identifier, operator symbol)\n-\n-      subtype Token_Class_Namext is\n-        Token_Type range Tok_Dot .. Tok_Left_Paren;\n-      --  Name extension tokens. These are tokens which can appear immediately\n-      --  after a name to extend it recursively (period, quote, left paren)\n-\n-      subtype Token_Class_Consk is\n-        Token_Type range Tok_Left_Paren .. Tok_Range;\n-      --  Keywords which can start constraint\n-      --    (left paren, delta, digits, range)\n-\n-      subtype Token_Class_Eterm is\n-        Token_Type range Tok_Colon_Equal .. Tok_Semicolon;\n-      --  Expression terminators. These tokens can never appear within a simple\n-      --  expression. This is used for error recovery purposes (if we encounter\n-      --  an error in an expression, we simply scan to the next Eterm token).\n-\n-      subtype Token_Class_Sterm is\n-        Token_Type range Tok_Delta .. Tok_Dot_Dot;\n-      --  Simple_Expression terminators. A Simple_Expression must be followed\n-      --  by a token in this class, or an error message is issued complaining\n-      --  about a missing binary operator.\n-\n-      subtype Token_Class_Atkwd is\n-        Token_Type range Tok_Delta .. Tok_Range;\n-      --  Attribute keywords. This class includes keywords which can be used\n-      --  as an Attribute_Designator, namely DELTA, DIGITS and RANGE\n-\n-      subtype Token_Class_Cterm is\n-        Token_Type range Tok_EOF .. Tok_Vertical_Bar;\n-      --  Choice terminators. These tokens terminate a choice. This is used for\n-      --  error recovery purposes (if we encounter an error in a Choice, we\n-      --  simply scan to the next Cterm token).\n-\n-      subtype Token_Class_Chtok is\n-        Token_Type range Tok_Arrow .. Tok_Dot_Dot;\n-      --  Choice tokens. These tokens signal a choice when used in an Aggregate\n-\n-      subtype Token_Class_Cunit is\n-        Token_Type range Tok_Function .. Tok_Separate;\n-      --  Tokens which can begin a compilation unit\n-\n-      subtype Token_Class_Declk is\n-        Token_Type range Tok_Entry .. Tok_Procedure;\n-      --  Keywords which start a declaration\n-\n-      subtype Token_Class_Deckn is\n-        Token_Type range Tok_Entry .. Tok_Use;\n-      --  Keywords which start a declaration but can't start a compilation unit\n-\n-      subtype Token_Class_After_SM is\n-        Token_Type range Tok_Less_Less .. Tok_EOF;\n-      --  Tokens which always, or almost always, appear after a semicolon. Used\n-      --  in the Resync_Past_Semicolon routine to avoid gobbling up stuff when\n-      --  a semicolon is missing. Of significance only for error recovery.\n-\n-      subtype Token_Class_Labeled_Stmt is\n-        Token_Type range Tok_Begin .. Tok_While;\n-      --  Tokens which start labeled statements\n-\n-      type Token_Flag_Array is array (Token_Type) of Boolean;\n-      Is_Reserved_Keyword : constant Token_Flag_Array := Token_Flag_Array'(\n-         Tok_Mod      .. Tok_Rem      => True,\n-         Tok_New      .. Tok_Null     => True,\n-         Tok_Delta    .. Tok_Range    => True,\n-         Tok_And      .. Tok_Xor      => True,\n-         Tok_In       .. Tok_Not      => True,\n-         Tok_Abstract .. Tok_Then     => True,\n-         Tok_Abort    .. Tok_Separate => True,\n-         others                       => False);\n-      --  Flag array used to test for reserved word\n+   subtype Token_Class_Numeric_Literal is\n+     Token_Type range Tok_Integer_Literal .. Tok_Real_Literal;\n+   --  Numeric literal\n+\n+   subtype Token_Class_Literal is\n+     Token_Type range Tok_Integer_Literal .. Tok_Operator_Symbol;\n+   --  Literal\n+\n+   subtype Token_Class_Lit_Or_Name is\n+     Token_Type range Tok_Integer_Literal .. Tok_Identifier;\n+\n+   subtype Token_Class_Binary_Addop is\n+     Token_Type range Tok_Ampersand .. Tok_Plus;\n+   --  Binary adding operator (& + -)\n+\n+   subtype Token_Class_Unary_Addop is\n+     Token_Type range Tok_Minus .. Tok_Plus;\n+   --  Unary adding operator (+ -)\n+\n+   subtype Token_Class_Mulop is\n+     Token_Type range Tok_Asterisk .. Tok_Slash;\n+   --  Multiplying operator\n+\n+   subtype Token_Class_Logop is\n+     Token_Type range Tok_And .. Tok_Xor;\n+   --  Logical operator (and, or, xor)\n+\n+   subtype Token_Class_Relop is\n+     Token_Type range Tok_Less .. Tok_Box;\n+   --  Relational operator (= /= < <= > >= not, in plus <> to catch misuse\n+   --  of Pascal style not equal operator).\n+\n+   subtype Token_Class_Name is\n+     Token_Type range Tok_Char_Literal .. Tok_Identifier;\n+   --  First token of name (4.1),\n+   --    (identifier, char literal, operator symbol)\n+\n+   subtype Token_Class_Desig is\n+     Token_Type range Tok_Operator_Symbol .. Tok_Identifier;\n+   --  Token which can be a Designator (identifier, operator symbol)\n+\n+   subtype Token_Class_Namext is\n+     Token_Type range Tok_Dot .. Tok_Left_Paren;\n+   --  Name extension tokens. These are tokens which can appear immediately\n+   --  after a name to extend it recursively (period, quote, left paren)\n+\n+   subtype Token_Class_Consk is\n+     Token_Type range Tok_Left_Paren .. Tok_Range;\n+   --  Keywords which can start constraint\n+   --    (left paren, delta, digits, range)\n+\n+   subtype Token_Class_Eterm is\n+     Token_Type range Tok_Colon_Equal .. Tok_Semicolon;\n+   --  Expression terminators. These tokens can never appear within a simple\n+   --  expression. This is used for error recovery purposes (if we encounter\n+   --  an error in an expression, we simply scan to the next Eterm token).\n+\n+   subtype Token_Class_Sterm is\n+     Token_Type range Tok_Delta .. Tok_Dot_Dot;\n+   --  Simple_Expression terminators. A Simple_Expression must be followed\n+   --  by a token in this class, or an error message is issued complaining\n+   --  about a missing binary operator.\n+\n+   subtype Token_Class_Atkwd is\n+     Token_Type range Tok_Delta .. Tok_Range;\n+   --  Attribute keywords. This class includes keywords which can be used\n+   --  as an Attribute_Designator, namely DELTA, DIGITS and RANGE\n+\n+   subtype Token_Class_Cterm is\n+     Token_Type range Tok_EOF .. Tok_Vertical_Bar;\n+   --  Choice terminators. These tokens terminate a choice. This is used for\n+   --  error recovery purposes (if we encounter an error in a Choice, we\n+   --  simply scan to the next Cterm token).\n+\n+   subtype Token_Class_Chtok is\n+     Token_Type range Tok_Arrow .. Tok_Dot_Dot;\n+   --  Choice tokens. These tokens signal a choice when used in an Aggregate\n+\n+   subtype Token_Class_Cunit is\n+     Token_Type range Tok_Function .. Tok_Separate;\n+   --  Tokens which can begin a compilation unit\n+\n+   subtype Token_Class_Declk is\n+     Token_Type range Tok_Entry .. Tok_Procedure;\n+   --  Keywords which start a declaration\n+\n+   subtype Token_Class_Deckn is\n+     Token_Type range Tok_Entry .. Tok_Use;\n+   --  Keywords which start a declaration but can't start a compilation unit\n+\n+   subtype Token_Class_After_SM is\n+     Token_Type range Tok_Less_Less .. Tok_EOF;\n+   --  Tokens which always, or almost always, appear after a semicolon. Used\n+   --  in the Resync_Past_Semicolon routine to avoid gobbling up stuff when\n+   --  a semicolon is missing. Of significance only for error recovery.\n+\n+   subtype Token_Class_Labeled_Stmt is\n+     Token_Type range Tok_Begin .. Tok_While;\n+   --  Tokens which start labeled statements\n+\n+   type Token_Flag_Array is array (Token_Type) of Boolean;\n+   Is_Reserved_Keyword : constant Token_Flag_Array :=\n+                           Token_Flag_Array'\n+                             (Tok_Mod      .. Tok_Rem      => True,\n+                              Tok_New      .. Tok_Null     => True,\n+                              Tok_Delta    .. Tok_Range    => True,\n+                              Tok_And      .. Tok_Xor      => True,\n+                              Tok_In       .. Tok_Not      => True,\n+                              Tok_Abstract .. Tok_Then     => True,\n+                              Tok_Abort    .. Tok_Separate => True,\n+                              others                       => False);\n+   --  Flag array used to test for reserved word\n+\n+   procedure Initialize_Ada_Keywords;\n+   --  Set up Token_Type values in Names table entries for Ada reserved\n+   --  words.\n \n    --------------------------\n    -- Scan State Variables --\n@@ -444,7 +449,7 @@ package Scans is\n    --  Saves the current scan state for possible later restoration. Note that\n    --  there is no harm in saving the state and then never restoring it.\n \n-   procedure Restore_Scan_State (Saved_State : in Saved_Scan_State);\n+   procedure Restore_Scan_State (Saved_State : Saved_Scan_State);\n    pragma Inline (Restore_Scan_State);\n    --  Restores a scan state saved by a call to Save_Scan_State.\n    --  The saved scan state must refer to the current source file."}, {"sha": "52a9fac407627c9d3bb99b21775fa7b9ec5956e8", "filename": "gcc/ada/scn.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fscn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fscn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscn.adb?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -281,7 +281,13 @@ package body Scn is\n       GNAT_Hedr : constant Text_Buffer (1 .. 78) := (others => '-');\n \n    begin\n-      Scanner.Initialize_Scanner (Unit, Index);\n+      Scanner.Initialize_Scanner (Index);\n+\n+      if Index /= Internal_Source_File then\n+         Set_Unit (Index, Unit);\n+      end if;\n+\n+      Current_Source_Unit := Unit;\n \n       --  Set default for Comes_From_Source (except if we are going to process\n       --  an artificial string internally created within the compiler and"}, {"sha": "ad7f3b38712fd3beeea6c6e348e9bcf488069495", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 4, "deletions": 106, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -141,113 +141,16 @@ package body Scng is\n    -- Initialize_Scanner --\n    ------------------------\n \n-   procedure Initialize_Scanner\n-     (Unit  : Unit_Number_Type;\n-      Index : Source_File_Index)\n-   is\n-      procedure Set_Reserved (N : Name_Id; T : Token_Type);\n-      pragma Inline (Set_Reserved);\n-      --  Set given name as a reserved keyword (T is the corresponding token)\n-\n-      -------------\n-      -- Set_NTB --\n-      -------------\n-\n-      procedure Set_Reserved (N : Name_Id; T : Token_Type) is\n-      begin\n-         --  Set up Token_Type values in Names Table entries for reserved\n-         --  keywords We use the Pos value of the Token_Type value. Note we\n-         --  rely on the fact that Token_Type'Val (0) is not a reserved word!\n-\n-         Set_Name_Table_Byte (N, Token_Type'Pos (T));\n-      end Set_Reserved;\n-\n-   --  Start of processing for Initialize_Scanner\n-\n+   procedure Initialize_Scanner (Index : Source_File_Index) is\n    begin\n       --  Establish reserved words\n \n-      Set_Reserved (Name_Abort,     Tok_Abort);\n-      Set_Reserved (Name_Abs,       Tok_Abs);\n-      Set_Reserved (Name_Abstract,  Tok_Abstract);\n-      Set_Reserved (Name_Accept,    Tok_Accept);\n-      Set_Reserved (Name_Access,    Tok_Access);\n-      Set_Reserved (Name_And,       Tok_And);\n-      Set_Reserved (Name_Aliased,   Tok_Aliased);\n-      Set_Reserved (Name_All,       Tok_All);\n-      Set_Reserved (Name_Array,     Tok_Array);\n-      Set_Reserved (Name_At,        Tok_At);\n-      Set_Reserved (Name_Begin,     Tok_Begin);\n-      Set_Reserved (Name_Body,      Tok_Body);\n-      Set_Reserved (Name_Case,      Tok_Case);\n-      Set_Reserved (Name_Constant,  Tok_Constant);\n-      Set_Reserved (Name_Declare,   Tok_Declare);\n-      Set_Reserved (Name_Delay,     Tok_Delay);\n-      Set_Reserved (Name_Delta,     Tok_Delta);\n-      Set_Reserved (Name_Digits,    Tok_Digits);\n-      Set_Reserved (Name_Do,        Tok_Do);\n-      Set_Reserved (Name_Else,      Tok_Else);\n-      Set_Reserved (Name_Elsif,     Tok_Elsif);\n-      Set_Reserved (Name_End,       Tok_End);\n-      Set_Reserved (Name_Entry,     Tok_Entry);\n-      Set_Reserved (Name_Exception, Tok_Exception);\n-      Set_Reserved (Name_Exit,      Tok_Exit);\n-      Set_Reserved (Name_For,       Tok_For);\n-      Set_Reserved (Name_Function,  Tok_Function);\n-      Set_Reserved (Name_Generic,   Tok_Generic);\n-      Set_Reserved (Name_Goto,      Tok_Goto);\n-      Set_Reserved (Name_If,        Tok_If);\n-      Set_Reserved (Name_In,        Tok_In);\n-      Set_Reserved (Name_Is,        Tok_Is);\n-      Set_Reserved (Name_Limited,   Tok_Limited);\n-      Set_Reserved (Name_Loop,      Tok_Loop);\n-      Set_Reserved (Name_Mod,       Tok_Mod);\n-      Set_Reserved (Name_New,       Tok_New);\n-      Set_Reserved (Name_Not,       Tok_Not);\n-      Set_Reserved (Name_Null,      Tok_Null);\n-      Set_Reserved (Name_Of,        Tok_Of);\n-      Set_Reserved (Name_Or,        Tok_Or);\n-      Set_Reserved (Name_Others,    Tok_Others);\n-      Set_Reserved (Name_Out,       Tok_Out);\n-      Set_Reserved (Name_Package,   Tok_Package);\n-      Set_Reserved (Name_Pragma,    Tok_Pragma);\n-      Set_Reserved (Name_Private,   Tok_Private);\n-      Set_Reserved (Name_Procedure, Tok_Procedure);\n-      Set_Reserved (Name_Protected, Tok_Protected);\n-      Set_Reserved (Name_Raise,     Tok_Raise);\n-      Set_Reserved (Name_Range,     Tok_Range);\n-      Set_Reserved (Name_Record,    Tok_Record);\n-      Set_Reserved (Name_Rem,       Tok_Rem);\n-      Set_Reserved (Name_Renames,   Tok_Renames);\n-      Set_Reserved (Name_Requeue,   Tok_Requeue);\n-      Set_Reserved (Name_Return,    Tok_Return);\n-      Set_Reserved (Name_Reverse,   Tok_Reverse);\n-      Set_Reserved (Name_Select,    Tok_Select);\n-      Set_Reserved (Name_Separate,  Tok_Separate);\n-      Set_Reserved (Name_Subtype,   Tok_Subtype);\n-      Set_Reserved (Name_Tagged,    Tok_Tagged);\n-      Set_Reserved (Name_Task,      Tok_Task);\n-      Set_Reserved (Name_Terminate, Tok_Terminate);\n-      Set_Reserved (Name_Then,      Tok_Then);\n-      Set_Reserved (Name_Type,      Tok_Type);\n-      Set_Reserved (Name_Until,     Tok_Until);\n-      Set_Reserved (Name_Use,       Tok_Use);\n-      Set_Reserved (Name_When,      Tok_When);\n-      Set_Reserved (Name_While,     Tok_While);\n-      Set_Reserved (Name_With,      Tok_With);\n-      Set_Reserved (Name_Xor,       Tok_Xor);\n-\n-      --  Ada 2005 reserved words\n-\n-      Set_Reserved (Name_Interface,     Tok_Interface);\n-      Set_Reserved (Name_Overriding,    Tok_Overriding);\n-      Set_Reserved (Name_Synchronized,  Tok_Synchronized);\n+      Scans.Initialize_Ada_Keywords;\n \n       --  Initialize scan control variables\n \n       Current_Source_File       := Index;\n       Source                    := Source_Text (Current_Source_File);\n-      Current_Source_Unit       := Unit;\n       Scan_Ptr                  := Source_First (Current_Source_File);\n       Token                     := No_Token;\n       Token_Ptr                 := Scan_Ptr;\n@@ -2330,12 +2233,7 @@ package body Scng is\n \n          --  Here is where we check if it was a keyword\n \n-         if Get_Name_Table_Byte (Token_Name) /= 0\n-           and then (Ada_Version >= Ada_95\n-                       or else Token_Name not in Ada_95_Reserved_Words)\n-           and then (Ada_Version >= Ada_05\n-                       or else Token_Name not in Ada_2005_Reserved_Words)\n-         then\n+         if Is_Keyword_Name (Token_Name) then\n             Token := Token_Type'Val (Get_Name_Table_Byte (Token_Name));\n \n             --  Deal with possible style check for non-lower case keyword, but"}, {"sha": "201ce9db73f4994a1962a1aa3f830adb89367eb1", "filename": "gcc/ada/scng.ads", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fscng.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fscng.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.ads?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -60,14 +60,8 @@ generic\n \n package Scng is\n \n-   procedure Initialize_Scanner\n-     (Unit  : Unit_Number_Type;\n-      Index : Source_File_Index);\n-   --  Initialize lexical scanner for scanning a new file. The caller has\n-   --  completed the construction of the Units.Table entry for the specified\n-   --  Unit and Index references the corresponding source file. A special\n-   --  case is when Unit = No_Unit_Number, and Index corresponds to the\n-   --  source index for reading the configuration pragma file.\n+   procedure Initialize_Scanner (Index : Source_File_Index);\n+   --  Initialize lexical scanner for scanning a new file referenced by Index.\n    --  Initialize_Scanner does not call Scan.\n \n    procedure Scan;"}, {"sha": "9ccfedaafafe5247d46a188a4145da6c3a5584f3", "filename": "gcc/ada/sinfo-cn.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsinfo-cn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsinfo-cn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo-cn.adb?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -26,7 +26,7 @@\n \n --  This child package of Sinfo contains some routines that permit in place\n --  alteration of existing tree nodes by changing the value in the Nkind\n---  field. Since Nkind functions logically in a manner similart to a variant\n+--  field. Since Nkind functions logically in a manner similar to a variant\n --  record discriminant part, such alterations cannot be permitted in a\n --  general manner, but in some specific cases, the fields of related nodes\n --  have been deliberately layed out in a manner that permits such alteration."}, {"sha": "39e2332fbbfd278c92a71556f0dd6cec242c4495", "filename": "gcc/ada/sinput-c.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsinput-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsinput-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-c.adb?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -193,6 +193,7 @@ package body Sinput.C is\n                Source_Last         => Hi,\n                Source_Text         => Src,\n                Template            => No_Source_File,\n+               Unit                => No_Unit,\n                Time_Stamp          => Empty_Time_Stamp);\n \n          Alloc_Line_Tables (S, Opt.Table_Factor * Alloc.Lines_Initial);"}, {"sha": "9e29dbcf7726015d7144a0eb0fef68ee5318ec27", "filename": "gcc/ada/sinput-l.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsinput-l.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsinput-l.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-l.adb?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -441,6 +441,7 @@ package body Sinput.L is\n                   Source_Last         => Hi,\n                   Source_Text         => Src,\n                   Template            => No_Source_File,\n+                  Unit                => No_Unit,\n                   Time_Stamp          => Osint.Current_Source_File_Stamp);\n \n             Alloc_Line_Tables (S, Opt.Table_Factor * Alloc.Lines_Initial);\n@@ -497,7 +498,7 @@ package body Sinput.L is\n                --  Initialize the scanner and set its behavior for\n                --  preprocessing, then preprocess.\n \n-               Scn.Scanner.Initialize_Scanner (No_Unit, X);\n+               Scn.Scanner.Initialize_Scanner (X);\n \n                Scn.Scanner.Set_Special_Character ('#');\n                Scn.Scanner.Set_Special_Character ('$');"}, {"sha": "a333b090bc405ae39f0e759ffabfd479f1a95ffe", "filename": "gcc/ada/sinput-p.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsinput-p.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsinput-p.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-p.adb?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -57,7 +57,7 @@ package body Sinput.P is\n    --------------------------------\n \n    procedure Restore_Project_Scan_State\n-     (Saved_State : in Saved_Project_Scan_State)\n+     (Saved_State : Saved_Project_Scan_State)\n    is\n    begin\n       Restore_Scan_State (Saved_State.Scan_State);\n@@ -84,7 +84,7 @@ package body Sinput.P is\n \n    function Source_File_Is_Subunit (X : Source_File_Index) return Boolean is\n    begin\n-      Prj.Err.Scanner.Initialize_Scanner (No_Unit, X);\n+      Prj.Err.Scanner.Initialize_Scanner (X);\n \n       --  We scan past junk to the first interesting compilation unit\n       --  token, to see if it is SEPARATE. We ignore WITH keywords during"}, {"sha": "7efc71a4ed80f6b97ff56222bb6c710eb224cf10", "filename": "gcc/ada/sinput.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsinput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsinput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.adb?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1155,6 +1155,11 @@ package body Sinput is\n       return Source_File.Table (S).Time_Stamp;\n    end Time_Stamp;\n \n+   function Unit (S : SFI) return Unit_Number_Type is\n+   begin\n+      return Source_File.Table (S).Unit;\n+   end Unit;\n+\n    ------------------------------------------\n    -- Set Procedures for Source File Table --\n    ------------------------------------------\n@@ -1174,6 +1179,11 @@ package body Sinput is\n       Source_File.Table (S).License := L;\n    end Set_License;\n \n+   procedure Set_Unit (S : SFI; U : Unit_Number_Type) is\n+   begin\n+      Source_File.Table (S).Unit := U;\n+   end Set_Unit;\n+\n    ----------------------\n    -- Trim_Lines_Table --\n    ----------------------"}, {"sha": "cd472c69c348a7ba533daf693ef25ea8ca56723e", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -268,6 +268,10 @@ package Sinput is\n    --    is a generic instantiation. Set to No_Source_File for the normal case\n    --    of a non-instantiation entry. See Sinput-L for details.\n \n+   --  Unit : Unit_Number_Type;\n+   --    Identifies the unit contained in this source file. Set by\n+   --    Initialize_Scanner, must not be subsequently altered.\n+\n    --  The source file table is accessed by clients using the following\n    --  subprogram interface:\n \n@@ -299,11 +303,13 @@ package Sinput is\n    function Source_Last       (S : SFI) return Source_Ptr;\n    function Source_Text       (S : SFI) return Source_Buffer_Ptr;\n    function Template          (S : SFI) return Source_File_Index;\n+   function Unit              (S : SFI) return Unit_Number_Type;\n    function Time_Stamp        (S : SFI) return Time_Stamp_Type;\n \n    procedure Set_Keyword_Casing    (S : SFI; C : Casing_Type);\n    procedure Set_Identifier_Casing (S : SFI; C : Casing_Type);\n    procedure Set_License           (S : SFI; L : License_Type);\n+   procedure Set_Unit              (S : SFI; U : Unit_Number_Type);\n \n    function Last_Source_File return Source_File_Index;\n    --  Index of last source file table entry\n@@ -686,6 +692,7 @@ private\n       Identifier_Casing : Casing_Type;\n       Instantiation     : Source_Ptr;\n       Template          : Source_File_Index;\n+      Unit              : Unit_Number_Type;\n \n       --  The following fields are for internal use only (i.e. only in the\n       --  body of Sinput or its children, with no direct access by clients)."}, {"sha": "513ba1f967397511d67faa4f5565509d3411cc69", "filename": "gcc/ada/snames.adb", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsnames.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsnames.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,6 +32,7 @@\n ------------------------------------------------------------------------------\n \n with Namet; use Namet;\n+with Opt;   use Opt;\n with Table;\n \n package body Snames is\n@@ -174,6 +175,7 @@ package body Snames is\n      \"ada_83#\" &\n      \"ada_95#\" &\n      \"ada_05#\" &\n+     \"ada_2005#\" &\n      \"assertion_policy#\" &\n      \"c_pass_by_copy#\" &\n      \"compile_time_warning#\" &\n@@ -992,6 +994,19 @@ package body Snames is\n           Last_Renamable_Function_Attribute;\n    end Is_Function_Attribute_Name;\n \n+   ---------------------\n+   -- Is_Keyword_Name --\n+   ---------------------\n+\n+   function Is_Keyword_Name (N : Name_Id) return Boolean is\n+   begin\n+      return Get_Name_Table_Byte (N) /= 0\n+        and then (Ada_Version >= Ada_95\n+                  or else N not in Ada_95_Reserved_Words)\n+        and then (Ada_Version >= Ada_05\n+                  or else N not in Ada_2005_Reserved_Words);\n+   end Is_Keyword_Name;\n+\n    ----------------------------\n    -- Is_Locking_Policy_Name --\n    ----------------------------"}, {"sha": "2191b7914a23a72eb190a73f6ad6e846cccf0356", "filename": "gcc/ada/snames.ads", "status": "modified", "additions": 590, "deletions": 573, "changes": 1163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsnames.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsnames.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -336,140 +336,141 @@ package Snames is\n    Name_Ada_83                         : constant Name_Id := N + 114; -- GNAT\n    Name_Ada_95                         : constant Name_Id := N + 115; -- GNAT\n    Name_Ada_05                         : constant Name_Id := N + 116; -- GNAT\n-   Name_Assertion_Policy               : constant Name_Id := N + 117; -- Ada 05\n-   Name_C_Pass_By_Copy                 : constant Name_Id := N + 118; -- GNAT\n-   Name_Compile_Time_Warning           : constant Name_Id := N + 119; -- GNAT\n-   Name_Component_Alignment            : constant Name_Id := N + 120; -- GNAT\n-   Name_Convention_Identifier          : constant Name_Id := N + 121; -- GNAT\n-   Name_Debug_Policy                   : constant Name_Id := N + 122; -- GNAT\n-   Name_Detect_Blocking                : constant Name_Id := N + 123; -- Ada 05\n-   Name_Discard_Names                  : constant Name_Id := N + 124;\n-   Name_Elaboration_Checks             : constant Name_Id := N + 125; -- GNAT\n-   Name_Eliminate                      : constant Name_Id := N + 126; -- GNAT\n-   Name_Explicit_Overriding            : constant Name_Id := N + 127; -- Ada 05\n-   Name_Extend_System                  : constant Name_Id := N + 128; -- GNAT\n-   Name_Extensions_Allowed             : constant Name_Id := N + 129; -- GNAT\n-   Name_External_Name_Casing           : constant Name_Id := N + 130; -- GNAT\n-   Name_Float_Representation           : constant Name_Id := N + 131; -- GNAT\n-   Name_Initialize_Scalars             : constant Name_Id := N + 132; -- GNAT\n-   Name_Interrupt_State                : constant Name_Id := N + 133; -- GNAT\n-   Name_License                        : constant Name_Id := N + 134; -- GNAT\n-   Name_Locking_Policy                 : constant Name_Id := N + 135;\n-   Name_Long_Float                     : constant Name_Id := N + 136; -- VMS\n-   Name_No_Run_Time                    : constant Name_Id := N + 137; -- GNAT\n-   Name_No_Strict_Aliasing             : constant Name_Id := N + 138; -- GNAT\n-   Name_Normalize_Scalars              : constant Name_Id := N + 139;\n-   Name_Polling                        : constant Name_Id := N + 140; -- GNAT\n-   Name_Persistent_BSS                 : constant Name_Id := N + 141; -- GNAT\n-   Name_Profile                        : constant Name_Id := N + 142; -- Ada 05\n-   Name_Profile_Warnings               : constant Name_Id := N + 143; -- GNAT\n-   Name_Propagate_Exceptions           : constant Name_Id := N + 144; -- GNAT\n-   Name_Queuing_Policy                 : constant Name_Id := N + 145;\n-   Name_Ravenscar                      : constant Name_Id := N + 146; -- Ada 05\n-   Name_Restricted_Run_Time            : constant Name_Id := N + 147; -- GNAT\n-   Name_Restrictions                   : constant Name_Id := N + 148;\n-   Name_Restriction_Warnings           : constant Name_Id := N + 149; -- GNAT\n-   Name_Reviewable                     : constant Name_Id := N + 150;\n-   Name_Source_File_Name               : constant Name_Id := N + 151; -- GNAT\n-   Name_Source_File_Name_Project       : constant Name_Id := N + 152; -- GNAT\n-   Name_Style_Checks                   : constant Name_Id := N + 153; -- GNAT\n-   Name_Suppress                       : constant Name_Id := N + 154;\n-   Name_Suppress_Exception_Locations   : constant Name_Id := N + 155; -- GNAT\n-   Name_Task_Dispatching_Policy        : constant Name_Id := N + 156;\n-   Name_Universal_Data                 : constant Name_Id := N + 157; -- AAMP\n-   Name_Unsuppress                     : constant Name_Id := N + 158; -- GNAT\n-   Name_Use_VADS_Size                  : constant Name_Id := N + 159; -- GNAT\n-   Name_Validity_Checks                : constant Name_Id := N + 160; -- GNAT\n-   Name_Warnings                       : constant Name_Id := N + 161; -- GNAT\n-   Last_Configuration_Pragma_Name      : constant Name_Id := N + 161;\n+   Name_Ada_2005                       : constant Name_Id := N + 117; -- GNAT\n+   Name_Assertion_Policy               : constant Name_Id := N + 118; -- Ada 05\n+   Name_C_Pass_By_Copy                 : constant Name_Id := N + 119; -- GNAT\n+   Name_Compile_Time_Warning           : constant Name_Id := N + 120; -- GNAT\n+   Name_Component_Alignment            : constant Name_Id := N + 121; -- GNAT\n+   Name_Convention_Identifier          : constant Name_Id := N + 122; -- GNAT\n+   Name_Debug_Policy                   : constant Name_Id := N + 123; -- GNAT\n+   Name_Detect_Blocking                : constant Name_Id := N + 124; -- Ada 05\n+   Name_Discard_Names                  : constant Name_Id := N + 125;\n+   Name_Elaboration_Checks             : constant Name_Id := N + 126; -- GNAT\n+   Name_Eliminate                      : constant Name_Id := N + 127; -- GNAT\n+   Name_Explicit_Overriding            : constant Name_Id := N + 128; -- Ada 05\n+   Name_Extend_System                  : constant Name_Id := N + 129; -- GNAT\n+   Name_Extensions_Allowed             : constant Name_Id := N + 130; -- GNAT\n+   Name_External_Name_Casing           : constant Name_Id := N + 131; -- GNAT\n+   Name_Float_Representation           : constant Name_Id := N + 132; -- GNAT\n+   Name_Initialize_Scalars             : constant Name_Id := N + 133; -- GNAT\n+   Name_Interrupt_State                : constant Name_Id := N + 134; -- GNAT\n+   Name_License                        : constant Name_Id := N + 135; -- GNAT\n+   Name_Locking_Policy                 : constant Name_Id := N + 136;\n+   Name_Long_Float                     : constant Name_Id := N + 137; -- VMS\n+   Name_No_Run_Time                    : constant Name_Id := N + 138; -- GNAT\n+   Name_No_Strict_Aliasing             : constant Name_Id := N + 139; -- GNAT\n+   Name_Normalize_Scalars              : constant Name_Id := N + 140;\n+   Name_Polling                        : constant Name_Id := N + 141; -- GNAT\n+   Name_Persistent_BSS                 : constant Name_Id := N + 142; -- GNAT\n+   Name_Profile                        : constant Name_Id := N + 143; -- Ada 05\n+   Name_Profile_Warnings               : constant Name_Id := N + 144; -- GNAT\n+   Name_Propagate_Exceptions           : constant Name_Id := N + 145; -- GNAT\n+   Name_Queuing_Policy                 : constant Name_Id := N + 146;\n+   Name_Ravenscar                      : constant Name_Id := N + 147; -- Ada 05\n+   Name_Restricted_Run_Time            : constant Name_Id := N + 148; -- GNAT\n+   Name_Restrictions                   : constant Name_Id := N + 149;\n+   Name_Restriction_Warnings           : constant Name_Id := N + 150; -- GNAT\n+   Name_Reviewable                     : constant Name_Id := N + 151;\n+   Name_Source_File_Name               : constant Name_Id := N + 152; -- GNAT\n+   Name_Source_File_Name_Project       : constant Name_Id := N + 153; -- GNAT\n+   Name_Style_Checks                   : constant Name_Id := N + 154; -- GNAT\n+   Name_Suppress                       : constant Name_Id := N + 155;\n+   Name_Suppress_Exception_Locations   : constant Name_Id := N + 156; -- GNAT\n+   Name_Task_Dispatching_Policy        : constant Name_Id := N + 157;\n+   Name_Universal_Data                 : constant Name_Id := N + 158; -- AAMP\n+   Name_Unsuppress                     : constant Name_Id := N + 159; -- GNAT\n+   Name_Use_VADS_Size                  : constant Name_Id := N + 160; -- GNAT\n+   Name_Validity_Checks                : constant Name_Id := N + 161; -- GNAT\n+   Name_Warnings                       : constant Name_Id := N + 162; -- GNAT\n+   Last_Configuration_Pragma_Name      : constant Name_Id := N + 162;\n \n    --  Remaining pragma names\n \n-   Name_Abort_Defer                    : constant Name_Id := N + 162; -- GNAT\n-   Name_All_Calls_Remote               : constant Name_Id := N + 163;\n-   Name_Annotate                       : constant Name_Id := N + 164; -- GNAT\n+   Name_Abort_Defer                    : constant Name_Id := N + 163; -- GNAT\n+   Name_All_Calls_Remote               : constant Name_Id := N + 164;\n+   Name_Annotate                       : constant Name_Id := N + 165; -- GNAT\n \n    --  Note: AST_Entry is not in this list because its name matches the\n    --  name of the corresponding attribute. However, it is included in the\n    --  definition of the type Attribute_Id, and the functions Get_Pragma_Id\n    --  and Check_Pragma_Id correctly recognize and process Name_AST_Entry.\n    --  AST_Entry is a VMS specific pragma.\n \n-   Name_Assert                         : constant Name_Id := N + 165; -- Ada 05\n-   Name_Asynchronous                   : constant Name_Id := N + 166;\n-   Name_Atomic                         : constant Name_Id := N + 167;\n-   Name_Atomic_Components              : constant Name_Id := N + 168;\n-   Name_Attach_Handler                 : constant Name_Id := N + 169;\n-   Name_Comment                        : constant Name_Id := N + 170; -- GNAT\n-   Name_Common_Object                  : constant Name_Id := N + 171; -- GNAT\n-   Name_Complete_Representation        : constant Name_Id := N + 172; -- GNAT\n-   Name_Complex_Representation         : constant Name_Id := N + 173; -- GNAT\n-   Name_Controlled                     : constant Name_Id := N + 174;\n-   Name_Convention                     : constant Name_Id := N + 175;\n-   Name_CPP_Class                      : constant Name_Id := N + 176; -- GNAT\n-   Name_CPP_Constructor                : constant Name_Id := N + 177; -- GNAT\n-   Name_CPP_Virtual                    : constant Name_Id := N + 178; -- GNAT\n-   Name_CPP_Vtable                     : constant Name_Id := N + 179; -- GNAT\n-   Name_Debug                          : constant Name_Id := N + 180; -- GNAT\n-   Name_Elaborate                      : constant Name_Id := N + 181; -- Ada 83\n-   Name_Elaborate_All                  : constant Name_Id := N + 182;\n-   Name_Elaborate_Body                 : constant Name_Id := N + 183;\n-   Name_Export                         : constant Name_Id := N + 184;\n-   Name_Export_Exception               : constant Name_Id := N + 185; -- VMS\n-   Name_Export_Function                : constant Name_Id := N + 186; -- GNAT\n-   Name_Export_Object                  : constant Name_Id := N + 187; -- GNAT\n-   Name_Export_Procedure               : constant Name_Id := N + 188; -- GNAT\n-   Name_Export_Value                   : constant Name_Id := N + 189; -- GNAT\n-   Name_Export_Valued_Procedure        : constant Name_Id := N + 190; -- GNAT\n-   Name_External                       : constant Name_Id := N + 191; -- GNAT\n-   Name_Finalize_Storage_Only          : constant Name_Id := N + 192; -- GNAT\n-   Name_Ident                          : constant Name_Id := N + 193; -- VMS\n-   Name_Import                         : constant Name_Id := N + 194;\n-   Name_Import_Exception               : constant Name_Id := N + 195; -- VMS\n-   Name_Import_Function                : constant Name_Id := N + 196; -- GNAT\n-   Name_Import_Object                  : constant Name_Id := N + 197; -- GNAT\n-   Name_Import_Procedure               : constant Name_Id := N + 198; -- GNAT\n-   Name_Import_Valued_Procedure        : constant Name_Id := N + 199; -- GNAT\n-   Name_Inline                         : constant Name_Id := N + 200;\n-   Name_Inline_Always                  : constant Name_Id := N + 201; -- GNAT\n-   Name_Inline_Generic                 : constant Name_Id := N + 202; -- GNAT\n-   Name_Inspection_Point               : constant Name_Id := N + 203;\n-   Name_Interface_Name                 : constant Name_Id := N + 204; -- GNAT\n-   Name_Interrupt_Handler              : constant Name_Id := N + 205;\n-   Name_Interrupt_Priority             : constant Name_Id := N + 206;\n-   Name_Java_Constructor               : constant Name_Id := N + 207; -- GNAT\n-   Name_Java_Interface                 : constant Name_Id := N + 208; -- GNAT\n-   Name_Keep_Names                     : constant Name_Id := N + 209; -- GNAT\n-   Name_Link_With                      : constant Name_Id := N + 210; -- GNAT\n-   Name_Linker_Alias                   : constant Name_Id := N + 211; -- GNAT\n-   Name_Linker_Constructor             : constant Name_Id := N + 212; -- GNAT\n-   Name_Linker_Destructor              : constant Name_Id := N + 213; -- GNAT\n-   Name_Linker_Options                 : constant Name_Id := N + 214;\n-   Name_Linker_Section                 : constant Name_Id := N + 215; -- GNAT\n-   Name_List                           : constant Name_Id := N + 216;\n-   Name_Machine_Attribute              : constant Name_Id := N + 217; -- GNAT\n-   Name_Main                           : constant Name_Id := N + 218; -- GNAT\n-   Name_Main_Storage                   : constant Name_Id := N + 219; -- GNAT\n-   Name_Memory_Size                    : constant Name_Id := N + 220; -- Ada 83\n-   Name_No_Return                      : constant Name_Id := N + 221; -- GNAT\n-   Name_Obsolescent                    : constant Name_Id := N + 222; -- GNAT\n-   Name_Optimize                       : constant Name_Id := N + 223;\n-   Name_Optional_Overriding            : constant Name_Id := N + 224; -- Ada 05\n-   Name_Pack                           : constant Name_Id := N + 225;\n-   Name_Page                           : constant Name_Id := N + 226;\n-   Name_Passive                        : constant Name_Id := N + 227; -- GNAT\n-   Name_Preelaborate                   : constant Name_Id := N + 228;\n-   Name_Preelaborate_05                : constant Name_Id := N + 229; -- GNAT\n-   Name_Priority                       : constant Name_Id := N + 230;\n-   Name_Psect_Object                   : constant Name_Id := N + 231; -- VMS\n-   Name_Pure                           : constant Name_Id := N + 232;\n-   Name_Pure_05                        : constant Name_Id := N + 233; -- GNAT\n-   Name_Pure_Function                  : constant Name_Id := N + 234; -- GNAT\n-   Name_Remote_Call_Interface          : constant Name_Id := N + 235;\n-   Name_Remote_Types                   : constant Name_Id := N + 236;\n-   Name_Share_Generic                  : constant Name_Id := N + 237; -- GNAT\n-   Name_Shared                         : constant Name_Id := N + 238; -- Ada 83\n-   Name_Shared_Passive                 : constant Name_Id := N + 239;\n+   Name_Assert                         : constant Name_Id := N + 166; -- Ada 05\n+   Name_Asynchronous                   : constant Name_Id := N + 167;\n+   Name_Atomic                         : constant Name_Id := N + 168;\n+   Name_Atomic_Components              : constant Name_Id := N + 169;\n+   Name_Attach_Handler                 : constant Name_Id := N + 170;\n+   Name_Comment                        : constant Name_Id := N + 171; -- GNAT\n+   Name_Common_Object                  : constant Name_Id := N + 172; -- GNAT\n+   Name_Complete_Representation        : constant Name_Id := N + 173; -- GNAT\n+   Name_Complex_Representation         : constant Name_Id := N + 174; -- GNAT\n+   Name_Controlled                     : constant Name_Id := N + 175;\n+   Name_Convention                     : constant Name_Id := N + 176;\n+   Name_CPP_Class                      : constant Name_Id := N + 177; -- GNAT\n+   Name_CPP_Constructor                : constant Name_Id := N + 178; -- GNAT\n+   Name_CPP_Virtual                    : constant Name_Id := N + 179; -- GNAT\n+   Name_CPP_Vtable                     : constant Name_Id := N + 180; -- GNAT\n+   Name_Debug                          : constant Name_Id := N + 181; -- GNAT\n+   Name_Elaborate                      : constant Name_Id := N + 182; -- Ada 83\n+   Name_Elaborate_All                  : constant Name_Id := N + 183;\n+   Name_Elaborate_Body                 : constant Name_Id := N + 184;\n+   Name_Export                         : constant Name_Id := N + 185;\n+   Name_Export_Exception               : constant Name_Id := N + 186; -- VMS\n+   Name_Export_Function                : constant Name_Id := N + 187; -- GNAT\n+   Name_Export_Object                  : constant Name_Id := N + 188; -- GNAT\n+   Name_Export_Procedure               : constant Name_Id := N + 189; -- GNAT\n+   Name_Export_Value                   : constant Name_Id := N + 190; -- GNAT\n+   Name_Export_Valued_Procedure        : constant Name_Id := N + 191; -- GNAT\n+   Name_External                       : constant Name_Id := N + 192; -- GNAT\n+   Name_Finalize_Storage_Only          : constant Name_Id := N + 193; -- GNAT\n+   Name_Ident                          : constant Name_Id := N + 194; -- VMS\n+   Name_Import                         : constant Name_Id := N + 195;\n+   Name_Import_Exception               : constant Name_Id := N + 196; -- VMS\n+   Name_Import_Function                : constant Name_Id := N + 197; -- GNAT\n+   Name_Import_Object                  : constant Name_Id := N + 198; -- GNAT\n+   Name_Import_Procedure               : constant Name_Id := N + 199; -- GNAT\n+   Name_Import_Valued_Procedure        : constant Name_Id := N + 200; -- GNAT\n+   Name_Inline                         : constant Name_Id := N + 201;\n+   Name_Inline_Always                  : constant Name_Id := N + 202; -- GNAT\n+   Name_Inline_Generic                 : constant Name_Id := N + 203; -- GNAT\n+   Name_Inspection_Point               : constant Name_Id := N + 204;\n+   Name_Interface_Name                 : constant Name_Id := N + 205; -- GNAT\n+   Name_Interrupt_Handler              : constant Name_Id := N + 206;\n+   Name_Interrupt_Priority             : constant Name_Id := N + 207;\n+   Name_Java_Constructor               : constant Name_Id := N + 208; -- GNAT\n+   Name_Java_Interface                 : constant Name_Id := N + 209; -- GNAT\n+   Name_Keep_Names                     : constant Name_Id := N + 210; -- GNAT\n+   Name_Link_With                      : constant Name_Id := N + 211; -- GNAT\n+   Name_Linker_Alias                   : constant Name_Id := N + 212; -- GNAT\n+   Name_Linker_Constructor             : constant Name_Id := N + 213; -- GNAT\n+   Name_Linker_Destructor              : constant Name_Id := N + 214; -- GNAT\n+   Name_Linker_Options                 : constant Name_Id := N + 215;\n+   Name_Linker_Section                 : constant Name_Id := N + 216; -- GNAT\n+   Name_List                           : constant Name_Id := N + 217;\n+   Name_Machine_Attribute              : constant Name_Id := N + 218; -- GNAT\n+   Name_Main                           : constant Name_Id := N + 219; -- GNAT\n+   Name_Main_Storage                   : constant Name_Id := N + 220; -- GNAT\n+   Name_Memory_Size                    : constant Name_Id := N + 221; -- Ada 83\n+   Name_No_Return                      : constant Name_Id := N + 222; -- GNAT\n+   Name_Obsolescent                    : constant Name_Id := N + 223; -- GNAT\n+   Name_Optimize                       : constant Name_Id := N + 224;\n+   Name_Optional_Overriding            : constant Name_Id := N + 225; -- Ada 05\n+   Name_Pack                           : constant Name_Id := N + 226;\n+   Name_Page                           : constant Name_Id := N + 227;\n+   Name_Passive                        : constant Name_Id := N + 228; -- GNAT\n+   Name_Preelaborate                   : constant Name_Id := N + 229;\n+   Name_Preelaborate_05                : constant Name_Id := N + 230; -- GNAT\n+   Name_Priority                       : constant Name_Id := N + 231;\n+   Name_Psect_Object                   : constant Name_Id := N + 232; -- VMS\n+   Name_Pure                           : constant Name_Id := N + 233;\n+   Name_Pure_05                        : constant Name_Id := N + 234; -- GNAT\n+   Name_Pure_Function                  : constant Name_Id := N + 235; -- GNAT\n+   Name_Remote_Call_Interface          : constant Name_Id := N + 236;\n+   Name_Remote_Types                   : constant Name_Id := N + 237;\n+   Name_Share_Generic                  : constant Name_Id := N + 238; -- GNAT\n+   Name_Shared                         : constant Name_Id := N + 239; -- Ada 83\n+   Name_Shared_Passive                 : constant Name_Id := N + 240;\n \n    --  Note: Storage_Size is not in this list because its name matches the\n    --  name of the corresponding attribute. However, it is included in the\n@@ -479,27 +480,27 @@ package Snames is\n    --  Note: Storage_Unit is also omitted from the list because of a clash\n    --  with an attribute name, and is treated similarly.\n \n-   Name_Source_Reference               : constant Name_Id := N + 240; -- GNAT\n-   Name_Stream_Convert                 : constant Name_Id := N + 241; -- GNAT\n-   Name_Subtitle                       : constant Name_Id := N + 242; -- GNAT\n-   Name_Suppress_All                   : constant Name_Id := N + 243; -- GNAT\n-   Name_Suppress_Debug_Info            : constant Name_Id := N + 244; -- GNAT\n-   Name_Suppress_Initialization        : constant Name_Id := N + 245; -- GNAT\n-   Name_System_Name                    : constant Name_Id := N + 246; -- Ada 83\n-   Name_Task_Info                      : constant Name_Id := N + 247; -- GNAT\n-   Name_Task_Name                      : constant Name_Id := N + 248; -- GNAT\n-   Name_Task_Storage                   : constant Name_Id := N + 249; -- VMS\n-   Name_Thread_Body                    : constant Name_Id := N + 250; -- GNAT\n-   Name_Time_Slice                     : constant Name_Id := N + 251; -- GNAT\n-   Name_Title                          : constant Name_Id := N + 252; -- GNAT\n-   Name_Unchecked_Union                : constant Name_Id := N + 253; -- GNAT\n-   Name_Unimplemented_Unit             : constant Name_Id := N + 254; -- GNAT\n-   Name_Unreferenced                   : constant Name_Id := N + 255; -- GNAT\n-   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 256; -- GNAT\n-   Name_Volatile                       : constant Name_Id := N + 257;\n-   Name_Volatile_Components            : constant Name_Id := N + 258;\n-   Name_Weak_External                  : constant Name_Id := N + 259; -- GNAT\n-   Last_Pragma_Name                    : constant Name_Id := N + 259;\n+   Name_Source_Reference               : constant Name_Id := N + 241; -- GNAT\n+   Name_Stream_Convert                 : constant Name_Id := N + 242; -- GNAT\n+   Name_Subtitle                       : constant Name_Id := N + 243; -- GNAT\n+   Name_Suppress_All                   : constant Name_Id := N + 244; -- GNAT\n+   Name_Suppress_Debug_Info            : constant Name_Id := N + 245; -- GNAT\n+   Name_Suppress_Initialization        : constant Name_Id := N + 246; -- GNAT\n+   Name_System_Name                    : constant Name_Id := N + 247; -- Ada 83\n+   Name_Task_Info                      : constant Name_Id := N + 248; -- GNAT\n+   Name_Task_Name                      : constant Name_Id := N + 249; -- GNAT\n+   Name_Task_Storage                   : constant Name_Id := N + 250; -- VMS\n+   Name_Thread_Body                    : constant Name_Id := N + 251; -- GNAT\n+   Name_Time_Slice                     : constant Name_Id := N + 252; -- GNAT\n+   Name_Title                          : constant Name_Id := N + 253; -- GNAT\n+   Name_Unchecked_Union                : constant Name_Id := N + 254; -- GNAT\n+   Name_Unimplemented_Unit             : constant Name_Id := N + 255; -- GNAT\n+   Name_Unreferenced                   : constant Name_Id := N + 256; -- GNAT\n+   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 257; -- GNAT\n+   Name_Volatile                       : constant Name_Id := N + 258;\n+   Name_Volatile_Components            : constant Name_Id := N + 259;\n+   Name_Weak_External                  : constant Name_Id := N + 260; -- GNAT\n+   Last_Pragma_Name                    : constant Name_Id := N + 260;\n \n    --  Language convention names for pragma Convention/Export/Import/Interface\n    --  Note that Name_C is not included in this list, since it was already\n@@ -510,114 +511,114 @@ package Snames is\n    --  Entry and Protected, this is because these conventions cannot be\n    --  specified by a pragma.\n \n-   First_Convention_Name               : constant Name_Id := N + 260;\n-   Name_Ada                            : constant Name_Id := N + 260;\n-   Name_Assembler                      : constant Name_Id := N + 261;\n-   Name_COBOL                          : constant Name_Id := N + 262;\n-   Name_CPP                            : constant Name_Id := N + 263;\n-   Name_Fortran                        : constant Name_Id := N + 264;\n-   Name_Intrinsic                      : constant Name_Id := N + 265;\n-   Name_Java                           : constant Name_Id := N + 266;\n-   Name_Stdcall                        : constant Name_Id := N + 267;\n-   Name_Stubbed                        : constant Name_Id := N + 268;\n-   Last_Convention_Name                : constant Name_Id := N + 268;\n+   First_Convention_Name               : constant Name_Id := N + 261;\n+   Name_Ada                            : constant Name_Id := N + 261;\n+   Name_Assembler                      : constant Name_Id := N + 262;\n+   Name_COBOL                          : constant Name_Id := N + 263;\n+   Name_CPP                            : constant Name_Id := N + 264;\n+   Name_Fortran                        : constant Name_Id := N + 265;\n+   Name_Intrinsic                      : constant Name_Id := N + 266;\n+   Name_Java                           : constant Name_Id := N + 267;\n+   Name_Stdcall                        : constant Name_Id := N + 268;\n+   Name_Stubbed                        : constant Name_Id := N + 269;\n+   Last_Convention_Name                : constant Name_Id := N + 269;\n \n    --  The following names are preset as synonyms for Assembler\n \n-   Name_Asm                            : constant Name_Id := N + 269;\n-   Name_Assembly                       : constant Name_Id := N + 270;\n+   Name_Asm                            : constant Name_Id := N + 270;\n+   Name_Assembly                       : constant Name_Id := N + 271;\n \n    --  The following names are preset as synonyms for C\n \n-   Name_Default                        : constant Name_Id := N + 271;\n+   Name_Default                        : constant Name_Id := N + 272;\n    --  Name_Exernal (previously defined as pragma)\n \n    --  The following names are present as synonyms for Stdcall\n \n-   Name_DLL                            : constant Name_Id := N + 272;\n-   Name_Win32                          : constant Name_Id := N + 273;\n+   Name_DLL                            : constant Name_Id := N + 273;\n+   Name_Win32                          : constant Name_Id := N + 274;\n \n    --  Other special names used in processing pragmas\n \n-   Name_As_Is                          : constant Name_Id := N + 274;\n-   Name_Attribute_Name                 : constant Name_Id := N + 275;\n-   Name_Body_File_Name                 : constant Name_Id := N + 276;\n-   Name_Boolean_Entry_Barriers         : constant Name_Id := N + 277;\n-   Name_Check                          : constant Name_Id := N + 278;\n-   Name_Casing                         : constant Name_Id := N + 279;\n-   Name_Code                           : constant Name_Id := N + 280;\n-   Name_Component                      : constant Name_Id := N + 281;\n-   Name_Component_Size_4               : constant Name_Id := N + 282;\n-   Name_Copy                           : constant Name_Id := N + 283;\n-   Name_D_Float                        : constant Name_Id := N + 284;\n-   Name_Descriptor                     : constant Name_Id := N + 285;\n-   Name_Dot_Replacement                : constant Name_Id := N + 286;\n-   Name_Dynamic                        : constant Name_Id := N + 287;\n-   Name_Entity                         : constant Name_Id := N + 288;\n-   Name_Entry_Count                    : constant Name_Id := N + 289;\n-   Name_External_Name                  : constant Name_Id := N + 290;\n-   Name_First_Optional_Parameter       : constant Name_Id := N + 291;\n-   Name_Form                           : constant Name_Id := N + 292;\n-   Name_G_Float                        : constant Name_Id := N + 293;\n-   Name_Gcc                            : constant Name_Id := N + 294;\n-   Name_Gnat                           : constant Name_Id := N + 295;\n-   Name_GPL                            : constant Name_Id := N + 296;\n-   Name_IEEE_Float                     : constant Name_Id := N + 297;\n-   Name_Ignore                         : constant Name_Id := N + 298;\n-   Name_Info                           : constant Name_Id := N + 299;\n-   Name_Internal                       : constant Name_Id := N + 300;\n-   Name_Link_Name                      : constant Name_Id := N + 301;\n-   Name_Lowercase                      : constant Name_Id := N + 302;\n-   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + 303;\n-   Name_Max_Entry_Queue_Length         : constant Name_Id := N + 304;\n-   Name_Max_Size                       : constant Name_Id := N + 305;\n-   Name_Mechanism                      : constant Name_Id := N + 306;\n-   Name_Message                        : constant Name_Id := N + 307;\n-   Name_Mixedcase                      : constant Name_Id := N + 308;\n-   Name_Modified_GPL                   : constant Name_Id := N + 309;\n-   Name_Name                           : constant Name_Id := N + 310;\n-   Name_NCA                            : constant Name_Id := N + 311;\n-   Name_No                             : constant Name_Id := N + 312;\n-   Name_No_Dependence                  : constant Name_Id := N + 313;\n-   Name_No_Dynamic_Attachment          : constant Name_Id := N + 314;\n-   Name_No_Dynamic_Interrupts          : constant Name_Id := N + 315;\n-   Name_No_Requeue                     : constant Name_Id := N + 316;\n-   Name_No_Requeue_Statements          : constant Name_Id := N + 317;\n-   Name_No_Task_Attributes             : constant Name_Id := N + 318;\n-   Name_No_Task_Attributes_Package     : constant Name_Id := N + 319;\n-   Name_On                             : constant Name_Id := N + 320;\n-   Name_Parameter_Types                : constant Name_Id := N + 321;\n-   Name_Reference                      : constant Name_Id := N + 322;\n-   Name_Restricted                     : constant Name_Id := N + 323;\n-   Name_Result_Mechanism               : constant Name_Id := N + 324;\n-   Name_Result_Type                    : constant Name_Id := N + 325;\n-   Name_Runtime                        : constant Name_Id := N + 326;\n-   Name_SB                             : constant Name_Id := N + 327;\n-   Name_Secondary_Stack_Size           : constant Name_Id := N + 328;\n-   Name_Section                        : constant Name_Id := N + 329;\n-   Name_Semaphore                      : constant Name_Id := N + 330;\n-   Name_Simple_Barriers                : constant Name_Id := N + 331;\n-   Name_Spec_File_Name                 : constant Name_Id := N + 332;\n-   Name_State                          : constant Name_Id := N + 333;\n-   Name_Static                         : constant Name_Id := N + 334;\n-   Name_Stack_Size                     : constant Name_Id := N + 335;\n-   Name_Subunit_File_Name              : constant Name_Id := N + 336;\n-   Name_Task_Stack_Size_Default        : constant Name_Id := N + 337;\n-   Name_Task_Type                      : constant Name_Id := N + 338;\n-   Name_Time_Slicing_Enabled           : constant Name_Id := N + 339;\n-   Name_Top_Guard                      : constant Name_Id := N + 340;\n-   Name_UBA                            : constant Name_Id := N + 341;\n-   Name_UBS                            : constant Name_Id := N + 342;\n-   Name_UBSB                           : constant Name_Id := N + 343;\n-   Name_Unit_Name                      : constant Name_Id := N + 344;\n-   Name_Unknown                        : constant Name_Id := N + 345;\n-   Name_Unrestricted                   : constant Name_Id := N + 346;\n-   Name_Uppercase                      : constant Name_Id := N + 347;\n-   Name_User                           : constant Name_Id := N + 348;\n-   Name_VAX_Float                      : constant Name_Id := N + 349;\n-   Name_VMS                            : constant Name_Id := N + 350;\n-   Name_Vtable_Ptr                     : constant Name_Id := N + 351;\n-   Name_Working_Storage                : constant Name_Id := N + 352;\n+   Name_As_Is                          : constant Name_Id := N + 275;\n+   Name_Attribute_Name                 : constant Name_Id := N + 276;\n+   Name_Body_File_Name                 : constant Name_Id := N + 277;\n+   Name_Boolean_Entry_Barriers         : constant Name_Id := N + 278;\n+   Name_Check                          : constant Name_Id := N + 279;\n+   Name_Casing                         : constant Name_Id := N + 280;\n+   Name_Code                           : constant Name_Id := N + 281;\n+   Name_Component                      : constant Name_Id := N + 282;\n+   Name_Component_Size_4               : constant Name_Id := N + 283;\n+   Name_Copy                           : constant Name_Id := N + 284;\n+   Name_D_Float                        : constant Name_Id := N + 285;\n+   Name_Descriptor                     : constant Name_Id := N + 286;\n+   Name_Dot_Replacement                : constant Name_Id := N + 287;\n+   Name_Dynamic                        : constant Name_Id := N + 288;\n+   Name_Entity                         : constant Name_Id := N + 289;\n+   Name_Entry_Count                    : constant Name_Id := N + 290;\n+   Name_External_Name                  : constant Name_Id := N + 291;\n+   Name_First_Optional_Parameter       : constant Name_Id := N + 292;\n+   Name_Form                           : constant Name_Id := N + 293;\n+   Name_G_Float                        : constant Name_Id := N + 294;\n+   Name_Gcc                            : constant Name_Id := N + 295;\n+   Name_Gnat                           : constant Name_Id := N + 296;\n+   Name_GPL                            : constant Name_Id := N + 297;\n+   Name_IEEE_Float                     : constant Name_Id := N + 298;\n+   Name_Ignore                         : constant Name_Id := N + 299;\n+   Name_Info                           : constant Name_Id := N + 300;\n+   Name_Internal                       : constant Name_Id := N + 301;\n+   Name_Link_Name                      : constant Name_Id := N + 302;\n+   Name_Lowercase                      : constant Name_Id := N + 303;\n+   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + 304;\n+   Name_Max_Entry_Queue_Length         : constant Name_Id := N + 305;\n+   Name_Max_Size                       : constant Name_Id := N + 306;\n+   Name_Mechanism                      : constant Name_Id := N + 307;\n+   Name_Message                        : constant Name_Id := N + 308;\n+   Name_Mixedcase                      : constant Name_Id := N + 309;\n+   Name_Modified_GPL                   : constant Name_Id := N + 310;\n+   Name_Name                           : constant Name_Id := N + 311;\n+   Name_NCA                            : constant Name_Id := N + 312;\n+   Name_No                             : constant Name_Id := N + 313;\n+   Name_No_Dependence                  : constant Name_Id := N + 314;\n+   Name_No_Dynamic_Attachment          : constant Name_Id := N + 315;\n+   Name_No_Dynamic_Interrupts          : constant Name_Id := N + 316;\n+   Name_No_Requeue                     : constant Name_Id := N + 317;\n+   Name_No_Requeue_Statements          : constant Name_Id := N + 318;\n+   Name_No_Task_Attributes             : constant Name_Id := N + 319;\n+   Name_No_Task_Attributes_Package     : constant Name_Id := N + 320;\n+   Name_On                             : constant Name_Id := N + 321;\n+   Name_Parameter_Types                : constant Name_Id := N + 322;\n+   Name_Reference                      : constant Name_Id := N + 323;\n+   Name_Restricted                     : constant Name_Id := N + 324;\n+   Name_Result_Mechanism               : constant Name_Id := N + 325;\n+   Name_Result_Type                    : constant Name_Id := N + 326;\n+   Name_Runtime                        : constant Name_Id := N + 327;\n+   Name_SB                             : constant Name_Id := N + 328;\n+   Name_Secondary_Stack_Size           : constant Name_Id := N + 329;\n+   Name_Section                        : constant Name_Id := N + 330;\n+   Name_Semaphore                      : constant Name_Id := N + 331;\n+   Name_Simple_Barriers                : constant Name_Id := N + 332;\n+   Name_Spec_File_Name                 : constant Name_Id := N + 333;\n+   Name_State                          : constant Name_Id := N + 334;\n+   Name_Static                         : constant Name_Id := N + 335;\n+   Name_Stack_Size                     : constant Name_Id := N + 336;\n+   Name_Subunit_File_Name              : constant Name_Id := N + 337;\n+   Name_Task_Stack_Size_Default        : constant Name_Id := N + 338;\n+   Name_Task_Type                      : constant Name_Id := N + 339;\n+   Name_Time_Slicing_Enabled           : constant Name_Id := N + 340;\n+   Name_Top_Guard                      : constant Name_Id := N + 341;\n+   Name_UBA                            : constant Name_Id := N + 342;\n+   Name_UBS                            : constant Name_Id := N + 343;\n+   Name_UBSB                           : constant Name_Id := N + 344;\n+   Name_Unit_Name                      : constant Name_Id := N + 345;\n+   Name_Unknown                        : constant Name_Id := N + 346;\n+   Name_Unrestricted                   : constant Name_Id := N + 347;\n+   Name_Uppercase                      : constant Name_Id := N + 348;\n+   Name_User                           : constant Name_Id := N + 349;\n+   Name_VAX_Float                      : constant Name_Id := N + 350;\n+   Name_VMS                            : constant Name_Id := N + 351;\n+   Name_Vtable_Ptr                     : constant Name_Id := N + 352;\n+   Name_Working_Storage                : constant Name_Id := N + 353;\n \n    --  Names of recognized attributes. The entries with the comment \"Ada 83\"\n    --  are attributes that are defined in Ada 83, but not in Ada 95. These\n@@ -631,413 +632,421 @@ package Snames is\n    --  The entries marked VMS are recognized only in OpenVMS implementations\n    --  of GNAT, and are treated as illegal in all other contexts.\n \n-   First_Attribute_Name                : constant Name_Id := N + 353;\n-   Name_Abort_Signal                   : constant Name_Id := N + 353; -- GNAT\n-   Name_Access                         : constant Name_Id := N + 354;\n-   Name_Address                        : constant Name_Id := N + 355;\n-   Name_Address_Size                   : constant Name_Id := N + 356; -- GNAT\n-   Name_Aft                            : constant Name_Id := N + 357;\n-   Name_Alignment                      : constant Name_Id := N + 358;\n-   Name_Asm_Input                      : constant Name_Id := N + 359; -- GNAT\n-   Name_Asm_Output                     : constant Name_Id := N + 360; -- GNAT\n-   Name_AST_Entry                      : constant Name_Id := N + 361; -- VMS\n-   Name_Bit                            : constant Name_Id := N + 362; -- GNAT\n-   Name_Bit_Order                      : constant Name_Id := N + 363;\n-   Name_Bit_Position                   : constant Name_Id := N + 364; -- GNAT\n-   Name_Body_Version                   : constant Name_Id := N + 365;\n-   Name_Callable                       : constant Name_Id := N + 366;\n-   Name_Caller                         : constant Name_Id := N + 367;\n-   Name_Code_Address                   : constant Name_Id := N + 368; -- GNAT\n-   Name_Component_Size                 : constant Name_Id := N + 369;\n-   Name_Compose                        : constant Name_Id := N + 370;\n-   Name_Constrained                    : constant Name_Id := N + 371;\n-   Name_Count                          : constant Name_Id := N + 372;\n-   Name_Default_Bit_Order              : constant Name_Id := N + 373; -- GNAT\n-   Name_Definite                       : constant Name_Id := N + 374;\n-   Name_Delta                          : constant Name_Id := N + 375;\n-   Name_Denorm                         : constant Name_Id := N + 376;\n-   Name_Digits                         : constant Name_Id := N + 377;\n-   Name_Elaborated                     : constant Name_Id := N + 378; -- GNAT\n-   Name_Emax                           : constant Name_Id := N + 379; -- Ada 83\n-   Name_Enum_Rep                       : constant Name_Id := N + 380; -- GNAT\n-   Name_Epsilon                        : constant Name_Id := N + 381; -- Ada 83\n-   Name_Exponent                       : constant Name_Id := N + 382;\n-   Name_External_Tag                   : constant Name_Id := N + 383;\n-   Name_First                          : constant Name_Id := N + 384;\n-   Name_First_Bit                      : constant Name_Id := N + 385;\n-   Name_Fixed_Value                    : constant Name_Id := N + 386; -- GNAT\n-   Name_Fore                           : constant Name_Id := N + 387;\n-   Name_Has_Access_Values              : constant Name_Id := N + 388; -- GNAT\n-   Name_Has_Discriminants              : constant Name_Id := N + 389; -- GNAT\n-   Name_Identity                       : constant Name_Id := N + 390;\n-   Name_Img                            : constant Name_Id := N + 391; -- GNAT\n-   Name_Integer_Value                  : constant Name_Id := N + 392; -- GNAT\n-   Name_Large                          : constant Name_Id := N + 393; -- Ada 83\n-   Name_Last                           : constant Name_Id := N + 394;\n-   Name_Last_Bit                       : constant Name_Id := N + 395;\n-   Name_Leading_Part                   : constant Name_Id := N + 396;\n-   Name_Length                         : constant Name_Id := N + 397;\n-   Name_Machine_Emax                   : constant Name_Id := N + 398;\n-   Name_Machine_Emin                   : constant Name_Id := N + 399;\n-   Name_Machine_Mantissa               : constant Name_Id := N + 400;\n-   Name_Machine_Overflows              : constant Name_Id := N + 401;\n-   Name_Machine_Radix                  : constant Name_Id := N + 402;\n-   Name_Machine_Rounding               : constant Name_Id := N + 403; -- Ada 05\n-   Name_Machine_Rounds                 : constant Name_Id := N + 404;\n-   Name_Machine_Size                   : constant Name_Id := N + 405; -- GNAT\n-   Name_Mantissa                       : constant Name_Id := N + 406; -- Ada 83\n-   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 407;\n-   Name_Maximum_Alignment              : constant Name_Id := N + 408; -- GNAT\n-   Name_Mechanism_Code                 : constant Name_Id := N + 409; -- GNAT\n-   Name_Mod                            : constant Name_Id := N + 410;\n-   Name_Model_Emin                     : constant Name_Id := N + 411;\n-   Name_Model_Epsilon                  : constant Name_Id := N + 412;\n-   Name_Model_Mantissa                 : constant Name_Id := N + 413;\n-   Name_Model_Small                    : constant Name_Id := N + 414;\n-   Name_Modulus                        : constant Name_Id := N + 415;\n-   Name_Null_Parameter                 : constant Name_Id := N + 416; -- GNAT\n-   Name_Object_Size                    : constant Name_Id := N + 417; -- GNAT\n-   Name_Partition_ID                   : constant Name_Id := N + 418;\n-   Name_Passed_By_Reference            : constant Name_Id := N + 419; -- GNAT\n-   Name_Pool_Address                   : constant Name_Id := N + 420;\n-   Name_Pos                            : constant Name_Id := N + 421;\n-   Name_Position                       : constant Name_Id := N + 422;\n-   Name_Range                          : constant Name_Id := N + 423;\n-   Name_Range_Length                   : constant Name_Id := N + 424; -- GNAT\n-   Name_Round                          : constant Name_Id := N + 425;\n-   Name_Safe_Emax                      : constant Name_Id := N + 426; -- Ada 83\n-   Name_Safe_First                     : constant Name_Id := N + 427;\n-   Name_Safe_Large                     : constant Name_Id := N + 428; -- Ada 83\n-   Name_Safe_Last                      : constant Name_Id := N + 429;\n-   Name_Safe_Small                     : constant Name_Id := N + 430; -- Ada 83\n-   Name_Scale                          : constant Name_Id := N + 431;\n-   Name_Scaling                        : constant Name_Id := N + 432;\n-   Name_Signed_Zeros                   : constant Name_Id := N + 433;\n-   Name_Size                           : constant Name_Id := N + 434;\n-   Name_Small                          : constant Name_Id := N + 435;\n-   Name_Storage_Size                   : constant Name_Id := N + 436;\n-   Name_Storage_Unit                   : constant Name_Id := N + 437; -- GNAT\n-   Name_Stream_Size                    : constant Name_Id := N + 438; -- Ada 05\n-   Name_Tag                            : constant Name_Id := N + 439;\n-   Name_Target_Name                    : constant Name_Id := N + 440; -- GNAT\n-   Name_Terminated                     : constant Name_Id := N + 441;\n-   Name_To_Address                     : constant Name_Id := N + 442; -- GNAT\n-   Name_Type_Class                     : constant Name_Id := N + 443; -- GNAT\n-   Name_UET_Address                    : constant Name_Id := N + 444; -- GNAT\n-   Name_Unbiased_Rounding              : constant Name_Id := N + 445;\n-   Name_Unchecked_Access               : constant Name_Id := N + 446;\n-   Name_Unconstrained_Array            : constant Name_Id := N + 447;\n-   Name_Universal_Literal_String       : constant Name_Id := N + 448; -- GNAT\n-   Name_Unrestricted_Access            : constant Name_Id := N + 449; -- GNAT\n-   Name_VADS_Size                      : constant Name_Id := N + 450; -- GNAT\n-   Name_Val                            : constant Name_Id := N + 451;\n-   Name_Valid                          : constant Name_Id := N + 452;\n-   Name_Value_Size                     : constant Name_Id := N + 453; -- GNAT\n-   Name_Version                        : constant Name_Id := N + 454;\n-   Name_Wchar_T_Size                   : constant Name_Id := N + 455; -- GNAT\n-   Name_Wide_Wide_Width                : constant Name_Id := N + 456; -- Ada 05\n-   Name_Wide_Width                     : constant Name_Id := N + 457;\n-   Name_Width                          : constant Name_Id := N + 458;\n-   Name_Word_Size                      : constant Name_Id := N + 459; -- GNAT\n+   First_Attribute_Name                : constant Name_Id := N + 354;\n+   Name_Abort_Signal                   : constant Name_Id := N + 354; -- GNAT\n+   Name_Access                         : constant Name_Id := N + 355;\n+   Name_Address                        : constant Name_Id := N + 356;\n+   Name_Address_Size                   : constant Name_Id := N + 357; -- GNAT\n+   Name_Aft                            : constant Name_Id := N + 358;\n+   Name_Alignment                      : constant Name_Id := N + 359;\n+   Name_Asm_Input                      : constant Name_Id := N + 360; -- GNAT\n+   Name_Asm_Output                     : constant Name_Id := N + 361; -- GNAT\n+   Name_AST_Entry                      : constant Name_Id := N + 362; -- VMS\n+   Name_Bit                            : constant Name_Id := N + 363; -- GNAT\n+   Name_Bit_Order                      : constant Name_Id := N + 364;\n+   Name_Bit_Position                   : constant Name_Id := N + 365; -- GNAT\n+   Name_Body_Version                   : constant Name_Id := N + 366;\n+   Name_Callable                       : constant Name_Id := N + 367;\n+   Name_Caller                         : constant Name_Id := N + 368;\n+   Name_Code_Address                   : constant Name_Id := N + 369; -- GNAT\n+   Name_Component_Size                 : constant Name_Id := N + 370;\n+   Name_Compose                        : constant Name_Id := N + 371;\n+   Name_Constrained                    : constant Name_Id := N + 372;\n+   Name_Count                          : constant Name_Id := N + 373;\n+   Name_Default_Bit_Order              : constant Name_Id := N + 374; -- GNAT\n+   Name_Definite                       : constant Name_Id := N + 375;\n+   Name_Delta                          : constant Name_Id := N + 376;\n+   Name_Denorm                         : constant Name_Id := N + 377;\n+   Name_Digits                         : constant Name_Id := N + 378;\n+   Name_Elaborated                     : constant Name_Id := N + 379; -- GNAT\n+   Name_Emax                           : constant Name_Id := N + 380; -- Ada 83\n+   Name_Enum_Rep                       : constant Name_Id := N + 381; -- GNAT\n+   Name_Epsilon                        : constant Name_Id := N + 382; -- Ada 83\n+   Name_Exponent                       : constant Name_Id := N + 383;\n+   Name_External_Tag                   : constant Name_Id := N + 384;\n+   Name_First                          : constant Name_Id := N + 385;\n+   Name_First_Bit                      : constant Name_Id := N + 386;\n+   Name_Fixed_Value                    : constant Name_Id := N + 387; -- GNAT\n+   Name_Fore                           : constant Name_Id := N + 388;\n+   Name_Has_Access_Values              : constant Name_Id := N + 389; -- GNAT\n+   Name_Has_Discriminants              : constant Name_Id := N + 390; -- GNAT\n+   Name_Identity                       : constant Name_Id := N + 391;\n+   Name_Img                            : constant Name_Id := N + 392; -- GNAT\n+   Name_Integer_Value                  : constant Name_Id := N + 393; -- GNAT\n+   Name_Large                          : constant Name_Id := N + 394; -- Ada 83\n+   Name_Last                           : constant Name_Id := N + 395;\n+   Name_Last_Bit                       : constant Name_Id := N + 396;\n+   Name_Leading_Part                   : constant Name_Id := N + 397;\n+   Name_Length                         : constant Name_Id := N + 398;\n+   Name_Machine_Emax                   : constant Name_Id := N + 399;\n+   Name_Machine_Emin                   : constant Name_Id := N + 400;\n+   Name_Machine_Mantissa               : constant Name_Id := N + 401;\n+   Name_Machine_Overflows              : constant Name_Id := N + 402;\n+   Name_Machine_Radix                  : constant Name_Id := N + 403;\n+   Name_Machine_Rounding               : constant Name_Id := N + 404; -- Ada 05\n+   Name_Machine_Rounds                 : constant Name_Id := N + 405;\n+   Name_Machine_Size                   : constant Name_Id := N + 406; -- GNAT\n+   Name_Mantissa                       : constant Name_Id := N + 407; -- Ada 83\n+   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 408;\n+   Name_Maximum_Alignment              : constant Name_Id := N + 409; -- GNAT\n+   Name_Mechanism_Code                 : constant Name_Id := N + 410; -- GNAT\n+   Name_Mod                            : constant Name_Id := N + 411;\n+   Name_Model_Emin                     : constant Name_Id := N + 412;\n+   Name_Model_Epsilon                  : constant Name_Id := N + 413;\n+   Name_Model_Mantissa                 : constant Name_Id := N + 414;\n+   Name_Model_Small                    : constant Name_Id := N + 415;\n+   Name_Modulus                        : constant Name_Id := N + 416;\n+   Name_Null_Parameter                 : constant Name_Id := N + 417; -- GNAT\n+   Name_Object_Size                    : constant Name_Id := N + 418; -- GNAT\n+   Name_Partition_ID                   : constant Name_Id := N + 419;\n+   Name_Passed_By_Reference            : constant Name_Id := N + 420; -- GNAT\n+   Name_Pool_Address                   : constant Name_Id := N + 421;\n+   Name_Pos                            : constant Name_Id := N + 422;\n+   Name_Position                       : constant Name_Id := N + 423;\n+   Name_Range                          : constant Name_Id := N + 424;\n+   Name_Range_Length                   : constant Name_Id := N + 425; -- GNAT\n+   Name_Round                          : constant Name_Id := N + 426;\n+   Name_Safe_Emax                      : constant Name_Id := N + 427; -- Ada 83\n+   Name_Safe_First                     : constant Name_Id := N + 428;\n+   Name_Safe_Large                     : constant Name_Id := N + 429; -- Ada 83\n+   Name_Safe_Last                      : constant Name_Id := N + 430;\n+   Name_Safe_Small                     : constant Name_Id := N + 431; -- Ada 83\n+   Name_Scale                          : constant Name_Id := N + 432;\n+   Name_Scaling                        : constant Name_Id := N + 433;\n+   Name_Signed_Zeros                   : constant Name_Id := N + 434;\n+   Name_Size                           : constant Name_Id := N + 435;\n+   Name_Small                          : constant Name_Id := N + 436;\n+   Name_Storage_Size                   : constant Name_Id := N + 437;\n+   Name_Storage_Unit                   : constant Name_Id := N + 438; -- GNAT\n+   Name_Stream_Size                    : constant Name_Id := N + 439; -- Ada 05\n+   Name_Tag                            : constant Name_Id := N + 440;\n+   Name_Target_Name                    : constant Name_Id := N + 441; -- GNAT\n+   Name_Terminated                     : constant Name_Id := N + 442;\n+   Name_To_Address                     : constant Name_Id := N + 443; -- GNAT\n+   Name_Type_Class                     : constant Name_Id := N + 444; -- GNAT\n+   Name_UET_Address                    : constant Name_Id := N + 445; -- GNAT\n+   Name_Unbiased_Rounding              : constant Name_Id := N + 446;\n+   Name_Unchecked_Access               : constant Name_Id := N + 447;\n+   Name_Unconstrained_Array            : constant Name_Id := N + 448;\n+   Name_Universal_Literal_String       : constant Name_Id := N + 449; -- GNAT\n+   Name_Unrestricted_Access            : constant Name_Id := N + 450; -- GNAT\n+   Name_VADS_Size                      : constant Name_Id := N + 451; -- GNAT\n+   Name_Val                            : constant Name_Id := N + 452;\n+   Name_Valid                          : constant Name_Id := N + 453;\n+   Name_Value_Size                     : constant Name_Id := N + 454; -- GNAT\n+   Name_Version                        : constant Name_Id := N + 455;\n+   Name_Wchar_T_Size                   : constant Name_Id := N + 456; -- GNAT\n+   Name_Wide_Wide_Width                : constant Name_Id := N + 457; -- Ada 05\n+   Name_Wide_Width                     : constant Name_Id := N + 458;\n+   Name_Width                          : constant Name_Id := N + 459;\n+   Name_Word_Size                      : constant Name_Id := N + 460; -- GNAT\n \n    --  Attributes that designate attributes returning renamable functions,\n    --  i.e. functions that return other than a universal value and that\n    --  have non-universal arguments.\n \n-   First_Renamable_Function_Attribute  : constant Name_Id := N + 460;\n-   Name_Adjacent                       : constant Name_Id := N + 460;\n-   Name_Ceiling                        : constant Name_Id := N + 461;\n-   Name_Copy_Sign                      : constant Name_Id := N + 462;\n-   Name_Floor                          : constant Name_Id := N + 463;\n-   Name_Fraction                       : constant Name_Id := N + 464;\n-   Name_Image                          : constant Name_Id := N + 465;\n-   Name_Input                          : constant Name_Id := N + 466;\n-   Name_Machine                        : constant Name_Id := N + 467;\n-   Name_Max                            : constant Name_Id := N + 468;\n-   Name_Min                            : constant Name_Id := N + 469;\n-   Name_Model                          : constant Name_Id := N + 470;\n-   Name_Pred                           : constant Name_Id := N + 471;\n-   Name_Remainder                      : constant Name_Id := N + 472;\n-   Name_Rounding                       : constant Name_Id := N + 473;\n-   Name_Succ                           : constant Name_Id := N + 474;\n-   Name_Truncation                     : constant Name_Id := N + 475;\n-   Name_Value                          : constant Name_Id := N + 476;\n-   Name_Wide_Image                     : constant Name_Id := N + 477;\n-   Name_Wide_Wide_Image                : constant Name_Id := N + 478;\n-   Name_Wide_Value                     : constant Name_Id := N + 479;\n-   Name_Wide_Wide_Value                : constant Name_Id := N + 480;\n-   Last_Renamable_Function_Attribute   : constant Name_Id := N + 480;\n+   First_Renamable_Function_Attribute  : constant Name_Id := N + 461;\n+   Name_Adjacent                       : constant Name_Id := N + 461;\n+   Name_Ceiling                        : constant Name_Id := N + 462;\n+   Name_Copy_Sign                      : constant Name_Id := N + 463;\n+   Name_Floor                          : constant Name_Id := N + 464;\n+   Name_Fraction                       : constant Name_Id := N + 465;\n+   Name_Image                          : constant Name_Id := N + 466;\n+   Name_Input                          : constant Name_Id := N + 467;\n+   Name_Machine                        : constant Name_Id := N + 468;\n+   Name_Max                            : constant Name_Id := N + 469;\n+   Name_Min                            : constant Name_Id := N + 470;\n+   Name_Model                          : constant Name_Id := N + 471;\n+   Name_Pred                           : constant Name_Id := N + 472;\n+   Name_Remainder                      : constant Name_Id := N + 473;\n+   Name_Rounding                       : constant Name_Id := N + 474;\n+   Name_Succ                           : constant Name_Id := N + 475;\n+   Name_Truncation                     : constant Name_Id := N + 476;\n+   Name_Value                          : constant Name_Id := N + 477;\n+   Name_Wide_Image                     : constant Name_Id := N + 478;\n+   Name_Wide_Wide_Image                : constant Name_Id := N + 479;\n+   Name_Wide_Value                     : constant Name_Id := N + 480;\n+   Name_Wide_Wide_Value                : constant Name_Id := N + 481;\n+   Last_Renamable_Function_Attribute   : constant Name_Id := N + 481;\n \n    --  Attributes that designate procedures\n \n-   First_Procedure_Attribute           : constant Name_Id := N + 481;\n-   Name_Output                         : constant Name_Id := N + 481;\n-   Name_Read                           : constant Name_Id := N + 482;\n-   Name_Write                          : constant Name_Id := N + 483;\n-   Last_Procedure_Attribute            : constant Name_Id := N + 483;\n+   First_Procedure_Attribute           : constant Name_Id := N + 482;\n+   Name_Output                         : constant Name_Id := N + 482;\n+   Name_Read                           : constant Name_Id := N + 483;\n+   Name_Write                          : constant Name_Id := N + 484;\n+   Last_Procedure_Attribute            : constant Name_Id := N + 484;\n \n    --  Remaining attributes are ones that return entities\n \n-   First_Entity_Attribute_Name         : constant Name_Id := N + 484;\n-   Name_Elab_Body                      : constant Name_Id := N + 484; -- GNAT\n-   Name_Elab_Spec                      : constant Name_Id := N + 485; -- GNAT\n-   Name_Storage_Pool                   : constant Name_Id := N + 486;\n+   First_Entity_Attribute_Name         : constant Name_Id := N + 485;\n+   Name_Elab_Body                      : constant Name_Id := N + 485; -- GNAT\n+   Name_Elab_Spec                      : constant Name_Id := N + 486; -- GNAT\n+   Name_Storage_Pool                   : constant Name_Id := N + 487;\n \n    --  These attributes are the ones that return types\n \n-   First_Type_Attribute_Name           : constant Name_Id := N + 487;\n-   Name_Base                           : constant Name_Id := N + 487;\n-   Name_Class                          : constant Name_Id := N + 488;\n-   Last_Type_Attribute_Name            : constant Name_Id := N + 488;\n-   Last_Entity_Attribute_Name          : constant Name_Id := N + 488;\n-   Last_Attribute_Name                 : constant Name_Id := N + 488;\n+   First_Type_Attribute_Name           : constant Name_Id := N + 488;\n+   Name_Base                           : constant Name_Id := N + 488;\n+   Name_Class                          : constant Name_Id := N + 489;\n+   Last_Type_Attribute_Name            : constant Name_Id := N + 489;\n+   Last_Entity_Attribute_Name          : constant Name_Id := N + 489;\n+   Last_Attribute_Name                 : constant Name_Id := N + 489;\n \n    --  Names of recognized locking policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. C for Ceiling_Locking). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Locking_Policy_Name           : constant Name_Id := N + 489;\n-   Name_Ceiling_Locking                : constant Name_Id := N + 489;\n-   Name_Inheritance_Locking            : constant Name_Id := N + 490;\n-   Last_Locking_Policy_Name            : constant Name_Id := N + 490;\n+   First_Locking_Policy_Name           : constant Name_Id := N + 490;\n+   Name_Ceiling_Locking                : constant Name_Id := N + 490;\n+   Name_Inheritance_Locking            : constant Name_Id := N + 491;\n+   Last_Locking_Policy_Name            : constant Name_Id := N + 491;\n \n    --  Names of recognized queuing policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_Queuing). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Queuing_Policy_Name           : constant Name_Id := N + 491;\n-   Name_FIFO_Queuing                   : constant Name_Id := N + 491;\n-   Name_Priority_Queuing               : constant Name_Id := N + 492;\n-   Last_Queuing_Policy_Name            : constant Name_Id := N + 492;\n+   First_Queuing_Policy_Name           : constant Name_Id := N + 492;\n+   Name_FIFO_Queuing                   : constant Name_Id := N + 492;\n+   Name_Priority_Queuing               : constant Name_Id := N + 493;\n+   Last_Queuing_Policy_Name            : constant Name_Id := N + 493;\n \n    --  Names of recognized task dispatching policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_WIthinn_Priorities). If new policy names\n    --  are added, the first character must be distinct.\n \n-   First_Task_Dispatching_Policy_Name  : constant Name_Id := N + 493;\n-   Name_FIFO_Within_Priorities         : constant Name_Id := N + 493;\n-   Last_Task_Dispatching_Policy_Name   : constant Name_Id := N + 493;\n+   First_Task_Dispatching_Policy_Name  : constant Name_Id := N + 494;\n+   Name_FIFO_Within_Priorities         : constant Name_Id := N + 494;\n+   Last_Task_Dispatching_Policy_Name   : constant Name_Id := N + 494;\n \n    --  Names of recognized checks for pragma Suppress\n \n-   First_Check_Name                    : constant Name_Id := N + 494;\n-   Name_Access_Check                   : constant Name_Id := N + 494;\n-   Name_Accessibility_Check            : constant Name_Id := N + 495;\n-   Name_Discriminant_Check             : constant Name_Id := N + 496;\n-   Name_Division_Check                 : constant Name_Id := N + 497;\n-   Name_Elaboration_Check              : constant Name_Id := N + 498;\n-   Name_Index_Check                    : constant Name_Id := N + 499;\n-   Name_Length_Check                   : constant Name_Id := N + 500;\n-   Name_Overflow_Check                 : constant Name_Id := N + 501;\n-   Name_Range_Check                    : constant Name_Id := N + 502;\n-   Name_Storage_Check                  : constant Name_Id := N + 503;\n-   Name_Tag_Check                      : constant Name_Id := N + 504;\n-   Name_All_Checks                     : constant Name_Id := N + 505;\n-   Last_Check_Name                     : constant Name_Id := N + 505;\n+   First_Check_Name                    : constant Name_Id := N + 495;\n+   Name_Access_Check                   : constant Name_Id := N + 495;\n+   Name_Accessibility_Check            : constant Name_Id := N + 496;\n+   Name_Discriminant_Check             : constant Name_Id := N + 497;\n+   Name_Division_Check                 : constant Name_Id := N + 498;\n+   Name_Elaboration_Check              : constant Name_Id := N + 499;\n+   Name_Index_Check                    : constant Name_Id := N + 500;\n+   Name_Length_Check                   : constant Name_Id := N + 501;\n+   Name_Overflow_Check                 : constant Name_Id := N + 502;\n+   Name_Range_Check                    : constant Name_Id := N + 503;\n+   Name_Storage_Check                  : constant Name_Id := N + 504;\n+   Name_Tag_Check                      : constant Name_Id := N + 505;\n+   Name_All_Checks                     : constant Name_Id := N + 506;\n+   Last_Check_Name                     : constant Name_Id := N + 506;\n \n    --  Names corresponding to reserved keywords, excluding those already\n    --  declared in the attribute list (Access, Delta, Digits, Mod, Range).\n \n-   Name_Abort                          : constant Name_Id := N + 506;\n-   Name_Abs                            : constant Name_Id := N + 507;\n-   Name_Accept                         : constant Name_Id := N + 508;\n-   Name_And                            : constant Name_Id := N + 509;\n-   Name_All                            : constant Name_Id := N + 510;\n-   Name_Array                          : constant Name_Id := N + 511;\n-   Name_At                             : constant Name_Id := N + 512;\n-   Name_Begin                          : constant Name_Id := N + 513;\n-   Name_Body                           : constant Name_Id := N + 514;\n-   Name_Case                           : constant Name_Id := N + 515;\n-   Name_Constant                       : constant Name_Id := N + 516;\n-   Name_Declare                        : constant Name_Id := N + 517;\n-   Name_Delay                          : constant Name_Id := N + 518;\n-   Name_Do                             : constant Name_Id := N + 519;\n-   Name_Else                           : constant Name_Id := N + 520;\n-   Name_Elsif                          : constant Name_Id := N + 521;\n-   Name_End                            : constant Name_Id := N + 522;\n-   Name_Entry                          : constant Name_Id := N + 523;\n-   Name_Exception                      : constant Name_Id := N + 524;\n-   Name_Exit                           : constant Name_Id := N + 525;\n-   Name_For                            : constant Name_Id := N + 526;\n-   Name_Function                       : constant Name_Id := N + 527;\n-   Name_Generic                        : constant Name_Id := N + 528;\n-   Name_Goto                           : constant Name_Id := N + 529;\n-   Name_If                             : constant Name_Id := N + 530;\n-   Name_In                             : constant Name_Id := N + 531;\n-   Name_Is                             : constant Name_Id := N + 532;\n-   Name_Limited                        : constant Name_Id := N + 533;\n-   Name_Loop                           : constant Name_Id := N + 534;\n-   Name_New                            : constant Name_Id := N + 535;\n-   Name_Not                            : constant Name_Id := N + 536;\n-   Name_Null                           : constant Name_Id := N + 537;\n-   Name_Of                             : constant Name_Id := N + 538;\n-   Name_Or                             : constant Name_Id := N + 539;\n-   Name_Others                         : constant Name_Id := N + 540;\n-   Name_Out                            : constant Name_Id := N + 541;\n-   Name_Package                        : constant Name_Id := N + 542;\n-   Name_Pragma                         : constant Name_Id := N + 543;\n-   Name_Private                        : constant Name_Id := N + 544;\n-   Name_Procedure                      : constant Name_Id := N + 545;\n-   Name_Raise                          : constant Name_Id := N + 546;\n-   Name_Record                         : constant Name_Id := N + 547;\n-   Name_Rem                            : constant Name_Id := N + 548;\n-   Name_Renames                        : constant Name_Id := N + 549;\n-   Name_Return                         : constant Name_Id := N + 550;\n-   Name_Reverse                        : constant Name_Id := N + 551;\n-   Name_Select                         : constant Name_Id := N + 552;\n-   Name_Separate                       : constant Name_Id := N + 553;\n-   Name_Subtype                        : constant Name_Id := N + 554;\n-   Name_Task                           : constant Name_Id := N + 555;\n-   Name_Terminate                      : constant Name_Id := N + 556;\n-   Name_Then                           : constant Name_Id := N + 557;\n-   Name_Type                           : constant Name_Id := N + 558;\n-   Name_Use                            : constant Name_Id := N + 559;\n-   Name_When                           : constant Name_Id := N + 560;\n-   Name_While                          : constant Name_Id := N + 561;\n-   Name_With                           : constant Name_Id := N + 562;\n-   Name_Xor                            : constant Name_Id := N + 563;\n+   Name_Abort                          : constant Name_Id := N + 507;\n+   Name_Abs                            : constant Name_Id := N + 508;\n+   Name_Accept                         : constant Name_Id := N + 509;\n+   Name_And                            : constant Name_Id := N + 510;\n+   Name_All                            : constant Name_Id := N + 511;\n+   Name_Array                          : constant Name_Id := N + 512;\n+   Name_At                             : constant Name_Id := N + 513;\n+   Name_Begin                          : constant Name_Id := N + 514;\n+   Name_Body                           : constant Name_Id := N + 515;\n+   Name_Case                           : constant Name_Id := N + 516;\n+   Name_Constant                       : constant Name_Id := N + 517;\n+   Name_Declare                        : constant Name_Id := N + 518;\n+   Name_Delay                          : constant Name_Id := N + 519;\n+   Name_Do                             : constant Name_Id := N + 520;\n+   Name_Else                           : constant Name_Id := N + 521;\n+   Name_Elsif                          : constant Name_Id := N + 522;\n+   Name_End                            : constant Name_Id := N + 523;\n+   Name_Entry                          : constant Name_Id := N + 524;\n+   Name_Exception                      : constant Name_Id := N + 525;\n+   Name_Exit                           : constant Name_Id := N + 526;\n+   Name_For                            : constant Name_Id := N + 527;\n+   Name_Function                       : constant Name_Id := N + 528;\n+   Name_Generic                        : constant Name_Id := N + 529;\n+   Name_Goto                           : constant Name_Id := N + 530;\n+   Name_If                             : constant Name_Id := N + 531;\n+   Name_In                             : constant Name_Id := N + 532;\n+   Name_Is                             : constant Name_Id := N + 533;\n+   Name_Limited                        : constant Name_Id := N + 534;\n+   Name_Loop                           : constant Name_Id := N + 535;\n+   Name_New                            : constant Name_Id := N + 536;\n+   Name_Not                            : constant Name_Id := N + 537;\n+   Name_Null                           : constant Name_Id := N + 538;\n+   Name_Of                             : constant Name_Id := N + 539;\n+   Name_Or                             : constant Name_Id := N + 540;\n+   Name_Others                         : constant Name_Id := N + 541;\n+   Name_Out                            : constant Name_Id := N + 542;\n+   Name_Package                        : constant Name_Id := N + 543;\n+   Name_Pragma                         : constant Name_Id := N + 544;\n+   Name_Private                        : constant Name_Id := N + 545;\n+   Name_Procedure                      : constant Name_Id := N + 546;\n+   Name_Raise                          : constant Name_Id := N + 547;\n+   Name_Record                         : constant Name_Id := N + 548;\n+   Name_Rem                            : constant Name_Id := N + 549;\n+   Name_Renames                        : constant Name_Id := N + 550;\n+   Name_Return                         : constant Name_Id := N + 551;\n+   Name_Reverse                        : constant Name_Id := N + 552;\n+   Name_Select                         : constant Name_Id := N + 553;\n+   Name_Separate                       : constant Name_Id := N + 554;\n+   Name_Subtype                        : constant Name_Id := N + 555;\n+   Name_Task                           : constant Name_Id := N + 556;\n+   Name_Terminate                      : constant Name_Id := N + 557;\n+   Name_Then                           : constant Name_Id := N + 558;\n+   Name_Type                           : constant Name_Id := N + 559;\n+   Name_Use                            : constant Name_Id := N + 560;\n+   Name_When                           : constant Name_Id := N + 561;\n+   Name_While                          : constant Name_Id := N + 562;\n+   Name_With                           : constant Name_Id := N + 563;\n+   Name_Xor                            : constant Name_Id := N + 564;\n \n    --  Names of intrinsic subprograms\n \n    --  Note: Asm is missing from this list, since Asm is a legitimate\n    --  convention name. So is To_Adress, which is a GNAT attribute.\n \n-   First_Intrinsic_Name                 : constant Name_Id := N + 564;\n-   Name_Divide                          : constant Name_Id := N + 564;\n-   Name_Enclosing_Entity                : constant Name_Id := N + 565;\n-   Name_Exception_Information           : constant Name_Id := N + 566;\n-   Name_Exception_Message               : constant Name_Id := N + 567;\n-   Name_Exception_Name                  : constant Name_Id := N + 568;\n-   Name_File                            : constant Name_Id := N + 569;\n-   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 570;\n-   Name_Import_Address                  : constant Name_Id := N + 571;\n-   Name_Import_Largest_Value            : constant Name_Id := N + 572;\n-   Name_Import_Value                    : constant Name_Id := N + 573;\n-   Name_Is_Negative                     : constant Name_Id := N + 574;\n-   Name_Line                            : constant Name_Id := N + 575;\n-   Name_Rotate_Left                     : constant Name_Id := N + 576;\n-   Name_Rotate_Right                    : constant Name_Id := N + 577;\n-   Name_Shift_Left                      : constant Name_Id := N + 578;\n-   Name_Shift_Right                     : constant Name_Id := N + 579;\n-   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 580;\n-   Name_Source_Location                 : constant Name_Id := N + 581;\n-   Name_Unchecked_Conversion            : constant Name_Id := N + 582;\n-   Name_Unchecked_Deallocation          : constant Name_Id := N + 583;\n-   Name_To_Pointer                      : constant Name_Id := N + 584;\n-   Last_Intrinsic_Name                  : constant Name_Id := N + 584;\n+   First_Intrinsic_Name                 : constant Name_Id := N + 565;\n+   Name_Divide                          : constant Name_Id := N + 565;\n+   Name_Enclosing_Entity                : constant Name_Id := N + 566;\n+   Name_Exception_Information           : constant Name_Id := N + 567;\n+   Name_Exception_Message               : constant Name_Id := N + 568;\n+   Name_Exception_Name                  : constant Name_Id := N + 569;\n+   Name_File                            : constant Name_Id := N + 570;\n+   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 571;\n+   Name_Import_Address                  : constant Name_Id := N + 572;\n+   Name_Import_Largest_Value            : constant Name_Id := N + 573;\n+   Name_Import_Value                    : constant Name_Id := N + 574;\n+   Name_Is_Negative                     : constant Name_Id := N + 575;\n+   Name_Line                            : constant Name_Id := N + 576;\n+   Name_Rotate_Left                     : constant Name_Id := N + 577;\n+   Name_Rotate_Right                    : constant Name_Id := N + 578;\n+   Name_Shift_Left                      : constant Name_Id := N + 579;\n+   Name_Shift_Right                     : constant Name_Id := N + 580;\n+   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 581;\n+   Name_Source_Location                 : constant Name_Id := N + 582;\n+   Name_Unchecked_Conversion            : constant Name_Id := N + 583;\n+   Name_Unchecked_Deallocation          : constant Name_Id := N + 584;\n+   Name_To_Pointer                      : constant Name_Id := N + 585;\n+   Last_Intrinsic_Name                  : constant Name_Id := N + 585;\n \n    --  Names used in processing intrinsic calls\n \n-   Name_Free                           : constant Name_Id := N + 585;\n+   Name_Free                           : constant Name_Id := N + 586;\n \n    --  Reserved words used only in Ada 95\n \n-   First_95_Reserved_Word              : constant Name_Id := N + 586;\n-   Name_Abstract                       : constant Name_Id := N + 586;\n-   Name_Aliased                        : constant Name_Id := N + 587;\n-   Name_Protected                      : constant Name_Id := N + 588;\n-   Name_Until                          : constant Name_Id := N + 589;\n-   Name_Requeue                        : constant Name_Id := N + 590;\n-   Name_Tagged                         : constant Name_Id := N + 591;\n-   Last_95_Reserved_Word               : constant Name_Id := N + 591;\n+   First_95_Reserved_Word              : constant Name_Id := N + 587;\n+   Name_Abstract                       : constant Name_Id := N + 587;\n+   Name_Aliased                        : constant Name_Id := N + 588;\n+   Name_Protected                      : constant Name_Id := N + 589;\n+   Name_Until                          : constant Name_Id := N + 590;\n+   Name_Requeue                        : constant Name_Id := N + 591;\n+   Name_Tagged                         : constant Name_Id := N + 592;\n+   Last_95_Reserved_Word               : constant Name_Id := N + 592;\n \n    subtype Ada_95_Reserved_Words is\n      Name_Id range First_95_Reserved_Word .. Last_95_Reserved_Word;\n \n    --  Miscellaneous names used in semantic checking\n \n-   Name_Raise_Exception                : constant Name_Id := N + 592;\n+   Name_Raise_Exception                : constant Name_Id := N + 593;\n \n    --  Additional reserved words and identifiers used in GNAT Project Files\n    --  Note that Name_External is already previously declared\n \n-   Name_Ada_Roots                      : constant Name_Id := N + 593;\n-   Name_Binder                         : constant Name_Id := N + 594;\n-   Name_Binder_Driver                  : constant Name_Id := N + 595;\n-   Name_Body_Suffix                    : constant Name_Id := N + 596;\n-   Name_Builder                        : constant Name_Id := N + 597;\n-   Name_Compiler                       : constant Name_Id := N + 598;\n-   Name_Compiler_Driver                : constant Name_Id := N + 599;\n-   Name_Compiler_Kind                  : constant Name_Id := N + 600;\n-   Name_Compute_Dependency             : constant Name_Id := N + 601;\n-   Name_Cross_Reference                : constant Name_Id := N + 602;\n-   Name_Default_Linker                 : constant Name_Id := N + 603;\n-   Name_Default_Switches               : constant Name_Id := N + 604;\n-   Name_Dependency_Option              : constant Name_Id := N + 605;\n-   Name_Exec_Dir                       : constant Name_Id := N + 606;\n-   Name_Executable                     : constant Name_Id := N + 607;\n-   Name_Executable_Suffix              : constant Name_Id := N + 608;\n-   Name_Extends                        : constant Name_Id := N + 609;\n-   Name_Externally_Built               : constant Name_Id := N + 610;\n-   Name_Finder                         : constant Name_Id := N + 611;\n-   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 612;\n-   Name_Gnatls                         : constant Name_Id := N + 613;\n-   Name_Gnatstub                       : constant Name_Id := N + 614;\n-   Name_Implementation                 : constant Name_Id := N + 615;\n-   Name_Implementation_Exceptions      : constant Name_Id := N + 616;\n-   Name_Implementation_Suffix          : constant Name_Id := N + 617;\n-   Name_Include_Option                 : constant Name_Id := N + 618;\n-   Name_Language_Processing            : constant Name_Id := N + 619;\n-   Name_Languages                      : constant Name_Id := N + 620;\n-   Name_Library_Ali_Dir                : constant Name_Id := N + 621;\n-   Name_Library_Dir                    : constant Name_Id := N + 622;\n-   Name_Library_Auto_Init              : constant Name_Id := N + 623;\n-   Name_Library_GCC                    : constant Name_Id := N + 624;\n-   Name_Library_Interface              : constant Name_Id := N + 625;\n-   Name_Library_Kind                   : constant Name_Id := N + 626;\n-   Name_Library_Name                   : constant Name_Id := N + 627;\n-   Name_Library_Options                : constant Name_Id := N + 628;\n-   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 629;\n-   Name_Library_Src_Dir                : constant Name_Id := N + 630;\n-   Name_Library_Symbol_File            : constant Name_Id := N + 631;\n-   Name_Library_Symbol_Policy          : constant Name_Id := N + 632;\n-   Name_Library_Version                : constant Name_Id := N + 633;\n-   Name_Linker                         : constant Name_Id := N + 634;\n-   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 635;\n-   Name_Locally_Removed_Files          : constant Name_Id := N + 636;\n-   Name_Metrics                        : constant Name_Id := N + 637;\n-   Name_Naming                         : constant Name_Id := N + 638;\n-   Name_Object_Dir                     : constant Name_Id := N + 639;\n-   Name_Pretty_Printer                 : constant Name_Id := N + 640;\n-   Name_Project                        : constant Name_Id := N + 641;\n-   Name_Separate_Suffix                : constant Name_Id := N + 642;\n-   Name_Source_Dirs                    : constant Name_Id := N + 643;\n-   Name_Source_Files                   : constant Name_Id := N + 644;\n-   Name_Source_List_File               : constant Name_Id := N + 645;\n-   Name_Spec                           : constant Name_Id := N + 646;\n-   Name_Spec_Suffix                    : constant Name_Id := N + 647;\n-   Name_Specification                  : constant Name_Id := N + 648;\n-   Name_Specification_Exceptions       : constant Name_Id := N + 649;\n-   Name_Specification_Suffix           : constant Name_Id := N + 650;\n-   Name_Switches                       : constant Name_Id := N + 651;\n+   Name_Ada_Roots                      : constant Name_Id := N + 594;\n+   Name_Binder                         : constant Name_Id := N + 595;\n+   Name_Binder_Driver                  : constant Name_Id := N + 596;\n+   Name_Body_Suffix                    : constant Name_Id := N + 597;\n+   Name_Builder                        : constant Name_Id := N + 598;\n+   Name_Compiler                       : constant Name_Id := N + 599;\n+   Name_Compiler_Driver                : constant Name_Id := N + 600;\n+   Name_Compiler_Kind                  : constant Name_Id := N + 601;\n+   Name_Compute_Dependency             : constant Name_Id := N + 602;\n+   Name_Cross_Reference                : constant Name_Id := N + 603;\n+   Name_Default_Linker                 : constant Name_Id := N + 604;\n+   Name_Default_Switches               : constant Name_Id := N + 605;\n+   Name_Dependency_Option              : constant Name_Id := N + 606;\n+   Name_Exec_Dir                       : constant Name_Id := N + 607;\n+   Name_Executable                     : constant Name_Id := N + 608;\n+   Name_Executable_Suffix              : constant Name_Id := N + 609;\n+   Name_Extends                        : constant Name_Id := N + 610;\n+   Name_Externally_Built               : constant Name_Id := N + 611;\n+   Name_Finder                         : constant Name_Id := N + 612;\n+   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 613;\n+   Name_Gnatls                         : constant Name_Id := N + 614;\n+   Name_Gnatstub                       : constant Name_Id := N + 615;\n+   Name_Implementation                 : constant Name_Id := N + 616;\n+   Name_Implementation_Exceptions      : constant Name_Id := N + 617;\n+   Name_Implementation_Suffix          : constant Name_Id := N + 618;\n+   Name_Include_Option                 : constant Name_Id := N + 619;\n+   Name_Language_Processing            : constant Name_Id := N + 620;\n+   Name_Languages                      : constant Name_Id := N + 621;\n+   Name_Library_Ali_Dir                : constant Name_Id := N + 622;\n+   Name_Library_Dir                    : constant Name_Id := N + 623;\n+   Name_Library_Auto_Init              : constant Name_Id := N + 624;\n+   Name_Library_GCC                    : constant Name_Id := N + 625;\n+   Name_Library_Interface              : constant Name_Id := N + 626;\n+   Name_Library_Kind                   : constant Name_Id := N + 627;\n+   Name_Library_Name                   : constant Name_Id := N + 628;\n+   Name_Library_Options                : constant Name_Id := N + 629;\n+   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 630;\n+   Name_Library_Src_Dir                : constant Name_Id := N + 631;\n+   Name_Library_Symbol_File            : constant Name_Id := N + 632;\n+   Name_Library_Symbol_Policy          : constant Name_Id := N + 633;\n+   Name_Library_Version                : constant Name_Id := N + 634;\n+   Name_Linker                         : constant Name_Id := N + 635;\n+   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 636;\n+   Name_Locally_Removed_Files          : constant Name_Id := N + 637;\n+   Name_Metrics                        : constant Name_Id := N + 638;\n+   Name_Naming                         : constant Name_Id := N + 639;\n+   Name_Object_Dir                     : constant Name_Id := N + 640;\n+   Name_Pretty_Printer                 : constant Name_Id := N + 641;\n+   Name_Project                        : constant Name_Id := N + 642;\n+   Name_Separate_Suffix                : constant Name_Id := N + 643;\n+   Name_Source_Dirs                    : constant Name_Id := N + 644;\n+   Name_Source_Files                   : constant Name_Id := N + 645;\n+   Name_Source_List_File               : constant Name_Id := N + 646;\n+   Name_Spec                           : constant Name_Id := N + 647;\n+   Name_Spec_Suffix                    : constant Name_Id := N + 648;\n+   Name_Specification                  : constant Name_Id := N + 649;\n+   Name_Specification_Exceptions       : constant Name_Id := N + 650;\n+   Name_Specification_Suffix           : constant Name_Id := N + 651;\n+   Name_Switches                       : constant Name_Id := N + 652;\n \n    --  Other miscellaneous names used in front end\n \n-   Name_Unaligned_Valid                : constant Name_Id := N + 652;\n+   Name_Unaligned_Valid                : constant Name_Id := N + 653;\n \n-   --  ----------------------------------------------------------------\n-   First_2005_Reserved_Word            : constant Name_Id := N + 653;\n-   Name_Interface                      : constant Name_Id := N + 653;\n-   Name_Overriding                     : constant Name_Id := N + 654;\n-   Name_Synchronized                   : constant Name_Id := N + 655;\n-   Last_2005_Reserved_Word             : constant Name_Id := N + 655;\n+   --  Ada 2005 reserved words\n+\n+   First_2005_Reserved_Word            : constant Name_Id := N + 654;\n+   Name_Interface                      : constant Name_Id := N + 654;\n+   Name_Overriding                     : constant Name_Id := N + 655;\n+   Name_Synchronized                   : constant Name_Id := N + 656;\n+   Last_2005_Reserved_Word             : constant Name_Id := N + 656;\n \n    subtype Ada_2005_Reserved_Words is\n      Name_Id range First_2005_Reserved_Word .. Last_2005_Reserved_Word;\n \n    --  Mark last defined name for consistency check in Snames body\n \n-   Last_Predefined_Name                : constant Name_Id := N + 655;\n+   Last_Predefined_Name                : constant Name_Id := N + 656;\n+\n+   ---------------------------------------\n+   -- Subtypes Defining Name Categories --\n+   ---------------------------------------\n \n    subtype Any_Operator_Name is Name_Id range\n      First_Operator_Name .. Last_Operator_Name;\n \n+   subtype Configuration_Pragma_Names is Name_Id range\n+     First_Pragma_Name .. Last_Configuration_Pragma_Name;\n+\n    ------------------------------\n    -- Attribute ID Definitions --\n    ------------------------------\n@@ -1246,6 +1255,7 @@ package Snames is\n       Pragma_Ada_83,\n       Pragma_Ada_95,\n       Pragma_Ada_05,\n+      Pragma_Ada_2005,\n       Pragma_Assertion_Policy,\n       Pragma_C_Pass_By_Copy,\n       Pragma_Compile_Time_Warning,\n@@ -1393,9 +1403,9 @@ package Snames is\n       Pragma_Volatile_Components,\n       Pragma_Weak_External,\n \n-      --  The following pragmas are on their own, out of order, because of\n-      --  the special processing required to deal with the fact that their\n-      --  names match existing attribute names.\n+      --  The following pragmas are on their own, out of order, because of the\n+      --  special processing required to deal with the fact that their names\n+      --  match existing attribute names.\n \n       Pragma_AST_Entry,\n       Pragma_Interface,\n@@ -1462,6 +1472,13 @@ package Snames is\n    --  name that has been specified by a Convention_Identifier pragma.\n    --  If neither case holds, returns False.\n \n+   function Is_Keyword_Name (N : Name_Id) return Boolean;\n+   --  Test to see if the name N is one of the (reserved) keyword names. This\n+   --  includes all the keywords defined in the Ada standard (taking into\n+   --  effect the Ada version). It also includes additional keywords in\n+   --  contexts where additional keywords have been added. For example, in the\n+   --  context of parsing project files, keywords such as PROJECT are included.\n+\n    function Is_Locking_Policy_Name (N : Name_Id) return Boolean;\n    --  Test to see if the name N is the name of a recognized locking policy\n "}, {"sha": "106473070f4b58ce4d6c460272980d7b27a0a248", "filename": "gcc/ada/snames.h", "status": "modified", "additions": 149, "deletions": 148, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsnames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2ea275783d8b96d51913913fe88b4f61ee0c9/gcc%2Fada%2Fsnames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.h?ref=68e2ea275783d8b96d51913913fe88b4f61ee0c9", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2005, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2006, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -215,152 +215,153 @@ extern unsigned char Get_Pragma_Id (int);\n #define  Pragma_Ada_83                        0\n #define  Pragma_Ada_95                        1\n #define  Pragma_Ada_05                        2\n-#define  Pragma_Assertion_Policy              3\n-#define  Pragma_C_Pass_By_Copy                4\n-#define  Pragma_Compile_Time_Warning          5\n-#define  Pragma_Component_Alignment           6\n-#define  Pragma_Convention_Identifier         7\n-#define  Pragma_Debug_Policy                  8\n-#define  Pragma_Detect_Blocking               9\n-#define  Pragma_Discard_Names                 10\n-#define  Pragma_Elaboration_Checks            11\n-#define  Pragma_Eliminate                     12\n-#define  Pragma_Explicit_Overriding           13\n-#define  Pragma_Extend_System                 14\n-#define  Pragma_Extensions_Allowed            15\n-#define  Pragma_External_Name_Casing          16\n-#define  Pragma_Float_Representation          17\n-#define  Pragma_Initialize_Scalars            18\n-#define  Pragma_Interrupt_State               19\n-#define  Pragma_License                       20\n-#define  Pragma_Locking_Policy                21\n-#define  Pragma_Long_Float                    22\n-#define  Pragma_No_Run_Time                   23\n-#define  Pragma_No_Strict_Aliasing            24\n-#define  Pragma_Normalize_Scalars             25\n-#define  Pragma_Polling                       26\n-#define  Pragma_Persistent_BSS                27\n-#define  Pragma_Profile                       28\n-#define  Pragma_Profile_Warnings              29\n-#define  Pragma_Propagate_Exceptions          30\n-#define  Pragma_Queuing_Policy                31\n-#define  Pragma_Ravenscar                     32\n-#define  Pragma_Restricted_Run_Time           33\n-#define  Pragma_Restrictions                  34\n-#define  Pragma_Restriction_Warnings          35\n-#define  Pragma_Reviewable                    36\n-#define  Pragma_Source_File_Name              37\n-#define  Pragma_Source_File_Name_Project      38\n-#define  Pragma_Style_Checks                  39\n-#define  Pragma_Suppress                      40\n-#define  Pragma_Suppress_Exception_Locations  41\n-#define  Pragma_Task_Dispatching_Policy       42\n-#define  Pragma_Universal_Data                43\n-#define  Pragma_Unsuppress                    44\n-#define  Pragma_Use_VADS_Size                 45\n-#define  Pragma_Validity_Checks               46\n-#define  Pragma_Warnings                      47\n-#define  Pragma_Abort_Defer                   48\n-#define  Pragma_All_Calls_Remote              49\n-#define  Pragma_Annotate                      50\n-#define  Pragma_Assert                        51\n-#define  Pragma_Asynchronous                  52\n-#define  Pragma_Atomic                        53\n-#define  Pragma_Atomic_Components             54\n-#define  Pragma_Attach_Handler                55\n-#define  Pragma_Comment                       56\n-#define  Pragma_Common_Object                 57\n-#define  Pragma_Complete_Representation       58\n-#define  Pragma_Complex_Representation        59\n-#define  Pragma_Controlled                    60\n-#define  Pragma_Convention                    61\n-#define  Pragma_CPP_Class                     62\n-#define  Pragma_CPP_Constructor               63\n-#define  Pragma_CPP_Virtual                   64\n-#define  Pragma_CPP_Vtable                    65\n-#define  Pragma_Debug                         66\n-#define  Pragma_Elaborate                     67\n-#define  Pragma_Elaborate_All                 68\n-#define  Pragma_Elaborate_Body                69\n-#define  Pragma_Export                        70\n-#define  Pragma_Export_Exception              71\n-#define  Pragma_Export_Function               72\n-#define  Pragma_Export_Object                 73\n-#define  Pragma_Export_Procedure              74\n-#define  Pragma_Export_Value                  75\n-#define  Pragma_Export_Valued_Procedure       76\n-#define  Pragma_External                      77\n-#define  Pragma_Finalize_Storage_Only         78\n-#define  Pragma_Ident                         79\n-#define  Pragma_Import                        80\n-#define  Pragma_Import_Exception              81\n-#define  Pragma_Import_Function               82\n-#define  Pragma_Import_Object                 83\n-#define  Pragma_Import_Procedure              84\n-#define  Pragma_Import_Valued_Procedure       85\n-#define  Pragma_Inline                        86\n-#define  Pragma_Inline_Always                 87\n-#define  Pragma_Inline_Generic                88\n-#define  Pragma_Inspection_Point              89\n-#define  Pragma_Interface_Name                90\n-#define  Pragma_Interrupt_Handler             91\n-#define  Pragma_Interrupt_Priority            92\n-#define  Pragma_Java_Constructor              93\n-#define  Pragma_Java_Interface                94\n-#define  Pragma_Keep_Names                    95\n-#define  Pragma_Link_With                     96\n-#define  Pragma_Linker_Alias                  97\n-#define  Pragma_Linker_Constructor            98\n-#define  Pragma_Linker_Destructor             99\n-#define  Pragma_Linker_Options                100\n-#define  Pragma_Linker_Section                101\n-#define  Pragma_List                          102\n-#define  Pragma_Machine_Attribute             103\n-#define  Pragma_Main                          104\n-#define  Pragma_Main_Storage                  105\n-#define  Pragma_Memory_Size                   106\n-#define  Pragma_No_Return                     107\n-#define  Pragma_Obsolescent                   108\n-#define  Pragma_Optimize                      109\n-#define  Pragma_Optional_Overriding           110\n-#define  Pragma_Pack                          111\n-#define  Pragma_Page                          112\n-#define  Pragma_Passive                       113\n-#define  Pragma_Preelaborate                  114\n-#define  Pragma_Preelaborate_05               115\n-#define  Pragma_Priority                      116\n-#define  Pragma_Psect_Object                  117\n-#define  Pragma_Pure                          118\n-#define  Pragma_Pure_05                       119\n-#define  Pragma_Pure_Function                 120\n-#define  Pragma_Remote_Call_Interface         121\n-#define  Pragma_Remote_Types                  122\n-#define  Pragma_Share_Generic                 123\n-#define  Pragma_Shared                        124\n-#define  Pragma_Shared_Passive                125\n-#define  Pragma_Source_Reference              126\n-#define  Pragma_Stream_Convert                127\n-#define  Pragma_Subtitle                      128\n-#define  Pragma_Suppress_All                  129\n-#define  Pragma_Suppress_Debug_Info           130\n-#define  Pragma_Suppress_Initialization       131\n-#define  Pragma_System_Name                   132\n-#define  Pragma_Task_Info                     133\n-#define  Pragma_Task_Name                     134\n-#define  Pragma_Task_Storage                  135\n-#define  Pragma_Thread_Body                   136\n-#define  Pragma_Time_Slice                    137\n-#define  Pragma_Title                         138\n-#define  Pragma_Unchecked_Union               139\n-#define  Pragma_Unimplemented_Unit            140\n-#define  Pragma_Unreferenced                  141\n-#define  Pragma_Unreserve_All_Interrupts      142\n-#define  Pragma_Volatile                      143\n-#define  Pragma_Volatile_Components           144\n-#define  Pragma_Weak_External                 145\n-#define  Pragma_AST_Entry                     146\n-#define  Pragma_Interface                     147\n-#define  Pragma_Storage_Size                  148\n-#define  Pragma_Storage_Unit                  149\n+#define  Pragma_Ada_2005                      3\n+#define  Pragma_Assertion_Policy              4\n+#define  Pragma_C_Pass_By_Copy                5\n+#define  Pragma_Compile_Time_Warning          6\n+#define  Pragma_Component_Alignment           7\n+#define  Pragma_Convention_Identifier         8\n+#define  Pragma_Debug_Policy                  9\n+#define  Pragma_Detect_Blocking               10\n+#define  Pragma_Discard_Names                 11\n+#define  Pragma_Elaboration_Checks            12\n+#define  Pragma_Eliminate                     13\n+#define  Pragma_Explicit_Overriding           14\n+#define  Pragma_Extend_System                 15\n+#define  Pragma_Extensions_Allowed            16\n+#define  Pragma_External_Name_Casing          17\n+#define  Pragma_Float_Representation          18\n+#define  Pragma_Initialize_Scalars            19\n+#define  Pragma_Interrupt_State               20\n+#define  Pragma_License                       21\n+#define  Pragma_Locking_Policy                22\n+#define  Pragma_Long_Float                    23\n+#define  Pragma_No_Run_Time                   24\n+#define  Pragma_No_Strict_Aliasing            25\n+#define  Pragma_Normalize_Scalars             26\n+#define  Pragma_Polling                       27\n+#define  Pragma_Persistent_BSS                28\n+#define  Pragma_Profile                       29\n+#define  Pragma_Profile_Warnings              30\n+#define  Pragma_Propagate_Exceptions          31\n+#define  Pragma_Queuing_Policy                32\n+#define  Pragma_Ravenscar                     33\n+#define  Pragma_Restricted_Run_Time           34\n+#define  Pragma_Restrictions                  35\n+#define  Pragma_Restriction_Warnings          36\n+#define  Pragma_Reviewable                    37\n+#define  Pragma_Source_File_Name              38\n+#define  Pragma_Source_File_Name_Project      39\n+#define  Pragma_Style_Checks                  40\n+#define  Pragma_Suppress                      41\n+#define  Pragma_Suppress_Exception_Locations  42\n+#define  Pragma_Task_Dispatching_Policy       43\n+#define  Pragma_Universal_Data                44\n+#define  Pragma_Unsuppress                    45\n+#define  Pragma_Use_VADS_Size                 46\n+#define  Pragma_Validity_Checks               47\n+#define  Pragma_Warnings                      48\n+#define  Pragma_Abort_Defer                   49\n+#define  Pragma_All_Calls_Remote              50\n+#define  Pragma_Annotate                      51\n+#define  Pragma_Assert                        52\n+#define  Pragma_Asynchronous                  53\n+#define  Pragma_Atomic                        54\n+#define  Pragma_Atomic_Components             55\n+#define  Pragma_Attach_Handler                56\n+#define  Pragma_Comment                       57\n+#define  Pragma_Common_Object                 58\n+#define  Pragma_Complete_Representation       59\n+#define  Pragma_Complex_Representation        60\n+#define  Pragma_Controlled                    61\n+#define  Pragma_Convention                    62\n+#define  Pragma_CPP_Class                     63\n+#define  Pragma_CPP_Constructor               64\n+#define  Pragma_CPP_Virtual                   65\n+#define  Pragma_CPP_Vtable                    66\n+#define  Pragma_Debug                         67\n+#define  Pragma_Elaborate                     68\n+#define  Pragma_Elaborate_All                 69\n+#define  Pragma_Elaborate_Body                70\n+#define  Pragma_Export                        71\n+#define  Pragma_Export_Exception              72\n+#define  Pragma_Export_Function               73\n+#define  Pragma_Export_Object                 74\n+#define  Pragma_Export_Procedure              75\n+#define  Pragma_Export_Value                  76\n+#define  Pragma_Export_Valued_Procedure       77\n+#define  Pragma_External                      78\n+#define  Pragma_Finalize_Storage_Only         79\n+#define  Pragma_Ident                         80\n+#define  Pragma_Import                        81\n+#define  Pragma_Import_Exception              82\n+#define  Pragma_Import_Function               83\n+#define  Pragma_Import_Object                 84\n+#define  Pragma_Import_Procedure              85\n+#define  Pragma_Import_Valued_Procedure       86\n+#define  Pragma_Inline                        87\n+#define  Pragma_Inline_Always                 88\n+#define  Pragma_Inline_Generic                89\n+#define  Pragma_Inspection_Point              90\n+#define  Pragma_Interface_Name                91\n+#define  Pragma_Interrupt_Handler             92\n+#define  Pragma_Interrupt_Priority            93\n+#define  Pragma_Java_Constructor              94\n+#define  Pragma_Java_Interface                95\n+#define  Pragma_Keep_Names                    96\n+#define  Pragma_Link_With                     97\n+#define  Pragma_Linker_Alias                  98\n+#define  Pragma_Linker_Constructor            99\n+#define  Pragma_Linker_Destructor             100\n+#define  Pragma_Linker_Options                101\n+#define  Pragma_Linker_Section                102\n+#define  Pragma_List                          103\n+#define  Pragma_Machine_Attribute             104\n+#define  Pragma_Main                          105\n+#define  Pragma_Main_Storage                  106\n+#define  Pragma_Memory_Size                   107\n+#define  Pragma_No_Return                     108\n+#define  Pragma_Obsolescent                   109\n+#define  Pragma_Optimize                      110\n+#define  Pragma_Optional_Overriding           111\n+#define  Pragma_Pack                          112\n+#define  Pragma_Page                          113\n+#define  Pragma_Passive                       114\n+#define  Pragma_Preelaborate                  115\n+#define  Pragma_Preelaborate_05               116\n+#define  Pragma_Priority                      117\n+#define  Pragma_Psect_Object                  118\n+#define  Pragma_Pure                          119\n+#define  Pragma_Pure_05                       120\n+#define  Pragma_Pure_Function                 121\n+#define  Pragma_Remote_Call_Interface         122\n+#define  Pragma_Remote_Types                  123\n+#define  Pragma_Share_Generic                 124\n+#define  Pragma_Shared                        125\n+#define  Pragma_Shared_Passive                126\n+#define  Pragma_Source_Reference              127\n+#define  Pragma_Stream_Convert                128\n+#define  Pragma_Subtitle                      129\n+#define  Pragma_Suppress_All                  130\n+#define  Pragma_Suppress_Debug_Info           131\n+#define  Pragma_Suppress_Initialization       132\n+#define  Pragma_System_Name                   133\n+#define  Pragma_Task_Info                     134\n+#define  Pragma_Task_Name                     135\n+#define  Pragma_Task_Storage                  136\n+#define  Pragma_Thread_Body                   137\n+#define  Pragma_Time_Slice                    138\n+#define  Pragma_Title                         139\n+#define  Pragma_Unchecked_Union               140\n+#define  Pragma_Unimplemented_Unit            141\n+#define  Pragma_Unreferenced                  142\n+#define  Pragma_Unreserve_All_Interrupts      143\n+#define  Pragma_Volatile                      144\n+#define  Pragma_Volatile_Components           145\n+#define  Pragma_Weak_External                 146\n+#define  Pragma_AST_Entry                     147\n+#define  Pragma_Interface                     148\n+#define  Pragma_Storage_Size                  149\n+#define  Pragma_Storage_Unit                  150\n \n /* End of snames.h (C version of Snames package spec) */"}]}