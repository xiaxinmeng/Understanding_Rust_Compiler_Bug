{"sha": "68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhmOTMyYzQ0MzJiOWI4MDZkNTg3ODFhYTU2YWQ3YjNiYTVlODJmOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-08-18T12:37:53Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-08-18T12:37:53Z"}, "message": "tm.texi.in (TARGET_RTX_COSTS): Add an opno paramter.\n\ngcc/\n\t* doc/tm.texi.in (TARGET_RTX_COSTS): Add an opno paramter.\n\t* doc/tm.texi: Regenerate.\n\t* target.def (rtx_costs): Add an opno parameter.\n\t* hooks.h (hook_bool_rtx_int_int_intp_bool_false): Replace with...\n\t(hook_bool_rtx_int_int_int_intp_bool_false): ...this.\n\t* hooks.c (hook_bool_rtx_int_int_intp_bool_false): Replace with...\n\t(hook_bool_rtx_int_int_int_intp_bool_false): ...this.\n\t* cse.c (COST_IN): Add an opno parameter.\n\t(notreg_cost): Likewise.  Update call to rtx_cost.\n\t(COST, fold_rtx): Update accordingly.\n\t* dojump.c (prefer_and_bit_test): Update call to rtx_cost.\n\t* expmed.c (emit_store_flag): Likewise.\n\t* optabs.c (avoid_expensive_constant): Add an opno parameter.\n\tUpdate call to rtx_cost.\n\t(expand_binop_directly, expand_binop): Likewise.\n\t(expand_twoval_binop, prepare_cmp_insn): Likewise.\n\t* rtl.h (rtx_cost, get_full_rtx_cost): Add opno parameters.\n\t(set_src_cost, get_full_set_src_cost): Update accordingly.\n\t* rtlanal.c (rtx_cost): Add an opno parameter.  Update call\n\tto target hook.\n\t(get_full_rtx_cost): Add an opno paramter.  Update calls to rtx_cost.\n\t(default_adress_cost): Update calls to rtx_cost.\n\n\t* config/arm/arm.c (arm_rtx_costs_1, arm_size_rtx_costs)\n\t(arm_slowmul_rtx_costs): Adjust calls to rtx_cost.\n\t(arm_rtx_costs): Add an opno parameter.\n\t* config/alpha/alpha.c (alpha_rtx_costs): Add an opno parameter and\n\tadjust any recursive rtx-cost calls.\n\t* config/avr/avr.c (avr_operand_rtx_cost, avr_rtx_costs): Likewise.\n\t* config/bfin/bfin.c (bfin_rtx_costs): Likewise.\n\t* config/c6x/c6x.c (c6x_rtx_costs): Likewise.\n\t* config/cris/cris.c (cris_rtx_costs): Likewise.\n\t* config/frv/frv.c (frv_rtx_costs): Likewise.\n\t* config/h8300/h8300.c (h8300_rtx_costs): Likewise.\n\t* config/i386/i386.c (ix86_rtx_costs): Likewise.\n\t* config/ia64/ia64.c (ia64_rtx_costs): Likewise.\n\t* config/iq2000/iq2000.c (iq2000_rtx_costs): Likewise.\n\t* config/lm32/lm32.c (lm32_rtx_costs): Likewise.\n\t* config/m32c/m32c.c (m32c_rtx_costs): Likewise.\n\t* config/m32r/m32r.c (m32r_rtx_costs): Likewise.\n\t* config/m68k/m68k.c (m68k_rtx_costs): Likewise.\n\t* config/mcore/mcore.c (mcore_rtx_costs): Likewise.\n\t* config/mep/mep.c (mep_rtx_cost): Likewise.\n\t* config/microblaze/microblaze.c (microblaze_rtx_costs): Likewise.\n\t* config/mips/mips.c (mips_binary_cost): Update call to rtx_cost.\n\t(mips_zero_extend_cost): Add an opno parameter.\n\t* config/mmix/mmix.c (mmix_rtx_costs): Likewise.\n\t* config/mn10300/mn10300.c (mn10300_address_cost): Update call\n\tto rtx_cost.\n\t(mn10300_rtx_costs): Add an opno parameter and adjust any recursive\n\trtx-cost calls.\n\t* config/pa/pa.c (hppa_rtx_costs): Likewise.\n\t* config/pdp11/pdp11.c (pdp11_rtx_costs): Likewise.\n\t* config/picochip/picochip.c (picochip_rtx_costs): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_rtx_costs): Likewise.\n\t(rs6000_debug_rtx_costs): Likewise.\n\t* config/s390/s390.c (s390_rtx_costs): Likewise.\n\t* config/score/score-protos.h (score_rtx_costs): Likewise.\n\t* config/score/score.c (score_rtx_costs): Likewise.\n\t* config/sh/sh.c (andcosts): Update call to rtx_cost.\n\t(sh_rtx_costs): Add an opno parameter.\n\t* config/sparc/sparc.c (sparc_rtx_costs): Likewise.\n\t* config/spu/spu.c (spu_rtx_costs): Likewise.\n\t* config/stormy16/stormy16.c (xstormy16_rtx_costs): Likewise.\n\t* config/v850/v850.c (v850_rtx_costs): Likewise.\n\t* config/vax/vax.c (vax_rtx_costs): Likewise.\n\t* config/xtensa/xtensa.c (xtensa_rtx_costs): Likewise.\n\nFrom-SVN: r177852", "tree": {"sha": "32eb4ba0348b5f9ebbe8e13117af0c1d2e9f4d87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32eb4ba0348b5f9ebbe8e13117af0c1d2e9f4d87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/comments", "author": null, "committer": null, "parents": [{"sha": "5e8f01f434e547d21e6be3f44b2f5d9090fdc9db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e8f01f434e547d21e6be3f44b2f5d9090fdc9db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e8f01f434e547d21e6be3f44b2f5d9090fdc9db"}], "stats": {"total": 667, "additions": 403, "deletions": 264}, "files": [{"sha": "27cc3887a33a44bad8b05b4416a5e41e71d9e0d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -1,3 +1,73 @@\n+2011-08-18  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* doc/tm.texi.in (TARGET_RTX_COSTS): Add an opno paramter.\n+\t* doc/tm.texi: Regenerate.\n+\t* target.def (rtx_costs): Add an opno parameter.\n+\t* hooks.h (hook_bool_rtx_int_int_intp_bool_false): Replace with...\n+\t(hook_bool_rtx_int_int_int_intp_bool_false): ...this.\n+\t* hooks.c (hook_bool_rtx_int_int_intp_bool_false): Replace with...\n+\t(hook_bool_rtx_int_int_int_intp_bool_false): ...this.\n+\t* cse.c (COST_IN): Add an opno parameter.\n+\t(notreg_cost): Likewise.  Update call to rtx_cost.\n+\t(COST, fold_rtx): Update accordingly.\n+\t* dojump.c (prefer_and_bit_test): Update call to rtx_cost.\n+\t* expmed.c (emit_store_flag): Likewise.\n+\t* optabs.c (avoid_expensive_constant): Add an opno parameter.\n+\tUpdate call to rtx_cost.\n+\t(expand_binop_directly, expand_binop): Likewise.\n+\t(expand_twoval_binop, prepare_cmp_insn): Likewise.\n+\t* rtl.h (rtx_cost, get_full_rtx_cost): Add opno parameters.\n+\t(set_src_cost, get_full_set_src_cost): Update accordingly.\n+\t* rtlanal.c (rtx_cost): Add an opno parameter.  Update call\n+\tto target hook.\n+\t(get_full_rtx_cost): Add an opno paramter.  Update calls to rtx_cost.\n+\t(default_adress_cost): Update calls to rtx_cost.\n+\n+\t* config/arm/arm.c (arm_rtx_costs_1, arm_size_rtx_costs)\n+\t(arm_slowmul_rtx_costs): Adjust calls to rtx_cost.\n+\t(arm_rtx_costs): Add an opno parameter.\n+\t* config/alpha/alpha.c (alpha_rtx_costs): Add an opno parameter and\n+\tadjust any recursive rtx-cost calls.\n+\t* config/avr/avr.c (avr_operand_rtx_cost, avr_rtx_costs): Likewise.\n+\t* config/bfin/bfin.c (bfin_rtx_costs): Likewise.\n+\t* config/c6x/c6x.c (c6x_rtx_costs): Likewise.\n+\t* config/cris/cris.c (cris_rtx_costs): Likewise.\n+\t* config/frv/frv.c (frv_rtx_costs): Likewise.\n+\t* config/h8300/h8300.c (h8300_rtx_costs): Likewise.\n+\t* config/i386/i386.c (ix86_rtx_costs): Likewise.\n+\t* config/ia64/ia64.c (ia64_rtx_costs): Likewise.\n+\t* config/iq2000/iq2000.c (iq2000_rtx_costs): Likewise.\n+\t* config/lm32/lm32.c (lm32_rtx_costs): Likewise.\n+\t* config/m32c/m32c.c (m32c_rtx_costs): Likewise.\n+\t* config/m32r/m32r.c (m32r_rtx_costs): Likewise.\n+\t* config/m68k/m68k.c (m68k_rtx_costs): Likewise.\n+\t* config/mcore/mcore.c (mcore_rtx_costs): Likewise.\n+\t* config/mep/mep.c (mep_rtx_cost): Likewise.\n+\t* config/microblaze/microblaze.c (microblaze_rtx_costs): Likewise.\n+\t* config/mips/mips.c (mips_binary_cost): Update call to rtx_cost.\n+\t(mips_zero_extend_cost): Add an opno parameter.\n+\t* config/mmix/mmix.c (mmix_rtx_costs): Likewise.\n+\t* config/mn10300/mn10300.c (mn10300_address_cost): Update call\n+\tto rtx_cost.\n+\t(mn10300_rtx_costs): Add an opno parameter and adjust any recursive\n+\trtx-cost calls.\n+\t* config/pa/pa.c (hppa_rtx_costs): Likewise.\n+\t* config/pdp11/pdp11.c (pdp11_rtx_costs): Likewise.\n+\t* config/picochip/picochip.c (picochip_rtx_costs): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_rtx_costs): Likewise.\n+\t(rs6000_debug_rtx_costs): Likewise.\n+\t* config/s390/s390.c (s390_rtx_costs): Likewise.\n+\t* config/score/score-protos.h (score_rtx_costs): Likewise.\n+\t* config/score/score.c (score_rtx_costs): Likewise.\n+\t* config/sh/sh.c (andcosts): Update call to rtx_cost.\n+\t(sh_rtx_costs): Add an opno parameter.\n+\t* config/sparc/sparc.c (sparc_rtx_costs): Likewise.\n+\t* config/spu/spu.c (spu_rtx_costs): Likewise.\n+\t* config/stormy16/stormy16.c (xstormy16_rtx_costs): Likewise.\n+\t* config/v850/v850.c (v850_rtx_costs): Likewise.\n+\t* config/vax/vax.c (vax_rtx_costs): Likewise.\n+\t* config/xtensa/xtensa.c (xtensa_rtx_costs): Likewise.\n+\n 2011-08-18  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* rtl.h (set_src_cost, get_full_set_src_cost): New functions."}, {"sha": "e195df5c0d6df8d8bb05563364238fd1601c7c84", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -1154,7 +1154,7 @@ alpha_legitimize_reload_address (rtx x,\n    scanned.  In either case, *TOTAL contains the cost result.  */\n \n static bool\n-alpha_rtx_costs (rtx x, int code, int outer_code, int *total,\n+alpha_rtx_costs (rtx x, int code, int outer_code, int opno, int *total,\n \t\t bool speed)\n {\n   enum machine_mode mode = GET_MODE (x);\n@@ -1222,9 +1222,9 @@ alpha_rtx_costs (rtx x, int code, int outer_code, int *total,\n \t       && const48_operand (XEXP (XEXP (x, 0), 1), VOIDmode))\n \t{\n \t  *total = (rtx_cost (XEXP (XEXP (x, 0), 0),\n-\t\t\t      (enum rtx_code) outer_code, speed)\n+\t\t\t      (enum rtx_code) outer_code, opno, speed)\n \t\t    + rtx_cost (XEXP (x, 1),\n-\t\t\t\t(enum rtx_code) outer_code, speed)\n+\t\t\t\t(enum rtx_code) outer_code, opno, speed)\n \t\t    + COSTS_N_INSNS (1));\n \t  return true;\n \t}"}, {"sha": "b32e863909a817a63bdbbfb25373d35886ee231e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -151,7 +151,7 @@ static bool arm_slowmul_rtx_costs (rtx, enum rtx_code, enum rtx_code, int *, boo\n static bool arm_fastmul_rtx_costs (rtx, enum rtx_code, enum rtx_code, int *, bool);\n static bool arm_xscale_rtx_costs (rtx, enum rtx_code, enum rtx_code, int *, bool);\n static bool arm_9e_rtx_costs (rtx, enum rtx_code, enum rtx_code, int *, bool);\n-static bool arm_rtx_costs (rtx, int, int, int *, bool);\n+static bool arm_rtx_costs (rtx, int, int, int, int *, bool);\n static int arm_address_cost (rtx, bool);\n static bool arm_memory_load_p (rtx);\n static bool arm_cirrus_insn_p (rtx);\n@@ -6881,7 +6881,7 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n       if (GET_CODE (XEXP (x, 1)) == REG)\n \t*total = COSTS_N_INSNS (1); /* Need to subtract from 32 */\n       else if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n-\t*total = rtx_cost (XEXP (x, 1), code, speed);\n+\t*total = rtx_cost (XEXP (x, 1), code, 1, speed);\n \n       /* Fall through */\n     case ROTATERT:\n@@ -6893,7 +6893,7 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \n       /* Fall through */\n     case ASHIFT: case LSHIFTRT: case ASHIFTRT:\n-      *total += rtx_cost (XEXP (x, 0), code, speed);\n+      *total += rtx_cost (XEXP (x, 0), code, 0, speed);\n       if (mode == DImode)\n \t{\n \t  *total += COSTS_N_INSNS (3);\n@@ -6916,14 +6916,14 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \t  if (GET_CODE (XEXP (x, 0)) == CONST_INT\n \t      && const_ok_for_arm (INTVAL (XEXP (x, 0))))\n \t    {\n-\t      *total += rtx_cost (XEXP (x, 1), code, speed);\n+\t      *total += rtx_cost (XEXP (x, 1), code, 1, speed);\n \t      return true;\n \t    }\n \n \t  if (GET_CODE (XEXP (x, 1)) == CONST_INT\n \t      && const_ok_for_arm (INTVAL (XEXP (x, 1))))\n \t    {\n-\t      *total += rtx_cost (XEXP (x, 0), code, speed);\n+\t      *total += rtx_cost (XEXP (x, 0), code, 0, speed);\n \t      return true;\n \t    }\n \n@@ -6940,14 +6940,14 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \t      if (GET_CODE (XEXP (x, 0)) == CONST_DOUBLE\n \t\t  && arm_const_double_rtx (XEXP (x, 0)))\n \t\t{\n-\t\t  *total += rtx_cost (XEXP (x, 1), code, speed);\n+\t\t  *total += rtx_cost (XEXP (x, 1), code, 1, speed);\n \t\t  return true;\n \t\t}\n \n \t      if (GET_CODE (XEXP (x, 1)) == CONST_DOUBLE\n \t\t  && arm_const_double_rtx (XEXP (x, 1)))\n \t\t{\n-\t\t  *total += rtx_cost (XEXP (x, 0), code, speed);\n+\t\t  *total += rtx_cost (XEXP (x, 0), code, 0, speed);\n \t\t  return true;\n \t\t}\n \n@@ -6961,7 +6961,7 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n       if (GET_CODE (XEXP (x, 0)) == CONST_INT\n \t  && const_ok_for_arm (INTVAL (XEXP (x, 0))))\n \t{\n-\t  *total += rtx_cost (XEXP (x, 1), code, speed);\n+\t  *total += rtx_cost (XEXP (x, 1), code, 1, speed);\n \t  return true;\n \t}\n \n@@ -6970,32 +6970,32 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \t  || subcode == LSHIFTRT\n \t  || subcode == ROTATE || subcode == ROTATERT)\n \t{\n-\t  *total += rtx_cost (XEXP (x, 0), code, speed);\n-\t  *total += rtx_cost (XEXP (XEXP (x, 1), 0), subcode, speed);\n+\t  *total += rtx_cost (XEXP (x, 0), code, 0, speed);\n+\t  *total += rtx_cost (XEXP (XEXP (x, 1), 0), subcode, 0, speed);\n \t  return true;\n \t}\n \n       /* A shift as a part of RSB costs no more than RSB itself.  */\n       if (GET_CODE (XEXP (x, 0)) == MULT\n \t  && power_of_two_operand (XEXP (XEXP (x, 0), 1), SImode))\n \t{\n-\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), code, speed);\n-\t  *total += rtx_cost (XEXP (x, 1), code, speed);\n+\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), code, 0, speed);\n+\t  *total += rtx_cost (XEXP (x, 1), code, 1, speed);\n \t  return true;\n \t}\n \n       if (subcode == MULT\n \t  && power_of_two_operand (XEXP (XEXP (x, 1), 1), SImode))\n \t{\n-\t  *total += rtx_cost (XEXP (x, 0), code, speed);\n-\t  *total += rtx_cost (XEXP (XEXP (x, 1), 0), subcode, speed);\n+\t  *total += rtx_cost (XEXP (x, 0), code, 0, speed);\n+\t  *total += rtx_cost (XEXP (XEXP (x, 1), 0), subcode, 0, speed);\n \t  return true;\n \t}\n \n       if (GET_RTX_CLASS (GET_CODE (XEXP (x, 1))) == RTX_COMPARE\n \t  || GET_RTX_CLASS (GET_CODE (XEXP (x, 1))) == RTX_COMM_COMPARE)\n \t{\n-\t  *total = COSTS_N_INSNS (1) + rtx_cost (XEXP (x, 0), code, speed);\n+\t  *total = COSTS_N_INSNS (1) + rtx_cost (XEXP (x, 0), code, 0, speed);\n \t  if (GET_CODE (XEXP (XEXP (x, 1), 0)) == REG\n \t      && REGNO (XEXP (XEXP (x, 1), 0)) != CC_REGNUM)\n \t    *total += COSTS_N_INSNS (1);\n@@ -7012,8 +7012,8 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \t{\n \t  *total = COSTS_N_INSNS (1);\n \t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), GET_CODE (XEXP (x, 0)),\n-\t\t\t      speed);\n-\t  *total += rtx_cost (XEXP (x, 1), code, speed);\n+\t\t\t      0, speed);\n+\t  *total += rtx_cost (XEXP (x, 1), code, 1, speed);\n \t  return true;\n \t}\n \n@@ -7037,7 +7037,7 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \t      if (GET_CODE (XEXP (x, 1)) == CONST_DOUBLE\n \t\t  && arm_const_double_rtx (XEXP (x, 1)))\n \t\t{\n-\t\t  *total += rtx_cost (XEXP (x, 0), code, speed);\n+\t\t  *total += rtx_cost (XEXP (x, 0), code, 0, speed);\n \t\t  return true;\n \t\t}\n \n@@ -7051,7 +7051,7 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n       if (GET_RTX_CLASS (GET_CODE (XEXP (x, 0))) == RTX_COMPARE\n \t  || GET_RTX_CLASS (GET_CODE (XEXP (x, 0))) == RTX_COMM_COMPARE)\n \t{\n-\t  *total = COSTS_N_INSNS (1) + rtx_cost (XEXP (x, 1), code, speed);\n+\t  *total = COSTS_N_INSNS (1) + rtx_cost (XEXP (x, 1), code, 1, speed);\n \t  if (GET_CODE (XEXP (XEXP (x, 0), 0)) == REG\n \t      && REGNO (XEXP (XEXP (x, 0), 0)) != CC_REGNUM)\n \t    *total += COSTS_N_INSNS (1);\n@@ -7078,7 +7078,7 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \t  if (GET_CODE (XEXP (x, 1)) == CONST_INT\n \t      && const_ok_for_op (INTVAL (XEXP (x, 1)), code))\n \t    {\n-\t      *total += rtx_cost (XEXP (x, 0), code, speed);\n+\t      *total += rtx_cost (XEXP (x, 0), code, 0, speed);\n \t      return true;\n \t    }\n \n@@ -7089,24 +7089,24 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n       if (GET_CODE (XEXP (x, 1)) == CONST_INT\n \t  && const_ok_for_op (INTVAL (XEXP (x, 1)), code))\n \t{\n-\t  *total += rtx_cost (XEXP (x, 0), code, speed);\n+\t  *total += rtx_cost (XEXP (x, 0), code, 0, speed);\n \t  return true;\n \t}\n       subcode = GET_CODE (XEXP (x, 0));\n       if (subcode == ASHIFT || subcode == ASHIFTRT\n \t  || subcode == LSHIFTRT\n \t  || subcode == ROTATE || subcode == ROTATERT)\n \t{\n-\t  *total += rtx_cost (XEXP (x, 1), code, speed);\n-\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), subcode, speed);\n+\t  *total += rtx_cost (XEXP (x, 1), code, 1, speed);\n+\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), subcode, 0, speed);\n \t  return true;\n \t}\n \n       if (subcode == MULT\n \t  && power_of_two_operand (XEXP (XEXP (x, 0), 1), SImode))\n \t{\n-\t  *total += rtx_cost (XEXP (x, 1), code, speed);\n-\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), subcode, speed);\n+\t  *total += rtx_cost (XEXP (x, 1), code, 1, speed);\n+\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), subcode, 0, speed);\n \t  return true;\n \t}\n \n@@ -7132,7 +7132,7 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \t  && (GET_CODE (XEXP (XEXP (XEXP (x, 0), 0), 0)) == ZERO_EXTEND\n \t      || GET_CODE (XEXP (XEXP (XEXP (x, 0), 0), 0)) == SIGN_EXTEND))\n \t{\n-\t  *total = rtx_cost (XEXP (XEXP (x, 0), 0), LSHIFTRT, speed);\n+\t  *total = rtx_cost (XEXP (XEXP (x, 0), 0), LSHIFTRT, 0, speed);\n \t  return true;\n \t}\n       *total = COSTS_N_INSNS (2); /* Plus the cost of the MULT */\n@@ -7164,11 +7164,11 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \t      || (subcode == MULT\n \t\t  && power_of_two_operand (XEXP (XEXP (x, 0), 1), SImode)))\n \t    {\n-\t      *total += rtx_cost (XEXP (XEXP (x, 0), 0), subcode, speed);\n+\t      *total += rtx_cost (XEXP (XEXP (x, 0), 0), subcode, 0, speed);\n \t      /* Register shifts cost an extra cycle.  */\n \t      if (GET_CODE (XEXP (XEXP (x, 0), 1)) != CONST_INT)\n \t\t*total += COSTS_N_INSNS (1) + rtx_cost (XEXP (XEXP (x, 0), 1),\n-\t\t\t\t\t\t\tsubcode, speed);\n+\t\t\t\t\t\t\tsubcode, 1, speed);\n \t      return true;\n \t    }\n \t}\n@@ -7189,14 +7189,14 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \t    && GET_CODE (XEXP (operand, 0)) == REG\n \t    && REGNO (XEXP (operand, 0)) == CC_REGNUM))\n \t*total += COSTS_N_INSNS (1);\n-      *total += (rtx_cost (XEXP (x, 1), code, speed)\n-\t\t + rtx_cost (XEXP (x, 2), code, speed));\n+      *total += (rtx_cost (XEXP (x, 1), code, 1, speed)\n+\t\t + rtx_cost (XEXP (x, 2), code, 2, speed));\n       return true;\n \n     case NE:\n       if (mode == SImode && XEXP (x, 1) == const0_rtx)\n \t{\n-\t  *total = COSTS_N_INSNS (2) + rtx_cost (XEXP (x, 0), code, speed);\n+\t  *total = COSTS_N_INSNS (2) + rtx_cost (XEXP (x, 0), code, 0, speed);\n \t  return true;\n \t}\n       goto scc_insn;\n@@ -7205,7 +7205,7 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n       if ((GET_CODE (XEXP (x, 0)) != REG || REGNO (XEXP (x, 0)) != CC_REGNUM)\n \t  && mode == SImode && XEXP (x, 1) == const0_rtx)\n \t{\n-\t  *total = COSTS_N_INSNS (2) + rtx_cost (XEXP (x, 0), code, speed);\n+\t  *total = COSTS_N_INSNS (2) + rtx_cost (XEXP (x, 0), code, 0, speed);\n \t  return true;\n \t}\n       goto scc_insn;\n@@ -7214,7 +7214,7 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n       if ((GET_CODE (XEXP (x, 0)) != REG || REGNO (XEXP (x, 0)) != CC_REGNUM)\n \t  && mode == SImode && XEXP (x, 1) == const0_rtx)\n \t{\n-\t  *total = COSTS_N_INSNS (1) + rtx_cost (XEXP (x, 0), code, speed);\n+\t  *total = COSTS_N_INSNS (1) + rtx_cost (XEXP (x, 0), code, 0, speed);\n \t  return true;\n \t}\n       goto scc_insn;\n@@ -7255,7 +7255,7 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n       if (GET_CODE (XEXP (x, 1)) == CONST_INT\n \t  && const_ok_for_op (INTVAL (XEXP (x, 1)), code))\n \t{\n-\t  *total += rtx_cost (XEXP (x, 0), code, speed);\n+\t  *total += rtx_cost (XEXP (x, 0), code, 0, speed);\n \t  return true;\n \t}\n \n@@ -7264,16 +7264,16 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \t  || subcode == LSHIFTRT\n \t  || subcode == ROTATE || subcode == ROTATERT)\n \t{\n-\t  *total += rtx_cost (XEXP (x, 1), code, speed);\n-\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), subcode, speed);\n+\t  *total += rtx_cost (XEXP (x, 1), code, 1, speed);\n+\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), subcode, 0, speed);\n \t  return true;\n \t}\n \n       if (subcode == MULT\n \t  && power_of_two_operand (XEXP (XEXP (x, 0), 1), SImode))\n \t{\n-\t  *total += rtx_cost (XEXP (x, 1), code, speed);\n-\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), subcode, speed);\n+\t  *total += rtx_cost (XEXP (x, 1), code, 1, speed);\n+\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), subcode, 0, speed);\n \t  return true;\n \t}\n       \n@@ -7283,10 +7283,10 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n     case UMAX:\n     case SMIN:\n     case SMAX:\n-      *total = COSTS_N_INSNS (2) + rtx_cost (XEXP (x, 0), code, speed);\n+      *total = COSTS_N_INSNS (2) + rtx_cost (XEXP (x, 0), code, 0, speed);\n       if (GET_CODE (XEXP (x, 1)) != CONST_INT\n \t  || !const_ok_for_arm (INTVAL (XEXP (x, 1))))\n-\t*total += rtx_cost (XEXP (x, 1), code, speed);\n+\t*total += rtx_cost (XEXP (x, 1), code, 1, speed);\n       return true;\n \n     case ABS:\n@@ -7363,7 +7363,7 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \n     case ZERO_EXTRACT:\n     case SIGN_EXTRACT:\n-      *total = COSTS_N_INSNS (1) + rtx_cost (XEXP (x, 0), code, speed);\n+      *total = COSTS_N_INSNS (1) + rtx_cost (XEXP (x, 0), code, 0, speed);\n       return true;\n \n     case CONST_INT:\n@@ -7388,7 +7388,7 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \n     case LO_SUM:\n       *total = COSTS_N_INSNS (1);\n-      *total += rtx_cost (XEXP (x, 0), code, speed);\n+      *total += rtx_cost (XEXP (x, 0), code, 0, speed);\n       return true;\n \n     case CONST_DOUBLE:\n@@ -7574,7 +7574,7 @@ arm_size_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer_code,\n     case ROTATE:\n       if (mode == SImode && GET_CODE (XEXP (x, 1)) == REG)\n \t{\n-\t  *total = COSTS_N_INSNS (2) + rtx_cost (XEXP (x, 0), code, false);\n+\t  *total = COSTS_N_INSNS (2) + rtx_cost (XEXP (x, 0), code, 0, false);\n \t  return true;\n \t}\n       /* Fall through */\n@@ -7584,15 +7584,15 @@ arm_size_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer_code,\n     case ASHIFTRT:\n       if (mode == DImode && GET_CODE (XEXP (x, 1)) == CONST_INT)\n \t{\n-\t  *total = COSTS_N_INSNS (3) + rtx_cost (XEXP (x, 0), code, false);\n+\t  *total = COSTS_N_INSNS (3) + rtx_cost (XEXP (x, 0), code, 0, false);\n \t  return true;\n \t}\n       else if (mode == SImode)\n \t{\n-\t  *total = COSTS_N_INSNS (1) + rtx_cost (XEXP (x, 0), code, false);\n+\t  *total = COSTS_N_INSNS (1) + rtx_cost (XEXP (x, 0), code, 0, false);\n \t  /* Slightly disparage register shifts, but not by much.  */\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n-\t    *total += 1 + rtx_cost (XEXP (x, 1), code, false);\n+\t    *total += 1 + rtx_cost (XEXP (x, 1), code, 1, false);\n \t  return true;\n \t}\n \n@@ -7644,8 +7644,8 @@ arm_size_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer_code,\n \t  && power_of_two_operand (XEXP (XEXP (x, 0), 1), SImode))\n \t{\n \t  *total = COSTS_N_INSNS (TARGET_THUMB2 ? 2 : 1);\n-\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), code, false);\n-\t  *total += rtx_cost (XEXP (x, 1), code, false);\n+\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), code, 0, false);\n+\t  *total += rtx_cost (XEXP (x, 1), code, 1, false);\n \t  return true;\n \t}\n \n@@ -7757,8 +7757,8 @@ arm_size_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer_code,\n \n /* RTX costs when optimizing for size.  */\n static bool\n-arm_rtx_costs (rtx x, int code, int outer_code, int *total,\n-\t       bool speed)\n+arm_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n+\t       int *total, bool speed)\n {\n   if (!speed)\n     return arm_size_rtx_costs (x, (enum rtx_code) code,\n@@ -7811,7 +7811,7 @@ arm_slowmul_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer_code,\n \t    }\n \n \t  *total = COSTS_N_INSNS (cost);\n-\t  *total += rtx_cost (XEXP (x, 0), code, speed);\n+\t  *total += rtx_cost (XEXP (x, 0), code, 0, speed);\n \t  return true;\n \t}\n "}, {"sha": "3980feb5f6f45675043ae093193b9891419f289c", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 66, "deletions": 47, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -89,8 +89,9 @@ static void avr_asm_out_ctor (rtx, int);\n static void avr_asm_out_dtor (rtx, int);\n static int avr_register_move_cost (enum machine_mode, reg_class_t, reg_class_t);\n static int avr_memory_move_cost (enum machine_mode, reg_class_t, bool);\n-static int avr_operand_rtx_cost (rtx, enum machine_mode, enum rtx_code, bool);\n-static bool avr_rtx_costs (rtx, int, int, int *, bool);\n+static int avr_operand_rtx_cost (rtx, enum machine_mode, enum rtx_code,\n+\t\t\t\t int, bool);\n+static bool avr_rtx_costs (rtx, int, int, int, int *, bool);\n static int avr_address_cost (rtx, bool);\n static bool avr_return_in_memory (const_tree, const_tree);\n static struct machine_function * avr_init_machine_status (void);\n@@ -1640,7 +1641,8 @@ final_prescan_insn (rtx insn, rtx *operand ATTRIBUTE_UNUSED,\n                  set_src_cost (SET_SRC (set), optimize_insn_for_speed_p ()));\n       else\n         fprintf (asm_out_file, \"/* DEBUG: pattern-cost = %d.  */\\n\",\n-                 rtx_cost (PATTERN (insn), INSN, optimize_insn_for_speed_p()));\n+                 rtx_cost (PATTERN (insn), INSN, 0,\n+\t\t\t   optimize_insn_for_speed_p()));\n     }\n }\n \n@@ -5302,7 +5304,7 @@ avr_memory_move_cost (enum machine_mode mode, reg_class_t rclass ATTRIBUTE_UNUSE\n \n static int\n avr_operand_rtx_cost (rtx x, enum machine_mode mode, enum rtx_code outer,\n-\t\t      bool speed)\n+\t\t      int opno, bool speed)\n {\n   enum rtx_code code = GET_CODE (x);\n   int total;\n@@ -5322,7 +5324,7 @@ avr_operand_rtx_cost (rtx x, enum machine_mode mode, enum rtx_code outer,\n     }\n \n   total = 0;\n-  avr_rtx_costs (x, code, outer, &total, speed);\n+  avr_rtx_costs (x, code, outer, opno, &total, speed);\n   return total;\n }\n \n@@ -5332,8 +5334,8 @@ avr_operand_rtx_cost (rtx x, enum machine_mode mode, enum rtx_code outer,\n    case, *TOTAL contains the cost result.  */\n \n static bool\n-avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n-\t       bool speed)\n+avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED,\n+\t       int opno ATTRIBUTE_UNUSED, int *total, bool speed)\n {\n   enum rtx_code code = (enum rtx_code) codearg;\n   enum machine_mode mode = GET_MODE (x);\n@@ -5373,7 +5375,7 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \tdefault:\n \t  return false;\n \t}\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n       return true;\n \n     case ABS:\n@@ -5387,24 +5389,24 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \tdefault:\n \t  return false;\n \t}\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n       return true;\n \n     case NOT:\n       *total = COSTS_N_INSNS (GET_MODE_SIZE (mode));\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n       return true;\n \n     case ZERO_EXTEND:\n       *total = COSTS_N_INSNS (GET_MODE_SIZE (mode)\n \t\t\t      - GET_MODE_SIZE (GET_MODE (XEXP (x, 0))));\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n       return true;\n \n     case SIGN_EXTEND:\n       *total = COSTS_N_INSNS (GET_MODE_SIZE (mode) + 2\n \t\t\t      - GET_MODE_SIZE (GET_MODE (XEXP (x, 0))));\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n       return true;\n \n     case PLUS:\n@@ -5413,14 +5415,15 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \tcase QImode:\n \t  *total = COSTS_N_INSNS (1);\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n-\t    *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t    *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1, speed);\n \t  break;\n \n \tcase HImode:\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (2);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n+\t\t\t\t\t      speed);\n \t    }\n \t  else if (INTVAL (XEXP (x, 1)) >= -63 && INTVAL (XEXP (x, 1)) <= 63)\n \t    *total = COSTS_N_INSNS (1);\n@@ -5432,7 +5435,8 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (4);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n+\t\t\t\t\t      speed);\n \t    }\n \t  else if (INTVAL (XEXP (x, 1)) >= -63 && INTVAL (XEXP (x, 1)) <= 63)\n \t    *total = COSTS_N_INSNS (1);\n@@ -5443,22 +5447,22 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \tdefault:\n \t  return false;\n \t}\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n       return true;\n \n     case MINUS:\n     case AND:\n     case IOR:\n       *total = COSTS_N_INSNS (GET_MODE_SIZE (mode));\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n       if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n-          *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t*total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1, speed);\n       return true;\n \n     case XOR:\n       *total = COSTS_N_INSNS (GET_MODE_SIZE (mode));\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n-      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1, speed);\n       return true;\n \n     case MULT:\n@@ -5548,8 +5552,8 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \tdefault:\n \t  return false;\n \t}\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n-      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1, speed);\n       return true;\n \n     case DIV:\n@@ -5560,8 +5564,8 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t*total = COSTS_N_INSNS (AVR_HAVE_JMP_CALL ? 2 : 1);\n       else\n \treturn false;\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n-      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1, speed);\n       return true;\n \n     case ROTATE:\n@@ -5596,7 +5600,7 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \tdefault:\n \t  return false;\n \t}\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n       return true;    \n \n     case ASHIFT:\n@@ -5606,7 +5610,8 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 4 : 17);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n+\t\t\t\t\t      speed);\n \t    }\n \t  else\n \t    {\n@@ -5635,7 +5640,8 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 5 : 41);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n+\t\t\t\t\t      speed);\n \t    }\n \t  else\n \t    switch (INTVAL (XEXP (x, 1)))\n@@ -5672,15 +5678,17 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t\tbreak;\n \t      default:\n \t        *total = COSTS_N_INSNS (!speed ? 5 : 41);\n-\t        *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t        *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n+\t\t\t\t\t\tspeed);\n \t      }\n \t  break;\n \n \tcase SImode:\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 7 : 113);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n+\t\t\t\t\t      speed);\n \t    }\n \t  else\n \t    switch (INTVAL (XEXP (x, 1)))\n@@ -5704,14 +5712,15 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t\tbreak;\n \t      default:\n \t\t*total = COSTS_N_INSNS (!speed ? 7 : 113);\n-\t\t*total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t\t*total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n+\t\t\t\t\t\tspeed);\n \t      }\n \t  break;\n \n \tdefault:\n \t  return false;\n \t}\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n       return true;\n \n     case ASHIFTRT:\n@@ -5721,7 +5730,8 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 4 : 17);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n+\t\t\t\t\t      speed);\n \t    }\n \t  else\n \t    {\n@@ -5741,7 +5751,8 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 5 : 41);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n+\t\t\t\t\t      speed);\n \t    }\n \t  else\n \t    switch (INTVAL (XEXP (x, 1)))\n@@ -5777,15 +5788,17 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t\tbreak;\n \t      default:\n \t        *total = COSTS_N_INSNS (!speed ? 5 : 41);\n-\t        *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t        *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n+\t\t\t\t\t\tspeed);\n \t      }\n \t  break;\n \n \tcase SImode:\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 7 : 113);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n+\t\t\t\t\t      speed);\n \t    }\n \t  else\n \t    switch (INTVAL (XEXP (x, 1)))\n@@ -5809,14 +5822,15 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t\tbreak;\n \t      default:\n \t\t*total = COSTS_N_INSNS (!speed ? 7 : 113);\n-\t\t*total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t\t*total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n+\t\t\t\t\t\tspeed);\n \t      }\n \t  break;\n \n \tdefault:\n \t  return false;\n \t}\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n       return true;\n \n     case LSHIFTRT:\n@@ -5826,7 +5840,8 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 4 : 17);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n+\t\t\t\t\t      speed);\n \t    }\n \t  else\n \t    {\n@@ -5844,7 +5859,8 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 5 : 41);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n+\t\t\t\t\t      speed);\n \t    }\n \t  else\n \t    switch (INTVAL (XEXP (x, 1)))\n@@ -5883,15 +5899,17 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t\tbreak;\n \t      default:\n \t        *total = COSTS_N_INSNS (!speed ? 5 : 41);\n-\t        *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t        *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n+\t\t\t\t\t\tspeed);\n \t      }\n \t  break;\n \n \tcase SImode:\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 7 : 113);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n+\t\t\t\t\t      speed);\n \t    }\n \t  else\n \t    switch (INTVAL (XEXP (x, 1)))\n@@ -5915,14 +5933,15 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t\tbreak;\n \t      default:\n \t\t*total = COSTS_N_INSNS (!speed ? 7 : 113);\n-\t\t*total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t\t*total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n+\t\t\t\t\t\tspeed);\n \t      }\n \t  break;\n \n \tdefault:\n \t  return false;\n \t}\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n       return true;\n \n     case COMPARE:\n@@ -5931,29 +5950,29 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n \tcase QImode:\n \t  *total = COSTS_N_INSNS (1);\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n-\t    *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+\t    *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1, speed);\n \t  break;\n \n         case HImode:\n \t  *total = COSTS_N_INSNS (2);\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n-            *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+            *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1, speed);\n \t  else if (INTVAL (XEXP (x, 1)) != 0)\n \t    *total += COSTS_N_INSNS (1);\n           break;\n \n         case SImode:\n           *total = COSTS_N_INSNS (4);\n           if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n-            *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n+            *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1, speed);\n \t  else if (INTVAL (XEXP (x, 1)) != 0)\n \t    *total += COSTS_N_INSNS (3);\n           break;\n \n \tdefault:\n \t  return false;\n \t}\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n       return true;\n \n     case TRUNCATE:"}, {"sha": "8a0d5a0a807b800009ac7a2da369dcd7f9ccc8da", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -2779,7 +2779,8 @@ bfin_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n }\n \n static bool\n-bfin_rtx_costs (rtx x, int code_i, int outer_code_i, int *total, bool speed)\n+bfin_rtx_costs (rtx x, int code_i, int outer_code_i, int opno, int *total,\n+\t\tbool speed)\n {\n   enum rtx_code code = (enum rtx_code) code_i;\n   enum rtx_code outer_code = (enum rtx_code) outer_code_i;\n@@ -2829,8 +2830,8 @@ bfin_rtx_costs (rtx x, int code_i, int outer_code_i, int *total, bool speed)\n \t      if (val == 2 || val == 4)\n \t\t{\n \t\t  *total = cost2;\n-\t\t  *total += rtx_cost (XEXP (op0, 0), outer_code, speed);\n-\t\t  *total += rtx_cost (op1, outer_code, speed);\n+\t\t  *total += rtx_cost (XEXP (op0, 0), outer_code, opno, speed);\n+\t\t  *total += rtx_cost (op1, outer_code, opno, speed);\n \t\t  return true;\n \t\t}\n \t    }\n@@ -2849,10 +2850,10 @@ bfin_rtx_costs (rtx x, int code_i, int outer_code_i, int *total, bool speed)\n \t  *total = 6 * cost2;\n \t  if (GET_CODE (op1) != CONST_INT\n \t      || !satisfies_constraint_Ks7 (op1))\n-\t    *total += rtx_cost (op1, PLUS, speed);\n+\t    *total += rtx_cost (op1, PLUS, 1, speed);\n \t  if (GET_CODE (op0) != REG\n \t      && (GET_CODE (op0) != SUBREG || GET_CODE (SUBREG_REG (op0)) != REG))\n-\t    *total += rtx_cost (op0, PLUS, speed);\n+\t    *total += rtx_cost (op0, PLUS, 0, speed);\n \t}\n       return true;\n \n@@ -2875,7 +2876,7 @@ bfin_rtx_costs (rtx x, int code_i, int outer_code_i, int *total, bool speed)\n       op1 = XEXP (x, 1);\n       if (GET_CODE (op0) != REG\n \t  && (GET_CODE (op0) != SUBREG || GET_CODE (SUBREG_REG (op0)) != REG))\n-\t*total += rtx_cost (op0, code, speed);\n+\t*total += rtx_cost (op0, code, 0, speed);\n \n       return true;\n \t  \n@@ -2900,7 +2901,7 @@ bfin_rtx_costs (rtx x, int code_i, int outer_code_i, int *total, bool speed)\n \n       if (GET_CODE (op0) != REG\n \t  && (GET_CODE (op0) != SUBREG || GET_CODE (SUBREG_REG (op0)) != REG))\n-\t*total += rtx_cost (op0, code, speed);\n+\t*total += rtx_cost (op0, code, 0, speed);\n \n       if (GET_MODE (x) == DImode)\n \t{\n@@ -2914,12 +2915,12 @@ bfin_rtx_costs (rtx x, int code_i, int outer_code_i, int *total, bool speed)\n       if (code == AND)\n \t{\n \t  if (! rhs_andsi3_operand (XEXP (x, 1), SImode))\n-\t    *total += rtx_cost (XEXP (x, 1), code, speed);\n+\t    *total += rtx_cost (XEXP (x, 1), code, 1, speed);\n \t}\n       else\n \t{\n \t  if (! regorlog2_operand (XEXP (x, 1), SImode))\n-\t    *total += rtx_cost (XEXP (x, 1), code, speed);\n+\t    *total += rtx_cost (XEXP (x, 1), code, 1, speed);\n \t}\n \n       return true;\n@@ -2959,10 +2960,10 @@ bfin_rtx_costs (rtx x, int code_i, int outer_code_i, int *total, bool speed)\n \n \t  if (GET_CODE (op0) != REG\n \t      && (GET_CODE (op0) != SUBREG || GET_CODE (SUBREG_REG (op0)) != REG))\n-\t    *total += rtx_cost (op0, MULT, speed);\n+\t    *total += rtx_cost (op0, MULT, 0, speed);\n \t  if (GET_CODE (op1) != REG\n \t      && (GET_CODE (op1) != SUBREG || GET_CODE (SUBREG_REG (op1)) != REG))\n-\t    *total += rtx_cost (op1, MULT, speed);\n+\t    *total += rtx_cost (op1, MULT, 1, speed);\n \t}\n       return true;\n "}, {"sha": "e77ed70fd3547c1cbf89c37db36ad5d761d1ddd4", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -4772,7 +4772,8 @@ shift_p (rtx x, enum rtx_code code, int amount)\n    scanned.  In either case, *TOTAL contains the cost result.  */\n \n static bool\n-c6x_rtx_costs (rtx x, int code, int outer_code, int *total, bool speed)\n+c6x_rtx_costs (rtx x, int code, int outer_code, int opno, int *total,\n+\t       bool speed)\n {\n   int cost2 = COSTS_N_INSNS (1);\n   rtx op0, op1;\n@@ -4826,8 +4827,8 @@ c6x_rtx_costs (rtx x, int code, int outer_code, int *total, bool speed)\n \t\t*total = COSTS_N_INSNS (2);\n \t      else\n \t\t*total = COSTS_N_INSNS (12);\n-\t      *total += rtx_cost (XEXP (op0, 0), code0, speed);\n-\t      *total += rtx_cost (XEXP (op1, 0), code1, speed);\n+\t      *total += rtx_cost (XEXP (op0, 0), code0, 0, speed);\n+\t      *total += rtx_cost (XEXP (op1, 0), code1, 0, speed);\n \t      return true;\n \t    }\n \t}\n@@ -4855,8 +4856,8 @@ c6x_rtx_costs (rtx x, int code, int outer_code, int *total, bool speed)\n \t      || INTVAL (XEXP (op0, 1)) == 4\n \t      || (code == PLUS && INTVAL (XEXP (op0, 1)) == 8)))\n \t{\n-\t  *total += rtx_cost (XEXP (op0, 0), ASHIFT, speed);\n-\t  *total += rtx_cost (op1, (enum rtx_code)code, speed);\n+\t  *total += rtx_cost (XEXP (op0, 0), ASHIFT, 0, speed);\n+\t  *total += rtx_cost (op1, (enum rtx_code) code, 1, speed);\n \t  return true;\n \t}\n       return false;\n@@ -4926,10 +4927,10 @@ c6x_rtx_costs (rtx x, int code, int outer_code, int *total, bool speed)\n \n       if (GET_CODE (op0) != REG\n \t  && (GET_CODE (op0) != SUBREG || GET_CODE (SUBREG_REG (op0)) != REG))\n-\t*total += rtx_cost (op0, MULT, speed);\n+\t*total += rtx_cost (op0, MULT, 0, speed);\n       if (op1 && GET_CODE (op1) != REG\n \t  && (GET_CODE (op1) != SUBREG || GET_CODE (SUBREG_REG (op1)) != REG))\n-\t*total += rtx_cost (op1, MULT, speed);\n+\t*total += rtx_cost (op1, MULT, 1, speed);\n       return true;\n \n     case UDIV:\n@@ -4947,7 +4948,8 @@ c6x_rtx_costs (rtx x, int code, int outer_code, int *total, bool speed)\n \t  && XEXP (op0, 1) == const0_rtx\n \t  && rtx_equal_p (XEXP (x, 1), XEXP (op0, 0)))\n \t{\n-\t  *total = rtx_cost (XEXP (x, 1), (enum rtx_code)outer_code, speed);\n+\t  *total = rtx_cost (XEXP (x, 1), (enum rtx_code) outer_code,\n+\t\t\t     opno, speed);\n \t  return false;\n \t}\n       return false;"}, {"sha": "24cfa5a2d53a28b59c6fb6751f38e06624d3c3f7", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -123,7 +123,7 @@ static void cris_init_libfuncs (void);\n \n static int cris_register_move_cost (enum machine_mode, reg_class_t, reg_class_t);\n static int cris_memory_move_cost (enum machine_mode, reg_class_t, bool);\n-static bool cris_rtx_costs (rtx, int, int, int *, bool);\n+static bool cris_rtx_costs (rtx, int, int, int, int *, bool);\n static int cris_address_cost (rtx, bool);\n static bool cris_pass_by_reference (cumulative_args_t, enum machine_mode,\n \t\t\t\t    const_tree, bool);\n@@ -1777,7 +1777,7 @@ cris_expand_return (bool on_stack)\n    scanned.  In either case, *TOTAL contains the cost result.  */\n \n static bool\n-cris_rtx_costs (rtx x, int code, int outer_code, int *total,\n+cris_rtx_costs (rtx x, int code, int outer_code, int opno, int *total,\n \t\tbool speed)\n {\n   switch (code)\n@@ -1871,7 +1871,8 @@ cris_rtx_costs (rtx x, int code, int outer_code, int *total,\n           && !CRIS_CONST_OK_FOR_LETTER_P (INTVAL (XEXP (x, 1)), 'I'))\n \t{\n \t  *total\n-\t    = (rtx_cost (XEXP (x, 0), (enum rtx_code) outer_code, speed) + 2\n+\t    = (rtx_cost (XEXP (x, 0), (enum rtx_code) outer_code,\n+\t\t\t opno, speed) + 2\n \t       + 2 * GET_MODE_NUNITS (GET_MODE (XEXP (x, 0))));\n \t  return true;\n \t}\n@@ -1883,7 +1884,7 @@ cris_rtx_costs (rtx x, int code, int outer_code, int *total,\n       /* fall through */\n \n     case ZERO_EXTEND: case SIGN_EXTEND:\n-      *total = rtx_cost (XEXP (x, 0), (enum rtx_code) outer_code, speed);\n+      *total = rtx_cost (XEXP (x, 0), (enum rtx_code) outer_code, opno, speed);\n       return true;\n \n     default:"}, {"sha": "7d8b47bb1dd6df04fe6e28a58942594ef18d0f94", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -364,7 +364,8 @@ static void frv_setup_incoming_varargs\t\t(cumulative_args_t,\n \t\t\t\t\t\t tree, int *, int);\n static rtx frv_expand_builtin_saveregs\t\t(void);\n static void frv_expand_builtin_va_start\t\t(tree, rtx);\n-static bool frv_rtx_costs\t\t\t(rtx, int, int, int*, bool);\n+static bool frv_rtx_costs\t\t\t(rtx, int, int, int, int*,\n+\t\t\t\t\t\t bool);\n static int frv_register_move_cost\t\t(enum machine_mode,\n \t\t\t\t\t\t reg_class_t, reg_class_t);\n static int frv_memory_move_cost\t\t\t(enum machine_mode,\n@@ -9496,6 +9497,7 @@ static bool\n frv_rtx_costs (rtx x,\n                int code ATTRIBUTE_UNUSED,\n                int outer_code ATTRIBUTE_UNUSED,\n+\t       int opno ATTRIBUTE_UNUSED,\n                int *total,\n \t       bool speed ATTRIBUTE_UNUSED)\n {"}, {"sha": "c5603934372558285cb2091bea3572a78c968eb2", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -1174,7 +1174,8 @@ h8300_shift_costs (rtx x)\n /* Worker function for TARGET_RTX_COSTS.  */\n \n static bool\n-h8300_rtx_costs (rtx x, int code, int outer_code, int *total, bool speed)\n+h8300_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n+\t\t int *total, bool speed)\n {\n   if (TARGET_H8300SX && outer_code == MEM)\n     {"}, {"sha": "3356cfd748c34b31beacb996111d65f7db1a02e8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -28825,7 +28825,8 @@ ix86_modes_tieable_p (enum machine_mode mode1, enum machine_mode mode2)\n    scanned.  In either case, *TOTAL contains the cost result.  */\n \n static bool\n-ix86_rtx_costs (rtx x, int code, int outer_code_i, int *total, bool speed)\n+ix86_rtx_costs (rtx x, int code, int outer_code_i, int opno, int *total,\n+\t\tbool speed)\n {\n   enum rtx_code outer_code = (enum rtx_code) outer_code_i;\n   enum machine_mode mode = GET_MODE (x);\n@@ -28949,18 +28950,18 @@ ix86_rtx_costs (rtx x, int code, int outer_code_i, int *total, bool speed)\n         /* ??? SSE scalar/vector cost should be used here.  */\n         /* ??? Bald assumption that fma has the same cost as fmul.  */\n         *total = cost->fmul;\n-\t*total += rtx_cost (XEXP (x, 1), FMA, speed);\n+\t*total += rtx_cost (XEXP (x, 1), FMA, 1, speed);\n \n         /* Negate in op0 or op2 is free: FMS, FNMA, FNMS.  */\n \tsub = XEXP (x, 0);\n \tif (GET_CODE (sub) == NEG)\n \t  sub = XEXP (sub, 0);\n-\t*total += rtx_cost (sub, FMA, speed);\n+\t*total += rtx_cost (sub, FMA, 0, speed);\n \n \tsub = XEXP (x, 2);\n \tif (GET_CODE (sub) == NEG)\n \t  sub = XEXP (sub, 0);\n-\t*total += rtx_cost (sub, FMA, speed);\n+\t*total += rtx_cost (sub, FMA, 2, speed);\n \treturn true;\n       }\n \n@@ -29022,7 +29023,8 @@ ix86_rtx_costs (rtx x, int code, int outer_code_i, int *total, bool speed)\n \n   \t  *total = (cost->mult_init[MODE_INDEX (mode)]\n \t\t    + nbits * cost->mult_bit\n-\t            + rtx_cost (op0, outer_code, speed) + rtx_cost (op1, outer_code, speed));\n+\t            + rtx_cost (op0, outer_code, opno, speed)\n+\t\t    + rtx_cost (op1, outer_code, opno, speed));\n \n           return true;\n \t}\n@@ -29056,10 +29058,11 @@ ix86_rtx_costs (rtx x, int code, int outer_code_i, int *total, bool speed)\n \t      if (val == 2 || val == 4 || val == 8)\n \t\t{\n \t\t  *total = cost->lea;\n-\t\t  *total += rtx_cost (XEXP (XEXP (x, 0), 1), outer_code, speed);\n+\t\t  *total += rtx_cost (XEXP (XEXP (x, 0), 1),\n+\t\t\t\t      outer_code, opno, speed);\n \t\t  *total += rtx_cost (XEXP (XEXP (XEXP (x, 0), 0), 0),\n-\t\t\t\t      outer_code, speed);\n-\t\t  *total += rtx_cost (XEXP (x, 1), outer_code, speed);\n+\t\t\t\t      outer_code, opno, speed);\n+\t\t  *total += rtx_cost (XEXP (x, 1), outer_code, opno, speed);\n \t\t  return true;\n \t\t}\n \t    }\n@@ -29070,17 +29073,20 @@ ix86_rtx_costs (rtx x, int code, int outer_code_i, int *total, bool speed)\n \t      if (val == 2 || val == 4 || val == 8)\n \t\t{\n \t\t  *total = cost->lea;\n-\t\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), outer_code, speed);\n-\t\t  *total += rtx_cost (XEXP (x, 1), outer_code, speed);\n+\t\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0),\n+\t\t\t\t      outer_code, opno, speed);\n+\t\t  *total += rtx_cost (XEXP (x, 1), outer_code, opno, speed);\n \t\t  return true;\n \t\t}\n \t    }\n \t  else if (GET_CODE (XEXP (x, 0)) == PLUS)\n \t    {\n \t      *total = cost->lea;\n-\t      *total += rtx_cost (XEXP (XEXP (x, 0), 0), outer_code, speed);\n-\t      *total += rtx_cost (XEXP (XEXP (x, 0), 1), outer_code, speed);\n-\t      *total += rtx_cost (XEXP (x, 1), outer_code, speed);\n+\t      *total += rtx_cost (XEXP (XEXP (x, 0), 0),\n+\t\t\t\t  outer_code, opno, speed);\n+\t      *total += rtx_cost (XEXP (XEXP (x, 0), 1),\n+\t\t\t\t  outer_code, opno, speed);\n+\t      *total += rtx_cost (XEXP (x, 1), outer_code, opno, speed);\n \t      return true;\n \t    }\n \t}\n@@ -29112,9 +29118,9 @@ ix86_rtx_costs (rtx x, int code, int outer_code_i, int *total, bool speed)\n       if (!TARGET_64BIT && mode == DImode)\n \t{\n \t  *total = (cost->add * 2\n-\t\t    + (rtx_cost (XEXP (x, 0), outer_code, speed)\n+\t\t    + (rtx_cost (XEXP (x, 0), outer_code, opno, speed)\n \t\t       << (GET_MODE (XEXP (x, 0)) != DImode))\n-\t\t    + (rtx_cost (XEXP (x, 1), outer_code, speed)\n+\t\t    + (rtx_cost (XEXP (x, 1), outer_code, opno, speed)\n \t               << (GET_MODE (XEXP (x, 1)) != DImode)));\n \t  return true;\n \t}\n@@ -29156,8 +29162,8 @@ ix86_rtx_costs (rtx x, int code, int outer_code_i, int *total, bool speed)\n \t  /* This kind of construct is implemented using test[bwl].\n \t     Treat it as if we had an AND.  */\n \t  *total = (cost->add\n-\t\t    + rtx_cost (XEXP (XEXP (x, 0), 0), outer_code, speed)\n-\t\t    + rtx_cost (const1_rtx, outer_code, speed));\n+\t\t    + rtx_cost (XEXP (XEXP (x, 0), 0), outer_code, opno, speed)\n+\t\t    + rtx_cost (const1_rtx, outer_code, opno, speed));\n \t  return true;\n \t}\n       return false;"}, {"sha": "f4fbf08396d5b7e82f40c1c1695a58983af9682a", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -217,7 +217,7 @@ static int ia64_register_move_cost (enum machine_mode, reg_class_t,\n                                     reg_class_t);\n static int ia64_memory_move_cost (enum machine_mode mode, reg_class_t,\n \t\t\t\t  bool);\n-static bool ia64_rtx_costs (rtx, int, int, int *, bool);\n+static bool ia64_rtx_costs (rtx, int, int, int, int *, bool);\n static int ia64_unspec_may_trap_p (const_rtx, unsigned);\n static void fix_range (const char *);\n static struct machine_function * ia64_init_machine_status (void);\n@@ -5244,8 +5244,8 @@ ia64_print_operand (FILE * file, rtx x, int code)\n /* ??? This is incomplete.  */\n \n static bool\n-ia64_rtx_costs (rtx x, int code, int outer_code, int *total,\n-\t\tbool speed ATTRIBUTE_UNUSED)\n+ia64_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n+\t\tint *total, bool speed ATTRIBUTE_UNUSED)\n {\n   switch (code)\n     {"}, {"sha": "7d8630e6bbb6bd7afa1a62ec0ad73a20f193db64", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -151,7 +151,7 @@ static bool iq2000_return_in_memory   (const_tree, const_tree);\n static void iq2000_setup_incoming_varargs (cumulative_args_t,\n \t\t\t\t\t   enum machine_mode, tree, int *,\n \t\t\t\t\t   int);\n-static bool iq2000_rtx_costs          (rtx, int, int, int *, bool);\n+static bool iq2000_rtx_costs          (rtx, int, int, int, int *, bool);\n static int  iq2000_address_cost       (rtx, bool);\n static section *iq2000_select_section (tree, int, unsigned HOST_WIDE_INT);\n static rtx  iq2000_legitimize_address (rtx, rtx, enum machine_mode);\n@@ -3285,7 +3285,8 @@ iq2000_legitimize_address (rtx xinsn, rtx old_x ATTRIBUTE_UNUSED,\n \n \n static bool\n-iq2000_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int * total,\n+iq2000_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n+\t\t  int opno ATTRIBUTE_UNUSED, int * total,\n \t\t  bool speed ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode = GET_MODE (x);"}, {"sha": "0d0ee5f9a9eb0a7b2c7bab1cd2c851b634ab9f9d", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -68,8 +68,8 @@ static bool lm32_in_small_data_p (const_tree);\n static void lm32_setup_incoming_varargs (cumulative_args_t cum,\n \t\t\t\t\t enum machine_mode mode, tree type,\n \t\t\t\t\t int *pretend_size, int no_rtl);\n-static bool lm32_rtx_costs (rtx x, int code, int outer_code, int *total,\n-\t\t\t    bool speed);\n+static bool lm32_rtx_costs (rtx x, int code, int outer_code, int opno,\n+\t\t\t    int *total, bool speed);\n static bool lm32_can_eliminate (const int, const int);\n static bool\n lm32_legitimate_address_p (enum machine_mode mode, rtx x, bool strict);\n@@ -928,7 +928,8 @@ nonpic_symbol_mentioned_p (rtx x)\n    scanned.  In either case, *TOTAL contains the cost result.  */\n \n static bool\n-lm32_rtx_costs (rtx x, int code, int outer_code, int *total, bool speed)\n+lm32_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n+\t\tint *total, bool speed)\n {\n   enum machine_mode mode = GET_MODE (x);\n   bool small_mode;"}, {"sha": "39d8ede0dee5dc69796d1486d5f5001744a69c25", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -2429,8 +2429,8 @@ m32c_memory_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS m32c_rtx_costs\n static bool\n-m32c_rtx_costs (rtx x, int code, int outer_code, int *total,\n-\t\tbool speed ATTRIBUTE_UNUSED)\n+m32c_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n+\t\tint *total, bool speed ATTRIBUTE_UNUSED)\n {\n   switch (code)\n     {"}, {"sha": "9763670360255ca769294c3d7ffc76da2e088ef0", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -84,7 +84,7 @@ static bool m32r_function_value_regno_p (const unsigned int);\n static void m32r_setup_incoming_varargs (cumulative_args_t, enum machine_mode,\n \t\t\t\t\t tree, int *, int);\n static void init_idents (void);\n-static bool m32r_rtx_costs (rtx, int, int, int *, bool speed);\n+static bool m32r_rtx_costs (rtx, int, int, int, int *, bool speed);\n static int m32r_memory_move_cost (enum machine_mode, reg_class_t, bool);\n static bool m32r_pass_by_reference (cumulative_args_t, enum machine_mode,\n \t\t\t\t    const_tree, bool);\n@@ -1356,7 +1356,8 @@ m32r_memory_move_cost (enum machine_mode mode,\n }\n \n static bool\n-m32r_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n+m32r_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n+\t\tint opno ATTRIBUTE_UNUSED, int *total,\n \t\tbool speed ATTRIBUTE_UNUSED)\n {\n   switch (code)"}, {"sha": "71df1410394ddf8fa94ea16a22d33a37e4245589", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -150,7 +150,7 @@ static bool m68k_save_reg (unsigned int regno, bool interrupt_handler);\n static bool m68k_ok_for_sibcall_p (tree, tree);\n static bool m68k_tls_symbol_p (rtx);\n static rtx m68k_legitimize_address (rtx, rtx, enum machine_mode);\n-static bool m68k_rtx_costs (rtx, int, int, int *, bool);\n+static bool m68k_rtx_costs (rtx, int, int, int, int *, bool);\n #if M68K_HONOR_TARGET_STRICT_ALIGNMENT\n static bool m68k_return_in_memory (const_tree, const_tree);\n #endif\n@@ -2765,8 +2765,8 @@ const_int_cost (HOST_WIDE_INT i)\n }\n \n static bool\n-m68k_rtx_costs (rtx x, int code, int outer_code, int *total,\n-\t\tbool speed ATTRIBUTE_UNUSED)\n+m68k_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n+\t\tint *total, bool speed ATTRIBUTE_UNUSED)\n {\n   switch (code)\n     {"}, {"sha": "82ae0cfe68b39daf70a0111b862b956ec380a095", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -121,7 +121,8 @@ static const char *mcore_strip_name_encoding\t(const char *);\n static int        mcore_const_costs            \t(rtx, RTX_CODE);\n static int        mcore_and_cost               \t(rtx);\n static int        mcore_ior_cost               \t(rtx);\n-static bool       mcore_rtx_costs\t\t(rtx, int, int, int *, bool);\n+static bool       mcore_rtx_costs\t\t(rtx, int, int, int,\n+\t\t\t\t\t\t int *, bool);\n static void       mcore_external_libcall\t(rtx);\n static bool       mcore_return_in_memory\t(const_tree, const_tree);\n static int        mcore_arg_partial_bytes       (cumulative_args_t,\n@@ -508,8 +509,8 @@ mcore_ior_cost (rtx x)\n }\n \n static bool\n-mcore_rtx_costs (rtx x, int code, int outer_code, int * total,\n-\t\t bool speed ATTRIBUTE_UNUSED)\n+mcore_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n+\t\t int * total, bool speed ATTRIBUTE_UNUSED)\n {\n   switch (code)\n     {"}, {"sha": "39d9cf95d30fe1d7c63604e856785aa552c4caea", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -211,7 +211,7 @@ static void mep_move_ready_insn (rtx *, int, rtx);\n static int mep_sched_reorder (FILE *, int, rtx *, int *, int);\n static rtx mep_make_bundle (rtx, rtx);\n static void mep_bundle_insns (rtx);\n-static bool mep_rtx_cost (rtx, int, int, int *, bool);\n+static bool mep_rtx_cost (rtx, int, int, int, int *, bool);\n static int mep_address_cost (rtx, bool);\n static void mep_setup_incoming_varargs (cumulative_args_t, enum machine_mode,\n \t\t\t\t\ttree, int *, int);\n@@ -7261,7 +7261,9 @@ mep_expand_binary_intrinsic (int ATTRIBUTE_UNUSED immediate,\n }\n \n static bool\n-mep_rtx_cost (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total, bool ATTRIBUTE_UNUSED speed_t)\n+mep_rtx_cost (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n+\t      int opno ATTRIBUTE_UNUSED, int *total,\n+\t      bool ATTRIBUTE_UNUSED speed_t)\n {\n   switch (code)\n     {"}, {"sha": "97d91ca10f183ac47e62b5382af19737d03d4d65", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -861,7 +861,8 @@ microblaze_expand_block_move (rtx dest, rtx src, rtx length, rtx align_rtx)\n }\n \n static bool\n-microblaze_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total, \n+microblaze_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n+\t\t      int opno ATTRIBUTE_UNUSED, int *total,\n \t\t      bool speed ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode = GET_MODE (x);"}, {"sha": "1c9b86697af4a42a0ffeaf55f29e89d3adc73ee4", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -3334,7 +3334,7 @@ mips_binary_cost (rtx x, int single_cost, int double_cost, bool speed)\n     cost = single_cost;\n   return (cost\n \t  + set_src_cost (XEXP (x, 0), speed)\n-\t  + rtx_cost (XEXP (x, 1), GET_CODE (x), speed));\n+\t  + rtx_cost (XEXP (x, 1), GET_CODE (x), 1, speed));\n }\n \n /* Return the cost of floating-point multiplications of mode MODE.  */\n@@ -3404,7 +3404,8 @@ mips_zero_extend_cost (enum machine_mode mode, rtx op)\n /* Implement TARGET_RTX_COSTS.  */\n \n static bool\n-mips_rtx_costs (rtx x, int code, int outer_code, int *total, bool speed)\n+mips_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n+\t\tint *total, bool speed)\n {\n   enum machine_mode mode = GET_MODE (x);\n   bool float_mode_p = FLOAT_MODE_P (mode);"}, {"sha": "c87d09e0e2f2ee20bad6e77c6269b94e09455999", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -140,7 +140,7 @@ static void mmix_setup_incoming_varargs\n   (cumulative_args_t, enum machine_mode, tree, int *, int);\n static void mmix_file_start (void);\n static void mmix_file_end (void);\n-static bool mmix_rtx_costs (rtx, int, int, int *, bool);\n+static bool mmix_rtx_costs (rtx, int, int, int, int *, bool);\n static int mmix_register_move_cost (enum machine_mode,\n \t\t\t\t    reg_class_t, reg_class_t);\n static rtx mmix_struct_value_rtx (tree, int);\n@@ -1229,6 +1229,7 @@ static bool\n mmix_rtx_costs (rtx x ATTRIBUTE_UNUSED,\n \t\tint code ATTRIBUTE_UNUSED,\n \t\tint outer_code ATTRIBUTE_UNUSED,\n+\t\tint opno ATTRIBUTE_UNUSED,\n \t\tint *total ATTRIBUTE_UNUSED,\n \t\tbool speed ATTRIBUTE_UNUSED)\n {"}, {"sha": "eca887133497e6c51ed17506d2370dc0eb765490", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -2182,7 +2182,7 @@ mn10300_address_cost (rtx x, bool speed)\n       return speed ? 2 : 6;\n \n     default:\n-      return rtx_cost (x, MEM, speed);\n+      return rtx_cost (x, MEM, 0, speed);\n     }\n }\n \n@@ -2296,7 +2296,8 @@ mn10300_memory_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n    to represent cycles.  Size-relative costs are in bytes.  */\n \n static bool\n-mn10300_rtx_costs (rtx x, int code, int outer_code, int *ptotal, bool speed)\n+mn10300_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n+\t\t   int *ptotal, bool speed)\n {\n   /* This value is used for SYMBOL_REF etc where we want to pretend\n      we have a full 32-bit constant.  */\n@@ -2387,7 +2388,7 @@ mn10300_rtx_costs (rtx x, int code, int outer_code, int *ptotal, bool speed)\n \t  i = INTVAL (XEXP (x, 1));\n \t  if (i == 1 || i == 4)\n \t    {\n-\t      total = 1 + rtx_cost (XEXP (x, 0), PLUS, speed);\n+\t      total = 1 + rtx_cost (XEXP (x, 0), PLUS, 0, speed);\n \t      goto alldone;\n \t    }\n \t}"}, {"sha": "db404cd3c2e3dbb3bf12ce1ffbd042475613d19f", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -92,7 +92,7 @@ static void fix_range (const char *);\n static int hppa_register_move_cost (enum machine_mode mode, reg_class_t,\n \t\t\t\t    reg_class_t);\n static int hppa_address_cost (rtx, bool);\n-static bool hppa_rtx_costs (rtx, int, int, int *, bool);\n+static bool hppa_rtx_costs (rtx, int, int, int, int *, bool);\n static inline rtx force_mode (enum machine_mode, rtx);\n static void pa_reorg (void);\n static void pa_combine_instructions (void);\n@@ -1411,8 +1411,8 @@ hppa_address_cost (rtx X,\n    scanned.  In either case, *TOTAL contains the cost result.  */\n \n static bool\n-hppa_rtx_costs (rtx x, int code, int outer_code, int *total,\n-\t\tbool speed ATTRIBUTE_UNUSED)\n+hppa_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n+\t\tint *total, bool speed ATTRIBUTE_UNUSED)\n {\n   switch (code)\n     {"}, {"sha": "42e3af078db6a0213cd80bf22837928f8e5c6e5c", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -141,7 +141,7 @@ decode_pdp11_d (const struct real_format *fmt ATTRIBUTE_UNUSED,\n \n static const char *singlemove_string (rtx *);\n static bool pdp11_assemble_integer (rtx, unsigned int, int);\n-static bool pdp11_rtx_costs (rtx, int, int, int *, bool);\n+static bool pdp11_rtx_costs (rtx, int, int, int, int *, bool);\n static bool pdp11_return_in_memory (const_tree, const_tree);\n static rtx pdp11_function_value (const_tree, const_tree, bool);\n static rtx pdp11_libcall_value (enum machine_mode, const_rtx);\n@@ -888,7 +888,8 @@ pdp11_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n }\n \n static bool\n-pdp11_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n+pdp11_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n+\t\t int opno ATTRIBUTE_UNUSED, int *total,\n \t\t bool speed ATTRIBUTE_UNUSED)\n {\n   switch (code)"}, {"sha": "b878a1f1777c83dab0ef2b2da4a714d30f159bd9", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -101,7 +101,8 @@ int picochip_sched_reorder (FILE * file, int verbose, rtx * ready,\n void picochip_init_builtins (void);\n rtx picochip_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n \n-bool picochip_rtx_costs (rtx x, int code, int outer_code, int* total, bool speed);\n+bool picochip_rtx_costs (rtx x, int code, int outer_code, int opno,\n+\t\t\t int* total, bool speed);\n bool picochip_return_in_memory(const_tree type,\n                               const_tree fntype ATTRIBUTE_UNUSED);\n bool picochip_legitimate_address_p (enum machine_mode, rtx, bool);\n@@ -3741,7 +3742,8 @@ gen_SImode_mem(rtx opnd1,rtx opnd2)\n }\n \n bool\n-picochip_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int* total, bool speed)\n+picochip_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n+\t\t    int opno ATTRIBUTE_UNUSED, int* total, bool speed)\n {\n \n   int localTotal = 0;"}, {"sha": "a94a4f6c40b857a5360bf9e17575adf8fc3a080b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -948,8 +948,8 @@ static int rs6000_variable_issue (FILE *, int, rtx, int);\n static int rs6000_register_move_cost (enum machine_mode,\n \t\t\t\t      reg_class_t, reg_class_t);\n static int rs6000_memory_move_cost (enum machine_mode, reg_class_t, bool);\n-static bool rs6000_rtx_costs (rtx, int, int, int *, bool);\n-static bool rs6000_debug_rtx_costs (rtx, int, int, int *, bool);\n+static bool rs6000_rtx_costs (rtx, int, int, int, int *, bool);\n+static bool rs6000_debug_rtx_costs (rtx, int, int, int, int *, bool);\n static int rs6000_debug_address_cost (rtx, bool);\n static int rs6000_adjust_cost (rtx, rtx, rtx, int);\n static int rs6000_debug_adjust_cost (rtx, rtx, rtx, int);\n@@ -25730,8 +25730,8 @@ rs6000_xcoff_file_end (void)\n    scanned.  In either case, *TOTAL contains the cost result.  */\n \n static bool\n-rs6000_rtx_costs (rtx x, int code, int outer_code, int *total,\n-\t\t  bool speed)\n+rs6000_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n+\t\t  int *total, bool speed)\n {\n   enum machine_mode mode = GET_MODE (x);\n \n@@ -26074,17 +26074,18 @@ rs6000_rtx_costs (rtx x, int code, int outer_code, int *total,\n /* Debug form of r6000_rtx_costs that is selected if -mdebug=cost.  */\n \n static bool\n-rs6000_debug_rtx_costs (rtx x, int code, int outer_code, int *total,\n+rs6000_debug_rtx_costs (rtx x, int code, int outer_code, int opno, int *total,\n \t\t\tbool speed)\n {\n-  bool ret = rs6000_rtx_costs (x, code, outer_code, total, speed);\n+  bool ret = rs6000_rtx_costs (x, code, outer_code, opno, total, speed);\n \n   fprintf (stderr,\n \t   \"\\nrs6000_rtx_costs, return = %s, code = %s, outer_code = %s, \"\n-\t   \"total = %d, speed = %s, x:\\n\",\n+\t   \"opno = %d, total = %d, speed = %s, x:\\n\",\n \t   ret ? \"complete\" : \"scan inner\",\n \t   GET_RTX_NAME (code),\n \t   GET_RTX_NAME (outer_code),\n+\t   opno,\n \t   *total,\n \t   speed ? \"true\" : \"false\");\n "}, {"sha": "22f05f9fd21592cbb4f2f86e8294c6f1c0cce331", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -2374,8 +2374,8 @@ s390_memory_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n    of the superexpression of x.  */\n \n static bool\n-s390_rtx_costs (rtx x, int code, int outer_code, int *total,\n-\t\tbool speed ATTRIBUTE_UNUSED)\n+s390_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n+\t\tint *total, bool speed ATTRIBUTE_UNUSED)\n {\n   switch (code)\n     {\n@@ -2480,9 +2480,9 @@ s390_rtx_costs (rtx x, int code, int outer_code, int *total,\n       /* Negate in the third argument is free: FMSUB.  */\n       if (GET_CODE (XEXP (x, 2)) == NEG)\n \t{\n-\t  *total += (rtx_cost (XEXP (x, 0), FMA, speed)\n-\t\t     + rtx_cost (XEXP (x, 1), FMA, speed)\n-\t\t     + rtx_cost (XEXP (XEXP (x, 2), 0), FMA, speed));\n+\t  *total += (rtx_cost (XEXP (x, 0), FMA, 0, speed)\n+\t\t     + rtx_cost (XEXP (x, 1), FMA, 1, speed)\n+\t\t     + rtx_cost (XEXP (XEXP (x, 2), 0), FMA, 2, speed));\n \t  return true;\n \t}\n       return false;"}, {"sha": "dc56fc7e5dd3fecf5ea99a6b558ba3d7dcc7fa00", "filename": "gcc/config/score/score-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore-protos.h?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -73,7 +73,8 @@ extern const char * score_select (rtx *ops, const char *inst_pre, bool commu,\n extern const char * score_output_casesi (rtx *operands);\n extern const char * score_rpush (rtx *ops);\n extern const char * score_rpop (rtx *ops);\n-extern bool score_rtx_costs (rtx x, int code, int outer_code, int *total, bool speed);\n+extern bool score_rtx_costs (rtx x, int code, int outer_code, int opno,\n+\t\t\t     int *total, bool speed);\n \n #ifdef RTX_CODE\n extern enum machine_mode score_select_cc_mode (enum rtx_code op, rtx x, rtx y);"}, {"sha": "c789f22f1bbfe5379641b9f3e63c518f1f25f611", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -1074,7 +1074,8 @@ score_address_insns (rtx x, enum machine_mode mode)\n \n /* Implement TARGET_RTX_COSTS macro.  */\n bool\n-score_rtx_costs (rtx x, int code, int outer_code, int *total, bool speed ATTRIBUTE_UNUSED)\n+score_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n+\t\t int *total, bool speed ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode = GET_MODE (x);\n "}, {"sha": "93477ff8b05434567b3e80f468e25410f01f5a53", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -247,7 +247,7 @@ static int addsubcosts (rtx);\n static int multcosts (rtx);\n static bool unspec_caller_rtx_p (rtx);\n static bool sh_cannot_copy_insn_p (rtx);\n-static bool sh_rtx_costs (rtx, int, int, int *, bool);\n+static bool sh_rtx_costs (rtx, int, int, int, int *, bool);\n static int sh_address_cost (rtx, bool);\n static int sh_pr_n_sets (void);\n static rtx sh_allocate_initial_value (rtx);\n@@ -2849,7 +2849,7 @@ andcosts (rtx x)\n \t  || satisfies_constraint_J16 (XEXP (x, 1)))\n \treturn 1;\n       else\n-\treturn 1 + rtx_cost (XEXP (x, 1), AND, !optimize_size);\n+\treturn 1 + rtx_cost (XEXP (x, 1), AND, 1, !optimize_size);\n     }\n \n   /* These constants are single cycle extu.[bw] instructions.  */\n@@ -2949,8 +2949,8 @@ multcosts (rtx x ATTRIBUTE_UNUSED)\n    scanned.  In either case, *TOTAL contains the cost result.  */\n \n static bool\n-sh_rtx_costs (rtx x, int code, int outer_code, int *total,\n-\t      bool speed ATTRIBUTE_UNUSED)\n+sh_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n+\t      int *total, bool speed ATTRIBUTE_UNUSED)\n {\n   switch (code)\n     {"}, {"sha": "de9a7eb6929c9da0ce6021fb7816b6cfbc6b5654", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -428,7 +428,7 @@ static const char *get_some_local_dynamic_name (void);\n static int get_some_local_dynamic_name_1 (rtx *, void *);\n static int sparc_register_move_cost (enum machine_mode,\n \t\t\t\t     reg_class_t, reg_class_t);\n-static bool sparc_rtx_costs (rtx, int, int, int *, bool);\n+static bool sparc_rtx_costs (rtx, int, int, int, int *, bool);\n static rtx sparc_function_value (const_tree, const_tree, bool);\n static rtx sparc_libcall_value (enum machine_mode, const_rtx);\n static bool sparc_function_value_regno_p (const unsigned int);\n@@ -9414,8 +9414,8 @@ sparc_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED,\n    ??? the latencies and then CSE will just use that.  */\n \n static bool\n-sparc_rtx_costs (rtx x, int code, int outer_code, int *total,\n-\t\t bool speed ATTRIBUTE_UNUSED)\n+sparc_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n+\t\t int *total, bool speed ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode = GET_MODE (x);\n   bool float_mode_p = FLOAT_MODE_P (mode);"}, {"sha": "952aea5044499e72671dba14e07f8739d1dc7539", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -203,7 +203,7 @@ static int mem_is_padded_component_ref (rtx x);\n static int reg_aligned_for_addr (rtx x);\n static bool spu_assemble_integer (rtx x, unsigned int size, int aligned_p);\n static void spu_asm_globalize_label (FILE * file, const char *name);\n-static bool spu_rtx_costs (rtx x, int code, int outer_code,\n+static bool spu_rtx_costs (rtx x, int code, int outer_code, int opno,\n \t\t\t   int *total, bool speed);\n static bool spu_function_ok_for_sibcall (tree decl, tree exp);\n static void spu_init_libfuncs (void);\n@@ -5482,7 +5482,8 @@ spu_asm_globalize_label (FILE * file, const char *name)\n }\n \n static bool\n-spu_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n+spu_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n+\t       int opno ATTRIBUTE_UNUSED, int *total,\n \t       bool speed ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode = GET_MODE (x);"}, {"sha": "99acee6f69b25662fee9c8bdb65a6cc8540a0587", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -57,7 +57,7 @@ static void xstormy16_asm_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n \n static void xstormy16_init_builtins (void);\n static rtx xstormy16_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n-static bool xstormy16_rtx_costs (rtx, int, int, int *, bool);\n+static bool xstormy16_rtx_costs (rtx, int, int, int, int *, bool);\n static int xstormy16_address_cost (rtx, bool);\n static bool xstormy16_return_in_memory (const_tree, const_tree);\n \n@@ -69,7 +69,8 @@ static GTY(()) section *bss100_section;\n \n static bool\n xstormy16_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n-\t\t     int *total, bool speed ATTRIBUTE_UNUSED)\n+\t\t     int opno ATTRIBUTE_UNUSED, int *total,\n+\t\t     bool speed ATTRIBUTE_UNUSED)\n {\n   switch (code)\n     {"}, {"sha": "5c43607347edf2883c8ac9e1c84bff2d57dffc97", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -310,6 +310,7 @@ static bool\n v850_rtx_costs (rtx x,\n                 int codearg,\n                 int outer_code ATTRIBUTE_UNUSED,\n+\t\tint opno ATTRIBUTE_UNUSED,\n                 int * total, bool speed)\n {\n   enum rtx_code code = (enum rtx_code) codearg;"}, {"sha": "4e704b6f714fe3aafb610a8575583733a2880dfa", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -54,7 +54,7 @@ static void vax_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t HOST_WIDE_INT, tree);\n static int vax_address_cost_1 (rtx);\n static int vax_address_cost (rtx, bool);\n-static bool vax_rtx_costs (rtx, int, int, int *, bool);\n+static bool vax_rtx_costs (rtx, int, int, int, int *, bool);\n static rtx vax_function_arg (cumulative_args_t, enum machine_mode,\n \t\t\t     const_tree, bool);\n static void vax_function_arg_advance (cumulative_args_t, enum machine_mode,\n@@ -745,8 +745,8 @@ vax_address_cost (rtx x, bool speed ATTRIBUTE_UNUSED)\n    costs on a per cpu basis.  */\n \n static bool\n-vax_rtx_costs (rtx x, int code, int outer_code, int *total,\n-\t       bool speed ATTRIBUTE_UNUSED)\n+vax_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n+\t       int *total, bool speed ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode = GET_MODE (x);\n   int i = 0;\t\t\t\t   /* may be modified in switch */"}, {"sha": "7f42e48dd538e6a1bba90c31eef1b5cc6b88cf50", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -136,7 +136,7 @@ static unsigned int xtensa_multibss_section_type_flags (tree, const char *,\n \t\t\t\t\t\t\tint) ATTRIBUTE_UNUSED;\n static section *xtensa_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t\t   unsigned HOST_WIDE_INT);\n-static bool xtensa_rtx_costs (rtx, int, int, int *, bool);\n+static bool xtensa_rtx_costs (rtx, int, int, int, int *, bool);\n static int xtensa_register_move_cost (enum machine_mode, reg_class_t,\n \t\t\t\t      reg_class_t);\n static int xtensa_memory_move_cost (enum machine_mode, reg_class_t, bool);\n@@ -3342,8 +3342,8 @@ xtensa_memory_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n    scanned.  In either case, *TOTAL contains the cost result.  */\n \n static bool\n-xtensa_rtx_costs (rtx x, int code, int outer_code, int *total,\n-\t\t  bool speed ATTRIBUTE_UNUSED)\n+xtensa_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n+\t\t  int *total, bool speed ATTRIBUTE_UNUSED)\n {\n   switch (code)\n     {"}, {"sha": "ae676851632fe6604209ff40fee4c12692de26e8", "filename": "gcc/cse.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -475,8 +475,8 @@ struct table_elt\n    || (HARD_REGISTER_NUM_P (N)\t\t\t\t\t\t\\\n        && FIXED_REGNO_P (N) && REGNO_REG_CLASS (N) != NO_REGS))\n \n-#define COST(X) (REG_P (X) ? 0 : notreg_cost (X, SET))\n-#define COST_IN(X,OUTER) (REG_P (X) ? 0 : notreg_cost (X, OUTER))\n+#define COST(X) (REG_P (X) ? 0 : notreg_cost (X, SET, 1))\n+#define COST_IN(X, OUTER, OPNO) (REG_P (X) ? 0 : notreg_cost (X, OUTER, OPNO))\n \n /* Get the number of times this register has been updated in this\n    basic block.  */\n@@ -552,7 +552,7 @@ static bitmap cse_ebb_live_in, cse_ebb_live_out;\n static sbitmap cse_visited_basic_blocks;\n \n static bool fixed_base_plus_p (rtx x);\n-static int notreg_cost (rtx, enum rtx_code);\n+static int notreg_cost (rtx, enum rtx_code, int);\n static int approx_reg_cost_1 (rtx *, void *);\n static int approx_reg_cost (rtx);\n static int preferable (int, int, int, int);\n@@ -752,7 +752,7 @@ preferable (int cost_a, int regcost_a, int cost_b, int regcost_b)\n    from COST macro to keep it simple.  */\n \n static int\n-notreg_cost (rtx x, enum rtx_code outer)\n+notreg_cost (rtx x, enum rtx_code outer, int opno)\n {\n   return ((GET_CODE (x) == SUBREG\n \t   && REG_P (SUBREG_REG (x))\n@@ -764,7 +764,7 @@ notreg_cost (rtx x, enum rtx_code outer)\n \t   && TRULY_NOOP_TRUNCATION_MODES_P (GET_MODE (x),\n \t\t\t\t\t     GET_MODE (SUBREG_REG (x))))\n \t  ? 0\n-\t  : rtx_cost (x, outer, optimize_this_for_speed_p) * 2);\n+\t  : rtx_cost (x, outer, opno, optimize_this_for_speed_p) * 2);\n }\n \n \f\n@@ -3296,7 +3296,7 @@ fold_rtx (rtx x, rtx insn)\n \t   argument.  */\n \tif (const_arg != 0\n \t    && const_arg != folded_arg\n-\t    && COST_IN (const_arg, code) <= COST_IN (folded_arg, code)\n+\t    && COST_IN (const_arg, code, i) <= COST_IN (folded_arg, code, i)\n \n \t    /* It's not safe to substitute the operand of a conversion\n \t       operator with a constant, as the conversion's identity"}, {"sha": "832aefef4f1ce92b4cd02feea042a5fd13e5dc0a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -6415,14 +6415,19 @@ Define this macro if a non-short-circuit operation produced by\n @code{BRANCH_COST} is greater than or equal to the value 2.\n @end defmac\n \n-@deftypefn {Target Hook} bool TARGET_RTX_COSTS (rtx @var{x}, int @var{code}, int @var{outer_code}, int *@var{total}, bool @var{speed})\n+@deftypefn {Target Hook} bool TARGET_RTX_COSTS (rtx @var{x}, int @var{code}, int @var{outer_code}, int @var{opno}, int *@var{total}, bool @var{speed})\n This target hook describes the relative costs of RTL expressions.\n \n The cost may depend on the precise form of the expression, which is\n-available for examination in @var{x}, and the rtx code of the expression\n-in which it is contained, found in @var{outer_code}.  @var{code} is the\n-expression code---redundant, since it can be obtained with\n-@code{GET_CODE (@var{x})}.\n+available for examination in @var{x}, and the fact that @var{x} appears\n+as operand @var{opno} of an expression with rtx code @var{outer_code}.\n+That is, the hook can assume that there is some rtx @var{y} such\n+that @samp{GET_CODE (@var{y}) == @var{outer_code}} and such that\n+either (a) @samp{XEXP (@var{y}, @var{opno}) == @var{x}} or\n+(b) @samp{XVEC (@var{y}, @var{opno})} contains @var{x}.\n+\n+@var{code} is @var{x}'s expression code---redundant, since it can be\n+obtained with @code{GET_CODE (@var{x})}.\n \n In implementing this hook, you can use the construct\n @code{COSTS_N_INSNS (@var{n})} to specify a cost equal to @var{n} fast"}, {"sha": "c53cbe82b662891acfd2ce2532fe67d0c8c3f3b6", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -6357,10 +6357,15 @@ Define this macro if a non-short-circuit operation produced by\n This target hook describes the relative costs of RTL expressions.\n \n The cost may depend on the precise form of the expression, which is\n-available for examination in @var{x}, and the rtx code of the expression\n-in which it is contained, found in @var{outer_code}.  @var{code} is the\n-expression code---redundant, since it can be obtained with\n-@code{GET_CODE (@var{x})}.\n+available for examination in @var{x}, and the fact that @var{x} appears\n+as operand @var{opno} of an expression with rtx code @var{outer_code}.\n+That is, the hook can assume that there is some rtx @var{y} such\n+that @samp{GET_CODE (@var{y}) == @var{outer_code}} and such that\n+either (a) @samp{XEXP (@var{y}, @var{opno}) == @var{x}} or\n+(b) @samp{XVEC (@var{y}, @var{opno})} contains @var{x}.\n+\n+@var{code} is @var{x}'s expression code---redundant, since it can be\n+obtained with @code{GET_CODE (@var{x})}.\n \n In implementing this hook, you can use the construct\n @code{COSTS_N_INSNS (@var{n})} to specify a cost equal to @var{n} fast"}, {"sha": "093d3ef2d6d16078cb7cbc27b9d48678c5bc3818", "filename": "gcc/dojump.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -144,6 +144,8 @@ static GTY(()) rtx shift_test;\n static bool\n prefer_and_bit_test (enum machine_mode mode, int bitnum)\n {\n+  bool speed_p;\n+\n   if (and_test == 0)\n     {\n       /* Set up rtxes for the two variations.  Use NULL as a placeholder\n@@ -168,8 +170,9 @@ prefer_and_bit_test (enum machine_mode mode, int bitnum)\n \t\t\t\t\t\t mode);\n   XEXP (XEXP (shift_test, 0), 1) = GEN_INT (bitnum);\n \n-  return (rtx_cost (and_test, IF_THEN_ELSE, optimize_insn_for_speed_p ())\n-\t  <= rtx_cost (shift_test, IF_THEN_ELSE, optimize_insn_for_speed_p ()));\n+  speed_p = optimize_insn_for_speed_p ();\n+  return (rtx_cost (and_test, IF_THEN_ELSE, 0, speed_p)\n+\t  <= rtx_cost (shift_test, IF_THEN_ELSE, 0, speed_p));\n }\n \n /* Subroutine of do_jump, dealing with exploded comparisons of the type"}, {"sha": "0047cd09076024ff7952822438ee26f9bb98461d", "filename": "gcc/expmed.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -5431,7 +5431,7 @@ emit_store_flag (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \n \t  /* For the reverse comparison, use either an addition or a XOR.  */\n           if (want_add\n-\t      && rtx_cost (GEN_INT (normalizep), PLUS,\n+\t      && rtx_cost (GEN_INT (normalizep), PLUS, 1,\n \t\t\t   optimize_insn_for_speed_p ()) == 0)\n \t    {\n \t      tem = emit_store_flag_1 (subtarget, rcode, op0, op1, mode, 0,\n@@ -5442,7 +5442,7 @@ emit_store_flag (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \t\t\t\t     target, 0, OPTAB_WIDEN);\n \t    }\n           else if (!want_add\n-\t           && rtx_cost (trueval, XOR,\n+\t           && rtx_cost (trueval, XOR, 1,\n \t\t\t        optimize_insn_for_speed_p ()) == 0)\n \t    {\n \t      tem = emit_store_flag_1 (subtarget, rcode, op0, op1, mode, 0,\n@@ -5535,7 +5535,7 @@ emit_store_flag (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \n       /* Again, for the reverse comparison, use either an addition or a XOR.  */\n       if (want_add\n-\t  && rtx_cost (GEN_INT (normalizep), PLUS,\n+\t  && rtx_cost (GEN_INT (normalizep), PLUS, 1,\n \t\t       optimize_insn_for_speed_p ()) == 0)\n \t{\n \t  tem = emit_store_flag_1 (subtarget, rcode, op0, op1, mode, 0,\n@@ -5545,7 +5545,7 @@ emit_store_flag (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \t\t\t\tGEN_INT (normalizep), target, 0, OPTAB_WIDEN);\n \t}\n       else if (!want_add\n-\t       && rtx_cost (trueval, XOR,\n+\t       && rtx_cost (trueval, XOR, 1,\n \t\t\t    optimize_insn_for_speed_p ()) == 0)\n \t{\n \t  tem = emit_store_flag_1 (subtarget, rcode, op0, op1, mode, 0,"}, {"sha": "90251834e4ec45fa5e9504d126867668a26b6e78", "filename": "gcc/hooks.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -267,11 +267,12 @@ hook_bool_uintp_uintp_false (unsigned int *a ATTRIBUTE_UNUSED,\n }\n \n bool\n-hook_bool_rtx_int_int_intp_bool_false (rtx a ATTRIBUTE_UNUSED,\n-\t\t\t\t       int b ATTRIBUTE_UNUSED,\n-\t\t\t\t       int c ATTRIBUTE_UNUSED,\n-\t\t\t\t       int *d ATTRIBUTE_UNUSED,\n-\t\t\t\t       bool speed_p ATTRIBUTE_UNUSED)\n+hook_bool_rtx_int_int_int_intp_bool_false (rtx a ATTRIBUTE_UNUSED,\n+\t\t\t\t\t   int b ATTRIBUTE_UNUSED,\n+\t\t\t\t\t   int c ATTRIBUTE_UNUSED,\n+\t\t\t\t\t   int d ATTRIBUTE_UNUSED,\n+\t\t\t\t\t   int *e ATTRIBUTE_UNUSED,\n+\t\t\t\t\t   bool speed_p ATTRIBUTE_UNUSED)\n {\n   return false;\n }"}, {"sha": "156d708ac01244a1c80d4822a5f8c49f56f321f9", "filename": "gcc/hooks.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -53,7 +53,8 @@ extern bool hook_bool_const_tree_hwi_hwi_const_tree_true (const_tree,\n extern bool hook_bool_rtx_false (rtx);\n extern bool hook_bool_rtx_int_false (rtx, int);\n extern bool hook_bool_uintp_uintp_false (unsigned int *, unsigned int *);\n-extern bool hook_bool_rtx_int_int_intp_bool_false (rtx, int, int, int *, bool);\n+extern bool hook_bool_rtx_int_int_int_intp_bool_false (rtx, int, int, int,\n+\t\t\t\t\t\t       int *, bool);\n extern bool hook_bool_tree_tree_false (tree, tree);\n extern bool hook_bool_tree_tree_true (tree, tree);\n extern bool hook_bool_tree_bool_false (tree, bool);"}, {"sha": "8f1114ec2d9aa8c2f052f66a7f9b213ac42d41fb", "filename": "gcc/optabs.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -1204,21 +1204,21 @@ commutative_optab_p (optab binoptab)\n \t  || binoptab == umul_highpart_optab);\n }\n \n-/* X is to be used in mode MODE as an operand to BINOPTAB.  If we're\n+/* X is to be used in mode MODE as operand OPN to BINOPTAB.  If we're\n    optimizing, and if the operand is a constant that costs more than\n    1 instruction, force the constant into a register and return that\n    register.  Return X otherwise.  UNSIGNEDP says whether X is unsigned.  */\n \n static rtx\n avoid_expensive_constant (enum machine_mode mode, optab binoptab,\n-\t\t\t  rtx x, bool unsignedp)\n+\t\t\t  int opn, rtx x, bool unsignedp)\n {\n   bool speed = optimize_insn_for_speed_p ();\n \n   if (mode != VOIDmode\n       && optimize\n       && CONSTANT_P (x)\n-      && rtx_cost (x, binoptab->code, speed) > set_src_cost (x, speed))\n+      && rtx_cost (x, binoptab->code, opn, speed) > set_src_cost (x, speed))\n     {\n       if (CONST_INT_P (x))\n \t{\n@@ -1265,9 +1265,9 @@ expand_binop_directly (enum machine_mode mode, optab binoptab,\n     }\n \n   /* If we are optimizing, force expensive constants into a register.  */\n-  xop0 = avoid_expensive_constant (xmode0, binoptab, xop0, unsignedp);\n+  xop0 = avoid_expensive_constant (xmode0, binoptab, 0, xop0, unsignedp);\n   if (!shift_optab_p (binoptab))\n-    xop1 = avoid_expensive_constant (xmode1, binoptab, xop1, unsignedp);\n+    xop1 = avoid_expensive_constant (xmode1, binoptab, 1, xop1, unsignedp);\n \n   /* In case the insn wants input operands in modes different from\n      those of the actual operands, convert the operands.  It would\n@@ -1479,10 +1479,10 @@ expand_binop (enum machine_mode mode, optab binoptab, rtx op0, rtx op1,\n \t\t&& mclass == MODE_INT)\n \t      {\n \t\tno_extend = 1;\n-\t\txop0 = avoid_expensive_constant (mode, binoptab,\n+\t\txop0 = avoid_expensive_constant (mode, binoptab, 0,\n \t\t\t\t\t\t xop0, unsignedp);\n \t\tif (binoptab != ashl_optab)\n-\t\t  xop1 = avoid_expensive_constant (mode, binoptab,\n+\t\t  xop1 = avoid_expensive_constant (mode, binoptab, 1,\n \t\t\t\t\t\t   xop1, unsignedp);\n \t      }\n \n@@ -2216,8 +2216,8 @@ expand_twoval_binop (optab binoptab, rtx op0, rtx op1, rtx targ0, rtx targ1,\n       rtx xop0 = op0, xop1 = op1;\n \n       /* If we are optimizing, force expensive constants into a register.  */\n-      xop0 = avoid_expensive_constant (mode0, binoptab, xop0, unsignedp);\n-      xop1 = avoid_expensive_constant (mode1, binoptab, xop1, unsignedp);\n+      xop0 = avoid_expensive_constant (mode0, binoptab, 0, xop0, unsignedp);\n+      xop1 = avoid_expensive_constant (mode1, binoptab, 1, xop1, unsignedp);\n \n       create_fixed_operand (&ops[0], targ0);\n       create_convert_operand_from (&ops[1], op0, mode, unsignedp);\n@@ -3790,12 +3790,12 @@ prepare_cmp_insn (rtx x, rtx y, enum rtx_code comparison, rtx size,\n \n   /* If we are optimizing, force expensive constants into a register.  */\n   if (CONSTANT_P (x) && optimize\n-      && (rtx_cost (x, COMPARE, optimize_insn_for_speed_p ())\n+      && (rtx_cost (x, COMPARE, 0, optimize_insn_for_speed_p ())\n           > COSTS_N_INSNS (1)))\n     x = force_reg (mode, x);\n \n   if (CONSTANT_P (y) && optimize\n-      && (rtx_cost (y, COMPARE, optimize_insn_for_speed_p ())\n+      && (rtx_cost (y, COMPARE, 1, optimize_insn_for_speed_p ())\n           > COSTS_N_INSNS (1)))\n     y = force_reg (mode, y);\n "}, {"sha": "5323dcc1b4ebba64b3cbc7092534c357f0926a3e", "filename": "gcc/rtl.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -1196,9 +1196,10 @@ costs_add_n_insns (struct full_rtx_costs *c, int n)\n }\n \n extern void init_rtlanal (void);\n-extern int rtx_cost (rtx, enum rtx_code, bool);\n+extern int rtx_cost (rtx, enum rtx_code, int, bool);\n extern int address_cost (rtx, enum machine_mode, addr_space_t, bool);\n-extern void get_full_rtx_cost (rtx, enum rtx_code, struct full_rtx_costs *);\n+extern void get_full_rtx_cost (rtx, enum rtx_code, int,\n+\t\t\t       struct full_rtx_costs *);\n extern unsigned int subreg_lsb (const_rtx);\n extern unsigned int subreg_lsb_1 (enum machine_mode, enum machine_mode,\n \t\t\t\t  unsigned int);\n@@ -1224,15 +1225,15 @@ extern int low_bitmask_len (enum machine_mode, unsigned HOST_WIDE_INT);\n static inline int\n set_rtx_cost (rtx x, bool speed_p)\n {\n-  return rtx_cost (x, INSN, speed_p);\n+  return rtx_cost (x, INSN, 4, speed_p);\n }\n \n /* Like set_rtx_cost, but return both the speed and size costs in C.  */\n \n static inline void\n get_full_set_rtx_cost (rtx x, struct full_rtx_costs *c)\n {\n-  get_full_rtx_cost (x, INSN, c);\n+  get_full_rtx_cost (x, INSN, 4, c);\n }\n \n /* Return the cost of moving X into a register, relative to the cost\n@@ -1242,15 +1243,15 @@ get_full_set_rtx_cost (rtx x, struct full_rtx_costs *c)\n static inline int\n set_src_cost (rtx x, bool speed_p)\n {\n-  return rtx_cost (x, SET, speed_p);\n+  return rtx_cost (x, SET, 1, speed_p);\n }\n \n /* Like set_src_cost, but return both the speed and size costs in C.  */\n \n static inline void\n get_full_set_src_cost (rtx x, struct full_rtx_costs *c)\n {\n-  get_full_rtx_cost (x, SET, c);\n+  get_full_rtx_cost (x, SET, 1, c);\n }\n #endif\n "}, {"sha": "7fa3ca6f315b166872944055f7ea8489252da7d4", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -3674,11 +3674,12 @@ label_is_jump_target_p (const_rtx label, const_rtx jump_insn)\n    Another is in rtl generation, to pick the cheapest way to multiply.\n    Other uses like the latter are expected in the future.\n \n-   SPEED parameter specify whether costs optimized for speed or size should\n+   X appears as operand OPNO in an expression with code OUTER_CODE.\n+   SPEED specifies whether costs optimized for speed or size should\n    be returned.  */\n \n int\n-rtx_cost (rtx x, enum rtx_code outer_code ATTRIBUTE_UNUSED, bool speed)\n+rtx_cost (rtx x, enum rtx_code outer_code, int opno, bool speed)\n {\n   int i, j;\n   enum rtx_code code;\n@@ -3726,7 +3727,7 @@ rtx_cost (rtx x, enum rtx_code outer_code ATTRIBUTE_UNUSED, bool speed)\n       break;\n \n     default:\n-      if (targetm.rtx_costs (x, code, outer_code, &total, speed))\n+      if (targetm.rtx_costs (x, code, outer_code, opno, &total, speed))\n \treturn total;\n       break;\n     }\n@@ -3737,22 +3738,23 @@ rtx_cost (rtx x, enum rtx_code outer_code ATTRIBUTE_UNUSED, bool speed)\n   fmt = GET_RTX_FORMAT (code);\n   for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n     if (fmt[i] == 'e')\n-      total += rtx_cost (XEXP (x, i), code, speed);\n+      total += rtx_cost (XEXP (x, i), code, i, speed);\n     else if (fmt[i] == 'E')\n       for (j = 0; j < XVECLEN (x, i); j++)\n-\ttotal += rtx_cost (XVECEXP (x, i, j), code, speed);\n+\ttotal += rtx_cost (XVECEXP (x, i, j), code, i, speed);\n \n   return total;\n }\n \n /* Fill in the structure C with information about both speed and size rtx\n-   costs for X, with outer code OUTER.  */\n+   costs for X, which is operand OPNO in an expression with code OUTER.  */\n \n void\n-get_full_rtx_cost (rtx x, enum rtx_code outer, struct full_rtx_costs *c)\n+get_full_rtx_cost (rtx x, enum rtx_code outer, int opno,\n+\t\t   struct full_rtx_costs *c)\n {\n-  c->speed = rtx_cost (x, outer, true);\n-  c->size = rtx_cost (x, outer, false);\n+  c->speed = rtx_cost (x, outer, opno, true);\n+  c->size = rtx_cost (x, outer, opno, false);\n }\n \n \f\n@@ -3780,7 +3782,7 @@ address_cost (rtx x, enum machine_mode mode, addr_space_t as, bool speed)\n int\n default_address_cost (rtx x, bool speed)\n {\n-  return rtx_cost (x, MEM, speed);\n+  return rtx_cost (x, MEM, 0, speed);\n }\n \f\n "}, {"sha": "479e1a111fc2b77d435d56da2a16e6fbbdaf3445", "filename": "gcc/target.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f932c4432b9b806d58781aa56ad7b3ba5e82f9/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "patch": "@@ -1645,8 +1645,8 @@ DEFHOOKPOD\n DEFHOOK\n (rtx_costs,\n  \"\",\n- bool, (rtx x, int code, int outer_code, int *total, bool speed),\n- hook_bool_rtx_int_int_intp_bool_false)\n+ bool, (rtx x, int code, int outer_code, int opno, int *total, bool speed),\n+ hook_bool_rtx_int_int_int_intp_bool_false)\n \n /* Compute the cost of X, used as an address.  Never called with\n    invalid addresses.  */"}]}