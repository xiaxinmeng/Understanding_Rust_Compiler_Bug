{"sha": "b1705a63884677d72924b7044610eb687287688b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE3MDVhNjM4ODQ2NzdkNzI5MjRiNzA0NDYxMGViNjg3Mjg3Njg4Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-11-05T15:24:08Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-11-05T15:24:08Z"}, "message": "optional: Use __and_<> and __not_<> in conditions.\n\n2013-11-05  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/experimental/optional: Use __and_<> and __not_<> in\n\tconditions. Style fixes.\n\t(__constexpr_addressof, swap): Make inline.\n\t* testsuite/experimental/optional/cons/copy.cc: Adjust constants for\n\t32-bit targets.\n\t* testsuite/experimental/optional/cons/move.cc: Likewise.\n\t* testsuite/experimental/optional/cons/value.cc: Likewise.\n\t* testsuite/experimental/optional/constexpr/cons/value.cc: Likewise.\n\nCo-Authored-By: Paolo Carlini <paolo.carlini@oracle.com>\n\nFrom-SVN: r204402", "tree": {"sha": "d6e4e2b8193c0111558d5f9827472cc124477df3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6e4e2b8193c0111558d5f9827472cc124477df3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1705a63884677d72924b7044610eb687287688b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1705a63884677d72924b7044610eb687287688b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1705a63884677d72924b7044610eb687287688b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1705a63884677d72924b7044610eb687287688b/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b5d6da2aa84c197ae8c02961ddab6e59f644f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b5d6da2aa84c197ae8c02961ddab6e59f644f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33b5d6da2aa84c197ae8c02961ddab6e59f644f2"}], "stats": {"total": 267, "additions": 138, "deletions": 129}, "files": [{"sha": "d94647999795eda5cd1721ede2bc37df86109f5e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1705a63884677d72924b7044610eb687287688b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1705a63884677d72924b7044610eb687287688b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b1705a63884677d72924b7044610eb687287688b", "patch": "@@ -1,3 +1,15 @@\n+2013-11-05  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/experimental/optional: Use __and_<> and __not_<> in\n+\tconditions. Style fixes.\n+\t(__constexpr_addressof, swap): Make inline.\n+\t* testsuite/experimental/optional/cons/copy.cc: Adjust constants for\n+\t32-bit targets.\n+\t* testsuite/experimental/optional/cons/move.cc: Likewise.\n+\t* testsuite/experimental/optional/cons/value.cc: Likewise.\n+\t* testsuite/experimental/optional/constexpr/cons/value.cc: Likewise.\n+\n 2013-11-01  Michael Brune  <lucdanton@free.fr>\n \n \t* include/bits/enable_special_members.h: New."}, {"sha": "5882ff59296c3f47589fddd471a247642179218f", "filename": "libstdc++-v3/include/experimental/optional", "status": "modified", "additions": 88, "deletions": 93, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1705a63884677d72924b7044610eb687287688b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1705a63884677d72924b7044610eb687287688b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional?ref=b1705a63884677d72924b7044610eb687287688b", "patch": "@@ -129,7 +129,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct _Has_addressof_impl<_Tp,\n       decltype( std::declval<const _Tp&>().operator&(), void() )>\n-    : std::true_type { };\n+      : std::true_type { };\n \n   /**\n     * @brief Trait that detects the presence of an overloaded unary operator&.\n@@ -157,7 +157,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     */\n   template<typename _Tp, typename enable_if<_Has_addressof<_Tp>::value,\n                                             int>::type...>\n-    _Tp* __constexpr_addressof(_Tp& __t)\n+    inline _Tp* __constexpr_addressof(_Tp& __t)\n     { return std::__addressof(__t); }\n \n   /**\n@@ -235,32 +235,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         if (this->_M_engaged && __other._M_engaged)\n           this->_M_get() = __other._M_get();\n         else\n-        {\n-          if (__other._M_engaged)\n-            this->_M_construct(__other._M_get());\n-          else\n-            this->_M_reset();\n-        }\n+\t  {\n+\t    if (__other._M_engaged)\n+\t      this->_M_construct(__other._M_get());\n+\t    else\n+\t      this->_M_reset();\n+\t  }\n \n         return *this;\n       }\n \n       _Optional_base&\n       operator=(_Optional_base&& __other)\n-      noexcept(is_nothrow_move_constructible<_Tp>()\n-               && is_nothrow_move_assignable<_Tp>())\n+      noexcept(__and_<is_nothrow_move_constructible<_Tp>,\n+\t\t      is_nothrow_move_assignable<_Tp>>())\n       {\n-        if (this->_M_engaged && __other._M_engaged)\n-          this->_M_get() = std::move(__other._M_get());\n-        else\n-        {\n-          if (__other._M_engaged)\n-            this->_M_construct(std::move(__other._M_get()));\n-          else\n-            this->_M_reset();\n-        }\n-\n-        return *this;\n+\tif (this->_M_engaged && __other._M_engaged)\n+\t  this->_M_get() = std::move(__other._M_get());\n+\telse\n+\t  {\n+\t    if (__other._M_engaged)\n+\t      this->_M_construct(std::move(__other._M_get()));\n+\t    else\n+\t      this->_M_reset();\n+\t  }\n+\treturn *this;\n       }\n \n       // [X.Y.4.2] Destructor.\n@@ -373,35 +372,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Optional_base&\n       operator=(const _Optional_base& __other)\n       {\n-        if (this->_M_engaged && __other._M_engaged)\n-          this->_M_get() = __other._M_get();\n-        else\n-        {\n-          if (__other._M_engaged)\n-            this->_M_construct(__other._M_get());\n-          else\n-            this->_M_reset();\n-        }\n-\n-        return *this;\n+\tif (this->_M_engaged && __other._M_engaged)\n+\t  this->_M_get() = __other._M_get();\n+\telse\n+\t  {\n+\t    if (__other._M_engaged)\n+\t      this->_M_construct(__other._M_get());\n+\t    else\n+\t      this->_M_reset();\n+\t  }\n+\treturn *this;\n       }\n \n       _Optional_base&\n       operator=(_Optional_base&& __other)\n-      noexcept(is_nothrow_move_constructible<_Tp>()\n-               && is_nothrow_move_assignable<_Tp>())\n+      noexcept(__and_<is_nothrow_move_constructible<_Tp>,\n+\t\t      is_nothrow_move_assignable<_Tp>>())\n       {\n-        if (this->_M_engaged && __other._M_engaged)\n-          this->_M_get() = std::move(__other._M_get());\n-        else\n-        {\n-          if (__other._M_engaged)\n-            this->_M_construct(std::move(__other._M_get()));\n-          else\n-            this->_M_reset();\n-        }\n-\n-        return *this;\n+\tif (this->_M_engaged && __other._M_engaged)\n+\t  this->_M_get() = std::move(__other._M_get());\n+\telse\n+\t  {\n+\t    if (__other._M_engaged)\n+\t      this->_M_construct(std::move(__other._M_get()));\n+\t    else\n+\t      this->_M_reset();\n+\t  }\n+\treturn *this;\n       }\n \n       // Sole difference\n@@ -445,9 +442,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     private:\n       struct _Empty_byte { };\n-      union {\n-          _Empty_byte _M_empty;\n-          _Stored_type _M_payload;\n+      union\n+      {\n+\t_Empty_byte _M_empty;\n+\t_Stored_type _M_payload;\n       };\n       bool _M_engaged = false;\n     };\n@@ -462,22 +460,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         // Copy constructor.\n         is_copy_constructible<_Tp>::value,\n         // Copy assignment.\n-        is_copy_constructible<_Tp>::value\n-        && is_copy_assignable<_Tp>::value,\n+        __and_<is_copy_constructible<_Tp>, is_copy_assignable<_Tp>>::value,\n         // Move constructor.\n         is_move_constructible<_Tp>::value,\n         // Move assignment.\n-        is_move_constructible<_Tp>::value\n-        && is_move_assignable<_Tp>::value,\n+        __and_<is_move_constructible<_Tp>, is_move_assignable<_Tp>>::value,\n         // Unique tag type.\n         optional<_Tp>>\n     {\n-      static_assert(!is_same<typename remove_cv<_Tp>::type,\n-                             nullopt_t>()\n-                    && !is_same<typename remove_cv<_Tp>::type,\n-                             in_place_t>()\n-                    && !is_reference<_Tp>(),\n-                    \"Invalid instantiation of optional<T>.\");\n+      static_assert(__and_<__not_<is_same<typename remove_cv<_Tp>::type,\n+\t\t\t\t\t  nullopt_t>>,\n+\t\t\t   __not_<is_same<typename remove_cv<_Tp>::type,\n+\t\t\t\t\t  in_place_t>>,\n+\t\t\t   __not_<is_reference<_Tp>>>(),\n+                    \"Invalid instantiation of optional<T>\");\n \n     private:\n       using _Base = _Optional_base<_Tp>;\n@@ -503,9 +499,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                >::type\n         operator=(_Up&& __u)\n         {\n-          static_assert(is_constructible<_Tp, _Up>()\n-                        && is_assignable<_Tp&, _Up>(),\n-                        \"Cannot assign to value type from argument.\");\n+          static_assert(__and_<is_constructible<_Tp, _Up>,\n+\t\t\t       is_assignable<_Tp&, _Up>>(),\n+                        \"Cannot assign to value type from argument\");\n \n           if (this->_M_is_engaged())\n             this->_M_get() = std::forward<_Up>(__u);\n@@ -520,7 +516,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \templace(_Args&&... __args)\n \t{\n \t  static_assert(is_constructible<_Tp, _Args&&...>(),\n-\t\t\t\"Cannot emplace value type from arguments.\");\n+\t\t\t\"Cannot emplace value type from arguments\");\n \n \t  this->_M_reset();\n \t  this->_M_construct(std::forward<_Args>(__args)...);\n@@ -551,15 +547,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         if (this->_M_is_engaged() && __other._M_is_engaged())\n           swap(this->_M_get(), __other._M_get());\n         else if (this->_M_is_engaged())\n-        {\n-          __other._M_construct(std::move(this->_M_get()));\n-          this->_M_destruct();\n-        }\n+\t  {\n+\t    __other._M_construct(std::move(this->_M_get()));\n+\t    this->_M_destruct();\n+\t  }\n         else if (__other._M_is_engaged())\n-        {\n-          this->_M_construct(std::move(__other._M_get()));\n-          __other._M_destruct();\n-        }\n+\t  {\n+\t    this->_M_construct(std::move(__other._M_get()));\n+\t    __other._M_destruct();\n+\t  }\n       }\n \n       // [X.Y.4.5] Observers.\n@@ -585,11 +581,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr const _Tp&\n       value() const\n       {\n-        return this->_M_is_engaged() ?\n-          this->_M_get() :\n-          (__throw_bad_optional_access(\"Attempt to access value of a disengaged\"\n-                                       \" optional object.\"),\n-           this->_M_get());\n+\treturn this->_M_is_engaged()\n+\t  ?  this->_M_get()\n+\t  : (__throw_bad_optional_access(\"Attempt to access value of a \"\n+\t\t                         \"disengaged optional object\"),\n+\t     this->_M_get());\n       }\n \n       _Tp&\n@@ -598,34 +594,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         if (this->_M_is_engaged())\n           return this->_M_get();\n \n-        __throw_bad_optional_access(\"Attempt to access value of a disengaged\"\n-                                    \" optional object.\");\n+        __throw_bad_optional_access(\"Attempt to access value of a \"\n+\t\t\t\t    \"disengaged optional object\");\n       }\n \n       template<typename _Up>\n \tconstexpr _Tp\n \tvalue_or(_Up&& __u) const&\n \t{\n-\t  static_assert(is_copy_constructible<_Tp>()\n-\t\t\t&& is_convertible<_Up&&, _Tp>(),\n-\t\t\t\"Cannot return value.\");\n+\t  static_assert(__and_<is_copy_constructible<_Tp>,\n+\t\t\t       is_convertible<_Up&&, _Tp>>(),\n+\t\t\t\"Cannot return value\");\n \n-\t  return this->_M_is_engaged() ?\n-\t    this->_M_get() :\n-\t    static_cast<_Tp>(std::forward<_Up>(__u));\n+\t  return this->_M_is_engaged()\n+\t    ? this->_M_get()\n+\t    : static_cast<_Tp>(std::forward<_Up>(__u));\n \t}\n \n       template<typename _Up>\n \t_Tp\n \tvalue_or(_Up&& __u) &&\n \t{\n-\t  static_assert( is_move_constructible<_Tp>()\n-\t\t\t&& is_convertible<_Up&&, _Tp>(),\n-\t\t\t\"Cannot return value.\" );\n+\t  static_assert(__and_<is_move_constructible<_Tp>,\n+\t\t\t       is_convertible<_Up&&, _Tp>>(),\n+\t\t\t\"Cannot return value\" );\n \n-\t  return this->_M_is_engaged() ?\n-\t    std::move(this->_M_get()) :\n-\t    static_cast<_Tp>(std::forward<_Up>(__u));\n+\t  return this->_M_is_engaged()\n+\t    ? std::move(this->_M_get())\n+\t    : static_cast<_Tp>(std::forward<_Up>(__u));\n \t}\n     };\n \n@@ -635,7 +631,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator==(const optional<_Tp>& __lhs, const optional<_Tp>& __rhs)\n     {\n       return static_cast<bool>(__lhs) == static_cast<bool>(__rhs)\n-        && (!__lhs || *__lhs == *__rhs);\n+\t     && (!__lhs || *__lhs == *__rhs);\n     }\n \n   template<typename _Tp>\n@@ -647,8 +643,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr bool\n     operator<(const optional<_Tp>& __lhs, const optional<_Tp>& __rhs)\n     {\n-      return static_cast<bool>(__rhs)\n-        && (!__lhs || *__lhs < *__rhs);\n+      return static_cast<bool>(__rhs) && (!__lhs || *__lhs < *__rhs);\n     }\n \n   template<typename _Tp>\n@@ -790,7 +785,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // [X.Y.11]\n   template<typename _Tp>\n-    void\n+    inline void\n     swap(optional<_Tp>& __lhs, optional<_Tp>& __rhs)\n     noexcept(noexcept(__lhs.swap(__rhs)))\n     { __lhs.swap(__rhs); }"}, {"sha": "53c23a197ca2071c2ecf31bf035b07b0ba8e58ad", "filename": "libstdc++-v3/testsuite/experimental/optional/cons/copy.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1705a63884677d72924b7044610eb687287688b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1705a63884677d72924b7044610eb687287688b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fcopy.cc?ref=b1705a63884677d72924b7044610eb687287688b", "patch": "@@ -63,11 +63,12 @@ int main()\n   }\n \n   {\n-    std::experimental::optional<long> o { std::experimental::in_place, 0x1234ABCDF1E2D3C4 };\n+    const long val = 0x1234ABCD;\n+    std::experimental::optional<long> o { std::experimental::in_place, val};\n     auto copy = o;\n     VERIFY( copy );\n-    VERIFY( *copy == 0x1234ABCDF1E2D3C4 );\n-    VERIFY( o && o == 0x1234ABCDF1E2D3C4 );\n+    VERIFY( *copy == val );\n+    VERIFY( o && o == val );\n   }\n \n   {"}, {"sha": "ba31699091098bb199ea952c2a542902a39e0369", "filename": "libstdc++-v3/testsuite/experimental/optional/cons/move.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1705a63884677d72924b7044610eb687287688b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1705a63884677d72924b7044610eb687287688b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fmove.cc?ref=b1705a63884677d72924b7044610eb687287688b", "patch": "@@ -63,11 +63,12 @@ int main()\n   }\n \n   {\n-    std::experimental::optional<long> o { std::experimental::in_place, 0x1234ABCDF1E2D3C4 };\n+    const long val = 0x1234ABCD;\n+    std::experimental::optional<long> o { std::experimental::in_place, val};\n     auto moved_to = std::move(o);\n     VERIFY( moved_to );\n-    VERIFY( *moved_to == 0x1234ABCDF1E2D3C4 );\n-    VERIFY( o && *o == 0x1234ABCDF1E2D3C4 );\n+    VERIFY( *moved_to == val );\n+    VERIFY( o && *o == val );\n   }\n \n   {"}, {"sha": "1eba62d6d50ca5abdba35b3d35cf911fad927a86", "filename": "libstdc++-v3/testsuite/experimental/optional/cons/value.cc", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1705a63884677d72924b7044610eb687287688b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1705a63884677d72924b7044610eb687287688b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fvalue.cc?ref=b1705a63884677d72924b7044610eb687287688b", "patch": "@@ -66,51 +66,51 @@ int main()\n   // [20.5.4.1] Constructors\n \n   {\n-    auto i = 0x1234ABCDF1E2D3C4;\n+    auto i = 0x1234ABCD;\n     std::experimental::optional<long> o { i };\n     VERIFY( o );\n-    VERIFY( *o == 0x1234ABCDF1E2D3C4 );\n-    VERIFY( i == 0x1234ABCDF1E2D3C4 );\n+    VERIFY( *o == 0x1234ABCD );\n+    VERIFY( i == 0x1234ABCD );\n   }\n \n   {\n-    auto i = 0x1234ABCDF1E2D3C4;\n+    auto i = 0x1234ABCD;\n     std::experimental::optional<long> o = i;\n     VERIFY( o );\n-    VERIFY( *o == 0x1234ABCDF1E2D3C4 );\n-    VERIFY( i == 0x1234ABCDF1E2D3C4 );\n+    VERIFY( *o == 0x1234ABCD );\n+    VERIFY( i == 0x1234ABCD );\n   }\n \n   {\n-    auto i = 0x1234ABCDF1E2D3C4;\n+    auto i = 0x1234ABCD;\n     std::experimental::optional<long> o = { i };\n     VERIFY( o );\n-    VERIFY( *o == 0x1234ABCDF1E2D3C4 );\n-    VERIFY( i == 0x1234ABCDF1E2D3C4 );\n+    VERIFY( *o == 0x1234ABCD );\n+    VERIFY( i == 0x1234ABCD );\n   }\n \n   {\n-    auto i = 0x1234ABCDF1E2D3C4;\n+    auto i = 0x1234ABCD;\n     std::experimental::optional<long> o { std::move(i) };\n     VERIFY( o );\n-    VERIFY( *o == 0x1234ABCDF1E2D3C4 );\n-    VERIFY( i == 0x1234ABCDF1E2D3C4 );\n+    VERIFY( *o == 0x1234ABCD );\n+    VERIFY( i == 0x1234ABCD );\n   }\n \n   {\n-    auto i = 0x1234ABCDF1E2D3C4;\n+    auto i = 0x1234ABCD;\n     std::experimental::optional<long> o = std::move(i);\n     VERIFY( o );\n-    VERIFY( *o == 0x1234ABCDF1E2D3C4 );\n-    VERIFY( i == 0x1234ABCDF1E2D3C4 );\n+    VERIFY( *o == 0x1234ABCD );\n+    VERIFY( i == 0x1234ABCD );\n   }\n \n   {\n-    auto i = 0x1234ABCDF1E2D3C4;\n+    auto i = 0x1234ABCD;\n     std::experimental::optional<long> o = { std::move(i) };\n     VERIFY( o );\n-    VERIFY( *o == 0x1234ABCDF1E2D3C4 );\n-    VERIFY( i == 0x1234ABCDF1E2D3C4 );\n+    VERIFY( *o == 0x1234ABCD );\n+    VERIFY( i == 0x1234ABCD );\n   }\n \n   {"}, {"sha": "eb7233b261794a226d28f06f28a03079be11e3f5", "filename": "libstdc++-v3/testsuite/experimental/optional/constexpr/cons/value.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1705a63884677d72924b7044610eb687287688b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fconstexpr%2Fcons%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1705a63884677d72924b7044610eb687287688b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fconstexpr%2Fcons%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fconstexpr%2Fcons%2Fvalue.cc?ref=b1705a63884677d72924b7044610eb687287688b", "patch": "@@ -26,44 +26,44 @@ int main()\n   // [20.5.4.1] Constructors\n \n   {\n-    constexpr auto i = 0x1234ABCDF1E2D3C4;\n+    constexpr long i = 0x1234ABCD;\n     constexpr std::experimental::optional<long> o { i };\n     static_assert( o, \"\" );\n-    static_assert( *o == 0x1234ABCDF1E2D3C4, \"\" );\n+    static_assert( *o == 0x1234ABCD, \"\" );\n   }\n \n   {\n-    constexpr auto i = 0x1234ABCDF1E2D3C4;\n+    constexpr long i = 0x1234ABCD;\n     constexpr std::experimental::optional<long> o = i;\n     static_assert( o, \"\" );\n-    static_assert( *o == 0x1234ABCDF1E2D3C4, \"\" );\n+    static_assert( *o == 0x1234ABCD, \"\" );\n   }\n \n   {\n-    constexpr auto i = 0x1234ABCDF1E2D3C4;\n+    constexpr long i = 0x1234ABCD;\n     constexpr std::experimental::optional<long> o = { i };\n     static_assert( o, \"\" );\n-    static_assert( *o == 0x1234ABCDF1E2D3C4, \"\" );\n+    static_assert( *o == 0x1234ABCD, \"\" );\n   }\n \n   {\n-    constexpr auto i = 0x1234ABCDF1E2D3C4;\n+    constexpr long i = 0x1234ABCD;\n     constexpr std::experimental::optional<long> o { std::move(i) };\n     static_assert( o, \"\" );\n-    static_assert( *o == 0x1234ABCDF1E2D3C4, \"\" );\n+    static_assert( *o == 0x1234ABCD, \"\" );\n   }\n \n   {\n-    constexpr auto i = 0x1234ABCDF1E2D3C4;\n+    constexpr long i = 0x1234ABCD;\n     constexpr std::experimental::optional<long> o = std::move(i);\n     static_assert( o, \"\" );\n-    static_assert( *o == 0x1234ABCDF1E2D3C4, \"\" );\n+    static_assert( *o == 0x1234ABCD, \"\" );\n   }\n \n   {\n-    constexpr auto i = 0x1234ABCDF1E2D3C4;\n+    constexpr long i = 0x1234ABCD;\n     constexpr std::experimental::optional<long> o = { std::move(i) };\n     static_assert( o, \"\" );\n-    static_assert( *o == 0x1234ABCDF1E2D3C4, \"\" );\n+    static_assert( *o == 0x1234ABCD, \"\" );\n   }\n }"}]}