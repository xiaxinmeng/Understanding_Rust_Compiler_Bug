{"sha": "6d4587f7359a633dc610f5d0ad95c023f672c5d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ0NTg3ZjczNTlhNjMzZGM2MTBmNWQwYWQ5NWMwMjNmNjcyYzVkOQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-05-10T00:07:23Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-05-10T00:07:23Z"}, "message": "cppinit.c (cpp_post_options): Shut off macro expansion if -fpreprocessed.\n\n\t* cppinit.c (cpp_post_options): Shut off macro expansion if\n\t-fpreprocessed.\n\t* cpplib.c (_cpp_handle_directive): If -fpreprocessed, accept\n\tIN_I directives only if the # is in column 1 and the directive\n\tname begins in column 2.\n\t* cppmain.c (scan_buffer): Insert a space between # and an\n\tidentifier, when that identifier is a directive name.\n\n\t* tradcpp.c (struct file_buf): Add a pointer to the next entry\n\tin the header search path.\n\t(enum node_type): Add T_INCLUDE_NEXT.\n\t(directive_table): Add entry for include_next.\n\t(do_include_next): New function.\n\t(process_include): New routine, broken out of do_include.\n\t(finclude): Insert 'nhd' argument, to be copied into\n\tnext_header_dir of the new buffer.\n\t(main): Adjust to match.\n\t* gsyslimits.h, limity.h: Un-indent #include_next.\n\ntestsuite:\n\t* gcc.dg/cpp/direct2.c: New test.\n\t* gcc.dg/cpp/direct2s.c: New test.\n\n\t* gcc.c-torture/execute/920730-1t.c: #undef __GNUC__ at head.\n\nFrom-SVN: r41932", "tree": {"sha": "dbbe9eb784b1862db1081f71d85145cf0a696198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbbe9eb784b1862db1081f71d85145cf0a696198"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d4587f7359a633dc610f5d0ad95c023f672c5d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4587f7359a633dc610f5d0ad95c023f672c5d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d4587f7359a633dc610f5d0ad95c023f672c5d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4587f7359a633dc610f5d0ad95c023f672c5d9/comments", "author": null, "committer": null, "parents": [{"sha": "6ebe3121aa8e693a53f4964bd9b058bf73cb54bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ebe3121aa8e693a53f4964bd9b058bf73cb54bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ebe3121aa8e693a53f4964bd9b058bf73cb54bf"}], "stats": {"total": 392, "additions": 314, "deletions": 78}, "files": [{"sha": "a081dfe90a61ca9d8c4c4c1cb4e911d8f66eb835", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d4587f7359a633dc610f5d0ad95c023f672c5d9", "patch": "@@ -1,3 +1,24 @@\n+2001-05-09  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* cppinit.c (cpp_post_options): Shut off macro expansion if\n+\t-fpreprocessed.\n+\t* cpplib.c (_cpp_handle_directive): If -fpreprocessed, accept\n+\tIN_I directives only if the # is in column 1 and the directive\n+\tname begins in column 2.\n+\t* cppmain.c (scan_buffer): Insert a space between # and an\n+\tidentifier, when that identifier is a directive name.\n+\n+\t* tradcpp.c (struct file_buf): Add a pointer to the next entry\n+\tin the header search path.\n+\t(enum node_type): Add T_INCLUDE_NEXT.\n+\t(directive_table): Add entry for include_next.\n+\t(do_include_next): New function.\n+\t(process_include): New routine, broken out of do_include.\n+\t(finclude): Insert 'nhd' argument, to be copied into\n+\tnext_header_dir of the new buffer.\n+\t(main): Adjust to match.\n+\t* gsyslimits.h, limity.h: Un-indent #include_next.\n+\n 2001-05-09  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* objc.texi: Move from ../libobjc/objc-features.texi.  Adjust for\n@@ -466,7 +487,7 @@ Fri May  4 13:10:03 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t(REG_OK_FOR_INDEX_P): Use INT_REG_OK_FOR_INDEX_P.\n \t(REG_OK_FOR_BASE_P): Use INT_REG_OK_FOR_BASE_P.\n \t(LEGITIMATE_OFFSET_ADDRESS_P): Use INT_REG_OK_FOR_INDEX_P and\n-        INT_REG_OK_FOR_BASE_P instead of REG_OK_FOR_INDEX_P and\n+\tINT_REG_OK_FOR_BASE_P instead of REG_OK_FOR_INDEX_P and\n \tREG_OK_FOR_BASE_P. Take an additional parameter.\n \t(LEGITIMATE_INDEXED_ADDRESS_P): Likeewise.\n \t(LEGITIMATE_INDIRECT_ADDRESS_P): Likewise."}, {"sha": "fc15db4451ab2f30279b04377eab4c1e5e20c7cb", "filename": "gcc/cppinit.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=6d4587f7359a633dc610f5d0ad95c023f672c5d9", "patch": "@@ -1716,6 +1716,11 @@ cpp_post_options (pfile)\n   if (CPP_OPTION (pfile, user_label_prefix) == NULL)\n     CPP_OPTION (pfile, user_label_prefix) = USER_LABEL_PREFIX;\n \n+  /* Permanently disable macro expansion if we are rescanning\n+     preprocessed text.  */\n+  if (CPP_OPTION (pfile, preprocessed))\n+    pfile->state.prevent_expansion = 1;\n+\n   /* We need to do this after option processing and before\n      cpp_start_read, as cppmain.c relies on the options->no_output to\n      set its callbacks correctly before calling cpp_start_read.  */"}, {"sha": "97e0cf21fdd6db23eb3606a3d7d8cf830875a765", "filename": "gcc/cpplib.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=6d4587f7359a633dc610f5d0ad95c023f672c5d9", "patch": "@@ -311,7 +311,32 @@ _cpp_handle_directive (pfile, indented)\n \n       /* If we are rescanning preprocessed input, only directives tagged\n \t with IN_I are honored, and the warnings below are suppressed.  */\n-      if (! CPP_OPTION (pfile, preprocessed) || dir->flags & IN_I)\n+      if (CPP_OPTION (pfile, preprocessed))\n+\t{\n+\t  /* Kluge alert.  In order to be sure that code like this\n+\t     #define HASH #\n+\t     HASH define foo bar\n+\t     does not cause '#define foo bar' to get executed when\n+\t     compiled with -save-temps, we recognize directives in\n+\t     -fpreprocessed mode only if the # is in column 1 and the\n+\t     directive name starts in column 2.  This output can only\n+\t     be generated by the directive callbacks in cppmain.c (see\n+\t     also the special case in scan_buffer).  */\n+\t  if (dir->flags & IN_I && !indented && !(dname.flags & PREV_WHITE))\n+\t    (*dir->handler) (pfile);\n+\t  /* That check misses '# 123' linemarkers.  Let them through too.  */\n+\t  else if (dname.type == CPP_NUMBER)\n+\t    (*dir->handler) (pfile);\n+\t  else\n+\t    {\n+\t      /* We don't want to process this directive.  Put back the\n+\t\t tokens so caller will see them (and issue an error,\n+\t\t probably).  */\n+\t      _cpp_push_token (pfile, &dname, &pfile->directive_pos);\n+\t      skip = 0;\n+\t    }\n+\t}\n+      else\n \t{\n \t  /* Traditionally, a directive is ignored unless its # is in\n \t     column 1.  Therefore in code intended to work with K+R"}, {"sha": "db7f0736fea4d225e2a3855299f7727444e20c0f", "filename": "gcc/cppmain.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=6d4587f7359a633dc610f5d0ad95c023f672c5d9", "patch": "@@ -238,6 +238,13 @@ scan_buffer (pfile)\n \t\t       == AVOID_LPASTE\n \t\t   && cpp_avoid_paste (pfile, &tokens[1 - index], token))\n \t    token->flags |= PREV_WHITE;\n+\t  /* Special case '# <directive name>': insert a space between\n+\t     the # and the token.  This will prevent it from being\n+\t     treated as a directive when this code is re-preprocessed.\n+\t     XXX Should do this only at the beginning of a line, but how?  */\n+\t  else if (token->type == CPP_NAME && token->val.node->directive_index\n+\t\t   && tokens[1 - index].type == CPP_HASH)\n+\t    token->flags |= PREV_WHITE;\n \n \t  cpp_output_token (token, print.outf);\n \t  print.printed = 1;"}, {"sha": "a3628025e8a16ffb6670225cf696f0e956f2fab4", "filename": "gcc/gsyslimits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Fgsyslimits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Fgsyslimits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgsyslimits.h?ref=6d4587f7359a633dc610f5d0ad95c023f672c5d9", "patch": "@@ -4,5 +4,5 @@\n    instead of this text.  */\n \n #define _GCC_NEXT_LIMITS_H\t\t/* tell gcc's limits.h to recurse */\n- #include_next <limits.h>\n+#include_next <limits.h>\n #undef _GCC_NEXT_LIMITS_H"}, {"sha": "8bb398f67869448fd963869f0fa1db0f15c8ed9b", "filename": "gcc/limity.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Flimity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Flimity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flimity.h?ref=6d4587f7359a633dc610f5d0ad95c023f672c5d9", "patch": "@@ -4,7 +4,7 @@\n #else /* not _GCC_LIMITS_H_ */\n \n #ifdef _GCC_NEXT_LIMITS_H\n- #include_next <limits.h>\t\t/* recurse down to the real one */\n+#include_next <limits.h>\t\t/* recurse down to the real one */\n #endif\n \n #endif /* not _GCC_LIMITS_H_ */"}, {"sha": "a540321eefc23196cac3cb8e3a7b8bbda77667ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 72, "deletions": 65, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d4587f7359a633dc610f5d0ad95c023f672c5d9", "patch": "@@ -1,3 +1,10 @@\n+2001-05-09  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* gcc.dg/cpp/direct2.c: New test.\n+\t* gcc.dg/cpp/direct2s.c: New test.\n+\n+\t* gcc.c-torture/execute/920730-1t.c: #undef __GNUC__ at head.\n+\n 2001-05-07  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.old-deja/g++.other/op2.C: Don't use `glob' as a variable.\n@@ -26,7 +33,7 @@\n \n \t* lib/g++.exp (g++_include_flags): Don't use any special flags\n \tif TESTING_IN_BUILD_TREE is not defined.\n-\t(g++_init): Use a plain 'c++' as the compiler if \n+\t(g++_init): Use a plain 'c++' as the compiler if\n \tTESTING_IN_BUILD_TREEE is not defined.\n \n 2001-05-02  Jakub Jelinek  <jakub@redhat.com>\n@@ -187,7 +194,7 @@ Thu Apr 26 11:15:12 2001  Jeffrey A Law  (law@cygnus.com)\n \t* gcc.dg/wtr-conversion-1.c: Don't test for width changes.\n \n 2001-04-12  Nathan Sidwell  <nathan@codesourcery.com>\n-\t\n+\n \t* g++.old-deja/g++.abi/primary3.C (main): Correct expected layout.\n \t* g++.old-deja/g++.abi/crash1.C: New test.\n \n@@ -205,7 +212,7 @@ Thu Apr 26 11:15:12 2001  Jeffrey A Law  (law@cygnus.com)\n \n 22001-04-11  Peter Schmid  <schmid@snake.iap.physik.tu-darmstadt.de>\n \n-        * g++.old-deja/g++.robertl/eb42.C: Same.\n+\t* g++.old-deja/g++.robertl/eb42.C: Same.\n \n 001-04-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n@@ -470,9 +477,9 @@ Fri Apr  6 15:36:15 2001  J\"orn Rennecke <amylaar@redhat.com>\n \n 2001-03-06  Zack Weinberg  <zackw@stanford.edu>\n \n-        * objc/execute/string1.m, objc/execute/string2.m: Compare the\n-        result of -cString against what we expect it to be; don't just\n-        print it out for no one to read.\n+\t* objc/execute/string1.m, objc/execute/string2.m: Compare the\n+\tresult of -cString against what we expect it to be; don't just\n+\tprint it out for no one to read.\n \n \t* objc/execute/string3.m, objc/execute/string4.m: New tests.\n \tBased on testcases provided by Nicola Pero.\n@@ -546,8 +553,8 @@ Wed Feb 21 12:38:22 2001  Ovidiu Predescu  <ovidiu@cup.hp.com>\n \n 2001-02-21  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n-        * g++.old-deja/g++.other/lookup22.C: New test.\n-\t\n+\t* g++.old-deja/g++.other/lookup22.C: New test.\n+\n 2001-02-19  Zack Weinberg  <zackw@stanford.edu>\n \n \t* g77.dg: New directory.\n@@ -562,7 +569,7 @@ Wed Feb 21 12:38:22 2001  Ovidiu Predescu  <ovidiu@cup.hp.com>\n 2001-02-16  Gabriel Dos Reis <gdr@codesourcery.com>\n \n \t* g++.old-deja/g++.other/decl9.C: New test.\n-\t\n+\n 2001-02-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.old-deja/g++.other/init16.C: Update the test so that it does\n@@ -676,7 +683,7 @@ Wed Feb  7 09:54:47 2001  Ovidiu Predescu  <ovidiu@cup.hp.com>\n \n 2001-02-06  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * gcc.dg/cpp/avoidpaste1.c: Update.\n+\t* gcc.dg/cpp/avoidpaste1.c: Update.\n \n Tue Feb  5 8:53:33 2001  Ovidiu Predescu  <ovidiu@cup.hp.com>\n \n@@ -718,7 +725,7 @@ Tue Feb  5 8:53:33 2001  Ovidiu Predescu  <ovidiu@cup.hp.com>\n \n 2001-02-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * gcc.dg/cpp/avoidpaste2.c: New tests.\n+\t* gcc.dg/cpp/avoidpaste2.c: New tests.\n \n 2001-01-31  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -739,12 +746,12 @@ Wed Jan 31 12:23:32 2001  J\"orn Rennecke <amylaar@redhat.com>\n \n 2001-01-31  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * gcc.dg/cpp/tr-warn1.c: Add tests.\n+\t* gcc.dg/cpp/tr-warn1.c: Add tests.\n \n 2001-01-31  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * gcc.dg/cpp/avoidpaste1.c: Update.\n-        * gcc.dg/cpp/paste4.c: Update.\n+\t* gcc.dg/cpp/avoidpaste1.c: Update.\n+\t* gcc.dg/cpp/paste4.c: Update.\n \n 2001-01-30  Jeffrey Oldham  <oldham@codesourcery.com>\n \n@@ -770,7 +777,7 @@ Wed Jan 31 12:23:32 2001  J\"orn Rennecke <amylaar@redhat.com>\n \n 2001-01-28  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * gcc.dg/cpp/avoidpaste1.c: Test case.\n+\t* gcc.dg/cpp/avoidpaste1.c: Test case.\n \n 2001-01-28  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -886,7 +893,7 @@ Wed Jan 31 12:23:32 2001  J\"orn Rennecke <amylaar@redhat.com>\n \n 2001-01-18  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * gcc.dg/cpp/assembl2.S: New test case.\n+\t* gcc.dg/cpp/assembl2.S: New test case.\n \n 2001-01-17  Jeffrey Oldham  <oldham@codesourcery.com>\n \n@@ -926,9 +933,9 @@ Wed Jan 31 12:23:32 2001  J\"orn Rennecke <amylaar@redhat.com>\n \n 2001-01-15  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * gcc.dg/cpp/if-2.c: Comment out occasionally bogus test; we \n-        have an equivalent working one below it.\n-\t  \n+\t* gcc.dg/cpp/if-2.c: Comment out occasionally bogus test; we\n+\thave an equivalent working one below it.\n+\n 2001-01-14  Jeffrey Oldham  <oldham@codesourcery.com>\n \n \t* g++.old-deja/g++.ext/instantiate2.C: Add explanatory comment.\n@@ -970,8 +977,8 @@ Wed Jan 31 12:23:32 2001  J\"orn Rennecke <amylaar@redhat.com>\n \n 2001-01-13  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * gcc.dg/cpp/widestr1.c: Update.\n-        * gcc.dg/cpp/prag-imp.c: Remove.\n+\t* gcc.dg/cpp/widestr1.c: Update.\n+\t* gcc.dg/cpp/prag-imp.c: Remove.\n \n 2001-01-12  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -1018,7 +1025,7 @@ Wed Jan 31 12:23:32 2001  J\"orn Rennecke <amylaar@redhat.com>\n 2001-01-10  Alan Lehotsky  <lehotsky@tiac.net>\n \n \t* gcc.dg/20000926-1.c: Parameterize for machines with 16-bit ints.\n-\t\n+\n 2001-01-10  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.pt/error3.C: New test.\n@@ -1034,17 +1041,17 @@ Wed Jan 31 12:23:32 2001  J\"orn Rennecke <amylaar@redhat.com>\n 2001-01-08  Jonathan Larmour  <jlarmour@redhat.com>\n \n \t* gcc.dg/20000419-2.c: Move to \"special\" subdirectory.\n-        * gcc.dg/special/20000419-2.c: New file. Identical to above.\n-        * gcc.dg/special/special.exp: New test driver which will check\n-        for alias support for the above test.\n+\t* gcc.dg/special/20000419-2.c: New file. Identical to above.\n+\t* gcc.dg/special/special.exp: New test driver which will check\n+\tfor alias support for the above test.\n \n 2001-01-09  Alan Lehotsky  <lehotsky@tiac.net>\n \n \t* gcc.c-torture/execute/921202-1.c: Use STACK_SIZE to avoid\n \tproblems on small machines.\n \t* gcc.c-torture/execute/920730-1.c: Use values from <limits.h> to\n-\tparameterize. \n-\t\n+\tparameterize.\n+\n 2001-01-09  Jeffrey Oldham  <oldham@codesourcery.com>\n \n \t* g++.old-deja/g++.ext/instantiate2.C: ERROR line should fail for\n@@ -1229,7 +1236,7 @@ Thu Jan  4 13:54:11 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n 2001-01-03  Jeffrey Oldham  <oldham@codesourcery.com>\n \n \t* lib/target-supports.exp (check_alias_available): Modified to\n-\tindicate aliases not supported if only weak aliases are supported. \n+\tindicate aliases not supported if only weak aliases are supported.\n \n 2001-01-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n@@ -1362,12 +1369,12 @@ Thu Dec 21 22:43:03 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n 2000-12-17  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * gcc.dg/cpp/multiline.c: New test.\n+\t* gcc.dg/cpp/multiline.c: New test.\n \n 2000-12-17  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * g++.old-deja/g++.other/syshdr1.C: Update.\n-        * gcc.dg/cpp/lineflags.c: Remove temporarily.\n+\t* g++.old-deja/g++.other/syshdr1.C: Update.\n+\t* gcc.dg/cpp/lineflags.c: Remove temporarily.\n \n 2000-12-15  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n@@ -1415,31 +1422,31 @@ Thu Dec 21 22:43:03 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n 2000-12-11  Neil Booth  <neilb@earthling.net>\n \n-        * gcc.dg/cpp/if-2.c: Separate tests so that which failed is obvious.\n+\t* gcc.dg/cpp/if-2.c: Separate tests so that which failed is obvious.\n \n 2000-12-09  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.dg/format-miss-2.c: New test.\n \n 2000-12-09  Neil Booth  <neilb@earthling.net>\n \n-        * gcc.dg/cpp/lineflags.c: New tests.\n-        * gcc.dg/cpp/poison.c: Update.\n-        * gcc.dg/cpp/redef2.c: Update.\n-        * gcc.dg/cpp/skipping.c: New test.\n+\t* gcc.dg/cpp/lineflags.c: New tests.\n+\t* gcc.dg/cpp/poison.c: Update.\n+\t* gcc.dg/cpp/redef2.c: Update.\n+\t* gcc.dg/cpp/skipping.c: New test.\n \n 2000-12-07  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* g++.old-deja/g++.other/eh3.C: New testcase.\n \n 2000-12-07  Neil Booth  <neilb@earthling.net>\n \n-        * gcc.dg/wtr-aggr-init-1.c, wtr-escape-1.c, wtr-int-type-1.c,\n-        wtr-label-1.c, wtr-static-1.c, wtr-strcat-1.c, wtr-suffix-1.c,\n-        wtr-switch-1.c, wtr-unary-plus-1.c, wtr-union-init-1.c\n-        wtr-union-init-2.c, wtr-union-init-3.c: Update.\n-        * gcc.dg/cpp/extratokens.c, tr-warn4.c, tr-warn5.c, tr-warn6.c:\n-        Update.\n+\t* gcc.dg/wtr-aggr-init-1.c, wtr-escape-1.c, wtr-int-type-1.c,\n+\twtr-label-1.c, wtr-static-1.c, wtr-strcat-1.c, wtr-suffix-1.c,\n+\twtr-switch-1.c, wtr-unary-plus-1.c, wtr-union-init-1.c\n+\twtr-union-init-2.c, wtr-union-init-3.c: Update.\n+\t* gcc.dg/cpp/extratokens.c, tr-warn4.c, tr-warn5.c, tr-warn6.c:\n+\tUpdate.\n \n 2000-12-07  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n@@ -1514,8 +1521,8 @@ Thu Dec 21 22:43:03 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n 2000-12-04  Neil Booth  <neilb@earthling.net>\n \n-        * gcc.dg/cpp/assert_trad1.c, assert_trad2.c, assert_trad3.c:\n-        New tests.\n+\t* gcc.dg/cpp/assert_trad1.c, assert_trad2.c, assert_trad3.c:\n+\tNew tests.\n \n 2000-12-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n@@ -1528,7 +1535,7 @@ Thu Dec 21 22:43:03 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n 2000-12-03  Neil Booth  <neilb@earthling.net>\n \n-        * gcc.dg/cpp/macro6.c: New test cases.\n+\t* gcc.dg/cpp/macro6.c: New test cases.\n \n 2000-12-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n@@ -1548,19 +1555,19 @@ Thu Dec 21 22:43:03 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n 2000-12-02  Neil Booth  <neilb@earthling.net>\n \n-        * g++.old-deja/g++.other/externC4.C,\n-        g++.old-deja/g++.other/friend10.C: New tests.\n+\t* g++.old-deja/g++.other/externC4.C,\n+\tg++.old-deja/g++.other/friend10.C: New tests.\n \n 2000-12-02  Neil Booth  <neilb@earthling.net>\n \n-        * g++.old-deja/g++.other/instan2.C\n-        * g++.old-deja/g++.other/instan3.C: New test.\n+\t* g++.old-deja/g++.other/instan2.C\n+\t* g++.old-deja/g++.other/instan3.C: New test.\n \n 2000-12-02  Neil Booth  <neilb@earthling.net>\n \n-        * gcc.dg/cpp/c++98.c,c++98-pedantic.c,c89.c,c89-pedantic.c,\n-        c94.c,c94-pedantic.c,c99.c,c99-pedantic.c,gnuc89.c,gnuc89-pedantic.c,\n-        gnuc99.c,gnuc99-pedantic.c: New tests.\n+\t* gcc.dg/cpp/c++98.c,c++98-pedantic.c,c89.c,c89-pedantic.c,\n+\tc94.c,c94-pedantic.c,c99.c,c99-pedantic.c,gnuc89.c,gnuc89-pedantic.c,\n+\tgnuc99.c,gnuc99-pedantic.c: New tests.\n \n 2000-12-01  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n@@ -1569,9 +1576,9 @@ Thu Dec 21 22:43:03 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n 2000-12-01  Neil Booth  <neilb@earthling.net>\n \n-        * gcc.dg/cpp/20000720-1.S: Remove duplicate testcase.\n-        * gcc.dg/cpp/poison.c: Update.\n-        * gcc.dg/cpp/spacing1.c: New testcase for all spacing issues.\n+\t* gcc.dg/cpp/20000720-1.S: Remove duplicate testcase.\n+\t* gcc.dg/cpp/poison.c: Update.\n+\t* gcc.dg/cpp/spacing1.c: New testcase for all spacing issues.\n \n 2000-12-01  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n@@ -1727,7 +1734,7 @@ Thu Dec 21 22:43:03 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n 2000-11-22  Loren J. Rittle  <ljrittle@acm.org>\n \n-        * g++.old-deja/g++.robertl/eb39.C: Don't include libio.h.\n+\t* g++.old-deja/g++.robertl/eb39.C: Don't include libio.h.\n \n 2000-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -1747,7 +1754,7 @@ Thu Dec 21 22:43:03 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n 2000-11-21  Neil Booth  <neilb@earthling.net>\n \n-        * gcc.dg/cpp/integrated1.c: Remove.\n+\t* gcc.dg/cpp/integrated1.c: Remove.\n \n 2000-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -1773,8 +1780,8 @@ Thu Dec 21 22:43:03 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n 2000-11-20  Neil Booth  <neilb@earthling.net>\n \n-        * gcc.dg/cpp/paste2.c: Update test.\n-        * objc/execute/paste.m: New test.\n+\t* gcc.dg/cpp/paste2.c: Update test.\n+\t* objc/execute/paste.m: New test.\n \n 2000-11-20  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n@@ -1853,8 +1860,8 @@ Thu Dec 21 22:43:03 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n 2000-11-15  Neil Booth  <neilb@earthling.net>\n \n-        gcc.dg/cpp/_Pragma1.c: Update.\n-        gcc.dg/cpp/_Pragma2.c: New test.\n+\tgcc.dg/cpp/_Pragma1.c: Update.\n+\tgcc.dg/cpp/_Pragma2.c: New test.\n \n 2000-11-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n@@ -2038,7 +2045,7 @@ Thu Dec 21 22:43:03 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n 2000-11-04  Neil Booth  <neilb@earthling.net>\n \n-        * gcc.dg/cpp/include2.c: New tests.\n+\t* gcc.dg/cpp/include2.c: New tests.\n \n Fri Nov  3 13:32:14 2000  Mark P Mitchell  <mark@codesourcery.com>\n \n@@ -2092,7 +2099,7 @@ Fri Nov  3 13:32:14 2000  Mark P Mitchell  <mark@codesourcery.com>\n \n 2000-10-29  Neil Booth  <neilb@earthling.net>\n \n-        * gcc.dg/cpp/macro4.c, macro5.c: New tests.\n+\t* gcc.dg/cpp/macro4.c, macro5.c: New tests.\n \t* mi1.c, mi1c.h: Add null directives to multiple-include test.\n \t* mi5.c: Test multiple includes work with -C.\n \t* trigraphs.c: Test ^= version.\n@@ -2341,7 +2348,7 @@ Mon Oct  9 23:32:06 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n 2000-09-26  Jakub Jelinek  <jakub@redhat.com>\n \n-        * gcc.c-torture/compile/20000923-1.c: New test.\n+\t* gcc.c-torture/compile/20000923-1.c: New test.\n \n 2000-09-25 Theodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n \n@@ -2473,7 +2480,7 @@ Tue Sep 12 18:32:07 2000  J\"orn Rennecke <amylaar@redhat.co.uk>\n \n 2000-09-07  Catherine Moore  <clm@redhat.com>\n \n-        * gcc.c-torture/execute/unroll-1.c: New test.\n+\t* gcc.c-torture/execute/unroll-1.c: New test.\n \n 2000-09-06  Zack Weinberg  <zack@wolery.cumb.org>\n "}, {"sha": "7467f35753c8fd91c6f71b8be1c3bc430e935f06", "filename": "gcc/testsuite/gcc.c-torture/execute/920730-1t.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F920730-1t.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F920730-1t.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F920730-1t.c?ref=6d4587f7359a633dc610f5d0ad95c023f672c5d9", "patch": "@@ -1,3 +1,8 @@\n /* This is just 920730-1.c compiled with -traditional.\n    See 920730-1t.x.  */\n+\n+/* It is necessary to undefine __GNUC__ in order to prevent glibc 2.2's\n+   sys/cdefs.h from issuing an #error.  Do Not Ask.  */\n+#undef __GNUC__\n+\n #include \"920730-1.c\""}, {"sha": "d6dc1088c374af73d98d4edabdcf6613ae674f76", "filename": "gcc/testsuite/gcc.dg/cpp/direct2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2.c?ref=6d4587f7359a633dc610f5d0ad95c023f672c5d9", "patch": "@@ -0,0 +1,37 @@\n+/* Copyright (C) 2001 Free Software Foundation, Inc.\n+   Contributed by Nathan Sidwell 8 May 2001 <nathan@codesourcery.com> */\n+\n+/* Test of prohibition on directives which result from macro expansion.\n+   See also direct2s.c */\n+\n+/* { dg-do compile } */\n+\n+#define HASH #\n+#define HASHDEFINE #define\n+#define HASHINCLUDE #include\n+\n+HASH include \"somerandomfile\" /*{ dg-error \"syntax|parse\" \"non-include\" }*/\n+/*{ dg-bogus \"No such\" \"don't execute non-include\" { target *-*-* } 13 }*/\n+HASHINCLUDE <somerandomfile> /*{ dg-error \"syntax|parse\" \"non-include 2\" }*/\n+/*{ dg-bogus \"No such\" \"don't execute non-include 2\" { target *-*-* } 15 }*/\n+\n+void g ()\n+{\n+HASH define X 1 /* { dg-error \"syntax error\" \"# from macro\" } */\n+HASHDEFINE  Y 1 /* { dg-error \"syntax error\" \"#define from macro\" } */\n+}\n+\n+#pragma GCC dependency \"direct2.c\"\n+#\n+\n+void f ()\n+{\n+  int i = X;    /* { dg-error \"undeclared|for each\" \"no macro X\" } */\n+  int j = Y;    /* { dg-error \"undeclared|for each\" \"no macro Y\" } */\n+}\n+\n+#define slashstar /##*\n+#define starslash *##/\n+\n+slashstar starslash /* { dg-error \"parse error\" \"not a comment\" } */\n+/* { dg-warning \"does not give\" \"paste warning(s)\" { target *-*-* } 36 } */"}, {"sha": "6c98ecc9a127174577d70f96db30c1f6c1fac7fe", "filename": "gcc/testsuite/gcc.dg/cpp/direct2s.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2s.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2s.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2s.c?ref=6d4587f7359a633dc610f5d0ad95c023f672c5d9", "patch": "@@ -0,0 +1,39 @@\n+/* Copyright (C) 2001 Free Software Foundation, Inc.\n+   Contributed by Nathan Sidwell 8 May 2001 <nathan@codesourcery.com> */\n+\n+/* Test of prohibition on directives which result from macro\n+   expansion.  Same as direct2.c, with -save-temps applied; results\n+   should be identical.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -ansi -pedantic-errors\" } */\n+\n+#define HASH #\n+#define HASHDEFINE #define\n+#define HASHINCLUDE #include\n+\n+HASH include \"somerandomfile\" /*{ dg-error \"syntax|parse\" \"non-include\" }*/\n+/*{ dg-bogus \"No such\" \"don't execute non-include\" { target *-*-* } 15 }*/\n+HASHINCLUDE <somerandomfile> /*{ dg-error \"syntax|parse\" \"non-include 2\" }*/\n+/*{ dg-bogus \"No such\" \"don't execute non-include 2\" { target *-*-* } 17 }*/\n+\n+void g ()\n+{\n+HASH define X 1 /* { dg-error \"syntax error\" \"# from macro\" } */\n+HASHDEFINE  Y 1 /* { dg-error \"syntax error\" \"#define from macro\" } */\n+}\n+\n+#pragma GCC dependency \"direct2s.c\"\n+#\n+\n+void f ()\n+{\n+  int i = X;    /* { dg-error \"undeclared|for each\" \"no macro X\" } */\n+  int j = Y;    /* { dg-error \"undeclared|for each\" \"no macro Y\" } */\n+}\n+\n+#define slashstar /##*\n+#define starslash *##/\n+\n+slashstar starslash /* { dg-error \"parse error\" \"not a comment\" } */\n+/* { dg-warning \"does not give\" \"paste warning(s)\" { target *-*-* } 38 } */"}, {"sha": "46b7e994a0cf72028a24d9dcd780ef2169d55303", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 99, "deletions": 9, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4587f7359a633dc610f5d0ad95c023f672c5d9/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=6d4587f7359a633dc610f5d0ad95c023f672c5d9", "patch": "@@ -105,6 +105,7 @@ static const char *user_label_prefix;\n    It is zero for rescanning results of macro expansion\n    and for expanding macro arguments.  */\n #define INPUT_STACK_MAX 200\n+struct file_name_list;\n struct file_buf {\n   const char *fname;\n   int lineno;\n@@ -120,6 +121,8 @@ struct file_buf {\n   struct if_stack *if_stack;\n   /* Object to be freed at end of input at this level.  */\n   U_CHAR *free_ptr;\n+  /* Position to start scanning for #include_next in this file.  */\n+  struct file_name_list *next_header_dir;\n } instack[INPUT_STACK_MAX];\n \n typedef struct file_buf FILE_BUF;\n@@ -240,6 +243,7 @@ union hashval {\n enum node_type {\n  T_DEFINE = 1,\t/* `#define' */\n  T_INCLUDE,\t/* `#include' */\n+ T_INCLUDE_NEXT,/* `#include_next' */\n  T_IFDEF,\t/* `#ifdef' */\n  T_IFNDEF,\t/* `#ifndef' */\n  T_IF,\t\t/* `#if' */\n@@ -358,6 +362,7 @@ static void do_error\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n static void do_warning\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n static void do_line\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n static void do_include\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n+static void do_include_next\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n static void do_undef\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n static void do_if\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n static void do_ifdef\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n@@ -415,7 +420,10 @@ static void make_assertion\tPARAMS ((const char *));\n \n static void grow_outbuf \tPARAMS ((FILE_BUF *, int));\n static int handle_directive \tPARAMS ((FILE_BUF *, FILE_BUF *));\n-static void finclude\t\tPARAMS ((int, const char *, FILE_BUF *));\n+static void process_include\tPARAMS ((struct file_name_list *,\n+\t\t\t\t\t const U_CHAR *, int, int, FILE_BUF *));\n+static void finclude\t\tPARAMS ((int, const char *,\n+\t\t\t\t\t struct file_name_list *, FILE_BUF *));\n static void init_dependency_output PARAMS ((void));\n static void rescan\t\tPARAMS ((FILE_BUF *, int));\n static void newline_fix\t\tPARAMS ((U_CHAR *));\n@@ -450,6 +458,7 @@ struct directive directive_table[] = {\n   {  4, do_elif,    \"elif\",    T_ELIF    },\n   {  5, do_error,   \"error\",   T_ERROR   },\n   {  7, do_warning, \"warning\", T_WARNING },\n+  { 12, do_include_next, \"include_next\", T_INCLUDE_NEXT },\n   {  6, do_assert,  \"assert\",  T_ASSERT  },\n   {  8, do_unassert,\"unassert\",T_UNASSERT},\n   {  -1, 0, \"\", T_UNUSED},\n@@ -853,7 +862,7 @@ main (argc, argv)\n \tif (print_deps)\n \t  deps_add_dep (deps, pend[i].arg);\n \n-\tfinclude (fd, pend[i].arg, &outbuf);\n+\tfinclude (fd, pend[i].arg, 0, &outbuf);\n       }\n   indepth--;\n   no_output--;\n@@ -2278,22 +2287,17 @@ do_include (buf, limit, op)\n      U_CHAR *buf, *limit;\n      FILE_BUF *op;\n {\n-  char *fname;\t\t/* Dynamically allocated fname buffer */\n   U_CHAR *fbeg, *fend;\t\t/* Beginning and end of fname */\n \n   struct file_name_list *stackp = include; /* Chain of dirs to search */\n   struct file_name_list dsp[1];\t/* First in chain, if #include \"...\" */\n   int flen;\n \n-  int f;\t\t\t/* file number */\n-\n   int retried = 0;\t\t/* Have already tried macro\n \t\t\t\t   expanding the include line*/\n   FILE_BUF trybuf;\t\t/* It got expanded into here */\n   int system_header_p = 0;\t/* 0 for \"...\", 1 for <...> */\n \n-  f= -1;\t\t\t/* JF we iz paranoid! */\n-\n get_filename:\n \n   fbeg = buf;\n@@ -2374,6 +2378,90 @@ do_include (buf, limit, op)\n   }\n \n   flen = fend - fbeg;\n+  process_include (stackp, fbeg, flen, system_header_p, op);\n+}\n+\n+static void\n+do_include_next (buf, limit, op)\n+     U_CHAR *buf, *limit;\n+     FILE_BUF *op;\n+{\n+  U_CHAR *fbeg, *fend;\t\t/* Beginning and end of fname */\n+\n+  struct file_name_list *stackp; /* Chain of dirs to search */\n+  int flen;\n+\n+  int retried = 0;\t\t/* Have already tried macro\n+\t\t\t\t   expanding the include line*/\n+  FILE_BUF trybuf;\t\t/* It got expanded into here */\n+  int system_header_p = 0;\t/* 0 for \"...\", 1 for <...> */\n+\n+  /* Treat as plain #include if we don't know where to start\n+     looking.  */\n+  stackp = instack[indepth].next_header_dir;\n+  if (stackp == 0)\n+    {\n+      do_include (buf, limit, op);\n+      return;\n+    }\n+\n+get_filename:\n+\n+  fbeg = buf;\n+  SKIP_WHITE_SPACE (fbeg);\n+  /* Discard trailing whitespace so we can easily see\n+     if we have parsed all the significant chars we were given.  */\n+  while (limit != fbeg && is_nvspace (limit[-1])) limit--;\n+\n+  switch (*fbeg++) {\n+  case '\\\"':\n+    fend = fbeg;\n+    while (fend != limit && *fend != '\\\"')\n+      fend++;\n+    if (*fend == '\\\"' && fend + 1 == limit)\n+      break;\n+    goto fail;\n+\n+  case '<':\n+    fend = fbeg;\n+    while (fend != limit && *fend != '>') fend++;\n+    if (*fend == '>' && fend + 1 == limit) {\n+      system_header_p = 1;\n+      break;\n+    }\n+    goto fail;\n+\n+  default:\n+  fail:\n+    if (retried) {\n+      error (\"#include expects \\\"fname\\\" or <fname>\");\n+      return;\n+    } else {\n+      trybuf = expand_to_temp_buffer (buf, limit, 0);\n+      buf = (U_CHAR *) alloca (trybuf.bufp - trybuf.buf + 1);\n+      memcpy (buf, trybuf.buf, trybuf.bufp - trybuf.buf);\n+      limit = buf + (trybuf.bufp - trybuf.buf);\n+      free (trybuf.buf);\n+      retried++;\n+      goto get_filename;\n+    }\n+  }\n+\n+  flen = fend - fbeg;\n+  process_include (stackp, fbeg, flen, system_header_p, op);\n+}\n+\n+static void\n+process_include (stackp, fbeg, flen, system_header_p, op)\n+     struct file_name_list *stackp;\n+     const U_CHAR *fbeg;\n+     int flen;\n+     int system_header_p;\n+     FILE_BUF *op;\n+{\n+  char *fname;\n+  int f = -1;\t\t\t/* file number */\n+\n   fname = (char *) alloca (max_include_len + flen + 2);\n   /* + 2 above for slash and terminating null.  */\n \n@@ -2472,7 +2560,7 @@ do_include (buf, limit, op)\n       system_include_depth++;\n \n     /* Actually process the file.  */\n-    finclude (f, fname, op);\n+    finclude (f, fname, stackp->next, op);\n \n     if (system_header_p)\n       system_include_depth--;\n@@ -2485,9 +2573,10 @@ do_include (buf, limit, op)\n    with output to OP.  */\n \n static void\n-finclude (f, fname, op)\n+finclude (f, fname, nhd, op)\n      int f;\n      const char *fname;\n+     struct file_name_list *nhd;\n      FILE_BUF *op;\n {\n   int st_mode;\n@@ -2506,6 +2595,7 @@ finclude (f, fname, op)\n   fp->length = 0;\n   fp->lineno = 1;\n   fp->if_stack = if_stack;\n+  fp->next_header_dir = nhd;\n \n   if (S_ISREG (st_mode)) {\n     fp->buf = (U_CHAR *) xmalloc (st_size + 2);"}]}