{"sha": "97a2feb66d8f018161c4d64adc7c1171045abcf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdhMmZlYjY2ZDhmMDE4MTYxYzRkNjRhZGM3YzExNzEwNDVhYmNmNg==", "commit": {"author": {"name": "Matthias Klose", "email": "doko@ubuntu.com", "date": "2016-11-15T20:42:47Z"}, "committer": {"name": "Matthias Klose", "email": "doko@gcc.gnu.org", "date": "2016-11-15T20:42:47Z"}, "message": "install.texi: Remove references to java/libjava.\n\n2016-11-15  Matthias Klose  <doko@ubuntu.com>\n\n        * doc/install.texi: Remove references to java/libjava.\n        * doc/sourcebuild.texi: Likewise.\n\nFrom-SVN: r242455", "tree": {"sha": "2fc73e1378811b8780b8bd009b0816ebeaf7c335", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fc73e1378811b8780b8bd009b0816ebeaf7c335"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97a2feb66d8f018161c4d64adc7c1171045abcf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97a2feb66d8f018161c4d64adc7c1171045abcf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97a2feb66d8f018161c4d64adc7c1171045abcf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97a2feb66d8f018161c4d64adc7c1171045abcf6/comments", "author": {"login": "doko42", "id": 11258518, "node_id": "MDQ6VXNlcjExMjU4NTE4", "avatar_url": "https://avatars.githubusercontent.com/u/11258518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doko42", "html_url": "https://github.com/doko42", "followers_url": "https://api.github.com/users/doko42/followers", "following_url": "https://api.github.com/users/doko42/following{/other_user}", "gists_url": "https://api.github.com/users/doko42/gists{/gist_id}", "starred_url": "https://api.github.com/users/doko42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doko42/subscriptions", "organizations_url": "https://api.github.com/users/doko42/orgs", "repos_url": "https://api.github.com/users/doko42/repos", "events_url": "https://api.github.com/users/doko42/events{/privacy}", "received_events_url": "https://api.github.com/users/doko42/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "27b3b3f4e68e584c6caa83088d87caa121d83796", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27b3b3f4e68e584c6caa83088d87caa121d83796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27b3b3f4e68e584c6caa83088d87caa121d83796"}], "stats": {"total": 129, "additions": 28, "deletions": 101}, "files": [{"sha": "1bf1757b21fd2fe2536c590a65fab3ffe32adfb5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97a2feb66d8f018161c4d64adc7c1171045abcf6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97a2feb66d8f018161c4d64adc7c1171045abcf6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97a2feb66d8f018161c4d64adc7c1171045abcf6", "patch": "@@ -1,3 +1,8 @@\n+2016-11-15  Matthias Klose  <doko@ubuntu.com>\n+\n+\t* doc/install.texi: Remove references to java/libjava.\n+\t* doc/sourcebuild.texi: Likewise.\n+\n 2016-11-15  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "bf512f228851dfe799d3b4d50fefb0dd148f0df5", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 16, "deletions": 66, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97a2feb66d8f018161c4d64adc7c1171045abcf6/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97a2feb66d8f018161c4d64adc7c1171045abcf6/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=97a2feb66d8f018161c4d64adc7c1171045abcf6", "patch": "@@ -498,28 +498,6 @@ Useful when submitting patches for the GCC source code.\n Necessary when applying patches, created with @command{diff}, to one's\n own sources.\n \n-@item ecj1\n-@itemx gjavah\n-\n-If you wish to modify @file{.java} files in libjava, you will need to\n-configure with @option{--enable-java-maintainer-mode}, and you will need\n-to have executables named @command{ecj1} and @command{gjavah} in your path.\n-The @command{ecj1} executable should run the Eclipse Java compiler via\n-the GCC-specific entry point.  You can download a suitable jar from\n-@uref{ftp://sourceware.org/pub/java/}, or by running the script\n-@command{contrib/download_ecj}.\n-\n-@item antlr.jar version 2.7.1 (or later)\n-@itemx antlr binary\n-\n-If you wish to build the @command{gjdoc} binary in libjava, you will\n-need to have an @file{antlr.jar} library available. The library is\n-searched for in system locations but can be specified with\n-@option{--with-antlr-jar=} instead.  When configuring with\n-@option{--enable-java-maintainer-mode}, you will need to have one of\n-the executables named @command{cantlr}, @command{runantlr} or\n-@command{antlr} in your path.\n-\n @end table\n \n @html\n@@ -550,9 +528,9 @@ tarballs compressed with @command{gzip} or\n Please refer to the @uref{http://gcc.gnu.org/releases.html,,releases web page}\n for information on how to obtain GCC@.\n \n-The source distribution includes the C, C++, Objective-C, Fortran, Java,\n+The source distribution includes the C, C++, Objective-C, Fortran,\n and Ada (in the case of GCC 3.1 and later) compilers, as well as\n-runtime libraries for C++, Objective-C, Fortran, and Java.\n+runtime libraries for C++, Objective-C, and Fortran.\n For previous versions these were downloadable as separate components such\n as the core GCC distribution, which included the C language front end and\n shared components, and language-specific distributions including the\n@@ -934,7 +912,7 @@ only for the listed packages.  For other packages, only static libraries\n will be built.  Package names currently recognized in the GCC tree are\n @samp{libgcc} (also known as @samp{gcc}), @samp{libstdc++} (not\n @samp{libstdc++-v3}), @samp{libffi}, @samp{zlib}, @samp{boehm-gc},\n-@samp{ada}, @samp{libada}, @samp{libjava}, @samp{libgo}, and @samp{libobjc}.\n+@samp{ada}, @samp{libada}, @samp{libgo}, and @samp{libobjc}.\n Note @samp{libiberty} does not support shared libraries at all.\n \n Use @option{--disable-shared} to build only static libraries.  Note that\n@@ -1178,7 +1156,7 @@ Use little endian by default.  Provide a multilib for big endian.\n @item --enable-threads\n Specify that the target\n supports threads.  This affects the Objective-C compiler and runtime\n-library, and exception handling for other languages like C++ and Java.\n+library, and exception handling for other languages like C++.\n On some systems, this is the default.\n \n In general, the best (and, in many cases, the only known) threading\n@@ -1195,7 +1173,7 @@ This is an alias for @option{--enable-threads=single}.\n Specify that\n @var{lib} is the thread support library.  This affects the Objective-C\n compiler and runtime library, and exception handling for other languages\n-like C++ and Java.  The possibilities for @var{lib} are:\n+like C++.  The possibilities for @var{lib} are:\n \n @table @code\n @item aix\n@@ -1443,7 +1421,7 @@ addition, @samp{libstdc++}'s include files will be installed into\n @option{--with-gxx-include-dir=@var{dirname}}.  Using this option is\n particularly useful if you intend to use several versions of GCC in\n parallel.  This is currently supported by @samp{libgfortran},\n-@samp{libjava}, @samp{libstdc++}, and @samp{libobjc}.\n+@samp{libstdc++}, and @samp{libobjc}.\n \n @item @anchor{WithAixSoname}--with-aix-soname=@samp{aix}, @samp{svr4} or @samp{both}\n Traditional AIX shared library versioning (versioned @code{Shared Object}\n@@ -1563,7 +1541,7 @@ grep ^language= */config-lang.in\n @end smallexample\n Currently, you can use any of the following:\n @code{all}, @code{ada}, @code{c}, @code{c++}, @code{fortran},\n-@code{go}, @code{java}, @code{jit}, @code{lto}, @code{objc}, @code{obj-c++}.\n+@code{go}, @code{jit}, @code{lto}, @code{objc}, @code{obj-c++}.\n Building the Ada compiler has special requirements, see below.\n If you do not pass this flag, or specify the option @code{all}, then all\n default languages available in the @file{gcc} sub-tree will be configured.\n@@ -2415,13 +2393,6 @@ native compiler.  You can then use the native GCC compiler to build the\n cross compiler.  The installed native compiler needs to be GCC version\n 2.95 or later.\n \n-If the cross compiler is to be built with support for the Java\n-programming language and the ability to compile .java source files is\n-desired, the installed native compiler used to build the cross\n-compiler needs to be the same GCC version as the cross compiler.  In\n-addition the cross compiler needs to be configured with\n-@option{--with-ecj-jar=@dots{}}.\n-\n Assuming you have already installed a native copy of GCC and configured\n your cross compiler, issue the command @command{make}, which performs the\n following steps:\n@@ -2624,7 +2595,7 @@ on a simulator as described at @uref{http://gcc.gnu.org/simtest-howto.html}.\n \n In order to run sets of tests selectively, there are targets\n @samp{make check-gcc} and language specific @samp{make check-c},\n-@samp{make check-c++}, @samp{make check-fortran}, @samp{make check-java},\n+@samp{make check-c++}, @samp{make check-fortran},\n @samp{make check-ada}, @samp{make check-objc}, @samp{make check-obj-c++},\n @samp{make check-lto}\n in the @file{gcc} subdirectory of the object directory.  You can also\n@@ -2722,19 +2693,6 @@ supported in the @file{gcc} subdirectory.  (To see how this works, try\n typing @command{echo} before the example given here.)\n \n \n-@section Additional testing for Java Class Libraries\n-\n-The Java runtime tests can be executed via @samp{make check}\n-in the @file{@var{target}/libjava/testsuite} directory in\n-the build tree.\n-\n-The @uref{http://sourceware.org/mauve/,,Mauve Project} provides\n-a suite of tests for the Java Class Libraries.  This suite can be run\n-as part of libgcj testing by placing the Mauve tree within the libjava\n-testsuite at @file{libjava/testsuite/libjava.mauve/mauve}, or by\n-specifying the location of that tree when invoking @samp{make}, as in\n-@samp{make MAUVEDIR=~/mauve check}.\n-\n @section How to interpret test results\n \n The result of running the testsuite are various @file{*.sum} and @file{*.log}\n@@ -2819,7 +2777,7 @@ you specified with the @option{--prefix} to configure (or\n @file{/usr/local} by default).  (If you specified @option{--bindir},\n that directory will be used instead; otherwise, if you specified\n @option{--exec-prefix}, @file{@var{exec-prefix}/bin} will be used.)\n-Headers for the C++ and Java libraries are installed in\n+Headers for the C++ library are installed in\n @file{@var{prefix}/include}; libraries in @file{@var{libdir}}\n (normally @file{@var{prefix}/lib}); internal parts of the compiler in\n @file{@var{libdir}/gcc} and @file{@var{libexecdir}/gcc}; documentation\n@@ -3468,9 +3426,9 @@ The version of binutils installed in @file{/usr/bin} probably works\n with this release of GCC@.  Bootstrapping against the latest GNU\n binutils and/or the version found in @file{/usr/ports/devel/binutils} has\n been known to enable additional features and improve overall testsuite\n-results.  However, it is currently known that boehm-gc (which itself\n-is required for java) may not configure properly on FreeBSD prior to\n-the FreeBSD 7.0 release with GNU binutils after 2.16.1.\n+results.  However, it is currently known that boehm-gc may not configure\n+properly on FreeBSD prior to the FreeBSD 7.0 release with GNU binutils\n+after 2.16.1.\n \n @html\n <hr />\n@@ -3568,8 +3526,7 @@ with the one implemented under HP-UX 11 using secondary definitions.\n GCC 3.0 and up support HP-UX 11.  GCC 2.95.x is not supported and cannot\n be used to compile GCC 3.0 and up.\n \n-The libffi and libjava libraries haven't been ported to 64-bit HP-UX@\n-and don't build.\n+The libffi library haven't been ported to 64-bit HP-UX@ and doesn't build.\n \n Refer to @uref{binaries.html,,binaries} for information about obtaining\n precompiled GCC binaries for HP-UX@.  Precompiled binaries must be obtained\n@@ -3582,11 +3539,7 @@ unbundled compiler, or a binary distribution of GCC@.\n \n It is possible to build GCC 3.3 starting with the bundled HP compiler,\n but the process requires several steps.  GCC 3.3 can then be used to\n-build later versions.  The fastjar program contains ISO C code and\n-can't be built with the HP bundled compiler.  This problem can be\n-avoided by not building the Java language.  For example, use the\n-@option{--enable-languages=\"c,c++,f77,objc\"} option in your configure\n-command.\n+build later versions.\n \n There are several possible approaches to building the distribution.\n Binutils can be built first using the HP tools.  Then, the GCC\n@@ -4286,8 +4239,8 @@ you can install a pre-built GCC to bootstrap and install GCC.  See the\n @uref{binaries.html,,binaries page} for details.\n \n The Solaris 2 @command{/bin/sh} will often fail to configure\n-@samp{libstdc++-v3}, @samp{boehm-gc} or @samp{libjava}.  We therefore\n-recommend using the following initial sequence of commands\n+@samp{libstdc++-v3}or @samp{boehm-gc}.  We therefore recommend using the\n+following initial sequence of commands\n \n @smallexample\n % CONFIG_SHELL=/bin/ksh\n@@ -4351,9 +4304,6 @@ GNU binutils.  @samp{libstdc++} symbol versioning will be disabled if no\n appropriate version is found.  Solaris @command{c++filt} from the Solaris\n Studio compilers does @emph{not} work.\n \n-GNU @command{make} version 3.81 or later is required to build libjava\n-with the Solaris linker.\n-\n Sun bug 4927647 sometimes causes random spurious testsuite failures\n related to missing diagnostic output.  This bug doesn't affect GCC\n itself, rather it is a kernel bug triggered by the @command{expect}"}, {"sha": "fdda3012f8963529d2c89d70b109bfe779ae965d", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97a2feb66d8f018161c4d64adc7c1171045abcf6/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97a2feb66d8f018161c4d64adc7c1171045abcf6/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=97a2feb66d8f018161c4d64adc7c1171045abcf6", "patch": "@@ -28,8 +28,8 @@ subdirectories that contain parts of GCC and its runtime libraries:\n \n @table @file\n @item boehm-gc\n-The Boehm conservative garbage collector, used as part of the Java\n-runtime library.\n+The Boehm conservative garbage collector, optionally used as part of\n+the ObjC runtime library when configured with @option{--enable-objc-gc}.\n \n @item config\n Autoconf macros and Makefile fragments used throughout the tree.\n@@ -76,7 +76,7 @@ The C preprocessor library.\n The Decimal Float support library.\n \n @item libffi\n-The @code{libffi} library, used as part of the Java runtime library.\n+The @code{libffi} library, used as part of the Go runtime library.\n \n @item libgcc\n The GCC runtime library.\n@@ -100,9 +100,6 @@ about this library.\n @item libitm\n The runtime support library for transactional memory.\n \n-@item libjava\n-The Java runtime library.\n-\n @item libobjc\n The Objective-C and Objective-C++ runtime library.\n \n@@ -122,9 +119,8 @@ Plugin used by the linker if link-time optimizations are enabled.\n Scripts used by the @code{gccadmin} account on @code{gcc.gnu.org}.\n \n @item zlib\n-The @code{zlib} compression library, used by the Java front end, as\n-part of the Java runtime library, and for compressing and uncompressing\n-GCC's intermediate language in LTO object files.\n+The @code{zlib} compression library, used for compressing and\n+uncompressing GCC's intermediate language in LTO object files.\n @end table\n \n The build system in the top level directory, including how recursion\n@@ -629,8 +625,8 @@ for some purposes such as arguments to @option{--enable-languages}.\n If defined, this variable lists (space-separated) language front ends\n other than C that this front end requires to be enabled (with the\n names given being their @code{language} settings).  For example, the\n-Java front end depends on the C++ front end, so sets\n-@samp{lang_requires=c++}.\n+Obj-C++ front end depends on the C++ and ObjC front ends, so sets\n+@samp{lang_requires=\"objc c++\"}.\n @item subdir_requires\n If defined, this variable lists (space-separated) front end directories\n other than C that this front end requires to be present.  For example,\n@@ -862,7 +858,6 @@ here; FIXME: document the others.\n * Test Directives:: Directives used within DejaGnu tests.\n * Ada Tests::       The Ada language testsuites.\n * C Tests::         The C language testsuites.\n-* libgcj Tests::    The Java library testsuites.\n * LTO Testing::     Support for testing link-time optimizations.\n * gcov Testing::    Support for testing gcov.\n * profopt Testing:: Support for testing profile-directed optimizations.\n@@ -2600,29 +2595,6 @@ Test the testsuite itself using @file{gcc.test-framework/test-framework.exp}.\n FIXME: merge in @file{testsuite/README.gcc} and discuss the format of\n test cases and magic comments more.\n \n-@node libgcj Tests\n-@section The Java library testsuites.\n-\n-Runtime tests are executed via @samp{make check} in the\n-@file{@var{target}/libjava/testsuite} directory in the build\n-tree.  Additional runtime tests can be checked into this testsuite.\n-\n-Regression testing of the core packages in libgcj is also covered by the\n-Mauve testsuite.  The @uref{http://sourceware.org/mauve/,,Mauve Project}\n-develops tests for the Java Class Libraries.  These tests are run as part\n-of libgcj testing by placing the Mauve tree within the libjava testsuite\n-sources at @file{libjava/testsuite/libjava.mauve/mauve}, or by specifying\n-the location of that tree when invoking @samp{make}, as in\n-@samp{make MAUVEDIR=~/mauve check}.\n-\n-To detect regressions, a mechanism in @file{mauve.exp} compares the\n-failures for a test run against the list of expected failures in\n-@file{libjava/testsuite/libjava.mauve/xfails} from the source hierarchy.\n-Update this file when adding new failing tests to Mauve, or when fixing\n-bugs in libgcj that had caused Mauve test failures.\n-\n-We encourage developers to contribute test cases to Mauve.\n-\n @node LTO Testing\n @section Support for testing link-time optimizations\n "}]}