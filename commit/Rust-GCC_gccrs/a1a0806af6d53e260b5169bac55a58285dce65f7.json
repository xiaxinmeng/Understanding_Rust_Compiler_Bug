{"sha": "a1a0806af6d53e260b5169bac55a58285dce65f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFhMDgwNmFmNmQ1M2UyNjBiNTE2OWJhYzU1YTU4Mjg1ZGNlNjVmNw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-05-19T00:33:19Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-05-19T00:33:19Z"}, "message": "(untyped_call): New pattern.\n\nFrom-SVN: r12035", "tree": {"sha": "dcc170cebba4f1f4bb49e2b28048ded12fc0b00e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcc170cebba4f1f4bb49e2b28048ded12fc0b00e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1a0806af6d53e260b5169bac55a58285dce65f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a0806af6d53e260b5169bac55a58285dce65f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a0806af6d53e260b5169bac55a58285dce65f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a0806af6d53e260b5169bac55a58285dce65f7/comments", "author": null, "committer": null, "parents": [{"sha": "7085bad383da40cb4e8c22076991277d088bc882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7085bad383da40cb4e8c22076991277d088bc882", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7085bad383da40cb4e8c22076991277d088bc882"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "d0ac20cf01f80ec42ba5ec18bf0c22647d19a973", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a0806af6d53e260b5169bac55a58285dce65f7/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a0806af6d53e260b5169bac55a58285dce65f7/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=a1a0806af6d53e260b5169bac55a58285dce65f7", "patch": "@@ -1680,6 +1680,36 @@\n   \"\"\n   \"jmp\t@%0%#\"\n   [(set_attr \"needs_delay_slot\" \"yes\")])\n+\n+;; Call subroutine returning any type.\n+;; ??? This probably doesn't work.\n+\n+(define_expand \"untyped_call\"\n+  [(parallel [(call (match_operand 0 \"\" \"\")\n+\t\t    (const_int 0))\n+\t      (match_operand 1 \"\" \"\")\n+\t      (match_operand 2 \"\" \"\")])]\n+  \"TARGET_SH3E\"\n+  \"\n+{\n+  int i;\n+\n+  emit_call_insn (gen_call (operands[0], const0_rtx, const0_rtx, const0_rtx));\n+\n+  for (i = 0; i < XVECLEN (operands[2], 0); i++)\n+    {\n+      rtx set = XVECEXP (operands[2], 0, i);\n+      emit_move_insn (SET_DEST (set), SET_SRC (set));\n+    }\n+\n+  /* The optimizer does not know that the call sets the function value\n+     registers we stored in the result block.  We avoid problems by\n+     claiming that all hard registers are used and clobbered at this\n+     point.  */\n+  emit_insn (gen_blockage ());\n+\n+  DONE;\n+}\")\n \f\n ;; ------------------------------------------------------------------------\n ;; Misc insns"}]}