{"sha": "939047f542ddbe43a36d755a39ba3b531bb5d8cc", "node_id": "C_kwDOANBUbNoAKDkzOTA0N2Y1NDJkZGJlNDNhMzZkNzU1YTM5YmEzYjUzMWJiNWQ4Y2M", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2021-10-01T00:36:38Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-11T13:38:12Z"}, "message": "[Ada] Valid postconditions incorrectly rejected.\n\ngcc/ada/\n\n\t* sem_attr.adb (Analyze_Attribute_Old_Result): Permit an\n\tattribute reference inside a compiler-generated _Postconditions\n\tprocedure. In this case, Subp_Decl is assigned the declaration\n\tof the enclosing subprogram.\n\t* exp_util.adb (Insert_Actions): When climbing up the tree\n\tlooking for an insertion point, do not climb past an\n\tN_Iterated_Component/Element_Association, since this could\n\tresult in inserting a reference to a loop parameter at a\n\tlocation outside of the scope of that loop parameter. On the\n\tother hand, be careful to preserve existing behavior in the case\n\tof an N_Component_Association node.", "tree": {"sha": "9fc6e24775456cbde0dbcc8c409690209a50ebfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fc6e24775456cbde0dbcc8c409690209a50ebfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/939047f542ddbe43a36d755a39ba3b531bb5d8cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/939047f542ddbe43a36d755a39ba3b531bb5d8cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/939047f542ddbe43a36d755a39ba3b531bb5d8cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/939047f542ddbe43a36d755a39ba3b531bb5d8cc/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ad5d5e3d5d40f220df7239b54d5017259dc4d1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ad5d5e3d5d40f220df7239b54d5017259dc4d1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ad5d5e3d5d40f220df7239b54d5017259dc4d1d"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "0a6837ce992ab465c40a195b170bced91c39a3cb", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939047f542ddbe43a36d755a39ba3b531bb5d8cc/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939047f542ddbe43a36d755a39ba3b531bb5d8cc/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=939047f542ddbe43a36d755a39ba3b531bb5d8cc", "patch": "@@ -7619,8 +7619,18 @@ package body Exp_Util is\n                | N_Iterated_Component_Association\n                | N_Iterated_Element_Association\n             =>\n-               if Nkind (Parent (P)) = N_Aggregate\n-                 and then Present (Loop_Actions (P))\n+               if Nkind (Parent (P)) in N_Aggregate | N_Delta_Aggregate\n+\n+                 --  We must not climb up out of an N_Iterated_xxx_Association\n+                 --  because the actions might contain references to the loop\n+                 --  parameter. But it turns out that setting the Loop_Actions\n+                 --  attribute in the case of an N_Component_Association\n+                 --  when the attribute was not already set can lead to\n+                 --  (as yet not understood) bugboxes (gcc failures that are\n+                 --  presumably due to malformed trees). So we don't do that.\n+\n+                 and then (Nkind (P) /= N_Component_Association\n+                            or else Present (Loop_Actions (P)))\n                then\n                   if Is_Empty_List (Loop_Actions (P)) then\n                      Set_Loop_Actions (P, Ins_Actions);"}, {"sha": "32c5d3785a6fe3d1b57c4c92ecf33eaf33f4d11d", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939047f542ddbe43a36d755a39ba3b531bb5d8cc/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939047f542ddbe43a36d755a39ba3b531bb5d8cc/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=939047f542ddbe43a36d755a39ba3b531bb5d8cc", "patch": "@@ -1413,6 +1413,15 @@ package body Sem_Attr is\n                return;\n             end if;\n \n+         --  'Old attribute reference ok in a _Postconditions procedure\n+\n+         elsif Nkind (Prag) = N_Subprogram_Body\n+           and then not Comes_From_Source (Prag)\n+           and then Nkind (Corresponding_Spec (Prag)) = N_Defining_Identifier\n+           and then Chars (Corresponding_Spec (Prag)) = Name_uPostconditions\n+         then\n+            null;\n+\n          --  Otherwise the placement of the attribute is illegal\n \n          else\n@@ -1424,6 +1433,15 @@ package body Sem_Attr is\n \n          if Nkind (Prag) = N_Aspect_Specification then\n             Subp_Decl := Parent (Prag);\n+         elsif Nkind (Prag) = N_Subprogram_Body then\n+            declare\n+               Enclosing_Scope : constant Node_Id :=\n+                 Scope (Corresponding_Spec (Prag));\n+            begin\n+               pragma Assert (Postconditions_Proc (Enclosing_Scope)\n+                               = Corresponding_Spec (Prag));\n+               Subp_Decl := Parent (Parent (Enclosing_Scope));\n+            end;\n          else\n             Subp_Decl := Find_Related_Declaration_Or_Body (Prag);\n          end if;"}]}