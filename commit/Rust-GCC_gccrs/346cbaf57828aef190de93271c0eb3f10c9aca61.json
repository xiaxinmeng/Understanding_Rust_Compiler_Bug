{"sha": "346cbaf57828aef190de93271c0eb3f10c9aca61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ2Y2JhZjU3ODI4YWVmMTkwZGU5MzI3MWMwZWIzZjEwYzlhY2E2MQ==", "commit": {"author": {"name": "Thomas Rodgers", "email": "rodgert@twrodgers.com", "date": "2021-05-17T18:41:26Z"}, "committer": {"name": "Thomas Rodgers", "email": "rodgert@twrodgers.com", "date": "2021-05-17T19:05:06Z"}, "message": "libstdc++: Fix wrong thread waking on notify [PR100334]\n\nFixes https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100334\n\nlibstdc++-v3/ChangeLog:\n\t* include/bits/atomic_wait.h (__waiter::_M_do_wait_v): loop\n\tuntil value change observed.\n\t(__waiter_base::_M_laundered): New member.\n\t(__waiter_base::_M_notify): Check _M_laundered to determine\n\twhether to wake one or all.\n\t(__detail::__atomic_compare): Return true if call to\n\t__builtin_memcmp() == 0.\n\t(__waiter_base::_S_do_spin_v): Adjust predicate.\n\t* testsuite/29_atomics/atomic/wait_notify/100334.cc: New\n\ttest.", "tree": {"sha": "7480a5ab7ce1b1e9bfacc9e277517e8be1f33027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7480a5ab7ce1b1e9bfacc9e277517e8be1f33027"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/346cbaf57828aef190de93271c0eb3f10c9aca61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346cbaf57828aef190de93271c0eb3f10c9aca61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/346cbaf57828aef190de93271c0eb3f10c9aca61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346cbaf57828aef190de93271c0eb3f10c9aca61/comments", "author": {"login": "rodgert", "id": 120839, "node_id": "MDQ6VXNlcjEyMDgzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/120839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodgert", "html_url": "https://github.com/rodgert", "followers_url": "https://api.github.com/users/rodgert/followers", "following_url": "https://api.github.com/users/rodgert/following{/other_user}", "gists_url": "https://api.github.com/users/rodgert/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodgert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodgert/subscriptions", "organizations_url": "https://api.github.com/users/rodgert/orgs", "repos_url": "https://api.github.com/users/rodgert/repos", "events_url": "https://api.github.com/users/rodgert/events{/privacy}", "received_events_url": "https://api.github.com/users/rodgert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rodgert", "id": 120839, "node_id": "MDQ6VXNlcjEyMDgzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/120839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodgert", "html_url": "https://github.com/rodgert", "followers_url": "https://api.github.com/users/rodgert/followers", "following_url": "https://api.github.com/users/rodgert/following{/other_user}", "gists_url": "https://api.github.com/users/rodgert/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodgert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodgert/subscriptions", "organizations_url": "https://api.github.com/users/rodgert/orgs", "repos_url": "https://api.github.com/users/rodgert/repos", "events_url": "https://api.github.com/users/rodgert/events{/privacy}", "received_events_url": "https://api.github.com/users/rodgert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58f7c7e098b79c96403c8341823ec3ba1e8b3945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f7c7e098b79c96403c8341823ec3ba1e8b3945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f7c7e098b79c96403c8341823ec3ba1e8b3945"}], "stats": {"total": 121, "additions": 113, "deletions": 8}, "files": [{"sha": "07bb744d822b1d59b84826cdc704f3b657701104", "filename": "libstdc++-v3/include/bits/atomic_wait.h", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346cbaf57828aef190de93271c0eb3f10c9aca61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346cbaf57828aef190de93271c0eb3f10c9aca61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h?ref=346cbaf57828aef190de93271c0eb3f10c9aca61", "patch": "@@ -181,11 +181,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn false;\n       }\n \n+    // return true if equal\n     template<typename _Tp>\n       bool __atomic_compare(const _Tp& __a, const _Tp& __b)\n       {\n \t// TODO make this do the correct padding bit ignoring comparison\n-\treturn __builtin_memcmp(&__a, &__b, sizeof(_Tp)) != 0;\n+\treturn __builtin_memcmp(&__a, &__b, sizeof(_Tp)) == 0;\n       }\n \n     struct __waiter_pool_base\n@@ -300,14 +301,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  explicit __waiter_base(const _Up* __addr) noexcept\n \t    : _M_w(_S_for(__addr))\n \t    , _M_addr(_S_wait_addr(__addr, &_M_w._M_ver))\n-\t  {\n-\t  }\n+\t  { }\n+\n+\tbool\n+\t_M_laundered() const\n+\t{ return _M_addr == &_M_w._M_ver; }\n \n \tvoid\n \t_M_notify(bool __all, bool __bare = false)\n \t{\n-\t  if (_M_addr == &_M_w._M_ver)\n-\t    __atomic_fetch_add(_M_addr, 1, __ATOMIC_ACQ_REL);\n+\t  if (_M_laundered())\n+\t    {\n+\t      __atomic_fetch_add(_M_addr, 1, __ATOMIC_ACQ_REL);\n+\t      __all = true;\n+\t    }\n \t  _M_w._M_notify(_M_addr, __all, __bare);\n \t}\n \n@@ -320,7 +327,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t       _Spin __spin = _Spin{ })\n \t  {\n \t    auto const __pred = [=]\n-\t      { return __detail::__atomic_compare(__old, __vfn()); };\n+\t      { return !__detail::__atomic_compare(__old, __vfn()); };\n \n \t    if constexpr (__platform_wait_uses_type<_Up>)\n \t      {\n@@ -387,7 +394,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    __platform_wait_t __val;\n \t    if (__base_type::_M_do_spin_v(__old, __vfn, __val))\n \t      return;\n-\t    __base_type::_M_w._M_do_wait(__base_type::_M_addr, __val);\n+\n+\t    do\n+\t      {\n+\t\t__base_type::_M_w._M_do_wait(__base_type::_M_addr, __val);\n+\t      }\n+\t    while (__detail::__atomic_compare(__old, __vfn()));\n \t  }\n \n \ttemplate<typename _Pred>\n@@ -452,7 +464,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __atomic_notify_address(const _Tp* __addr, bool __all) noexcept\n     {\n       __detail::__bare_wait __w(__addr);\n-      __w._M_notify(__all, true);\n+      __w._M_notify(__all);\n     }\n \n   // This call is to be used by atomic types which track contention externally"}, {"sha": "fceb709e06e2b14009008247ce671fc737146b2f", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/wait_notify/100334.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346cbaf57828aef190de93271c0eb3f10c9aca61/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2F100334.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346cbaf57828aef190de93271c0eb3f10c9aca61/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2F100334.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2F100334.cc?ref=346cbaf57828aef190de93271c0eb3f10c9aca61", "patch": "@@ -0,0 +1,93 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-gthreads \"\" }\n+// { dg-additional-options \"-pthread\" { target pthread } }\n+// { dg-add-options libatomic }\n+\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <atomic>\n+#include <future>\n+\n+#include <testsuite_hooks.h>\n+\n+template <typename T>\n+struct atomics_sharing_same_waiter\n+{\n+   std::atomic<T> tmp[49 * 4] = {};\n+   std::atomic<T>* a[4] = {\n+      { &tmp[0] },\n+      { &tmp[16 * 4] },\n+      { &tmp[32 * 4] },\n+      { &tmp[48 * 4] }\n+   };\n+};\n+\n+constexpr unsigned key(void * a)\n+{\n+  constexpr uintptr_t ct = 16;\n+  return (uintptr_t(a) >> 2) % ct;\n+}\n+\n+int\n+main()\n+{\n+  // all atomic share the same waiter\n+//  atomics_sharing_same_waiter<char> atomics;\n+  atomics_sharing_same_waiter<char> atomics;\n+  for (auto& atom : atomics.a)\n+  {\n+    atom->store(0);\n+  }\n+\n+  auto a = &std::__detail::__waiter_pool_base::_S_for(reinterpret_cast<char *>(atomics.a[0]));\n+  auto b = &std::__detail::__waiter_pool_base::_S_for(reinterpret_cast<char *>(atomics.a[1]));\n+  VERIFY( a == b );\n+\n+  auto fut0 = std::async(std::launch::async, [&] { atomics.a[0]->wait(0); });\n+  auto fut1 = std::async(std::launch::async, [&] { atomics.a[1]->wait(0); });\n+  auto fut2 = std::async(std::launch::async, [&] { atomics.a[2]->wait(0); });\n+  auto fut3 = std::async(std::launch::async, [&] { atomics.a[3]->wait(0); });\n+\n+  // make sure the all threads already await\n+  std::this_thread::sleep_for(std::chrono::milliseconds{100});\n+\n+  atomics.a[2]->store(1);\n+  atomics.a[2]->notify_one();\n+\n+  VERIFY(std::future_status::timeout == fut0.wait_for(std::chrono::milliseconds{100}));\n+  VERIFY(atomics.a[0]->load() == 0);\n+\n+  VERIFY(std::future_status::timeout == fut1.wait_for(std::chrono::milliseconds{100}));\n+  VERIFY(atomics.a[1]->load() == 0);\n+\n+  VERIFY(std::future_status::ready == fut2.wait_for(std::chrono::milliseconds{100}));\n+  VERIFY(atomics.a[2]->load() == 1);\n+\n+  VERIFY(std::future_status::timeout == fut3.wait_for(std::chrono::milliseconds{100}));\n+  VERIFY(atomics.a[3]->load() == 0);\n+\n+  atomics.a[0]->store(1);\n+  atomics.a[0]->notify_one();\n+  atomics.a[1]->store(1);\n+  atomics.a[1]->notify_one();\n+  atomics.a[3]->store(1);\n+  atomics.a[3]->notify_one();\n+\n+  return 0;\n+}"}]}