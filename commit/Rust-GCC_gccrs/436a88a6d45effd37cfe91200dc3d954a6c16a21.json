{"sha": "436a88a6d45effd37cfe91200dc3d954a6c16a21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM2YTg4YTZkNDVlZmZkMzdjZmU5MTIwMGRjM2Q5NTRhNmMxNmEyMQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-11-05T10:35:33Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-11-05T10:35:33Z"}, "message": "Makefile.in: Remove all targets related to building distributions and diffs, or INSTALL.\n\n\t* Makefile.in: Remove all targets related to building\n\tdistributions and diffs, or INSTALL.\n\t* INSTALL, install1.texi: Remove.\n\t* configure.in: Remove mention of distdir.\n\t* configure: Regenerate.\n\t* objc/Make-lang.in: Remove mention of distdir.\n\nch:\n\t* Make-lang.in (CHILL.distdir): Remove.\n\ncp:\n\t* Make-lang.in (c++.distdir): Remove.\n\nf:\n\t* Make-lang.in: Remove f77.distdir and f/INSTALL.\n\t* INSTALL, install0.texi: Remove.\n\njava:\n\t* Make-lang.in (java.distdir): Remove.\n\nFrom-SVN: r37265", "tree": {"sha": "242d08c66351c0b6c9bf23b6ef32fdb9a9e7d282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/242d08c66351c0b6c9bf23b6ef32fdb9a9e7d282"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/436a88a6d45effd37cfe91200dc3d954a6c16a21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436a88a6d45effd37cfe91200dc3d954a6c16a21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/436a88a6d45effd37cfe91200dc3d954a6c16a21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436a88a6d45effd37cfe91200dc3d954a6c16a21/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28d31a703fd5e4b2f3e45287b12a6a8002e3aee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d31a703fd5e4b2f3e45287b12a6a8002e3aee8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28d31a703fd5e4b2f3e45287b12a6a8002e3aee8"}], "stats": {"total": 2818, "additions": 43, "deletions": 2775}, "files": [{"sha": "da60ee070d8c3737718761f742f16371de0c3641", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=436a88a6d45effd37cfe91200dc3d954a6c16a21", "patch": "@@ -1,3 +1,12 @@\n+2000-11-05  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* Makefile.in: Remove all targets related to building\n+\tdistributions and diffs, or INSTALL.\n+\t* INSTALL, install1.texi: Remove.\n+\t* configure.in: Remove mention of distdir.\n+\t* configure: Regenerate.\n+\t* objc/Make-lang.in: Remove mention of distdir.\n+\n 2000-11-04  Neil Booth  <neilb@earthling.net>\n \n \t* cpp.texi: Update for _Pragma."}, {"sha": "bad72afee14bafcc314cfcae45156215387c9468", "filename": "gcc/INSTALL", "status": "removed", "additions": 0, "deletions": 2197, "changes": 2197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d31a703fd5e4b2f3e45287b12a6a8002e3aee8/gcc%2FINSTALL", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d31a703fd5e4b2f3e45287b12a6a8002e3aee8/gcc%2FINSTALL", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FINSTALL?ref=28d31a703fd5e4b2f3e45287b12a6a8002e3aee8", "patch": "@@ -1,2197 +0,0 @@\n-This file documents the installation of the GNU compiler.  Copyright\n-(C) 1988, 1989, 1992, 1994, 1995 Free Software Foundation, Inc.  You\n-may copy, distribute, and modify it freely as long as you preserve this\n-copyright notice and permission notice.\n-\n-Installing GNU CC\n-*****************\n-\n-   Note most of this information is out of date and superseded by the\n-online GCC install procedures `http://gcc.gnu.org/install/'.  It is\n-provided for historical reference only.\n-\n-   Here is the procedure for installing GNU CC on a GNU or Unix system.\n-See *Note VMS Install::, for VMS systems.  In this section we assume you\n-compile in the same directory that contains the source files; see *Note\n-Other Dir::, to find out how to compile in a separate directory on Unix\n-systems.\n-\n-   You cannot install GNU C by itself on MSDOS; it will not compile\n-under any MSDOS compiler except itself.  You need to get the complete\n-compilation package DJGPP, which includes binaries as well as sources,\n-and includes all the necessary compilation tools and libraries.\n-\n-  1. If you have built GNU CC previously in the same directory for a\n-     different target machine, do `make distclean' to delete all files\n-     that might be invalid.  One of the files this deletes is\n-     `Makefile'; if `make distclean' complains that `Makefile' does not\n-     exist, it probably means that the directory is already suitably\n-     clean.\n-\n-  2. On a System V release 4 system, make sure `/usr/bin' precedes\n-     `/usr/ucb' in `PATH'.  The `cc' command in `/usr/ucb' uses\n-     libraries which have bugs.\n-\n-  3. Make sure the Bison parser generator is installed.  (This is\n-     unnecessary if the Bison output file `c-parse.c' is more recent\n-     than `c-parse.y',and you do not plan to change the `.y' file.)\n-\n-     Bison versions older than Sept 8, 1988 will produce incorrect\n-     output for `c-parse.c'.\n-\n-  4. If you have chosen a configuration for GNU CC which requires other\n-     GNU tools (such as GAS or the GNU linker) instead of the standard\n-     system tools, install the required tools in the build directory\n-     under the names `as', `ld' or whatever is appropriate.  This will\n-     enable the compiler to find the proper tools for compilation of\n-     the program `enquire'.\n-\n-     Alternatively, you can do subsequent compilation using a value of\n-     the `PATH' environment variable such that the necessary GNU tools\n-     come before the standard system tools.\n-\n-  5. Specify the host, build and target machine configurations.  You do\n-     this when you run the `configure' script.\n-\n-     The \"build\" machine is the system which you are using, the \"host\"\n-     machine is the system where you want to run the resulting compiler\n-     (normally the build machine), and the \"target\" machine is the\n-     system for which you want the compiler to generate code.\n-\n-     If you are building a compiler to produce code for the machine it\n-     runs on (a native compiler), you normally do not need to specify\n-     any operands to `configure'; it will try to guess the type of\n-     machine you are on and use that as the build, host and target\n-     machines.  So you don't need to specify a configuration when\n-     building a native compiler unless `configure' cannot figure out\n-     what your configuration is or guesses wrong.\n-\n-     In those cases, specify the build machine's \"configuration name\"\n-     with the `--host' option; the host and target will default to be\n-     the same as the host machine.  (If you are building a\n-     cross-compiler, see *Note Cross-Compiler::.)\n-\n-     Here is an example:\n-\n-          ./configure --host=sparc-sun-sunos4.1\n-\n-     A configuration name may be canonical or it may be more or less\n-     abbreviated.\n-\n-     A canonical configuration name has three parts, separated by\n-     dashes.  It looks like this: `CPU-COMPANY-SYSTEM'.  (The three\n-     parts may themselves contain dashes; `configure' can figure out\n-     which dashes serve which purpose.)  For example,\n-     `m68k-sun-sunos4.1' specifies a Sun 3.\n-\n-     You can also replace parts of the configuration by nicknames or\n-     aliases.  For example, `sun3' stands for `m68k-sun', so\n-     `sun3-sunos4.1' is another way to specify a Sun 3.  You can also\n-     use simply `sun3-sunos', since the version of SunOS is assumed by\n-     default to be version 4.\n-\n-     You can specify a version number after any of the system types,\n-     and some of the CPU types.  In most cases, the version is\n-     irrelevant, and will be ignored.  So you might as well specify the\n-     version if you know it.\n-\n-     See *Note Configurations::, for a list of supported configuration\n-     names and notes on many of the configurations.  You should check\n-     the notes in that section before proceeding any further with the\n-     installation of GNU CC.\n-\n-  6. When running `configure', you may also need to specify certain\n-     additional options that describe variant hardware and software\n-     configurations.  These are `--with-gnu-as', `--with-gnu-ld',\n-     `--with-stabs' and `--nfp'.\n-\n-    `--with-gnu-as'\n-          If you will use GNU CC with the GNU assembler (GAS), you\n-          should declare this by using the `--with-gnu-as' option when\n-          you run `configure'.\n-\n-          Using this option does not install GAS.  It only modifies the\n-          output of GNU CC to work with GAS.  Building and installing\n-          GAS is up to you.\n-\n-          Conversely, if you *do not* wish to use GAS and do not specify\n-          `--with-gnu-as' when building GNU CC, it is up to you to make\n-          sure that GAS is not installed.  GNU CC searches for a\n-          program named `as' in various directories; if the program it\n-          finds is GAS, then it runs GAS.  If you are not sure where\n-          GNU CC finds the assembler it is using, try specifying `-v'\n-          when you run it.\n-\n-          The systems where it makes a difference whether you use GAS\n-          are\n-          `hppa1.0-ANY-ANY', `hppa1.1-ANY-ANY', `i386-ANY-sysv',\n-          `i386-ANY-isc',\n-          `i860-ANY-bsd', `m68k-bull-sysv',\n-          `m68k-hp-hpux', `m68k-sony-bsd',\n-          `m68k-altos-sysv', `m68000-hp-hpux',\n-          `m68000-att-sysv', `ANY-lynx-lynxos', and `mips-ANY').  On\n-          any other system, `--with-gnu-as' has no effect.\n-\n-          On the systems listed above (except for the HP-PA, for ISC on\n-          the 386, and for `mips-sgi-irix5.*'), if you use GAS, you\n-          should also use the GNU linker (and specify `--with-gnu-ld').\n-\n-    `--with-gnu-ld'\n-          Specify the option `--with-gnu-ld' if you plan to use the GNU\n-          linker with GNU CC.\n-\n-          This option does not cause the GNU linker to be installed; it\n-          just modifies the behavior of GNU CC to work with the GNU\n-          linker.\n-\n-    `--with-stabs'\n-          On MIPS based systems and on Alphas, you must specify whether\n-          you want GNU CC to create the normal ECOFF debugging format,\n-          or to use BSD-style stabs passed through the ECOFF symbol\n-          table.  The normal ECOFF debug format cannot fully handle\n-          languages other than C.  BSD stabs format can handle other\n-          languages, but it only works with the GNU debugger GDB.\n-\n-          Normally, GNU CC uses the ECOFF debugging format by default;\n-          if you prefer BSD stabs, specify `--with-stabs' when you\n-          configure GNU CC.\n-\n-          No matter which default you choose when you configure GNU CC,\n-          the user can use the `-gcoff' and `-gstabs+' options to\n-          specify explicitly the debug format for a particular\n-          compilation.\n-\n-          `--with-stabs' is meaningful on the ISC system on the 386,\n-          also, if `--with-gas' is used.  It selects use of stabs\n-          debugging information embedded in COFF output.  This kind of\n-          debugging information supports C++ well; ordinary COFF\n-          debugging information does not.\n-\n-          `--with-stabs' is also meaningful on 386 systems running\n-          SVR4.  It selects use of stabs debugging information embedded\n-          in ELF output.  The C++ compiler currently (2.6.0) does not\n-          support the DWARF debugging information normally used on 386\n-          SVR4 platforms; stabs provide a workable alternative.  This\n-          requires gas and gdb, as the normal SVR4 tools can not\n-          generate or interpret stabs.\n-\n-    `--nfp'\n-          On certain systems, you must specify whether the machine has\n-          a floating point unit.  These systems include\n-          `m68k-sun-sunosN' and `m68k-isi-bsd'.  On any other system,\n-          `--nfp' currently has no effect, though perhaps there are\n-          other systems where it could usefully make a difference.\n-\n-    `--enable-haifa'\n-    `--disable-haifa'\n-          Use `--enable-haifa' to enable use of an experimental\n-          instruction scheduler (from IBM Haifa).  This may or may not\n-          produce better code.  Some targets on which it is known to be\n-          a win enable it by default; use `--disable-haifa' to disable\n-          it in these cases.  `configure' will print out whether the\n-          Haifa scheduler is enabled when it is run.\n-\n-    `--enable-threads=TYPE'\n-          Certain systems, notably Linux-based GNU systems, can't be\n-          relied on to supply a threads facility for the Objective C\n-          runtime and so will default to single-threaded runtime.  They\n-          may, however, have a library threads implementation\n-          available, in which case threads can be enabled with this\n-          option by supplying a suitable TYPE, probably `posix'.  The\n-          possibilities for TYPE are `single', `posix', `win32',\n-          `solaris', `irix' and `mach'.\n-\n-    `--enable-checking'\n-          When you specify this option, the compiler is built to\n-          perform checking of tree node types when referencing fields\n-          of that node.  This does not change the generated code, but\n-          adds error checking within the compiler.  This will slow down\n-          the compiler and may only work properly if you are building\n-          the compiler with GNU C.\n-\n-          The `configure' script searches subdirectories of the source\n-          directory for other compilers that are to be integrated into\n-          GNU CC.  The GNU compiler for C++, called G++ is in a\n-          subdirectory named `cp'.  `configure' inserts rules into\n-          `Makefile' to build all of those compilers.\n-\n-          Here we spell out what files will be set up by `configure'.\n-          Normally you need not be concerned with these files.\n-\n-             * A file named `config.h' is created that contains a\n-               `#include' of the top-level config file for the machine\n-               you will run the compiler on (*note The Configuration\n-               File: (gcc.info)Config.).  This file is responsible for\n-               defining information about the host machine.  It\n-               includes `tm.h'.\n-\n-               The top-level config file is located in the subdirectory\n-               `config'.  Its name is always `xm-SOMETHING.h'; usually\n-               `xm-MACHINE.h', but there are some exceptions.\n-\n-               If your system does not support symbolic links, you\n-               might want to set up `config.h' to contain a `#include'\n-               command which refers to the appropriate file.\n-\n-             * A file named `tconfig.h' is created which includes the\n-               top-level config file for your target machine.  This is\n-               used for compiling certain programs to run on that\n-               machine.\n-\n-             * A file named `tm.h' is created which includes the\n-               machine-description macro file for your target machine.\n-               It should be in the subdirectory `config' and its name\n-               is often `MACHINE.h'.\n-\n-    `--enable-nls'\n-    `--disable-nls'\n-          The `--enable-nls' option enables Native Language Support\n-          (NLS), which lets GCC output diagnostics in languages other\n-          than American English. Native Language Support is enabled by\n-          default if not doing a canadian cross build. The\n-          `--disable-nls' option disables NLS.\n-\n-    `--with-included-gettext'\n-          If NLS is enbled, the `--with-included-gettext' option causes\n-          the build procedure to prefer its copy of GNU `gettext'. This\n-          is the default. If you want the GCC build procedure to prefer\n-          the host's `gettext' libraries, use\n-          `--without-included-gettext'.\n-\n-    `--with-catgets'\n-          If NLS is enabled, and if the host lacks `gettext' but has the\n-          inferior `catgets' interface, the GCC build procedure normally\n-          ignores `catgets' and instead uses GCC's copy of the GNU\n-          `gettext' library.  The `--with-catgets' option causes the\n-          build procedure to use the host's `catgets' in this situation.\n-\n-    `--enable-maintainer-mode'\n-          The build rules that regenerate the GCC master message catalog\n-          `gcc.pot' are normally disabled. This is because it can only\n-          be rebuilt if the complete source tree is present. If you\n-          have changed the sources and want to rebuild the catalog,\n-          configuring with `--enable-maintainer-mode' will enable this.\n-          Note that you need a special version of the `gettext' tools\n-          to do so.\n-\n-    `--enable-win32-registry'\n-    `--enable-win32-registry=KEY'\n-    `--disable-win32-registry'\n-          The `--enable-win32-registry' option enables Windows-hosted\n-          GCC to look up installations paths in the registry using the\n-          following key:\n-\n-               `HKEY_LOCAL_MACHINE\\SOFTWARE\\Free Software Foundation\\<KEY>'\n-\n-          <KEY> defaults to GCC version number, and can be overridden\n-          by the `--enable-win32-registry=KEY' option. Vendors and\n-          distributors who use custom installers are encouraged to\n-          provide a different key, perhaps one comprised of vendor name\n-          and GCC version number, to avoid conflict with existing\n-          installations. This feature is enabled by default, and can be\n-          disabled by `--disable-win32-registry' option.  This option\n-          has no effect on the other hosts.\n-\n-  7. In certain cases, you should specify certain other options when\n-     you run `configure'.\n-\n-        * The standard directory for installing GNU CC is\n-          `/usr/local/lib'.  If you want to install its files somewhere\n-          else, specify `--prefix=DIR' when you run `configure'.  Here\n-          DIR is a directory name to use instead of `/usr/local' for\n-          all purposes with one exception: the directory\n-          `/usr/local/include' is searched for header files no matter\n-          where you install the compiler.  To override this name, use\n-          the `--with-local-prefix' option below.  The directory you\n-          specify need not exist, but its parent directory must exist.\n-\n-        * Specify `--with-local-prefix=DIR' if you want the compiler to\n-          search directory `DIR/include' for locally installed header\n-          files *instead* of `/usr/local/include'.\n-\n-          You should specify `--with-local-prefix' *only* if your site\n-          has a different convention (not `/usr/local') for where to put\n-          site-specific files.\n-\n-          The default value for `--with-local-prefix' is `/usr/local'\n-          regardless of the value of `--prefix'.  Specifying `--prefix'\n-          has no effect on which directory GNU CC searches for local\n-          header files.  This may seem counterintuitive, but actually\n-          it is logical.\n-\n-          The purpose of `--prefix' is to specify where to *install GNU\n-          CC*.  The local header files in `/usr/local/include'--if you\n-          put any in that directory--are not part of GNU CC.  They are\n-          part of other programs--perhaps many others.  (GNU CC\n-          installs its own header files in another directory which is\n-          based on the `--prefix' value.)\n-\n-          *Do not* specify `/usr' as the `--with-local-prefix'!  The\n-          directory you use for `--with-local-prefix' *must not* contain\n-          any of the system's standard header files.  If it did contain\n-          them, certain programs would be miscompiled (including GNU\n-          Emacs, on certain targets), because this would override and\n-          nullify the header file corrections made by the `fixincludes'\n-          script.\n-\n-          Indications are that people who use this option use it based\n-          on mistaken ideas of what it is for.  People use it as if it\n-          specified where to install part of GNU CC.  Perhaps they make\n-          this assumption because installing GNU CC creates the\n-          directory.\n-\n-  8. Build the compiler.  Just type `make LANGUAGES=c' in the compiler\n-     directory.\n-\n-     `LANGUAGES=c' specifies that only the C compiler should be\n-     compiled.  The makefile normally builds compilers for all the\n-     supported languages; currently, C, C++, Objective C, Java,\n-     FORTRAN, and CHILL.  However, C is the only language that is sure\n-     to work when you build with other non-GNU C compilers.  In\n-     addition, building anything but C at this stage is a waste of time.\n-\n-     In general, you can specify the languages to build by typing the\n-     argument `LANGUAGES=\"LIST\"', where LIST is one or more words from\n-     the list `c', `c++', `objective-c', `java', `f77', and `CHILL'.\n-     If you have any additional GNU compilers as subdirectories of the\n-     GNU CC source directory, you may also specify their names in this\n-     list.\n-\n-     Ignore any warnings you may see about \"statement not reached\" in\n-     `insn-emit.c'; they are normal.  Also, warnings about \"unknown\n-     escape sequence\" are normal in `genopinit.c' and perhaps some\n-     other files.  Likewise, you should ignore warnings about \"constant\n-     is so large that it is unsigned\" in `insn-emit.c' and\n-     `insn-recog.c', and a warning about a comparison always being zero\n-     in `enquire.o'.  Any other compilation errors may represent bugs in\n-     the port to your machine or operating system, and should be\n-     investigated and reported.\n-\n-     Some compilers fail to compile GNU CC because they have bugs or\n-     limitations.  For example, the Microsoft compiler is said to run\n-     out of macro space.  Some Ultrix compilers run out of expression\n-     space; then you need to break up the statement where the problem\n-     happens.\n-\n-  9. If you are building a cross-compiler, stop here.  *Note\n-     Cross-Compiler::.\n-\n- 10. Move the first-stage object files and executables into a\n-     subdirectory with this command:\n-\n-          make stage1\n-\n-     The files are moved into a subdirectory named `stage1'.  Once\n-     installation is complete, you may wish to delete these files with\n-     `rm -r stage1'.\n-\n- 11. If you have chosen a configuration for GNU CC which requires other\n-     GNU tools (such as GAS or the GNU linker) instead of the standard\n-     system tools, install the required tools in the `stage1'\n-     subdirectory under the names `as', `ld' or whatever is\n-     appropriate.  This will enable the stage 1 compiler to find the\n-     proper tools in the following stage.\n-\n-     Alternatively, you can do subsequent compilation using a value of\n-     the `PATH' environment variable such that the necessary GNU tools\n-     come before the standard system tools.\n-\n- 12. Recompile the compiler with itself, with this command:\n-\n-          make CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"-g -O2\"\n-\n-     This is called making the stage 2 compiler.\n-\n-     The command shown above builds compilers for all the supported\n-     languages.  If you don't want them all, you can specify the\n-     languages to build by typing the argument `LANGUAGES=\"LIST\"'.  LIST\n-     should contain one or more words from the list `c', `c++',\n-     `objective-c', and `proto'.  Separate the words with spaces.\n-     `proto' stands for the programs `protoize' and `unprotoize'; they\n-     are not a separate language, but you use `LANGUAGES' to enable or\n-     disable their installation.\n-\n-     If you are going to build the stage 3 compiler, then you might\n-     want to build only the C language in stage 2.\n-\n-     Once you have built the stage 2 compiler, if you are short of disk\n-     space, you can delete the subdirectory `stage1'.\n-\n-     On a 68000 or 68020 system lacking floating point hardware, unless\n-     you have selected a `tm.h' file that expects by default that there\n-     is no such hardware, do this instead:\n-\n-          make CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"-g -O2 -msoft-float\"\n-\n- 13. If you wish to test the compiler by compiling it with itself one\n-     more time, install any other necessary GNU tools (such as GAS or\n-     the GNU linker) in the `stage2' subdirectory as you did in the\n-     `stage1' subdirectory, then do this:\n-\n-          make stage2\n-          make CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"-g -O2\"\n-\n-     This is called making the stage 3 compiler.  Aside from the `-B'\n-     option, the compiler options should be the same as when you made\n-     the stage 2 compiler.  But the `LANGUAGES' option need not be the\n-     same.  The command shown above builds compilers for all the\n-     supported languages; if you don't want them all, you can specify\n-     the languages to build by typing the argument `LANGUAGES=\"LIST\"',\n-     as described above.\n-\n-     If you do not have to install any additional GNU tools, you may\n-     use the command\n-\n-          make bootstrap LANGUAGES=LANGUAGE-LIST BOOT_CFLAGS=OPTION-LIST\n-\n-     instead of making `stage1', `stage2', and performing the two\n-     compiler builds.\n-\n- 14. Compare the latest object files with the stage 2 object files--they\n-     ought to be identical, aside from time stamps (if any).\n-\n-     On some systems, meaningful comparison of object files is\n-     impossible; they always appear \"different.\"  This is currently\n-     true on Solaris and some systems that use ELF object file format.\n-     On some versions of Irix on SGI machines and DEC Unix (OSF/1) on\n-     Alpha systems, you will not be able to compare the files without\n-     specifying `-save-temps'; see the description of individual\n-     systems above to see if you get comparison failures.  You may have\n-     similar problems on other systems.\n-\n-     Use this command to compare the files:\n-\n-          make compare\n-\n-     This will mention any object files that differ between stage 2 and\n-     stage 3.  Any difference, no matter how innocuous, indicates that\n-     the stage 2 compiler has compiled GNU CC incorrectly, and is\n-     therefore a potentially serious bug which you should investigate\n-     and report.\n-\n-     If your system does not put time stamps in the object files, then\n-     this is a faster way to compare them (using the Bourne shell):\n-\n-          for file in *.o; do\n-          cmp $file stage2/$file\n-          done\n-\n-     If you have built the compiler with the `-mno-mips-tfile' option on\n-     MIPS machines, you will not be able to compare the files.\n-\n- 15. Install the compiler driver, the compiler's passes and run-time\n-     support with `make install'.  Use the same value for `CC',\n-     `CFLAGS' and `LANGUAGES' that you used when compiling the files\n-     that are being installed.  One reason this is necessary is that\n-     some versions of Make have bugs and recompile files gratuitously\n-     when you do this step.  If you use the same variable values, those\n-     files will be recompiled properly.\n-\n-     For example, if you have built the stage 2 compiler, you can use\n-     the following command:\n-\n-          make install CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"-g -O\" LANGUAGES=\"LIST\"\n-\n-     This copies the files `cc1', `cpp' and `libgcc.a' to files `cc1',\n-     `cpp' and `libgcc.a' in the directory\n-     `/usr/local/lib/gcc-lib/TARGET/VERSION', which is where the\n-     compiler driver program looks for them.  Here TARGET is the\n-     canonicalized form of target machine type specified when you ran\n-     `configure', and VERSION is the version number of GNU CC.  This\n-     naming scheme permits various versions and/or cross-compilers to\n-     coexist.  It also copies the executables for compilers for other\n-     languages (e.g., `cc1plus' for C++) to the same directory.\n-\n-     This also copies the driver program `xgcc' into\n-     `/usr/local/bin/gcc', so that it appears in typical execution\n-     search paths.  It also copies `gcc.1' into `/usr/local/man/man1'\n-     and info pages into `/usr/local/info'.\n-\n-     On some systems, this command causes recompilation of some files.\n-     This is usually due to bugs in `make'.  You should either ignore\n-     this problem, or use GNU Make.\n-\n-     *Warning: there is a bug in `alloca' in the Sun library.  To avoid\n-     this bug, be sure to install the executables of GNU CC that were\n-     compiled by GNU CC.  (That is, the executables from stage 2 or 3,\n-     not stage 1.)  They use `alloca' as a built-in function and never\n-     the one in the library.*\n-\n-     (It is usually better to install GNU CC executables from stage 2\n-     or 3, since they usually run faster than the ones compiled with\n-     some other compiler.)\n-\n- 16. If you're going to use C++, you need to install the C++ runtime\n-     library.  This includes all I/O functionality, special class\n-     libraries, etc.\n-\n-     The standard C++ runtime library for GNU CC is called `libstdc++'.\n-     An obsolescent library `libg++' may also be available, but it's\n-     necessary only for older software that hasn't been converted yet;\n-     if you don't know whether you need `libg++' then you probably don't\n-     need it.\n-\n-     Here's one way to build and install `libstdc++' for GNU CC:\n-\n-        * Build and install GNU CC, so that invoking `gcc' obtains the\n-          GNU CC that was just built.\n-\n-        * Obtain a copy of a compatible `libstdc++' distribution.  For\n-          example, the `libstdc++-2.8.0.tar.gz' distribution should be\n-          compatible with GCC 2.8.0.  GCC distributors normally\n-          distribute `libstdc++' as well.\n-\n-        * Set the `CXX' environment variable to `gcc' while running the\n-          `libstdc++' distribution's `configure' command.  Use the same\n-          `configure' options that you used when you invoked GCC's\n-          `configure' command.\n-\n-        * Invoke `make' to build the C++ runtime.\n-\n-        * Invoke `make install' to install the C++ runtime.\n-\n-     To summarize, after building and installing GNU CC, invoke the\n-     following shell commands in the topmost directory of the C++\n-     library distribution.  For CONFIGURE-OPTIONS, use the same options\n-     that you used to configure GNU CC.\n-\n-          $ CXX=gcc ./configure CONFIGURE-OPTIONS\n-          $ make\n-          $ make install\n-\n- 17. GNU CC includes a runtime library for Objective-C because it is an\n-     integral part of the language.  You can find the files associated\n-     with the library in the subdirectory `objc'.  The GNU Objective-C\n-     Runtime Library requires header files for the target's C library in\n-     order to be compiled,and also requires the header files for the\n-     target's thread library if you want thread support.  *Note\n-     Cross-Compilers and Header Files: Cross Headers, for discussion\n-     about header files issues for cross-compilation.\n-\n-     When you run `configure', it picks the appropriate Objective-C\n-     thread implementation file for the target platform.  In some\n-     situations, you may wish to choose a different back-end as some\n-     platforms support multiple thread implementations or you may wish\n-     to disable thread support completely.  You do this by specifying a\n-     value for the OBJC_THREAD_FILE makefile variable on the command\n-     line when you run make, for example:\n-\n-          make CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"-g -O2\" OBJC_THREAD_FILE=thr-single\n-\n-     Below is a list of the currently available back-ends.\n-\n-        * thr-single Disable thread support, should work for all\n-          platforms.\n-\n-        * thr-decosf1 DEC OSF/1 thread support.\n-\n-        * thr-irix SGI IRIX thread support.\n-\n-        * thr-mach Generic MACH thread support, known to work on\n-          NEXTSTEP.\n-\n-        * thr-os2 IBM OS/2 thread support.\n-\n-        * thr-posix Generix POSIX thread support.\n-\n-        * thr-pthreads PCThreads on Linux-based GNU systems.\n-\n-        * thr-solaris SUN Solaris thread support.\n-\n-        * thr-win32 Microsoft Win32 API thread support.\n-\n-Files Created by `configure'\n-============================\n-\n-   Here we spell out what files will be set up by `configure'.  Normally\n-you need not be concerned with these files.\n-\n-   * A file named `config.h' is created that contains a `#include' of\n-     the top-level config file for the machine you will run the compiler\n-     on (*note The Configuration File: (gcc.info)Config.).  This file\n-     is responsible for defining information about the host machine.\n-     It includes `tm.h'.\n-\n-     The top-level config file is located in the subdirectory `config'.\n-     Its name is always `xm-SOMETHING.h'; usually `xm-MACHINE.h', but\n-     there are some exceptions.\n-\n-     If your system does not support symbolic links, you might want to\n-     set up `config.h' to contain a `#include' command which refers to\n-     the appropriate file.\n-\n-   * A file named `tconfig.h' is created which includes the top-level\n-     config file for your target machine.  This is used for compiling\n-     certain programs to run on that machine.\n-\n-   * A file named `tm.h' is created which includes the\n-     machine-description macro file for your target machine.  It should\n-     be in the subdirectory `config' and its name is often `MACHINE.h'.\n-\n-   * The command file `configure' also constructs the file `Makefile'\n-     by adding some text to the template file `Makefile.in'.  The\n-     additional text comes from files in the `config' directory, named\n-     `t-TARGET' and `x-HOST'.  If these files do not exist, it means\n-     nothing needs to be added for a given target or host.\n-\n-Configurations Supported by GNU CC\n-==================================\n-\n-   Here are the possible CPU types:\n-\n-     1750a, a29k, alpha, arm, avr, cN, clipper, dsp16xx, elxsi, fr30,\n-     h8300, hppa1.0, hppa1.1, i370, i386, i486, i586, i686, i786, i860,\n-     i960, m32r, m68000, m68k, m6811, m6812, m88k, mcore, mips, mipsel,\n-     mips64, mips64el, mn10200, mn10300, ns32k, pdp11, powerpc,\n-     powerpcle, romp, rs6000, sh, sparc, sparclite, sparc64, v850, vax,\n-     we32k.\n-\n-   Here are the recognized company names.  As you can see, customary\n-abbreviations are used rather than the longer official names.\n-\n-     acorn, alliant, altos, apollo, apple, att, bull, cbm, convergent,\n-     convex, crds, dec, dg, dolphin, elxsi, encore, harris, hitachi,\n-     hp, ibm, intergraph, isi, mips, motorola, ncr, next, ns, omron,\n-     plexus, sequent, sgi, sony, sun, tti, unicom, wrs.\n-\n-   The company name is meaningful only to disambiguate when the rest of\n-the information supplied is insufficient.  You can omit it, writing\n-just `CPU-SYSTEM', if it is not needed.  For example, `vax-ultrix4.2'\n-is equivalent to `vax-dec-ultrix4.2'.\n-\n-   Here is a list of system types:\n-\n-     386bsd, aix, acis, amigaos, aos, aout, aux, bosx, bsd, clix, coff,\n-     ctix, cxux, dgux, dynix, ebmon, ecoff, elf, esix, freebsd, hms,\n-     genix, gnu, linux, linux-gnu, hiux, hpux, iris, irix, isc, luna,\n-     lynxos, mach, minix, msdos, mvs, netbsd, newsos, nindy, ns, osf,\n-     osfrose, ptx, riscix, riscos, rtu, sco, sim, solaris, sunos, sym,\n-     sysv, udi, ultrix, unicos, uniplus, unos, vms, vsta, vxworks,\n-     winnt, xenix.\n-\n-You can omit the system type; then `configure' guesses the operating\n-system from the CPU and company.\n-\n-   You can add a version number to the system type; this may or may not\n-make a difference.  For example, you can write `bsd4.3' or `bsd4.4' to\n-distinguish versions of BSD.  In practice, the version number is most\n-needed for `sysv3' and `sysv4', which are often treated differently.\n-\n-   `linux-gnu' is the canonical name for the GNU/Linux target; however\n-GNU CC will also accept `linux'.  The version of the kernel in use is\n-not relevant on these systems.  A suffix such as `libc1' or `aout'\n-distinguishes major versions of the C library; all of the suffixed\n-versions are obsolete.\n-\n-   If you specify an impossible combination such as `i860-dg-vms', then\n-you may get an error message from `configure', or it may ignore part of\n-the information and do the best it can with the rest.  `configure'\n-always prints the canonical name for the alternative that it used.  GNU\n-CC does not support all possible alternatives.\n-\n-   Often a particular model of machine has a name.  Many machine names\n-are recognized as aliases for CPU/company combinations.  Thus, the\n-machine name `sun3', mentioned above, is an alias for `m68k-sun'.\n-Sometimes we accept a company name as a machine name, when the name is\n-popularly used for a particular machine.  Here is a table of the known\n-machine names:\n-\n-     3300, 3b1, 3bN, 7300, altos3068, altos, apollo68, att-7300,\n-     balance, convex-cN, crds, decstation-3100, decstation, delta,\n-     encore, fx2800, gmicro, hp7NN, hp8NN, hp9k2NN, hp9k3NN, hp9k7NN,\n-     hp9k8NN, iris4d, iris, isi68, m3230, magnum, merlin, miniframe,\n-     mmax, news-3600, news800, news, next, pbd, pc532, pmax, powerpc,\n-     powerpcle, ps2, risc-news, rtpc, sun2, sun386i, sun386, sun3,\n-     sun4, symmetry, tower-32, tower.\n-\n-Remember that a machine name specifies both the cpu type and the company\n-name.  If you want to install your own homemade configuration files,\n-you can use `local' as the company name to access them.  If you use\n-configuration `CPU-local', the configuration name without the cpu prefix\n-is used to form the configuration file names.\n-\n-   Thus, if you specify `m68k-local', configuration uses files\n-`m68k.md', `local.h', `m68k.c', `xm-local.h', `t-local', and `x-local',\n-all in the directory `config/m68k'.\n-\n-   Here is a list of configurations that have special treatment or\n-special things you must know:\n-\n-`1750a-*-*'\n-     MIL-STD-1750A processors.\n-\n-     The MIL-STD-1750A cross configuration produces output for\n-     `as1750', an assembler/linker available under the GNU Public\n-     License for the 1750A. `as1750' can be obtained at\n-     `ftp://ftp.fta-berlin.de/pub/crossgcc/1750gals/'.  A similarly\n-     licensed simulator for the 1750A is available from same address.\n-\n-     You should ignore a fatal error during the building of libgcc\n-     (libgcc is not yet implemented for the 1750A.)\n-\n-     The `as1750' assembler requires the file `ms1750.inc', which is\n-     found in the directory `config/1750a'.\n-\n-     GNU CC produced the same sections as the Fairchild F9450 C\n-     Compiler, namely:\n-\n-    `Normal'\n-          The program code section.\n-\n-    `Static'\n-          The read/write (RAM) data section.\n-\n-    `Konst'\n-          The read-only (ROM) constants section.\n-\n-    `Init'\n-          Initialization section (code to copy KREL to SREL).\n-\n-     The smallest addressable unit is 16 bits (BITS_PER_UNIT is 16).\n-     This means that type `char' is represented with a 16-bit word per\n-     character.  The 1750A's \"Load/Store Upper/Lower Byte\" instructions\n-     are not used by GNU CC.\n-\n-`alpha-*-osf1'\n-     Systems using processors that implement the DEC Alpha architecture\n-     and are running the DEC Unix (OSF/1) operating system, for example\n-     the DEC Alpha AXP systems.CC.)\n-\n-     GNU CC writes a `.verstamp' directive to the assembler output file\n-     unless it is built as a cross-compiler.  It gets the version to\n-     use from the system header file `/usr/include/stamp.h'.  If you\n-     install a new version of DEC Unix, you should rebuild GCC to pick\n-     up the new version stamp.\n-\n-     Note that since the Alpha is a 64-bit architecture,\n-     cross-compilers from 32-bit machines will not generate code as\n-     efficient as that generated when the compiler is running on a\n-     64-bit machine because many optimizations that depend on being\n-     able to represent a word on the target in an integral value on the\n-     host cannot be performed.  Building cross-compilers on the Alpha\n-     for 32-bit machines has only been tested in a few cases and may\n-     not work properly.\n-\n-     `make compare' may fail on old versions of DEC Unix unless you add\n-     `-save-temps' to `CFLAGS'.  On these systems, the name of the\n-     assembler input file is stored in the object file, and that makes\n-     comparison fail if it differs between the `stage1' and `stage2'\n-     compilations.  The option `-save-temps' forces a fixed name to be\n-     used for the assembler input file, instead of a randomly chosen\n-     name in `/tmp'.  Do not add `-save-temps' unless the comparisons\n-     fail without that option.  If you add `-save-temps', you will have\n-     to manually delete the `.i' and `.s' files after each series of\n-     compilations.\n-\n-     GNU CC now supports both the native (ECOFF) debugging format used\n-     by DBX and GDB and an encapsulated STABS format for use only with\n-     GDB.  See the discussion of the `--with-stabs' option of\n-     `configure' above for more information on these formats and how to\n-     select them.\n-\n-     There is a bug in DEC's assembler that produces incorrect line\n-     numbers for ECOFF format when the `.align' directive is used.  To\n-     work around this problem, GNU CC will not emit such alignment\n-     directives while writing ECOFF format debugging information even\n-     if optimization is being performed.  Unfortunately, this has the\n-     very undesirable side-effect that code addresses when `-O' is\n-     specified are different depending on whether or not `-g' is also\n-     specified.\n-\n-     To avoid this behavior, specify `-gstabs+' and use GDB instead of\n-     DBX.  DEC is now aware of this problem with the assembler and\n-     hopes to provide a fix shortly.\n-\n-`arc-*-elf'\n-     Argonaut ARC processor.  This configuration is intended for\n-     embedded systems.\n-\n-`arm-*-aout'\n-     Advanced RISC Machines ARM-family processors.  These are often\n-     used in embedded applications.  There are no standard Unix\n-     configurations.  This configuration corresponds to the basic\n-     instruction sequences and will produce `a.out' format object\n-     modules.\n-\n-     You may need to make a variant of the file `arm.h' for your\n-     particular configuration.\n-\n-`arm-*-elf'\n-     This configuration is intended for embedded systems.\n-\n-`arm-*-linux*aout'\n-     Any of the ARM-family processors running the Linux-based GNU\n-     system with the `a.out' binary format.  This is an obsolete\n-     configuration.\n-\n-`arm-*-linux'\n-`arm-*-linux-gnu'\n-`arm-*-linux*oldld'\n-     Any of the ARM-family processors running the Linux-based GNU\n-     system with the `ELF' binary format.  You must use version\n-     2.9.1.0.22 or later of the GNU/Linux binutils, which you can\n-     download from `ftp://ftp.varesearch.com/pub/support/hjl/binutils/'.\n-\n-     These two configurations differ only in the required version of GNU\n-     binutils.  For binutils 2.9.1.0.x, use `arm-*-linux-gnuoldld'.  For\n-     newer versions of binutils, use `arm-*-linux-gnu'.\n-\n-`arm-*-riscix'\n-     The ARM2 or ARM3 processor running RISC iX, Acorn's port of BSD\n-     Unix.  If you are running a version of RISC iX prior to 1.2 then\n-     you must specify the version number during configuration.  Note\n-     that the assembler shipped with RISC iX does not support stabs\n-     debugging information; a new version of the assembler, with stabs\n-     support included, is now available from Acorn and via ftp\n-     `ftp://ftp.acorn.com/pub/riscix/as+xterm.tar.Z'.  To enable stabs\n-     debugging, pass `--with-gnu-as' to configure.\n-\n-     You will need to install GNU `sed' before you can run configure.\n-\n-`a29k'\n-     AMD Am29k-family processors.  These are normally used in embedded\n-     applications.  There are no standard Unix configurations.  This\n-     configuration corresponds to AMD's standard calling sequence and\n-     binary interface and is compatible with other 29k tools.\n-\n-     You may need to make a variant of the file `a29k.h' for your\n-     particular configuration.\n-\n-`a29k-*-bsd'\n-     AMD Am29050 used in a system running a variant of BSD Unix.\n-\n-`avr'\n-     ATMEL AVR-family micro controllers.  These are used in embedded\n-     applications.  There are no standard Unix configurations.\n-     Supports following MCU's:  - AT90S23xx  - ATtiny22  - AT90S44xx  -\n-     AT90S85xx  - ATmega603/603L  - ATmega103/103L\n-\n-`decstation-*'\n-     MIPS-based DECstations can support three different personalities:\n-     Ultrix, DEC OSF/1, and OSF/rose.  (Alpha-based DECstation products\n-     have a configuration name beginning with `alpha-dec'.)  To\n-     configure GCC for these platforms use the following configurations:\n-\n-    `decstation-ultrix'\n-          Ultrix configuration.\n-\n-    `decstation-osf1'\n-          Dec's version of OSF/1.\n-\n-    `decstation-osfrose'\n-          Open Software Foundation reference port of OSF/1 which uses\n-          the OSF/rose object file format instead of ECOFF.  Normally,\n-          you would not select this configuration.\n-\n-     The MIPS C compiler needs to be told to increase its table size\n-     for switch statements with the `-Wf,-XNg1500' option in order to\n-     compile `cp/parse.c'.  If you use the `-O2' optimization option,\n-     you also need to use `-Olimit 3000'.  Both of these options are\n-     automatically generated in the `Makefile' that the shell script\n-     `configure' builds.  If you override the `CC' make variable and\n-     use the MIPS compilers, you may need to add `-Wf,-XNg1500 -Olimit\n-     3000'.\n-\n-`elxsi-elxsi-bsd'\n-     The Elxsi's C compiler has known limitations that prevent it from\n-     compiling GNU C.  Please contact <mrs@cygnus.com> for more details.\n-\n-`dsp16xx'\n-     A port to the AT&T DSP1610 family of processors.\n-\n-`h8300-*-*'\n-     Hitachi H8/300 series of processors.\n-\n-     The calling convention and structure layout has changed in release\n-     2.6.  All code must be recompiled.  The calling convention now\n-     passes the first three arguments in function calls in registers.\n-     Structures are no longer a multiple of 2 bytes.\n-\n-`hppa*-*-*'\n-     There are several variants of the HP-PA processor which run a\n-     variety of operating systems.  GNU CC must be configured to use\n-     the correct processor type and operating system, or GNU CC will\n-     not function correctly.  The easiest way to handle this problem is\n-     to *not* specify a target when configuring GNU CC, the `configure'\n-     script will try to automatically determine the right processor\n-     type and operating system.\n-\n-     `-g' does not work on HP-UX, since that system uses a peculiar\n-     debugging format which GNU CC does not know about.  However, `-g'\n-     will work if you also use GAS and GDB in conjunction with GCC.  We\n-     highly recommend using GAS for all HP-PA configurations.\n-\n-     You should be using GAS-2.6 (or later) along with GDB-4.16 (or\n-     later).  These can be retrieved from all the traditional GNU ftp\n-     archive sites.\n-\n-     On some versions of HP-UX, you will need to install GNU `sed'.\n-\n-     You will need to be install GAS into a directory before `/bin',\n-     `/usr/bin', and `/usr/ccs/bin' in your search path.  You should\n-     install GAS before you build GNU CC.\n-\n-     To enable debugging, you must configure GNU CC with the\n-     `--with-gnu-as' option before building.\n-\n-`i370-*-*'\n-     This port is very preliminary and has many known bugs.  We hope to\n-     have a higher-quality port for this machine soon.\n-\n-`i386-*-linux*oldld'\n-     Use this configuration to generate `a.out' binaries on Linux-based\n-     GNU systems if you do not have gas/binutils version 2.5.2 or later\n-     installed. This is an obsolete configuration.\n-\n-`i386-*-linux*aout'\n-     Use this configuration to generate `a.out' binaries on Linux-based\n-     GNU systems. This configuration is being superseded. You must use\n-     gas/binutils version 2.5.2 or later.\n-\n-`i386-*-linux'\n-`i386-*-linux-gnu'\n-     Use this configuration to generate ELF binaries on Linux-based GNU\n-     systems.  You must use gas/binutils version 2.5.2 or later.\n-\n-`i386-*-sco'\n-     Compilation with RCC is recommended.  Also, it may be a good idea\n-     to link with GNU malloc instead of the malloc that comes with the\n-     system.\n-\n-`i386-*-sco3.2v4'\n-     Use this configuration for SCO release 3.2 version 4.\n-\n-`i386-*-sco3.2v5*'\n-     Use this for the SCO OpenServer Release family including 5.0.0,\n-     5.0.2, 5.0.4, 5.0.5, Internet FastStart 1.0, and Internet\n-     FastStart 1.1.\n-\n-     GNU CC can generate COFF binaries if you specify `-mcoff' or ELF\n-     binaries, the default.    A full `make bootstrap' is recommended\n-     so that an ELF compiler that builds ELF is generated.\n-\n-     You must have TLS597 from `ftp://ftp.sco.com/TLS' installed for ELF\n-     C++ binaries to work correctly on releases before 5.0.4.\n-\n-     The native SCO assembler that is provided with the OS at no charge\n-     is normally required.  If, however, you must be able to use the GNU\n-     assembler (perhaps you have complex asms) you must configure this\n-     package `--with-gnu-as'.  To do this, install (cp or symlink)\n-     gcc/as to your copy of the GNU assembler.  You must use a recent\n-     version of GNU binutils; version 2.9.1 seems to work well.  If you\n-     select this option, you will be unable to build COFF images.\n-     Trying to do so will result in non-obvious failures.  In general,\n-     the \"-with-gnu-as\" option isn't as well tested as the native\n-     assembler.\n-\n-     *NOTE:* If you are building C++, you must follow the instructions\n-     about invoking `make bootstrap' because the native OpenServer\n-     compiler may build a `cc1plus' that will not correctly parse many\n-     valid C++ programs.  You must do a `make bootstrap' if you are\n-     building with the native compiler.\n-\n-`i386-*-isc'\n-     It may be a good idea to link with GNU malloc instead of the\n-     malloc that comes with the system.\n-\n-     In ISC version 4.1, `sed' core dumps when building `deduced.h'.\n-     Use the version of `sed' from version 4.0.\n-\n-`i386-*-esix'\n-     It may be good idea to link with GNU malloc instead of the malloc\n-     that comes with the system.\n-\n-`i386-ibm-aix'\n-     You need to use GAS version 2.1 or later, and LD from GNU binutils\n-     version 2.2 or later.\n-\n-`i386-sequent-bsd'\n-     Go to the Berkeley universe before compiling.\n-\n-`i386-sequent-ptx1*'\n-`i386-sequent-ptx2*'\n-     You must install GNU `sed' before running `configure'.\n-\n-`i386-sun-sunos4'\n-     You may find that you need another version of GNU CC to begin\n-     bootstrapping with, since the current version when built with the\n-     system's own compiler seems to get an infinite loop compiling part\n-     of `libgcc2.c'.  GNU CC version 2 compiled with GNU CC (any\n-     version) seems not to have this problem.\n-\n-     See *Note Sun Install::, for information on installing GNU CC on\n-     Sun systems.\n-\n-`i[345]86-*-winnt3.5'\n-     This version requires a GAS that has not yet been released.  Until\n-     it is, you can get a prebuilt binary version via anonymous ftp from\n-     `ftp://cs.washington.edu/pub/gnat' or `ftp://cs.nyu.edu/pub/gnat'.\n-     You must also use the Microsoft header files from the Windows NT\n-     3.5 SDK.  Find these on the CDROM in the `/mstools/h' directory\n-     dated 9/4/94.  You must use a fixed version of Microsoft linker\n-     made especially for NT 3.5, which is also is available on the NT\n-     3.5 SDK CDROM.  If you do not have this linker, can you also use\n-     the linker from Visual C/C++ 1.0 or 2.0.\n-\n-     Installing GNU CC for NT builds a wrapper linker, called `ld.exe',\n-     which mimics the behaviour of Unix `ld' in the specification of\n-     libraries (`-L' and `-l').  `ld.exe' looks for both Unix and\n-     Microsoft named libraries.  For example, if you specify `-lfoo',\n-     `ld.exe' will look first for `libfoo.a' and then for `foo.lib'.\n-\n-     You may install GNU CC for Windows NT in one of two ways,\n-     depending on whether or not you have a Unix-like shell and various\n-     Unix-like utilities.\n-\n-       1. If you do not have a Unix-like shell and few Unix-like\n-          utilities, you will use a DOS style batch script called\n-          `configure.bat'.  Invoke it as `configure winnt' from an\n-          MSDOS console window or from the program manager dialog box.\n-          `configure.bat' assumes you have already installed and have\n-          in your path a Unix-like `sed' program which is used to\n-          create a working `Makefile' from `Makefile.in'.\n-\n-          `Makefile' uses the Microsoft Nmake program maintenance\n-          utility and the Visual C/C++ V8.00 compiler to build GNU CC.\n-          You need only have the utilities `sed' and `touch' to use\n-          this installation method, which only automatically builds the\n-          compiler itself.  You must then examine what `fixinc.winnt'\n-          does, edit the header files by hand and build `libgcc.a'\n-          manually.\n-\n-       2. The second type of installation assumes you are running a\n-          Unix-like shell, have a complete suite of Unix-like utilities\n-          in your path, and have a previous version of GNU CC already\n-          installed, either through building it via the above\n-          installation method or acquiring a pre-built binary.  In this\n-          case, use the `configure' script in the normal fashion.\n-\n-`i860-intel-osf1'\n-     This is the Paragon.  If you have version 1.0 of the operating\n-     system, you need to take special steps to build GNU CC due to\n-     peculiarities of the system.  Newer system versions have no\n-     problem.  See the section `Installation Problems' in the GNU CC\n-     Manual.\n-\n-`*-lynx-lynxos'\n-     LynxOS 2.2 and earlier comes with GNU CC 1.x already installed as\n-     `/bin/gcc'.  You should compile with this instead of `/bin/cc'.\n-     You can tell GNU CC to use the GNU assembler and linker, by\n-     specifying `--with-gnu-as --with-gnu-ld' when configuring.  These\n-     will produce COFF format object files and executables;  otherwise\n-     GNU CC will use the installed tools, which produce `a.out' format\n-     executables.\n-\n-`m32r-*-elf'\n-     Mitsubishi M32R processor.  This configuration is intended for\n-     embedded systems.\n-\n-`m68000-hp-bsd'\n-     HP 9000 series 200 running BSD.  Note that the C compiler that\n-     comes with this system cannot compile GNU CC; contact\n-     <law@cygnus.com> to get binaries of GNU CC for bootstrapping.\n-\n-`m68k-altos'\n-     Altos 3068.  You must use the GNU assembler, linker and debugger.\n-     Also, you must fix a kernel bug.  Details in the file\n-     `README.ALTOS'.\n-\n-`m68k-apple-aux'\n-     Apple Macintosh running A/UX.  You may configure GCC  to use\n-     either the system assembler and linker or the GNU assembler and\n-     linker.  You should use the GNU configuration if you can,\n-     especially if you also want to use GNU C++.  You enabled that\n-     configuration with + the `--with-gnu-as' and `--with-gnu-ld'\n-     options to `configure'.\n-\n-     Note the C compiler that comes with this system cannot compile GNU\n-     CC.  You can find binaries of GNU CC for bootstrapping on\n-     `jagubox.gsfc.nasa.gov'.  You will also a patched version of\n-     `/bin/ld' there that raises some of the arbitrary limits found in\n-     the original.\n-\n-`m68k-att-sysv'\n-     AT&T 3b1, a.k.a. 7300 PC.  This version of GNU CC cannot be\n-     compiled with the system C compiler, which is too buggy.  You will\n-     need to get a previous version of GCC and use it to bootstrap.\n-     Binaries are available from the OSU-CIS archive, at\n-     `ftp://archive.cis.ohio-state.edu/pub/att7300/'.\n-\n-`m68k-bull-sysv'\n-     Bull DPX/2 series 200 and 300 with BOS-2.00.45 up to BOS-2.01. GNU\n-     CC works either with native assembler or GNU assembler. You can use\n-     GNU assembler with native coff generation by providing\n-     `--with-gnu-as' to the configure script or use GNU assembler with\n-     dbx-in-coff encapsulation by providing `--with-gnu-as --stabs'.\n-     For any problem with native assembler or for availability of the\n-     DPX/2 port of GAS, contact <F.Pierresteguy@frcl.bull.fr>.\n-\n-`m68k-crds-unox'\n-     Use `configure unos' for building on Unos.\n-\n-     The Unos assembler is named `casm' instead of `as'.  For some\n-     strange reason linking `/bin/as' to `/bin/casm' changes the\n-     behavior, and does not work.  So, when installing GNU CC, you\n-     should install the following script as `as' in the subdirectory\n-     where the passes of GCC are installed:\n-\n-          #!/bin/sh\n-          casm $*\n-\n-     The default Unos library is named `libunos.a' instead of `libc.a'.\n-     To allow GNU CC to function, either change all references to\n-     `-lc' in `gcc.c' to `-lunos' or link `/lib/libc.a' to\n-     `/lib/libunos.a'.\n-\n-     When compiling GNU CC with the standard compiler, to overcome bugs\n-     in the support of `alloca', do not use `-O' when making stage 2.\n-     Then use the stage 2 compiler with `-O' to make the stage 3\n-     compiler.  This compiler will have the same characteristics as the\n-     usual stage 2 compiler on other systems.  Use it to make a stage 4\n-     compiler and compare that with stage 3 to verify proper\n-     compilation.\n-\n-     (Perhaps simply defining `ALLOCA' in `x-crds' as described in the\n-     comments there will make the above paragraph superfluous.  Please\n-     inform us of whether this works.)\n-\n-     Unos uses memory segmentation instead of demand paging, so you\n-     will need a lot of memory.  5 Mb is barely enough if no other\n-     tasks are running.  If linking `cc1' fails, try putting the object\n-     files into a library and linking from that library.\n-\n-`m68k-hp-hpux'\n-     HP 9000 series 300 or 400 running HP-UX.  HP-UX version 8.0 has a\n-     bug in the assembler that prevents compilation of GNU CC.  To fix\n-     it, get patch PHCO_4484 from HP.\n-\n-     In addition, if you wish to use gas `--with-gnu-as' you must use\n-     gas version 2.1 or later, and you must use the GNU linker version\n-     2.1 or later.  Earlier versions of gas relied upon a program which\n-     converted the gas output into the native HP-UX format, but that\n-     program has not been kept up to date.  gdb does not understand\n-     that native HP-UX format, so you must use gas if you wish to use\n-     gdb.\n-\n-`m68k-sun'\n-     Sun 3.  We do not provide a configuration file to use the Sun FPA\n-     by default, because programs that establish signal handlers for\n-     floating point traps inherently cannot work with the FPA.\n-\n-     See *Note Sun Install::, for information on installing GNU CC on\n-     Sun systems.\n-\n-`m6811-elf'\n-     Motorola 68HC11 family micro controllers.  These are used in\n-     embedded applications.  There are no standard Unix configurations.\n-\n-`m6812-elf'\n-     Motorola 68HC12 family micro controllers.  These are used in\n-     embedded applications.  There are no standard Unix configurations.\n-\n-`m88k-*-svr3'\n-     Motorola m88k running the AT&T/Unisoft/Motorola V.3 reference port.\n-     These systems tend to use the Green Hills C, revision 1.8.5, as the\n-     standard C compiler.  There are apparently bugs in this compiler\n-     that result in object files differences between stage 2 and stage\n-     3.  If this happens, make the stage 4 compiler and compare it to\n-     the stage 3 compiler.  If the stage 3 and stage 4 object files are\n-     identical, this suggests you encountered a problem with the\n-     standard C compiler; the stage 3 and 4 compilers may be usable.\n-\n-     It is best, however, to use an older version of GNU CC for\n-     bootstrapping if you have one.\n-\n-`m88k-*-dgux'\n-     Motorola m88k running DG/UX.  To build 88open BCS native or cross\n-     compilers on DG/UX, specify the configuration name as\n-     `m88k-*-dguxbcs' and build in the 88open BCS software development\n-     environment.  To build ELF native or cross compilers on DG/UX,\n-     specify `m88k-*-dgux' and build in the DG/UX ELF development\n-     environment.  You set the software development environment by\n-     issuing `sde-target' command and specifying either `m88kbcs' or\n-     `m88kdguxelf' as the operand.\n-\n-     If you do not specify a configuration name, `configure' guesses the\n-     configuration based on the current software development\n-     environment.\n-\n-`m88k-tektronix-sysv3'\n-     Tektronix XD88 running UTekV 3.2e.  Do not turn on optimization\n-     while building stage1 if you bootstrap with the buggy Green Hills\n-     compiler.  Also, The bundled LAI System V NFS is buggy so if you\n-     build in an NFS mounted directory, start from a fresh reboot, or\n-     avoid NFS all together.  Otherwise you may have trouble getting\n-     clean comparisons between stages.\n-\n-`mips-mips-bsd'\n-     MIPS machines running the MIPS operating system in BSD mode.  It's\n-     possible that some old versions of the system lack the functions\n-     `memcpy', `memcmp', and `memset'.  If your system lacks these, you\n-     must remove or undo the definition of `TARGET_MEM_FUNCTIONS' in\n-     `mips-bsd.h'.\n-\n-     The MIPS C compiler needs to be told to increase its table size\n-     for switch statements with the `-Wf,-XNg1500' option in order to\n-     compile `cp/parse.c'.  If you use the `-O2' optimization option,\n-     you also need to use `-Olimit 3000'.  Both of these options are\n-     automatically generated in the `Makefile' that the shell script\n-     `configure' builds.  If you override the `CC' make variable and\n-     use the MIPS compilers, you may need to add `-Wf,-XNg1500 -Olimit\n-     3000'.\n-\n-`mips-mips-riscos*'\n-     The MIPS C compiler needs to be told to increase its table size\n-     for switch statements with the `-Wf,-XNg1500' option in order to\n-     compile `cp/parse.c'.  If you use the `-O2' optimization option,\n-     you also need to use `-Olimit 3000'.  Both of these options are\n-     automatically generated in the `Makefile' that the shell script\n-     `configure' builds.  If you override the `CC' make variable and\n-     use the MIPS compilers, you may need to add `-Wf,-XNg1500 -Olimit\n-     3000'.\n-\n-     MIPS computers running RISC-OS can support four different\n-     personalities: default, BSD 4.3, System V.3, and System V.4 (older\n-     versions of RISC-OS don't support V.4).  To configure GCC for\n-     these platforms use the following configurations:\n-\n-    `mips-mips-riscos`rev''\n-          Default configuration for RISC-OS, revision `rev'.\n-\n-    `mips-mips-riscos`rev'bsd'\n-          BSD 4.3 configuration for RISC-OS, revision `rev'.\n-\n-    `mips-mips-riscos`rev'sysv4'\n-          System V.4 configuration for RISC-OS, revision `rev'.\n-\n-    `mips-mips-riscos`rev'sysv'\n-          System V.3 configuration for RISC-OS, revision `rev'.\n-\n-     The revision `rev' mentioned above is the revision of RISC-OS to\n-     use.  You must reconfigure GCC when going from a RISC-OS revision\n-     4 to RISC-OS revision 5.  This has the effect of avoiding a linker\n-     bug.\n-\n-`mips-sgi-*'\n-     In order to compile GCC on an SGI running IRIX 4, the \"c.hdr.lib\"\n-     option must be installed from the CD-ROM supplied from Silicon\n-     Graphics.  This is found on the 2nd CD in release 4.0.1.\n-\n-     In order to compile GCC on an SGI running IRIX 5, the\n-     \"compiler_dev.hdr\" subsystem must be installed from the IDO CD-ROM\n-     supplied by Silicon Graphics.\n-\n-     `make compare' may fail on version 5 of IRIX unless you add\n-     `-save-temps' to `CFLAGS'.  On these systems, the name of the\n-     assembler input file is stored in the object file, and that makes\n-     comparison fail if it differs between the `stage1' and `stage2'\n-     compilations.  The option `-save-temps' forces a fixed name to be\n-     used for the assembler input file, instead of a randomly chosen\n-     name in `/tmp'.  Do not add `-save-temps' unless the comparisons\n-     fail without that option.  If you do you `-save-temps', you will\n-     have to manually delete the `.i' and `.s' files after each series\n-     of compilations.\n-\n-     The MIPS C compiler needs to be told to increase its table size\n-     for switch statements with the `-Wf,-XNg1500' option in order to\n-     compile `cp/parse.c'.  If you use the `-O2' optimization option,\n-     you also need to use `-Olimit 3000'.  Both of these options are\n-     automatically generated in the `Makefile' that the shell script\n-     `configure' builds.  If you override the `CC' make variable and\n-     use the MIPS compilers, you may need to add `-Wf,-XNg1500 -Olimit\n-     3000'.\n-\n-     On Irix version 4.0.5F, and perhaps on some other versions as well,\n-     there is an assembler bug that reorders instructions incorrectly.\n-     To work around it, specify the target configuration\n-     `mips-sgi-irix4loser'.  This configuration inhibits assembler\n-     optimization.\n-\n-     In a compiler configured with target `mips-sgi-irix4', you can turn\n-     off assembler optimization by using the `-noasmopt' option.  This\n-     compiler option passes the option `-O0' to the assembler, to\n-     inhibit reordering.\n-\n-     The `-noasmopt' option can be useful for testing whether a problem\n-     is due to erroneous assembler reordering.  Even if a problem does\n-     not go away with `-noasmopt', it may still be due to assembler\n-     reordering--perhaps GNU CC itself was miscompiled as a result.\n-\n-     To enable debugging under Irix 5, you must use GNU as 2.5 or later,\n-     and use the `--with-gnu-as' configure option when configuring gcc.\n-     GNU as is distributed as part of the binutils package.\n-\n-`mips-sony-sysv'\n-     Sony MIPS NEWS.  This works in NEWSOS 5.0.1, but not in 5.0.2\n-     (which uses ELF instead of COFF).  Support for 5.0.2 will probably\n-     be provided soon by volunteers.  In particular, the linker does\n-     not like the code generated by GCC when shared libraries are\n-     linked in.\n-\n-`ns32k-encore'\n-     Encore ns32000 system.  Encore systems are supported only under\n-     BSD.\n-\n-`ns32k-*-genix'\n-     National Semiconductor ns32000 system.  Genix has bugs in `alloca'\n-     and `malloc'; you must get the compiled versions of these from GNU\n-     Emacs.\n-\n-`ns32k-sequent'\n-     Go to the Berkeley universe before compiling.\n-\n-`ns32k-utek'\n-     UTEK ns32000 system (\"merlin\").  The C compiler that comes with\n-     this system cannot compile GNU CC; contact `tektronix!reed!mason'\n-     to get binaries of GNU CC for bootstrapping.\n-\n-`romp-*-aos'\n-`romp-*-mach'\n-     The only operating systems supported for the IBM RT PC are AOS and\n-     MACH.  GNU CC does not support AIX running on the RT.  We\n-     recommend you compile GNU CC with an earlier version of itself; if\n-     you compile GNU CC with `hc', the Metaware compiler, it will work,\n-     but you will get mismatches between the stage 2 and stage 3\n-     compilers in various files.  These errors are minor differences in\n-     some floating-point constants and can be safely ignored; the stage\n-     3 compiler is correct.\n-\n-`rs6000-*-aix'\n-`powerpc-*-aix'\n-     Various early versions of each release of the IBM XLC compiler\n-     will not bootstrap GNU CC.  Symptoms include differences between\n-     the stage2 and stage3 object files, and errors when compiling\n-     `libgcc.a' or `enquire'.  Known problematic releases include:\n-     xlc-1.2.1.8, xlc-1.3.0.0 (distributed with AIX 3.2.5), and\n-     xlc-1.3.0.19.  Both xlc-1.2.1.28 and xlc-1.3.0.24 (PTF 432238) are\n-     known to produce working versions of GNU CC, but most other recent\n-     releases correctly bootstrap GNU CC.\n-\n-     Release 4.3.0 of AIX and ones prior to AIX 3.2.4 include a version\n-     of the IBM assembler which does not accept debugging directives:\n-     assembler updates are available as PTFs.  Also, if you are using\n-     AIX 3.2.5 or greater and the GNU assembler, you must have a\n-     version modified after October 16th, 1995 in order for the GNU C\n-     compiler to build.  See the file `README.RS6000' for more details\n-     on any of these problems.\n-\n-     GNU CC does not yet support the 64-bit PowerPC instructions.\n-\n-     Objective C does not work on this architecture because it makes\n-     assumptions that are incompatible with the calling conventions.\n-\n-     AIX on the RS/6000 provides support (NLS) for environments outside\n-     of the United States.  Compilers and assemblers use NLS to support\n-     locale-specific representations of various objects including\n-     floating-point numbers (\".\" vs \",\" for separating decimal\n-     fractions).  There have been problems reported where the library\n-     linked with GNU CC does not produce the same floating-point\n-     formats that the assembler accepts.  If you have this problem, set\n-     the LANG environment variable to \"C\" or \"En_US\".\n-\n-     Due to changes in the way that GNU CC invokes the binder (linker)\n-     for AIX 4.1, you may now receive warnings of duplicate symbols\n-     from the link step that were not reported before.  The assembly\n-     files generated by GNU CC for AIX have always included multiple\n-     symbol definitions for certain global variable and function\n-     declarations in the original program.  The warnings should not\n-     prevent the linker from producing a correct library or runnable\n-     executable.\n-\n-     By default, AIX 4.1 produces code that can be used on either Power\n-     or PowerPC processors.\n-\n-     You can specify a default version for the `-mcpu='CPU_TYPE switch\n-     by using the configure option `--with-cpu-'CPU_TYPE.\n-\n-`powerpc-*-elf'\n-`powerpc-*-sysv4'\n-     PowerPC system in big endian mode, running System V.4.\n-\n-     You can specify a default version for the `-mcpu='CPU_TYPE switch\n-     by using the configure option `--with-cpu-'CPU_TYPE.\n-\n-`powerpc-*-linux'\n-`powerpc-*-linux-gnu'\n-     PowerPC system in big endian mode, running the Linux-based GNU\n-     system.\n-\n-     You can specify a default version for the `-mcpu='CPU_TYPE switch\n-     by using the configure option `--with-cpu-'CPU_TYPE.\n-\n-`powerpc-*-eabiaix'\n-     Embedded PowerPC system in big endian mode with -mcall-aix\n-     selected as the default.\n-\n-     You can specify a default version for the `-mcpu='CPU_TYPE switch\n-     by using the configure option `--with-cpu-'CPU_TYPE.\n-\n-`powerpc-*-eabisim'\n-     Embedded PowerPC system in big endian mode for use in running\n-     under the PSIM simulator.\n-\n-     You can specify a default version for the `-mcpu='CPU_TYPE switch\n-     by using the configure option `--with-cpu-'CPU_TYPE.\n-\n-`powerpc-*-eabi'\n-     Embedded PowerPC system in big endian mode.\n-\n-     You can specify a default version for the `-mcpu='CPU_TYPE switch\n-     by using the configure option `--with-cpu-'CPU_TYPE.\n-\n-`powerpcle-*-elf'\n-`powerpcle-*-sysv4'\n-     PowerPC system in little endian mode, running System V.4.\n-\n-     You can specify a default version for the `-mcpu='CPU_TYPE switch\n-     by using the configure option `--with-cpu-'CPU_TYPE.\n-\n-`powerpcle-*-solaris2*'\n-     PowerPC system in little endian mode, running Solaris 2.5.1 or\n-     higher.\n-\n-     You can specify a default version for the `-mcpu='CPU_TYPE switch\n-     by using the configure option `--with-cpu-'CPU_TYPE.  Beta\n-     versions of the Sun 4.0 compiler do not seem to be able to build\n-     GNU CC correctly.  There are also problems with the host assembler\n-     and linker that are fixed by using the GNU versions of these tools.\n-\n-`powerpcle-*-eabisim'\n-     Embedded PowerPC system in little endian mode for use in running\n-     under the PSIM simulator.\n-\n-`powerpcle-*-eabi'\n-     Embedded PowerPC system in little endian mode.\n-\n-     You can specify a default version for the `-mcpu='CPU_TYPE switch\n-     by using the configure option `--with-cpu-'CPU_TYPE.\n-\n-`powerpcle-*-winnt'\n-`powerpcle-*-pe'\n-     PowerPC system in little endian mode running Windows NT.\n-\n-     You can specify a default version for the `-mcpu='CPU_TYPE switch\n-     by using the configure option `--with-cpu-'CPU_TYPE.\n-\n-`vax-dec-ultrix'\n-     Don't try compiling with Vax C (`vcc').  It produces incorrect code\n-     in some cases (for example, when `alloca' is used).\n-\n-     Meanwhile, compiling `cp/parse.c' with pcc does not work because of\n-     an internal table size limitation in that compiler.  To avoid this\n-     problem, compile just the GNU C compiler first, and use it to\n-     recompile building all the languages that you want to run.\n-\n-`sparc-sun-*'\n-     See *Note Sun Install::, for information on installing GNU CC on\n-     Sun systems.\n-\n-`vax-dec-vms'\n-     See *Note VMS Install::, for details on how to install GNU CC on\n-     VMS.\n-\n-`we32k-*-*'\n-     These computers are also known as the 3b2, 3b5, 3b20 and other\n-     similar names.  (However, the 3b1 is actually a 68000; see *Note\n-     Configurations::.)\n-\n-     Don't use `-g' when compiling with the system's compiler.  The\n-     system's linker seems to be unable to handle such a large program\n-     with debugging information.\n-\n-     The system's compiler runs out of capacity when compiling `stmt.c'\n-     in GNU CC.  You can work around this by building `cpp' in GNU CC\n-     first, then use that instead of the system's preprocessor with the\n-     system's C compiler to compile `stmt.c'.  Here is how:\n-\n-          mv /lib/cpp /lib/cpp.att\n-          cp cpp /lib/cpp.gnu\n-          echo '/lib/cpp.gnu -traditional ${1+\"$@\"}' > /lib/cpp\n-          chmod +x /lib/cpp\n-\n-     The system's compiler produces bad code for some of the GNU CC\n-     optimization files.  So you must build the stage 2 compiler without\n-     optimization.  Then build a stage 3 compiler with optimization.\n-     That executable should work.  Here are the necessary commands:\n-\n-          make LANGUAGES=c CC=stage1/xgcc CFLAGS=\"-Bstage1/ -g\"\n-          make stage2\n-          make CC=stage2/xgcc CFLAGS=\"-Bstage2/ -g -O\"\n-\n-     You may need to raise the ULIMIT setting to build a C++ compiler,\n-     as the file `cc1plus' is larger than one megabyte.\n-\n-Compilation in a Separate Directory\n-===================================\n-\n-   If you wish to build the object files and executables in a directory\n-other than the one containing the source files, here is what you must\n-do differently:\n-\n-  1. Make sure you have a version of Make that supports the `VPATH'\n-     feature.  (GNU Make supports it, as do Make versions on most BSD\n-     systems.)\n-\n-  2. If you have ever run `configure' in the source directory, you must\n-     undo the configuration.  Do this by running:\n-\n-          make distclean\n-\n-  3. Go to the directory in which you want to build the compiler before\n-     running `configure':\n-\n-          mkdir gcc-sun3\n-          cd gcc-sun3\n-\n-     On systems that do not support symbolic links, this directory must\n-     be on the same file system as the source code directory.\n-\n-  4. Specify where to find `configure' when you run it:\n-\n-          ../gcc/configure ...\n-\n-     This also tells `configure' where to find the compiler sources;\n-     `configure' takes the directory from the file name that was used to\n-     invoke it.  But if you want to be sure, you can specify the source\n-     directory with the `--srcdir' option, like this:\n-\n-          ../gcc/configure --srcdir=../gcc OTHER OPTIONS\n-\n-     The directory you specify with `--srcdir' need not be the same as\n-     the one that `configure' is found in.\n-\n-   Now, you can run `make' in that directory.  You need not repeat the\n-configuration steps shown above, when ordinary source files change.  You\n-must, however, run `configure' again when the configuration files\n-change, if your system does not support symbolic links.\n-\n-Building and Installing a Cross-Compiler\n-========================================\n-\n-   GNU CC can function as a cross-compiler for many machines, but not\n-all.\n-\n-   * Cross-compilers for the Mips as target using the Mips assembler\n-     currently do not work, because the auxiliary programs\n-     `mips-tdump.c' and `mips-tfile.c' can't be compiled on anything\n-     but a Mips.  It does work to cross compile for a Mips if you use\n-     the GNU assembler and linker.\n-\n-   * Cross-compilers between machines with different floating point\n-     formats have not all been made to work.  GNU CC now has a floating\n-     point emulator with which these can work, but each target machine\n-     description needs to be updated to take advantage of it.\n-\n-   * Cross-compilation between machines of different word sizes is\n-     somewhat problematic and sometimes does not work.\n-\n-   Since GNU CC generates assembler code, you probably need a\n-cross-assembler that GNU CC can run, in order to produce object files.\n-If you want to link on other than the target machine, you need a\n-cross-linker as well.  You also need header files and libraries suitable\n-for the target machine that you can install on the host machine.\n-\n-Steps of Cross-Compilation\n---------------------------\n-\n-   To compile and run a program using a cross-compiler involves several\n-steps:\n-\n-   * Run the cross-compiler on the host machine to produce assembler\n-     files for the target machine.  This requires header files for the\n-     target machine.\n-\n-   * Assemble the files produced by the cross-compiler.  You can do this\n-     either with an assembler on the target machine, or with a\n-     cross-assembler on the host machine.\n-\n-   * Link those files to make an executable.  You can do this either\n-     with a linker on the target machine, or with a cross-linker on the\n-     host machine.  Whichever machine you use, you need libraries and\n-     certain startup files (typically `crt....o') for the target\n-     machine.\n-\n-   It is most convenient to do all of these steps on the same host\n-machine, since then you can do it all with a single invocation of GNU\n-CC.  This requires a suitable cross-assembler and cross-linker.  For\n-some targets, the GNU assembler and linker are available.\n-\n-Configuring a Cross-Compiler\n-----------------------------\n-\n-   To build GNU CC as a cross-compiler, you start out by running\n-`configure'.  Use the `--target=TARGET' to specify the target type.  If\n-`configure' was unable to correctly identify the system you are running\n-on, also specify the `--build=BUILD' option.  For example, here is how\n-to configure for a cross-compiler that produces code for an HP 68030\n-system running BSD on a system that `configure' can correctly identify:\n-\n-     ./configure --target=m68k-hp-bsd4.3\n-\n-Tools and Libraries for a Cross-Compiler\n-----------------------------------------\n-\n-   If you have a cross-assembler and cross-linker available, you should\n-install them now.  Put them in the directory `/usr/local/TARGET/bin'.\n-Here is a table of the tools you should put in this directory:\n-\n-`as'\n-     This should be the cross-assembler.\n-\n-`ld'\n-     This should be the cross-linker.\n-\n-`ar'\n-     This should be the cross-archiver: a program which can manipulate\n-     archive files (linker libraries) in the target machine's format.\n-\n-`ranlib'\n-     This should be a program to construct a symbol table in an archive\n-     file.\n-\n-   The installation of GNU CC will find these programs in that\n-directory, and copy or link them to the proper place to for the\n-cross-compiler to find them when run later.\n-\n-   The easiest way to provide these files is to build the Binutils\n-package and GAS.  Configure them with the same `--host' and `--target'\n-options that you use for configuring GNU CC, then build and install\n-them.  They install their executables automatically into the proper\n-directory.  Alas, they do not support all the targets that GNU CC\n-supports.\n-\n-   If you want to install libraries to use with the cross-compiler,\n-such as a standard C library, put them in the directory\n-`/usr/local/TARGET/lib'; installation of GNU CC copies all the files in\n-that subdirectory into the proper place for GNU CC to find them and\n-link with them.  Here's an example of copying some libraries from a\n-target machine:\n-\n-     ftp TARGET-MACHINE\n-     lcd /usr/local/TARGET/lib\n-     cd /lib\n-     get libc.a\n-     cd /usr/lib\n-     get libg.a\n-     get libm.a\n-     quit\n-\n-The precise set of libraries you'll need, and their locations on the\n-target machine, vary depending on its operating system.\n-\n-   Many targets require \"start files\" such as `crt0.o' and `crtn.o'\n-which are linked into each executable; these too should be placed in\n-`/usr/local/TARGET/lib'.  There may be several alternatives for\n-`crt0.o', for use with profiling or other compilation options.  Check\n-your target's definition of `STARTFILE_SPEC' to find out what start\n-files it uses.  Here's an example of copying these files from a target\n-machine:\n-\n-     ftp TARGET-MACHINE\n-     lcd /usr/local/TARGET/lib\n-     prompt\n-     cd /lib\n-     mget *crt*.o\n-     cd /usr/lib\n-     mget *crt*.o\n-     quit\n-\n-`libgcc.a' and Cross-Compilers\n-------------------------------\n-\n-   Code compiled by GNU CC uses certain runtime support functions\n-implicitly.  Some of these functions can be compiled successfully with\n-GNU CC itself, but a few cannot be.  These problem functions are in the\n-source file `libgcc1.c'; the library made from them is called\n-`libgcc1.a'.\n-\n-   When you build a native compiler, these functions are compiled with\n-some other compiler-the one that you use for bootstrapping GNU CC.\n-Presumably it knows how to open code these operations, or else knows how\n-to call the run-time emulation facilities that the machine comes with.\n-But this approach doesn't work for building a cross-compiler.  The\n-compiler that you use for building knows about the host system, not the\n-target system.\n-\n-   So, when you build a cross-compiler you have to supply a suitable\n-library `libgcc1.a' that does the job it is expected to do.\n-\n-   To compile `libgcc1.c' with the cross-compiler itself does not work.\n-The functions in this file are supposed to implement arithmetic\n-operations that GNU CC does not know how to open code for your target\n-machine.  If these functions are compiled with GNU CC itself, they will\n-compile into infinite recursion.\n-\n-   On any given target, most of these functions are not needed.  If GNU\n-CC can open code an arithmetic operation, it will not call these\n-functions to perform the operation.  It is possible that on your target\n-machine, none of these functions is needed.  If so, you can supply an\n-empty library as `libgcc1.a'.\n-\n-   Many targets need library support only for multiplication and\n-division.  If you are linking with a library that contains functions for\n-multiplication and division, you can tell GNU CC to call them directly\n-by defining the macros `MULSI3_LIBCALL', and the like.  These macros\n-need to be defined in the target description macro file.  For some\n-targets, they are defined already.  This may be sufficient to avoid the\n-need for libgcc1.a; if so, you can supply an empty library.\n-\n-   Some targets do not have floating point instructions; they need other\n-functions in `libgcc1.a', which do floating arithmetic.  Recent\n-versions of GNU CC have a file which emulates floating point.  With a\n-certain amount of work, you should be able to construct a floating\n-point emulator that can be used as `libgcc1.a'.  Perhaps future\n-versions will contain code to do this automatically and conveniently.\n-That depends on whether someone wants to implement it.\n-\n-   Some embedded targets come with all the necessary `libgcc1.a'\n-routines written in C or assembler.  These targets build `libgcc1.a'\n-automatically and you do not need to do anything special for them.\n-Other embedded targets do not need any `libgcc1.a' routines since all\n-the necessary operations are supported by the hardware.\n-\n-   If your target system has another C compiler, you can configure GNU\n-CC as a native compiler on that machine, build just `libgcc1.a' with\n-`make libgcc1.a' on that machine, and use the resulting file with the\n-cross-compiler.  To do this, execute the following on the target\n-machine:\n-\n-     cd TARGET-BUILD-DIR\n-     ./configure --host=sparc --target=sun3\n-     make libgcc1.a\n-\n-And then this on the host machine:\n-\n-     ftp TARGET-MACHINE\n-     binary\n-     cd TARGET-BUILD-DIR\n-     get libgcc1.a\n-     quit\n-\n-   Another way to provide the functions you need in `libgcc1.a' is to\n-define the appropriate `perform_...' macros for those functions.  If\n-these definitions do not use the C arithmetic operators that they are\n-meant to implement, you should be able to compile them with the\n-cross-compiler you are building.  (If these definitions already exist\n-for your target file, then you are all set.)\n-\n-   To build `libgcc1.a' using the perform macros, use\n-`LIBGCC1=libgcc1.a OLDCC=./xgcc' when building the compiler.\n-Otherwise, you should place your replacement library under the name\n-`libgcc1.a' in the directory in which you will build the\n-cross-compiler, before you run `make'.\n-\n-Cross-Compilers and Header Files\n---------------------------------\n-\n-   If you are cross-compiling a standalone program or a program for an\n-embedded system, then you may not need any header files except the few\n-that are part of GNU CC (and those of your program).  However, if you\n-intend to link your program with a standard C library such as `libc.a',\n-then you probably need to compile with the header files that go with\n-the library you use.\n-\n-   The GNU C compiler does not come with these files, because (1) they\n-are system-specific, and (2) they belong in a C library, not in a\n-compiler.\n-\n-   If the GNU C library supports your target machine, then you can get\n-the header files from there (assuming you actually use the GNU library\n-when you link your program).\n-\n-   If your target machine comes with a C compiler, it probably comes\n-with suitable header files also.  If you make these files accessible\n-from the host machine, the cross-compiler can use them also.\n-\n-   Otherwise, you're on your own in finding header files to use when\n-cross-compiling.\n-\n-   When you have found suitable header files, put them in the directory\n-`/usr/local/TARGET/include', before building the cross compiler.  Then\n-installation will run fixincludes properly and install the corrected\n-versions of the header files where the compiler will use them.\n-\n-   Provide the header files before you build the cross-compiler, because\n-the build stage actually runs the cross-compiler to produce parts of\n-`libgcc.a'.  (These are the parts that *can* be compiled with GNU CC.)\n-Some of them need suitable header files.\n-\n-   Here's an example showing how to copy the header files from a target\n-machine.  On the target machine, do this:\n-\n-     (cd /usr/include; tar cf - .) > tarfile\n-\n-   Then, on the host machine, do this:\n-\n-     ftp TARGET-MACHINE\n-     lcd /usr/local/TARGET/include\n-     get tarfile\n-     quit\n-     tar xf tarfile\n-\n-Actually Building the Cross-Compiler\n-------------------------------------\n-\n-   Now you can proceed just as for compiling a single-machine compiler\n-through the step of building stage 1.  If you have not provided some\n-sort of `libgcc1.a', then compilation will give up at the point where\n-it needs that file, printing a suitable error message.  If you do\n-provide `libgcc1.a', then building the compiler will automatically\n-compile and link a test program called `libgcc1-test'; if you get\n-errors in the linking, it means that not all of the necessary routines\n-in `libgcc1.a' are available.\n-\n-   You must provide the header file `float.h'.  One way to do this is\n-to compile `enquire' and run it on your target machine.  The job of\n-`enquire' is to run on the target machine and figure out by experiment\n-the nature of its floating point representation.  `enquire' records its\n-findings in the header file `float.h'.  If you can't produce this file\n-by running `enquire' on the target machine, then you will need to come\n-up with a suitable `float.h' in some other way (or else, avoid using it\n-in your programs).\n-\n-   Do not try to build stage 2 for a cross-compiler.  It doesn't work to\n-rebuild GNU CC as a cross-compiler using the cross-compiler, because\n-that would produce a program that runs on the target machine, not on the\n-host.  For example, if you compile a 386-to-68030 cross-compiler with\n-itself, the result will not be right either for the 386 (because it was\n-compiled into 68030 code) or for the 68030 (because it was configured\n-for a 386 as the host).  If you want to compile GNU CC into 68030 code,\n-whether you compile it on a 68030 or with a cross-compiler on a 386, you\n-must specify a 68030 as the host when you configure it.\n-\n-   To install the cross-compiler, use `make install', as usual.\n-\n-Installing GNU CC on the Sun\n-============================\n-\n-   On Solaris, do not use the linker or other tools in `/usr/ucb' to\n-build GNU CC.  Use `/usr/ccs/bin'.\n-\n-   If the assembler reports `Error: misaligned data' when bootstrapping,\n-you are probably using an obsolete version of the GNU assembler.\n-Upgrade to the latest version of GNU `binutils', or use the Solaris\n-assembler.\n-\n-   Make sure the environment variable `FLOAT_OPTION' is not set when\n-you compile `libgcc.a'.  If this option were set to `f68881' when\n-`libgcc.a' is compiled, the resulting code would demand to be linked\n-with a special startup file and would not link properly without special\n-pains.\n-\n-   There is a bug in `alloca' in certain versions of the Sun library.\n-To avoid this bug, install the binaries of GNU CC that were compiled by\n-GNU CC.  They use `alloca' as a built-in function and never the one in\n-the library.\n-\n-   Some versions of the Sun compiler crash when compiling GNU CC.  The\n-problem is a segmentation fault in cpp.  This problem seems to be due to\n-the bulk of data in the environment variables.  You may be able to avoid\n-it by using the following command to compile GNU CC with Sun CC:\n-\n-     make CC=\"TERMCAP=x OBJS=x LIBFUNCS=x STAGESTUFF=x cc\"\n-\n-   SunOS 4.1.3 and 4.1.3_U1 have bugs that can cause intermittent core\n-dumps when compiling GNU CC.  A common symptom is an internal compiler\n-error which does not recur if you run it again.  To fix the problem,\n-install Sun recommended patch 100726 (for SunOS 4.1.3) or 101508 (for\n-SunOS 4.1.3_U1), or upgrade to a later SunOS release.\n-\n-Installing GNU CC on VMS\n-========================\n-\n-   The VMS version of GNU CC is distributed in a backup saveset\n-containing both source code and precompiled binaries.\n-\n-   To install the `gcc' command so you can use the compiler easily, in\n-the same manner as you use the VMS C compiler, you must install the VMS\n-CLD file for GNU CC as follows:\n-\n-  1. Define the VMS logical names `GNU_CC' and `GNU_CC_INCLUDE' to\n-     point to the directories where the GNU CC executables\n-     (`gcc-cpp.exe', `gcc-cc1.exe', etc.) and the C include files are\n-     kept respectively.  This should be done with the commands:\n-\n-          $ assign /system /translation=concealed -\n-            disk:[gcc.] gnu_cc\n-          $ assign /system /translation=concealed -\n-            disk:[gcc.include.] gnu_cc_include\n-\n-     with the appropriate disk and directory names.  These commands can\n-     be placed in your system startup file so they will be executed\n-     whenever the machine is rebooted.  You may, if you choose, do this\n-     via the `GCC_INSTALL.COM' script in the `[GCC]' directory.\n-\n-  2. Install the `GCC' command with the command line:\n-\n-          $ set command /table=sys$common:[syslib]dcltables -\n-            /output=sys$common:[syslib]dcltables gnu_cc:[000000]gcc\n-          $ install replace sys$common:[syslib]dcltables\n-\n-  3. To install the help file, do the following:\n-\n-          $ library/help sys$library:helplib.hlb gcc.hlp\n-\n-     Now you can invoke the compiler with a command like `gcc /verbose\n-     file.c', which is equivalent to the command `gcc -v -c file.c' in\n-     Unix.\n-\n-   If you wish to use GNU C++ you must first install GNU CC, and then\n-perform the following steps:\n-\n-  1. Define the VMS logical name `GNU_GXX_INCLUDE' to point to the\n-     directory where the preprocessor will search for the C++ header\n-     files.  This can be done with the command:\n-\n-          $ assign /system /translation=concealed -\n-            disk:[gcc.gxx_include.] gnu_gxx_include\n-\n-     with the appropriate disk and directory name.  If you are going to\n-     be using a C++ runtime library, this is where its install\n-     procedure will install its header files.\n-\n-  2. Obtain the file `gcc-cc1plus.exe', and place this in the same\n-     directory that `gcc-cc1.exe' is kept.\n-\n-     The GNU C++ compiler can be invoked with a command like `gcc /plus\n-     /verbose file.cc', which is equivalent to the command `g++ -v -c\n-     file.cc' in Unix.\n-\n-   We try to put corresponding binaries and sources on the VMS\n-distribution tape.  But sometimes the binaries will be from an older\n-version than the sources, because we don't always have time to update\n-them.  (Use the `/version' option to determine the version number of\n-the binaries and compare it with the source file `version.c' to tell\n-whether this is so.)  In this case, you should use the binaries you get\n-to recompile the sources.  If you must recompile, here is how:\n-\n-  1. Execute the command procedure `vmsconfig.com' to set up the files\n-     `tm.h', `config.h', `aux-output.c', and `md.', and to create files\n-     `tconfig.h' and `hconfig.h'.  This procedure also creates several\n-     linker option files used by `make-cc1.com' and a data file used by\n-     `make-l2.com'.\n-\n-          $ @vmsconfig.com\n-\n-  2. Setup the logical names and command tables as defined above.  In\n-     addition, define the VMS logical name `GNU_BISON' to point at the\n-     to the directories where the Bison executable is kept.  This\n-     should be done with the command:\n-\n-          $ assign /system /translation=concealed -\n-            disk:[bison.] gnu_bison\n-\n-     You may, if you choose, use the `INSTALL_BISON.COM' script in the\n-     `[BISON]' directory.\n-\n-  3. Install the `BISON' command with the command line:\n-\n-          $ set command /table=sys$common:[syslib]dcltables -\n-            /output=sys$common:[syslib]dcltables -\n-            gnu_bison:[000000]bison\n-          $ install replace sys$common:[syslib]dcltables\n-\n-  4. Type `@make-gcc' to recompile everything (alternatively, submit\n-     the file `make-gcc.com' to a batch queue).  If you wish to build\n-     the GNU C++ compiler as well as the GNU CC compiler, you must\n-     first edit `make-gcc.com' and follow the instructions that appear\n-     in the comments.\n-\n-  5. In order to use GCC, you need a library of functions which GCC\n-     compiled code will call to perform certain tasks, and these\n-     functions are defined in the file `libgcc2.c'.  To compile this\n-     you should use the command procedure `make-l2.com', which will\n-     generate the library `libgcc2.olb'.  `libgcc2.olb' should be built\n-     using the compiler built from the same distribution that\n-     `libgcc2.c' came from, and `make-gcc.com' will automatically do\n-     all of this for you.\n-\n-     To install the library, use the following commands:\n-\n-          $ library gnu_cc:[000000]gcclib/delete=(new,eprintf)\n-          $ library gnu_cc:[000000]gcclib/delete=L_*\n-          $ library libgcc2/extract=*/output=libgcc2.obj\n-          $ library gnu_cc:[000000]gcclib libgcc2.obj\n-\n-     The first command simply removes old modules that will be replaced\n-     with modules from `libgcc2' under different module names.  The\n-     modules `new' and `eprintf' may not actually be present in your\n-     `gcclib.olb'--if the VMS librarian complains about those modules\n-     not being present, simply ignore the message and continue on with\n-     the next command.  The second command removes the modules that\n-     came from the previous version of the library `libgcc2.c'.\n-\n-     Whenever you update the compiler on your system, you should also\n-     update the library with the above procedure.\n-\n-  6. You may wish to build GCC in such a way that no files are written\n-     to the directory where the source files reside.  An example would\n-     be the when the source files are on a read-only disk.  In these\n-     cases, execute the following DCL commands (substituting your\n-     actual path names):\n-\n-          $ assign dua0:[gcc.build_dir.]/translation=concealed, -\n-                   dua1:[gcc.source_dir.]/translation=concealed  gcc_build\n-          $ set default gcc_build:[000000]\n-\n-     where the directory `dua1:[gcc.source_dir]' contains the source\n-     code, and the directory `dua0:[gcc.build_dir]' is meant to contain\n-     all of the generated object files and executables.  Once you have\n-     done this, you can proceed building GCC as described above.  (Keep\n-     in mind that `gcc_build' is a rooted logical name, and thus the\n-     device names in each element of the search list must be an actual\n-     physical device name rather than another rooted logical name).\n-\n-  7. *If you are building GNU CC with a previous version of GNU CC, you\n-     also should check to see that you have the newest version of the\n-     assembler*.  In particular, GNU CC version 2 treats global constant\n-     variables slightly differently from GNU CC version 1, and GAS\n-     version 1.38.1 does not have the patches required to work with GCC\n-     version 2.  If you use GAS 1.38.1, then `extern const' variables\n-     will not have the read-only bit set, and the linker will generate\n-     warning messages about mismatched psect attributes for these\n-     variables.  These warning messages are merely a nuisance, and can\n-     safely be ignored.\n-\n-     If you are compiling with a version of GNU CC older than 1.33,\n-     specify `/DEFINE=(\"inline=\")' as an option in all the\n-     compilations.  This requires editing all the `gcc' commands in\n-     `make-cc1.com'.  (The older versions had problems supporting\n-     `inline'.)  Once you have a working 1.33 or newer GNU CC, you can\n-     change this file back.\n-\n-  8. If you want to build GNU CC with the VAX C compiler, you will need\n-     to make minor changes in `make-cccp.com' and `make-cc1.com' to\n-     choose alternate definitions of `CC', `CFLAGS', and `LIBS'.  See\n-     comments in those files.  However, you must also have a working\n-     version of the GNU assembler (GNU as, aka GAS) as it is used as\n-     the back-end for GNU CC to produce binary object modules and is\n-     not included in the GNU CC sources.  GAS is also needed to compile\n-     `libgcc2' in order to build `gcclib' (see above); `make-l2.com'\n-     expects to be able to find it operational in\n-     `gnu_cc:[000000]gnu-as.exe'.\n-\n-     To use GNU CC on VMS, you need the VMS driver programs `gcc.exe',\n-     `gcc.com', and `gcc.cld'.  They are distributed with the VMS\n-     binaries (`gcc-vms') rather than the GNU CC sources.  GAS is also\n-     included in `gcc-vms', as is Bison.\n-\n-     Once you have successfully built GNU CC with VAX C, you should use\n-     the resulting compiler to rebuild itself.  Before doing this, be\n-     sure to restore the `CC', `CFLAGS', and `LIBS' definitions in\n-     `make-cccp.com' and `make-cc1.com'.  The second generation\n-     compiler will be able to take advantage of many optimizations that\n-     must be suppressed when building with other compilers.\n-\n-   Under previous versions of GNU CC, the generated code would\n-occasionally give strange results when linked with the sharable\n-`VAXCRTL' library.  Now this should work.\n-\n-   Even with this version, however, GNU CC itself should not be linked\n-with the sharable `VAXCRTL'.  The version of `qsort' in `VAXCRTL' has a\n-bug (known to be present in VMS versions V4.6 through V5.5) which\n-causes the compiler to fail.\n-\n-   The executables are generated by `make-cc1.com' and `make-cccp.com'\n-use the object library version of `VAXCRTL' in order to make use of the\n-`qsort' routine in `gcclib.olb'.  If you wish to link the compiler\n-executables with the shareable image version of `VAXCRTL', you should\n-edit the file `tm.h' (created by `vmsconfig.com') to define the macro\n-`QSORT_WORKAROUND'.\n-\n-   `QSORT_WORKAROUND' is always defined when GNU CC is compiled with\n-VAX C, to avoid a problem in case `gcclib.olb' is not yet available.\n-\n-`collect2'\n-==========\n-\n-   GNU CC uses a utility called `collect2' on nearly all systems to\n-arrange to call various initialization functions at start time.\n-\n-   The program `collect2' works by linking the program once and looking\n-through the linker output file for symbols with particular names\n-indicating they are constructor functions.  If it finds any, it creates\n-a new temporary `.c' file containing a table of them, compiles it, and\n-links the program a second time including that file.\n-\n-   The actual calls to the constructors are carried out by a subroutine\n-called `__main', which is called (automatically) at the beginning of\n-the body of `main' (provided `main' was compiled with GNU CC).  Calling\n-`__main' is necessary, even when compiling C code, to allow linking C\n-and C++ object code together.  (If you use `-nostdlib', you get an\n-unresolved reference to `__main', since it's defined in the standard\n-GCC library.  Include `-lgcc' at the end of your compiler command line\n-to resolve this reference.)\n-\n-   The program `collect2' is installed as `ld' in the directory where\n-the passes of the compiler are installed.  When `collect2' needs to\n-find the *real* `ld', it tries the following file names:\n-\n-   * `real-ld' in the directories listed in the compiler's search\n-     directories.\n-\n-   * `real-ld' in the directories listed in the environment variable\n-     `PATH'.\n-\n-   * The file specified in the `REAL_LD_FILE_NAME' configuration macro,\n-     if specified.\n-\n-   * `ld' in the compiler's search directories, except that `collect2'\n-     will not execute itself recursively.\n-\n-   * `ld' in `PATH'.\n-\n-   \"The compiler's search directories\" means all the directories where\n-`gcc' searches for passes of the compiler.  This includes directories\n-that you specify with `-B'.\n-\n-   Cross-compilers search a little differently:\n-\n-   * `real-ld' in the compiler's search directories.\n-\n-   * `TARGET-real-ld' in `PATH'.\n-\n-   * The file specified in the `REAL_LD_FILE_NAME' configuration macro,\n-     if specified.\n-\n-   * `ld' in the compiler's search directories.\n-\n-   * `TARGET-ld' in `PATH'.\n-\n-   `collect2' explicitly avoids running `ld' using the file name under\n-which `collect2' itself was invoked.  In fact, it remembers up a list\n-of such names--in case one copy of `collect2' finds another copy (or\n-version) of `collect2' installed as `ld' in a second place in the\n-search path.\n-\n-   `collect2' searches for the utilities `nm' and `strip' using the\n-same algorithm as above for `ld'.\n-\n-Standard Header File Directories\n-================================\n-\n-   `GCC_INCLUDE_DIR' means the same thing for native and cross.  It is\n-where GNU CC stores its private include files, and also where GNU CC\n-stores the fixed include files.  A cross compiled GNU CC runs\n-`fixincludes' on the header files in `$(tooldir)/include'.  (If the\n-cross compilation header files need to be fixed, they must be installed\n-before GNU CC is built.  If the cross compilation header files are\n-already suitable for ANSI C and GNU CC, nothing special need be done).\n-\n-   `GPLUSPLUS_INCLUDE_DIR' means the same thing for native and cross.\n-It is where `g++' looks first for header files.  The C++ library\n-installs only target independent header files in that directory.\n-\n-   `LOCAL_INCLUDE_DIR' is used only for a native compiler.  It is\n-normally `/usr/local/include'.  GNU CC searches this directory so that\n-users can install header files in `/usr/local/include'.\n-\n-   `CROSS_INCLUDE_DIR' is used only for a cross compiler.  GNU CC\n-doesn't install anything there.\n-\n-   `TOOL_INCLUDE_DIR' is used for both native and cross compilers.  It\n-is the place for other packages to install header files that GNU CC will\n-use.  For a cross-compiler, this is the equivalent of `/usr/include'.\n-When you build a cross-compiler, `fixincludes' processes any header\n-files in this directory.\n-"}, {"sha": "2fefb3f14446e5ae2cdae7f32f2249febd14ff10", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 115, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=436a88a6d45effd37cfe91200dc3d954a6c16a21", "patch": "@@ -49,7 +49,7 @@ LANGUAGES = c gcov$(exeext) $(CONFIG_LANGUAGES)\n # Languages should create dependencies of $(INTL_TARGETS) on generated\n # sources in Make-lang.in.  Example:\n # $(INTL_TARGETS): $(srcdir)/cp/parse.c\n-INTL_TARGETS = intl.all intl.install intl.distdir\n+INTL_TARGETS = intl.all intl.install\n \n # Selection of languages to be made during stage1 build.\n # This is overridden by configure.\n@@ -700,7 +700,6 @@ ORDINARY_FLAGS_TO_PASS = \\\n \t\"bindir=$(bindir)\" \\\n \t\"libsubdir=$(libsubdir)\" \\\n \t\"datadir=$(datadir)\" \\\n-\t\"distdir=../tmp/\\$$(subdir)\" \\\n \t\"localedir=$(localedir)\"\n FLAGS_TO_PASS = $(ORDINARY_FLAGS_TO_PASS) \"CC=@cc_set_by_configure@\"\n PREPEND_DOTDOT_TO_RELATIVE_PATHS = sed \\\n@@ -831,7 +830,7 @@ C_TREE_H = c-tree.h $(C_COMMON_H)\n # all.build, all.cross, start.encap, rest.encap,\n # info, dvi,\n # install-normal, install-common, install-info, install-man,\n-# uninstall, distdir,\n+# uninstall,\n # mostlyclean, clean, distclean, extraclean, maintainer-clean,\n # stage1, stage2, stage3, stage4\n #\n@@ -893,7 +892,7 @@ cstamp-h: config.in config.status\n # config.status does not exist before failing.\n config.status: $(srcdir)/configure version.c\n \t@if [ ! -f config.status ] ; then \\\n-\t  echo You must configure gcc.  Look at the INSTALL file for details.; \\\n+\t  echo You must configure gcc.  Look at http://gcc.gnu.org/install/ for details.; \\\n \t  false; \\\n \telse \\\n \t  LANGUAGES=\"$(CONFIG_LANGUAGES)\" $(SHELL) config.status --recheck; \\\n@@ -1815,7 +1814,7 @@ $(top_builddir)/intl/libintl.a: intl.all\n # Make sure all the headers are there for xgettext to scan.\n $(INTL_TARGETS): $(srcdir)/c-parse.c\n \n-intl.all intl.install intl.uninstall intl.distdir \\\n+intl.all intl.install intl.uninstall \\\n   intl.mostlyclean intl.clean intl.distclean intl.maintainer-clean:\n \t@for d in $(INTL_SUBDIRS); do \\\n \t  target=`expr $@ : 'intl.\\(.*\\)'` && \\\n@@ -1824,12 +1823,6 @@ intl.all intl.install intl.uninstall intl.distdir \\\n \t  if [ $$? -eq 0 ] ; then true ; else exit 1 ; fi ; \\\n \tdone\n \n-# intl.distdir doesn't copy the intl makefiles (since they aren't distributed),\n-# but we need them for the `make extraclean' in distdir-finish.\n-intl.distdir-fixup:\n-\tfor d in $(INTL_SUBDIRS); do \\\n-\t  ln $$d/Makefile tmp/$$d || cp $$d/Makefile tmp/$$d || exit; \\\n-\tdone\n #\f\n # Remake cpp and protoize.\n \n@@ -2161,10 +2154,6 @@ cpp.dvi: $(srcdir)/cpp.texi\n \ttexindex cpp.??\n \tTEXINPUTS=${texidir}:$(srcdir):$$TEXINPUTS tex cpp.texi\n \n-\n-INSTALL: $(srcdir)/install1.texi $(srcdir)/install.texi\n-\t(cd $(srcdir) && $(MAKEINFO) -D INSTALLONLY \\\n-\t\t--no-split --no-headers -o INSTALL install1.texi)\n #\f\n # Deletion of files made during compilation.\n # There are four levels of this:\n@@ -2720,106 +2709,6 @@ TAGS: force\n \tmv tmp-tags/* .;\t\t\t\t\t\t\\\n \trmdir tmp-tags)\n \n-# Create the distribution tar.gz file.\n-dist: tmp-gcc.xtar\n-\tgzip --best < tmp-gcc.xtar > tmp-gcc.xtar.gz\n-\tmv tmp-gcc.xtar.gz gcc-$(version).tar.gz\n-\n-tmp-gcc.xtar: distdir\n-# Make the distribution.\n-\ttar -chf tmp-gcc.xtar gcc-$(version)\n-\n-distdir-cvs: force\n-\tif [ -d $(srcdir)/CVS ]; then (cd $(srcdir) && cvs -r update); fi\n-\n-# This target exists to do the initial work before the language specific\n-# stuff gets done.\n-distdir-start: doc $(srcdir)/INSTALL $(srcdir)/c-parse.y \\\n-  $(srcdir)/c-parse.c $(srcdir)/config.in $(srcdir)/version.c TAGS\n-\t@case '$(USE_NLS)' in \\\n-\tyes) ;; \\\n-\t*) echo \"configure with --enable-nls before making a distribution\"; \\\n-\t   exit 1;; \\\n-\tesac\n-\t@if grep -s \"for version ${mainversion}\" gcc.texi > /dev/null; \\\n-\tthen true; \\\n-\telse echo \"You must update the version number in \\`gcc.texi'\"; sleep 10;\\\n-\tfi\n-# Update the version number in README\n-\t$(AWK) '$$1 \" \" $$2 \" \" $$3 == \"This directory contains\" \\\n-\t\t{ $$6 = version; print $$0 } \\\n-\t     $$1 \" \" $$2 \" \" $$3 != \"This directory contains\"' \\\n-\t  version=$(version) $(srcdir)/README > tmp.README\n-\tmv tmp.README README\n-\t-rm -rf gcc-$(version) tmp\n-# Put all the files in a temporary subdirectory\n-# which has the name that we want to have in the tar file.\n-\tmkdir tmp\n-\tmkdir tmp/config\n-\tmkdir tmp/ginclude\n-\tmkdir tmp/objc\n-\tmkdir tmp/intl\n-\tmkdir tmp/po\n-\tfor file in `(cd $(srcdir) && echo *[0-9a-zA-Z+])`; do \\\n-\t  test -f $(srcdir)/$$file && $(LN_S) $(srcdir)/$$file tmp; \\\n-\tdone\n-\tif test \"$(srcdir)\" != \".\" ; then \\\n-\t  for file in c-parse.c ; do \\\n-\t    test -f ./$$file && $(LN_S) ../$$file tmp; \\\n-\t  done; \\\n-\tfi\n-\tfor file in `(cd $(srcdir)/config && echo *[0-9a-zA-Z+])`; do \\\n-\t  if test -d $(srcdir)/config/$$file \\\n-\t      && test \"$$file\" != RCS && test \"$$file\" != CVS; then \\\n-\t    mkdir tmp/config/$$file; \\\n-\t    for subfile in `(cd $(srcdir)/config/$$file && echo *[0-9a-zA-Z+])`; do \\\n-\t      $(LN_S) $(srcdir)/config/$$file/$$subfile tmp/config/$$file; \\\n-\t    done; \\\n-\t  else \\\n-\t    $(LN_S) $(srcdir)/config/$$file tmp/config; \\\n-\t  fi; \\\n-\tdone\n-\tfor file in `(cd $(srcdir)/ginclude && echo *[0-9a-zA-Z+])`; do \\\n-\t  $(LN_S) $(srcdir)/ginclude/$$file tmp/ginclude; \\\n-\tdone\n-\tfor file in `(cd $(srcdir)/objc && echo *[0-9a-zA-Z+])`; do \\\n-\t  $(LN_S) $(srcdir)/objc/$$file tmp/objc; \\\n-\tdone\n-\t$(LN_S) .gdbinit tmp\n-\n-# Finish making `distdir', after the languages have done their thing.\n-distdir-finish:\n-\tmv tmp gcc-$(version)\n-# Get rid of everything we don't want in the distribution.  We'd want\n-# this to use Makefile.in, but it doesn't have the `lang.foo' targets\n-# expanded.\n-\t(cd gcc-$(version) && make extraclean distdir-check VERSION_DEP=)\n-\n-distdir-check:\n-\t($(AWK) '/^[^#]/{print} /^#[A-Za-z]/{print substr($$1, 2)}' | sort) \\\n-\t  < po/POTFILES.in > tmp.POTFILES\n-\tls [A-Za-z]*.[ch] [a-z]*/[A-Za-z]*.[ch] \\\n-\t  [a-z]*/[a-z]*/[A-Za-z]*.[ch] | sort > tmp.src\n-\tdiff tmp.POTFILES tmp.src || { \\\n-\t  echo \"po/POTFILES.in and sources do not match -- please fix\"; \\\n-\t  exit 1; \\\n-\t}\n-\trm -f tmp.*\n-\n-distdir: distdir-cvs distdir-start intl.distdir intl.distdir-fixup \\\n-  lang.distdir distdir-finish\n-\n-# make diff oldversion=M.N\n-# creates a diff file between an older distribution and this one.\n-# The -P option assumes this is GNU diff.\n-diff:\n-\tdiff -rc2P -x c-parse.y -x c-parse.c \\\n-\t   -x TAGS -x INSTALL -x configure -x config.in \\\n-\t  -x \"gcc.??\" -x \"gcc.??s\" -x gcc.aux -x \"gcc.info*\" \\\n-\t  -x \"cpp.??\" -x \"cpp.??s\" -x cpp.aux -x \"cpp.info*\" \\\n-\t  $(LANG_DIFF_EXCLUDES) \\\n-\t  gcc-$(oldversion) gcc-$(version) > gcc-$(oldversion)-$(version).diff\n-\n # A list of files to be destroyed during \"lean\" builds.\n VOL_FILES=`echo $(BACKEND) $(OBJS) $(C_OBJS) $(LIBCPP_OBJS) *.c *.h gen*`\n "}, {"sha": "fb5d21b01276c2d20e1a1e4916fdb69abe6be091", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=436a88a6d45effd37cfe91200dc3d954a6c16a21", "patch": "@@ -1,3 +1,7 @@\n+2000-11-05  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* Make-lang.in (CHILL.distdir): Remove.\n+\n 2000-11-02  Geoffrey Keating  <geoffk@cygnus.com>\n \n \t* Make-lang.in: Remove 'CYGNUS LOCAL' markers."}, {"sha": "3eb22bed8329427fd3b6b312e3281f16c33f7007", "filename": "gcc/ch/Make-lang.in", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fch%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fch%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FMake-lang.in?ref=436a88a6d45effd37cfe91200dc3d954a6c16a21", "patch": "@@ -24,7 +24,7 @@\n # foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,\n # foo.info, foo.dvi,\n # foo.install-normal, foo.install-common, foo.install-info, foo.install-man,\n-# foo.uninstall, foo.distdir,\n+# foo.uninstall,\n # foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,\n # foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4\n #\n@@ -184,15 +184,3 @@ CHILL.stage3: stage3-start\n \t-mv ch/*.o stage3/ch\n CHILL.stage4: stage4-start\n \t-mv ch/*.o stage4/ch\n-#\f\n-# Maintenance hooks:\n-\n-# This target creates the files that can be rebuilt, but go in the\n-# distribution anyway.  It then copies the files to the distdir directory.\n-CHILL.distdir:\n-\tmkdir tmp/ch\n-\tcd ch ; $(MAKE) $(LANG_FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) hash.h\n-\tcd ch; \\\n-\tfor file in *[0-9a-zA-Z+]; do \\\n-\t  ln $$file ../tmp/ch >/dev/null 2>&1 || cp $$file ../tmp/ch; \\\n-\tdone"}, {"sha": "ba4d81efaff8a5a42d6aec5350254f27c289f530", "filename": "gcc/configure", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=436a88a6d45effd37cfe91200dc3d954a6c16a21", "patch": "@@ -1553,7 +1553,7 @@ for ac_kw in inline __inline__ __inline; do\n #include \"confdefs.h\"\n \n int main() {\n-} int $ac_kw foo() {\n+} $ac_kw foo() {\n ; return 0; }\n EOF\n if { (eval echo configure:1560: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n@@ -7264,7 +7264,7 @@ else\n int main() {\n \n /* Ultrix mips cc rejects this.  */\n-typedef int charset[2]; const charset x = {0,0};\n+typedef int charset[2]; const charset x;\n /* SunOS 4.1.1 cc rejects this.  */\n char const *const *ccp;\n char **p;\n@@ -7405,7 +7405,7 @@ else\n #include \"confdefs.h\"\n #include <alloca.h>\n int main() {\n-void *p = alloca(2 * sizeof(int));\n+char *p = alloca(2 * sizeof(int));\n ; return 0; }\n EOF\n if { (eval echo configure:7412: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n@@ -9652,7 +9652,7 @@ touch Make-hooks\n target_list=\"all.build all.cross start.encap rest.encap \\\n \tinfo dvi \\\n \tinstall-normal install-common install-info install-man \\\n-\tuninstall distdir \\\n+\tuninstall \\\n \tmostlyclean clean distclean extraclean maintainer-clean \\\n \tstage1 stage2 stage3 stage4\"\n for t in $target_list"}, {"sha": "def5675743f5436d5aeb0f66a0f0a8cd8909cd32", "filename": "gcc/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=436a88a6d45effd37cfe91200dc3d954a6c16a21", "patch": "@@ -5033,7 +5033,7 @@ touch Make-hooks\n target_list=\"all.build all.cross start.encap rest.encap \\\n \tinfo dvi \\\n \tinstall-normal install-common install-info install-man \\\n-\tuninstall distdir \\\n+\tuninstall \\\n \tmostlyclean clean distclean extraclean maintainer-clean \\\n \tstage1 stage2 stage3 stage4\"\n for t in $target_list"}, {"sha": "b79e31056d589472b00d21361f9b765039b1d14c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=436a88a6d45effd37cfe91200dc3d954a6c16a21", "patch": "@@ -1,3 +1,7 @@\n+2000-11-05  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* Make-lang.in (c++.distdir): Remove.\n+\n 2000-11-04  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl2.c (do_nonmember_using_decl): Allow `extern \"C\"'"}, {"sha": "2099c3a7d67e12dd27d2fb1b390849b29448deaa", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=436a88a6d45effd37cfe91200dc3d954a6c16a21", "patch": "@@ -25,7 +25,7 @@\n # foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,\n # foo.info, foo.dvi,\n # foo.install-normal, foo.install-common, foo.install-info, foo.install-man,\n-# foo.uninstall, foo.distdir,\n+# foo.uninstall,\n # foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,\n # foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4\n #\n@@ -225,24 +225,6 @@ c++.stage3: stage3-start\n \t-mv cp/*$(objext) stage3/cp\n c++.stage4: stage4-start\n \t-mv cp/*$(objext) stage4/cp\n-#\f\n-# Maintenance hooks:\n-\n-# This target creates the files that can be rebuilt, but go in the\n-# distribution anyway.  It then copies the files to the distdir directory.\n-c++.distdir:\n-\tmkdir tmp/cp\n-\tmkdir tmp/cp/inc\n-\tcd cp ; $(MAKE) $(LANG_FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) parse.c hash.h\n-\tcd cp; \\\n-\tfor file in *[0-9a-zA-Z+]; do \\\n-\t  $(LN) $$file ../tmp/cp; \\\n-\tdone\n-\tcd cp/inc; \\\n-\tfor file in *[0-9a-zA-Z+]; do \\\n-\t  ln $$file ../../tmp/cp/inc >/dev/null 2>&1 \\\n-\t   || cp $$file ../../tmp/cp/inc; \\\n-\tdone\n \n #\f\n # .o: .h dependencies."}, {"sha": "4c751d7b1a307ec0d31e230b0903ade18d8752fa", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=436a88a6d45effd37cfe91200dc3d954a6c16a21", "patch": "@@ -1,3 +1,8 @@\n+2000-11-05  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* Make-lang.in: Remove f77.distdir and f/INSTALL.\n+\t* INSTALL, install0.texi: Remove.\n+\n 2000-11-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* com.c (open_include_file, ffecom_open_include_): Use strchr ()"}, {"sha": "91858800958dd0369b96773326bac1a6d2158104", "filename": "gcc/f/INSTALL", "status": "removed", "additions": 0, "deletions": 352, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d31a703fd5e4b2f3e45287b12a6a8002e3aee8/gcc%2Ff%2FINSTALL", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d31a703fd5e4b2f3e45287b12a6a8002e3aee8/gcc%2Ff%2FINSTALL", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FINSTALL?ref=28d31a703fd5e4b2f3e45287b12a6a8002e3aee8", "patch": "@@ -1,352 +0,0 @@\n-*Note:* This file is automatically generated from the files\n-`install0.texi' and `g77install.texi'.  `INSTALL' is *not* a source\n-file, although it is normally included within source distributions.\n-\n-   This file contains installation information for the GNU Fortran\n-compiler.  Copyright (C) {No Value For \"copyrights-install\"} Free\n-Software Foundation, Inc.  You may copy, distribute, and modify it\n-freely as long as you preserve this copyright notice and permission\n-notice.\n-\n-Installing GNU Fortran\n-**********************\n-\n-   The following information describes how to install `g77'.\n-\n-   Note that, for users of the GCC-2.95 version of `g77', much of the\n-information is obsolete, and is superceded by the GCC installation\n-procedures.  Such information is accordingly omitted and flagged as\n-such.\n-\n-   *Warning:* The information below is still under development, and\n-might not accurately reflect the `g77' code base of which it is a part.\n-Efforts are made to keep it somewhat up-to-date, but they are\n-particularly concentrated on any version of this information that is\n-distributed as part of a *released* `g77'.\n-\n-   In particular, while this information is intended to apply to the\n-GCC-2.95 version of `g77', only an official *release* of that version\n-is expected to contain documentation that is most consistent with the\n-`g77' product in that version.\n-\n-   The following information was last updated on 1999-07-17:\n-\n-Prerequisites\n-=============\n-\n-   For users of the GCC-2.95 version of `g77', this information is\n-superceded by the GCC installation instructions.\n-\n-Problems Installing\n-===================\n-\n-   This is a list of problems (and some apparent problems which don't\n-really mean anything is wrong) that show up when configuring, building,\n-installing, or porting GNU Fortran.\n-\n-   *Note Installation Problems: (gcc)Installation Problems, for more\n-information on installation problems that can afflict either `gcc' or\n-`g77'.\n-\n-General Problems\n-----------------\n-\n-   These problems can occur on most or all systems.\n-\n-GNU C Required\n-..............\n-\n-   Compiling `g77' requires GNU C, not just ANSI C.  Fixing this\n-wouldn't be very hard (just tedious), but the code using GNU extensions\n-to the C language is expected to be rewritten for 0.6 anyway, so there\n-are no plans for an interim fix.\n-\n-   This requirement does not mean you must already have `gcc' installed\n-to build `g77'.  As long as you have a working C compiler, you can use a\n-\"bootstrap\" build to automate the process of first building `gcc' using\n-the working C compiler you have, then building `g77' and rebuilding\n-`gcc' using that just-built `gcc', and so on.\n-\n-Patching GNU CC\n-...............\n-\n-   `g77' no longer requires application of a patch file to the `gcc'\n-compiler tree.  In fact, no such patch file is distributed with `g77'.\n-This is as of version 0.5.23 and `egcs' version 1.0.\n-\n-Building GNU CC Necessary\n-.........................\n-\n-   It should be possible to build the runtime without building `cc1'\n-and other non-Fortran items, but, for now, an easy way to do that is\n-not yet established.\n-\n-Missing strtoul or bsearch\n-..........................\n-\n-   This information does not apply to the GCC-2.95 version of `g77',\n-\n-Cleanup Kills Stage Directories\n-...............................\n-\n-   It'd be helpful if `g77''s `Makefile.in' or `Make-lang.in' would\n-create the various `stageN' directories and their subdirectories, so\n-developers and expert installers wouldn't have to reconfigure after\n-cleaning up.\n-\n-   That help has arrived as of version 0.5.23 of `g77' and version 1.1\n-of `egcs'.  Configuration itself no longer creates any particular\n-directories that are unique to `g77'.  The build procedures in\n-`Make-lang.in' take care of that, on demand.\n-\n-LANGUAGES Macro Ignored\n-.......................\n-\n-   Prior to version 0.5.23 of `g77' and version 1.1 of `egcs', `g77'\n-would sometimes ignore the absence of `f77' and `F77' in the\n-`LANGUAGES' macro definition used for the `make' command being\n-processed.\n-\n-   As of `g77' version 0.5.23 and `egcs' version 1.1, `g77' now obeys\n-this macro in all relevant situations.\n-\n-   However, in versions of `gcc' through 2.8.1, non-`g77' portions of\n-`gcc', such as `g++', are known to go ahead and perform various\n-language-specific activities when their respective language strings do\n-not appear in the `LANGUAGES' macro in effect during that invocation of\n-`make'.\n-\n-   It is expected that these remaining problems will be fixed in a\n-future version of `gcc'.\n-\n-System-specific Problems\n-------------------------\n-\n-   A linker bug on some versions of AIX 4.1 might prevent building when\n-`g77' is built within `gcc'.  It might also occur when building within\n-`egcs'.\n-\n-Cross-compiler Problems\n------------------------\n-\n-   `g77' has been in alpha testing since September of 1992, and in\n-public beta testing since February of 1995.  Alpha testing was done by\n-a small number of people worldwide on a fairly wide variety of\n-machines, involving self-compilation in most or all cases.  Beta\n-testing has been done primarily via self-compilation, but in more and\n-more cases, cross-compilation (and \"criss-cross compilation\", where a\n-version of a compiler is built on one machine to run on a second and\n-generate code that runs on a third) has been tried and has succeeded,\n-to varying extents.\n-\n-   Generally, `g77' can be ported to any configuration to which `gcc',\n-`f2c', and `libf2c' can be ported and made to work together, aside from\n-the known problems described in this manual.  If you want to port `g77'\n-to a particular configuration, you should first make sure `gcc' and\n-`libf2c' can be ported to that configuration before focusing on `g77',\n-because `g77' is so dependent on them.\n-\n-   Even for cases where `gcc' and `libf2c' work, you might run into\n-problems with cross-compilation on certain machines, for several\n-reasons.\n-\n-   * There is one known bug (a design bug to be fixed in 0.6) that\n-     prevents configuration of `g77' as a cross-compiler in some cases,\n-     though there are assumptions made during configuration that\n-     probably make doing non-self-hosting builds a hassle, requiring\n-     manual intervention.\n-\n-   * `gcc' might still have some trouble being configured for certain\n-     combinations of machines.  For example, it might not know how to\n-     handle floating-point constants.\n-\n-   * Improvements to the way `libg2c' is built could make building\n-     `g77' as a cross-compiler easier--for example, passing and using\n-     `$(LD)' and `$(AR)' in the appropriate ways.  (This is improved in\n-     the `egcs' version of `g77', especially as of version 1.1.)\n-\n-   * There are still some challenges putting together the right\n-     run-time libraries (needed by `libg2c') for a target system,\n-     depending on the systems involved in the configuration.  (This is\n-     a general problem with cross-compilation, and with `gcc' in\n-     particular.)\n-\n-Changing Settings Before Building\n-=================================\n-\n-   Here are some internal `g77' settings that can be changed by editing\n-source files in `egcs/gcc/f/' before building.\n-\n-   This information, and perhaps even these settings, represent\n-stop-gap solutions to problems people doing various ports of `g77' have\n-encountered.  As such, none of the following information is expected to\n-be pertinent in future versions of `g77'.\n-\n-Larger File Unit Numbers\n-------------------------\n-\n-   As distributed, whether as part of `f2c' or `g77', `libf2c' accepts\n-file unit numbers only in the range 0 through 99.  For example, a\n-statement such as `WRITE (UNIT=100)' causes a run-time crash in\n-`libf2c', because the unit number, 100, is out of range.\n-\n-   If you know that Fortran programs at your installation require the\n-use of unit numbers higher than 99, you can change the value of the\n-`MXUNIT' macro, which represents the maximum unit number, to an\n-appropriately higher value.\n-\n-   To do this, edit the file `egcs/libf2c/libI77/fio.h' in your `g77'\n-source tree, changing the following line:\n-\n-     #define MXUNIT 100\n-\n-   Change the line so that the value of `MXUNIT' is defined to be at\n-least one *greater* than the maximum unit number used by the Fortran\n-programs on your system.\n-\n-   (For example, a program that does `WRITE (UNIT=255)' would require\n-`MXUNIT' set to at least 256 to avoid crashing.)\n-\n-   Then build or rebuild `g77' as appropriate.\n-\n-   *Note:* Changing this macro has *no* effect on other limits your\n-system might place on the number of files open at the same time.  That\n-is, the macro might allow a program to do `WRITE (UNIT=100)', but the\n-library and operating system underlying `libf2c' might disallow it if\n-many other files have already been opened (via `OPEN' or implicitly via\n-`READ', `WRITE', and so on).  Information on how to increase these\n-other limits should be found in your system's documentation.\n-\n-Always Flush Output\n--------------------\n-\n-   Some Fortran programs require output (writes) to be flushed to the\n-operating system (under UNIX, via the `fflush()' library call) so that\n-errors, such as disk full, are immediately flagged via the relevant\n-`ERR=' and `IOSTAT=' mechanism, instead of such errors being flagged\n-later as subsequent writes occur, forcing the previously written data\n-to disk, or when the file is closed.\n-\n-   Essentially, the difference can be viewed as synchronous error\n-reporting (immediate flagging of errors during writes) versus\n-asynchronous, or, more precisely, buffered error reporting (detection\n-of errors might be delayed).\n-\n-   `libg2c' supports flagging write errors immediately when it is built\n-with the `ALWAYS_FLUSH' macro defined.  This results in a `libg2c' that\n-runs slower, sometimes quite a bit slower, under certain\n-circumstances--for example, accessing files via the networked file\n-system NFS--but the effect can be more reliable, robust file I/O.\n-\n-   If you know that Fortran programs requiring this level of precision\n-of error reporting are to be compiled using the version of `g77' you\n-are building, you might wish to modify the `g77' source tree so that\n-the version of `libg2c' is built with the `ALWAYS_FLUSH' macro defined,\n-enabling this behavior.\n-\n-   To do this, find this line in `egcs/libf2c/f2c.h' in your `g77'\n-source tree:\n-\n-     /* #define ALWAYS_FLUSH */\n-\n-   Remove the leading `/* ', so the line begins with `#define', and the\n-trailing ` */'.\n-\n-   Then build or rebuild `g77' as appropriate.\n-\n-Maximum Stackable Size\n-----------------------\n-\n-   `g77', on most machines, puts many variables and arrays on the stack\n-where possible, and can be configured (by changing\n-`FFECOM_sizeMAXSTACKITEM' in `egcs/gcc/f/com.c') to force smaller-sized\n-entities into static storage (saving on stack space) or permit\n-larger-sized entities to be put on the stack (which can improve\n-run-time performance, as it presents more opportunities for the GBE to\n-optimize the generated code).\n-\n-   *Note:* Putting more variables and arrays on the stack might cause\n-problems due to system-dependent limits on stack size.  Also, the value\n-of `FFECOM_sizeMAXSTACKITEM' has no effect on automatic variables and\n-arrays.  *Note But-bugs::, for more information.\n-\n-Floating-point Bit Patterns\n----------------------------\n-\n-   The `g77' build will crash if an attempt is made to build it as a\n-cross-compiler for a target when `g77' cannot reliably determine the\n-bit pattern of floating-point constants for the target.  Planned\n-improvements for version 0.6 of `g77' will give it the capabilities it\n-needs to not have to crash the build but rather generate correct code\n-for the target.  (Currently, `g77' would generate bad code under such\n-circumstances if it didn't crash during the build, e.g. when compiling\n-a source file that does something like `EQUIVALENCE (I,R)' and `DATA\n-R/9.43578/'.)\n-\n-Initialization of Large Aggregate Areas\n----------------------------------------\n-\n-   A warning message is issued when `g77' sees code that provides\n-initial values (e.g. via `DATA') to an aggregate area (`COMMON' or\n-`EQUIVALENCE', or even a large enough array or `CHARACTER' variable)\n-that is large enough to increase `g77''s compile time by roughly a\n-factor of 10.\n-\n-   This size currently is quite small, since `g77' currently has a\n-known bug requiring too much memory and time to handle such cases.  In\n-`egcs/gcc/f/data.c', the macro `FFEDATA_sizeTOO_BIG_INIT_' is defined\n-to the minimum size for the warning to appear.  The size is specified\n-in storage units, which can be bytes, words, or whatever, on a\n-case-by-case basis.\n-\n-   After changing this macro definition, you must (of course) rebuild\n-and reinstall `g77' for the change to take effect.\n-\n-   Note that, as of version 0.5.18, improvements have reduced the scope\n-of the problem for *sparse* initialization of large arrays, especially\n-those with large, contiguous uninitialized areas.  However, the warning\n-is issued at a point prior to when `g77' knows whether the\n-initialization is sparse, and delaying the warning could mean it is\n-produced too late to be helpful.\n-\n-   Therefore, the macro definition should not be adjusted to reflect\n-sparse cases.  Instead, adjust it to generate the warning when densely\n-initialized arrays begin to cause responses noticeably slower than\n-linear performance would suggest.\n-\n-Alpha Problems Fixed\n---------------------\n-\n-   `g77' used to warn when it was used to compile Fortran code for a\n-target configuration that is not basically a 32-bit machine (such as an\n-Alpha, which is a 64-bit machine, especially if it has a 64-bit\n-operating system running on it).  That was because `g77' was known to\n-not work properly on such configurations.\n-\n-   As of version 0.5.20, `g77' is believed to work well enough on such\n-systems.  So, the warning is no longer needed or provided.\n-\n-   However, support for 64-bit systems, especially in areas such as\n-cross-compilation and handling of intrinsics, is still incomplete.  The\n-symptoms are believed to be compile-time diagnostics rather than the\n-generation of bad code.  It is hoped that version 0.6 will completely\n-support 64-bit systems.\n-\n-Quick Start\n-===========\n-\n-   For users of the GCC-2.95 version of `g77', this information is\n-superceded by the GCC installation instructions.\n-\n-Complete Installation\n-=====================\n-\n-   For users of the GCC-2.95 version of `g77', this information is\n-superceded by the GCC installation instructions.\n-\n-Distributing Binaries\n-=====================\n-\n-   For users of the GCC-2.95 version of `g77', this information is\n-superceded by the GCC installation instructions.\n-"}, {"sha": "a0e5f738beef9ecb946b4e27f86ae9ff829c6e43", "filename": "gcc/f/Make-lang.in", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Ff%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Ff%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMake-lang.in?ref=436a88a6d45effd37cfe91200dc3d954a6c16a21", "patch": "@@ -24,7 +24,7 @@\n # foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,\n # foo.info, foo.dvi,\n # foo.install-normal, foo.install-common, foo.install-info, foo.install-man,\n-# foo.uninstall, foo.distdir,\n+# foo.uninstall,\n # foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,\n # foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4\n #\n@@ -56,7 +56,7 @@ F77 f77: f771$(exeext)\n   f77.install-normal \\\n   f77.install-common f77.install-info f77.install-man \\\n   f77.uninstall f77.mostlyclean f77.clean f77.distclean \\\n-  f77.extraclean f77.maintainer-clean f77.distdir f77.rebuilt \\\n+  f77.extraclean f77.maintainer-clean f77.rebuilt \\\n   f77.stage1 f77.stage2 f77.stage3 f77.stage4\n \n g77spec.o: $(srcdir)/f/g77spec.c $(srcdir)/f/version.h system.h $(GCC_H)\n@@ -233,15 +233,11 @@ $(srcdir)/f/BUGS: f/bugs0.texi f/bugs.texi f/root.texi\n \tcd $(srcdir)/f; $(MAKEINFO) -D BUGSONLY --no-header --no-split \\\n \t  --no-validate -o BUGS bugs0.texi\n \n-$(srcdir)/f/INSTALL: f/install0.texi f/g77install.texi f/root.texi\n-\tcd $(srcdir)/f; $(MAKEINFO) -D INSTALLONLY --no-header --no-split \\\n-\t  --no-validate -o INSTALL install0.texi\n-\n $(srcdir)/f/NEWS: f/news0.texi f/news.texi f/root.texi\n \tcd $(srcdir)/f; $(MAKEINFO) -D NEWSONLY --no-header --no-split \\\n \t  --no-validate -o NEWS news0.texi\n \n-f77.rebuilt: f/g77.info $(srcdir)/f/BUGS $(srcdir)/f/INSTALL \\\n+f77.rebuilt: f/g77.info $(srcdir)/f/BUGS \\\n   $(srcdir)/f/NEWS \n \n #\f\n@@ -364,7 +360,7 @@ f77.distclean:\n \t-rm -f lang-f77 f/Makefile\n f77.extraclean:\n f77.maintainer-clean:\n-\t-rm -f f/g77.info* f/g77.*aux f/TAGS f/BUGS f/INSTALL f/NEWS f/intdoc.texi\n+\t-rm -f f/g77.info* f/g77.*aux f/TAGS f/BUGS f/NEWS f/intdoc.texi\n #\f\n # Stage hooks:\n # The main makefile has already created stage?/f.\n@@ -388,23 +384,6 @@ f77.stage4: stage4-start\n \t-if [ -f lang-f77 ]; then \\\n \t  mv -f $(G77STAGESTUFF) stage4/f; \\\n \tfi\n-#\f\n-# Maintenance hooks:\n-\n-# This target creates the files that can be rebuilt, but go in the\n-# distribution anyway.  It then copies the files to the distdir directory.\n-f77.distdir: f77.rebuilt\n-\tcase \"$(LANGUAGES)\" in \\\n-\t  *[fF]77*) touch lang-f77;; \\\n-\t  *) rm -f lang-f77;; \\\n-\tesac\n-\t-if [ -f lang-f77 ]; then \\\n-\t  mkdir tmp/f; \\\n-\t  cd f; \\\n-\t  for file in *[0-9a-zA-Z+]; do \\\n-\t    $(LN_S) $$file ../tmp/f; \\\n-\t  done; \\\n-\tfi\n \n #\f\n # .o: .h dependencies."}, {"sha": "44311dd226ea3b38abd225d33e4e93826a30267e", "filename": "gcc/f/install0.texi", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d31a703fd5e4b2f3e45287b12a6a8002e3aee8/gcc%2Ff%2Finstall0.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d31a703fd5e4b2f3e45287b12a6a8002e3aee8/gcc%2Ff%2Finstall0.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Finstall0.texi?ref=28d31a703fd5e4b2f3e45287b12a6a8002e3aee8", "patch": "@@ -1,9 +0,0 @@\n-\\input texinfo  @c -*-texinfo-*-\n-@c %**start of header \n-@setfilename INSTALL\n-@c %**end of header\n-\n-@c This tells g77install.texi that it's generating just the INSTALL file.\n-@set DOC-INSTALL\n-@include g77install.texi\n-@bye"}, {"sha": "21c08b93401fb8b39da103cb7be5cd456f549fbb", "filename": "gcc/install1.texi", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d31a703fd5e4b2f3e45287b12a6a8002e3aee8/gcc%2Finstall1.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d31a703fd5e4b2f3e45287b12a6a8002e3aee8/gcc%2Finstall1.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finstall1.texi?ref=28d31a703fd5e4b2f3e45287b12a6a8002e3aee8", "patch": "@@ -1,15 +0,0 @@\n-@setfilename INSTALL\n-@set INSTALLONLY\n-\n-@c This file itself, install1.texi, does not appear in the GCC distribution.\n-@c The immediately following lines apply to the INSTALL file\n-@c which is generated using this file.\n-This file documents the installation of the GNU compiler.\n-Copyright (C) 1988, 1989, 1992, 1994, 1995 Free Software Foundation, Inc.\n-You may copy, distribute, and modify it freely as long as you preserve\n-this copyright notice and permission notice.\n-\n-@node Installation,,, (dir)\n-@chapter Installing GNU CC\n-@include install.texi\n-@bye"}, {"sha": "ab5162ee55331d46655bfa8b0db0d54e1816a689", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=436a88a6d45effd37cfe91200dc3d954a6c16a21", "patch": "@@ -1,3 +1,7 @@\n+2000-11-05  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* Make-lang.in (java.distdir): Remove.\n+\n 2000-11-03  Tom Tromey  <tromey@cygnus.com>\n \n \t* Make-lang.in (java.dvi): New target."}, {"sha": "b2ed5f6d7d11782f1020da23cdd862fadd888738", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=436a88a6d45effd37cfe91200dc3d954a6c16a21", "patch": "@@ -29,7 +29,7 @@\n # foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,\n # foo.info, foo.dvi,\n # foo.install-normal, foo.install-common, foo.install-info, foo.install-man,\n-# foo.uninstall, foo.distdir,\n+# foo.uninstall,\n # foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,\n # foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4\n #\n@@ -210,17 +210,6 @@ java.stage3: stage3-start\n \t-mv java/*$(objext) stage3/java\n java.stage4: stage4-start\n \t-mv java/*$(objext) stage4/java\n-#\f\n-# Maintenance hooks:\n-\n-# This target creates the files that can be rebuilt, but go in the\n-# distribution anyway.  It then copies the files to the distdir directory.\n-java.distdir: java/parse.c java/hash.h\n-\tmkdir tmp/java\n-\tcd java; \\\n-\tfor file in *[0-9a-zA-Z+]; do \\\n-\t  ln $$file ../tmp/java >/dev/null 2>&1 || cp $$file ../tmp/java; \\\n-\tdone\n \n #\f\n # .o:.h dependencies."}, {"sha": "7eae3d6e64bee75e33d37f833b1f97cc4b28946a", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436a88a6d45effd37cfe91200dc3d954a6c16a21/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=436a88a6d45effd37cfe91200dc3d954a6c16a21", "patch": "@@ -24,7 +24,7 @@\n # foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,\n # foo.info, foo.dvi,\n # foo.install-normal, foo.install-common, foo.install-info, foo.install-man,\n-# foo.uninstall, foo.distdir,\n+# foo.uninstall,\n # foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,\n # foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4\n #\n@@ -141,15 +141,3 @@ objc.stage3: stage3-start\n objc.stage4: stage4-start\n \t-mv objc/*$(objext) stage4/objc\n \t-mv cc1obj$(exeext) stage4\n-\n-#\f\n-# Maintenance hooks:\n-\n-# This target creates the files that can be rebuilt, but go in the\n-# distribution anyway.  It then copies the files to the distdir directory.\n-objc.distdir: $(srcdir)/objc/objc-parse.c\n-\tmkdir tmp/objc\n-\tcd objc; \\\n-\tfor file in *[0-9a-zA-Z+]; do \\\n-\t  ln $$file ../tmp/objc >/dev/null 2>&1 || cp $$file ../tmp/objc; \\\n-\tdone"}]}