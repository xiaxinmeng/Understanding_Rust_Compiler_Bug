{"sha": "791f2d03b4c611040b0d20b61441b438eecef8b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkxZjJkMDNiNGM2MTEwNDBiMGQyMGI2MTQ0MWI0MzhlZWNlZjhiOA==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2018-01-11T08:56:07Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-01-11T08:56:07Z"}, "message": "[Ada] Allow uses of range utility routines on private types\n\nFrontend only calls Is_Null_Range and Not_Null_Range routines on full views\nof types, but backends (for example GNATprove) might call them also on\nprivate types. This patch adapts those routines to transparently retrieve\nthe full type when called on a private type.\n\nNo frontend test, because only external backends are affected.\n\n2018-01-11  Piotr Trojanek  <trojanek@adacore.com>\n\ngcc/ada/\n\n\t* sem_eval.adb (Is_Null_Range): Retrieve the full view when called on a\n\tprivate (sub)type; refactor to avoid early return statement.\n\t(Not_Null_Range): Same as above.\n\nFrom-SVN: r256522", "tree": {"sha": "f4ba25915623884bc147bc5501680703099e5650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4ba25915623884bc147bc5501680703099e5650"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/791f2d03b4c611040b0d20b61441b438eecef8b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/791f2d03b4c611040b0d20b61441b438eecef8b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/791f2d03b4c611040b0d20b61441b438eecef8b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/791f2d03b4c611040b0d20b61441b438eecef8b8/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a85dbeec8d84e07ee549fca50dc118234f16d3f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a85dbeec8d84e07ee549fca50dc118234f16d3f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a85dbeec8d84e07ee549fca50dc118234f16d3f1"}], "stats": {"total": 73, "additions": 54, "deletions": 19}, "files": [{"sha": "7b26e37791f0b1ee06b463c5634a4be9810a4913", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791f2d03b4c611040b0d20b61441b438eecef8b8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791f2d03b4c611040b0d20b61441b438eecef8b8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=791f2d03b4c611040b0d20b61441b438eecef8b8", "patch": "@@ -1,3 +1,9 @@\n+2018-01-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_eval.adb (Is_Null_Range): Retrieve the full view when called on a\n+\tprivate (sub)type; refactor to avoid early return statement.\n+\t(Not_Null_Range): Same as above.\n+\n 2018-01-11  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* freeze.adb (Freeze_Entity): Ensure that a Ghost type is not"}, {"sha": "93536cbacdadf2ff7160a0e009142a3c8945dafb", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 48, "deletions": 19, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791f2d03b4c611040b0d20b61441b438eecef8b8/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791f2d03b4c611040b0d20b61441b438eecef8b8/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=791f2d03b4c611040b0d20b61441b438eecef8b8", "patch": "@@ -4755,19 +4755,33 @@ package body Sem_Eval is\n    -------------------\n \n    function Is_Null_Range (Lo : Node_Id; Hi : Node_Id) return Boolean is\n-      Typ : constant Entity_Id := Etype (Lo);\n-\n    begin\n-      if not Compile_Time_Known_Value (Lo)\n-        or else not Compile_Time_Known_Value (Hi)\n+      if Compile_Time_Known_Value (Lo)\n+        and then Compile_Time_Known_Value (Hi)\n       then\n-         return False;\n-      end if;\n+         declare\n+            Typ      :          Entity_Id := Etype (Lo);\n+            Full_Typ : constant Entity_Id := Full_View (Typ);\n+         begin\n+            --  When called from the frontend, as part of the analysis of\n+            --  potentially static expressions, Typ will be the full view of a\n+            --  type with all the info needed to answer this query. When called\n+            --  from the backend, for example to know whether a range of a loop\n+            --  is null, Typ might be a private type and we need to explicitly\n+            --  switch to its corresponding full view to access the same info.\n+\n+            if Present (Full_Typ) then\n+               Typ := Full_Typ;\n+            end if;\n \n-      if Is_Discrete_Type (Typ) then\n-         return Expr_Value (Lo) > Expr_Value (Hi);\n-      else pragma Assert (Is_Real_Type (Typ));\n-         return Expr_Value_R (Lo) > Expr_Value_R (Hi);\n+            if Is_Discrete_Type (Typ) then\n+               return Expr_Value (Lo) > Expr_Value (Hi);\n+            else pragma Assert (Is_Real_Type (Typ));\n+               return Expr_Value_R (Lo) > Expr_Value_R (Hi);\n+            end if;\n+         end;\n+      else\n+         return False;\n       end if;\n    end Is_Null_Range;\n \n@@ -5330,20 +5344,35 @@ package body Sem_Eval is\n    --------------------\n \n    function Not_Null_Range (Lo : Node_Id; Hi : Node_Id) return Boolean is\n-      Typ : constant Entity_Id := Etype (Lo);\n-\n    begin\n-      if not Compile_Time_Known_Value (Lo)\n-        or else not Compile_Time_Known_Value (Hi)\n+      if Compile_Time_Known_Value (Lo)\n+        and then Compile_Time_Known_Value (Hi)\n       then\n+         declare\n+            Typ      :          Entity_Id := Etype (Lo);\n+            Full_Typ : constant Entity_Id := Full_View (Typ);\n+         begin\n+            --  When called from the frontend, as part of the analysis of\n+            --  potentially static expressions, Typ will be the full view of a\n+            --  type with all the info needed to answer this query. When called\n+            --  from the backend, for example to know whether a range of a loop\n+            --  is null, Typ might be a private type and we need to explicitly\n+            --  switch to its corresponding full view to access the same info.\n+\n+            if Present (Full_Typ) then\n+               Typ := Full_Typ;\n+            end if;\n+\n+            if Is_Discrete_Type (Typ) then\n+               return Expr_Value (Lo) <= Expr_Value (Hi);\n+            else pragma Assert (Is_Real_Type (Typ));\n+               return Expr_Value_R (Lo) <= Expr_Value_R (Hi);\n+            end if;\n+         end;\n+      else\n          return False;\n       end if;\n \n-      if Is_Discrete_Type (Typ) then\n-         return Expr_Value (Lo) <= Expr_Value (Hi);\n-      else pragma Assert (Is_Real_Type (Typ));\n-         return Expr_Value_R (Lo) <= Expr_Value_R (Hi);\n-      end if;\n    end Not_Null_Range;\n \n    -------------"}]}