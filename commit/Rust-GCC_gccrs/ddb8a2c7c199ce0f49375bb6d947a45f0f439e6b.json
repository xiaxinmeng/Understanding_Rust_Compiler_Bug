{"sha": "ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRiOGEyYzdjMTk5Y2UwZjQ5Mzc1YmI2ZDk0N2E0NWYwZjQzOWU2Yg==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2013-04-22T10:41:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-22T10:41:08Z"}, "message": "par-prag.adb, [...]: Remove all references to Pragma_Contract_Case and Name_Contract_Case.\n\n2013-04-22  Yannick Moy  <moy@adacore.com>\n\n\t* par-prag.adb, sem_attr.adb, sem_ch6.adb, sem_prag.adb, sem_warn.adb,\n\tsnames.ads-tmpl, sinfo.ads, sem_util.ads: Remove all references to\n\tPragma_Contract_Case and Name_Contract_Case.\n\nFrom-SVN: r198128", "tree": {"sha": "f2e9837ea6a9339e1675e6f060ed7ea549f8beaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2e9837ea6a9339e1675e6f060ed7ea549f8beaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "541fb4d9bc40ec95eaba46fc2474067b296f1680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/541fb4d9bc40ec95eaba46fc2474067b296f1680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/541fb4d9bc40ec95eaba46fc2474067b296f1680"}], "stats": {"total": 254, "additions": 61, "deletions": 193}, "files": [{"sha": "5c02323a6b5379e136201f7b5a01616672663a6c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b", "patch": "@@ -1,3 +1,9 @@\n+2013-04-22  Yannick Moy  <moy@adacore.com>\n+\n+\t* par-prag.adb, sem_attr.adb, sem_ch6.adb, sem_prag.adb, sem_warn.adb,\n+\tsnames.ads-tmpl, sinfo.ads, sem_util.ads: Remove all references to\n+\tPragma_Contract_Case and Name_Contract_Case.\n+\n 2013-04-22  Yannick Moy  <moy@adacore.com>\n \n \t* aspects.ads, aspects.adb, sem_ch13.adb: Removal of references to"}, {"sha": "180bf7ca750f41a4027bc00c48aeac90f64496ff", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b", "patch": "@@ -1121,7 +1121,6 @@ begin\n            Pragma_Compile_Time_Error             |\n            Pragma_Compile_Time_Warning           |\n            Pragma_Compiler_Unit                  |\n-           Pragma_Contract_Case                  |\n            Pragma_Contract_Cases                 |\n            Pragma_Convention_Identifier          |\n            Pragma_CPP_Class                      |"}, {"sha": "974a57bcaedd3ad3e1115764d5d10e88a7ad4835", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b", "patch": "@@ -4265,10 +4265,7 @@ package body Sem_Attr is\n             if Nkind (Prag) /= N_Pragma then\n                Error_Attr (\"% attribute can only appear in postcondition\", P);\n \n-            elsif Get_Pragma_Id (Prag) = Pragma_Contract_Case\n-                    or else\n-                  Get_Pragma_Id (Prag) = Pragma_Test_Case\n-            then\n+            elsif Get_Pragma_Id (Prag) = Pragma_Test_Case then\n                declare\n                   Arg_Ens : constant Node_Id :=\n                               Get_Ensures_From_CTC_Pragma (Prag);\n@@ -4281,13 +4278,7 @@ package body Sem_Attr is\n                   end loop;\n \n                   if Arg /= Arg_Ens then\n-                     if Get_Pragma_Id (Prag) = Pragma_Contract_Case then\n-                        Error_Attr\n-                          (\"% attribute misplaced inside contract case\", P);\n-                     else\n-                        Error_Attr\n-                          (\"% attribute misplaced inside test case\", P);\n-                     end if;\n+                     Error_Attr (\"% attribute misplaced inside test case\", P);\n                   end if;\n                end;\n \n@@ -4681,10 +4672,7 @@ package body Sem_Attr is\n                  (\"% attribute can only appear in postcondition of function\",\n                   P);\n \n-            elsif Get_Pragma_Id (Prag) = Pragma_Contract_Case\n-                    or else\n-                  Get_Pragma_Id (Prag) = Pragma_Test_Case\n-            then\n+            elsif Get_Pragma_Id (Prag) = Pragma_Test_Case then\n                declare\n                   Arg_Ens : constant Node_Id :=\n                               Get_Ensures_From_CTC_Pragma (Prag);\n@@ -4697,13 +4685,7 @@ package body Sem_Attr is\n                   end loop;\n \n                   if Arg /= Arg_Ens then\n-                     if Get_Pragma_Id (Prag) = Pragma_Contract_Case then\n-                        Error_Attr\n-                          (\"% attribute misplaced inside contract case\", P);\n-                     else\n-                        Error_Attr\n-                          (\"% attribute misplaced inside test case\", P);\n-                     end if;\n+                     Error_Attr (\"% attribute misplaced inside test case\", P);\n                   end if;\n                end;\n "}, {"sha": "7d947c8ae0a76c84ca35b04e7ecd7e3d48e34c5f", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 10, "deletions": 108, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b", "patch": "@@ -7051,7 +7051,7 @@ package body Sem_Ch6 is\n --        --  List of subprograms inherited by this subprogram\n \n       --  We ignore postconditions \"True\" or \"False\" and contract-cases which\n-      --  have similar Ensures components, which we call \"trivial\", when\n+      --  have similar consequence expressions, which we call \"trivial\", when\n       --  issuing warnings, since these postconditions and contract-cases\n       --  purposedly ignore the post-state.\n \n@@ -7064,15 +7064,16 @@ package body Sem_Ch6 is\n \n       Attribute_Result_Mentioned : Boolean := False;\n       --  Whether attribute 'Result is mentioned in a non-trivial postcondition\n-      --  or contract-case.\n+      --  or contract-cases.\n \n       No_Warning_On_Some_Postcondition : Boolean := False;\n-      --  Whether there exists a non-trivial postcondition or contract-case\n+      --  Whether there exists a non-trivial postcondition or contract-cases\n       --  without a corresponding warning.\n \n       Post_State_Mentioned : Boolean := False;\n-      --  Whether some expression mentioned in a postcondition or contract-case\n-      --  can have a different value in the post-state than in the pre-state.\n+      --  Whether some expression mentioned in a postcondition or\n+      --  contract-cases can have a different value in the post-state than\n+      --  in the pre-state.\n \n       function Check_Attr_Result (N : Node_Id) return Traverse_Result;\n       --  Check if N is a reference to the attribute 'Result, and if so set\n@@ -7218,7 +7219,7 @@ package body Sem_Ch6 is\n                while Present (Post_Case) loop\n                   Conseq := Expression (Post_Case);\n \n-                  --  Ignore trivial contract-case when consequence is \"True\"\n+                  --  Ignore trivial contract-cases when consequence is \"True\"\n                   --  or \"False\".\n \n                   if not Is_Trivial_Post_Or_Ensures (Conseq) then\n@@ -11266,11 +11267,6 @@ package body Sem_Ch6 is\n       --  evaluate case guards and trigger consequence expressions. Subp_Id\n       --  denotes the related subprogram.\n \n-      function Grab_CC return Node_Id;\n-      --  Prag contains an analyzed contract case pragma. This function copies\n-      --  relevant components of the pragma, creates the corresponding Check\n-      --  pragma and returns the Check pragma as the result.\n-\n       function Grab_PPC (Pspec : Entity_Id := Empty) return Node_Id;\n       --  Prag contains an analyzed precondition or postcondition pragma. This\n       --  function copies the pragma, changes it to the corresponding Check\n@@ -11786,89 +11782,6 @@ package body Sem_Ch6 is\n          Append_To (Plist, Conseq_Checks);\n       end Expand_Contract_Cases;\n \n-      -------------\n-      -- Grab_CC --\n-      -------------\n-\n-      function Grab_CC return Node_Id is\n-         Loc  : constant Source_Ptr := Sloc (Prag);\n-         CP   : Node_Id;\n-         Req  : Node_Id;\n-         Ens  : Node_Id;\n-         Post : Node_Id;\n-\n-         --  As with postcondition, the string is \"failed xx from yy\" where\n-         --  xx is in all lower case. The reason for this different wording\n-         --  compared to other Check cases is that the failure is not at the\n-         --  point of occurrence of the pragma, unlike the other Check cases.\n-\n-         Msg  : constant String :=\n-                  \"failed contract case from \" & Build_Location_String (Loc);\n-\n-      begin\n-         --  Copy the Requires and Ensures expressions\n-\n-         Req  := New_Copy_Tree\n-                   (Expression (Get_Requires_From_CTC_Pragma (Prag)),\n-                    New_Scope => Current_Scope);\n-\n-         Ens  := New_Copy_Tree\n-                   (Expression (Get_Ensures_From_CTC_Pragma (Prag)),\n-                    New_Scope => Current_Scope);\n-\n-         --  Build the postcondition (not Requires'Old or else Ensures)\n-\n-         Post :=\n-           Make_Or_Else (Loc,\n-             Left_Opnd  =>\n-               Make_Op_Not (Loc,\n-                 Make_Attribute_Reference (Loc,\n-                   Prefix         => Req,\n-                   Attribute_Name => Name_Old)),\n-             Right_Opnd => Ens);\n-\n-         --  For a contract case pragma within a generic, generate a\n-         --  postcondition pragma for later expansion. This is also used\n-         --  when an error was detected, thus setting Expander_Active to False.\n-\n-         if not Expander_Active then\n-            CP :=\n-              Make_Pragma (Loc,\n-                Chars                        => Name_Postcondition,\n-                Pragma_Argument_Associations => New_List (\n-                  Make_Pragma_Argument_Association (Loc,\n-                    Chars      => Name_Check,\n-                    Expression => Post),\n-\n-                  Make_Pragma_Argument_Association (Loc,\n-                    Chars      => Name_Message,\n-                    Expression => Make_String_Literal (Loc, Msg))));\n-\n-         --  Otherwise, create the Check pragma\n-\n-         else\n-            CP :=\n-              Make_Pragma (Loc,\n-                Chars                        => Name_Check,\n-                Pragma_Argument_Associations => New_List (\n-                  Make_Pragma_Argument_Association (Loc,\n-                    Chars      => Name_Name,\n-                    Expression => Make_Identifier (Loc, Name_Postcondition)),\n-\n-                  Make_Pragma_Argument_Association (Loc,\n-                    Chars      => Name_Check,\n-                    Expression => Post),\n-\n-                  Make_Pragma_Argument_Association (Loc,\n-                    Chars      => Name_Message,\n-                    Expression => Make_String_Literal (Loc, Msg))));\n-         end if;\n-\n-         --  Return the Postcondition or Check pragma\n-\n-         return CP;\n-      end Grab_CC;\n-\n       --------------\n       -- Grab_PPC --\n       --------------\n@@ -12300,7 +12213,7 @@ package body Sem_Ch6 is\n          Spec_Postconditions : declare\n             procedure Process_Contract_Cases (Spec : Node_Id);\n             --  This processes the Spec_CTC_List from Spec, processing any\n-            --  contract-case from the list. The caller has checked that\n+            --  contract-cases from the list. The caller has checked that\n             --  Spec_CTC_List is non-Empty.\n \n             procedure Process_Post_Conditions\n@@ -12317,22 +12230,11 @@ package body Sem_Ch6 is\n \n             procedure Process_Contract_Cases (Spec : Node_Id) is\n             begin\n-               --  Loop through Contract_Case pragmas from spec\n+               --  Loop through Contract_Cases pragmas from spec\n \n                Prag := Spec_CTC_List (Contract (Spec));\n                loop\n-                  if Pragma_Name (Prag) = Name_Contract_Case then\n-                     if Plist = No_List then\n-                        Plist := Empty_List;\n-                     end if;\n-\n-                     if not Expander_Active then\n-                        Prepend (Grab_CC, Declarations (N));\n-                     else\n-                        Append (Grab_CC, Plist);\n-                     end if;\n-\n-                  elsif Pragma_Name (Prag) = Name_Contract_Cases then\n+                  if Pragma_Name (Prag) = Name_Contract_Cases then\n                      Expand_Contract_Cases (Prag, Spec_Id);\n                   end if;\n "}, {"sha": "1cff29ff6de1f8f099b4af3076323c28b2892952", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 29, "deletions": 47, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b", "patch": "@@ -190,8 +190,8 @@ package body Sem_Prag is\n \n    procedure Preanalyze_CTC_Args (N, Arg_Req, Arg_Ens : Node_Id);\n    --  Preanalyze the boolean expressions in the Requires and Ensures arguments\n-   --  of a Contract_Case or Test_Case pragma if present (possibly Empty). We\n-   --  treat these as spec expressions (i.e. similar to a default expression).\n+   --  of a Test_Case pragma if present (possibly Empty). We treat these as\n+   --  spec expressions (i.e. similar to a default expression).\n \n    procedure Rewrite_Assertion_Kind (N : Node_Id);\n    --  If N is Pre'Class, Post'Class, Invariant'Class, or Type_Invariant'Class,\n@@ -306,7 +306,7 @@ package body Sem_Prag is\n       --  Preanalyze the boolean expressions, we treat these as spec\n       --  expressions (i.e. similar to a default expression).\n \n-      if Nam_In (Pragma_Name (N), Name_Test_Case, Name_Contract_Case) then\n+      if Pragma_Name (N) = Name_Test_Case then\n          Preanalyze_CTC_Args\n            (N,\n             Get_Requires_From_CTC_Pragma (N),\n@@ -627,17 +627,16 @@ package body Sem_Prag is\n       --  UU_Typ is the related Unchecked_Union type. Flag In_Variant_Part\n       --  should be set when Comp comes from a record variant.\n \n-      procedure Check_Contract_Or_Test_Case;\n-      --  Called to process a contract-case or test-case pragma. It\n-      --  starts with checking pragma arguments, and the rest of the\n-      --  treatment is similar to the one for pre- and postcondition in\n-      --  Check_Precondition_Postcondition, except the placement rules for the\n-      --  contract-case and test-case pragmas are stricter. These pragmas may\n-      --  only occur after a subprogram spec declared directly in a package\n-      --  spec unit. In this case, the pragma is chained to the subprogram in\n-      --  question (using Spec_CTC_List and Next_Pragma) and analysis of the\n-      --  pragma is delayed till the end of the spec. In all other cases, an\n-      --  error message for bad placement is given.\n+      procedure Check_Test_Case;\n+      --  Called to process a test-case pragma. It starts with checking pragma\n+      --  arguments, and the rest of the treatment is similar to the one for\n+      --  pre- and postcondition in Check_Precondition_Postcondition, except\n+      --  the placement rules for the test-case pragma are stricter. These\n+      --  pragmas may only occur after a subprogram spec declared directly\n+      --  in a package spec unit. In this case, the pragma is chained to the\n+      --  subprogram in question (using Spec_CTC_List and Next_Pragma) and\n+      --  analysis of the pragma is delayed till the end of the spec. In all\n+      --  other cases, an error message for bad placement is given.\n \n       procedure Check_Duplicate_Pragma (E : Entity_Id);\n       --  Check if a rep item of the same name as the current pragma is already\n@@ -1526,19 +1525,18 @@ package body Sem_Prag is\n          end if;\n       end Check_Component;\n \n-      ---------------------------------\n-      -- Check_Contract_Or_Test_Case --\n-      ---------------------------------\n+      ---------------------\n+      -- Check_Test_Case --\n+      ---------------------\n \n-      procedure Check_Contract_Or_Test_Case is\n+      procedure Check_Test_Case is\n          P  : Node_Id;\n          PO : Node_Id;\n \n          procedure Chain_CTC (PO : Node_Id);\n          --  If PO is a [generic] subprogram declaration node, then the\n-         --  contract-case or test-case applies to this subprogram and the\n-         --  processing for the pragma is completed. Otherwise the pragma\n-         --  is misplaced.\n+         --  test-case applies to this subprogram and the processing for\n+         --  the pragma is completed. Otherwise the pragma is misplaced.\n \n          ---------------\n          -- Chain_CTC --\n@@ -1571,8 +1569,8 @@ package body Sem_Prag is\n             --  in this analysis, allowing forward references. The analysis\n             --  happens at the end of Analyze_Declarations.\n \n-            --  There should not be another contract-case or test-case with the\n-            --  same name associated to this subprogram.\n+            --  There should not be another test-case with the same name\n+            --  associated to this subprogram.\n \n             declare\n                Name : constant String_Id := Get_Name_From_CTC_Pragma (N);\n@@ -1584,7 +1582,7 @@ package body Sem_Prag is\n \n                   --  Omit pragma Contract_Cases because it does not introduce\n                   --  a unique case name and it does not follow the syntax of\n-                  --  Contract_Case and Test_Case.\n+                  --  Test_Case.\n \n                   if Pragma_Name (CTC) = Name_Contract_Cases then\n                      null;\n@@ -1606,7 +1604,7 @@ package body Sem_Prag is\n             Set_Spec_CTC_List (Contract (S), N);\n          end Chain_CTC;\n \n-      --  Start of processing for Check_Contract_Or_Test_Case\n+      --  Start of processing for Check_Test_Case\n \n       begin\n          --  First check pragma arguments\n@@ -1647,7 +1645,7 @@ package body Sem_Prag is\n             Pragma_Misplaced;\n          end if;\n \n-         --  Contract-case or test-case should only appear in package spec unit\n+         --  Test-case should only appear in package spec unit\n \n          if Get_Source_Unit (N) = No_Unit\n            or else not Nkind_In (Sinfo.Unit (Cunit (Get_Source_Unit (N))),\n@@ -1665,9 +1663,9 @@ package body Sem_Prag is\n \n             --  If the previous node is a generic subprogram, do not go to to\n             --  the original node, which is the unanalyzed tree: we need to\n-            --  attach the contract-case or test-case to the analyzed version\n-            --  at this point. They get propagated to the original tree when\n-            --  analyzing the corresponding body.\n+            --  attach the test-case to the analyzed version at this point.\n+            --  They get propagated to the original tree when analyzing the\n+            --  corresponding body.\n \n             if Nkind (P) not in N_Generic_Declaration then\n                PO := Original_Node (P);\n@@ -1707,7 +1705,7 @@ package body Sem_Prag is\n          --  If we fall through, pragma was misplaced\n \n          Pragma_Misplaced;\n-      end Check_Contract_Or_Test_Case;\n+      end Check_Test_Case;\n \n       ----------------------------\n       -- Check_Duplicate_Pragma --\n@@ -8617,21 +8615,6 @@ package body Sem_Prag is\n             end if;\n          end Component_AlignmentP;\n \n-         -------------------\n-         -- Contract_Case --\n-         -------------------\n-\n-         --  pragma Contract_Case\n-         --    ([Name     =>] Static_String_EXPRESSION\n-         --    ,[Mode     =>] MODE_TYPE\n-         --   [, Requires =>  Boolean_EXPRESSION]\n-         --   [, Ensures  =>  Boolean_EXPRESSION]);\n-\n-         --  MODE_TYPE ::= Nominal | Robustness\n-\n-         when Pragma_Contract_Case =>\n-            Check_Contract_Or_Test_Case;\n-\n          --------------------\n          -- Contract_Cases --\n          --------------------\n@@ -16973,7 +16956,7 @@ package body Sem_Prag is\n          --  MODE_TYPE ::= Nominal | Robustness\n \n          when Pragma_Test_Case =>\n-            Check_Contract_Or_Test_Case;\n+            Check_Test_Case;\n \n          --------------------------\n          -- Thread_Local_Storage --\n@@ -18150,7 +18133,6 @@ package body Sem_Prag is\n       Pragma_Complete_Representation        =>  0,\n       Pragma_Complex_Representation         =>  0,\n       Pragma_Component_Alignment            => -1,\n-      Pragma_Contract_Case                  => -1,\n       Pragma_Contract_Cases                 => -1,\n       Pragma_Controlled                     =>  0,\n       Pragma_Convention                     =>  0,"}, {"sha": "a47eb98cc4c1ab41cc170a7fd74a8a1f29aa990c", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b", "patch": "@@ -575,8 +575,7 @@ package Sem_Util is\n    --  Otherwise return Empty. Expression N should have been resolved already.\n \n    function Get_Ensures_From_CTC_Pragma (N : Node_Id) return Node_Id;\n-   --  Return the Ensures component of Contract_Case or Test_Case pragma N, or\n-   --  Empty otherwise.\n+   --  Return the Ensures component of Test_Case pragma N, or Empty otherwise\n \n    function Get_Generic_Entity (N : Node_Id) return Entity_Id;\n    --  Returns the true generic entity in an instantiation. If the name in the\n@@ -616,7 +615,7 @@ package Sem_Util is\n    --  Sem_Ch8 for further details on handling of entity visibility.\n \n    function Get_Name_From_CTC_Pragma (N : Node_Id) return String_Id;\n-   --  Return the Name component of Contract_Case or Test_Case pragma N\n+   --  Return the Name component of Test_Case pragma N\n \n    function Get_Pragma_Id (N : Node_Id) return Pragma_Id;\n    pragma Inline (Get_Pragma_Id);\n@@ -634,8 +633,7 @@ package Sem_Util is\n    --  with any other kind of entity.\n \n    function Get_Requires_From_CTC_Pragma (N : Node_Id) return Node_Id;\n-   --  Return the Requires component of Contract_Case or Test_Case pragma N, or\n-   --  Empty otherwise.\n+   --  Return the Requires component of Test_Case pragma N, or Empty otherwise\n \n    function Get_Subprogram_Entity (Nod : Node_Id) return Entity_Id;\n    --  Nod is either a procedure call statement, or a function call, or an"}, {"sha": "68c3ca89b519a03be2118060f7e0c8feecdc47d7", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b", "patch": "@@ -1765,8 +1765,8 @@ package body Sem_Warn is\n                      SE : constant Entity_Id := Scope (E);\n \n                      function Within_Postcondition return Boolean;\n-                     --  Returns True iff N is within a Postcondition or\n-                     --  Ensures component in a Contract_Case or Test_Case.\n+                     --  Returns True iff N is within a Postcondition, an\n+                     --  Ensures component in a Test_Case, or a Contract_Cases.\n \n                      --------------------------\n                      -- Within_Postcondition --\n@@ -1779,7 +1779,9 @@ package body Sem_Warn is\n                         Nod := Parent (N);\n                         while Present (Nod) loop\n                            if Nkind (Nod) = N_Pragma\n-                             and then Pragma_Name (Nod) = Name_Postcondition\n+                             and then Nam_In (Pragma_Name (Nod),\n+                                              Name_Postcondition,\n+                                              Name_Contract_Cases)\n                            then\n                               return True;\n \n@@ -1788,8 +1790,7 @@ package body Sem_Warn is\n \n                               if Nkind (P) = N_Pragma\n                                 and then\n-                                  Nam_In (Pragma_Name (P), Name_Contract_Case,\n-                                                           Name_Test_Case)\n+                                  Pragma_Name (P) = Name_Test_Case\n                                 and then\n                                   Nod = Get_Ensures_From_CTC_Pragma (P)\n                               then"}, {"sha": "9631fa8acfdfbc6b10060065ab1cd04702e69bfe", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b", "patch": "@@ -7042,12 +7042,12 @@ package Sinfo is\n       --  Note that this includes precondition/postcondition pragmas generated\n       --  to correspond to Pre/Post aspects.\n \n-      --  Spec_CTC_List points to a list of Contract_Case and Test_Case pragma\n+      --  Spec_CTC_List points to a list of Contract_Cases and Test_Case pragma\n       --  nodes for contract-cases and test-cases declared in the spec of the\n       --  entry/subprogram. The last pragma encountered is at the head of this\n       --  list, so it is in reverse order of textual appearance. Note that\n-      --  this includes contract-case and test-case pragmas generated from\n-      --  Contract_Case and Test_Case aspects.\n+      --  this includes contract-cases and test-case pragmas generated from\n+      --  Contract_Cases and Test_Case aspects.\n \n       -------------------\n       -- Expanded_Name --"}, {"sha": "d1854b2705c0c42a8ce39ba853baeb77165000e1", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=ddb8a2c7c199ce0f49375bb6d947a45f0f439e6b", "patch": "@@ -473,7 +473,6 @@ package Snames is\n    Name_Common_Object                  : constant Name_Id := N + $; -- GNAT\n    Name_Complete_Representation        : constant Name_Id := N + $; -- GNAT\n    Name_Complex_Representation         : constant Name_Id := N + $; -- GNAT\n-   Name_Contract_Case                  : constant Name_Id := N + $; -- GNAT\n    Name_Contract_Cases                 : constant Name_Id := N + $; -- GNAT\n    Name_Controlled                     : constant Name_Id := N + $;\n    Name_Convention                     : constant Name_Id := N + $;\n@@ -1775,7 +1774,6 @@ package Snames is\n       Pragma_Common_Object,\n       Pragma_Complete_Representation,\n       Pragma_Complex_Representation,\n-      Pragma_Contract_Case,\n       Pragma_Contract_Cases,\n       Pragma_Controlled,\n       Pragma_Convention,"}]}