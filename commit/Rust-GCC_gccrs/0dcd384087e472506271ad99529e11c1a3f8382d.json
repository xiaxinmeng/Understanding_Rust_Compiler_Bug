{"sha": "0dcd384087e472506271ad99529e11c1a3f8382d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRjZDM4NDA4N2U0NzI1MDYyNzFhZDk5NTI5ZTExYzFhM2Y4MzgyZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-08-29T22:07:11Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-08-29T22:07:11Z"}, "message": "builtins.c (expand_builtin_constant_p): Check cse_not_expected here, (fold_builtin_constant_p) ...\n\n        * builtins.c (expand_builtin_constant_p): Check cse_not_expected here,\n        (fold_builtin_constant_p) ... not here.\n\nFrom-SVN: r70926", "tree": {"sha": "c1431d486ca4a71e7852d2b7ac47dc79448fbaf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1431d486ca4a71e7852d2b7ac47dc79448fbaf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dcd384087e472506271ad99529e11c1a3f8382d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dcd384087e472506271ad99529e11c1a3f8382d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dcd384087e472506271ad99529e11c1a3f8382d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dcd384087e472506271ad99529e11c1a3f8382d/comments", "author": null, "committer": null, "parents": [{"sha": "4b1e44bee1cc164e8b6660eae8980a0e52770f06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1e44bee1cc164e8b6660eae8980a0e52770f06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b1e44bee1cc164e8b6660eae8980a0e52770f06"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "78b415ccf992e5189aeb9bae7b5623da8e0c2791", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dcd384087e472506271ad99529e11c1a3f8382d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dcd384087e472506271ad99529e11c1a3f8382d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0dcd384087e472506271ad99529e11c1a3f8382d", "patch": "@@ -1,3 +1,8 @@\n+2003-08-29  Richard Henderson  <rth@redhat.com>\n+\n+\t* builtins.c (expand_builtin_constant_p): Check cse_not_expected here,\n+\t(fold_builtin_constant_p) ... not here.\n+\n 2003-08-29  Richard Henderson  <rth@redhat.com>\n \n \t* c-tree.h (C_DECL_FILE_SCOPE): Move ..."}, {"sha": "bdb29cea67d48c66b7588652acc5eb42d8a184d0", "filename": "gcc/builtins.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dcd384087e472506271ad99529e11c1a3f8382d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dcd384087e472506271ad99529e11c1a3f8382d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=0dcd384087e472506271ad99529e11c1a3f8382d", "patch": "@@ -1462,7 +1462,11 @@ expand_builtin_constant_p (tree arglist, enum machine_mode target_mode)\n \n   /* We have taken care of the easy cases during constant folding.  This\n      case is not obvious, so emit (constant_p_rtx (ARGLIST)) and let CSE\n-     get a chance to see if it can deduce whether ARGLIST is constant.  */\n+     get a chance to see if it can deduce whether ARGLIST is constant.\n+     If CSE isn't going to run, of course, don't bother waiting.  */\n+\n+  if (cse_not_expected)\n+    return const0_rtx;\n \n   current_function_calls_constant_p = 1;\n \n@@ -5470,15 +5474,14 @@ fold_builtin_constant_p (tree arglist)\n \t  && TREE_CODE (TREE_OPERAND (arglist, 0)) == STRING_CST))\n     return integer_one_node;\n \n-  /* If we aren't going to be running CSE or this expression\n-     has side effects, show we don't know it to be a constant.\n-     Likewise if it's a pointer or aggregate type since in those\n-     case we only want literals, since those are only optimized\n+  /* If this expression has side effects, show we don't know it to be a\n+     constant.  Likewise if it's a pointer or aggregate type since in\n+     those case we only want literals, since those are only optimized\n      when generating RTL, not later.\n      And finally, if we are compiling an initializer, not code, we\n      need to return a definite result now; there's not going to be any\n      more optimization done.  */\n-  if (TREE_SIDE_EFFECTS (arglist) || cse_not_expected\n+  if (TREE_SIDE_EFFECTS (arglist)\n       || AGGREGATE_TYPE_P (TREE_TYPE (arglist))\n       || POINTER_TYPE_P (TREE_TYPE (arglist))\n       || cfun == 0)"}]}