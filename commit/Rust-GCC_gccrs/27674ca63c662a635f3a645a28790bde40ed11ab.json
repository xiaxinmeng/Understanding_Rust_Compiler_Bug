{"sha": "27674ca63c662a635f3a645a28790bde40ed11ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc2NzRjYTYzYzY2MmE2MzVmM2E2NDVhMjg3OTBiZGU0MGVkMTFhYg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-03-27T09:33:20Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-03-27T09:33:20Z"}, "message": "re PR sanitizer/65583 ([UBSAN] ICE segfault in inline_edge_summary)\n\n\tPR sanitizer/65583\n\t* ubsan.c (ubsan_create_edge): New function.\n\t(instrument_bool_enum_load): Call it.\n\t(instrument_nonnull_arg): Likewise.\n\t(instrument_nonnull_return): Likewise.\n\t(instrument_object_size): Likewise.\n\n\t* g++.dg/ubsan/pr65583.C: New test.\n\nFrom-SVN: r221723", "tree": {"sha": "73030549c624ef54877b624aed93c087329d3ac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73030549c624ef54877b624aed93c087329d3ac9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27674ca63c662a635f3a645a28790bde40ed11ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27674ca63c662a635f3a645a28790bde40ed11ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27674ca63c662a635f3a645a28790bde40ed11ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27674ca63c662a635f3a645a28790bde40ed11ab/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50cfd44e5d1ed01d1c641da81ffe3974afa373f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50cfd44e5d1ed01d1c641da81ffe3974afa373f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50cfd44e5d1ed01d1c641da81ffe3974afa373f7"}], "stats": {"total": 189, "additions": 188, "deletions": 1}, "files": [{"sha": "37258ad187cb39e84ec732e03424e331b247c4d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27674ca63c662a635f3a645a28790bde40ed11ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27674ca63c662a635f3a645a28790bde40ed11ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27674ca63c662a635f3a645a28790bde40ed11ab", "patch": "@@ -1,3 +1,12 @@\n+2015-03-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/65583\n+\t* ubsan.c (ubsan_create_edge): New function.\n+\t(instrument_bool_enum_load): Call it.\n+\t(instrument_nonnull_arg): Likewise.\n+\t(instrument_nonnull_return): Likewise.\n+\t(instrument_object_size): Likewise.\n+\n 2015-03-26  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto-streamer.h (class lto_location_cache): Turn loc_cache into"}, {"sha": "9cbe0f93570887efe1e88f5c529278e01ab22cd6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27674ca63c662a635f3a645a28790bde40ed11ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27674ca63c662a635f3a645a28790bde40ed11ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27674ca63c662a635f3a645a28790bde40ed11ab", "patch": "@@ -1,3 +1,8 @@\n+2015-03-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/65583\n+\t* g++.dg/ubsan/pr65583.C: New test.\n+\n 2015-03-26  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.c-torture/compile/20150327.c: New testcase."}, {"sha": "4e1149e9cb6690816054057f16401d8808466269", "filename": "gcc/testsuite/g++.dg/ubsan/pr65583.C", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27674ca63c662a635f3a645a28790bde40ed11ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr65583.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27674ca63c662a635f3a645a28790bde40ed11ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr65583.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr65583.C?ref=27674ca63c662a635f3a645a28790bde40ed11ab", "patch": "@@ -0,0 +1,140 @@\n+// PR sanitizer/65583\n+// { dg-do compile }\n+// { dg-options \"-std=c++11 -fsanitize=undefined\" }\n+\n+namespace std\n+{\n+  inline namespace __cxx11\n+  {\n+  }\n+  template < typename > class allocator;\n+    template < class _CharT > struct char_traits;\n+  namespace __cxx11\n+  {\n+    template < typename _CharT, typename _Traits =\n+      char_traits < _CharT >, typename _Alloc =\n+      allocator < _CharT > >class basic_string;\n+    typedef basic_string < char >string;\n+  }\n+}\n+namespace std\n+{\n+  template < typename _Tp, _Tp __v > struct integral_constant\n+  {\n+    static constexpr _Tp value = __v;\n+  };\n+  typedef integral_constant < bool, true > true_type;\n+}\n+namespace __gnu_cxx\n+{\n+  template < typename _Tp > class new_allocator\n+  {\n+  public:\n+    typedef long unsigned size_type;\n+    typedef _Tp value_type;\n+      template < typename _Tp1 > struct rebind\n+    {\n+      typedef new_allocator < _Tp1 > other;\n+    };\n+  };\n+}\n+namespace std\n+{\n+  template < typename _Tp > using __allocator_base =\n+    __gnu_cxx::new_allocator < _Tp >;\n+  template < typename _Tp > class allocator:public __allocator_base < _Tp >\n+  {\n+  };\n+  template < typename _Alloc, typename _Tp > class __alloctr_rebind_helper\n+  {\n+    template < typename _Alloc2, typename _Tp2 >\n+      static constexpr true_type _S_chk (typename _Alloc2::template rebind <\n+\t\t\t\t\t _Tp2 >::other *);\n+  public:\n+    using __type = decltype (_S_chk < _Alloc, _Tp > (nullptr));\n+  };\n+  template < typename _Alloc, typename _Tp, bool =\n+    __alloctr_rebind_helper < _Alloc,\n+    _Tp >::__type::value > struct __alloctr_rebind;\n+  template < typename _Alloc, typename _Tp > struct __alloctr_rebind <_Alloc,\n+    _Tp, true >\n+  {\n+    typedef typename _Alloc::template rebind < _Tp >::other __type;\n+  };\n+  template < typename _Alloc > struct allocator_traits\n+  {\n+    typedef typename _Alloc::value_type value_type;\n+    static value_type *_S_pointer_helper (...);\n+    typedef decltype (_S_pointer_helper ((_Alloc *) 0)) __pointer;\n+    typedef __pointer pointer;\n+      template < typename _Tp >\n+      static typename _Tp::size_type _S_size_type_helper (_Tp *);\n+    typedef decltype (_S_size_type_helper ((_Alloc *) 0)) __size_type;\n+    typedef __size_type size_type;\n+      template < typename _Tp > using rebind_alloc =\n+      typename __alloctr_rebind < _Alloc, _Tp >::__type;\n+  };\n+}\n+namespace __gnu_cxx\n+{\n+  template < typename _Alloc > struct __alloc_traits:std::allocator_traits <\n+    _Alloc >\n+  {\n+    typedef std::allocator_traits < _Alloc > _Base_type;\n+      template < typename _Tp > struct rebind\n+    {\n+      typedef typename _Base_type::template rebind_alloc < _Tp > other;\n+    };\n+  };\n+}\n+namespace std\n+{\n+  namespace __cxx11\n+  {\n+    template < typename _CharT, typename _Traits,\n+      typename _Alloc > class basic_string\n+    {\n+      typedef typename __gnu_cxx::__alloc_traits < _Alloc >::template rebind <\n+\t_CharT >::other _Char_alloc_type;\n+      typedef __gnu_cxx::__alloc_traits < _Char_alloc_type > _Alloc_traits;\n+      typedef _Char_alloc_type allocator_type;\n+      typedef typename _Alloc_traits::size_type size_type;\n+      typedef typename _Alloc_traits::pointer pointer;\n+      struct _Alloc_hider:allocator_type\n+      {\n+\t_Alloc_hider (pointer __dat, const _Alloc & __a)\n+\t{\n+\t}\n+      };\n+      _Alloc_hider _M_dataplus;\n+      union\n+      {\n+\tsize_type _M_allocated_capacity;\n+      };\n+      pointer _M_local_data ()\n+      {\n+      }\n+      void _M_dispose ()\n+      {\n+\t_M_destroy (_M_allocated_capacity);\n+      }\n+      void _M_destroy (size_type __size) throw ()\n+      {\n+      }\n+    public:\n+    basic_string (const _CharT * __s, const _Alloc & __a = _Alloc ()):_M_dataplus (_M_local_data (),\n+\t\t   __a)\n+      {\n+\t_M_dispose ();\n+      }\n+    };\n+  }\n+  class FileHandle\n+  {\n+    std::string fname;\n+    FileHandle (const char *fname);\n+  };\n+  FileHandle::FileHandle (const char *fname):fname (fname)\n+  {\n+  }\n+}"}, {"sha": "b9d9f30e66028f735fcf949072f5b691039c3581", "filename": "gcc/ubsan.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27674ca63c662a635f3a645a28790bde40ed11ab/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27674ca63c662a635f3a645a28790bde40ed11ab/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=27674ca63c662a635f3a645a28790bde40ed11ab", "patch": "@@ -686,6 +686,21 @@ is_ubsan_builtin_p (tree t)\n \t\t     \"__builtin___ubsan_\", 18) == 0;\n }\n \n+/* Create a callgraph edge for statement STMT.  */\n+\n+static void\n+ubsan_create_edge (gimple stmt)\n+{\n+  gcall *call_stmt = dyn_cast <gcall *> (stmt);\n+  basic_block bb = gimple_bb (stmt);\n+  int freq = compute_call_stmt_bb_frequency (current_function_decl, bb);\n+  cgraph_node *node = cgraph_node::get (current_function_decl);\n+  tree decl = gimple_call_fndecl (call_stmt);\n+  if (decl)\n+    node->create_edge (cgraph_node::get_create (decl), call_stmt, bb->count,\n+\t\t       freq);\n+}\n+\n /* Expand the UBSAN_BOUNDS special builtin function.  */\n \n bool\n@@ -1483,6 +1498,7 @@ instrument_bool_enum_load (gimple_stmt_iterator *gsi)\n     }\n   gimple_set_location (g, loc);\n   gsi_insert_before (&gsi2, g, GSI_SAME_STMT);\n+  ubsan_create_edge (g);\n   *gsi = gsi_for_stmt (stmt);\n }\n \n@@ -1670,6 +1686,7 @@ instrument_nonnull_arg (gimple_stmt_iterator *gsi)\n \t    }\n \t  gimple_set_location (g, loc[0]);\n \t  gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+\t  ubsan_create_edge (g);\n \t}\n       *gsi = gsi_for_stmt (stmt);\n     }\n@@ -1722,6 +1739,7 @@ instrument_nonnull_return (gimple_stmt_iterator *gsi)\n \t}\n       gimple_set_location (g, loc[0]);\n       gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+      ubsan_create_edge (g);\n       *gsi = gsi_for_stmt (stmt);\n     }\n   flag_delete_null_pointer_checks = save_flag_delete_null_pointer_checks;\n@@ -1818,6 +1836,7 @@ instrument_object_size (gimple_stmt_iterator *gsi, bool is_lhs)\n \n   tree sizet;\n   tree base_addr = base;\n+  gimple bos_stmt = NULL;\n   if (decl_p)\n     base_addr = build1 (ADDR_EXPR,\n \t\t\tbuild_pointer_type (TREE_TYPE (base)), base);\n@@ -1834,6 +1853,17 @@ instrument_object_size (gimple_stmt_iterator *gsi, bool is_lhs)\n \t\t\t\t   integer_zero_node);\n       sizet = force_gimple_operand_gsi (gsi, sizet, false, NULL_TREE, true,\n \t\t\t\t\tGSI_SAME_STMT);\n+      /* If the call above didn't end up being an integer constant, go one\n+\t statement back and get the __builtin_object_size stmt.  Save it,\n+\t we might need it later.  */\n+      if (SSA_VAR_P (sizet))\n+\t{\n+\t  gsi_prev (gsi);\n+\t  bos_stmt = gsi_stmt (*gsi);\n+\n+\t  /* Move on to where we were.  */\n+\t  gsi_next (gsi);\n+\t}\n     }\n   else\n     return;\n@@ -1870,7 +1900,10 @@ instrument_object_size (gimple_stmt_iterator *gsi, bool is_lhs)\n \t}\n     }\n \n-  /* Nope.  Emit the check.  */\n+  if (bos_stmt && gimple_call_builtin_p (bos_stmt, BUILT_IN_OBJECT_SIZE))\n+    ubsan_create_edge (bos_stmt);\n+\n+  /* We have to emit the check.  */\n   t = force_gimple_operand_gsi (gsi, t, true, NULL_TREE, true,\n \t\t\t\tGSI_SAME_STMT);\n   ptr = force_gimple_operand_gsi (gsi, ptr, true, NULL_TREE, true,"}]}