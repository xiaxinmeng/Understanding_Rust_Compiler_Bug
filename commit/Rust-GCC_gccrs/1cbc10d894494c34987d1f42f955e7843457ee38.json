{"sha": "1cbc10d894494c34987d1f42f955e7843457ee38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNiYzEwZDg5NDQ5NGMzNDk4N2QxZjQyZjk1NWU3ODQzNDU3ZWUzOA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-02-04T17:53:59Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-02-05T15:43:51Z"}, "message": "c++: Fix ICE with invalid using enum [PR96462]\n\nHere we ICE in finish_nonmember_using_decl -> lookup_using_decl ->\n... -> find_namespace_slot because \"name\" is not an IDENTIFIER_NODE.\nIt is a BIT_NOT_EXPR because this broken test uses\n\n  using E::~E; // SCOPE::NAME\n\nA using-decl can't refer to a destructor, and lookup_using_decl already\nchecks that in the class member case.  But in C++17, we do the \"enum\nscope is the enclosing scope\" block, and so scope gets set to ::, and\nwe go into the NAMESPACE_DECL block.  In C++20 we don't do it, we go\nto the ENUMERAL_TYPE block.\n\nI resorted to hoisting the check along with a diagnostic tweak: we\ndon't want to print \"::::~E names destructor\".\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96462\n\t* name-lookup.c (lookup_using_decl): Hoist the destructor check.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96462\n\t* g++.dg/cpp2a/using-enum-8.C: New test.", "tree": {"sha": "1a48393c2e2dc80343d456b718a56b522304efec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a48393c2e2dc80343d456b718a56b522304efec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cbc10d894494c34987d1f42f955e7843457ee38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cbc10d894494c34987d1f42f955e7843457ee38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cbc10d894494c34987d1f42f955e7843457ee38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cbc10d894494c34987d1f42f955e7843457ee38/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6606b852bfa866c19375a7c5e9cb94776a28bd94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6606b852bfa866c19375a7c5e9cb94776a28bd94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6606b852bfa866c19375a7c5e9cb94776a28bd94"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "1f4a7ac1d0cb559e9c649d6784ca4d2372e485fd", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cbc10d894494c34987d1f42f955e7843457ee38/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cbc10d894494c34987d1f42f955e7843457ee38/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=1cbc10d894494c34987d1f42f955e7843457ee38", "patch": "@@ -5700,6 +5700,14 @@ lookup_using_decl (tree scope, name_lookup &lookup)\n \tscope = ctx;\n     }\n \n+  /* You cannot using-decl a destructor.  */\n+  if (TREE_CODE (lookup.name) == BIT_NOT_EXPR)\n+    {\n+      error (\"%<%T%s%D%> names destructor\", scope,\n+\t     &\"::\"[scope == global_namespace ? 2 : 0], lookup.name);\n+      return NULL_TREE;\n+    }\n+\n   if (TREE_CODE (scope) == NAMESPACE_DECL)\n     {\n       /* Naming a namespace member.  */\n@@ -5739,13 +5747,6 @@ lookup_using_decl (tree scope, name_lookup &lookup)\n \t  return NULL_TREE;\n \t}\n \n-      /* You cannot using-decl a destructor.  */\n-      if (TREE_CODE (lookup.name) == BIT_NOT_EXPR)\n-\t{\n-\t  error (\"%<%T::%D%> names destructor\", scope, lookup.name);\n-\t  return NULL_TREE;\n-\t}\n-\n       /* Using T::T declares inheriting ctors, even if T is a typedef.  */\n       if (lookup.name == TYPE_IDENTIFIER (npscope)\n \t  || constructor_name_p (lookup.name, npscope))"}, {"sha": "9a743a98399626521716f45fdd94933124815946", "filename": "gcc/testsuite/g++.dg/cpp2a/using-enum-8.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cbc10d894494c34987d1f42f955e7843457ee38/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fusing-enum-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cbc10d894494c34987d1f42f955e7843457ee38/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fusing-enum-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fusing-enum-8.C?ref=1cbc10d894494c34987d1f42f955e7843457ee38", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/96462\n+// { dg-do compile { target c++11 } }\n+\n+enum E {};\n+using E::~E; // { dg-error \"names destructor\" }"}]}